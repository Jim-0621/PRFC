File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -302,8 +302,8 @@ public void run () {
 
 	@Override
 	protected void onDestroy () {
-		super.onDestroy();
 		keyboardHeightProvider.close();
+		super.onDestroy();
 	}
 
 	@Override

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/keyboardheight/AndroidXKeyboardHeightProvider.java
Patch:
@@ -63,7 +63,8 @@ public WindowInsetsCompat onApplyWindowInsets (@NotNull View v, @NotNull WindowI
 
 	@Override
 	public void close () {
-		ViewCompat.setOnApplyWindowInsetsListener(view, null);
+		if (view != null) ViewCompat.setOnApplyWindowInsetsListener(view, null);
+		this.observer = null;
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Dialog.java
Patch:
@@ -76,7 +76,7 @@ private void initialize () {
 		setModal(true);
 
 		defaults().space(6);
-		add(contentTable = new Table(skin)).expand().fill();
+		add(contentTable = new Table(skin)).grow();
 		row();
 		add(buttonTable = new Table(skin)).fillX();
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java
Patch:
@@ -45,7 +45,7 @@ public TextButton (@Null String text, TextButtonStyle style) {
 		setStyle(style);
 		label = newLabel(text, new LabelStyle(style.font, style.fontColor));
 		label.setAlignment(Align.center);
-		add(label).expand().fill();
+		add(label).grow();
 		setSize(getPrefWidth(), getPrefHeight());
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -76,7 +76,7 @@ public void draw (Batch batch, float parentAlpha) {
 				if (drawTitleTable) super.draw(batch, parentAlpha);
 			}
 		};
-		titleTable.add(titleLabel).expandX().fillX().minWidth(0);
+		titleTable.add(titleLabel).growX().minWidth(0);
 		addActor(titleTable);
 
 		setStyle(style);

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl3/Lwjgl3TestStarter.java
Patch:
@@ -151,7 +151,7 @@ public void changed (ChangeEvent event, Actor actor) {
 				});
 			}
 
-			container.add(scroll).expand().fill();
+			container.add(scroll).grow();
 			container.row();
 
 			lastClickedTestButton = (TextButton)table.findActor(prefs.getString("LastTest"));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AbstractTestWrapper.java
Patch:
@@ -63,7 +63,7 @@ public void create () {
 		container.debug();
 		Table table = new Table();
 		ScrollPane scroll = new ScrollPane(table);
-		container.add(scroll).expand().fill();
+		container.add(scroll).grow();
 		container.setFillParent(true);
 		table.pad(10).defaults().expandX().space(4);
 		Arrays.sort(tests, new Comparator<Instancer>() {
@@ -85,7 +85,7 @@ public void changed (ChangeEvent event, Actor actor) {
 					test.resize(Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 				}
 			});
-			table.add(button).expandX().fillX();
+			table.add(button).growX();
 		}
 		container.row();
 		container.add(new Label("Click on a test to start it, press ESC or tap the upper left corner to close it.",

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ContainerTest.java
Patch:
@@ -71,7 +71,7 @@ public void create () {
 
 	Table label (String text) {
 		Table table = new Table().debug();
-		table.add(new Label(text, skin)).fill().expand();
+		table.add(new Label(text, skin)).grow();
 		return table;
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GroupCullingTest.java
Patch:
@@ -46,7 +46,7 @@ public void create () {
 		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 
 		Table labels = new Table();
-		root.add(new ScrollPane(labels, skin)).expand().fill();
+		root.add(new ScrollPane(labels, skin)).grow();
 		root.row();
 		root.add(drawnLabel = new Label("", skin));
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPaneTest.java
Patch:
@@ -63,7 +63,7 @@ public boolean touchDown (InputEvent event, float x, float y, int pointer, int b
 		table.pad(10).defaults().expandX().space(4);
 		for (int i = 0; i < 100; i++) {
 			table.row();
-			table.add(new Label(i + "uno", skin)).expandX().fillX();
+			table.add(new Label(i + "uno", skin)).growX();
 
 			TextButton button = new TextButton(i + "dos", skin);
 			table.add(button);
@@ -111,7 +111,7 @@ public void changed (ChangeEvent event, Actor actor) {
 			}
 		});
 
-		container.add(scroll).expand().fill().colspan(4);
+		container.add(scroll).grow().colspan(4);
 		container.row().space(10).padBottom(10);
 		container.add(flickButton).right().expandX();
 		container.add(onTopButton);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPaneTextAreaTest.java
Patch:
@@ -27,7 +27,7 @@ public void create () {
 		stage.addActor(container);
 
 		container.setFillParent(true);
-		container.pad(10).defaults().expandX().fillX().space(4);
+		container.pad(10).defaults().growX().space(4);
 
 		textArea = new TextArea(">>> FIRST LINE <<<\n" + "Scrolling to the bottom of the area you should see the last line.\n"
 			+ "Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n"

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TreeTest.java
Patch:
@@ -95,7 +95,7 @@ public void clicked (InputEvent event, float x, float y) {
 			}
 		});
 
-		table.add(tree).fill().expand();
+		table.add(tree).grow();
 	}
 
 	public void render () {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -163,12 +163,12 @@ public void changed (ChangeEvent event, Actor actor) {
 		window.add(slider).minWidth(100).fillX().colspan(3);
 		window.row();
 		window.add(selectBox).maxWidth(100);
-		window.add(textfield).minWidth(100).expandX().fillX().colspan(3);
+		window.add(textfield).minWidth(100).growX().colspan(3);
 		window.row();
-		window.add(splitPane).fill().expand().colspan(4).maxHeight(200);
+		window.add(splitPane).grow().colspan(4).maxHeight(200);
 		window.row();
 		window.add(passwordLabel).colspan(2);
-		window.add(passwordTextField).minWidth(100).expandX().fillX().colspan(2);
+		window.add(passwordTextField).minWidth(100).growX().colspan(2);
 		window.row();
 		window.add(fpsLabel).colspan(4);
 		window.pack();

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/BatchTiledMapRenderer.java
Patch:
@@ -337,8 +337,7 @@ protected float getImageLayerColor (TiledMapImageLayer layer, Color batchColor)
 	 * multiplying is against the batchColor
 	 *
 	 * @param layer
-	 * @param batchColor
-	 * @return */
+	 * @param batchColor */
 	protected float getTileLayerColor (TiledMapTileLayer layer, Color batchColor) {
 		return Color.toFloatBits(batchColor.r * layer.getCombinedTintColor().r, batchColor.g * layer.getCombinedTintColor().g,
 			batchColor.b * layer.getCombinedTintColor().b, batchColor.a * layer.getCombinedTintColor().a * layer.getOpacity());

File: gdx/src/com/badlogic/gdx/utils/ShortArray.java
Patch:
@@ -212,7 +212,7 @@ public int indexOf (short value) {
 		return -1;
 	}
 
-	public int lastIndexOf (char value) {
+	public int lastIndexOf (short value) {
 		short[] items = this.items;
 		for (int i = size - 1; i >= 0; i--)
 			if (items[i] == value) return i;

File: gdx/src/com/badlogic/gdx/maps/tiled/TmjMapLoader.java
Patch:
@@ -34,7 +34,6 @@
 public class TmjMapLoader extends BaseTmjMapLoader<BaseTmjMapLoader.Parameters> {
 
 	public static class Parameters extends BaseTmjMapLoader.Parameters {
-
 	}
 
 	public TmjMapLoader () {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -319,6 +319,7 @@ public class GdxTests {
 		TiledMapBench.class,
 		TiledMapLayerOffsetTest.class,
 		TiledMapLayerTintOpacityTest.class,
+		TiledMapPropertiesTest.class,
 		TiledMapJsonFormatTest.class,
 		TiledMapJsonObjectLoadingTest.class,
 		TimerTest.class,

File: gdx/src/com/badlogic/gdx/graphics/Color.java
Patch:
@@ -116,7 +116,7 @@ public Color set (Color color) {
 	}
 
 	/** Sets this color to the red, green and blue components of the provided Color and a deviating alpha value.
-	 * 
+	 *
 	 * @param rgb the desired red, green and blue values (alpha of that Color is ignored)
 	 * @param alpha the desired alpha value (will be clamped to the range [0, 1])
 	 * @return this color. */
@@ -128,7 +128,7 @@ public Color set (Color rgb, float alpha) {
 		return this;
 	}
 
-	/** Multiplies the this color and the given color
+	/** Multiplies this color and the given color
 	 * 
 	 * @param color the color
 	 * @return this color. */

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java
Patch:
@@ -109,7 +109,7 @@ private void init (TiledMap map) {
 	@Override
 	public void renderTileLayer (TiledMapTileLayer layer) {
 		final Color batchColor = batch.getColor();
-		final float color = Color.toFloatBits(batchColor.r, batchColor.g, batchColor.b, batchColor.a * layer.getOpacity());
+		final float color = getTileLayerColor(layer, batchColor);
 
 		final int layerWidth = layer.getWidth();
 		final int layerHeight = layer.getHeight();
@@ -263,7 +263,8 @@ private void renderCell (final TiledMapTileLayer.Cell cell, final float x, final
 	@Override
 	public void renderImageLayer (TiledMapImageLayer layer) {
 		final Color batchColor = batch.getColor();
-		final float color = Color.toFloatBits(batchColor.r, batchColor.g, batchColor.b, batchColor.a * layer.getOpacity());
+
+		final float color = getImageLayerColor(layer, batchColor);
 
 		final float[] vertices = this.vertices;
 

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java
Patch:
@@ -48,7 +48,7 @@ public IsometricStaggeredTiledMapRenderer (TiledMap map, float unitScale, Batch
 	@Override
 	public void renderTileLayer (TiledMapTileLayer layer) {
 		final Color batchColor = batch.getColor();
-		final float color = Color.toFloatBits(batchColor.r, batchColor.g, batchColor.b, batchColor.a * layer.getOpacity());
+		final float color = getTileLayerColor(layer, batchColor);
 
 		final int layerWidth = layer.getWidth();
 		final int layerHeight = layer.getHeight();
@@ -192,7 +192,8 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 	@Override
 	public void renderImageLayer (TiledMapImageLayer layer) {
 		final Color batchColor = batch.getColor();
-		final float color = Color.toFloatBits(batchColor.r, batchColor.g, batchColor.b, batchColor.a * layer.getOpacity());
+
+		final float color = getImageLayerColor(layer, batchColor);
 
 		final float[] vertices = this.vertices;
 

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricTiledMapRenderer.java
Patch:
@@ -85,7 +85,7 @@ private Vector3 translateScreenToIso (Vector2 vec) {
 	@Override
 	public void renderTileLayer (TiledMapTileLayer layer) {
 		final Color batchColor = batch.getColor();
-		final float color = Color.toFloatBits(batchColor.r, batchColor.g, batchColor.b, batchColor.a * layer.getOpacity());
+		final float color = getTileLayerColor(layer, batchColor);
 
 		float tileWidth = layer.getTileWidth() * unitScale;
 		float tileHeight = layer.getTileHeight() * unitScale;
@@ -236,7 +236,8 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 	@Override
 	public void renderImageLayer (TiledMapImageLayer layer) {
 		final Color batchColor = batch.getColor();
-		final float color = Color.toFloatBits(batchColor.r, batchColor.g, batchColor.b, batchColor.a * layer.getOpacity());
+
+		final float color = getImageLayerColor(layer, batchColor);
 
 		final float[] vertices = this.vertices;
 

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer.java
Patch:
@@ -66,7 +66,7 @@ public OrthogonalTiledMapRenderer (TiledMap map, float unitScale, Batch batch) {
 	@Override
 	public void renderTileLayer (TiledMapTileLayer layer) {
 		final Color batchColor = batch.getColor();
-		final float color = Color.toFloatBits(batchColor.r, batchColor.g, batchColor.b, batchColor.a * layer.getOpacity());
+		final float color = getTileLayerColor(layer, batchColor);
 
 		final int layerWidth = layer.getWidth();
 		final int layerHeight = layer.getHeight();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -318,6 +318,7 @@ public class GdxTests {
 		TiledMapObjectPropertyTest.class,
 		TiledMapBench.class,
 		TiledMapLayerOffsetTest.class,
+		TiledMapLayerTintOpacityTest.class,
 		TiledMapJsonFormatTest.class,
 		TiledMapJsonObjectLoadingTest.class,
 		TimerTest.class,

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/PreloaderBundleGenerator.java
Patch:
@@ -99,7 +99,7 @@ public String generate (TreeLogger logger, GeneratorContext context, String type
 				FileWrapper dest = target.child(orig.name());
 				try {
 					InputStream resourceStream = context.getClass().getClassLoader().getResourceAsStream(classpathFile);
-					copy(resourceStream, dest.path(), dest, assetFilter, assets);
+					copy(resourceStream, orig.path(), dest, assetFilter, assets);
 				} catch (IOException e) {
 					e.printStackTrace();
 				}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -318,6 +318,8 @@ public class GdxTests {
 		TiledMapObjectPropertyTest.class,
 		TiledMapBench.class,
 		TiledMapLayerOffsetTest.class,
+		TiledMapJsonFormatTest.class,
+		TiledMapJsonObjectLoadingTest.class,
 		TimerTest.class,
 		TimeUtilsTest.class,
 		TouchpadTest.class,

File: backends/gdx-backend-robovm-metalangle/src/com/badlogic/gdx/backends/iosrobovm/IOSNet.java
Patch:
@@ -12,6 +12,7 @@
 import com.badlogic.gdx.net.ServerSocketHints;
 import com.badlogic.gdx.net.Socket;
 import com.badlogic.gdx.net.SocketHints;
+import org.robovm.apple.uikit.UIApplicationOpenURLOptions;
 
 /** DO NOT EDIT THIS FILE - it is machine generated */
 public class IOSNet implements Net {
@@ -59,7 +60,7 @@ public Socket newClientSocket (Protocol protocol, String host, int port, SocketH
 	public boolean openURI (String URI) {
 		NSURL url = new NSURL(URI);
 		if (uiApp.canOpenURL(url)) {
-			uiApp.openURL(url);
+			uiApp.openURL(url, new UIApplicationOpenURLOptions(), null);
 			return true;
 		}
 		return false;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSNet.java
Patch:
@@ -27,6 +27,7 @@
 import com.badlogic.gdx.net.ServerSocketHints;
 import com.badlogic.gdx.net.Socket;
 import com.badlogic.gdx.net.SocketHints;
+import org.robovm.apple.uikit.UIApplicationOpenURLOptions;
 
 public class IOSNet implements Net {
 
@@ -72,7 +73,7 @@ public Socket newClientSocket (Protocol protocol, String host, int port, SocketH
 	public boolean openURI (String URI) {
 		NSURL url = new NSURL(URI);
 		if (uiApp.canOpenURL(url)) {
-			uiApp.openURL(url);
+			uiApp.openURL(url, new UIApplicationOpenURLOptions(), null);
 			return true;
 		}
 		return false;

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Window.java
Patch:
@@ -238,6 +238,7 @@ public void postRunnable (Runnable runnable) {
 	/** Sets the position of the window in logical coordinates. All monitors span a virtual surface together. The coordinates are
 	 * relative to the first monitor in the virtual surface. **/
 	public void setPosition (int x, int y) {
+		if (GLFW.glfwGetPlatform() == GLFW.GLFW_PLATFORM_WAYLAND) return;
 		GLFW.glfwSetWindowPos(windowHandle, x, y);
 	}
 
@@ -325,6 +326,7 @@ static void setIcon (long windowHandle, String[] imagePaths, Files.FileType imag
 
 	static void setIcon (long windowHandle, Pixmap[] images) {
 		if (SharedLibraryLoader.os == Os.MacOsX) return;
+		if (GLFW.glfwGetPlatform() == GLFW.GLFW_PLATFORM_WAYLAND) return;
 
 		GLFWImage.Buffer buffer = GLFWImage.malloc(images.length);
 		Pixmap[] tmpPixmaps = new Pixmap[images.length];

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -110,7 +110,7 @@ protected Array<FileHandle> getDependencyFileHandles (FileHandle tmxFile) {
 		Array<FileHandle> fileHandles = new Array<FileHandle>();
 
 		// TileSet descriptors
-		for (Element tileset : root.getChildrenByName("tileset")) {
+		for (Element tileset : root.getChildrenByNameRecursively("tileset")) {
 			String source = tileset.getAttribute("source", null);
 			if (source != null) {
 				FileHandle tsxFile = getRelativeFileHandle(tmxFile, source);
@@ -144,7 +144,7 @@ protected Array<FileHandle> getDependencyFileHandles (FileHandle tmxFile) {
 		}
 
 		// ImageLayer descriptors
-		for (Element imageLayer : root.getChildrenByName("imagelayer")) {
+		for (Element imageLayer : root.getChildrenByNameRecursively("imagelayer")) {
 			Element image = imageLayer.getChildByName("image");
 			String source = image.getAttribute("source", null);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -309,6 +309,7 @@ public class GdxTests {
 		TiledMapAnimationLoadingTest.class,
 		TiledMapAssetManagerTest.class,
 		TiledMapGroupLayerTest.class,
+		TiledMapGroupLayerWithImagelayerTest.class,
 		TiledMapAtlasAssetManagerTest.class,
 		TiledMapDirectLoaderTest.class,
 		TiledMapImageLayerRepeatTest.class,

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLSurfaceView20.java
Patch:
@@ -79,7 +79,7 @@ public InputConnection onCreateInputConnection (EditorInfo outAttrs) {
 		// add this line, the IME can show the selectable words when use chinese input method editor.
 		if (outAttrs != null) {
 			outAttrs.imeOptions = outAttrs.imeOptions | EditorInfo.IME_FLAG_NO_EXTRACT_UI;
-			outAttrs.inputType = DefaultAndroidInput.getAndroidInputType(onscreenKeyboardType);
+			outAttrs.inputType = DefaultAndroidInput.getAndroidInputType(onscreenKeyboardType, true);
 		}
 
 		BaseInputConnection connection = new BaseInputConnection(this, false) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -311,6 +311,7 @@ public class GdxTests {
 		TiledMapGroupLayerTest.class,
 		TiledMapAtlasAssetManagerTest.class,
 		TiledMapDirectLoaderTest.class,
+		TiledMapImageLayerRepeatTest.class,
 		TiledMapModifiedExternalTilesetTest.class,
 		TiledMapObjectLoadingTest.class,
 		TiledMapObjectPropertyTest.class,

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/AndroidTestStarter.java
Patch:
@@ -28,6 +28,7 @@
 import android.widget.ArrayAdapter;
 import android.widget.ListView;
 
+import com.badlogic.gdx.tests.BackTest;
 import com.badlogic.gdx.tests.utils.GdxTests;
 
 public class AndroidTestStarter extends ListActivity {
@@ -36,8 +37,9 @@ public class AndroidTestStarter extends ListActivity {
 	@Override
 	public void onCreate (Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
-		GdxTests.tests.add(MatrixTest.class);
+		if (!GdxTests.tests.contains(MatrixTest.class)) GdxTests.tests.add(MatrixTest.class);
 		if (!GdxTests.tests.contains(APKExpansionTest.class)) GdxTests.tests.add(APKExpansionTest.class);
+		if (!GdxTests.tests.contains(BackTest.class)) GdxTests.tests.add(BackTest.class);
 		List<String> testNames = GdxTests.getNames();
 		setListAdapter(new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, testNames));
 

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Graphics.java
Patch:
@@ -73,7 +73,7 @@ public class Lwjgl3Graphics extends AbstractGraphics implements Disposable {
 	GLFWFramebufferSizeCallback resizeCallback = new GLFWFramebufferSizeCallback() {
 		@Override
 		public void invoke (long windowHandle, final int width, final int height) {
-			if (!Configuration.GLFW_LIBRARY_NAME.get().equals("glfw_async")) {
+			if (!"glfw_async".equals(Configuration.GLFW_LIBRARY_NAME.get())) {
 				updateFramebufferInfo();
 				if (!window.isListenerInitialized()) {
 					return;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCursor.java
Patch:
@@ -4,6 +4,7 @@
 import java.nio.ByteOrder;
 import java.nio.IntBuffer;
 
+import com.badlogic.gdx.utils.Os;
 import org.lwjgl.LWJGLException;
 
 import com.badlogic.gdx.Gdx;
@@ -16,7 +17,7 @@ public class LwjglCursor implements Cursor {
 	org.lwjgl.input.Cursor lwjglCursor = null;
 
 	public LwjglCursor (Pixmap pixmap, int xHotspot, int yHotspot) {
-		if (((LwjglGraphics)Gdx.graphics).canvas != null && SharedLibraryLoader.isMac) {
+		if (((LwjglGraphics)Gdx.graphics).canvas != null && SharedLibraryLoader.os == Os.MacOsX) {
 			return;
 		}
 		try {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -24,6 +24,7 @@
 import com.badlogic.gdx.AbstractGraphics;
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.graphics.glutils.GLVersion;
+import com.badlogic.gdx.utils.Os;
 import org.lwjgl.LWJGLException;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.ContextAttribs;
@@ -736,7 +737,7 @@ public com.badlogic.gdx.graphics.Cursor newCursor (Pixmap pixmap, int xHotspot,
 
 	@Override
 	public void setCursor (com.badlogic.gdx.graphics.Cursor cursor) {
-		if (canvas != null && SharedLibraryLoader.isMac) {
+		if (canvas != null && SharedLibraryLoader.os == Os.MacOsX) {
 			return;
 		}
 		try {
@@ -748,7 +749,7 @@ public void setCursor (com.badlogic.gdx.graphics.Cursor cursor) {
 
 	@Override
 	public void setSystemCursor (SystemCursor systemCursor) {
-		if (canvas != null && SharedLibraryLoader.isMac) {
+		if (canvas != null && SharedLibraryLoader.os == Os.MacOsX) {
 			return;
 		}
 		try {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Net.java
Patch:
@@ -27,6 +27,7 @@
 import com.badlogic.gdx.net.ServerSocketHints;
 import com.badlogic.gdx.net.Socket;
 import com.badlogic.gdx.net.SocketHints;
+import com.badlogic.gdx.utils.Os;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
 /** LWJGL implementation of the {@link Net} API, it could be reused in other Desktop backends since it doesn't depend on LWJGL.
@@ -71,7 +72,7 @@ public Socket newClientSocket (Protocol protocol, String host, int port, SocketH
 
 	@Override
 	public boolean openURI (String uri) {
-		if (SharedLibraryLoader.isMac) {
+		if (SharedLibraryLoader.os == Os.MacOsX) {
 			try {
 				(new ProcessBuilder("open", (new URI(uri).toString()))).start();
 				return true;
@@ -85,7 +86,7 @@ public boolean openURI (String uri) {
 			} catch (Throwable t) {
 				return false;
 			}
-		} else if (SharedLibraryLoader.isLinux) {
+		} else if (SharedLibraryLoader.os == Os.Linux) {
 			try {
 				(new ProcessBuilder("xdg-open", (new URI(uri).toString()))).start();
 				return true;

File: extensions/gdx-lwjgl3-glfw-awt-macos/src/com/badlogic/gdx/backends/lwjgl3/awt/GlfwAWTLoader.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.UUID;
 import java.util.zip.CRC32;
 
+import com.badlogic.gdx.utils.Architecture;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
@@ -176,7 +177,8 @@ public void run () {
 			}
 		}
 
-		String source = SharedLibraryLoader.isARM ? "macosarm64/libglfwarm64.dylib" : "macosx64/libglfw.dylib";
+		String source = SharedLibraryLoader.architecture == Architecture.ARM ? "macosarm64/libglfwarm64.dylib"
+			: "macosx64/libglfw.dylib";
 		String crc = crc(GlfwAWTLoader.class.getResourceAsStream("/" + source));
 		File sharedLib = getExtractedFile(crc, new File(source).getName());
 

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglTestStarter.java
Patch:
@@ -45,6 +45,7 @@
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.tests.utils.GdxTestWrapper;
 import com.badlogic.gdx.tests.utils.GdxTests;
+import com.badlogic.gdx.utils.Os;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
 public class LwjglTestStarter extends JFrame {
@@ -77,7 +78,7 @@ public static boolean runTest (String testName) {
 		config.forceExit = false;
 		if (useGL30) {
 			config.useGL30 = true;
-			if (!SharedLibraryLoader.isMac) {
+			if (SharedLibraryLoader.os != Os.MacOsX) {
 				config.gles30ContextMajorVersion = 4;
 				config.gles30ContextMinorVersion = 3;
 			}

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl3/AwtTestLWJGL.java
Patch:
@@ -10,6 +10,7 @@
 import javax.swing.*;
 
 import com.badlogic.gdx.backends.lwjgl3.awt.GlfwAWTLoader;
+import com.badlogic.gdx.utils.Os;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 import org.lwjgl.glfw.GLFWMouseButtonCallback;
 import org.lwjgl.opengl.GL;
@@ -52,7 +53,7 @@ public void run () {
 	};
 
 	public static void main (String[] args) throws Exception {
-		if (SharedLibraryLoader.isMac) {
+		if (SharedLibraryLoader.os == Os.MacOsX) {
 			Configuration.GLFW_CHECK_THREAD0.set(false);
 			Configuration.GLFW_LIBRARY_NAME.set(GlfwAWTLoader.load().getAbsolutePath());
 		}

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl3/Lwjgl3TestStarter.java
Patch:
@@ -36,6 +36,7 @@
 import com.badlogic.gdx.tests.utils.CommandLineOptions;
 import com.badlogic.gdx.tests.utils.GdxTestWrapper;
 import com.badlogic.gdx.tests.utils.GdxTests;
+import com.badlogic.gdx.utils.Os;
 import com.badlogic.gdx.utils.ScreenUtils;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 import com.badlogic.gdx.utils.viewport.ScreenViewport;
@@ -65,7 +66,7 @@ public static void main (String[] argv) {
 		} else if (options.gl31) {
 			config.setOpenGLEmulation(Lwjgl3ApplicationConfiguration.GLEmulation.GL31, 4, 5);
 		} else if (options.gl30) {
-			if (SharedLibraryLoader.isMac) {
+			if (SharedLibraryLoader.os == Os.MacOsX) {
 				config.setOpenGLEmulation(Lwjgl3ApplicationConfiguration.GLEmulation.GL30, 3, 2);
 			} else {
 				config.setOpenGLEmulation(Lwjgl3ApplicationConfiguration.GLEmulation.GL30, 4, 3);
@@ -74,7 +75,7 @@ public static void main (String[] argv) {
 			config.setOpenGLEmulation(Lwjgl3ApplicationConfiguration.GLEmulation.ANGLE_GLES20, 0, 0);
 			// Use CPU sync if ANGLE is enabled on macOS, otherwise the framerate gets halfed
 			// by each new open window.
-			if (SharedLibraryLoader.isMac) {
+			if (SharedLibraryLoader.os == Os.MacOsX) {
 				config.useVsync(false);
 				config.setForegroundFPS(60);
 			}

File: gdx/src/com/badlogic/gdx/Audio.java
Patch:
@@ -94,9 +94,9 @@ public interface Audio {
 	public boolean switchOutputDevice (@Null String deviceIdentifier);
 
 	/** This function returns a list of fully qualified Output device names. This function is only implemented on desktop and web.
-	 * Note that on gwt the {@link GwtApplicationConfiguration#fetchAvailableOutputDevices fetchAvailableOutputDevices} attribute
-	 * needs to be set to true for asking the user for permission! On all other platforms it will return an empty array. It will
-	 * also return an empty array on error. The names returned need os dependent preprocessing before exposing to a user.
+	 * Note that on gwt the GwtApplicationConfiguration#fetchAvailableOutputDevices attribute needs to be set to true for asking
+	 * the user for permission! On all other platforms it will return an empty array. It will also return an empty array on error.
+	 * The names returned need os dependent preprocessing before exposing to a user.
 	 *
 	 * @return A array of available output devices */
 	public String[] getAvailableOutputDevices ();

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplicationConfiguration.java
Patch:
@@ -76,6 +76,9 @@ public class GwtApplicationConfiguration {
 	/** whether to make the webgl context compatible with WebXR, may have positive performance impact **/
 	public boolean xrCompatible = false;
 
+	/** Whether to fetch available output devices. It asks the user automatically for permission */
+	public boolean fetchAvailableOutputDevices = false;
+
 	/** Creates configuration for a resizable application, using available browser window space minus padding (see
 	 * {@link #padVertical}, {@link #padHorizontal}). */
 	public GwtApplicationConfiguration () {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/Ogg.java
Patch:
@@ -31,13 +31,13 @@ public Music (OpenALLwjglAudio audio, FileHandle file) {
 			super(audio, file);
 			if (audio.noDevice) return;
 			input = new OggInputStream(file.read());
-			setup(input.getChannels(), input.getSampleRate());
+			setup(input.getChannels(), 16, input.getSampleRate());
 		}
 
 		public int read (byte[] buffer) {
 			if (input == null) {
 				input = new OggInputStream(file.read(), previousInput);
-				setup(input.getChannels(), input.getSampleRate());
+				setup(input.getChannels(), 16, input.getSampleRate());
 				previousInput = null; // release this reference
 			}
 			return input.read(buffer);
@@ -71,7 +71,7 @@ public Sound (OpenALLwjglAudio audio, FileHandle file) {
 					if (length == -1) break;
 					output.write(buffer, 0, length);
 				}
-				setup(output.toByteArray(), input.getChannels(), input.getSampleRate());
+				setup(output.toByteArray(), input.getChannels(), 16, input.getSampleRate());
 			} finally {
 				StreamUtils.closeQuietly(input);
 			}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -37,7 +37,8 @@
 
 public class SoundTest extends GdxTest {
 
-	private static final String[] FILENAMES = {"shotgun.ogg", "bubblepop.ogg", "bubblepop-stereo-left-only.wav"};
+	private static final String[] FILENAMES = {"shotgun.ogg", "shotgun-8bit.wav", "shotgun-32float.wav", "shotgun-64float.wav",
+		"quadraphonic.ogg", "quadraphonic.wav", "bubblepop.ogg", "bubblepop-stereo-left-only.wav"};
 
 	Sound sound;
 	float volume = 0.5f;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -79,6 +79,7 @@
 import com.badlogic.gdx.tests.g3d.TextureArrayTest;
 import com.badlogic.gdx.tests.g3d.TextureRegion3DTest;
 import com.badlogic.gdx.tests.g3d.utils.DefaultTextureBinderTest;
+import com.badlogic.gdx.tests.gles2.GlTexImage2D;
 import com.badlogic.gdx.tests.gles2.HelloTriangle;
 import com.badlogic.gdx.tests.gles2.SimpleVertexShader;
 import com.badlogic.gdx.tests.gles2.VertexArrayTest;
@@ -182,6 +183,7 @@ public class GdxTests {
 		GL32DebugControlTest.class,
 		GL32MultipleRenderTargetsBlendingTest.class,
 		GL32OffsetElementsTest.class,
+		GlTexImage2D.class,
 		GLProfilerErrorTest.class,
 		GroupCullingTest.class,
 		GroupFadeTest.class,

File: gdx/src/com/badlogic/gdx/math/ConvexHull.java
Patch:
@@ -55,6 +55,7 @@ public FloatArray computePolygon (float[] points, int offset, int count, boolean
 			System.arraycopy(points, offset, sortedPoints, 0, count);
 			points = sortedPoints;
 			offset = 0;
+			end = count;
 			sort(points, count);
 		}
 
@@ -105,6 +106,7 @@ public IntArray computeIndices (float[] points, int offset, int count, boolean s
 			System.arraycopy(points, offset, sortedPoints, 0, count);
 			points = sortedPoints;
 			offset = 0;
+			end = count;
 			sortWithIndices(points, count, yDown);
 		}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -276,6 +276,7 @@ public class GdxTests {
 		SortedSpriteTest.class,
 		SoundTest.class,
 		SpriteBatchRotationTest.class,
+		SpriteBatchPerformanceTest.class,
 		SpriteBatchShaderTest.class,
 		SpriteBatchTest.class,
 		SpriteCacheOffsetTest.class,

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -38,8 +38,8 @@ public class BitmapFontCache {
 
 	private final BitmapFont font;
 	private boolean integer;
-	private final Array<GlyphLayout> layouts = new Array();
-	private final Array<GlyphLayout> pooledLayouts = new Array();
+	private final Array<GlyphLayout> layouts = new Array(1);
+	private final Array<GlyphLayout> pooledLayouts = new Array(0);
 	private int glyphCount;
 	private float x, y;
 	private final Color color = new Color(1, 1, 1, 1);

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -86,7 +86,7 @@
  * <p>
  * The <code>Application</code> also has a set of methods that you can use to query specific information such as the operating
  * system the application is currently running on and so forth. This allows you to have operating system dependent code paths. It
- * is however not recommended to use this facilities.
+ * is however not recommended to use these facilities.
  * </p>
  * 
  * <p>

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ActorGestureListener.java
Patch:
@@ -114,11 +114,11 @@ public boolean handle (Event e) {
 			touchDown(event, tmpCoords.x, tmpCoords.y, event.getPointer(), event.getButton());
 			if (event.getTouchFocus()) event.getStage().addTouchFocus(this, event.getListenerActor(), event.getTarget(),
 				event.getPointer(), event.getButton());
-			actor = null;
 			return true;
 		case touchUp:
 			if (event.isTouchFocusCancel()) {
 				detector.reset();
+				actor = null;
 				touchDownTarget = null;
 				return false;
 			}
@@ -134,7 +134,6 @@ public boolean handle (Event e) {
 			this.event = event;
 			actor = event.getListenerActor();
 			detector.touchDragged(event.getStageX(), event.getStageY(), event.getPointer());
-			actor = null;
 			return true;
 		}
 		return false;

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -598,8 +598,9 @@ public FreeTypeBitmapFontData generateData (FreeTypeFontParameter parameter, Fre
 			}
 		}
 
-		Rectangle rect = packer.pack(mainPixmap);
-		glyph.page = packer.getPages().size - 1; // Glyph is always packed into the last page for now.
+		String pixmapName = glyph.hashCode() + "_" + glyph.id;
+		Rectangle rect = packer.pack(pixmapName, mainPixmap);
+		glyph.page = packer.getPageIndex(pixmapName);
 		glyph.srcX = (int)rect.x;
 		glyph.srcY = (int)rect.y;
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -837,7 +837,7 @@ public void scrollTo (float x, float y, float width, float height, boolean cente
 		if (centerHorizontal)
 			amountX = x + (width - actorArea.width) / 2;
 		else
-			amountX = MathUtils.clamp(amountX, x + width - actorArea.width, x);
+			amountX = MathUtils.clamp(amountX, x, x + width - actorArea.width);
 		scrollX(MathUtils.clamp(amountX, 0, maxX));
 
 		float amountY = this.amountY;

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -197,7 +197,8 @@ public static boolean intersectPolygons (Polygon p1, Polygon p2, Polygon overlap
 			floatArray2.addAll(floatArray);
 			floatArray.clear();
 		}
-		if (floatArray2.size != 0) {
+		// Check for 3 or more vertices needed due to floating point precision errors
+		if (floatArray2.size >= 6) {
 			if (overlap != null) {
 				if (overlap.getVertices().length == floatArray2.size)
 					System.arraycopy(floatArray2.items, 0, overlap.getVertices(), 0, floatArray2.size);

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Graphics.java
Patch:
@@ -100,6 +100,7 @@ private void renderWindow (long windowHandle, final int width, final int height)
 		window.makeCurrent();
 		gl20.glViewport(0, 0, backBufferWidth, backBufferHeight);
 		window.getListener().resize(getWidth(), getHeight());
+		update();
 		window.getListener().render();
 		GLFW.glfwSwapBuffers(windowHandle);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -226,6 +226,7 @@ public class GdxTests {
 		NonPowerOfTwoTest.class,
 		OctreeTest.class,
 		OnscreenKeyboardTest.class,
+		NativeInputTest.class,
 		OrientedBoundingBoxTest.class,
 		PathTest.class,
 		ParallaxTest.class,

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -16,10 +16,12 @@
 
 package com.badlogic.gdx.backends.android;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Debug;
 import android.os.Handler;

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java
Patch:
@@ -144,7 +144,8 @@ void generate () {
 		boolean matches = matcher.matches();
 
 		if (!matches) {
-			JOptionPane.showMessageDialog(this, "Invalid package name");
+			JOptionPane.showMessageDialog(this,
+				"Invalid package name. Please check the following:\nMake sure there are at least 2 separate segments in the package name (1 or more dots).\nEnsure that the first segment does NOT start with a number or underscore.\nEnsure all characters are lowercase a-z, numbers, or an underscore.");
 			return;
 		}
 

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -90,7 +90,8 @@ public enum ProjectDependency {
 				"com.mobidevelop.robovm:robovm-cocoatouch:$roboVMVersion", "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion",
 				"com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"},
 			new String[] {"com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion", "com.badlogicgames.gdx:gdx:$gdxVersion:sources",
-				"com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"},
+				"com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources",
+				"com.google.jsinterop:jsinterop-annotations:2.0.2:sources"},
 			new String[] {"com.badlogic.gdx.backends.gdx_backends_gwt"},
 
 			"Core Library for libGDX"), BULLET(new String[] {"com.badlogicgames.gdx:gdx-bullet:$gdxVersion"},

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -22,6 +22,7 @@
 import com.badlogic.gdx.graphics.g2d.Batch;
 import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
 import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
+import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.math.Rectangle;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.Touchable;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextArea.java
Patch:
@@ -117,7 +117,7 @@ public float getPrefHeight () {
 		} else {
 			// without ceil we might end up with one less row then expected
 			// due to how linesShowing is calculated in #sizeChanged and #getHeight() returning rounded value
-			float prefHeight = MathUtils.ceil(style.font.getLineHeight() * prefRows);
+			float prefHeight = (float)Math.ceil(style.font.getLineHeight() * prefRows);
 			if (style.background != null) {
 				prefHeight = Math.max(prefHeight + style.background.getBottomHeight() + style.background.getTopHeight(),
 					style.background.getMinHeight());

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -28,7 +28,7 @@ public class DependencyBank {
 	static String buildToolsVersion = "33.0.2";
 	static String androidAPILevel = "33";
 	static String androidMinAPILevel = "14";
-	static String gwtVersion = "2.8.2";
+	static String gwtVersion = "2.10.0";
 
 	// Repositories
 	static String mavenLocal = "mavenLocal()";
@@ -40,7 +40,7 @@ public class DependencyBank {
 	static String jitpackUrl = "https://jitpack.io";
 
 	// Project plugins
-	static String gwtPluginImport = "org.wisepersist:gwt-gradle-plugin:1.1.16";
+	static String gwtPluginImport = "org.docstr:gwt-gradle-plugin:1.1.29";
 	static String grettyPluginImport = "org.gretty:gretty:3.0.7";
 	static String androidPluginImport = "com.android.tools.build:gradle:7.3.1";
 	static String roboVMPluginImport = "com.mobidevelop.robovm:robovm-gradle-plugin:" + roboVMVersion;

File: gdx/src/com/badlogic/gdx/graphics/g2d/GlyphLayout.java
Patch:
@@ -446,12 +446,13 @@ private void setLastGlyphXAdvance (BitmapFontData fontData, GlyphRun run) {
 
 	/** Returns the distance from the glyph's drawing position to the right edge of the glyph. */
 	private float getGlyphWidth (Glyph glyph, BitmapFontData fontData) {
-		return (glyph.width + glyph.xoffset) * fontData.scaleX - fontData.padRight;
+		return (glyph.fixedWidth ? glyph.xadvance : glyph.width + glyph.xoffset) * fontData.scaleX - fontData.padRight;
 	}
 
 	/** Returns an X offset for the first glyph so when drawn, none of it is left of the line's drawing position. */
 	private float getLineOffset (Array<Glyph> glyphs, BitmapFontData fontData) {
-		return -glyphs.first().xoffset * fontData.scaleX - fontData.padLeft;
+		Glyph first = glyphs.first();
+		return (first.fixedWidth ? 0 : -first.xoffset * fontData.scaleX) - fontData.padLeft;
 	}
 
 	private int parseColorMarkup (CharSequence str, int start, int end) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextAreaTest.java
Patch:
@@ -35,7 +35,8 @@ public void create () {
 		stage = new Stage();
 		Gdx.input.setInputProcessor(stage);
 		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
-		TextArea textArea = new TextArea("Text Area\nEssentially, a text field\nwith\nmultiple\nlines.\n"
+		skin.getFont("default-font").setFixedWidthGlyphs("0123456789");
+		TextArea textArea = new TextArea("Text Area\n1111111111\n0123456789\nEssentially, a text field\nwith\nmultiple\nlines.\n"
 			+ "It can even handle very loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong lines.",
 			skin);
 		textArea.setX(10);

File: gdx/src/com/badlogic/gdx/math/Vector.java
Patch:
@@ -23,12 +23,12 @@ public interface Vector<T extends Vector<T>> {
 	/** @return a copy of this vector */
 	T cpy ();
 
-	/** @return The euclidean length */
+	/** @return The Euclidean length */
 	float len ();
 
 	/** This method is faster than {@link Vector#len()} because it avoids calculating a square root. It is useful for comparisons,
 	 * but not for getting exact lengths, as the return value is the square of the actual length.
-	 * @return The squared euclidean length */
+	 * @return The squared Euclidean length */
 	float len2 ();
 
 	/** Limits the length of this vector, based on the desired maximum length.

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -56,6 +56,7 @@
 import com.badlogic.gdx.utils.ObjectMap;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 import org.lwjgl.system.Configuration;
+import org.lwjgl.system.ThreadLocalUtil;
 
 public class Lwjgl3Application implements Lwjgl3ApplicationBase {
 	private final Lwjgl3ApplicationConfiguration config;
@@ -562,6 +563,8 @@ static long createGlfwWindow (Lwjgl3ApplicationConfiguration config, long shared
 			try {
 				Class gles = Class.forName("org.lwjgl.opengles.GLES");
 				gles.getMethod("createCapabilities").invoke(gles);
+				// TODO: Remove once https://github.com/LWJGL/lwjgl3/issues/931 is fixed
+				ThreadLocalUtil.setFunctionMissingAddresses(0);
 			} catch (Throwable e) {
 				throw new GdxRuntimeException("Couldn't initialize GLES", e);
 			}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -26,7 +26,7 @@ public class DependencyBank {
 	static String libgdxNightlyVersion = "1.12.1-SNAPSHOT";
 	static String roboVMVersion = "2.3.20";
 	static String buildToolsVersion = "33.0.2";
-	static String androidAPILevel = "32";
+	static String androidAPILevel = "33";
 	static String androidMinAPILevel = "14";
 	static String gwtVersion = "2.8.2";
 
@@ -42,7 +42,7 @@ public class DependencyBank {
 	// Project plugins
 	static String gwtPluginImport = "org.wisepersist:gwt-gradle-plugin:1.1.16";
 	static String grettyPluginImport = "org.gretty:gretty:3.0.7";
-	static String androidPluginImport = "com.android.tools.build:gradle:7.2.2";
+	static String androidPluginImport = "com.android.tools.build:gradle:7.3.1";
 	static String roboVMPluginImport = "com.mobidevelop.robovm:robovm-gradle-plugin:" + roboVMVersion;
 
 	// Extension versions

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -306,6 +306,7 @@ public class GdxTests {
 		TiledMapDirectLoaderTest.class,
 		TiledMapModifiedExternalTilesetTest.class,
 		TiledMapObjectLoadingTest.class,
+		TiledMapObjectPropertyTest.class,
 		TiledMapBench.class,
 		TiledMapLayerOffsetTest.class,
 		TimerTest.class,

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/flame/NumericPanel.java
Patch:
@@ -59,7 +59,7 @@ protected void initializeComponents () {
 		}
 		valueSpinner.addChangeListener(new ChangeListener() {
 			public void stateChanged (ChangeEvent event) {
-				NumericPanel.this.value.setValue((Float)valueSpinner.getValue());
+				NumericPanel.this.value.setValue(((Number)valueSpinner.getValue()).floatValue());
 			}
 		});
 	}

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/flame/Slider.java
Patch:
@@ -39,7 +39,7 @@ public void setValue (float value) {
 	}
 
 	public float getValue () {
-		return ((Double)spinner.getValue()).floatValue();
+		return ((Number)spinner.getValue()).floatValue();
 	}
 
 	public void addChangeListener (ChangeListener listener) {

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/NumericPanel.java
Patch:
@@ -42,7 +42,7 @@ public NumericPanel (final NumericValue value, String name, String description)
 
 		valueSpinner.addChangeListener(new ChangeListener() {
 			public void stateChanged (ChangeEvent event) {
-				value.setValue((Float)valueSpinner.getValue());
+				value.setValue(((Number)valueSpinner.getValue()).floatValue());
 			}
 		});
 	}

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/Slider.java
Patch:
@@ -41,7 +41,7 @@ public void setValue (float value) {
 	}
 
 	public float getValue () {
-		return ((Double)spinner.getValue()).floatValue();
+		return ((Number)spinner.getValue()).floatValue();
 	}
 
 	public void addChangeListener (ChangeListener listener) {

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -795,7 +795,7 @@ public void addMesh (float[] vertices, short[] indices) {
 
 		ensureIndices(indices.length);
 		for (int i = 0; i < indices.length; ++i)
-			index((short)(indices[i] & 0xFFFF + offset));
+			index((short)((indices[i] & 0xFFFF) + offset));
 	}
 
 	// TODO: The following methods are deprecated and will be removed in a future release

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FrameBufferTest.java
Patch:
@@ -126,7 +126,7 @@ public void create () {
 
 		spriteBatch = new SpriteBatch();
 		frameBuffer = new FrameBuffer(Format.RGB565, 128, 128, false);
-		stencilFrameBuffer = new FrameBuffer(Format.RGB565, 128, 128, true, true);
+		stencilFrameBuffer = new FrameBuffer(Format.RGB565, 128, 128, false, true);
 		createShader(Gdx.graphics);
 	}
 

File: backends/gdx-backend-robovm-metalangle/generator/JavaCodeGenerator.java
Patch:
@@ -10,6 +10,7 @@
 import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
 import com.github.javaparser.ast.body.FieldDeclaration;
 import com.github.javaparser.ast.body.MethodDeclaration;
+import com.github.javaparser.ast.body.VariableDeclarator;
 import com.github.javaparser.ast.expr.BooleanLiteralExpr;
 import com.github.javaparser.ast.expr.Name;
 import com.github.javaparser.ast.expr.SimpleName;
@@ -99,11 +100,11 @@ public Name visit (Name n, final Object arg) {
 			public Visitable visit (FieldDeclaration n, Object arg) {
 				n = (FieldDeclaration)super.visit(n, arg);
 				if (n.toString().contains("METALANGLE")) {
-					n.getVariables().forEach(variableDeclarator -> {
+					for (VariableDeclarator variableDeclarator : n.getVariables()) {
 						if (variableDeclarator.getName().asString().equals("IS_METALANGLE")) {
 							variableDeclarator.setInitializer(new BooleanLiteralExpr(true));
 						}
-					});
+					}
 				}
 				return n;
 			}

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.io.BufferedReader;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.util.Comparator;
 
 import com.badlogic.gdx.Files.FileType;

File: gdx/src/com/badlogic/gdx/utils/DataInput.java
Patch:
@@ -69,7 +69,7 @@ public int readInt (boolean optimizePositive) throws IOException {
 		int charIndex = 0;
 		int b = 0;
 		while (charIndex < charCount) {
-			b = readByte();
+			b = readByte() & 0xFF;
 			if (b > 127) break;
 			chars[charIndex++] = (char)b;
 		}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -242,7 +242,7 @@ void setupDisplay () throws LWJGLException {
 				DisplayMode bestMode = null;
 				for (DisplayMode mode : getDisplayModes()) {
 					if (mode.width == config.width && mode.height == config.height) {
-						if (bestMode == null || bestMode.refreshRate < this.getDisplayMode().refreshRate) {
+						if (bestMode == null || bestMode.refreshRate < mode.refreshRate) {
 							bestMode = mode;
 						}
 					}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -486,7 +486,9 @@ static long createGlfwWindow (Lwjgl3ApplicationConfiguration config, long shared
 		GLFW.glfwWindowHint(GLFW.GLFW_DEPTH_BITS, config.depth);
 		GLFW.glfwWindowHint(GLFW.GLFW_SAMPLES, config.samples);
 
-		if (config.glEmulation == Lwjgl3ApplicationConfiguration.GLEmulation.GL30) {
+		if (config.glEmulation == Lwjgl3ApplicationConfiguration.GLEmulation.GL30
+			|| config.glEmulation == Lwjgl3ApplicationConfiguration.GLEmulation.GL31
+			|| config.glEmulation == Lwjgl3ApplicationConfiguration.GLEmulation.GL32) {
 			GLFW.glfwWindowHint(GLFW.GLFW_CONTEXT_VERSION_MAJOR, config.gles30ContextMajorVersion);
 			GLFW.glfwWindowHint(GLFW.GLFW_CONTEXT_VERSION_MINOR, config.gles30ContextMinorVersion);
 			if (SharedLibraryLoader.isMac) {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3ApplicationConfiguration.java
Patch:
@@ -50,7 +50,7 @@ public class Lwjgl3ApplicationConfiguration extends Lwjgl3WindowConfiguration {
 	int audioDeviceBufferCount = 9;
 
 	public enum GLEmulation {
-		ANGLE_GLES20, GL20, GL30
+		ANGLE_GLES20, GL20, GL30, GL31, GL32
 	}
 
 	GLEmulation glEmulation = GLEmulation.GL20;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -212,6 +212,7 @@ void setupLoop () {
 		lastHeight = graphics.getHeight();
 		Gdx.graphics = graphics;
 		Gdx.gl20 = graphics.getGL20();
+		Gdx.gl30 = graphics.getGL30();
 		Gdx.gl = Gdx.gl20;
 		if (config.disableAudio) {
 			audio = null;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20.java
Patch:
@@ -167,7 +167,7 @@ private void ensureCapacity (ShortBuffer buffer) {
 		}
 	}
 
-	private void ensureCapacity (IntBuffer buffer) {
+	protected void ensureCapacity (IntBuffer buffer) {
 		if (buffer.remaining() > intBuffer.length()) {
 			intBuffer = TypedArrays.createInt32Array(buffer.remaining());
 		}
@@ -179,7 +179,7 @@ private void ensureCapacity (ByteBuffer buffer) {
 		}
 	}
 
-	private WebGLUniformLocation getUniformLocation (int location) {
+	protected WebGLUniformLocation getUniformLocation (int location) {
 		return uniforms.get(currProgram).get(location);
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/FloatTextureData.java
Patch:
@@ -81,7 +81,7 @@ public void prepare () {
 	@Override
 	public void consumeCustomData (int target) {
 		if (Gdx.app.getType() == ApplicationType.Android || Gdx.app.getType() == ApplicationType.iOS
-			|| Gdx.app.getType() == ApplicationType.WebGL) {
+			|| (Gdx.app.getType() == ApplicationType.WebGL && !Gdx.graphics.isGL30Available())) {
 
 			if (!Gdx.graphics.supportsExtension("OES_texture_float"))
 				throw new GdxRuntimeException("Extension OES_texture_float not supported!");

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/MultipleRenderTargetTest.java
Patch:
@@ -145,7 +145,7 @@ public int compare (Renderable o1, Renderable o2) {
 		frameBufferBuilder.addColorTextureAttachment(GL30.GL_RGBA8, GL30.GL_RGBA, GL30.GL_UNSIGNED_BYTE);
 		frameBufferBuilder.addColorTextureAttachment(GL30.GL_RGB8, GL30.GL_RGB, GL30.GL_UNSIGNED_BYTE);
 		frameBufferBuilder.addColorTextureAttachment(GL30.GL_RGB8, GL30.GL_RGB, GL30.GL_UNSIGNED_BYTE);
-		frameBufferBuilder.addDepthTextureAttachment(GL30.GL_DEPTH_COMPONENT, GL30.GL_UNSIGNED_SHORT);
+		frameBufferBuilder.addDepthTextureAttachment(GL30.GL_DEPTH_COMPONENT16, GL30.GL_UNSIGNED_SHORT);
 
 		frameBuffer = frameBufferBuilder.build();
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gles3/GL30Texture3DTest.java
Patch:
@@ -66,7 +66,7 @@ static ShaderProgram createShader () {
 			+ "in vec2 v_texCoords;\n" //
 			+ "out vec4 fragColor;" //
 			+ "uniform sampler2D u_texture;\n" //
-			+ "uniform sampler3D u_texture3D;\n" //
+			+ "uniform LOWP sampler3D u_texture3D;\n" //
 			+ "uniform float u_time;\n" //
 			+ "void main()\n"//
 			+ "{\n" //

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -512,7 +512,7 @@ public void bind (final ShaderProgram shader) {
 	 * @param locations array containing the attribute locations. */
 	public void bind (final ShaderProgram shader, final int[] locations) {
 		vertices.bind(shader, locations);
-		if (instances != null && instances.getNumInstances() > 0) instances.bind(shader, locations);
+		if (instances != null && instances.getNumInstances() > 0) instances.bind(shader);
 		if (indices.getNumIndices() > 0) indices.bind();
 	}
 
@@ -531,7 +531,7 @@ public void unbind (final ShaderProgram shader) {
 	 * @param locations array containing the attribute locations. */
 	public void unbind (final ShaderProgram shader, final int[] locations) {
 		vertices.unbind(shader, locations);
-		if (instances != null && instances.getNumInstances() > 0) instances.unbind(shader, locations);
+		if (instances != null && instances.getNumInstances() > 0) instances.unbind(shader);
 		if (indices.getNumIndices() > 0) indices.unbind();
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -82,6 +82,7 @@
 import com.badlogic.gdx.tests.gles2.VertexArrayTest;
 import com.badlogic.gdx.tests.gles3.GL30Texture3DTest;
 import com.badlogic.gdx.tests.gles3.InstancedRenderingTest;
+import com.badlogic.gdx.tests.gles3.ModelInstancedRenderingTest;
 import com.badlogic.gdx.tests.gles3.PixelBufferObjectTest;
 import com.badlogic.gdx.tests.math.collision.OrientedBoundingBoxTest;
 import com.badlogic.gdx.tests.net.NetAPITest;
@@ -195,6 +196,7 @@ public class GdxTests {
 		MipMapTest.class,
 		ModelTest.class,
 		ModelCacheTest.class,
+		ModelInstancedRenderingTest.class,
 		MoveSpriteExample.class,
 		MultipleRenderTargetTest.class,
 		MultitouchTest.class,

File: tests/gdx-tests/src/com/badlogic/gdx/tests/I18NMessageTest.java
Patch:
@@ -48,6 +48,8 @@ public void create () {
 		font = new BitmapFont();
 		batch = new SpriteBatch();
 
+		I18NBundle.setSimpleFormatter(false);
+
 		try {
 			FileHandle bfh = Gdx.files.internal("data/i18n/message1");
 			rb_root = I18NBundle.createBundle(bfh, new Locale("", "", "")); // Locale.ROOT doesn't exist in Android API level 8

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
Patch:
@@ -532,9 +532,10 @@ private void readNamedObjects (Json json, Class type, JsonValue valueMap) {
 		json.setSerializer(BitmapFont.class, new ReadOnlySerializer<BitmapFont>() {
 			public BitmapFont read (Json json, JsonValue jsonData, Class type) {
 				String path = json.readValue("file", String.class, jsonData);
-				int scaledSize = json.readValue("scaledSize", int.class, -1, jsonData);
+				float scaledSize = json.readValue("scaledSize", float.class, -1f, jsonData);
 				Boolean flip = json.readValue("flip", Boolean.class, false, jsonData);
 				Boolean markupEnabled = json.readValue("markupEnabled", Boolean.class, false, jsonData);
+				Boolean useIntegerPositions = json.readValue("useIntegerPositions", Boolean.class, true, jsonData);
 
 				FileHandle fontFile = skinFile.parent().child(path);
 				if (!fontFile.exists()) fontFile = Gdx.files.internal(path);
@@ -560,6 +561,7 @@ public BitmapFont read (Json json, JsonValue jsonData, Class type) {
 						}
 					}
 					font.getData().markupEnabled = markupEnabled;
+					font.setUseIntegerPositions(useIntegerPositions);
 					// Scaled size is the desired cap height to scale the font to.
 					if (scaledSize != -1) font.getData().setScale(scaledSize / font.getCapHeight());
 					return font;

File: gdx/src/com/badlogic/gdx/graphics/glutils/GLFrameBuffer.java
Patch:
@@ -150,6 +150,7 @@ protected void build () {
 			gl.glBindRenderbuffer(GL20.GL_RENDERBUFFER, depthStencilPackedBufferHandle);
 			gl.glRenderbufferStorage(GL20.GL_RENDERBUFFER, bufferBuilder.packedStencilDepthRenderBufferSpec.internalFormat, width,
 				height);
+			hasDepthStencilPackedBuffer = true;
 		}
 
 		isMRT = bufferBuilder.textureAttachmentSpecs.size > 1;

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/BatchTiledMapRenderer.java
Patch:
@@ -197,8 +197,8 @@ public void renderImageLayer (TiledMapImageLayer layer) {
 
 		final float x = layer.getX();
 		final float y = layer.getY();
-		final float x1 = x * unitScale;
-		final float y1 = y * unitScale;
+		final float x1 = x * unitScale - viewBounds.x * (layer.getParallaxX() - 1);
+		final float y1 = y * unitScale - viewBounds.y * (layer.getParallaxY() - 1);
 		final float x2 = x1 + region.getRegionWidth() * unitScale;
 		final float y2 = y1 + region.getRegionHeight() * unitScale;
 

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java
Patch:
@@ -116,9 +116,9 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 		final float layerTileWidth = layer.getTileWidth() * unitScale;
 		final float layerTileHeight = layer.getTileHeight() * unitScale;
 
-		final float layerOffsetX = layer.getRenderOffsetX() * unitScale;
+		final float layerOffsetX = layer.getRenderOffsetX() * unitScale - viewBounds.x * (layer.getParallaxX() - 1);
 		// offset in tiled is y down, so we flip it
-		final float layerOffsetY = -layer.getRenderOffsetY() * unitScale;
+		final float layerOffsetY = -layer.getRenderOffsetY() * unitScale - viewBounds.y * (layer.getParallaxY() - 1);
 
 		final float layerHexLength = hexSideLength * unitScale;
 

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java
Patch:
@@ -52,9 +52,9 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 		final int layerWidth = layer.getWidth();
 		final int layerHeight = layer.getHeight();
 
-		final float layerOffsetX = layer.getRenderOffsetX() * unitScale;
+		final float layerOffsetX = layer.getRenderOffsetX() * unitScale - viewBounds.x * (layer.getParallaxX() - 1);
 		// offset in tiled is y down, so we flip it
-		final float layerOffsetY = -layer.getRenderOffsetY() * unitScale;
+		final float layerOffsetY = -layer.getRenderOffsetY() * unitScale - viewBounds.y * (layer.getParallaxY() - 1);
 
 		final float layerTileWidth = layer.getTileWidth() * unitScale;
 		final float layerTileHeight = layer.getTileHeight() * unitScale;

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricTiledMapRenderer.java
Patch:
@@ -89,9 +89,9 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 		float tileWidth = layer.getTileWidth() * unitScale;
 		float tileHeight = layer.getTileHeight() * unitScale;
 
-		final float layerOffsetX = layer.getRenderOffsetX() * unitScale;
+		final float layerOffsetX = layer.getRenderOffsetX() * unitScale - viewBounds.x * (layer.getParallaxX() - 1);
 		// offset in tiled is y down, so we flip it
-		final float layerOffsetY = -layer.getRenderOffsetY() * unitScale;
+		final float layerOffsetY = -layer.getRenderOffsetY() * unitScale - viewBounds.y * (layer.getParallaxY() - 1);
 
 		float halfTileWidth = tileWidth * 0.5f;
 		float halfTileHeight = tileHeight * 0.5f;

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer.java
Patch:
@@ -74,9 +74,9 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 		final float layerTileWidth = layer.getTileWidth() * unitScale;
 		final float layerTileHeight = layer.getTileHeight() * unitScale;
 
-		final float layerOffsetX = layer.getRenderOffsetX() * unitScale;
+		final float layerOffsetX = layer.getRenderOffsetX() * unitScale - viewBounds.x * (layer.getParallaxX() - 1);
 		// offset in tiled is y down, so we flip it
-		final float layerOffsetY = -layer.getRenderOffsetY() * unitScale;
+		final float layerOffsetY = -layer.getRenderOffsetY() * unitScale - viewBounds.y * (layer.getParallaxY() - 1);
 
 		final int col1 = Math.max(0, (int)((viewBounds.x - layerOffsetX) / layerTileWidth));
 		final int col2 = Math.min(layerWidth,

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplet.java
Patch:
@@ -24,6 +24,7 @@
 
 /** An OpenGL surface in an applet.
  * @author Nathan Sweet */
+@SuppressWarnings("removal")
 public class LwjglApplet extends Applet {
 	final Canvas canvas;
 	LwjglApplication app;

File: extensions/gdx-bullet/src/com/badlogic/gdx/physics/bullet/BulletBase.java
Patch:
@@ -127,6 +127,7 @@ protected void destroy () {
 		}
 	}
 
+	@SuppressWarnings("removal")
 	@Override
 	protected void finalize () throws Throwable {
 		if (!destroyed && Bullet.enableLogging)

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/flame/NumericPanel.java
Patch:
@@ -53,7 +53,7 @@ protected void initializeComponents () {
 				new Insets(0, 0, 0, 6), 0, 0));
 		}
 		{
-			valueSpinner = new JSpinner(new SpinnerNumberModel(new Float(0), new Float(-99999), new Float(99999), new Float(0.1f)));
+			valueSpinner = new JSpinner(new SpinnerNumberModel(0, -99999, 99999, 0.1f));
 			contentPanel.add(valueSpinner, new GridBagConstraints(1, 1, 1, 1, 1, 0, GridBagConstraints.WEST, GridBagConstraints.NONE,
 				new Insets(0, 0, 0, 0), 0, 0));
 		}

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/unicodefont/UnicodeFont.java
Patch:
@@ -126,7 +126,7 @@ public UnicodeFont (Font font, int size, boolean bold, boolean italic) {
 
 	private void initializeFont (Font baseFont, int size, boolean bold, boolean italic) {
 		Map attributes = baseFont.getAttributes();
-		attributes.put(TextAttribute.SIZE, new Float(size));
+		attributes.put(TextAttribute.SIZE, size);
 		attributes.put(TextAttribute.WEIGHT, bold ? TextAttribute.WEIGHT_BOLD : TextAttribute.WEIGHT_REGULAR);
 		attributes.put(TextAttribute.POSTURE, italic ? TextAttribute.POSTURE_OBLIQUE : TextAttribute.POSTURE_REGULAR);
 		try {

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/NumericPanel.java
Patch:
@@ -55,7 +55,7 @@ private void initializeComponents () {
 				new Insets(0, 0, 0, 6), 0, 0));
 		}
 		{
-			valueSpinner = new JSpinner(new SpinnerNumberModel(new Float(0), new Float(-99999), new Float(99999), new Float(0.1f)));
+			valueSpinner = new JSpinner(new SpinnerNumberModel(0, -99999, 99999, 0.1f));
 			contentPanel.add(valueSpinner, new GridBagConstraints(1, 1, 1, 1, 1, 0, GridBagConstraints.WEST, GridBagConstraints.NONE,
 				new Insets(0, 0, 0, 0), 0, 0));
 		}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/glutils/VertexBufferObjectWithVAO.java
Patch:
@@ -190,7 +190,7 @@ private void bindAttributes (ShaderProgram shader, int[] locations) {
 	}
 
 	private void unbindAttributes (ShaderProgram shaderProgram) {
-		if (cachedLocations == null) {
+		if (cachedLocations.size == 0) {
 			return;
 		}
 		int numAttributes = attributes.size();

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/glutils/VertexBufferObjectWithVAO.java
Patch:
@@ -190,7 +190,7 @@ private void bindAttributes (ShaderProgram shader, int[] locations) {
 	}
 
 	private void unbindAttributes (ShaderProgram shaderProgram) {
-		if (cachedLocations == null) {
+		if (cachedLocations.size == 0) {
 			return;
 		}
 		int numAttributes = attributes.size();

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIndexedMesh.java
Patch:
@@ -172,8 +172,8 @@ public void set (final Object tag, final Mesh mesh, int offset, int count) {
 
 		if (posAttr == null) throw new com.badlogic.gdx.utils.GdxRuntimeException("Mesh doesn't have a position attribute");
 
-		set(tag, mesh.getVerticesBuffer(), mesh.getVertexSize(), mesh.getNumVertices(), posAttr.offset, mesh.getIndicesBuffer(),
-			offset, count);
+		set(tag, mesh.getVerticesBuffer(false), mesh.getVertexSize(), mesh.getNumVertices(), posAttr.offset,
+			mesh.getIndicesBuffer(false), offset, count);
 	}
 
 	/** Convenience method to set this btIndexedMesh to the specified vertex and index data. The specified data must be indexed and

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -956,8 +956,9 @@ public void flush () {
 		lastTexture.bind();
 		Mesh mesh = this.mesh;
 		mesh.setVertices(vertices, 0, idx);
-		((Buffer)mesh.getIndicesBuffer()).position(0);
-		((Buffer)mesh.getIndicesBuffer()).limit(count);
+		Buffer indicesBuffer = (Buffer)mesh.getIndicesBuffer(true);
+		indicesBuffer.position(0);
+		indicesBuffer.limit(count);
 
 		if (blendingDisabled) {
 			Gdx.gl.glDisable(GL20.GL_BLEND);

File: tests/gdx-tests-gwt/src/com/badlogic/gdx/tests/gwt/client/GwtTestWrapper.java
Patch:
@@ -97,7 +97,6 @@
 import com.badlogic.gdx.tests.gwt.GwtWindowModeTest;
 import com.badlogic.gdx.tests.math.CollisionPlaygroundTest;
 import com.badlogic.gdx.tests.math.OctreeTest;
-import com.badlogic.gdx.tests.math.collision.CollisionPlaygroundTest;
 import com.badlogic.gdx.tests.math.collision.OrientedBoundingBoxTest;
 import com.badlogic.gdx.tests.net.OpenBrowserExample;
 import com.badlogic.gdx.tests.superkoalio.SuperKoalio;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VertexBufferObjectShaderTest.java
Patch:
@@ -55,7 +55,7 @@ public void render () {
 		texture.bind();
 		vbo.bind(shader);
 		indices.bind();
-		gl.glDrawElements(GL20.GL_TRIANGLES, 3, GL20.GL_UNSIGNED_SHORT, indices.getBuffer().position());
+		gl.glDrawElements(GL20.GL_TRIANGLES, 3, GL20.GL_UNSIGNED_SHORT, indices.getBuffer(false).position());
 		indices.unbind();
 		vbo.unbind(shader);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullDistanceTest.java
Patch:
@@ -97,7 +97,7 @@ public void render () {
 
 	public static btConvexHullShape createConvexHullShape (final Model model, boolean optimize) {
 		final Mesh mesh = model.meshes.get(0);
-		final btConvexHullShape shape = new btConvexHullShape(mesh.getVerticesBuffer(), mesh.getNumVertices(),
+		final btConvexHullShape shape = new btConvexHullShape(mesh.getVerticesBuffer(false), mesh.getNumVertices(),
 			mesh.getVertexSize());
 		if (!optimize) return shape;
 		// now optimize the shape

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullTest.java
Patch:
@@ -54,7 +54,7 @@ public boolean tap (float x, float y, int count, int button) {
 
 	public static btConvexHullShape createConvexHullShape (final Model model, boolean optimize) {
 		final Mesh mesh = model.meshes.get(0);
-		final btConvexHullShape shape = new btConvexHullShape(mesh.getVerticesBuffer(), mesh.getNumVertices(),
+		final btConvexHullShape shape = new btConvexHullShape(mesh.getVerticesBuffer(false), mesh.getNumVertices(),
 			mesh.getVertexSize());
 		if (!optimize) return shape;
 		// now optimize the shape

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/TriangleRaycastTest.java
Patch:
@@ -172,16 +172,16 @@ public boolean tap (float screenX, float screenY, int count, int button) {
 
 		// Get the position coordinates of the vertices belonging to intersected triangle.
 		Mesh mesh = model.meshParts.get(currentPartId).mesh;
-		FloatBuffer verticesBuffer = mesh.getVerticesBuffer();
-		ShortBuffer indicesBuffer = mesh.getIndicesBuffer();
+		FloatBuffer verticesBuffer = mesh.getVerticesBuffer(false);
+		ShortBuffer indicesBuffer = mesh.getIndicesBuffer(false);
 
 		int posOffset = mesh.getVertexAttributes().findByUsage(VertexAttributes.Usage.Position).offset / 4;
 		int vertexSize = mesh.getVertexSize() / 4;
 		int currentTriangleFirstVertexIndex = currentTriangleIndex * 3;
 
 		// Store the three vertices belonging to the selected triangle.
 		for (int i = 0; i < 3; i++) {
-			int currentVertexIndex = indicesBuffer.get(currentTriangleFirstVertexIndex + i);
+			int currentVertexIndex = indicesBuffer.get(currentTriangleFirstVertexIndex + i) & 0xFFFF;
 			int j = currentVertexIndex * vertexSize + posOffset;
 			float x = verticesBuffer.get(j++);
 			float y = verticesBuffer.get(j++);

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIndexedMesh.java
Patch:
@@ -172,8 +172,8 @@ public void set (final Object tag, final Mesh mesh, int offset, int count) {
 
 		if (posAttr == null) throw new com.badlogic.gdx.utils.GdxRuntimeException("Mesh doesn't have a position attribute");
 
-		set(tag, mesh.getVerticesBuffer(), mesh.getVertexSize(), mesh.getNumVertices(), posAttr.offset, mesh.getIndicesBuffer(),
-			offset, count);
+		set(tag, mesh.getVerticesBuffer(false), mesh.getVertexSize(), mesh.getNumVertices(), posAttr.offset,
+			mesh.getIndicesBuffer(false), offset, count);
 	}
 
 	/** Convenience method to set this btIndexedMesh to the specified vertex and index data. The specified data must be indexed and

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -956,8 +956,9 @@ public void flush () {
 		lastTexture.bind();
 		Mesh mesh = this.mesh;
 		mesh.setVertices(vertices, 0, idx);
-		((Buffer)mesh.getIndicesBuffer()).position(0);
-		((Buffer)mesh.getIndicesBuffer()).limit(count);
+		Buffer indicesBuffer = (Buffer)mesh.getIndicesBuffer(true);
+		indicesBuffer.position(0);
+		indicesBuffer.limit(count);
 
 		if (blendingDisabled) {
 			Gdx.gl.glDisable(GL20.GL_BLEND);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VertexBufferObjectShaderTest.java
Patch:
@@ -55,7 +55,7 @@ public void render () {
 		texture.bind();
 		vbo.bind(shader);
 		indices.bind();
-		gl.glDrawElements(GL20.GL_TRIANGLES, 3, GL20.GL_UNSIGNED_SHORT, indices.getBuffer().position());
+		gl.glDrawElements(GL20.GL_TRIANGLES, 3, GL20.GL_UNSIGNED_SHORT, indices.getBuffer(false).position());
 		indices.unbind();
 		vbo.unbind(shader);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullDistanceTest.java
Patch:
@@ -97,7 +97,7 @@ public void render () {
 
 	public static btConvexHullShape createConvexHullShape (final Model model, boolean optimize) {
 		final Mesh mesh = model.meshes.get(0);
-		final btConvexHullShape shape = new btConvexHullShape(mesh.getVerticesBuffer(), mesh.getNumVertices(),
+		final btConvexHullShape shape = new btConvexHullShape(mesh.getVerticesBuffer(false), mesh.getNumVertices(),
 			mesh.getVertexSize());
 		if (!optimize) return shape;
 		// now optimize the shape

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullTest.java
Patch:
@@ -54,7 +54,7 @@ public boolean tap (float x, float y, int count, int button) {
 
 	public static btConvexHullShape createConvexHullShape (final Model model, boolean optimize) {
 		final Mesh mesh = model.meshes.get(0);
-		final btConvexHullShape shape = new btConvexHullShape(mesh.getVerticesBuffer(), mesh.getNumVertices(),
+		final btConvexHullShape shape = new btConvexHullShape(mesh.getVerticesBuffer(false), mesh.getNumVertices(),
 			mesh.getVertexSize());
 		if (!optimize) return shape;
 		// now optimize the shape

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/TriangleRaycastTest.java
Patch:
@@ -172,16 +172,16 @@ public boolean tap (float screenX, float screenY, int count, int button) {
 
 		// Get the position coordinates of the vertices belonging to intersected triangle.
 		Mesh mesh = model.meshParts.get(currentPartId).mesh;
-		FloatBuffer verticesBuffer = mesh.getVerticesBuffer();
-		ShortBuffer indicesBuffer = mesh.getIndicesBuffer();
+		FloatBuffer verticesBuffer = mesh.getVerticesBuffer(false);
+		ShortBuffer indicesBuffer = mesh.getIndicesBuffer(false);
 
 		int posOffset = mesh.getVertexAttributes().findByUsage(VertexAttributes.Usage.Position).offset / 4;
 		int vertexSize = mesh.getVertexSize() / 4;
 		int currentTriangleFirstVertexIndex = currentTriangleIndex * 3;
 
 		// Store the three vertices belonging to the selected triangle.
 		for (int i = 0; i < 3; i++) {
-			int currentVertexIndex = indicesBuffer.get(currentTriangleFirstVertexIndex + i);
+			int currentVertexIndex = indicesBuffer.get(currentTriangleFirstVertexIndex + i) & 0xFFFF;
 			int j = currentVertexIndex * vertexSize + posOffset;
 			float x = verticesBuffer.get(j++);
 			float y = verticesBuffer.get(j++);

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIndexedMesh.java
Patch:
@@ -172,8 +172,7 @@ public void set (final Object tag, final Mesh mesh, int offset, int count) {
 
 		if (posAttr == null) throw new com.badlogic.gdx.utils.GdxRuntimeException("Mesh doesn't have a position attribute");
 
-		set(tag, mesh.getVerticesBuffer(), mesh.getVertexSize(), mesh.getNumVertices(), posAttr.offset, mesh.getIndicesBuffer(),
-			offset, count);
+		set(tag, mesh.getVerticesBuffer(false), mesh.getVertexSize(), mesh.getNumVertices(), posAttr.offset, mesh.getIndicesBuffer(false), offset, count);
 	}
 
 	/** Convenience method to set this btIndexedMesh to the specified vertex and index data. The specified data must be indexed and

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -956,8 +956,8 @@ public void flush () {
 		lastTexture.bind();
 		Mesh mesh = this.mesh;
 		mesh.setVertices(vertices, 0, idx);
-		((Buffer)mesh.getIndicesBuffer()).position(0);
-		((Buffer)mesh.getIndicesBuffer()).limit(count);
+		((Buffer) mesh.getIndicesBuffer(true)).position(0);
+		((Buffer) mesh.getIndicesBuffer(true)).limit(count);
 
 		if (blendingDisabled) {
 			Gdx.gl.glDisable(GL20.GL_BLEND);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VertexBufferObjectShaderTest.java
Patch:
@@ -55,7 +55,7 @@ public void render () {
 		texture.bind();
 		vbo.bind(shader);
 		indices.bind();
-		gl.glDrawElements(GL20.GL_TRIANGLES, 3, GL20.GL_UNSIGNED_SHORT, indices.getBuffer().position());
+		gl.glDrawElements(GL20.GL_TRIANGLES, 3, GL20.GL_UNSIGNED_SHORT, indices.getBuffer(false).position());
 		indices.unbind();
 		vbo.unbind(shader);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullDistanceTest.java
Patch:
@@ -97,7 +97,7 @@ public void render () {
 
 	public static btConvexHullShape createConvexHullShape (final Model model, boolean optimize) {
 		final Mesh mesh = model.meshes.get(0);
-		final btConvexHullShape shape = new btConvexHullShape(mesh.getVerticesBuffer(), mesh.getNumVertices(),
+		final btConvexHullShape shape = new btConvexHullShape(mesh.getVerticesBuffer(false), mesh.getNumVertices(),
 			mesh.getVertexSize());
 		if (!optimize) return shape;
 		// now optimize the shape

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullTest.java
Patch:
@@ -54,7 +54,7 @@ public boolean tap (float x, float y, int count, int button) {
 
 	public static btConvexHullShape createConvexHullShape (final Model model, boolean optimize) {
 		final Mesh mesh = model.meshes.get(0);
-		final btConvexHullShape shape = new btConvexHullShape(mesh.getVerticesBuffer(), mesh.getNumVertices(),
+		final btConvexHullShape shape = new btConvexHullShape(mesh.getVerticesBuffer(false), mesh.getNumVertices(),
 			mesh.getVertexSize());
 		if (!optimize) return shape;
 		// now optimize the shape

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/TriangleRaycastTest.java
Patch:
@@ -172,16 +172,16 @@ public boolean tap (float screenX, float screenY, int count, int button) {
 
 		// Get the position coordinates of the vertices belonging to intersected triangle.
 		Mesh mesh = model.meshParts.get(currentPartId).mesh;
-		FloatBuffer verticesBuffer = mesh.getVerticesBuffer();
-		ShortBuffer indicesBuffer = mesh.getIndicesBuffer();
+		FloatBuffer verticesBuffer = mesh.getVerticesBuffer(false);
+		ShortBuffer indicesBuffer = mesh.getIndicesBuffer(false);
 
 		int posOffset = mesh.getVertexAttributes().findByUsage(VertexAttributes.Usage.Position).offset / 4;
 		int vertexSize = mesh.getVertexSize() / 4;
 		int currentTriangleFirstVertexIndex = currentTriangleIndex * 3;
 
 		// Store the three vertices belonging to the selected triangle.
 		for (int i = 0; i < 3; i++) {
-			int currentVertexIndex = indicesBuffer.get(currentTriangleFirstVertexIndex + i);
+			int currentVertexIndex = indicesBuffer.get(currentTriangleFirstVertexIndex + i) & 0xFFFF;
 			int j = currentVertexIndex * vertexSize + posOffset;
 			float x = verticesBuffer.get(j++);
 			float y = verticesBuffer.get(j++);

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/CameraGroupStrategy.java
Patch:
@@ -133,6 +133,7 @@ public int decideGroup (Decal decal) {
 	public void beforeGroup (int group, Array<Decal> contents) {
 		if (group == GROUP_BLEND) {
 			Gdx.gl.glEnable(GL20.GL_BLEND);
+			Gdx.gl.glDepthMask(false);
 			contents.sort(cameraSorter);
 		} else {
 			for (int i = 0, n = contents.size; i < n; i++) {
@@ -162,6 +163,7 @@ public void beforeGroup (int group, Array<Decal> contents) {
 	public void afterGroup (int group) {
 		if (group == GROUP_BLEND) {
 			Gdx.gl.glDisable(GL20.GL_BLEND);
+			Gdx.gl.glDepthMask(true);
 		}
 	}
 

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/DefaultLwjgl3Input.java
Patch:
@@ -342,6 +342,7 @@ public void setCursorPosition (int x, int y) {
 			y = (int)(y * yScale);
 		}
 		GLFW.glfwSetCursorPos(window.getWindowHandle(), x, y);
+		cursorPosCallback.invoke(window.getWindowHandle(), x, y);
 	}
 
 	protected char characterForKeyCode (int key) {

File: backends/gdx-backend-robovm-metalangle/src/com/badlogic/gdx/backends/iosrobovm/IOSApplicationConfiguration.java
Patch:
@@ -36,8 +36,9 @@ public class IOSApplicationConfiguration {
 	/** the multisample format, None is default * */
 	public MGLDrawableMultisample multisample = MGLDrawableMultisample.None;
 
-	/** number of frames per second, 60 is default * */
-	public int preferredFramesPerSecond = 60;
+	/** preferred/max number of frames per second. Set to "0" to indicate max supported by screen (on standard OpenGL backend (non
+	 * MetalANGLE) Apple has a 60fps cap on most devices). * */
+	public int preferredFramesPerSecond = 0;
 
 	/** whether to use the accelerometer, default true * */
 	public boolean useAccelerometer = true;

File: backends/gdx-backend-robovm-metalangle/src/com/badlogic/gdx/backends/iosrobovm/IOSHaptics.java
Patch:
@@ -118,7 +118,7 @@ public void vibrate (Input.VibrationType vibrationType) {
 			UIImpactFeedbackStyle uiImpactFeedbackStyle;
 			switch (vibrationType) {
 			case LIGHT:
-				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Soft;
+				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Light;
 				break;
 			case MEDIUM:
 				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Medium;

File: backends/gdx-backend-robovm-metalangle/src/com/badlogic/gdx/backends/iosrobovm/IOSUIViewController.java
Patch:
@@ -27,8 +27,8 @@ protected IOSUIViewController (IOSApplication app, IOSGraphics graphics) {
 	}
 
 	@Override
-	public void viewWillAppear (boolean arg0) {
-		super.viewWillAppear(arg0);
+	public void viewWillAppear (boolean animated) {
+		super.viewWillAppear(animated);
 		// start GLKViewController even though we may only draw a single frame
 		// (we may be in non-continuous mode)
 		setPaused(false);
@@ -74,7 +74,7 @@ public void viewDidLayoutSubviews () {
 		final IOSScreenBounds newBounds = app.computeBounds();
 		graphics.screenBounds = newBounds;
 		// Layout may happen without bounds changing, don't trigger resize in that case
-		if (graphics.created && (newBounds.width != oldBounds.width || newBounds.height != oldBounds.height)) {
+		if (newBounds.width != oldBounds.width || newBounds.height != oldBounds.height) {
 			graphics.makeCurrent();
 			graphics.updateSafeInsets();
 			graphics.gl20.glViewport(0, 0, newBounds.backBufferWidth, newBounds.backBufferHeight);

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplicationConfiguration.java
Patch:
@@ -47,8 +47,9 @@ public class IOSApplicationConfiguration {
 	/** the multisample format, None is default **/
 	public GLKViewDrawableMultisample multisample = GLKViewDrawableMultisample.None;
 
-	/** number of frames per second, 60 is default **/
-	public int preferredFramesPerSecond = 60;
+	/** preferred/max number of frames per second. Set to "0" to indicate max supported by screen (on standard OpenGL backend (non
+	 * MetalANGLE) Apple has a 60fps cap on most devices). **/
+	public int preferredFramesPerSecond = 0;
 
 	/** whether to use the accelerometer, default true **/
 	public boolean useAccelerometer = true;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSHaptics.java
Patch:
@@ -127,7 +127,7 @@ public void vibrate (Input.VibrationType vibrationType) {
 			UIImpactFeedbackStyle uiImpactFeedbackStyle;
 			switch (vibrationType) {
 			case LIGHT:
-				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Soft;
+				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Light;
 				break;
 			case MEDIUM:
 				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Medium;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSUIViewController.java
Patch:
@@ -23,8 +23,8 @@ protected IOSUIViewController (IOSApplication app, IOSGraphics graphics) {
 	}
 
 	@Override
-	public void viewWillAppear (boolean arg0) {
-		super.viewWillAppear(arg0);
+	public void viewWillAppear (boolean animated) {
+		super.viewWillAppear(animated);
 		// start GLKViewController even though we may only draw a single frame
 		// (we may be in non-continuous mode)
 		setPaused(false);
@@ -70,7 +70,7 @@ public void viewDidLayoutSubviews () {
 		final IOSScreenBounds newBounds = app.computeBounds();
 		graphics.screenBounds = newBounds;
 		// Layout may happen without bounds changing, don't trigger resize in that case
-		if (graphics.created && (newBounds.width != oldBounds.width || newBounds.height != oldBounds.height)) {
+		if (newBounds.width != oldBounds.width || newBounds.height != oldBounds.height) {
 			graphics.makeCurrent();
 			graphics.updateSafeInsets();
 			graphics.gl20.glViewport(0, 0, newBounds.backBufferWidth, newBounds.backBufferHeight);

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/scenes/scene2d/utils/UIUtils.java
Patch:
@@ -10,7 +10,7 @@ public class UIUtils {
 	static public boolean isAndroid = Navigator.getPlatform().contains("Android");
 	static public boolean isMac = Navigator.getPlatform().contains("Mac");
 	static public boolean isWindows = Navigator.getPlatform().contains("Win");
-	static public boolean isLinux = Navigator.getPlatform().contains("Linux");
+	static public boolean isLinux = Navigator.getPlatform().contains("Linux") || Navigator.getPlatform().contains("FreeBSD");
 	static public boolean isIos = Navigator.getPlatform().contains("iPhone") || Navigator.getPlatform().contains("iPod")
 		|| Navigator.getPlatform().contains("iPad");
 

File: extensions/gdx-lwjgl3-angle/src/com/badlogic/gdx/backends/lwjgl3/angle/ANGLELoader.java
Patch:
@@ -26,7 +26,8 @@
 
 public class ANGLELoader {
 	static public boolean isWindows = System.getProperty("os.name").contains("Windows");
-	static public boolean isLinux = System.getProperty("os.name").contains("Linux");
+	static public boolean isLinux = System.getProperty("os.name").contains("Linux")
+		|| System.getProperty("os.name").contains("FreeBSD");
 	static public boolean isMac = System.getProperty("os.name").contains("Mac");
 	static public boolean isARM = System.getProperty("os.arch").startsWith("arm")
 		|| System.getProperty("os.arch").startsWith("aarch64");

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -25,8 +25,8 @@ public class DependencyBank {
 	// Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly
 	static String libgdxNightlyVersion = "1.11.1-SNAPSHOT";
 	static String roboVMVersion = "2.3.16";
-	static String buildToolsVersion = "31.0.0";
-	static String androidAPILevel = "31";
+	static String buildToolsVersion = "33.0.0";
+	static String androidAPILevel = "32";
 	static String androidMinAPILevel = "14";
 	static String gwtVersion = "2.8.2";
 
@@ -42,7 +42,7 @@ public class DependencyBank {
 	// Project plugins
 	static String gwtPluginImport = "org.wisepersist:gwt-gradle-plugin:1.1.16";
 	static String grettyPluginImport = "org.gretty:gretty:3.0.7";
-	static String androidPluginImport = "com.android.tools.build:gradle:7.0.4";
+	static String androidPluginImport = "com.android.tools.build:gradle:7.2.2";
 	static String roboVMPluginImport = "com.mobidevelop.robovm:robovm-gradle-plugin:" + roboVMVersion;
 
 	// Extension versions

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/distancefield/DistanceFieldGenerator.java
Patch:
@@ -30,7 +30,7 @@
  * magnifications, using nothing but alpha testing so at no extra runtime cost.
  * 
  * <p>
- * The technique is described in the SIGGRAPH 2007 paper "Improved Alpha-Tested Magniﬁcation for Vector Textures and Special
+ * The technique is described in the SIGGRAPH 2007 paper "Improved Alpha-Tested Magnification for Vector Textures and Special
  * Effects" by Chris Green: <a href="http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf">
  * http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf </a>
  * 

File: gdx/src/com/badlogic/gdx/Input.java
Patch:
@@ -933,8 +933,8 @@ public enum Orientation {
 		Landscape, Portrait
 	}
 
-	/** Only viable on the desktop. Will confine the mouse cursor location to the window and hide the mouse cursor. X and y
-	 * coordinates are still reported as if the mouse was not catched.
+	/** Only viable on desktop, GWT and Android 8+. Will confine the mouse cursor location to the window and hide the mouse cursor.
+	 * X and y coordinates are still reported as if the mouse was not catched.
 	 * @param catched whether to catch or not to catch the mouse cursor */
 	public void setCursorCatched (boolean catched);
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java
Patch:
@@ -125,7 +125,7 @@ public PixmapPacker (int pageWidth, int pageHeight, Format pageFormat, int paddi
 		this(pageWidth, pageHeight, pageFormat, padding, duplicateBorder, false, false, packStrategy);
 	}
 
-	/** Creates a new ImagePacker which will insert all supplied pixmaps into one or more <code>pageWidth</code> by
+	/** Creates a new PixmapPacker which will insert all supplied pixmaps into one or more <code>pageWidth</code> by
 	 * <code>pageHeight</code> pixmaps using the specified strategy.
 	 * @param padding the number of blank pixels to insert between pixmaps.
 	 * @param duplicateBorder duplicate the border pixels of the inserted images to avoid seams when rendering with bi-linear

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -1071,6 +1071,8 @@ protected void switchTexture (Texture texture) {
 
 	@Override
 	public void setShader (ShaderProgram shader) {
+		if (shader == customShader) // avoid unnecessary flushing in case we are drawing
+			return;
 		if (drawing) {
 			flush();
 		}

File: gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dModelLoader.java
Patch:
@@ -135,8 +135,8 @@ protected int parseType (String type) {
 		} else if (type.equals("LINE_STRIP")) {
 			return GL20.GL_LINE_STRIP;
 		} else {
-			throw new GdxRuntimeException("Unknown primitive type '" + type
-				+ "', should be one of triangle, trianglestrip, line, linestrip, lineloop or point");
+			throw new GdxRuntimeException(
+				"Unknown primitive type '" + type + "', should be one of triangle, trianglestrip, line, linestrip or point");
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -469,8 +469,8 @@ public void ensureRectangles (int numRectangles) {
 	private int lastIndex = -1;
 
 	@Override
-	public short lastIndex () {
-		return (short)lastIndex;
+	public int lastIndex () {
+		return lastIndex;
 	}
 
 	private final static Vector3 vTmp = new Vector3();

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshPartBuilder.java
Patch:
@@ -103,7 +103,7 @@ public interface MeshPartBuilder {
 	public short vertex (final VertexInfo info);
 
 	/** @return The index of the last added vertex. */
-	public short lastIndex ();
+	public int lastIndex ();
 
 	/** Add an index, MeshPartBuilder expects all meshes to be indexed. */
 	public void index (final short value);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/ModelBuilder.java
Patch:
@@ -50,7 +50,7 @@ public class ModelBuilder {
 
 	private MeshBuilder getBuilder (final VertexAttributes attributes) {
 		for (final MeshBuilder mb : builders)
-			if (mb.getAttributes().equals(attributes) && mb.lastIndex() < Short.MAX_VALUE / 2) return mb;
+			if (mb.getAttributes().equals(attributes) && mb.lastIndex() < MeshBuilder.MAX_VERTICES / 2) return mb;
 		final MeshBuilder result = new MeshBuilder();
 		result.begin(attributes);
 		builders.add(result);

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -247,7 +247,7 @@ static public boolean intersectPolygonEdges (FloatArray polygon1, FloatArray pol
 
 	/** Returns the distance between the given line and point. Note the specified line is not a line segment. */
 	public static float distanceLinePoint (float startX, float startY, float endX, float endY, float pointX, float pointY) {
-		float normalLength = (float)Math.sqrt((endX - startX) * (endX - startX) + (endY - startY) * (endY - startY));
+		float normalLength = Vector2.len(endX - startX, endY - startY);
 		return Math.abs((pointX - startX) * (endY - startY) - (pointY - startY) * (endX - startX)) / normalLength;
 	}
 
@@ -1219,7 +1219,7 @@ private static boolean overlapsOnAxisOfShape (float[] verts1, int offset1, int c
 			float axisX = y1 - y2;
 			float axisY = -(x1 - x2);
 
-			float len = (float)Math.sqrt(axisX * axisX + axisY * axisY);
+			float len = Vector2.len(axisX, axisY);
 			// We got a normalized Vector
 			axisX /= len;
 			axisY /= len;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -1074,7 +1074,7 @@ public boolean keyTyped (InputEvent event, char character) {
 						if (time - 750 > lastChangeTime) undoText = oldText;
 						lastChangeTime = time;
 						updateDisplayText();
-					} else
+					} else if (!text.equals(oldText)) // Keep cursor movement if the text is the same.
 						cursor = oldCursor;
 				}
 			}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/UIUtils.java
Patch:
@@ -12,7 +12,8 @@ private UIUtils () {
 	static public boolean isAndroid = System.getProperty("java.runtime.name").contains("Android");
 	static public boolean isMac = !isAndroid && System.getProperty("os.name").contains("Mac");
 	static public boolean isWindows = !isAndroid && System.getProperty("os.name").contains("Windows");
-	static public boolean isLinux = !isAndroid && System.getProperty("os.name").contains("Linux");
+	static public boolean isLinux = !isAndroid && System.getProperty("os.name").contains("Linux")
+		|| System.getProperty("os.name").contains("FreeBSD");
 	static public boolean isIos = !isAndroid && (!(isWindows || isLinux || isMac));
 
 	static public boolean left () {

File: gdx/src/com/badlogic/gdx/utils/I18NBundle.java
Patch:
@@ -135,7 +135,7 @@ public static I18NBundle createBundle (FileHandle baseFileHandle, Locale locale)
 	/** Creates a new bundle using the specified <code>baseFileHandle</code> and <code>encoding</code>; the default locale is used.
 	 * 
 	 * @param baseFileHandle the file handle to the base of the bundle
-	 * @param encoding the charter encoding
+	 * @param encoding the character encoding
 	 * @return a bundle for the given base file handle and locale
 	 * @exception NullPointerException if <code>baseFileHandle</code> or <code>encoding</code> is <code>null</code>
 	 * @exception MissingResourceException if no bundle for the specified base file handle can be found */
@@ -147,7 +147,7 @@ public static I18NBundle createBundle (FileHandle baseFileHandle, String encodin
 	 * 
 	 * @param baseFileHandle the file handle to the base of the bundle
 	 * @param locale the locale for which a bundle is desired
-	 * @param encoding the charter encoding
+	 * @param encoding the character encoding
 	 * @return a bundle for the given base file handle and locale
 	 * @exception NullPointerException if <code>baseFileHandle</code>, <code>locale</code> or <code>encoding</code> is
 	 *               <code>null</code>

File: backends/gdx-backend-robovm-metalangle/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
Patch:
@@ -73,6 +73,8 @@ public void willTerminate (UIApplication application) {
 		}
 	}
 
+	static final boolean IS_METALANGLE = true;
+
 	UIApplication uiApp;
 
 	UIWindow uiWindow;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
Patch:
@@ -85,6 +85,8 @@ public void willTerminate (UIApplication application) {
 		}
 	}
 
+	static final boolean IS_METALANGLE = false;
+
 	UIApplication uiApp;
 	UIWindow uiWindow;
 	ApplicationListener listener;

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/DefaultLwjgl3Input.java
Patch:
@@ -342,6 +342,7 @@ public void setCursorPosition (int x, int y) {
 			y = (int)(y * yScale);
 		}
 		GLFW.glfwSetCursorPos(window.getWindowHandle(), x, y);
+		cursorPosCallback.invoke(window.getWindowHandle(), x, y);
 	}
 
 	protected char characterForKeyCode (int key) {

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -469,8 +469,8 @@ public void ensureRectangles (int numRectangles) {
 	private int lastIndex = -1;
 
 	@Override
-	public short lastIndex () {
-		return (short)lastIndex;
+	public int lastIndex () {
+		return lastIndex;
 	}
 
 	private final static Vector3 vTmp = new Vector3();

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshPartBuilder.java
Patch:
@@ -103,7 +103,7 @@ public interface MeshPartBuilder {
 	public short vertex (final VertexInfo info);
 
 	/** @return The index of the last added vertex. */
-	public short lastIndex ();
+	public int lastIndex ();
 
 	/** Add an index, MeshPartBuilder expects all meshes to be indexed. */
 	public void index (final short value);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/ModelBuilder.java
Patch:
@@ -50,7 +50,7 @@ public class ModelBuilder {
 
 	private MeshBuilder getBuilder (final VertexAttributes attributes) {
 		for (final MeshBuilder mb : builders)
-			if (mb.getAttributes().equals(attributes) && mb.lastIndex() < Short.MAX_VALUE / 2) return mb;
+			if (mb.getAttributes().equals(attributes) && mb.lastIndex() < MeshBuilder.MAX_VERTICES / 2) return mb;
 		final MeshBuilder result = new MeshBuilder();
 		result.begin(attributes);
 		builders.add(result);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -469,8 +469,8 @@ public void ensureRectangles (int numRectangles) {
 	private int lastIndex = -1;
 
 	@Override
-	public short lastIndex () {
-		return (short)lastIndex;
+	public int lastIndex () {
+		return lastIndex;
 	}
 
 	private final static Vector3 vTmp = new Vector3();

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshPartBuilder.java
Patch:
@@ -103,7 +103,7 @@ public interface MeshPartBuilder {
 	public short vertex (final VertexInfo info);
 
 	/** @return The index of the last added vertex. */
-	public short lastIndex ();
+	public int lastIndex ();
 
 	/** Add an index, MeshPartBuilder expects all meshes to be indexed. */
 	public void index (final short value);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/ModelBuilder.java
Patch:
@@ -50,7 +50,7 @@ public class ModelBuilder {
 
 	private MeshBuilder getBuilder (final VertexAttributes attributes) {
 		for (final MeshBuilder mb : builders)
-			if (mb.getAttributes().equals(attributes) && mb.lastIndex() < Short.MAX_VALUE / 2) return mb;
+			if (mb.getAttributes().equals(attributes) && mb.lastIndex() < MeshBuilder.MAX_VERTICES / 2) return mb;
 		final MeshBuilder result = new MeshBuilder();
 		result.begin(attributes);
 		builders.add(result);

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/DefaultLwjgl3Input.java
Patch:
@@ -342,6 +342,7 @@ public void setCursorPosition (int x, int y) {
 			y = (int)(y * yScale);
 		}
 		GLFW.glfwSetCursorPos(window.getWindowHandle(), x, y);
+		cursorPosCallback.invoke(window.getWindowHandle(), x, y);
 	}
 
 	protected char characterForKeyCode (int key) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -1074,7 +1074,7 @@ public boolean keyTyped (InputEvent event, char character) {
 						if (time - 750 > lastChangeTime) undoText = oldText;
 						lastChangeTime = time;
 						updateDisplayText();
-					} else
+					} else if (!text.equals(oldText)) // Keep cursor movement if the text is the same.
 						cursor = oldCursor;
 				}
 			}

File: backends/gdx-backend-robovm-metalangle/src/com/badlogic/gdx/backends/iosrobovm/IOSHaptics.java
Patch:
@@ -118,7 +118,7 @@ public void vibrate (Input.VibrationType vibrationType) {
 			UIImpactFeedbackStyle uiImpactFeedbackStyle;
 			switch (vibrationType) {
 			case LIGHT:
-				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Soft;
+				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Light;
 				break;
 			case MEDIUM:
 				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Medium;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSHaptics.java
Patch:
@@ -127,7 +127,7 @@ public void vibrate (Input.VibrationType vibrationType) {
 			UIImpactFeedbackStyle uiImpactFeedbackStyle;
 			switch (vibrationType) {
 			case LIGHT:
-				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Soft;
+				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Light;
 				break;
 			case MEDIUM:
 				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Medium;

File: extensions/gdx-lwjgl3-angle/src/com/badlogic/gdx/backends/lwjgl3/angle/Lwjgl3GLES20.java
Patch:
@@ -288,7 +288,7 @@ public void glDrawElements (int mode, int count, int type, Buffer indices) {
 			bb.limit(oldLimit);
 		} else
 			throw new GdxRuntimeException("Can't use " + indices.getClass().getName()
-					+ " with this method. Use ShortBuffer or ByteBuffer instead. Blame LWJGL");
+				+ " with this method. Use ShortBuffer or ByteBuffer instead. Blame LWJGL");
 	}
 
 	public void glEnable (int cap) {

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSHaptics.java
Patch:
@@ -127,7 +127,7 @@ public void vibrate (Input.VibrationType vibrationType) {
 			UIImpactFeedbackStyle uiImpactFeedbackStyle;
 			switch (vibrationType) {
 			case LIGHT:
-				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Soft;
+				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Light;
 				break;
 			case MEDIUM:
 				uiImpactFeedbackStyle = UIImpactFeedbackStyle.Medium;

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/distancefield/DistanceFieldGenerator.java
Patch:
@@ -30,7 +30,7 @@
  * magnifications, using nothing but alpha testing so at no extra runtime cost.
  * 
  * <p>
- * The technique is described in the SIGGRAPH 2007 paper "Improved Alpha-Tested Magniﬁcation for Vector Textures and Special
+ * The technique is described in the SIGGRAPH 2007 paper "Improved Alpha-Tested Magnification for Vector Textures and Special
  * Effects" by Chris Green: <a href="http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf">
  * http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf </a>
  * 

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java
Patch:
@@ -125,7 +125,7 @@ public PixmapPacker (int pageWidth, int pageHeight, Format pageFormat, int paddi
 		this(pageWidth, pageHeight, pageFormat, padding, duplicateBorder, false, false, packStrategy);
 	}
 
-	/** Creates a new ImagePacker which will insert all supplied pixmaps into one or more <code>pageWidth</code> by
+	/** Creates a new PixmapPacker which will insert all supplied pixmaps into one or more <code>pageWidth</code> by
 	 * <code>pageHeight</code> pixmaps using the specified strategy.
 	 * @param padding the number of blank pixels to insert between pixmaps.
 	 * @param duplicateBorder duplicate the border pixels of the inserted images to avoid seams when rendering with bi-linear

File: gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dModelLoader.java
Patch:
@@ -135,8 +135,8 @@ protected int parseType (String type) {
 		} else if (type.equals("LINE_STRIP")) {
 			return GL20.GL_LINE_STRIP;
 		} else {
-			throw new GdxRuntimeException("Unknown primitive type '" + type
-				+ "', should be one of triangle, trianglestrip, line, linestrip, lineloop or point");
+			throw new GdxRuntimeException(
+				"Unknown primitive type '" + type + "', should be one of triangle, trianglestrip, line, linestrip or point");
 		}
 	}
 

File: backends/gdx-backend-robovm-metalangle/src/com/badlogic/gdx/backends/iosrobovm/IOSUIViewController.java
Patch:
@@ -27,8 +27,8 @@ protected IOSUIViewController (IOSApplication app, IOSGraphics graphics) {
 	}
 
 	@Override
-	public void viewWillAppear (boolean arg0) {
-		super.viewWillAppear(arg0);
+	public void viewWillAppear (boolean animated) {
+		super.viewWillAppear(animated);
 		// start GLKViewController even though we may only draw a single frame
 		// (we may be in non-continuous mode)
 		setPaused(false);
@@ -74,7 +74,7 @@ public void viewDidLayoutSubviews () {
 		final IOSScreenBounds newBounds = app.computeBounds();
 		graphics.screenBounds = newBounds;
 		// Layout may happen without bounds changing, don't trigger resize in that case
-		if (graphics.created && (newBounds.width != oldBounds.width || newBounds.height != oldBounds.height)) {
+		if (newBounds.width != oldBounds.width || newBounds.height != oldBounds.height) {
 			graphics.makeCurrent();
 			graphics.updateSafeInsets();
 			graphics.gl20.glViewport(0, 0, newBounds.backBufferWidth, newBounds.backBufferHeight);

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSUIViewController.java
Patch:
@@ -23,8 +23,8 @@ protected IOSUIViewController (IOSApplication app, IOSGraphics graphics) {
 	}
 
 	@Override
-	public void viewWillAppear (boolean arg0) {
-		super.viewWillAppear(arg0);
+	public void viewWillAppear (boolean animated) {
+		super.viewWillAppear(animated);
 		// start GLKViewController even though we may only draw a single frame
 		// (we may be in non-continuous mode)
 		setPaused(false);
@@ -70,7 +70,7 @@ public void viewDidLayoutSubviews () {
 		final IOSScreenBounds newBounds = app.computeBounds();
 		graphics.screenBounds = newBounds;
 		// Layout may happen without bounds changing, don't trigger resize in that case
-		if (graphics.created && (newBounds.width != oldBounds.width || newBounds.height != oldBounds.height)) {
+		if (newBounds.width != oldBounds.width || newBounds.height != oldBounds.height) {
 			graphics.makeCurrent();
 			graphics.updateSafeInsets();
 			graphics.gl20.glViewport(0, 0, newBounds.backBufferWidth, newBounds.backBufferHeight);

File: backends/gdx-backend-robovm-metalangle/src/com/badlogic/gdx/backends/iosrobovm/IOSUIViewController.java
Patch:
@@ -11,6 +11,7 @@
 import org.robovm.apple.uikit.UIPress;
 import org.robovm.apple.uikit.UIPressesEvent;
 import org.robovm.apple.uikit.UIRectEdge;
+import org.robovm.apple.uikit.UIScreen;
 import org.robovm.apple.uikit.UIUserInterfaceIdiom;
 
 /** DO NOT EDIT THIS FILE - it is machine generated */
@@ -36,6 +37,7 @@ public void viewWillAppear (boolean arg0) {
 	@Override
 	public void viewDidAppear (boolean animated) {
 		super.viewDidAppear(animated);
+		getView().setContentScaleFactor(UIScreen.getMainScreen().getNativeScale());
 		if (app.viewControllerListener != null) app.viewControllerListener.viewDidAppear(animated);
 	}
 

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSUIViewController.java
Patch:
@@ -10,6 +10,7 @@
 import org.robovm.apple.uikit.UIPress;
 import org.robovm.apple.uikit.UIPressesEvent;
 import org.robovm.apple.uikit.UIRectEdge;
+import org.robovm.apple.uikit.UIScreen;
 import org.robovm.apple.uikit.UIUserInterfaceIdiom;
 
 public class IOSUIViewController extends GLKViewController {
@@ -32,6 +33,7 @@ public void viewWillAppear (boolean arg0) {
 	@Override
 	public void viewDidAppear (boolean animated) {
 		super.viewDidAppear(animated);
+		getView().setContentScaleFactor(UIScreen.getMainScreen().getNativeScale());
 		if (app.viewControllerListener != null) app.viewControllerListener.viewDidAppear(animated);
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -87,7 +87,7 @@ public SelectBox (SelectBoxStyle style) {
 		selection.setActor(this);
 		selection.setRequired(true);
 
-		scrollPane = new SelectBoxScrollPane(this);
+		scrollPane = newScrollPane();
 
 		addListener(clickListener = new ClickListener() {
 			public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -87,7 +87,7 @@ public SelectBox (SelectBoxStyle style) {
 		selection.setActor(this);
 		selection.setRequired(true);
 
-		scrollPane = new SelectBoxScrollPane(this);
+		scrollPane = newScrollPane();
 
 		addListener(clickListener = new ClickListener() {
 			public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {

File: gdx/src/com/badlogic/gdx/math/collision/OrientedBoundingBox.java
Patch:
@@ -87,7 +87,7 @@ public BoundingBox getBounds () {
 	}
 
 	public void setBounds (BoundingBox bounds) {
-		bounds.set(bounds);
+		this.bounds.set(bounds);
 		bounds.getCorner000(vertices[0b000]).mul(transform);
 		bounds.getCorner001(vertices[0b001]).mul(transform);
 		bounds.getCorner010(vertices[0b010]).mul(transform);
@@ -109,7 +109,7 @@ public void setTransform (Matrix4 transform) {
 	}
 
 	public OrientedBoundingBox set (BoundingBox bounds, Matrix4 transform) {
-		bounds.set(bounds);
+		setBounds(bounds);
 		setTransform(transform);
 		return this;
 	}

File: gdx/src/com/badlogic/gdx/math/collision/OrientedBoundingBox.java
Patch:
@@ -104,7 +104,7 @@ public Matrix4 getTransform () {
 	}
 
 	public void setTransform (Matrix4 transform) {
-		transform.set(transform);
+		this.transform.set(transform);
 		update();
 	}
 

File: gdx/test/com/badlogic/gdx/math/collision/CollisionTest.java
Patch:
@@ -4,6 +4,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+import com.badlogic.gdx.math.MathUtils;
 import org.junit.Test;
 
 import com.badlogic.gdx.math.Vector3;
@@ -33,7 +34,7 @@ public void testOrientedBoundingBox () {
 	@Test
 	public void testOrientedBoundingBoxCollision () {
 		OrientedBoundingBox b1 = new OrientedBoundingBox(new BoundingBox(Vector3.Zero, new Vector3(1, 1, 1)));
-		OrientedBoundingBox b2 = new OrientedBoundingBox(new BoundingBox(new Vector3(1, 1, 1), new Vector3(2, 2, 2)));
+		OrientedBoundingBox b2 = new OrientedBoundingBox(new BoundingBox(new Vector3(1 + MathUtils.FLOAT_ROUNDING_ERROR, 1, 1), new Vector3(2, 2, 2)));
 
 		assertFalse(b1.intersects(b2));
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/math/collision/OrientedBoundingBoxTest.java
Patch:
@@ -72,6 +72,7 @@ public void create() {
 	}
 
 	private void setupScene() {
+		boxes.clear();
 		for (int i = 0; i < BOXES; i++) {
 			boxes.add(new Box());
 		}

File: backends/gdx-backend-robovm-metalangle/src/com/badlogic/gdx/backends/iosrobovm/IOSUIViewController.java
Patch:
@@ -11,6 +11,7 @@
 import org.robovm.apple.uikit.UIPress;
 import org.robovm.apple.uikit.UIPressesEvent;
 import org.robovm.apple.uikit.UIRectEdge;
+import org.robovm.apple.uikit.UIScreen;
 import org.robovm.apple.uikit.UIUserInterfaceIdiom;
 
 /** DO NOT EDIT THIS FILE - it is machine generated */
@@ -36,6 +37,7 @@ public void viewWillAppear (boolean arg0) {
 	@Override
 	public void viewDidAppear (boolean animated) {
 		super.viewDidAppear(animated);
+		getView().setContentScaleFactor(UIScreen.getMainScreen().getNativeScale());
 		if (app.viewControllerListener != null) app.viewControllerListener.viewDidAppear(animated);
 	}
 

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSUIViewController.java
Patch:
@@ -10,6 +10,7 @@
 import org.robovm.apple.uikit.UIPress;
 import org.robovm.apple.uikit.UIPressesEvent;
 import org.robovm.apple.uikit.UIRectEdge;
+import org.robovm.apple.uikit.UIScreen;
 import org.robovm.apple.uikit.UIUserInterfaceIdiom;
 
 public class IOSUIViewController extends GLKViewController {
@@ -32,6 +33,7 @@ public void viewWillAppear (boolean arg0) {
 	@Override
 	public void viewDidAppear (boolean animated) {
 		super.viewDidAppear(animated);
+		getView().setContentScaleFactor(UIScreen.getMainScreen().getNativeScale());
 		if (app.viewControllerListener != null) app.viewControllerListener.viewDidAppear(animated);
 	}
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/DefaultAndroidInput.java
Patch:
@@ -832,7 +832,7 @@ public boolean isPeripheralAvailable (Peripheral peripheral) {
 		if (peripheral == Peripheral.HardwareKeyboard) return keyboardAvailable;
 		if (peripheral == Peripheral.OnscreenKeyboard) return true;
 		if (peripheral == Peripheral.Vibrator) return haptics.hasVibratorAvailable();
-		if (peripheral == Peripheral.HapticFeedback) return haptics.hasAmplitudeSupport();
+		if (peripheral == Peripheral.HapticFeedback) return haptics.hasHapticsSupport();
 		if (peripheral == Peripheral.MultitouchScreen) return hasMultitouch;
 		if (peripheral == Peripheral.RotationVector) return rotationVectorAvailable;
 		if (peripheral == Peripheral.Pressure) return true;

File: backends/gdx-backend-robovm-metalangle/src/com/badlogic/gdx/backends/iosrobovm/DefaultIOSInput.java
Patch:
@@ -460,9 +460,9 @@ public void setOnscreenKeyboardVisible (boolean visible, OnscreenKeyboardType ty
 		if (textfield == null) createDefaultTextField();
 		softkeyboardActive = visible;
 		if (visible) {
-			UIKeyboardType preferredInputType;
 			if (type == null) type = OnscreenKeyboardType.Default;
 			textfield.setKeyboardType(getIosInputType(type));
+			textfield.reloadInputViews();
 			textfield.becomeFirstResponder();
 			textfield.setDelegate(textDelegate);
 		} else {

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/DefaultIOSInput.java
Patch:
@@ -451,9 +451,9 @@ public void setOnscreenKeyboardVisible (boolean visible, OnscreenKeyboardType ty
 		if (textfield == null) createDefaultTextField();
 		softkeyboardActive = visible;
 		if (visible) {
-			UIKeyboardType preferredInputType;
 			if (type == null) type = OnscreenKeyboardType.Default;
 			textfield.setKeyboardType(getIosInputType(type));
+			textfield.reloadInputViews();
 			textfield.becomeFirstResponder();
 			textfield.setDelegate(textDelegate);
 		} else {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3WindowConfiguration.java
Patch:
@@ -150,7 +150,7 @@ public void setFullscreenMode (DisplayMode mode) {
 		this.fullscreenMode = (Lwjgl3DisplayMode)mode;
 	}
 
-	/** Sets the window title. Defaults to empty string. */
+	/** Sets the window title. If null, the application listener's class name is used. */
 	public void setTitle (String title) {
 		this.title = title;
 	}

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSDevice.java
Patch:
@@ -139,6 +139,7 @@ static ObjectMap<String, IOSDevice> populateWithKnownDevices () {
 
 		addDeviceToMap(deviceMap, "SIMULATOR_32", "i386", 264);
 		addDeviceToMap(deviceMap, "SIMULATOR_64", "x86_64", 264);
+		addDeviceToMap(deviceMap, "SIMULATOR_ARM64", "arm64", 264);
 
 		return deviceMap;
 	}

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/objectal/OALAudioTrack.java
Patch:
@@ -50,6 +50,9 @@ public class OALAudioTrack extends NSObject {
 	@Method
 	public native boolean playFile (String filePath);
 
+	@Method(selector = "playFile:loops:")
+	public native boolean playFile (String filePath, int numberOfLoops);
+
 	@Property
 	public native boolean isPaused ();
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplicationConfiguration.java
Patch:
@@ -70,6 +70,8 @@ public class GwtApplicationConfiguration {
 	public boolean useAccelerometer = true;
 	/** whether to use the gyroscope. default: false **/
 	public boolean useGyroscope = false;
+	/** whether to make the webgl context compatible with WebXR, may have positive performance impact **/
+	public boolean xrCompatible = false;
 
 	/** Creates configuration for a resizable application, using available browser window space minus padding (see
 	 * {@link #padVertical}, {@link #padHorizontal}). */

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtCursor.java
Patch:
@@ -67,7 +67,7 @@ static String getNameForSystemCursor (SystemCursor systemCursor) {
 		} else if (systemCursor == SystemCursor.Crosshair) {
 			return "crosshair";
 		} else if (systemCursor == SystemCursor.Hand) {
-			return "pointer"; // Don't change to 'hand', 'hand' doesn't work in the newer IEs
+			return "pointer"; // Don't change to 'hand'; 'hand' is non-standard holdover from IE5
 		} else if (systemCursor == SystemCursor.HorizontalResize) {
 			return "ew-resize";
 		} else if (systemCursor == SystemCursor.VerticalResize) {
@@ -82,10 +82,11 @@ static String getNameForSystemCursor (SystemCursor systemCursor) {
 			return "move";
 		} else if (systemCursor == SystemCursor.NotAllowed) {
 			return "not-allowed";
+		} else if (systemCursor == SystemCursor.None) {
+			return "none";
 		} else {
 			throw new GdxRuntimeException("Unknown system cursor " + systemCursor);
 		}
-
 	}
 
 	@Override

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/widgets/ResizableWidget.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.badlogic.gdx.backends.gwt.widgets;
 
-import com.google.gwt.user.client.Element;
+import com.google.gwt.dom.client.Element;
 
 /** An interface that defines the methods required to support automatic resizing of the Widget element. */
 public interface ResizableWidget {

File: extensions/gdx-box2d/gdx-box2d-gwt/src/com/badlogic/gdx/physics/box2d/gwt/emu/org/jbox2d/collision/ManifoldPoint.java
Patch:
@@ -85,7 +85,7 @@ public ManifoldPoint (final ManifoldPoint cp) {
 		id = new ContactID(cp.id);
 	}
 
-	/** Sets this manifold point form the given one
+	/** Sets this manifold point from the given one
 	 * @param cp the point to copy from */
 	public void set (final ManifoldPoint cp) {
 		localPoint.set(cp.localPoint);

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObject.java
Patch:
@@ -151,7 +151,7 @@ protected void refCollisionShape (btCollisionShape shape) {
 		if (collisionShape == shape) return;
 		if (collisionShape != null) collisionShape.release();
 		collisionShape = shape;
-		collisionShape.obtain();
+		if (collisionShape != null) collisionShape.obtain();
 	}
 
 	public btCollisionShape getCollisionShape () {

File: extensions/gdx-lwjgl3-glfw-awt-macos/src/com/badlogic/gdx/backends/lwjgl3/awt/GlfwAWTLoader.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.zip.CRC32;
 
 import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.badlogic.gdx.utils.SharedLibraryLoader;
 
 public class GlfwAWTLoader {
 	static public boolean isMac = System.getProperty("os.name").contains("Mac");
@@ -175,7 +176,7 @@ public void run () {
 			}
 		}
 
-		String source = "macosx64/libglfw.dylib";
+		String source = SharedLibraryLoader.isARM ? "macosarm64/libglfwarm64.dylib" : "macosx64/libglfw.dylib";
 		String crc = crc(GlfwAWTLoader.class.getResourceAsStream("/" + source));
 		File sharedLib = getExtractedFile(crc, new File(source).getName());
 

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java
Patch:
@@ -233,7 +233,7 @@ void generate () {
 			infoLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
 			panel.add(infoLabel);
 			JEditorPane pane = new JEditorPane("text/html",
-				"<a href=\"https://github.com/libgdx/libgdx/wiki/Dependency-management-with-Gradle\">Dependency Management</a>");
+				"<a href=\"https://libgdx.com/wiki/articles/dependency-management-with-gradle\">Dependency Management</a>");
 			pane.addHyperlinkListener(new HyperlinkListener() {
 				@Override
 				public void hyperlinkUpdate (HyperlinkEvent e) {
@@ -454,7 +454,7 @@ public void actionPerformed (ActionEvent e) {
 	class Form extends JPanel {
 		ExternalExtensionsDialog externalExtensionsDialog = new ExternalExtensionsDialog(dependencies);
 		JLabel nameLabel = new JLabel("Project name:");
-		JTextField nameText = new JTextField("my-gdx-game");
+		JTextField nameText = new JTextField("My GDX Game");
 		JLabel packageLabel = new JLabel("Package name:");
 		JTextField packageText = new JTextField("com.mygdx.game");
 		JLabel gameClassLabel = new JLabel("Game class:");

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/SettingsDialog.java
Patch:
@@ -113,7 +113,7 @@ public void mouseClicked (MouseEvent e) {
 						Desktop desktop = Desktop.getDesktop();
 						try {
 							URI uri = new URI(
-								"https://github.com/libgdx/libgdx/wiki/Improving-workflow-with-Gradle#how-to-remove-gradle-ide-integration-from-your-project");
+								"https://libgdx.com/wiki/articles/improving-workflow-with-gradle#how-to-remove-gradle-ide-integration-from-your-project");
 							desktop.browse(uri);
 						} catch (IOException ex) {
 							ex.printStackTrace();

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -59,7 +59,7 @@ enum GraphicsType {
 	class DisplayMode {
 		/** the width in physical pixels **/
 		public final int width;
-		/** the height in physical pixles **/
+		/** the height in physical pixels **/
 		public final int height;
 		/** the refresh rate in Hertz **/
 		public final int refreshRate;

File: gdx/src/com/badlogic/gdx/Version.java
Patch:
@@ -23,7 +23,7 @@
  * @author mzechner */
 public class Version {
 	/** The current version of libGDX as a String in the major.minor.revision format **/
-	public static final String VERSION = "1.10.1";
+	public static final String VERSION = "1.11.1";
 
 	/** The current major version of libGDX **/
 	public static final int MAJOR;

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -276,9 +276,10 @@ public ByteBuffer map (FileChannel.MapMode mode) {
 		if (type == FileType.Classpath) throw new GdxRuntimeException("Cannot map a classpath file: " + this);
 		RandomAccessFile raf = null;
 		try {
-			raf = new RandomAccessFile(file, mode == MapMode.READ_ONLY ? "r" : "rw");
+			File f = file();
+			raf = new RandomAccessFile(f, mode == MapMode.READ_ONLY ? "r" : "rw");
 			FileChannel fileChannel = raf.getChannel();
-			ByteBuffer map = fileChannel.map(mode, 0, file.length());
+			ByteBuffer map = fileChannel.map(mode, 0, f.length());
 			map.order(ByteOrder.nativeOrder());
 			return map;
 		} catch (Exception ex) {

File: gdx/src/com/badlogic/gdx/graphics/Cursor.java
Patch:
@@ -13,6 +13,6 @@
 public interface Cursor extends Disposable {
 
 	public static enum SystemCursor {
-		Arrow, Ibeam, Crosshair, Hand, HorizontalResize, VerticalResize, NWSEResize, NESWResize, AllResize, NotAllowed
+		Arrow, Ibeam, Crosshair, Hand, HorizontalResize, VerticalResize, NWSEResize, NESWResize, AllResize, NotAllowed, None
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/g2d/DistanceFieldFont.java
Patch:
@@ -28,7 +28,7 @@
 import com.badlogic.gdx.utils.Array;
 
 /** Renders bitmap fonts using distance field textures, see the
- * <a href="https://github.com/libgdx/libgdx/wiki/Distance-field-fonts">Distance Field Fonts wiki article</a> for usage.
+ * <a href="https://libgdx.com/wiki/graphics/2d/fonts/distance-field-fonts">Distance Field Fonts wiki article</a> for usage.
  * Initialize the SpriteBatch with the {@link #createDistanceFieldShader()} shader.
  * <p>
  * Attention: The batch is flushed before and after each string is rendered.
@@ -93,8 +93,8 @@ public void setDistanceFieldSmoothing (float distanceFieldSmoothing) {
 		this.distanceFieldSmoothing = distanceFieldSmoothing;
 	}
 
-	/** Returns a new instance of the distance field shader, see https://github.com/libgdx/libgdx/wiki/Distance-field-fonts if the
-	 * u_smoothing uniform > 0.0. Otherwise the same code as the default SpriteBatch shader is used. */
+	/** Returns a new instance of the distance field shader, see https://libgdx.com/wiki/graphics/2d/fonts/distance-field-fonts if
+	 * the u_smoothing uniform > 0.0. Otherwise the same code as the default SpriteBatch shader is used. */
 	static public ShaderProgram createDistanceFieldShader () {
 		String vertexShader = "attribute vec4 " + ShaderProgram.POSITION_ATTRIBUTE + ";\n" //
 			+ "attribute vec4 " + ShaderProgram.COLOR_ATTRIBUTE + ";\n" //

File: gdx/src/com/badlogic/gdx/graphics/g3d/attributes/IntAttribute.java
Patch:
@@ -23,7 +23,8 @@ public class IntAttribute extends Attribute {
 	public static final long CullFace = register(CullFaceAlias);
 
 	/** create a cull face attribute to be used in a material
-	 * @param value cull face value, possible values are GL_FRONT_AND_BACK, GL_BACK, GL_FRONT, or -1 to inherit default
+	 * @param value cull face value, possible values are 0 (render both faces), GL_FRONT_AND_BACK (render nothing), GL_BACK (render
+	 *           front faces only), GL_FRONT (render back faces only), or -1 to inherit default
 	 * @return an attribute */
 	public static IntAttribute createCullFace (int value) {
 		return new IntAttribute(CullFace, value);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -260,7 +260,7 @@ public Mesh end (Mesh mesh) {
 
 	/** End building the mesh and returns the mesh */
 	public Mesh end () {
-		return end(new Mesh(true, vertices.size / stride, indices.size, attributes));
+		return end(new Mesh(true, Math.min(vertices.size / stride, MAX_VERTICES), indices.size, attributes));
 	}
 
 	/** Clears the data being built up until now, including the vertices, indices and all parts. Must be called in between the call
@@ -795,7 +795,7 @@ public void addMesh (float[] vertices, short[] indices) {
 
 		ensureIndices(indices.length);
 		for (int i = 0; i < indices.length; ++i)
-			index((short)(indices[i] + offset));
+			index((short)(indices[i] & 0xFFFF + offset));
 	}
 
 	// TODO: The following methods are deprecated and will be removed in a future release

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
Patch:
@@ -53,7 +53,7 @@
  * regions in the atlas as ninepatches, sprites, drawables, etc. The get* methods return an instance of the object in the skin.
  * The new* methods return a copy of an instance in the skin.
  * <p>
- * See the <a href="https://github.com/libgdx/libgdx/wiki/Skin">documentation</a> for more.
+ * See the <a href="https://libgdx.com/wiki/graphics/2d/scene2d/skin">documentation</a> for more.
  * @author Nathan Sweet */
 public class Skin implements Disposable {
 	ObjectMap<Class, ObjectMap<String, Object>> resources = new ObjectMap();

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -41,7 +41,7 @@
 import java.util.Map;
 
 /** Reads/writes Java objects to/from JSON, automatically. See the wiki for usage:
- * https://github.com/libgdx/libgdx/wiki/Reading-and-writing-JSON
+ * https://libgdx.com/wiki/utils/reading-and-writing-json
  * @author Nathan Sweet */
 public class Json {
 	static private final boolean debug = false;

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/IOSRobovmTests.java
Patch:
@@ -27,6 +27,7 @@ public class IOSRobovmTests extends IOSApplication.Delegate {
 	@Override
 	protected IOSApplication createApplication () {
 		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
+		config.useHaptics = true;
 		return new IOSApplication(new IosTestWrapper(), config);
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/DecalTest.java
Patch:
@@ -54,7 +54,7 @@ public void create () {
 		egg = new Texture(Gdx.files.internal("data/egg.png"));
 		egg.setFilter(Texture.TextureFilter.Linear, Texture.TextureFilter.Linear);
 		egg.setWrap(Texture.TextureWrap.ClampToEdge, Texture.TextureWrap.ClampToEdge);
-		wheel = new Texture(Gdx.files.internal("data/wheel.png"));
+		wheel = new Texture(Gdx.files.internal("data/sys.png"));
 		wheel.setFilter(Texture.TextureFilter.Linear, Texture.TextureFilter.Linear);
 		wheel.setWrap(Texture.TextureWrap.ClampToEdge, Texture.TextureWrap.ClampToEdge);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MusicTest.java
Patch:
@@ -160,8 +160,8 @@ void setSong (Song song) {
 			songDuration = 183;
 			break;
 		case OGG:
-			music = Gdx.audio.newMusic(Gdx.files.internal("data/cloudconnected.ogg"));
-			songDuration = 22;
+			music = Gdx.audio.newMusic(Gdx.files.internal("data/8.12.ogg"));
+			songDuration = 183;
 			break;
 		case WAV:
 			music = Gdx.audio.newMusic(Gdx.files.internal("data/8.12.loop.wav"));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SystemCursorTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.Cursor;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.Stage;
@@ -25,6 +26,7 @@
 import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
 import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
 import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.utils.ScreenUtils;
 import com.badlogic.gdx.utils.viewport.ScreenViewport;
 
 public class SystemCursorTest extends GdxTest {
@@ -58,6 +60,7 @@ public void changed (ChangeEvent event, Actor actor) {
 	@Override
 	public void render () {
 		super.render();
+		ScreenUtils.clear(Color.BLACK);
 		stage.act();
 		stage.draw();
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderTest.java
Patch:
@@ -43,8 +43,8 @@
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 public class ShaderTest extends GdxTest {
-	// Create a custom attribute, see https://github.com/libgdx/libgdx/wiki/Material-and-environment
-	// See also: http://blog.xoppa.com/using-materials-with-libgdx/
+	// Create a custom attribute, see https://libgdx.com/wiki/graphics/3d/material-and-environment
+	// See also: https://xoppa.github.io/blog/using-materials-with-libgdx/
 	public static class TestAttribute extends Attribute {
 		public final static String Alias = "Test";
 		public final static long ID = register(Alias);
@@ -74,7 +74,7 @@ public int compareTo (Attribute o) {
 		}
 	}
 
-	// Create a custom shader, see also http://blog.xoppa.com/creating-a-shader-with-libgdx
+	// Create a custom shader, see also https://xoppa.github.io/blog/creating-a-shader-with-libgdx/
 	// BaseShader adds some basic functionality used to manage uniforms etc.
 	public static class TestShader extends BaseShader {
 		// @off

File: tests/gdx-tests/src/com/badlogic/gdx/tests/net/HttpRequestExample.java
Patch:
@@ -29,7 +29,7 @@ public class HttpRequestExample extends GdxTest {
 	@Override
 	public void create () {
 		HttpRequest request = new HttpRequest(HttpMethods.GET);
-		request.setUrl("http://libgdx.badlogicgames.com/nightlies/dist/AUTHORS");
+		request.setUrl("https://raw.githubusercontent.com/libgdx/libgdx/master/AUTHORS");
 		Gdx.net.sendHttpRequest(request, new HttpResponseListener() {
 			@Override
 			public void handleHttpResponse (HttpResponse httpResponse) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/net/NetAPITest.java
Patch:
@@ -109,9 +109,9 @@ public void clicked (InputEvent event, float x, float y) {
 					else if (clickedButton == btnDownloadText)
 						url = "https://www.apache.org/licenses/LICENSE-2.0.txt";
 					else if (clickedButton == btnDownloadLarge)
-						url = "https://libgdx.badlogicgames.com/releases/libgdx-1.2.0.zip";
+						url = "https://github.com/libgdx/libgdx/archive/refs/tags/1.11.0.zip";
 					else if (clickedButton == btnDownloadError)
-						url = "https://www.badlogicgames.com/doesnotexist";
+						url = "https://libgdx.com/doesnotexist";
 					else if (clickedButton == btnOpenUri) {
 						Gdx.net.openURI("https://libgdx.com");
 						return;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -49,6 +49,7 @@
 import com.badlogic.gdx.tests.extensions.FreeTypePackTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeTest;
 import com.badlogic.gdx.tests.extensions.InternationalFontsTest;
+import com.badlogic.gdx.tests.math.CollisionPlaygroundTest;
 import com.badlogic.gdx.tests.math.OctreeTest;
 import com.badlogic.gdx.tests.g3d.Animation3DTest;
 import com.badlogic.gdx.tests.g3d.AnisotropyTest;
@@ -125,6 +126,7 @@ public class GdxTests {
 		BulletTestCollection.class,
 		ClipboardTest.class,
 		CollectionsTest.class,
+		CollisionPlaygroundTest.class,
 		ColorTest.class,
 		ContainerTest.class,
 		CoordinatesTest.class,
@@ -186,6 +188,7 @@ public class GdxTests {
 		MatrixJNITest.class,
 		MeshBuilderTest.class,
 		MeshShaderTest.class,
+		MeshWithCustomAttributesTest.class,
 		MipMapTest.class,
 		ModelTest.class,
 		ModelCacheTest.class,

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplicationConfiguration.java
Patch:
@@ -88,7 +88,7 @@ public class AndroidApplicationConfiguration {
 	public boolean getTouchEventsForLiveWallpaper = false;
 
 	/** set this to true to enable Android 4.4 KitKat's 'Immersive mode' **/
-	public boolean useImmersiveMode = false;
+	public boolean useImmersiveMode = true;
 
 	/** Experimental, whether to enable OpenGL ES 3 if supported. If not supported it will fall-back to OpenGL ES 2.0. When GL ES
 	 * 3* is enabled, {@link com.badlogic.gdx.Gdx#gl30} can be used to access its functionality. Requires at least Android 4.3 (API

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Graphics.java
Patch:
@@ -84,7 +84,7 @@ public void run () {
 						return;
 					}
 					window.makeCurrent();
-					gl20.glViewport(0, 0, getWidth(), getHeight());
+					gl20.glViewport(0, 0, backBufferWidth, backBufferHeight);
 					window.getListener().resize(getWidth(), getHeight());
 					window.getListener().render();
 					GLFW.glfwSwapBuffers(windowHandle);

File: backends/gdx-backend-robovm-metalangle/src/com/badlogic/gdx/backends/iosrobovm/IOSApplicationConfiguration.java
Patch:
@@ -51,6 +51,9 @@ public class IOSApplicationConfiguration {
 	/** whether to use the compass, default true * */
 	public boolean useCompass = true;
 
+	/** whether to use the haptics engine, default false. * */
+	public boolean useHaptics = false;
+
 	/** whether or not to allow background music from iPod * */
 	public boolean allowIpod = true;
 

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/IOSRobovmTests.java
Patch:
@@ -27,6 +27,7 @@ public class IOSRobovmTests extends IOSApplication.Delegate {
 	@Override
 	protected IOSApplication createApplication () {
 		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
+		config.useHaptics = true;
 		return new IOSApplication(new IosTestWrapper(), config);
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -260,7 +260,7 @@ public Mesh end (Mesh mesh) {
 
 	/** End building the mesh and returns the mesh */
 	public Mesh end () {
-		return end(new Mesh(true, vertices.size / stride, indices.size, attributes));
+		return end(new Mesh(true, Math.min(vertices.size / stride, MAX_VERTICES), indices.size, attributes));
 	}
 
 	/** Clears the data being built up until now, including the vertices, indices and all parts. Must be called in between the call
@@ -795,7 +795,7 @@ public void addMesh (float[] vertices, short[] indices) {
 
 		ensureIndices(indices.length);
 		for (int i = 0; i < indices.length; ++i)
-			index((short)(indices[i] + offset));
+			index((short)(indices[i] & 0xFFFF + offset));
 	}
 
 	// TODO: The following methods are deprecated and will be removed in a future release

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3WindowConfiguration.java
Patch:
@@ -39,7 +39,7 @@ public class Lwjgl3WindowConfiguration {
 	String[] windowIconPaths;
 	Lwjgl3WindowListener windowListener;
 	Lwjgl3DisplayMode fullscreenMode;
-	String title;
+	String title = "";
 	Color initialBackgroundColor = Color.BLACK;
 	boolean initialVisible = true;
 	boolean vSyncEnabled = true;

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -276,9 +276,10 @@ public ByteBuffer map (FileChannel.MapMode mode) {
 		if (type == FileType.Classpath) throw new GdxRuntimeException("Cannot map a classpath file: " + this);
 		RandomAccessFile raf = null;
 		try {
-			raf = new RandomAccessFile(file, mode == MapMode.READ_ONLY ? "r" : "rw");
+			File f = file();
+			raf = new RandomAccessFile(f, mode == MapMode.READ_ONLY ? "r" : "rw");
 			FileChannel fileChannel = raf.getChannel();
-			ByteBuffer map = fileChannel.map(mode, 0, file.length());
+			ByteBuffer map = fileChannel.map(mode, 0, f.length());
 			map.order(ByteOrder.nativeOrder());
 			return map;
 		} catch (Exception ex) {

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/objectal/OALAudioTrack.java
Patch:
@@ -50,6 +50,9 @@ public class OALAudioTrack extends NSObject {
 	@Method
 	public native boolean playFile (String filePath);
 
+	@Method(selector = "playFile:loops:")
+	public native boolean playFile (String filePath, int numberOfLoops);
+
 	@Property
 	public native boolean isPaused ();
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -186,6 +186,7 @@ public class GdxTests {
 		MatrixJNITest.class,
 		MeshBuilderTest.class,
 		MeshShaderTest.class,
+		MeshWithCustomAttributesTest.class,
 		MipMapTest.class,
 		ModelTest.class,
 		ModelCacheTest.class,

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -83,7 +83,7 @@ static void initializeGlfw () {
 		if (errorCallback == null) {
 			if (SharedLibraryLoader.isMac) loadGlfwAwtMacos();
 			Lwjgl3NativesLoader.load();
-			errorCallback = GLFWErrorCallback.createPrint(System.err);
+			errorCallback = GLFWErrorCallback.createPrint(Lwjgl3ApplicationConfiguration.errorStream);
 			GLFW.glfwSetErrorCallback(errorCallback);
 			if (SharedLibraryLoader.isMac) GLFW.glfwInitHint(GLFW.GLFW_ANGLE_PLATFORM_TYPE, GLFW.GLFW_ANGLE_PLATFORM_TYPE_METAL);
 			GLFW.glfwInitHint(GLFW.GLFW_JOYSTICK_HAT_BUTTONS, GLFW.GLFW_FALSE);

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3ApplicationConfiguration.java
Patch:
@@ -38,6 +38,8 @@
 import com.badlogic.gdx.graphics.glutils.HdpiUtils;
 
 public class Lwjgl3ApplicationConfiguration extends Lwjgl3WindowConfiguration {
+	public static PrintStream errorStream = System.err;
+
 	boolean disableAudio = false;
 
 	/** The maximum number of threads to use for network requests. Default is {@link Integer#MAX_VALUE}. */

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OggInputStream.java
Patch:
@@ -105,7 +105,7 @@ public OggInputStream (InputStream input) {
 	 *
 	 * @param input The input stream from which to read the OGG file
 	 * @param previousStream The stream instance to reuse buffers from, may be null */
-	OggInputStream (InputStream input, OggInputStream previousStream) {
+	public OggInputStream (InputStream input, OggInputStream previousStream) {
 		if (previousStream == null) {
 			convbuffer = new byte[convsize];
 			pcmBuffer = BufferUtils.createByteBuffer(4096 * 500);

File: gdx/src/com/badlogic/gdx/graphics/glutils/MipMapGenerator.java
Patch:
@@ -67,7 +67,9 @@ private static void generateMipMapGLES20 (int target, Pixmap pixmap) {
 
 	private static void generateMipMapDesktop (int target, Pixmap pixmap, int textureWidth, int textureHeight) {
 		if (Gdx.graphics.supportsExtension("GL_ARB_framebuffer_object")
-			|| Gdx.graphics.supportsExtension("GL_EXT_framebuffer_object") || Gdx.gl30 != null) {
+			|| Gdx.graphics.supportsExtension("GL_EXT_framebuffer_object")
+			|| Gdx.gl20.getClass().getName().equals("com.badlogic.gdx.backends.lwjgl3.Lwjgl3GLES20") // LWJGL3ANGLE
+			|| Gdx.gl30 != null) {
 			Gdx.gl.glTexImage2D(target, 0, pixmap.getGLInternalFormat(), pixmap.getWidth(), pixmap.getHeight(), 0,
 				pixmap.getGLFormat(), pixmap.getGLType(), pixmap.getPixels());
 			Gdx.gl20.glGenerateMipmap(target);

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl3/Lwjgl3TestStarter.java
Patch:
@@ -50,8 +50,6 @@ public class Lwjgl3TestStarter {
 	 * 
 	 * @param argv command line arguments */
 	public static void main (String[] argv) {
-		System.setProperty("java.awt.headless", "true");
-
 		options = new CommandLineOptions(argv);
 
 		Lwjgl3ApplicationConfiguration config = new Lwjgl3ApplicationConfiguration();

File: gdx/src/com/badlogic/gdx/graphics/g2d/Gdx2DPixmap.java
Patch:
@@ -95,7 +95,7 @@ public Gdx2DPixmap (byte[] encodedData, int offset, int len, int requestedFormat
 	}
 
 	public Gdx2DPixmap (ByteBuffer encodedData, int offset, int len, int requestedFormat) throws IOException {
-		pixelPtr = load(nativeData, encodedData, offset, len);
+		pixelPtr = loadByteBuffer(nativeData, encodedData, offset, len);
 		if (pixelPtr == null) throw new IOException("Error loading pixmap: " + getFailureReason());
 
 		basePtr = nativeData[0];
@@ -314,7 +314,7 @@ static private String getFormatString (int format) {
 		return pixel_buffer;
 	 */
 
-	private static native ByteBuffer load (long[] nativeData, ByteBuffer buffer, int offset, int len); /*MANUAL
+	private static native ByteBuffer loadByteBuffer (long[] nativeData, ByteBuffer buffer, int offset, int len); /*MANUAL
 		if(buffer==0)
 			return 0;
 

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Graphics.java
Patch:
@@ -81,11 +81,12 @@ public void invoke (long windowHandle, final int width, final int height) {
 
 	public Lwjgl3Graphics (Lwjgl3Window window) {
 		this.window = window;
-		if (window.getConfig().useGL30) {
+		if (window.getConfig().glEmulation == Lwjgl3ApplicationConfiguration.GLEmulation.GL30) {
 			this.gl30 = new Lwjgl3GL30();
 			this.gl20 = this.gl30;
 		} else {
-			this.gl20 = new Lwjgl3GL20();
+			this.gl20 = window.getConfig().glEmulation == Lwjgl3ApplicationConfiguration.GLEmulation.GL20 ? new Lwjgl3GL20()
+				: new Lwjgl3GLES20();
 			this.gl30 = null;
 		}
 		updateFramebufferInfo();

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl3/MultiWindowTest.java
Patch:
@@ -36,6 +36,7 @@ public static class MainWindow extends ApplicationAdapter {
 
 		@Override
 		public void create () {
+			System.out.println(Gdx.graphics.getGLVersion().getRendererString());
 			sharedSpriteBatch = new SpriteBatch();
 			sharedTexture = new Texture("data/badlogic.jpg");
 		}
@@ -95,6 +96,7 @@ public static void main (String[] argv) {
 		Lwjgl3ApplicationConfiguration config = new Lwjgl3ApplicationConfiguration();
 		config.setTitle("Multi-window test");
 		config.useVsync(true);
+		config.setOpenGLEmulation(Lwjgl3ApplicationConfiguration.GLEmulation.ANGLE_GLES20, 0, 0);
 		new Lwjgl3Application(new MainWindow(), config);
 	}
 }

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/reflect/ClassReflection.java
Patch:
@@ -30,7 +30,7 @@ static public Class forName (String name) throws ReflectionException {
 		try {
 			return ReflectionCache.forName(name).getClassOfType();
 		} catch (ClassNotFoundException e) {
-			throw new ReflectionException("Class not found: " + name);
+			throw new ReflectionException("Class not found: " + name, e);
 		}
 	}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/ReflectionCache.java
Patch:
@@ -30,7 +30,7 @@ public static Type forName (String name) throws ClassNotFoundException {
 			type.source = instance1;
 		}
 		if (type == null) {
-			throw new RuntimeException("Couldn't find Type for class '" + name + "'");
+			throw new ClassNotFoundException("Couldn't find Type for class '" + name + "'");
 		}
 		if (type.source == null) {
 			type.source = instance2;

File: gdx/src/com/badlogic/gdx/utils/Pool.java
Patch:
@@ -87,6 +87,7 @@ protected void reset (T object) {
 	/** Called when an object is discarded. This is the case when an object is freed, but the maximum capacity of the pool is
 	 * reached, and when the pool is {@link #clear() cleared} */
 	protected void discard (T object) {
+		reset(object);
 	}
 
 	/** Puts the specified objects in the pool. Null objects within the array are silently ignored.

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePacker.java
Patch:
@@ -516,7 +516,8 @@ private void writePageLegacy (OutputStreamWriter writer, Page page) throws IOExc
 	private void writeRectLegacy (Writer writer, Page page, Rect rect, String name) throws IOException {
 		writer.write(Rect.getAtlasName(name, settings.flattenPaths) + "\n");
 		writer.write("  rotate: " + rect.rotated + "\n");
-		writer.write("  xy: " + (page.x + rect.x) + ", " + (page.y + page.height - rect.y - rect.height) + "\n");
+		writer
+			.write("  xy: " + (page.x + rect.x) + ", " + (page.y + page.height - rect.y - (rect.height - settings.paddingY)) + "\n");
 
 		writer.write("  size: " + rect.regionWidth + ", " + rect.regionHeight + "\n");
 		if (rect.splits != null) {

File: gdx/src/com/badlogic/gdx/graphics/GL20.java
Patch:
@@ -377,6 +377,7 @@ public void glCompressedTexSubImage2D (int target, int level, int xoffset, int y
 
 	public void glDrawArrays (int mode, int first, int count);
 
+	/** Not fully supported with GWT backend: indices content is ignored, only buffer position is used. */
 	public void glDrawElements (int mode, int count, int type, Buffer indices);
 
 	public void glEnable (int cap);

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -621,10 +621,8 @@ public void render (ShaderProgram shader, int primitiveType, int offset, int cou
 				int oldPosition = buffer.position();
 				int oldLimit = buffer.limit();
 				((Buffer)buffer).position(offset);
-				((Buffer)buffer).limit(offset + count);
 				Gdx.gl20.glDrawElements(primitiveType, count, GL20.GL_UNSIGNED_SHORT, buffer);
 				((Buffer)buffer).position(oldPosition);
-				((Buffer)buffer).limit(oldLimit);
 			} else {
 				Gdx.gl20.glDrawArrays(primitiveType, offset, count);
 			}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/CommandLineOptions.java
Patch:
@@ -37,6 +37,7 @@ public boolean isTestCompatible (String testName) {
 		GdxTestConfig config = clazz.getAnnotation(GdxTestConfig.class);
 		if (config != null) {
 			if (config.requireGL30() && !gl30) return false;
+			if (config.OnlyGL20() && gl30) return false;
 		}
 		return true;
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTestConfig.java
Patch:
@@ -11,4 +11,6 @@
 @Target(TYPE)
 public @interface GdxTestConfig {
 	boolean requireGL30() default false;
+
+	boolean OnlyGL20() default false;
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -78,6 +78,7 @@
 import com.badlogic.gdx.tests.g3d.utils.DefaultTextureBinderTest;
 import com.badlogic.gdx.tests.gles2.HelloTriangle;
 import com.badlogic.gdx.tests.gles2.SimpleVertexShader;
+import com.badlogic.gdx.tests.gles2.VertexArrayTest;
 import com.badlogic.gdx.tests.gles3.InstancedRenderingTest;
 import com.badlogic.gdx.tests.gles3.PixelBufferObjectTest;
 import com.badlogic.gdx.tests.net.NetAPITest;
@@ -286,6 +287,7 @@ public class GdxTests {
 		UtfFontTest.class,
 		VBOWithVAOPerformanceTest.class,
 		Vector2dTest.class,
+		VertexArrayTest.class,
 		VertexBufferObjectShaderTest.class,
 		VibratorTest.class,
 		ViewportTest1.class,

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePacker.java
Patch:
@@ -516,8 +516,7 @@ private void writePageLegacy (OutputStreamWriter writer, Page page) throws IOExc
 	private void writeRectLegacy (Writer writer, Page page, Rect rect, String name) throws IOException {
 		writer.write(Rect.getAtlasName(name, settings.flattenPaths) + "\n");
 		writer.write("  rotate: " + rect.rotated + "\n");
-		writer
-			.write("  xy: " + (page.x + rect.x) + ", " + (page.y + page.height - rect.y - (rect.height - settings.paddingY)) + "\n");
+		writer.write("  xy: " + (page.x + rect.x) + ", " + (page.y + page.height - rect.y - rect.height) + "\n");
 
 		writer.write("  size: " + rect.regionWidth + ", " + rect.regionHeight + "\n");
 		if (rect.splits != null) {

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/flame/FlameMain.java
Patch:
@@ -996,7 +996,7 @@ public <T> T load (String resource, Class<T> type, AssetLoader loader, AssetLoad
 		AssetLoader<T, AssetLoaderParameters<T>> currentLoader = assetManager.getLoader(type);
 		if (loader != null) assetManager.setLoader(type, loader);
 
-		assetManager.load(resource, type, params);
+		assetManager.load(resolvedPath, type, params);
 		assetManager.finishLoading();
 		T res = assetManager.get(resolvedPath);
 		if (currentLoader != null) assetManager.setLoader(type, currentLoader);

File: gdx/src/com/badlogic/gdx/graphics/glutils/HdpiUtils.java
Patch:
@@ -73,7 +73,7 @@ public static int toLogicalX (int backBufferX) {
 		return (int)(backBufferX * Gdx.graphics.getWidth() / (float)Gdx.graphics.getBackBufferWidth());
 	}
 
-	/** Convers an y-coordinate given in backbuffer coordinates to logical screen coordinates */
+	/** Converts an y-coordinate given in backbuffer coordinates to logical screen coordinates. */
 	public static int toLogicalY (int backBufferY) {
 		return (int)(backBufferY * Gdx.graphics.getHeight() / (float)Gdx.graphics.getBackBufferHeight());
 	}
@@ -83,7 +83,7 @@ public static int toBackBufferX (int logicalX) {
 		return (int)(logicalX * Gdx.graphics.getBackBufferWidth() / (float)Gdx.graphics.getWidth());
 	}
 
-	/** Convers an y-coordinate given in backbuffer coordinates to logical screen coordinates */
+	/** Converts an y-coordinate given in logical screen coordinates to backbuffer coordinates. */
 	public static int toBackBufferY (int logicalY) {
 		return (int)(logicalY * Gdx.graphics.getBackBufferHeight() / (float)Gdx.graphics.getHeight());
 	}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -488,8 +488,8 @@ static long createGlfwWindow (Lwjgl3ApplicationConfiguration config, long shared
 				IntBuffer areaHeight = BufferUtils.createIntBuffer(1);
 				GLFW.glfwGetMonitorWorkarea(monitorHandle, areaXPos, areaYPos, areaWidth, areaHeight);
 
-				GLFW.glfwSetWindowPos(windowHandle, areaXPos.get(0) + areaWidth.get(0) / 2 - windowWidth / 2,
-					areaYPos.get(0) + areaHeight.get(0) / 2 - windowHeight / 2);
+				GLFW.glfwSetWindowPos(windowHandle, Math.max(0, areaXPos.get(0) + areaWidth.get(0) / 2 - windowWidth / 2),
+					Math.max(0, areaYPos.get(0) + areaHeight.get(0) / 2 - windowHeight / 2));
 			} else {
 				GLFW.glfwSetWindowPos(windowHandle, config.windowX, config.windowY);
 			}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -799,7 +799,7 @@ public boolean setZIndex (int index) {
 		Group parent = this.parent;
 		if (parent == null) return false;
 		Array<Actor> children = parent.children;
-		if (children.size == 1) return false;
+		if (children.size <= 1) return false;
 		index = Math.min(index, children.size - 1);
 		if (children.get(index) == this) return false;
 		if (!children.removeValue(this, true)) return false;

File: gdx/src/com/badlogic/gdx/math/GeometryUtils.java
Patch:
@@ -32,7 +32,7 @@ private GeometryUtils () {
 	 * 
 	 * <pre>
 	 * GeometryUtils.toBarycoord(p, a, b, c, barycentric);
-	 * // THEN: 
+	 * // THEN:
 	 * float u = 1f - barycentric.x - barycentric.y;
 	 * float x = u * aa.x + barycentric.x * bb.x + barycentric.y * cc.x;
 	 * float y = u * aa.y + barycentric.x * bb.y + barycentric.y * cc.y;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/DefaultIOSInput.java
Patch:
@@ -392,7 +392,7 @@ public void getTextInput (TextInputListener listener, String title, String text,
 
 	// hack for software keyboard support
 	// uses a hidden textfield to capture input
-	// see: http://www.badlogicgames.com/forum/viewtopic.php?f=17&t=11788
+	// see: https://web.archive.org/web/20171016192705/http://www.badlogicgames.com/forum/viewtopic.php?f=17&t=11788
 
 	private UITextField textfield = null;
 	private final UITextFieldDelegate textDelegate = new UITextFieldDelegateAdapter() {

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
Patch:
@@ -240,7 +240,7 @@ public IOSScreenBounds getScreenBounds () {
 	final void didBecomeActive (UIApplication uiApp) {
 		Gdx.app.debug("IOSApplication", "resumed");
 		// workaround for ObjectAL crash problem
-		// see: https://groups.google.com/forum/?fromgroups=#!topic/objectal-for-iphone/ubRWltp_i1Q
+		// see: https://groups.google.com/g/objectal-for-iphone/c/ubRWltp_i1Q
 		OALAudioSession audioSession = OALAudioSession.sharedInstance();
 		if (audioSession != null) {
 			audioSession.forceEndInterruption();

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -38,7 +38,7 @@
  * </p>
  * 
  * <p>
- * While game programmers are used to having a main loop, libgdx employs a different concept to accommodate the event based nature
+ * While game programmers are used to having a main loop, libGDX employs a different concept to accommodate the event based nature
  * of Android applications a little more. You application logic must be implemented in a {@link ApplicationListener} which has
  * methods that get called by the Application when the application is created, resumed, paused, disposed or rendered. As a
  * developer you will simply implement the ApplicationListener interface and fill in the functionality accordingly. The

File: gdx/src/com/badlogic/gdx/scenes/scene2d/InputEvent.java
Patch:
@@ -94,7 +94,7 @@ public void setKeyCode (int keyCode) {
 		this.keyCode = keyCode;
 	}
 
-	/** The character for the key that was type. Valid for: keyTyped. */
+	/** The character for the key that was typed. Valid for: keyTyped. */
 	public char getCharacter () {
 		return character;
 	}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/ExternalExtensionsDialog.java
Patch:
@@ -113,6 +113,7 @@ public void actionPerformed (ActionEvent e) {
 	public void showDialog (Component parent) {
 		takeSnapshot();
 		setLocationRelativeTo(parent);
+		setAlwaysOnTop(true);
 		setVisible(true);
 	}
 

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java
Patch:
@@ -125,7 +125,6 @@ public void mouseDragged(MouseEvent e) {
 		builder = new ProjectBuilder(new DependencyBank());
 		modules.add(ProjectType.CORE);
 		dependencies.add(builder.bank.getDependency(ProjectDependency.GDX));
-		dependencies.add(builder.bank.getDependency(ProjectDependency.BOX2D));
 	}
 
 	void generate () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -238,6 +238,7 @@ protected void calculateOffsets () {
 		float[] glyphPositions = this.glyphPositions.items;
 
 		// Check if the cursor has gone out the left or right side of the visible area and adjust renderOffset.
+		cursor = MathUtils.clamp(cursor, 0, glyphCount - 1);
 		float distance = glyphPositions[Math.max(0, cursor - 1)] + renderOffset;
 		if (distance <= 0)
 			renderOffset -= distance;

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -664,10 +664,9 @@ public void writeValue (@Null Object value, @Null Class knownType, @Null Class e
 
 			// Enum special case.
 			if (ClassReflection.isAssignableFrom(Enum.class, actualType)) {
+				if (actualType.getEnumConstants() == null) // Get the enum type when an enum value is an inner class (enum A {b{}}).
+					actualType = actualType.getSuperclass();
 				if (typeName != null && (knownType == null || knownType != actualType)) {
-					// Ensures that enums with specific implementations (abstract logic) serialize correctly.
-					if (actualType.getEnumConstants() == null) actualType = actualType.getSuperclass();
-
 					writeObjectStart(actualType, null);
 					writer.name("value");
 					writer.value(convertToString((Enum)value));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FrameBufferTest.java
Patch:
@@ -62,7 +62,6 @@ public void render () {
 		Gdx.gl20.glViewport(0, 0, frameBuffer.getWidth(), frameBuffer.getHeight());
 		Gdx.gl20.glClearColor(0f, 1f, 0f, 1);
 		Gdx.gl20.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		Gdx.gl20.glEnable(GL20.GL_TEXTURE_2D);
 		texture.bind();
 		meshShader.bind();
 		meshShader.setUniformi("u_texture", 0);
@@ -73,7 +72,6 @@ public void render () {
 		Gdx.gl20.glViewport(0, 0, frameBuffer.getWidth(), frameBuffer.getHeight());
 		Gdx.gl20.glClearColor(1f, 1f, 0f, 1);
 		Gdx.gl20.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_STENCIL_BUFFER_BIT);
-		Gdx.gl20.glEnable(GL20.GL_TEXTURE_2D);
 
 		Gdx.gl20.glEnable(GL20.GL_STENCIL_TEST);
 

File: extensions/gdx-box2d/gdx-box2d-gwt/src/com/badlogic/gdx/physics/box2d/gwt/emu/org/jbox2d/dynamics/joints/RopeJoint.java
Patch:
@@ -101,6 +101,8 @@ public void initVelocityConstraints(final SolverData data) {
       m_u.setZero();
       m_mass = 0.0f;
       m_impulse = 0.0f;
+      pool.pushRot(2);
+      pool.pushVec2(1);
       return;
     }
 

File: gdx/src/com/badlogic/gdx/assets/AssetDescriptor.java
Patch:
@@ -38,14 +38,14 @@ public AssetDescriptor (FileHandle file, Class<T> assetType) {
 	}
 
 	public AssetDescriptor (String fileName, Class<T> assetType, AssetLoaderParameters<T> params) {
-		this.fileName = fileName.replace('\\', '/');
+		this.fileName = fileName;
 		this.type = assetType;
 		this.params = params;
 	}
 
 	/** Creates an AssetDescriptor with an already resolved name. */
 	public AssetDescriptor (FileHandle file, Class<T> assetType, AssetLoaderParameters<T> params) {
-		this.fileName = file.path().replace('\\', '/');
+		this.fileName = file.path();
 		this.file = file;
 		this.type = assetType;
 		this.params = params;

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -221,9 +221,6 @@ public synchronized boolean contains (String fileName, Class type) {
 	/** Removes the asset and all its dependencies, if they are not used by other assets.
 	 * @param fileName the file name */
 	public synchronized void unload (String fileName) {
-		// convert all windows path separators to unix style
-		fileName = fileName.replace('\\', '/');
-
 		// check if it's currently processed (and the first element in the stack, thus not a dependency) and cancel if necessary
 		if (tasks.size > 0) {
 			AssetLoadingTask currentTask = tasks.first();

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/BuildScriptHelper.java
Patch:
@@ -78,6 +78,7 @@ public static void addAllProjects(BufferedWriter wr) throws IOException {
 		write(wr, DependencyBank.gradlePlugins);
 		write(wr, "maven { url \"" + DependencyBank.libGDXSnapshotsUrl + "\" }");
 		write(wr, "maven { url \"" + DependencyBank.libGDXReleaseUrl + "\" }");
+		write(wr, "maven { url \"" + DependencyBank.jitpackUrl + "\" }");
 		write(wr, "}");
 		write(wr, "}");
 	}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/ExternalExtension.java
Patch:
@@ -40,8 +40,10 @@ public void setDependencies (Map<String, List<ExternalExtensionDependency>> depe
 	}
 
 	public Dependency generateDependency () {
+		// TODO properly differentiate between lwjgl2 and 3 dependencies?
 		Dependency dep = new Dependency(name, gwtInherits, getPlatformDependencies("core"), getPlatformDependencies("desktop"),
-			getPlatformDependencies("android"), getPlatformDependencies("ios"), getPlatformDependencies("html"));
+			getPlatformDependencies("desktop"), getPlatformDependencies("android"), getPlatformDependencies("ios"),
+			getPlatformDependencies("html"));
 
 		return dep;
 	}

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/gen/ReflectionCacheGenerator.java
Patch:
@@ -120,6 +120,7 @@ private void out (String message, int nesting) {
 		String nestedMsg = "";
 		for (int i = 0; i < nesting; i++)
 			nestedMsg += "  ";
+		nestedMsg += message;
 		logger.log(Type.INFO, nestedMsg);
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontTest.java
Patch:
@@ -115,7 +115,7 @@ public void render () {
 			// text = "Another font wrap is-sue, this time with multiple whitespace characters.";
 			// text = "test with AGWlWi AGWlWi issue";
 			// text = "AA BB \nEE"; // When wrapping after BB, there should not be a blank line before EE.
-			text = "[BLUE]A[]A BB [#00f000]EE[] T [GREEN]e[]   \r\r[PINK]\n[]\nV[YELLOW]a bb[] ([CYAN]5[]FFFurz)\nV[PURPLE]a[]\nVa\n[PURPLE]V[]a";
+			text = "[BLUE]A[]A BB [#00f000]EE[] T [GREEN]e[]   \r\r[PINK]\n\nV[][YELLOW]a bb[] ([CYAN]5[]FFFurz)\nV[PURPLE]a[]\nVa\n[PURPLE]V[]a";
 			if (true) { // Test wrap.
 				layout.setText(font, text, 0, text.length(), font.getColor(), w, Align.center, true, null);
 			} else { // Test truncation.

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/Type.java
Patch:
@@ -56,6 +56,7 @@ public class Type {
 
 	Class componentType;
 	Object[] enumConstants;
+	IReflectionCache source;
 
 	private Field[] allFields;
 	private Method[] allMethods;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontTest.java
Patch:
@@ -104,18 +104,18 @@ public void render () {
 			font.getData().setScale(2f);
 			renderer.begin(ShapeRenderer.ShapeType.Line);
 			renderer.setColor(0, 1, 0, 1);
-			float w = Gdx.input.getX();
+			float w = Gdx.input.getX() - 10;
 			// w = 855;
 			renderer.rect(10, 10, w, 500);
 			renderer.end();
 
 			spriteBatch.begin();
 			String text = "your new";
 			// text = "How quickly da[RED]ft jumping zebras vex.";
-			// text = "Another font wrap is-sue,  this time with multiple whitespace characters.";
+			// text = "Another font wrap is-sue, this time with multiple whitespace characters.";
 			// text = "test with AGWlWi AGWlWi issue";
 			// text = "AA BB \nEE"; // When wrapping after BB, there should not be a blank line before EE.
-			text = "AA BB [RED]EE[] T [GREEN]e[] \n\nV[YELLOW]a bb[] ([CYAN]5[]FFF)";
+			text = "[BLUE]A[]A BB [#00f000]EE[] T [GREEN]e[]   \r\r[PINK]\n[]\nV[YELLOW]a bb[] ([CYAN]5[]FFFurz)\nV[PURPLE]a[]\nVa\n[PURPLE]V[]a";
 			if (true) { // Test wrap.
 				layout.setText(font, text, 0, text.length(), font.getColor(), w, Align.center, true, null);
 			} else { // Test truncation.

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -271,7 +271,6 @@ public void build (ProjectBuilder builder, String outputDir, String appName, Str
 		if (builder.modules.contains(ProjectType.ANDROID)) {
 			project.files.add(new ProjectFile("android/res/values/color.xml"));
 			project.files.add(new ProjectFile("android/res/values/strings.xml"));
-			project.files.add(new ProjectFile("android/res/values/styles.xml", false));
 			project.files.add(new ProjectFile("android/res/drawable-anydpi-v26/ic_launcher.xml", false));
 			project.files.add(new ProjectFile("android/res/drawable-anydpi-v26/ic_launcher_foreground.xml", false));
 			project.files.add(new ProjectFile("android/res/drawable-hdpi/ic_launcher.png", false));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontTest.java
Patch:
@@ -116,6 +116,7 @@ public void render () {
 			// text = "test with AGWlWi AGWlWi issue";
 			text = "AA BB \nEE"; // When wrapping after BB, there should not be a blank line before EE.
 			text = "AA BB [RED]EE[] T [GREEN]e[] V[YELLOW]a bb[] ([CYAN]5[]FFF)";
+			text = "AA BB [RED]EE[] T [GREEN]e[] \n\nV[YELLOW]a bb[] ([CYAN]5[]FFF)";
 			if (true) { // Test wrap.
 				layout.setText(font, text, 0, text.length(), font.getColor(), w, Align.center, true, null);
 			} else { // Test truncation.

File: gdx/src/com/badlogic/gdx/graphics/g2d/GlyphLayout.java
Patch:
@@ -186,8 +186,8 @@ else if (targetWidth <= fontData.spaceXadvance * 3) //
 					}
 
 					// Wrap or truncate.
-					x += xAdvances[0] + xAdvances[1]; // X offset relative to the drawing position + first xAdvance.
-					for (int i = 2; i < n; i++) {
+					x += xAdvances[0]; // X offset relative to the drawing position.
+					for (int i = 1; i < n; i++) {
 						Glyph glyph = run.glyphs.get(i - 1);
 						float glyphWidth = (glyph.width + glyph.xoffset) * fontData.scaleX - fontData.padRight;
 						if (x + glyphWidth - epsilon <= targetWidth) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontTest.java
Patch:
@@ -112,7 +112,7 @@ public void render () {
 			// text = "How quickly da[RED]ft jumping zebras vex.";
 			text = "Another font wrap is-sue,  this time with multiple whitespace characters.";
 			// text = "test with AGWlWi      AGWlWi issue";
-			text = "AAA BBB CCC DDD    [RED]EEE";
+			text = "AAA BBB    [RED]EEE[] or ([GREEN]5[] FFF)";
 			if (true) { // Test wrap.
 				layout.setText(font, text, 0, text.length(), font.getColor(), w, Align.center, true, null);
 			} else { // Test truncation.
@@ -125,6 +125,7 @@ public void render () {
 			renderer.begin(ShapeRenderer.ShapeType.Line);
 			renderer.setColor(0, 1, 0, 1);
 			for (int i = 0, n = layout.runs.size; i < n; i++) {
+				renderer.setColor(i % 2, (i + 1) % 2, i % 2, 1);
 				GlyphRun r = layout.runs.get(i);
 				renderer.rect(10 + r.x, 10 + meowy + r.y, r.width, -font.getLineHeight());
 			}

File: gdx/src/com/badlogic/gdx/graphics/g2d/GlyphLayout.java
Patch:
@@ -204,7 +204,7 @@ else if (targetWidth <= fontData.spaceXadvance * 3) //
 
 						// Wrap.
 						y += down;
-						lastGlyph = null;
+						if (newline) lastGlyph = null;
 						int wrapIndex = fontData.getWrapIndex(run.glyphs, i);
 						if ((wrapIndex == 0 && run.x == 0) // Require at least one glyph per line.
 							|| wrapIndex >= run.glyphs.size) { // Wrap at least the glyph that didn't fit.

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -169,6 +169,7 @@ public void clearItems () {
 		if (items.size == 0) return;
 		items.clear();
 		selection.clear();
+		selectBoxList.list.clearItems();
 		invalidateHierarchy();
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -49,6 +49,7 @@
 import com.badlogic.gdx.tests.extensions.FreeTypePackTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeTest;
 import com.badlogic.gdx.tests.extensions.InternationalFontsTest;
+import com.badlogic.gdx.tests.math.OctreeTest;
 import com.badlogic.gdx.tests.g3d.Animation3DTest;
 import com.badlogic.gdx.tests.g3d.AnisotropyTest;
 import com.badlogic.gdx.tests.g3d.Basic3DSceneTest;
@@ -195,6 +196,7 @@ public class GdxTests {
 		NinePatchTest.class,
 		NoncontinuousRenderingTest.class,
 		OnscreenKeyboardTest.class,
+		OctreeTest.class,
 		PathTest.class,
 		ParallaxTest.class,
 		ParticleControllerInfluencerSingleTest.class,

File: gdx/src/com/badlogic/gdx/AbstractGraphics.java
Patch:
@@ -9,7 +9,8 @@ public float getRawDeltaTime () {
 
 	@Override
 	public float getDensity () {
-		return getPpiX() / 160f;
+		float ppiX = getPpiX();
+		return (ppiX > 0 && ppiX <= Float.MAX_VALUE) ? ppiX / 160f : 1f;
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -216,6 +216,8 @@ public String toString () {
 	 * android.util.DisplayMetrics#density, where one DIP is one pixel on an approximately 160 dpi screen. Thus on a 160dpi screen
 	 * this density value will be 1; on a 120 dpi screen it would be .75; etc.
 	 *
+	 * If the density could not be determined, this returns a default value of 1.
+	 *
 	 * @return the Density Independent Pixel factor of the display. */
 	float getDensity ();
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/GlyphLayout.java
Patch:
@@ -277,7 +277,7 @@ else if (targetWidth <= fontData.spaceXadvance * 3) //
 		for (int i = 0; i < runsSize; i++) {
 			GlyphRun run = (GlyphRun)runsItems[i];
 			float[] xAdvances = run.xAdvances.items;
-			float runWidth = xAdvances[0], max = 0;
+			float runWidth = run.x + xAdvances[0], max = 0; // run.x is needed to ensure floats are rounded same as above.
 			Object[] glyphs = run.glyphs.items;
 			for (int ii = 0, nn = run.glyphs.size; ii < nn;) {
 				Glyph glyph = (Glyph)glyphs[ii];
@@ -286,7 +286,7 @@ else if (targetWidth <= fontData.spaceXadvance * 3) //
 				ii++;
 				runWidth += xAdvances[ii];
 			}
-			run.width = Math.max(runWidth, max);
+			run.width = Math.max(runWidth, max) - run.x;
 			width = Math.max(width, run.x + run.width);
 		}
 		this.width = width;

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/unicodefont/UnicodeFont.java
Patch:
@@ -637,6 +637,7 @@ public void setRenderType (RenderType renderType) {
 		} else {
 			String fontFile = getFontFile();
 			if (fontFile != null) {
+				if (generator != null) generator.dispose();
 				generator = new FreeTypeFontGenerator(Gdx.files.absolute(fontFile));
 				FreeTypeFontParameter param = new FreeTypeFontParameter();
 				param.size = font.getSize();

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALLwjgl3Audio.java
Patch:
@@ -57,6 +57,7 @@
 import com.badlogic.gdx.utils.ObjectMap;
 import org.lwjgl.openal.ALC;
 import org.lwjgl.openal.ALCCapabilities;
+import org.lwjgl.openal.SOFTDirectChannels;
 
 /** @author Nathan Sweet */
 public class OpenALLwjgl3Audio implements Lwjgl3Audio {
@@ -188,6 +189,7 @@ int obtainSource (boolean isMusic) {
 				AL10.alSourcef(sourceId, AL10.AL_GAIN, 1);
 				AL10.alSourcef(sourceId, AL10.AL_PITCH, 1);
 				AL10.alSource3f(sourceId, AL10.AL_POSITION, 0, 0, 1f);
+				AL10.alSourcei(sourceId, SOFTDirectChannels.AL_DIRECT_CHANNELS_SOFT, AL10.AL_TRUE);
 				return sourceId;
 			}
 		}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALMusic.java
Patch:
@@ -84,7 +84,6 @@ public void play () {
 					throw new GdxRuntimeException("Unable to allocate audio buffers. AL Error: " + errorCode);
 			}
 
-			alSourcei(sourceID, AL_DIRECT_CHANNELS_SOFT, AL_TRUE);
 			alSourcei(sourceID, AL_LOOPING, AL_FALSE);
 			setPan(pan, volume);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/net/NetAPITest.java
Patch:
@@ -113,7 +113,7 @@ else if (clickedButton == btnDownloadLarge)
 					else if (clickedButton == btnDownloadError)
 						url = "https://www.badlogicgames.com/doesnotexist";
 					else if (clickedButton == btnOpenUri) {
-						Gdx.net.openURI("https://libgdx.badlogicgames.com/");
+						Gdx.net.openURI("https://libgdx.com");
 						return;
 					}
 					else {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/net/OpenBrowserExample.java
Patch:
@@ -24,6 +24,6 @@
 public class OpenBrowserExample extends GdxTest {
 	@Override
 	public void create () {
-		Gdx.net.openURI("http://libgdx.badlogicgames.com");
+		Gdx.net.openURI("https://libgdx.com");
 	}
 }

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSUIViewController.java
Patch:
@@ -80,6 +80,7 @@ public void viewDidLayoutSubviews () {
 		if (graphics.created && (newBounds.width != oldBounds.width || newBounds.height != oldBounds.height)) {
 			graphics.makeCurrent();
 			graphics.updateSafeInsets();
+			graphics.gl20.glViewport(0, 0, newBounds.backBufferWidth, newBounds.backBufferHeight);
 			if (graphics.config.hdpiMode == HdpiMode.Pixels) {
 				app.listener.resize(newBounds.backBufferWidth, newBounds.backBufferHeight);
 			} else {

File: gdx/test/com/badlogic/gdx/utils/FlushablePoolTest.java
Patch:
@@ -104,15 +104,15 @@ public void freeAllTest () {
      */
     private class FlushablePoolClass extends FlushablePool<String> {
 
-        private FlushablePoolClass () {
+        FlushablePoolClass () {
             super();
         }
 
-        private FlushablePoolClass (int initialCapacity) {
+        FlushablePoolClass (int initialCapacity) {
             super(initialCapacity);
         }
 
-        private FlushablePoolClass (int initialCapacity, int max) {
+        FlushablePoolClass (int initialCapacity, int max) {
             super(initialCapacity, max);
         }
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MusicTest.java
Patch:
@@ -59,7 +59,7 @@ enum Song {
 		MP3, OGG, WAV, MP3_CLOCK
 	}
 
-	private float time;
+	float time;
 	
 	@Override
 	public void create () {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OpenALLwjglAudio.java
Patch:
@@ -141,12 +141,11 @@ int obtainSource (boolean isMusic) {
 			int sourceId = idleSources.get(i);
 			int state = alGetSourcei(sourceId, AL_SOURCE_STATE);
 			if (state != AL_PLAYING && state != AL_PAUSED) {
+				Long oldSoundId = sourceToSoundId.remove(sourceId);
+				if (oldSoundId != null) soundIdToSource.remove(oldSoundId);
 				if (isMusic) {
 					idleSources.removeIndex(i);
 				} else {
-					Long oldSoundId = sourceToSoundId.remove(sourceId);
-					if (oldSoundId != null) soundIdToSource.remove(oldSoundId);
-
 					long soundId = nextSoundId++;
 					sourceToSoundId.put(sourceId, soundId);
 					soundIdToSource.put(soundId, sourceId);

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALLwjgl3Audio.java
Patch:
@@ -174,12 +174,11 @@ int obtainSource (boolean isMusic) {
 			int sourceId = idleSources.get(i);
 			int state = alGetSourcei(sourceId, AL_SOURCE_STATE);
 			if (state != AL_PLAYING && state != AL_PAUSED) {
+				Long oldSoundId = sourceToSoundId.remove(sourceId);
+				if (oldSoundId != null) soundIdToSource.remove(oldSoundId);
 				if (isMusic) {
 					idleSources.removeIndex(i);
 				} else {
-					Long oldSoundId = sourceToSoundId.remove(sourceId);
-					if (oldSoundId != null) soundIdToSource.remove(oldSoundId);
-
 					long soundId = nextSoundId++;
 					sourceToSoundId.put(sourceId, soundId);
 					soundIdToSource.put(soundId, sourceId);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -38,6 +38,7 @@
 
 import com.badlogic.gdx.tests.*;
 import com.badlogic.gdx.tests.bench.TiledMapBench;
+import com.badlogic.gdx.tests.conformance.AudioSoundAndMusicIsolationTest;
 import com.badlogic.gdx.tests.conformance.DisplayModeTest;
 import com.badlogic.gdx.tests.examples.MoveSpriteExample;
 import com.badlogic.gdx.tests.extensions.FreeTypeAtlasTest;
@@ -103,6 +104,7 @@ public class GdxTests {
 		AtlasIssueTest.class,
 		AudioDeviceTest.class,
 		AudioRecorderTest.class,
+		AudioSoundAndMusicIsolationTest.class,
 		Basic3DSceneTest.class,
 		Basic3DTest.class,
 		Benchmark3DTest.class,

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OpenALAudioDevice.java
Patch:
@@ -89,6 +89,7 @@ public void writeSamples (byte[] data, int offset, int length) {
 			if (sourceID == -1) return;
 			if (buffers == null) {
 				buffers = BufferUtils.createIntBuffer(bufferCount);
+				alGetError();
 				alGenBuffers(buffers);
 				if (alGetError() != AL_NO_ERROR) throw new GdxRuntimeException("Unabe to allocate audio buffers.");
 			}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALAudioDevice.java
Patch:
@@ -89,6 +89,7 @@ public void writeSamples (byte[] data, int offset, int length) {
 			if (sourceID == -1) return;
 			if (buffers == null) {
 				buffers = BufferUtils.createIntBuffer(bufferCount);
+				alGetError();
 				alGenBuffers(buffers);
 				if (alGetError() != AL_NO_ERROR) throw new GdxRuntimeException("Unabe to allocate audio buffers.");
 			}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALLwjgl3Audio.java
Patch:
@@ -109,6 +109,7 @@ public OpenALLwjgl3Audio (int simultaneousSources, int deviceBufferCount, int de
 		}
 		AL.createCapabilities(deviceCapabilities);
 
+		alGetError();
 		allSources = new IntArray(false, simultaneousSources);
 		for (int i = 0; i < simultaneousSources; i++) {
 			int sourceID = alGenSources();

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3WindowConfiguration.java
Patch:
@@ -118,7 +118,7 @@ public void setMaximizedMonitor(Graphics.Monitor monitor) {
 	}
 
 	/**
-	 * @param autoIconify whether the window should automatically iconify and restore previous video mode on input focus loss. (default false)
+	 * @param autoIconify whether the window should automatically iconify and restore previous video mode on input focus loss. (default true)
 	 *                    Does nothing in windowed mode.
 	 */
 	public void setAutoIconify (boolean autoIconify) {

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
Patch:
@@ -725,6 +725,7 @@ public static String createPrefix (final Renderable renderable, final Config con
 
 	@Override
 	public boolean canRender (final Renderable renderable) {
+		if (renderable.bones != null && renderable.bones.length > config.numBones) return false;
 		final long renderableMask = combineAttributeMasks(renderable);
 		return (attributesMask == (renderableMask | optionalAttributes))
 			&& (vertexMask == renderable.meshPart.mesh.getVertexAttributes().getMaskWithSizePacked()) && (renderable.environment != null) == lighting;

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DepthShader.java
Patch:
@@ -123,6 +123,7 @@ public void end () {
 
 	@Override
 	public boolean canRender (Renderable renderable) {
+		if (renderable.bones != null && renderable.bones.length > numBones) return false;
 		final Attributes attributes = combineAttributes(renderable);
 		if (attributes.has(BlendingAttribute.Type)) {
 			if ((attributesMask & BlendingAttribute.Type) != BlendingAttribute.Type)

File: gdx/src/com/badlogic/gdx/utils/IntMap.java
Patch:
@@ -559,6 +559,7 @@ public void remove () {
 			int i = currentIndex;
 			if (i == INDEX_ZERO && map.hasZeroValue) {
 				map.hasZeroValue = false;
+				map.zeroValue = null;
 			} else if (i < 0) {
 				throw new IllegalStateException("next must be called before remove.");
 			} else {

File: gdx/src/com/badlogic/gdx/utils/LongMap.java
Patch:
@@ -558,6 +558,7 @@ public void remove () {
 			int i = currentIndex;
 			if (i == INDEX_ZERO && map.hasZeroValue) {
 				map.hasZeroValue = false;
+				map.zeroValue = null;
 			} else if (i < 0) {
 				throw new IllegalStateException("next must be called before remove.");
 			} else {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglTestStarter.java
Patch:
@@ -43,6 +43,7 @@
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.tests.utils.CommandLineOptions;
 import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.tests.utils.GdxTestWrapper;
 import com.badlogic.gdx.tests.utils.GdxTests;
 
 public class LwjglTestStarter extends JFrame {
@@ -84,7 +85,7 @@ public static boolean runTest (String testName) {
 			ShaderProgram.prependVertexCode = "";
 			ShaderProgram.prependFragmentCode = "";			
 		}
-		new LwjglApplication(test, config);
+		new LwjglApplication(new GdxTestWrapper(test, options.logGLErrors), config);
 		return true;
 	}
 

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl3/Lwjgl3TestStarter.java
Patch:
@@ -34,6 +34,7 @@
 import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
 import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
 import com.badlogic.gdx.tests.utils.CommandLineOptions;
+import com.badlogic.gdx.tests.utils.GdxTestWrapper;
 import com.badlogic.gdx.tests.utils.GdxTests;
 import com.badlogic.gdx.utils.ScreenUtils;
 import com.badlogic.gdx.utils.viewport.ScreenViewport;
@@ -107,7 +108,7 @@ public void changed (ChangeEvent event, Actor actor) {
 						winConfig.setWindowedMode(640, 480);
 						winConfig.setWindowPosition(((Lwjgl3Graphics)Gdx.graphics).getWindow().getPositionX() + 40,
 							((Lwjgl3Graphics)Gdx.graphics).getWindow().getPositionY() + 40);
-						((Lwjgl3Application)Gdx.app).newWindow(test, winConfig);
+						((Lwjgl3Application)Gdx.app).newWindow(new GdxTestWrapper(test, options.logGLErrors), winConfig);
 						System.out.println("Started test: " + testName);
 						prefs.putString("LastTest", testName);
 						prefs.flush();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/CommandLineOptions.java
Patch:
@@ -10,17 +10,20 @@
  * 
  * options:
  * --gl30 enable GLES 3.2 (default is GLES 2.0)
+ * --glErrors enable GLProfiler and log any GL errors. (default is disabled)
  */
 public class CommandLineOptions {
 	
 	public String startupTestName = null;
 	public boolean gl30 = false;
+	public boolean logGLErrors = false;
 	
 	public CommandLineOptions (String [] argv) {
 		Array<String> args = new Array<String>(argv);
 		for(String arg : args){
 			if(arg.startsWith("-")){
 				if(arg.equals("--gl30")) gl30 = true;
+				else if(arg.equals("--glErrors")) logGLErrors = true;
 				else System.err.println("skip unrecognized option " + arg);
 			}else{
 				startupTestName = arg;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -1190,8 +1190,9 @@ private void addDebugRects (float currentX, float currentY, float width, float h
 			spannedCellWidth -= c.computedPadLeft + c.computedPadRight;
 			currentX += c.computedPadLeft;
 			if (debug == Debug.cell || debug == Debug.all) {
-				addDebugRect(currentX, currentY + c.computedPadTop, spannedCellWidth,
-					rowHeight[c.row] - c.computedPadTop - c.computedPadBottom, debugCellColor);
+				float h = rowHeight[c.row] - c.computedPadTop - c.computedPadBottom;
+				float y = currentY + c.computedPadTop;
+				addDebugRect(currentX, getHeight() - y - h, spannedCellWidth, h, debugCellColor);
 			}
 
 			if (c.endRow) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FloatTextureTest.java
Patch:
@@ -29,7 +29,9 @@
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.tests.utils.GdxTestConfig;
 
+@GdxTestConfig(requireGL30=true)
 public class FloatTextureTest extends GdxTest {
 	FrameBuffer fb;
 	FloatFrameBuffer ffb;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureDownloadTest.java
Patch:
@@ -68,7 +68,7 @@ private int download (byte[] out, String url) {
 			@Override
 			public void run () {
 				byte[] bytes = new byte[200 * 1024]; // assuming the content is not bigger than 200kb.
-				int numBytes = download(bytes, "http://www.badlogicgames.com/wordpress/wp-content/uploads/2012/01/badlogic-new.png");
+				int numBytes = download(bytes, "https://www.badlogicgames.com/wordpress/wp-content/uploads/2012/01/badlogic-new.png");
 				if (numBytes != 0) {
 					// load the pixmap, make it a power of two if necessary (not needed for GL ES 2.0!)
 					Pixmap pixmap = new Pixmap(bytes, 0, numBytes);

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/BuildScriptHelper.java
Patch:
@@ -34,7 +34,7 @@ public static void addBuildScript(Language language, List<ProjectType> projects,
 		write(wr, "repositories {");
 		write(wr, DependencyBank.mavenLocal);
 		write(wr, DependencyBank.mavenCentral);
-		write(wr, "maven { url \"" + DependencyBank.gradlePlugins + "\" }");
+		write(wr, DependencyBank.gradlePlugins);
 		write(wr, "maven { url \"" + DependencyBank.libGDXSnapshotsUrl + "\" }");
 		write(wr, DependencyBank.google);
 		write(wr, "}");
@@ -75,6 +75,7 @@ public static void addAllProjects(BufferedWriter wr) throws IOException {
 		write(wr, DependencyBank.mavenLocal);
 		write(wr, DependencyBank.mavenCentral);
 		write(wr, DependencyBank.google);
+		write(wr, DependencyBank.gradlePlugins);
 		write(wr, "maven { url \"" + DependencyBank.libGDXSnapshotsUrl + "\" }");
 		write(wr, "maven { url \"" + DependencyBank.libGDXReleaseUrl + "\" }");
 		write(wr, "}");

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -35,7 +35,7 @@ public class DependencyBank {
 	static String mavenLocal = "mavenLocal()";
 	static String mavenCentral = "mavenCentral()";
 	static String google = "google()";
-	static String gradlePlugins = "https://plugins.gradle.org/m2/";
+	static String gradlePlugins = "gradlePluginPortal()";
 	static String libGDXSnapshotsUrl = "https://oss.sonatype.org/content/repositories/snapshots/";
 	static String libGDXReleaseUrl = "https://oss.sonatype.org/content/repositories/releases/";
 

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3WindowConfiguration.java
Patch:
@@ -34,7 +34,7 @@ public class Lwjgl3WindowConfiguration {
 	boolean windowDecorated = true;
 	boolean windowMaximized = false;
 	Lwjgl3Graphics.Lwjgl3Monitor maximizedMonitor;
-	boolean autoIconify = false;
+	boolean autoIconify = true;
 	FileType windowIconFileType;
 	String[] windowIconPaths;
 	Lwjgl3WindowListener windowListener;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -841,6 +841,8 @@ public void setDebugTableUnderMouse (boolean debugTableUnderMouse) {
 	public void dispose () {
 		clear();
 		if (ownsBatch) batch.dispose();
+		if (debugShapes != null)
+			debugShapes.dispose();
 	}
 
 	/** Check if screen coordinates are inside the viewport's screen area. */

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -455,9 +455,9 @@ public void getIndices (int srcOffset, int count, short[] indices, int destOffse
 		if ((indices.length - destOffset) < count)
 			throw new IllegalArgumentException("not enough room in indices array, has " + indices.length + " shorts, needs " + count);
 		int pos = getIndicesBuffer().position();
-		((Buffer) getVerticesBuffer()).position(srcOffset);
+		((Buffer) getIndicesBuffer()).position(srcOffset);
 		getIndicesBuffer().get(indices, destOffset, count);
-		((Buffer) getVerticesBuffer()).position(pos);
+		((Buffer) getIndicesBuffer()).position(pos);
 	}
 
 	/** @return the number of defined indices */

File: gdx/src/com/badlogic/gdx/graphics/glutils/FileTextureArrayData.java
Patch:
@@ -86,6 +86,9 @@ public void consumeTextureArrayData () {
 					disposePixmap = true;
 				}
 				Gdx.gl30.glTexSubImage3D(GL30.GL_TEXTURE_2D_ARRAY, 0, 0, 0, i, pixmap.getWidth(), pixmap.getHeight(), 1, pixmap.getGLInternalFormat(), pixmap.getGLType(), pixmap.getPixels());
+				if (useMipMaps) {
+					Gdx.gl20.glGenerateMipmap(GL30.GL_TEXTURE_2D_ARRAY);
+				}
 				if (disposePixmap) pixmap.dispose();
 			}
 		}

File: gdx/src/com/badlogic/gdx/graphics/glutils/FileTextureArrayData.java
Patch:
@@ -86,6 +86,9 @@ public void consumeTextureArrayData () {
 					disposePixmap = true;
 				}
 				Gdx.gl30.glTexSubImage3D(GL30.GL_TEXTURE_2D_ARRAY, 0, 0, 0, i, pixmap.getWidth(), pixmap.getHeight(), 1, pixmap.getGLInternalFormat(), pixmap.getGLType(), pixmap.getPixels());
+				if (useMipMaps) {
+					Gdx.gl20.glGenerateMipmap(GL30.GL_TEXTURE_2D_ARRAY);
+				}
 				if (disposePixmap) pixmap.dispose();
 			}
 		}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFiles.java
Patch:
@@ -26,7 +26,7 @@ public class GwtFiles implements Files {
 	
 	public static final Storage LocalStorage = Storage.getLocalStorageIfSupported(); // Can be null if cookies are disabled or blocked by the browser with "block third-party cookies"
 	
-	final Preloader preloader;
+	protected final Preloader preloader;
 	
 	public GwtFiles (Preloader preloader) {
 		this.preloader = preloader;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -1209,10 +1209,9 @@ private void clearDebugRects () {
 	}
 
 	private void addDebugRect (float x, float y, float w, float h, Color color) {
-
 		DebugRect rect = DebugRect.pool.obtain();
 		rect.color = color;
-		rect.set(x, getHeight() - y - h, w, h);
+		rect.set(x, y, w, h);
 		debugRects.add(rect);
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -76,7 +76,7 @@ public void create () {
 		stage = new Stage(new ScreenViewport());
 		Gdx.input.setInputProcessor(stage);
 
-		// Group.debug = true;
+		// stage.setDebugAll(true);
 
 		ImageButtonStyle style = new ImageButtonStyle(skin.get(ButtonStyle.class));
 		style.imageUp = new TextureRegionDrawable(image);

File: gdx/src/com/badlogic/gdx/utils/ArrayMap.java
Patch:
@@ -36,9 +36,9 @@ public class ArrayMap<K, V> implements Iterable<ObjectMap.Entry<K, V>> {
 	public int size;
 	public boolean ordered;
 
-	private Entries entries1, entries2;
-	private Values values1, values2;
-	private Keys keys1, keys2;
+	private transient Entries entries1, entries2;
+	private transient Values values1, values2;
+	private transient Keys keys1, keys2;
 
 	/** Creates an ordered map with a capacity of 16. */
 	public ArrayMap () {

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -65,9 +65,9 @@ public class IntFloatMap implements Iterable<IntFloatMap.Entry> {
 	 * hash. */
 	protected int mask;
 
-	private Entries entries1, entries2;
-	private Values values1, values2;
-	private Keys keys1, keys2;
+	private transient Entries entries1, entries2;
+	private transient Values values1, values2;
+	private transient Keys keys1, keys2;
 
 	/** Creates a new map with an initial capacity of 51 and a load factor of 0.8. */
 	public IntFloatMap () {

File: gdx/src/com/badlogic/gdx/utils/IntIntMap.java
Patch:
@@ -64,9 +64,9 @@ public class IntIntMap implements Iterable<IntIntMap.Entry> {
 	 * hash. */
 	protected int mask;
 
-	private Entries entries1, entries2;
-	private Values values1, values2;
-	private Keys keys1, keys2;
+	private transient Entries entries1, entries2;
+	private transient Values values1, values2;
+	private transient Keys keys1, keys2;
 
 	/** Creates a new map with an initial capacity of 51 and a load factor of 0.8. */
 	public IntIntMap () {

File: gdx/src/com/badlogic/gdx/utils/IntMap.java
Patch:
@@ -65,9 +65,9 @@ public class IntMap<V> implements Iterable<IntMap.Entry<V>> {
 	 * hash. */
 	protected int mask;
 
-	private Entries entries1, entries2;
-	private Values values1, values2;
-	private Keys keys1, keys2;
+	private transient Entries entries1, entries2;
+	private transient Values values1, values2;
+	private transient Keys keys1, keys2;
 
 	/** Creates a new map with an initial capacity of 51 and a load factor of 0.8. */
 	public IntMap () {

File: gdx/src/com/badlogic/gdx/utils/IntSet.java
Patch:
@@ -60,7 +60,7 @@ public class IntSet {
 	 * hash. */
 	protected int mask;
 
-	private IntSetIterator iterator1, iterator2;
+	private transient IntSetIterator iterator1, iterator2;
 
 	/** Creates a new set with an initial capacity of 51 and a load factor of 0.8. */
 	public IntSet () {

File: gdx/src/com/badlogic/gdx/utils/LongMap.java
Patch:
@@ -65,9 +65,9 @@ public class LongMap<V> implements Iterable<LongMap.Entry<V>> {
 	 * hash. */
 	protected int mask;
 
-	private Entries entries1, entries2;
-	private Values values1, values2;
-	private Keys keys1, keys2;
+	private transient Entries entries1, entries2;
+	private transient Values values1, values2;
+	private transient Keys keys1, keys2;
 
 	/** Creates a new map with an initial capacity of 51 and a load factor of 0.8. */
 	public LongMap () {

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -62,9 +62,9 @@ public class ObjectFloatMap<K> implements Iterable<ObjectFloatMap.Entry<K>> {
 	 * hash. */
 	protected int mask;
 
-	Entries entries1, entries2;
-	Values values1, values2;
-	Keys keys1, keys2;
+	transient Entries entries1, entries2;
+	transient Values values1, values2;
+	transient Keys keys1, keys2;
 
 	/** Creates a new map with an initial capacity of 51 and a load factor of 0.8. */
 	public ObjectFloatMap () {

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -62,9 +62,9 @@ public class ObjectIntMap<K> implements Iterable<ObjectIntMap.Entry<K>> {
 	 * hash. */
 	protected int mask;
 
-	Entries entries1, entries2;
-	Values values1, values2;
-	Keys keys1, keys2;
+	transient Entries entries1, entries2;
+	transient Values values1, values2;
+	transient Keys keys1, keys2;
 
 	/** Creates a new map with an initial capacity of 51 and a load factor of 0.8. */
 	public ObjectIntMap () {

File: gdx/src/com/badlogic/gdx/utils/ObjectLongMap.java
Patch:
@@ -62,9 +62,9 @@ public class ObjectLongMap<K> implements Iterable<ObjectLongMap.Entry<K>> {
 	 * hash. */
 	protected int mask;
 
-	Entries entries1, entries2;
-	Values values1, values2;
-	Keys keys1, keys2;
+	transient Entries entries1, entries2;
+	transient Values values1, values2;
+	transient Keys keys1, keys2;
 
 	/** Creates a new map with an initial capacity of 51 and a load factor of 0.8. */
 	public ObjectLongMap () {

File: gdx/src/com/badlogic/gdx/utils/ObjectMap.java
Patch:
@@ -64,9 +64,9 @@ public class ObjectMap<K, V> implements Iterable<ObjectMap.Entry<K, V>> {
 	 * hash. */
 	protected int mask;
 
-	Entries entries1, entries2;
-	Values values1, values2;
-	Keys keys1, keys2;
+	transient Entries entries1, entries2;
+	transient Values values1, values2;
+	transient Keys keys1, keys2;
 
 	/** Creates a new map with an initial capacity of 51 and a load factor of 0.8. */
 	public ObjectMap () {

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -61,7 +61,7 @@ public class ObjectSet<T> implements Iterable<T> {
 	 * hash. */
 	protected int mask;
 
-	private ObjectSetIterator iterator1, iterator2;
+	private transient ObjectSetIterator iterator1, iterator2;
 
 	/** Creates a new set with an initial capacity of 51 and a load factor of 0.8. */
 	public ObjectSet () {

File: gdx/src/com/badlogic/gdx/utils/OrderedSet.java
Patch:
@@ -42,7 +42,7 @@
  * @author Tommy Ettinger */
 public class OrderedSet<T> extends ObjectSet<T> {
 	final Array<T> items;
-	OrderedSetIterator iterator1, iterator2;
+	transient OrderedSetIterator iterator1, iterator2;
 
 	public OrderedSet () {
 		items = new Array();

File: gdx/src/com/badlogic/gdx/utils/Queue.java
Patch:
@@ -38,7 +38,7 @@ public class Queue<T> implements Iterable<T> {
 	/** Number of elements in the queue. */
 	public int size = 0;
 
-	private QueueIterable iterable;
+	private transient QueueIterable iterable;
 
 	/** Creates a new Queue which can hold 16 values without needing to resize backing array. */
 	public Queue () {

File: gdx/src/com/badlogic/gdx/utils/SortedIntList.java
Patch:
@@ -21,7 +21,7 @@
  * @param <E> */
 public class SortedIntList<E> implements Iterable<SortedIntList.Node<E>> {
 	private NodePool<E> nodePool = new NodePool<E>(); // avoid allocating nodes
-	private Iterator iterator;
+	private transient Iterator iterator;
 	int size = 0;
 
 	Node<E> first;

File: gdx/src/com/badlogic/gdx/AbstractInput.java
Patch:
@@ -3,12 +3,11 @@
 import com.badlogic.gdx.utils.IntSet;
 
 public abstract class AbstractInput implements Input {
-
     protected final boolean[] pressedKeys;
     protected final boolean[] justPressedKeys;
     private final IntSet keysToCatch = new IntSet();
-    protected int pressedKeyCount = 0;
-    protected boolean keyJustPressed = false;
+    protected int pressedKeyCount;
+    protected boolean keyJustPressed;
 
     public AbstractInput() {
         pressedKeys = new boolean[Keys.MAX_KEYCODE + 1];

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/HorizontalGroup.java
Patch:
@@ -256,6 +256,7 @@ else if ((align & Align.left) == 0) // center
 			}
 
 			if (x + width > groupWidth || r == 0) {
+				r = Math.min(r, rowSizes.size - 2); // In case an actor changed size without invalidating this layout.
 				x = xStart;
 				if ((align & Align.right) != 0)
 					x += maxWidth - rowSizes.get(r);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/VerticalGroup.java
Patch:
@@ -253,6 +253,7 @@ else if ((align & Align.bottom) == 0) // center
 			}
 
 			if (y - height - space < padBottom || r == 0) {
+				r = Math.min(r, columnSizes.size - 2); // In case an actor changed size without invalidating this layout.
 				y = yStart;
 				if ((align & Align.bottom) != 0)
 					y -= maxHeight - columnSizes.get(r);

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/DefaultIOSInput.java
Patch:
@@ -1132,7 +1132,7 @@ protected int getGdxKeyCode(UIKey key) {
 			case KeyboardPageUp:
 				return Keys.PAGE_UP;
 			case KeyboardDeleteForward:
-				return Keys.DEL;
+				return Keys.FORWARD_DEL;
 			case KeyboardEnd:
 				return Keys.END;
 			case KeyboardPageDown:

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/DefaultGwtInput.java
Patch:
@@ -916,7 +916,7 @@ protected int keyForCode (int keyCode, int location) {
 		case KeyCodes.KEY_CTRL:
 			return location == LOCATION_RIGHT ? Keys.CONTROL_RIGHT : Keys.CONTROL_LEFT;
 		case KeyCodes.KEY_DELETE:
-			return Keys.DEL;
+			return Keys.FORWARD_DEL;
 		case KeyCodes.KEY_DOWN:
 			return Keys.DOWN;
 		case KeyCodes.KEY_END:

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -642,7 +642,7 @@ public boolean hasNext () {
 		public float next () {
 			if (!hasNext) throw new NoSuchElementException();
 			if (!valid) throw new GdxRuntimeException("#iterator() cannot be used nested.");
-			float value = map.valueTable[nextIndex];
+			float value = nextIndex == INDEX_ZERO ? map.zeroValue : map.valueTable[nextIndex];
 			currentIndex = nextIndex;
 			findNextIndex();
 			return value;

File: gdx/src/com/badlogic/gdx/utils/IntIntMap.java
Patch:
@@ -612,7 +612,7 @@ public boolean hasNext () {
 		public int next () {
 			if (!hasNext) throw new NoSuchElementException();
 			if (!valid) throw new GdxRuntimeException("#iterator() cannot be used nested.");
-			int value = map.valueTable[nextIndex];
+			int value = nextIndex == INDEX_ZERO ? map.zeroValue : map.valueTable[nextIndex];
 			currentIndex = nextIndex;
 			findNextIndex();
 			return value;

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java
Patch:
@@ -365,8 +365,8 @@ public synchronized void updateTextureAtlas (TextureAtlas atlas, TextureFilter m
 					TextureAtlas.AtlasRegion region = new TextureAtlas.AtlasRegion(page.texture, (int)rect.x, (int)rect.y, (int)rect.width, (int)rect.height);
 
 					if (rect.splits != null) {
-						region.splits = rect.splits;
-						region.pads = rect.pads;
+						region.names = new String[] {"split", "pad"};
+						region.values = new int[][] {rect.splits, rect.pads};
 					}
 
 					int imageIndex = -1;

File: gdx/src/com/badlogic/gdx/graphics/glutils/ImmediateModeRenderer20.java
Patch:
@@ -22,6 +22,7 @@
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /** Immediate mode rendering class for GLES 2.0. The renderer will allow you to specify vertices on the fly and provides a default
  * shader for (unlit) rendering.
@@ -238,6 +239,7 @@ static public ShaderProgram createDefaultShader (boolean hasNormals, boolean has
 		String vertexShader = createVertexShader(hasNormals, hasColors, numTexCoords);
 		String fragmentShader = createFragmentShader(hasNormals, hasColors, numTexCoords);
 		ShaderProgram program = new ShaderProgram(vertexShader, fragmentShader);
+		if (!program.isCompiled()) throw new GdxRuntimeException("Error compiling shader: " + program.getLog());
 		return program;
 	}
 }

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL20.java
Patch:
@@ -61,7 +61,7 @@ private FloatBuffer toFloatBuffer (float v[], int offset, int count) {
 	private IntBuffer toIntBuffer (int v[], int offset, int count) {
 		ensureBufferCapacity(count << 2);
 		intBuffer.clear();
-		com.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);
+		com.badlogic.gdx.utils.BufferUtils.copy(v, offset, count, intBuffer);
 		return intBuffer;
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL20.java
Patch:
@@ -595,7 +595,7 @@ public void glStencilOpSeparate (int face, int fail, int zfail, int zpass) {
 	public void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type,
 		Buffer pixels) {
 		if (pixels == null)
-			GL11.glTexImage2D(target, level, internalformat, width, height, border, format, type, (ByteBuffer)null);
+			GL11.glTexImage2D(target, level, internalformat, width, height, border, format, type, 0L);
 		else if (pixels instanceof ByteBuffer)
 			GL11.glTexImage2D(target, level, internalformat, width, height, border, format, type, (ByteBuffer)pixels);
 		else if (pixels instanceof ShortBuffer)

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/MultipleRenderTargetTest.java
Patch:
@@ -384,7 +384,6 @@ static class MRTShader implements Shader {
 		RenderContext context;
 
 		Matrix3 matrix3 = new Matrix3();
-		static Attributes tmpAttributes = new Attributes();
 
 		public MRTShader (Renderable renderable) {
 			String prefix = "";
@@ -398,8 +397,7 @@ public MRTShader (Renderable renderable) {
 			if (!shaderProgram.isCompiled()) {
 				throw new GdxRuntimeException(shaderProgram.getLog());
 			}
-			renderable.material.set(tmpAttributes);
-			attributes = tmpAttributes.getMask();
+			attributes = renderable.material.getMask();
 		}
 
 		@Override

File: gdx/src/com/badlogic/gdx/math/collision/Segment.java
Patch:
@@ -21,7 +21,7 @@
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.utils.NumberUtils;
 
-/** A Segment is a line in 3-space having a staring and an ending position.
+/** A Segment is a line in 3-space having a starting and an ending position.
  * 
  * @author mzechner */
 public class Segment implements Serializable {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplicationConfiguration.java
Patch:
@@ -29,7 +29,7 @@
  * @author mzechner */
 public class AndroidApplicationConfiguration {
 	/** number of bits per color channel **/
-	public int r = 5, g = 6, b = 5, a = 0;
+	public int r = 8, g = 8, b = 8, a = 0;
 
 	/** number of bits for depth and stencil buffer **/
 	public int depth = 16, stencil = 0;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -90,7 +90,7 @@ public class AndroidGraphics implements Graphics, Renderer {
 	private float density = 1;
 
 	protected final AndroidApplicationConfiguration config;
-	private BufferFormat bufferFormat = new BufferFormat(5, 6, 5, 0, 16, 0, 0, false);
+	private BufferFormat bufferFormat = new BufferFormat(8, 8, 8, 0, 16, 0, 0, false);
 	private boolean isContinuous = true;
 
 	public AndroidGraphics (AndroidApplicationBase application, AndroidApplicationConfiguration config,

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLSurfaceView20.java
Patch:
@@ -120,7 +120,7 @@ public void onDetachedFromWindow() {
 	private void init (boolean translucent, int depth, int stencil) {
 
 		/*
-		 * By default, GLSurfaceView() creates a RGB_565 opaque surface. If we want a translucent one, we should change the
+		 * By default, GLSurfaceView() creates a RGB_888 opaque surface. If we want a translucent one, we should change the
 		 * surface's format here, using PixelFormat.TRANSLUCENT for GL Surfaces is interpreted as any 32-bit surface with alpha by
 		 * SurfaceFlinger.
 		 */
@@ -137,7 +137,7 @@ private void init (boolean translucent, int depth, int stencil) {
 		 * We need to choose an EGLConfig that matches the format of our surface exactly. This is going to be done in our custom
 		 * config chooser. See ConfigChooser class definition below.
 		 */
-		setEGLConfigChooser(translucent ? new ConfigChooser(8, 8, 8, 8, depth, stencil) : new ConfigChooser(5, 6, 5, 0, depth,
+		setEGLConfigChooser(translucent ? new ConfigChooser(8, 8, 8, 8, depth, stencil) : new ConfigChooser(8, 8, 8, 0, depth,
 			stencil));
 
 		/* Set the renderer responsible for frame rendering */

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplicationConfiguration.java
Patch:
@@ -32,8 +32,8 @@ public class IOSApplicationConfiguration {
 	/** whether or not landscape orientation is supported. */
 	public boolean orientationLandscape = true;
 
-	/** the color format, RGB565 is the default **/
-	public GLKViewDrawableColorFormat colorFormat = GLKViewDrawableColorFormat.RGB565;
+	/** the color format, RGBA8888 is the default **/
+	public GLKViewDrawableColorFormat colorFormat = GLKViewDrawableColorFormat.RGBA8888;
 
 	/** the depth buffer format, Format16 is default **/
 	public GLKViewDrawableDepthFormat depthFormat = GLKViewDrawableDepthFormat._16;

File: gdx/src/com/badlogic/gdx/graphics/g2d/GlyphLayout.java
Patch:
@@ -46,6 +46,7 @@ public class GlyphLayout implements Poolable {
 	static private final Pool<GlyphRun> glyphRunPool = Pools.get(GlyphRun.class);
 	static private final Pool<Color> colorPool = Pools.get(Color.class);
 	static private final Array<Color> colorStack = new Array(4);
+	static private final float epsilon = 0.0001f;
 
 	public final Array<GlyphRun> runs = new Array(1);
 	public float width, height;
@@ -189,7 +190,7 @@ else if (targetWidth <= fontData.spaceXadvance * 3) //
 					for (int i = 2; i < n; i++) {
 						Glyph glyph = run.glyphs.get(i - 1);
 						float glyphWidth = (glyph.width + glyph.xoffset) * fontData.scaleX - fontData.padRight;
-						if (x + glyphWidth <= targetWidth) {
+						if (x + glyphWidth - epsilon <= targetWidth) {
 							// Glyph fits.
 							x += xAdvances[i];
 							continue;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -454,6 +454,7 @@ public boolean touchDown (InputEvent event, float x, float y, int pointer, int b
 
 				public boolean keyDown (InputEvent event, int keycode) {
 					switch (keycode) {
+					case Keys.NUMPAD_ENTER:
 					case Keys.ENTER:
 						selectBox.selection.choose(list.getSelected());
 						// Fall thru.

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/flame/ColorInfluencerPanel.java
Patch:
@@ -18,7 +18,7 @@ public ColorInfluencerPanel (FlameMain particleEditor3D, ColorInfluencer.Single
 	private void initializeComponents(ColorInfluencer.Single emitter){
 		int i=0;
 		addContent(i++, 0, tintPanel = new GradientPanel(editor, emitter.colorValue, "Tint", "", false));
-		addContent(i++, 0, alphaPanel = new PercentagePanel(editor, emitter.alphaValue, "Life", "Transparency", ""));
+		addContent(i++, 0, alphaPanel = new PercentagePanel(editor, emitter.alphaValue, "Life", "Alpha", ""));
 		tintPanel.showContent(true);
 		alphaPanel.showContent(true);
 	}

File: gdx/src/com/badlogic/gdx/utils/IntMap.java
Patch:
@@ -222,6 +222,7 @@ public V get (int key, @Null V defaultValue) {
 			next = next + 1 & mask;
 		}
 		keyTable[i] = 0;
+		valueTable[i] = null;
 		size--;
 		return oldValue;
 	}
@@ -574,6 +575,7 @@ public void remove () {
 					next = next + 1 & mask;
 				}
 				keyTable[i] = 0;
+				valueTable[i] = null;
 				if (i != currentIndex) --nextIndex;
 			}
 			currentIndex = INDEX_ILLEGAL;

File: gdx/src/com/badlogic/gdx/utils/LongMap.java
Patch:
@@ -221,6 +221,7 @@ public V get (long key, @Null V defaultValue) {
 			next = next + 1 & mask;
 		}
 		keyTable[i] = 0;
+		valueTable[i] = null;
 		size--;
 		return oldValue;
 	}
@@ -574,6 +575,7 @@ public void remove () {
 					next = next + 1 & mask;
 				}
 				keyTable[i] = 0;
+				valueTable[i] = null;
 				if (i != currentIndex) --nextIndex;
 			}
 			currentIndex = INDEX_ILLEGAL;

File: backends/gdx-backend-headless/src/com/badlogic/gdx/backends/headless/HeadlessApplication.java
Patch:
@@ -118,9 +118,10 @@ protected void mainLoop () {
 				final long n = TimeUtils.nanoTime();
 				if (t > n) {
 					try {
-						Thread.sleep((t - n) / 1000000);
+						long sleep = t - n;
+						Thread.sleep(sleep / 1000000, (int) (sleep % 1000000));
 					} catch (InterruptedException e) {}
-					t = TimeUtils.nanoTime() + renderInterval;
+					t = t + renderInterval;
 				} else
 					t = n + renderInterval;
 				

File: backends/gdx-backend-headless/src/com/badlogic/gdx/backends/headless/mock/graphics/MockGraphics.java
Patch:
@@ -93,7 +93,7 @@ public float getDeltaTime() {
 
 	@Override
 	public float getRawDeltaTime() {
-		return 0;
+		return deltaTime;
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/TiledDrawable.java
Patch:
@@ -41,7 +41,7 @@ public TiledDrawable (TextureRegionDrawable drawable) {
 
 	public void draw (Batch batch, float x, float y, float width, float height) {
 		float oldColor = batch.getPackedColor();
-		batch.getColor().mul(color);
+		batch.setColor(batch.getColor().mul(color));
 
 		TextureRegion region = getRegion();
 		float regionWidth = region.getRegionWidth() * scale, regionHeight = region.getRegionHeight() * scale;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
Patch:
@@ -283,9 +283,9 @@ public void draw (CGRect rect) {
 
 		String machineString = HWMachine.getMachineString();
 		IOSDevice device = config.knownDevices.get(machineString);
-		density = app.pixelsPerPoint;
 		if (device == null) app.error(tag, "Machine ID: " + machineString + " not found, please report to LibGDX");
 		int ppi = device != null ? device.ppi : app.guessUnknownPpi();
+		density = ppi / 160f;
 		ppiX = ppi;
 		ppiY = ppi;
 		ppcX = ppiX / 2.54f;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextInputDialogTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Input;
 import com.badlogic.gdx.Input.TextInputListener;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
@@ -43,7 +44,7 @@ public void input (String text) {
 			public void canceled () {
 				message = "cancled by user";
 			}
-		}, "enter something funny", "funny", "something funny");
+		}, "enter something funny", "funny", "something funny", Input.OnscreenKeyboardType.Default);
 	}
 
 	public void render () {

File: gdx/src/com/badlogic/gdx/graphics/glutils/GLFrameBuffer.java
Patch:
@@ -439,7 +439,7 @@ public FrameBufferRenderBufferAttachmentSpec (int internalFormat) {
 		}
 	}
 
-	protected static abstract class GLFrameBufferBuilder<U extends GLFrameBuffer<? extends GLTexture>> {
+	public static abstract class GLFrameBufferBuilder<U extends GLFrameBuffer<? extends GLTexture>> {
 		protected int width, height;
 
 		protected Array<FrameBufferTextureAttachmentSpec> textureAttachmentSpecs = new Array<FrameBufferTextureAttachmentSpec>();

File: gdx/src/com/badlogic/gdx/graphics/glutils/GLFrameBuffer.java
Patch:
@@ -439,7 +439,7 @@ public FrameBufferRenderBufferAttachmentSpec (int internalFormat) {
 		}
 	}
 
-	protected static abstract class GLFrameBufferBuilder<U extends GLFrameBuffer<? extends GLTexture>> {
+	public static abstract class GLFrameBufferBuilder<U extends GLFrameBuffer<? extends GLTexture>> {
 		protected int width, height;
 
 		protected Array<FrameBufferTextureAttachmentSpec> textureAttachmentSpecs = new Array<FrameBufferTextureAttachmentSpec>();

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -92,8 +92,8 @@ public static boolean intersectSegmentPlane (Vector3 start, Vector3 end, Plane p
 		return true;
 	}
 
-	/** Determines on which side of the given line the point is. Returns -1 if the point is on the left side of the line, 0 if the
-	 * point is on the line and 1 if the point is on the right side of the line. Left and right are relative to the lines direction
+	/** Determines on which side of the given line the point is. Returns 1 if the point is on the left side of the line, 0 if the
+	 * point is on the line and -1 if the point is on the right side of the line. Left and right are relative to the lines direction
 	 * which is linePoint1 to linePoint2. */
 	public static int pointLineSide (Vector2 linePoint1, Vector2 linePoint2, Vector2 point) {
 		return (int)Math.signum(

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/BaseShaderProvider.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.graphics.g3d.Renderable;
 import com.badlogic.gdx.graphics.g3d.Shader;
 import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.GdxRuntimeException;
 
 public abstract class BaseShaderProvider implements ShaderProvider {
 	protected Array<Shader> shaders = new Array<Shader>();
@@ -32,6 +33,7 @@ public Shader getShader (Renderable renderable) {
 			if (shader.canRender(renderable)) return shader;
 		}
 		final Shader shader = createShader(renderable);
+		if (!shader.canRender(renderable)) throw new GdxRuntimeException("unable to provide a shader for this renderable");
 		shader.init();
 		shaders.add(shader);
 		return shader;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/DefaultAndroidInput.java
Patch:
@@ -77,7 +77,8 @@ static class TouchEvent {
 		int type;
 		int x;
 		int y;
-		int scrollAmount;
+		int scrollAmountX;
+		int scrollAmountY;
 		int button;
 		int pointer;
 	}
@@ -419,7 +420,7 @@ public void processEvents () {
 						processor.mouseMoved(e.x, e.y);
 						break;
 					case TouchEvent.TOUCH_SCROLLED:
-						processor.scrolled(e.scrollAmount);
+						processor.scrolled(e.scrollAmountX, e.scrollAmountY);
 					}
 					usedTouchEvents.free(e);
 				}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/DefaultLwjglInput.java
Patch:
@@ -367,7 +367,7 @@ public void processEvents () {
 						processor.mouseMoved(e.x, e.y);
 						break;
 					case TouchEvent.TOUCH_SCROLLED:
-						processor.scrolled(e.scrollAmount);
+						processor.scrolled(0, e.scrollAmount);
 					}
 					usedTouchEvents.free(e);
 				}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTInput.java
Patch:
@@ -383,7 +383,7 @@ void processEvents () {
 						processor.mouseMoved(e.x, e.y);
 						break;
 					case TouchEvent.TOUCH_SCROLLED:
-						processor.scrolled(e.scrollAmount);
+						processor.scrolled(0, e.scrollAmount);
 						break;
 					}
 					usedTouchEvents.free(e);

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/DefaultGwtInput.java
Patch:
@@ -715,7 +715,7 @@ private void handleEvent (NativeEvent e) {
 		}
 		if (e.getType().equals(getMouseWheelEvent())) {
 			if (processor != null) {
-				processor.scrolled((int)getMouseWheelVelocity(e));
+				processor.scrolled(0, (int)getMouseWheelVelocity(e));
 			}
 			this.currentEventTimeStamp = TimeUtils.nanoTime();
 			e.preventDefault();

File: gdx/src/com/badlogic/gdx/InputAdapter.java
Patch:
@@ -50,7 +50,7 @@ public boolean mouseMoved (int screenX, int screenY) {
 	}
 
 	@Override
-	public boolean scrolled (int amount) {
+	public boolean scrolled (float amountX, float amountY) {
 		return false;
 	}
 }

File: gdx/src/com/badlogic/gdx/InputMultiplexer.java
Patch:
@@ -150,11 +150,11 @@ public boolean mouseMoved (int screenX, int screenY) {
 		return false;
 	}
 
-	public boolean scrolled (int amount) {
+	public boolean scrolled (float amountX, float amountY) {
 		Object[] items = processors.begin();
 		try {
 			for (int i = 0, n = processors.size; i < n; i++)
-				if (((InputProcessor)items[i]).scrolled(amount)) return true;
+				if (((InputProcessor)items[i]).scrolled(amountX, amountY)) return true;
 		} finally {
 			processors.end();
 		}

File: gdx/src/com/badlogic/gdx/InputProcessor.java
Patch:
@@ -67,7 +67,8 @@ public interface InputProcessor {
 	public boolean mouseMoved (int screenX, int screenY);
 
 	/** Called when the mouse wheel was scrolled. Will not be called on iOS.
-	 * @param amount the scroll amount, -1 or 1 depending on the direction the wheel was scrolled.
+	 * @param amountX the horizontal scroll amount, negative or positive depending on the direction the wheel was scrolled.
+	 * @param amountY the vertical scroll amount, negative or positive depending on the direction the wheel was scrolled.
 	 * @return whether the input was processed. */
-	public boolean scrolled (int amount);
+	public boolean scrolled (float amountX, float amountY);
 }

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/CameraInputController.java
Patch:
@@ -203,8 +203,8 @@ public boolean touchDragged (int screenX, int screenY, int pointer) {
 	}
 
 	@Override
-	public boolean scrolled (int amount) {
-		return zoom(amount * scrollFactor * translateUnits);
+	public boolean scrolled (float amountX, float amountY) {
+		return zoom(amountY * scrollFactor * translateUnits);
 	}
 
 	public boolean zoom (float amount) {

File: gdx/src/com/badlogic/gdx/input/RemoteSender.java
Patch:
@@ -198,7 +198,7 @@ public boolean mouseMoved (int x, int y) {
 	}
 
 	@Override
-	public boolean scrolled (int amount) {
+	public boolean scrolled (float amountX, float amountY) {
 		return false;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/InputListener.java
Patch:
@@ -76,7 +76,7 @@ public boolean handle (Event e) {
 		case mouseMoved:
 			return mouseMoved(event, tmpCoords.x, tmpCoords.y);
 		case scrolled:
-			return scrolled(event, tmpCoords.x, tmpCoords.y, event.getScrollAmount());
+			return scrolled(event, tmpCoords.x, tmpCoords.y, event.getScrollAmountX(), event.getScrollAmountY());
 		case enter:
 			enter(event, tmpCoords.x, tmpCoords.y, event.getPointer(), event.getRelatedActor());
 			return false;
@@ -130,7 +130,7 @@ public void exit (InputEvent event, float x, float y, int pointer, @Null Actor t
 	}
 
 	/** Called when the mouse wheel has been scrolled. When true is returned, the event is {@link Event#handle() handled}. */
-	public boolean scrolled (InputEvent event, float x, float y, int amount) {
+	public boolean scrolled (InputEvent event, float x, float y, float amountX, float amountY) {
 		return false;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -389,15 +389,16 @@ public boolean mouseMoved (int screenX, int screenY) {
 
 	/** Applies a mouse scroll event to the stage and returns true if an actor in the scene {@link Event#handle() handled} the
 	 * event. This event only occurs on the desktop. */
-	public boolean scrolled (int amount) {
+	public boolean scrolled (float amountX, float amountY) {
 		Actor target = scrollFocus == null ? root : scrollFocus;
 
 		screenToStageCoordinates(tempCoords.set(mouseScreenX, mouseScreenY));
 
 		InputEvent event = Pools.obtain(InputEvent.class);
 		event.setStage(this);
 		event.setType(InputEvent.Type.scrolled);
-		event.setScrollAmount(amount);
+		event.setScrollAmountX(amountX);
+		event.setScrollAmountY(amountY);
 		event.setStageX(tempCoords.x);
 		event.setStageY(tempCoords.y);
 		target.fire(event);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTestCollection.java
Patch:
@@ -121,7 +121,7 @@ public boolean mouseMoved (int x, int y) {
 	}
 
 	@Override
-	public boolean scrolled (int amount) {
+	public boolean scrolled (float amountX, float amountY) {
 		return false;
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java
Patch:
@@ -162,8 +162,8 @@ public boolean mouseMoved (int x, int y) {
 	}
 
 	@Override
-	public boolean scrolled (int amount) {
-		return tests[testIndex].scrolled(amount);
+	public boolean scrolled (float amountX, float amountY) {
+		return tests[testIndex].scrolled(amountX, amountY);
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InputTest.java
Patch:
@@ -109,8 +109,8 @@ public boolean mouseMoved (int x, int y) {
 	}
 
 	@Override
-	public boolean scrolled (int amount) {
-		Gdx.app.log("Input Test", "scrolled: " + amount);
+	public boolean scrolled (float amountX, float amountY) {
+		Gdx.app.log("Input Test", "scrolled: " + amountY);
 		return false;
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InterpolationTest.java
Patch:
@@ -119,9 +119,9 @@ public void changed (ChangeEvent event, Actor actor) {
 		stage.addActor(table);
 
 		Gdx.input.setInputProcessor(new InputMultiplexer(new InputAdapter() {
-			public boolean scrolled (int amount) {
+			public boolean scrolled (float amountX, float amountY) {
 				if (!Gdx.input.isKeyPressed(Keys.CONTROL_LEFT)) return false;
-				duration -= amount / 15f;
+				duration -= amountY / 15f;
 				duration = MathUtils.clamp(duration, 0, Float.POSITIVE_INFINITY);
 				return true;
 			}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/OnscreenKeyboardTest.java
Patch:
@@ -93,7 +93,7 @@ public boolean mouseMoved (int x, int y) {
 	}
 
 	@Override
-	public boolean scrolled (int amount) {
+	public boolean scrolled (float amountX, float amountY) {
 		// TODO Auto-generated method stub
 		return false;
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ParticleEmitterChangeSpriteTest.java
Patch:
@@ -94,7 +94,7 @@ public boolean mouseMoved (int x, int y) {
 			}
 
 			@Override
-			public boolean scrolled (int amount) {
+			public boolean scrolled (float amountX, float amountY) {
 				return false;
 			}
 		};

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ParticleEmitterTest.java
Patch:
@@ -116,7 +116,7 @@ public boolean mouseMoved (int x, int y) {
 			}
 
 			@Override
-			public boolean scrolled (int amount) {
+			public boolean scrolled (float amountX, float amountY) {
 				return false;
 			}
 		};

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteBatchTest.java
Patch:
@@ -262,7 +262,7 @@ public boolean mouseMoved (int x, int y) {
 	}
 
 	@Override
-	public boolean scrolled (int amount) {
+	public boolean scrolled (float amountX, float amountY) {
 		return false;
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/Box2DTest.java
Patch:
@@ -232,7 +232,7 @@ public boolean mouseMoved (int x, int y) {
 	}
 
 	@Override
-	public boolean scrolled (int amount) {
+	public boolean scrolled (float amountX, float amountY) {
 		return false;
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletTest.java
Patch:
@@ -70,7 +70,7 @@ public boolean mouseMoved (int screenX, int screenY) {
 	}
 
 	@Override
-	public boolean scrolled (int amount) {
+	public boolean scrolled (float amountX, float amountY) {
 		return false;
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/PerspectiveCamController.java
Patch:
@@ -102,8 +102,8 @@ public boolean touchDragged (int x, int y, int pointer) {
 	}
 
 	@Override
-	public boolean scrolled (int amount) {
-		cam.fieldOfView -= -amount * Gdx.graphics.getDeltaTime() * 100;
+	public boolean scrolled (float amountX, float amountY) {
+		cam.fieldOfView -= -amountY * Gdx.graphics.getDeltaTime() * 100;
 		cam.update();
 		return true;
 	}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFileHandle.java
Patch:
@@ -100,7 +100,7 @@ public FileType type () {
 	/** Returns a java.io.File that represents this file handle. Note the returned file will only be usable for
 	 * {@link FileType#Absolute} and {@link FileType#External} file handles. */
 	public File file () {
-		throw new GdxRuntimeException("Not supported in GWT backend");
+		throw new GdxRuntimeException("file() not supported in GWT backend");
 	}
 
 	/** Returns a stream for reading this file as bytes.

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFiles.java
Patch:
@@ -50,17 +50,17 @@ public FileHandle internal (String path) {
 
 	@Override
 	public FileHandle external (String path) {
-		throw new GdxRuntimeException("Not supported in GWT backend");
+		throw new GdxRuntimeException("external() not supported in GWT backend");
 	}
 
 	@Override
 	public FileHandle absolute (String path) {
-		throw new GdxRuntimeException("Not supported in GWT backend");
+		throw new GdxRuntimeException("absolute() not supported in GWT backend");
 	}
 
 	@Override
 	public FileHandle local (String path) {
-		throw new GdxRuntimeException("Not supported in GWT backend");
+		throw new GdxRuntimeException("local() not supported in GWT backend");
 	}
 
 	@Override

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl3/Lwjgl3TestStarter.java
Patch:
@@ -44,7 +44,7 @@
 
 public class Lwjgl3TestStarter {
 	
-	private static CommandLineOptions options;
+	static CommandLineOptions options;
 
 	/**
 	 * Runs libgdx tests.

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VBOWithVAOPerformanceTest.java
Patch:
@@ -33,6 +33,7 @@
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.WindowedMean;
 import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.tests.utils.GdxTestConfig;
 import com.badlogic.gdx.utils.BufferUtils;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.StringBuilder;
@@ -41,6 +42,7 @@
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 
+@GdxTestConfig(requireGL30=true)
 public class VBOWithVAOPerformanceTest extends GdxTest {
 
 	ShaderProgram shader;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/MultipleRenderTargetTest.java
Patch:
@@ -55,6 +55,7 @@
 import com.badlogic.gdx.math.Matrix3;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.tests.utils.GdxTestConfig;
 import com.badlogic.gdx.utils.*;
 import com.badlogic.gdx.utils.StringBuilder;
 
@@ -68,6 +69,7 @@
  * Thanks to http://www.blendswap.com/blends/view/73922 for the cannon model, licensed under CC-BY-SA
  *
  /** @author Tomski */
+@GdxTestConfig(requireGL30=true)
 public class MultipleRenderTargetTest extends GdxTest {
 
 	RenderContext renderContext;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -77,6 +77,7 @@
 import com.badlogic.gdx.tests.g3d.utils.DefaultTextureBinderTest;
 import com.badlogic.gdx.tests.gles2.HelloTriangle;
 import com.badlogic.gdx.tests.gles2.SimpleVertexShader;
+import com.badlogic.gdx.tests.gles3.InstancedRenderingTest;
 import com.badlogic.gdx.tests.net.NetAPITest;
 import com.badlogic.gdx.tests.superkoalio.SuperKoalio;
 import com.badlogic.gdx.utils.ObjectMap;
@@ -165,6 +166,7 @@ public class GdxTests {
 		ImmediateModeRendererTest.class,
 		IndexBufferObjectShaderTest.class,
 		InputTest.class,
+		InstancedRenderingTest.class,
 		IntegerBitmapFontTest.class,
 		InterpolationTest.class,
 		IntersectorOverlapConvexPolygonsTest.class,
@@ -337,7 +339,7 @@ public static List<String> getNames () {
 		return names;
 	}
 
-	private static Class<? extends GdxTest> forName (String name) {
+	public static Class<? extends GdxTest> forName (String name) {
 		name = originalToObfuscated.get(name, name);
 		for (Class clazz : tests)
 			if (clazz.getSimpleName().equals(name)) return clazz;

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObjectWithVAO.java
Patch:
@@ -117,6 +117,7 @@ public FloatBuffer getBuffer () {
 
 	private void bufferChanged () {
 		if (isBound) {
+			Gdx.gl20.glBindBuffer(GL20.GL_ARRAY_BUFFER, bufferHandle);
 			Gdx.gl20.glBufferData(GL20.GL_ARRAY_BUFFER, byteBuffer.limit(), byteBuffer, usage);
 			isDirty = false;
 		}

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -815,7 +815,7 @@ public BoundingBox extendBoundingBox (final BoundingBox out, int offset, int cou
 		case 3:
 			if (numIndices > 0) {
 				for (int i = offset; i < end; i++) {
-					final int idx = (index.get(i) &0xFFFF) * vertexSize + posoff;
+					final int idx = (index.get(i) & 0xFFFF) * vertexSize + posoff;
 					tmpV.set(verts.get(idx), verts.get(idx + 1), verts.get(idx + 2));
 					if (transform != null) tmpV.mul(transform);
 					out.ext(tmpV);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -320,7 +320,7 @@ public int getNumIndices () {
 	public void getIndices (short[] out, int destOffset) {
 		if (attributes == null) throw new GdxRuntimeException("Must be called in between #begin and #end");
 		if ((destOffset < 0) || (destOffset > out.length - indices.size))
-			throw new GdxRuntimeException("Array to small or offset out of range");
+			throw new GdxRuntimeException("Array too small or offset out of range");
 		System.arraycopy(indices.items, 0, out, destOffset, indices.size);
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglFrame.java
Patch:
@@ -128,6 +128,7 @@ public void windowLostFocus (WindowEvent event) {
 				if (Display.isCreated()) {
 					Display.setLocation(0, 0);
 					Display.update(false);
+					lwjglCanvas.graphics.requestRendering();
 				}
 			}
 		});

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ProgressBar.java
Patch:
@@ -144,7 +144,7 @@ public void draw (Batch batch, float parentAlpha) {
 				position = (positionHeight - knobHeight) * percent;
 				position = Math.min(positionHeight - knobHeight, position) + bgBottomHeight;
 			}
-			position = Math.max(Math.min(0, bgBottomHeight), position);
+			position = Math.max(bgBottomHeight, position);
 
 			if (knobBefore != null) {
 				if (round) {
@@ -201,7 +201,7 @@ public void draw (Batch batch, float parentAlpha) {
 				position = (positionWidth - knobWidth) * percent;
 				position = Math.min(positionWidth - knobWidth, position) + bgLeftWidth;
 			}
-			position = Math.max(Math.min(0, bgLeftWidth), position);
+			position = Math.max(bgLeftWidth, position);
 
 			if (knobBefore != null) {
 				if (round) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ProgressBar.java
Patch:
@@ -128,7 +128,7 @@ public void draw (Batch batch, float parentAlpha) {
 				if (round)
 					bg.draw(batch, Math.round(x + (width - bg.getMinWidth()) * 0.5f), y, Math.round(bg.getMinWidth()), height);
 				else
-					bg.draw(batch, x + width - bg.getMinWidth() * 0.5f, y, bg.getMinWidth(), height);
+					bg.draw(batch, x + (width - bg.getMinWidth()) * 0.5f, y, bg.getMinWidth(), height);
 				bgTopHeight = bg.getTopHeight();
 				bgBottomHeight = bg.getBottomHeight();
 				positionHeight -= bgTopHeight + bgBottomHeight;

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/Language.java
Patch:
@@ -1,7 +1,7 @@
 package com.badlogic.gdx.setup;
 
 public enum Language {
-	JAVA ("java", "", "", "", "java-library;java-library;android;java-library,robovm;java-library,gwt,war", true) ,
+	JAVA ("java", "", "", "", "java-library;java-library;com.android.application;java-library,robovm;java-library,gwt,war", true) ,
 	KOTLIN ("kotlin", "ext.kotlinVersion = '1.3.41'",
 			"classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\"", 
 			"api \"org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion\"",

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/Language.java
Patch:
@@ -1,7 +1,7 @@
 package com.badlogic.gdx.setup;
 
 public enum Language {
-	JAVA ("java", "", "", "", "java-library;java-library;android;java-library,robovm;java-library,gwt,war", true) ,
+	JAVA ("java", "", "", "", "java-library;java-library;com.android.application;java-library,robovm;java-library,gwt,war", true) ,
 	KOTLIN ("kotlin", "ext.kotlinVersion = '1.3.41'",
 			"classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\"", 
 			"api \"org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion\"",

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/CheckBox.java
Patch:
@@ -51,8 +51,8 @@ public CheckBox (@Null String text, CheckBoxStyle style) {
 
 	public void setStyle (ButtonStyle style) {
 		if (!(style instanceof CheckBoxStyle)) throw new IllegalArgumentException("style must be a CheckBoxStyle.");
-		super.setStyle(style);
 		this.style = (CheckBoxStyle)style;
+		super.setStyle(style);
 	}
 
 	/** Returns the checkbox's style. Modifying the returned style may not have an effect until {@link #setStyle(ButtonStyle)} is

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ImageButton.java
Patch:
@@ -63,8 +63,8 @@ public ImageButton (@Null Drawable imageUp, @Null Drawable imageDown, @Null Draw
 
 	public void setStyle (ButtonStyle style) {
 		if (!(style instanceof ImageButtonStyle)) throw new IllegalArgumentException("style must be an ImageButtonStyle.");
-		super.setStyle(style);
 		this.style = (ImageButtonStyle)style;
+		super.setStyle(style);
 
 		if (image != null) updateImage();
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ImageTextButton.java
Patch:
@@ -68,8 +68,8 @@ public ImageTextButton (@Null String text, ImageTextButtonStyle style) {
 
 	public void setStyle (ButtonStyle style) {
 		if (!(style instanceof ImageTextButtonStyle)) throw new IllegalArgumentException("style must be a ImageTextButtonStyle.");
-		super.setStyle(style);
 		this.style = (ImageTextButtonStyle)style;
+		super.setStyle(style);
 
 		if (image != null) updateImage();
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java
Patch:
@@ -53,8 +53,8 @@ public TextButton (@Null String text, TextButtonStyle style) {
 	public void setStyle (ButtonStyle style) {
 		if (style == null) throw new NullPointerException("style cannot be null");
 		if (!(style instanceof TextButtonStyle)) throw new IllegalArgumentException("style must be a TextButtonStyle.");
-		super.setStyle(style);
 		this.style = (TextButtonStyle)style;
+		super.setStyle(style);
 
 		if (label != null) {
 			TextButtonStyle textButtonStyle = (TextButtonStyle)style;

File: gdx/src/com/badlogic/gdx/Net.java
Patch:
@@ -363,8 +363,8 @@ public static interface HttpResponseListener {
 		void cancelled ();
 	}
 
-	/** Process the specified {@link HttpRequest} and reports the {@link HttpResponse} to the specified {@link HttpResponseListener}
-	 * .
+	/** Process the specified {@link HttpRequest} and reports the {@link HttpResponse} to the specified
+	 * {@link HttpResponseListener}.
 	 * @param httpRequest The {@link HttpRequest} to be performed.
 	 * @param httpResponseListener The {@link HttpResponseListener} to call once the HTTP response is ready to be processed. Could
 	 *           be null, in that case no listener is called. */

File: gdx/src/com/badlogic/gdx/graphics/g3d/Shader.java
Patch:
@@ -38,9 +38,9 @@
  * 
  * A specific Shader instance might be (and usually is) dedicated to a specific type of {@link Renderable}. For example it might
  * use a {@link ShaderProgram} that is compiled with uniforms (shader input) for specific {@link Attribute} types. Therefore the
- * {@link #canRender(Renderable)} method can be used to check if the Shader instance can be used for a specific {@link Renderable}
- * . Rendering a {@link Renderable} using a Shader for which {@link #canRender(Renderable)} returns false might result in
- * unpredicted behavior or crash the application.</p>
+ * {@link #canRender(Renderable)} method can be used to check if the Shader instance can be used for a specific
+ * {@link Renderable}. Rendering a {@link Renderable} using a Shader for which {@link #canRender(Renderable)} returns false might
+ * result in unpredicted behavior or crash the application.</p>
  * 
  * To manage multiple shaders and create a new shader when required, a {@link ShaderProvider} can be used. Therefore, in practice,
  * a specific Shader implementation is usually accompanied by a specific {@link ShaderProvider} implementation (usually extending

File: gdx/src/com/badlogic/gdx/math/MathUtils.java
Patch:
@@ -194,7 +194,7 @@ public static float randomTriangular (float max) {
 	/** Returns a triangularly distributed random number between {@code min} (inclusive) and {@code max} (exclusive), where the
 	 * {@code mode} argument defaults to the midpoint between the bounds, giving a symmetric distribution.
 	 * <p>
-	 * This method is equivalent of {@link #randomTriangular(float, float, float) randomTriangular(min, max, (min + max) * .5f)}
+	 * This method is equivalent of {@link #randomTriangular(float, float, float) randomTriangular(min, max, (min + max) * 0.5f)}
 	 * @param min the lower limit
 	 * @param max the upper limit */
 	public static float randomTriangular (float min, float max) {

File: gdx/src/com/badlogic/gdx/math/Rectangle.java
Patch:
@@ -375,8 +375,8 @@ public String toString () {
 		return "[" + x + "," + y + "," + width + "," + height + "]";
 	}
 
-	/** Sets this {@code Rectangle} to the value represented by the specified string according to the format of {@link #toString()}
-	 * .
+	/** Sets this {@code Rectangle} to the value represented by the specified string according to the format of
+	 * {@link #toString()}.
 	 * @param v the string.
 	 * @return this rectangle for chaining */
 	public Rectangle fromString (String v) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -759,9 +759,9 @@ public void calculateScissors (Rectangle localRect, Rectangle scissorRect) {
 		viewport.calculateScissors(transformMatrix, localRect, scissorRect);
 	}
 
-	/** If true, any actions executed during a call to {@link #act()}) will result in a call to {@link Graphics#requestRendering()}
-	 * . Widgets that animate or otherwise require additional rendering may check this setting before calling
-	 * {@link Graphics#requestRendering()}. Default is true. */
+	/** If true, any actions executed during a call to {@link #act()}) will result in a call to
+	 * {@link Graphics#requestRendering()}. Widgets that animate or otherwise require additional rendering may check this setting
+	 * before calling {@link Graphics#requestRendering()}. Default is true. */
 	public void setActionsRequestRendering (boolean actionsRequestRendering) {
 		this.actionsRequestRendering = actionsRequestRendering;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -80,6 +80,7 @@ public void setStyle (LabelStyle style) {
 		if (style == null) throw new IllegalArgumentException("style cannot be null.");
 		if (style.font == null) throw new IllegalArgumentException("Missing LabelStyle font.");
 		this.style = style;
+
 		cache = style.font.newFontCache();
 		invalidateHierarchy();
 	}
@@ -371,9 +372,7 @@ public String toString () {
 	 * @author Nathan Sweet */
 	static public class LabelStyle {
 		public BitmapFont font;
-		/** Optional. */
 		public @Null Color fontColor;
-		/** Optional. */
 		public @Null Drawable background;
 
 		public LabelStyle () {
@@ -385,7 +384,7 @@ public LabelStyle (BitmapFont font, @Null Color fontColor) {
 		}
 
 		public LabelStyle (LabelStyle style) {
-			this.font = style.font;
+			font = style.font;
 			if (style.fontColor != null) fontColor = new Color(style.fontColor);
 			background = style.background;
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -199,7 +199,6 @@ public void setVisualPercent (float percent) {
 	 * @author mzechner
 	 * @author Nathan Sweet */
 	static public class SliderStyle extends ProgressBarStyle {
-		/** Optional. */
 		public @Null Drawable knobOver, knobDown;
 
 		public SliderStyle () {
@@ -211,8 +210,8 @@ public SliderStyle (@Null Drawable background, @Null Drawable knob) {
 
 		public SliderStyle (SliderStyle style) {
 			super(style);
-			this.knobOver = style.knobOver;
-			this.knobDown = style.knobDown;
+			knobOver = style.knobOver;
+			knobDown = style.knobDown;
 		}
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -417,7 +417,7 @@ public SplitPaneStyle (Drawable handle) {
 		}
 
 		public SplitPaneStyle (SplitPaneStyle style) {
-			this.handle = style.handle;
+			handle = style.handle;
 		}
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextArea.java
Patch:
@@ -99,6 +99,7 @@ public void setStyle (TextFieldStyle style) {
 		// same as super(), just different textHeight. no super() so we don't do same work twice
 		if (style == null) throw new IllegalArgumentException("style cannot be null.");
 		this.style = style;
+
 		// no extra descent to fake line height
 		textHeight = style.font.getCapHeight() - style.font.getDescent();
 		if (text != null) updateDisplayText();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextTooltip.java
Patch:
@@ -71,9 +71,8 @@ public void setStyle (TextTooltipStyle style) {
 	 * @author Nathan Sweet */
 	static public class TextTooltipStyle {
 		public LabelStyle label;
-		/** Optional. */
 		public @Null Drawable background;
-		/** Optional, 0 means don't wrap. */
+		/** 0 means don't wrap. */
 		public float wrapWidth;
 
 		public TextTooltipStyle () {
@@ -85,7 +84,7 @@ public TextTooltipStyle (LabelStyle label, @Null Drawable background) {
 		}
 
 		public TextTooltipStyle (TextTooltipStyle style) {
-			this.label = new LabelStyle(style.label);
+			label = new LabelStyle(style.label);
 			background = style.background;
 			wrapWidth = style.wrapWidth;
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tooltip.java
Patch:
@@ -25,7 +25,7 @@
 import com.badlogic.gdx.scenes.scene2d.Touchable;
 import com.badlogic.gdx.utils.Null;
 
-/** A listener that shows a tooltip actor when another actor is hovered over with the mouse.
+/** A listener that shows a tooltip actor when the mouse is over another actor.
  * @author Nathan Sweet */
 public class Tooltip<T extends Actor> extends InputListener {
 	static Vector2 tmp = new Vector2();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Value.java
Patch:
@@ -20,8 +20,8 @@
 import com.badlogic.gdx.scenes.scene2d.utils.Layout;
 import com.badlogic.gdx.utils.Null;
 
-/** Value placeholder, allowing the value to be computed on request. Values are provided an actor for context which reduces the
- * number of value instances that need to be created and reduces verbosity in code that specifies values.
+/** Value placeholder, allowing the value to be computed on request. Values can be provided an actor for context to reduce the
+ * number of value instances that need to be created and reduce verbosity in code that specifies values.
  * @author Nathan Sweet */
 abstract public class Value {
 	/** Calls {@link #get(Actor)} with null. */

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/LightsTest.java
Patch:
@@ -57,7 +57,7 @@ protected void onLoaded () {
 		super.onLoaded();
 		BoundingBox bounds = instances.get(0).calculateBoundingBox(new BoundingBox());
 		bounds.getCenter(center);
-		radius = bounds.getDimensions(tmpV).len() * .5f;
+		radius = bounds.getDimensions(tmpV).len() * 0.5f;
 		pointLight.position.set(0, radius, 0).add(transformedCenter.set(center).mul(transform));
 		pointLight.intensity = radius * radius;
 		((ColorAttribute)pLight.material.get(ColorAttribute.Diffuse)).color.set(pointLight.color);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -167,6 +167,7 @@ public class GdxTests {
 		InputTest.class,
 		IntegerBitmapFontTest.class,
 		InterpolationTest.class,
+		IntersectorOverlapConvexPolygonsTest.class,
 		InverseKinematicsTest.class,
 		IsometricTileTest.class,
 		KinematicBodyTest.class,

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -435,7 +435,7 @@ public void layout () {
 			if (hScrollKnob != null) {
 				float x = scrollbarsOnTop ? bgLeftWidth : widgetArea.x;
 				float y = hScrollOnBottom ? bgBottomHeight : height - bgTopHeight - scrollbarHeight;
-				hScrollBounds.set(x, y, widgetArea.width, scrollbarWidth);
+				hScrollBounds.set(x, y, widgetArea.width, scrollbarHeight);
 				if (scrollY && scrollbarsOnTop) {
 					hScrollBounds.width -= scrollbarWidth;
 					if (!vScrollOnRight) hScrollBounds.x += scrollbarWidth;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/Preloader.java
Patch:
@@ -53,6 +53,7 @@ public interface PreloaderCallback {
 	public ObjectMap<String, String> texts = new ObjectMap<String, String>();
 	public ObjectMap<String, Blob> binaries = new ObjectMap<String, Blob>();
 	private ObjectMap<String, Asset> stillToFetchAssets = new ObjectMap<String, Asset>();
+	public ObjectMap<String, String> assetNames = new ObjectMap<String, String>();
 
 	public static class Asset {
 		public Asset(String file, String url, AssetType type, long size, String mimeType) {
@@ -159,6 +160,7 @@ public void onSuccess (String result) {
 						size = 0;
 					}
 					Asset asset = new Asset(assetPathOrig.trim(), assetPathMd5.trim(), type, size, assetMimeType);
+					assetNames.put(asset.file, asset.url);
                     if (assetPreload || asset.file.startsWith("com/badlogic/"))
                         assets.add(asset);
                     else

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.badlogic.gdx.utils;
 
-import static com.badlogic.gdx.utils.ObjectSet.*;
-
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
+import static com.badlogic.gdx.utils.ObjectSet.tableSize;
+
 /** An unordered map where the keys are unboxed ints and values are unboxed floats. No allocation is done except when growing the
  * table size.
  * <p>

File: gdx/src/com/badlogic/gdx/utils/IntIntMap.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.badlogic.gdx.utils;
 
-import static com.badlogic.gdx.utils.ObjectSet.*;
-
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
+import static com.badlogic.gdx.utils.ObjectSet.tableSize;
+
 /** An unordered map where the keys and values are unboxed ints. No allocation is done except when growing the table size.
  * <p>
  * This class performs fast contains and remove (typically O(1), worst case O(n) but that is rare in practice). Add may be

File: gdx/src/com/badlogic/gdx/utils/IntMap.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.badlogic.gdx.utils;
 
-import static com.badlogic.gdx.utils.ObjectSet.*;
-
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
+import static com.badlogic.gdx.utils.ObjectSet.tableSize;
+
 /** An unordered map where the keys are unboxed ints and values are objects. No allocation is done except when growing the table
  * size.
  * <p>

File: gdx/src/com/badlogic/gdx/utils/IntSet.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.badlogic.gdx.utils;
 
-import static com.badlogic.gdx.utils.ObjectSet.*;
-
 import java.util.Arrays;
 import java.util.NoSuchElementException;
 
+import static com.badlogic.gdx.utils.ObjectSet.tableSize;
+
 /** An unordered set where the items are unboxed ints. No allocation is done except when growing the table size.
  * <p>
  * This class performs fast contains and remove (typically O(1), worst case O(n) but that is rare in practice). Add may be

File: gdx/src/com/badlogic/gdx/utils/LongMap.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.badlogic.gdx.utils;
 
-import static com.badlogic.gdx.utils.ObjectSet.*;
-
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
+import static com.badlogic.gdx.utils.ObjectSet.tableSize;
+
 /** An unordered map where the keys are unboxed longs and values are objects. No allocation is done except when growing the table
  * size.
  * <p>

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.badlogic.gdx.utils;
 
-import static com.badlogic.gdx.utils.ObjectSet.*;
-
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
+import static com.badlogic.gdx.utils.ObjectSet.tableSize;
+
 /** An unordered map where the keys are objects and the values are unboxed floats. Null keys are not allowed. No allocation is
  * done except when growing the table size.
  * <p>
@@ -146,7 +146,7 @@ public void put (K key, float value) {
 
 	/** Returns the old value associated with the specified key, or the specified default value.
 	 * @param defaultValue {@link Float#NaN} can be used for a value unlikely to be in the map. */
-	public float put (K key, int value, float defaultValue) {
+	public float put (K key, float value, float defaultValue) {
 		int i = locateKey(key);
 		if (i >= 0) { // Existing key was found.
 			float oldValue = valueTable[i];

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.badlogic.gdx.utils;
 
-import static com.badlogic.gdx.utils.ObjectSet.*;
-
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
+import static com.badlogic.gdx.utils.ObjectSet.tableSize;
+
 /** An unordered map where the keys are objects and the values are unboxed ints. Null keys are not allowed. No allocation is done
  * except when growing the table size.
  * <p>

File: gdx/src/com/badlogic/gdx/utils/ObjectLongMap.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.badlogic.gdx.utils;
 
-import static com.badlogic.gdx.utils.ObjectSet.*;
-
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
+import static com.badlogic.gdx.utils.ObjectSet.tableSize;
+
 /** An unordered map where the keys are objects and the values are unboxed longs. Null keys are not allowed. No allocation is done
  * except when growing the table size.
  * <p>
@@ -145,7 +145,7 @@ public void put (K key, long value) {
 	}
 
 	/** Returns the old value associated with the specified key, or the specified default value. */
-	public long put (K key, int value, long defaultValue) {
+	public long put (K key, long value, long defaultValue) {
 		int i = locateKey(key);
 		if (i >= 0) { // Existing key was found.
 			long oldValue = valueTable[i];

File: gdx/src/com/badlogic/gdx/utils/ObjectMap.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.badlogic.gdx.utils;
 
-import static com.badlogic.gdx.utils.ObjectSet.*;
-
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
+import static com.badlogic.gdx.utils.ObjectSet.tableSize;
+
 /** An unordered map where the keys and values are objects. Null keys are not allowed. No allocation is done except when growing
  * the table size.
  * <p>

File: gdx/src/com/badlogic/gdx/math/DelaunayTriangulator.java
Patch:
@@ -314,7 +314,7 @@ private int quicksortPartition (final float[] values, int lower, int upper, shor
 				originalIndices[up / 2] = tempIndex;
 			}
 		}
-		if(value > values[up]) {
+		if (value > values[up]) {
 			values[lower] = values[up];
 			values[up] = value;
 

File: gdx/src/com/badlogic/gdx/utils/IntMap.java
Patch:
@@ -195,6 +195,7 @@ public V get (int key, @Null V defaultValue) {
 		return i >= 0 ? valueTable[i] : defaultValue;
 	}
 
+	/** Returns the value for the removed key, or null if the key is not in the map. */
 	public @Null V remove (int key) {
 		if (key == 0) {
 			if (!hasZeroValue) return null;

File: gdx/src/com/badlogic/gdx/utils/LongMap.java
Patch:
@@ -194,6 +194,7 @@ public V get (long key, @Null V defaultValue) {
 		return i >= 0 ? valueTable[i] : defaultValue;
 	}
 
+	/** Returns the value for the removed key, or null if the key is not in the map. */
 	public @Null V remove (long key) {
 		if (key == 0) {
 			if (!hasZeroValue) return null;

File: gdx/src/com/badlogic/gdx/utils/ObjectMap.java
Patch:
@@ -184,6 +184,7 @@ public V get (K key, @Null V defaultValue) {
 		return i < 0 ? defaultValue : valueTable[i];
 	}
 
+	/** Returns the value for the removed key, or null if the key is not in the map. */
 	public @Null V remove (K key) {
 		int i = locateKey(key);
 		if (i < 0) return null;

File: gdx/src/com/badlogic/gdx/math/Matrix3.java
Patch:
@@ -524,7 +524,8 @@ public Vector2 getTranslation (Vector2 position) {
 		position.y = val[M12];
 		return position;
 	}
-
+	/** @param scale The vector which will receive the (non-negative) scale components on each axis.
+	 * @return The provided vector for chaining. */
 	public Vector2 getScale (Vector2 scale) {
 		float[] val = this.val;
 		scale.x = (float)Math.sqrt(val[M00] * val[M00] + val[M01] * val[M01]);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/AnimationController.java
Patch:
@@ -179,11 +179,11 @@ public void update (float delta) {
 		}
 		if (current == null || current.loopCount == 0 || current.animation == null) return;
 		final float remain = current.update(delta);
-		if (remain != 0f && queued != null) {
+		if (queued != null) {
 			inAction = false;
 			animate(queued, queuedTransitionTime);
 			queued = null;			
-			update(remain);
+			if(remain != 0f) update(remain);
 			return;
 		}
 		if (previous != null)

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontMetricsTest.java
Patch:
@@ -36,7 +36,7 @@ public class BitmapFontMetricsTest extends GdxTest {
 	@Override
 	public void create () {
 		spriteBatch = new SpriteBatch();
-		atlas = new TextureAtlas("data/pack");
+		atlas = new TextureAtlas("data/pack.atlas");
 		smallFont = new BitmapFont();
 		font = new BitmapFont(Gdx.files.internal("data/verdana39.fnt"), atlas.findRegion("verdana39"), false);
 		font = new BitmapFont(Gdx.files.internal("data/arial-32-pad.fnt"), false);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/IntegerBitmapFontTest.java
Patch:
@@ -35,7 +35,7 @@ public class IntegerBitmapFontTest extends GdxTest {
 	SpriteBatch batch;
 
 	public void create () {
-		TextureAtlas textureAtlas = new TextureAtlas("data/pack");
+		TextureAtlas textureAtlas = new TextureAtlas("data/pack.atlas");
 		font = new BitmapFont(Gdx.files.internal("data/verdana39.fnt"), textureAtlas.findRegion("verdana39"), false);
 		singleLineCache = new BitmapFontCache(font, true);
 		multiLineCache = new BitmapFontCache(font, true);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureAtlasTest.java
Patch:
@@ -45,7 +45,7 @@ public void create () {
 		batch = new SpriteBatch();
 		renderer = new ShapeRenderer();
 
-		atlas = new TextureAtlas(Gdx.files.internal("data/pack"));
+		atlas = new TextureAtlas(Gdx.files.internal("data/pack.atlas"));
 		jumpAtlas = new TextureAtlas(Gdx.files.internal("data/jump.txt"));
 
 		jumpAnimation = new Animation<TextureRegion>(0.25f, jumpAtlas.findRegions("ALIEN_JUMP_"));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/YDownTest.java
Patch:
@@ -56,7 +56,7 @@ public void create () {
 		region.flip(false, true);
 
 		// a texture atlas, note the boolean
-		atlas = new TextureAtlas(Gdx.files.internal("data/pack"), true);
+		atlas = new TextureAtlas(Gdx.files.internal("data/pack.atlas"), true);
 
 		// a sprite, created from a region in the atlas
 		sprite = atlas.createSprite("badlogicsmall");

File: tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypeMetricsTest.java
Patch:
@@ -40,7 +40,7 @@ public class FreeTypeMetricsTest extends GdxTest {
 	@Override
 	public void create () {
 		spriteBatch = new SpriteBatch();
-		atlas = new TextureAtlas("data/pack");
+		atlas = new TextureAtlas("data/pack.atlas");
 		smallFont = new BitmapFont();
 
 		FreeTypeFontParameter parameter = new FreeTypeFontParameter();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTest.java
Patch:
@@ -87,7 +87,7 @@ public void create () {
 		cache.setColor(Color.RED);
 		cache.setText("This is a Test", 0, 0);
 
-		atlas = new TextureAtlas(Gdx.files.internal("data/pack"));
+		atlas = new TextureAtlas(Gdx.files.internal("data/pack.atlas"));
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/math/Interpolation.java
Patch:
@@ -85,7 +85,7 @@ public float apply (float a) {
 	static public final PowOut pow3Out = new PowOut(3);
 	static public final Interpolation pow3InInverse = new Interpolation() {
 		public float apply (float a) {
-			return (float)Math.cbrt(0);
+			return (float)Math.cbrt(a);
 		}
 	};
 	static public final Interpolation pow3OutInverse = new Interpolation() {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -218,6 +218,7 @@ public void setStyle (TextFieldStyle style) {
 		if (style == null) throw new IllegalArgumentException("style cannot be null.");
 		this.style = style;
 		textHeight = style.font.getCapHeight() - style.font.getDescent() * 2;
+		if (text != null) updateDisplayText();
 		invalidateHierarchy();
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -75,6 +75,8 @@ public class LwjglApplicationConfiguration {
 	public boolean forceExit = true;
 	/** whether the window is resizable **/
 	public boolean resizable = true;
+	/** whether the window is undecorated **/
+	public boolean undecorated = false;
 	/** the maximum number of sources that can be played simultaneously */
 	public int audioDeviceSimultaneousSources = 16;
 	/** the audio device buffer size in samples **/

File: gdx/src/com/badlogic/gdx/math/Interpolation.java
Patch:
@@ -69,11 +69,13 @@ public float apply (float a) {
 	static public final PowOut fastSlow = pow2Out;
 	static public final Interpolation pow2InInverse = new Interpolation() {
 		public float apply (float a) {
+			if (a < MathUtils.FLOAT_ROUNDING_ERROR) return 0;
 			return (float)Math.sqrt(a);
 		}
 	};
 	static public final Interpolation pow2OutInverse = new Interpolation() {
 		public float apply (float a) {
+			if (a < MathUtils.FLOAT_ROUNDING_ERROR) return 0;
 			return 1 - (float)Math.sqrt(-(a - 1));
 		}
 	};
@@ -83,7 +85,7 @@ public float apply (float a) {
 	static public final PowOut pow3Out = new PowOut(3);
 	static public final Interpolation pow3InInverse = new Interpolation() {
 		public float apply (float a) {
-			return (float)Math.cbrt(a);
+			return (float)Math.cbrt(0);
 		}
 	};
 	static public final Interpolation pow3OutInverse = new Interpolation() {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GroupTest.java
Patch:
@@ -206,7 +206,7 @@ public boolean mouseMoved (InputEvent event, float x, float y) {
 
 		public void draw (Batch batch, float parentAlpha) {
 			// Use Stage#toScreenCoordinates, which we know is correct.
-			toScreenCoordinates.set(testX, testY).sub(getOriginX(), getOriginY()).scl(getScaleX(), getScaleY()).rotate(getRotation())
+			toScreenCoordinates.set(testX, testY).sub(getOriginX(), getOriginY()).scl(getScaleX(), getScaleY()).rotateDeg(getRotation())
 				.add(getOriginX(), getOriginY()).add(getX(), getY());
 			getStage().toScreenCoordinates(toScreenCoordinates, batch.getTransformMatrix());
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Vector2dTest.java
Patch:
@@ -87,7 +87,7 @@ public void render () {
 		renderer.setColor(Color.WHITE);
 
 		renderVectorAt(2, 2, rotating);
-		rotating.rotate(93 * changeRate);
+		rotating.rotateDeg(93 * changeRate);
 
 		renderVectorAt(2, -2, scalingX);
 		scalingX.set(0, MathUtils.sin((System.currentTimeMillis() - start) / 520.0f));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -248,6 +248,7 @@ public class GdxTests {
 		TangentialAccelerationTest.class,
 		TextAreaTest.class,
 		TextAreaTest2.class,		
+		TextAreaTest3.class,
 		TextButtonTest.class,
 		TextInputDialogTest.class,
 		TextureAtlasTest.class,

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/DefaultLwjglInput.java
Patch:
@@ -67,7 +67,7 @@ final public class DefaultLwjglInput implements LwjglInput {
 	int deltaX, deltaY;
 	int pressedKeys = 0;
 	boolean keyJustPressed = false;
-	boolean[] justPressedKeys = new boolean[256];
+	boolean[] justPressedKeys = new boolean[Keys.MAX_KEYCODE + 1];
 	boolean[] justPressedButtons = new boolean[5];
 	boolean justTouched = false;
 	IntSet pressedButtons = new IntSet();

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTInput.java
Patch:
@@ -109,9 +109,9 @@ protected TouchEvent newObject () {
 	boolean touchDown = false;
 	boolean justTouched = false;
 	int keyCount = 0;
-	boolean[] keys = new boolean[256];
+	boolean[] keys = new boolean[Keys.MAX_KEYCODE + 1];
 	boolean keyJustPressed = false;
-	boolean[] justPressedKeys = new boolean[256];
+	boolean[] justPressedKeys = new boolean[Keys.MAX_KEYCODE + 1];
 	boolean[] justPressedButtons = new boolean[5];
 	IntSet pressedButtons = new IntSet();
 	InputProcessor processor;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglNet.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.lwjgl.Sys;
 
-import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Net;
 import com.badlogic.gdx.net.NetJavaImpl;
 import com.badlogic.gdx.net.ServerSocket;
@@ -27,8 +26,6 @@
 import com.badlogic.gdx.net.SocketHints;
 import com.badlogic.gdx.net.NetJavaSocketImpl;
 import com.badlogic.gdx.net.NetJavaServerSocketImpl;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-import com.badlogic.gdx.utils.StreamUtils;
 
 /** LWJGL implementation of the {@link Net} API, it could be reused in other Desktop backends since it doesn't depend on LWJGL.
  * @author acoppes */

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/DefaultLwjgl3Input.java
Patch:
@@ -41,7 +41,7 @@ public class DefaultLwjgl3Input implements Lwjgl3Input {
 	boolean justTouched;
 	int pressedKeys;
 	boolean keyJustPressed;
-	boolean[] justPressedKeys = new boolean[256];
+	boolean[] justPressedKeys = new boolean[Keys.MAX_KEYCODE + 1];
 	boolean[] justPressedButtons = new boolean[5];
 	char lastCharacter;
 		

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtPermissions.java
Patch:
@@ -44,6 +44,8 @@ native static public void queryPermission(String permission, GwtPermissionResult
 					}
 				};
 			});
+		} else {
+			result.@com.badlogic.gdx.backends.gwt.GwtPermissions.GwtPermissionResult::granted()();
 		}
 	}-*/;
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/PreloaderBundleGenerator.java
Patch:
@@ -128,6 +128,8 @@ public String generate (TreeLogger logger, GeneratorContext context, String type
 				sb.append(":");
 				String mimetype = URLConnection.guessContentTypeFromName(asset.file.name());
 				sb.append(mimetype == null ? "application/unknown" : mimetype);
+                sb.append(":");
+                sb.append(asset.file.isDirectory() || assetFilter.preload(path) ? '1' : '0');
 				sb.append("\n");
 			}
 			target.child(bundle.getKey() + ".txt").writeString(sb.toString(), false);

File: extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/joints/RopeJoint.java
Patch:
@@ -77,7 +77,7 @@ public void setMaxLength (float length) {
 		jniSetMaxLength(addr, length);
 	}
 
-	private native float jniSetMaxLength (long addr, float length); /*
+	private native void jniSetMaxLength (long addr, float length); /*
 		b2RopeJoint* rope = (b2RopeJoint*)addr;
 		rope->SetMaxLength(length);
 	*/

File: extensions/gdx-controllers/gdx-controllers-android/src/com/badlogic/gdx/controllers/android/AndroidControllers.java
Patch:
@@ -36,6 +36,7 @@
 
 public class AndroidControllers implements LifecycleListener, ControllerManager, OnKeyListener, OnGenericMotionListener {
 	private final static String TAG = "AndroidControllers";
+	public static boolean ignoreNoGamepadButtons = true;
 	private final IntMap<AndroidController> controllerMap = new IntMap<AndroidController>();
 	private final Array<Controller> controllers = new Array<Controller>();
 	private final Array<ControllerListener> listeners = new Array<ControllerListener>();
@@ -46,7 +47,7 @@ protected AndroidControllerEvent newObject () {
 			return new AndroidControllerEvent();
 		}
 	};
-	
+
 	public AndroidControllers() {
 		Gdx.app.addLifecycleListener(this);
 		gatherControllers(false);
@@ -189,7 +190,7 @@ public boolean onGenericMotion (View view, MotionEvent motionEvent) {
 
 	@Override
 	public boolean onKey (View view, int keyCode, KeyEvent keyEvent) {
-		if (!KeyEvent.isGamepadButton(keyCode)) {
+		if (ignoreNoGamepadButtons && !KeyEvent.isGamepadButton(keyCode)) {
 			return false;
 		}
 		AndroidController controller = controllerMap.get(keyEvent.getDeviceId());

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/AntScriptGenerator.java
Patch:
@@ -125,7 +125,7 @@ public void generate (BuildConfig config, BuildTarget... targets) {
 			compile.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\"/>\n");
 		}
 		for (int i = 0; i < libsDirs.size(); i++) {
-			pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" includes=\"" + sharedLibFiles.get(i) + "\"/>\n");
+			pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" erroronmissingdir=\"false\" includes=\"" + sharedLibFiles.get(i) + "\"/>\n");
 		}
 
 		if (config.sharedLibs != null) {

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/ExternalExtension.java
Patch:
@@ -41,7 +41,7 @@ public void setDependencies (Map<String, List<ExternalExtensionDependency>> depe
 
 	public Dependency generateDependency () {
 		Dependency dep = new Dependency(name, gwtInherits, getPlatformDependencies("core"), getPlatformDependencies("desktop"),
-			getPlatformDependencies("android"), getPlatformDependencies("ios"), getPlatformDependencies("ios-moe"), getPlatformDependencies("html"));
+			getPlatformDependencies("android"), getPlatformDependencies("ios"), getPlatformDependencies("html"));
 
 		return dep;
 	}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/ExternalExtensionsDialog.java
Patch:
@@ -224,7 +224,6 @@ private void initData () throws ParserConfigurationException, IOException, SAXEx
 				addToDependencyMapFromXML(dependencies, eElement, "desktop");
 				addToDependencyMapFromXML(dependencies, eElement, "android");
 				addToDependencyMapFromXML(dependencies, eElement, "ios");
-				addToDependencyMapFromXML(dependencies, eElement, "ios-moe");
 				addToDependencyMapFromXML(dependencies, eElement, "html");
 
 				URI uri = null;

File: gdx/src/com/badlogic/gdx/Input.java
Patch:
@@ -241,11 +241,13 @@ static public class Keys {
 		public static final int F11 = 254;
 		public static final int F12 = 255;
 
+		public static final int MAX_KEYCODE = 255;
+
 		/** @return a human readable representation of the keycode. The returned value can be used in
 		 *         {@link Input.Keys#valueOf(String)} */
 		public static String toString (int keycode) {
 			if (keycode < 0) throw new IllegalArgumentException("keycode cannot be negative, keycode: " + keycode);
-			if (keycode > 255) throw new IllegalArgumentException("keycode cannot be greater than 255, keycode: " + keycode);
+			if (keycode > MAX_KEYCODE) throw new IllegalArgumentException("keycode cannot be greater than 255, keycode: " + keycode);
 			switch (keycode) {
 			// META* variables should not be used with this method.
 			case UNKNOWN:

File: gdx/src/com/badlogic/gdx/assets/AssetDescriptor.java
Patch:
@@ -38,14 +38,14 @@ public AssetDescriptor (FileHandle file, Class<T> assetType) {
 	}
 
 	public AssetDescriptor (String fileName, Class<T> assetType, AssetLoaderParameters<T> params) {
-		this.fileName = fileName.replaceAll("\\\\", "/");
+		this.fileName = fileName.replace('\\', '/');
 		this.type = assetType;
 		this.params = params;
 	}
 
 	/** Creates an AssetDescriptor with an already resolved name. */
 	public AssetDescriptor (FileHandle file, Class<T> assetType, AssetLoaderParameters<T> params) {
-		this.fileName = file.path().replaceAll("\\\\", "/");
+		this.fileName = file.path().replace('\\', '/');
 		this.file = file;
 		this.type = assetType;
 		this.params = params;

File: gdx/src/com/badlogic/gdx/assets/AssetLoadingTask.java
Patch:
@@ -29,6 +29,7 @@
 import com.badlogic.gdx.utils.async.AsyncTask;
 
 /** Responsible for loading an asset through an {@link AssetLoader} based on an {@link AssetDescriptor}.
+ * Please don't forget to update the overriding emu file on GWT backend when changing this file!
  * 
  * @author mzechner */
 class AssetLoadingTask implements AsyncTask<Void> {

File: gdx/src/com/badlogic/gdx/assets/loaders/AsynchronousAssetLoader.java
Patch:
@@ -42,7 +42,7 @@ public AsynchronousAssetLoader (FileHandleResolver resolver) {
 	/** Called if this task is unloaded before {@link #loadSync(AssetManager, String, FileHandle, AssetLoaderParameters) loadSync}
 	 * is called. This method may be invoked on any thread, but will not be invoked during or after
 	 * {@link #loadSync(AssetManager, String, FileHandle, AssetLoaderParameters) loadSync}. This method is not invoked when a task
-	 * is cancelled because it throws an exception, only when the asset is unloaded before loading is complete.
+	 * is cancelled because it threw an exception, only when the asset is unloaded before loading is complete.
 	 * <p>
 	 * The default implementation does nothing. Subclasses should release any resources acquired in
 	 * {@link #loadAsync(AssetManager, String, FileHandle, AssetLoaderParameters) loadAsync}, which may or may not have been called

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/AnimationController.java
Patch:
@@ -357,7 +357,7 @@ protected AnimationDesc animate (final Animation anim, float offset, float durat
 
 	/** Changes the current animation by blending the new on top of the old during the transition time. */
 	protected AnimationDesc animate (final AnimationDesc anim, float transitionTime) {
-		if (current == null)
+		if (current == null || current.loopCount == 0)
 			current = anim;
 		else if (inAction)
 			queue(anim, transitionTime);

File: gdx/src/com/badlogic/gdx/net/HttpStatus.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.badlogic.gdx.net;
 
-import com.badlogic.gdx.Net;
 import com.badlogic.gdx.Net.HttpRequest;
 import com.badlogic.gdx.Net.HttpResponse;
 
@@ -72,7 +71,7 @@ public HttpStatus (int statusCode) {
 	public static final int SC_RESET_CONTENT = 205;
 	/** <tt>206 Partial Content</tt> (HTTP/1.1 - RFC 2616) */
 	public static final int SC_PARTIAL_CONTENT = 206;
-	/** <tt>207 Multi-Status</tt> (WebDAV - RFC 2518) or <tt>207 Partial Update
+	/** <tt>207 Multi-Status</tt> (WebDAV - RFC 2518) or <tt>207 Partial Update
 	 * OK</tt> (HTTP/1.1 - draft-ietf-http-v11-spec-rev-01?) */
 	public static final int SC_MULTI_STATUS = 207;
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -632,8 +632,8 @@ boolean changeText (String oldText, String newText) {
 		return !cancelled;
 	}
 
-	/** If false, methods that change the text will not fire {@link ChangeEvent}, the event will be fired only when user changes
-	 * the text. */
+	/** If false, methods that change the text will not fire {@link ChangeEvent}, the event will be fired only when the user
+	 * changes the text. */
 	public void setProgrammaticChangeEvents (boolean programmaticChangeEvents) {
 		this.programmaticChangeEvents = programmaticChangeEvents;
 	}

File: gdx/src/com/badlogic/gdx/utils/SharedLibraryLoader.java
Patch:
@@ -43,7 +43,6 @@ public class SharedLibraryLoader {
 	static public boolean is64Bit = System.getProperty("os.arch").contains("64") || System.getProperty("os.arch").startsWith("armv8");
 
 	static {
-		boolean isMOEiOS = "iOS".equals(System.getProperty("moe.platform.name"));
 		String vm = System.getProperty("java.runtime.name");
 		if (vm != null && vm.contains("Android Runtime")) {
 			isAndroid = true;
@@ -52,7 +51,7 @@ public class SharedLibraryLoader {
 			isMac = false;
 			is64Bit = false;
 		}
-		if (isMOEiOS || (!isAndroid && !isWindows && !isLinux && !isMac)) {
+		if (!isAndroid && !isWindows && !isLinux && !isMac) {
 			isIos = true;
 			isAndroid = false;
 			isWindows = false;

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/GdxTestActivity.java
Patch:
@@ -47,6 +47,7 @@ public void onCreate (Bundle bundle) {
 		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
 		config.useImmersiveMode = true;
 		config.useRotationVectorSensor = true;
+		config.useGyroscope = true;
 		initialize(test, config);
 	}
 }

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/AntScriptGenerator.java
Patch:
@@ -125,7 +125,7 @@ public void generate (BuildConfig config, BuildTarget... targets) {
 			compile.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\"/>\n");
 		}
 		for (int i = 0; i < libsDirs.size(); i++) {
-			pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" includes=\"" + sharedLibFiles.get(i) + "\"/>\n");
+			pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" erroronmissingdir=\"false\" includes=\"" + sharedLibFiles.get(i) + "\"/>\n");
 		}
 
 		if (config.sharedLibs != null) {

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/AntScriptGenerator.java
Patch:
@@ -125,7 +125,7 @@ public void generate (BuildConfig config, BuildTarget... targets) {
 			compile.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\"/>\n");
 		}
 		for (int i = 0; i < libsDirs.size(); i++) {
-			pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" includes=\"" + sharedLibFiles.get(i) + "\"/>\n");
+			pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" erroronmissingdir=\"false\" includes=\"" + sharedLibFiles.get(i) + "\"/>\n");
 		}
 
 		if (config.sharedLibs != null) {

File: extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/joints/RopeJoint.java
Patch:
@@ -77,7 +77,7 @@ public void setMaxLength (float length) {
 		jniSetMaxLength(addr, length);
 	}
 
-	private native float jniSetMaxLength (long addr, float length); /*
+	private native void jniSetMaxLength (long addr, float length); /*
 		b2RopeJoint* rope = (b2RopeJoint*)addr;
 		rope->SetMaxLength(length);
 	*/

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplicationConfiguration.java
Patch:
@@ -60,6 +60,8 @@ public class GwtApplicationConfiguration {
 	public boolean openURLInNewWindow = true;
 	/** whether to use the accelerometer. default: true **/
 	public boolean useAccelerometer = true;
+	/** whether to use the gyroscope. default: false **/
+	public boolean useGyroscope = false;
 
 	public GwtApplicationConfiguration (int width, int height) {
 		this.width = width;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtPermissions.java
Patch:
@@ -44,6 +44,8 @@ native static public void queryPermission(String permission, GwtPermissionResult
 					}
 				};
 			});
+		} else {
+			result.@com.badlogic.gdx.backends.gwt.GwtPermissions.GwtPermissionResult::granted()();
 		}
 	}-*/;
 

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/GdxTestActivity.java
Patch:
@@ -47,6 +47,7 @@ public void onCreate (Bundle bundle) {
 		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
 		config.useImmersiveMode = true;
 		config.useRotationVectorSensor = true;
+		config.useGyroscope = true;
 		initialize(test, config);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTestWrapper.java
Patch:
@@ -260,19 +260,16 @@ public float getAccelerometerZ () {
 
 		@Override
 		public float getGyroscopeX () {
-			// TODO Auto-generated method stub
 			return input.getGyroscopeX();
 		}
 
 		@Override
 		public float getGyroscopeY () {
-			// TODO Auto-generated method stub
 			return input.getGyroscopeY();
 		}
 
 		@Override
 		public float getGyroscopeZ () {
-			// TODO Auto-generated method stub
 			return input.getGyroscopeZ();
 		}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglNet.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.lwjgl.Sys;
 
-import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Net;
 import com.badlogic.gdx.net.NetJavaImpl;
 import com.badlogic.gdx.net.ServerSocket;
@@ -27,8 +26,6 @@
 import com.badlogic.gdx.net.SocketHints;
 import com.badlogic.gdx.net.NetJavaSocketImpl;
 import com.badlogic.gdx.net.NetJavaServerSocketImpl;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-import com.badlogic.gdx.utils.StreamUtils;
 
 /** LWJGL implementation of the {@link Net} API, it could be reused in other Desktop backends since it doesn't depend on LWJGL.
  * @author acoppes */

File: gdx/src/com/badlogic/gdx/net/HttpStatus.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.badlogic.gdx.net;
 
-import com.badlogic.gdx.Net;
 import com.badlogic.gdx.Net.HttpRequest;
 import com.badlogic.gdx.Net.HttpResponse;
 
@@ -72,7 +71,7 @@ public HttpStatus (int statusCode) {
 	public static final int SC_RESET_CONTENT = 205;
 	/** <tt>206 Partial Content</tt> (HTTP/1.1 - RFC 2616) */
 	public static final int SC_PARTIAL_CONTENT = 206;
-	/** <tt>207 Multi-Status</tt> (WebDAV - RFC 2518) or <tt>207 Partial Update
+	/** <tt>207 Multi-Status</tt> (WebDAV - RFC 2518) or <tt>207 Partial Update
 	 * OK</tt> (HTTP/1.1 - draft-ietf-http-v11-spec-rev-01?) */
 	public static final int SC_MULTI_STATUS = 207;
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/AnimationController.java
Patch:
@@ -357,7 +357,7 @@ protected AnimationDesc animate (final Animation anim, float offset, float durat
 
 	/** Changes the current animation by blending the new on top of the old during the transition time. */
 	protected AnimationDesc animate (final AnimationDesc anim, float transitionTime) {
-		if (current == null)
+		if (current == null || current.loopCount == 0)
 			current = anim;
 		else if (inAction)
 			queue(anim, transitionTime);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/AnimationController.java
Patch:
@@ -357,7 +357,7 @@ protected AnimationDesc animate (final Animation anim, float offset, float durat
 
 	/** Changes the current animation by blending the new on top of the old during the transition time. */
 	protected AnimationDesc animate (final AnimationDesc anim, float transitionTime) {
-		if (current == null)
+		if (current == null || current.loopCount == 0)
 			current = anim;
 		else if (inAction)
 			queue(anim, transitionTime);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/DefaultLwjglInput.java
Patch:
@@ -67,7 +67,7 @@ final public class DefaultLwjglInput implements LwjglInput {
 	int deltaX, deltaY;
 	int pressedKeys = 0;
 	boolean keyJustPressed = false;
-	boolean[] justPressedKeys = new boolean[256];
+	boolean[] justPressedKeys = new boolean[Keys.MAX_KEYCODE + 1];
 	boolean[] justPressedButtons = new boolean[5];
 	boolean justTouched = false;
 	IntSet pressedButtons = new IntSet();

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTInput.java
Patch:
@@ -109,9 +109,9 @@ protected TouchEvent newObject () {
 	boolean touchDown = false;
 	boolean justTouched = false;
 	int keyCount = 0;
-	boolean[] keys = new boolean[256];
+	boolean[] keys = new boolean[Keys.MAX_KEYCODE + 1];
 	boolean keyJustPressed = false;
-	boolean[] justPressedKeys = new boolean[256];
+	boolean[] justPressedKeys = new boolean[Keys.MAX_KEYCODE + 1];
 	boolean[] justPressedButtons = new boolean[5];
 	IntSet pressedButtons = new IntSet();
 	InputProcessor processor;

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/DefaultLwjgl3Input.java
Patch:
@@ -41,7 +41,7 @@ public class DefaultLwjgl3Input implements Lwjgl3Input {
 	boolean justTouched;
 	int pressedKeys;
 	boolean keyJustPressed;
-	boolean[] justPressedKeys = new boolean[256];
+	boolean[] justPressedKeys = new boolean[Keys.MAX_KEYCODE + 1];
 	boolean[] justPressedButtons = new boolean[5];
 	char lastCharacter;
 		

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/DefaultGwtInput.java
Patch:
@@ -45,9 +45,9 @@ public class DefaultGwtInput implements GwtInput {
 	IntSet pressedButtons = new IntSet();
 	int pressedKeyCount = 0;
 	IntSet pressedKeySet = new IntSet();
-	boolean[] pressedKeys = new boolean[256];
+	boolean[] pressedKeys = new boolean[Keys.MAX_KEYCODE + 1];
 	boolean keyJustPressed = false;
-	boolean[] justPressedKeys = new boolean[256];
+	boolean[] justPressedKeys = new boolean[Keys.MAX_KEYCODE + 1];
 	boolean[] justPressedButtons = new boolean[5];
 	InputProcessor processor;
 	long currentEventTimeStamp;

File: gdx/src/com/badlogic/gdx/Input.java
Patch:
@@ -241,11 +241,13 @@ static public class Keys {
 		public static final int F11 = 254;
 		public static final int F12 = 255;
 
+		public static final int MAX_KEYCODE = 255;
+
 		/** @return a human readable representation of the keycode. The returned value can be used in
 		 *         {@link Input.Keys#valueOf(String)} */
 		public static String toString (int keycode) {
 			if (keycode < 0) throw new IllegalArgumentException("keycode cannot be negative, keycode: " + keycode);
-			if (keycode > 255) throw new IllegalArgumentException("keycode cannot be greater than 255, keycode: " + keycode);
+			if (keycode > MAX_KEYCODE) throw new IllegalArgumentException("keycode cannot be greater than 255, keycode: " + keycode);
 			switch (keycode) {
 			// META* variables should not be used with this method.
 			case UNKNOWN:

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/AntScriptGenerator.java
Patch:
@@ -247,7 +247,7 @@ private String generateBuildTargetTemplate (BuildConfig config, BuildTarget targ
 		if (targetFolder == null) targetFolder = target.os.toString().toLowerCase() + (target.isARM ? "arm" : "") + (target.is64Bit ? "64" : "32");
 
 		// replace template vars with proper values
-		template = template.replace("%projectName%", config.sharedLibName + "-" + target.os + "-" + (target.isARM ? "arm" + "-" : "") + (target.is64Bit ? "64" : "32"));
+		template = template.replace("%projectName%", config.sharedLibName + "-" + target.os + "-" + (target.isARM ? "arm" : "") + (target.is64Bit ? "64" : "32"));
 		template = template.replace("%buildDir%", config.buildDir.child(targetFolder).path().replace('\\', '/'));
 		template = template.replace("%libsDir%", "../" + getLibsDirectory(config, target));
 		template = template.replace("%libName%", libName);

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/JniGenSharedLibraryLoader.java
Patch:
@@ -201,12 +201,12 @@ else if (!is64Bit)
 				loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip));
 			else if (!is64Bit) {
 				if (isArm)
-					loaded = loadLibrary("lib" + sharedLibName + "arm"+abi+".so");
+					loaded = loadLibrary("lib" + sharedLibName + "arm" + abi + ".so");
 				else
 					loaded = loadLibrary("lib" + sharedLibName + ".so");
 			} else {
 				if (isArm)
-					loaded = loadLibrary("lib" + sharedLibName + "arm"+abi+"64.so");
+					loaded = loadLibrary("lib" + sharedLibName + "arm" + abi + "64.so");
 				else
 					loaded = loadLibrary("lib" + sharedLibName + "64.so");
 			}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/DefaultAndroidInput.java
Patch:
@@ -648,7 +648,7 @@ public void setCatchKey (int keycode, boolean catchKey) {
 
 	@Override
 	public boolean isCatchKey (int keycode) {
-		return keysToCatch.contains(keyCount);
+		return keysToCatch.contains(keycode);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -827,6 +827,7 @@ public Glyph getGlyph (char ch) {
 		 *           square bracket.
 		 * @param lastGlyph The glyph immediately before this run, or null if this is run is the first on a line of text. */
 		public void getGlyphs (GlyphRun run, CharSequence str, int start, int end, Glyph lastGlyph) {
+			if (end == start) return;
 			boolean markupEnabled = this.markupEnabled;
 			float scaleX = this.scaleX;
 			Array<Glyph> glyphs = run.glyphs;
@@ -836,7 +837,7 @@ public void getGlyphs (GlyphRun run, CharSequence str, int start, int end, Glyph
 			int i = run.xAdvances.size;
 			float[] xAdvances = run.xAdvances.setSize(i + end - start + 1);
 
-			while (start < end) {
+			do {
 				char ch = str.charAt(start++);
 				if (ch == '\r') continue; // Ignore.
 				Glyph glyph = getGlyph(ch);
@@ -856,7 +857,7 @@ public void getGlyphs (GlyphRun run, CharSequence str, int start, int end, Glyph
 
 				// "[[" is an escaped left square bracket, skip second character.
 				if (markupEnabled && ch == '[' && start < end && str.charAt(start) == '[') start++;
-			}
+			} while (start < end);
 			if (lastGlyph != null) {
 				float lastGlyphWidth = lastGlyph.fixedWidth ? lastGlyph.xadvance * scaleX
 					: (lastGlyph.width + lastGlyph.xoffset) * scaleX - padRight;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ProgressBar.java
Patch:
@@ -305,7 +305,8 @@ public void setRange (float min, float max) {
 		this.max = max;
 		if (value < min)
 			setValue(min);
-		else if (value > max) setValue(max);
+		else if (value > max) //
+			setValue(max);
 	}
 
 	public void setStepSize (float stepSize) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ActorGestureListener.java
Patch:
@@ -38,7 +38,7 @@ public class ActorGestureListener implements EventListener {
 
 	/** @see GestureDetector#GestureDetector(com.badlogic.gdx.input.GestureDetector.GestureListener) */
 	public ActorGestureListener () {
-		this(20, 0.4f, 1.1f, 0.15f);
+		this(20, 0.4f, 1.1f, Integer.MAX_VALUE);
 	}
 
 	/** @see GestureDetector#GestureDetector(float, float, float, float, com.badlogic.gdx.input.GestureDetector.GestureListener) */

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -571,7 +571,7 @@ public static boolean intersectRayBounds (Ray ray, BoundingBox box, Vector3 inte
 				}
 			}
 		}
-		// max y
+		// max z
 		if (ray.origin.z >= box.max.z && ray.direction.z < 0) {
 			t = (box.max.z - ray.origin.z) / ray.direction.z;
 			if (t >= 0) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/TiledDrawable.java
Patch:
@@ -65,7 +65,7 @@ public void draw (Batch batch, float x, float y, float width, float height) {
 		float v2 = region.getV2();
 		if (remainingX > 0) {
 			// Right edge.
-			float u2 = u + remainingX / texture.getWidth();
+			float u2 = u + remainingX / (texture.getWidth() * scale);
 			float v = region.getV();
 			y = startY;
 			for (int ii = 0; ii < fullY; ii++) {
@@ -74,14 +74,14 @@ public void draw (Batch batch, float x, float y, float width, float height) {
 			}
 			// Upper right corner.
 			if (remainingY > 0) {
-				v = v2 - remainingY / texture.getHeight();
+				v = v2 - remainingY / (texture.getHeight() * scale);
 				batch.draw(texture, x, y, remainingX, remainingY, u, v2, u2, v);
 			}
 		}
 		if (remainingY > 0) {
 			// Top edge.
 			float u2 = region.getU2();
-			float v = v2 - remainingY / texture.getHeight();
+			float v = v2 - remainingY / (texture.getHeight() * scale);
 			x = startX;
 			for (int i = 0; i < fullX; i++) {
 				batch.draw(texture, x, y, regionWidth, remainingY, u, v2, u2, v);

File: gdx/src/com/badlogic/gdx/utils/Pool.java
Patch:
@@ -90,7 +90,7 @@ public void freeAll (Array<T> objects) {
 		if (objects == null) throw new IllegalArgumentException("objects cannot be null.");
 		Array<T> freeObjects = this.freeObjects;
 		int max = this.max;
-		for (int i = 0; i < objects.size; i++) {
+		for (int i = 0, n = objects.size; i < n; i++) {
 			T object = objects.get(i);
 			if (object == null) continue;
 			if (freeObjects.size < max) freeObjects.add(object);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLSurfaceView20.java
Patch:
@@ -22,6 +22,7 @@
 import android.graphics.PixelFormat;
 import android.opengl.GLSurfaceView;
 import android.os.SystemClock;
+import android.text.InputType;
 import android.util.Log;
 import android.view.KeyCharacterMap;
 import android.view.KeyEvent;
@@ -77,6 +78,7 @@ public InputConnection onCreateInputConnection (EditorInfo outAttrs) {
 		// add this line, the IME can show the selectable words when use chinese input method editor.
 		if (outAttrs != null) {
 			outAttrs.imeOptions = outAttrs.imeOptions | EditorInfo.IME_FLAG_NO_EXTRACT_UI;
+			outAttrs.inputType = InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD | InputType.TYPE_NULL;
 		}
 
 		BaseInputConnection connection = new BaseInputConnection(this, false) {

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosrobovm/IOSGLES20.java
Patch:
@@ -159,9 +159,9 @@ public IOSGLES20() {
 	
 	public native int glGenTexture();
 
-	public native String glGetActiveAttrib ( int program, int index, IntBuffer size, Buffer type );
+	public native String glGetActiveAttrib ( int program, int index, IntBuffer size, IntBuffer type );
 
-	public native String glGetActiveUniform ( int program, int index, IntBuffer size, Buffer type );
+	public native String glGetActiveUniform ( int program, int index, IntBuffer size, IntBuffer type );
 
 	public native void glGetAttachedShaders ( int program, int maxcount, Buffer count, IntBuffer shaders );
 

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGLES20.java
Patch:
@@ -159,9 +159,9 @@ public IOSGLES20() {
 	
 	public native int glGenTexture();
 
-	public native String glGetActiveAttrib ( int program, int index, IntBuffer size, Buffer type );
+	public native String glGetActiveAttrib ( int program, int index, IntBuffer size, IntBuffer type );
 
-	public native String glGetActiveUniform ( int program, int index, IntBuffer size, Buffer type );
+	public native String glGetActiveUniform ( int program, int index, IntBuffer size, IntBuffer type );
 
 	public native void glGetAttachedShaders ( int program, int maxcount, Buffer count, IntBuffer shaders );
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20Debug.java
Patch:
@@ -536,15 +536,15 @@ public void glGenRenderbuffers (int n, IntBuffer renderbuffers) {
 	}
 
 	@Override
-	public String glGetActiveAttrib (int program, int index, IntBuffer size, Buffer type) {
+	public String glGetActiveAttrib (int program, int index, IntBuffer size, IntBuffer type) {
 		 
 		String attrib = super.glGetActiveAttrib(program, index, size, type);
 		checkError();
 		return attrib;
 	}
 
 	@Override
-	public String glGetActiveUniform (int program, int index, IntBuffer size, Buffer type) {
+	public String glGetActiveUniform (int program, int index, IntBuffer size, IntBuffer type) {
 		 
 		String uniform = super.glGetActiveUniform(program, index, size, type);
 		checkError();

File: gdx/src/com/badlogic/gdx/graphics/GL20.java
Patch:
@@ -498,10 +498,10 @@ public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, in
 	public void glGenRenderbuffers (int n, IntBuffer renderbuffers);
 
 	// deviates
-	public String glGetActiveAttrib (int program, int index, IntBuffer size, Buffer type);
+	public String glGetActiveAttrib (int program, int index, IntBuffer size, IntBuffer type);
 
 	// deviates
-	public String glGetActiveUniform (int program, int index, IntBuffer size, Buffer type);
+	public String glGetActiveUniform (int program, int index, IntBuffer size, IntBuffer type);
 
 	public void glGetAttachedShaders (int program, int maxcount, Buffer count, IntBuffer shaders);
 

File: gdx/src/com/badlogic/gdx/graphics/profiling/GL20Interceptor.java
Patch:
@@ -614,15 +614,15 @@ public void glGenRenderbuffers (int n, IntBuffer renderbuffers) {
 	}
 
 	@Override
-	public String glGetActiveAttrib (int program, int index, IntBuffer size, Buffer type) {
+	public String glGetActiveAttrib (int program, int index, IntBuffer size, IntBuffer type) {
 		calls++;
 		String result = gl20.glGetActiveAttrib(program, index, size, type);
 		check();
 		return result;
 	}
 
 	@Override
-	public String glGetActiveUniform (int program, int index, IntBuffer size, Buffer type) {
+	public String glGetActiveUniform (int program, int index, IntBuffer size, IntBuffer type) {
 		calls++;
 		String result = gl20.glGetActiveUniform(program, index, size, type);
 		check();

File: gdx/src/com/badlogic/gdx/graphics/profiling/GL30Interceptor.java
Patch:
@@ -616,15 +616,15 @@ public void glGenRenderbuffers (int n, IntBuffer renderbuffers) {
 	}
 
 	@Override
-	public String glGetActiveAttrib (int program, int index, IntBuffer size, Buffer type) {
+	public String glGetActiveAttrib (int program, int index, IntBuffer size, IntBuffer type) {
 		calls++;
 		String result = gl30.glGetActiveAttrib(program, index, size, type);
 		check();
 		return result;
 	}
 
 	@Override
-	public String glGetActiveUniform (int program, int index, IntBuffer size, Buffer type) {
+	public String glGetActiveUniform (int program, int index, IntBuffer size, IntBuffer type) {
 		calls++;
 		String result = gl30.glGetActiveUniform(program, index, size, type);
 		check();

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -484,7 +484,7 @@ public ArrayIterator<T> iterator () {
 	 * If {@link Collections#allocateIterators} is false, the same iterable instance is returned each time this method is called.
 	 * Use the {@link Predicate.PredicateIterable} constructor for nested or multithreaded iteration. */
 	public Iterable<T> select (Predicate<T> predicate) {
-		if (Collections.allocateIterators) new Predicate.PredicateIterable<T>(this, predicate);
+		if (Collections.allocateIterators) return new Predicate.PredicateIterable<T>(this, predicate);
 		if (predicateIterable == null)
 			predicateIterable = new Predicate.PredicateIterable<T>(this, predicate);
 		else

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -225,6 +225,7 @@ public class GdxTests {
 		ShaderTest.class,
 		ShadowMappingTest.class,
 		ShapeRendererTest.class,
+		ShapeRendererAlphaTest.class,
 		SimpleAnimationTest.class,
 		SimpleDecalTest.class,
 		SimpleStageCullingTest.class,

File: gdx/src/com/badlogic/gdx/graphics/g2d/GlyphLayout.java
Patch:
@@ -181,6 +181,7 @@ else if (targetWidth <= fontData.spaceXadvance * 3) //
 							// Glyph fits.
 							x += xAdvances[i];
 							run.width += xAdvances[i];
+							width = Math.max(width, x + glyphWidth);
 							continue;
 						}
 

File: gdx/src/com/badlogic/gdx/utils/FloatArray.java
Patch:
@@ -195,7 +195,7 @@ public int indexOf (float value) {
 		return -1;
 	}
 
-	public int lastIndexOf (char value) {
+	public int lastIndexOf (float value) {
 		float[] items = this.items;
 		for (int i = size - 1; i >= 0; i--)
 			if (items[i] == value) return i;

File: gdx/src/com/badlogic/gdx/input/GestureDetector.java
Patch:
@@ -272,7 +272,7 @@ private boolean isWithinTapRectangle (float x, float y, float centerX, float cen
 		return Math.abs(x - centerX) < tapRectangleWidth && Math.abs(y - centerY) < tapRectangleHeight;
 	}
 
-	/** The tap square will not longer be used for the current touch. */
+	/** The tap square will no longer be used for the current touch. */
 	public void invalidateTapSquare () {
 		inTapRectangle = false;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ActorGestureListener.java
Patch:
@@ -112,6 +112,8 @@ public boolean handle (Event e) {
 			detector.touchDown(event.getStageX(), event.getStageY(), event.getPointer(), event.getButton());
 			actor.stageToLocalCoordinates(tmpCoords.set(event.getStageX(), event.getStageY()));
 			touchDown(event, tmpCoords.x, tmpCoords.y, event.getPointer(), event.getButton());
+			if (event.getTouchFocus()) event.getStage().addTouchFocus(this, event.getListenerActor(), event.getTarget(),
+				event.getPointer(), event.getButton());
 			return true;
 		case touchUp:
 			if (event.isTouchFocusCancel()) {

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -478,8 +478,7 @@ public FreeTypeBitmapFontData generateData (FreeTypeFontParameter parameter, Fre
 	}
 
 	/** @return null if glyph was not found. */
-	@Null
-	protected Glyph createGlyph (char c, FreeTypeBitmapFontData data, FreeTypeFontParameter parameter, Stroker stroker,
+	protected @Null Glyph createGlyph (char c, FreeTypeBitmapFontData data, FreeTypeFontParameter parameter, Stroker stroker,
 		float baseLine, PixmapPacker packer) {
 
 		boolean missing = face.getCharIndex(c) == 0 && c != 0;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Action.java
Patch:
@@ -31,7 +31,7 @@ abstract public class Action implements Poolable {
 	/** The actor this action targets, or null if a target has not been set. */
 	protected Actor target;
 
-	@Null private Pool pool;
+	private @Null Pool pool;
 
 	/** Updates the action based on time. Typically this is called each frame by {@link Actor#act(float)}.
 	 * @param delta Time in seconds since the last frame.
@@ -93,8 +93,7 @@ public void reset () {
 		restart();
 	}
 
-	@Null
-	public Pool getPool () {
+	public @Null Pool getPool () {
 		return pool;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/AlphaAction.java
Patch:
@@ -25,7 +25,7 @@
  * @author Nathan Sweet */
 public class AlphaAction extends TemporalAction {
 	private float start, end;
-	@Null private Color color;
+	private @Null Color color;
 
 	protected void begin () {
 		if (color == null) color = target.getColor();
@@ -46,8 +46,7 @@ public void reset () {
 		color = null;
 	}
 
-	@Null
-	public Color getColor () {
+	public @Null Color getColor () {
 		return color;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/ColorAction.java
Patch:
@@ -25,7 +25,7 @@
  * @author Nathan Sweet */
 public class ColorAction extends TemporalAction {
 	private float startR, startG, startB, startA;
-	@Null private Color color;
+	private @Null Color color;
 	private final Color end = new Color();
 
 	protected void begin () {
@@ -55,8 +55,7 @@ public void reset () {
 		color = null;
 	}
 
-	@Null
-	public Color getColor () {
+	public @Null Color getColor () {
 		return color;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/TemporalAction.java
Patch:
@@ -25,7 +25,7 @@
  * @author Nathan Sweet */
 abstract public class TemporalAction extends Action {
 	private float duration, time;
-	@Null private Interpolation interpolation;
+	private @Null Interpolation interpolation;
 	private boolean reverse, began, complete;
 
 	public TemporalAction () {
@@ -111,8 +111,7 @@ public void setDuration (float duration) {
 		this.duration = duration;
 	}
 
-	@Null
-	public Interpolation getInterpolation () {
+	public @Null Interpolation getInterpolation () {
 		return interpolation;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -205,8 +205,7 @@ public ButtonStyle getStyle () {
 	}
 
 	/** @return May be null. */
-	@Null
-	public ButtonGroup getButtonGroup () {
+	public @Null ButtonGroup getButtonGroup () {
 		return buttonGroup;
 	}
 
@@ -292,7 +291,7 @@ public float getMinHeight () {
 	 * @author mzechner */
 	static public class ButtonStyle {
 		/** Optional. */
-		@Null public Drawable up, down, over, focused, checked, checkedOver, checkedFocused, disabled;
+		public @Null Drawable up, down, over, focused, checked, checkedOver, checkedFocused, disabled;
 		/** Optional. */
 		public float pressedOffsetX, pressedOffsetY, unpressedOffsetX, unpressedOffsetY, checkedOffsetX, checkedOffsetY;
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ButtonGroup.java
Patch:
@@ -127,8 +127,7 @@ public void uncheckAll () {
 	}
 
 	/** @return The first checked button, or null. */
-	@Null
-	public T getChecked () {
+	public @Null T getChecked () {
 		if (checkedButtons.size > 0) return checkedButtons.get(0);
 		return null;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/CheckBox.java
Patch:
@@ -95,7 +95,7 @@ public Cell getImageCell () {
 	static public class CheckBoxStyle extends TextButtonStyle {
 		public Drawable checkboxOn, checkboxOff;
 		/** Optional. */
-		@Null public Drawable checkboxOnOver, checkboxOver, checkboxOnDisabled, checkboxOffDisabled;
+		public @Null Drawable checkboxOnOver, checkboxOver, checkboxOnDisabled, checkboxOffDisabled;
 
 		public CheckBoxStyle () {
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Dialog.java
Patch:
@@ -42,7 +42,7 @@
  * @author Nathan Sweet */
 public class Dialog extends Window {
 	Table contentTable, buttonTable;
-	@Null private Skin skin;
+	private @Null Skin skin;
 	ObjectMap<Actor, Object> values = new ObjectMap();
 	boolean cancelHide;
 	Actor previousKeyboardFocus, previousScrollFocus;
@@ -254,7 +254,7 @@ public void setObject (Actor actor, @Null Object object) {
 
 	/** If this key is pressed, {@link #result(Object)} is called with the specified object.
 	 * @see Keys */
-	public Dialog key (final int keycode, @Null final Object object) {
+	public Dialog key (final int keycode, final @Null Object object) {
 		addListener(new InputListener() {
 			public boolean keyDown (InputEvent event, int keycode2) {
 				if (keycode == keycode2) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Image.java
Patch:
@@ -152,8 +152,7 @@ public void setDrawable (@Null Drawable drawable) {
 	}
 
 	/** @return May be null. */
-	@Null
-	public Drawable getDrawable () {
+	public @Null Drawable getDrawable () {
 		return drawable;
 	}
 
@@ -167,7 +166,7 @@ public void setAlign (int align) {
 		this.align = align;
 		invalidate();
 	}
-	
+
 	public int getAlign () {
 		return align;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ImageButton.java
Patch:
@@ -114,13 +114,13 @@ public String toString () {
 	 * @author Nathan Sweet */
 	static public class ImageButtonStyle extends ButtonStyle {
 		/** Optional. */
-		@Null public Drawable imageUp, imageDown, imageOver, imageChecked, imageCheckedOver, imageDisabled;
+		public @Null Drawable imageUp, imageDown, imageOver, imageChecked, imageCheckedOver, imageDisabled;
 
 		public ImageButtonStyle () {
 		}
 
-		public ImageButtonStyle (@Null Drawable up, @Null Drawable down, @Null Drawable checked,
-			@Null Drawable imageUp, @Null Drawable imageDown, @Null Drawable imageChecked) {
+		public ImageButtonStyle (@Null Drawable up, @Null Drawable down, @Null Drawable checked, @Null Drawable imageUp,
+			@Null Drawable imageDown, @Null Drawable imageChecked) {
 			super(up, down, checked);
 			this.imageUp = imageUp;
 			this.imageDown = imageDown;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ImageTextButton.java
Patch:
@@ -160,7 +160,7 @@ public String toString () {
 	 * @author Nathan Sweet */
 	static public class ImageTextButtonStyle extends TextButtonStyle {
 		/** Optional. */
-		@Null public Drawable imageUp, imageDown, imageOver, imageChecked, imageCheckedOver, imageDisabled;
+		public @Null Drawable imageUp, imageDown, imageOver, imageChecked, imageCheckedOver, imageDisabled;
 
 		public ImageTextButtonStyle () {
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -48,7 +48,7 @@ public class Label extends Widget {
 	private boolean prefSizeInvalid = true;
 	private float fontScaleX = 1, fontScaleY = 1;
 	private boolean fontScaleChanged = false;
-	@Null private String ellipsis;
+	private @Null String ellipsis;
 
 	public Label (@Null CharSequence text, Skin skin) {
 		this(text, skin.get(LabelStyle.class));
@@ -372,9 +372,9 @@ public String toString () {
 	static public class LabelStyle {
 		public BitmapFont font;
 		/** Optional. */
-		@Null public Color fontColor;
+		public @Null Color fontColor;
 		/** Optional. */
-		@Null public Drawable background;
+		public @Null Drawable background;
 
 		public LabelStyle () {
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -107,8 +107,7 @@ public SliderStyle getStyle () {
 		return (SliderStyle)super.getStyle();
 	}
 
-	@Null
-	protected Drawable getKnobDrawable () {
+	protected @Null Drawable getKnobDrawable () {
 		SliderStyle style = getStyle();
 		return (disabled && style.disabledKnob != null) ? style.disabledKnob
 			: (isDragging() && style.knobDown != null) ? style.knobDown
@@ -189,7 +188,7 @@ public void setVisualInterpolationInverse (Interpolation interpolation) {
 	 * @author Nathan Sweet */
 	static public class SliderStyle extends ProgressBarStyle {
 		/** Optional. */
-		@Null public Drawable knobOver, knobDown;
+		public @Null Drawable knobOver, knobDown;
 
 		public SliderStyle () {
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -45,7 +45,7 @@
  * @author Nathan Sweet */
 public class SplitPane extends WidgetGroup {
 	SplitPaneStyle style;
-	@Null private Actor firstWidget, secondWidget;
+	private @Null Actor firstWidget, secondWidget;
 	boolean vertical;
 	float splitAmount = 0.5f, minAmount, maxAmount = 1;
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java
Patch:
@@ -119,12 +119,12 @@ public String toString () {
 	static public class TextButtonStyle extends ButtonStyle {
 		public BitmapFont font;
 		/** Optional. */
-		@Null public Color fontColor, downFontColor, overFontColor, checkedFontColor, checkedOverFontColor, disabledFontColor;
+		public @Null Color fontColor, downFontColor, overFontColor, checkedFontColor, checkedOverFontColor, disabledFontColor;
 
 		public TextButtonStyle () {
 		}
 
-		public TextButtonStyle (@Null Drawable up, @Null Drawable down, @Null  Drawable checked, @Null BitmapFont font) {
+		public TextButtonStyle (@Null Drawable up, @Null Drawable down, @Null Drawable checked, @Null BitmapFont font) {
 			super(up, down, checked);
 			this.font = font;
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextTooltip.java
Patch:
@@ -72,7 +72,7 @@ public void setStyle (TextTooltipStyle style) {
 	static public class TextTooltipStyle {
 		public LabelStyle label;
 		/** Optional. */
-		@Null public Drawable background;
+		public @Null Drawable background;
 		/** Optional, 0 means don't wrap. */
 		public float wrapWidth;
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tooltip.java
Patch:
@@ -65,8 +65,7 @@ public void setActor (@Null T contents) {
 		container.setActor(contents);
 	}
 
-	@Null
-	public T getActor () {
+	public @Null T getActor () {
 		return container.getActor();
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Touchpad.java
Patch:
@@ -226,10 +226,10 @@ public float getKnobPercentY () {
 	 * @author Josh Street */
 	public static class TouchpadStyle {
 		/** Stretched in both directions. Optional. */
-		@Null public Drawable background;
+		public @Null Drawable background;
 
 		/** Optional. */
-		@Null public Drawable knob;
+		public @Null Drawable knob;
 
 		public TouchpadStyle () {
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/FocusListener.java
Patch:
@@ -76,8 +76,7 @@ public void setType (Type focusType) {
 
 		/** The actor related to the event. When focus is lost, this is the new actor being focused, or null. When focus is gained,
 		 * this is the previous actor that was focused, or null. */
-		@Null
-		public Actor getRelatedActor () {
+		public @Null Actor getRelatedActor () {
 			return relatedActor;
 		}
 

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -503,8 +503,7 @@ public void truncate (int newSize) {
 	}
 
 	/** Returns a random item from the array, or null if the array is empty. */
-	@Null
-	public T random () {
+	public @Null T random () {
 		if (size == 0) return null;
 		return items[MathUtils.random(0, size - 1)];
 	}

File: gdx/src/com/badlogic/gdx/utils/AtomicQueue.java
Patch:
@@ -51,8 +51,7 @@ public boolean put (@Null T value) {
 		return true;
 	}
 
-	@Null
-	public T poll () {
+	public @Null T poll () {
 		int read = readIndex.get();
 		int write = writeIndex.get();
 		if (read == write) return null;

File: gdx/src/com/badlogic/gdx/utils/DataInput.java
Patch:
@@ -54,8 +54,7 @@ public int readInt (boolean optimizePositive) throws IOException {
 
 	/** Reads the length and string of UTF8 characters, or null.
 	 * @return May be null. */
-	@Null
-	public String readString () throws IOException {
+	public @Null String readString () throws IOException {
 		int charCount = readInt(true);
 		switch (charCount) {
 		case 0:

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -267,8 +267,7 @@ public boolean containsKey (K key) {
 
 	/** Returns the key for the specified value, or null if it is not in the map. Note this traverses the entire map and compares
 	 * every value, which may be an expensive operation. */
-	@Null
-	public K findKey (float value) {
+	public @Null K findKey (float value) {
 		K[] keyTable = this.keyTable;
 		float[] valueTable = this.valueTable;
 		for (int i = valueTable.length - 1; i >= 0; i--) {

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -263,8 +263,7 @@ public boolean containsKey (K key) {
 
 	/** Returns the key for the specified value, or null if it is not in the map. Note this traverses the entire map and compares
 	 * every value, which may be an expensive operation. */
-	@Null
-	public K findKey (int value) {
+	public @Null K findKey (int value) {
 		K[] keyTable = this.keyTable;
 		int[] valueTable = this.valueTable;
 		for (int i = valueTable.length - 1; i >= 0; i--) {

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -243,8 +243,7 @@ public boolean contains (T key) {
 		return locateKey(key) >= 0;
 	}
 
-	@Null
-	public T get (T key) {
+	public @Null T get (T key) {
 		int i = locateKey(key);
 		return i < 0 ? null : keyTable[i];
 	}

File: gdx/src/com/badlogic/gdx/utils/ReflectionPool.java
Patch:
@@ -45,8 +45,7 @@ public ReflectionPool (Class<T> type, int initialCapacity, int max, boolean preF
 			throw new RuntimeException("Class cannot be created (missing no-arg constructor): " + type.getName());
 	}
 
-	@Null
-	private Constructor findConstructor (Class<T> type) {
+	private @Null Constructor findConstructor (Class<T> type) {
 		try {
 			return ClassReflection.getConstructor(type, (Class[])null);
 		} catch (Exception ex1) {

File: gdx/src/com/badlogic/gdx/utils/SortedIntList.java
Patch:
@@ -35,8 +35,7 @@ public SortedIntList () {
 	 * @param index Index of the element
 	 * @param value Element to insert
 	 * @return Element replaced by newly inserted element, null if nothing was replaced */
-	@Null
-	public E insert (int index, E value) {
+	public @Null E insert (int index, E value) {
 		if (first != null) {
 			Node<E> c = first;
 			// iterate to the right until we can't move any further because the next number is bigger than index

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -532,6 +532,7 @@ public AtlasRegion (AtlasRegion region) {
 			rotate = region.rotate;
 			degrees = region.degrees;
 			splits = region.splits;
+			pads = region.pads;
 		}
 
 		public AtlasRegion (TextureRegion region) {

File: gdx/src/com/badlogic/gdx/graphics/FPSLogger.java
Patch:
@@ -40,7 +40,7 @@ public FPSLogger (int bound) {
 	/** Logs the current frames per second to the console. */
 	public void log () {
 		final long nanoTime = TimeUtils.nanoTime();
-		if (nanoTime - startTime > 1_000_000_000) /* 1,000,000,000ns == one second */ {
+		if (nanoTime - startTime > 1000000000) /* 1,000,000,000ns == one second */ {
 			final int fps = Gdx.graphics.getFramesPerSecond();
 			if (fps < bound) {
 				Gdx.app.log("FPSLogger", "fps: " + fps);

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/DefaultGwtInput.java
Patch:
@@ -59,7 +59,7 @@ public class DefaultGwtInput implements GwtInput {
 	public DefaultGwtInput (CanvasElement canvas, GwtApplicationConfiguration config) {
 		this.canvas = canvas;
 		this.config = config;
-		if (config.useAccelerometer) {
+		if (config.useAccelerometer && GwtFeaturePolicy.allowsFeature(GwtAccelerometer.PERMISSION)) {
 			if (GwtApplication.agentInfo().isFirefox()) {
 				setupAccelerometer();
 			} else {
@@ -351,7 +351,8 @@ public InputProcessor getInputProcessor () {
 
 	@Override
 	public boolean isPeripheralAvailable (Peripheral peripheral) {
-		if (peripheral == Peripheral.Accelerometer) return GwtAccelerometer.isSupported() && isAccelerometerPresent();
+		if (peripheral == Peripheral.Accelerometer) return GwtAccelerometer.isSupported() && isAccelerometerPresent()
+				&& GwtFeaturePolicy.allowsFeature(GwtAccelerometer.PERMISSION);
 		if (peripheral == Peripheral.Compass) return false;
 		if (peripheral == Peripheral.HardwareKeyboard) return !GwtApplication.isMobileDevice();
 		if (peripheral == Peripheral.MultitouchScreen) return isTouchScreen();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -106,7 +106,7 @@ public class TextField extends Widget implements Disableable {
 	protected float fontOffset, textHeight, textOffset;
 	float renderOffset;
 	private int visibleTextStart, visibleTextEnd;
-	private int maxLength = 0;
+	private int maxLength;
 
 	boolean focused;
 	boolean cursorOn;
@@ -1064,7 +1064,7 @@ public boolean keyTyped (InputEvent event, char character) {
 					if (add && !remove) {
 						// Character may be added to the text.
 						if (!enter && filter != null && !filter.acceptChar(TextField.this, character)) return true;
-						if (!withinMaxLength(text.length())) return true;
+						if (!withinMaxLength(text.length() - (hasSelection ? Math.abs(cursor - selectionStart) : 0))) return true;
 						if (hasSelection) cursor = delete(false);
 						String insertion = enter ? "\n" : String.valueOf(character);
 						text = insert(cursor++, insertion, text);

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/Mp3.java
Patch:
@@ -36,7 +36,7 @@ static public class Music extends OpenALMusic {
 		private OutputBuffer outputBuffer;
 		private MP3Decoder decoder;
 
-		public Music (OpenALAudio audio, FileHandle file) {
+		public Music (OpenALLwjgl3Audio audio, FileHandle file) {
 			super(audio, file);
 			if (audio.noDevice) return;
 			bitstream = new Bitstream(file.read());
@@ -104,7 +104,7 @@ public void reset () {
 	static public class Sound extends OpenALSound {
 		// Note: This uses a slightly modified version of JLayer.
 
-		public Sound (OpenALAudio audio, FileHandle file) {
+		public Sound (OpenALLwjgl3Audio audio, FileHandle file) {
 			super(audio);
 			if (audio.noDevice) return;
 			ByteArrayOutputStream output = new ByteArrayOutputStream(4096);

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/Ogg.java
Patch:
@@ -27,7 +27,7 @@ static public class Music extends OpenALMusic {
 		private OggInputStream input;
 		private OggInputStream previousInput;
 
-		public Music (OpenALAudio audio, FileHandle file) {
+		public Music (OpenALLwjgl3Audio audio, FileHandle file) {
 			super(audio, file);
 			if (audio.noDevice) return;
 			input = new OggInputStream(file.read());
@@ -58,7 +58,7 @@ protected void loop () {
 	}
 
 	static public class Sound extends OpenALSound {
-		public Sound (OpenALAudio audio, FileHandle file) {
+		public Sound (OpenALLwjgl3Audio audio, FileHandle file) {
 			super(audio);
 			if (audio.noDevice) return;
 			OggInputStream input = null;

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALAudioDevice.java
Patch:
@@ -32,7 +32,7 @@
 public class OpenALAudioDevice implements AudioDevice {
 	static private final int bytesPerSample = 2;
 
-	private final OpenALAudio audio;
+	private final OpenALLwjgl3Audio audio;
 	private final int channels;
 	private IntBuffer buffers;
 	private int sourceID = -1;
@@ -45,7 +45,7 @@ public class OpenALAudioDevice implements AudioDevice {
 	private final int bufferCount;
 	private final ByteBuffer tempBuffer;
 
-	public OpenALAudioDevice (OpenALAudio audio, int sampleRate, boolean isMono, int bufferSize, int bufferCount) {
+	public OpenALAudioDevice (OpenALLwjgl3Audio audio, int sampleRate, boolean isMono, int bufferSize, int bufferCount) {
 		this.audio = audio;
 		channels = isMono ? 1 : 2;
 		this.bufferSize = bufferSize;

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALMusic.java
Patch:
@@ -42,7 +42,7 @@ public abstract class OpenALMusic implements Music {
 
 	private FloatArray renderedSecondsQueue = new FloatArray(bufferCount);
 
-	private final OpenALAudio audio;
+	private final OpenALLwjgl3Audio audio;
 	private IntBuffer buffers;
 	private int sourceID = -1;
 	private int format, sampleRate;
@@ -55,7 +55,7 @@ public abstract class OpenALMusic implements Music {
 
 	private OnCompletionListener onCompletionListener;
 
-	public OpenALMusic (OpenALAudio audio, FileHandle file) {
+	public OpenALMusic (OpenALLwjgl3Audio audio, FileHandle file) {
 		this.audio = audio;
 		this.file = file;
 		this.onCompletionListener = null;

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALSound.java
Patch:
@@ -26,10 +26,10 @@
 /** @author Nathan Sweet */
 public class OpenALSound implements Sound {
 	private int bufferID = -1;
-	private final OpenALAudio audio;
+	private final OpenALLwjgl3Audio audio;
 	private float duration;
 
-	public OpenALSound (OpenALAudio audio) {
+	public OpenALSound (OpenALLwjgl3Audio audio) {
 		this.audio = audio;
 	}
 

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/Wav.java
Patch:
@@ -28,7 +28,7 @@ public class Wav {
 	static public class Music extends OpenALMusic {
 		private WavInputStream input;
 
-		public Music (OpenALAudio audio, FileHandle file) {
+		public Music (OpenALLwjgl3Audio audio, FileHandle file) {
 			super(audio, file);
 			input = new WavInputStream(file);
 			if (audio.noDevice) return;
@@ -54,7 +54,7 @@ public void reset () {
 	}
 
 	static public class Sound extends OpenALSound {
-		public Sound (OpenALAudio audio, FileHandle file) {
+		public Sound (OpenALLwjgl3Audio audio, FileHandle file) {
 			super(audio);
 			if (audio.noDevice) return;
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -300,7 +300,7 @@ private Drawable getBackgroundDrawable () {
 
 	public void draw (Batch batch, float parentAlpha) {
 		boolean focused = hasKeyboardFocus();
-		if (focused != this.focused) {
+		if (focused != this.focused || (focused && !blinkTask.isScheduled())) {
 			this.focused = focused;
 			blinkTask.cancel();
 			cursorOn = focused;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -33,15 +33,15 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new CollectionsTest();
+		GdxTest test = new DragAndDropTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;
 //		config.height = 241;
 		config.width = 960;
 		config.height = 600;
-		config.width = 1920;
-		config.height = 1080;
+//		config.width = 1920;
+//		config.height = 1080;
 //		config.setFromDisplayMode(LwjglApplicationConfiguration.getDesktopDisplayMode());
 		new LwjglApplication(test, config);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/DragAndDropTest.java
Patch:
@@ -65,7 +65,7 @@ public Payload dragStart (InputEvent event, float x, float y, int pointer) {
 				Payload payload = new Payload();
 				payload.setObject("Some payload!");
 
-				payload.setDragActor(new Label("Some payload!", skin));
+				payload.setDragActor(getActor());
 
 				Label validLabel = new Label("Some payload!", skin);
 				validLabel.setColor(0, 1, 0, 1);

File: gdx/src/com/badlogic/gdx/utils/ObjectMap.java
Patch:
@@ -377,7 +377,7 @@ public String toString () {
 		return toString(", ", true);
 	}
 
-	private String toString (String separator, boolean braces) {
+	protected String toString (String separator, boolean braces) {
 		if (size == 0) return braces ? "{}" : "";
 		java.lang.StringBuilder buffer = new java.lang.StringBuilder(32);
 		if (braces) buffer.append('{');

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20.java
Patch:
@@ -119,7 +119,7 @@ public Int16Array copy (ShortBuffer buffer) {
 		} else {
 			ensureCapacity(buffer);
 			for (int i = buffer.position(), j = 0; i < buffer.limit(); i++, j++) {
-				shortBuffer.set(j, buffer.get(i));
+				shortBuffer.set(j, (buffer.get(i) & 0xFFFF));
 			}
 			return shortBuffer.subarray(0, buffer.remaining());
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -105,6 +105,7 @@ public class GdxTests {
 		Basic3DSceneTest.class,
 		Basic3DTest.class,
 		Benchmark3DTest.class,
+		BigMeshTest.class,
 		BitmapFontAlignmentTest.class,
 		BitmapFontDistanceFieldTest.class,
 		BitmapFontFlipTest.class,

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplicationBase.java
Patch:
@@ -38,7 +38,7 @@
  * @author davebaol */
 public interface AndroidApplicationBase extends Application {
 
-	static final int MINIMUM_SDK = 9;
+	static final int MINIMUM_SDK = 14;
 
 	/** The application or activity context
 	 * 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidDaydream.java
Patch:
@@ -176,7 +176,7 @@ protected void createWakeLock (boolean use) {
 	}
 
 	protected void hideStatusBar (AndroidApplicationConfiguration config) {
-		if (!config.hideStatusBar || getVersion() < 11) return;
+		if (!config.hideStatusBar) return;
 
 		View rootView = getWindow().getDecorView();
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidMultiTouchHandler.java
Patch:
@@ -47,7 +47,7 @@ public void onTouch (MotionEvent event, AndroidInput input) {
 				input.realId[realPointerIndex] = pointerId;
 				x = (int)event.getX(pointerIndex);
 				y = (int)event.getY(pointerIndex);
-				if (android.os.Build.VERSION.SDK_INT >= 14) button = toGdxButton(event.getButtonState());
+				button = toGdxButton(event.getButtonState());
 				if (button != -1) postTouchEvent(input, TouchEvent.TOUCH_DOWN, x, y, realPointerIndex, button, timeStamp);
 				input.touchX[realPointerIndex] = x;
 				input.touchY[realPointerIndex] = y;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -246,7 +246,7 @@ public boolean isKeyJustPressed (int key) {
 		if (key == Input.Keys.ANY_KEY) {
 			return keyJustPressed;
 		}
-		if (key < 0 || key > 255) {
+		if (key < 0 || key >= justPressedKeys.length) {
 			return false;
 		}
 		return justPressedKeys[key];

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Input.java
Patch:
@@ -325,7 +325,7 @@ public boolean isKeyJustPressed(int key) {
 		if (key == Input.Keys.ANY_KEY) {
 			return keyJustPressed;
 		}
-		if (key < 0 || key > 256) {
+		if (key < 0 || key >= justPressedKeys.length) {
 			return false;
 		}
 		return justPressedKeys[key];

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3WindowConfiguration.java
Patch:
@@ -126,8 +126,8 @@ public void setAutoIconify (boolean autoIconify) {
 	}
 
 	/**
-	 * Sets the position of the window in windowed mode on the
-	 * primary monitor. Default -1 for both coordinates for centered.
+	 * Sets the position of the window in windowed mode.
+	 * Default -1 for both coordinates for centered on primary monitor.
 	 */
 	public void setWindowPosition(int x, int y) {
 		windowX = x;

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/gen/ReflectionCacheSourceCreator.java
Patch:
@@ -225,9 +225,10 @@ public int compare (MethodStub o1, MethodStub o2) {
 	}
 
 	private void out (String message, int nesting) {
+		String nestedMsg = "";
 		for (int i = 0; i < nesting; i++)
-			System.out.print("  ");
-		System.out.println(message);
+			nestedMsg += "  ";
+		logger.log(Type.INFO, nestedMsg);
 	}
 
 	int nesting = 0;

File: extensions/gdx-controllers/gdx-controllers-android/src/com/badlogic/gdx/controllers/android/AndroidControllers.java
Patch:
@@ -26,11 +26,9 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.LifecycleListener;
 import com.badlogic.gdx.backends.android.AndroidInput;
-import com.badlogic.gdx.backends.android.AndroidInputThreePlus;
 import com.badlogic.gdx.controllers.Controller;
 import com.badlogic.gdx.controllers.ControllerListener;
 import com.badlogic.gdx.controllers.ControllerManager;
-import com.badlogic.gdx.controllers.PovDirection;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.IntMap;
 import com.badlogic.gdx.utils.IntMap.Entry;
@@ -54,7 +52,7 @@ public AndroidControllers() {
 		gatherControllers(false);
 		setupEventQueue();
 		((AndroidInput)Gdx.input).addKeyListener(this);
-		((AndroidInputThreePlus)Gdx.input).addGenericMotionListener(this);
+		((AndroidInput)Gdx.input).addGenericMotionListener(this);
 		
 		// use InputManager on Android +4.1 to receive (dis-)connect events
 		if(Gdx.app.getVersion() >= 16) {

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/CustomShading.java
Patch:
@@ -145,7 +145,7 @@ private void updateSamplers () {
 		hasMissingSamplers = false;
 		missingSamplerMessage = "";
 
-		shader.begin();
+		shader.bind();
 		for (int i = 0; i < extraTextures.size; i++) {
 			int unit = i + 1;
 			int location = shader.fetchUniformLocation("u_texture" + unit, false);
@@ -156,6 +156,5 @@ private void updateSamplers () {
 				missingSamplerMessage += "uniform sampler2D u_texture" + unit + " missing in shader program.\n";
 			}
 		}
-		shader.end();
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -543,7 +543,7 @@ public void unbind (final ShaderProgram shader, final int[] locations) {
 	 * </p>
 	 *
 	 * <p>
-	 * This method must only be called after the {@link ShaderProgram#begin()} method has been called!
+	 * This method must only be called after the {@link ShaderProgram#bind()} method has been called!
 	 * </p>
 	 *
 	 * <p>
@@ -567,7 +567,7 @@ public void render (ShaderProgram shader, int primitiveType) {
 	 * </p>
 	 *
 	 * <p>
-	 * This method must only be called after the {@link ShaderProgram#begin()} method has been called!
+	 * This method must only be called after the {@link ShaderProgram#bind()} method has been called!
 	 * </p>
 	 *
 	 * <p>
@@ -594,7 +594,7 @@ public void render (ShaderProgram shader, int primitiveType, int offset, int cou
 	 * </p>
 	 *
 	 * <p>
-	 * This method must only be called after the {@link ShaderProgram#begin()} method has been called!
+	 * This method must only be called after the {@link ShaderProgram#bind()} method has been called!
 	 * </p>
 	 *
 	 * <p>

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteCache.java
Patch:
@@ -855,14 +855,14 @@ public void begin () {
 		Gdx.gl20.glDepthMask(false);
 
 		if (customShader != null) {
-			customShader.begin();
+			customShader.bind();
 			customShader.setUniformMatrix("u_proj", projectionMatrix);
 			customShader.setUniformMatrix("u_trans", transformMatrix);
 			customShader.setUniformMatrix("u_projTrans", combinedMatrix);
 			customShader.setUniformi("u_texture", 0);
 			mesh.bind(customShader);
 		} else {
-			shader.begin();
+			shader.bind();
 			shader.setUniformMatrix("u_projectionViewMatrix", combinedMatrix);
 			shader.setUniformi("u_texture", 0);
 			mesh.bind(shader);
@@ -875,7 +875,6 @@ public void end () {
 		if (!drawing) throw new IllegalStateException("begin must be called before end.");
 		drawing = false;
 
-		shader.end();
 		GL20 gl = Gdx.gl20;
 		gl.glDepthMask(true);
 		if (customShader != null)

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/CameraGroupStrategy.java
Patch:
@@ -165,14 +165,13 @@ public void afterGroup (int group) {
 	@Override
 	public void beforeGroups () {
 		Gdx.gl.glEnable(GL20.GL_DEPTH_TEST);
-		shader.begin();
+		shader.bind();
 		shader.setUniformMatrix("u_projectionViewMatrix", camera.combined);
 		shader.setUniformi("u_texture", 0);
 	}
 
 	@Override
 	public void afterGroups () {
-		shader.end();
 		Gdx.gl.glDisable(GL20.GL_DEPTH_TEST);
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java
Patch:
@@ -204,7 +204,7 @@ public void init (final ShaderProgram program, final Renderable renderable) {
 	public void begin (Camera camera, RenderContext context) {
 		this.camera = camera;
 		this.context = context;
-		program.begin();
+		program.bind();
 		currentMesh = null;
 		for (int u, i = 0; i < globalUniforms.size; ++i)
 			if (setters.get(u = globalUniforms.get(i)) != null) setters.get(u).set(this, u, null, null);
@@ -250,7 +250,6 @@ public void end () {
 			currentMesh.unbind(program, tempArray.items);
 			currentMesh = null;
 		}
-		program.end();
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/graphics/glutils/ImmediateModeRenderer20.java
Patch:
@@ -143,13 +143,12 @@ public void vertex (float x, float y, float z) {
 
 	public void flush () {
 		if (numVertices == 0) return;
-		shader.begin();
+		shader.bind();
 		shader.setUniformMatrix("u_projModelView", projModelView);
 		for (int i = 0; i < numTexCoords; i++)
 			shader.setUniformi(shaderUniformNames[i], i);
 		mesh.setVertices(vertices, 0, vertexIdx);
 		mesh.render(shader, primitiveType);
-		shader.end();
 
 		numSetTexCoords = 0;
 		vertexIdx = 0;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/DragScrollListener.java
Patch:
@@ -28,9 +28,8 @@
  * <p>
  * If {@link ScrollPane#setFlickScroll(boolean)} is true, the scroll pane must have
  * {@link ScrollPane#setCancelTouchFocus(boolean)} false. When a drag starts that should drag rather than flick scroll, cancel the
- * scroll pane's touch focus using <code>stage.cancelTouchFocus(gloom.monstersScroll);</code>. In this case the drag scroll
- * listener must not be attached to the scroll pane, else it would also lose touch focus. Instead it can be attached to the scroll
- * pane's actor.
+ * scroll pane's touch focus using <code>stage.cancelTouchFocus(scrollPane);</code>. In this case the drag scroll listener must
+ * not be attached to the scroll pane, else it would also lose touch focus. Instead it can be attached to the scroll pane's actor.
  * <p>
  * If using drag and drop, {@link DragAndDrop#setCancelTouchFocus(boolean)} must be false.
  * @author Nathan Sweet */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/Selection.java
Patch:
@@ -36,7 +36,7 @@ public void choose (T item) {
 		if (isDisabled) return;
 		snapshot();
 		try {
-			if (((toggle && !required && selected.size == 1) || UIUtils.ctrl()) && selected.contains(item)) {
+			if ((toggle || UIUtils.ctrl()) && selected.contains(item)) {
 				if (required && selected.size == 1) return;
 				selected.remove(item);
 				lastSelected = null;

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -188,7 +188,7 @@ public float get (int key, float defaultValue) {
 
 	/** Returns the key's current value and increments the stored value. If the key is not in the map, defaultValue + increment is
 	 * put into the map and defaultValue is returned. */
-	public float getAndIncrement (int key, int defaultValue, int increment) {
+	public float getAndIncrement (int key, float defaultValue, float increment) {
 		if (key == 0) {
 			if (!hasZeroValue) {
 				hasZeroValue = true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/IndexBufferObjectShaderTest.java
Patch:
@@ -49,15 +49,14 @@ public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		Gdx.gl.glEnable(GL20.GL_TEXTURE_2D);
-		shader.begin();
+		shader.bind();
 		shader.setUniformi("u_texture", 0);
 		texture.bind();
 		vbo.bind(shader);
 		ibo.bind();
 		Gdx.gl20.glDrawElements(GL20.GL_TRIANGLES, 3, GL20.GL_UNSIGNED_SHORT, 0);
 		ibo.unbind();
 		vbo.unbind(shader);
-		shader.end();
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MeshShaderTest.java
Patch:
@@ -94,11 +94,10 @@ public void render () {
 		Gdx.gl20.glEnable(GL20.GL_BLEND);
 		Gdx.gl20.glBlendFunc(GL20.GL_SRC_ALPHA, GL20.GL_ONE_MINUS_SRC_ALPHA);
 		texture.bind();
-		shader.begin();
+		shader.bind();
 		shader.setUniformMatrix("u_worldView", matrix);
 		shader.setUniformi("u_texture", 0);
 		meshToDraw.render(shader, GL20.GL_TRIANGLES);
-		shader.end();
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MipMapTest.java
Patch:
@@ -122,11 +122,10 @@ public void render () {
 		currTexture.bind();
 		currTexture.setFilter(TextureFilter.valueOf(minFilter.getSelected()), TextureFilter.valueOf(magFilter.getSelected()));
 
-		shader.begin();
+		shader.bind();
 		shader.setUniformMatrix("u_projTrans", camera.combined);
 		shader.setUniformi("s_texture", 0);
 		mesh.render(shader, GL20.GL_TRIANGLE_FAN);
-		shader.end();
 
 		ui.act();
 		ui.draw();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
Patch:
@@ -150,7 +150,7 @@ public void render () {
 		projector.update();
 
 		texture.bind();
-		projTexShader.begin();
+		projTexShader.bind();
 
 		if (camera.getSelectedIndex() == 0) {
 			renderMesh(projTexShader, cam.combined, projector.combined, planeTrans, plane, Color.WHITE);
@@ -165,8 +165,6 @@ public void render () {
 			 */
 		}
 
-		projTexShader.end();
-
 		fps.setText("fps: " + Gdx.graphics.getFramesPerSecond());
 		ui.act();
 		ui.draw();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ShaderMultitextureTest.java
Patch:
@@ -96,13 +96,11 @@ public void render () {
 		Gdx.gl20.glActiveTexture(GL20.GL_TEXTURE1);
 		texture2.bind();
 
-		shader.begin();
+		shader.bind();
 		shader.setUniformi("s_texture", 0);
 		shader.setUniformi("s_texture2", 1);
 
 		mesh.render(shader, GL20.GL_TRIANGLES);
-
-		shader.end();
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VertexBufferObjectShaderTest.java
Patch:
@@ -49,15 +49,14 @@ public void render () {
 		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		gl.glEnable(GL20.GL_TEXTURE_2D);
-		shader.begin();
+		shader.bind();
 		shader.setUniformi("u_texture", 0);
 		texture.bind();
 		vbo.bind(shader);
 		indices.bind();
 		gl.glDrawElements(GL20.GL_TRIANGLES, 3, GL20.GL_UNSIGNED_SHORT, indices.getBuffer().position());
 		indices.unbind();
 		vbo.unbind(shader);
-		shader.end();
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/MultipleRenderTargetTest.java
Patch:
@@ -251,7 +251,7 @@ public void render () {
 
 		frameBuffer.end();
 
-		mrtSceneShader.begin();
+		mrtSceneShader.bind();
 		mrtSceneShader.setUniformi("u_diffuseTexture",
 			renderContext.textureBinder.bind(frameBuffer.getTextureAttachments().get(DIFFUSE_ATTACHMENT)));
 		mrtSceneShader.setUniformi("u_normalTexture",
@@ -267,7 +267,6 @@ public void render () {
 		mrtSceneShader.setUniformf("u_viewPos", camera.position);
 		mrtSceneShader.setUniformMatrix("u_inverseProjectionMatrix", camera.invProjectionView);
 		quad.render(mrtSceneShader, GL30.GL_TRIANGLE_FAN);
-		mrtSceneShader.end();
 		renderContext.end();
 
 
@@ -422,7 +421,7 @@ public boolean canRender (Renderable instance) {
 		@Override
 		public void begin (Camera camera, RenderContext context) {
 			this.context = context;
-			shaderProgram.begin();
+			shaderProgram.bind();
 			shaderProgram.setUniformMatrix("u_projViewTrans", camera.combined);
 			context.setDepthTest(GL20.GL_LEQUAL);
 			context.setCullFace(GL20.GL_BACK);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/TextureArrayTest.java
Patch:
@@ -120,12 +120,11 @@ public void render () {
 
 		textureArray.bind();
 
-		shaderProgram.begin();
+		shaderProgram.bind();
 		shaderProgram.setUniformi("u_textureArray", 0);
 		shaderProgram.setUniformMatrix("u_projViewTrans", camera.combined);
 		shaderProgram.setUniformMatrix("u_modelView", modelView);
 		terrain.render(shaderProgram, GL20.GL_TRIANGLES);
-		shaderProgram.end();
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gles2/HelloTriangle.java
Patch:
@@ -46,8 +46,7 @@ public void create () {
 	public void render () {
 		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl20.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		shader.begin();
+		shader.bind();
 		mesh.render(shader, GL20.GL_TRIANGLES);
-		shader.end();
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gles2/MipMap2D.java
Patch:
@@ -86,7 +86,7 @@ public void render () {
 
 		Gdx.gl20.glActiveTexture(GL20.GL_TEXTURE0);
 		texture.bind();
-		shader.begin();
+		shader.bind();
 		shader.setUniformf("s_texture", 0);
 
 		Gdx.gl20.glTexParameteri(GL20.GL_TEXTURE_2D, GL20.GL_TEXTURE_MIN_FILTER, GL20.GL_NEAREST);
@@ -96,7 +96,5 @@ public void render () {
 		Gdx.gl20.glTexParameteri(GL20.GL_TEXTURE_2D, GL20.GL_TEXTURE_MIN_FILTER, GL20.GL_LINEAR_MIPMAP_LINEAR);
 		shader.setUniformf("u_offset", 0.6f);
 		mesh.render(shader, GL20.GL_TRIANGLES);
-
-		shader.end();
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gles2/SimpleVertexShader.java
Patch:
@@ -71,10 +71,9 @@ public void render () {
 
 		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl20.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		shader.begin();
+		shader.bind();
 		shader.setUniformMatrix("u_mvpMatrix", combined);
 		mesh.render(shader, GL20.GL_TRIANGLES);
-		shader.end();
 
 		Gdx.app.log("angle", "" + angle);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gles3/InstancedRenderingTest.java
Patch:
@@ -84,8 +84,7 @@ public void render () {
 		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1f);
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
-		shader.begin();
+		shader.bind();
 		mesh.render(shader, GL30.GL_TRIANGLES);
-		shader.end();
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTest.java
Patch:
@@ -95,11 +95,10 @@ public void render () {
 		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		texture.bind(0);
-		shader.begin();
+		shader.bind();
 		shader.setUniformMatrix("u_projView", matrix);
 		shader.setUniformi("u_texture", 0);
 		mesh.render(shader, GL20.GL_TRIANGLES);
-		shader.end();
 
 		batch.begin();
 		batch.draw(atlas.findRegion("font"), 0, 100);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglClipboard.java
Patch:
@@ -38,7 +38,7 @@ public String getContents () {
 				if (contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {
 					try {
 						return (String)contents.getTransferData(DataFlavor.stringFlavor);
-					} catch (Exception ex) {
+					} catch (Throwable ex) {
 					}
 				}
 				if (contents.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
@@ -54,7 +54,7 @@ public String getContents () {
 					}
 				}
 			}
-		} catch (Exception ignored) { // Ignore JDK crashes sorting data flavors.
+		} catch (Throwable ignored) { // Ignore JDK crashes sorting data flavors.
 		}
 		return "";
 	}
@@ -65,7 +65,7 @@ public void setContents (String content) {
 			StringSelection stringSelection = new StringSelection(content);
 			java.awt.datatransfer.Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
 			clipboard.setContents(stringSelection, this);
-		} catch (Exception ignored) { // Ignore JDK crashes sorting data flavors.
+		} catch (Throwable ignored) { // Ignore JDK crashes sorting data flavors.
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/Camera.java
Patch:
@@ -194,7 +194,7 @@ public void translate (Vector3 vec) {
 	public Vector3 unproject (Vector3 screenCoords, float viewportX, float viewportY, float viewportWidth, float viewportHeight) {
 		float x = screenCoords.x, y = screenCoords.y;
 		x = x - viewportX;
-		y = Gdx.graphics.getHeight() - y - 1;
+		y = Gdx.graphics.getHeight() - y;
 		y = y - viewportY;
 		screenCoords.x = (2 * x) / viewportWidth - 1;
 		screenCoords.y = (2 * y) / viewportHeight - 1;

File: gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java
Patch:
@@ -79,7 +79,7 @@ public Renderable obtain () {
 	public ModelBatch (final RenderContext context, final ShaderProvider shaderProvider, final RenderableSorter sorter) {
 		this.sorter = (sorter == null) ? new DefaultRenderableSorter() : sorter;
 		this.ownContext = (context == null);
-		this.context = (context == null) ? new RenderContext(new DefaultTextureBinder(DefaultTextureBinder.WEIGHTED, 1)) : context;
+		this.context = (context == null) ? new RenderContext(new DefaultTextureBinder(DefaultTextureBinder.LRU, 1)) : context;
 		this.shaderProvider = (shaderProvider == null) ? new DefaultShaderProvider() : shaderProvider;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -66,9 +66,9 @@ public class SelectBox<T> extends Widget implements Disableable {
 	boolean selectedPrefWidth;
 
 	final ArraySelection<T> selection = new ArraySelection(items) {
-		protected void changed () {
-			super.changed();
+		public boolean fireChangeEvent () {
 			if (selectedPrefWidth) invalidateHierarchy();
+			return super.fireChangeEvent();
 		}
 	};
 

File: gdx/src/com/badlogic/gdx/utils/viewport/Viewport.java
Patch:
@@ -117,7 +117,7 @@ public void calculateScissors (Matrix4 batchTransform, Rectangle area, Rectangle
 	public Vector2 toScreenCoordinates (Vector2 worldCoords, Matrix4 transformMatrix) {
 		tmp.set(worldCoords.x, worldCoords.y, 0);
 		tmp.mul(transformMatrix);
-		camera.project(tmp);
+		camera.project(tmp, screenX, screenY, screenWidth, screenHeight);
 		tmp.y = Gdx.graphics.getHeight() - tmp.y;
 		worldCoords.x = tmp.x;
 		worldCoords.y = tmp.y;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -74,6 +74,7 @@
 import com.badlogic.gdx.tests.g3d.TangentialAccelerationTest;
 import com.badlogic.gdx.tests.g3d.TextureArrayTest;
 import com.badlogic.gdx.tests.g3d.TextureRegion3DTest;
+import com.badlogic.gdx.tests.g3d.utils.DefaultTextureBinderTest;
 import com.badlogic.gdx.tests.gles2.HelloTriangle;
 import com.badlogic.gdx.tests.gles2.SimpleVertexShader;
 import com.badlogic.gdx.tests.net.NetAPITest;
@@ -121,10 +122,12 @@ public class GdxTests {
 		CollectionsTest.class,
 		ColorTest.class,
 		ContainerTest.class,
+		CoordinatesTest.class,
 		CpuSpriteBatchTest.class,
 		CullTest.class,
 		CursorTest.class,
 		DecalTest.class,
+		DefaultTextureBinderTest.class,
 		DelaunayTriangulatorTest.class,
 		DeltaTimeTest.class,
 		DirtyRenderingTest.class,

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BigMeshTest.java
Patch:
@@ -142,6 +142,9 @@ private void trace(RenderableProvider rp, String label){
 	@Override
 	public void render () {
 		
+		Gdx.gl.glClearColor(0, 0, 0, 0);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
+		
 		camera.viewportWidth = Gdx.graphics.getWidth();
 		camera.viewportHeight = Gdx.graphics.getHeight();
 		camera.update();

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3WindowConfiguration.java
Patch:
@@ -126,8 +126,8 @@ public void setAutoIconify (boolean autoIconify) {
 	}
 
 	/**
-	 * Sets the position of the window in windowed mode on the
-	 * primary monitor. Default -1 for both coordinates for centered.
+	 * Sets the position of the window in windowed mode.
+	 * Default -1 for both coordinates for centered on primary monitor.
 	 */
 	public void setWindowPosition(int x, int y) {
 		windowX = x;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -246,7 +246,7 @@ public boolean isKeyJustPressed (int key) {
 		if (key == Input.Keys.ANY_KEY) {
 			return keyJustPressed;
 		}
-		if (key < 0 || key > 255) {
+		if (key < 0 || key >= justPressedKeys.length) {
 			return false;
 		}
 		return justPressedKeys[key];

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Input.java
Patch:
@@ -325,7 +325,7 @@ public boolean isKeyJustPressed(int key) {
 		if (key == Input.Keys.ANY_KEY) {
 			return keyJustPressed;
 		}
-		if (key < 0 || key > 256) {
+		if (key < 0 || key >= justPressedKeys.length) {
 			return false;
 		}
 		return justPressedKeys[key];

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/Selection.java
Patch:
@@ -36,7 +36,7 @@ public void choose (T item) {
 		if (isDisabled) return;
 		snapshot();
 		try {
-			if (((toggle && !required && selected.size == 1) || UIUtils.ctrl()) && selected.contains(item)) {
+			if ((toggle || UIUtils.ctrl()) && selected.contains(item)) {
 				if (required && selected.size == 1) return;
 				selected.remove(item);
 				lastSelected = null;

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/gen/ReflectionCacheSourceCreator.java
Patch:
@@ -225,9 +225,10 @@ public int compare (MethodStub o1, MethodStub o2) {
 	}
 
 	private void out (String message, int nesting) {
+		String nestedMsg = "";
 		for (int i = 0; i < nesting; i++)
-			System.out.print("  ");
-		System.out.println(message);
+			nestedMsg += "  ";
+		logger.log(Type.INFO, nestedMsg);
 	}
 
 	int nesting = 0;

File: gdx/src/com/badlogic/gdx/utils/BinaryHeap.java
Patch:
@@ -94,8 +94,8 @@ public T pop () {
 	public T remove (T node) {
 		if (--size > 0) {
 			Node moved = nodes[size];
-			nodes[node.index] = moved;
 			nodes[size] = null;
+			nodes[node.index] = moved;
 			if (moved.value < node.value ^ isMaxHeap)
 				up(node.index);
 			else

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -188,7 +188,7 @@ public float get (int key, float defaultValue) {
 
 	/** Returns the key's current value and increments the stored value. If the key is not in the map, defaultValue + increment is
 	 * put into the map and defaultValue is returned. */
-	public float getAndIncrement (int key, int defaultValue, int increment) {
+	public float getAndIncrement (int key, float defaultValue, float increment) {
 		if (key == 0) {
 			if (!hasZeroValue) {
 				hasZeroValue = true;

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -188,7 +188,7 @@ public float get (int key, float defaultValue) {
 
 	/** Returns the key's current value and increments the stored value. If the key is not in the map, defaultValue + increment is
 	 * put into the map and defaultValue is returned. */
-	public float getAndIncrement (int key, int defaultValue, int increment) {
+	public float getAndIncrement (int key, float defaultValue, float increment) {
 		if (key == 0) {
 			if (!hasZeroValue) {
 				hasZeroValue = true;

File: gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java
Patch:
@@ -79,7 +79,7 @@ public Renderable obtain () {
 	public ModelBatch (final RenderContext context, final ShaderProvider shaderProvider, final RenderableSorter sorter) {
 		this.sorter = (sorter == null) ? new DefaultRenderableSorter() : sorter;
 		this.ownContext = (context == null);
-		this.context = (context == null) ? new RenderContext(new DefaultTextureBinder(DefaultTextureBinder.WEIGHTED, 1)) : context;
+		this.context = (context == null) ? new RenderContext(new DefaultTextureBinder(DefaultTextureBinder.LRU, 1)) : context;
 		this.shaderProvider = (shaderProvider == null) ? new DefaultShaderProvider() : shaderProvider;
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -74,6 +74,7 @@
 import com.badlogic.gdx.tests.g3d.TangentialAccelerationTest;
 import com.badlogic.gdx.tests.g3d.TextureArrayTest;
 import com.badlogic.gdx.tests.g3d.TextureRegion3DTest;
+import com.badlogic.gdx.tests.g3d.utils.DefaultTextureBinderTest;
 import com.badlogic.gdx.tests.gles2.HelloTriangle;
 import com.badlogic.gdx.tests.gles2.SimpleVertexShader;
 import com.badlogic.gdx.tests.net.NetAPITest;
@@ -125,6 +126,7 @@ public class GdxTests {
 		CullTest.class,
 		CursorTest.class,
 		DecalTest.class,
+		DefaultTextureBinderTest.class,
 		DelaunayTriangulatorTest.class,
 		DeltaTimeTest.class,
 		DirtyRenderingTest.class,

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -282,7 +282,7 @@ public boolean containsValue (int value) {
 		if (hasZeroValue && zeroValue == value) return true;
 		int[] keyTable = this.keyTable;
 		float[] valueTable = this.valueTable;
-		for (int i = valueTable.length - 1; i > 0; i--)
+		for (int i = valueTable.length - 1; i >= 0; i--)
 			if (keyTable[i] != 0 && valueTable[i] == value) return true;
 		return false;
 	}
@@ -298,7 +298,7 @@ public int findKey (int value, int notFound) {
 		if (hasZeroValue && zeroValue == value) return 0;
 		int[] keyTable = this.keyTable;
 		float[] valueTable = this.valueTable;
-		for (int i = valueTable.length - 1; i > 0; i--) {
+		for (int i = valueTable.length - 1; i >= 0; i--) {
 			int key = keyTable[i];
 			if (key != 0 && valueTable[i] == value) return key;
 		}

File: gdx/src/com/badlogic/gdx/utils/IntIntMap.java
Patch:
@@ -281,7 +281,7 @@ public boolean containsValue (int value) {
 		if (hasZeroValue && zeroValue == value) return true;
 		int[] keyTable = this.keyTable;
 		int[] valueTable = this.valueTable;
-		for (int i = valueTable.length - 1; i > 0; i--)
+		for (int i = valueTable.length - 1; i >= 0; i--)
 			if (keyTable[i] != 0 && valueTable[i] == value) return true;
 		return false;
 	}
@@ -297,7 +297,7 @@ public int findKey (int value, int notFound) {
 		if (hasZeroValue && zeroValue == value) return 0;
 		int[] keyTable = this.keyTable;
 		int[] valueTable = this.valueTable;
-		for (int i = valueTable.length - 1; i > 0; i--) {
+		for (int i = valueTable.length - 1; i >= 0; i--) {
 			int key = keyTable[i];
 			if (key != 0 && valueTable[i] == value) return key;
 		}

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -253,7 +253,7 @@ public void clear () {
 	public boolean containsValue (float value) {
 		K[] keyTable = this.keyTable;
 		float[] valueTable = this.valueTable;
-		for (int i = valueTable.length - 1; i > 0; i--)
+		for (int i = valueTable.length - 1; i >= 0; i--)
 			if (keyTable[i] != null && valueTable[i] == value) return true;
 		return false;
 	}
@@ -268,7 +268,7 @@ public boolean containsKey (K key) {
 	public K findKey (float value) {
 		K[] keyTable = this.keyTable;
 		float[] valueTable = this.valueTable;
-		for (int i = valueTable.length - 1; i > 0; i--) {
+		for (int i = valueTable.length - 1; i >= 0; i--) {
 			K key = keyTable[i];
 			if (key != null && valueTable[i] == value) return key;
 		}

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -249,7 +249,7 @@ public void clear () {
 	public boolean containsValue (int value) {
 		K[] keyTable = this.keyTable;
 		int[] valueTable = this.valueTable;
-		for (int i = valueTable.length - 1; i > 0; i--)
+		for (int i = valueTable.length - 1; i >= 0; i--)
 			if (keyTable[i] != null && valueTable[i] == value) return true;
 		return false;
 	}
@@ -264,7 +264,7 @@ public boolean containsKey (K key) {
 	public K findKey (int value) {
 		K[] keyTable = this.keyTable;
 		int[] valueTable = this.valueTable;
-		for (int i = valueTable.length - 1; i > 0; i--) {
+		for (int i = valueTable.length - 1; i >= 0; i--) {
 			K key = keyTable[i];
 			if (key != null && valueTable[i] == value) return key;
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/CoordinatesTest.java
Patch:
@@ -33,7 +33,7 @@ public class CoordinatesTest extends GdxTest {
 	Camera camera;
 	private Image img;
 	
-	private final Vector2 localActorScreen = new Vector2();
+	final Vector2 localActorScreen = new Vector2();
 	private Label inScreenLabel;
 	private Label vpScreenLabel;
 	private Label stScreenLabel;

File: gdx/src/com/badlogic/gdx/graphics/Camera.java
Patch:
@@ -194,7 +194,7 @@ public void translate (Vector3 vec) {
 	public Vector3 unproject (Vector3 screenCoords, float viewportX, float viewportY, float viewportWidth, float viewportHeight) {
 		float x = screenCoords.x, y = screenCoords.y;
 		x = x - viewportX;
-		y = Gdx.graphics.getHeight() - y - 1;
+		y = Gdx.graphics.getHeight() - y;
 		y = y - viewportY;
 		screenCoords.x = (2 * x) / viewportWidth - 1;
 		screenCoords.y = (2 * y) / viewportHeight - 1;

File: gdx/src/com/badlogic/gdx/utils/viewport/Viewport.java
Patch:
@@ -117,7 +117,7 @@ public void calculateScissors (Matrix4 batchTransform, Rectangle area, Rectangle
 	public Vector2 toScreenCoordinates (Vector2 worldCoords, Matrix4 transformMatrix) {
 		tmp.set(worldCoords.x, worldCoords.y, 0);
 		tmp.mul(transformMatrix);
-		camera.project(tmp);
+		camera.project(tmp, screenX, screenY, screenWidth, screenHeight);
 		tmp.y = Gdx.graphics.getHeight() - tmp.y;
 		worldCoords.x = tmp.x;
 		worldCoords.y = tmp.y;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -120,6 +120,7 @@ public class GdxTests {
 		CollectionsTest.class,
 		ColorTest.class,
 		ContainerTest.class,
+		CoordinatesTest.class,
 		CpuSpriteBatchTest.class,
 		CullTest.class,
 		CursorTest.class,

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -289,7 +289,7 @@ public boolean containsValue (int value) {
 
 	public boolean containsKey (int key) {
 		if (key == 0) return hasZeroValue;
-		return locateKey(key) < 0;
+		return locateKey(key) >= 0;
 	}
 
 	/** Returns the key for the specified value, or notFound if it is not in the map. Note this traverses the entire map and

File: gdx/src/com/badlogic/gdx/utils/IntIntMap.java
Patch:
@@ -288,7 +288,7 @@ public boolean containsValue (int value) {
 
 	public boolean containsKey (int key) {
 		if (key == 0) return hasZeroValue;
-		return locateKey(key) < 0;
+		return locateKey(key) >= 0;
 	}
 
 	/** Returns the key for the specified value, or null if it is not in the map. Note this traverses the entire map and compares

File: gdx/src/com/badlogic/gdx/utils/IntSet.java
Patch:
@@ -246,7 +246,7 @@ public void clear () {
 
 	public boolean contains (int key) {
 		if (key == 0) return hasZeroValue;
-		return locateKey(key) != -1;
+		return locateKey(key) >= 0;
 	}
 
 	public int first () {

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -352,8 +352,7 @@ static public <T> ObjectSet<T> with (T... array) {
 	static int tableSize (int capacity, float loadFactor) {
 		if (capacity < 0) throw new IllegalArgumentException("capacity must be >= 0: " + capacity);
 		int tableSize = MathUtils.nextPowerOfTwo(Math.max(2, (int)Math.ceil(capacity / loadFactor)));
-		// Note: 0x40000000 is "1 << 30" but crashes under certain circumstances - see: https://github.com/libgdx/libgdx/issues/4065
-		if (tableSize > 0x40000000) throw new IllegalArgumentException("The required capacity is too large: " + capacity);
+		if (tableSize > 1 << 30) throw new IllegalArgumentException("The required capacity is too large: " + capacity);
 		return tableSize;
 	}
 

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -352,7 +352,8 @@ static public <T> ObjectSet<T> with (T... array) {
 	static int tableSize (int capacity, float loadFactor) {
 		if (capacity < 0) throw new IllegalArgumentException("capacity must be >= 0: " + capacity);
 		int tableSize = MathUtils.nextPowerOfTwo(Math.max(2, (int)Math.ceil(capacity / loadFactor)));
-		if (tableSize > 1 << 30) throw new IllegalArgumentException("The required capacity is too large: " + capacity);
+		// Note: 0x40000000 is "1 << 30" but crashes under certain circumstances - see: https://github.com/libgdx/libgdx/issues/4065
+		if (tableSize > 0x40000000) throw new IllegalArgumentException("The required capacity is too large: " + capacity);
 		return tableSize;
 	}
 

File: gdx/src/com/badlogic/gdx/utils/FloatArray.java
Patch:
@@ -372,7 +372,7 @@ public int hashCode () {
 		float[] items = this.items;
 		int h = 1;
 		for (int i = 0, n = size; i < n; i++)
-			h = h * 31 + Float.floatToRawIntBits(items[i]);
+			h = h * 31 + NumberUtils.floatToRawIntBits(items[i]);
 		return h;
 	}
 

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -339,7 +339,7 @@ public int hashCode () {
 		float[] valueTable = this.valueTable;
 		for (int i = 0, n = keyTable.length; i < n; i++) {
 			int key = keyTable[i];
-			if (key != 0) h += key * 31 + Float.floatToRawIntBits(valueTable[i]);
+			if (key != 0) h += key * 31 + NumberUtils.floatToRawIntBits(valueTable[i]);
 		}
 		return h;
 	}

File: gdx/src/com/badlogic/gdx/utils/FloatArray.java
Patch:
@@ -372,7 +372,7 @@ public int hashCode () {
 		float[] items = this.items;
 		int h = 1;
 		for (int i = 0, n = size; i < n; i++)
-			h = h * 31 + Float.floatToIntBits(items[i]);
+			h = h * 31 + Float.floatToRawIntBits(items[i]);
 		return h;
 	}
 

File: gdx/src/com/badlogic/gdx/utils/OrderedMap.java
Patch:
@@ -38,8 +38,8 @@
  * hashing, instead of the more common power-of-two mask, to better distribute poor hashCodes (see <a href=
  * "https://probablydance.com/2018/06/16/fibonacci-hashing-the-optimization-that-the-world-forgot-or-a-better-alternative-to-integer-modulo/">Malte
  * Skarupke's blog post</a>). Linear probing continues to work even when all hashCodes collide, just more slowly.
- * @author Tommy Ettinger
- * @author Nathan Sweet */
+ * @author Nathan Sweet
+ * @author Tommy Ettinger */
 public class OrderedMap<K, V> extends ObjectMap<K, V> {
 	final Array<K> keys;
 

File: gdx/src/com/badlogic/gdx/utils/OrderedSet.java
Patch:
@@ -38,8 +38,8 @@
  * hashing, instead of the more common power-of-two mask, to better distribute poor hashCodes (see <a href=
  * "https://probablydance.com/2018/06/16/fibonacci-hashing-the-optimization-that-the-world-forgot-or-a-better-alternative-to-integer-modulo/">Malte
  * Skarupke's blog post</a>). Linear probing continues to work even when all hashCodes collide, just more slowly.
- * @author Tommy Ettinger
- * @author Nathan Sweet */
+ * @author Nathan Sweet
+ * @author Tommy Ettinger */
 public class OrderedSet<T> extends ObjectSet<T> {
 	final Array<T> items;
 	OrderedSetIterator iterator1, iterator2;

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.badlogic.gdx.utils;
 
+import java.util.Arrays;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
@@ -371,9 +372,7 @@ public boolean isEmpty () {
 	}
 
 	public void clear () {
-		T[] items = this.items;
-		for (int i = 0, n = size; i < n; i++)
-			items[i] = null;
+		Arrays.fill(items, null);
 		size = 0;
 	}
 

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -623,7 +623,6 @@ public void writeValue (Object value, Class knownType, Class elementType) {
 				writeObjectEnd();
 				return;
 			}
-
 			if (value instanceof IntSet) {
 				if (knownType == null) knownType = IntSet.class;
 				writeObjectStart(actualType, knownType);

File: gdx/src/com/badlogic/gdx/utils/OrderedSet.java
Patch:
@@ -85,10 +85,9 @@ public boolean add (T key, int index) {
 
 	public void addAll (OrderedSet<T> set) {
 		ensureCapacity(set.size);
-		final T[] keys = set.items.items;
-		for (int i = 0, n = set.items.size; i < n; i++) {
+		T[] keys = set.items.items;
+		for (int i = 0, n = set.items.size; i < n; i++)
 			add(keys[i]);
-		}
 	}
 
 	public boolean remove (T key) {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -33,7 +33,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new TreeTest();
+		GdxTest test = new CollectionsTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -55,7 +55,7 @@
 
 public class Lwjgl3Application implements Application {
 	private final Lwjgl3ApplicationConfiguration config;
-	private final Array<Lwjgl3Window> windows = new Array<Lwjgl3Window>();
+	final Array<Lwjgl3Window> windows = new Array<Lwjgl3Window>();
 	private volatile Lwjgl3Window currentWindow;
 	private Audio audio;
 	private final Files files;
@@ -390,7 +390,7 @@ public void run () {
 		return window;
 	}
 
-	private void createWindow(Lwjgl3Window window, Lwjgl3ApplicationConfiguration config, long sharedContext) {
+	void createWindow(Lwjgl3Window window, Lwjgl3ApplicationConfiguration config, long sharedContext) {
 		long windowHandle = createGlfwWindow(config, sharedContext);
 		window.create(windowHandle);
 		window.setVisible(config.initialVisible);

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3ApplicationConfiguration.java
Patch:
@@ -147,7 +147,7 @@ public void setAudioConfig(int simultaniousSources, int bufferSize, int bufferCo
 	 * 
 	 * @see <a href=
 	 *      "http://legacy.lwjgl.org/javadoc/org/lwjgl/opengl/ContextAttribs.html">
-	 *      LWJGL OSX ContextAttribs note
+	 *      LWJGL OSX ContextAttribs note</a>
 	 * 
 	 * @param useGL30
 	 *            whether to use OpenGL ES 3.0

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Graphics.java
Patch:
@@ -36,8 +36,8 @@
 import org.lwjgl.opengl.GL11;
 
 public class Lwjgl3Graphics implements Graphics, Disposable {
-	private final Lwjgl3Window window;
-	private GL20 gl20;
+	final Lwjgl3Window window;
+	GL20 gl20;
 	private GL30 gl30;
 	private GLVersion glVersion;
 	private volatile int backBufferWidth;
@@ -99,7 +99,7 @@ public Lwjgl3Window getWindow() {
 		return window;
 	}
 
-	private void updateFramebufferInfo() {
+	void updateFramebufferInfo() {
 		GLFW.glfwGetFramebufferSize(window.getWindowHandle(), tmpBuffer, tmpBuffer2);
 		this.backBufferWidth = tmpBuffer.get(0);
 		this.backBufferHeight = tmpBuffer2.get(0);

File: extensions/gdx-controllers/gdx-controllers-android/src/com/badlogic/gdx/controllers/android/AndroidControllers.java
Patch:
@@ -191,7 +191,7 @@ public boolean onGenericMotion (View view, MotionEvent motionEvent) {
 
 	@Override
 	public boolean onKey (View view, int keyCode, KeyEvent keyEvent) {
-		if (!keyEvent.isGamepadButton(keyCode)) {
+		if (!KeyEvent.isGamepadButton(keyCode)) {
 			return false;
 		}
 		AndroidController controller = controllerMap.get(keyEvent.getDeviceId());

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -281,7 +281,6 @@ void setPixelSizes (int pixelWidth, int pixelHeight) {
 	 * @param parameter configures how the font is generated */
 	public FreeTypeBitmapFontData generateData (FreeTypeFontParameter parameter, FreeTypeBitmapFontData data) {
 		data.name = name + "-" + parameter.size;
-		parameter = parameter == null ? new FreeTypeFontParameter() : parameter;
 		char[] characters = parameter.characters.toCharArray();
 		int charactersLength = characters.length;
 		boolean incremental = parameter.incremental;

File: gdx/src/com/badlogic/gdx/utils/Queue.java
Patch:
@@ -112,7 +112,6 @@ protected void resize (int newSize) {
 		final int head = this.head;
 		final int tail = this.tail;
 
-		@SuppressWarnings("unchecked")
 		final T[] newArray = (T[])ArrayReflection.newInstance(values.getClass().getComponentType(), newSize);
 		if (head < tail) {
 			// Continuous

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl3/Lwjgl3TestStarter.java
Patch:
@@ -45,10 +45,10 @@ public static void main (String[] argv) {
 		new Lwjgl3Application(new TestChooser(), config);
 	}
 
-	private static class TestChooser extends ApplicationAdapter {
+	static class TestChooser extends ApplicationAdapter {
 		private Stage stage;
 		private Skin skin;
-		private TextButton lastClickedTestButton;
+		TextButton lastClickedTestButton;
 
 		public void create () {
 			final Preferences prefs = Gdx.app.getPreferences("lwjgl3-tests");

File: extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -44,6 +44,7 @@
 import com.badlogic.gdx.physics.box2d.joints.WheelJointDef;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;
+import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.LongMap;
 import com.badlogic.gdx.utils.Pool;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
@@ -402,7 +403,8 @@ public Joint createJoint (JointDef def) {
 		if (def.type == JointType.RopeJoint) joint = new RopeJoint(this, jointAddr);
 		if (def.type == JointType.WeldJoint) joint = new WeldJoint(this, jointAddr);
 		if (def.type == JointType.WheelJoint) joint = new WheelJoint(this, jointAddr);
-		if (joint != null) joints.put(joint.addr, joint);
+		if (joint == null) throw new GdxRuntimeException("Unknown joint type: " + def.type); 
+		joints.put(joint.addr, joint);
 		JointEdge jointEdgeA = new JointEdge(def.bodyB, joint);
 		JointEdge jointEdgeB = new JointEdge(def.bodyA, joint);
 		joint.jointEdgeA = jointEdgeA;

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -105,7 +105,7 @@ public IntFloatMap (int initialCapacity, float loadFactor) {
 			throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
 		if (loadFactor <= 0f || loadFactor >= 1f)
 			throw new IllegalArgumentException("loadFactor must be > 0 and < 1: " + loadFactor);
-		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(initialCapacity / loadFactor));
+		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(Math.max(1, initialCapacity) / loadFactor));
 		if (initialCapacity > 1 << 30)
 			throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 
@@ -446,7 +446,7 @@ private void resize (int newSize) {
 		valueTable = new float[newSize];
 
 		int oldSize = size;
-		size = 0;
+		size = hasZeroValue ? 1 : 0;
 		if (oldSize > 0) {
 			for (int i = 0; i < oldCapacity; i++) {
 				int key = oldKeyTable[i];

File: gdx/src/com/badlogic/gdx/utils/IntIntMap.java
Patch:
@@ -105,7 +105,7 @@ public IntIntMap (int initialCapacity, float loadFactor) {
 			throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
 		if (loadFactor <= 0f || loadFactor >= 1f)
 			throw new IllegalArgumentException("loadFactor must be > 0 and < 1: " + loadFactor);
-		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(initialCapacity / loadFactor));
+		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(Math.max(1, initialCapacity) / loadFactor));
 		if (initialCapacity > 1 << 30)
 			throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 
@@ -443,7 +443,7 @@ private void resize (int newSize) {
 		valueTable = new int[newSize];
 		
 		int oldSize = size;
-		size = 0;
+		size = hasZeroValue ? 1 : 0;
 		if (oldSize > 0) {
 			for (int i = 0; i < oldCapacity; i++) {
 				int key = oldKeyTable[i];

File: gdx/src/com/badlogic/gdx/utils/IntMap.java
Patch:
@@ -105,7 +105,7 @@ public IntMap (int initialCapacity, float loadFactor) {
 			throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
 		if (loadFactor <= 0f || loadFactor >= 1f)
 			throw new IllegalArgumentException("loadFactor must be > 0 and < 1: " + loadFactor);
-		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(initialCapacity / loadFactor));
+		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(Math.max(1, initialCapacity) / loadFactor));
 		if (initialCapacity > 1 << 30)
 			throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 
@@ -481,7 +481,7 @@ private void resize (int newSize) {
 		valueTable = (V[])new Object[newSize];
 
 		int oldSize = size;
-		size = 0;
+		size = hasZeroValue ? 1 : 0;
 		if (oldSize > 0) {
 			for (int i = 0; i < oldCapacity; i++) {
 				int key = oldKeyTable[i];

File: gdx/src/com/badlogic/gdx/utils/IntSet.java
Patch:
@@ -81,7 +81,7 @@ public IntSet (int initialCapacity, float loadFactor) {
 			throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
 		if (loadFactor <= 0f || loadFactor >= 1f)
 			throw new IllegalArgumentException("loadFactor must be > 0 and < 1: " + loadFactor);
-		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(initialCapacity / loadFactor));
+		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(Math.max(1, initialCapacity) / loadFactor));
 		if (initialCapacity > 1 << 30)
 			throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 
@@ -348,7 +348,7 @@ private void resize (int newSize) {
 		keyTable = new int[newSize];
 		
 		int oldSize = size;
-		size = 0;
+		size = hasZeroValue ? 1 : 0;
 		if (oldSize > 0) {
 			for (int i = 0; i < oldCapacity; i++) {
 				int key = oldKeyTable[i];

File: gdx/src/com/badlogic/gdx/utils/LongMap.java
Patch:
@@ -105,7 +105,7 @@ public LongMap (int initialCapacity, float loadFactor) {
 			throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
 		if (loadFactor <= 0f || loadFactor >= 1f)
 			throw new IllegalArgumentException("loadFactor must be > 0 and < 1: " + loadFactor);
-		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(initialCapacity / loadFactor));
+		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(Math.max(1, initialCapacity) / loadFactor));
 		if (initialCapacity > 1 << 30)
 			throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 
@@ -484,7 +484,7 @@ private void resize (int newSize) {
 		valueTable = (V[])new Object[newSize];
 
 		int oldSize = size;
-		size = 0;
+		size = hasZeroValue ? 1 : 0;
 		if (oldSize > 0) {
 			for (int i = 0; i < oldCapacity; i++) {
 				long key = oldKeyTable[i];

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -103,7 +103,7 @@ public ObjectFloatMap (int initialCapacity, float loadFactor) {
 			throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
 		if (loadFactor <= 0f || loadFactor >= 1f)
 			throw new IllegalArgumentException("loadFactor must be > 0 and < 1: " + loadFactor);
-		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(initialCapacity / loadFactor));
+		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(Math.max(1, initialCapacity) / loadFactor));
 		if (initialCapacity > 1 << 30)
 			throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -103,7 +103,7 @@ public ObjectIntMap (int initialCapacity, float loadFactor) {
 			throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
 		if (loadFactor <= 0f || loadFactor >= 1f)
 			throw new IllegalArgumentException("loadFactor must be > 0 and < 1: " + loadFactor);
-		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(initialCapacity / loadFactor));
+		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(Math.max(1, initialCapacity) / loadFactor));
 		if (initialCapacity > 1 << 30)
 			throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 

File: gdx/src/com/badlogic/gdx/utils/ObjectMap.java
Patch:
@@ -105,7 +105,7 @@ public ObjectMap (int initialCapacity, float loadFactor) {
 			throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
 		if (loadFactor <= 0f || loadFactor >= 1f)
 			throw new IllegalArgumentException("loadFactor must be > 0 and < 1: " + loadFactor);
-		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(initialCapacity / loadFactor));
+		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(Math.max(1, initialCapacity) / loadFactor));
 		if (initialCapacity > 1 << 30)
 			throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -100,7 +100,7 @@ public ObjectSet (int initialCapacity, float loadFactor) {
 			throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
 		if (loadFactor <= 0f || loadFactor >= 1f)
 			throw new IllegalArgumentException("loadFactor must be > 0 and < 1: " + loadFactor);
-		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(initialCapacity / loadFactor));
+		initialCapacity = MathUtils.nextPowerOfTwo((int)Math.ceil(Math.max(1, initialCapacity) / loadFactor));
 		if (initialCapacity > 1 << 30)
 			throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/BuildScriptHelper.java
Patch:
@@ -61,6 +61,7 @@ public static void addBuildScript(Language language, List<ProjectType> projects,
 
 	public static void addAllProjects(BufferedWriter wr) throws IOException {
 		write(wr, "allprojects {");
+		write(wr, "apply plugin: \"eclipse\"");
 		space(wr);
 		write(wr, "version = '1.0'");
 		write(wr, "ext {");

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -621,7 +621,6 @@ private String parseGradleArgs (List<ProjectType> modules, List<String> args) {
 		String argString = "";
 		if (args == null) return argString;
 		for (String argument : args) {
-			if (argument.equals("afterEclipseImport") && !modules.contains(ProjectType.DESKTOP)) continue;
 			argString += " " + argument;
 		}
 		return argString;

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/BuildScriptHelper.java
Patch:
@@ -61,6 +61,7 @@ public static void addBuildScript(Language language, List<ProjectType> projects,
 
 	public static void addAllProjects(BufferedWriter wr) throws IOException {
 		write(wr, "allprojects {");
+		write(wr, "apply plugin: \"eclipse\"");
 		space(wr);
 		write(wr, "version = '1.0'");
 		write(wr, "ext {");

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -621,7 +621,6 @@ private String parseGradleArgs (List<ProjectType> modules, List<String> args) {
 		String argString = "";
 		if (args == null) return argString;
 		for (String argument : args) {
-			if (argument.equals("afterEclipseImport") && !modules.contains(ProjectType.DESKTOP)) continue;
 			argString += " " + argument;
 		}
 		return argString;

File: gdx/src/com/badlogic/gdx/Net.java
Patch:
@@ -361,7 +361,7 @@ public enum Protocol {
 	 * @param port the port
 	 * @param hints additional {@link SocketHints} used to create the socket. Input null to use the default setting provided by the
 	 *           system.
-	 * @return GdxRuntimeException in case the socket couldn't be opened */
+	 * @throws GdxRuntimeException in case the socket couldn't be opened */
 	public Socket newClientSocket (Protocol protocol, String host, int port, SocketHints hints);
 
 	/** Launches the default browser to display a URI. If the default browser is not able to handle the specified URI, the

File: gdx/src/com/badlogic/gdx/Net.java
Patch:
@@ -361,7 +361,7 @@ public enum Protocol {
 	 * @param port the port
 	 * @param hints additional {@link SocketHints} used to create the socket. Input null to use the default setting provided by the
 	 *           system.
-	 * @return GdxRuntimeException in case the socket couldn't be opened */
+	 * @throws GdxRuntimeException in case the socket couldn't be opened */
 	public Socket newClientSocket (Protocol protocol, String host, int port, SocketHints hints);
 
 	/** Launches the default browser to display a URI. If the default browser is not able to handle the specified URI, the

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/ModelBuilder.java
Patch:
@@ -332,7 +332,7 @@ public Model createSphere (float width, float height, float depth, int divisions
 	public Model createSphere (float width, float height, float depth, int divisionsU, int divisionsV, int primitiveType,
 		final Material material, final long attributes, float angleUFrom, float angleUTo, float angleVFrom, float angleVTo) {
 		begin();
-		part("cylinder", primitiveType, attributes, material).sphere(width, height, depth, divisionsU, divisionsV, angleUFrom,
+		part("sphere", primitiveType, attributes, material).sphere(width, height, depth, divisionsU, divisionsV, angleUFrom,
 			angleUTo, angleVFrom, angleVTo);
 		return end();
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/ModelBuilder.java
Patch:
@@ -332,7 +332,7 @@ public Model createSphere (float width, float height, float depth, int divisions
 	public Model createSphere (float width, float height, float depth, int divisionsU, int divisionsV, int primitiveType,
 		final Material material, final long attributes, float angleUFrom, float angleUTo, float angleVFrom, float angleVTo) {
 		begin();
-		part("cylinder", primitiveType, attributes, material).sphere(width, height, depth, divisionsU, divisionsV, angleUFrom,
+		part("sphere", primitiveType, attributes, material).sphere(width, height, depth, divisionsU, divisionsV, angleUFrom,
 			angleUTo, angleVFrom, angleVTo);
 		return end();
 	}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -87,8 +87,8 @@ static void initializeGlfw() {
 	public Lwjgl3Application(ApplicationListener listener, Lwjgl3ApplicationConfiguration config) {
 		initializeGlfw();
 		setApplicationLogger(new Lwjgl3ApplicationLogger());
-		this.config = Lwjgl3ApplicationConfiguration.copy(config);
-		if (this.config.title == null) this.config.title = listener.getClass().getSimpleName();
+		if (config.title == null) config.title = listener.getClass().getSimpleName();
+		this.config = config = Lwjgl3ApplicationConfiguration.copy(config);
 		Gdx.app = this;
 		if (!config.disableAudio) {
 			try {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3WindowConfiguration.java
Patch:
@@ -39,7 +39,7 @@ public class Lwjgl3WindowConfiguration {
 	String[] windowIconPaths;
 	Lwjgl3WindowListener windowListener;
 	Lwjgl3DisplayMode fullscreenMode;
-	String title = "";
+	String title;
 	Color initialBackgroundColor = Color.BLACK;
 	boolean initialVisible = true;
 	boolean vSyncEnabled = true;

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -87,8 +87,8 @@ static void initializeGlfw() {
 	public Lwjgl3Application(ApplicationListener listener, Lwjgl3ApplicationConfiguration config) {
 		initializeGlfw();
 		setApplicationLogger(new Lwjgl3ApplicationLogger());
+		if (config.title == null) config.title = listener.getClass().getSimpleName();
 		this.config = Lwjgl3ApplicationConfiguration.copy(config);
-		if (this.config.title == null) this.config.title = listener.getClass().getSimpleName();
 		Gdx.app = this;
 		if (!config.disableAudio) {
 			try {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3WindowConfiguration.java
Patch:
@@ -39,7 +39,7 @@ public class Lwjgl3WindowConfiguration {
 	String[] windowIconPaths;
 	Lwjgl3WindowListener windowListener;
 	Lwjgl3DisplayMode fullscreenMode;
-	String title = "";
+	String title;
 	Color initialBackgroundColor = Color.BLACK;
 	boolean initialVisible = true;
 	boolean vSyncEnabled = true;

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3WindowConfiguration.java
Patch:
@@ -126,8 +126,8 @@ public void setAutoIconify (boolean autoIconify) {
 	}
 
 	/**
-	 * Sets the position of the window in windowed mode on the
-	 * primary monitor. Default -1 for both coordinates for centered.
+	 * Sets the position of the window in windowed mode.
+	 * Default -1 for both coordinates for centered on primary monitor.
 	 */
 	public void setWindowPosition(int x, int y) {
 		windowX = x;

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -474,7 +474,7 @@ public void shuffle () {
 	 * <p>
 	 * If {@link Collections#allocateIterators} is false, the same iterator instance is returned each time this method is called.
 	 * Use the {@link ArrayIterator} constructor for nested or multithreaded iteration. */
-	public Iterator<T> iterator () {
+	public ArrayIterator<T> iterator () {
 		if (Collections.allocateIterators) return new ArrayIterator(this, true);
 		if (iterable == null) iterable = new ArrayIterable(this);
 		return iterable.iterator();
@@ -650,7 +650,7 @@ public void reset () {
 			index = 0;
 		}
 
-		public Iterator<T> iterator () {
+		public ArrayIterator<T> iterator () {
 			return this;
 		}
 	}
@@ -672,7 +672,7 @@ public ArrayIterable (Array<T> array, boolean allowRemove) {
 		}
 
 		/** @see Collections#allocateIterators */
-		public Iterator<T> iterator () {
+		public ArrayIterator<T> iterator () {
 			if (Collections.allocateIterators) return new ArrayIterator(array, allowRemove);
 // lastAcquire.getBuffer().setLength(0);
 // new Throwable().printStackTrace(new java.io.PrintWriter(lastAcquire));

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFiles.java
Patch:
@@ -24,7 +24,7 @@
 
 public class GwtFiles implements Files {
 	
-	public static final Storage LocalStorage = Storage.getLocalStorageIfSupported();
+	public static final Storage LocalStorage = Storage.getLocalStorageIfSupported(); // Can be null if cookies are disabled or blocked by the browser with "block third-party cookies"
 	
 	final Preloader preloader;
 	

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -166,8 +166,9 @@ public BitmapFont generateFont (FreeTypeFontParameter parameter, FreeTypeBitmapF
 		return font;
 	}
 	
+	/** Create a new {@link BitmapFont} instance for inject customized {@link BitmapFont} (ex. support RTL fonts). */
 	protected BitmapFont newBitmapFont(BitmapFont.BitmapFontData data, Array<TextureRegion> pageRegions, boolean integer) {
-		return new BitmapFont(data, pageRegions, true);
+		return new BitmapFont(data, pageRegions, integer);
 	}
 	
 	/** Uses ascender and descender of font to calculate real height that makes all glyphs to fit in given pixel size. Source:

File: gdx/src/com/badlogic/gdx/utils/I18NBundle.java
Patch:
@@ -427,7 +427,7 @@ private void setLocale (Locale locale) {
 	 *               returns {@code true}
 	 * @return the string for the given key or the key surrounded by {@code ???} if it cannot be found and
 	 *         {@link #getExceptionOnMissingKey()} returns {@code false} */
-	public final String get (String key) {
+	public String get (String key) {
 		String result = properties.get(key);
 		if (result == null) {
 			if (parent != null) result = parent.get(key);

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -326,7 +326,7 @@ private void requireGlyphs (GlyphLayout layout) {
 	private void requirePageGlyphs (int page, int glyphCount) {
 		if (pageGlyphIndices != null) {
 			if (glyphCount > pageGlyphIndices[page].items.length)
-				pageGlyphIndices[page].ensureCapacity(glyphCount - pageGlyphIndices[page].items.length);
+				pageGlyphIndices[page].ensureCapacity(glyphCount - pageGlyphIndices[page].size);
 		}
 
 		int vertexCount = idx[page] + glyphCount * 20;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtInput.java
Patch:
@@ -588,8 +588,9 @@ private void handleEvent (NativeEvent e) {
 			hasFocus = true;
 			this.justTouched = true;
 			this.touched[0] = true;
-			this.pressedButtons.add(getButton(e.getButton()));
-			justPressedButtons[e.getButton()] = true;
+			final int button = getButton(e.getButton());
+			this.pressedButtons.add(button);
+			justPressedButtons[button] = true;
 			this.deltaX[0] = 0;
 			this.deltaY[0] = 0;
 			if (isCursorCatched()) {

File: gdx/src/com/badlogic/gdx/Input.java
Patch:
@@ -653,7 +653,7 @@ public enum Peripheral {
 	public boolean isButtonPressed (int button);
 
 	/** Returns whether a given button has just been pressed. Button constants can be found in {@link Buttons}. On Android only the Buttons#LEFT
-	 * constant is meaningful before version 4.0.
+	 * constant is meaningful before version 4.0. On WebGL (GWT), only LEFT, RIGHT and MIDDLE buttons are supported.
 	 *
 	 * @param button the button to check.
 	 * @return true or false. */

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTestWrapper.java
Patch:
@@ -359,7 +359,7 @@ public boolean isKeyJustPressed (int key) {
 
 		@Override
 		public boolean isButtonJustPressed (int button) {
-			return false;
+			return input.isButtonJustPressed(button);
 		}
 
 		@Override

File: gdx/src/com/badlogic/gdx/math/MathUtils.java
Patch:
@@ -69,12 +69,12 @@ static public float cos (float radians) {
 		return Sin.table[(int)((radians + PI / 2) * radToIndex) & SIN_MASK];
 	}
 
-	/** Returns the sine in radians from a lookup table. */
+	/** Returns the sine in degrees from a lookup table. */
 	static public float sinDeg (float degrees) {
 		return Sin.table[(int)(degrees * degToIndex) & SIN_MASK];
 	}
 
-	/** Returns the cosine in radians from a lookup table. */
+	/** Returns the cosine in degrees from a lookup table. */
 	static public float cosDeg (float degrees) {
 		return Sin.table[(int)((degrees + 90) * degToIndex) & SIN_MASK];
 	}

File: gdx/src/com/badlogic/gdx/math/MathUtils.java
Patch:
@@ -69,12 +69,12 @@ static public float cos (float radians) {
 		return Sin.table[(int)((radians + PI / 2) * radToIndex) & SIN_MASK];
 	}
 
-	/** Returns the sine in radians from a lookup table. */
+	/** Returns the sine in degrees from a lookup table. */
 	static public float sinDeg (float degrees) {
 		return Sin.table[(int)(degrees * degToIndex) & SIN_MASK];
 	}
 
-	/** Returns the cosine in radians from a lookup table. */
+	/** Returns the cosine in degrees from a lookup table. */
 	static public float cosDeg (float degrees) {
 		return Sin.table[(int)((degrees + 90) * degToIndex) & SIN_MASK];
 	}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3WindowConfiguration.java
Patch:
@@ -167,7 +167,7 @@ public void setWindowListener(Lwjgl3WindowListener windowListener) {
 
 	/**
 	 * Sets the app to use fullscreen mode. Use the static methods like
-	 * {@link #getDisplayMode()} on this class to enumerate connected monitors
+	 * {@link Lwjgl3ApplicationConfiguration#getDisplayMode()} on this class to enumerate connected monitors
 	 * and their fullscreen display modes.
 	 */
 	public void setFullscreenMode(DisplayMode mode) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -473,8 +473,9 @@ static public class AtlasRegion extends TextureRegion {
 		 * @see TextureAtlas#findRegions(String) */
 		public int index;
 
-		/** The name of the original image file, up to the first underscore. Underscores denote special instructions to the texture
-		 * packer. */
+		/** The name of the original image file, without the file's extension.<br>
+		 * If the name ends with an underscore followed by only numbers, that part is excluded: 
+		 * underscores denote special instructions to the texture packer. */
 		public String name;
 
 		/** The offset from the left of the original image to the left of the packed image, after whitespace was removed for packing. */

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/Mp3.java
Patch:
@@ -41,7 +41,6 @@ public Music (OpenALAudio audio, FileHandle file) {
 			if (audio.noDevice) return;
 			bitstream = new Bitstream(file.read());
 			decoder = new MP3Decoder();
-			bufferOverhead = 4096;
 			try {
 				Header header = bitstream.readFrame();
 				if (header == null) throw new GdxRuntimeException("Empty MP3");

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OpenALMusic.java
Patch:
@@ -51,7 +51,6 @@ public abstract class OpenALMusic implements Music {
 	private float renderedSeconds, maxSecondsPerBuffer;
 
 	protected final FileHandle file;
-	protected int bufferOverhead = 0;
 
 	private OnCompletionListener onCompletionListener;
 
@@ -64,7 +63,7 @@ public OpenALMusic (OpenALAudio audio, FileHandle file) {
 	protected void setup (int channels, int sampleRate) {
 		this.format = channels > 1 ? AL_FORMAT_STEREO16 : AL_FORMAT_MONO16;
 		this.sampleRate = sampleRate;
-		maxSecondsPerBuffer = (float)(bufferSize - bufferOverhead) / (bytesPerSample * channels * sampleRate);
+		maxSecondsPerBuffer = (float)bufferSize / (bytesPerSample * channels * sampleRate);
 	}
 
 	public void play () {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/Mp3.java
Patch:
@@ -41,7 +41,6 @@ public Music (OpenALAudio audio, FileHandle file) {
 			if (audio.noDevice) return;
 			bitstream = new Bitstream(file.read());
 			decoder = new MP3Decoder();
-			bufferOverhead = 4096;
 			try {
 				Header header = bitstream.readFrame();
 				if (header == null) throw new GdxRuntimeException("Empty MP3");

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALMusic.java
Patch:
@@ -52,7 +52,6 @@ public abstract class OpenALMusic implements Music {
 	private float renderedSeconds, maxSecondsPerBuffer;
 
 	protected final FileHandle file;
-	protected int bufferOverhead = 0;
 
 	private OnCompletionListener onCompletionListener;
 
@@ -65,7 +64,7 @@ public OpenALMusic (OpenALAudio audio, FileHandle file) {
 	protected void setup (int channels, int sampleRate) {
 		this.format = channels > 1 ? AL_FORMAT_STEREO16 : AL_FORMAT_MONO16;
 		this.sampleRate = sampleRate;
-		maxSecondsPerBuffer = (float)(bufferSize - bufferOverhead) / (bytesPerSample * channels * sampleRate);
+		maxSecondsPerBuffer = (float)bufferSize / (bytesPerSample * channels * sampleRate);
 	}
 
 	public void play () {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/Mp3.java
Patch:
@@ -41,7 +41,6 @@ public Music (OpenALAudio audio, FileHandle file) {
 			if (audio.noDevice) return;
 			bitstream = new Bitstream(file.read());
 			decoder = new MP3Decoder();
-			bufferOverhead = 4096;
 			try {
 				Header header = bitstream.readFrame();
 				if (header == null) throw new GdxRuntimeException("Empty MP3");

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OpenALMusic.java
Patch:
@@ -51,7 +51,6 @@ public abstract class OpenALMusic implements Music {
 	private float renderedSeconds, maxSecondsPerBuffer;
 
 	protected final FileHandle file;
-	protected int bufferOverhead = 0;
 
 	private OnCompletionListener onCompletionListener;
 
@@ -64,7 +63,7 @@ public OpenALMusic (OpenALAudio audio, FileHandle file) {
 	protected void setup (int channels, int sampleRate) {
 		this.format = channels > 1 ? AL_FORMAT_STEREO16 : AL_FORMAT_MONO16;
 		this.sampleRate = sampleRate;
-		maxSecondsPerBuffer = (float)(bufferSize - bufferOverhead) / (bytesPerSample * channels * sampleRate);
+		maxSecondsPerBuffer = (float)bufferSize / (bytesPerSample * channels * sampleRate);
 	}
 
 	public void play () {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/Mp3.java
Patch:
@@ -41,7 +41,6 @@ public Music (OpenALAudio audio, FileHandle file) {
 			if (audio.noDevice) return;
 			bitstream = new Bitstream(file.read());
 			decoder = new MP3Decoder();
-			bufferOverhead = 4096;
 			try {
 				Header header = bitstream.readFrame();
 				if (header == null) throw new GdxRuntimeException("Empty MP3");

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALMusic.java
Patch:
@@ -52,7 +52,6 @@ public abstract class OpenALMusic implements Music {
 	private float renderedSeconds, maxSecondsPerBuffer;
 
 	protected final FileHandle file;
-	protected int bufferOverhead = 0;
 
 	private OnCompletionListener onCompletionListener;
 
@@ -65,7 +64,7 @@ public OpenALMusic (OpenALAudio audio, FileHandle file) {
 	protected void setup (int channels, int sampleRate) {
 		this.format = channels > 1 ? AL_FORMAT_STEREO16 : AL_FORMAT_MONO16;
 		this.sampleRate = sampleRate;
-		maxSecondsPerBuffer = (float)(bufferSize - bufferOverhead) / (bytesPerSample * channels * sampleRate);
+		maxSecondsPerBuffer = (float)bufferSize / (bytesPerSample * channels * sampleRate);
 	}
 
 	public void play () {

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -473,8 +473,9 @@ static public class AtlasRegion extends TextureRegion {
 		 * @see TextureAtlas#findRegions(String) */
 		public int index;
 
-		/** The name of the original image file, up to the first underscore. Underscores denote special instructions to the texture
-		 * packer. */
+		/** The name of the original image file, without the file's extension.<br>
+		 * If the name ends with an underscore followed by only numbers, that part is excluded: 
+		 * underscores denote special instructions to the texture packer. */
 		public String name;
 
 		/** The offset from the left of the original image to the left of the packed image, after whitespace was removed for packing. */

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3WindowConfiguration.java
Patch:
@@ -167,7 +167,7 @@ public void setWindowListener(Lwjgl3WindowListener windowListener) {
 
 	/**
 	 * Sets the app to use fullscreen mode. Use the static methods like
-	 * {@link #getDisplayMode()} on this class to enumerate connected monitors
+	 * {@link Lwjgl3ApplicationConfiguration#getDisplayMode()} on this class to enumerate connected monitors
 	 * and their fullscreen display modes.
 	 */
 	public void setFullscreenMode(DisplayMode mode) {

File: gdx/src/com/badlogic/gdx/graphics/Color.java
Patch:
@@ -481,7 +481,7 @@ public static void argb8888ToColor (Color color, int value) {
 		color.b = ((value & 0x000000ff)) / 255f;
 	}
 
-	/** Sets the Color components using the specified float value in the format ABGB8888.
+	/** Sets the Color components using the specified float value in the format ABGR8888.
 	 * @param color The Color to be modified. */
 	public static void abgr8888ToColor (Color color, float value) {
 		int c = NumberUtils.floatToIntColor(value);

File: gdx/src/com/badlogic/gdx/graphics/Color.java
Patch:
@@ -481,7 +481,7 @@ public static void argb8888ToColor (Color color, int value) {
 		color.b = ((value & 0x000000ff)) / 255f;
 	}
 
-	/** Sets the Color components using the specified float value in the format ABGB8888.
+	/** Sets the Color components using the specified float value in the format ABGR8888.
 	 * @param color The Color to be modified. */
 	public static void abgr8888ToColor (Color color, float value) {
 		int c = NumberUtils.floatToIntColor(value);

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePacker.java
Patch:
@@ -167,13 +167,13 @@ public void progress (float progress) {
 			}
 			progress.end();
 
-			progress.start(0.19f);
+			progress.start(0.35f);
 			progress.count = 0;
 			progress.total = imageProcessor.getImages().size;
 			Array<Page> pages = packer.pack(progress, imageProcessor.getImages());
 			progress.end();
 
-			progress.start(0.45f);
+			progress.start(0.29f);
 			progress.count = 0;
 			progress.total = pages.size;
 			String scaledPackFileName = settings.getScaledPackFileName(packFileName, i);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -274,7 +274,7 @@ protected void calculateOffsets () {
 		visibleTextEnd = Math.max(0, end - 1);
 
 		if ((textHAlign & Align.left) == 0) {
-			textOffset = visibleWidth - (glyphPositions[visibleTextEnd] - startX);
+			textOffset = visibleWidth - glyphPositions[visibleTextEnd] - fontOffset + startX;
 			if ((textHAlign & Align.center) != 0) textOffset = Math.round(textOffset * 0.5f);
 		} else
 			textOffset = startX + renderOffset;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/BaseDrawable.java
Patch:
@@ -99,7 +99,7 @@ public void setMinHeight (float minHeight) {
 
 	public void setMinSize (float minWidth, float minHeight) {
 		setMinWidth(minWidth);
-		setMinHeight(minWidth);
+		setMinHeight(minHeight);
 	}
 
 	public String getName () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/BaseDrawable.java
Patch:
@@ -99,7 +99,7 @@ public void setMinHeight (float minHeight) {
 
 	public void setMinSize (float minWidth, float minHeight) {
 		setMinWidth(minWidth);
-		setMinHeight(minWidth);
+		setMinHeight(minHeight);
 	}
 
 	public String getName () {

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -1111,11 +1111,11 @@ public <T> T readValue (Class<T> type, Class elementType, JsonValue jsonData) {
 	 * object. The <code>to</code> object must have at least all the fields of the <code>from</code> object with the same name and
 	 * type. */
 	public void copyFields (Object from, Object to) {
-		OrderedMap<String, FieldMetadata> toFields = getFields(from.getClass());
+		OrderedMap<String, FieldMetadata> toFields = getFields(to.getClass());
 		for (ObjectMap.Entry<String, FieldMetadata> entry : getFields(from.getClass())) {
 			FieldMetadata toField = toFields.get(entry.key);
 			Field fromField = entry.value.field;
-			if (toField == null) throw new SerializationException("To object is missing field" + entry.key);
+			if (toField == null) throw new SerializationException("To object is missing field: " + entry.key);
 			try {
 				toField.field.set(to, fromField.get(from));
 			} catch (ReflectionException ex) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -248,6 +248,7 @@ public class GdxTests {
 		TideMapAssetManagerTest.class,
 		TideMapDirectLoaderTest.class,
 		TileTest.class,
+		TiledMapAnimationLoadingTest.class,
 		TiledMapAssetManagerTest.class,
 		TiledMapGroupLayerTest.class,
 		TiledMapAtlasAssetManagerTest.class,

File: gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java
Patch:
@@ -658,7 +658,8 @@ protected void addTileObjectGroup (TiledMapTile tile, Element tileElement) {
 		}
 	}
 
-	protected AnimatedTiledMapTile createAnimatedTile (TiledMapTileSet tileSet, TiledMapTile tile, Element tileElement, int firstgid) {
+	protected AnimatedTiledMapTile createAnimatedTile (TiledMapTileSet tileSet, TiledMapTile tile, Element tileElement,
+		int firstgid) {
 		Element animationElement = tileElement.getChildByName("animation");
 		if (animationElement != null) {
 			Array<StaticTiledMapTile> staticTiles = new Array<StaticTiledMapTile>();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -248,6 +248,7 @@ public class GdxTests {
 		TideMapAssetManagerTest.class,
 		TideMapDirectLoaderTest.class,
 		TileTest.class,
+		TiledMapAnimationLoadingTest.class,
 		TiledMapAssetManagerTest.class,
 		TiledMapGroupLayerTest.class,
 		TiledMapAtlasAssetManagerTest.class,

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3WindowConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import com.badlogic.gdx.Graphics.DisplayMode;
 import com.badlogic.gdx.backends.lwjgl3.Lwjgl3Graphics.Lwjgl3DisplayMode;
 import com.badlogic.gdx.graphics.Color;
+import com.badlogic.gdx.
 
 public class Lwjgl3WindowConfiguration {
 	int windowX = -1;
@@ -113,8 +114,8 @@ public void setMaximized(boolean maximized) {
 	/**
 	 * @param monitor what monitor the window should maximize to
 	 */
-	public void setMaximizedMonitor(Lwjgl3Graphics.Lwjgl3Monitor monitor) {
-		this.maximizedMonitor = monitor;
+	public void setMaximizedMonitor(Graphics.Monitor monitor) {
+		this.maximizedMonitor = (Lwjgl3Graphics.Lwjgl3Monitor) monitor;
 	}
 
 	/**

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/Language.java
Patch:
@@ -2,9 +2,9 @@
 
 public enum Language {
 	JAVA ("java", "", "", "", "java-library;java-library;android;java-library,robovm;java-library,moe;java-library,gwt,war", true) ,
-	KOTLIN ("kotlin", "ext.kotlinVersion = '1.2.71'",
+	KOTLIN ("kotlin", "ext.kotlinVersion = '1.3.41'",
 			"classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\"", 
-			"compile \"org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion\"",
+			"api \"org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion\"",
 			"kotlin;kotlin;android,kotlin-android;kotlin,robovm;moe; ",
 			false);
 	

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -233,8 +233,7 @@ public void draw (Batch batch, float parentAlpha) {
 			background = style.over;
 		} else if (focused && style.focused != null) {
 			background = style.focused;
-		} else if (style.up != null) //
-		{
+		} else if (style.up != null) {
 			background = style.up;
 		}
 		setBackground(background);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -691,7 +691,7 @@ public int getRow (float y) {
 			if (c.actorY + c.computedPadTop < y) break;
 			if (c.endRow) row++;
 		}
-		return row;
+		return Math.min(row, rows - 1);
 	}
 
 	public void setSkin (Skin skin) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -426,8 +426,8 @@ void updateDisplayText () {
 			fontOffset = 0;
 		glyphPositions.add(x);
 
-		visibleTextStart = Math.min(visibleTextStart, glyphPositions.size);
-		visibleTextEnd = MathUtils.clamp(visibleTextEnd, visibleTextStart, glyphPositions.size);
+		visibleTextStart = Math.min(visibleTextStart, glyphPositions.size - 1);
+		visibleTextEnd = MathUtils.clamp(visibleTextEnd, visibleTextStart, glyphPositions.size - 1);
 
 		if (selectionStart > newDisplayText.length()) selectionStart = textLength;
 	}

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/AntScriptGenerator.java
Patch:
@@ -42,7 +42,7 @@
  * BuildConfig config = new BuildConfig("mysharedlibrary");
  * 
  * new AntScriptGenerator().generate(config, win32, win64, linux32, linux64, mac, android);
- * BuildExecutor.executeAnt("jni/build.xml", "clean all -v");
+ * BuildExecutor.executeAnt("jni/build.xml", "clean", "all", "-v");
  * 
  * // assuming the natives jar is on the classpath of the application 
  * new SharedLibraryLoader().load("mysharedlibrary)

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/test/MyJniClass.java
Patch:
@@ -75,8 +75,8 @@ public static void main(String[] args) throws Exception {
 		new AntScriptGenerator().generate(buildConfig, win32, lin64);
 		
 		// build natives
-		BuildExecutor.executeAnt("jni/build-linux64.xml", "-v -Dhas-compiler=true clean postcompile");
-		BuildExecutor.executeAnt("jni/build.xml", "-v pack-natives");
+		BuildExecutor.executeAnt("jni/build-linux64.xml", "-v", "-Dhas-compiler=true", "clean", "postcompile");
+		BuildExecutor.executeAnt("jni/build.xml", "-v", "pack-natives");
 		
 		// load the test-natives.jar and from it the shared library, then execute the test. 
 		new JniGenSharedLibraryLoader("libs/test-natives.jar").load("test");
@@ -89,4 +89,4 @@ public static void main(String[] args) throws Exception {
 			new float[] { 13 }, new double[] { 14 }, 
 			null, "Hurray", MyJniClass.class, new RuntimeException(), new MyJniClass());
 	}
-}
\ No newline at end of file
+}

File: gdx/src/com/badlogic/gdx/utils/OrderedSet.java
Patch:
@@ -91,6 +91,7 @@ public Array<T> orderedItems () {
 	}
 
 	public OrderedSetIterator<T> iterator () {
+		if (Array.allocateIterators) return new OrderedSetIterator(this);
 		if (iterator1 == null) {
 			iterator1 = new OrderedSetIterator(this);
 			iterator2 = new OrderedSetIterator(this);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java
Patch:
@@ -189,10 +189,9 @@ private float plusMinusWidth () {
 	private void computeSize () {
 		sizeInvalid = false;
 		prefWidth = plusMinusWidth();
-		prefHeight = getHeight();
+		prefHeight = 0;
 		computeSize(rootNodes, 0, prefWidth);
 		prefWidth += paddingLeft + paddingRight;
-		prefHeight = getHeight() - prefHeight;
 	}
 
 	private void computeSize (Array<N> nodes, float indent, float plusMinusWidth) {
@@ -215,7 +214,7 @@ private void computeSize (Array<N> nodes, float indent, float plusMinusWidth) {
 				node.height = Math.max(node.height, node.icon.getMinHeight());
 			}
 			prefWidth = Math.max(prefWidth, rowWidth);
-			prefHeight -= node.height + ySpacing;
+			prefHeight += node.height + ySpacing;
 			if (node.expanded) computeSize(node.children, indent + indentSpacing, plusMinusWidth);
 		}
 	}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtNet.java
Patch:
@@ -61,7 +61,7 @@ public HttpClientResponse (Response response) {
 
 		@Override
 		public byte[] getResult () {
-			throw new GdxRuntimeException("HttpResponse.getResult() not available on GWT. " +
+			throw new GdxRuntimeException("HttpResponse.getResult() is not available on GWT. " +
 					"Use getResultAsString() if possible, or make use of AssetDownloader class.");
 		}
 
@@ -72,7 +72,7 @@ public String getResultAsString () {
 
 		@Override
 		public InputStream getResultAsStream () {
-			throw new GdxRuntimeException("HttpResponse.getResultAsStream not available on GWT. " +
+			throw new GdxRuntimeException("HttpResponse.getResultAsStream() is not available on GWT. " +
 					"Use getResultAsString() if possible, or make use of AssetDownloader class.");
 		}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtInputTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.InputProcessor;
 import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.graphics.Color;
@@ -36,6 +37,7 @@ public void create () {
 		renderer = new ShapeRenderer();
 		Gdx.input.setInputProcessor(this);
 		Gdx.app.setLogLevel(Application.LOG_DEBUG);
+		Gdx.input.setCursorCatched(true);
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTestWrapper.java
Patch:
@@ -146,12 +146,12 @@ public void create () {
 		Arrays.sort(tests, new Comparator<Instancer>() {
 			@Override
 			public int compare (Instancer o1, Instancer o2) {
-				return o1.instance().getClass().getName().compareTo(o2.instance().getClass().getName());
+				return o1.instance().getClass().getSimpleName().compareTo(o2.instance().getClass().getSimpleName());
 			}
 		});
 		for (final Instancer instancer : tests) {
 			table.row();
-			TextButton button = new TextButton(instancer.instance().getClass().getName(), skin);
+			TextButton button = new TextButton(instancer.instance().getClass().getSimpleName(), skin);
 			button.addListener(new ClickListener() {
 				@Override
 				public void clicked (InputEvent event, float x, float y) {
@@ -491,7 +491,7 @@ interface Instancer {
 
 	Instancer[] tests = {new Instancer() {
 		public GdxTest instance () {
-			return new AccelerometerTest();
+			return new GwtInputTest();
 		}
 	}, new Instancer() {
 		public GdxTest instance () {

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSApplicationConfiguration.java
Patch:
@@ -90,7 +90,7 @@ public class IOSApplicationConfiguration {
 	public boolean useCompass = true;
 
 	/** whether or not to allow background music from iPod **/
-	public boolean allowIpod = false;
+	public boolean allowIpod = true;
 	
 	/** whether or not the onScreenKeyboard should be closed on return key **/
 	public boolean keyboardCloseOnReturn = true;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplicationConfiguration.java
Patch:
@@ -91,7 +91,7 @@ public class IOSApplicationConfiguration {
 	public boolean useCompass = true;
 
 	/** whether or not to allow background music from iPod **/
-	public boolean allowIpod = false;
+	public boolean allowIpod = true;
 
 	/** whether or not the onScreenKeyboard should be closed on return key **/
 	public boolean keyboardCloseOnReturn = true;

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSApplicationConfiguration.java
Patch:
@@ -88,7 +88,7 @@ public class IOSApplicationConfiguration {
 	public boolean useCompass = true;
 
 	/** whether or not to allow background music from iPod **/
-	public boolean allowIpod = false;
+	public boolean allowIpod = true;
 	
 	/** whether or not the onScreenKeyboard should be closed on return key **/
 	public boolean keyboardCloseOnReturn = true;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplicationConfiguration.java
Patch:
@@ -89,7 +89,7 @@ public class IOSApplicationConfiguration {
 	public boolean useCompass = true;
 
 	/** whether or not to allow background music from iPod **/
-	public boolean allowIpod = false;
+	public boolean allowIpod = true;
 
 	/** whether or not the onScreenKeyboard should be closed on return key **/
 	public boolean keyboardCloseOnReturn = true;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -33,7 +33,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new BitmapFontWriterTest();
+		GdxTest test = new TreeTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplicationConfiguration.java
Patch:
@@ -22,8 +22,7 @@
 import com.google.gwt.user.client.ui.TextArea;
 
 public class GwtApplicationConfiguration {
-	/** If true, SoundManager2 will not be used. This means {@link Application#getAudio()} returns null and the SoundManager2 file
-	 * are not used. */
+	/** If true, audio backend will not be used. This means {@link Application#getAudio()} returns null. */
 	public boolean disableAudio;
 	/** the width of the drawing area in pixels **/
 	public int width;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/webaudio/WebAudioAPIMusic.java
Patch:
@@ -43,13 +43,13 @@ public WebAudioAPIMusic (JavaScriptObject audioContext, Audio audio, AudioContro
 		JavaScriptObject audioSourceNode = createMediaElementAudioSourceNode(audioContext, audio.getAudioElement());
 
 		// Setup the sound graph to control pan and volume
-		audioControlGraph = audioControlGraphPool.newObject();
+		audioControlGraph = audioControlGraphPool.obtain();
 		audioControlGraph.setSource(audioSourceNode);
 	}
 
 	public void ended()
 	{
-		this.onCompletionListener.onCompletion(this);
+		if(this.onCompletionListener != null) this.onCompletionListener.onCompletion(this);
 	}
 
 	public native JavaScriptObject createMediaElementAudioSourceNode(JavaScriptObject audioContext, JavaScriptObject audioElement) /*-{

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtClipboard.java
Patch:
@@ -36,7 +36,7 @@ public String getContents () {
 	@Override
 	public void setContents (String content) {
 		this.content = content;
-		if (requestedWritePermissions) {
+		if (requestedWritePermissions || GwtApplication.agentInfo().isFirefox()) {
 			if (hasWritePermissions)
 				setContentJSNI(content);
 		} else {

File: gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java
Patch:
@@ -260,12 +260,12 @@ protected void loadImageLayer (TiledMap map, MapLayers parentLayers, Element ele
 			if (element.hasAttribute("offsetx")) {
 				x = Float.parseFloat(element.getAttribute("offsetx", "0"));
 			} else {
-				x = Integer.parseInt(element.getAttribute("x", "0"));
+				x = Float.parseFloat(element.getAttribute("x", "0"));
 			}
 			if (element.hasAttribute("offsety")) {
 				y = Float.parseFloat(element.getAttribute("offsety", "0"));
 			} else {
-				y = Integer.parseInt(element.getAttribute("y", "0"));
+				y = Float.parseFloat(element.getAttribute("y", "0"));
 			}
 			if (flipY) y = mapHeightInPixels - y;
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplicationConfiguration.java
Patch:
@@ -44,7 +44,7 @@ public class GwtApplicationConfiguration {
 	/** whether to use debugging mode for OpenGL calls. Errors will result in a RuntimeException being thrown. */
 	public boolean useDebugGL = false;
 	/** whether SoundManager2 should prefer to use flash instead of html5 audio (it should fall back if not available) */
-	public boolean preferFlash = true;
+	public boolean preferFlash = false;
 	/** preserve the back buffer, needed if you fetch a screenshot via canvas#toDataUrl, may have performance impact **/
 	public boolean preserveDrawingBuffer = false;
 	/** whether to include an alpha channel in the color buffer to combine the color buffer with the rest of the webpage

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -144,7 +144,7 @@ protected TouchEvent newObject () {
 	private InputProcessor processor;
 	private final AndroidApplicationConfiguration config;
 	protected final Orientation nativeOrientation;
-	private long currentEventTimeStamp = System.nanoTime();
+	private long currentEventTimeStamp = 0;
 	private final AndroidOnscreenKeyboard onscreenKeyboard;
 
 	private SensorEventListener accelerometerListener;

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSInput.java
Patch:
@@ -64,7 +64,7 @@ protected TouchEvent newObject () {
 		}
 	};
 	Array<TouchEvent> touchEvents = new Array<TouchEvent>();
-	TouchEvent currentEvent = null;
+	private long currentEventTimeStamp = 0;
 	float[] acceleration = new float[3];
 	float[] rotation = new float[3];
 	float[] R = new float[9];
@@ -463,7 +463,7 @@ public void cancelVibrate () {
 
 	@Override
 	public long getCurrentEventTime () {
-		return currentEvent.timestamp;
+		return currentEventTimeStamp;
 	}
 
 	@Override
@@ -556,7 +556,7 @@ void processEvents () {
 		synchronized (touchEvents) {
 			justTouched = false;
 			for (TouchEvent event : touchEvents) {
-				currentEvent = event;
+				currentEventTimeStamp = event.timestamp;
 				if (event.phase == UITouchPhase.Began) {
 					if (inputProcessor != null) inputProcessor.touchDown(event.x, event.y, event.pointer, Buttons.LEFT);
 					if (numTouched == 1) justTouched = true;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSInput.java
Patch:
@@ -86,7 +86,7 @@ protected TouchEvent newObject () {
 		}
 	};
 	Array<TouchEvent> touchEvents = new Array<TouchEvent>();
-	TouchEvent currentEvent = null;
+	private long currentEventTimeStamp = 0;
 	float[] acceleration = new float[3];
 	float[] rotation = new float[3];
 	float[] R = new float[9];
@@ -528,7 +528,7 @@ public void cancelVibrate () {
 
 	@Override
 	public long getCurrentEventTime () {
-		return currentEvent.timestamp;
+		return currentEventTimeStamp;
 	}
 
 	@Override
@@ -629,7 +629,7 @@ void processEvents () {
 		synchronized (touchEvents) {
 			justTouched = false;
 			for (TouchEvent event : touchEvents) {
-				currentEvent = event;
+				currentEventTimeStamp = event.timestamp;
 				switch (event.phase) {
 				case Began:
 					if (inputProcessor != null) inputProcessor.touchDown(event.x, event.y, event.pointer, Buttons.LEFT);

File: gdx/src/com/badlogic/gdx/Input.java
Patch:
@@ -753,13 +753,12 @@ public enum Peripheral {
 
 	/**
 	 * Sets whether the given key on Android should be caught. No effect on other platforms.
-	 * All keys that are not catched may handled by other apps or background processes. For example, media or volume
+	 * All keys that are not caught may be handled by other apps or background processes. For example, media or volume
 	 * buttons are handled by background media players if present. If you use these keys to control your game, they
 	 * must be catched to prevent unintended behaviour.
 	 *
 	 * @param keycode  keycode to catch
 	 * @param catchKey whether to catch the given keycode
-	 * @return
 	 */
 	public void setCatchKey(int keycode, boolean catchKey);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTestWrapper.java
Patch:
@@ -433,7 +433,7 @@ public boolean isCatchMenuKey () {
 
 		@Override
 		public void setCatchKey(int keycode, boolean catchKey) {
-
+			input.setCatchKey(keycode, catchKey);
 		}
 
 		@Override

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/Selection.java
Patch:
@@ -35,7 +35,7 @@ public void choose (T item) {
 		if (isDisabled) return;
 		snapshot();
 		try {
-			if ((toggle || (!required && selected.size == 1) || UIUtils.ctrl()) && selected.contains(item)) {
+			if (((toggle && !required && selected.size == 1) || UIUtils.ctrl()) && selected.contains(item)) {
 				if (required && selected.size == 1) return;
 				selected.remove(item);
 				lastSelected = null;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java
Patch:
@@ -675,7 +675,7 @@ public float getHeight () {
 			return height;
 		}
 
-		/** Returns true of the specified node is this node or an ascendant of this node. */
+		/** Returns true if the specified node is this node or an ascendant of this node. */
 		public boolean isAscendantOf (T node) {
 			if (node == null) throw new IllegalArgumentException("node cannot be null.");
 			BaseNode current = node;
@@ -686,7 +686,7 @@ public boolean isAscendantOf (T node) {
 			return false;
 		}
 
-		/** Returns true of the specified node is this node or an descendant of this node. */
+		/** Returns true if the specified node is this node or an descendant of this node. */
 		public boolean isDescendantOf (T node) {
 			if (node == null) throw new IllegalArgumentException("node cannot be null.");
 			BaseNode parent = this;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java
Patch:
@@ -675,7 +675,7 @@ public float getHeight () {
 			return height;
 		}
 
-		/** Returns true of the specified node is this node or an ascendant of this node. */
+		/** Returns true if the specified node is this node or an ascendant of this node. */
 		public boolean isAscendantOf (T node) {
 			if (node == null) throw new IllegalArgumentException("node cannot be null.");
 			BaseNode current = node;
@@ -686,7 +686,7 @@ public boolean isAscendantOf (T node) {
 			return false;
 		}
 
-		/** Returns true of the specified node is this node or an descendant of this node. */
+		/** Returns true if the specified node is this node or an descendant of this node. */
 		public boolean isDescendantOf (T node) {
 			if (node == null) throw new IllegalArgumentException("node cannot be null.");
 			BaseNode parent = this;

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java
Patch:
@@ -745,11 +745,11 @@ public void box (float x, float y, float z, float width, float height, float dep
 			renderer.vertex(x + width, y + height, z + depth);
 
 			renderer.color(colorBits);
-			renderer.vertex(x, y + height, z + depth);
+			renderer.vertex(x + width, y + height, z + depth);
 			renderer.color(colorBits);
 			renderer.vertex(x, y, z + depth);
 			renderer.color(colorBits);
-			renderer.vertex(x + width, y + height, z + depth);
+			renderer.vertex(x, y + height, z + depth);
 
 			// Left
 			renderer.color(colorBits);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
Patch:
@@ -431,7 +431,7 @@ protected Json getJsonLoader (final FileHandle skinFile) {
 
 			public <T> T readValue (Class<T> type, Class elementType, JsonValue jsonData) {
 				// If the JSON is a string but the type is not, look up the actual value by name.
-				if (jsonData.isString() && !ClassReflection.isAssignableFrom(CharSequence.class, type))
+				if (jsonData != null && jsonData.isString() && !ClassReflection.isAssignableFrom(CharSequence.class, type))
 					return get(jsonData.asString(), type);
 				return super.readValue(type, elementType, jsonData);
 			}
@@ -553,6 +553,7 @@ public Color read (Json json, JsonValue jsonData, Class type) {
 			public Object read (Json json, JsonValue jsonData, Class type) {
 				String name = json.readValue("name", String.class, jsonData);
 				Color color = json.readValue("color", Color.class, jsonData);
+				if (color == null) throw new SerializationException("TintedDrawable missing color: " + jsonData);
 				Drawable drawable = newDrawable(name, color);
 				if (drawable instanceof BaseDrawable) {
 					BaseDrawable named = (BaseDrawable)drawable;

File: gdx/src/com/badlogic/gdx/utils/Clipboard.java
Patch:
@@ -20,7 +20,7 @@
  * @author mzechner */
 public interface Clipboard {
 	/** gets the current content of the clipboard if it contains text
-	 * for WebGL app, setting the system clipboard is currently not supported. It works only inside the app
+	 * for WebGL app, getting the system clipboard is currently not supported. It works only inside the app
 	 * @return the clipboard content or null */
 	public String getContents ();
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java
Patch:
@@ -1200,6 +1200,7 @@ public void end () {
 
 	public void flush () {
 		ShapeType type = shapeType;
+		if (type == null) return;
 		end();
 		begin(type);
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -216,6 +216,7 @@ protected void resetTransform (Batch batch) {
 	protected void applyTransform (ShapeRenderer shapes, Matrix4 transform) {
 		oldTransform.set(shapes.getTransformMatrix());
 		shapes.setTransformMatrix(transform);
+		shapes.flush();
 	}
 
 	/** Restores the shape renderer transform to what it was before {@link #applyTransform(Batch, Matrix4)}. Note this causes the

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -521,7 +521,9 @@ private void image (CanvasElement image, int srcX, int srcY, int srcWidth, int s
 			context.setStrokeStyle(color);
 			context.setGlobalCompositeOperation(Composite.SOURCE_OVER);
 		}
-		context.drawImage(image, srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight);
+		if(srcWidth != 0 && srcHeight != 0 && dstWidth != 0 && dstHeight != 0) {
+			context.drawImage(image, srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight);
+		}		
 		pixels = null;
 	}
 	

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/ColorBleedEffect.java
Patch:
@@ -46,9 +46,6 @@ public BufferedImage processImage (BufferedImage image, int maxIterations) {
 			iterations++;
 		}
 
-		for (int i = 0; i < rgb.length; i++)
-			rgb[i] = (rgb[i] & 0x00ffffff) + (0xFF << 24);
-
 		processedImage.setRGB(0, 0, width, height, rgb, 0, width);
 		return processedImage;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -1101,10 +1101,8 @@ public void setCancelTouchFocus (boolean cancelTouchFocus) {
 	}
 
 	public void drawDebug (ShapeRenderer shapes) {
-		super.drawDebug(shapes);
-		shapes.flush();
+		drawDebugBounds(shapes);
 		applyTransform(shapes, computeTransform());
-		shapes.flush();
 		if (clipBegin(widgetAreaBounds.x, widgetAreaBounds.y, widgetAreaBounds.width, widgetAreaBounds.height)) {
 			drawDebugChildren(shapes);
 			shapes.flush();

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -443,7 +443,7 @@ static long createGlfwWindow(Lwjgl3ApplicationConfiguration config, long sharedC
 		long windowHandle = 0;
 		
 		if(config.fullscreenMode != null) {
-			// glfwWindowHint(GLFW.GLFW_REFRESH_RATE, config.fullscreenMode.refreshRate);
+			GLFW.glfwWindowHint(GLFW.GLFW_REFRESH_RATE, config.fullscreenMode.refreshRate);
 			windowHandle = GLFW.glfwCreateWindow(config.fullscreenMode.width, config.fullscreenMode.height, config.title, config.fullscreenMode.getMonitor(), sharedContextWindow);
 		} else {
 			GLFW.glfwWindowHint(GLFW.GLFW_DECORATED, config.windowDecorated? GLFW.GLFW_TRUE: GLFW.GLFW_FALSE);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/ColorAction.java
Patch:
@@ -36,10 +36,10 @@ protected void begin () {
 	}
 
 	protected void update (float percent) {
-		if (percent == 1)
+		if (percent == 0)
+			color.set(startR, startG, startB, startA);
+		else if (percent == 1)
 			color.set(end);
-		else if (percent == 0)
-			color.set(color);
 		else {
 			float r = startR + (end.r - startR) * percent;
 			float g = startG + (end.g - startG) * percent;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -599,7 +599,8 @@ public void draw (Batch batch, float parentAlpha) {
 		}
 
 		// Render scrollbars and knobs on top if they will be visible
-		float alpha = color.a * parentAlpha * Interpolation.fade.apply(fadeAlpha / fadeAlphaSeconds);
+		float alpha = color.a * parentAlpha;
+		if (fadeScrollBars) alpha *= Interpolation.fade.apply(fadeAlpha / fadeAlphaSeconds);
 		batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
 		drawScrollBars(batch, color.r, color.g, color.b, alpha);
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -1100,6 +1100,7 @@ public void setCancelTouchFocus (boolean cancelTouchFocus) {
 	}
 
 	public void drawDebug (ShapeRenderer shapes) {
+		super.drawDebug(shapes);
 		shapes.flush();
 		applyTransform(shapes, computeTransform());
 		shapes.flush();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/MultipleRenderTargetTest.java
Patch:
@@ -149,7 +149,7 @@ public int compare (Renderable o1, Renderable o2) {
 		frameBufferBuilder.addColorTextureAttachment(GL30.GL_RGBA8, GL30.GL_RGBA, GL30.GL_UNSIGNED_BYTE);
 		frameBufferBuilder.addColorTextureAttachment(GL30.GL_RGB8, GL30.GL_RGB, GL30.GL_UNSIGNED_BYTE);
 		frameBufferBuilder.addColorTextureAttachment(GL30.GL_RGB8, GL30.GL_RGB, GL30.GL_UNSIGNED_BYTE);
-		frameBufferBuilder.addDepthTextureAttachment(GL30.GL_DEPTH_COMPONENT32F, GL30.GL_FLOAT);
+		frameBufferBuilder.addDepthTextureAttachment(GL30.GL_DEPTH_COMPONENT, GL30.GL_UNSIGNED_SHORT);
 
 		frameBuffer = frameBufferBuilder.build();
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -84,7 +84,6 @@ public class LwjglGraphics implements Graphics {
 		this.canvas = canvas;
 	}
 
-
 	public int getHeight () {
 		if (canvas != null)
 			return Math.max(1, canvas.getHeight());

File: gdx/src/com/badlogic/gdx/ApplicationListener.java
Patch:
@@ -42,7 +42,7 @@ public interface ApplicationListener {
 	/** Called when the {@link Application} should render itself. */
 	public void render ();
 
-	/** Called when the {@link Application} is paused, usually when it's not active or visible on screen. An Application is also
+	/** Called when the {@link Application} is paused, usually when it's not active or visible on-screen. An Application is also
 	 * paused before it is destroyed. */
 	public void pause ();
 

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/BuildScriptHelper.java
Patch:
@@ -77,6 +77,7 @@ public static void addAllProjects(BufferedWriter wr) throws IOException {
 		write(wr, "repositories {");
 		write(wr, DependencyBank.mavenLocal);
 		write(wr, DependencyBank.mavenCentral);
+		write(wr, DependencyBank.jCenter);
 		write(wr, DependencyBank.google);
 		write(wr, "maven { url \"" + DependencyBank.libGDXSnapshotsUrl + "\" }");
 		write(wr, "maven { url \"" + DependencyBank.libGDXReleaseUrl + "\" }");

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/BuildScriptHelper.java
Patch:
@@ -77,6 +77,7 @@ public static void addAllProjects(BufferedWriter wr) throws IOException {
 		write(wr, "repositories {");
 		write(wr, DependencyBank.mavenLocal);
 		write(wr, DependencyBank.mavenCentral);
+		write(wr, DependencyBank.jCenter);
 		write(wr, DependencyBank.google);
 		write(wr, "maven { url \"" + DependencyBank.libGDXSnapshotsUrl + "\" }");
 		write(wr, "maven { url \"" + DependencyBank.libGDXReleaseUrl + "\" }");

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -839,6 +839,7 @@ public void getGlyphs (GlyphRun run, CharSequence str, int start, int end, Glyph
 
 			while (start < end) {
 				char ch = str.charAt(start++);
+				if (ch == '\r') continue; // Ignore.
 				Glyph glyph = getGlyph(ch);
 				if (glyph == null) {
 					if (missingGlyph == null) continue;

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEffectPool.java
Patch:
@@ -29,7 +29,9 @@ public ParticleEffectPool (ParticleEffect effect, int initialCapacity, int max)
 	}
 
 	protected PooledEffect newObject () {
-		return new PooledEffect(effect);
+		PooledEffect pooledEffect = new PooledEffect(effect);
+		pooledEffect.start();
+		return pooledEffect;
 	}
 	
 	public void free (PooledEffect effect) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -1136,6 +1136,7 @@ public ScrollPaneStyle (Drawable background, Drawable hScroll, Drawable hScrollK
 
 		public ScrollPaneStyle (ScrollPaneStyle style) {
 			this.background = style.background;
+			this.corner = style.corner;
 			this.hScroll = style.hScroll;
 			this.hScrollKnob = style.hScrollKnob;
 			this.vScroll = style.vScroll;

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeType.java
Patch:
@@ -715,9 +715,9 @@ else if (alpha == 255)
 				converted = new Pixmap(pixmap.getWidth(), pixmap.getHeight(), format);
 				converted.setBlending(Blending.None);
 				converted.drawPixmap(pixmap, 0, 0);
+				converted.setBlending(Blending.SourceOver);
 				pixmap.dispose();
-			} else
-				converted.setBlending(Blending.None);
+			}
 			return converted;
 		}
 		// @off

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -521,7 +521,6 @@ Glyph createGlyph (char c, FreeTypeBitmapFontData data, FreeTypeFontParameter pa
 				int shadowOffsetX = Math.max(parameter.shadowOffsetX, 0), shadowOffsetY = Math.max(parameter.shadowOffsetY, 0);
 				int shadowW = mainW + Math.abs(parameter.shadowOffsetX), shadowH = mainH + Math.abs(parameter.shadowOffsetY);
 				Pixmap shadowPixmap = new Pixmap(shadowW, shadowH, mainPixmap.getFormat());
-				shadowPixmap.setBlending(Blending.None);
 
 				Color shadowColor = parameter.shadowColor;
 				float a = shadowColor.a;
@@ -551,7 +550,6 @@ Glyph createGlyph (char c, FreeTypeBitmapFontData data, FreeTypeFontParameter pa
 				mainPixmap = shadowPixmap;
 			} else if (parameter.borderWidth == 0) {
 				// No shadow and no border, draw glyph additional times.
-				mainPixmap.setBlending(Blending.None);
 				for (int i = 0, n = parameter.renderCount - 1; i < n; i++)
 					mainPixmap.drawPixmap(mainPixmap, 0, 0);
 			}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPaneWithDynamicScrolling.java
Patch:
@@ -38,9 +38,9 @@
 public class ScrollPaneWithDynamicScrolling extends GdxTest {
 	private Stage stage;
 	private Table container;
-	private Label dynamicLabel;
-	private ScrollPane scrollPane;
-	private int count;
+	Label dynamicLabel;
+	ScrollPane scrollPane;
+	int count;
 	
 	public void create () {
 		stage = new Stage();

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -137,7 +137,7 @@ public void run () {
 		mainLoopThread.start();
 	}
 
-	void mainLoop () {
+	protected void mainLoop () {
 		SnapshotArray<LifecycleListener> lifecycleListeners = this.lifecycleListeners;
 
 		try {

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -646,7 +646,7 @@ public static int getMaxTextureSize () {
 	 * @author mzechner
 	 * @author Nathan Sweet */
 	static public class FreeTypeBitmapFontData extends BitmapFontData implements Disposable {
-		Array<TextureRegion> regions;
+		public Array<TextureRegion> regions;
 
 		// Fields for incremental glyph generation.
 		FreeTypeFontGenerator generator;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -873,6 +873,8 @@ public void scrollTo (float x, float y, float width, float height) {
 	/** Sets the scroll offset so the specified rectangle is fully in view, and optionally centered vertically and/or horizontally,
 	 * if possible. Coordinates are in the scroll pane widget's coordinate system. */
 	public void scrollTo (float x, float y, float width, float height, boolean centerHorizontal, boolean centerVertical) {
+		validate();
+
 		float amountX = this.amountX;
 		if (centerHorizontal) {
 			amountX = x - areaWidth / 2 + width / 2;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -204,6 +204,7 @@ public class GdxTests {
 		ScrollPaneScrollBarsTest.class,
 		ScrollPaneTest.class,
 		ScrollPaneTextAreaTest.class,
+		ScrollPaneWithDynamicScrolling.class,
 		SelectTest.class,
 		SensorTest.class,
 		ShaderCollectionTest.class,

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java
Patch:
@@ -81,7 +81,7 @@ public class ParticleEditor extends JFrame {
 	ParticleEffect effect = new ParticleEffect();
 	File effectFile;
 	final HashMap<ParticleEmitter, ParticleData> particleData = new HashMap();
-	private JCheckBox renderGridCheckBox;
+	JCheckBox renderGridCheckBox;
 
 	public ParticleEditor () {
 		super("Particle Editor");

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtWindowModeTest.java
Patch:
@@ -27,8 +27,8 @@
 
 public class GwtWindowModeTest extends GdxTest {
 	private Stage stage;
-	private boolean isWindowed;
-	private TextButton changeModeButton;
+	boolean isWindowed;
+	TextButton changeModeButton;
 	private final String windowedInstructions = "click for Full screen Mode";
 	private final String fullScreenInstructions = "click for window Mode";
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTestWrapper.java
Patch:
@@ -465,7 +465,7 @@ public boolean isCursorCatched () {
 
 		@Override
 		public void setCursorPosition (int x, int y) {
-			setCursorPosition(x, y);
+			input.setCursorPosition(x, y);
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/utils/PooledLinkedList.java
Patch:
@@ -170,8 +170,8 @@ public T removeLast () {
 			head = null;
 			tail = null;
 		} else {
-			tail.next = null;
 			tail = p;
+			tail.next = null;
 		}
 
 

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/bmfont/BitmapFontWriter.java
Patch:
@@ -108,6 +108,7 @@ public static class FontInfo {
 		/** Horizontal/vertical spacing that was applied to font */
 		public Spacing spacing = new Spacing();
 		public int outline = 0;
+		public int shadowOffsetY = 0;
 
 		public FontInfo () {
 		}
@@ -188,7 +189,7 @@ public static void writeFont (BitmapFontData fontData, String[] pageRefs, FileHa
 		// COMMON line
 		buf.append(xmlOpen).append("common lineHeight=").append(quote(lineHeight)).append(" base=").append(quote(base))
 			.append(" scaleW=").append(quote(scaleW)).append(" scaleH=").append(quote(scaleH)).append(" pages=").append(quote(pages))
-			.append(" packed=").append(quote(packed)).append(alphaChnlParams).append(xmlCloseSelf).append("\n");
+			.append(" packed=").append(quote(packed)).append(" shadowOffsetY=").append(quote(info.shadowOffsetY)).append(alphaChnlParams).append(xmlCloseSelf).append("\n");
 
 		if (xml) buf.append("\t<pages>\n");
 
@@ -234,7 +235,7 @@ public static void writeFont (BitmapFontData fontData, String[] pageRefs, FileHa
 				.append(quote(String.format("%-5s", empty ? 0 : g.height), true)).append("xoffset=")
 				.append(quote(String.format("%-5s", g.xoffset - padLeft), true)).append("yoffset=")
 				.append(
-					quote(String.format("%-5s", fontData.flipped ? g.yoffset + padTop : -(g.height + (g.yoffset + padTop))), true))
+					quote(String.format("%-5s", fontData.flipped ? g.yoffset + padTop : -(g.height + (g.yoffset + padTop)) - info.shadowOffsetY), true))
 				.append("xadvance=").append(quote(String.format("%-5s", g.xadvance), true)).append("page=")
 				.append(quote(String.format("%-5s", g.page), true)).append("chnl=").append(quote(0, true)).append(xmlCloseSelf)
 				.append("\n");

File: gdx/test/com/badlogic/gdx/math/BezierTest.java
Patch:
@@ -25,7 +25,7 @@ private static enum ImportType {
 		LibGDXArrays, JavaArrays, JavaVarArgs
 	}
 
-	@Parameters(name = "use setter {0} imported type {1}")
+	@Parameters(name = "imported type {0} use setter {1}")
 	public static Collection<Object[]> parameters () {
 		Collection<Object[]> parameters = new ArrayList<Object[]>();
 		for(ImportType type : ImportType.values()){

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPackerIO.java
Patch:
@@ -10,12 +10,12 @@
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.g2d.PixmapPacker.Page;
 
+import static com.badlogic.gdx.graphics.g2d.PixmapPacker.indexPattern;
+
 /** Saves PixmapPackers to files.
  * @author jshapcott */
 public class PixmapPackerIO {
 
-	static private Pattern indexPattern = Pattern.compile("(.+)_(\\d+)$");
-
 	/** Image formats which can be used when saving a PixmapPacker. */
 	public static enum ImageFormat {
 		/** A simple compressed image format which is libgdx specific. */

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -188,6 +188,7 @@ public class GdxTests {
 		PixelsPerInchTest.class,
 		PixmapBlendingTest.class,
 		PixmapPackerTest.class,
+		PixmapPackerIOTest.class,
 		PixmapTest.class,
 		PolygonRegionTest.class,
 		PolygonSpriteTest.class,

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -138,7 +138,7 @@ private void init (ApplicationListener listener, AndroidApplicationConfiguration
 		audio = new AndroidAudio(this, config);
 		this.getFilesDir(); // workaround for Android bug #10515463
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
-		net = new AndroidNet(this);
+		net = new AndroidNet(this, config);
 		this.listener = listener;
 		this.handler = new Handler();
 		this.useImmersiveMode = config.useImmersiveMode;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplicationConfiguration.java
Patch:
@@ -104,4 +104,7 @@ public class AndroidApplicationConfiguration {
 	 * In case this is true {@link com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18} will be used.
 	 * This implementation properly supports attach to and detach from window. default: false */
 	public boolean useGLSurfaceView20API18 = false;
+
+	/** The maximum number of threads to use for network requests. Default is {@link Integer#MAX_VALUE}. */
+	public int maxNetThreads = Integer.MAX_VALUE;
 }

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidDaydream.java
Patch:
@@ -130,7 +130,7 @@ private void init (ApplicationListener listener, AndroidApplicationConfiguration
 		audio = new AndroidAudio(this, config);
 		this.getFilesDir(); // workaround for Android bug #10515463
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
-		net = new AndroidNet(this);
+		net = new AndroidNet(this, config);
 		this.listener = listener;
 		this.handler = new Handler();
 		this.clipboard = new AndroidClipboard(this);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFragmentApplication.java
Patch:
@@ -160,7 +160,7 @@ public View initializeForView (ApplicationListener listener, AndroidApplicationC
 		input = AndroidInputFactory.newAndroidInput(this, getActivity(), graphics.view, config);
 		audio = new AndroidAudio(getActivity(), config);
 		files = new AndroidFiles(getResources().getAssets(), getActivity().getFilesDir().getAbsolutePath());
-		net = new AndroidNet(this);
+		net = new AndroidNet(this, config);
 		this.listener = listener;
 		this.handler = new Handler();
 		this.clipboard = new AndroidClipboard(getActivity());

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaper.java
Patch:
@@ -94,7 +94,7 @@ public void initialize (ApplicationListener listener, AndroidApplicationConfigur
 		// added initialization of android local storage: /data/data/<app package>/files/
 		this.getService().getFilesDir(); // workaround for Android bug #10515463
 		files = new AndroidFiles(this.getService().getAssets(), this.getService().getFilesDir().getAbsolutePath());
-		net = new AndroidNet(this);
+		net = new AndroidNet(this, config);
 		this.listener = listener;
 		clipboard = new AndroidClipboard(this.getService());
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidNet.java
Patch:
@@ -40,9 +40,9 @@ public class AndroidNet implements Net {
 	final AndroidApplicationBase app;
 	NetJavaImpl netJavaImpl;
 
-	public AndroidNet (AndroidApplicationBase app) {
+	public AndroidNet (AndroidApplicationBase app, AndroidApplicationConfiguration configuration) {
 		this.app = app;
-		netJavaImpl = new NetJavaImpl();
+		netJavaImpl = new NetJavaImpl(configuration.maxNetThreads);
 	}
 
 	@Override

File: backends/gdx-backend-headless/src/com/badlogic/gdx/backends/headless/HeadlessApplication.java
Patch:
@@ -67,7 +67,7 @@ public HeadlessApplication(ApplicationListener listener, HeadlessApplicationConf
 		setApplicationLogger(new HeadlessApplicationLogger());
 		this.listener = listener;
 		this.files = new HeadlessFiles();
-		this.net = new HeadlessNet();
+		this.net = new HeadlessNet(config);
 		// the following elements are not applicable for headless applications
 		// they are only implemented as mock objects
 		this.graphics = new MockGraphics();

File: backends/gdx-backend-headless/src/com/badlogic/gdx/backends/headless/HeadlessApplicationConfiguration.java
Patch:
@@ -21,4 +21,7 @@ public class HeadlessApplicationConfiguration {
 	public float renderInterval = 1f / 60f;
 	/** Preferences directory for headless. Default is ".prefs/". */
 	public String preferencesDirectory = ".prefs/";
+
+	/** The maximum number of threads to use for network requests. Default is {@link Integer#MAX_VALUE}. */
+	public int maxNetThreads = Integer.MAX_VALUE;
 }

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTCanvas.java
Patch:
@@ -167,7 +167,7 @@ public boolean shouldRender () {
 
 		if (!LwjglApplicationConfiguration.disableAudio && Gdx.audio == null) audio = new OpenALAudio();
 		if (Gdx.files == null) files = new LwjglFiles();
-		if (Gdx.net == null) net = new LwjglNet();
+		if (Gdx.net == null) net = new LwjglNet(config);
 		input = new LwjglAWTInput(this);
 		setGlobals();
 	}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -94,7 +94,7 @@ public LwjglApplication (ApplicationListener listener, LwjglApplicationConfigura
 		}
 		files = new LwjglFiles();
 		input = new LwjglInput();
-		net = new LwjglNet();
+		net = new LwjglNet(config);
 		this.listener = listener;
 		this.preferencesdir = config.preferencesDirectory;
 		this.preferencesFileType = config.preferencesFileType;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -33,6 +33,9 @@ public class LwjglApplicationConfiguration {
 	 * natives are not needed. */
 	static public boolean disableAudio;
 
+	/** The maximum number of threads to use for network requests. Default is {@link Integer#MAX_VALUE}. */
+	public int maxNetThreads = Integer.MAX_VALUE;
+
 	/** whether to attempt use OpenGL ES 3.0. **/
 	public boolean useGL30 = false;
 	/** The OpenGL context major version (the part in front of the decimal point) used to emulate OpenGL ES 3.0, when the version is

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -146,7 +146,7 @@ public boolean setFullscreenMode (DisplayMode displayMode) {
 		if (!LwjglApplicationConfiguration.disableAudio) audio = new OpenALAudio();
 		files = new LwjglFiles();
 		input = new LwjglInput();
-		net = new LwjglNet();
+		net = new LwjglNet(config);
 		this.listener = listener;
 
 		Gdx.app = this;

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -102,7 +102,7 @@ public Lwjgl3Application(ApplicationListener listener, Lwjgl3ApplicationConfigur
 			this.audio = Gdx.audio = new MockAudio();
 		}
 		this.files = Gdx.files = new Lwjgl3Files();
-		this.net = Gdx.net = new Lwjgl3Net();
+		this.net = Gdx.net = new Lwjgl3Net(config);
 		this.clipboard = new Lwjgl3Clipboard();
 
 		Lwjgl3Window window = createWindow(config, listener, 0);

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSApplication.java
Patch:
@@ -178,7 +178,7 @@ protected void init () {
 		Gdx.gl30 = graphics.gl30;
 		this.files = new IOSFiles();
 		this.audio = new IOSAudio(config);
-		this.net = new IOSNet(this);
+		this.net = new IOSNet(this, config);
 
 		Gdx.files = this.files;
 		Gdx.graphics = this.graphics;

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSNet.java
Patch:
@@ -29,11 +29,12 @@
 
 public class IOSNet implements Net {
 
-	NetJavaImpl netJavaImpl = new NetJavaImpl();
+	NetJavaImpl netJavaImpl;
 	final UIApplication uiApp;
 
-	public IOSNet (IOSApplication app) {
+	public IOSNet (IOSApplication app, IOSApplicationConfiguration configuration) {
 		uiApp = app.uiApp;
+		netJavaImpl = new NetJavaImpl(configuration.maxNetThreads);
 	}
 
 	@Override

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
Patch:
@@ -157,7 +157,7 @@ final boolean didFinishLaunching (UIApplication uiApp, UIApplicationLaunchOption
 		Gdx.gl30 = graphics.gl30;
 		this.files = new IOSFiles();
 		this.audio = new IOSAudio(config);
-		this.net = new IOSNet(this);
+		this.net = new IOSNet(this, config);
 
 		Gdx.files = this.files;
 		Gdx.graphics = this.graphics;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSNet.java
Patch:
@@ -30,11 +30,12 @@
 
 public class IOSNet implements Net {
 
-	NetJavaImpl netJavaImpl = new NetJavaImpl();
+	NetJavaImpl netJavaImpl;
 	final UIApplication uiApp;
 
-	public IOSNet (IOSApplication app) {
+	public IOSNet (IOSApplication app, IOSApplicationConfiguration configuration) {
 		uiApp = app.uiApp;
+		netJavaImpl = new NetJavaImpl(configuration.maxNetThreads);
 	}
 
 	@Override

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -284,7 +284,7 @@ public boolean executeRunnables () {
 		if (executedRunnables.size == 0) return false;
 		do {
 			Runnable runnable = (Runnable)executedRunnables.pop();
-			Throwable stacktrace = postedRunnableStacktraces ? (Throwable)executedRunnables.pop() : null;
+			Throwable stacktrace = (Throwable)executedRunnables.pop();
 			try {
 				runnable.run();
 			} catch (Throwable ex) {
@@ -375,7 +375,7 @@ public Clipboard getClipboard () {
 	public void postRunnable (Runnable runnable) {
 		synchronized (runnables) {
 			runnables.add(runnable);
-			if (postedRunnableStacktraces) runnables.add(new Throwable());
+			runnables.add(postedRunnableStacktraces ? new Throwable() : null);
 			graphics.requestRendering();
 		}
 	}
@@ -463,7 +463,7 @@ public void removeLifecycleListener (LifecycleListener listener) {
 	}
 
 	/** When true, {@link #postRunnable(Runnable)} keeps the stacktrace (which is an allocation) so it can be included if the
-	 * runnable later throws an exception. Set before any runnables are posted. Default is false. */
+	 * runnable later throws an exception. Default is false. */
 	public void setPostedRunnableStacktraces (boolean postedRunnableStacktraces) {
 		this.postedRunnableStacktraces = postedRunnableStacktraces;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -167,6 +167,7 @@ private void drawDebug () {
 		debugShapes.begin();
 		root.drawDebug(debugShapes);
 		debugShapes.end();
+		Gdx.gl.glDisable(GL20.GL_BLEND);
 	}
 
 	/** Disables debug on all actors recursively except the specified actor and any children. */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java
Patch:
@@ -176,7 +176,7 @@ private void computeSize () {
 		prefWidth = Math.max(prefWidth, style.minus.getMinWidth());
 		prefHeight = getHeight();
 		float plusMinusWidth = Math.max(style.plus.getMinWidth(), style.minus.getMinWidth());
-		computeSize(rootNodes, indentSpacing, plusMinusWidth);
+		computeSize(rootNodes, 0, plusMinusWidth);
 		prefWidth += padding * 2;
 		prefHeight = getHeight() - prefHeight;
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -533,7 +533,7 @@ private void activateParticle (int index) {
 				float radius2 = radiusX * radiusX;
 				while (true) {
 					float px = MathUtils.random(width) - radiusX;
-					float py = MathUtils.random(height) - radiusY;
+					float py = MathUtils.random(width) - radiusX;
 					if (px * px + py * py <= radius2) {
 						x += px;
 						y += py / scaleY;

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSUIViewController.java
Patch:
@@ -59,6 +59,7 @@ public void viewWillAppear (boolean arg0) {
 
 	@Override
 	public void viewDidAppear (boolean animated) {
+		super.viewDidAppear(animated);
 		if (app.viewControllerListener != null)
 			app.viewControllerListener.viewDidAppear(animated);
 	}

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
Patch:
@@ -75,6 +75,7 @@ public void viewWillAppear (boolean arg0) {
 
 		@Override
 		public void viewDidAppear (boolean animated) {
+			super.viewDidAppear(animated);
 			if (app.viewControllerListener != null) app.viewControllerListener.viewDidAppear(animated);
 		}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java
Patch:
@@ -134,6 +134,8 @@ public void add (Node node) {
 	}
 
 	public void insert (int index, Node node) {
+		int existingIndex = rootNodes.indexOf(node, true);
+		if (existingIndex != -1 && existingIndex < index) index--;
 		remove(node);
 		node.parent = null;
 		rootNodes.insert(index, node);

File: gdx/src/com/badlogic/gdx/maps/tiled/TiledMapTileLayer.java
Patch:
@@ -137,14 +137,14 @@ public Cell setFlipVertically (boolean flipVertically) {
 			return this;
 		}
 
-		/** @return The rotation of this cell, in degrees. */
+		/** @return The rotation of this cell, in 90 degree increments. */
 		public int getRotation () {
 			return rotation;
 		}
 
-		/** Sets the rotation of this cell, in degrees.
+		/** Sets the rotation of this cell, in 90 degree increments.
 		 * 
-		 * @param rotation the rotation in degrees. 
+		 * @param rotation the rotation in 90 degree increments (see ints below). 
 		 * @return this, for method chaining */
 		public Cell setRotation (int rotation) {
 			this.rotation = rotation;

File: gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java
Patch:
@@ -48,7 +48,7 @@ public static class Parameters extends AssetLoaderParameters<TiledMap> {
 		public TextureFilter textureMagFilter = TextureFilter.Nearest;
 		/** Whether to convert the objects' pixel position and size to the equivalent in tile space. **/
 		public boolean convertObjectToTileSpace = false;
-		/** Whether to flip all Y coordinates so that Y positive is down. All LibGDX renderers require flipped Y coordinates, and
+		/** Whether to flip all Y coordinates so that Y positive is up. All LibGDX renderers require flipped Y coordinates, and
 		 * thus flipY set to true. This parameter is included for non-rendering related purposes of TMX files, or custom renderers. */
 		public boolean flipY = true;
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ParticleEmitterTest.java
Patch:
@@ -82,6 +82,9 @@ public boolean keyDown (int keycode) {
 				ParticleEmitter emitter = emitters.get(emitterIndex);
 				if (keycode == Input.Keys.DPAD_UP)
 					particleCount += 5;
+				else if (keycode == Input.Keys.PLUS) {
+					emitter = new ParticleEmitter(emitter);
+				}
 				else if (keycode == Input.Keys.DPAD_DOWN)
 					particleCount -= 5;
 				else if (keycode == Input.Keys.SPACE) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ProgressBar.java
Patch:
@@ -308,7 +308,7 @@ public float getPrefWidth () {
 		if (vertical) {
 			final Drawable knob = getKnobDrawable();
 			final Drawable bg = (disabled && style.disabledBackground != null) ? style.disabledBackground : style.background;
-			return Math.max(knob == null ? 0 : knob.getMinWidth(), bg.getMinWidth());
+			return Math.max(knob == null ? 0 : knob.getMinWidth(), bg == null ? 0 : bg.getMinWidth());
 		} else
 			return 140;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -942,6 +942,7 @@ public boolean isScrollY () {
 	public void setScrollingDisabled (boolean x, boolean y) {
 		disableX = x;
 		disableY = y;
+		invalidate();
 	}
 
 	public boolean isScrollingDisabledX () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/SpriteDrawable.java
Patch:
@@ -57,8 +57,9 @@ public void draw (Batch batch, float x, float y, float width, float height) {
 	public void draw (Batch batch, float x, float y, float originX, float originY, float width, float height, float scaleX,
 		float scaleY, float rotation) {
 
-		temp.set(sprite.getColor());
-		sprite.setColor(temp.mul(batch.getColor()));
+		Color spriteColor = sprite.getColor();
+		temp.set(spriteColor);
+		sprite.setColor(spriteColor.mul(batch.getColor()));
 
 		sprite.setOrigin(originX, originY);
 		sprite.setRotation(rotation);

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -435,7 +435,7 @@ public FreeTypeBitmapFontData generateData (FreeTypeFontParameter parameter, Fre
 			}
 
 			char c = characters[best];
-			if (!data.hasGlyph(c)) {
+			if (data.getGlyph(c) == null) {
 				Glyph glyph = createGlyph(c, data, parameter, stroker, baseLine, packer);
 				if (glyph != null) {
 					data.setGlyph(c, glyph);

File: gdx/src/com/badlogic/gdx/graphics/g2d/GlyphLayout.java
Patch:
@@ -415,6 +415,7 @@ private GlyphRun wrap (BitmapFontData fontData, GlyphRun first, Pool<GlyphRun> g
 	/** Adjusts the xadvance of the last glyph to use its width instead of xadvance. */
 	private void adjustLastGlyph (BitmapFontData fontData, GlyphRun run) {
 		Glyph last = run.glyphs.peek();
+		if (last.fixedWidth) return;
 		float width = (last.width + last.xoffset) * fontData.scaleX - fontData.padRight;
 		run.width += width - run.xAdvances.peek(); // Can cause the run width to be > targetWidth, but the problem is minimal.
 		run.xAdvances.set(run.xAdvances.size - 1, width);

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/AndroidTestStarter.java
Patch:
@@ -52,7 +52,7 @@ protected void onListItemClick (ListView listView, View view, int position, long
 		Editor editor = prefs.edit();
 		editor.putInt("index", listView.getFirstVisiblePosition());
 		editor.putInt("top", listView.getChildAt(0) == null ? 0 : listView.getChildAt(0).getTop());
-		editor.commit();
+		editor.apply();
 
 		Object o = this.getListAdapter().getItem(position);
 		String testName = o.toString();

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/WindowedTest.java
Patch:
@@ -39,10 +39,10 @@ public void onCreate (Bundle bundle) {
 		super.onCreate(bundle);
 
 		Button b1 = new Button(this);
-		b1.setText("Change Color");
+		b1.setText(getResources().getString(R.string.change_color));
 		b1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
 		Button b2 = new Button(this);
-		b2.setText("New Window");
+		b2.setText(getResources().getString(R.string.new_window));
 		b2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
 		View view = initializeForView(this);
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java
Patch:
@@ -715,7 +715,7 @@ private int[] getPads (Pixmap raster, int[] splits) {
 		return pads;
 	}
 
-	private static Color c = new Color();
+	private Color c = new Color();
 	private int getSplitPoint (Pixmap raster, int startX, int startY, boolean startPoint, boolean xAxis) {
 		int[] rgba = new int[4];
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
Patch:
@@ -163,7 +163,7 @@ private void createPhysicsWorld () {
 
 		createBoxes();
 
-		Array<Fixture> fixtures = new Array<>();
+		Array<Fixture> fixtures = new Array<Fixture>();
 		world.getFixtures(fixtures);
 
 		// You can savely ignore the rest of this method :)

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -373,6 +373,7 @@ void removeStashIndex (int index) {
 		if (index < lastIndex) {
 			keyTable[index] = keyTable[lastIndex];
 			valueTable[index] = valueTable[lastIndex];
+			keyTable[lastIndex] = null;
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -373,6 +373,7 @@ void removeStashIndex (int index) {
 		if (index < lastIndex) {
 			keyTable[index] = keyTable[lastIndex];
 			valueTable[index] = valueTable[lastIndex];
+			keyTable[lastIndex] = null;
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -150,8 +150,8 @@ public void put (K key, float value) {
 		push(key, value, index1, key1, index2, key2, index3, key3);
 	}
 
-	public void putAll (ObjectFloatMap<K> map) {
-		for (Entry<K> entry : map.entries())
+	public void putAll (ObjectFloatMap<? extends K> map) {
+		for (Entry<? extends K> entry : map.entries())
 			put(entry.key, entry.value);
 	}
 

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -150,8 +150,8 @@ public void put (K key, int value) {
 		push(key, value, index1, key1, index2, key2, index3, key3);
 	}
 
-	public void putAll (ObjectIntMap<K> map) {
-		for (Entry<K> entry : map.entries())
+	public void putAll (ObjectIntMap<? extends K> map) {
+		for (Entry<? extends K> entry : map.entries())
 			put(entry.key, entry.value);
 	}
 

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -444,6 +444,7 @@ public boolean equals (Object obj) {
 		if (!(obj instanceof ObjectSet)) return false;
 		ObjectSet other = (ObjectSet)obj;
 		if (other.size != size) return false;
+		T[] keyTable = this.keyTable; 
 		for (int i = 0, n = capacity + stashSize; i < n; i++)
 			if (keyTable[i] != null && !other.contains(keyTable[i])) return false;
 		return true;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -77,7 +77,8 @@ public boolean touchDown (InputEvent event, float x, float y, int pointer, int b
 			public void touchUp (InputEvent event, float x, float y, int pointer, int button) {
 				if (pointer != draggingPointer) return;
 				draggingPointer = -1;
-				if (!calculatePositionAndValue(x, y)) {
+				// The position is invalid when focus is cancelled
+				if (event.isTouchFocusCancel() || !calculatePositionAndValue(x, y)) {
 					// Fire an event on touchUp even if the value didn't change, so listeners can see when a drag ends via isDragging.
 					ChangeEvent changeEvent = Pools.obtain(ChangeEvent.class);
 					fire(changeEvent);

File: gdx/src/com/badlogic/gdx/audio/Music.java
Patch:
@@ -37,7 +37,7 @@
  * </p>
  * 
  * <p>
- * <b>Note<b>: any values provided will not be clamped, it is the developer's responsibility to do so
+ * <b>Note</b>: any values provided will not be clamped, it is the developer's responsibility to do so
  * </p>
  * 
  * @author mzechner */

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/bmfont/BitmapFontWriter.java
Patch:
@@ -22,15 +22,14 @@
 import com.badlogic.gdx.graphics.g2d.BitmapFont.BitmapFontData;
 import com.badlogic.gdx.graphics.g2d.BitmapFont.Glyph;
 import com.badlogic.gdx.graphics.g2d.PixmapPacker.Page;
-import com.badlogic.gdx.tools.hiero.Hiero;
 import com.badlogic.gdx.utils.Array;
 
 /** A utility to output BitmapFontData to a FNT file. This can be useful for caching the result from TrueTypeFont, for faster load
  * times.
  * <p>
  * The font file format is from the AngelCodeFont BMFont tool.
  * <p>
- * Output is nearly identical to the FreeType settting in the {@link Hiero} tool. BitmapFontWriter gives more flexibility, eg
+ * Output is nearly identical to the FreeType settting in the Hiero tool {@Link com.badlogic.gdx.tools.hiero.Hiero}. BitmapFontWriter gives more flexibility, eg
  * borders and shadows can be used. Hiero is able to avoid outputting the same glyph image more than once if multiple character
  * codes have the exact same glyph.
  * @author mattdesl AKA davedes */

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java
Patch:
@@ -567,7 +567,7 @@ public Page pack (PixmapPacker packer, String name, Rectangle rect) {
 					if (row.x + rectWidth < pageWidth) {
 						row.height = Math.max(row.height, rectHeight);
 						bestRow = row;
-					} else {
+					} else if (row.y + row.height + rectHeight < pageHeight) {
 						// Fit in new row.
 						bestRow = new Row();
 						bestRow.y = row.y + row.height;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextArea.java
Patch:
@@ -88,7 +88,7 @@ protected int letterUnderCursor (float x) {
 				int i = start;
 				for (; i < end; i++)
 					if (glyphPositions[i] > x) break;
-				if (glyphPositions[i] - x <= x - glyphPositions[i - 1]) return i;
+				if (i > 0 && glyphPositions[i] - x <= x - glyphPositions[i - 1]) return i;
 				return Math.max(0, i - 1);
 			}
 		} else {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OpenALMusic.java
Patch:
@@ -230,7 +230,7 @@ public void update () {
 		while (buffers-- > 0) {
 			int bufferID = alSourceUnqueueBuffers(sourceID);
 			if (bufferID == AL_INVALID_VALUE) break;
-			renderedSeconds = renderedSecondsQueue.pop();
+			if (renderedSecondsQueue.size > 0) renderedSeconds = renderedSecondsQueue.pop();
 			if (end) continue;
 			if (fill(bufferID))
 				alSourceQueueBuffers(sourceID, bufferID);

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALMusic.java
Patch:
@@ -233,7 +233,7 @@ public void update () {
 		while (buffers-- > 0) {
 			int bufferID = alSourceUnqueueBuffers(sourceID);
 			if (bufferID == AL_INVALID_VALUE) break;
-			renderedSeconds = renderedSecondsQueue.pop();
+			if (renderedSecondsQueue.size > 0) renderedSeconds = renderedSecondsQueue.pop();
 			if (end) continue;
 			if (fill(bufferID))
 				alSourceQueueBuffers(sourceID, bufferID);

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSApplication.java
Patch:
@@ -197,7 +197,7 @@ protected IOSInput createInput() {
 		return new IOSInput(this);
 	}
 
-	private int getIosVersion () {
+	int getIosVersion () {
 		String systemVersion = UIDevice.currentDevice().systemVersion();
 		int version = Integer.parseInt(systemVersion.split("\\.")[0]);
 		return version;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
Patch:
@@ -182,7 +182,7 @@ protected IOSInput createInput() {
 		 return new IOSInput(this);
 	}
 
-	private int getIosVersion () {
+	int getIosVersion () {
 		String systemVersion = UIDevice.getCurrentDevice().getSystemVersion();
 		int version = Integer.parseInt(systemVersion.split("\\.")[0]);
 		return version;

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/BuildScriptHelper.java
Patch:
@@ -34,6 +34,7 @@ public static void addBuildScript(Language language, List<ProjectType> projects,
 		write(wr, "repositories {");
 		write(wr, DependencyBank.mavenLocal);
 		write(wr, DependencyBank.mavenCentral);
+		write(wr, "maven { url \"" + DependencyBank.gradlePlugins + "\" }");
 		write(wr, "maven { url \"" + DependencyBank.libGDXSnapshotsUrl + "\" }");
 		write(wr, DependencyBank.jCenter);
 		write(wr, DependencyBank.google);
@@ -76,6 +77,7 @@ public static void addAllProjects(BufferedWriter wr) throws IOException {
 		write(wr, "repositories {");
 		write(wr, DependencyBank.mavenLocal);
 		write(wr, DependencyBank.mavenCentral);
+		write(wr, DependencyBank.google);
 		write(wr, "maven { url \"" + DependencyBank.libGDXSnapshotsUrl + "\" }");
 		write(wr, "maven { url \"" + DependencyBank.libGDXReleaseUrl + "\" }");
 		write(wr, "}");

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -36,6 +36,7 @@ public class DependencyBank {
 	static String mavenCentral = "mavenCentral()";
 	static String jCenter = "jcenter()";
 	static String google = "google()";
+	static String gradlePlugins = "https://plugins.gradle.org/m2/";
 	static String libGDXSnapshotsUrl = "https://oss.sonatype.org/content/repositories/snapshots/";
 	static String libGDXReleaseUrl = "https://oss.sonatype.org/content/repositories/releases/";
 

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/Language.java
Patch:
@@ -2,7 +2,7 @@
 
 public enum Language {
 	JAVA ("java", "", "", "", "java;java;android;java,robovm;moe;gwt,war", true) ,
-	KOTLIN ("kotlin", "ext.kotlinVersion = '1.1.1'", 
+	KOTLIN ("kotlin", "ext.kotlinVersion = '1.2.51'",
 			"classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\"", 
 			"compile \"org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion\"",
 			"kotlin;kotlin;android,kotlin-android;kotlin,robovm;moe; ",

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/HorizontalGroup.java
Patch:
@@ -82,6 +82,7 @@ private void computeSize () {
 				if (child instanceof Layout) {
 					Layout layout = (Layout)child;
 					width = layout.getPrefWidth();
+					if (wrap && width > groupWidth) width = Math.max(groupWidth, layout.getMinWidth());
 					height = layout.getPrefHeight();
 				} else {
 					width = child.getWidth();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/VerticalGroup.java
Patch:
@@ -83,6 +83,7 @@ private void computeSize () {
 					Layout layout = (Layout)child;
 					width = layout.getPrefWidth();
 					height = layout.getPrefHeight();
+					if (wrap && height > groupHeight) height = Math.max(groupHeight, layout.getMinHeight());
 				} else {
 					width = child.getWidth();
 					height = child.getHeight();

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -1528,7 +1528,7 @@ public void set (ScaledNumericValue value) {
 
 		public void set (IndependentScaledNumericValue value) {
 			super.set(value);
-			value.independent = independent;
+			independent = value.independent;
 		}
 
 		public void save (Writer output) throws IOException {

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -84,6 +84,7 @@ public static boolean isPointInTriangle (float px, float py, float ax, float ay,
 	public static boolean intersectSegmentPlane (Vector3 start, Vector3 end, Plane plane, Vector3 intersection) {
 		Vector3 dir = v0.set(end).sub(start);
 		float denom = dir.dot(plane.getNormal());
+		if (denom == 0f) return false;
 		float t = -(start.dot(plane.getNormal()) + plane.getD()) / denom;
 		if (t < 0 || t > 1) return false;
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -342,6 +342,7 @@ public void reset () {
 	 * for all cells in the new row. */
 	public Cell row () {
 		if (cells.size > 0) {
+			if (cells.peek().endRow) return rowDefaults; // Row was already ended.
 			if (!implicitEndRow) endRow();
 			invalidate();
 		}

File: gdx/src/com/badlogic/gdx/utils/IdentityMap.java
Patch:
@@ -264,7 +264,7 @@ private void putStash (K key, V value) {
 		if (stashSize == stashCapacity) {
 			// Too many pushes occurred and the stash is full, increase the table size.
 			resize(capacity << 1);
-			put(key, value);
+			putResize(key, value);
 			return;
 		}
 		// Store key in the stash.

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -280,7 +280,7 @@ private void putStash (int key, float value) {
 		if (stashSize == stashCapacity) {
 			// Too many pushes occurred and the stash is full, increase the table size.
 			resize(capacity << 1);
-			put(key, value);
+			putResize(key, value);
 			return;
 		}
 		// Store key in the stash.

File: gdx/src/com/badlogic/gdx/utils/IntIntMap.java
Patch:
@@ -278,7 +278,7 @@ private void putStash (int key, int value) {
 		if (stashSize == stashCapacity) {
 			// Too many pushes occurred and the stash is full, increase the table size.
 			resize(capacity << 1);
-			put(key, value);
+			putResize(key, value);
 			return;
 		}
 		// Store key in the stash.

File: gdx/src/com/badlogic/gdx/utils/IntMap.java
Patch:
@@ -286,7 +286,7 @@ private void putStash (int key, V value) {
 		if (stashSize == stashCapacity) {
 			// Too many pushes occurred and the stash is full, increase the table size.
 			resize(capacity << 1);
-			put(key, value);
+			putResize(key, value);
 			return;
 		}
 		// Store key in the stash.

File: gdx/src/com/badlogic/gdx/utils/IntSet.java
Patch:
@@ -262,7 +262,7 @@ private void addStash (int key) {
 		if (stashSize == stashCapacity) {
 			// Too many pushes occurred and the stash is full, increase the table size.
 			resize(capacity << 1);
-			add(key);
+			addResize(key);
 			return;
 		}
 		// Store key in the stash.

File: gdx/src/com/badlogic/gdx/utils/LongMap.java
Patch:
@@ -285,7 +285,7 @@ private void putStash (long key, V value) {
 		if (stashSize == stashCapacity) {
 			// Too many pushes occurred and the stash is full, increase the table size.
 			resize(capacity << 1);
-			put(key, value);
+			putResize(key, value);
 			return;
 		}
 		// Store key in the stash.

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -263,7 +263,7 @@ private void putStash (K key, float value) {
 		if (stashSize == stashCapacity) {
 			// Too many pushes occurred and the stash is full, increase the table size.
 			resize(capacity << 1);
-			put(key, value);
+			putResize(key, value);
 			return;
 		}
 		// Store key in the stash.

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -263,7 +263,7 @@ private void putStash (K key, int value) {
 		if (stashSize == stashCapacity) {
 			// Too many pushes occurred and the stash is full, increase the table size.
 			resize(capacity << 1);
-			put(key, value);
+			putResize(key, value);
 			return;
 		}
 		// Store key in the stash.

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -254,7 +254,7 @@ private void addStash (T key) {
 		if (stashSize == stashCapacity) {
 			// Too many pushes occurred and the stash is full, increase the table size.
 			resize(capacity << 1);
-			add(key);
+			addResize(key);
 			return;
 		}
 		// Store key in the stash.

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -693,6 +693,7 @@ public void setGlyphRegion (Glyph glyph, TextureRegion region) {
 			float y2 = glyph.srcY + glyph.height;
 
 			// Shift glyph for left and top edge stripped whitespace. Clip glyph for right and bottom edge stripped whitespace.
+			// Note if the font region has padding, whitespace stripping must not be used.
 			if (offsetX > 0) {
 				x -= offsetX;
 				if (x < 0) {
@@ -710,6 +711,7 @@ public void setGlyphRegion (Glyph glyph, TextureRegion region) {
 				y -= offsetY;
 				if (y < 0) {
 					glyph.height += y;
+					if (glyph.height < 0) glyph.height = 0;
 					y = 0;
 				}
 				y2 -= offsetY;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -166,6 +166,7 @@ private void drawDebug () {
 		debugShapes.setProjectionMatrix(viewport.getCamera().combined);
 		debugShapes.begin();
 		root.drawDebug(debugShapes);
+		debugShapes.end();
 	}
 
 	/** Disables debug on all actors recursively except the specified actor and any children. */

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -816,9 +816,9 @@ public void getGlyphs (GlyphRun run, CharSequence str, int start, int end, Glyph
 		public int getWrapIndex (Array<Glyph> glyphs, int start) {
 			int i = start - 1;
 			if (isWhitespace((char)glyphs.get(i).id)) return i;
-			for (; i >= 1; i--)
+			for (; i > 0; i--)
 				if (!isWhitespace((char)glyphs.get(i).id)) break;
-			for (; i >= 1; i--) {
+			for (; i > 0; i--) {
 				char ch = (char)glyphs.get(i).id;
 				if (isWhitespace(ch) || isBreakChar(ch)) return i + 1;
 			}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontTest.java
Patch:
@@ -111,6 +111,7 @@ public void render () {
 			// text = "How quickly da[RED]ft jumping zebras vex.";
 			text = "Another font wrap is-sue,  this time with multiple whitespace characters.";
 			// text = "test with AGWlWi      AGWlWi issue";
+			text = "AAA BBB CCC DDD    [RED]EEE";
 			if (true) { // Test wrap.
 				layout.setText(font, text, 0, text.length(), font.getColor(), w, Align.center, true, null);
 			} else { // Test truncation.

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -336,9 +336,9 @@ public FreeTypeBitmapFontData generateData (FreeTypeFontParameter parameter, Fre
 
 		// determine space width
 		if (loadChar(' ', flags) || loadChar('l', flags)) {
-			data.spaceWidth = FreeType.toInt(face.getGlyph().getMetrics().getHoriAdvance());
+			data.spaceXadvance = FreeType.toInt(face.getGlyph().getMetrics().getHoriAdvance());
 		} else {
-			data.spaceWidth = face.getMaxAdvanceWidth(); // Possibly very wrong.
+			data.spaceXadvance = face.getMaxAdvanceWidth(); // Possibly very wrong.
 		}
 
 		// determine x-height
@@ -481,7 +481,7 @@ public FreeTypeBitmapFontData generateData (FreeTypeFontParameter parameter, Fre
 		Glyph spaceGlyph = data.getGlyph(' ');
 		if (spaceGlyph == null) {
 			spaceGlyph = new Glyph();
-			spaceGlyph.xadvance = (int)data.spaceWidth + parameter.spaceX;
+			spaceGlyph.xadvance = (int)data.spaceXadvance + parameter.spaceX;
 			spaceGlyph.id = (int)' ';
 			data.setGlyph(' ', spaceGlyph);
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -408,7 +408,7 @@ void updateDisplayText () {
 		} else
 			displayText = newDisplayText;
 
-		layout.setText(font, displayText);
+		layout.setText(font, displayText.toString().replace('\r', ' ').replace('\n', ' '));
 		glyphPositions.clear();
 		float x = 0;
 		if (layout.runs.size > 0) {

File: gdx/src/com/badlogic/gdx/math/Interpolation.java
Patch:
@@ -66,7 +66,7 @@ public float apply (float a) {
 	static public final PowIn slowFast = pow2In;
 	/** Fast, then slow. */
 	static public final PowOut pow2Out = new PowOut(2);
-	static public final PowIn fastSlow = pow2In;
+	static public final PowOut fastSlow = pow2Out;
 	static public final Interpolation pow2InInverse = new Interpolation() {
 		public float apply (float a) {
 			return (float)Math.sqrt(a);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TooltipManager.java
Patch:
@@ -64,7 +64,7 @@ public void run () {
 	Tooltip showTooltip;
 	final Task showTask = new Task() {
 		public void run () {
-			if (showTooltip == null) return;
+			if (showTooltip == null || showTooltip.targetActor == null) return;
 
 			Stage stage = showTooltip.targetActor.getStage();
 			if (stage == null) return;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -58,6 +58,7 @@
 import com.badlogic.gdx.tests.g3d.HeightMapTest;
 import com.badlogic.gdx.tests.g3d.LightsTest;
 import com.badlogic.gdx.tests.g3d.MaterialTest;
+import com.badlogic.gdx.tests.g3d.MaterialEmissiveTest;
 import com.badlogic.gdx.tests.g3d.MeshBuilderTest;
 import com.badlogic.gdx.tests.g3d.ModelCacheTest;
 import com.badlogic.gdx.tests.g3d.ModelTest;
@@ -163,6 +164,7 @@ public class GdxTests {
 		LifeCycleTest.class,
 		LightsTest.class,
 		MaterialTest.class,
+		MaterialEmissiveTest.class,
 		MatrixJNITest.class,
 		MeshBuilderTest.class,
 		MeshShaderTest.class,

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -405,7 +405,8 @@ static long createGlfwWindow(Lwjgl3ApplicationConfiguration config, long sharedC
 		GLFW.glfwWindowHint(GLFW.GLFW_VISIBLE, GLFW.GLFW_FALSE);
 		GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, config.windowResizable ? GLFW.GLFW_TRUE : GLFW.GLFW_FALSE);
 		GLFW.glfwWindowHint(GLFW.GLFW_MAXIMIZED, config.windowMaximized ? GLFW.GLFW_TRUE : GLFW.GLFW_FALSE);
-		
+		GLFW.glfwWindowHint(GLFW.GLFW_AUTO_ICONIFY, config.autoIconify ? GLFW.GLFW_TRUE : GLFW.GLFW_FALSE);
+
 		if(sharedContextWindow == 0) {
 			GLFW.glfwWindowHint(GLFW.GLFW_RED_BITS, config.r);
 			GLFW.glfwWindowHint(GLFW.GLFW_GREEN_BITS, config.g);

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -399,6 +399,7 @@ public FreeTypeBitmapFontData generateData (FreeTypeFontParameter parameter, Fre
 		Glyph missingGlyph = createGlyph('\0', data, parameter, stroker, baseLine, packer);
 		if (missingGlyph != null && missingGlyph.width != 0 && missingGlyph.height != 0) {
 			data.setGlyph('\0', missingGlyph);
+			data.missingGlyph = missingGlyph;
 			if (incremental) data.glyphs.add(missingGlyph);
 		}
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/PolygonSprite.java
Patch:
@@ -333,12 +333,13 @@ public void setRegion (PolygonRegion region) {
 		float[] regionVertices = region.vertices;
 		float[] textureCoords = region.textureCoords;
 
-		if (vertices == null || regionVertices.length != vertices.length) vertices = new float[(regionVertices.length / 2) * 5];
+		int verticesLength = (regionVertices.length / 2) * 5;
+		if (vertices == null || vertices.length != verticesLength) vertices = new float[verticesLength];
 
 		// Set the color and UVs in this sprite's vertices.
 		float floatColor = color.toFloatBits();
 		float[] vertices = this.vertices;
-		for (int i = 0, v = 2, n = regionVertices.length; i < n; i += 2, v += 5) {
+		for (int i = 0, v = 2; v < verticesLength; i += 2, v += 5) {
 			vertices[v] = floatColor;
 			vertices[v + 1] = textureCoords[i];
 			vertices[v + 2] = textureCoords[i + 1];

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -729,8 +729,8 @@ public boolean removeActor (Actor actor, boolean unfocus) {
 
 	public Actor hit (float x, float y, boolean touchable) {
 		if (x < 0 || x >= getWidth() || y < 0 || y >= getHeight()) return null;
-		if (scrollX && hScrollBounds.contains(x, y)) return this;
-		if (scrollY && vScrollBounds.contains(x, y)) return this;
+		if (scrollX && touchScrollH && hScrollBounds.contains(x, y)) return this;
+		if (scrollY && touchScrollV && vScrollBounds.contains(x, y)) return this;
 		return super.hit(x, y, touchable);
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/GlyphLayout.java
Patch:
@@ -243,7 +243,7 @@ else if (targetWidth <= font.data.spaceWidth) //
 		}
 
 		this.width = width;
-		this.height = fontData.capHeight + lines * fontData.lineHeight + blankLines * fontData.lineHeight * fontData.blankLineScale;
+		this.height = fontData.capHeight - lines * fontData.down - blankLines * fontData.down * fontData.blankLineScale;
 	}
 
 	private void truncate (BitmapFontData fontData, GlyphRun run, float targetWidth, String truncate, int widthIndex,

File: gdx/src/com/badlogic/gdx/graphics/g3d/particles/emitters/RegularEmitter.java
Patch:
@@ -119,7 +119,7 @@ public void activateParticles (int startIndex, int count) {
 	}
 
 	public void update () {
-		int deltaMillis = (int)(controller.deltaTime * 1000);
+		float deltaMillis = controller.deltaTime * 1000;
 
 		if (delayTimer < delay) {
 			delayTimer += deltaMillis;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -105,7 +105,6 @@ public void onModuleLoad () {
 		this.config = getConfig();
 		setApplicationLogger(new GwtApplicationLogger(this.config.log));
 
-		addEventListeners();
 
 		if (config.rootPanel != null) {
 			this.root = config.rootPanel;
@@ -170,6 +169,7 @@ public void update (PreloaderState state) {
 					if(loadingListener != null)
 						loadingListener.beforeSetup();
 					setupLoop();
+					addEventListeners();
 					if(loadingListener != null)
 						loadingListener.afterSetup();
 				}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtInput.java
Patch:
@@ -498,7 +498,7 @@ private int getButton (int button) {
 
 	private void handleEvent (NativeEvent e) {
 		if (e.getType().equals("mousedown")) {
-			if (!e.getEventTarget().equals(canvas) || touched[0]) {
+			if (!e.getEventTarget().equals(canvas) || pressedButtons.contains(getButton(e.getButton()))) {
 				float mouseX = getRelativeX(e, canvas);
 				float mouseY = getRelativeY(e, canvas);
 				if (mouseX < 0 || mouseX > Gdx.graphics.getWidth() || mouseY < 0 || mouseY > Gdx.graphics.getHeight()) {
@@ -545,7 +545,7 @@ private void handleEvent (NativeEvent e) {
 		}
 
 		if (e.getType().equals("mouseup")) {
-			if (!touched[0]) return;
+			if (!pressedButtons.contains(getButton(e.getButton()))) return;
 			this.pressedButtons.remove(getButton(e.getButton()));
 			this.touched[0] = pressedButtons.size > 0;
 			if (isCursorCatched()) {

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -25,10 +25,10 @@ public class DependencyBank {
 	static String libgdxVersion = "1.9.8";
 	//Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly
 	static String libgdxNightlyVersion = "1.9.9-SNAPSHOT";
-	static String roboVMVersion = "2.3.1";
+	static String roboVMVersion = "2.3.3";
 	static String moeVersion = "1.4.0";
-	static String buildToolsVersion = "23.0.1";
-	static String androidAPILevel = "20";
+	static String buildToolsVersion = "25.0.3";
+	static String androidAPILevel = "25";
 	static String gwtVersion = "2.8.0";
 
 	//Repositories

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -210,7 +210,7 @@ void setupLoop () {
 		Gdx.files = new GwtFiles(preloader);
 		this.input = new GwtInput(graphics.canvas);
 		Gdx.input = this.input;
-		this.net = new GwtNet();
+		this.net = new GwtNet(config);
 		Gdx.net = this.net;
 		this.clipboard = new GwtClipboard();
 		updateLogLabelSize();

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplicationConfiguration.java
Patch:
@@ -55,6 +55,9 @@ public class GwtApplicationConfiguration {
 	/** screen-orientation to attempt locking as the application enters full-screen-mode. Note that on mobile browsers, full-screen
 	 * mode can typically only be entered on a user gesture (click, tap, key-stroke) **/
 	public OrientationLockType fullscreenOrientation;
+	/* Whether openURI will open page in new tab. By default it will, however if may be blocked by popup blocker. */
+	/* To prevent the page from being blocked you can redirect to the new page. However this will exit your game.  */
+	public boolean openURLInNewWindow = true;
 
 	public GwtApplicationConfiguration (int width, int height) {
 		this.width = width;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/net/OpenBrowserExample.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.badlogic.gdx.tests.net;
 
-import com.badlogic.gdx.ApplicationAdapter;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.tests.utils.GdxTest;
 

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -178,11 +178,11 @@ public BitmapFont generateFont (FreeTypeFontParameter parameter) {
 	 * generated. Using big sizes might cause such an exception.
 	 * @param parameter configures how the font is generated */
 	public BitmapFont generateFont (FreeTypeFontParameter parameter, FreeTypeBitmapFontData data) {
+		boolean updateTextureRegions = data.regions == null && parameter.packer != null;
+		if (updateTextureRegions) data.regions = new Array();
 		generateData(parameter, data);
-		if (data.regions == null && parameter.packer != null) {
-			data.regions = new Array();
+		if (updateTextureRegions)
 			parameter.packer.updateTextureRegions(data.regions, parameter.minFilter, parameter.magFilter, parameter.genMipMaps);
-		}
 		BitmapFont font = new BitmapFont(data, data.regions, true);
 		font.setOwnsTexture(parameter.packer == null);
 		return font;

File: gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
Patch:
@@ -190,7 +190,7 @@ public void setPosition (float x, float y) {
 
 	/** Sets the position where the sprite will be drawn, relative to its current origin.  */
 	public void setOriginBasedPosition (float x, float y) {
-		setPosition(x - this.originX, y - this.originX);
+		setPosition(x - this.originX, y - this.originY);
 	}
 
 	/** Sets the x position where the sprite will be drawn. If origin, rotation, or scale are changed, it is slightly more efficient

File: gdx/src/com/badlogic/gdx/maps/tiled/AtlasTmxMapLoader.java
Patch:
@@ -358,7 +358,7 @@ protected void loadTileset (TiledMap map, Element element, FileHandle tmxFile, A
 				for (AtlasRegion region : atlas.findRegions(regionsName)) {
 					// handle unused tile ids
 					if (region != null) {
-						int tileid = region.index + 1;
+						int tileid = region.index + firstgid;
 						if (tileid >= firstgid && tileid <= lastgid) {
 							StaticTiledMapTile tile = new StaticTiledMapTile(region);
 							tile.setId(tileid);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Touchpad.java
Patch:
@@ -23,6 +23,7 @@
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.InputEvent;
 import com.badlogic.gdx.scenes.scene2d.InputListener;
+import com.badlogic.gdx.scenes.scene2d.Touchable;
 import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener.ChangeEvent;
 import com.badlogic.gdx.scenes.scene2d.utils.Drawable;
 import com.badlogic.gdx.utils.Pools;
@@ -133,7 +134,7 @@ public TouchpadStyle getStyle () {
 
 	@Override
 	public Actor hit (float x, float y, boolean touchable) {
-		if (touchable && this.touchable != Touchable.enabled) return null;
+		if (touchable && this.getTouchable() != Touchable.enabled) return null;
 		return touchBounds.contains(x, y) ? this : null;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Dialog.java
Patch:
@@ -199,6 +199,7 @@ public Dialog show (Stage stage, Action action) {
 
 		pack();
 		stage.addActor(this);
+		stage.cancelTouchFocus();
 		stage.setKeyboardFocus(this);
 		stage.setScrollFocus(this);
 		if (action != null) addAction(action);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Touchpad.java
Patch:
@@ -133,6 +133,7 @@ public TouchpadStyle getStyle () {
 
 	@Override
 	public Actor hit (float x, float y, boolean touchable) {
+		if (touchable && this.touchable != Touchable.enabled) return null;
 		return touchBounds.contains(x, y) ? this : null;
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/InternalTickTest.java
Patch:
@@ -36,7 +36,7 @@ public void onInternalTick (btDynamicsWorld dynamicsWorld, float timeStep) {
 			dynamicsWorld.clearForces();
 			int idx = 0;
 			for (int i = 0; i < objs.size(); i++) {
-				btRigidBody body = (btRigidBody)(objs.at(i));
+				btRigidBody body = (btRigidBody)(objs.atConst(i));
 				if (body == null || body.isStaticOrKinematicObject()) continue;
 				body.applyGravity();
 				body.applyCentralForce(tmpV1.set(0f, 8.0f + (float)(6.0 * Math.random()), 0f));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/PairCacheTest.java
Patch:
@@ -153,7 +153,7 @@ public void render () {
 			if (algorithm != null) algorithm.getAllContactManifolds(manifoldArray);
 
 			for (int j = 0; j < manifoldArray.size(); j++) {
-				btPersistentManifold manifold = manifoldArray.at(j);
+				btPersistentManifold manifold = manifoldArray.atConst(j);
 
 				boolean isFirstBody = manifold.getBody0() == ghostObject;
 				int otherObjectIndex = isFirstBody ? manifold.getBody1().getUserValue() : manifold.getBody0().getUserValue();

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -35,7 +35,9 @@
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.IntArray;
 import com.badlogic.gdx.utils.ObjectMap;
+import com.badlogic.gdx.utils.SerializationException;
 import com.badlogic.gdx.utils.XmlReader.Element;
+
 import java.io.IOException;
 
 /** @brief synchronous loader for TMX maps created with the Tiled tool */
@@ -340,7 +342,7 @@ protected void loadTileSet (TiledMap map, Element element, FileHandle tmxFile, I
 						imageHeight = imageElement.getIntAttribute("height", 0);
 						image = getRelativeFileHandle(tsx, imageSource);
 					}					
-				} catch (IOException e) {
+				} catch (SerializationException e) {
 					throw new GdxRuntimeException("Error parsing external tileset.");
 				}
 			} else {

File: gdx/src/com/badlogic/gdx/utils/XmlReader.java
Patch:
@@ -44,7 +44,7 @@ public Element parse (String xml) {
 		return parse(data, 0, data.length);
 	}
 
-	public Element parse (Reader reader) throws IOException {
+	public Element parse (Reader reader) {
 		try {
 			char[] data = new char[1024];
 			int offset = 0;
@@ -66,7 +66,7 @@ public Element parse (Reader reader) throws IOException {
 		}
 	}
 
-	public Element parse (InputStream input) throws IOException {
+	public Element parse (InputStream input) {
 		try {
 			return parse(new InputStreamReader(input, "UTF-8"));
 		} catch (IOException ex) {
@@ -76,7 +76,7 @@ public Element parse (InputStream input) throws IOException {
 		}
 	}
 
-	public Element parse (FileHandle file) throws IOException {
+	public Element parse (FileHandle file) {
 		try {
 			return parse(file.reader("UTF-8"));
 		} catch (Exception ex) {

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -120,7 +120,7 @@ public void add (T value1, T value2, T value3) {
 
 	public void add (T value1, T value2, T value3, T value4) {
 		T[] items = this.items;
-		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));
+		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f))); // 1.75 isn't enough when size=5.
 		items[size] = value1;
 		items[size + 1] = value2;
 		items[size + 2] = value3;

File: gdx/src/com/badlogic/gdx/utils/BooleanArray.java
Patch:
@@ -99,7 +99,7 @@ public void add (boolean value1, boolean value2, boolean value3) {
 
 	public void add (boolean value1, boolean value2, boolean value3, boolean value4) {
 		boolean[] items = this.items;
-		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));
+		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f))); // 1.75 isn't enough when size=5.
 		items[size] = value1;
 		items[size + 1] = value2;
 		items[size + 2] = value3;

File: gdx/src/com/badlogic/gdx/utils/ByteArray.java
Patch:
@@ -97,7 +97,7 @@ public void add (byte value1, byte value2, byte value3) {
 
 	public void add (byte value1, byte value2, byte value3, byte value4) {
 		byte[] items = this.items;
-		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));
+		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f))); // 1.75 isn't enough when size=5.
 		items[size] = value1;
 		items[size + 1] = value2;
 		items[size + 2] = value3;

File: gdx/src/com/badlogic/gdx/utils/CharArray.java
Patch:
@@ -97,7 +97,7 @@ public void add (char value1, char value2, char value3) {
 
 	public void add (char value1, char value2, char value3, char value4) {
 		char[] items = this.items;
-		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));
+		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f))); // 1.75 isn't enough when size=5.
 		items[size] = value1;
 		items[size + 1] = value2;
 		items[size + 2] = value3;

File: gdx/src/com/badlogic/gdx/utils/FloatArray.java
Patch:
@@ -97,7 +97,7 @@ public void add (float value1, float value2, float value3) {
 
 	public void add (float value1, float value2, float value3, float value4) {
 		float[] items = this.items;
-		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));
+		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f))); // 1.75 isn't enough when size=5.
 		items[size] = value1;
 		items[size + 1] = value2;
 		items[size + 2] = value3;

File: gdx/src/com/badlogic/gdx/utils/IntArray.java
Patch:
@@ -97,7 +97,7 @@ public void add (int value1, int value2, int value3) {
 
 	public void add (int value1, int value2, int value3, int value4) {
 		int[] items = this.items;
-		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));
+		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f))); // 1.75 isn't enough when size=5.
 		items[size] = value1;
 		items[size + 1] = value2;
 		items[size + 2] = value3;

File: gdx/src/com/badlogic/gdx/utils/LongArray.java
Patch:
@@ -97,7 +97,7 @@ public void add (long value1, long value2, long value3) {
 
 	public void add (long value1, long value2, long value3, long value4) {
 		long[] items = this.items;
-		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));
+		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f))); // 1.75 isn't enough when size=5.
 		items[size] = value1;
 		items[size + 1] = value2;
 		items[size + 2] = value3;

File: gdx/src/com/badlogic/gdx/utils/ShortArray.java
Patch:
@@ -104,7 +104,7 @@ public void add (short value1, short value2, short value3) {
 
 	public void add (short value1, short value2, short value3, short value4) {
 		short[] items = this.items;
-		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));
+		if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f))); // 1.75 isn't enough when size=5.
 		items[size] = value1;
 		items[size + 1] = value2;
 		items[size + 2] = value3;

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePackerFileProcessor.java
Patch:
@@ -126,8 +126,8 @@ protected void processFile (Entry inputFile) throws Exception {
 				};
 				deleteProcessor.setRecursive(false);
 
-				String scaledPackFileName = rootSettings.getScaledPackFileName(packFileName, i);
-				File packFile = new File(scaledPackFileName);
+				File packFile = new File(rootSettings.getScaledPackFileName(packFileName, i));
+				String scaledPackFileName = packFile.getName();
 
 				String prefix = packFile.getName();
 				int dotIndex = prefix.lastIndexOf('.');

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -327,6 +327,7 @@ private Object[] getDefaultValues (Class type) {
 		int i = 0;
 		for (FieldMetadata metadata : fields.values()) {
 			Field field = metadata.field;
+			if (readDeprecated && ignoreDeprecated && field.isAnnotationPresent(Deprecated.class)) continue;
 			try {
 				values[i++] = field.get(object);
 			} catch (ReflectionException ex) {

File: gdx/src/com/badlogic/gdx/graphics/glutils/FloatFrameBuffer.java
Patch:
@@ -28,7 +28,7 @@
 public class FloatFrameBuffer extends FrameBuffer {
 
 	/**
-	 * Creates a GLFrameBuffer from the specifications provided by {@param bufferBuilder}
+	 * Creates a GLFrameBuffer from the specifications provided by bufferBuilder
 	 *
 	 * @param bufferBuilder
 	 **/

File: gdx/src/com/badlogic/gdx/graphics/glutils/FrameBuffer.java
Patch:
@@ -43,7 +43,7 @@
 public class FrameBuffer extends GLFrameBuffer<Texture> {
 
 	/**
-	 * Creates a GLFrameBuffer from the specifications provided by {@param bufferBuilder}
+	 * Creates a GLFrameBuffer from the specifications provided by bufferBuilder
 	 *
 	 * @param bufferBuilder
 	 **/

File: gdx/src/com/badlogic/gdx/graphics/glutils/FrameBufferCubemap.java
Patch:
@@ -70,7 +70,7 @@ public class FrameBufferCubemap extends GLFrameBuffer<Cubemap> {
 	private static final Cubemap.CubemapSide[] cubemapSides = Cubemap.CubemapSide.values();
 
 	/**
-	 * Creates a GLFrameBuffer from the specifications provided by {@param bufferBuilder}
+	 * Creates a GLFrameBuffer from the specifications provided by bufferBuilder
 	 *
 	 * @param bufferBuilder
 	 **/

File: gdx/src/com/badlogic/gdx/graphics/glutils/GLFrameBuffer.java
Patch:
@@ -81,7 +81,7 @@ public abstract class GLFrameBuffer<T extends GLTexture> implements Disposable {
 
 	protected GLFrameBufferBuilder<? extends GLFrameBuffer<T>> bufferBuilder;
 
-	/** Creates a GLFrameBuffer from the specifications provided by {@param bufferBuilder} **/
+	/** Creates a GLFrameBuffer from the specifications provided by bufferBuilder **/
 	protected GLFrameBuffer (GLFrameBufferBuilder<? extends GLFrameBuffer<T>> bufferBuilder) {
 		this.bufferBuilder = bufferBuilder;
 		build();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -837,7 +837,7 @@ protected boolean isInsideViewport (int screenX, int screenY) {
 		int x1 = x0 + viewport.getScreenWidth();
 		int y0 = viewport.getScreenY();
 		int y1 = y0 + viewport.getScreenHeight();
-		screenY = Gdx.graphics.getHeight() - screenY;
+		screenY = Gdx.graphics.getHeight() - 1 - screenY;
 		return screenX >= x0 && screenX < x1 && screenY >= y0 && screenY < y1;
 	}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -442,7 +442,7 @@ private static native AgentInfo computeAgentInfo () /*-{
 																			isChrome : userAgent.indexOf("chrome") != -1,
 																			isSafari : userAgent.indexOf("safari") != -1,
 																			isOpera : userAgent.indexOf("opera") != -1,
-																			isIE : userAgent.indexOf("msie") != -1,
+																			isIE : userAgent.indexOf("msie") != -1 || userAgent.indexOf("trident") != -1,
 																			// OS type flags
 																			isMacOS : userAgent.indexOf("mac") != -1,
 																			isLinux : userAgent.indexOf("linux") != -1,

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtInput.java
Patch:
@@ -423,7 +423,7 @@ private static native float getMouseWheelVelocity (NativeEvent evt) /*-{
 				// on mac
 				delta = -1.0 * evt.wheelDelta / 40;
 			}
-		} else if (agentInfo.isChrome || agentInfo.isSafari) {
+		} else if (agentInfo.isChrome || agentInfo.isSafari || agentInfo.isIE) {
 			delta = -1.0 * evt.wheelDelta / 120;
 			// handle touchpad for chrome
 			if (Math.abs(delta) < 1) {

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/unicodefont/GlyphPage.java
Patch:
@@ -104,7 +104,7 @@ int loadGlyphs (List glyphs, int maxGlyphsToLoad) {
 					if (row.x + width < pageWidth) {
 						row.height = Math.max(row.height, height);
 						bestRow = row;
-					} else {
+					} else if (row.y + row.height + height < pageHeight) {
 						// Fit in new row.
 						bestRow = new Row();
 						bestRow.y = row.y + row.height;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OpenALMusic.java
Patch:
@@ -113,6 +113,7 @@ public void stop () {
 		audio.freeSource(sourceID);
 		sourceID = -1;
 		renderedSeconds = 0;
+		renderedSecondsQueue.clear();
 		isPlaying = false;
 	}
 

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALMusic.java
Patch:
@@ -116,6 +116,7 @@ public void stop () {
 		audio.freeSource(sourceID);
 		sourceID = -1;
 		renderedSeconds = 0;
+		renderedSecondsQueue.clear();
 		isPlaying = false;
 	}
 

File: gdx/src/com/badlogic/gdx/maps/tiled/AtlasTmxMapLoader.java
Patch:
@@ -271,9 +271,9 @@ protected TiledMap loadMap (Element root, FileHandle tmxFile, AtlasResolver reso
 			} else if (elementName.equals("tileset")) {
 				loadTileset(map, element, tmxFile, resolver);
 			} else if (elementName.equals("layer")) {
-				loadTileLayer(map, element);
+				loadTileLayer(map, map.getLayers(), element);
 			} else if (elementName.equals("objectgroup")) {
-				loadObjectGroup(map, element);
+				loadObjectGroup(map, map.getLayers(), element);
 			}
 		}
 		return map;

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java
Patch:
@@ -112,9 +112,9 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 		final float layerTileWidth = layer.getTileWidth() * unitScale;
 		final float layerTileHeight = layer.getTileHeight() * unitScale;
 
-		final float layerOffsetX = layer.getOffsetX() * unitScale;
+		final float layerOffsetX = layer.getRenderOffsetX() * unitScale;
 		// offset in tiled is y down, so we flip it
-		final float layerOffsetY = -layer.getOffsetY() * unitScale;
+		final float layerOffsetY = -layer.getRenderOffsetY() * unitScale;
 
 		final float layerHexLength = hexSideLength * unitScale;
 

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java
Patch:
@@ -52,9 +52,9 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 		final int layerWidth = layer.getWidth();
 		final int layerHeight = layer.getHeight();
 
-		final float layerOffsetX = layer.getOffsetX() * unitScale;
+		final float layerOffsetX = layer.getRenderOffsetX() * unitScale;
 		// offset in tiled is y down, so we flip it
-		final float layerOffsetY = -layer.getOffsetY() * unitScale;
+		final float layerOffsetY = -layer.getRenderOffsetY() * unitScale;
 
 		final float layerTileWidth = layer.getTileWidth() * unitScale;
 		final float layerTileHeight = layer.getTileHeight() * unitScale;

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricTiledMapRenderer.java
Patch:
@@ -89,9 +89,9 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 		float tileWidth = layer.getTileWidth() * unitScale;
 		float tileHeight = layer.getTileHeight() * unitScale;
 
-		final float layerOffsetX = layer.getOffsetX() * unitScale;
+		final float layerOffsetX = layer.getRenderOffsetX() * unitScale;
 		// offset in tiled is y down, so we flip it
-		final float layerOffsetY = -layer.getOffsetY() * unitScale;
+		final float layerOffsetY = -layer.getRenderOffsetY() * unitScale;
 
 		float halfTileWidth = tileWidth * 0.5f;
 		float halfTileHeight = tileHeight * 0.5f;

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthoCachedTiledMapRenderer.java
Patch:
@@ -217,9 +217,9 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 		final float layerTileWidth = layer.getTileWidth() * unitScale;
 		final float layerTileHeight = layer.getTileHeight() * unitScale;
 
-		final float layerOffsetX = layer.getOffsetX() * unitScale;
+		final float layerOffsetX = layer.getRenderOffsetX() * unitScale;
 		// offset in tiled is y down, so we flip it
-		final float layerOffsetY = -layer.getOffsetY() * unitScale;
+		final float layerOffsetY = -layer.getRenderOffsetY() * unitScale;
 
 		final int col1 = Math.max(0, (int)((cacheBounds.x - layerOffsetX) / layerTileWidth));
 		final int col2 = Math.min(layerWidth,

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer.java
Patch:
@@ -74,9 +74,9 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 		final float layerTileWidth = layer.getTileWidth() * unitScale;
 		final float layerTileHeight = layer.getTileHeight() * unitScale;
 
-		final float layerOffsetX = layer.getOffsetX() * unitScale;
+		final float layerOffsetX = layer.getRenderOffsetX() * unitScale;
 		// offset in tiled is y down, so we flip it
-		final float layerOffsetY = -layer.getOffsetY() * unitScale;
+		final float layerOffsetY = -layer.getRenderOffsetY() * unitScale;
 
 		final int col1 = Math.max(0, (int)((viewBounds.x - layerOffsetX) / layerTileWidth));
 		final int col2 = Math.min(layerWidth,

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -240,6 +240,7 @@ public class GdxTests {
 		TideMapDirectLoaderTest.class,
 		TileTest.class,
 		TiledMapAssetManagerTest.class,
+		TiledMapGroupLayerTest.class,
 		TiledMapAtlasAssetManagerTest.class,
 		TiledMapDirectLoaderTest.class,
 		TiledMapModifiedExternalTilesetTest.class,

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -21,6 +21,7 @@
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.assets.loaders.AssetLoader;
 import com.badlogic.gdx.assets.loaders.BitmapFontLoader;
+import com.badlogic.gdx.assets.loaders.CubemapLoader;
 import com.badlogic.gdx.assets.loaders.FileHandleResolver;
 import com.badlogic.gdx.assets.loaders.I18NBundleLoader;
 import com.badlogic.gdx.assets.loaders.MusicLoader;
@@ -34,6 +35,7 @@
 import com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver;
 import com.badlogic.gdx.audio.Music;
 import com.badlogic.gdx.audio.Sound;
+import com.badlogic.gdx.graphics.Cubemap;
 import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
@@ -115,6 +117,7 @@ public AssetManager (FileHandleResolver resolver, boolean defaultLoaders) {
 			setLoader(Model.class, ".g3db", new G3dModelLoader(new UBJsonReader(), resolver));
 			setLoader(Model.class, ".obj", new ObjLoader(resolver));
 			setLoader(ShaderProgram.class, new ShaderProgramLoader(resolver));
+			setLoader(Cubemap.class, new CubemapLoader(resolver));
 		}
 		executor = new AsyncExecutor(1);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypeFontLoaderTest.java
Patch:
@@ -30,7 +30,7 @@ public void create () {
 		// load to fonts via the generator (implicitely done by the FreetypeFontLoader).
 		// Note: you MUST specify a FreetypeFontGenerator defining the ttf font file name and the size
 		// of the font to be generated. The names of the fonts are arbitrary and are not pointing
-		// to a file on disk!
+		// to a file on disk (but must end with the font's file format '.ttf')!
 		FreeTypeFontLoaderParameter size1Params = new FreeTypeFontLoaderParameter();
 		size1Params.fontFileName = "data/arial.ttf";
 		size1Params.fontParameters.size = 10;

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSApplication.java
Patch:
@@ -405,11 +405,11 @@ public Preferences getPreferences (String name) {
 		File finalPath = new File(libraryPath, name + ".plist");
 		String path = libraryPath + "/" + name + ".plist";
 
-		NSMutableDictionary<NSString, NSObject> nsDictionary = NSMutableDictionary.dictionaryWithContentsOfFile(path);
+		NSMutableDictionary<String, Object> nsDictionary = NSMutableDictionary.dictionaryWithContentsOfFile(path);
 
 		// if it fails to get an existing dictionary, create a new one.
 		if (nsDictionary == null) {
-			nsDictionary = (NSMutableDictionary<NSString, NSObject>)NSMutableDictionary.alloc().init();
+			nsDictionary = (NSMutableDictionary<String, Object>)NSMutableDictionary.alloc().init();
 			nsDictionary.writeToFileAtomically(path, false);
 		}
 		return new IOSPreferences(nsDictionary, finalPath.getAbsolutePath());

File: gdx/src/com/badlogic/gdx/graphics/profiling/GLProfiler.java
Patch:
@@ -77,7 +77,7 @@ public void disable () {
 		enabled = false;
 	}
 
-	/** Set the current listener for the {@link GLProfiler} to {@param errorListener} */
+	/** Set the current listener for the {@link GLProfiler} to {@code errorListener} */
 	public void setListener (GLErrorListener errorListener) {
 		this.listener = errorListener;
 	}

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -1098,7 +1098,7 @@ public Mesh copy (boolean isStatic, boolean removeDuplicates, final int[] usage)
 		else
 			result = new Mesh(isStatic, numVertices, indices == null ? 0 : indices.length, attrs);
 		result.setVertices(vertices, 0, numVertices * newVertexSize);
-		result.setIndices(indices);
+		if (indices != null) result.setIndices(indices);
 		return result;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteCache.java
Patch:
@@ -167,6 +167,7 @@ public Color getColor () {
 
 	/** Starts the definition of a new cache, allowing the add and {@link #endCache()} methods to be called. */
 	public void beginCache () {
+		if (drawing) throw new IllegalStateException("end must be called before beginCache");
 		if (currentCache != null) throw new IllegalStateException("endCache must be called before begin.");
 		int verticesPerImage = mesh.getNumIndices() > 0 ? 4 : 6;
 		currentCache = new Cache(caches.size, mesh.getVerticesBuffer().limit());
@@ -178,6 +179,7 @@ public void beginCache () {
 	 * the last cache created, it cannot have more entries added to it than when it was first created. To do that, use
 	 * {@link #clear()} and then {@link #begin()}. */
 	public void beginCache (int cacheID) {
+		if (drawing) throw new IllegalStateException("end must be called before beginCache");
 		if (currentCache != null) throw new IllegalStateException("endCache must be called before begin.");
 		if (cacheID == caches.size - 1) {
 			Cache oldCache = caches.removeIndex(cacheID);
@@ -846,6 +848,7 @@ public void add (Sprite sprite) {
 	/** Prepares the OpenGL state for SpriteCache rendering. */
 	public void begin () {
 		if (drawing) throw new IllegalStateException("end must be called before begin.");
+		if (currentCache != null) throw new IllegalStateException("endCache must be called before begin");
 		renderCalls = 0;
 		combinedMatrix.set(projectionMatrix).mul(transformMatrix);
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/profiling/GLErrorListener.java
Patch:
@@ -18,14 +18,14 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.utils.GdxRuntimeException;
-import static com.badlogic.gdx.graphics.profiling.GLProfiler.resolveErrorNumber;
+import static com.badlogic.gdx.graphics.profiling.GLInterceptor.resolveErrorNumber;
 
 /** @see GLProfiler
  * @author Jan Polák */
 public interface GLErrorListener {
 
 	/** Put your error logging code here.
-	 * @see GLProfiler#resolveErrorNumber(int) */
+	 * @see GLInterceptor#resolveErrorNumber(int) */
 	public void onError (int error);
 
 	// Basic implementations

File: gdx/src/com/badlogic/gdx/graphics/profiling/GLErrorListener.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.utils.GdxRuntimeException;
-import static com.badlogic.gdx.graphics.profiling.GLProfiler.resolveErrorNumber;
+import static com.badlogic.gdx.graphics.profiling.GLInterceptor.resolveErrorNumber;
 
 /** Listener for GL errors detected by {@link GLProfiler}.
  * 
@@ -27,7 +27,7 @@
 public interface GLErrorListener {
 
 	/** Put your error logging code here.
-	 * @see GLProfiler#resolveErrorNumber(int) */
+	 * @see GLInterceptor#resolveErrorNumber(int) */
 	public void onError (int error);
 
 	// Basic implementations

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -613,6 +613,7 @@ public void setSprite (Sprite sprite) {
 			if (particle == null) break;
 			particle.setTexture(texture);
 			particle.setOrigin(originX, originY);
+			particle.setRegion(sprite);
 		}
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -182,6 +182,7 @@ public class GdxTests {
 		ParticleControllerTest.class,
 		ParticleEmitterTest.class,
 		ParticleEmittersTest.class,
+		ParticleEmitterChangeSpriteTest.class,
 		PixelsPerInchTest.class,
 		PixmapBlendingTest.class,
 		PixmapPackerTest.class,

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AnimationTest.java
Patch:
@@ -71,8 +71,7 @@ public void create () {
 		
 		TextureRegion[] rightRegions = rightWalk.getKeyFrames(); // testing backing array type
 		TextureRegion firstRightRegion = rightRegions[0];
-		Gdx.app.log("AnimationTest", String.format("First right walk region is %s x %s", 
-			firstRightRegion.getRegionWidth(), firstRightRegion.getRegionHeight()));
+		Gdx.app.log("AnimationTest", "First right walk region is " + firstRightRegion.getRegionWidth() + "x" + firstRightRegion.getRegionHeight());
 
 		cavemen = new Caveman[100];
 		for (int i = 0; i < 100; i++) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -320,7 +320,7 @@ public AtlasRegion findRegion (String name, int index) {
 	/** Returns all regions with the specified name, ordered by smallest to largest {@link AtlasRegion#index index}. This method
 	 * uses string comparison to find the regions, so the result should be cached rather than calling this method multiple times. */
 	public Array<AtlasRegion> findRegions (String name) {
-		Array<AtlasRegion> matched = new Array();
+		Array<AtlasRegion> matched = new Array(AtlasRegion.class);
 		for (int i = 0, n = regions.size; i < n; i++) {
 			AtlasRegion region = regions.get(i);
 			if (region.name.equals(name)) matched.add(new AtlasRegion(region));
@@ -332,7 +332,7 @@ public Array<AtlasRegion> findRegions (String name) {
 	 * stored rather than calling this method multiple times.
 	 * @see #createSprite(String) */
 	public Array<Sprite> createSprites () {
-		Array sprites = new Array(regions.size);
+		Array sprites = new Array(true, regions.size, Sprite.class);
 		for (int i = 0, n = regions.size; i < n; i++)
 			sprites.add(newSprite(regions.get(i)));
 		return sprites;
@@ -367,7 +367,7 @@ public Sprite createSprite (String name, int index) {
 	 * calling this method multiple times.
 	 * @see #createSprite(String) */
 	public Array<Sprite> createSprites (String name) {
-		Array<Sprite> matched = new Array();
+		Array<Sprite> matched = new Array(Sprite.class);
 		for (int i = 0, n = regions.size; i < n; i++) {
 			AtlasRegion region = regions.get(i);
 			if (region.name.equals(name)) matched.add(newSprite(region));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureAtlasTest.java
Patch:
@@ -26,6 +26,7 @@
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas.AtlasRegion;
+import com.badlogic.gdx.graphics.g2d.TextureRegion;
 import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
 import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -35,7 +36,7 @@ public class TextureAtlasTest extends GdxTest {
 	Sprite badlogic, badlogicSmall, star;
 	TextureAtlas atlas;
 	TextureAtlas jumpAtlas;
-	Animation jumpAnimation;
+	Animation<TextureRegion> jumpAnimation;
 	BitmapFont font;
 	float time = 0;
 	ShapeRenderer renderer;
@@ -47,7 +48,7 @@ public void create () {
 		atlas = new TextureAtlas(Gdx.files.internal("data/pack"));
 		jumpAtlas = new TextureAtlas(Gdx.files.internal("data/jump.txt"));
 
-		jumpAnimation = new Animation(0.25f, jumpAtlas.findRegions("ALIEN_JUMP_"));
+		jumpAnimation = new Animation<TextureRegion>(0.25f, jumpAtlas.findRegions("ALIEN_JUMP_"));
 
 		badlogic = atlas.createSprite("badlogicslice");
 		badlogic.setPosition(50, 50);

File: gdx/src/com/badlogic/gdx/math/WindowedMean.java
Patch:
@@ -81,7 +81,7 @@ public float getMean () {
 
 	/** @return the oldest value in the window */
 	public float getOldest () {
-		return last_value == values.length - 1 ? values[0] : values[last_value];
+		return added_values < values.length ? values[0] : values[last_value];
 	}
 
 	/** @return the value last added */

File: gdx/src/com/badlogic/gdx/utils/PauseableThread.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.badlogic.gdx.utils;
 
-/** A pausable thread. The runnable must not execute an inifite loop but should return control to the thread as often as possible
+/** A pausable thread. The runnable must not execute an infinite loop but should return control to the thread as often as possible
  * so that the thread can actually pause.
  * 
  * @author mzechner */

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -208,8 +208,10 @@ private void cleanup() {
 			((OpenALAudio) audio).dispose();
 		}
 		errorCallback.free();
+		errorCallback = null;
 		if (glDebugCallback != null) {
 			glDebugCallback.free();
+			glDebugCallback = null;
 		}
 		GLFW.glfwTerminate();
 	}

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/ImageProcessor.java
Patch:
@@ -205,7 +205,7 @@ private Rect stripWhitespace (BufferedImage source) {
 		final byte[] a = new byte[1];
 		int top = 0;
 		int bottom = source.getHeight();
-		if (settings.stripWhitespaceX) {
+		if (settings.stripWhitespaceY) {
 			outer:
 			for (int y = 0; y < source.getHeight(); y++) {
 				for (int x = 0; x < source.getWidth(); x++) {
@@ -234,7 +234,7 @@ private Rect stripWhitespace (BufferedImage source) {
 		}
 		int left = 0;
 		int right = source.getWidth();
-		if (settings.stripWhitespaceY) {
+		if (settings.stripWhitespaceX) {
 			outer:
 			for (int x = 0; x < source.getWidth(); x++) {
 				for (int y = top; y < bottom; y++) {

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwInput.java
Patch:
@@ -817,7 +817,7 @@ public GlfwInputProcessor (InputProcessor processor) {
 			this.processor = processor;
 		}
 
-		public void key (long window, int key, int action) {
+		public void key (long window, int key, int scancode, int action, int mods) {
 			switch (action) {
 			case GLFW_PRESS:
 

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreetypeBuild.java
Patch:
@@ -127,7 +127,7 @@ public static void main (String[] args) throws Exception {
 		ios.cFlags += " -DFT2_BUILD_LIBRARY";
 		ios.cppFlags += " -DFT2_BUILD_LIBRARY";
 
-		new NativeCodeGenerator().generate();
+		new NativeCodeGenerator().generate("src", "bin:../../gdx/bin", "jni");
 		new AntScriptGenerator()
 			.generate(new BuildConfig("gdx-freetype"), win32home, win32, win64, lin32, lin64, mac, mac64, android, ios);
 // BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v clean");

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java
Patch:
@@ -121,7 +121,7 @@ public TextButtonStyle (TextButtonStyle style) {
 			if (style.downFontColor != null) this.downFontColor = new Color(style.downFontColor);
 			if (style.overFontColor != null) this.overFontColor = new Color(style.overFontColor);
 			if (style.checkedFontColor != null) this.checkedFontColor = new Color(style.checkedFontColor);
-			if (style.checkedOverFontColor != null) this.checkedFontColor = new Color(style.checkedOverFontColor);
+			if (style.checkedOverFontColor != null) this.checkedOverFontColor = new Color(style.checkedOverFontColor);
 			if (style.disabledFontColor != null) this.disabledFontColor = new Color(style.disabledFontColor);
 		}
 	}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -208,8 +208,10 @@ private void cleanup() {
 			((OpenALAudio) audio).dispose();
 		}
 		errorCallback.free();
+		errorCallback = null;
 		if (glDebugCallback != null) {
 			glDebugCallback.free();
+			glDebugCallback = null;
 		}
 		GLFW.glfwTerminate();
 	}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -26,7 +26,7 @@ public class DependencyBank {
 	//Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly
 	static String libgdxNightlyVersion = "1.9.7-SNAPSHOT";
 	static String roboVMVersion = "2.3.0";
-	static String moeVersion = "1.3.2";
+	static String moeVersion = "1.3.6";
 	static String buildToolsVersion = "23.0.1";
 	static String androidAPILevel = "20";
 	static String gwtVersion = "2.8.0";

File: gdx/src/com/badlogic/gdx/math/Bezier.java
Patch:
@@ -153,6 +153,8 @@ public Bezier set (final Array<T> points, final int offset, final int length) {
 		if (length < 2 || length > 4)
 			throw new GdxRuntimeException("Only first, second and third degree Bezier curves are supported.");
 		if (tmp == null) tmp = points.get(0).cpy();
+		if (tmp2 == null) tmp2 = points.get(0).cpy();
+		if (tmp3 == null) tmp3 = points.get(0).cpy();
 		this.points.clear();
 		this.points.addAll(points, offset, length);
 		return this;

File: gdx/src/com/badlogic/gdx/assets/AssetDescriptor.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.badlogic.gdx.files.FileHandle;
 
-/** Describes an asset to be loaded by it's filename, type and {@link AssetLoaderParameters}. Instances of this are used in
+/** Describes an asset to be loaded by its filename, type and {@link AssetLoaderParameters}. Instances of this are used in
  * {@link AssetLoadingTask} to load the actual asset.
  * @author mzechner */
 public class AssetDescriptor<T> {

File: gdx/src/com/badlogic/gdx/graphics/Cubemap.java
Patch:
@@ -90,7 +90,7 @@ public Vector3 getDirection (Vector3 out) {
 
 	protected CubemapData data;
 
-	/** Construct an Cubemap based on the given CubemapData. */
+	/** Construct a Cubemap based on the given CubemapData. */
 	public Cubemap (CubemapData data) {
 		super(GL20.GL_TEXTURE_CUBE_MAP);
 		this.data = data;

File: gdx/src/com/badlogic/gdx/maps/MapObjects.java
Patch:
@@ -26,7 +26,7 @@ public class MapObjects implements Iterable<MapObject> {
 
 	private Array<MapObject> objects;
 
-	/** Creates and empty set of MapObject instances */
+	/** Creates an empty set of MapObject instances */
 	public MapObjects () {
 		objects = new Array<MapObject>();
 	}

File: gdx/src/com/badlogic/gdx/utils/XmlReader.java
Patch:
@@ -587,7 +587,7 @@ public Element getChildByName (String name) {
 		}
 
 		public boolean hasChild (String name) {
-			if (attributes == null) return false;
+			if (children == null) return false;
 			return getChildByName(name) != null;
 		}
 
@@ -605,7 +605,7 @@ public Element getChildByNameRecursive (String name) {
 		}
 
 		public boolean hasChildRecursive (String name) {
-			if (attributes == null) return false;
+			if (children == null) return false;
 			return getChildByNameRecursive(name) != null;
 		}
 

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePacker.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Set;
+import java.util.Arrays;
 
 import javax.imageio.IIOImage;
 import javax.imageio.ImageIO;
@@ -605,8 +606,8 @@ public void set (Settings settings) {
 			bleedIterations = settings.bleedIterations;
 			limitMemory = settings.limitMemory;
 			grid = settings.grid;
-			scale = settings.scale;
-			scaleSuffix = settings.scaleSuffix;
+			scale = Arrays.copyOf(settings.scale, settings.scale.length);
+			scaleSuffix = Arrays.copyOf(settings.scaleSuffix, settings.scaleSuffix.length);
 			atlasExtension = settings.atlasExtension;
 		}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -123,6 +123,7 @@ private Pixmap(int width, int height, ImageElement imageElement) {
 		this.imageElement = imageElement;
 		this.width = imageElement != null ? imageElement.getWidth() : width;
 		this.height = imageElement != null ? imageElement.getHeight() : height;
+		this.format = Format.RGBA8888;
 
 		buffer = BufferUtils.newIntBuffer(1);
 		id = nextId++;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -711,7 +711,7 @@ public boolean removeActor (Actor actor, boolean unfocus) {
 		if (actor == null) throw new IllegalArgumentException("actor cannot be null.");
 		if (actor != widget) return false;
 		this.widget = null;
-		return super.removeActor(this.widget, unfocus);
+		return super.removeActor(actor, unfocus);
 	}
 
 	public Actor hit (float x, float y, boolean touchable) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -320,7 +320,7 @@ public boolean isDragging () {
 	}
 
 	public float getPrefWidth () {
-		return Math.max(super.getPrefWidth(), titleLabel.getPrefWidth() + getPadLeft() + getPadRight());
+		return Math.max(super.getPrefWidth(), titleTable.getPrefWidth() + getPadLeft() + getPadRight());
 	}
 
 	public Table getTitleTable () {

File: gdx/src/com/badlogic/gdx/assets/loaders/TextureAtlasLoader.java
Patch:
@@ -45,7 +45,9 @@ public TextureAtlas load (AssetManager assetManager, String fileName, FileHandle
 			page.texture = texture;
 		}
 
-		return new TextureAtlas(data);
+	 	TextureAtlas atlas = new TextureAtlas(data);
+ 		data = null;
+ 		return atlas;
 	}
 
 	@Override

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -114,6 +114,7 @@ public AndroidGraphics (AndroidApplicationBase application, AndroidApplicationCo
 
 	public AndroidGraphics (AndroidApplicationBase application, AndroidApplicationConfiguration config,
 		ResolutionStrategy resolutionStrategy, boolean focusableView) {
+		AndroidGL20.init();
 		this.config = config;
 		this.app = application;
 		view = createGLSurfaceView(application, resolutionStrategy);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -230,7 +230,9 @@ public float getPrefWidth () {
 
 	public float getPrefHeight () {
 		if (prefSizeInvalid) scaleAndComputePrefSize();
-		float height = prefSize.y - style.font.getDescent() * fontScaleY * 2;
+		float descentScaleCorrection = 1;
+		if (fontScaleChanged) descentScaleCorrection = fontScaleY / style.font.getScaleY();
+		float height = prefSize.y - style.font.getDescent() * descentScaleCorrection * 2;
 		Drawable background = style.background;
 		if (background != null) height += background.getTopHeight() + background.getBottomHeight();
 		return height;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -316,7 +316,7 @@ public void addActorAfter (Actor actorAfter, Actor actor) {
 		childrenChanged();
 	}
 
-	/** Calls {@link #removeActor(Actor, boolean)} with true. */
+	/** Removes an actor from this group and unfocuses it. Calls {@link #removeActor(Actor, boolean)} with true. */
 	public boolean removeActor (Actor actor) {
 		return removeActor(actor, true);
 	}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALMusic.java
Patch:
@@ -28,6 +28,7 @@
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 import static org.lwjgl.openal.AL10.*;
+import static org.lwjgl.openal.SOFTDirectChannels.AL_DIRECT_CHANNELS_SOFT;
 
 /** @author Nathan Sweet */
 public abstract class OpenALMusic implements Music {
@@ -77,6 +78,8 @@ public void play () {
 				int errorCode = alGetError();
 				if (errorCode != AL_NO_ERROR) throw new GdxRuntimeException("Unable to allocate audio buffers. AL Error: " + errorCode);
 			}
+
+			alSourcei(sourceID, AL_DIRECT_CHANNELS_SOFT, AL_TRUE);
 			alSourcei(sourceID, AL_LOOPING, AL_FALSE);
 			setPan(pan, volume);
 

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java
Patch:
@@ -155,9 +155,9 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 			for (int row = row2 - 1; row >= row1; row--) {
 				// depending on the stagger index either shift for even or uneven indexes
 				if ((row % 2 == 0) == staggerIndexEven)
-					shiftX = 0;
-				else
 					shiftX = layerTileWidth50;
+				else
+					shiftX = 0;
 				for (int col = col1; col < col2; col++) {
 					renderCell(layer.getCell(col, row), layerTileWidth * col + shiftX, tileHeightUpperCorner * row, color);
 				}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -22,9 +22,9 @@
 public class DependencyBank {
 
 	//Versions
-	static String libgdxVersion = "1.9.5";
+	static String libgdxVersion = "1.9.6";
 	//Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly
-	static String libgdxNightlyVersion = "1.9.6-SNAPSHOT";
+	static String libgdxNightlyVersion = "1.9.7-SNAPSHOT";
 	static String roboVMVersion = "2.3.0";
 	static String moeVersion = "1.3.0-beta-2";
 	static String buildToolsVersion = "23.0.1";

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -72,7 +72,7 @@ public class MeshBuilder implements MeshPartBuilder {
 	/** The size (in number of floats) of each vertex */
 	private int stride;
 	/** The current vertex index, used for indexing */
-	private short vindex;
+	private int vindex;
 	/** The offset in the indices array when begin() was called, used to define a meshpart. */
 	private int istart;
 	/** The offset within an vertex to position */
@@ -536,7 +536,7 @@ private final void addVertex (final float[] values, final int offset) {
 
 	@Override
 	public short vertex (Vector3 pos, Vector3 nor, Color col, Vector2 uv) {
-		if (vindex >= Short.MAX_VALUE) throw new GdxRuntimeException("Too many vertices used");
+		if (vindex > Short.MAX_VALUE) throw new GdxRuntimeException("Too many vertices used");
 
 		vertex[posOffset] = pos.x;
 		if (posSize > 1) vertex[posOffset + 1] = pos.y;

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java
Patch:
@@ -219,6 +219,7 @@ private int loadShader (int type, String source) {
 // int infoLogLength = intbuf.get(0);
 // if (infoLogLength > 1) {
 			String infoLog = gl.glGetShaderInfoLog(shader);
+			log += type == GL20.GL_VERTEX_SHADER ? "Vertex shader\n" : "Fragment shader:\n";
 			log += infoLog;
 // }
 			return -1;

File: gdx/src/com/badlogic/gdx/graphics/profiling/GLProfiler.java
Patch:
@@ -85,6 +85,7 @@ public static void enable () {
 	/** Disables profiling by resetting the {@code GL20} and {@code GL30} instances with the original ones. */
 	public static void disable () {
 		if (Gdx.gl30 != null && Gdx.gl30 instanceof GL30Profiler) Gdx.gl30 = ((GL30Profiler)Gdx.gl30).gl30;
+		if (Gdx.gl20 != null && Gdx.gl20 instanceof GL30Profiler) Gdx.gl20 = ((GL30Profiler)Gdx.gl).gl30;
 		if (Gdx.gl20 != null && Gdx.gl20 instanceof GL20Profiler) Gdx.gl20 = ((GL20Profiler)Gdx.gl).gl20;
 		if (Gdx.gl != null && Gdx.gl instanceof GL20Profiler) Gdx.gl = ((GL20Profiler)Gdx.gl).gl20;
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -192,6 +192,7 @@ public class GdxTests {
 		ProjectTest.class,
 		ProjectiveTextureTest.class,
 		ReflectionTest.class,
+		ReflectionCorrectnessTest.class,
 		RotationTest.class,
 		RunnablePostTest.class,
 		StageDebugTest.class,

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/ktx/KTXProcessor.java
Patch:
@@ -337,9 +337,12 @@ public void create () {
 				}
 
 				out.close();
+				System.out.println("Finished");
 			} catch (Exception e) {
 				Gdx.app.error("KTXProcessor", "Error writing to file: " + output.getName(), e);
 			}
+
+			Gdx.app.exit();
 		}
 	}
 

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSApplication.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.badlogic.gdx.backends.iosmoe;
 
-import android.util.Log;
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.ApplicationLogger;

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -26,7 +26,7 @@ public class DependencyBank {
 	//Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly
 	static String libgdxNightlyVersion = "1.9.6-SNAPSHOT";
 	static String roboVMVersion = "2.3.0";
-	static String moeVersion = "1.2.3";
+	static String moeVersion = "1.3.0-beta-2";
 	static String buildToolsVersion = "23.0.1";
 	static String androidAPILevel = "20";
 	static String gwtVersion = "2.8.0";

File: tests/gdx-tests-ios-intel/src/main/java/com/badlogicgames/gdx/tests/IOSTests.java
Patch:
@@ -34,7 +34,7 @@ protected IOSApplication createApplication() {
 		IOSApplicationConfiguration config = new  IOSApplicationConfiguration();
 		config.useAccelerometer = false;
 		config.useGL30 = false;
-		return new IOSApplication(new SpriteBatchTest(), config);
+		return new IOSApplication(new BulletTestCollection(), config);
 	}
 
 	public static void main(String[] argv) {

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeType.java
Patch:
@@ -675,10 +675,8 @@ public Pixmap getPixmap (Format format, Color color, float gamma) {
 			Pixmap converted = pixmap;
 			if (format != pixmap.getFormat()) {
 				converted = new Pixmap(pixmap.getWidth(), pixmap.getHeight(), format);
-				Blending blending = Pixmap.getBlending();
-				Pixmap.setBlending(Blending.None);
+				converted.setBlending(Blending.None);
 				converted.drawPixmap(pixmap, 0, 0);
-				Pixmap.setBlending(blending);
 				pixmap.dispose();
 			}
 			return converted;

File: gdx/src/com/badlogic/gdx/graphics/GLTexture.java
Patch:
@@ -199,10 +199,8 @@ public static void uploadImageData (int target, TextureData data, int miplevel)
 		boolean disposePixmap = data.disposePixmap();
 		if (data.getFormat() != pixmap.getFormat()) {
 			Pixmap tmp = new Pixmap(pixmap.getWidth(), pixmap.getHeight(), data.getFormat());
-			Blending blend = Pixmap.getBlending();
-			Pixmap.setBlending(Blending.None);
+			tmp.setBlending(Blending.None);
 			tmp.drawPixmap(pixmap, 0, 0, 0, 0, pixmap.getWidth(), pixmap.getHeight());
-			Pixmap.setBlending(blend);
 			if (data.disposePixmap()) {
 				pixmap.dispose();
 			}

File: gdx/src/com/badlogic/gdx/graphics/glutils/FacedCubemapData.java
Patch:
@@ -164,10 +164,8 @@ public void consumeCubemapData () {
 				boolean disposePixmap = data[i].disposePixmap();
 				if (data[i].getFormat() != pixmap.getFormat()) {
 					Pixmap tmp = new Pixmap(pixmap.getWidth(), pixmap.getHeight(), data[i].getFormat());
-					Blending blend = Pixmap.getBlending();
-					Pixmap.setBlending(Blending.None);
+					tmp.setBlending(Blending.None);
 					tmp.drawPixmap(pixmap, 0, 0, 0, 0, pixmap.getWidth(), pixmap.getHeight());
-					Pixmap.setBlending(blend);
 					if (data[i].disposePixmap()) pixmap.dispose();
 					pixmap = tmp;
 					disposePixmap = true;

File: gdx/src/com/badlogic/gdx/graphics/glutils/FileTextureArrayData.java
Patch:
@@ -77,10 +77,8 @@ public void consumeTextureArrayData () {
 				boolean disposePixmap = texData.disposePixmap();
 				if (texData.getFormat() != pixmap.getFormat()) {
 					Pixmap temp = new Pixmap(pixmap.getWidth(), pixmap.getHeight(), texData.getFormat());
-					Pixmap.Blending blendmode = Pixmap.getBlending();
-					Pixmap.setBlending(Pixmap.Blending.None);
+					temp.setBlending(Pixmap.Blending.None);
 					temp.drawPixmap(pixmap, 0, 0, 0, 0, pixmap.getWidth(), pixmap.getHeight());
-					Pixmap.setBlending(blendmode);
 					if (texData.disposePixmap()) {
 						pixmap.dispose();
 					}

File: gdx/src/com/badlogic/gdx/graphics/glutils/MipMapGenerator.java
Patch:
@@ -84,10 +84,9 @@ private static void generateMipMapCPU (int target, Pixmap pixmap, int textureWid
 		int width = pixmap.getWidth() / 2;
 		int height = pixmap.getHeight() / 2;
 		int level = 1;
-		Blending blending = Pixmap.getBlending();
-		Pixmap.setBlending(Blending.None);
 		while (width > 0 && height > 0) {
 			Pixmap tmp = new Pixmap(width, height, pixmap.getFormat());
+			tmp.setBlending(Blending.None);
 			tmp.drawPixmap(pixmap, 0, 0, pixmap.getWidth(), pixmap.getHeight(), 0, 0, width, height);
 			if (level > 1) pixmap.dispose();
 			pixmap = tmp;
@@ -99,6 +98,5 @@ private static void generateMipMapCPU (int target, Pixmap pixmap, int textureWid
 			height = pixmap.getHeight() / 2;
 			level++;
 		}
-		Pixmap.setBlending(blending);
 	}
 }

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl3/MultiWindowTest.java
Patch:
@@ -61,8 +61,8 @@ public void render () {
 			if (Gdx.input.isKeyJustPressed(Input.Keys.SPACE) && latestWindow != null){
 				latestWindow.setTitle("Retitled window");
 				int size = 48;
-				Pixmap.setBlending(Blending.None);
 				Pixmap icon = new Pixmap(size, size, Pixmap.Format.RGBA8888);
+				icon.setBlending(Blending.None);
 				icon.setColor(Color.BLUE);
 				icon.fill();
 				icon.setColor(Color.CLEAR);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Gdx2DTest.java
Patch:
@@ -117,14 +117,14 @@ public void create () {
 
 		Gdx2DPixmap composite = new Gdx2DPixmap(512, 256, Gdx2DPixmap.GDX2D_FORMAT_RGBA8888);
 		composite.clear(0);
-		Gdx2DPixmap.setBlend(Gdx2DPixmap.GDX2D_BLEND_NONE);
+		composite.setBlend(Gdx2DPixmap.GDX2D_BLEND_NONE);
 		for (int i = 0; i < pixmaps.length; i++) {
-			Gdx2DPixmap.setScale(Gdx2DPixmap.GDX2D_SCALE_NEAREST);
+			composite.setScale(Gdx2DPixmap.GDX2D_SCALE_NEAREST);
 			composite.drawPixmap(pixmaps[i], 0, 0, 32, 32, i * 64, 0, 64, 64);
 			composite.drawPixmap(pixmaps[i], 0, 0, 32, 32, i * 64, 64, 16, 16);
 			composite.drawPixmap(pixmaps[i], 0, 0, 32, 32, i * 64, 0, 64, 64);
 			composite.drawPixmap(pixmaps[i], 0, 0, 32, 32, i * 64, 64, 16, 16);
-			Gdx2DPixmap.setScale(Gdx2DPixmap.GDX2D_SCALE_LINEAR);
+			composite.setScale(Gdx2DPixmap.GDX2D_SCALE_LINEAR);
 			composite.drawPixmap(pixmaps[i], 0, 0, 32, 32, i * 64, 100, 64, 64);
 			composite.drawPixmap(pixmaps[i], 0, 0, 32, 32, i * 64, 164, 16, 16);
 			composite.drawPixmap(pixmaps[i], 0, 0, 32, 32, i * 64, 100, 64, 64);

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java
Patch:
@@ -218,6 +218,7 @@ private final int[] getAttributeLocations (final VertexAttributes attrs) {
 		for (int i = 0; i < n; i++) {
 			tempArray.add(attributes.get(attrs.get(i).getKey(), -1));
 		}
+		tempArray.shrink();
 		return tempArray.items;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/CameraGroupStrategy.java
Patch:
@@ -187,6 +187,7 @@ private void createDefaultShader () {
 			+ "void main()\n" //
 			+ "{\n" //
 			+ "   v_color = " + ShaderProgram.COLOR_ATTRIBUTE + ";\n" //
+			+ "   v_color.a = v_color.a * (255.0/254.0);\n" //
 			+ "   v_texCoords = " + ShaderProgram.TEXCOORD_ATTRIBUTE + "0;\n" //
 			+ "   gl_Position =  u_projectionViewMatrix * " + ShaderProgram.POSITION_ATTRIBUTE + ";\n" //
 			+ "}\n";

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -939,7 +939,7 @@ public <T> T readValue (Class<T> type, Class elementType, JsonValue jsonData) {
 			Serializer serializer = classToSerializer.get(type);
 			if (serializer != null) return (T)serializer.read(this, jsonData, type);
 
-			if (Serializable.class.isAssignableFrom(type)) {
+			if (ClassReflection.isAssignableFrom(Serializable.class, type)) {
 				// A Serializable may be read as an array, string, etc, even though it will be written as an object.
 				Object object = newInstance(type);
 				((Serializable)object).read(this, jsonData);

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java
Patch:
@@ -155,9 +155,9 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 			for (int row = row2 - 1; row >= row1; row--) {
 				// depending on the stagger index either shift for even or uneven indexes
 				if ((row % 2 == 0) == staggerIndexEven)
-					shiftX = 0;
-				else
 					shiftX = layerTileWidth50;
+				else
+					shiftX = 0;
 				for (int col = col1; col < col2; col++) {
 					renderCell(layer.getCell(col, row), layerTileWidth * col + shiftX, tileHeightUpperCorner * row, color);
 				}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALMusic.java
Patch:
@@ -28,6 +28,7 @@
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 import static org.lwjgl.openal.AL10.*;
+import static org.lwjgl.openal.SOFTDirectChannels.AL_DIRECT_CHANNELS_SOFT;
 
 /** @author Nathan Sweet */
 public abstract class OpenALMusic implements Music {
@@ -77,6 +78,8 @@ public void play () {
 				int errorCode = alGetError();
 				if (errorCode != AL_NO_ERROR) throw new GdxRuntimeException("Unable to allocate audio buffers. AL Error: " + errorCode);
 			}
+
+			alSourcei(sourceID, AL_DIRECT_CHANNELS_SOFT, AL_TRUE);
 			alSourcei(sourceID, AL_LOOPING, AL_FALSE);
 			setPan(pan, volume);
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OpenALAudioDevice.java
Patch:
@@ -145,7 +145,7 @@ private int fillBuffer (byte[] data, int offset, int length) {
 			}
 			// Wait for buffer to be free.
 			try {
-				Thread.sleep((long)(1000 * secondsPerBuffer / bufferCount));
+				Thread.sleep((long)(1000 * secondsPerBuffer));
 			} catch (InterruptedException ignored) {
 			}
 		}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALAudioDevice.java
Patch:
@@ -145,7 +145,7 @@ private int fillBuffer (byte[] data, int offset, int length) {
 			}
 			// Wait for buffer to be free.
 			try {
-				Thread.sleep((long)(1000 * secondsPerBuffer / bufferCount));
+				Thread.sleep((long)(1000 * secondsPerBuffer));
 			} catch (InterruptedException ignored) {
 			}
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -224,8 +224,7 @@ public class GdxTests {
 		TableLayoutTest.class,
 		TableTest.class,
 		TextAreaTest.class,
-		TextAreaTest2.class,
-		TextAreaScrollTest.class,
+		TextAreaTest2.class,		
 		TextButtonTest.class,
 		TextInputDialogTest.class,
 		TextureAtlasTest.class,

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSInput.java
Patch:
@@ -610,7 +610,7 @@ void processEvents () {
 				switch (event.phase) {
 				case Began:
 					if (inputProcessor != null) inputProcessor.touchDown(event.x, event.y, event.pointer, Buttons.LEFT);
-					if (numTouched == 1) justTouched = true;
+					if (numTouched >= 1) justTouched = true;
 					break;
 				case Cancelled:
 				case Ended:

File: gdx/src/com/badlogic/gdx/math/collision/BoundingBox.java
Patch:
@@ -207,10 +207,10 @@ public BoundingBox clr () {
 		return this.set(min.set(0, 0, 0), max.set(0, 0, 0));
 	}
 
-	/** Returns whether this bounding box is valid. This means that {@link #max} is greater than {@link #min}.
+	/** Returns whether this bounding box is valid. This means that {@link #max} is greater than or equal to {@link #min}.
 	 * @return True in case the bounding box is valid, false otherwise */
 	public boolean isValid () {
-		return min.x < max.x && min.y < max.y && min.z < max.z;
+		return min.x <= max.x && min.y <= max.y && min.z <= max.z;
 	}
 
 	/** Extends this bounding box by the given bounding box.

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/RenderContext.java
Patch:
@@ -39,8 +39,7 @@ public RenderContext (TextureBinder textures) {
 		this.textureBinder = textures;
 	}
 
-	/** Sets up the render context, must be matched with a call to {@link #end()}. Assumes that the OpenGL states are in their
-	 * defaults. */
+	/** Sets up the render context, must be matched with a call to {@link #end()}. */
 	public void begin () {
 		Gdx.gl.glDisable(GL20.GL_DEPTH_TEST);
 		depthFunc = 0;

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/bmfont/BitmapFontWriter.java
Patch:
@@ -181,8 +181,8 @@ public static void writeFont (BitmapFontData fontData, String[] pageRefs, FileHa
 			.append(quote(info.italic ? 1 : 0)).append(" charset=\"").append(info.charset == null ? "" : info.charset)
 			.append("\" unicode=").append(quote(info.unicode ? 1 : 0)).append(" stretchH=").append(quote(info.stretchH))
 			.append(" smooth=").append(quote(info.smooth ? 1 : 0)).append(" aa=").append(quote(info.aa)).append(" padding=")
-			.append(xmlQuote).append(info.padding.up).append(",").append(info.padding.down).append(",").append(info.padding.left)
-			.append(",").append(info.padding.right).append(xmlQuote).append(" spacing=").append(xmlQuote)
+			.append(xmlQuote).append(info.padding.up).append(",").append(info.padding.right).append(",").append(info.padding.down)
+			.append(",").append(info.padding.left).append(xmlQuote).append(" spacing=").append(xmlQuote)
 			.append(info.spacing.horizontal).append(",").append(info.spacing.vertical).append(xmlQuote).append(xmlCloseSelf)
 			.append("\n");
 

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/BMFontUtil.java
Patch:
@@ -69,8 +69,8 @@ public void save (File outputBMFontFile) throws IOException {
 		int pageHeight = unicodeFont.getGlyphPageHeight();
 		out.println("info face=\"" + font.getFontName() + "\" size=" + font.getSize() + " bold=" + (font.isBold() ? 1 : 0)
 			+ " italic=" + (font.isItalic() ? 1 : 0) + " charset=\"\" unicode=0 stretchH=100 smooth=1 aa=1 padding="
-			+ unicodeFont.getPaddingTop() + "," + unicodeFont.getPaddingLeft() + "," + unicodeFont.getPaddingBottom() + ","
-			+ unicodeFont.getPaddingRight() + " spacing=" + unicodeFont.getPaddingAdvanceX() + ","
+			+ unicodeFont.getPaddingTop() + "," + unicodeFont.getPaddingRight() + "," + unicodeFont.getPaddingBottom() + ","
+			+ unicodeFont.getPaddingLeft() + " spacing=" + unicodeFont.getPaddingAdvanceX() + ","
 			+ unicodeFont.getPaddingAdvanceY());
 		out.println("common lineHeight=" + unicodeFont.getLineHeight() + " base=" + unicodeFont.getAscent() + " scaleW=" + pageWidth
 			+ " scaleH=" + pageHeight + " pages=" + unicodeFont.getGlyphPages().size() + " packed=0");

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/unicodefont/Glyph.java
Patch:
@@ -80,8 +80,8 @@ public class Glyph {
 			char[] chars = Character.toChars(codePoint);
 			GlyphVector charVector = unicodeFont.getFont().layoutGlyphVector(GlyphPage.renderContext, chars, 0, chars.length,
 				Font.LAYOUT_LEFT_TO_RIGHT);
-			GlyphMetrics charMetrics = vector.getGlyphMetrics(0);
-			xOffset = vector.getGlyphPixelBounds(0, GlyphPage.renderContext, 0, 0).x - unicodeFont.getPaddingLeft();
+			GlyphMetrics charMetrics = charVector.getGlyphMetrics(0);
+			xOffset = charVector.getGlyphPixelBounds(0, GlyphPage.renderContext, 0, 0).x - unicodeFont.getPaddingLeft();
 			xAdvance = (int)(metrics.getAdvanceX() + unicodeFont.getPaddingAdvanceX() + unicodeFont.getPaddingLeft()
 				+ unicodeFont.getPaddingRight());
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -491,9 +491,9 @@ public void load (FileHandle fontFile, boolean flip) {
 				String[] padding = line.substring(0, line.indexOf(' ')).split(",", 4);
 				if (padding.length != 4) throw new GdxRuntimeException("Invalid padding.");
 				padTop = Integer.parseInt(padding[0]);
-				padLeft = Integer.parseInt(padding[1]);
+				padRight = Integer.parseInt(padding[1]);
 				padBottom = Integer.parseInt(padding[2]);
-				padRight = Integer.parseInt(padding[3]);
+				padLeft = Integer.parseInt(padding[3]);
 				float padY = padTop + padBottom;
 
 				line = reader.readLine();

File: gdx/src/com/badlogic/gdx/graphics/g2d/PolygonSpriteBatch.java
Patch:
@@ -123,7 +123,7 @@ public PolygonSpriteBatch (int size, ShaderProgram defaultShader) {
 	public PolygonSpriteBatch (int maxVertices, int maxTriangles, ShaderProgram defaultShader) {
 		// 32767 is max vertex index.
 		if (maxVertices > 32767)
-			throw new IllegalArgumentException("Can't have more than 32767 vertices per batch: " + maxTriangles);
+			throw new IllegalArgumentException("Can't have more than 32767 vertices per batch: " + maxVertices);
 
 		Mesh.VertexDataType vertexDataType = Mesh.VertexDataType.VertexArray;
 		if (Gdx.gl30 != null) {

File: gdx/src/com/badlogic/gdx/utils/Pool.java
Patch:
@@ -71,7 +71,7 @@ protected void reset (T object) {
 	/** Puts the specified objects in the pool. Null objects within the array are silently ignored.
 	 * @see #free(Object) */
 	public void freeAll (Array<T> objects) {
-		if (objects == null) throw new IllegalArgumentException("object cannot be null.");
+		if (objects == null) throw new IllegalArgumentException("objects cannot be null.");
 		Array<T> freeObjects = this.freeObjects;
 		int max = this.max;
 		for (int i = 0; i < objects.size; i++) {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OpenALAudioDevice.java
Patch:
@@ -145,7 +145,7 @@ private int fillBuffer (byte[] data, int offset, int length) {
 			}
 			// Wait for buffer to be free.
 			try {
-				Thread.sleep((long)(1000 * secondsPerBuffer / bufferCount));
+				Thread.sleep((long)(1000 * secondsPerBuffer));
 			} catch (InterruptedException ignored) {
 			}
 		}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALAudioDevice.java
Patch:
@@ -145,7 +145,7 @@ private int fillBuffer (byte[] data, int offset, int length) {
 			}
 			// Wait for buffer to be free.
 			try {
-				Thread.sleep((long)(1000 * secondsPerBuffer / bufferCount));
+				Thread.sleep((long)(1000 * secondsPerBuffer));
 			} catch (InterruptedException ignored) {
 			}
 		}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -319,7 +319,7 @@ private void createDisplayPixelFormat (boolean useGL30, int gles30ContextMajor,
 						createDisplayPixelFormat(useGL30, gles30ContextMajor, gles30ContextMinor);
 						return;
 					}
-					throw new GdxRuntimeException("OpenGL is not supported by the video driver: " + glVersion.getDebugVersionString(), ex3);
+					throw new GdxRuntimeException("OpenGL is not supported by this video driver.", ex3);
 				}
 				if (getDisplayMode().bitsPerPixel == 16) {
 					bufferFormat = new BufferFormat(5, 6, 5, 0, 8, 0, 0, false);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -34,8 +34,8 @@
  * <p>
  * {@link ChangeEvent} is fired when the slider knob is moved. Canceling the event will move the knob to where it was previously.
  * <p>
- * The preferred height of a slider is determined by the larger of the knob and background. The preferred width of a slider is
- * 140, a relatively arbitrary size.
+ * For a horizontal progress bar, its preferred height is determined by the larger of the knob and background, and the preferred width
+ * is 140, a relatively arbitrary size. These parameters are reversed for a vertical progress bar.
  * @author mzechner
  * @author Nathan Sweet */
 public class Slider extends ProgressBar {
@@ -53,7 +53,7 @@ public Slider (float min, float max, float stepSize, boolean vertical, Skin skin
 		this(min, max, stepSize, vertical, skin.get(styleName, SliderStyle.class));
 	}
 
-	/** Creates a new slider. It's width is determined by the given prefWidth parameter, its height is determined by the maximum of
+	/** Creates a new slider. If horizontal, its width is determined by the prefWidth parameter, its height is determined by the maximum of
 	 * the height of either the slider {@link NinePatch} or slider handle {@link TextureRegion}. The min and max values determine
 	 * the range the values of this slider can take on, the stepSize parameter specifies the distance between individual values.
 	 * E.g. min could be 4, max could be 10 and stepSize could be 0.2, giving you a total of 30 values, 4.0 4.2, 4.4 and so on.

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -255,7 +255,7 @@ protected void calculateOffsets () {
 		}
 
 		// calculate last visible char based on visible width and render offset
-		int length = displayText.length();
+		int length = Math.min(displayText.length(), glyphPositions.length - 1);
 		visibleTextEnd = Math.min(length, cursor + 1);
 		for (; visibleTextEnd <= length; visibleTextEnd++)
 			if (glyphPositions[visibleTextEnd] > startX + visibleWidth) break;

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeType.java
Patch:
@@ -622,7 +622,7 @@ public ByteBuffer getBuffer() {
 
 		private static native ByteBuffer getBuffer(long bitmap); /*
 			FT_Bitmap* bmp = (FT_Bitmap*)bitmap;
-			return env->NewDirectByteBuffer((void*)bmp->buffer, bmp->rows * abs(bmp->pitch) * bmp->width);
+			return env->NewDirectByteBuffer((void*)bmp->buffer, bmp->rows * abs(bmp->pitch));
 		*/
 
 		// @on

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextArea.java
Patch:
@@ -86,7 +86,7 @@ protected int letterUnderCursor (float x) {
 				x += glyphPositions[start];
 				int end = linesBreak.items[cursorLine * 2 + 1];
 				int i = start;
-				for (; i <= end; i++)
+				for (; i < end; i++)
 					if (glyphPositions[i] > x) break;
 				if (glyphPositions[i] - x <= x - glyphPositions[i - 1]) return i;
 				return Math.max(0, i - 1);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -224,6 +224,7 @@ public class GdxTests {
 		TableLayoutTest.class,
 		TableTest.class,
 		TextAreaTest.class,
+		TextAreaTest2.class,
 		TextButtonTest.class,
 		TextInputDialogTest.class,
 		TextureAtlasTest.class,

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/BatchTiledMapRenderer.java
Patch:
@@ -138,7 +138,7 @@ public void render () {
 			if (layer.isVisible()) {
 				if (layer instanceof TiledMapTileLayer) {
 					renderTileLayer((TiledMapTileLayer)layer);
-				} if (layer instanceof TiledMapImageLayer) {
+				} else if (layer instanceof TiledMapImageLayer) {
 					renderImageLayer((TiledMapImageLayer)layer);
 				} else {
 					renderObjects(layer);

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSApplicationConfiguration.java
Patch:
@@ -97,4 +97,7 @@ public class IOSApplicationConfiguration {
 	 *  When GL ES 3 is enabled, {@link com.badlogic.gdx.Gdx#gl30} can be used to access it's functionality.
 	 * @deprecated this option is currently experimental and not yet fully supported, expect issues. */
 	@Deprecated public boolean useGL30 = false;
+
+	/** whether the status bar should be visible or not **/
+	public boolean statusBarVisible = false;
 }

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3WindowListener.java
Patch:
@@ -78,8 +78,7 @@ public interface Lwjgl3WindowListener {
 
 	/**
 	 * Called when the window content is damaged and needs to be refreshed.
-	 * If non-continuous rendering is used, applications should call
-	 * {@link Lwjgl3Graphics#requestRendering()} to force a render update.
+	 * When this occurs, {@link Lwjgl3Graphics#requestRendering()} is automatically called.
 	 */
 	void refreshRequested();
 

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGraphics.java
Patch:
@@ -126,7 +126,7 @@ private boolean createWindow (int width, int height, boolean fullscreen) {
 		boolean mouseCaptured = window != 0 && glfwGetInputMode(window, GLFW_CURSOR_MODE) == GLFW_CURSOR_CAPTURED;
 
 		long oldWindow = window;
-		long newWindow = glfwCreateWindow(width, height, title, fullscreen ? fullscreenMonitor : 0, oldWindow);
+		long newWindow = glfwCreateWindow(width + (fullscreen ? 0 : -1), height, title, fullscreen ? fullscreenMonitor : 0, oldWindow);
 		if (newWindow == 0) return false;
 		if (oldWindow != 0) glfwDestroyWindow(oldWindow);
 		window = newWindow;

File: gdx/src/com/badlogic/gdx/graphics/g3d/attributes/CubemapAttribute.java
Patch:
@@ -22,7 +22,7 @@
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 public class CubemapAttribute extends Attribute {
-	public final static String EnvironmentMapAlias = "environmentMapTexture";
+	public final static String EnvironmentMapAlias = "environmentCubemap";
 	public final static long EnvironmentMap = register(EnvironmentMapAlias);
 
 	protected static long Mask = EnvironmentMap;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -34,6 +34,7 @@
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.DelayedRemovalArray;
 import com.badlogic.gdx.utils.Pools;
+import com.badlogic.gdx.utils.reflect.ClassReflection;
 
 /** 2D scene graph node. An actor has a position, rectangular size, origin, scale, rotation, Z index, and color. The position
  * corresponds to the unrotated, unscaled bottom left corner of the actor. The position is relative to the actor's parent. The
@@ -330,7 +331,7 @@ public <T extends Actor> T firstAscendant (Class<T> type) {
 		if (type == null) throw new IllegalArgumentException("actor cannot be null.");
 		Actor actor = this;
 		do {
-			if (type.isInstance(actor)) return (T)actor;
+			if (ClassReflection.isInstance(type, actor)) return (T)actor;
 			actor = actor.getParent();
 		} while (actor != null);
 		return null;

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionJNI.java
Patch:
@@ -958,8 +958,8 @@ public class CollisionJNI {
   public final static native int btShapeHull_numTriangles(long jarg1, btShapeHull jarg1_);
   public final static native int btShapeHull_numVertices(long jarg1, btShapeHull jarg1_);
   public final static native int btShapeHull_numIndices(long jarg1, btShapeHull jarg1_);
-  public final static native long btShapeHull_getVertexPointer(long jarg1, btShapeHull jarg1_);
-  public final static native java.nio.LongBuffer btShapeHull_getIndexPointer(long jarg1, btShapeHull jarg1_);
+  public final static native Vector3 btShapeHull_getVertex(long jarg1, btShapeHull jarg1_, int jarg2);
+  public final static native int btShapeHull_getIndex(long jarg1, btShapeHull jarg1_, int jarg2);
   public final static native long new_btConvexHullShape__SWIG_0(java.nio.FloatBuffer jarg1, int jarg2, int jarg3);
   public final static native long new_btConvexHullShape__SWIG_1(java.nio.FloatBuffer jarg1, int jarg2);
   public final static native long new_btConvexHullShape__SWIG_2(java.nio.FloatBuffer jarg1);

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl3/Lwjgl3TestStarter.java
Patch:
@@ -89,7 +89,9 @@ public void clicked (InputEvent event, float x, float y) {
 						prefs.flush();
 						if (testButton != lastClickedTestButton) {
 							testButton.setColor(Color.CYAN);
-							lastClickedTestButton.setColor(Color.WHITE);
+							if (lastClickedTestButton != null) {
+								lastClickedTestButton.setColor(Color.WHITE);
+							}
 							lastClickedTestButton = testButton;
 						}
 					}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -397,7 +397,7 @@ static long createGlfwWindow(Lwjgl3ApplicationConfiguration config, long sharedC
 		if (windowHandle == 0) {
 			throw new GdxRuntimeException("Couldn't create window");
 		}
-		Lwjgl3Window.setSizeLimits(windowHandle, config.windowMinWidth, config.windowMinHeight, config.windowMaxWidth, config.windowMaxWidth);
+		Lwjgl3Window.setSizeLimits(windowHandle, config.windowMinWidth, config.windowMinHeight, config.windowMaxWidth, config.windowMaxHeight);
 		if (config.fullscreenMode == null) {
 			if (config.windowX == -1 && config.windowY == -1) {
 				int windowWidth = Math.max(config.windowWidth, config.windowMinWidth);

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSMusic.java
Patch:
@@ -21,6 +21,7 @@
 import com.badlogic.gdx.backends.iosmoe.objectal.OALAudioTrack;
 import apple.avfoundation.AVAudioPlayer;
 import apple.avfoundation.protocol.AVAudioPlayerDelegate;
+import org.moe.natj.objc.ObjCRuntime;
 
 public class IOSMusic implements Music {
 
@@ -100,7 +101,7 @@ public float getPosition () {
 	@Override
 	public void dispose () {
 		track.clear();
-		track.dealloc();
+		ObjCRuntime.disposeObject(this);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -90,11 +90,11 @@ public SpriteBatch (int size) {
 	 * <p>
 	 * The defaultShader specifies the shader to use. Note that the names for uniforms for this default shader are different than
 	 * the ones expect for shaders set with {@link #setShader(ShaderProgram)}. See {@link #createDefaultShader()}.
-	 * @param size The max number of sprites in a single batch. Max of 5460.
+	 * @param size The max number of sprites in a single batch. Max of 8191.
 	 * @param defaultShader The default shader to use. This is not owned by the SpriteBatch and must be disposed separately. */
 	public SpriteBatch (int size, ShaderProgram defaultShader) {
-		// 32767 is max index, so 32767 / 6 - (32767 / 6 % 3) = 5460.
-		if (size > 5460) throw new IllegalArgumentException("Can't have more than 5460 sprites per batch: " + size);
+		// 32767 is max vertex index, so 32767 / 4 vertices per sprite = 8191 sprites max.
+		if (size > 8191) throw new IllegalArgumentException("Can't have more than 8191 sprites per batch: " + size);
 
 		VertexDataType vertexDataType = (Gdx.gl30 != null) ? VertexDataType.VertexBufferObjectWithVAO : defaultVertexDataType;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FramebufferToTextureTest.java
Patch:
@@ -67,7 +67,7 @@ public void create () {
 	@Override
 	public void render () {
 		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
-		Gdx.gl.glClearColor(clearColor.g, clearColor.g, clearColor.b, clearColor.a);
+		Gdx.gl.glClearColor(clearColor.r, clearColor.g, clearColor.b, clearColor.a);
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 		Gdx.gl.glEnable(GL20.GL_DEPTH_TEST);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java
Patch:
@@ -39,8 +39,8 @@ public class BulletTestCollection extends GdxTest implements InputProcessor, Ges
 		new ConstraintsTest(), new MeshShapeTest(), new GimpactTest(), new ConvexHullTest(), new ConvexHullDistanceTest(),
 		new RayCastTest(), new RayPickRagdollTest(), new InternalTickTest(), new CollisionWorldTest(), new CollisionTest(),
 		new FrustumCullingTest(), new CollisionDispatcherTest(), new ContactCallbackTest(), new ContactCallbackTest2(),
-		new ContactCacheTest(), new SoftBodyTest(), new SoftMeshTest(), new VehicleTest(), new CharacterTest(), new ImportTest(),
-		new TriangleRaycastTest(), new OcclusionCullingTest(), new PairCacheTest()};
+		new ContactCacheTest(), new SoftBodyTest(), new SoftMeshTest(), new VehicleTest(), new VehicleFilterTest(),
+		new CharacterTest(), new ImportTest(), new TriangleRaycastTest(), new OcclusionCullingTest(), new PairCacheTest()};
 
 	protected int testIndex = 0;
 

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -26,7 +26,7 @@ public class DependencyBank {
 	//Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly
 	static String libgdxNightlyVersion = "1.9.5-SNAPSHOT";
 	static String roboVMVersion = "2.2.0";
-	static String moeVersion = "1.1.2";
+	static String moeVersion = "1.2.0";
 	static String buildToolsVersion = "23.0.1";
 	static String androidAPILevel = "20";
 	static String gwtVersion = "2.6.0";

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -278,6 +278,7 @@ public void build (ProjectBuilder builder, String outputDir, String appName, Str
 			project.files.add(new ProjectFile("android/res/drawable-mdpi/ic_launcher.png", false));
 			project.files.add(new ProjectFile("android/res/drawable-xhdpi/ic_launcher.png", false));
 			project.files.add(new ProjectFile("android/res/drawable-xxhdpi/ic_launcher.png", false));
+			project.files.add(new ProjectFile("android/res/drawable-xxxhdpi/ic_launcher.png", false));
 			project.files.add(new ProjectFile("android/src/AndroidLauncher", "android/src/" + packageDir + "/AndroidLauncher.java", true));
 			project.files.add(new ProjectFile("android/AndroidManifest.xml"));
 			project.files.add(new ProjectFile("android/build.gradle", true));

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Graphics.java
Patch:
@@ -340,7 +340,7 @@ public boolean setWindowedMode(int width, int height) {
 			Lwjgl3DisplayMode currentMode = (Lwjgl3DisplayMode) getDisplayMode();
 			int windowPosX = (currentMode.width - width) / 2;
 			int windowPosY = (currentMode.height - height) / 2;
-			GLFW.glfwSetWindowMonitor(window.getWindowHandle(), currentMode.getMonitor(),
+			GLFW.glfwSetWindowMonitor(window.getWindowHandle(), 0,
 					windowPosX, windowPosY, width, height, currentMode.refreshRate);
 		}
 		updateFramebufferInfo();

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Graphics.java
Patch:
@@ -340,7 +340,7 @@ public boolean setWindowedMode(int width, int height) {
 			Lwjgl3DisplayMode currentMode = (Lwjgl3DisplayMode) getDisplayMode();
 			int windowPosX = (currentMode.width - width) / 2;
 			int windowPosY = (currentMode.height - height) / 2;
-			GLFW.glfwSetWindowMonitor(window.getWindowHandle(), 0,
+			GLFW.glfwSetWindowMonitor(window.getWindowHandle(), currentMode.getMonitor(),
 					windowPosX, windowPosY, width, height, currentMode.refreshRate);
 		}
 		updateFramebufferInfo();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/DragAndDrop.java
Patch:
@@ -40,7 +40,7 @@ public class DragAndDrop {
 	ObjectMap<Source, DragListener> sourceListeners = new ObjectMap();
 	private float tapSquareSize = 8;
 	private int button;
-	float dragActorX = 14, dragActorY = -20;
+	float dragActorX = 0, dragActorY = 0;
 	float touchOffsetX, touchOffsetY;
 	long dragStartTime;
 	int dragTime = 250;
@@ -112,8 +112,8 @@ public void drag (InputEvent event, float x, float y, int pointer) {
 					dragActor = actor;
 					stage.addActor(actor);
 				}
-				float actorX = event.getStageX() + dragActorX;
-				float actorY = event.getStageY() + dragActorY - actor.getHeight();
+				float actorX = event.getStageX() - actor.getWidth() + dragActorX;
+				float actorY = event.getStageY() + dragActorY;
 				if (keepWithinStage) {
 					if (actorX < 0) actorX = 0;
 					if (actorY < 0) actorY = 0;

File: tests/gdx-tests-ios-intel/src/main/java/com/badlogicgames/gdx/tests/IOSTests.java
Patch:
@@ -38,8 +38,6 @@ protected IOSApplication createApplication() {
 	}
 
 	public static void main(String[] argv) {
-		//NSAutoreleasePool pool = NSAutoreleasePool.alloc();
 		UIKit.UIApplicationMain(0, null, null, IOSTests.class.getName());
-		//pool.dealloc();
 	}
 }
\ No newline at end of file

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java
Patch:
@@ -87,7 +87,7 @@ public Label getLabel () {
 		return label;
 	}
 
-	public Cell getLabelCell () {
+	public Cell<Label> getLabelCell () {
 		return getCell(label);
 	}
 

File: gdx/src/com/badlogic/gdx/utils/Queue.java
Patch:
@@ -238,7 +238,9 @@ public T removeIndex (int index) {
 			value = (T)values[index];
 			System.arraycopy(values, head, values, head + 1, index - head);
 			values[head] = null;
-			this.head++;
+			if (++this.head == values.length) {
+				this.head = 0;
+			}
 		}
 		size--;
 		return value;

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -26,7 +26,7 @@ public class DependencyBank {
 	//Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly
 	static String libgdxNightlyVersion = "1.9.5-SNAPSHOT";
 	static String roboVMVersion = "2.2.0";
-	static String moeVersion = "1.1.0";
+	static String moeVersion = "1.1.2";
 	static String buildToolsVersion = "23.0.1";
 	static String androidAPILevel = "20";
 	static String gwtVersion = "2.6.0";

File: gdx/src/com/badlogic/gdx/math/MathUtils.java
Patch:
@@ -296,7 +296,7 @@ static public int floorPositive (float value) {
 	/** Returns the smallest integer greater than or equal to the specified float. This method will only properly ceil floats from
 	 * -(2^14) to (Float.MAX_VALUE - 2^14). */
 	static public int ceil (float value) {
-		return (int)(value + BIG_ENOUGH_CEIL) - BIG_ENOUGH_INT;
+		return BIG_ENOUGH_INT - (int)(BIG_ENOUGH_FLOOR - value);
 	}
 
 	/** Returns the smallest integer greater than or equal to the specified float. This method will only properly ceil floats that

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSApplication.java
Patch:
@@ -32,8 +32,8 @@
 import com.badlogic.gdx.backends.iosmoe.objectal.OALSimpleAudio;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Clipboard;
-import com.intel.moe.natj.general.Pointer;
-import com.intel.moe.natj.objc.ann.Selector;
+import org.moe.natj.general.Pointer;
+import org.moe.natj.objc.ann.Selector;
 import ios.NSObject;
 import ios.coregraphics.struct.CGPoint;
 import ios.coregraphics.struct.CGRect;

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSInput.java
Patch:
@@ -23,7 +23,7 @@
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.Pool;
-import com.intel.moe.natj.general.ann.NInt;
+import org.moe.natj.general.ann.NInt;
 import ios.audiotoolbox.c.AudioToolbox;
 import ios.coregraphics.struct.CGPoint;
 import ios.coregraphics.struct.CGRect;

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSUIViewController.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.badlogic.gdx.backends.iosmoe;
 
-import com.intel.moe.natj.general.NatJ;
-import com.intel.moe.natj.general.Pointer;
-import com.intel.moe.natj.objc.ann.Selector;
+import org.moe.natj.general.NatJ;
+import org.moe.natj.general.Pointer;
+import org.moe.natj.objc.ann.Selector;
 import ios.coregraphics.struct.CGRect;
 import ios.glkit.GLKViewController;
 import ios.uikit.enums.UIInterfaceOrientation;

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -22,10 +22,10 @@
 public class DependencyBank {
 
 	//Versions
-	static String libgdxVersion = "1.9.3";
+	static String libgdxVersion = "1.9.4";
 	//Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly
-	static String libgdxNightlyVersion = "1.9.4-SNAPSHOT";
-	static String roboVMVersion = "2.1.0";
+	static String libgdxNightlyVersion = "1.9.5-SNAPSHOT";
+	static String roboVMVersion = "2.2.0";
 	static String moeVersion = "1.1.0.final-1";
 	static String buildToolsVersion = "23.0.1";
 	static String androidAPILevel = "20";

File: gdx/src/com/badlogic/gdx/graphics/g3d/ModelInstance.java
Patch:
@@ -406,7 +406,7 @@ public BoundingBox extendBoundingBox (final BoundingBox out) {
 	/** @param id The ID of the animation to fetch (case sensitive).
 	 * @return The {@link Animation} with the specified id, or null if not available. */
 	public Animation getAnimation (final String id) {
-		return getAnimation(id, true);
+		return getAnimation(id, false);
 	}
 
 	/** @param id The ID of the animation to fetch.

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/BatchTiledMapRenderer.java
Patch:
@@ -120,7 +120,9 @@ public void setView (OrthographicCamera camera) {
 		batch.setProjectionMatrix(camera.combined);
 		float width = camera.viewportWidth * camera.zoom;
 		float height = camera.viewportHeight * camera.zoom;
-		viewBounds.set(camera.position.x - width / 2, camera.position.y - height / 2, width, height);
+		float w = width * Math.abs(camera.up.y) + height * Math.abs(camera.up.x);
+		float h = height * Math.abs(camera.up.y) + width * Math.abs(camera.up.x);
+		viewBounds.set(camera.position.x - w / 2, camera.position.y - h / 2, w, h);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/graphics/g3d/Attributes.java
Patch:
@@ -91,6 +91,7 @@ public final void set (final Attribute attribute) {
 		} else {
 			attributes.set(idx, attribute);
 		}
+		sort(); //FIXME: See #4186
 	}
 
 	/** Add multiple attributes to this material. If the material already contains an attribute of the same type it is overwritten. */
@@ -140,6 +141,7 @@ public final void remove (final long mask) {
 				sorted = false;
 			}
 		}
+		sort(); //FIXME: See #4186
 	}
 
 	/** @return True if this collection has the specified attribute, i.e. attributes.has(ColorAttribute.Diffuse); Or when multiple
@@ -224,7 +226,7 @@ public int compareTo (Attributes other) {
 		for (int i = 0; i < attributes.size; i++) {
 			final int c = attributes.get(i).compareTo(other.attributes.get(i));
 			if (c != 0)
-				return c;
+				return c < 0 ? -1 : (c > 0 ? 1 : 0);
 		}
 		return 0;
 	}

File: gdx/src/com/badlogic/gdx/utils/OrderedMap.java
Patch:
@@ -46,9 +46,9 @@ public OrderedMap (int initialCapacity, float loadFactor) {
 		keys = new Array(capacity);
 	}
 
-	public OrderedMap (ObjectMap<? extends K, ? extends V> map) {
+	public OrderedMap (OrderedMap<? extends K, ? extends V> map) {
 		super(map);
-		keys = new Array(capacity);
+		keys = new Array(map.keys);
 	}
 
 	public V put (K key, V value) {
@@ -178,6 +178,7 @@ public Entry next () {
 		public void remove () {
 			if (currentIndex < 0) throw new IllegalStateException("next must be called before remove.");
 			map.remove(entry.key);
+			nextIndex--;
 		}
 	}
 

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java
Patch:
@@ -273,13 +273,13 @@ public void paint (Graphics g, JComponent jc) {
 			splitPane.add(leftSplit, JSplitPane.LEFT);
 			{
 				JPanel spacer = new JPanel(new BorderLayout());
-				leftSplit.add(spacer, JSplitPane.TOP);
+				leftSplit.add(spacer, JSplitPane.BOTTOM);
 				spacer.add(lwjglCanvas.getCanvas());
 				spacer.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 4));
 			}
 			{
 				JPanel emittersPanel = new JPanel(new BorderLayout());
-				leftSplit.add(emittersPanel, JSplitPane.BOTTOM);
+				leftSplit.add(emittersPanel, JSplitPane.TOP);
 				emittersPanel.setBorder(new CompoundBorder(BorderFactory.createEmptyBorder(0, 6, 6, 0), BorderFactory
 					.createTitledBorder("Effect Emitters")));
 				{

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/CheckBox.java
Patch:
@@ -106,13 +106,12 @@ public CheckBoxStyle (Drawable checkboxOff, Drawable checkboxOn, BitmapFont font
 		}
 
 		public CheckBoxStyle (CheckBoxStyle style) {
+			super(style);
 			this.checkboxOff = style.checkboxOff;
 			this.checkboxOn = style.checkboxOn;
 			this.checkboxOver = style.checkboxOver;
 			this.checkboxOffDisabled = style.checkboxOffDisabled;
 			this.checkboxOnDisabled = style.checkboxOnDisabled;
-			this.font = style.font;
-			this.fontColor = new Color(style.fontColor);
 		}
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -342,9 +342,10 @@ public void reset () {
 	 * for all cells in the new row. */
 	public Cell row () {
 		if (cells.size > 0) {
-			endRow();
+			if (!implicitEndRow) endRow();
 			invalidate();
 		}
+		implicitEndRow = false;
 		if (rowDefaults != null) cellPool.free(rowDefaults);
 		rowDefaults = obtainCell();
 		rowDefaults.clear();

File: gdx/src/com/badlogic/gdx/utils/XmlReader.java
Patch:
@@ -470,9 +470,9 @@ public ObjectMap<String, String> getAttributes () {
 
 		/** @throws GdxRuntimeException if the attribute was not found. */
 		public String getAttribute (String name) {
-			if (attributes == null) throw new GdxRuntimeException("Element " + name + " doesn't have attribute: " + name);
+			if (attributes == null) throw new GdxRuntimeException("Element " + this.name + " doesn't have attribute: " + name);
 			String value = attributes.get(name);
-			if (value == null) throw new GdxRuntimeException("Element " + name + " doesn't have attribute: " + name);
+			if (value == null) throw new GdxRuntimeException("Element " + this.name + " doesn't have attribute: " + name);
 			return value;
 		}
 

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/BMFontUtil.java
Patch:
@@ -196,7 +196,7 @@ private Glyph getGlyph (char c) {
 	}
 
 	void writeGlyph (PrintStream out, int pageWidth, int pageHeight, int pageIndex, Glyph glyph) {
-		out.println("char id=" + String.format("%-6s", glyph.getCodePoint()) //
+		out.println("char id=" + String.format("%-7s ", glyph.getCodePoint()) //
 			+ "x=" + String.format("%-5s", (int)(glyph.getU() * pageWidth)) //
 			+ "y=" + String.format("%-5s", (int)(glyph.getV() * pageHeight)) //
 			+ "width=" + String.format("%-5s", glyph.getWidth()) //

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OpenALMusic.java
Patch:
@@ -74,7 +74,8 @@ public void play () {
 			if (buffers == null) {
 				buffers = BufferUtils.createIntBuffer(bufferCount);
 				alGenBuffers(buffers);
-				if (alGetError() != AL_NO_ERROR) throw new GdxRuntimeException("Unable to allocate audio buffers.");
+				int errorCode = alGetError();
+				if (errorCode != AL_NO_ERROR) throw new GdxRuntimeException("Unable to allocate audio buffers. AL Error: " + errorCode);
 			}
 			alSourcei(sourceID, AL_LOOPING, AL_FALSE);
 			setPan(pan, volume);

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALMusic.java
Patch:
@@ -74,7 +74,8 @@ public void play () {
 			if (buffers == null) {
 				buffers = BufferUtils.createIntBuffer(bufferCount);
 				alGenBuffers(buffers);
-				if (alGetError() != AL_NO_ERROR) throw new GdxRuntimeException("Unable to allocate audio buffers.");
+				int errorCode = alGetError();
+				if (errorCode != AL_NO_ERROR) throw new GdxRuntimeException("Unable to allocate audio buffers. AL Error: " + errorCode);
 			}
 			alSourcei(sourceID, AL_LOOPING, AL_FALSE);
 			setPan(pan, volume);

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/BMFontUtil.java
Patch:
@@ -196,7 +196,7 @@ private Glyph getGlyph (char c) {
 	}
 
 	void writeGlyph (PrintStream out, int pageWidth, int pageHeight, int pageIndex, Glyph glyph) {
-		out.println("char id=" + String.format("%-6s", glyph.getCodePoint()) //
+		out.println("char id=" + String.format("%-7s ", glyph.getCodePoint()) //
 			+ "x=" + String.format("%-5s", (int)(glyph.getU() * pageWidth)) //
 			+ "y=" + String.format("%-5s", (int)(glyph.getV() * pageHeight)) //
 			+ "width=" + String.format("%-5s", glyph.getWidth()) //

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -197,6 +197,7 @@ void setupDisplay () throws LWJGLException {
 					if (pixmap.getFormat() != Format.RGBA8888) {
 						Pixmap rgba = new Pixmap(pixmap.getWidth(), pixmap.getHeight(), Format.RGBA8888);
 						rgba.drawPixmap(pixmap, 0, 0);
+						pixmap.dispose();
 						pixmap = rgba;
 					}
 					icons[i] = ByteBuffer.allocateDirect(pixmap.getPixels().limit());

File: gdx/src/com/badlogic/gdx/utils/XmlReader.java
Patch:
@@ -470,9 +470,9 @@ public ObjectMap<String, String> getAttributes () {
 
 		/** @throws GdxRuntimeException if the attribute was not found. */
 		public String getAttribute (String name) {
-			if (attributes == null) throw new GdxRuntimeException("Element " + name + " doesn't have attribute: " + name);
+			if (attributes == null) throw new GdxRuntimeException("Element " + this.name + " doesn't have attribute: " + name);
 			String value = attributes.get(name);
-			if (value == null) throw new GdxRuntimeException("Element " + name + " doesn't have attribute: " + name);
+			if (value == null) throw new GdxRuntimeException("Element " + this.name + " doesn't have attribute: " + name);
 			return value;
 		}
 

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java
Patch:
@@ -273,13 +273,13 @@ public void paint (Graphics g, JComponent jc) {
 			splitPane.add(leftSplit, JSplitPane.LEFT);
 			{
 				JPanel spacer = new JPanel(new BorderLayout());
-				leftSplit.add(spacer, JSplitPane.TOP);
+				leftSplit.add(spacer, JSplitPane.BOTTOM);
 				spacer.add(lwjglCanvas.getCanvas());
 				spacer.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 4));
 			}
 			{
 				JPanel emittersPanel = new JPanel(new BorderLayout());
-				leftSplit.add(emittersPanel, JSplitPane.BOTTOM);
+				leftSplit.add(emittersPanel, JSplitPane.TOP);
 				emittersPanel.setBorder(new CompoundBorder(BorderFactory.createEmptyBorder(0, 6, 6, 0), BorderFactory
 					.createTitledBorder("Effect Emitters")));
 				{

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSSound.java
Patch:
@@ -97,7 +97,7 @@ public void stop () {
 	@Override
 	public void dispose () {
 		stop();
-		soundBuffer.dispose();
+		OALSimpleAudio.sharedInstance().unloadEffect(soundPath);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/HorizontalGroup.java
Patch:
@@ -40,7 +40,7 @@ public class HorizontalGroup extends WidgetGroup {
 	private boolean sizeInvalid = true;
 	private FloatArray rowSizes; // row width, row height, ...
 
-	private int align, rowAlign;
+	private int align = Align.left, rowAlign;
 	private boolean reverse, round = true, wrap;
 	private float space, wrapSpace, fill, padTop, padLeft, padBottom, padRight;
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/VerticalGroup.java
Patch:
@@ -40,7 +40,7 @@ public class VerticalGroup extends WidgetGroup {
 	private boolean sizeInvalid = true;
 	private FloatArray columnSizes; // column height, column width, ...
 
-	private int align, columnAlign;
+	private int align = Align.top, columnAlign;
 	private boolean reverse, round = true, wrap;
 	private float space, wrapSpace, fill, padTop, padLeft, padBottom, padRight;
 
@@ -137,9 +137,9 @@ public void layout () {
 		float space = this.space, padLeft = this.padLeft, fill = this.fill;
 		float columnWidth = getWidth() - padLeft - padRight, y = prefHeight - padTop + space;
 
-		if ((align & Align.right) != 0)
+		if ((align & Align.top) != 0)
 			y += getHeight() - prefHeight;
-		else if ((align & Align.left) == 0) // center
+		else if ((align & Align.bottom) == 0) // center
 			y += (getHeight() - prefHeight) / 2;
 
 		align = columnAlign;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20.java
Patch:
@@ -755,6 +755,7 @@ public void glGetUniformiv (int program, int location, IntBuffer params) {
 	@Override
 	public int glGetUniformLocation (int program, String name) {
 		WebGLUniformLocation location = gl.getUniformLocation(programs.get(program), name);
+		if (location == null) return -1;
 		return allocateUniformLocationId(program, location);
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -314,7 +314,7 @@ public List<T> getList () {
 
 	/** Disables scrolling of the list shown when the select box is open. */
 	public void setScrollingDisabled (boolean y) {
-		selectBoxList.setScrollingDisabled(false, y);
+		selectBoxList.setScrollingDisabled(true, y);
 		invalidateHierarchy();
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -661,7 +661,7 @@ public boolean setScrollFocus (Actor actor) {
 				event.setRelatedActor(oldScrollFocus);
 				actor.fire(event);
 				success = !event.isCancelled();
-				if (success) setScrollFocus(oldScrollFocus);
+				if (!success) setScrollFocus(oldScrollFocus);
 			}
 		}
 		Pools.free(event);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -488,9 +488,9 @@ int delete (boolean fireChangeEvent) {
 	public void next (boolean up) {
 		Stage stage = getStage();
 		if (stage == null) return;
-		getParent().localToStageCoordinates(tmp1.set(getX(), getY()));
 		TextField current = this;
 		while (true) {
+			current.getParent().localToStageCoordinates(tmp1.set(getX(), getY()));
 			TextField textField = current.findNextTextField(stage.getActors(), null, tmp2, tmp1, up);
 			if (textField == null) { // Try to wrap around.
 				if (up)

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -782,7 +782,7 @@ public int getMaxParticleCount () {
 	}
 
 	public boolean isComplete () {
-		if (continuous) return false;
+		if (continuous && !allowCompletion) return false;
 		if (delayTimer < delay) return false;
 		return durationTimer >= duration && activeCount == 0;
 	}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Window.java
Patch:
@@ -237,7 +237,7 @@ void windowHandleChanged(long windowHandle) {
 		input.windowHandleChanged(windowHandle);
 	}
 	
-	void update(Array<LifecycleListener> lifecycleListeners) {
+	void update() {
 		if(listenerInitialized == false) {
 			initializeListener();
 		}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/ExternalExtension.java
Patch:
@@ -41,7 +41,7 @@ public void setDependencies (Map<String, List<ExternalExtensionDependency>> depe
 
 	public Dependency generateDependency () {
 		Dependency dep = new Dependency(name, gwtInherits, getPlatformDependencies("core"), getPlatformDependencies("desktop"),
-			getPlatformDependencies("android"), getPlatformDependencies("ios"), getPlatformDependencies("html"));
+			getPlatformDependencies("android"), getPlatformDependencies("ios"), getPlatformDependencies("ios-moe"), getPlatformDependencies("html"));
 
 		return dep;
 	}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/ExternalExtensionsDialog.java
Patch:
@@ -224,6 +224,7 @@ private void initData () throws ParserConfigurationException, IOException, SAXEx
 				addToDependencyMapFromXML(dependencies, eElement, "desktop");
 				addToDependencyMapFromXML(dependencies, eElement, "android");
 				addToDependencyMapFromXML(dependencies, eElement, "ios");
+				addToDependencyMapFromXML(dependencies, eElement, "ios-moe");
 				addToDependencyMapFromXML(dependencies, eElement, "html");
 
 				URI uri = null;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/Selection.java
Patch:
@@ -107,6 +107,7 @@ public void set (T item) {
 	public void setAll (Array<T> items) {
 		boolean added = false;
 		snapshot();
+		lastSelected = null;
 		selected.clear();
 		for (int i = 0, n = items.size; i < n; i++) {
 			T item = items.get(i);
@@ -115,7 +116,7 @@ public void setAll (Array<T> items) {
 		}
 		if (added && programmaticChangeEvents && fireChangeEvent())
 			revert();
-		else
+		else if (items.size > 0) //
 			lastSelected = items.peek();
 		cleanup();
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/shapebuilders/BoxShapeBuilder.java
Patch:
@@ -32,8 +32,9 @@ public class BoxShapeBuilder extends BaseShapeBuilder {
 	/** Build a box with the shape of the specified {@link BoundingBox}.
 	 * @param box */
 	public static void build (MeshPartBuilder builder, BoundingBox box) {
-		builder.box(box.getCorner000(tmpV0), box.getCorner010(tmpV1), box.getCorner100(tmpV2), box.getCorner110(tmpV3),
-			box.getCorner001(tmpV4), box.getCorner011(tmpV5), box.getCorner101(tmpV6), box.getCorner111(tmpV7));
+		builder.box(box.getCorner000(obtainV3()), box.getCorner010(obtainV3()), box.getCorner100(obtainV3()), box.getCorner110(obtainV3()),
+			box.getCorner001(obtainV3()), box.getCorner011(obtainV3()), box.getCorner101(obtainV3()), box.getCorner111(obtainV3()));
+		freeAll();
 	}
 
 	/** Add a box. Requires GL_POINTS, GL_LINES or GL_TRIANGLES primitive type. */

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -25,7 +25,7 @@ public class DependencyBank {
 	static String libgdxVersion = "1.9.2";
 	//Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly
 	static String libgdxNightlyVersion = "1.9.3-SNAPSHOT";
-	static String roboVMVersion = "1.12.0";
+	static String roboVMVersion = "2.1.0";
 	static String moeVersion = "1.1.0.final-1";
 	static String buildToolsVersion = "23.0.1";
 	static String androidAPILevel = "20";
@@ -42,7 +42,7 @@ public class DependencyBank {
 	//Project plugins
 	static String gwtPluginImport = "de.richsource.gradle.plugins:gwt-gradle-plugin:0.6";
 	static String androidPluginImport = "com.android.tools.build:gradle:1.5.0";
-	static String roboVMPluginImport = "org.robovm:robovm-gradle-plugin:" + roboVMVersion;
+	static String roboVMPluginImport = "com.mobidevelop.robovm:robovm-gradle-plugin:" + roboVMVersion;
 	static String moePluginImport = "com.intel.gradle:moeGradlePlugin:" + moeVersion;
 	
 	//Extension versions
@@ -85,7 +85,7 @@ public enum ProjectDependency {
 			new String[]{"com.badlogicgames.gdx:gdx:$gdxVersion"},
 			new String[]{"com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"},
 			new String[]{"com.badlogicgames.gdx:gdx-backend-android:$gdxVersion", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"},
-			new String[]{"org.robovm:robovm-rt:$roboVMVersion", "org.robovm:robovm-cocoatouch:$roboVMVersion", "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"},
+			new String[]{"com.mobidevelop.robovm:robovm-rt:$roboVMVersion", "com.mobidevelop.robovm:robovm-cocoatouch:$roboVMVersion", "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"},
 			new String[]{"com.badlogicgames.gdx:gdx-backend-moe:$gdxVersion", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"},
 			new String[]{"com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion", "com.badlogicgames.gdx:gdx:$gdxVersion:sources", "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"},
 			new String[]{"com.badlogic.gdx.backends.gdx_backends_gwt"},

File: gdx/src/com/badlogic/gdx/math/RandomXS128.java
Patch:
@@ -177,7 +177,7 @@ public void setState (final long seed0, final long seed1) {
 	
 	/**
 	 * Returns the internal seeds to allow state saving.
-	 * @param seed muse be 0 or 1, designating which of the 2 long seeds to return
+	 * @param seed must be 0 or 1, designating which of the 2 long seeds to return
 	 * @return the internal seed that can be used in setState
 	 */
 	public long getState(int seed) {

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -68,7 +68,7 @@
  * @author Nathan Sweet
  * @author Rob Rendell */
 public class FreeTypeFontGenerator implements Disposable {
-	static public final String DEFAULT_CHARS = "\u0000ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\"!`?'.,;:()[]{}<>|/@\\^$-%+=#_&~*\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008A\u008B\u008C\u008D\u008E\u008F\u0090\u0091\u0092\u0093\u0094\u0095\u0096\u0097\u0098\u0099\u009A\u009B\u009C\u009D\u009E\u009F\u00A0\u00A1\u00A2\u00A3\u00A4\u00A5\u00A6\u00A7\u00A8\u00A9\u00AA\u00AB\u00AC\u00AD\u00AE\u00AF\u00B0\u00B1\u00B2\u00B3\u00B4\u00B5\u00B6\u00B7\u00B8\u00B9\u00BA\u00BB\u00BC\u00BD\u00BE\u00BF\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C6\u00C7\u00C8\u00C9\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D0\u00D1\u00D2\u00D3\u00D4\u00D5\u00D6\u00D7\u00D8\u00D9\u00DA\u00DB\u00DC\u00DD\u00DE\u00DF\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u00E6\u00E7\u00E8\u00E9\u00EA\u00EB\u00EC\u00ED\u00EE\u00EF\u00F0\u00F1\u00F2\u00F3\u00F4\u00F5\u00F6\u00F7\u00F8\u00F9\u00FA\u00FB\u00FC\u00FD\u00FE\u00FF";
+	static public final String DEFAULT_CHARS = "\u0000ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\"!`?'.,;:()[]{}<>|/@\\^$€-%+=#_&~*\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008A\u008B\u008C\u008D\u008E\u008F\u0090\u0091\u0092\u0093\u0094\u0095\u0096\u0097\u0098\u0099\u009A\u009B\u009C\u009D\u009E\u009F\u00A0\u00A1\u00A2\u00A3\u00A4\u00A5\u00A6\u00A7\u00A8\u00A9\u00AA\u00AB\u00AC\u00AD\u00AE\u00AF\u00B0\u00B1\u00B2\u00B3\u00B4\u00B5\u00B6\u00B7\u00B8\u00B9\u00BA\u00BB\u00BC\u00BD\u00BE\u00BF\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C6\u00C7\u00C8\u00C9\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D0\u00D1\u00D2\u00D3\u00D4\u00D5\u00D6\u00D7\u00D8\u00D9\u00DA\u00DB\u00DC\u00DD\u00DE\u00DF\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u00E6\u00E7\u00E8\u00E9\u00EA\u00EB\u00EC\u00ED\u00EE\u00EF\u00F0\u00F1\u00F2\u00F3\u00F4\u00F5\u00F6\u00F7\u00F8\u00F9\u00FA\u00FB\u00FC\u00FD\u00FE\u00FF";
 
 	/** A hint to scale the texture as needed, without capping it at any maximum size */
 	static public final int NO_MAXIMUM = -1;

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -50,7 +50,7 @@ public interface Graphics {
 	 *
 	 * @author mzechner */
 	public enum GraphicsType {
-		AndroidGL, LWJGL, Angle, WebGL, iOSGL, JGLFW, Mock, LWJGL3
+		AndroidGL, LWJGL, WebGL, iOSGL, JGLFW, Mock, LWJGL3
 	}
 
 	/** Describe a fullscreen display mode

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -50,7 +50,7 @@ public interface Graphics {
 	 *
 	 * @author mzechner */
 	public enum GraphicsType {
-		AndroidGL, LWJGL, Angle, WebGL, iOSGL, JGLFW, Mock, LWJGL3
+		AndroidGL, LWJGL, WebGL, iOSGL, JGLFW, Mock, LWJGL3
 	}
 
 	/** Describe a fullscreen display mode

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -338,7 +338,7 @@ public void build (ProjectBuilder builder, String outputDir, String appName, Str
 			project.files.add(new ProjectFile("ios-moe/xcode/ios-moe/custom.xcconfig", false));
 			project.files.add(new ProjectFile("ios-moe/xcode/ios-moe-Test/build.xcconfig", false));
 			project.files.add(new ProjectFile("ios-moe/xcode/ios-moe-Test/Info-Test.plist", false));
-			project.files.add(new ProjectFile("ios-moe/Info.plist", true));
+			project.files.add(new ProjectFile("ios-moe/xcode/ios-moe/Info.plist", true));
 			project.files.add(new ProjectFile("ios-moe/xcode/ios-moe/main.cpp", false));
 			project.files.add(new ProjectFile("ios-moe/xcode/ios-moe.xcodeproj/project.pbxproj", true));
 			project.files.add(new ProjectFile("ios-moe/build.gradle", true));

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/AllHitsRayResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/BT_BOX_BOX_TRANSFORM_CACHE.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/BT_QUANTIZED_BVH_NODE.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/BroadphaseNativeTypes.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestConvexResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestNotMeConvexResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestNotMeRayResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestRayResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/Collision.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionConstants.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionJNI.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionObjectWrapper.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactCallbackEvent.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactListener.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ConvexResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CustomCollisionDispatcher.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_BVH_DATA.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_BVH_DATA_ARRAY.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_BVH_TREE_NODE.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_BVH_TREE_NODE_ARRAY.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_CONTACT.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_PAIR.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_QUANTIZED_BVH_NODE_ARRAY.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_TRIANGLE_CONTACT.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GdxCollisionObjectBridge.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ICollide.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalConvexResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalRayResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalShapeInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/PHY_ScalarType.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/RayResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_PHY_ScalarType.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btFace_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btSimplePair_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btSerializer.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_p_q_const__btCollisionShape_p_q_const__btCollisionShape__bool.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_float.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_int.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btCollisionObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btDbvtNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btDbvtProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btGenericMemoryPool.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btPersistentManifold.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btVector3.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_unsigned_char.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_size_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_unsigned_int.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SphereTriangleDetector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/bt32BitAxisSweep3.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAABB.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btActivatingCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3InternalInt.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3InternalShort.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBU_Simplex1to4.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBox2dBox2dCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBox2dShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxBoxCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxBoxDetector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseAabbCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePair.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairSortPredicate.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseRayCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhSubtreeInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhSubtreeInfoData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhTree.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeX.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeZ.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCharIndexTripletData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithmConstructionInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithmCreateFunc.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionDispatcher.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectConstArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectWrapper.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionWorld.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundCompoundCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeChild.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeChildData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConcaveShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeX.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeZ.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConstraintRow.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContactArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContactManifoldTypes.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContinuousConvexCollision.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvex2dConvex2dAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvex2dShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexCast.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexConcaveCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexConvexAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexHullShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexHullShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalAabbCachingShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPenetrationDepthSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPlaneCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPointCloudShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPolyhedron.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexTriangleCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeX.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeZ.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvt.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtAabbMm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtBroadphase.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDefaultCollisionConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDefaultCollisionConstructionInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDiscreteCollisionDetectorInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDispatcher.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDispatcherInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btElement.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btEmptyAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btEmptyShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btFace.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactBvh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactCompoundShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactMeshShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactMeshShapePart.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactQuantizedBvh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactShapeInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGenericMemoryPool.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGenericPoolAllocator.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGhostObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGhostPairCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkConvexCast.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkEpaPenetrationDepthSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkEpaSolver2.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkPairDetector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHashedOverlappingPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHashedSimplePairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHeightfieldTerrainShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIndexedMesh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIntIndexData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btInternalEdgeAdjustFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btInternalTriangleIndexCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btManifoldPoint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btManifoldResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMaterial.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMaterialProperties.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMeshPartData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMinkowskiPenetrationDepthSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMinkowskiSumShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSapBroadphase.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSphereShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSphereShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultimaterialTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btNodeOverlapCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btNullPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNodeDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNodeFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlapCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlapFilterCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlappingPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlappingPairCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPairCachingGhostObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPairSet.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPersistentManifold.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPersistentManifoldArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPointCollector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralContactClipping.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralConvexAabbCachingShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralConvexShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPositionAndRadius.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPrimitiveManagerBase.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPrimitiveTriangle.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhNodeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhTree.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btScaledBvhTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btScaledTriangleMeshShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShapeHull.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShortIntIndexData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShortIntIndexTripletData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimpleBroadphase.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimpleBroadphaseProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimplePair.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimulationIslandManager.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSortedOverlappingPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereBoxCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereSphereCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereTriangleCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStaticPlaneShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStaticPlaneShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStorageResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStridingMeshInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStridingMeshInterfaceData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSubSimplexClosestResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSubsimplexConvexCast.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTetrahedronShapeEx.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangle.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleBuffer.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleConvexcastCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleIndexVertexArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleIndexVertexMaterialArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoMap.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoMapData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMesh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMeshShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleRaycastCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleShapeEx.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUniformScalingShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUnionFind.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUsageBitfield.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btVoronoiSimplexSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/eBT_PLANE_INTERSECTION_TYPE.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/eGIMPACT_SHAPE_TYPE.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/Dynamics.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/DynamicsConstants.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/InternalTickCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/RotateOrder.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btMatrix3x3DoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btMatrix3x3FloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btSerializer.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_f_p_btDynamicsWorld_float__void.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_float.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_int.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btCollisionObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btPersistentManifold.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btTypedConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/bt6DofFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/bt6DofFlags2.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btActionInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btAngularLimit.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btCharacterControllerInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraintData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraintDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintParams.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSetting.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSolverType.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDefaultVehicleRaycaster.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDiscreteDynamicsWorld.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorld.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.7
+ * Version 3.0.8
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: tests/gdx-tests/src/com/badlogic/gdx/tests/conformance/DisplayModeTest.java
Patch:
@@ -47,9 +47,9 @@ void assertDisplayModesEquals (DisplayMode[] a, DisplayMode[] b) {
 		if (a.length != b.length) {
 			throw new AssertionError("Display modes " + Arrays.toString(a) + " aren't equal to display modes " + Arrays.toString(b));
 		}
-		boolean equal = false;
+		boolean equal = true;
 		for (int i = 0; i < a.length; i++) {
-			equal = isDisplayModeEqual(a[i], b[i]);
+			equal = equal && isDisplayModeEqual(a[i], b[i]);
 		}
 		if (!equal) {
 			throw new AssertionError("Display modes " + Arrays.toString(a) + " aren't equal to display modes " + Arrays.toString(b));

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -403,7 +403,7 @@ public Monitor[] getMonitors () {
 
 	@Override
 	public DisplayMode[] getDisplayModes (Monitor monitor) {
-		return new DisplayMode[] { getDisplayMode() };
+		return getDisplayModes();
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -38,13 +38,14 @@
 
 import com.badlogic.gdx.tests.*;
 import com.badlogic.gdx.tests.bench.TiledMapBench;
+import com.badlogic.gdx.tests.conformance.DisplayModeTest;
 import com.badlogic.gdx.tests.examples.MoveSpriteExample;
 import com.badlogic.gdx.tests.extensions.ControllersTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeAtlasTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeDisposeTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeFontLoaderTest;
-import com.badlogic.gdx.tests.extensions.FreeTypeMetricsTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeIncrementalTest;
+import com.badlogic.gdx.tests.extensions.FreeTypeMetricsTest;
 import com.badlogic.gdx.tests.extensions.FreeTypePackTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeTest;
 import com.badlogic.gdx.tests.extensions.InternationalFontsTest;
@@ -122,6 +123,7 @@ public class GdxTests {
 		ETC1Test.class,
 //		EarClippingTriangulatorTest.class,
 		EdgeDetectionTest.class,
+		DisplayModeTest.class,
 		ExitTest.class,
 		ExternalMusicTest.class,
 		FilesTest.class,

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSApplication.java
Patch:
@@ -387,7 +387,7 @@ public Preferences getPreferences (String name) {
 
 		// if it fails to get an existing dictionary, create a new one.
 		if (nsDictionary == null) {
-			nsDictionary = (NSMutableDictionary<NSString, NSObject>)NSMutableDictionary.alloc();
+			nsDictionary = (NSMutableDictionary<NSString, NSObject>)NSMutableDictionary.alloc().init();
 			nsDictionary.writeToFileAtomically(path, false);
 		}
 		return new IOSPreferences(nsDictionary, finalPath.getAbsolutePath());

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSAudio.java
Patch:
@@ -58,7 +58,7 @@ public Sound newSound (FileHandle fileHandle) {
 	@Override
 	public Music newMusic (FileHandle fileHandle) {
 		String path = fileHandle.file().getPath().replace('\\', '/');
-		OALAudioTrack track = OALAudioTrack.alloc();
+		OALAudioTrack track = OALAudioTrack.alloc().init();
 		if (track != null) {
 			if (track.preloadFile(path)) {
 				return new IOSMusic(track);

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSPreferences.java
Patch:
@@ -184,7 +184,7 @@ private NSString convertKey (String key) {
 
 	@Override
 	public void flush () {
-		NSAutoreleasePool pool = NSAutoreleasePool.alloc();
+		NSAutoreleasePool pool = NSAutoreleasePool.alloc().init();
 		if (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {
 			Gdx.app.debug("IOSPreferences", "Failed to write NSDictionary to file " + file);
 		}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java
Patch:
@@ -188,7 +188,7 @@ void generate () {
 
 		if (modules.contains(ProjectType.IOSMOE)) {
 			if (System.getenv("INTEL_MULTI_OS_ENGINE_HOME") == null) {
-				JOptionPane.showMessageDialog(this,	"Please install Intel Multi OS engine to use the ios-moe backend.");
+				JOptionPane.showMessageDialog(this, "Please install Intel Multi OS engine to use the ios-moe backend.");
 				return;
 			}
 		}

File: backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSFiles.java
Patch:
@@ -26,7 +26,7 @@ public class IOSFiles implements Files {
 	static final String appDir = System.getenv("HOME");
 	static final String externalPath = appDir + "/Documents/";
 	static final String localPath = appDir + "/Library/local/";
-	static final String internalPath = NSBundle.mainBundle().bundlePath() + "/asssets/";
+	static final String internalPath = NSBundle.mainBundle().bundlePath() + "/assets/";
 
 	public IOSFiles () {
 		new FileHandle(externalPath).mkdirs();

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSDevice.java
Patch:
@@ -57,7 +57,9 @@ public enum IOSDevice {
 	IPAD_MINI_AIR_2_WIFI_CELLULAR("iPad5,4", 264),
 	IPAD_PRO_WIFI("iPad6,7", 264),
 	IPAD_PRO("iPad6,8", 264),
-	
+	IPAD_PRO_97_WIFI("iPad6,3", 264),
+	IPAD_PRO_97("iPad6,4", 264),
+
 	SIMULATOR_32("i386", 264),
 	SIMULATOR_64("x86_64", 264);
 	

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -68,7 +68,7 @@
  * @author Nathan Sweet
  * @author Rob Rendell */
 public class FreeTypeFontGenerator implements Disposable {
-	static public final String DEFAULT_CHARS = "\u0000ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\"!`?'.,;:()[]{}<>|/@\\^$-%+=#_&~*\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008A\u008B\u008C\u008D\u008E\u008F\u0090\u0091\u0092\u0093\u0094\u0095\u0096\u0097\u0098\u0099\u009A\u009B\u009C\u009D\u009E\u009F\u00A0\u00A1\u00A2\u00A3\u00A4\u00A5\u00A6\u00A7\u00A8\u00A9\u00AA\u00AB\u00AC\u00AD\u00AE\u00AF\u00B0\u00B1\u00B2\u00B3\u00B4\u00B5\u00B6\u00B7\u00B8\u00B9\u00BA\u00BB\u00BC\u00BD\u00BE\u00BF\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C6\u00C7\u00C8\u00C9\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D0\u00D1\u00D2\u00D3\u00D4\u00D5\u00D6\u00D7\u00D8\u00D9\u00DA\u00DB\u00DC\u00DD\u00DE\u00DF\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u00E6\u00E7\u00E8\u00E9\u00EA\u00EB\u00EC\u00ED\u00EE\u00EF\u00F0\u00F1\u00F2\u00F3\u00F4\u00F5\u00F6\u00F7\u00F8\u00F9\u00FA\u00FB\u00FC\u00FD\u00FE\u00FF";
+	static public final String DEFAULT_CHARS = "\u0000ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\"!`?'.,;:()[]{}<>|/@\\^$€-%+=#_&~*\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008A\u008B\u008C\u008D\u008E\u008F\u0090\u0091\u0092\u0093\u0094\u0095\u0096\u0097\u0098\u0099\u009A\u009B\u009C\u009D\u009E\u009F\u00A0\u00A1\u00A2\u00A3\u00A4\u00A5\u00A6\u00A7\u00A8\u00A9\u00AA\u00AB\u00AC\u00AD\u00AE\u00AF\u00B0\u00B1\u00B2\u00B3\u00B4\u00B5\u00B6\u00B7\u00B8\u00B9\u00BA\u00BB\u00BC\u00BD\u00BE\u00BF\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C6\u00C7\u00C8\u00C9\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D0\u00D1\u00D2\u00D3\u00D4\u00D5\u00D6\u00D7\u00D8\u00D9\u00DA\u00DB\u00DC\u00DD\u00DE\u00DF\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u00E6\u00E7\u00E8\u00E9\u00EA\u00EB\u00EC\u00ED\u00EE\u00EF\u00F0\u00F1\u00F2\u00F3\u00F4\u00F5\u00F6\u00F7\u00F8\u00F9\u00FA\u00FB\u00FC\u00FD\u00FE\u00FF";
 
 	/** A hint to scale the texture as needed, without capping it at any maximum size */
 	static public final int NO_MAXIMUM = -1;

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/Method.java
Patch:
@@ -65,12 +65,12 @@ public Method (String name, Class enclosingType, Class returnType, Parameter[] p
 
 	/** @return the {@link Class} of the enclosing type. */
 	public Class getEnclosingType () {
-		return enclosingType.getClass();
+		return enclosingType.clazz;
 	}
 
 	/** @return the {@link Class} of the return type or null. */
 	public Class getReturnType () {
-		return returnType.getClass();
+		return returnType.clazz;
 	}
 
 	/** @return the list of parameters, can be a zero size array. */

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/shapebuilders/SphereShapeBuilder.java
Patch:
@@ -80,6 +80,7 @@ public static void build (MeshPartBuilder builder, final Matrix4 transform, floa
 			for (int iu = 0; iu <= divisionsU; iu++) {
 				angleU = auo + stepU * iu;
 				u = 1f - us * iu;
+				// Fixme : wrong normal calculation if transform
 				curr1.position.set(MathUtils.cos(angleU) * hw * t, h, MathUtils.sin(angleU) * hd * t).mul(transform);
 				curr1.normal.set(curr1.position).nor();
 				curr1.uv.set(u, v);

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/Method.java
Patch:
@@ -65,12 +65,12 @@ public Method (String name, Class enclosingType, Class returnType, Parameter[] p
 
 	/** @return the {@link Class} of the enclosing type. */
 	public Class getEnclosingType () {
-		return enclosingType.getClass();
+		return enclosingType.clazz;
 	}
 
 	/** @return the {@link Class} of the return type or null. */
 	public Class getReturnType () {
-		return returnType.getClass();
+		return returnType.clazz;
 	}
 
 	/** @return the list of parameters, can be a zero size array. */

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -1227,9 +1227,10 @@ public void sphere (final Matrix4 transform, float width, float height, float de
 			for (int iu = 0; iu <= divisionsU; iu++) {
 				angleU = auo + stepU * iu;
 				u = 1f - us * iu;
-				curr1.position.set(MathUtils.cos(angleU) * hw * t, h, MathUtils.sin(angleU) * hd * t).mul(transform);
+				curr1.position.set(MathUtils.cos(angleU) * hw * t, h, MathUtils.sin(angleU) * hd * t);
 				curr1.normal.set(curr1.position).nor();
 				curr1.uv.set(u, v);
+				curr1.position.mul(transform);
 				tmpIndices.set(tempOffset, vertex(curr1));
 				final int o = tempOffset + s;
 				if ((iv > 0) && (iu > 0)) // FIXME don't duplicate lines and points

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtMusic.java
Patch:
@@ -74,7 +74,7 @@ public void stop () {
 
 	@Override
 	public boolean isPlaying () {
-		isPlaying &= sound.getPlayState() == 1;
+		isPlaying = !sound.getPaused() && sound.getPlayState() == 1;
 		return isPlaying;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -1227,9 +1227,10 @@ public void sphere (final Matrix4 transform, float width, float height, float de
 			for (int iu = 0; iu <= divisionsU; iu++) {
 				angleU = auo + stepU * iu;
 				u = 1f - us * iu;
-				curr1.position.set(MathUtils.cos(angleU) * hw * t, h, MathUtils.sin(angleU) * hd * t).mul(transform);
+				curr1.position.set(MathUtils.cos(angleU) * hw * t, h, MathUtils.sin(angleU) * hd * t);
 				curr1.normal.set(curr1.position).nor();
 				curr1.uv.set(u, v);
+				curr1.position.mul(transform);
 				tmpIndices.set(tempOffset, vertex(curr1));
 				final int o = tempOffset + s;
 				if ((iv > 0) && (iu > 0)) // FIXME don't duplicate lines and points

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
Patch:
@@ -725,7 +725,6 @@ public boolean equals (DefaultShader obj) {
 	}
 
 	private Matrix3 normalMatrix = new Matrix3();
-	private Camera camera;
 	private float time;
 	private boolean lightsSet;
 

File: gdx/src/com/badlogic/gdx/math/BSpline.java
Patch:
@@ -90,7 +90,7 @@ public static <T extends Vector<T>> T cubic_derivative (final T out, final int i
 		final float t2 = u * u;
 		final float t3 = t2 * u;
 		out.set(points[i]).scl(1.5f * t2 - 2 * u);
-		if (continuous || i > 0) out.add(tmp.set(points[(n + i - 1) % n]).scl(0.5f * (1 - u) * (1 - u)));
+		if (continuous || i > 0) out.add(tmp.set(points[(n + i - 1) % n]).scl(-0.5f * dt * dt));
 		if (continuous || i < (n - 1)) out.add(tmp.set(points[(i + 1) % n]).scl(-1.5f * t2 + u + 0.5f));
 		if (continuous || i < (n - 2)) out.add(tmp.set(points[(i + 2) % n]).scl(0.5f * t2));
 		return out;

File: gdx/src/com/badlogic/gdx/utils/IdentityMap.java
Patch:
@@ -84,7 +84,7 @@ public IdentityMap (int initialCapacity, float loadFactor) {
 
 	/** Creates a new map identical to the specified map. */
 	public IdentityMap (IdentityMap map) {
-		this(map.capacity, map.loadFactor);
+		this((int)Math.floor(map.capacity * map.loadFactor), map.loadFactor);
 		stashSize = map.stashSize;
 		System.arraycopy(map.keyTable, 0, keyTable, 0, map.keyTable.length);
 		System.arraycopy(map.valueTable, 0, valueTable, 0, map.valueTable.length);

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -87,7 +87,7 @@ public IntFloatMap (int initialCapacity, float loadFactor) {
 
 	/** Creates a new map identical to the specified map. */
 	public IntFloatMap (IntFloatMap map) {
-		this(map.capacity, map.loadFactor);
+		this((int)Math.floor(map.capacity * map.loadFactor), map.loadFactor);
 		stashSize = map.stashSize;
 		System.arraycopy(map.keyTable, 0, keyTable, 0, map.keyTable.length);
 		System.arraycopy(map.valueTable, 0, valueTable, 0, map.valueTable.length);

File: gdx/src/com/badlogic/gdx/utils/IntIntMap.java
Patch:
@@ -85,7 +85,7 @@ public IntIntMap (int initialCapacity, float loadFactor) {
 
 	/** Creates a new map identical to the specified map. */
 	public IntIntMap (IntIntMap map) {
-		this(map.capacity, map.loadFactor);
+		this((int)Math.floor(map.capacity * map.loadFactor), map.loadFactor);
 		stashSize = map.stashSize;
 		System.arraycopy(map.keyTable, 0, keyTable, 0, map.keyTable.length);
 		System.arraycopy(map.valueTable, 0, valueTable, 0, map.valueTable.length);

File: gdx/src/com/badlogic/gdx/utils/IntMap.java
Patch:
@@ -86,7 +86,7 @@ public IntMap (int initialCapacity, float loadFactor) {
 
 	/** Creates a new map identical to the specified map. */
 	public IntMap (IntMap<? extends V> map) {
-		this(map.capacity, map.loadFactor);
+		this((int)Math.floor(map.capacity * map.loadFactor), map.loadFactor);
 		stashSize = map.stashSize;
 		System.arraycopy(map.keyTable, 0, keyTable, 0, map.keyTable.length);
 		System.arraycopy(map.valueTable, 0, valueTable, 0, map.valueTable.length);

File: gdx/src/com/badlogic/gdx/utils/IntSet.java
Patch:
@@ -80,7 +80,7 @@ public IntSet (int initialCapacity, float loadFactor) {
 
 	/** Creates a new set identical to the specified set. */
 	public IntSet (IntSet set) {
-		this(set.capacity, set.loadFactor);
+		this((int)Math.floor(set.capacity * set.loadFactor), set.loadFactor);
 		stashSize = set.stashSize;
 		System.arraycopy(set.keyTable, 0, keyTable, 0, set.keyTable.length);
 		size = set.size;

File: gdx/src/com/badlogic/gdx/utils/LongMap.java
Patch:
@@ -86,7 +86,7 @@ public LongMap (int initialCapacity, float loadFactor) {
 
 	/** Creates a new map identical to the specified map. */
 	public LongMap (LongMap<? extends V> map) {
-		this(map.capacity, map.loadFactor);
+		this((int)Math.floor(map.capacity * map.loadFactor), map.loadFactor);
 		stashSize = map.stashSize;
 		System.arraycopy(map.keyTable, 0, keyTable, 0, map.keyTable.length);
 		System.arraycopy(map.valueTable, 0, valueTable, 0, map.valueTable.length);

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -83,7 +83,7 @@ public ObjectFloatMap (int initialCapacity, float loadFactor) {
 
 	/** Creates a new map identical to the specified map. */
 	public ObjectFloatMap (ObjectFloatMap<? extends K> map) {
-		this(map.capacity, map.loadFactor);
+		this((int)Math.floor(map.capacity * map.loadFactor), map.loadFactor);
 		stashSize = map.stashSize;
 		System.arraycopy(map.keyTable, 0, keyTable, 0, map.keyTable.length);
 		System.arraycopy(map.valueTable, 0, valueTable, 0, map.valueTable.length);

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -83,7 +83,7 @@ public ObjectIntMap (int initialCapacity, float loadFactor) {
 
 	/** Creates a new map identical to the specified map. */
 	public ObjectIntMap (ObjectIntMap<? extends K> map) {
-		this(map.capacity, map.loadFactor);
+		this((int)Math.floor(map.capacity * map.loadFactor), map.loadFactor);
 		stashSize = map.stashSize;
 		System.arraycopy(map.keyTable, 0, keyTable, 0, map.keyTable.length);
 		System.arraycopy(map.valueTable, 0, valueTable, 0, map.valueTable.length);

File: gdx/src/com/badlogic/gdx/utils/ObjectMap.java
Patch:
@@ -83,7 +83,7 @@ public ObjectMap (int initialCapacity, float loadFactor) {
 
 	/** Creates a new map identical to the specified map. */
 	public ObjectMap (ObjectMap<? extends K, ? extends V> map) {
-		this(map.capacity, map.loadFactor);
+		this((int)Math.floor(map.capacity * map.loadFactor), map.loadFactor);
 		stashSize = map.stashSize;
 		System.arraycopy(map.keyTable, 0, keyTable, 0, map.keyTable.length);
 		System.arraycopy(map.valueTable, 0, valueTable, 0, map.valueTable.length);

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -79,7 +79,7 @@ public ObjectSet (int initialCapacity, float loadFactor) {
 
 	/** Creates a new set identical to the specified set. */
 	public ObjectSet (ObjectSet set) {
-		this(set.capacity, set.loadFactor);
+		this((int)Math.floor(set.capacity * set.loadFactor), set.loadFactor);
 		stashSize = set.stashSize;
 		System.arraycopy(set.keyTable, 0, keyTable, 0, set.keyTable.length);
 		size = set.size;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -153,7 +153,7 @@ protected int letterUnderCursor (float x) {
 	}
 
 	protected boolean isWordCharacter (char c) {
-		return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9');
+		return Character.isLetterOrDigit(c);
 	}
 
 	protected int[] wordUnderCursor (int at) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/OcclusionCuller.java
Patch:
@@ -96,9 +96,9 @@ public void Process (btDbvtNode leaf, float depth) {
 
 	private final FloatBuffer frustumNormals = BufferUtils.newFloatBuffer(NUM_PLANES * 4);
 	private final FloatBuffer frustumOffsets = BufferUtils.newFloatBuffer(NUM_PLANES);
-	private final Vector3 tmpV1 = new Vector3();
-	private final Vector3 tmpV2 = new Vector3();
-	private OcclusionBuffer oclBuffer;
+	final Vector3 tmpV1 = new Vector3();
+	final Vector3 tmpV2 = new Vector3();
+	OcclusionBuffer oclBuffer;
 
 	private final Collider collider = new Collider();
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/OcclusionCullingTest.java
Patch:
@@ -107,7 +107,7 @@ public CullingPolicy next () {
 	private ModelInstance frustumInstance;
 	private PerspectiveCamera overviewCam;
 
-	private final Array<BulletEntity> visibleEntities = new Array<BulletEntity>();
+	final Array<BulletEntity> visibleEntities = new Array<BulletEntity>();
 
 	// Program state variables
 	private CullingPolicy cullingPolicy = CullingPolicy.OCCLUSION;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/PairCacheTest.java
Patch:
@@ -182,7 +182,8 @@ public void render () {
 
 	@Override
 	public boolean tap (float x, float y, int count, int button) {
-		if (useFrustumCam = !useFrustumCam)
+		useFrustumCam = !useFrustumCam;
+		if (useFrustumCam)
 			camera = frustumCam;
 		else
 			camera = overviewCam;

File: gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java
Patch:
@@ -242,8 +242,8 @@ protected void loadObject (TiledMap map, MapLayer layer, Element element) {
 			if (id != 0) {
 				object.getProperties().put("id", id);
 			}
-			object.getProperties().put("x", x * scaleX);
-			object.getProperties().put("y", (flipY ? y - height : y) * scaleY);
+			object.getProperties().put("x", x);
+			object.getProperties().put("y", (flipY ? y - height : y));
 			object.getProperties().put("width", width);
 			object.getProperties().put("height", height);
 			object.setVisible(element.getIntAttribute("visible", 1) == 1);

File: gdx/src/com/badlogic/gdx/utils/UBJsonReader.java
Patch:
@@ -96,6 +96,8 @@ else if (type == 's' || type == 'S')
 			return new JsonValue(parseString(din, type));
 		else if (type == 'a' || type == 'A')
 			return parseData(din, type);
+		else if (type == 'C')
+			return new JsonValue(din.readChar());
 		else
 			throw new GdxRuntimeException("Unrecognized data type");
 	}

File: gdx/src/com/badlogic/gdx/utils/UBJsonWriter.java
Patch:
@@ -244,7 +244,7 @@ public UBJsonWriter value (int[] values) throws IOException {
 	public UBJsonWriter value (long[] values) throws IOException {
 		array();
 		out.writeByte('$');
-		out.writeByte('I');
+		out.writeByte('L');
 		out.writeByte('#');
 		value(values.length);
 		for (int i = 0, n = values.length; i < n; i++) {
@@ -277,7 +277,7 @@ public UBJsonWriter value (float[] values) throws IOException {
 	public UBJsonWriter value (double[] values) throws IOException {
 		array();
 		out.writeByte('$');
-		out.writeByte('d');
+		out.writeByte('D');
 		out.writeByte('#');
 		value(values.length);
 		for (int i = 0, n = values.length; i < n; i++) {
@@ -304,7 +304,7 @@ public UBJsonWriter value (boolean[] values) throws IOException {
 	public UBJsonWriter value (char[] values) throws IOException {
 		array();
 		out.writeByte('$');
-		out.writeByte('I');
+		out.writeByte('C');
 		out.writeByte('#');
 		value(values.length);
 		for (int i = 0, n = values.length; i < n; i++) {

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionJNI.java
Patch:
@@ -2501,7 +2501,7 @@ public class CollisionJNI {
   public final static native void ContactCache_director_connect(ContactCache obj, long cptr, boolean mem_own, boolean weak_global);
   public final static native void ContactCache_change_ownership(ContactCache obj, long cptr, boolean take_or_release);
   public final static native int btBroadphasePairArray_size(long jarg1, btBroadphasePairArray jarg1_);
-  public final static native btBroadphasePair btBroadphasePairArray_at(long jarg1, btBroadphasePairArray jarg1_, int jarg2);
+  public final static native long btBroadphasePairArray_at(long jarg1, btBroadphasePairArray jarg1_, int jarg2);
   public final static native int btBroadphasePairArray_getCollisionObjects(long jarg1, btBroadphasePairArray jarg1_, int[] jarg2, int jarg3, int jarg4);
   public final static native int btBroadphasePairArray_getCollisionObjectsValue(long jarg1, btBroadphasePairArray jarg1_, int[] jarg2, int jarg3, int jarg4);
   public final static native long new_btBroadphasePairArray();

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairArray.java
Patch:
@@ -84,7 +84,7 @@ public int size() {
   }
 
   public btBroadphasePair at(int n) {
-	return CollisionJNI.btBroadphasePairArray_at(swigCPtr, this, n);
+	return btBroadphasePair.internalTemp(CollisionJNI.btBroadphasePairArray_at(swigCPtr, this, n), false);
 }
 
   public int getCollisionObjects(int[] result, int max, int other) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java
Patch:
@@ -40,7 +40,7 @@ public class BulletTestCollection extends GdxTest implements InputProcessor, Ges
 		new RayCastTest(), new RayPickRagdollTest(), new InternalTickTest(), new CollisionWorldTest(), new CollisionTest(),
 		new FrustumCullingTest(), new CollisionDispatcherTest(), new ContactCallbackTest(), new ContactCallbackTest2(),
 		new ContactCacheTest(), new SoftBodyTest(), new SoftMeshTest(), new VehicleTest(), new CharacterTest(), new ImportTest(),
-		new TriangleRaycastTest(), new OcclusionCullingTest()};
+		new TriangleRaycastTest(), new OcclusionCullingTest(), new PairCacheTest()};
 
 	protected int testIndex = 0;
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionJNI.java
Patch:
@@ -2501,7 +2501,7 @@ public class CollisionJNI {
   public final static native void ContactCache_director_connect(ContactCache obj, long cptr, boolean mem_own, boolean weak_global);
   public final static native void ContactCache_change_ownership(ContactCache obj, long cptr, boolean take_or_release);
   public final static native int btBroadphasePairArray_size(long jarg1, btBroadphasePairArray jarg1_);
-  public final static native btBroadphasePair btBroadphasePairArray_at(long jarg1, btBroadphasePairArray jarg1_, int jarg2);
+  public final static native long btBroadphasePairArray_at(long jarg1, btBroadphasePairArray jarg1_, int jarg2);
   public final static native int btBroadphasePairArray_getCollisionObjects(long jarg1, btBroadphasePairArray jarg1_, int[] jarg2, int jarg3, int jarg4);
   public final static native int btBroadphasePairArray_getCollisionObjectsValue(long jarg1, btBroadphasePairArray jarg1_, int[] jarg2, int jarg3, int jarg4);
   public final static native long new_btBroadphasePairArray();

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairArray.java
Patch:
@@ -84,7 +84,7 @@ public int size() {
   }
 
   public btBroadphasePair at(int n) {
-	return CollisionJNI.btBroadphasePairArray_at(swigCPtr, this, n);
+	return btBroadphasePair.internalTemp(CollisionJNI.btBroadphasePairArray_at(swigCPtr, this, n), false);
 }
 
   public int getCollisionObjects(int[] result, int max, int other) {

File: gdx/src/com/badlogic/gdx/utils/UBJsonReader.java
Patch:
@@ -96,6 +96,8 @@ else if (type == 's' || type == 'S')
 			return new JsonValue(parseString(din, type));
 		else if (type == 'a' || type == 'A')
 			return parseData(din, type);
+		else if (type == 'C')
+			return new JsonValue(din.readChar());
 		else
 			throw new GdxRuntimeException("Unrecognized data type");
 	}

File: gdx/src/com/badlogic/gdx/utils/UBJsonWriter.java
Patch:
@@ -244,7 +244,7 @@ public UBJsonWriter value (int[] values) throws IOException {
 	public UBJsonWriter value (long[] values) throws IOException {
 		array();
 		out.writeByte('$');
-		out.writeByte('I');
+		out.writeByte('L');
 		out.writeByte('#');
 		value(values.length);
 		for (int i = 0, n = values.length; i < n; i++) {
@@ -277,7 +277,7 @@ public UBJsonWriter value (float[] values) throws IOException {
 	public UBJsonWriter value (double[] values) throws IOException {
 		array();
 		out.writeByte('$');
-		out.writeByte('d');
+		out.writeByte('D');
 		out.writeByte('#');
 		value(values.length);
 		for (int i = 0, n = values.length; i < n; i++) {
@@ -304,7 +304,7 @@ public UBJsonWriter value (boolean[] values) throws IOException {
 	public UBJsonWriter value (char[] values) throws IOException {
 		array();
 		out.writeByte('$');
-		out.writeByte('I');
+		out.writeByte('C');
 		out.writeByte('#');
 		value(values.length);
 		for (int i = 0, n = values.length; i < n; i++) {

File: gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java
Patch:
@@ -242,8 +242,8 @@ protected void loadObject (TiledMap map, MapLayer layer, Element element) {
 			if (id != 0) {
 				object.getProperties().put("id", id);
 			}
-			object.getProperties().put("x", x * scaleX);
-			object.getProperties().put("y", (flipY ? y - height : y) * scaleY);
+			object.getProperties().put("x", x);
+			object.getProperties().put("y", (flipY ? y - height : y));
 			object.getProperties().put("width", width);
 			object.getProperties().put("height", height);
 			object.setVisible(element.getIntAttribute("visible", 1) == 1);

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1.java
Patch:
@@ -88,7 +88,7 @@ public ETC1Data (FileHandle pkmFile) {
 
 		private void checkNPOT () {
 			if (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height)) {
-				Gdx.app.debug("ETC1Data", "warning: non-power-of-two ETC1 textures may crash the driver of PowerVR GPUs");
+				System.out.println("ETC1Data " + "warning: non-power-of-two ETC1 textures may crash the driver of PowerVR GPUs");
 			}
 		}
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1.java
Patch:
@@ -88,7 +88,7 @@ public ETC1Data (FileHandle pkmFile) {
 
 		private void checkNPOT () {
 			if (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height)) {
-				Gdx.app.debug("ETC1Data", "warning: non-power-of-two ETC1 textures may crash the driver of PowerVR GPUs");
+				System.out.println("ETC1Data " + "warning: non-power-of-two ETC1 textures may crash the driver of PowerVR GPUs");
 			}
 		}
 

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
Patch:
@@ -114,7 +114,9 @@ public void viewDidLayoutSubviews () {
 			graphics.width = (int)bounds.getWidth();
 			graphics.height = (int)bounds.getHeight();
 			graphics.makeCurrent();
-			app.listener.resize(graphics.width, graphics.height);
+			if (graphics.created) {
+				app.listener.resize(graphics.width, graphics.height);
+			}
 		}
 		
 		@Callback

File: gdx/src/com/badlogic/gdx/graphics/glutils/GLVersion.java
Patch:
@@ -87,8 +87,8 @@ private void extractVersion (String patternString, String versionString) {
 	/** Forgiving parsing of gl major, minor and release versions as some manufacturers don't adhere to spec **/
 	private int parseInt (String v, int defaultValue) {
 		try {
-			return ((Number)NumberFormat.getInstance().parse(v)).intValue();
-		} catch (ParseException e) {
+			return Integer.parseInt(v);
+		} catch (NumberFormatException nfe) {
 			Gdx.app.error("LibGDX GL", "Error parsing number: " + v +", assuming: " + defaultValue);
 			return defaultValue;
 		}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtMusic.java
Patch:
@@ -74,7 +74,7 @@ public void stop () {
 
 	@Override
 	public boolean isPlaying () {
-		isPlaying &= sound.getPlayState() == 1;
+		isPlaying = !sound.getPaused() && sound.getPlayState() == 1;
 		return isPlaying;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -150,7 +150,7 @@ protected int letterUnderCursor (float x) {
 	}
 
 	protected boolean isWordCharacter (char c) {
-		return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9');
+		return Character.isLetterOrDigit(c);
 	}
 
 	protected int[] wordUnderCursor (int at) {

File: gdx/src/com/badlogic/gdx/graphics/Camera.java
Patch:
@@ -71,8 +71,8 @@ public abstract class Camera {
 
 	/** Recalculates the direction of the camera to look at the point (x, y, z). This function assumes the up vector is normalized.
 	 * @param x the x-coordinate of the point to look at
-	 * @param y the x-coordinate of the point to look at
-	 * @param z the x-coordinate of the point to look at */
+	 * @param y the y-coordinate of the point to look at
+	 * @param z the z-coordinate of the point to look at */
 	public void lookAt (float x, float y, float z) {
 		tmpVec.set(x, y, z).sub(position).nor();
 		if (!tmpVec.isZero()) {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -150,6 +150,7 @@ private void cleanup() {
 		for (Lwjgl3Window window : windows) {
 			window.dispose();
 		}
+		Lwjgl3Cursor.disposeSystemCursors();
 		if (audio instanceof OpenALAudio) {
 			((OpenALAudio) audio).dispose();
 		}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Graphics.java
Patch:
@@ -407,7 +407,6 @@ public void setSystemCursor(SystemCursor systemCursor) {
 	@Override
 	public void dispose() {
 		this.resizeCallback.release();
-		Lwjgl3Cursor.disposeAll();
 	}
 
 	public static class Lwjgl3DisplayMode extends DisplayMode {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Window.java
Patch:
@@ -278,7 +278,8 @@ void initializeListener() {
 	@Override
 	public void dispose() {
 		listener.pause();
-		listener.dispose();		
+		listener.dispose();
+		Lwjgl3Cursor.dispose(this);
 		graphics.dispose();
 		input.dispose();
 		GLFW.glfwSetWindowFocusCallback(windowHandle, null);

File: gdx/src/com/badlogic/gdx/graphics/Camera.java
Patch:
@@ -71,8 +71,8 @@ public abstract class Camera {
 
 	/** Recalculates the direction of the camera to look at the point (x, y, z). This function assumes the up vector is normalized.
 	 * @param x the x-coordinate of the point to look at
-	 * @param y the x-coordinate of the point to look at
-	 * @param z the x-coordinate of the point to look at */
+	 * @param y the y-coordinate of the point to look at
+	 * @param z the z-coordinate of the point to look at */
 	public void lookAt (float x, float y, float z) {
 		tmpVec.set(x, y, z).sub(position).nor();
 		if (!tmpVec.isZero()) {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Cursor.java
Patch:
@@ -92,6 +92,7 @@ static void disposeAll() {
 		for (long systemCursor : systemCursors.values()) {
 			GLFW.glfwDestroyCursor(systemCursor);
 		}
+		systemCursors.clear();
 	}
 
 	static void setSystemCursor(long windowHandle, SystemCursor systemCursor) {

File: extensions/gdx-controllers/gdx-controllers-lwjgl3/src/com/badlogic/gdx/controllers/lwjgl3/Lwjgl3ControllerManager.java
Patch:
@@ -41,7 +41,6 @@ void pollState() {
 				}
 				if(!alreadyUsed) {
 					Lwjgl3Controller controller = new Lwjgl3Controller(this, i);
-					controllers.add(controller);
 					connected(controller);
 				}
 			}

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3GL20.java
Patch:
@@ -56,7 +56,7 @@ private FloatBuffer toFloatBuffer (float v[], int offset, int count) {
 
 	private IntBuffer toIntBuffer (int v[], int offset, int count) {
 		ensureBufferCapacity(count << 2);
-		floatBuffer.clear();
+		intBuffer.clear();
 		com.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);
 		return intBuffer;
 	}

File: gdx/src/com/badlogic/gdx/graphics/glutils/GLFrameBuffer.java
Patch:
@@ -273,7 +273,7 @@ protected void setFrameBufferViewport () {
 
 	/** Unbinds the framebuffer, all drawing will be performed to the normal framebuffer from here on. */
 	public void end () {
-		end(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		end(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 	}
 
 	/** Unbinds the framebuffer and sets viewport sizes, all drawing will be performed to the normal framebuffer from here on.

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3GL20.java
Patch:
@@ -56,7 +56,7 @@ private FloatBuffer toFloatBuffer (float v[], int offset, int count) {
 
 	private IntBuffer toIntBuffer (int v[], int offset, int count) {
 		ensureBufferCapacity(count << 2);
-		floatBuffer.clear();
+		intBuffer.clear();
 		com.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);
 		return intBuffer;
 	}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL20.java
Patch:
@@ -60,7 +60,7 @@ private FloatBuffer toFloatBuffer (float v[], int offset, int count) {
 
 	private IntBuffer toIntBuffer (int v[], int offset, int count) {
 		ensureBufferCapacity(count << 2);
-		floatBuffer.clear();
+		intBuffer.clear();
 		com.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);
 		return intBuffer;
 	}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL20.java
Patch:
@@ -60,7 +60,7 @@ private FloatBuffer toFloatBuffer (float v[], int offset, int count) {
 
 	private IntBuffer toIntBuffer (int v[], int offset, int count) {
 		ensureBufferCapacity(count << 2);
-		floatBuffer.clear();
+		intBuffer.clear();
 		com.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);
 		return intBuffer;
 	}

File: extensions/gdx-controllers/gdx-controllers-lwjgl3/src/com/badlogic/gdx/controllers/lwjgl3/Lwjgl3Controller.java
Patch:
@@ -22,7 +22,7 @@ public class Lwjgl3Controller implements Controller {
 	
 	public Lwjgl3Controller(Lwjgl3ControllerManager manager, int index) {
 		this.manager = manager;
-		this.index = 0;
+		this.index = index;
 		this.axisState = new float[GLFW.glfwGetJoystickAxes(index).limit()];	
 		this.buttonState = new boolean[GLFW.glfwGetJoystickButtons(index).limit()];
 		this.name = GLFW.glfwGetJoystickName(index);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/system/BaseShadowSystem.java
Patch:
@@ -386,6 +386,9 @@ protected void processViewport (LightProperties lp, boolean cameraViewport) {
 
 		TextureRegion region = lp.region;
 		region.setTexture(frameBuffers[currentPass].getColorBufferTexture());
+		
+		// We don't use HdpiUtils
+		// gl commands related to shadow map size and not to screen size
 		Gdx.gl.glViewport(r.x, r.y, r.width, r.height);
 		Gdx.gl.glScissor(r.x + 1, r.y + 1, r.width - 2, r.height - 2);
 		region.setRegion(r.x, r.y, r.width, r.height);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/system/ShadowSystem.java
Patch:
@@ -57,7 +57,7 @@
  * }
  * system.end();
  *
- * Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+ * HdpiUtils.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
  * Gdx.gl.glClearColor(0, 0, 0, 1);
  * Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
  *

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/system/classical/ClassicalShadowSystem.java
Patch:
@@ -76,7 +76,7 @@ protected void init1 () {
 	}
 
 	protected void init2 () {
-		frameBuffers[SECOND_PASS] = new FrameBuffer(Pixmap.Format.RGBA8888, Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);
+		frameBuffers[SECOND_PASS] = new FrameBuffer(Pixmap.Format.RGBA8888, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight(), true);
 		passShaderProviders[SECOND_PASS] = new Pass2ShaderProvider(new Pass2Shader.Config(this));
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/system/classical/MainShader.java
Patch:
@@ -55,7 +55,7 @@ public void set (BaseShader shader, int inputID, Renderable renderable, Attribut
 			@Override
 			public void set (BaseShader shader, int inputID, Renderable renderable, Attributes combinedAttributes) {
 				// Value must be float type to work !
-				shader.set(inputID, (float)Gdx.graphics.getWidth(), (float)Gdx.graphics.getHeight());
+				shader.set(inputID, (float)Gdx.graphics.getBackBufferWidth(), (float)Gdx.graphics.getBackBufferHeight());
 			}
 		};
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/system/BaseShadowSystem.java
Patch:
@@ -386,6 +386,9 @@ protected void processViewport (LightProperties lp, boolean cameraViewport) {
 
 		TextureRegion region = lp.region;
 		region.setTexture(frameBuffers[currentPass].getColorBufferTexture());
+		
+		// We don't use HdpiUtils
+		// gl commands related to shadow map size and not to screen size
 		Gdx.gl.glViewport(r.x, r.y, r.width, r.height);
 		Gdx.gl.glScissor(r.x + 1, r.y + 1, r.width - 2, r.height - 2);
 		region.setRegion(r.x, r.y, r.width, r.height);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/system/ShadowSystem.java
Patch:
@@ -57,7 +57,7 @@
  * }
  * system.end();
  *
- * Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+ * HdpiUtils.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
  * Gdx.gl.glClearColor(0, 0, 0, 1);
  * Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
  *

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/system/classical/ClassicalShadowSystem.java
Patch:
@@ -76,7 +76,7 @@ protected void init1 () {
 	}
 
 	protected void init2 () {
-		frameBuffers[SECOND_PASS] = new FrameBuffer(Pixmap.Format.RGBA8888, Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);
+		frameBuffers[SECOND_PASS] = new FrameBuffer(Pixmap.Format.RGBA8888, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight(), true);
 		passShaderProviders[SECOND_PASS] = new Pass2ShaderProvider(new Pass2Shader.Config(this));
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/system/classical/MainShader.java
Patch:
@@ -55,7 +55,7 @@ public void set (BaseShader shader, int inputID, Renderable renderable, Attribut
 			@Override
 			public void set (BaseShader shader, int inputID, Renderable renderable, Attributes combinedAttributes) {
 				// Value must be float type to work !
-				shader.set(inputID, (float)Gdx.graphics.getWidth(), (float)Gdx.graphics.getHeight());
+				shader.set(inputID, (float)Gdx.graphics.getBackBufferWidth(), (float)Gdx.graphics.getBackBufferHeight());
 			}
 		};
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/MultipleRenderTargetTest.java
Patch:
@@ -257,6 +257,7 @@ public void render () {
 			mrtSceneShader.setUniformf("lights[" + i + "].lightColor", light.color);
 		}
 		mrtSceneShader.setUniformf("u_viewPos", camera.position);
+		mrtSceneShader.setUniformMatrix("u_inverseProjectionMatrix", camera.invProjectionView);
 		quad.render(mrtSceneShader, GL30.GL_TRIANGLE_FAN);
 		mrtSceneShader.end();
 		renderContext.end();

File: tests/gdx-tests-gwt/src/com/badlogic/gdx/tests/gwt/client/GwtTestStarter.java
Patch:
@@ -31,7 +31,7 @@ public GwtApplicationConfiguration getConfig () {
 	}
 
 	@Override
-	public ApplicationListener getApplicationListener () {
+	public ApplicationListener createApplicationListener () {
 		return new GwtTestWrapper();
 	}
 }

File: tests/gdx-tests-gwt/src/com/badlogic/gdx/tests/gwt/client/GwtTestStarter.java
Patch:
@@ -31,7 +31,7 @@ public GwtApplicationConfiguration getConfig () {
 	}
 
 	@Override
-	public ApplicationListener getApplicationListener () {
+	public ApplicationListener createApplicationListener () {
 		return new GwtTestWrapper();
 	}
 }

File: gdx/src/com/badlogic/gdx/utils/TimSort.java
Patch:
@@ -83,7 +83,7 @@ class TimSort<T> {
 	private final int[] runBase;
 	private final int[] runLen;
 
-	/** Asserts have been placed in if-statements for performace. To enable them, set this field to true and enable them in VM with
+	/** Asserts have been placed in if-statements for performance. To enable them, set this field to true and enable them in VM with
 	 * a command line flag. If you modify this class, please do test the asserts! */
 	private static final boolean DEBUG = false;
 
@@ -263,7 +263,7 @@ private static <T> void binarySort (T[] a, int lo, int hi, int start, Comparator
 			/*
 			 * The invariants still hold: pivot >= all in [lo, left) and pivot < all in [left, start), so pivot belongs at left. Note
 			 * that if there are elements equal to pivot, left points to the first slot after them -- that's why this sort is stable.
-			 * Slide elements over to make room to make room for pivot.
+			 * Slide elements over to make room for pivot.
 			 */
 			int n = start - left; // The number of elements to move
 			// Switch is just an optimization for arraycopy in default case

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtInput.java
Patch:
@@ -167,7 +167,7 @@ public boolean isTouched (int pointer) {
 
 	@Override
 	public boolean isButtonPressed (int button) {
-		return button == Buttons.LEFT && touched[0];
+		return pressedButtons.contains(button) && touched[0];
 	}
 
 	@Override

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtInput.java
Patch:
@@ -167,7 +167,7 @@ public boolean isTouched (int pointer) {
 
 	@Override
 	public boolean isButtonPressed (int button) {
-		return button == Buttons.LEFT && touched[0];
+		return pressedButtons.contains(button) && touched[0];
 	}
 
 	@Override

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -389,7 +389,9 @@ public FreeTypeBitmapFontData generateData (FreeTypeFontParameter parameter, Fre
 
 			heightsCount--;
 			heights[best] = heights[heightsCount];
+			char tmpChar = characters[best];
 			characters[best] = characters[heightsCount];
+			characters[heightsCount] = tmpChar;
 		}
 
 		if (stroker != null && !incremental) stroker.dispose();

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -389,7 +389,9 @@ public FreeTypeBitmapFontData generateData (FreeTypeFontParameter parameter, Fre
 
 			heightsCount--;
 			heights[best] = heights[heightsCount];
+			char tmpChar = characters[best];
 			characters[best] = characters[heightsCount];
+			characters[heightsCount] = tmpChar;
 		}
 
 		if (stroker != null && !incremental) stroker.dispose();

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/BufferUtils.java
Patch:
@@ -368,7 +368,6 @@ public static void transform (Buffer data, int dimensions, int strideInBytes, in
 		int stride = strideInBytes / 4;
 		float[] m = matrix.val;
 		for (int i = 0; i < count; i++) {
-			idx += stride;
 			final float x = arr[idx    ];
 			final float y = arr[idx + 1];
 			final float z = dimensions >= 3 ? arr[idx + 2] : 0f;
@@ -380,6 +379,7 @@ public static void transform (Buffer data, int dimensions, int strideInBytes, in
 				if (dimensions >= 4)
 					arr[idx+3] = x * m[ 3] + y * m[ 7] + z * m[11] + w * m[15];
 			}
+			idx += stride;
 		}
 		buffer.put(arr);
 		buffer.position(pos);
@@ -401,14 +401,14 @@ public static void transform (Buffer data, int dimensions, int strideInBytes, in
 		int stride = strideInBytes / 4;
 		float[] m = matrix.val;
 		for (int i = 0; i < count; i++) {
-			idx += stride;
 			final float x = arr[idx    ];
 			final float y = arr[idx + 1];
 			final float z = dimensions >= 3 ? arr[idx + 2] : 1f;
 			arr[idx  ] = x * m[ 0] + y * m[ 3] + z * m[ 6]; 
 			arr[idx+1] = x * m[ 1] + y * m[ 4] + z * m[ 7];
 			if (dimensions >= 3)
 				arr[idx+2] = x * m[ 2] + y * m[ 5] + z * m[8];
+			idx += stride;
 		}
 		buffer.put(arr);
 		buffer.position(pos);

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/BufferUtils.java
Patch:
@@ -368,7 +368,6 @@ public static void transform (Buffer data, int dimensions, int strideInBytes, in
 		int stride = strideInBytes / 4;
 		float[] m = matrix.val;
 		for (int i = 0; i < count; i++) {
-			idx += stride;
 			final float x = arr[idx    ];
 			final float y = arr[idx + 1];
 			final float z = dimensions >= 3 ? arr[idx + 2] : 0f;
@@ -380,6 +379,7 @@ public static void transform (Buffer data, int dimensions, int strideInBytes, in
 				if (dimensions >= 4)
 					arr[idx+3] = x * m[ 3] + y * m[ 7] + z * m[11] + w * m[15];
 			}
+			idx += stride;
 		}
 		buffer.put(arr);
 		buffer.position(pos);
@@ -401,14 +401,14 @@ public static void transform (Buffer data, int dimensions, int strideInBytes, in
 		int stride = strideInBytes / 4;
 		float[] m = matrix.val;
 		for (int i = 0; i < count; i++) {
-			idx += stride;
 			final float x = arr[idx    ];
 			final float y = arr[idx + 1];
 			final float z = dimensions >= 3 ? arr[idx + 2] : 1f;
 			arr[idx  ] = x * m[ 0] + y * m[ 3] + z * m[ 6]; 
 			arr[idx+1] = x * m[ 1] + y * m[ 4] + z * m[ 7];
 			if (dimensions >= 3)
 				arr[idx+2] = x * m[ 2] + y * m[ 5] + z * m[8];
+			idx += stride;
 		}
 		buffer.put(arr);
 		buffer.position(pos);

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/gen/ReflectionCacheSourceCreator.java
Patch:
@@ -147,7 +147,7 @@ private void generateLookups () {
 			}
 		}
 
-		// gather all types from explicitely requested packages
+		// gather all types from explicitly requested packages
 		try {
 			ConfigurationProperty prop = context.getPropertyOracle().getConfigurationProperty("gdx.reflect.include");
 			for (String s : prop.getValues()) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/SimpleTest.java
Patch:
@@ -56,7 +56,7 @@ protected void createWorld (World world) {
 		// finally we add a fixture to the body using the polygon
 		// defined above. Note that we have to dispose PolygonShapes
 		// and CircleShapes once they are no longer used. This is the
-		// only time you have to care explicitely for memomry managment.
+		// only time you have to care explicitly for memomry managment.
 		groundBody.createFixture(groundPoly, 10);
 		groundPoly.dispose();
 

File: gdx/src/com/badlogic/gdx/input/GestureDetector.java
Patch:
@@ -322,7 +322,7 @@ public static interface GestureListener {
 		public boolean pinch (Vector2 initialPointer1, Vector2 initialPointer2, Vector2 pointer1, Vector2 pointer2);
 
 		/** Called when no longer pinching. */
-		public boolean pinchStop ();
+		public void pinchStop ();
 	}
 
 	/** Derrive from this if you only want to implement a subset of {@link GestureListener}.
@@ -369,8 +369,7 @@ public boolean pinch (Vector2 initialPointer1, Vector2 initialPointer2, Vector2
 		}
 
 		@Override
-		public boolean pinchStop () {
-			return false;
+		public void pinchStop () {
 		}
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTestCollection.java
Patch:
@@ -173,7 +173,6 @@ public boolean pinch (Vector2 initialFirstPointer, Vector2 initialSecondPointer,
 	}
 
 	@Override
-	public boolean pinchStop () {
-		return false;
+	public void pinchStop () {
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java
Patch:
@@ -208,7 +208,6 @@ public boolean pinch (Vector2 initialFirstPointer, Vector2 initialSecondPointer,
 	}
 
 	@Override
-	public boolean pinchStop () {
-		return false;
+	public void pinchStop () {
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GestureDetectorTest.java
Patch:
@@ -103,8 +103,7 @@ public void update () {
 		}
 
 		@Override
-		public boolean pinchStop () {
-			return false;
+		public void pinchStop () {
 		}
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletTest.java
Patch:
@@ -139,7 +139,6 @@ public boolean pinch (Vector2 initialPointer1, Vector2 initialPointer2, Vector2
 	}
 
 	@Override
-	public boolean pinchStop () {
-		return false;
+	public void pinchStop () {
 	}
 }

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -237,7 +237,7 @@ private void setupGL (javax.microedition.khronos.opengles.GL10 gl) {
 		extractVersion(gl);
 		if (config.useGL30 && AndroidGraphics.major > 2) {
 			if (gl30 != null) return;
-			gl30 = new AndroidGL30();
+			gl20 = gl30 = new AndroidGL30();
 
 			Gdx.gl = gl30;
 			Gdx.gl20 = gl30;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -256,7 +256,8 @@ protected void calculateOffsets () {
 			int maxIndex = Math.max(cursor, selectionStart);
 			float minX = Math.max(glyphPositions[minIndex], -renderOffset);
 			float maxX = Math.min(glyphPositions[maxIndex], visibleWidth - renderOffset);
-			selectionX = minX + textOffset;
+			selectionX = minX;
+			if (renderOffset == 0) selectionX += textOffset;
 			selectionWidth = maxX - minX - style.font.getData().cursorX;
 		}
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -256,7 +256,7 @@ protected void calculateOffsets () {
 			int maxIndex = Math.max(cursor, selectionStart);
 			float minX = Math.max(glyphPositions[minIndex], -renderOffset);
 			float maxX = Math.min(glyphPositions[maxIndex], visibleWidth - renderOffset);
-			selectionX = minX;
+			selectionX = minX + textOffset;
 			selectionWidth = maxX - minX - style.font.getData().cursorX;
 		}
 	}

File: gdx/src/com/badlogic/gdx/math/MathUtils.java
Patch:
@@ -50,6 +50,7 @@ public final class MathUtils {
 
 	static private class Sin {
 		static final float[] table = new float[SIN_COUNT];
+
 		static {
 			for (int i = 0; i < SIN_COUNT; i++)
 				table[i] = (float)Math.sin((i + 0.5f) / SIN_COUNT * radFull);
@@ -91,7 +92,7 @@ static public float atan2 (float y, float x) {
 		final float atan, z = y / x;
 		if (Math.abs(z) < 1f) {
 			atan = z / (1f + 0.28f * z * z);
-			if (x < 0f) return y < 0f ? atan - PI : atan + PI;
+			if (x < 0f) return atan + (y < 0f ? -PI : PI);
 			return atan;
 		}
 		atan = PI / 2 - z / (z * z + 0.28f);
@@ -247,7 +248,7 @@ static public double clamp (double value, double min, double max) {
 	static public float lerp (float fromValue, float toValue, float progress) {
 		return fromValue + (toValue - fromValue) * progress;
 	}
-	
+
 	/** Linearly interpolates between two angles in radians. Takes into account that angles wrap at two pi and always takes the
 	 * direction with the smallest delta angle.
 	 * 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -202,7 +202,6 @@ public boolean notify (Event event, boolean capture) {
 	 * occur on this Actor.
 	 * <p>
 	 * The default implementation returns this actor if the point is within this actor's bounds.
-	 * 
 	 * @param touchable If true, the hit detection will respect the {@link #setTouchable(Touchable) touchability}.
 	 * @see Touchable */
 	public Actor hit (float x, float y, boolean touchable) {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3ApplicationConfiguration.java
Patch:
@@ -240,7 +240,7 @@ public void setFullscreenMode(DisplayMode mode) {
 
 	/**
 	 * Sets whether to use vsync. This setting can be changed anytime at runtime
-	 * via {@link Graphics#setVsync(boolean)}.
+	 * via {@link Graphics#setVSync(boolean)}.
 	 */
 	public void useVsync(boolean vsync) {
 		this.vSyncEnabled = vsync;
@@ -347,6 +347,7 @@ public static Monitor getPrimaryMonitor() {
 	 * @return the conntected {@link Monitor}s
 	 */
 	public static Monitor[] getMonitors() {
+		Lwjgl3Application.initializeGlfw();
 		PointerBuffer glfwMonitors = GLFW.glfwGetMonitors();
 		Monitor[] monitors = new Monitor[glfwMonitors.limit()];
 		for (int i = 0; i < glfwMonitors.limit(); i++) {

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl3/Lwjgl3DebugStarter.java
Patch:
@@ -130,6 +130,9 @@ public boolean keyTyped (char character) {
 							Lwjgl3Window window = ((Lwjgl3Graphics)Gdx.graphics).getWindow();
 							window.deiconifyWindow();
 						}
+						if(character == 'u') {
+							Gdx.net.openURI("https://google.com");
+						}
 						return false;
 					}										
 				});

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Cursor.java
Patch:
@@ -108,7 +108,9 @@ static void setSystemCursor(long windowHandle, SystemCursor systemCursor) {
 				handle = GLFW.glfwCreateStandardCursor(GLFW.GLFW_HRESIZE_CURSOR);
 			} else if (systemCursor == SystemCursor.VerticalResize) {
 				handle = GLFW.glfwCreateStandardCursor(GLFW.GLFW_VRESIZE_CURSOR);
-			} else {
+			} else if (systemCursor == SystemCursor.Ibeam) {
+ 				handle = GLFW.glfwCreateStandardCursor(GLFW.GLFW_IBEAM_CURSOR);
+  			} else {
 				throw new GdxRuntimeException("Unknown system cursor " + systemCursor);
 			}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGraphics.java
Patch:
@@ -471,7 +471,7 @@ public void setCursor (Cursor cursor) {
 	
 	@Override
 	public void setSystemCursor (SystemCursor systemCursor) {
-		((GwtApplication)Gdx.app).graphics.canvas.getStyle().setProperty("cursor", "auto");
+		((GwtApplication)Gdx.app).graphics.canvas.getStyle().setProperty("cursor", GwtCursor.getNameForSystemCursor(systemCursor));
 	}
 	
 	static class GwtMonitor extends Monitor {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Cursor.java
Patch:
@@ -108,7 +108,9 @@ static void setSystemCursor(long windowHandle, SystemCursor systemCursor) {
 				handle = GLFW.glfwCreateStandardCursor(GLFW.GLFW_HRESIZE_CURSOR);
 			} else if (systemCursor == SystemCursor.VerticalResize) {
 				handle = GLFW.glfwCreateStandardCursor(GLFW.GLFW_VRESIZE_CURSOR);
-			} else {
+			} else if (systemCursor == SystemCursor.Ibeam) {
+ 				handle = GLFW.glfwCreateStandardCursor(GLFW.GLFW_IBEAM_CURSOR);
+  			} else {
 				throw new GdxRuntimeException("Unknown system cursor " + systemCursor);
 			}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGraphics.java
Patch:
@@ -471,7 +471,7 @@ public void setCursor (Cursor cursor) {
 	
 	@Override
 	public void setSystemCursor (SystemCursor systemCursor) {
-		((GwtApplication)Gdx.app).graphics.canvas.getStyle().setProperty("cursor", "auto");
+		((GwtApplication)Gdx.app).graphics.canvas.getStyle().setProperty("cursor", GwtCursor.getNameForSystemCursor(systemCursor));
 	}
 	
 	static class GwtMonitor extends Monitor {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Window.java
Patch:
@@ -87,7 +87,7 @@ public void run() {
 	
 	private final GLFWWindowCloseCallback closeCallback = new GLFWWindowCloseCallback() {
 		@Override
-		public void invoke(long windowHandle) {
+		public void invoke(final long windowHandle) {
 			postRunnable(new Runnable() {
 				@Override
 				public void run() {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Cursor.java
Patch:
@@ -34,7 +34,7 @@ public class Lwjgl3Cursor implements Cursor {
 	final Lwjgl3Window window;
 	Pixmap pixmapCopy;
 	GLFWImage glfwImage;
-	final long cursor;
+	final long glfwCursor;
 
 	Lwjgl3Cursor(Lwjgl3Window window, Pixmap pixmap, int xHotspot, int yHotspot) {
 		this.window = window;
@@ -69,7 +69,7 @@ public class Lwjgl3Cursor implements Cursor {
 		glfwImage.width(pixmapCopy.getWidth());
 		glfwImage.height(pixmapCopy.getHeight());
 		glfwImage.pixels(pixmapCopy.getPixels());
-		cursor = GLFW.glfwCreateCursor(glfwImage, xHotspot, yHotspot);
+		glfwCursor = GLFW.glfwCreateCursor(glfwImage, xHotspot, yHotspot);
 		cursors.add(this);
 	}
 
@@ -82,6 +82,7 @@ public void dispose() {
 		pixmapCopy.dispose();
 		pixmapCopy = null;
 		glfwImage.free();
+		GLFW.glfwDestroyCursor(glfwCursor);
 	}
 
 	static void disposeAll() {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Graphics.java
Patch:
@@ -386,7 +386,7 @@ public Cursor newCursor(Pixmap pixmap, int xHotspot, int yHotspot) {
 
 	@Override
 	public void setCursor(Cursor cursor) {
-		GLFW.glfwSetCursor(getWindow().getWindowHandle(), ((Lwjgl3Cursor) cursor).cursor);
+		GLFW.glfwSetCursor(getWindow().getWindowHandle(), ((Lwjgl3Cursor) cursor).glfwCursor);
 	}
 
 	@Override

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.DpiTest;
 import com.badlogic.gdx.tests.FullscreenTest;
 import com.badlogic.gdx.tests.InputTest;
 import com.badlogic.gdx.tests.LifeCycleTest;
@@ -36,7 +37,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new InputTest();		
+		GdxTest test = new DpiTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl/Lwjgl3DebugStarter.java
Patch:
@@ -37,6 +37,7 @@
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.tests.BulletTestCollection;
 import com.badlogic.gdx.tests.DeltaTimeTest;
+import com.badlogic.gdx.tests.DpiTest;
 import com.badlogic.gdx.tests.FullscreenTest;
 import com.badlogic.gdx.tests.LifeCycleTest;
 import com.badlogic.gdx.tests.MusicTest;
@@ -140,6 +141,6 @@ public void resize (int width, int height) {
 		for(DisplayMode mode: Lwjgl3ApplicationConfiguration.getDisplayModes()) {
 			System.out.println(mode.width + "x" + mode.height);
 		}
-		new Lwjgl3Application(test, config);
+		new Lwjgl3Application(new DpiTest(), config);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FullscreenTest.java
Patch:
@@ -75,7 +75,7 @@ public void render () {
 					}
 				}
 				
-				Gdx.graphics.setFullscreenMode(m);
+				Gdx.graphics.setFullscreenMode(Gdx.graphics.getDisplayMode());
 				batch.getProjectionMatrix().setToOrtho2D(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 				Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 				fullscreen = true;

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl/Lwjgl3DebugStarter.java
Patch:
@@ -80,7 +80,7 @@ public boolean keyTyped (char character) {
 						
 						if(character == 'f') {
 							DisplayMode[] modes = Gdx.graphics.getDisplayModes();
-							Gdx.graphics.setFullscreenMode(modes[MathUtils.random(0, modes.length-1)]);
+							Gdx.graphics.setFullscreenMode(Gdx.graphics.getDisplayMode());
 						}
 						if(character == 'w') {
 							Gdx.graphics.setWindowedMode(MathUtils.random(400, 800), MathUtils.random(400, 800));

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3GL20.java
Patch:
@@ -276,7 +276,7 @@ public void glDrawElements (int mode, int count, int type, Buffer indices) {
 		if (indices instanceof ShortBuffer && type == com.badlogic.gdx.graphics.GL20.GL_UNSIGNED_SHORT)
 			GL11.glDrawElements(mode, (ShortBuffer)indices);
 		else if (indices instanceof ByteBuffer && type == com.badlogic.gdx.graphics.GL20.GL_UNSIGNED_SHORT)
-			GL11.glDrawElements(mode, ((ByteBuffer)indices).asShortBuffer()); // FIXME yay...
+			GL11.glDrawElements(mode, ((ByteBuffer)indices).asShortBuffer());
 		else if (indices instanceof ByteBuffer && type == com.badlogic.gdx.graphics.GL20.GL_UNSIGNED_BYTE)
 			GL11.glDrawElements(mode, (ByteBuffer)indices);
 		else

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/ContactListenerTest.java
Patch:
@@ -189,7 +189,6 @@ public void beginContact (Contact contact) {
 			contact.getFixtureA().getBody() :
 			contact.getFixtureB().getBody();
 			Gdx.app.postRunnable(new Runnable() {
-				
 				@Override
 				public void run () {
 					world.destroyBody(toRemove);

File: backends/gdx-backend-headless/src/com/badlogic/gdx/backends/headless/mock/graphics/MockGraphics.java
Patch:
@@ -139,7 +139,7 @@ public boolean setFullscreenMode(DisplayMode displayMode) {
 	}
 
 	@Override
-	public boolean setWindowedMode(int width, int height, boolean fullscreen) {
+	public boolean setWindowedMode(int width, int height) {
 		return false;
 	}
 

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGraphics.java
Patch:
@@ -319,7 +319,8 @@ public boolean setFullscreenMode (DisplayMode displayMode) {
 		return success;
 	}
 
-	public boolean setWindowedMode (int width, int height, boolean fullscreen) {
+	public boolean setWindowedMode (int width, int height) {
+		boolean fullscreen = false;
 		if (fullscreen || this.fullscreen) {
 			boolean success = createWindow(width, height, fullscreen);
 			if (success && fullscreen) sizeChanged(width, height);

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -22,7 +22,7 @@ public class DependencyBank {
 
 	//Project plugins
 	static String gwtPluginImport = "de.richsource.gradle.plugins:gwt-gradle-plugin:0.6";
-	static String androidPluginImport = "com.android.tools.build:gradle:1.2.3";
+	static String androidPluginImport = "com.android.tools.build:gradle:1.5.0";
 	static String roboVMPluginImport = "org.robovm:robovm-gradle-plugin:" + roboVMVersion;
 	
 	//Extension versions

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Window.java
Patch:
@@ -75,10 +75,10 @@ public void update(Array<LifecycleListener> lifecycleListeners) {
 			}
 			runnables.clear();
 		}
-		graphics.update();
-		input.update();
+		graphics.update();		
 		listener.render();
 		glfwSwapBuffers(windowHandle);
+		input.update();
 		glfwPollEvents();
 	}
 	

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -215,12 +215,12 @@ public int getWidth () {
 	}
 	
 	@Override
-	public int getFrameBufferWidth () {
+	public int getBackBufferWidth () {
 		return width;
 	}
 
 	@Override
-	public int getFrameBufferHeight () {
+	public int getBackBufferHeight () {
 		return height;
 	}
 

File: backends/gdx-backend-headless/src/com/badlogic/gdx/backends/headless/mock/graphics/MockGraphics.java
Patch:
@@ -59,12 +59,12 @@ public int getHeight() {
 	}
 	
 	@Override
-	public int getFrameBufferWidth() {
+	public int getBackBufferWidth() {
 		return 0;
 	}
 
 	@Override
-	public int getFrameBufferHeight() {
+	public int getBackBufferHeight() {
 		return 0;
 	}
 

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGraphics.java
Patch:
@@ -197,12 +197,12 @@ public int getHeight () {
 	}
 	
 	@Override
-	public int getFrameBufferWidth () {
+	public int getBackBufferWidth () {
 		return width;
 	}
 
 	@Override
-	public int getFrameBufferHeight () {
+	public int getBackBufferHeight () {
 		return height;
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -97,12 +97,12 @@ public int getWidth () {
 	}
 	
 	@Override
-	public int getFrameBufferWidth () {
+	public int getBackBufferWidth () {
 		return getWidth();
 	}
 
 	@Override
-	public int getFrameBufferHeight () {
+	public int getBackBufferHeight () {
 		return getHeight();
 	}
 

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Graphics.java
Patch:
@@ -136,12 +136,12 @@ public int getHeight() {
 	}
 	
 	@Override
-	public int getFrameBufferWidth() {
+	public int getBackBufferWidth() {
 		return frameBufferWidth;
 	}
 
 	@Override
-	public int getFrameBufferHeight() {
+	public int getBackBufferHeight() {
 		return frameBufferHeight;
 	}
 	

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
Patch:
@@ -357,12 +357,12 @@ public int getHeight () {
 	}
 	
 	@Override
-	public int getFrameBufferWidth() {
+	public int getBackBufferWidth() {
 		return width;
 	}
 
 	@Override
-	public int getFrameBufferHeight() {
+	public int getBackBufferHeight() {
 		return height;
 	}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGraphics.java
Patch:
@@ -83,12 +83,12 @@ public int getHeight () {
 	}
 	
 	@Override
-	public int getFrameBufferWidth () {
+	public int getBackBufferWidth () {
 		return canvas.getWidth();
 	}
 
 	@Override
-	public int getFrameBufferHeight () {
+	public int getBackBufferHeight () {
 		return canvas.getHeight();
 	}
 

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -120,10 +120,10 @@ public String toString () {
 	public int getHeight ();
 
 	/** @return the width of the framebuffer in physical pixels */
-	public int getFrameBufferWidth ();
+	public int getBackBufferWidth ();
 	
 	/** @return the height of the framebuffer in physical pixels */
-	public int getFrameBufferHeight ();
+	public int getBackBufferHeight ();
 
 	/** Returns the id of the current frame. The general contract of this method is that the id is incremented only when the
 	 * application is in the running state right before calling the {@link ApplicationListener#render()} method. Also, the id of

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ScissorStack.java
Patch:
@@ -19,6 +19,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Camera;
 import com.badlogic.gdx.graphics.GL20;
+import com.badlogic.gdx.graphics.glutils.HdpiUtils;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Rectangle;
 import com.badlogic.gdx.math.Vector3;
@@ -64,7 +65,7 @@ public static boolean pushScissors (Rectangle scissor) {
 			scissor.height = Math.max(1, maxY - minY);
 		}
 		scissors.add(scissor);
-		Gdx.gl.glScissor((int)scissor.x, (int)scissor.y, (int)scissor.width, (int)scissor.height);
+		HdpiUtils.glScissor((int)scissor.x, (int)scissor.y, (int)scissor.width, (int)scissor.height);
 		return true;
 	}
 
@@ -78,7 +79,7 @@ public static Rectangle popScissors () {
 			Gdx.gl.glDisable(GL20.GL_SCISSOR_TEST);
 		else {
 			Rectangle scissor = scissors.peek();
-			Gdx.gl.glScissor((int)scissor.x, (int)scissor.y, (int)scissor.width, (int)scissor.height);
+			HdpiUtils.glScissor((int)scissor.x, (int)scissor.y, (int)scissor.width, (int)scissor.height);
 		}
 		return old;
 	}

File: gdx/src/com/badlogic/gdx/utils/viewport/Viewport.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
 import com.badlogic.gdx.graphics.Camera;
+import com.badlogic.gdx.graphics.glutils.HdpiUtils;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Rectangle;
 import com.badlogic.gdx.math.Vector2;
@@ -45,7 +46,7 @@ public void apply () {
 	/** Applies the viewport to the camera and sets the glViewport.
 	 * @param centerCamera If true, the camera position is set to the center of the world. */
 	public void apply (boolean centerCamera) {
-		Gdx.gl.glViewport(screenX, screenY, screenWidth, screenHeight);
+		HdpiUtils.glViewport(screenX, screenY, screenWidth, screenHeight);
 		camera.viewportWidth = worldWidth;
 		camera.viewportHeight = worldHeight;
 		if (centerCamera) camera.position.set(worldWidth / 2, worldHeight / 2, 0);

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -34,7 +34,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new SuperKoalio();		
+		GdxTest test = new UITest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl/Lwjgl3DebugStarter.java
Patch:
@@ -39,8 +39,10 @@ public class Lwjgl3DebugStarter {
 	public static void main (String[] argv) {	
 		GdxTest test = new UITest();
 		Lwjgl3ApplicationConfiguration config = new Lwjgl3ApplicationConfiguration();
+		config.width = 960;
+		config.height = 600;
 		config.vSyncEnabled = false;
-		config.useHDPI = false;
+		config.useHDPI = true;
 		new Lwjgl3Application(test, config);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FloatTextureTest.java
Patch:
@@ -108,7 +108,7 @@ public void create () {
 	}
 
 	public void render () {
-		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl20.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		fb.begin();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FrameBufferTest.java
Patch:
@@ -102,7 +102,7 @@ public void render () {
 		Gdx.gl20.glDisable(GL20.GL_STENCIL_TEST);
 		stencilFrameBuffer.end();
 
-		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl20.glClearColor(0.2f, 0.2f, 0.2f, 1);
 		Gdx.gl20.glClear(GL20.GL_COLOR_BUFFER_BIT);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FramebufferToTextureTest.java
Patch:
@@ -66,7 +66,7 @@ public void create () {
 
 	@Override
 	public void render () {
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl.glClearColor(clearColor.g, clearColor.g, clearColor.b, clearColor.a);
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 		Gdx.gl.glEnable(GL20.GL_DEPTH_TEST);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FullscreenTest.java
Patch:
@@ -61,7 +61,7 @@ public void render () {
 			if (fullscreen) {
 				Gdx.graphics.setDisplayMode(480, 320, false);
 				batch.getProjectionMatrix().setToOrtho2D(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-				Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+				Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 				fullscreen = false;
 			} else {
 				DisplayMode m = null;
@@ -77,7 +77,7 @@ public void render () {
 				
 				Gdx.graphics.setDisplayMode(m);
 				batch.getProjectionMatrix().setToOrtho2D(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-				Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+				Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 				fullscreen = true;
 			}
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/IndexBufferObjectShaderTest.java
Patch:
@@ -45,7 +45,7 @@ public void dispose () {
 	public void render () {
 // System.out.println( "render");
 
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		Gdx.gl.glEnable(GL20.GL_TEXTURE_2D);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MeshShaderTest.java
Patch:
@@ -65,7 +65,7 @@ public void render () {
 		angle += Gdx.graphics.getDeltaTime() * 45;
 		matrix.setToRotation(axis, angle);
 
-		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl20.glClearColor(0.2f, 0.2f, 0.2f, 1);
 		Gdx.gl20.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		Gdx.gl20.glEnable(GL20.GL_TEXTURE_2D);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ShaderMultitextureTest.java
Patch:
@@ -87,7 +87,7 @@ public void resume () {
 	}
 
 	public void render () {
-		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl20.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		Gdx.gl20.glActiveTexture(GL20.GL_TEXTURE0);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StageTest.java
Patch:
@@ -172,7 +172,7 @@ private void fillGroup (Group group, Texture texture) {
 
 	@Override
 	public void render () {
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VertexBufferObjectShaderTest.java
Patch:
@@ -44,7 +44,7 @@ public void dispose () {
 	@Override
 	public void render () {
 		GL20 gl = Gdx.gl20;
-		gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl.glClearColor(0.7f, 0, 0, 1);
 		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ViewportTest2.java
Patch:
@@ -26,6 +26,7 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
+import com.badlogic.gdx.graphics.glutils.HdpiUtils;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Scaling;
@@ -101,7 +102,7 @@ public void render () {
 			ScalingViewport scalingViewport = (ScalingViewport)viewport;
 			int screenWidth = Gdx.graphics.getWidth();
 			int screenHeight = Gdx.graphics.getHeight();
-			Gdx.gl.glViewport(0, 0, screenWidth, screenHeight);
+			HdpiUtils.glViewport(0, 0, screenWidth, screenHeight);
 			batch.getProjectionMatrix().idt().setToOrtho2D(0, 0, screenWidth, screenHeight);
 			batch.getTransformMatrix().idt();
 			batch.begin();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
Patch:
@@ -183,7 +183,7 @@ public void render (boolean update) {
 	}
 
 	protected void beginRender (boolean lighting) {
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl.glClearColor(0, 0, 0, 0);
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 		camera.update();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicBulletTest.java
Patch:
@@ -170,7 +170,7 @@ public void create () {
 
 	@Override
 	public void render () {
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 
 		fpsCounter.put(Gdx.graphics.getFramesPerSecond());

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Basic3DSceneTest.java
Patch:
@@ -104,7 +104,7 @@ public void render () {
 		if (loading && assets.update()) doneLoading();
 		camController.update();
 
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 
 		modelBatch.begin(cam);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Basic3DTest.java
Patch:
@@ -69,7 +69,7 @@ public void create () {
 	public void render () {
 		inputController.update();
 
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 
 		modelBatch.begin(cam);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/FogTest.java
Patch:
@@ -72,7 +72,7 @@ public void render () {
 
 		inputController.update();
 
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 
 		Gdx.gl.glClearColor(0.13f, 0.13f, 0.13f, 1);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/FrameBufferCubemapTest.java
Patch:
@@ -67,7 +67,7 @@ public void render () {
 	}
 	
 	public void renderScene() {
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl.glDisable(GL20.GL_SCISSOR_TEST);
 		
 		// Render scene to screen

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/MaterialTest.java
Patch:
@@ -95,7 +95,7 @@ public void render () {
 		counter = (counter + Gdx.graphics.getDeltaTime()) % 1.f;
 		blendingAttribute.opacity = 0.25f + Math.abs(0.5f - counter);
 
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 
 		modelInstance.transform.rotate(Vector3.Y, 30 * Gdx.graphics.getDeltaTime());

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderTest.java
Patch:
@@ -252,7 +252,7 @@ public void render () {
 
 		camController.update();
 
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 
 		modelBatch.begin(cam);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShadowMappingTest.java
Patch:
@@ -82,7 +82,7 @@ public void create () {
 	public void render () {
 		camController.update();
 
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl.glClearColor(0, 0, 0, 1);
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/TextureRegion3DTest.java
Patch:
@@ -78,7 +78,7 @@ public void render () {
 			Gdx.app.log("TextureRegion3DTest", "Current region = "+regions.get(index).name);
 		}
 
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 
 		modelBatch.begin(cam);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gles2/HelloTriangle.java
Patch:
@@ -44,7 +44,7 @@ public void create () {
 
 	@Override
 	public void render () {
-		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl20.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		shader.begin();
 		mesh.render(shader, GL20.GL_TRIANGLES);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gles2/MipMap2D.java
Patch:
@@ -81,7 +81,7 @@ public void resume () {
 	}
 
 	public void render () {
-		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl20.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		Gdx.gl20.glActiveTexture(GL20.GL_TEXTURE0);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gles2/SimpleVertexShader.java
Patch:
@@ -69,7 +69,7 @@ public void render () {
 		model.setToRotation(axis, angle);
 		combined.set(projection).mul(view).mul(model);
 
-		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl20.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 		Gdx.gl20.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		shader.begin();
 		shader.setUniformMatrix("u_mvpMatrix", combined);

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl/Lwjgl3DebugStarter.java
Patch:
@@ -39,9 +39,8 @@ public class Lwjgl3DebugStarter {
 	public static void main (String[] argv) {	
 		GdxTest test = new UITest();
 		Lwjgl3ApplicationConfiguration config = new Lwjgl3ApplicationConfiguration();
-		config.width = 900;
-		config.height = 600;
 		config.vSyncEnabled = false;
+		config.useHDPI = false;
 		new Lwjgl3Application(test, config);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FullscreenTest.java
Patch:
@@ -86,7 +86,7 @@ public void render () {
 	@Override
 	public void resize (int width, int height) {
 		Gdx.app.log("FullscreenTest", "resized: " + width + ", " + height);
-		Gdx.gl.glViewport(0, 0, width, height);
+		batch.getProjectionMatrix().setToOrtho2D(0, 0, width, height);
 	}
 
 	@Override

File: tests/gdx-tests-lwjgl3/src/com/badlogic/gdx/tests/lwjgl/Lwjgl3DebugStarter.java
Patch:
@@ -37,7 +37,7 @@
 
 public class Lwjgl3DebugStarter {
 	public static void main (String[] argv) {	
-		GdxTest test = new Animation3DTest();
+		GdxTest test = new LifeCycleTest();
 		Lwjgl3ApplicationConfiguration config = new Lwjgl3ApplicationConfiguration();
 		config.width = 900;
 		config.height = 600;

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Graphics.java
Patch:
@@ -6,7 +6,6 @@
 import org.lwjgl.BufferUtils;
 import org.lwjgl.glfw.GLFW;
 import org.lwjgl.glfw.GLFWFramebufferSizeCallback;
-import org.lwjgl.glfw.GLFWWindowRefreshCallback;
 
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.graphics.Cursor;
@@ -33,6 +32,9 @@ public class Lwjgl3Graphics implements Graphics {
 		@Override
 		public void invoke(long windowHandle, final int width, final int height) {
 			GLFW.glfwMakeContextCurrent(windowHandle);
+			if(!window.isListenerInitialized()) {
+				window.initializeListener();
+			}
 			window.getListener().resize(width, height);
 			window.getListener().render();
 			GLFW.glfwSwapBuffers(windowHandle);			

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -65,6 +65,7 @@ public class Lwjgl3Application implements Application {
 	private volatile boolean running = true;
 	private final Array<Runnable> runnables = new Array<Runnable>();
 	private final Array<LifecycleListener> lifecycleListeners = new Array<LifecycleListener>();
+	@SuppressWarnings("unused")
 	private GLFWErrorCallback errorCallback;
 
 	public Lwjgl3Application(ApplicationListener listener, Lwjgl3ApplicationConfiguration config) {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3ApplicationConfiguration.java
Patch:
@@ -82,8 +82,8 @@ public class Lwjgl3ApplicationConfiguration {
 	/** enable HDPI mode on Mac OS X **/
 	public boolean useHDPI = false;
 
-	Array<String> iconPaths = new Array();
-	Array<FileType> iconFileTypes = new Array();
+	Array<String> iconPaths = new Array<String>();
+	Array<FileType> iconFileTypes = new Array<FileType>();
 
 	/** Adds a window icon. Icons are tried in the order added, the first one that works is used. Typically three icons should be
 	 * provided: 128x128 (for Mac), 32x32 (for Windows and Linux), and 16x16 (for Windows). */
@@ -138,7 +138,6 @@ public static DisplayMode[] getDisplayModes () {
 		java.awt.DisplayMode desktopMode = device.getDisplayMode();
 		java.awt.DisplayMode[] displayModes = device.getDisplayModes();
 		ArrayList<DisplayMode> modes = new ArrayList<DisplayMode>();
-		int idx = 0;
 		for (java.awt.DisplayMode mode : displayModes) {
 			boolean duplicate = false;
 			for (int i = 0; i < modes.size(); i++) {

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Preferences.java
Patch:
@@ -33,7 +33,6 @@
 import com.badlogic.gdx.utils.StreamUtils;
 
 public class Lwjgl3Preferences implements Preferences {
-	private final String name;
 	private final Properties properties = new Properties();
 	private final FileHandle file;
 
@@ -42,7 +41,6 @@ public Lwjgl3Preferences (String name, String directory) {
 	}
 
 	public Lwjgl3Preferences (FileHandle file) {
-		this.name = file.name();
 		this.file = file;
 		if (!file.exists()) return;
 		InputStream in = null;

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Graphics.java
Patch:
@@ -30,7 +30,7 @@ public class Lwjgl3Graphics implements Graphics {
 	
 	private GLFWFramebufferSizeCallback resizeCallback = new GLFWFramebufferSizeCallback() {
 		@Override
-		public void invoke(long windowHandle, int width, int height) {
+		public void invoke(long windowHandle, final int width, final int height) {
 			window.postRunnable(new Runnable() {
 				@Override
 				public void run() {					

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/audio/OpenALAudio.java
Patch:
@@ -38,7 +38,6 @@
 import java.nio.FloatBuffer;
 
 import org.lwjgl.BufferUtils;
-import org.lwjgl.openal.AL;
 import org.lwjgl.openal.AL10;
 import org.lwjgl.openal.ALContext;
 import org.lwjgl.openal.ALDevice;

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Application.java
Patch:
@@ -108,6 +108,9 @@ private Lwjgl3Window createWindow(ApplicationListener listener) {
 	private void loop() {
 		while (running && windows.size > 0) {
 			Array<Lwjgl3Window> closedWindows = new Array<Lwjgl3Window>();
+			if(audio instanceof OpenALAudio) {
+				((OpenALAudio)audio).update();
+			}
 			for (Lwjgl3Window window : windows.values()) {
 				Gdx.graphics = window.getGraphics();
 				Gdx.gl = window.getGraphics().getGL30() != null ? window.getGraphics().getGL30()

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Graphics.java
Patch:
@@ -6,7 +6,6 @@
 import org.lwjgl.BufferUtils;
 import org.lwjgl.glfw.GLFW;
 import org.lwjgl.glfw.GLFWFramebufferSizeCallback;
-import org.lwjgl.opengl.GL11;
 
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.graphics.Cursor;

File: backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Window.java
Patch:
@@ -51,7 +51,7 @@ void windowHandleChanged(long windowHandle) {
 	
 	public void update(Array<LifecycleListener> lifecycleListeners) {
 		if(listenerInitialized == false) {
-			listener.create();
+			listener.create();			
 			listener.resize(graphics.getWidth(), graphics.getHeight());
 			listenerInitialized = true;
 		}

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,8 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.LifeCycleTest;
+import com.badlogic.gdx.tests.MusicTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeMetricsTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
@@ -30,7 +32,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new FreeTypeMetricsTest();		
+		GdxTest test = new MusicTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/HeightField.java
Patch:
@@ -365,7 +365,7 @@ public static float[] heightColorsToMap (final ByteBuffer data, final Pixmap.For
 
 		float[] dest = new float[width * height];
 		for (int i = 0; i < dest.length; ++i) {
-			int v = source[sourceOffset + i * 3];
+			int v = source[sourceOffset + i * bytesPerColor];
 			v = v < 0 ? 256 + v : v;
 			dest[i] = (float)v / 255f;
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/HeightField.java
Patch:
@@ -365,7 +365,7 @@ public static float[] heightColorsToMap (final ByteBuffer data, final Pixmap.For
 
 		float[] dest = new float[width * height];
 		for (int i = 0; i < dest.length; ++i) {
-			int v = source[sourceOffset + i * 3];
+			int v = source[sourceOffset + i * bytesPerColor];
 			v = v < 0 ? 256 + v : v;
 			dest[i] = (float)v / 255f;
 		}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -278,7 +278,7 @@ public void build (ProjectBuilder builder, String outputDir, String appName, Str
 			project.files.add(new ProjectFile("android/res/drawable-mdpi/ic_launcher.png", false));
 			project.files.add(new ProjectFile("android/res/drawable-xhdpi/ic_launcher.png", false));
 			project.files.add(new ProjectFile("android/res/drawable-xxhdpi/ic_launcher.png", false));
-			project.files.add(new ProjectFile("android/src/AndroidLauncher", "android/src/" + packageDir + "/android/AndroidLauncher.java", true));
+			project.files.add(new ProjectFile("android/src/AndroidLauncher", "android/src/" + packageDir + "/AndroidLauncher.java", true));
 			project.files.add(new ProjectFile("android/AndroidManifest.xml"));
 			project.files.add(new ProjectFile("android/build.gradle", true));
 			project.files.add(new ProjectFile("android/ic_launcher-web.png", false));

File: extensions/gdx-box2d/gdx-box2d-gwt/src/com/badlogic/gdx/physics/box2d/gwt/emu/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -153,9 +153,10 @@ public Body createBody (BodyDef def) {
 	public void destroyBody (Body body) {
 		JointEdge jointEdge = body.body.getJointList();
 		while (jointEdge != null) {
+			JointEdge next = jointEdge.next;			
 			world.destroyJoint(jointEdge.joint);
 			joints.remove(jointEdge.joint);
-			jointEdge = jointEdge.next;
+			jointEdge = next;
 		}
 		world.destroyBody(body.body);
 		bodies.remove(body.body);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PixmapPackerTest.java
Patch:
@@ -57,7 +57,7 @@ public void create () {
 		Pixmap pixmap2 = new Pixmap(Gdx.files.internal("data/particle-fire.png"));
 		Pixmap pixmap3 = new Pixmap(Gdx.files.internal("data/isotile.png"));
 
-		PixmapPacker packer = new PixmapPacker(1024, 1024, Format.RGBA8888, 2, false);
+		PixmapPacker packer = new PixmapPacker(1024, 1024, Format.RGBA8888, 8, false);
 		for (int count = 1; count <= 3; ++count) {
 			packer.pack("badlogic " + count, pixmap1);
 			packer.pack("fire " + count, pixmap2);

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -557,7 +557,7 @@ public void load (FileHandle fontFile, boolean flip) {
 					tokens.nextToken();
 					tokens.nextToken();
 					int ch = Integer.parseInt(tokens.nextToken());
-					if (ch == -1)
+					if (ch <= 0)
 						missingGlyph = glyph;
 					else if (ch <= Character.MAX_VALUE)
 						setGlyph(ch, glyph);

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/Kerning.java
Patch:
@@ -309,7 +309,6 @@ private int readXAdvanceFromValueRecord (int valueFormat) throws IOException {
 	}
 
 	private static class TTFInputStream extends ByteArrayInputStream {
-
 		public TTFInputStream (InputStream input) throws IOException {
 			super(readAllBytes(input));
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontTest.java
Patch:
@@ -132,7 +132,7 @@ public void render () {
 		}
 
 		// Test wrapping with label.
-		if (true) {
+		if (false) {
 			label.debug();
 			label.getStyle().font = font;
 			label.setStyle(label.getStyle());

File: gdx/src/com/badlogic/gdx/graphics/g2d/CpuSpriteBatch.java
Patch:
@@ -174,7 +174,7 @@ public void draw (Texture texture, float x, float y, int srcX, int srcY, int src
 		if (!adjustNeeded) {
 			super.draw(texture, x, y, srcX, srcY, srcWidth, srcHeight);
 		} else {
-			drawAdjusted(texture, x, y, 0, 0, texture.getWidth(), texture.getHeight(), 1, 1, 0, srcX, srcY, srcWidth, srcHeight,
+			drawAdjusted(texture, x, y, 0, 0, srcWidth, srcHeight, 1, 1, 0, srcX, srcY, srcWidth, srcHeight,
 				false, false);
 		}
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/CpuSpriteBatch.java
Patch:
@@ -174,7 +174,7 @@ public void draw (Texture texture, float x, float y, int srcX, int srcY, int src
 		if (!adjustNeeded) {
 			super.draw(texture, x, y, srcX, srcY, srcWidth, srcHeight);
 		} else {
-			drawAdjusted(texture, x, y, 0, 0, texture.getWidth(), texture.getHeight(), 1, 1, 0, srcX, srcY, srcWidth, srcHeight,
+			drawAdjusted(texture, x, y, 0, 0, srcWidth, srcHeight, 1, 1, 0, srcX, srcY, srcWidth, srcHeight,
 				false, false);
 		}
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/CpuSpriteBatch.java
Patch:
@@ -184,7 +184,7 @@ public void draw (Texture texture, float x, float y, float width, float height,
 		if (!adjustNeeded) {
 			super.draw(texture, x, y, width, height, u, v, u2, v2);
 		} else {
-			drawAdjustedUV(texture, x, y, 0, 0, texture.getWidth(), texture.getHeight(), 1, 1, 0, u, v, u2, v2, false, false);
+			drawAdjustedUV(texture, x, y, 0, 0, width, height, 1, 1, 0, u, v, u2, v2, false, false);
 		}
 	}
 

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -600,9 +600,9 @@ public Glyph getGlyph (char ch) {
 			return glyph;
 		}
 
-		public void getGlyphs (GlyphRun run, CharSequence str, int start, int end) {
+		public void getGlyphs (GlyphRun run, CharSequence str, int start, int end, boolean tightBounds) {
 			if (packer != null) packer.setPackToTexture(true); // All glyphs added after this are packed directly to the texture.
-			super.getGlyphs(run, str, start, end);
+			super.getGlyphs(run, str, start, end, tightBounds);
 			if (dirty) {
 				dirty = false;
 				packer.updateTextureRegions(regions, parameter.minFilter, parameter.magFilter, parameter.genMipMaps);

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -626,7 +626,7 @@ else if (ch <= Character.MAX_VALUE)
 					setGlyph(' ', spaceGlyph);
 				}
 				if (spaceGlyph.width == 0) {
-					spaceGlyph.width = (int)(spaceGlyph.xadvance + padRight);
+					spaceGlyph.width = (int)(padLeft + spaceGlyph.xadvance + padRight);
 					spaceGlyph.xoffset = (int)-padLeft;
 				}
 				spaceWidth = spaceGlyph.width;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -43,6 +43,7 @@
 import com.badlogic.gdx.tests.extensions.FreeTypeAtlasTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeDisposeTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeFontLoaderTest;
+import com.badlogic.gdx.tests.extensions.FreeTypeMetricsTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeIncrementalTest;
 import com.badlogic.gdx.tests.extensions.FreeTypePackTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeTest;
@@ -247,6 +248,7 @@ public class GdxTests {
 		YDownTest.class,
 		FreeTypeFontLoaderTest.class,
 		FreeTypeDisposeTest.class,
+		FreeTypeMetricsTest.class,
 		FreeTypeIncrementalTest.class,
 		FreeTypePackTest.class,
 		FreeTypeAtlasTest.class,

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -158,7 +158,7 @@ private OrderedMap<String, FieldMetadata> getFields (Class type) {
 		for (int i = classHierarchy.size - 1; i >= 0; i--)
 			Collections.addAll(allFields, ClassReflection.getDeclaredFields(classHierarchy.get(i)));
 
-		OrderedMap<String, FieldMetadata> nameToField = new OrderedMap();
+		OrderedMap<String, FieldMetadata> nameToField = new OrderedMap(allFields.size());
 		for (int i = 0, n = allFields.size(); i < n; i++) {
 			Field field = allFields.get(i);
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionJNI.java
Patch:
@@ -148,6 +148,9 @@ public class CollisionJNI {
   public final static native long btDbvtNode_data_get(long jarg1, btDbvtNode jarg1_);
   public final static native void btDbvtNode_dataAsInt_set(long jarg1, btDbvtNode jarg1_, int jarg2);
   public final static native int btDbvtNode_dataAsInt_get(long jarg1, btDbvtNode jarg1_);
+  public final static native long btDbvtNode_getChild(long jarg1, btDbvtNode jarg1_, int jarg2);
+  public final static native long btDbvtNode_getChild0(long jarg1, btDbvtNode jarg1_);
+  public final static native long btDbvtNode_getChild1(long jarg1, btDbvtNode jarg1_);
   public final static native long new_btDbvtNode();
   public final static native void delete_btDbvtNode(long jarg1);
   public final static native void btDbvt_sStkNN_a_set(long jarg1, btDbvt.sStkNN jarg1_, long jarg2, btDbvtNode jarg2_);

File: gdx/src/com/badlogic/gdx/utils/UBJsonReader.java
Patch:
@@ -119,6 +119,7 @@ protected JsonValue parseArray (final DataInputStream din) throws IOException {
 		long c = 0;
 		while (din.available() > 0 && type != ']') {
 			final JsonValue val = parse(din, type);
+			val.parent = result;
 			if (prev != null) {
 				val.prev = prev;
 				prev.next = val;
@@ -155,6 +156,7 @@ protected JsonValue parseObject (final DataInputStream din) throws IOException {
 			final String key = parseString(din, true, type);
 			final JsonValue child = parse(din, valueType == 0 ? din.readByte() : valueType);
 			child.setName(key);
+			child.parent = result;
 			if (prev != null) {
 				child.prev = prev;
 				prev.next = child;
@@ -179,6 +181,7 @@ protected JsonValue parseData (final DataInputStream din, final byte blockType)
 		JsonValue prev = null;
 		for (long i = 0; i < size; i++) {
 			final JsonValue val = parse(din, dataType);
+			val.parent = result;
 			if (prev != null) {
 				prev.next = val;
 				result.size++;

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -782,6 +782,7 @@ public int getMaxParticleCount () {
 	}
 
 	public boolean isComplete () {
+		if (continuous) return false;
 		if (delayTimer < delay) return false;
 		return durationTimer >= duration && activeCount == 0;
 	}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.ArrayList;
 
 import com.badlogic.gdx.Application;
+import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.Graphics.DisplayMode;
@@ -85,6 +86,8 @@ public class LwjglApplicationConfiguration {
 	public boolean allowSoftwareMode = false;
 	/** Preferences directory on the desktop. Default is ".prefs/". */
 	public String preferencesDirectory = ".prefs/";
+	/** Preferences file type on the desktop. Default is FileType.External */
+	public Files.FileType preferencesFileType = FileType.External;
 	/** Callback used when trying to create a display, can handle failures, default value is null (disabled) */
 	public LwjglGraphics.SetDisplayModeCallback setDisplayModeCallback;
 	/** enable HDPI mode on Mac OS X **/

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.ArrayList;
 
 import com.badlogic.gdx.Application;
+import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.Graphics.DisplayMode;
@@ -85,6 +86,8 @@ public class LwjglApplicationConfiguration {
 	public boolean allowSoftwareMode = false;
 	/** Preferences directory on the desktop. Default is ".prefs/". */
 	public String preferencesDirectory = ".prefs/";
+	/** Preferences file type on the desktop. Default is FileType.External */
+	public Files.FileType preferencesFileType = FileType.External;
 	/** Callback used when trying to create a display, can handle failures, default value is null (disabled) */
 	public LwjglGraphics.SetDisplayModeCallback setDisplayModeCallback;
 	/** enable HDPI mode on Mac OS X **/

File: gdx/src/com/badlogic/gdx/utils/SharedLibraryLoader.java
Patch:
@@ -166,9 +166,9 @@ public File extractFile (String sourcePath, String dirName) throws IOException {
 	/** Extracts the specified file into the temp directory if it does not already exist or the CRC does not match. If file
 	 * extraction fails and the file exists at java.library.path, that file is returned.
 	 * @param sourcePath The file to extract from the classpath or JAR.
-	 * @param extractedFile The location where the extracted file will be written. */
-	public void extractFileTo (String sourcePath, File extractedFile) throws IOException {
-		extractFile(sourcePath, crc(readFile(sourcePath)), extractedFile);
+	 * @param dir The location where the extracted file will be written. */
+	public void extractFileTo (String sourcePath, File dir) throws IOException {
+		extractFile(sourcePath, crc(readFile(sourcePath)), new File(dir, new File(sourcePath).getName()));
 	}
 
 	/** Returns a path to a file that can be written. Tries multiple locations and verifies writing succeeds.

File: gdx/src/com/badlogic/gdx/graphics/glutils/GLFrameBuffer.java
Patch:
@@ -183,7 +183,8 @@ private void build () {
 		int result = gl.glCheckFramebufferStatus(GL20.GL_FRAMEBUFFER);
 
 		if (result == GL20.GL_FRAMEBUFFER_UNSUPPORTED && hasDepth && hasStencil
-			&& Gdx.graphics.supportsExtension("GL_OES_packed_depth_stencil")) {
+			&& (Gdx.graphics.supportsExtension("GL_OES_packed_depth_stencil") ||
+				Gdx.graphics.supportsExtension("GL_EXT_packed_depth_stencil"))) {
 			if (hasDepth) {
 				gl.glDeleteRenderbuffer(depthbufferHandle);
 				depthbufferHandle = 0;

File: gdx/src/com/badlogic/gdx/graphics/glutils/GLFrameBuffer.java
Patch:
@@ -183,7 +183,8 @@ private void build () {
 		int result = gl.glCheckFramebufferStatus(GL20.GL_FRAMEBUFFER);
 
 		if (result == GL20.GL_FRAMEBUFFER_UNSUPPORTED && hasDepth && hasStencil
-			&& Gdx.graphics.supportsExtension("GL_OES_packed_depth_stencil")) {
+			&& (Gdx.graphics.supportsExtension("GL_OES_packed_depth_stencil") ||
+				Gdx.graphics.supportsExtension("GL_EXT_packed_depth_stencil"))) {
 			if (hasDepth) {
 				gl.glDeleteRenderbuffer(depthbufferHandle);
 				depthbufferHandle = 0;

File: gdx/src/com/badlogic/gdx/graphics/glutils/FrameBuffer.java
Patch:
@@ -59,8 +59,8 @@ public FrameBuffer (Pixmap.Format format, int width, int height, boolean hasDept
 
 	@Override
 	protected Texture createColorTexture () {
-		int glFormat = Gdx2DPixmap.toGlFormat(Pixmap.Format.toGdx2DPixmapFormat(format));
-		int glType = Gdx2DPixmap.toGlType(Pixmap.Format.toGdx2DPixmapFormat(format));
+		int glFormat = Pixmap.Format.toGlFormat(format);
+		int glType = Pixmap.Format.toGlType(format);
 		GLOnlyTextureData data = new GLOnlyTextureData(width, height, 0, glFormat, glFormat, glType);
 		Texture result = new Texture(data);
 		result.setFilter(TextureFilter.Linear, TextureFilter.Linear);

File: gdx/src/com/badlogic/gdx/graphics/glutils/FrameBufferCubemap.java
Patch:
@@ -90,8 +90,8 @@ public FrameBufferCubemap (Pixmap.Format format, int width, int height, boolean
 
 	@Override
 	protected Cubemap createColorTexture () {
-		int glFormat = Gdx2DPixmap.toGlFormat(Pixmap.Format.toGdx2DPixmapFormat(format));
-		int glType = Gdx2DPixmap.toGlType(Pixmap.Format.toGdx2DPixmapFormat(format));
+		int glFormat = Pixmap.Format.toGlFormat(format);
+		int glType = Pixmap.Format.toGlType(format);
 		GLOnlyTextureData data = new GLOnlyTextureData(width, height, 0, glFormat, glFormat, glType);
 		Cubemap result = new Cubemap(data, data, data, data, data, data);
 		result.setFilter(TextureFilter.Linear, TextureFilter.Linear);

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java
Patch:
@@ -254,7 +254,7 @@ public void character (char c) {
 				}, ui.settings.getGradleArgs());
 				log("Done!");
 				if (ui.settings.getGradleArgs().contains("eclipse") || ui.settings.getGradleArgs().contains("idea")) {
-					log("To import in Eclipse: File -> Import -> General -> Exisiting Projects into Workspace");
+					log("To import in Eclipse: File -> Import -> General -> Existing Projects into Workspace");
 					log("To import to Intellij IDEA: File -> Open -> YourProject.ipr");
 				} else {
 					log("To import in Eclipse: File -> Import -> Gradle -> Gradle Project");

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java
Patch:
@@ -254,7 +254,7 @@ public void character (char c) {
 				}, ui.settings.getGradleArgs());
 				log("Done!");
 				if (ui.settings.getGradleArgs().contains("eclipse") || ui.settings.getGradleArgs().contains("idea")) {
-					log("To import in Eclipse: File -> Import -> General -> Exisiting Projects into Workspace");
+					log("To import in Eclipse: File -> Import -> General -> Existing Projects into Workspace");
 					log("To import to Intellij IDEA: File -> Open -> YourProject.ipr");
 				} else {
 					log("To import in Eclipse: File -> Import -> Gradle -> Gradle Project");

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -822,6 +822,7 @@ public static final class TouchFocus implements Poolable {
 		public void reset () {
 			listenerActor = null;
 			listener = null;
+			target = null;
 		}
 	}
 }

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -323,6 +323,7 @@ public void build (ProjectBuilder builder, String outputDir, String appName, Str
 
 		Map<String, String> values = new HashMap<String, String>();
 		values.put("%APP_NAME%", appName);
+		values.put("%APP_NAME_ESCAPED%", appName.replace("'", "\\'"));
 		values.put("%PACKAGE%", packageName);
 		values.put("%PACKAGE_DIR%", packageDir);
 		values.put("%MAIN_CLASS%", mainClass);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -822,6 +822,7 @@ public static final class TouchFocus implements Poolable {
 		public void reset () {
 			listenerActor = null;
 			listener = null;
+			target = null;
 		}
 	}
 }

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/AllHitsRayResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/BT_BOX_BOX_TRANSFORM_CACHE.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/BT_QUANTIZED_BVH_NODE.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/BroadphaseNativeTypes.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestConvexResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestNotMeConvexResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestNotMeRayResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestRayResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/Collision.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionConstants.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionObjectWrapper.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactCallbackEvent.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactListener.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ConvexResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CustomCollisionDispatcher.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_BVH_DATA.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_BVH_DATA_ARRAY.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_BVH_TREE_NODE.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_BVH_TREE_NODE_ARRAY.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_CONTACT.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_PAIR.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_QUANTIZED_BVH_NODE_ARRAY.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GIM_TRIANGLE_CONTACT.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GdxCollisionObjectBridge.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalConvexResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalRayResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalShapeInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/PHY_ScalarType.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/RayResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_PHY_ScalarType.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_PHY_ScalarType {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_PHY_ScalarType(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_PHY_ScalarType(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btFace_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_btAlignedObjectArrayT_btFace_t {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btAlignedObjectArrayT_btFace_t(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btAlignedObjectArrayT_btFace_t(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btSimplePair_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_btAlignedObjectArrayT_btSimplePair_t {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btAlignedObjectArrayT_btSimplePair_t(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btAlignedObjectArrayT_btSimplePair_t(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_btAlignedObjectArrayT_int_t {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btAlignedObjectArrayT_int_t(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btAlignedObjectArrayT_int_t(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btSerializer.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_btSerializer {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btSerializer(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btSerializer(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_p_q_const__btCollisionShape_p_q_const__btCollisionShape__bool.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_f_p_q_const__btCollisionShape_p_q_const__btCollisionShape__bool {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_f_p_q_const__btCollisionShape_p_q_const__btCollisionShape__bool(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_f_p_q_const__btCollisionShape_p_q_const__btCollisionShape__bool(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_float.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_float {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_float(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_float(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_int.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_int {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_int(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_int(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btCollisionObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_p_btCollisionObject {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_p_btCollisionObject(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_p_btCollisionObject(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btDbvtNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_p_btDbvtNode {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_p_btDbvtNode(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_p_btDbvtNode(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btDbvtProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_p_btDbvtProxy {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_p_btDbvtProxy(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_p_btDbvtProxy(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btGenericMemoryPool.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_p_btGenericMemoryPool {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_p_btGenericMemoryPool(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_p_btGenericMemoryPool(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btPersistentManifold.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_p_btPersistentManifold {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_p_btPersistentManifold(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_p_btPersistentManifold(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btVector3.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_p_btVector3 {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_p_btVector3(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_p_btVector3(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_unsigned_char.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_p_unsigned_char {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_p_unsigned_char(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_p_unsigned_char(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_size_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_size_t {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_size_t(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_size_t(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_unsigned_int.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.collision;
 
 public class SWIGTYPE_p_unsigned_int {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_unsigned_int(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_unsigned_int(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SphereTriangleDetector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/bt32BitAxisSweep3.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAABB.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btActivatingCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3InternalInt.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3InternalShort.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBU_Simplex1to4.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBox2dBox2dCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBox2dShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxBoxCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxBoxDetector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseAabbCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePair.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairSortPredicate.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseRayCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhSubtreeInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhSubtreeInfoData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhTree.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeX.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeZ.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCharIndexTripletData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithmConstructionInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithmCreateFunc.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionDispatcher.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectConstArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectWrapper.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionWorld.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundCompoundCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeChild.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeChildData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConcaveShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeX.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeZ.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConstraintRow.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContactArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContactManifoldTypes.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContinuousConvexCollision.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvex2dConvex2dAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvex2dShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexCast.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexConcaveCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexConvexAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexHullShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexHullShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalAabbCachingShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPenetrationDepthSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPlaneCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPointCloudShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPolyhedron.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexTriangleCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeX.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeZ.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvt.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtAabbMm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtBroadphase.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDefaultCollisionConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDefaultCollisionConstructionInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDiscreteCollisionDetectorInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDispatcher.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDispatcherInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btElement.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btEmptyAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btEmptyShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btFace.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactBvh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactCompoundShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactMeshShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactMeshShapePart.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactQuantizedBvh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGImpactShapeInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGenericMemoryPool.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGenericPoolAllocator.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGhostObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGhostPairCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkConvexCast.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkEpaPenetrationDepthSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkEpaSolver2.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkPairDetector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHashedOverlappingPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHashedSimplePairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHeightfieldTerrainShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIndexedMesh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIntIndexData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btInternalEdgeAdjustFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btInternalTriangleIndexCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btManifoldPoint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btManifoldResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMaterial.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMaterialProperties.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMeshPartData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMinkowskiPenetrationDepthSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMinkowskiSumShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSapBroadphase.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSphereShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSphereShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultimaterialTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btNodeOverlapCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btNullPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNodeDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNodeFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlapCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlapFilterCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlappingPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlappingPairCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPairCachingGhostObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPairSet.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPersistentManifold.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPersistentManifoldArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPointCollector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralContactClipping.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralConvexAabbCachingShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralConvexShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPositionAndRadius.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPrimitiveManagerBase.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPrimitiveTriangle.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhNodeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhTree.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btScaledBvhTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btScaledTriangleMeshShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShapeHull.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShortIntIndexData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShortIntIndexTripletData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimpleBroadphase.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimpleBroadphaseProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimplePair.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimulationIslandManager.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSortedOverlappingPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereBoxCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereSphereCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereTriangleCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStaticPlaneShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStaticPlaneShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStorageResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStridingMeshInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStridingMeshInterfaceData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSubSimplexClosestResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSubsimplexConvexCast.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTetrahedronShapeEx.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangle.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleBuffer.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleConvexcastCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleIndexVertexArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleIndexVertexMaterialArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoMap.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoMapData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMesh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMeshShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleRaycastCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleShapeEx.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUniformScalingShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUnionFind.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUsageBitfield.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btVoronoiSimplexSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/eBT_PLANE_INTERSECTION_TYPE.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/eGIMPACT_SHAPE_TYPE.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/Dynamics.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/DynamicsConstants.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/DynamicsJNI.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -1931,8 +1931,8 @@ public class DynamicsJNI {
   public final static native long btRaycastVehicle_SWIGUpcast(long jarg1);
   public final static native long btDefaultVehicleRaycaster_SWIGUpcast(long jarg1);
 
-  public static void SwigDirector_InternalTickCallback_onInternalTick(InternalTickCallback self, long dynamicsWorld, float timeStep) {
-    self.onInternalTick((dynamicsWorld == 0) ? null : new btDynamicsWorld(dynamicsWorld, false), timeStep);
+  public static void SwigDirector_InternalTickCallback_onInternalTick(InternalTickCallback jself, long dynamicsWorld, float timeStep) {
+    jself.onInternalTick((dynamicsWorld == 0) ? null : new btDynamicsWorld(dynamicsWorld, false), timeStep);
   }
 
   private final static native void swig_module_init();

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/InternalTickCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/RotateOrder.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.dynamics;
 
 public class SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.dynamics;
 
 public class SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btMatrix3x3DoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.dynamics;
 
 public class SWIGTYPE_p_btMatrix3x3DoubleData {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btMatrix3x3DoubleData(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btMatrix3x3DoubleData(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btMatrix3x3FloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.dynamics;
 
 public class SWIGTYPE_p_btMatrix3x3FloatData {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btMatrix3x3FloatData(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btMatrix3x3FloatData(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btSerializer.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.dynamics;
 
 public class SWIGTYPE_p_btSerializer {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_btSerializer(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_btSerializer(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_f_p_btDynamicsWorld_float__void.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.dynamics;
 
 public class SWIGTYPE_p_f_p_btDynamicsWorld_float__void {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_f_p_btDynamicsWorld_float__void(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_f_p_btDynamicsWorld_float__void(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.dynamics;
 
 public class SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_float.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.dynamics;
 
 public class SWIGTYPE_p_float {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_float(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_float(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_int.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.dynamics;
 
 public class SWIGTYPE_p_int {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_int(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_int(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btCollisionObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.dynamics;
 
 public class SWIGTYPE_p_p_btCollisionObject {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_p_btCollisionObject(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_p_btCollisionObject(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btPersistentManifold.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.dynamics;
 
 public class SWIGTYPE_p_p_btPersistentManifold {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_p_btPersistentManifold(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_p_btPersistentManifold(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btTypedConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -9,9 +9,9 @@
 package com.badlogic.gdx.physics.bullet.dynamics;
 
 public class SWIGTYPE_p_p_btTypedConstraint {
-  private long swigCPtr;
+  private transient long swigCPtr;
 
-  protected SWIGTYPE_p_p_btTypedConstraint(long cPtr, boolean futureUse) {
+  protected SWIGTYPE_p_p_btTypedConstraint(long cPtr, @SuppressWarnings("unused") boolean futureUse) {
     swigCPtr = cPtr;
   }
 

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/bt6DofFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/bt6DofFlags2.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btActionInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btAngularLimit.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btCharacterControllerInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraintData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraintDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintParams.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSetting.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSolverType.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDefaultVehicleRaycaster.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDiscreteDynamicsWorld.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorld.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldType.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btFixedConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.2
+ * Version 3.0.7
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/system/FirstPassBaseShadowSystem.java
Patch:
@@ -53,7 +53,7 @@ protected void beginPass1 () {
 
 	@Override
 	protected void endPass (int n) {
-		super.beginPass(n);
+		super.endPass(n);
 		if (n == FIRST_PASS) endPass1();
 	};
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/GLFrameBuffer.java
Patch:
@@ -238,7 +238,7 @@ public void dispose () {
 		disposeColorTexture(colorTexture);
 
 		if (hasDepthStencilPackedBuffer) {
-			gl.glDeleteBuffer(depthStencilPackedBufferHandle);
+			gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle);
 		} else {
 			if (hasDepth) gl.glDeleteRenderbuffer(depthbufferHandle);
 			if (hasStencil) gl.glDeleteRenderbuffer(stencilbufferHandle);

File: gdx/src/com/badlogic/gdx/graphics/glutils/GLFrameBuffer.java
Patch:
@@ -238,7 +238,7 @@ public void dispose () {
 		disposeColorTexture(colorTexture);
 
 		if (hasDepthStencilPackedBuffer) {
-			gl.glDeleteBuffer(depthStencilPackedBufferHandle);
+			gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle);
 		} else {
 			if (hasDepth) gl.glDeleteRenderbuffer(depthbufferHandle);
 			if (hasStencil) gl.glDeleteRenderbuffer(stencilbufferHandle);

File: gdx/src/com/badlogic/gdx/graphics/g2d/Batch.java
Patch:
@@ -39,7 +39,7 @@
  * <p>
  * A Batch is a pretty heavy object so you should only ever have one in your program.
  * <p>
- * A Batch works with OpenGL ES 1.x and 2.0. In the case of a 2.0 context it will use its own custom shader to draw all provided
+ * A Batch works with OpenGL ES 2.0. It will use its own custom shader to draw all provided
  * sprites. You can set your own custom shader via {@link #setShader(ShaderProgram)}.
  * <p>
  * A Batch has to be disposed if it is no longer used.
@@ -178,8 +178,8 @@ public void draw (TextureRegion region, float x, float y, float originX, float o
 	public void enableBlending ();
 
 	/** Sets the blending function to be used when rendering sprites.
-	 * @param srcFunc the source function, e.g. GL11.GL_SRC_ALPHA. If set to -1, Batch won't change the blending function.
-	 * @param dstFunc the destination function, e.g. GL11.GL_ONE_MINUS_SRC_ALPHA */
+	 * @param srcFunc the source function, e.g. GL20.GL_SRC_ALPHA. If set to -1, Batch won't change the blending function.
+	 * @param dstFunc the destination function, e.g. GL20.GL_ONE_MINUS_SRC_ALPHA */
 	public void setBlendFunction (int srcFunc, int dstFunc);
 
 	public int getBlendSrcFunc ();

File: gdx/src/com/badlogic/gdx/graphics/g2d/Batch.java
Patch:
@@ -39,7 +39,7 @@
  * <p>
  * A Batch is a pretty heavy object so you should only ever have one in your program.
  * <p>
- * A Batch works with OpenGL ES 1.x and 2.0. In the case of a 2.0 context it will use its own custom shader to draw all provided
+ * A Batch works with OpenGL ES 2.0. In the case of a 2.0 context it will use its own custom shader to draw all provided
  * sprites. You can set your own custom shader via {@link #setShader(ShaderProgram)}.
  * <p>
  * A Batch has to be disposed if it is no longer used.
@@ -178,8 +178,8 @@ public void draw (TextureRegion region, float x, float y, float originX, float o
 	public void enableBlending ();
 
 	/** Sets the blending function to be used when rendering sprites.
-	 * @param srcFunc the source function, e.g. GL11.GL_SRC_ALPHA. If set to -1, Batch won't change the blending function.
-	 * @param dstFunc the destination function, e.g. GL11.GL_ONE_MINUS_SRC_ALPHA */
+	 * @param srcFunc the source function, e.g. GL20.GL_SRC_ALPHA. If set to -1, Batch won't change the blending function.
+	 * @param dstFunc the destination function, e.g. GL20.GL_ONE_MINUS_SRC_ALPHA */
 	public void setBlendFunction (int srcFunc, int dstFunc);
 
 	public int getBlendSrcFunc ();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/utils/AABBNearFarAnalyzer.java
Patch:
@@ -68,15 +68,15 @@ public void analyze (BaseLight light, Camera camera) {
 		computeResult(bb1, camera);
 	}
 
-	/** Initialize camera before computation
+	/** Initialize camera before computation.
 	 * @param camera Camera to compute. */
 	protected void prepareCamera (Camera camera) {
 		camera.near = AABBNearFarAnalyzer.CAMERA_NEAR;
 		camera.far = AABBNearFarAnalyzer.CAMERA_FAR;
 		camera.update();
 	}
 
-	/** Compute final result
+	/** Compute final result.
 	 * @param bb BoundingBox encompassing instances
 	 * @param camera Camera to compute */
 	protected void computeResult (BoundingBox bb, Camera camera) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/utils/AllLightFilter.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.graphics.Camera;
 import com.badlogic.gdx.graphics.g3d.environment.BaseLight;
 
-/** This Filter do not block lights. All lights are allowed.
+/** This Filter does not block lights. All lights are allowed.
  * @author realitix */
 public class AllLightFilter implements LightFilter {
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/utils/BoundingSphereDirectionalAnalyzer.java
Patch:
@@ -69,7 +69,7 @@ public Camera analyze (DirectionalLight light, Camera out) {
 		// Compute up vector
 		out.up.set(light.direction.y, light.direction.z, light.direction.x);
 
-		// Copute viewport (orthographic camera)
+		// Compute viewport (orthographic camera)
 		out.viewportWidth = sphere.radius;
 		out.viewportHeight = sphere.radius;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/utils/FrustumLightFilter.java
Patch:
@@ -21,7 +21,7 @@
 import com.badlogic.gdx.math.Frustum;
 import com.badlogic.gdx.math.collision.BoundingBox;
 
-/** This Filter allows lights that are in camera frustum
+/** This Filter allows lights that are in camera frustum.
  * @author realitix */
 public class FrustumLightFilter implements LightFilter {
 

File: extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/Body.java
Patch:
@@ -705,7 +705,7 @@ public void setAwake (boolean flag) {
 	*/
 
 	/** Get the sleeping state of this body.
-	 * @return true if the body is sleeping. */
+	 * @return true if the body is not sleeping. */
 	public boolean isAwake () {
 		return jniIsAwake(addr);
 	}

File: extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/Body.java
Patch:
@@ -705,7 +705,7 @@ public void setAwake (boolean flag) {
 	*/
 
 	/** Get the sleeping state of this body.
-	 * @return true if the body is sleeping. */
+	 * @return true if the body is not sleeping. */
 	public boolean isAwake () {
 		return jniIsAwake(addr);
 	}

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/SwingLwjglTest.java
Patch:
@@ -90,7 +90,7 @@ public void render () {
 
 		private void createWindow () {
 			JFrame window = new JFrame();
-			LwjglAWTCanvas canvas = new LwjglAWTCanvas(new AnimationTest(), canvas1);
+			LwjglAWTCanvas canvas = new LwjglAWTCanvas(new UITest(), canvas1);
 			window.getContentPane().add(canvas.getCanvas(), BorderLayout.CENTER);
 			window.pack();
 			window.setVisible(true);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTCanvas.java
Patch:
@@ -211,6 +211,7 @@ void setGlobals () {
 	void create () {
 		try {
 			setGlobals();
+			graphics.setupDisplay();
 			graphics.initiateGLInstances();
 			listener.create();
 			lastWidth = Math.max(1, graphics.getWidth());

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTCanvas.java
Patch:
@@ -211,7 +211,7 @@ void setGlobals () {
 	void create () {
 		try {
 			setGlobals();
-			graphics.initiateGLInstances();
+			graphics.initiateGL();
 			listener.create();
 			lastWidth = Math.max(1, graphics.getWidth());
 			lastHeight = Math.max(1, graphics.getHeight());

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTCanvas.java
Patch:
@@ -211,7 +211,7 @@ void setGlobals () {
 	void create () {
 		try {
 			setGlobals();
-			graphics.initiateGLInstances();
+			graphics.initiateGL();
 			listener.create();
 			lastWidth = Math.max(1, graphics.getWidth());
 			lastHeight = Math.max(1, graphics.getHeight());

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidZipFileHandle.java
Patch:
@@ -84,7 +84,7 @@ public FileHandle child(String name) {
 	public FileHandle sibling(String name) {
 		if (file.getPath().length() == 0)
 			throw new GdxRuntimeException("Cannot get the sibling of the root.");
-		return new AndroidZipFileHandle(new File(file.getParent(), name), type);
+		return Gdx.files.getFileHandle(new File(file.getParent(), name).getPath(), type); //this way we can find the sibling even if it's not inside the obb
 	}
 
 	@Override

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidZipFileHandle.java
Patch:
@@ -84,7 +84,7 @@ public FileHandle child(String name) {
 	public FileHandle sibling(String name) {
 		if (file.getPath().length() == 0)
 			throw new GdxRuntimeException("Cannot get the sibling of the root.");
-		return new AndroidZipFileHandle(new File(file.getParent(), name), type);
+		return Gdx.files.getFileHandle(new File(file.getParent(), name).getPath(), type); //this way we can find the sibling even if it's not inside the obb
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/utils/AABBNearFarAnalyzer.java
Patch:
@@ -68,15 +68,15 @@ public void analyze (BaseLight light, Camera camera) {
 		computeResult(bb1, camera);
 	}
 
-	/** Initialize camera before computation
+	/** Initialize camera before computation.
 	 * @param camera Camera to compute. */
 	protected void prepareCamera (Camera camera) {
 		camera.near = AABBNearFarAnalyzer.CAMERA_NEAR;
 		camera.far = AABBNearFarAnalyzer.CAMERA_FAR;
 		camera.update();
 	}
 
-	/** Compute final result
+	/** Compute final result.
 	 * @param bb BoundingBox encompassing instances
 	 * @param camera Camera to compute */
 	protected void computeResult (BoundingBox bb, Camera camera) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/utils/AllLightFilter.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.graphics.Camera;
 import com.badlogic.gdx.graphics.g3d.environment.BaseLight;
 
-/** This Filter do not block lights. All lights are allowed.
+/** This Filter does not block lights. All lights are allowed.
  * @author realitix */
 public class AllLightFilter implements LightFilter {
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/utils/BoundingSphereDirectionalAnalyzer.java
Patch:
@@ -69,7 +69,7 @@ public Camera analyze (DirectionalLight light, Camera out) {
 		// Compute up vector
 		out.up.set(light.direction.y, light.direction.z, light.direction.x);
 
-		// Copute viewport (orthographic camera)
+		// Compute viewport (orthographic camera)
 		out.viewportWidth = sphere.radius;
 		out.viewportHeight = sphere.radius;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/shadows/utils/FrustumLightFilter.java
Patch:
@@ -21,7 +21,7 @@
 import com.badlogic.gdx.math.Frustum;
 import com.badlogic.gdx.math.collision.BoundingBox;
 
-/** This Filter allows lights that are in camera frustum
+/** This Filter allows lights that are in camera frustum.
  * @author realitix */
 public class FrustumLightFilter implements LightFilter {
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -28,6 +28,7 @@
 import android.hardware.SensorEvent;
 import android.hardware.SensorEventListener;
 import android.hardware.SensorManager;
+import android.os.Build;
 import android.os.Handler;
 import android.os.Vibrator;
 import android.service.wallpaper.WallpaperService.Engine;
@@ -717,7 +718,8 @@ public boolean isPeripheralAvailable (Peripheral peripheral) {
 		if (peripheral == Peripheral.Compass) return compassAvailable;
 		if (peripheral == Peripheral.HardwareKeyboard) return keyboardAvailable;
 		if (peripheral == Peripheral.OnscreenKeyboard) return true;
-		if (peripheral == Peripheral.Vibrator) return vibrator != null;
+		if (peripheral == Peripheral.Vibrator)
+			return (Build.VERSION.SDK_INT >= 11 && vibrator != null) ? vibrator.hasVibrator() : vibrator != null;
 		if (peripheral == Peripheral.MultitouchScreen) return hasMultitouch;
 		return false;
 	}

File: gdx/src/com/badlogic/gdx/math/CumulativeDistribution.java
Patch:
@@ -88,7 +88,7 @@ else if(probability > value.frequency)
 			else break;
 		}
 
-		return value.value;
+		return values.items[imin].value;
 	}
 
 	/** @return the value whose interval contains a random probability in [0,1] */

File: gdx/src/com/badlogic/gdx/graphics/g3d/loader/ObjLoader.java
Patch:
@@ -177,7 +177,7 @@ protected ModelData loadModelData (FileHandle file, boolean flipV) {
 					if (tokens.length == 1)
 						activeGroup.materialName = "default";
 					else
-						activeGroup.materialName = tokens[1];
+						activeGroup.materialName = tokens[1].replace('.', '_');
 				}
 			}
 			reader.close();

File: gdx/src/com/badlogic/gdx/graphics/g3d/loader/ObjLoader.java
Patch:
@@ -177,7 +177,7 @@ protected ModelData loadModelData (FileHandle file, boolean flipV) {
 					if (tokens.length == 1)
 						activeGroup.materialName = "default";
 					else
-						activeGroup.materialName = tokens[1];
+						activeGroup.materialName = tokens[1].replace('.', '_');
 				}
 			}
 			reader.close();

File: gdx/src/com/badlogic/gdx/assets/AssetLoadingTask.java
Patch:
@@ -98,10 +98,10 @@ private void handleSyncLoader () {
 			dependenciesLoaded = true;
 			dependencies = syncLoader.getDependencies(assetDesc.fileName, resolve(loader, assetDesc), assetDesc.params);
 			if (dependencies == null) {
-				removeDuplicates(dependencies);
 				asset = syncLoader.load(manager, assetDesc.fileName, resolve(loader, assetDesc), assetDesc.params);
 				return;
 			}
+			removeDuplicates(dependencies);
 			manager.injectDependencies(assetDesc.fileName, dependencies);
 		} else {
 			asset = syncLoader.load(manager, assetDesc.fileName, resolve(loader, assetDesc), assetDesc.params);

File: gdx/src/com/badlogic/gdx/audio/Sound.java
Patch:
@@ -35,7 +35,7 @@
  * </p>
  * 
  * <p>
- * <b>Note<b>: any values provided will not be clamped, it is the developer's responsibility to do so
+ * <b>Note</b>: any values provided will not be clamped, it is the developer's responsibility to do so
  * </p>
  * 
  * @author badlogicgames@gmail.com */

File: gdx/src/com/badlogic/gdx/audio/Sound.java
Patch:
@@ -35,7 +35,7 @@
  * </p>
  * 
  * <p>
- * <b>Note<b>: any values provided will not be clamped, it is the developer's responsibility to do so
+ * <b>Note</b>: any values provided will not be clamped, it is the developer's responsibility to do so
  * </p>
  * 
  * @author badlogicgames@gmail.com */

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -28,6 +28,7 @@
 import android.hardware.SensorEvent;
 import android.hardware.SensorEventListener;
 import android.hardware.SensorManager;
+import android.os.Build;
 import android.os.Handler;
 import android.os.Vibrator;
 import android.service.wallpaper.WallpaperService.Engine;
@@ -712,7 +713,8 @@ public boolean isPeripheralAvailable (Peripheral peripheral) {
 		if (peripheral == Peripheral.Compass) return compassAvailable;
 		if (peripheral == Peripheral.HardwareKeyboard) return keyboardAvailable;
 		if (peripheral == Peripheral.OnscreenKeyboard) return true;
-		if (peripheral == Peripheral.Vibrator) return vibrator != null;
+		if (peripheral == Peripheral.Vibrator)
+			return (Build.VERSION.SDK_INT >= 11 && vibrator != null) ? vibrator.hasVibrator() : vibrator != null;
 		if (peripheral == Peripheral.MultitouchScreen) return hasMultitouch;
 		return false;
 	}

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/gen/ReflectionCacheSourceCreator.java
Patch:
@@ -673,7 +673,7 @@ private String getElementTypes (JField f) {
 			b.append("new Class[] {");
 			for (JClassType typeArg : typeArgs) {
 				if (typeArg.isWildcard() != null)
-					b.append("Object.class");
+					b.append("null");
 				else if (!isVisible(typeArg))
 					b.append("null");
 				else if (typeArg.isClassOrInterface() != null)

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -933,6 +933,8 @@ public boolean keyTyped (InputEvent event, char character) {
 
 			Stage stage = getStage();
 			if (stage == null || stage.getKeyboardFocus() != TextField.this) return false;
+			
+			if (UIUtils.isMac && Gdx.input.isKeyPressed(Keys.SYM)) return true;
 
 			if ((character == TAB || character == ENTER_ANDROID) && focusTraversal) {
 				next(UIUtils.shift());

File: gdx/src/com/badlogic/gdx/math/CumulativeDistribution.java
Patch:
@@ -88,7 +88,7 @@ else if(probability > value.frequency)
 			else break;
 		}
 
-		return value.value;
+		return values.items[imin].value;
 	}
 
 	/** @return the value whose interval contains a random probability in [0,1] */

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCursor.java
Patch:
@@ -80,7 +80,7 @@ public LwjglCursor (Pixmap pixmap, int xHotspot, int yHotspot) {
 			}
 
 			lwjglCursor = new org.lwjgl.input.Cursor(pixmap.getWidth(), pixmap.getHeight(), xHotspot, pixmap.getHeight() - yHotspot
-				- 4, 1, IntBuffer.wrap(pixelsARGBflipped), null);
+				- 1, 1, IntBuffer.wrap(pixelsARGBflipped), null);
 		} catch (LWJGLException e) {
 			throw new GdxRuntimeException("Could not create cursor image.", e);
 		}

File: gdx/src/com/badlogic/gdx/graphics/glutils/GLFrameBuffer.java
Patch:
@@ -171,10 +171,11 @@ private void build () {
 
 		gl.glBindRenderbuffer(GL20.GL_RENDERBUFFER, 0);
 		gl.glBindTexture(GL20.GL_TEXTURE_2D, 0);
-		gl.glBindFramebuffer(GL20.GL_FRAMEBUFFER, defaultFramebufferHandle);
 
 		int result = gl.glCheckFramebufferStatus(GL20.GL_FRAMEBUFFER);
 
+		gl.glBindFramebuffer(GL20.GL_FRAMEBUFFER, defaultFramebufferHandle);
+
 		if (result != GL20.GL_FRAMEBUFFER_COMPLETE) {
 			disposeColorTexture(colorTexture);
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/GLFrameBuffer.java
Patch:
@@ -171,10 +171,11 @@ private void build () {
 
 		gl.glBindRenderbuffer(GL20.GL_RENDERBUFFER, 0);
 		gl.glBindTexture(GL20.GL_TEXTURE_2D, 0);
-		gl.glBindFramebuffer(GL20.GL_FRAMEBUFFER, defaultFramebufferHandle);
 
 		int result = gl.glCheckFramebufferStatus(GL20.GL_FRAMEBUFFER);
 
+		gl.glBindFramebuffer(GL20.GL_FRAMEBUFFER, defaultFramebufferHandle);
+
 		if (result != GL20.GL_FRAMEBUFFER_COMPLETE) {
 			disposeColorTexture(colorTexture);
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -933,6 +933,8 @@ public boolean keyTyped (InputEvent event, char character) {
 
 			Stage stage = getStage();
 			if (stage == null || stage.getKeyboardFocus() != TextField.this) return false;
+			
+			if (UIUtils.isMac && Gdx.input.isKeyPressed(Keys.SYM)) return true;
 
 			if ((character == TAB || character == ENTER_ANDROID) && focusTraversal) {
 				next(UIUtils.shift());

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -477,7 +477,9 @@ public boolean onKey (View v, int keyCode, android.view.KeyEvent e) {
 			char character = (char)e.getUnicodeChar();
 			// Android doesn't report a unicode char for back space. hrm...
 			if (keyCode == 67) character = '\b';
-			if (e.getKeyCode() >= SUPPORTED_KEYS) return false;
+			if (e.getKeyCode() < 0 || e.getKeyCode() >= SUPPORTED_KEYS) {
+				return false;
+			}
 			
 			switch (e.getAction()) {
 			case android.view.KeyEvent.ACTION_DOWN:

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -477,7 +477,9 @@ public boolean onKey (View v, int keyCode, android.view.KeyEvent e) {
 			char character = (char)e.getUnicodeChar();
 			// Android doesn't report a unicode char for back space. hrm...
 			if (keyCode == 67) character = '\b';
-			if (e.getKeyCode() >= SUPPORTED_KEYS) return false;
+			if (e.getKeyCode() < 0 || e.getKeyCode() >= SUPPORTED_KEYS) {
+				return false;
+			}
 			
 			switch (e.getAction()) {
 			case android.view.KeyEvent.ACTION_DOWN:

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
Patch:
@@ -428,7 +428,7 @@ public void processRunnables () {
 
 	@Override
 	public void exit () {
-		NSThread.getMainThread().exit();
+		NSThread.exit();
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -95,7 +95,7 @@ public boolean touchDown (InputEvent event, float x, float y, int pointer, int b
 					int border = resizeBorder;
 					float width = getWidth(), height = getHeight();
 					edge = 0;
-					if (isResizable) {
+					if (isResizable && x >= 0 && x < width && y >= 0 && y < height) {
 						if (x < border) edge |= Align.left;
 						if (x > width - border) edge |= Align.right;
 						if (y < border) edge |= Align.bottom;

File: gdx/src/com/badlogic/gdx/graphics/Color.java
Patch:
@@ -27,7 +27,7 @@ public class Color {
 	public static final Color BLACK = new Color(0, 0, 0, 1);
 
 	public static final Color WHITE = new Color(0xffffffff);
-	public static final Color LIGHT_GRAY = new Color(0x696969ff);
+	public static final Color LIGHT_GRAY = new Color(0xbfbfbfff);
 	public static final Color GRAY = new Color(0x7f7f7fff);
 	public static final Color DARK_GRAY = new Color(0x3f3f3fff);
 	public static final Color SLATE = new Color(0x708090ff);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -271,7 +271,7 @@ public void setMinSplitAmount (float minAmount) {
 	}
 
 	public void setMaxSplitAmount (float maxAmount) {
-		if (maxAmount > 1) throw new GdxRuntimeException("maxAmount has to be >= 0");
+		if (maxAmount > 1) throw new GdxRuntimeException("maxAmount has to be <= 1");
 		if (maxAmount <= minAmount) throw new GdxRuntimeException("maxAmount has to be > minAmount");
 		this.maxAmount = maxAmount;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -271,7 +271,7 @@ public void setMinSplitAmount (float minAmount) {
 	}
 
 	public void setMaxSplitAmount (float maxAmount) {
-		if (maxAmount > 1) throw new GdxRuntimeException("maxAmount has to be >= 0");
+		if (maxAmount > 1) throw new GdxRuntimeException("maxAmount has to be <= 1");
 		if (maxAmount <= minAmount) throw new GdxRuntimeException("maxAmount has to be > minAmount");
 		this.maxAmount = maxAmount;
 	}

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
Patch:
@@ -391,7 +391,8 @@ public Preferences getPreferences (String name) {
 		File libraryPath = new File(System.getenv("HOME"), "Library");
 		File finalPath = new File(libraryPath, name + ".plist");
 
-		@SuppressWarnings("unchecked") NSMutableDictionary<NSString, NSObject> nsDictionary = (NSMutableDictionary<NSString, NSObject>)NSMutableDictionary
+		@SuppressWarnings("unchecked")
+		NSMutableDictionary<NSString, NSObject> nsDictionary = (NSMutableDictionary<NSString, NSObject>)NSMutableDictionary
 			.read(finalPath);
 
 		// if it fails to get an existing dictionary, create a new one.

File: gdx/src/com/badlogic/gdx/graphics/g3d/particles/ParticleControllerComponent.java
Patch:
@@ -21,8 +21,7 @@ public abstract class ParticleControllerComponent implements Disposable, Json.Se
 		 TMP_V4 = new Vector3(), 
 		 TMP_V5 = new Vector3(),
 		 TMP_V6 = new Vector3();
-	protected static final Quaternion 	TMP_Q = new Quaternion(),
-													TMP_Q2 = new Quaternion();
+	protected static final Quaternion TMP_Q = new Quaternion(), TMP_Q2 = new Quaternion();
 	protected static final Matrix3 TMP_M3 = new Matrix3();
 	protected static final Matrix4 TMP_M4 = new Matrix4();
 	protected ParticleController controller;

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -176,7 +176,8 @@ public enum ApplicationType {
 	public void postRunnable (Runnable runnable);
 
 	/** Schedule an exit from the application. On android, this will cause a call to pause() and dispose() some time in the future,
-	 * it will not immediately finish your application. */
+	 * it will not immediately finish your application.
+	 * On iOS this should be avoided in production as it breaks Apples guidelines*/
 	public void exit ();
 
 	/** Adds a new {@link LifecycleListener} to the application. This can be used by extensions to hook into the lifecycle more

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -130,6 +130,7 @@ public class GdxTests {
 		ControllersTest.class,
 		Gdx2DTest.class,
 		GestureDetectorTest.class,
+		GLProfilerErrorTest.class,
 		GroupCullingTest.class,
 		GroupFadeTest.class,
 		GroupTest.class,

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/io/BufferedReader.java
Patch:
@@ -22,7 +22,7 @@ public BufferedReader (Reader in, int bufferSize) {
 	}
 
 	public BufferedReader (Reader in) {
-		this(in, 32);
+		this(in, 8192);
 	}
 
 	private void fill () throws IOException {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -430,6 +430,8 @@ void paste (String content, boolean fireChangeEvent) {
 		if (content == null) return;
 		StringBuilder buffer = new StringBuilder();
 		int textLength = text.length();
+		if (hasSelection)
+			textLength -= Math.abs(cursor - selectionStart);
 		BitmapFontData data = style.font.getData();
 		for (int i = 0, n = content.length(); i < n; i++) {
 			if (!withinMaxLength(textLength + buffer.length())) break;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -430,6 +430,8 @@ void paste (String content, boolean fireChangeEvent) {
 		if (content == null) return;
 		StringBuilder buffer = new StringBuilder();
 		int textLength = text.length();
+		if (hasSelection)
+			textLength -= Math.abs(cursor - selectionStart);
 		BitmapFontData data = style.font.getData();
 		for (int i = 0, n = content.length(); i < n; i++) {
 			if (!withinMaxLength(textLength + buffer.length())) break;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ProgressBar.java
Patch:
@@ -134,7 +134,7 @@ public void draw (Batch batch, float parentAlpha) {
 			if (bg != null) {
 				bg.draw(batch, x + (int)((width - bg.getMinWidth()) * 0.5f), y, bg.getMinWidth(), height);
 				bgTopHeight = bg.getTopHeight();
-				positionHeight -= -(bgTopHeight + bg.getBottomHeight());
+				positionHeight -= bgTopHeight + bg.getBottomHeight();
 			}
 
 			float knobHeightHalf = 0;

File: gdx/src/com/badlogic/gdx/graphics/g3d/particles/ParticleControllerComponent.java
Patch:
@@ -21,8 +21,7 @@ public abstract class ParticleControllerComponent implements Disposable, Json.Se
 		 TMP_V4 = new Vector3(), 
 		 TMP_V5 = new Vector3(),
 		 TMP_V6 = new Vector3();
-	protected static final Quaternion 	TMP_Q = new Quaternion(),
-													TMP_Q2 = new Quaternion();
+	protected static final Quaternion TMP_Q = new Quaternion(), TMP_Q2 = new Quaternion();
 	protected static final Matrix3 TMP_M3 = new Matrix3();
 	protected static final Matrix4 TMP_M4 = new Matrix4();
 	protected ParticleController controller;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTestWrapper.java
Patch:
@@ -59,7 +59,7 @@
 import com.badlogic.gdx.tests.EdgeDetectionTest;
 import com.badlogic.gdx.tests.FilterPerformanceTest;
 import com.badlogic.gdx.tests.FrameBufferTest;
-import com.badlogic.gdx.tests.GLDebuggerTest;
+import com.badlogic.gdx.tests.GLProfilerErrorTest;
 import com.badlogic.gdx.tests.GestureDetectorTest;
 import com.badlogic.gdx.tests.GroupCullingTest;
 import com.badlogic.gdx.tests.GroupFadeTest;
@@ -520,7 +520,7 @@ public GdxTest instance () {
 			}
 		}, new Instancer() {
 			public GdxTest instance () {
-				return new GLDebuggerTest();
+				return new GLProfilerErrorTest();
 			}
 		}, new Instancer() {
 			public GdxTest instance () {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -130,7 +130,7 @@ public class GdxTests {
 		ControllersTest.class,
 		Gdx2DTest.class,
 		GestureDetectorTest.class,
-		GLDebuggerTest.class,
+		GLProfilerErrorTest.class,
 		GroupCullingTest.class,
 		GroupFadeTest.class,
 		GroupTest.class,

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -1056,13 +1056,13 @@ public static void splitTriangle (float[] triangle, Plane plane, SplitTriangle s
 
 		// set number of triangles
 		split.total = 3;
-		split.numFront = (r1 ? 1 : 0) + (r2 ? 1 : 0) + (r3 ? 1 : 0);
+		split.numFront = (r1 ? 0 : 1) + (r2 ? 0 : 1) + (r3 ? 0 : 1);
 		split.numBack = split.total - split.numFront;
 
 		// hard case, split the three edges on the plane
 		// determine which array to fill first, front or back, flip if we
 		// cross the plane
-		split.setSide(r1);
+		split.setSide(!r1);
 
 		// split first edge
 		int first = 0;

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -1056,13 +1056,13 @@ public static void splitTriangle (float[] triangle, Plane plane, SplitTriangle s
 
 		// set number of triangles
 		split.total = 3;
-		split.numFront = (r1 ? 1 : 0) + (r2 ? 1 : 0) + (r3 ? 1 : 0);
+		split.numFront = (r1 ? 0 : 1) + (r2 ? 0 : 1) + (r3 ? 0 : 1);
 		split.numBack = split.total - split.numFront;
 
 		// hard case, split the three edges on the plane
 		// determine which array to fill first, front or back, flip if we
 		// cross the plane
-		split.setSide(r1);
+		split.setSide(!r1);
 
 		// split first edge
 		int first = 0;

File: gdx/src/com/badlogic/gdx/math/Circle.java
Patch:
@@ -167,10 +167,11 @@ public boolean contains (Vector2 point) {
 	/** @param c the other {@link Circle}
 	 * @return whether this circle contains the other circle. */
 	public boolean contains (Circle c) {
+		final float radiusDiff = radius - c.radius;
+		if (radiusDiff < 0f) return false; // Can't contain bigger circle
 		final float dx = x - c.x;
 		final float dy = y - c.y;
 		final float dst = dx * dx + dy * dy;
-		final float radiusDiff = radius - c.radius;
 		final float radiusSum = radius + c.radius;
 		return (!(radiusDiff * radiusDiff < dst) && (dst < radiusSum * radiusSum));
 	}

File: gdx/src/com/badlogic/gdx/math/Circle.java
Patch:
@@ -167,10 +167,11 @@ public boolean contains (Vector2 point) {
 	/** @param c the other {@link Circle}
 	 * @return whether this circle contains the other circle. */
 	public boolean contains (Circle c) {
+		final float radiusDiff = radius - c.radius;
+		if (radiusDiff < 0f) return false; // Can't contain bigger circle
 		final float dx = x - c.x;
 		final float dy = y - c.y;
 		final float dst = dx * dx + dy * dy;
-		final float radiusDiff = radius - c.radius;
 		final float radiusSum = radius + c.radius;
 		return (!(radiusDiff * radiusDiff < dst) && (dst < radiusSum * radiusSum));
 	}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidPreferences.java
Patch:
@@ -21,6 +21,7 @@
 
 import android.content.SharedPreferences;
 import android.content.SharedPreferences.Editor;
+import android.os.Build;
 
 import com.badlogic.gdx.Preferences;
 

File: gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java
Patch:
@@ -217,9 +217,9 @@ protected void loadObject (TiledMap map, MapLayer layer, Element element) {
 					TextureMapObject textureMapObject = new TextureMapObject(textureRegion);
 					textureMapObject.getProperties().put("gid", id);
 					textureMapObject.setX(x);
-					textureMapObject.setY(flipY ? y - height : y);
-					textureMapObject.setScaleX(scaleX);
-					textureMapObject.setScaleY(scaleY);
+					textureMapObject.setY(flipY ? y : y - height);
+					textureMapObject.setScaleX(scaleX * (element.getFloatAttribute("width", textureRegion.getRegionWidth()) / textureRegion.getRegionWidth()));
+					textureMapObject.setScaleY(scaleY * (element.getFloatAttribute("height", textureRegion.getRegionHeight()) / textureRegion.getRegionHeight()));
 					textureMapObject.setRotation(element.getFloatAttribute("rotation", 0));
 					object = textureMapObject;
 				} else {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -130,6 +130,7 @@ public class GdxTests {
 		ControllersTest.class,
 		Gdx2DTest.class,
 		GestureDetectorTest.class,
+		GLDebuggerTest.class,
 		GroupCullingTest.class,
 		GroupFadeTest.class,
 		GroupTest.class,

File: extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/joints/WheelJoint.java
Patch:
@@ -52,7 +52,7 @@ public Vector2 getLocalAnchorA () {
 	*/
 
 	public Vector2 getLocalAnchorB () {
-		jniGetLocalAnchorA(addr, tmp);
+		jniGetLocalAnchorB(addr, tmp);
 		localAnchorB.set(tmp[0], tmp[1]);
 		return localAnchorB;
 	}
@@ -64,7 +64,7 @@ public Vector2 getLocalAnchorB () {
 	*/
 
 	public Vector2 getLocalAxisA(){
-		jniGetLocalAnchorA(addr, tmp);
+		jniGetLocalAxisA(addr, tmp);
 		localAxisA.set(tmp[0], tmp[1]);
 		return localAxisA;
 	}
@@ -202,4 +202,4 @@ public float getSpringDampingRatio () {
 		return joint->GetSpringDampingRatio();
 	*/
 
-}
\ No newline at end of file
+}

File: extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/Body.java
Patch:
@@ -694,7 +694,7 @@ public boolean isSleepingAllowed () {
 	*/
 
 	/** Set the sleep state of the body. A sleeping body has very low CPU cost.
-	 * @param flag set to true to put body to sleep, false to wake it. */
+	 * @param flag set to true to wake the body, false to put it to sleep. */
 	public void setAwake (boolean flag) {
 		jniSetAwake(addr, flag);
 	}

File: gdx/src/com/badlogic/gdx/utils/Timer.java
Patch:
@@ -240,7 +240,9 @@ public void resume () {
 				}
 			}
 			app = Gdx.app;
-			new Thread(this, "Timer").start();
+			Thread t = new Thread(this, "Timer");
+			t.setDaemon(true);
+			t.start();
 			thread = this;
 		}
 

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -817,14 +817,14 @@ public <T> T readValue (String name, Class<T> type, Class elementType, JsonValue
 	 * @return May be null. */
 	public <T> T readValue (String name, Class<T> type, Class elementType, T defaultValue, JsonValue jsonMap) {
 		JsonValue jsonValue = jsonMap.get(name);
-		if (jsonValue == null) return defaultValue;
-		return (T)readValue(type, elementType, jsonValue);
+		return (T)readValue(type, elementType, defaultValue, jsonValue);
 	}
 
 	/** @param type May be null if the type is unknown.
 	 * @param elementType May be null if the type is unknown.
 	 * @return May be null. */
 	public <T> T readValue (Class<T> type, Class elementType, T defaultValue, JsonValue jsonData) {
+ 		if (jsonData == null) return defaultValue;
 		return (T)readValue(type, elementType, jsonData);
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -321,12 +321,12 @@ public void setFixedWidthGlyphs (CharSequence glyphs) {
 		int maxAdvance = 0;
 		for (int index = 0, end = glyphs.length(); index < end; index++) {
 			Glyph g = data.getGlyph(glyphs.charAt(index));
-			if (g != null && g.xadvance > maxAdvance) maxAdvance = g.xadvance - g.xoffset;
+			if (g != null && g.xadvance > maxAdvance) maxAdvance = g.xadvance;
 		}
 		for (int index = 0, end = glyphs.length(); index < end; index++) {
 			Glyph g = data.getGlyph(glyphs.charAt(index));
 			if (g == null) continue;
-			g.xoffset += (maxAdvance - g.xadvance) / 2;
+			g.xoffset += Math.round((maxAdvance - g.xadvance) / 2);
 			g.xadvance = maxAdvance;
 			g.kerning = null;
 		}

File: gdx/src/com/badlogic/gdx/math/Quaternion.java
Patch:
@@ -501,7 +501,7 @@ public Quaternion setFromAxes (boolean normalizeAxes, float xx, float xy, float
 			xx *= lx;
 			xy *= lx;
 			xz *= lx;
-			yz *= ly;
+			yx *= ly;
 			yy *= ly;
 			yz *= ly;
 			zx *= lz;

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -817,14 +817,14 @@ public <T> T readValue (String name, Class<T> type, Class elementType, JsonValue
 	 * @return May be null. */
 	public <T> T readValue (String name, Class<T> type, Class elementType, T defaultValue, JsonValue jsonMap) {
 		JsonValue jsonValue = jsonMap.get(name);
-		if (jsonValue == null) return defaultValue;
-		return (T)readValue(type, elementType, jsonValue);
+		return (T)readValue(type, elementType, defaultValue, jsonValue);
 	}
 
 	/** @param type May be null if the type is unknown.
 	 * @param elementType May be null if the type is unknown.
 	 * @return May be null. */
 	public <T> T readValue (Class<T> type, Class elementType, T defaultValue, JsonValue jsonData) {
+ 		if (jsonData == null) return defaultValue;
 		return (T)readValue(type, elementType, jsonData);
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -577,6 +577,7 @@ public String getText () {
 	 * @return True if the text was changed. */
 	boolean changeText (String oldText, String newText) {
 		if (newText.equals(oldText)) return false;
+		text = newText;
 		ChangeEvent changeEvent = Pools.obtain(ChangeEvent.class);
 		boolean cancelled = fire(changeEvent);
 		text = cancelled ? oldText : newText;

File: gdx/src/com/badlogic/gdx/graphics/g3d/environment/DirectionalLight.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.math.Vector3;
 
-public class DirectionalLight extends BaseLight {
+public class DirectionalLight extends BaseLight<DirectionalLight> {
 	public final Vector3 direction = new Vector3();
 
 	public DirectionalLight setDirection(float directionX, float directionY, float directionZ) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -321,7 +321,7 @@ public void setFixedWidthGlyphs (CharSequence glyphs) {
 		int maxAdvance = 0;
 		for (int index = 0, end = glyphs.length(); index < end; index++) {
 			Glyph g = data.getGlyph(glyphs.charAt(index));
-			if (g != null && g.xadvance > maxAdvance) maxAdvance = g.xadvance;
+			if (g != null && g.xadvance > maxAdvance) maxAdvance = g.xadvance - g.xoffset;
 		}
 		for (int index = 0, end = glyphs.length(); index < end; index++) {
 			Glyph g = data.getGlyph(glyphs.charAt(index));

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -665,15 +665,15 @@ public static class FreeTypeFontParameter {
 		/** true for straight (mitered), false for rounded borders */
 		public boolean borderStraight = false;
 		/** Number of times to render the glyph on top of the border, otherwise the border can show through the glyph. */
-		public int borderGlyphCount = 3;
+		public int borderGlyphCount = 2;
 		/** Offset of text shadow on X axis in pixels, 0 to disable */
 		public int shadowOffsetX = 0;
 		/** Offset of text shadow on Y axis in pixels, 0 to disable */
 		public int shadowOffsetY = 0;
 		/** Shadow color; only used if shadowOffset > 0 */
 		public Color shadowColor = new Color(0, 0, 0, 0.75f);
 		/** Number of times to render the glyph on top of the shadow, otherwise the shadow can show through the glyph. */
-		public int shadowGlyphCount = 3;
+		public int shadowGlyphCount = 2;
 		/** The characters the font should contain */
 		public String characters = DEFAULT_CHARS;
 		/** Whether the font should include kerning */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -99,8 +99,7 @@ public class TextField extends Widget implements Disableable {
 	private StringBuilder passwordBuffer;
 	private char passwordCharacter = BULLET;
 
-	private float fontOffset;
-	protected float textHeight, textOffset;
+	protected float fontOffset, textHeight, textOffset;
 	float renderOffset;
 	private int visibleTextStart, visibleTextEnd;
 	private int maxLength = 0;

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -441,6 +441,9 @@ static public class BitmapFontData {
 		public float down;
 		public float scaleX = 1, scaleY = 1;
 		public boolean markupEnabled;
+		/** The amount to add to the glyph X position when drawing a cursor between glyphs. This field is not set by the BMFont file,
+		 * it needs to be set manually depending on how the glyphs are rendered on the backing textures. */
+		public float cursorX;
 
 		public final Glyph[][] glyphs = new Glyph[PAGES][];
 		/** The width of the space character. */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/ParallelAction.java
Patch:
@@ -68,7 +68,9 @@ public boolean act (float delta) {
 		try {
 			Array<Action> actions = this.actions;
 			for (int i = 0, n = actions.size; i < n && actor != null; i++) {
-				if (!actions.get(i).act(delta)) complete = false;
+				Action currentAction = actions.get(i);
+				if (currentAction.getActor()!=null && !currentAction.act(delta))
+					complete = false;
 				if (actor == null) return true; // This action was removed.
 			}
 			return complete;

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/NativeCodeGenerator.java
Patch:
@@ -285,12 +285,12 @@ private void generateHFile (FileDescriptor file) throws Exception {
 		process.waitFor();
 		if (process.exitValue() != 0) {
 			System.out.println();
+			System.out.println("Command: " + command);
 			InputStream errorStream = process.getErrorStream();
 			int c = 0;
 			while ((c = errorStream.read()) != -1) {
 				System.out.print((char)c);
 			}
-			System.out.println("Command: " + command);
 		}
 	}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplicationConfiguration.java
Patch:
@@ -45,7 +45,7 @@ public class GwtApplicationConfiguration {
 	/** whether to include an alpha channel in the color buffer to combine the color buffer with the rest of the webpage
 	 * effectively allows transparent backgrounds in GWT, at a performance cost. **/
 	public boolean alpha = false;
-	/** wether to use premultipliedalpha, may have performance impact  **/
+	/** whether to use premultipliedalpha, may have performance impact  **/
 	public boolean premultipliedAlpha = false;
 
 	public GwtApplicationConfiguration (int width, int height) {

File: gdx/src/com/badlogic/gdx/math/Quaternion.java
Patch:
@@ -98,12 +98,12 @@ public Quaternion cpy () {
 		return new Quaternion(this);
 	}
 
-	/** @return the euclidian length of the specified quaternion */
+	/** @return the euclidean length of the specified quaternion */
 	public final static float len (final float x, final float y, final float z, final float w) {
 		return (float)Math.sqrt(x * x + y * y + z * z + w * w);
 	}
 
-	/** @return the euclidian length of this quaternion */
+	/** @return the euclidean length of this quaternion */
 	public float len () {
 		return (float)Math.sqrt(x * x + y * y + z * z + w * w);
 	}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplicationConfiguration.java
Patch:
@@ -45,7 +45,7 @@ public class GwtApplicationConfiguration {
 	/** whether to include an alpha channel in the color buffer to combine the color buffer with the rest of the webpage
 	 * effectively allows transparent backgrounds in GWT, at a performance cost. **/
 	public boolean alpha = false;
-	/** wether to use premultipliedalpha, may have performance impact  **/
+	/** whether to use premultipliedalpha, may have performance impact  **/
 	public boolean premultipliedAlpha = false;
 
 	public GwtApplicationConfiguration (int width, int height) {

File: gdx/src/com/badlogic/gdx/math/Quaternion.java
Patch:
@@ -98,12 +98,12 @@ public Quaternion cpy () {
 		return new Quaternion(this);
 	}
 
-	/** @return the euclidian length of the specified quaternion */
+	/** @return the euclidean length of the specified quaternion */
 	public final static float len (final float x, final float y, final float z, final float w) {
 		return (float)Math.sqrt(x * x + y * y + z * z + w * w);
 	}
 
-	/** @return the euclidian length of this quaternion */
+	/** @return the euclidean length of this quaternion */
 	public float len () {
 		return (float)Math.sqrt(x * x + y * y + z * z + w * w);
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/ParallelAction.java
Patch:
@@ -68,10 +68,10 @@ public boolean act (float delta) {
 		try {
 			Array<Action> actions = this.actions;
 			for (int i = 0, n = actions.size; i < n && actor != null; i++) {
+				Action currentAction = actions.get(i);
 				if (currentAction.getActor()!=null && !currentAction.act(delta))
 					complete = false;
 				if (actor == null) return true; // This action was removed.
-				if (actor == null) return true; // This action was removed.
 			}
 			return complete;
 		} finally {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/ParallelAction.java
Patch:
@@ -68,7 +68,9 @@ public boolean act (float delta) {
 		try {
 			Array<Action> actions = this.actions;
 			for (int i = 0, n = actions.size; i < n && actor != null; i++) {
-				if (!actions.get(i).act(delta)) complete = false;
+				if (currentAction.getActor()!=null && !currentAction.act(delta))
+					complete = false;
+				if (actor == null) return true; // This action was removed.
 				if (actor == null) return true; // This action was removed.
 			}
 			return complete;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -302,15 +302,15 @@ public void draw (Batch batch, float parentAlpha) {
 			if (!focused && messageText != null) {
 				if (style.messageFontColor != null) {
 					font.setColor(style.messageFontColor.r, style.messageFontColor.g, style.messageFontColor.b,
-						style.messageFontColor.a * parentAlpha);
+						style.messageFontColor.a * color.a * parentAlpha);
 				} else
-					font.setColor(0.7f, 0.7f, 0.7f, parentAlpha);
+					font.setColor(0.7f, 0.7f, 0.7f, color.a * parentAlpha);
 				BitmapFont messageFont = style.messageFont != null ? style.messageFont : font;
 				messageFont.draw(batch, messageText, x + bgLeftWidth, y + textY + yOffset, width - bgLeftWidth - bgRightWidth,
 					textHAlign, false);
 			}
 		} else {
-			font.setColor(fontColor.r, fontColor.g, fontColor.b, fontColor.a * parentAlpha);
+			font.setColor(fontColor.r, fontColor.g, fontColor.b, fontColor.a * color.a * parentAlpha);
 			drawText(batch, font, x + bgLeftWidth, y + textY + yOffset);
 		}
 		if (focused && !disabled) {

File: gdx/src/com/badlogic/gdx/utils/Timer.java
Patch:
@@ -235,11 +235,13 @@ public void run () {
 		public void resume () {
 			long delayMillis = System.nanoTime() / 1000000 - pauseMillis;
 			synchronized (instances) {
-				for (int i = 0, n = instances.size; i < n; i++)
+				for (int i = 0, n = instances.size; i < n; i++) {
 					instances.get(i).delay(delayMillis);
+				}
 			}
 			app = Gdx.app;
 			new Thread(this, "Timer").start();
+			thread = this;
 		}
 
 		public void pause () {

File: gdx/src/com/badlogic/gdx/utils/Bits.java
Patch:
@@ -125,7 +125,7 @@ public int length () {
 			if (bitsAtWord != 0) {
 				for (int bit = 63; bit >= 0; --bit) {
 					if ((bitsAtWord & (1L << (bit & 0x3F))) != 0L) {
-						return (word << 6) + bit;
+						return (word << 6) + bit + 1;
 					}
 				}
 			}

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
Patch:
@@ -806,7 +806,7 @@ protected void bindLights (final Renderable renderable, final Attributes attribu
 			set(u_fogColor, ((ColorAttribute)attributes.get(ColorAttribute.Fog)).color);
 		}
 
-		if (lights.shadowMap != null) {
+		if (lights != null && lights.shadowMap != null) {
 			set(u_shadowMapProjViewTrans, lights.shadowMap.getProjViewTrans());
 			set(u_shadowTexture, lights.shadowMap.getDepthMap());
 			set(u_shadowPCFOffset, 1.f / (float)(2f * lights.shadowMap.getDepthMap().texture.getWidth()));

File: gdx/src/com/badlogic/gdx/maps/tiled/AtlasTmxMapLoader.java
Patch:
@@ -348,7 +348,7 @@ protected void loadTileset (TiledMap map, Element element, FileHandle tmxFile, A
 			FileHandle atlasHandle = getRelativeFileHandle(tmxFile, atlasFilePath);
 			atlasHandle = resolve(atlasHandle.path());
 			TextureAtlas atlas = resolver.getAtlas(atlasHandle.path());
-			String regionsName = atlasHandle.nameWithoutExtension();
+			String regionsName = name;
 
 			for (Texture texture : atlas.getTextures()) {
 				trackedTextures.add(texture);

File: gdx/src/com/badlogic/gdx/math/Polyline.java
Patch:
@@ -17,7 +17,7 @@
 package com.badlogic.gdx.math;
 
 public class Polyline implements Shape2D {
-	private final float[] localVertices;
+	private float[] localVertices;
 	private float[] worldVertices;
 	private float x, y;
 	private float originX, originY;

File: gdx/src/com/badlogic/gdx/math/Polyline.java
Patch:
@@ -17,7 +17,7 @@
 package com.badlogic.gdx.math;
 
 public class Polyline implements Shape2D {
-	private final float[] localVertices;
+	private float[] localVertices;
 	private float[] worldVertices;
 	private float x, y;
 	private float originX, originY;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/InputListener.java
Patch:
@@ -25,6 +25,7 @@
  * actor.addListener(new InputListener() {
  * 	public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {
  * 		Gdx.app.log(&quot;Example&quot;, &quot;touch started at (&quot; + x + &quot;, &quot; + y + &quot;)&quot;);
+ * 		return false;
  * 	}
  * 
  * 	public void touchUp (InputEvent event, float x, float y, int pointer, int button) {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -323,7 +323,7 @@ public void log (String tag, String message, Throwable exception) {
 	public void error (String tag, String message) {
 		if (logLevel >= LOG_ERROR) {
 			checkLogLabel();
-			log.setText(log.getText() + "\n" + tag + ": " + message);
+			log.setText(log.getText() + "\n" + tag + ": " + message + "\n");
 			log.setCursorPos(log.getText().length() - 1);
 			System.err.println(tag + ": " + message);
 		}
@@ -333,7 +333,7 @@ public void error (String tag, String message) {
 	public void error (String tag, String message, Throwable exception) {
 		if (logLevel >= LOG_ERROR) {
 			checkLogLabel();
-			log.setText(log.getText() + "\n" + tag + ": " + message + "\n" + exception.getMessage());
+			log.setText(log.getText() + "\n" + tag + ": " + message + "\n" + exception.getMessage() + "\n");
 			log.setCursorPos(log.getText().length() - 1);
 			System.err.println(tag + ": " + message + "\n" + exception.getMessage() + "\n");
 			System.out.println(getStackTrace(exception));

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -377,9 +377,7 @@ public static boolean intersectRaySphere (Ray ray, Vector3 center, float radius,
 	 * @param intersection The intersection point (optional)
 	 * @return Whether an intersection is present. */
 	public static boolean intersectRayBounds (Ray ray, BoundingBox box, Vector3 intersection) {
-		v0.set(ray.origin).sub(box.min);
-		v1.set(ray.origin).sub(box.max);
-		if (v0.x > 0 && v0.y > 0 && v0.z > 0 && v1.x < 0 && v1.y < 0 && v1.z < 0) {
+		if (box.contains(ray.origin)) {
 			if (intersection != null) intersection.set(ray.origin);
 			return true;
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PngTest.java
Patch:
@@ -55,6 +55,7 @@ public void render () {
 				PNG writer = new PNG((int)(pixmap.getWidth() * pixmap.getHeight() * 1.5f));
 				// writer.setCompression(Deflater.NO_COMPRESSION);
 				writer.write(file, pixmap);
+				writer.write(file, pixmap); // Write twice to make sure the object is reusable.
 				writer.dispose();
 			} catch (IOException ex) {
 				throw new RuntimeException(ex);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -66,13 +66,14 @@ public Window (String title, WindowStyle style) {
 		setClip(true);
 
 		titleLabel = new Label(title, new LabelStyle(style.titleFont, style.titleFontColor));
+		titleLabel.setEllipsis(true);
 
 		titleTable = new Table() {
 			public void draw (Batch batch, float parentAlpha) {
 				if (drawTitleTable) super.draw(batch, parentAlpha);
 			}
 		};
-		titleTable.add(titleLabel).expandX().fillX();
+		titleTable.add(titleLabel).expandX().fillX().minWidth(0);
 		addActor(titleTable);
 
 		setStyle(style);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontTest.java
Patch:
@@ -109,7 +109,8 @@ public void render () {
 			spriteBatch.begin();
 			String text = "your new";
 			// text = "How quickly [RED]daft jumping zebras vex.";
-			text = "Another font wrap is-sue, this time with    multiple whitespace characters.";
+			// text = "Another font wrap is-sue, this time with    multiple whitespace characters.";
+			text = "test with AGWlWi AGWlWi issue";
 			if (true) { // Test wrap.
 				layout.setText(font, text, 0, text.length(), font.getColor(), w, Align.center, true, null);
 			} else { // Test truncation.

File: gdx/src/com/badlogic/gdx/graphics/g3d/Environment.java
Patch:
@@ -118,7 +118,7 @@ public Environment remove (PointLight light) {
 			PointLightsAttribute pointLights = ((PointLightsAttribute)get(PointLightsAttribute.Type));
 			pointLights.lights.removeValue(light, false);
 			if (pointLights.lights.size == 0)
-				remove(DirectionalLightsAttribute.Type);
+				remove(PointLightsAttribute.Type);
 		}
 		return this;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -266,6 +266,7 @@ protected void calculateOffsets () {
 	public void draw (Batch batch, float parentAlpha) {
 		Stage stage = getStage();
 		boolean focused = stage != null && stage.getKeyboardFocus() == this;
+		if (!focused) keyRepeatTask.cancel();
 
 		final BitmapFont font = style.font;
 		final Color fontColor = (disabled && style.disabledFontColor != null) ? style.disabledFontColor

File: gdx/src/com/badlogic/gdx/graphics/g2d/GlyphLayout.java
Patch:
@@ -147,7 +147,7 @@ else if (targetWidth <= font.data.spaceWidth) //
 
 						// Don't wrap if the glyph would fit with just its width (no xadvance or kerning).
 						if (wrap && x > targetWidth && i > 1 && x - xAdvance //
-							+ (run.glyphs.get(i - 1).xoffset + run.glyphs.get(i - 1).width) * fontData.scaleX - 0.00001f > targetWidth) {
+							+ (run.glyphs.get(i).xoffset + run.glyphs.get(i).width) * fontData.scaleX - 0.00001f > targetWidth) {
 
 							if (truncate != null) {
 								truncate(fontData, run, targetWidth, truncate, i, glyphRunPool);

File: gdx/src/com/badlogic/gdx/graphics/g2d/DistanceFieldBitmapFont.java
Patch:
@@ -29,7 +29,7 @@
 
 /** Renders bitmap fonts using distance field textures, @see <a
  * href="https://github.com/libgdx/libgdx/wiki/Distance-field-fonts">Distance Field Fonts Wiki Article</a> For usage init the
- * SpriteBatch with the {@link #getDistanceFieldShader()} shader Attention: Breaks batching!
+ * SpriteBatch with the {@link #createDistanceFieldShader()} shader Attention: Breaks batching!
  * @author Florian Falkner */
 public class DistanceFieldBitmapFont extends BitmapFont {
 	private static final String SMOOTHING_UNIFORM = "u_smoothing";

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -227,7 +227,7 @@ public float getPrefWidth () {
 
 	public float getPrefHeight () {
 		if (prefSizeInvalid) scaleAndComputePrefSize();
-		float height = prefSize.y - style.font.getDescent() * 2;
+		float height = prefSize.y - style.font.getDescent() * fontScaleY * 2;
 		Drawable background = style.background;
 		if (background != null) height += background.getTopHeight() + background.getBottomHeight();
 		return height;

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -359,7 +359,7 @@ public T first () {
 		T[] keyTable = this.keyTable;
 		for (int i = 0, n = capacity + stashSize; i < n; i++)
 			if (keyTable[i] != null) return keyTable[i];
-		throw new IllegalStateException("IntSet is empty.");
+		throw new IllegalStateException("ObjectSet is empty.");
 	}
 
 	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -40,6 +40,7 @@
 import com.badlogic.gdx.tests.bench.TiledMapBench;
 import com.badlogic.gdx.tests.examples.MoveSpriteExample;
 import com.badlogic.gdx.tests.extensions.ControllersTest;
+import com.badlogic.gdx.tests.extensions.FreeTypeAtlasTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeDisposeTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeFontLoaderTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeIncrementalTest;
@@ -238,6 +239,7 @@ public class GdxTests {
 		FreeTypeDisposeTest.class,
 		FreeTypeIncrementalTest.class,
 		FreeTypePackTest.class,
+		FreeTypeAtlasTest.class,
 		FreeTypeTest.class,
 		InternationalFontsTest.class,
 		PngTest.class,

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/gen/ReflectionCacheSourceCreator.java
Patch:
@@ -630,8 +630,7 @@ private void createTypeInvokables (JClassType c, String varName, String methodTy
 					}
 					stub.isConstructor = true;
 					stub.returnType = stub.enclosingType;
-				}
-
+				}				
 				stub.jnsi = "";
 				stub.methodId = nextInvokableId++;
 				stub.name = m.getName();
@@ -660,7 +659,7 @@ private void createTypeInvokables (JClassType c, String varName, String methodTy
 
 				pb(stub.isAbstract + ", " + stub.isFinal + ", " + stub.isStatic + ", " + m.isDefaultAccess() + ", " + m.isPrivate()
 					+ ", " + m.isProtected() + ", " + m.isPublic() + ", " + stub.isNative + ", " + m.isVarArgs() + ", "
-					+ stub.isMethod + ", " + stub.isConstructor + ", " + stub.methodId + "),");
+					+ stub.isMethod + ", " + stub.isConstructor + ", " + stub.methodId + "," + getAnnotations(m.getDeclaredAnnotations()) + "),");
 			}
 			pb("};");
 		}

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java
Patch:
@@ -287,7 +287,7 @@ public void paint (Graphics g, JComponent jc) {
 					emittersPanel.add(effectPanel);
 				}
 			}
-			leftSplit.setDividerLocation(625);
+			leftSplit.setDividerLocation(575);
 		}
 		splitPane.setDividerLocation(325);
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -375,8 +375,8 @@ private void addToCache (GlyphLayout layout, float x, float y) {
 			float gx = x + run.x, gy = y + run.y;
 			for (int ii = 0, nn = glyphs.size; ii < nn; ii++) {
 				Glyph glyph = glyphs.get(ii);
-				addGlyph(glyph, gx, gy, color);
 				gx += xAdvances.get(ii);
+				addGlyph(glyph, gx, gy, color);
 			}
 		}
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -490,7 +490,7 @@ private void activateParticle (int index) {
 				float radius2 = radiusX * radiusX;
 				while (true) {
 					float px = MathUtils.random(width) - radiusX;
-					float py = MathUtils.random(width) - radiusX;
+					float py = MathUtils.random(height) - radiusY;
 					if (px * px + py * py <= radius2) {
 						x += px;
 						y += py / scaleY;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -152,7 +152,7 @@ protected void drawDebugChildren (ShapeRenderer shapes) {
 			for (int i = 0, n = children.size; i < n; i++) {
 				Actor child = actors[i];
 				if (!child.isVisible()) continue;
-				if (!child.getDebug()) continue;
+				if (!child.getDebug() && !(child instanceof Group)) continue;
 				child.drawDebug(shapes);
 			}
 			shapes.flush();
@@ -164,7 +164,7 @@ protected void drawDebugChildren (ShapeRenderer shapes) {
 			for (int i = 0, n = children.size; i < n; i++) {
 				Actor child = actors[i];
 				if (!child.isVisible()) continue;
-				if (!child.getDebug()) continue;
+				if (!child.getDebug() && !(child instanceof Group)) continue;
 				float cx = child.x, cy = child.y;
 				child.x = cx + offsetX;
 				child.y = cy + offsetY;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/Disableable.java
Patch:
@@ -18,4 +18,6 @@
 
 public interface Disableable {
 	public void setDisabled (boolean isDisabled);
+
+	public boolean isDisabled ();
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -34,7 +34,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new FreeTypeIncrementalTest();		
+		GdxTest test = new BitmapFontTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: gdx/src/com/badlogic/gdx/graphics/g2d/GlyphLayout.java
Patch:
@@ -327,7 +327,7 @@ private int parseColorMarkup (CharSequence str, int start, int end, Pool<Color>
 					if (i < start + 2 || i > start + 9) break; // Illegal number of hex digits.
 					Color color = colorPool.obtain();
 					colorStack.add(color);
-					Color.rgb888ToColor(color, colorInt);
+					Color.rgba8888ToColor(color, colorInt);
 					if (i <= start + 7) color.a = 1f; // RRGGBB
 					return i - start;
 				}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -152,7 +152,7 @@ protected void drawDebugChildren (ShapeRenderer shapes) {
 			for (int i = 0, n = children.size; i < n; i++) {
 				Actor child = actors[i];
 				if (!child.isVisible()) continue;
-				if (!child.getDebug()) continue;
+				if (!child.getDebug() && !(child instanceof Group)) continue;
 				child.drawDebug(shapes);
 			}
 			shapes.flush();
@@ -164,7 +164,7 @@ protected void drawDebugChildren (ShapeRenderer shapes) {
 			for (int i = 0, n = children.size; i < n; i++) {
 				Actor child = actors[i];
 				if (!child.isVisible()) continue;
-				if (!child.getDebug()) continue;
+				if (!child.getDebug() && !(child instanceof Group)) continue;
 				float cx = child.x, cy = child.y;
 				child.x = cx + offsetX;
 				child.y = cy + offsetY;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -237,7 +237,7 @@ else if (style.background != null)
 				y += (int)(height / 2 + font.getData().capHeight / 2);
 			}
 			font.setColor(fontColor.r, fontColor.g, fontColor.b, fontColor.a * parentAlpha);
-			layout.setText(font, string, 0, string.length(), Color.WHITE, width, Align.left, false, "...");
+			layout.setText(font, string, 0, string.length(), font.getColor(), width, Align.left, false, "...");
 			font.draw(batch, layout, x, y);
 		}
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/GlyphLayout.java
Patch:
@@ -142,7 +142,7 @@ public void setText (BitmapFont font, CharSequence str, int start, int end, Colo
 
 						// Don't wrap if the glyph would fit with just its width (no x-advance or kerning).
 						if (wrap && x > targetWidth && i > 1 && x - xAdvance //
-							+ (run.glyphs.get(i - 1).xoffset + run.glyphs.get(i - 1).width) * fontData.scaleX > targetWidth) {
+							+ (run.glyphs.get(i - 1).xoffset + run.glyphs.get(i - 1).width) * fontData.scaleX - 0.00001f > targetWidth) {
 
 							if (truncate != null) {
 								truncate(fontData, run, targetWidth, truncate, i, glyphRunPool);
@@ -234,13 +234,14 @@ private void truncate (BitmapFontData fontData, GlyphRun run, float targetWidth,
 			count++;
 		}
 
-		// Append truncate glyphs.
 		run.xAdvances.truncate(count);
 		if (count > 1) {
+			// Append truncate glyphs.
 			run.glyphs.truncate(count - 1);
 			adjustLastGlyph(fontData, run);
 			run.xAdvances.addAll(truncateRun.xAdvances, 1, truncateRun.xAdvances.size - 1);
 		} else {
+			// Use only truncate glyphs.
 			run.glyphs.clear();
 			run.xAdvances.clear();
 			run.xAdvances.addAll(truncateRun.xAdvances);

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -6,9 +6,9 @@
 public class DependencyBank {
 
 	//Versions
-	static String libgdxVersion = "1.5.5";
+	static String libgdxVersion = "1.5.6";
 	//Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly
-	static String libgdxNightlyVersion = "1.5.6-SNAPSHOT";
+	static String libgdxNightlyVersion = "1.5.7-SNAPSHOT";
 	static String roboVMVersion = "1.0.0";
 	static String buildToolsVersion = "20.0.0";
 	static String androidAPILevel = "20";

File: gdx/src/com/badlogic/gdx/Version.java
Patch:
@@ -23,7 +23,7 @@
  * @author mzechner */
 public class Version {
 	/** the current version of libgdx as a String in the major.minor.revision format **/
-	public static final String VERSION = "1.5.6";
+	public static final String VERSION = "1.5.7";
 
 	/** the current major version of libgdx **/
 	public static final int MAJOR;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/FrameBufferCubemapTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.tests;
+package com.badlogic.gdx.tests.g3d;
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Camera;
@@ -15,8 +15,6 @@
 import com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor;
 import com.badlogic.gdx.graphics.glutils.FrameBufferCubemap;
 import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.tests.g3d.Animation3DTest;
-import com.badlogic.gdx.tests.g3d.Basic3DSceneTest;
 
 /**
  * Render a basic scene in a FrameBufferCubemap and displays it

File: gdx/src/com/badlogic/gdx/graphics/g3d/model/Node.java
Patch:
@@ -51,7 +51,7 @@ public class Node {
 
 	public Array<NodePart> parts = new Array<NodePart>(2);
 	
-	private Node parent;
+	protected Node parent;
 	private final Array<Node> children = new Array<Node>(2);
 
 	/** Calculates the local transform based on the translation, scale and rotation

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
Patch:
@@ -593,7 +593,7 @@ public static String createPrefix (final Renderable renderable, final Config con
 		final long attributesMask = attributes.getMask();
 		final long vertexMask = renderable.mesh.getVertexAttributes().getMask();
 		if (and(vertexMask, Usage.Position)) prefix += "#define positionFlag\n";
-		if (or(vertexMask, Usage.Color | Usage.ColorPacked)) prefix += "#define colorFlag\n";
+		if (or(vertexMask, Usage.ColorUnpacked | Usage.ColorPacked)) prefix += "#define colorFlag\n";
 		if (and(vertexMask, Usage.BiNormal)) prefix += "#define binormalFlag\n";
 		if (and(vertexMask, Usage.Tangent)) prefix += "#define tangentFlag\n";
 		if (and(vertexMask, Usage.Normal)) prefix += "#define normalFlag\n";

File: tests/gdx-tests/src/com/badlogic/gdx/tests/EdgeDetectionTest.java
Patch:
@@ -67,7 +67,7 @@ public void create () {
 		}
 
 		ObjLoader objLoader = new ObjLoader();
-		scene = objLoader.loadObj(Gdx.files.internal("data/scene.obj"));
+		scene = objLoader.loadModel(Gdx.files.internal("data/scene.obj"));
 		sceneInstance = new ModelInstance(scene);
 		modelBatch = new ModelBatch();
 		fbo = new FrameBuffer(Format.RGB565, Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FloatTextureTest.java
Patch:
@@ -139,7 +139,7 @@ public void render () {
 
 	private void createQuad () {
 		if (quad != null) return;
-		quad = new Mesh(true, 4, 6, new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(Usage.Color, 4,
+		quad = new Mesh(true, 4, 6, new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(Usage.ColorUnpacked, 4,
 			"a_color"), new VertexAttribute(Usage.TextureCoordinates, 2, "a_texCoords"));
 
 		quad.setVertices(new float[] {-1, -1, 0, 1, 1, 1, 1, 0, 1, 1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, -1, 1, 0,
@@ -149,7 +149,7 @@ private void createQuad () {
 
 	private void createScreenQuad () {
 		if (screenQuad != null) return;
-		screenQuad = new Mesh(true, 4, 6, new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(Usage.Color, 4,
+		screenQuad = new Mesh(true, 4, 6, new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(Usage.ColorUnpacked, 4,
 			"a_color"), new VertexAttribute(Usage.TextureCoordinates, 2, "a_texCoords"));
 
 		Vector3 vec0 = new Vector3(0, 0, 0);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FramebufferToTextureTest.java
Patch:
@@ -52,7 +52,7 @@ public void create () {
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"), true);
 		texture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
 		ObjLoader objLoader = new ObjLoader();
-		mesh = objLoader.loadObj(Gdx.files.internal("data/cube.obj"));
+		mesh = objLoader.loadModel(Gdx.files.internal("data/cube.obj"));
 		mesh.materials.get(0).set(new TextureAttribute(TextureAttribute.Diffuse, texture));
 		modelInstance = new ModelInstance(mesh);
 		modelBatch = new ModelBatch();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectTest.java
Patch:
@@ -50,7 +50,7 @@ public class ProjectTest extends GdxTest {
 	@Override
 	public void create () {
 		ObjLoader objLoader = new ObjLoader();
-		sphere = objLoader.loadObj(Gdx.files.internal("data/sphere.obj"));
+		sphere = objLoader.loadModel(Gdx.files.internal("data/sphere.obj"));
 		sphere.materials.get(0).set(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE));
 		cam = new PerspectiveCamera(45, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam.far = 200;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletConstructor.java
Patch:
@@ -57,8 +57,7 @@ public BulletConstructor (final Model model, final float width, final float heig
 	public BulletConstructor (final Model model, final float mass) {
 		final BoundingBox boundingBox = new BoundingBox();
 		model.calculateBoundingBox(boundingBox);
-		final Vector3 dimensions = boundingBox.getDimensions();
-		create(model, mass, dimensions.x, dimensions.y, dimensions.z);
+		create(model, mass, boundingBox.getWidth(), boundingBox.getHeight(), boundingBox.getDepth());
 	}
 
 	/** Creates a btBoxShape with the same dimensions as the shape and NO rigidbody. */

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/VehicleTest.java
Patch:
@@ -80,8 +80,8 @@ public void create () {
 		world.addConstructor("largeground", new BulletConstructor(largeGroundModel, 0f));
 
 		BoundingBox bounds = new BoundingBox();
-		Vector3 chassisHalfExtents = new Vector3(chassisModel.calculateBoundingBox(bounds).getDimensions()).scl(0.5f);
-		Vector3 wheelHalfExtents = new Vector3(wheelModel.calculateBoundingBox(bounds).getDimensions()).scl(0.5f);
+		Vector3 chassisHalfExtents = chassisModel.calculateBoundingBox(bounds).getDimensions(new Vector3()).scl(0.5f);
+		Vector3 wheelHalfExtents = wheelModel.calculateBoundingBox(bounds).getDimensions(new Vector3()).scl(0.5f);
 
 		world.addConstructor("chassis", new BulletConstructor(chassisModel, 5f, new btBoxShape(chassisHalfExtents)));
 		world.addConstructor("wheel", new BulletConstructor(wheelModel, 0, null));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dTest.java
Patch:
@@ -69,13 +69,13 @@ public void create () {
 	private void createAxes () {
 		ModelBuilder modelBuilder = new ModelBuilder();
 		modelBuilder.begin();
-		MeshPartBuilder builder = modelBuilder.part("grid", GL20.GL_LINES, Usage.Position | Usage.Color, new Material());
+		MeshPartBuilder builder = modelBuilder.part("grid", GL20.GL_LINES, Usage.Position | Usage.ColorUnpacked, new Material());
 		builder.setColor(Color.LIGHT_GRAY);
 		for (float t = GRID_MIN; t <= GRID_MAX; t += GRID_STEP) {
 			builder.line(t, 0, GRID_MIN, t, 0, GRID_MAX);
 			builder.line(GRID_MIN, 0, t, GRID_MAX, 0, t);
 		}
-		builder = modelBuilder.part("axes", GL20.GL_LINES, Usage.Position | Usage.Color, new Material());
+		builder = modelBuilder.part("axes", GL20.GL_LINES, Usage.Position | Usage.ColorUnpacked, new Material());
 		builder.setColor(Color.RED);
 		builder.line(0, 0, 0, 100, 0, 0);
 		builder.setColor(Color.GREEN);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/LightsTest.java
Patch:
@@ -56,8 +56,8 @@ public void create () {
 	protected void onLoaded () {
 		super.onLoaded();
 		BoundingBox bounds = instances.get(0).calculateBoundingBox(new BoundingBox());
-		center.set(bounds.getCenter());
-		radius = bounds.getDimensions().len() * .5f;
+		bounds.getCenter(center);
+		radius = bounds.getDimensions(tmpV).len() * .5f;
 		pointLight.position.set(0, radius, 0).add(transformedCenter.set(center).mul(transform));
 		pointLight.intensity = radius * radius;
 		((ColorAttribute)pLight.material.get(ColorAttribute.Diffuse)).color.set(pointLight.color);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ModelTest.java
Patch:
@@ -53,7 +53,7 @@ public void create () {
 		onModelClicked("g3d/teapot.g3db");
 	}
 
-	private final Vector3 tmpV = new Vector3();
+	private final Vector3 tmpV1 = new Vector3(), tmpV2 = new Vector3();
 	private final Quaternion tmpQ = new Quaternion();
 	private final BoundingBox bounds = new BoundingBox();
 
@@ -100,10 +100,10 @@ protected void onLoaded () {
 		currentlyLoading = null;
 
 		instance.calculateBoundingBox(bounds);
-		cam.position.set(1, 1, 1).nor().scl(bounds.getDimensions().len() * 0.75f + bounds.getCenter().len());
+		cam.position.set(1, 1, 1).nor().scl(bounds.getDimensions(tmpV1).len() * 0.75f + bounds.getCenter(tmpV2).len());
 		cam.up.set(0, 1, 0);
 		cam.lookAt(0, 0, 0);
-		cam.far = 50f + bounds.getDimensions().len() * 2.0f;
+		cam.far = 50f + bounds.getDimensions(tmpV1).len() * 2.0f;
 		cam.update();
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShadowMappingTest.java
Patch:
@@ -65,7 +65,7 @@ public void create () {
 
 		ModelBuilder modelBuilder = new ModelBuilder();
 		modelBuilder.begin();
-		MeshPartBuilder mpb = modelBuilder.part("parts", GL20.GL_TRIANGLES, Usage.Position | Usage.Normal | Usage.Color,
+		MeshPartBuilder mpb = modelBuilder.part("parts", GL20.GL_TRIANGLES, Usage.Position | Usage.Normal | Usage.ColorUnpacked,
 			new Material(ColorAttribute.createDiffuse(Color.WHITE)));
 		mpb.setColor(1f, 1f, 1f, 1f);
 		mpb.box(0, -1.5f, 0, 10, 1, 10);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/CameraInputController.java
Patch:
@@ -163,7 +163,7 @@ else if (this.button < 0 && (activateKey == 0 || activatePressed)) {
 			startY = screenY;
 			this.button = button;
 		}
-		return super.touchDown(screenX, screenY, pointer, button) || activatePressed;
+		return super.touchDown(screenX, screenY, pointer, button) || (activateKey == 0 || activatePressed);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/CameraInputController.java
Patch:
@@ -163,7 +163,7 @@ else if (this.button < 0 && (activateKey == 0 || activatePressed)) {
 			startY = screenY;
 			this.button = button;
 		}
-		return super.touchDown(screenX, screenY, pointer, button) || activatePressed;
+		return super.touchDown(screenX, screenY, pointer, button) || (activateKey == 0 || activatePressed);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/graphics/g3d/particles/values/MeshSpawnShapeValue.java
Patch:
@@ -14,7 +14,7 @@
 /** The base class of all the {@link ParticleValue} values which spawn a particle on a mesh shape.
 * @author Inferno */
 public abstract class MeshSpawnShapeValue extends SpawnShapeValue {
-	protected static class Triangle{
+	public static class Triangle{
 		float x1, y1, z1,
 				x2, y2, z2,
 				x3, y3, z3;

File: gdx/src/com/badlogic/gdx/graphics/g3d/particles/ResourceData.java
Patch:
@@ -209,7 +209,7 @@ public void read (Json json, JsonValue jsonData) {
 			saveData.resources = this;
 		}
 		
-		sharedAssets.addAll(json.readValue("assets", AssetData[].class, jsonData));
+		sharedAssets.addAll(json.readValue("assets", Array.class, AssetData.class, jsonData));
 		resource = json.readValue("resource", null, jsonData);
 	}
 

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/Hiero.java
Patch:
@@ -1342,7 +1342,9 @@ public void render () {
 				newUnicodeFont = null;
 			}
 
-			if (!unicodeFont.getEffects().isEmpty() && unicodeFont.loadGlyphs(25)) {
+			unicodeFont.addGlyphs(sampleText);
+
+			if (!unicodeFont.getEffects().isEmpty() && unicodeFont.loadGlyphs()) {
 				glyphPageComboModel.removeAllElements();
 				int pageCount = unicodeFont.getGlyphPages().size();
 				int glyphCount = 0;
@@ -1371,7 +1373,6 @@ public void render () {
 			} else {
 				GL11.glClearColor(1, 1, 1, 1);
 				GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
-				unicodeFont.addGlyphs(sampleText);
 				// GL11.glColor4f(renderingBackgroundColor.r, renderingBackgroundColor.g, renderingBackgroundColor.b,
 				// renderingBackgroundColor.a);
 				// fillRect(0, 0, unicodeFont.getGlyphPageWidth() + 2, unicodeFont.getGlyphPageHeight() + 2);

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
Patch:
@@ -350,7 +350,7 @@ public void debug (String tag, String message) {
 	@Override
 	public void debug (String tag, String message, Throwable exception) {
 		if (logLevel >= LOG_DEBUG) {
-			Foundation.log("%@", new NSString("[error] " + tag + ": " + message));
+			Foundation.log("%@", new NSString("[debug] " + tag + ": " + message));
 			exception.printStackTrace();
 		}
 	}

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
Patch:
@@ -350,7 +350,7 @@ public void debug (String tag, String message) {
 	@Override
 	public void debug (String tag, String message, Throwable exception) {
 		if (logLevel >= LOG_DEBUG) {
-			Foundation.log("%@", new NSString("[error] " + tag + ": " + message));
+			Foundation.log("%@", new NSString("[debug] " + tag + ": " + message));
 			exception.printStackTrace();
 		}
 	}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -399,7 +399,7 @@ private void rectangle(int x, int y, int width, int height, DrawType drawType) {
 		if (blending == Blending.None) {
 			context.setFillStyle(clearColor);
 			context.setStrokeStyle(clearColor);
-			context.setGlobalCompositeOperation("clear");
+			context.setGlobalCompositeOperation("destination-out");
 			context.beginPath();
 			context.rect(x, y, width, height);
 			fillOrStrokePath(drawType);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -804,7 +804,7 @@ protected void drawDebugBounds (ShapeRenderer shapes) {
 		if (!debug) return;
 		shapes.set(ShapeType.Line);
 		shapes.setColor(stage.getDebugColor());
-		shapes.rect(x, y, originX, originY, width - 1, height - 1, scaleX, scaleY, rotation);
+		shapes.rect(x, y, originX, originY, width, height, scaleX, scaleY, rotation);
 	}
 
 	/** If true, {@link #drawDebug(ShapeRenderer)} will be called for this actor. */

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -631,8 +631,9 @@ public Glyph getGlyph (char ch) {
 			Glyph glyph = super.getGlyph(ch);
 			if (glyph == null && generator != null && ch != 0) {
 				generator.setPixelSizes(0, parameter.size);
-				glyph = generator.createGlyph(ch, this, parameter, stroker, ascent + capHeight, packPrefix, packer);
+				glyph = generator.createGlyph(ch, this, parameter, stroker, (ascent + capHeight) / scaleY, packPrefix, packer);
 				if (glyph == null) return null;
+
 				setGlyph(ch, glyph);
 				setGlyphRegion(glyph, regions.get(glyph.page));
 				glyphs.add(glyph);

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeType.java
Patch:
@@ -853,7 +853,7 @@ public static Library initFreeType() {
 
 	public static int toInt (int value) {
 		if (value < 0) return (int)((value - 32) >> 6);
-		else return (int)((value + 32) >> 6);
+		return (int)((value + 32) >> 6);
 	}
    
 //	public static void main (String[] args) throws Exception {

File: gdx/src/com/badlogic/gdx/graphics/g3d/particles/ResourceData.java
Patch:
@@ -209,7 +209,7 @@ public void read (Json json, JsonValue jsonData) {
 			saveData.resources = this;
 		}
 		
-		sharedAssets.addAll(json.readValue("assets", AssetData[].class, jsonData));
+		sharedAssets.addAll(json.readValue("assets", Array.class, AssetData.class, jsonData));
 		resource = json.readValue("resource", null, jsonData);
 	}
 

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/GradientPanel.java
Patch:
@@ -243,6 +243,7 @@ public void mouseClicked (MouseEvent event) {
 							colors.add(i, colors.get(i - 1));
 							dragIndex = selectedIndex = i;
 							handleSelected(colors.get(selectedIndex));
+							updateColor();
 							repaint();
 							break;
 						}
@@ -256,6 +257,7 @@ public void mouseDragged (MouseEvent event) {
 					percent = Math.max(percent, percentages.get(dragIndex - 1) + 0.01f);
 					percent = Math.min(percent, percentages.get(dragIndex + 1) - 0.01f);
 					percentages.set(dragIndex, percent);
+					updateColor();
 					repaint();
 				}
 			});

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -35,7 +35,7 @@ public class DependencyBank {
 	public DependencyBank() {
 		for (ProjectDependency projectDep : ProjectDependency.values()) {
 			Dependency dependency = new Dependency(projectDep.name(),
-					projectDep.getGwtInehrits(),
+					projectDep.getGwtInherits(),
 					projectDep.getDependencies(ProjectType.CORE),
 					projectDep.getDependencies(ProjectType.DESKTOP),
 					projectDep.getDependencies(ProjectType.ANDROID),
@@ -185,7 +185,7 @@ public String[] getDependencies(ProjectType type) {
 			return null;
 		}
 		
-		public String[] getGwtInehrits() {
+		public String[] getGwtInherits() {
 			return gwtInherits;
 		}
 		

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -805,8 +805,8 @@ public FileHandle getFontFile () {
 		public void setScale (float scaleX, float scaleY) {
 			if (scaleX == 0) throw new IllegalArgumentException("scaleX cannot be 0.");
 			if (scaleY == 0) throw new IllegalArgumentException("scaleY cannot be 0.");
-			float x = scaleX / scaleX;
-			float y = scaleY / scaleY;
+			float x = scaleX / this.scaleX;
+			float y = scaleY / this.scaleY;
 			lineHeight *= y;
 			spaceWidth *= x;
 			xHeight *= y;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -207,6 +207,7 @@ public void run () {
 				}
 				try {
 					Display.processMessages();
+					if (cursor != null) canvas.setCursor(cursor);
 
 					boolean shouldRender = false;
 
@@ -238,8 +239,6 @@ public void run () {
 						Display.update(false);
 					}
 
-					canvas.setCursor(cursor);
-
 					Display.sync(getFrameRate());
 				} catch (Throwable ex) {
 					exception(ex);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
Patch:
@@ -72,7 +72,7 @@ public static void init () {
 	public ModelBuilder modelBuilder = new ModelBuilder();
 	public ModelBatch modelBatch;
 	public Array<Disposable> disposables = new Array<Disposable>();
-	private int debugMode = DebugDrawModes.DBG_DrawFeaturesText;
+	private int debugMode = DebugDrawModes.DBG_NoDebug;
 	
 	protected final static Vector3 tmpV1 = new Vector3(), tmpV2 = new Vector3();
 

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSInput.java
Patch:
@@ -85,7 +85,7 @@ public T wrap (long handle) {
 	}
 
 	private static final NSObjectWrapper<UITouch> UI_TOUCH_WRAPPER = new NSObjectWrapper<UITouch>(UITouch.class);
-	private static final NSObjectWrapper<UIAcceleration> UI_ACCELERATION_WRAPPER = new NSObjectWrapper<UIAcceleration>(UIAcceleration.class);
+	static final NSObjectWrapper<UIAcceleration> UI_ACCELERATION_WRAPPER = new NSObjectWrapper<UIAcceleration>(UIAcceleration.class);
 	
 	IOSApplication app;
 	IOSApplicationConfiguration config;

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/MatrixTest.java
Patch:
@@ -75,7 +75,7 @@ public void create () {
 	public void render () {
 		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		batch.begin();
-		font.drawMultiLine(batch, results, 20, 300);
+		font.draw(batch, results, 20, 300);
 		batch.end();
 	}
 }

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreetypeFontLoader.java
Patch:
@@ -18,7 +18,6 @@
  * file as well the parameters used to generate the BitmapFont (size, characters, etc.) 
  */
 public class FreetypeFontLoader extends AsynchronousAssetLoader<BitmapFont, FreetypeFontLoader.FreeTypeFontLoaderParameter>{
-
 	public FreetypeFontLoader (FileHandleResolver resolver) {
 		super(resolver);
 	}
@@ -40,7 +39,7 @@ public BitmapFont loadSync (AssetManager manager, String fileName, FileHandle fi
 		if(parameter == null) throw new RuntimeException("FreetypeFontParameter must be set in AssetManager#load to point at a TTF file!");
 		FreeTypeFontGenerator generator = manager.get(parameter.fontFileName + ".gen", FreeTypeFontGenerator.class);	
 		FreeTypeBitmapFontData data = generator.generateData(parameter.fontParameters);
-		BitmapFont font = new BitmapFont(data, data.getTextureRegions(), false);
+		BitmapFont font = new BitmapFont(data, data.regions, false);
 		font.setOwnsTexture(true);
 		return font;
 	}

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -32,6 +32,7 @@
 import java.io.Reader;
 import java.io.UnsupportedEncodingException;
 import java.io.Writer;
+import java.nio.ByteBuffer;
 
 import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Files.FileType;
@@ -291,7 +292,7 @@ public void write (InputStream input, boolean append) {
 		OutputStream output = null;
 		try {
 			output = write(append);
-			StreamUtils.copyStream(input, output, 4096);
+			StreamUtils.copyStream(input, output);
 		} catch (Exception ex) {
 			throw new GdxRuntimeException("Error stream writing to file: " + file + " (" + type + ")", ex);
 		} finally {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -22,6 +22,7 @@
 import com.badlogic.gdx.tests.FullscreenTest;
 import com.badlogic.gdx.tests.JsonTest;
 import com.badlogic.gdx.tests.extensions.ControllersTest;
+import com.badlogic.gdx.tests.extensions.FreeTypeIncrementalTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class LwjglDebugStarter {
@@ -33,7 +34,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new BitmapFontTest();		
+		GdxTest test = new FreeTypeIncrementalTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontDistanceFieldTest.java
Patch:
@@ -114,7 +114,7 @@ private int drawFont (BitmapFont font, String description, boolean linearFilteri
 		// set filters for each page
 		TextureFilter minFilter = linearFiltering ? TextureFilter.MipMapLinearNearest : TextureFilter.Nearest;
 		TextureFilter magFilter = linearFiltering ? TextureFilter.Linear : TextureFilter.Nearest;
-		for (int i = 0; i < font.getRegions().length; i++) {
+		for (int i = 0; i < font.getRegions().size; i++) {
 			font.getRegion(i).getTexture().setFilter(minFilter, magFilter);
 		}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontTest.java
Patch:
@@ -106,7 +106,7 @@ public void render () {
 		font.getData().markupEnabled = false;
 
 		// 'R' and 'p' are in different pages
-		String txt2 = "this font uses " + multiPageFont.getRegions().length + " texture pages: RpRpRpRpRpNM";
+		String txt2 = "this font uses " + multiPageFont.getRegions().size + " texture pages: RpRpRpRpRpNM";
 		spriteBatch.renderCalls = 0;
 
 		// regular draw function

File: gdx/src/com/badlogic/gdx/graphics/g3d/Attributes.java
Patch:
@@ -132,7 +132,7 @@ public final void set (final Iterable<Attribute> attributes) {
 	/** Removes the attribute from the material, i.e.: material.remove(BlendingAttribute.ID); Can also be used to remove multiple
 	 * attributes also, i.e. remove(AttributeA.ID | AttributeB.ID); */
 	public final void remove (final long mask) {
-		for (int i = 0; i < attributes.size; i++) {
+		for (int i = attributes.size - 1; i >= 0; i--) {
 			final long type = attributes.get(i).type;
 			if ((mask & type) == type) {
 				attributes.removeIndex(i);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -635,7 +635,7 @@ public void setScrollFocus (Actor actor) {
 		FocusEvent event = Pools.obtain(FocusEvent.class);
 		event.setStage(this);
 		event.setType(FocusEvent.Type.scroll);
-		Actor oldScrollFocus = keyboardFocus;
+		Actor oldScrollFocus = scrollFocus;
 		if (oldScrollFocus != null) {
 			event.setFocused(false);
 			event.setRelatedActor(actor);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -635,7 +635,7 @@ public void setScrollFocus (Actor actor) {
 		FocusEvent event = Pools.obtain(FocusEvent.class);
 		event.setStage(this);
 		event.setType(FocusEvent.Type.scroll);
-		Actor oldScrollFocus = keyboardFocus;
+		Actor oldScrollFocus = scrollFocus;
 		if (oldScrollFocus != null) {
 			event.setFocused(false);
 			event.setRelatedActor(actor);

File: gdx/src/com/badlogic/gdx/graphics/g2d/GlyphLayout.java
Patch:
@@ -201,6 +201,7 @@ private void truncate (BitmapFontData fontData, GlyphRun run, float targetWidth,
 	}
 
 	private int parseColorMarkup (CharSequence str, int start, int end) {
+		if (start == end) return -1; // String ended with "[".
 		Pool<Color> pool = Pools.get(Color.class);
 		switch (str.charAt(start)) {
 		case '#':

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/Hiero4.java
Patch:
@@ -92,6 +92,7 @@
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
+import com.badlogic.gdx.scenes.scene2d.utils.Align;
 import com.badlogic.gdx.tools.hiero.unicodefont.UnicodeFont;
 import com.badlogic.gdx.tools.hiero.unicodefont.effects.EffectUtil;
 
@@ -986,7 +987,7 @@ public void render () {
 				GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
 
 				batch.begin();
-				font.drawWrapped(batch, sampleTextPane.getText(), 0, viewHeight, viewWidth);
+				font.draw(batch, sampleTextPane.getText(), 0, viewHeight, viewWidth, Align.left, true);
 				batch.end();
 			} else {
 				glClearColor(1, 1, 1, 1);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -34,6 +34,7 @@
 import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.ScrollPaneStyle;
 import com.badlogic.gdx.scenes.scene2d.utils.ArraySelection;
 import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener.ChangeEvent;
+import com.badlogic.gdx.scenes.scene2d.utils.Align;
 import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
 import com.badlogic.gdx.scenes.scene2d.utils.Disableable;
 import com.badlogic.gdx.scenes.scene2d.utils.Drawable;
@@ -232,7 +233,7 @@ else if (style.background != null)
 			}
 			int numGlyphs = font.computeVisibleGlyphs(string, 0, string.length(), width);
 			font.setColor(fontColor.r, fontColor.g, fontColor.b, fontColor.a * parentAlpha);
-			font.draw(batch, string, x, y, 0, numGlyphs);
+			font.draw(batch, string, x, y, 0, numGlyphs, 0, Align.left, false);
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
Patch:
@@ -459,7 +459,7 @@ public BitmapFont read (Json json, JsonValue jsonData, Class type) {
 						else
 							font = new BitmapFont(fontFile, flip);
 					}
-					font.setMarkupEnabled(markupEnabled);
+					font.getData().markupEnabled = markupEnabled;
 					// Scaled size is the desired cap height to scale the font to.
 					if (scaledSize != -1) font.setScale(scaledSize / font.getCapHeight());
 					return font;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -332,7 +332,7 @@ protected void drawSelection (Drawable selection, Batch batch, BitmapFont font,
 	}
 
 	protected void drawText (Batch batch, BitmapFont font, float x, float y) {
-		font.draw(batch, displayText, x + textOffset, y, visibleTextStart, visibleTextEnd);
+		font.draw(batch, displayText, x + textOffset, y, visibleTextStart, visibleTextEnd, 0, Align.left, false);
 	}
 
 	protected void drawCursor (Drawable cursorPatch, Batch batch, BitmapFont font, float x, float y) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AccelerometerTest.java
Patch:
@@ -36,7 +36,7 @@ public void create () {
 	public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
-		font.drawMultiLine(batch, "accel: [" + Gdx.input.getAccelerometerX() + "," + Gdx.input.getAccelerometerY() + ","
+		font.draw(batch, "accel: [" + Gdx.input.getAccelerometerX() + "," + Gdx.input.getAccelerometerY() + ","
 			+ Gdx.input.getAccelerometerZ() + "]\n" + "orientation: " + Gdx.input.getNativeOrientation() + "\n" + "rotation: "
 			+ Gdx.input.getRotation() + "\n" + "wh: " + Gdx.graphics.getDesktopDisplayMode() + "\n", 0, 100);
 		batch.end();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AnnotationTest.java
Patch:
@@ -103,7 +103,7 @@ private void println (String line) {
 	public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
-		font.drawMultiLine(batch, message, 20, Gdx.graphics.getHeight() - 20);
+		font.draw(batch, message, 20, Gdx.graphics.getHeight() - 20);
 		batch.end();
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontDistanceFieldTest.java
Patch:
@@ -104,7 +104,7 @@ private int drawFont (BitmapFont font, String description, boolean linearFilteri
 		float maxWidth = 0;
 
 		spriteBatch.setShader(null);
-		descriptionFont.drawMultiLine(spriteBatch, description, x, y);
+		descriptionFont.draw(spriteBatch, description, x, y);
 		spriteBatch.flush();
 		y += 10 + 2 * descriptionFont.getLineHeight();
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontMetricsTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
-import com.badlogic.gdx.graphics.g2d.BitmapFont.TextBounds;
+import com.badlogic.gdx.graphics.g2d.GlyphLayout;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas;
 import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
@@ -78,7 +78,7 @@ public void render () {
 		smallFont.draw(spriteBatch, "cap height", 20, viewHeight - 140);
 
 		font.setColor(Color.BLACK);
-		TextBounds bounds = font.drawMultiLine(spriteBatch, text, x, y);
+		GlyphLayout layout = font.draw(spriteBatch, text, x, y);
 
 		spriteBatch.end();
 
@@ -105,7 +105,7 @@ public void render () {
 
 		renderer.begin(ShapeType.Line);
 		renderer.setColor(Color.BLUE);
-		renderer.rect(x, y, bounds.width, -bounds.height);
+		renderer.rect(x, y, layout.width, -layout.height);
 		renderer.end();
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DCharacterControllerTest.java
Patch:
@@ -280,8 +280,7 @@ public void render () {
 
 		cam.project(point.set(pos.x, pos.y, 0));
 		batch.begin();
-		font.drawMultiLine(batch, "friction: " + playerPhysicsFixture.getFriction() + "\ngrounded: " + grounded, point.x + 20,
-			point.y);
+		font.draw(batch, "friction: " + playerPhysicsFixture.getFriction() + "\ngrounded: " + grounded, point.x + 20, point.y);
 		batch.end();
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FilesTest.java
Patch:
@@ -459,7 +459,7 @@ private void fail (String msg) {
 	public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
-		font.drawMultiLine(batch, message, 20, Gdx.graphics.getHeight() - 20);
+		font.draw(batch, message, 20, Gdx.graphics.getHeight() - 20);
 		batch.end();
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/I18NMessageTest.java
Patch:
@@ -98,7 +98,7 @@ private void println (String line) {
 	public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
-		font.drawMultiLine(batch, message, 20, Gdx.graphics.getHeight() - 20);
+		font.draw(batch, message, 20, Gdx.graphics.getHeight() - 20);
 		batch.end();
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/I18NSimpleMessageTest.java
Patch:
@@ -100,7 +100,7 @@ private void println (String line) {
 	public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
-		font.drawMultiLine(batch, message, 20, Gdx.graphics.getHeight() - 20);
+		font.draw(batch, message, 20, Gdx.graphics.getHeight() - 20);
 		batch.end();
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/LabelTest.java
Patch:
@@ -45,7 +45,7 @@ public void create () {
 		renderer = new ShapeRenderer();
 		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 		skin.getAtlas().getTextures().iterator().next().setFilter(TextureFilter.Nearest, TextureFilter.Nearest);
-		skin.getFont("default-font").setMarkupEnabled(true);
+		skin.getFont("default-font").getData().markupEnabled = true;
 		stage = new Stage();
 		Gdx.input.setInputProcessor(stage);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ReflectionTest.java
Patch:
@@ -96,7 +96,7 @@ private void println (String line) {
 	public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
-		font.drawMultiLine(batch, message, 20, Gdx.graphics.getHeight() - 20);
+		font.draw(batch, message, 20, Gdx.graphics.getHeight() - 20);
 		batch.end();
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoftKeyboardTest.java
Patch:
@@ -64,7 +64,7 @@ public boolean keyTyped (char character) {
 	public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
-		font.drawMultiLine(batch, textBuffer, 0, Gdx.graphics.getHeight() - 20);
+		font.draw(batch, textBuffer, 0, Gdx.graphics.getHeight() - 20);
 		batch.end();
 
 		// bring up the keyboard if we touch the screen

File: tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypeTest.java
Patch:
@@ -65,8 +65,8 @@ public void render () {
 
 		batch.begin();
 		font.setColor(Color.RED);
-		font.drawMultiLine(batch, "This is a test\nAnd another line\n()����$%&/!12390#", 100, 112);
-		ftFont.drawMultiLine(batch, "This is a test\nAnd another line\n()����$%&/!12390#", 100, 112);
+		font.draw(batch, "This is a test\nAnd another line\n()����$%&/!12390#", 100, 112);
+		ftFont.draw(batch, "This is a test\nAnd another line\n()����$%&/!12390#", 100, 112);
 // batch.disableBlending();
 		batch.draw(ftFont.getRegion(), 300, 0);
 // batch.enableBlending();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTest.java
Patch:
@@ -85,7 +85,7 @@ public void create () {
 		font = new BitmapFont(Gdx.files.internal("data/arial-15.fnt"), false);
 		cache = new BitmapFontCache(font);
 		cache.setColor(Color.RED);
-		cache.setMultiLineText("This is a Test", 0, 0);
+		cache.setText("This is a Test", 0, 0);
 
 		atlas = new TextureAtlas(Gdx.files.internal("data/pack"));
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/net/NetAPITest.java
Patch:
@@ -271,7 +271,7 @@ public void render () {
 			batch.end();
 		} else if (text != null) {
 			batch.begin();
-			font.drawMultiLine(batch, text, 10, Gdx.graphics.getHeight() - 10);
+			font.draw(batch, text, 10, Gdx.graphics.getHeight() - 10);
 			batch.end();
 		}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -152,6 +152,7 @@ protected void drawDebugChildren (ShapeRenderer shapes) {
 			for (int i = 0, n = children.size; i < n; i++) {
 				Actor child = actors[i];
 				if (!child.isVisible()) continue;
+				if (!child.getDebug()) continue;
 				child.drawDebug(shapes);
 			}
 			shapes.flush();
@@ -163,6 +164,7 @@ protected void drawDebugChildren (ShapeRenderer shapes) {
 			for (int i = 0, n = children.size; i < n; i++) {
 				Actor child = actors[i];
 				if (!child.isVisible()) continue;
+				if (!child.getDebug()) continue;
 				float cx = child.x, cy = child.y;
 				child.x = cx + offsetX;
 				child.y = cy + offsetY;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ProgressBar.java
Patch:
@@ -203,7 +203,7 @@ public float getPercent () {
 	}
 
 	public float getVisualPercent () {
-		return visualInterpolation.apply(getPercent());
+		return visualInterpolation.apply((getVisualValue() - min) / (max - min));
 	}
 
 	/** Returns progress bar visual position within the range. */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -881,7 +881,7 @@ public boolean keyTyped (InputEvent event, char character) {
 			} else {
 				boolean delete = character == DELETE;
 				boolean backspace = character == BACKSPACE;
-				boolean add = style.font.containsCharacter(character)
+				boolean add = (!onlyFontChars || style.font.containsCharacter(character))
 					|| (writeEnters && (character == ENTER_ANDROID || character == ENTER_DESKTOP));
 				boolean remove = backspace || delete;
 				if (add || remove) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -881,7 +881,7 @@ public boolean keyTyped (InputEvent event, char character) {
 			} else {
 				boolean delete = character == DELETE;
 				boolean backspace = character == BACKSPACE;
-				boolean add = style.font.containsCharacter(character)
+				boolean add = (!onlyFontChars || style.font.containsCharacter(character))
 					|| (writeEnters && (character == ENTER_ANDROID || character == ENTER_DESKTOP));
 				boolean remove = backspace || delete;
 				if (add || remove) {

File: gdx/src/com/badlogic/gdx/graphics/g3d/model/Node.java
Patch:
@@ -199,7 +199,7 @@ public <T extends Node> int addChildren (final Iterable<T> nodes) {
 	 * @param child The Node to add as child of this Node
 	 * @return the zero-based index of the child */
 	public <T extends Node> int insertChild (int index, final T child) {
-		for (Node p = this; p != null; p = child.getParent()) {
+		for (Node p = this; p != null; p = p.getParent()) {
 			if (p == child) throw new GdxRuntimeException("Cannot add a parent as a child");
 		}
 		Node p = child.getParent();

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/BuildScriptHelper.java
Patch:
@@ -16,7 +16,7 @@ public static void addBuildScript(List<ProjectType> projects, BufferedWriter wr)
 		//repos
 		write(wr, "repositories {");
 		write(wr, DependencyBank.mavenCentral);
-		write(wr, "maven { " + DependencyBank.libGDXSnapshotsUrl + " }");
+		write(wr, "maven { url \"" + DependencyBank.libGDXSnapshotsUrl + "\" }");
 		if (projects.contains(ProjectType.HTML)) {
 			write(wr, DependencyBank.jCenter);
 		}

File: gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java
Patch:
@@ -228,6 +228,7 @@ protected void loadObject (TiledMap map, MapLayer layer, Element element) {
 			if (type != null) {
 				object.getProperties().put("type", type);
 			}
+			object.getProperties().put("id", element.getIntAttribute("id"));
 			object.getProperties().put("x", x * scaleX);
 			object.getProperties().put("y", (y - height) * scaleY);
 			object.getProperties().put("width", width);

File: gdx/src/com/badlogic/gdx/maps/tiled/tiles/AnimatedTiledMapTile.java
Patch:
@@ -118,7 +118,7 @@ public void setAnimationIntervals(int[] intervals){
 			this.animationIntervals = intervals;
 			
 			loopduration = 0;
-			for(int i = 0; i < intervals.length: i++){
+			for(int i = 0; i < intervals.length; i++){
 				loopduration += intervals[i];	
 			}
 			 

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePacker.java
Patch:
@@ -655,7 +655,7 @@ static public void processIfModified (String input, String output, String packFi
 		Settings settings = new Settings();
 
 		if (isModified(input, output, packFileName, settings)) {
-			process(input, output, packFileName);
+			process(settings, input, output, packFileName);
 		}
 	}
 

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/objectal/OALSimpleAudio.java
Patch:
@@ -46,6 +46,9 @@ public final class OALSimpleAudio extends NSObject {
 	@Method(selector = "playEffect:volume:pitch:pan:loop:")
 	public native ALSource playEffect (String filePath, float volume, float pitch, float pan, boolean loop);
 
+	@Method(selector = "playBuffer:volume:pitch:pan:loop")
+	public native ALSource playBuffer (ALBuffer buffer, float volume, float pitch, float pan, boolean loop);
+	
 	@Property
 	public native boolean isAllowIpod ();
 

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSDevice.java
Patch:
@@ -15,8 +15,8 @@ public enum IOSDevice {
 	IPHONE_5C_CDMA_GSM("iPhone5,4", 326),
 	IPHONE_5S("iPhone6,1", 326),
 	IPHONE_5S_CDMA_GSM("iPhone6,2", 326),
-	IPHONE_6_PLUS("iPhone7,1", 326),
-	IPHONE_6("iPhone7,2", 401),
+	IPHONE_6_PLUS("iPhone7,1", 401),
+	IPHONE_6("iPhone7,2", 326),
 	
 	IPOD_TOUCH_1G("iPod1,1", 163),
 	IPOD_TOUCH_2G("iPod2,1", 163),
@@ -68,4 +68,4 @@ public static IOSDevice getDevice (String machineString) {
 	}
 
 	
-}
\ No newline at end of file
+}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -112,14 +112,14 @@ boolean calculatePositionAndValue (float x, float y) {
 			float height = getHeight() - bg.getTopHeight() - bg.getBottomHeight();
 			float knobHeight = knob == null ? 0 : knob.getMinHeight();
 			position = y - bg.getBottomHeight() - knobHeight * 0.5f;
-			value = visualInterpolationInverse.apply(min, max, position / (height - knobHeight));
+			value = min + (max - min) * visualInterpolationInverse.apply(position / (height - knobHeight));
 			position = Math.max(0, position);
 			position = Math.min(height - knobHeight, position);
 		} else {
 			float width = getWidth() - bg.getLeftWidth() - bg.getRightWidth();
 			float knobWidth = knob == null ? 0 : knob.getMinWidth();
 			position = x - bg.getLeftWidth() - knobWidth * 0.5f;
-			value = visualInterpolationInverse.apply(min, max, position / (width - knobWidth));
+			value = min + (max - min) * visualInterpolationInverse.apply(position / (width - knobWidth));
 			position = Math.max(0, position);
 			position = Math.min(width - knobWidth, position);
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Container.java
Patch:
@@ -45,9 +45,8 @@ public void draw (Batch batch, float parentAlpha) {
 			if (clip) {
 				batch.flush();
 				float padLeft = this.padLeft.get(this), padBottom = this.padBottom.get(this);
-				boolean draw = background == null ? clipBegin(0, 0, getWidth(), getHeight()) : clipBegin(padLeft, padBottom,
-					getWidth() - padLeft - padRight.get(this), getHeight() - padBottom - padTop.get(this));
-				if (draw) {
+				if (clipBegin(padLeft, padBottom, getWidth() - padLeft - padRight.get(this),
+					getHeight() - padBottom - padTop.get(this))) {
 					drawChildren(batch, parentAlpha);
 					batch.flush();
 					clipEnd();

File: gdx/src/com/badlogic/gdx/graphics/g3d/Attributes.java
Patch:
@@ -78,7 +78,7 @@ private final void enable (final long mask) {
 	}
 
 	private final void disable (final long mask) {
-		this.mask &= -1L ^ mask;
+		this.mask &= ~mask;
 	}
 
 	/** Add a attribute to this material. If the material already contains an attribute of the same type it is overwritten. */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -251,7 +251,7 @@ public void draw (Batch batch, float parentAlpha) {
 				ScissorStack.popScissors();
 			}
 		}
-		batch.setColor(color.r, color.g, color.b, color.a);
+		batch.setColor(color.r, color.g, color.b, parentAlpha * color.a);
 		handle.draw(batch, handleBounds.x, handleBounds.y, handleBounds.width, handleBounds.height);
 		resetTransform(batch);
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -251,7 +251,7 @@ public void draw (Batch batch, float parentAlpha) {
 				ScissorStack.popScissors();
 			}
 		}
-		batch.setColor(color.r, color.g, color.b, color.a);
+		batch.setColor(color.r, color.g, color.b, parentAlpha * color.a);
 		handle.draw(batch, handleBounds.x, handleBounds.y, handleBounds.width, handleBounds.height);
 		resetTransform(batch);
 	}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglNet.java
Patch:
@@ -57,8 +57,8 @@ public Socket newClientSocket (Protocol protocol, String host, int port, SocketH
 	}
 
 	@Override
-	public void openURI (String URI) {
-		Sys.openURL(URI);
+	public boolean openURI (String URI) {
+		return Sys.openURL(URI);
 	}
 
 }

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSNet.java
Patch:
@@ -58,7 +58,7 @@ public Socket newClientSocket (Protocol protocol, String host, int port, SocketH
 	}
 
 	@Override
-	public void openURI (String URI) {
-		uiApp.openURL(new NSURL(URI));
+	public boolean openURI (String URI) {
+		return uiApp.openURL(new NSURL(URI));
 	}
 }

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtNet.java
Patch:
@@ -191,7 +191,8 @@ public Socket newClientSocket (Protocol protocol, String host, int port, SocketH
 	}
 
 	@Override
-	public void openURI (String URI) {
+	public boolean openURI (String URI) {
 		Window.open(URI, "_blank", null);
+		return true;
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -123,6 +123,7 @@ public ParticleEmitter (ParticleEmitter emitter) {
 		aligned = emitter.aligned;
 		behind = emitter.behind;
 		additive = emitter.additive;
+		premultipliedAlpha = emitter.premultipliedAlpha;
 	}
 
 	private void initialize () {

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/ExternalExtensionsDialog.java
Patch:
@@ -136,7 +136,7 @@ public void mouseClicked (MouseEvent e) {
 				if (column == 0) {
 					ExternalExtension extension = ((ExtensionTableModel)table.getModel()).getExtension(row);
 					Dependency dep = extension.generateDependency();
-					boolean selected = (boolean)table.getModel().getValueAt(row, 0);
+					boolean selected = (Boolean)table.getModel().getValueAt(row, 0);
 					if (selected) {
 						if (!mainDependencies.contains(dep)) {
 							mainDependencies.add(dep);

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java
Patch:
@@ -87,7 +87,7 @@ public class GdxSetupUI extends JFrame {
 	ProjectBuilder builder;
 	List<ProjectType> modules = new ArrayList<ProjectType>();
 	List<Dependency> dependencies = new ArrayList<Dependency>();
-	ArrayList<ExternalExtension> externalExtensions = new ArrayList<ExternalExtension>();
+	List<ExternalExtension> externalExtensions = new ArrayList<ExternalExtension>();
 
 	UI ui = new UI();
 	static Point point = new Point();
@@ -580,7 +580,7 @@ public void itemStateChanged(ItemEvent e) {
 					}
 				}
 				
-				for (int left = depCounter - 5; left > 1; left--) {
+				for (int left = ((depCounter - 1) % 5); left > 1; left--) {
 					extensionPanel.add(Box.createHorizontalBox());
 				}
 
@@ -696,7 +696,7 @@ public static void main (String[] args) throws Exception {
 			@Override
 			public void run() {
 				new GdxSetupUI();				
-			}			
+			}
 		});
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -212,6 +212,7 @@ public class GdxTests {
 		TiledMapAssetManagerTest.class,
 		TiledMapAtlasAssetManagerTest.class,
 		TiledMapDirectLoaderTest.class,
+		TiledMapModifiedExternalTilesetTest.class,
 		TiledMapObjectLoadingTest.class,
 		TiledMapBench.class,
 		TimerTest.class,

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -84,7 +84,6 @@ public Table (Skin skin) {
 		this.skin = skin;
 
 		cellDefaults = obtainCell();
-		cellDefaults.defaults();
 
 		setTransform(false);
 		setTouchable(Touchable.childrenOnly);
@@ -322,7 +321,7 @@ public void reset () {
 		padRight = backgroundRight;
 		align = Align.center;
 		debug(Debug.none);
-		cellDefaults.defaults();
+		cellDefaults.reset();
 		for (int i = 0, n = columnDefaults.size; i < n; i++) {
 			Cell columnCell = columnDefaults.get(i);
 			if (columnCell != null) cellPool.free(columnCell);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontTest.java
Patch:
@@ -62,9 +62,9 @@ public void create () {
 
 		// Notice that the last [] has been deliberately added to test the effect of excessive pop operations.
 		// They are silently ignored, as expected.
-		Label label = new Label("<<[BLUE]M[RED]u[YELLOW]l[GREEN]t[OLIVE]ic[]o[]l[]o[]r[]*[MAROON]Label[][]>>", skin);
+		Label label = new Label("<<[BLUE]M[RED]u[YELLOW]l[GREEN]t[OLIVE]ic[]o[]l[]o[]r[]*[MAROON]Label[][] [Unknown Color]>>", skin);
 
-		label.setPosition(200, 200);
+		label.setPosition(100, 200);
 		stage.addActor(label);
 
 		Window window = new Window("[RED]Multicolor[GREEN] Title", skin);

File: gdx/src/com/badlogic/gdx/math/Vector3.java
Patch:
@@ -576,7 +576,7 @@ public Vector3 limit (float limit) {
 	public Vector3 limit2 (float limit2) {
 		float len2 = len2();
 		if (len2 > limit2) {
-			scl(limit2 / len2);
+			scl((float) Math.sqrt(limit2 / len2));
 		}
 		return this;
 	}

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.BitmapFontTest;
 import com.badlogic.gdx.tests.FullscreenTest;
 import com.badlogic.gdx.tests.JsonTest;
 import com.badlogic.gdx.tests.extensions.ControllersTest;
@@ -32,7 +33,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new ControllersTest();		
+		GdxTest test = new BitmapFontTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -348,7 +348,6 @@ public void destroyBody (Body body) {
 	 * @param fixture */
 	void destroyFixture(Body body, Fixture fixture) {
 		jniDestroyFixture(addr, body.addr, fixture.addr);
-		fixture.setUserData(null);
 	}
 	
 	private native void jniDestroyFixture(long addr, long bodyAddr, long fixtureAddr); /*

File: extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/OisControllers.java
Patch:
@@ -43,6 +43,8 @@ public class OisControllers {
 	long hwnd = getWindowHandle();
 	Ois ois = new Ois(hwnd);
 	OisController[] controllers;
+	
+	private static final boolean IS_MAC = System.getProperty("os.name").toLowerCase().contains("mac");
 
 	public OisControllers (final DesktopControllerManager manager) {
 		this.manager = manager;
@@ -217,7 +219,7 @@ public String toString () {
 	/** Returns the window handle from LWJGL needed by OIS. */
 	static public long getWindowHandle () {
 		// don't need a window handle for Mac OS X
-		if (System.getProperty("os.name").toLowerCase().contains("mac")) {
+		if (IS_MAC) {
 			return 0;
 		}
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dModelLoader.java
Patch:
@@ -98,7 +98,7 @@ private void parseMeshes (ModelData model, JsonValue json) {
 				for (JsonValue meshPart = meshParts.child; meshPart != null; meshPart = meshPart.next) {
 					ModelMeshPart jsonPart = new ModelMeshPart();
 					String partId = meshPart.getString("id", null);
-					if (id == null) {
+					if (partId == null) {
 						throw new GdxRuntimeException("Not id given for mesh part");
 					}
 					for (ModelMeshPart other : parts) {

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeType.java
Patch:
@@ -625,7 +625,7 @@ public Pixmap getPixmap(Format format, Color color) {
 			}
 
 			Pixmap converted = pixmap;
-			if (format != Format.RGBA8888) {
+			if (format != pixmap.getFormat()) {
 				converted = new Pixmap(pixmap.getWidth(), pixmap.getHeight(), format);
 				Blending blending = Pixmap.getBlending();
 				Pixmap.setBlending(Blending.None);

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -443,11 +443,13 @@ public FreeTypeBitmapFontData generateData (FreeTypeFontParameter parameter) {
 				mainPixmap.setColor(Color.CLEAR);
 				mainPixmap.fill();
 				ByteBuffer buf = mainBitmap.getBuffer();
+				int whiteIntBits = Color.WHITE.toIntBits();
+				int clearIntBits = Color.CLEAR.toIntBits();
 				for (int h = 0; h < glyph.height; h++) {
 					int idx = h * mainBitmap.getPitch();
 					for (int w = 0; w < (glyph.width + glyph.xoffset); w++) {
 						int bit = (buf.get(idx + (w / 8)) >>> (7 - (w % 8))) & 1;
-						mainPixmap.drawPixel(w, h, ((bit == 1) ? Color.WHITE.toIntBits() : Color.CLEAR.toIntBits()));
+						mainPixmap.drawPixel(w, h, ((bit == 1) ? whiteIntBits : clearIntBits));
 					}
 				}
 

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeType.java
Patch:
@@ -28,6 +28,7 @@
 import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.LongMap;
+import com.badlogic.gdx.utils.SharedLibraryLoader;
 
 public class FreeType {
 	// @off

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeType.java
Patch:
@@ -824,7 +824,7 @@ private static int encode (char a, char b, char c, char d) {
 	public static int FT_STROKER_LINEJOIN_MITER_FIXED    = 3;
 
    public static Library initFreeType() {
-   	//new SharedLibraryLoader().load("gdx-freetype");
+   	new SharedLibraryLoader().load("gdx-freetype");
    	long address = initFreeTypeJni();
    	if(address == 0) throw new GdxRuntimeException("Couldn't initialize FreeType library");
    	else return new Library(address);

File: extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java
Patch:
@@ -151,7 +151,7 @@ private void drawAABB (Fixture fixture, Transform transform) {
 			CircleShape shape = (CircleShape)fixture.getShape();
 			float radius = shape.getRadius();
 			vertices[0].set(shape.getPosition());
-			vertices[0].rotate(transform.getRotation()).add(transform.getPosition());
+			transform.mul(vertices[0]);
 			lower.set(vertices[0].x - radius, vertices[0].y - radius);
 			upper.set(vertices[0].x + radius, vertices[0].y + radius);
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -674,8 +674,10 @@ public TextBounds addWrappedText (CharSequence str, float x, float y, float wrap
 					nextStart = lineEnd;
 					// Eat whitespace at start of wrapped line.
 					while (nextStart < length) {
-						if (!BitmapFont.isWhitespace(str.charAt(nextStart))) break;
+						char c = str.charAt(nextStart);
+						if (!BitmapFont.isWhitespace(c)) break;
 						nextStart++;
+						if (c == '\n') break; // Eat only the first wrapped newline.
 					}
 					// Eat whitespace at end of line.
 					while (lineEnd > start) {

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TextureUnpacker.java
Patch:
@@ -135,7 +135,7 @@ private BufferedImage extractImage (BufferedImage page, Region region, File outp
 		// get the needed part of the page and rotate if needed
 		if (region.rotate) {
 			BufferedImage srcImage = page.getSubimage(region.left, region.top, region.height, region.width);
-			splitImage = new BufferedImage(region.height, region.width, page.getType());
+			splitImage = new BufferedImage(region.width, region.height, page.getType());
 
 			AffineTransform transform = new AffineTransform();
 			transform.rotate(Math.toRadians(90.0));

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TextureUnpacker.java
Patch:
@@ -135,7 +135,7 @@ private BufferedImage extractImage (BufferedImage page, Region region, File outp
 		// get the needed part of the page and rotate if needed
 		if (region.rotate) {
 			BufferedImage srcImage = page.getSubimage(region.left, region.top, region.height, region.width);
-			splitImage = new BufferedImage(region.height, region.width, page.getType());
+			splitImage = new BufferedImage(region.width, region.height, page.getType());
 
 			AffineTransform transform = new AffineTransform();
 			transform.rotate(Math.toRadians(90.0));

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Dialog.java
Patch:
@@ -55,6 +55,7 @@ public boolean touchDown (InputEvent event, float x, float y, int pointer, int b
 
 	public Dialog (String title, Skin skin) {
 		super(title, skin.get(WindowStyle.class));
+		setSkin(skin);
 		this.skin = skin;
 		initialize();
 	}

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -373,6 +373,8 @@ protected void loadTileSet (TiledMap map, Element element, FileHandle tmxFile, I
 					tile.setOffsetY(-offsetY);
 					tileset.putTile(tile.getId(), tile);
 				}
+				if (name != null)
+					tileset.setName(name);
 			}
 			Array<Element> tileElements = element.getChildrenByName("tile");
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -75,6 +75,8 @@ public class LwjglApplicationConfiguration {
 	public String preferencesDirectory = ".prefs/";
 	/** Callback used when trying to create a display, can handle failures, default value is null (disabled) */
 	public LwjglGraphics.SetDisplayModeCallback setDisplayModeCallback;
+	/** enable HDPI mode on Mac OS X **/
+	public boolean useHDPI = false;
 
 	Array<String> iconPaths = new Array();
 	Array<FileType> iconFileTypes = new Array();	

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglNativesLoader.java
Patch:
@@ -30,7 +30,7 @@ public final class LwjglNativesLoader {
 	static public boolean load = true;
 
 	static {
-		System.setProperty("org.lwjgl.input.Mouse.allowNegativeMouseCoords", "true");
+		System.setProperty("org.lwjgl.input.Mouse.allowNegativeMouseCoords", "true");		
 
 		// Don't extract natives if using JWS.
 		try {

File: gdx/src/com/badlogic/gdx/Game.java
Patch:
@@ -24,7 +24,7 @@
  * screen is set.
  * </p> */
 public abstract class Game implements ApplicationListener {
-	private Screen screen;
+	protected Screen screen;
 
 	@Override
 	public void dispose () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/MoveToAction.java
Patch:
@@ -26,8 +26,8 @@ public class MoveToAction extends TemporalAction {
 	private int alignment = Align.bottomLeft;
 
 	protected void begin () {
-		startX = target.getX();
-		startY = target.getY();
+		startX = target.getX(alignment);
+		startY = target.getY(alignment);
 	}
 
 	protected void update (float percent) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/I18NMessageTest.java
Patch:
@@ -50,7 +50,7 @@ public void create () {
 
 		try {
 			FileHandle bfh = Gdx.files.internal("data/i18n/message1");
-			rb_root = I18NBundle.createBundle(bfh, Locale.ROOT);
+			rb_root = I18NBundle.createBundle(bfh, new Locale("", "", "")); // Locale.ROOT doesn't exist in Android API level 8
 			rb_default = I18NBundle.createBundle(bfh);
 			rb_en = I18NBundle.createBundle(bfh, new Locale("en", "US"));
 			rb_it = I18NBundle.createBundle(bfh, new Locale("it", "IT"));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/I18NSimpleMessageTest.java
Patch:
@@ -52,7 +52,7 @@ public void create () {
 
 		try {
 			FileHandle bfh = Gdx.files.internal("data/i18n/message2");
-			rb_root = I18NBundle.createBundle(bfh, Locale.ROOT);
+			rb_root = I18NBundle.createBundle(bfh, new Locale("", "", "")); // Locale.ROOT doesn't exist in Android API level 8
 			rb_default = I18NBundle.createBundle(bfh);
 			rb_en = I18NBundle.createBundle(bfh, new Locale("en", "US"));
 			rb_it = I18NBundle.createBundle(bfh, new Locale("it", "IT"));

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.tests.FullscreenTest;
-import com.badlogic.gdx.tests.JsonReaderTest;
+import com.badlogic.gdx.tests.JsonTest;
 import com.badlogic.gdx.tests.extensions.ControllersTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -227,7 +227,7 @@ public class GdxTests {
 		YDownTest.class,
 		FreeTypeFontLoaderTest.class,
 		PngTest.class,
-		JsonReaderTest.class
+		JsonTest.class
 		// @on
 
 		// SoundTouchTest.class, Mpg123Test.class, WavTest.class, FreeTypeTest.class,

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/MoveToAction.java
Patch:
@@ -26,8 +26,8 @@ public class MoveToAction extends TemporalAction {
 	private int alignment = Align.bottomLeft;
 
 	protected void begin () {
-		startX = target.getX();
-		startY = target.getY();
+		startX = target.getX(alignment);
+		startY = target.getY(alignment);
 	}
 
 	protected void update (float percent) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/I18NMessageTest.java
Patch:
@@ -50,7 +50,7 @@ public void create () {
 
 		try {
 			FileHandle bfh = Gdx.files.internal("data/i18n/message1");
-			rb_root = I18NBundle.createBundle(bfh, Locale.ROOT);
+			rb_root = I18NBundle.createBundle(bfh, new Locale("", "", "")); // Locale.ROOT doesn't exist in Android API level 8
 			rb_default = I18NBundle.createBundle(bfh);
 			rb_en = I18NBundle.createBundle(bfh, new Locale("en", "US"));
 			rb_it = I18NBundle.createBundle(bfh, new Locale("it", "IT"));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/I18NSimpleMessageTest.java
Patch:
@@ -52,7 +52,7 @@ public void create () {
 
 		try {
 			FileHandle bfh = Gdx.files.internal("data/i18n/message2");
-			rb_root = I18NBundle.createBundle(bfh, Locale.ROOT);
+			rb_root = I18NBundle.createBundle(bfh, new Locale("", "", "")); // Locale.ROOT doesn't exist in Android API level 8
 			rb_default = I18NBundle.createBundle(bfh);
 			rb_en = I18NBundle.createBundle(bfh, new Locale("en", "US"));
 			rb_it = I18NBundle.createBundle(bfh, new Locale("it", "IT"));

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglNativesLoader.java
Patch:
@@ -56,9 +56,7 @@ static public void load () {
 				if (!LwjglApplicationConfiguration.disableAudio)
 					loader.extractFile(is64Bit ? "OpenAL64.dll" : "OpenAL32.dll", nativesDir.getName());
 			} else if (isMac) {
-				File extractedFile = loader.extractFile("liblwjgl.jnilib", null);
-				nativesDir = extractedFile.getParentFile();
-				new FileHandle(extractedFile).copyTo(new FileHandle(new File(nativesDir, "liblwjgl.dylib")));
+				nativesDir = loader.extractFile("liblwjgl.dylib", null).getParentFile();
 				if (!LwjglApplicationConfiguration.disableAudio) loader.extractFile("openal.dylib", nativesDir.getName());
 			} else if (isLinux) {
 				nativesDir = loader.extractFile(is64Bit ? "liblwjgl64.so" : "liblwjgl.so", null).getParentFile();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -1008,7 +1008,7 @@ public void setCancelTouchFocus (boolean cancelTouchFocus) {
 	}
 
 	public void drawDebug (ShapeRenderer shapes) {
-		drawDebugBounds(shapes);
+		shapes.flush();
 		applyTransform(shapes, computeTransform());
 		if (ScissorStack.pushScissors(scissorBounds)) {
 			drawDebugChildren(shapes);

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -39,8 +39,6 @@ public static void main (String[] argv) {
 //		config.height = 241;
 		config.width = 960;
 		config.height = 600;
-		config.setFromDisplayMode(LwjglApplicationConfiguration.getDesktopDisplayMode());
-		config.fullscreen = true;
 		new LwjglApplication(test, config);
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,7 +18,9 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.FullscreenTest;
 import com.badlogic.gdx.tests.JsonReaderTest;
+import com.badlogic.gdx.tests.extensions.ControllersTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class LwjglDebugStarter {
@@ -30,7 +32,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new JsonReaderTest();		
+		GdxTest test = new ControllersTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: gdx/src/com/badlogic/gdx/math/MathUtils.java
Patch:
@@ -206,7 +206,7 @@ public static float randomTriangular (float max) {
 	 * @param min the lower limit
 	 * @param max the upper limit */
 	public static float randomTriangular (float min, float max) {
-		return randomTriangular(min, max, (max - min) * .5f);
+		return randomTriangular(min, max, min + (max - min) * 0.5f);
 	}
 
 	/** Returns a triangularly distributed random number between {@code min} (inclusive) and {@code max} (exclusive), where values

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20.java
Patch:
@@ -495,7 +495,7 @@ public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, in
             gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, buffer);
         } else {
             Pixmap pixmap = Pixmap.pixmaps.get(((IntBuffer) pixels).get(0));
-            gl.texSubImage2D(target, level, xoffset, yoffset, width, height, pixmap.getCanvasElement());
+            gl.texSubImage2D(target, level, xoffset, yoffset, format, type, pixmap.getCanvasElement());
         }
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -1253,10 +1253,12 @@ public void setTimeline (float[] timeline) {
 			this.timeline = timeline;
 		}
 
+		/** @return the r, g and b values for every timeline position */
 		public float[] getColors () {
 			return colors;
 		}
 
+		/** @param colors the r, g and b values for every timeline position */
 		public void setColors (float[] colors) {
 			this.colors = colors;
 		}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java
Patch:
@@ -602,7 +602,7 @@ File getDirectory () {
 			} else {
 				JFileChooser chooser = new JFileChooser();
 				chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
-				chooser.setDialogTitle("Chose destination");
+				chooser.setDialogTitle("Choose destination");
 				int result = chooser.showOpenDialog(null);
 				if (result == JFileChooser.APPROVE_OPTION) {
 					File dir = chooser.getSelectedFile();

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java
Patch:
@@ -602,7 +602,7 @@ File getDirectory () {
 			} else {
 				JFileChooser chooser = new JFileChooser();
 				chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
-				chooser.setDialogTitle("Chose destination");
+				chooser.setDialogTitle("Choose destination");
 				int result = chooser.showOpenDialog(null);
 				if (result == JFileChooser.APPROVE_OPTION) {
 					File dir = chooser.getSelectedFile();

File: gdx/src/com/badlogic/gdx/utils/UBJsonReader.java
Patch:
@@ -120,6 +120,7 @@ protected JsonValue parseArray (final DataInputStream din) throws IOException {
 		while (din.available() > 0 && type != ']') {
 			final JsonValue val = parse(din, type);
 			if (prev != null) {
+				val.prev = prev;
 				prev.next = val;
 				result.size++;
 			} else {
@@ -155,6 +156,7 @@ protected JsonValue parseObject (final DataInputStream din) throws IOException {
 			final JsonValue child = parse(din, valueType == 0 ? din.readByte() : valueType);
 			child.setName(key);
 			if (prev != null) {
+				child.prev = prev;
 				prev.next = child;
 				result.size++;
 			} else {

File: gdx/src/com/badlogic/gdx/utils/UBJsonReader.java
Patch:
@@ -120,6 +120,7 @@ protected JsonValue parseArray (final DataInputStream din) throws IOException {
 		while (din.available() > 0 && type != ']') {
 			final JsonValue val = parse(din, type);
 			if (prev != null) {
+				val.prev = prev;
 				prev.next = val;
 				result.size++;
 			} else {
@@ -155,6 +156,7 @@ protected JsonValue parseObject (final DataInputStream din) throws IOException {
 			final JsonValue child = parse(din, valueType == 0 ? din.readByte() : valueType);
 			child.setName(key);
 			if (prev != null) {
+				child.prev = prev;
 				prev.next = child;
 				result.size++;
 			} else {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
-import com.badlogic.gdx.tests.FreeTypeFontLoaderTest;
+import com.badlogic.gdx.tests.JsonReaderTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class LwjglDebugStarter {
@@ -30,7 +30,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new FreeTypeFontLoaderTest();		
+		GdxTest test = new JsonReaderTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextArea.java
Patch:
@@ -192,6 +192,8 @@ private int calculateCurrentLineIndex (int cursor) {
 
 	@Override
 	protected void sizeChanged () {
+		lastText = null; // Cause calculateOffsets to recalculate the line breaks.
+
 		// The number of lines showed must be updated whenever the height is updated
 		BitmapFont font = style.font;
 		Drawable background = style.background;
@@ -329,7 +331,7 @@ protected void moveCursor (boolean forward, boolean jump) {
 	protected boolean continueCursor (int index, int offset) {
 		int pos = calculateCurrentLineIndex(index + offset);
 		return super.continueCursor(index, offset)
-			&& (pos < 0 || pos >= linesBreak.size || (linesBreak.items[pos + 1] != index) || (linesBreak.items[pos + 1] == linesBreak.items[pos + 2]));
+			&& (pos < 0 || pos >= linesBreak.size - 2 || (linesBreak.items[pos + 1] != index) || (linesBreak.items[pos + 1] == linesBreak.items[pos + 2]));
 	}
 
 	public int getCursorLine () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java
Patch:
@@ -846,8 +846,8 @@ public float getComputedPadRight () {
 		return computedPadRight;
 	}
 
-	public Cell<T> row () {
-		return table.row();
+	public void row () {
+		table.row();
 	}
 
 	public Table getTable () {

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -92,7 +92,7 @@ public Array (T[] array) {
 	public Array (boolean ordered, T[] array, int start, int count) {
 		this(ordered, count, (Class)array.getClass().getComponentType());
 		size = count;
-		System.arraycopy(array, 0, items, 0, size);
+		System.arraycopy(array, start, items, 0, size);
 	}
 
 	public void add (T value) {

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -92,7 +92,7 @@ public Array (T[] array) {
 	public Array (boolean ordered, T[] array, int start, int count) {
 		this(ordered, count, (Class)array.getClass().getComponentType());
 		size = count;
-		System.arraycopy(array, 0, items, 0, size);
+		System.arraycopy(array, start, items, 0, size);
 	}
 
 	public void add (T value) {

File: gdx/src/com/badlogic/gdx/utils/JsonValue.java
Patch:
@@ -894,7 +894,7 @@ public String toString () {
 		if (isValue())
 			return name == null ? asString() : name + ": " + asString();
 		else
-			return name == null ? asString() : name + ": " + prettyPrint(OutputType.minimal, 0);
+			return (name == null ? "" : name + ": ") + prettyPrint(OutputType.minimal, 0);
 	}
 
 	public String prettyPrint (OutputType outputType, int singleLineColumns) {

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btRaycastVehicle.java
Patch:
@@ -246,9 +246,8 @@ public void updateFriction(float timeStep) {
   }
 
   public btRigidBody getRigidBody() {
-    long cPtr = DynamicsJNI.btRaycastVehicle_getRigidBody__SWIG_0(swigCPtr, this);
-    return (cPtr == 0) ? null : new btRigidBody(cPtr, false);
-  }
+	return (btRigidBody)btCollisionObject.getInstance(DynamicsJNI.btRaycastVehicle_getRigidBody__SWIG_0(swigCPtr, this), false);
+}
 
   public int getRightAxis() {
     return DynamicsJNI.btRaycastVehicle_getRightAxis(swigCPtr, this);

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btSolverBody.java
Patch:
@@ -172,9 +172,8 @@ public void setOriginalBody(btRigidBody value) {
   }
 
   public btRigidBody getOriginalBody() {
-    long cPtr = DynamicsJNI.btSolverBody_originalBody_get(swigCPtr, this);
-    return (cPtr == 0) ? null : new btRigidBody(cPtr, false);
-  }
+	return (btRigidBody)btCollisionObject.getInstance(DynamicsJNI.btSolverBody_originalBody_get(swigCPtr, this), false);
+}
 
   public void getVelocityInLocalPointNoDelta(Vector3 rel_pos, Vector3 velocity) {
     DynamicsJNI.btSolverBody_getVelocityInLocalPointNoDelta(swigCPtr, this, rel_pos, velocity);

File: extensions/gdx-bullet/jni/swig-src/softbody/com/badlogic/gdx/physics/bullet/softbody/btSoftColliders.java
Patch:
@@ -354,9 +354,8 @@ public void setRigidBody(btRigidBody value) {
     }
   
     public btRigidBody getRigidBody() {
-      long cPtr = SoftbodyJNI.btSoftColliders_CollideSDF_RS_rigidBody_get(swigCPtr, this);
-      return (cPtr == 0) ? null : new btRigidBody(cPtr, false);
-    }
+  	return (btRigidBody)btCollisionObject.getInstance(SoftbodyJNI.btSoftColliders_CollideSDF_RS_rigidBody_get(swigCPtr, this), false);
+  }
   
     public void setDynmargin(float value) {
       SoftbodyJNI.btSoftColliders_CollideSDF_RS_dynmargin_set(swigCPtr, this, value);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -380,6 +380,8 @@ public boolean setDisplayMode (int width, int height, boolean fullscreen) {
 
 			Display.setDisplayMode(targetDisplayMode);
 			Display.setFullscreen(fullscreen);
+			Display.setResizable(!fullscreen && config.resizable);
+			
 			if (Gdx.gl != null) Gdx.gl.glViewport(0, 0, targetDisplayMode.getWidth(), targetDisplayMode.getHeight());
 			config.width = targetDisplayMode.getWidth();
 			config.height = targetDisplayMode.getHeight();

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/PreloaderBundleGenerator.java
Patch:
@@ -118,7 +118,7 @@ public String generate (TreeLogger logger, GeneratorContext context, String type
 		for (Entry<String, ArrayList<Asset>> bundle : bundles.entrySet()) {
 			StringBuffer buffer = new StringBuffer();
 			for (Asset asset : bundle.getValue()) {
-				String path = asset.file.path().replace('\\', '/').replace(assetOutputPath + "assets/", "").replaceFirst("assets", "");
+				String path = asset.file.path().replace('\\', '/').replace(assetOutputPath, "").replaceFirst("assets/", "");
 				if (path.startsWith("/")) path = path.substring(1);
 				buffer.append(asset.type.code);
 				buffer.append(":");

File: gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
Patch:
@@ -207,7 +207,7 @@ public void setCenterX(float x){
 		setX(x - width / 2);
 	}
 	
-	/** Sets the y position so that it is centered on the given x parameter */
+	/** Sets the y position so that it is centered on the given y parameter */
 	public void setCenterY(float y){
 		setY(y - height / 2);
 	}

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -513,7 +513,7 @@ public String toString () {
 		return buffer.toString();
 	}
 
-	public Iterator<Entry<K>> iterator () {
+	public Entries<K> iterator () {
 		return entries();
 	}
 
@@ -650,7 +650,7 @@ public boolean hasNext () {
 			return hasNext;
 		}
 
-		public Iterator<Entry<K>> iterator () {
+		public Entries<K> iterator () {
 			return this;
 		}
 
@@ -706,7 +706,7 @@ public K next () {
 			return key;
 		}
 
-		public Iterator<K> iterator () {
+		public Keys<K> iterator () {
 			return this;
 		}
 

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -513,7 +513,7 @@ public String toString () {
 		return buffer.toString();
 	}
 
-	public Iterator<Entry<K>> iterator () {
+	public Entries<K> iterator () {
 		return entries();
 	}
 
@@ -650,7 +650,7 @@ public boolean hasNext () {
 			return hasNext;
 		}
 
-		public Iterator<Entry<K>> iterator () {
+		public Entries<K> iterator () {
 			return this;
 		}
 
@@ -706,7 +706,7 @@ public K next () {
 			return key;
 		}
 
-		public Iterator<K> iterator () {
+		public Keys<K> iterator () {
 			return this;
 		}
 

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -509,7 +509,7 @@ public K next () {
 			return key;
 		}
 
-		public Iterator<K> iterator () {
+		public ObjectSetIterator<K> iterator () {
 			return this;
 		}
 

File: gdx/src/com/badlogic/gdx/utils/OrderedMap.java
Patch:
@@ -19,6 +19,8 @@
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
+import com.badlogic.gdx.utils.ObjectMap.Entries;
+
 /** An {@link ObjectMap} that also stores keys in an {@link Array} using the insertion order. There is some additional overhead for
  * put and remove. Iteration over the {@link #entries()}, {@link #keys()}, and {@link #values()} is ordered and faster than an
  * unordered map. Keys can also be accessed and the order changed using {@link #orderedKeys()}.
@@ -73,7 +75,7 @@ public Array<K> orderedKeys () {
 		return keys;
 	}
 
-	public Iterator<Entry<K, V>> iterator () {
+	public Entries<K, V> iterator () {
 		return entries();
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -239,7 +239,7 @@ else if (style.background != null)
 
 	/** Get the set of selected items, useful when multiple items are selected
 	 * @return a Selection object containing the selected elements */
-	public Selection<T> getSelection () {
+	public ArraySelection<T> getSelection () {
 		return selection;
 	}
 
@@ -412,6 +412,7 @@ public void show (Stage stage) {
 			if (actor != null && !actor.isDescendantOf(this)) previousScrollFocus = actor;
 			stage.setScrollFocus(this);
 
+			list.selection.set(selectBox.getSelected());
 			list.setTouchable(Touchable.enabled);
 			clearActions();
 			selectBox.onShow(this, below);

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplicationConfiguration.java
Patch:
@@ -89,4 +89,7 @@ public class IOSApplicationConfiguration {
 
 	/** whether or not to allow background music from iPod **/
 	public boolean allowIpod = false;
+	
+	/** whether or not the onScreenKeyboard should be closed on return key **/
+	public boolean keyboardCloseOnReturn = true;
 }

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplicationConfiguration.java
Patch:
@@ -89,4 +89,7 @@ public class IOSApplicationConfiguration {
 
 	/** whether or not to allow background music from iPod **/
 	public boolean allowIpod = false;
+	
+	/** whether or not the onScreenKeyboard should be closed on return key **/
+	public boolean keyboardCloseOnReturn = true;
 }

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
Patch:
@@ -43,6 +43,7 @@
 import com.badlogic.gdx.LifecycleListener;
 import com.badlogic.gdx.Net;
 import com.badlogic.gdx.Preferences;
+import com.badlogic.gdx.backends.iosrobovm.custom.UIScreen;
 import com.badlogic.gdx.backends.iosrobovm.objectal.OALAudioSession;
 import com.badlogic.gdx.backends.iosrobovm.objectal.OALSimpleAudio;
 import com.badlogic.gdx.graphics.GL20;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/custom/UIScreen.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.badlogic.gdx.backends.iosrobovm;
+package com.badlogic.gdx.backends.iosrobovm.custom;
 
 /*<imports>*/
 import java.io.*;

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/IOSRobovmTests.java
Patch:
@@ -28,7 +28,7 @@ public class IOSRobovmTests extends IOSApplication.Delegate {
 	protected IOSApplication createApplication() {
 		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
 		config.useAccelerometer = false;
-		return new IOSApplication(new BulletTestCollection(), config);
+		return new IOSApplication(new AccelerometerTest(), config);
 	}
 
 	public static void main(String[] argv) {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -95,7 +95,7 @@ protected TouchEvent newObject () {
 		}
 	};
 
-	public static final int NUM_TOUCHES = 40;
+	public static final int NUM_TOUCHES = 20;
 
 	ArrayList<OnKeyListener> keyListeners = new ArrayList();
 	ArrayList<KeyEvent> keyEvents = new ArrayList();

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePacker.java
Patch:
@@ -89,7 +89,7 @@ public void addImage (BufferedImage image, String name) {
 
 	public void pack (File outputDir, String packFileName) {
 		if (packFileName.endsWith(settings.atlasExtension))
-			packFileName = packFileName.substring(packFileName.length() - settings.atlasExtension.length());
+			packFileName = packFileName.substring(0, packFileName.length() - settings.atlasExtension.length());
 		outputDir.mkdirs();
 
 		for (int i = 0, n = settings.scale.length; i < n; i++) {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidVisibilityListener.java
Patch:
@@ -37,7 +37,7 @@ public void run () {
 				}
 			});
 		} catch (Throwable t) {
-			application.log("AndroidApplication", "Can't create OnSystemUiVisibilityChangeListener", t);
+			application.log("AndroidApplication", "Can't create OnSystemUiVisibilityChangeListener, unable to use immersive mode.", t);
 		}
 	}
 }

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/FragmentTestStarter.java
Patch:
@@ -132,7 +132,9 @@ public void onCreate (Bundle savedInstanceState) {
 
 		@Override
 		public View onCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-			return initializeForView(test, new AndroidApplicationConfiguration());
+			AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
+			config.useImmersiveMode = true;
+			return initializeForView(test, config);
 		}
 		
 	}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidVisibilityListener.java
Patch:
@@ -37,7 +37,7 @@ public void run () {
 				}
 			});
 		} catch (Throwable t) {
-			application.log("AndroidApplication", "Can't create OnSystemUiVisibilityChangeListener", t);
+			application.log("AndroidApplication", "Can't create OnSystemUiVisibilityChangeListener, unable to use immersive mode.", t);
 		}
 	}
 }

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/FragmentTestStarter.java
Patch:
@@ -132,7 +132,9 @@ public void onCreate (Bundle savedInstanceState) {
 
 		@Override
 		public View onCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-			return initializeForView(test, new AndroidApplicationConfiguration());
+			AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
+			config.useImmersiveMode = true;
+			return initializeForView(test, config);
 		}
 		
 	}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -341,6 +341,7 @@ public Clipboard getClipboard () {
 	public void postRunnable (Runnable runnable) {
 		synchronized (runnables) {
 			runnables.add(runnable);
+			Gdx.graphics.requestRendering();
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -46,10 +46,9 @@
 import com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile;
 import com.badlogic.gdx.math.Polygon;
 import com.badlogic.gdx.math.Polyline;
-import com.badlogic.gdx.utils.*;
 import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.LongArray;
 import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.badlogic.gdx.utils.IntArray;
 import com.badlogic.gdx.utils.ObjectMap;
 import com.badlogic.gdx.utils.XmlReader;
 import com.badlogic.gdx.utils.XmlReader.Element;
@@ -368,7 +367,7 @@ protected void loadTileSet (TiledMap map, Element element, FileHandle tmxFile, I
 					if (animationElement != null) {
 
 						Array<StaticTiledMapTile> staticTiles = new Array<StaticTiledMapTile>();
-						LongArray intervals = new LongArray();
+						IntArray intervals = new IntArray();
 						for (Element frameElement: animationElement.getChildrenByName("frame")) {
 							staticTiles.add((StaticTiledMapTile) tileset.getTile(firstgid + frameElement.getIntAttribute("tileid")));
 							intervals.add(frameElement.getIntAttribute("duration"));

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/gen/ReflectionCacheSourceCreator.java
Patch:
@@ -322,7 +322,7 @@ private String generateMethodStub (MethodStub stub) {
 			return "";
 		}
 
-		if ((stub.enclosingType.startsWith("java") && !stub.enclosingType.startsWith("java.utils")) || stub.enclosingType.contains("google")) {
+		if ((stub.enclosingType.startsWith("java") && !stub.enclosingType.startsWith("java.util")) || stub.enclosingType.contains("google")) {
 			logger.log(Type.INFO, "not emitting code for accessing method " + stub.name + " in class '" + stub.enclosingType
 				+ ", either in java.* or GWT related class");
 			return "";

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MusicTest.java
Patch:
@@ -85,7 +85,7 @@ public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
 		batch.draw(buttons, 0, 0);
-		font.draw(batch, String.format("%02d:%02d", (int)currentPosition / 60, (int)currentPosition % 60), 365, 35);
+		font.draw(batch, (int)currentPosition / 60 + ":" + (int)currentPosition % 60, 365, 35);
 		batch.end();
 
 		sliderUpdating = true;

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/gen/ReflectionCacheSourceCreator.java
Patch:
@@ -322,7 +322,7 @@ private String generateMethodStub (MethodStub stub) {
 			return "";
 		}
 
-		if (stub.enclosingType.startsWith("java") || stub.enclosingType.contains("google")) {
+		if ((stub.enclosingType.startsWith("java") && !stub.enclosingType.startsWith("java.utils")) || stub.enclosingType.contains("google")) {
 			logger.log(Type.INFO, "not emitting code for accessing method " + stub.name + " in class '" + stub.enclosingType
 				+ ", either in java.* or GWT related class");
 			return "";

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGeneratorLoader.java
Patch:
@@ -41,8 +41,7 @@ public FreeTypeFontGeneratorLoader (FileHandleResolver resolver) {
 	@Override
 	public FreeTypeFontGenerator load (AssetManager assetManager, String fileName, FileHandle file,
 		FreeTypeFontGeneratorParameters parameter) {
-		FreeTypeFontGenerator generator = new FreeTypeFontGenerator(file);
-
+		FreeTypeFontGenerator generator = new FreeTypeFontGenerator(file.sibling(file.name().substring(0, file.name().length() - 4)));
 		return generator;
 	}
 

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreetypeFontLoader.java
Patch:
@@ -38,7 +38,7 @@ public void loadAsync (AssetManager manager, String fileName, FileHandle file, F
 	@Override
 	public BitmapFont loadSync (AssetManager manager, String fileName, FileHandle file, FreeTypeFontLoaderParameter parameter) {
 		if(parameter == null) throw new RuntimeException("FreetypeFontParameter must be set in AssetManager#load to point at a TTF file!");
-		FreeTypeFontGenerator generator = manager.get(parameter.fontFileName, FreeTypeFontGenerator.class);	
+		FreeTypeFontGenerator generator = manager.get(parameter.fontFileName + ".gen", FreeTypeFontGenerator.class);	
 		FreeTypeBitmapFontData data = generator.generateData(parameter.fontParameters);
 		BitmapFont font = new BitmapFont(data, data.getTextureRegions(), false);
 		font.setOwnsTexture(true);
@@ -48,7 +48,7 @@ public BitmapFont loadSync (AssetManager manager, String fileName, FileHandle fi
 	@Override
 	public Array<AssetDescriptor> getDependencies (String fileName, FileHandle file, FreeTypeFontLoaderParameter parameter) {
 		Array<AssetDescriptor> deps = new Array<AssetDescriptor>();
-		deps.add(new AssetDescriptor<FreeTypeFontGenerator>(parameter.fontFileName, FreeTypeFontGenerator.class));
+		deps.add(new AssetDescriptor<FreeTypeFontGenerator>(parameter.fontFileName + ".gen", FreeTypeFontGenerator.class));
 		return deps;
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,6 +21,8 @@
 import com.badlogic.gdx.tests.AssetManagerTest;
 import com.badlogic.gdx.tests.BitmapFontAtlasRegionTest;
 import com.badlogic.gdx.tests.BulletTestCollection;
+import com.badlogic.gdx.tests.FreeTypeFontLoaderTest;
+import com.badlogic.gdx.tests.Issue2465;
 import com.badlogic.gdx.tests.SpriteBatchTest;
 import com.badlogic.gdx.tests.StageDebugTest;
 import com.badlogic.gdx.tests.StageTest;
@@ -35,7 +37,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new BulletTestCollection();		
+		GdxTest test = new FreeTypeFontLoaderTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
Patch:
@@ -431,12 +431,12 @@ public Clipboard getClipboard () {
 		return new Clipboard() {
 			@Override
 			public void setContents (String content) {
-				UIPasteboard.getGeneral().setString(content);
+				UIPasteboard.getGeneralPasteboard().setString(content);
 			}
 
 			@Override
 			public String getContents () {
-				return UIPasteboard.getGeneral().getString();
+				return UIPasteboard.getGeneralPasteboard().getString();
 			}
 		};
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ClickListener.java
Patch:
@@ -38,7 +38,7 @@ public class ClickListener extends InputListener {
 	private int pressedButton = -1;
 	private int button;
 	private boolean pressed, over, cancelled;
-	private float visualPressedTime;
+	private long visualPressedTime;
 	private long tapCountInterval = (long)(0.4f * 1000000000l);
 	private int tapCount;
 	private long lastTapTime;
@@ -61,7 +61,7 @@ public boolean touchDown (InputEvent event, float x, float y, int pointer, int b
 		pressedButton = button;
 		touchDownX = x;
 		touchDownY = y;
-		visualPressedTime = TimeUtils.nanoTime() + visualPressedDuration * 1000000000;
+		visualPressedTime = TimeUtils.millis() + (long)(visualPressedDuration * 1000);
 		return true;
 	}
 
@@ -147,7 +147,7 @@ public boolean isPressed () {
 	public boolean isVisualPressed () {
 		if (pressed) return true;
 		if (visualPressedTime <= 0) return false;
-		if (visualPressedTime > TimeUtils.nanoTime() && Gdx.graphics.isContinuousRendering()) return true;
+		if (visualPressedTime > TimeUtils.millis() && Gdx.graphics.isContinuousRendering()) return true;
 		visualPressedTime = 0;
 		return false;
 	}

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePacker.java
Patch:
@@ -575,8 +575,10 @@ public Settings (Settings settings) {
 			useIndexes = settings.useIndexes;
 			bleed = settings.bleed;
 			limitMemory = settings.limitMemory;
+			grid = settings.grid;
 			scale = settings.scale;
 			scaleSuffix = settings.scaleSuffix;
+			atlasExtension = settings.atlasExtension;
 		}
 
 		public String getScaledPackFileName (String packFileName, int scaleIndex) {

File: gdx/src/com/badlogic/gdx/maps/tiled/tiles/AnimatedTiledMapTile.java
Patch:
@@ -128,7 +128,7 @@ public AnimatedTiledMapTile (float interval, Array<StaticTiledMapTile> frameTile
 		this.frameTiles = new StaticTiledMapTile[frameTiles.size];
 		this.frameCount = frameTiles.size;
 
-		this.loopDuration = (long)(frameTiles.size * interval * 1000f);
+		this.loopDuration = frameTiles.size * (long)(interval * 1000f);
 		this.animationIntervals = new long[frameTiles.size];
 		for (int i = 0; i < frameTiles.size; ++i){
 			this.frameTiles[i] = frameTiles.get(i);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/Mp3.java
Patch:
@@ -41,9 +41,10 @@ public Music (OpenALAudio audio, FileHandle file) {
 			if (audio.noDevice) return;
 			bitstream = new Bitstream(file.read());
 			decoder = new MP3Decoder();
+			bufferOverhead = 4096;
 			try {
 				Header header = bitstream.readFrame();
-				if (header == null) throw new GdxRuntimeException("empty ogg");
+				if (header == null) throw new GdxRuntimeException("Empty MP3");
 				int channels = header.mode() == Header.SINGLE_CHANNEL ? 1 : 2;
 				outputBuffer = new OutputBuffer(channels, false);
 				decoder.setOutputBuffer(outputBuffer);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/Mp3.java
Patch:
@@ -41,9 +41,10 @@ public Music (OpenALAudio audio, FileHandle file) {
 			if (audio.noDevice) return;
 			bitstream = new Bitstream(file.read());
 			decoder = new MP3Decoder();
+			bufferOverhead = 4096;
 			try {
 				Header header = bitstream.readFrame();
-				if (header == null) throw new GdxRuntimeException("empty ogg");
+				if (header == null) throw new GdxRuntimeException("Empty MP3");
 				int channels = header.mode() == Header.SINGLE_CHANNEL ? 1 : 2;
 				outputBuffer = new OutputBuffer(channels, false);
 				decoder.setOutputBuffer(outputBuffer);

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePacker.java
Patch:
@@ -615,7 +615,7 @@ public int compare (File file1, File file2) {
 			});
 			processor.process(new File(input), new File(output));
 		} catch (Exception ex) {
-			throw new RuntimeException("Error packing files.", ex);
+			throw new RuntimeException("Error packing images.", ex);
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/math/Matrix3.java
Patch:
@@ -143,7 +143,7 @@ public Matrix3 setToRotation (float degrees) {
 	}
 
 	/** Sets this matrix to a rotation matrix that will rotate any vector in counter-clockwise direction around the z-axis.
-	 * @param radians the angle in degrees.
+	 * @param radians the angle in radians.
 	 * @return This matrix for the purpose of chaining operations. */
 	public Matrix3 setToRotationRad (float radians) {
 		float cos = (float)Math.cos(radians);
@@ -429,7 +429,7 @@ public Matrix3 rotate (float degrees) {
 
 	/** Postmultiplies this matrix with a (counter-clockwise) rotation matrix. Postmultiplication is also used by OpenGL ES' 1.x
 	 * glTranslate/glRotate/glScale.
-	 * @param radians The angle in degrees
+	 * @param radians The angle in radians
 	 * @return This matrix for the purpose of chaining. */
 	public Matrix3 rotateRad (float radians) {
 		if (radians == 0) return this;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/math/Matrix4.java
Patch:
@@ -70,7 +70,9 @@ public class Matrix4 implements Serializable {
 	/** WW: Typically the value one. On Vector3 multiplication this value is ignored. */
 	public static final int M33 = 15;
 
-	public final float tmp[] = new float[16];
+	/** @Deprecated Do not use this member, instead use a temporary Matrix4 instance, or create a temporary float array. */
+	@Deprecated
+	public static final float tmp[] = new float[16]; // FIXME Change to private access
 	public final float val[] = new float[16];
 
 	/** Constructs an identity matrix */

File: gdx/src/com/badlogic/gdx/math/Matrix4.java
Patch:
@@ -70,7 +70,9 @@ public class Matrix4 implements Serializable {
 	/** WW: Typically the value one. On Vector3 multiplication this value is ignored. */
 	public static final int M33 = 15;
 
-	public final float tmp[] = new float[16];
+	/** @Deprecated Do not use this member, instead use a temporary Matrix4 instance, or create a temporary float array. */
+	@Deprecated
+	public static final float tmp[] = new float[16]; // FIXME Change to private access
 	public final float val[] = new float[16];
 
 	/** Constructs an identity matrix */

File: gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dModelLoader.java
Patch:
@@ -154,7 +154,7 @@ private VertexAttribute[] parseAttributes (JsonValue attributes) {
 			} else if (attr.equals("COLOR")) {
 				vertexAttributes.add(VertexAttribute.ColorUnpacked());
 			} else if (attr.equals("COLORPACKED")) {
-				vertexAttributes.add(VertexAttribute.Color());
+				vertexAttributes.add(VertexAttribute.ColorPacked());
 			} else if (attr.equals("TANGENT")) {
 				vertexAttributes.add(VertexAttribute.Tangent());
 			} else if (attr.equals("BINORMAL")) {

File: gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dModelLoader.java
Patch:
@@ -154,7 +154,7 @@ private VertexAttribute[] parseAttributes (JsonValue attributes) {
 			} else if (attr.equals("COLOR")) {
 				vertexAttributes.add(VertexAttribute.ColorUnpacked());
 			} else if (attr.equals("COLORPACKED")) {
-				vertexAttributes.add(VertexAttribute.Color());
+				vertexAttributes.add(VertexAttribute.ColorPacked());
 			} else if (attr.equals("TANGENT")) {
 				vertexAttributes.add(VertexAttribute.Tangent());
 			} else if (attr.equals("BINORMAL")) {

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
Patch:
@@ -246,6 +246,7 @@ public void draw (CGRect rect) {
 
 		app.debug(tag, "Calculating density, UIScreen.mainScreen.scale: " + scale);
 		if (scale == 2) density = 2f;
+		if (scale == 3) density = 3f;
 
 		int ppi;
 		if (UIDevice.getCurrentDevice().getUserInterfaceIdiom() == UIUserInterfaceIdiom.Pad) {

File: gdx/src/com/badlogic/gdx/math/collision/BoundingBox.java
Patch:
@@ -300,6 +300,7 @@ public BoundingBox ext (BoundingBox bounds, Matrix4 transform) {
 	 * @return This bounding box for chaining. */
 	public BoundingBox mul (Matrix4 transform) {
 		final float x0 = min.x, y0 = min.y, z0 = min.z, x1 = max.x, y1 = max.y, z1 = max.z;
+		inf();
 		ext(tmpVector.set(x0, y0, z0).mul(transform));
 		ext(tmpVector.set(x0, y0, z1).mul(transform));
 		ext(tmpVector.set(x0, y1, z0).mul(transform));

File: gdx/src/com/badlogic/gdx/math/collision/BoundingBox.java
Patch:
@@ -300,6 +300,7 @@ public BoundingBox ext (BoundingBox bounds, Matrix4 transform) {
 	 * @return This bounding box for chaining. */
 	public BoundingBox mul (Matrix4 transform) {
 		final float x0 = min.x, y0 = min.y, z0 = min.z, x1 = max.x, y1 = max.y, z1 = max.z;
+		inf();
 		ext(tmpVector.set(x0, y0, z0).mul(transform));
 		ext(tmpVector.set(x0, y0, z1).mul(transform));
 		ext(tmpVector.set(x0, y1, z0).mul(transform));

File: gdx/src/com/badlogic/gdx/math/collision/BoundingBox.java
Patch:
@@ -49,7 +49,7 @@ public Vector3 getCenter () {
 	/** @param out The {@link Vector3} to receive the center of the bounding box.
 	 * @return The vector specified with the out argument. */
 	public Vector3 getCenter (Vector3 out) {
-		return cnt;
+		return out.set(cnt);
 	}
 
 	public float getCenterX () {

File: gdx/src/com/badlogic/gdx/math/collision/BoundingBox.java
Patch:
@@ -49,7 +49,7 @@ public Vector3 getCenter () {
 	/** @param out The {@link Vector3} to receive the center of the bounding box.
 	 * @return The vector specified with the out argument. */
 	public Vector3 getCenter (Vector3 out) {
-		return cnt;
+		return out.set(cnt);
 	}
 
 	public float getCenterX () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Dialog.java
Patch:
@@ -107,7 +107,9 @@ private void focusChanged (FocusEvent event) {
 				if (isModal && stage != null && stage.getRoot().getChildren().size > 0
 					&& stage.getRoot().getChildren().peek() == Dialog.this) { // Dialog is top most actor.
 					Actor newFocusedActor = event.getRelatedActor();
-					if (newFocusedActor != null && !newFocusedActor.isDescendantOf(Dialog.this)) event.cancel();
+					if (newFocusedActor != null && !newFocusedActor.isDescendantOf(Dialog.this) &&
+						!(newFocusedActor.equals(previousKeyboardFocus) || newFocusedActor.equals(previousScrollFocus)) )
+						event.cancel();
 				}
 			}
 		};

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -460,7 +460,7 @@ public void writeValue (Object value, Class knownType, Class elementType) {
 				return;
 			}
 			if (value instanceof Collection) {
-				if (knownType != null && actualType != knownType && actualType != ArrayList.class) {
+				if (typeName != null && actualType != ArrayList.class && (knownType == null || knownType != actualType)) {
 					writeObjectStart(actualType, knownType);
 					writeArrayStart("items");
 					for (Object item : (Collection)value)
@@ -520,7 +520,7 @@ public void writeValue (Object value, Class knownType, Class elementType) {
 
 			// Enum special case.
 			if (ClassReflection.isAssignableFrom(Enum.class, actualType)) {
-				if (knownType == null || knownType != actualType) {
+				if (typeName != null && (knownType == null || knownType != actualType)) {
 					// Ensures that enums with specific implementations (abstract logic) serialize correctly.
 					if (actualType.getEnumConstants() == null) actualType = actualType.getSuperclass();
 
@@ -837,7 +837,7 @@ public <T> T readValue (Class<T> type, Class elementType, JsonValue jsonData) {
 				return readValue("value", type, jsonData);
 			}
 
-			if (ClassReflection.isAssignableFrom(Collection.class, type)) {
+			if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) {
 				// JSON object wrapper to specify type.
 				jsonData = jsonData.get("items");
 			} else {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL20.java
Patch:
@@ -89,7 +89,7 @@ public void glBlendFuncSeparate (int srcRGB, int dstRGB, int srcAlpha, int dstAl
 
 	public void glBufferData (int target, int size, Buffer data, int usage) {
 		if(data == null)
-			throw new GdxRuntimeException("Using null for the data not possible, blame LWJGL");
+			GL15.glBufferData(target, size, usage);
 		else if (data instanceof ByteBuffer)
 			GL15.glBufferData(target, (ByteBuffer)data, usage);
 		else if (data instanceof IntBuffer)

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -263,6 +263,7 @@ public void initiateGLInstances () {
 
 		Gdx.gl = gl20;
 		Gdx.gl20 = gl20;
+		Gdx.gl30 = gl30;
 	}
 
 	private String glInfo () {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -263,6 +263,7 @@ public void initiateGLInstances () {
 
 		Gdx.gl = gl20;
 		Gdx.gl20 = gl20;
+		Gdx.gl30 = gl30;
 	}
 
 	private String glInfo () {

File: extensions/gdx-box2d/gdx-box2d-gwt/src/com/badlogic/gdx/physics/box2d/gwt/emu/com/badlogic/gdx/physics/box2d/joints/RevoluteJoint.java
Patch:
@@ -108,7 +108,7 @@ public Vector2 getLocalAnchorA () {
 	}
 
 	public Vector2 getLocalAnchorB () {
-		return localAnchorA.set(joint.getLocalAnchorB().x, joint.getLocalAnchorB().y);
+		return localAnchorB.set(joint.getLocalAnchorB().x, joint.getLocalAnchorB().y);
 	}
 
 	/** Get the current motor torque, usually in N-m. */

File: extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/joints/RevoluteJoint.java
Patch:
@@ -182,9 +182,9 @@ public Vector2 getLocalAnchorA () {
 	*/
 	
 	public Vector2 getLocalAnchorB () {
-		jniGetLocalAnchorA(addr, tmp);
-		localAnchorA.set(tmp[0], tmp[1]);
-		return localAnchorA;
+		jniGetLocalAnchorB(addr, tmp);
+		localAnchorB.set(tmp[0], tmp[1]);
+		return localAnchorB;
 	}
 
 	private native void jniGetLocalAnchorB (long addr, float[] anchor); /*

File: gdx/src/com/badlogic/gdx/graphics/TextureData.java
Patch:
@@ -62,7 +62,7 @@ public enum TextureDataType {
 	public boolean disposePixmap ();
 
 	/** Uploads the pixel data to the OpenGL ES texture. The caller must bind an OpenGL ES texture. A call to {@link #prepare()}
-	 * must preceed a call to this method. Any internal data structures created in {@link #prepare()}. */
+	 * must preceed a call to this method. Any internal data structures created in {@link #prepare()} should be disposed of here. */
 	public void consumeCustomData (int target);
 
 	/** @return the width of the pixel data */

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderCollectionTest.java
Patch:
@@ -171,7 +171,7 @@ public void setEnvironment (String name) {
 			cubemap = new Cubemap(root.child(name + "_PX.png"), root.child(name+"_NX.png"),
 				root.child(name + "_PY.png"), root.child(name + "_NY.png"), root.child(name + "_PZ.png"),
 				root.child(name + "_NZ.png"), false); // FIXME mipmapping on desktop
-			cubemap.load(CubemapSide.NegativeX, root.child(name + "_NX.png"));
+			// cubemap.load(CubemapSide.NegativeX, root.child(name + "_NX.png"));
 			if (!lights.has(CubemapAttribute.EnvironmentMap)) shaderProvider.clear();
 			lights.set(new CubemapAttribute(CubemapAttribute.EnvironmentMap, cubemap));
 		}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -151,7 +151,6 @@ public AndroidInput (Application activity, Context context, Object view, Android
 			v.setFocusable(true);
 			v.setFocusableInTouchMode(true);
 			v.requestFocus();
-			v.requestFocusFromTouch();
 		}
 		this.config = config;
 		this.onscreenKeyboard = new AndroidOnscreenKeyboard(context, new Handler(), this);
@@ -435,8 +434,8 @@ void processEvents () {
 	@Override
 	public boolean onTouch (View view, MotionEvent event) {
 		if (requestFocus && view != null) {
+			view.setFocusableInTouchMode(true);
 			view.requestFocus();
-			view.requestFocusFromTouch();
 			requestFocus = false;
 		}
 

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -309,6 +309,8 @@ public void build (ProjectBuilder builder, String outputDir, String appName, Str
 			project.files.add(new ProjectFile("ios/data/Default@2x~ipad.png", false));
 			project.files.add(new ProjectFile("ios/data/Default-568h@2x.png", false));
 			project.files.add(new ProjectFile("ios/data/Default~ipad.png", false));
+			project.files.add(new ProjectFile("ios/data/Default-375w-667h@2x.png", false));
+			project.files.add(new ProjectFile("ios/data/Default-414w-736h@3x.png", false));
 			project.files.add(new ProjectFile("ios/data/Icon.png", false));
 			project.files.add(new ProjectFile("ios/data/Icon@2x.png", false));
 			project.files.add(new ProjectFile("ios/data/Icon-72.png", false));

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java
Patch:
@@ -163,7 +163,7 @@ void generate () {
 						String replaced = sdkLocation.replace("\\", "\\\\");
 						Runtime.getRuntime().exec("\"" + replaced + "\\SDK Manager.exe\"");
 					} else {
-						Runtime.getRuntime().exec(sdkLocation + "tools/android sdk");
+						Runtime.getRuntime().exec("\"" + sdkLocation + "tools/android sdk\"");
 					}
 				} catch (IOException e) {
 					e.printStackTrace();

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.tests.AssetManagerTest;
 import com.badlogic.gdx.tests.BitmapFontAtlasRegionTest;
+import com.badlogic.gdx.tests.BulletTestCollection;
 import com.badlogic.gdx.tests.SpriteBatchTest;
 import com.badlogic.gdx.tests.StageDebugTest;
 import com.badlogic.gdx.tests.StageTest;
@@ -34,7 +35,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new SpriteBatchTest();		
+		GdxTest test = new BulletTestCollection();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
Patch:
@@ -548,8 +548,6 @@ public static String createPrefix (final Renderable renderable, final Config con
 				prefix += "#define boneWeight" + attr.unit + "Flag\n";
 			else if (attr.usage == Usage.TextureCoordinates) prefix += "#define texCoord" + attr.unit + "Flag\n";
 		}
-		if ((attributes & Usage.Tangent) == Usage.Tangent) prefix += "#define tangentFlag\n";
-		if ((attributes & Usage.BiNormal) == Usage.BiNormal) prefix += "#define binormalFlag\n";
 		if ((mask & BlendingAttribute.Type) == BlendingAttribute.Type) prefix += "#define " + BlendingAttribute.Alias + "Flag\n";
 		if ((mask & TextureAttribute.Diffuse) == TextureAttribute.Diffuse) {
 			prefix += "#define " + TextureAttribute.DiffuseAlias + "Flag\n";

File: extensions/gdx-pay/gdx-pay-android-ouya/src/com/badlogic/gdx/pay/android/ouya/PurchaseManagerAndroidOUYA.java
Patch:
@@ -516,7 +516,7 @@ public void onSuccess (String result) {
 		 * 
 		 * @param optionalData A Map of optional key/value pairs which provide additional information. */
 		@Override
-		public void onFailure (int arg0, String e, Bundle arg2) {
+		public void onFailure (int errorCode, String errorMessage, Bundle optionalData) {
 			// TODO: inform observer 
 			showMessage(LOGTYPEERROR, "PurchaseListener: onFailure :(");
 		}

File: gdx/src/com/badlogic/gdx/utils/JsonValue.java
Patch:
@@ -244,9 +244,9 @@ public boolean asBoolean () {
 		case stringValue:
 			return stringValue.equalsIgnoreCase("true");
 		case doubleValue:
-			return doubleValue == 0;
+			return doubleValue != 0;
 		case longValue:
-			return longValue == 0;
+			return longValue != 0;
 		case booleanValue:
 			return longValue != 0;
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gles2/SimpleVertexShader.java
Patch:
@@ -37,6 +37,7 @@ public class SimpleVertexShader extends GdxTest {
 
 	@Override
 	public void create () {
+		// @off
 		String vertexShader =
 			  "uniform mat4 u_mvpMatrix;                   \n"
 			+ "attribute vec4 a_position;                  \n"
@@ -52,6 +53,7 @@ public void create () {
 			+ "{                                            \n"
 			+ "  gl_FragColor = vec4 ( 1.0, 0.0, 0.0, 1.0 );\n"
 			+ "}";
+		// @on
 
 		shader = new ShaderProgram(vertexShader, fragmentShader);
 		mesh = Shapes.genCube();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontTest.java
Patch:
@@ -61,7 +61,9 @@ public void create () {
 		BitmapFont labelFont = skin.get("default-font", BitmapFont.class);
 		labelFont.setMarkupEnabled(true);
 
-		Label label = new Label("<<[BLUE]M[RED]u[YELLOW]l[BLACK]t[ORANGE]i[GREEN]c[MAGENTA]o[PINK]l[OLIVE]o[PERU]r[][MAROON]*Label[]>>", skin);
+		// Notice that the last [] has been deliberately added to test the effect of excessive pop operations (they are silently ignored).
+		Label label = new Label("<<[BLUE]M[RED]u[YELLOW]l[GREEN]t[OLIVE]ic[]o[]l[]o[]r[]*[MAROON]Label[][]>>", skin);
+		
 		label.setPosition(200, 200);
 		stage.addActor(label);
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/CpuSpriteBatch.java
Patch:
@@ -413,6 +413,7 @@ private void drawAdjusted (Texture texture, float[] spriteVertices, int offset,
 
 		int copyCount = Math.min(vertices.length - idx, count);
 		do {
+			count -= copyCount;
 			while (copyCount > 0) {
 				float x = spriteVertices[offset];
 				float y = spriteVertices[offset + 1];
@@ -428,7 +429,6 @@ private void drawAdjusted (Texture texture, float[] spriteVertices, int offset,
 				copyCount -= Sprite.VERTEX_SIZE;
 			}
 
-			count -= copyCount;
 			if (count > 0) {
 				super.flush();
 				copyCount = Math.min(vertices.length, count);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -96,6 +96,7 @@ public class GdxTests {
 		Bresenham2Test.class,
 		BufferUtilsTest.class,
 		BulletTestCollection.class,
+		CpuSpriteBatchTest.class,
 		ContainerTest.class,
 		CullTest.class,
 		DelaunayTriangulatorTest.class,

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/IOSRobovmTests.java
Patch:
@@ -29,7 +29,7 @@ public class IOSRobovmTests extends IOSApplication.Delegate {
 	protected IOSApplication createApplication() {
 		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
 		config.useAccelerometer = false;
-		return new IOSApplication(new BulletTestCollection(), config);
+		return new IOSApplication(new Box2DTestCollection(), config);
 	}
 
 	public static void main(String[] argv) {

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/IOSRobovmTests.java
Patch:
@@ -29,7 +29,7 @@ public class IOSRobovmTests extends IOSApplication.Delegate {
 	protected IOSApplication createApplication() {
 		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
 		config.useAccelerometer = false;
-		return new IOSApplication(new DownloadTest(), config);
+		return new IOSApplication(new BulletTestCollection(), config);
 	}
 
 	public static void main(String[] argv) {

File: extensions/gdx-pay/gdx-pay-server/src/com/badlogic/gdx/pay/server/PurchaseVerifierManager.java
Patch:
@@ -74,7 +74,6 @@ public PurchaseVerifierManager (boolean defaultIfNoVerifierFound) {
 	}
 
 	public void addVerifier (PurchaseVerifier verifier) {
-		PurchaseVerifierManager
 		verifiers.put(verifier.storeName(), verifier);
 	}
 

File: extensions/gdx-pay/gdx-pay-server/src/com/badlogic/gdx/pay/server/PurchaseVerifierManager.java
Patch:
@@ -45,11 +45,11 @@
  * // verify a purchase
  * if (verifier.isValid(transaction)) {
  *   // transaction appears valid
- *   ... punish user ...
+ *   ... add to DB etc. ...
  * }
  * else {
  *   // transaction appears bogus
- *   ... add to DB etc ...
+ *   ... punish user ...
  * }
  * </pre>
  * 
@@ -74,6 +74,7 @@ public PurchaseVerifierManager (boolean defaultIfNoVerifierFound) {
 	}
 
 	public void addVerifier (PurchaseVerifier verifier) {
+		PurchaseVerifierManager
 		verifiers.put(verifier.storeName(), verifier);
 	}
 

File: extensions/gdx-pay/gdx-pay-android-ouya/src/com/badlogic/gdx/pay/android/ouya/PurchaseManagerAndroidOUYA.java
Patch:
@@ -128,7 +128,7 @@ public PurchaseManagerAndroidOUYA (Activity activity, int requestCode) {
 
 	@Override
 	public String storeName() {
-		return PurchaseManagerConfig.STORE_NAME_OUYA;
+		return PurchaseManagerConfig.STORE_NAME_ANDROID_OUYA;
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/graphics/g2d/PolygonRegionLoader.java
Patch:
@@ -87,7 +87,7 @@ public Array<AssetDescriptor> getDependencies (String fileName, FileHandle file,
 				}
 			reader.close();
 		} catch (IOException e) {
-			Gdx.app.error(PolygonRegionLoader.class.getSimpleName(), "could not read " + fileName, e);
+			throw new GdxRuntimeException("Error reading " + fileName, e);
 		}
 
 		if (image == null && params.textureExtensions != null) for (String extension : params.textureExtensions) {

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java
Patch:
@@ -50,7 +50,7 @@ public void run () {
 	public void play () {
 		if (track.isPaused()) {
 			track.setPaused(false);
-		} else {
+		} else if (!track.isPlaying()) {
 			track.play();
 		}
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/attributes/BlendingAttribute.java
Patch:
@@ -79,7 +79,7 @@ public BlendingAttribute copy () {
 	
 	@Override
 	public int hashCode () {
-		int result = (int)type;
+		int result = super.hashCode();
 		result = 947 * result + (blended ? 1 : 0);
 		result = 947 * result + sourceFunction;
 		result = 947 * result + destFunction;

File: gdx/src/com/badlogic/gdx/graphics/g3d/attributes/ColorAttribute.java
Patch:
@@ -102,7 +102,7 @@ public Attribute copy () {
 
 	@Override
 	public int hashCode () {
-		int result = (int)type;
+		int result = super.hashCode();
 		result = 953 * result + color.hashCode();
 		return result; 
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/attributes/CubemapAttribute.java
Patch:
@@ -65,7 +65,7 @@ public Attribute copy () {
 
 	@Override
 	public int hashCode () {
-		int result = (int)type;
+		int result = super.hashCode();
 		result = 967 * result + textureDescription.hashCode();
 		return result; 
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/attributes/DepthTestAttribute.java
Patch:
@@ -84,7 +84,7 @@ public Attribute copy () {
 
 	@Override
 	public int hashCode () {
-		int result = (int)type;
+		int result = super.hashCode();
 		result = 971 * result + depthFunc;
 		result = 971 * result + NumberUtils.floatToRawIntBits(depthRangeNear);
 		result = 971 * result + NumberUtils.floatToRawIntBits(depthRangeFar);

File: gdx/src/com/badlogic/gdx/graphics/g3d/attributes/FloatAttribute.java
Patch:
@@ -53,7 +53,7 @@ public Attribute copy () {
 
 	@Override
 	public int hashCode () {
-		int result = (int)type;
+		int result = super.hashCode();
 		result = 977 * result + NumberUtils.floatToRawIntBits(value);
 		return result; 
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/attributes/IntAttribute.java
Patch:
@@ -44,7 +44,7 @@ public Attribute copy () {
 
 	@Override
 	public int hashCode () {
-		int result = (int)type;
+		int result = super.hashCode();
 		result = 983 * result + value;
 		return result; 
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/attributes/TextureAttribute.java
Patch:
@@ -123,7 +123,7 @@ public Attribute copy () {
 
 	@Override
 	public int hashCode () {
-		int result = (int)type;
+		int result = super.hashCode();
 		result = 991 * result + textureDescription.hashCode();
 		result = 991 * result + NumberUtils.floatToRawIntBits(offsetU);
 		result = 991 * result + NumberUtils.floatToRawIntBits(offsetV);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -193,7 +193,7 @@ else if (isOver() && style.over != null)
 			offsetX = style.unpressedOffsetX;
 			offsetY = style.unpressedOffsetY;
 		}
-		setBackground(background, background != null); // Keep padding from last background if new background is null.
+		setBackground(background);
 
 		Array<Actor> children = getChildren();
 		for (int i = 0; i < children.size; i++)

File: gdx/src/com/badlogic/gdx/utils/OrderedSet.java
Patch:
@@ -128,7 +128,8 @@ public T next () {
 
 		public void remove () {
 			if (nextIndex < 0) throw new IllegalStateException("next must be called before remove.");
-			set.remove(items.get(nextIndex - 1));
+			nextIndex--;
+			set.remove(items.get(nextIndex));
 		}
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Cell.java
Patch:
@@ -41,8 +41,8 @@ public void setLayout (Table table) {
 
 	/** Sets the actor in this cell and adds the actor to the cell's table. If null, removes any current actor. */
 	public <A extends Actor> Cell<A> setActor (A newActor) {
-		if (actor != null) actor.remove();
 		if (actor != newActor) {
+			if (actor != null) actor.remove();
 			actor = newActor;
 			if (newActor != null) table.addActor(newActor);
 		}

File: extensions/gdx-box2d/gdx-box2d-gwt/src/com/badlogic/gdx/physics/box2d/gwt/emu/com/badlogic/gdx/physics/box2d/ChainShape.java
Patch:
@@ -41,8 +41,8 @@ public Type getType () {
 
 	public void createLoop (float[] vertices) {
 		Vec2[] v = new Vec2[vertices.length / 2];
-		for (int i = 0; i < vertices.length; i += 2) {
-			v[i] = new Vec2(vertices[i], vertices[i + 1]);
+		for (int i = 0, vi = 0; i < vertices.length; i += 2, vi++) {
+			v[vi] = new Vec2(vertices[i], vertices[i + 1]);
 		}		
 		shape.createLoop(v, v.length);
 		isLooped = true;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/WidgetGroup.java
Patch:
@@ -70,7 +70,7 @@ public void setLayoutEnabled (boolean enabled) {
 	}
 
 	private void setLayoutEnabled (Group parent, boolean enabled) {
-		SnapshotArray<Actor> children = getChildren();
+		SnapshotArray<Actor> children = parent.getChildren();
 		for (int i = 0, n = children.size; i < n; i++) {
 			Actor actor = children.get(i);
 			if (actor instanceof Layout)

File: extensions/gdx-pay/gdx-pay/src/com/badlogic/gdx/pay/Offer.java
Patch:
@@ -36,8 +36,8 @@ public Offer setIdentifier (String identifier) {
 		// and return this for chaining
 		return this;
 	}
-	
-	public Map<String, String> getIdentifierForStores() {
+
+	public Map<String, String> getIdentifierForStores () {
 		return identifierForStores;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/PolygonRegionLoader.java
Patch:
@@ -87,7 +87,7 @@ public Array<AssetDescriptor> getDependencies (String fileName, FileHandle file,
 				}
 			reader.close();
 		} catch (IOException e) {
-			Gdx.app.error(PolygonRegionLoader.class.getSimpleName(), "could not read " + fileName, e);
+			throw new GdxRuntimeException("Error reading " + fileName, e);
 		}
 
 		if (image == null && params.textureExtensions != null) for (String extension : params.textureExtensions) {

File: gdx/src/com/badlogic/gdx/utils/viewport/Viewport.java
Patch:
@@ -103,7 +103,7 @@ public Vector3 project (Vector3 worldCoords) {
 
 	/** @see Camera#getPickRay(float, float, float, float, float, float) */
 	public Ray getPickRay (float screenX, float screenY) {
-		return camera.getPickRay(screenX, screenY, screenX, screenY, screenWidth, screenHeight);
+		return camera.getPickRay(screenX, screenY, this.screenX, this.screenY, screenWidth, screenHeight);
 	}
 
 	/** @see ScissorStack#calculateScissors(Camera, float, float, float, float, Matrix4, Rectangle, Rectangle) */

File: gdx/src/com/badlogic/gdx/utils/viewport/Viewport.java
Patch:
@@ -103,7 +103,7 @@ public Vector3 project (Vector3 worldCoords) {
 
 	/** @see Camera#getPickRay(float, float, float, float, float, float) */
 	public Ray getPickRay (float screenX, float screenY) {
-		return camera.getPickRay(screenX, screenY, screenX, screenY, screenWidth, screenHeight);
+		return camera.getPickRay(screenX, screenY, this.screenX, this.screenY, screenWidth, screenHeight);
 	}
 
 	/** @see ScissorStack#calculateScissors(Camera, float, float, float, float, Matrix4, Rectangle, Rectangle) */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ButtonGroup.java
Patch:
@@ -58,6 +58,7 @@ public void remove (Button button) {
 		if (button == null) throw new IllegalArgumentException("button cannot be null.");
 		button.buttonGroup = null;
 		buttons.removeValue(button, true);
+		checkedButtons.removeValue(button, true);
 	}
 
 	public void remove (Button... buttons) {

File: extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java
Patch:
@@ -29,8 +29,9 @@
 import com.badlogic.gdx.physics.box2d.Shape.Type;
 import com.badlogic.gdx.physics.box2d.joints.PulleyJoint;
 import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.Disposable;
 
-public class Box2DDebugRenderer {
+public class Box2DDebugRenderer implements Disposable {
 
 	/** the immediate mode renderer to output our debug drawings **/
 	protected ShapeRenderer renderer;

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/BuildScriptHelper.java
Patch:
@@ -16,9 +16,8 @@ public static void addBuildScript(List<ProjectType> projects, BufferedWriter wr)
 		//repos
 		write(wr, "repositories {");
 		write(wr, DependencyBank.mavenCentral);
-		write(wr, "mavenLocal()");
 		if (projects.contains(ProjectType.HTML)) {
-			write(wr, "maven { url '" + DependencyBank.gwtPluginUrl + "' }");
+			write(wr, DependencyBank.jCenter);
 		}
 		write(wr, "}");
 		//dependencies
@@ -50,7 +49,6 @@ public static void addAllProjects(BufferedWriter wr) throws IOException {
 		write(wr, "}");
 		space(wr);
 		write(wr, "repositories {");
-		write(wr, "mavenLocal()");
 		write(wr, DependencyBank.mavenCentral);
 		write(wr, "maven { url \"" + DependencyBank.libGDXSnapshotsUrl + "\" }");
 		write(wr, "maven { url \"" + DependencyBank.libGDXReleaseUrl + "\" }");

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -17,12 +17,12 @@ public class DependencyBank {
 
 	//Repositories
 	static String mavenCentral = "mavenCentral()";
-	static String gwtPluginUrl = "https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/";
+	static String jCenter = "jcenter()";
 	static String libGDXSnapshotsUrl = "https://oss.sonatype.org/content/repositories/snapshots/";
 	static String libGDXReleaseUrl = "https://oss.sonatype.org/content/repositories/releases/";
 
 	//Project plugins
-	static String gwtPluginImport = "de.richsource.gradle.plugins:gwt-gradle-plugin:0.4";
+	static String gwtPluginImport = "de.richsource.gradle.plugins:gwt-gradle-plugin:0.5";
 	static String androidPluginImport = "com.android.tools.build:gradle:0.10+";
 	static String roboVMPluginImport = "com.github.jtakakura:gradle-robovm-plugin:0.0.10";
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -1084,12 +1084,12 @@ else if ((align & Align.top) == 0) // Center
 
 			float fillX = c.fillX, fillY = c.fillY;
 			if (fillX > 0) {
-				c.actorWidth = spannedCellWidth * fillX;
+				c.actorWidth = Math.max(spannedCellWidth * fillX, c.minWidth.get(c.actor));
 				float maxWidth = c.maxWidth.get(c.actor);
 				if (maxWidth > 0) c.actorWidth = Math.min(c.actorWidth, maxWidth);
 			}
 			if (fillY > 0) {
-				c.actorHeight = rowHeight[c.row] * fillY - c.computedPadTop - c.computedPadBottom;
+				c.actorHeight = Math.max(rowHeight[c.row] * fillY - c.computedPadTop - c.computedPadBottom, c.minHeight.get(c.actor));
 				float maxHeight = c.maxHeight.get(c.actor);
 				if (maxHeight > 0) c.actorHeight = Math.min(c.actorHeight, maxHeight);
 			}

File: gdx/src/com/badlogic/gdx/assets/loaders/BitmapFontLoader.java
Patch:
@@ -86,7 +86,7 @@ public BitmapFont loadSync (AssetManager manager, String fileName, FileHandle fi
 			String name = file.sibling(data.imagePaths[0]).nameWithoutExtension().toString();
 			AtlasRegion region = atlas.findRegion(name);
 
-			if (region == null) throw new GdxRuntimeException(String.format("Could not find font region " + name + " in atlas "+ parameter.atlasName));
+			if (region == null) throw new GdxRuntimeException("Could not find font region " + name + " in atlas " + parameter.atlasName);
 			return new BitmapFont(file, region);
 		} else {
 			TextureRegion[] regs = new TextureRegion[data.getImagePaths().length];

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,8 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.AssetManagerTest;
+import com.badlogic.gdx.tests.BitmapFontAtlasRegionTest;
 import com.badlogic.gdx.tests.StageDebugTest;
 import com.badlogic.gdx.tests.StageTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -31,7 +33,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new StageDebugTest();		
+		GdxTest test = new BitmapFontAtlasRegionTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
Patch:
@@ -46,7 +46,7 @@
 /** @author xoppa */
 public class BaseBulletTest extends BulletTest {
 	// Set this to the path of the lib to use it on desktop instead of default lib.
-	private final static String customDesktopLib = null;//"C:\\Xoppa\\code\\libgdx\\extensions\\gdx-bullet\\jni\\vs\\gdxBullet\\Debug\\gdxBullet.dll";
+	private final static String customDesktopLib = null;//"C:\\Xoppa\\code\\libgdx\\extensions\\gdx-bullet\\jni\\vs\\gdxBullet\\x64\\Debug\\gdxBullet.dll";
 
 	private static boolean initialized = false;
 	
@@ -231,7 +231,7 @@ public void setDebugMode (final int mode) {
 
 	public void toggleDebugMode () {
 		if (world.getDebugMode() == DebugDrawModes.DBG_NoDebug)
-			setDebugMode(DebugDrawModes.DBG_DrawWireframe);
+			setDebugMode(DebugDrawModes.DBG_DrawWireframe | DebugDrawModes.DBG_DrawFeaturesText | DebugDrawModes.DBG_DrawText | DebugDrawModes.DBG_DrawContactPoints);
 		else if (world.renderMeshes)
 			world.renderMeshes = false;
 		else {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletWorld.java
Patch:
@@ -110,12 +110,13 @@ public void update () {
 
 	@Override
 	public void render (ModelBatch batch, Environment lights, Iterable<BulletEntity> entities) {
+		if (renderMeshes) super.render(batch, lights, entities);
 		if (debugDrawer != null && debugDrawer.getDebugMode() > 0) {
+			batch.flush();
 			debugDrawer.begin(batch.getCamera());
 			collisionWorld.debugDrawWorld();
 			debugDrawer.end();
 		}
-		if (renderMeshes) super.render(batch, lights, entities);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -218,7 +218,10 @@ public void act (float delta) {
 		if (type == ApplicationType.Desktop || type == ApplicationType.Applet || type == ApplicationType.WebGL)
 			mouseOverActor = fireEnterAndExit(mouseOverActor, mouseScreenX, mouseScreenY, -1);
 
+		// Run actions and determine whether to request rendering (for when setContinuousRendering is off)
+		int previousActionCount = Actor.runningActionCount;
 		root.act(delta);
+		if (previousActionCount != Actor.runningActionCount) Gdx.graphics.requestRendering();
 	}
 
 	private Actor fireEnterAndExit (Actor overLast, int screenX, int screenY, int pointer) {

File: extensions/gdx-bullet/src/com/badlogic/gdx/physics/bullet/DebugDrawer.java
Patch:
@@ -149,7 +149,7 @@ public SpriteBatch getSpriteBatch () {
 
 	/** Switches the {@link SpriteBatch}. The given sprite batch won't be disposed when {@link #dispose()} is called. */
 	public void setSpriteBatch (SpriteBatch spriteBatch) {
-		if (ownsSpriteBatch) {
+		if (ownsSpriteBatch && this.spriteBatch != null) {
 			this.spriteBatch.dispose();
 		}
 		this.spriteBatch = spriteBatch;
@@ -162,7 +162,7 @@ public BitmapFont getFont () {
 
 	/** Switches the {@link BitmapFont}. The given font won't be disposed when {@link #dispose()} is called. */
 	public void setFont (BitmapFont font) {
-		if (ownsFont) {
+		if (ownsFont && this.font != null) {
 			this.font.dispose();
 		}
 		this.font = font;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -1209,7 +1209,7 @@ private void drawDebugRects (ShapeRenderer shapes) {
 	}
 
 	/** @author Nathan Sweet */
-	static class DebugRect extends Rectangle {
+	static public class DebugRect extends Rectangle {
 		static Pool<DebugRect> pool = Pools.get(DebugRect.class);
 		Color color;
 	}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -217,7 +217,7 @@ void mainLoop() {
 		}
 		runnablesHelper.clear();					
 		listener.render();
-		input.justTouched = false;
+		input.reset();
 	}
 	
 	public Panel getRootPanel () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -266,10 +266,11 @@ else if ((titleAlignment & Align.right) != 0)
 	}
 
 	public Actor hit (float x, float y, boolean touchable) {
-		float height = getHeight();
-		if (y <= height && y >= height - getPadTop() && x >= 0 && x <= getWidth()) return this;
 		Actor hit = super.hit(x, y, touchable);
 		if (hit == null && isModal && (!touchable || getTouchable() == Touchable.enabled)) return this;
+		float height = getHeight();
+		if (hit == null || hit == this) return hit;
+		if (y <= height && y >= height - getPadTop() && x >= 0 && x <= getWidth() && getCell(hit) != null) return this;
 		return hit;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/Animation.java
Patch:
@@ -146,7 +146,7 @@ public int getKeyFrameIndex (float stateTime) {
 			if (frameNumber >= keyFrames.length) frameNumber = keyFrames.length - 2 - (frameNumber - keyFrames.length);
 			break;
 		case LOOP_RANDOM:
-			int lastFrameNumber = (int) ((stateTime - (stateTime - lastStateTime)) / frameDuration);
+			int lastFrameNumber = (int) ((lastStateTime) / frameDuration);
 			if (lastFrameNumber != frameNumber) {
 				frameNumber = MathUtils.random(keyFrames.length - 1);
 			} else {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFileHandle.java
Patch:
@@ -103,8 +103,9 @@ public FileHandle[] list (FileFilter filter) {
 				int count = 0;
 				for (int i = 0, n = handles.length; i < n; i++) {
 					String path = relativePaths[i];
-					if (!filter.accept(file)) continue;
-					handles[count] = new AndroidFileHandle(assets, new File(file, path), type);
+					FileHandle child = new AndroidFileHandle(assets, new File(file, path), type);
+					if (!filter.accept(child.file())) continue;
+					handles[count] = child;
 					count++;
 				}
 				if (count < relativePaths.length) {

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -412,8 +412,9 @@ public FileHandle[] list (FileFilter filter) {
 		int count = 0;
 		for (int i = 0, n = relativePaths.length; i < n; i++) {
 			String path = relativePaths[i];
-			if (!filter.accept(file)) continue;
-			handles[count] = child(path);
+			FileHandle child = child(path);
+			if (!filter.accept(child.file())) continue;
+			handles[count] = child;
 			count++;
 		}
 		if (count < relativePaths.length) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
Patch:
@@ -46,7 +46,7 @@
 /** @author xoppa */
 public class BaseBulletTest extends BulletTest {
 	// Set this to the path of the lib to use it on desktop instead of default lib.
-	private final static String customDesktopLib = null; //"D:\\Data\\code\\android\\libs\\libgdx\\extensions\\gdx-bullet\\jni\\vs\\gdxBullet\\x64\\Debug\\gdxBullet.dll";
+	private final static String customDesktopLib = null;//"C:\\Xoppa\\code\\libgdx\\extensions\\gdx-bullet\\jni\\vs\\gdxBullet\\Debug\\gdxBullet.dll";
 
 	private static boolean initialized = false;
 	

File: extensions/gdx-ai/src/com/badlogic/gdx/ai/fsm/StateMachine.java
Patch:
@@ -26,7 +26,7 @@ public interface StateMachine<E> {
 
 	/** Updates the state machine.
 	 * <p>
-	 * Implementation classes should invoke first the {@code execute} method of the global state (if any) then the {@code execute}
+	 * Implementation classes should invoke first the {@code update} method of the global state (if any) then the {@code update}
 	 * method of the current state.
 	 * </p> */
 	public void update ();
@@ -53,7 +53,7 @@ public interface StateMachine<E> {
 
 	/** Returns the global state of this state machine.
 	 * <p>
-	 * Implementation classes should invoke the {@code execute} method of the global state every time the FSM is updated. Also, they
+	 * Implementation classes should invoke the {@code update} method of the global state every time the FSM is updated. Also, they
 	 * should never invoke its {@code enter} and {@code exit} method.
 	 * </p> */
 	public State<E> getGlobalState ();

File: gdx/src/com/badlogic/gdx/math/Circle.java
Patch:
@@ -242,3 +242,4 @@ public Class getShapeType () {
 	public Vector3 getCenter () {
 		return new Vector3(x, y, 0);
 	}
+}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
Patch:
@@ -143,7 +143,7 @@ private void createPhysicsWorld () {
 		// finally we add a fixture to the body using the polygon
 		// defined above. Note that we have to dispose PolygonShapes
 		// and CircleShapes once they are no longer used. This is the
-		// only time you have to care explicitely for memomry managment.
+		// only time you have to care explicitly for memory management.
 		FixtureDef fixtureDef = new FixtureDef();
 		fixtureDef.shape = groundPoly;
 		fixtureDef.filter.groupIndex = 0;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ProgressBar.java
Patch:
@@ -72,7 +72,7 @@ public ProgressBar (float min, float max, float stepSize, boolean vertical, Skin
 	 * @param stepSize the step size between values
 	 * @param style the {@link ProgressBarStyle} */
 	public ProgressBar (float min, float max, float stepSize, boolean vertical, ProgressBarStyle style) {
-		if (min > max) throw new IllegalArgumentException("min must be > max: " + min + " > " + max);
+		if (min > max) throw new IllegalArgumentException("max must be > min. min,max: " + min + ", " + max);
 		if (stepSize <= 0) throw new IllegalArgumentException("stepSize must be > 0: " + stepSize);
 		setStyle(style);
 		this.min = min;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ProgressBar.java
Patch:
@@ -72,7 +72,7 @@ public ProgressBar (float min, float max, float stepSize, boolean vertical, Skin
 	 * @param stepSize the step size between values
 	 * @param style the {@link ProgressBarStyle} */
 	public ProgressBar (float min, float max, float stepSize, boolean vertical, ProgressBarStyle style) {
-		if (min > max) throw new IllegalArgumentException("min must be > max: " + min + " > " + max);
+		if (min > max) throw new IllegalArgumentException("max must be > min. min,max: " + min + ", " + max);
 		if (stepSize <= 0) throw new IllegalArgumentException("stepSize must be > 0: " + stepSize);
 		setStyle(style);
 		this.min = min;

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/ModelBuilder.java
Patch:
@@ -165,7 +165,7 @@ public MeshPart part (final String id, final Mesh mesh, int primitiveType, final
 	 * Therefore you can only build one part at a time. The resources the Material might contain are not managed, use
 	 * {@link #manage(Disposable)} to add those to the model.
 	 * @return The {@link MeshPartBuilder} you can use to build the MeshPart. */
-	private MeshPartBuilder part (final String id, int primitiveType, final VertexAttributes attributes, final Material material) {
+	public MeshPartBuilder part (final String id, int primitiveType, final VertexAttributes attributes, final Material material) {
 		final MeshBuilder builder = getBuilder(attributes);
 		part(builder.part(id, primitiveType), material);
 		return builder;

File: gdx/src/com/badlogic/gdx/utils/OrderedSet.java
Patch:
@@ -43,9 +43,10 @@ public OrderedSet (int initialCapacity) {
 		items = new Array(capacity);
 	}
 
-	public OrderedSet (ObjectSet set) {
+	public OrderedSet (OrderedSet set) {
 		super(set);
 		items = new Array(capacity);
+		items.addAll(set.items);
 	}
 
 	public boolean add (T key) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -733,7 +733,7 @@ protected void drawDebugBounds (ShapeRenderer shapes) {
 		if (!getDebug()) return;
 		shapes.set(ShapeType.Line);
 		shapes.setColor(getStage().getDebugColor());
-		shapes.rect(getX(), getY(), getWidth(), getHeight(), getOriginX(), getOriginY(), getScaleX(), getScaleY(), getRotation());
+		shapes.rect(getX(), getY(), getOriginX(), getOriginY(), getWidth(), getHeight(), getScaleX(), getScaleY(), getRotation());
 	}
 
 	/** If true, {@link #drawDebug(ShapeRenderer)} will be called for this actor. */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -189,7 +189,6 @@ private void drawDebug () {
 
 		actor.x -= offsetX;
 		actor.y -= offsetY;
-
 	}
 
 	/** Calls {@link #act(float)} with {@link Graphics#getDeltaTime()}. */

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.StageDebugTest;
 import com.badlogic.gdx.tests.StageTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
@@ -30,7 +31,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new StageTest();		
+		GdxTest test = new StageDebugTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StageTest.java
Patch:
@@ -124,7 +124,7 @@ public boolean touchDown (InputEvent event, float x, float y, int pointer, int b
 				public void drawDebug (ShapeRenderer shapes) {
 					shapes.set(ShapeType.Filled);
 					shapes.setColor(getColor());
-					shapes.rect(getX(), getY(), getWidth(), getHeight(), getOriginX(), getOriginY(), getScaleX(), getScaleY(),
+					shapes.rect(getX(), getY(), getOriginX(), getOriginY(), getWidth(), getHeight(), getScaleX(), getScaleY(),
 						getRotation());
 				}
 			};

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -160,7 +160,7 @@ public class GdxTests {
 		ReflectionTest.class,
 		RotationTest.class,
 		RunnablePostTest.class,
-		StageDebugRendererTest.class,
+		StageDebugTest.class,
 		Scene2dTest.class,
 		ScrollPane2Test.class,
 		ScrollPaneScrollBarsTest.class,

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -1188,12 +1188,12 @@ public void drawDebug (ShapeRenderer shapes) {
 			super.drawDebug(shapes);
 		}
 	}
-	
+
 	protected void drawDebugBounds (ShapeRenderer shapes) {
 	}
 
 	private void drawDebugRects (ShapeRenderer shapes) {
-		if (debugRects == null) return;
+		if (debugRects == null || !getDebug()) return;
 		shapes.set(ShapeType.Line);
 		shapes.setColor(getStage().getDebugColor());
 		for (int i = 0, n = debugRects.size; i < n; i++) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/Batch.java
Patch:
@@ -208,6 +208,9 @@ public void draw (TextureRegion region, float x, float y, float originX, float o
 	/** @return true if blending for sprites is enabled */
 	public boolean isBlendingEnabled ();
 
+	/** @return true if currently between begin and end. */
+	public boolean isDrawing ();
+
 	static public final int X1 = 0;
 	static public final int Y1 = 1;
 	static public final int C1 = 2;

File: gdx/src/com/badlogic/gdx/graphics/g2d/PolygonSpriteBatch.java
Patch:
@@ -1201,6 +1201,6 @@ public boolean isBlendingEnabled () {
 	}
 
 	public boolean isDrawing () {
-		return false;
+		return drawing;
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -160,7 +160,7 @@ public class GdxTests {
 		ReflectionTest.class,
 		RotationTest.class,
 		RunnablePostTest.class,
-		Scene2DDebugRendererTest.class,
+		StageDebugRendererTest.class,
 		Scene2dTest.class,
 		ScrollPane2Test.class,
 		ScrollPaneScrollBarsTest.class,

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -22,7 +22,7 @@
 import com.badlogic.gdx.math.Rectangle;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.scenes.scene2d.utils.Cullable;
-import com.badlogic.gdx.scenes.scene2d.utils.Scene2DDebugRenderer;
+import com.badlogic.gdx.scenes.scene2d.utils.StageDebugRenderer;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.SnapshotArray;
 
@@ -365,7 +365,7 @@ public void print () {
 		print("");
 	}
 
-	/** Used only in combination with a {@link Scene2DDebugRenderer}.
+	/** Used only in combination with a {@link StageDebugRenderer}.
 	 * @param recursively If {@code true} it will also recursively disable all children of this group. */
 	public void setDebuggingEnabled (boolean enabled, boolean recursively) {
 		setDebuggingEnabled(enabled);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -31,6 +31,7 @@
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.scenes.scene2d.InputEvent.Type;
 import com.badlogic.gdx.scenes.scene2d.utils.FocusListener.FocusEvent;
+import com.badlogic.gdx.scenes.scene2d.utils.StageDebugRenderer;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.Pool.Poolable;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/StageDebugRenderer.java
Patch:
@@ -33,7 +33,7 @@
  * {@link #render()} method each frame.
  * 
  * @author Daniel Holderbaum */
-public class Scene2DDebugRenderer {
+public class StageDebugRenderer {
 
 	public static class DebugRect implements Poolable {
 		public Vector2 bottomLeft;
@@ -66,7 +66,7 @@ public void reset () {
 
 	private ShapeRenderer shapeRenderer;
 
-	public Scene2DDebugRenderer (Stage stage) {
+	public StageDebugRenderer (Stage stage) {
 		this.stage = stage;
 		this.shapeRenderer = new ShapeRenderer();
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ContainerTest.java
Patch:
@@ -10,20 +10,20 @@
 import com.badlogic.gdx.scenes.scene2d.ui.Label;
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.scenes.scene2d.ui.Table;
-import com.badlogic.gdx.scenes.scene2d.utils.Scene2DDebugRenderer;
+import com.badlogic.gdx.scenes.scene2d.utils.StageDebugRenderer;
 import com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class ContainerTest extends GdxTest {
 	Skin skin;
 	Stage stage;
-	Scene2DDebugRenderer debugRenderer;
+	StageDebugRenderer debugRenderer;
 
 	@Override
 	public void create () {
 		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 		stage = new Stage();
-		debugRenderer = new Scene2DDebugRenderer(stage);
+		debugRenderer = new StageDebugRenderer(stage);
 		Gdx.input.setInputProcessor(stage);
 
 		TextureRegionDrawable logo = new TextureRegionDrawable(new TextureRegion(new Texture(

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ImageTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.badlogic.gdx.scenes.scene2d.ui.Image;
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.scenes.scene2d.ui.Table;
-import com.badlogic.gdx.scenes.scene2d.utils.Scene2DDebugRenderer;
+import com.badlogic.gdx.scenes.scene2d.utils.StageDebugRenderer;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.Scaling;
 
@@ -33,14 +33,14 @@ public class ImageTest extends GdxTest {
 	Stage ui;
 	Table root;
 	TextureRegion image2;
-	Scene2DDebugRenderer debugRenderer;
+	StageDebugRenderer debugRenderer;
 
 	@Override
 	public void create () {
 		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 		image2 = new TextureRegion(new Texture(Gdx.files.internal("data/badlogic.jpg")));
 		ui = new Stage();
-		debugRenderer = new Scene2DDebugRenderer(ui);
+		debugRenderer = new StageDebugRenderer(ui);
 		Gdx.input.setInputProcessor(ui);
 
 		root = new Table();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/LabelScaleTest.java
Patch:
@@ -24,22 +24,22 @@
 import com.badlogic.gdx.scenes.scene2d.ui.Label;
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.scenes.scene2d.ui.Table;
-import com.badlogic.gdx.scenes.scene2d.utils.Scene2DDebugRenderer;
+import com.badlogic.gdx.scenes.scene2d.utils.StageDebugRenderer;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class LabelScaleTest extends GdxTest {
 	Skin skin;
 	Stage stage;
 	SpriteBatch batch;
 	Actor root;
-	Scene2DDebugRenderer debugRenderer;
+	StageDebugRenderer debugRenderer;
 
 	@Override
 	public void create () {
 		batch = new SpriteBatch();
 		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 		stage = new Stage();
-		debugRenderer = new Scene2DDebugRenderer(stage);
+		debugRenderer = new StageDebugRenderer(stage);
 		Gdx.input.setInputProcessor(stage);
 
 		Table table = new Table();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/LabelTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.scenes.scene2d.ui.Table;
 import com.badlogic.gdx.scenes.scene2d.utils.Align;
-import com.badlogic.gdx.scenes.scene2d.utils.Scene2DDebugRenderer;
+import com.badlogic.gdx.scenes.scene2d.utils.StageDebugRenderer;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class LabelTest extends GdxTest {
@@ -39,7 +39,7 @@ public class LabelTest extends GdxTest {
 	SpriteBatch batch;
 	Actor root;
 	ShapeRenderer renderer;
-	Scene2DDebugRenderer debugRenderer;
+	StageDebugRenderer debugRenderer;
 
 	@Override
 	public void create () {
@@ -49,7 +49,7 @@ public void create () {
 		skin.getAtlas().getTextures().iterator().next().setFilter(TextureFilter.Nearest, TextureFilter.Nearest);
 		skin.getFont("default-font").setMarkupEnabled(true);
 		stage = new Stage();
-		debugRenderer = new Scene2DDebugRenderer(stage);
+		debugRenderer = new StageDebugRenderer(stage);
 		Gdx.input.setInputProcessor(stage);
 
 		Table table = new Table();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Scene2DDebugRendererTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.scenes.scene2d.ui.Table;
 import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
-import com.badlogic.gdx.scenes.scene2d.utils.Scene2DDebugRenderer;
+import com.badlogic.gdx.scenes.scene2d.utils.StageDebugRenderer;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 /** @author Daniel Holderbaum */
@@ -42,7 +42,7 @@ public class Scene2DDebugRendererTest extends GdxTest {
 	private Stage stage1;
 	private Stage stage2;
 
-	private Scene2DDebugRenderer debugRenderer;
+	private StageDebugRenderer debugRenderer;
 
 	class DebugActor extends Actor {
 
@@ -124,7 +124,7 @@ private void switchStage () {
 		} else {
 			stage = stage2;
 		}
-		debugRenderer = new Scene2DDebugRenderer(stage);
+		debugRenderer = new StageDebugRenderer(stage);
 	}
 
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Scene2dTest.java
Patch:
@@ -40,19 +40,19 @@
 import com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup;
 import com.badlogic.gdx.scenes.scene2d.ui.Window;
 import com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener;
-import com.badlogic.gdx.scenes.scene2d.utils.Scene2DDebugRenderer;
+import com.badlogic.gdx.scenes.scene2d.utils.StageDebugRenderer;
 import com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class Scene2dTest extends GdxTest {
 	Stage stage;
-	Scene2DDebugRenderer debugRenderer;
+	StageDebugRenderer debugRenderer;
 	private FloatAction meow = new FloatAction(10, 5);
 	private TiledDrawable patch;
 
 	public void create () {
 		stage = new Stage();
-		debugRenderer = new Scene2DDebugRenderer(stage);
+		debugRenderer = new StageDebugRenderer(stage);
 		Gdx.input.setInputProcessor(stage);
 
 		final TextureRegion region = new TextureRegion(new Texture("data/badlogic.jpg"));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPane2Test.java
Patch:
@@ -26,17 +26,17 @@
 import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.scenes.scene2d.ui.Table;
-import com.badlogic.gdx.scenes.scene2d.utils.Scene2DDebugRenderer;
+import com.badlogic.gdx.scenes.scene2d.utils.StageDebugRenderer;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class ScrollPane2Test extends GdxTest {
 	Stage stage;
 	Skin skin;
-	Scene2DDebugRenderer debugRenderer;
+	StageDebugRenderer debugRenderer;
 
 	public void create () {
 		stage = new Stage();
-		debugRenderer = new Scene2DDebugRenderer(stage);
+		debugRenderer = new StageDebugRenderer(stage);
 		Gdx.input.setInputProcessor(stage);
 
 		skin = new Skin(Gdx.files.internal("data/uiskin.json"));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TableLayoutTest.java
Patch:
@@ -30,16 +30,16 @@
 import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
 import com.badlogic.gdx.scenes.scene2d.ui.TextField;
 import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
-import com.badlogic.gdx.scenes.scene2d.utils.Scene2DDebugRenderer;
+import com.badlogic.gdx.scenes.scene2d.utils.StageDebugRenderer;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class TableLayoutTest extends GdxTest {
 	Stage stage;
-	Scene2DDebugRenderer debugRenderer;
+	StageDebugRenderer debugRenderer;
 
 	public void create () {
 		stage = new Stage();
-		debugRenderer = new Scene2DDebugRenderer(stage);
+		debugRenderer = new StageDebugRenderer(stage);
 		Gdx.input.setInputProcessor(stage);
 		Skin skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TableTest.java
Patch:
@@ -31,20 +31,20 @@
 import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
 import com.badlogic.gdx.scenes.scene2d.ui.TextButton.TextButtonStyle;
 import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
-import com.badlogic.gdx.scenes.scene2d.utils.Scene2DDebugRenderer;
+import com.badlogic.gdx.scenes.scene2d.utils.StageDebugRenderer;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class TableTest extends GdxTest {
 	Skin skin;
 	Stage stage;
 	Texture texture;
 	Table root;
-	Scene2DDebugRenderer debugRenderer;
+	StageDebugRenderer debugRenderer;
 
 	@Override
 	public void create () {
 		stage = new Stage();
-		debugRenderer = new Scene2DDebugRenderer(stage);
+		debugRenderer = new StageDebugRenderer(stage);
 		Gdx.input.setInputProcessor(stage);
 
 		skin = new Skin(Gdx.files.internal("data/uiskin.json"));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ViewportTest1.java
Patch:
@@ -27,7 +27,7 @@
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.scenes.scene2d.ui.Table;
 import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
-import com.badlogic.gdx.scenes.scene2d.utils.Scene2DDebugRenderer;
+import com.badlogic.gdx.scenes.scene2d.utils.StageDebugRenderer;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Scaling;
@@ -45,12 +45,12 @@ public class ViewportTest1 extends GdxTest {
 	Array<String> names;
 	Stage stage;
 	Label label;
-	Scene2DDebugRenderer debugRenderer;
+	StageDebugRenderer debugRenderer;
 
 	public void create () {
 		stage = new Stage();
 		Skin skin = new Skin(Gdx.files.internal("data/uiskin.json"));
-		debugRenderer = new Scene2DDebugRenderer(stage);
+		debugRenderer = new StageDebugRenderer(stage);
 
 		label = new Label("", skin);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/DragAndDropTest.java
Patch:
@@ -109,7 +109,6 @@ public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act(Gdx.graphics.getDeltaTime());
 		stage.draw();
-		Table.drawDebug(stage);
 	}
 
 	public void resize (int width, int height) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
Patch:
@@ -102,7 +102,7 @@ public void setupScene () {
 	}
 
 	public void setupUI () {
-		ui = new Stage();;
+		ui = new Stage();
 		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 		TextButton reload = new TextButton("Reload Shaders", skin.get(TextButtonStyle.class));
 		camera = new SelectBox(skin.get(SelectBoxStyle.class));
@@ -170,7 +170,6 @@ public void render () {
 		fps.setText("fps: " + Gdx.graphics.getFramesPerSecond());
 		ui.act();
 		ui.draw();
-		Table.drawDebug(ui);
 	}
 
 	Vector3 position = new Vector3();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPaneScrollBarsTest.java
Patch:
@@ -224,7 +224,6 @@ public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act(Gdx.graphics.getDeltaTime());
 		stage.draw();
-		Table.drawDebug(stage);
 	}
 
 	public void resize (int width, int height) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPaneTest.java
Patch:
@@ -123,7 +123,6 @@ public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act(Gdx.graphics.getDeltaTime());
 		stage.draw();
-		Table.drawDebug(stage);
 	}
 
 	public void resize (int width, int height) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TreeTest.java
Patch:
@@ -68,7 +68,6 @@ public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act(Gdx.graphics.getDeltaTime());
 		stage.draw();
-		Table.drawDebug(stage);
 	}
 
 	public void resize (int width, int height) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UISimpleTest.java
Patch:
@@ -97,7 +97,6 @@ public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act(Math.min(Gdx.graphics.getDeltaTime(), 1 / 30f));
 		stage.draw();
-		Table.drawDebug(stage);
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -182,7 +182,6 @@ public void render () {
 
 		stage.act(Math.min(Gdx.graphics.getDeltaTime(), 1 / 30f));
 		stage.draw();
-		Table.drawDebug(stage);
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -160,6 +160,7 @@ public class GdxTests {
 		ReflectionTest.class,
 		RotationTest.class,
 		RunnablePostTest.class,
+		Scene2DDebugRendererTest.class,
 		Scene2dTest.class,
 		ScrollPane2Test.class,
 		ScrollPaneScrollBarsTest.class,

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -211,7 +211,8 @@ protected void hideStatusBar (boolean hide) {
 
 		try {
 			Method m = View.class.getMethod("setSystemUiVisibility", int.class);
-			m.invoke(rootView, 0x0);
+			if (getVersion() <= 13)
+				m.invoke(rootView, 0x0);
 			m.invoke(rootView, 0x1);
 		} catch (Exception e) {
 			log("AndroidApplication", "Can't hide status bar", e);

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwFileHandle.java
Patch:
@@ -56,6 +56,7 @@ public FileHandle parent () {
 
 	public File file () {
 		if (type == FileType.External) return new File(JglfwFiles.externalPath, file.getPath());
+		if (type == FileType.Local) return new File(JglfwFiles.localPath, file.getPath());
 		return file;
 	}
 }

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglFileHandle.java
Patch:
@@ -56,6 +56,7 @@ public FileHandle parent () {
 
 	public File file () {
 		if (type == FileType.External) return new File(LwjglFiles.externalPath, file.getPath());
+		if (type == FileType.Local) return new File(LwjglFiles.localPath, file.getPath());
 		return file;
 	}
 }

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java
Patch:
@@ -93,7 +93,7 @@ public void setPosition (float position) {
 
 	@Override
 	public float getPosition () {
-		return (float)(track.getCurrentTime() * 1000.0);
+		return (float)(track.getCurrentTime());
 	}
 
 	@Override

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/FileWrapper.java
Patch:
@@ -459,10 +459,10 @@ public FileWrapper parent () {
 	}
 
 	/** @throw GdxRuntimeException if this file handle is a {@link FileType#Classpath} or {@link FileType#Internal} file. */
-	public void mkdirs () {
+	public boolean mkdirs () {
 		if (type == FileType.Classpath) throw new GdxRuntimeException("Cannot mkdirs with a classpath file: " + file);
 		if (type == FileType.Internal) throw new GdxRuntimeException("Cannot mkdirs with an internal file: " + file);
-		file().mkdirs();
+		return file().mkdirs();
 	}
 
 	/** Returns true if the file exists. On Android, a {@link FileType#Classpath} or {@link FileType#Internal} handle to a directory

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/PreloaderBundleGenerator.java
Patch:
@@ -229,7 +229,7 @@ private String getAssetOutputPath (GeneratorContext context) {
 			String[] tokens = paths.split(",");
 			String path = null;
 			for(String token: tokens) {
-				if(new FileWrapper(token).exists()) {
+				if (new FileWrapper(token).exists() || new FileWrapper(token).mkdirs()) {
 					path = token;
 				}
 			}

File: extensions/gdx-ai/src/com/badlogic/gdx/ai/msg/PriorityQueue.java
Patch:
@@ -95,23 +95,23 @@ public void setUniqueness (boolean uniqueness) {
 		this.uniqueness = uniqueness;
 	}
 
-	/** Inserts the specified element into this priority queue.
+	/** Inserts the specified element into this priority queue. If {@code uniqueness} is enabled and this priority queue already
+	 * contains the element, the call leaves the queue unchanged and returns false.
 	 * 
 	 * @return true if the element was added to this queue, else false
 	 * @throws ClassCastException if the specified element cannot be compared with elements currently in this priority queue
 	 *            according to the priority queue's ordering
 	 * @throws NullPointerException if the specified element is null */
 	public boolean add (E e) {
 		if (e == null) throw new NullPointerException();
-		if (uniqueness && set.contains(e)) return false;
+		if (uniqueness && !set.add(e)) return false;
 		int i = size;
 		if (i >= queue.length) growToSize(i + 1);
 		size = i + 1;
 		if (i == 0)
 			queue[0] = e;
 		else
 			siftUp(i, e);
-		if (uniqueness) set.add(e);
 		return true;
 	}
 

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/AllHitsRayResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/BroadphaseNativeTypes.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestConvexResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestNotMeConvexResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestNotMeRayResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ClosestRayResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/Collision.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionConstants.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CollisionObjectWrapper.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactCallbackEvent.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ContactResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/ConvexResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/CustomCollisionDispatcher.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/GdxCollisionObjectBridge.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalConvexResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalRayResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/LocalShapeInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/PHY_ScalarType.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/RayResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_PHY_ScalarType.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btFace_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_btSimplePair_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_btSerializer.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_p_q_const__btCollisionShape_p_q_const__btCollisionShape__bool.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_float.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_int.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btCollisionObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btDbvtNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btDbvtProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btPersistentManifold.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_btVector3.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SWIGTYPE_p_p_unsigned_char.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/SphereTriangleDetector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/bt32BitAxisSweep3.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btActivatingCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3InternalInt.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btAxisSweep3InternalShort.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBU_Simplex1to4.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBox2dBox2dCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBox2dShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxBoxCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxBoxDetector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBoxShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseAabbCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePair.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphasePairSortPredicate.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBroadphaseRayCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhSubtreeInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhSubtreeInfoData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btBvhTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeX.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCapsuleShapeZ.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCharIndexTripletData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithmConstructionInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionAlgorithmCreateFunc.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionDispatcher.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectConstArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionObjectWrapper.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCollisionWorld.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundCompoundCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeChild.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeChildData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCompoundShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConcaveShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeX.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConeShapeZ.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConstraintRow.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContactManifoldTypes.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btContinuousConvexCollision.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvex2dConvex2dAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvex2dShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexCast.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexConcaveCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexConvexAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexHullShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexHullShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalAabbCachingShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexInternalShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPenetrationDepthSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPlaneCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPointCloudShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexPolyhedron.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexTriangleCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btConvexTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeX.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btCylinderShapeZ.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvt.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtAabbMm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtBroadphase.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDbvtProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDefaultCollisionConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDefaultCollisionConstructionInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDiscreteCollisionDetectorInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDispatcher.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btDispatcherInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btElement.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btEmptyAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btEmptyShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btFace.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGhostObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGhostPairCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkConvexCast.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkEpaPenetrationDepthSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkEpaSolver2.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btGjkPairDetector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHashedOverlappingPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHashedSimplePairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btHeightfieldTerrainShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIndexedMesh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIntIndexData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btInternalEdgeAdjustFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btInternalTriangleIndexCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btManifoldResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMaterial.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMaterialProperties.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMeshPartData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMinkowskiPenetrationDepthSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMinkowskiSumShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSapBroadphase.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSphereShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultiSphereShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btMultimaterialTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btNodeOverlapCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btNullPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNodeDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOptimizedBvhNodeFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlapCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlapFilterCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlappingPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btOverlappingPairCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPairCachingGhostObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPersistentManifold.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPersistentManifoldArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPointCollector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralContactClipping.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralConvexAabbCachingShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPolyhedralConvexShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btPositionAndRadius.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btQuantizedBvhNodeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btScaledBvhTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btScaledTriangleMeshShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShapeHull.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShortIntIndexData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btShortIntIndexTripletData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimpleBroadphase.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimpleBroadphaseProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimplePair.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSimulationIslandManager.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSortedOverlappingPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereBoxCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereSphereCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSphereTriangleCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStaticPlaneShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStaticPlaneShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStorageResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStridingMeshInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btStridingMeshInterfaceData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSubSimplexClosestResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btSubsimplexConvexCast.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangle.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleBuffer.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleConvexcastCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleIndexVertexArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleIndexVertexMaterialArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoMap.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleInfoMapData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMesh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleMeshShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleRaycastCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btTriangleShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUniformScalingShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUnionFind.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btUsageBitfield.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btVoronoiSimplexSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/Dynamics.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/DynamicsConstants.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/DynamicsJNI.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/InternalTickCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btMatrix3x3DoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btMatrix3x3FloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_btSerializer.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_f_p_btDynamicsWorld_float__void.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_float.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_int.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btCollisionObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btPersistentManifold.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/SWIGTYPE_p_p_btTypedConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/bt6DofFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btActionInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btAngularLimit.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btCharacterControllerInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraintData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraintDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintParams.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSetting.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConstraintSolverType.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfoFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDefaultVehicleRaycaster.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDiscreteDynamicsWorld.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorld.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btDynamicsWorldType.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraintData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofConstraintDoubleData2.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraintData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btGeneric6DofSpringConstraintDoubleData2.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHinge2Constraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintDoubleData2.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeConstraintFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btHingeFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btJacobianEntry.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btJointFeedback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btKinematicCharacterController.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraintDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btPoint2PointConstraintDoubleData2.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 3.0.0
+ * Version 3.0.2
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -591,6 +591,9 @@ public void rect (float x00, float y00, float z00, float x10, float y10, float z
 	@Override
 	public void patch (VertexInfo corner00, VertexInfo corner10, VertexInfo corner11, VertexInfo corner01, int divisionsU,
 		int divisionsV) {
+		if (divisionsU < 1 || divisionsV < 1) {
+			throw new GdxRuntimeException("divisionsU and divisionV must be > 0, u,v: " + divisionsU + ", " + divisionsV);
+		}
 		ensureRectangles((divisionsV + 1) * (divisionsU + 1), divisionsV * divisionsU);
 		for (int u = 0; u <= divisionsU; u++) {
 			final float alphaU = (float)u / (float)divisionsU;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Container.java
Patch:
@@ -286,7 +286,7 @@ public Container<T> minSize (float size) {
 
 	/** Sets the minWidth and minHeight to the specified values. */
 	public Container<T> minSize (float width, float height) {
-		minSize(new Fixed(width));
+		minSize(new Fixed(width), new Fixed(height));
 		return this;
 	}
 
@@ -326,7 +326,7 @@ public Container<T> prefHeight (Value prefHeight) {
 
 	/** Sets the prefWidth and prefHeight to the specified value. */
 	public Container<T> prefSize (float width, float height) {
-		prefSize(new Fixed(width));
+		prefSize(new Fixed(width), new Fixed(height));
 		return this;
 	}
 
@@ -378,7 +378,7 @@ public Container<T> maxSize (float size) {
 
 	/** Sets the maxWidth and maxHeight to the specified values. */
 	public Container<T> maxSize (float width, float height) {
-		maxSize(new Fixed(width));
+		maxSize(new Fixed(width), new Fixed(height));
 		return this;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Container.java
Patch:
@@ -286,7 +286,7 @@ public Container<T> minSize (float size) {
 
 	/** Sets the minWidth and minHeight to the specified values. */
 	public Container<T> minSize (float width, float height) {
-		minSize(new Fixed(width));
+		minSize(new Fixed(width), new Fixed(height));
 		return this;
 	}
 
@@ -326,7 +326,7 @@ public Container<T> prefHeight (Value prefHeight) {
 
 	/** Sets the prefWidth and prefHeight to the specified value. */
 	public Container<T> prefSize (float width, float height) {
-		prefSize(new Fixed(width));
+		prefSize(new Fixed(width), new Fixed(height));
 		return this;
 	}
 
@@ -378,7 +378,7 @@ public Container<T> maxSize (float size) {
 
 	/** Sets the maxWidth and maxHeight to the specified values. */
 	public Container<T> maxSize (float width, float height) {
-		maxSize(new Fixed(width));
+		maxSize(new Fixed(width), new Fixed(height));
 		return this;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -591,6 +591,9 @@ public void rect (float x00, float y00, float z00, float x10, float y10, float z
 	@Override
 	public void patch (VertexInfo corner00, VertexInfo corner10, VertexInfo corner11, VertexInfo corner01, int divisionsU,
 		int divisionsV) {
+		if (divisionsU < 1 || divisionsV < 1) {
+			throw new GdxRuntimeException("divisionsU and divisionV must be > 0, u,v: " + divisionsU + ", " + divisionsV);
+		}
 		ensureRectangles((divisionsV + 1) * (divisionsU + 1), divisionsV * divisionsU);
 		for (int u = 0; u <= divisionsU; u++) {
 			final float alphaU = (float)u / (float)divisionsU;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FilesTest.java
Patch:
@@ -386,7 +386,7 @@ private void testLocal () throws IOException {
 		if (handle.delete()) fail();
 		if (handle.list().length != 0) fail();
 		if (handle.child("meow").exists()) fail();
-		if (handle.parent().exists()) fail();
+		if (!handle.parent().exists()) fail();
 		try {
 			handle.read().close();
 			fail();

File: extensions/gdx-ai/src/com/badlogic/gdx/ai/msg/MessageDispatcher.java
Patch:
@@ -76,8 +76,8 @@ public float getTimeGranularity () {
 	 * queue. This prevents many similar telegrams from bunching up in the queue and being delivered en masse, thus flooding an
 	 * agent with identical messages. To eliminate time granularity just set it to 0. */
 	public void setTimeGranularity (float timeGranularity) {
-		boolean uniqueness = timeGranularity <= 0;
-		this.timeGranularity = uniqueness ? 0 : (long)(timeGranularity * NANOS_PER_SEC);
+		boolean uniqueness = timeGranularity > 0;
+		this.timeGranularity = uniqueness ? (long)(timeGranularity * NANOS_PER_SEC) : 0;
 		this.queue.setUniqueness(uniqueness);
 
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
Patch:
@@ -98,7 +98,7 @@ public static class Inputs {
 		public final static Uniform emissiveColor = new Uniform("u_emissiveColor", ColorAttribute.Emissive);
 		public final static Uniform reflectionColor = new Uniform("u_reflectionColor", ColorAttribute.Reflection);
 		public final static Uniform normalTexture = new Uniform("u_normalTexture", TextureAttribute.Normal);
-		public final static Uniform alphaTest = new Uniform("u_alphaTest", FloatAttribute.AlphaTest);
+		public final static Uniform alphaTest = new Uniform("u_alphaTest");
 
 		public final static Uniform ambientCube = new Uniform("u_ambientCubemap");
 		public final static Uniform dirLights = new Uniform("u_dirLights");
@@ -486,7 +486,8 @@ public static String getDefaultFragmentShader () {
 
 	/** The renderable used to create this shader, invalid after the call to init */
 	private Renderable renderable;
-	private long materialMask;
+	/** The material attributes that this shader supports */
+	protected final long materialMask;
 	private long vertexMask;
 	protected final Config config;
 	/** Material attributes which are not required but always supported. */

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -211,7 +211,8 @@ protected void hideStatusBar (boolean hide) {
 
 		try {
 			Method m = View.class.getMethod("setSystemUiVisibility", int.class);
-			m.invoke(rootView, 0x0);
+			if (getVersion() <= 13)
+				m.invoke(rootView, 0x0);
 			m.invoke(rootView, 0x1);
 		} catch (Exception e) {
 			log("AndroidApplication", "Can't hide status bar", e);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/DownloadTest.java
Patch:
@@ -39,6 +39,7 @@ public void run () {
 			
 			@Override
 			public void failed (Throwable t) {
+				t.printStackTrace();
 				Gdx.app.log("EmptyDownloadTest", "Failed", t);
 			}
 			

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/IOSRobovmTests.java
Patch:
@@ -29,7 +29,7 @@ public class IOSRobovmTests extends IOSApplication.Delegate {
 	protected IOSApplication createApplication() {
 		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
 		config.useAccelerometer = false;
-		return new IOSApplication(new Benchmark3DTest(), config);
+		return new IOSApplication(new DownloadTest(), config);
 	}
 
 	public static void main(String[] argv) {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,6 +21,7 @@
 import com.badlogic.gdx.tests.AlphaTest;
 import com.badlogic.gdx.tests.Box2DTestCollection;
 import com.badlogic.gdx.tests.BulletTestCollection;
+import com.badlogic.gdx.tests.DownloadTest;
 import com.badlogic.gdx.tests.FreeTypeFontLoaderTest;
 import com.badlogic.gdx.tests.GamepadTest;
 import com.badlogic.gdx.tests.MusicTest;
@@ -41,7 +42,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new FreeTypeFontLoaderTest();		
+		GdxTest test = new DownloadTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -24,7 +24,6 @@
 import com.badlogic.gdx.tests.FreeTypeFontLoaderTest;
 import com.badlogic.gdx.tests.GamepadTest;
 import com.badlogic.gdx.tests.MusicTest;
-import com.badlogic.gdx.tests.MyGdxGame;
 import com.badlogic.gdx.tests.PixmapTest;
 import com.badlogic.gdx.tests.ShortSoundTest;
 import com.badlogic.gdx.tests.StateMachineTest;
@@ -42,7 +41,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new MyGdxGame();		
+		GdxTest test = new FreeTypeFontLoaderTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -24,6 +24,7 @@
 import com.badlogic.gdx.tests.FreeTypeFontLoaderTest;
 import com.badlogic.gdx.tests.GamepadTest;
 import com.badlogic.gdx.tests.MusicTest;
+import com.badlogic.gdx.tests.MyGdxGame;
 import com.badlogic.gdx.tests.PixmapTest;
 import com.badlogic.gdx.tests.ShortSoundTest;
 import com.badlogic.gdx.tests.StateMachineTest;
@@ -41,7 +42,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new FreeTypeFontLoaderTest();		
+		GdxTest test = new MyGdxGame();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGeneratorLoader.java
Patch:
@@ -46,11 +46,11 @@ public FreeTypeFontGenerator load (AssetManager assetManager, String fileName, F
 		return generator;
 	}
 
-	static public class FreeTypeFontGeneratorParameters extends AssetLoaderParameters<FreeTypeFontGenerator> {
-	}
-
 	@Override
 	public Array<AssetDescriptor> getDependencies (String fileName, FileHandle file, FreeTypeFontGeneratorParameters parameter) {
 		return null;
 	}
+	
+	static public class FreeTypeFontGeneratorParameters extends AssetLoaderParameters<FreeTypeFontGenerator> {
+	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,6 +21,7 @@
 import com.badlogic.gdx.tests.AlphaTest;
 import com.badlogic.gdx.tests.Box2DTestCollection;
 import com.badlogic.gdx.tests.BulletTestCollection;
+import com.badlogic.gdx.tests.FreeTypeFontLoaderTest;
 import com.badlogic.gdx.tests.GamepadTest;
 import com.badlogic.gdx.tests.MusicTest;
 import com.badlogic.gdx.tests.PixmapTest;
@@ -40,7 +41,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new StateMachineTest();		
+		GdxTest test = new FreeTypeFontLoaderTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -28,6 +28,7 @@
 
 package com.badlogic.gdx.tests.utils;
 
+import com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader;
 import com.badlogic.gdx.tests.*;
 import com.badlogic.gdx.tests.bench.TiledMapBench;
 import com.badlogic.gdx.tests.examples.MoveSpriteExample;
@@ -213,7 +214,8 @@ public class GdxTests {
 		ViewportTest1.class,
 		ViewportTest2.class,
 		ViewportTest3.class,
-		YDownTest.class
+		YDownTest.class,
+		FreeTypeFontLoaderTest.class
 		// @on
 
 		// SoundTouchTest.class, Mpg123Test.class, WavTest.class, FreeTypeTest.class,

File: gdx/src/com/badlogic/gdx/net/NetJavaImpl.java
Patch:
@@ -146,7 +146,7 @@ public void sendHttpRequest (final HttpRequest httpRequest, final HttpResponseLi
 			connection.setDoOutput(doingOutPut);
 			connection.setDoInput(true);
 			connection.setRequestMethod(method);
-			connection.setFollowRedirects(httpRequest.getFollowRedirects());
+			HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());
 
 			lock.lock();
 			connections.put(httpRequest, connection);

File: gdx/src/com/badlogic/gdx/net/NetJavaImpl.java
Patch:
@@ -146,7 +146,7 @@ public void sendHttpRequest (final HttpRequest httpRequest, final HttpResponseLi
 			connection.setDoOutput(doingOutPut);
 			connection.setDoInput(true);
 			connection.setRequestMethod(method);
-			connection.setFollowRedirects(httpRequest.getFollowRedirects());
+			HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());
 
 			lock.lock();
 			connections.put(httpRequest, connection);

File: gdx/src/com/badlogic/gdx/Net.java
Patch:
@@ -195,7 +195,7 @@ public void setTimeOut (int timeOut) {
 		
 		/** Sets whether 301 and 302 redirects are followed. By default true.
 		 * Can't be changed in the GWT backend because this uses XmlHttpRequests which always redirect.
-		 * @param boolean whether to follow redirects.
+		 * @param followRedirects whether to follow redirects.
 		 * @exception IllegalArgumentException if redirection is disabled on the GWT backend.*/
 		public void setFollowRedirects (boolean followRedirects) throws IllegalArgumentException {
 			if (followRedirects == true || Gdx.app.getType() != ApplicationType.WebGL) {
@@ -243,7 +243,7 @@ public Map<String, String> getHeaders () {
 		}
 		
 		/** Returns whether 301 and 302 redirects are followed. By default true.
-		 * @param boolean Whether to follow redirects. */
+		 *  Whether to follow redirects. */
 		public boolean getFollowRedirects() {
 			return followRedirects;
 		}

File: gdx/src/com/badlogic/gdx/Net.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Map;
 import java.util.concurrent.Future;
 
-import com.badlogic.gdx.Application.ApplicationType
+import com.badlogic.gdx.Application.ApplicationType;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Net.HttpRequest;
 import com.badlogic.gdx.Net.HttpResponseListener;
@@ -198,7 +198,7 @@ public void setTimeOut (int timeOut) {
 		 * @param boolean whether to follow redirects.
 		 * @exception IllegalArgumentException if redirection is disabled on the GWT backend.*/
 		public void setFollowRedirects (boolean followRedirects) throws IllegalArgumentException {
-			if (followRedirects == true || Gdx.app.getApplicationType() != ApplicationType.WebGl) {
+			if (followRedirects == true || Gdx.app.getType() != ApplicationType.WebGL) {
 				this.followRedirects = followRedirects;
 			}
 			else {

File: gdx/src/com/badlogic/gdx/math/Ellipse.java
Patch:
@@ -178,7 +178,7 @@ public Ellipse setSize (float width, float height) {
 		return this;
 	}
 
-	/** @return The area of this {@link Ellipse} as {@link MathUtils#PI} * {@link rx Ellipse#width} * {@link ry Ellipse#height} */
+	/** @return The area of this {@link Ellipse} as {@link MathUtils#PI} * {@link Ellipse#width} * {@link Ellipse#height} */
 	public float area () {
 		return MathUtils.PI * (this.width * this.height) / 4;
 	}

File: gdx/src/com/badlogic/gdx/math/Ellipse.java
Patch:
@@ -178,7 +178,7 @@ public Ellipse setSize (float width, float height) {
 		return this;
 	}
 
-	/** @return The area of this {@link Ellipse} as {@link MathUtils#PI} * {@link rx Ellipse#width} * {@link ry Ellipse#height} */
+	/** @return The area of this {@link Ellipse} as {@link MathUtils#PI} * {@link Ellipse#width} * {@link Ellipse#height} */
 	public float area () {
 		return MathUtils.PI * (this.width * this.height) / 4;
 	}

File: extensions/gdx-ai/src/com/badlogic/gdx/ai/msg/MessageDispatcher.java
Patch:
@@ -157,7 +157,7 @@ public void dispatchDelayedMessages () {
 		do {
 			// Read the telegram from the front of the queue
 			final Telegram telegram = queue.peek();
-			if (telegram.getTimestamp() < currentTime) break;
+			if (telegram.getTimestamp() > currentTime) break;
 
 			if (debugEnabled) {
 				Gdx.app.log(LOG_TAG, "Queued telegram ready for dispatch: Sent to " + telegram.receiver + ". Msg is "

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java
Patch:
@@ -93,7 +93,7 @@ public void setPosition (float position) {
 
 	@Override
 	public float getPosition () {
-		return (float)(track.getCurrentTime() * 1000.0);
+		return (float)(track.getCurrentTime());
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/audio/Music.java
Patch:
@@ -78,7 +78,7 @@ public interface Music extends Disposable {
 	 * @param volume the volume in the range [0,1]. */
 	public void setPan (float pan, float volume);
 
-	/** Returns the playback position in milliseconds. */
+	/** Returns the playback position in seconds. */
 	public float getPosition ();
 
 	/** Needs to be called when the Music is no longer needed. */

File: gdx/src/com/badlogic/gdx/audio/Music.java
Patch:
@@ -78,7 +78,7 @@ public interface Music extends Disposable {
 	 * @param volume the volume in the range [0,1]. */
 	public void setPan (float pan, float volume);
 
-	/** Returns the playback position in milliseconds. */
+	/** Returns the playback position in seconds. */
 	public float getPosition ();
 
 	/** Needs to be called when the Music is no longer needed. */

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java
Patch:
@@ -93,7 +93,7 @@ public void setPosition (float position) {
 
 	@Override
 	public float getPosition () {
-		return (float)(track.getCurrentTime() * 1000.0);
+		return (float)(track.getCurrentTime());
 	}
 
 	@Override

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/FileWrapper.java
Patch:
@@ -459,10 +459,10 @@ public FileWrapper parent () {
 	}
 
 	/** @throw GdxRuntimeException if this file handle is a {@link FileType#Classpath} or {@link FileType#Internal} file. */
-	public void mkdirs () {
+	public boolean mkdirs () {
 		if (type == FileType.Classpath) throw new GdxRuntimeException("Cannot mkdirs with a classpath file: " + file);
 		if (type == FileType.Internal) throw new GdxRuntimeException("Cannot mkdirs with an internal file: " + file);
-		file().mkdirs();
+		return file().mkdirs();
 	}
 
 	/** Returns true if the file exists. On Android, a {@link FileType#Classpath} or {@link FileType#Internal} handle to a directory

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/PreloaderBundleGenerator.java
Patch:
@@ -229,7 +229,7 @@ private String getAssetOutputPath (GeneratorContext context) {
 			String[] tokens = paths.split(",");
 			String path = null;
 			for(String token: tokens) {
-				if(new FileWrapper(token).exists()) {
+				if (new FileWrapper(token).exists() || new FileWrapper(token).mkdirs()) {
 					path = token;
 				}
 			}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/DragAndDropTest.java
Patch:
@@ -109,7 +109,6 @@ public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act(Gdx.graphics.getDeltaTime());
 		stage.draw();
-		Table.drawDebug(stage);
 	}
 
 	public void resize (int width, int height) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
Patch:
@@ -102,7 +102,7 @@ public void setupScene () {
 	}
 
 	public void setupUI () {
-		ui = new Stage();;
+		ui = new Stage();
 		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 		TextButton reload = new TextButton("Reload Shaders", skin.get(TextButtonStyle.class));
 		camera = new SelectBox(skin.get(SelectBoxStyle.class));
@@ -170,7 +170,6 @@ public void render () {
 		fps.setText("fps: " + Gdx.graphics.getFramesPerSecond());
 		ui.act();
 		ui.draw();
-		Table.drawDebug(ui);
 	}
 
 	Vector3 position = new Vector3();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPaneScrollBarsTest.java
Patch:
@@ -224,7 +224,6 @@ public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act(Gdx.graphics.getDeltaTime());
 		stage.draw();
-		Table.drawDebug(stage);
 	}
 
 	public void resize (int width, int height) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPaneTest.java
Patch:
@@ -123,7 +123,6 @@ public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act(Gdx.graphics.getDeltaTime());
 		stage.draw();
-		Table.drawDebug(stage);
 	}
 
 	public void resize (int width, int height) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TreeTest.java
Patch:
@@ -68,7 +68,6 @@ public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act(Gdx.graphics.getDeltaTime());
 		stage.draw();
-		Table.drawDebug(stage);
 	}
 
 	public void resize (int width, int height) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UISimpleTest.java
Patch:
@@ -97,7 +97,6 @@ public void render () {
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act(Math.min(Gdx.graphics.getDeltaTime(), 1 / 30f));
 		stage.draw();
-		Table.drawDebug(stage);
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -182,7 +182,6 @@ public void render () {
 
 		stage.act(Math.min(Gdx.graphics.getDeltaTime(), 1 / 30f));
 		stage.draw();
-		Table.drawDebug(stage);
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -157,6 +157,7 @@ public class GdxTests {
 		ReflectionTest.class,
 		RotationTest.class,
 		RunnablePostTest.class,
+		Scene2DDebugRendererTest.class,
 		Scene2dTest.class,
 		ScrollPane2Test.class,
 		ScrollPaneScrollBarsTest.class,

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/BuildExecutor.java
Patch:
@@ -33,7 +33,7 @@ public class BuildExecutor {
 	public static boolean executeAnt (String buildFile, String params) {
 		FileDescriptor build = new FileDescriptor(buildFile);
 		String ant = System.getProperty("os.name").contains("Windows") ? "ant.bat" : "ant";
-		String command = ant + " -f " + build.file().getAbsolutePath() + " " + params;
+		String command = ant + " -f \"" + build.file().getAbsolutePath() + "\" " + params;
 		System.out.println("Executing '" + command + "'");
 		return startProcess(command, build.parent().file());
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Container.java
Patch:
@@ -38,7 +38,6 @@ public Container (T actor) {
 
 	public void draw (Batch batch, float parentAlpha) {
 		validate();
-		if (actor == null) return;
 		if (isTransform()) {
 			applyTransform(batch, computeTransform());
 			drawBackground(batch, parentAlpha, 0, 0);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OggInputStream.java
Patch:
@@ -87,7 +87,7 @@ public class OggInputStream extends InputStream {
 	/** The index into the byte array we currently read from */
 	private int readIndex;
 	/** The byte array store used to hold the data read from the ogg */
-	private ByteBuffer pcmBuffer = BufferUtils.createByteBuffer(BUFFER_SIZE * 500);
+	private ByteBuffer pcmBuffer = BufferUtils.createByteBuffer(4096 * 500);
 	/** The total number of bytes */
 	private int total;
 
@@ -351,8 +351,8 @@ private void readPCM () {
 									}
 
 									int bytesToWrite = 2 * oggInfo.channels * bout;
-									if (bytesToWrite >= pcmBuffer.remaining()) {
-										throw new GdxRuntimeException("Ogg block too big to be buffered: " + bytesToWrite);
+									if (bytesToWrite > pcmBuffer.remaining()) {
+										throw new GdxRuntimeException("Ogg block too big to be buffered: " + bytesToWrite + " :: " + pcmBuffer.remaining());
 									} else {
 										pcmBuffer.put(convbuffer, 0, bytesToWrite);
 									}

File: gdx/src/com/badlogic/gdx/math/Ellipse.java
Patch:
@@ -180,7 +180,7 @@ public Ellipse setSize (float width, float height) {
 
 	/** @return The area of this {@link Ellipse} as {@link MathUtils#PI} * {@link rx Ellipse#width} * {@link ry Ellipse#height} */
 	public float area () {
-		return MathUtils.PI * (this.width * this.height) / 2;
+		return MathUtils.PI * (this.width * this.height) / 4;
 	}
 
 	/** Approximates the circumference of this {@link Ellipse}. Oddly enough, the circumference of an ellipse is actually difficult

File: gdx/src/com/badlogic/gdx/math/Rectangle.java
Patch:
@@ -367,7 +367,7 @@ public float area () {
 	}
 
 	public float perimeter () {
-		return 2 * this.width * this.height;
+		return 2 * (this.width + this.height);
 	}
 
 	public int hashCode () {

File: gdx/src/com/badlogic/gdx/math/Ellipse.java
Patch:
@@ -180,7 +180,7 @@ public Ellipse setSize (float width, float height) {
 
 	/** @return The area of this {@link Ellipse} as {@link MathUtils#PI} * {@link rx Ellipse#width} * {@link ry Ellipse#height} */
 	public float area () {
-		return MathUtils.PI * (this.width * this.height) / 2;
+		return MathUtils.PI * (this.width * this.height) / 4;
 	}
 
 	/** Approximates the circumference of this {@link Ellipse}. Oddly enough, the circumference of an ellipse is actually difficult

File: gdx/src/com/badlogic/gdx/math/Rectangle.java
Patch:
@@ -367,7 +367,7 @@ public float area () {
 	}
 
 	public float perimeter () {
-		return 2 * this.width * this.height;
+		return 2 * (this.width + this.height);
 	}
 
 	public int hashCode () {

File: gdx/src/com/badlogic/gdx/assets/loaders/ParticleEffectLoader.java
Patch:
@@ -59,8 +59,8 @@ public Array<AssetDescriptor> getDependencies (String fileName, FileHandle file,
 	public static class ParticleEffectParameter extends AssetLoaderParameters<ParticleEffect> {
 		/** Atlas file name. */
 		public String atlasFile;
-		/** Prefix to be added to the image names **/
-		public String atlasPrefix = "";
+		/** Optional prefix to image names **/
+		public String atlasPrefix;
 		/** Image directory. */
 		public FileHandle imagesDir;
 	}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -152,10 +152,8 @@ void setupDisplay () throws LWJGLException {
 		Display.setInitialBackground(config.initialBackgroundColor.r, config.initialBackgroundColor.g,
 			config.initialBackgroundColor.b);
 
-		if (config.x != -1 && config.y != -1) Display.setLocation(config.x, config.y);
+		Display.setLocation(config.x, config.y);
 		createDisplayPixelFormat();
-		config.x = Display.getX();
-		config.y = Display.getY();
 		initiateGLInstances();
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -152,10 +152,8 @@ void setupDisplay () throws LWJGLException {
 		Display.setInitialBackground(config.initialBackgroundColor.r, config.initialBackgroundColor.g,
 			config.initialBackgroundColor.b);
 
-		if (config.x != -1 && config.y != -1) Display.setLocation(config.x, config.y);
+		Display.setLocation(config.x, config.y);
 		createDisplayPixelFormat();
-		config.x = Display.getX();
-		config.y = Display.getY();
 		initiateGLInstances();
 	}
 

File: gdx/src/com/badlogic/gdx/utils/SharedLibraryLoader.java
Patch:
@@ -211,7 +211,7 @@ private boolean canWrite (File file) {
 	
 	private boolean canExecute(File file) {
 		try {
-			Method m = File.class.getMethod("canWrite");
+			Method m = File.class.getMethod("canExecute");
 			return (Boolean)m.invoke(file);
 		} catch (Exception e) {
 			return false;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -286,15 +286,15 @@ public void clear () {
 	}
 
 	/** Returns the first actor found with the specified name. Note this recursively compares the name of every actor in the group. */
-	public Actor findActor (String name) {
+	public <T extends Actor> T findActor (String name) {
 		Array<Actor> children = this.children;
 		for (int i = 0, n = children.size; i < n; i++)
-			if (name.equals(children.get(i).getName())) return children.get(i);
+			if (name.equals(children.get(i).getName())) return (T) children.get(i);
 		for (int i = 0, n = children.size; i < n; i++) {
 			Actor child = children.get(i);
 			if (child instanceof Group) {
 				Actor actor = ((Group)child).findActor(name);
-				if (actor != null) return actor;
+				if (actor != null) return (T) actor;
 			}
 		}
 		return null;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -286,15 +286,15 @@ public void clear () {
 	}
 
 	/** Returns the first actor found with the specified name. Note this recursively compares the name of every actor in the group. */
-	public Actor findActor (String name) {
+	public <T extends Actor> T findActor (String name) {
 		Array<Actor> children = this.children;
 		for (int i = 0, n = children.size; i < n; i++)
-			if (name.equals(children.get(i).getName())) return children.get(i);
+			if (name.equals(children.get(i).getName())) return (T) children.get(i);
 		for (int i = 0, n = children.size; i < n; i++) {
 			Actor child = children.get(i);
 			if (child instanceof Group) {
 				Actor actor = ((Group)child).findActor(name);
-				if (actor != null) return actor;
+				if (actor != null) return (T) actor;
 			}
 		}
 		return null;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -39,7 +39,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new IssueTest();		
+		GdxTest test = new TimerTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TimerTest.java
Patch:
@@ -29,6 +29,6 @@ public void create () {
 			public void run () {
 				Gdx.app.log("TimerTest", "ping");
 			}
-		}, 0, 1);
+		}, 1, 1);
 	}
 }

File: gdx/src/com/badlogic/gdx/Version.java
Patch:
@@ -23,7 +23,7 @@
  * @author mzechner */
 public class Version {
 	/** the current version of libgdx as a String in the major.minor.revision format **/
-	public static final String VERSION = "1.1.2";
+	public static final String VERSION = "1.1.1";
 
 	/** the current major version of libgdx **/
 	public static final int MAJOR;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
Patch:
@@ -64,9 +64,8 @@ protected void pause () {
 		synchronized (musics) {
 			for (AndroidMusic music : musics) {
 				if (music.isPlaying()) {
-					music.wasPlaying = true;
 					music.pause();
-
+					music.wasPlaying = true;					
 				} else
 					music.wasPlaying = false;
 			}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/SettingsDialog.java
Patch:
@@ -210,6 +210,7 @@ public void showDialog () {
 
 	public List<String> getGradleArgs () {
 		List<String> list = new ArrayList<String>();
+		list.add("--no-daemon");
 		if (eclipseBox.isSelected()) {
 			list.add("eclipse");
 			list.add("afterEclipseImport");

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/SettingsDialog.java
Patch:
@@ -210,6 +210,7 @@ public void showDialog () {
 
 	public List<String> getGradleArgs () {
 		List<String> list = new ArrayList<String>();
+		list.add("--no-daemon");
 		if (eclipseBox.isSelected()) {
 			list.add("eclipse");
 			list.add("afterEclipseImport");

File: extensions/gdx-controllers/gdx-controllers-gwt/src/com/badlogic/gdx/controllers/gwt/emu/com/badlogic/gdx/controllers/mappings/Ouya.java
Patch:
@@ -74,5 +74,6 @@ public class Ouya {
 		AXIS_RIGHT_X = 3;
 		AXIS_RIGHT_Y = 4;
 		AXIS_RIGHT_TRIGGER = 11;
+		BUTTON_MENU = 108; // unverified
 	}
 }

File: extensions/gdx-controllers/gdx-controllers-gwt/src/com/badlogic/gdx/controllers/gwt/GwtControllers.java
Patch:
@@ -181,9 +181,7 @@ public void onGamepadUpdated(int index) {
 							controller.buttons.put(i, newButton);
 							continue;
 						}
-						if (i == 0) {
-							GamepadSupport.consoleLog("0: " + oldButton + "," + newButton);
-						}
+
 						GwtControllerEvent event = eventPool.obtain();
 						event.type = newButton >= 0.5f ? GwtControllerEvent.BUTTON_DOWN : GwtControllerEvent.BUTTON_UP;
 						event.controller = controller;

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/BuildScriptHelper.java
Patch:
@@ -15,7 +15,7 @@ public static void addBuildScript(List<ProjectType> projects, BufferedWriter wr)
 		write(wr, "buildscript {");
 		//repos
 		write(wr, "repositories {");
-		write(wr, "mavenCentral()");
+		write(wr, DependencyBank.mavenCentral);
 		write(wr, "mavenLocal()");
 		if (projects.contains(ProjectType.HTML)) {
 			write(wr, "maven { url '" + DependencyBank.gwtPluginUrl + "' }");
@@ -51,7 +51,7 @@ public static void addAllProjects(BufferedWriter wr) throws IOException {
 		space(wr);
 		write(wr, "repositories {");
 		write(wr, "mavenLocal()");
-		write(wr, "mavenCentral()");
+		write(wr, DependencyBank.mavenCentral);
 		write(wr, "maven { url \"" + DependencyBank.libGDXSnapshotsUrl + "\" }");
 		write(wr, "maven { url \"" + DependencyBank.libGDXReleaseUrl + "\" }");
 		write(wr, "}");

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -11,10 +11,11 @@ public class DependencyBank {
 	//Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly
 	static String libgdxNightlyVersion = "1.0.2-SNAPSHOT";
 	static String roboVMVersion = "0.0.12";
-	static String buildToolsVersion = "19.0.3";
+	static String buildToolsVersion = "19.1.0";
 	static String androidAPILevel = "19";
 
 	//Repositories
+	static String mavenCentral = "mavenCentral()";
 	static String gwtPluginUrl = "https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/";
 	static String libGDXSnapshotsUrl = "https://oss.sonatype.org/content/repositories/snapshots/";
 	static String libGDXReleaseUrl = "https://oss.sonatype.org/content/repositories/releases/";

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/BuildScriptHelper.java
Patch:
@@ -15,7 +15,7 @@ public static void addBuildScript(List<ProjectType> projects, BufferedWriter wr)
 		write(wr, "buildscript {");
 		//repos
 		write(wr, "repositories {");
-		write(wr, "mavenCentral()");
+		write(wr, DependencyBank.mavenCentral);
 		write(wr, "mavenLocal()");
 		if (projects.contains(ProjectType.HTML)) {
 			write(wr, "maven { url '" + DependencyBank.gwtPluginUrl + "' }");
@@ -51,7 +51,7 @@ public static void addAllProjects(BufferedWriter wr) throws IOException {
 		space(wr);
 		write(wr, "repositories {");
 		write(wr, "mavenLocal()");
-		write(wr, "mavenCentral()");
+		write(wr, DependencyBank.mavenCentral);
 		write(wr, "maven { url \"" + DependencyBank.libGDXSnapshotsUrl + "\" }");
 		write(wr, "maven { url \"" + DependencyBank.libGDXReleaseUrl + "\" }");
 		write(wr, "}");

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -11,10 +11,11 @@ public class DependencyBank {
 	//Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly
 	static String libgdxNightlyVersion = "1.0.2-SNAPSHOT";
 	static String roboVMVersion = "0.0.12";
-	static String buildToolsVersion = "19.0.3";
+	static String buildToolsVersion = "19.1.0";
 	static String androidAPILevel = "19";
 
 	//Repositories
+	static String mavenCentral = "mavenCentral()";
 	static String gwtPluginUrl = "https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/";
 	static String libGDXSnapshotsUrl = "https://oss.sonatype.org/content/repositories/snapshots/";
 	static String libGDXReleaseUrl = "https://oss.sonatype.org/content/repositories/releases/";

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -1079,13 +1079,13 @@ public void arrow (float x1, float y1, float z1, float x2, float y2, float z2, f
 		Matrix4 temp = tmp();
 
 		// Stem
-		transform.setTranslation(tmp(direction).scl(stemLength / 2));
+		transform.setTranslation(tmp(direction).scl(stemLength / 2).add(x1, y1, z1));
 		setVertexTransform(temp.set(transform).mul(userTransform));
 		cylinder(stemDiameter, stemLength, stemDiameter, divisions);
 
 		// Cap
-		transform.translate(0, stemLength/2, 0);
-		setVertexTransform(transform);
+		transform.setTranslation(tmp(direction).scl(stemLength).add(x1, y1, z1));
+		setVertexTransform(temp.set(transform).mul(userTransform));
 		cone(coneDiameter, coneHeight, coneDiameter, divisions);
 
 		setVertexTransform(userTransform);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -1079,13 +1079,13 @@ public void arrow (float x1, float y1, float z1, float x2, float y2, float z2, f
 		Matrix4 temp = tmp();
 
 		// Stem
-		transform.setTranslation(tmp(direction).scl(stemLength / 2));
+		transform.setTranslation(tmp(direction).scl(stemLength / 2).add(x1, y1, z1));
 		setVertexTransform(temp.set(transform).mul(userTransform));
 		cylinder(stemDiameter, stemLength, stemDiameter, divisions);
 
 		// Cap
-		transform.translate(0, stemLength/2, 0);
-		setVertexTransform(transform);
+		transform.setTranslation(tmp(direction).scl(stemLength).add(x1, y1, z1));
+		setVertexTransform(temp.set(transform).mul(userTransform));
 		cone(coneDiameter, coneHeight, coneDiameter, divisions);
 
 		setVertexTransform(userTransform);

File: extensions/gdx-box2d/gdx-box2d-gwt/src/com/badlogic/gdx/physics/box2d/gwt/emu/com/badlogic/gdx/physics/box2d/Body.java
Patch:
@@ -186,7 +186,7 @@ public void applyTorque (float torque, boolean wake) {
 	public void applyLinearImpulse (Vector2 impulse, Vector2 point, boolean wake) {
 		tmp.set(impulse.x, impulse.y);
 		tmp2.set(point.x, point.y);
-		body.applyLinearImpulse(tmp, tmp2);
+		body.applyLinearImpulse(tmp, tmp2, wake);
 	}
 
 	/** Apply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if the point of
@@ -198,7 +198,7 @@ public void applyLinearImpulse (Vector2 impulse, Vector2 point, boolean wake) {
 	public void applyLinearImpulse (float impulseX, float impulseY, float pointX, float pointY, boolean wake) {
 		tmp.set(impulseX, impulseY);
 		tmp2.set(pointX, pointY);
-		body.applyLinearImpulse(tmp, tmp2);
+		body.applyLinearImpulse(tmp, tmp2, wake);
 	}
 
 	/** Apply an angular impulse.

File: extensions/gdx-box2d/gdx-box2d-gwt/src/com/badlogic/gdx/physics/box2d/gwt/emu/org/jbox2d/callbacks/PairCallback.java
Patch:
@@ -21,10 +21,9 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-
 package org.jbox2d.callbacks;
 
 // updated to rev 100
 public interface PairCallback {
-	public void addPair (Object userDataA, Object userDataB);
+	public void addPair(Object userDataA, Object userDataB);
 }

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/math/Matrix4.java
Patch:
@@ -886,7 +886,7 @@ public Matrix4 setToWorld (Vector3 position, Vector3 forward, Vector3 up) {
 		right.set(tmpForward).crs(up).nor();
 		tmpUp.set(right).crs(tmpForward).nor();
 
-		this.set(right, tmpUp, tmpForward, position);
+		this.set(right, tmpUp, tmpForward.scl(-1), position);
 		return this;
 	}
 

File: extensions/gdx-box2d/gdx-box2d-gwt/src/com/badlogic/gdx/physics/box2d/gwt/emu/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java
Patch:
@@ -157,7 +157,7 @@ private void drawAABB (Fixture fixture, Transform transform) {
 			CircleShape shape = (CircleShape)fixture.getShape();
 			float radius = shape.getRadius();
 			vertices[0].set(shape.getPosition());
-			vertices[0].rotate(transform.getRotation()).add(transform.getPosition());
+			transform.mul(vertices[0]);
 			lower.set(vertices[0].x - radius, vertices[0].y - radius);
 			upper.set(vertices[0].x + radius, vertices[0].y + radius);
 

File: gdx/src/com/badlogic/gdx/math/Quaternion.java
Patch:
@@ -780,7 +780,7 @@ public void getSwingTwist (final Vector3 axis, final Quaternion swing, final Qua
 	public float getAngleAroundRad (final float axisX, final float axisY, final float axisZ) {
 		final float d = Vector3.dot(this.x, this.y, this.z, axisX, axisY, axisZ);
 		final float l2 = Quaternion.len2(axisX * d, axisY * d, axisZ * d, this.w);
-		return l2 == 0f ? 0f : (float)(2.0 * Math.acos(this.w / Math.sqrt(l2)));
+		return MathUtils.isZero(l2) ? 0f : (float)(2.0 * Math.acos(this.w / Math.sqrt(l2)));
 	}
 
 	/** Get the angle in radians of the rotation around the specified axis. The axis must be normalized.

File: gdx/src/com/badlogic/gdx/math/Quaternion.java
Patch:
@@ -780,7 +780,7 @@ public void getSwingTwist (final Vector3 axis, final Quaternion swing, final Qua
 	public float getAngleAroundRad (final float axisX, final float axisY, final float axisZ) {
 		final float d = Vector3.dot(this.x, this.y, this.z, axisX, axisY, axisZ);
 		final float l2 = Quaternion.len2(axisX * d, axisY * d, axisZ * d, this.w);
-		return l2 == 0f ? 0f : (float)(2.0 * Math.acos(this.w / Math.sqrt(l2)));
+		return MathUtils.isZero(l2) ? 0f : (float)(2.0 * Math.acos(this.w / Math.sqrt(l2)));
 	}
 
 	/** Get the angle in radians of the rotation around the specified axis. The axis must be normalized.

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -23,6 +23,7 @@
 import com.badlogic.gdx.tests.BulletTestCollection;
 import com.badlogic.gdx.tests.GamepadTest;
 import com.badlogic.gdx.tests.MusicTest;
+import com.badlogic.gdx.tests.PixmapTest;
 import com.badlogic.gdx.tests.ShortSoundTest;
 import com.badlogic.gdx.tests.TimerTest;
 import com.badlogic.gdx.tests.g2d.ProgressiveJPEGTest;
@@ -37,7 +38,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new MusicTest();		
+		GdxTest test = new PixmapTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -37,7 +37,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new TimerTest();		
+		GdxTest test = new MusicTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ShortSoundTest.java
Patch:
@@ -7,7 +7,7 @@ public class ShortSoundTest extends GdxTest {
 
 	@Override
 	public void create () {
-		Gdx.audio.newSound(Gdx.files.internal("data/chirp.ogg")).play();
+		Gdx.audio.newSound(Gdx.files.internal("data/tic.ogg")).play();
 	}
 
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -24,6 +24,7 @@
 import com.badlogic.gdx.tests.GamepadTest;
 import com.badlogic.gdx.tests.MusicTest;
 import com.badlogic.gdx.tests.ShortSoundTest;
+import com.badlogic.gdx.tests.TimerTest;
 import com.badlogic.gdx.tests.g2d.ProgressiveJPEGTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
@@ -36,7 +37,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new ShortSoundTest();		
+		GdxTest test = new TimerTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -296,7 +296,7 @@ public static float intersectLinePlane (float x, float y, float z, float x2, flo
 		float denom = direction.dot(plane.getNormal());
 		if (denom != 0) {
 			float t = -(origin.dot(plane.getNormal()) + plane.getD()) / denom;
-			if (t >= 0 && t <= 1 && intersection != null) intersection.set(origin).add(direction.scl(t));
+			if (intersection != null) intersection.set(origin).add(direction.scl(t));
 			return t;
 		} else if (plane.testPoint(origin) == Plane.PlaneSide.OnPlane) {
 			if (intersection != null) intersection.set(origin);

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -23,7 +23,7 @@
 import com.badlogic.gdx.tests.BulletTestCollection;
 import com.badlogic.gdx.tests.GamepadTest;
 import com.badlogic.gdx.tests.MusicTest;
-import com.badlogic.gdx.tests.ShortSoundTets;
+import com.badlogic.gdx.tests.ShortSoundTest;
 import com.badlogic.gdx.tests.g2d.ProgressiveJPEGTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
@@ -36,7 +36,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new ShortSoundTets();		
+		GdxTest test = new ShortSoundTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ShortSoundTest.java
Patch:
@@ -3,11 +3,11 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
-public class ShortSoundTets extends GdxTest {
+public class ShortSoundTest extends GdxTest {
 
 	@Override
 	public void create () {
-		Gdx.audio.newSound(Gdx.files.internal("data/chirp.wav")).play();
+		Gdx.audio.newSound(Gdx.files.internal("data/chirp.ogg")).play();
 	}
 
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,7 +21,9 @@
 import com.badlogic.gdx.tests.AlphaTest;
 import com.badlogic.gdx.tests.Box2DTestCollection;
 import com.badlogic.gdx.tests.BulletTestCollection;
+import com.badlogic.gdx.tests.GamepadTest;
 import com.badlogic.gdx.tests.MusicTest;
+import com.badlogic.gdx.tests.ShortSoundTets;
 import com.badlogic.gdx.tests.g2d.ProgressiveJPEGTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
@@ -34,7 +36,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new AlphaTest();		
+		GdxTest test = new ShortSoundTets();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;

File: gdx/src/com/badlogic/gdx/Input.java
Patch:
@@ -742,7 +742,8 @@ public enum Orientation {
 		Landscape, Portrait
 	}
 
-	/** Only viable on the desktop. Will confine the mouse cursor location to the window and hide the mouse cursor.
+	/** Only viable on the desktop. Will confine the mouse cursor location to the window and hide the mouse cursor. X and y coordinates
+	 * are still reported as if the mouse was not catched.
 	 * @param catched whether to catch or not to catch the mouse cursor */
 	public void setCursorCatched (boolean catched);
 

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -197,7 +197,7 @@ public synchronized void unload (String fileName) {
 		Array<String> dependencies = assetDependencies.get(fileName);
 		if (dependencies != null) {
 			for (String dependency : dependencies) {
-				unload(dependency);
+				if (isLoaded(dependency)) unload(dependency);
 			}
 		}
 		// remove dependencies if ref count < 0

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -130,6 +130,7 @@ static public ShaderProgram createDefaultShader () {
 			+ "void main()\n" //
 			+ "{\n" //
 			+ "   v_color = " + ShaderProgram.COLOR_ATTRIBUTE + ";\n" //
+			+ "   v_color.a = v_color.a * (256.0/255.0);\n" //
 			+ "   v_texCoords = " + ShaderProgram.TEXCOORD_ATTRIBUTE + "0;\n" //
 			+ "   gl_Position =  u_projTrans * " + ShaderProgram.POSITION_ATTRIBUTE + ";\n" //
 			+ "}\n";

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteCache.java
Patch:
@@ -983,6 +983,7 @@ static ShaderProgram createDefaultShader () {
 			+ "void main()\n" //
 			+ "{\n" //
 			+ "   v_color = " + ShaderProgram.COLOR_ATTRIBUTE + ";\n" //
+			+ "   v_color.a = v_color.a * (256.0/255.0);\n" //
 			+ "   v_texCoords = " + ShaderProgram.TEXCOORD_ATTRIBUTE + "0;\n" //
 			+ "   gl_Position =  u_projectionViewMatrix * " + ShaderProgram.POSITION_ATTRIBUTE + ";\n" //
 			+ "}\n";

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.AlphaTest;
 import com.badlogic.gdx.tests.Box2DTestCollection;
 import com.badlogic.gdx.tests.BulletTestCollection;
 import com.badlogic.gdx.tests.MusicTest;
@@ -33,8 +34,9 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new ProgressiveJPEGTest();		
+		GdxTest test = new AlphaTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
+		config.r = config.g = config.b = config.a = 8;
 //		config.width = 320;
 //		config.height = 241;
 		config.width = 960;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/util/Locale.java
Patch:
@@ -436,8 +436,8 @@ public static Locale getDefault() {
 //     * <li>{@code new Locale("en", "US").getDisplayName(Locale.US)} -> {@code English (United States)}
 //     * <li>{@code new Locale("en", "US", "POSIX").getDisplayName(Locale.US)} -> {@code English (United States,Computer)}
 //     * <li>{@code new Locale("en").getDisplayName(Locale.FRANCE)} -> {@code anglais}
-//     * <li>{@code new Locale("en", "US").getDisplayName(Locale.FRANCE)} -> {@code anglais (�tats-Unis)}
-//     * <li>{@code new Locale("en", "US", "POSIX").getDisplayName(Locale.FRANCE)} -> {@code anglais (�tats-Unis,informatique)}.
+//     * <li>{@code new Locale("en", "US").getDisplayName(Locale.FRANCE)} -> {@code anglais (tats-Unis)}
+//     * <li>{@code new Locale("en", "US", "POSIX").getDisplayName(Locale.FRANCE)} -> {@code anglais (tats-Unis,informatique)}.
 //     * </ul>
 //     */
 //    public String getDisplayName(Locale locale) {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,6 +21,7 @@
 import com.badlogic.gdx.tests.Box2DTestCollection;
 import com.badlogic.gdx.tests.BulletTestCollection;
 import com.badlogic.gdx.tests.MusicTest;
+import com.badlogic.gdx.tests.g2d.ProgressiveJPEGTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class LwjglDebugStarter {
@@ -32,7 +33,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new Box2DTestCollection();		
+		GdxTest test = new ProgressiveJPEGTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 //		config.width = 320;
 //		config.height = 241;

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/BuildScriptHelper.java
Patch:
@@ -53,6 +53,7 @@ public static void addAllProjects(BufferedWriter wr) throws IOException {
 		write(wr, "mavenLocal()");
 		write(wr, "mavenCentral()");
 		write(wr, "maven { url \"" + DependencyBank.libGDXSnapshotsUrl + "\" }");
+		write(wr, "maven { url \"" + DependencyBank.libGDXReleaseUrl + "\" }");
 		write(wr, "}");
 		write(wr, "}");
 	}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -17,6 +17,7 @@ public class DependencyBank {
 	//Repositories
 	static String gwtPluginUrl = "https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/";
 	static String libGDXSnapshotsUrl = "https://oss.sonatype.org/content/repositories/snapshots/";
+	static String libGDXReleaseUrl = "https://oss.sonatype.org/content/repositories/releases/";
 
 	//Project plugins
 	static String gwtPluginImport = "de.richsource.gradle.plugins:gwt-gradle-plugin:0.4";

File: gdx/src/com/badlogic/gdx/Version.java
Patch:
@@ -23,7 +23,7 @@
  * @author mzechner */
 public class Version {
 	/** the current version of libgdx as a String in the major.minor.revision format **/
-	public static final String VERSION = "1.0.1";
+	public static final String VERSION = "1.0.2";
 
 	/** the current major version of libgdx **/
 	public static final int MAJOR;

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthoCachedTiledMapRenderer.java
Patch:
@@ -219,7 +219,7 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 		canCacheMoreS = row1 > 0;
 
 		float[] vertices = this.vertices;
-		for (int row = row1; row < row2; row++) {
+		for (int row = row2; row >= row1; row--) {
 			for (int col = col1; col < col2; col++) {
 				final TiledMapTileLayer.Cell cell = layer.getCell(col, row);
 				if (cell == null) continue;

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer.java
Patch:
@@ -86,11 +86,11 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 		final int row1 = Math.max(0, (int)(viewBounds.y / layerTileHeight));
 		final int row2 = Math.min(layerHeight, (int)((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight));
 
-		float y = row1 * layerTileHeight;
+		float y = row2 * layerTileHeight;
 		float xStart = col1 * layerTileWidth;
 		final float[] vertices = this.vertices;
 
-		for (int row = row1; row < row2; row++) {
+		for (int row = row2; row >= row1; row--) {
 			float x = xStart;
 			for (int col = col1; col < col2; col++) {
 				final TiledMapTileLayer.Cell cell = layer.getCell(col, row);
@@ -208,7 +208,7 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 				}
 				x += layerTileWidth;
 			}
-			y += layerTileHeight;
+			y -= layerTileHeight;
 		}
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureRegion.java
Patch:
@@ -235,7 +235,7 @@ public void scroll (float xAmount, float yAmount) {
 		}
 	}
 
-	/** Helper function to create tiles out of this TextureRegion starting from the top left corner going to the left and ending at
+	/** Helper function to create tiles out of this TextureRegion starting from the top left corner going to the right and ending at
 	 * the bottom right corner. Only complete tiles will be returned so if the region's width or height are not a multiple of the
 	 * tile width and height not all of the region will be used. This will not work on texture regions returned form a TextureAtlas
 	 * that either have whitespace removed or where flipped before the region is split.
@@ -264,7 +264,7 @@ public TextureRegion[][] split (int tileWidth, int tileHeight) {
 		return tiles;
 	}
 
-	/** Helper function to create tiles out of the given {@link Texture} starting from the top left corner going to the left and
+	/** Helper function to create tiles out of the given {@link Texture} starting from the top left corner going to the right and
 	 * ending at the bottom right corner. Only complete tiles will be returned so if the texture's width or height are not a
 	 * multiple of the tile width and height not all of the texture will be used.
 	 * 

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java
Patch:
@@ -99,8 +99,8 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 
 					TextureRegion region = tile.getTextureRegion();
 
-					float x1 = x;
-					float y1 = y;
+					float x1 = x + tile.getOffsetX() * unitScale;
+					float y1 = y + tile.getOffsetY() * unitScale;
 					float x2 = x1 + region.getRegionWidth() * unitScale;
 					float y2 = y1 + region.getRegionHeight() * unitScale;
 

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java
Patch:
@@ -85,8 +85,8 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 					final int rotations = cell.getRotation();
 					TextureRegion region = tile.getTextureRegion();
 
-					float x1 = x * layerTileWidth - offsetX;
-					float y1 = y * layerTileHeight50;
+					float x1 = x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale;
+					float y1 = y * layerTileHeight50 + tile.getOffsetY() * unitScale;
 					float x2 = x1 + region.getRegionWidth() * unitScale;
 					float y2 = y1 + region.getRegionHeight() * unitScale;
 

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricTiledMapRenderer.java
Patch:
@@ -131,8 +131,8 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 
 					TextureRegion region = tile.getTextureRegion();
 
-					float x1 = x;
-					float y1 = y;
+					float x1 = x + tile.getOffsetX() * unitScale;
+					float y1 = y + tile.getOffsetY() * unitScale;
 					float x2 = x1 + region.getRegionWidth() * unitScale;
 					float y2 = y1 + region.getRegionHeight() * unitScale;
 

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthoCachedTiledMapRenderer.java
Patch:
@@ -235,8 +235,8 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 				final TextureRegion region = tile.getTextureRegion();
 				final Texture texture = region.getTexture();
 
-				final float x1 = col * layerTileWidth;
-				final float y1 = row * layerTileHeight;
+				final float x1 = col * layerTileWidth + tile.getOffsetX() * unitScale;
+				final float y1 = row * layerTileHeight + tile.getOffsetY() * unitScale;
 				final float x2 = x1 + region.getRegionWidth() * unitScale;
 				final float y2 = y1 + region.getRegionHeight() * unitScale;
 

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer.java
Patch:
@@ -107,8 +107,8 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 
 					TextureRegion region = tile.getTextureRegion();
 
-					float x1 = x;
-					float y1 = y;
+					float x1 = x + tile.getOffsetX() * unitScale;
+					float y1 = y + tile.getOffsetY() * unitScale;
 					float x2 = x1 + region.getRegionWidth() * unitScale;
 					float y2 = y1 + region.getRegionHeight() * unitScale;
 

File: gdx/src/com/badlogic/gdx/utils/ShortArray.java
Patch:
@@ -128,7 +128,7 @@ public void mul (int index, short value) {
 	}
 
 	public void insert (int index, short value) {
-		if (index >= size) throw new IndexOutOfBoundsException("index can't be >= size: " + index + " >= " + size);
+		if (index > size) throw new IndexOutOfBoundsException("index can't be > size: " + index + " > " + size);
 		short[] items = this.items;
 		if (size == items.length) items = resize(Math.max(8, (int)(size * 1.75f)));
 		if (ordered)

File: gdx/src/com/badlogic/gdx/utils/ShortArray.java
Patch:
@@ -128,7 +128,7 @@ public void mul (int index, short value) {
 	}
 
 	public void insert (int index, short value) {
-		if (index >= size) throw new IndexOutOfBoundsException("index can't be >= size: " + index + " >= " + size);
+		if (index > size) throw new IndexOutOfBoundsException("index can't be > size: " + index + " > " + size);
 		short[] items = this.items;
 		if (size == items.length) items = resize(Math.max(8, (int)(size * 1.75f)));
 		if (ordered)

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSAudio.java
Patch:
@@ -28,11 +28,11 @@
 
 public class IOSAudio implements Audio {
 
-	public IOSAudio(IOSApplicationConfiguration config) {
+	public IOSAudio (IOSApplicationConfiguration config) {
 		OALSimpleAudio.sharedInstance().setAllowIpod(config.allowIpod);
 		OALSimpleAudio.sharedInstance().setHonorSilentSwitch(true);
 	}
-	
+
 	@Override
 	public AudioDevice newAudioDevice (int samplingRate, boolean isMono) {
 		// TODO Auto-generated method stub
@@ -62,4 +62,4 @@ public Music newMusic (FileHandle fileHandle) {
 		throw new GdxRuntimeException("Error opening music file at " + path);
 	}
 
-}
\ No newline at end of file
+}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -8,6 +8,8 @@ public class DependencyBank {
 
 	//Versions
 	static String libgdxVersion = "1.0.0";
+	//Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly
+	static String libgdxNightlyVersion = "1.0.1-SNAPSHOT";
 	static String roboVMVersion = "0.0.11";
 
 	//Repositories
@@ -57,7 +59,7 @@ public enum ProjectDependency {
 		GDX(
 			new String[]{"com.badlogicgames.gdx:gdx:$gdxVersion"},
 			new String[]{"com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"},
-			new String[]{"com.badlogicgames.gdx:gdx-backend-android:$gdxVersion", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"},
+			new String[]{"com.badlogicgames.gdx:gdx-backend-android:$gdxVersion", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"},
 			new String[]{"org.robovm:robovm-rt:${roboVMVersion}", "org.robovm:robovm-cocoatouch:${roboVMVersion}", "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion", "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"},
 			new String[]{"com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion", "com.badlogicgames.gdx:gdx:$gdxVersion:sources", "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"}
 		),

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -52,7 +52,6 @@ public void build (ProjectBuilder builder, String outputDir, String appName, Str
 		project.files.add(new ProjectFile("gradlew.bat", false));
 		project.files.add(new ProjectFile("gradle/wrapper/gradle-wrapper.jar", false));
 		project.files.add(new ProjectFile("gradle/wrapper/gradle-wrapper.properties", false));
-		project.files.add(new ProjectFile("local.properties", true));
 
 		// core project
 		project.files.add(new ProjectFile("core/build.gradle"));
@@ -83,6 +82,7 @@ public void build (ProjectBuilder builder, String outputDir, String appName, Str
 			project.files.add(new ProjectFile("android/ic_launcher-web.png", false));
 			project.files.add(new ProjectFile("android/proguard-project.txt", false));
 			project.files.add(new ProjectFile("android/project.properties", false));
+			project.files.add(new ProjectFile("local.properties", true));
 		}
 
 		// html project

File: gdx/src/com/badlogic/gdx/math/Vector.java
Patch:
@@ -90,6 +90,8 @@ public interface Vector<T extends Vector<T>> {
 	 * @return This vector for chaining. */
 	T lerp (T target, float alpha);
 
+	T interpolate(T target, float alpha, Interpolation interpolator);
+	
 	/** @return Whether this vector is a unit length vector */
 	boolean isUnit ();
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletWorld.java
Patch:
@@ -22,6 +22,7 @@
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.WindowedMean;
+import com.badlogic.gdx.physics.bullet.DebugDrawer;
 import com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface;
 import com.badlogic.gdx.physics.bullet.collision.btCollisionConfiguration;
 import com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher;
@@ -110,7 +111,7 @@ public void update () {
 	@Override
 	public void render (ModelBatch batch, Environment lights, Iterable<BulletEntity> entities) {
 		if (debugDrawer != null && debugDrawer.getDebugMode() > 0) {
-			debugDrawer.begin();
+			debugDrawer.begin(batch.getCamera());
 			collisionWorld.debugDrawWorld();
 			debugDrawer.end();
 		}
@@ -141,7 +142,7 @@ public void dispose () {
 	public void setDebugMode (final int mode, final Matrix4 projMatrix) {
 		if (mode == btIDebugDraw.DebugDrawModes.DBG_NoDebug && debugDrawer == null) return;
 		if (debugDrawer == null) collisionWorld.setDebugDrawer(debugDrawer = new DebugDrawer());
-		debugDrawer.lineRenderer.setProjectionMatrix(projMatrix);
+		debugDrawer.shapeRenderer.setProjectionMatrix(projMatrix);
 		debugDrawer.setDebugMode(mode);
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletWorld.java
Patch:
@@ -22,6 +22,7 @@
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.WindowedMean;
+import com.badlogic.gdx.physics.bullet.DebugDrawer;
 import com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface;
 import com.badlogic.gdx.physics.bullet.collision.btCollisionConfiguration;
 import com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher;
@@ -110,7 +111,7 @@ public void update () {
 	@Override
 	public void render (ModelBatch batch, Environment lights, Iterable<BulletEntity> entities) {
 		if (debugDrawer != null && debugDrawer.getDebugMode() > 0) {
-			debugDrawer.begin();
+			debugDrawer.begin(batch.getCamera());
 			collisionWorld.debugDrawWorld();
 			debugDrawer.end();
 		}
@@ -141,7 +142,7 @@ public void dispose () {
 	public void setDebugMode (final int mode, final Matrix4 projMatrix) {
 		if (mode == btIDebugDraw.DebugDrawModes.DBG_NoDebug && debugDrawer == null) return;
 		if (debugDrawer == null) collisionWorld.setDebugDrawer(debugDrawer = new DebugDrawer());
-		debugDrawer.lineRenderer.setProjectionMatrix(projMatrix);
+		debugDrawer.shapeRenderer.setProjectionMatrix(projMatrix);
 		debugDrawer.setDebugMode(mode);
 	}
 

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
Patch:
@@ -94,7 +94,7 @@ public enum ProjectDependency {
 			new String[]{"com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"},
 			new String[]{"com.badlogicgames.gdx:gdx-box2d:$gdxVersion", "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi", "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a", "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"},
 			new String[]{"com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios"},
-			new String[]{"com.badlogicgames.gdx:gdx-box2d-gwt:$gdxVersion:sources"}
+			new String[]{"com.badlogicgames.gdx:gdx-box2d:$gdxVersion:sources", "com.badlogicgames.gdx:gdx-box2d-gwt:$gdxVersion:sources"}
 		),	
 		BOX2DLIGHTS(
 			new String[]{"com.badlogicgames.box2dlights:box2dlights:1.1"},

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.Box2DTestCollection;
 import com.badlogic.gdx.tests.BulletTestCollection;
 import com.badlogic.gdx.tests.MusicTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -31,7 +32,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new MusicTest();		
+		GdxTest test = new Box2DTestCollection();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 //		config.width = 320;
 //		config.height = 241;

File: gdx/src/com/badlogic/gdx/utils/async/AsyncExecutor.java
Patch:
@@ -49,6 +49,9 @@ public Thread newThread (Runnable r) {
 	 * be queued.
 	 * @param task the task to execute asynchronously */
 	public <T> AsyncResult<T> submit (final AsyncTask<T> task) {
+		if (executor.isShutdown()) {
+			throw new GdxRuntimeException("Cannot run tasks on an executor that has been shutdown (disposed)");
+		}
 		return new AsyncResult(executor.submit(new Callable<T>() {
 			@Override
 			public T call () throws Exception {

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/ProjectFile.java
Patch:
@@ -51,5 +51,4 @@ public ProjectFile(String resourceName, String outputName, boolean isTemplate) {
 		this.outputName = outputName;
 		this.isTemplate = isTemplate;		
 	}
-
 }
\ No newline at end of file

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/math/Matrix4.java
Patch:
@@ -872,7 +872,7 @@ public Matrix4 setToLookAt (Vector3 direction, Vector3 up) {
 	public Matrix4 setToLookAt (Vector3 position, Vector3 target, Vector3 up) {
 		tmpVec.set(target).sub(position);
 		setToLookAt(tmpVec, up);
-		this.mul(tmpMat.setToTranslation(position.tmp().scl(-1)));
+		this.mul(tmpMat.setToTranslation(-position.x, -position.y, -position.z));
 
 		return this;
 	}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/BuildScriptHelper.java
Patch:
@@ -45,8 +45,8 @@ public static void addAllProjects(BufferedWriter wr) throws IOException {
 		write(wr, "version = '1.0'");
 		write(wr, "ext {");
 		write(wr, "appName = '%APP_NAME%'");
-		write(wr, "gdxVersion = '1.0-SNAPSHOT'");
-		write(wr, "roboVMVersion = '0.0.10'");
+		write(wr, "gdxVersion = '" + DependencyBank.libgdxVersion + "'");
+		write(wr, "roboVMVersion = '" + DependencyBank.roboVMVersion + "'");
 		write(wr, "}");
 		space(wr);
 		write(wr, "repositories {");

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GamepadTest.java
Patch:
@@ -123,7 +123,7 @@ public boolean accelerometerMoved (Controller controller, int accelerometerIndex
 	}
 
 	void print (String message) {
-		String[] lines = console.getItems().toArray();
+		String[] lines = console.getItems().toArray(String.class);
 		String[] newLines = new String[lines.length + 1];
 		System.arraycopy(lines, 0, newLines, 0, lines.length);
 		newLines[newLines.length - 1] = message;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ImmediateModeRendererTest.java
Patch:
@@ -36,6 +36,7 @@ public void dispose () {
 
 	@Override
 	public void render () {
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		Gdx.gl.glEnable(GL20.GL_TEXTURE_2D);
 		texture.bind();
 		renderer.begin(projMatrix, GL20.GL_TRIANGLES);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureDataTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.glutils.FileTextureData;
@@ -33,6 +34,7 @@ public void create () {
 	}
 
 	public void render () {
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		spriteBatch.begin();
 		spriteBatch.draw(texture, 100, 100);
 		spriteBatch.end();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
Patch:
@@ -73,6 +73,8 @@ public static void init () {
 	public ModelBatch modelBatch;
 	public Array<Disposable> disposables = new Array<Disposable>();
 	private int debugMode = DebugDrawModes.DBG_NoDebug;
+	
+	protected final static Vector3 tmpV1 = new Vector3(), tmpV2 = new Vector3();
 
 	public BulletWorld createWorld () {
 		return new BulletWorld();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicShapesTest.java
Patch:
@@ -48,15 +48,15 @@ public void create () {
 
 		final Model cylinder = modelBuilder.createCylinder(4f, 6f, 4f, 16, material, attributes);
 		disposables.add(cylinder);
-		world.addConstructor("cylinder", new BulletConstructor(cylinder, 10f, new btCylinderShape(Vector3.tmp.set(2f, 3f, 2f))));
+		world.addConstructor("cylinder", new BulletConstructor(cylinder, 10f, new btCylinderShape(tmpV1.set(2f, 3f, 2f))));
 
 		final Model capsule = modelBuilder.createCapsule(2f, 6f, 16, material, attributes);
 		disposables.add(capsule);
 		world.addConstructor("capsule", new BulletConstructor(capsule, 10f, new btCapsuleShape(2f, 2f)));
 
 		final Model box = modelBuilder.createBox(4f, 4f, 2f, material, attributes);
 		disposables.add(box);
-		world.addConstructor("box2", new BulletConstructor(box, 10f, new btBoxShape(Vector3.tmp.set(2f, 2f, 1f))));
+		world.addConstructor("box2", new BulletConstructor(box, 10f, new btBoxShape(tmpV1.set(2f, 2f, 1f))));
 
 		final Model cone = modelBuilder.createCone(4f, 6f, 4f, 16, material, attributes);
 		disposables.add(cone);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/InternalTickTest.java
Patch:
@@ -39,7 +39,7 @@ public void onInternalTick (btDynamicsWorld dynamicsWorld, float timeStep) {
 				btRigidBody body = (btRigidBody)(objs.at(i));
 				if (body == null || body.isStaticOrKinematicObject()) continue;
 				body.applyGravity();
-				body.applyCentralForce(Vector3.tmp.set(0f, 8.0f + (float)(6.0 * Math.random()), 0f));
+				body.applyCentralForce(tmpV1.set(0f, 8.0f + (float)(6.0 * Math.random()), 0f));
 				idx++;
 			}
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayCastTest.java
Patch:
@@ -88,7 +88,7 @@ public boolean tap (float x, float y, int count, int button) {
 			if (!obj.isStaticOrKinematicObject()) {
 				final btRigidBody body = (btRigidBody)(obj);
 				body.activate();
-				body.applyCentralImpulse(Vector3.tmp2.set(ray.direction).scl(20f));
+				body.applyCentralImpulse(tmpV2.set(ray.direction).scl(20f));
 			}
 		}
 		return true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftBodyTest.java
Patch:
@@ -58,7 +58,7 @@ public class SoftBodyTest extends BaseBulletTest {
 	public BulletWorld createWorld () {
 		btDefaultCollisionConfiguration collisionConfiguration = new btSoftBodyRigidBodyCollisionConfiguration();
 		btCollisionDispatcher dispatcher = new btCollisionDispatcher(collisionConfiguration);
-		btAxisSweep3 broadphase = new btAxisSweep3(Vector3.tmp.set(-1000, -1000, -1000), Vector3.tmp2.set(1000, 1000, 1000), 1024);
+		btAxisSweep3 broadphase = new btAxisSweep3(tmpV1.set(-1000, -1000, -1000), tmpV2.set(1000, 1000, 1000), 1024);
 		btSequentialImpulseConstraintSolver solver = new btSequentialImpulseConstraintSolver();
 		btSoftRigidDynamicsWorld dynamicsWorld = new btSoftRigidDynamicsWorld(dispatcher, broadphase, solver,
 			collisionConfiguration);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftMeshTest.java
Patch:
@@ -49,7 +49,7 @@ public class SoftMeshTest extends BaseBulletTest {
 	public BulletWorld createWorld () {
 		btDefaultCollisionConfiguration collisionConfiguration = new btSoftBodyRigidBodyCollisionConfiguration();
 		btCollisionDispatcher dispatcher = new btCollisionDispatcher(collisionConfiguration);
-		btAxisSweep3 broadphase = new btAxisSweep3(Vector3.tmp.set(-1000, -1000, -1000), Vector3.tmp2.set(1000, 1000, 1000), 1024);
+		btAxisSweep3 broadphase = new btAxisSweep3(tmpV1.set(-1000, -1000, -1000), tmpV2.set(1000, 1000, 1000), 1024);
 		btSequentialImpulseConstraintSolver solver = new btSequentialImpulseConstraintSolver();
 		btSoftRigidDynamicsWorld dynamicsWorld = new btSoftRigidDynamicsWorld(dispatcher, broadphase, solver,
 			collisionConfiguration);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Animation3DTest.java
Patch:
@@ -32,6 +32,7 @@
 import com.badlogic.gdx.graphics.g3d.model.Animation;
 import com.badlogic.gdx.graphics.g3d.utils.AnimationController;
 import com.badlogic.gdx.graphics.g3d.utils.DepthShaderProvider;
+import com.badlogic.gdx.graphics.g3d.utils.MeshBuilder;
 import com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder;
 import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
 import com.badlogic.gdx.math.Matrix4;
@@ -75,6 +76,7 @@ public void create () {
 		builder.begin();
 		MeshPartBuilder part = builder.part("floor", GL20.GL_TRIANGLES, Usage.Position | Usage.TextureCoordinates | Usage.Normal,
 			new Material());
+		((MeshBuilder)part).ensureRectangles(1600);
 		for (float x = -200f; x < 200f; x += 10f) {
 			for (float z = -200f; z < 200f; z += 10f) {
 				part.rect(x, 0, z + 10f, x + 10f, 0, z + 10f, x + 10f, 0, z, x, 0, z, 0, 1, 0);

File: gdx/src/com/badlogic/gdx/math/Matrix4.java
Patch:
@@ -800,7 +800,7 @@ public Matrix4 setToLookAt (Vector3 direction, Vector3 up) {
 	public Matrix4 setToLookAt (Vector3 position, Vector3 target, Vector3 up) {
 		tmpVec.set(target).sub(position);
 		setToLookAt(tmpVec, up);
-		this.mul(tmpMat.setToTranslation(position.tmp().scl(-1)));
+		this.mul(tmpMat.setToTranslation(-position.x, -position.y, -position.z));
 
 		return this;
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GamepadTest.java
Patch:
@@ -123,7 +123,7 @@ public boolean accelerometerMoved (Controller controller, int accelerometerIndex
 	}
 
 	void print (String message) {
-		String[] lines = console.getItems().toArray();
+		String[] lines = console.getItems().toArray(String.class);
 		String[] newLines = new String[lines.length + 1];
 		System.arraycopy(lines, 0, newLines, 0, lines.length);
 		newLines[newLines.length - 1] = message;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ImmediateModeRendererTest.java
Patch:
@@ -36,6 +36,7 @@ public void dispose () {
 
 	@Override
 	public void render () {
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		Gdx.gl.glEnable(GL20.GL_TEXTURE_2D);
 		texture.bind();
 		renderer.begin(projMatrix, GL20.GL_TRIANGLES);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureDataTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.glutils.FileTextureData;
@@ -33,6 +34,7 @@ public void create () {
 	}
 
 	public void render () {
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		spriteBatch.begin();
 		spriteBatch.draw(texture, 100, 100);
 		spriteBatch.end();

File: gdx/src/com/badlogic/gdx/math/MathUtils.java
Patch:
@@ -273,7 +273,7 @@ static public boolean isEqual (float a, float b) {
 	/** Returns true if a is nearly equal to b.
 	 * @param a the first value.
 	 * @param b the second value.
-	 * @param tolerance represent an upper bound below which the value is considered zero. */
+	 * @param tolerance represent an upper bound below which the two values are considered equal. */
 	static public boolean isEqual (float a, float b, float tolerance) {
 		return Math.abs(a - b) <= tolerance;
 	}

File: gdx/src/com/badlogic/gdx/math/MathUtils.java
Patch:
@@ -273,7 +273,7 @@ static public boolean isEqual (float a, float b) {
 	/** Returns true if a is nearly equal to b.
 	 * @param a the first value.
 	 * @param b the second value.
-	 * @param tolerance represent an upper bound below which the value is considered zero. */
+	 * @param tolerance represent an upper bound below which the two values are considered equal. */
 	static public boolean isEqual (float a, float b, float tolerance) {
 		return Math.abs(a - b) <= tolerance;
 	}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFragmentApplication.java
Patch:
@@ -212,7 +212,7 @@ public void onPause () {
 		// erase touched state. this also sucks donkeyballs...
 		Arrays.fill(touched, false);
 
-		// davebaol & modidevelop:
+		// davebaol & mobidevelop:
 		// This fragment is currently being removed from its activity or the activity is in the process of finishing
 		if (isRemoving() || getActivity().isFinishing()) {
 			graphics.clearManagedCaches();

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/IOSRobovmTests.java
Patch:
@@ -28,7 +28,7 @@ public class IOSRobovmTests extends IOSApplication.Delegate {
 	protected IOSApplication createApplication() {
 		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
 		config.useAccelerometer = false;
-		return new IOSApplication(new GcTest(), config);
+		return new IOSApplication(new BulletTestCollection(), config);
 	}
 
 	public static void main(String[] argv) {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -19,8 +19,6 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.tests.BulletTestCollection;
-import com.badlogic.gdx.tests.GcTest;
-import com.badlogic.gdx.tests.MultitouchTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class LwjglDebugStarter {
@@ -32,7 +30,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new GcTest();		
+		GdxTest test = new BulletTestCollection();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 //		config.width = 320;
 //		config.height = 241;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/DragAndDrop.java
Patch:
@@ -126,7 +126,7 @@ public void dragStop (InputEvent event, float x, float y, int pointer) {
 					target.actor.stageToLocalCoordinates(tmpVector.set(stageX, stageY));
 					target.drop(source, payload, tmpVector.x, tmpVector.y, pointer);
 				}
-				source.dragStop(event, x, y, pointer, isValidTarget ? target : null);
+				source.dragStop(event, payload, x, y, pointer, isValidTarget ? target : null);
 				if (target != null) target.reset(source, payload);
 				payload = null;
 				target = null;
@@ -211,7 +211,7 @@ public Source (Actor actor) {
 		abstract public Payload dragStart (InputEvent event, float x, float y, int pointer);
 
 		/** @param target null if not dropped on a valid target. */
-		public void dragStop (InputEvent event, float x, float y, int pointer, Target target) {
+		public void dragStop (InputEvent event, Payload payload, float x, float y, int pointer, Target target) {
 		}
 
 		public Actor getActor () {

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/IOSRobovmTests.java
Patch:
@@ -26,8 +26,9 @@ public class IOSRobovmTests extends IOSApplication.Delegate {
 	
 	@Override
 	protected IOSApplication createApplication() {
-		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
-		return new IOSApplication(new MultitouchTest(), config);
+		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
+		config.useAccelerometer = false;
+		return new IOSApplication(new GcTest(), config);
 	}
 
 	public static void main(String[] argv) {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -19,6 +19,7 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.tests.BulletTestCollection;
+import com.badlogic.gdx.tests.GcTest;
 import com.badlogic.gdx.tests.MultitouchTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
@@ -31,7 +32,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new MultitouchTest();		
+		GdxTest test = new GcTest();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 //		config.width = 320;
 //		config.height = 241;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
Patch:
@@ -280,6 +280,7 @@ public void draw (GLKView view, CGRect rect) {
 		gl20.glViewport(IOSGLES20.x, IOSGLES20.y, IOSGLES20.width, IOSGLES20.height);
 		
 		if (!created) {
+			gl20.glViewport(0, 0, width, height);
 			app.listener.create();
 			app.listener.resize(width, height);
 			created = true;

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/IOSRobovmTests.java
Patch:
@@ -27,7 +27,7 @@ public class IOSRobovmTests extends IOSApplication.Delegate {
 	@Override
 	protected IOSApplication createApplication() {
 		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
-		return new IOSApplication(new MyGdxGame(), config);
+		return new IOSApplication(new MultitouchTest(), config);
 	}
 
 	public static void main(String[] argv) {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -39,6 +39,8 @@ public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 //		config.width = 320;
 //		config.height = 241;
+		config.width = 960;
+		config.height = 600;
 		new LwjglApplication(new MyGdxGame(), config);
 	}
 }

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -25,7 +25,6 @@
 import com.badlogic.gdx.assets.loaders.MusicLoader;
 import com.badlogic.gdx.assets.loaders.ParticleEffectLoader;
 import com.badlogic.gdx.assets.loaders.PixmapLoader;
-import com.badlogic.gdx.assets.loaders.PolygonRegionLoader;
 import com.badlogic.gdx.assets.loaders.SkinLoader;
 import com.badlogic.gdx.assets.loaders.SoundLoader;
 import com.badlogic.gdx.assets.loaders.TextureAtlasLoader;
@@ -38,6 +37,7 @@
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.ParticleEffect;
 import com.badlogic.gdx.graphics.g2d.PolygonRegion;
+import com.badlogic.gdx.graphics.g2d.PolygonRegionLoader;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas;
 import com.badlogic.gdx.graphics.g3d.Model;
 import com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader;

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/IOSRobovmTests.java
Patch:
@@ -27,7 +27,7 @@ public class IOSRobovmTests extends IOSApplication.Delegate {
 	@Override
 	protected IOSApplication createApplication() {
 		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
-		return new IOSApplication(new BulletTestCollection(), config);
+		return new IOSApplication(new MyGdxGame(), config);
 	}
 
 	public static void main(String[] argv) {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,6 +21,7 @@
 import com.badlogic.gdx.tests.BulletTestCollection;
 import com.badlogic.gdx.tests.DownloadTest;
 import com.badlogic.gdx.tests.MusicTest;
+import com.badlogic.gdx.tests.MyGdxGame;
 import com.badlogic.gdx.tests.Scene2dTest;
 import com.badlogic.gdx.tests.box2d.ContactListenerTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -38,6 +39,6 @@ public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 //		config.width = 320;
 //		config.height = 241;
-		new LwjglApplication(test, config);
+		new LwjglApplication(new MyGdxGame(), config);
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitterBox2D.java
Patch:
@@ -118,8 +118,8 @@ public void translate (float velocityX, float velocityY) {
 				angle = 2f * normalAngle - angle - 180f;
 				angleCos = MathUtils.cosDeg(angle);
 				angleSin = MathUtils.sinDeg(angle);
-				velocityX = velocity * angleCos;
-				velocityY = velocity * angleSin;
+				velocityX *= angleCos;
+				velocityY *= angleSin;
 			}
 
 			super.translate(velocityX, velocityY);

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/glutils/ETC1TextureData.java
Patch:
@@ -59,7 +59,7 @@ public boolean disposePixmap () {
 	}
 
 	@Override
-	public void consumeCompressedData (int target) {
+	public void consumeCustomData (int target) {
 		// TODO Auto-generated method stub
 		
 	}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/glutils/FileTextureData.java
Patch:
@@ -130,7 +130,7 @@ public TextureDataType getType () {
 	}
 
 	@Override
-	public void consumeCompressedData (int target) {
+	public void consumeCustomData (int target) {
 		throw new GdxRuntimeException("This TextureData implementation does not upload data itself");
 	}
 }

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/Hiero4.java
Patch:
@@ -331,7 +331,7 @@ public TextureDataType getType () {
 							}
 
 							@Override
-							public void consumeCompressedData (int target) {
+							public void consumeCustomData (int target) {
 							}
 
 							@Override

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1TextureData.java
Patch:
@@ -49,7 +49,7 @@ public ETC1TextureData (ETC1Data encodedImage, boolean useMipMaps) {
 
 	@Override
 	public TextureDataType getType () {
-		return TextureDataType.Compressed;
+		return TextureDataType.Custom;
 	}
 
 	@Override
@@ -70,7 +70,7 @@ public void prepare () {
 	}
 
 	@Override
-	public void consumeCompressedData (int target) {
+	public void consumeCustomData (int target) {
 		if (!isPrepared) throw new GdxRuntimeException("Call prepare() before calling consumeCompressedData()");
 
 		if (!Gdx.graphics.supportsExtension("GL_OES_compressed_ETC1_RGB8_texture")) {

File: gdx/src/com/badlogic/gdx/graphics/glutils/FileTextureData.java
Patch:
@@ -134,7 +134,7 @@ public TextureDataType getType () {
 	}
 
 	@Override
-	public void consumeCompressedData (int target) {
+	public void consumeCustomData (int target) {
 		throw new GdxRuntimeException("This TextureData implementation does not upload data itself");
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/glutils/FloatTextureData.java
Patch:
@@ -42,7 +42,7 @@ public FloatTextureData (int w, int h) {
 
 	@Override
 	public TextureDataType getType () {
-		return TextureDataType.Float;
+		return TextureDataType.Custom;
 	}
 
 	@Override
@@ -58,7 +58,7 @@ public void prepare () {
 	}
 
 	@Override
-	public void consumeCompressedData (int target) {
+	public void consumeCustomData (int target) {
 		if (!Gdx.graphics.supportsExtension("texture_float"))
 			throw new GdxRuntimeException("Extension OES_TEXTURE_FLOAT not supported!");
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/PixmapTextureData.java
Patch:
@@ -81,7 +81,7 @@ public TextureDataType getType () {
 	}
 
 	@Override
-	public void consumeCompressedData (int target) {
+	public void consumeCustomData (int target) {
 		throw new GdxRuntimeException("This TextureData implementation does not upload data itself");
 	}
 

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -62,7 +62,7 @@ public void build (String outputDir, String appName, String packageName, String
 		project.files.add(new ProjectFile("core/build.gradle"));
 		project.files.add(new ProjectFile("core/src/MainClass", "core/src/" + packageDir + "/" + mainClass + ".java", true));
 		//core but html required
-		project.files.add(new ProjectFile("core/CoreGdxDefinition", "core/src/" + packageDir + "/" + mainClass + ".gwt.xml", true));
+		project.files.add(new ProjectFile("core/CoreGdxDefinition", "core/src/" + mainClass + ".gwt.xml", true));
 		
 		// desktop project
 		project.files.add(new ProjectFile("desktop/build.gradle"));

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitterBox2D.java
Patch:
@@ -118,8 +118,8 @@ public void translate (float velocityX, float velocityY) {
 				angle = 2f * normalAngle - angle - 180f;
 				angleCos = MathUtils.cosDeg(angle);
 				angleSin = MathUtils.sinDeg(angle);
-				velocityX = velocity * angleCos;
-				velocityY = velocity * angleSin;
+				velocityX *= angleCos;
+				velocityY *= angleSin;
 			}
 
 			super.translate(velocityX, velocityY);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -110,8 +110,9 @@ protected void preserveEGLContextOnPause () {
 		int sdkVersion = android.os.Build.VERSION.SDK_INT;
 		if ((sdkVersion >= 11 && view instanceof GLSurfaceView20) || view instanceof GLSurfaceView20API18) {
 			try {
-				view.getClass().getDeclaredMethod("setPreserveEGLContextOnPause", Boolean.class).invoke(view, true);
+				view.getClass().getMethod("setPreserveEGLContextOnPause", boolean.class).invoke(view, true);
 			} catch (Exception e) {
+				Gdx.app.log(LOG_TAG, "Method GLSurfaceView.setPreserveEGLContextOnPause not found");
 			}
 		}
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ReflectionTest.java
Patch:
@@ -53,7 +53,7 @@ public void create () {
 			Vector2 fromCopyConstructor = (Vector2)copyConstroctor.newInstance(fromDefaultConstructor);
 			println("From copy constructor: " + fromCopyConstructor);
 
-			Method mMul = ClassReflection.getMethod(Vector2.class, "mul", float.class);
+			Method mMul = ClassReflection.getMethod(Vector2.class, "scl", float.class);
 			println("Multiplied by 2; " + mMul.invoke(fromCopyConstructor, 2));
 
 			Method mNor = ClassReflection.getMethod(Vector2.class, "nor");

File: gdx/src/com/badlogic/gdx/math/WindowedMean.java
Patch:
@@ -54,7 +54,8 @@ public void clear () {
 	 * 
 	 * @param value The value to add */
 	public void addValue (float value) {
-		added_values++;
+		if (added_values < values.length)
+			added_values++;
 		values[last_value++] = value;
 		if (last_value > values.length - 1) last_value = 0;
 		dirty = true;

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/JniGenSharedLibraryLoader.java
Patch:
@@ -162,7 +162,7 @@ public synchronized void load (String sharedLibName) {
 		boolean isLinux = System.getProperty("os.name").contains("Linux");
 		boolean isMac = System.getProperty("os.name").contains("Mac");
 		boolean isAndroid = false;
-		boolean is64Bit = System.getProperty("os.arch").equals("amd64");
+		boolean is64Bit = System.getProperty("os.arch").equals("amd64") || System.getProperty("os.arch").equals("x86_64");
 		String vm = System.getProperty("java.vm.name");
 		if (vm != null && vm.contains("Dalvik")) {
 			isAndroid = true;

File: gdx/src/com/badlogic/gdx/utils/SharedLibraryLoader.java
Patch:
@@ -39,7 +39,7 @@ public class SharedLibraryLoader {
 	static public boolean isIos = false;
 	static public boolean isAndroid = false;
 	static public boolean isARM = System.getProperty("os.arch").startsWith("arm");
-	static public boolean is64Bit = System.getProperty("os.arch").equals("amd64");
+	static public boolean is64Bit = System.getProperty("os.arch").equals("amd64") || System.getProperty("os.arch").equals("x86_64");
 
 	// JDK 8 only.
 	static public String abi = (System.getProperty("sun.arch.abi") != null ? System.getProperty("sun.arch.abi") : "");

File: gdx/src/com/badlogic/gdx/maps/tiled/AtlasTmxMapLoader.java
Patch:
@@ -337,7 +337,7 @@ protected void loadTileset (TiledMap map, Element element, FileHandle tmxFile, A
 			String atlasFilePath = map.getProperties().get("atlas", String.class);
 			if (atlasFilePath == null) {
 				FileHandle atlasFile = tmxFile.sibling(tmxFile.nameWithoutExtension() + ".atlas");
-				if (atlasFile.exists()) atlasFilePath = atlasFile.path();
+				if (atlasFile.exists()) atlasFilePath = atlasFile.name();
 			}
 			if (atlasFilePath == null) {
 				throw new GdxRuntimeException("The map is missing the 'atlas' property");

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/Executor.java
Patch:
@@ -46,9 +46,9 @@ private static boolean startProcess (String command, File directory, final CharC
 				public void run () {
 					BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()), 1);
 					try {
-						char c = 0;
-						while ((c = (char)reader.read()) != -1) {
-							callback.character(c);						
+						int c = 0;
+						while ((c = reader.read()) != -1 && process.isAlive()) {
+							callback.character((char)c);						
 						}
 					} catch (IOException e) {
 //						e.printStackTrace();

File: gdx/src/com/badlogic/gdx/math/WindowedMean.java
Patch:
@@ -54,7 +54,8 @@ public void clear () {
 	 * 
 	 * @param value The value to add */
 	public void addValue (float value) {
-		added_values++;
+		if (added_values < values.length)
+			added_values++;
 		values[last_value++] = value;
 		if (last_value > values.length - 1) last_value = 0;
 		dirty = true;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -77,7 +77,6 @@ public class Stage extends InputAdapter implements Disposable {
 	public Stage () {
 		this(new ScalingViewport(Scaling.stretch, Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), new OrthographicCamera()),
 			null);
-		getViewport().update(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);
 	}
 
 	/** Creates a stage with the specified viewport. The stage will use its own {@link Batch}, which will be disposed when the stage
@@ -97,6 +96,8 @@ public Stage (Viewport viewport, Batch batch) {
 
 		root = new Group();
 		root.setStage(this);
+
+		viewport.update(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);
 	}
 
 	public void draw () {

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/objectal/OALAudioTrack.java
Patch:
@@ -55,7 +55,7 @@ public class OALAudioTrack extends NSObject {
 	@Property
 	public native void setPaused (boolean paused);
 
-	@Property(selector = "isPlaying")
+	@Property
 	public native boolean isPlaying ();
 
 	@Property

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -87,6 +87,7 @@ public void build (String outputDir, String appName, String packageName, String
 		project.files.add(new ProjectFile("gwt/GdxDefinition", "gwt/src/" + packageDir + "/GdxDefinition.gwt.xml", true));
 		project.files.add(new ProjectFile("gwt/GdxDefinitionSuperdev", "gwt/src/" + packageDir + "/GdxDefinitionSuperdev.gwt.xml", true));
 		project.files.add(new ProjectFile("gwt/war/index", "gwt/webapp/index.html", true));
+		project.files.add(new ProjectFile("gwt/war/styles.css", "gwt/webapp/styles.css", false));
 		project.files.add(new ProjectFile("gwt/war/soundmanager2-jsmin.js", "gwt/webapp/soundmanager2-jsmin.js", false));
 		project.files.add(new ProjectFile("gwt/war/soundmanager2-setup.js", "gwt/webapp/soundmanager2-setup.js", false));
 		project.files.add(new ProjectFile("gwt/war/WEB-INF/web.xml", "gwt/webapp/WEB-INF/web.xml", true));

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/objectal/AVAudioPlayerDelegate.java
Patch:
@@ -26,5 +26,5 @@
 public interface AVAudioPlayerDelegate extends NSObjectProtocol {
 
 	@Method(selector = "audioPlayerDidFinishPlaying:successfully:")
-	void didFinishPlaying(NSObject player, boolean success);
+	void didFinishPlaying (NSObject player, boolean success);
 }

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -87,6 +87,7 @@ public void build (String outputDir, String appName, String packageName, String
 		project.files.add(new ProjectFile("gwt/GdxDefinition", "gwt/src/" + packageDir + "/GdxDefinition.gwt.xml", true));
 		project.files.add(new ProjectFile("gwt/GdxDefinitionSuperdev", "gwt/src/" + packageDir + "/GdxDefinitionSuperdev.gwt.xml", true));
 		project.files.add(new ProjectFile("gwt/war/index", "gwt/webapp/index.html", true));
+		project.files.add(new ProjectFile("gwt/war/styles.css", "gwt/webapp/styles.css", false));
 		project.files.add(new ProjectFile("gwt/war/soundmanager2-jsmin.js", "gwt/webapp/soundmanager2-jsmin.js", false));
 		project.files.add(new ProjectFile("gwt/war/soundmanager2-setup.js", "gwt/webapp/soundmanager2-setup.js", false));
 		project.files.add(new ProjectFile("gwt/war/WEB-INF/web.xml", "gwt/webapp/WEB-INF/web.xml", true));

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -349,10 +349,10 @@ public synchronized boolean update () {
 	 * of a single task that happens in the GL thread takes a long time.
 	 * @return true if all loading is finished. */
 	public boolean update (int millis) {
-		long endTime = System.currentTimeMillis() + millis;
+		long endTime = TimeUtils.millis() + millis;
 		while (true) {
 			boolean done = update();
-			if (done || System.currentTimeMillis() > endTime) return done;
+			if (done || TimeUtils.millis() > endTime) return done;
 			ThreadUtils.yield();
 		}
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -344,6 +344,7 @@ public void show (Stage stage) {
 			setWidth(SelectBox.this.getWidth());
 			setHeight(height);
 
+			validate();
 			scrollToCenter(0, list.getHeight() - getSelectedIndex() * itemHeight - itemHeight / 2, 0, 0);
 			updateVisualScroll();
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -101,6 +101,7 @@ public void create () {
 		dropdown.setItems("Android1", "Windows1", "Linux1", "OSX1", "Android2", "Windows2", "Linux2", "OSX2", "Android3",
 			"Windows3", "Linux3", "OSX3", "Android4", "Windows4", "Linux4", "OSX4", "Android5", "Windows5", "Linux5", "OSX5",
 			"Android6", "Windows6", "Linux6", "OSX6", "Android7", "Windows7", "Linux7", "OSX7");
+		dropdown.setSelected("Linux6");
 		Image imageActor = new Image(image2);
 		ScrollPane scrollPane = new ScrollPane(imageActor);
 		List list = new List(skin);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ClickListener.java
Patch:
@@ -87,10 +87,10 @@ public void touchUp (InputEvent event, float x, float y, int pointer, int button
 					tapCount++;
 					lastTapTime = time;
 					clicked(event, x, y);
+					visualPressedTime = TimeUtils.nanoTime() + visualPressedDuration * 1000000000;
 				}
 			}
 			pressed = false;
-			visualPressedTime = TimeUtils.nanoTime() + visualPressedDuration * 1000000000;
 			pressedPointer = -1;
 			pressedButton = -1;
 			cancelled = false;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ClickListener.java
Patch:
@@ -87,10 +87,10 @@ public void touchUp (InputEvent event, float x, float y, int pointer, int button
 					tapCount++;
 					lastTapTime = time;
 					clicked(event, x, y);
+					visualPressedTime = TimeUtils.nanoTime() + visualPressedDuration * 1000000000;
 				}
 			}
 			pressed = false;
-			visualPressedTime = TimeUtils.nanoTime() + visualPressedDuration * 1000000000;
 			pressedPointer = -1;
 			pressedButton = -1;
 			cancelled = false;

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/IOSRobovmTests.java
Patch:
@@ -29,7 +29,7 @@ class InnerClass {
 	@Override
 	protected IOSApplication createApplication() {
 		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
-		return new IOSApplication(new DownloadTest(), config);
+		return new IOSApplication(new BulletTestCollection(), config);
 	}
 
 	public static void main(String[] argv) {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.BulletTestCollection;
 import com.badlogic.gdx.tests.DownloadTest;
 import com.badlogic.gdx.tests.MusicTest;
 import com.badlogic.gdx.tests.Scene2dTest;
@@ -33,7 +34,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new DownloadTest();		
+		GdxTest test = new BulletTestCollection();		
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 //		config.width = 320;
 //		config.height = 241;

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -42,7 +42,7 @@ public void build (String outputDir, String appName, String packageName, String
 		
 		String packageDir = packageName.replace('.', '/');
 		String sdkPath = sdkLocation.replace('\\', '/');
-		if(isSdkLocationValid(sdkLocation)) {
+		if(!isSdkLocationValid(sdkLocation)) {
 			System.out.println("Android SDK location '" + sdkLocation + "' doesn't contain an SDK");
 		}
 

File: extensions/gdx-setup-ui/src/aurelienribon/gdxsetupui/ui/panels/AdvancedSettingsPanel.java
Patch:
@@ -62,6 +62,7 @@ private void update() {
 		Ctx.cfgSetup.suffixCommon = coreSuffixField.getText();
 		Ctx.cfgSetup.suffixDesktop = desktopSuffixField.getText();
 		Ctx.cfgSetup.suffixAndroid = androidSuffixField.getText();
+		Ctx.cfgSetup.suffixHtml = htmlSuffixField.getText();
 		Ctx.cfgSetup.suffixRobovm = iosSuffixField.getText();
 		Ctx.cfgSetup.androidMinSdkVersion = androidMinSdkField.getText();
 		Ctx.cfgSetup.androidMaxSdkVersion = androidMaxSdkField.getText();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -605,6 +605,7 @@ public Vector2 screenToStageCoordinates (Vector2 screenCoords) {
 	 * @param stageCoords Input stage coordinates and output for resulting screen coordinates. */
 	public Vector2 stageToScreenCoordinates (Vector2 stageCoords) {
 		viewport.project(stageCoords);
+		stageCoords.y = viewport.getViewportHeight() - stageCoords.y;
 		return stageCoords;
 	}
 

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java
Patch:
@@ -72,7 +72,7 @@ public void stop () {
 
 	@Override
 	public boolean isPlaying () {
-		return track.isPlaying();
+		return track.isPlaying() && !track.isPaused();
 	}
 
 	@Override

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java
Patch:
@@ -72,7 +72,7 @@ public void stop () {
 
 	@Override
 	public boolean isPlaying () {
-		return track.isPlaying();
+		return track.isPlaying() && !track.isPaused();
 	}
 
 	@Override

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/reflect/ClassReflection.java
Patch:
@@ -34,7 +34,7 @@ static public Class forName (String name) throws ReflectionException {
 
 	/** Returns the simple name of the underlying class as supplied in the source code. */
 	static public String getSimpleName (Class c) {
-		return c.getName();
+		return c.getSimpleName();
 	}
 
 	/** Determines if the supplied Object is assignment-compatible with the object represented by supplied Class. */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ProgressBar.java
Patch:
@@ -334,4 +334,4 @@ public ProgressBarStyle (ProgressBarStyle style) {
 			this.knob = style.knob;
 		}
 	}
-} 
+}

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java
Patch:
@@ -174,8 +174,8 @@ public void actionPerformed (ActionEvent e) {
 					
 					JFileChooser chooser = new JFileChooser();
 					chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
-					chooser.setDialogTitle("Chose destination");
-					int result = chooser.showSaveDialog(null);
+					chooser.setDialogTitle("Chose destination");				
+					int result = chooser.showOpenDialog(null);
 					if(result == JFileChooser.APPROVE_OPTION) {
 						File dir = chooser.getSelectedFile();
 						if(dir == null) return;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -124,7 +124,7 @@ public boolean isChecked () {
 	}
 
 	public boolean isPressed () {
-		return clickListener.isPressed();
+		return clickListener.isVisualPressed();
 	}
 
 	public boolean isOver () {

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -77,7 +77,6 @@ public void build (String outputDir, String appName, String packageName, String
 		project.files.add(new ProjectFile("gwt/GdxDefinition", "gwt/src/" + packageDir + "/GdxDefinition.gwt.xml", true));
 		project.files.add(new ProjectFile("gwt/GdxDefinitionSuperdev", "gwt/src/" + packageDir + "/GdxDefinitionSuperdev.gwt.xml", true));
 		project.files.add(new ProjectFile("gwt/war/index", "gwt/webapp/index.html", true));
-		project.files.add(new ProjectFile("gwt/war/index-superdev", "gwt/webapp/index-superdev.html", true));
 		project.files.add(new ProjectFile("gwt/war/soundmanager2-jsmin.js", "gwt/webapp/soundmanager2-jsmin.js", false));
 		project.files.add(new ProjectFile("gwt/war/soundmanager2-setup.js", "gwt/webapp/soundmanager2-setup.js", false));
 		project.files.add(new ProjectFile("gwt/war/WEB-INF/web.xml", "gwt/webapp/WEB-INF/web.xml", true));

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -73,7 +73,7 @@ public LwjglApplication (ApplicationListener listener, LwjglApplicationConfigura
 	}
 
 	public LwjglApplication (ApplicationListener listener, LwjglApplicationConfiguration config, LwjglGraphics graphics) {
-		LwjglNativesLoader.load();
+		LwjglNativesLoader.load();		
 
 		if (config.title == null) config.title = listener.getClass().getSimpleName();
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidDaydream.java
Patch:
@@ -52,7 +52,7 @@
  * the GLSurfaceView.
  * 
  * @author mzechner */
-public class AndroidDaydream extends DreamService implements implements AndroidApplicationBase {
+public class AndroidDaydream extends DreamService implements AndroidApplicationBase {
 	static {
 		GdxNativesLoader.load();
 	}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -482,7 +482,6 @@ public void clearManagedCaches () {
 		Gdx.app.log("AndroidGraphics", Texture.getManagedStatus());
 		Gdx.app.log("AndroidGraphics", ShaderProgram.getManagedStatus());
 		Gdx.app.log("AndroidGraphics", FrameBuffer.getManagedStatus());
-		}
 	}
 
 	public View getView () {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaper.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Arrays;
 
 import android.content.Context;
+import android.content.Intent;
 import android.opengl.GLSurfaceView;
 import android.os.Debug;
 import android.os.Handler;

File: gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java
Patch:
@@ -193,7 +193,7 @@ public ShaderProvider getShaderProvider () {
 		return shaderProvider;
 	}
 
-	/** @eeturn the {@link RenderableSorter} used by this ModelBatch. */
+	/** @return the {@link RenderableSorter} used by this ModelBatch. */
 	public RenderableSorter getRenderableSorter () {
 		return sorter;
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/Shader.java
Patch:
@@ -63,8 +63,8 @@ public interface Shader extends Disposable {
 	 * {@link #render(Renderable)} method will succeed. This is expected to be a fast, non-blocking method. Note that this method
 	 * will only return true if it is intended to be used. Even when it returns false the Shader might still be capable of
 	 * rendering, but it's not preferred to do so.
-	 * @oaram instance The renderable to check against this shader.
-	 * @return true if this shader is intended to render the {@Renderable}, false otherwise. */
+	 * @param instance The renderable to check against this shader.
+	 * @return true if this shader is intended to render the {@link Renderable}, false otherwise. */
 	boolean canRender (Renderable instance);
 
 	/** Initializes the context for exclusive rendering by this shader. Use the {@link #render(Renderable)} method to render a

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
Patch:
@@ -421,9 +421,9 @@ public static String getDefaultFragmentShader () {
 	protected static long implementedFlags = BlendingAttribute.Type | TextureAttribute.Diffuse | ColorAttribute.Diffuse
 		| ColorAttribute.Specular | FloatAttribute.Shininess;
 
-	/** @Deprecated Replaced by {@link Config#defaultCullFace} Set to 0 to disable culling */
+	/** @deprecated Replaced by {@link Config#defaultCullFace} Set to 0 to disable culling */
 	@Deprecated public static int defaultCullFace = GL20.GL_BACK;
-	/** @Deprecated Replaced by {@link Config#defaultDepthFunc} Set to 0 to disable depth test */
+	/** @deprecated Replaced by {@link Config#defaultDepthFunc} Set to 0 to disable depth test */
 	@Deprecated public static int defaultDepthFunc = GL20.GL_LEQUAL;
 
 	// Global uniforms

File: gdx/src/com/badlogic/gdx/ApplicationListener.java
Patch:
@@ -43,7 +43,7 @@ public interface ApplicationListener {
 	public void render ();
 
 	/** Called when the {@link Application} is paused. An Application is paused before it is destroyed, when a user pressed the Home
-	 * button on Android or an incoming call happend. On the desktop this will only be called immediately before {@link #dispose()}
+	 * button on Android or an incoming call happened. On the desktop this will only be called immediately before {@link #dispose()}
 	 * is called. */
 	public void pause ();
 

File: gdx/src/com/badlogic/gdx/Preferences.java
Patch:
@@ -21,7 +21,7 @@
 /** <p>
  * A Preference instance is a hash map holding different values. It is stored alongside your application (SharedPreferences on
  * Android, LocalStorage on GWT, on the desktop a Java Preferences file in a ".prefs" directory will be created, and on iOS an
- * NSMutableDictonary will be written to the given file). CAUTION: On the desktop platform, all libgdx applications share the same
+ * NSMutableDictionary will be written to the given file). CAUTION: On the desktop platform, all libgdx applications share the same
  * ".prefs" directory. To avoid collisions use specific names like "com.myname.game1.settings" instead of "settings"
  * </p>
  * 

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -358,7 +358,7 @@ public synchronized boolean update () {
 		}
 	}
 
-	/** Updates the AssetManager continuously for the specified number of milliseconds, yeilding the CPU to the loading thread
+	/** Updates the AssetManager continuously for the specified number of milliseconds, yielding the CPU to the loading thread
 	 * between updates. This may block for less time if all loading tasks are complete. This may block for more time if the portion
 	 * of a single task that happens in the GL thread takes a long time.
 	 * @return true if all loading is finished. */
@@ -644,7 +644,7 @@ public synchronized void setReferenceCount (String fileName, int refCount) {
 		assets.get(type).get(fileName).setRefCount(refCount);
 	}
 
-	/** @return a string containg ref count and dependency information for all assets. */
+	/** @return a string containing ref count and dependency information for all assets. */
 	public synchronized String getDiagnostics () {
 		StringBuffer buffer = new StringBuffer();
 		for (String fileName : assetTypes.keys()) {

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -44,7 +44,7 @@
 
 /** <p>
  * A Mesh holds vertices composed of attributes specified by a {@link VertexAttributes} instance. The vertices are held either in
- * VRAM in form of vertex buffer objects or in RAM in form of vertex arrays. The former variant is more performant and is prefered
+ * VRAM in form of vertex buffer objects or in RAM in form of vertex arrays. The former variant is more performant and is preferred
  * over vertex arrays if hardware supports it.
  * </p>
  * 

File: gdx/src/com/badlogic/gdx/graphics/PerspectiveCamera.java
Patch:
@@ -29,7 +29,7 @@ public class PerspectiveCamera extends Camera {
 	public PerspectiveCamera () {
 	}
 
-	/** Constructs a new {@link PerspectiveCamera} with the given field of view and viewport size. The apsect ratio is derrived from
+	/** Constructs a new {@link PerspectiveCamera} with the given field of view and viewport size. The aspect ratio is derived from
 	 * the viewport size.
 	 * 
 	 * @param fieldOfView the field of view in degrees

File: gdx/src/com/badlogic/gdx/graphics/TextureData.java
Patch:
@@ -53,7 +53,7 @@ public enum TextureDataType {
 	public void prepare ();
 
 	/** Returns the {@link Pixmap} for upload by Texture. A call to {@link #prepare()} must precede a call to this method. Any
-	 * internal datastructures created in {@link #prepare()} should be disposed of here.
+	 * internal data structures created in {@link #prepare()} should be disposed of here.
 	 * 
 	 * @return the pixmap. */
 	public Pixmap consumePixmap ();
@@ -62,7 +62,7 @@ public enum TextureDataType {
 	public boolean disposePixmap ();
 
 	/** Uploads the pixel data to the OpenGL ES texture. The caller must bind an OpenGL ES texture. A call to {@link #prepare()}
-	 * must preceed a call to this method. Any internal datastructures created in {@link #prepare()}. */
+	 * must preceed a call to this method. Any internal data structures created in {@link #prepare()}. */
 	public void consumeCompressedData (int target);
 
 	/** @return the width of the pixel data */

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -80,7 +80,7 @@ public BitmapFontCache (BitmapFont font, boolean integer) {
 
 	/** Sets the position of the text, relative to the position when the cached text was created.
 	 * @param x The x coordinate
-	 * @param y The y coodinate */
+	 * @param y The y coordinate */
 	public void setPosition (float x, float y) {
 		translate(x - this.x, y - this.y);
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitterBox2D.java
Patch:
@@ -42,7 +42,7 @@ public class ParticleEmitterBox2D extends ParticleEmitter {
 	/** If velocities squared is shorter than this it could lead 0 length rayCast that cause c++ assertion at box2d */
 	private final static float EPSILON = 0.001f;
 
-	/** default visibility to prevent synthetic accesor creation */
+	/** default visibility to prevent synthetic accessor creation */
 	final RayCastCallback rayCallBack = new RayCastCallback() {
 		public float reportRayFixture (Fixture fixture, Vector2 point, Vector2 normal, float fraction) {
 			ParticleEmitterBox2D.this.particleCollided = true;

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java
Patch:
@@ -46,7 +46,7 @@
  * PixmapPacker packer = new PixmapPacker(512, 512, Format.RGB565, 2, true);
  * packer.pack(&quot;First Pixmap&quot;, pixmap1);
  * packer.pack(&quot;Second Pixmap&quot;, pixmap2);
- * TextureAtlas altas = packer.generateTextureAtlas(TextureFilter.Nearest, TextureFilter.Nearest);
+ * TextureAtlas atlas = packer.generateTextureAtlas(TextureFilter.Nearest, TextureFilter.Nearest);
  * </pre>
  * 
  * Note that you should not dispose the packer in this usage pattern. Instead, dispose the TextureAtlas if no longer needed.

File: gdx/src/com/badlogic/gdx/graphics/g2d/PolygonSpriteBatch.java
Patch:
@@ -129,7 +129,7 @@ public PolygonSpriteBatch (int size, ShaderProgram defaultShader) {
 		projectionMatrix.setToOrtho2D(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 	}
 
-	/** Sets up the PolygonSpriteBatch for drawing. This will disable depth buffer writting. It enables blending and texturing. If
+	/** Sets up the PolygonSpriteBatch for drawing. This will disable depth buffer writing. It enables blending and texturing. If
 	 * you have more texture units enabled than the first one you have to disable them before calling this. Uses a screen
 	 * coordinate system by default where everything is given in pixels. You can specify your own projection and modelview matrices
 	 * via {@link #setProjectionMatrix(Matrix4)} and {@link #setTransformMatrix(Matrix4)}. */

File: gdx/src/com/badlogic/gdx/graphics/g3d/Renderable.java
Patch:
@@ -47,7 +47,7 @@
  * 
  * A ModelInstance returns all Renderables via its {@link ModelInstance#getRenderables(Array, Pool)} method. In which case the
  * value of {@link ModelInstance#userData} will be set to the {@link #userData} member. The {@link #userData} member can be used
- * to pass additional data to the shader. However, in most scenerario's it is advised to use the {@link #material} or
+ * to pass additional data to the shader. However, in most scenario's it is advised to use the {@link #material} or
  * {@link #environment} member with custom {@link Attribute}s to pass data to the shader.</p>
  * 
  * In some cases, (for example for non-hierarchical basic game objects requiring only a single draw call) it is possible to extend

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/CameraGroupStrategy.java
Patch:
@@ -36,7 +36,7 @@
  * Can produce invisible artifacts when transparent decals overlap each other.
  * </p>
  * <p>
- * Needs to be explicitely disposed as it might allocate a ShaderProgram when GLSL 2.0 is used.
+ * Needs to be explicitly disposed as it might allocate a ShaderProgram when GLSL 2.0 is used.
  * </p>
  * <p>
  * States (* = any, EV = entry value - same as value before flush):<br/>

File: gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodeAnimation.java
Patch:
@@ -21,6 +21,6 @@
 public class ModelNodeAnimation {
 	/** the id of the node animated by this animation FIXME should be nodeId **/
 	public String nodeId;
-	/** the keyframes, defining the transformation of a node for a sepcific timestamp **/
+	/** the keyframes, defining the transformation of a node for a specific timestamp **/
 	public final Array<ModelNodeKeyframe> keyframes = new Array<ModelNodeKeyframe>();
 }

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultTextureBinder.java
Patch:
@@ -25,7 +25,7 @@
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /** Class that you assign a range of texture units and binds textures for you within that range. It does some basic usage tracking
- * to avoid unnessecary bind calls.
+ * to avoid unnecessary bind calls.
  * @author xoppa */
 public final class DefaultTextureBinder implements TextureBinder {
 	public final static int ROUNDROBIN = 0;

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/FirstPersonCameraController.java
Patch:
@@ -23,7 +23,7 @@
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.utils.IntIntMap;
 
-/** Takes a {@link Camera} instance and controlls it via w,a,s,d and mouse panning.
+/** Takes a {@link Camera} instance and controls it via w,a,s,d and mouse panning.
  * @author badlogic */
 public class FirstPersonCameraController extends InputAdapter {
 	private final Camera camera;

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/RenderContext.java
Patch:
@@ -53,7 +53,7 @@ public final void begin () {
 		textureBinder.begin();
 	}
 
-	/** Resest all changed OpenGL states to their defaults. */
+	/** Resets all changed OpenGL states to their defaults. */
 	public final void end () {
 		if (depthFunc != 0) Gdx.gl.glDisable(GL20.GL_DEPTH_TEST);
 		if (!depthMask) Gdx.gl.glDepthMask(true);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/RenderableSorter.java
Patch:
@@ -23,7 +23,7 @@
 /** Responsible for sorting {@link Renderable} lists by whatever criteria (material, distance to camera, etc.)
  * @author badlogic */
 public interface RenderableSorter {
-	/** Sorst the array of {@link Renderable} instances based on some criteria, e.g. material, distance to camera etc.
+	/** Sorts the array of {@link Renderable} instances based on some criteria, e.g. material, distance to camera etc.
 	 * @param renderables the array of renderables to be sorted */
 	public void sort (Camera camera, Array<Renderable> renderables);
 }

File: gdx/src/com/badlogic/gdx/maps/tiled/TiledMapTileLayer.java
Patch:
@@ -29,7 +29,7 @@ public class TiledMapTileLayer extends MapLayer {
 
 	private Cell[][] cells;
 
-	/** @return layer's witdth in tiles */
+	/** @return layer's width in tiles */
 	public int getWidth () {
 		return width;
 	}

File: gdx/src/com/badlogic/gdx/math/GridPoint2.java
Patch:
@@ -27,7 +27,7 @@ public class GridPoint2 {
 	public GridPoint2 () {
 	}
 
-	/** Costructs a new 2D grid point.
+	/** Constructs a new 2D grid point.
 	 * 
 	 * @param x X coordinate
 	 * @param y Y coordinate */

File: gdx/src/com/badlogic/gdx/math/Matrix4.java
Patch:
@@ -606,7 +606,7 @@ public Matrix4 setToTranslation (float x, float y, float z) {
 		return this;
 	}
 
-	/** Sets this matrix to a translation and scaling matrix by first overwritting it with an identity and then setting the
+	/** Sets this matrix to a translation and scaling matrix by first overwriting it with an identity and then setting the
 	 * translation vector in the 4th column and the scaling vector in the diagonal.
 	 * 
 	 * @param translation The translation vector
@@ -623,7 +623,7 @@ public Matrix4 setToTranslationAndScaling (Vector3 translation, Vector3 scaling)
 		return this;
 	}
 
-	/** Sets this matrix to a translation and scaling matrix by first overwritting it with an identity and then setting the
+	/** Sets this matrix to a translation and scaling matrix by first overwriting it with an identity and then setting the
 	 * translation vector in the 4th column and the scaling vector in the diagonal.
 	 * 
 	 * @param translationX The x-component of the translation vector
@@ -725,7 +725,7 @@ public Matrix4 setToRotation (final float x1, final float y1, final float z1, fi
 
 	/** Sets this matrix to a rotation matrix from the given euler angles.
 	 * @param yaw the yaw in degrees
-	 * @param pitch the pitch in degress
+	 * @param pitch the pitch in degrees
 	 * @param roll the roll in degrees
 	 * @return This matrix */
 	public Matrix4 setFromEulerAngles (float yaw, float pitch, float roll) {

File: gdx/src/com/badlogic/gdx/math/Polyline.java
Patch:
@@ -86,7 +86,7 @@ public float[] getTransformedVertices () {
 		return worldVertices;
 	}
 
-	/** Returns the euclidian length of the polyline without scaling */
+	/** Returns the euclidean length of the polyline without scaling */
 	public float getLength () {
 		if (!calculateLength) return length;
 		calculateLength = false;
@@ -101,7 +101,7 @@ public float getLength () {
 		return length;
 	}
 
-	/** Returns the euclidian length of the polyline */
+	/** Returns the euclidean length of the polyline */
 	public float getScaledLength () {
 		if (!calculateScaledLength) return scaledLength;
 		calculateScaledLength = false;

File: gdx/src/com/badlogic/gdx/math/Vector.java
Patch:
@@ -23,12 +23,12 @@ public interface Vector<T extends Vector<T>> {
 	/** @return a copy of this vector */
 	T cpy ();
 
-	/** @return The euclidian length */
+	/** @return The euclidean length */
 	float len ();
 
 	/** This method is faster than {@link Vector#len()} because it avoids calculating a square root. It is useful for comparisons,
 	 * but not for getting accurate lengths, as the return value is the square of the actual length.
-	 * @return The squared euclidian length */
+	 * @return The squared euclidean length */
 	float len2 ();
 
 	/** Limits this vector's length to given value
@@ -46,7 +46,7 @@ public interface Vector<T extends Vector<T>> {
 	 * @return This vector for chaining */
 	T set (T v);
 
-	/** Substracts the given vector from this vector.
+	/** Subtracts the given vector from this vector.
 	 * @param v The vector
 	 * @return This vector for chaining */
 	T sub (T v);

File: gdx/src/com/badlogic/gdx/math/WindowedMean.java
Patch:
@@ -36,12 +36,12 @@ public WindowedMean (int window_size) {
 		values = new float[window_size];
 	}
 
-	/** @return whether the value returned will be meaningfull */
+	/** @return whether the value returned will be meaningful */
 	public boolean hasEnoughData () {
 		return added_values >= values.length;
 	}
 
-	/** clears this WindowedMean. The class will only return meaningfull values after enough data has been added again. */
+	/** clears this WindowedMean. The class will only return meaningful values after enough data has been added again. */
 	public void clear () {
 		added_values = 0;
 		last_value = 0;

File: gdx/src/com/badlogic/gdx/net/ServerSocket.java
Patch:
@@ -36,6 +36,6 @@ public interface ServerSocket extends Disposable {
 	 * @param hints additional {@link SocketHints} applied to the accepted {@link Socket}. Input null to use the default setting
 	 *           provided by the system.
 	 * @return the accepted {@link Socket}
-	 * @throws GdxRuntimeException in case an error ocurred */
+	 * @throws GdxRuntimeException in case an error occurred */
 	public Socket accept (SocketHints hints);
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/AddListenerAction.java
Patch:
@@ -40,7 +40,7 @@ public Actor getTargetActor () {
 		return targetActor;
 	}
 
-	/** Sets the actor to add a listneer to. If null (the default), the {@link #getActor() actor} will be used. */
+	/** Sets the actor to add a listener to. If null (the default), the {@link #getActor() actor} will be used. */
 	public void setTargetActor (Actor actor) {
 		this.targetActor = actor;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RemoveListenerAction.java
Patch:
@@ -40,7 +40,7 @@ public Actor getTargetActor () {
 		return targetActor;
 	}
 
-	/** Sets the actor to remove a listner from. If null (the default), the {@link #getActor() actor} will be used. */
+	/** Sets the actor to remove a listener from. If null (the default), the {@link #getActor() actor} will be used. */
 	public void setTargetActor (Actor actor) {
 		this.targetActor = actor;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ProgressBar.java
Patch:
@@ -179,8 +179,8 @@ protected float getKnobPosition () {
 		return this.position;
 	}
 
-	/** Sets the progress bar position, rounded to the nearest step size and clamped to the minumum and maximim values.
-	 * {@link #clamp(float)} can be overidden to allow values outside of the progress bar's min/max range.
+	/** Sets the progress bar position, rounded to the nearest step size and clamped to the minimum and maximum values.
+	 * {@link #clamp(float)} can be overridden to allow values outside of the progress bar's min/max range.
 	 * @return false if the value was not changed because the progress bar already had the value or it was canceled by a listener. */
 	public boolean setValue (float value) {
 		value = clamp(Math.round(value / stepSize) * stepSize);
@@ -202,7 +202,7 @@ else if (animateDuration > 0) {
 		return !cancelled;
 	}
 
-	/** Clamps the value to the progress bar's min/max range. This can be overidden to allow a range different from the progress bar
+	/** Clamps the value to the progress bar's min/max range. This can be overridden to allow a range different from the progress bar
 	 * knob's range. */
 	protected float clamp (float value) {
 		return MathUtils.clamp(value, min, max);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
Patch:
@@ -97,7 +97,7 @@ public void load (FileHandle skinFile) {
 		}
 	}
 
-	/** Adds all named txeture regions from the atlas. The atlas will not be automatically disposed when the skin is disposed. */
+	/** Adds all named texture regions from the atlas. The atlas will not be automatically disposed when the skin is disposed. */
 	public void addRegions (TextureAtlas atlas) {
 		Array<AtlasRegion> regions = atlas.getRegions();
 		for (int i = 0, n = regions.size; i < n; i++) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -133,14 +133,14 @@ public float getMinHeight () {
 		return layout.getMinHeight();
 	}
 
-	/** Sets the background drawable from the skin and adjusts the table's padding to match the backgruond. This may only be called
+	/** Sets the background drawable from the skin and adjusts the table's padding to match the background. This may only be called
 	 * if {@link Table#Table(Skin)} or {@link #setSkin(Skin)} was used.
 	 * @see #setBackground(Drawable, boolean) */
 	public void setBackground (String drawableName) {
 		setBackground(skin.getDrawable(drawableName), true);
 	}
 
-	/** Sets the background drawable and adjusts the table's padding to match the backgruond.
+	/** Sets the background drawable and adjusts the table's padding to match the background.
 	 * @see #setBackground(Drawable, boolean) */
 	public void setBackground (Drawable background) {
 		setBackground(background, true);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/SpriteDrawable.java
Patch:
@@ -25,7 +25,7 @@
 public class SpriteDrawable extends BaseDrawable implements TransformDrawable {
 	private Sprite sprite;
 
-	/** Creates an unitialized SpriteDrawable. The sprite must be set before use. */
+	/** Creates an uninitialized SpriteDrawable. The sprite must be set before use. */
 	public SpriteDrawable () {
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/TextureRegionDrawable.java
Patch:
@@ -24,7 +24,7 @@
 public class TextureRegionDrawable extends BaseDrawable implements TransformDrawable {
 	private TextureRegion region;
 
-	/** Creates an unitialized TextureRegionDrawable. The texture region must be set before use. */
+	/** Creates an uninitialized TextureRegionDrawable. The texture region must be set before use. */
 	public TextureRegionDrawable () {
 	}
 

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -306,7 +306,7 @@ public void shrink () {
 		resize(size);
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes.
 	 * @return {@link #items} */
 	public T[] ensureCapacity (int additionalCapacity) {

File: gdx/src/com/badlogic/gdx/utils/ArrayMap.java
Patch:
@@ -133,7 +133,7 @@ public V get (K key) {
 
 	/** Returns the key for the specified value. Note this does a comparison of each value in reverse order until the specified
 	 * value is found.
-	 * @param identity If true, == comparison will be used. If false, .equals() comaparison will be used. */
+	 * @param identity If true, == comparison will be used. If false, .equals() comparison will be used. */
 	public K getKey (V value, boolean identity) {
 		Object[] values = this.values;
 		int i = size - 1;
@@ -205,7 +205,7 @@ public boolean containsKey (K key) {
 		return false;
 	}
 
-	/** @param identity If true, == comparison will be used. If false, .equals() comaparison will be used. */
+	/** @param identity If true, == comparison will be used. If false, .equals() comparison will be used. */
 	public boolean containsValue (V value, boolean identity) {
 		V[] values = this.values;
 		int i = size - 1;
@@ -338,7 +338,7 @@ public void shrink () {
 		resize(size);
 	}
 
-	/** Increases the size of the backing arrays to acommodate the specified number of additional entries. Useful before adding many
+	/** Increases the size of the backing arrays to accommodate the specified number of additional entries. Useful before adding many
 	 * entries to avoid multiple backing array resizes. */
 	public void ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;

File: gdx/src/com/badlogic/gdx/utils/BooleanArray.java
Patch:
@@ -192,7 +192,7 @@ public void shrink () {
 		resize(size);
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes.
 	 * @return {@link #items} */
 	public boolean[] ensureCapacity (int additionalCapacity) {

File: gdx/src/com/badlogic/gdx/utils/ByteArray.java
Patch:
@@ -233,7 +233,7 @@ public void shrink () {
 		resize(size);
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes.
 	 * @return {@link #items} */
 	public byte[] ensureCapacity (int additionalCapacity) {

File: gdx/src/com/badlogic/gdx/utils/CharArray.java
Patch:
@@ -233,7 +233,7 @@ public void shrink () {
 		resize(size);
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes.
 	 * @return {@link #items} */
 	public char[] ensureCapacity (int additionalCapacity) {

File: gdx/src/com/badlogic/gdx/utils/FloatArray.java
Patch:
@@ -233,7 +233,7 @@ public void shrink () {
 		resize(size);
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes.
 	 * @return {@link #items} */
 	public float[] ensureCapacity (int additionalCapacity) {

File: gdx/src/com/badlogic/gdx/utils/IdentityMap.java
Patch:
@@ -457,7 +457,7 @@ public K findKey (Object value, boolean identity) {
 		return null;
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes. */
 	public void ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;

File: gdx/src/com/badlogic/gdx/utils/IntArray.java
Patch:
@@ -233,7 +233,7 @@ public void shrink () {
 		resize(size);
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes.
 	 * @return {@link #items} */
 	public int[] ensureCapacity (int additionalCapacity) {

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -493,7 +493,7 @@ public int findKey (float value, int notFound) {
 		return notFound;
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes. */
 	public void ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;

File: gdx/src/com/badlogic/gdx/utils/IntIntMap.java
Patch:
@@ -478,7 +478,7 @@ public int findKey (int value, int notFound) {
 		return notFound;
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes. */
 	public void ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;

File: gdx/src/com/badlogic/gdx/utils/IntMap.java
Patch:
@@ -501,7 +501,7 @@ public int findKey (Object value, boolean identity, int notFound) {
 		return notFound;
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes. */
 	public void ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;

File: gdx/src/com/badlogic/gdx/utils/IntSet.java
Patch:
@@ -381,7 +381,7 @@ public int first () {
 		throw new IllegalStateException("IntSet is empty.");
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes. */
 	public void ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;

File: gdx/src/com/badlogic/gdx/utils/LongArray.java
Patch:
@@ -233,7 +233,7 @@ public void shrink () {
 		resize(size);
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes.
 	 * @return {@link #items} */
 	public long[] ensureCapacity (int additionalCapacity) {

File: gdx/src/com/badlogic/gdx/utils/LongMap.java
Patch:
@@ -498,7 +498,7 @@ public long findKey (Object value, boolean identity, long notFound) {
 		return notFound;
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes. */
 	public void ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -441,7 +441,7 @@ public K findKey (float value) {
 		return null;
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes. */
 	public void ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -441,7 +441,7 @@ public K findKey (int value) {
 		return null;
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes. */
 	public void ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;

File: gdx/src/com/badlogic/gdx/utils/ObjectMap.java
Patch:
@@ -473,7 +473,7 @@ public K findKey (Object value, boolean identity) {
 		return null;
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes. */
 	public void ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -360,7 +360,7 @@ public T first () {
 		throw new IllegalStateException("IntSet is empty.");
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes. */
 	public void ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;

File: gdx/src/com/badlogic/gdx/utils/PauseableThread.java
Patch:
@@ -25,7 +25,7 @@ public class PauseableThread extends Thread {
 	boolean paused = false;
 	boolean exit = false;
 
-	/** Constructs a new thread setting the runnable which will be called repeatadly in a loop.
+	/** Constructs a new thread setting the runnable which will be called repeatedly in a loop.
 	 * 
 	 * @param runnable the runnable. */
 	public PauseableThread (Runnable runnable) {

File: gdx/src/com/badlogic/gdx/utils/PooledLinkedList.java
Patch:
@@ -77,7 +77,7 @@ public T next () {
 		return payload;
 	}
 
-	/** Removs the current list item based on the iterator position. */
+	/** Removes the current list item based on the iterator position. */
 	public void remove () {
 		if (curr == null) return;
 

File: gdx/src/com/badlogic/gdx/utils/ShortArray.java
Patch:
@@ -240,7 +240,7 @@ public void shrink () {
 		resize(size);
 	}
 
-	/** Increases the size of the backing array to acommodate the specified number of additional items. Useful before adding many
+	/** Increases the size of the backing array to accommodate the specified number of additional items. Useful before adding many
 	 * items to avoid multiple backing array resizes.
 	 * @return {@link #items} */
 	public short[] ensureCapacity (int additionalCapacity) {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -153,7 +153,6 @@ public AndroidInput (Application activity, Context context, Object view, Android
 		this.app = activity;
 		this.context = context;
 		this.sleepTime = config.touchSleepTime;
-		int sdkVersion = android.os.Build.VERSION.SDK_INT;
 		touchHandler = new AndroidMultiTouchHandler();
 		hasMultitouch = touchHandler.supportsMultitouch(context);
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -28,6 +28,8 @@
 import com.badlogic.gdx.physics.box2d.JointDef.JointType;
 import com.badlogic.gdx.physics.box2d.joints.DistanceJoint;
 import com.badlogic.gdx.physics.box2d.joints.FrictionJoint;
+import com.badlogic.gdx.physics.box2d.joints.GearJoint;
+import com.badlogic.gdx.physics.box2d.joints.GearJointDef;
 import com.badlogic.gdx.physics.box2d.joints.MouseJoint;
 import com.badlogic.gdx.physics.box2d.joints.PrismaticJoint;
 import com.badlogic.gdx.physics.box2d.joints.PulleyJoint;
@@ -168,7 +170,7 @@ public Joint createJoint (JointDef def) {
 		Joint joint = null;
 		if (def.type == JointType.DistanceJoint) joint = new DistanceJoint(this, (org.jbox2d.dynamics.joints.DistanceJoint)j);
 		if (def.type == JointType.FrictionJoint) joint = new FrictionJoint(this, (org.jbox2d.dynamics.joints.FrictionJoint)j);
-		if (def.type == JointType.GearJoint) joint = new DistanceJoint(this, (org.jbox2d.dynamics.joints.DistanceJoint)j);
+		if (def.type == JointType.GearJoint) joint = new GearJoint(this, (org.jbox2d.dynamics.joints.GearJoint)j, ((GearJointDef) def).joint1, ((GearJointDef) def).joint2);
 		if (def.type == JointType.MouseJoint) joint = new MouseJoint(this, (org.jbox2d.dynamics.joints.MouseJoint)j);
 		if (def.type == JointType.PrismaticJoint) joint = new PrismaticJoint(this, (org.jbox2d.dynamics.joints.PrismaticJoint)j);
 		if (def.type == JointType.PulleyJoint) joint = new PulleyJoint(this, (org.jbox2d.dynamics.joints.PulleyJoint)j);

File: gdx/src/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -343,7 +343,7 @@ public Joint createJoint (JointDef def) {
 		Joint joint = null;
 		if (def.type == JointType.DistanceJoint) joint = new DistanceJoint(this, jointAddr);
 		if (def.type == JointType.FrictionJoint) joint = new FrictionJoint(this, jointAddr);
-		if (def.type == JointType.GearJoint) joint = new GearJoint(this, jointAddr);
+		if (def.type == JointType.GearJoint) joint = new GearJoint(this, jointAddr, ((GearJointDef) def).joint1, ((GearJointDef) def).joint2);
 		if (def.type == JointType.MouseJoint) joint = new MouseJoint(this, jointAddr);
 		if (def.type == JointType.PrismaticJoint) joint = new PrismaticJoint(this, jointAddr);
 		if (def.type == JointType.PulleyJoint) joint = new PulleyJoint(this, jointAddr);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -803,7 +803,7 @@ public float getScrollBarWidth () {
 
 	/** Returns the width of the scrolled viewport. */
 	public float getScrollWidth () {
-		return areaHeight;
+		return areaWidth;
 	}
 
 	/** Returns the height of the scrolled viewport. */

File: gdx/src/com/badlogic/gdx/graphics/g3d/environment/DirectionalShadowLight.java
Patch:
@@ -48,7 +48,7 @@ public DirectionalShadowLight (int shadowMapWidth, int shadowMapHeight, float sh
 		halfHeight = shadowViewportHeight * 0.5f;
 		halfDepth = shadowNear + 0.5f * (shadowFar - shadowNear);
 		textureDesc = new TextureDescriptor();
-		textureDesc.minFilter = textureDesc.minFilter = Texture.TextureFilter.Nearest;
+		textureDesc.minFilter = textureDesc.magFilter = Texture.TextureFilter.Nearest;
 		textureDesc.uWrap = textureDesc.vWrap = Texture.TextureWrap.ClampToEdge;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/environment/DirectionalShadowLight.java
Patch:
@@ -48,7 +48,7 @@ public DirectionalShadowLight (int shadowMapWidth, int shadowMapHeight, float sh
 		halfHeight = shadowViewportHeight * 0.5f;
 		halfDepth = shadowNear + 0.5f * (shadowFar - shadowNear);
 		textureDesc = new TextureDescriptor();
-		textureDesc.minFilter = textureDesc.minFilter = Texture.TextureFilter.Nearest;
+		textureDesc.minFilter = textureDesc.magFilter = Texture.TextureFilter.Nearest;
 		textureDesc.uWrap = textureDesc.vWrap = Texture.TextureWrap.ClampToEdge;
 	}
 

File: gdx/src/com/badlogic/gdx/physics/box2d/ChainShape.java
Patch:
@@ -67,7 +67,7 @@ public void createLoop (Vector2[] vertices) {
 		for( int i = 0; i < numVertices; i++ )
 			verticesOut[i] = b2Vec2(verts[i<<1], verts[(i<<1)+1]);
 		chain->CreateLoop( verticesOut, numVertices );
-		delete verticesOut;
+		delete[] verticesOut;
 	*/
 
 	/** Create a chain with isolated end vertices.
@@ -94,7 +94,7 @@ public void createChain (Vector2[] vertices) {
 		for( int i = 0; i < numVertices; i++ )
 			verticesOut[i] = b2Vec2(verts[i<<1], verts[(i<<1)+1]);
 		chain->CreateChain( verticesOut, numVertices );
-		delete verticesOut;
+		delete[] verticesOut;
 	*/
 
 	/** Establish connectivity to a vertex that precedes the first vertex. Don't call this for loops. */

File: gdx/src/com/badlogic/gdx/physics/box2d/PolygonShape.java
Patch:
@@ -75,7 +75,7 @@ public void set (float[] vertices, int offset, int len) {
 			verticesOut[i] = b2Vec2(verts[(i<<1) + offset], verts[(i<<1) + offset + 1]);
 		}
 		poly->Set(verticesOut, numVertices);
-		delete verticesOut;
+		delete[] verticesOut;
 	 */
 	
 	/** Build vertices to represent an axis-aligned box.

File: gdx/src/com/badlogic/gdx/physics/box2d/ChainShape.java
Patch:
@@ -67,7 +67,7 @@ public void createLoop (Vector2[] vertices) {
 		for( int i = 0; i < numVertices; i++ )
 			verticesOut[i] = b2Vec2(verts[i<<1], verts[(i<<1)+1]);
 		chain->CreateLoop( verticesOut, numVertices );
-		delete verticesOut;
+		delete[] verticesOut;
 	*/
 
 	/** Create a chain with isolated end vertices.
@@ -94,7 +94,7 @@ public void createChain (Vector2[] vertices) {
 		for( int i = 0; i < numVertices; i++ )
 			verticesOut[i] = b2Vec2(verts[i<<1], verts[(i<<1)+1]);
 		chain->CreateChain( verticesOut, numVertices );
-		delete verticesOut;
+		delete[] verticesOut;
 	*/
 
 	/** Establish connectivity to a vertex that precedes the first vertex. Don't call this for loops. */

File: gdx/src/com/badlogic/gdx/physics/box2d/PolygonShape.java
Patch:
@@ -75,7 +75,7 @@ public void set (float[] vertices, int offset, int len) {
 			verticesOut[i] = b2Vec2(verts[(i<<1) + offset], verts[(i<<1) + offset + 1]);
 		}
 		poly->Set(verticesOut, numVertices);
-		delete verticesOut;
+		delete[] verticesOut;
 	 */
 	
 	/** Build vertices to represent an axis-aligned box.

File: tests/gdx-tests/src/com/badlogic/gdx/tests/DownloadTest.java
Patch:
@@ -51,6 +51,7 @@ public void cancelled () {
 
 	@Override
 	public void render () {
+		Gdx.gl.glViewport(10, 10, 100, 100);
 		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
 		if(texture != null) batch.draw(texture, 0, 0);

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -30,7 +30,7 @@
  * <li>a desktop application (see <code>JglfwApplication</code> found in gdx-backends-jglfw.jar)</li>
  * <li>an Android application (see <code>AndroidApplication</code> found in gdx-backends-android.jar)</li>
  * <li>a HTML5 application (see <code>GwtApplication</code> found in gdx-backends-gwt.jar)</li>
- * <li>an iOS application (see <code>IOSApplication</code> found in gdx-backends-iosmonotouch.jar)</li>
+ * <li>an iOS application (see <code>IOSApplication</code> found in gdx-backends-robovm.jar)</li>
  * </ul>
  * Each application class has it's own startup and
  * initialization methods. Please refer to their documentation for more information.
@@ -52,8 +52,8 @@
  * </p>
  * 
  * <p>
- * {@link Graphics} offers you various methods to output visuals to the screen. This is achieved via OpenGL ES 1.0, 1.1 or 2.0
- * depending on what's available an the platform. On the desktop the features of OpenGL ES 2.0 are emulated via desktop OpenGL. On
+ * {@link Graphics} offers you various methods to output visuals to the screen. This is achieved via OpenGL ES 2.0 or 3.0
+ * depending on what's available an the platform. On the desktop the features of OpenGL ES 2.0 and 3.0 are emulated via desktop OpenGL. On
  * Android the functionality of the Java OpenGL ES bindings is used.
  * </p>
  * 

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/bmfont/BitmapFontWriter.java
Patch:
@@ -212,7 +212,7 @@ public static void writeFont (BitmapFontData fontData, String[] pageRefs, FileHa
 		// CHAR definitions
 		for (int i = 0; i < glyphs.size; i++) {
 			Glyph g = glyphs.get(i);
-			buf.append(xmlTab).append(xmlOpen).append("char id=").append(quote(String.format("%-5s", g.id), true)).append("x=")
+			buf.append(xmlTab).append(xmlOpen).append("char id=").append(quote(String.format("%-6s", g.id), true)).append("x=")
 				.append(quote(String.format("%-5s", g.srcX), true)).append("y=").append(quote(String.format("%-5s", g.srcY), true))
 				.append("width=").append(quote(String.format("%-5s", g.width), true)).append("height=")
 				.append(quote(String.format("%-5s", g.height), true)).append("xoffset=")

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/bmfont/BitmapFontWriter.java
Patch:
@@ -212,7 +212,7 @@ public static void writeFont (BitmapFontData fontData, String[] pageRefs, FileHa
 		// CHAR definitions
 		for (int i = 0; i < glyphs.size; i++) {
 			Glyph g = glyphs.get(i);
-			buf.append(xmlTab).append(xmlOpen).append("char id=").append(quote(String.format("%-5s", g.id), true)).append("x=")
+			buf.append(xmlTab).append(xmlOpen).append("char id=").append(quote(String.format("%-6s", g.id), true)).append("x=")
 				.append(quote(String.format("%-5s", g.srcX), true)).append("y=").append(quote(String.format("%-5s", g.srcY), true))
 				.append("width=").append(quote(String.format("%-5s", g.width), true)).append("height=")
 				.append(quote(String.format("%-5s", g.height), true)).append("xoffset=")

File: gdx/src/com/badlogic/gdx/assets/loaders/BitmapFontLoader.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.badlogic.gdx.assets.loaders;
 
+import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.assets.AssetDescriptor;
 import com.badlogic.gdx.assets.AssetLoaderParameters;
 import com.badlogic.gdx.assets.AssetManager;
@@ -55,8 +56,7 @@ public Array<AssetDescriptor> getDependencies (String fileName, FileHandle file,
 				textureParams.magFilter = parameter.magFilter;
 			}
 			
-			AssetDescriptor descriptor = new AssetDescriptor(data.getImagePath(i), Texture.class, textureParams);
-			
+			AssetDescriptor descriptor = new AssetDescriptor(resolve(data.getImagePath(i)), Texture.class, textureParams);
 			deps.add(descriptor);
 		}
 		return deps;

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/AnimationController.java
Patch:
@@ -286,7 +286,7 @@ protected AnimationDesc setAnimation(final AnimationDesc anim) {
 		if (current == null)
 			current = anim;
 		else {
-			if (anim != null && current.animation == anim.animation)
+			if (!allowSameAnimation && anim != null && current.animation == anim.animation)
 				anim.time = current.time;
 			else
 				removeAnimation(current.animation);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/AnimationController.java
Patch:
@@ -286,7 +286,7 @@ protected AnimationDesc setAnimation(final AnimationDesc anim) {
 		if (current == null)
 			current = anim;
 		else {
-			if (anim != null && current.animation == anim.animation)
+			if (!allowSameAnimation && anim != null && current.animation == anim.animation)
 				anim.time = current.time;
 			else
 				removeAnimation(current.animation);

File: gdx/src/com/badlogic/gdx/utils/SharedLibraryLoader.java
Patch:
@@ -45,8 +45,8 @@ public class SharedLibraryLoader {
 	static public String abi = (System.getProperty("sun.arch.abi") != null ? System.getProperty("sun.arch.abi") : "");
 
 	static {
-		String vm = System.getProperty("java.vm.name");
-		if (vm != null && vm.contains("Dalvik")) {
+		String vm = System.getProperty("java.runtime.name");
+		if (vm != null && vm.contains("Android Runtime")) {
 			isAndroid = true;
 			isWindows = false;
 			isLinux = false;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/EventAction.java
Patch:
@@ -14,9 +14,9 @@ abstract public class EventAction<T extends Event> extends Action {
 	boolean result;
 
 	private final EventListener listener = new EventListener() {
-		public boolean handle (Event event) {			
+		public boolean handle (Event event) {
 			if (!ClassReflection.isInstance(eventClass, event)) return false;
-			result = EventAction.this.handle(event);
+			result = EventAction.this.handle((T) event);
 			return result;
 		}
 	};

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/EventAction.java
Patch:
@@ -14,9 +14,9 @@ abstract public class EventAction<T extends Event> extends Action {
 	boolean result;
 
 	private final EventListener listener = new EventListener() {
-		public boolean handle (Event event) {			
+		public boolean handle (Event event) {
 			if (!ClassReflection.isInstance(eventClass, event)) return false;
-			result = EventAction.this.handle(event);
+			result = EventAction.this.handle((T) event);
 			return result;
 		}
 	};

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/EventAction.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.badlogic.gdx.scenes.scene2d.actions;
 
 import com.badlogic.gdx.scenes.scene2d.Action;
@@ -17,7 +16,7 @@ abstract public class EventAction<T extends Event> extends Action {
 	private final EventListener listener = new EventListener() {
 		public boolean handle (Event event) {			
 			if (!ClassReflection.isInstance(eventClass, event)) return false;
-			result = handle(event);
+			result = EventAction.this.handle(event);
 			return result;
 		}
 	};

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/EventAction.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.badlogic.gdx.scenes.scene2d.actions;
 
 import com.badlogic.gdx.scenes.scene2d.Action;
@@ -17,7 +16,7 @@ abstract public class EventAction<T extends Event> extends Action {
 	private final EventListener listener = new EventListener() {
 		public boolean handle (Event event) {			
 			if (!ClassReflection.isInstance(eventClass, event)) return false;
-			result = handle(event);
+			result = EventAction.this.handle(event);
 			return result;
 		}
 	};

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CharacterTest.java
Patch:
@@ -69,16 +69,16 @@ public void create () {
 		disposables.add(texture);
 		final Material material = new Material(TextureAttribute.createDiffuse(texture), ColorAttribute.createSpecular(1,1,1,1), FloatAttribute.createShininess(8f));
 		final long attributes = Usage.Position | Usage.Normal | Usage.TextureCoordinates;
-		final Model capsule = modelBuilder.createCapsule(1.75f, 4.25f, 16, material, attributes);
+		final Model capsule = modelBuilder.createCapsule(2f, 6f, 16, material, attributes);
 		disposables.add(capsule);
 		world.addConstructor("capsule", new BulletConstructor(capsule, null));
-		character = world.add("capsule", 5f, 2.125f, 5f);
+		character = world.add("capsule", 5f, 3f, 5f);
 		characterTransform = character.transform; // Set by reference
 		
 		// Create the physics representation of the character
 		ghostObject = new btPairCachingGhostObject();
 		ghostObject.setWorldTransform(characterTransform);
-		ghostShape = new btCapsuleShape(1.75f, 1.75f);
+		ghostShape = new btCapsuleShape(2f, 2f);
 		ghostObject.setCollisionShape(ghostShape);
 		ghostObject.setCollisionFlags(btCollisionObject.CollisionFlags.CF_CHARACTER_OBJECT);
 		characterController = new btKinematicCharacterController(ghostObject, ghostShape, .35f);

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java
Patch:
@@ -209,6 +209,7 @@ private final int[] getAttributeLocations(final VertexAttributes attrs) {
 	private Attributes combinedAttributes = new Attributes();
 	@Override
 	public void render (Renderable renderable) {
+		if(renderable.worldTransform.det3x3() == 0) return;
 		combinedAttributes.clear();
 		if (renderable.environment != null)
 			combinedAttributes.set(renderable.environment);

File: gdx/src/com/badlogic/gdx/math/Vector2.java
Patch:
@@ -105,7 +105,7 @@ public Vector2 nor () {
 		}
 		return this;
 	}
-
+	
 	/** Adds the given vector to this vector
 	 * @param v The vector
 	 * @return This vector for chaining */

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -468,7 +468,7 @@ public static boolean intersectRayBounds (Ray ray, BoundingBox box, Vector3 inte
 			}
 		}
 		// min z
-		if (ray.origin.z <= box.min.y && ray.direction.z > 0) {
+		if (ray.origin.z <= box.min.z && ray.direction.z > 0) {
 			t = (box.min.z - ray.origin.z) / ray.direction.z;
 			if (t >= 0) {
 				Vector3.tmp3.set(ray.direction).scl(t).add(ray.origin);

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGLES20.java
Patch:
@@ -21,10 +21,8 @@
 import java.nio.IntBuffer;
 
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
 
-
-public class IOSGLES20 implements GL20, GLCommon
+public class IOSGLES20 implements GL20
 {	
 	public IOSGLES20() {
 		init();

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class IOSMusic implements Music {
 	private final OALAudioTrack track;
-	private OnCompletionListener onCompletionListener;
+	OnCompletionListener onCompletionListener;
 
 	public IOSMusic(OALAudioTrack track) {
 		this.track = track;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -240,6 +240,8 @@ public void initiateGLInstances () {
 		major = Integer.parseInt("" + version.charAt(0));
 		minor = Integer.parseInt("" + version.charAt(2));
 
+		gl20 = new LwjglGL20();
+
 		if (major <= 1)
 			throw new GdxRuntimeException("OpenGL 2.0 or higher with the FBO extension is required. OpenGL version: " + version);
 		if (major == 2 || version.contains("2.1")) {
@@ -249,8 +251,6 @@ public void initiateGLInstances () {
 			}
 		}
 
-		gl20 = new LwjglGL20();
-
 		Gdx.gl = gl20;
 		Gdx.gl20 = gl20;
 	}
@@ -413,7 +413,7 @@ public void setVSync (boolean vsync) {
 
 	@Override
 	public boolean supportsExtension (String extension) {
-		if (extensions == null) extensions = Gdx.gl.glGetString(GL20.GL_EXTENSIONS);
+		if (extensions == null) extensions = gl20.glGetString(GL20.GL_EXTENSIONS);
 		return extensions.contains(extension);
 	}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -164,7 +164,7 @@ void setupLoop () {
 		Gdx.audio = new GwtAudio();
 		Gdx.graphics = graphics;
 		Gdx.gl20 = graphics.getGL20();
-		Gdx.gl = graphics.getGLCommon();
+		Gdx.gl = Gdx.gl20;
 		Gdx.files = new GwtFiles(preloader);
 		this.input = new GwtInput(graphics.canvas);
 		Gdx.input = this.input;

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplicationConfiguration.java
Patch:
@@ -53,8 +53,6 @@ public class JglfwApplicationConfiguration {
 	public boolean vSync = true;
 	/** True if the window is resizable. **/
 	public boolean resizable = true;
-	/** True to attempt to use OpenGL ES 2.0. Note {@link Gdx#gl20} may be null even when this is true. **/
-	public boolean useGL20;
 	/** True to call System.exit() when the main loop is complete. **/
 	public boolean forceExit = true;
 	/** True to have a title and border around the window. **/

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ScissorStack.java
Patch:
@@ -38,7 +38,7 @@ public class ScissorStack {
 	/** Pushes a new scissor {@link Rectangle} onto the stack, merging it with the current top of the stack. The minimal area of
 	 * overlap between the top of stack rectangle and the provided rectangle is pushed onto the stack. This will invoke
 	 * {@link GLCommon#glScissor(int, int, int, int)} with the final top of stack rectangle. In case no scissor is yet on the stack
-	 * this will also enable {@link GL10#GL_SCISSOR_TEST} automatically.
+	 * this will also enable {@link GL20#GL_SCISSOR_TEST} automatically.
 	 * @return true if the scissors were pushed. false if the scissor area was zero, in this case the scissors were not pushed and
 	 *         no drawing should occur. */
 	public static boolean pushScissors (Rectangle scissor) {
@@ -69,7 +69,7 @@ public static boolean pushScissors (Rectangle scissor) {
 	}
 
 	/** Pops the current scissor rectangle from the stack and sets the new scissor area to the new top of stack rectangle. In case
-	 * no more rectangles are on the stack, {@link GL10#GL_SCISSOR_TEST} is disabled. */
+	 * no more rectangles are on the stack, {@link GL20#GL_SCISSOR_TEST} is disabled. */
 	public static Rectangle popScissors () {
 		Rectangle old = scissors.pop();
 		if (scissors.size == 0)

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFragmentApplication.java
Patch:
@@ -1,7 +1,5 @@
 package com.badlogic.gdx.backends.android;
 
-import java.util.Arrays;
-
 import android.app.Activity;
 import android.content.Context;
 import android.content.res.Configuration;
@@ -29,6 +27,9 @@
 import com.badlogic.gdx.utils.Clipboard;
 import com.badlogic.gdx.utils.GdxNativesLoader;
 
+import java.lang.reflect.Method;
+import java.util.Arrays;
+
 /**
  * Implementation of the {@link AndroidApplicationBase} that is based on the {@link Fragment} class. This class is similar
  * in use to the {@link AndroidApplication} class, which is based on an {@link Activity}.

File: gdx/src/com/badlogic/gdx/Gdx.java
Patch:
@@ -25,7 +25,7 @@
  * static access to all sub systems. It is your responsiblity to keep things thread safe. Don't use Graphics in a thread that is
  * not the rendering thread or things will go crazy. Really.
  * <p>
- * There's also references to {@link GLCommon, {@link GL20} and {@link GL30}. The same rules as above apply. Don't
+ * There's also references to {@link GLCommon}, {@link GL20} and {@link GL30}. The same rules as above apply. Don't
  * mess with this or things will break!
  * <p>
  * This is kind of messy but better than throwing around Graphics and similar instances. I'm aware of the design faux pas.

File: gdx/src/com/badlogic/gdx/Gdx.java
Patch:
@@ -25,7 +25,7 @@
  * static access to all sub systems. It is your responsiblity to keep things thread safe. Don't use Graphics in a thread that is
  * not the rendering thread or things will go crazy. Really.
  * <p>
- * There's also references to {@link GLCommon, {@link GL20} and {@link GL30}. The same rules as above apply. Don't
+ * There's also references to {@link GLCommon}, {@link GL20} and {@link GL30}. The same rules as above apply. Don't
  * mess with this or things will break!
  * <p>
  * This is kind of messy but better than throwing around Graphics and similar instances. I'm aware of the design faux pas.

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -30,7 +30,7 @@
 
 /** <p>
  * This interface encapsulates communication with the graphics processor. Depending on the available hardware and the current
- * {@link Application} configuration, access to the {@link GL10}, {@link GL11}, {@link GL20}, and/or {@link GLCommon} are provided
+ * {@link Application} configuration, access to the {@link GL20}, {@link GL30}, and/or {@link GLCommon} are provided
  * here.
  * </p>
  * 

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -30,7 +30,7 @@
 
 /** <p>
  * This interface encapsulates communication with the graphics processor. Depending on the available hardware and the current
- * {@link Application} configuration, access to the {@link GL10}, {@link GL11}, {@link GL20}, and/or {@link GLCommon} are provided
+ * {@link Application} configuration, access to the {@link GL20}, {@link GL30}, and/or {@link GLCommon} are provided
  * here.
  * </p>
  * 

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -112,7 +112,7 @@ public String toString () {
 	 * access OpenGL ES 3.0 functionality. Note that this functionality will only be available if you instructed the
 	 * {@link Application} instance to use OpenGL ES 3.0!
 	 * 
-	 * @return whether OpenGL ES 2.0 is available */
+	 * @return whether OpenGL ES 3.0 is available */
 	public boolean isGL30Available ();
 
 	/** @return a {@link GLCommon} instance */

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -112,7 +112,7 @@ public String toString () {
 	 * access OpenGL ES 3.0 functionality. Note that this functionality will only be available if you instructed the
 	 * {@link Application} instance to use OpenGL ES 3.0!
 	 * 
-	 * @return whether OpenGL ES 2.0 is available */
+	 * @return whether OpenGL ES 3.0 is available */
 	public boolean isGL30Available ();
 
 	/** @return a {@link GLCommon} instance */

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -19,9 +19,6 @@
 import java.lang.reflect.Method;
 import java.util.Arrays;
 
-import javax.microedition.khronos.opengles.GL10;
-import javax.microedition.khronos.opengles.GL11;
-
 import android.app.Activity;
 import android.content.Context;
 import android.content.res.Configuration;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInputFactory.java
Patch:
@@ -34,13 +34,12 @@ public static AndroidInput newAndroidInput(Application activity, Context context
 			Class<?> clazz = null;
 			AndroidInput input = null;
 			
-			int sdkVersion = Integer.parseInt(android.os.Build.VERSION.SDK);
+			int sdkVersion = android.os.Build.VERSION.SDK_INT;
 			if (sdkVersion >= 12) {
 				clazz = Class.forName("com.badlogic.gdx.backends.android.AndroidInputThreePlus");
 			} else {
 				clazz = Class.forName("com.badlogic.gdx.backends.android.AndroidInput");
 			}
-			
 			Constructor<?> constructor = clazz.getConstructor(Application.class, Context.class, Object.class, AndroidApplicationConfiguration.class);
 			input = (AndroidInput)constructor.newInstance(activity, context, view, config);
 			return input;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
Patch:
@@ -14,9 +14,6 @@
 
 package com.badlogic.gdx.backends.android;
 
-import javax.microedition.khronos.opengles.GL10;
-import javax.microedition.khronos.opengles.GL11;
-
 import android.content.Context;
 import android.os.Bundle;
 import android.service.wallpaper.WallpaperService;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -19,9 +19,6 @@
 import java.lang.reflect.Method;
 import java.util.Arrays;
 
-import javax.microedition.khronos.opengles.GL10;
-import javax.microedition.khronos.opengles.GL11;
-
 import android.app.Activity;
 import android.content.Context;
 import android.content.res.Configuration;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInputFactory.java
Patch:
@@ -34,13 +34,12 @@ public static AndroidInput newAndroidInput(Application activity, Context context
 			Class<?> clazz = null;
 			AndroidInput input = null;
 			
-			int sdkVersion = Integer.parseInt(android.os.Build.VERSION.SDK);
+			int sdkVersion = android.os.Build.VERSION.SDK_INT;
 			if (sdkVersion >= 12) {
 				clazz = Class.forName("com.badlogic.gdx.backends.android.AndroidInputThreePlus");
 			} else {
 				clazz = Class.forName("com.badlogic.gdx.backends.android.AndroidInput");
 			}
-			
 			Constructor<?> constructor = clazz.getConstructor(Application.class, Context.class, Object.class, AndroidApplicationConfiguration.class);
 			input = (AndroidInput)constructor.newInstance(activity, context, view, config);
 			return input;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
Patch:
@@ -14,9 +14,6 @@
 
 package com.badlogic.gdx.backends.android;
 
-import javax.microedition.khronos.opengles.GL10;
-import javax.microedition.khronos.opengles.GL11;
-
 import android.content.Context;
 import android.os.Bundle;
 import android.service.wallpaper.WallpaperService;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -582,7 +582,6 @@ public boolean isGL30Available () {
 
 	@Override
 	public GL30 getGL30 () {
-		// TODO Auto-generated method stub
 		return gl30;
 	}
 }

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -124,8 +124,6 @@ public String toString () {
 	/** @return the {@link GL30} instance or null if not supported */
 	public GL30 getGL30 ();
 
-	/** @return the (@link GL30} instance or null if not supported */
-	
 	/** @return the width in pixels of the display surface */
 	public int getWidth ();
 

File: demos/cuboc/cuboc-android/src/com/badlogic/cuboc/Cuboc.java
Patch:
@@ -16,7 +16,6 @@ public void onCreate (Bundle savedInstanceState) {
 		config.useAccelerometer = false;
 		config.useCompass = false;
 		config.useWakelock = true;
-		config.useGL20 = true;
 		initialize(new Cubocy(), config);
 	}
 }

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/CubocDesktop.java
Patch:
@@ -7,7 +7,7 @@
 
 public class CubocDesktop {
 	public static void main (String[] argv) {
-		new LwjglApplication(new Cubocy(), "Cubocy", 480, 320, true);
+		new LwjglApplication(new Cubocy(), "Cubocy", 480, 320);
 
 		// After creating the Application instance we can set the log level to
 		// show the output of calls to Gdx.app.debug

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/MapRenderer.java
Patch:
@@ -3,7 +3,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.FPSLogger;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.Animation;
@@ -124,7 +124,7 @@ public void render (float deltaTime) {
 		renderLaserBeams();
 
 		cache.setProjectionMatrix(cam.combined);
-		Gdx.gl.glDisable(GL10.GL_BLEND);
+		Gdx.gl.glDisable(GL20.GL_BLEND);
 		cache.begin();
 		int b = 0;
 		for (int blockY = 0; blockY < 4; blockY++) {
@@ -226,7 +226,7 @@ private void renderLasers () {
 
 	private void renderLaserBeams () {
 		cam.update(false);
-		renderer.begin(cam.combined, GL10.GL_LINES);
+		renderer.begin(cam.combined, GL20.GL_LINES);
 		for (int i = 0; i < map.lasers.size; i++) {
 			Laser laser = map.lasers.get(i);
 			float sx = laser.startPoint.x, sy = laser.startPoint.y;

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/screens/GameOverScreen.java
Patch:
@@ -4,7 +4,7 @@
 import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
@@ -27,7 +27,7 @@ public void show () {
 
 	@Override
 	public void render (float delta) {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
 		batch.draw(intro, 0, 0);
 		batch.end();

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/screens/GameScreen.java
Patch:
@@ -7,7 +7,7 @@
 import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 
 public class GameScreen extends CubocScreen {
 	Map map;
@@ -30,7 +30,7 @@ public void render (float delta) {
 		delta = Math.min(0.06f, Gdx.graphics.getDeltaTime());
 		map.update(delta);
 		Gdx.gl.glClearColor(0.1f, 0.1f, 0.1f, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		renderer.render(delta);
 		controlRenderer.render();
 

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/screens/IntroScreen.java
Patch:
@@ -4,7 +4,7 @@
 import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
@@ -27,7 +27,7 @@ public void show () {
 
 	@Override
 	public void render (float delta) {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
 		batch.draw(intro, 0, 0);
 		batch.end();

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/screens/MainMenu.java
Patch:
@@ -4,7 +4,7 @@
 import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
@@ -27,7 +27,7 @@ public void show () {
 
 	@Override
 	public void render (float delta) {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
 		batch.draw(title, 0, 0);
 		batch.end();

File: demos/invaders/gdx-invaders-android/src/com/badlogic/gdxinvaders/GdxInvadersAndroid.java
Patch:
@@ -15,7 +15,6 @@ public void onCreate (Bundle savedInstanceState) {
 		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
 		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
 		config.useWakelock = true;
-		config.useGL20 = true;
 		initialize(new GdxInvaders(), config);
 	}
 }

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvadersDesktop.java
Patch:
@@ -23,7 +23,6 @@ public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.title = "Gdx Invaders";
 		config.vSyncEnabled = true;
-		config.useGL20 = true;
 		new LwjglApplication(new GdxInvaders(), config);
 	}
 }

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameOver.java
Patch:
@@ -15,7 +15,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
@@ -82,7 +82,7 @@ public boolean isDone () {
 
 	@Override
 	public void draw (float delta) {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		viewMatrix.setToOrtho2D(0, 0, 480, 320);
 		spriteBatch.setProjectionMatrix(viewMatrix);
@@ -95,7 +95,7 @@ public void draw (float delta) {
 		spriteBatch.draw(logo, 0, 320 - 128, 480, 128, 0, 256, 512, 256, false, false);
 		String text = "It is the end my friend.\nTouch to continue!";
 		TextBounds bounds = font.getMultiLineBounds(text);
-		spriteBatch.setBlendFunction(GL10.GL_ONE, GL10.GL_ONE_MINUS_SRC_ALPHA);
+		spriteBatch.setBlendFunction(GL20.GL_ONE, GL20.GL_ONE_MINUS_SRC_ALPHA);
 		font.drawMultiLine(spriteBatch, text, 0, 160 + bounds.height / 2, 480, HAlignment.CENTER);
 		spriteBatch.end();
 	}

File: demos/metagun/metagun-android/src/com/badlogic/metagun/MetagunAndroid.java
Patch:
@@ -11,6 +11,6 @@ public class MetagunAndroid extends AndroidApplication {
 	@Override
 	public void onCreate (Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
-		initialize(new Metagun(), false);
+		initialize(new Metagun());
 	}
 }

File: demos/metagun/metagun-desktop/src/com/mojang/metagun/Metagun.java
Patch:
@@ -3,7 +3,7 @@
 
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.mojang.metagun.screen.Screen;
 import com.mojang.metagun.screen.TitleScreen;
 
@@ -47,7 +47,7 @@ public void setScreen (Screen newScreen) {
 
 	@Override
 	public void render () {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		accum += Gdx.graphics.getDeltaTime();
 		while (accum > 1.0f / 60.0f) {
 			screen.tick(input);

File: demos/metagun/metagun-desktop/src/com/mojang/metagun/MetagunDesktop.java
Patch:
@@ -5,6 +5,6 @@
 
 public class MetagunDesktop {
 	public static void main (String[] argv) {
-		new LwjglApplication(new Metagun(), "Metagun", 320, 240, false);
+		new LwjglApplication(new Metagun(), "Metagun", 320, 240);
 	}
 }

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/PaxBritannicaDesktop.java
Patch:
@@ -4,7 +4,6 @@
 
 public class PaxBritannicaDesktop {
 	public static void main(String[] args) {
-		new LwjglApplication(new PaxBritannica(),
-				"Pax Britannica", 1024, 550,false);
+		new LwjglApplication(new PaxBritannica(), "Pax Britannica", 1024, 550);
 	}
 }

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/help/Help.java
Patch:
@@ -4,7 +4,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.InputProcessor;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
@@ -91,7 +91,7 @@ public void show() {
 	@Override
 	public void render(float delta) {
 		Gdx.gl.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		time += delta;
 

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/mainmenu/MainMenu.java
Patch:
@@ -1,15 +1,13 @@
 package de.swagner.paxbritannica.mainmenu;
 
 import java.io.IOException;
-import java.util.ArrayList;
 
+import com.badlogic.gdx.Application.ApplicationType;
 import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.InputProcessor;
 import com.badlogic.gdx.Preferences;
-import com.badlogic.gdx.Application.ApplicationType;
-import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.g2d.Sprite;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;

File: demos/superjumper/superjumper-android/src/com/badlogicgames/superjumper/SuperJumperAndroid.java
Patch:
@@ -25,6 +25,6 @@ public class SuperJumperAndroid extends AndroidApplication {
 	@Override
 	public void onCreate (Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
-		initialize(new SuperJumper(), false);
+		initialize(new SuperJumper());
 	}
 }

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/GameScreen.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.badlogicgames.superjumper;
 
+import com.badlogic.gdx.Application.ApplicationType;
 import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Application.ApplicationType;
 import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
@@ -192,7 +192,7 @@ private void updateGameOver () {
 
 	public void draw () {
 		GLCommon gl = Gdx.gl;
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		renderer.render();
 

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
@@ -63,7 +63,7 @@ public void update () {
 
 	public void draw () {
 		GLCommon gl = Gdx.gl;
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
 		batcher.setProjectionMatrix(guiCam.combined);
@@ -77,7 +77,7 @@ public void draw () {
 		batcher.draw(Assets.arrow, 320, 0, -64, 64);
 		batcher.end();
 
-		gl.glDisable(GL10.GL_BLEND);
+		gl.glDisable(GL20.GL_BLEND);
 	}
 
 	@Override

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen2.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
@@ -63,7 +63,7 @@ public void update () {
 
 	public void draw () {
 		GLCommon gl = Gdx.gl;
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
 		batcher.setProjectionMatrix(guiCam.combined);
@@ -77,7 +77,7 @@ public void draw () {
 		batcher.draw(Assets.arrow, 320, 0, -64, 64);
 		batcher.end();
 
-		gl.glDisable(GL10.GL_BLEND);
+		gl.glDisable(GL20.GL_BLEND);
 	}
 
 	@Override

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen3.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
@@ -63,7 +63,7 @@ public void update () {
 
 	public void draw () {
 		GLCommon gl = Gdx.gl;
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
 		batcher.setProjectionMatrix(guiCam.combined);
@@ -77,7 +77,7 @@ public void draw () {
 		batcher.draw(Assets.arrow, 320, 0, -64, 64);
 		batcher.end();
 
-		gl.glDisable(GL10.GL_BLEND);
+		gl.glDisable(GL20.GL_BLEND);
 	}
 
 	@Override

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen4.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
@@ -63,7 +63,7 @@ public void update () {
 
 	public void draw () {
 		GLCommon gl = Gdx.gl;
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
 		batcher.setProjectionMatrix(guiCam.combined);
@@ -77,7 +77,7 @@ public void draw () {
 		batcher.draw(Assets.arrow, 320, 0, -64, 64);
 		batcher.end();
 
-		gl.glDisable(GL10.GL_BLEND);
+		gl.glDisable(GL20.GL_BLEND);
 	}
 
 	@Override

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen5.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
@@ -63,7 +63,7 @@ public void update () {
 
 	public void draw () {
 		GLCommon gl = Gdx.gl;
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
 		batcher.setProjectionMatrix(guiCam.combined);
@@ -77,7 +77,7 @@ public void draw () {
 		batcher.draw(Assets.arrow, 320, 0, -64, 64);
 		batcher.end();
 
-		gl.glDisable(GL10.GL_BLEND);
+		gl.glDisable(GL20.GL_BLEND);
 	}
 
 	@Override

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HighscoresScreen.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
@@ -66,7 +66,7 @@ public void update () {
 
 	public void draw () {
 		GLCommon gl = Gdx.gl;
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
 		batcher.setProjectionMatrix(guiCam.combined);

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/MainMenuScreen.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
@@ -86,7 +86,7 @@ public void update () {
 	public void draw () {
 		GLCommon gl = Gdx.gl;
 		gl.glClearColor(1, 0, 0, 1);
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 		batcher.setProjectionMatrix(guiCam.combined);
 

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/SuperJumperDesktop.java
Patch:
@@ -20,6 +20,6 @@
 
 public class SuperJumperDesktop {
 	public static void main (String[] argv) {
-		new LwjglApplication(new SuperJumper(), "Super Jumper", 320, 480, false);
+		new LwjglApplication(new SuperJumper(), "Super Jumper", 320, 480);
 	}
 }

File: demos/vector-pinball/gdx-vectorpinball-android/src/com/dozingcatsoftware/bouncy/BouncyAndroid.java
Patch:
@@ -10,6 +10,6 @@ public class BouncyAndroid extends AndroidApplication {
 	@Override
 	public void onCreate (Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
-		initialize(new Bouncy(), false);
+		initialize(new Bouncy());
 	}
 }

File: demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/Bouncy.java
Patch:
@@ -4,7 +4,7 @@
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputAdapter;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.math.WindowedMean;
@@ -42,7 +42,7 @@ public void render () {
 		field.tick((long)(Gdx.graphics.getDeltaTime() * 3000), 4);
 		physicsMean.addValue((TimeUtils.nanoTime() - startPhysics) / 1000000000.0f);
 
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		cam.viewportWidth = field.getWidth();
 		cam.viewportHeight = field.getHeight();
 		cam.position.set(field.getWidth() / 2, field.getHeight() / 2, 0);

File: demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/BouncyDesktop.java
Patch:
@@ -5,6 +5,6 @@
 
 public class BouncyDesktop {
 	public static void main (String[] argv) {
-		new LwjglApplication(new Bouncy(), "Bouncy", 320, 480, true);
+		new LwjglApplication(new Bouncy(), "Bouncy", 320, 480);
 	}
 }

File: demos/very-angry-robots/very-angry-robots-android/src/com/badlydrawngames/veryangryrobots/android/VeryAngryRobotsActivity.java
Patch:
@@ -15,7 +15,6 @@ public void onCreate (Bundle savedInstanceState) {
 		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
 		config.useCompass = false;
 		config.useAccelerometer = false;
-		config.useGL20 = false;
 		VeryAngryRobotsGame game = new VeryAngryRobotsGame();
 		initialize(game, config);
 	}

File: demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/veryangryrobots/DesktopStarter.java
Patch:
@@ -21,6 +21,6 @@ public class DesktopStarter {
 	private final static int WINDOW_HEIGHT = 480;
 
 	public static void main (String[] args) {
-		new LwjglApplication(new VeryAngryRobotsGame(), "Very Angry Robots", WINDOW_WIDTH, WINDOW_HEIGHT, false);
+		new LwjglApplication(new VeryAngryRobotsGame(), "Very Angry Robots", WINDOW_WIDTH, WINDOW_HEIGHT);
 	}
 }

File: demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/veryangryrobots/WorldPresenter.java
Patch:
@@ -15,8 +15,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
-import com.badlogic.gdx.graphics.GL10;
-
+import com.badlogic.gdx.graphics.GL20;
 import com.badlydrawngames.general.GameScreen;
 import com.badlydrawngames.veryangryrobots.WorldView.Presenter;
 import com.badlydrawngames.veryangryrobots.mobiles.Player;
@@ -111,7 +110,7 @@ public void render (float delta) {
 
 		// Clear the screen and draw the views.
 		Gdx.gl.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		worldView.render(delta);
 		statusView.render(delta);
 

File: extensions/gdx-remote/src/com/badlogic/gdx/remote/UxAndroid.java
Patch:
@@ -106,6 +106,6 @@ public void pause () {
 			public void dispose () {
 
 			}
-		}, false);
+		});
 	}
 }

File: extensions/gdx-tiled-preprocessor/src/com/badlogic/gdx/tiledmappacker/TiledMapPacker.java
Patch:
@@ -502,7 +502,6 @@ public static void main (String[] args) {
 		config.forceExit = false;
 		config.width = 100;
 		config.height = 50;
-		config.useGL20 = true;
 		config.title = "TiledMapPacker";
 		new LwjglApplication(new ApplicationListener() {
 

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/Hiero.java
Patch:
@@ -169,7 +169,7 @@ public Hiero () {
 		initialize();
 		splash.close();
 
-		gamePanel.add(new LwjglCanvas(new Renderer(), false).getCanvas());
+		gamePanel.add(new LwjglCanvas(new Renderer()).getCanvas());
 
 		prefs = Preferences.userNodeForPackage(Hiero.class);
 		java.awt.Color backgroundColor = EffectUtil.fromString(prefs.get("background", "000000"));

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/Hiero4.java
Patch:
@@ -165,7 +165,7 @@ public Hiero4 () {
 		initialize();
 		splash.close();
 
-		gamePanel.add(new LwjglCanvas(renderer = new Renderer(), false).getCanvas());
+		gamePanel.add(new LwjglCanvas(renderer = new Renderer()).getCanvas());
 
 		prefs = Preferences.userNodeForPackage(Hiero4.class);
 		java.awt.Color backgroundColor = EffectUtil.fromString(prefs.get("background", "000000"));

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePackerTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
 import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
 import com.badlogic.gdx.math.Matrix4;
@@ -40,7 +40,7 @@ public void create () {
 	}
 
 	public void render () {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		Settings settings = new Settings();
 		settings.fast = false;
@@ -107,6 +107,6 @@ public void resize (int width, int height) {
 	}
 
 	public static void main (String[] args) throws Exception {
-		new LwjglApplication(new TexturePackerTest(), "", 640, 480, false);
+		new LwjglApplication(new TexturePackerTest(), "", 640, 480);
 	}
 }
\ No newline at end of file

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/Daydream.java
Patch:
@@ -32,7 +32,6 @@ public void onAttachedToWindow() {
 		Log.i("Andrew", "hi");
 
 		AndroidApplicationConfiguration cfg = new AndroidApplicationConfiguration();
-		cfg.useGL20 = true;
 
 		setInteractive(false);
 

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/GdxTestActivity.java
Patch:
@@ -33,7 +33,6 @@ public void onCreate (Bundle bundle) {
 
 		GdxTest test = GdxTests.newTest(testName);
 		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
-		config.useGL20 = test.needsGL20();
 		config.useImmersiveMode = true;
 		initialize(test, config);
 	}

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/WindowedTest.java
Patch:
@@ -44,7 +44,7 @@ public void onCreate (Bundle bundle) {
 		Button b2 = new Button(this);
 		b2.setText("New Window");
 		b2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
-		View view = initializeForView(this, false);
+		View view = initializeForView(this);
 
 		LinearLayout layout = new LinearLayout(this);
 		layout.setOrientation(LinearLayout.VERTICAL);
@@ -89,8 +89,8 @@ public void create () {
 
 	@Override
 	public void render () {
-		Gdx.graphics.getGL10().glClearColor(color.r, color.g, color.g, color.a);
-		Gdx.graphics.getGL10().glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClearColor(color.r, color.g, color.g, color.a);
+		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 
 	}
 

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/BasicBulletTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 import com.badlogic.gdx.graphics.g3d.Environment;
@@ -153,7 +153,7 @@ public void create () {
 	@Override
 	public void render () {
 		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
 		
 		fpsCounter.put(Gdx.graphics.getFramesPerSecond());
 		

File: tests/gdx-tests-jglfw/src/com/badlogic/gdx/jglfw/tests/JglfwDebugStarter.java
Patch:
@@ -35,7 +35,6 @@ public static void main (String[] argv) {
 		GdxTest test = new SuperKoalio();
 		JglfwApplicationConfiguration config = new JglfwApplicationConfiguration();
 		config.vSync = true;
-		config.useGL20 = test.needsGL20();
 		new JglfwApplication(test, config);
 	}
 }
\ No newline at end of file

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglAppletTest.java
Patch:
@@ -17,10 +17,10 @@
 package com.badlogic.gdx.tests.lwjgl;
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplet;
-import com.badlogic.gdx.tests.Pong;
+import com.badlogic.gdx.tests.AnimationTest;
 
 public class LwjglAppletTest extends LwjglApplet {
 	public LwjglAppletTest () {
-		super(new Pong(), false);
+		super(new AnimationTest(), false);
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglTestStarter.java
Patch:
@@ -69,7 +69,6 @@ public static boolean runTest (String testName) {
 		config.width = 640;
 		config.height = 480;
 		config.title = testName;
-		config.useGL20 = test.needsGL20();
 		config.forceExit = false;
 		new LwjglApplication(test, config);
 		return true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AtlasIssueTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.Sprite;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
@@ -41,7 +41,7 @@ public void create () {
 	}
 
 	public void render () {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
 		sprite.draw(batch);
 		font.draw(batch, "fps:" + Gdx.graphics.getFramesPerSecond(), 26, 65);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ContainerTest.java
Patch:
@@ -2,7 +2,7 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
 import com.badlogic.gdx.scenes.scene2d.Stage;
@@ -78,7 +78,7 @@ Table label (String text) {
 	@Override
 	public void render () {
 		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act();
 		stage.draw();
 		Table.drawDebug(stage);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GamepadTest.java
Patch:
@@ -21,8 +21,7 @@
 import com.badlogic.gdx.controllers.ControllerListener;
 import com.badlogic.gdx.controllers.Controllers;
 import com.badlogic.gdx.controllers.PovDirection;
-import com.badlogic.gdx.controllers.mappings.Ouya;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.scenes.scene2d.InputEvent;
 import com.badlogic.gdx.scenes.scene2d.Stage;
@@ -170,7 +169,7 @@ public void resize (int width, int height) {
 
 	@Override
 	public void render () {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act(Gdx.graphics.getDeltaTime());
 		stage.draw();
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GroupCullingTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.g2d.Batch;
 import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.scenes.scene2d.ui.Label;
@@ -73,7 +73,7 @@ public void resize (int width, int height) {
 	}
 
 	public void render () {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		drawn = 0;
 		stage.act(Gdx.graphics.getDeltaTime());
 		stage.draw();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GroupTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.Batch;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
@@ -77,7 +77,7 @@ public void render () {
 		group1.setScale(1.3f);
 
 		Gdx.gl.glClearColor(0, 0, 0, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.draw();
 
 		renderer.setProjectionMatrix(batch.getProjectionMatrix());

File: tests/gdx-tests/src/com/badlogic/gdx/tests/HexagonalTiledMapTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
@@ -79,7 +79,7 @@ public void create() {
 		@Override
 		public void render() {
 			Gdx.gl.glClearColor(0.25f, 0.25f, 0.25f, 1f);
-			Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+			Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 			camera.update();
 			renderer.setView(camera);
 			renderer.render();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MultitouchTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Peripheral;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
 import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
@@ -36,7 +36,7 @@ public class MultitouchTest extends GdxTest {
 
 	@Override
 	public void render () {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		camera.update();
 		renderer.setProjectionMatrix(camera.combined);
 		renderer.begin(ShapeType.Filled);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ParticleEmitterTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.InputProcessor;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.g2d.ParticleEffect;
 import com.badlogic.gdx.graphics.g2d.ParticleEmitter;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
@@ -130,7 +130,7 @@ public void dispose () {
 	public void render () {
 		spriteBatch.getProjectionMatrix().setToOrtho2D(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		float delta = Gdx.graphics.getDeltaTime();
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		spriteBatch.begin();
 		effect.draw(spriteBatch, delta);
 		spriteBatch.end();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PixmapBlendingTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputProcessor;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.Sprite;
@@ -64,7 +64,7 @@ public void create () {
 	public void render () {
 
 		Gdx.gl.glClearColor(0, 1, 0, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		spriteBatch.begin();
 		logoSprite.draw(spriteBatch);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PixmapPackerTest.java
Patch:
@@ -17,15 +17,12 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.graphics.Pixmap.Format;
-import com.badlogic.gdx.graphics.PixmapIO;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.g2d.PixmapPacker;
-import com.badlogic.gdx.graphics.g2d.PixmapPacker.Page;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas;
 import com.badlogic.gdx.tests.utils.GdxTest;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPaneTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.InputEvent;
 import com.badlogic.gdx.scenes.scene2d.InputListener;
@@ -120,7 +120,7 @@ public void changed (ChangeEvent event, Actor actor) {
 	}
 
 	public void render () {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act(Gdx.graphics.getDeltaTime());
 		stage.draw();
 		Table.drawDebug(stage);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoftKeyboardTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputAdapter;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -62,7 +62,7 @@ public boolean keyTyped (char character) {
 
 	@Override
 	public void render () {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
 		font.drawMultiLine(batch, textBuffer, 0, Gdx.graphics.getHeight() - 20);
 		batch.end();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SortedSpriteTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Comparator;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.Sprite;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
@@ -116,7 +116,7 @@ public void create () {
 	@Override
 	public void render () {
 		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		// sort the sprites (not necessary if we know
 		// the are already sorted).

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteBatchOriginScaleTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
@@ -43,7 +43,7 @@ public void create () {
 	@Override
 	public void render () {
 		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		renderer.begin(ShapeType.Line);
 		renderer.setColor(1, 1, 1, 1);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteCacheOffsetTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputProcessor;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.Sprite;
 import com.badlogic.gdx.graphics.g2d.SpriteCache;
@@ -49,7 +49,7 @@ public void create () {
 	}
 
 	public void render () {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		cache.begin();
 		for (int y = 1; y < tileMapHeight - 1; y++)
 			cache.draw(y, 1, tileMapWidth - 2);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteCacheTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.InputProcessor;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.Texture;
@@ -54,7 +54,7 @@ public void render () {
 
 	private void renderNormal () {
 		Gdx.gl.glClearColor(0.7f, 0.7f, 0.7f, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		float begin = 0;
 		float end = 0;
@@ -83,7 +83,7 @@ private void renderNormal () {
 
 	private void renderSprites () {
 		Gdx.gl.glClearColor(0.7f, 0.7f, 0.7f, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		float begin = 0;
 		float end = 0;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StageTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputProcessor;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
@@ -153,7 +153,7 @@ private void fillGroup (Group group, Texture texture) {
 	public void render () {
 		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		if (Gdx.input.isTouched()) {
 			stage.screenToStageCoordinates(stageCoords.set(Gdx.input.getX(), Gdx.input.getY()));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TableTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.Batch;
 import com.badlogic.gdx.graphics.g2d.NinePatch;
@@ -101,7 +101,7 @@ public void clicked (InputEvent event, float x, float y) {
 	@Override
 	public void render () {
 		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		stage.act(Math.min(Gdx.graphics.getDeltaTime(), 1 / 30f));
 		stage.draw();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextAreaTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
@@ -55,10 +55,9 @@ public void create () {
 	@Override
 	public void render () {
 		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.draw();
 		Gdx.app.log("X", "FPS: " + Gdx.graphics.getFramesPerSecond());
-		Gdx.app.log("X", "GL20: " + Gdx.graphics.isGL20Available());
 		SpriteBatch spriteBatch = (SpriteBatch)stage.getSpriteBatch();
 		Gdx.app.log("X", "render calls: " + spriteBatch.totalRenderCalls);
 		spriteBatch.totalRenderCalls = 0;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextButtonTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.scenes.scene2d.Stage;
@@ -47,10 +47,9 @@ public void create () {
 	@Override
 	public void render () {
 		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.draw();
 		Gdx.app.log("X", "FPS: " + Gdx.graphics.getFramesPerSecond());
-		Gdx.app.log("X", "GL20: " + Gdx.graphics.isGL20Available());
 		SpriteBatch spriteBatch = (SpriteBatch)stage.getSpriteBatch();
 		Gdx.app.log("X", "render calls: " + spriteBatch.totalRenderCalls);
 		spriteBatch.totalRenderCalls = 0;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureAtlasTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.InputAdapter;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.g2d.Animation;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.Sprite;
@@ -84,7 +84,7 @@ public boolean keyUp (int keycode) {
 
 	public void render () {
 		time += Gdx.graphics.getDeltaTime();
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		batch.begin();
 		// badlogic.draw(batch);
 		// star.draw(batch);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UISimpleTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.Texture;
@@ -94,7 +94,7 @@ public void changed (ChangeEvent event, Actor actor) {
 	@Override
 	public void render () {
 		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		stage.act(Math.min(Gdx.graphics.getDeltaTime(), 1 / 30f));
 		stage.draw();
 		Table.drawDebug(stage);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/YDownTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.Batch;
@@ -93,7 +93,7 @@ public void resize (int width, int height) {
 	public void render () {
 		// clear the screen, update the camera and make the sprite batch
 		// use its matrices.
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		camera.update();
 		batch.setProjectionMatrix(camera.combined);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/Box2DTest.java
Patch:
@@ -31,7 +31,7 @@
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputProcessor;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
@@ -87,7 +87,7 @@ public void render () {
 
 		startTime = TimeUtils.nanoTime();
 		// clear the screen and setup the projection matrix
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		camera.update();
 
 		// render the world using the debug renderer

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.g3d.Model;
 import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/FrustumCullingTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
@@ -113,7 +113,7 @@ public static Model createFrustumModel(final Vector3... p) {
 				p[4].x, p[4].y, p[4].z, 0, 0, -1, p[5].x, p[5].y, p[5].z, 0, 0, -1, p[6].x, p[6].y, p[6].z, 0, 0, -1, p[7].x, p[7].y, p[7].z, 0, 0, -1},// far
 				new VertexAttribute[] { new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(Usage.Normal, 3, "a_normal")},
 				new short[] {0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7},
-				GL10.GL_LINES, new Material(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE)));
+				GL20.GL_LINES, new Material(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE)));
 	}
 	
 	private float angleX, angleY, angleZ;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/examples/MoveSpriteExample.java
Patch:
@@ -17,7 +17,7 @@
 package com.badlogic.gdx.tests.examples;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
@@ -54,7 +54,7 @@ public void create () {
 	public void render () {
 		// set the clear color and clear the screen.
 		Gdx.gl.glClearColor(1, 1, 1, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		// draw the sprite
 		batch.begin();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/InternationalFontsTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.badlogic.gdx.tests.extensions;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
@@ -75,7 +75,7 @@ public void create () {
 
 	@Override
 	public void render () {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		batch.setProjectionMatrix(cam.combined);
 		batch.begin();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtBinaryTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class GwtBinaryTest extends GdxTest {
@@ -44,6 +44,6 @@ public void create () {
 	@Override
 	public void render () {
 		Gdx.gl.glClearColor(1, 0, 0, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/net/NetAPITest.java
Patch:
@@ -22,7 +22,7 @@
 import com.badlogic.gdx.Net.HttpResponse;
 import com.badlogic.gdx.Net.HttpResponseListener;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
@@ -229,7 +229,7 @@ public void failed (Throwable t) {
 	@Override
 	public void render () {
 		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 
 		if (texture != null) {
 			batch.begin();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/superkoalio/SuperKoalio.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.Animation;
@@ -122,7 +122,7 @@ public void create () {
 	public void render () {
 		// clear the screen
 		Gdx.gl.glClearColor(0.7f, 0.7f, 1.0f, 1);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
 		
 		// get the delta time
 		float deltaTime = Gdx.graphics.getDeltaTime();

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTCanvas.java
Patch:
@@ -102,7 +102,7 @@ public void paintGL () {
 			throw new GdxRuntimeException(ex);
 		}
 
-		graphics = new LwjglGraphics(canvas, useGL2) {
+		graphics = new LwjglGraphics(canvas) {
 			public void setTitle (String title) {
 				super.setTitle(title);
 				LwjglAWTCanvas.this.setTitle(title);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplet.java
Patch:
@@ -30,8 +30,8 @@ public class LwjglApplet extends Applet {
 
 	class LwjglAppletApplication extends LwjglApplication {
 
-		public LwjglAppletApplication (ApplicationListener listener, boolean useGL2, Canvas canvas) {
-			super(listener, useGL2, canvas);
+		public LwjglAppletApplication (ApplicationListener listener, Canvas canvas) {
+			super(listener, canvas);
 		}
 
 		public LwjglAppletApplication (ApplicationListener listener, Canvas canvas, LwjglApplicationConfiguration config) {
@@ -69,7 +69,7 @@ public LwjglApplet (final ApplicationListener listener, final boolean useGL2) {
 		canvas = new Canvas() {
 			public final void addNotify () {
 				super.addNotify();
-				app = new LwjglAppletApplication(listener, useGL2, canvas);
+				app = new LwjglAppletApplication(listener, canvas);
 			}
 
 			public final void removeNotify () {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -62,9 +62,8 @@ public class LwjglCanvas implements Application {
 	int logLevel = LOG_INFO;
 	Cursor cursor;
 
-	public LwjglCanvas (ApplicationListener listener, boolean useGL2) {
+	public LwjglCanvas (ApplicationListener listener) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
-		config.useGL20 = useGL2;
 		initialize(listener, config);
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglFrame.java
Patch:
@@ -28,13 +28,12 @@
 public class LwjglFrame extends JFrame {
 	LwjglCanvas lwjglCanvas;
 
-	public LwjglFrame (ApplicationListener listener, String title, int width, int height, boolean useGL2) {
+	public LwjglFrame (ApplicationListener listener, String title, int width, int height) {
 		super(title);
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.title = title;
 		config.width = width;
 		config.height = height;
-		config.useGL20 = useGL2;
 		construct(listener, config);
 	}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.utils.GdxRuntimeException;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java
Patch:
@@ -116,12 +116,10 @@ private void renderBodies (World world) {
 		}
 		renderer.end();
 
-		if (Gdx.gl10 != null) Gdx.gl10.glPointSize(3);
 		renderer.begin(ShapeType.Point);
 		for (Contact contact : world.getContactList())
 			drawContact(contact);
 		renderer.end();
-		if (Gdx.gl10 != null) Gdx.gl10.glPointSize(1);
 	}
 
 	protected void renderBody (Body body) {

File: extensions/gdx-bullet/jni/swig-src/collision/com/badlogic/gdx/physics/bullet/collision/btIndexedMesh.java
Patch:
@@ -8,12 +8,11 @@
 
 package com.badlogic.gdx.physics.bullet.collision;
 
-import com.badlogic.gdx.physics.bullet.BulletBase;
-import com.badlogic.gdx.physics.bullet.linearmath.*;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 import com.badlogic.gdx.graphics.g3d.model.MeshPart;
+import com.badlogic.gdx.physics.bullet.BulletBase;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
@@ -128,7 +127,7 @@ public void set(final Mesh mesh) {
 	 * The specified mesh must be indexed and triangulated and must outlive this btIndexedMesh.
 	 * The buffers for the vertices and indices are shared amonst both. */
 	public void set(final MeshPart meshPart) {
-		if (meshPart.primitiveType != com.badlogic.gdx.graphics.GL10.GL_TRIANGLES)
+		if (meshPart.primitiveType != com.badlogic.gdx.graphics.GL20.GL_TRIANGLES)
 			throw new com.badlogic.gdx.utils.GdxRuntimeException("Mesh must be indexed and triangulated");
 		set(meshPart.mesh, meshPart.indexOffset, meshPart.numVertices);
 		this.meshPart = meshPart;

File: gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java
Patch:
@@ -23,11 +23,9 @@
 import com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter;
 import com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider;
 import com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder;
-import com.badlogic.gdx.graphics.g3d.utils.GLES10ShaderProvider;
 import com.badlogic.gdx.graphics.g3d.utils.RenderContext;
 import com.badlogic.gdx.graphics.g3d.utils.RenderableSorter;
 import com.badlogic.gdx.graphics.g3d.utils.ShaderProvider;
-import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
@@ -91,7 +89,7 @@ public ModelBatch(final RenderContext context, final ShaderProvider shaderProvid
 			? new RenderContext(new DefaultTextureBinder(DefaultTextureBinder.WEIGHTED, 1))
 			: context;
 		this.shaderProvider = (shaderProvider == null)
-			? (Gdx.graphics.isGL20Available() ? new DefaultShaderProvider() : new GLES10ShaderProvider()) 
+			? new DefaultShaderProvider() 
 			: shaderProvider;
 	}
 	

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureDescriptor.java
Patch:
@@ -16,9 +16,8 @@
 
 package com.badlogic.gdx.graphics.g3d.utils;
 
-import com.badlogic.gdx.graphics.GLTexture;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.GLTexture;
+import com.badlogic.gdx.graphics.Texture;
 
 public class TextureDescriptor<T extends GLTexture> {
 	public T texture = null;

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1TextureData.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.graphics.Pixmap.Format;
@@ -74,7 +73,7 @@ public void prepare () {
 	public void consumeCompressedData (int target) {
 		if (!isPrepared) throw new GdxRuntimeException("Call prepare() before calling consumeCompressedData()");
 
-		if (!Gdx.graphics.supportsExtension("GL_OES_compressed_ETC1_RGB8_texture") || Gdx.graphics.isGL20Available() == false) {
+		if (!Gdx.graphics.supportsExtension("GL_OES_compressed_ETC1_RGB8_texture")) {
 			Pixmap pixmap = ETC1.decodeImage(data, Format.RGB565);
 			Gdx.gl.glTexImage2D(target, 0, pixmap.getGLInternalFormat(), pixmap.getWidth(), pixmap.getHeight(), 0,
 				pixmap.getGLFormat(), pixmap.getGLType(), pixmap.getPixels());

File: gdx/src/com/badlogic/gdx/graphics/glutils/FrameBuffer.java
Patch:
@@ -109,8 +109,6 @@ protected void setupTexture() {
 	}
 
 	private void build () {
-		if (!Gdx.graphics.isGL20Available()) throw new GdxRuntimeException("GL2 is required.");
-
 		GL20 gl = Gdx.graphics.getGL20();
 
 		// iOS uses a different framebuffer handle! (not necessarily 0)

File: gdx/src/com/badlogic/gdx/graphics/glutils/PixmapTextureData.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.badlogic.gdx.graphics.glutils;
 
-import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.TextureData;

File: gdx/src/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java
Patch:
@@ -107,12 +107,10 @@ private void renderBodies (World world) {
 		}
 		renderer.end();
 		if (drawContacts) {
-			if (Gdx.gl10 != null) Gdx.gl10.glPointSize(3);
 			renderer.begin(ShapeType.Point);
 			for (Contact contact : world.getContactList())
 				drawContact(contact);
 			renderer.end();
-			if (Gdx.gl10 != null) Gdx.gl10.glPointSize(1);
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ScissorStack.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Rectangle;
@@ -46,7 +46,7 @@ public static boolean pushScissors (Rectangle scissor) {
 
 		if (scissors.size == 0) {
 			if (scissor.width < 1 || scissor.height < 1) return false;
-			Gdx.gl.glEnable(GL10.GL_SCISSOR_TEST);
+			Gdx.gl.glEnable(GL20.GL_SCISSOR_TEST);
 		} else {
 			// merge scissors
 			Rectangle parent = scissors.get(scissors.size - 1);
@@ -73,7 +73,7 @@ public static boolean pushScissors (Rectangle scissor) {
 	public static Rectangle popScissors () {
 		Rectangle old = scissors.pop();
 		if (scissors.size == 0)
-			Gdx.gl.glDisable(GL10.GL_SCISSOR_TEST);
+			Gdx.gl.glDisable(GL20.GL_SCISSOR_TEST);
 		else {
 			Rectangle scissor = scissors.peek();
 			Gdx.gl.glScissor((int)scissor.x, (int)scissor.y, (int)scissor.width, (int)scissor.height);

File: gdx/src/com/badlogic/gdx/utils/GdxBuild.java
Patch:
@@ -33,9 +33,6 @@ public static void main (String[] args) throws Exception {
 		// generate C/C++ code
 		new NativeCodeGenerator().generate("src", "bin", JNI_DIR, new String[] {"**/*"}, null);
 		
-		// generate iOS GL ES 1.x bindings
-		new NativeCodeGenerator().generate("../backends/gdx-backend-robovm/src", "../backends/gdx-backend-robovm/bin", JNI_DIR + "/iosgl", new String[] {"**/IOSGLES10.java"}, null);
-		
 		String[] excludeCpp = { "android/**", "iosgl/**" };
 		
 		// generate build scripts, for win32 only

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/MaxRectsPacker.java
Patch:
@@ -132,6 +132,8 @@ private Page packPage (Array<Rect> inputRects) {
 			// Rects don't fit on one page. Fill a whole page and return.
 			if (bestResult == null) bestResult = packAtSize(false, maxSize - edgePaddingX, maxSize - edgePaddingY, inputRects);
 			sort.sort(bestResult.outputRects, rectComparator);
+			bestResult.width = Math.max(bestResult.width, bestResult.height);
+			bestResult.height = Math.max(bestResult.width, bestResult.height);
 			return bestResult;
 		} else {
 			BinarySearch widthSearch = new BinarySearch(minWidth, settings.maxWidth, settings.fast ? 25 : 15, settings.pot);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
Patch:
@@ -76,6 +76,7 @@ public boolean touchDown (InputEvent event, float x, float y, int pointer, int b
 	}
 
 	void touchDown (float y) {
+		if (items.size == 0) return;
 		float height = getHeight();
 		if (style.background != null) {
 			height -= style.background.getTopHeight() + style.background.getBottomHeight();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -101,6 +101,7 @@ public class GdxTests {
 		ExitTest.class,
 		ExternalMusicTest.class,
 		FilesTest.class,
+		FastMathTest.class,
 		FilterPerformanceTest.class,
 		FloatTest.class,
 		FloatTextureTest.class,

File: gdx/src/com/badlogic/gdx/utils/IdentityMap.java
Patch:
@@ -627,7 +627,7 @@ public void remove () {
 			if (currentIndex < 0) throw new IllegalStateException("next must be called before remove.");
 			if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
-				nextIndex = currentIndex;
+				nextIndex = currentIndex - 1;
 				findNextIndex();
 			} else {
 				map.keyTable[currentIndex] = null;

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -677,7 +677,7 @@ public void remove () {
 				throw new IllegalStateException("next must be called before remove.");
 			} else if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
-				nextIndex = currentIndex;
+				nextIndex = currentIndex - 1;
 				findNextIndex();
 			} else {
 				map.keyTable[currentIndex] = EMPTY;

File: gdx/src/com/badlogic/gdx/utils/IntIntMap.java
Patch:
@@ -662,7 +662,7 @@ public void remove () {
 				throw new IllegalStateException("next must be called before remove.");
 			} else if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
-				nextIndex = currentIndex;
+				nextIndex = currentIndex - 1;
 				findNextIndex();
 			} else {
 				map.keyTable[currentIndex] = EMPTY;

File: gdx/src/com/badlogic/gdx/utils/IntMap.java
Patch:
@@ -686,7 +686,7 @@ public void remove () {
 				throw new IllegalStateException("next must be called before remove.");
 			} else if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
-				nextIndex = currentIndex;
+				nextIndex = currentIndex - 1;
 				findNextIndex();
 			} else {
 				map.keyTable[currentIndex] = EMPTY;

File: gdx/src/com/badlogic/gdx/utils/IntSet.java
Patch:
@@ -525,7 +525,7 @@ public void remove () {
 				throw new IllegalStateException("next must be called before remove.");
 			} else if (currentIndex >= set.capacity) {
 				set.removeStashIndex(currentIndex);
-				nextIndex = currentIndex;
+				nextIndex = currentIndex - 1;
 				findNextIndex();
 			} else {
 				set.keyTable[currentIndex] = EMPTY;

File: gdx/src/com/badlogic/gdx/utils/LongMap.java
Patch:
@@ -678,7 +678,7 @@ public void remove () {
 				throw new IllegalStateException("next must be called before remove.");
 			} else if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
-				nextIndex = currentIndex;
+				nextIndex = currentIndex - 1;
 				findNextIndex();
 			} else {
 				map.keyTable[currentIndex] = EMPTY;

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -611,7 +611,7 @@ public void remove () {
 			if (currentIndex < 0) throw new IllegalStateException("next must be called before remove.");
 			if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
-				nextIndex = currentIndex;
+				nextIndex = currentIndex - 1;
 				findNextIndex();
 			} else {
 				map.keyTable[currentIndex] = null;

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -611,7 +611,7 @@ public void remove () {
 			if (currentIndex < 0) throw new IllegalStateException("next must be called before remove.");
 			if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
-				nextIndex = currentIndex;
+				nextIndex = currentIndex - 1;
 				findNextIndex();
 			} else {
 				map.keyTable[currentIndex] = null;

File: gdx/src/com/badlogic/gdx/utils/ObjectMap.java
Patch:
@@ -643,7 +643,7 @@ public void remove () {
 			if (currentIndex < 0) throw new IllegalStateException("next must be called before remove.");
 			if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
-				nextIndex = currentIndex;
+				nextIndex = currentIndex - 1;
 				advance();
 			} else {
 				map.keyTable[currentIndex] = null;

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -484,7 +484,7 @@ public void remove () {
 			if (currentIndex < 0) throw new IllegalStateException("next must be called before remove.");
 			if (currentIndex >= set.capacity) {
 				set.removeStashIndex(currentIndex);
-				nextIndex = currentIndex;
+				nextIndex = currentIndex - 1;
 				findNextIndex();
 			} else {
 				set.keyTable[currentIndex] = null;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
Patch:
@@ -63,7 +63,6 @@ public List (ListStyle style) {
 		selection.setRequired(true);
 
 		setStyle(style);
-		setItems(new Array(0));
 		setSize(getPrefWidth(), getPrefHeight());
 
 		addListener(new InputListener() {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/Selection.java
Patch:
@@ -89,7 +89,7 @@ void cleanup () {
 		old.clear(32);
 	}
 
-	/** Sets the selection to only the item if found, else clears the selection. */
+	/** Sets the selection to only the specified item. */
 	public void set (T item) {
 		if (selected.size == 1 && selected.first() == item) return;
 		snapshot();

File: gdx/src/com/badlogic/gdx/utils/JsonValue.java
Patch:
@@ -28,8 +28,8 @@
  * many children.<br>
  * 
  * <pre>
- * JsonValue map = ...;
- * for (JsonValue entry = map.child; entry != null; entry = entry.next)
+ * JsonValue map = ...;
+ * for (JsonValue entry = map.child; entry != null; entry = entry.next)
  * 	System.out.println(entry.name + " = " + entry.asString());
  * </pre>
  * @author Nathan Sweet */
@@ -305,7 +305,7 @@ public String[] asStringArray () {
 		int i = 0;
 		for (JsonValue value = child; value != null; value = value.next, i++) {
 			String v;
-			switch (type) {
+			switch (value.type) {
 			case stringValue:
 				v = value.stringValue;
 				break;

File: gdx/src/com/badlogic/gdx/utils/IntSet.java
Patch:
@@ -376,7 +376,7 @@ private boolean containsKeyStash (int key) {
 	public int first () {
 		if (hasZeroValue) return 0;
 		int[] keyTable = this.keyTable;
-		for (int i = 0, n = capacity + stashSize; i < n;)
+		for (int i = 0, n = capacity + stashSize; i < n; i++)
 			if (keyTable[i] != EMPTY) return keyTable[i];
 		throw new IllegalStateException("IntSet is empty.");
 	}

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -355,7 +355,7 @@ private boolean containsKeyStash (T key) {
 
 	public T first () {
 		T[] keyTable = this.keyTable;
-		for (int i = 0, n = capacity + stashSize; i < n;)
+		for (int i = 0, n = capacity + stashSize; i < n; i++)
 			if (keyTable[i] != null) return keyTable[i];
 		throw new IllegalStateException("IntSet is empty.");
 	}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtInput.java
Patch:
@@ -524,7 +524,7 @@ private void handleEvent (NativeEvent e) {
 			e.preventDefault();
 		}
 		if (e.getType().equals("keydown") && hasFocus) {
-			System.out.println("keydown");
+			//System.out.println("keydown");
 			int code = keyForCode(e.getKeyCode());
 			if (code == 67) {
 				e.preventDefault();
@@ -539,13 +539,13 @@ private void handleEvent (NativeEvent e) {
 		}
 
 		if (e.getType().equals("keypress") && hasFocus) {
-			System.out.println("keypress");
+			//System.out.println("keypress");
 			char c = (char)e.getCharCode();
 			if (processor != null) processor.keyTyped(c);
 		}
 
 		if (e.getType().equals("keyup") && hasFocus) {
-			System.out.println("keyup");
+			//System.out.println("keyup");
 			int code = keyForCode(e.getKeyCode());
 			this.pressedKeys.remove(code);
 			if (processor != null) processor.keyUp(code);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -107,6 +107,7 @@ public void initialize (ApplicationListener listener, AndroidApplicationConfigur
 			: config.resolutionStrategy);
 		input = AndroidInputFactory.newAndroidInput(this, this, graphics.view, config);
 		audio = new AndroidAudio(this, config);
+		this.getFilesDir(); // workaround for Android bug #10515463
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 		net = new AndroidNet(this);
 		this.listener = listener;
@@ -241,6 +242,7 @@ public View initializeForView (ApplicationListener listener, AndroidApplicationC
 			: config.resolutionStrategy);
 		input = AndroidInputFactory.newAndroidInput(this, this, graphics.view, config);
 		audio = new AndroidAudio(this, config);
+		this.getFilesDir(); // workaround for Android bug #10515463
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 		net = new AndroidNet(this);
 		this.listener = listener;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidDaydream.java
Patch:
@@ -103,6 +103,7 @@ public void initialize (ApplicationListener listener, AndroidApplicationConfigur
 			: config.resolutionStrategy);
 		input = AndroidInputFactory.newAndroidInput(this, this, graphics.view, config);
 		audio = new AndroidAudio(this, config);
+		this.getFilesDir(); // workaround for Android bug #10515463
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 		net = new AndroidNet(null);
 		this.listener = listener;
@@ -184,6 +185,7 @@ public View initializeForView (ApplicationListener listener, AndroidApplicationC
 			: config.resolutionStrategy);
 		input = AndroidInputFactory.newAndroidInput(this, this, graphics.view, config);
 		audio = new AndroidAudio(this, config);
+		this.getFilesDir(); // workaround for Android bug #10515463
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 		net = new AndroidNet(null);
 		this.listener = listener;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaper.java
Patch:
@@ -91,13 +91,14 @@ public void initialize (ApplicationListener listener, AndroidApplicationConfigur
 			: config.resolutionStrategy);
 
 		// factory in use, but note: AndroidInputFactory causes exceptions when obfuscated: java.lang.RuntimeException: Couldn't
-// construct AndroidInput, this should never happen, proguard deletes constructor used only by reflection
+		// construct AndroidInput, this should never happen, proguard deletes constructor used only by reflection
 		input = AndroidInputFactory.newAndroidInput(this, this.getService(), graphics.view, config);
 		// input = new AndroidInput(this, this.getService(), null, config);
 
 		audio = new AndroidAudio(this.getService(), config);
 
 		// added initialization of android local storage: /data/data/<app package>/files/
+		this.getService().getFilesDir(); // workaround for Android bug #10515463
 		files = new AndroidFiles(this.getService().getAssets(), this.getService().getFilesDir().getAbsolutePath());
 
 		this.listener = listener;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/Preloader.java
Patch:
@@ -123,7 +123,7 @@ public void onFailure () {
 			@Override
 			public void onSuccess (String result) {
 				String[] lines = result.split("\n");
-				Array<Asset> assets = new Array<Asset>();
+				Array<Asset> assets = new Array<Asset>(lines.length);
 				for (String line : lines) {
 					String[] tokens = line.split(":");
 					if (tokens.length != 4) {

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/IReflectionCache.java
Patch:
@@ -20,8 +20,6 @@
 
 public interface IReflectionCache {
 	// Class level methods
-	public Collection<Type> getKnownTypes ();
-
 	public Type forName (String name);
 
 	public Object newArray (Type componentType, int size);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -107,6 +107,7 @@ public void initialize (ApplicationListener listener, AndroidApplicationConfigur
 			: config.resolutionStrategy);
 		input = AndroidInputFactory.newAndroidInput(this, this, graphics.view, config);
 		audio = new AndroidAudio(this, config);
+		this.getFilesDir(); // workaround for Android bug #10515463
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 		net = new AndroidNet(this);
 		this.listener = listener;
@@ -241,6 +242,7 @@ public View initializeForView (ApplicationListener listener, AndroidApplicationC
 			: config.resolutionStrategy);
 		input = AndroidInputFactory.newAndroidInput(this, this, graphics.view, config);
 		audio = new AndroidAudio(this, config);
+		this.getFilesDir(); // workaround for Android bug #10515463
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 		net = new AndroidNet(this);
 		this.listener = listener;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidDaydream.java
Patch:
@@ -103,6 +103,7 @@ public void initialize (ApplicationListener listener, AndroidApplicationConfigur
 			: config.resolutionStrategy);
 		input = AndroidInputFactory.newAndroidInput(this, this, graphics.view, config);
 		audio = new AndroidAudio(this, config);
+		this.getFilesDir(); // workaround for Android bug #10515463
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 		net = new AndroidNet(null);
 		this.listener = listener;
@@ -184,6 +185,7 @@ public View initializeForView (ApplicationListener listener, AndroidApplicationC
 			: config.resolutionStrategy);
 		input = AndroidInputFactory.newAndroidInput(this, this, graphics.view, config);
 		audio = new AndroidAudio(this, config);
+		this.getFilesDir(); // workaround for Android bug #10515463
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 		net = new AndroidNet(null);
 		this.listener = listener;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaper.java
Patch:
@@ -91,13 +91,14 @@ public void initialize (ApplicationListener listener, AndroidApplicationConfigur
 			: config.resolutionStrategy);
 
 		// factory in use, but note: AndroidInputFactory causes exceptions when obfuscated: java.lang.RuntimeException: Couldn't
-// construct AndroidInput, this should never happen, proguard deletes constructor used only by reflection
+		// construct AndroidInput, this should never happen, proguard deletes constructor used only by reflection
 		input = AndroidInputFactory.newAndroidInput(this, this.getService(), graphics.view, config);
 		// input = new AndroidInput(this, this.getService(), null, config);
 
 		audio = new AndroidAudio(this.getService(), config);
 
 		// added initialization of android local storage: /data/data/<app package>/files/
+		this.getService().getFilesDir(); // workaround for Android bug #10515463
 		files = new AndroidFiles(this.getService().getAssets(), this.getService().getFilesDir().getAbsolutePath());
 
 		this.listener = listener;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/Preloader.java
Patch:
@@ -123,7 +123,7 @@ public void onFailure () {
 			@Override
 			public void onSuccess (String result) {
 				String[] lines = result.split("\n");
-				Array<Asset> assets = new Array<Asset>();
+				Array<Asset> assets = new Array<Asset>(lines.length);
 				for (String line : lines) {
 					String[] tokens = line.split(":");
 					if (tokens.length != 4) {

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/IReflectionCache.java
Patch:
@@ -20,8 +20,6 @@
 
 public interface IReflectionCache {
 	// Class level methods
-	public Collection<Type> getKnownTypes ();
-
 	public Type forName (String name);
 
 	public Object newArray (Type componentType, int size);

File: gdx/src/com/badlogic/gdx/graphics/Camera.java
Patch:
@@ -82,18 +82,19 @@ public void apply (GL10 gl) {
 	}
 
 	/** Recalculates the direction of the camera to look at the point (x, y, z).
+	 * This function assumes the up vector is normalized.
 	 * @param x the x-coordinate of the point to look at
 	 * @param y the x-coordinate of the point to look at
 	 * @param z the x-coordinate of the point to look at */
 	public void lookAt (float x, float y, float z) {
 		tmpVec.set(x,y,z).sub(position).nor();
 		if(!tmpVec.isZero()){
 			float dot = tmpVec.dot(up); //up and direction must ALWAYS be orthonormal vectors
-			if(dot == 1){ 
+			if(Math.abs(dot-1) < 0.000000001f){ 
 				//Collinear
 				up.set(direction).scl(-1);
 			}
-			else if(dot == -1){ 
+			else if(Math.abs(dot+1) < 0.000000001f){ 
 				//Collinear opposite
 				up.set(direction);
 			}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -206,7 +206,8 @@ else if (isOver() && style.over != null)
 			children.get(i).moveBy(-offsetX, -offsetY);
 	}
 
-	protected void drawBackground (Batch batch, float parentAlpha) {
+	protected void drawBackground (Batch batch, float parentAlpha, float x, float y) {
+		super.drawBackground(batch, parentAlpha, x, y);
 	}
 
 	public float getPrefWidth () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -79,6 +79,7 @@ public void draw (Batch batch, float parentAlpha) {
 			applyTransform(batch, computeTransform());
 			drawBackground(batch, parentAlpha, 0, 0);
 			if (clip) {
+				batch.flush();
 				boolean draw = background == null ? clipBegin(0, 0, getWidth(), getHeight()) : clipBegin(layout.getPadLeft(),
 					layout.getPadBottom(), getWidth() - layout.getPadLeft() - layout.getPadRight(),
 					getHeight() - layout.getPadBottom() - layout.getPadTop());

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -489,7 +489,7 @@ public void onDrawFrame (javax.microedition.khronos.opengles.GL10 gl) {
 		}
 
 		if (lresume) {
-			if (app instanceof AndroidFragmentApplication) {
+			if (app.isFragment()) {
 				((AndroidAudio)((AndroidApplicationBase)app).getAudio()).resume();
 			}
 			Array<LifecycleListener> listeners = ((AndroidApplicationBase)app).getLifecycleListeners();

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -482,7 +482,7 @@ public void removeLifecycleListener (LifecycleListener listener) {
 		synchronized (lifecycleListeners) {
 			lifecycleListeners.removeValue(listener, true);
 		}
-	}
+	}
 
 	@Override
 	public Context getContext () {
@@ -503,4 +503,4 @@ public Array<Runnable> getExecutedRunnables () {
 	public Array<LifecycleListener> getLifecycleListeners () {
 		return lifecycleListeners;
 	}
-}
+}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFragmentApplication.java
Patch:
@@ -91,7 +91,7 @@ public void onDetach () {
 	}
 
   protected FrameLayout.LayoutParams createLayoutParams () {
-      FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(android.view.ViewGroup.LayoutParams.FILL_PARENT, android.view.ViewGroup.LayoutParams.FILL_PARENT);
+      FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT, android.view.ViewGroup.LayoutParams.MATCH_PARENT);
       layoutParams.gravity = Gravity.CENTER;
       return layoutParams;
   }
@@ -247,7 +247,7 @@ public ApplicationType getType () {
 
   @Override
   public int getVersion () {
-      return Integer.parseInt(android.os.Build.VERSION.SDK);
+      return android.os.Build.VERSION.SDK_INT;
   }
 
   @Override

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
Patch:
@@ -167,7 +167,8 @@ public UIViewController getUIViewController(){
 	 * @return Or real display dimension. */
 	CGSize getBounds (UIViewController viewController) {
 		// or screen size (always portrait)
-		CGSize bounds = UIScreen.getMainScreen().getBounds().size();
+//		CGSize bounds = UIScreen.getMainScreen().getBounds().size();
+		CGSize bounds = UIScreen.getMainScreen().getApplicationFrame().size();
 
 		// determine orientation and resulting width + height
 		UIInterfaceOrientation orientation = viewController != null 

File: gdx/src/com/badlogic/gdx/utils/SharedLibraryLoader.java
Patch:
@@ -185,7 +185,7 @@ private File getExtractedFile (String dirName, String fileName) {
 
 	/** Returns true if the parent directories of the file can be created and the file can be written. */
 	private boolean canWrite (File file) {
-		if (file.canWrite()) return true; // File exists and is writable.
+		if (file.canWrite() && file.canExecute()) return true; // File exists and is writable.
 		File parent = file.getParentFile();
 		parent.mkdirs();
 		if (!parent.isDirectory()) return false;

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -921,7 +921,9 @@ public BitmapFontData (FileHandle fontFile, boolean flip) {
 					Glyph glyph = getGlyph((char)first);
 					tokens.nextToken();
 					int amount = Integer.parseInt(tokens.nextToken());
-					glyph.setKerning(second, amount);
+					if(glyph != null) { // it appears BMFont outputs kerning for glyph pairs not contained in the font, hence the null check						
+						glyph.setKerning(second, amount);
+					}
 				}
 
 				Glyph spaceGlyph = getGlyph(' ');

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
Patch:
@@ -48,7 +48,7 @@ public AndroidAudio (Context context, AndroidApplicationConfiguration config) {
 		if (!config.disableAudio) {
 			soundPool = new SoundPool(config.maxSimultaneousSounds, AudioManager.STREAM_MUSIC, 100);
 			manager = (AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
-			if(context instanceof Activity) {
+			if (context instanceof Activity) {
 				((Activity)context).setVolumeControlStream(AudioManager.STREAM_MUSIC);
 			}
 		} else {
@@ -71,6 +71,7 @@ protected void pause () {
 					music.wasPlaying = false;
 			}
 		}
+		this.soundPool.autoPause();
 	}
 
 	protected void resume () {
@@ -82,6 +83,7 @@ protected void resume () {
 				if (musics.get(i).wasPlaying == true) musics.get(i).play();
 			}
 		}
+		this.soundPool.autoResume();
 	}
 
 	/** {@inheritDoc} */

File: gdx/src/com/badlogic/gdx/graphics/FPSLogger.java
Patch:
@@ -32,7 +32,7 @@ public FPSLogger () {
 
 	/** Logs the current frames per second to the console. */
 	public void log () {
-		if (TimeUtils.nanoTime() - startTime > 1000000000 /* 1,000,000,000ns == one second*/ {
+		if (TimeUtils.nanoTime() - startTime > 1000000000) /* 1,000,000,000ns == one second*/ {
 			Gdx.app.log("FPSLogger", "fps: " + Gdx.graphics.getFramesPerSecond());
 			startTime = TimeUtils.nanoTime();
 		}

File: gdx/src/com/badlogic/gdx/graphics/glutils/MipMapGenerator.java
Patch:
@@ -53,7 +53,7 @@ public static void generateMipMap (int target, Pixmap pixmap, int textureWidth,
 			return;
 		}
 
-		if (Gdx.app.getType() == ApplicationType.Android || Gdx.app.getType() == ApplicationType.WebGL) {
+		if (Gdx.app.getType() == ApplicationType.Android || Gdx.app.getType() == ApplicationType.WebGL || Gdx.app.getType() == ApplicationType.iOS) {
 			if (Gdx.graphics.isGL20Available())
 				generateMipMapGLES20(target, pixmap);
 			else

File: gdx/src/com/badlogic/gdx/utils/IdentityMap.java
Patch:
@@ -627,6 +627,8 @@ public void remove () {
 			if (currentIndex < 0) throw new IllegalStateException("next must be called before remove.");
 			if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
+				nextIndex = currentIndex;
+				findNextIndex();
 			} else {
 				map.keyTable[currentIndex] = null;
 				map.valueTable[currentIndex] = null;

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -677,6 +677,8 @@ public void remove () {
 				throw new IllegalStateException("next must be called before remove.");
 			} else if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
+				nextIndex = currentIndex;
+				findNextIndex();
 			} else {
 				map.keyTable[currentIndex] = EMPTY;
 			}

File: gdx/src/com/badlogic/gdx/utils/IntMap.java
Patch:
@@ -686,6 +686,8 @@ public void remove () {
 				throw new IllegalStateException("next must be called before remove.");
 			} else if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
+				nextIndex = currentIndex;
+				findNextIndex();
 			} else {
 				map.keyTable[currentIndex] = EMPTY;
 				map.valueTable[currentIndex] = null;

File: gdx/src/com/badlogic/gdx/utils/IntSet.java
Patch:
@@ -491,6 +491,8 @@ public void remove () {
 				throw new IllegalStateException("next must be called before remove.");
 			} else if (currentIndex >= set.capacity) {
 				set.removeStashIndex(currentIndex);
+				nextIndex = currentIndex;
+				findNextIndex();
 			} else {
 				set.keyTable[currentIndex] = EMPTY;
 			}

File: gdx/src/com/badlogic/gdx/utils/LongMap.java
Patch:
@@ -678,6 +678,8 @@ public void remove () {
 				throw new IllegalStateException("next must be called before remove.");
 			} else if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
+				nextIndex = currentIndex;
+				findNextIndex();
 			} else {
 				map.keyTable[currentIndex] = EMPTY;
 				map.valueTable[currentIndex] = null;

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -611,6 +611,8 @@ public void remove () {
 			if (currentIndex < 0) throw new IllegalStateException("next must be called before remove.");
 			if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
+				nextIndex = currentIndex;
+				findNextIndex();
 			} else {
 				map.keyTable[currentIndex] = null;
 			}

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -611,6 +611,8 @@ public void remove () {
 			if (currentIndex < 0) throw new IllegalStateException("next must be called before remove.");
 			if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
+				nextIndex = currentIndex;
+				findNextIndex();
 			} else {
 				map.keyTable[currentIndex] = null;
 			}

File: gdx/src/com/badlogic/gdx/utils/ObjectMap.java
Patch:
@@ -643,6 +643,8 @@ public void remove () {
 			if (currentIndex < 0) throw new IllegalStateException("next must be called before remove.");
 			if (currentIndex >= map.capacity) {
 				map.removeStashIndex(currentIndex);
+				nextIndex = currentIndex;
+				advance();
 			} else {
 				map.keyTable[currentIndex] = null;
 				map.valueTable[currentIndex] = null;

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -471,6 +471,8 @@ public void remove () {
 			if (currentIndex < 0) throw new IllegalStateException("next must be called before remove.");
 			if (currentIndex >= set.capacity) {
 				set.removeStashIndex(currentIndex);
+				nextIndex = currentIndex;
+				findNextIndex();
 			} else {
 				set.keyTable[currentIndex] = null;
 			}

File: gdx/src/com/badlogic/gdx/graphics/glutils/MipMapGenerator.java
Patch:
@@ -53,7 +53,7 @@ public static void generateMipMap (int target, Pixmap pixmap, int textureWidth,
 			return;
 		}
 
-		if (Gdx.app.getType() == ApplicationType.Android || Gdx.app.getType() == ApplicationType.WebGL) {
+		if (Gdx.app.getType() == ApplicationType.Android || Gdx.app.getType() == ApplicationType.WebGL || Gdx.app.getType() == ApplicationType.iOS) {
 			if (Gdx.graphics.isGL20Available())
 				generateMipMapGLES20(target, pixmap);
 			else

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidVisibilityListener.java
Patch:
@@ -18,7 +18,7 @@
 import android.view.View;
 
 /**
- * Allows immersive mode support while maintaining Android 1.5 compatibility
+ * Allows immersive mode support while maintaining compatibility with Android versions before API Level 19 (4.4)
  * @author Unkn0wn0ne
  */
 public class AndroidVisibilityListener {
@@ -41,4 +41,4 @@ public void run () {
 			application.log("AndroidApplication", "Can't create OnSystemUiVisibilityChangeListener", t);
 		}
 	}
-}
\ No newline at end of file
+}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidVisibilityListener.java
Patch:
@@ -18,7 +18,7 @@
 import android.view.View;
 
 /**
- * Allows immersive mode support while maintaining Android 1.5 compatibility
+ * Allows immersive mode support while maintaining compatibility with Android versions before API Level 19 (4.4)
  * @author Unkn0wn0ne
  */
 public class AndroidVisibilityListener {
@@ -41,4 +41,4 @@ public void run () {
 			application.log("AndroidApplication", "Can't create OnSystemUiVisibilityChangeListener", t);
 		}
 	}
-}
\ No newline at end of file
+}

File: gdx/src/com/badlogic/gdx/graphics/FPSLogger.java
Patch:
@@ -17,7 +17,7 @@
 package com.badlogic.gdx.graphics;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.utils.TileUtils;
+import com.badlogic.gdx.utils.TimeUtils;
 
 /** A simple helper class to log the frames per seconds achieved. Just invoke the {@link #log()} method in your rendering method.
  * The output will be logged once per second.

File: gdx/src/com/badlogic/gdx/graphics/FPSLogger.java
Patch:
@@ -26,14 +26,14 @@ public class FPSLogger {
 	long startTime;
 
 	public FPSLogger () {
-		startTime = System.currentTimeMillis();
+		startTime = System.nanoTime();
 	}
 
 	/** Logs the current frames per second to the console. */
 	public void log () {
-		if (System.currentTimeMillis() - startTime > 1000) {
+		if (System.nanoTime() - startTime > 1000000000 /* 1,000,000,000ns == one second*/ {
 			Gdx.app.log("FPSLogger", "fps: " + Gdx.graphics.getFramesPerSecond());
-			startTime = System.currentTimeMillis();
+			startTime = System.nanoTime();
 		}
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/EventAction.java
Patch:
@@ -5,6 +5,7 @@
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.Event;
 import com.badlogic.gdx.scenes.scene2d.EventListener;
+import com.badlogic.gdx.utils.reflect.ClassReflection;
 
 /** Adds a listener to the actor for a specific event type and does not complete until {@link #handle(Event)} returns true.
  * @author JavadocMD
@@ -14,8 +15,8 @@ abstract public class EventAction<T extends Event> extends Action {
 	boolean result;
 
 	private final EventListener listener = new EventListener() {
-		public boolean handle (Event event) {
-			if (!eventClass.isInstance(event)) return false;
+		public boolean handle (Event event) {			
+			if (!ClassReflection.isInstance(eventClass, event)) return false;
 			result = handle(event);
 			return result;
 		}

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/Constructor.java
Patch:
@@ -21,7 +21,7 @@
 public class Constructor extends Method {
 	Constructor (String name, Class enclosingType, Class returnType, Parameter[] parameters, boolean isAbstract, boolean isFinal,
 		boolean isStatic, boolean isDefaultAccess, boolean isPrivate, boolean isProtected, boolean isPublic, boolean isNative,
-		boolean isVarArgs, boolean isMethod, boolean isConstructor, String methodId) {
+		boolean isVarArgs, boolean isMethod, boolean isConstructor, int methodId) {
 		super(name, enclosingType, returnType, parameters, isAbstract, isFinal, isStatic, isDefaultAccess, isPrivate, isProtected,
 			isPublic, isNative, isVarArgs, isMethod, isConstructor, methodId);
 	}

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/Method.java
Patch:
@@ -37,11 +37,11 @@ public class Method {
 	final boolean isMethod;
 	final boolean isConstructor;
 	final Parameter[] parameters;
-	final String methodId;
+	final int methodId;
 
 	public Method (String name, Class enclosingType, Class returnType, Parameter[] parameters, boolean isAbstract,
 		boolean isFinal, boolean isStatic, boolean isDefaultAccess, boolean isPrivate, boolean isProtected, boolean isPublic,
-		boolean isNative, boolean isVarArgs, boolean isMethod, boolean isConstructor, String methodId) {
+		boolean isNative, boolean isVarArgs, boolean isMethod, boolean isConstructor, int methodId) {
 		this.name = name;
 		this.enclosingType = enclosingType;
 		this.parameters = parameters != null ? parameters : EMPTY_PARAMS;

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/Type.java
Patch:
@@ -30,6 +30,7 @@ public class Type {
 	private static final Constructor[] EMPTY_CONSTRUCTORS = new Constructor[0];
 
 	String name;
+	int id;
 	Class clazz;
 	Class superClass;
 	Set<Class> assignables = new HashSet<Class>();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
Patch:
@@ -81,7 +81,7 @@ public void create () {
 		multiplexer.addProcessor(controller);
 		Gdx.input.setInputProcessor(multiplexer);
 
-		renderer = new ImmediateModeRenderer20(false, true, 0);
+		//renderer = new ImmediateModeRenderer20(false, true, 0);
 	}
 
 	public void setupScene () {
@@ -171,6 +171,7 @@ public void render () {
 		projTexShader.end();
 
 		fps.setText("fps: " + Gdx.graphics.getFramesPerSecond());
+		ui.act();
 		ui.draw();
 		Table.drawDebug(ui);
 	}
@@ -198,6 +199,6 @@ public void dispose () {
 		projTexShader.dispose();
 		ui.dispose();
 		skin.dispose();
-		renderer.dispose();
+		//renderer.dispose();
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextArea.java
Patch:
@@ -170,8 +170,7 @@ private int calculateCurrentLineIndex (int cursor) {
 	// OVERRIDE from TextField
 
 	@Override
-	public void setHeight (float height) {
-		super.setHeight(height);
+	protected void sizeChanged () {
 		// The number of lines showed must be updated whenever the height is updated
 		BitmapFont font = style.font;
 		Drawable background = style.background;
@@ -218,7 +217,7 @@ protected void drawSelection (Drawable selection, Batch batch, BitmapFont font,
 	}
 
 	@Override
-	protected void drawText(Batch batch, BitmapFont font, float x, float y) {
+	protected void drawText (Batch batch, BitmapFont font, float x, float y) {
 		float offsetY = 0;
 		for (int i = firstLineShowing * 2; i < (firstLineShowing + linesShowing) * 2 && i < linesBreak.size; i += 2) {
 			font.draw(batch, displayText, x, y + offsetY, linesBreak.items[i], linesBreak.items[i + 1]);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java
Patch:
@@ -52,6 +52,9 @@ public TextButton (String text, TextButtonStyle style) {
 	}
 
 	public void setStyle (ButtonStyle style) {
+		if (style == null) {
+			throw new NullPointerException("style cannot be null");
+		}
 		if (!(style instanceof TextButtonStyle)) throw new IllegalArgumentException("style must be a TextButtonStyle.");
 		super.setStyle(style);
 		this.style = (TextButtonStyle)style;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java
Patch:
@@ -52,6 +52,9 @@ public TextButton (String text, TextButtonStyle style) {
 	}
 
 	public void setStyle (ButtonStyle style) {
+		if (style == null) {
+			throw new NullPointerException("style cannot be null");
+		}
 		if (!(style instanceof TextButtonStyle)) throw new IllegalArgumentException("style must be a TextButtonStyle.");
 		super.setStyle(style);
 		this.style = (TextButtonStyle)style;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
Patch:
@@ -48,7 +48,7 @@ public AndroidAudio (Context context, AndroidApplicationConfiguration config) {
 		if (!config.disableAudio) {
 			soundPool = new SoundPool(config.maxSimultaneousSounds, AudioManager.STREAM_MUSIC, 100);
 			manager = (AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
-			if(context instanceof Activity) {
+			if (context instanceof Activity) {
 				((Activity)context).setVolumeControlStream(AudioManager.STREAM_MUSIC);
 			}
 		} else {
@@ -71,6 +71,7 @@ protected void pause () {
 					music.wasPlaying = false;
 			}
 		}
+		this.soundPool.autoPause();
 	}
 
 	protected void resume () {
@@ -82,6 +83,7 @@ protected void resume () {
 				if (musics.get(i).wasPlaying == true) musics.get(i).play();
 			}
 		}
+		this.soundPool.autoResume();
 	}
 
 	/** {@inheritDoc} */

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -200,7 +200,7 @@ public Color getColor () {
 	public void draw (Batch spriteBatch) {
 		TextureRegion[] regions = font.getRegions();
 		for (int j = 0, n = vertexData.length; j < n; j++) {
-			if (idx[j] >= 0) { // ignore if this texture has no glyphs
+			if (idx[j] > 0) { // ignore if this texture has no glyphs
 				float[] vertices = vertexData[j];
 				spriteBatch.draw(regions[j].getTexture(), vertices, 0, idx[j]);
 			}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Dialog.java
Patch:
@@ -183,7 +183,7 @@ public Dialog show (Stage stage) {
 
 		previousScrollFocus = null;
 		actor = stage.getScrollFocus();
-		if (actor != null && !actor.isDescendantOf(this)) stage.setScrollFocus(previousScrollFocus);
+		if (actor != null && !actor.isDescendantOf(this)) previousScrollFocus = actor;
 
 		pack();
 		setPosition(Math.round((stage.getWidth() - getWidth()) / 2), Math.round((stage.getHeight() - getHeight()) / 2));

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java
Patch:
@@ -57,7 +57,7 @@ public class Decal {
 	protected DecalMaterial material = new DecalMaterial();
 	protected boolean updated = false;
 
-	protected Decal () {
+	public Decal () {
 	}
 
 	/** Sets the color of all four vertices to the specified color

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java
Patch:
@@ -57,7 +57,7 @@ public class Decal {
 	protected DecalMaterial material = new DecalMaterial();
 	protected boolean updated = false;
 
-	protected Decal () {
+	public Decal () {
 	}
 
 	/** Sets the color of all four vertices to the specified color

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -44,7 +44,7 @@
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
 /** An OpenGL surface on an AWT Canvas, allowing OpenGL to be embedded in a Swing application. All OpenGL calls are done on the
- * EDT. This is slightly less efficient then a dedicated thread, but greatly simplifies synchronization. Note that you may need to
+ * EDT. This is slightly less efficient than a dedicated thread, but greatly simplifies synchronization. Note that you may need to
  * call {@link #stop()} or a Swing application may deadlock on System.exit due to how LWJGL and/or Swing deal with shutdown hooks.
  * @author Nathan Sweet */
 public class LwjglCanvas implements Application {
@@ -395,6 +395,7 @@ public void exit () {
 			public void run () {
 				LwjglCanvas.this.listener.pause();
 				LwjglCanvas.this.listener.dispose();
+				if (audio != null) audio.dispose();
 				System.exit(-1);
 			}
 		});

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -67,7 +67,7 @@ public class AssetManager implements Disposable {
 	final ObjectMap<String, Array<String>> assetDependencies = new ObjectMap<String, Array<String>>();
 
 	final ObjectMap<Class, ObjectMap<String, AssetLoader>> loaders = new ObjectMap<Class, ObjectMap<String, AssetLoader>>();
-	final Array<AssetDescriptor> loadQueue = new Array<AssetDescriptor>();
+	final Array<AssetDescriptor> loadQueue = Array.of(AssetDescriptor.class);
 	final AsyncExecutor executor;
 
 	Stack<AssetLoadingTask> tasks = new Stack<AssetLoadingTask>();
@@ -385,7 +385,7 @@ private synchronized void injectDependency (String parentAssetFilename, AssetDes
 		// add the asset as a dependency of the parent asset
 		Array<String> dependencies = assetDependencies.get(parentAssetFilename);
 		if (dependencies == null) {
-			dependencies = new Array<String>();
+			dependencies = Array.of(String.class);
 			assetDependencies.put(parentAssetFilename, dependencies);
 		}
 		dependencies.add(dependendAssetDesc.fileName);

File: gdx/src/com/badlogic/gdx/assets/loaders/BitmapFontLoader.java
Patch:
@@ -40,7 +40,7 @@ public BitmapFontLoader (FileHandleResolver resolver) {
 
 	@Override
 	public Array<AssetDescriptor> getDependencies (String fileName, FileHandle file, BitmapFontParameter parameter) {
-		Array<AssetDescriptor> deps = new Array<AssetDescriptor>();
+		Array<AssetDescriptor> deps = Array.of(AssetDescriptor.class);
 		if (parameter != null && parameter.bitmapFontData != null) {
 			data = parameter.bitmapFontData;
 			return deps;

File: gdx/src/com/badlogic/gdx/assets/loaders/ParticleEffectLoader.java
Patch:
@@ -48,7 +48,7 @@ else if (param != null && param.imagesDir != null)
 	public Array<AssetDescriptor> getDependencies (String fileName, FileHandle file, ParticleEffectParameter param) {
 		Array<AssetDescriptor> deps = null;
 		if (param != null && param.atlasFile != null) {
-			deps = new Array<AssetDescriptor>();
+			deps = Array.of(AssetDescriptor.class);
 			deps.add(new AssetDescriptor<TextureAtlas>(param.atlasFile, TextureAtlas.class));
 		}
 		return deps;

File: gdx/src/com/badlogic/gdx/assets/loaders/TextureAtlasLoader.java
Patch:
@@ -58,7 +58,7 @@ public Array<AssetDescriptor> getDependencies (String fileName, FileHandle atlas
 			data = new TextureAtlasData(atlasFile, imgDir, false);
 		}
 
-		Array<AssetDescriptor> dependencies = new Array<AssetDescriptor>();
+		Array<AssetDescriptor> dependencies = Array.of(AssetDescriptor.class);
 		for (Page page : data.getPages()) {
 			TextureParameter params = new TextureParameter();
 			params.format = page.format;

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java
Patch:
@@ -109,7 +109,7 @@ public class Page {
 		OrderedMap<String, Rectangle> rects;
 		Pixmap image;
 		Texture texture;
-		Array<String> addedRects = new Array<String>();
+		Array<String> addedRects = Array.of(String.class);
 
 		public Pixmap getPixmap () {
 			return image;
@@ -121,7 +121,7 @@ public Pixmap getPixmap () {
 	final Format pageFormat;
 	final int padding;
 	final boolean duplicateBorder;
-	final Array<Page> pages = new Array<Page>();
+	final Array<Page> pages = Array.of(Page.class);
 	Page currPage;
 	boolean disposed;
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -49,7 +49,7 @@ public class TextureAtlas implements Disposable {
 	static final String[] tuple = new String[4];
 
 	private final HashSet<Texture> textures = new HashSet(4);
-	private final Array<AtlasRegion> regions = new Array<AtlasRegion>();
+	private final Array<AtlasRegion> regions = Array.of(AtlasRegion.class);
 
 	public static class TextureAtlasData {
 		public static class Page {
@@ -92,8 +92,8 @@ public static class Region {
 			public int[] pads;
 		}
 
-		final Array<Page> pages = new Array<Page>();
-		final Array<Region> regions = new Array<Region>();
+		final Array<Page> pages = Array.of(Page.class);
+		final Array<Region> regions = Array.of(Region.class);
 
 		public TextureAtlasData (FileHandle packFile, FileHandle imagesDir, boolean flip) {
 			BufferedReader reader = new BufferedReader(new InputStreamReader(packFile.read()), 64);

File: gdx/src/com/badlogic/gdx/graphics/g3d/ModelInstance.java
Patch:
@@ -42,11 +42,11 @@
  * @author badlogic, xoppa */
 public class ModelInstance implements RenderableProvider {
 	/** the materials of the model, used by nodes that have a graphical representation FIXME not sure if superfluous, allows modification of materials without having to traverse the nodes **/
-	public final Array<Material> materials = new Array<Material>();
+	public final Array<Material> materials = Array.of(Material.class);
 	/** root nodes of the model **/
-	public final Array<Node> nodes = new Array<Node>();
+	public final Array<Node> nodes = Array.of(Node.class);
 	/** animations of the model, modifying node transformations **/
-	public final Array<Animation> animations = new Array<Animation>();
+	public final Array<Animation> animations = Array.of(Animation.class);
 	/** the {@link Model} this instances derives from **/
 	public final Model model;
 	/** the world transform **/

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/CameraGroupStrategy.java
Patch:
@@ -85,7 +85,7 @@ public class CameraGroupStrategy implements GroupStrategy, Disposable {
 	Pool<Array<Decal>> arrayPool = new Pool<Array<Decal>>(16) {
 		@Override
 		protected Array<Decal> newObject () {
-			return new Array<Decal>();
+			return Array.of(Decal.class);
 		}
 	};
 	Array<Array<Decal>> usedArrays = new Array<Array<Decal>>();

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -67,7 +67,7 @@ public class AssetManager implements Disposable {
 	final ObjectMap<String, Array<String>> assetDependencies = new ObjectMap<String, Array<String>>();
 
 	final ObjectMap<Class, ObjectMap<String, AssetLoader>> loaders = new ObjectMap<Class, ObjectMap<String, AssetLoader>>();
-	final Array<AssetDescriptor> loadQueue = new Array<AssetDescriptor>();
+	final Array<AssetDescriptor> loadQueue = Array.of(AssetDescriptor.class);
 	final AsyncExecutor executor;
 
 	Stack<AssetLoadingTask> tasks = new Stack<AssetLoadingTask>();
@@ -385,7 +385,7 @@ private synchronized void injectDependency (String parentAssetFilename, AssetDes
 		// add the asset as a dependency of the parent asset
 		Array<String> dependencies = assetDependencies.get(parentAssetFilename);
 		if (dependencies == null) {
-			dependencies = new Array<String>();
+			dependencies = Array.of(String.class);
 			assetDependencies.put(parentAssetFilename, dependencies);
 		}
 		dependencies.add(dependendAssetDesc.fileName);

File: gdx/src/com/badlogic/gdx/assets/loaders/BitmapFontLoader.java
Patch:
@@ -40,7 +40,7 @@ public BitmapFontLoader (FileHandleResolver resolver) {
 
 	@Override
 	public Array<AssetDescriptor> getDependencies (String fileName, FileHandle file, BitmapFontParameter parameter) {
-		Array<AssetDescriptor> deps = new Array<AssetDescriptor>();
+		Array<AssetDescriptor> deps = Array.of(AssetDescriptor.class);
 		if (parameter != null && parameter.bitmapFontData != null) {
 			data = parameter.bitmapFontData;
 			return deps;

File: gdx/src/com/badlogic/gdx/assets/loaders/ParticleEffectLoader.java
Patch:
@@ -48,7 +48,7 @@ else if (param != null && param.imagesDir != null)
 	public Array<AssetDescriptor> getDependencies (String fileName, FileHandle file, ParticleEffectParameter param) {
 		Array<AssetDescriptor> deps = null;
 		if (param != null && param.atlasFile != null) {
-			deps = new Array<AssetDescriptor>();
+			deps = Array.of(AssetDescriptor.class);
 			deps.add(new AssetDescriptor<TextureAtlas>(param.atlasFile, TextureAtlas.class));
 		}
 		return deps;

File: gdx/src/com/badlogic/gdx/assets/loaders/TextureAtlasLoader.java
Patch:
@@ -58,7 +58,7 @@ public Array<AssetDescriptor> getDependencies (String fileName, FileHandle atlas
 			data = new TextureAtlasData(atlasFile, imgDir, false);
 		}
 
-		Array<AssetDescriptor> dependencies = new Array<AssetDescriptor>();
+		Array<AssetDescriptor> dependencies = Array.of(AssetDescriptor.class);
 		for (Page page : data.getPages()) {
 			TextureParameter params = new TextureParameter();
 			params.format = page.format;

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java
Patch:
@@ -109,7 +109,7 @@ public class Page {
 		OrderedMap<String, Rectangle> rects;
 		Pixmap image;
 		Texture texture;
-		Array<String> addedRects = new Array<String>();
+		Array<String> addedRects = Array.of(String.class);
 
 		public Pixmap getPixmap () {
 			return image;
@@ -121,7 +121,7 @@ public Pixmap getPixmap () {
 	final Format pageFormat;
 	final int padding;
 	final boolean duplicateBorder;
-	final Array<Page> pages = new Array<Page>();
+	final Array<Page> pages = Array.of(Page.class);
 	Page currPage;
 	boolean disposed;
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -49,7 +49,7 @@ public class TextureAtlas implements Disposable {
 	static final String[] tuple = new String[4];
 
 	private final HashSet<Texture> textures = new HashSet(4);
-	private final Array<AtlasRegion> regions = new Array<AtlasRegion>();
+	private final Array<AtlasRegion> regions = Array.of(AtlasRegion.class);
 
 	public static class TextureAtlasData {
 		public static class Page {
@@ -92,8 +92,8 @@ public static class Region {
 			public int[] pads;
 		}
 
-		final Array<Page> pages = new Array<Page>();
-		final Array<Region> regions = new Array<Region>();
+		final Array<Page> pages = Array.of(Page.class);
+		final Array<Region> regions = Array.of(Region.class);
 
 		public TextureAtlasData (FileHandle packFile, FileHandle imagesDir, boolean flip) {
 			BufferedReader reader = new BufferedReader(new InputStreamReader(packFile.read()), 64);

File: gdx/src/com/badlogic/gdx/graphics/g3d/ModelInstance.java
Patch:
@@ -42,11 +42,11 @@
  * @author badlogic, xoppa */
 public class ModelInstance implements RenderableProvider {
 	/** the materials of the model, used by nodes that have a graphical representation FIXME not sure if superfluous, allows modification of materials without having to traverse the nodes **/
-	public final Array<Material> materials = new Array<Material>();
+	public final Array<Material> materials = Array.of(Material.class);
 	/** root nodes of the model **/
-	public final Array<Node> nodes = new Array<Node>();
+	public final Array<Node> nodes = Array.of(Node.class);
 	/** animations of the model, modifying node transformations **/
-	public final Array<Animation> animations = new Array<Animation>();
+	public final Array<Animation> animations = Array.of(Animation.class);
 	/** the {@link Model} this instances derives from **/
 	public final Model model;
 	/** the world transform **/

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/CameraGroupStrategy.java
Patch:
@@ -85,7 +85,7 @@ public class CameraGroupStrategy implements GroupStrategy, Disposable {
 	Pool<Array<Decal>> arrayPool = new Pool<Array<Decal>>(16) {
 		@Override
 		protected Array<Decal> newObject () {
-			return new Array<Decal>();
+			return Array.of(Decal.class);
 		}
 	};
 	Array<Array<Decal>> usedArrays = new Array<Array<Decal>>();

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -176,7 +176,6 @@ public void onWindowFocusChanged (boolean hasFocus) {
 		super.onWindowFocusChanged(hasFocus);
 		useImmersiveMode(this.useImmersiveMode);
 		hideStatusBar(this.hideStatusBar);
-		// issue 912
 		if (hasFocus) {
 			this.wasFocusChanged = 1;
 			if (this.isWaitingForAudio) {
@@ -323,7 +322,6 @@ protected void onResume () {
 		} else
 			firstResume = false;
 
-		// issue 912
 		this.isWaitingForAudio = true;
 		if (this.wasFocusChanged == 1 || this.wasFocusChanged == -1) {
 			this.audio.resume();
@@ -485,4 +483,4 @@ public void removeLifecycleListener (LifecycleListener listener) {
 			lifecycleListeners.removeValue(listener, true);
 		}
 	}
-}
\ No newline at end of file
+}

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/Ship.java
Patch:
@@ -68,7 +68,7 @@ public void draw(Batch batch) {
 		collisionPoints.get(2).set( this.getVertices()[10], this.getVertices()[11]);
 		collisionPoints.get(3).set( this.getVertices()[15], this.getVertices()[16]);
 		
-		collisionCenter.set(collisionPoints.get(2)).scl(0.5f).add(collisionPoints.get(0));
+		collisionCenter.set(collisionPoints.get(0)).add(collisionPoints.get(2)).scl(0.5f);
 
 		velocity.scl( (float) Math.pow(0.97f, delta * 30.f));
 		position.add(velocity.x * delta, velocity.y * delta);

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/Ship.java
Patch:
@@ -68,7 +68,7 @@ public void draw(Batch batch) {
 		collisionPoints.get(2).set( this.getVertices()[10], this.getVertices()[11]);
 		collisionPoints.get(3).set( this.getVertices()[15], this.getVertices()[16]);
 		
-		collisionCenter.set(collisionPoints.get(2)).scl(0.5f).add(collisionPoints.get(0));
+		collisionCenter.set(collisionPoints.get(0)).add(collisionPoints.get(2)).scl(0.5f);
 
 		velocity.scl( (float) Math.pow(0.97f, delta * 30.f));
 		position.add(velocity.x * delta, velocity.y * delta);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
Patch:
@@ -416,7 +416,7 @@ public <T> T readValue (Class<T> type, Class elementType, JsonValue jsonData) {
 
 		json.setSerializer(Skin.class, new ReadOnlySerializer<Skin>() {
 			public Skin read (Json json, JsonValue typeToValueMap, Class ignored) {
-				for (JsonValue valueMap = typeToValueMap.child(); valueMap != null; valueMap = valueMap.next()) {
+				for (JsonValue valueMap = typeToValueMap.child; valueMap != null; valueMap = valueMap.next) {
 					try {
 						readNamedObjects(json, ClassReflection.forName(valueMap.name()), valueMap);
 					} catch (ReflectionException ex) {
@@ -428,7 +428,7 @@ public Skin read (Json json, JsonValue typeToValueMap, Class ignored) {
 
 			private void readNamedObjects (Json json, Class type, JsonValue valueMap) {
 				Class addType = type == TintedDrawable.class ? Drawable.class : type;
-				for (JsonValue valueEntry = valueMap.child(); valueEntry != null; valueEntry = valueEntry.next()) {
+				for (JsonValue valueEntry = valueMap.child; valueEntry != null; valueEntry = valueEntry.next) {
 					Object object = json.readValue(type, valueEntry);
 					if (object == null) continue;
 					try {

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -102,6 +102,7 @@ public AssetManager (FileHandleResolver resolver) {
 	 * @return the asset */
 	public synchronized <T> T get (String fileName) {
 		Class<T> type = assetTypes.get(fileName);
+		if(type==null) throw new GdxRuntimeException("Asset not loaded: " + fileName);
 		ObjectMap<String, RefCountedContainer> assetsByType = assets.get(type);
 		if (assetsByType == null) throw new GdxRuntimeException("Asset not loaded: " + fileName);
 		RefCountedContainer assetContainer = assetsByType.get(fileName);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -212,6 +212,7 @@ public class GdxTests {
 		TideMapDirectLoaderTest.class,
 		TileTest.class,
 		TiledMapAssetManagerTest.class,
+		TiledMapAtlasAssetManagerTest.class,
 		TiledMapBench.class,
 		TimerTest.class,
 		TouchpadTest.class,

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -57,7 +57,7 @@ public interface Graphics {
 	 * 
 	 * @author mzechner */
 	public enum GraphicsType {
-		AndroidGL, LWJGL, Angle, WebGL, iOSGL, JGLFW
+		AndroidGL, LWJGL, Angle, WebGL, iOSGL, JGLFW, Mock
 	}
 
 	/** Describe a fullscreen display mode

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTCanvas.java
Patch:
@@ -317,7 +317,7 @@ public Preferences getPreferences (String name) {
 		if (preferences.containsKey(name)) {
 			return preferences.get(name);
 		} else {
-			Preferences prefs = new LwjglPreferences(name);
+			Preferences prefs = new LwjglPreferences(name, ".prefs/");
 			preferences.put(name, prefs);
 			return prefs;
 		}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -85,7 +85,7 @@ public LwjglApplication (ApplicationListener listener, LwjglApplicationConfigura
 		input = new LwjglInput();
 		net = new LwjglNet();
 		this.listener = listener;
-		this.preferencesdir = config.preferencesLocation;
+		this.preferencesdir = config.preferencesDirectory;
 		
 		Gdx.app = this;
 		Gdx.graphics = graphics;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -316,7 +316,7 @@ public Preferences getPreferences (String name) {
 		if (preferences.containsKey(name)) {
 			return preferences.get(name);
 		} else {
-			Preferences prefs = new LwjglPreferences(name);
+			Preferences prefs = new LwjglPreferences(name, ".prefs/");
 			preferences.put(name, prefs);
 			return prefs;
 		}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglHeadlessApplication.java
Patch:
@@ -199,7 +199,7 @@ public Preferences getPreferences(String name) {
 		if (preferences.containsKey(name)) {
 			return preferences.get(name);
 		} else {
-			Preferences prefs = new LwjglPreferences(name);
+			Preferences prefs = new LwjglPreferences(name, ".prefs/");
 			preferences.put(name, prefs);
 			return prefs;
 		}

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -254,10 +254,10 @@ public void draw (Batch spriteBatch, float alphaModulation) {
 		Color color = getColor();
 		float oldAlpha = color.a;
 		color.a *= alphaModulation;
-		setColor(color);
+		setColors(color);
 		draw(spriteBatch);
 		color.a = oldAlpha;
-		setColor(color);
+		setColors(color);
 	}
 
 	/** Removes all glyphs in the cache. */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -207,7 +207,7 @@ public void draw (Batch batch, float parentAlpha) {
 			batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
 			style.background.draw(batch, getX(), getY(), getWidth(), getHeight());
 		}
-		cache.setColor(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor));
+		cache.setColors(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor));
 		cache.setPosition(getX(), getY());
 		cache.draw(batch, parentAlpha);
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -255,7 +255,7 @@ else if ((titleAlignment & Align.right) != 0)
 			else
 				y -= (padTop - bounds.height) / 2;
 		}
-		titleCache.setColor(Color.tmp.set(getColor()).mul(style.titleFontColor));
+		titleCache.setColors(Color.tmp.set(getColor()).mul(style.titleFontColor));
 		titleCache.setPosition((int)x, (int)y);
 		titleCache.draw(batch, parentAlpha);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontFlipTest.java
Patch:
@@ -147,7 +147,7 @@ private void renderNormal (String type) {
 	}
 
 	private void renderCached () {
-		cache5.setColor(red);
+		cache5.setColors(red);
 		cache5.draw(spriteBatch);
 
 		cache1.draw(spriteBatch);
@@ -160,7 +160,7 @@ private void renderCached () {
 	}
 
 	private void renderCachedScaled () {
-		cacheScaled5.setColor(red);
+		cacheScaled5.setColors(red);
 		cacheScaled5.draw(spriteBatch);
 
 		cacheScaled1.draw(spriteBatch);

File: gdx/src/com/badlogic/gdx/graphics/g3d/model/NodePart.java
Patch:
@@ -17,6 +17,7 @@
 package com.badlogic.gdx.graphics.g3d.model;
 
 import com.badlogic.gdx.graphics.g3d.Material;
+import com.badlogic.gdx.graphics.g3d.Model;
 import com.badlogic.gdx.graphics.g3d.ModelInstance;
 import com.badlogic.gdx.graphics.g3d.Renderable;
 import com.badlogic.gdx.math.Matrix4;

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplication.java
Patch:
@@ -110,7 +110,7 @@ void initialize (JglfwApplicationConfiguration config) {
 		foregroundFPS = config.foregroundFPS;
 		backgroundFPS = config.backgroundFPS;
 		hiddenFPS = config.hiddenFPS;
-		preferencesdir = config.prefrencesLocation;
+		preferencesdir = config.preferencesLocation;
 
 		final Thread glThread = Thread.currentThread();
 

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplicationConfiguration.java
Patch:
@@ -72,7 +72,7 @@ public class JglfwApplicationConfiguration {
 	/** Target framerate when the window is hidden or minimized. The CPU sleeps as needed. Use 0 to never sleep, -1 to not render. **/
 	public int hiddenFPS = -1;
 	/** Prefrences location on desktop. Default: current directory + ".prefs" */
-	public String prefrencesLocation = ".prefs/";
+	public String preferencesLocation = ".prefs/";
 	
 	static public DisplayMode[] getDisplayModes () {
 		GraphicsDevice device = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -51,7 +51,7 @@ public class LwjglApplication implements Application {
 	protected final Array<Runnable> executedRunnables = new Array();
 	protected final Array<LifecycleListener> lifecycleListeners = new Array<LifecycleListener>();
 	protected int logLevel = LOG_INFO;
-	protected String prefencesdir;
+	protected String preferencesdir;
 
 	public LwjglApplication (ApplicationListener listener, String title, int width, int height, boolean useGL2) {
 		this(listener, createConfig(title, width, height, useGL2));
@@ -86,7 +86,7 @@ public LwjglApplication (ApplicationListener listener, LwjglApplicationConfigura
 		input = new LwjglInput();
 		net = new LwjglNet();
 		this.listener = listener;
-		this.prefencesdir = config.prefrencesLocation;
+		this.preferencesdir = config.preferencesLocation;
 		
 		Gdx.app = this;
 		Gdx.graphics = graphics;
@@ -307,7 +307,7 @@ public Preferences getPreferences (String name) {
 		if (preferences.containsKey(name)) {
 			return preferences.get(name);
 		} else {
-			Preferences prefs = new LwjglPreferences(name, this.prefencesdir);
+			Preferences prefs = new LwjglPreferences(name, this.preferencesdir);
 			preferences.put(name, prefs);
 			return prefs;
 		}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -68,8 +68,8 @@ public class LwjglApplicationConfiguration {
 	/** Allows software OpenGL rendering if hardware acceleration was not available.
 	 * @see LwjglGraphics#isSoftwareMode() */
 	public boolean allowSoftwareMode = false;
-	/** Prefrences location on desktop. Default: current directory + ".prefs" */
-	public String prefrencesLocation = ".prefs/";
+	/** Preferences location on desktop. Default: current directory + ".prefs" */
+	public String preferencesLocation = ".prefs/";
 
 	Array<String> iconPaths = new Array();
 	Array<FileType> iconFileTypes = new Array();

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplication.java
Patch:
@@ -54,6 +54,7 @@ public class JglfwApplication implements Application {
 	private int logLevel = LOG_INFO;
 	volatile boolean running = true;
 	boolean isPaused;
+	protected String preferencesdir;
 
 	private boolean forceExit, runOnEDT;
 	private int foregroundFPS, backgroundFPS, hiddenFPS;
@@ -109,6 +110,7 @@ void initialize (JglfwApplicationConfiguration config) {
 		foregroundFPS = config.foregroundFPS;
 		backgroundFPS = config.backgroundFPS;
 		hiddenFPS = config.hiddenFPS;
+		preferencesdir = config.prefrencesLocation;
 
 		final Thread glThread = Thread.currentThread();
 
@@ -312,7 +314,7 @@ public Preferences getPreferences (String name) {
 		if (preferences.containsKey(name))
 			return preferences.get(name);
 		else {
-			Preferences prefs = new JglfwPreferences(name);
+			Preferences prefs = new JglfwPreferences(name, this.preferencesdir);
 			preferences.put(name, prefs);
 			return prefs;
 		}

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplicationConfiguration.java
Patch:
@@ -71,7 +71,9 @@ public class JglfwApplicationConfiguration {
 	public int backgroundFPS;
 	/** Target framerate when the window is hidden or minimized. The CPU sleeps as needed. Use 0 to never sleep, -1 to not render. **/
 	public int hiddenFPS = -1;
-
+	/** Prefrences location on desktop. Default: current directory + ".prefs" */
+	public String prefrencesLocation = ".prefs/";
+	
 	static public DisplayMode[] getDisplayModes () {
 		GraphicsDevice device = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
 		java.awt.DisplayMode desktopMode = device.getDisplayMode();

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwPreferences.java
Patch:
@@ -37,8 +37,8 @@ public class JglfwPreferences implements Preferences {
 	private final Properties properties = new Properties();
 	private final FileHandle file;
 
-	public JglfwPreferences (String name) {
-		this(new JglfwFileHandle(new File(".prefs/" + name), FileType.External));
+	public JglfwPreferences (String name, String directory) {
+		this(new JglfwFileHandle(new File(directory, name), FileType.External));
 	}
 
 	public JglfwPreferences (FileHandle file) {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -68,6 +68,8 @@ public class LwjglApplicationConfiguration {
 	/** Allows software OpenGL rendering if hardware acceleration was not available.
 	 * @see LwjglGraphics#isSoftwareMode() */
 	public boolean allowSoftwareMode = false;
+	/** Prefrences location on desktop. Default: current directory + ".prefs" */
+	public String prefrencesLocation = ".prefs/";
 
 	Array<String> iconPaths = new Array();
 	Array<FileType> iconFileTypes = new Array();
@@ -143,4 +145,4 @@ public static DisplayMode[] getDisplayModes () {
 
 		return modes.toArray(new DisplayMode[modes.size()]);
 	}
-}
+}
\ No newline at end of file

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglPreferences.java
Patch:
@@ -37,8 +37,8 @@ public class LwjglPreferences implements Preferences {
 	private final Properties properties = new Properties();
 	private final FileHandle file;
 
-	public LwjglPreferences (String name) {
-		this(new LwjglFileHandle(new File(".prefs/" + name), FileType.External));
+	public LwjglPreferences (String name, String directory) {
+		this(new LwjglFileHandle(new File(directory, name), FileType.External));
 	}
 
 	public LwjglPreferences (FileHandle file) {
@@ -184,4 +184,4 @@ public void flush () {
 	public void remove (String key) {
 		properties.remove(key);
 	}
-}
+}
\ No newline at end of file

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/async/AsyncExecutor.java
Patch:
@@ -50,11 +50,10 @@ public AsyncExecutor(int maxConcurrent) {
 	 */
 	public <T> AsyncResult<T> submit(final AsyncTask<T> task) {
 		T result = null;
-		boolean error = false;
 		try {
 			result = task.call();
 		} catch(Throwable t) {
-			error = true;
+			throw new GdxRuntimeException("Could not submit AsyncResult: " + t.getMessage(), t);
 		}
 		return new AsyncResult(result);
 	}

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -102,6 +102,7 @@ public AssetManager (FileHandleResolver resolver) {
 	 * @return the asset */
 	public synchronized <T> T get (String fileName) {
 		Class<T> type = assetTypes.get(fileName);
+		if(type==null) throw new GdxRuntimeException("Asset not loaded: " + fileName);
 		ObjectMap<String, RefCountedContainer> assetsByType = assets.get(type);
 		if (assetsByType == null) throw new GdxRuntimeException("Asset not loaded: " + fileName);
 		RefCountedContainer assetContainer = assetsByType.get(fileName);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -211,6 +211,7 @@ public class GdxTests {
 		TideMapDirectLoaderTest.class,
 		TileTest.class,
 		TiledMapAssetManagerTest.class,
+		TiledMapAtlasAssetManagerTest.class,
 		TiledMapBench.class,
 		TimerTest.class,
 		TouchpadTest.class,

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -992,7 +992,7 @@ public int getDeltaY (int pointer) {
 
 	@Override
 	public void setCursorPosition (int x, int y) {
-		Mouse.setCursorPosition(x, y - 1);
+		Mouse.setCursorPosition(x, Gdx.graphics.getHeight() - 1 - y);
 	}
 
   @Override

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglHeadlessApplicationConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 package com.badlogic.gdx.backends.lwjgl;
 
 public class LwjglHeadlessApplicationConfiguration {
-	/** The time (in seconds) between each call to the render method or negative to not call the render method at all. */
-	public float renderInterval = -1f;
+	/** The minimum time (in seconds) between each call to the render method or negative to not call the render method at all. */
+	public float renderInterval = 1f / 60f;
 }

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidMultiTouchHandler.java
Patch:
@@ -41,7 +41,7 @@ public void onTouch (MotionEvent event, AndroidInput input) {
 			case MotionEvent.ACTION_DOWN:
 			case MotionEvent.ACTION_POINTER_DOWN:
 				realPointerIndex = input.getFreePointerIndex(); // get a free pointer index as reported by Input.getX() etc.
-				if (realPointerIndex > AndroidInput.NUM_TOUCHES) break;
+				if (realPointerIndex >= AndroidInput.NUM_TOUCHES) break;
 				input.realId[realPointerIndex] = pointerId;
 				x = (int)event.getX(pointerIndex);
 				y = (int)event.getY(pointerIndex);
@@ -59,7 +59,7 @@ public void onTouch (MotionEvent event, AndroidInput input) {
 			case MotionEvent.ACTION_CANCEL:
 				realPointerIndex = input.lookUpPointerIndex(pointerId);
 				if (realPointerIndex == -1) break;
-				if (realPointerIndex > AndroidInput.NUM_TOUCHES) break;
+				if (realPointerIndex >= AndroidInput.NUM_TOUCHES) break;
 				input.realId[realPointerIndex] = -1;
 				x = (int)event.getX(pointerIndex);
 				y = (int)event.getY(pointerIndex);
@@ -80,7 +80,7 @@ public void onTouch (MotionEvent event, AndroidInput input) {
 					y = (int)event.getY(pointerIndex);
 					realPointerIndex = input.lookUpPointerIndex(pointerId);
 					if (realPointerIndex == -1) continue;
-					if (realPointerIndex > AndroidInput.NUM_TOUCHES) break;
+					if (realPointerIndex >= AndroidInput.NUM_TOUCHES) break;
 					postTouchEvent(input, TouchEvent.TOUCH_DRAGGED, x, y, realPointerIndex, timeStamp);
 					input.deltaX[realPointerIndex] = x - input.touchX[realPointerIndex];
 					input.deltaY[realPointerIndex] = y - input.touchY[realPointerIndex];

File: tests/gdx-tests/src/com/badlogic/gdx/tests/net/NetAPITest.java
Patch:
@@ -171,6 +171,8 @@ public void run () {
 	public void failed (Throwable t) {
 		textButton.setDisabled(false);
 		textButton.setTouchable(Touchable.enabled);
+		textButtonTxt.setDisabled(false);
+		textButtonTxt.setTouchable(Touchable.enabled);
 		statusLabel.setText("Failed to perform the HTTP Request: " + t.getMessage());
 		t.printStackTrace();
 	}

File: gdx/src/com/badlogic/gdx/audio/Music.java
Patch:
@@ -36,6 +36,8 @@
  * {@link ApplicationListener}.
  * </p>
  * 
+ * <p><b>Note<b>: any values provided will not be clamped, it is the developer's responsibility to do so</p>
+ * 
  * @author mzechner */
 public interface Music extends Disposable {
 	/** Starts the play back of the music stream. In case the stream was paused this will resume the play back. In case the music

File: gdx/src/com/badlogic/gdx/audio/Sound.java
Patch:
@@ -34,6 +34,8 @@
  * can use this id to modify the playback of that sound instance.
  * </p>
  * 
+ * <p><b>Note<b>: any values provided will not be clamped, it is the developer's responsibility to do so</p>
+ * 
  * @author badlogicgames@gmail.com */
 public interface Sound extends Disposable {
 	/** Plays the sound. If the sound is already playing, it will be played again, concurrently.

File: gdx/src/com/badlogic/gdx/graphics/glutils/FrameBuffer.java
Patch:
@@ -208,14 +208,14 @@ public void dispose () {
 
 	/** Makes the frame buffer current so everything gets drawn to it. */
 	public void begin () {
-		Gdx.graphics.getGL20().glViewport(0, 0, colorTexture.getWidth(), colorTexture.getHeight());
 		Gdx.graphics.getGL20().glBindFramebuffer(GL20.GL_FRAMEBUFFER, framebufferHandle);
+		Gdx.graphics.getGL20().glViewport(0, 0, colorTexture.getWidth(), colorTexture.getHeight());
 	}
 
 	/** Unbinds the framebuffer, all drawing will be performed to the normal framebuffer from here on. */
 	public void end () {
-		Gdx.graphics.getGL20().glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		Gdx.graphics.getGL20().glBindFramebuffer(GL20.GL_FRAMEBUFFER, defaultFramebufferHandle);
+		Gdx.graphics.getGL20().glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 	}
 	
 	/** Unbinds the framebuffer and sets viewport sizes, all drawing will be performed to the normal framebuffer from here on.

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -688,7 +688,6 @@ public void setMessageText (String messageText) {
 	public void setText (String str) {
 		if (str == null) throw new IllegalArgumentException("text cannot be null.");
 
-		BitmapFont font = style.font;
 		clearSelection();
 		text = "";
 		paste(str, onlyFontChars);
@@ -705,7 +704,7 @@ public int getSelectionStart () {
 	}
 
 	public String getSelection () {
-		return text.substring(selectionStart, cursor);
+		return hasSelection ? text.substring(Math.min(selectionStart, cursor), Math.max(selectionStart, cursor)) : "";
 	}
 
 	/** Sets the selected text. */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -688,7 +688,6 @@ public void setMessageText (String messageText) {
 	public void setText (String str) {
 		if (str == null) throw new IllegalArgumentException("text cannot be null.");
 
-		BitmapFont font = style.font;
 		clearSelection();
 		text = "";
 		paste(str, onlyFontChars);
@@ -705,7 +704,7 @@ public int getSelectionStart () {
 	}
 
 	public String getSelection () {
-		return text.substring(selectionStart, cursor);
+		return hasSelection ? text.substring(Math.min(selectionStart, cursor), Math.max(selectionStart, cursor)) : "";
 	}
 
 	/** Sets the selected text. */

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/EffectPanel.java
Patch:
@@ -66,7 +66,7 @@ public ParticleEmitter newEmitter (String name, boolean select) {
 		emitter.getTransparency().setHigh(1);
 
 		emitter.setMaxParticleCount(25);
-		emitter.setImagePath("particle.png");
+		emitter.setImagePath(ParticleEditor.DEFAULT_PARTICLE);
 
 		addEmitter(name, select, emitter);
 		return emitter;
@@ -107,7 +107,7 @@ public ParticleEmitter newExampleEmitter (String name, boolean select) {
 		emitter.getTransparency().setScaling(new float[] {0, 1, 0.75f, 0});
 		
 		emitter.setMaxParticleCount(200);
-		emitter.setImagePath("particle.png");
+		emitter.setImagePath(ParticleEditor.DEFAULT_PARTICLE);
 		
 		addEmitter(name, select, emitter);
 		return emitter;

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java
Patch:
@@ -62,6 +62,7 @@
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 public class ParticleEditor extends JFrame {
+	public static final String DEFAULT_PARTICLE = "particle.png"; 
 	LwjglCanvas lwjglCanvas;
 	JPanel rowsPanel;
 	JPanel editRowsPanel;
@@ -428,7 +429,7 @@ private void loadImage (ParticleEmitter emitter) {
 			String imageName = new File(imagePath.replace('\\', '/')).getName();
 			try {
 				FileHandle file;
-				if (imagePath.equals("particle.png"))
+				if (imagePath.equals(ParticleEditor.DEFAULT_PARTICLE))
 					file = Gdx.files.classpath(imagePath);
 				else
 					file = Gdx.files.absolute(imagePath);

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/EffectPanel.java
Patch:
@@ -66,7 +66,7 @@ public ParticleEmitter newEmitter (String name, boolean select) {
 		emitter.getTransparency().setHigh(1);
 
 		emitter.setMaxParticleCount(25);
-		emitter.setImagePath("particle.png");
+		emitter.setImagePath(ParticleEditor.DEFAULT_PARTICLE);
 
 		addEmitter(name, select, emitter);
 		return emitter;
@@ -107,7 +107,7 @@ public ParticleEmitter newExampleEmitter (String name, boolean select) {
 		emitter.getTransparency().setScaling(new float[] {0, 1, 0.75f, 0});
 		
 		emitter.setMaxParticleCount(200);
-		emitter.setImagePath("particle.png");
+		emitter.setImagePath(ParticleEditor.DEFAULT_PARTICLE);
 		
 		addEmitter(name, select, emitter);
 		return emitter;

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ImagePanel.java
Patch:
@@ -73,7 +73,7 @@ public void actionPerformed (ActionEvent event) {
 				@Override
 				public void actionPerformed (ActionEvent e) {
 					final ParticleEmitter emitter = editor.getEmitter();
-					emitter.setImagePath("particle.png");
+					emitter.setImagePath(ParticleEditor.DEFAULT_PARTICLE);
 					emitter.setSprite(null);
 
 					editor.setIcon(emitter, null);

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java
Patch:
@@ -62,6 +62,7 @@
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 public class ParticleEditor extends JFrame {
+	public static final String DEFAULT_PARTICLE = "particle.png"; 
 	LwjglCanvas lwjglCanvas;
 	JPanel rowsPanel;
 	JPanel editRowsPanel;
@@ -428,7 +429,7 @@ private void loadImage (ParticleEmitter emitter) {
 			String imageName = new File(imagePath.replace('\\', '/')).getName();
 			try {
 				FileHandle file;
-				if (imagePath.equals("particle.png"))
+				if (imagePath.equals(ParticleEditor.DEFAULT_PARTICLE))
 					file = Gdx.files.classpath(imagePath);
 				else
 					file = Gdx.files.absolute(imagePath);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -224,6 +224,8 @@ public boolean isAccelerometerAvailable () {
 	}
 
 	public boolean isKeyPressed (int key) {
+		if (!Keyboard.isCreated()) return false;
+		
 		if (key == Input.Keys.ANY_KEY)
 			return pressedKeys > 0;
 		else

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglHeadlessApplication.java
Patch:
@@ -53,6 +53,7 @@ public LwjglHeadlessApplication(ApplicationListener listener) {
 		this.net = new LwjglNet();
 
 		Gdx.app = this;
+		Gdx.app.getType()
 		Gdx.files = files;
 		Gdx.net = net;
 		initialize();
@@ -149,7 +150,7 @@ public Net getNet() {
 
 	@Override
 	public ApplicationType getType() {
-		return ApplicationType.Desktop;
+		return ApplicationType.HeadlessDesktop;
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -99,7 +99,7 @@ public interface Application {
 	 * 
 	 * @author mzechner */
 	public enum ApplicationType {
-		Android, Desktop, Applet, WebGL, iOS
+		Android, Desktop, HeadlessDesktop, Applet, WebGL, iOS
 	}
 
 	public static final int LOG_NONE = 0;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglHeadlessApplication.java
Patch:
@@ -47,6 +47,7 @@ public class LwjglHeadlessApplication implements Application {
 	protected int logLevel = LOG_INFO;
 
 	public LwjglHeadlessApplication(ApplicationListener listener) {
+		LwjglNativesLoader.load();
 		this.listener = listener;
 		this.files = new LwjglFiles();
 		this.net = new LwjglNet();

File: gdx/src/com/badlogic/gdx/assets/loaders/TextureLoader.java
Patch:
@@ -76,9 +76,9 @@ public void loadAsync (AssetManager manager, String fileName, FileHandle file, T
 			}
 		} else {
 			info.data = parameter.textureData;
-			if (!info.data.isPrepared()) info.data.prepare();
 			info.texture = parameter.texture;
 		}
+		if (!info.data.isPrepared()) info.data.prepare();
 	}
 
 	@Override

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -17,9 +17,7 @@
 package com.badlogic.gdx.files;
 
 import java.io.BufferedInputStream;
-import java.io.BufferedOutputStream;
 import java.io.BufferedReader;
-import java.io.File;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.Reader;

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java
Patch:
@@ -315,7 +315,7 @@ public synchronized TextureAtlas generateTextureAtlas (TextureFilter minFilter,
 		TextureAtlas atlas = new TextureAtlas();
 		for (Page page : pages) {
 			if (page.rects.size != 0) {
-				Texture texture = new Texture(new PixmapTextureData(page.image, page.image.getFormat(), useMipMaps, true)) {
+				Texture texture = new Texture(new PixmapTextureData(page.image, page.image.getFormat(), useMipMaps, false, true)) {
 					@Override
 					public void dispose () {
 						super.dispose();
@@ -343,7 +343,7 @@ public synchronized void updateTextureAtlas (TextureAtlas atlas, TextureFilter m
 		for (Page page : pages) {
 			if (page.texture == null) {
 				if (page.rects.size != 0 && page.addedRects.size > 0) {
-					page.texture = new Texture(new PixmapTextureData(page.image, page.image.getFormat(), useMipMaps, true)) {
+					page.texture = new Texture(new PixmapTextureData(page.image, page.image.getFormat(), useMipMaps, false, true)) {
 						@Override
 						public void dispose () {
 							super.dispose();

File: gdx/src/com/badlogic/gdx/assets/loaders/TextureLoader.java
Patch:
@@ -76,9 +76,9 @@ public void loadAsync (AssetManager manager, String fileName, FileHandle file, T
 			}
 		} else {
 			info.data = parameter.textureData;
-			if (!info.data.isPrepared()) info.data.prepare();
 			info.texture = parameter.texture;
 		}
+		if (!info.data.isPrepared()) info.data.prepare();
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -612,7 +612,7 @@ public void box(VertexInfo corner000, VertexInfo corner010, VertexInfo corner100
 			rect(i000, i100, i110, i010);
 			rect(i101, i001, i011, i111);
 			index(i000, i001, i010, i011, i110, i111, i100, i101);
-		} else if (primitiveType != GL10.GL_POINTS) {
+		} else if (primitiveType == GL10.GL_POINTS) {
 			ensureRectangleIndices(2);
 			rect(i000, i100, i110, i010);
 			rect(i101, i001, i011, i111);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -612,7 +612,7 @@ public void box(VertexInfo corner000, VertexInfo corner010, VertexInfo corner100
 			rect(i000, i100, i110, i010);
 			rect(i101, i001, i011, i111);
 			index(i000, i001, i010, i011, i110, i111, i100, i101);
-		} else if (primitiveType != GL10.GL_POINTS) {
+		} else if (primitiveType == GL10.GL_POINTS) {
 			ensureRectangleIndices(2);
 			rect(i000, i100, i110, i010);
 			rect(i101, i001, i011, i111);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.badlogic.gdx.scenes.scene2d.ui;
 
-import static com.badlogic.gdx.utils.SharedLibraryLoader.*;
-
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.Input.Keys;
@@ -58,6 +56,8 @@
  * @author mzechner
  * @author Nathan Sweet */
 public class TextField extends Widget implements Disableable {
+	static private boolean isMac = System.getProperty("os.name").contains("Mac");
+
 	static private final char BACKSPACE = 8;
 	static private final char ENTER_DESKTOP = '\r';
 	static private final char ENTER_ANDROID = '\n';

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/reflect/ClassReflection.java
Patch:
@@ -48,7 +48,7 @@ static public boolean isInstance (Class c, Object obj) {
 	static public boolean isAssignableFrom (Class c1, Class c2) {
 		Type c1Type = ReflectionCache.getType(c1);
 		Type c2Type = ReflectionCache.getType(c2);
-		return c2Type.isAssignableFrom(c1Type);
+		return c1Type.isAssignableFrom(c2Type);
 	}
 
 	/** Returns true if the class or interface represented by the supplied Class is a member class. */

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/Type.java
Patch:
@@ -70,7 +70,7 @@ public Type getSuperclass () {
 	/** @param otherType the other type
 	 * @return whether this type is assignable to the other type. */
 	public boolean isAssignableFrom (Type otherType) {
-		return assignables.contains(otherType.getClassOfType());
+		return otherType.assignables.contains(getClassOfType());
 	}
 
 	/** @param name the name of the field
@@ -117,7 +117,6 @@ public Field[] getDeclaredFields () {
 	 * @return the public method that matches the name and parameter types of this type or one of its super interfaces.
 	 * @throws NoSuchMethodException */
 	public Method getMethod (String name, Class... parameterTypes) throws NoSuchMethodException {
-		ArrayList<Method> allMethods = new ArrayList<Method>();
 		Type t = this;
 		while (t != null) {
 			Method[] declMethods = t.getDeclaredMethods();

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/reflect/ClassReflection.java
Patch:
@@ -48,7 +48,7 @@ static public boolean isInstance (Class c, Object obj) {
 	static public boolean isAssignableFrom (Class c1, Class c2) {
 		Type c1Type = ReflectionCache.getType(c1);
 		Type c2Type = ReflectionCache.getType(c2);
-		return c2Type.isAssignableFrom(c1Type);
+		return c1Type.isAssignableFrom(c2Type);
 	}
 
 	/** Returns true if the class or interface represented by the supplied Class is a member class. */

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/Type.java
Patch:
@@ -70,7 +70,7 @@ public Type getSuperclass () {
 	/** @param otherType the other type
 	 * @return whether this type is assignable to the other type. */
 	public boolean isAssignableFrom (Type otherType) {
-		return assignables.contains(otherType.getClassOfType());
+		return otherType.assignables.contains(getClassOfType());
 	}
 
 	/** @param name the name of the field
@@ -117,7 +117,6 @@ public Field[] getDeclaredFields () {
 	 * @return the public method that matches the name and parameter types of this type or one of its super interfaces.
 	 * @throws NoSuchMethodException */
 	public Method getMethod (String name, Class... parameterTypes) throws NoSuchMethodException {
-		ArrayList<Method> allMethods = new ArrayList<Method>();
 		Type t = this;
 		while (t != null) {
 			Method[] declMethods = t.getDeclaredMethods();

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultShaderProvider.java
Patch:
@@ -48,5 +48,5 @@ public DefaultShaderProvider() {
 	@Override
 	protected Shader createShader(final Renderable renderable) {
 	   return new DefaultShader(renderable, config);
-	}
+	}
 }
\ No newline at end of file

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -311,7 +311,7 @@ public void shrink () {
 	 * @return {@link #items} */
 	public T[] ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;
-		if (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));
+		if (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));
 		return items;
 	}
 

File: gdx/src/com/badlogic/gdx/utils/BooleanArray.java
Patch:
@@ -97,7 +97,7 @@ public void addAll (boolean... array) {
 	public void addAll (boolean[] array, int offset, int length) {
 		boolean[] items = this.items;
 		int sizeNeeded = size + length;
-		if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
+		if (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
 		System.arraycopy(array, offset, items, size, length);
 		size += length;
 	}
@@ -197,7 +197,7 @@ public void shrink () {
 	 * @return {@link #items} */
 	public boolean[] ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;
-		if (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));
+		if (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));
 		return items;
 	}
 

File: gdx/src/com/badlogic/gdx/utils/CharArray.java
Patch:
@@ -95,7 +95,7 @@ public void addAll (char... array) {
 	public void addAll (char[] array, int offset, int length) {
 		char[] items = this.items;
 		int sizeNeeded = size + length ;
-		if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
+		if (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
 		System.arraycopy(array, offset, items, size, length);
 		size += length;
 	}
@@ -238,7 +238,7 @@ public void shrink () {
 	 * @return {@link #items} */
 	public char[] ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;
-		if (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));
+		if (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));
 		return items;
 	}
 

File: gdx/src/com/badlogic/gdx/utils/FloatArray.java
Patch:
@@ -95,7 +95,7 @@ public void addAll (float... array) {
 	public void addAll (float[] array, int offset, int length) {
 		float[] items = this.items;
 		int sizeNeeded = size + length;
-		if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
+		if (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
 		System.arraycopy(array, offset, items, size, length);
 		size += length;
 	}
@@ -238,7 +238,7 @@ public void shrink () {
 	 * @return {@link #items} */
 	public float[] ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;
-		if (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));
+		if (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));
 		return items;
 	}
 

File: gdx/src/com/badlogic/gdx/utils/IntArray.java
Patch:
@@ -95,7 +95,7 @@ public void addAll (int... array) {
 	public void addAll (int[] array, int offset, int length) {
 		int[] items = this.items;
 		int sizeNeeded = size + length;
-		if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
+		if (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
 		System.arraycopy(array, offset, items, size, length);
 		size += length;
 	}
@@ -238,7 +238,7 @@ public void shrink () {
 	 * @return {@link #items} */
 	public int[] ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;
-		if (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));
+		if (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));
 		return items;
 	}
 

File: gdx/src/com/badlogic/gdx/utils/LongArray.java
Patch:
@@ -95,7 +95,7 @@ public void addAll (long... array) {
 	public void addAll (long[] array, int offset, int length) {
 		long[] items = this.items;
 		int sizeNeeded = size + length;
-		if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
+		if (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
 		System.arraycopy(array, offset, items, size, length);
 		size += length;
 	}
@@ -238,7 +238,7 @@ public void shrink () {
 	 * @return {@link #items} */
 	public long[] ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;
-		if (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));
+		if (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));
 		return items;
 	}
 

File: gdx/src/com/badlogic/gdx/utils/ShortArray.java
Patch:
@@ -102,7 +102,7 @@ public void addAll (short... array) {
 	public void addAll (short[] array, int offset, int length) {
 		short[] items = this.items;
 		int sizeNeeded = size + length;
-		if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
+		if (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
 		System.arraycopy(array, offset, items, size, length);
 		size += length;
 	}
@@ -245,7 +245,7 @@ public void shrink () {
 	 * @return {@link #items} */
 	public short[] ensureCapacity (int additionalCapacity) {
 		int sizeNeeded = size + additionalCapacity;
-		if (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));
+		if (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));
 		return items;
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTestWrapper.java
Patch:
@@ -78,7 +78,6 @@
 import com.badlogic.gdx.tests.PixelsPerInchTest;
 import com.badlogic.gdx.tests.ProjectiveTextureTest;
 import com.badlogic.gdx.tests.RotationTest;
-import com.badlogic.gdx.tests.ShadowMappingTest;
 import com.badlogic.gdx.tests.ShapeRendererTest;
 import com.badlogic.gdx.tests.SimpleAnimationTest;
 import com.badlogic.gdx.tests.SimpleDecalTest;
@@ -96,6 +95,7 @@
 import com.badlogic.gdx.tests.UITest;
 import com.badlogic.gdx.tests.VertexBufferObjectShaderTest;
 import com.badlogic.gdx.tests.YDownTest;
+import com.badlogic.gdx.tests.g3d.ShadowMappingTest;
 import com.badlogic.gdx.tests.superkoalio.SuperKoalio;
 import com.badlogic.gdx.tests.utils.GdxTest;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -44,6 +44,7 @@
 import com.badlogic.gdx.tests.g3d.ModelTest;
 import com.badlogic.gdx.tests.g3d.ShaderCollectionTest;
 import com.badlogic.gdx.tests.g3d.ShaderTest;
+import com.badlogic.gdx.tests.g3d.ShadowMappingTest;
 import com.badlogic.gdx.tests.g3d.SkeletonTest;
 import com.badlogic.gdx.tests.gles2.HelloTriangle;
 import com.badlogic.gdx.tests.gles2.SimpleVertexShader;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTestWrapper.java
Patch:
@@ -78,7 +78,6 @@
 import com.badlogic.gdx.tests.PixelsPerInchTest;
 import com.badlogic.gdx.tests.ProjectiveTextureTest;
 import com.badlogic.gdx.tests.RotationTest;
-import com.badlogic.gdx.tests.ShadowMappingTest;
 import com.badlogic.gdx.tests.ShapeRendererTest;
 import com.badlogic.gdx.tests.SimpleAnimationTest;
 import com.badlogic.gdx.tests.SimpleDecalTest;
@@ -96,6 +95,7 @@
 import com.badlogic.gdx.tests.UITest;
 import com.badlogic.gdx.tests.VertexBufferObjectShaderTest;
 import com.badlogic.gdx.tests.YDownTest;
+import com.badlogic.gdx.tests.g3d.ShadowMappingTest;
 import com.badlogic.gdx.tests.superkoalio.SuperKoalio;
 import com.badlogic.gdx.tests.utils.GdxTest;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -44,6 +44,7 @@
 import com.badlogic.gdx.tests.g3d.ModelTest;
 import com.badlogic.gdx.tests.g3d.ShaderCollectionTest;
 import com.badlogic.gdx.tests.g3d.ShaderTest;
+import com.badlogic.gdx.tests.g3d.ShadowMappingTest;
 import com.badlogic.gdx.tests.g3d.SkeletonTest;
 import com.badlogic.gdx.tests.gles2.HelloTriangle;
 import com.badlogic.gdx.tests.gles2.SimpleVertexShader;

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -863,7 +863,7 @@ public <T> T readValue (Class<T> type, Class elementType, JsonValue jsonData) {
 				return (T)newArray;
 			}
 			if (ClassReflection.isAssignableFrom(List.class, type)) {
-				List newArray = type == null ? new ArrayList() : (List)newInstance(type);
+				List newArray = type == List.class ? new ArrayList() : (List)newInstance(type);
 				for (JsonValue child = jsonData.child(); child != null; child = child.next())
 					newArray.add(readValue(elementType, null, child));
 				return (T)newArray;

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -456,7 +456,7 @@ public void mkdirs () {
 	public boolean exists () {
 		switch (type) {
 		case Internal:
-			if (file.exists()) return true;
+			if (file().exists()) return true;
 			// Fall through.
 		case Classpath:
 			return FileHandle.class.getResource("/" + file.getPath().replace('\\', '/')) != null;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/io/DataInputStream.java
Patch:
@@ -113,13 +113,13 @@ private int readUtfChar (StringBuilder sb) throws IOException {
 			sb.append((char)a);
 			return 1;
 		}
-		if ((a & 0xe0) == 0xb0) {
+		if ((a & 0xe0) == 0xc0) {
 			int b = readUnsignedByte();
 			sb.append((char)(((a & 0x1F) << 6) | (b & 0x3F)));
 			return 2;
 		}
 		if ((a & 0xf0) == 0xe0) {
-			int b = is.read();
+			int b = readUnsignedByte();
 			int c = readUnsignedByte();
 			sb.append((char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F)));
 			return 3;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/io/DataInputStream.java
Patch:
@@ -113,13 +113,13 @@ private int readUtfChar (StringBuilder sb) throws IOException {
 			sb.append((char)a);
 			return 1;
 		}
-		if ((a & 0xe0) == 0xb0) {
+		if ((a & 0xe0) == 0xc0) {
 			int b = readUnsignedByte();
 			sb.append((char)(((a & 0x1F) << 6) | (b & 0x3F)));
 			return 2;
 		}
 		if ((a & 0xf0) == 0xe0) {
-			int b = is.read();
+			int b = readUnsignedByte();
 			int c = readUnsignedByte();
 			sb.append((char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F)));
 			return 3;

File: gdx/src/com/badlogic/gdx/utils/JsonReader.java
Patch:
@@ -63,7 +63,7 @@ public JsonValue parse (Reader reader) {
 	@Override
 	public JsonValue parse (InputStream input) {
 		try {
-			return parse(new InputStreamReader(input, "ISO-8859-1"));
+			return parse(new InputStreamReader(input, "UTF-8"));
 		} catch (IOException ex) {
 			throw new SerializationException(ex);
 		} finally {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -30,7 +30,7 @@
 public class LwjglApplicationConfiguration {
 	/** If true, OpenAL will not be used. This means {@link Application#getAudio()} returns null and the gdx-openal.jar and OpenAL
 	 * natives are not needed. */
-	static public final boolean disableAudio = true;
+	static public boolean disableAudio;
 
 	/** whether to attempt to use OpenGL ES 2.0. Note GL2 may not be available even if this is true. default: false **/
 	public boolean useGL20 = false;

File: demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/veryangryrobots/WorldPresenter.java
Patch:
@@ -16,14 +16,16 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.graphics.GL10;
+
 import com.badlydrawngames.general.GameScreen;
+import com.badlydrawngames.veryangryrobots.WorldView.Presenter;
 import com.badlydrawngames.veryangryrobots.mobiles.Player;
 
 /** <p>
  * It is the role of the <code>WorldPresenter</code> to glue together the {@link World} and the {@link WorldView}. It passes on
  * information from the controls in the WorldView to the World, updates it, then asks the WorldView to draw everything on its
  * behalf. The {@link WorldView} tells this <code>WorldPresenter</code> what to do via the methods provided by the
- * {@link WorldView#Presenter} interface.
+ * {@link Presenter} interface.
  * </p>
  * 
  * @author Rod */

File: demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/veryangryrobots/mobiles/GameObject.java
Patch:
@@ -75,7 +75,7 @@ public Rectangle bounds () {
 		return bounds;
 	}
 
-	/** Switches this game object into a new state and resets {@link stateTime}.
+	/** Switches this game object into a new state and resets {@link #stateTime}.
 	 * @param state the new state. */
 	public void setState (int state) {
 		this.state = state;

File: extensions/gdx-tiled-preprocessor/src/com/badlogic/gdx/tiledmappacker/TiledMapPacker.java
Patch:
@@ -60,14 +60,14 @@
 import com.badlogic.gdx.utils.ObjectMap;
 
 /** Given one or more TMX tilemaps, packs all tileset resources used across the maps into a <b>single</b> {@link TextureAtlas} and
- * produces a new TMX file to be loaded with an {@link AtlasTiledMapLoader} loader. Optionally, it can keep track of unused tiles
+ * produces a new TMX file to be loaded with an AtlasTiledMapLoader loader. Optionally, it can keep track of unused tiles
  * and omit them from the generated atlas, reducing the resource size.
  * 
  * The original TMX map file will be parsed by using the {@link TmxMapLoader} loader, thus access to a valid OpenGL context is
  * <b>required</b>, that's why an LwjglApplication is created by this preprocessor: this is probably subject to change in the
  * future, where loading both maps metadata and graphics resources should be made conditional.
  * 
- * The new TMX map file will contains a new property, namely "atlas", whose value will enable the {@link AtlasTiledMapLoader} to
+ * The new TMX map file will contains a new property, namely "atlas", whose value will enable the AtlasTiledMapLoader to
  * correctly read the associated TextureAtlas representing the tileset.
  * 
  * @author David Fraska and others (initial implementation, tell me who you are!)

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -566,7 +566,7 @@ public void setX (float x) {
 		}
 
 		public void setY (float y) {
-			super.setY(y + region.offetY);
+			super.setY(y + region.offsetY);
 		}
 
 		public void setBounds (float x, float y, float width, float height) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -566,7 +566,7 @@ public void setX (float x) {
 		}
 
 		public void setY (float y) {
-			super.setY(y + region.offetY);
+			super.setY(y + region.offsetY);
 		}
 
 		public void setBounds (float x, float y, float width, float height) {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -159,8 +159,8 @@ protected void hideStatusBar (AndroidApplicationConfiguration config) {
 		}
 	}
 	
-	protected void useImmersiveMode (AndroidApplicationConfiguraion config) {
-		if (!conifg.useImmersiveMode || getVersion() < 19) return;
+	protected void useImmersiveMode (AndroidApplicationConfiguration config) {
+		if (!config.useImmersiveMode || getVersion() < 19) return;
 		
 		View view = getWindow().getDecorView();
 		try {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ClickListener.java
Patch:
@@ -57,6 +57,7 @@ public boolean touchDown (InputEvent event, float x, float y, int pointer, int b
 		pressedButton = button;
 		touchDownX = x;
 		touchDownY = y;
+		over = false;
 		return true;
 	}
 

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -184,7 +184,7 @@ public void toJson (Object object, Class knownType, FileHandle file) {
 	public void toJson (Object object, Class knownType, Class elementType, FileHandle file) {
 		Writer writer = null;
 		try {
-			writer = file.writer(false);
+			writer = file.writer(false, "UTF-8");
 			toJson(object, knownType, elementType, writer);
 		} catch (Exception ex) {
 			throw new SerializationException("Error writing file: " + file, ex);

File: gdx/src/com/badlogic/gdx/utils/JsonReader.java
Patch:
@@ -74,7 +74,7 @@ public JsonValue parse (InputStream input) {
 	@Override
 	public JsonValue parse (FileHandle file) {
 		try {
-			return parse(file.read());
+			return parse(file.reader("UTF-8"));
 		} catch (Exception ex) {
 			throw new SerializationException("Error parsing file: " + file, ex);
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/FrustumCullingTest.java
Patch:
@@ -18,7 +18,6 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
@@ -27,7 +26,6 @@
 import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
 import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
 import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.Quaternion;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.physics.bullet.collision.btBroadphasePairArray;
 import com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher;

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -43,7 +43,7 @@ public OrthographicCamera (float viewportWidth, float viewportHeight) {
 		this.near = 0;
 		update();
 	}
-
+
 	private final Vector3 tmp = new Vector3();
 
 	@Override
@@ -84,7 +84,7 @@ public void setToOrtho (boolean yDown, float viewportWidth, float viewportHeight
 			direction.set(0, 0, 1);
 		} else {
 			up.set(0, 1, 0);
-			direction.set(0, 0, 1);
+			direction.set(0, 0, -1);
 		}
 		position.set(zoom * viewportWidth / 2.0f, zoom * viewportHeight / 2.0f, 0);
 		this.viewportWidth = viewportWidth;

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -43,7 +43,7 @@ public OrthographicCamera (float viewportWidth, float viewportHeight) {
 		this.near = 0;
 		update();
 	}
-
+
 	private final Vector3 tmp = new Vector3();
 
 	@Override
@@ -84,7 +84,7 @@ public void setToOrtho (boolean yDown, float viewportWidth, float viewportHeight
 			direction.set(0, 0, 1);
 		} else {
 			up.set(0, 1, 0);
-			direction.set(0, 0, 1);
+			direction.set(0, 0, -1);
 		}
 		position.set(zoom * viewportWidth / 2.0f, zoom * viewportHeight / 2.0f, 0);
 		this.viewportWidth = viewportWidth;

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -478,7 +478,7 @@ public void mkdirs () {
 	}
 
 	/** Returns true if the file exists. On Android, a {@link FileType#Classpath} or {@link FileType#Internal} handle to a directory
-	 * will always return false. */
+	 * will always return false. Note that this can be very slow for internal files on Android! */
 	public boolean exists () {
 		switch (type) {
 		case Internal:

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -82,6 +82,9 @@ public void setToOrtho (boolean yDown, float viewportWidth, float viewportHeight
 		if (yDown) {
 			up.set(0, -1, 0);
 			direction.set(0, 0, 1);
+		} else {
+			up.set(0, 1, 0);
+			direction.set(0, 0, 1);
 		}
 		position.set(zoom * viewportWidth / 2.0f, zoom * viewportHeight / 2.0f, 0);
 		this.viewportWidth = viewportWidth;

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -54,7 +54,7 @@ public void update () {
 	@Override
 	public void update (boolean updateFrustum) {
 		projection.setToOrtho(zoom * -viewportWidth / 2, zoom * (viewportWidth / 2), zoom * -(viewportHeight / 2), zoom
-			* viewportHeight / 2, Math.abs(near), Math.abs(far));
+			* viewportHeight / 2, near, far);
 		view.setToLookAt(position, tmp.set(position).add(direction), up);
 		combined.set(projection);
 		Matrix4.mul(combined.val, view.val);

File: gdx/src/com/badlogic/gdx/assets/loaders/BitmapFontLoader.java
Patch:
@@ -62,7 +62,7 @@ public BitmapFont loadSync (AssetManager manager, String fileName, FileHandle fi
 		for (int i=0; i<regs.length; i++) {
 			TextureRegion region = new TextureRegion(manager.get(data.getImagePath(i), Texture.class));
 			if (parameter != null) { 
-				region.getTexture().setFilter(parameter.minFitler, parameter.maxFilter);
+				region.getTexture().setFilter(parameter.minFilter, parameter.maxFilter);
 			}
 			regs[i] = region;
 		}
@@ -76,7 +76,7 @@ static public class BitmapFontParameter extends AssetLoaderParameters<BitmapFont
 		/** whether to flipY the font or not **/
 		public boolean flip = false;
 		/** the minimum filter to be used for the backing texture */
-		public TextureFilter minFitler = TextureFilter.Nearest;
+		public TextureFilter minFilter = TextureFilter.Nearest;
 		/** the maximum filter to be used for the backing texture */
 		public TextureFilter maxFilter = TextureFilter.Nearest;
 		/** optional BitmapFontData to be used instead of loading the texture directly. Use this if your font is embedded in a skin. **/

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -381,7 +381,7 @@ public void log (String tag, String message) {
 	}
 
 	@Override
-	public void log (String tag, String message, Exception exception) {
+	public void log (String tag, String message, Throwable exception) {
 		if (logLevel >= LOG_INFO) Log.i(tag, message, exception);
 	}
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidDaydream.java
Patch:
@@ -371,7 +371,7 @@ public void log (String tag, String message) {
 	}
 
 	@Override
-	public void log (String tag, String message, Exception exception) {
+	public void log (String tag, String message, Throwable exception) {
 		if (logLevel >= LOG_INFO) Log.i(tag, message, exception);
 	}
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaper.java
Patch:
@@ -328,7 +328,7 @@ public void log (String tag, String message) {
 	}
 
 	@Override
-	public void log (String tag, String message, Exception exception) {
+	public void log (String tag, String message, Throwable exception) {
 		if (logLevel >= LOG_INFO) Log.i(tag, message, exception);
 	}
 

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplication.java
Patch:
@@ -377,7 +377,7 @@ public void log (String tag, String message) {
 		}
 	}
 
-	public void log (String tag, String message, Exception exception) {
+	public void log (String tag, String message, Throwable exception) {
 		if (logLevel >= LOG_INFO) {
 			System.out.println(tag + ": " + message);
 			exception.printStackTrace(System.out);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTCanvas.java
Patch:
@@ -357,7 +357,7 @@ public void log (String tag, String message) {
 	}
 
 	@Override
-	public void log (String tag, String message, Exception exception) {
+	public void log (String tag, String message, Throwable exception) {
 		if (logLevel >= LOG_INFO) {
 			System.out.println(tag + ": " + message);
 			exception.printStackTrace(System.out);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -347,7 +347,7 @@ public void log (String tag, String message) {
 	}
 
 	@Override
-	public void log (String tag, String message, Exception exception) {
+	public void log (String tag, String message, Throwable exception) {
 		if (logLevel >= LOG_INFO) {
 			System.out.println(tag + ": " + message);
 			exception.printStackTrace(System.out);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -356,7 +356,7 @@ public void log (String tag, String message) {
 	}
 
 	@Override
-	public void log (String tag, String message, Exception exception) {
+	public void log (String tag, String message, Throwable exception) {
 		if (logLevel >= LOG_INFO) {
 			System.out.println(tag + ": " + message);
 			exception.printStackTrace(System.out);

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
Patch:
@@ -264,7 +264,7 @@ public void log (String tag, String message) {
 	}
 
 	@Override
-	public void log (String tag, String message, Exception exception) {
+	public void log (String tag, String message, Throwable exception) {
 		if (logLevel > LOG_NONE) {
 			System.out.println("[info] " + tag + ": " + message);
 			exception.printStackTrace();

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -299,7 +299,7 @@ public void log (String tag, String message) {
 	}
 
 	@Override
-	public void log (String tag, String message, Exception exception) {
+	public void log (String tag, String message, Throwable exception) {
 		if (logLevel >= LOG_INFO) {
 			checkLogLabel();
 			log.setText(log.getText() + "\n" + tag + ": " + message + "\n" + exception.getMessage() + "\n");

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -129,7 +129,7 @@ public enum ApplicationType {
 	public void log (String tag, String message);
 
 	/** Logs a message to the console or logcat */
-	public void log (String tag, String message, Exception exception);
+	public void log (String tag, String message, Throwable exception);
 
 	/** Logs an error message to the console or logcat */
 	public void error (String tag, String message);

File: gdx/src/com/badlogic/gdx/math/Circle.java
Patch:
@@ -50,7 +50,7 @@ public void set (float x, float y, float radius) {
 		this.radius = radius;
 	}
     
-    public void set (Vector2 position, float radius) {
+	public void set (Vector2 position, float radius) {
 		this.x = position.x;
 		this.y = position.y;
 		this.radius = radius;

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/parsing/RobustJavaMethodParser.java
Patch:
@@ -162,7 +162,7 @@ private ArgumentType getArgumentType (Parameter parameter) {
 			if (arrayDim > 1) return ArgumentType.ObjectArray;
 			ArgumentType arrayType = arrayTypes.get(type);
 			if (arrayType == null) {
-				throw new RuntimeException("Unknown array type " + type);
+				return ArgumentType.ObjectArray;
 			}
 			return arrayType;
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InterpolationTest.java
Patch:
@@ -80,7 +80,7 @@ public void create() {
 		Gdx.gl.glClearColor(.3f, .3f, .3f, 1);
 		renderer = new ShapeRenderer();
 
-		Skin skin = new Skin(Gdx.files.internal("data/uiskin.json"));
+		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 
 		stage = new Stage();
 		resetPositions();

File: gdx/src/com/badlogic/gdx/utils/Pools.java
Patch:
@@ -51,7 +51,7 @@ static public void freeAll (Array objects) {
 		if (objects == null) throw new IllegalArgumentException("objects cannot be null.");
 		for (int i = 0, n = objects.size; i < n; i++) {
 			Object object = objects.get(i);
-			if (objects == null) continue;
+			if (object == null) continue;
 			ReflectionPool pool = typePools.get(object.getClass());
 			if (pool == null) return; // Ignore freeing an object that was never retained.
 			pool.free(object);

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/EffectPanel.java
Patch:
@@ -65,7 +65,6 @@ public ParticleEmitter newEmitter (String name, boolean select) {
 		emitter.getTint().setColors(new float[] {1, 0.12156863f, 0.047058824f});
 		emitter.getTransparency().setHigh(1);
 
-		emitter.setFlip(false, true);
 		emitter.setMaxParticleCount(25);
 		emitter.setImagePath("particle.png");
 
@@ -107,7 +106,6 @@ public ParticleEmitter newExampleEmitter (String name, boolean select) {
 		emitter.getTransparency().setTimeline(new float[] {0, 0.2f, 0.8f, 1});
 		emitter.getTransparency().setScaling(new float[] {0, 1, 0.75f, 0});
 		
-		emitter.setFlip(false, true);
 		emitter.setMaxParticleCount(200);
 		emitter.setImagePath("particle.png");
 		

File: gdx/src/com/badlogic/gdx/math/EarClippingTriangulator.java
Patch:
@@ -70,7 +70,7 @@ public ShortArray computeTriangles (float[] vertices, int offset, int count) {
 		indicesArray.ensureCapacity(vertexCount);
 		indicesArray.size = vertexCount;
 		short[] indices = this.indices = indicesArray.items;
-		if (areVerticesClockwise(vertices, 0, vertices.length)) {
+		if (areVerticesClockwise(vertices, offset, count)) {
 			for (short i = 0; i < vertexCount; i++)
 				indices[i] = i;
 		} else {

File: gdx/src/com/badlogic/gdx/math/EarClippingTriangulator.java
Patch:
@@ -70,7 +70,7 @@ public ShortArray computeTriangles (float[] vertices, int offset, int count) {
 		indicesArray.ensureCapacity(vertexCount);
 		indicesArray.size = vertexCount;
 		short[] indices = this.indices = indicesArray.items;
-		if (areVerticesClockwise(vertices, 0, vertices.length)) {
+		if (areVerticesClockwise(vertices, offset, count)) {
 			for (short i = 0; i < vertexCount; i++)
 				indices[i] = i;
 		} else {

File: gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
Patch:
@@ -114,6 +114,8 @@ public void set (Sprite sprite) {
 		y = sprite.y;
 		width = sprite.width;
 		height = sprite.height;
+		regionWidth = sprite.regionWidth;
+		regionHeight = sprite.regionHeight;
 		originX = sprite.originX;
 		originY = sprite.originY;
 		rotation = sprite.rotation;

File: gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
Patch:
@@ -114,6 +114,8 @@ public void set (Sprite sprite) {
 		y = sprite.y;
 		width = sprite.width;
 		height = sprite.height;
+		regionWidth = sprite.regionWidth;
+		regionHeight = sprite.regionHeight;
 		originX = sprite.originX;
 		originY = sprite.originY;
 		rotation = sprite.rotation;

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/parsing/RobustJavaMethodParser.java
Patch:
@@ -162,7 +162,7 @@ private ArgumentType getArgumentType (Parameter parameter) {
 			if (arrayDim > 1) return ArgumentType.ObjectArray;
 			ArgumentType arrayType = arrayTypes.get(type);
 			if (arrayType == null) {
-				throw new RuntimeException("Unknown array type " + type);
+				return ArgumentType.ObjectArray;
 			}
 			return arrayType;
 		}

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/ImageProcessor.java
Patch:
@@ -96,7 +96,7 @@ public Rect addImage (BufferedImage image, String name) {
 			if (existing != null) {
 				System.out.println(rect.name + " (alias of " + existing.name + ")");
 				existing.aliases.add(new Alias(rect));
-				// return null;
+				return null;
 			}
 			crcs.put(crc, rect);
 		}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/reflect/ArrayReflection.java
Patch:
@@ -34,8 +34,7 @@ static public int getLength (Object array) {
 
 	/** Returns the value of the indexed component in the supplied array. */
 	static public Object get (Object array, int index) {
-		ReflectionCache.instance.getArrayElement(ReflectionCache.getType(array.getClass()), array, index);
-		return array;
+		return ReflectionCache.instance.getArrayElement(ReflectionCache.getType(array.getClass()), array, index);
 	}
 
 	/** Sets the value of the indexed component in the supplied array to the supplied value. */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/HorizontalGroup.java
Patch:
@@ -92,9 +92,9 @@ public void layout () {
 				height = child.getHeight();
 			}
 			float y;
-			if ((alignment & Align.left) != 0)
+			if ((alignment & Align.bottom) != 0)
 				y = 0;
-			else if ((alignment & Align.right) != 0)
+			else if ((alignment & Align.top) != 0)
 				y = groupHeight - height;
 			else
 				y = (groupHeight - height) / 2;

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -674,7 +674,7 @@ public void circle(float radius, final Vector3 center, final Vector3 normal, fin
 	@Override
 	public void circle(float radius, float centerX, float centerY, float centerZ, float normalX, float normalY, float normalZ, float tangentX, float tangentY, float tangentZ, float binormalX, float binormalY, float binormalZ, int divisions, float angleFrom, float angleTo) {
 		
-		ellipse(radius, radius, 0, 0, centerX, centerY, centerZ, normalX, normalY, normalZ, tangentX, tangentY, tangentZ, binormalX, binormalY, binormalZ, divisions, angleFrom, angleTo);
+		ellipse(radius*2, radius*2, 0, 0, centerX, centerY, centerZ, normalX, normalY, normalZ, tangentX, tangentY, tangentZ, binormalX, binormalY, binormalZ, divisions, angleFrom, angleTo);
 	}
 	
 	@Override

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -705,11 +705,12 @@ public void ellipse(float width, float height, float innerWidth, float innerHeig
 		}
 		else if (innerWidth == width && innerHeight == height){
 			ensureVertices(divisions + 1);
+			ensureIndices(divisions + 1);
 			if(primitiveType != GL10.GL_LINES)
 				throw new GdxRuntimeException("Incorrect primitive type : expect GL_LINES because innerWidth == width && innerHeight == height");
 		}
 		else {
-			ensureRectangleIndices(divisions + 1);
+			ensureRectangles((divisions + 1)*2, divisions + 1);
 		}
 		
 		final float ao = MathUtils.degreesToRadians * angleFrom;

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/gdxBulletJNI.java
Patch:
@@ -3039,6 +3039,8 @@ protected Matrix4 newObject() {
   public final static native boolean btDiscreteDynamicsWorld_getSynchronizeAllMotionStates(long jarg1, btDiscreteDynamicsWorld jarg1_);
   public final static native void btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution(long jarg1, btDiscreteDynamicsWorld jarg1_, boolean jarg2);
   public final static native boolean btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution(long jarg1, btDiscreteDynamicsWorld jarg1_);
+  public final static native void btDiscreteDynamicsWorld_interpolation_set(long jarg1, btDiscreteDynamicsWorld jarg1_, boolean jarg2);
+  public final static native boolean btDiscreteDynamicsWorld_interpolation_get(long jarg1, btDiscreteDynamicsWorld jarg1_);
   public final static native void delete_btCharacterControllerInterface(long jarg1);
   public final static native void btCharacterControllerInterface_setWalkDirection(long jarg1, btCharacterControllerInterface jarg1_, Vector3 jarg2);
   public final static native void btCharacterControllerInterface_setVelocityForTimeInterval(long jarg1, btCharacterControllerInterface jarg1_, Vector3 jarg2, float jarg3);

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -53,7 +53,7 @@ public void update () {
 
 	@Override
 	public void update (boolean updateFrustum) {
-		projection.setToOrtho(zoom * -viewportWidth / 2, zoom * (viewportWidth / 2 - 1), zoom * -(viewportHeight / 2 - 1), zoom
+		projection.setToOrtho(zoom * -viewportWidth / 2, zoom * (viewportWidth / 2), zoom * -(viewportHeight / 2), zoom
 			* viewportHeight / 2, Math.abs(near), Math.abs(far));
 		view.setToLookAt(position, tmp.set(position).add(direction), up);
 		combined.set(projection);

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -58,7 +58,7 @@ public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.width = 320;
-		config.height = 240;
+		config.height = 241;
 		new LwjglApplication(test, config);
 	}
 }

File: extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
Patch:
@@ -60,6 +60,9 @@ public void build (String outputDir, String appName, String packageName, String
 		values.put("%MAIN_CLASS%", mainClass);
 		
 		copyAndReplace(outputDir, project, values);
+		
+		// HACK executable flag isn't preserved for whatever reason...
+		new File(outputDir, "gradlew").setExecutable(true);
 	}
 
 	private void copyAndReplace (String outputDir, Project project, Map<String, String> values) {

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/AntScriptGenerator.java
Patch:
@@ -102,7 +102,9 @@ public void generate (BuildConfig config, BuildTarget... targets) {
 					buildFiles.add(buildFileName);
 				} 
 				sharedLibFiles.add(getSharedLibFilename(target.os, target.is64Bit, config.sharedLibName));
-				libsDirs.add("../" + libsDir.path().replace('\\', '/'));
+				if(target.os != TargetOs.Android && target.os != TargetOs.IOS) {
+					libsDirs.add("../" + libsDir.path().replace('\\', '/'));
+				}
 			}
 		}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -499,7 +499,7 @@ public void layout () {
 				if (vScrollOnRight) {
 					vKnobBounds.x = width - bgRightWidth - vScrollKnob.getMinWidth();
 				} else {
-					vKnobBounds.x = 0;
+					vKnobBounds.x = bgLeftWidth;
 				}
 				vKnobBounds.y = vScrollBounds.y + (int)((vScrollBounds.height - vKnobBounds.height) * (1 - getScrollPercentY()));
 			} else {

File: extensions/gdx-setup-ui/src/aurelienribon/gdxsetupui/BaseProjectConfiguration.java
Patch:
@@ -33,7 +33,6 @@ public abstract class BaseProjectConfiguration {
 	public String suffixCommon = "";
 	public String suffixDesktop = "-desktop";
 	public String suffixAndroid = "-android";
-	public String suffixIos = "-ios";
 	public String suffixRobovm = "-robovm";
 	public String suffixHtml = "-html";
 

File: extensions/gdx-setup-ui/src/aurelienribon/gdxsetupui/LibraryDef.java
Patch:
@@ -37,7 +37,6 @@ public class LibraryDef {
 	public final List<String> libsDesktop;
 	public final List<String> libsAndroid;
 	public final List<String> libsHtml;
-	public final List<String> libsIos;
 	public final List<String> libsRobovm;
 	public final List<String> data;
 
@@ -60,7 +59,6 @@ public LibraryDef(String content) {
 		this.libsDesktop = ParseUtils.parseBlockAsList(content, "libs-desktop");
 		this.libsAndroid = ParseUtils.parseBlockAsList(content, "libs-android");
 		this.libsHtml = ParseUtils.parseBlockAsList(content, "libs-html");
-		this.libsIos = ParseUtils.parseBlockAsList(content, "libs-ios");
 		this.libsRobovm = ParseUtils.parseBlockAsList(content, "libs-robovm");
 		this.data = ParseUtils.parseBlockAsList(content, "data");
 	}

File: extensions/gdx-setup-ui/src/aurelienribon/gdxsetupui/ProjectUpdate.java
Patch:
@@ -67,7 +67,7 @@ public void inflateLibraries() throws IOException {
 		File desktopPrjLibsDir = new File(Helper.getDesktopPrjPath(cfg) + "libs");
 		File androidPrjLibsDir = new File(Helper.getAndroidPrjPath(cfg) + "libs");
 		File htmlPrjLibsDir = new File(Helper.getHtmlPrjPath(cfg) + "war/WEB-INF/lib");
-		File iosPrjLibsDir = new File(Helper.getIosPrjPath(cfg) + "libs");
+		File robovmPrjLibsDir = new File(Helper.getRobovmPrjPath(cfg) + "libs");
 		File dataDir = new File(Helper.getAndroidPrjPath(cfg) + "assets");
 
 		for (String library : cfg.libraries) {
@@ -102,8 +102,8 @@ public void inflateLibraries() throws IOException {
 				}
 				
 				if(cfg.isIosIncluded) {
-					for(String elemName : def.libsIos)
-						if (entryName.endsWith(elemName)) copyEntry(zis, elemName, iosPrjLibsDir);
+					for(String elemName : def.libsRobovm)
+						if (entryName.endsWith(elemName)) copyEntry(zis, elemName, robovmPrjLibsDir);
 				}
 			}
 

File: extensions/gdx-setup-ui/src/aurelienribon/gdxsetupui/ui/panels/AdvancedSettingsPanel.java
Patch:
@@ -36,7 +36,7 @@ public AdvancedSettingsPanel() {
 		desktopSuffixField.setText(Ctx.cfgSetup.suffixDesktop);
 		androidSuffixField.setText(Ctx.cfgSetup.suffixAndroid);
 		htmlSuffixField.setText(Ctx.cfgSetup.suffixHtml);
-      iosSuffixField.setText(Ctx.cfgSetup.suffixIos);
+      iosSuffixField.setText(Ctx.cfgSetup.suffixRobovm);
 		androidMinSdkField.setText(Ctx.cfgSetup.androidMinSdkVersion);
 		androidTargetSdkField.setText(Ctx.cfgSetup.androidTargetSdkVersion);
 		androidMaxSdkField.setText(Ctx.cfgSetup.androidMaxSdkVersion);
@@ -62,15 +62,15 @@ private void update() {
 		Ctx.cfgSetup.suffixCommon = coreSuffixField.getText();
 		Ctx.cfgSetup.suffixDesktop = desktopSuffixField.getText();
 		Ctx.cfgSetup.suffixAndroid = androidSuffixField.getText();
-                Ctx.cfgSetup.suffixIos = iosSuffixField.getText();
+		Ctx.cfgSetup.suffixRobovm = iosSuffixField.getText();
 		Ctx.cfgSetup.androidMinSdkVersion = androidMinSdkField.getText();
 		Ctx.cfgSetup.androidMaxSdkVersion = androidMaxSdkField.getText();
 		Ctx.cfgSetup.androidTargetSdkVersion = androidTargetSdkField.getText();
 		Ctx.fireCfgSetupChanged();
 		Ctx.cfgUpdate.suffixCommon = coreSuffixField.getText();
 		Ctx.cfgUpdate.suffixDesktop = desktopSuffixField.getText();
 		Ctx.cfgUpdate.suffixAndroid = androidSuffixField.getText();
-                Ctx.cfgUpdate.suffixIos = iosSuffixField.getText();
+      Ctx.cfgUpdate.suffixRobovm = iosSuffixField.getText();
 		Ctx.fireCfgSetupChanged();
 	}
 

File: extensions/gdx-setup-ui/src/aurelienribon/gdxsetupui/ui/panels/PreviewPanel.java
Patch:
@@ -246,7 +246,6 @@ private void updateLibs() {
 				for (String path : def.libsDesktop) pathToNodes(path, desktopLibsNode);
 				for (String path : def.libsAndroid) pathToNodes(path, androidLibsNode);
 				for (String path : def.libsHtml) pathToNodes(path, htmlLibsNode);
-				for (String path : def.libsIos) pathToNodes(path, iosLibsNode);
 				for (String path : def.libsRobovm) pathToNodes(path, robovmLibsNode);
 				for (String path : def.data) pathToNodes(path, dataNode);                              
 			}
@@ -291,7 +290,6 @@ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean
 					if (isDir && name.equals("prj-desktop")) name = Ctx.cfgSetup.projectName + Ctx.cfgSetup.suffixDesktop;
 					if (isDir && name.equals("prj-android")) name = Ctx.cfgSetup.projectName + Ctx.cfgSetup.suffixAndroid;
 					if (isDir && name.equals("prj-html")) name = Ctx.cfgSetup.projectName + Ctx.cfgSetup.suffixHtml;
-					if (isDir && name.equals("prj-ios")) name = Ctx.cfgSetup.projectName + Ctx.cfgSetup.suffixIos;
 					if (isDir && name.equals("prj-robovm")) name = Ctx.cfgSetup.projectName + Ctx.cfgSetup.suffixRobovm;
 
 					label.setText(FilenameUtils.getName(name));

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -565,7 +565,7 @@ public boolean clipBegin (float x, float y, float width, float height) {
 		tableBounds.height = height;
 		Stage stage = this.stage;
 		Rectangle scissorBounds = Pools.obtain(Rectangle.class);
-		ScissorStack.calculateScissors(stage.getCamera(), stage.getSpriteBatch().getTransformMatrix(), tableBounds, scissorBounds);
+		stage.calculateScissors(tableBounds, scissorBounds);
 		if (ScissorStack.pushScissors(scissorBounds)) return true;
 		Pools.free(scissorBounds);
 		return false;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -516,7 +516,7 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 
 		// Caculate the scissor bounds based on the batch transform, the available widget area and the camera transform. We need to
 		// project those to screen coordinates for OpenGL ES to consume.
-		ScissorStack.calculateScissors(getStage().getCamera(), batch.getTransformMatrix(), widgetAreaBounds, scissorBounds);
+		getStage().calculateScissors(widgetAreaBounds, scissorBounds);
 
 		// Draw the background ninepatch.
 		Color color = getColor();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -253,15 +253,15 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 		applyTransform(batch, computeTransform());
 		Matrix4 transform = batch.getTransformMatrix();
 		if (firstWidget != null) {
-			ScissorStack.calculateScissors(getStage().getCamera(), transform, firstWidgetBounds, firstScissors);
+			getStage().calculateScissors(firstWidgetBounds, firstScissors);
 			if (ScissorStack.pushScissors(firstScissors)) {
 				if (firstWidget.isVisible()) firstWidget.draw(batch, parentAlpha * color.a);
 				batch.flush();
 				ScissorStack.popScissors();
 			}
 		}
 		if (secondWidget != null) {
-			ScissorStack.calculateScissors(getStage().getCamera(), transform, secondWidgetBounds, secondScissors);
+			getStage().calculateScissors(secondWidgetBounds, secondScissors);
 			if (ScissorStack.pushScissors(secondScissors)) {
 				if (secondWidget.isVisible()) secondWidget.draw(batch, parentAlpha * color.a);
 				batch.flush();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPaneTest.java
Patch:
@@ -128,6 +128,9 @@ public void render () {
 
 	public void resize (int width, int height) {
 		stage.setViewport(width, height, false);
+
+		// Gdx.gl.glViewport(100, 100, width - 200, height - 200);
+		// stage.setViewport(800, 600, false, 100, 100, width - 200, height - 200);
 	}
 
 	public void dispose () {

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/IOSRobovmTests.java
Patch:
@@ -14,7 +14,7 @@ class InnerClass {
 	@Override
 	protected IOSApplication createApplication() {
 		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
-		return new IOSApplication(new PingPongSocketExample(), config);
+		return new IOSApplication(new BulletTestCollection(), config);
 	}
 
 	public static void main(String[] argv) {

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/gen/ReflectionCacheSourceCreator.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.Set;
 import java.util.Map.Entry;
 
-import com.badlogic.gwtref.gen.SwitchedCodeBlocks.Code;
 import com.google.gwt.core.ext.BadPropertyValueException;
 import com.google.gwt.core.ext.ConfigurationProperty;
 import com.google.gwt.core.ext.GeneratorContext;

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/gen/ReflectionCacheSourceCreator.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.Set;
 import java.util.Map.Entry;
 
-import com.badlogic.gwtref.gen.SwitchedCodeBlocks.Code;
 import com.google.gwt.core.ext.BadPropertyValueException;
 import com.google.gwt.core.ext.ConfigurationProperty;
 import com.google.gwt.core.ext.GeneratorContext;

File: gdx/src/com/badlogic/gdx/utils/async/AsyncExecutor.java
Patch:
@@ -62,7 +62,7 @@ public void dispose () {
 		try {
 			executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
 		} catch (InterruptedException e) {
-			new GdxRuntimeException("Couldn't shutdown loading thread");
+			throw new GdxRuntimeException("Couldn't shutdown loading thread", e);
 		}
 	}
 }

File: gdx/src/com/badlogic/gdx/utils/async/AsyncExecutor.java
Patch:
@@ -62,7 +62,7 @@ public void dispose () {
 		try {
 			executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
 		} catch (InterruptedException e) {
-			new GdxRuntimeException("Couldn't shutdown loading thread");
+			throw new GdxRuntimeException("Couldn't shutdown loading thread", e);
 		}
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/g3d/ModelInstance.java
Patch:
@@ -1,7 +1,6 @@
 package com.badlogic.gdx.graphics.g3d;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.graphics.g3d.model.Animation;
 import com.badlogic.gdx.graphics.g3d.model.MeshPart;
 import com.badlogic.gdx.graphics.g3d.model.NodeAnimation;

File: gdx/src/com/badlogic/gdx/graphics/g3d/attributes/BlendingAttribute.java
Patch:
@@ -1,10 +1,10 @@
-package com.badlogic.gdx.graphics.g3d.materials;
+package com.badlogic.gdx.graphics.g3d.attributes;
 
 import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.g3d.materials.Material.Attribute;
+import com.badlogic.gdx.graphics.g3d.Attribute;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
-public class BlendingAttribute extends Material.Attribute {
+public class BlendingAttribute extends Attribute {
 	public final static String Alias = "blended";
 	public final static long Type = register(Alias);
 	

File: gdx/src/com/badlogic/gdx/graphics/g3d/attributes/DepthTestAttribute.java
Patch:
@@ -1,11 +1,11 @@
-package com.badlogic.gdx.graphics.g3d.materials;
+package com.badlogic.gdx.graphics.g3d.attributes;
 
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.g3d.materials.Material.Attribute;
+import com.badlogic.gdx.graphics.g3d.Attribute;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
-public class DepthTestAttribute extends Material.Attribute {
+public class DepthTestAttribute extends Attribute {
    public final static String Alias = "depthStencil";
    public final static long Type = register(Alias);
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/attributes/FloatAttribute.java
Patch:
@@ -1,9 +1,9 @@
-package com.badlogic.gdx.graphics.g3d.materials;
+package com.badlogic.gdx.graphics.g3d.attributes;
 
-import com.badlogic.gdx.graphics.g3d.materials.Material.Attribute;
+import com.badlogic.gdx.graphics.g3d.Attribute;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
-public class FloatAttribute extends Material.Attribute {
+public class FloatAttribute extends Attribute {
     public static final String ShininessAlias = "shininess";
     public static final long Shininess = register(ShininessAlias);
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/attributes/IntAttribute.java
Patch:
@@ -1,8 +1,8 @@
-package com.badlogic.gdx.graphics.g3d.materials;
+package com.badlogic.gdx.graphics.g3d.attributes;
 
-import com.badlogic.gdx.graphics.g3d.materials.Material.Attribute;
+import com.badlogic.gdx.graphics.g3d.Attribute;
 
-public class IntAttribute extends Material.Attribute {
+public class IntAttribute extends Attribute {
 	public static final String CullFaceAlias = "cullface";
 	public static final long CullFace = register(CullFaceAlias);
 	

File: gdx/src/com/badlogic/gdx/graphics/g3d/attributes/TextureAttribute.java
Patch:
@@ -1,11 +1,11 @@
-package com.badlogic.gdx.graphics.g3d.materials;
+package com.badlogic.gdx.graphics.g3d.attributes;
 
 import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g3d.materials.Material.Attribute;
+import com.badlogic.gdx.graphics.g3d.Attribute;
 import com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
-public class TextureAttribute extends Material.Attribute {
+public class TextureAttribute extends Attribute {
 	public final static String DiffuseAlias = "diffuseTexture";
 	public final static long Diffuse = register(DiffuseAlias);
 	public final static String SpecularAlias = "specularTexture";

File: gdx/src/com/badlogic/gdx/graphics/g3d/environment/AmbientCubemap.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.graphics.g3d.lights;
+package com.badlogic.gdx.graphics.g3d.environment;
 
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.math.Vector3;

File: gdx/src/com/badlogic/gdx/graphics/g3d/environment/BaseLight.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.graphics.g3d.lights;
+package com.badlogic.gdx.graphics.g3d.environment;
 
 import com.badlogic.gdx.graphics.Color;
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/environment/DirectionalLight.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.graphics.g3d.lights;
+package com.badlogic.gdx.graphics.g3d.environment;
 
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.math.Vector3;

File: gdx/src/com/badlogic/gdx/graphics/g3d/environment/DirectionalShadowLight.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.graphics.g3d.lights;
+package com.badlogic.gdx.graphics.g3d.environment;
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Camera;

File: gdx/src/com/badlogic/gdx/graphics/g3d/environment/PointLight.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.graphics.g3d.lights;
+package com.badlogic.gdx.graphics.g3d.environment;
 
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.math.Vector3;

File: gdx/src/com/badlogic/gdx/graphics/g3d/environment/ShadowMap.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.graphics.g3d.lights;
+package com.badlogic.gdx.graphics.g3d.environment;
 
 import com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor;
 import com.badlogic.gdx.math.Matrix4;

File: gdx/src/com/badlogic/gdx/graphics/g3d/loader/ObjLoader.java
Patch:
@@ -36,9 +36,9 @@
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
+import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
+import com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute;
+import com.badlogic.gdx.graphics.g3d.Material;
 import com.badlogic.gdx.graphics.g3d.Model;
 import com.badlogic.gdx.graphics.g3d.model.data.ModelData;
 import com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial;

File: gdx/src/com/badlogic/gdx/graphics/g3d/model/Node.java
Patch:
@@ -1,7 +1,7 @@
 package com.badlogic.gdx.graphics.g3d.model;
 
+import com.badlogic.gdx.graphics.g3d.Material;
 import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Quaternion;
 import com.badlogic.gdx.math.Vector3;

File: gdx/src/com/badlogic/gdx/graphics/g3d/model/NodePart.java
Patch:
@@ -1,7 +1,7 @@
 package com.badlogic.gdx.graphics.g3d.model;
 
+import com.badlogic.gdx.graphics.g3d.Material;
 import com.badlogic.gdx.graphics.g3d.Renderable;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.ArrayMap;

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java
Patch:
@@ -8,10 +8,10 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes;
+import com.badlogic.gdx.graphics.g3d.Material;
 import com.badlogic.gdx.graphics.g3d.Renderable;
 import com.badlogic.gdx.graphics.g3d.Shader;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
+import com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute;
 import com.badlogic.gdx.graphics.g3d.utils.RenderContext;
 import com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultRenderableSorter.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.badlogic.gdx.graphics.Camera;
 import com.badlogic.gdx.graphics.g3d.Renderable;
-import com.badlogic.gdx.graphics.g3d.materials.BlendingAttribute;
+import com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.utils.Array;
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshPartBuilder.java
Patch:
@@ -3,8 +3,8 @@
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.VertexAttributes;
+import com.badlogic.gdx.graphics.g3d.Material;
 import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.graphics.g3d.model.MeshPart;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector2;

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/ModelBuilder.java
Patch:
@@ -7,8 +7,8 @@
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
+import com.badlogic.gdx.graphics.g3d.Material;
 import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.graphics.g3d.model.MeshPart;
 import com.badlogic.gdx.graphics.g3d.model.NodePart;
 import com.badlogic.gdx.graphics.g3d.model.Node;

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/ShaderProvider.java
Patch:
@@ -1,8 +1,8 @@
 package com.badlogic.gdx.graphics.g3d.utils;
 
+import com.badlogic.gdx.graphics.g3d.Material;
 import com.badlogic.gdx.graphics.g3d.Renderable;
 import com.badlogic.gdx.graphics.g3d.Shader;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 
 /**

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java
Patch:
@@ -305,7 +305,7 @@ void selectNodes (Array<Node> nodes, float low, float high) {
 			Node node = nodes.get(i);
 			if (node.actor.getY() < low) break;
 			if (!node.isSelectable()) continue;
-			if (node.actor.getY() <= high) selectedNodes.add(node);
+			if (node.actor.getY() <= high && !selectedNodes.contains(node, true)) selectedNodes.add(node);
 			if (node.expanded) selectNodes(node.children, low, high);
 		}
 	}

File: gdx/src/com/badlogic/gdx/input/GestureDetector.java
Patch:
@@ -56,7 +56,7 @@ public class GestureDetector extends InputAdapter {
 	private final Task longPressTask = new Task() {
 		@Override
 		public void run () {
-			longPressFired = listener.longPress(pointer1.x, pointer1.y);
+			if (!longPressFired) longPressFired = listener.longPress(pointer1.x, pointer1.y);
 		}
 	};
 
@@ -226,6 +226,7 @@ public boolean touchUp (float x, float y, int pointer, int button) {
 
 	/** No further gesture events will be triggered for the current touch, if any. */
 	public void cancel () {
+		longPressTask.cancel();
 		longPressFired = true;
 	}
 

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/MainMenuScreen.java
Patch:
@@ -101,7 +101,9 @@ public void draw (float deltaTime) {
 		batcher.end();
 		
 		if(System.nanoTime() - last > 2000000000) {
-			Gdx.app.log("SuperJumper", "native orientation:" + Gdx.input.getNativeOrientation() + 
+			Gdx.app.log("SuperJumper", "version: " + Gdx.app.getVersion() + 
+												", memory: " + Gdx.app.getJavaHeap() + ", " + Gdx.app.getNativeHeap() + 
+												", native orientation:" + Gdx.input.getNativeOrientation() + 
 												", orientation: " + Gdx.input.getRotation() + 
 												", accel: " + (int)Gdx.input.getAccelerometerX() + ", " + (int)Gdx.input.getAccelerometerY() + ", " + (int)Gdx.input.getAccelerometerZ() +
 												", apr: " + (int)Gdx.input.getAzimuth() + ", " + (int)Gdx.input.getPitch() + ", " + (int)Gdx.input.getRoll());

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -151,7 +151,7 @@ public enum ApplicationType {
 	/** @return what {@link ApplicationType} this application has, e.g. Android or Desktop */
 	public ApplicationType getType ();
 
-	/** @return the Android API level on Android or 0 on the desktop. */
+	/** @return the Android API level on Android, the major OS version on iOS (5, 6, 7, ..), or 0 on the desktop. */
 	public int getVersion ();
 
 	/** @return the Java heap memory use in bytes */

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/SuperJumper.java
Patch:
@@ -28,7 +28,7 @@ public class SuperJumper extends Game {
 	public void create () {
 		Settings.load();
 		Assets.load();
-		setScreen(new GameScreen(this));
+		setScreen(new MainMenuScreen(this));
 		fps = new FPSLogger();
 	}
 	

File: gdx/src/com/badlogic/gdx/graphics/g2d/PolygonRegion.java
Patch:
@@ -36,7 +36,7 @@ public PolygonRegion (TextureRegion region, float[] vertices, short[] triangles)
 		this.triangles = triangles;
 
 		float[] textureCoords = this.textureCoords = new float[vertices.length];
-		float u = region.u, v = region.u;
+		float u = region.u, v = region.v;
 		float uvWidth = region.u2 - u;
 		float uvHeight = region.v2 - v;
 		int width = region.regionWidth;

File: gdx/src/com/badlogic/gdx/graphics/g2d/PolygonRegion.java
Patch:
@@ -36,7 +36,7 @@ public PolygonRegion (TextureRegion region, float[] vertices, short[] triangles)
 		this.triangles = triangles;
 
 		float[] textureCoords = this.textureCoords = new float[vertices.length];
-		float u = region.u, v = region.u;
+		float u = region.u, v = region.v;
 		float uvWidth = region.u2 - u;
 		float uvHeight = region.v2 - v;
 		int width = region.regionWidth;

File: gdx/src/com/badlogic/gdx/math/Polygon.java
Patch:
@@ -57,7 +57,7 @@ public float[] getTransformedVertices () {
 		dirty = false;
 
 		final float[] localVertices = this.localVertices;
-		if (worldVertices == null || worldVertices.length < localVertices.length) worldVertices = new float[localVertices.length];
+		if (worldVertices == null || worldVertices.length != localVertices.length) worldVertices = new float[localVertices.length];
 
 		final float[] worldVertices = this.worldVertices;
 		final float positionX = x;

File: gdx/src/com/badlogic/gdx/maps/tiled/TideMapLoader.java
Patch:
@@ -207,6 +207,8 @@ private void loadLayer(TiledMap map, Element element) {
 			int tileSizeY = Integer.parseInt(tileSizeParts[1]);
 			
 			TiledMapTileLayer layer = new TiledMapTileLayer(layerSizeX, layerSizeY, tileSizeX, tileSizeY);
+			layer.setName(id);
+			layer.setVisible(visible.equalsIgnoreCase("True"));
 			Element tileArray = element.getChildByName("TileArray");
 			Array<Element> rows = tileArray.getChildrenByName("Row");
 			TiledMapTileSets tilesets = map.getTileSets();

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/Type.java
Patch:
@@ -61,7 +61,7 @@ public Class getClassOfType () {
 	/** @return the super class of this type or null */
 	public Type getSuperclass () {
 		try {
-			return ReflectionCache.forName(superClass.getName());
+			return superClass == null ? null : ReflectionCache.forName(superClass.getName());
 		} catch (ClassNotFoundException e) {
 			return null;
 		}

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/Type.java
Patch:
@@ -61,7 +61,7 @@ public Class getClassOfType () {
 	/** @return the super class of this type or null */
 	public Type getSuperclass () {
 		try {
-			return ReflectionCache.forName(superClass.getName());
+			return superClass == null ? null : ReflectionCache.forName(superClass.getName());
 		} catch (ClassNotFoundException e) {
 			return null;
 		}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/io/InputStream.java
Patch:
@@ -16,7 +16,7 @@
 
 package java.io;
 
-public abstract class InputStream {
+public abstract class InputStream implements Closeable {
 	public abstract int read () throws IOException;
 
 	public int read (byte[] buf, int start, int len) throws IOException {

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/IOSRobovmTests.java
Patch:
@@ -13,7 +13,7 @@ class InnerClass {
 	@Override
 	protected IOSApplication createApplication() {
 		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
-		return new IOSApplication(new MultitouchTest(), config);
+		return new IOSApplication(new BulletTestCollection(), config);
 	}
 
 	public static void main(String[] argv) {

File: demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/veryangryrobots/MazeGenerator.java
Patch:
@@ -17,8 +17,8 @@
 
 import static com.badlogic.gdx.math.MathUtils.*;
 
-/** This class makes a maze using the recursive division method described on Wikipedia. {@link http
- * ://en.wikipedia.org/wiki/Maze_generation_algorithm} */
+/** This class makes a maze using the recursive division method described on <a href="http
+ * ://en.wikipedia.org/wiki/Maze_generation_algorithm">Wikipedia</a>. */
 public final class MazeGenerator {
 
 	private int width;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
Patch:
@@ -166,6 +166,7 @@ public void draw(CGRect rect) {
 		view.setDrawableDepthFormat(config.depthFormat);
 		view.setDrawableStencilFormat(config.stencilFormat);
 		view.setDrawableMultisample(config.multisample);
+		view.setMultipleTouchEnabled(true);
 
 		viewController = new IOSUIViewController(app, this);
 		viewController.setView(view);

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSPreferences.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.robovm.cocoatouch.foundation.NSBundle;
 import org.robovm.cocoatouch.foundation.NSMutableDictionary;
 import org.robovm.cocoatouch.foundation.NSNumber;
 import org.robovm.cocoatouch.foundation.NSObject;

File: tests/gdx-tests-iosrobovm/src/com/badlogic/gdx/tests/IOSRobovmTests.java
Patch:
@@ -5,7 +5,6 @@
 
 import com.badlogic.gdx.backends.iosrobovm.IOSApplication;
 import com.badlogic.gdx.backends.iosrobovm.IOSApplicationConfiguration;
-import com.badlogic.gdx.tests.gwt.GwtTestWrapper;
 
 public class IOSRobovmTests extends IOSApplication.Delegate {
 	class InnerClass {
@@ -14,7 +13,7 @@ class InnerClass {
 	@Override
 	protected IOSApplication createApplication() {
 		IOSApplicationConfiguration config = new IOSApplicationConfiguration();
-		return new IOSApplication(new GwtTestWrapper(), config);
+		return new IOSApplication(new MultitouchTest(), config);
 	}
 
 	public static void main(String[] argv) {

File: demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/veryangryrobots/MazeGenerator.java
Patch:
@@ -17,8 +17,8 @@
 
 import static com.badlogic.gdx.math.MathUtils.*;
 
-/** This class makes a maze using the recursive division method described on Wikipedia. {@link http
- * ://en.wikipedia.org/wiki/Maze_generation_algorithm} */
+/** This class makes a maze using the recursive division method described on <a href="http
+ * ://en.wikipedia.org/wiki/Maze_generation_algorithm">Wikipedia</a>. */
 public final class MazeGenerator {
 
 	private int width;

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -128,7 +128,7 @@ public File file () {
 	public InputStream read () {
 		if (type == FileType.Classpath || (type == FileType.Internal && !file().exists())
 			|| (type == FileType.Local && !file().exists())) {
-			InputStream input = FileHandle.class.getResourceAsStream("/" + file.getPath().replace('\\', '/'));
+			InputStream input = FileHandle.class.getResourceAsStream("/" + file().getPath().replace('\\', '/'));
 			if (input == null) throw new GdxRuntimeException("File not found: " + file + " (" + type + ")");
 			return input;
 		}

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -39,6 +39,7 @@
 import com.badlogic.gdx.tests.g3d.MaterialTest;
 import com.badlogic.gdx.tests.g3d.ModelLoaderTest;
 import com.badlogic.gdx.tests.g3d.ModelTest;
+import com.badlogic.gdx.tests.g3d.ShaderCollectionTest;
 import com.badlogic.gdx.tests.g3d.voxel.VoxelTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
@@ -51,7 +52,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new FogTest();
+		GdxTest test = new ShaderCollectionTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.width = 1024;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
Patch:
@@ -192,7 +192,7 @@ public void draw(CGRect rect) {
 		ppiX = ppi;
 		ppiY = ppi;
 		ppcX = ppiX / 2.54f;
-		ppcY = ppcY / 2.54f;
+		ppcY = ppiY / 2.54f;
 		app.debug(tag, "Display: ppi=" + ppi + ", density=" + density);
 
 		// time + FPS

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/Collision.java
Patch:
@@ -36,7 +36,7 @@ public static void collisionCheck() {
 	private static void collisionCheck(Bullet bullet, Ship ship) {
 		if (bullet.id!=ship.id && ship.alive) {
 			
-			for(int i = 0; i<ship.collisionPoints.size();++i) {
+			for(int i = 0; i<ship.collisionPoints.size;++i) {
 				if(Intersector.isPointInPolygon(bullet.collisionPoints, ship.collisionPoints.get(i))) {
 					ship.damage(bullet.damage);
 					GameInstance.getInstance().bulletHit(ship, bullet);
@@ -45,7 +45,7 @@ private static void collisionCheck(Bullet bullet, Ship ship) {
 				}
 			}
 			
-			for(int i = 0; i<bullet.collisionPoints.size();++i) {
+			for(int i = 0; i<bullet.collisionPoints.size;++i) {
 				if(Intersector.isPointInPolygon(ship.collisionPoints, bullet.collisionPoints.get(i))) {
 					ship.damage(bullet.damage);
 					GameInstance.getInstance().bulletHit(ship, bullet);

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/Ship.java
Patch:
@@ -7,6 +7,7 @@
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.math.Vector2;
+import com.badlogic.gdx.utils.Array;
 
 import de.swagner.paxbritannica.factory.FactoryProduction;
 
@@ -29,7 +30,7 @@ public class Ship extends Sprite {
 	public Vector2 facing = new Vector2();
 	
 	public Vector2 collisionCenter = new Vector2();
-	public ArrayList<Vector2> collisionPoints = new ArrayList<Vector2>();
+	public Array<Vector2> collisionPoints = new Array<Vector2>();
 
 	public boolean alive = true;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypeTest.java
Patch:
@@ -44,10 +44,11 @@ public void create () {
 		}
 		font = new BitmapFont(Gdx.files.internal("data/arial-15.fnt"), flip);
 		FileHandle fontFile = Gdx.files.internal("data/arial.ttf");
+		
 		FreeTypeFontGenerator generator = new FreeTypeFontGenerator(fontFile);
-		FreeTypeBitmapFontData fontData = generator.generateData(15, FreeTypeFontGenerator.DEFAULT_CHARS, flip);		
+		FreeTypeBitmapFontData fontData = generator.generateData(15, FreeTypeFontGenerator.DEFAULT_CHARS, flip);
+		ftFont = generator.generateFont(15, FreeTypeFontGenerator.DEFAULT_CHARS, flip);
 		generator.dispose();
-		ftFont = new BitmapFont(fontData, fontData.getTextureRegion(), false);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -90,7 +90,7 @@ public Array (T[] array) {
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
 	public Array (boolean ordered, T[] array, int start, int count) {
-		this(ordered, array.length, (Class)array.getClass().getComponentType());
+		this(ordered, count, (Class)array.getClass().getComponentType());
 		size = count;
 		System.arraycopy(array, 0, items, 0, size);
 	}
@@ -302,6 +302,7 @@ public void clear () {
 	/** Reduces the size of the backing array to the size of the actual items. This is useful to release memory when many items have
 	 * been removed, or if it is known that more items will not be added. */
 	public void shrink () {
+		if (items.length == size) return;
 		resize(size);
 	}
 

File: gdx/src/com/badlogic/gdx/utils/BooleanArray.java
Patch:
@@ -69,7 +69,7 @@ public BooleanArray (boolean[] array) {
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
 	public BooleanArray (boolean ordered, boolean[] array, int startIndex, int count) {
-		this(ordered, array.length);
+		this(ordered, count);
 		size = count;
 		System.arraycopy(array, startIndex, items, 0, count);
 	}
@@ -188,6 +188,7 @@ public void clear () {
 	/** Reduces the size of the backing array to the size of the actual items. This is useful to release memory when many items have
 	 * been removed, or if it is known that more items will not be added. */
 	public void shrink () {
+		if (items.length == size) return;
 		resize(size);
 	}
 

File: gdx/src/com/badlogic/gdx/utils/CharArray.java
Patch:
@@ -67,7 +67,7 @@ public CharArray (char[] array) {
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
 	public CharArray (boolean ordered, char[] array, int startIndex, int count) {
-		this(ordered, array.length);
+		this(ordered, count);
 		size = count;
 		System.arraycopy(array, startIndex, items, 0, count);
 	}
@@ -219,6 +219,7 @@ public void clear () {
 	/** Reduces the size of the backing array to the size of the actual items. This is useful to release memory when many items have
 	 * been removed, or if it is known that more items will not be added. */
 	public void shrink () {
+		if (items.length == size) return;
 		resize(size);
 	}
 

File: gdx/src/com/badlogic/gdx/utils/FloatArray.java
Patch:
@@ -67,7 +67,7 @@ public FloatArray (float[] array) {
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
 	public FloatArray (boolean ordered, float[] array, int startIndex, int count) {
-		this(ordered, array.length);
+		this(ordered, count);
 		size = count;
 		System.arraycopy(array, startIndex, items, 0, count);
 	}
@@ -88,7 +88,7 @@ public void addAll (FloatArray array, int offset, int length) {
 		addAll(array.items, offset, length);
 	}
 
-	public void addAll (float[] array) {
+	public void addAll (float... array) {
 		addAll(array, 0, array.length);
 	}
 
@@ -219,6 +219,7 @@ public void clear () {
 	/** Reduces the size of the backing array to the size of the actual items. This is useful to release memory when many items have
 	 * been removed, or if it is known that more items will not be added. */
 	public void shrink () {
+		if (items.length == size) return;
 		resize(size);
 	}
 

File: gdx/src/com/badlogic/gdx/utils/IntArray.java
Patch:
@@ -67,7 +67,7 @@ public IntArray (int[] array) {
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
 	public IntArray (boolean ordered, int[] array, int startIndex, int count) {
-		this(ordered, array.length);
+		this(ordered, count);
 		size = count;
 		System.arraycopy(array, startIndex, items, 0, count);
 	}
@@ -219,6 +219,7 @@ public void clear () {
 	/** Reduces the size of the backing array to the size of the actual items. This is useful to release memory when many items have
 	 * been removed, or if it is known that more items will not be added. */
 	public void shrink () {
+		if (items.length == size) return;
 		resize(size);
 	}
 

File: gdx/src/com/badlogic/gdx/utils/LongArray.java
Patch:
@@ -67,7 +67,7 @@ public LongArray (long[] array) {
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
 	public LongArray (boolean ordered, long[] array, int startIndex, int count) {
-		this(ordered, array.length);
+		this(ordered, count);
 		size = count;
 		System.arraycopy(array, startIndex, items, 0, count);
 	}
@@ -219,6 +219,7 @@ public void clear () {
 	/** Reduces the size of the backing array to the size of the actual items. This is useful to release memory when many items have
 	 * been removed, or if it is known that more items will not be added. */
 	public void shrink () {
+		if (items.length == size) return;
 		resize(size);
 	}
 

File: gdx/src/com/badlogic/gdx/utils/ShortArray.java
Patch:
@@ -67,7 +67,7 @@ public ShortArray (short[] array) {
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
 	public ShortArray (boolean ordered, short[] array, int startIndex, int count) {
-		this(ordered, array.length);
+		this(ordered, count);
 		size = count;
 		System.arraycopy(array, startIndex, items, 0, count);
 	}
@@ -226,6 +226,7 @@ public void clear () {
 	/** Reduces the size of the backing array to the size of the actual items. This is useful to release memory when many items have
 	 * been removed, or if it is known that more items will not be added. */
 	public void shrink () {
+		if (items.length == size) return;
 		resize(size);
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
Patch:
@@ -188,12 +188,12 @@ public TiledDrawable getTiledDrawable (String name) {
 		if (tiled != null) return tiled;
 
 		Drawable drawable = optional(name, Drawable.class);
-		if (tiled != null) {
+		if (drawable != null) {
 			if (!(drawable instanceof TiledDrawable)) {
 				throw new GdxRuntimeException("Drawable found but is not a TiledDrawable: " + name + ", "
 					+ drawable.getClass().getName());
 			}
-			return tiled;
+			return (TiledDrawable)drawable;
 		}
 
 		tiled = new TiledDrawable(getRegion(name));

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
Patch:
@@ -188,12 +188,12 @@ public TiledDrawable getTiledDrawable (String name) {
 		if (tiled != null) return tiled;
 
 		Drawable drawable = optional(name, Drawable.class);
-		if (tiled != null) {
+		if (drawable != null) {
 			if (!(drawable instanceof TiledDrawable)) {
 				throw new GdxRuntimeException("Drawable found but is not a TiledDrawable: " + name + ", "
 					+ drawable.getClass().getName());
 			}
-			return tiled;
+			return (TiledDrawable)drawable;
 		}
 
 		tiled = new TiledDrawable(getRegion(name));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderCollectionTest.java
Patch:
@@ -42,7 +42,7 @@ public class ShaderCollectionTest extends BaseG3dHudTest {
 	/** Desktop only: Set this to an absolute path to load the shader files from an alternative location. */
 	final static String hotLoadFolder = null;
 	/** Desktop only: Set this to an absolute path to save the generated shader files. */
-	final static String tempFolder = "D:\\temp\\shaders"; 
+	final static String tempFolder = null;//"D:\\temp\\shaders"; 
 	
 	protected  String shaders[] = new String[] {
 		"<default>", "depth", "gouraud", "phong", "normal", "fur", "cubemap", "reflect", "test"

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java
Patch:
@@ -118,7 +118,7 @@ private void renderBodies (World world) {
 
 		if (Gdx.gl10 != null) Gdx.gl10.glPointSize(3);
 		renderer.begin(ShapeType.Point);
-		int len = world.getContactList().size();
+		int len = world.getContactList().size;
 		for (int i = 0; i < len; i++)
 			drawContact(world.getContactList().get(i));
 		renderer.end();
@@ -127,8 +127,8 @@ private void renderBodies (World world) {
 
 	protected void renderBody (Body body) {
 		Transform transform = body.getTransform();
-		int len = body.getFixtureList().size();
-		List<Fixture> fixtures = body.getFixtureList();
+		int len = body.getFixtureList().size;
+		Array<Fixture> fixtures = body.getFixtureList();
 		for (int i = 0; i < len; i++) {
 			Fixture fixture = fixtures.get(i);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DCharacterControllerTest.java
Patch:
@@ -237,7 +237,7 @@ public void render () {
 		}
 
 		// since Box2D 2.2 we need to reset the friction of any existing contacts
-		List<Contact> contacts = world.getContactList();
+		Array<Contact> contacts = world.getContactList();
 		for (int i = 0; i < world.getContactCount(); i++) {
 			Contact contact = contacts.get(i);
 			contact.resetFriction();
@@ -289,8 +289,8 @@ public void render () {
 
 	private boolean isPlayerGrounded (float deltaTime) {
 		groundedPlatform = null;
-		List<Contact> contactList = world.getContactList();
-		for (int i = 0; i < contactList.size(); i++) {
+		Array<Contact> contactList = world.getContactList();
+		for (int i = 0; i < contactList.size; i++) {
 			Contact contact = contactList.get(i);
 			if (contact.isTouching()
 				&& (contact.getFixtureA() == playerSensorFixture || contact.getFixtureB() == playerSensorFixture)) {

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1TextureData.java
Patch:
@@ -78,7 +78,7 @@ public void consumeCompressedData (int target) {
 			Pixmap pixmap = ETC1.decodeImage(data, Format.RGB565);
 			Gdx.gl.glTexImage2D(target, 0, pixmap.getGLInternalFormat(), pixmap.getWidth(), pixmap.getHeight(), 0,
 				pixmap.getGLFormat(), pixmap.getGLType(), pixmap.getPixels());
-			if (useMipMaps) MipMapGenerator.generateMipMap(target, pixmap, pixmap.getWidth(), pixmap.getHeight(), false);
+			if (useMipMaps) MipMapGenerator.generateMipMap(target, pixmap, pixmap.getWidth(), pixmap.getHeight());
 			pixmap.dispose();
 			useMipMaps = false;
 		} else {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -30,6 +30,8 @@
 import com.badlogic.gdx.tests.DelaunayTriangulatorTest;
 import com.badlogic.gdx.tests.EarClippingTriangulatorTest;
 import com.badlogic.gdx.tests.MeshShaderTest;
+import com.badlogic.gdx.tests.MipMapTest;
+import com.badlogic.gdx.tests.TextureAtlasTest;
 import com.badlogic.gdx.tests.TimerTest;
 import com.badlogic.gdx.tests.g3d.Basic3DSceneTest;
 import com.badlogic.gdx.tests.g3d.Basic3DTest;
@@ -48,7 +50,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new MaterialTest();
+		GdxTest test = new MipMapTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.width = 1024;

File: gdx/src/com/badlogic/gdx/graphics/glutils/MipMapGenerator.java
Patch:
@@ -51,7 +51,7 @@ public static void generateMipMap (int target, Pixmap pixmap, int textureWidth,
 			return;
 		}
 
-		if (Gdx.app.getType() == ApplicationType.Android) {
+		if (Gdx.app.getType() == ApplicationType.Android || Gdx.app.getType() == ApplicationType.WebGL) {
 			if (Gdx.graphics.isGL20Available())
 				generateMipMapGLES20(target, pixmap, disposePixmap);
 			else

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/Hiero4.java
Patch:
@@ -331,7 +331,7 @@ public TextureDataType getType () {
 							}
 
 							@Override
-							public void consumeCompressedData () {
+							public void consumeCompressedData (int target) {
 							}
 
 							@Override

File: gdx/src/com/badlogic/gdx/graphics/Cubemap.java
Patch:
@@ -94,7 +94,7 @@ public void load (TextureData positiveX, TextureData negativeX, TextureData posi
 	}
 	
 	@Override
-	protected boolean canReload () {
+	public boolean isManaged () {
 		for (TextureData data : this.data)
 			if (!data.isManaged())
 				return false;
@@ -103,7 +103,7 @@ protected boolean canReload () {
 	
 	@Override
 	protected void reload () {
-		if (!canReload()) throw new GdxRuntimeException("Tried to reload an unmanaged Cubemap");
+		if (!isManaged()) throw new GdxRuntimeException("Tried to reload an unmanaged Cubemap");
 		glHandle = createGLHandle();
 		load(data[CubemapSide.PositiveX.index],
 			data[CubemapSide.NegativeX.index],

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/AddListenerAction.java
Patch:
@@ -30,9 +30,9 @@ public class AddListenerAction extends Action {
 	public boolean act (float delta) {
 		Actor actor = (targetActor != null ? targetActor : this.actor);
 		if (capture)
-			targetActor.addCaptureListener(listener);
+			actor.addCaptureListener(listener);
 		else
-			targetActor.addListener(listener);
+			actor.addListener(listener);
 		return true;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/AddListenerAction.java
Patch:
@@ -30,9 +30,9 @@ public class AddListenerAction extends Action {
 	public boolean act (float delta) {
 		Actor actor = (targetActor != null ? targetActor : this.actor);
 		if (capture)
-			targetActor.addCaptureListener(listener);
+			actor.addCaptureListener(listener);
 		else
-			targetActor.addListener(listener);
+			actor.addListener(listener);
 		return true;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -46,7 +46,7 @@ public class Label extends Widget {
 	private float lastPrefHeight;
 	private boolean sizeInvalid = true;
 	private float fontScaleX = 1, fontScaleY = 1;
-	private boolean ellipse = true;
+	private boolean ellipse;
 
 	public Label (CharSequence text, Skin skin) {
 		this(text, skin.get(LabelStyle.class));
@@ -290,7 +290,7 @@ public void setFontScaleY (float fontScaleY) {
 		invalidateHierarchy();
 	}
 
-	/** When true the text will be truncated with an ellipse if it does not fit within the width of the label. Default is true. */
+	/** When true the text will be truncated with an ellipse if it does not fit within the width of the label. Default is false. */
 	public void setEllipse (boolean ellipse) {
 		this.ellipse = ellipse;
 	}

File: gdx/src/com/badlogic/gdx/utils/StringBuilder.java
Patch:
@@ -256,8 +256,8 @@ final void insert0 (int index, char[] value, int start, int length) {
 			if (start >= 0 && 0 <= length && length <= value.length - start) {
 				if (length != 0) {
 					move(length, index);
-					System.arraycopy(value, start, value, index, length);
-					length += length;
+					System.arraycopy(value, start, chars, index, length);
+					this.length += length;
 				}
 				return;
 			}

File: gdx/src/com/badlogic/gdx/utils/StringBuilder.java
Patch:
@@ -256,8 +256,8 @@ final void insert0 (int index, char[] value, int start, int length) {
 			if (start >= 0 && 0 <= length && length <= value.length - start) {
 				if (length != 0) {
 					move(length, index);
-					System.arraycopy(value, start, value, index, length);
-					length += length;
+					System.arraycopy(value, start, chars, index, length);
+					this.length += length;
 				}
 				return;
 			}

File: gdx/src/com/badlogic/gdx/utils/IdentityMap.java
Patch:
@@ -67,7 +67,7 @@ public IdentityMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public IdentityMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -71,7 +71,7 @@ public IntFloatMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public IntFloatMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/IntIntMap.java
Patch:
@@ -69,7 +69,7 @@ public IntIntMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public IntIntMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/IntMap.java
Patch:
@@ -67,7 +67,7 @@ public IntMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public IntMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/IntSet.java
Patch:
@@ -62,7 +62,7 @@ public IntSet (int initialCapacity) {
 	 * before growing the backing table. */
 	public IntSet (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/LongMap.java
Patch:
@@ -67,7 +67,7 @@ public LongMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public LongMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -64,7 +64,7 @@ public ObjectFloatMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public ObjectFloatMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -64,7 +64,7 @@ public ObjectIntMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public ObjectIntMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/ObjectMap.java
Patch:
@@ -64,7 +64,7 @@ public ObjectMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public ObjectMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -61,7 +61,7 @@ public ObjectSet (int initialCapacity) {
 	 * before growing the backing table. */
 	public ObjectSet (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/IdentityMap.java
Patch:
@@ -67,7 +67,7 @@ public IdentityMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public IdentityMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/IntFloatMap.java
Patch:
@@ -71,7 +71,7 @@ public IntFloatMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public IntFloatMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/IntIntMap.java
Patch:
@@ -69,7 +69,7 @@ public IntIntMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public IntIntMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/IntMap.java
Patch:
@@ -67,7 +67,7 @@ public IntMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public IntMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/IntSet.java
Patch:
@@ -62,7 +62,7 @@ public IntSet (int initialCapacity) {
 	 * before growing the backing table. */
 	public IntSet (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/LongMap.java
Patch:
@@ -67,7 +67,7 @@ public LongMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public LongMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/ObjectFloatMap.java
Patch:
@@ -64,7 +64,7 @@ public ObjectFloatMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public ObjectFloatMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -64,7 +64,7 @@ public ObjectIntMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public ObjectIntMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/ObjectMap.java
Patch:
@@ -64,7 +64,7 @@ public ObjectMap (int initialCapacity) {
 	 * before growing the backing table. */
 	public ObjectMap (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/utils/ObjectSet.java
Patch:
@@ -61,7 +61,7 @@ public ObjectSet (int initialCapacity) {
 	 * before growing the backing table. */
 	public ObjectSet (int initialCapacity, float loadFactor) {
 		if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
-		if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
+		if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
 		capacity = MathUtils.nextPowerOfTwo(initialCapacity);
 
 		if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java
Patch:
@@ -739,7 +739,7 @@ public void polygon (float[] vertices) {
 	public void polygon (float[] vertices, int offset, int count) {
 		if (currType != ShapeType.Line) throw new GdxRuntimeException("Must call begin(ShapeType.Line)");
 		if (count < 6) throw new IllegalArgumentException("Polygons must contain at least 3 points.");
-		if (count % 2 != 0) throw new IllegalArgumentException("Polygons must have a pair number of vertices.");
+		if (count % 2 != 0) throw new IllegalArgumentException("Polygons must have an even number of vertices.");
 
 		checkDirty();
 		checkFlush(count);
@@ -780,7 +780,7 @@ public void polyline (float[] vertices) {
 	public void polyline (float[] vertices, int offset, int count) {
 		if (currType != ShapeType.Line) throw new GdxRuntimeException("Must call begin(ShapeType.Line)");
 		if (count < 4) throw new IllegalArgumentException("Polylines must contain at least 2 points.");
-		if (count % 2 != 0) throw new IllegalArgumentException("Polylines must have a pair number of vertices.");
+		if (count % 2 != 0) throw new IllegalArgumentException("Polylines must have an even number of vertices.");
 
 		checkDirty();
 		checkFlush(count);

File: gdx/src/com/badlogic/gdx/graphics/g3d/materials/Material.java
Patch:
@@ -30,7 +30,7 @@ public boolean equals (Object obj) {
 			if (obj == this) return true;
 			if (!(obj instanceof Attribute)) return false;
 			final Attribute other = (Attribute)obj;
-			if (other.type != other.type) return false; 
+			if (this.type != other.type) return false;
 			return equals(other);
 		}
 		@Override

File: gdx/src/com/badlogic/gdx/graphics/g3d/materials/Material.java
Patch:
@@ -30,7 +30,7 @@ public boolean equals (Object obj) {
 			if (obj == this) return true;
 			if (!(obj instanceof Attribute)) return false;
 			final Attribute other = (Attribute)obj;
-			if (other.type != other.type) return false; 
+			if (this.type != other.type) return false;
 			return equals(other);
 		}
 		@Override

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSFiles.java
Patch:
@@ -23,7 +23,6 @@ public IOSFiles() {
 	
 	@Override
 	public FileHandle getFileHandle (String fileName, FileType type) {
-		if (type == FileType.Internal) return internal(fileName);
 		return new IOSFileHandle(fileName, type);
 	}
 
@@ -34,7 +33,7 @@ public FileHandle classpath (String path) {
 
 	@Override
 	public FileHandle internal (String path) {
-		return new IOSFileHandle(new File(internalPath, path), FileType.Internal);
+		return new IOSFileHandle(path, FileType.Internal);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -126,8 +126,8 @@ public File file () {
 	/** Returns a stream for reading this file as bytes.
 	 * @throws GdxRuntimeException if the file handle represents a directory, doesn't exist, or could not be read. */
 	public InputStream read () {
-		if (type == FileType.Classpath || (type == FileType.Internal && !file.exists())
-			|| (type == FileType.Local && !file.exists())) {
+		if (type == FileType.Classpath || (type == FileType.Internal && !file().exists())
+			|| (type == FileType.Local && !file().exists())) {
 			InputStream input = FileHandle.class.getResourceAsStream("/" + file.getPath().replace('\\', '/'));
 			if (input == null) throw new GdxRuntimeException("File not found: " + file + " (" + type + ")");
 			return input;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSFiles.java
Patch:
@@ -23,6 +23,7 @@ public IOSFiles() {
 	
 	@Override
 	public FileHandle getFileHandle (String fileName, FileType type) {
+		if (type == FileType.Internal) return internal(fileName);
 		return new IOSFileHandle(fileName, type);
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/DelaunayTriangulatorTest.java
Patch:
@@ -40,6 +40,7 @@ public void create () {
 		renderer = new ShapeRenderer();
 
 		triangulate();
+		System.out.println(seed);
 
 		Gdx.input.setInputProcessor(new InputAdapter() {
 			public boolean touchDown (int screenX, int screenY, int pointer, int button) {
@@ -58,6 +59,7 @@ public boolean mouseMoved (int screenX, int screenY) {
 
 	void triangulate () {
 		// seed = 4139368480425561099l;
+		// seed = 6559652580366669361l;
 		MathUtils.random.setSeed(seed);
 
 		int pointCount = 100;

File: gdx/src/com/badlogic/gdx/math/DelaunayTriangulator.java
Patch:
@@ -60,11 +60,11 @@ public IntArray computeTriangles (float[] points, int offset, int count, boolean
 
 		// Setup the super triangle, which encompasses all points.
 		float[] superTriangle = new float[6];
-		superTriangle[0] = xmid - 2f * dmax;
+		superTriangle[0] = xmid - 20f * dmax;
 		superTriangle[1] = ymid - dmax;
 		superTriangle[2] = xmid;
-		superTriangle[3] = ymid + 2f * dmax;
-		superTriangle[4] = xmid + 2f * dmax;
+		superTriangle[3] = ymid + 20f * dmax;
+		superTriangle[4] = xmid + 20f * dmax;
 		superTriangle[5] = ymid - dmax;
 		triangles.add(end);
 		triangles.add(end + 2);

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -27,6 +27,7 @@
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.tests.Bresenham2Test;
+import com.badlogic.gdx.tests.DelaunayTriangulatorTest;
 import com.badlogic.gdx.tests.EarClippingTriangulatorTest;
 import com.badlogic.gdx.tests.MeshShaderTest;
 import com.badlogic.gdx.tests.TimerTest;
@@ -46,7 +47,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new EarClippingTriangulatorTest();
+		GdxTest test = new DelaunayTriangulatorTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.width = 1024;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/DelaunayTriangulatorTest.java
Patch:
@@ -57,6 +57,7 @@ public boolean mouseMoved (int screenX, int screenY) {
 	}
 
 	void triangulate () {
+		seed = 4139368480425561099l;
 		MathUtils.random.setSeed(seed);
 
 		int pointCount = 100;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypeTest.java
Patch:
@@ -44,10 +44,11 @@ public void create () {
 		}
 		font = new BitmapFont(Gdx.files.internal("data/arial-15.fnt"), flip);
 		FileHandle fontFile = Gdx.files.internal("data/arial.ttf");
+		
 		FreeTypeFontGenerator generator = new FreeTypeFontGenerator(fontFile);
-		FreeTypeBitmapFontData fontData = generator.generateData(15, FreeTypeFontGenerator.DEFAULT_CHARS, flip);		
+		FreeTypeBitmapFontData fontData = generator.generateData(15, FreeTypeFontGenerator.DEFAULT_CHARS, flip);
+		ftFont = generator.generateFont(15, FreeTypeFontGenerator.DEFAULT_CHARS, flip);
 		generator.dispose();
-		ftFont = new BitmapFont(fontData, fontData.getTextureRegion(), false);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -98,7 +98,7 @@ public static boolean intersectSegmentPlane (Vector3 start, Vector3 end, Plane p
 
 	public static Vector2 triangleCentroid (float x1, float y1, float x2, float y2, float x3, float y3, Vector2 centroid) {
 		centroid.x = (x1 + x2 + x3) / 3;
-		centroid.y = (x1 + x2 + x3) / 3;
+		centroid.y = (y1 + y2 + y3) / 3;
 		return centroid;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ActorGestureListener.java
Patch:
@@ -98,6 +98,7 @@ public boolean handle (Event e) {
 			touchDown(event, tmpCoords.x, tmpCoords.y, event.getPointer(), event.getButton());
 			return true;
 		case touchUp:
+			if (event.isTouchFocusCancel()) return false;
 			this.event = event;
 			actor = event.getListenerActor();
 			detector.touchUp(event.getStageX(), event.getStageY(), event.getPointer(), event.getButton());

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -281,7 +281,7 @@ public static Mesh create(boolean isStatic, final Mesh[] meshes, final Matrix4[]
 			if (transformations != null)
 				transform(transformations[i], vertices, vertexSize, offset, numComponents, voffset / vertexSize, vsize / vertexSize);
 			mesh.getIndices(indices, ioffset);
-			for (int j = 0; j < isize; i++)
+			for (int j = 0; j < isize; j++)
 				indices[ioffset+j] = (short)(indices[ioffset+j] + voffset);
 			voffset += vsize;
 			ioffset += isize;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -48,7 +48,7 @@
 /** An implementation of the {@link Input} interface hooking a LWJGL panel for input.
  * 
  * @author mzechner */
-final class LwjglInput implements Input {
+final public class LwjglInput implements Input {
 	static public float keyRepeatInitialTime = 0.4f;
 	static public float keyRepeatTime = 0.1f;
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObjectSubData.java
Patch:
@@ -146,7 +146,7 @@ public void setIndices (short[] indices, int offset, int count) {
 // gl.glBufferData(GL11.GL_ELEMENT_ARRAY_BUFFER, byteBuffer
 // .limit(), byteBuffer, usage);
 				gl.glBufferSubData(GL11.GL_ELEMENT_ARRAY_BUFFER, 0, byteBuffer.limit(), byteBuffer);
-			} else if (Gdx.gl11 != null) {
+			} else if (Gdx.gl20 != null) {
 				GL20 gl = Gdx.gl20;
 // gl.glBufferData(GL20.GL_ELEMENT_ARRAY_BUFFER, byteBuffer
 // .limit(), byteBuffer, usage);

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObjectSubData.java
Patch:
@@ -146,7 +146,7 @@ public void setIndices (short[] indices, int offset, int count) {
 // gl.glBufferData(GL11.GL_ELEMENT_ARRAY_BUFFER, byteBuffer
 // .limit(), byteBuffer, usage);
 				gl.glBufferSubData(GL11.GL_ELEMENT_ARRAY_BUFFER, 0, byteBuffer.limit(), byteBuffer);
-			} else if (Gdx.gl11 != null) {
+			} else if (Gdx.gl20 != null) {
 				GL20 gl = Gdx.gl20;
 // gl.glBufferData(GL20.GL_ELEMENT_ARRAY_BUFFER, byteBuffer
 // .limit(), byteBuffer, usage);

File: gdx/src/com/badlogic/gdx/utils/AtomicQueue.java
Patch:
@@ -38,7 +38,7 @@ public AtomicQueue (int capacity) {
 	}
 
 	private int next (int idx) {
-		return idx + 1 & queue.length() - 1;
+		return (idx + 1) % queue.length();
 	}
 
 	public boolean put (T value) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -80,7 +80,7 @@ public Slider (float min, float max, float stepSize, boolean vertical, SliderSty
 
 		addListener(new InputListener() {
 			public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {
-				if (disabled) return true;
+				if (disabled) return false;
 				if (draggingPointer != -1) return false;
 				draggingPointer = pointer;
 				calculatePositionAndValue(x, y);

File: gdx/src/com/badlogic/gdx/utils/AtomicQueue.java
Patch:
@@ -38,7 +38,7 @@ public AtomicQueue (int capacity) {
 	}
 
 	private int next (int idx) {
-		return idx + 1 & queue.length() - 1;
+		return (idx + 1) % queue.length();
 	}
 
 	public boolean put (T value) {

File: gdx/src/com/badlogic/gdx/assets/loaders/SkinLoader.java
Patch:
@@ -40,7 +40,7 @@ public SkinLoader (FileHandleResolver resolver) {
 	public Array<AssetDescriptor> getDependencies (String fileName, FileHandle file, SkinParameter parameter) {
 		Array<AssetDescriptor> deps = new Array();
 		if (parameter == null)
-			deps.add(new AssetDescriptor(Gdx.files.absolute(fileName).pathWithoutExtension() + ".atlas", TextureAtlas.class));
+			deps.add(new AssetDescriptor(file.pathWithoutExtension() + ".atlas", TextureAtlas.class));
 		else if (parameter.textureAtlasPath != null)
 			deps.add(new AssetDescriptor(parameter.textureAtlasPath, TextureAtlas.class));
 		return deps;
@@ -54,7 +54,7 @@ public void loadAsync (AssetManager manager, String fileName, FileHandle file, S
 	public Skin loadSync (AssetManager manager, String fileName, FileHandle file, SkinParameter parameter) {
 		String textureAtlasPath;
 		if (parameter == null)
-			textureAtlasPath = Gdx.files.absolute(fileName).pathWithoutExtension() + ".atlas";
+			textureAtlasPath = file.pathWithoutExtension() + ".atlas";
 		else
 			textureAtlasPath = parameter.textureAtlasPath;
 		TextureAtlas atlas = manager.get(textureAtlasPath, TextureAtlas.class);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/RenderContext.java
Patch:
@@ -66,9 +66,9 @@ public final void setDepthTest(final int depthFunction, final float depthRangeNe
 				Gdx.gl.glDepthFunc(depthFunc = depthFunction);
 			if (!wasEnabled || this.depthRangeNear != depthRangeNear || this.depthRangeFar != depthRangeFar)
 				Gdx.gl.glDepthRangef(this.depthRangeNear = depthRangeNear, this.depthRangeFar = depthRangeFar);
-			if (!wasEnabled || this.depthMask != depthMask)
-				Gdx.gl.glDepthMask(this.depthMask = depthMask);
 		}
+		if (this.depthMask != depthMask)
+			Gdx.gl.glDepthMask(this.depthMask = depthMask);
 	}
 	
 	public final void setBlending(final boolean enabled, final int sFactor, final int dFactor) {

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/GLES10Shader.java
Patch:
@@ -146,7 +146,7 @@ else if (attribute.type == ColorAttribute.Diffuse) {
 					Gdx.gl10.glColor4f(((ColorAttribute)attribute).color.r, ((ColorAttribute)attribute).color.g, ((ColorAttribute)attribute).color.b, ((ColorAttribute)attribute).color.a);
 					if (renderable.lights != null) {
 						Gdx.gl10.glEnable(GL10.GL_COLOR_MATERIAL);
-						Gdx.gl10.glMaterialfv(GL10.GL_FRONT_AND_BACK, GL10.GL_AMBIENT, zeroVal4, 0);
+						Gdx.gl10.glMaterialfv(GL10.GL_FRONT_AND_BACK, GL10.GL_AMBIENT, getValues(lightVal, ((ColorAttribute)attribute).color), 0);
 						Gdx.gl10.glMaterialfv(GL10.GL_FRONT_AND_BACK, GL10.GL_DIFFUSE, getValues(lightVal, ((ColorAttribute)attribute).color), 0);
 					}
 				} else if (attribute.type == TextureAttribute.Diffuse) {

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/GLES10Shader.java
Patch:
@@ -146,7 +146,7 @@ else if (attribute.type == ColorAttribute.Diffuse) {
 					Gdx.gl10.glColor4f(((ColorAttribute)attribute).color.r, ((ColorAttribute)attribute).color.g, ((ColorAttribute)attribute).color.b, ((ColorAttribute)attribute).color.a);
 					if (renderable.lights != null) {
 						Gdx.gl10.glEnable(GL10.GL_COLOR_MATERIAL);
-						Gdx.gl10.glMaterialfv(GL10.GL_FRONT_AND_BACK, GL10.GL_AMBIENT, zeroVal4, 0);
+						Gdx.gl10.glMaterialfv(GL10.GL_FRONT_AND_BACK, GL10.GL_AMBIENT, getValues(lightVal, ((ColorAttribute)attribute).color), 0);
 						Gdx.gl10.glMaterialfv(GL10.GL_FRONT_AND_BACK, GL10.GL_DIFFUSE, getValues(lightVal, ((ColorAttribute)attribute).color), 0);
 					}
 				} else if (attribute.type == TextureAttribute.Diffuse) {

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/Constructor.java
Patch:
@@ -28,12 +28,12 @@ public class Constructor {
 
 	/** @return a new instance of the enclosing type of this constructor. */
 	public Object newInstance () {
-		return ReflectionCache.instance.newInstance(ReflectionCache.instance.forName(enclosingType.getName()));
+		return ReflectionCache.getType(enclosingType).newInstance();
 	}
 
 	/** @return the enclosing type this constructor belongs to. */
 	public Type getEnclosingType () {
-		return ReflectionCache.instance.forName(enclosingType.getName());
+		return ReflectionCache.getType(enclosingType);
 	}
 
 	public boolean isAccessible () {

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/Field.java
Patch:
@@ -66,11 +66,11 @@ public String getName () {
 	}
 
 	public Type getEnclosingType () {
-		return ReflectionCache.instance.forName(enclosingType.getName());
+		return ReflectionCache.getType(enclosingType);
 	}
 
 	public Type getType () {
-		return ReflectionCache.instance.forName(type.getName());
+		return ReflectionCache.getType(type);
 	}
 
 	public boolean isSynthetic () {

File: gdx/src/com/badlogic/gdx/utils/Sort.java
Patch:
@@ -29,7 +29,7 @@ public class Sort {
 
 	public <T> void sort (Array<T> a) {
 		if (comparableTimSort == null) comparableTimSort = new ComparableTimSort();
-		comparableTimSort.doSort(a.items, 0, a.size);
+		comparableTimSort.doSort((Object[])a.items, 0, a.size);
 	}
 
 	public <T> void sort (T[] a) {
@@ -44,7 +44,7 @@ public <T> void sort (T[] a, int fromIndex, int toIndex) {
 
 	public <T> void sort (Array<T> a, Comparator<T> c) {
 		if (timSort == null) timSort = new TimSort();
-		timSort.doSort(a.items, c, 0, a.size);
+		timSort.doSort((Object[])a.items, (Comparator)c, 0, a.size);
 	}
 
 	public <T> void sort (T[] a, Comparator<T> c) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -181,7 +181,7 @@ else if (direction.equals("xy")) {
 				}
 			}
 
-			new Sort().sort(regions.items, indexComparator, 0, regions.size);
+			new Sort().sort((Object[])regions.items, (Comparator)indexComparator, 0, regions.size);
 		}
 
 		public Array<Page> getPages () {

File: gdx/src/com/badlogic/gdx/math/Vector3.java
Patch:
@@ -27,9 +27,9 @@ public class Vector3 implements Serializable, Vector<Vector3> {
 
 	/** the x-component of this vector **/
 	public float x;
-	/** the x-component of this vector **/
+	/** the y-component of this vector **/
 	public float y;
-	/** the x-component of this vector **/
+	/** the z-component of this vector **/
 	public float z;
 
 	/** @deprecated

File: gdx/src/com/badlogic/gdx/math/Vector3.java
Patch:
@@ -25,11 +25,11 @@
 public class Vector3 implements Serializable, Vector<Vector3> {
 	private static final long serialVersionUID = 3840054589595372522L;
 
-	/** the y-component of this vector **/
-	public float x;
 	/** the x-component of this vector **/
-	public float y;
+	public float x;
 	/** the y-component of this vector **/
+	public float y;
+	/** the z-component of this vector **/
 	public float z;
 
 	/** @deprecated

File: gdx/src/com/badlogic/gdx/math/Vector3.java
Patch:
@@ -25,11 +25,11 @@
 public class Vector3 implements Serializable, Vector<Vector3> {
 	private static final long serialVersionUID = 3840054589595372522L;
 
-	/** the x-component of this vector **/
+	/** the y-component of this vector **/
 	public float x;
 	/** the x-component of this vector **/
 	public float y;
-	/** the x-component of this vector **/
+	/** the y-component of this vector **/
 	public float z;
 
 	/** @deprecated

File: gdx/src/com/badlogic/gdx/utils/IntSet.java
Patch:
@@ -416,7 +416,7 @@ public String toString () {
 		}
 	}
 
-	static private class IntSetIterator {
+	static public class IntSetIterator {
 		static final int INDEX_ILLEGAL = -2;
 		static final int INDEX_ZERO = -1;
 

File: gdx/src/com/badlogic/gdx/math/Vector.java
Patch:
@@ -19,7 +19,7 @@
 /** Encapsulates a general vector. Allows chaining operations by returning a reference to itself in all modification methods. See
  * {@link Vector2} and {@link Vector3} for specific implementations.
  * @author Xoppa */
-public interface Vector<T extends Vector> {
+public interface Vector<T extends Vector<T>> {
 	/** @return a copy of this vector */
 	T cpy ();
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -76,8 +76,8 @@ public Button (ButtonStyle style) {
 		setHeight(getPrefHeight());
 	}
 
-	/** Creates a button without setting the style or size. Subclasses must at least set the style. */
-	protected Button () {
+	/** Creates a button without setting the style or size. At least a style must be set before using this button. */
+	public Button () {
 		initialize();
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -256,7 +256,7 @@ protected int getFrameRate () {
 		if (frameRate == -1) frameRate = 10;
 		if (frameRate == 0) frameRate = graphics.config.backgroundFPS;
 		if (frameRate == 0) frameRate = 30;
-		return 0;
+		return frameRate;
 	}
 
 	protected void exception (Throwable ex) {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -256,7 +256,7 @@ protected int getFrameRate () {
 		if (frameRate == -1) frameRate = 10;
 		if (frameRate == 0) frameRate = graphics.config.backgroundFPS;
 		if (frameRate == 0) frameRate = 30;
-		return 0;
+		return frameRate;
 	}
 
 	protected void exception (Throwable ex) {

File: gdx/src/com/badlogic/gdx/assets/AssetErrorListener.java
Patch:
@@ -17,5 +17,5 @@
 package com.badlogic.gdx.assets;
 
 public interface AssetErrorListener {
-	public void error (String fileName, Class type, Throwable throwable);
+	public void error (AssetDescriptor asset, Throwable throwable);
 }

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -503,7 +503,7 @@ private void handleTaskError (Throwable t) {
 
 		// inform the listener that something bad happened
 		if (listener != null) {
-			listener.error(assetDesc.fileName, assetDesc.type, t);
+			listener.error(assetDesc, t);
 		} else {
 			throw new GdxRuntimeException(t);
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AssetManagerTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.assets.AssetDescriptor;
 import com.badlogic.gdx.assets.AssetErrorListener;
 import com.badlogic.gdx.assets.AssetManager;
 import com.badlogic.gdx.assets.loaders.TextureLoader;
@@ -152,8 +153,8 @@ public void render () {
 	}
 
 	@Override
-	public void error (String fileName, Class type, Throwable t) {
-		Gdx.app.error("AssetManagerTest", "couldn't load asset '" + fileName + "'", (Exception)t);
+	public void error (AssetDescriptor asset, Throwable throwable) {
+		Gdx.app.error("AssetManagerTest", "Couldn't load asset: " + asset, (Exception)throwable);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/math/Vector.java
Patch:
@@ -19,7 +19,7 @@
 /** Encapsulates a general vector. Allows chaining operations by returning a reference to itself in all modification methods. See
  * {@link Vector2} and {@link Vector3} for specific implementations.
  * @author Xoppa */
-public interface Vector<T extends Vector> {
+public interface Vector<T extends Vector<T>> {
 	/** @return a copy of this vector */
 	T cpy ();
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultTextureBinder.java
Patch:
@@ -76,7 +76,7 @@ private static int getMaxTextureUnits () {
 	@Override
 	public void begin () {
 		for(int i = 0; i < count; i++) {
-			textures[i].texture = null;
+			textures[i].reset();
 			if(weights != null) weights[i] = 0;
 		}
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultTextureBinder.java
Patch:
@@ -76,7 +76,7 @@ private static int getMaxTextureUnits () {
 	@Override
 	public void begin () {
 		for(int i = 0; i < count; i++) {
-			textures[i].texture = null;
+			textures[i].reset();
 			if(weights != null) weights[i] = 0;
 		}
 	}

File: gdx/src/com/badlogic/gdx/utils/ArrayMap.java
Patch:
@@ -136,12 +136,12 @@ public V get (K key) {
 	public K getKey (V value, boolean identity) {
 		Object[] values = this.values;
 		int i = size - 1;
-		if (identity || values == null) {
+		if (identity || value == null) {
 			for (; i >= 0; i--)
-				if (values[i] == values) return keys[i];
+				if (values[i] == value) return keys[i];
 		} else {
 			for (; i >= 0; i--)
-				if (values.equals(values[i])) return keys[i];
+				if (value.equals(values[i])) return keys[i];
 		}
 		return null;
 	}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -144,7 +144,7 @@ public void ontimeout (String status, String errorType) {
 		});
 	}
 
-	protected void setupLoop () {
+	void setupLoop () {
 		// setup modules
 		try {			
 			graphics = new GwtGraphics(root, config);			

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/ImageProcessor.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.badlogic.gdx.tools.imagepacker;
 
+import com.badlogic.gdx.tools.imagepacker.TexturePacker2.Alias;
 import com.badlogic.gdx.tools.imagepacker.TexturePacker2.Rect;
 import com.badlogic.gdx.tools.imagepacker.TexturePacker2.Settings;
 import com.badlogic.gdx.utils.Array;
@@ -132,7 +133,7 @@ public void addImage (BufferedImage image, String name) {
 			Rect existing = crcs.get(crc);
 			if (existing != null) {
 				System.out.println(rect.name + " (alias of " + existing.name + ")");
-				existing.aliases.add(rect.name);
+				existing.aliases.add(new Alias(rect.name, rect.index));
 				return;
 			}
 			crcs.put(crc, rect);

File: gdx/src/com/badlogic/gdx/utils/GdxBuild.java
Patch:
@@ -51,7 +51,7 @@ public static void main (String[] args) throws Exception {
 		BuildTarget lin64 = BuildTarget.newDefaultTarget(TargetOs.Linux, true);
 		lin64.cppExcludes = excludeCpp;
 		BuildTarget android = BuildTarget.newDefaultTarget(TargetOs.Android, false);
-		android.linkerFlags += " -lGLESv2";
+		android.linkerFlags += " -lGLESv2 -llog";
 		BuildTarget mac = BuildTarget.newDefaultTarget(TargetOs.MacOsX, false);
 		mac.cppExcludes = excludeCpp;
 		BuildTarget ios = BuildTarget.newDefaultTarget(TargetOs.IOS, false);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL20.java
Patch:
@@ -307,7 +307,7 @@ public String glGetActiveUniform (int program, int index, IntBuffer size, Buffer
 		IntBuffer typeTmp = BufferUtils.createIntBuffer(2);
 		String name = GL20.glGetActiveUniform(program, index, 256, typeTmp);
 		size.put(typeTmp.get(0));
-		if (type instanceof IntBuffer) ((IntBuffer)type).put(typeTmp.get(0));
+		if (type instanceof IntBuffer) ((IntBuffer)type).put(typeTmp.get(1));
 		return name;
 	}
 

File: gdx/src/com/badlogic/gdx/utils/Bits.java
Patch:
@@ -39,7 +39,7 @@ public void flip(int index) {
 	}
 	
 	private void checkCapacity(int len) {
-		if(len> bits.length) {
+		if(len>=bits.length) {
 			long[] newBits = new long[len+1];
 			System.arraycopy(bits, 0, newBits, 0, bits.length);
 			bits = newBits;

File: gdx/src/com/badlogic/gdx/graphics/g3d/lights/DirectionalLight.java
Patch:
@@ -14,14 +14,14 @@ public DirectionalLight set(final Color color, final Vector3 direction) {
 		if (color != null)
 			this.color.set(color);
 		if (direction != null)
-			this.direction.set(direction);
+			this.direction.set(direction).nor();
 		return this;
 	}
 	
 	public DirectionalLight set(final float r, final float g, final float b, final Vector3 direction) {
 		this.color.set(r,g,b,1f);
 		if (direction != null)
-			this.direction.set(direction);
+			this.direction.set(direction).nor();
 		return this;
 	}
 	

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/voxel/PerlinNoiseGenerator.java
Patch:
@@ -116,7 +116,7 @@ public static Pixmap generatePixmap(int width, int height, int min, int max, int
 	}
 	
 	public static void generateVoxels(VoxelWorld voxelWorld, int min, int max, int octaveCount) {
-		byte[] heightMap = PerlinNoiseGenerator.generateHeightMap(voxelWorld.voxelsX, voxelWorld.voxelsZ, min, max, 8);
+		byte[] heightMap = PerlinNoiseGenerator.generateHeightMap(voxelWorld.voxelsX, voxelWorld.voxelsZ, min, max, octaveCount);
 		int idx = 0;
 		for(int z = 0; z < voxelWorld.voxelsZ; z++) {
 			for(int x = 0; x < voxelWorld.voxelsX; x++) {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtMusic.java
Patch:
@@ -118,8 +118,7 @@ public void setOnCompletionListener (OnCompletionListener listener) {
 	public void onfinish () {
 		if (isLooping)
 			play();
-			
-		if (onCompletionListener != null)
+		else if (onCompletionListener != null)
 			onCompletionListener.onCompletion(this);
 	}
 }
\ No newline at end of file

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/io/RandomAccessFile.java
Patch:
@@ -146,7 +146,7 @@ public void close () throws IOException {
 		}
 	}
 
-	private void consolidate () {
+	protected void consolidate () {
 		if (newData == null) {
 			return;
 		}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/widgets/PlaceholderTextBox.java
Patch:
@@ -35,7 +35,7 @@ public String getPlaceholder () {
 
 	/** Sets the placeholder text displayed in the text box.
 	 * 
-	 * @param placeholder the placeholder text */
+	 * @param text the placeholder text */
 	public void setPlaceholder (String text) {
 		placeholder = (text != null ? text : "");
 		getElement().setPropertyString("placeholder", placeholder);

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/widgets/TextInputDialogBox.java
Patch:
@@ -72,14 +72,14 @@ public void onClick (ClickEvent event) {
 		setWidget(vPanel);
 	}
 
-	private void onPositive () {
+	protected void onPositive () {
 		if (listener != null) {
 			listener.onPositive(textBox.getText());
 		}
 		this.hide();
 	}
 
-	private void onNegative () {
+	protected void onNegative () {
 		if (listener != null) {
 			listener.onNegative();
 		}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplicationConfiguration.java
Patch:
@@ -35,7 +35,7 @@ public class GwtApplicationConfiguration {
 	public Panel rootPanel;
 	/** the id of a canvas element to be used as the drawing area, can be null in which case a Panel and Canvas are added to the
 	 * body element of the DOM **/
-	public String canavsId;
+	public String canvasId;
 	/** a TextArea to log messages to, can be null in which case a TextArea will be added to the body element of the DOM. */
 	public TextArea log;
 	/** whether to use debugging mode for OpenGL calls. Errors will result in a RuntimeException being thrown. */

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplicationConfiguration.java
Patch:
@@ -35,7 +35,7 @@ public class GwtApplicationConfiguration {
 	public Panel rootPanel;
 	/** the id of a canvas element to be used as the drawing area, can be null in which case a Panel and Canvas are added to the
 	 * body element of the DOM **/
-	public String canavsId;
+	public String canvasId;
 	/** a TextArea to log messages to, can be null in which case a TextArea will be added to the body element of the DOM. */
 	public TextArea log;
 	/** whether to use debugging mode for OpenGL calls. Errors will result in a RuntimeException being thrown. */

File: gdx/src/com/badlogic/gdx/math/Rectangle.java
Patch:
@@ -141,7 +141,8 @@ public void setSize (float sizeXY) {
 		this.height = sizeXY;
 	}
 
-	/** @return the Vector2 with size of this rectangle */
+	/** @return the Vector2 with size of this rectangle
+	 * @param size The Vector2 */
 	public Vector2 getSize (Vector2 size) {
 		return size.set(width, height);
 	}

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSGraphics.java
Patch:
@@ -131,6 +131,7 @@ protected void OnLoad (EventArgs arg0) {
 		super.OnLoad(arg0);
 		MakeCurrent();
 		app.listener.create();
+		app.listener.resize(width, height);
 		created = true;
 	}
 	
@@ -201,7 +202,7 @@ protected void OnUpdateFrame (FrameEventArgs frameEventArgs) {
 	@Override
 	protected void OnResize (EventArgs event) {
 		super.OnResize(event);
-
+		MakeCurrent();
 		// not used on iOS
 		// FIXME resize could happen if app supports both portrait and landscape, so this should be implemented
 		Gdx.app.debug("IOSGraphics", "iOS OnResize(...) is not implement (don't think it is needed?).");

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
Patch:
@@ -225,6 +225,7 @@ public void draw(GLKView view, CGRect rect) {
 		if(!created) {
 			app.graphics.makeCurrent();
 			app.listener.create();
+			app.listener.resize(width, height);
 			created = true;
 		}
 		if (paused) {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL20.java
Patch:
@@ -297,14 +297,16 @@ public String glGetActiveAttrib (int program, int index, IntBuffer size, Buffer
 		// FIXME this is less than ideal of course...
 		IntBuffer typeTmp = BufferUtils.createIntBuffer(2);
 		String name = GL20.glGetActiveAttrib(program, index, 256, typeTmp);
-		if (type instanceof IntBuffer) ((IntBuffer)type).put(typeTmp.get(0));
+		size.put(typeTmp.get(0));
+		if (type instanceof IntBuffer) ((IntBuffer)type).put(typeTmp.get(1));
 		return name;
 	}
 
 	public String glGetActiveUniform (int program, int index, IntBuffer size, Buffer type) {
 		// FIXME this is less than ideal of course...
 		IntBuffer typeTmp = BufferUtils.createIntBuffer(2);
 		String name = GL20.glGetActiveUniform(program, index, 256, typeTmp);
+		size.put(typeTmp.get(0));
 		if (type instanceof IntBuffer) ((IntBuffer)type).put(typeTmp.get(0));
 		return name;
 	}

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,6 +21,7 @@
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.scenes.scene2d.Stage;
+import com.badlogic.gdx.tests.MeshShaderTest;
 import com.badlogic.gdx.tests.TimerTest;
 import com.badlogic.gdx.tests.g3d.Basic3DSceneTest;
 import com.badlogic.gdx.tests.g3d.Basic3DTest;
@@ -37,7 +38,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new TimerTest();
+		GdxTest test = new MeshShaderTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.width = 480;

File: gdx/src/com/badlogic/gdx/utils/Timer.java
Patch:
@@ -17,7 +17,6 @@
 package com.badlogic.gdx.utils;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.math.MathUtils;
 
 /** Executes tasks in the future on the main loop thread.
  * @author Nathan Sweet */
@@ -45,7 +44,7 @@ public void run () {
 				}
 			}
 		};
-		thread.setDaemon(true);
+//		thread.setDaemon(true);
 		thread.start();
 	}
 

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,6 +21,7 @@
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.scenes.scene2d.Stage;
+import com.badlogic.gdx.tests.TimerTest;
 import com.badlogic.gdx.tests.g3d.Basic3DSceneTest;
 import com.badlogic.gdx.tests.g3d.Basic3DTest;
 import com.badlogic.gdx.tests.g3d.ModelLoaderTest;
@@ -36,7 +37,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new Basic3DTest();
+		GdxTest test = new TimerTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.width = 480;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -86,7 +86,7 @@ public class GdxTests {
 		ExternalMusicTest.class, SoftKeyboardTest.class, DirtyRenderingTest.class, YDownTest.class,
 		ScreenCaptureTest.class, BitmapFontTest.class, LabelScaleTest.class, GamepadTest.class, NetAPITest.class, TideMapAssetManagerTest.class, TideMapDirectLoaderTest.class, TiledMapAssetManagerTest.class, TiledMapBench.class,
 		RunnablePostTest.class, Vector2dTest.class, SuperKoalio.class, NinePatchTest.class, Basic3DSceneTest.class, Animation3DTest.class,
-		ModelTest.class, Basic3DTest.class, ShaderTest.class, SkeletonTest.class, HexagonalTiledMapTest.class, FogTest.class));
+		ModelTest.class, Basic3DTest.class, ShaderTest.class, SkeletonTest.class, HexagonalTiledMapTest.class, FogTest.class, TimerTest.class));
 	
 	public static List<String> getNames () {
 		List<String> names = new ArrayList<String>(tests.size());

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/ImageProcessor.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.badlogic.gdx.tools.imagepacker;
 
+import com.badlogic.gdx.tools.imagepacker.TexturePacker2.Alias;
 import com.badlogic.gdx.tools.imagepacker.TexturePacker2.Rect;
 import com.badlogic.gdx.tools.imagepacker.TexturePacker2.Settings;
 import com.badlogic.gdx.utils.Array;
@@ -126,7 +127,7 @@ public void addImage (BufferedImage image, String name) {
 			Rect existing = crcs.get(crc);
 			if (existing != null) {
 				System.out.println(rect.name + " (alias of " + existing.name + ")");
-				existing.aliases.add(rect.name);
+				existing.aliases.add(new Alias(rect.name, rect.index));
 				return;
 			}
 			crcs.put(crc, rect);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -60,7 +60,7 @@ public class GdxTests {
 		GroupCullingTest.class, GestureDetectorTest.class, LabelTest.class, BitmapFontMetricsTest.class, BlitTest.class, TableTest.class,
 		BobTest.class, ImageScaleTest.class, TableLayoutTest.class, Box2DTest.class, BulletTestCollection.class, InterpolationTest.class, TouchpadTest.class,
 		Box2DTestCollection.class, BufferUtilsTest.class, ImageTest.class, CompassTest.class, ComplexActionTest.class,
-		CullTest.class, DeltaTimeTest.class, EdgeDetectionTest.class, ETC1Test.class, ExitTest.class, FilesTest.class,
+		CullTest.class, DeltaTimeTest.class, EarClippingTriangulatorTest.class, EdgeDetectionTest.class, ETC1Test.class, ExitTest.class, FilesTest.class,
 		ScrollPaneTest.class, FloatTest.class, FloatTextureTest.class, FrameBufferTest.class, FramebufferToTextureTest.class, FrustumTest.class,
 		FullscreenTest.class, Gdx2DTest.class, GroupFadeTest.class, ImmediateModeRendererTest.class, Scene2dTest.class,
 		ImmediateModeRendererAlphaTest.class, IndexBufferObjectClassTest.class, TreeTest.class, IndexBufferObjectShaderTest.class,

File: tests/gdx-tests/src/com/badlogic/gdx/tests/EarClippingTriangulatorTest.java
Patch:
@@ -249,7 +249,7 @@ public void create() {
 			510, 60,
 			650, 70,
 			660, 450,
-			// 190, 480,
+			190, 480,
 		}));
 		
 		// Issue 815, http://code.google.com/p/libgdx/issues/detail?id=815

File: gdx/src/com/badlogic/gdx/math/EarClippingTriangulator.java
Patch:
@@ -80,7 +80,7 @@ public List<Vector2> computeTriangles (final List<Vector2> polygon) {
 			// Only the type of the two vertices adjacent to the clipped vertex can have changed,
 			// so no need to reclassify all of them.
 			classifyVertex(computePreviousIndex(earTipIndex));
-			classifyVertex(earTipIndex);
+			classifyVertex(earTipIndex == vertexCount ? 0 : earTipIndex);
 		}
 
 		/*

File: gdx/src/com/badlogic/gdx/graphics/GL10.java
Patch:
@@ -19,7 +19,7 @@
 import java.nio.Buffer;
 import java.nio.FloatBuffer;
 
-/** Interface wrapping all standard OpenGL ES 1.0 methods. Note that this excludes and fixed point OpenGL ES 1.0 methods!
+/** Interface wrapping all standard OpenGL ES 1.0 methods. Note that this excludes any fixed point OpenGL ES 1.0 methods!
  * 
  * @author mzechner */
 public interface GL10 extends GLCommon {

File: gdx/src/com/badlogic/gdx/assets/AssetLoadingTask.java
Patch:
@@ -115,7 +115,7 @@ private void handleAsyncLoader () {
 					try {
 						depsFuture.get();
 					} catch (Exception e) {
-						throw new GdxRuntimeException("Couldn't load dependencies of asset '" + assetDesc.fileName + "'", e);
+						throw new GdxRuntimeException("Couldn't load dependencies of asset: " + assetDesc.fileName, e);
 					}
 					dependenciesLoaded = true;
 					if (asyncDone) {
@@ -133,7 +133,7 @@ private void handleAsyncLoader () {
 					try {
 						loadFuture.get();
 					} catch (Exception e) {
-						throw new GdxRuntimeException("Couldn't load asset '" + assetDesc.fileName + "'", e);
+						throw new GdxRuntimeException("Couldn't load asset: " + assetDesc.fileName, e);
 					}
 					asset = asyncLoader.loadSync(manager, assetDesc.fileName, assetDesc.params);
 				}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -294,6 +294,7 @@ public void show (Stage stage) {
 			scrollToCenter(0, list.getHeight() - selectedIndex * itemHeight - itemHeight / 2, 0, 0);
 			updateVisualScroll();
 
+			clearActions();
 			getColor().a = 0;
 			addAction(fadeIn(0.3f, Interpolation.fade));
 		}

File: gdx/src/com/badlogic/gdx/graphics/GL10.java
Patch:
@@ -19,7 +19,7 @@
 import java.nio.Buffer;
 import java.nio.FloatBuffer;
 
-/** Interface wrapping all standard OpenGL ES 1.0 methods. Note that this excludes and fixed point OpenGL ES 1.0 methods!
+/** Interface wrapping all standard OpenGL ES 1.0 methods. Note that this excludes any fixed point OpenGL ES 1.0 methods!
  * 
  * @author mzechner */
 public interface GL10 extends GLCommon {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/Preloader.java
Patch:
@@ -101,7 +101,7 @@ public boolean hasEnded() {
 	public final String baseUrl;
 
 	public Preloader () {
-		baseUrl = GWT.getModuleBaseURL().replace(GWT.getModuleName() + "/", "") + "assets/";
+		baseUrl = GWT.getHostPageBaseURL() + "assets/";
 		// trigger copying of assets and creation of assets.txt
 		GWT.create(PreloaderBundle.class);
 	}

File: extensions/gdx-controllers/gdx-controllers-gwt/src/com/badlogic/gdx/controllers/gwt/support/GamepadSupport.java
Patch:
@@ -103,7 +103,7 @@ private static native void nativeInit() /*-{
         if (gamepadSupportAvailable) {
             $wnd.addEventListener('MozGamepadConnected', @com.badlogic.gdx.controllers.gwt.support.GamepadSupport::handleGamepadConnect(Lcom/badlogic/gdx/controllers/gwt/support/GamepadSupport$GamepadEvent;), false);
             $wnd.addEventListener('MozGamepadDisconnected', @com.badlogic.gdx.controllers.gwt.support.GamepadSupport::handleGamepadDisconnect(Lcom/badlogic/gdx/controllers/gwt/support/GamepadSupport$GamepadEvent;), false);
-            if ( !! navigator.getGamepads !! navigator.webkitGamepads || !! navigator.webkitGetGamepads) {
+            if ( !! navigator.getGamepads || !! navigator.webkitGamepads || !! navigator.webkitGetGamepads) {
                 @com.badlogic.gdx.controllers.gwt.support.GamepadSupport::startPolling()();
             }
         }

File: gdx/src/com/badlogic/gdx/assets/AssetLoadingTask.java
Patch:
@@ -27,9 +27,7 @@
 import com.badlogic.gdx.utils.async.AsyncResult;
 import com.badlogic.gdx.utils.async.AsyncTask;
 
-/** Responsible for loading an asset through an {@link AssetLoader} based on an {@link AssetDescriptor}. Implements
- * {@link Callable} and is used with an {@link ExecutorService threadpool} to load parts of an asset asynchronously if the asset is
- * loaded with an {@link AsynchronousAssetLoader}.
+/** Responsible for loading an asset through an {@link AssetLoader} based on an {@link AssetDescriptor}.
  * 
  * @author mzechner */
 class AssetLoadingTask implements AsyncTask<Void> {

File: gdx/src/com/badlogic/gdx/utils/DelayedRemovalArray.java
Patch:
@@ -37,7 +37,7 @@ public DelayedRemovalArray (Array array) {
 		super(array);
 	}
 
-	public DelayedRemovalArray (boolean ordered, int capacity, Class<T> arrayType) {
+	public DelayedRemovalArray (boolean ordered, int capacity, Class arrayType) {
 		super(ordered, capacity, arrayType);
 	}
 
@@ -49,7 +49,7 @@ public DelayedRemovalArray (boolean ordered, T[] array, int startIndex, int coun
 		super(ordered, array, startIndex, count);
 	}
 
-	public DelayedRemovalArray (Class<T> arrayType) {
+	public DelayedRemovalArray (Class arrayType) {
 		super(arrayType);
 	}
 

File: gdx/src/com/badlogic/gdx/utils/SnapshotArray.java
Patch:
@@ -48,7 +48,7 @@ public SnapshotArray (Array array) {
 		super(array);
 	}
 
-	public SnapshotArray (boolean ordered, int capacity, Class<T> arrayType) {
+	public SnapshotArray (boolean ordered, int capacity, Class arrayType) {
 		super(ordered, capacity, arrayType);
 	}
 
@@ -60,7 +60,7 @@ public SnapshotArray (boolean ordered, T[] array, int startIndex, int count) {
 		super(ordered, array, startIndex, count);
 	}
 
-	public SnapshotArray (Class<T> arrayType) {
+	public SnapshotArray (Class arrayType) {
 		super(arrayType);
 	}
 

File: extensions/gdx-bullet/src/com/badlogic/gdx/physics/bullet/BulletBuild.java
Patch:
@@ -45,7 +45,7 @@ public static void main (String[] args) throws Exception {
 
 		// generate build scripts
 		String[] excludes = {"src/bullet/BulletMultiThreaded/GpuSoftBodySolvers/**"};
-		String[] headers = {"src/bullet/", "src/custom/", "src/extras/serialize/"};
+		String[] headers = {"src/bullet/", "src/custom/", "src/extras/Serialize/"};
 
 		BuildTarget win32home = BuildTarget.newDefaultTarget(TargetOs.Windows, false);
 		win32home.compilerPrefix = "";

File: gdx/src/com/badlogic/gdx/graphics/g3d/lights/Lights.java
Patch:
@@ -1,12 +1,12 @@
 package com.badlogic.gdx.graphics.g3d.lights;
 
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 public class Lights {
 	public final Color ambientLight = new Color(0,0,0,1);
+    public Color fog;
 	public final Array<DirectionalLight> directionalLights = new Array<DirectionalLight>();
 	public final Array<PointLight> pointLights = new Array<PointLight>();
 	

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -36,13 +36,15 @@
 import com.badlogic.gdx.tests.*;
 import com.badlogic.gdx.tests.bench.TiledMapBench;
 import com.badlogic.gdx.tests.examples.MoveSpriteExample;
+
 import com.badlogic.gdx.tests.g3d.Animation3DTest;
 import com.badlogic.gdx.tests.g3d.Basic3DTest;
 import com.badlogic.gdx.tests.g3d.MaterialTest;
 import com.badlogic.gdx.tests.g3d.ModelTest;
 import com.badlogic.gdx.tests.g3d.Basic3DSceneTest;
 import com.badlogic.gdx.tests.g3d.ShaderTest;
 import com.badlogic.gdx.tests.g3d.SkeletonTest;
+
 import com.badlogic.gdx.tests.gles2.HelloTriangle;
 import com.badlogic.gdx.tests.gles2.SimpleVertexShader;
 import com.badlogic.gdx.tests.net.NetAPITest;
@@ -85,7 +87,7 @@ public class GdxTests {
 		ExternalMusicTest.class, SoftKeyboardTest.class, DirtyRenderingTest.class, YDownTest.class,
 		ScreenCaptureTest.class, BitmapFontTest.class, LabelScaleTest.class, GamepadTest.class, NetAPITest.class, TideMapAssetManagerTest.class, TideMapDirectLoaderTest.class, TiledMapAssetManagerTest.class, TiledMapBench.class,
 		RunnablePostTest.class, Vector2dTest.class, SuperKoalio.class, NinePatchTest.class, Basic3DSceneTest.class, Animation3DTest.class,
-		ModelTest.class, Basic3DTest.class, ShaderTest.class, SkeletonTest.class, HexagonalTiledMapTest.class));
+		ModelTest.class, Basic3DTest.class, ShaderTest.class, SkeletonTest.class, HexagonalTiledMapTest.class, FogTest.class));
 	
 	public static List<String> getNames () {
 		List<String> names = new ArrayList<String>(tests.size());

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ScaledNumericPanel.java
Patch:
@@ -123,7 +123,7 @@ public void actionPerformed (ActionEvent event) {
 				GridBagConstraints expandButtonConstraints = layout.getConstraints(expandButton);
 				if (expanded) {
 					chart.setPreferredSize(new Dimension(150, 200));
-					expandButton.setText("�");
+					expandButton.setText("-");
 					chartConstraints.weightx = 1;
 					expandButtonConstraints.weightx = 0;
 				} else {

File: gdx/src/com/badlogic/gdx/audio/Music.java
Patch:
@@ -69,8 +69,8 @@ public interface Music extends Disposable {
 	/** @return the volume of this music stream. */
 	public float getVolume ();
 	
-/** Sets the panning and volume of this music stream.
-	 * @param pan panning in the range -1 (full right) to 1 (full left). 0 is center position.
+    /** Sets the panning and volume of this music stream.
+	 * @param pan panning in the range -1 (full left) to 1 (full right). 0 is center position.
 	 * @param volume the volume in the range [0,1]. */
 	public void setPan (float pan, float volume);
 	

File: gdx/src/com/badlogic/gdx/audio/Sound.java
Patch:
@@ -48,7 +48,7 @@ public interface Sound extends Disposable {
 	/** Plays the sound. If the sound is already playing, it will be played again, concurrently.
 	 * @param volume the volume in the range [0,1]
 	 * @param pitch the pitch multiplier, 1 == default, >1 == faster, <1 == slower, the value has to be between 0.5 and 2.0
-	 * @param pan panning in the range -1 (full right) to 1 (full left). 0 is center position.
+	 * @param pan panning in the range -1 (full left) to 1 (full right). 0 is center position.
 	 * @return the id of the sound instance if successful, or -1 on failure. */
 	public long play (float volume, float pitch, float pan);
 
@@ -66,7 +66,7 @@ public interface Sound extends Disposable {
 	 * via a call to {@link #stop(long)} using the returned id.
 	 * @param volume the volume in the range [0,1]
 	 * @param pitch the pitch multiplier, 1 == default, >1 == faster, <1 == slower, the value has to be between 0.5 and 2.0
-	 * @param pan panning in the range -1 (full right) to 1 (full left). 0 is center position.
+	 * @param pan panning in the range -1 (full left) to 1 (full right). 0 is center position.
 	 * @return the id of the sound instance if successful, or -1 on failure. */
 	public long loop (float volume, float pitch, float pan);
 
@@ -101,7 +101,7 @@ public interface Sound extends Disposable {
 	/** Sets the panning and volume of the sound instance with the given id as returned by {@link #play()} or {@link #play(float)}.
 	 * If the sound is no longer playing, this has no effect.
 	 * @param soundId the sound id
-	 * @param pan panning in the range -1 (full right) to 1 (full left). 0 is center position.
+	 * @param pan panning in the range -1 (full left) to 1 (full right). 0 is center position.
 	 * @param volume the volume in the range [0,1]. */
 	public void setPan (long soundId, float pan, float volume);
 	

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
Patch:
@@ -57,7 +57,7 @@ public class BaseBulletTest extends BulletTest {
 	private final static String customDesktopLib = null;//"D:\\Data\\code\\android\\libs\\libgdx\\extensions\\gdx-bullet\\jni\\vs\\gdxBullet\\x64\\Debug\\gdxBullet.dll";
 	
 	private static boolean initialized = false;
-	private static void init() {
+	public static void init() {
 		if (initialized) return;
 		// Need to initialize bullet before using it.
 		if (Gdx.app.getType() == ApplicationType.Desktop && customDesktopLib != null)

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicBulletTest.java
Patch:
@@ -114,7 +114,7 @@ public void create () {
 			Usage.Position | Usage.Normal);
 		models.add(sphereModel);
 		// Load the bullet library
-		Bullet.init();
+		BaseBulletTest.init(); // Normally use: Bullet.init();
 		// Create the bullet world
 		collisionConfiguration = new btDefaultCollisionConfiguration();
 		dispatcher = new btCollisionDispatcher(collisionConfiguration);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/BaseAnimationController.java
Patch:
@@ -48,7 +48,7 @@ public Matrix4 toMatrix4(final Matrix4 out) {
 			out.idt();
 			out.translate(translation);
 			out.rotate(rotation);
-			out.scl(scale);
+			out.scale(scale.x, scale.y, scale.z);
 			return out;
 		}
 		@Override

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/ParallelAction.java
Patch:
@@ -63,7 +63,7 @@ public boolean act (float delta) {
 		if (complete) return true;
 		complete = true;
 		Array<Action> actions = this.actions;
-		for (int i = 0, n = actions.size; i < n; i++)
+		for (int i = 0, n = actions.size; i < n && actor != null; i++)
 			if (!actions.get(i).act(delta)) complete = false;
 		return complete;
 	}

File: gdx/src/com/badlogic/gdx/audio/Music.java
Patch:
@@ -69,8 +69,8 @@ public interface Music extends Disposable {
 	/** @return the volume of this music stream. */
 	public float getVolume ();
 	
-/** Sets the panning and volume of this music stream.
-	 * @param pan panning in the range -1 (full right) to 1 (full left). 0 is center position.
+    /** Sets the panning and volume of this music stream.
+	 * @param pan panning in the range -1 (full left) to 1 (full right). 0 is center position.
 	 * @param volume the volume in the range [0,1]. */
 	public void setPan (float pan, float volume);
 	

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ScaledNumericPanel.java
Patch:
@@ -123,7 +123,7 @@ public void actionPerformed (ActionEvent event) {
 				GridBagConstraints expandButtonConstraints = layout.getConstraints(expandButton);
 				if (expanded) {
 					chart.setPreferredSize(new Dimension(150, 200));
-					expandButton.setText("�");
+					expandButton.setText("-");
 					chartConstraints.weightx = 1;
 					expandButtonConstraints.weightx = 0;
 				} else {

File: gdx/src/com/badlogic/gdx/audio/Sound.java
Patch:
@@ -48,7 +48,7 @@ public interface Sound extends Disposable {
 	/** Plays the sound. If the sound is already playing, it will be played again, concurrently.
 	 * @param volume the volume in the range [0,1]
 	 * @param pitch the pitch multiplier, 1 == default, >1 == faster, <1 == slower, the value has to be between 0.5 and 2.0
-	 * @param pan panning in the range -1 (full right) to 1 (full left). 0 is center position.
+	 * @param pan panning in the range -1 (full left) to 1 (full right). 0 is center position.
 	 * @return the id of the sound instance if successful, or -1 on failure. */
 	public long play (float volume, float pitch, float pan);
 
@@ -66,7 +66,7 @@ public interface Sound extends Disposable {
 	 * via a call to {@link #stop(long)} using the returned id.
 	 * @param volume the volume in the range [0,1]
 	 * @param pitch the pitch multiplier, 1 == default, >1 == faster, <1 == slower, the value has to be between 0.5 and 2.0
-	 * @param pan panning in the range -1 (full right) to 1 (full left). 0 is center position.
+	 * @param pan panning in the range -1 (full left) to 1 (full right). 0 is center position.
 	 * @return the id of the sound instance if successful, or -1 on failure. */
 	public long loop (float volume, float pitch, float pan);
 
@@ -101,7 +101,7 @@ public interface Sound extends Disposable {
 	/** Sets the panning and volume of the sound instance with the given id as returned by {@link #play()} or {@link #play(float)}.
 	 * If the sound is no longer playing, this has no effect.
 	 * @param soundId the sound id
-	 * @param pan panning in the range -1 (full right) to 1 (full left). 0 is center position.
+	 * @param pan panning in the range -1 (full left) to 1 (full right). 0 is center position.
 	 * @param volume the volume in the range [0,1]. */
 	public void setPan (long soundId, float pan, float volume);
 	

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ObjTest.java
Patch:
@@ -47,7 +47,7 @@ public void create () {
 		model =  objLoader.loadModel(Gdx.files.internal("data/cube.obj"));
 		
 		BoundingBox bbox = new BoundingBox();
-		model.getBoundingBox(bbox);
+		model.calculateBoundingBox(bbox);
 		
 		Gdx.app.log("ObjTest", "obj bounds: " + bbox);
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"), true);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RunnableAction.java
Patch:
@@ -27,8 +27,8 @@ public class RunnableAction extends Action {
 
 	public boolean act (float delta) {
 		if (!ran) {
-			run();
 			ran = true;
+			run();
 		}
 		return true;
 	}

File: gdx/src/com/badlogic/gdx/graphics/glutils/FrameBuffer.java
Patch:
@@ -85,7 +85,7 @@ public class FrameBuffer implements Disposable {
 	/** Creates a new FrameBuffer having the given dimensions and potentially a depth buffer attached.
 	 * 
 	 * @param format the format of the color buffer; according to the OpenGL ES 2.0 spec, only
-   * RGB565, RGBA4444 and RGB5_A1 are color-renderable
+	 * RGB565, RGBA4444 and RGB5_A1 are color-renderable
 	 * @param width the width of the framebuffer in pixels
 	 * @param height the height of the framebuffer in pixels
 	 * @param hasDepth whether to attach a depth buffer
@@ -182,7 +182,7 @@ private void build () {
 				throw new IllegalStateException("frame buffer couldn't be constructed: missing attachment");
 			if (result == GL20.GL_FRAMEBUFFER_UNSUPPORTED)
 				throw new IllegalStateException("frame buffer couldn't be constructed: unsupported combination of formats");
-      throw new IllegalStateException(String.format("frame buffer couldn't be constructed: unknown error 0x%04x", result));
+			throw new IllegalStateException("frame buffer couldn't be constructed: unknown error " + result);
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/FrameBuffer.java
Patch:
@@ -85,7 +85,7 @@ public class FrameBuffer implements Disposable {
 	/** Creates a new FrameBuffer having the given dimensions and potentially a depth buffer attached.
 	 * 
 	 * @param format the format of the color buffer; according to the OpenGL ES 2.0 spec, only
-   * RGB565, RGBA4444 and RGB5_A1 are color-renderable
+	 * RGB565, RGBA4444 and RGB5_A1 are color-renderable
 	 * @param width the width of the framebuffer in pixels
 	 * @param height the height of the framebuffer in pixels
 	 * @param hasDepth whether to attach a depth buffer
@@ -182,7 +182,7 @@ private void build () {
 				throw new IllegalStateException("frame buffer couldn't be constructed: missing attachment");
 			if (result == GL20.GL_FRAMEBUFFER_UNSUPPORTED)
 				throw new IllegalStateException("frame buffer couldn't be constructed: unsupported combination of formats");
-      throw new IllegalStateException(String.format("frame buffer couldn't be constructed: unknown error 0x%04x", result));
+			throw new IllegalStateException("frame buffer couldn't be constructed: unknown error " + result);
 		}
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/InternalTickTest.java
Patch:
@@ -36,7 +36,7 @@ public void onInternalTick (btDynamicsWorld dynamicsWorld, float timeStep) {
 			dynamicsWorld.clearForces();
 			int idx = 0;
 			for (int i = 0; i < objs.size(); i++) {
-				btRigidBody body = btRigidBody.upcast(objs.at(i));
+				btRigidBody body = (btRigidBody)(objs.at(i));
 				if (body == null || body.isStaticOrKinematicObject())
 					continue;
 				body.applyGravity();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayCastTest.java
Patch:
@@ -88,7 +88,7 @@ public boolean tap (float x, float y, int count, int button) {
 		if (rayTestCB.hasHit()) {
 			final btCollisionObject obj = rayTestCB.getM_collisionObject();
 			if (!obj.isStaticOrKinematicObject()) {
-				final btRigidBody body = btRigidBody.upcast(obj);
+				final btRigidBody body = (btRigidBody)(obj);
 				body.activate();
 				body.applyCentralImpulse(Vector3.tmp2.set(ray.direction).scl(20f));
 			}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayPickRagdollTest.java
Patch:
@@ -97,7 +97,7 @@ public boolean touchDown (int screenX, int screenY, int pointer, int button) {
 			ClosestRayResultCallback cb = new ClosestRayResultCallback(ray.origin, Vector3.tmp);
 			world.collisionWorld.rayTest(ray.origin, Vector3.tmp, cb);
 			if (cb.hasHit()) {
-				btRigidBody body = btRigidBody.upcast(cb.getM_collisionObject());
+				btRigidBody body = (btRigidBody)(cb.getM_collisionObject());
 				if (body != null && !body.isStaticObject() && !body.isKinematicObject()) {
 					pickedBody = body;
 					body.setActivationState(gdxBullet.DISABLE_DEACTIVATION);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -36,6 +36,7 @@
 import com.badlogic.gdx.tests.*;
 import com.badlogic.gdx.tests.bench.TiledMapBench;
 import com.badlogic.gdx.tests.examples.MoveSpriteExample;
+import com.badlogic.gdx.tests.g3d.Animation3DTest;
 import com.badlogic.gdx.tests.g3d.Basic3DTest;
 import com.badlogic.gdx.tests.g3d.MaterialTest;
 import com.badlogic.gdx.tests.g3d.ModelTest;
@@ -83,7 +84,7 @@ public class GdxTests {
 		TextButtonTest.class, TextButtonTestGL2.class, TextureBindTest.class, SortedSpriteTest.class,
 		ExternalMusicTest.class, SoftKeyboardTest.class, DirtyRenderingTest.class, YDownTest.class,
 		ScreenCaptureTest.class, BitmapFontTest.class, LabelScaleTest.class, GamepadTest.class, NetAPITest.class, TideMapAssetManagerTest.class, TideMapDirectLoaderTest.class, TiledMapAssetManagerTest.class, TiledMapBench.class,
-		RunnablePostTest.class, Vector2dTest.class, SuperKoalio.class, NinePatchTest.class, Basic3DSceneTest.class,
+		RunnablePostTest.class, Vector2dTest.class, SuperKoalio.class, NinePatchTest.class, Basic3DSceneTest.class, Animation3DTest.class,
 		ModelTest.class, Basic3DTest.class, ShaderTest.class, SkeletonTest.class, HexagonalTiledMapTest.class));
 	
 	public static List<String> getNames () {

File: gdx/src/com/badlogic/gdx/graphics/g3d/lights/Lights.java
Patch:
@@ -6,7 +6,7 @@
 
 public class Lights {
 	public final Color ambientLight = new Color(0,0,0,1);
-    public final Color fog = new Color(0,0,0,0);
+    public Color fog;
 	public final Array<DirectionalLight> directionalLights = new Array<DirectionalLight>();
 	public final Array<PointLight> pointLights = new Array<PointLight>();
 	
@@ -27,7 +27,6 @@ public Lights(final Color ambient, final BaseLight... lights) {
 	
 	public Lights clear() {
 		ambientLight.set(0,0,0,1);
-        fog.set(0,0,0,0);
 		directionalLights.clear();
 		pointLights.clear();
 		return this;

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultShaderProvider.java
Patch:
@@ -28,7 +28,7 @@ public DefaultShaderProvider() {
 	protected Shader createShader(final Renderable renderable) {
 		Gdx.app.log("DefaultShaderProvider", "Creating new shader");
 		if (Gdx.graphics.isGL20Available()) {
-            return new DefaultShader(vertexShader, fragmentShader, renderable.material, renderable.mesh.getVertexAttributes(), renderable.lights != null, renderable.lights != null && renderable.lights.fog.a > 0, 2, 5, 3, renderable.bones == null ? 0 : 12);
+            return new DefaultShader(vertexShader, fragmentShader, renderable.material, renderable.mesh.getVertexAttributes(), renderable.lights != null, renderable.lights != null && renderable.lights.fog != null, 2, 5, 3, renderable.bones == null ? 0 : 12);
         }
 		return new GLES10Shader();
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/FogTest.java
Patch:
@@ -31,7 +31,7 @@ public void create () {
 		modelBatch = new ModelBatch();
 		lights = new Lights();
 		lights.ambientLight.set(0.4f, 0.4f, 0.4f, 1f);
-        lights.fog.set(0.13f, 0.13f, 0.13f, 1f);
+        lights.fog = new Color(0.13f, 0.13f, 0.13f, 1f);
 		lights.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -1f, -0.8f, -0.2f));
 		
 		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());

File: gdx/src/com/badlogic/gdx/maps/tiled/tiles/AnimatedTiledMapTile.java
Patch:
@@ -21,6 +21,7 @@ public class AnimatedTiledMapTile implements TiledMapTile {
 
 	private float animationInterval;
 	private long frameCount = 0;
+	private static final long initialTimeOffset = TimeUtils.millis();
 
 	@Override
 	public int getId () {
@@ -44,7 +45,7 @@ public void setBlendMode (BlendMode blendMode) {
 
 	@Override
 	public TextureRegion getTextureRegion () {
-		long currentFrame = (lastTiledMapRenderTime / (long)animationInterval) % frameCount;
+		long currentFrame = (lastTiledMapRenderTime / (long)(animationInterval * 1000f)) % frameCount;
 		return frameTiles.get((int)currentFrame).getTextureRegion();
 	}
 
@@ -59,7 +60,7 @@ public MapProperties getProperties () {
 	/** Function is called by BatchTiledMapRenderer render(), lastTiledMapRenderTime is used to keep all of the tiles in lock-step
 	 * animation and avoids having to call TimeUtils.millis() in getTextureRegion() */
 	public static void updateAnimationBaseTime () {
-		lastTiledMapRenderTime = TimeUtils.millis();
+		lastTiledMapRenderTime = TimeUtils.millis() - initialTimeOffset;
 	}
 
 	public AnimatedTiledMapTile (float interval, Array<StaticTiledMapTile> frameTiles) {

File: gdx/src/com/badlogic/gdx/maps/tiled/tiles/AnimatedTiledMapTile.java
Patch:
@@ -44,7 +44,7 @@ public void setBlendMode (BlendMode blendMode) {
 
 	@Override
 	public TextureRegion getTextureRegion () {
-		long currentFrame = (lastTiledMapRenderTime / (long)animationInterval) % frameCount;
+		long currentFrame = (lastTiledMapRenderTime / (long)(animationInterval * 1000f)) % frameCount;
 		return frameTiles.get((int)currentFrame).getTextureRegion();
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -330,7 +330,6 @@ public boolean keyTyped (InputEvent event, char character) {
 								delete();
 							}
 						}
-						return true;
 					}
 					if (character != ENTER_DESKTOP && character != ENTER_ANDROID) {
 						if (filter != null && !filter.acceptChar(TextField.this, character)) return true;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -330,7 +330,6 @@ public boolean keyTyped (InputEvent event, char character) {
 								delete();
 							}
 						}
-						return true;
 					}
 					if (character != ENTER_DESKTOP && character != ENTER_ANDROID) {
 						if (filter != null && !filter.acceptChar(TextField.this, character)) return true;

File: gdx/src/com/badlogic/gdx/physics/box2d/Shape.java
Patch:
@@ -30,7 +30,7 @@ public abstract class Shape {
 	/** Enum describing the type of a shape
 	 * @author mzechner */
 	public enum Type {
-		Circle, Polygon, Edge, Chain,
+		Circle, Edge, Polygon, Chain,
 	};
 
 	/** the address of the shape **/

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -82,13 +82,12 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 	 * The default implementation calls {@link Action#act(float)} on each action and removes actions that are complete.
 	 * @param delta Time in seconds since the last frame. */
 	public void act (float delta) {
-		for (int i = 0, n = actions.size; i < n; i++) {
+		for (int i = 0; i < actions.size; i++) {
 			Action action = actions.get(i);
-			if (action.act(delta)) {
+			if (action.act(delta) && i < actions.size) {
 				actions.removeIndex(i);
 				action.setActor(null);
 				i--;
-				n--;
 			}
 		}
 	}

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/SuperJumper.java
Patch:
@@ -28,14 +28,14 @@ public class SuperJumper extends Game {
 	public void create () {
 		Settings.load();
 		Assets.load();
-		setScreen(new MainMenuScreen(this));
+		setScreen(new GameScreen(this));
 		fps = new FPSLogger();
 	}
 	
 	@Override
 	public void render() {
 		super.render();
-//		fps.log();
+		fps.log();
 	}
 
 	/** {@link Game#dispose()} only calls {@link Screen#hide()} so you need to override {@link Game#dispose()} in order to call

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/SuperJumper.java
Patch:
@@ -35,7 +35,7 @@ public void create () {
 	@Override
 	public void render() {
 		super.render();
-		fps.log();
+//		fps.log();
 	}
 
 	/** {@link Game#dispose()} only calls {@link Screen#hide()} so you need to override {@link Game#dispose()} in order to call

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.backends.robovm;
+package com.badlogic.gdx.backends.iosrobovm;
 
 import java.io.File;
 

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplicationConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.backends.robovm;
+package com.badlogic.gdx.backends.iosrobovm;
 
 public class IOSApplicationConfiguration {
 	// FIXME add compass, framebuffer bit depth, stencil, just like on Android if possible

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSAudio.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.backends.robovm;
+package com.badlogic.gdx.backends.iosrobovm;
 
 import com.badlogic.gdx.Audio;
 import com.badlogic.gdx.Gdx;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSFileHandle.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.backends.robovm;
+package com.badlogic.gdx.backends.iosrobovm;
 
 import java.io.File;
 

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSFiles.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.backends.robovm;
+package com.badlogic.gdx.backends.iosrobovm;
 
 import java.io.File;
 

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGLES20.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.backends.robovm;
+package com.badlogic.gdx.backends.iosrobovm;
 
 import java.nio.Buffer;
 import java.nio.FloatBuffer;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.backends.robovm;
+package com.badlogic.gdx.backends.iosrobovm;
 
 import org.robovm.cocoatouch.coregraphics.CGPoint;
 import org.robovm.cocoatouch.coregraphics.CGRect;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSInput.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.backends.robovm;
+package com.badlogic.gdx.backends.iosrobovm;
 
 import org.robovm.cocoatouch.coregraphics.CGPoint;
 import org.robovm.cocoatouch.foundation.NSArray;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.backends.robovm;
+package com.badlogic.gdx.backends.iosrobovm;
 
 import com.badlogic.gdx.audio.Music;
 

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSNet.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.backends.robovm;
+package com.badlogic.gdx.backends.iosrobovm;
 
 import org.robovm.cocoatouch.foundation.NSURL;
 import org.robovm.cocoatouch.uikit.UIApplication;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSPreferences.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.backends.robovm;
+package com.badlogic.gdx.backends.iosrobovm;
 
 import java.util.HashMap;
 import java.util.Map;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSServerSocket.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.backends.robovm;
+package com.badlogic.gdx.backends.iosrobovm;
 
 import java.net.InetSocketAddress;
 

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSSocket.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.backends.robovm;
+package com.badlogic.gdx.backends.iosrobovm;
 
 import java.io.InputStream;
 import java.io.OutputStream;

File: backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSSound.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.backends.robovm;
+package com.badlogic.gdx.backends.iosrobovm;
 
 import com.badlogic.gdx.audio.Sound;
 

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/BuildTarget.java
Patch:
@@ -138,8 +138,8 @@ public static BuildTarget newDefaultTarget (BuildTarget.TargetOs type, boolean i
 			// iOS, 386 simulator and armv7a, compiled to fat static lib
 			BuildTarget ios = new BuildTarget(TargetOs.IOS, false, new String[] {"**/*.c"}, new String[0],
 				new String[] {"**/*.cpp"}, new String[0], new String[0], "",
-				"-c -Wall -O2",
-				"-c -Wall -O2",
+				"-c -Wall -O2 -miphoneos-version-min=5.1",
+				"-c -Wall -O2 -miphoneos-version-min=5.1",
 				"rcs");
 			return ios;
 		}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -798,6 +798,9 @@ void updateKeyboard () {
 					long timeStamp = Keyboard.getEventNanoseconds();
 
 					switch (keyCode) {
+					case Keys.DEL:
+						keyChar = 8;
+						break;
 					case Keys.FORWARD_DEL:
 						keyChar = 127;
 						break;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtSound.java
Patch:
@@ -45,12 +45,12 @@ public long play (float volume) {
 
 	@Override
 	public long loop () {
-		return 0;
+		return -1;
 	}
 
 	@Override
 	public long loop (float volume) {
-		return 0;
+		return -1;
 	}
 
 	@Override

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/MapRenderer.java
Patch:
@@ -17,7 +17,7 @@ public class MapRenderer {
 	Map map;
 	OrthographicCamera cam;
 	SpriteCache cache;
-	SpriteBatch batch = new SpriteBatch(10000);
+	SpriteBatch batch = new SpriteBatch(5460);
 	ImmediateModeRenderer20 renderer = new ImmediateModeRenderer20(false, true, 0);
 	int[][] blocks;
 	TextureRegion tile;

File: gdx/src/com/badlogic/gdx/graphics/g3d/Model.java
Patch:
@@ -271,8 +271,8 @@ private Material convertMaterial(ModelMaterial mtl, TextureProvider textureProvi
 				TextureDescriptor descriptor = new TextureDescriptor(texture);
 				descriptor.minFilter = GL20.GL_LINEAR;
 				descriptor.magFilter = GL20.GL_LINEAR;
-				descriptor.uWrap = GL20.GL_CLAMP_TO_EDGE;
-				descriptor.vWrap = GL20.GL_CLAMP_TO_EDGE;
+				descriptor.uWrap = GL20.GL_REPEAT;
+				descriptor.vWrap = GL20.GL_REPEAT;
 				switch (tex.usage) {
 				case ModelTexture.USAGE_DIFFUSE:
 					result.set(new TextureAttribute(TextureAttribute.Diffuse, descriptor));

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java
Patch:
@@ -267,7 +267,7 @@ public float getScaleX () {
 	 * 
 	 * @param scale New scale along y axis */
 	public void setScaleY (float scale) {
-		this.scale.y += scale;
+		this.scale.y = scale;
 		updated = false;
 	}
 

File: gdx/src/com/badlogic/gdx/input/GestureDetector.java
Patch:
@@ -54,7 +54,7 @@ public class GestureDetector extends InputAdapter {
 	private final Task longPressTask = new Task() {
 		@Override
 		public void run () {
-			if (listener.longPress(pointer1.x, pointer1.y)) longPressFired = true;
+			longPressFired = listener.longPress(pointer1.x, pointer1.y);
 		}
 	};
 
@@ -128,7 +128,7 @@ public boolean touchDragged (int x, int y, int pointer) {
 
 	public boolean touchDragged (float x, float y, int pointer) {
 		if (pointer > 1) return false;
-		if (longPressFired) return false;
+		if (longPressFired) return true;
 
 		if (pointer == 0)
 			pointer1.set(x, y);
@@ -175,7 +175,7 @@ public boolean touchUp (float x, float y, int pointer, int button) {
 
 		longPressTask.cancel();
 		panning = false;
-		if (longPressFired) return false;
+		if (longPressFired) return true;
 		if (inTapSquare) {
 			// handle taps
 			if (lastTapButton != button || lastTapPointer != pointer || TimeUtils.nanoTime() - lastTapTime > tapCountInterval

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -369,7 +369,7 @@ public static boolean intersectRayBounds (Ray ray, BoundingBox box, Vector3 inte
 		Vector3.tmp.set(ray.origin);
 		Vector3.tmp2.set(ray.origin);
 		Vector3.tmp.sub(box.min);
-		Vector3.tmp.sub(box.max);
+		Vector3.tmp2.sub(box.max);
 		if (Vector3.tmp.x > 0 && Vector3.tmp.y > 0 && Vector3.tmp.z > 0 && Vector3.tmp2.x < 0 && Vector3.tmp2.y < 0
 			&& Vector3.tmp2.z < 0) {
 			return true;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -118,8 +118,8 @@ public void setItems (Object[] objects) {
 		for (int i = 0; i < items.length; i++)
 			max = Math.max(font.getBounds(items[i]).width, max);
 		prefWidth = bg.getLeftWidth() + bg.getRightWidth() + max;
-		prefWidth = Math.max(prefWidth, max + style.listBackground.getLeftWidth() + style.listBackground.getRightWidth() + 2
-			* style.itemSpacing);
+		prefWidth = Math.max(prefWidth, max + style.listBackground.getLeftWidth() + style.listBackground.getRightWidth()
+			+ style.listSelection.getLeftWidth() + style.listSelection.getRightWidth());
 
 		if (items.length > 0) {
 			ChangeEvent changeEvent = Pools.obtain(ChangeEvent.class);
@@ -313,7 +313,6 @@ static public class SelectBoxStyle {
 		public Drawable listSelection;
 		public BitmapFont font;
 		public Color fontColor = new Color(1, 1, 1, 1);
-		public float itemSpacing = 10;
 
 		public SelectBoxStyle () {
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TableToolkit.java
Patch:
@@ -45,7 +45,7 @@ public Cell obtainCell (TableLayout layout) {
 	}
 
 	public void freeCell (Cell cell) {
-		cell.setLayout(null);
+		cell.free();
 		cellPool.free(cell);
 	}
 

File: gdx/src/com/badlogic/gdx/utils/SnapshotArray.java
Patch:
@@ -74,6 +74,7 @@ public SnapshotArray (T[] array) {
 
 	/** Returns the backing array, which is guaranteed to not be modified before {@link #end()}. */
 	public T[] begin () {
+		modified();
 		snapshot = items;
 		snapshots++;
 		return items;

File: gdx/src/com/esotericsoftware/tablelayout/Toolkit.java
Patch:
@@ -35,7 +35,7 @@ public abstract class Toolkit<C, T extends C, L extends BaseTableLayout> {
 	static public Toolkit instance;
 
 	abstract public Cell obtainCell (L layout);
-	
+
 	abstract public void freeCell (Cell cell);
 
 	abstract public void addChild (C parent, C child);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/LetterBoxTest1.java
Patch:
@@ -25,7 +25,7 @@
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 /** Keeps aspect ratio using black bars while scaling the stage to fit the screen. */
-public class LetterBoxTest extends GdxTest {
+public class LetterBoxTest1 extends GdxTest {
 	private Stage stage;
 	private Table root;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dHudTest.java
Patch:
@@ -24,7 +24,7 @@ public abstract class BaseG3dHudTest extends BaseG3dTest {
 
 	protected  String models[] = new String[] {
 		"car.obj", "cube.obj", "scene.obj", "scene2.obj", "sphere.obj", "wheel.obj", 
-		"g3d/head.g3db", "g3d/knight.g3dj", "g3d/knight.g3db", "g3d/ship.obj", "g3d/teapot.g3db"
+		"g3d/invaders.g3dj", "g3d/head.g3db", "g3d/knight.g3dj", "g3d/knight.g3db", "g3d/ship.obj", "g3d/teapot.g3db"
 	};
 
 	@Override

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALMusic.java
Patch:
@@ -43,6 +43,7 @@ public abstract class OpenALMusic implements Music {
 	private int format, sampleRate;
 	private boolean isLooping, isPlaying;
 	private float volume = 1;
+	private float pan = 0;
 	private float renderedSeconds, secondsPerBuffer;
 
 	protected final FileHandle file;
@@ -72,7 +73,7 @@ public void play () {
 				if (alGetError() != AL_NO_ERROR) throw new GdxRuntimeException("Unabe to allocate audio buffers.");
 			}
 			alSourcei(sourceID, AL_LOOPING, AL_FALSE);
-			alSourcef(sourceID, AL_GAIN, volume);
+			setPan(pan, volume);
 			for (int i = 0; i < bufferCount; i++) {
 				int bufferID = buffers.get(i);
 				if (!fill(bufferID)) break;
@@ -129,6 +130,7 @@ public float getVolume() {
 	
 	public void setPan (float pan, float volume) {
 		this.volume = volume;
+		this.pan = pan;
 		if (audio.noDevice) return;
 		if (sourceID == -1) return;
 		alSource3f(sourceID, AL_POSITION, MathUtils.cos((pan - 1) * MathUtils.PI / 2), 0,

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -369,7 +369,7 @@ public static boolean intersectRayBounds (Ray ray, BoundingBox box, Vector3 inte
 		Vector3.tmp.set(ray.origin);
 		Vector3.tmp2.set(ray.origin);
 		Vector3.tmp.sub(box.min);
-		Vector3.tmp.sub(box.max);
+		Vector3.tmp2.sub(box.max);
 		if (Vector3.tmp.x > 0 && Vector3.tmp.y > 0 && Vector3.tmp.z > 0 && Vector3.tmp2.x < 0 && Vector3.tmp2.y < 0
 			&& Vector3.tmp2.z < 0) {
 			return true;

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java
Patch:
@@ -267,7 +267,7 @@ public float getScaleX () {
 	 * 
 	 * @param scale New scale along y axis */
 	public void setScaleY (float scale) {
-		this.scale.y += scale;
+		this.scale.y = scale;
 		updated = false;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -118,8 +118,8 @@ public void setItems (Object[] objects) {
 		for (int i = 0; i < items.length; i++)
 			max = Math.max(font.getBounds(items[i]).width, max);
 		prefWidth = bg.getLeftWidth() + bg.getRightWidth() + max;
-		prefWidth = Math.max(prefWidth, max + style.listBackground.getLeftWidth() + style.listBackground.getRightWidth() + 2
-			* style.itemSpacing);
+		prefWidth = Math.max(prefWidth, max + style.listBackground.getLeftWidth() + style.listBackground.getRightWidth()
+			+ style.listSelection.getLeftWidth() + style.listSelection.getRightWidth());
 
 		if (items.length > 0) {
 			ChangeEvent changeEvent = Pools.obtain(ChangeEvent.class);
@@ -313,7 +313,6 @@ static public class SelectBoxStyle {
 		public Drawable listSelection;
 		public BitmapFont font;
 		public Color fontColor = new Color(1, 1, 1, 1);
-		public float itemSpacing = 10;
 
 		public SelectBoxStyle () {
 		}

File: gdx/src/com/badlogic/gdx/input/GestureDetector.java
Patch:
@@ -54,7 +54,7 @@ public class GestureDetector extends InputAdapter {
 	private final Task longPressTask = new Task() {
 		@Override
 		public void run () {
-			if (listener.longPress(pointer1.x, pointer1.y)) longPressFired = true;
+			longPressFired = listener.longPress(pointer1.x, pointer1.y);
 		}
 	};
 
@@ -128,7 +128,7 @@ public boolean touchDragged (int x, int y, int pointer) {
 
 	public boolean touchDragged (float x, float y, int pointer) {
 		if (pointer > 1) return false;
-		if (longPressFired) return false;
+		if (longPressFired) return true;
 
 		if (pointer == 0)
 			pointer1.set(x, y);
@@ -175,7 +175,7 @@ public boolean touchUp (float x, float y, int pointer, int button) {
 
 		longPressTask.cancel();
 		panning = false;
-		if (longPressFired) return false;
+		if (longPressFired) return true;
 		if (inTapSquare) {
 			// handle taps
 			if (lastTapButton != button || lastTapPointer != pointer || TimeUtils.nanoTime() - lastTapTime > tapCountInterval

File: gdx/src/com/badlogic/gdx/input/GestureDetector.java
Patch:
@@ -54,7 +54,7 @@ public class GestureDetector extends InputAdapter {
 	private final Task longPressTask = new Task() {
 		@Override
 		public void run () {
-			if (listener.longPress(pointer1.x, pointer1.y)) longPressFired = true;
+			longPressFired = listener.longPress(pointer1.x, pointer1.y);
 		}
 	};
 
@@ -128,7 +128,7 @@ public boolean touchDragged (int x, int y, int pointer) {
 
 	public boolean touchDragged (float x, float y, int pointer) {
 		if (pointer > 1) return false;
-		if (longPressFired) return false;
+		if (longPressFired) return true;
 
 		if (pointer == 0)
 			pointer1.set(x, y);
@@ -175,7 +175,7 @@ public boolean touchUp (float x, float y, int pointer, int button) {
 
 		longPressTask.cancel();
 		panning = false;
-		if (longPressFired) return false;
+		if (longPressFired) return true;
 		if (inTapSquare) {
 			// handle taps
 			if (lastTapButton != button || lastTapPointer != pointer || TimeUtils.nanoTime() - lastTapTime > tapCountInterval

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/MapRenderer.java
Patch:
@@ -17,7 +17,7 @@ public class MapRenderer {
 	Map map;
 	OrthographicCamera cam;
 	SpriteCache cache;
-	SpriteBatch batch = new SpriteBatch(10000);
+	SpriteBatch batch = new SpriteBatch(5460);
 	ImmediateModeRenderer20 renderer = new ImmediateModeRenderer20(false, true, 0);
 	int[][] blocks;
 	TextureRegion tile;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtSound.java
Patch:
@@ -45,12 +45,12 @@ public long play (float volume) {
 
 	@Override
 	public long loop () {
-		return 0;
+		return -1;
 	}
 
 	@Override
 	public long loop (float volume) {
-		return 0;
+		return -1;
 	}
 
 	@Override

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -798,6 +798,9 @@ void updateKeyboard () {
 					long timeStamp = Keyboard.getEventNanoseconds();
 
 					switch (keyCode) {
+					case Keys.DEL:
+						keyChar = 8;
+						break;
 					case Keys.FORWARD_DEL:
 						keyChar = 127;
 						break;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -798,6 +798,9 @@ void updateKeyboard () {
 					long timeStamp = Keyboard.getEventNanoseconds();
 
 					switch (keyCode) {
+					case Keys.DEL:
+						keyChar = 8;
+						break;
 					case Keys.FORWARD_DEL:
 						keyChar = 127;
 						break;

File: gdx/src/com/badlogic/gdx/graphics/g3d/Model.java
Patch:
@@ -271,8 +271,8 @@ private Material convertMaterial(ModelMaterial mtl, TextureProvider textureProvi
 				TextureDescriptor descriptor = new TextureDescriptor(texture);
 				descriptor.minFilter = GL20.GL_LINEAR;
 				descriptor.magFilter = GL20.GL_LINEAR;
-				descriptor.uWrap = GL20.GL_CLAMP_TO_EDGE;
-				descriptor.vWrap = GL20.GL_CLAMP_TO_EDGE;
+				descriptor.uWrap = GL20.GL_REPEAT;
+				descriptor.vWrap = GL20.GL_REPEAT;
 				switch (tex.usage) {
 				case ModelTexture.USAGE_DIFFUSE:
 					result.set(new TextureAttribute(TextureAttribute.Diffuse, descriptor));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -40,6 +40,7 @@
 import com.badlogic.gdx.tests.g3d.MaterialTest;
 import com.badlogic.gdx.tests.g3d.ModelTest;
 import com.badlogic.gdx.tests.g3d.ShaderTest;
+import com.badlogic.gdx.tests.g3d.SkeletonTest;
 import com.badlogic.gdx.tests.gles2.HelloTriangle;
 import com.badlogic.gdx.tests.gles2.SimpleVertexShader;
 import com.badlogic.gdx.tests.net.NetAPITest;
@@ -82,7 +83,7 @@ public class GdxTests {
 		ExternalMusicTest.class, SoftKeyboardTest.class, DirtyRenderingTest.class, YDownTest.class,
 		ScreenCaptureTest.class, BitmapFontTest.class, LabelScaleTest.class, GamepadTest.class, NetAPITest.class, TideMapAssetManagerTest.class, TideMapDirectLoaderTest.class, TiledMapAssetManagerTest.class, TiledMapBench.class,
 		RunnablePostTest.class, Vector2dTest.class, SuperKoalio.class, NinePatchTest.class,
-		ModelTest.class, Basic3DTest.class, ShaderTest.class, HexagonalTiledMapTest.class));
+		ModelTest.class, Basic3DTest.class, ShaderTest.class, SkeletonTest.class, HexagonalTiledMapTest.class));
 	
 	public static List<String> getNames () {
 		List<String> names = new ArrayList<String>(tests.size());

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TableToolkit.java
Patch:
@@ -45,7 +45,7 @@ public Cell obtainCell (TableLayout layout) {
 	}
 
 	public void freeCell (Cell cell) {
-		cell.setLayout(null);
+		cell.free();
 		cellPool.free(cell);
 	}
 

File: gdx/src/com/esotericsoftware/tablelayout/Toolkit.java
Patch:
@@ -35,7 +35,7 @@ public abstract class Toolkit<C, T extends C, L extends BaseTableLayout> {
 	static public Toolkit instance;
 
 	abstract public Cell obtainCell (L layout);
-	
+
 	abstract public void freeCell (Cell cell);
 
 	abstract public void addChild (C parent, C child);

File: gdx/src/com/badlogic/gdx/graphics/g3d/Model.java
Patch:
@@ -271,8 +271,8 @@ private Material convertMaterial(ModelMaterial mtl, TextureProvider textureProvi
 				TextureDescriptor descriptor = new TextureDescriptor(texture);
 				descriptor.minFilter = GL20.GL_LINEAR;
 				descriptor.magFilter = GL20.GL_LINEAR;
-				descriptor.uWrap = GL20.GL_CLAMP_TO_EDGE;
-				descriptor.vWrap = GL20.GL_CLAMP_TO_EDGE;
+				descriptor.uWrap = GL20.GL_REPEAT;
+				descriptor.vWrap = GL20.GL_REPEAT;
 				switch (tex.usage) {
 				case ModelTexture.USAGE_DIFFUSE:
 					result.set(new TextureAttribute(TextureAttribute.Diffuse, descriptor));

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -43,7 +43,7 @@
  * https://code.google.com/p/libgdx/wiki/JsonParsing
  * @author Nathan Sweet */
 public class Json {
-	private static final boolean debug = true;
+	private static final boolean debug = false;
 
 	private JsonWriter writer;
 	private String typeName = "class";

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -43,7 +43,7 @@
  * https://code.google.com/p/libgdx/wiki/JsonParsing
  * @author Nathan Sweet */
 public class Json {
-	private static final boolean debug = false;
+	private static final boolean debug = true;
 
 	private JsonWriter writer;
 	private String typeName = "class";
@@ -428,7 +428,7 @@ public void writeValue (Object value, Class knownType, Class elementType) {
 			}
 
 			if (value instanceof Array) {
-				if (knownType != null && actualType != knownType)
+				if (knownType != null && actualType != knownType && actualType != Array.class)
 					throw new SerializationException("Serialization of an Array other than the known type is not supported.\n"
 						+ "Known type: " + knownType + "\nActual type: " + actualType);
 				writeArrayStart();

File: gdx/src/com/badlogic/gdx/utils/BooleanArray.java
Patch:
@@ -96,7 +96,7 @@ public void addAll (boolean[] array) {
 
 	public void addAll (boolean[] array, int offset, int length) {
 		boolean[] items = this.items;
-		int sizeNeeded = size + length - offset;
+		int sizeNeeded = size + length;
 		if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
 		System.arraycopy(array, offset, items, size, length);
 		size += length;

File: gdx/src/com/badlogic/gdx/utils/CharArray.java
Patch:
@@ -94,7 +94,7 @@ public void addAll (char[] array) {
 
 	public void addAll (char[] array, int offset, int length) {
 		char[] items = this.items;
-		int sizeNeeded = size + length - offset;
+		int sizeNeeded = size + length ;
 		if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
 		System.arraycopy(array, offset, items, size, length);
 		size += length;

File: gdx/src/com/badlogic/gdx/utils/FloatArray.java
Patch:
@@ -94,7 +94,7 @@ public void addAll (float[] array) {
 
 	public void addAll (float[] array, int offset, int length) {
 		float[] items = this.items;
-		int sizeNeeded = size + length - offset;
+		int sizeNeeded = size + length;
 		if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
 		System.arraycopy(array, offset, items, size, length);
 		size += length;

File: gdx/src/com/badlogic/gdx/utils/IntArray.java
Patch:
@@ -94,7 +94,7 @@ public void addAll (int[] array) {
 
 	public void addAll (int[] array, int offset, int length) {
 		int[] items = this.items;
-		int sizeNeeded = size + length - offset;
+		int sizeNeeded = size + length;
 		if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
 		System.arraycopy(array, offset, items, size, length);
 		size += length;

File: gdx/src/com/badlogic/gdx/utils/LongArray.java
Patch:
@@ -94,7 +94,7 @@ public void addAll (long[] array) {
 
 	public void addAll (long[] array, int offset, int length) {
 		long[] items = this.items;
-		int sizeNeeded = size + length - offset;
+		int sizeNeeded = size + length;
 		if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
 		System.arraycopy(array, offset, items, size, length);
 		size += length;

File: gdx/src/com/badlogic/gdx/utils/ShortArray.java
Patch:
@@ -94,7 +94,7 @@ public void addAll (short[] array) {
 
 	public void addAll (short[] array, int offset, int length) {
 		short[] items = this.items;
-		int sizeNeeded = size + length - offset;
+		int sizeNeeded = size + length;
 		if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
 		System.arraycopy(array, offset, items, size, length);
 		size += length;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/ArrayMap.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.utils.ObjectMap.Entry;
+import com.badlogic.gwtref.client.ReflectionCache;
 
 /** An ordered or unordered map of objects. This implementation uses arrays to store the keys and values, which means
  * {@link #getKey(Object, boolean) gets} do a comparison for each key in the map. This may be acceptable for small maps and has the
@@ -62,8 +63,8 @@ public ArrayMap (boolean ordered, int capacity) {
 	 * @param capacity Any elements added beyond this will cause the backing arrays to be grown. */
 	public ArrayMap (boolean ordered, int capacity, Class<K> keyArrayType, Class<V> valueArrayType) {
 		this.ordered = ordered;
-		keys = (K[])new Object[capacity];
-		values = (V[])new Object[capacity];
+		keys = (K[])ReflectionCache.instance.newArray(keyArrayType, capacity);
+		values = (V[])ReflectionCache.instance.newArray(valueArrayType, capacity);
 	}
 
 	/** Creates an ordered map with {@link #keys} and {@link #values} of the specified type and a capacity of 16. */

File: gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dModelLoader.java
Patch:
@@ -210,7 +210,7 @@ private void parseMaterials (ModelData model, JsonValue json, String materialDir
 						String fileName = texture.getString("filename", null);
 						if(fileName == null)
 							throw new GdxRuntimeException("Texture needs filename.");
-						jsonTexture.fileName = materialDir + "/" + fileName;
+						jsonTexture.fileName = materialDir + (materialDir.endsWith("/") ? "" : "/") + fileName;
 						
 						jsonTexture.uvTranslation = readVector2(texture.get("uvTranslation"), 0f, 0f);
 						jsonTexture.uvScaling = readVector2(texture.get("uvScaling"), 1f, 1f);

File: gdx/src/com/badlogic/gdx/graphics/g3d/loader/ObjLoader.java
Patch:
@@ -84,7 +84,7 @@ public ObjLoader (FileHandleResolver resolver) {
 	 * 
 	 * @param file the FileHandle */
 	public Model loadObj (FileHandle file) {
-		return loadObj(file, false);
+		return loadModel(file);
 	}
 
 	/** @deprecated Use {@link ObjLoader#loadModel(FileHandle, boolean)} instead.<p>
@@ -94,7 +94,7 @@ public Model loadObj (FileHandle file) {
 	 * @param flipV whether to flip the v texture coordinate (Blender, Wings3D, et al) 
 	 * */
 	public Model loadObj (FileHandle file, boolean flipV) {
-		return new Model(loadModelData(file, flipV));
+		return loadModel(file, flipV);
 	}
 	
 	/** Directly load the model on the calling thread. The model with not be managed by an {@link AssetManager}. */

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftBodyTest.java
Patch:
@@ -27,6 +27,7 @@
 import com.badlogic.gdx.graphics.g3d.ModelInstance;
 import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.FloatAttribute;
+import com.badlogic.gdx.graphics.g3d.materials.IntAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
 import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
@@ -119,7 +120,7 @@ public void create () {
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
 		
 		model = ModelBuilder.createFromMesh(mesh, GL10.GL_TRIANGLES, 
-			new Material(TextureAttribute.createDiffuse(texture), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute.createShininess(64f)));
+			new Material(TextureAttribute.createDiffuse(texture), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute.createShininess(64f), IntAttribute.createCullFace(0)));
 		instance = new ModelInstance(model);
 	}
 	

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
Patch:
@@ -521,7 +521,7 @@ public void cylinder(float width, float height, float depth, int divisions) {
 			vertex(curr2);
 			if (i == 0)
 				continue;
-			rect((short)(vindex-4), (short)(vindex-2), (short)(vindex-1), (short)(vindex-3)); // FIXME don't duplicate lines and points
+			rect((short)(vindex-3), (short)(vindex-1), (short)(vindex-2), (short)(vindex-4)); // FIXME don't duplicate lines and points
 		}
 	}
 	

File: gdx/src/com/badlogic/gdx/graphics/VertexAttribute.java
Patch:
@@ -53,7 +53,7 @@ public VertexAttribute (int usage, int numComponents, String alias) {
 	 *           pipeline.
 	 * @param numComponents the number of components of this attribute, must be between 1 and 4.
 	 * @param alias the alias used in a shader for this attribute. Can be changed after construction.
-	 * @param unit unit/index of the attribute, used for boneweights and texture coordinates. 
+	 * @param index unit/index of the attribute, used for boneweights and texture coordinates. 
 	 * */
 	public VertexAttribute (int usage, int numComponents, String alias, int index) {
 		this.usage = usage;

File: gdx/src/com/badlogic/gdx/graphics/g3d/Renderable.java
Patch:
@@ -8,7 +8,7 @@
 import com.badlogic.gdx.math.Matrix4;
 
 /**
- * A renderable defines a world {@link #transform}, the {@link Mesh} to render
+ * A renderable defines a world transform, the {@link Mesh} to render
  * along with the offset into the mesh's indices and the number of indices to use plus the
  * primitive type to render the part of the mesh with. Finally, a renderable defines
  * a {@link Material} to be applied to the mesh.</p>

File: gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelData.java
Patch:
@@ -1,5 +1,6 @@
 package com.badlogic.gdx.graphics.g3d.model.data;
 
+import com.badlogic.gdx.assets.loaders.ModelLoader;
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.GdxRuntimeException;

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -89,7 +89,7 @@ public Array (T[] array) {
 	 *           memory copy. */
 	public Array (boolean ordered, T[] array, int start, int count) {
 		this(ordered, array.length, (Class)array.getClass().getComponentType());
-		size = array.length;
+		size = count;
 		System.arraycopy(array, 0, items, 0, size);
 	}
 
@@ -393,6 +393,8 @@ public T random () {
 		return items[MathUtils.random(0, size - 1)];
 	}
 
+	/** Returns the items as an array. Note the array is typed, so the {@link #Array(Class)} constructor must have been used.
+	 * Otherwise use {@link #toArray(Class)} to specify the array type. */
 	public T[] toArray () {
 		return (T[])toArray(items.getClass().getComponentType());
 	}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/nio/HasArrayBufferView.java
Patch:
@@ -16,7 +16,7 @@
 
 package java.nio;
 
-import com.google.gwt.typedarrays.client.ArrayBufferView;
+import com.google.gwt.typedarrays.shared.ArrayBufferView;
 
 public interface HasArrayBufferView {
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMaterial.java
Patch:
@@ -19,7 +19,7 @@ public enum MaterialType {
 	public Color emissive;
 	
 	public float shininess;
-	public float opacity;
+	public float opacity = 1.f;
 	
 	public Array<ModelTexture> textures;
 }

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/GLES10Shader.java
Patch:
@@ -75,6 +75,7 @@ private void bindLights(Lights lights) {
 		Gdx.gl10.glEnable(GL10.GL_LIGHTING);
 		Gdx.gl10.glEnable(GL10.GL_LIGHT0);
 		Gdx.gl10.glLightfv(GL10.GL_LIGHT0, GL10.GL_AMBIENT, getValues(lightVal, lights.ambientLight), 0);
+		Gdx.gl10.glLightfv(GL10.GL_LIGHT0, GL10.GL_DIFFUSE, zeroVal4, 0);
 		int idx=1;
 		Gdx.gl10.glPushMatrix();
 		Gdx.gl10.glLoadIdentity();

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALAudio.java
Patch:
@@ -107,7 +107,7 @@ public void registerMusic (String extension, Class<? extends OpenALMusic> musicC
 
 	public OpenALSound newSound (FileHandle file) {
 		if (file == null) throw new IllegalArgumentException("file cannot be null.");
-		Class<? extends OpenALSound> soundClass = extensionToSoundClass.get(file.extension());
+		Class<? extends OpenALSound> soundClass = extensionToSoundClass.get(file.extension().toLowerCase());
 		if (soundClass == null) throw new GdxRuntimeException("Unknown file extension for sound: " + file);
 		try {
 			return soundClass.getConstructor(new Class[] {OpenALAudio.class, FileHandle.class}).newInstance(this, file);
@@ -118,7 +118,7 @@ public OpenALSound newSound (FileHandle file) {
 
 	public OpenALMusic newMusic (FileHandle file) {
 		if (file == null) throw new IllegalArgumentException("file cannot be null.");
-		Class<? extends OpenALMusic> musicClass = extensionToMusicClass.get(file.extension());
+		Class<? extends OpenALMusic> musicClass = extensionToMusicClass.get(file.extension().toLowerCase());
 		if (musicClass == null) throw new GdxRuntimeException("Unknown file extension for music: " + file);
 		try {
 			return musicClass.getConstructor(new Class[] {OpenALAudio.class, FileHandle.class}).newInstance(this, file);

File: gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dModelLoader.java
Patch:
@@ -195,7 +195,9 @@ private void parseMaterials (ModelData model, JsonValue json, String materialDir
 			   // Read specular
 				jsonMaterial.specular = parseColor(material.get("specular"), Color.BLACK);
 				// Read shininess
-				float shininess = material.getFloat("shininess", 0.0f);
+				jsonMaterial.shininess = material.getFloat("shininess", 0.0f);
+				// Read opacity
+				jsonMaterial.opacity = material.getFloat("opacity", 1.0f);
 				
 				// Read textures
 				JsonValue textures = material.get("textures");

File: gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMaterial.java
Patch:
@@ -19,6 +19,7 @@ public enum MaterialType {
 	public Color emissive;
 	
 	public float shininess;
+	public float opacity;
 	
 	public Array<ModelTexture> textures;
 }

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultShaderProvider.java
Patch:
@@ -13,7 +13,7 @@ public class DefaultShaderProvider extends BaseShaderProvider {
 	protected Shader createShader(final Renderable renderable) {
 		Gdx.app.log("DefaultShaderProvider", "Creating new shader");
 		if (Gdx.graphics.isGL20Available())
-			return new DefaultShader(renderable.material, renderable.mesh.getVertexAttributes(), renderable.lights != null, 2, 5, 3, renderable.bones == null ? 0 : 12);
+			return new DefaultShader(renderable.material, renderable.mesh.getVertexAttributes(), renderable.lights != null, renderable.lights.directionalLights.size, renderable.lights.pointLights.size, 0, renderable.bones == null ? 0 : 12);
 		return new GLES10Shader();
 	}
 }

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/gen/ReflectionCacheSourceCreator.java
Patch:
@@ -114,7 +114,7 @@ public String create () {
 
 		sw.commit(logger);
 		createProxy(type);
-		System.out.println(source.toString());
+//		System.out.println(source.toString());
 		return packageName + "." + simpleName;
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ModelTest.java
Patch:
@@ -28,7 +28,7 @@ public class ModelTest extends BaseG3dHudTest {
 	public void create () {
 		super.create();
 		showAxes = true;
-		onModelClicked("g3d/knight.g3dj");
+		onModelClicked("g3d/teapot.g3db");
 	}
 
 	private final static Vector3 tmpV = new Vector3();

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/DefaultAssetFilter.java
Patch:
@@ -45,7 +45,8 @@ private boolean isImage (String extension) {
 
 	private boolean isText (String extension) {
 		return extension.equals("json") || extension.equals("xml") || extension.equals("txt") || extension.equals("glsl")
-			|| extension.equals("fnt") || extension.equals("pack") || extension.equals("obj") || extension.equals("atlas");
+			|| extension.equals("fnt") || extension.equals("pack") || extension.equals("obj") || extension.equals("atlas")
+			|| extension.equals("g3dj");
 	}
 
 	private boolean isAudio (String extension) {

File: tests/gdx-tests-gwt/src/com/badlogic/gdx/tests/gwt/client/GwtTestStarter.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.backends.gwt.GwtApplication;
 import com.badlogic.gdx.backends.gwt.GwtApplicationConfiguration;
 import com.badlogic.gdx.tests.UITest;
+import com.badlogic.gdx.tests.g3d.ModelTest;
 import com.badlogic.gdx.tests.gwt.GwtTestWrapper;
 
 public class GwtTestStarter extends GwtApplication {
@@ -30,6 +31,6 @@ public GwtApplicationConfiguration getConfig () {
 
 	@Override
 	public ApplicationListener getApplicationListener () {
-		return new GwtTestWrapper();
+		return new ModelTest();
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ModelTest.java
Patch:
@@ -28,7 +28,7 @@ public class ModelTest extends BaseG3dHudTest {
 	public void create () {
 		super.create();
 		showAxes = true;
-		onModelClicked("g3d/teapot.g3db");
+		onModelClicked("g3d/knight.g3dj");
 	}
 
 	private final static Vector3 tmpV = new Vector3();

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
-import com.badlogic.gdx.tests.g3d.NewModelTest;
+import com.badlogic.gdx.tests.g3d.ModelTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class LwjglDebugStarter {
@@ -30,7 +30,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new NewModelTest();
+		GdxTest test = new ModelTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFileHandle.java
Patch:
@@ -39,7 +39,7 @@ public class GwtFileHandle extends FileHandle {
 	private final FileType type;
 
 	protected GwtFileHandle (Preloader preloader, String fileName, FileType type) {
-		if (type != FileType.Internal) throw new GdxRuntimeException("FileType '" + type + "' Not supported in GWT backend");
+		if (type != FileType.Internal && type != FileType.Classpath) throw new GdxRuntimeException("FileType '" + type + "' Not supported in GWT backend");
 		this.preloader = preloader;
 		this.file = fileName.replace('\\', '/');
 		this.type = type;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFiles.java
Patch:
@@ -36,7 +36,8 @@ public FileHandle getFileHandle (String path, FileType type) {
 
 	@Override
 	public FileHandle classpath (String path) {
-		throw new GdxRuntimeException("Not supported in GWT backend");
+		return new GwtFileHandle(preloader, path, FileType.Classpath);
+//		throw new GdxRuntimeException("Not supported in GWT backend");
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
Patch:
@@ -58,6 +58,7 @@ public final static String getDefaultFragmentShader() {
 		ColorAttribute.Specular | FloatAttribute.Shininess;
 	
 	public static boolean ignoreUnimplemented = true;
+	public static int defaultCullFace = GL10.GL_BACK;
 	
 	// Global uniforms
 	protected final int u_projTrans					= registerUniform("u_projTrans");
@@ -332,7 +333,7 @@ public void end () {
 	private final void bindMaterial(final Renderable renderable) {
 		if (currentMaterial == renderable.material)
 			return;
-		int cullFace = 0;
+		int cullFace = defaultCullFace;
 		currentMaterial = renderable.material;
 		for (final Material.Attribute attr : currentMaterial) {
 			final long t = attr.type;

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java
Patch:
@@ -80,7 +80,6 @@ protected void init(final ShaderProgram program, final long material, final long
 				uniformLocations[i] = program.fetchUniformLocation(entry.name, false);
 			} else
 				uniformLocations[i] = -1;
-			Gdx.app.log("Test", "Uniform: "+entry.name+" = "+uniformLocations[i]);
 		}
 		UniformEntry.pool.freeAll(uniformEntries);
 		uniformEntries.clear();

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
Patch:
@@ -125,7 +125,6 @@ public DefaultShader(final String vertexShader, final String fragmentShader, fin
 
 	public DefaultShader(final String vertexShader, final String fragmentShader, final long mask, final long attributes, boolean lighting, int numDirectional, int numPoint, int numSpot, int numBones) {
 		final String prefix = createPrefix(mask, attributes, lighting, numDirectional, numPoint, numSpot, numBones);
-		Gdx.app.log("Test", "Prefix:\n"+prefix);
 		program = new ShaderProgram(prefix + vertexShader, prefix + fragmentShader);
 		if(!program.isCompiled()) {
 			throw new GdxRuntimeException("Couldn't compile shader " + program.getLog());

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Basic3DTest.java
Patch:
@@ -32,7 +32,7 @@ public void create () {
 		modelBatch = new ModelBatch();
 		lights = new Lights();
 		lights.ambientLight.set(0.4f, 0.4f, 0.4f, 1f);
-		lights.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -1f, -1f, 0f));
+		lights.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -1f, -0.8f, -0.2f));
 		
 		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam.position.set(10f, 10f, 10f);

File: gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dModelLoader.java
Patch:
@@ -114,7 +114,7 @@ private void parseMeshes (ModelData model, JsonValue json) {
 				JsonValue indices = meshPart.require("indices");
 				short[] partIndices = new short[indices.size()];
 				int k = 0;
-				for (JsonValue value = indices.child(); value != null; value = value.next(), j++) {
+				for (JsonValue value = indices.child(); value != null; value = value.next(), k++) {
 					partIndices[k] = (short)indices.getInt(k);
 				}
 				jsonPart.indices = partIndices;

File: gdx/src/com/badlogic/gdx/graphics/VertexAttributes.java
Patch:
@@ -31,6 +31,9 @@ public static final class Usage {
 		public static final int Normal = 8;
 		public static final int TextureCoordinates = 16;
 		public static final int Generic = 32;
+		public static final int BoneWeight = 64;
+		public static final int Tangent = 128;
+		public static final int BiNormal = 256;
 	}
 
 	/** the attributes in the order they were specified **/

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/DragAndDrop.java
Patch:
@@ -113,10 +113,9 @@ public void drag (InputEvent event, float x, float y, int pointer) {
 			}
 
 			public void dragStop (InputEvent event, float x, float y, int pointer) {
-				if (payload == null) return;
 				if (pointer != activePointer) return;
-
 				activePointer = -1;
+				if (payload == null) return;
 
 				if (System.currentTimeMillis() - dragStartTime < dragTime) isValidTarget = false;
 				if (dragActor != null) dragActor.remove();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java
Patch:
@@ -44,7 +44,7 @@ public class Tree extends WidgetGroup {
 	private float leftColumnWidth, prefWidth, prefHeight;
 	private boolean sizeInvalid = true;
 	boolean multiSelect = true;
-	boolean toggleSelect;
+	boolean toggleSelect = true;
 	private Node foundNode;
 	Node overNode;
 	private ClickListener clickListener;

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
Patch:
@@ -87,7 +87,7 @@ public final static String getDefaultFragmentShader() {
 	protected final int u_pointLights0intensity	= registerUniform("u_pointLights[0].intensity");
 	protected final int u_pointLights1color		= registerUniform("u_pointLights[1].color");
 	// FIXME Cache vertex attribute locations...
-		
+	
 	protected int dirLightsLoc;
 	protected int dirLightsColorOffset;
 	protected int dirLightsDirectionOffset;
@@ -292,7 +292,7 @@ public void render (final Renderable renderable) {
 		if (currentLocalTransform != renderable.localTransform)
 			set(u_localTrans, (currentLocalTransform = renderable.localTransform) == null ? idtMatrix : renderable.localTransform);
 		if (currentModelTransform != renderable.modelTransform)
-			set(u_modelTrans, (currentWorldTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);
+			set(u_modelTrans, (currentModelTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);
 		if (currentLocalTransform == null && currentModelTransform == null)
 			setWorldTransform(idtMatrix, false);
 		else if (currentLocalTransform == null)

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
Patch:
@@ -87,7 +87,7 @@ public final static String getDefaultFragmentShader() {
 	protected final int u_pointLights0intensity	= registerUniform("u_pointLights[0].intensity");
 	protected final int u_pointLights1color		= registerUniform("u_pointLights[1].color");
 	// FIXME Cache vertex attribute locations...
-		
+	
 	protected int dirLightsLoc;
 	protected int dirLightsColorOffset;
 	protected int dirLightsDirectionOffset;
@@ -292,7 +292,7 @@ public void render (final Renderable renderable) {
 		if (currentLocalTransform != renderable.localTransform)
 			set(u_localTrans, (currentLocalTransform = renderable.localTransform) == null ? idtMatrix : renderable.localTransform);
 		if (currentModelTransform != renderable.modelTransform)
-			set(u_modelTrans, (currentWorldTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);
+			set(u_modelTrans, (currentModelTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);
 		if (currentLocalTransform == null && currentModelTransform == null)
 			setWorldTransform(idtMatrix, false);
 		else if (currentLocalTransform == null)

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -102,7 +102,7 @@ public TiledMap load (String fileName, TmxMapLoader.Parameters parameters) {
 			}
 			DirectImageResolver imageResolver = new DirectImageResolver(textures);
 			TiledMap map = loadTilemap(root, tmxFile, imageResolver);
-			map.setOwnedTextures(textures.values().toArray());
+			map.setOwnedResources(textures.values().toArray());
 			return map;
 		} catch (IOException e) {
 			throw new GdxRuntimeException("Couldn't load tilemap '" + fileName + "'", e);

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/Hiero.java
Patch:
@@ -268,6 +268,7 @@ private void updateFont (boolean ignoreFileText) {
 
 	void save (File file) throws IOException {
 		HieroSettings settings = new HieroSettings();
+		settings.setFontName((String)fontList.getSelectedValue());
 		settings.setFontSize(((Integer)fontSizeSpinner.getValue()).intValue());
 		settings.setBold(boldCheckBox.isSelected());
 		settings.setItalic(italicCheckBox.isSelected());
@@ -293,6 +294,7 @@ void open (File file) {
 			panels[i].remove();
 
 		HieroSettings settings = new HieroSettings(file.getAbsolutePath());
+		fontList.setSelectedValue(settings.getFontName(), true);
 		fontSizeSpinner.setValue(new Integer(settings.getFontSize()));
 		boldCheckBox.setSelected(settings.isBold());
 		italicCheckBox.setSelected(settings.isItalic());

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -582,7 +582,6 @@ public void setOrigin (float originX, float originY) {
 
 		public void flip (boolean x, boolean y) {
 			// Flip texture.
-
 			super.flip(x, y);
 
 			float oldOriginX = getOriginX();

File: gdx/src/com/badlogic/gdx/graphics/glutils/ImmediateModeRenderer20.java
Patch:
@@ -103,8 +103,8 @@ public void color (float r, float g, float b, float a) {
 
 	public void texCoord (float u, float v) {
 		final int idx = vertexIdx + texCoordOffset;
-		vertices[idx] = u;
-		vertices[idx + 1] = v;
+		vertices[idx + numSetTexCoords] = u;
+		vertices[idx + numSetTexCoords + 1] = v;
 		numSetTexCoords += 2;
 	}
 

File: gdx/src/com/badlogic/gdx/maps/tiled/TideMapLoader.java
Patch:
@@ -52,7 +52,7 @@ public TiledMap load (String fileName) {
 			}
 			DirectImageResolver imageResolver = new DirectImageResolver(textures);
 			TiledMap map = loadMap(root, tideFile, imageResolver);
-			map.setOwnedTextures(textures.values().toArray());
+			map.setOwnedResources(textures.values().toArray());
 			return map;
 		} catch(IOException e) {
 			throw new GdxRuntimeException("Couldn't load tilemap '" + fileName + "'", e);

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -106,7 +106,7 @@ public TiledMap load (String fileName, TmxMapLoader.Parameters parameters) {
 			}
 			DirectImageResolver imageResolver = new DirectImageResolver(textures);
 			TiledMap map = loadTilemap(root, tmxFile, imageResolver);
-			map.setOwnedTextures(textures.values().toArray());
+			map.setOwnedResources(textures.values().toArray());
 			return map;
 		} catch (IOException e) {
 			throw new GdxRuntimeException("Couldn't load tilemap '" + fileName + "'", e);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
Patch:
@@ -111,7 +111,7 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 		for (int i = 0; i < items.length; i++) {
 			if (cullingArea == null || (itemY - itemHeight <= cullingArea.y + cullingArea.height && itemY >= cullingArea.y)) {
 				if (selectedIndex == i) {
-					selectedDrawable.draw(batch, x, y + itemY - itemHeight, prefWidth, itemHeight);
+					selectedDrawable.draw(batch, x, y + itemY - itemHeight, getWidth(), itemHeight);
 					font.setColor(fontColorSelected.r, fontColorSelected.g, fontColorSelected.b, fontColorSelected.a * parentAlpha);
 				}
 				font.draw(batch, items[i], x + textOffsetX, y + itemY - textOffsetY);

File: gdx/src/com/badlogic/gdx/utils/JsonValue.java
Patch:
@@ -5,7 +5,8 @@
 
 /** Container for a JSON object, array, string, double, long, boolean, or null.
  * <p>
- * Iteration of arrays or objects is easily done using a for loop:<br>
+ * JsonValue children are a linked list. Iteration of arrays or objects is easily done using a for loop, like the example below.
+ * This is more efficient than accessing children by index when there are many children.<br>
  * 
  * <pre>
  * JsonValue map = ...;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -22,6 +22,7 @@
 import com.badlogic.gdx.tests.AnimationTest;
 import com.badlogic.gdx.tests.BulletTestCollection;
 import com.badlogic.gdx.tests.ETC1Test;
+import com.badlogic.gdx.tests.FilesTest;
 import com.badlogic.gdx.tests.FullscreenTest;
 import com.badlogic.gdx.tests.GroupTest;
 import com.badlogic.gdx.tests.InputTest;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTestCollection.java
Patch:
@@ -32,6 +32,7 @@
 import com.badlogic.gdx.tests.box2d.CharacterCollision;
 import com.badlogic.gdx.tests.box2d.CollisionFiltering;
 import com.badlogic.gdx.tests.box2d.ContinuousTest;
+import com.badlogic.gdx.tests.box2d.ConveyorBelt;
 import com.badlogic.gdx.tests.box2d.DebugRendererTest;
 import com.badlogic.gdx.tests.box2d.OneSidedPlatform;
 import com.badlogic.gdx.tests.box2d.Prismatic;
@@ -45,7 +46,7 @@
 public class Box2DTestCollection extends GdxTest implements InputProcessor, GestureListener {
 	private final Box2DTest[] tests = {new DebugRendererTest(), new CollisionFiltering(), new Chain(), new Bridge(),
 		new SphereStack(), new Cantilever(), new ApplyForce(), new ContinuousTest(), new Prismatic(), new CharacterCollision(),
-		new BodyTypes(), new SimpleTest(), new Pyramid(), new OneSidedPlatform(), new VerticalStack(), new VaryingRestitution()};
+		new BodyTypes(), new SimpleTest(), new Pyramid(), new OneSidedPlatform(), new VerticalStack(), new VaryingRestitution(), new ConveyorBelt()};
 
 	private int testIndex = 0;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FilesTest.java
Patch:
@@ -26,6 +26,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -488,7 +489,7 @@ public void dispose () {
 
 	@Override
 	public boolean needsGL20 () {
-		return false;
+		return true;
 	}
 
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Gdx2DTest.java
Patch:
@@ -79,6 +79,7 @@ void drawToPixmap (Gdx2DPixmap pixmap) {
 		pixmap.fillRect(20, 10, 5, 7, Color.rgba8888(0, 1, 1, 0.5f));
 		pixmap.drawCircle(16, 16, 10, Color.rgba8888(1, 0, 1, 1));
 		pixmap.fillCircle(16, 16, 6, Color.rgba8888(0, 1, 0, 0.5f));
+		pixmap.fillTriangle(16, 16, 18, 18, 20, 14, Color.rgba8888(0, 0.5f, 0, 0.5f));
 		pixmap.drawLine(0, -1, 0, 0, Color.rgba8888(1, 1, 0, 1));
 		pixmap.drawLine(41, -10, 31, 0, Color.rgba8888(1, 1, 0, 1));
 		pixmap.drawLine(10, 41, 0, 31, Color.rgba8888(0, 1, 1, 1));

File: gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodeAnimation.java
Patch:
@@ -6,5 +6,5 @@ public class ModelNodeAnimation {
 	/** the id of the node animated by this animation FIXME should be nodeId **/
 	public String nodeId;
 	/** the keyframes, defining the transformation of a node for a sepcific timestamp **/
-	public Array<ModelNodeKeyframe> keyframes = new Array<ModelNodeKeyframe>();
+	public final Array<ModelNodeKeyframe> keyframes = new Array<ModelNodeKeyframe>();
 }

File: gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodeAnimation.java
Patch:
@@ -6,5 +6,5 @@ public class ModelNodeAnimation {
 	/** the id of the node animated by this animation FIXME should be nodeId **/
 	public String nodeId;
 	/** the keyframes, defining the transformation of a node for a sepcific timestamp **/
-	public Array<ModelNodeKeyframe> keyframes = new Array<ModelNodeKeyframe>();
+	public final Array<ModelNodeKeyframe> keyframes = new Array<ModelNodeKeyframe>();
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,6 +21,7 @@
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.tests.AnimationTest;
 import com.badlogic.gdx.tests.ETC1Test;
+import com.badlogic.gdx.tests.FilesTest;
 import com.badlogic.gdx.tests.FullscreenTest;
 import com.badlogic.gdx.tests.GroupTest;
 import com.badlogic.gdx.tests.InputTest;
@@ -44,7 +45,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 //		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new GroupTest();
+		GdxTest test = new FilesTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FilesTest.java
Patch:
@@ -26,6 +26,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -488,7 +489,7 @@ public void dispose () {
 
 	@Override
 	public boolean needsGL20 () {
-		return false;
+		return true;
 	}
 
 }

File: gdx/src/com/badlogic/gdx/graphics/glutils/ImmediateModeRenderer20.java
Patch:
@@ -103,8 +103,8 @@ public void color (float r, float g, float b, float a) {
 
 	public void texCoord (float u, float v) {
 		final int idx = vertexIdx + texCoordOffset;
-		vertices[idx] = u;
-		vertices[idx + 1] = v;
+		vertices[idx + numSetTexCoords] = u;
+		vertices[idx + numSetTexCoords + 1] = v;
 		numSetTexCoords += 2;
 	}
 

File: extensions/gdx-tiled-preprocessor/src/com/badlogic/gdx/tiledmappacker/TileSetLayout.java
Patch:
@@ -22,7 +22,6 @@
 import javax.imageio.ImageIO;
 
 import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.maps.tiled.TiledMap;
 import com.badlogic.gdx.maps.tiled.TiledMapTileSet;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.utils.IntMap;
@@ -40,7 +39,7 @@ public class TileSetLayout {
 
 	/** Constructs a Tile Set layout. The tile set image contained in the baseDir should be the original tile set images before
 	 * being processed by {@link TiledMapPacker} (the ones actually read by Tiled).
-	 * @param tileSet the tile set to process
+	 * @param tileset the tile set to process
 	 * @param baseDir the directory in which the tile set image is stored */
 	protected TileSetLayout (int firstgid, TiledMapTileSet tileset, FileHandle baseDir) throws IOException {
 		int tileWidth = tileset.getProperties().get("tilewidth", Integer.class);

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java
Patch:
@@ -844,7 +844,7 @@ public void setAttributef (String name, float value1, float value2, float value3
 	}
 
 	private void ensureBufferCapacity (int numBytes) {
-		if (buffer == null || buffer.capacity() != numBytes) {
+		if (buffer == null || buffer.capacity() < numBytes) {
 			buffer = BufferUtils.newByteBuffer(numBytes);
 			floatBuffer = buffer.asFloatBuffer();
 			intBuffer = buffer.asIntBuffer();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/NewModelTest.java
Patch:
@@ -52,7 +52,6 @@ public void create () {
 		super.create();
 		showAxes = false;
 		onModelClicked("g3d/knight.g3db");
-		System.out.println(Gdx.gl.glGetString(GL10.GL_RENDERER));
 		switchAnimation();
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
Patch:
@@ -128,6 +128,9 @@ public DefaultShader(final String vertexShader, final String fragmentShader, fin
 		final String prefix = createPrefix(mask, attributes, lighting, numDirectional, numPoint, numSpot, numBones);
 		Gdx.app.log("Test", "Prefix:\n"+prefix);
 		program = new ShaderProgram(prefix + vertexShader, prefix + fragmentShader);
+		if(!program.isCompiled()) {
+			throw new GdxRuntimeException("Couldn't compile shader " + program.getLog());
+		}
 		init(program, mask, attributes, 0);
 		this.lighting = lighting;
 		this.directionalLights = new DirectionalLight[lighting && numDirectional > 0 ? numDirectional : 0];

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/NewModelTest.java
Patch:
@@ -52,6 +52,8 @@ public void create () {
 		super.create();
 		showAxes = false;
 		onModelClicked("g3d/knight.g3db");
+		System.out.println(Gdx.gl.glGetString(GL10.GL_RENDERER));
+		switchAnimation();
 	}
 
 	private final static Vector3 tmpV = new Vector3();

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSAudio.java
Patch:
@@ -102,14 +102,15 @@ public Music newMusic (FileHandle fileHandle) {
 		verify(fileHandle);
 
 		// create audio player - from file path
+		String path = fileHandle.file().getPath().replace('\\', '/');
 		NSError[] error = new NSError[1];
-		AVAudioPlayer player = AVAudioPlayer.FromUrl(NSUrl.FromFilename(fileHandle.path()), error);
+		AVAudioPlayer player = AVAudioPlayer.FromUrl(NSUrl.FromFilename(path), error);
 		if (error[0] == null) {
 			// no error: return the music object
 			return new IOSMusic(player);
 		} else {
 			// throw an exception
-			throw new GdxRuntimeException("Error opening music file at " + fileHandle.path() + ": " + error[0].ToString());
+			throw new GdxRuntimeException("Error opening music file at " + path + ": " + error[0].ToString());
 		}
 	}
 }

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSMonotouchGLES20.java
Patch:
@@ -278,8 +278,10 @@ public void glStencilOp (int fail, int zfail, int zpass) {
 	@Override
 	public void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type,
 		Buffer pixels) {
+		// pixels can be null by OpenGL definition if an blank image is to be created (e.g. for buffering)
+		IntPtr pixelsPointer = pixels != null ? IntPtr.op_Explicit(BufferUtils.getUnsafeBufferAddress(pixels)) : null;
 		GL.TexImage2D(TextureTarget.wrap(target), level, PixelInternalFormat.wrap(internalformat), width, height, border,
-			PixelFormat.wrap(format), PixelType.wrap(type), IntPtr.op_Explicit(BufferUtils.getUnsafeBufferAddress(pixels)));
+			PixelFormat.wrap(format), PixelType.wrap(type), pixelsPointer);
 	}
 
 	@Override

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSNet.java
Patch:
@@ -128,12 +128,11 @@ public void run () {
 					String method = httpRequest.getMethod();
 
 					if (method.equalsIgnoreCase(HttpMethods.GET)) {
-						String queryString = "";
 						String value = httpRequest.getContent();
 						if (value != null && !"".equals(value)) url += "?" + value;
 					}
 
-					HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(httpRequest.getUrl());
+					HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(url);
 
 					int timeOut = httpRequest.getTimeOut();
 					if (timeOut > 0)
@@ -150,7 +149,7 @@ public void run () {
 						webHeaderCollection.Add(key, headers.get(key));
 					httpWebRequest.set_Headers(webHeaderCollection);
 
-					if (method.equalsIgnoreCase(HttpMethods.POST)) {
+					if (method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT)) {
 						InputStream contentAsStream = httpRequest.getContentStream();
 						String contentAsString = httpRequest.getContent();
 

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSObjectALSound.java
Patch:
@@ -33,7 +33,7 @@ public class IOSObjectALSound implements Sound {
 	private String soundPath;
 
 	public IOSObjectALSound (FileHandle filePath) {
-		soundPath = filePath.path();
+		soundPath = filePath.file().getPath().replace('\\', '/');
 		soundBuffer = OALSimpleAudio.sharedInstance().preloadEffect(soundPath);
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -200,7 +200,7 @@ void mainLoop () {
 			if (shouldRender) {
 				graphics.updateTime();
 				listener.render();
-				Display.update();
+				Display.update(false);
 			} else {
 				// Sleeps to avoid wasting CPU in an empty loop.
 				if (frameRate == -1) frameRate = 10;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFileHandle.java
Patch:
@@ -310,7 +310,7 @@ public boolean isDirectory () {
 	 * @throw GdxRuntimeException if this file handle is a {@link FileType#Classpath} or {@link FileType#Internal} and the child
 	 *        doesn't exist. */
 	public FileHandle child (String name) {
-		return new GwtFileHandle(preloader, file + (file.endsWith("/") ? "" : "/") + name, FileType.Internal);
+		return new GwtFileHandle(preloader, file.isEmpty() ? "" : (file + (file.endsWith("/") ? "" : "/")) + name, FileType.Internal);
 	}
 
 	public FileHandle parent () {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/math/Matrix4.java
Patch:
@@ -692,7 +692,7 @@ public Matrix4 setToLookAt (Vector3 direction, Vector3 up) {
 	public Matrix4 setToLookAt (Vector3 position, Vector3 target, Vector3 up) {
 		tmpVec.set(target).sub(position);
 		setToLookAt(tmpVec, up);
-		this.mul(tmpMat.setToTranslation(position.tmp().mul(-1)));
+		this.mul(tmpMat.setToTranslation(position.tmp().scl(-1)));
 
 		return this;
 	}

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/Bob.java
Patch:
@@ -48,14 +48,14 @@ public void update (float deltaTime) {
 		processKeys();
 
 		accel.y = -GRAVITY;
-		accel.mul(deltaTime);
+		accel.scl(deltaTime);
 		vel.add(accel.x, accel.y);
 		if (accel.x == 0) vel.x *= DAMP;
 		if (vel.x > MAX_VEL) vel.x = MAX_VEL;
 		if (vel.x < -MAX_VEL) vel.x = -MAX_VEL;
-		vel.mul(deltaTime);
+		vel.scl(deltaTime);
 		tryMove();
-		vel.mul(1.0f / deltaTime);
+		vel.scl(1.0f / deltaTime);
 
 		if (state == SPAWN) {
 			if (stateTime > 0.4f) {

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/MovingSpikes.java
Patch:
@@ -74,9 +74,9 @@ public void update (float deltaTime) {
 			pos.x -= vel.x * deltaTime;
 			pos.y -= vel.y * deltaTime;
 			state = -state;
-			vel.mul(-1);
-			if (state == FORWARD) vel.nor().mul(FORWARD_VEL);
-			if (state == BACKWARD) vel.nor().mul(BACKWARD_VEL);
+			vel.scl(-1);
+			if (state == FORWARD) vel.nor().scl(FORWARD_VEL);
+			if (state == BACKWARD) vel.nor().scl(BACKWARD_VEL);
 		}
 
 		bounds.x = pos.x;

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/Rocket.java
Patch:
@@ -34,7 +34,7 @@ public void update (float deltaTime) {
 // if(pos.dst(map.bob.pos) < pos.dst(map.cube.pos)) vel.set(map.bob.pos);
 // else vel.set(map.cube.pos);
 			vel.set(map.bob.pos);
-			vel.sub(pos).nor().mul(VELOCITY);
+			vel.sub(pos).nor().scl(VELOCITY);
 			pos.add(vel.x * deltaTime, vel.y * deltaTime);
 			bounds.x = pos.x + 0.2f;
 			bounds.y = pos.y + 0.2f;

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/GameScreen.java
Patch:
@@ -414,7 +414,7 @@ public void resize(int width, int height) {
 	public Array<Vector2> generatePositions(int n) {
 		Array<Vector2> positions = new Array<Vector2>();
 		for (int i = 1; i <= n; ++i) {
-			positions.add(new Vector2(MathUtils.cos(i / n), MathUtils.sin(i / n)).mul(200));
+			positions.add(new Vector2(MathUtils.cos(i / n), MathUtils.sin(i / n)).scl(200));
 		}
 		return positions;
 	}

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/Ship.java
Patch:
@@ -66,9 +66,9 @@ public void draw(SpriteBatch spriteBatch) {
 		collisionPoints.get(2).set( this.getVertices()[10], this.getVertices()[11]);
 		collisionPoints.get(3).set( this.getVertices()[15], this.getVertices()[16]);
 		
-		collisionCenter.set(collisionPoints.get(2)).mul(0.5f).add(collisionPoints.get(0));
+		collisionCenter.set(collisionPoints.get(2)).scl(0.5f).add(collisionPoints.get(0));
 
-		velocity.mul( (float) Math.pow(0.97f, delta * 30.f));
+		velocity.scl( (float) Math.pow(0.97f, delta * 30.f));
 		position.add(velocity.x * delta, velocity.y * delta);
 		
 		this.setRotation(facing.angle());
@@ -114,7 +114,7 @@ public Vector2 randomPointOnShip() {
 	public void goTowardsOrAway(Vector2 targetPos, boolean forceThrust, boolean isAway) {
 		target_direction.set(targetPos).sub(collisionCenter);
 		if (isAway) {
-			target_direction.mul(-1);
+			target_direction.scl(-1);
 		}
 
 		if (facing.crs(target_direction) > 0) {

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/background/Debris.java
Patch:
@@ -58,7 +58,7 @@ public void draw(SpriteBatch spriteBatch) {
 		since_alive += delta;
 
 		facing.rotate((SPEED + random_speed) * delta).nor();
-		position.add(facing.mul((SPEED + random_speed) * delta));
+		position.add(facing.scl((SPEED + random_speed) * delta));
 		this.setPosition(position.x, position.y);
 
 		if (since_alive < FADE_TIME) {

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/bomber/Bomb.java
Patch:
@@ -10,7 +10,7 @@ public class Bomb extends Bullet {
 	public Bomb(int id, Vector2 position, Vector2 facing) {
 		super(id, position, facing);
 		bulletSpeed = 150;
-		this.velocity = new Vector2().set(facing).mul(bulletSpeed);
+		this.velocity = new Vector2().set(facing).scl(bulletSpeed);
 		damage = 300;
 		
 		this.set(Resources.getInstance().bomb);

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/FrigateAI.java
Patch:
@@ -33,7 +33,7 @@ public void retarget() {
 		if (target != null) {
 			Vector2 random = new Vector2(MathUtils.cos((float) ((MathUtils.random() * MathUtils.PI * 2) * Math.sqrt(MathUtils.random()))),
 										MathUtils.sin((float) ((MathUtils.random() * MathUtils.PI * 2) * Math.sqrt(MathUtils.random()))));
-			target_fuzzy_pos.set(target.collisionCenter).add(random.mul(250));
+			target_fuzzy_pos.set(target.collisionCenter).add(random.scl(250));
 		}
 	}
 

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/Missile.java
Patch:
@@ -15,7 +15,7 @@ public Missile(int id, Vector2 position, Vector2 facing) {
 		turnSpeed = 300f;
 		accel = 300.0f;	
 		bulletSpeed = 50;
-		this.velocity = new Vector2().set(facing).mul(bulletSpeed);
+		this.velocity = new Vector2().set(facing).scl(bulletSpeed);
 		damage = 50;
 		
 		this.set(Resources.getInstance().missile);

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/MissileAI.java
Patch:
@@ -52,7 +52,7 @@ public Vector2 predict() {
 		toTarget.set(target.collisionCenter).sub(missile.collisionCenter);
 		if (missile.velocity.dot(toTarget) != 0) {
 			float time_to_target = toTarget.dot(toTarget) / relativeVel.dot(toTarget);
-			return new Vector2(target.collisionCenter).sub(relativeVel.mul(Math.max(0, time_to_target)));
+			return new Vector2(target.collisionCenter).sub(relativeVel.scl(Math.max(0, time_to_target)));
 		} else {
 			return target.collisionCenter;
 		}

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/particlesystem/ParticleEmitter.java
Patch:
@@ -59,7 +59,7 @@ private void updateParticle(Particle particle) {
 		if (particle.life > 0) {
 			particle.life -= delta;
 			particle.position.add(particle.velocity.x * delta*10,particle.velocity.y * delta*10);
-			particle.velocity.mul((float) Math.pow(damping, delta));
+			particle.velocity.scl((float) Math.pow(damping, delta));
 			particle.scale += this.delta_scale * delta/5f;
 		}
 	}

File: demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/veryangryrobots/WorldView.java
Patch:
@@ -433,7 +433,7 @@ public void updateControls (float delta) {
 			worldCam.unproject(dragPoint.set(Gdx.input.getX(), Gdx.input.getY(), 0));
 			float dx = dragPoint.x - touchPoint.x;
 			float dy = dragPoint.y - touchPoint.y;
-			joystick.set(dx, dy).mul(JOYSTICK_DISTANCE_MULTIPLIER);
+			joystick.set(dx, dy).scl(JOYSTICK_DISTANCE_MULTIPLIER);
 			float len = joystick.len();
 			if (len > 1) {
 				joystick.nor();

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/FileProcessor.java
Patch:
@@ -201,9 +201,9 @@ private void process (File[] files, File outputRoot, File outputDir, LinkedHashM
 				entry.outputDir = outputDir;
 
 				if (flattenOutput) {
-					entry.outputFile = outputRoot.length() == 0 ? new File(outputName) : new File(outputRoot, outputName);
+					entry.outputFile = new File(outputRoot, outputName);
 				} else {
-					entry.outputFile = outputDir.length() == 0 ? new File(outputName) : new File(outputDir, outputName);
+					entry.outputFile = new File(outputDir, outputName);
 				}
 
 				dirToEntries.get(dir).add(entry);

File: gdx/src/com/badlogic/gdx/InputProcessorQueue.java
Patch:
@@ -2,6 +2,7 @@
 package com.badlogic.gdx;
 
 import com.badlogic.gdx.utils.IntArray;
+import com.badlogic.gdx.utils.TimeUtils;
 
 /** Queues events that are later passed to the wrapped {@link InputProcessor}.
  * @author Nathan Sweet */
@@ -78,7 +79,7 @@ public void drain () {
 	}
 
 	private void queueTime () {
-		long time = System.nanoTime();
+		long time = TimeUtils.nanoTime();
 		queue.add((int)(time >> 32));
 		queue.add((int)time);
 	}

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -177,7 +177,7 @@ public Mesh (boolean staticVertices, boolean staticIndices, int maxVertices, int
 	public Mesh (VertexDataType type, boolean isStatic, int maxVertices, int maxIndices, VertexAttribute... attributes) {
 // if (type == VertexDataType.VertexArray && Gdx.graphics.isGL20Available()) type = VertexDataType.VertexBufferObject;
 
-		if (type == VertexDataType.VertexBufferObject) {
+		if (type == VertexDataType.VertexBufferObject || Mesh.forceVBO) {
 			vertices = new VertexBufferObject(isStatic, maxVertices, attributes);
 			indices = new IndexBufferObject(isStatic, maxIndices);
 			isVertexArray = false;

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -33,7 +33,7 @@ public OrthographicCamera () {
 	}
 
 	/** Constructs a new OrthographicCamera, using the given viewport width and height. For pixel perfect 2D rendering just supply
-	 * the screen size, for other unit scales (e.g. meters for box2d) proceed accordingly.
+	 * the screen size, for other unit scales (e.g. meters for box2d) proceed accordingly. The camera will show the region [-viewportWidth/2, -viewportHeight / 2]- [viewportWidth/2, viewportHeight/2]
 	 * 
 	 * @param viewportWidth the viewport width
 	 * @param viewportHeight the viewport height */
@@ -45,7 +45,7 @@ public OrthographicCamera (float viewportWidth, float viewportHeight) {
 	}
 
 	/** Constructs a new OrthographicCamera, using the given viewport width and height. This will create a camera useable for
-	 * iso-metric views. The diamond angle is specifies the angle of a tile viewed isometrically.
+	 * iso-metric views. The diamond angle is specifies the angle of a tile viewed isometrically. 
 	 * 
 	 * @param viewportWidth the viewport width
 	 * @param viewportHeight the viewport height
@@ -83,7 +83,7 @@ public void findDirectionForIsoView (float targetAngle, float epsilon, int maxIt
 
 	private float calculateAngle (float a) {
 		Vector3 camPos = calculateDirection(a);
-		position.set(camPos.mul(30));
+		position.set(camPos.scl(30));
 		lookAt(0, 0, 0);
 		normalizeUp();
 		update();

File: gdx/src/com/badlogic/gdx/graphics/g2d/PolygonRegion.java
Patch:
@@ -77,8 +77,8 @@ public PolygonRegion (TextureRegion region, float[] vertices) {
 		for (int i = 0; i < triangulatedVectors.size(); i++) {
 			localVertices[i * 2] = triangulatedVectors.get(i).x;
 			localVertices[i * 2 + 1] = triangulatedVectors.get(i).y;
-			texCoords[i * 2] = region.u + (localVertices[i * 2] - region.getRegionX()) / region.getRegionWidth();
-			texCoords[i * 2 + 1] = region.v + (1 - (localVertices[i * 2 + 1] - region.getRegionY()) / region.getRegionHeight());
+			texCoords[i*2 ] = region.getU() + uvWidth * (localVertices[i*2] / region.getRegionWidth());
+			texCoords[i*2+ 1] = region.getV() + uvHeight * (1-(localVertices[i*2+1] / region.getRegionHeight()));
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/math/Matrix4.java
Patch:
@@ -646,7 +646,7 @@ public Matrix4 setToLookAt (Vector3 direction, Vector3 up) {
 	public Matrix4 setToLookAt (Vector3 position, Vector3 target, Vector3 up) {
 		tmpVec.set(target).sub(position);
 		setToLookAt(tmpVec, up);
-		this.mul(tmpMat.setToTranslation(position.tmp().mul(-1)));
+		this.mul(tmpMat.setToTranslation(position.tmp().scl(-1)));
 
 		return this;
 	}

File: gdx/src/com/badlogic/gdx/math/collision/BoundingBox.java
Patch:
@@ -123,7 +123,7 @@ public BoundingBox set (Vector3 minimum, Vector3 maximum) {
 			minimum.z < maximum.z ? minimum.z : maximum.z);
 		max.set(minimum.x > maximum.x ? minimum.x : maximum.x, minimum.y > maximum.y ? minimum.y : maximum.y,
 			minimum.z > maximum.z ? minimum.z : maximum.z);
-		cnt.set(min).add(max).mul(0.5f);
+		cnt.set(min).add(max).scl(0.5f);
 		dim.set(max).sub(min);
 		crn_dirty = true;
 		return this;

File: gdx/src/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -242,6 +242,7 @@ public World (Vector2 gravity, boolean doSleep) {
 		}
 	
 		b2World* world = new b2World( b2Vec2( gravityX, gravityY ));
+		world->SetAllowSleeping( doSleep );
 		return (jlong)world;
 	*/
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -669,13 +669,15 @@ public Vector2 stageToScreenCoordinates (Vector2 stageCoords) {
 
 	/** Transforms the coordinates to screen coordinates. The coordinates can be anywhere in the stage since the transform matrix
 	 * describes how to convert them. The transform matrix is typically obtained from {@link SpriteBatch#getTransformMatrix()}
-	 * during {@link Actor#draw(SpriteBatch, float)}. */
+	 * during {@link Actor#draw(SpriteBatch, float)}.
+	 * @see Actor#localToStageCoordinates(Vector2) */
 	public Vector2 toScreenCoordinates (Vector2 coords, Matrix4 transformMatrix) {
 		ScissorStack.toWindowCoordinates(camera, transformMatrix, coords);
 		return coords;
 	}
 
 	public void dispose () {
+		clear();
 		if (ownsBatch) batch.dispose();
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Touchpad.java
Patch:
@@ -100,11 +100,11 @@ void calculatePositionAndValue (float x, float y, boolean isTouchUp) {
 			if (!deadzoneBounds.contains(x, y)) {
 				knobPercent.set((x - centerX) / knobBounds.radius, (y - centerY) / knobBounds.radius);
 				float length = knobPercent.len();
-				if (length > 1) knobPercent.mul(1 / length);
+				if (length > 1) knobPercent.scl(1 / length);
 				if (knobBounds.contains(x, y)) {
 					knobPosition.set(x, y);
 				} else {
-					knobPosition.set(knobPercent).nor().mul(knobBounds.radius).add(knobBounds.x, knobBounds.y);
+					knobPosition.set(knobPercent).nor().scl(knobBounds.radius).add(knobBounds.x, knobBounds.y);
 				}
 			}
 		}

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -80,14 +80,14 @@ public Array (Array array) {
 	 * array. The capacity is set to the number of elements, so any subsequent elements added will cause the backing array to be
 	 * grown. */
 	public Array (T[] array) {
-		this(true, array);
+		this(true, array, 0, array.length);
 	}
 
 	/** Creates a new array containing the elements in the specified array. The new array will have the same type of backing array.
 	 * The capacity is set to the number of elements, so any subsequent elements added will cause the backing array to be grown.
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
-	public Array (boolean ordered, T[] array) {
+	public Array (boolean ordered, T[] array, int start, int count) {
 		this(ordered, array.length, (Class)array.getClass().getComponentType());
 		size = array.length;
 		System.arraycopy(array, 0, items, 0, size);

File: gdx/src/com/badlogic/gdx/utils/DelayedRemovalArray.java
Patch:
@@ -45,8 +45,8 @@ public DelayedRemovalArray (boolean ordered, int capacity) {
 		super(ordered, capacity);
 	}
 
-	public DelayedRemovalArray (boolean ordered, T[] array) {
-		super(ordered, array);
+	public DelayedRemovalArray (boolean ordered, T[] array, int startIndex, int count) {
+		super(ordered, array, startIndex, count);
 	}
 
 	public DelayedRemovalArray (Class<T> arrayType) {

File: gdx/src/com/badlogic/gdx/utils/PerformanceCounter.java
Patch:
@@ -62,7 +62,7 @@ public PerformanceCounter(final String name, final int windowSize) {
 	 * The values are only valid after at least two calls to this method.
 	 */
 	public void tick() {
-		final long t = System.nanoTime();
+		final long t = TimeUtils.nanoTime();
 		if (lastTick > 0L)
 			tick((t - lastTick) * nano2seconds);
 		lastTick = t;
@@ -92,7 +92,7 @@ public void tick(final float delta) {
 	 * Call {@link #stop()} when done.
 	 */
 	public void start() {
-		startTime = System.nanoTime();
+		startTime = TimeUtils.nanoTime();
 		valid = false;
 	}
 	
@@ -102,7 +102,7 @@ public void start() {
 	 */
 	public void stop() {
 		if (startTime > 0L) {
-			current += (System.nanoTime() - startTime) * nano2seconds;
+			current += (TimeUtils.nanoTime() - startTime) * nano2seconds;
 			startTime = 0L;
 			valid = true;
 		}

File: gdx/src/com/badlogic/gdx/utils/PerformanceCounters.java
Patch:
@@ -38,7 +38,7 @@ public PerformanceCounter add(final String name) {
 	}
 	
 	public void tick() {
-		final long t = System.nanoTime();
+		final long t = TimeUtils.nanoTime();
 		if (lastTick > 0L)
 			tick((t - lastTick) * nano2seconds);
 		lastTick = t;

File: gdx/src/com/badlogic/gdx/utils/SnapshotArray.java
Patch:
@@ -56,8 +56,8 @@ public SnapshotArray (boolean ordered, int capacity) {
 		super(ordered, capacity);
 	}
 
-	public SnapshotArray (boolean ordered, T[] array) {
-		super(ordered, array);
+	public SnapshotArray (boolean ordered, T[] array, int startIndex, int count) {
+		super(ordered, array, startIndex, count);
 	}
 
 	public SnapshotArray (Class<T> arrayType) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DCharacterControllerTest.java
Patch:
@@ -395,7 +395,7 @@ public MovingPlatform (float x, float y, float width, float height, float dx, fl
 		public void update (float deltaTime) {
 			dist += dir.len() * deltaTime;
 			if (dist > maxDist) {
-				dir.mul(-1);
+				dir.scl(-1);
 				dist = 0;
 			}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FrustumTest.java
Patch:
@@ -53,7 +53,7 @@ public boolean needsGL20 () {
 	@Override
 	public void create () {
 		camera = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		camera.position.set(0, 2, 3).nor().mul(10);
+		camera.position.set(0, 2, 3).nor().scl(10);
 		camera.lookAt(0, 0, 0);
 
 		camera2 = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InterpolationTest.java
Patch:
@@ -119,7 +119,7 @@ public void render () {
 	Vector2 getCurrentPosition () {
 		temp.set(targetPosition);
 		temp.sub(position);
-		temp.mul(getInterpolation().apply(Math.min(1, timer / 1f)));
+		temp.scl(getInterpolation().apply(Math.min(1, timer / 1f)));
 		temp.add(position);
 		return temp;
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InverseKinematicsTest.java
Patch:
@@ -117,12 +117,12 @@ public void solveFakeIK (Vector3 target) {
 			diff.set(endPoint.x, endPoint.y).sub(bones[i + 1].position.x, bones[i + 1].position.y);
 			diff.add(0, gravity);
 			diff.add(bones[i + 1].inertia.x, bones[i + 1].inertia.y);
-			diff.nor().mul(bones[i + 1].len);
+			diff.nor().scl(bones[i + 1].len);
 
 			float x = endPoint.x - diff.x;
 			float y = endPoint.y - diff.y;
 			float delta = Gdx.graphics.getDeltaTime();
-			bones[i + 1].inertia.add((bones[i + 1].position.x - x) * delta, (bones[i + 1].position.y - y) * delta, 0).mul(0.99f);
+			bones[i + 1].inertia.add((bones[i + 1].position.x - x) * delta, (bones[i + 1].position.y - y) * delta, 0).scl(0.99f);
 			bones[i + 1].position.set(x, y, 0);
 		}
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/IsoCamTest.java
Patch:
@@ -47,7 +47,7 @@ public void create () {
 		float pixelsOnX = Gdx.graphics.getWidth() / unitsOnX;
 		float unitsOnY = Gdx.graphics.getHeight() / pixelsOnX;
 		cam = new OrthographicCamera(unitsOnX, unitsOnY, 25);
-		cam.position.mul(30);
+		cam.position.scl(30);
 		cam.near = 1;
 		cam.far = 1000;
 		matrix.setToRotation(new Vector3(1, 0, 0), 90);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/CollisionFiltering.java
Patch:
@@ -90,9 +90,9 @@ protected void createWorld (World world) {
 		Body body1 = world.createBody(triangleBodyDef);
 		body1.createFixture(triangleShapeDef);
 
-		vertices[0].mul(2);
-		vertices[1].mul(2);
-		vertices[2].mul(2);
+		vertices[0].scl(2);
+		vertices[1].scl(2);
+		vertices[2].scl(2);
 
 		polygon.set(vertices);
 		triangleShapeDef.filter.groupIndex = k_largeGroup;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayCastTest.java
Patch:
@@ -75,7 +75,7 @@ public void dispose () {
 	public boolean tap (float x, float y, int count, int button) {
 		Ray ray = camera.getPickRay(x, y);
 		rayFrom.set(ray.origin);
-		rayTo.set(ray.direction).mul(50f).add(rayFrom); // 50 meters max from the origin
+		rayTo.set(ray.direction).scl(50f).add(rayFrom); // 50 meters max from the origin
 
 		// Because we reuse the ClosestRayResultCallback, we need reset it's values
 		rayTestCB.setM_collisionObject(null);
@@ -90,7 +90,7 @@ public boolean tap (float x, float y, int count, int button) {
 			if (!obj.isStaticOrKinematicObject()) {
 				final btRigidBody body = btRigidBody.upcast(obj);
 				body.activate();
-				body.applyCentralImpulse(Vector3.tmp2.set(ray.direction).mul(20f));
+				body.applyCentralImpulse(Vector3.tmp2.set(ray.direction).scl(20f));
 			}
 		}
 		return true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayPickRagdollTest.java
Patch:
@@ -93,7 +93,7 @@ public boolean touchDown (int screenX, int screenY, int pointer, int button) {
 		boolean result = false;
 		if (button == Buttons.LEFT) {
 			Ray ray = camera.getPickRay(screenX, screenY);
-			Vector3.tmp.set(ray.direction).mul(10f).add(ray.origin);
+			Vector3.tmp.set(ray.direction).scl(10f).add(ray.origin);
 			ClosestRayResultCallback cb = new ClosestRayResultCallback(ray.origin, Vector3.tmp);
 			world.collisionWorld.rayTest(ray.origin, Vector3.tmp, cb);
 			if (cb.hasHit()) {
@@ -147,7 +147,7 @@ public boolean touchDragged (int screenX, int screenY, int pointer) {
 		boolean result = false;
 		if (pickConstraint != null) {
 			Ray ray = camera.getPickRay(screenX, screenY);
-			Vector3.tmp.set(ray.direction).mul(pickDistance).add(camera.position);
+			Vector3.tmp.set(ray.direction).scl(pickDistance).add(camera.position);
 			pickConstraint.setPivotB(Vector3.tmp);
 			result = true;
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/superkoalio/SuperKoalio.java
Patch:
@@ -171,7 +171,7 @@ private void updateKoala(float deltaTime) {
 		
 		// multiply by delta time so we know how far we go
 		// in this frame
-		koala.velocity.mul(deltaTime);
+		koala.velocity.scl(deltaTime);
 		
 		// perform collision detection & response, on each axis, separately
 		// if the koala is moving right, check the tiles to the right of it's
@@ -231,7 +231,7 @@ private void updateKoala(float deltaTime) {
 		// unscale the velocity by the inverse delta time and set 
 		// the latest position
 		koala.position.add(koala.velocity);
-		koala.velocity.mul(1/deltaTime);
+		koala.velocity.scl(1/deltaTime);
 		
 		// Apply damping to the velocity on the x-axis so we don't
 		// walk infinitely once a key was pressed

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -81,7 +81,7 @@ public class GdxTests {
 		ExternalMusicTest.class, SoftKeyboardTest.class, DirtyRenderingTest.class, YDownTest.class,
 		ScreenCaptureTest.class, BitmapFontTest.class, LabelScaleTest.class, GamepadTest.class, NetAPITest.class, TideMapAssetManagerTest.class, TideMapDirectLoaderTest.class, TiledMapAssetManagerTest.class, TiledMapBench.class,
 		RunnablePostTest.class, Vector2dTest.class, SuperKoalio.class, NinePatchTest.class,
-		JsonModelLoaderTest.class, BatchRenderTest.class, NewModelTest.class));
+		JsonModelLoaderTest.class, BatchRenderTest.class, NewModelTest.class, HexagonalTiledMapTest.class));
 	
 	public static List<String> getNames () {
 		List<String> names = new ArrayList<String>(tests.size());

File: gdx/src/com/badlogic/gdx/maps/tiled/AtlasTiledMapLoader.java
Patch:
@@ -229,7 +229,9 @@ public void loadAsync (AssetManager manager, String fileName, AtlasTiledMapLoade
 
 	@Override
 	public TiledMap loadSync (AssetManager manager, String fileName, AtlasTiledMapLoaderParameters parameter) {
-		setTextureFilters(parameter.textureMinFilter, parameter.textureMagFilter);
+		if (parameter != null) {
+			setTextureFilters(parameter.textureMinFilter, parameter.textureMagFilter);
+		}
 
 		return map;
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapAtlasAssetManagerTest.java
Patch:
@@ -52,7 +52,8 @@ public void create () {
 
 		assetManager = new AssetManager();
 		assetManager.setLoader(TiledMap.class, new AtlasTiledMapLoader(new InternalFileHandleResolver()));
-		assetManager.load("data/maps/tiled-atlas-processed/test.tmx", TiledMap.class, params);
+//		assetManager.load("data/maps/tiled-atlas-processed/test.tmx", TiledMap.class, params);
+		assetManager.load("data/maps/tiled-atlas-processed/test.tmx", TiledMap.class);
 		assetManager.finishLoading();
 		map = assetManager.get("data/maps/tiled-atlas-processed/test.tmx");
 		renderer = new OrthogonalTiledMapRenderer(map, 1f / 32f);

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSAudio.java
Patch:
@@ -102,14 +102,15 @@ public Music newMusic (FileHandle fileHandle) {
 		verify(fileHandle);
 
 		// create audio player - from file path
+		String path = fileHandle.file().getPath().replace('\\', '/');
 		NSError[] error = new NSError[1];
-		AVAudioPlayer player = AVAudioPlayer.FromUrl(NSUrl.FromFilename(fileHandle.path()), error);
+		AVAudioPlayer player = AVAudioPlayer.FromUrl(NSUrl.FromFilename(path), error);
 		if (error[0] == null) {
 			// no error: return the music object
 			return new IOSMusic(player);
 		} else {
 			// throw an exception
-			throw new GdxRuntimeException("Error opening music file at " + fileHandle.path() + ": " + error[0].ToString());
+			throw new GdxRuntimeException("Error opening music file at " + path + ": " + error[0].ToString());
 		}
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -337,7 +337,7 @@ public boolean keyTyped (InputEvent event, char character) {
 					}
 					if ((character == TAB || character == ENTER_ANDROID) && focusTraversal)
 						next(Gdx.input.isKeyPressed(Keys.SHIFT_LEFT) || Gdx.input.isKeyPressed(Keys.SHIFT_RIGHT));
-					if (!onlyFontChars || font.containsCharacter(character)) {
+					if (Character.isLetter(character) && (!onlyFontChars || font.containsCharacter(character))) {
 						if (maxLength > 0 && text.length() + 1 > maxLength) {
 							return true;
 						}

File: gdx/src/com/badlogic/gdx/maps/tiled/AtlasTiledMapLoader.java
Patch:
@@ -340,9 +340,10 @@ protected void loadTileset (TiledMap map, Element element, FileHandle tmxFile, A
 
 			Array<AtlasRegion> regions = atlas.findRegions(regionsName);
 			for (AtlasRegion region : regions) {
-				StaticTiledMapTile tile = new StaticTiledMapTile(region);
 				// handle unused tile ids
 				if (region != null) {
+					StaticTiledMapTile tile = new StaticTiledMapTile(region);
+
 					if (!yUp) {
 						region.flip(false, true);
 					}

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/MaxRectsPacker.java
Patch:
@@ -677,7 +677,7 @@ static public enum FreeRectChoiceHeuristic {
 
 	class RectComparator implements Comparator<Rect> {
 		public int compare (Rect o1, Rect o2) {
-			return o1.getName(settings.flattenPaths).compareTo(o2.getName(settings.flattenPaths));
+			return Rect.getAtlasName(o1.name, settings.flattenPaths).compareTo(Rect.getAtlasName(o2.name, settings.flattenPaths));
 		}
 	}
 }

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSAudio.java
Patch:
@@ -102,14 +102,15 @@ public Music newMusic (FileHandle fileHandle) {
 		verify(fileHandle);
 
 		// create audio player - from file path
+		String path = fileHandle.file().getPath().replace('\\', '/');
 		NSError[] error = new NSError[1];
-		AVAudioPlayer player = AVAudioPlayer.FromUrl(NSUrl.FromFilename(fileHandle.path()), error);
+		AVAudioPlayer player = AVAudioPlayer.FromUrl(NSUrl.FromFilename(path), error);
 		if (error[0] == null) {
 			// no error: return the music object
 			return new IOSMusic(player);
 		} else {
 			// throw an exception
-			throw new GdxRuntimeException("Error opening music file at " + fileHandle.path() + ": " + error[0].ToString());
+			throw new GdxRuntimeException("Error opening music file at " + path + ": " + error[0].ToString());
 		}
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -33,7 +33,7 @@ public OrthographicCamera () {
 	}
 
 	/** Constructs a new OrthographicCamera, using the given viewport width and height. For pixel perfect 2D rendering just supply
-	 * the screen size, for other unit scales (e.g. meters for box2d) proceed accordingly.
+	 * the screen size, for other unit scales (e.g. meters for box2d) proceed accordingly. The camera will show the region [-viewportWidth/2, -viewportHeight / 2]- [viewportWidth/2, viewportHeight/2]
 	 * 
 	 * @param viewportWidth the viewport width
 	 * @param viewportHeight the viewport height */
@@ -45,7 +45,7 @@ public OrthographicCamera (float viewportWidth, float viewportHeight) {
 	}
 
 	/** Constructs a new OrthographicCamera, using the given viewport width and height. This will create a camera useable for
-	 * iso-metric views. The diamond angle is specifies the angle of a tile viewed isometrically.
+	 * iso-metric views. The diamond angle is specifies the angle of a tile viewed isometrically. 
 	 * 
 	 * @param viewportWidth the viewport width
 	 * @param viewportHeight the viewport height

File: gdx/src/com/badlogic/gdx/graphics/g2d/PolygonRegion.java
Patch:
@@ -77,8 +77,8 @@ public PolygonRegion (TextureRegion region, float[] vertices) {
 		for (int i = 0; i < triangulatedVectors.size(); i++) {
 			localVertices[i * 2] = triangulatedVectors.get(i).x;
 			localVertices[i * 2 + 1] = triangulatedVectors.get(i).y;
-			texCoords[i * 2] = region.u + (localVertices[i * 2] - region.getRegionX()) / region.getRegionWidth();
-			texCoords[i * 2 + 1] = region.v + (1 - (localVertices[i * 2 + 1] - region.getRegionY()) / region.getRegionHeight());
+			texCoords[i*2 ] = region.getU() + uvWidth * (localVertices[i*2] / region.getRegionWidth());
+			texCoords[i*2+ 1] = region.getV() + uvHeight * (1-(localVertices[i*2+1] / region.getRegionHeight()));
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -242,6 +242,7 @@ public World (Vector2 gravity, boolean doSleep) {
 		}
 	
 		b2World* world = new b2World( b2Vec2( gravityX, gravityY ));
+		world->SetAllowSleeping( doSleep );
 		return (jlong)world;
 	*/
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFileHandle.java
Patch:
@@ -310,7 +310,7 @@ public boolean isDirectory () {
 	 * @throw GdxRuntimeException if this file handle is a {@link FileType#Classpath} or {@link FileType#Internal} and the child
 	 *        doesn't exist. */
 	public FileHandle child (String name) {
-		return new GwtFileHandle(preloader, file + (file.endsWith("/") ? "" : "/") + name, FileType.Internal);
+		return new GwtFileHandle(preloader, file.isEmpty() ? "" : (file + (file.endsWith("/") ? "" : "/")) + name, FileType.Internal);
 	}
 
 	public FileHandle parent () {

File: gdx/src/com/badlogic/gdx/graphics/g3d/loader/JsonModelLoader.java
Patch:
@@ -170,7 +170,7 @@ private VertexAttribute[] parseAttributes (Array<Object> attributes) {
 			} else if(attr.equals("BLENDWEIGHTS")) {
 				vertexAttributes.add(VertexAttribute.BoneWeights(4));
 			} else if(attr.equals("COLOR")) {
-				vertexAttributes.add(VertexAttribute.Color());
+				vertexAttributes.add(VertexAttribute.ColorUnpacked());
 			} else {
 				throw new GdxRuntimeException("Unknown vertex attribuet '" + attr + "', should be one of position, normal, uv, tangent or binormal");
 			}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
Patch:
@@ -393,7 +393,7 @@ private void readNamedObjects (Json json, Class type, JsonValue valueMap) {
 					try {
 						add(valueEntry.name(), object, addType);
 					} catch (Exception ex) {
-						throw new SerializationException("Error reading " + type.getSimpleName() + ": " + valueEntry.name(), ex);
+						throw new SerializationException("Error reading " + type.getName() + ": " + valueEntry.name(), ex);
 					}
 				}
 			}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFileHandle.java
Patch:
@@ -310,7 +310,7 @@ public boolean isDirectory () {
 	 * @throw GdxRuntimeException if this file handle is a {@link FileType#Classpath} or {@link FileType#Internal} and the child
 	 *        doesn't exist. */
 	public FileHandle child (String name) {
-		return new GwtFileHandle(preloader, file + (file.endsWith("/") ? "" : "/") + name, FileType.Internal);
+		return new GwtFileHandle(preloader, file.isEmpty() ? "" : (file + (file.endsWith("/") ? "" : "/")) + name, FileType.Internal);
 	}
 
 	public FileHandle parent () {

File: gdx/src/com/badlogic/gdx/utils/JsonValue.java
Patch:
@@ -545,8 +545,8 @@ private void prettyPrint (JsonValue object, StringBuilder buffer, OutputType out
 			buffer.append(outputType.quoteValue(object.asString()));
 		} else if (object.isDouble()) {
 			double doubleValue = object.asDouble();
-			long longValue = (int)doubleValue;
-			buffer.append(doubleValue - longValue == 0 ? longValue : object);
+			long longValue = object.asLong();
+			buffer.append(doubleValue == longValue ? longValue : doubleValue);
 		} else if (object.isLong()) {
 			buffer.append(object.asLong());
 		} else if (object.isBoolean()) {

File: gdx/src/com/badlogic/gdx/utils/JsonWriter.java
Patch:
@@ -88,7 +88,8 @@ public JsonWriter array () throws IOException {
 	public JsonWriter value (Object value) throws IOException {
 		if (value instanceof Number) {
 			Number number = (Number)value;
-			if (number.doubleValue() % 1 == 0) value = number.longValue();
+			long longValue = number.longValue();
+			if (number.doubleValue() == longValue) value = longValue;
 		}
 		if (current != null) {
 			if (current.array) {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/Json.java
Patch:
@@ -478,7 +478,7 @@ public void writeValue (Object value, Class knownClass, Class elementType) {
 			}
 
 			if (value instanceof Map) {
-				if (knownType == null) knownType = ReflectionCache.getType(OrderedMap.class);
+				if (knownType == null) knownType = ReflectionCache.getType(HashMap.class);
 				writeObjectStart(actualType.getClassOfType(), knownType.getClassOfType());
 				for (Map.Entry entry : ((Map<?, ?>)value).entrySet()) {
 					writer.name(convertToString(entry.getKey()));

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -496,7 +496,7 @@ public void writeValue (Object value, Class knownType, Class elementType) {
 			}
 
 			if (value instanceof Map) {
-				if (knownType == null) knownType = OrderedMap.class;
+				if (knownType == null) knownType = HashMap.class;
 				writeObjectStart(actualType, knownType);
 				for (Map.Entry entry : ((Map<?, ?>)value).entrySet()) {
 					writer.name(convertToString(entry.getKey()));

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSNet.java
Patch:
@@ -128,12 +128,11 @@ public void run () {
 					String method = httpRequest.getMethod();
 
 					if (method.equalsIgnoreCase(HttpMethods.GET)) {
-						String queryString = "";
 						String value = httpRequest.getContent();
 						if (value != null && !"".equals(value)) url += "?" + value;
 					}
 
-					HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(httpRequest.getUrl());
+					HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(url);
 
 					int timeOut = httpRequest.getTimeOut();
 					if (timeOut > 0)

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -379,8 +379,10 @@ public void setStyle (TextFieldStyle style) {
 		invalidateHierarchy();
 	}
 
+	/** Sets the password character for the text field. The character must be present in the {@link BitmapFont} */
 	public void setPasswordCharacter (char passwordCharacter) {
 		this.passwordCharacter = passwordCharacter;
+		if(passwordMode) updateDisplayText();
 	}
 
 	/** Returns the text field's style. Modifying the returned style may not have an effect until {@link #setStyle(TextFieldStyle)}
@@ -758,6 +760,7 @@ public void setRightAligned (boolean rightAligned) {
 	 * no affect. */
 	public void setPasswordMode (boolean passwordMode) {
 		this.passwordMode = passwordMode;
+		updateDisplayText();
 	}
 
 	public void setBlinkTime (float blinkTime) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -379,8 +379,10 @@ public void setStyle (TextFieldStyle style) {
 		invalidateHierarchy();
 	}
 
+	/** Sets the password character for the text field. The character must be present in the {@link BitmapFont} */
 	public void setPasswordCharacter (char passwordCharacter) {
 		this.passwordCharacter = passwordCharacter;
+		updateDisplayText();
 	}
 
 	/** Returns the text field's style. Modifying the returned style may not have an effect until {@link #setStyle(TextFieldStyle)}
@@ -758,6 +760,7 @@ public void setRightAligned (boolean rightAligned) {
 	 * no affect. */
 	public void setPasswordMode (boolean passwordMode) {
 		this.passwordMode = passwordMode;
+		updateDisplayText();
 	}
 
 	public void setBlinkTime (float blinkTime) {

File: gdx/src/com/badlogic/gdx/utils/IntIntMap.java
Patch:
@@ -393,6 +393,7 @@ public void clear () {
 			keyTable[i] = EMPTY;
 		size = 0;
 		stashSize = 0;
+		hasZeroValue = false;
 	}
 
 	/** Returns true if the specified value is in the map. Note this traverses the entire map and compares every value, which may be

File: gdx/src/com/badlogic/gdx/utils/IntIntMap.java
Patch:
@@ -393,6 +393,7 @@ public void clear () {
 			keyTable[i] = EMPTY;
 		size = 0;
 		stashSize = 0;
+		hasZeroValue = false;
 	}
 
 	/** Returns true if the specified value is in the map. Note this traverses the entire map and compares every value, which may be

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java
Patch:
@@ -562,7 +562,7 @@ public void circle(float x, float y, float radius, int segments){
 		renderer.vertex(x + cx, y + cy, 0);
 	}
 	
-	/** Calls {@link #ellipse(float, float, float, int)} by estimating the number of segments needed for a smooth ellipse. */
+	/** Calls {@link #ellipse(float, float, float, float, int)} by estimating the number of segments needed for a smooth ellipse. */
 	public void ellipse(float x, float y, float width, float height) {
 		ellipse(x, y, width, height, (int)(12 * (float) Math.cbrt(Math.max(width * 0.5f,  height * 0.5f))));
 	}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
Patch:
@@ -190,7 +190,7 @@ public void initialize (ApplicationListener listener, AndroidApplicationConfigur
 		
 		app.initialize(listener, config);
 		
-		if (config.getTouchEventsForLiveWallpaper && Integer.parseInt(android.os.Build.VERSION.SDK) < 9)
+		if (config.getTouchEventsForLiveWallpaper && Integer.parseInt(android.os.Build.VERSION.SDK) >= 7)
 			linkedEngine.setTouchEventsEnabled(true);
 		
 		//onResume(); do not call it there

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -113,7 +113,7 @@ public TiledMap load(String fileName, TmxMapLoader.Parameters parameters) {
 			for(FileHandle textureFile: loadTilesets(root, tmxFile)) {
 				Texture texture = new Texture(textureFile, parameters.generateMipMaps);
 				texture.setFilter(parameters.textureMinFilter, parameters.textureMagFilter);
-				textures.put(textureFile.path(), new Texture(textureFile, parameters.generateMipMaps));				
+				textures.put(textureFile.path(), texture);				
 			}
 			DirectImageResolver imageResolver = new DirectImageResolver(textures);
 			TiledMap map = loadTilemap(root, tmxFile, imageResolver);

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -113,7 +113,7 @@ public TiledMap load(String fileName, TmxMapLoader.Parameters parameters) {
 			for(FileHandle textureFile: loadTilesets(root, tmxFile)) {
 				Texture texture = new Texture(textureFile, parameters.generateMipMaps);
 				texture.setFilter(parameters.textureMinFilter, parameters.textureMagFilter);
-				textures.put(textureFile.path(), new Texture(textureFile, parameters.generateMipMaps));				
+				textures.put(textureFile.path(), texture);				
 			}
 			DirectImageResolver imageResolver = new DirectImageResolver(textures);
 			TiledMap map = loadTilemap(root, tmxFile, imageResolver);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
Patch:
@@ -190,7 +190,7 @@ public void initialize (ApplicationListener listener, AndroidApplicationConfigur
 		
 		app.initialize(listener, config);
 		
-		if (config.getTouchEventsForLiveWallpaper && Integer.parseInt(android.os.Build.VERSION.SDK) < 9)
+		if (config.getTouchEventsForLiveWallpaper && Integer.parseInt(android.os.Build.VERSION.SDK) >= 7)
 			linkedEngine.setTouchEventsEnabled(true);
 		
 		//onResume(); do not call it there

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultShaderProvider.java
Patch:
@@ -15,7 +15,7 @@ public class DefaultShaderProvider extends BaseShaderProvider {
 	protected Shader createShader(final Renderable renderable) {
 		Gdx.app.log("DefaultShaderProvider", "Creating new shader");
 		if (Gdx.graphics.isGL20Available())
-			return new DefaultShader(renderable.material, renderable.lights == null ? -1 : maxLightsCount);
+			return new DefaultShader(renderable.material, renderable.mesh.getVertexAttributes(), renderable.lights == null ? -1 : maxLightsCount);
 		return new GLES10Shader(maxLightsCount);
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -176,7 +176,7 @@ public Mesh (boolean staticVertices, boolean staticIndices, int maxVertices, int
 	public Mesh (VertexDataType type, boolean isStatic, int maxVertices, int maxIndices, VertexAttribute... attributes) {
 // if (type == VertexDataType.VertexArray && Gdx.graphics.isGL20Available()) type = VertexDataType.VertexBufferObject;
 
-		if (type == VertexDataType.VertexBufferObject) {
+		if (type == VertexDataType.VertexBufferObject || Mesh.forceVBO) {
 			vertices = new VertexBufferObject(isStatic, maxVertices, attributes);
 			indices = new IndexBufferObject(isStatic, maxIndices);
 			isVertexArray = false;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
Patch:
@@ -338,11 +338,11 @@ public void onSurfaceCreated (final SurfaceHolder holder) {
 				onCreateApplication();
 				if (app.graphics == null)
 					throw new Error("You must override 'AndroidLiveWallpaperService.onCreateApplication' method and call 'initialize' from its body.");
-				
-				view = (SurfaceHolder.Callback)app.graphics.view;
-				this.getSurfaceHolder().removeCallback(view);	// we are going to call this events manually
 			}
 
+			view = (SurfaceHolder.Callback)app.graphics.view;
+			this.getSurfaceHolder().removeCallback(view);	// we are going to call this events manually
+
 			// inherit format from shared surface view
 			engineFormat = viewFormat;
 			engineWidth = viewWidth;

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/FileProcessor.java
Patch:
@@ -201,9 +201,9 @@ private void process (File[] files, File outputRoot, File outputDir, LinkedHashM
 				entry.outputDir = outputDir;
 
 				if (flattenOutput) {
-					entry.outputFile = outputRoot.length() == 0 ? new File(outputName) : new File(outputRoot, outputName);
+					entry.outputFile = new File(outputRoot, outputName);
 				} else {
-					entry.outputFile = outputDir.length() == 0 ? new File(outputName) : new File(outputDir, outputName);
+					entry.outputFile = new File(outputDir, outputName);
 				}
 
 				dirToEntries.get(dir).add(entry);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
Patch:
@@ -338,11 +338,11 @@ public void onSurfaceCreated (final SurfaceHolder holder) {
 				onCreateApplication();
 				if (app.graphics == null)
 					throw new Error("You must override 'AndroidLiveWallpaperService.onCreateApplication' method and call 'initialize' from its body.");
-				
-				view = (SurfaceHolder.Callback)app.graphics.view;
-				this.getSurfaceHolder().removeCallback(view);	// we are going to call this events manually
 			}
 
+			view = (SurfaceHolder.Callback)app.graphics.view;
+			this.getSurfaceHolder().removeCallback(view);	// we are going to call this events manually
+
 			// inherit format from shared surface view
 			engineFormat = viewFormat;
 			engineWidth = viewWidth;

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshPartBuilder.java
Patch:
@@ -24,11 +24,11 @@ public interface MeshPartBuilder {
 	/** Add an index, MeshPartBuilder expects all meshes to be indexed and triangulated. */
 	public void index(final short value);
 	/** Add a rectangle. */
-	public void rect(VertexInfo corner00, VertexInfo corner01, VertexInfo corner10, VertexInfo corner11);
+	public void rect(VertexInfo corner00, VertexInfo corner10, VertexInfo corner11, VertexInfo corner01);
 	/** Add a rectangle. */
-	public void rect(Vector3 corner00, Vector3 corner01, Vector3 corner10, Vector3 corner11, Vector3 normal);
+	public void rect(Vector3 corner00, Vector3 corner10, Vector3 corner11, Vector3 corner01, Vector3 normal);
 	/** Add a rectangle */
-	public void rect(float x00, float y00, float z00, float x01, float y01, float z01, float x10, float y10, float z10, float x11, float y11, float z11, float normalX, float normalY, float normalZ);
+	public void rect(float x00, float y00, float z00, float x10, float y10, float z10, float x11, float y11, float z11, float x01, float y01, float z01, float normalX, float normalY, float normalZ);
 	/** Add a box */
 	public void box(Vector3 corner000, Vector3 corner010, Vector3 corner100, Vector3 corner110,
 						Vector3 corner001, Vector3 corner011, Vector3 corner101, Vector3 corner111);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/ModelBuilder.java
Patch:
@@ -166,9 +166,9 @@ public Model createBox(float width, float height, float depth, final Material ma
 	/** Convenience method to create a model with a single node containing a rectangle shape. 
 	 * The resources the Material might contain are not managed, 
 	 * use {@link Model#manageDisposable(Disposable)} to add those to the model. */
-	public Model createRect(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, float x4, float y4, float z4, float normalX, float normalY, float normalZ, final Material material, final VertexAttributes attributes) {
+	public Model createRect(float x00, float y00, float z00, float x10, float y10, float z10, float x11, float y11, float z11, float x01, float y01, float z01, float normalX, float normalY, float normalZ, final Material material, final VertexAttributes attributes) {
 		begin();
-		part("rect", attributes, material).rect(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, normalX, normalY, normalZ);
+		part("rect", attributes, material).rect(x00, y00, z00, x10, y10, z10, x11, y11, z11, x01, y01, z01, normalX, normalY, normalZ);
 		return end();
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicShapesTest.java
Patch:
@@ -7,6 +7,7 @@
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 import com.badlogic.gdx.graphics.g3d.Model;
 import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
+import com.badlogic.gdx.graphics.g3d.materials.FloatAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
 import com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor;
@@ -35,7 +36,7 @@ public void create () {
 		super.create();
 
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
-		final Material material = new Material(ColorAttribute.createSpecular(1,1,1,1), new TextureAttribute(TextureAttribute.Diffuse, new TextureDescriptor(texture)));
+		final Material material = new Material(TextureAttribute.createDiffuse(texture), ColorAttribute.createSpecular(1,1,1,1), FloatAttribute.createShininess(8f));
 		final VertexAttributes attributes = new VertexAttributes(
 						new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE),
 						new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE),

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGraphics.java
Patch:
@@ -148,6 +148,7 @@ void frameStart (long time) {
 	}
 
 	void sizeChanged (int width, int height) {
+		glfwShowWindow(window); // This is required to refresh the NSOpenGLContext on OSX!
 		width = Math.max(1, width);
 		height = Math.max(1, height);
 		this.width = width;

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Simulation.java
Patch:
@@ -121,7 +121,7 @@ private void populate () {
 				vertices[idx++] = 0.25f + column * 0.25f;
 				vertices[idx++] = 0.25f + row * 0.25f;
 				
-				final int t = row*column*4;
+				final int t = (4*row+column)*4;
 				indices[index++] = (short)(t);
 				indices[index++] = (short)(t+1);
 				indices[index++] = (short)(t+2);

File: gdx/src/com/badlogic/gdx/graphics/g3d/Light.java
Patch:
@@ -100,6 +100,7 @@ public void set(final Light other) {
 			direction.set(other.direction);
 			angle = other.angle;
 			attenuation.set(other.attenuation);
+			exponent = other.exponent;
 		}
 	}
 	
@@ -114,7 +115,7 @@ public boolean equals(Light other) {
 			return false;
 		if ((type == DIRECTIONAL || type == SPOT) && !direction.equals(other.direction))
 			return false;
-		if (type == SPOT && angle != other.angle)
+		if (type == SPOT && (angle != other.angle || exponent != other.exponent))
 			return false;
 		return true;
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/Renderable.java
Patch:
@@ -34,4 +34,6 @@ public class Renderable {
 	public Light[] lights;
 	/** the Shader to be used to render this Renderable, may be null **/
 	public Shader shader;
+	/** user definable value. */
+	public Object userData;
 }
\ No newline at end of file

File: gdx/src/com/badlogic/gdx/graphics/g3d/materials/BlendingAttribute.java
Patch:
@@ -1,6 +1,7 @@
 package com.badlogic.gdx.graphics.g3d.materials;
 
 import com.badlogic.gdx.graphics.g3d.materials.Material.Attribute;
+import com.badlogic.gdx.utils.GdxRuntimeException;
 
 public class BlendingAttribute extends Material.Attribute {
 	public final static String Alias = "blended";

File: gdx/src/com/badlogic/gdx/graphics/g3d/materials/FloatAttribute.java
Patch:
@@ -1,6 +1,7 @@
 package com.badlogic.gdx.graphics.g3d.materials;
 
 import com.badlogic.gdx.graphics.g3d.materials.Material.Attribute;
+import com.badlogic.gdx.utils.GdxRuntimeException;
 
 public class FloatAttribute extends Material.Attribute {
 	public static final String ShininessAlias = "shininess";

File: gdx/src/com/badlogic/gdx/graphics/g3d/materials/TextureAttribute.java
Patch:
@@ -39,7 +39,7 @@ public TextureAttribute(final long type, final TextureDescriptor textureDescript
 	}
 	
 	public TextureAttribute(final long type) {
-		this(type, (TextureDescriptor)null);
+		this(type, new TextureDescriptor());
 	}
 	
 	public TextureAttribute(final long type, final Texture texture) {

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/RenderableSorter.java
Patch:
@@ -1,5 +1,6 @@
 package com.badlogic.gdx.graphics.g3d.utils;
 
+import com.badlogic.gdx.graphics.Camera;
 import com.badlogic.gdx.graphics.g3d.Renderable;
 import com.badlogic.gdx.utils.Array;
 
@@ -14,5 +15,5 @@ public interface RenderableSorter {
 	 * e.g. material, distance to camera etc.
 	 * @param renderables the array of renderables to be sorted
 	 */
-	public void sort(Array<Renderable> renderables);
+	public void sort(Camera camera, Array<Renderable> renderables);
 }

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Simulation.java
Patch:
@@ -121,7 +121,7 @@ private void populate () {
 				vertices[idx++] = 0.25f + column * 0.25f;
 				vertices[idx++] = 0.25f + row * 0.25f;
 				
-				final int t = row*column*4;
+				final int t = (4*row+column)*4;
 				indices[index++] = (short)(t);
 				indices[index++] = (short)(t+1);
 				indices[index++] = (short)(t+2);

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java
Patch:
@@ -458,6 +458,9 @@ public boolean touchDown (int x, int y, int pointer, int newParam) {
 		}
 
 		public boolean touchUp (int x, int y, int pointer, int button) {
+			ParticleEditor.this.dispatchEvent(new WindowEvent(ParticleEditor.this, WindowEvent.WINDOW_LOST_FOCUS));
+			ParticleEditor.this.dispatchEvent(new WindowEvent(ParticleEditor.this, WindowEvent.WINDOW_GAINED_FOCUS));
+			ParticleEditor.this.requestFocusInWindow();
 			return false;
 		}
 

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java
Patch:
@@ -458,6 +458,9 @@ public boolean touchDown (int x, int y, int pointer, int newParam) {
 		}
 
 		public boolean touchUp (int x, int y, int pointer, int button) {
+			ParticleEditor.this.dispatchEvent(new WindowEvent(ParticleEditor.this, WindowEvent.WINDOW_LOST_FOCUS));
+			ParticleEditor.this.dispatchEvent(new WindowEvent(ParticleEditor.this, WindowEvent.WINDOW_GAINED_FOCUS));
+			ParticleEditor.this.requestFocusInWindow();
 			return false;
 		}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -60,9 +60,9 @@ public class LwjglApplicationConfiguration {
 	public int audioDeviceBufferCount = 9;
 	public Color initialBackgroundColor = Color.BLACK;
 	/** Target framerate when the window is in the foreground. The CPU sleeps as needed. Use 0 to never sleep. **/
-	public int foregroundFPS = 0;
+	public int foregroundFPS = 61;
 	/** Target framerate when the window is not in the foreground. The CPU sleeps as needed. Use 0 to never sleep, -1 to not render. **/
-	public int backgroundFPS = 0;
+	public int backgroundFPS = 61;
 
 	Array<String> iconPaths = new Array();
 	Array<FileType> iconFileTypes = new Array();

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java
Patch:
@@ -31,7 +31,7 @@
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g3d.ModelBatch;
 import com.badlogic.gdx.graphics.g3d.RenderableProvider;
-import com.badlogic.gdx.graphics.g3d.test.TestShader;
+import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Matrix3;
 import com.badlogic.gdx.math.Matrix4;
@@ -79,7 +79,6 @@ public Renderer () {
 		try {
 			spriteBatch = new SpriteBatch();
 			modelBatch = new ModelBatch();
-			TestShader.ignoreUnimplemented = true;
 
 			backgroundTexture = new Texture(Gdx.files.internal("data/planet.jpg"), Format.RGB565, true);
 			backgroundTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);

File: gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.g3d.test.Light;
 import com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter;
 import com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider;
 import com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder;

File: gdx/src/com/badlogic/gdx/graphics/g3d/Renderable.java
Patch:
@@ -4,7 +4,6 @@
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.graphics.g3d.model.Node;
-import com.badlogic.gdx.graphics.g3d.test.Light;
 import com.badlogic.gdx.math.Matrix4;
 
 /**

File: tests/gdx-tests/src/com/badlogic/gdx/tests/CullTest.java
Patch:
@@ -37,7 +37,7 @@
 import com.badlogic.gdx.graphics.g3d.ModelInstance;
 import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.test.TestShader;
+import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
 import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Vector3;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/EdgeDetectionTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.badlogic.gdx.graphics.g3d.ModelBatch;
 import com.badlogic.gdx.graphics.g3d.ModelInstance;
 import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
-import com.badlogic.gdx.graphics.g3d.test.TestShader;
+import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
 import com.badlogic.gdx.graphics.glutils.FrameBuffer;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Matrix4;
@@ -72,7 +72,6 @@ public void create () {
 			Gdx.app.log("EdgeDetectionTest", "couldn't compile post-processing shader: " + batchShader.getLog());
 		}
 
-		TestShader.ignoreUnimplemented = true;
 		ObjLoader objLoader = new ObjLoader();
 		scene = objLoader.loadObj(Gdx.files.internal("data/scene.obj"));
 		sceneInstance = new ModelInstance(scene);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseWorld.java
Patch:
@@ -20,9 +20,9 @@
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.g3d.Light;
 import com.badlogic.gdx.graphics.g3d.Model;
 import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.test.Light;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicShapesTest.java
Patch:
@@ -6,6 +6,7 @@
 import com.badlogic.gdx.graphics.VertexAttributes;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 import com.badlogic.gdx.graphics.g3d.Model;
+import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
 import com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor;
@@ -34,7 +35,7 @@ public void create () {
 		super.create();
 
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
-		final Material material = new Material(new TextureAttribute(TextureAttribute.Diffuse, new TextureDescriptor(texture)));
+		final Material material = new Material(ColorAttribute.createSpecular(1,1,1,1), new TextureAttribute(TextureAttribute.Diffuse, new TextureDescriptor(texture)));
 		final VertexAttributes attributes = new VertexAttributes(
 						new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE),
 						new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE),

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletWorld.java
Patch:
@@ -16,8 +16,8 @@
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.g3d.Light;
 import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.test.Light;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.WindowedMean;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/FrustumCullingTest.java
Patch:
@@ -168,7 +168,7 @@ public void create () {
 		frustumEntity.setColor(Color.BLUE);
 		
 		lights[0].position.set(0,0,0);
-		lights[0].power = frustumCam.far * 1.25f;
+		lights[0].attenuation.set(1f, 0f, 0f);
 	}
 	
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayPickRagdollTest.java
Patch:
@@ -256,7 +256,9 @@ public void addRagdoll(final float x, final float y, final float z) {
 	protected Model createCapsuleModel(float radius, float height) {
 		final float hh = radius + 0.5f * height;
 		// return ModelBuilder
-		return modelBuilder.createCylinder(radius * 2, hh * 2f, radius * 2f, 16, new Material(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE)), new VertexAttributes(new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE), new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE)));
+		return modelBuilder.createCylinder(radius * 2, hh * 2f, radius * 2f, 16, 
+			new Material(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE)), 
+			new VertexAttributes(new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE), new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE)));
 		// return ModelBuilder.createBox(radius*2f, hh*2f, radius*2f, new NewMaterial(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE)));
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftBodyTest.java
Patch:
@@ -25,6 +25,7 @@
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 import com.badlogic.gdx.graphics.g3d.Model;
 import com.badlogic.gdx.graphics.g3d.ModelInstance;
+import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
 import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
@@ -116,7 +117,8 @@ public void create () {
 		mesh.setVertices(verts);
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
 		
-		model = ModelBuilder.createFromMesh(mesh, GL10.GL_TRIANGLES, new Material(new TextureAttribute(TextureAttribute.Diffuse, new TextureDescriptor(texture))));
+		model = ModelBuilder.createFromMesh(mesh, GL10.GL_TRIANGLES, 
+			new Material(TextureAttribute.createDiffuse(texture), ColorAttribute.createSpecular(Color.WHITE)));
 		instance = new ModelInstance(model);
 	}
 	

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvadersDesktop.java
Patch:
@@ -23,7 +23,7 @@ public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.title = "Gdx Invaders";
 		config.vSyncEnabled = true;
-		config.useGL20 = false;
+		config.useGL20 = true;
 		new LwjglApplication(new GdxInvaders(), config);
 	}
 }

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java
Patch:
@@ -18,6 +18,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.PerspectiveCamera;

File: gdx/src/com/badlogic/gdx/graphics/g3d/Model.java
Patch:
@@ -42,10 +42,10 @@
  * A model can be rendered by creating a {@link ModelInstance} from it. That instance has an additional
  * transform to position the model in the world, and allows modification of materials and nodes without
  * destroying the original model. The original model is the owner of any meshes and textures, all instances
- * derrived from the model share these resources. Disposing the model will automatically make all instances
+ * created from the model share these resources. Disposing the model will automatically make all instances
  * invalid!</p>
  * 
- * A model is derrived from {@link ModelData}, which in turn is loaded by a {@link ModelLoader}.
+ * A model is created from {@link ModelData}, which in turn is loaded by a {@link ModelLoader}.
  *   
  * @author badlogic
  *

File: gdx/src/com/badlogic/gdx/graphics/g3d/ModelInstance.java
Patch:
@@ -1,6 +1,7 @@
 package com.badlogic.gdx.graphics.g3d;
 
 import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.graphics.g3d.model.Animation;
 import com.badlogic.gdx.graphics.g3d.model.MeshPart;
 import com.badlogic.gdx.graphics.g3d.model.MeshPartMaterial;
 import com.badlogic.gdx.graphics.g3d.model.Node;
@@ -30,6 +31,8 @@ public class ModelInstance implements RenderableProvider {
 	public final Array<Material> materials = new Array<Material>();
 	/** a copy of the nodes of the original model, referencing the copied materials in their {@link MeshPartMaterial} instances **/
 	public final Array<Node> nodes = new Array<Node>();
+	/** a copy of the animations of the original model **/
+	public final Array<Animation> animations = new Array<Animation>();
 
 	/** Constructs a new ModelInstance with all nodes and materials of the given model. */
 	public ModelInstance(Model model) {

File: gdx/src/com/badlogic/gdx/graphics/g3d/model/NodeAnimation.java
Patch:
@@ -4,15 +4,15 @@
 import com.badlogic.gdx.utils.Array;
 
 /**
- * A BoneAnimation defines keyframes for a {@link Node} in a {@link Model}. The keyframes
+ * A NodeAnimation defines keyframes for a {@link Node} in a {@link Model}. The keyframes
  * are given as a translation vector, a rotation quaternion and a scale vector. Keyframes are 
  * interpolated linearly for now. Keytimes are given in seconds.
  * @author badlogic
  *
  */
-public class BoneAnimation {
+public class NodeAnimation {
 	/** the Node affected by this animation **/
 	public Node node;
 	/** the keyframes, sorted by time, ascending **/
-	public Array<BoneKeyframe> keyframes = new Array<BoneKeyframe>();
+	public Array<NodeKeyframe> keyframes = new Array<NodeKeyframe>();
 }

File: gdx/src/com/badlogic/gdx/graphics/g3d/model/NodeKeyframe.java
Patch:
@@ -5,11 +5,11 @@
 
 /**
  * A BoneyKeyframe specifies the translation, rotation and scale of a frame within
- * a {@link BoneAnimation}.
+ * a {@link NodeAnimation}.
  * @author badlogic
  *
  */
-public class BoneKeyframe {
+public class NodeKeyframe {
 	/** the timestamp of this keyframe **/
 	public float keytime;
 	/** the translation, given in local space, relative to the parent **/

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
Patch:
@@ -108,11 +108,10 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 
 		font.setColor(fontColorUnselected.r, fontColorUnselected.g, fontColorUnselected.b, fontColorUnselected.a * parentAlpha);
 		float itemY = getHeight();
-        float padding = selectedDrawable.getLeftWidth() + selectedDrawable.getRightWidth();
 		for (int i = 0; i < items.length; i++) {
 			if (cullingArea == null || (itemY - itemHeight <= cullingArea.y + cullingArea.height && itemY >= cullingArea.y)) {
 				if (selectedIndex == i) {
-					selectedDrawable.draw(batch, x, y + itemY - itemHeight, Math.max(prefWidth, getWidth() + padding), itemHeight);
+					selectedDrawable.draw(batch, x, y + itemY - itemHeight, prefWidth, itemHeight);
 					font.setColor(fontColorSelected.r, fontColorSelected.g, fontColorSelected.b, fontColorSelected.a * parentAlpha);
 				}
 				font.draw(batch, items[i], x + textOffsetX, y + itemY - textOffsetY);
@@ -174,7 +173,6 @@ public void setItems (Object[] objects) {
 
 		itemHeight = font.getCapHeight() - font.getDescent() * 2;
 		itemHeight += selectedDrawable.getTopHeight() + selectedDrawable.getBottomHeight();
-		prefWidth += selectedDrawable.getLeftWidth() + selectedDrawable.getRightWidth();
 		textOffsetX = selectedDrawable.getLeftWidth();
 		textOffsetY = selectedDrawable.getTopHeight() - font.getDescent();
 
@@ -183,6 +181,7 @@ public void setItems (Object[] objects) {
 			TextBounds bounds = font.getBounds(items[i]);
 			prefWidth = Math.max(bounds.width, prefWidth);
 		}
+		prefWidth += selectedDrawable.getLeftWidth() + selectedDrawable.getRightWidth();
 		prefHeight = items.length * itemHeight;
 
 		invalidateHierarchy();

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -460,7 +460,7 @@ public boolean hasNext () {
 
 		public T next () {
 			if (index >= array.size) throw new NoSuchElementException(String.valueOf(index));
-			if (!valid) throw new GdxRuntimeException("Array#iterator() cannot be used nested.");
+			if (!valid) throw new GdxRuntimeException("#iterator() cannot be used nested.");
 			return array.items[index++];
 		}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGraphics.java
Patch:
@@ -264,7 +264,7 @@ public void setVSync (boolean vsync) {
 
 	@Override
 	public float getDensity () {
-		return 96.0 / 160;
+		return 96.0f / 160;
 	}
 
 	@Override

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -81,6 +81,7 @@ public void onModuleLoad () {
 		this.agentInfo = computeAgentInfo();
 		this.listener = getApplicationListener();
 		this.config = getConfig();
+		this.log = config.log;
 
 		if (config.rootPanel != null) {
 			this.root = config.rootPanel;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/PreloaderBundleGenerator.java
Patch:
@@ -96,8 +96,7 @@ public String generate (TreeLogger logger, GeneratorContext context, String type
 	}
 
 	private void copyFile (FileWrapper source, FileWrapper dest, AssetFilter filter, ArrayList<Asset> assets) {
-		if (filter.accept(dest.path(), false))
-		;
+		if (!filter.accept(dest.path(), false)) return;
 		try {
 			assets.add(new Asset(dest, filter.getType(dest.path())));
 			dest.write(source.read(), false);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -62,7 +62,7 @@ public class LwjglApplicationConfiguration {
 	/** Target framerate when the window is in the foreground. The CPU sleeps as needed. Use 0 to never sleep. **/
 	public int foregroundFPS = 0;
 	/** Target framerate when the window is not in the foreground. The CPU sleeps as needed. Use 0 to never sleep, -1 to not render. **/
-	public int backgroundFPS = -1;
+	public int backgroundFPS = 0;
 
 	Array<String> iconPaths = new Array();
 	Array<FileType> iconFileTypes = new Array();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java
Patch:
@@ -161,7 +161,7 @@ public boolean touchUp (int x, int y, int pointer, int button) {
 
 	@Override
 	public boolean needsGL20 () {
-		return true;
+		return false;
 	}
 
 	@Override

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -204,8 +204,8 @@ void mainLoop () {
 			} else {
 				// Sleeps to avoid wasting CPU in an empty loop.
 				if (frameRate == -1) frameRate = 10;
-				if (frameRate <= 0) frameRate = graphics.config.backgroundFPS;
-				if (frameRate <= 0) frameRate = 30;
+				if (frameRate == 0) frameRate = graphics.config.backgroundFPS;
+				if (frameRate == 0) frameRate = 30;
 			}
 			if (frameRate > 0) Display.sync(frameRate);
 		}

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java
Patch:
@@ -78,7 +78,6 @@ public Renderer () {
 		try {
 			spriteBatch = new SpriteBatch();
 			modelBatch = new ModelBatch();
-			DefaultShader.ignoreUnimplemented = true;
 
 			backgroundTexture = new Texture(Gdx.files.internal("data/planet.jpg"), Format.RGB565, true);
 			backgroundTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
Patch:
@@ -37,7 +37,7 @@ public final static String getDefaultFragmentShader() {
 	}
 
 	protected static long implementedFlags = BlendingAttribute.Type | TextureAttribute.Diffuse | ColorAttribute.Diffuse;
-	public static boolean ignoreUnimplemented = false;
+	public static boolean ignoreUnimplemented = true;
 	
 	protected final ShaderProgram program;
 	protected int projTransLoc;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/EdgeDetectionTest.java
Patch:
@@ -72,7 +72,6 @@ public void create () {
 			Gdx.app.log("EdgeDetectionTest", "couldn't compile post-processing shader: " + batchShader.getLog());
 		}
 
-		DefaultShader.ignoreUnimplemented = true;
 		ObjLoader objLoader = new ObjLoader();
 		scene = objLoader.loadObj(Gdx.files.internal("data/scene.obj"));
 		sceneInstance = new ModelInstance(scene);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
Patch:
@@ -91,7 +91,6 @@ public static Model createSimpleModel(final VertexAttribute[] attributes, final
 	public void create () {
 		init();
 		modelBatch = new ModelBatch();
-		DefaultShader.ignoreUnimplemented = true;
 		
 		world = createWorld();
 		world.performanceCounter = performanceCounter;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BatchRenderTest.java
Patch:
@@ -48,8 +48,6 @@ public class BatchRenderTest extends GdxTest {
 	
 	@Override
 	public void create () {
-		DefaultShader.ignoreUnimplemented = true;
-		
 		final JsonModelLoader loader = new JsonModelLoader();
 
 		// need more higher resolution textures for this test...

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/NewModelTest.java
Patch:
@@ -38,7 +38,6 @@ public void create () {
 		model = new Model(loader.parseModel(Gdx.files.internal("data/g3d/cubes.g3dj")));
 		instance = new ModelInstance(model);
 		modelBatch = new ModelBatch();
-		DefaultShader.ignoreUnimplemented = true;
 		shapeRenderer = new ShapeRenderer();
 		
 		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java
Patch:
@@ -30,7 +30,7 @@
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g3d.ModelBatch;
 import com.badlogic.gdx.graphics.g3d.RenderableProvider;
-import com.badlogic.gdx.graphics.g3d.test.TestShader;
+import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Matrix3;
 import com.badlogic.gdx.math.Matrix4;
@@ -78,7 +78,7 @@ public Renderer () {
 		try {
 			spriteBatch = new SpriteBatch();
 			modelBatch = new ModelBatch();
-			TestShader.ignoreUnimplemented = true;
+			DefaultShader.ignoreUnimplemented = true;
 
 			backgroundTexture = new Texture(Gdx.files.internal("data/planet.jpg"), Format.RGB565, true);
 			backgroundTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);

File: gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.g3d.test.Light;
 import com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter;
 import com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider;
 import com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder;

File: gdx/src/com/badlogic/gdx/graphics/g3d/Renderable.java
Patch:
@@ -4,7 +4,6 @@
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.graphics.g3d.model.Node;
-import com.badlogic.gdx.graphics.g3d.test.Light;
 import com.badlogic.gdx.math.Matrix4;
 
 /**

File: gdx/src/com/badlogic/gdx/graphics/g3d/shaders/GLES10Shader.java
Patch:
@@ -1,11 +1,12 @@
-package com.badlogic.gdx.graphics.g3d.test;
+package com.badlogic.gdx.graphics.g3d.shaders;
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Camera;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.g3d.Light;
 import com.badlogic.gdx.graphics.g3d.Renderable;
 import com.badlogic.gdx.graphics.g3d.Shader;
 import com.badlogic.gdx.graphics.g3d.materials.BlendingAttribute;

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultShaderProvider.java
Patch:
@@ -4,8 +4,8 @@
 import com.badlogic.gdx.graphics.g3d.Renderable;
 import com.badlogic.gdx.graphics.g3d.Shader;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.test.GLES10Shader;
-import com.badlogic.gdx.graphics.g3d.test.TestShader;
+import com.badlogic.gdx.graphics.g3d.shaders.GLES10Shader;
+import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
 import com.badlogic.gdx.utils.Array;
 
 public class DefaultShaderProvider extends BaseShaderProvider {
@@ -15,7 +15,7 @@ public class DefaultShaderProvider extends BaseShaderProvider {
 	protected Shader createShader(final Renderable renderable) {
 		Gdx.app.log("DefaultShaderProvider", "Creating new shader");
 		if (Gdx.graphics.isGL20Available())
-			return new TestShader(renderable.material, renderable.lights == null ? -1 : maxLightsCount);
+			return new DefaultShader(renderable.material, renderable.lights == null ? -1 : maxLightsCount);
 		return new GLES10Shader(maxLightsCount);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/CullTest.java
Patch:
@@ -37,7 +37,7 @@
 import com.badlogic.gdx.graphics.g3d.ModelInstance;
 import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.test.TestShader;
+import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
 import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Vector3;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/EdgeDetectionTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.badlogic.gdx.graphics.g3d.ModelBatch;
 import com.badlogic.gdx.graphics.g3d.ModelInstance;
 import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
-import com.badlogic.gdx.graphics.g3d.test.TestShader;
+import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
 import com.badlogic.gdx.graphics.glutils.FrameBuffer;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Matrix4;
@@ -72,7 +72,7 @@ public void create () {
 			Gdx.app.log("EdgeDetectionTest", "couldn't compile post-processing shader: " + batchShader.getLog());
 		}
 
-		TestShader.ignoreUnimplemented = true;
+		DefaultShader.ignoreUnimplemented = true;
 		ObjLoader objLoader = new ObjLoader();
 		scene = objLoader.loadObj(Gdx.files.internal("data/scene.obj"));
 		sceneInstance = new ModelInstance(scene);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
Patch:
@@ -26,6 +26,7 @@
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
+import com.badlogic.gdx.graphics.g3d.Light;
 import com.badlogic.gdx.graphics.g3d.Model;
 import com.badlogic.gdx.graphics.g3d.ModelBatch;
 import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
@@ -37,8 +38,7 @@
 import com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart;
 import com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPartMaterial;
 import com.badlogic.gdx.graphics.g3d.model.data.ModelNode;
-import com.badlogic.gdx.graphics.g3d.test.Light;
-import com.badlogic.gdx.graphics.g3d.test.TestShader;
+import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
 import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Quaternion;
@@ -91,7 +91,7 @@ public static Model createSimpleModel(final VertexAttribute[] attributes, final
 	public void create () {
 		init();
 		modelBatch = new ModelBatch();
-		TestShader.ignoreUnimplemented = true;
+		DefaultShader.ignoreUnimplemented = true;
 		
 		world = createWorld();
 		world.performanceCounter = performanceCounter;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseWorld.java
Patch:
@@ -20,9 +20,9 @@
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.g3d.Light;
 import com.badlogic.gdx.graphics.g3d.Model;
 import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.test.Light;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletWorld.java
Patch:
@@ -16,8 +16,8 @@
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.g3d.Light;
 import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.test.Light;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.WindowedMean;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BatchRenderTest.java
Patch:
@@ -6,13 +6,13 @@
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.g3d.Light;
 import com.badlogic.gdx.graphics.g3d.Model;
 import com.badlogic.gdx.graphics.g3d.ModelBatch;
 import com.badlogic.gdx.graphics.g3d.ModelInstance;
 import com.badlogic.gdx.graphics.g3d.loader.JsonModelLoader;
 import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
-import com.badlogic.gdx.graphics.g3d.test.Light;
-import com.badlogic.gdx.graphics.g3d.test.TestShader;
+import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
 import com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
@@ -48,7 +48,7 @@ public class BatchRenderTest extends GdxTest {
 	
 	@Override
 	public void create () {
-		TestShader.ignoreUnimplemented = true;
+		DefaultShader.ignoreUnimplemented = true;
 		
 		final JsonModelLoader loader = new JsonModelLoader();
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/NewModelTest.java
Patch:
@@ -4,12 +4,12 @@
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
+import com.badlogic.gdx.graphics.g3d.Light;
 import com.badlogic.gdx.graphics.g3d.Model;
 import com.badlogic.gdx.graphics.g3d.ModelBatch;
 import com.badlogic.gdx.graphics.g3d.ModelInstance;
 import com.badlogic.gdx.graphics.g3d.loader.JsonModelLoader;
-import com.badlogic.gdx.graphics.g3d.test.Light;
-import com.badlogic.gdx.graphics.g3d.test.TestShader;
+import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
 import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
 import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
 import com.badlogic.gdx.math.Matrix4;
@@ -38,7 +38,7 @@ public void create () {
 		model = new Model(loader.parseModel(Gdx.files.internal("data/g3d/cubes.g3dj")));
 		instance = new ModelInstance(model);
 		modelBatch = new ModelBatch();
-		TestShader.ignoreUnimplemented = true;
+		DefaultShader.ignoreUnimplemented = true;
 		shapeRenderer = new ShapeRenderer();
 		
 		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -183,6 +183,7 @@ public Joint createJoint (JointDef def) {
 	/** Destroy a joint. This may cause the connected bodies to begin colliding.
 	 * @warning This function is locked during callbacks. */
 	public void destroyJoint (Joint joint) {
+		joint.setUserData(null);
 		world.destroyJoint(joint.joint);
 		joints.remove(joint.joint);
 	}

File: gdx/src/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -580,6 +580,7 @@ private native long jniCreateWeldJoint (long addr, long bodyA, long bodyB, boole
 	/** Destroy a joint. This may cause the connected bodies to begin colliding.
 	 * @warning This function is locked during callbacks. */
 	public void destroyJoint (Joint joint) {
+		joint.setUserData(null);
 		joints.remove(joint.addr);
 		joint.jointEdgeA.other.joints.remove(joint.jointEdgeB);
 		joint.jointEdgeB.other.joints.remove(joint.jointEdgeA);

File: gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java
Patch:
@@ -94,7 +94,7 @@ public void render(final Renderable renderable) {
 	 * Calls {@link RenderableProvider#getRenderables(Array, Pool)} and adds
 	 * all returned {@link Renderable} instances to the current batch to be
 	 * rendered.
-	 * @param renderableProviders the renderable provider
+	 * @param renderableProvider the renderable provider
 	 */
 	public void render(final RenderableProvider renderableProvider) {
 		render(renderableProvider, null, null);
@@ -115,8 +115,8 @@ public <T extends RenderableProvider> void render(final Iterable<T> renderablePr
 	 * all returned {@link Renderable} instances to the current batch to be
 	 * rendered. Any lights set on the returned renderables will be replaced
 	 * with the given lights
+	 * @param renderableProvider the renderable provider
 	 * @param lights the lights to use for the renderables
-	 * @param renderableProviders the renderable provider
 	 */
 	public void render(final RenderableProvider renderableProvider, final Light[] lights) {
 		render(renderableProvider, lights, null);
@@ -139,8 +139,8 @@ public <T extends RenderableProvider> void render(final Iterable<T> renderablePr
 	 * all returned {@link Renderable} instances to the current batch to be
 	 * rendered. Any shaders set on the returned renderables will be replaced
 	 * with the given {@link Shader}.
+	 * @param renderableProvider the renderable provider
 	 * @param shader the shader to use for the renderables
-	 * @param renderableProviders the renderable provider
 	 */
 	public void render(final RenderableProvider renderableProvider, final Shader shader) {
 		render(renderableProvider, null, shader);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ExternalMusicTest.java
Patch:
@@ -28,7 +28,7 @@ public class ExternalMusicTest extends GdxTest {
 	@Override
 	public void create () {
 		// copy an internal mp3 to the external storage
-		FileHandle src = Gdx.files.internal("data/iron.mp3");
+		FileHandle src = Gdx.files.internal("data/8.12.mp3");
 		FileHandle dst = Gdx.files.external("8.12.mp3");
 		src.copyTo(dst);
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java
Patch:
@@ -7,6 +7,8 @@
 import com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider;
 import com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder;
 import com.badlogic.gdx.graphics.g3d.utils.RenderContext;
+import com.badlogic.gdx.graphics.g3d.utils.RenderableSorter;
+import com.badlogic.gdx.graphics.g3d.utils.ShaderProvider;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultRenderableSorter.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.Comparator;
 
 import com.badlogic.gdx.graphics.g3d.Renderable;
-import com.badlogic.gdx.graphics.g3d.RenderableSorter;
 import com.badlogic.gdx.graphics.g3d.materials.BlendingAttribute;
 import com.badlogic.gdx.utils.Array;
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultShaderProvider.java
Patch:
@@ -3,7 +3,6 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.g3d.Renderable;
 import com.badlogic.gdx.graphics.g3d.Shader;
-import com.badlogic.gdx.graphics.g3d.ShaderProvider;
 import com.badlogic.gdx.graphics.g3d.materials.NewMaterial;
 import com.badlogic.gdx.graphics.g3d.test.TestShader;
 import com.badlogic.gdx.utils.Array;

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/RenderableSorter.java
Patch:
@@ -1,5 +1,6 @@
-package com.badlogic.gdx.graphics.g3d;
+package com.badlogic.gdx.graphics.g3d.utils;
 
+import com.badlogic.gdx.graphics.g3d.Renderable;
 import com.badlogic.gdx.utils.Array;
 
 /**

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/ShaderProvider.java
Patch:
@@ -1,5 +1,7 @@
-package com.badlogic.gdx.graphics.g3d;
+package com.badlogic.gdx.graphics.g3d.utils;
 
+import com.badlogic.gdx.graphics.g3d.Renderable;
+import com.badlogic.gdx.graphics.g3d.Shader;
 import com.badlogic.gdx.graphics.g3d.materials.NewMaterial;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/model/Node.java
Patch:
@@ -16,11 +16,11 @@
  */
 public class Node {
 	/** the id, may be null, FIXME is this unique? **/
-	public String id;
+	public String id = null;
 	/** bone id, -1 if this is not a bone, used for skinning **/
 	public int boneId = -1;
 	/** parent node, may be null **/
-	public Node parent;
+	public Node parent = null;
 	/** child nodes **/
 	public final Array<Node> children = new Array<Node>(2);
 	

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java
Patch:
@@ -53,7 +53,7 @@ public class BulletTestCollection extends GdxTest implements InputProcessor, Ges
 	protected final BulletTest[] tests = {new ShootTest(), new KinematicTest(), new ConstraintsTest(), 
 		new MeshShapeTest(), new ConvexHullTest(), new RayCastTest(), new RayPickRagdollTest(), new InternalTickTest(), 
 		new CollisionWorldTest(), new CollisionTest(), new FrustumCullingTest(), new ContactCallbackTest(),
-		new SoftBodyTest(), new SoftMeshTest()};
+		new SoftBodyTest()};//, new SoftMeshTest()};
 	
 	protected int testIndex = 0;
 	

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseEntity.java
Patch:
@@ -38,9 +38,9 @@ public void setColor (Color color) {
 		setColor(color.r, color.g, color.b, color.a);
 	}
 	public void setColor (float r, float g, float b, float a) {
+		color.set(r, g, b, a);
 		if (modelInstance != null) {
-			NewMaterial m = modelInstance.materials.get(0);
-			if (m != null) {
+			for (NewMaterial m : modelInstance.materials) {
 				ColorAttribute ca = (ColorAttribute)m.get(ColorAttribute.Diffuse);
 				if (ca != null)
 					ca.color.set(r, g, b, a);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullTest.java
Patch:
@@ -35,11 +35,11 @@ public void create () {
 
 		// Create the entities
 		world.add("ground", 0f, 0f, 0f)
-			.getColor().set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 		
 		for (float y = 10f; y < 50f; y += 5f)
 			world.add("car", -2f+(float)Math.random()*4f, y, -2f+(float)Math.random()*4f)
-				.getColor().set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+				.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 	}
 	
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/InternalTickTest.java
Patch:
@@ -64,13 +64,13 @@ public void create () {
 
 		// Create the entities
 		world.add("ground", 0f, 0f, 0f)
-			.getColor().set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 
 		for (int x = 0; x < BOXCOUNT_X; x++) {
 			for (int y = 0; y < BOXCOUNT_Y; y++) {
 				for (int z = 0; z < BOXCOUNT_Z; z++) {
 					world.add("box", BOXOFFSET_X + x, BOXOFFSET_Y + y, BOXOFFSET_Z + z)
-						.getColor().set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+						.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 				}
 			}
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayCastTest.java
Patch:
@@ -49,13 +49,13 @@ public void create () {
 
 		// Create the entities
 		world.add("ground", -7f, 0f, -7f)
-			.getColor().set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 
 		for (int x = 0; x < BOXCOUNT_X; x++) {
 			for (int y = 0; y < BOXCOUNT_Y; y++) {
 				for (int z = 0; z < BOXCOUNT_Z; z++) {
 					world.add("box", BOXOFFSET_X + x, BOXOFFSET_Y + y, BOXOFFSET_Z + z)
-						.getColor().set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+						.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 				}
 			}
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftMeshTest.java
Patch:
@@ -67,7 +67,7 @@ public void create () {
 		world.maxSubSteps = 20;
 		
 		world.add("ground", 0f, 0f, 0f)
-		.getColor().set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+		.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 		
 		// Note: not every model is suitable for a one on one translation with a soft body, a better model might be added later.
 		final StillModel model = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/wheel.obj"));

File: gdx/src/com/badlogic/gdx/graphics/g3d/Renderable.java
Patch:
@@ -1,5 +1,6 @@
 package com.badlogic.gdx.graphics.g3d;
 
+import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.g3d.materials.NewMaterial;
 import com.badlogic.gdx.graphics.g3d.model.Node;
@@ -13,7 +14,7 @@
  * a {@link NewMaterial} to be applied to the mesh.</p>
  * 
  * Renderables can be rendered via a {@link ModelBatch}, either directly, or by passing a
- * {@link Model} to the RenderBatch. A Model returns all Renderables via its {@link Model#getRenderables(com.badlogic.gdx.utils.Array, com.badlogic.gdx.utils.Pool)} method.
+ * {@link ModelInstance} to the RenderBatch. A Model returns all Renderables via its {@link ModelInstance#getRenderables(com.badlogic.gdx.utils.Array, com.badlogic.gdx.utils.Pool)} method.
  * @author badlogic
  *
  */

File: gdx/src/com/badlogic/gdx/graphics/g3d/RenderableSorter.java
Patch:
@@ -3,7 +3,7 @@
 import com.badlogic.gdx.utils.Array;
 
 /**
- * Responsible for sorting {@link RenderInstance} lists by whatever criteria (material, distance to camera, etc.)
+ * Responsible for sorting {@link Renderable} lists by whatever criteria (material, distance to camera, etc.)
  * @author badlogic
  *
  */

File: gdx/src/com/badlogic/gdx/graphics/g3d/test/TestShader.java
Patch:
@@ -44,7 +44,7 @@ public final static String getDefaultFragmentShader() {
 	protected int normalTransLoc;
 	protected int diffuseTextureLoc;
 	protected int diffuseColorLoc;
-	protected int lightsCount = 5;
+	public static int lightsCount = 5;
 	protected int lightsLoc;
 	protected int lightSize;
 	protected int lightPositionOffset;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.tests.AnimationTest;
+import com.badlogic.gdx.tests.BulletTestCollection;
 import com.badlogic.gdx.tests.ETC1Test;
 import com.badlogic.gdx.tests.FullscreenTest;
 import com.badlogic.gdx.tests.InputTest;
@@ -46,7 +47,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
 		
-		GdxTest test = new NewModelTest();
+		GdxTest test = new BulletTestCollection();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/FrustumCullingTest.java
Patch:
@@ -223,7 +223,7 @@ protected void renderWorld () {
 				final BulletEntity e = world.entities.get(i);
 				if (e == frustumEntity)
 					continue;
-				e.transform.getTranslation(tmpV);
+				e.modelInstance.transform.getTranslation(tmpV);
 				if (frustumCam.frustum.sphereInFrustum(tmpV, 1))
 					visibleEntities.add(e);
 			}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/JsonModelLoaderTest.java
Patch:
@@ -21,7 +21,6 @@ public class JsonModelLoaderTest extends GdxTest {
 	@Override
 	public void create () {
 		JsonModelLoader loader = new JsonModelLoader();
-		com.badlogic.gdx.graphics.g3d.Model model2 = new com.badlogic.gdx.graphics.g3d.Model(loader.parseModel(Gdx.files.internal("data/g3d/head2.g3dj"),  null));
 		model = loader.load(Gdx.files.internal("data/g3d/head2.g3dj"), null);
 		
 		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());

File: gdx/src/com/badlogic/gdx/graphics/g3d/Shader.java
Patch:
@@ -2,8 +2,9 @@
 
 import com.badlogic.gdx.graphics.Camera;
 import com.badlogic.gdx.graphics.g3d.utils.RenderContext;
+import com.badlogic.gdx.utils.Disposable;
 
-public interface Shader {
+public interface Shader extends Disposable {
 	int compareTo(Shader other); // TODO: probably better to add some weight value to sort on
 	boolean canRender(Renderable instance);
 	void begin(Camera camera, RenderContext context);

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultShaderProvider.java
Patch:
@@ -33,5 +33,8 @@ protected Shader createShader(final NewMaterial material) {
 
 	@Override
 	public void dispose () {
+		for(Shader shader: shaders) {
+			shader.dispose();
+		}
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/g3d/RenderBatchAdapter.java
Patch:
@@ -5,7 +5,7 @@
 import com.badlogic.gdx.graphics.g3d.materials.NewMaterial;
 import com.badlogic.gdx.graphics.g3d.old.materials.Material;
 import com.badlogic.gdx.graphics.g3d.test.TestShader;
-import com.badlogic.gdx.graphics.g3d.utils.ExclusiveTextures;
+import com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder;
 import com.badlogic.gdx.utils.Array;
 
 public class RenderBatchAdapter implements RenderBatchListener {

File: gdx/src/com/badlogic/gdx/graphics/g3d/Renderable.java
Patch:
@@ -7,8 +7,7 @@
 import com.badlogic.gdx.math.Matrix4;
 
 /**
- * A renderable encapsulates all necessary information to render a {@link Node} within
- * a {@link Model}. A renderable defines a world {@link #transform}, the {@link Mesh} to render
+ * A renderable defines a world {@link #transform}, the {@link Mesh} to render
  * along with the offset into the mesh's indices and the number of indices to use plus the
  * primitive type to render the part of the mesh with. Finally, a renderable defines
  * a {@link NewMaterial} to be applied to the mesh.</p>

File: gdx/src/com/badlogic/gdx/graphics/g3d/Shader.java
Patch:
@@ -7,6 +7,7 @@
 import com.badlogic.gdx.graphics.g3d.old.materials.Material;
 import com.badlogic.gdx.graphics.g3d.test.Light;
 import com.badlogic.gdx.graphics.g3d.test.NewModel;
+import com.badlogic.gdx.graphics.g3d.utils.RenderContext;
 import com.badlogic.gdx.math.Matrix4;
 
 public interface Shader extends Comparator<RenderInstance> {

File: gdx/src/com/badlogic/gdx/graphics/g3d/test/TestShader.java
Patch:
@@ -5,15 +5,15 @@
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.RenderContext;
 import com.badlogic.gdx.graphics.g3d.RenderInstance;
 import com.badlogic.gdx.graphics.g3d.Renderable;
 import com.badlogic.gdx.graphics.g3d.Shader;
 import com.badlogic.gdx.graphics.g3d.materials.BlendingAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.NewMaterial;
 import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
-import com.badlogic.gdx.graphics.g3d.utils.ExclusiveTextures;
+import com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder;
+import com.badlogic.gdx.graphics.g3d.utils.RenderContext;
 import com.badlogic.gdx.graphics.g3d.utils.RenderInstancePool;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Matrix3;
@@ -230,7 +230,7 @@ else if (TextureAttribute.is(t)) {
 	/////// bindTextureAttribute /////////
 	TextureAttribute currentTextureAttribute;
 	private final void bindTextureAttribute(final int uniform, final TextureAttribute attribute) {
-		final int unit = context.textures.bindTexture(attribute.textureDescription);
+		final int unit = context.textureBinder.bind(attribute.textureDescription);
 		program.setUniformi(uniform, unit);
 		currentTextureAttribute = attribute;
 	}

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,7 +21,6 @@
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.tests.AnimationTest;
 import com.badlogic.gdx.tests.ETC1Test;
-import com.badlogic.gdx.tests.FreeTypeDisposeTest;
 import com.badlogic.gdx.tests.FullscreenTest;
 import com.badlogic.gdx.tests.InputTest;
 import com.badlogic.gdx.tests.SpriteCacheTest;
@@ -47,7 +46,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
 		
-		GdxTest test = new FreeTypeDisposeTest();
+		GdxTest test = new NewModelTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/NewModelTest.java
Patch:
@@ -80,8 +80,8 @@ public boolean touchDown (int x, int y, int pointer, int newParam) {
 
 	@Override
 	public boolean touchDragged (int x, int y, int pointer) {
+		cam.rotateAround(new Vector3(), Vector3.X, y - touchStartY);
 		cam.rotateAround(new Vector3(), Vector3.Y, x - touchStartX);
-//		cam.rotateAround(new Vector3(), Vector3.X, y - touchStartY);
 		touchStartX = x;
 		touchStartY = y;
 		return false;

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -76,7 +76,9 @@ public FreeTypeFontGenerator (FileHandle font) {
 	 * @param flip whether to flip the font horizontally, see {@link BitmapFont#BitmapFont(FileHandle, TextureRegion, boolean)} */
 	public BitmapFont generateFont (int size, String characters, boolean flip) {
 		FreeTypeBitmapFontData data = generateData(size, characters, flip);
-		return new BitmapFont(data, data.getTextureRegion(), false);
+		BitmapFont font = new BitmapFont(data, data.getTextureRegion(), false);
+		font.setOwnsTexture(true);
+		return font;
 	}
 
 	/** Generates a new {@link BitmapFont}. The size is expressed in pixels. Throws a GdxRuntimeException in case the font could not

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -76,7 +76,9 @@ public FreeTypeFontGenerator (FileHandle font) {
 	 * @param flip whether to flip the font horizontally, see {@link BitmapFont#BitmapFont(FileHandle, TextureRegion, boolean)} */
 	public BitmapFont generateFont (int size, String characters, boolean flip) {
 		FreeTypeBitmapFontData data = generateData(size, characters, flip);
-		return new BitmapFont(data, data.getTextureRegion(), false);
+		BitmapFont font = new BitmapFont(data, data.getTextureRegion(), false);
+		font.setOwnsTexture(true);
+		return font;
 	}
 
 	/** Generates a new {@link BitmapFont}. The size is expressed in pixels. Throws a GdxRuntimeException in case the font could not

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,6 +21,7 @@
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.tests.AnimationTest;
 import com.badlogic.gdx.tests.ETC1Test;
+import com.badlogic.gdx.tests.FreeTypeDisposeTest;
 import com.badlogic.gdx.tests.FullscreenTest;
 import com.badlogic.gdx.tests.InputTest;
 import com.badlogic.gdx.tests.SpriteCacheTest;
@@ -31,6 +32,7 @@
 import com.badlogic.gdx.tests.bench.TiledMapBench;
 import com.badlogic.gdx.tests.g3d.BatchRenderTest;
 import com.badlogic.gdx.tests.g3d.JsonModelLoaderTest;
+import com.badlogic.gdx.tests.g3d.NewModelTest;
 import com.badlogic.gdx.tests.superkoalio.SuperKoalio;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
@@ -45,7 +47,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
 		
-		GdxTest test = new JsonModelLoaderTest();
+		GdxTest test = new FreeTypeDisposeTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -1040,7 +1040,7 @@ public static void main (String[] args) {
 		BoundingBox b2 = new BoundingBox(new Vector3(1, 1, 1), new Vector3(2, 2, 2));
 		System.out.println(b1.contains(Vector3.Zero)); // true
 		System.out.println(b1.contains(b1)); // true
-		System.out.println(b1.contains(b2)); // true, should be false?
+		System.out.println(b1.contains(b2)); // false
 
 		// Note, in stage the bottom and left sides are inclusive while the right and top sides are exclusive.
 	}

File: gdx/src/com/badlogic/gdx/math/Rectangle.java
Patch:
@@ -109,7 +109,7 @@ public void setHeight (float height) {
 	 * @param y point y coordinate
 	 * @return whether the point is contained in the rectangle */
 	public boolean contains (float x, float y) {
-		return this.x < x && this.x + this.width > x && this.y < y && this.y + this.height > y;
+		return this.x <= x && this.x + this.width >= x && this.y <= y && this.y + this.height >= y;
 	}
 
 	/** @param rectangle the other {@link Rectangle}.

File: gdx/src/com/badlogic/gdx/math/Circle.java
Patch:
@@ -63,7 +63,7 @@ public boolean overlaps (Circle c) {
 		float dy = y - c.y;
 		float distance = dx * dx + dy * dy;
 		float radiusSum = radius + c.radius;
-		return distance <= radiusSum * radiusSum;
+		return distance < radiusSum * radiusSum;
 	}
 
 	public String toString () {

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -1022,8 +1022,9 @@ public static void main (String[] args) {
 		Circle c2 = new Circle(0, 0, 1);
 		Circle c3 = new Circle(2, 0, 1);
 		Circle c4 = new Circle(0, 0, 2);
+		System.out.println(c1.overlaps(c1)); // true
 		System.out.println(c1.overlaps(c2)); // true
-		System.out.println(c1.overlaps(c3)); // true, should be false?
+		System.out.println(c1.overlaps(c3)); // false
 		System.out.println(c1.overlaps(c4)); // true
 		System.out.println(c4.overlaps(c1)); // true
 		System.out.println(c1.contains(0, 1)); // true, should be false?

File: extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/mappings/Ouya.java
Patch:
@@ -39,7 +39,8 @@ public class Ouya {
 		try {
 			Class<?> buildClass = Class.forName("android.os.Build");
 			Field deviceField = buildClass.getDeclaredField("DEVICE");
-			isOuya = "cardhu".equals(deviceField.get(null));
+			Object device = deviceField.get(null);
+			isOuya = "ouya_1_1".equals(device) || "cardhu".equals(device);
 		} catch(Exception e) {
 		}
 		runningOnOuya = isOuya;
@@ -88,4 +89,4 @@ public class Ouya {
 			AXIS_RIGHT_TRIGGER = 5;
 		}
 	}
-}
\ No newline at end of file
+}

File: gdx/src/com/badlogic/gdx/graphics/Camera.java
Patch:
@@ -111,8 +111,8 @@ public void normalizeUp () {
 	 * @param axisY the y-component of the axis
 	 * @param axisZ the z-component of the axis */
 	public void rotate (float angle, float axisX, float axisY, float axisZ) {
-		direction.rotate(axisX, axisY, axisZ, angle);
-		up.rotate(axisX, axisY, axisZ, angle);
+		direction.rotate(angle, axisX, axisY, axisZ);
+		up.rotate(angle, axisX, axisY, axisZ);
 	}
 
 	/** Rotates the direction and up vector of this camera by the given angle around the given axis. The direction and up vector

File: gdx/src/com/badlogic/gdx/graphics/Camera.java
Patch:
@@ -111,8 +111,8 @@ public void normalizeUp () {
 	 * @param axisY the y-component of the axis
 	 * @param axisZ the z-component of the axis */
 	public void rotate (float angle, float axisX, float axisY, float axisZ) {
-		direction.rotate(axisX, axisY, axisZ, angle);
-		up.rotate(axisX, axisY, axisZ, angle);
+		direction.rotate(angle, axisX, axisY, axisZ);
+		up.rotate(angle, axisX, axisY, axisZ);
 	}
 
 	/** Rotates the direction and up vector of this camera by the given angle around the given axis. The direction and up vector

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphicsLiveWallpaper.java
Patch:
@@ -527,6 +527,7 @@ void resume () {
 		}
 	}
 
+	// jw: never called on lvp, why? see description in AndroidLiveWallpaper.onPause
 	void pause () {
 		synchronized (synch) {
 			if (!running) return;
@@ -543,6 +544,7 @@ void pause () {
 		}
 	}
 
+	// jw: never called on lvp
 	void destroy () {
 		synchronized (synch) {
 			running = false;

File: demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/elements/BumperElement.java
Patch:
@@ -63,7 +63,7 @@ Vector2 impulseForBall (Body ball) {
 	public void handleCollision (Body ball, Body bodyHit, Field field) {
 		Vector2 impulse = this.impulseForBall(ball);
 		if (impulse != null) {
-			ball.applyLinearImpulse(impulse, ball.getWorldCenter());
+			ball.applyLinearImpulse(impulse, ball.getWorldCenter(), true);
 			flashForFrames(3);
 		}
 	}

File: demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/elements/WallElement.java
Patch:
@@ -110,7 +110,7 @@ public void handleCollision (Body ball, Body bodyHit, Field field) {
 		} else {
 			Vector2 impulse = this.impulseForBall(ball);
 			if (impulse != null) {
-				ball.applyLinearImpulse(impulse, ball.getWorldCenter());
+				ball.applyLinearImpulse(impulse, ball.getWorldCenter(), true);
 				flashForFrames(3);
 			}
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/ApplyForce.java
Patch:
@@ -168,10 +168,10 @@ public boolean keyDown (int keyCode) {
 		if (keyCode == Keys.W) {
 			Vector2 f = m_body.getWorldVector(tmp.set(0, -200));
 			Vector2 p = m_body.getWorldPoint(tmp.set(0, 2));
-			m_body.applyForce(f, p);
+			m_body.applyForce(f, p, true);
 		}
-		if (keyCode == Keys.A) m_body.applyTorque(50);
-		if (keyCode == Keys.D) m_body.applyTorque(-50);
+		if (keyCode == Keys.A) m_body.applyTorque(50, true);
+		if (keyCode == Keys.D) m_body.applyTorque(-50, true);
 
 		return false;
 	}

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/ImageProcessor.java
Patch:
@@ -112,7 +112,7 @@ public void addImage (File file) {
 			Rect existing = crcs.get(crc);
 			if (existing != null) {
 				System.out.println(rect.name + " (alias of " + existing.name + ")");
-				existing.aliases.add(rect);
+				existing.aliases.add(rect.name);
 				return;
 			}
 			crcs.put(crc, rect);

File: gdx/src/com/badlogic/gdx/net/NetJavaImpl.java
Patch:
@@ -157,14 +157,13 @@ public void run () {
 
 						connection.connect();
 
+						final HttpClientResponse clientResponse = new HttpClientResponse(connection);
 						// post a runnable to sync the handler with the main thread
 						Gdx.app.postRunnable(new Runnable() {
 							@Override
 							public void run () {
 								try {
-									httpResponseListener.handleHttpResponse(new HttpClientResponse(connection));
-								} catch (IOException e) {
-									httpResponseListener.failed(e);
+									httpResponseListener.handleHttpResponse(clientResponse);
 								} finally {
 									connection.disconnect();
 								}

File: gdx/src/com/badlogic/gdx/graphics/g3d/DefaultShader.java
Patch:
@@ -1,7 +1,7 @@
-package com.badlogic.gdx.graphics.g3d.xoppa;
+package com.badlogic.gdx.graphics.g3d;
 
-import com.badlogic.gdx.graphics.g3d.xoppa.test.TestShader;
-import com.badlogic.gdx.graphics.g3d.xoppa.utils.ExclusiveTextures;
+import com.badlogic.gdx.graphics.g3d.test.TestShader;
+import com.badlogic.gdx.graphics.g3d.utils.ExclusiveTextures;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 
 public class DefaultShader extends TestShader {

File: gdx/src/com/badlogic/gdx/graphics/g3d/RenderBatchListener.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.graphics.g3d.xoppa;
+package com.badlogic.gdx.graphics.g3d;
 
 import java.util.Comparator;
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/RenderContext.java
Patch:
@@ -1,8 +1,8 @@
-package com.badlogic.gdx.graphics.g3d.xoppa;
+package com.badlogic.gdx.graphics.g3d;
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.g3d.xoppa.utils.ExclusiveTextures;
+import com.badlogic.gdx.graphics.g3d.utils.ExclusiveTextures;
 
 public class RenderContext {
 	public final ExclusiveTextures textures;

File: gdx/src/com/badlogic/gdx/graphics/g3d/Renderable.java
Patch:
@@ -1,7 +1,7 @@
-package com.badlogic.gdx.graphics.g3d.xoppa;
+package com.badlogic.gdx.graphics.g3d;
 
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.xoppa.materials.NewMaterial;
+import com.badlogic.gdx.graphics.g3d.materials.NewMaterial;
 
 public class Renderable {
 	public Mesh mesh;

File: gdx/src/com/badlogic/gdx/graphics/g3d/loader/JsonTexture.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.graphics.g3d.loaders.json;
+package com.badlogic.gdx.graphics.g3d.loader;
 
 import com.badlogic.gdx.math.Vector2;
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/materials/NewMaterial.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.graphics.g3d.xoppa.materials;
+package com.badlogic.gdx.graphics.g3d.materials;
 
 import java.util.Comparator;
 import java.util.Iterator;

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/AnimatedModelInstance.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d;
+package com.badlogic.gdx.graphics.g3d.old;
 
 public interface AnimatedModelInstance extends StillModelInstance {
 	public String getAnimation ();

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/AnimatedModelNode.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d;
+package com.badlogic.gdx.graphics.g3d.old;
 
-import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.graphics.g3d.old.materials.Material;
 
 public class AnimatedModelNode extends StillModelNode implements AnimatedModelInstance {
 	public String animation;

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/ModelLoaderHints.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d;
+package com.badlogic.gdx.graphics.g3d.old;
 
-import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.old.loaders.ModelLoaderRegistry;
 
 /** Hints passed to a loader which might ignore them. See {@link ModelLoaderRegistry}.
  * @author mzechner */

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/ModelRenderer.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d;
+package com.badlogic.gdx.graphics.g3d.old;
 
-import com.badlogic.gdx.graphics.g3d.model.AnimatedModel;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.model.AnimatedModel;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
 
 public interface ModelRenderer {
 	public void begin ();

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/StillModelInstance.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d;
+package com.badlogic.gdx.graphics.g3d.old;
 
-import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.graphics.g3d.old.materials.Material;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/StillModelNode.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d;
+package com.badlogic.gdx.graphics.g3d.old;
 
-import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.graphics.g3d.old.materials.Material;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/loaders/KeyframedModelLoader.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.loaders;
+package com.badlogic.gdx.graphics.g3d.old.loaders;
 
 import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.g3d.ModelLoaderHints;
-import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedModel;
+import com.badlogic.gdx.graphics.g3d.old.ModelLoaderHints;
+import com.badlogic.gdx.graphics.g3d.old.model.keyframe.KeyframedModel;
 
 /** Interface for classes loading {@link KeyframedModel} instances.
  * @author mzechner */

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/loaders/ModelLoader.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.loaders;
+package com.badlogic.gdx.graphics.g3d.old.loaders;
 
 import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.g3d.ModelLoaderHints;
-import com.badlogic.gdx.graphics.g3d.model.Model;
+import com.badlogic.gdx.graphics.g3d.old.ModelLoaderHints;
+import com.badlogic.gdx.graphics.g3d.old.model.Model;
 
 /** Interface for all loaders. Loaders that need more files need to derrive the other file names by the given file. A bit of a
  * hack, but most formats are self contained.

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/loaders/SkeletonModelLoader.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.loaders;
+package com.badlogic.gdx.graphics.g3d.old.loaders;
 
 import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.g3d.ModelLoaderHints;
-import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonModel;
+import com.badlogic.gdx.graphics.g3d.old.ModelLoaderHints;
+import com.badlogic.gdx.graphics.g3d.old.model.skeleton.SkeletonModel;
 
 /** Interface for classes loading {@link SkeletonModel} instances.
  * @author mzechner */

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/loaders/StillModelLoader.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.loaders;
+package com.badlogic.gdx.graphics.g3d.old.loaders;
 
 import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.g3d.ModelLoaderHints;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.ModelLoaderHints;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
 
 /** Interface for loaders loading {@link StillModel} instances.
  * @author mzechner */

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/loaders/g3d/ChunkReader.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.loaders.g3d.chunks;
+package com.badlogic.gdx.graphics.g3d.old.loaders.g3d;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -26,7 +26,7 @@
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
-import static com.badlogic.gdx.graphics.g3d.loaders.g3d.G3dConstants.*;
+import static com.badlogic.gdx.graphics.g3d.old.loaders.g3d.G3dConstants.*;
 
 public class ChunkReader {
 	public static class Chunk {

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/loaders/g3d/ChunkWriter.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.loaders.g3d.chunks;
+package com.badlogic.gdx.graphics.g3d.old.loaders.g3d;
 
 import java.io.ByteArrayOutputStream;
 import java.io.DataOutputStream;
@@ -23,7 +23,7 @@
 
 import com.badlogic.gdx.utils.Array;
 
-import static com.badlogic.gdx.graphics.g3d.loaders.g3d.G3dConstants.*;
+import static com.badlogic.gdx.graphics.g3d.old.loaders.g3d.G3dConstants.*;
 
 public class ChunkWriter {
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/loaders/g3d/CountingDataInputStream.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.loaders.g3d.chunks;
+package com.badlogic.gdx.graphics.g3d.old.loaders.g3d;
 
 import java.io.DataInput;
 import java.io.DataInputStream;

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/loaders/g3d/G3dConstants.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.loaders.g3d;
+package com.badlogic.gdx.graphics.g3d.old.loaders.g3d;
 
 public class G3dConstants {
 	// Version info for file format

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/loaders/md2/MD2Frame.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.loaders.md2;
+package com.badlogic.gdx.graphics.g3d.old.loaders.md2;
 
 public class MD2Frame {
 	public float[] vertices;

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/loaders/md2/MD2Header.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.loaders.md2;
+package com.badlogic.gdx.graphics.g3d.old.loaders.md2;
 
 public class MD2Header {
 	public int ident;

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/loaders/md2/MD2Normals.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.loaders.md2;
+package com.badlogic.gdx.graphics.g3d.old.loaders.md2;
 
 public class MD2Normals {
 	public static float[][] normals = { {-0.525731f, 0.000000f, 0.850651f}, {-0.442863f, 0.238856f, 0.864188f},

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/loaders/md2/MD2Triangle.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.loaders.md2;
+package com.badlogic.gdx.graphics.g3d.old.loaders.md2;
 
 public class MD2Triangle {
 	public short[] vertices = new short[3];

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/materials/Material.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.materials;
+package com.badlogic.gdx.graphics.g3d.old.materials;
 
 import java.util.Iterator;
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/materials/MaterialAttribute.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.materials;
+package com.badlogic.gdx.graphics.g3d.old.materials;
 
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/model/AnimatedModel.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.model;
+package com.badlogic.gdx.graphics.g3d.old.model;
 
 public interface AnimatedModel extends Model {
 	/** Start playing the given animation at the given time in the animation and specify wether or not the animation will loop.

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/model/Animation.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.model;
+package com.badlogic.gdx.graphics.g3d.old.model;
 
 public class Animation {
 	public final String name;

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/model/Model.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.model;
+package com.badlogic.gdx.graphics.g3d.old.model;
 
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.graphics.g3d.old.materials.Material;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.collision.BoundingBox;
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/model/SubMesh.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.model;
+package com.badlogic.gdx.graphics.g3d.old.model;
 
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.graphics.g3d.old.materials.Material;
 import com.badlogic.gdx.math.collision.BoundingBox;
 
 public abstract class SubMesh {

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/model/keyframe/Keyframe.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.model.keyframe;
+package com.badlogic.gdx.graphics.g3d.old.model.keyframe;
 
 public class Keyframe {
 	public final float timeStamp;

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/model/keyframe/KeyframedAnimation.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.model.keyframe;
+package com.badlogic.gdx.graphics.g3d.old.model.keyframe;
 
-import com.badlogic.gdx.graphics.g3d.model.Animation;
+import com.badlogic.gdx.graphics.g3d.old.model.Animation;
 
 public class KeyframedAnimation extends Animation {
 	public final float frameDuration;

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/model/keyframe/KeyframedSubMesh.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.model.keyframe;
+package com.badlogic.gdx.graphics.g3d.old.model.keyframe;
 
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.model.SubMesh;
+import com.badlogic.gdx.graphics.g3d.old.model.SubMesh;
 import com.badlogic.gdx.math.collision.BoundingBox;
 import com.badlogic.gdx.utils.ObjectMap;
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/model/skeleton/Skeleton.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.model.skeleton;
+package com.badlogic.gdx.graphics.g3d.old.model.skeleton;
 
 import java.util.HashMap;
 import java.util.Map;

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/model/skeleton/SkeletonAnimation.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.model.skeleton;
+package com.badlogic.gdx.graphics.g3d.old.model.skeleton;
 
-import com.badlogic.gdx.graphics.g3d.model.Animation;
+import com.badlogic.gdx.graphics.g3d.old.model.Animation;
 
 public class SkeletonAnimation extends Animation {
 	public final SkeletonKeyframe[][] perJointkeyFrames;

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/model/skeleton/SkeletonJoint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.model.skeleton;
+package com.badlogic.gdx.graphics.g3d.old.model.skeleton;
 
 import com.badlogic.gdx.math.Quaternion;
 import com.badlogic.gdx.math.Vector3;

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/model/skeleton/SkeletonKeyframe.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.model.skeleton;
+package com.badlogic.gdx.graphics.g3d.old.model.skeleton;
 
 import com.badlogic.gdx.math.Quaternion;
 import com.badlogic.gdx.math.Vector3;

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/model/skeleton/SkeletonSubMesh.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.model.skeleton;
+package com.badlogic.gdx.graphics.g3d.old.model.skeleton;
 
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.model.SubMesh;
+import com.badlogic.gdx.graphics.g3d.old.model.SubMesh;
 import com.badlogic.gdx.math.collision.BoundingBox;
 
 public class SkeletonSubMesh extends SubMesh {

File: gdx/src/com/badlogic/gdx/graphics/g3d/old/model/still/StillSubMesh.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.graphics.g3d.model.still;
+package com.badlogic.gdx.graphics.g3d.old.model.still;
 
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.model.SubMesh;
+import com.badlogic.gdx.graphics.g3d.old.materials.Material;
+import com.badlogic.gdx.graphics.g3d.old.model.SubMesh;
 import com.badlogic.gdx.math.collision.BoundingBox;
 
 public class StillSubMesh extends SubMesh {

File: gdx/src/com/badlogic/gdx/graphics/g3d/test/Light.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.graphics.g3d.xoppa.test;
+package com.badlogic.gdx.graphics.g3d.test;
 
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.math.Vector3;

File: gdx/src/com/badlogic/gdx/graphics/g3d/test/OldBatchRenderer.java
Patch:
@@ -1,9 +1,9 @@
-package com.badlogic.gdx.graphics.g3d.xoppa.test;
+package com.badlogic.gdx.graphics.g3d.test;
 
 import java.util.Comparator;
 
 import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.g3d.xoppa.RenderInstance;
+import com.badlogic.gdx.graphics.g3d.RenderInstance;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.utils.Array;
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/Binder.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.graphics.g3d.xoppa.utils;
+package com.badlogic.gdx.graphics.g3d.utils;
 
 
 public class Binder {

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/ExclusiveTextures.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.graphics.g3d.xoppa.utils;
+package com.badlogic.gdx.graphics.g3d.utils;
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.GL10;

File: gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureDescription.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.graphics.g3d.xoppa.utils;
+package com.badlogic.gdx.graphics.g3d.utils;
 
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Texture;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -29,6 +29,8 @@
 import com.badlogic.gdx.tests.TiledMapAssetManagerTest;
 import com.badlogic.gdx.tests.TiledMapDirectLoaderTest;
 import com.badlogic.gdx.tests.bench.TiledMapBench;
+import com.badlogic.gdx.tests.g3d.BatchRenderTest;
+import com.badlogic.gdx.tests.g3d.JsonModelLoaderTest;
 import com.badlogic.gdx.tests.superkoalio.SuperKoalio;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
@@ -43,7 +45,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
 		
-		GdxTest test = new SuperKoalio();
+		GdxTest test = new BatchRenderTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/CullTest.java
Patch:
@@ -27,8 +27,8 @@
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.tests.utils.GdxTest;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/EdgeDetectionTest.java
Patch:
@@ -26,8 +26,8 @@
 import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
-import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
 import com.badlogic.gdx.graphics.glutils.FrameBuffer;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Matrix4;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FramebufferToTextureTest.java
Patch:
@@ -25,8 +25,8 @@
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
-import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.ScreenUtils;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FrustumTest.java
Patch:
@@ -23,8 +23,8 @@
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
 import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Frustum;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ObjTest.java
Patch:
@@ -22,8 +22,8 @@
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
-import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
 import com.badlogic.gdx.math.collision.BoundingBox;
 import com.badlogic.gdx.tests.utils.GdxTest;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PickingTest.java
Patch:
@@ -25,8 +25,8 @@
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
 import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.Intersector;
 import com.badlogic.gdx.math.Vector3;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectTest.java
Patch:
@@ -27,8 +27,8 @@
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
-import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.tests.utils.GdxTest;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
Patch:
@@ -27,8 +27,8 @@
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
 import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Matrix4;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ShadowMappingTest.java
Patch:
@@ -24,8 +24,8 @@
 import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
 import com.badlogic.gdx.graphics.glutils.FrameBuffer;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.scenes.scene2d.Actor;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
Patch:
@@ -24,9 +24,9 @@
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
-import com.badlogic.gdx.graphics.g3d.model.still.StillSubMesh;
+import com.badlogic.gdx.graphics.g3d.old.materials.Material;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillSubMesh;
 import com.badlogic.gdx.math.collision.Ray;
 import com.badlogic.gdx.physics.bullet.Bullet;
 import com.badlogic.gdx.physics.bullet.btIDebugDraw;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseEntity.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.model.Model;
+import com.badlogic.gdx.graphics.g3d.old.model.Model;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.utils.Disposable;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseWorld.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.model.Model;
+import com.badlogic.gdx.graphics.g3d.old.model.Model;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletConstructor.java
Patch:
@@ -16,7 +16,7 @@
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.model.Model;
+import com.badlogic.gdx.graphics.g3d.old.model.Model;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.BoundingBox;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletEntity.java
Patch:
@@ -16,7 +16,7 @@
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.model.Model;
+import com.badlogic.gdx.graphics.g3d.old.model.Model;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.physics.bullet.btCollisionObject;
 import com.badlogic.gdx.physics.bullet.btCollisionShape;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionWorldTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.g3d.model.Model;
+import com.badlogic.gdx.graphics.g3d.old.model.Model;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.physics.bullet.ContactResultCallback;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConstraintsTest.java
Patch:
@@ -21,9 +21,9 @@
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
-import com.badlogic.gdx.graphics.g3d.model.still.StillSubMesh;
+import com.badlogic.gdx.graphics.g3d.old.materials.Material;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillSubMesh;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.physics.bullet.btDiscreteDynamicsWorld;
 import com.badlogic.gdx.physics.bullet.btDynamicsWorld;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/MeshShapeTest.java
Patch:
@@ -17,8 +17,8 @@
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.BoundingBox;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftMeshTest.java
Patch:
@@ -21,9 +21,9 @@
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
-import com.badlogic.gdx.graphics.g3d.loaders.wavefront.ObjLoader;
-import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.old.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.old.loaders.wavefront.ObjLoader;
+import com.badlogic.gdx.graphics.g3d.old.model.still.StillModel;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.physics.bullet.Material;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/JsonModelLoaderTest.java
Patch:
@@ -3,8 +3,8 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
-import com.badlogic.gdx.graphics.g3d.loaders.json.JsonModelLoader;
-import com.badlogic.gdx.graphics.g3d.model.Model;
+import com.badlogic.gdx.graphics.g3d.loader.JsonModelLoader;
+import com.badlogic.gdx.graphics.g3d.old.model.Model;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class JsonModelLoaderTest extends GdxTest {
@@ -21,7 +21,7 @@ public class JsonModelLoaderTest extends GdxTest {
 	@Override
 	public void create () {
 		JsonModelLoader loader = new JsonModelLoader();
-		model = loader.load(Gdx.files.internal("data/g3d/head_parented.g3dj"), null);
+		model = loader.load(Gdx.files.internal("data/g3d/head.g3dj"), null);
 		
 		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam.position.set(1f, 1.5f, 1f);

File: gdx/src/com/badlogic/gdx/maps/tiled/TideMapLoader.java
Patch:
@@ -264,11 +264,11 @@ private void loadProperties(MapProperties properties, Element element) {
 				String value = property.getText();
 				
 				if (type.equals("Int32")) {
-					
+					properties.put(key, Integer.parseInt(value));
 				} else if (type.equals("String")) {
-					
+					properties.put(key, value);
 				} else if (type.equals("Boolean")) {
-					
+					properties.put(key, value.equalsIgnoreCase("true"));
 				} else {
 					properties.put(key, value);					
 				}

File: gdx/src/com/badlogic/gdx/maps/tiled/TideMapLoader.java
Patch:
@@ -182,7 +182,7 @@ private void loadTileSheet(TiledMap map, Element element, FileHandle tideFile, I
 				}
 			}
 			
-			Element properties = element.getChildByName("Proeprties");
+			Element properties = element.getChildByName("Properties");
 			if (properties != null) {
 				loadProperties(tileset.getProperties(), properties);
 			}

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/ContactProcessedListenerByValue.java
Patch:
@@ -55,8 +55,8 @@ public void swigTakeOwnership() {
     gdxBulletJNI.ContactProcessedListenerByValue_change_ownership(this, swigCPtr, true);
   }
 
-  public boolean onContactProcessed(btManifoldPoint cp, int userValue0, boolean match0, int userValue1, boolean match1) {
-    return gdxBulletJNI.ContactProcessedListenerByValue_onContactProcessed(swigCPtr, this, btManifoldPoint.getCPtr(cp), cp, userValue0, match0, userValue1, match1);
+  public void onContactProcessed(btManifoldPoint cp, int userValue0, boolean match0, int userValue1, boolean match1) {
+    gdxBulletJNI.ContactProcessedListenerByValue_onContactProcessed(swigCPtr, this, btManifoldPoint.getCPtr(cp), cp, userValue0, match0, userValue1, match1);
   }
 
   public ContactProcessedListenerByValue() {

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/gdxBulletJNI.java
Patch:
@@ -2899,7 +2899,7 @@ protected Matrix4 newObject() {
   public final static native void delete_ContactProcessedListenerByObject(long jarg1);
   public final static native void ContactProcessedListenerByObject_director_connect(ContactProcessedListenerByObject obj, long cptr, boolean mem_own, boolean weak_global);
   public final static native void ContactProcessedListenerByObject_change_ownership(ContactProcessedListenerByObject obj, long cptr, boolean take_or_release);
-  public final static native boolean ContactProcessedListenerByValue_onContactProcessed(long jarg1, ContactProcessedListenerByValue jarg1_, long jarg2, btManifoldPoint jarg2_, int jarg3, boolean jarg4, int jarg5, boolean jarg6);
+  public final static native void ContactProcessedListenerByValue_onContactProcessed(long jarg1, ContactProcessedListenerByValue jarg1_, long jarg2, btManifoldPoint jarg2_, int jarg3, boolean jarg4, int jarg5, boolean jarg6);
   public final static native long new_ContactProcessedListenerByValue();
   public final static native void delete_ContactProcessedListenerByValue(long jarg1);
   public final static native void ContactProcessedListenerByValue_director_connect(ContactProcessedListenerByValue obj, long cptr, boolean mem_own, boolean weak_global);
@@ -4822,8 +4822,8 @@ public static boolean SwigDirector_ContactAddedListenerByValue_onContactAdded(Co
   public static void SwigDirector_ContactProcessedListenerByObject_onContactProcessed(ContactProcessedListenerByObject self, long cp, long colObj0, boolean match0, long colObj1, boolean match1) {
     self.onContactProcessed(new btManifoldPoint(cp, false), (colObj0 == 0) ? null : new btCollisionObject(colObj0, false), match0, (colObj1 == 0) ? null : new btCollisionObject(colObj1, false), match1);
   }
-  public static boolean SwigDirector_ContactProcessedListenerByValue_onContactProcessed(ContactProcessedListenerByValue self, long cp, int userValue0, boolean match0, int userValue1, boolean match1) {
-    return self.onContactProcessed(new btManifoldPoint(cp, false), userValue0, match0, userValue1, match1);
+  public static void SwigDirector_ContactProcessedListenerByValue_onContactProcessed(ContactProcessedListenerByValue self, long cp, int userValue0, boolean match0, int userValue1, boolean match1) {
+    self.onContactProcessed(new btManifoldPoint(cp, false), userValue0, match0, userValue1, match1);
   }
   public static void SwigDirector_ContactDestroyedListener_onContactDestroyed(ContactDestroyedListener self, int manifoldPointUserValue) {
     self.onContactDestroyed(manifoldPointUserValue);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCallbackTest.java
Patch:
@@ -33,7 +33,7 @@ public static class TestContactProcessedListener extends ContactProcessedListene
 		public Array<BulletEntity> entities;
 		int c = 0;
 		@Override
-		public boolean onContactProcessed (btManifoldPoint cp, int userValue0, boolean match0, int userValue1, boolean match1) {
+		public void onContactProcessed (btManifoldPoint cp, int userValue0, boolean match0, int userValue1, boolean match1) {
 			if (match0) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue0));
 				// Disable future callbacks for this entity
@@ -48,7 +48,6 @@ public boolean onContactProcessed (btManifoldPoint cp, int userValue0, boolean m
 				e.color.set(Color.RED);
 				Gdx.app.log("ContactCallbackTest", "Contact processed "+(++c));
 			}
-			return false;
 		}
 	}
 	

File: gdx/src/com/badlogic/gdx/net/NetJavaImpl.java
Patch:
@@ -157,14 +157,13 @@ public void run () {
 
 						connection.connect();
 
+						final HttpClientResponse hcr = new HttpClientResponse(connection);
 						// post a runnable to sync the handler with the main thread
 						Gdx.app.postRunnable(new Runnable() {
 							@Override
 							public void run () {
 								try {
-									httpResponseListener.handleHttpResponse(new HttpClientResponse(connection));
-								} catch (IOException e) {
-									httpResponseListener.failed(e);
+									httpResponseListener.handleHttpResponse(hcr);
 								} finally {
 									connection.disconnect();
 								}

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -484,7 +484,7 @@ public void writeValue (Object value, Class knownType, Class elementType) {
 				return;
 			}
 
-			if (actualType.isEnum()) {
+			if (Enum.class.isAssignableFrom(actualType)) {
 				writer.value(value);
 				return;
 			}
@@ -879,7 +879,7 @@ public <T> T readValue (Class<T> type, Class elementType, Object jsonData) {
 			}
 			if (type == boolean.class || type == Boolean.class) return (T)Boolean.valueOf(string);
 			if (type == char.class || type == Character.class) return (T)(Character)string.charAt(0);
-			if (type.isEnum()) {
+			if (Enum.class.isAssignableFrom(type)) {
 				Object[] constants = type.getEnumConstants();
 				for (int i = 0, n = constants.length; i < n; i++)
 					if (string.equals(constants[i].toString())) return (T)constants[i];

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
 /** Reads/writes Java objects to/from JSON, automatically.
@@ -831,9 +832,8 @@ public <T> T readValue (Class<T> type, Class elementType, Object jsonData) {
 					newArray.add(readValue(elementType, null, array.get(i)));
 				return (T)newArray;
 			}
-			if (ArrayList.class.isAssignableFrom(type)) {
-				ArrayList newArray = type == null ? new ArrayList() : (ArrayList)newInstance(type);
-				newArray.ensureCapacity(array.size);
+			if (List.class.isAssignableFrom(type)) {
+				List newArray = type == null ? new ArrayList(array.size) : (List)newInstance(type);
 				for (int i = 0, n = array.size; i < n; i++)
 					newArray.add(readValue(elementType, null, array.get(i)));
 				return (T)newArray;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ButtonGroup.java
Patch:
@@ -71,7 +71,7 @@ public void setChecked (String text) {
 		if (text == null) throw new IllegalArgumentException("text cannot be null.");
 		for (int i = 0, n = buttons.size; i < n; i++) {
 			Button button = buttons.get(i);
-			if (button instanceof TextButton && text.equals(((TextButton)button).getText())) {
+			if (button instanceof TextButton && text.contentEquals(((TextButton)button).getText())) {
 				button.setChecked(true);
 				return;
 			}

File: gdx/src/com/badlogic/gdx/math/Quaternion.java
Patch:
@@ -276,8 +276,8 @@ public Quaternion setFromAxis (final float x, final float y, final float z, fina
 			return idt();
 		d = 1f /d;
 		float l_ang = angle * MathUtils.degreesToRadians;
-		float l_sin = MathUtils.sin(l_ang / 2);
-		float l_cos = MathUtils.cos(l_ang / 2);
+		float l_sin = (float)Math.sin(l_ang / 2);
+		float l_cos = (float)Math.cos(l_ang / 2);
 		return this.set(d * x * l_sin, d * y * l_sin, d * z * l_sin, l_cos).nor();
 	}
 

File: gdx/src/com/badlogic/gdx/math/Quaternion.java
Patch:
@@ -276,8 +276,8 @@ public Quaternion setFromAxis (final float x, final float y, final float z, fina
 			return idt();
 		d = 1f /d;
 		float l_ang = angle * MathUtils.degreesToRadians;
-		float l_sin = MathUtils.sin(l_ang / 2);
-		float l_cos = MathUtils.cos(l_ang / 2);
+		float l_sin = (float)Math.sin(l_ang / 2);
+		float l_cos = (float)Math.cos(l_ang / 2);
 		return this.set(d * x * l_sin, d * y * l_sin, d * z * l_sin, l_cos).nor();
 	}
 

File: tests/gdx-tests-jglfw/src/com/badlogic/gdx/jglfw/tests/JglfwDebugStarter.java
Patch:
@@ -3,8 +3,7 @@
 
 import com.badlogic.gdx.backends.jglfw.JglfwApplication;
 import com.badlogic.gdx.backends.jglfw.JglfwApplicationConfiguration;
-import com.badlogic.gdx.tests.UITest;
-import com.badlogic.gdx.tests.VBOVATest;
+import com.badlogic.gdx.tests.superkoalio.SuperKoalio;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
@@ -18,8 +17,9 @@ public static void main (String[] argv) {
 			.load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new VBOVATest();
+		GdxTest test = new SuperKoalio();
 		JglfwApplicationConfiguration config = new JglfwApplicationConfiguration();
+		config.vSync = true;
 		config.useGL20 = test.needsGL20();
 		new JglfwApplication(test, config);
 	}

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -43,7 +43,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
 		
-		GdxTest test = new TiledMapDirectLoaderTest();
+		GdxTest test = new SuperKoalio();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/superkoalio/SuperKoalio.java
Patch:
@@ -16,6 +16,7 @@
 import com.badlogic.gdx.maps.tiled.TiledMapTileLayer.Cell;
 import com.badlogic.gdx.maps.tiled.TmxMapLoader;
 import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
+import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.math.Rectangle;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -132,6 +133,7 @@ public void render () {
 	
 	private Vector2 tmp = new Vector2();
 	private void updateKoala(float deltaTime) {
+		if(deltaTime == 0) return;
 		koala.stateTime += deltaTime;	
 		
 		// check input and apply to velocity & state

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtNet.java
Patch:
@@ -24,12 +24,12 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Net;
 import com.badlogic.gdx.Net.HttpRequest;
+import com.badlogic.gdx.net.HttpStatus;
 import com.badlogic.gdx.net.ServerSocket;
 import com.badlogic.gdx.net.ServerSocketHints;
 import com.badlogic.gdx.net.Socket;
 import com.badlogic.gdx.net.SocketHints;
 import com.badlogic.gdx.utils.GdxRuntimeException;
-
 import com.google.gwt.core.client.EntryPoint;
 import com.google.gwt.http.client.Request;
 import com.google.gwt.http.client.RequestBuilder;

File: gdx/src/com/badlogic/gdx/net/HttpStatus.java
Patch:
@@ -1,7 +1,8 @@
-
 package com.badlogic.gdx.net;
 
 import com.badlogic.gdx.Net;
+import com.badlogic.gdx.Net.HttpRequest;
+import com.badlogic.gdx.Net.HttpResponse;
 
 /** This implementation is widely based Apache's HttpStatus which uses license (Apache license 2.0) -
  * http://www.apache.org/licenses/LICENSE-2.0 For more information on the Apache Software Foundation, please see

File: gdx/src/com/badlogic/gdx/net/NetJavaImpl.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.badlogic.gdx.net;
 
 import java.io.BufferedReader;
@@ -21,7 +20,6 @@
 import com.badlogic.gdx.Net.HttpRequest;
 import com.badlogic.gdx.Net.HttpResponse;
 import com.badlogic.gdx.Net.HttpResponseListener;
-import com.badlogic.gdx.Net.HttpStatus;
 import com.badlogic.gdx.StreamUtils;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 

File: gdx/src/com/badlogic/gdx/net/HttpStatus.java
Patch:
@@ -1,7 +1,8 @@
-
 package com.badlogic.gdx.net;
 
 import com.badlogic.gdx.Net;
+import com.badlogic.gdx.Net.HttpRequest;
+import com.badlogic.gdx.Net.HttpResponse;
 
 /** This implementation is widely based Apache's HttpStatus which uses license (Apache license 2.0) -
  * http://www.apache.org/licenses/LICENSE-2.0 For more information on the Apache Software Foundation, please see

File: gdx/src/com/badlogic/gdx/net/HttpStatus.java
Patch:
@@ -1,7 +1,8 @@
-
 package com.badlogic.gdx.net;
 
 import com.badlogic.gdx.Net;
+import com.badlogic.gdx.Net.HttpRequest;
+import com.badlogic.gdx.Net.HttpResponse;
 
 /** This implementation is widely based Apache's HttpStatus which uses license (Apache license 2.0) -
  * http://www.apache.org/licenses/LICENSE-2.0 For more information on the Apache Software Foundation, please see

File: gdx/src/com/badlogic/gdx/net/NetJavaImpl.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.badlogic.gdx.net;
 
 import java.io.BufferedReader;
@@ -21,7 +20,6 @@
 import com.badlogic.gdx.Net.HttpRequest;
 import com.badlogic.gdx.Net.HttpResponse;
 import com.badlogic.gdx.Net.HttpResponseListener;
-import com.badlogic.gdx.Net.HttpStatus;
 import com.badlogic.gdx.StreamUtils;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -64,7 +64,7 @@ public class LwjglCanvas implements Application {
 
 	public LwjglCanvas (ApplicationListener listener, boolean useGL2) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
-		config.useGL20 = true;
+		config.useGL20 = useGL2;
 		initialize(listener, config);
 	}
 

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -42,6 +42,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
+		
 		GdxTest test = new TiledMapDirectLoaderTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -42,7 +42,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new SpriteCacheTest();
+		GdxTest test = new TiledMapDirectLoaderTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteCacheTest.java
Patch:
@@ -82,9 +82,8 @@ private void renderNormal () {
 	}
 
 	private void renderSprites () {
-		GL10 gl = Gdx.graphics.getGL10();
-		gl.glClearColor(0.7f, 0.7f, 0.7f, 1);
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClearColor(0.7f, 0.7f, 0.7f, 1);
+		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 
 		float begin = 0;
 		float end = 0;

File: gdx/src/com/badlogic/gdx/graphics/g2d/Animation.java
Patch:
@@ -171,7 +171,6 @@ public void setPlayMode (int playMode) {
 	 * @param stateTime
 	 * @return whether the animation is finished. */
 	public boolean isAnimationFinished (float stateTime) {
-		if(playMode != NORMAL && playMode != REVERSED) return false;
 		int frameNumber = (int)(stateTime / frameDuration);
 		return keyFrames.length - 1 < frameNumber;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -214,7 +214,7 @@ public boolean touchDown (InputEvent event, float x, float y, int pointer, int b
 				x = tmpCoords.x;
 				y = tmpCoords.y;
 				if (x > 0 && x < getWidth() && y > 0 && y < getHeight()) {
-					listSelectedIndex = (int)((getHeight() - y) / itemHeight);
+					listSelectedIndex = (int) ((getHeight() - style.listBackground.getTopHeight() - y) / itemHeight);
 					listSelectedIndex = Math.max(0, listSelectedIndex);
 					listSelectedIndex = Math.min(items.length - 1, listSelectedIndex);
 					selectedIndex = listSelectedIndex;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -41,7 +41,6 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		MathUtils.ceil(1);
 		GdxTest test = new AnimationTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();

File: gdx/src/com/badlogic/gdx/math/MathUtils.java
Patch:
@@ -210,8 +210,9 @@ static public float clamp (float value, float min, float max) {
 	static private final int BIG_ENOUGH_INT = 16 * 1024;
 	static private final double BIG_ENOUGH_FLOOR = BIG_ENOUGH_INT;
 	static private final double CEIL = 0.9999999;
-	static private final double BIG_ENOUGH_CEIL = NumberUtils
-		.longBitsToDouble(NumberUtils.doubleToLongBits(BIG_ENOUGH_INT + 1) - 1);
+//	static private final double BIG_ENOUGH_CEIL = NumberUtils
+//		.longBitsToDouble(NumberUtils.doubleToLongBits(BIG_ENOUGH_INT + 1) - 1);
+	static private final double BIG_ENOUGH_CEIL = 16384.999999999996;
 	static private final double BIG_ENOUGH_ROUND = BIG_ENOUGH_INT + 0.5f;
 
 	/** Returns the largest integer less than or equal to the specified float. This method will only properly floor floats from

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.tests.AnimationTest;
 import com.badlogic.gdx.tests.ETC1Test;
 import com.badlogic.gdx.tests.FullscreenTest;
@@ -40,6 +41,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
+		MathUtils.ceil(1);
 		GdxTest test = new AnimationTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidDaydream.java
Patch:
@@ -104,7 +104,7 @@ public void initialize (ApplicationListener listener, AndroidApplicationConfigur
 		input = AndroidInputFactory.newAndroidInput(this, this, graphics.view, config);
 		audio = new AndroidAudio(this, config);
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
-// net = new AndroidNet(this);
+		net = new AndroidNet(null);
 		this.listener = listener;
 		this.handler = new Handler();
 
@@ -186,7 +186,7 @@ public View initializeForView (ApplicationListener listener, AndroidApplicationC
 		input = AndroidInputFactory.newAndroidInput(this, this, graphics.view, config);
 		audio = new AndroidAudio(this, config);
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
-// net = new AndroidNet(this);
+		net = new AndroidNet(null);
 		this.listener = listener;
 		this.handler = new Handler();
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaper.java
Patch:
@@ -86,12 +86,14 @@ public void initialize(ApplicationListener listener, AndroidApplicationConfigura
 		input = AndroidInputFactory.newAndroidInput(this, this.getService(), null, config);
 		audio = new AndroidAudio(this.getService(), config);
 		files = new AndroidFiles(this.getService().getAssets(), this.getService().getFilesDir().getAbsolutePath());
+		net = new AndroidNet(null);
 		this.listener = listener;
 		
 		Gdx.app = this;
 		Gdx.input = this.getInput();
 		Gdx.audio = this.getAudio();
 		Gdx.files = this.getFiles();
+		Gdx.net = this.getNet();
 		Gdx.graphics = this.getGraphics();
 	}
 
@@ -106,6 +108,7 @@ public void onResume() {
 		Gdx.input = this.getInput();
 		Gdx.audio = this.getAudio();
 		Gdx.files = this.getFiles();
+		Gdx.net = this.getNet();
 		Gdx.graphics = this.getGraphics();
 
 		((AndroidInput)getInput()).registerSensorListeners();

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1.java
Patch:
@@ -56,6 +56,7 @@ public ETC1Data (int width, int height, ByteBuffer compressedData, int dataOffse
 			this.height = height;
 			this.compressedData = compressedData;
 			this.dataOffset = dataOffset;
+			checkNPOT();
 		}
 
 		public ETC1Data (FileHandle pkmFile) {
@@ -84,6 +85,7 @@ public ETC1Data (FileHandle pkmFile) {
 			height = getHeightPKM(compressedData, 0);
 			dataOffset = PKM_HEADER_SIZE;
 			compressedData.position(dataOffset);
+			checkNPOT();
 		}
 		
 		private void checkNPOT() {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.ETC1Test;
 import com.badlogic.gdx.tests.FullscreenTest;
 import com.badlogic.gdx.tests.InputTest;
 import com.badlogic.gdx.tests.TideMapAssetManagerTest;
@@ -38,7 +39,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new FullscreenTest();
+		GdxTest test = new ETC1Test();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: gdx/src/com/badlogic/gdx/graphics/glutils/FrameBuffer.java
Patch:
@@ -119,7 +119,7 @@ private void build () {
 		   if (Gdx.app.getType() == ApplicationType.iOS) {
 		     IntBuffer intbuf = ByteBuffer.allocateDirect(16 * Integer.SIZE / 8).order(ByteOrder.nativeOrder()).asIntBuffer();
 		     gl.glGetIntegerv(GL20.GL_FRAMEBUFFER_BINDING, intbuf);
-		     defaultFramebufferHandle = intbuf.get();
+		     defaultFramebufferHandle = intbuf.get(0);
 		   }
 		   else {
 		     defaultFramebufferHandle = 0;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -47,7 +47,7 @@ public class LwjglApplicationConfiguration {
 	/** fullscreen **/
 	public boolean fullscreen = false;
 	/** whether to use CPU synching. If this is false display vsynching is used, which might not work in windowed mode **/
-	public boolean useCPUSynch = true;
+	public boolean useCPUSynch = false;
 	/** whether to enable vsync, can be changed at runtime via {@link Graphics#setVSync(boolean)} **/
 	public boolean vSyncEnabled = true;
 	/** title of application **/

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -629,8 +629,8 @@ protected void loadObject(MapLayer layer, Element element) {
 			if (type != null) {
 				object.getProperties().put("type", type);
 			}
-			object.getProperties.put("x", x);
-			object.getProperties.put("y", yUp ? y - height : y);
+			object.getProperties().put("x", x);
+			object.getProperties().put("y", yUp ? y - height : y);
 			object.setVisible(element.getIntAttribute("visible", 1) == 1);
 			Element properties = element.getChildByName("properties");
 			if (properties != null) {

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -629,8 +629,8 @@ protected void loadObject(MapLayer layer, Element element) {
 			if (type != null) {
 				object.getProperties().put("type", type);
 			}
-			object.getProperties.put("x", x);
-			object.getProperties.put("y", yUp ? y - height : y);
+			object.getProperties().put("x", x);
+			object.getProperties().put("y", yUp ? y - height : y);
 			object.setVisible(element.getIntAttribute("visible", 1) == 1);
 			Element properties = element.getChildByName("properties");
 			if (properties != null) {

File: gdx/src/com/badlogic/gdx/maps/tiled/TideMapLoader.java
Patch:
@@ -252,7 +252,7 @@ private void loadLayer(TiledMap map, Element element) {
 					}
 				}
 			}
-			map.getLayers().addLayer(layer);
+			map.getLayers().add(layer);
 		}
 	}
 	

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -555,7 +555,7 @@ protected void loadTileLayer(TiledMap map, Element element) {
 			if (properties != null) {
 				loadProperties(layer.getProperties(), properties);
 			}
-			map.getLayers().addLayer(layer);
+			map.getLayers().add(layer);
 		}		
 	}
 	
@@ -573,7 +573,7 @@ protected void loadObjectGroup(TiledMap map, Element element) {
 				loadObject(layer, objectElement);
 			}
 
-			map.getLayers().addLayer(layer);
+			map.getLayers().add(layer);
 		}
 	}
 	
@@ -634,7 +634,7 @@ protected void loadObject(MapLayer layer, Element element) {
 			if (properties != null) {
 				loadProperties(object.getProperties(), properties);
 			}
-			layer.getObjects().addObject(object);
+			layer.getObjects().add(object);
 		}
 	}
 	

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/BatchTiledMapRenderer.java
Patch:
@@ -86,7 +86,7 @@ public void render () {
 	public void render (int[] layers) {
 		spriteBatch.begin();
 		for (int layerIdx : layers) {
-			MapLayer layer = map.getLayers().getLayer(layerIdx);
+			MapLayer layer = map.getLayers().get(layerIdx);
 			if (layer.isVisible()) {
 				if (layer instanceof TiledMapTileLayer) {
 					renderTileLayer((TiledMapTileLayer) layer);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bench/TiledMapBench.java
Patch:
@@ -64,7 +64,7 @@ public void create() {
 						layer.setCell(x, y, cell);
 					}
 				}
-				layers.addLayer(layer);
+				layers.add(layer);
 			}
 		}
 		

File: tests/gdx-tests/src/com/badlogic/gdx/tests/superkoalio/SuperKoalio.java
Patch:
@@ -213,7 +213,7 @@ private void updateKoala(float deltaTime) {
 				if(koala.velocity.y > 0) {
 					koala.position.y = tile.y - Koala.HEIGHT;
 					// we hit a block jumping upwards, let's destroy it!
-					TiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().getLayer(1);
+					TiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(1);
 					layer.setCell((int)tile.x, (int)tile.y, null);
 				} else {
 					koala.position.y = tile.y + tile.height;
@@ -250,7 +250,7 @@ private boolean isTouched(float startX, float endX) {
 	}
 	
 	private void getTiles(int startX, int startY, int endX, int endY, Array<Rectangle> tiles) {
-		TiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().getLayer(1);
+		TiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(1);
 		rectPool.freeAll(tiles);
 		tiles.clear();
 		for(int y = startY; y <= endY; y++) {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -57,7 +57,7 @@ public LwjglApplication (ApplicationListener listener, String title, int width,
 	}
 
 	public LwjglApplication (ApplicationListener listener) {
-		this(listener, new LwjglApplicationConfiguration());
+		this(listener, listener.getClass().getSimpleName(), 640, 480, false);
 	}
 
 	public LwjglApplication (ApplicationListener listener, LwjglApplicationConfiguration config) {
@@ -217,7 +217,7 @@ void mainLoop () {
 	public ApplicationListener getApplicationListener () {
 		return listener;
 	}
-	
+
 	@Override
 	public Audio getAudio () {
 		return audio;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -41,7 +41,7 @@ public class LwjglApplicationConfiguration {
 	/** number of samples for MSAA **/
 	public int samples = 0;
 	/** width & height of application window **/
-	public int width = 480, height = 320;
+	public int width = 640, height = 480;
 	/** x & y of application window, -1 for center **/
 	public int x = -1, y = -1;
 	/** fullscreen **/

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplication.java
Patch:
@@ -85,7 +85,7 @@ protected void exception (Throwable ex) {
 
 	void initialize (JglfwApplicationConfiguration config) {
 		forceExit = config.forceExit;
-		runOnEDT = config.forceExit;
+		runOnEDT = config.runOnEDT;
 
 		final Thread glThread = Thread.currentThread();
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtPreferences.java
Patch:
@@ -139,7 +139,8 @@ public float getFloat (String key) {
 
 	@Override
 	public String getString (String key) {
-		return (String)values.get(key);
+		String v = (String)values.get(key);
+		return v == null ? "" : v;
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -44,7 +44,7 @@ public class TmxMapLoader extends SynchronousAssetLoader<TiledMap, TmxMapLoader.
 
 	public static class Parameters extends AssetLoaderParameters<TiledMap> {
 		/** Whether to load the map for a y-up coordinate system */
-		boolean yUp = true;
+		public boolean yUp = true;
 	}
 	
 	protected static final int FLAG_FLIP_HORIZONTALLY = 0x80000000;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -197,6 +197,8 @@ public float getPrefHeight () {
 
 	public void hideList () {
 		if (list.getParent() == null) return;
+		
+		getStage().removeCaptureListener(list.stageListener)
 		list.addAction(sequence(fadeOut(0.15f, Interpolation.fade), removeActor()));
 	}
 
@@ -228,7 +230,6 @@ public boolean touchDown (InputEvent event, float x, float y, int pointer, int b
 
 			public void touchUp (InputEvent event, float x, float y, int pointer, int button) {
 				hideList();
-				event.getStage().removeCaptureListener(stageListener);
 			}
 
 			public boolean mouseMoved (InputEvent event, float x, float y) {

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/NativeCodeGenerator.java
Patch:
@@ -514,8 +514,8 @@ private void emitJniSetupCode (StringBuffer buffer, JavaMethod javaMethod, Strin
 		for (Argument arg : javaMethod.getArguments()) {
 			if (arg.getType().isBuffer()) {
 				String type = arg.getType().getBufferCType();
-				buffer.append("\t" + type + " " + arg.getName() + " = (" + type + ")env->GetDirectBufferAddress(" + JNI_ARG_PREFIX
-					+ arg.getName() + ");\n");
+				buffer.append("\t" + type + " " + arg.getName() + " = (" + type + ")(" + JNI_ARG_PREFIX
+					+ arg.getName() + "?env->GetDirectBufferAddress(" + JNI_ARG_PREFIX	+ arg.getName() + "):0);\n");
 				additionalArgs.append(", ");
 				additionalArgs.append(type);
 				additionalArgs.append(" ");

File: tests/gdx-tests-jglfw/src/com/badlogic/gdx/jglfw/tests/JglfwDebugStarter.java
Patch:
@@ -4,6 +4,7 @@
 import com.badlogic.gdx.backends.jglfw.JglfwApplication;
 import com.badlogic.gdx.backends.jglfw.JglfwApplicationConfiguration;
 import com.badlogic.gdx.tests.UITest;
+import com.badlogic.gdx.tests.VBOVATest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
@@ -17,7 +18,7 @@ public static void main (String[] argv) {
 			.load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new UITest();
+		GdxTest test = new VBOVATest();
 		JglfwApplicationConfiguration config = new JglfwApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new JglfwApplication(test, config);

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwInput.java
Patch:
@@ -757,7 +757,7 @@ public void mouseButton (long window, int button, boolean pressed) {
 				mousePressed++;
 				processor.touchDown(mouseX, mouseY, 0, button);
 			} else {
-				mousePressed--;
+				mousePressed = Math.max(0, mousePressed - 1);
 				processor.touchUp(mouseX, mouseY, 0, button);
 			}
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -197,6 +197,8 @@ public float getPrefHeight () {
 
 	public void hideList () {
 		if (list.getParent() == null) return;
+		
+		getStage().removeCaptureListener(list.stageListener)
 		list.addAction(sequence(fadeOut(0.15f, Interpolation.fade), removeActor()));
 	}
 
@@ -228,7 +230,6 @@ public boolean touchDown (InputEvent event, float x, float y, int pointer, int b
 
 			public void touchUp (InputEvent event, float x, float y, int pointer, int button) {
 				hideList();
-				event.getStage().removeCaptureListener(stageListener);
 			}
 
 			public boolean mouseMoved (InputEvent event, float x, float y) {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -81,6 +81,7 @@ public void onModuleLoad () {
 		this.agentInfo = computeAgentInfo();
 		this.listener = getApplicationListener();
 		this.config = getConfig();
+		this.log = config.log;
 
 		if (config.rootPanel != null) {
 			this.root = config.rootPanel;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/PreloaderBundleGenerator.java
Patch:
@@ -96,8 +96,7 @@ public String generate (TreeLogger logger, GeneratorContext context, String type
 	}
 
 	private void copyFile (FileWrapper source, FileWrapper dest, AssetFilter filter, ArrayList<Asset> assets) {
-		if (filter.accept(dest.path(), false))
-		;
+		if (!filter.accept(dest.path(), false)) return;
 		try {
 			assets.add(new Asset(dest, filter.getType(dest.path())));
 			dest.write(source.read(), false);

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -266,7 +266,7 @@ protected void loadTileSet(TiledMap map, Element element, FileHandle tmxFile, Im
 			
 			for (int y = margin; y <= stopHeight; y += tileheight + spacing) {
 				for (int x = margin; x <= stopWidth; x += tilewidth + spacing) {
-					TextureRegion tileRegion = new TextureRegion(new TextureRegion(texture, x, y, tilewidth, tileheight));
+					TextureRegion tileRegion = new TextureRegion(texture, x, y, tilewidth, tileheight);
 					if (!yUp) {
 						tileRegion.flip(false, true);
 					}

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGraphics.java
Patch:
@@ -52,6 +52,7 @@ public JglfwGraphics (JglfwApplicationConfiguration config) {
 		undecorated = config.undecorated;
 		x = config.x;
 		y = config.y;
+		vSync = config.vSync;
 		initialBackgroundColor = config.initialBackgroundColor;
 		if (config.fullscreenMonitorIndex != -1) { // Use monitor specified in config if it is valid.
 			long[] monitors = glfwGetMonitors();
@@ -87,8 +88,6 @@ public JglfwGraphics (JglfwApplicationConfiguration config) {
 		Gdx.gl20 = gl20;
 
 		if (!config.hidden) show();
-
-		setVSync(config.vSync);
 	}
 
 	void frameStart () {
@@ -245,6 +244,7 @@ private boolean createWindow (int width, int height, boolean fullscreen) {
 		if (!mouseCaptured) glfwSetInputMode(window, GLFW_CURSOR_MODE, GLFW_CURSOR_NORMAL); // Prevent fullscreen from taking mouse.
 
 		glfwMakeContextCurrent(newWindow);
+		setVSync(vSync);
 		if (visible) glfwShowWindow(window);
 
 		return true;

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -266,7 +266,7 @@ protected void loadTileSet(TiledMap map, Element element, FileHandle tmxFile, Im
 			
 			for (int y = margin; y <= stopHeight; y += tileheight + spacing) {
 				for (int x = margin; x <= stopWidth; x += tilewidth + spacing) {
-					TextureRegion tileRegion = new TextureRegion(new TextureRegion(texture, x, y, tilewidth, tileheight));
+					TextureRegion tileRegion = new TextureRegion(texture, x, y, tilewidth, tileheight);
 					if (!yUp) {
 						tileRegion.flip(false, true);
 					}

File: tests/gdx-tests-jglfw/src/com/badlogic/gdx/jglfw/tests/JglfwDebugStarter.java
Patch:
@@ -20,6 +20,6 @@ public static void main (String[] argv) {
 		GdxTest test = new UITest();
 		JglfwApplicationConfiguration config = new JglfwApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
-		new JglfwApplication(test, config).start();
+		new JglfwApplication(test, config);
 	}
 }

File: tests/gdx-tests-jglfw/src/com/badlogic/gdx/jglfw/tests/JglfwTestStarter.java
Patch:
@@ -69,8 +69,7 @@ public static boolean runTest (String testName) {
 		config.title = testName;
 		config.useGL20 = test.needsGL20();
 		config.forceExit = false;
-		config.enableAWT = true;
-		new JglfwApplication(test, config).start();
+		new JglfwApplication(test, config);
 		return true;
 	}
 

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwInput.java
Patch:
@@ -99,7 +99,7 @@ public boolean scrolled (int amount) {
 		else
 			processorQueue = null;
 
-		app.callbacks.add(new GlfwInputProcessor(inputProcessor));
+		app.getCallbacks().add(new GlfwInputProcessor(inputProcessor));
 	}
 
 	public void update () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -96,9 +96,8 @@ public ScrollPane (Actor widget, Skin skin, String styleName) {
 	/** @param widget May be null. */
 	public ScrollPane (Actor widget, ScrollPaneStyle style) {
 		if (style == null) throw new IllegalArgumentException("style cannot be null.");
-		this.widget = widget;
 		this.style = style;
-		if (widget != null) setWidget(widget);
+		setWidget(widget);
 		setWidth(150);
 		setHeight(150);
 
@@ -568,6 +567,7 @@ public float getMinHeight () {
 	/** Sets the {@link Actor} embedded in this scroll pane.
 	 * @param widget May be null to remove any current actor. */
 	public void setWidget (Actor widget) {
+		if(widget == this) throw new IllegalArgumentException("widget cannot be same object");
 		if (this.widget != null) super.removeActor(this.widget);
 		this.widget = widget;
 		if (widget != null) super.addActor(widget);

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGraphics.java
Patch:
@@ -222,7 +222,7 @@ private boolean createWindow (int width, int height, boolean fullscreen) {
 	}
 
 	public void setTitle (String title) {
-		if (title == null) glfwSetWindowTitle(window, "");
+		if (title == null) title = "";
 		glfwSetWindowTitle(window, title);
 		this.title = title;
 	}

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplication.java
Patch:
@@ -109,6 +109,7 @@ private void mainLoop () {
 			// If one of the runnables set running to false, for example after an exit().
 			if (!running) break;
 
+			input.resetStates();
 			glfwPollEvents();
 			shouldRender |= graphics.shouldRender();
 

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplicationConfiguration.java
Patch:
@@ -31,4 +31,6 @@ public class JglfwApplicationConfiguration {
 	public boolean useGL20 = false;
 	/** whether to call System.exit() when the main loop exits **/
 	public boolean forceExit = true;
+	
+	// FIXME add methods to allow enumeration of monitors/display modes before creating the application
 }

File: tests/gdx-tests-jglfw/src/com/badlogic/gdx/jglfw/tests/JglfwDebugStarter.java
Patch:
@@ -3,6 +3,7 @@
 
 import com.badlogic.gdx.backends.jglfw.JglfwApplication;
 import com.badlogic.gdx.backends.jglfw.JglfwApplicationConfiguration;
+import com.badlogic.gdx.tests.FullscreenTest;
 import com.badlogic.gdx.tests.SpriteBatchShaderTest;
 import com.badlogic.gdx.tests.VertexArrayTest;
 import com.badlogic.gdx.tests.superkoalio.SuperKoalio;
@@ -19,7 +20,7 @@ public static void main (String[] argv) {
 			.load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new SpriteBatchShaderTest();
+		GdxTest test = new FullscreenTest();
 		JglfwApplicationConfiguration config = new JglfwApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new JglfwApplication(test, config);

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.FullscreenTest;
 import com.badlogic.gdx.tests.InputTest;
 import com.badlogic.gdx.tests.TideMapAssetManagerTest;
 import com.badlogic.gdx.tests.TideMapDirectLoaderTest;
@@ -37,7 +38,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new SuperKoalio();
+		GdxTest test = new FullscreenTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -163,7 +163,6 @@ protected void result (Object object) {
 					.key(Keys.ESCAPE, false).show(stage);
 			}
 		});
-
 	}
 
 	@Override

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplication.java
Patch:
@@ -116,7 +116,6 @@ private void mainLoop () {
 				graphics.updateTime();
 				listener.render();
 				glfwSwapBuffers(graphics.window);
-				if (graphics.sync && graphics.config.cpuSync) nextFrameTime += 60 * 1000000;
 			} else {
 				// Avoid burning CPU when not rendering.
 				nextFrameTime += 60 * 1000000;

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplicationConfiguration.java
Patch:
@@ -25,8 +25,6 @@ public class JglfwApplicationConfiguration {
 	public int bitsPerPixel = 24;
 	/** whether to enable vsync, can be changed at runtime via {@link Graphics#setVSync(boolean)} **/
 	public boolean vSync = true;
-	/** whether to sleep the CPU instead of vsync when vSync is enabled **/
-	public boolean cpuSync = true;
 	/** whether the window is resizable **/
 	public boolean resizable = true;
 	/** whether to attempt to use OpenGL ES 2.0. Note GL2 may be unavailable even when this is true. default: false **/

File: tests/gdx-tests-jglfw/src/com/badlogic/gdx/jglfw/tests/JglfwDebugStarter.java
Patch:
@@ -25,7 +25,9 @@
 
 import com.badlogic.gdx.backends.jglfw.JglfwApplication;
 import com.badlogic.gdx.backends.jglfw.JglfwApplicationConfiguration;
+import com.badlogic.gdx.tests.SpriteBatchShaderTest;
 import com.badlogic.gdx.tests.VertexArrayTest;
+import com.badlogic.gdx.tests.superkoalio.SuperKoalio;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
@@ -38,7 +40,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new VertexArrayTest();
+		GdxTest test = new SpriteBatchShaderTest();
 		JglfwApplicationConfiguration config = new JglfwApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new JglfwApplication(test, config);

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwApplicationConfiguration.java
Patch:
@@ -6,9 +6,9 @@
 /** @author Nathan Sweet */
 public class JglfwApplicationConfiguration {
 	/** title of application window **/
-	public String title;
+	public String title = "Jglfw Application";
 	/** width & height of application window **/
-	public int width, height;
+	public int width = 480, height = 320;
 	/** x & y of application window, -1 for center **/
 	public int x = -1, y = -1;
 	/** whether to start in fullscreen **/

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLBaseSurfaceViewLW.java
Patch:
@@ -506,7 +506,7 @@ public interface GLWrapper {
 	 * An interface for customizing the eglCreateContext and eglDestroyContext calls.
 	 * <p>
 	 * This interface must be implemented by clients wishing to call
-	 * {@link GLBaseSurfaceViewLW#setEGLContextFactory(EGLContextFactory)}
+	 * GLBaseSurfaceViewLW#setEGLContextFactory(EGLContextFactory)
 	 */
 	public interface EGLContextFactory {
 		EGLContext createContext (EGL10 egl, EGLDisplay display, EGLConfig eglConfig);
@@ -529,7 +529,7 @@ public void destroyContext (EGL10 egl, EGLDisplay display, EGLContext context) {
 	 * An interface for customizing the eglCreateWindowSurface and eglDestroySurface calls.
 	 * <p>
 	 * This interface must be implemented by clients wishing to call
-	 * {@link GLBaseSurfaceViewLW#setEGLWindowSurfaceFactory(EGLWindowSurfaceFactory)}
+	 * GLBaseSurfaceViewLW#setEGLWindowSurfaceFactory(EGLWindowSurfaceFactory)
 	 */
 	public interface EGLWindowSurfaceFactory {
 		EGLSurface createWindowSurface (EGL10 egl, EGLDisplay display, EGLConfig config, Object nativeWindow);

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSInput.java
Patch:
@@ -417,14 +417,14 @@ public void Invoke(NSObject obj, boolean[] stop) {
 		}
 	});
 	
-	private int getFreePointer() {
+	int getFreePointer() {
 		for(int i = 0; i < touchDown.length; i++) {
 			if(touchDown[i] == 0) return i;
 		}
 		throw new GdxRuntimeException("Couldn't find free pointer id!");
 	}
 	
-	private int findPointer(UITouch touch) {
+	int findPointer(UITouch touch) {
 		int ptr = touch.get_Handle().ToInt32();
 		for(int i = 0; i < touchDown.length; i++) {
 			if(touchDown[i] == ptr) return i;

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSSound.java
Patch:
@@ -48,7 +48,7 @@ public class IOSSound implements Sound {
 	private int playerIndex;
 	
 	// one single thread will play sounds outside the rendering low (otherwise our FPS drops!)
-	private static class PlayThread extends Thread {
+	static class PlayThread extends Thread {
 		@Override
 		public void run () {
 			Gdx.app.debug("IOSSound", "Sound player is running.");
@@ -67,7 +67,7 @@ public void run () {
 	}
 	private static PlayThread playThread = null;
 	private static int soundCounter = 0;
-	private static final LinkedBlockingQueue<AVAudioPlayer> playQueue = new LinkedBlockingQueue<AVAudioPlayer>();
+	static final LinkedBlockingQueue<AVAudioPlayer> playQueue = new LinkedBlockingQueue<AVAudioPlayer>();
 	
 	/**
 	 * Creates a new sound object. We are creating several AVAudioPlayer objects to

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/JniGenSharedLibraryLoader.java
Patch:
@@ -25,7 +25,7 @@ public class JniGenSharedLibraryLoader {
 	public JniGenSharedLibraryLoader () {
 	}
 
-	/** Fetches the natives from the given natives jar file. Used for testing a shared lib on the fly, see {@link MyJniClass}.
+	/** Fetches the natives from the given natives jar file. Used for testing a shared lib on the fly, see MyJniClass.
 	 * @param nativesJar */
 	public JniGenSharedLibraryLoader (String nativesJar) {
 		this.nativesJar = nativesJar;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GamepadTest.java
Patch:
@@ -107,7 +107,7 @@ public boolean accelerometerMoved (Controller controller, int accelerometerIndex
 		});
 	}
 	
-	private void print(String message) {
+	void print(String message) {
 		String[] lines = console.getItems();
 		String[] newLines = new String[lines.length + 1];
 		System.arraycopy(lines, 0, newLines, 0, lines.length);
@@ -118,7 +118,7 @@ private void print(String message) {
 		scrollPane.setScrollPercentY(1.0f);
 	}
 	
-	private void clear() {
+	void clear() {
 		console.setItems(new Object[0]);
 	}
 

File: backends/gdx-backend-jglfw/src/com/badlogic/gdx/backends/jglfw/JglfwGraphics.java
Patch:
@@ -12,6 +12,7 @@
 import com.badlogic.gdx.graphics.GLU;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.badlogic.jglfw.gl.GL;
 
 import java.awt.GraphicsDevice;
 import java.awt.GraphicsEnvironment;
@@ -20,7 +21,7 @@
 /** An implementation of the {@link Graphics} interface based on GLFW.
  * @author Nathan Sweet */
 public class JglfwGraphics implements Graphics {
-	static int glMajorVersison, glMinorVersion;
+	static int glMajorVersion, glMinorVersion;
 
 	JglfwApplicationConfiguration config;
 	long window;
@@ -91,7 +92,7 @@ private void createWindow () {
 	}
 
 	private void createGL () {
-		String version = glGetString(GL11.GL_VERSION);
+		String version = GL.glGetString(GL11.GL_VERSION);
 		glMajorVersion = Integer.parseInt("" + version.charAt(0));
 		glMinorVersion = Integer.parseInt("" + version.charAt(2));
 

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/NativeCodeGenerator.java
Patch:
@@ -323,7 +323,7 @@ private void generateCppFile (ArrayList<JavaSegment> javaSegments, FileDescripto
 	private CMethod findCMethod (JavaMethod javaMethod, ArrayList<CMethod> cMethods) {
 		for (CMethod cMethod : cMethods) {
 			if (cMethod.getHead().endsWith(javaMethod.getClassName() + "_" + javaMethod.getName()) ||
-				 cMethod.getHead().contains(javaMethod.getClassName() + "_" + javaMethod.getName() + "___")) {
+				 cMethod.getHead().contains(javaMethod.getClassName() + "_" + javaMethod.getName() + "__")) {
 				// FIXME poor man's overloaded method check...
 				// FIXME float test[] won't work, needs to be float[] test.
 				if (cMethod.getArgumentTypes().length - 2 == javaMethod.getArguments().size()) {

File: gdx/src/com/badlogic/gdx/math/Vector3.java
Patch:
@@ -255,7 +255,7 @@ public float dst (final Vector3 vector) {
 		final float b = vector.y - y;
 		final float c = vector.z - z;
 
-		return (float)Math.sqrt(a * a + b * b + c * b);
+		return (float)Math.sqrt(a * a + b * b + c * c);
 	}
 
 	/** Normalizes this vector to unit length

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/NativeCodeGenerator.java
Patch:
@@ -311,6 +311,7 @@ private void generateCppFile (ArrayList<JavaSegment> javaSegments, FileDescripto
 					throw new RuntimeException("Method '" + javaMethod.getName() + "' has no body");
 				}
 				CMethod cMethod = findCMethod(javaMethod, cMethods);
+				cMethods.remove(cMethod);
 				if (cMethod == null)
 					throw new RuntimeException("Couldn't find C method for Java method '" + javaMethod.getClassName() + "#"
 						+ javaMethod.getName() + "'");

File: gdx/src/com/badlogic/gdx/math/Vector3.java
Patch:
@@ -461,7 +461,7 @@ public float dst2 (float x, float y, float z) {
 		final float b = y - this.y;
 		final float c = z - this.z;
 
-		return a * a + b * b + c * b;
+		return a * a + b * b + c * c;
 	}
 
 	/** @return the distance between this point and the given point */

File: gdx/src/com/badlogic/gdx/math/Quaternion.java
Patch:
@@ -360,7 +360,7 @@ public Quaternion setFromAxes (float xx, float xy, float xz, float yx, float yy,
 	 * @return This quaternion for chaining */
 	public Quaternion setFromCross (final Vector3 v1, final Vector3 v2) {
 		final float dot = MathUtils.clamp(Vector3.tmp.set(v1).nor().dot(Vector3.tmp2.set(v2).nor()), -1f, 1f);
-		return setFromAxis(Vector3.tmp.crs(Vector3.tmp2), (float)Math.acos(dot));
+		return setFromAxis(Vector3.tmp.crs(Vector3.tmp2), (float)Math.acos(dot) * MathUtils.radiansToDegrees);
 	}
 	
 	/** Set this quaternion to the rotation between two vectors.
@@ -373,7 +373,7 @@ public Quaternion setFromCross (final Vector3 v1, final Vector3 v2) {
 	 * @return This quaternion for chaining */
 	public Quaternion setFromCross (final float x1, final float y1, final float z1, final float x2, final float y2, final float z2) {
 		final float dot = MathUtils.clamp(Vector3.tmp.set(x1, y1, z1).nor().dot(Vector3.tmp2.set(x2, y2, z2).nor()), -1f, 1f);
-		return setFromAxis(Vector3.tmp.crs(Vector3.tmp2), (float)Math.acos(dot));
+		return setFromAxis(Vector3.tmp.crs(Vector3.tmp2), (float)Math.acos(dot) * MathUtils.radiansToDegrees);
 	}
 
 	/** Spherical linear interpolation between this quaternion and the other quaternion, based on the alpha value in the range

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ShootTest.java
Patch:
@@ -20,7 +20,6 @@
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.math.collision.Ray;
 
 /** @author xoppa */
 public class ShootTest extends BaseBulletTest {

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -145,8 +145,8 @@ protected TiledMap loadTilemap(Element root, FileHandle tmxFile, ImageResolver i
 		}
 		mapProperties.put("width", mapWidth);
 		mapProperties.put("height", mapHeight);
-		mapProperties.put("tilewidth", mapWidth);
-		mapProperties.put("tileheight", mapHeight);
+		mapProperties.put("tilewidth", tileWidth);
+		mapProperties.put("tileheight", tileHeight);
 		if (mapBackgroundColor != null) {
 			mapProperties.put("backgroundcolor", mapBackgroundColor);
 		}

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -525,7 +525,7 @@ protected void loadObject(MapLayer layer, Element element) {
 						vertices[i * 2 + 1] = y + Integer.parseInt(point[1]);
 					}
 					object = new PolylineMapObject(vertices);
-				} else if ((child == element.getChildByName("ellipse"))) {
+				} else if ((child = element.getChildByName("ellipse")) != null) {
 					object = new EllipseMapObject(x, y, width, height);
 				}
 			}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
Patch:
@@ -106,10 +106,11 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 
 		font.setColor(fontColorUnselected.r, fontColorUnselected.g, fontColorUnselected.b, fontColorUnselected.a * parentAlpha);
 		float itemY = getHeight();
+        float padding = selectedDrawable.getLeftWidth() + selectedDrawable.getRightWidth();
 		for (int i = 0; i < items.length; i++) {
 			if (cullingArea == null || (itemY - itemHeight <= cullingArea.y + cullingArea.height && itemY >= cullingArea.y)) {
 				if (selectedIndex == i) {
-					selectedDrawable.draw(batch, x, y + itemY - itemHeight, Math.max(prefWidth, getWidth()), itemHeight);
+					selectedDrawable.draw(batch, x, y + itemY - itemHeight, Math.max(prefWidth, getWidth() + padding), itemHeight);
 					font.setColor(fontColorSelected.r, fontColorSelected.g, fontColorSelected.b, fontColorSelected.a * parentAlpha);
 				}
 				font.draw(batch, items[i], x + textOffsetX, y + itemY - textOffsetY);

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -529,7 +529,7 @@ private void loadProperties(MapProperties properties, Element element) {
 		if (element.getName().equals("properties")) {
 			for (Element property : element.getChildrenByName("property")) {
 				String name = property.getAttribute("name", null);
-				String value = property.getAttribute(name, null);
+				String value = property.getAttribute("value", null);
 				if (value == null) {
 					value = property.getText();
 				}

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -228,7 +228,7 @@ private void loadTileSet(TiledMap map, Element element, FileHandle tmxFile, Imag
 				int localtid = tileElement.getIntAttribute("id", 0);
 				TiledMapTile tile = tileset.getTile(firstgid + localtid);
 				if (tile!= null) {
-					Element properties = element.getChildByName("properties");
+					Element properties = tileElement.getChildByName("properties");
 					if (properties != null) {
 						loadProperties(tile.getProperties(), properties);
 					}

File: tests/gdx-tests-gwt/src/com/badlogic/gdx/tests/gwt/client/GwtTestStarter.java
Patch:
@@ -25,7 +25,7 @@
 public class GwtTestStarter extends GwtApplication {
 	@Override
 	public GwtApplicationConfiguration getConfig () {
-		return new GwtApplicationConfiguration(640, 640);
+		return new GwtApplicationConfiguration(480, 320);
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -39,6 +39,7 @@
 import com.badlogic.gdx.tests.gles2.HelloTriangle;
 import com.badlogic.gdx.tests.gles2.SimpleVertexShader;
 import com.badlogic.gdx.tests.net.NetAPITest;
+import com.badlogic.gdx.tests.superkoalio.SuperKoalio;
 
 /** List of GdxTest classes. To be used by the test launchers. If you write your own test, add it in here!
  * 
@@ -76,7 +77,7 @@ public class GdxTests {
 		TextButtonTest.class, TextButtonTestGL2.class, TextureBindTest.class, SortedSpriteTest.class,
 		ExternalMusicTest.class, SoftKeyboardTest.class, DirtyRenderingTest.class, YDownTest.class,
 		ScreenCaptureTest.class, BitmapFontTest.class, LabelScaleTest.class, GleedTest.class, GamepadTest.class, NetAPITest.class, TideMapAssetManagerTest.class, TideMapDirectLoaderTest.class, TiledMapAssetManagerTest.class, TiledMapBench.class,
-		RunnablePostTest.class, Vector2dTest.class));
+		RunnablePostTest.class, Vector2dTest.class, SuperKoalio.class));
 	
 	public static List<String> getNames () {
 		List<String> names = new ArrayList<String>(tests.size());

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -38,7 +38,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new TideMapDirectLoaderTest();
+		GdxTest test = new SuperKoalio();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricTiledMapRenderer.java
Patch:
@@ -70,6 +70,7 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 				float y = (row * halfTileHeight) - (col * halfTileHeight);
 
 				final TiledMapTileLayer.Cell cell = layer.getCell(col, row);
+				if(cell == null) continue;
 				final TiledMapTile tile = cell.getTile();
 				if (tile != null) {
 					

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer.java
Patch:
@@ -67,6 +67,7 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 		for (int row = row1; row < row2; row++) {
 			for (int col = col1; col < col2; col++) {
 				final TiledMapTileLayer.Cell cell = layer.getCell(col, row);
+				if(cell == null) continue;
 				final TiledMapTile tile = cell.getTile();
 				if (tile != null) {
 					if (tile instanceof AnimatedTiledMapTile) continue;

File: gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer2.java
Patch:
@@ -168,6 +168,7 @@ public void renderTileLayer (TiledMapTileLayer layer) {
 		for (int row = row1; row < row2; row++) {
 			for (int col = col1; col < col2; col++) {
 				final TiledMapTileLayer.Cell cell = layer.getCell(col, row);
+				if(cell == null) continue;
 				final TiledMapTile tile = cell.getTile();
 				if (tile != null) {
 					count++;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -38,7 +38,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new SuperKoalio();
+		GdxTest test = new TideMapDirectLoaderTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaper.java
Patch:
@@ -122,7 +122,7 @@ public void onPause() {
 		// in my opinion it is a bug of android not libgdx, even example Cubic live wallpaper from
 		// Android SDK crashes on affected devices.......... and on some configurations of android emulator too.
 		// 
-		// Samsung rejected my live wallpaper because of this, so I decided to disable graphics.pause.. 
+		// My wallpaper was rejected on Samsung Apps because of this issue, so I decided to disable graphics.pause.. 
 		// also I moved audio lifecycle methods from AndroidGraphicsLiveWallpaper into this class
 		
 		//graphics.pause();

File: gdx/src/com/badlogic/gdx/maps/tiled/TideMapLoader.java
Patch:
@@ -155,7 +155,7 @@ private void loadTileSheet(TiledMap map, Element element, FileHandle tideFile, I
 			int spacingY = Integer.parseInt(spacingParts[1]);
 
 			FileHandle image = getRelativeFileHandle(tideFile, imageSource);
-			Texture texture = imageResolver.getImage(image.path());
+			TextureRegion texture = imageResolver.getImage(image.path());
 			
 			// TODO: Actually load the tilesheet
 			// Need to make global ids as Tide doesn't have global ids.
@@ -170,8 +170,8 @@ private void loadTileSheet(TiledMap map, Element element, FileHandle tideFile, I
 			tileset.getProperties().put("firstgid", firstgid);
 			int gid = firstgid;
 			
-			int stopWidth = texture.getWidth() - tileSizeX;
-			int stopHeight = texture.getHeight() - tileSizeY;
+			int stopWidth = texture.getRegionWidth() - tileSizeX;
+			int stopHeight = texture.getRegionHeight() - tileSizeY;
 			
 			for (int y = marginY; y <= stopHeight; y += tileSizeY + spacingY) {
 				for (int x = marginX; x <= stopWidth; x += tileSizeX + spacingX) {

File: gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
Patch:
@@ -205,13 +205,13 @@ private void loadTileSet(TiledMap map, Element element, FileHandle tmxFile, Imag
 				image = getRelativeFileHandle(tmxFile, imageSource);
 			}
 
-			Texture texture = imageResolver.getImage(image.path());
+			TextureRegion texture = imageResolver.getImage(image.path());
 
 			TiledMapTileSet tileset = new TiledMapTileSet();
 			tileset.setName(name);
 			
-			int stopWidth = texture.getWidth() - tilewidth;
-			int stopHeight = texture.getHeight() - tileheight;
+			int stopWidth = texture.getRegionWidth() - tilewidth;
+			int stopHeight = texture.getRegionHeight() - tileheight;
 
 			int id = firstgid;
 			

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -76,7 +76,7 @@ private void initialize (ApplicationListener listener, LwjglApplicationConfigura
 		LwjglNativesLoader.load();
 
 		canvas = new Canvas() {
-			private final Dimension minSize = new Dimension(0, 0);
+			private final Dimension minSize = new Dimension(1, 1);
 
 			public final void addNotify () {
 				super.addNotify();
@@ -99,6 +99,7 @@ public Dimension getMinimumSize () {
 				return minSize;
 			}
 		};
+		canvas.setSize(1, 1);
 		canvas.setIgnoreRepaint(true);
 
 		graphics = new LwjglGraphics(canvas, config) {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglCanvasTest.java
Patch:
@@ -26,7 +26,6 @@ public LwjglCanvasTest () {
 
 		Container container = getContentPane();
 		canvas = new LwjglCanvas(new UITest(), false);
-		canvas.getCanvas().setSize(200, 480);
 
 		container.add(canvas.getCanvas(), BorderLayout.CENTER);
 

File: gdx/src/com/badlogic/gdx/math/MathUtils.java
Patch:
@@ -30,6 +30,7 @@ public class MathUtils {
 	// ---
 
 	static public final float PI = 3.1415927f;
+	public static final float PI2 = PI * 2;
 
 	static private final int SIN_BITS = 13; // Adjust for accuracy.
 	static private final int SIN_MASK = ~(-1 << SIN_BITS);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/InputListener.java
Patch:
@@ -22,7 +22,6 @@
  * the methods here do nothing with the event.  Users are expected to override the methods they are interested in, like this:
  * 
  * <pre>
- * {@code
  * actor.addListener(new InputListener() {
  *    public boolean touchDown(InputEvent event, float x, float y, int pointer, int button) {
  *       Gdx.app.log("Example", "touch started at (" +x+ ", " +y+ ")");
@@ -31,7 +30,6 @@
  *       Gdx.app.log("Example", "touch done at (" +x+ ", " +y+ ")");
  *    }
  * });
- * }
  * </pre>
  */
 public class InputListener implements EventListener {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -219,7 +219,6 @@ public float getVisualValue () {
 
 	/** Sets the slider position, rounded to the nearest step size and clamped to the minumum and maximim values. */
 	public void setValue (float value) {
-		if (value < min || value > max) throw new IllegalArgumentException("value must be >= min and <= max: " + value);
 		value = MathUtils.clamp(Math.round(value / stepSize) * stepSize, min, max);
 		float oldValue = this.value;
 		if (value == oldValue) return;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGraphics.java
Patch:
@@ -275,17 +275,15 @@ public float getDensity () {
 
 	@Override
 	public void setContinuousRendering (boolean isContinuous) {
-		throw new GdxRuntimeException("No supported");
 	}
 
 	@Override
 	public boolean isContinuousRendering () {
-		throw new GdxRuntimeException("No supported");
+		return false;
 	}
 
 	@Override
 	public void requestRendering () {
-		throw new GdxRuntimeException("No supported");
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -364,7 +364,7 @@ public static boolean intersectRaySphere (Ray ray, Vector3 center, float radius,
 	 * @param box The box
 	 * @param intersection The intersection point (optional)
 	 * @return Whether an intersection is present. */
-	boolean intersectRayBounds(Ray ray, BoundingBox box, Vector3 intersection)
+	public static boolean intersectRayBounds(Ray ray, BoundingBox box, Vector3 intersection)
 	{
 		Vector3.tmp.set(ray.origin);
 		Vector3.tmp2.set(ray.origin);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PixmapPackerTest.java
Patch:
@@ -32,7 +32,7 @@ public void create () {
 		Pixmap pixmap2 = new Pixmap(Gdx.files.internal("data/wheel.png"));
 		Pixmap pixmap3 = new Pixmap(Gdx.files.internal("data/egg.png"));
 		
-		PixmapPacker packer =  new PixmapPacker(1024, 1024, Format.RGBA8888, 2, true);
+		PixmapPacker packer =  new PixmapPacker(256, 256, Format.RGBA8888, 2, true);
 		packer.pack("badlogic", pixmap1);
 		packer.pack("wheel", pixmap1);
 		packer.pack("egg", pixmap1);

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -39,7 +39,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new GleedTest();
+		GdxTest test = new TiledMapBench();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapAssetManagerTest.java
Patch:
@@ -31,6 +31,7 @@ public void create() {
 		
 		camera = new OrthographicCamera();
 		camera.setToOrtho(false, (w / h) * 10, 10);
+		camera.zoom = 2;
 		camera.update();
 		
 		cameraController = new OrthoCamController(camera);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bench/TiledMapBench.java
Patch:
@@ -14,6 +14,7 @@
 import com.badlogic.gdx.maps.tiled.TiledMapRenderer;
 import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
 import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
+import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer2;
 import com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -64,7 +65,7 @@ public void create() {
 			}
 		}
 		
-		renderer = new OrthogonalTiledMapRenderer(map);
+		renderer = new OrthogonalTiledMapRenderer2(map);
 
 	}
 

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -39,7 +39,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new TiledMapDirectLoaderTest();
+		GdxTest test = new GleedTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: gdx/src/com/badlogic/gdx/maps/MapRenderer.java
Patch:
@@ -2,7 +2,9 @@
 
 import com.badlogic.gdx.math.Matrix4;
 
-
+/**
+ * @brief models a common way of rendering Map objects
+ */
 public interface MapRenderer {
 
 	public void setProjectionMatrix(Matrix4 projectionMatrix);

File: gdx/src/com/badlogic/gdx/maps/gleed/GleedMapRenderer.java
Patch:
@@ -57,6 +57,8 @@ public class GleedMapRenderer implements MapRenderer, Disposable {
 	
 	/**
 	 * @param map map data that will be used to render
+	 * 
+	 * Uses its own SpriteBatch
 	 */
 	public GleedMapRenderer(Map map) {
 		this(map, new SpriteBatch(), 1.0f);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RepeatAction.java
Patch:
@@ -27,6 +27,7 @@ public class RepeatAction extends DelegateAction {
 	public boolean act (float delta) {
 		if (executedCount == repeatCount) return true;
 		if (action.act(delta)) {
+			if (finished) return true;
 			if (repeatCount > 0) executedCount++;
 			if (executedCount == repeatCount) return true;
 			if (action != null) action.restart();

File: gdx/src/com/badlogic/gdx/maps/loaders/GleedMapLoader.java
Patch:
@@ -341,7 +341,7 @@ private RectangleMapObject loadRectangle(Element item) {
 		
 		Element position = item.getChildByName("Position");
 		rectangle.getRectangle().set(Float.parseFloat(position.getChildByName("X").getText()),
-											  Float.parseFloat(position.getChildByName("Y").getText()),
+											  -Float.parseFloat(position.getChildByName("Y").getText()),
 											  Float.parseFloat(item.getChildByName("Width").getText()),
 											  Float.parseFloat(item.getChildByName("Height").getText()));
 		

File: gdx/src/com/badlogic/gdx/maps/loaders/GleedMapLoader.java
Patch:
@@ -341,7 +341,7 @@ private RectangleMapObject loadRectangle(Element item) {
 		
 		Element position = item.getChildByName("Position");
 		rectangle.getRectangle().set(Float.parseFloat(position.getChildByName("X").getText()),
-											  Float.parseFloat(position.getChildByName("Y").getText()),
+											  -Float.parseFloat(position.getChildByName("Y").getText()),
 											  Float.parseFloat(item.getChildByName("Width").getText()),
 											  Float.parseFloat(item.getChildByName("Height").getText()));
 		

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/Map.java
Patch:
@@ -36,7 +36,6 @@ private void loadBinary () {
 		for (int y = 0; y < 35; y++) {
 			for (int x = 0; x < 150; x++) {
 				int pix = (pixmap.getPixel(x, y) >>> 8) & 0xffffff;
-				Gdx.app.log("Map", x + ", " + y + ", " + Integer.toHexString(pix));
 				if (match(pix, START)) {
 					Dispenser dispenser = new Dispenser(x, pixmap.getHeight() - 1 - y);
 					dispensers.add(dispenser);

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/MapRenderer.java
Patch:
@@ -134,7 +134,6 @@ public void render (float deltaTime) {
 			}
 		}
 		cache.end();
-		Gdx.app.debug("Cubocy", "blocks: " + b);
 		stateTime += deltaTime;
 		batch.setProjectionMatrix(cam.combined);
 		batch.begin();

File: gdx/src/com/badlogic/gdx/math/Quaternion.java
Patch:
@@ -18,7 +18,9 @@
 
 import java.io.Serializable;
 
-/** A simple quaternion class. See http://en.wikipedia.org/wiki/Quaternion for more information.
+/** A simple quaternion class. See 
+ * <a href="http://en.wikipedia.org/wiki/Quaternion">http://en.wikipedia.org/wiki/Quaternion</a>
+ * for more information.
  * 
  * @author badlogicgames@gmail.com
  * @author vesuvio */

File: gdx/src/com/badlogic/gdx/files/FileHandleStream.java
Patch:
@@ -26,6 +26,7 @@
  * that would manipulate the file instead throw UnsupportedOperationException.
  * @author Nathan Sweet */
 public abstract class FileHandleStream extends FileHandle {
+	/** Create an {@link FileType#Absolute} file at the given location. */
 	public FileHandleStream (String path) {
 		super(new File(path), FileType.Absolute);
 	}

File: gdx/src/com/badlogic/gdx/math/Quaternion.java
Patch:
@@ -18,7 +18,9 @@
 
 import java.io.Serializable;
 
-/** A simple quaternion class. See http://en.wikipedia.org/wiki/Quaternion for more information.
+/** A simple quaternion class. See 
+ * <a href="http://en.wikipedia.org/wiki/Quaternion">http://en.wikipedia.org/wiki/Quaternion</a>
+ * for more information.
  * 
  * @author badlogicgames@gmail.com
  * @author vesuvio */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -37,15 +37,16 @@
 import com.badlogic.gdx.utils.Pools;
 import com.badlogic.gdx.utils.SnapshotArray;
 
-/** A 2D scenegraph containing hierarchies of {@link Actor actors}. Stage handles the viewport and distributing input events.
+/** A 2D scene graph containing hierarchies of {@link Actor actors}. Stage handles the viewport and distributes input events.
  * <p>
  * A stage fills the whole screen. {@link #setViewport} controls the coordinates used within the stage and sets up the camera used
- * to convert between stage coordinates and screen coordinates. *
+ * to convert between stage coordinates and screen coordinates.
  * <p>
  * A stage must receive input events so it can distribute them to actors. This is typically done by passing the stage to
  * {@link Input#setInputProcessor(com.badlogic.gdx.InputProcessor) Gdx.input.setInputProcessor}. An {@link InputMultiplexer} may be
  * used to handle input events before or after the stage does. If an actor handles an event by returning true from the input
  * method, then the stage's input method will also return true, causing subsequent InputProcessors to not receive the event.
+
  * @author mzechner
  * @author Nathan Sweet */
 public class Stage extends InputAdapter implements Disposable {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -644,7 +644,7 @@ public String getMessageText () {
 	}
 
 	/** Sets the text that will be drawn in the text field if no text has been entered.
-	 * @parma messageText May be null. */
+	 * @param messageText may be null. */
 	public void setMessageText (String messageText) {
 		this.messageText = messageText;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -37,15 +37,16 @@
 import com.badlogic.gdx.utils.Pools;
 import com.badlogic.gdx.utils.SnapshotArray;
 
-/** A 2D scenegraph containing hierarchies of {@link Actor actors}. Stage handles the viewport and distributing input events.
+/** A 2D scene graph containing hierarchies of {@link Actor actors}. Stage handles the viewport and distributes input events.
  * <p>
  * A stage fills the whole screen. {@link #setViewport} controls the coordinates used within the stage and sets up the camera used
- * to convert between stage coordinates and screen coordinates. *
+ * to convert between stage coordinates and screen coordinates.
  * <p>
  * A stage must receive input events so it can distribute them to actors. This is typically done by passing the stage to
  * {@link Input#setInputProcessor(com.badlogic.gdx.InputProcessor) Gdx.input.setInputProcessor}. An {@link InputMultiplexer} may be
  * used to handle input events before or after the stage does. If an actor handles an event by returning true from the input
  * method, then the stage's input method will also return true, causing subsequent InputProcessors to not receive the event.
+
  * @author mzechner
  * @author Nathan Sweet */
 public class Stage extends InputAdapter implements Disposable {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -644,7 +644,7 @@ public String getMessageText () {
 	}
 
 	/** Sets the text that will be drawn in the text field if no text has been entered.
-	 * @parma messageText May be null. */
+	 * @param messageText may be null. */
 	public void setMessageText (String messageText) {
 		this.messageText = messageText;
 	}

File: demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/GLFieldRenderer.java
Patch:
@@ -29,20 +29,20 @@ public void drawLine (float x1, float y1, float x2, float y2, int r, int g, int
 	@Override
 	public void fillCircle (float cx, float cy, float radius, int r, int g, int b) {
 		end();
-		renderer.begin(ShapeType.FilledCircle);
+		renderer.begin(ShapeType.Filled);
 		float fr = r / 255f;
 		float fg = g / 255f;
 		float fb = b / 255f;
 		renderer.setColor(fr, fg, fb, 1);
-		renderer.filledCircle(cx, cy, radius, 20);
+		renderer.circle(cx, cy, radius, 20);
 		end();
 		begin();
 	}
 
 	@Override
 	public void frameCircle (float cx, float cy, float radius, int r, int g, int b) {
 		end();
-		renderer.begin(ShapeType.Circle);
+		renderer.begin(ShapeType.Line);
 		float fr = r / 255f;
 		float fg = g / 255f;
 		float fb = b / 255f;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LocalLwjglTest.java
Patch:
@@ -65,7 +65,7 @@ public void render () {
 
 		renderer.setColor(1, 0, 0, 1);
 		renderer.translate(0, -4, 0);
-		renderer.begin(ShapeType.Triangle);
+		renderer.begin(ShapeType.Filled);
 		for (int i = 0; i < triangles.size(); i += 3) {
 			Vector2 v1 = triangles.get(i);
 			Vector2 v2 = triangles.get(i + 1);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontMetricsTest.java
Patch:
@@ -83,9 +83,9 @@ public void render () {
 
 		spriteBatch.end();
 
-		renderer.begin(ShapeType.FilledRectangle);
+		renderer.begin(ShapeType.Filled);
 		renderer.setColor(Color.BLACK);
-		renderer.filledRect(x - 3, y - 3, 6, 6);
+		renderer.rect(x - 3, y - 3, 6, 6);
 		renderer.end();
 
 		float baseline = y - font.getCapHeight();
@@ -104,7 +104,7 @@ public void render () {
 		renderer.line(0, y - font.getLineHeight(), 9999, y - font.getLineHeight());
 		renderer.end();
 
-		renderer.begin(ShapeType.Rectangle);
+		renderer.begin(ShapeType.Line);
 		renderer.setColor(Color.BLUE);
 		renderer.rect(x, y, bounds.width, -bounds.height);
 		renderer.end();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontTest.java
Patch:
@@ -76,7 +76,7 @@ public void render () {
 
 		spriteBatch.end();
 
-		renderer.begin(ShapeType.Rectangle);
+		renderer.begin(ShapeType.Line);
 		renderer.rect(x, viewHeight - y, x + alignmentWidth, 300);
 		renderer.end();
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
Patch:
@@ -310,7 +310,7 @@ private void renderBox (Body body, float halfWidth, float halfHeight) {
 		transform.rotate(0, 0, 1, (float)Math.toDegrees(angle));
 
 		// render the box
-		renderer.begin(ShapeType.Rectangle);
+		renderer.begin(ShapeType.Line);
 		renderer.setTransformMatrix(transform);
 		renderer.setColor(1, 1, 1, 1);
 		renderer.rect(-halfWidth, -halfHeight, halfWidth * 2, halfHeight * 2);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InterpolationTest.java
Patch:
@@ -89,7 +89,7 @@ public void render () {
 
 		renderer.setProjectionMatrix(stage.getCamera().combined);
 
-		renderer.begin(ShapeType.Box);
+		renderer.begin(ShapeType.Line);
 		renderer.box(x, y, 0, size, size, 0);
 		renderer.end();
 
@@ -108,8 +108,8 @@ public void render () {
 
 		timer += Gdx.graphics.getDeltaTime();
 		Vector2 current = getCurrentPosition();
-		renderer.begin(ShapeType.FilledRectangle);
-		renderer.filledRect(current.x, current.y, 20, 20);
+		renderer.begin(ShapeType.Filled);
+		renderer.rect(current.x, current.y, 20, 20);
 		renderer.end();
 
 		stage.act(Gdx.graphics.getDeltaTime());

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MultitouchTest.java
Patch:
@@ -39,7 +39,7 @@ public void render () {
 		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		camera.update();
 		renderer.setProjectionMatrix(camera.combined);
-		renderer.begin(ShapeType.FilledTriangle);
+		renderer.begin(ShapeType.Filled);
 		int size = Math.max(Gdx.graphics.getWidth(), Gdx.graphics.getHeight()) / 10;
 		for (int i = 0; i < 10; i++) {
 			if (Gdx.input.isTouched(i) == false) continue;
@@ -48,7 +48,7 @@ public void render () {
 			float y = Gdx.graphics.getHeight() - Gdx.input.getY(i) - 1;
 			Color color = colors[i % colors.length];
 			renderer.setColor(color);
-			renderer.filledTriangle(x, y + size, x + size, y - size, x - size, y - size);
+			renderer.triangle(x, y + size, x + size, y - size, x - size, y - size);
 		}
 		renderer.end();
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PolygonRegionTest.java
Patch:
@@ -176,9 +176,9 @@ public void draw (PolygonRegion region, float x, float y, float originX, float o
 			renderer.end();
 
 			renderer.setColor(Color.BLUE);
-			renderer.begin(ShapeType.FilledCircle);
+			renderer.begin(ShapeType.Filled);
 
-			renderer.filledCircle(worldOriginX, worldOriginY, 4);
+			renderer.circle(worldOriginX, worldOriginY, 4);
 
 			renderer.end();
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PolygonSpriteTest.java
Patch:
@@ -97,7 +97,7 @@ public void render () {
 		// Some debug rendering, bounding box & origin of one sprite
 		renderer.setProjectionMatrix(camera.combined);
 		renderer.setColor(Color.GREEN);
-		renderer.begin(ShapeType.Rectangle);
+		renderer.begin(ShapeType.Line);
 
 		PolygonSprite sprite = sprites.get(49);
 
@@ -106,9 +106,9 @@ public void render () {
 
 		renderer.end();
 
-		renderer.begin(ShapeType.FilledCircle);
+		renderer.begin(ShapeType.Filled);
 
-		renderer.filledCircle(sprite.getX() + sprite.getOriginX(), sprite.getY() + sprite.getOriginY(), 4);
+		renderer.circle(sprite.getX() + sprite.getOriginX(), sprite.getY() + sprite.getOriginY(), 4);
 
 		renderer.end();
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureAtlasTest.java
Patch:
@@ -90,7 +90,7 @@ public void render () {
 		// star.draw(batch);
 		// font.draw(batch, "This font was packed!", 26, 65);
 		badlogicSmall.draw(batch);
-		renderer.begin(ShapeType.Rectangle);
+		renderer.begin(ShapeType.Line);
 		renderer.rect(10, 10, 256, 256);
 		renderer.end();
 		// batch.draw(jumpAnimation.getKeyFrame(time, true), 100, 100);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Vector2dTest.java
Patch:
@@ -44,9 +44,9 @@ public void render () {
 		renderer.setProjectionMatrix(camera.combined);
 		
 		// Render the 'lerp' vector target as a circle
-		renderer.begin(ShapeType.FilledCircle);
+		renderer.begin(ShapeType.Filled);
 		renderer.setColor(1.0f, 0, 0, 0.3f);
-		renderer.filledCircle(-2 + lerpTarget.x, 2 + lerpTarget.y , 0.08f, 16);
+		renderer.circle(-2 + lerpTarget.x, 2 + lerpTarget.y , 0.08f, 16);
 		renderer.end();
 
 		renderer.begin(ShapeType.Line);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtInputTest.java
Patch:
@@ -35,12 +35,12 @@ public void create () {
 	public void render () {
 		Gdx.gl.glClearColor(0, 0, 0, 1);
 		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
-		renderer.begin(ShapeType.FilledRectangle);
+		renderer.begin(ShapeType.Filled);
 		if (Gdx.input.isTouched())
 			renderer.setColor(Color.RED);
 		else
 			renderer.setColor(Color.GREEN);
-		renderer.filledRect(Gdx.input.getX() - 15, Gdx.graphics.getHeight() - Gdx.input.getY() - 15, 30, 30);
+		renderer.rect(Gdx.input.getX() - 15, Gdx.graphics.getHeight() - Gdx.input.getY() - 15, 30, 30);
 		renderer.end();
 	}
 

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/TexturePackerTest.java
Patch:
@@ -81,15 +81,15 @@ public void render () {
 		int x = 20, y = 20;
 		for (Page page : pages) {
 			renderer.setColor(Color.GRAY);
-			renderer.begin(ShapeType.FilledRectangle);
+			renderer.begin(ShapeType.Filled);
 			for (int i = 0; i < page.outputRects.size; i++) {
 				Rect rect = page.outputRects.get(i);
-				renderer.filledRect(x + rect.x + settings.paddingX, y + rect.y + settings.paddingY, rect.width - settings.paddingX,
+				renderer.rect(x + rect.x + settings.paddingX, y + rect.y + settings.paddingY, rect.width - settings.paddingX,
 					rect.height - settings.paddingY);
 			}
 			renderer.end();
 			renderer.setColor(Color.RED);
-			renderer.begin(ShapeType.Rectangle);
+			renderer.begin(ShapeType.Line);
 			for (int i = 0; i < page.outputRects.size; i++) {
 				Rect rect = page.outputRects.get(i);
 				renderer.rect(x + rect.x + settings.paddingX, y + rect.y + settings.paddingY, rect.width - settings.paddingX,

File: gdx/src/com/badlogic/gdx/utils/StringBuilder.java
Patch:
@@ -706,7 +706,7 @@ public StringBuilder append (char c) {
 	}
 
 	/** Appends the string representation of the specified {@code int} value. The {@code int} value is converted to a string
-	 * according to the rule defined by {@link String#valueOf(int)}.
+	 * without memory allocation.
 	 * 
 	 * @param i the {@code int} value to append.
 	 * @return this builder.
@@ -774,7 +774,7 @@ public StringBuilder append (long lng) {
 	}
 
 	/** Appends the string representation of the specified {@code float} value. The {@code float} value is converted to a string
-	 * without memory allocation.
+	 * according to the rule defined by {@link String#valueOf(float)}.
 	 * 
 	 * @param f the {@code float} value to append.
 	 * @return this builder. */

File: gdx/src/com/badlogic/gdx/ApplicationAdapter.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.badlogic.gdx;
 
-/** Convenience implementation of {@link ApplicationListener}. Derrive from this and only override what you need.
+/** Convenience implementation of {@link ApplicationListener}. Derive from this and only override what you need.
  * @author mzechner */
 public abstract class ApplicationAdapter implements ApplicationListener {
 	@Override

File: gdx/src/com/badlogic/gdx/Net.java
Patch:
@@ -97,7 +97,6 @@ public static interface HttpResponse {
 	 * <ul>
 	 * <li>GET</li>
 	 * <li>POST</li>
-	 * <li>JSON</li>
 	 * </ul> */
 	public static interface HttpMethods {
 

File: gdx/src/com/badlogic/gdx/StreamUtils.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.badlogic.gdx.Net.HttpRequest;
 
-/** Provides utility methods to work streams */
+/** Provides utility methods to copy streams */
 public class StreamUtils {
 
 	/** Copy the data from an {@link InputStream} to an {@link OutputStream}.

File: gdx/src/com/badlogic/gdx/Version.java
Patch:
@@ -20,6 +20,6 @@
  * 
  * @author mzechner */
 public class Version {
-	/** the current version of libgdx in the major.minor format **/
+	/** the current version of libgdx in the major.minor.minorer format **/
 	public static String VERSION = "0.9.9";
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -28,7 +28,7 @@
 import com.badlogic.gdx.scenes.scene2d.utils.Drawable;
 import com.badlogic.gdx.utils.Pools;
 
-/** A slider is a horizontal indicator that allows a user to set a value. The slider his a range (min, max) and a stepping between
+/** A slider is a horizontal indicator that allows a user to set a value. The slider has a range (min, max) and a stepping between
  * each value the slider represents.
  * <p>
  * {@link ChangeEvent} is fired when the slider knob is moved. Cancelling the event will move the knob to where it was previously.

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -28,7 +28,7 @@
 import com.badlogic.gdx.scenes.scene2d.utils.Drawable;
 import com.badlogic.gdx.utils.Pools;
 
-/** A slider is a horizontal indicator that allows a user to set a value. The slider his a range (min, max) and a stepping between
+/** A slider is a horizontal indicator that allows a user to set a value. The slider has a range (min, max) and a stepping between
  * each value the slider represents.
  * <p>
  * {@link ChangeEvent} is fired when the slider knob is moved. Cancelling the event will move the knob to where it was previously.

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -190,7 +190,7 @@ public int indexOf (T value, boolean identity) {
 	 * Returns an index of last occurrence of value in array or -1 if no such value exists.
 	 * Search is started from the end of an array.
 	 * @param identity If true, == comparison will be used. If false, .equals() comparison will be used.
-	 * @return An index of first occurrence of value in array or -1 if no such value exists
+	 * @return An index of last occurrence of value in array or -1 if no such value exists
 	 */
 	public int lastIndexOf (T value, boolean identity) {
 		T[] items = this.items;

File: gdx/src/com/badlogic/gdx/ApplicationAdapter.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.badlogic.gdx;
 
-/** Convenience implementation of {@link ApplicationListener}. Derrive from this and only override what you need.
+/** Convenience implementation of {@link ApplicationListener}. Derive from this and only override what you need.
  * @author mzechner */
 public abstract class ApplicationAdapter implements ApplicationListener {
 	@Override

File: gdx/src/com/badlogic/gdx/Net.java
Patch:
@@ -97,7 +97,6 @@ public static interface HttpResponse {
 	 * <ul>
 	 * <li>GET</li>
 	 * <li>POST</li>
-	 * <li>JSON</li>
 	 * </ul> */
 	public static interface HttpMethods {
 

File: gdx/src/com/badlogic/gdx/StreamUtils.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.badlogic.gdx.Net.HttpRequest;
 
-/** Provides utility methods to work streams */
+/** Provides utility methods to copy streams */
 public class StreamUtils {
 
 	/** Copy the data from an {@link InputStream} to an {@link OutputStream}.

File: gdx/src/com/badlogic/gdx/Version.java
Patch:
@@ -20,6 +20,6 @@
  * 
  * @author mzechner */
 public class Version {
-	/** the current version of libgdx in the major.minor format **/
+	/** the current version of libgdx in the major.minor.minorer format **/
 	public static String VERSION = "0.9.9";
 }

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSApplicationConfiguration.java
Patch:
@@ -72,9 +72,9 @@ public class IOSApplicationConfiguration {
 	/** the update interval to poll the accelerometer with, in seconds **/
 	public float accelerometerUpdate = 0.05f;
 	
-	/** whether Monotouch GL20 implementation should be used or not, false by default, so native iosgles20 is used. */
-	public boolean useMonotouchOpenTK = false;
+	/** whether Monotouch GL20 implementation should be used or not, true by default, native iosgles20 is used when set to false. */
+	public boolean useMonotouchOpenTK = true;
 	
 	/** whether to use ObjectAL for sound implementation or not.  */
-	public boolean useObjectAL = false;
+	public boolean useObjectAL = true;
 }

File: extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllersBuild.java
Patch:
@@ -86,7 +86,7 @@ public static void main (String[] args) throws Exception {
 		mac.libraries = "-framework CoreServices -framework Carbon -framework IOKit -framework Cocoa";
 		
 		new AntScriptGenerator().generate(buildConfig, win32home, win32, win64, lin32, lin64, mac);
-		if(!BuildExecutor.executeAnt("jni/build-macosx32.xml", "-Dhas-compiler=true -v clean postcompile")) {
+		if(!BuildExecutor.executeAnt("jni/build-macosx32.xml", "-Dhas-compiler=true -v postcompile")) {
 			throw new Exception("build failed");
 		}
 		BuildExecutor.executeAnt("jni/build.xml", "pack-natives");

File: extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllersBuild.java
Patch:
@@ -86,7 +86,7 @@ public static void main (String[] args) throws Exception {
 		mac.libraries = "-framework CoreServices -framework Carbon -framework IOKit -framework Cocoa";
 		
 		new AntScriptGenerator().generate(buildConfig, win32home, win32, win64, lin32, lin64, mac);
-		if(!BuildExecutor.executeAnt("jni/build-macosx32.xml", "-Dhas-compiler=true -v postcompile")) {
+		if(!BuildExecutor.executeAnt("jni/build-macosx32.xml", "-Dhas-compiler=true -v clean postcompile")) {
 			throw new Exception("build failed");
 		}
 		BuildExecutor.executeAnt("jni/build.xml", "pack-natives");

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -32,10 +32,10 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
-//		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
+		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new InverseKinematicsTest();
+		GdxTest test = new GamepadTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -209,7 +209,7 @@ public float getValue () {
 
 	/** If {@link #setAnimateDuration(float) animating} the slider value, this returns the value current displayed. */
 	public float getVisualValue () {
-		if (animateTime > 0) return animateInterpolation.apply(animateFromValue, value, animateTime / animateDuration);
+		if (animateTime > 0) return animateInterpolation.apply(animateFromValue, value, 1 - animateTime / animateDuration);
 		return value;
 	}
 
@@ -219,13 +219,14 @@ public void setValue (float value) {
 		value = MathUtils.clamp(Math.round(value / stepSize) * stepSize, min, max);
 		float oldValue = this.value;
 		if (value == oldValue) return;
+		float oldVisualValue = getVisualValue();
 		this.value = value;
 		ChangeEvent changeEvent = Pools.obtain(ChangeEvent.class);
 		if (fire(changeEvent))
 			this.value = oldValue;
 		else if (animateDuration > 0) {
+			animateFromValue = oldVisualValue;
 			animateTime = animateDuration;
-			animateFromValue = getVisualValue();
 		}
 		Pools.free(changeEvent);
 	}

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -40,4 +40,6 @@ public static void main (String[] argv) {
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);
 	}
+	
+	
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -27,12 +27,12 @@
 import com.badlogic.gdx.scenes.scene2d.ui.Button;
 import com.badlogic.gdx.scenes.scene2d.ui.Button.ButtonStyle;
 import com.badlogic.gdx.scenes.scene2d.ui.CheckBox;
+import com.badlogic.gdx.scenes.scene2d.ui.Dialog;
 import com.badlogic.gdx.scenes.scene2d.ui.Image;
 import com.badlogic.gdx.scenes.scene2d.ui.ImageButton;
 import com.badlogic.gdx.scenes.scene2d.ui.ImageButton.ImageButtonStyle;
 import com.badlogic.gdx.scenes.scene2d.ui.Label;
 import com.badlogic.gdx.scenes.scene2d.ui.List;
-import com.badlogic.gdx.scenes.scene2d.ui.Dialog;
 import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;
 import com.badlogic.gdx.scenes.scene2d.ui.SelectBox;
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
@@ -59,7 +59,6 @@ public class UITest extends GdxTest {
 	SpriteBatch batch;
 	Texture texture1;
 	Texture texture2;
-	Actor root;
 	Label fpsLabel;
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -34,6 +34,7 @@
 import java.util.List;
 
 import com.badlogic.gdx.tests.*;
+import com.badlogic.gdx.tests.bench.TiledMapBench;
 import com.badlogic.gdx.tests.examples.MoveSpriteExample;
 import com.badlogic.gdx.tests.extensions.GLEEDTest;
 import com.badlogic.gdx.tests.gles2.HelloTriangle;
@@ -75,7 +76,7 @@ public class GdxTests {
 		// InternationalFontsTest.class, VorbisTest.class
 		TextButtonTest.class, TextButtonTestGL2.class, TextureBindTest.class, SortedSpriteTest.class,
 		ExternalMusicTest.class, SoftKeyboardTest.class, DirtyRenderingTest.class, YDownTest.class,
-		ScreenCaptureTest.class, BitmapFontTest.class, LabelScaleTest.class, GLEEDTest.class, GamepadTest.class, NetAPITest.class, TiledMapTest.class));
+		ScreenCaptureTest.class, BitmapFontTest.class, LabelScaleTest.class, GLEEDTest.class, GamepadTest.class, NetAPITest.class, TiledMapTest.class, TiledMapBench.class));
 	
 	public static List<String> getNames () {
 		List<String> names = new ArrayList<String>(tests.size());

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/TexturePacker2.java
Patch:
@@ -131,10 +131,10 @@ private void writeImages (File outputDir, Array<Page> pages, String packFileName
 					int imageHeight = image.getHeight();
 					// Copy corner pixels to fill corners of the padding.
 					g.drawImage(image, rectX - amountX, rectY - amountY, rectX, rectY, 0, 0, 1, 1, null);
-					g.drawImage(image, rectX + imageWidth, rectY - amountY, rectX + imageWidth + amountX, rectY, 0, 0, 1, 1, null);
-					g.drawImage(image, rectX - amountX, rectY + imageHeight, rectX, rectY + imageHeight + amountY, 0, 0, 1, 1, null);
+					g.drawImage(image, rectX + imageWidth, rectY - amountY, rectX + imageWidth + amountX, rectY, imageWidth - 1, 0, imageWidth, 1, null);
+					g.drawImage(image, rectX - amountX, rectY + imageHeight, rectX, rectY + imageHeight + amountY, 0, imageHeight - 1, 1, imageHeight, null);
 					g.drawImage(image, rectX + imageWidth, rectY + imageHeight, rectX + imageWidth + amountX, rectY + imageHeight
-						+ amountY, 0, 0, 1, 1, null);
+						+ amountY, imageWidth - 1, imageHeight - 1, imageWidth, imageHeight, null);
 					// Copy edge pixels into padding.
 					g.drawImage(image, rectX, rectY - amountY, rectX + imageWidth, rectY, 0, 0, imageWidth, 1, null);
 					g.drawImage(image, rectX, rectY + imageHeight, rectX + imageWidth, rectY + imageHeight + amountY, 0,

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/TexturePacker2.java
Patch:
@@ -131,10 +131,10 @@ private void writeImages (File outputDir, Array<Page> pages, String packFileName
 					int imageHeight = image.getHeight();
 					// Copy corner pixels to fill corners of the padding.
 					g.drawImage(image, rectX - amountX, rectY - amountY, rectX, rectY, 0, 0, 1, 1, null);
-					g.drawImage(image, rectX + imageWidth, rectY - amountY, rectX + imageWidth + amountX, rectY, 0, 0, 1, 1, null);
-					g.drawImage(image, rectX - amountX, rectY + imageHeight, rectX, rectY + imageHeight + amountY, 0, 0, 1, 1, null);
+					g.drawImage(image, rectX + imageWidth, rectY - amountY, rectX + imageWidth + amountX, rectY, imageWidth - 1, 0, imageWidth, 1, null);
+					g.drawImage(image, rectX - amountX, rectY + imageHeight, rectX, rectY + imageHeight + amountY, 0, imageHeight - 1, 1, imageHeight, null);
 					g.drawImage(image, rectX + imageWidth, rectY + imageHeight, rectX + imageWidth + amountX, rectY + imageHeight
-						+ amountY, 0, 0, 1, 1, null);
+						+ amountY, imageWidth - 1, imageHeight - 1, imageWidth, imageHeight, null);
 					// Copy edge pixels into padding.
 					g.drawImage(image, rectX, rectY - amountY, rectX + imageWidth, rectY, 0, 0, imageWidth, 1, null);
 					g.drawImage(image, rectX, rectY + imageHeight, rectX + imageWidth, rectY + imageHeight + amountY, 0,

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.tests.GamepadTest;
 import com.badlogic.gdx.tests.YDownTest;
+import com.badlogic.gdx.tests.extensions.FreeTypeTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
@@ -32,7 +33,7 @@ public static void main (String[] argv) {
 //		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new GamepadTest();
+		GdxTest test = new FreeTypeTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypeTest.java
Patch:
@@ -45,7 +45,7 @@ public void create () {
 		font = new BitmapFont(Gdx.files.internal("data/arial-15.fnt"), flip);
 		FileHandle fontFile = Gdx.files.internal("data/arial.ttf");
 		FreeTypeFontGenerator generator = new FreeTypeFontGenerator(fontFile);
-		FreeTypeBitmapFontData fontData = generator.generateData(15, FreeTypeFontGenerator.DEFAULT_CHARS, flip);
+		FreeTypeBitmapFontData fontData = generator.generateData(15, FreeTypeFontGenerator.DEFAULT_CHARS, flip);		
 		generator.dispose();
 		ftFont = new BitmapFont(fontData, fontData.getTextureRegion(), false);
 	}

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/Daydream.java
Patch:
@@ -28,7 +28,7 @@ public class Daydream extends AndroidDaydream {
 	@Override
 	public void onAttachedToWindow() {
 		super.onAttachedToWindow();
-		
+
 		Log.i("Andrew", "hi");
 
 		AndroidApplicationConfiguration cfg = new AndroidApplicationConfiguration();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PixmapPackerTest.java
Patch:
@@ -32,7 +32,7 @@ public void create () {
 		Pixmap pixmap2 = new Pixmap(Gdx.files.internal("data/wheel.png"));
 		Pixmap pixmap3 = new Pixmap(Gdx.files.internal("data/egg.png"));
 		
-		PixmapPacker packer =  new PixmapPacker(512, 512, Format.RGBA8888, 2, true);
+		PixmapPacker packer =  new PixmapPacker(1024, 1024, Format.RGBA8888, 2, true);
 		packer.pack("badlogic", pixmap1);
 		packer.pack("wheel", pixmap1);
 		packer.pack("egg", pixmap1);

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/GdxTestActivity.java
Patch:
@@ -34,7 +34,6 @@ public void onCreate (Bundle bundle) {
 		GdxTest test = GdxTests.newTest(testName);
 		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
-		config.numSamples = 2;
 		initialize(test, config);
 	}
 }

File: tests/gdx-tests-gwt/src/com/badlogic/gdx/tests/gwt/client/GwtTestStarter.java
Patch:
@@ -30,6 +30,6 @@ public GwtApplicationConfiguration getConfig () {
 
 	@Override
 	public ApplicationListener getApplicationListener () {
-		return new UITest();
+		return new GwtTestWrapper();
 	}
 }

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -825,14 +825,14 @@ public <T> T readValue (Class<T> type, Class elementType, Object jsonData) {
 		if (jsonData instanceof Array) {
 			Array array = (Array)jsonData;
 			if (type == null || Array.class.isAssignableFrom(type)) {
-				Array newArray = (Array)newInstance(type);
+				Array newArray = type == null ? new Array() : (Array)newInstance(type);
 				newArray.ensureCapacity(array.size);
 				for (int i = 0, n = array.size; i < n; i++)
 					newArray.add(readValue(elementType, null, array.get(i)));
 				return (T)newArray;
 			}
 			if (ArrayList.class.isAssignableFrom(type)) {
-				ArrayList newArray = (ArrayList)newInstance(type);
+				ArrayList newArray = type == null ? new ArrayList() : (ArrayList)newInstance(type);
 				newArray.ensureCapacity(array.size);
 				for (int i = 0, n = array.size; i < n; i++)
 					newArray.add(readValue(elementType, null, array.get(i)));

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/MainMenu.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.controllers.ControllerListener;
 import com.badlogic.gdx.controllers.Controllers;
 import com.badlogic.gdx.controllers.PovDirection;
+import com.badlogic.gdx.controllers.mappings.Ouya;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Texture;
@@ -62,7 +63,7 @@ public MainMenu () {
 		// Ouya.
 		if(Controllers.getControllers().size > 0) {
 			Controller controller = Controllers.getControllers().get(0);
-			if(controller.getName().toLowerCase().contains("ouya")) {
+			if(Ouya.ID.equals(controller.getName())) {
 				controller.addListener(new ControllerAdapter() {
 					@Override
 					public boolean buttonUp (Controller controller, int buttonIndex) {

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Simulation.java
Patch:
@@ -196,7 +196,7 @@ private void checkNextLevel () {
 			populate();
 			ship.position.set(shipPosition);
 			ship.lives = lives;
-			multiplier += 0.1f;
+			multiplier += 0.2f;
 			wave++;
 		}
 	}

File: extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllerManager.java
Patch:
@@ -19,13 +19,15 @@
 import com.badlogic.gdx.controllers.ControllerListener;
 import com.badlogic.gdx.controllers.ControllerManager;
 import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.SharedLibraryLoader;
 
 /** @author Nathan Sweet */
 public class DesktopControllerManager implements ControllerManager {
 	final Array<Controller> controllers = new Array();
 	final Array<ControllerListener> listeners = new Array();
 
 	public DesktopControllerManager () {
+		new SharedLibraryLoader().load("gdx-controllers-desktop");
 		new OisControllers(this);
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/Animation.java
Patch:
@@ -167,6 +167,7 @@ public void setPlayMode (int playMode) {
 	 * @param stateTime
 	 * @return whether the animation is finished. */
 	public boolean isAnimationFinished (float stateTime) {
+		if(playMode != NORMAL && playMode != REVERSED) return false;
 		int frameNumber = (int)(stateTime / frameDuration);
 		return keyFrames.length - 1 < frameNumber;
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/Gdx2DPixmap.java
Patch:
@@ -322,7 +322,7 @@ private static native void drawPixmap (long src, long dst, int srcX, int srcY, i
 		gdx2d_set_scale(scale);
 	*/
 
-        public static native String getFailureReason (); /*
-	        gdx2d_get_failure_reason(void);
-        */
+	public static native String getFailureReason (); /*
+     return env->NewStringUTF(gdx2d_get_failure_reason());
+   */
 }

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java
Patch:
@@ -158,10 +158,10 @@ public synchronized Rectangle pack (String name, Pixmap image) {
 		int borderPixels = padding + (duplicateBorder ? 1 : 0);
 		borderPixels <<= 1;
 
-		if (image.getWidth() >= pageWidth + borderPixels || image.getHeight() >= pageHeight + borderPixels)
-			throw new GdxRuntimeException("page size for '" + name + "' to small");
-
 		Rectangle rect = new Rectangle(0, 0, image.getWidth() + borderPixels, image.getHeight() + borderPixels);
+		if (rect.getWidth() > pageWidth || rect.getHeight() > pageHeight)
+			throw new GdxRuntimeException("page size for '" + name + "' to small");
+		
 		Node node = insert(currPage.root, rect);
 
 		if (node == null) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GamepadTest.java
Patch:
@@ -29,7 +29,7 @@ public class GamepadTest extends GdxTest {
 	@Override
 	public void create () {
 		setupUi();
-		int a = Ouya.BUTTON_A;
+		
 		// print the currently connected controllers to the console
 		print("Controllers: " + Controllers.getControllers().size);
 		int i = 0;

File: gdx/src/com/badlogic/gdx/LifecycleListener.java
Patch:
@@ -9,7 +9,9 @@
  * level development should rely on the {@link ApplicationListener}
  * interface.</p>
  * 
- * The methods will be invoked on the rendering thread.
+ * The methods will be invoked on the rendering thread. The methods
+ * will be executed before the {@link ApplicationListener} methods
+ * are executed.
  * 
  * @author mzechner
  *

File: gdx/src/com/badlogic/gdx/graphics/g2d/Gdx2DPixmap.java
Patch:
@@ -322,7 +322,7 @@ private static native void drawPixmap (long src, long dst, int srcX, int srcY, i
 		gdx2d_set_scale(scale);
 	*/
 
-        public static native String getFailureReason (); /*
-	        gdx2d_get_failure_reason(void);
-        */
+	public static native String getFailureReason (); /*
+     gdx2d_get_failure_reason();
+   */
 }

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java
Patch:
@@ -158,10 +158,10 @@ public synchronized Rectangle pack (String name, Pixmap image) {
 		int borderPixels = padding + (duplicateBorder ? 1 : 0);
 		borderPixels <<= 1;
 
-		if (image.getWidth() >= pageWidth + borderPixels || image.getHeight() >= pageHeight + borderPixels)
-			throw new GdxRuntimeException("page size for '" + name + "' to small");
-
 		Rectangle rect = new Rectangle(0, 0, image.getWidth() + borderPixels, image.getHeight() + borderPixels);
+		if (rect.getWidth() > pageWidth || rect.getHeight() > pageHeight)
+			throw new GdxRuntimeException("page size for '" + name + "' to small");
+		
 		Node node = insert(currPage.root, rect);
 
 		if (node == null) {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaper.java
Patch:
@@ -83,7 +83,7 @@ public void initialize(ApplicationListener listener, AndroidApplicationConfigura
 		graphics = new AndroidGraphicsLiveWallpaper(this, config.useGL20, config.resolutionStrategy==null?new FillResolutionStrategy():config.resolutionStrategy);
 		input = AndroidInputFactory.newAndroidInput(this, this.getService(), null, config);
 		audio = new AndroidAudio(this.getService(), config);
-		files = new AndroidFiles(this.getService().getAssets());
+		files = new AndroidFiles(this.getService().getAssets(), this.getService().getFilesDir().getAbsolutePath());
 		this.listener = listener;
 		
 		Gdx.app = this;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -66,7 +66,7 @@ public class AndroidApplication extends Activity implements Application {
 	protected AndroidFiles files;
 	protected AndroidNet net;
 	protected ApplicationListener listener;
-	protected Handler handler;
+	public Handler handler;
 	protected boolean firstResume = true;
 	protected final Array<Runnable> runnables = new Array<Runnable>();
 	protected final Array<Runnable> executedRunnables = new Array<Runnable>();

File: demos/invaders/gdx-invaders-android/src/com/badlogic/gdxinvaders/GdxInvadersAndroid.java
Patch:
@@ -15,7 +15,7 @@ public void onCreate (Bundle savedInstanceState) {
 		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
 		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
 		config.useWakelock = true;
-		config.useGL20 = true;
+		config.useGL20 = false;
 		initialize(new GdxInvaders(), config);
 	}
 }

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvadersDesktop.java
Patch:
@@ -23,7 +23,7 @@ public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.title = "Gdx Invaders";
 		config.vSyncEnabled = true;
-		config.useGL20 = true;
+		config.useGL20 = false;
 		new LwjglApplication(new GdxInvaders(), config);
 	}
 }

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/RendererGL10.java
Patch:
@@ -30,6 +30,7 @@
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
 import com.badlogic.gdx.graphics.g3d.loaders.wavefront.ObjLoader;
+import com.badlogic.gdx.graphics.g3d.model.SubMesh;
 import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
@@ -235,12 +236,13 @@ private void renderShip (GL10 gl, Ship ship) {
 
 	private void renderInvaders (GL10 gl, ArrayList<Invader> invaders) {
 		invaderTexture.bind();
+		Mesh mesh = invaderMesh.getSubMeshes()[0].mesh;
 		for (int i = 0; i < invaders.size(); i++) {
 			Invader invader = invaders.get(i);
 			gl.glPushMatrix();
 			gl.glTranslatef(invader.position.x, invader.position.y, invader.position.z);
 			gl.glRotatef(invaderAngle, 0, 1, 0);
-			invaderMesh.render();
+			mesh.render(GL10.GL_TRIANGLES);
 			gl.glPopMatrix();
 		}
 	}

File: extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisTest.java
Patch:
@@ -74,6 +74,6 @@ public void render () {
 		};
 
 		new LwjglApplication(app);
-		// new LwjglFrame(app, "Controllers", 200, 200, false);
+//		 new LwjglFrame(app, "Controllers", 200, 200, false);
 	}
 }
\ No newline at end of file

File: gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java
Patch:
@@ -368,10 +368,8 @@ void removeStashIndex (int index) {
 
 	public void clear () {
 		K[] keyTable = this.keyTable;
-		int[] valueTable = this.valueTable;
-		for (int i = capacity + stashSize; i-- > 0;) {
+		for (int i = capacity + stashSize; i-- > 0;)
 			keyTable[i] = null;
-		}
 		size = 0;
 		stashSize = 0;
 	}

File: extensions/gdx-controllers/gdx-controllers-android/src/com/badlogic/gdx/controllers/android/AndroidControllers.java
Patch:
@@ -125,7 +125,6 @@ public boolean onGenericMotion (View view, MotionEvent motionEvent) {
             for (int axisId: controller.axesIds) {
             	float axisValue = motionEvent.getAxisValue(axisId);
             	if(controller.getAxis(axisIndex) == axisValue) {
-            		Gdx.app.log(TAG, "skipped axis " + axisIndex + ", " + axisValue);
             		axisIndex++;
             		continue;
             	}

File: extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/mappings/Ouya.java
Patch:
@@ -1,6 +1,7 @@
 package com.badlogic.gdx.controllers.mappings;
 
 public class Ouya {
+	public static final String ID = "OUYA Game Controller";
 	public static final int BUTTON_O = 96;
 	public static final int BUTTON_U = 97;
 	public static final int BUTTON_Y = 98;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.GamepadTest;
 import com.badlogic.gdx.tests.YDownTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
@@ -28,9 +29,10 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
+		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new YDownTest();
+		GdxTest test = new GamepadTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -74,7 +74,7 @@ public class GdxTests {
 		// InternationalFontsTest.class, VorbisTest.class
 		TextButtonTest.class, TextButtonTestGL2.class, TextureBindTest.class, SortedSpriteTest.class,
 		ExternalMusicTest.class, SoftKeyboardTest.class, DirtyRenderingTest.class, YDownTest.class,
-		ScreenCaptureTest.class, BitmapFontTest.class, LabelScaleTest.class, GLEEDTest.class));
+		ScreenCaptureTest.class, BitmapFontTest.class, LabelScaleTest.class, GLEEDTest.class, GamepadTest.class));
 	
 	public static List<String> getNames () {
 		List<String> names = new ArrayList<String>(tests.size());

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglFrame.java
Patch:
@@ -59,7 +59,6 @@ protected void exception (Throwable t) {
 				LwjglFrame.this.exception(t);
 			}
 		};
-		getContentPane().add(lwjglCanvas.getCanvas());
 
 		Runtime.getRuntime().addShutdownHook(new Thread() {
 			public void run () {
@@ -75,6 +74,7 @@ public void run () {
 		Point location = getLocation();
 		if (location.x == 0 && location.y == 0) setLocationRelativeTo(null);
 		setVisible(true); // Has to happen on OSX before display is created.
+		getContentPane().add(lwjglCanvas.getCanvas());
 		lwjglCanvas.getCanvas().requestFocus();
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -56,6 +56,8 @@ public class LwjglGraphics implements Graphics {
 	LwjglApplicationConfiguration config;
 	BufferFormat bufferFormat = new BufferFormat(8, 8, 8, 8, 16, 8, 0, false);
 	String extensions;
+	volatile boolean isContinuous = true;
+	volatile boolean requestRendering = false;
 
 	LwjglGraphics (LwjglApplicationConfiguration config) {
 		this.config = config;
@@ -416,9 +418,6 @@ public boolean supportsExtension (String extension) {
 		return extensions.contains(extension);
 	}
 
-	volatile boolean isContinuous = true;
-	volatile boolean requestRendering = false;
-
 	@Override
 	public void setContinuousRendering (boolean isContinuous) {
 		this.isContinuous = isContinuous;

File: extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisTest.java
Patch:
@@ -74,6 +74,6 @@ public void render () {
 		};
 
 		new LwjglApplication(app);
-		// new LwjglFrame(app, "Controllers", 200, 200, false);
+//		 new LwjglFrame(app, "Controllers", 200, 200, false);
 	}
 }
\ No newline at end of file

File: extensions/gdx-controllers/gdx-controllers-android/src/com/badlogic/gdx/controllers/android/OuyaControllers.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.backends.android.AndroidInput;
+import com.badlogic.gdx.backends.android.AndroidInputThreePlus;
 import com.badlogic.gdx.controllers.ControlType;
 import com.badlogic.gdx.controllers.Controller;
 import com.badlogic.gdx.controllers.ControllerListener;
@@ -33,7 +34,7 @@ protected Event newObject () {
 
 	public OuyaControllers (final AndroidControllerManager manager) {
 		this.manager = manager;
-		AndroidInput androidInput = (AndroidInput)Gdx.input;
+		AndroidInputThreePlus androidInput = (AndroidInputThreePlus)Gdx.input;
 		androidInput.addKeyListener(new OnKeyListener() {
 			public boolean onKey (View v, int keyCode, KeyEvent event) {
 				boolean handled = false;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -100,7 +100,7 @@ public void initialize (ApplicationListener listener, boolean useGL2IfAvailable)
 	public void initialize (ApplicationListener listener, AndroidApplicationConfiguration config) {
 		graphics = new AndroidGraphics(this, config, config.resolutionStrategy == null ? new FillResolutionStrategy()
 			: config.resolutionStrategy);
-		input = new AndroidInput(this, this, graphics.view, config);
+		input = AndroidInputFactory.newAndroidInput(this, this, graphics.view, config);
 		audio = new AndroidAudio(this, config);
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 		net = new AndroidNet(this);
@@ -188,7 +188,7 @@ public View initializeForView (ApplicationListener listener, boolean useGL2IfAva
 	public View initializeForView (ApplicationListener listener, AndroidApplicationConfiguration config) {
 		graphics = new AndroidGraphics(this, config, config.resolutionStrategy == null ? new FillResolutionStrategy()
 			: config.resolutionStrategy);
-		input = new AndroidInput(this, this, graphics.view, config);
+		input = AndroidInputFactory.newAndroidInput(this, this, graphics.view, config);
 		audio = new AndroidAudio(this, config);
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 		net = new AndroidNet(this);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidDaydream.java
Patch:
@@ -99,7 +99,7 @@ public void initialize (ApplicationListener listener, boolean useGL2IfAvailable)
 	public void initialize (ApplicationListener listener, AndroidApplicationConfiguration config) {
 		graphics = new AndroidGraphicsDaydream(this, config, config.resolutionStrategy == null ? new FillResolutionStrategy()
 			: config.resolutionStrategy);
-		input = new AndroidInput(this, this, graphics.view, config);
+		input = AndroidInputFactory.newAndroidInput(this, this, graphics.view, config);
 		audio = new AndroidAudio(this, config);
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 //		net = new AndroidNet(this);
@@ -182,7 +182,7 @@ public View initializeForView (ApplicationListener listener, boolean useGL2IfAva
 	public View initializeForView (ApplicationListener listener, AndroidApplicationConfiguration config) {
 		graphics = new AndroidGraphicsDaydream(this, config, config.resolutionStrategy == null ? new FillResolutionStrategy()
 			: config.resolutionStrategy);
-		input = new AndroidInput(this, this, graphics.view, config);
+		input = AndroidInputFactory.newAndroidInput(this, this, graphics.view, config);
 		audio = new AndroidAudio(this, config);
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 //		net = new AndroidNet(this);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaper.java
Patch:
@@ -81,7 +81,7 @@ public AndroidLiveWallpaper(WallpaperService service, Engine engine) {
 	
 	public void initialize(ApplicationListener listener, AndroidApplicationConfiguration config) {
 		graphics = new AndroidGraphicsLiveWallpaper(this, config.useGL20, config.resolutionStrategy==null?new FillResolutionStrategy():config.resolutionStrategy);
-		input = new AndroidInput(this, this.getService(), null, config);
+		input = AndroidInputFactory.newAndroidInput(this, this.getService(), null, config);
 		audio = new AndroidAudio(this.getService(), config);
 		files = new AndroidFiles(this.getService().getAssets());
 		this.listener = listener;

File: extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllersBuild.java
Patch:
@@ -80,6 +80,7 @@ public static void main (String[] args) throws Exception {
 		BuildTarget mac = BuildTarget.newDefaultTarget(TargetOs.MacOsX, false);
 		mac.cppIncludes = macSrc;
 		mac.headerDirs = includes;
+		mac.cppFlags += " -x objective-c++";
 		mac.libraries = "-framework CoreServices -framework Carbon -framework IOKit -framework Cocoa";
 		
 		new AntScriptGenerator().generate(buildConfig, win32home, win32, win64, lin32, lin64, mac);

File: extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllersBuild.java
Patch:
@@ -80,7 +80,7 @@ public static void main (String[] args) throws Exception {
 		BuildTarget mac = BuildTarget.newDefaultTarget(TargetOs.MacOsX, false);
 		mac.cppIncludes = macSrc;
 		mac.headerDirs = includes;
-		mac.libraries = "-framework CoreServices -framework Carbon -framework IOKit";
+		mac.libraries = "-framework CoreServices -framework Carbon -framework IOKit -framework Cocoa";
 		
 		new AntScriptGenerator().generate(buildConfig, win32home, win32, win64, lin32, lin64, mac);
 		if(!BuildExecutor.executeAnt("jni/build-windows32home.xml", "-Dhas-compiler=true -v postcompile")) {

File: extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllersBuild.java
Patch:
@@ -39,7 +39,7 @@ public static void main (String[] args) throws Exception {
 		
 		String[] macSrc = { "*.cpp",
 			"ois-v1-4svn/src/*.cpp",
-			"ois-v1-4svn/src/linux/*.cpp"
+			"ois-v1-4svn/src/mac/*.cpp"
 		};
 		
 		String[] includes = new String[] {

File: extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/DesktopControllersBuild.java
Patch:
@@ -80,7 +80,7 @@ public static void main (String[] args) throws Exception {
 		BuildTarget mac = BuildTarget.newDefaultTarget(TargetOs.MacOsX, false);
 		mac.cppIncludes = macSrc;
 		mac.headerDirs = includes;
-		mac.libraries = ""; // FIXME
+		mac.libraries = "-framework CoreServices -framework Carbon -framework IOKit";
 		
 		new AntScriptGenerator().generate(buildConfig, win32home, win32, win64, lin32, lin64, mac);
 		if(!BuildExecutor.executeAnt("jni/build-windows32home.xml", "-Dhas-compiler=true -v postcompile")) {

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/headers/HeaderFixer.java
Patch:
@@ -42,7 +42,7 @@ protected void processFile (Entry inputFile) throws Exception {
 			if (content.startsWith("package")) {
 				System.out.println("File '" + inputFile.inputFile + "' header fixed");
 				BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileHandle(inputFile.outputFile).write(false)));
-				writer.write(header + "\n" + content);
+				writer.write(header + "\n\n" + content);
 				writer.close();
 			}
 		}

File: extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/ois/OisTest.java
Patch:
@@ -2,7 +2,7 @@
 package com.badlogic.gdx.controllers.desktop.ois;
 
 import com.badlogic.gdx.ApplicationAdapter;
-import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
+import com.badlogic.gdx.backends.lwjgl.LwjglFrame;
 import com.badlogic.gdx.controllers.desktop.DesktopControllersBuild;
 import com.badlogic.gdx.controllers.desktop.OisControllers;
 import com.badlogic.gdx.controllers.desktop.ois.OisJoystick.OisPov;

File: extensions/gdx-controllers/gdx-controllers-android/src/com/badlogic/gdx/controllers/android/OuyaControllers.java
Patch:
@@ -183,9 +183,11 @@ public int getControlCount (ControlType type) {
 		}
 
 		public void addListener (ControllerListener listener) {
+			listeners.add(listener);
 		}
 
 		public void removeListener (ControllerListener listener) {
+			listeners.removeValue(listener, true);
 		}
 
 		public String getName () {

File: extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/DesktopControllers.java
Patch:
@@ -15,7 +15,7 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglFrame;
 import com.badlogic.gdx.controllers.desktop.ois.Ois;
-import com.badlogic.gdx.controllers.desktop.ois.OisCallback;
+import com.badlogic.gdx.controllers.desktop.ois.OisListener;
 import com.badlogic.gdx.controllers.desktop.ois.OisJoystick;
 import com.badlogic.gdx.controllers.desktop.ois.OisJoystick.OisPov;
 import com.badlogic.gdx.utils.GdxRuntimeException;

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java
Patch:
@@ -158,10 +158,10 @@ public synchronized Rectangle pack (String name, Pixmap image) {
 		int borderPixels = padding + (duplicateBorder ? 1 : 0);
 		borderPixels <<= 1;
 
-		if (image.getWidth() >= pageWidth + borderPixels || image.getHeight() >= pageHeight + borderPixels)
-			throw new GdxRuntimeException("page size for '" + name + "' to small");
-
 		Rectangle rect = new Rectangle(0, 0, image.getWidth() + borderPixels, image.getHeight() + borderPixels);
+		if (rect.getWidth() > pageWidth || rect.getHeight() > pageHeight)
+			throw new GdxRuntimeException("page size for '" + name + "' to small");
+		
 		Node node = insert(currPage.root, rect);
 
 		if (node == null) {

File: extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/DesktopControllersBuild.java
Patch:
@@ -29,7 +29,9 @@ public static void main (String[] args) throws Exception {
 		win32home.libraries = "-ldinput8 -ldxguid";
 
 		new AntScriptGenerator().generate(buildConfig, win32home);
-		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-Dhas-compiler=true clean postcompile -v");
+		if(!BuildExecutor.executeAnt("jni/build-windows32home.xml", "-Dhas-compiler=true postcompile -v")) {
+			throw new Exception("build failed");
+		}
 		BuildExecutor.executeAnt("jni/build.xml", "pack-natives");
 	}
 }

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/BuildExecutor.java
Patch:
@@ -32,7 +32,7 @@ public class BuildExecutor {
 	public static void executeAnt (String buildFile, String params) {
 		FileDescriptor build = new FileDescriptor(buildFile);
 		String ant = System.getProperty("os.name").contains("Windows") ? "ant.bat" : "ant";
-		String command = ant + " -f " + build.name() + " " + params;
+		String command = ant + " -f " + build.file().getAbsolutePath() + " " + params;
 		System.out.println("Executing '" + command + "'");
 		startProcess(command, build.parent().file());
 	}
@@ -47,7 +47,8 @@ public static void executeNdk (String directory) {
 
 	private static void startProcess (String command, File directory) {
 		try {
-			final Process process = Runtime.getRuntime().exec(command, null, directory);
+			final Process process = new ProcessBuilder(command.split(" ")).redirectErrorStream(true).start();
+
 			Thread t = new Thread(new Runnable() {
 				@Override
 				public void run () {
@@ -134,7 +135,6 @@ private int getLineNumber (String line) {
 			});
 			t.setDaemon(true);
 			t.start();
-			// FIXME this will hang if Ant detects an error while executing GCC in a process. Why?
 			process.waitFor();
 		} catch (Exception e) {
 			e.printStackTrace();

File: extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/DesktopControllersBuild.java
Patch:
@@ -27,7 +27,7 @@ public static void main (String[] args) throws Exception {
 			"dinput/"
 		};
 		win32home.cIncludes = new String[0];
-		win32home.linkerFlags += " "; // FIXME - Needs to be "-shared -o [modules] -ldinput8 -ldxguid".
+		win32home.libraries = "-ldinput8 -ldxguid";
 
 		new AntScriptGenerator().generate(buildConfig, win32home);
 		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-Dhas-compiler=true clean postcompile -v");

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/AntScriptGenerator.java
Patch:
@@ -227,6 +227,7 @@ private String generateBuildTargetTemplate (BuildConfig config, BuildTarget targ
 		template = template.replace("%cFlags%", target.cFlags);
 		template = template.replace("%cppFlags%", target.cppFlags);
 		template = template.replace("%linkerFlags%", target.linkerFlags);
+		template = template.replace("%libraries%", target.libraries);
 		template = template.replace("%cIncludes%", cIncludes);
 		template = template.replace("%cExcludes%", cExcludes);
 		template = template.replace("%cppIncludes%", cppIncludes);

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/BuildTarget.java
Patch:
@@ -54,6 +54,8 @@ public enum TargetOs {
 	public String preCompileTask;
 	/** Ant Xml executed in a target after compilation **/
 	public String postCompileTask;
+	/** the libraries to be linked to the output, specify via e.g. -ldinput -ldxguid etc. **/
+	public String libraries;
 
 	/** Creates a new build target. See members of this class for a description of the parameters. */
 	public BuildTarget (BuildTarget.TargetOs targetType, boolean is64Bit, String[] cIncludes, String[] cExcludes,
@@ -81,6 +83,7 @@ public BuildTarget (BuildTarget.TargetOs targetType, boolean is64Bit, String[] c
 		this.cFlags = cFlags;
 		this.cppFlags = cppFlags;
 		this.linkerFlags = linkerFlags;
+		this.libraries = "";
 	}
 
 	/** Creates a new default BuildTarget for the given OS, using common default values. */

File: gdx/src/com/badlogic/gdx/utils/GdxNativesLoader.java
Patch:
@@ -65,7 +65,7 @@ static public boolean loadLibrary (String nativeFile32, String nativeFile64) {
 	static public String extractLibrary (String native32, String native64) {
 		String nativeFileName = is64Bit ? native64 : native32;
 		File nativeFile = new File(nativesDir, nativeFileName);
-                if (!nativeFile.exists()) {
+		if (!nativeFile.exists()) {
 		    try {
 			// Extract native from classpath to temp dir.
 			InputStream input = GdxNativesLoader.class.getResourceAsStream("/" + nativeFileName);

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleIndexVertexArray.java
Patch:
@@ -33,10 +33,11 @@ public synchronized void delete()  {
     if (swigCPtr != 0) {
       if (swigCMemOwn) {
         swigCMemOwn = false;
-        gdxBulletJNI.delete_btIndexedMesh(swigCPtr);
+        gdxBulletJNI.delete_btTriangleIndexVertexArray(swigCPtr);
       }
       swigCPtr = 0;
     }
+    super.delete();
 	dispose();
   }
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -61,8 +61,10 @@ public void create () {
 		table.setFillParent(true);
 
 		table.align(Align.center | Align.top);
+		table.columnDefaults(0).expandX().right().uniformX();
+		table.columnDefaults(2).expandX().left().uniformX();
 		table.add(play);
-		table.add(stop);
+		table.add(stop).left();
 		table.row();
 		table.add(new Label("Pitch", skin));
 		table.add(pitch);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Dialog.java
Patch:
@@ -83,7 +83,7 @@ public void scrollFocusChanged (FocusEvent event, Actor actor, boolean focused)
 
 			private void focusChanged (FocusEvent event) {
 				Stage stage = getStage();
-				if (isModal && stage.getRoot().getChildren().peek() == Dialog.this) { // This dialog is the top most actor.
+				if (isModal && stage != null && stage.getRoot().getChildren().peek() == Dialog.this) { // Dialog is top most actor.
 					Actor newFocusedActor = event.getRelatedActor();
 					if (newFocusedActor == null || !newFocusedActor.isDescendantOf(Dialog.this)) event.cancel();
 				}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java
Patch:
@@ -184,7 +184,7 @@ private void computeSize (Array<Node> nodes, float indent) {
 
 	public void layout () {
 		if (sizeInvalid) computeSize();
-		layout(rootNodes, leftColumnWidth + indentSpacing, getHeight() - ySpacing / 2);
+		layout(rootNodes, leftColumnWidth + indentSpacing + iconSpacing, getHeight() - ySpacing / 2);
 	}
 
 	private float layout (Array<Node> nodes, float indent, float y) {

File: extensions/gdx-setup-ui/src/aurelienribon/gdxsetupui/ui/Ctx.java
Patch:
@@ -17,7 +17,7 @@ public static enum Mode {INIT, SETUP, UPDATE}
 	public static final ProjectSetupConfiguration cfgSetup = new ProjectSetupConfiguration();
 	public static final ProjectUpdateConfiguration cfgUpdate = new ProjectUpdateConfiguration();
 	public static final List<Listener> listeners = new CopyOnWriteArrayList<Listener>();
-	public static final LibraryManager libs = new LibraryManager("http://libgdx.googlecode.com/svn/trunk/extensions/gdx-setup-ui/config/config.txt");
+	public static final LibraryManager libs = new LibraryManager("https://raw.github.com/libgdx/libgdx/master/extensions/gdx-setup-ui/config/config.txt");
 	public static String testLibUrl = null;
 	public static LibraryDef testLibDef = null;
 

File: extensions/gdx-setup-ui/src/aurelienribon/gdxsetupui/ui/Ctx.java
Patch:
@@ -17,7 +17,7 @@ public static enum Mode {INIT, SETUP, UPDATE}
 	public static final ProjectSetupConfiguration cfgSetup = new ProjectSetupConfiguration();
 	public static final ProjectUpdateConfiguration cfgUpdate = new ProjectUpdateConfiguration();
 	public static final List<Listener> listeners = new CopyOnWriteArrayList<Listener>();
-	public static final LibraryManager libs = new LibraryManager("http://libgdx.googlecode.com/svn/trunk/extensions/gdx-setup-ui/config/config.txt");
+	public static final LibraryManager libs = new LibraryManager("https://raw.github.com/libgdx/libgdx/master/extensions/gdx-setup-ui/config/config.txt");
 	public static String testLibUrl = null;
 	public static LibraryDef testLibDef = null;
 

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/gen/ReflectionCacheSourceCreator.java
Patch:
@@ -225,7 +225,8 @@ private void gatherTypes (JType type, Set<JType> types) {
 			|| name.contains("java.lang.Character") || name.contains("java.lang.Integer") || name.contains("java.lang.Float")
 			|| name.contains("java.lang.Double") || name.contains("java.lang.CharSequence") || name.contains("java.lang.Object") || !name
 				.contains(".")
-			|| name.contains("com.badlogic.gdx.math"))) {
+			|| name.contains("com.badlogic.gdx.math")
+			|| name.contains("com.badlogic.gdx.graphics.g3d.materials.MaterialAttribute"))) {
 			nesting--;
 			return;
 		}

File: gdx/src/com/badlogic/gdx/utils/PerformanceCounter.java
Patch:
@@ -64,7 +64,7 @@ public PerformanceCounter(final String name, final int windowSize) {
 	public void tick() {
 		final long t = System.nanoTime();
 		if (lastTick > 0L)
-			tick((lastTick - t) * nano2seconds);
+			tick((t - lastTick) * nano2seconds);
 		lastTick = t;
 	}
 	
@@ -78,11 +78,11 @@ public void tick(final float delta) {
 			return;
 		}
 		
-		time.put(delta);
+		time.put(current);
 		
 		final float currentLoad = delta == 0f ? 0f : current / delta;
 		load.put((delta > 1f) ? currentLoad : delta * currentLoad + (1f - delta) * load.latest);
-		
+
 		current = 0f;
 		valid = false;
 	}

File: gdx/src/com/badlogic/gdx/utils/PerformanceCounters.java
Patch:
@@ -40,7 +40,7 @@ public PerformanceCounter add(final String name) {
 	public void tick() {
 		final long t = System.nanoTime();
 		if (lastTick > 0L)
-			tick((lastTick - t) * nano2seconds);
+			tick((t - lastTick) * nano2seconds);
 		lastTick = t;
 	}
 	

File: gdx/src/com/badlogic/gdx/utils/PerformanceCounter.java
Patch:
@@ -64,7 +64,7 @@ public PerformanceCounter(final String name, final int windowSize) {
 	public void tick() {
 		final long t = System.nanoTime();
 		if (lastTick > 0L)
-			tick((lastTick - t) * nano2seconds);
+			tick((t - lastTick) * nano2seconds);
 		lastTick = t;
 	}
 	
@@ -78,11 +78,11 @@ public void tick(final float delta) {
 			return;
 		}
 		
-		time.put(delta);
+		time.put(current);
 		
 		final float currentLoad = delta == 0f ? 0f : current / delta;
 		load.put((delta > 1f) ? currentLoad : delta * currentLoad + (1f - delta) * load.latest);
-		
+
 		current = 0f;
 		valid = false;
 	}

File: gdx/src/com/badlogic/gdx/utils/PerformanceCounters.java
Patch:
@@ -40,7 +40,7 @@ public PerformanceCounter add(final String name) {
 	public void tick() {
 		final long t = System.nanoTime();
 		if (lastTick > 0L)
-			tick((lastTick - t) * nano2seconds);
+			tick((t - lastTick) * nano2seconds);
 		lastTick = t;
 	}
 	

File: gdx/src/com/badlogic/gdx/utils/Timer.java
Patch:
@@ -32,8 +32,9 @@ public void run () {
 						float wait = Float.MAX_VALUE;
 						for (int i = 0, n = instances.size; i < n; i++)
 							wait = Math.min(wait, instances.get(i).update(time));
+						long waitMillis = (long)(wait * 1000);
 						try {
-							instances.wait((long)(wait * 1000));
+							if (waitMillis > 0) instances.wait(waitMillis);
 						} catch (InterruptedException ignored) {
 						}
 					}

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -92,7 +92,7 @@ public int getGLEnum () {
 	}
 
 	public enum TextureWrap {
-		ClampToEdge(GL10.GL_CLAMP_TO_EDGE), Repeat(GL10.GL_REPEAT);
+		MirroredRepeat(GL20.GL_MIRRORED_REPEAT),ClampToEdge(GL10.GL_CLAMP_TO_EDGE), Repeat(GL10.GL_REPEAT);
 
 		final int glEnum;
 

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -127,7 +127,7 @@ public Texture (FileHandle file, boolean useMipMaps) {
 	}
 
 	public Texture (FileHandle file, Format format, boolean useMipMaps) {
-		if (file.name().contains(".etc1")) {
+		if (file.name().endsWith(".etc1")) {
 			create(new ETC1TextureData(file, useMipMaps));
 		} else {
 			create(new FileTextureData(file, null, format, useMipMaps));

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java
Patch:
@@ -317,7 +317,7 @@ public void setOverNode (Node overNode) {
 		this.overNode = overNode;
 	}
 
-	/** Sets the amount of horizontal space between the nodes and the left and right edges of the tree. */
+	/** Sets the amount of horizontal space between the nodes and the left/right edges of the tree. */
 	public void setPadding (float padding) {
 		this.padding = padding;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/DragScrollListener.java
Patch:
@@ -28,8 +28,8 @@ public class DragScrollListener extends DragListener {
 	private ScrollPane scroll;
 	private Task scrollUp, scrollDown;
 	Interpolation interpolation = Interpolation.exp5In;
-	float minSpeed = 15, maxSpeed = 65, tickSecs = 0.05f;
-	long startTime, rampTime = 2000;
+	float minSpeed = 15, maxSpeed = 75, tickSecs = 0.05f;
+	long startTime, rampTime = 1750;
 
 	public DragScrollListener (final ScrollPane scroll) {
 		this.scroll = scroll;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RepeatAction.java
Patch:
@@ -29,7 +29,7 @@ public boolean act (float delta) {
 		if (action.act(delta)) {
 			if (repeatCount > 0) executedCount++;
 			if (executedCount == repeatCount) return true;
-			action.restart();
+			if (action != null) action.restart();
 		}
 		return false;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/DragScrollListener.java
Patch:
@@ -28,8 +28,8 @@ public class DragScrollListener extends DragListener {
 	private ScrollPane scroll;
 	private Task scrollUp, scrollDown;
 	Interpolation interpolation = Interpolation.exp5In;
-	float minSpeed = 15, maxSpeed = 60, tickSecs = 0.05f;
-	long startTime, rampTime = 2500;
+	float minSpeed = 15, maxSpeed = 65, tickSecs = 0.05f;
+	long startTime, rampTime = 2000;
 
 	public DragScrollListener (final ScrollPane scroll) {
 		this.scroll = scroll;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -56,7 +56,7 @@ public class GdxTests {
 		ImmediateModeRendererAlphaTest.class, IndexBufferObjectClassTest.class, TreeTest.class, IndexBufferObjectShaderTest.class,
 		InputTest.class, IntegerBitmapFontTest.class, InverseKinematicsTest.class, IsoCamTest.class, IsometricTileTest.class,
 		KinematicBodyTest.class, LifeCycleTest.class, LineDrawingTest.class, ScrollPane2Test.class, ManagedTest.class,
-		ManualBindTest.class, MatrixJNITest.class, MD5Test.class, MeshMultitextureTest.class, MeshShaderTest.class, MeshTest.class,
+		ManualBindTest.class, MatrixJNITest.class, MeshMultitextureTest.class, MeshShaderTest.class, MeshTest.class,
 		MipMapTest.class, MultitouchTest.class, MusicTest.class, MyFirstTriangle.class, ObjTest.class, OnscreenKeyboardTest.class,
 		OrthoCamBorderTest.class, ParallaxTest.class, ParticleEmitterTest.class, PickingTest.class, PixelsPerInchTest.class,
 		PixmapBlendingTest.class, PixmapTest.class, PolygonRegionTest.class, PolygonSpriteTest.class, PreferencesTest.class,

File: gdx/src/com/badlogic/gdx/utils/StringBuilder.java
Patch:
@@ -105,7 +105,7 @@ final void append0 (char[] value) {
 		if (newSize > chars.length) {
 			enlargeBuffer(newSize);
 		}
-		System.arraycopy(value, 0, value, length, value.length);
+		System.arraycopy(value, 0, chars, length, value.length);
 		length = newSize;
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -42,7 +42,7 @@ public class SoundTest extends GdxTest {
 
 	@Override
 	public void create () {
-		sound = Gdx.audio.newSound(Gdx.files.getFileHandle("data/shot.ogg", FileType.Internal));
+		sound = Gdx.audio.newSound(Gdx.files.getFileHandle("data/shotgun.ogg", FileType.Internal));
 
 		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 		ui = new Stage(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);

File: gdx/src/com/badlogic/gdx/graphics/Color.java
Patch:
@@ -203,8 +203,8 @@ public String toString () {
 	public static Color valueOf (String hex) {
 		int r = Integer.valueOf(hex.substring(0, 2), 16);
 		int g = Integer.valueOf(hex.substring(2, 4), 16);
-		int b = Integer.valueOf(hex.substring(4, 5), 16);
-		int a = hex.length() != 8 ? 255 : Integer.valueOf(hex.substring(4, 5), 16);
+		int b = Integer.valueOf(hex.substring(4, 6), 16);
+		int a = hex.length() != 8 ? 255 : Integer.valueOf(hex.substring(6, 8), 16);
 		return new Color(r / 255f, g / 255f, b / 255f, a / 255f);
 	}
 

File: gdx/src/com/badlogic/gdx/utils/BufferUtils.java
Patch:
@@ -337,7 +337,7 @@ public static int getAllocatedBytesUnsafe() {
 	*/
 	
 	private static native long getBufferAddress (Buffer buffer); /*
-	    return (long) buffer;
+	    return (jlong) buffer;
 	*/
 	
 	/** Writes the specified number of zeros to the buffer. This is generally faster than reallocating a new buffer. */

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Loader.java
Patch:
@@ -277,7 +277,7 @@ private MD2Frame loadFrame (MD2Header header, LittleEndianInputStream in) throws
 		int len = 0;
 		for (int i = 0; i < charBuffer.length; i++)
 			if (charBuffer[i] == 0) {
-				len = i - 1;
+				len = i;
 				break;
 			}
 

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Loader.java
Patch:
@@ -277,7 +277,7 @@ private MD2Frame loadFrame (MD2Header header, LittleEndianInputStream in) throws
 		int len = 0;
 		for (int i = 0; i < charBuffer.length; i++)
 			if (charBuffer[i] == 0) {
-				len = i - 1;
+				len = i;
 				break;
 			}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
Patch:
@@ -34,7 +34,7 @@
 /** @author xoppa */
 public class BaseBulletTest extends BulletTest {
 	// Set this to the path of the lib to use it on desktop instead of default lib. 
-	private final static String customDesktopLib = "D:\\Data\\code\\android\\libs\\libgdx\\extensions\\gdx-bullet\\jni\\vs\\gdxBullet\\x64\\Debug\\gdxBullet.dll";
+	private final static String customDesktopLib = null; //"D:\\Data\\code\\android\\libs\\libgdx\\extensions\\gdx-bullet\\jni\\vs\\gdxBullet\\x64\\Debug\\gdxBullet.dll";
 	
 	private static boolean initialized = false;
 	private static void init() {

File: gdx/src/com/badlogic/gdx/utils/BufferUtils.java
Patch:
@@ -300,7 +300,7 @@ public static ByteBuffer newUnsafeByteBuffer (int numBytes) {
 	 * @return the address of the Buffer.
 	 */
 	public static long getUnsafeBufferAddress(Buffer buffer) {
-		return getBufferAddress(buffer);
+		return getBufferAddress(buffer) + buffer.position();
 	}
 	
 	/**

File: gdx/src/com/badlogic/gdx/utils/BufferUtils.java
Patch:
@@ -301,7 +301,7 @@ public static ByteBuffer newUnsafeByteBuffer (int numBytes) {
 	 */
 	public static long getUnsafeByteBufferAddress(ByteBuffer buffer) {
 		synchronized(unsafeBuffers) {
-			if (unsafeBuffers.contains(buffer, true))
+			if (!unsafeBuffers.contains(buffer, true))
 				return 0;
 		}
 		return getByteBufferAddress(buffer);

File: gdx/src/com/esotericsoftware/tablelayout/BaseTableLayout.java
Patch:
@@ -173,7 +173,6 @@ public void reset () {
 		debug = Debug.none;
 		cellDefaults.set(Cell.defaults(this));
 		columnDefaults.clear();
-		rowDefaults = null;
 	}
 
 	/** Removes all widgets and cells from the table. */
@@ -185,6 +184,7 @@ public void clear () {
 		cells.clear();
 		rows = 0;
 		columns = 0;
+		rowDefaults = null;
 		invalidate();
 	}
 

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/ClosestConvexResultCallback.java
Patch:
@@ -85,8 +85,8 @@ public void setM_hitCollisionObject(btCollisionObject value) {
   }
 
   public btCollisionObject getM_hitCollisionObject() {
-    long cPtr = gdxBulletJNI.ClosestConvexResultCallback_m_hitCollisionObject_get(swigCPtr, this);
-    return (cPtr == 0) ? null : new btCollisionObject(cPtr, false);
-  }
+	long cPtr = gdxBulletJNI.ClosestConvexResultCallback_m_hitCollisionObject_get(swigCPtr, this);
+	return (cPtr == 0) ? null : btCollisionObject.getInstance(cPtr, false);
+}
 
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/ClosestNotMeConvexResultCallback.java
Patch:
@@ -45,9 +45,9 @@ public void setM_me(btCollisionObject value) {
   }
 
   public btCollisionObject getM_me() {
-    long cPtr = gdxBulletJNI.ClosestNotMeConvexResultCallback_m_me_get(swigCPtr, this);
-    return (cPtr == 0) ? null : new btCollisionObject(cPtr, false);
-  }
+	long cPtr = gdxBulletJNI.ClosestNotMeConvexResultCallback_m_me_get(swigCPtr, this);
+	return (cPtr == 0) ? null : btCollisionObject.getInstance(cPtr, false);
+}
 
   public void setM_allowedPenetration(float value) {
     gdxBulletJNI.ClosestNotMeConvexResultCallback_m_allowedPenetration_set(swigCPtr, this, value);

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/LocalConvexResult.java
Patch:
@@ -49,9 +49,9 @@ public void setM_hitCollisionObject(btCollisionObject value) {
   }
 
   public btCollisionObject getM_hitCollisionObject() {
-    long cPtr = gdxBulletJNI.LocalConvexResult_m_hitCollisionObject_get(swigCPtr, this);
-    return (cPtr == 0) ? null : new btCollisionObject(cPtr, false);
-  }
+	long cPtr = gdxBulletJNI.LocalConvexResult_m_hitCollisionObject_get(swigCPtr, this);
+	return (cPtr == 0) ? null : btCollisionObject.getInstance(cPtr, false);
+}
 
   public void setM_localShapeInfo(LocalShapeInfo value) {
     gdxBulletJNI.LocalConvexResult_m_localShapeInfo_set(swigCPtr, this, LocalShapeInfo.getCPtr(value), value);

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/LocalRayResult.java
Patch:
@@ -49,9 +49,9 @@ public void setM_collisionObject(btCollisionObject value) {
   }
 
   public btCollisionObject getM_collisionObject() {
-    long cPtr = gdxBulletJNI.LocalRayResult_m_collisionObject_get(swigCPtr, this);
-    return (cPtr == 0) ? null : new btCollisionObject(cPtr, false);
-  }
+	long cPtr = gdxBulletJNI.LocalRayResult_m_collisionObject_get(swigCPtr, this);
+	return (cPtr == 0) ? null : btCollisionObject.getInstance(cPtr, false);
+}
 
   public void setM_localShapeInfo(LocalShapeInfo value) {
     gdxBulletJNI.LocalRayResult_m_localShapeInfo_set(swigCPtr, this, LocalShapeInfo.getCPtr(value), value);

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/RayResultCallback.java
Patch:
@@ -53,9 +53,9 @@ public void setM_collisionObject(btCollisionObject value) {
   }
 
   public btCollisionObject getM_collisionObject() {
-    long cPtr = gdxBulletJNI.RayResultCallback_m_collisionObject_get(swigCPtr, this);
-    return (cPtr == 0) ? null : new btCollisionObject(cPtr, false);
-  }
+	long cPtr = gdxBulletJNI.RayResultCallback_m_collisionObject_get(swigCPtr, this);
+	return (cPtr == 0) ? null : btCollisionObject.getInstance(cPtr, false);
+}
 
   public void setM_collisionFilterGroup(short value) {
     gdxBulletJNI.RayResultCallback_m_collisionFilterGroup_set(swigCPtr, this, value);

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/bt32BitAxisSweep3.java
Patch:
@@ -13,12 +13,11 @@
 import com.badlogic.gdx.math.Matrix3;
 import com.badlogic.gdx.math.Matrix4;
 
-public class bt32BitAxisSweep3 {
+public class bt32BitAxisSweep3 extends btAxisSweep3InternalInt {
   private long swigCPtr;
-  protected boolean swigCMemOwn;
 
   protected bt32BitAxisSweep3(long cPtr, boolean cMemoryOwn) {
-    swigCMemOwn = cMemoryOwn;
+    super(gdxBulletJNI.bt32BitAxisSweep3_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }
 
@@ -38,6 +37,7 @@ public synchronized void delete() {
       }
       swigCPtr = 0;
     }
+    super.delete();
   }
 
   public bt32BitAxisSweep3(Vector3 worldAabbMin, Vector3 worldAabbMax, long maxHandles, btOverlappingPairCache pairCache, boolean disableRaycastAccelerator) {

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btAxisSweep3.java
Patch:
@@ -13,12 +13,11 @@
 import com.badlogic.gdx.math.Matrix3;
 import com.badlogic.gdx.math.Matrix4;
 
-public class btAxisSweep3 {
+public class btAxisSweep3 extends btAxisSweep3InternalShort {
   private long swigCPtr;
-  protected boolean swigCMemOwn;
 
   protected btAxisSweep3(long cPtr, boolean cMemoryOwn) {
-    swigCMemOwn = cMemoryOwn;
+    super(gdxBulletJNI.btAxisSweep3_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }
 
@@ -38,6 +37,7 @@ public synchronized void delete() {
       }
       swigCPtr = 0;
     }
+    super.delete();
   }
 
   public btAxisSweep3(Vector3 worldAabbMin, Vector3 worldAabbMax, int maxHandles, btOverlappingPairCache pairCache, boolean disableRaycastAccelerator) {

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btGhostObject.java
Patch:
@@ -77,9 +77,9 @@ public int getNumOverlappingObjects() {
   }
 
   public btCollisionObject getOverlappingObject(int index) {
-    long cPtr = gdxBulletJNI.btGhostObject_getOverlappingObject__SWIG_0(swigCPtr, this, index);
-    return (cPtr == 0) ? null : new btCollisionObject(cPtr, false);
-  }
+	long cPtr = gdxBulletJNI.btGhostObject_getOverlappingObject__SWIG_0(swigCPtr, this, index);
+	return (cPtr == 0) ? null : btCollisionObject.getInstance(cPtr, false);
+}
 
   public btCollisionObjectArray getOverlappingPairs() {
     return new btCollisionObjectArray(gdxBulletJNI.btGhostObject_getOverlappingPairs__SWIG_0(swigCPtr, this), false);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletTest.java
Patch:
@@ -24,6 +24,8 @@
 
 /** @author xoppa */
 public class BulletTest implements ApplicationListener, InputProcessor, GestureListener {
+	public StringBuilder performance = new StringBuilder();
+	
 	@Override
 	public boolean keyDown (int keycode) {
 		return false;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletTest.java
Patch:
@@ -24,6 +24,8 @@
 
 /** @author xoppa */
 public class BulletTest implements ApplicationListener, InputProcessor, GestureListener {
+	public StringBuilder performance = new StringBuilder();
+	
 	@Override
 	public boolean keyDown (int keycode) {
 		return false;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
-import com.badlogic.gdx.tests.MeshShaderTest;
+import com.badlogic.gdx.tests.SoundTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
@@ -30,7 +30,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		GdxTest test = new MeshShaderTest();
+		GdxTest test = new SoundTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -42,7 +42,7 @@ public class SoundTest extends GdxTest {
 
 	@Override
 	public void create () {
-		sound = Gdx.audio.newSound(Gdx.files.getFileHandle("data/shotgun.mp3", FileType.Internal));
+		sound = Gdx.audio.newSound(Gdx.files.getFileHandle("data/shot.ogg", FileType.Internal));
 
 		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 		ui = new Stage(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20.java
Patch:
@@ -360,10 +360,10 @@ public void glPolygonOffset (float factor, float units) {
 	public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {
 		// verify request
 		if ((format != WebGLRenderingContext.RGBA) || (type != WebGLRenderingContext.UNSIGNED_BYTE)) {
-			throw new GdxRuntimeException("Only format UNSIGNED_BYTE for type RGBA is currently supported.");
+			throw new GdxRuntimeException("Only format RGBA and type UNSIGNED_BYTE are currently supported for glReadPixels(...).");
 		}
 		if (!(pixels instanceof ByteBuffer)) {
-			throw new GdxRuntimeException("Inputed pixels buffer needs to be of type ByteBuffer.");
+			throw new GdxRuntimeException("Inputed pixels buffer needs to be of type ByteBuffer for glReadPixels(...).");
 		}
 		
 		// create new ArrayBufferView (4 bytes per pixel)

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20.java
Patch:
@@ -359,7 +359,7 @@ public void glPolygonOffset (float factor, float units) {
 	@Override
 	public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {
 		// verify request
-		if ((format != WebGLRenderingContext.UNSIGNED_BYTE) || (type != WebGLRenderingContext.RGBA)) {
+		if ((format != WebGLRenderingContext.RGBA) || (type != WebGLRenderingContext.UNSIGNED_BYTE)) {
 			throw new GdxRuntimeException("Only format UNSIGNED_BYTE for type RGBA is currently supported.");
 		}
 		if (!(pixels instanceof ByteBuffer)) {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20.java
Patch:
@@ -359,7 +359,7 @@ public void glPolygonOffset (float factor, float units) {
 	@Override
 	public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {
 		// verify request
-		if ((format != WebGLRenderingContext.UNSIGNED_BYTE) || (type != WebGLRenderingContext.RGBA)) {
+		if ((format != WebGLRenderingContext.RGBA) || (type != WebGLRenderingContext.UNSIGNED_BYTE)) {
 			throw new GdxRuntimeException("Only format UNSIGNED_BYTE for type RGBA is currently supported.");
 		}
 		if (!(pixels instanceof ByteBuffer)) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java
Patch:
@@ -27,14 +27,16 @@
 import com.badlogic.gdx.tests.box2d.Box2DTest;
 import com.badlogic.gdx.tests.bullet.BulletTest;
 import com.badlogic.gdx.tests.bullet.ConstraintsTest;
+import com.badlogic.gdx.tests.bullet.ConvexHullTest;
+import com.badlogic.gdx.tests.bullet.KinematicTest;
 import com.badlogic.gdx.tests.bullet.MeshShapeTest;
 import com.badlogic.gdx.tests.bullet.RayCastTest;
 import com.badlogic.gdx.tests.bullet.ShootTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 /** @author xoppa */
 public class BulletTestCollection extends GdxTest implements InputProcessor, GestureListener {
-	private final BulletTest[] tests = {new ShootTest(), new ConstraintsTest(), new MeshShapeTest(), new RayCastTest()};
+	private final BulletTest[] tests = {new ShootTest(), new KinematicTest(), new ConstraintsTest(), new MeshShapeTest(), new ConvexHullTest(), new RayCastTest()};
 	
 	private int testIndex = 0;
 	

File: tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
Patch:
@@ -89,6 +89,7 @@ public void create () {
 		// Add the constructers
 		world.constructors.put("ground", new Entity.ConstructInfo(groundMesh, 0f)); // mass = 0: static body
 		world.constructors.put("box", new Entity.ConstructInfo(boxMesh, 1f)); // mass = 1kg: dynamic body
+		world.constructors.put("staticbox", new Entity.ConstructInfo(boxMesh, 0f)); // mass = 0: static body
 	}
 	
 	@Override

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -546,7 +546,7 @@ void paste () {
 		if (content != null) {
 			StringBuilder builder = new StringBuilder();
 			for (int i = 0; i < content.length(); i++) {
-				if (maxLength > 0 && text.length() + i + 1 > maxLength) {
+				if (maxLength > 0 && text.length() + builder.length() + 1 > maxLength) {
 					break;
 				}
 				char c = content.charAt(i);
@@ -656,7 +656,7 @@ public void setText (String text) {
 
 		StringBuffer buffer = new StringBuffer();
 		for (int i = 0; i < text.length(); i++) {
-			if (maxLength > 0 && text.length() + i + 1 > maxLength) {
+			if (maxLength > 0 && buffer.length() + 1 > maxLength) {
 				break;
 			}
 			char c = text.charAt(i);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -546,7 +546,7 @@ void paste () {
 		if (content != null) {
 			StringBuilder builder = new StringBuilder();
 			for (int i = 0; i < content.length(); i++) {
-				if (maxLength > 0 && text.length() + i + 1 > maxLength) {
+				if (maxLength > 0 && text.length() + builder.length() + 1 > maxLength) {
 					break;
 				}
 				char c = content.charAt(i);
@@ -656,7 +656,7 @@ public void setText (String text) {
 
 		StringBuffer buffer = new StringBuffer();
 		for (int i = 0; i < text.length(); i++) {
-			if (maxLength > 0 && text.length() + i + 1 > maxLength) {
+			if (maxLength > 0 && buffer.length() + 1 > maxLength) {
 				break;
 			}
 			char c = text.charAt(i);

File: gdx/src/com/badlogic/gdx/Net.java
Patch:
@@ -151,6 +151,7 @@ public static class HttpRequest {
 		public HttpRequest (String httpMethod) {
 			this.httpMethod = httpMethod;
 			this.headers = new HashMap<String, String>();
+			this.content = "";
 		}
 
 		/** Sets the URL of the HTTP request.

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/CircularBuffer.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.math.MathUtils;
 
+/** @author Nathan Sweet */
 public class CircularBuffer {
 	private final short[] buffer;
 	private int writePosition, readPosition;

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/analysis/AudioTools.java
Patch:
@@ -164,7 +164,7 @@ static public void toFloat (byte[] src, int offsetSrc, float[] dst, int offsetDs
 	static public void toFloat (short[] src, int offsetSrc, float[] dst, int offsetDst, int numBytes) {
 		float scale = 1.0f / Short.MAX_VALUE;
 		for (int i = offsetSrc, ii = offsetDst; i < numBytes; i++, ii++)
-			dst[i] = src[ii] * scale;
+			dst[ii] = src[i] * scale;
 	}
 	
 	/**

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -129,13 +129,13 @@ public void clicked (InputEvent event, float x, float y) {
 			public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {
 				if (!super.touchDown(event, x, y, pointer, button)) return false;
 				if (pointer == 0 && button != 0) return false;
-				if (disabled) return true;
-				keyboard.show(true);
+				if (disabled) return true;				
 				clearSelection();
 				setCursorPosition(x);
 				selectionStart = cursor;
 				Stage stage = getStage();
 				if (stage != null) stage.setKeyboardFocus(TextField.this);
+				keyboard.show(true);
 				return true;
 			}
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaper.java
Patch:
@@ -117,7 +117,7 @@ public void onResume() {
 	
 	public void onDestroy() {
 		graphics.clearManagedCaches();
-		graphics.destroy();
+		// graphics.destroy();
 	}
 
 	public WallpaperService getService() {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
Patch:
@@ -120,7 +120,9 @@ public void onDestroy () {
 			runningEngines--;
 			if (AndroidLiveWallpaperService.DEBUG) Log.d(AndroidLiveWallpaperService.this.TAG, " > onDestroy() " + hashCode() + ", running: " + runningEngines);
 			view.onDestroy();
-			// app.onDestroy();
+			if (listener != null)
+				listener.dispose();
+			app.onDestroy();
 			super.onDestroy();
 		}
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
Patch:
@@ -107,7 +107,8 @@ public void onCreate (final SurfaceHolder surfaceHolder) {
 			super.onCreate(surfaceHolder);
 			this.app = new AndroidLiveWallpaper(AndroidLiveWallpaperService.this, this);
 			AndroidApplicationConfiguration config = createConfig();
-			this.app.initialize(createListener(isPreview()), config);
+			listener = createListener(isPreview());
+			this.app.initialize(listener, config);
 			this.view = ((AndroidGraphicsLiveWallpaper)app.getGraphics()).getView();
 
 			if (config.getTouchEventsForLiveWallpaper && Integer.parseInt(android.os.Build.VERSION.SDK) < 9)

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
Patch:
@@ -107,7 +107,8 @@ public void onCreate (final SurfaceHolder surfaceHolder) {
 			super.onCreate(surfaceHolder);
 			this.app = new AndroidLiveWallpaper(AndroidLiveWallpaperService.this, this);
 			AndroidApplicationConfiguration config = createConfig();
-			this.app.initialize(createListener(isPreview()), config);
+			listener = createListener(isPreview());
+			this.app.initialize(listener, config);
 			this.view = ((AndroidGraphicsLiveWallpaper)app.getGraphics()).getView();
 
 			if (config.getTouchEventsForLiveWallpaper && Integer.parseInt(android.os.Build.VERSION.SDK) < 9)

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ShadowMappingTest.java
Patch:
@@ -216,6 +216,7 @@ public void render () {
 		}
 
 		fpsLabel.setText("fps: " + Gdx.graphics.getFramesPerSecond());
+		ui.act();
 		ui.draw();
 		Table.drawDebug(ui);
 	}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
Patch:
@@ -119,7 +119,7 @@ public void onDestroy () {
 			runningEngines--;
 			if (AndroidLiveWallpaperService.DEBUG) Log.d(AndroidLiveWallpaperService.this.TAG, " > onDestroy() " + hashCode() + ", running: " + runningEngines);
 			view.onDestroy();
-			//app.onDestroy();
+			// app.onDestroy();
 			super.onDestroy();
 		}
 

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -274,7 +274,9 @@ public void bind (ShaderProgram shader) {
 	 * 
 	 * @param shader the shader (does not unbind the shader) */
 	public void unbind (ShaderProgram shader) {
-		if (!Gdx.graphics.isGL20Available()) throw new IllegalStateException("can't use this render method with OpenGL ES 1.x");
+		if (!Gdx.graphics.isGL20Available()) {
+			throw new IllegalStateException("can't use this render method with OpenGL ES 1.x");
+		}
 
 		vertices.unbind(shader);
 		if (indices.getNumIndices() > 0) indices.unbind();

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/g2d/ParticleEffect.java
Patch:
@@ -71,7 +71,6 @@ public void allowCompletion () {
 	public boolean isComplete () {
 		for (int i = 0, n = emitters.size; i < n; i++) {
 			ParticleEmitter emitter = emitters.get(i);
-			if (emitter.isContinuous()) return false;
 			if (!emitter.isComplete()) return false;
 		}
 		return true;
@@ -176,6 +175,7 @@ protected Texture loadTexture (FileHandle file) {
 	}
 
 	/** Disposes the texture for each sprite for each ParticleEmitter. */
+	@Override
 	public void dispose () {
 		for (int i = 0, n = emitters.size; i < n; i++) {
 			ParticleEmitter emitter = emitters.get(i);

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java
Patch:
@@ -386,7 +386,6 @@ public void render () {
 				if (enabled) {
 					if (emitter.getSprite() != null) emitter.draw(spriteBatch, delta);
 					activeCount += emitter.getActiveCount();
-					if (emitter.isContinuous()) complete = false;
 					if (!emitter.isComplete()) complete = false;
 				}
 			}

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEffect.java
Patch:
@@ -78,7 +78,6 @@ public void allowCompletion () {
 	public boolean isComplete () {
 		for (int i = 0, n = emitters.size; i < n; i++) {
 			ParticleEmitter emitter = emitters.get(i);
-			if (emitter.isContinuous()) return false;
 			if (!emitter.isComplete()) return false;
 		}
 		return true;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/g2d/ParticleEffect.java
Patch:
@@ -71,7 +71,6 @@ public void allowCompletion () {
 	public boolean isComplete () {
 		for (int i = 0, n = emitters.size; i < n; i++) {
 			ParticleEmitter emitter = emitters.get(i);
-			if (emitter.isContinuous()) return false;
 			if (!emitter.isComplete()) return false;
 		}
 		return true;
@@ -176,6 +175,7 @@ protected Texture loadTexture (FileHandle file) {
 	}
 
 	/** Disposes the texture for each sprite for each ParticleEmitter. */
+	@Override
 	public void dispose () {
 		for (int i = 0, n = emitters.size; i < n; i++) {
 			ParticleEmitter emitter = emitters.get(i);

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java
Patch:
@@ -386,7 +386,6 @@ public void render () {
 				if (enabled) {
 					if (emitter.getSprite() != null) emitter.draw(spriteBatch, delta);
 					activeCount += emitter.getActiveCount();
-					if (emitter.isContinuous()) complete = false;
 					if (!emitter.isComplete()) complete = false;
 				}
 			}

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEffect.java
Patch:
@@ -78,7 +78,6 @@ public void allowCompletion () {
 	public boolean isComplete () {
 		for (int i = 0, n = emitters.size; i < n; i++) {
 			ParticleEmitter emitter = emitters.get(i);
-			if (emitter.isContinuous()) return false;
 			if (!emitter.isComplete()) return false;
 		}
 		return true;

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/materials/ColorAttribute.java
Patch:
@@ -37,7 +37,7 @@ protected ColorAttribute () {
 
 	/** Creates a {@link MaterialAttribute} that is a pure {@link Color}.
 	 * 
-	 * @param color The {@link Colour} that you wish the attribute to represent.
+	 * @param color The {@link Color} that you wish the attribute to represent.
 	 * @param name The name of the uniform in the {@link ShaderProgram} that will have its value set to this color. (A 'name' does
 	 *           not matter for a game that uses {@link GL10}). */
 	public ColorAttribute (Color color, String name) {

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/materials/ColorAttribute.java
Patch:
@@ -37,7 +37,7 @@ protected ColorAttribute () {
 
 	/** Creates a {@link MaterialAttribute} that is a pure {@link Color}.
 	 * 
-	 * @param color The {@link Colour} that you wish the attribute to represent.
+	 * @param color The {@link Color} that you wish the attribute to represent.
 	 * @param name The name of the uniform in the {@link ShaderProgram} that will have its value set to this color. (A 'name' does
 	 *           not matter for a game that uses {@link GL10}). */
 	public ColorAttribute (Color color, String name) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -532,7 +532,9 @@ public boolean clipBegin (float x, float y, float width, float height) {
 		Stage stage = getStage();
 		Rectangle scissorBounds = Pools.obtain(Rectangle.class);
 		ScissorStack.calculateScissors(stage.getCamera(), stage.getSpriteBatch().getTransformMatrix(), tableBounds, scissorBounds);
-		return ScissorStack.pushScissors(scissorBounds);
+		if (ScissorStack.pushScissors(scissorBounds)) return true;
+		Pools.free(scissorBounds);
+		return false;
 	}
 
 	/** Ends clipping begun by {@link #clipBegin(float, float, float, float)}. */

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -237,7 +237,7 @@ public boolean removeAll (Array<T> otherArray, boolean identity) {
 						removeIndex(j);
 						j--;
 						modified = true;
-					break;
+						break;
 					}
 				}
 			}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -260,8 +260,8 @@ public void act (float delta) {
 		boolean panning = flickScrollListener.getGestureDetector().isPanning();
 
 		if (fadeAlpha > 0 && fadeScrollBars && !panning && !touchScrollH && !touchScrollV) {
-			fadeDelay -= fadeDelaySeconds * delta;
-			if (fadeDelay <= 0) fadeAlpha = Math.max(0, fadeAlpha - fadeAlphaSeconds * delta);
+			fadeDelay -= delta;
+			if (fadeDelay <= 0) fadeAlpha = Math.max(0, fadeAlpha - delta);
 		}
 
 		if (flingTimer > 0) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -260,8 +260,8 @@ public void act (float delta) {
 		boolean panning = flickScrollListener.getGestureDetector().isPanning();
 
 		if (fadeAlpha > 0 && fadeScrollBars && !panning && !touchScrollH && !touchScrollV) {
-			fadeDelay -= fadeDelaySeconds * delta;
-			if (fadeDelay <= 0) fadeAlpha = Math.max(0, fadeAlpha - fadeAlphaSeconds * delta);
+			fadeDelay -= delta;
+			if (fadeDelay <= 0) fadeAlpha = Math.max(0, fadeAlpha - delta);
 		}
 
 		if (flingTimer > 0) {

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/ogre/OgreXmlLoader.java
Patch:
@@ -509,9 +509,6 @@ private Skeleton generateSkeleton (com.badlogic.gdx.graphics.g3d.loaders.ogre.sk
 
 					transform.getTranslation(jointKeyframe.position);
 					transform.getRotation(jointKeyframe.rotation);
-					jointKeyframe.rotation.x *= -1;
-					jointKeyframe.rotation.y *= -1;
-					jointKeyframe.rotation.z *= -1;
 				}
 			}
 

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/SkeletonModelViewer.java
Patch:
@@ -75,7 +75,7 @@ public void create () {
 		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam.position.set(bounds.getCenter().cpy().add(len, len, len));
 		cam.lookAt(bounds.getCenter().x, bounds.getCenter().y, bounds.getCenter().z);
-		cam.near = 0.1f;
+		cam.near = 1f;
 		cam.far = 1000;
 
 		renderer = new ImmediateModeRenderer10();

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java
Patch:
@@ -513,7 +513,7 @@ public void circle (float x, float y, float radius, int segments) {
 
 	/** Calls {@link #filledCircle(float, float, float, int)} by estimating the number of segments needed for a smooth circle. */
 	public void filledCircle (float x, float y, float radius) {
-		filledCircle(x, y, radius, (int)(4 * (float)Math.sqrt(radius)));
+		filledCircle(x, y, radius, (int)(6 * (float)Math.cbrt(radius)));
 	}
 
 	public void filledCircle (float x, float y, float radius, int segments) {

File: gdx/src/com/badlogic/gdx/utils/JsonReader.java
Patch:
@@ -19,13 +19,13 @@
 
 package com.badlogic.gdx.utils;
 
+import com.badlogic.gdx.files.FileHandle;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Reader;
 
-import com.badlogic.gdx.files.FileHandle;
-
 /** Lightweight JSON parser.<br>
  * <br>
  * The default behavior is to parse the JSON into a DOM made up of {@link OrderedMap}, {@link Array}, String, Float, and Boolean

File: gdx/src/com/badlogic/gdx/utils/JsonWriter.java
Patch:
@@ -157,7 +157,7 @@ static public enum OutputType {
 		minimal;
 
 		static private Pattern javascriptPattern = Pattern.compile("[a-zA-Z_$][a-zA-Z_$0-9]*");
-		static private Pattern minimalPattern = Pattern.compile("[a-zA-Z0-9_$][^:}\\], ]*");
+		static private Pattern minimalPattern = Pattern.compile("[a-zA-Z_$][^:}\\], ]*");
 
 		public String quoteValue (String value) {
 			value = value.replace("\\", "\\\\");

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -534,7 +534,7 @@ void paste () {
 			StringBuilder builder = new StringBuilder();
 			for (int i = 0; i < content.length(); i++) {
 				char c = content.charAt(i);
-				if (style.font.containsCharacter(c)) builder.append(c);
+				if (style.font.containsCharacter(c) && (filter == null || filter.acceptChar(this, c))) builder.append(c);
 			}
 			content = builder.toString();
 
@@ -641,7 +641,7 @@ public void setText (String text) {
 		StringBuffer buffer = new StringBuffer();
 		for (int i = 0; i < text.length(); i++) {
 			char c = text.charAt(i);
-			if (font.containsCharacter(c)) buffer.append(c);
+			if (font.containsCharacter(c) && (filter == null || filter.acceptChar(this, c))) buffer.append(c);
 		}
 
 		this.text = buffer.toString();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -534,7 +534,7 @@ void paste () {
 			StringBuilder builder = new StringBuilder();
 			for (int i = 0; i < content.length(); i++) {
 				char c = content.charAt(i);
-				if (style.font.containsCharacter(c)) builder.append(c);
+				if (style.font.containsCharacter(c) && (filter == null || filter.acceptChar(this, c))) builder.append(c);
 			}
 			content = builder.toString();
 
@@ -641,7 +641,7 @@ public void setText (String text) {
 		StringBuffer buffer = new StringBuffer();
 		for (int i = 0; i < text.length(); i++) {
 			char c = text.charAt(i);
-			if (font.containsCharacter(c)) buffer.append(c);
+			if (font.containsCharacter(c) && (filter == null || filter.acceptChar(this, c))) buffer.append(c);
 		}
 
 		this.text = buffer.toString();

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/experimental/SkeletonModelGpuSkinningTest.java
Patch:
@@ -147,9 +147,9 @@ public void create () {
 		texture = new Texture(Gdx.files.internal("data/models/robot.jpg"), Format.RGB565, true);
 		texture.setFilter(TextureFilter.MipMapLinearNearest, TextureFilter.Linear);
 		
-		//String fileName = "data/models/robot-mesh.xml.g3d";
+		String fileName = "data/models/robot-mesh.xml.g3d";
 		
-		String fileName = "data/models/cube.dae";
+//		String fileName = "data/models/cube.dae";
 		
 		if (!fileName.endsWith(".g3d") && Gdx.app.getType() == ApplicationType.Desktop) {
 			model = ModelLoaderRegistry.loadSkeletonModel(Gdx.files.internal(fileName));
@@ -194,7 +194,7 @@ public void create () {
 				model.getBoundingBox(box);
 				
 				instance.matrix.trn(-1.75f, 0f, -5.5f);
-				instance.matrix.scale(0.4f, 0.4f, 0.4f);
+				instance.matrix.scale(0.01f, 0.01f, 0.01f);
 				box.mul(instance.matrix);
 				
 				instance.radius = (box.getDimensions().len() / 2);

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/SkeletonModelViewer.java
Patch:
@@ -125,7 +125,7 @@ public void render () {
 
 		angle += 45 * Gdx.graphics.getDeltaTime();
 		Gdx.gl10.glRotatef(angle, 0, 1, 0);
-		animTime += Gdx.graphics.getDeltaTime();
+		animTime += Gdx.graphics.getDeltaTime() / 10;
 		if (animTime > anim.totalDuration) {
 			animTime = 0;
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -484,6 +484,7 @@ static public void drawDebug (Stage stage) {
 	static private void drawDebug (Array<Actor> actors, SpriteBatch batch) {
 		for (int i = 0, n = actors.size; i < n; i++) {
 			Actor actor = actors.get(i);
+			if (!actor.isVisible()) continue;
 			if (actor instanceof Table) ((Table)actor).layout.drawDebug(batch);
 			if (actor instanceof Group) drawDebug(((Group)actor).getChildren(), batch);
 		}

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/BuildTarget.java
Patch:
@@ -111,7 +111,7 @@ public static BuildTarget newDefaultTarget (BuildTarget.TargetOs type, boolean i
 			// Linux 64-Bit
 			return new BuildTarget(TargetOs.Linux, true, new String[] {"**/*.c"}, new String[0], new String[] {"**/*.cpp"},
 				new String[0], new String[0], "", "-c -Wall -O2 -mfpmath=sse -msse -fmessage-length=0 -m64 -fPIC",
-				"-c -Wall -O2 -mfpmath=sse -msse -fmessage-length=0 -m64 -fPIC", "-shared -m64");
+				"-c -Wall -O2 -mfpmath=sse -msse -fmessage-length=0 -m64 -fPIC", "-shared -m64 -Wl,-wrap,memcpy");
 		}
 
 		if (type == TargetOs.MacOsX) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEffectPool.java
Patch:
@@ -33,7 +33,7 @@ protected PooledEffect newObject () {
 
 	public PooledEffect obtain () {
 		PooledEffect effect = super.obtain();
-		effect.start();
+		effect.reset();
 		return effect;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -306,7 +306,7 @@ public void start () {
 
 	public void reset () {
 		emissionDelta = 0;
-		durationTimer = 0;
+		durationTimer = duration;
 		start();
 	}
 

File: gdx/src/com/esotericsoftware/tablelayout/BaseTableLayout.java
Patch:
@@ -528,7 +528,7 @@ private void computeSize () {
 
 			// Compute combined padding/spacing for cells.
 			// Spacing between widgets isn't additive, the larger is used. Also, no spacing around edges.
-			c.computedPadLeft = w(c.padLeft, c) + (c.column == 0 ? 0 : Math.max(0, w(c.spaceLeft, c)) - spaceRightLast);
+			c.computedPadLeft = w(c.padLeft, c) + (c.column == 0 ? 0 : Math.max(0, w(c.spaceLeft, c) - spaceRightLast));
 			if (c.cellAboveIndex == -1)
 				c.computedPadTop = h(c.padTop, c);
 			else {

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -1162,8 +1162,7 @@ private void switchTexture (Texture texture) {
 	/** Sets the shader to be used in a GLES 2.0 environment. Vertex position attribute is called "a_position", the texture
 	 * coordinates attribute is called called "a_texCoords0", the color attribute is called "a_color". See
 	 * {@link ShaderProgram#POSITION_ATTRIBUTE}, {@link ShaderProgram#COLOR_ATTRIBUTE} and {@link ShaderProgram#TEXCOORD_ATTRIBUTE}
-	 * which gets "0" appened to indicate the use of the first texture unit. The projection matrix is uploaded via a mat4 uniform
-	 * called "u_proj", the transform matrix is uploaded via a uniform called "u_trans", the combined transform and projection
+	 * which gets "0" appened to indicate the use of the first texture unit. The combined transform and projection
 	 * matrx is is uploaded via a mat4 uniform called "u_projTrans". The texture sampler is passed via a uniform called
 	 * "u_texture".</p>
 	 * 

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -23,7 +23,9 @@
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.tests.BulletTest;
 import com.badlogic.gdx.tests.ShapeRendererTest;
+import com.badlogic.gdx.tests.SpriteBatchShaderTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeTest;
+import com.badlogic.gdx.tests.extensions.GLEEDTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
@@ -35,7 +37,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 
-		GdxTest test = new FreeTypeTest();
+		GdxTest test = new SpriteBatchShaderTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/extensions/FreeTypeTest.java
Patch:
@@ -57,8 +57,8 @@ public void render () {
 
 		batch.begin();
 		font.setColor(Color.RED);
-		font.drawMultiLine(batch, "This is a test\nAnd another line\n()§$%&/!12390#", 100, 112);
-		ftFont.drawMultiLine(batch, "This is a test\nAnd another line\n()§$%&/!12390#", 100, 112);
+		font.drawMultiLine(batch, "This is a test\nAnd another line\n()Â§$%&/!12390#", 100, 112);
+		ftFont.drawMultiLine(batch, "This is a test\nAnd another line\n()Â§$%&/!12390#", 100, 112);
 // batch.disableBlending();
 		batch.draw(ftFont.getRegion(), 300, 0);
 // batch.enableBlending();

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSInput.java
Patch:
@@ -308,7 +308,7 @@ void processEvents() {
 					break;
 				}
 			}
-			touchEventPool.free(touchEvents);
+			touchEventPool.freeAll(touchEvents);
 			touchEvents.clear();
 		}
 	}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
Patch:
@@ -29,7 +29,7 @@
 public abstract class AndroidLiveWallpaperService extends WallpaperService {
 	final String TAG = "AndroidLiveWallpaperService";
 	AndroidWallpaperEngine previousEngine;
-	static boolean DEBUG = false;
+	static boolean DEBUG = true;
 
 	public AndroidLiveWallpaperService () {
 		super();

File: demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/general/Pools.java
Patch:
@@ -27,7 +27,7 @@ private Pools () {
 	 * @param array the array of items to free.
 	 * @param pool the pool that the items are to be released to. */
 	public static <T> void freeArrayToPool (Array<T> array, Pool<T> pool) {
-		pool.free(array);
+		pool.freeAll(array);
 		array.clear();
 	}
 
@@ -36,7 +36,7 @@ public static <T> void freeArrayToPool (Array<T> array, Pool<T> pool) {
 	 * @param array the array of items to (re)create.
 	 * @param pool the pool that the items are to be allocated from / released to.
 	 * @param size the array's capacity.
-	 * @return */
+	 * @return the input array */
 	@SuppressWarnings("unchecked")
 	public static <T> Array<T> makeArrayFromPool (Array<T> array, Pool<T> pool, int size) {
 		if (array == null) {

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/CameraGroupStrategy.java
Patch:
@@ -150,7 +150,7 @@ public void beforeGroup (int group, Array<Decal> contents) {
 			}
 
 			materialGroups.clear();
-			arrayPool.free(usedArrays);
+			arrayPool.freeAll(usedArrays);
 			usedArrays.clear();
 		}
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/DecalBatch.java
Patch:
@@ -189,7 +189,7 @@ protected void flush (ShaderProgram shader, int verticesPosition) {
 	/** Remove all decals from batch */
 	protected void clear () {
 		groupList.clear();
-		groupPool.free(usedGroups);
+		groupPool.freeAll(usedGroups);
 		usedGroups.clear();
 	}
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplicationConfiguration.java
Patch:
@@ -63,4 +63,7 @@ public class AndroidApplicationConfiguration {
 
 	/** the {@link ResolutionStrategy}. default: {@link FillResolutionStrategy} **/
 	public ResolutionStrategy resolutionStrategy = new FillResolutionStrategy();
+	
+	/** if the app is a livewallpaper, whether it should get full touch events **/
+	public boolean getTouchEventsForLiveWallpaper = false; 
 }

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphicsLiveWallpaper.java
Patch:
@@ -308,7 +308,6 @@ public boolean isFullscreen () {
 	}
 
 	public AndroidGraphicsLiveWallpaper (AndroidLiveWallpaper app, boolean useGL2IfAvailable, ResolutionStrategy resolutionStrategy) {
-
 		view = createGLSurfaceView(app, useGL2IfAvailable, resolutionStrategy);
 		this.app = app;
 

File: demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/general/Pools.java
Patch:
@@ -27,7 +27,7 @@ private Pools () {
 	 * @param array the array of items to free.
 	 * @param pool the pool that the items are to be released to. */
 	public static <T> void freeArrayToPool (Array<T> array, Pool<T> pool) {
-		pool.free(array);
+		pool.freeAll(array);
 		array.clear();
 	}
 
@@ -36,7 +36,7 @@ public static <T> void freeArrayToPool (Array<T> array, Pool<T> pool) {
 	 * @param array the array of items to (re)create.
 	 * @param pool the pool that the items are to be allocated from / released to.
 	 * @param size the array's capacity.
-	 * @return */
+	 * @return the input array */
 	@SuppressWarnings("unchecked")
 	public static <T> Array<T> makeArrayFromPool (Array<T> array, Pool<T> pool, int size) {
 		if (array == null) {

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/CameraGroupStrategy.java
Patch:
@@ -150,7 +150,7 @@ public void beforeGroup (int group, Array<Decal> contents) {
 			}
 
 			materialGroups.clear();
-			arrayPool.free(usedArrays);
+			arrayPool.freeAll(usedArrays);
 			usedArrays.clear();
 		}
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/DecalBatch.java
Patch:
@@ -189,7 +189,7 @@ protected void flush (ShaderProgram shader, int verticesPosition) {
 	/** Remove all decals from batch */
 	protected void clear () {
 		groupList.clear();
-		groupPool.free(usedGroups);
+		groupPool.freeAll(usedGroups);
 		usedGroups.clear();
 	}
 

File: gdx/src/com/badlogic/gdx/utils/Pool.java
Patch:
@@ -57,7 +57,7 @@ public void free (T object) {
 
 	/** Puts the specified objects in the pool.
 	 * @see #free(Object) */
-	public void free (Array<T> objects) {
+	public void freeAll (Array<T> objects) {
 		for (int i = 0, n = Math.min(objects.size, max - freeObjects.size); i < n; i++) {
 			T object = objects.get(i);
 			freeObjects.add(object);

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -68,7 +68,6 @@
  * @author badlogicgames@gmail.com */
 public class Texture implements Disposable {
 	static private boolean enforcePotImages = true;
-	static private boolean useHWMipMap = true;
 	private static AssetManager assetManager;
 	final static Map<Application, List<Texture>> managedTextures = new HashMap<Application, List<Texture>>();
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/DragAndDropTest.java
Patch:
@@ -72,7 +72,7 @@ public void reset (Source source, Payload payload) {
 			}
 
 			public void drop (Source source, Payload payload, float x, float y, int pointer) {
-				System.out.println("Accepted: " + payload.getObject());
+				System.out.println("Accepted: " + payload.getObject() + " " + x + ", " + y);
 			}
 		});
 		dragAndDrop.addTarget(new Target(invalidTargetImage) {

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/ogre/mesh/Submeshname.java
Patch:
@@ -29,7 +29,7 @@
  */
 @XmlAccessorType(XmlAccessType.FIELD)
 @XmlType(name = "")
-@XmlRootElement(name = "submeshname")
+@XmlRootElement(name = "submesh")
 public class Submeshname {
 
 	@XmlAttribute(required = true) @XmlJavaTypeAdapter(NormalizedStringAdapter.class) protected String name;

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/ogre/mesh/Submeshname.java
Patch:
@@ -29,7 +29,7 @@
  */
 @XmlAccessorType(XmlAccessType.FIELD)
 @XmlType(name = "")
-@XmlRootElement(name = "submeshname")
+@XmlRootElement(name = "submesh")
 public class Submeshname {
 
 	@XmlAttribute(required = true) @XmlJavaTypeAdapter(NormalizedStringAdapter.class) protected String name;

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/ogre/mesh/Submeshname.java
Patch:
@@ -29,7 +29,7 @@
  */
 @XmlAccessorType(XmlAccessType.FIELD)
 @XmlType(name = "")
-@XmlRootElement(name = "submeshname")
+@XmlRootElement(name = "submesh")
 public class Submeshname {
 
 	@XmlAttribute(required = true) @XmlJavaTypeAdapter(NormalizedStringAdapter.class) protected String name;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -488,7 +488,7 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 		else
 			y -= (int)(maxY - visualAmountY);
 
-		if (scrollbarsOnTop && scrollX) {
+		if (!fadeScrollBars && scrollbarsOnTop && scrollX) {
 			float scrollbarHeight = 0;
 			if (style.hScrollKnob != null) scrollbarHeight = style.hScrollKnob.getMinHeight();
 			if (style.hScroll != null) scrollbarHeight = Math.max(scrollbarHeight, style.hScroll.getMinHeight());

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -460,6 +460,7 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 				selectionWidth, textBounds.height + font.getDescent() / 2);
 		}
 
+		float yOffset = font.isFlipped() ? -textBounds.height : 0;
 		if (displayText.length() == 0) {
 			if (!focused && messageText != null) {
 				if (style.messageFontColor != null) {
@@ -468,11 +469,11 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 				} else
 					font.setColor(0.7f, 0.7f, 0.7f, parentAlpha);
 				BitmapFont messageFont = style.messageFont != null ? style.messageFont : font;
-				font.draw(batch, messageText, x + bgLeftWidth, y + textY);
+				font.draw(batch, messageText, x + bgLeftWidth, y + textY + yOffset);
 			}
 		} else {
 			font.setColor(fontColor.r, fontColor.g, fontColor.b, fontColor.a * parentAlpha);
-			font.draw(batch, displayText, x + bgLeftWidth + textOffset, y + textY, visibleTextStart, visibleTextEnd);
+			font.draw(batch, displayText, x + bgLeftWidth + textOffset, y + textY + yOffset, visibleTextStart, visibleTextEnd);
 		}
 		if (focused && !disabled) {
 			blink();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/VerticalGroup.java
Patch:
@@ -42,6 +42,7 @@ public void invalidate () {
 	private void computeSize () {
 		sizeInvalid = false;
 		prefWidth = 0;
+		prefHeight = 0;
 		SnapshotArray<Actor> children = getChildren();
 		for (int i = 0, n = children.size; i < n; i++) {
 			Actor child = children.get(i);
@@ -79,8 +80,9 @@ else if ((alignment & Align.right) != 0)
 				x = groupWidth - width;
 			else
 				x = (groupWidth - width) / 2;
+			if (!reverse) y += height * dir;
 			child.setBounds(x, y, width, height);
-			y += height * dir;
+			if (reverse) y += height * dir;
 		}
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -444,7 +444,7 @@ public boolean shouldRender () {
 		synchronized (this) {
 			boolean rq = requestRendering;
 			requestRendering = false;
-			return rq || isContinuous;
+			return rq || isContinuous || Display.isDirty();
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -168,6 +168,7 @@ public Drawable getBackground () {
 
 	public Actor hit (float x, float y, boolean touchable) {
 		if (clip) {
+			if (touchable && getTouchable() == Touchable.disabled) return null;
 			if (x < 0 || x >= getWidth() || y < 0 || y >= getHeight()) return null;
 		}
 		return super.hit(x, y, touchable);

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -36,11 +36,12 @@ public static void main (String[] argv) {
 
 		GdxTest test = new BulletTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
-		config.width = 640;
-		config.height = 640;
+		config.width = 800;
+		config.height = 600;
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;
 		config.resizable = true;
+		config.fullscreen = true;
 		new LwjglApplication(test, config);
 	}
 }

File: gdx/src/com/badlogic/gdx/Input.java
Patch:
@@ -240,7 +240,7 @@ public enum Peripheral {
 	/** @return The value of the accelerometer on its y-axis. ranges between [-10,10]. */
 	public float getAccelerometerZ ();
 
-	/** @return the last touch x coordinate in screen coordinates. The screen origin is the top left corner. */
+	/** @return the last touch x coordinate for the first pointer in screen coordinates. The screen origin is the top left corner. */
 	public int getX ();
 
 	/** Returns the x coordinate in screen coordinates of the given pointer. Pointers are indexed from 0 to n. The pointer id
@@ -258,7 +258,7 @@ public enum Peripheral {
 	/** @return the different between the current pointer location and the last pointer location on the x-axis. */
 	public int getDeltaX (int pointer);
 
-	/** @return the last touch y coordinate in screen coordinates. The screen origin is the top left corner. */
+	/** @return the last touch y coordinate for the first pointer in screen coordinates. The screen origin is the top left corner. */
 	public int getY ();
 
 	/** Returns the y coordinate in screen coordinates of the given pointer. Pointers are indexed from 0 to n. The pointer id

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTest.java
Patch:
@@ -203,7 +203,7 @@ public void update () {
 				final Entity entity = entities.get(i);
 				gl.glPushMatrix();
 				gl.glMultMatrixf(entity.transform.val, 0);
-				entity.mesh.render(GL10.GL_TRIANGLE_STRIP);
+				entity.mesh.render(GL10.GL_TRIANGLES);
 				gl.glPopMatrix();
 			}
 		}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -444,7 +444,7 @@ public boolean shouldRender () {
 		synchronized (this) {
 			boolean rq = requestRendering;
 			requestRendering = false;
-			return rq || isContinuous;
+			return rq || isContinuous || Display.isDirty();
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/ImmediateModeRenderer20.java
Patch:
@@ -177,7 +177,7 @@ static private String createVertexShader (boolean hasNormals, boolean hasColors,
 		for (int i = 0; i < numTexCoords; i++) {
 			shader += "   v_tex" + i + " = " + ShaderProgram.TEXCOORD_ATTRIBUTE + i + ";\n";
 		}
-
+		shader += "   gl_PointSize = 1.0;\n";
 		shader += "}\n";
 
 		return shader;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,6 +21,7 @@
 import com.badlogic.gdx.tests.BulletTest;
 import com.badlogic.gdx.tests.InputTest;
 import com.badlogic.gdx.tests.ProjectiveTextureTest;
+import com.badlogic.gdx.tests.ShapeRendererTest;
 import com.badlogic.gdx.tests.TextureDownloadTest;
 import com.badlogic.gdx.tests.extensions.FreeTypeTest;
 import com.badlogic.gdx.tests.extensions.InternationalFontsTest;
@@ -39,11 +40,11 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 
-		GdxTest test = new BulletTest();
+		GdxTest test = new ShapeRendererTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 640;
 		config.height = 640;
-		config.useGL20 = test.needsGL20();
+		config.useGL20 = true;
 		config.vSyncEnabled = true;
 		config.resizable = true;
 		new LwjglApplication(test, config);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ShapeRendererTest.java
Patch:
@@ -29,7 +29,6 @@
 import com.badlogic.gdx.tests.utils.PerspectiveCamController;
 
 public class ShapeRendererTest extends GdxTest {
-
 	@Override
 	public boolean needsGL20 () {
 		return true;

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -99,7 +99,6 @@ private float calculateAngle (float a) {
 	private Vector3 calculateDirection (float angle) {
 		Matrix4 transform = new Matrix4();
 		Vector3 dir = new Vector3(-1, 0, 1).nor();
-		float rotAngle = (float)Math.toDegrees(Math.asin(Math.tan(Math.toRadians(angle))));
 		transform.setToRotation(new Vector3(1, 0, 1).nor(), angle);
 		dir.mul(transform).nor();
 		return dir;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
Patch:
@@ -40,12 +40,12 @@
  * 
  * @author mzechner */
 public final class AndroidAudio implements Audio {
-	private SoundPool soundPool;
+	private final SoundPool soundPool;
 	private final AudioManager manager;
 	protected final List<AndroidMusic> musics = new ArrayList<AndroidMusic>();
 
 	public AndroidAudio (Activity context, AndroidApplicationConfiguration config) {
-		soundPool = new SoundPool(config.maxSimultaniousSounds, AudioManager.STREAM_MUSIC, 100);
+		soundPool = new SoundPool(config.maxSimultaneousSounds, AudioManager.STREAM_MUSIC, 100);
 		manager = (AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
 		context.setVolumeControlStream(AudioManager.STREAM_MUSIC);
 	}

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -699,7 +699,7 @@ public static boolean overlapConvexPolygons (float[] verts1, float[] verts2, Min
 				}
 			}
 
-			if (!((min1 < min2 && max1 > min2) || (min2 < min1 && max2 > min1))) {
+			if (!((min1 <= min2 && max1 >= min2) || (min2 <= min1 && max2 >= min1))) {
 				return false;
 			} else {
 				float o = Math.min(max1, max2) - Math.max(min1, min2);
@@ -764,7 +764,7 @@ public static boolean overlapConvexPolygons (float[] verts1, float[] verts2, Min
 				}
 			}
 
-			if (!((min1 < min2 && max1 > min2) || (min2 < min1 && max2 > min1))) {
+			if (!((min1 <= min2 && max1 >= min2) || (min2 <= min1 && max2 >= min1))) {
 				return false;
 			} else {
 				float o = Math.min(max1, max2) - Math.max(min1, min2);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
Patch:
@@ -40,12 +40,12 @@
  * 
  * @author mzechner */
 public final class AndroidAudio implements Audio {
-	private SoundPool soundPool;
+	private final SoundPool soundPool;
 	private final AudioManager manager;
 	protected final List<AndroidMusic> musics = new ArrayList<AndroidMusic>();
 
 	public AndroidAudio (Activity context, AndroidApplicationConfiguration config) {
-		soundPool = new SoundPool(config.maxSimultaniousSounds, AudioManager.STREAM_MUSIC, 100);
+		soundPool = new SoundPool(config.maxSimultaneousSounds, AudioManager.STREAM_MUSIC, 100);
 		manager = (AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
 		context.setVolumeControlStream(AudioManager.STREAM_MUSIC);
 	}

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -100,7 +100,7 @@ private Vector3 calculateDirection (float angle) {
 		Matrix4 transform = new Matrix4();
 		Vector3 dir = new Vector3(-1, 0, 1).nor();
 		float rotAngle = (float)Math.toDegrees(Math.asin(Math.tan(Math.toRadians(angle))));
-		transform.setToRotation(new Vector3(1, 0, 1).nor(), angle);
+		transform.setToRotation(new Vector3(1, 0, 1).nor(), rotAngle);
 		dir.mul(transform).nor();
 		return dir;
 	}

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/wavefront/ObjLoader.java
Patch:
@@ -315,8 +315,9 @@ public void load(String name)
 			BufferedReader reader = new BufferedReader(new InputStreamReader(file.read()), 4096);
 			try {
 				while ((line = reader.readLine()) != null) {
+					
 					if(line.length()>0 && line.charAt(0)=='\t')
-						line = line.substring(1);
+						line = line.substring(1).trim();
 					
 					tokens = line.split("\\s+");
 
@@ -329,7 +330,7 @@ else if (tokens[0].toLowerCase().equals("newmtl"))
 						Material mat;
 						Texture texture;
 						if(textureName.length() > 0)
-							texture = new Texture(textureDir.child(textureName));  //Gdx.files.internal(TEXTURE_PATH + textureName));
+							texture = new Texture(textureDir.child(textureName));
 						else
 							texture = new Texture(1, 1, Format.RGB888); // create default texture
 						mat = new Material(curMatName, new TextureAttribute(texture, 0, "s_tex"), 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTCanvas.java
Patch:
@@ -129,7 +129,7 @@ public boolean setDisplayMode (DisplayMode displayMode) {
 		} else {
 			files = null;
 		}
-		if(Gdx.net == null) {
+		if (Gdx.net == null) {
 			net = new LwjglNet();
 			Gdx.net = net;
 		} else {
@@ -170,7 +170,7 @@ public Graphics getGraphics () {
 	public Input getInput () {
 		return input;
 	}
-	
+
 	@Override
 	public Net getNet () {
 		return net;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/TiledDrawable.java
Patch:
@@ -22,7 +22,7 @@ public TiledDrawable (TextureRegionDrawable drawable) {
 
 	public void draw (SpriteBatch batch, float x, float y, float width, float height) {
 		TextureRegion region = getRegion();
-		float regionWidth = region.getRegionWidth(), regionHeight = region.getRegionWidth();
+		float regionWidth = region.getRegionWidth(), regionHeight = region.getRegionHeight();
 		float remainingX = width % regionWidth, remainingY = height % regionHeight;
 		float startX = x, startY = y;
 		float endX = x + width - remainingX, endY = y + height - remainingY;

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSApplicationConfiguration.java
Patch:
@@ -1,7 +1,7 @@
 package com.badlogic.gdx.backends.ios;
 
 public class IOSApplicationConfiguration {
-	
+	// FIXME add compass, framebuffer bit depth, stencil, just like on Android if possible
 	/** whether or not portrait orientation is supported. */
 	public boolean orientationPortrait = true;
 	/** whether or not landscape orientation is supported. */

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSFileHandle.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.files.FileHandle;
 
+// FIXME see if we can get classpath files to work
 public class IOSFileHandle extends FileHandle {
 	public IOSFileHandle (String fileName, FileType type) {
 		super(fileName, type);

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSFiles.java
Patch:
@@ -71,7 +71,8 @@ public boolean isExternalStorageAvailable() {
 	}
 
 	@Override
-	public String getLocalStoragePath() {
+	public String getLocalStoragePath() {
+		// FIXME this doesn't seem to work
 		return localPath;
 	}
 

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSNet.java
Patch:
@@ -36,11 +36,13 @@ public IOSNet(IOSApplication app) {
 	
 	@Override
 	public HttpResult httpGet (String url, String... parameters) {
+		// FIXME implement this
 		throw new UnsupportedOperationException("Not implemented");
 	}
 
 	@Override
 	public HttpResult httpPost (String url, String contentType, byte[] content) {
+		// FIXME implement this
 		throw new UnsupportedOperationException("Not implemented");
 	}
 

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSPreferences.java
Patch:
@@ -5,6 +5,7 @@
 
 import com.badlogic.gdx.Preferences;
 
+// FIXME implement this
 public class IOSPreferences implements Preferences {
 
 	@Override

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSSound.java
Patch:
@@ -34,6 +34,8 @@
  * rate playback).
  * 
  * @author noblemaster
+ * 
+ * FIXME rewrite using OpenAL!
  */
 public class IOSSound implements Sound {
 
@@ -257,6 +259,7 @@ public void setLooping(long soundId, boolean looping) {
 	@Override
 	public void setPitch(long soundId, float pitch) {
 		if (soundId >= 0) {
+			// FIXME implement this by figuring out how to make MonoTouch support this...
 			// NOTE: It's odd, AVAudioPlayer supports variable rate playing, but is not
 			// available via MonoTouch!? Let's put out a warning...
 			Gdx.app.debug("IOSSound", "Warning: setting a pitch not supported on iOS.");

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -38,7 +38,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 
-		GdxTest test = new InputTest();
+		GdxTest test = new FreeTypeTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 640;
 		config.height = 640;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.badlogic.gdx.backends.android;
 
+import java.lang.reflect.Method;
+
 import android.app.Activity;
 import android.content.Context;
 import android.content.res.Configuration;

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSApplication.java
Patch:
@@ -270,7 +270,7 @@ public long getNativeHeap () {
 
 	@Override
 	public Preferences getPreferences (String name) {
-		return null;
+		return new IOSPreferences();
 	}
 
 	@Override

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/GameScreen.java
Patch:
@@ -47,8 +47,6 @@ public class GameScreen extends DefaultScreen implements InputProcessor {
 	SpriteBatch fadeBatch;
 	SpriteBatch gameBatch;
 
-	BitmapFont font;
-
 	FactoryProduction playerProduction;
 	FactoryProduction enemyProduction;
 
@@ -198,7 +196,6 @@ public GameScreen(Game game, Array<Integer> playerList, Array<Integer> cpuList)
 		gameBatch = new SpriteBatch();
 		gameBatch.getProjectionMatrix().set(cam.combined);
 
-		font = new BitmapFont();
 
 		// init player positions
 //		Array<Vector2> positons = generatePositions(numPlayers + 1);

File: demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/Resources.java
Patch:
@@ -17,7 +17,7 @@ public class Resources {
 	// public AtlasRegion region = atlas.findRegion("imagename");
 	// Sprite sprite = atlas.createSprite("otherimagename");
 
-	public Music music = Gdx.audio.newMusic(Gdx.files.internal("data/audio/music.ogg"));
+	public Music music = Gdx.audio.newMusic(Gdx.files.internal("data/audio/music.mp3"));
 
 	public Sprite factoryP1 = atlas.createSprite("factoryp1");
 	public Sprite factoryP2 = atlas.createSprite("factoryp2");
@@ -150,9 +150,9 @@ public void reInit() {
 				music.stop();
 				music.dispose();
 			} 
-			music = Gdx.audio.newMusic(Gdx.files.internal("data/audio/music.ogg"));
+			music = Gdx.audio.newMusic(Gdx.files.internal("data/audio/music.mp3"));
 		} catch (Exception e) {
-			music = Gdx.audio.newMusic(Gdx.files.internal("data/audio/music.ogg"));
+			music = Gdx.audio.newMusic(Gdx.files.internal("data/audio/music.mp3"));
 		}
 
 		factoryP1 = atlas.createSprite("factoryp1");

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSFileHandle.java
Patch:
@@ -54,7 +54,7 @@ public FileHandle parent () {
 	 */
 	@Override
 	public boolean exists () {
-		return file.exists();
+		return file().exists();
 	}
 
 	public File file () {

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSFileHandle.java
Patch:
@@ -54,7 +54,7 @@ public FileHandle parent () {
 	 */
 	@Override
 	public boolean exists () {
-		return file.exists();
+		return file().exists();
 	}
 
 	public File file () {

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameOver.java
Patch:
@@ -89,7 +89,7 @@ public void draw (float delta) {
 
 	@Override
 	public void update (float delta) {
-		if (Gdx.input.isTouched()) {
+		if (Gdx.input.justTouched()) {
 			isDone = true;
 		}
 	}

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/MainMenu.java
Patch:
@@ -60,7 +60,7 @@ public boolean isDone () {
 
 	@Override
 	public void update (float delta) {
-		if (Gdx.input.isTouched()) {
+		if (Gdx.input.justTouched()) {
 			isDone = true;
 		}
 	}

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen.java
Patch:
@@ -67,6 +67,7 @@ public void draw (float deltaTime) {
 		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
+		batcher.setProjectionMatrix(guiCam.combined);
 		batcher.disableBlending();
 		batcher.begin();
 		batcher.draw(helpRegion, 0, 0, 320, 480);

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen2.java
Patch:
@@ -67,6 +67,7 @@ public void draw (float deltaTime) {
 		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
+		batcher.setProjectionMatrix(guiCam.combined);
 		batcher.disableBlending();
 		batcher.begin();
 		batcher.draw(helpRegion, 0, 0, 320, 480);

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen3.java
Patch:
@@ -67,6 +67,7 @@ public void draw (float deltaTime) {
 		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
+		batcher.setProjectionMatrix(guiCam.combined);
 		batcher.disableBlending();
 		batcher.begin();
 		batcher.draw(helpRegion, 0, 0, 320, 480);

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen4.java
Patch:
@@ -67,6 +67,7 @@ public void draw (float deltaTime) {
 		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
+		batcher.setProjectionMatrix(guiCam.combined);
 		batcher.disableBlending();
 		batcher.begin();
 		batcher.draw(helpRegion, 0, 0, 320, 480);

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen5.java
Patch:
@@ -67,6 +67,7 @@ public void draw (float deltaTime) {
 		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
+		batcher.setProjectionMatrix(guiCam.combined);
 		batcher.disableBlending();
 		batcher.begin();
 		batcher.draw(helpRegion, 0, 0, 320, 480);

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HighscoresScreen.java
Patch:
@@ -69,6 +69,7 @@ public void draw (float deltaTime) {
 		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		guiCam.update();
 
+		batcher.setProjectionMatrix(guiCam.combined);
 		batcher.disableBlending();
 		batcher.begin();
 		batcher.draw(Assets.backgroundRegion, 0, 0, 320, 480);

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSInput.java
Patch:
@@ -70,11 +70,10 @@ private void setupAccelerometer() {
 
 				@Override
 				public void DidAccelerate(UIAccelerometer accelerometer, UIAcceleration values) {
-					super.DidAccelerate(accelerometer, values);
+					//super.DidAccelerate(accelerometer, values);
 					acceleration[0] = (float)values.get_X();
 					acceleration[1] = (float)values.get_Y();
 					acceleration[2] = (float)values.get_Z();
-					Gdx.app.log("Input", "accel");
 				}
 			});
 			UIAccelerometer.get_SharedAccelerometer().set_UpdateInterval(config.accelerometerUpdate);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -148,13 +148,13 @@ void calculatePositionAndValue (float x, float y) {
 
 		if (vertical) {
 			float height = getHeight() - bg.getTopHeight() - bg.getBottomHeight();
-			sliderPos = y - knob.getMinHeight() * 0.5f;
+			sliderPos = y- bg.getBottomHeight() - knob.getMinHeight() * 0.5f;
 			sliderPos = Math.max(0, sliderPos);
 			sliderPos = Math.min(height - knob.getMinHeight(), sliderPos);
 			value = min + (max - min) * (sliderPos / (height - knob.getMinHeight()));
 		} else {
-			float width = getWidth();
-			sliderPos = x - knob.getMinWidth() * 0.5f;
+			float width = getWidth() - bg.getLeftWidth() - bg.getRightWidth();
+			sliderPos = x - bg.getLeftWidth() - knob.getMinWidth() * 0.5f;
 			sliderPos = Math.max(0, sliderPos);
 			sliderPos = Math.min(width - knob.getMinWidth(), sliderPos);
 			value = min + (max - min) * (sliderPos / (width - knob.getMinWidth()));

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/lang/System.java
Patch:
@@ -143,7 +143,7 @@ private static native void nativeArraycopy(Object src, int srcOfs, Object dest,
     if (src == dest && srcOfs < destOfs) {
       srcOfs += len;
       for (var destEnd = destOfs + len; destEnd-- > destOfs;) {
-        dst[destEnd] = src[--srcOfs];
+        dest[destEnd] = src[--srcOfs];
       }
     } else {
       for (var destEnd = destOfs + len; destOfs < destEnd;) {

File: gdx/src/com/badlogic/gdx/math/collision/Sphere.java
Patch:
@@ -41,6 +41,6 @@ public Sphere (Vector3 center, float radius) {
 	/** @param sphere the other sphere
 	 * @return whether this and the other sphere overlap */
 	public boolean overlaps (Sphere sphere) {
-		return center.dst2(sphere.center) < radius * radius + sphere.radius * radius;
+		return center.dst2(sphere.center) < (radius+sphere.radius)*(radius+sphere.radius);
 	}
 }

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSGraphics.java
Patch:
@@ -91,8 +91,8 @@ protected void OnRenderFrame(FrameEventArgs arg0) {
 		deltaTime = (time - lastFrameTime) / 1000000000.0f;
 		lastFrameTime = time;
 		
-		fps++;
-		if(time - framesStart >= 1000000000l) {
+		frames++;
+		if (time - framesStart >= 1000000000l) {
 			framesStart = time;
 			fps = frames;
 			frames = 0;

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TiledLoader.java
Patch:
@@ -464,7 +464,7 @@ private void fromCSV () {
 					StringTokenizer st = new StringTokenizer(dataString.trim(), ",");
 					for (int row = 0; row < currLayerHeight; row++) {
 						for (int col = 0; col < currLayerWidth; col++) {
-							currLayer.tiles[row][col] = Integer.parseInt(st.nextToken().trim());
+							currLayer.tiles[row][col] = (int) Long.parseLong(st.nextToken().trim());
 						}
 					}
 				}

File: extensions/gdx-tiled-preprocessor/src/com/badlogic/gdx/tiledmappacker/TiledMapPacker.java
Patch:
@@ -110,7 +110,7 @@ public void processMap (File inputDir, File outputDir, Settings settings) throws
 				for (TiledLayer layer : map.layers) {
 					for (int y = 0; y < layer.tiles.length; ++y) {
 						for (int x = 0; x < layer.tiles[y].length; ++x) {
-							usedIds.add(layer.tiles[y][x]);
+							usedIds.add(layer.tiles[y][x] & ~0xE0000000);
 						}
 					}
 				}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TouchpadTest.java
Patch:
@@ -10,20 +10,21 @@
 
 public class TouchpadTest extends GdxTest {
 	Stage stage;
+	Touchpad touchpad;
 
 	public void create () {
 		stage = new Stage();
 		Gdx.input.setInputProcessor(stage);
 
 		Skin skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 
-		Touchpad touchpad = new Touchpad(20, skin);
+		touchpad = new Touchpad(20, skin);
 		touchpad.setBounds(15, 15, 100, 100);
 		stage.addActor(touchpad);
 	}
 
 	public void render () {
-		// System.out.println(meow.getValue());
+		//System.out.println(touchpad.getKnobPercentX() + " " + touchpad.getKnobPercentY());
 		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		stage.act(Gdx.graphics.getDeltaTime());
 		stage.draw();

File: extensions/gdx-bullet/src/com/badlogic/gdx/physics/bullet/BulletBuild.java
Patch:
@@ -94,8 +94,8 @@ public static void main (String[] args) throws Exception {
 
 		// build natives
 		// BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
-		BuildExecutor.executeAnt("jni/build-linux64.xml", "");
-		BuildExecutor.executeAnt("jni/build-android32.xml", "");
-		BuildExecutor.executeAnt("jni/build.xml", "pack-natives");
+//		BuildExecutor.executeAnt("jni/build-linux64.xml", "");
+//		BuildExecutor.executeAnt("jni/build-android32.xml", "");
+//		BuildExecutor.executeAnt("jni/build.xml", "pack-natives");
 	}
 }

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreetypeBuild.java
Patch:
@@ -118,6 +118,6 @@ public static void main (String[] args) throws Exception {
 		new AntScriptGenerator().generate(new BuildConfig("gdx-freetype"), win32home, win32, win64, lin32, lin64, mac, android);
 // BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v clean");
 // BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
-		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
+//		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
 	}
 }

File: extensions/gdx-image/src/com/badlogic/gdx/graphics/g2d/ImageBuild.java
Patch:
@@ -72,6 +72,6 @@ public static void main (String[] args) throws Exception {
 
 		// build natives
 // BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
-		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
+		//BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
 	}
 }

File: gdx/src/com/badlogic/gdx/utils/GdxBuild.java
Patch:
@@ -49,7 +49,7 @@ public static void main (String[] args) throws Exception {
 			win64, lin32, lin64, android);
 
 		// build natives
-		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
-		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
+		// BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
+		// BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
 	}
 }

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeType.java
Patch:
@@ -354,7 +354,7 @@ public ByteBuffer getBuffer() {
 				//              FreeType sets FT_Bitmap::buffer to NULL when the bitmap is empty (e.g. for ' ')
 				//              JNICheck is on by default on emulators and might have a point anyway...
 				//              So let's avoid this and just return a dummy non-null non-zero buffer
-				return ByteBuffer.allocate(1);
+				return BufferUtils.newByteBuffer(1);
 			return getBuffer(address);
 		}
 		

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -20,6 +20,8 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.tests.ProjectiveTextureTest;
 import com.badlogic.gdx.tests.TextureDownloadTest;
+import com.badlogic.gdx.tests.extensions.FreeTypeTest;
+import com.badlogic.gdx.tests.extensions.InternationalFontsTest;
 import com.badlogic.gdx.tests.gwt.GwtTestWrapper;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
@@ -32,7 +34,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 
-		GdxTest test = new GwtTestWrapper();
+		GdxTest test = new InternationalFontsTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 640;
 		config.height = 640;

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java
Patch:
@@ -107,7 +107,7 @@ public void rotateZ (float angle) {
 	public void setRotation (Vector3 dir, Vector3 up) {
 		tmp.set(up).crs(dir).nor();
 		tmp2.set(dir).crs(tmp).nor();
-		rotation.setFromAxes(tmp.x, tmp.y, tmp.z, tmp2.x, tmp2.y, tmp2.z, dir.x, dir.y, dir.z);
+		rotation.setFromAxes(tmp.x, tmp2.x, dir.x, tmp.y, tmp2.y, dir.y, tmp.z, tmp2.z, dir.z);
 		updated = false;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -187,7 +187,8 @@ public void act (float delta) {
 			pointerOverActors[pointer] = fireEnterAndExit(overLast, pointerScreenX[pointer], pointerScreenY[pointer], pointer);
 		}
 		// Update over actor for the mouse on the desktop.
-		if (Gdx.app.getType() == ApplicationType.Desktop)
+		ApplicationType type = Gdx.app.getType();
+		if (type == ApplicationType.Desktop || type == ApplicationType.Applet || type == ApplicationType.WebGL)
 			mouseOverActor = fireEnterAndExit(mouseOverActor, mouseScreenX, mouseScreenY, -1);
 
 		root.act(delta);

File: gdx/src/com/badlogic/gdx/utils/StringBuilder.java
Patch:
@@ -102,7 +102,7 @@ final void appendNull () {
 
 	final void append0 (char[] value) {
 		int newSize = length + value.length;
-		if (newSize > value.length) {
+		if (newSize > chars.length) {
 			enlargeBuffer(newSize);
 		}
 		System.arraycopy(value, 0, value, length, value.length);
@@ -119,7 +119,7 @@ final void append0 (char[] value, int offset, int length) {
 		}
 
 		int newSize = this.length + length;
-		if (newSize > value.length) {
+		if (newSize > chars.length) {
 			enlargeBuffer(newSize);
 		}
 		System.arraycopy(value, offset, chars, this.length, length);

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -222,7 +222,7 @@ public byte[] readBytes () {
 				int count = input.read(buffer, position, buffer.length - position);
 				if (count == -1) break;
 				position += count;
-				if (position == buffer.length) {
+				if (count == 0 && position == buffer.length) {
 					// Grow buffer.
 					byte[] newBuffer = new byte[buffer.length * 2];
 					System.arraycopy(buffer, 0, newBuffer, 0, position);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Scene2dTest.java
Patch:
@@ -96,7 +96,7 @@ public boolean longPress (Actor actor, float x, float y) {
 				return true;
 			}
 
-			public void fling (InputEvent event, float velocityX, float velocityY, int pointer, int button) {
+			public void fling (InputEvent event, float velocityX, float velocityY, int button) {
 				System.out.println("fling " + velocityX + ", " + velocityY);
 			}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/PreloaderBundleGenerator.java
Patch:
@@ -164,7 +164,7 @@ private String getAssetOutputPath (GeneratorContext context) {
 			return null;
 		}
 		String path = assetPathProperty.getValues().get(0);
-		if ( !path.endsWith("/")){
+		if (path != null && !path.endsWith("/")){
 			path += "/";
 		}			
 		return path;

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java
Patch:
@@ -107,7 +107,7 @@ public void rotateZ (float angle) {
 	public void setRotation (Vector3 dir, Vector3 up) {
 		tmp.set(up).crs(dir).nor();
 		tmp2.set(dir).crs(tmp).nor();
-		rotation.setFromAxes(tmp.x, tmp.y, tmp.z, tmp2.x, tmp2.y, tmp2.z, dir.x, dir.y, dir.z);
+		rotation.setFromAxes(tmp.x, tmp2.x, dir.x, tmp.y, tmp2.y, dir.y, tmp.z, tmp2.z, dir.z);
 		updated = false;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java
Patch:
@@ -253,10 +253,9 @@ public Node getNodeAt (float y) {
 	}
 
 	private float getNodeAt (Array<Node> nodes, float y, float rowY) {
-		y += iconSpacing / 2;
 		for (int i = 0, n = nodes.size; i < n; i++) {
 			Node node = nodes.get(i);
-			if (y > rowY - node.height - ySpacing / 2 && y <= rowY + ySpacing / 2) {
+			if (y >= rowY - node.height - ySpacing && y < rowY) {
 				foundNode = node;
 				return -1;
 			}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTFrame.java
Patch:
@@ -54,7 +54,7 @@ protected void resize (int width, int height) {
 
 		Runtime.getRuntime().addShutdownHook(new Thread() {
 			public void run () {
-				Runtime.getRuntime().halt(0); // Because fuck you, Swing shutdown hooks.
+				Runtime.getRuntime().halt(0); // Because fuck you, deadlock causing Swing shutdown hooks.
 			}
 		});
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglFrame.java
Patch:
@@ -55,7 +55,7 @@ protected void resize (int width, int height) {
 
 		Runtime.getRuntime().addShutdownHook(new Thread() {
 			public void run () {
-				Runtime.getRuntime().halt(0); // Because fuck you, Swing shutdown hooks.
+				Runtime.getRuntime().halt(0); // Because fuck you, deadlock causing Swing shutdown hooks.
 			}
 		});
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -146,7 +146,7 @@ public void touchDragged (InputEvent event, float x, float y, int pointer) {
 			private void setCursorPosition (float x) {
 				lastBlink = 0;
 				cursorOn = false;
-				x -= renderOffset;
+				x -= renderOffset + textOffset;
 				for (int i = 0; i < glyphPositions.size; i++) {
 					if (glyphPositions.items[i] > x) {
 						cursor = Math.max(0, i - 1);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -170,7 +170,6 @@ void start () {
 
 			public void run () {
 				if (!running) return;
-				canvas.setCursor(cursor);
 				graphics.updateTime();
 				synchronized (runnables) {
 					executedRunnables.clear();
@@ -200,6 +199,7 @@ public void run () {
 				listener.render();
 				audio.update();
 				Display.update();
+				canvas.setCursor(cursor);
 				if (graphics.vsync) Display.sync(60);
 				if (running && !Display.isCloseRequested())
 					EventQueue.invokeLater(this);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -45,8 +45,8 @@ public class LwjglApplication implements Application {
 	final ApplicationListener listener;
 	Thread mainLoopThread;
 	boolean running = true;
-	List<Runnable> runnables = new ArrayList<Runnable>();
-	List<Runnable> executedRunnables = new ArrayList<Runnable>();
+	final List<Runnable> runnables = new ArrayList();
+	final List<Runnable> executedRunnables = new ArrayList();
 	int logLevel = LOG_INFO;
 
     public LwjglApplication (ApplicationListener listener, String title, int width, int height, boolean useGL2) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -466,9 +466,9 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 		if (focused) {
 			blink();
 			if (cursorOn && cursorPatch != null) {
-				cursorPatch.draw(batch, x + textOffset + glyphPositions.get(cursor) - glyphPositions.items[visibleTextStart] + 1, y
-					+ textY - textBounds.height - font.getDescent(), cursorPatch.getMinWidth(), textBounds.height + font.getDescent()
-					/ 2);
+				cursorPatch.draw(batch, x + bgLeftWidth + textOffset + glyphPositions.get(cursor)
+					- glyphPositions.items[visibleTextStart] - 1, y + textY - textBounds.height - font.getDescent(),
+					cursorPatch.getMinWidth(), textBounds.height + font.getDescent() / 2);
 			}
 		}
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -179,7 +179,7 @@ public void pan (InputEvent event, float x, float y, float deltaX, float deltaY)
 				cancelTouchFocusedChild(event);
 			}
 
-			public void fling (InputEvent event, float x, float y, int pointer, int button) {
+			public void fling (InputEvent event, float x, float y, int button) {
 				if (Math.abs(x) > 150) {
 					flingTimer = flingTime;
 					velocityX = x;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -179,7 +179,7 @@ public void pan (InputEvent event, float x, float y, float deltaX, float deltaY)
 				cancelTouchFocusedChild(event);
 			}
 
-			public void fling (InputEvent event, float x, float y, int pointer, int button) {
+			public void fling (InputEvent event, float x, float y, int button) {
 				if (Math.abs(x) > 150) {
 					flingTimer = flingTime;
 					velocityX = x;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ClickListener.java
Patch:
@@ -74,6 +74,7 @@ public void touchUp (InputEvent event, float x, float y, int pointer, int button
 			}
 			pressed = false;
 			pressedPointer = -1;
+			over = false;
 			cancelled = false;
 		}
 	}

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/collada/Faces.java
Patch:
@@ -240,17 +240,15 @@ public SkeletonSubMesh getSkeletonSubMesh (Skin skin) {
 		mesh.setVertices(verts);
 		mesh.setIndices(indices);
 		
-		SkeletonSubMesh submesh = new SkeletonSubMesh();
+		SkeletonSubMesh submesh = new SkeletonSubMesh("", mesh, GL10.GL_TRIANGLES);
 		submesh.vertices = verts;
 		submesh.indices = indices;
-		submesh.mesh = mesh;
 		
 		submesh.skinnedVertices = new float[submesh.vertices.length];
 		System.arraycopy(submesh.vertices, 0, submesh.skinnedVertices, 0, submesh.vertices.length);
 		
 		submesh.boneAssignments = new int[vertices.size][];
 		submesh.boneWeights = new float[vertices.size][];
-		submesh.primitiveType = GL10.GL_TRIANGLES;
 		
 		for(int i=0;i<skin.boneIndex.length;i++){
 			for(int j=0;j<vertices.size;j++)

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/ogre/mesh/Face.java
Patch:
@@ -30,7 +30,7 @@
 @XmlRootElement(name = "face")
 public class Face {
 
-	@XmlAttribute(required = true) public int v1;
-	@XmlAttribute public int v2;
-	@XmlAttribute public int v3;
+	@XmlAttribute(required = true) public short v1;
+	@XmlAttribute public short v2;
+	@XmlAttribute public short v3;
 }

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/SkeletonModelViewer.java
Patch:
@@ -183,7 +183,7 @@ public static void main (String[] argv) {
 // System.out.println("KeyframedModelViewer <filename> ?<texture-filename>");
 // System.exit(-1);
 // }
-		new LwjglApplication(new SkeletonModelViewer("data/robot-mesh.xml", "data/robot.jpg"), "SkeletonModel Viewer", 800, 480,
+		new LwjglApplication(new SkeletonModelViewer("data/models/robot-mesh.xml", "data/models/robot.jpg"), "SkeletonModel Viewer", 800, 480,
 			false);
 	}
 }

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/scenes/scene2d/ui/TableToolkit.java
Patch:
@@ -22,6 +22,7 @@
 import com.badlogic.gdx.scenes.scene2d.Group;
 import com.badlogic.gdx.scenes.scene2d.utils.Layout;
 import com.badlogic.gdx.utils.Array;
+import com.badlogic.gwtref.client.Method;
 import com.badlogic.gwtref.client.ReflectionCache;
 import com.esotericsoftware.tablelayout.BaseTableLayout.Debug;
 import com.esotericsoftware.tablelayout.Toolkit;
@@ -34,7 +35,8 @@ class TableToolkit extends Toolkit<Actor, Table, TableLayout> {
 	public void addChild (Actor parent, Actor child) {
 		child.remove();
 		try {
-			ReflectionCache.getType(parent.getClass()).getMethod("setWidget", Actor.class).invoke(parent, child);
+			Method method = ReflectionCache.getType(parent.getClass()).getMethod("setWidget", Actor.class);
+			method.invoke(parent, child);
 			return;
 		} catch (Exception ignored) {
 			// FIXME this is bad

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/Method.java
Patch:
@@ -147,7 +147,7 @@ public Object invoke (Object obj, Object... params) {
 	}
 
 	boolean match (String name, Class... types) {
-		if (!name.equals(name)) return false;
+		if (!this.name.equals(name)) return false;
 		if (types.length != parameters.length) return false;
 		for (int i = 0; i < types.length; i++) {
 			Type t1 = ReflectionCache.instance.forName(parameters[i].getType().getName());

File: tests/gdx-tests-gwt/src/com/badlogic/gdx/tests/gwt/client/GwtTestStarter.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.backends.gwt.GwtApplication;
 import com.badlogic.gdx.backends.gwt.GwtApplicationConfiguration;
 import com.badlogic.gdx.tests.UITest;
+import com.badlogic.gdx.tests.gwt.GwtTestWrapper;
 
 public class GwtTestStarter extends GwtApplication {
 	@Override
@@ -29,6 +30,6 @@ public GwtApplicationConfiguration getConfig () {
 
 	@Override
 	public ApplicationListener getApplicationListener () {
-		return new UITest();
+		return new GwtTestWrapper();
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.tests.ProjectiveTextureTest;
 import com.badlogic.gdx.tests.TextureDownloadTest;
+import com.badlogic.gdx.tests.gwt.GwtTestWrapper;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
@@ -31,7 +32,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 
-		GdxTest test = new ProjectiveTextureTest();
+		GdxTest test = new GwtTestWrapper();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 640;
 		config.height = 640;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java
Patch:
@@ -25,7 +25,7 @@ public class Tree extends WidgetGroup {
 	TreeStyle style;
 	final Array<Node> rootNodes = new Array();
 	final Array<Node> selectedNodes = new Array();
-	float ySpacing = 4, iconSpacing = 2, padding = 8, indentSpacing;
+	float ySpacing = 4, iconSpacing = 2, padding = 0, indentSpacing;
 	private float leftColumnWidth, prefWidth, prefHeight;
 	private boolean sizeInvalid = true;
 	private Node foundNode;

File: extensions/gdx-tiled-preprocessor/src/com/badlogic/gdx/tiledmappacker/TileSetLayout.java
Patch:
@@ -55,8 +55,8 @@ protected TileSetLayout (TileSet tileSet, FileHandle baseDir) throws IOException
 		int stopWidth = image.getWidth() - tileSet.tileWidth;
 		int stopHeight = image.getHeight() - tileSet.tileHeight;
 		
-		for (y = tileSet.margin; y < stopHeight; y += tileSet.tileHeight + tileSet.spacing) {
-			for (x = tileSet.margin; x < stopWidth; x += tileSet.tileWidth + tileSet.spacing) {
+		for (y = tileSet.margin; y <= stopHeight; y += tileSet.tileHeight + tileSet.spacing) {
+			for (x = tileSet.margin; x <= stopWidth; x += tileSet.tileWidth + tileSet.spacing) {
 				if (y == tileSet.margin) numCols++;
 				imageTilePositions.put(tile, new Vector2(x, y));
 				tile++;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -638,7 +638,7 @@ public float getScrollBarHeight () {
 	}
 
 	public float getScrollBarWidth () {
-		return style.vScrollKnob == null || !scrollY ? 0 : style.hScrollKnob.getMinWidth();
+		return style.vScrollKnob == null || !scrollY ? 0 : style.vScrollKnob.getMinWidth();
 	}
 
 	/** Disables scrolling in a direction. The widget will be sized to the FlickScrollPane in the disabled direction. */

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1.java
Patch:
@@ -146,6 +146,7 @@ private static int getPixelSize (Format format) {
 	public static ETC1Data encodeImage (Pixmap pixmap) {
 		int pixelSize = getPixelSize(pixmap.getFormat());
 		ByteBuffer compressedData = encodeImage(pixmap.getPixels(), 0, pixmap.getWidth(), pixmap.getHeight(), pixelSize);
+		BufferUtils.newUnsafeByteBuffer(compressedData);
 		return new ETC1Data(pixmap.getWidth(), pixmap.getHeight(), compressedData, 0);
 	}
 
@@ -156,6 +157,7 @@ public static ETC1Data encodeImage (Pixmap pixmap) {
 	public static ETC1Data encodeImagePKM (Pixmap pixmap) {
 		int pixelSize = getPixelSize(pixmap.getFormat());
 		ByteBuffer compressedData = encodeImagePKM(pixmap.getPixels(), 0, pixmap.getWidth(), pixmap.getHeight(), pixelSize);
+		BufferUtils.newUnsafeByteBuffer(compressedData);
 		return new ETC1Data(pixmap.getWidth(), pixmap.getHeight(), compressedData, 16);
 	}
 

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALAudio.java
Patch:
@@ -236,6 +236,7 @@ public void setSoundPan (long soundId, float pan, float volume) {
 		int sourceId = soundIdToSource.get(soundId);
 
 		AL10.alSource3f(sourceId, AL10.AL_POSITION, pan, 0, 0);
+		AL10.alSourcef(sourceId, AL10.AL_GAIN, volume);
 	}
 
 	public void dispose () {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.ProjectiveTextureTest;
 import com.badlogic.gdx.tests.TextureDownloadTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
@@ -30,7 +31,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 
-		GdxTest test = new TextureDownloadTest();
+		GdxTest test = new ProjectiveTextureTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 640;
 		config.height = 640;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL11.java
Patch:
@@ -127,7 +127,7 @@ public void glDeleteBuffers (int n, IntBuffer buffers) {
 
 	public void glGenBuffers (int n, int[] buffers, int offset) {
 		for (int i = offset; i < offset + n; i++)
-			buffers[offset] = GL15.glGenBuffers();
+			buffers[i] = GL15.glGenBuffers();
 	}
 
 	public void glGenBuffers (int n, IntBuffer buffers) {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,8 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
-import com.badlogic.gdx.tests.Box2DTest;
-import com.badlogic.gdx.tests.InternationalFontsTest;
+import com.badlogic.gdx.tests.TextureDownloadTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
@@ -31,7 +30,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 
-		GdxTest test = new Box2DTest();
+		GdxTest test = new TextureDownloadTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 640;
 		config.height = 640;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MeshTest.java
Patch:
@@ -32,9 +32,9 @@ public class MeshTest extends GdxTest {
 
 	@Override
 	public void render () {
-		Gdx.graphics.getGL10().glClear(GL10.GL_COLOR_BUFFER_BIT);
-		Gdx.graphics.getGL10().glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		Gdx.graphics.getGL10().glEnable(GL10.GL_TEXTURE_2D);
+		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glEnable(GL10.GL_TEXTURE_2D);
 		texture.bind();
 		mesh.render(GL10.GL_TRIANGLES, 3, 3);
 	}

File: gdx/src/com/esotericsoftware/tablelayout/BaseTableLayout.java
Patch:
@@ -780,7 +780,7 @@ public void layout (float layoutX, float layoutY, float layoutWidth, float layou
 			float extraWidth = 0;
 			for (int column = c.column, nn = column + c.colspan; column < nn; column++)
 				extraWidth += columnWeightedWidth[column] - columnWidth[column];
-			extraWidth -= c.computedPadLeft + c.computedPadRight;
+			extraWidth -= Math.max(0, c.computedPadLeft + c.computedPadRight);
 
 			extraWidth /= c.colspan;
 			if (extraWidth > 0) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/DragAndDrop.java
Patch:
@@ -29,6 +29,7 @@ public void dragStart (InputEvent event, float x, float y, int pointer) {
 			}
 
 			public void drag (InputEvent event, float x, float y, int pointer) {
+				if (payload == null) return;
 				Stage stage = event.getStage();
 
 				// Find target.
@@ -67,6 +68,7 @@ public void drag (InputEvent event, float x, float y, int pointer) {
 			}
 
 			public void dragStop (InputEvent event, float x, float y, int pointer) {
+				if (payload == null) return;
 				if (isValidTarget) target.drop(source, payload);
 				source.dragStop(event, x, y, pointer, isValidTarget ? target : null);
 				DragAndDrop.this.source = null;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -548,7 +548,7 @@ public boolean removeActor (Actor actor) {
 	}
 
 	public Actor hit (float x, float y) {
-		if (x < 0 && x >= getWidth() && y < 0 && y >= getHeight()) return null;
+		if (x < 0 || x >= getWidth() || y < 0 || y >= getHeight()) return null;
 		if (scrollX && hScrollBounds.contains(x, y)) return this;
 		if (scrollY && vScrollBounds.contains(x, y)) return this;
 		return super.hit(x, y);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -443,6 +443,7 @@ void updateDisplayText () {
 		} else
 			displayText = text;
 		style.font.computeGlyphAdvancesAndPositions(displayText, glyphAdvances, glyphPositions);
+		if (selectionStart > text.length()) selectionStart = text.length();
 	}
 
 	private void blink () {

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/TexturePacker2.java
Patch:
@@ -86,6 +86,8 @@ private void writeImages (File outputDir, Array<Page> pages, String packFileName
 				width = MathUtils.nextPowerOfTwo(width);
 				height = MathUtils.nextPowerOfTwo(height);
 			}
+			width = Math.max(settings.minWidth, width);
+			height = Math.max(settings.minHeight, height);
 
 			File outputFile;
 			while (true) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -532,7 +532,7 @@ public TextBounds drawWrapped (SpriteBatch spriteBatch, CharSequence str, float
 					lineEnd--;
 				}
 				if (lineEnd == start) {
-					nextStart--;
+					if (nextStart > start + 1) nextStart--;
 					lineEnd = nextStart; // If no characters to break, show all.
 				} else {
 					nextStart = lineEnd;
@@ -675,7 +675,7 @@ public TextBounds getWrappedBounds (CharSequence str, float wrapWidth, TextBound
 					lineEnd--;
 				}
 				if (lineEnd == start) {
-					nextStart--;
+					if (nextStart > start + 1) nextStart--;
 					lineEnd = nextStart; // If no characters to break, show all.
 				} else {
 					nextStart = lineEnd;

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -345,7 +345,7 @@ public TextBounds setWrappedText (CharSequence str, float x, float y, float wrap
 					lineEnd--;
 				}
 				if (lineEnd == start) {
-					nextStart--;
+					if (nextStart > start + 1) nextStart--;
 					lineEnd = nextStart; // If no characters to break, show all.
 				} else {
 					nextStart = lineEnd;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/InputListener.java
Patch:
@@ -48,8 +48,7 @@ public boolean handle (Event e) {
 			touchDragged(event, coords.x, coords.y, event.getPointer());
 			return true;
 		case mouseMoved:
-			mouseMoved(event, coords.x, coords.y);
-			return false;
+			return mouseMoved(event, coords.x, coords.y);
 		case enter:
 			enter(event, coords.x, coords.y, event.getPointer(), event.getRelatedActor());
 			return false;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ChangeListener.java
Patch:
@@ -29,6 +29,7 @@ public boolean handle (Event event) {
 		return false;
 	}
 
+	/** @param actor The event target, which is the actor that emitted the change event. */
 	abstract public void changed (ChangeEvent event, Actor actor);
 
 	/** Fired when something in an actor has changed. This is a generic event, exactly what changed in an actor will vary.

File: gdx/src/com/badlogic/gdx/assets/loaders/resolvers/ResolutionFileResolver.java
Patch:
@@ -63,13 +63,13 @@ static public Resolution choose (Resolution... descriptors) {
 		if (w < h) {
 			for (int i = 0, n = descriptors.length; i < n; i++) {
 				Resolution other = descriptors[i];
-				if (w >= other.portraitWidth && other.portraitWidth >= best.portraitWidth
+				if (w >= other.portraitWidth && other.portraitWidth >= best.portraitWidth && h >= other.portraitHeight
 					&& other.portraitHeight >= best.portraitHeight) best = descriptors[i];
 			}
 		} else {
 			for (int i = 0, n = descriptors.length; i < n; i++) {
 				Resolution other = descriptors[i];
-				if (w >= other.portraitHeight && other.portraitHeight >= best.portraitHeight
+				if (w >= other.portraitHeight && other.portraitHeight >= best.portraitHeight && w >= other.portraitWidth
 					&& other.portraitWidth >= best.portraitWidth) best = descriptors[i];
 			}
 		}

File: gdx/src/com/badlogic/gdx/input/GestureDetector.java
Patch:
@@ -231,8 +231,9 @@ public void setTapSquareSize (int tapSquareSize) {
 		this.tapSquareSize = tapSquareSize;
 	}
 
-	public void setTapCountInterval (long tapCountInterval) {
-		this.tapCountInterval = tapCountInterval;
+	/** @param tapCountInterval time in seconds that must pass for two touch down/up sequences to be detected as consecutive taps. */
+	public void setTapCountInterval (float tapCountInterval) {
+		this.tapCountInterval = (long)(tapCountInterval * 1000000000l);
 	}
 
 	public void setLongPressSeconds (float longPressSeconds) {

File: gdx/src/com/badlogic/gdx/utils/StringBuilder.java
Patch:
@@ -118,12 +118,12 @@ final void append0 (char[] value, int offset, int length) {
 			throw new ArrayIndexOutOfBoundsException("Length out of bounds: " + length);
 		}
 
-		int newSize = length + length;
+		int newSize = this.length + length;
 		if (newSize > value.length) {
 			enlargeBuffer(newSize);
 		}
-		System.arraycopy(value, offset, value, length, length);
-		length = newSize;
+		System.arraycopy(value, offset, chars, this.length, length);
+		this.length = newSize;
 	}
 
 	final void append0 (char ch) {

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -749,13 +749,13 @@ public <T> T readValue (Class<T> type, Class elementType, Object jsonData) {
 
 		if (jsonData instanceof Array) {
 			Array array = (Array)jsonData;
-			if (type == null || type.isAssignableFrom(Array.class)) {
+			if (type == null || Array.class.isAssignableFrom(type)) {
 				Array newArray = new Array(array.size);
 				for (int i = 0, n = array.size; i < n; i++)
 					newArray.add(readValue(elementType, null, array.get(i)));
 				return (T)newArray;
 			}
-			if (type.isAssignableFrom(ArrayList.class)) {
+			if (ArrayList.class.isAssignableFrom(type)) {
 				ArrayList newArray = new ArrayList(array.size);
 				for (int i = 0, n = array.size; i < n; i++)
 					newArray.add(readValue(elementType, null, array.get(i)));

File: gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
Patch:
@@ -46,8 +46,7 @@ public class Sprite extends TextureRegion {
 	private boolean dirty = true;
 	private Rectangle bounds;
 
-	/** Creates an uninitialized sprite. The sprite will need a texture, texture region, bounds, and color set before it can be
-	 * drawn. */
+	/** Creates an uninitialized sprite. The sprite will need a texture region and bounds set before it can be drawn. */
 	public Sprite () {
 		setColor(1, 1, 1, 1);
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java
Patch:
@@ -99,6 +99,7 @@ public void setStyle (TreeStyle style) {
 	}
 
 	public void add (Node node) {
+		remove(node);
 		node.parent = null;
 		rootNodes.add(node);
 		node.addToTree(this);
@@ -270,7 +271,7 @@ public void setSelection (Node node) {
 		selectedNodes.clear();
 		selectedNodes.add(node);
 	}
-	
+
 	public void setSelection (Array<Node> nodes) {
 		selectedNodes.clear();
 		selectedNodes.addAll(nodes);

File: gdx/src/com/esotericsoftware/tablelayout/BaseTableLayout.java
Patch:
@@ -615,8 +615,8 @@ private void computeSize () {
 					columnPrefWidth[c.column] = uniformPrefWidth;
 				}
 				if (uniformPrefHeight > 0 && c.uniformY != null) {
-					rowMinHeight[c.column] = uniformMinHeight;
-					rowPrefHeight[c.column] = uniformPrefHeight;
+					rowMinHeight[c.row] = uniformMinHeight;
+					rowPrefHeight[c.row] = uniformPrefHeight;
 				}
 				continue outer;
 			}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -232,7 +232,7 @@ public float getMinHeight () {
 	 * @author mzechner */
 	static public class ButtonStyle {
 		/** Optional. */
-		public Drawable down, up, checked, over, disabled;
+		public Drawable up, down, checked, over, disabled;
 		/** Optional. */
 		public float pressedOffsetX, pressedOffsetY;
 		/** Optional. */

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -34,7 +34,6 @@
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Audio;
-import com.badlogic.gdx.Clipboard;
 import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
@@ -45,6 +44,7 @@
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.GL11;
 import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.Clipboard;
 import com.badlogic.gdx.utils.GdxNativesLoader;
 
 /** An implementation of the {@link Application} interface for Android. Create an {@link Activity} that derives from this class. In

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidClipboard.java
Patch:
@@ -19,7 +19,7 @@
 import android.content.Context;
 import android.os.Build;
 
-import com.badlogic.gdx.Clipboard;
+import com.badlogic.gdx.utils.Clipboard;
 
 public class AndroidClipboard implements Clipboard {
 	Context context;

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSApplication.java
Patch:
@@ -26,12 +26,12 @@
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Audio;
-import com.badlogic.gdx.Clipboard;
 import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.Preferences;
+import com.badlogic.gdx.utils.Clipboard;
 
 public class IOSApplication extends UIApplicationDelegate implements Application {
 	UIApplication uiApp;

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglApplication.java
Patch:
@@ -34,7 +34,6 @@
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Audio;
-import com.badlogic.gdx.Clipboard;
 import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
@@ -43,6 +42,7 @@
 import com.badlogic.gdx.Preferences;
 import com.badlogic.gdx.backends.jogl.JoglGraphics.JoglDisplayMode;
 import com.badlogic.gdx.backends.openal.OpenALAudio;
+import com.badlogic.gdx.utils.Clipboard;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /** An implemenation of the {@link Application} interface based on Jogl for Windows, Linux and Mac. Instantiate this class with

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglClipboard.java
Patch:
@@ -24,7 +24,7 @@
 import java.awt.datatransfer.UnsupportedFlavorException;
 import java.io.IOException;
 
-import com.badlogic.gdx.Clipboard;
+import com.badlogic.gdx.utils.Clipboard;
 
 /** Clipboard implementation for desktop that uses the system clipboard via the default AWT {@link Toolkit}.
  * @author mzechner */

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTCanvas.java
Patch:
@@ -31,13 +31,13 @@
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Audio;
-import com.badlogic.gdx.Clipboard;
 import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.Preferences;
 import com.badlogic.gdx.backends.openal.OpenALAudio;
+import com.badlogic.gdx.utils.Clipboard;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /** An OpenGL surface on an AWT Canvas, allowing OpenGL to be embedded in a Swing application. All OpenGL calls are done on the

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -28,12 +28,12 @@
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Audio;
-import com.badlogic.gdx.Clipboard;
 import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.Preferences;
 import com.badlogic.gdx.backends.openal.OpenALAudio;
+import com.badlogic.gdx.utils.Clipboard;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /** An OpenGL surface fullscreen or in a lightweight window. */

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -29,13 +29,13 @@
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Audio;
-import com.badlogic.gdx.Clipboard;
 import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.Preferences;
 import com.badlogic.gdx.backends.openal.OpenALAudio;
+import com.badlogic.gdx.utils.Clipboard;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /** An OpenGL surface on an AWT Canvas, allowing OpenGL to be embedded in a Swing application. All OpenGL calls are done on the

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglClipboard.java
Patch:
@@ -24,7 +24,7 @@
 import java.awt.datatransfer.UnsupportedFlavorException;
 import java.io.IOException;
 
-import com.badlogic.gdx.Clipboard;
+import com.badlogic.gdx.utils.Clipboard;
 
 /** Clipboard implementation for desktop that uses the system clipboard via the default AWT {@link Toolkit}.
  * @author mzechner */

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -19,7 +19,6 @@
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Audio;
-import com.badlogic.gdx.Clipboard;
 import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
@@ -30,6 +29,7 @@
 import com.badlogic.gdx.backends.gwt.soundmanager2.SoundManager;
 import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.Clipboard;
 import com.badlogic.gdx.utils.ObjectMap;
 import com.badlogic.gdx.utils.TimeUtils;
 import com.google.gwt.canvas.client.Canvas;

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.badlogic.gdx;
 
+import com.badlogic.gdx.utils.Clipboard;
+
 /** <p>
  * An <code>Application</code> is the main entry point of your project. It sets up a window and rendering surface and manages the
  * different aspects of your application, namely {@link Graphics}, {@link Audio}, {@link Input} and {@link Files}. Think of an

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.badlogic.gdx.scenes.scene2d.ui;
 
-import com.badlogic.gdx.Clipboard;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.Input.Keys;
@@ -32,6 +31,7 @@
 import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.scenes.scene2d.utils.Drawable;
 import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.Clipboard;
 import com.badlogic.gdx.utils.FloatArray;
 import com.badlogic.gdx.utils.TimeUtils;
 

File: gdx/src/com/badlogic/gdx/utils/Clipboard.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx;
+package com.badlogic.gdx.utils;
 
 /** A very simple clipboard interface for text content.
  * @author mzechner */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java
Patch:
@@ -250,6 +250,7 @@ void addToTree (Tree tree) {
 		}
 
 		void removeFromTree (Tree tree) {
+			if (leftActor != null) tree.removeActor(leftActor);
 			tree.removeActor(rightActor);
 			if (!expanded) return;
 			for (int i = 0, n = children.size; i < n; i++)

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureRegion.java
Patch:
@@ -152,15 +152,15 @@ public void setV2 (float v2) {
 	}
 
 	public int getRegionX () {
-		return (int)(u * texture.getWidth());
+		return Math.round(u * texture.getWidth());
 	}
 
 	public void setRegionX (int x) {
 		setU(x / (float)texture.getWidth());
 	}
 
 	public int getRegionY () {
-		return (int)(v * texture.getHeight());
+		return Math.round(v * texture.getHeight());
 	}
 
 	public void setRegionY (int y) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureRegion.java
Patch:
@@ -152,15 +152,15 @@ public void setV2 (float v2) {
 	}
 
 	public int getRegionX () {
-		return (int)(u * texture.getWidth());
+		return Math.round(u * texture.getWidth());
 	}
 
 	public void setRegionX (int x) {
 		setU(x / (float)texture.getWidth());
 	}
 
 	public int getRegionY () {
-		return (int)(v * texture.getHeight());
+		return Math.round(v * texture.getHeight());
 	}
 
 	public void setRegionY (int y) {

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexArray.java
Patch:
@@ -63,7 +63,6 @@ public VertexArray (int numVertices, VertexAttributes attributes) {
 		buffer = byteBuffer.asFloatBuffer();
 		buffer.flip();
 		byteBuffer.flip();
-		Gdx.app.log("VertexArray", "Created");
 	}
 
 	/** {@inheritDoc} */

File: gdx/src/com/badlogic/gdx/physics/box2d/PolygonShape.java
Patch:
@@ -21,7 +21,7 @@
 public class PolygonShape extends Shape {
 	// @off
 	/*JNI
-#include <Box2D/Box2D.h>
+     #include <Box2D/Box2D.h>
 	 */
 	
 	/** Constructs a new polygon */
@@ -64,7 +64,7 @@ public void set (float[] vertices) {
 	/** Copy vertices from the given float array, taking into account the offset and length. It is assumed the vertices are in
 	 * x,y order and define a convex polygon. It is assumed that the exterior is the the right of each edge. */
 	public void set (float[] vertices, int offset, int len) {
-		jniSet(addr, vertices, offset, vertices.length);
+		jniSet(addr, vertices, offset, len);
 	}
 
 	private native void jniSet (long addr, float[] verts, int offset, int len); /*

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -198,13 +198,13 @@ public Cell add (String text, String labelStyleName) {
 
 	/** Adds a cell without a widget. */
 	public Cell add () {
-		return add((Actor)null);
+		return layout.add(null);
 	}
 
 	/** Adds a new cell to the table with the specified actor.
 	 * @param actor May be null to add a cell without an actor. */
 	public Cell add (Actor actor) {
-		return layout.add(actor == null ? new Actor() : actor);
+		return layout.add(actor);
 	}
 
 	/** Adds a new cell to the table with the specified actors in a {@link Stack}.

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/WidgetGroup.java
Patch:
@@ -55,9 +55,9 @@ public float getMaxHeight () {
 	}
 
 	public void setLayoutEnabled (boolean enabled) {
+		if (layoutEnabled == enabled) return;
 		layoutEnabled = enabled;
 		setLayoutEnabled(this, enabled);
-		if (enabled) invalidateHierarchy();
 	}
 
 	private void setLayoutEnabled (Group parent, boolean enabled) {

File: gdx/src/com/esotericsoftware/tablelayout/Toolkit.java
Patch:
@@ -60,10 +60,11 @@ public abstract class Toolkit<C, T extends C, L extends BaseTableLayout> {
 	/** Adds a rectangle that should be drawn for debugging. */
 	abstract public void addDebugRectangle (L layout, Debug type, float x, float y, float w, float h);
 
+	/** @param widget May be null. */
 	public void setWidget (L layout, Cell cell, C widget) {
 		removeChild((T)layout.table, (C)cell.widget);
 		cell.widget = widget;
-		addChild((T)layout.table, widget);
+		if (widget != null) addChild((T)layout.table, widget);
 	}
 
 	/** Interprets the specified value as a size. This can be used to scale all sizes applied to a table. The default implementation

File: gdx/src/com/badlogic/gdx/physics/box2d/PolygonShape.java
Patch:
@@ -71,7 +71,7 @@ public void set (float[] vertices, int offset, int len) {
 		b2PolygonShape* poly = (b2PolygonShape*)addr;
 		int numVertices = len / 2;
 		b2Vec2* verticesOut = new b2Vec2[numVertices];
-		for(int i = 0; i < numVertices; i++) {
+		for(int i = 0; i < numVertices; i++) { 
 			verticesOut[i] = b2Vec2(verts[(i<<1) + offset], verts[(i<<1) + offset + 1]);
 		}
 		poly->Set(verticesOut, numVertices);

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.Box2DTest;
 import com.badlogic.gdx.tests.InternationalFontsTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
@@ -27,11 +28,10 @@ public static void main (String[] argv) {
 		// this is only here for me to debug native code faster
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
-		new SharedLibraryLoader("../../extensions/gdx-stb-truetype/libs/gdx-stb-truetype-natives.jar").load("gdx-stb-truetype");
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 
-		GdxTest test = new InternationalFontsTest();
+		GdxTest test = new Box2DTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 640;
 		config.height = 640;

File: gdx/src/com/badlogic/gdx/physics/box2d/PolygonShape.java
Patch:
@@ -73,6 +73,7 @@ public void set (float[] vertices, int offset, int len) {
 		b2Vec2* verticesOut = new b2Vec2[numVertices];
 		for(int i = 0; i < numVertices; i++) {
 			verticesOut[i] = b2Vec2(verts[(i<<1) + offset], verts[(i<<1) + offset + 1]);
+		}
 		poly->Set(verticesOut, numVertices);
 		delete verticesOut;
 	 */

File: gdx/src/com/badlogic/gdx/utils/GdxBuild.java
Patch:
@@ -77,8 +77,8 @@ public static void main (String[] args) throws Exception {
 		BuildTarget lin64 = BuildTarget.newDefaultTarget(TargetOs.Linux, true);
 		BuildTarget android = BuildTarget.newDefaultTarget(TargetOs.Android, false);
 		BuildTarget mac = BuildTarget.newDefaultTarget(TargetOs.MacOsX, false);
-		new AntScriptGenerator().generate(new BuildConfig("gdx", "../target/native", LIBS_DIR, JNI_DIR), mac, win32home, win32,
-			win64, lin32, lin64, android);
+//		new AntScriptGenerator().generate(new BuildConfig("gdx", "../target/native", LIBS_DIR, JNI_DIR), mac, win32home, win32,
+//			win64, lin32, lin64, android);
 
 		// build natives
 // BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/ogre/OgreXmlLoader.java
Patch:
@@ -387,7 +387,7 @@ private Skeleton generateSkeleton (com.badlogic.gdx.graphics.g3d.loaders.ogre.sk
 
 			joint.name = bone.name;
 			joint.position.set(bone.position.x, bone.position.y, bone.position.z);
-			joint.rotation.setFromAxis(bone.rotation.axis.x, bone.rotation.axis.x, bone.rotation.axis.x, MathUtils.radiansToDegrees
+			joint.rotation.setFromAxis(bone.rotation.axis.x, bone.rotation.axis.y, bone.rotation.axis.z, MathUtils.radiansToDegrees
 				* bone.rotation.angle);
 			if (bone.scale != null) {
 				if (bone.scale.factor == 0)
@@ -451,8 +451,7 @@ private Skeleton generateSkeleton (com.badlogic.gdx.graphics.g3d.loaders.ogre.sk
 					}
 					jointKeyframe.rotation
 						.setFromAxis(keyFrame.rotate.axis.x, keyFrame.rotate.axis.y, keyFrame.rotate.axis.z,
-							MathUtils.radiansToDegrees * keyFrame.rotate.angle).mulLeft(skel.bindPoseJoints.get(jointIndex).rotation)
-						.nor();
+							MathUtils.radiansToDegrees * keyFrame.rotate.angle).nor();
 					jointKeyframe.parentIndex = skel.bindPoseJoints.get(jointIndex).parentIndex;
 					jointKeyFrames[k] = jointKeyframe;
 

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/ogre/OgreXmlLoader.java
Patch:
@@ -387,7 +387,7 @@ private Skeleton generateSkeleton (com.badlogic.gdx.graphics.g3d.loaders.ogre.sk
 
 			joint.name = bone.name;
 			joint.position.set(bone.position.x, bone.position.y, bone.position.z);
-			joint.rotation.setFromAxis(bone.rotation.axis.x, bone.rotation.axis.x, bone.rotation.axis.x, MathUtils.radiansToDegrees
+			joint.rotation.setFromAxis(bone.rotation.axis.x, bone.rotation.axis.y, bone.rotation.axis.z, MathUtils.radiansToDegrees
 				* bone.rotation.angle);
 			if (bone.scale != null) {
 				if (bone.scale.factor == 0)
@@ -451,8 +451,7 @@ private Skeleton generateSkeleton (com.badlogic.gdx.graphics.g3d.loaders.ogre.sk
 					}
 					jointKeyframe.rotation
 						.setFromAxis(keyFrame.rotate.axis.x, keyFrame.rotate.axis.y, keyFrame.rotate.axis.z,
-							MathUtils.radiansToDegrees * keyFrame.rotate.angle).mulLeft(skel.bindPoseJoints.get(jointIndex).rotation)
-						.nor();
+							MathUtils.radiansToDegrees * keyFrame.rotate.angle).nor();
 					jointKeyframe.parentIndex = skel.bindPoseJoints.get(jointIndex).parentIndex;
 					jointKeyFrames[k] = jointKeyframe;
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java
Patch:
@@ -77,7 +77,7 @@ else if (isOver() && style.overFontColor != null)
 			fontColor = style.overFontColor;
 		else
 			fontColor = style.fontColor;
-		if (fontColor != null) label.setColor(fontColor);
+		if (fontColor != null) label.getStyle().fontColor = fontColor;
 		super.draw(batch, parentAlpha);
 	}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/google/gwt/corp/localstorage/LocalStorage.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.io.IOException;
 
-import sun.org.mozilla.javascript.internal.JavaScriptException;
+import com.google.gwt.core.client.JavaScriptException;
 
 public class LocalStorage {
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplicationConfiguration.java
Patch:
@@ -16,8 +16,8 @@
 
 package com.badlogic.gdx.backends.gwt;
 
-import java.awt.Panel;
-import java.awt.TextArea;
+import com.google.gwt.user.client.ui.Panel;
+import com.google.gwt.user.client.ui.TextArea;
 
 public class GwtApplicationConfiguration {
 	/** the width of the drawing area in pixels **/

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20.java
Patch:
@@ -27,6 +27,7 @@
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.google.gwt.core.client.GWT;
 import com.google.gwt.typedarrays.client.Float32Array;
 import com.google.gwt.typedarrays.client.Int16Array;
 import com.google.gwt.typedarrays.client.Int32Array;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/BufferUtils.java
Patch:
@@ -26,6 +26,8 @@
 import java.nio.LongBuffer;
 import java.nio.ShortBuffer;
 
+import com.google.gwt.core.client.GWT;
+
 /** Class with static helper methods to increase the speed of array/direct buffer and direct buffer/direct buffer transfers
  * 
  * @author mzechner */

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/BinaryLoader.java
Patch:
@@ -19,6 +19,9 @@
 import java.io.IOException;
 import java.io.InputStream;
 
+import com.google.gwt.xhr.client.ReadyStateChangeHandler;
+import com.google.gwt.xhr.client.XMLHttpRequest;
+
 public class BinaryLoader {
 	private final LoaderCallback<Blob> callback;
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/ImageLoader.java
Patch:
@@ -16,6 +16,9 @@
 
 package com.badlogic.gdx.backends.gwt.preloader;
 
+import com.google.gwt.dom.client.ImageElement;
+import com.google.gwt.dom.client.NativeEvent;
+
 /** Fugly but does the job.
  * @author mzechner */
 public class ImageLoader {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/Preloader.java
Patch:
@@ -26,6 +26,8 @@
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.ObjectMap;
+import com.google.gwt.core.client.GWT;
+import com.google.gwt.dom.client.ImageElement;
 
 public class Preloader {
 	public interface PreloaderCallback {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/soundmanager2/SMSound.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.badlogic.gdx.backends.gwt.soundmanager2;
 
+import com.google.gwt.core.client.JavaScriptObject;
+
 public class SMSound extends JavaScriptObject {
 	protected SMSound () {
 	}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/widgets/PlaceholderTextBox.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.badlogic.gdx.backends.gwt.widgets;
 
+import com.google.gwt.user.client.ui.TextBox;
+
 public class PlaceholderTextBox extends TextBox {
 
 	String placeholder = "";

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/widgets/ProgressBar.java
Patch:
@@ -16,8 +16,9 @@
 
 package com.badlogic.gdx.backends.gwt.widgets;
 
-import com.badlogic.gdx.scenes.scene2d.ui.Widget;
-import com.sun.org.apache.xalan.internal.xsltc.DOM;
+import com.google.gwt.user.client.DOM;
+import com.google.gwt.user.client.Element;
+import com.google.gwt.user.client.ui.Widget;
 
 /** A widget that displays progress on an arbitrary scale.
  * 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/widgets/ResizableWidget.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.badlogic.gdx.backends.gwt.widgets;
 
+import com.google.gwt.user.client.Element;
+
 /** An interface that defines the methods required to support automatic resizing of the Widget element. */
 public interface ResizableWidget {
 	/** Get the widget's element. */

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/ReflectionCache.java
Patch:
@@ -18,6 +18,8 @@
 
 import java.util.Collection;
 
+import com.google.gwt.core.client.GWT;
+
 public class ReflectionCache {
 	public static IReflectionCache instance = GWT.create(IReflectionCache.class);
 

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/client/Test.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.badlogic.gwtref.client;
 
+import com.google.gwt.core.client.EntryPoint;
+
 public class Test implements EntryPoint {
 	public static enum Enu {
 		Winter, Summer, Bleh;

File: backends/gdx-backends-gwt/src/com/google/gwt/typedarrays/client/ArrayBuffer.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.google.gwt.typedarrays.client;
 
+import com.google.gwt.core.client.JavaScriptObject;
+
 /** The ArrayBuffer type describes a buffer used to store data for the TypedArray interface and its subclasses.
  * 
  * Taken from the Khronos TypedArrays Draft Spec as of Aug 30, 2010. */

File: backends/gdx-backends-gwt/src/com/google/gwt/typedarrays/client/ArrayBufferView.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.google.gwt.typedarrays.client;
 
+import com.google.gwt.core.client.JavaScriptObject;
+
 /** The ArrayBufferView type holds information shared among all of the types of views of ArrayBuffers.
  * 
  * Taken from the Khronos TypedArrays Draft Spec as of Aug 30, 2010. */

File: backends/gdx-backends-gwt/src/com/google/gwt/typedarrays/client/ArrayUtils.java
Patch:
@@ -16,6 +16,9 @@
 
 package com.google.gwt.typedarrays.client;
 
+import com.google.gwt.core.client.JsArrayInteger;
+import com.google.gwt.core.client.JsArrayNumber;
+
 public class ArrayUtils {
 
 	// TODO(jgw): Get rid of these conversions in web mode.

File: backends/gdx-backends-gwt/src/com/google/gwt/typedarrays/client/Float32Array.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.google.gwt.typedarrays.client;
 
+import com.google.gwt.core.client.JsArrayNumber;
+
 /** The typed array view types represent a view of an ArrayBuffer that allows for indexing and manipulation. The length of each of
  * these is fixed.
  * 

File: backends/gdx-backends-gwt/src/com/google/gwt/typedarrays/client/Int16Array.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.google.gwt.typedarrays.client;
 
+import com.google.gwt.core.client.JsArrayInteger;
+
 /** The typed array view types represent a view of an ArrayBuffer that allows for indexing and manipulation. The length of each of
  * these is fixed.
  * 

File: backends/gdx-backends-gwt/src/com/google/gwt/typedarrays/client/Int32Array.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.google.gwt.typedarrays.client;
 
+import com.google.gwt.core.client.JsArrayInteger;
+
 /** The typed array view types represent a view of an ArrayBuffer that allows for indexing and manipulation. The length of each of
  * these is fixed.
  * 

File: backends/gdx-backends-gwt/src/com/google/gwt/typedarrays/client/Int8Array.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.google.gwt.typedarrays.client;
 
+import com.google.gwt.core.client.JsArrayInteger;
+
 /** The typed array view types represent a view of an ArrayBuffer that allows for indexing and manipulation. The length of each of
  * these is fixed.
  * 

File: backends/gdx-backends-gwt/src/com/google/gwt/typedarrays/client/Uint16Array.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.google.gwt.typedarrays.client;
 
+import com.google.gwt.core.client.JsArrayInteger;
+
 /** The typed array view types represent a view of an ArrayBuffer that allows for indexing and manipulation. The length of each of
  * these is fixed.
  * 

File: backends/gdx-backends-gwt/src/com/google/gwt/typedarrays/client/Uint8Array.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.google.gwt.typedarrays.client;
 
+import com.google.gwt.core.client.JsArrayInteger;
+
 /** The typed array view types represent a view of an ArrayBuffer that allows for indexing and manipulation. The length of each of
  * these is fixed.
  * 

File: backends/gdx-backends-gwt/src/com/google/gwt/webgl/client/WebGLBuffer.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.google.gwt.webgl.client;
 
+import com.google.gwt.core.client.JavaScriptObject;
+
 public class WebGLBuffer extends JavaScriptObject {
 
 	protected WebGLBuffer () {

File: backends/gdx-backends-gwt/src/com/google/gwt/webgl/client/WebGLContextAttributes.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.google.gwt.webgl.client;
 
+import com.google.gwt.core.client.JavaScriptObject;
+
 /** The WebGLContextAttributes interface contains drawing surface attributes and is passed as the second parameter to getContext. A
  * native object may be supplied as this parameter; the specified attributes will be queried from this object. */
 public class WebGLContextAttributes extends JavaScriptObject {

File: backends/gdx-backends-gwt/src/com/google/gwt/webgl/client/WebGLObject.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.google.gwt.webgl.client;
 
+import com.google.gwt.core.client.JavaScriptObject;
+
 public class WebGLObject extends JavaScriptObject {
 
 	protected WebGLObject () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -62,7 +62,7 @@ public Slider (float min, float max, float steps, boolean vertical, Skin skin, S
 	 * @param style the {@link SliderStyle} */
 	public Slider (float min, float max, float steps, boolean vertical, SliderStyle style) {
 		if (min > max) throw new IllegalArgumentException("min must be > max: " + min + " > " + max);
-		if (steps < 0) throw new IllegalArgumentException("steps must be > 0: " + steps);
+		if (steps <= 0) throw new IllegalArgumentException("steps must be > 0: " + steps);
 		setStyle(style);
 		this.min = min;
 		this.max = max;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/InputListener.java
Patch:
@@ -88,13 +88,13 @@ public boolean mouseMoved (InputEvent event, float x, float y) {
 	}
 
 	/** Called any time the mouse cursor or a finger touch is moved over an actor. On the desktop, this event occurs even when no
-	 * mouse buttons are pressed.
+	 * mouse buttons are pressed (pointer will be -1).
 	 * @see InputEvent */
 	public void enter (InputEvent event, float x, float y, int pointer, Actor fromActor) {
 	}
 
 	/** Called any time the mouse cursor or a finger touch is moved out of an actor. On the desktop, this event occurs even when no
-	 * mouse buttons are pressed.
+	 * mouse buttons are pressed (pointer will be -1).
 	 * @see InputEvent */
 	public void exit (InputEvent event, float x, float y, int pointer, Actor toActor) {
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/PressedListener.java
Patch:
@@ -59,11 +59,11 @@ public void touchUp (InputEvent event, float x, float y, int pointer, int button
 	}
 
 	public void enter (InputEvent event, float x, float y, int pointer, Actor fromActor) {
-		over = true;
+		if (pointer == -1) over = true;
 	}
 
 	public void exit (InputEvent event, float x, float y, int pointer, Actor toActor) {
-		over = false;
+		if (pointer == -1) over = false;
 	}
 
 	/** Returns true if the specified position is over the specified actor or within the tap square. */
@@ -81,7 +81,7 @@ public boolean isPressed () {
 	}
 
 	public boolean isOver () {
-		return over;
+		return over || pressed;
 	}
 
 	public void setTapSquareSize (float halfTapSquareSize) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InternationalFontsTest.java
Patch:
@@ -6,7 +6,6 @@
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
-import com.badlogic.gdx.graphics.g2d.stbtt.TrueTypeFontFactory;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 /**

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -96,7 +96,7 @@ public class GdxTests {
 			VertexBufferObjectShaderTest.class, VibratorTest.class,
 			VorbisTest.class, WaterRipples.class, HelloTriangle.class,
 			SimpleVertexShader.class, ShapeRendererTest.class,
-			MoveSpriteExample.class, StbTrueTypeTest.class, SoundTouchTest.class, Mpg123Test.class, WavTest.class,
+			MoveSpriteExample.class, SoundTouchTest.class, Mpg123Test.class, WavTest.class,
 			TextButtonTest.class, TextButtonTestGL2.class, TextureBindTest.class,
 			SortedSpriteTest.class, ExternalMusicTest.class, SoftKeyboardTest.class, 
 			DirtyRenderingTest.class, FreeTypeTest.class, YDownTest.class, ScreenCaptureTest.class,

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -200,9 +200,7 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 			batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
 			style.background.draw(batch, getX(), getY(), getWidth(), getHeight());
 		}
-		Color.tmp.set(color);
-		if (style.fontColor != null) Color.tmp.mul(style.fontColor);
-		cache.setColor(Color.tmp);
+		cache.setColor(color);
 		cache.setPosition(getX(), getY());
 		cache.draw(batch, color.a * parentAlpha);
 	}

File: demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java
Patch:
@@ -36,7 +36,7 @@ protected void setScreen (Screen screen) {
 	public void draw (TextureRegion region, int x, int y) {
 		int width = region.getRegionWidth();
 		if (width < 0) width = -width;
-		spriteBatch.draw(region, x, y, width, -region.getRegionHeight());
+		spriteBatch.draw(region, x, y, width, region.getRegionHeight());
 	}
 
 	public void drawString (String string, int x, int y) {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -99,7 +99,7 @@ public void initialize (ApplicationListener listener, AndroidApplicationConfigur
 		graphics = new AndroidGraphics(this, config, config.resolutionStrategy == null ? new FillResolutionStrategy()
 			: config.resolutionStrategy);
 		input = new AndroidInput(this, graphics.view, config);
-		audio = new AndroidAudio(this);
+		audio = new AndroidAudio(this, config);
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 		this.listener = listener;
 		this.handler = new Handler();
@@ -169,7 +169,7 @@ public View initializeForView (ApplicationListener listener, AndroidApplicationC
 		graphics = new AndroidGraphics(this, config, config.resolutionStrategy == null ? new FillResolutionStrategy()
 			: config.resolutionStrategy);
 		input = new AndroidInput(this, graphics.view, config);
-		audio = new AndroidAudio(this);
+		audio = new AndroidAudio(this, config);
 		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 		this.listener = listener;
 		this.handler = new Handler();

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
Patch:
@@ -44,8 +44,8 @@ public final class AndroidAudio implements Audio {
 	private final AudioManager manager;
 	protected final List<AndroidMusic> musics = new ArrayList<AndroidMusic>();	
 
-	public AndroidAudio (Activity context) {
-		soundPool = new SoundPool(16, AudioManager.STREAM_MUSIC, 100);
+	public AndroidAudio (Activity context, AndroidApplicationConfiguration config) {
+		soundPool = new SoundPool(config.maxSimultaniousSounds, AudioManager.STREAM_MUSIC, 100);
 		manager = (AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
 		context.setVolumeControlStream(AudioManager.STREAM_MUSIC);
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -172,7 +172,8 @@ public Actor hit (float x, float y) {
 		return touchable == Touchable.enabled && x >= 0 && x < width && y >= 0 && y < height ? this : null;
 	}
 
-	/** Removes this actor from its parent, if it has a parent. */
+	/** Removes this actor from its parent, if it has a parent.
+	 * @see Group#removeActor(Actor) */
 	public boolean remove () {
 		if (parent != null) return parent.removeActor(this);
 		return false;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -299,7 +299,7 @@ public boolean swapActor (Actor first, Actor second) {
 	}
 
 	/** Returns an ordered list of child actors in this group. */
-	public Array<Actor> getChildren () {
+	public SnapshotArray<Actor> getChildren () {
 		return children;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -56,7 +56,7 @@ public class SplitPane extends WidgetGroup {
 	/** @param firstWidget May be null.
 	 * @param secondWidget May be null. */
 	public SplitPane (Actor firstWidget, Actor secondWidget, boolean vertical, Skin skin) {
-		this(firstWidget, secondWidget, vertical, skin, "default-" + (vertical ? "verticle" : "horizontal"));
+		this(firstWidget, secondWidget, vertical, skin, "default-" + (vertical ? "vertical" : "horizontal"));
 	}
 
 	/** @param firstWidget May be null.

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPaneTest.java
Patch:
@@ -75,7 +75,7 @@ public void clicked (InputEvent event, float x, float y) {
 				}
 			});
 
-			Slider slider = new Slider(0, 100, 100, skin);
+			Slider slider = new Slider(0, 100, 100, false, skin);
 			slider.addListener(stopTouchDown); // Stops touchDown events from propagating to the FlickScrollPane.
 			table.add(slider);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -49,14 +49,14 @@ public void create () {
 		ui = new Stage(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);
 		TextButton play = new TextButton("Play", skin);
 		TextButton stop = new TextButton("Stop", skin);
-		final Slider pitch = new Slider(0.1f, 4, 0.1f, skin);
+		final Slider pitch = new Slider(0.1f, 4, 0.1f, false, skin);
 		pitch.setValue(1);
 		final Label pitchValue = new Label("1.0", skin);
-		final Slider volume = new Slider(0.1f, 1, 0.1f, skin);
+		final Slider volume = new Slider(0.1f, 1, 0.1f, false, skin);
 		volume.setValue(1);
 		final Label volumeValue = new Label("1.0", skin);
 		Table table = new Table();
-		final Slider pan = new Slider(-1f, 1f, 0.1f, skin);
+		final Slider pan = new Slider(-1f, 1f, 0.1f, false, skin);
 		pan.setValue(0);
 		final Label panValue = new Label("0.0", skin);
 		table.setFillParent(true);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -95,7 +95,7 @@ public void create () {
 		Button imgToggleButton = new Button(new Image(image), skin, "toggle");
 
 		CheckBox checkBox = new CheckBox("Check me", skin);
-		final Slider slider = new Slider(0, 10, 1, skin);
+		final Slider slider = new Slider(0, 10, 1, false, skin);
 		TextField textfield = new TextField("", skin);
 		textfield.setMessageText("Click here!");
 		SelectBox dropdown = new SelectBox(new String[] {"Android", "Windows", "Linux", "OSX"}, skin);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -143,11 +143,12 @@ public boolean isDragging () {
 	}
 
 	public float getValue () {
-		return (float)Math.floor(value / steps) * steps;
+		return value;
 	}
 
 	public void setValue (float value) {
 		if (value < min || value > max) throw new IllegalArgumentException("value must be >= min and <= max: " + value);
+		value = (float)Math.floor(value / steps) * steps;
 		float oldValue = this.value;
 		if (value == oldValue) return;
 		this.value = value;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ImageButton.java
Patch:
@@ -102,9 +102,9 @@ static public class ImageButtonStyle extends ButtonStyle {
 		public ImageButtonStyle () {
 		}
 
-		public ImageButtonStyle (Drawable down, Drawable up, Drawable checked, Drawable imageDown, Drawable imageUp,
+		public ImageButtonStyle (Drawable up, Drawable down, Drawable checked, Drawable imageUp, Drawable imageDown,
 			Drawable imageChecked) {
-			super(down, up, checked);
+			super(up, down, checked);
 			this.imageUp = imageUp;
 			this.imageDown = imageDown;
 			this.imageChecked = imageChecked;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java
Patch:
@@ -101,7 +101,7 @@ static public class TextButtonStyle extends ButtonStyle {
 		public TextButtonStyle () {
 		}
 
-		public TextButtonStyle (Drawable down, Drawable up, Drawable checked) {
+		public TextButtonStyle (Drawable up, Drawable down, Drawable checked) {
 			super(up, down, checked);
 		}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -171,7 +171,7 @@ public void pan (InputEvent event, float x, float y, float deltaX, float deltaY)
 				cancelTouchFocusedChild(event);
 			}
 
-			public void fling (InputEvent event, float x, float y) {
+			public void fling (InputEvent event, float x, float y, int pointer, int button) {
 				if (Math.abs(x) > 150) {
 					flingTimer = flingTime;
 					velocityX = x;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Scene2dTest.java
Patch:
@@ -87,7 +87,7 @@ public boolean longPress (Actor actor, float x, float y) {
 				return true;
 			}
 
-			public void fling (InputEvent event, float velocityX, float velocityY) {
+			public void fling (InputEvent event, float velocityX, float velocityY, int pointer, int button) {
 				System.out.println("fling " + velocityX + ", " + velocityY);
 			}
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1TextureData.java
Patch:
@@ -75,7 +75,7 @@ public void prepare () {
 	public void consumeCompressedData () {
 		if (!isPrepared) throw new GdxRuntimeException("Call prepare() before calling consumeCompressedData()");
 
-		if (Gdx.app.getType() == ApplicationType.Desktop || Gdx.graphics.isGL20Available() == false) {
+		if (!Gdx.graphics.supportsExtension("GL_OES_compressed_ETC1_RGB8_texture") || Gdx.graphics.isGL20Available() == false) {
 			Pixmap pixmap = ETC1.decodeImage(data, Format.RGB565);
 			Gdx.gl.glTexImage2D(GL10.GL_TEXTURE_2D, 0, pixmap.getGLInternalFormat(), pixmap.getWidth(), pixmap.getHeight(), 0,
 				pixmap.getGLFormat(), pixmap.getGLType(), pixmap.getPixels());

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java
Patch:
@@ -320,6 +320,7 @@ public synchronized TextureAtlas generateTextureAtlas (TextureFilter minFilter,
 					@Override
 					public void dispose () {
 						super.dispose();
+						getTextureData().consumePixmap().dispose();
 					}
 				};
 				texture.setFilter(minFilter, magFilter);
@@ -348,7 +349,7 @@ public synchronized void updateTextureAtlas(TextureAtlas atlas, TextureFilter mi
 						@Override
 						public void dispose () {
 							super.dispose();
-							
+							getTextureData().consumePixmap().dispose();
 						}
 					};
 					page.texture.setFilter(minFilter, magFilter);

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSInput.java
Patch:
@@ -256,7 +256,7 @@ void processEvents() {
 						break;
 					case UITouchPhase.Moved:
 					case UITouchPhase.Stationary:
-						inputProcessor.touchDown(event.x, event.y, event.pointer, Buttons.LEFT);
+						inputProcessor.touchDragged(event.x, event.y, event.pointer);
 						break;
 					}
 				}

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -160,6 +160,7 @@ public static float distanceLinePoint (Vector2 start, Vector2 end, Vector2 point
 		return tmp2.set(point.x, point.y, 0).dst(tmp);
 	}
 
+	/** Returns the distance between the given line and point. Note the specified line is not a line segment. */
 	public static float distanceLinePoint (float startX, float startY, float endX, float endY, float pointX, float pointY) {
 		float normalLength = (float)Math.sqrt((endX - startX) * (endX - startX) + (endY - startY) * (endY - startY));
 		return Math.abs((pointX - startX) * (endY - startY) - (pointY - startY) * (endX - startX)) / normalLength;

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -151,7 +151,7 @@ public void setToOrtho (boolean yDown, float viewportWidth, float viewportHeight
 			up.set(0, -1, 0);
 			direction.set(0, 0, 1);
 		}
-		position.set(viewportWidth / 2.0f, viewportHeight / 2.0f, 0);
+		position.set(zoom * viewportWidth / 2.0f, zoom * viewportHeight / 2.0f, 0);
 		this.viewportWidth = viewportWidth;
 		this.viewportHeight = viewportHeight;
 		update();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/DelegateAction.java
Patch:
@@ -37,8 +37,8 @@ public void restart () {
 	}
 
 	public void setActor (Actor actor) {
-		super.setActor(actor);
 		if (action != null) action.setActor(actor);
+		super.setActor(actor);
 	}
 
 	public String toString () {

File: gdx/src/com/badlogic/gdx/graphics/Color.java
Patch:
@@ -41,7 +41,7 @@ public class Color {
 	/** the red, green, blue and alpha components **/
 	public float r, g, b, a;
 	
-	private static Color tmp = new Color();
+	public static Color tmp = new Color();
 
 	/** Constructs a new Color with all components set to 0. */
 	public Color () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -73,7 +73,6 @@ public void setStyle (LabelStyle style) {
 		if (style.font == null) throw new IllegalArgumentException("Missing LabelStyle font.");
 		this.style = style;
 		cache = new BitmapFontCache(style.font, style.font.usesIntegerPositions());
-		if (style.fontColor != null) cache.setColor(style.fontColor);
 		computeBounds();
 		invalidateHierarchy();
 	}
@@ -201,7 +200,9 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 			batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
 			style.background.draw(batch, getX(), getY(), getWidth(), getHeight());
 		}
-		cache.setColor(color);
+		Color.tmp.set(color);
+		if (style.fontColor != null) Color.tmp.mul(style.fontColor);
+		cache.setColor(Color.tmp);
 		cache.setPosition(getX(), getY());
 		cache.draw(batch, color.a * parentAlpha);
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/SpriteDrawable.java
Patch:
@@ -23,8 +23,6 @@
 /** Drawable for a {@link Sprite}.
  * @author Nathan Sweet */
 public class SpriteDrawable extends EmptyDrawable {
-	static private final Color tempColor = new Color();
-
 	private Sprite sprite;
 
 	/** Creates an unitialized SpriteDrawable. The sprite must be set before use. */
@@ -43,7 +41,7 @@ public SpriteDrawable (SpriteDrawable drawable) {
 	public void draw (SpriteBatch batch, float x, float y, float width, float height) {
 		sprite.setBounds(x, y, width, height);
 		Color color = sprite.getColor();
-		sprite.setColor(tempColor.set(color).mul(batch.getColor()));
+		sprite.setColor(Color.tmp.set(color).mul(batch.getColor()));
 		sprite.draw(batch);
 		sprite.setColor(color);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -90,9 +90,9 @@ public void create () {
 		style.imageDown = new TextureRegionDrawable(imageFlipped);
 		ImageButton iconButton = new ImageButton(style);
 
-		Button buttonMulti = new TextButton("Multi\nLine\nToggle", skin.get("toggle", TextButtonStyle.class));
+		Button buttonMulti = new TextButton("Multi\nLine\nToggle", skin, "toggle");
 		Button imgButton = new Button(new Image(image), skin);
-		Button imgToggleButton = new Button(new Image(image), skin.get("toggle", ButtonStyle.class));
+		Button imgToggleButton = new Button(new Image(image), skin, "toggle");
 
 		CheckBox checkBox = new CheckBox("Check me", skin);
 		final Slider slider = new Slider(0, 10, 1, skin);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/SpriteDrawable.java
Patch:
@@ -42,8 +42,10 @@ public SpriteDrawable (SpriteDrawable drawable) {
 
 	public void draw (SpriteBatch batch, float x, float y, float width, float height) {
 		sprite.setBounds(x, y, width, height);
-		sprite.setColor(tempColor.set(sprite.getColor()).mul(batch.getColor()));
+		Color color = sprite.getColor();
+		sprite.setColor(tempColor.set(color).mul(batch.getColor()));
 		sprite.draw(batch);
+		sprite.setColor(color);
 	}
 
 	public void setSprite (Sprite sprite) {

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -64,7 +64,7 @@ public Array (boolean ordered, int capacity, Class<T> arrayType) {
 
 	/** Creates an ordered array with {@link #items} of the specified type and a capacity of 16. */
 	public Array (Class<T> arrayType) {
-		this(false, 16, arrayType);
+		this(true, 16, arrayType);
 	}
 
 	/** Creates a new array containing the elements in the specified array. The new array will have the same type of backing array

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -464,8 +464,10 @@ public void toBack () {
 	}
 
 	/** Sets the z-index of this actor. The z-index is the index into the parent's {@link Group#getChildren() children}, where a
-	 * lower index is below a higher index. Setting a z-index higher than the number of children will move the child to the front. */
+	 * lower index is below a higher index. Setting a z-index higher than the number of children will move the child to the front.
+	 * Setting a z-index less than zero is invalid. */
 	public void setZIndex (int index) {
+		if (index < 0) throw new IllegalArgumentException("ZIndex cannot be < 0.");
 		Group parent = getParent();
 		if (parent == null) return;
 		Array<Actor> children = parent.getChildren();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTestCollection.java
Patch:
@@ -152,7 +152,7 @@ public boolean longPress (float x, float y) {
 	}
 
 	@Override
-	public boolean fling (float velocityX, float velocityY) {
+	public boolean fling (float velocityX, float velocityY, int pointer, int button) {
 		// TODO Auto-generated method stub
 		return false;
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GestureDetectorTest.java
Patch:
@@ -57,7 +57,7 @@ public boolean longPress (float x, float y) {
 		}
 
 		@Override
-		public boolean fling (float velocityX, float velocityY) {
+		public boolean fling (float velocityX, float velocityY, int pointer, int button) {
 			flinging = true;
 			velX = camera.zoom * velocityX * 0.5f;
 			velY = camera.zoom * velocityY * 0.5f;

File: gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
Patch:
@@ -528,7 +528,7 @@ public void setU (float u) {
 	}
 
 	public void setV (float v) {
-		super.setV(u);
+		super.setV(v);
 		vertices[V2] = v;
 		vertices[V3] = v;
 	}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -613,6 +613,7 @@ public void setContinuousRendering (boolean isContinuous) {
 			int renderMode = isContinuous?GLSurfaceView.RENDERMODE_CONTINUOUSLY:GLSurfaceView.RENDERMODE_WHEN_DIRTY;
 			if(view instanceof GLSurfaceViewCupcake) ((GLSurfaceViewCupcake)view).setRenderMode(renderMode);
 			if(view instanceof GLSurfaceView) ((GLSurfaceView)view).setRenderMode(renderMode);
+			mean.clear();
 		}
 	}
 	

File: gdx/src/com/badlogic/gdx/graphics/glutils/MipMapGenerator.java
Patch:
@@ -104,6 +104,5 @@ private static void generateMipMapCPU (Pixmap pixmap, int textureWidth, int text
 			level++;
 		}
 		Pixmap.setBlending(blending);
-		pixmap.dispose();
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/VertexAttribute.java
Patch:
@@ -70,7 +70,6 @@ public static VertexAttribute ColorUnpacked () {
 	/** Tests to determine if the passed object was created with the same parameters */
 	@Override
 	public boolean equals (final Object obj) {
-		if(obj == null) return false;
 		if (!(obj instanceof VertexAttribute)) {
 			return false;
 		}

File: gdx/src/com/badlogic/gdx/graphics/VertexAttributes.java
Patch:
@@ -122,7 +122,6 @@ public String toString () {
 
 	@Override
 	public boolean equals (final Object obj) {
-		if(obj == null) return false;
 		if (!(obj instanceof VertexAttributes)) return false;
 		VertexAttributes other = (VertexAttributes)obj;
 		if(this.attributes.length != other.size()) return false;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTestCollection.java
Patch:
@@ -134,7 +134,7 @@ public boolean touchDown (float x, float y, int pointer) {
 	}
 
 	@Override
-	public boolean tap (float x, float y, int count) {
+	public boolean tap (float x, float y, int count, int pointer, int button) {
 		app.log("TestCollection", "disposing test '" + tests[testIndex].getClass().getName());
 		tests[testIndex].dispose();
 		testIndex++;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GestureDetectorTest.java
Patch:
@@ -45,7 +45,7 @@ public boolean touchDown (float x, float y, int pointer) {
 		}
 
 		@Override
-		public boolean tap (float x, float y, int count) {
+		public boolean tap (float x, float y, int count, int pointer, int button) {
 			Gdx.app.log("GestureDetectorTest", "tap at " + x + ", " + y + ", count: " + count);
 			return false;
 		}

File: gdx/src/com/badlogic/gdx/utils/IntMap.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.Iterator;
 import java.util.NoSuchElementException;
-import java.util.Random;
 
 import com.badlogic.gdx.math.MathUtils;
 

File: gdx/src/com/badlogic/gdx/utils/JsonWriter.java
Patch:
@@ -158,7 +158,7 @@ static public enum OutputType {
 		minimal;
 
 		static private Pattern javascriptPattern = Pattern.compile("[a-zA-Z_$][a-zA-Z_$0-9]*");
-		static private Pattern minimalPattern = Pattern.compile("[a-zA-Z_$][^:}\\], ]*");
+		static private Pattern minimalPattern = Pattern.compile("[a-zA-Z0-9_$][^:}\\], ]*");
 
 		public String quoteValue (String value) {
 			value = value.replace("\\", "\\\\");

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -136,6 +136,7 @@ public void run () {
 					LwjglApplication.this.mainLoop();
 				} catch(Throwable t) {
 					audio.dispose();
+					throw new GdxRuntimeException(t);
 				}
 			}
 		};

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglGL20.java
Patch:
@@ -25,6 +25,7 @@
 import javax.media.opengl.GL;
 
 import com.badlogic.gdx.graphics.GL20;
+import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /** An implementation of the {@link GL20} interface based on Jogl. Note that Jogl shaders and OpenGL ES shaders will not be 100%
  * compatible. Some glGetXXX methods are not implemented.
@@ -347,7 +348,8 @@ public int glGetAttribLocation (int program, String name) {
 
 	@Override
 	public void glGetBooleanv (int pname, Buffer params) {
-		throw new UnsupportedOperationException("not implemented"); // FIXME
+		if(!(params instanceof ByteBuffer)) throw new GdxRuntimeException("params must be a direct ByteBuffer");
+		gl.glGetBooleanv(pname, (ByteBuffer)params);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/math/Vector2.java
Patch:
@@ -28,6 +28,7 @@ public class Vector2 implements Serializable {
 	/** Static temporary vector. Use with care! Use only when sure other code will not also use this.
 	 * @see #tmp() **/
 	public final static Vector2 tmp = new Vector2();
+	public final static Vector2 tmp2 = new Vector2();
 
 	public final static Vector2 X = new Vector2(1, 0);
 	public final static Vector2 Y = new Vector2(0, 1);

File: tests/gdx-tests-gwt/src/com/badlogic/gdx/tests/gwt/client/GwtTestStarter.java
Patch:
@@ -31,6 +31,6 @@ public GwtApplicationConfiguration getConfig () {
 
 	@Override
 	public ApplicationListener getApplicationListener () {
-		return new GwtTestWrapper();
+		return new UITest();
 	}
 }
\ No newline at end of file

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -396,7 +396,7 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 		validate();
 
 		// Setup transform for this group.
-		applyTransform(batch);
+		applyTransform(batch, computeTransform());
 
 		if (scrollX) hKnobBounds.x = hScrollBounds.x + (int)((hScrollBounds.width - hKnobBounds.width) * getScrollPercentX());
 		if (scrollY)

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -232,7 +232,7 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 		Color color = getColor();
 
 		Drawable handle = style.handle;
-		applyTransform(batch);
+		applyTransform(batch, computeTransform());
 		Matrix4 transform = batch.getTransformMatrix();
 		if (firstWidget != null) {
 			ScissorStack.calculateScissors(getStage().getCamera(), transform, firstWidgetBounds, firstScissors);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -77,12 +77,10 @@ public Table (Skin skin) {
 
 	public void draw (SpriteBatch batch, float parentAlpha) {
 		validate();
-		Color color = getColor();
-		batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
 		drawBackground(batch, parentAlpha);
 
 		if (isTransform()) {
-			applyTransform(batch);
+			applyTransform(batch, computeTransform());
 			if (clip) {
 				if (ScissorStack.pushScissors(calculateScissors(batch.getTransformMatrix()))) {
 					drawChildren(batch, parentAlpha);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -189,6 +189,7 @@ public Actor hit (float x, float y) {
 		Array<Actor> children = this.children;
 		for (int i = children.size - 1; i >= 0; i--) {
 			Actor child = children.get(i);
+			if (!child.isVisible()) continue;
 			child.parentToLocalCoordinates(point.set(x, y));
 			Actor hit = child.hit(point.x, point.y);
 			if (hit != null) return hit;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -70,6 +70,7 @@ public Button (Actor child, ButtonStyle style) {
 	}
 
 	private void initialize () {
+		setTouchable(true);
 		addListener(clickListener = new ClickListener() {
 			public void clicked (ActorEvent event, float x, float y) {
 				boolean wasChecked = isChecked;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -46,7 +46,7 @@
 import com.esotericsoftware.tablelayout.Toolkit;
 import com.esotericsoftware.tablelayout.Value;
 
-/** A group that sizes and positions children using table constraints.
+/** A group that sizes and positions children using table constraints. By default, {@link #isTouchable()} is false.
  * <p>
  * The preferred and minimum sizes are that of the children when laid out in columns and rows.
  * @author Nathan Sweet */
@@ -70,6 +70,7 @@ public Table (Skin skin) {
 		layout = new TableLayout();
 		layout.setTable(this);
 		setTransform(false);
+		setTouchable(false);
 	}
 
 	public void draw (SpriteBatch batch, float parentAlpha) {

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -258,7 +258,7 @@ public T[] ensureCapacity (int additionalCapacity) {
 		return items;
 	}
 
-	/** Creates a new backing array with the specified size containing . */
+	/** Creates a new backing array with the specified size containing the current items. */
 	protected T[] resize (int newSize) {
 		T[] items = this.items;
 		T[] newItems = (T[])java.lang.reflect.Array.newInstance(items.getClass().getComponentType(), newSize);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -107,7 +107,6 @@ public void create () {
 
 		// window.debug();
 		Window window = new Window("Dialog", skin);
-		window.setTouchable(false);
 		window.setPosition(0, 0);
 		window.defaults().spaceBottom(10);
 		window.row().fill().expandX();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RelativeTemporalAction.java
Patch:
@@ -15,12 +15,13 @@
  ******************************************************************************/
 package com.badlogic.gdx.scenes.scene2d.actions;
 
-/** Base class for actions that transition over time using the percent compelte since the last frame.
+/** Base class for actions that transition over time using the percent complete since the last frame.
  * @author Nathan Sweet */
 abstract public class RelativeTemporalAction extends TemporalAction {
 	private float lastPercent;
 
 	protected void initialize () {
+		lastPercent = 0;
 	}
 
 	protected void update (float percent) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -203,7 +203,7 @@ public Cell add () {
 	/** Adds a new cell to the table with the specified actor.
 	 * @param actor May be null to add a cell without an actor. */
 	public Cell add (Actor actor) {
-		return layout.add(actor);
+		return layout.add(actor == null ? new Actor() : actor);
 	}
 
 	/** Adds a new cell to the table with the specified actors in a {@link Stack}.

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Scene2dTest.java
Patch:
@@ -31,6 +31,7 @@
 import com.badlogic.gdx.scenes.scene2d.ActorListener;
 import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.scenes.scene2d.actions.FloatAction;
+import static com.badlogic.gdx.scenes.scene2d.actions.Actions.*;
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
 import com.badlogic.gdx.scenes.scene2d.ui.TextButton.TextButtonStyle;
@@ -141,7 +142,7 @@ public void pan (ActorEvent event, float x, float y, float deltaX, float deltaY)
 
 		meow.setDuration(2);
 
-		// actor.addAction(parallel(moveBy(250, 250, 2)));
+		 actor.addAction(forever(sequence(moveBy(50, 0, 2),moveBy(-50, 0, 2))));
 		// actor.addAction(parallel(rotateBy(90, 2), rotateBy(90, 2)));
 		// actor.addAction(parallel(moveTo(250, 250, 2, elasticOut), color(RED, 6), delay(0.5f), rotateTo(180, 5, swing)));
 		// actor.addAction(forever(sequence(scaleTo(2, 2, 0.5f), scaleTo(1, 1, 0.5f), delay(0.5f))));

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -668,7 +668,7 @@ static boolean separateConvexPolygons (float[] verts1, float[] verts2, Vector2 s
 			final int j = (i + 1) % length1;
 
 			// projection axis is perpendicular to potential separation axis edge i->j
-			float projX = verts1[j + 1] - verts1[i + 1];
+			float projX = verts1[(j + 1) % length1] - verts1[i + 1];
 			float projY = verts1[i] - verts1[j];
 
 			// normalize projection axis

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -555,7 +555,7 @@ public void dispose () {
 		if (ownsBatch) batch.dispose();
 	}
 
-	static final class TouchFocus {
+	public static final class TouchFocus {
 		static final Pool<TouchFocus> pool = new Pool<TouchFocus>(4, 16) {
 			protected TouchFocus newObject () {
 				return new TouchFocus();

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/scenes/scene2d/utils/Clipboard.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
-package com.badlogic.gdx.scenes.scene2d.ui.utils;
+package com.badlogic.gdx.scenes.scene2d.utils;
 
 
 /** A very simple clipboard interface for text content.

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/gen/ReflectionCacheSourceCreator.java
Patch:
@@ -147,6 +147,7 @@ private void generateLookups () {
 		gatherTypes(typeOracle.findType("java.lang.Short").getErasedType(), types);
 		gatherTypes(typeOracle.findType("java.lang.Integer").getErasedType(), types);
 		gatherTypes(typeOracle.findType("java.lang.Float").getErasedType(), types);
+		gatherTypes(typeOracle.findType("java.lang.CharSequence").getErasedType(), types);
 		gatherTypes(typeOracle.findType("java.lang.Double").getErasedType(), types);
 		gatherTypes(typeOracle.findType("java.lang.Object").getErasedType(), types);
 		
@@ -210,7 +211,7 @@ private void gatherTypes(JType type, Set<JType> types) {
 		
 		// java base class
 		String name = type.getQualifiedSourceName();
-		if(!(name.contains("com.badlogic.gdx.scenes.scene2d.ui") ||
+		if(!(name.contains("com.badlogic.gdx.scenes.scene2d") ||
 			  name.contains("com.badlogic.gdx.graphics.g2d.TextureRegion") ||
 			  name.contains("com.badlogic.gdx.graphics.g2d.BitmapFont") ||
 			  name.contains("com.badlogic.gdx.graphics.g2d.NinePatch") ||
@@ -230,6 +231,7 @@ private void gatherTypes(JType type, Set<JType> types) {
 			  name.contains("java.lang.Integer") ||
 			  name.contains("java.lang.Float") ||
 			  name.contains("java.lang.Double") ||
+			  name.contains("java.lang.CharSequence") ||
 			  name.contains("java.lang.Object") ||
 			  !name.contains("."))) {
 			nesting--;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Actions.java
Patch:
@@ -384,6 +384,6 @@ static public RunnableAction run (Runnable runnable) {
 		return action;
 	}
 
-	private Actions () {
-	}
+//	private Actions () {
+//	}
 }
\ No newline at end of file

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
Patch:
@@ -340,7 +340,7 @@ protected Json getJsonLoader (final FileHandle skinFile) {
 
 		final Json json = new Json() {
 			public <T> T readValue (Class<T> type, Class elementType, Object jsonData) {
-				// If the JSON is a string but the type is not, look up the actual value by name.
+				// If the JSON is a string but the type is not, look up the actual value by name.				
 				if (jsonData instanceof String && !CharSequence.class.isAssignableFrom(type)) return get((String)jsonData, type);
 				return super.readValue(type, elementType, jsonData);
 			}

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -66,7 +66,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 		
-		GdxTest test = new YDownTest();
+		GdxTest test = new UITest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 800;
 		config.height = 480;

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/MaxRectsPacker.java
Patch:
@@ -9,7 +9,7 @@
 import com.badlogic.gdx.tools.imagepacker.TexturePacker2.Settings;
 import com.badlogic.gdx.utils.Array;
 
-/** Packs pages of images using the maximal rectangles bin packing algorithm by Jukka Jyl�nki. A brute force binary search is used
+/** Packs pages of images using the maximal rectangles bin packing algorithm by Jukka Jylänki. A brute force binary search is used
  * to pack into the smallest bin possible.
  * @author Nathan Sweet */
 public class MaxRectsPacker {
@@ -173,7 +173,7 @@ public int next (boolean result) {
 
 	/** Maximal rectangles bin packing algorithm. Adapted from this C++ public domain source:
 	 * http://clb.demon.fi/projects/even-more-rectangle-bin-packing
-	 * @author Jukka Jyl�nki
+	 * @author Jukka Jyl�nki
 	 * @author Nathan Sweet */
 	class MaxRects {
 		private int binWidth;

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -62,7 +62,7 @@ public interface Graphics {
 	 * 
 	 * @author mzechner */
 	public enum GraphicsType {
-		AndroidGL, JoglGL, LWJGL, Angle, WebGL
+		AndroidGL, JoglGL, LWJGL, Angle, WebGL, iOSGL
 	}
 
 	/** Class describing a fullscreen display mode

File: demos/metagun/metagun-desktop/src/com/mojang/metagun/Input.java
Patch:
@@ -133,7 +133,7 @@ public boolean touchDragged (int x, int y, int pointer) {
 	}
 
 	@Override
-	public boolean touchMoved (int x, int y) {
+	public boolean mouseMoved (int x, int y) {
 		return false;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -33,7 +33,7 @@
 import com.badlogic.gdx.scenes.scene2d.utils.Layout;
 import com.badlogic.gdx.scenes.scene2d.utils.ScissorStack;
 
-/** A group that scrolls a child widget using scroll bars and/or mouse or touch dragging.
+/** A group that scrolls a child widget using scrollbars and/or mouse or touch dragging.
  * <p>
  * The widget is sized to its preferred size. If the widget's preferred width or height is less than the size of this scroll pane,
  * it is set to the size of this scroll pane. Scrollbars appear when the widget is larger than the scroll pane.

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -29,8 +29,8 @@
 import com.badlogic.gdx.scenes.scene2d.utils.ScissorStack;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
-/** A container that divides two widgets either horizontally or vertically and allows the user to resize them. The child widgets
- * are always sized to fill the half of the splitpane.
+/** A container that contains two widgets and is divided either horizontally or vertically. The user may resize the widgets. The
+ * child widgets are always sized to fill their half of the splitpane.
  * <p>
  * The preferred size of a splitpane is that of the child widgets and the size of the {@link SplitPaneStyle#handle}. The widgets
  * are sized depending on the splitpane's size and the {@link #setSplitAmount(float) split position}.

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -141,7 +141,7 @@ public void setModal (boolean isModal) {
 	public boolean isDragging () {
 		return dragging;
 	}
-
+	
 	/** The style for a window, see {@link Window}.
 	 * @author Nathan Sweet */
 	static public class WindowStyle {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/Layout.java
Patch:
@@ -24,8 +24,8 @@
  * @author Nathan Sweet */
 public interface Layout {
 	/** Computes and caches any information needed for drawing and, if this actor has children, positions and sizes each child and
-	 * calls {@link #invalidate()} and then {@link #validate()} on each one. Usually this should not be called directly, instead
-	 * {@link #validate()} should be used. */
+	 * calls {@link #validate()} on each one. Usually this should not be called directly, instead {@link #validate()} should be
+	 * used. */
 	public void layout ();
 
 	/** Invalidates this actor's layout, causing {@link #layout()} to be called the next time {@link #validate()} is called. This
@@ -44,7 +44,7 @@ public interface Layout {
 	public void validate ();
 
 	/** Sizes this actor to its preferred width and height and, if its size was changed, causes the actor to be laid out by calling
-	 * {@link #invalidate()} and then {@link #validate()}.
+	 * {@link #validate()}.
 	 * <p>
 	 * Generally this method should not be called in a constructor because it calls {@link #layout()}, which means a subclass would
 	 * have layout() called before the subclass' constructor. Instead, in a constructor simply sets the actors width and height to

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TileAtlas.java
Patch:
@@ -17,14 +17,14 @@
 package com.badlogic.gdx.graphics.g2d.tiled;
 
 import java.util.HashSet;
-import java.util.List;
 import java.util.StringTokenizer;
 
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas.AtlasRegion;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
+import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.IntMap;
 
@@ -47,8 +47,7 @@ public TileAtlas (TiledMap map, FileHandle inputDir) {
 		for (TileSet set : map.tileSets) {
 			FileHandle packfile = getRelativeFileHandle(inputDir, removeExtension(set.imageName) + " packfile");
 			TextureAtlas textureAtlas = new TextureAtlas(packfile, packfile.parent(), false);
-			List<AtlasRegion> atlasRegions = textureAtlas.findRegions(removeExtension(removePath(set.imageName)));
-
+			Array<AtlasRegion> atlasRegions = textureAtlas.findRegions(removeExtension(removePath(set.imageName)));
 			for (AtlasRegion reg : atlasRegions) {
 				regionsMap.put(reg.index + set.firstgid, reg);
 				if (!textures.contains(reg.getTexture())) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -39,7 +39,7 @@ public class Button extends Table {
 	public Button (Skin skin) {
 		super(skin);
 		initialize();
-		setStyle(skin.getStyle(ButtonStyle.class));
+		setStyle(skin.get(ButtonStyle.class));
 		setWidth(getPrefWidth());
 		setHeight(getPrefHeight());
 	}
@@ -82,7 +82,7 @@ public Button (Drawable up, Drawable down, Drawable checked) {
 	}
 
 	public Button (Actor child, Skin skin) {
-		this(child, skin.getStyle(ButtonStyle.class));
+		this(child, skin.get(ButtonStyle.class));
 	}
 
 	public void setChecked (boolean isChecked) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/CheckBox.java
Patch:
@@ -33,7 +33,7 @@ public CheckBox (Skin skin) {
 	}
 
 	public CheckBox (String text, Skin skin) {
-		this(text, skin.getStyle(CheckBoxStyle.class));
+		this(text, skin.get(CheckBoxStyle.class));
 	}
 
 	public CheckBox (String text, CheckBoxStyle style) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ImageButton.java
Patch:
@@ -30,7 +30,7 @@ public class ImageButton extends Button {
 	private ImageButtonStyle style;
 
 	public ImageButton (Skin skin) {
-		this(skin.getStyle("default", ImageButtonStyle.class));
+		this(skin.get(ImageButtonStyle.class));
 	}
 
 	public ImageButton (ImageButtonStyle style) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -44,7 +44,7 @@ public Label (Skin skin) {
 	}
 
 	public Label (CharSequence text, Skin skin) {
-		this(text, skin.getStyle(LabelStyle.class));
+		this(text, skin.get(LabelStyle.class));
 	}
 
 	/** Creates a label, using a {@link LabelStyle} that has a BitmapFont with the specified name from the skin and the specified

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
Patch:
@@ -47,7 +47,7 @@ public List (Skin skin) {
 	}
 
 	public List (Object[] items, Skin skin) {
-		this(items, skin.getStyle(ListStyle.class));
+		this(items, skin.get(ListStyle.class));
 	}
 
 	public List (Object[] items, ListStyle style) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -88,7 +88,7 @@ public ScrollPane (Skin skin) {
 
 	/** @param widget May be null. */
 	public ScrollPane (Actor widget, Skin skin) {
-		this(widget, skin.getStyle(ScrollPaneStyle.class));
+		this(widget, skin.get(ScrollPaneStyle.class));
 	}
 
 	/** @param widget May be null. */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -54,7 +54,7 @@ public SelectBox (Skin skin) {
 	}
 
 	public SelectBox (Object[] items, Skin skin) {
-		this(items, skin.getStyle(SelectBoxStyle.class));
+		this(items, skin.get(SelectBoxStyle.class));
 	}
 
 	public SelectBox (Object[] items, SelectBoxStyle style) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -46,7 +46,7 @@ public Slider (Skin skin) {
 	}
 
 	public Slider (float min, float max, float steps, Skin skin) {
-		this(min, max, steps, skin.getStyle(SliderStyle.class));
+		this(min, max, steps, skin.get(SliderStyle.class));
 	}
 
 	/** Creates a new slider. It's width is determined by the given prefWidth parameter, its height is determined by the maximum of

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -61,7 +61,7 @@ public SplitPane (Skin skin) {
 	/** @param firstWidget May be null.
 	 * @param secondWidget May be null. */
 	public SplitPane (Actor firstWidget, Actor secondWidget, boolean vertical, Skin skin) {
-		this(firstWidget, secondWidget, vertical, skin.getStyle("default-horizontal", SplitPaneStyle.class));
+		this(firstWidget, secondWidget, vertical, skin.get("default-horizontal", SplitPaneStyle.class));
 	}
 
 	/** @param firstWidget May be null.

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
Patch:
@@ -192,7 +192,7 @@ public Cell add (String text) {
 	/** Adds a new cell with a label. This may only be called if {@link Table#Table(Skin)} or {@link #setSkin(Skin)} was used. */
 	public Cell add (String text, String labelStyleName) {
 		if (skin == null) throw new IllegalStateException("Table must have a skin set to use this method.");
-		return add(new Label(text, skin.getStyle(labelStyleName, LabelStyle.class)));
+		return add(new Label(text, skin.get(labelStyleName, LabelStyle.class)));
 	}
 
 	/** Adds a cell without a widget. */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java
Patch:
@@ -34,7 +34,7 @@ public TextButton (Skin skin) {
 	}
 
 	public TextButton (String text, Skin skin) {
-		this(text, skin.getStyle("default", TextButtonStyle.class));
+		this(text, skin.get(TextButtonStyle.class));
 	}
 
 	public TextButton (String text, TextButtonStyle style) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -91,16 +91,16 @@ public class TextField extends Widget {
 	private char passwordCharacter = BULLET;
 
 	public TextField (Skin skin) {
-		this("", null, skin.getStyle(TextFieldStyle.class));
+		this("", null, skin.get(TextFieldStyle.class));
 	}
 
 	public TextField (String text, Skin skin) {
-		this(text, null, skin.getStyle(TextFieldStyle.class));
+		this(text, null, skin.get(TextFieldStyle.class));
 	}
 
 	/** @param messageText Text to show when empty. May be null. */
 	public TextField (String text, String messageText, Skin skin) {
-		this(text, messageText, skin.getStyle(TextFieldStyle.class));
+		this(text, messageText, skin.get(TextFieldStyle.class));
 	}
 
 	public TextField (TextFieldStyle style) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -44,12 +44,12 @@ public class Window extends Table {
 	boolean dragging;
 
 	public Window (Skin skin) {
-		this("", skin.getStyle(WindowStyle.class));
+		this("", skin.get(WindowStyle.class));
 		setSkin(skin);
 	}
 
 	public Window (String title, Skin skin) {
-		this(title, skin.getStyle(WindowStyle.class));
+		this(title, skin.get(WindowStyle.class));
 		setSkin(skin);
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GroupCullingTest.java
Patch:
@@ -42,7 +42,7 @@ public void create () {
 		root.setFillParent(true);
 		stage.addActor(root);
 
-		skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
+		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 
 		Table labels = new Table();
 		root.add(new ScrollPane(labels, skin)).expand().fill();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ImageTest.java
Patch:
@@ -34,7 +34,7 @@ public class ImageTest extends GdxTest {
 
 	@Override
 	public void create () {
-		skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
+		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 		image2 = new TextureRegion(new Texture(Gdx.files.internal("data/badlogic.jpg")));
 		ui = new Stage(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), false);
 		Gdx.input.setInputProcessor(ui);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InterpolationTest.java
Patch:
@@ -63,7 +63,7 @@ public boolean touchDown (int x, int y, int pointer, int button) {
 		stage.addActor(root);
 		root.pad(10).top().left();
 
-		Skin skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
+		Skin skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 
 		list = new List(interpolators, skin);
 		root.add(new ScrollPane(list)).expandY().fillY().prefWidth((int)list.getPrefWidth());

File: tests/gdx-tests/src/com/badlogic/gdx/tests/LabelTest.java
Patch:
@@ -44,8 +44,8 @@ public class LabelTest extends GdxTest {
 	public void create () {
 		batch = new SpriteBatch();
 		renderer = new ShapeRenderer();
-		skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
-		skin.getTexture().setFilter(TextureFilter.Nearest, TextureFilter.Nearest);
+		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
+		skin.getAtlas().getTextures().iterator().next().setFilter(TextureFilter.Nearest, TextureFilter.Nearest);
 		stage = new Stage(0, 0, false);
 		Gdx.input.setInputProcessor(stage);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Scene2dTest.java
Patch:
@@ -73,7 +73,7 @@ public void touchUp (ActorEvent event, float x, float y, int pointer, int button
 
 		Skin skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 
-		TextButtonStyle style = skin.getStyle(TextButtonStyle.class);
+		TextButtonStyle style = skin.get(TextButtonStyle.class);
 		style.up = new EmptyDrawable() {
 			ShapeRenderer renderer = new ShapeRenderer();
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPane2Test.java
Patch:
@@ -34,7 +34,7 @@ public void create () {
 		stage = new Stage(0, 0, false);
 		Gdx.input.setInputProcessor(stage);
 
-		skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
+		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 		
 		Table mytable = new Table();
 		mytable.debug();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPaneTest.java
Patch:
@@ -82,7 +82,7 @@ public void clicked (ActorEvent event, float x, float y) {
 			table.add(new Label(i + "tres long0 long1 long2 long3 long4 long5 long6 long7 long8 long9 long10 long11 long12", skin));
 		}
 
-		final TextButton flickBbutton = new TextButton("Flick Scroll", skin.getStyle("toggle", TextButtonStyle.class));
+		final TextButton flickBbutton = new TextButton("Flick Scroll", skin.get("toggle", TextButtonStyle.class));
 		flickBbutton.setChecked(true);
 		flickBbutton.addListener(new ChangeListener() {
 			public void changed (ChangeEvent event, Actor actor) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -45,7 +45,7 @@ public class SoundTest extends GdxTest {
 	public void create () {
 		sound = Gdx.audio.newSound(Gdx.files.getFileHandle("data/shotgun.mp3", FileType.Internal));
 
-		skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
+		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 		ui = new Stage(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);
 		TextButton play = new TextButton("Play", skin);
 		TextButton stop = new TextButton("Stop", skin);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TableTest.java
Patch:
@@ -45,7 +45,7 @@ public void create () {
 		stage = new Stage(0, 0, false);
 		Gdx.input.setInputProcessor(stage);
 
-		skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
+		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
 		TextureRegion region = new TextureRegion(texture);
@@ -78,7 +78,7 @@ public void clicked (ActorEvent event, float x, float y) {
 		root.add(new Label("meow meow meow meow meow meow meow meow meow meow meow meow", skin)).colspan(3);
 		root.row();
 		root.add(new TextButton("Text Button", skin)).expand();
-		root.add(new TextButton("Toggle Button", skin.getStyle("toggle", TextButtonStyle.class)));
+		root.add(new TextButton("Toggle Button", skin.get("toggle", TextButtonStyle.class)));
 		root.add(new CheckBox("meow", skin));
 		root.pack();
 		// root.add(new Button(new Image(region), skin));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextButtonTest.java
Patch:
@@ -35,7 +35,7 @@ public class TextButtonTest extends GdxTest {
 	public void create () {
 		stage = new Stage(0, 0, false, new SpriteBatch());
 		Gdx.input.setInputProcessor(stage);
-		skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
+		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 		for (int i = 0; i < 500; i++) {
 			TextButton t = new TextButton("Button"+i, skin);
 			t.setX(MathUtils.random(0, Gdx.graphics.getWidth()));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTestWrapper.java
Patch:
@@ -105,7 +105,7 @@ public class GwtTestWrapper extends GdxTest {
 	@Override
 	public void create () {
 		ui = new Stage(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);
-		skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
+		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
 		font = new BitmapFont(Gdx.files.internal("data/arial-15.fnt"), false);
 		container = new Table();
 		ui.addActor(container);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -645,6 +645,7 @@ public void setClamp (boolean clamp) {
 
 	public void setFadeScrollBars (boolean fadeScrollBars) {
 		this.fadeScrollBars = fadeScrollBars;
+		if (!fadeScrollBars) fadeAlpha = 1;
 	}
 
 	public void setupFadeScrollBars (float fadeAlphaSeconds, float fadeDelaySeconds) {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtInput.java
Patch:
@@ -471,7 +471,7 @@ private void handleEvent (NativeEvent e) {
 			this.currentEventTimeStamp = TimeUtils.nanoTime();
 			if(processor != null) {
 				if(touched) processor.touchDragged(mouseX, mouseY, 0);
-				else processor.touchMoved(mouseX, mouseY);
+				else processor.mouseMoved(mouseX, mouseY);
 			}
 		}
 		

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
Patch:
@@ -321,7 +321,7 @@ public String findStyleName (Object style) {
 	 * reflection and the name of that style is found in the skin. If the actor doesn't have a "getStyle" method or the style was
 	 * not found in the skin, no exception is thrown and the actor is left unchanged. */
 	public void setEnabled (Actor actor, boolean enabled) {
-		actor.touchable = enabled;
+		actor.setTouchable(enabled);
 		// Get current style.
 		Method method = findMethod(actor.getClass(), "getStyle");
 		if (method == null) return;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/TextureDrawable.java
Patch:
@@ -23,6 +23,7 @@
 public class TextureDrawable extends EmptyDrawable {
 	private Texture texture;
 
+	/** Creates an unitialized TextureDrawable. The texture must be set before use. */
 	public TextureDrawable () {
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/TextureRegionDrawable.java
Patch:
@@ -24,6 +24,7 @@
 public class TextureRegionDrawable extends EmptyDrawable {
 	private TextureRegion region;
 
+	/** Creates an unitialized TextureRegionDrawable. The texture region must be set before use. */
 	public TextureRegionDrawable () {
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -109,7 +109,7 @@ public void create () {
 		window.setPosition(0, 0);
 		window.defaults().spaceBottom(10);
 		window.row().fill().expandX();
-		window.add(button).fill(0f, 0f);
+		window.add(button).fill(false);
 		window.add(buttonMulti);
 		window.add(imgButton);
 		window.add(imgToggleButton);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -278,6 +278,7 @@ public boolean touchUp (int screenX, int screenY, int pointer, int button) {
 		for (int i = 0, n = touchFocuses.size; i < n; i++) {
 			TouchFocus focus = focuses[i];
 			if (focus.pointer != pointer || focus.button != button) continue;
+			event.setTarget(focus.actor);
 			event.setCurrentTarget(focus.actor);
 			if (focus.listener.handle(event)) event.handle();
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPaneTest.java
Patch:
@@ -62,7 +62,7 @@ public boolean touchDown (ActorEvent event, float x, float y, int pointer, int b
 			}
 		};
 
-		table.parse("pad:10 * expand:x space:4");
+		table.pad(10).defaults().expandX().space(4);
 		for (int i = 0; i < 100; i++) {
 			table.row();
 			table.add(new Label(i + "uno", skin)).expandX().fillX();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ActorGestureListener.java
Patch:
@@ -64,6 +64,7 @@ public boolean handle (Event e) {
 
 		switch (event.getType()) {
 		case touchDown:
+			actor = event.getCurrentTarget();
 			detector.touchDown(event.getStageX(), event.getStageY(), event.getPointer(), event.getButton());
 			return true;
 		case touchUp:

File: gdx/src/com/badlogic/gdx/input/GestureDetector.java
Patch:
@@ -153,7 +153,7 @@ public boolean touchDragged (float x, float y, int pointer) {
 			// handle pan
 			inTapSquare = false;
 			panning = true;
-			return listener.pan(tracker.lastX, tracker.lastY, tracker.deltaX, tracker.deltaY);
+			return listener.pan(x, y, tracker.deltaX, tracker.deltaY);
 		}
 
 		return false;

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -757,7 +757,7 @@ public int computeVisibleGlyphs (CharSequence str, int start, int end, float ava
 				Glyph g = data.getGlyph(ch);
 				if (g != null) {
 					if (lastGlyph != null) width += lastGlyph.getKerning(ch);
-					if (width + g.xadvance > availableWidth) break;
+					if ((width + g.xadvance) - availableWidth > 0.001f) break;
 					width += g.xadvance;
 					lastGlyph = g;
 				}
@@ -769,7 +769,7 @@ public int computeVisibleGlyphs (CharSequence str, int start, int end, float ava
 				Glyph g = data.getGlyph(ch);
 				if (g != null) {
 					if (lastGlyph != null) width += lastGlyph.getKerning(ch) * scaleX;
-					if (width + g.xadvance * scaleX > availableWidth) break;
+					if ((width + g.xadvance * scaleX) - availableWidth > 0.001f) break;
 					width += g.xadvance * scaleX;
 					lastGlyph = g;
 				}

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ParticleEditor.java
Patch:
@@ -91,7 +91,7 @@ public void windowClosed (WindowEvent event) {
 
 		initializeComponents();
 
-		setSize(950, 950);
+		setSize(1000, 950);
 		setLocationRelativeTo(null);
 		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
 		setVisible(true);

File: gdx/src/com/badlogic/gdx/utils/BufferUtils.java
Patch:
@@ -271,7 +271,7 @@ public static LongBuffer newLongBuffer (int numLongs) {
 	*/
 	
 	public static void disposeUnsafeByteBuffer(ByteBuffer buffer) {
-		int size = 0; 
+		int size = buffer.capacity(); 
 		synchronized(unsafeBuffers) {
 			if(!unsafeBuffers.removeValue(buffer, true))
 				throw new IllegalArgumentException("buffer not allocated with newUnsafeByteBuffer or already disposed");

File: gdx/src/com/badlogic/gdx/math/Polygon.java
Patch:
@@ -38,7 +38,7 @@ public float[] getLocalVertices () {
 
 	/** Returns vertices scaled, rotated, and offset by the polygon position. */
 	public float[] getWorldVertices () {
-		if (!dirty) return localVertices;
+		if (!dirty) return worldVertices;
 		dirty = false;
 
 		final float[] localVertices = this.localVertices;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/CompositeAction.java
Patch:
@@ -33,8 +33,9 @@ public ArrayList<Action> getActions () {
 	}
 
 	public void finish() {
-		for(Action action: actions) {
-			action.finish();
+		int len = actions.size();
+		for (int i = 0; i < len; i++) {
+			actions.get(i).finish();
 		}
 		super.finish();
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/PixmapPacker.java
Patch:
@@ -320,7 +320,6 @@ public synchronized TextureAtlas generateTextureAtlas (TextureFilter minFilter,
 					@Override
 					public void dispose () {
 						super.dispose();
-						
 					}
 				};
 				texture.setFilter(minFilter, magFilter);

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -51,6 +51,7 @@
 import com.badlogic.gdx.tests.TextureDownloadTest;
 import com.badlogic.gdx.tests.UITest;
 import com.badlogic.gdx.tests.VertexBufferObjectShaderTest;
+import com.badlogic.gdx.tests.YDownTest;
 import com.badlogic.gdx.tests.gwt.GwtBinaryTest;
 import com.badlogic.gdx.tests.gwt.GwtTestWrapper;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -65,7 +66,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 		
-		GdxTest test = new FramebufferToTextureTest();
+		GdxTest test = new YDownTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 800;
 		config.height = 480;

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSGraphics.java
Patch:
@@ -158,7 +158,7 @@ public int getFramesPerSecond() {
 
 	@Override
 	public GraphicsType getType() {
-		return null;
+		return GraphicsType.iOSGL;
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -79,7 +79,8 @@ public void setStyle (LabelStyle style) {
 		if (style == null) throw new IllegalArgumentException("style cannot be null.");
 		if (style.font == null) throw new IllegalArgumentException("Missing LabelStyle font.");
 		this.style = style;
-		cache = new BitmapFontCache(style.font);
+		if(cache != null) cache.dispose();
+		cache = new BitmapFontCache(style.font, style.font.usesIntegerPositions());
 		if (style.fontColor != null) cache.setColor(style.fontColor);
 		computeBounds();
 		invalidateHierarchy();

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -505,7 +505,9 @@ public void setBounds (float x, float y, float width, float height) {
 			float heightRatio = height / region.originalHeight;
 			region.offsetX = originalOffsetX * widthRatio;
 			region.offsetY = originalOffsetY * heightRatio;
-			super.setBounds(x + region.offsetX, y + region.offsetY, region.packedWidth * widthRatio, region.packedHeight
+			int packedWidth = region.rotate ? region.packedHeight : region.packedWidth;
+			int packedHeight = region.rotate ? region.packedWidth : region.packedHeight;
+			super.setBounds(x + region.offsetX, y + region.offsetY, packedWidth * widthRatio, packedHeight
 				* heightRatio);
 		}
 

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSApplication.java
Patch:
@@ -39,8 +39,8 @@ public IOSApplication(UIApplication uiApp, ApplicationListener listener) {
 		RectangleF bounds = UIScreen.get_MainScreen().get_Bounds();
 		this.graphics = new IOSGraphics(bounds, this);
 		this.files = new IOSFiles();
-		this.audio = null;
-		this.input = null;
+		this.audio = new IOSAudio();
+		this.input = new IOSInput();
 		
 		Gdx.files = this.files;
 		Gdx.graphics = this.graphics;

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSAudio.java
Patch:
@@ -21,12 +21,12 @@ public AudioRecorder newAudioRecorder(int samplingRate, boolean isMono) {
 
 	@Override
 	public Sound newSound(FileHandle fileHandle) {
-		return null;
+		return new IOSSound();
 	}
 
 	@Override
 	public Music newMusic(FileHandle file) {
-		return null;
+		return new IOSMusic();
 	}
 
 }

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSFiles.java
Patch:
@@ -1,13 +1,14 @@
 package com.badlogic.gdx.backends.ios;
 
 import cli.System.Environment;
+import cli.System.IO.Directory;
 
 import com.badlogic.gdx.Files;
 import com.badlogic.gdx.files.FileHandle;
 
 public class IOSFiles implements Files {
 	static final String externalPath = Environment.GetFolderPath(Environment.SpecialFolder.wrap(Environment.SpecialFolder.MyDocuments));
-	static final String localPath = Environment.GetFolderPath(Environment.SpecialFolder.wrap(Environment.SpecialFolder.MyDocuments)) + "../Library/local";
+	static final String localPath = Directory.GetParent(Environment.GetFolderPath(Environment.SpecialFolder.wrap(Environment.SpecialFolder.MyDocuments))).ToString() + "/Library/local";
 	
 	public IOSFiles() {
 		new FileHandle(externalPath).mkdirs();

File: backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSFiles.java
Patch:
@@ -6,8 +6,8 @@
 import com.badlogic.gdx.files.FileHandle;
 
 public class IOSFiles implements Files {
-	static final String externalPath = Environment.GetFolderPath(Environment.SpecialFolder.wrap(Environment.SpecialFolder.MyDocuments)) + "/external";
-	static final String localPath = Environment.GetFolderPath(Environment.SpecialFolder.wrap(Environment.SpecialFolder.MyDocuments)) + "/local";
+	static final String externalPath = Environment.GetFolderPath(Environment.SpecialFolder.wrap(Environment.SpecialFolder.MyDocuments));
+	static final String localPath = Environment.GetFolderPath(Environment.SpecialFolder.wrap(Environment.SpecialFolder.MyDocuments)) + "../Library/local";
 	
 	public IOSFiles() {
 		new FileHandle(externalPath).mkdirs();

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -748,8 +748,9 @@ public void computeGlyphAdvancesAndPositions (CharSequence str, FloatArray glyph
 	 * @param end The last character of the string (exclusive). */
 	public int computeVisibleGlyphs (CharSequence str, int start, int end, float availableWidth) {
 		int index = start;
-		int width = 0;
+		float width = 0;
 		Glyph lastGlyph = null;
+		
 		if (data.scaleX == 1) {
 			for (; index < end; index++) {
 				char ch = str.charAt(index);

File: gdx/src/com/badlogic/gdx/assets/loaders/SkinLoader.java
Patch:
@@ -47,7 +47,7 @@ public Array<AssetDescriptor> getDependencies (String fileName, SkinParameter pa
 		textureParam.minFilter = TextureFilter.Linear;
 		textureParam.magFilter = TextureFilter.Linear;
 		if (parameter == null)
-			deps.add(new AssetDescriptor(Gdx.files.internal(fileName).pathWithoutExtension() + ".png", Texture.class, textureParam));
+			deps.add(new AssetDescriptor(resolve(fileName).pathWithoutExtension() + ".png", Texture.class, textureParam));
 		else
 			deps.add(new AssetDescriptor(parameter.texturePath, Texture.class, textureParam));
 		return deps;
@@ -61,7 +61,7 @@ public void loadAsync (AssetManager manager, String fileName, SkinParameter para
 	public Skin loadSync (AssetManager manager, String fileName, SkinParameter parameter) {
 		String texturePath;
 		if (parameter == null)
-			texturePath = Gdx.files.internal(fileName).pathWithoutExtension() + ".png";
+			texturePath = resolve(fileName).pathWithoutExtension() + ".png";
 		else
 			texturePath = parameter.texturePath;
 		Texture texture = manager.get(texturePath, Texture.class);

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -38,7 +38,7 @@ public class BitmapFontCache implements Disposable {
 	private boolean integer = true;
 
 	public BitmapFontCache (BitmapFont font) {
-		this(font, true);
+		this(font, font.usesIntegerPositions());
 	}
 
 	/** Creates a new BitmapFontCache

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -186,6 +186,7 @@ void mainLoop () {
 				}
 			} else {
 				if(graphics.resize || Display.wasResized() || Display.getWidth() != graphics.config.width || Display.getHeight() != graphics.config.height) {
+					graphics.resize  = false;
 					Gdx.gl.glViewport(0, 0, Display.getWidth(), Display.getHeight());
 					graphics.config.width = Display.getWidth();
 					graphics.config.height = Display.getHeight();

File: extensions/gdx-setup-ui/src/aurelienribon/libgdx/DownloadManager.java
Patch:
@@ -11,7 +11,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Random;
 
 /**
  * @author Aurelien Ribon | http://www.aurelienribon.com/

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/skins/SkinPacker.java
Patch:
@@ -141,7 +141,7 @@ public void create () {
 					Json json = new Json();
 					if (skinFile != null) {
 						FileHandle oldSkinFile = new FileHandle(skinFile);
-						OrderedMap oldSkin = json.fromJson(OrderedMap.class, new FileHandle(skinFile));
+						OrderedMap oldSkin = json.fromJson(OrderedMap.class, oldSkinFile);
 						OrderedMap newSkin = json.fromJson(OrderedMap.class, newSkinFile);
 						OrderedMap oldResources = (OrderedMap)oldSkin.get("resources");
 						OrderedMap newResources = (OrderedMap)newSkin.get("resources");

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidMusic.java
Patch:
@@ -27,6 +27,7 @@ public class AndroidMusic implements Music {
 	private final AndroidAudio audio;
 	private MediaPlayer player;
 	private boolean isPrepared = true;
+	protected boolean wasPlaying = false;
 
 	AndroidMusic (AndroidAudio audio, MediaPlayer player) {
 		this.audio = audio;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFileHandle.java
Patch:
@@ -33,7 +33,7 @@ public class AndroidFileHandle extends FileHandle {
 	final AssetManager assets;
 
 	AndroidFileHandle (AssetManager assets, String fileName, FileType type) {
-		super(fileName, type);
+		super(fileName.replaceAll("\\", "/"), type);
 		this.assets = assets;
 	}
 
@@ -43,6 +43,7 @@ public class AndroidFileHandle extends FileHandle {
 	}
 
 	public FileHandle child (String name) {
+		name = name.replaceAll("\\", "/");
 		if (file.getPath().length() == 0) return new AndroidFileHandle(assets, new File(name), type);
 		return new AndroidFileHandle(assets, new File(file, name), type);
 	}
@@ -127,7 +128,7 @@ public boolean exists () {
 				assets.open(fileName).close(); // Check if file exists.
 				return true;
 			} catch (Exception ex) {			
-//				 This is SUPER slow!
+//				 This is SUPER slow! but we need it for directories.
 //				 try {
 //				 return assets.list(fileName).length > 0;
 //				 } catch (Exception ignored) {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFileHandle.java
Patch:
@@ -25,14 +25,14 @@ public class GwtFileHandle extends FileHandle {
 	protected GwtFileHandle (Preloader preloader, String fileName, FileType type) {
 		if(type != FileType.Internal) throw new GdxRuntimeException("FileType '" + type + "' Not supported in GWT backend");
 		this.preloader = preloader;
-		this.file = fileName;
+		this.file = fileName.replaceAll("\\", "/");
 		this.type = type;
 	}
 	
 	public GwtFileHandle(String path) {
 		this.type = FileType.Internal;
 		this.preloader = ((GwtApplication)Gdx.app).getPreloader();
-		this.file = path;
+		this.file = path.replaceAll("\\", "/");
 	}
 
 	public String path () {
@@ -68,7 +68,7 @@ public String pathWithoutExtension() {
 		String path = file;
 		int dotIndex = path.lastIndexOf('.');
 		if (dotIndex == -1) return path;
-		return path.substring(0, dotIndex);
+		return path.substring(0, dotIndex).replaceAll("\\", "/");
 	}
 
 	public FileType type () {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -214,6 +214,7 @@ public void stop () {
 		running = false;
 		try {
 			Display.destroy();
+			audio.dispose();
 		} catch (Throwable ignored) {
 		}
 		EventQueue.invokeLater(new Runnable() {

File: extensions/gdx-setup-ui/src/aurelienribon/libgdx/ui/LibrarySetupPanel.java
Patch:
@@ -105,6 +105,7 @@ public void init() {
 			}
 			@Override public void error() {
 				System.err.println("[warning] Cannot download the configuration file.");
+				librariesUpdateLabel.setText("Cannot download the configuration file");
 			}
 		});
 	}

File: extensions/gdx-setup-ui/src/aurelienribon/libgdx/ui/MainPanel.java
Patch:
@@ -47,7 +47,8 @@ private void checkUpdates() {
 		versionLabel.setText("v" + version + " (...)");
 
 		URL tmpUrl;
-		try {tmpUrl = new URL("http://www.aurelienribon.com/libgdx-setup/config.txt");}
+		//try {tmpUrl = new URL("http://www.aurelienribon.com/libgdx-setup/config.txt");}
+		try {tmpUrl = new URL("http://libgdx.googlecode.com/svn/trunk/extensions/gdx-setup-ui/config/config.txt");}
 		catch (MalformedURLException ex) {throw new RuntimeException(ex);}
 
 		final URL url = tmpUrl;

File: extensions/gdx-setup-ui/src/aurelienribon/libgdx/ui/LibrarySetupPanel.java
Patch:
@@ -92,8 +92,7 @@ private void downloadLatestDefinition() {
 			@Override public void completed() {
 				LibraryDef def = new LibraryDef(output.toString());
 				cfg.registerLibrary("libgdx", def);
-				libgdxLoadingLabel.setIcon(Res.getImage("ic_ok.png"));
-				libgdxLoadingLabel.setToolTipText("Latest definition has been successfully downloaded.");
+				libgdxLoadingLabel.setIcon(null);
 			}
 			@Override public void error(IOException ex) {
 				libgdxLoadingLabel.setIcon(Res.getImage("ic_error.png"));

File: extensions/gdx-setup-ui/src/aurelienribon/libgdx/ui/MainPanel.java
Patch:
@@ -17,6 +17,7 @@ public class MainPanel extends PaintedPanel {
     public MainPanel() {
         initComponents();
 
+		versionlabel.setText("v1.0.1");
 		versionlabel.addMouseListener(new MouseAdapter() {
 			@Override public void mousePressed(MouseEvent e) {
 				if (Desktop.isDesktopSupported()) {

File: extensions/gdx-setup-ui/src/aurelienribon/libgdx/ui/ResultTree.java
Patch:
@@ -162,7 +162,7 @@ private void updateSrc() {
 		// html
 
 		DefaultMutableTreeNode htmlSrcNode = nodes.get("#DIR#prj-html/src");
-		DefaultMutableTreeNode htmlSrcAppGwtNode = nodes.get("prj-html/src/MyGame.gwt.xml");
+		DefaultMutableTreeNode htmlSrcAppGwtNode = nodes.get("prj-html/src/GwtDefinition.gwt.xml");
 		DefaultMutableTreeNode htmlSrcClientDirNode = nodes.get("#DIR#prj-html/src/client");
 
 		htmlSrcNode.removeAllChildren();

File: extensions/gdx-setup-ui/src/aurelienribon/utils/HttpUtils.java
Patch:
@@ -68,7 +68,6 @@ private void download() {
 				connection.setDoInput(true);
 				connection.setDoOutput(false);
 				connection.setUseCaches(true);
-				connection.setRequestProperty("user-agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11");
 				connection.setConnectTimeout(3000);
 				connection.connect();
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MusicTest.java
Patch:
@@ -41,8 +41,9 @@ public boolean needsGL20 () {
 	@Override
 	public void create () {
 		for (int i = 0; i < music.length; i++) {
-			music[i] = Gdx.audio.newMusic(Gdx.files.internal("data/warmup.mp3"));
+			music[i] = Gdx.audio.newMusic(Gdx.files.internal("data/cloudconnected.ogg"));
 			music[i].setLooping(true);
+			music[i].setLooping(false);
 		}
 
 		buttons = new TextureRegion(new Texture(Gdx.files.internal("data/playback.png")));
@@ -60,7 +61,7 @@ public void render () {
 		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		batch.begin();
 		batch.draw(buttons, 0, 0);
-		font.draw(batch, "\"Three of a perfect pair: " + music[0].getPosition(), 10, Gdx.graphics.getHeight() - 20);
+//		font.draw(batch, "\"Three of a perfect pair: " + music[0].getPosition(), 10, Gdx.graphics.getHeight() - 20);
 		batch.end();
 
 		if (Gdx.input.justTouched()) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MusicTest.java
Patch:
@@ -41,7 +41,8 @@ public boolean needsGL20 () {
 	@Override
 	public void create () {
 		for (int i = 0; i < music.length; i++) {
-			music[i] = Gdx.audio.newMusic(Gdx.files.internal("data/cloudconnected.ogg"));
+			music[i] = Gdx.audio.newMusic(Gdx.files.internal("data/warmup.mp3"));
+			music[i].setLooping(true);
 		}
 
 		buttons = new TextureRegion(new Texture(Gdx.files.internal("data/playback.png")));

File: gdx/src/com/badlogic/gdx/assets/loaders/SkinLoader.java
Patch:
@@ -47,7 +47,7 @@ public Array<AssetDescriptor> getDependencies (String fileName, SkinParameter pa
 		textureParam.minFilter = TextureFilter.Linear;
 		textureParam.magFilter = TextureFilter.Linear;
 		if (parameter == null)
-			deps.add(new AssetDescriptor(Gdx.files.internal(fileName).nameWithoutExtension() + ".png", Texture.class, textureParam));
+			deps.add(new AssetDescriptor(Gdx.files.internal(fileName).pathWithoutExtension() + ".png", Texture.class, textureParam));
 		else
 			deps.add(new AssetDescriptor(parameter.texturePath, Texture.class, textureParam));
 		return deps;
@@ -61,7 +61,7 @@ public void loadAsync (AssetManager manager, String fileName, SkinParameter para
 	public Skin loadSync (AssetManager manager, String fileName, SkinParameter parameter) {
 		String texturePath;
 		if (parameter == null)
-			texturePath = Gdx.files.internal(fileName).nameWithoutExtension() + ".png";
+			texturePath = Gdx.files.internal(fileName).pathWithoutExtension() + ".png";
 		else
 			texturePath = parameter.texturePath;
 		Texture texture = manager.get(texturePath, Texture.class);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/AnimationAction.java
Patch:
@@ -61,8 +61,7 @@ protected float createInterpolatedAlpha (float delta) {
 		} else if (interpolator == null) {
 			return taken * invDuration;
 		} else {
-			float interpolatedTime = interpolator.getInterpolation(taken / duration) * duration;
-			return interpolatedTime * invDuration;
+			return interpolator.getInterpolation(taken * invDuration);
 		}
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTCanvas.java
Patch:
@@ -49,7 +49,7 @@ public class LwjglAWTCanvas implements Application {
 	final LwjglGraphics graphics;
 	final OpenALAudio audio;
 	final LwjglFiles files;
-	final LwjglInput input;
+	final LwjglAWTInput input;
 	final ApplicationListener listener;
 	final AWTGLCanvas canvas;
 	final List<Runnable> runnables = new ArrayList<Runnable>();
@@ -125,7 +125,7 @@ public boolean setDisplayMode (DisplayMode displayMode) {
 			audio = null;
 		}
 		files = new LwjglFiles();
-		input = new LwjglInput();
+		input = new LwjglAWTInput(canvas);
 		this.listener = listener;
 
 		Gdx.app = this;
@@ -210,7 +210,6 @@ private void render () {
 			}
 			runnables.clear();
 		}
-		input.update();
 
 		int width = Math.max(1, graphics.getWidth());
 		int height = Math.max(1, graphics.getHeight());

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -40,7 +40,7 @@
  *
  */
 public class FreeTypeFontGenerator implements Disposable {
-	public static final String DEFAULT_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\"!`?'.,;:()[]{}<>|/@\\^$-%+=#_&~* ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ";
+	public static final String DEFAULT_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\"!`?'.,;:()[]{}<>|/@\\^$-%+=#_&~*\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008A\u008B\u008C\u008D\u008E\u008F\u0090\u0091\u0092\u0093\u0094\u0095\u0096\u0097\u0098\u0099\u009A\u009B\u009C\u009D\u009E\u009F\u00A0\u00A1\u00A2\u00A3\u00A4\u00A5\u00A6\u00A7\u00A8\u00A9\u00AA\u00AB\u00AC\u00AD\u00AE\u00AF\u00B0\u00B1\u00B2\u00B3\u00B4\u00B5\u00B6\u00B7\u00B8\u00B9\u00BA\u00BB\u00BC\u00BD\u00BE\u00BF\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C6\u00C7\u00C8\u00C9\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D0\u00D1\u00D2\u00D3\u00D4\u00D5\u00D6\u00D7\u00D8\u00D9\u00DA\u00DB\u00DC\u00DD\u00DE\u00DF\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u00E6\u00E7\u00E8\u00E9\u00EA\u00EB\u00EC\u00ED\u00EE\u00EF\u00F0\u00F1\u00F2\u00F3\u00F4\u00F5\u00F6\u00F7\u00F8\u00F9\u00FA\u00FB\u00FC\u00FD\u00FE\u00FF";
 	final Library library;
 	final Face face;
 

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -195,7 +195,7 @@ public FreeTypeBitmapFontData generateData (int size, String characters, boolean
 			}
 		}
 
-		TextureAtlas textureAtlas = atlas.generateTextureAtlas(TextureFilter.Nearest, TextureFilter.Nearest);
+		TextureAtlas textureAtlas = atlas.generateTextureAtlas(TextureFilter.Nearest, TextureFilter.Nearest, false);
 		data.region = new TextureRegion(textureAtlas.getRegions().get(0).getTexture());
 		return data;
 	}

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -150,7 +150,7 @@ public FreeTypeBitmapFontData generateData (int size, String characters, boolean
 
 		// generate the glyphs
 		int maxGlyphHeight = (int)Math.ceil(data.lineHeight);
-		int pageWidth = MathUtils.nextPowerOfTwo((int)Math.sqrt(maxGlyphHeight / 2 * maxGlyphHeight / 2 * characters.length()));
+		int pageWidth = MathUtils.nextPowerOfTwo((int)Math.sqrt(maxGlyphHeight * maxGlyphHeight * characters.length()));
 		PixmapPacker atlas = new PixmapPacker(pageWidth, pageWidth, Format.RGBA8888, 2, false);
 		for (int i = 0; i < characters.length(); i++) {
 			char c = characters.charAt(i);
@@ -176,6 +176,7 @@ public FreeTypeBitmapFontData generateData (int size, String characters, boolean
 			glyph.srcX = (int)rect.x;
 			glyph.srcY = (int)rect.y;
 			data.setGlyph(c, glyph);
+			pixmap.dispose();
 		}
 
 		// generate kerning

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -63,7 +63,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 		
-		GdxTest test = new UITest();
+		GdxTest test = new FreeTypeTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 800;
 		config.height = 480;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java
Patch:
@@ -94,7 +94,7 @@ public TextButtonStyle () {
 		public TextButtonStyle (NinePatch down, NinePatch up, NinePatch checked, float pressedOffsetX, float pressedOffsetY,
 			float unpressedOffsetX, float unpressedOffsetY, BitmapFont font, Color fontColor, Color downFontColor,
 			Color checkedFontColor) {
-			super(down, up, checked, pressedOffsetX, pressedOffsetY, unpressedOffsetX, unpressedOffsetY);
+			super(up, down, checked, pressedOffsetX, pressedOffsetY, unpressedOffsetX, unpressedOffsetY);
 			this.font = font;
 			this.fontColor = fontColor;
 			this.downFontColor = downFontColor;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -151,6 +151,7 @@ public synchronized void unload (String fileName) {
 	 * @return whether the asset is contained in this manager */
 	public synchronized <T> boolean containsAsset (T asset) {
 		ObjectMap<String, RefCountedContainer> typedAssets = assets.get(asset.getClass());
+		if(typedAssets == null) return false;
 		for (String fileName : typedAssets.keys()) {
 			T otherAsset = (T)typedAssets.get(fileName).getObject(Object.class);
 			if (otherAsset == asset || asset.equals(otherAsset)) return true;

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -178,6 +178,7 @@ public synchronized void unload (String fileName) {
 	 * @return whether the asset is contained in this manager */
 	public synchronized <T> boolean containsAsset (T asset) {
 		ObjectMap<String, RefCountedContainer> typedAssets = assets.get(asset.getClass());
+		if(typedAssets == null) return false;
 		for (String fileName : typedAssets.keys()) {
 			T otherAsset = (T)typedAssets.get(fileName).getObject(Object.class);
 			if (otherAsset == asset || asset.equals(otherAsset)) return true;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -41,6 +41,7 @@
 import com.badlogic.gdx.tests.PixelsPerInchTest;
 import com.badlogic.gdx.tests.PixmapBlendingTest;
 import com.badlogic.gdx.tests.ShaderMultitextureTest;
+import com.badlogic.gdx.tests.ShapeRendererAlphaTest;
 import com.badlogic.gdx.tests.SoundTest;
 import com.badlogic.gdx.tests.SpriteBatchShaderTest;
 import com.badlogic.gdx.tests.SpriteCacheOffsetTest;
@@ -61,7 +62,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 		
-		GdxTest test = new CustomShaderSpriteBatchTest();
+		GdxTest test = new ShapeRendererAlphaTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 800;
 		config.height = 480;

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -318,7 +318,7 @@ public BitmapFont (BitmapFontData data, TextureRegion region, boolean integer) {
 		this.integer = integer;
 		this.data = data;
 		load(data);
-		ownsTexture = region != null;
+		ownsTexture = region == null;
 	}
 
 	private void load (BitmapFontData data) {

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -32,6 +32,7 @@
 import com.badlogic.gdx.assets.loaders.SoundLoader;
 import com.badlogic.gdx.assets.loaders.TextureAtlasLoader;
 import com.badlogic.gdx.assets.loaders.TextureLoader;
+import com.badlogic.gdx.assets.loaders.TileAtlasLoader;
 import com.badlogic.gdx.assets.loaders.TileMapRendererLoader;
 import com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver;
 import com.badlogic.gdx.audio.Music;
@@ -40,6 +41,7 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas;
+import com.badlogic.gdx.graphics.g2d.tiled.TileAtlas;
 import com.badlogic.gdx.graphics.g2d.tiled.TileMapRenderer;
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.utils.Array;
@@ -85,6 +87,7 @@ public AssetManager (FileHandleResolver resolver) {
 		setLoader(TextureAtlas.class, new TextureAtlasLoader(resolver));
 		setLoader(Texture.class, new TextureLoader(resolver));
 		setLoader(Skin.class, new SkinLoader(resolver));
+		setLoader(TileAtlas.class, new TileAtlasLoader(resolver));
 		setLoader(TileMapRenderer.class, new TileMapRendererLoader(resolver));
 		threadPool = Executors.newFixedThreadPool(1, new ThreadFactory() {
 			@Override

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -34,6 +34,7 @@
 import com.badlogic.gdx.tests.ImageScaleTest;
 import com.badlogic.gdx.tests.ImageTest;
 import com.badlogic.gdx.tests.LabelTest;
+import com.badlogic.gdx.tests.LifeCycleTest;
 import com.badlogic.gdx.tests.MeshShaderTest;
 import com.badlogic.gdx.tests.Mpg123Test;
 import com.badlogic.gdx.tests.ParticleEmitterTest;
@@ -60,7 +61,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 		
-		GdxTest test = new BobTest();
+		GdxTest test = new CustomShaderSpriteBatchTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 800;
 		config.height = 480;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FreeTypeTest.java
Patch:
@@ -30,7 +30,7 @@ public void create () {
 		font = new BitmapFont(Gdx.files.internal("data/arial-15.fnt"), flip);
 		FileHandle fontFile = Gdx.files.internal("data/arial.ttf");
 		FreeTypeFontGenerator generator = new FreeTypeFontGenerator(fontFile);
-		FreeTypeBitmapFontData fontData = generator.generateData(22, FreeTypeFontGenerator.DEFAULT_CHARS, flip);
+		FreeTypeBitmapFontData fontData = generator.generateData(15, FreeTypeFontGenerator.DEFAULT_CHARS, flip);
 		generator.dispose();
 		ftFont = new BitmapFont(fontData, fontData.getTextureRegion(), false);
 	}

File: gdx/src/com/badlogic/gdx/audio/Sound.java
Patch:
@@ -73,7 +73,7 @@ public interface Sound extends Disposable {
 	/** Changes the pitch multiplier of the sound instance with the given id as returned by {@link #play()} or {@link #play(float)}.
 	 * If the sound is no longer playing, this has no effect.
 	 * @param soundId the sound id
-	 * @param pitch the pitch multiplier, 1 == default, >1 == faster, <1 == slower */
+	 * @param pitch the pitch multiplier, 1 == default, >1 == faster, <1 == slower, the value has to be between 0.5 and 2.0 */
 	public void setPitch (long soundId, float pitch);
 
 	/** Changes the volume of the sound instance with the given id as returned by {@link #play()} or {@link #play(float)}. If the

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/io/ByteArrayInputStream.java
Patch:
@@ -26,7 +26,6 @@ public ByteArrayInputStream(byte[] data) {
   
   @Override
   public int read()  {
-    return pos < data.length ? data[pos++] : -1;
+    return pos < data.length ? data[pos++] & 0xff: -1;
   }
-
 }

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/BinaryLoader.java
Patch:
@@ -72,7 +72,7 @@ public BlobInputStream (Blob blob) {
 		@Override
 		public int read () throws IOException {
 			if (pos == blob.length()) return -1;
-			return blob.get(pos++);
+			return blob.get(pos++) & 0xff;
 		}
 	}
 }

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -320,15 +320,14 @@ public void run () {
 	@Override
 	public void debug (String tag, String message) {
 		if (logLevel >= LOG_DEBUG) {
-			System.out.println(tag + ": " + message);
+			Log.d(tag, message);
 		}
 	}
 	
 	@Override
 	public void debug (String tag, String message, Throwable exception) {
 		if (logLevel >= LOG_DEBUG) {
-			System.out.println(tag + ": " + message);
-			exception.printStackTrace(System.out);
+			Log.d(tag, message, exception);
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/utils/LongMap.java
Patch:
@@ -75,7 +75,7 @@ public LongMap (int initialCapacity, float loadFactor) {
 
 		threshold = (int)(capacity * loadFactor);
 		mask = capacity - 1;
-		hashShift = 31 - Integer.numberOfTrailingZeros(capacity);
+		hashShift = 63 - Long.numberOfTrailingZeros(capacity);
 		stashCapacity = Math.max(3, (int)Math.ceil(Math.log(capacity)) + 1);
 		pushIterations = Math.max(Math.min(capacity, 32), (int)Math.sqrt(capacity) / 4);
 
@@ -466,7 +466,7 @@ private void resize (int newSize) {
 		capacity = newSize;
 		threshold = (int)(newSize * loadFactor);
 		mask = newSize - 1;
-		hashShift = 31 - Integer.numberOfTrailingZeros(newSize);
+		hashShift = 63 - Long.numberOfTrailingZeros(newSize);
 		stashCapacity = Math.max(3, (int)Math.ceil(Math.log(newSize)));
 		pushIterations = Math.max(Math.min(capacity, 32), (int)Math.sqrt(capacity) / 4);
 

File: gdx/src/com/badlogic/gdx/utils/GdxNativesLoader.java
Patch:
@@ -32,7 +32,7 @@ public class GdxNativesLoader {
 	static public boolean isLinux = System.getProperty("os.name").contains("Linux");
 	static public boolean isMac = System.getProperty("os.name").contains("Mac");
 	static public boolean is64Bit = System.getProperty("os.arch").equals("amd64");
-	static public File nativesDir = new File(System.getProperty("java.io.tmpdir") + "/libgdx/" + crc("gdx.dll"));
+	static public File nativesDir = new File(System.getProperty("java.io.tmpdir") + "/libgdx" + System.getProperty("user.name") + "/" + crc("gdx.dll"));
 	static public String path;
 
 	static private String crc (String nativeFile) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/NinePatch.java
Patch:
@@ -142,14 +142,14 @@ private void checkValidity () {
 		if ((patches[BOTTOM_LEFT] != null && patches[BOTTOM_LEFT].getRegionHeight() != bottomHeight)
 			|| (patches[BOTTOM_CENTER] != null && patches[BOTTOM_CENTER].getRegionHeight() != bottomHeight)
 			|| (patches[BOTTOM_RIGHT] != null && patches[BOTTOM_RIGHT].getRegionHeight() != bottomHeight)) {
-			throw new GdxRuntimeException("Right side patches must have the same width");
+			throw new GdxRuntimeException("Bottom side patches must have the same height");
 		}
 
 		float topHeight = getTopHeight();
 		if ((patches[TOP_LEFT] != null && patches[TOP_LEFT].getRegionHeight() != topHeight)
 			|| (patches[TOP_CENTER] != null && patches[TOP_CENTER].getRegionHeight() != topHeight)
 			|| (patches[TOP_RIGHT] != null && patches[TOP_RIGHT].getRegionHeight() != topHeight)) {
-			throw new GdxRuntimeException("Right side patches must have the same width");
+			throw new GdxRuntimeException("Top side patches must have the same height");
 		}
 	}
 

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreetypeBuild.java
Patch:
@@ -103,6 +103,7 @@ public static void main (String[] args) throws Exception {
 		mac.cIncludes = sources;
 		mac.cFlags += " -std=c99 -DFT2_BUILD_LIBRARY";
 		mac.cppFlags += " -std=c99 -DFT2_BUILD_LIBRARY";
+		mac.linkerFlags += " -framework CoreServices -framework Carbon";
 		
 		BuildTarget android = BuildTarget.newDefaultTarget(TargetOs.Android, false);
 		android.headerDirs = headers;
@@ -113,7 +114,7 @@ public static void main (String[] args) throws Exception {
 		new NativeCodeGenerator().generate();
 		new AntScriptGenerator().generate(new BuildConfig("gdx-freetype"), win32home, win32, win64, lin32, lin64, mac, android);
 //		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v clean");
-		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
+//		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
 		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
 	}
 }

File: extensions/gdx-image/src/com/badlogic/gdx/graphics/g2d/ImageBuild.java
Patch:
@@ -56,7 +56,7 @@ public static void main (String[] args) throws Exception {
 		new AntScriptGenerator().generate(new BuildConfig("gdx-image"), win32home, android, win32, win64, lin32, lin64, mac);
 
 		// build natives
-		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
+//		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
 		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
 	}
 }

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/Preloader.java
Patch:
@@ -38,7 +38,7 @@ public Asset(String url, AssetType type) {
 	public final String baseUrl;
 	
 	public Preloader() {
-		baseUrl = GWT.getModuleBaseURL().replace(GWT.getModuleName() + "/", "");
+		baseUrl = GWT.getModuleBaseURL().replace(GWT.getModuleName() + "/", "") + "assets/";
 		// trigger copying of assets creation of assets.txt
 		GWT.create(PreloaderBundle.class);
 	}

File: demos/vector-pinball/gdx-vectorpinball-html5/src/com/dozingcatsoftware/bouncy/client/BouncyGwt.java
Patch:
@@ -16,5 +16,4 @@ public GwtApplicationConfiguration getConfig () {
 	public ApplicationListener getApplicationListener () {
 		return new Bouncy();
 	}
-
 }

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -309,7 +309,7 @@ public void render (int primitiveType) {
 	 * @param count number of vertices or indices to use */
 	public void render (int primitiveType, int offset, int count) {
 		if (Gdx.graphics.isGL20Available()) throw new IllegalStateException("can't use this render method with OpenGL ES 2.0");
-
+		if (count == 0) return;
 		if (autoBind) bind();
 
 		if (isVertexArray) {
@@ -382,7 +382,8 @@ public void render (ShaderProgram shader, int primitiveType) {
 	 * @param count number of vertices or indices to use */
 	public void render (ShaderProgram shader, int primitiveType, int offset, int count) {
 		if (!Gdx.graphics.isGL20Available()) throw new IllegalStateException("can't use this render method with OpenGL ES 1.x");
-
+		if(count == 0) return;
+		
 		if (autoBind) bind(shader);
 
 		if (isVertexArray) {

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/experimental/PerspectiveCamController.java
Patch:
@@ -51,14 +51,14 @@ else if (angleY < -NINETY_DEGREE)
 		cam.direction.x = MathUtils.cosDeg(angleX) * cos;
 		cam.direction.y = MathUtils.sinDeg(angleY) * 1f;
 		cam.direction.z = MathUtils.sinDeg(angleX) * cos;
-		cam.update(false);
+		cam.update();
 		return true;
 	}
 
 	@Override
 	public boolean scrolled(int amount) {
 		cam.fieldOfView -= -amount * 0.1f;
-		cam.update(false);
+		cam.update();
 		return true;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/ImmediateModeRenderer20.java
Patch:
@@ -128,6 +128,7 @@ public void vertex (float x, float y, float z) {
 	}
 
 	public void end () {
+		if(numVertices == 0) return;
 		shader.begin();
 		shader.setUniformMatrix("u_projModelView", projModelView);
 		for (int i = 0; i < numTexCoords; i++)

File: gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
Patch:
@@ -405,7 +405,7 @@ public float[] getVertices () {
 	}
 
 	/** Returns the bounding axis aligned {@link Rectangle} that bounds this sprite. The rectangles x and y coordinates describe its
-	 * bottom left corner.
+	 * bottom left corner. If you change the position or size of the sprite, you have to fetch the triangle again for it to be recomputed.
 	 * 
 	 * @return the bounding Rectangle */
 	public Rectangle getBoundingRectangle () {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -24,6 +24,7 @@
 import com.badlogic.gdx.assets.loaders.FileHandleResolver;
 import com.badlogic.gdx.assets.loaders.MusicLoader;
 import com.badlogic.gdx.assets.loaders.PixmapLoader;
+import com.badlogic.gdx.assets.loaders.SkinLoader;
 import com.badlogic.gdx.assets.loaders.SoundLoader;
 import com.badlogic.gdx.assets.loaders.TextureAtlasLoader;
 import com.badlogic.gdx.assets.loaders.TextureLoader;
@@ -34,6 +35,7 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas;
+import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
@@ -66,7 +68,7 @@ public AssetManager (FileHandleResolver resolver) {
 		setLoader(Sound.class, new SoundLoader(resolver));
 		setLoader(TextureAtlas.class, new TextureAtlasLoader(resolver));
 		setLoader(Texture.class, new TextureLoader(resolver));
-//		setLoader(Skin.class, new SkinLoader(resolver));
+		setLoader(Skin.class, new SkinLoader(resolver));
 //		setLoader(TileMapRenderer.class, new TileMapRendererLoader(resolver));
 	}
 
@@ -95,7 +97,6 @@ public synchronized void unload (String fileName) {
 			}
 		}
 		if (foundIndex != -1) {
-			// FIXME reload request? OH GOD WHAT SHOULD I DO?
 			loadQueue.remove(foundIndex);
 //			log.debug("Unload (from queue): " + fileName);
 			return;
@@ -104,7 +105,6 @@ public synchronized void unload (String fileName) {
 		// check if it's currently processed (and the first element in the stack, thus not a dependency)
 		// and cancel if necessary
 		if (tasks.size() > 0) {
-			// FIXME reload request? OH GOD WHAT SHOULD I DO?
 			AssetLoadingTask currAsset = tasks.firstElement();
 			if (currAsset.assetDesc.fileName.equals(fileName)) {
 				currAsset.cancel = true;

File: gdx/src/com/badlogic/gdx/utils/GwtModuleGenerator.java
Patch:
@@ -53,9 +53,6 @@ public static void main (String[] args) throws IOException {
 		excludes.add("ETC1TextureData.java");
 		excludes.add("ScreenUtils.java");
 
-		// asset manager related
-		excludes.add("SkinLoader.java");
-		
 		// remote input
 		excludes.add("RemoteInput.java");
 		excludes.add("RemoteSender.java");

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -92,6 +92,8 @@ public void onModuleLoad () {
 				root = panel;
 			}
 		}
+		// creating audio here so it can load while we load the resources.
+		Gdx.audio = new GwtAudio();
 
 		final PreloaderCallback callback = getPreloaderCallback();
 		preloader = new Preloader();
@@ -133,7 +135,6 @@ private void setupLoop () {
 		Gdx.files = new GwtFiles(preloader);
 		this.input = new GwtInput(graphics.canvas);
 		Gdx.input = this.input;
-		Gdx.audio = new GwtAudio();
 
 		// tell listener about app creation
 		try {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -37,6 +37,7 @@
 import com.badlogic.gdx.tests.PixelsPerInchTest;
 import com.badlogic.gdx.tests.PixmapBlendingTest;
 import com.badlogic.gdx.tests.ShaderMultitextureTest;
+import com.badlogic.gdx.tests.SoundTest;
 import com.badlogic.gdx.tests.SpriteBatchShaderTest;
 import com.badlogic.gdx.tests.SpriteCacheOffsetTest;
 import com.badlogic.gdx.tests.VertexBufferObjectShaderTest;
@@ -54,7 +55,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 		
-		GdxTest test = new GwtTestWrapper();
+		GdxTest test = new SoundTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 800;
 		config.height = 480;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -43,7 +43,7 @@ public class SoundTest extends GdxTest {
 
 	@Override
 	public void create () {
-		sound = Gdx.audio.newSound(Gdx.files.getFileHandle("data/shotgun.wav", FileType.Internal));
+		sound = Gdx.audio.newSound(Gdx.files.getFileHandle("data/shotgun.mp3", FileType.Internal));
 
 		skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
 		ui = new Stage(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/nio/ByteBuffer.java
Patch:
@@ -55,7 +55,7 @@ public static ByteBuffer allocateDirect (int capacity) {
 		if (capacity < 0) {
 			throw new IllegalArgumentException();
 		}
-		return BufferFactory.newByteBuffer(capacity);
+		return BufferFactory.newDirectByteBuffer(capacity);
 	}
 
 	/** Creates a new byte buffer by wrapping the given byte array.

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/nio/DirectReadWriteByteBuffer.java
Patch:
@@ -26,7 +26,7 @@
  * <p>
  * This class is marked final for runtime performance.
  * </p> */
-final class DirectReadWriteByteBuffer extends DirectByteBuffer {
+public final class DirectReadWriteByteBuffer extends DirectByteBuffer {
 
 	static DirectReadWriteByteBuffer copy (DirectByteBuffer other, int markOfOther) {
 		DirectReadWriteByteBuffer buf = new DirectReadWriteByteBuffer(other.byteArray.getBuffer(), other.capacity(),
@@ -42,7 +42,7 @@ static DirectReadWriteByteBuffer copy (DirectByteBuffer other, int markOfOther)
 		super(backingArray);
 	}
 
-	DirectReadWriteByteBuffer (int capacity) {
+	public DirectReadWriteByteBuffer (int capacity) {
 		super(capacity);
 	}
 

File: backends/gdx-backends-gwt/src/com/google/gwt/typedarrays/client/ArrayBuffer.java
Patch:
@@ -30,7 +30,7 @@ public class ArrayBuffer extends JavaScriptObject {
    * ArrayBuffer are initialized to 0.
    */
   public static final native ArrayBuffer create(int length) /*-{
-    return new WebGLArrayBuffer(length);
+    return new ArrayBuffer(length);
   }-*/;
 
   protected ArrayBuffer() {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20.java
Patch:
@@ -82,7 +82,7 @@ public Float32Array copy(FloatBuffer buffer) {
 		for(int i = buffer.position(), j = 0; i < buffer.limit(); i++, j++) {
 			floatBuffer.set(j, array[i]);
 		}
-		return floatBuffer;
+		return floatBuffer.subarray(0, buffer.remaining());
 	}
 	
 	public Uint16Array copy(ShortBuffer buffer) {
@@ -91,7 +91,7 @@ public Uint16Array copy(ShortBuffer buffer) {
 		for(int i = buffer.position(), j = 0; i < buffer.limit(); i++, j++) {
 			shortBuffer.set(j, array[i]);
 		}
-		return shortBuffer;
+		return shortBuffer.subarray(0,  buffer.remaining());
 	}
 	
 	private int allocateUniformLocationId(int program, WebGLUniformLocation location) {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -10,9 +10,10 @@
 import com.badlogic.gdx.graphics.glutils.FileTextureData;
 import com.badlogic.gdx.graphics.glutils.PixmapTextureData;
 import com.badlogic.gdx.utils.BufferUtils;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
-public class Texture {
+public class Texture implements Disposable {
 	static IntBuffer buffer = BufferUtils.newIntBuffer(1);
 	
 	public enum TextureFilter {

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/AntScriptGenerator.java
Patch:
@@ -99,7 +99,9 @@ public void generate(BuildConfig config, BuildTarget ... targets) {
 		for(int i = 0; i < buildFiles.size(); i++) {
 			clean.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\" target=\"clean\"/>\n");
 			compile.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\"/>\n");
-			pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" includes=\"" + sharedLibFiles.get(i) + "\"/>");
+		}
+		for(int i = 0; i < libsDirs.size(); i++ ) {
+			pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" includes=\"" + sharedLibFiles.get(i) + "\"/>\n");
 		}
 		
 		template = template.replace("%projectName%", config.sharedLibName + "-natives");

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -110,7 +110,7 @@ public File file () {
 	 * @throw GdxRuntimeException if the file handle represents a directory, doesn't exist, or could not be read. */
 	public InputStream read () {
 		if (type == FileType.Classpath || (type == FileType.Internal && !file.exists()) || (type == FileType.Local && !file.exists())) {
-			InputStream input = FileHandle.class.getResourceAsStream("/" + file.getPath().replace('\\', '/'));
+			InputStream input = Thread.currentThread().getContextClassLoader().getResourceAsStream("/" + file.getPath().replace('\\', '/'));
 			if (input == null) throw new GdxRuntimeException("File not found: " + file + " (" + type + ")");
 			return input;
 		}
@@ -479,7 +479,7 @@ public boolean exists () {
 			if (file.exists()) return true;
 			// Fall through.
 		case Classpath:
-			return FileHandle.class.getResource("/" + file.getPath().replace('\\', '/')) != null;
+			return Thread.currentThread().getContextClassLoader().getResource("/" + file.getPath().replace('\\', '/')) != null;
 		}
 		return file().exists();
 	}

File: backends/gdx-backends-gwt/src/com/badlogic/gwtref/gen/ReflectionCacheSourceCreator.java
Patch:
@@ -203,6 +203,7 @@ private void gatherTypes(JType type, Set<JType> types) {
 			  name.contains("com.badlogic.gdx.utils.Array") ||
 			  name.contains("com.badlogic.gdx.utils.ObjectMap") ||
 			  name.contains("com.badlogic.gdx.utils.OrderedMap") ||
+			  name.contains("com.badlogic.gdx.utils.Disposable") ||
 			  name.contains("java.util.ArrayList") ||
 			  name.contains("java.util.Map") ||
 			  name.contains("java.util.HashMap") ||

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gwt/GwtTestWrapper.java
Patch:
@@ -415,7 +415,7 @@ interface Instancer {
 		new Instancer() {public GdxTest instance(){return new ProjectiveTextureTest();}},
 		new Instancer() {public GdxTest instance(){return new RotationTest();}},
 //		new Instancer() {public GdxTest instance(){return new ScrollPaneTest();}}, // FIXME this messes up stuff, why?
-		new Instancer() {public GdxTest instance(){return new ShaderMultitextureTest();}},
+//		new Instancer() {public GdxTest instance(){return new ShaderMultitextureTest();}}, // FIXME fucks up stuff
 		new Instancer() {public GdxTest instance(){return new ShadowMappingTest();}},
 		new Instancer() {public GdxTest instance(){return new ShapeRendererTest();}},
 		new Instancer() {public GdxTest instance(){return new SimpleAnimationTest();}},
@@ -427,7 +427,7 @@ interface Instancer {
 		new Instancer() {public GdxTest instance(){return new SpriteCacheTest();}},
 		new Instancer() {public GdxTest instance(){return new SoundTest();}},
 		new Instancer() {public GdxTest instance(){return new StageTest();}},
-		new Instancer() {public GdxTest instance(){return new StagePerformanceTest();}},
+//		new Instancer() {public GdxTest instance(){return new StagePerformanceTest();}}, // FIXME borks out
 		new Instancer() {public GdxTest instance(){return new TableTest();}},
 		new Instancer() {public GdxTest instance(){return new TextButtonTest();}},
 		new Instancer() {public GdxTest instance(){return new TextButtonTestGL2();}},

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -41,6 +41,7 @@
 import com.badlogic.gdx.tests.SpriteCacheOffsetTest;
 import com.badlogic.gdx.tests.VertexBufferObjectShaderTest;
 import com.badlogic.gdx.tests.gwt.GwtBinaryTest;
+import com.badlogic.gdx.tests.gwt.GwtTestWrapper;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
@@ -53,11 +54,11 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 		
-		GdxTest test = new Box2DTestCollection();
+		GdxTest test = new GwtTestWrapper();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 800;
 		config.height = 480;
-		config.useGL20 = true;
+		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;
 		config.resizable = true;
 		new LwjglApplication(test, config);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AlphaTest.java
Patch:
@@ -43,8 +43,7 @@ public void create () {
 
 	@Override
 	public void render () {
-		Gdx.graphics.getGL10().glClear(GL10.GL_COLOR_BUFFER_BIT);
-
+		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		batch.begin();
 		batch.draw(texture, 0, 0, 256, 256, 0, 0, 256, 256, false, false);
 		batch.end();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/IndexBufferObjectShaderTest.java
Patch:
@@ -42,6 +42,7 @@ public boolean needsGL20 () {
 	public void dispose () {
 		texture.dispose();
 		shader.dispose();
+		vbo.dispose();
 		ibo.dispose();
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VertexBufferObjectShaderTest.java
Patch:
@@ -45,6 +45,7 @@ public boolean needsGL20 () {
 	public void dispose () {
 		texture.dispose();
 		vbo.dispose();
+		indices.dispose();
 		shader.dispose();
 	}
 
@@ -90,7 +91,7 @@ public void create () {
 
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
 	}
-
+	
 	@Override
 	public void resume () {
 		vbo.invalidate();

File: tests/gdx-tests-gwt/src/com/badlogic/gdx/tests/gwt/client/GwtTestStarter.java
Patch:
@@ -41,6 +41,7 @@
 import com.badlogic.gdx.tests.SpriteCacheOffsetTest;
 import com.badlogic.gdx.tests.SpriteCacheTest;
 import com.badlogic.gdx.tests.TextureAtlasTest;
+import com.badlogic.gdx.tests.UITest;
 import com.badlogic.gdx.tests.VertexBufferObjectShaderTest;
 import com.badlogic.gdx.tests.YDownTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -84,6 +85,7 @@ public class GwtTestStarter extends GwtApplication {
 		new SpriteCacheOffsetTest(),
 		new SpriteCacheTest(),
 		new TextureAtlasTest(),
+		new UITest(),
 		new VertexBufferObjectShaderTest(),
 		new YDownTest()
 	};
@@ -95,6 +97,6 @@ public GwtApplicationConfiguration getConfig () {
 
 	@Override
 	public ApplicationListener getApplicationListener () {
-		return new Box2DTest();
+		return new UITest();
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StageTest.java
Patch:
@@ -126,7 +126,6 @@ public boolean touchDown (float x, float y, int pointer) {
 		fps.color.set(0, 1, 0, 1);
 		ui.addActor(fps);
 
-		Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
 		renderer = new ImmediateModeRenderer10();
 		Gdx.input.setInputProcessor(this);
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -884,7 +884,7 @@ static float readFloat (BufferedReader reader, String name) throws IOException {
 		return Float.parseFloat(readString(reader, name));
 	}
 
-	static protected class Particle extends Sprite {
+	static class Particle extends Sprite {
 		int life, currentLife;
 		float scale, scaleDiff;
 		float rotation, rotationDiff;

File: gdx/src/com/badlogic/gdx/utils/GdxBuild.java
Patch:
@@ -69,7 +69,7 @@ public static void main(String[] args) throws Exception {
 		new AntScriptGenerator().generate(new BuildConfig("gdx", "../target/native", LIBS_DIR, JNI_DIR), mac, win32home, win32, win64, lin32, lin64, android);
 		
 		// build natives
-		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
-		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
+//		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
+//		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
 	}
 }

File: gdx/src/com/badlogic/gdx/utils/GwtModuleGenerator.java
Patch:
@@ -68,8 +68,8 @@ public static void main (String[] args) throws IOException {
 		excludes.add("AtomicQueue.java");
 		excludes.add("LittleEndianInputStream.java");
 		excludes.add("PauseableThread.java");
-		excludes.add("Json.java");
-		excludes.add("JsonWriter.java");
+//		excludes.add("Json.java");
+//		excludes.add("JsonWriter.java");
 		
 		// scene2d ui package
 		gatherJavaFiles(new FileHandle("src/com/badlogic/gdx/scenes/scene2d/ui"), excludes, excludesHandles, true);

File: gdx/src/com/badlogic/gdx/graphics/g2d/Gdx2DPixmap.java
Patch:
@@ -239,7 +239,7 @@ public String getFormatString () {
 	
 	private static native ByteBuffer load (long[] nativeData, byte[] buffer, int offset, int len, int requestedFormat); /*MANUAL	
 		const unsigned char* p_buffer = (const unsigned char*)env->GetPrimitiveArrayCritical(buffer, 0);
-		gdx2d_pixmap* pixmap = gdx2d_load(p_buffer, len, requestedFormat);
+		gdx2d_pixmap* pixmap = gdx2d_load(p_buffer + offset, len, requestedFormat);
 		env->ReleasePrimitiveArrayCritical(buffer, (char*)p_buffer, 0);
 	
 		if(pixmap==0)

File: demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/BouncyDesktop.java
Patch:
@@ -5,6 +5,6 @@
 
 public class BouncyDesktop {
 	public static void main (String[] argv) {
-		new JoglApplication(new Bouncy(), "Bouncy", 320, 480, false);
+		new JoglApplication(new Bouncy(), "Bouncy", 320, 480, true);
 	}
 }

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/materials/ColorAttribute.java
Patch:
@@ -22,11 +22,12 @@
 
 public class ColorAttribute extends MaterialAttribute {
 
+	//TODO need to be more generic. type's are just WIP 
 	public enum ColorType {
 		DIFFUSE, SPECULAR, EMISSIVE
 	};
 
-	static final private String[] shaderFlag = {"diffuseCol", "specularCol", "emissiveCol"};
+	static final private String[] shaderFlag = {"diffuseColor", "specularColor", "emissiveColor"};
 	
 	static final private String[] colorNames = {"diffuseCol", "specularCol", "emissiveCol"};	
 

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/materials/TextureAttribute.java
Patch:
@@ -25,8 +25,6 @@
 
 public class TextureAttribute extends MaterialAttribute {
 	
-	static final private String[] shaderFlag = {"diffuseCol", "specularCol", "emissiveCol"};
-
 	public Texture texture;
 	public int unit;
 	public int minFilter;

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/PrototypeRendererGL20.java
Patch:
@@ -31,7 +31,7 @@
 
 public class PrototypeRendererGL20 implements ModelRenderer {
 
-	static final int SIZE = 128;// TODO better way
+	static final int SIZE = 256;// TODO better way
 	final private Array<Model> modelQueue = new Array<Model>(false, SIZE,
 			Model.class);
 	final private Array<StillModelInstance> stillModelInstances = new Array<StillModelInstance>(
@@ -70,7 +70,7 @@ public void begin() {
 
 	@Override
 	public void draw(StillModel model, StillModelInstance instance) {
-		// add render queue
+		// add to render queue
 		modelQueue.add(model);
 		stillModelInstances.add(instance);
 	}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -221,7 +221,6 @@ protected void onResume () {
 		Gdx.graphics = this.getGraphics();
 
 		((AndroidInput)getInput()).registerSensorListeners();
-		if (audio != null) audio.resume();
 
 		if (graphics != null && graphics.view != null) {
 			if (graphics.view instanceof GLSurfaceViewCupcake) ((GLSurfaceViewCupcake)graphics.view).onResume();

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -428,6 +428,7 @@ public void onDrawFrame (javax.microedition.khronos.opengles.GL10 gl) {
 		}
 
 		if (lresume) {
+			((AndroidApplication)app).audio.resume();
 			app.listener.resume();
 			Gdx.app.log("AndroidGraphics", "resumed");
 		}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtInput.java
Patch:
@@ -110,7 +110,6 @@ public boolean isTouched (int pointer) {
 
 	@Override
 	public boolean isButtonPressed (int button) {
-		// FIXME
 		return button == Buttons.LEFT && touched;
 	}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/physics/box2d/ChainShape.java
Patch:
@@ -9,10 +9,12 @@ public class ChainShape extends Shape {
 	org.jbox2d.collision.shapes.ChainShape shape;
 	
 	public ChainShape () {
-		shape = new org.jbox2d.collision.shapes.ChainShape();
+		super(new org.jbox2d.collision.shapes.ChainShape());
+		shape = (org.jbox2d.collision.shapes.ChainShape)super.shape;
 	}
 	
 	ChainShape(org.jbox2d.collision.shapes.ChainShape shape) {
+		super(shape);
 		this.shape = shape;
 	}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/physics/box2d/CircleShape.java
Patch:
@@ -24,10 +24,12 @@ public class CircleShape extends Shape {
 	org.jbox2d.collision.shapes.CircleShape shape;
 	
 	public CircleShape () {
-		shape = new org.jbox2d.collision.shapes.CircleShape();
+		super(new org.jbox2d.collision.shapes.CircleShape());
+		shape = (org.jbox2d.collision.shapes.CircleShape)super.shape;
 	}
 	
 	CircleShape(org.jbox2d.collision.shapes.CircleShape shape) {
+		super(shape);
 		this.shape = shape;
 	}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/physics/box2d/EdgeShape.java
Patch:
@@ -11,10 +11,12 @@ public class EdgeShape extends Shape {
 	org.jbox2d.collision.shapes.EdgeShape shape;
 	
 	public EdgeShape () {
-		shape = new org.jbox2d.collision.shapes.EdgeShape();
+		super(new org.jbox2d.collision.shapes.EdgeShape());
+		shape = (org.jbox2d.collision.shapes.EdgeShape)super.shape;
 	}
 
 	public EdgeShape (org.jbox2d.collision.shapes.EdgeShape shape) {
+		super(shape);
 		this.shape = shape;
 	}
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/physics/box2d/JointDef.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.badlogic.gdx.physics.box2d;
 
-public class JointDef {
+public abstract class JointDef {
 	public enum JointType {
 		Unknown(0), RevoluteJoint(1), PrismaticJoint(2), DistanceJoint(3), PulleyJoint(4), MouseJoint(5), GearJoint(6), WheelJoint(
 			7), WeldJoint(8), FrictionJoint(9), RopeJoint(10);
@@ -45,4 +45,6 @@ public int getValue () {
 
 	/** Set this flag to true if the attached bodies should collide. **/
 	public boolean collideConnected = false;
+	
+	public abstract org.jbox2d.dynamics.joints.JointDef toJBox2d();
 }

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/physics/box2d/PolygonShape.java
Patch:
@@ -25,10 +25,12 @@ public class PolygonShape extends Shape {
 	
 	/** Constructs a new polygon */
 	public PolygonShape () {
-		shape = new org.jbox2d.collision.shapes.PolygonShape();
+		super(new org.jbox2d.collision.shapes.PolygonShape());
+		shape = (org.jbox2d.collision.shapes.PolygonShape)super.shape;
 	}
 
 	public PolygonShape (org.jbox2d.collision.shapes.PolygonShape shape) {
+		super(shape);
 		this.shape = shape;
 	}
 

File: gdx/src/com/badlogic/gdx/utils/GwtModuleGenerator.java
Patch:
@@ -54,7 +54,6 @@ public static void main (String[] args) throws IOException {
 		excludes.add("ScreenUtils.java");
 
 		// asset manager related
-		excludes.add("ResolutionFileResolver.java"); // FIXME
 		excludes.add("SkinLoader.java");
 		
 		// remote input

File: tests/gdx-tests-gwt/src/com/badlogic/gdx/tests/gwt/client/GwtTestStarter.java
Patch:
@@ -12,6 +12,7 @@
 import com.badlogic.gdx.tests.BitmapFontFlipTest;
 import com.badlogic.gdx.tests.BitmapFontTest;
 import com.badlogic.gdx.tests.BlitTest;
+import com.badlogic.gdx.tests.Box2DTest;
 import com.badlogic.gdx.tests.CustomShaderSpriteBatchTest;
 import com.badlogic.gdx.tests.DecalTest;
 import com.badlogic.gdx.tests.EdgeDetectionTest;
@@ -94,6 +95,6 @@ public GwtApplicationConfiguration getConfig () {
 
 	@Override
 	public ApplicationListener getApplicationListener () {
-		return new AssetManagerTest();
+		return new Box2DTest();
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,6 +21,7 @@
 import com.badlogic.gdx.tests.AssetManagerTest;
 import com.badlogic.gdx.tests.AtlasIssueTest;
 import com.badlogic.gdx.tests.BitmapFontAlignmentTest;
+import com.badlogic.gdx.tests.Box2DTest;
 import com.badlogic.gdx.tests.CustomShaderSpriteBatchTest;
 import com.badlogic.gdx.tests.DecalTest;
 import com.badlogic.gdx.tests.MeshShaderTest;
@@ -44,7 +45,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 		
-		GdxTest test = new AssetManagerTest();
+		GdxTest test = new Box2DTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 800;
 		config.height = 480;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGraphics.java
Patch:
@@ -236,7 +236,7 @@ public boolean setDisplayMode (int width, int height, boolean fullscreen) {
 
 	@Override
 	public BufferFormat getBufferFormat () {
-		return new BufferFormat(8, 8, 8, 0, 16, config.stencil?8:0, 0, false); // FIXME
+		return new BufferFormat(8, 8, 8, 0, 16, config.stencil?8:0, 0, false);
 	}
 
 	@Override

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -222,6 +222,6 @@ public void dispose () {
 	}
 	
 	public static void setAssetManager(AssetManager manager) {
-		// FIXME well not really, no pause/resume cycle
+		// nothing to do, no pause/resume cycle
 	}
 }

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/org/jbox2d/common/Settings.java
Patch:
@@ -134,7 +134,7 @@ public class Settings {
    * A velocity threshold for elastic collisions. Any collision with a relative linear velocity
    * below this threshold will be treated as inelastic.
    */
-  public static final float velocityThreshold = 1.0f;
+  public static float velocityThreshold = 1.0f;
 
   /**
    * The maximum linear position correction used when solving constraints. This helps to prevent

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DCharacterControllerTest.java
Patch:
@@ -6,7 +6,6 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.Input.Keys;
-import com.badlogic.gdx.InputAdapter;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
@@ -26,6 +25,7 @@
 import com.badlogic.gdx.physics.box2d.WorldManifold;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.TimeUtils;
 
 public class Box2DCharacterControllerTest extends GdxTest implements ApplicationListener {
 	 
@@ -168,9 +168,9 @@ public void render() {
 		Vector2 pos = player.getPosition();		
 		boolean grounded = isPlayerGrounded(Gdx.graphics.getDeltaTime());
 		if(grounded) {
-			lastGroundTime = System.nanoTime();
+			lastGroundTime = TimeUtils.nanoTime();
 		} else {
-			if(System.nanoTime() - lastGroundTime < 100000000) {
+			if(TimeUtils.nanoTime() - lastGroundTime < 100000000) {
 				grounded = true;
 			}
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
Patch:
@@ -49,6 +49,7 @@
 import com.badlogic.gdx.physics.box2d.joints.MouseJoint;
 import com.badlogic.gdx.physics.box2d.joints.MouseJointDef;
 import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.utils.TimeUtils;
 
 public class Box2DTest extends GdxTest implements InputProcessor {
 	/** the camera **/
@@ -228,9 +229,9 @@ public void render () {
 		// we use the delta time provided by the Graphics
 		// instance. Normally you'll want to fix the time
 		// step.
-		long start = System.nanoTime();
+		long start = TimeUtils.nanoTime();
 		world.step(Gdx.graphics.getDeltaTime(), 8, 3);
-		float updateTime = (System.nanoTime() - start) / 1000000000.0f;
+		float updateTime = (TimeUtils.nanoTime() - start) / 1000000000.0f;
 
 		// next we clear the color buffer and set the camera
 		// matrices

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/experimental/PerspectiveCamController.java
Patch:
@@ -124,7 +124,6 @@ void update(float delta) {
 			cam.position.y -= delta * cam.direction.y;
 			cam.position.z -= delta * cam.direction.z;
 		}
-
 		cam.update();
 
 	}

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/lights/LightManager.java
Patch:
@@ -116,7 +116,7 @@ public void applyGlobalLights () {
 
 	public void applyGlobalLights (ShaderProgram shader) {
 		shader.setUniformf("ambient", ambientLight.r, ambientLight.g, ambientLight.b);
-		if (dirLight != null) {
+		if (dirLight != null) {			
 			final Vector3 v = dirLight.direction;
 			final Color c = dirLight.color;
 			shader.setUniformf("dirLightDir", v.x, v.y, v.z);

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/PrototypeRendererGL20.java
Patch:
@@ -118,7 +118,7 @@ public void end() {
 	private void flush() {
 		drawing = false;
 
-		lightManager.applyGlobalLights(shader);
+		
 
 		// frustum culling via cullingManager
 
@@ -138,6 +138,8 @@ private void flush() {
 
 		// sort opaque meshes from front to end, perfect accuracy is not needed
 		shader.begin();
+		
+		lightManager.applyGlobalLights(shader);
 		// find N nearest lights per model
 		// draw all models from opaque queue
 		for (int i = 0; i < modelQueue.size; i++) {

File: gdx/src/com/badlogic/gdx/assets/AssetLoadingTask.java
Patch:
@@ -26,6 +26,7 @@
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.Logger;
+import com.badlogic.gdx.utils.TimeUtils;
 
 /** Responsible for loading an asset through an {@link AssetLoader} based on an {@link AssetDescriptor}. Implements
  * {@link Callable} and is used with an {@link ExecutorService threadpool} to load parts of an asset asynchronously if the asset is
@@ -55,7 +56,7 @@ public AssetLoadingTask (AssetManager manager, AssetDescriptor assetDesc, AssetL
 		this.assetDesc = assetDesc;
 		this.loader = loader;
 		this.threadPool = threadPool;
-		startTime = manager.log.getLevel() == Logger.DEBUG ? System.nanoTime() : 0;
+		startTime = manager.log.getLevel() == Logger.DEBUG ? TimeUtils.nanoTime() : 0;
 	}
 
 	/** Loads parts of the asset asynchronously if the loader is an {@link AsynchronousAssetLoader}. */

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -48,6 +48,7 @@
 import com.badlogic.gdx.utils.Logger;
 import com.badlogic.gdx.utils.ObjectIntMap;
 import com.badlogic.gdx.utils.ObjectMap;
+import com.badlogic.gdx.utils.TimeUtils;
 
 public class AssetManager implements Disposable {
 	final ObjectMap<Class, ObjectMap<String, RefCountedContainer>> assets = new ObjectMap<Class, ObjectMap<String, RefCountedContainer>>();
@@ -389,7 +390,7 @@ private boolean updateTask () {
 					task.assetDesc.params.loadedCallback.finishedLoading(this, task.assetDesc.fileName, task.assetDesc.type);
 				}
 
-				long endTime = System.nanoTime();
+				long endTime = TimeUtils.nanoTime();
 				log.debug("Loaded: " + (endTime - task.startTime) / 1000000f + "ms " + task.assetDesc);
 			}
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md5/MD5Jni.java
Patch:
@@ -20,7 +20,7 @@
 
 public class MD5Jni {
 	public static native void calculateVertices (float[] joints, float[] weights, float[] verticesIn, float[] verticesOut,
-		int numVertices, int vstride, int wstride); /*
+		int numVertices, int vstride, int wstride)/*-{ }-*/; /*
 		for (int vertexOffset = 2, k = 0; vertexOffset < numVertices; vertexOffset += vstride) {
 			float finalX = 0;
 			float finalY = 0;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -183,7 +183,7 @@ public void clearActions () {
 
 	@Override
 	public String toString () {
-		String name = this.name != null ? this.name : getClass().getSimpleName();
+		String name = this.name != null ? this.name : getClass().getName();
 		if (name.equals("")) name = getClass().getName();
 		return name + " pos=" + x + "," + y + " origin=" + originX + "," + originY + " size=" + width + "," + height;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -32,6 +32,7 @@
 import com.badlogic.gdx.scenes.scene2d.Group;
 import com.badlogic.gdx.scenes.scene2d.ui.utils.Clipboard;
 import com.badlogic.gdx.utils.FloatArray;
+import com.badlogic.gdx.utils.TimeUtils;
 
 /** A single-line text input field.
  * <p>
@@ -257,7 +258,7 @@ private void updateDisplayText () {
 	}
 
 	private void blink () {
-		long time = System.nanoTime();
+		long time = TimeUtils.nanoTime();
 		if ((time - lastBlink) / 1000000000.0f > blinkTime) {
 			cursorOn = !cursorOn;
 			lastBlink = time;

File: gdx/src/com/badlogic/gdx/utils/Base64Coder.java
Patch:
@@ -30,7 +30,7 @@
 public class Base64Coder {
 
 	// The line separator string of the operating system.
-	private static final String systemLineSeparator = System.getProperty("line.separator");
+	private static final String systemLineSeparator = "\n";
 
 	// Mapping table from 6-bit nibbles to Base64 characters.
 	private static char[] map1 = new char[64];

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontAlignmentTest.java
Patch:
@@ -58,8 +58,7 @@ public boolean touchDown (int x, int y, int pointer, int newParam) {
 
 	@Override
 	public void render () {
-		GL10 gl = Gdx.graphics.getGL10();
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		spriteBatch.begin();
 		logoSprite.draw(spriteBatch);
 		switch (renderMode) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontFlipTest.java
Patch:
@@ -97,8 +97,7 @@ private void createCaches (String type, BitmapFontCache cache1, BitmapFontCache
 	public void render () {
 		red.a = (red.a + Gdx.graphics.getDeltaTime() * 0.1f) % 1;
 
-		GL10 gl = Gdx.graphics.getGL10();
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		spriteBatch.begin();
 		logoSprite.draw(spriteBatch);
 		switch (renderMode) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/DeltaTimeTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.utils.TimeUtils;
 
 public class DeltaTimeTest extends GdxTest {
 
@@ -30,12 +31,12 @@ public boolean needsGL20 () {
 
 	@Override
 	public void create () {
-		lastFrameTime = System.nanoTime();
+		lastFrameTime = TimeUtils.nanoTime();
 	}
 
 	@Override
 	public void render () {
-		long frameTime = System.nanoTime();
+		long frameTime = TimeUtils.nanoTime();
 		float deltaTime = (frameTime - lastFrameTime) / 1000000000.0f;
 		lastFrameTime = frameTime;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/IntegerBitmapFontTest.java
Patch:
@@ -21,6 +21,7 @@
 import com.badlogic.gdx.graphics.g2d.BitmapFont.HAlignment;
 import com.badlogic.gdx.graphics.g2d.BitmapFontCache;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
+import com.badlogic.gdx.graphics.g2d.TextureAtlas;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class IntegerBitmapFontTest extends GdxTest {
@@ -38,7 +39,8 @@ public boolean needsGL20 () {
 	SpriteBatch batch;
 
 	public void create () {
-		font = new BitmapFont();
+		TextureAtlas textureAtlas = new TextureAtlas("data/pack");
+		font = new BitmapFont(Gdx.files.internal("data/verdana39.fnt"), textureAtlas.findRegion("verdana39"), false);
 		singleLineCache = new BitmapFontCache(font, true);
 		multiLineCache = new BitmapFontCache(font, true);
 		singleLineCacheNonInteger = new BitmapFontCache(font, false);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MeshShaderTest.java
Patch:
@@ -63,7 +63,7 @@ public void create () {
 		shader = new ShaderProgram(vertexShader, fragmentShader);
 		if (shader.isCompiled() == false) {
 			Gdx.app.log("ShaderTest", shader.getLog());
-			System.exit(0);
+			Gdx.app.exit();
 		}
 
 		mesh = new Mesh(true, 4, 6, VertexAttribute.Position(), VertexAttribute.ColorUnpacked(), VertexAttribute.TexCoords(0));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MusicTest.java
Patch:
@@ -41,7 +41,7 @@ public boolean needsGL20 () {
 	@Override
 	public void create () {
 		for (int i = 0; i < music.length; i++) {
-			music[i] = Gdx.audio.newMusic(Gdx.files.internal("data/music.mp3"));
+			music[i] = Gdx.audio.newMusic(Gdx.files.internal("data/cloudconnected.ogg"));
 		}
 
 		buttons = new TextureRegion(new Texture(Gdx.files.internal("data/playback.png")));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ParallaxTest.java
Patch:
@@ -74,7 +74,7 @@ public void create () {
 		controller = new OrthoCamController(camera);
 		Gdx.input.setInputProcessor(controller);
 		batch = new SpriteBatch();
-		font = new BitmapFont();
+		font = new BitmapFont(Gdx.files.internal("data/arial-15.fnt"), false);
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ParticleEmitterTest.java
Patch:
@@ -115,8 +115,7 @@ public boolean scrolled (int amount) {
 	public void render () {
 		spriteBatch.getProjectionMatrix().setToOrtho2D(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		float delta = Gdx.graphics.getDeltaTime();
-		GL10 gl = Gdx.graphics.getGL10();
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		spriteBatch.begin();
 		effect.draw(spriteBatch, delta);
 		spriteBatch.end();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PixelsPerInchTest.java
Patch:
@@ -31,13 +31,13 @@ public class PixelsPerInchTest extends GdxTest {
 
 	@Override
 	public void create () {
-		font = new BitmapFont();
+		font = new BitmapFont(Gdx.files.internal("data/arial-15.fnt"), false);
 		batch = new SpriteBatch();
 		texture = new Texture(Gdx.files.internal("data/badlogicsmall.jpg"));
 	}
 
 	public void render () {
-		Gdx.gl10.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 
 		batch.begin();
 		float width = (int)(Gdx.graphics.getPpcX() * 2);
@@ -51,7 +51,7 @@ public void render () {
 
 	@Override
 	public boolean needsGL20 () {
-		return false;
+		return true;
 	}
 
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PixmapBlendingTest.java
Patch:
@@ -63,9 +63,8 @@ public void create () {
 	@Override
 	public void render () {
 
-		GL10 gl = Gdx.graphics.getGL10();
-		gl.glClearColor(0, 1, 0, 1);
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClearColor(0, 1, 0, 1);
+		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 
 		spriteBatch.begin();
 		logoSprite.draw(spriteBatch);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ShapeRendererTest.java
Patch:
@@ -49,7 +49,7 @@ public void create () {
 		controller = new PerspectiveCamController(cam);
 		Gdx.input.setInputProcessor(controller);
 		batch = new SpriteBatch();
-		font = new BitmapFont();
+		font = new BitmapFont(Gdx.files.internal("data/arial-15.fnt"), false);
 	}
 
 	public void render () {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/WaterRipples.java
Patch:
@@ -33,6 +33,7 @@
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.Ray;
 import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.utils.TimeUtils;
 
 public class WaterRipples extends GdxTest implements InputProcessor {
 	static final short WIDTH = 50;
@@ -160,7 +161,7 @@ private void touchWater (Vector3 point) {
 		}
 	}
 
-	long lastTick = System.nanoTime();
+	long lastTick = TimeUtils.nanoTime();
 	Random rand = new Random();
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/YDownTest.java
Patch:
@@ -34,7 +34,7 @@ public class YDownTest extends GdxTest {
 	public void create () {
 		// a bitmap font to draw some text, note that we
 		// pass true to the constructor, which flips glyphs on y
-		font = new BitmapFont(true);
+		font = new BitmapFont(Gdx.files.internal("data/arial-15.fnt"), true);
 		
 		// a texture region, note the flipping on y again
 		region = new TextureRegion(new Texture("data/badlogic.jpg"));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -79,7 +79,7 @@ public class GdxTests {
 			PixmapTest.class, PreferencesTest.class,
 			ProjectiveTextureTest.class, Pong.class, ProjectTest.class,
 			RemoteTest.class, RotationTest.class, ShaderMultitextureTest.class,
-			ShadowMappingTest.class, SplineTest.class, SimpleTest.class,
+			ShadowMappingTest.class, SplineTest.class,
 			SimpleAnimationTest.class, SimpleDecalTest.class,
 			SimpleStageCullingTest.class, SoundTest.class,
 			SpriteCacheTest.class, SpriteCacheOffsetTest.class,
@@ -97,7 +97,7 @@ public class GdxTests {
 			VorbisTest.class, WaterRipples.class, HelloTriangle.class,
 			SimpleVertexShader.class, ShapeRendererTest.class,
 			MoveSpriteExample.class, StbTrueTypeTest.class, SoundTouchTest.class, Mpg123Test.class, WavTest.class,
-			TextButtonTest.class, TextButtonTestGL2.class, TextureBindTest.class, TextureBindTestGL2.class,
+			TextButtonTest.class, TextButtonTestGL2.class, TextureBindTest.class,
 			SortedSpriteTest.class, ExternalMusicTest.class, SoftKeyboardTest.class, 
 			DirtyRenderingTest.class, FreeTypeTest.class, YDownTest.class};
 

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/materials/MaterialAttribute.java
Patch:
@@ -29,4 +29,6 @@ public MaterialAttribute (String name) {
 	public abstract void bind (ShaderProgram program);
 
 	public abstract MaterialAttribute copy ();
+	
+	public abstract String getShaderFlag ();
 }
\ No newline at end of file

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALAudio.java
Patch:
@@ -67,7 +67,7 @@ public class OpenALAudio implements Audio {
 	boolean noDevice = false;
 
 	public OpenALAudio () {
-		this(16, 512, 9);
+		this(16, 9, 512);
 	}
 
 	public OpenALAudio (int simultaneousSources, int deviceBufferCount, int deviceBufferSize) {

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALAudio.java
Patch:
@@ -70,7 +70,7 @@ public OpenALAudio () {
 		this(16, 512, 9);
 	}
 
-	public OpenALAudio (int simultaneousSources, int deviceBufferSize, int deviceBufferCount) {
+	public OpenALAudio (int simultaneousSources, int deviceBufferCount, int deviceBufferSize) {
 		this.deviceBufferSize = deviceBufferSize;
 		this.deviceBufferCount = deviceBufferCount;
 

File: tests/gdx-tests-gwt/src/com/badlogic/gdx/tests/gwt/client/GwtTestStarter.java
Patch:
@@ -4,7 +4,7 @@
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.backends.gwt.GwtApplication;
 import com.badlogic.gdx.backends.gwt.GwtApplicationConfiguration;
-import com.badlogic.gdx.tests.MusicTest;
+import com.badlogic.gdx.tests.gwt.GwtInputTest;
 
 public class GwtTestStarter extends GwtApplication {
 
@@ -15,6 +15,6 @@ public GwtApplicationConfiguration getConfig () {
 
 	@Override
 	public ApplicationListener getApplicationListener () {
-		return new MusicTest();
+		return new GwtInputTest();
 	}
 }

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/AudioBuild.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.badlogic.gdx.jnigen.AntScriptGenerator;
 import com.badlogic.gdx.jnigen.BuildConfig;
-import com.badlogic.gdx.jnigen.BuildExecutor;
 import com.badlogic.gdx.jnigen.BuildTarget;
 import com.badlogic.gdx.jnigen.BuildTarget.TargetOs;
 import com.badlogic.gdx.jnigen.NativeCodeGenerator;

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/io/Mpg123Decoder.java
Patch:
@@ -16,8 +16,6 @@
  ******************************************************************************/
 
 
-import java.nio.ShortBuffer;
-
 import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.utils.SharedLibraryLoader;

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/io/WavDecoder.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.EOFException;
 import java.io.FilterInputStream;
 import java.io.IOException;
-import java.nio.ShortBuffer;
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.files.FileHandle;

File: extensions/gdx-image/src/com/badlogic/gdx/graphics/g2d/ImageBuild.java
Patch:
@@ -5,8 +5,8 @@
 import com.badlogic.gdx.jnigen.BuildConfig;
 import com.badlogic.gdx.jnigen.BuildExecutor;
 import com.badlogic.gdx.jnigen.BuildTarget;
-import com.badlogic.gdx.jnigen.NativeCodeGenerator;
 import com.badlogic.gdx.jnigen.BuildTarget.TargetOs;
+import com.badlogic.gdx.jnigen.NativeCodeGenerator;
 
 public class ImageBuild {
 	public static void main (String[] args) throws Exception {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtInput.java
Patch:
@@ -307,6 +307,7 @@ private int getButton(int button) {
 
 	private void handleEvent (NativeEvent e) {
 		if(e.getType().equals("mousedown")) {
+			System.out.println("touch down");
 			if(!e.getEventTarget().equals(canvas)) return;
 			this.justTouched = true;
 			this.touched = true;

File: gdx/src/com/badlogic/gdx/graphics/FPSLogger.java
Patch:
@@ -26,12 +26,12 @@ public class FPSLogger {
 	long startTime;
 
 	public FPSLogger () {
-		startTime = System.currentTimeMillis() * 1000;
+		startTime = System.currentTimeMillis();
 	}
 
 	/** Logs the current frames per second to the console. */
 	public void log () {
-		if (System.currentTimeMillis() - startTime > 1000000000) {
+		if (System.currentTimeMillis() - startTime > 1000) {
 			Gdx.app.log("FPSLogger", "fps: " + Gdx.graphics.getFramesPerSecond());
 			startTime = System.currentTimeMillis();
 		}

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/lights/PointLight.java
Patch:
@@ -4,7 +4,7 @@
 import com.badlogic.gdx.math.Vector3;
 
 public class PointLight implements Comparable {
-
+	
 	final public Vector3 position = new Vector3();
 	final public Color color = new Color();
 	// or just
@@ -18,7 +18,7 @@ public class PointLight implements Comparable {
 
 	@Override
 	public int compareTo(Object light) {
-		return (((PointLight) light).priority > this.priority) ? -1 : 1;
+		return (((PointLight) light).priority < this.priority) ? -1 : 1;
 	}
 
 }

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -186,11 +186,11 @@ public void done () {
 			@Override
 			public void loaded (String file, int loaded, int total) {
 				System.out.println("loaded " + file + "," + loaded + "/" + total);
-				String color = Pixmap.make(100, 0, 0, 1);
+				String color = Pixmap.make(30, 30, 30, 1);
 				context.setFillStyle(color);
 				context.setStrokeStyle(color);
 				context.fillRect(0, 0, 300, 40);
-				color = Pixmap.make(0, 200, 0, 1);
+				color = Pixmap.make(200, 200, 200, 1);
 				context.setFillStyle(color);
 				context.setStrokeStyle(color);
 				context.fillRect(0, 0, 300 * (loaded / (float)total) * 0.97f, 40);

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/MapRenderer.java
Patch:
@@ -67,8 +67,8 @@ private void createBlocks () {
 						if (y > height) continue;
 						int posX = x;
 						int posY = height - y - 1;
-						if (map.tiles[x][y] == Map.TILE) cache.add(tile, posX, posY, 1, 1);
-						if (map.tiles[x][y] == Map.SPIKES) cache.add(spikes, posX, posY, 1, 1);
+						if (map.match(map.tiles[x][y], Map.TILE)) cache.add(tile, posX, posY, 1, 1);
+						if (map.match(map.tiles[x][y], Map.SPIKES)) cache.add(spikes, posX, posY, 1, 1);
 					}
 				}
 				blocks[blockX][blockY] = cache.endCache();

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/HelpScreen5.java
Patch:
@@ -82,6 +82,8 @@ public void draw (float deltaTime) {
 
 	@Override
 	public void render (float delta) {
+		update(delta);
+		draw(delta);
 	}
 
 	@Override

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplicationConfiguration.java
Patch:
@@ -25,6 +25,7 @@ public class GwtApplicationConfiguration {
 	public boolean antialiasing = false;
 	public int fps = 60;
 	public Panel rootPanel;
+	public String canavsId;
 	public TextArea log;
 	public boolean useDebugGL = false;
 

File: tests/gdx-tests-gwt/src/com/badlogic/gdx/tests/gwt/client/GwtTestStarter.java
Patch:
@@ -5,6 +5,7 @@
 import com.badlogic.gdx.backends.gwt.GwtApplication;
 import com.badlogic.gdx.backends.gwt.GwtApplicationConfiguration;
 import com.badlogic.gdx.tests.PreferencesTest;
+import com.badlogic.gdx.tests.gwt.GwtTest;
 
 public class GwtTestStarter extends GwtApplication {
 
@@ -15,6 +16,6 @@ public GwtApplicationConfiguration getConfig () {
 
 	@Override
 	public ApplicationListener getApplicationListener () {
-		return new PreferencesTest();
+		return new GwtTest();
 	}
 }

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20.java
Patch:
@@ -61,6 +61,7 @@ public class GwtGL20 implements GL20 {
 
 	protected GwtGL20 (WebGLRenderingContext gl) {
 		this.gl = gl;
+		this.gl.pixelStorei(WebGLRenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);
 	}
 	
 	private void ensureCapacity(FloatBuffer buffer) {

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGraphics.java
Patch:
@@ -55,6 +55,8 @@ public GwtGraphics (Panel root, GwtApplicationConfiguration config) {
 		WebGLContextAttributes attributes = WebGLContextAttributes.create();
 		attributes.setAntialias(config.antialiasing);
 		attributes.setStencil(config.stencil);
+		attributes.setAlpha(false);
+		attributes.setPremultipliedAlpha(false);
 		
 		context = WebGLRenderingContext.getContext(canvas, attributes);
 		context.viewport(0, 0, config.width, config.height);

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -118,10 +118,10 @@ public enum ApplicationType {
 	/** Logs an error message to the console or logcat */
 	public void error (String tag, String message, Throwable exception);
 
-	/** Logs an error message to the console or logcat */
+	/** Logs a debug message to the console or logcat */
 	public void debug (String tag, String message);
 
-	/** Logs an error message to the console or logcat */
+	/** Logs a debug message to the console or logcat */
 	public void debug (String tag, String message, Throwable exception);
 
 	/** Sets the log level. {@link #LOG_NONE} will mute all log output. {@link #LOG_ERROR} will only let error messages through.

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/Cubocy.java
Patch:
@@ -3,7 +3,6 @@
 
 import com.badlogic.cubocy.screens.GameScreen;
 import com.badlogic.gdx.Game;
-import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 
 public class Cubocy extends Game {
 	@Override

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/MapRenderer.java
Patch:
@@ -10,7 +10,6 @@
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.SpriteCache;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20;
 import com.badlogic.gdx.math.Vector3;
 
@@ -75,7 +74,7 @@ private void createBlocks () {
 				blocks[blockX][blockY] = cache.endCache();
 			}
 		}
-		System.out.println("blocks created");
+		Gdx.app.debug("Cubocy", "blocks created");
 	}
 
 	private void createAnimations () {
@@ -135,7 +134,7 @@ public void render (float deltaTime) {
 			}
 		}
 		cache.end();
-		Gdx.app.log("Cubocy", "blocks: " + b);
+		Gdx.app.debug("Cubocy", "blocks: " + b);
 		stateTime += deltaTime;
 		batch.setProjectionMatrix(cam.combined);
 		batch.begin();

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/screens/GameOverScreen.java
Patch:
@@ -42,7 +42,7 @@ public void render (float delta) {
 
 	@Override
 	public void hide () {
-		System.out.println("dispose intro");
+		Gdx.app.debug("Cubocy", "dispose intro");
 		batch.dispose();
 		intro.getTexture().dispose();
 	}

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/screens/GameScreen.java
Patch:
@@ -45,7 +45,7 @@ public void render (float delta) {
 
 	@Override
 	public void hide () {
-		System.out.println("dispose game screen");
+		Gdx.app.debug("Cubocy", "dispose game screen");
 		renderer.dispose();
 		controlRenderer.dispose();
 	}

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/screens/IntroScreen.java
Patch:
@@ -42,7 +42,7 @@ public void render (float delta) {
 
 	@Override
 	public void hide () {
-		System.out.println("dispose intro");
+		Gdx.app.debug("Cubocy", "dispose intro");
 		batch.dispose();
 		intro.getTexture().dispose();
 	}

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/screens/MainMenu.java
Patch:
@@ -42,7 +42,7 @@ public void render (float delta) {
 
 	@Override
 	public void hide () {
-		System.out.println("dispose main menu");
+		Gdx.app.debug("Cubocy", "dispose main menu");
 		batch.dispose();
 		title.getTexture().dispose();
 	}

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/Map.java
Patch:
@@ -29,8 +29,9 @@ public class Map {
 	public Map () {
 		Pixmap pixmap = new Pixmap(Gdx.files.internal("data/levels.png"));
 		tiles = new int[pixmap.getWidth()][pixmap.getHeight()];
-		for (int y = 0; y < pixmap.getHeight(); y++) {
-			for (int x = 0; x < pixmap.getWidth(); x++) {
+		for (int y = 0; y < 35; y++) {
+			for (int x = 0; x < 150; x++) {
+				System.out.println(x + ", " + y);
 				int pix = pixmap.getPixel(x, y) >>> 8;
 				if (pix == START) {
 					Dispenser dispenser = new Dispenser(x, pixmap.getHeight() - 1 - y);

File: gdx/src/com/badlogic/gdx/graphics/FPSLogger.java
Patch:
@@ -26,14 +26,14 @@ public class FPSLogger {
 	long startTime;
 
 	public FPSLogger () {
-		startTime = System.nanoTime();
+		startTime = System.currentTimeMillis() * 1000;
 	}
 
 	/** Logs the current frames per second to the console. */
 	public void log () {
-		if (System.nanoTime() - startTime > 1000000000) {
+		if (System.currentTimeMillis() - startTime > 1000000000) {
 			Gdx.app.log("FPSLogger", "fps: " + Gdx.graphics.getFramesPerSecond());
-			startTime = System.nanoTime();
+			startTime = System.currentTimeMillis();
 		}
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteCache.java
Patch:
@@ -852,7 +852,6 @@ public void begin () {
 
 			GL20 gl = Gdx.gl20;
 			gl.glDepthMask(false);
-			gl.glEnable(GL20.GL_TEXTURE_2D);
 
 			if (customShader != null) {
 				customShader.begin();

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/CameraGroupStrategy.java
Patch:
@@ -155,12 +155,12 @@ public void afterGroup (int group) {
 	@Override
 	public void beforeGroups () {
 		Gdx.gl.glEnable(GL10.GL_DEPTH_TEST);
-		Gdx.gl.glEnable(GL10.GL_TEXTURE_2D);
 		if (shader != null) {
 			shader.begin();
 			shader.setUniformMatrix("u_projectionViewMatrix", camera.combined);
 			shader.setUniformi("u_texture", 0);
 		} else {
+			Gdx.gl.glEnable(GL10.GL_TEXTURE_2D);
 			Gdx.gl10.glMatrixMode(GL10.GL_PROJECTION);
 			Gdx.gl10.glLoadMatrixf(camera.projection.val, 0);
 			Gdx.gl10.glMatrixMode(GL10.GL_MODELVIEW);

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -86,6 +86,7 @@ private void setupLoop () {
 		try {
 			graphics = new GwtGraphics(root, config);
 		} catch(Throwable e) {
+			root.clear();
 			root.add(new Label("Sorry, your browser doesn't seem to support WebGL"));
 			return;
 		}

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGraphics.java
Patch:
@@ -45,7 +45,7 @@ public class GwtGraphics implements Graphics {
 
 	public GwtGraphics (Panel root, GwtApplicationConfiguration config) {
 		Canvas canvasWidget = Canvas.createIfSupported();
-		if(canvasWidget == null) return;
+		if(canvasWidget == null) throw new GdxRuntimeException("Canvas not supported");
 		canvas = canvasWidget.getCanvasElement();
 		root.add(canvasWidget);
 		canvas.setWidth(config.width);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MeshShaderTest.java
Patch:
@@ -101,5 +101,4 @@ public void render () {
 	public boolean needsGL20 () {
 		return true;
 	}
-
 }

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java
Patch:
@@ -119,6 +119,7 @@ public ShapeRenderer (int maxVertices) {
 		else
 			renderer = new ImmediateModeRenderer10(maxVertices);
 		projView.setToOrtho2D(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		matrixDirty = true;
 	}
 
 	/** Sets the {@link Color} to be used by shapes.

File: tests/gdx-tests-gwt/src/com/badlogic/gdx/tests/gwt/client/GwtTestStarter.java
Patch:
@@ -4,7 +4,7 @@
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.backends.gwt.GwtApplication;
 import com.badlogic.gdx.backends.gwt.GwtApplicationConfiguration;
-import com.badlogic.gdx.tests.gwt.GwtTest;
+import com.badlogic.gdx.tests.gwt.GwtInputTest;
 
 public class GwtTestStarter extends GwtApplication {
 
@@ -15,6 +15,6 @@ public GwtApplicationConfiguration getConfig () {
 
 	@Override
 	public ApplicationListener getApplicationListener () {
-		return new GwtTest();
+		return new GwtInputTest();
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -19,6 +19,7 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.tests.Mpg123Test;
+import com.badlogic.gdx.tests.ShapeRendererTest;
 import com.badlogic.gdx.tests.gwt.GwtInputTest;
 import com.badlogic.gdx.tests.gwt.GwtTest;
 import com.badlogic.gdx.tests.utils.GdxTest;

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -1029,6 +1029,8 @@ private void renderMesh () {
 
 		lastTexture.bind();
 		mesh.setVertices(vertices, 0, idx);
+		mesh.getIndicesBuffer().position(0);
+		mesh.getIndicesBuffer().limit(spritesInBatch * 6); 
 
 		if (blendingDisabled) {
 			Gdx.gl.glDisable(GL20.GL_BLEND);

File: tests/gdx-tests-gwt/src/com/badlogic/gdx/tests/gwt/client/GwtTestStarter.java
Patch:
@@ -4,7 +4,7 @@
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.backends.gwt.GwtApplication;
 import com.badlogic.gdx.backends.gwt.GwtApplicationConfiguration;
-import com.badlogic.gdx.tests.GwtTest;
+import com.badlogic.gdx.tests.gwt.GwtTest;
 
 public class GwtTestStarter extends GwtApplication {
 

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,8 +18,8 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
-import com.badlogic.gdx.tests.GwtTest;
 import com.badlogic.gdx.tests.Mpg123Test;
+import com.badlogic.gdx.tests.gwt.GwtTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplicationConfiguration.java
Patch:
@@ -26,7 +26,7 @@ public class GwtApplicationConfiguration {
 	public int fps = 60;
 	public Panel rootPanel;
 	public TextArea log;
-	public boolean useDebugGL = true;
+	public boolean useDebugGL = false;
 
 	public GwtApplicationConfiguration (int width, int height) {
 		this.width = width;

File: backends/gdx-backends-gwt/src/com/google/gwt/typedarrays/client/ArrayUtils.java
Patch:
@@ -41,6 +41,7 @@ public static JsArrayNumber toJsArray(double[] data) {
 
   public static JsArrayNumber toJsArray(float[] data) {
     JsArrayNumber jsan = (JsArrayNumber) JsArrayNumber.createArray();
+    jsan.setLength(data.length);
     int len = data.length;
     for (int i = len - 1; i >= 0; i--) {
       jsan.set(i, data[i]);
@@ -50,6 +51,7 @@ public static JsArrayNumber toJsArray(float[] data) {
   
   public static JsArrayNumber toJsArray(float[] data, int offset, int len) {
 	    JsArrayNumber jsan = (JsArrayNumber) JsArrayNumber.createArray();
+	    jsan.setLength(len);
 	    for (int i = 0; i < len; i++) {
 	      jsan.set(i, data[i + offset]);
 	    }

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplicationConfiguration.java
Patch:
@@ -26,6 +26,7 @@ public class GwtApplicationConfiguration {
 	public int fps = 60;
 	public Panel rootPanel;
 	public TextArea log;
+	public boolean useDebugGL = true;
 
 	public GwtApplicationConfiguration (int width, int height) {
 		this.width = width;

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java
Patch:
@@ -81,7 +81,7 @@ private void setupLoop () {
 		new Timer() {
 			@Override
 			public void run () {
-				graphics.setFps(0); // FIXME
+				graphics.update();
 				if(Gdx.graphics.getWidth() != lastWidth || Gdx.graphics.getHeight() != lastHeight) {
 					GwtApplication.this.listener.resize(Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 					lastWidth = graphics.getWidth();
@@ -93,7 +93,7 @@ public void run () {
 				runnables.clear();
 				listener.render();
 			}
-		}.scheduleRepeating(config.fps);
+		}.scheduleRepeating((int)((1f / config.fps) * 1000));
 	}
 
 	public abstract GwtApplicationConfiguration getConfig ();

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -55,8 +55,8 @@ public Pixmap (int width, int height, Format format) {
 		this.height = height;
 		this.format = format;
 		canvas = Canvas.createIfSupported();
-		canvas.setWidth("" + width);
-		canvas.setHeight("" + height);
+		canvas.getCanvasElement().setWidth(width);
+		canvas.getCanvasElement().setHeight(height);
 		context = canvas.getContext2d();
 		context.setFillStyle("blue");
 		context.fillRect(10, 10, 10, 10);

File: backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/nio/ByteBuffer.java
Patch:
@@ -55,7 +55,7 @@ public static ByteBuffer allocateDirect (int capacity) {
 		if (capacity < 0) {
 			throw new IllegalArgumentException();
 		}
-		return BufferFactory.newDirectByteBuffer(capacity);
+		return BufferFactory.newByteBuffer(capacity);
 	}
 
 	/** Creates a new byte buffer by wrapping the given byte array.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btIDebugDraw.java
Patch:
@@ -172,7 +172,8 @@ public final static class DebugDrawModes {
     public final static int DBG_DrawConstraints = (1 << 11);
     public final static int DBG_DrawConstraintLimits = (1 << 12);
     public final static int DBG_FastWireframe = (1 << 13);
-    public final static int DBG_MAX_DEBUG_DRAW_MODE = DBG_FastWireframe + 1;
+    public final static int DBG_DrawNormals = (1 << 14);
+    public final static int DBG_MAX_DEBUG_DRAW_MODE = DBG_DrawNormals + 1;
   }
 
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/gdxBulletConstants.java
Patch:
@@ -13,7 +13,7 @@
 import com.badlogic.gdx.math.Matrix3;
 
 public interface gdxBulletConstants {
-  public final static int BT_BULLET_VERSION = 279;
+  public final static int BT_BULLET_VERSION = 280;
   public final static double BT_LARGE_FLOAT = 1e18;
   public final static String btVector3DataName = "btVector3FloatData";
   public final static int USE_BANCHLESS = 1;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -40,6 +40,7 @@
 import com.badlogic.gdx.tests.TTFFactoryTest;
 import com.badlogic.gdx.tests.UITest;
 import com.badlogic.gdx.tests.VorbisTest;
+import com.badlogic.gdx.tests.YDownTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
@@ -52,7 +53,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 		
-		GdxTest test = new FreeTypeTest();
+		GdxTest test = new YDownTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 800;
 		config.height = 480;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -99,7 +99,7 @@ public class GdxTests {
 			MoveSpriteExample.class, StbTrueTypeTest.class, SoundTouchTest.class, Mpg123Test.class, WavTest.class,
 			TextButtonTest.class, TextButtonTestGL2.class, TextureBindTest.class, TextureBindTestGL2.class,
 			SortedSpriteTest.class, ExternalMusicTest.class, SoftKeyboardTest.class, 
-			DirtyRenderingTest.class, FreeTypeTest.class};
+			DirtyRenderingTest.class, FreeTypeTest.class, YDownTest.class};
 
 	public static String[] getNames() {
 		List<String> names = new ArrayList<String>();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/FlickScrollPane.java
Patch:
@@ -250,6 +250,7 @@ public boolean touchDown (float x, float y, int pointer) {
 		if (pointer != 0) return false;
 		super.touchDown(x, y, pointer);
 		touchFocusedChild = stage.getTouchFocus(0) != this ? stage.getTouchFocus(0) : null;
+		if (emptySpaceOnlyScroll && touchFocusedChild != null) return false;
 		gestureDetector.touchDown((int)x, (int)y, pointer, 0);
 		if (stage != null) stage.setTouchFocus(this, 0); // Always take the touch focus.
 		return true;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -100,7 +100,7 @@ public void initialize (ApplicationListener listener, AndroidApplicationConfigur
 			: config.resolutionStrategy);
 		input = new AndroidInput(this, graphics.view, config);
 		audio = new AndroidAudio(this);
-		files = new AndroidFiles(this.getAssets());
+		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 		this.listener = listener;
 		this.handler = new Handler();
 
@@ -170,7 +170,7 @@ public View initializeForView (ApplicationListener listener, AndroidApplicationC
 			: config.resolutionStrategy);
 		input = new AndroidInput(this, graphics.view, config);
 		audio = new AndroidAudio(this);
-		files = new AndroidFiles(this.getAssets());
+		files = new AndroidFiles(this.getAssets(), this.getFilesDir().getAbsolutePath());
 		this.listener = listener;
 		this.handler = new Handler();
 

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -109,7 +109,7 @@ public File file () {
 	/** Returns a stream for reading this file as bytes.
 	 * @throw GdxRuntimeException if the file handle represents a directory, doesn't exist, or could not be read. */
 	public InputStream read () {
-		if (type == FileType.Classpath || (type == FileType.Internal && !file.exists())) {
+		if (type == FileType.Classpath || (type == FileType.Internal && !file.exists()) || (type == FileType.Local && !file.exists())) {
 			InputStream input = FileHandle.class.getResourceAsStream("/" + file.getPath().replace('\\', '/'));
 			if (input == null) throw new GdxRuntimeException("File not found: " + file + " (" + type + ")");
 			return input;

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglApplication.java
Patch:
@@ -111,7 +111,7 @@ void initialize (ApplicationListener listener, JoglApplicationConfiguration conf
 		JoglNativesLoader.load();
 		graphics = new JoglGraphics(listener, config);
 		input = new JoglInput(graphics.getCanvas());
-		audio = new OpenALAudio();
+		audio = new OpenALAudio(config.audioDeviceBufferCount, config.audioDeviceBufferSize);
 		files = new JoglFiles();
 
 		Gdx.app = JoglApplication.this;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -59,7 +59,7 @@ public LwjglApplication (ApplicationListener listener, String title, int width,
 		config.useGL20 = useGL2;
 		config.vSyncEnabled = true;
 		graphics = new LwjglGraphics(config);
-		audio = new OpenALAudio();
+		audio = new OpenALAudio(config.audioDeviceBufferCount, config.audioDeviceBufferSize);
 		files = new LwjglFiles();
 		input = new LwjglInput();
 		this.listener = listener;
@@ -76,7 +76,7 @@ public LwjglApplication (ApplicationListener listener, LwjglApplicationConfigura
 		LwjglNativesLoader.load();
 
 		graphics = new LwjglGraphics(config);
-		audio = new OpenALAudio();
+		audio = new OpenALAudio(config.audioDeviceBufferCount, config.audioDeviceBufferSize);
 		files = new LwjglFiles();
 		input = new LwjglInput();
 		this.listener = listener;
@@ -111,7 +111,7 @@ public LwjglApplication (ApplicationListener listener, LwjglApplicationConfigura
 		LwjglNativesLoader.load();
 
 		graphics = new LwjglGraphics(canvas, config);
-		audio = new OpenALAudio();
+		audio = new OpenALAudio(config.audioDeviceBufferCount, config.audioDeviceBufferSize);
 		files = new LwjglFiles();
 		input = new LwjglInput();
 		this.listener = listener;

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALAudioDevice.java
Patch:
@@ -15,8 +15,8 @@
 
 /** @author Nathan Sweet */
 public class OpenALAudioDevice implements AudioDevice {
-	static private final int bufferSize = 512;
-	static private final int bufferCount = 9;
+	static public int bufferSize = 512;
+	static public int bufferCount = 9;
 	static private final int bytesPerSample = 2;
 	static private final ByteBuffer tempBuffer = BufferUtils.createByteBuffer(bufferSize);
 

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -27,10 +27,12 @@
 import com.badlogic.gdx.tests.FreeTypeTest;
 import com.badlogic.gdx.tests.InterpolationTest;
 import com.badlogic.gdx.tests.JpegTest;
+import com.badlogic.gdx.tests.MusicTest;
 import com.badlogic.gdx.tests.ParallaxTest;
 import com.badlogic.gdx.tests.ShadowMappingTest;
 import com.badlogic.gdx.tests.SoftKeyboardTest;
 import com.badlogic.gdx.tests.SortedSpriteTest;
+import com.badlogic.gdx.tests.SoundTest;
 import com.badlogic.gdx.tests.SpriteBatchOriginScaleTest;
 import com.badlogic.gdx.tests.SpriteBatchShaderTest;
 import com.badlogic.gdx.tests.StageTest;
@@ -50,7 +52,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 		
-		GdxTest test = new FreeTypeTest();
+		GdxTest test = new MusicTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 800;
 		config.height = 480;

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/KeyframedModelViewer.java
Patch:
@@ -179,6 +179,6 @@ public void dispose () {
 	}
 
 	public static void main (String[] argv) {
-		new JoglApplication(new KeyframedModelViewer("data/knight.md2", "data/knight.jpg"), "KeframedModel Viewer", 800, 480, false);
+		new JoglApplication(new KeyframedModelViewer("data/models/knight.md2", "data/models/knight.jpg"), "KeframedModel Viewer", 800, 480, false);
 	}
 }
\ No newline at end of file

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/Mp3.java
Patch:
@@ -38,6 +38,7 @@ static public class Music extends OpenALMusic {
 
 		public Music (OpenALAudio audio, FileHandle file) {
 			super(audio, file);
+			if(audio.noDevice) return;
 			bitstream = new Bitstream(file.read());
 			decoder = new MP3Decoder();
 			try {
@@ -105,7 +106,7 @@ static public class Sound extends OpenALSound {
 
 		public Sound (OpenALAudio audio, FileHandle file) {
 			super(audio);
-
+			if(audio.noDevice) return;
 			ByteArrayOutputStream output = new ByteArrayOutputStream(4096);
 
 			Bitstream bitstream = new Bitstream(file.read());

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/Ogg.java
Patch:
@@ -27,6 +27,7 @@ static public class Music extends OpenALMusic {
 
 		public Music (OpenALAudio audio, FileHandle file) {
 			super(audio, file);
+			if(audio.noDevice) return;
 			input = new OggInputStream(file.read());
 			setup(input.getChannels(), input.getSampleRate());
 		}
@@ -49,7 +50,7 @@ public void reset () {
 	static public class Sound extends OpenALSound {
 		public Sound (OpenALAudio audio, FileHandle file) {
 			super(audio);
-
+			if(audio.noDevice) return;
 			OggInputStream input = new OggInputStream(file.read());
 			ByteArrayOutputStream output = new ByteArrayOutputStream(4096);
 			byte[] buffer = new byte[2048];

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/Wav.java
Patch:
@@ -31,6 +31,7 @@ static public class Music extends OpenALMusic {
 		public Music (OpenALAudio audio, FileHandle file) {
 			super(audio, file);
 			input = new WavInputStream(file);
+			if(audio.noDevice) return;
 			setup(input.channels, input.sampleRate);
 		}
 
@@ -59,6 +60,7 @@ public void reset () {
 	static public class Sound extends OpenALSound {
 		public Sound (OpenALAudio audio, FileHandle file) {
 			super(audio);
+			if(audio.noDevice) return;
 
 			WavInputStream input = new WavInputStream(file);
 			ByteArrayOutputStream output = new ByteArrayOutputStream(4096);

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java
Patch:
@@ -45,7 +45,7 @@ public class Decal {
 
 	protected float[] vertices = new float[SIZE];
 	protected Vector3 position = new Vector3();
-	protected Quaternion rotation = Quaternion.idt();
+	protected Quaternion rotation = new Quaternion();
 	protected Vector2 scale = new Vector2(1, 1);
 
 	/** The transformation offset can be used to change the pivot point for rotation and scaling. By default the pivot is the middle

File: gdx/src/com/badlogic/gdx/math/Vector2.java
Patch:
@@ -26,6 +26,9 @@ public class Vector2 implements Serializable {
 	/** Static temporary vector. Use with care! Use only when sure other code will not also use this.
 	 * @see #tmp() **/
 	public final static Vector2 tmp = new Vector2();
+	public final static Vector2 X = new Vector2(1, 0);
+	public final static Vector2 Y = new Vector2(0, 1);
+	public final static Vector2 Zero = new Vector2(0, 0);
 
 	/** the x-component of this vector **/
 	public float x;

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java
Patch:
@@ -705,7 +705,7 @@ public boolean hasAttribute (String name) {
 	/** @param name the name of the attribute
 	 * @return the type of the attribute, one of {@link GL20#GL_FLOAT}, {@link GL20#GL_FLOAT_VEC2} etc. */
 	public int getAttributeType (String name) {
-		int type = attributes.get(name, -1);
+		int type = attributeTypes.get(name, -1);
 		if (type == -1)
 			return 0;
 		else
@@ -731,7 +731,7 @@ public boolean hasUniform (String name) {
 	/** @param name the name of the uniform
 	 * @return the type of the uniform, one of {@link GL20#GL_FLOAT}, {@link GL20#GL_FLOAT_VEC2} etc. */
 	public int getUniformType (String name) {
-		int type = attributes.get(name, -1);
+		int type = uniformTypes.get(name, -1);
 		if (type == -1)
 			return 0;
 		else

File: gdx/src/com/badlogic/gdx/math/Vector2.java
Patch:
@@ -200,8 +200,8 @@ public Vector2 tmp () {
 	 * @param mat the matrix
 	 * @return this vector */
 	public Vector2 mul (Matrix3 mat) {
-		float x = this.x * mat.vals[0] + this.y * mat.vals[3] + mat.vals[6];
-		float y = this.x * mat.vals[1] + this.y * mat.vals[4] + mat.vals[7];
+		float x = this.x * mat.val[0] + this.y * mat.val[3] + mat.val[6];
+		float y = this.x * mat.val[1] + this.y * mat.val[4] + mat.val[7];
 		this.x = x;
 		this.y = y;
 		return this;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL10.java
Patch:
@@ -525,7 +525,7 @@ public final void glMultMatrixf (float[] m, int offset) {
 	}
 
 	public final void glTexEnvfv (int target, int pname, float[] params, int offset) {
-		glTexEnvf(target, pname, params[offset]);
+		GL11.glTexEnv(target, pname, toBuffer(params, offset));
 	}
 
 	public void glPolygonMode (int face, int mode) {

File: gdx/src/com/badlogic/gdx/graphics/VertexAttribute.java
Patch:
@@ -56,7 +56,7 @@ public static VertexAttribute TexCoords(int unit) {
 	}
 	
 	public static VertexAttribute Normal() {
-		return new VertexAttribute(Usage.TextureCoordinates, 3, ShaderProgram.NORMAL_ATTRIBUTE);
+		return new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE);
 	}
 	
 	public static VertexAttribute Color() {

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
Patch:
@@ -6,7 +6,7 @@
 import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
-import com.badlogic.gdx.graphics.g2d.PixmapAtlas;
+import com.badlogic.gdx.graphics.g2d.PixmapPacker;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
 import com.badlogic.gdx.graphics.g2d.BitmapFont.BitmapFontData;
@@ -150,7 +150,7 @@ public FreeTypeBitmapFontData generateData (int size, String characters, boolean
 		// generate the glyphs
 		int maxGlyphHeight = (int)Math.ceil(data.lineHeight);
 		int pageWidth = MathUtils.nextPowerOfTwo((int)Math.sqrt(maxGlyphHeight * maxGlyphHeight * characters.length()));
-		PixmapAtlas atlas = new PixmapAtlas(pageWidth, pageWidth, Format.RGBA8888, 2, false);
+		PixmapPacker atlas = new PixmapPacker(pageWidth, pageWidth, Format.RGBA8888, 2, false);
 		for (int i = 0; i < characters.length(); i++) {
 			char c = characters.charAt(i);
 			if (!FreeType.loadChar(face, c, FreeType.FT_LOAD_DEFAULT)) continue;
@@ -160,7 +160,7 @@ public FreeTypeBitmapFontData generateData (int size, String characters, boolean
 			GlyphMetrics metrics = slot.getMetrics();
 			Bitmap bitmap = slot.getBitmap();
 			Pixmap pixmap = bitmap.getPixmap(Format.RGBA8888);
-			Rectangle rect = atlas.insertImage("" + c, pixmap);
+			Rectangle rect = atlas.pack("" + c, pixmap);
 			Glyph glyph = new Glyph();
 			glyph.width = pixmap.getWidth();
 			glyph.height = pixmap.getHeight();

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -535,7 +535,7 @@ public TextBounds drawWrapped (SpriteBatch spriteBatch, CharSequence str, float
 					lineEnd--;
 				}
 				if (lineEnd == start)
-					lineEnd = nextStart; // If no characters to break, show all.
+					lineEnd = nextStart - 1; // If no characters to break, show all.
 				else {
 					nextStart = lineEnd;
 					// Eat whitespace at end of line.
@@ -649,7 +649,7 @@ public TextBounds getWrappedBounds (CharSequence str, float wrapWidth) {
 					lineEnd--;
 				}
 				if (lineEnd == start)
-					lineEnd = nextStart; // If no characters to break, show all.
+					lineEnd = nextStart - 1; // If no characters to break, show all.
 				else {
 					nextStart = lineEnd;
 					// Eat whitespace at end of line.

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -346,7 +346,7 @@ public TextBounds setWrappedText (CharSequence str, float x, float y, float wrap
 					lineEnd--;
 				}
 				if (lineEnd == start)
-					lineEnd = nextStart; // If no characters to break, show all.
+					lineEnd = nextStart - 1; // If no characters to break, show all.
 				else {
 					nextStart = lineEnd;
 					// Eat whitespace at end of line.

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -152,7 +152,6 @@ public void layout () {
 		if (widget.width != widgetWidth || widget.height != widgetHeight) {
 			widget.width = widgetWidth;
 			widget.height = widgetHeight;
-			if (widget instanceof Layout) ((Layout)widget).invalidate();
 		}
 
 		// Set the bounds and scroll knob sizes if scrollbars are needed.

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -24,6 +24,7 @@
 import com.badlogic.gdx.tests.DecalTest;
 import com.badlogic.gdx.tests.DirtyRenderingTest;
 import com.badlogic.gdx.tests.FrameBufferTest;
+import com.badlogic.gdx.tests.FreeTypeTest;
 import com.badlogic.gdx.tests.InterpolationTest;
 import com.badlogic.gdx.tests.JpegTest;
 import com.badlogic.gdx.tests.ParallaxTest;
@@ -47,8 +48,9 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		new SharedLibraryLoader("../../extensions/gdx-stb-truetype/libs/gdx-stb-truetype-natives.jar").load("gdx-stb-truetype");
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
+		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
 		
-		GdxTest test = new UITest();
+		GdxTest test = new FreeTypeTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.width = 800;
 		config.height = 480;

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreetypeBuild.java
Patch:
@@ -112,6 +112,7 @@ public static void main (String[] args) throws Exception {
 		
 		new NativeCodeGenerator().generate();
 		new AntScriptGenerator().generate(new BuildConfig("gdx-freetype"), win32home, win32, win64, lin32, lin64, mac, android);
+//		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v clean");
 		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
 		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
 	}

File: extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeType.java
Patch:
@@ -331,10 +331,10 @@ public static void main (String[] args) throws Exception {
 		
 		byte[] font = new FileHandle("Roboto-Condensed.ttf").readBytes();
 		long face = FreeType.newMemoryFace(library, font, font.length, 0);
-		System.out.println(FreeType.setPixelSizes(face, 0, 16));
+		System.out.println(FreeType.setCharSize(face, 0, 16, 96, 96));
 		char left = 40;
 		char right = 74;
-		int kerning = FreeType.getKerning(face, left, right, FT_KERNING_DEFAULT);
+		int kerning = FreeType.getKerning(face, FreeType.getCharIndex(face,  left), FreeType.getCharIndex(face,  right), 0);
 		System.out.println(FreeType.hasKerning(face) + ", " + left + ", " + right + ", " + kerning);
 		System.out.println(FreeType.getCharIndex(face, '('));
 		FreeType.doneFace(face);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
Patch:
@@ -85,11 +85,9 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 
 		font.setColor(fontColorUnselected.r, fontColorUnselected.g, fontColorUnselected.b, fontColorUnselected.a * parentAlpha);
 		float itemY = height;
-		int drawn = 0;
 		for (int i = 0; i < items.length; i++) {
 			if (cullingArea == null || 
 				(itemY - itemHeight <= cullingArea.y + cullingArea.height && itemY >= cullingArea.y)) {
-				drawn++;
 				if (selected == i) {
 					selectedPatch.draw(batch, x, y + itemY - itemHeight, Math.max(prefWidth, width), itemHeight);
 					font.setColor(fontColorSelected.r, fontColorSelected.g, fontColorSelected.b, fontColorSelected.a * parentAlpha);
@@ -104,7 +102,6 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 			}
 			itemY -= itemHeight;
 		}
-		System.out.println(drawn + "/" + items.length);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -230,9 +230,9 @@ private void layout () {
 			itemHeight = font.getCapHeight() + -font.getDescent() * 2 + style.itemSpacing;
 			itemHeight += listSelection.getTopHeight() + listSelection.getBottomHeight();
 			itemHeight *= SelectBox.this.parent.scaleY;
-			prefWidth += listSelection.getLeftWidth() + listSelection.getRightWidth();
+			prefWidth += listSelection.getLeftWidth() + listSelection.getRightWidth() + 2 * style.itemSpacing;
 			prefHeight = items.length * itemHeight;
-			textOffsetX = listSelection.getLeftWidth();
+			textOffsetX = listSelection.getLeftWidth() + style.itemSpacing;
 			textOffsetY = listSelection.getTopHeight() + -font.getDescent() + style.itemSpacing / 2;
 
 			width = Math.max(prefWidth, SelectBox.this.width);

File: gdx/src/com/badlogic/gdx/math/Frustum.java
Patch:
@@ -102,7 +102,7 @@ public boolean sphereInFrustum (Vector3 center, float radius) {
 	 * @param radius The radius of the sphere
 	 * @return Wheter the sphere is in the frustum */
 	public boolean sphereInFrustumWithoutNearFar (Vector3 center, float radius) {
-		for (int i = 0; i < planes.length; i++)
+		for (int i = 2; i < planes.length; i++)
 			if (planes[i].distance(center) < -radius) return false;
 
 		return true;

File: extensions/gdx-image/src/com/badlogic/gdx/graphics/g2d/Jpeg.java
Patch:
@@ -23,7 +23,7 @@ public class Jpeg {
 	/**
 	 * Reads a jpeg from the given file, throws a GdxRuntimeException in case something went wrong.
 	 */
-	public static Pixmap read(FileHandle file) {
+	public static synchronized Pixmap read(FileHandle file) {
 		byte[] bytes = file.readBytes();
 		long[] out = new long[4];
 		ByteBuffer pixels = read(bytes, 0, bytes.length, out);

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TiledObject.java
Patch:
@@ -26,4 +26,6 @@ public class TiledObject {
 
 	/** Contains the object properties with a key of the property name. */
 	public HashMap<String, String> properties = new HashMap<String, String>();
+
+	public String polyline, polygon;
 }

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -185,7 +185,7 @@ void mainLoop () {
 					shouldRender = true;
 				}
 			} else {
-				if(Display.wasResized() || Display.getWidth() != graphics.config.width || Display.getHeight() != graphics.config.height) {
+				if(graphics.resize || Display.wasResized() || Display.getWidth() != graphics.config.width || Display.getHeight() != graphics.config.height) {
 					Gdx.gl.glViewport(0, 0, Display.getWidth(), Display.getHeight());
 					graphics.config.width = Display.getWidth();
 					graphics.config.height = Display.getHeight();

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -73,7 +73,7 @@ public static class BitmapFontData {
 		String imagePath;
 		final FileHandle fontFile;
 		final boolean flipped;
-		final float lineHeight;
+		float lineHeight;
 		float capHeight = 1;
 		float ascent;
 		float descent;
@@ -768,6 +768,7 @@ public Color getColor () {
 	}
 
 	public void setScale (float scaleX, float scaleY) {
+		data.lineHeight = data.lineHeight / this.data.scaleX * scaleX;
 		data.spaceWidth = data.spaceWidth / this.data.scaleX * scaleX;
 		data.xHeight = data.xHeight / this.data.scaleY * scaleY;
 		data.capHeight = data.capHeight / this.data.scaleY * scaleY;

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -115,12 +115,12 @@ public void addAll (T[] array) {
 
 	public void addAll (T[] array, int offset, int length) {
 		T[] items = this.items;
-		int sizeNeeded = size + length - offset;
-		if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
+		int sizeNeeded = size + length;
+		if (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));
 		System.arraycopy(array, offset, items, size, length);
 		size += length;
 	}
-
+	
 	public T get (int index) {
 		if (index >= size) throw new IndexOutOfBoundsException(String.valueOf(index));
 		return items[index];

File: gdx/src/com/badlogic/gdx/math/Matrix3.java
Patch:
@@ -161,7 +161,6 @@ public Matrix3 inv () {
 		if (det == 0) throw new GdxRuntimeException("Can't invert a singular matrix");
 
 		float inv_det = 1.0f / det;
-		float tmp[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 
 		tmp[0] = vals[4] * vals[8] - vals[5] * vals[7];
 		tmp[1] = vals[2] * vals[7] - vals[1] * vals[8];

File: extensions/gdx-image/src/com/badlogic/gdx/graphics/g2d/Jpeg.java
Patch:
@@ -16,6 +16,9 @@
  *
  */
 public class Jpeg {
+	static {
+		new SharedLibraryLoader().load("gdx-image");
+	}
 	
 	/**
 	 * Reads a jpeg from the given file, throws a GdxRuntimeException in case something went wrong.

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -34,6 +34,7 @@
 import com.badlogic.gdx.tests.SpriteBatchShaderTest;
 import com.badlogic.gdx.tests.StageTest;
 import com.badlogic.gdx.tests.StbTrueTypeTest;
+import com.badlogic.gdx.tests.TTFFactoryTest;
 import com.badlogic.gdx.tests.VorbisTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
@@ -46,7 +47,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-stb-truetype/libs/gdx-stb-truetype-natives.jar").load("gdx-stb-truetype");
 		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
 		
-		GdxTest test = new JpegTest();
+		GdxTest test = new TTFFactoryTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TTFFactoryTest.java
Patch:
@@ -26,7 +26,7 @@ public class TTFFactoryTest extends GdxTest {
 
 	private BitmapFont fontAtlasDroid;
 
-	public static final float FONT_SIZE = 1f;
+	public static final float FONT_SIZE = 0.5f;
 	public static final String FONT_CHARACTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789][_!$%#@|\\/?-+=()*&.;,{}\"´`'<>";
 	public static final String FONT_PATH = "data/DroidSerif-Regular.ttf";
 	private String text = "True type font =) Test <3";

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Loader.java
Patch:
@@ -122,9 +122,9 @@ private KeyframedModel buildModel (MD2Header header, MD2Triangle[] triangles, fl
 				newVerts[idx++] = frame.vertices[vIdx.vIdx * 3];
 				newVerts[idx++] = frame.vertices[vIdx.vIdx * 3 + 1];
 				newVerts[idx++] = frame.vertices[vIdx.vIdx * 3 + 2];
-				newVerts[idx++] = MD2Normals.normals[frame.normalIndices[vIdx.vIdx]][1] * 70;
-				newVerts[idx++] = MD2Normals.normals[frame.normalIndices[vIdx.vIdx]][2] * 70;
-				newVerts[idx++] = MD2Normals.normals[frame.normalIndices[vIdx.vIdx]][0] * 70;
+				newVerts[idx++] = MD2Normals.normals[frame.normalIndices[vIdx.vIdx]][1];
+				newVerts[idx++] = MD2Normals.normals[frame.normalIndices[vIdx.vIdx]][2];
+				newVerts[idx++] = MD2Normals.normals[frame.normalIndices[vIdx.vIdx]][0];
 			}
 			frame.vertices = newVerts;
 		}

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/BroadphaseNativeTypes.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/CProfileIterator.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class CProfileIterator {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public CProfileIterator(long cPtr, boolean cMemoryOwn) {
+  protected CProfileIterator(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/CProfileManager.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class CProfileManager {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public CProfileManager(long cPtr, boolean cMemoryOwn) {
+  protected CProfileManager(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/CProfileNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class CProfileNode {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public CProfileNode(long cPtr, boolean cMemoryOwn) {
+  protected CProfileNode(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/CProfileSample.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class CProfileSample {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public CProfileSample(long cPtr, boolean cMemoryOwn) {
+  protected CProfileSample(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/ClosestPointInput.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class ClosestPointInput {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public ClosestPointInput(long cPtr, boolean cMemoryOwn) {
+  protected ClosestPointInput(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/ConvexH.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class ConvexH {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public ConvexH(long cPtr, boolean cMemoryOwn) {
+  protected ConvexH(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/GrahamVector2.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class GrahamVector2 extends btVector3 {
   private long swigCPtr;
 
-  public GrahamVector2(long cPtr, boolean cMemoryOwn) {
+  protected GrahamVector2(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.GrahamVector2_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/HullDesc.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class HullDesc {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public HullDesc(long cPtr, boolean cMemoryOwn) {
+  protected HullDesc(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/HullError.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/HullFlag.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/HullLibrary.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class HullLibrary {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public HullLibrary(long cPtr, boolean cMemoryOwn) {
+  protected HullLibrary(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/HullResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class HullResult {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public HullResult(long cPtr, boolean cMemoryOwn) {
+  protected HullResult(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/PHY_ScalarType.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/PHullResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class PHullResult {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public PHullResult(long cPtr, boolean cMemoryOwn) {
+  protected PHullResult(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/Result.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class Result {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public Result(long cPtr, boolean cMemoryOwn) {
+  protected Result(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_PHY_ScalarType.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_PHY_ScalarType() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_PHY_ScalarType obj) {
+  public static long getCPtr(SWIGTYPE_p_PHY_ScalarType obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_ConvexH__HalfEdge_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_ConvexH__HalfEdge_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_ConvexH__HalfEdge_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_ConvexH__HalfEdge_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_GrahamVector2_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_GrahamVector2_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_GrahamVector2_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_GrahamVector2_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_btConvexHullComputer__Edge_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_btConvexHullComputer__Edge_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btConvexHullComputer__Edge_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btConvexHullComputer__Edge_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_btFace_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_btFace_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btFace_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btFace_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_btPlane_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_btPlane_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btPlane_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btPlane_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_int_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_int_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_int_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_int_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btAlignedObjectArrayT_unsigned_int_t.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btAlignedObjectArrayT_unsigned_int_t() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_unsigned_int_t obj) {
+  public static long getCPtr(SWIGTYPE_p_btAlignedObjectArrayT_unsigned_int_t obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btCollisionWorld__ContactResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btCollisionWorld__ContactResultCallback() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btCollisionWorld__ContactResultCallback obj) {
+  public static long getCPtr(SWIGTYPE_p_btCollisionWorld__ContactResultCallback obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btCollisionWorld__ConvexResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btCollisionWorld__ConvexResultCallback() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btCollisionWorld__ConvexResultCallback obj) {
+  public static long getCPtr(SWIGTYPE_p_btCollisionWorld__ConvexResultCallback obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btCollisionWorld__RayResultCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btCollisionWorld__RayResultCallback() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btCollisionWorld__RayResultCallback obj) {
+  public static long getCPtr(SWIGTYPE_p_btCollisionWorld__RayResultCallback obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btConvexCast__CastResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btConvexCast__CastResult() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btConvexCast__CastResult obj) {
+  public static long getCPtr(SWIGTYPE_p_btConvexCast__CastResult obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btDbvt__IClone.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btDbvt__IClone() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btDbvt__IClone obj) {
+  public static long getCPtr(SWIGTYPE_p_btDbvt__IClone obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btDbvt__ICollide.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btDbvt__ICollide() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btDbvt__ICollide obj) {
+  public static long getCPtr(SWIGTYPE_p_btDbvt__ICollide obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btDbvt__IWriter.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btDbvt__IWriter() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btDbvt__IWriter obj) {
+  public static long getCPtr(SWIGTYPE_p_btDbvt__IWriter obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btDbvt__sStkNPS.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btDbvt__sStkNPS() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btDbvt__sStkNPS obj) {
+  public static long getCPtr(SWIGTYPE_p_btDbvt__sStkNPS obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result obj) {
+  public static long getCPtr(SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btGjkEpaSolver2__sResults.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btGjkEpaSolver2__sResults() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btGjkEpaSolver2__sResults obj) {
+  public static long getCPtr(SWIGTYPE_p_btGjkEpaSolver2__sResults obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btMatrix3x3DoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btMatrix3x3DoubleData() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btMatrix3x3DoubleData obj) {
+  public static long getCPtr(SWIGTYPE_p_btMatrix3x3DoubleData obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btMatrix3x3FloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btMatrix3x3FloatData() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btMatrix3x3FloatData obj) {
+  public static long getCPtr(SWIGTYPE_p_btMatrix3x3FloatData obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btMultiSapBroadphase__btMultiSapProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btMultiSapBroadphase__btMultiSapProxy() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btMultiSapBroadphase__btMultiSapProxy obj) {
+  public static long getCPtr(SWIGTYPE_p_btMultiSapBroadphase__btMultiSapProxy obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btSerializer.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btSerializer() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btSerializer obj) {
+  public static long getCPtr(SWIGTYPE_p_btSerializer obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btSimplexSolverInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btSimplexSolverInterface() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btSimplexSolverInterface obj) {
+  public static long getCPtr(SWIGTYPE_p_btSimplexSolverInterface obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btSimulationIslandManager__IslandCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btSimulationIslandManager__IslandCallback() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btSimulationIslandManager__IslandCallback obj) {
+  public static long getCPtr(SWIGTYPE_p_btSimulationIslandManager__IslandCallback obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_btTypedConstraint__btConstraintInfo1() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 obj) {
+  public static long getCPtr(SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_double.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_double() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_double obj) {
+  public static long getCPtr(SWIGTYPE_p_double obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_f_p_btDynamicsWorld_float__void.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_f_p_btDynamicsWorld_float__void() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_f_p_btDynamicsWorld_float__void obj) {
+  public static long getCPtr(SWIGTYPE_p_f_p_btDynamicsWorld_float__void obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_f_p_void__bool.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_f_p_void__bool() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_f_p_void__bool obj) {
+  public static long getCPtr(SWIGTYPE_p_f_p_void__bool obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_f_p_void__void.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_f_p_void__void() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_f_p_void__void obj) {
+  public static long getCPtr(SWIGTYPE_p_f_p_void__void obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btD
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void obj) {
+  public static long getCPtr(SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObject_int_int_p_q_const__btCollisionObject_int_int__bool.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObject_int_int_p_
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObject_int_int_p_q_const__btCollisionObject_int_int__bool obj) {
+  public static long getCPtr(SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObject_int_int_p_q_const__btCollisionObject_int_int__bool obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_f_r_btManifoldPoint_p_void_p_void__bool.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_f_r_btManifoldPoint_p_void_p_void__bool() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_f_r_btManifoldPoint_p_void_p_void__bool obj) {
+  public static long getCPtr(SWIGTYPE_p_f_r_btManifoldPoint_p_void_p_void__bool obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_f_size_t__p_void.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_f_size_t__p_void() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_f_size_t__p_void obj) {
+  public static long getCPtr(SWIGTYPE_p_f_size_t__p_void obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_f_size_t_int__p_void.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_f_size_t_int__p_void() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_f_size_t_int__p_void obj) {
+  public static long getCPtr(SWIGTYPE_p_f_size_t_int__p_void obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_float.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_float() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_float obj) {
+  public static long getCPtr(SWIGTYPE_p_float obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_int.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_int() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_int obj) {
+  public static long getCPtr(SWIGTYPE_p_int obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_p_btCollisionObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_p_btCollisionObject() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_p_btCollisionObject obj) {
+  public static long getCPtr(SWIGTYPE_p_p_btCollisionObject obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_p_btDbvtProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_p_btDbvtProxy() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_p_btDbvtProxy obj) {
+  public static long getCPtr(SWIGTYPE_p_p_btDbvtProxy obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_p_btPersistentManifold.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_p_btPersistentManifold() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_p_btPersistentManifold obj) {
+  public static long getCPtr(SWIGTYPE_p_p_btPersistentManifold obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_p_btTypedConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_p_btTypedConstraint() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_p_btTypedConstraint obj) {
+  public static long getCPtr(SWIGTYPE_p_p_btTypedConstraint obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_p_btVector3.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_p_btVector3() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_p_btVector3 obj) {
+  public static long getCPtr(SWIGTYPE_p_p_btVector3 obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_p_unsigned_char.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_p_unsigned_char() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_p_unsigned_char obj) {
+  public static long getCPtr(SWIGTYPE_p_p_unsigned_char obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_unsigned_char.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_unsigned_char() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_unsigned_char obj) {
+  public static long getCPtr(SWIGTYPE_p_unsigned_char obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_unsigned_int.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_unsigned_int() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_unsigned_int obj) {
+  public static long getCPtr(SWIGTYPE_p_unsigned_int obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_unsigned_short.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_unsigned_short() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_unsigned_short obj) {
+  public static long getCPtr(SWIGTYPE_p_unsigned_short obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SWIGTYPE_p_void.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -19,7 +19,7 @@ protected SWIGTYPE_p_void() {
     swigCPtr = 0;
   }
 
-  protected static long getCPtr(SWIGTYPE_p_void obj) {
+  public static long getCPtr(SWIGTYPE_p_void obj) {
     return (obj == null) ? 0 : obj.swigCPtr;
   }
 }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/SphereTriangleDetector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class SphereTriangleDetector {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public SphereTriangleDetector(long cPtr, boolean cMemoryOwn) {
+  protected SphereTriangleDetector(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/bt32BitAxisSweep3.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class bt32BitAxisSweep3 {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public bt32BitAxisSweep3(long cPtr, boolean cMemoryOwn) {
+  protected bt32BitAxisSweep3(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/bt6DofFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btActionInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btActionInterface {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btActionInterface(long cPtr, boolean cMemoryOwn) {
+  protected btActionInterface(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btActivatingCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btActivatingCollisionAlgorithm extends btCollisionAlgorithm {
   private long swigCPtr;
 
-  public btActivatingCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
+  protected btActivatingCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btActivatingCollisionAlgorithm_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btAngleCompareFunc.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btAngleCompareFunc {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btAngleCompareFunc(long cPtr, boolean cMemoryOwn) {
+  protected btAngleCompareFunc(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btAngularLimit.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btAngularLimit {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btAngularLimit(long cPtr, boolean cMemoryOwn) {
+  protected btAngularLimit(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btAxisSweep3.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btAxisSweep3 {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btAxisSweep3(long cPtr, boolean cMemoryOwn) {
+  protected btAxisSweep3(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBU_Simplex1to4.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btBU_Simplex1to4 extends btPolyhedralConvexAabbCachingShape {
   private long swigCPtr;
 
-  public btBU_Simplex1to4(long cPtr, boolean cMemoryOwn) {
+  protected btBU_Simplex1to4(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btBU_Simplex1to4_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBlock.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btBlock {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btBlock(long cPtr, boolean cMemoryOwn) {
+  protected btBlock(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBox2dBox2dCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btBox2dBox2dCollisionAlgorithm extends btActivatingCollisionAlgorithm {
   private long swigCPtr;
 
-  public btBox2dBox2dCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
+  protected btBox2dBox2dCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btBox2dBox2dCollisionAlgorithm_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBox2dShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btBox2dShape extends btPolyhedralConvexShape {
   private long swigCPtr;
 
-  public btBox2dShape(long cPtr, boolean cMemoryOwn) {
+  protected btBox2dShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btBox2dShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBoxBoxCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btBoxBoxCollisionAlgorithm extends btActivatingCollisionAlgorithm {
   private long swigCPtr;
 
-  public btBoxBoxCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
+  protected btBoxBoxCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btBoxBoxCollisionAlgorithm_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBoxBoxDetector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btBoxBoxDetector {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btBoxBoxDetector(long cPtr, boolean cMemoryOwn) {
+  protected btBoxBoxDetector(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBoxShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btBoxShape extends btPolyhedralConvexShape {
   private long swigCPtr;
 
-  public btBoxShape(long cPtr, boolean cMemoryOwn) {
+  protected btBoxShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btBoxShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBroadphaseAabbCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btBroadphaseAabbCallback {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btBroadphaseAabbCallback(long cPtr, boolean cMemoryOwn) {
+  protected btBroadphaseAabbCallback(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBroadphaseInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btBroadphaseInterface {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btBroadphaseInterface(long cPtr, boolean cMemoryOwn) {
+  protected btBroadphaseInterface(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBroadphasePair.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btBroadphasePair {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btBroadphasePair(long cPtr, boolean cMemoryOwn) {
+  protected btBroadphasePair(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBroadphasePairSortPredicate.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btBroadphasePairSortPredicate {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btBroadphasePairSortPredicate(long cPtr, boolean cMemoryOwn) {
+  protected btBroadphasePairSortPredicate(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBroadphaseProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btBroadphaseProxy {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btBroadphaseProxy(long cPtr, boolean cMemoryOwn) {
+  protected btBroadphaseProxy(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBroadphaseRayCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btBroadphaseRayCallback extends btBroadphaseAabbCallback {
   private long swigCPtr;
 
-  public btBroadphaseRayCallback(long cPtr, boolean cMemoryOwn) {
+  protected btBroadphaseRayCallback(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btBroadphaseRayCallback_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBvhSubtreeInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btBvhSubtreeInfo {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btBvhSubtreeInfo(long cPtr, boolean cMemoryOwn) {
+  protected btBvhSubtreeInfo(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBvhSubtreeInfoData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btBvhSubtreeInfoData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btBvhSubtreeInfoData(long cPtr, boolean cMemoryOwn) {
+  protected btBvhSubtreeInfoData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBvhTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btBvhTriangleMeshShape extends btTriangleMeshShape {
   private long swigCPtr;
 
-  public btBvhTriangleMeshShape(long cPtr, boolean cMemoryOwn) {
+  protected btBvhTriangleMeshShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btBvhTriangleMeshShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCapsuleShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btCapsuleShape extends btConvexInternalShape {
   private long swigCPtr;
 
-  public btCapsuleShape(long cPtr, boolean cMemoryOwn) {
+  protected btCapsuleShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btCapsuleShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCapsuleShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCapsuleShapeData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCapsuleShapeData(long cPtr, boolean cMemoryOwn) {
+  protected btCapsuleShapeData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCapsuleShapeX.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btCapsuleShapeX extends btCapsuleShape {
   private long swigCPtr;
 
-  public btCapsuleShapeX(long cPtr, boolean cMemoryOwn) {
+  protected btCapsuleShapeX(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btCapsuleShapeX_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCapsuleShapeZ.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btCapsuleShapeZ extends btCapsuleShape {
   private long swigCPtr;
 
-  public btCapsuleShapeZ(long cPtr, boolean cMemoryOwn) {
+  protected btCapsuleShapeZ(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btCapsuleShapeZ_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCharIndexTripletData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCharIndexTripletData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCharIndexTripletData(long cPtr, boolean cMemoryOwn) {
+  protected btCharIndexTripletData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCharacterControllerInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btCharacterControllerInterface extends btActionInterface {
   private long swigCPtr;
 
-  public btCharacterControllerInterface(long cPtr, boolean cMemoryOwn) {
+  protected btCharacterControllerInterface(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btCharacterControllerInterface_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btClock.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btClock {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btClock(long cPtr, boolean cMemoryOwn) {
+  protected btClock(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCollisionAlgorithm {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
+  protected btCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCollisionAlgorithmConstructionInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCollisionAlgorithmConstructionInfo {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCollisionAlgorithmConstructionInfo(long cPtr, boolean cMemoryOwn) {
+  protected btCollisionAlgorithmConstructionInfo(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCollisionAlgorithmCreateFunc.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCollisionAlgorithmCreateFunc {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCollisionAlgorithmCreateFunc(long cPtr, boolean cMemoryOwn) {
+  protected btCollisionAlgorithmCreateFunc(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCollisionConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCollisionConfiguration {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCollisionConfiguration(long cPtr, boolean cMemoryOwn) {
+  protected btCollisionConfiguration(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCollisionDispatcher.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btCollisionDispatcher extends btDispatcher {
   private long swigCPtr;
 
-  public btCollisionDispatcher(long cPtr, boolean cMemoryOwn) {
+  protected btCollisionDispatcher(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btCollisionDispatcher_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCollisionObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCollisionObject {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCollisionObject(long cPtr, boolean cMemoryOwn) {
+  protected btCollisionObject(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCollisionObjectArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCollisionObjectArray {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCollisionObjectArray(long cPtr, boolean cMemoryOwn) {
+  protected btCollisionObjectArray(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCollisionObjectDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCollisionObjectDoubleData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCollisionObjectDoubleData(long cPtr, boolean cMemoryOwn) {
+  protected btCollisionObjectDoubleData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCollisionObjectFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCollisionObjectFloatData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCollisionObjectFloatData(long cPtr, boolean cMemoryOwn) {
+  protected btCollisionObjectFloatData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCollisionShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCollisionShape {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCollisionShape(long cPtr, boolean cMemoryOwn) {
+  protected btCollisionShape(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCollisionShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCollisionShapeData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCollisionShapeData(long cPtr, boolean cMemoryOwn) {
+  protected btCollisionShapeData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCollisionWorld.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCollisionWorld {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCollisionWorld(long cPtr, boolean cMemoryOwn) {
+  protected btCollisionWorld(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCompoundCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btCompoundCollisionAlgorithm extends btActivatingCollisionAlgorithm {
   private long swigCPtr;
 
-  public btCompoundCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
+  protected btCompoundCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btCompoundCollisionAlgorithm_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCompoundShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btCompoundShape extends btCollisionShape {
   private long swigCPtr;
 
-  public btCompoundShape(long cPtr, boolean cMemoryOwn) {
+  protected btCompoundShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btCompoundShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCompoundShapeChild.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCompoundShapeChild {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCompoundShapeChild(long cPtr, boolean cMemoryOwn) {
+  protected btCompoundShapeChild(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCompoundShapeChildData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCompoundShapeChildData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCompoundShapeChildData(long cPtr, boolean cMemoryOwn) {
+  protected btCompoundShapeChildData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCompoundShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCompoundShapeData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCompoundShapeData(long cPtr, boolean cMemoryOwn) {
+  protected btCompoundShapeData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConcaveShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConcaveShape extends btCollisionShape {
   private long swigCPtr;
 
-  public btConcaveShape(long cPtr, boolean cMemoryOwn) {
+  protected btConcaveShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConcaveShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConeShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConeShape extends btConvexInternalShape {
   private long swigCPtr;
 
-  public btConeShape(long cPtr, boolean cMemoryOwn) {
+  protected btConeShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConeShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConeShapeX.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConeShapeX extends btConeShape {
   private long swigCPtr;
 
-  public btConeShapeX(long cPtr, boolean cMemoryOwn) {
+  protected btConeShapeX(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConeShapeX_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConeShapeZ.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConeShapeZ extends btConeShape {
   private long swigCPtr;
 
-  public btConeShapeZ(long cPtr, boolean cMemoryOwn) {
+  protected btConeShapeZ(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConeShapeZ_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConeTwistConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConeTwistConstraint extends btTypedConstraint {
   private long swigCPtr;
 
-  public btConeTwistConstraint(long cPtr, boolean cMemoryOwn) {
+  protected btConeTwistConstraint(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConeTwistConstraint_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConeTwistConstraintData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btConeTwistConstraintData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btConeTwistConstraintData(long cPtr, boolean cMemoryOwn) {
+  protected btConeTwistConstraintData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConeTwistFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConstraintInfo2.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btConstraintInfo2 {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btConstraintInfo2(long cPtr, boolean cMemoryOwn) {
+  protected btConstraintInfo2(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConstraintParams.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConstraintRow.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btConstraintRow {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btConstraintRow(long cPtr, boolean cMemoryOwn) {
+  protected btConstraintRow(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConstraintSetting.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btConstraintSetting {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btConstraintSetting(long cPtr, boolean cMemoryOwn) {
+  protected btConstraintSetting(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConstraintSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btConstraintSolver {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btConstraintSolver(long cPtr, boolean cMemoryOwn) {
+  protected btConstraintSolver(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btContactConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btContactConstraint extends btTypedConstraint {
   private long swigCPtr;
 
-  public btContactConstraint(long cPtr, boolean cMemoryOwn) {
+  protected btContactConstraint(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btContactConstraint_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btContactManifoldTypes.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btContactSolverInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btContactSolverInfo extends btContactSolverInfoData {
   private long swigCPtr;
 
-  public btContactSolverInfo(long cPtr, boolean cMemoryOwn) {
+  protected btContactSolverInfo(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btContactSolverInfo_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btContactSolverInfoData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btContactSolverInfoData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btContactSolverInfoData(long cPtr, boolean cMemoryOwn) {
+  protected btContactSolverInfoData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btContinuousConvexCollision.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btContinuousConvexCollision extends btConvexCast {
   private long swigCPtr;
 
-  public btContinuousConvexCollision(long cPtr, boolean cMemoryOwn) {
+  protected btContinuousConvexCollision(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btContinuousConvexCollision_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvex2dConvex2dAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConvex2dConvex2dAlgorithm extends btActivatingCollisionAlgorithm {
   private long swigCPtr;
 
-  public btConvex2dConvex2dAlgorithm(long cPtr, boolean cMemoryOwn) {
+  protected btConvex2dConvex2dAlgorithm(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConvex2dConvex2dAlgorithm_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvex2dShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConvex2dShape extends btConvexShape {
   private long swigCPtr;
 
-  public btConvex2dShape(long cPtr, boolean cMemoryOwn) {
+  protected btConvex2dShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConvex2dShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexCast.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btConvexCast {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btConvexCast(long cPtr, boolean cMemoryOwn) {
+  protected btConvexCast(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexConcaveCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConvexConcaveCollisionAlgorithm extends btActivatingCollisionAlgorithm {
   private long swigCPtr;
 
-  public btConvexConcaveCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
+  protected btConvexConcaveCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConvexConcaveCollisionAlgorithm_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexConvexAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConvexConvexAlgorithm extends btActivatingCollisionAlgorithm {
   private long swigCPtr;
 
-  public btConvexConvexAlgorithm(long cPtr, boolean cMemoryOwn) {
+  protected btConvexConvexAlgorithm(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConvexConvexAlgorithm_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexHullComputer.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btConvexHullComputer {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btConvexHullComputer(long cPtr, boolean cMemoryOwn) {
+  protected btConvexHullComputer(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexHullShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConvexHullShape extends btPolyhedralConvexAabbCachingShape {
   private long swigCPtr;
 
-  public btConvexHullShape(long cPtr, boolean cMemoryOwn) {
+  protected btConvexHullShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConvexHullShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexHullShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btConvexHullShapeData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btConvexHullShapeData(long cPtr, boolean cMemoryOwn) {
+  protected btConvexHullShapeData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexInternalAabbCachingShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConvexInternalAabbCachingShape extends btConvexInternalShape {
   private long swigCPtr;
 
-  public btConvexInternalAabbCachingShape(long cPtr, boolean cMemoryOwn) {
+  protected btConvexInternalAabbCachingShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConvexInternalAabbCachingShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexInternalShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConvexInternalShape extends btConvexShape {
   private long swigCPtr;
 
-  public btConvexInternalShape(long cPtr, boolean cMemoryOwn) {
+  protected btConvexInternalShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConvexInternalShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexInternalShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btConvexInternalShapeData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btConvexInternalShapeData(long cPtr, boolean cMemoryOwn) {
+  protected btConvexInternalShapeData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexPenetrationDepthSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btConvexPenetrationDepthSolver {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btConvexPenetrationDepthSolver(long cPtr, boolean cMemoryOwn) {
+  protected btConvexPenetrationDepthSolver(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexPlaneCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConvexPlaneCollisionAlgorithm extends btCollisionAlgorithm {
   private long swigCPtr;
 
-  public btConvexPlaneCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
+  protected btConvexPlaneCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConvexPlaneCollisionAlgorithm_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexPointCloudShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConvexPointCloudShape extends btPolyhedralConvexAabbCachingShape {
   private long swigCPtr;
 
-  public btConvexPointCloudShape(long cPtr, boolean cMemoryOwn) {
+  protected btConvexPointCloudShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConvexPointCloudShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexPolyhedron.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btConvexPolyhedron {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btConvexPolyhedron(long cPtr, boolean cMemoryOwn) {
+  protected btConvexPolyhedron(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexSeparatingDistanceUtil.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btConvexSeparatingDistanceUtil {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btConvexSeparatingDistanceUtil(long cPtr, boolean cMemoryOwn) {
+  protected btConvexSeparatingDistanceUtil(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConvexShape extends btCollisionShape {
   private long swigCPtr;
 
-  public btConvexShape(long cPtr, boolean cMemoryOwn) {
+  protected btConvexShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConvexShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexTriangleCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConvexTriangleCallback extends btTriangleCallback {
   private long swigCPtr;
 
-  public btConvexTriangleCallback(long cPtr, boolean cMemoryOwn) {
+  protected btConvexTriangleCallback(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConvexTriangleCallback_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btConvexTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btConvexTriangleMeshShape extends btPolyhedralConvexAabbCachingShape {
   private long swigCPtr;
 
-  public btConvexTriangleMeshShape(long cPtr, boolean cMemoryOwn) {
+  protected btConvexTriangleMeshShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btConvexTriangleMeshShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCylinderShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btCylinderShape extends btConvexInternalShape {
   private long swigCPtr;
 
-  public btCylinderShape(long cPtr, boolean cMemoryOwn) {
+  protected btCylinderShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btCylinderShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCylinderShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btCylinderShapeData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btCylinderShapeData(long cPtr, boolean cMemoryOwn) {
+  protected btCylinderShapeData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCylinderShapeX.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btCylinderShapeX extends btCylinderShape {
   private long swigCPtr;
 
-  public btCylinderShapeX(long cPtr, boolean cMemoryOwn) {
+  protected btCylinderShapeX(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btCylinderShapeX_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btCylinderShapeZ.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btCylinderShapeZ extends btCylinderShape {
   private long swigCPtr;
 
-  public btCylinderShapeZ(long cPtr, boolean cMemoryOwn) {
+  protected btCylinderShapeZ(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btCylinderShapeZ_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btDbvt.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btDbvt {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btDbvt(long cPtr, boolean cMemoryOwn) {
+  protected btDbvt(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btDbvtAabbMm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btDbvtAabbMm {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btDbvtAabbMm(long cPtr, boolean cMemoryOwn) {
+  protected btDbvtAabbMm(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btDbvtBroadphase.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btDbvtBroadphase extends btBroadphaseInterface {
   private long swigCPtr;
 
-  public btDbvtBroadphase(long cPtr, boolean cMemoryOwn) {
+  protected btDbvtBroadphase(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btDbvtBroadphase_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btDbvtNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btDbvtNode {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btDbvtNode(long cPtr, boolean cMemoryOwn) {
+  protected btDbvtNode(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btDbvtProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btDbvtProxy extends btBroadphaseProxy {
   private long swigCPtr;
 
-  public btDbvtProxy(long cPtr, boolean cMemoryOwn) {
+  protected btDbvtProxy(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btDbvtProxy_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btDefaultCollisionConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btDefaultCollisionConfiguration extends btCollisionConfiguration {
   private long swigCPtr;
 
-  public btDefaultCollisionConfiguration(long cPtr, boolean cMemoryOwn) {
+  protected btDefaultCollisionConfiguration(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btDefaultCollisionConfiguration_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btDefaultCollisionConstructionInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btDefaultCollisionConstructionInfo {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btDefaultCollisionConstructionInfo(long cPtr, boolean cMemoryOwn) {
+  protected btDefaultCollisionConstructionInfo(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btDefaultMotionState.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btDefaultMotionState extends btMotionState {
   private long swigCPtr;
 
-  public btDefaultMotionState(long cPtr, boolean cMemoryOwn) {
+  protected btDefaultMotionState(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btDefaultMotionState_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btDiscreteDynamicsWorld.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btDiscreteDynamicsWorld extends btDynamicsWorld {
   private long swigCPtr;
 
-  public btDiscreteDynamicsWorld(long cPtr, boolean cMemoryOwn) {
+  protected btDiscreteDynamicsWorld(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btDiscreteDynamicsWorld_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btDispatcher.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btDispatcher {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btDispatcher(long cPtr, boolean cMemoryOwn) {
+  protected btDispatcher(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btDispatcherInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btDispatcherInfo {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btDispatcherInfo(long cPtr, boolean cMemoryOwn) {
+  protected btDispatcherInfo(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btDynamicsWorld.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btDynamicsWorld extends btCollisionWorld {
   private long swigCPtr;
 
-  public btDynamicsWorld(long cPtr, boolean cMemoryOwn) {
+  protected btDynamicsWorld(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btDynamicsWorld_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btDynamicsWorldType.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btElement.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btElement {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btElement(long cPtr, boolean cMemoryOwn) {
+  protected btElement(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btEmptyAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btEmptyAlgorithm extends btCollisionAlgorithm {
   private long swigCPtr;
 
-  public btEmptyAlgorithm(long cPtr, boolean cMemoryOwn) {
+  protected btEmptyAlgorithm(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btEmptyAlgorithm_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btEmptyShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btEmptyShape extends btConcaveShape {
   private long swigCPtr;
 
-  public btEmptyShape(long cPtr, boolean cMemoryOwn) {
+  protected btEmptyShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btEmptyShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btFace.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btFace {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btFace(long cPtr, boolean cMemoryOwn) {
+  protected btFace(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btGEN_Link.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btGEN_Link {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btGEN_Link(long cPtr, boolean cMemoryOwn) {
+  protected btGEN_Link(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btGEN_List.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btGEN_List {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btGEN_List(long cPtr, boolean cMemoryOwn) {
+  protected btGEN_List(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btGeneric6DofConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btGeneric6DofConstraint extends btTypedConstraint {
   private long swigCPtr;
 
-  public btGeneric6DofConstraint(long cPtr, boolean cMemoryOwn) {
+  protected btGeneric6DofConstraint(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btGeneric6DofConstraint_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btGeneric6DofConstraintData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btGeneric6DofConstraintData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btGeneric6DofConstraintData(long cPtr, boolean cMemoryOwn) {
+  protected btGeneric6DofConstraintData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btGeneric6DofSpringConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btGeneric6DofSpringConstraint extends btGeneric6DofConstraint {
   private long swigCPtr;
 
-  public btGeneric6DofSpringConstraint(long cPtr, boolean cMemoryOwn) {
+  protected btGeneric6DofSpringConstraint(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btGeneric6DofSpringConstraint_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btGeneric6DofSpringConstraintData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btGeneric6DofSpringConstraintData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btGeneric6DofSpringConstraintData(long cPtr, boolean cMemoryOwn) {
+  protected btGeneric6DofSpringConstraintData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btGeometryUtil.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btGeometryUtil {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btGeometryUtil(long cPtr, boolean cMemoryOwn) {
+  protected btGeometryUtil(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btGhostObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btGhostObject extends btCollisionObject {
   private long swigCPtr;
 
-  public btGhostObject(long cPtr, boolean cMemoryOwn) {
+  protected btGhostObject(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btGhostObject_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btGhostPairCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btGhostPairCallback extends btOverlappingPairCallback {
   private long swigCPtr;
 
-  public btGhostPairCallback(long cPtr, boolean cMemoryOwn) {
+  protected btGhostPairCallback(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btGhostPairCallback_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btGjkConvexCast.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btGjkConvexCast extends btConvexCast {
   private long swigCPtr;
 
-  public btGjkConvexCast(long cPtr, boolean cMemoryOwn) {
+  protected btGjkConvexCast(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btGjkConvexCast_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btGjkEpaPenetrationDepthSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btGjkEpaPenetrationDepthSolver extends btConvexPenetrationDepthSolver {
   private long swigCPtr;
 
-  public btGjkEpaPenetrationDepthSolver(long cPtr, boolean cMemoryOwn) {
+  protected btGjkEpaPenetrationDepthSolver(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btGjkEpaPenetrationDepthSolver_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btGjkEpaSolver2.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btGjkEpaSolver2 {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btGjkEpaSolver2(long cPtr, boolean cMemoryOwn) {
+  protected btGjkEpaSolver2(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btGjkPairDetector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btGjkPairDetector {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btGjkPairDetector(long cPtr, boolean cMemoryOwn) {
+  protected btGjkPairDetector(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btHashInt.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btHashInt {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btHashInt(long cPtr, boolean cMemoryOwn) {
+  protected btHashInt(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btHashPtr.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btHashPtr {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btHashPtr(long cPtr, boolean cMemoryOwn) {
+  protected btHashPtr(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btHashString.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btHashString {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btHashString(long cPtr, boolean cMemoryOwn) {
+  protected btHashString(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btHashedOverlappingPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btHashedOverlappingPairCache extends btOverlappingPairCache {
   private long swigCPtr;
 
-  public btHashedOverlappingPairCache(long cPtr, boolean cMemoryOwn) {
+  protected btHashedOverlappingPairCache(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btHashedOverlappingPairCache_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btHeightfieldTerrainShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btHeightfieldTerrainShape extends btConcaveShape {
   private long swigCPtr;
 
-  public btHeightfieldTerrainShape(long cPtr, boolean cMemoryOwn) {
+  protected btHeightfieldTerrainShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btHeightfieldTerrainShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btHinge2Constraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btHinge2Constraint extends btGeneric6DofSpringConstraint {
   private long swigCPtr;
 
-  public btHinge2Constraint(long cPtr, boolean cMemoryOwn) {
+  protected btHinge2Constraint(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btHinge2Constraint_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btHingeConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btHingeConstraint extends btTypedConstraint {
   private long swigCPtr;
 
-  public btHingeConstraint(long cPtr, boolean cMemoryOwn) {
+  protected btHingeConstraint(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btHingeConstraint_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btHingeConstraintDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btHingeConstraintDoubleData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btHingeConstraintDoubleData(long cPtr, boolean cMemoryOwn) {
+  protected btHingeConstraintDoubleData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btHingeConstraintFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btHingeConstraintFloatData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btHingeConstraintFloatData(long cPtr, boolean cMemoryOwn) {
+  protected btHingeConstraintFloatData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btHingeFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btIDebugDraw.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btIDebugDraw {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btIDebugDraw(long cPtr, boolean cMemoryOwn) {
+  protected btIDebugDraw(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btIndexedMesh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btIndexedMesh {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btIndexedMesh(long cPtr, boolean cMemoryOwn) {
+  protected btIndexedMesh(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btIntIndexData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btIntIndexData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btIntIndexData(long cPtr, boolean cMemoryOwn) {
+  protected btIntIndexData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btInternalEdgeAdjustFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btInternalTriangleIndexCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btInternalTriangleIndexCallback {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btInternalTriangleIndexCallback(long cPtr, boolean cMemoryOwn) {
+  protected btInternalTriangleIndexCallback(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btJacobianEntry.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btJacobianEntry {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btJacobianEntry(long cPtr, boolean cMemoryOwn) {
+  protected btJacobianEntry(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btKinematicCharacterController.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btKinematicCharacterController extends btCharacterControllerInterface {
   private long swigCPtr;
 
-  public btKinematicCharacterController(long cPtr, boolean cMemoryOwn) {
+  protected btKinematicCharacterController(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btKinematicCharacterController_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btManifoldPoint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btManifoldPoint {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btManifoldPoint(long cPtr, boolean cMemoryOwn) {
+  protected btManifoldPoint(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btManifoldResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btManifoldResult {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btManifoldResult(long cPtr, boolean cMemoryOwn) {
+  protected btManifoldResult(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btMaterial.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btMaterial {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btMaterial(long cPtr, boolean cMemoryOwn) {
+  protected btMaterial(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btMaterialProperties.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btMaterialProperties {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btMaterialProperties(long cPtr, boolean cMemoryOwn) {
+  protected btMaterialProperties(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btMeshPartData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btMeshPartData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btMeshPartData(long cPtr, boolean cMemoryOwn) {
+  protected btMeshPartData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btMinkowskiPenetrationDepthSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btMinkowskiPenetrationDepthSolver extends btConvexPenetrationDepthSolver {
   private long swigCPtr;
 
-  public btMinkowskiPenetrationDepthSolver(long cPtr, boolean cMemoryOwn) {
+  protected btMinkowskiPenetrationDepthSolver(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btMinkowskiPenetrationDepthSolver_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btMinkowskiSumShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btMinkowskiSumShape extends btConvexInternalShape {
   private long swigCPtr;
 
-  public btMinkowskiSumShape(long cPtr, boolean cMemoryOwn) {
+  protected btMinkowskiSumShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btMinkowskiSumShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btMotionState.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btMotionState {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btMotionState(long cPtr, boolean cMemoryOwn) {
+  protected btMotionState(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btMultiSapBroadphase.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btMultiSapBroadphase extends btBroadphaseInterface {
   private long swigCPtr;
 
-  public btMultiSapBroadphase(long cPtr, boolean cMemoryOwn) {
+  protected btMultiSapBroadphase(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btMultiSapBroadphase_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btMultiSphereShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btMultiSphereShape extends btConvexInternalAabbCachingShape {
   private long swigCPtr;
 
-  public btMultiSphereShape(long cPtr, boolean cMemoryOwn) {
+  protected btMultiSphereShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btMultiSphereShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btMultiSphereShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btMultiSphereShapeData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btMultiSphereShapeData(long cPtr, boolean cMemoryOwn) {
+  protected btMultiSphereShapeData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btMultimaterialTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btMultimaterialTriangleMeshShape extends btBvhTriangleMeshShape {
   private long swigCPtr;
 
-  public btMultimaterialTriangleMeshShape(long cPtr, boolean cMemoryOwn) {
+  protected btMultimaterialTriangleMeshShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btMultimaterialTriangleMeshShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btNodeOverlapCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btNodeOverlapCallback {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btNodeOverlapCallback(long cPtr, boolean cMemoryOwn) {
+  protected btNodeOverlapCallback(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btNullPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btNullPairCache extends btOverlappingPairCache {
   private long swigCPtr;
 
-  public btNullPairCache(long cPtr, boolean cMemoryOwn) {
+  protected btNullPairCache(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btNullPairCache_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btOptimizedBvh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btOptimizedBvh extends btQuantizedBvh {
   private long swigCPtr;
 
-  public btOptimizedBvh(long cPtr, boolean cMemoryOwn) {
+  protected btOptimizedBvh(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btOptimizedBvh_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btOptimizedBvhNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btOptimizedBvhNode {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btOptimizedBvhNode(long cPtr, boolean cMemoryOwn) {
+  protected btOptimizedBvhNode(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btOptimizedBvhNodeDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btOptimizedBvhNodeDoubleData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btOptimizedBvhNodeDoubleData(long cPtr, boolean cMemoryOwn) {
+  protected btOptimizedBvhNodeDoubleData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btOptimizedBvhNodeFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btOptimizedBvhNodeFloatData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btOptimizedBvhNodeFloatData(long cPtr, boolean cMemoryOwn) {
+  protected btOptimizedBvhNodeFloatData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btOverlapCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btOverlapCallback {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btOverlapCallback(long cPtr, boolean cMemoryOwn) {
+  protected btOverlapCallback(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btOverlapFilterCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btOverlapFilterCallback {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btOverlapFilterCallback(long cPtr, boolean cMemoryOwn) {
+  protected btOverlapFilterCallback(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btOverlappingPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btOverlappingPairCache extends btOverlappingPairCallback {
   private long swigCPtr;
 
-  public btOverlappingPairCache(long cPtr, boolean cMemoryOwn) {
+  protected btOverlappingPairCache(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btOverlappingPairCache_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btOverlappingPairCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btOverlappingPairCallback {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btOverlappingPairCallback(long cPtr, boolean cMemoryOwn) {
+  protected btOverlappingPairCallback(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btPairCachingGhostObject.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btPairCachingGhostObject extends btGhostObject {
   private long swigCPtr;
 
-  public btPairCachingGhostObject(long cPtr, boolean cMemoryOwn) {
+  protected btPairCachingGhostObject(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btPairCachingGhostObject_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btPersistentManifold.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btPersistentManifold extends btTypedObject {
   private long swigCPtr;
 
-  public btPersistentManifold(long cPtr, boolean cMemoryOwn) {
+  protected btPersistentManifold(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btPersistentManifold_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btPlane.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btPlane {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btPlane(long cPtr, boolean cMemoryOwn) {
+  protected btPlane(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btPoint2PointConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btPoint2PointConstraint extends btTypedConstraint {
   private long swigCPtr;
 
-  public btPoint2PointConstraint(long cPtr, boolean cMemoryOwn) {
+  protected btPoint2PointConstraint(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btPoint2PointConstraint_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btPoint2PointConstraintDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btPoint2PointConstraintDoubleData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btPoint2PointConstraintDoubleData(long cPtr, boolean cMemoryOwn) {
+  protected btPoint2PointConstraintDoubleData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btPoint2PointConstraintFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btPoint2PointConstraintFloatData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btPoint2PointConstraintFloatData(long cPtr, boolean cMemoryOwn) {
+  protected btPoint2PointConstraintFloatData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btPoint2PointFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btPointCollector.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btPointCollector {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btPointCollector(long cPtr, boolean cMemoryOwn) {
+  protected btPointCollector(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btPolyhedralContactClipping.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btPolyhedralContactClipping {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btPolyhedralContactClipping(long cPtr, boolean cMemoryOwn) {
+  protected btPolyhedralContactClipping(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btPolyhedralConvexAabbCachingShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btPolyhedralConvexAabbCachingShape extends btPolyhedralConvexShape {
   private long swigCPtr;
 
-  public btPolyhedralConvexAabbCachingShape(long cPtr, boolean cMemoryOwn) {
+  protected btPolyhedralConvexAabbCachingShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btPolyhedralConvexAabbCachingShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btPolyhedralConvexShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btPolyhedralConvexShape extends btConvexInternalShape {
   private long swigCPtr;
 
-  public btPolyhedralConvexShape(long cPtr, boolean cMemoryOwn) {
+  protected btPolyhedralConvexShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btPolyhedralConvexShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btPoolAllocator.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btPoolAllocator {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btPoolAllocator(long cPtr, boolean cMemoryOwn) {
+  protected btPoolAllocator(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btPositionAndRadius.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btPositionAndRadius {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btPositionAndRadius(long cPtr, boolean cMemoryOwn) {
+  protected btPositionAndRadius(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btQuantizedBvh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btQuantizedBvh {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btQuantizedBvh(long cPtr, boolean cMemoryOwn) {
+  protected btQuantizedBvh(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btQuantizedBvhDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btQuantizedBvhDoubleData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btQuantizedBvhDoubleData(long cPtr, boolean cMemoryOwn) {
+  protected btQuantizedBvhDoubleData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btQuantizedBvhFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btQuantizedBvhFloatData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btQuantizedBvhFloatData(long cPtr, boolean cMemoryOwn) {
+  protected btQuantizedBvhFloatData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btQuantizedBvhNode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btQuantizedBvhNode {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btQuantizedBvhNode(long cPtr, boolean cMemoryOwn) {
+  protected btQuantizedBvhNode(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btQuantizedBvhNodeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btQuantizedBvhNodeData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btQuantizedBvhNodeData(long cPtr, boolean cMemoryOwn) {
+  protected btQuantizedBvhNodeData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btQuaternion.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btQuaternion {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btQuaternion(long cPtr, boolean cMemoryOwn) {
+  protected btQuaternion(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btRigidBody.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btRigidBody extends btCollisionObject {
   private long swigCPtr;
 
-  public btRigidBody(long cPtr, boolean cMemoryOwn) {
+  protected btRigidBody(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btRigidBody_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btRigidBodyConstructionInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btRigidBodyConstructionInfo {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btRigidBodyConstructionInfo(long cPtr, boolean cMemoryOwn) {
+  protected btRigidBodyConstructionInfo(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btRigidBodyDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btRigidBodyDoubleData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btRigidBodyDoubleData(long cPtr, boolean cMemoryOwn) {
+  protected btRigidBodyDoubleData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btRigidBodyFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btRigidBodyFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btRigidBodyFloatData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btRigidBodyFloatData(long cPtr, boolean cMemoryOwn) {
+  protected btRigidBodyFloatData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btRotationalLimitMotor.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btRotationalLimitMotor {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btRotationalLimitMotor(long cPtr, boolean cMemoryOwn) {
+  protected btRotationalLimitMotor(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btScaledBvhTriangleMeshShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btScaledBvhTriangleMeshShape extends btConcaveShape {
   private long swigCPtr;
 
-  public btScaledBvhTriangleMeshShape(long cPtr, boolean cMemoryOwn) {
+  protected btScaledBvhTriangleMeshShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btScaledBvhTriangleMeshShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btScaledTriangleMeshShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btScaledTriangleMeshShapeData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btScaledTriangleMeshShapeData(long cPtr, boolean cMemoryOwn) {
+  protected btScaledTriangleMeshShapeData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSequentialImpulseConstraintSolver.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btSequentialImpulseConstraintSolver extends btConstraintSolver {
   private long swigCPtr;
 
-  public btSequentialImpulseConstraintSolver(long cPtr, boolean cMemoryOwn) {
+  protected btSequentialImpulseConstraintSolver(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btSequentialImpulseConstraintSolver_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btShapeHull.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btShapeHull {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btShapeHull(long cPtr, boolean cMemoryOwn) {
+  protected btShapeHull(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btShortIntIndexData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btShortIntIndexData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btShortIntIndexData(long cPtr, boolean cMemoryOwn) {
+  protected btShortIntIndexData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btShortIntIndexTripletData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btShortIntIndexTripletData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btShortIntIndexTripletData(long cPtr, boolean cMemoryOwn) {
+  protected btShortIntIndexTripletData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSimpleBroadphase.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btSimpleBroadphase extends btBroadphaseInterface {
   private long swigCPtr;
 
-  public btSimpleBroadphase(long cPtr, boolean cMemoryOwn) {
+  protected btSimpleBroadphase(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btSimpleBroadphase_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSimpleBroadphaseProxy.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btSimpleBroadphaseProxy extends btBroadphaseProxy {
   private long swigCPtr;
 
-  public btSimpleBroadphaseProxy(long cPtr, boolean cMemoryOwn) {
+  protected btSimpleBroadphaseProxy(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btSimpleBroadphaseProxy_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSimpleDynamicsWorld.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btSimpleDynamicsWorld extends btDynamicsWorld {
   private long swigCPtr;
 
-  public btSimpleDynamicsWorld(long cPtr, boolean cMemoryOwn) {
+  protected btSimpleDynamicsWorld(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btSimpleDynamicsWorld_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSimulationIslandManager.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btSimulationIslandManager {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btSimulationIslandManager(long cPtr, boolean cMemoryOwn) {
+  protected btSimulationIslandManager(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSliderConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btSliderConstraint extends btTypedConstraint {
   private long swigCPtr;
 
-  public btSliderConstraint(long cPtr, boolean cMemoryOwn) {
+  protected btSliderConstraint(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btSliderConstraint_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSliderConstraintData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btSliderConstraintData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btSliderConstraintData(long cPtr, boolean cMemoryOwn) {
+  protected btSliderConstraintData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSliderFlags.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSolve2LinearConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btSolve2LinearConstraint {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btSolve2LinearConstraint(long cPtr, boolean cMemoryOwn) {
+  protected btSolve2LinearConstraint(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSolverBodyObsolete.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btSolverBodyObsolete {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btSolverBodyObsolete(long cPtr, boolean cMemoryOwn) {
+  protected btSolverBodyObsolete(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSolverConstraint.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btSolverConstraint {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btSolverConstraint(long cPtr, boolean cMemoryOwn) {
+  protected btSolverConstraint(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSolverMode.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSortedOverlappingPairCache.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btSortedOverlappingPairCache extends btOverlappingPairCache {
   private long swigCPtr;
 
-  public btSortedOverlappingPairCache(long cPtr, boolean cMemoryOwn) {
+  protected btSortedOverlappingPairCache(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btSortedOverlappingPairCache_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSphereBoxCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btSphereBoxCollisionAlgorithm extends btActivatingCollisionAlgorithm {
   private long swigCPtr;
 
-  public btSphereBoxCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
+  protected btSphereBoxCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btSphereBoxCollisionAlgorithm_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSphereShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btSphereShape extends btConvexInternalShape {
   private long swigCPtr;
 
-  public btSphereShape(long cPtr, boolean cMemoryOwn) {
+  protected btSphereShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btSphereShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSphereSphereCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btSphereSphereCollisionAlgorithm extends btActivatingCollisionAlgorithm {
   private long swigCPtr;
 
-  public btSphereSphereCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
+  protected btSphereSphereCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btSphereSphereCollisionAlgorithm_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSphereTriangleCollisionAlgorithm.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btSphereTriangleCollisionAlgorithm extends btActivatingCollisionAlgorithm {
   private long swigCPtr;
 
-  public btSphereTriangleCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
+  protected btSphereTriangleCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btSphereTriangleCollisionAlgorithm_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btStackAlloc.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btStackAlloc {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btStackAlloc(long cPtr, boolean cMemoryOwn) {
+  protected btStackAlloc(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btStaticPlaneShape.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btStaticPlaneShape extends btConcaveShape {
   private long swigCPtr;
 
-  public btStaticPlaneShape(long cPtr, boolean cMemoryOwn) {
+  protected btStaticPlaneShape(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btStaticPlaneShape_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btStaticPlaneShapeData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btStaticPlaneShapeData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btStaticPlaneShapeData(long cPtr, boolean cMemoryOwn) {
+  protected btStaticPlaneShapeData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btStridingMeshInterface.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btStridingMeshInterface {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btStridingMeshInterface(long cPtr, boolean cMemoryOwn) {
+  protected btStridingMeshInterface(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btStridingMeshInterfaceData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btStridingMeshInterfaceData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btStridingMeshInterfaceData(long cPtr, boolean cMemoryOwn) {
+  protected btStridingMeshInterfaceData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSubSimplexClosestResult.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btSubSimplexClosestResult {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btSubSimplexClosestResult(long cPtr, boolean cMemoryOwn) {
+  protected btSubSimplexClosestResult(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btSubsimplexConvexCast.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btSubsimplexConvexCast extends btConvexCast {
   private long swigCPtr;
 
-  public btSubsimplexConvexCast(long cPtr, boolean cMemoryOwn) {
+  protected btSubsimplexConvexCast(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btSubsimplexConvexCast_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTransform.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btTransform {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btTransform(long cPtr, boolean cMemoryOwn) {
+  protected btTransform(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTransformDoubleData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btTransformDoubleData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btTransformDoubleData(long cPtr, boolean cMemoryOwn) {
+  protected btTransformDoubleData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTransformFloatData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btTransformFloatData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btTransformFloatData(long cPtr, boolean cMemoryOwn) {
+  protected btTransformFloatData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTransformUtil.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btTransformUtil {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btTransformUtil(long cPtr, boolean cMemoryOwn) {
+  protected btTransformUtil(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTranslationalLimitMotor.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btTranslationalLimitMotor {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btTranslationalLimitMotor(long cPtr, boolean cMemoryOwn) {
+  protected btTranslationalLimitMotor(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangle.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btTriangle {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btTriangle(long cPtr, boolean cMemoryOwn) {
+  protected btTriangle(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleBuffer.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btTriangleBuffer extends btTriangleCallback {
   private long swigCPtr;
 
-  public btTriangleBuffer(long cPtr, boolean cMemoryOwn) {
+  protected btTriangleBuffer(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btTriangleBuffer_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btTriangleCallback {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btTriangleCallback(long cPtr, boolean cMemoryOwn) {
+  protected btTriangleCallback(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleConvexcastCallback.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btTriangleConvexcastCallback extends btTriangleCallback {
   private long swigCPtr;
 
-  public btTriangleConvexcastCallback(long cPtr, boolean cMemoryOwn) {
+  protected btTriangleConvexcastCallback(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btTriangleConvexcastCallback_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleIndexVertexArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btTriangleIndexVertexArray extends btStridingMeshInterface {
   private long swigCPtr;
 
-  public btTriangleIndexVertexArray(long cPtr, boolean cMemoryOwn) {
+  protected btTriangleIndexVertexArray(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btTriangleIndexVertexArray_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleIndexVertexMaterialArray.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btTriangleIndexVertexMaterialArray extends btTriangleIndexVertexArray {
   private long swigCPtr;
 
-  public btTriangleIndexVertexMaterialArray(long cPtr, boolean cMemoryOwn) {
+  protected btTriangleIndexVertexMaterialArray(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btTriangleIndexVertexMaterialArray_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleInfo.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btTriangleInfo {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btTriangleInfo(long cPtr, boolean cMemoryOwn) {
+  protected btTriangleInfo(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleInfoData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btTriangleInfoData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btTriangleInfoData(long cPtr, boolean cMemoryOwn) {
+  protected btTriangleInfoData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleInfoMap.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btTriangleInfoMap {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btTriangleInfoMap(long cPtr, boolean cMemoryOwn) {
+  protected btTriangleInfoMap(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleInfoMapData.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -17,7 +17,7 @@ public class btTriangleInfoMapData {
   private long swigCPtr;
   protected boolean swigCMemOwn;
 
-  public btTriangleInfoMapData(long cPtr, boolean cMemoryOwn) {
+  protected btTriangleInfoMapData(long cPtr, boolean cMemoryOwn) {
     swigCMemOwn = cMemoryOwn;
     swigCPtr = cPtr;
   }

File: extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleMesh.java
Patch:
@@ -1,6 +1,6 @@
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 2.0.4
+ * Version 2.0.5
  *
  * Do not make changes to this file unless you know what you are doing--modify
  * the SWIG interface file instead.
@@ -16,7 +16,7 @@
 public class btTriangleMesh extends btTriangleIndexVertexArray {
   private long swigCPtr;
 
-  public btTriangleMesh(long cPtr, boolean cMemoryOwn) {
+  protected btTriangleMesh(long cPtr, boolean cMemoryOwn) {
     super(gdxBulletJNI.btTriangleMesh_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OggInputStream.java
Patch:
@@ -144,6 +144,7 @@ private boolean getPageAndPacket () {
 
 		// submit a 4k block to libvorbis' Ogg layer
 		int index = syncState.buffer(4096);
+		if (index == -1) return false;
 
 		buffer = syncState.data;
 		if (buffer == null) {
@@ -234,6 +235,7 @@ private boolean getPageAndPacket () {
 			}
 			// no harm in not checking before adding more
 			index = syncState.buffer(4096);
+			if (index == -1) return false;
 			buffer = syncState.data;
 			try {
 				bytes = input.read(buffer, index, 4096);

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.backends.jogl.JoglApplication;
 import com.badlogic.gdx.backends.jogl.JoglApplicationConfiguration;
+import com.badlogic.gdx.tests.DirtyRenderingTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
@@ -27,7 +28,7 @@ public static void main (String[] argv) {
 		// this is only here for me to debug native code faster
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 		
-		GdxTest test = new com.badlogic.gdx.tests.ImmediateModeRendererTest();
+		GdxTest test = new DirtyRenderingTest();
 		JoglApplicationConfiguration config = new JoglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new JoglApplication(test, config);

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -22,6 +22,7 @@
 import com.badlogic.gdx.tests.Box2DTest;
 import com.badlogic.gdx.tests.CustomShaderSpriteBatchTest;
 import com.badlogic.gdx.tests.DecalTest;
+import com.badlogic.gdx.tests.DirtyRenderingTest;
 import com.badlogic.gdx.tests.FrameBufferTest;
 import com.badlogic.gdx.tests.InterpolationTest;
 import com.badlogic.gdx.tests.ParallaxTest;
@@ -43,7 +44,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		new SharedLibraryLoader("../../extensions/gdx-stb-truetype/libs/gdx-stb-truetype-natives.jar").load("gdx-stb-truetype");
 		
-		GdxTest test = new ParallaxTest();
+		GdxTest test = new DirtyRenderingTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -98,7 +98,8 @@ public class GdxTests {
 			SimpleVertexShader.class, ShapeRendererTest.class,
 			MoveSpriteExample.class, StbTrueTypeTest.class, SoundTouchTest.class, Mpg123Test.class, WavTest.class,
 			TextButtonTest.class, TextButtonTestGL2.class, TextureBindTest.class, TextureBindTestGL2.class,
-			SortedSpriteTest.class, ExternalMusicTest.class, SoftKeyboardTest.class};
+			SortedSpriteTest.class, ExternalMusicTest.class, SoftKeyboardTest.class, 
+			DirtyRenderingTest.class};
 
 	public static String[] getNames() {
 		List<String> names = new ArrayList<String>();

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -46,6 +46,7 @@
 import com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.GL11;
+import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.GdxNativesLoader;
 
 /** An implementation of the {@link Application} interface for Android. Create an {@link Activity} that derives from this class. In
@@ -65,8 +66,8 @@ public class AndroidApplication extends Activity implements Application {
 	protected ApplicationListener listener;
 	protected Handler handler;
 	protected boolean firstResume = true;
-	protected final List<Runnable> runnables = new ArrayList<Runnable>();
-	protected final List<Runnable> executedRunnables = new ArrayList<Runnable>();
+	protected final Array<Runnable> runnables = new Array<Runnable>();
+	protected final Array<Runnable> executedRunnables = new Array<Runnable>();
 	protected WakeLock wakeLock = null;
 	protected int logLevel = LOG_INFO;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -434,7 +434,7 @@ public void onDrawFrame (javax.microedition.khronos.opengles.GL10 gl) {
 				app.executedRunnables.addAll(app.runnables);
 				app.runnables.clear();
 				
-				for (int i = 0; i < app.executedRunnables.size(); i++) {
+				for (int i = 0; i < app.executedRunnables.size; i++) {
 					try {
 						app.executedRunnables.get(i).run();
 					}

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -95,7 +95,7 @@ public Mesh (boolean isStatic, int maxVertices, int maxIndices, VertexAttribute.
 			isVertexArray = false;
 		} else {
 			vertices = new VertexArray(maxVertices, attributes);
-			indices = new IndexBufferObject(maxIndices);
+			indices = new IndexArray(maxIndices);
 			isVertexArray = true;
 		}
 
@@ -116,7 +116,7 @@ public Mesh (boolean isStatic, int maxVertices, int maxIndices, VertexAttributes
 			isVertexArray = false;
 		} else {
 			vertices = new VertexArray(maxVertices, attributes);
-			indices = new IndexBufferObject(maxIndices);
+			indices = new IndexArray(maxIndices);
 			isVertexArray = true;
 		}
 

File: gdx/src/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -342,6 +342,7 @@ public int getGLType () {
 	 * and RGBA4444 the pixel colors are stored in shorts in machine dependent order.
 	 * @return the direct {@link ByteBuffer} holding the pixel data. */
 	public ByteBuffer getPixels () {
+		if(disposed) throw new GdxRuntimeException("Pixmap already disposed"); 
 		return pixmap.getPixels();
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/CameraGroupStrategy.java
Patch:
@@ -154,6 +154,7 @@ public void afterGroup (int group) {
 
 	@Override
 	public void beforeGroups () {
+		Gdx.gl.glEnable(GL10.GL_DEPTH_TEST);
 		Gdx.gl.glEnable(GL10.GL_TEXTURE_2D);
 		if (shader != null) {
 			shader.begin();
@@ -173,6 +174,7 @@ public void afterGroups () {
 			shader.end();
 		}
 		Gdx.gl.glDisable(GL10.GL_TEXTURE_2D);
+		Gdx.gl.glDisable(GL10.GL_DEPTH_TEST);
 	}
 
 	private void createDefaultShader () {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -20,9 +20,11 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.tests.Box2DCharacterControllerTest;
 import com.badlogic.gdx.tests.Box2DTest;
+import com.badlogic.gdx.tests.CustomShaderSpriteBatchTest;
 import com.badlogic.gdx.tests.DecalTest;
 import com.badlogic.gdx.tests.FrameBufferTest;
 import com.badlogic.gdx.tests.InterpolationTest;
+import com.badlogic.gdx.tests.ParallaxTest;
 import com.badlogic.gdx.tests.ShadowMappingTest;
 import com.badlogic.gdx.tests.SoftKeyboardTest;
 import com.badlogic.gdx.tests.SortedSpriteTest;
@@ -41,7 +43,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		new SharedLibraryLoader("../../extensions/gdx-stb-truetype/libs/gdx-stb-truetype-natives.jar").load("gdx-stb-truetype");
 		
-		GdxTest test = new VorbisTest();
+		GdxTest test = new ParallaxTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java
Patch:
@@ -480,6 +480,7 @@ public void setVertexAttribute (String name, int size, int type, boolean normali
 		GL20 gl = Gdx.graphics.getGL20();
 		checkManaged();
 		int location = fetchAttributeLocation(name);
+		if(location == -1) return;
 		gl.glVertexAttribPointer(location, size, type, normalize, stride, buffer);
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -396,8 +396,9 @@ public void render (ShaderProgram shader, int primitiveType, int offset, int cou
 				Gdx.gl20.glDrawElements(primitiveType, count, GL10.GL_UNSIGNED_SHORT, buffer);
 				buffer.position(oldPosition);
 				buffer.limit(oldLimit);
-			} else
-				Gdx.gl10.glDrawArrays(primitiveType, offset, count);
+			} else {
+				Gdx.gl20.glDrawArrays(primitiveType, offset, count);
+			}
 		} else {
 			if (indices.getNumIndices() > 0)
 				Gdx.gl20.glDrawElements(primitiveType, count, GL10.GL_UNSIGNED_SHORT, offset * 2);

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/io/WavDecoder.java
Patch:
@@ -81,7 +81,7 @@ public void dispose() {
 		}
 	}
 
-	
+	/** @author Nathan Sweet */
 	static private class WavInputStream extends FilterInputStream {
 		int channels, sampleRate, dataRemaining;
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -106,8 +106,8 @@ public boolean touchDown (float x, float y, int pointer) {
 
 	@Override
 	public void touchUp (float x, float y, int pointer) {
-		calculatePositionAndValue(x);
 		isDragging = false;
+		calculatePositionAndValue(x);
 	}
 
 	@Override
@@ -142,7 +142,6 @@ public float getValue () {
 	public void setValue (float value) {
 		if (value < min || value > max) throw new IllegalArgumentException("value must be >= min and <= max: " + value);
 		this.value = value;
-		if (listener != null) listener.changed(this, getValue());
 	}
 
 	/** Sets the range of this slider. The slider's current value is reset to min. */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -27,10 +27,12 @@ public class Window extends Table {
 
 	public Window (Skin skin) {
 		this("", skin.getStyle(WindowStyle.class), null);
+		setSkin(skin);
 	}
 
 	public Window (String title, Skin skin) {
 		this(title, skin.getStyle(WindowStyle.class), null);
+		setSkin(skin);
 	}
 
 	public Window (String title, WindowStyle style) {
@@ -87,7 +89,7 @@ public boolean touchDown (float x, float y, int pointer) {
 
 		if (super.touchDown(x, y, pointer)) return true;
 
-		dragging = isMovable && height - y <= getTitleBarHeight();
+		dragging = isMovable && height - y <= getTitleBarHeight() && y < height && x > 0 && x < width;
 		dragOffset.set(x, y);
 		return true;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/FlickScrollPane.java
Patch:
@@ -180,6 +180,8 @@ public void act (float delta) {
 	}
 
 	public void layout () {
+		if (widget == null) return;
+		
 		// Get widget's desired width.
 		float widgetWidth, widgetHeight;	
 		if (widget instanceof Layout) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -112,6 +112,8 @@ public void layout () {
 		areaWidth = width - bgLeftWidth - bgRightWidth;
 		areaHeight = height - bgTopHeight - bgBottomHeight;
 
+		if (widget == null) return;
+		
 		// Get widget's desired width.
 		float widgetWidth, widgetHeight;
 		if (widget instanceof Layout) {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -30,6 +30,7 @@
 import com.badlogic.gdx.tests.SpriteBatchShaderTest;
 import com.badlogic.gdx.tests.StageTest;
 import com.badlogic.gdx.tests.StbTrueTypeTest;
+import com.badlogic.gdx.tests.VorbisTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
@@ -40,7 +41,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		new SharedLibraryLoader("../../extensions/gdx-stb-truetype/libs/gdx-stb-truetype-natives.jar").load("gdx-stb-truetype");
 		
-		GdxTest test = new SpriteBatchShaderTest();
+		GdxTest test = new VorbisTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VorbisTest.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class VorbisTest extends GdxTest {
 	/** the file to playback **/
-	private static final String FILE = "data/cloudconnected.ogg";
+	private static final String FILE = "data/engine-2.ogg";
 	/** a VorbisDecoder to read PCM data from the ogg file **/
 	VorbisDecoder decoder;
 	/** an AudioDevice for playing back the PCM data **/

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/io/Decoder.java
Patch:
@@ -39,11 +39,10 @@ public short[] readAllSamples() {
 		short[] buffer = new short[1024*5];
 		int readSamples = 0;
 		int totalSamples = 0;
-		int offset = 0;
 		
 		while((readSamples = readSamples(buffer, 0, buffer.length)) > 0) {
-			if(readSamples + offset >= out.length) {
-				short[] tmp = new short[readSamples + offset];
+			if(readSamples + totalSamples >= out.length) {
+				short[] tmp = new short[readSamples + totalSamples];
 				System.arraycopy(out, 0, tmp, 0, totalSamples);
 				out = tmp;
 			}

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObject.java
Patch:
@@ -100,9 +100,9 @@ private int createBufferObject () {
 		} else if (Gdx.gl11 != null) {
 			Gdx.gl11.glGenBuffers(1, tmpHandle);
 			return tmpHandle.get(0);
+		} else {
+			throw new GdxRuntimeException("Can not use IndexBufferObject with GLES 1.0, need 1.1 or 2.0");
 		}
-
-		return 0;
 	}
 
 	/** @return the number of indices currently stored in this buffer */
@@ -160,7 +160,7 @@ public ShortBuffer getBuffer () {
 
 	/** Binds this IndexBufferObject for rendering with glDrawElements. */
 	public void bind () {
-		if (bufferHandle == 0) throw new GdxRuntimeException("buuh");
+		if (bufferHandle == 0) throw new GdxRuntimeException("No buffer allocated!");
 
 		if (Gdx.gl11 != null) {
 			GL11 gl = Gdx.gl11;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,11 +21,13 @@
 import com.badlogic.gdx.tests.Box2DCharacterControllerTest;
 import com.badlogic.gdx.tests.Box2DTest;
 import com.badlogic.gdx.tests.DecalTest;
+import com.badlogic.gdx.tests.FrameBufferTest;
 import com.badlogic.gdx.tests.InterpolationTest;
 import com.badlogic.gdx.tests.ShadowMappingTest;
 import com.badlogic.gdx.tests.SoftKeyboardTest;
 import com.badlogic.gdx.tests.SortedSpriteTest;
 import com.badlogic.gdx.tests.SpriteBatchOriginScaleTest;
+import com.badlogic.gdx.tests.SpriteBatchShaderTest;
 import com.badlogic.gdx.tests.StageTest;
 import com.badlogic.gdx.tests.StbTrueTypeTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -38,7 +40,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		new SharedLibraryLoader("../../extensions/gdx-stb-truetype/libs/gdx-stb-truetype-natives.jar").load("gdx-stb-truetype");
 		
-		GdxTest test = new InterpolationTest();
+		GdxTest test = new SpriteBatchShaderTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -131,7 +131,7 @@ public Mesh (boolean isStatic, int maxVertices, int maxIndices, VertexAttributes
 	 * @param attributes the {@link VertexAttribute}s. Each vertex attribute defines one property of a vertex such as position,
 	 *           normal or texture coordinate */
 	public Mesh (VertexDataType type, boolean isStatic, int maxVertices, int maxIndices, VertexAttribute... attributes) {
-		if (type == VertexDataType.VertexArray && Gdx.graphics.isGL20Available()) type = VertexDataType.VertexBufferObject;
+//		if (type == VertexDataType.VertexArray && Gdx.graphics.isGL20Available()) type = VertexDataType.VertexBufferObject;
 
 		if (type == VertexDataType.VertexBufferObject) {
 			vertices = new VertexBufferObject(isStatic, maxVertices, attributes);
@@ -265,7 +265,7 @@ public void unbind () {
 	public void bind (ShaderProgram shader) {
 		if (!Gdx.graphics.isGL20Available()) throw new IllegalStateException("can't use this render method with OpenGL ES 1.x");
 
-		((VertexBufferObject)vertices).bind(shader);
+		vertices.bind(shader);
 		if (indices.getNumIndices() > 0) indices.bind();
 	}
 
@@ -276,7 +276,7 @@ public void bind (ShaderProgram shader) {
 	public void unbind (ShaderProgram shader) {
 		if (!Gdx.graphics.isGL20Available()) throw new IllegalStateException("can't use this render method with OpenGL ES 1.x");
 
-		((VertexBufferObject)vertices).unbind(shader);
+		vertices.unbind(shader);
 		if (indices.getNumIndices() > 0) indices.unbind();
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.badlogic.gdx.graphics.glutils;
 
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
@@ -475,7 +476,7 @@ public void setUniformMatrix (String name, Matrix3 matrix, boolean transpose) {
 	 * @param normalize whether fixed point data should be normalized. Will not work on the desktop
 	 * @param stride the stride in bytes between successive attributes
 	 * @param buffer the buffer containing the vertex attributes. */
-	public void setVertexAttribute (String name, int size, int type, boolean normalize, int stride, FloatBuffer buffer) {
+	public void setVertexAttribute (String name, int size, int type, boolean normalize, int stride, Buffer buffer) {
 		GL20 gl = Gdx.graphics.getGL20();
 		checkManaged();
 		int location = fetchAttributeLocation(name);
@@ -499,7 +500,7 @@ public void setVertexAttribute (String name, int size, int type, boolean normali
 		if (location == -1) return;
 		gl.glVertexAttribPointer(location, size, type, normalize, stride, offset);
 	}
-
+	
 	/** Makes OpenGL ES 2.0 use this vertex and fragment shader pair. When you are done with this shader you have to call
 	 * {@link ShaderProgram#end()}. */
 	public void begin () {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -66,6 +66,7 @@ public class AndroidApplication extends Activity implements Application {
 	protected Handler handler;
 	protected boolean firstResume = true;
 	protected final List<Runnable> runnables = new ArrayList<Runnable>();
+	protected final List<Runnable> executedRunnables = new ArrayList<Runnable>();
 	protected WakeLock wakeLock = null;
 	protected int logLevel = LOG_INFO;
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglApplication.java
Patch:
@@ -55,6 +55,7 @@ public final class JoglApplication implements Application {
 	OpenALAudio audio;
 	JFrame frame;
 	List<Runnable> runnables = new ArrayList<Runnable>();
+	List<Runnable> executedRunnables = new ArrayList<Runnable>();
 	int logLevel = LOG_INFO;
 
 	/** Creates a new {@link JoglApplication} with the given title and dimensions. If useGL20IfAvailable is set the JoglApplication

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -20,6 +20,8 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.tests.Box2DCharacterControllerTest;
 import com.badlogic.gdx.tests.Box2DTest;
+import com.badlogic.gdx.tests.DecalTest;
+import com.badlogic.gdx.tests.InterpolationTest;
 import com.badlogic.gdx.tests.ShadowMappingTest;
 import com.badlogic.gdx.tests.SoftKeyboardTest;
 import com.badlogic.gdx.tests.SortedSpriteTest;
@@ -36,7 +38,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		new SharedLibraryLoader("../../extensions/gdx-stb-truetype/libs/gdx-stb-truetype-natives.jar").load("gdx-stb-truetype");
 		
-		GdxTest test = new SoftKeyboardTest();
+		GdxTest test = new InterpolationTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/DecalTest.java
Patch:
@@ -29,8 +29,9 @@
 import com.badlogic.gdx.graphics.g3d.decals.GroupStrategy;
 import com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy;
 import com.badlogic.gdx.math.WindowedMean;
+import com.badlogic.gdx.tests.utils.GdxTest;
 
-public class DecalTest extends Game {
+public class DecalTest extends GdxTest {
 	public static final int TARGET_FPS = 40;
 	public static final int INITIAL_RENDERED = 100;
 	private boolean willItBlend_that_is_the_question = true;

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALAudioDevice.java
Patch:
@@ -185,7 +185,7 @@ public void dispose () {
 	}
 
 	public boolean isMono () {
-		return false;
+		return channels == 1;
 	}
 
 	public int getLatency () {

File: gdx/src/com/badlogic/gdx/audio/AudioDevice.java
Patch:
@@ -47,4 +47,7 @@ public interface AudioDevice extends Disposable {
 
 	/** Frees all resources associated with this AudioDevice. Needs to be called when the device is no longer needed. */
 	public void dispose ();
+	
+	/** Sets the volume in the range [0,1]. */
+	public void setVolume(float volume);
 }

File: gdx/src/com/badlogic/gdx/input/GestureDetector.java
Patch:
@@ -200,7 +200,7 @@ public boolean touchDown (int x, int y, int pointer, int button) {
 				inTapSquare = false;
 				pinching = true;
 				initialFirstPointer.set(firstPointer);
-				initialSecondPointer.set(firstPointer);
+				initialSecondPointer.set(secondPointer);
 			} else {
 				inTapSquare = true;
 				pinching = false;
@@ -213,7 +213,7 @@ public boolean touchDown (int x, int y, int pointer, int button) {
 			inTapSquare = false;
 			pinching = true;
 			initialFirstPointer.set(firstPointer);
-			initialSecondPointer.set(firstPointer);
+			initialSecondPointer.set(secondPointer);
 		}
 		return listener.touchDown(x, y, pointer);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -98,7 +98,7 @@ public class GdxTests {
 			SimpleVertexShader.class, ShapeRendererTest.class,
 			MoveSpriteExample.class, StbTrueTypeTest.class, SoundTouchTest.class, Mpg123Test.class, WavTest.class,
 			TextButtonTest.class, TextButtonTestGL2.class, TextureBindTest.class, TextureBindTestGL2.class,
-			SortedSpriteTest.class};
+			SortedSpriteTest.class, ExternalMusicTest.class};
 
 	public static String[] getNames() {
 		List<String> names = new ArrayList<String>();

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1.java
Patch:
@@ -62,7 +62,7 @@ public ETC1Data (FileHandle pkmFile) {
 			try {
 				in = new DataInputStream(new BufferedInputStream(new GZIPInputStream(pkmFile.read())));
 				int fileSize = in.readInt();
-				compressedData = BufferUtils.newByteBuffer(fileSize);
+				compressedData = BufferUtils.newUnsafeByteBuffer(fileSize);
 				int readBytes = 0;
 				while ((readBytes = in.read(buffer)) != -1) {
 					compressedData.put(buffer, 0, readBytes);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BufferUtilsTest.java
Patch:
@@ -39,7 +39,7 @@ public boolean needsGL20 () {
 	@Override
 	public void create () {
 		ByteBuffer bytebuffer = BufferUtils.newUnsafeByteBuffer(1000 * 1000);
-		BufferUtils.freeMemory(bytebuffer);
+		BufferUtils.disposeUnsafeByteBuffer(bytebuffer);
 
 		ByteBuffer bb = BufferUtils.newByteBuffer(8);
 		CharBuffer cb = BufferUtils.newCharBuffer(8);

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -134,7 +134,7 @@ public SpriteBatch (int size) {
 	 * @param size the batch size in number of sprites
 	 * @param defaultShader the default shader to use. This is not owned by the SpriteBatch and must be disposed separately. */
 	public SpriteBatch (int size, ShaderProgram defaultShader) {
-		this(size, Gdx.graphics.isGL20Available() ? 10 : 1, defaultShader);
+		this(size, 1, defaultShader);
 	}
 
 	/** Constructs a SpriteBatch with the specified size and number of buffers and (if GL2) the default shader. See

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1.java
Patch:
@@ -120,7 +120,7 @@ public void write (FileHandle file) {
 
 		/** Releases the native resources of the ETC1Data instance. */
 		public void dispose () {
-			BufferUtils.freeMemory(compressedData);
+			BufferUtils.disposeUnsafeByteBuffer(compressedData);
 		}
 
 		public String toString () {

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObject.java
Patch:
@@ -217,6 +217,6 @@ public void dispose () {
 			gl.glDeleteBuffers(1, tmpHandle);
 			bufferHandle = 0;
 		}
-		BufferUtils.freeMemory(byteBuffer);
+		BufferUtils.disposeUnsafeByteBuffer(byteBuffer);
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexArray.java
Patch:
@@ -67,7 +67,7 @@ public VertexArray (int numVertices, VertexAttributes attributes) {
 	/** {@inheritDoc} */
 	@Override
 	public void dispose () {
-		BufferUtils.freeMemory(byteBuffer);
+		BufferUtils.disposeUnsafeByteBuffer(byteBuffer);
 	}
 
 	/** {@inheritDoc} */

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObject.java
Patch:
@@ -299,6 +299,6 @@ public void dispose () {
 			gl.glDeleteBuffers(1, tmpHandle);
 			bufferHandle = 0;
 		}
-		BufferUtils.freeMemory(byteBuffer);
+		BufferUtils.disposeUnsafeByteBuffer(byteBuffer);
 	}
 }

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
Patch:
@@ -102,7 +102,7 @@ public Music newMusic (FileHandle file) {
 			}
 		} else {
 			try {
-				mediaPlayer.setDataSource(aHandle.path());
+				mediaPlayer.setDataSource(aHandle.file().getPath());
 				mediaPlayer.prepare();
 				AndroidMusic music = new AndroidMusic(this, mediaPlayer);
 				synchronized (musics) {
@@ -132,7 +132,7 @@ public Sound newSound (FileHandle file) {
 			}
 		} else {
 			try {
-				return new AndroidSound(soundPool, manager, soundPool.load(aHandle.path(), 1));
+				return new AndroidSound(soundPool, manager, soundPool.load(aHandle.file().getPath(), 1));
 			} catch (Exception ex) {
 				throw new GdxRuntimeException("Error loading audio file: " + file, ex);
 			}

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObject.java
Patch:
@@ -70,7 +70,6 @@ public IndexBufferObject (boolean isStatic, int maxIndices) {
 // isDirect = false;
 // } else {
 		byteBuffer = BufferUtils.newUnsafeByteBuffer(maxIndices * 2);
-		byteBuffer.order(ByteOrder.nativeOrder());
 		isDirect = true;
 // }
 		buffer = byteBuffer.asShortBuffer();
@@ -85,7 +84,6 @@ public IndexBufferObject (boolean isStatic, int maxIndices) {
 	 * @param maxIndices the maximum number of indices this buffer can hold */
 	public IndexBufferObject (int maxIndices) {
 		byteBuffer = BufferUtils.newUnsafeByteBuffer(maxIndices * 2);
-		byteBuffer.order(ByteOrder.nativeOrder());
 		this.isDirect = true;
 
 		buffer = byteBuffer.asShortBuffer();

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java
Patch:
@@ -522,6 +522,7 @@ public void dispose () {
 		gl.glDeleteShader(vertexShaderHandle);
 		gl.glDeleteShader(fragmentShaderHandle);
 		gl.glDeleteProgram(program);
+		if (buffer != null) BufferUtils.freeMemory(buffer);
 		if (shaders.get(Gdx.app) != null) shaders.get(Gdx.app).remove(this);
 	}
 
@@ -606,7 +607,8 @@ public void setAttributef (String name, float value1, float value2, float value3
 
 	private void ensureBufferCapacity (int numBytes) {
 		if (buffer == null || buffer.capacity() != numBytes) {
-			buffer = BufferUtils.newByteBuffer(numBytes);
+			if(buffer != null) BufferUtils.freeMemory(buffer);
+			buffer = BufferUtils.newDisposableByteBuffer(numBytes);
 			floatBuffer = buffer.asFloatBuffer();
 			intBuffer = buffer.asIntBuffer();
 		}

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexArray.java
Patch:
@@ -58,7 +58,7 @@ public VertexArray (int numVertices, VertexAttribute... attributes) {
 	 * @param attributes the {@link VertexAttributes} */
 	public VertexArray (int numVertices, VertexAttributes attributes) {
 		this.attributes = attributes;
-		byteBuffer = BufferUtils.newByteBuffer(this.attributes.vertexSize * numVertices);
+		byteBuffer = BufferUtils.newDisposableByteBuffer(this.attributes.vertexSize * numVertices);
 		buffer = byteBuffer.asFloatBuffer();
 		buffer.flip();
 		byteBuffer.flip();
@@ -67,7 +67,7 @@ public VertexArray (int numVertices, VertexAttributes attributes) {
 	/** {@inheritDoc} */
 	@Override
 	public void dispose () {
-
+		BufferUtils.freeMemory(byteBuffer);
 	}
 
 	/** {@inheritDoc} */

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObject.java
Patch:
@@ -83,7 +83,7 @@ public VertexBufferObject (boolean isStatic, int numVertices, VertexAttributes a
 		this.isStatic = isStatic;
 		this.attributes = attributes;
 
-		byteBuffer = BufferUtils.newByteBuffer(this.attributes.vertexSize * numVertices);
+		byteBuffer = BufferUtils.newDisposableByteBuffer(this.attributes.vertexSize * numVertices);
 		buffer = byteBuffer.asFloatBuffer();
 		buffer.flip();
 		byteBuffer.flip();
@@ -282,6 +282,7 @@ public void invalidate () {
 	/** Disposes of all resources this VertexBufferObject uses. */
 	@Override
 	public void dispose () {
+		BufferUtils.freeMemory(byteBuffer);
 		if (Gdx.gl20 != null) {
 			tmpHandle.clear();
 			tmpHandle.put(bufferHandle);

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObjectSubData.java
Patch:
@@ -82,7 +82,7 @@ public VertexBufferObjectSubData (boolean isStatic, int numVertices, VertexAttri
 // byteBuffer.order(ByteOrder.nativeOrder());
 // isDirect = false;
 // } else {
-		byteBuffer = BufferUtils.newByteBuffer(this.attributes.vertexSize * numVertices);
+		byteBuffer = BufferUtils.newDisposableByteBuffer(this.attributes.vertexSize * numVertices);
 		isDirect = true;
 // }
 		usage = isStatic ? GL11.GL_STATIC_DRAW : GL11.GL_DYNAMIC_DRAW;
@@ -302,6 +302,7 @@ public void invalidate () {
 	/** Disposes of all resources this VertexBufferObject uses. */
 	@Override
 	public void dispose () {
+		BufferUtils.freeMemory(byteBuffer);
 		if (Gdx.gl20 != null) {
 			tmpHandle.clear();
 			tmpHandle.put(bufferHandle);

File: gdx/src/com/badlogic/gdx/utils/ScreenUtils.java
Patch:
@@ -90,7 +90,7 @@ public static byte[] getFrameBufferPixels (boolean flipY) {
 	 * @param flipY whether to flip pixels along Y axis */
 	public static byte[] getFrameBufferPixels (int x, int y, int w, int h, boolean flipY) {
 		Gdx.gl.glPixelStorei(GL10.GL_PACK_ALIGNMENT, 1);
-		final ByteBuffer pixels = BufferUtils.newByteBuffer(w * h * 4);
+		final ByteBuffer pixels = BufferUtils.newDisposableByteBuffer(w * h * 4);
 		Gdx.gl.glReadPixels(x, y, w, h, GL10.GL_RGBA, GL10.GL_UNSIGNED_BYTE, pixels);
 		final int numBytes = w * h * 4;
 		byte[] lines = new byte[numBytes];
@@ -104,6 +104,7 @@ public static byte[] getFrameBufferPixels (int x, int y, int w, int h, boolean f
 			pixels.clear();
 			pixels.get(lines);
 		}
+		BufferUtils.freeMemory(pixels);
 		return lines;
 
 	}

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java
Patch:
@@ -182,9 +182,7 @@ private void compileShaders (String vertexShader, String fragmentShader) {
 
 	private int loadShader (int type, String source) {
 		GL20 gl = Gdx.graphics.getGL20();
-		ByteBuffer tmp = ByteBuffer.allocateDirect(4);
-		tmp.order(ByteOrder.nativeOrder());
-		IntBuffer intbuf = tmp.asIntBuffer();
+		IntBuffer intbuf = BufferUtils.newIntBuffer(1);
 
 		int shader = gl.glCreateShader(type);
 		if (shader == 0) return -1;

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexArray.java
Patch:
@@ -58,8 +58,7 @@ public VertexArray (int numVertices, VertexAttribute... attributes) {
 	 * @param attributes the {@link VertexAttributes} */
 	public VertexArray (int numVertices, VertexAttributes attributes) {
 		this.attributes = attributes;
-		byteBuffer = ByteBuffer.allocateDirect(this.attributes.vertexSize * numVertices);
-		byteBuffer.order(ByteOrder.nativeOrder());
+		byteBuffer = BufferUtils.newByteBuffer(this.attributes.vertexSize * numVertices);
 		buffer = byteBuffer.asFloatBuffer();
 		buffer.flip();
 		byteBuffer.flip();

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObject.java
Patch:
@@ -83,8 +83,7 @@ public VertexBufferObject (boolean isStatic, int numVertices, VertexAttributes a
 		this.isStatic = isStatic;
 		this.attributes = attributes;
 
-		byteBuffer = ByteBuffer.allocateDirect(this.attributes.vertexSize * numVertices);
-		byteBuffer.order(ByteOrder.nativeOrder());
+		byteBuffer = BufferUtils.newByteBuffer(this.attributes.vertexSize * numVertices);
 		buffer = byteBuffer.asFloatBuffer();
 		buffer.flip();
 		byteBuffer.flip();

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObjectSubData.java
Patch:
@@ -82,8 +82,7 @@ public VertexBufferObjectSubData (boolean isStatic, int numVertices, VertexAttri
 // byteBuffer.order(ByteOrder.nativeOrder());
 // isDirect = false;
 // } else {
-		byteBuffer = ByteBuffer.allocateDirect(this.attributes.vertexSize * numVertices);
-		byteBuffer.order(ByteOrder.nativeOrder());
+		byteBuffer = BufferUtils.newByteBuffer(this.attributes.vertexSize * numVertices);
 		isDirect = true;
 // }
 		usage = isStatic ? GL11.GL_STATIC_DRAW : GL11.GL_DYNAMIC_DRAW;

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/io/Decoder.java
Patch:
@@ -26,15 +26,13 @@ public abstract class Decoder implements Disposable {
 	 * number is smaller than the capacity of the buffer then the end of stream has been reached. The provided ShortBuffer must be
 	 * a direct buffer.
 	 * 
-	 * @param samples array to write the samples to
-	 * @param offset the offset at which to start writting samples to
 	 * @param samples The number of samples to read. 
+	 * @param offset the offset at which to start writting samples to
 	 * @return the number of samples read, < numSamples means end of file */
 	public abstract int readSamples (short[] samples, int offset, int numSamples);
 	
 	/**
 	 * Reads in the entire sound file into a single short[] array.
-	 * @return
 	 */
 	public short[] readAllSamples() {
 		short[] out = new short[(int)Math.ceil(getLength() * getRate() * getChannels())];

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/io/Mpg123Decoder.java
Patch:
@@ -33,8 +33,7 @@ public class Mpg123Decoder extends Decoder {
 	public final long handle;
 
 	/** Opens the given file for mp3 decoding. Throws an IllegalArugmentException in case the file could not be opened.
-	 * 
-	 * @param filename the filename */
+	 */
 	public Mpg123Decoder (FileHandle file) {
 		if(file.type() != FileType.External && file.type() != FileType.Absolute)
 			throw new IllegalArgumentException("File must be absolute or external!");

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/parsing/JavaMethodParser.java
Patch:
@@ -132,7 +132,7 @@ public String getJniType() {
 	}
 
 	public static class Argument {
-		private final ArgumentType type;
+		final ArgumentType type;
 		private final String name;
 
 		public Argument(ArgumentType type, String name) {

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -162,7 +162,9 @@ public String readString () {
 	/** Reads the entire file into a string using the specified charset.
 	 * @throw GdxRuntimeException if the file handle represents a directory, doesn't exist, or could not be read. */
 	public String readString (String charset) {
-		StringBuilder output = new StringBuilder(512);
+		int fileLength = (int)length();
+		if (fileLength == 0) fileLength = 512;
+		StringBuilder output = new StringBuilder(fileLength);
 		InputStreamReader reader = null;
 		try {
 			if (charset == null)

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -827,7 +827,9 @@ private Object newInstance (Class type) {
 				return constructor.newInstance();
 			} catch (SecurityException ignored) {
 			} catch (NoSuchMethodException ignored) {
-				if (type.isMemberClass() && !Modifier.isStatic(type.getModifiers()))
+				if (type.isArray())
+					throw new SerializationException("Encountered JSON object when expected array of type: " + type.getName(), ex);
+				else if (type.isMemberClass() && !Modifier.isStatic(type.getModifiers()))
 					throw new SerializationException("Class cannot be created (non-static member class): " + type.getName(), ex);
 				else
 					throw new SerializationException("Class cannot be created (missing no-arg constructor): " + type.getName(), ex);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DCharacterControllerTest.java
Patch:
@@ -88,7 +88,7 @@ private void createWorld() {
 //		platforms.add(new MovingPlatform(40, 3, 20, 0.5f, 0, 2, 5));
 	}
  
-	private Body createBox(BodyType type, float width, float height, float density) {
+	Body createBox(BodyType type, float width, float height, float density) {
 		BodyDef def = new BodyDef();
 		def.type = type;
 		Body box = world.createBody(def);

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -86,7 +86,7 @@ public interface Application {
 	 * 
 	 * @author mzechner */
 	public enum ApplicationType {
-		Android, Desktop, Applet, WebGL
+		Android, Desktop, Applet, WebGL, iOS
 	}
 
 	public static final int LOG_NONE = 0;

File: gdx/src/com/badlogic/gdx/physics/box2d/ChainShape.java
Patch:
@@ -33,7 +33,7 @@ public void createLoop (Vector2[] vertices) {
 			verts[i] = vertices[j].x;
 			verts[i + 1] = vertices[j].y;
 		}
-		jniCreateLoop(addr, verts, verts.length);
+		jniCreateLoop(addr, verts, verts.length / 2);
 	}
 
 	private native void jniCreateLoop (long addr, float[] verts, int numVertices); /*
@@ -53,7 +53,7 @@ public void createChain (Vector2[] vertices) {
 			verts[i] = vertices[j].x;
 			verts[i + 1] = vertices[j].y;
 		}
-		jniCreateChain(addr, verts, verts.length);
+		jniCreateChain(addr, verts, verts.length / 2);
 	}
 
 	private native void jniCreateChain (long addr, float[] verts, int numVertices); /*

File: extensions/gdx-stb-truetype/src/com/badlogic/gdx/graphics/g2d/stbtt/StbTrueTypeBuild.java
Patch:
@@ -27,6 +27,6 @@ public static void main(String[] args) throws Exception {
 		new AntScriptGenerator().generate(new BuildConfig("gdx-stb-truetype"), win32home, win32, win64, lin32, lin64, mac, android);
 		
 		// build natives
-//		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
+		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
 	}
 }

File: extensions/gdx-stb-truetype/src/com/badlogic/gdx/graphics/g2d/stbtt/StbTrueTypeFont.java
Patch:
@@ -88,7 +88,7 @@ public StbTrueTypeFont (FileHandle file) {
 
 	public StbTrueTypeFont (byte[] data, int offset) {
 		new SharedLibraryLoader().load("gdx-stb-truetype");
-		this.addr = StbTrueType.initFont(data, offset);
+		this.addr = StbTrueType.initFont(data, offset, data.length - offset);
 		if (this.addr == 0) throw new GdxRuntimeException("Couldn't load truetype font");
 	}
 

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/parsing/RobustJavaMethodParser.java
Patch:
@@ -188,6 +188,7 @@ private ArrayList<JniSection> getNativeCodeBodies(String classFile) {
 		while(iter.hasNext()) {
 			JniSection section = iter.next();
 			if(section.getNativeCode().startsWith("JNI")) iter.remove();
+			if(section.getNativeCode().startsWith("-{")) iter.remove();
 		}
 		return sections;
 	}

File: extensions/gdx-stb-truetype/src/com/badlogic/gdx/graphics/g2d/stbtt/StbTrueType.java
Patch:
@@ -30,7 +30,6 @@ public Vertex (int x, int y, int cx, int cy, int type, int padding) {
 	static native long initFont (byte[] data, int offset); /*
 		stbtt_fontinfo* info = (stbtt_fontinfo*)malloc(sizeof(stbtt_fontinfo));
 		int result = stbtt_InitFont(info, (const unsigned char*)data, offset);
-		%jnigen-cleanup%
 		if(!result) {
 			free(info);
 			return 0;

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -115,7 +115,7 @@ public InputStream read () {
 		}
 		try {
 			return new FileInputStream(file());
-		} catch (FileNotFoundException ex) {
+		} catch (Exception ex) {
 			if (file().isDirectory())
 				throw new GdxRuntimeException("Cannot open a stream to a directory: " + file + " (" + type + ")", ex);
 			throw new GdxRuntimeException("Error reading file: " + file + " (" + type + ")", ex);
@@ -258,7 +258,7 @@ public OutputStream write (boolean append) {
 		parent().mkdirs();
 		try {
 			return new FileOutputStream(file(), append);
-		} catch (FileNotFoundException ex) {
+		} catch (Exception ex) {
 			if (file().isDirectory())
 				throw new GdxRuntimeException("Cannot open a stream to a directory: " + file + " (" + type + ")", ex);
 			throw new GdxRuntimeException("Error writing file: " + file + " (" + type + ")", ex);

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.badlogic.gdx.graphics.g2d;
 
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter.DEFAULT;
-
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
@@ -30,7 +28,6 @@
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-import com.badlogic.gdx.graphics.glutils.VertexData;
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.utils.Disposable;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -408,6 +408,7 @@ public void toStageCoordinates (int x, int y, Vector2 out) {
 	/** Clears this stage, removing all {@link Actor}s and {@link Group}s. */
 	public void clear () {
 		root.clear();
+		unfocusAll();
 	}
 
 	/** Removes the given {@link Actor} from the stage by trying to find it recursively in the scenegraph.

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglApplication.java
Patch:
@@ -319,9 +319,7 @@ public void exit () {
 		postRunnable(new Runnable() {
 			@Override
 			public void run () {
-				JoglApplication.this.graphics.listener.pause();
-				JoglApplication.this.graphics.listener.dispose();
-				System.exit(-1);
+				frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
 			}
 		});
 	}

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -30,6 +30,7 @@
 import com.badlogic.gdx.tests.SpriteBatchTest;
 import com.badlogic.gdx.tests.TextButtonTest;
 import com.badlogic.gdx.tests.TextureBindTest;
+import com.badlogic.gdx.tests.TextureBindTestGL2;
 import com.badlogic.gdx.tests.VorbisTest;
 import com.badlogic.gdx.tests.WavTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -41,10 +42,10 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		
-		GdxTest test = new TextureBindTest();
+		GdxTest test = new TextureBindTestGL2();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
-		config.vSyncEnabled = true;
+		config.vSyncEnabled = false;
 		config.resizable = true;
 		new LwjglApplication(test, config);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextButtonTest.java
Patch:
@@ -35,7 +35,7 @@ public class TextButtonTest extends GdxTest {
 	public void create () {
 		stage = new Stage(0, 0, false, new SpriteBatch());
 		Skin skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
-		for (int i = 0; i < 100; i++) {
+		for (int i = 0; i < 1000; i++) {
 			TextButton t = new TextButton("Button"+i, skin);
 			t.x = MathUtils.random(0, Gdx.graphics.getWidth());
 			t.y = MathUtils.random(0, Gdx.graphics.getHeight());
@@ -63,6 +63,6 @@ public void resize (int width, int height) {
 
 	@Override
 	public boolean needsGL20 () {
-		return true;
+		return false;
 	}
 }
\ No newline at end of file

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -97,7 +97,7 @@ public class GdxTests {
 			VorbisTest.class, WaterRipples.class, HelloTriangle.class,
 			SimpleVertexShader.class, ShapeRendererTest.class,
 			MoveSpriteExample.class, StbTrueTypeTest.class, SoundTouchTest.class, Mpg123Test.class, WavTest.class,
-			TextButtonTest.class, TextureBindTest.class};
+			TextButtonTest.class, TextButtonTestGL2.class, TextureBindTest.class, TextureBindTestGL2.class};
 
 	public static String[] getNames() {
 		List<String> names = new ArrayList<String>();

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -41,7 +41,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		
-		GdxTest test = new TextButtonTest();
+		GdxTest test = new TextureBindTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureBindTest.java
Patch:
@@ -93,6 +93,6 @@ public void render() {
 
 	@Override
 	public boolean needsGL20() {
-		return false;
+		return true;
 	}
 }

File: gdx/src/com/badlogic/gdx/math/Matrix4.java
Patch:
@@ -874,7 +874,7 @@ static inline void matrix4_rot(float* mat, float* vec) {
 	 * @param mat the matrix
 	 * @param vec the vector. */
 	public static native void mulVec (float[] mat, float[] vec); /*
-		matrix4_mul(mat, vec);
+		matrix4_mulVec(mat, vec);
 	*/
 
 	/** Multiplies the vectors with the given matrix. The matrix array is assumed to hold a 4x4 column major matrix as you can get

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -26,8 +26,10 @@
 import com.badlogic.gdx.tests.PixmapTest;
 import com.badlogic.gdx.tests.ShapeRendererTest;
 import com.badlogic.gdx.tests.SoundTouchTest;
+import com.badlogic.gdx.tests.SpriteBatchShaderTest;
 import com.badlogic.gdx.tests.SpriteBatchTest;
 import com.badlogic.gdx.tests.TextButtonTest;
+import com.badlogic.gdx.tests.TextureBindTest;
 import com.badlogic.gdx.tests.VorbisTest;
 import com.badlogic.gdx.tests.WavTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -39,7 +41,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		
-		GdxTest test = new Box2DTestCollection();
+		GdxTest test = new TextButtonTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -97,7 +97,7 @@ public class GdxTests {
 			VorbisTest.class, WaterRipples.class, HelloTriangle.class,
 			SimpleVertexShader.class, ShapeRendererTest.class,
 			MoveSpriteExample.class, StbTrueTypeTest.class, SoundTouchTest.class, Mpg123Test.class, WavTest.class,
-			TextButtonTest.class};
+			TextButtonTest.class, TextureBindTest.class};
 
 	public static String[] getNames() {
 		List<String> names = new ArrayList<String>();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -145,7 +145,7 @@ protected void drawChildren (SpriteBatch batch, float parentAlpha) {
 					if (!child.visible) continue;
 					child.x += offsetX;
 					child.y += offsetY;
-					child.draw(batch, parentAlpha);
+//					child.draw(batch, parentAlpha);
 					child.x -= offsetX;
 					child.y -= offsetY;
 				}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/Table.java
Patch:
@@ -104,8 +104,8 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 	 * patch. */
 	protected void drawBackground (SpriteBatch batch, float parentAlpha) {
 		if (backgroundPatch != null) {
-			batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
-			backgroundPatch.draw(batch, x, y, width, height);
+			//batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
+			//backgroundPatch.draw(batch, x, y, width, height);
 		}
 	}
 

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -19,13 +19,15 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.tests.AudioDeviceTest;
+import com.badlogic.gdx.tests.Box2DTestCollection;
 import com.badlogic.gdx.tests.ImmediateModeRendererTest;
 import com.badlogic.gdx.tests.Mpg123Test;
 import com.badlogic.gdx.tests.MusicTest;
 import com.badlogic.gdx.tests.PixmapTest;
 import com.badlogic.gdx.tests.ShapeRendererTest;
 import com.badlogic.gdx.tests.SoundTouchTest;
 import com.badlogic.gdx.tests.SpriteBatchTest;
+import com.badlogic.gdx.tests.TextButtonTest;
 import com.badlogic.gdx.tests.VorbisTest;
 import com.badlogic.gdx.tests.WavTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -37,7 +39,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		
-		GdxTest test = new WavTest();
+		GdxTest test = new Box2DTestCollection();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StagePerformanceTest.java
Patch:
@@ -36,7 +36,7 @@ public class StagePerformanceTest extends GdxTest {
 
 	@Override
 	public boolean needsGL20 () {
-		return false;
+		return true;
 	}
 
 	TextureRegion[] regions;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -96,7 +96,8 @@ public class GdxTests {
 			VertexBufferObjectShaderTest.class, VibratorTest.class,
 			VorbisTest.class, WaterRipples.class, HelloTriangle.class,
 			SimpleVertexShader.class, ShapeRendererTest.class,
-			MoveSpriteExample.class, StbTrueTypeTest.class, SoundTouchTest.class, Mpg123Test.class, WavTest.class};
+			MoveSpriteExample.class, StbTrueTypeTest.class, SoundTouchTest.class, Mpg123Test.class, WavTest.class,
+			TextButtonTest.class};
 
 	public static String[] getNames() {
 		List<String> names = new ArrayList<String>();

File: extensions/gdx-tokamak/src/com/badlogic/gdx/physics/tokamak/TokamakBuild.java
Patch:
@@ -23,6 +23,7 @@ public static void main(String[] args) throws Exception {
 		win32home.headerDirs = headers;
 		win32home.cppIncludes = cppIncludes;
 		win32home.cppExcludes = new String[] { "**/perflinux.cpp" };
+		win32home.excludeFromMasterBuildFile = true;
 		
 		BuildTarget win32 = BuildTarget.newDefaultTarget(TargetOs.Windows, false);
 		win32.headerDirs = headers;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -37,7 +37,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		
-		GdxTest test = new Mpg123Test();
+		GdxTest test = new WavTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -96,7 +96,7 @@ public class GdxTests {
 			VertexBufferObjectShaderTest.class, VibratorTest.class,
 			VorbisTest.class, WaterRipples.class, HelloTriangle.class,
 			SimpleVertexShader.class, ShapeRendererTest.class,
-			MoveSpriteExample.class, StbTrueTypeTest.class, SoundTouchTest.class };
+			MoveSpriteExample.class, StbTrueTypeTest.class, SoundTouchTest.class, Mpg123Test.class, WavTest.class};
 
 	public static String[] getNames() {
 		List<String> names = new ArrayList<String>();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Mpg123Test.java
Patch:
@@ -46,7 +46,7 @@ public void create () {
 		// Create the decoder and log some properties. Note that we need
 		// an external or absolute file
 		decoder = new Mpg123Decoder(externalFile);
-		Gdx.app.log("Vorbis", "channels: " + decoder.getChannels() + ", rate: " + decoder.getRate() + ", length: " + decoder.getLength());
+		Gdx.app.log("Mp3", "channels: " + decoder.getChannels() + ", rate: " + decoder.getRate() + ", length: " + decoder.getLength());
 
 		// Create an audio device for playback
 		device = Gdx.audio.newAudioDevice(decoder.getRate(), decoder.getChannels() == 1? true: false);

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/AudioBuild.java
Patch:
@@ -113,8 +113,8 @@ public static void main(String[] args) throws Exception {
 		mac.preCompileTask = precompileTask;
 		
 		BuildTarget android = BuildTarget.newDefaultTarget(TargetOs.Android, false);
-		android.cFlags += " -DFIXED_POINT -D_ARM_ASSEM_ -D__ANDROID__";
-		android.cppFlags += " -DFIXED_POINT -D_ARM_ASSEM_ -D__ANDROID__";
+		android.cFlags += " -DFIXED_POINT -D_ARM_ASSEM_ -D__ANDROID__ -DMPG123_NO_CONFIGURE -DOPT_ARM -DHAVE_STRERROR -DMPG123_NO_LARGENAME";
+		android.cppFlags += " -DFIXED_POINT -D_ARM_ASSEM_ -D__ANDROID__ -DMPG123_NO_CONFIGURE -DOPT_ARM -DHAVE_STRERROR -DMPG123_NO_LARGENAME";
 		android.headerDirs = headerDirs;
 		android.cIncludes = cIncludes;
 		android.cppIncludes = cppIncludes;
@@ -123,7 +123,7 @@ public static void main(String[] args) throws Exception {
 		
 		new AntScriptGenerator().generate(buildConfig, win32home, win32, win64, lin32, lin64, mac, android);
 		
-		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
+		BuildExecutor.executeAnt("jni/build-linux64.xml", "clean postcompile -v");
 		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
 	}
 }

File: gdx/src/com/badlogic/gdx/assets/loaders/TextureAtlasLoader.java
Patch:
@@ -61,6 +61,8 @@ public Array<AssetDescriptor> getDependencies (String fileName, TextureAtlasPara
 			TextureParameter params = new TextureParameter();
 			params.format = page.format;
 			params.genMipMaps = page.useMipMaps;
+			params.minFilter = page.minFilter;
+			params.magFilter = page.magFilter;
 			dependencies.add(new AssetDescriptor(handle.path().replaceAll("\\\\", "/"), Texture.class, params));
 		}
 		return dependencies;

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/AudioBuild.java
Patch:
@@ -79,7 +79,7 @@ public static void main(String[] args) throws Exception {
 		lin64.cppExcludes = cppExcludes;
 		lin64.preCompileTask = precompileTask;
 		
-		BuildTarget mac = BuildTarget.newDefaultTarget(TargetOs.MacOsX, true);
+		BuildTarget mac = BuildTarget.newDefaultTarget(TargetOs.MacOsX, false);
 		mac.cFlags += " -DFIXED_POINT";
 		mac.cppFlags += " -DFIXED_POINT";
 		mac.headerDirs = headerDirs;
@@ -99,7 +99,7 @@ public static void main(String[] args) throws Exception {
 		
 		new AntScriptGenerator().generate(buildConfig, win32home, win32, win64, lin32, lin64, mac, android);
 		
-		BuildExecutor.executeAnt("jni/build-windows32home.xml", "clean postcompile -v");
+		BuildExecutor.executeAnt("jni/build-macosx32.xml", "clean postcompile -v");
 		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,7 +18,9 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.AudioDeviceTest;
 import com.badlogic.gdx.tests.ImmediateModeRendererTest;
+import com.badlogic.gdx.tests.MusicTest;
 import com.badlogic.gdx.tests.PixmapTest;
 import com.badlogic.gdx.tests.ShapeRendererTest;
 import com.badlogic.gdx.tests.SoundTouchTest;

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/AudioBuild.java
Patch:
@@ -32,6 +32,8 @@ public static void main(String[] args) throws Exception {
 		String precompileTask = "<copy failonerror=\"true\" tofile=\"soundtouch/include/STTypes.h\" verbose=\"true\" overwrite=\"true\" file=\"STTypes.h.patched\"/>";
 		BuildConfig buildConfig = new BuildConfig("gdx-audio");
 		BuildTarget win32home = BuildTarget.newDefaultTarget(TargetOs.Windows, false);
+		win32home.cFlags += " -DFIXED_POINT";
+		win32home.cppFlags += " -DFIXED_POINT";
 		win32home.compilerPrefix = "";
 		win32home.buildFileName = "build-windows32home.xml";
 		win32home.headerDirs = headerDirs;
@@ -97,7 +99,7 @@ public static void main(String[] args) throws Exception {
 		
 		new AntScriptGenerator().generate(buildConfig, win32home, win32, win64, lin32, lin64, mac, android);
 		
-		BuildExecutor.executeAnt("jni/build-macosx32.xml", "-v");
+		BuildExecutor.executeAnt("jni/build-windows32home.xml", "clean postcompile -v");
 		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
 	}
 }

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/analysis/KissFFT.java
Patch:
@@ -116,9 +116,9 @@ static inline float scale( kiss_fft_scalar val )
 			float im = scale(fft->spectrum[i].i) * fft->numSamples;
 	
 			if( i > 0 )
-				spectrum[i] = sqrtf(re*re + im*im) / (fft->numSamples);
+				spectrum[i] = sqrtf(re*re + im*im);
 			else
-				spectrum[i] = sqrtf(re*re + im*im) / (fft->numSamples);
+				spectrum[i] = sqrtf(re*re + im*im);
 		}
 	*/
 

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -34,7 +34,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		
-		GdxTest test = new SpriteBatchTest();
+		GdxTest test = new SoundTouchTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -19,8 +19,10 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.tests.ImmediateModeRendererTest;
+import com.badlogic.gdx.tests.PixmapTest;
 import com.badlogic.gdx.tests.ShapeRendererTest;
 import com.badlogic.gdx.tests.SoundTouchTest;
+import com.badlogic.gdx.tests.SpriteBatchTest;
 import com.badlogic.gdx.tests.VorbisTest;
 import com.badlogic.gdx.tests.WavTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -32,7 +34,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		
-		GdxTest test = new ImmediateModeRendererTest();
+		GdxTest test = new SpriteBatchTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: gdx/src/com/badlogic/gdx/graphics/GLCommon.java
Patch:
@@ -23,6 +23,8 @@
  * @author mzechner */
 public interface GLCommon {
 	public static final int GL_GENERATE_MIPMAP = 0x8191;
+	public static final int GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
+	public static final int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
 
 	public void glActiveTexture (int texture);
 

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -139,7 +139,7 @@ public static boolean isPointInPolygon (List<Vector2> polygon, Vector2 point) {
 	 * @return The distance between the line segment and the point. */
 	public static float distanceLinePoint (Vector2 start, Vector2 end, Vector2 point) {
 		tmp.set(end.x, end.y, 0);
-		float l2 = tmp.sub(start.y, start.y, 0).len2();
+		float l2 = tmp.sub(start.x, start.y, 0).len2();
 		if (l2 == 0.0f) // start == end
 			return point.dst(start);
 

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/AudioBuild.java
Patch:
@@ -88,7 +88,7 @@ public static void main(String[] args) throws Exception {
 		
 		new AntScriptGenerator().generate(buildConfig, win32home, win32, win64, lin32, lin64, android);
 		
-		BuildExecutor.executeAnt("jni/build-windows32home.xml", " -v");
+		BuildExecutor.executeAnt("jni/build-windows32home.xml", "clean postcompile -v");
 		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
 	}
 }

File: gdx/src/com/badlogic/gdx/utils/SharedLibraryLoader.java
Patch:
@@ -81,8 +81,6 @@ private String extractLibrary (String sharedLibName) {
 			input.close();
 			output.close();
 		} catch (IOException ex) {
-			ex.printStackTrace();
-			throw new RuntimeException(ex);
 		}
 		return nativeFile.exists() ? nativeFile.getAbsolutePath() : null;
 	}

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -27,7 +27,7 @@ public static void main (String[] argv) {
 		// this is only here for me to debug native code faster
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 		
-		GdxTest test = new com.badlogic.gdx.tests.StbTrueTypeTest();
+		GdxTest test = new com.badlogic.gdx.tests.ImmediateModeRendererTest();
 		JoglApplicationConfiguration config = new JoglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new JoglApplication(test, config);

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,8 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.ImmediateModeRendererTest;
+import com.badlogic.gdx.tests.ShapeRendererTest;
 import com.badlogic.gdx.tests.SoundTouchTest;
 import com.badlogic.gdx.tests.VorbisTest;
 import com.badlogic.gdx.tests.WavTest;
@@ -30,7 +32,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		
-		GdxTest test = new WavTest();
+		GdxTest test = new ImmediateModeRendererTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ShapeRendererTest.java
Patch:
@@ -32,7 +32,7 @@ public class ShapeRendererTest extends GdxTest {
 
 	@Override
 	public boolean needsGL20 () {
-		return false;
+		return true;
 	}
 
 	ShapeRenderer renderer;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -95,14 +95,14 @@ public int getHeight () {
 		if (canvas != null)
 			return canvas.getHeight();
 		else
-			return config.height;
+			return Display.getHeight();
 	}
 
 	public int getWidth () {
 		if (canvas != null)
 			return canvas.getWidth();
 		else
-			return config.width;
+			return Display.getWidth();
 	}
 
 	public boolean isGL11Available () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -5,7 +5,6 @@
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
 import com.badlogic.gdx.scenes.scene2d.Actor;
-import com.badlogic.gdx.scenes.scene2d.ui.Button.ButtonStyle;
 import com.badlogic.gdx.scenes.scene2d.ui.tablelayout.Table;
 
 /** A button is a {@link Table} with a checked state and additional {@link ButtonStyle style} fields for pressed, unpressed, and

File: gdx/src/com/badlogic/gdx/utils/SharedLibraryLoader.java
Patch:
@@ -10,7 +10,6 @@
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
-import com.badlogic.gdx.jnigen.test.MyJniClass;
 
 /**
  * Loads shared libraries from a natives jar file (desktop) or arm folders (Android). For desktop projects,
@@ -29,7 +28,7 @@ public SharedLibraryLoader() {
 	
 	/**
 	 * Fetches the natives from the given natives jar file. Used
-	 * for testing a shared lib on the fly, see {@link MyJniClass}.
+	 * for testing a shared lib on the fly.
 	 * @param nativesJar
 	 */
 	public SharedLibraryLoader(String nativesJar) {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.tests.SoundTouchTest;
 import com.badlogic.gdx.tests.VorbisTest;
+import com.badlogic.gdx.tests.WavTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 
@@ -29,7 +30,7 @@ public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
 		
-		GdxTest test = new SoundTouchTest();
+		GdxTest test = new WavTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
Patch:
@@ -141,7 +141,7 @@ public Sound newSound (FileHandle file) {
 
 	/** {@inheritDoc} */
 	@Override
-	public AudioRecorder newAudioRecoder (int samplingRate, boolean isMono) {
+	public AudioRecorder newAudioRecorder (int samplingRate, boolean isMono) {
 		return new AndroidAudioRecorder(samplingRate, isMono);
 	}
 

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALAudio.java
Patch:
@@ -266,7 +266,7 @@ public AudioDevice newAudioDevice (int sampleRate, boolean isMono) {
 		return new OpenALAudioDevice(this, sampleRate, isMono);
 	}
 
-	public AudioRecorder newAudioRecoder (int samplingRate, boolean isMono) {
+	public AudioRecorder newAudioRecorder (int samplingRate, boolean isMono) {
 		// BOZO - Write OpenAL recorder.
 		return new JavaSoundAudioRecorder(samplingRate, isMono);
 	}

File: gdx/src/com/badlogic/gdx/Audio.java
Patch:
@@ -55,7 +55,7 @@ public interface Audio {
 	 * @return the AudioRecorder
 	 * 
 	 * @throws GdxRuntimeException in case the recorder could not be created */
-	public AudioRecorder newAudioRecoder (int samplingRate, boolean isMono);
+	public AudioRecorder newAudioRecorder (int samplingRate, boolean isMono);
 
 	/** <p>
 	 * Creates a new {@link Sound} which is used to play back audio effects such as gun shots or explosions. The Sound's audio data

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AudioRecorderTest.java
Patch:
@@ -32,7 +32,7 @@ public class AudioRecorderTest extends GdxTest {
 	@Override
 	public void create () {
 		device = Gdx.audio.newAudioDevice(44100, true);
-		recorder = Gdx.audio.newAudioRecoder(44100, true);
+		recorder = Gdx.audio.newAudioRecorder(44100, true);
 		renderer = new ImmediateModeRenderer10();
 
 		Thread t = new Thread(new Runnable() {
@@ -72,7 +72,7 @@ public void pause () {
 	@Override
 	public void resume () {
 		device = Gdx.audio.newAudioDevice(44100, true);
-		recorder = Gdx.audio.newAudioRecoder(44100, true);
+		recorder = Gdx.audio.newAudioRecorder(44100, true);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/physics/box2d/Manifold.java
Patch:
@@ -23,7 +23,6 @@ public class Manifold {
 #include <Box2D/Box2D.h>
 	 */
 	
-	final World world;
 	long addr;
 	final ManifoldPoint[] points = new ManifoldPoint[] {new ManifoldPoint(), new ManifoldPoint()};
 	final Vector2 localNormal = new Vector2();
@@ -32,8 +31,7 @@ public class Manifold {
 	final int[] tmpInt = new int[2];
 	final float[] tmpFloat = new float[4];
 
-	protected Manifold (World world, long addr) {
-		this.world = world;
+	protected Manifold (long addr) {
 		this.addr = addr;
 	}
 

File: gdx/src/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -860,7 +860,7 @@ private boolean contactFilter (long fixtureA, long fixtureB) {
 	}
 
 	private final Contact contact = new Contact(this, 0);
-	private final Manifold manifold = new Manifold(this, 0);
+	private final Manifold manifold = new Manifold(0);
 	private final ContactImpulse impulse = new ContactImpulse(this, 0);
 
 	private void beginContact (long contactAddr) {

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/NativeCodeGenerator.java
Patch:
@@ -121,7 +121,7 @@ public class NativeCodeGenerator {
 	 * @throws Exception
 	 */
 	public void generate() throws Exception {
-		generate("src", "bin", "jni", new String[0], new String[0]);
+		generate("src", "bin", "jni", null, null);
 	}
 	
 	/**

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -96,7 +96,7 @@ public class GdxTests {
 			VertexBufferObjectShaderTest.class, VibratorTest.class,
 			VorbisTest.class, WaterRipples.class, HelloTriangle.class,
 			SimpleVertexShader.class, ShapeRendererTest.class,
-			MoveSpriteExample.class, StbTrueTypeTest.class };
+			MoveSpriteExample.class, StbTrueTypeTest.class, SoundTouchTest.class };
 
 	public static String[] getNames() {
 		List<String> names = new ArrayList<String>();

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -42,8 +42,10 @@
 
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
+		// this is only here for me to debug native code faster
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
-		GdxTest test = new InputTest();
+		
+		GdxTest test = new StbTrueTypeTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: extensions/gdx-stb-truetype/src/com/badlogic/gdx/graphics/g2d/stbtt/StbTrueTypeBuild.java
Patch:
@@ -27,6 +27,6 @@ public static void main(String[] args) throws Exception {
 		new AntScriptGenerator().generate(new BuildConfig("gdx-stb-truetype"), win32home, win32, win64, lin32, lin64, mac, android);
 		
 		// build natives
-		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
+//		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
 	}
 }

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -187,6 +187,7 @@ public void run () {
 				if (lastWidth != width || lastHeight != height) {
 					lastWidth = width;
 					lastHeight = height;
+					Gdx.gl.glViewport(0, 0, lastWidth, lastHeight);
 					listener.resize(width, height);
 				}
 				input.processEvents();

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -23,8 +23,8 @@ public class JoglDebugStarter {
 
 	public static void main (String[] argv) {
 		JoglApplicationConfiguration config = new JoglApplicationConfiguration();
-		config.useGL20 = true;
+		config.useGL20 = false;
 		config.vSyncEnabled = false;
-		new JoglApplication(new com.badlogic.gdx.tests.UITest(), config);
+		new JoglApplication(new com.badlogic.gdx.tests.MD5Test(), config);
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -43,7 +43,7 @@
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
 		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
-		GdxTest test = new MD5Test();
+		GdxTest test = new InputTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InputTest.java
Patch:
@@ -29,7 +29,7 @@ public class InputTest extends GdxTest implements InputProcessor {
 	public void create () {
 //		Gdx.input = new RemoteInput();
 		Gdx.input.setInputProcessor(this);
-		Gdx.input.setCursorCatched(true);
+//		Gdx.input.setCursorCatched(true);
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MD5Test.java
Patch:
@@ -65,7 +65,7 @@ public void create () {
 
 		batch = new SpriteBatch();
 		font = new BitmapFont();
-		Gdx.graphics.getGL10().glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 
 		Gdx.input.setInputProcessor(this);
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md5/MD5Jni.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.badlogic.gdx.graphics.g3d.loaders.md5;
 
+import com.badlogic.gdx.math.Vector3;
+
 public class MD5Jni {
 	public static native void calculateVertices (float[] joints, float[] weights, float[] verticesIn, float[] verticesOut,
 		int numVertices, int vstride, int wstride); /*

File: gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md5/MD5Mesh.java
Patch:
@@ -204,9 +204,9 @@ public static void calculateVertices (MD5Joints skeleton, float[] weights, float
 	}
 
 	public void calculateVerticesJni (MD5Joints skeleton, float[] verts) {
-		MD5Jni.calculateVertices(skeleton.joints, weights, vertices, verts, numVertices);
+		MD5Jni.calculateVertices(skeleton.joints, weights, vertices, verts, vertices.length, floatsPerVertex, floatsPerWeight);
 	}
-
+	
 	public void calculateNormalsBind (MD5Joints bindPoseSkeleton, float[] verts) {
 		calculateNormalsBind(bindPoseSkeleton, weights, vertices, indices, verts, floatsPerVertex, floatsPerWeight);
 	}

File: gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md5/MD5Renderer.java
Patch:
@@ -99,6 +99,7 @@ public void setSkeleton (MD5Joints skeleton) {
 			MD5Mesh mesh = model.meshes[i];
 
 			if (useJni) {
+				if(useNormals) throw new GdxRuntimeException("Can't skin vertices & normals using native code yet");
 				mesh.calculateVerticesJni(skeleton, vertices[i]);
 			} else {
 				if (useNormals) {

File: gdx/src/com/badlogic/gdx/utils/GdxBuild.java
Patch:
@@ -69,6 +69,7 @@ public static void main(String[] args) throws Exception {
 		new AntScriptGenerator().generate(new BuildConfig("gdx", "../target/native", LIBS_DIR, JNI_DIR), mac, win32home, win32, win64, lin32, lin64, android);
 		
 		// build natives
-		BuildExecutor.executeAnt("jni-new/build-windows32home.xml", "clean postcompile -v");
+		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
+		BuildExecutor.executeAnt("jni/build.xml", "pack-natives -v");
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MD5Test.java
Patch:
@@ -43,12 +43,13 @@ public class MD5Test extends GdxTest implements InputProcessor {
 	@Override
 	public void create () {
 		Gdx.app.log("MD5 Test", "created");
-		model = MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(), true);
+		boolean useNormals = false;
+		model = MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(), useNormals);
 		anim = MD5Loader.loadAnimation(Gdx.files.internal("data/walk1.md5anim").read());
 		skeleton = new MD5Joints();
 		skeleton.joints = new float[anim.frames[0].joints.length];
 		animInfo = new MD5AnimationInfo(anim.frames.length, anim.secondsPerFrame);
-		renderer = new MD5Renderer(model, true, false);
+		renderer = new MD5Renderer(model, useNormals, false);
 		renderer.setSkeleton(model.baseSkeleton);
 
 		// long start = System.nanoTime();

File: gdx/src/com/badlogic/gdx/utils/GdxNativesLoader.java
Patch:
@@ -95,7 +95,7 @@ static public void load () {
 		String vm = System.getProperty("java.vm.name");
 		if (vm == null || !vm.contains("Dalvik")) {
 			if (isWindows) {
-				nativesLoaded = loadLibrary("gdx.dll", "gdx-64.dll");
+				nativesLoaded = loadLibrary("gdx.dll", "gdx64.dll");
 			} else if (isMac) {
 				nativesLoaded = loadLibrary("libgdx.dylib", "libgdx.dylib");
 				if (!nativesLoaded) {
@@ -107,15 +107,15 @@ static public void load () {
 					}
 				}
 			} else if (isLinux) {
-				nativesLoaded = loadLibrary("libgdx.so", "libgdx-64.so");
+				nativesLoaded = loadLibrary("libgdx.so", "libgdx64.so");
 			}
 			if (nativesLoaded) return;
 		}
 
 		if (!is64Bit || isMac) {
 			System.loadLibrary("gdx");
 		} else {
-			System.loadLibrary("gdx-64");
+			System.loadLibrary("gdx64");
 		}
 		nativesLoaded = true;
 	}

File: gdx/src/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -825,7 +825,7 @@ public Iterator<Joint> getJoints () {
 		int i = 0;
 		while( contact != 0 )
 		{
-			contacts[i++] = (long)contact;
+			contacts[i++] = (long long)contact;
 			contact = contact->GetNext();
 		}
 	*/

File: gdx/src/com/badlogic/gdx/physics/box2d/Body.java
Patch:
@@ -25,7 +25,7 @@
  * @author mzechner */
 public class Body {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 	 */
 	
 	/** the address of the body **/

File: gdx/src/com/badlogic/gdx/physics/box2d/ChainShape.java
Patch:
@@ -5,7 +5,7 @@
 
 public class ChainShape extends Shape {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 	 */
 	
 	public ChainShape () {

File: gdx/src/com/badlogic/gdx/physics/box2d/CircleShape.java
Patch:
@@ -22,7 +22,7 @@
  * @author mzechner */
 public class CircleShape extends Shape {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 	 */
 	
 	public CircleShape () {

File: gdx/src/com/badlogic/gdx/physics/box2d/Contact.java
Patch:
@@ -23,7 +23,7 @@
  * @author mzechner */
 public class Contact {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 	 */
 	
 	/** the address **/

File: gdx/src/com/badlogic/gdx/physics/box2d/ContactImpulse.java
Patch:
@@ -21,7 +21,7 @@
  * @author mzechner */
 public class ContactImpulse {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 	 */
 	
 	final World world;

File: gdx/src/com/badlogic/gdx/physics/box2d/EdgeShape.java
Patch:
@@ -7,7 +7,7 @@
  * used to ensure correct contact normals. */
 public class EdgeShape extends Shape {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 	 */
 	
 	public EdgeShape () {

File: gdx/src/com/badlogic/gdx/physics/box2d/Fixture.java
Patch:
@@ -22,7 +22,7 @@
 
 public class Fixture {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 	 */
 	/** body **/
 	private Body body;

File: gdx/src/com/badlogic/gdx/physics/box2d/Joint.java
Patch:
@@ -21,7 +21,7 @@
 
 public abstract class Joint {
 	/*JNI
-#include <Box2d/Box2D.h> 
+#include <Box2D/Box2D.h> 
 	 */
 	/** the address of the joint **/
 	protected long addr;

File: gdx/src/com/badlogic/gdx/physics/box2d/Manifold.java
Patch:
@@ -20,7 +20,7 @@
 
 public class Manifold {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 	 */
 	
 	final World world;

File: gdx/src/com/badlogic/gdx/physics/box2d/PolygonShape.java
Patch:
@@ -20,7 +20,7 @@
 
 public class PolygonShape extends Shape {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 	 */
 	
 	/** Constructs a new polygon */

File: gdx/src/com/badlogic/gdx/physics/box2d/Shape.java
Patch:
@@ -23,7 +23,7 @@
  * @author mzechner */
 public abstract class Shape {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 	 */
 	
 	/** Enum describing the type of a shape

File: gdx/src/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -51,7 +51,7 @@
  * @author mzechner */
 public final class World implements Disposable {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 
 static jclass worldClass = 0;
 static jmethodID shouldCollideID = 0;

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/DistanceJoint.java
Patch:
@@ -23,7 +23,7 @@
  * massless, rigid rod. */
 public class DistanceJoint extends Joint {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 	 */
 	
 	public DistanceJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/FrictionJoint.java
Patch:
@@ -22,7 +22,7 @@
 /** Friction joint. This is used for top-down friction. It provides 2D translational friction and angular friction. */
 public class FrictionJoint extends Joint {
 	/*JNI
-#include <Box2d/Box2D.h> 
+#include <Box2D/Box2D.h> 
 	 */
 	
 	public FrictionJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/GearJoint.java
Patch:
@@ -26,7 +26,7 @@
  * @warning The revolute and prismatic joints must be attached to fixed bodies (which must be body1 on those joints). */
 public class GearJoint extends Joint {
 	/*JNI
-#include <Box2d/Box2D.h> 
+#include <Box2D/Box2D.h> 
 	 */
 	
 	public GearJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/MouseJoint.java
Patch:
@@ -25,7 +25,7 @@
  * because it was developed to be used in the testbed. If you want to learn how to use the mouse joint, look at the testbed. */
 public class MouseJoint extends Joint {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 	 */
 	
 	public MouseJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/PrismaticJoint.java
Patch:
@@ -24,7 +24,7 @@
  * friction. */
 public class PrismaticJoint extends Joint {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 	 */
 	
 	public PrismaticJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/PulleyJoint.java
Patch:
@@ -25,7 +25,7 @@
  * both sides. This is useful to prevent one side of the pulley hitting the top. */
 public class PulleyJoint extends Joint {
 	/*JNI
-#include <Box2d/Box2D.h> 
+#include <Box2D/Box2D.h> 
 	 */
 	
 	public PulleyJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/RevoluteJoint.java
Patch:
@@ -25,7 +25,7 @@
  * provided so that infinite forces are not generated. */
 public class RevoluteJoint extends Joint {
 	/*JNI
-#include <Box2d/Box2D.h> 
+#include <Box2D/Box2D.h> 
 	 */
 	
 	public RevoluteJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/RopeJoint.java
Patch:
@@ -10,7 +10,7 @@
  * want to dynamically control length. */
 public class RopeJoint extends Joint {
 	/*JNI
-#include <Box2d/Box2D.h>
+#include <Box2D/Box2D.h>
 	 */
 	
 	public RopeJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/WheelJoint.java
Patch:
@@ -9,7 +9,7 @@
  * friction. This joint is designed for vehicle suspensions. */
 public class WheelJoint extends Joint {
 	/*JNI
-#include <Box2d/Box2D.h> 
+#include <Box2D/Box2D.h> 
 	 */
 	
 	public WheelJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/Gdx2DPixmap.java
Patch:
@@ -236,7 +236,7 @@ public String getFormatString () {
 	}
 	
 	/*JNI
-	#include <gdx2d.h>
+	#include <gdx2d/gdx2d.h>
 	#include <stdlib.h>
 	 */
 	

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1.java
Patch:
@@ -186,7 +186,7 @@ public static Pixmap decodeImage (ETC1Data etc1Data, Format format) {
 	}
 	
 	/*JNI
-	#include <etc1_utils.h>
+	#include <etc1/etc1_utils.h>
 	#include <stdlib.h>
 	 */
 

File: gdx/src/com/badlogic/gdx/physics/box2d/Body.java
Patch:
@@ -25,7 +25,7 @@
  * @author mzechner */
 public class Body {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 	 */
 	
 	/** the address of the body **/

File: gdx/src/com/badlogic/gdx/physics/box2d/ChainShape.java
Patch:
@@ -5,7 +5,7 @@
 
 public class ChainShape extends Shape {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 	 */
 	
 	public ChainShape () {

File: gdx/src/com/badlogic/gdx/physics/box2d/CircleShape.java
Patch:
@@ -22,7 +22,7 @@
  * @author mzechner */
 public class CircleShape extends Shape {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 	 */
 	
 	public CircleShape () {

File: gdx/src/com/badlogic/gdx/physics/box2d/Contact.java
Patch:
@@ -23,7 +23,7 @@
  * @author mzechner */
 public class Contact {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 	 */
 	
 	/** the address **/

File: gdx/src/com/badlogic/gdx/physics/box2d/ContactImpulse.java
Patch:
@@ -21,7 +21,7 @@
  * @author mzechner */
 public class ContactImpulse {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 	 */
 	
 	final World world;

File: gdx/src/com/badlogic/gdx/physics/box2d/EdgeShape.java
Patch:
@@ -7,7 +7,7 @@
  * used to ensure correct contact normals. */
 public class EdgeShape extends Shape {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 	 */
 	
 	public EdgeShape () {

File: gdx/src/com/badlogic/gdx/physics/box2d/Fixture.java
Patch:
@@ -22,7 +22,7 @@
 
 public class Fixture {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 	 */
 	/** body **/
 	private Body body;

File: gdx/src/com/badlogic/gdx/physics/box2d/Joint.java
Patch:
@@ -21,7 +21,7 @@
 
 public abstract class Joint {
 	/*JNI
-#include <Box2D.h> 
+#include <Box2d/Box2D.h> 
 	 */
 	/** the address of the joint **/
 	protected long addr;

File: gdx/src/com/badlogic/gdx/physics/box2d/Manifold.java
Patch:
@@ -20,7 +20,7 @@
 
 public class Manifold {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 	 */
 	
 	final World world;

File: gdx/src/com/badlogic/gdx/physics/box2d/PolygonShape.java
Patch:
@@ -20,7 +20,7 @@
 
 public class PolygonShape extends Shape {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 	 */
 	
 	/** Constructs a new polygon */

File: gdx/src/com/badlogic/gdx/physics/box2d/Shape.java
Patch:
@@ -23,7 +23,7 @@
  * @author mzechner */
 public abstract class Shape {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 	 */
 	
 	/** Enum describing the type of a shape

File: gdx/src/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -51,7 +51,7 @@
  * @author mzechner */
 public final class World implements Disposable {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 
 static jclass worldClass = 0;
 static jmethodID shouldCollideID = 0;

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/DistanceJoint.java
Patch:
@@ -23,7 +23,7 @@
  * massless, rigid rod. */
 public class DistanceJoint extends Joint {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 	 */
 	
 	public DistanceJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/FrictionJoint.java
Patch:
@@ -22,7 +22,7 @@
 /** Friction joint. This is used for top-down friction. It provides 2D translational friction and angular friction. */
 public class FrictionJoint extends Joint {
 	/*JNI
-#include <Box2D.h> 
+#include <Box2d/Box2D.h> 
 	 */
 	
 	public FrictionJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/GearJoint.java
Patch:
@@ -26,7 +26,7 @@
  * @warning The revolute and prismatic joints must be attached to fixed bodies (which must be body1 on those joints). */
 public class GearJoint extends Joint {
 	/*JNI
-#include <Box2D.h> 
+#include <Box2d/Box2D.h> 
 	 */
 	
 	public GearJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/MouseJoint.java
Patch:
@@ -25,7 +25,7 @@
  * because it was developed to be used in the testbed. If you want to learn how to use the mouse joint, look at the testbed. */
 public class MouseJoint extends Joint {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 	 */
 	
 	public MouseJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/PrismaticJoint.java
Patch:
@@ -24,7 +24,7 @@
  * friction. */
 public class PrismaticJoint extends Joint {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 	 */
 	
 	public PrismaticJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/PulleyJoint.java
Patch:
@@ -25,7 +25,7 @@
  * both sides. This is useful to prevent one side of the pulley hitting the top. */
 public class PulleyJoint extends Joint {
 	/*JNI
-#include <Box2D.h> 
+#include <Box2d/Box2D.h> 
 	 */
 	
 	public PulleyJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/RevoluteJoint.java
Patch:
@@ -25,7 +25,7 @@
  * provided so that infinite forces are not generated. */
 public class RevoluteJoint extends Joint {
 	/*JNI
-#include <Box2D.h> 
+#include <Box2d/Box2D.h> 
 	 */
 	
 	public RevoluteJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/RopeJoint.java
Patch:
@@ -10,7 +10,7 @@
  * want to dynamically control length. */
 public class RopeJoint extends Joint {
 	/*JNI
-#include <Box2D.h>
+#include <Box2d/Box2D.h>
 	 */
 	
 	public RopeJoint (World world, long addr) {

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/WheelJoint.java
Patch:
@@ -9,7 +9,7 @@
  * friction. This joint is designed for vehicle suspensions. */
 public class WheelJoint extends Joint {
 	/*JNI
-#include <Box2D.h> 
+#include <Box2d/Box2D.h> 
 	 */
 	
 	public WheelJoint (World world, long addr) {

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/NativeCodeGenerator.java
Patch:
@@ -246,6 +246,9 @@ private void generateCppFile(ArrayList<JavaSegment> javaSegments, FileDescriptor
 			
 			if(segment instanceof JavaMethod) {
 				JavaMethod javaMethod = (JavaMethod)segment;
+				if(javaMethod.getNativeCode() == null) {
+					throw new RuntimeException("Method '" + javaMethod.getName() + "' has no body");
+				}
 				CMethod cMethod = findCMethod(javaMethod, cMethods);
 				if(cMethod == null) throw new RuntimeException("Couldn't find C method for Java method '" + javaMethod.getClassName() + "#" + javaMethod.getName() + "'");
 				emitJavaMethod(buffer, javaMethod, cMethod);

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/GdxAudioBuild.java
Patch:
@@ -13,7 +13,7 @@ public static void main(String[] args) throws Exception {
 										   new String[] { "**/AudioTools.java", "**/KissFFT.java", "**/VorbisDecoder.java" }, 
 										   new String[] { "**/Mpg123Decoder.java" });
 		
-		String[] headerDirs = new String[] { "kissfft", "vorbis", "soundtouch/include" };
+		String[] headerDirs = new String[] { "kissfft", "vorbis", "soundtouch/include", "soundtouch/source/SoundTouch/" };
 		String[] cIncludes = new String[] { 
 											"kissfft/*.c", 
 											"vorbis/*.c", 
@@ -22,7 +22,7 @@ public static void main(String[] args) throws Exception {
 											  "**/*AudioTools.cpp", 
 											  "**/*KissFFT.cpp", 
 											  "**/*VorbisDecoder.cpp", 
-											  "soundtouch/source/SoundTouch/**.cpp"
+											  "soundtouch/source/SoundTouch/*.cpp"
 		};
 		String[] cppExcludes = new String[] { "**/cpu_detect_x86_win.cpp" };
 		String precompileTask = "<copy failonerror=\"true\" tofile=\"soundtouch\\include\\STTypes.h\" verbose=\"true\" overwrite=\"true\" file=\"STTypes.h.patched\"/>";		
@@ -84,6 +84,6 @@ public static void main(String[] args) throws Exception {
 		
 		new AntScriptGenerator().generate(buildConfig, win32home, win32, win64, lin32, lin64, android);
 		
-		BuildExecutor.executeAnt("jni/build-windows32home.xml", " -v");
+		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
 	}
 }

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/io/VorbisDecoder.java
Patch:
@@ -92,7 +92,6 @@ public int skipSamples (int numSamples) {
 	private static native long openFile (String filename); /*
 		OggVorbis_File* ogg = new OggVorbis_File();
 		FILE* file = fopen(filename, "rb" );
-		%jnigen-cleanup%
 	
 		if( file == 0 )
 		{
@@ -143,7 +142,7 @@ public int skipSamples (int numSamples) {
 	
 		while( read != toRead )
 		{
-			int ret = ov_read( file->ogg, samples + read, toRead - read, &file->bitstream );
+			int ret = ov_read( file->ogg, (char*)samples + read, toRead - read, &file->bitstream );
 			if( ret == OV_HOLE )
 				continue;
 			if( ret == OV_EBADLINK || ret == OV_EINVAL || ret == 0 )

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/BuildExecutor.java
Patch:
@@ -81,6 +81,8 @@ private void printFileLineNumber(String line) {
 												}
 											}
 										}
+									} else {
+										System.out.println(line);
 									}
 								}
 							} catch(Throwable t) {

File: extensions/gdx-bullet/src/com/badlogic/gdx/physics/bullet/BulletBuild.java
Patch:
@@ -10,7 +10,7 @@
 public class BulletBuild {
 	public static void main(String[] args) throws Exception {
 		// generate C/C++ code
-		new NativeCodeGenerator().generate("src", "bin", "jni", null, new String[] { "**/BulletBuild.java" });
+		new NativeCodeGenerator().generate("src", "bin", "jni");
 
 		// generate build scripts, for win32 only
 		// custom target for testing purposes

File: extensions/gdx-bullet/src/com/badlogic/gdx/physics/bullet/BulletBuild.java
Patch:
@@ -10,7 +10,7 @@
 public class BulletBuild {
 	public static void main(String[] args) throws Exception {
 		// generate C/C++ code
-		new NativeCodeGenerator().generate("src", "bin", "jni");
+		new NativeCodeGenerator().generate("src", "bin", "jni", null, new String[] { "**/BulletBuild.java" });
 
 		// generate build scripts, for win32 only
 		// custom target for testing purposes
@@ -55,7 +55,7 @@ public static void main(String[] args) throws Exception {
 		android.cExcludes = android.cppExcludes = excludes;
 		android.headerDirs = headers;
 		
-		new AntScriptGenerator().generate(new BuildConfig("bullet"), win32home, win32, win64, lin32, lin64, mac, android);
+		new AntScriptGenerator().generate(new BuildConfig("gdx-bullet"), win32home, win32, win64, lin32, lin64, mac, android);
 
 		// build natives
 		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");

File: extensions/gdx-stb-truetype/src/com/badlogic/gdx/graphics/g2d/stbtt/StbTrueTypeBuild.java
Patch:
@@ -24,7 +24,7 @@ public static void main(String[] args) throws Exception {
 		BuildTarget lin64 = BuildTarget.newDefaultTarget(TargetOs.Linux, true);
 		BuildTarget mac = BuildTarget.newDefaultTarget(TargetOs.MacOsX, false);
 		BuildTarget android = BuildTarget.newDefaultTarget(TargetOs.Android, false);
-		new AntScriptGenerator().generate(new BuildConfig("stbtruetype"), win32home, win32, win64, lin32, lin64, mac, android);
+		new AntScriptGenerator().generate(new BuildConfig("gdx-stbtruetype"), win32home, win32, win64, lin32, lin64, mac, android);
 		
 		// build natives
 		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");

File: gdx/src/com/badlogic/gdx/utils/GdxBuild.java
Patch:
@@ -43,6 +43,6 @@ public static void main(String[] args) throws Exception {
 		target.headerDirs = headerDirs;
 		
 		new AntScriptGenerator().generate(config, target);
-		BuildExecutor.executeAnt(JNI_DIR + "/build-windows32.xml", "clean link -v");
+		BuildExecutor.executeAnt(JNI_DIR + "/build-windows32.xml", "");
 	}
 }

File: gdx/src/com/badlogic/gdx/utils/GdxBuild.java
Patch:
@@ -36,7 +36,7 @@ public static void main(String[] args) throws Exception {
 
 		// build
 		String[] headerDirs = { "./", "etc1/", "gdx2d/" };
-		BuildConfig config = new BuildConfig("gdx", "native", LIBS_DIR, JNI_DIR);
+		BuildConfig config = new BuildConfig("gdx", "../target/native", LIBS_DIR, JNI_DIR);
 		BuildTarget target = BuildTarget.newDefaultTarget(TargetOs.Windows, false);
 		target.compilerPrefix = "";
 		target.excludeFromMasterBuildFile = true;

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/NativeCodeGenerator.java
Patch:
@@ -55,7 +55,7 @@
  * 
  * <table border="1">
  * <tr><td>Java</td><td>C/C++</td></tr>
- * <tr><td>String</td><td>unsigned char* (UTF-8)</td></tr>
+ * <tr><td>String</td><td>char* (UTF-8)</td></tr>
  * <tr><td>boolean[]</td><td>bool*</td></tr>
  * <tr><td>byte[]</td><td>char*</td></tr>
  * <tr><td>char[]</td><td>unsigned short*</td></tr>
@@ -428,7 +428,7 @@ private void emitJniSetupCode(StringBuffer buffer, JavaMethod javaMethod, String
 		// string pointers
 		for(Argument arg: javaMethod.getArguments()) {
 			if(arg.getType().isString()) {
-				String type = "unsigned char*";
+				String type = "char*";
 				buffer.append("\t" + type + " " + arg.getName() + " = (" + type + ")env->GetStringUTFChars(" + JNI_ARG_PREFIX + arg.getName() + ", 0);\n");
 				additionalArgs.append(", ");
 				additionalArgs.append(type);

File: gdx/src/com/badlogic/gdx/graphics/PixmapIO.java
Patch:
@@ -18,7 +18,7 @@
  * height and format, remaining bytes are zlib compressed pixels.
  * @author mzechner
  * @author Nathan Sweet */
-public class PixmapIO {
+public class PixmapIO { 
 	/** Writes the {@link Pixmap} to the given file using a custom compression scheme. To be able to load the Pixmap to a Texture,
 	 * use ".cim" as the file suffix! Throws a GdxRuntimeException in case the Pixmap couldn't be written to the file.
 	 * @param file the file to write the Pixmap to */
@@ -129,11 +129,11 @@ static public Pixmap read (FileHandle file) {
 	}
 
 	/** Minimal PNG encoder to create PNG streams (and MIDP images) from RGBA arrays.<br>
-	 * Copyright 2006-2009 Christian Fr�schlin www.chrfr.de<br>
+	 * Copyright 2006-2009 Christian Fröschlin www.chrfr.de<br>
 	 * Terms of Use: You may use the PNG encoder free of charge for any purpose you desire, as long as you do not claim credit for
 	 * the original sources and agree not to hold me responsible for any damage arising out of its use.<br>
 	 * If you have a suitable location in GUI or documentation for giving credit, I'd appreciate a non-mandatory mention of:<br>
-	 * PNG encoder (C) 2006-2009 by Christian Fr�schlin, www.chrfr.de */
+	 * PNG encoder (C) 2006-2009 by Christian Fröschlin, www.chrfr.de */
 	static private class PNG {
 		static int[] crcTable;
 		static final int ZLIB_BLOCK_SIZE = 32000;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Forever.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.scenes.scene2d.Action;
 import com.badlogic.gdx.scenes.scene2d.Actor;
+import com.badlogic.gdx.scenes.scene2d.OnActionCompleted;
 import com.badlogic.gdx.scenes.scene2d.TemporalAction;
 
 public class Forever extends TemporalAction {
@@ -46,6 +47,7 @@ public void act (float delta) {
 		if (action.isDone()) {
 			Action oldAction = action;
 			action = action.copy();
+			action.setCompletionListener(oldAction.getCompletionListener());
 			oldAction.finish();
 			action.setTarget(target);
 		}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -122,7 +122,7 @@ public int getX () {
 	}
 
 	public int getY () {
-		return Gdx.graphics.getHeight() - Mouse.getY();
+		return Gdx.graphics.getHeight() - 1 - Mouse.getY();
 	}
 
 	public boolean isAccelerometerAvailable () {
@@ -806,7 +806,7 @@ public int getDeltaY (int pointer) {
 
 	@Override
 	public void setCursorPosition (int x, int y) {
-		Mouse.setCursorPosition(x, y);
+		Mouse.setCursorPosition(x, y - 1);
 	}
 
 	@Override

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -122,7 +122,7 @@ public int getX () {
 	}
 
 	public int getY () {
-		return Gdx.graphics.getHeight() - 1 - Mouse.getY();
+		return Gdx.graphics.getHeight() - Mouse.getY();
 	}
 
 	public boolean isAccelerometerAvailable () {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -69,7 +69,7 @@ public class LwjglGraphics implements Graphics {
 	}
 	
 	LwjglGraphics (Canvas canvas, LwjglApplicationConfiguration config) {
-		this.config = new LwjglApplicationConfiguration();
+		this.config = config;
 		this.config.width = canvas.getWidth();
 		this.config.height = canvas.getHeight();
 		this.canvas = canvas;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -185,6 +185,9 @@ void mainLoop () {
 			listener.render();
 			audio.update();
 			Display.update();
+			if(Display.wasResized()) {
+				if(listener != null) listener.resize(Display.getWidth(), Display.getHeight());
+			}
 			if (graphics.vsync && graphics.config.useCPUSynch) {
 				Display.sync(60);
 			}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -43,6 +43,8 @@ public class LwjglApplicationConfiguration {
 	public String title = "Lwjgl Application";
 	/** whether to call System.exit() on tear-down. Needed for Webstarts on some versions of Mac OS X it seems **/
 	public boolean forceExit = true;
+	/** whether the window is resizable **/
+	public boolean resizable = true;
 
 	/** Sets the r, g, b and a bits per channel based on the given {@link DisplayMode} and sets the fullscreen flag to true.
 	 * @param mode */

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -152,6 +152,7 @@ void setupDisplay () throws LWJGLException {
 					+ config.fullscreen);
 		}
 		Display.setTitle(config.title);
+		Display.setResizable(config.resizable);
 		createDisplayPixelFormat();
 		initiateGLInstances();
 	}

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -28,6 +28,7 @@
 import com.badlogic.gdx.tests.InputTest;
 import com.badlogic.gdx.tests.PixmapTest;
 import com.badlogic.gdx.tests.SoundTest;
+import com.badlogic.gdx.tests.SpriteBatchTest;
 import com.badlogic.gdx.tests.UITest;
 import com.badlogic.gdx.tests.MD5Test;
 import com.badlogic.gdx.tests.StbTrueTypeTest;
@@ -37,10 +38,11 @@
 
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
-		GdxTest test = new InputTest();
+		GdxTest test = new SpriteBatchTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;
+		config.resizable = true;
 		new LwjglApplication(test, config);
 	}
 }

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/NativeCodeGenerator.java
Patch:
@@ -89,7 +89,7 @@ private void generateCppFile(String javaFileContent, FileDescriptor hFile,
 			mergeJavaAndCMethod(buffer, javaMethods.get(i), cMethods.get(i));
 			buffer.append("\n");
 		}
-		cppFile.writeString(buffer.toString(), false);
+		cppFile.writeString(buffer.toString(), false, "UTF-8");
 	}
 	
 	private void mergeJavaAndCMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) {

File: demos/chip8/chip8/src/com/badlogic/chip8/Chip8Runner.java
Patch:
@@ -10,7 +10,6 @@
  *
  */
 public class Chip8Runner extends ApplicationAdapter {
-	private static final int CYCLES = 1000;
 
 	@Override
 	public void create () {

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/Bob.java
Patch:
@@ -78,7 +78,6 @@ private void processKeys () {
 		float x0 = (Gdx.input.getX(0) / (float)Gdx.graphics.getWidth()) * 480;
 		float x1 = (Gdx.input.getX(1) / (float)Gdx.graphics.getWidth()) * 480;
 		float y0 = 320 - (Gdx.input.getY(0) / (float)Gdx.graphics.getHeight()) * 320;
-		float y1 = 320 - (Gdx.input.getY(1) / (float)Gdx.graphics.getHeight()) * 320;
 
 		boolean leftButton = (Gdx.input.isTouched(0) && x0 < 70) || (Gdx.input.isTouched(1) && x1 < 70);
 		boolean rightButton = (Gdx.input.isTouched(0) && x0 > 70 && x0 < 134) || (Gdx.input.isTouched(1) && x1 > 70 && x1 < 134);

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/Cube.java
Patch:
@@ -111,7 +111,6 @@ private void processKeys () {
 
 		boolean touch0 = Gdx.input.isTouched(0);
 		boolean touch1 = Gdx.input.isTouched(1);
-		boolean left = (touch0 && x0 < 60) || (touch1 && x1 < 60);
 		boolean right = (touch0 && (x0 > 80 && x0 < 128)) || (touch1 && (x1 > 80 && x1 < 128));
 		boolean down = (touch0 && (y0 < 60)) || (touch1 && (y1 < 60));
 		boolean up = (touch0 && (y0 > 80 && x0 < 128)) || (touch1 && (y1 > 80 && y1 < 128));

File: demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/Field.java
Patch:
@@ -84,7 +84,6 @@ public int compareTo (ScheduledAction another) {
 
 	/** Creates Box2D world, reads layout definitions for the given level (currently only one), and initializes the game to the
 	 * starting state.
-	 * @param context
 	 * @param level */
 	public void resetForLevel (int level) {
 		Vector2 gravity = new Vector2(0.0f, -1.0f);

File: demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/util/JSONObject.java
Patch:
@@ -107,6 +107,7 @@ public String toString () {
 	/** It is sometimes more convenient and less ambiguous to have a <code>NULL</code> object than to use Java's <code>null</code>
 	 * value. <code>JSONObject.NULL.equals(null)</code> returns <code>true</code>. <code>JSONObject.NULL.toString()</code> returns
 	 * <code>"null"</code>. */
+	@SuppressWarnings("synthetic-access")
 	public static final Object NULL = new Null();
 
 	/** Construct an empty JSONObject. */
@@ -120,6 +121,7 @@ public JSONObject () {
 	 * @param names An array of strings.
 	 * @throws JSONException
 	 * @exception JSONException If a value is a non-finite number or if a name is duplicated. */
+	@SuppressWarnings("javadoc")
 	public JSONObject (JSONObject jo, String[] names) {
 		this();
 		for (int i = 0; i < names.length; i += 1) {
@@ -187,6 +189,7 @@ public JSONObject (JSONTokener x) throws JSONException {
 	 * 
 	 * @param map A map object that can be used to initialize the contents of the JSONObject.
 	 * @throws JSONException */
+	@SuppressWarnings("javadoc")
 	public JSONObject (Map map) {
 		this.map = new HashMap();
 		if (map != null) {

File: demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/util/JSONWriter.java
Patch:
@@ -217,6 +217,7 @@ private void pop (char c) throws JSONException {
 	/** Push an array or object scope.
 	 * @param c The scope to open.
 	 * @throws JSONException If nesting is too deep. */
+	@SuppressWarnings("javadoc")
 	private void push (JSONObject jo) throws JSONException {
 		if (this.top >= maxdepth) {
 			throw new JSONException("Nesting too deep.");

File: demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/general/SimpleButton.java
Patch:
@@ -31,7 +31,6 @@ public class SimpleButton {
 	private boolean activated;
 	private boolean down;
 	private BitmapFont font;
-	private float textWidth;
 	private float textHeight;
 
 	public SimpleButton (String text, BitmapFont font) {
@@ -41,7 +40,6 @@ public SimpleButton (String text, BitmapFont font) {
 		this.down = false;
 		this.font = font;
 		TextBounds bounds = Assets.textFont.getBounds(text);
-		textWidth = bounds.width;
 		textHeight = bounds.height;
 		w = bounds.width * 2;
 		h = bounds.height * 2;

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/NativeCodeGenerator.java
Patch:
@@ -127,7 +127,7 @@ private void mergeJavaAndCMethod(StringBuffer buffer, JavaMethod javaMethod, CMe
 			for(int i = 0; i < javaMethod.arguments.size(); i++) {
 				Argument arg = javaMethod.arguments.get(i);
 				if(arg.type == ArgumentType.ArrayList) {
-					String pointerType = getCArrayListPointerType(cMethod.arguments[i+2]); 
+					String pointerType = getCArrayPointerType(cMethod.arguments[i+2]); 
 					buffer.append("\t" + pointerType + "* " + arg.name + " = (" + pointerType + "*)env->GetPrimitiveArrayCritical(" + NON_POD_PREFIX + arg.name + ", 0);\n");
 				}
 			}
@@ -171,7 +171,7 @@ private void mergeJavaAndCMethod(StringBuffer buffer, JavaMethod javaMethod, CMe
 		buffer.append("}");
 	}
 	
-	private String getCArrayListPointerType(String type) {
+	private String getCArrayPointerType(String type) {
 		if(type.contains("boolean")) return "unsigned char";
 		if(type.contains("char")) return "unsigned short";
 		if(type.contains("byte")) return "char";

File: extensions/gdx-audio/src/com/badlogic/gdx/audio/GdxAudioBuild.java
Patch:
@@ -22,6 +22,7 @@ public static void main(String[] args) throws Exception {
 		win32home.headerDirs = headerDirs;
 		win32home.cIncludes = cIncludes;
 		win32home.cppIncludes = cppIncludes;
+		win32home.excludeFromMasterBuildFile = true;
 		
 		BuildTarget win32 = BuildTarget.newDefaultTarget(TargetOs.Windows, false);
 		win32.cFlags += "-DFIXED_POINT";

File: gdx/src/com/badlogic/gdx/assets/AssetLoadingTask.java
Patch:
@@ -25,6 +25,7 @@
 import com.badlogic.gdx.assets.loaders.SynchronousAssetLoader;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.badlogic.gdx.utils.Logger;
 
 /** Responsible for loading an asset through an {@link AssetLoader} based on an {@link AssetDescriptor}. Implements
  * {@link Callable} and is used with an {@link ExecutorService threadpool} to load parts of an asset asynchronously if the asset is
@@ -36,6 +37,7 @@ class AssetLoadingTask implements Callable<Void> {
 	final AssetDescriptor assetDesc;
 	final AssetLoader loader;
 	final ExecutorService threadPool;
+	final long startTime;
 
 	volatile boolean asyncDone = false;
 	boolean dependenciesLoaded = false;
@@ -53,6 +55,7 @@ public AssetLoadingTask (AssetManager manager, AssetDescriptor assetDesc, AssetL
 		this.assetDesc = assetDesc;
 		this.loader = loader;
 		this.threadPool = threadPool;
+		startTime = manager.log.getLevel() == Logger.DEBUG ? System.nanoTime() : 0;
 	}
 
 	/** Loads parts of the asset asynchronously if the loader is an {@link AsynchronousAssetLoader}. */

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -384,6 +384,9 @@ private boolean updateTask () {
 				if (task.assetDesc.params != null && task.assetDesc.params.loadedCallback != null) {
 					task.assetDesc.params.loadedCallback.finishedLoading(this, task.assetDesc.fileName, task.assetDesc.type);
 				}
+
+				long endTime = System.nanoTime();
+				log.debug("Loaded: " + (endTime - task.startTime) / 1000000f + "ms " + task.assetDesc);
 			}
 
 			return true;

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/AndroidNdkScriptGenerator.java
Patch:
@@ -26,8 +26,8 @@ public void generate(BuildConfig config, BuildTarget target) {
 		
 		idx = 0;
 		String[] excludes = new String[target.cExcludes.length + target.cppExcludes.length];
-		for(String exclude: target.cExcludes) excludes[idx++] = exclude;
-		for(String exclude: target.cppExcludes) excludes[idx++] = exclude;
+		for(String exclude: target.cExcludes) excludes[idx++] = config.jniDir + "/" + exclude;
+		for(String exclude: target.cppExcludes) excludes[idx++] = config.jniDir + "/" + exclude;
 		gatherSourceFiles(config.jniDir, includes, excludes, files);
 		
 		// create androidManifest.xml if it doesn't exist.
@@ -78,7 +78,7 @@ private void gatherSourceFiles(FileDescriptor file, String[] includes, String[]
 				gatherSourceFiles(child, includes, excludes, files);
 			}
 		} else {
-			if(match(fileName, includes)) files.add(file);
+			if(match(fileName, includes) && !match(fileName, excludes)) files.add(file);
 		}
 	}
 	

File: extensions/gdx-bullet/bullet/src/com/badlogic/gdx/physics/bullet/collision/BulletObject.java
Patch:
@@ -7,6 +7,7 @@
 public class BulletObject {
 	/*JNI
 	#include <Bullet-C-Api.h>
+	#include <stdio.h>
 	 */
 	
 	public static native void testJni (long addr, ByteBuffer buffer, float[] floats, byte[] bytes, String ohgod); /*

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/AntScriptGenerator.java
Patch:
@@ -144,6 +144,8 @@ private String generateBuildTargetTemplate(BuildConfig config, BuildTarget targe
 		template = template.replace("%cppIncludes%", cppIncludes);
 		template = template.replace("%cppExcludes%", cppExcludes);
 		template = template.replace("%headerDirs%", headerDirs);
+		template = template.replace("%precompile%", target.preCompileTask == null? "": target.preCompileTask);
+		template = template.replace("%postcompile%", target.postCompileTask == null? "": target.postCompileTask);
 		
 		return template;
 	}

File: extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/BuildTarget.java
Patch:
@@ -21,6 +21,8 @@ public enum TargetOs {
 	public String linkerFlags;
 	public String buildFileName;
 	public boolean excludeFromMasterBuildFile = false;
+	public String preCompileTask;
+	public String postCompileTask;
 	
 	public BuildTarget(BuildTarget.TargetOs targetType, boolean is64Bit, String[] cIncludes, String[] cExcludes, String[] cppIncludes, String[] cppExcludes, String[] headerDirs, String compilerPrefix, String cFlags, String cppFlags, String linkerFlags) {
 		if(targetType == null) throw new IllegalArgumentException("targetType must not be null");

File: extensions/jnigen/src/com/badlogic/gdx/jnigen/AntScriptGenerator.java
Patch:
@@ -126,7 +126,7 @@ private String generateBuildTargetTemplate(BuildConfig config, BuildTarget targe
 		// generate C/C++ header directories
 		StringBuffer headerDirs = new StringBuffer();
 		for(String headerDir: target.headerDirs) {
-			headerDirs.append("\t\t\t<arg value=\"" + headerDir + "\"/>\n");
+			headerDirs.append("\t\t\t<arg value=\"-I" + headerDir + "\"/>\n");
 		}
 		
 		// replace template vars with proper values

File: extensions/stb-truetype/src/com/badlogic/gdx/graphics/g2d/stbtt/StbTrueTypeBuild.java
Patch:
@@ -23,7 +23,8 @@ public static void main(String[] args) throws Exception {
 		BuildTarget lin32 = BuildTarget.newDefaultTarget(TargetOs.Linux, false);
 		BuildTarget lin64 = BuildTarget.newDefaultTarget(TargetOs.Linux, true);
 		BuildTarget mac = BuildTarget.newDefaultTarget(TargetOs.MacOsX, false);
-		new AntScriptGenerator().generate(new BuildConfig("stbtruetype"), win32home, win32, win64, lin32, lin64, mac);
+		BuildTarget android = BuildTarget.newDefaultTarget(TargetOs.Android, false);
+		new AntScriptGenerator().generate(new BuildConfig("stbtruetype"), win32home, win32, win64, lin32, lin64, mac, android);
 		
 		// build natives
 		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");

File: extensions/jnigen/src/com/badlogic/gdx/jnigen/test/TestBuild.java
Patch:
@@ -1,6 +1,6 @@
 package com.badlogic.gdx.jnigen.test;
 
-import com.badlogic.gdx.jnigen.AntScriptExecutor;
+import com.badlogic.gdx.jnigen.BuildExecutor;
 import com.badlogic.gdx.jnigen.AntScriptGenerator;
 import com.badlogic.gdx.jnigen.BuildConfig;
 import com.badlogic.gdx.jnigen.BuildTarget;
@@ -20,6 +20,6 @@ public static void main(String[] args) throws Exception {
 		new AntScriptGenerator().generate(new BuildConfig("test"), win32, win64, lin32, lin64);
 		
 		// build natives
-		AntScriptExecutor.execute("jni/build.xml", "-v");
+		BuildExecutor.executeAnt("jni/build.xml", "-v");
 	}
 }

File: extensions/stb-truetype/src/com/badlogic/gdx/graphics/g2d/stbtt/StbTrueTypeBuild.java
Patch:
@@ -1,6 +1,6 @@
 package com.badlogic.gdx.graphics.g2d.stbtt;
 
-import com.badlogic.gdx.jnigen.AntScriptExecutor;
+import com.badlogic.gdx.jnigen.BuildExecutor;
 import com.badlogic.gdx.jnigen.AntScriptGenerator;
 import com.badlogic.gdx.jnigen.BuildConfig;
 import com.badlogic.gdx.jnigen.BuildTarget;
@@ -26,6 +26,6 @@ public static void main(String[] args) throws Exception {
 		new AntScriptGenerator().generate(new BuildConfig("stbtruetype"), win32home, win32, win64, lin32, lin64, mac);
 		
 		// build natives
-		AntScriptExecutor.execute("jni/build-windows32home.xml", "-v");
+		BuildExecutor.executeAnt("jni/build-windows32home.xml", "-v");
 	}
 }

File: extensions/jnigen/src/com/badlogic/gdx/jnigen/test/TestBuild.java
Patch:
@@ -2,9 +2,9 @@
 
 import com.badlogic.gdx.jnigen.AntScriptExecutor;
 import com.badlogic.gdx.jnigen.AntScriptGenerator;
-import com.badlogic.gdx.jnigen.AntScriptGenerator.BuildConfig;
-import com.badlogic.gdx.jnigen.AntScriptGenerator.BuildTarget;
-import com.badlogic.gdx.jnigen.AntScriptGenerator.BuildTarget.TargetOs;
+import com.badlogic.gdx.jnigen.BuildConfig;
+import com.badlogic.gdx.jnigen.BuildTarget;
+import com.badlogic.gdx.jnigen.BuildTarget.TargetOs;
 import com.badlogic.gdx.jnigen.NativeCodeGenerator;
 
 public class TestBuild {

File: extensions/stb-truetype/src/com/badlogic/gdx/graphics/g2d/stbtt/StbTrueTypeBuild.java
Patch:
@@ -2,10 +2,10 @@
 
 import com.badlogic.gdx.jnigen.AntScriptExecutor;
 import com.badlogic.gdx.jnigen.AntScriptGenerator;
+import com.badlogic.gdx.jnigen.BuildConfig;
+import com.badlogic.gdx.jnigen.BuildTarget;
+import com.badlogic.gdx.jnigen.BuildTarget.TargetOs;
 import com.badlogic.gdx.jnigen.NativeCodeGenerator;
-import com.badlogic.gdx.jnigen.AntScriptGenerator.BuildConfig;
-import com.badlogic.gdx.jnigen.AntScriptGenerator.BuildTarget;
-import com.badlogic.gdx.jnigen.AntScriptGenerator.BuildTarget.TargetOs;
 
 public class StbTrueTypeBuild {
 	public static void main(String[] args) throws Exception {

File: extensions/jnigen/src/com/badlogic/gdx/jnigen/AntScriptGenerator.java
Patch:
@@ -160,7 +160,7 @@ public void generate(BuildConfig config, BuildTarget ... targets) {
 			String buildFileName = "build-" + target.os.toString().toLowerCase() + (target.is64Bit?"64":"32") + ".xml";
 			if(target.buildFileName != null) buildFileName = target.buildFileName;
 			config.jniDir.child(buildFileName).writeString(buildFile, false);
-			System.out.println("Wrote target '" + target.os + "-" + (target.is64Bit?"64":"") + " build script '" + config.jniDir.child("build.xml") + "'");
+			System.out.println("Wrote target '" + target.os + (target.is64Bit?"64":"") + "' build script '" + config.jniDir.child(buildFileName) + "'");
 			
 			if(!target.excludeFromMasterBuildFile) {
 				buildFiles.add(buildFileName);

File: extensions/stb-truetype/src/com/badlogic/gdx/graphics/g2d/stbtt/StbTrueTypeBuild.java
Patch:
@@ -23,7 +23,7 @@ public static void main(String[] args) throws Exception {
 		BuildTarget lin32 = BuildTarget.newDefaultTarget(TargetOs.Linux, false);
 		BuildTarget lin64 = BuildTarget.newDefaultTarget(TargetOs.Linux, true);
 		BuildTarget mac = BuildTarget.newDefaultTarget(TargetOs.MacOsX, false);
-		new AntScriptGenerator().generate(new BuildConfig("test"), win32home, win32, win64, lin32, lin64, mac);
+		new AntScriptGenerator().generate(new BuildConfig("stbtruetype"), win32home, win32, win64, lin32, lin64, mac);
 		
 		// build natives
 		AntScriptExecutor.execute("jni/build-windows32home.xml", "-v");

File: extensions/jnigen/src/com/badlogic/gdx/jnigen/AntScriptGenerator.java
Patch:
@@ -121,12 +121,14 @@ public static BuildTarget newDefaultTarget(TargetOs type, boolean is64Bit) {
 			
 			if(type == TargetOs.MacOsX) {
 				// Mac OS X x86 & x86_64
-				return new BuildTarget(TargetOs.MacOsX, false, 
+				BuildTarget mac = new BuildTarget(TargetOs.MacOsX, false, 
 								new String[] { "**/*.c" }, new String[0], new String[] { "**/*.cpp" }, new String[0], new String[0],
 								"",
 								"-c -Wall -O2 -arch i386 -arch x86_64 -DFIXED_POINT -fmessage-length=0 -fPIC -mmacosx-version-min=10.5",
 								"-c -Wall -O2 -arch i386 -arch x86_64 -DFIXED_POINT -fmessage-length=0 -fPIC -mmacosx-version-min=10.5",
 								"-shared -arch i386 -arch x86_64 -mmacosx-version-min=10.5");
+				mac.excludeFromMasterBuildFile = true;
+				return mac;
 			}
 			
 			throw new RuntimeException("Unknown target type");

File: extensions/stb-truetype/src/com/badlogic/gdx/graphics/g2d/stbtt/StbTrueTypeBuild.java
Patch:
@@ -22,7 +22,8 @@ public static void main(String[] args) throws Exception {
 		BuildTarget win64 = BuildTarget.newDefaultTarget(TargetOs.Windows, true);
 		BuildTarget lin32 = BuildTarget.newDefaultTarget(TargetOs.Linux, false);
 		BuildTarget lin64 = BuildTarget.newDefaultTarget(TargetOs.Linux, true);
-		new AntScriptGenerator().generate(new BuildConfig("test"), win32home, win32, win64, lin32, lin64);
+		BuildTarget mac = BuildTarget.newDefaultTarget(TargetOs.MacOsX, false);
+		new AntScriptGenerator().generate(new BuildConfig("test"), win32home, win32, win64, lin32, lin64, mac);
 		
 		// build natives
 		AntScriptExecutor.execute("jni/build-windows32home.xml", "-v");

File: extensions/stb-truetype/src/com/badlogic/gdx/graphics/g2d/stbtt/StbTrueTypeBuild.java
Patch:
@@ -17,6 +17,7 @@ public static void main(String[] args) throws Exception {
 		BuildTarget win32home = BuildTarget.newDefaultTarget(TargetOs.Windows, false);
 		win32home.compilerPrefix = "";
 		win32home.buildFileName = "build-windows32home.xml";
+		win32home.excludeFromMasterBuildFile = true;
 		BuildTarget win32 = BuildTarget.newDefaultTarget(TargetOs.Windows, false);
 		BuildTarget win64 = BuildTarget.newDefaultTarget(TargetOs.Windows, true);
 		BuildTarget lin32 = BuildTarget.newDefaultTarget(TargetOs.Linux, false);

File: extensions/bullet/bullet/src/com/badlogic/gdx/physics/bullet/BulletBuild.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.badlogic.gdx.jnigen.NativeCodeGenerator;
 
-public class Build {
+public class BulletBuild {
 	public static void main(String[] args) throws Exception {
 		new NativeCodeGenerator().generate("src/", "bin/", "jni/");
 	}

File: extensions/bullet/bullet/src/com/badlogic/gdx/physics/bullet/collision/BulletObject.java
Patch:
@@ -10,7 +10,7 @@ public class BulletObject {
 	 */
 	
 	public static native void testJni (long addr, ByteBuffer buffer, float[] floats, byte[] bytes, String ohgod); /*
-		printf("%f %d %s\n", floats[0], bytes[0], ohgod); asdhasdkjhash
+		printf("%f %d %s\n", floats[0], bytes[0], ohgod);
 	*/
 	
 	public static native int testJni2(float muh); /*

File: extensions/jnigen/src/com/badlogic/gdx/jnigen/test/TestBuild.java
Patch:
@@ -7,7 +7,7 @@
 import com.badlogic.gdx.jnigen.AntScriptGenerator.BuildTarget.TargetOs;
 import com.badlogic.gdx.jnigen.NativeCodeGenerator;
 
-public class Build {
+public class TestBuild {
 	public static void main(String[] args) throws Exception {
 		// generate C/C++ code
 		new NativeCodeGenerator().generate("src", "bin", "jni");

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -225,7 +225,7 @@ private void uploadImageData (Pixmap pixmap) {
 	/** Used internally to reload after context loss. Creates a new GL handle then calls {@link #load(TextureData)}. */
 	private void reload () {
 		if (!data.isManaged()) throw new GdxRuntimeException("Tried to reload unmanaged Texture");
-		createGLHandle();
+		glHandle = createGLHandle();
 		load(data);
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/CheckBox.java
Patch:
@@ -28,7 +28,9 @@ public CheckBox (String text, CheckBoxStyle style, String name) {
 		super(text, style, name);
 		clear();
 		add(image = new Image(style.checkboxOff));
-		add(getLabel());
+		Label label = getLabel();
+		add(label);
+		label.setAlignment(Align.LEFT);
 		width = getPrefWidth();
 		height = getPrefHeight();
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/FlickScrollPane.java
Patch:
@@ -31,6 +31,8 @@
 import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.scenes.scene2d.ui.utils.ScissorStack;
 
+// BOZO - Add feature that so first actor will never be cut off (eg for a file browser).
+
 /** A group that scrolls a child widget by pressing and dragging.
  * <p>
  * The widget is sized to its preferred size. If the widget's preferred width or height is less than the size of this scroll pane,

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/Table.java
Patch:
@@ -233,7 +233,7 @@ public Cell stack (Actor... actor) {
 		return layout.stack(actor);
 	}
 
-	/** Creates a new table with the same Skin, Stage, and AssetManager as this table. */
+	/** Creates a new table with the same Skin and AssetManager as this table. */
 	public Table newTable () {
 		return layout.getToolkit().newTable(this);
 	}

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -188,6 +188,7 @@ public void load (TextureData data) {
 			setFilter(minFilter, magFilter);
 			setWrap(uWrap, vWrap);
 		}
+		Gdx.gl.glBindTexture(GL10.GL_TEXTURE_2D, 0);
 	}
 
 	private void uploadImageData (Pixmap pixmap) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/NinePatch.java
Patch:
@@ -113,7 +113,7 @@ public NinePatch (TextureRegion... patches) {
 	}
 
 	public NinePatch (NinePatch ninePatch) {
-		this(ninePatch, new Color(ninePatch.color));
+		this(ninePatch, ninePatch.color == null ? null : new Color(ninePatch.color));
 	}
 
 	public NinePatch (NinePatch ninePatch, Color color) {
@@ -160,7 +160,7 @@ public void draw (SpriteBatch batch, float x, float y, float width, float height
 
 		if (color != null) {
 			Color batchColor = batch.getColor();
-			batch.setColor(batchColor.r * color.r, batchColor.g * color.g, batchColor.b * color.b, batchColor.a * color.a);
+			batch.setColor(color.r, color.g, color.b, batchColor.a * color.a);
 		}
 
 		// Bottom row

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -445,7 +445,7 @@ public synchronized int getQueuedAssets () {
 	/** @return the progress in percent of completion. */
 	public synchronized float getProgress () {
 		if (toLoad == 0) return 1;
-		return loaded / (float)toLoad;
+		return Math.min(1, loaded / (float)toLoad);
 	}
 
 	/** Sets an {@link AssetErrorListener} to be invoked in case loading an asset failed.

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -23,7 +23,7 @@ public Button (Skin skin) {
 		this(skin.getStyle(ButtonStyle.class), null);
 		pack();
 	}
-
+	
 	public Button (ButtonStyle style) {
 		this(style, null);
 		pack();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java
Patch:
@@ -14,6 +14,8 @@ public class TextButton extends Button {
 	private final Label label;
 	private TextButtonStyle style;
 
+	// BOZO - Region/patch constructors?
+
 	public TextButton (Skin skin) {
 		this("", skin);
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/Gdx2DPixmap.java
Patch:
@@ -25,8 +25,7 @@
 import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
-/** Experimental. Do not use!
- * @author mzechner */
+/** @author mzechner */
 public class Gdx2DPixmap implements Disposable {
 	public static final int GDX2D_FORMAT_ALPHA = 1;
 	public static final int GDX2D_FORMAT_LUMINANCE_ALPHA = 2;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -153,7 +153,7 @@ public void toLocalCoordinates (Vector2 point) {
 
 	/** Removes this actor from the Stage */
 	public void remove () {
-		parent.removeActor(this);
+		if (parent != null) parent.removeActor(this);
 	}
 
 	public void act (float delta) {

File: gdx/src/com/badlogic/gdx/math/MathUtils.java
Patch:
@@ -97,7 +97,7 @@ static public final float atan2 (float y, float x) {
 			} else
 				mul = -1;
 			x = -x;
-			add = -3.141592653f;
+			add = -PI;
 		} else {
 			if (y < 0) {
 				y = -y;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -147,7 +147,6 @@ public void toLocalCoordinates (Vector2 point) {
 		if (parent == null) {
 			return;
 		}
-
 		parent.toLocalCoordinates(point);
 		Group.toChildCoordinates(this, point.x, point.y, point);
 	}

File: gdx/src/com/badlogic/gdx/graphics/glutils/FileTextureData.java
Patch:
@@ -42,9 +42,9 @@ public FileTextureData (FileHandle file, Pixmap preloadedPixmap, Format format,
 		this.format = format;
 		this.useMipMaps = useMipMaps;
 		if (pixmap != null) {
-			pixmap = ensurePot(pixmap);
 			width = pixmap.getWidth();
 			height = pixmap.getHeight();
+			pixmap = ensurePot(pixmap);
 			if (format == null) this.format = pixmap.getFormat();
 		}
 	}
@@ -59,9 +59,10 @@ public void prepare () {
 		if (isPrepared) throw new GdxRuntimeException("Already prepared");
 		if (pixmap == null) {
 			if(file.extension().equals("cim")) pixmap = PixmapIO.read(file);
-			else pixmap = ensurePot(new Pixmap(file));
+			else pixmap = new Pixmap(file);
 			width = pixmap.getWidth();
 			height = pixmap.getHeight();
+			pixmap = ensurePot(pixmap);
 			if (format == null) format = pixmap.getFormat();
 		}
 		isPrepared = true;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -70,6 +70,8 @@ public class LwjglGraphics implements Graphics {
 	
 	LwjglGraphics (Canvas canvas, LwjglApplicationConfiguration config) {
 		this.config = new LwjglApplicationConfiguration();
+		this.config.width = canvas.getWidth();
+		this.config.height = canvas.getHeight();
 		this.canvas = canvas;
 	}
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglInput.java
Patch:
@@ -347,10 +347,8 @@ private void checkCatched (MouseEvent e) {
 		if (catched && robot != null && canvas.isShowing()) {
 			int x = Math.max(0, Math.min(e.getX(), canvas.getWidth()) - 1) + canvas.getLocationOnScreen().x;
 			int y = Math.max(0, Math.min(e.getY(), canvas.getHeight()) - 1) + canvas.getLocationOnScreen().y;
-			deltaX = e.getLocationOnScreen().x - x;
-			deltaY = e.getLocationOnScreen().y - y;
 			if (e.getX() < 0 || e.getX() >= canvas.getWidth() || e.getY() < 0 || e.getY() >= canvas.getHeight()) {
-				robot.mouseMove(x - deltaX, y - deltaY);
+				robot.mouseMove(x, y);
 			}
 		}
 	}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -793,13 +793,13 @@ public int getDeltaX (int pointer) {
 
 	@Override
 	public int getDeltaY () {
-		return deltaY;
+		return -deltaY;
 	}
 
 	@Override
 	public int getDeltaY (int pointer) {
 		if (pointer == 0)
-			return deltaY;
+			return -deltaY;
 		else
 			return 0;
 	}

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -25,6 +25,6 @@ public static void main (String[] argv) {
 		JoglApplicationConfiguration config = new JoglApplicationConfiguration();
 		config.useGL20 = true;
 		config.vSyncEnabled = false;
-		new JoglApplication(new com.badlogic.gdx.tests.AssetManagerTest(), config);
+		new JoglApplication(new com.badlogic.gdx.tests.InputTest(), config);
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -25,6 +25,7 @@
 import com.badlogic.gdx.tests.Box2DTestCollection;
 import com.badlogic.gdx.tests.EdgeDetectionTest;
 import com.badlogic.gdx.tests.GroupCullingTest;
+import com.badlogic.gdx.tests.InputTest;
 import com.badlogic.gdx.tests.PixmapTest;
 import com.badlogic.gdx.tests.SoundTest;
 import com.badlogic.gdx.tests.UITest;
@@ -36,7 +37,7 @@
 
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
-		GdxTest test = new AssetManagerTest();
+		GdxTest test = new InputTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InputTest.java
Patch:
@@ -29,6 +29,7 @@ public class InputTest extends GdxTest implements InputProcessor {
 	public void create () {
 //		Gdx.input = new RemoteInput();
 		Gdx.input.setInputProcessor(this);
+		Gdx.input.setCursorCatched(true);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/math/collision/BoundingBox.java
Patch:
@@ -187,7 +187,7 @@ public BoundingBox clr () {
 	 * 
 	 * @return True in case the bounding box is valid, false otherwise */
 	public boolean isValid () {
-		return !(min.x == max.x && min.y == max.y && min.z == max.z);
+		return (min.x < max.x && min.y < max.y && min.z < max.z);
 	}
 
 	/** Extends this bounding box by the given bounding box.

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/KeyframedModelViewer.java
Patch:
@@ -121,7 +121,7 @@ public void render () {
 		angle += 45 * Gdx.graphics.getDeltaTime();
 // Gdx.gl10.glRotatef(angle, 0, 1, 0);
 		animTime += Gdx.graphics.getDeltaTime();
-		if (animTime > anim.totalDuration - anim.frameDuration) {
+		if (animTime >= anim.totalDuration) {
 			animTime = 0;
 		}
 

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Frame.java
Patch:
@@ -17,5 +17,6 @@
 
 public class MD2Frame {
 	public float[] vertices;
+	public int[] normalIndices;
 	public String name;
 }
\ No newline at end of file

File: gdx/src/com/badlogic/gdx/math/Polygon.java
Patch:
@@ -58,8 +58,9 @@ public float[] getVertices () {
 
 			// rotate if needed
 			if (rotation != 0) {
+				float oldX = x;
 				x = cos * x - sin * y;
-				y = sin * x + cos * y;
+				y = sin * oldX + cos * y;
 			}
 
 			// move vertices back to world coordinates

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Image.java
Patch:
@@ -106,7 +106,7 @@ public void layout () {
 		} else
 			return;
 
-		Vector2 size = scaling.apply(regionWidth, regionHeight, width * scaleX, height * scaleY);
+		Vector2 size = scaling.apply(regionWidth, regionHeight, width, height);
 		imageWidth = size.x;
 		imageHeight = size.y;
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -435,9 +435,10 @@ public boolean keyTyped (char character) {
 			return false;
 	}
 
-	/** Focuses the next TextField. If none is found, the keyboard is hidden.
+	/** Focuses the next TextField. If none is found, the keyboard is hidden. Does nothing if the text field is not in a stage.
 	 * @param up If true, the TextField with the same or next smallest y coordinate is found, else the next highest. */
 	public void next (boolean up) {
+		if (stage == null) return;
 		TextField textField = findNextTextField(stage.getActors(), null, up);
 		if (textField != null)
 			stage.setKeyboardFocus(textField);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -49,7 +49,7 @@ public class GdxTests {
 		BitmapFontTest.class,
 		BlitTest.class,
 		TableTest.class,
-		BobTest.class,
+		BobTest.class, ImageScaleTest.class,
 		Box2DInitialOverlapTest.class,
 		Box2DTest.class, InterpolationTest.class,
 		Box2DTestCollection.class,
@@ -70,7 +70,7 @@ public class GdxTests {
 		IntegerBitmapFontTest.class, InverseKinematicsTest.class, IsoCamTest.class, IsometricTileTest.class,
 		KinematicBodyTest.class,
 		LifeCycleTest.class,
-		LineDrawingTest.class,
+		LineDrawingTest.class, ScrollPaneTest.class,
 		ManagedTest.class,
 		ManualBindTest.class,
 		MatrixJNITest.class,

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -68,7 +68,7 @@ public Label (String text, LabelStyle style) {
 
 	public Label (String text, LabelStyle style, String name) {
 		super(name);
-		if (text == null) throw new IllegalArgumentException("text cannot be null.");
+		if (text == null) text = "";
 		this.text = text;
 		setStyle(style);
 		touchable = false;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Layout.java
Patch:
@@ -41,7 +41,8 @@ public interface Layout {
 	 * performed. */
 	public void validate ();
 
-	/** Sizes this actor to its preferred width and height and, if its size was changed, calls {@link #invalidate()}. */
+	/** Sizes this actor to its preferred width and height and, if its size was changed, calls {@link #invalidate()} and then
+	 * {@link #validate()}. */
 	public void pack ();
 
 	public float getMinWidth ();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Widget.java
Patch:
@@ -93,6 +93,7 @@ public void pack () {
 			width = newWidth;
 			height = newHeight;
 			invalidate();
+			validate();
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/WidgetGroup.java
Patch:
@@ -73,6 +73,7 @@ public void pack () {
 			width = newWidth;
 			height = newHeight;
 			invalidate();
+			validate();
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/LibgdxToolkit.java
Patch:
@@ -68,7 +68,6 @@ public Actor wrap (TableLayout layout, Object object) {
 			return new Actor() {
 				{
 					visible = false;
-					touchable = false;
 				}
 
 				public void draw (SpriteBatch batch, float parentAlpha) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -91,7 +91,7 @@ public boolean isChecked () {
 	public void setStyle (ButtonStyle style) {
 		if (style == null) throw new IllegalArgumentException("style cannot be null.");
 		this.style = style;
-		setBackground(isPressed ? style.down : style.up);
+		setBackground((isPressed && style.down != null) ? style.down : style.up);
 		invalidateHierarchy();
 	}
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglInput.java
Patch:
@@ -124,6 +124,7 @@ public void setListeners (GLCanvas canvas) {
 		canvas.addMouseMotionListener(this);
 		canvas.addMouseWheelListener(this);
 		canvas.addKeyListener(this);
+		canvas.setFocusTraversalKeysEnabled(false);
 		this.canvas = canvas;
 	}
 

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/renderer/GdxImage.java
Patch:
@@ -62,7 +62,7 @@ public GdxImage (GdxImage image, Color tintColor) {
 	}
 
 	public void draw (AnimationState as, int x, int y) {
-		sprite.setColor(tintColor.getRedFloat(), tintColor.getGreenFloat(), tintColor.getBlueFloat(), tintColor.getAlphaFloat());
+		sprite.setColor(renderer.getColor(tintColor));
 		if (tile) {
 			drawTiled(x, y, width, height);
 		} else {
@@ -72,7 +72,7 @@ public void draw (AnimationState as, int x, int y) {
 	}
 
 	public void draw (AnimationState as, int x, int y, int width, int height) {
-		sprite.setColor(tintColor.getRedFloat(), tintColor.getGreenFloat(), tintColor.getBlueFloat(), tintColor.getAlphaFloat());
+		sprite.setColor(renderer.getColor(tintColor));
 		if (tile) {
 			drawTiled(x, y, width, height);
 		} else {
@@ -82,7 +82,7 @@ public void draw (AnimationState as, int x, int y, int width, int height) {
 	}
 
 	public void draw (AnimationState as, int x, int y, int width, int height, int repeatCountX, int repeatCountY) {
-		sprite.setColor(tintColor.getRedFloat(), tintColor.getGreenFloat(), tintColor.getBlueFloat(), tintColor.getAlphaFloat());
+		sprite.setColor(renderer.getColor(tintColor));
 		if (repeatCountX * this.width != width || repeatCountY * this.height != height)
 			drawRepeatSlow(x, y, width, height, repeatCountX, repeatCountY);
 		else

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglPreferences.java
Patch:
@@ -33,18 +33,21 @@
 public class LwjglPreferences implements Preferences {
 	private final String name;
 	private final Properties properties = new Properties();
+	private final FileHandle file;
 
 	LwjglPreferences (String name) {
 		this(Gdx.files.external(".prefs/" + name));
 	}
 
 	public LwjglPreferences (FileHandle file) {
 		this.name = file.name();
+		this.file = file;
 		InputStream in = null;
 		try {
 			in = new BufferedInputStream(file.read());
 			properties.loadFromXML(in);
 		} catch (Throwable t) {
+			System.out.println(t.getMessage());
 		} finally {
 			if (in != null) try {
 				in.close();
@@ -173,8 +176,6 @@ public void clear () {
 
 	@Override
 	public void flush () {
-		if (Gdx.files == null) return;
-		FileHandle file = Gdx.files.external(".prefs/" + name);
 		OutputStream out = null;
 		try {
 			out = new BufferedOutputStream(file.write(false));

File: gdx/src/com/badlogic/gdx/graphics/PixmapIO.java
Patch:
@@ -38,7 +38,8 @@ public static void write(FileHandle file, Pixmap pixmap) {
 		
 		try {
 //			long start = System.nanoTime();
-			out = new DataOutputStream(new DeflaterOutputStream(new BufferedOutputStream(file.write(false))));
+			DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(file.write(false));
+			out = new DataOutputStream(deflaterOutputStream);
 			out.writeInt(pixmap.getWidth());
 			out.writeInt(pixmap.getHeight());
 			out.writeInt(Format.toGdx2DPixmapFormat(pixmap.getFormat()));

File: gdx/src/com/badlogic/gdx/assets/loaders/TextureLoader.java
Patch:
@@ -60,6 +60,7 @@ public void loadAsync (AssetManager manager, String fileName, TextureParameter p
 			}
 		} else {
 			data = parameter.textureData;
+			if(!data.isPrepared()) data.prepare();
 			texture = parameter.texture;
 		}
 	}

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObject.java
Patch:
@@ -141,7 +141,7 @@ public void setIndices (short[] indices, int offset, int count) {
 			if (Gdx.gl11 != null) {
 				GL11 gl = Gdx.gl11;
 				gl.glBufferData(GL11.GL_ELEMENT_ARRAY_BUFFER, byteBuffer.limit(), byteBuffer, usage);
-			} else if (Gdx.gl11 != null) {
+			} else if (Gdx.gl20 != null) {
 				GL20 gl = Gdx.gl20;
 				gl.glBufferData(GL20.GL_ELEMENT_ARRAY_BUFFER, byteBuffer.limit(), byteBuffer, usage);
 			}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextButton.java
Patch:
@@ -31,7 +31,7 @@ public TextButton (String text, TextButtonStyle style, String name) {
 		this.style = style;
 		label = new Label(text, new LabelStyle(style.font, style.fontColor));
 		label.setAlignment(Align.CENTER);
-		add(label);
+		add(label).expand().fill();
 	}
 
 	public void setStyle (ButtonStyle style) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MipMapTest.java
Patch:
@@ -100,8 +100,8 @@ private void createUI () {
 			filters[idx++] = filter.toString();
 		}
 		hwMipMap = new CheckBox("Hardware Mips", skin.getStyle(CheckBoxStyle.class), "hardware");
-		minFilter = new SelectBox(filters, ui, skin.getStyle(SelectBoxStyle.class), "minfilter");
-		magFilter = new SelectBox(new String[] {"Nearest", "Linear"}, ui, skin.getStyle(SelectBoxStyle.class), "magfilter");
+		minFilter = new SelectBox(filters, skin.getStyle(SelectBoxStyle.class), "minfilter");
+		magFilter = new SelectBox(new String[] {"Nearest", "Linear"}, skin.getStyle(SelectBoxStyle.class), "magfilter");
 
 		Table table = new Table();
 		table.width = ui.width();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
Patch:
@@ -110,7 +110,7 @@ public void setupUI () {
 		ui = new Stage(480, 320, true);
 		Skin skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
 		TextButton reload = new TextButton("Reload Shaders", skin.getStyle(TextButtonStyle.class), "reload");
-		SelectBox camera = new SelectBox(new String[] {"Camera", "Light"}, ui, skin.getStyle(SelectBoxStyle.class), "camera");
+		SelectBox camera = new SelectBox(new String[] {"Camera", "Light"}, skin.getStyle(SelectBoxStyle.class), "camera");
 		Label fps = new Label("fps: ", skin.getStyle(LabelStyle.class), "fps");
 
 		Table table = new Table();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ShadowMappingTest.java
Patch:
@@ -119,9 +119,9 @@ private void setupUI () {
 		Skin skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
 
 		Label label = new Label("Camera:", skin.getStyle(LabelStyle.class));
-		SelectBox cameraCombo = new SelectBox(new String[] {"Scene", "Light"}, ui, skin.getStyle(SelectBoxStyle.class));
+		SelectBox cameraCombo = new SelectBox(new String[] {"Scene", "Light"}, skin.getStyle(SelectBoxStyle.class));
 		Label label2 = new Label("Shader", skin.getStyle(LabelStyle.class), "cameraCombo");
-		SelectBox shaderCombo = new SelectBox(new String[] {"flat", "shadow-gen", "shadow-map"}, ui,
+		SelectBox shaderCombo = new SelectBox(new String[] {"flat", "shadow-gen", "shadow-map"},
 			skin.getStyle(SelectBoxStyle.class), "shaderCombo");
 		Label fpsLabel = new Label("fps:", skin.getStyle(LabelStyle.class), "fps");
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -41,6 +41,7 @@ public Window (String title, Stage stage, WindowStyle style, String name) {
 		super(null, null, name);
 		if (title == null) throw new IllegalArgumentException("title cannot be null.");
 		if (stage == null) throw new IllegalArgumentException("stage cannot be null.");
+		this.stage = stage;
 		setClip(true);
 		this.title = title;
 		setStyle(style);

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -333,11 +333,11 @@ public TextBounds setWrappedText (CharSequence str, float x, float y, float wrap
 		while (start < length) {
 			int newLine = BitmapFont.indexOf(str, '\n', start);
 			int lineEnd = start + font.computeVisibleGlyphs(str, start, newLine, wrapWidth);
-			int nextStart = lineEnd;
+			int nextStart = lineEnd + 1;
 			if (lineEnd < newLine) {
 				// Find char to break on.
 				while (lineEnd > start) {
-					if (BitmapFont.isWhitespace(str.charAt(lineEnd))) break;
+					if (BitmapFont.isWhitespace(str.charAt(lineEnd - 1))) break;
 					lineEnd--;
 				}
 				if (lineEnd == start)

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidOnscreenKeyboard.java
Patch:
@@ -53,7 +53,7 @@ public AndroidOnscreenKeyboard(Context context, Handler handler, AndroidInput in
 		this.input = input;
 	}
 	
-	private Dialog createDialog() {
+	Dialog createDialog() {
 		textView = createView(context);
 		textView.setOnKeyListener(this);
 		FrameLayout.LayoutParams textBoxLayoutParams = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.FILL_PARENT,
@@ -136,7 +136,6 @@ public void run () {
 						private int keyboardHeight;
 						private boolean keyboardShowing;
 
-						@SuppressWarnings("synthetic-access")
 						@Override
 						public boolean onPreDraw () {
 							content.getLocationOnScreen(screenloc);

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/FileProcessor.java
Patch:
@@ -161,7 +161,7 @@ private void process (File[] files, File outputRoot, File outputDir, HashMap<Fil
 	protected void processFile (InputFile inputFile) throws Exception {
 	}
 
-	protected void processDir (InputFile inputDir, ArrayList<InputFile> value) throws Exception {
+	protected void processDir (InputFile inputDir, ArrayList<InputFile> files) throws Exception {
 	}
 
 	protected void addProcessedFile (InputFile inputFile) {

File: gdx/src/com/badlogic/gdx/graphics/TextureRef.java
Patch:
@@ -19,7 +19,7 @@
 /** <p>
  * A reference counted wrapper for a {@link Texture}. TextureRefs are managed by the {@link TextureDict}.
  * </p>
- * 
+ * @deprecated
  * @author Dave Clayton <contact@redskyforge.com> */
 public class TextureRef {
 	public String Name;

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -326,6 +326,7 @@ public TextBounds setWrappedText (CharSequence str, float x, float y, float wrap
 		y += font.data.ascent;
 		float down = font.data.down;
 
+		if (wrapWidth <= 0) wrapWidth = Integer.MAX_VALUE;
 		float maxWidth = 0;
 		int start = 0;
 		int numLines = 0;
@@ -336,7 +337,7 @@ public TextBounds setWrappedText (CharSequence str, float x, float y, float wrap
 			if (lineEnd < newLine) {
 				// Find char to break on.
 				while (lineEnd > start) {
-					if (BitmapFont.isWhitespace(str.charAt(lineEnd - 1))) break;
+					if (BitmapFont.isWhitespace(str.charAt(lineEnd))) break;
 					lineEnd--;
 				}
 				if (lineEnd == start)
@@ -349,8 +350,7 @@ public TextBounds setWrappedText (CharSequence str, float x, float y, float wrap
 						lineEnd--;
 					}
 				}
-			} else
-				nextStart = lineEnd + 1;
+			}
 			if (lineEnd > start) {
 				float xOffset = 0;
 				if (alignment != HAlignment.LEFT) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -38,10 +38,10 @@ public Window (String title, Stage stage, WindowStyle style) {
 	}
 
 	public Window (String title, Stage stage, WindowStyle style, String name) {
-		super(null, null, null, name);
+		super(null, null, name);
 		if (title == null) throw new IllegalArgumentException("title cannot be null.");
 		if (stage == null) throw new IllegalArgumentException("stage cannot be null.");
-		enableClipping(stage);
+		setClip(true);
 		this.title = title;
 		setStyle(style);
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/TableLayout.java
Patch:
@@ -51,7 +51,6 @@
 public class TableLayout extends BaseTableLayout<Actor, Table, TableLayout, LibgdxToolkit> {
 	public Skin skin;
 	public AssetManager assetManager;
-	public Stage stage;
 
 	Array<DebugRect> debugRects;
 	private ImmediateModeRenderer debugRenderer;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/utils/Clipboard.java
Patch:
@@ -36,7 +36,7 @@ public static Clipboard getDefaultClipboard () {
 			return new AndroidClipboard();
 		else {
 			try {
-				return (Clipboard)(Class.forName("com.badlogic.gdx.scenes.scene2d.ui.utils.DesktopClipboard").newInstance());
+				return (Clipboard)Class.forName("com.badlogic.gdx.scenes.scene2d.ui.utils.DesktopClipboard").newInstance();
 			} catch (Exception e) {
 				throw new GdxRuntimeException("Couldn't instantiate desktop clipboard", e);
 			}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FlickScrollPaneTest.java
Patch:
@@ -45,7 +45,7 @@ public void create () {
 
 		Table table = new Table();
 
-		FlickScrollPane scroll = new FlickScrollPane(table, stage);
+		FlickScrollPane scroll = new FlickScrollPane(table);
 		container.add(scroll).expand().fill();
 
 		table.parse("pad:10 * expand:x space:4");

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GroupCullingTest.java
Patch:
@@ -29,7 +29,7 @@ public void create () {
 		Skin skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
 
 		Table labels = new Table();
-		root.add(new ScrollPane(labels, stage, skin)).expand().fill();
+		root.add(new ScrollPane(labels, skin)).expand().fill();
 		root.row();
 		root.add(drawnLabel = new Label("", skin));
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InterpolationTest.java
Patch:
@@ -52,7 +52,7 @@ public boolean touchDown (int x, int y, int pointer, int button) {
 		Skin skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
 
 		list = new List(interpolators, skin);
-		root.add(new FlickScrollPane(list, stage)).expandY().fillY().prefWidth((int)list.getPrefWidth());
+		root.add(new FlickScrollPane(list)).expandY().fillY().prefWidth((int)list.getPrefWidth());
 	}
 
 	public void resize (int width, int height) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StageTest.java
Patch:
@@ -93,7 +93,7 @@ public boolean touchDown (float x, float y, int pointer) {
 		blend.width = blend.getPrefWidth();
 		blend.height = blend.getPrefHeight();
 		blend.y = ui.height() - 64;
-		
+
 		Image rotate = new Image(new TextureRegion(uiTexture, 64, 0, 64, 32), Scaling.none, Align.CENTER, "rotate") {
 			public boolean touchDown (float x, float y, int pointer) {
 				rotateSprites = !rotateSprites;
@@ -104,7 +104,7 @@ public boolean touchDown (float x, float y, int pointer) {
 		rotate.height = rotate.getPrefHeight();
 		rotate.y = blend.y;
 		rotate.x = 64;
-		
+
 		Image scale = new Image(new TextureRegion(uiTexture, 64, 32, 64, 32), Scaling.none, Align.CENTER, "scale") {
 			public boolean touchDown (float x, float y, int pointer) {
 				scaleSprites = !scaleSprites;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TableTest.java
Patch:
@@ -58,7 +58,7 @@ public void create () {
 
 		// table.setBackground(region);
 		table.setBackground(patch);
-		table.enableClipping(stage);
+		table.setClip(true);
 		table.size(75, 75);
 		table.add(label);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -87,9 +87,9 @@ public void create () {
 		final SelectBox dropdown = new SelectBox(new String[] {"Android", "Windows", "Linux", "OSX"}, stage,
 			skin.getStyle(SelectBoxStyle.class), "combo");
 		final Image imageActor = new Image(image2);
-		final FlickScrollPane scrollPane = new FlickScrollPane(imageActor, stage, "flickscroll");
+		final FlickScrollPane scrollPane = new FlickScrollPane(imageActor, "flickscroll");
 		final List list = new List(listEntries, skin.getStyle(ListStyle.class), "list");
-		final ScrollPane scrollPane2 = new ScrollPane(list, stage, skin.getStyle(ScrollPaneStyle.class), "scroll");
+		final ScrollPane scrollPane2 = new ScrollPane(list, skin.getStyle(ScrollPaneStyle.class), "scroll");
 		final SplitPane splitPane = new SplitPane(scrollPane, scrollPane2, false, stage, skin.getStyle("default-horizontal",
 			SplitPaneStyle.class), "split");
 		final Label fpsLabel = new Label("fps:", skin.getStyle(LabelStyle.class), "label");

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglFrame.java
Patch:
@@ -31,7 +31,8 @@ public class LwjglFrame extends JFrame {
 	public LwjglFrame (ApplicationListener listener, String title, int width, int height, boolean useGL2) {
 		super(title);
 		setDefaultCloseOperation(EXIT_ON_CLOSE);
-		setSize(width, height);
+		getContentPane().setPreferredSize(new Dimension(width, height));
+		pack();
 		setLocationRelativeTo(null);
 
 		lwjglCanvas = new LwjglCanvas(listener, useGL2) {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglPreferences.java
Patch:
@@ -35,7 +35,7 @@ public class LwjglPreferences implements Preferences {
 	private final Properties properties = new Properties();
 
 	LwjglPreferences (String name) {
-		this(Gdx.files.external(name));
+		this(Gdx.files.external(".prefs/" + name));
 	}
 
 	public LwjglPreferences (FileHandle file) {
@@ -174,7 +174,7 @@ public void clear () {
 	@Override
 	public void flush () {
 		if (Gdx.files == null) return;
-		FileHandle file = Gdx.files.external(LwjglPreferences.this.name);
+		FileHandle file = Gdx.files.external(".prefs/" + name);
 		OutputStream out = null;
 		try {
 			out = new BufferedOutputStream(file.write(false));

File: gdx/src/com/badlogic/gdx/graphics/TextureDict.java
Patch:
@@ -28,7 +28,7 @@
  * stores {@link TextureRef}s by their path. If you need to load the same texture in different parts of your application it will
  * only be loaded into memory once by the dictionary.
  * </p>
- * 
+ * @deprecated 
  * @author Dave Clayton <contact@redskyforge.com> */
 public class TextureDict {
 

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglTestStarter.java
Patch:
@@ -81,7 +81,7 @@ public void keyPressed (KeyEvent e) {
 			});
 
 			final Preferences prefs = new LwjglPreferences(new FileHandle(new LwjglFiles().getExternalStoragePath()
-				+ "pennypop-tests"));
+				+ ".prefs/lwjgl-tests"));
 			list.setSelectedValue(prefs.getString("last", null), true);
 
 			button.addActionListener(new ActionListener() {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -297,7 +297,7 @@ public void postRunnable (Runnable runnable) {
 	public void onConfigurationChanged (Configuration config) {
 		super.onConfigurationChanged(config);
 		boolean keyboardAvailable = false;
-		if (config.keyboardHidden == Configuration.HARDKEYBOARDHIDDEN_NO) keyboardAvailable = true;
+		if (config.hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_NO) keyboardAvailable = true;
 		input.keyboardAvailable = keyboardAvailable;
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InputTest.java
Patch:
@@ -27,7 +27,7 @@ public class InputTest extends GdxTest implements InputProcessor {
 
 	@Override
 	public void create () {
-		Gdx.input = new RemoteInput();
+//		Gdx.input = new RemoteInput();
 		Gdx.input.setInputProcessor(this);
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/OnscreenKeyboardTest.java
Patch:
@@ -23,7 +23,6 @@
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class OnscreenKeyboardTest extends GdxTest implements InputProcessor {
-
 	@Override
 	public boolean needsGL20 () {
 		return false;
@@ -38,7 +37,7 @@ public void create () {
 		font = new BitmapFont();
 		text = "";
 		Gdx.input.setInputProcessor(this);
-		Gdx.input.setOnscreenKeyboardVisible(true);
+//		Gdx.input.setOnscreenKeyboardVisible(true);
 	}
 
 	public void render () {

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -336,7 +336,6 @@ public FileHandle[] list (String suffix) {
 	public boolean isDirectory () {
 		if (type == FileType.Classpath) return false;
 		return file().isDirectory();
-
 	}
 
 	/** Returns a handle to the child with the specified name.

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ButtonGroup.java
Patch:
@@ -34,12 +34,12 @@ public void add (Button... buttons) {
 			add(buttons[i]);
 	}
 
-	/** Sets the first button with the specified {@link Button#getText() text} to checked. */
+	/** Sets the first {@link TextButton} with the specified text to checked. */
 	public void setChecked (String text) {
 		if (text == null) throw new IllegalArgumentException("text cannot be null.");
 		for (int i = 0, n = buttons.size; i < n; i++) {
 			Button button = buttons.get(i);
-			if (text.equals(button.getText())) {
+			if (button instanceof TextButton && text.equals(((TextButton)button).getText())) {
 				button.setChecked(true);
 				return;
 			}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Image.java
Patch:
@@ -133,7 +133,8 @@ else if (region != null) {
 			if (scaleX == 1 && scaleY == 1 && rotation == 0)
 				batch.draw(region, x + imageX, y + imageY, imageWidth, imageHeight);
 			else
-				batch.draw(region, x + imageX, y + imageY, originX, originY, imageWidth, imageHeight, scaleX, scaleY, rotation);
+				batch.draw(region, x + imageX, y + imageY, originX - imageX, originY - imageY, imageWidth, imageHeight, scaleX,
+					scaleY, rotation);
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/utils/ObjectMap.java
Patch:
@@ -86,7 +86,7 @@ public V put (K key, V value) {
 		return put_internal(key, value);
 	}
 
-	public V put_internal (K key, V value) {
+	private V put_internal (K key, V value) {
 		// Check for existing keys.
 		int hashCode = key.hashCode();
 		int index1 = hashCode & mask;
@@ -268,6 +268,7 @@ private void putStash (K key, V value) {
 		keyTable[index] = key;
 		valueTable[index] = value;
 		stashSize++;
+		size++;
 	}
 
 	public V get (K key) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -25,12 +25,12 @@
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.scenes.scene2d.ui.Align;
-import com.badlogic.gdx.scenes.scene2d.ui.Button;
 import com.badlogic.gdx.scenes.scene2d.ui.ClickListener;
 import com.badlogic.gdx.scenes.scene2d.ui.Label;
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.scenes.scene2d.ui.Slider;
 import com.badlogic.gdx.scenes.scene2d.ui.Slider.ValueChangedListener;
+import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
 import com.badlogic.gdx.scenes.scene2d.ui.tablelayout.Table;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
@@ -49,8 +49,8 @@ public void create () {
 
 		Skin skin = new Skin(Gdx.files.internal("data/uiskin.json"), Gdx.files.internal("data/uiskin.png"));
 		ui = new Stage(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);
-		Button play = new Button("Play", skin);
-		Button stop = new Button("Stop", skin);
+		TextButton play = new TextButton("Play", skin);
+		TextButton stop = new TextButton("Stop", skin);
 		final Slider pitch = new Slider(0.1f, 4, 0.1f, skin);
 		pitch.setValue(1);
 		final Label pitchValue = new Label("1.0", skin);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidSound.java
Patch:
@@ -96,9 +96,9 @@ public void setPan (long soundId, float pan, float volume) {
 		float rightVolume = volume;
 
 		if (pan < 0) {
-			leftVolume *= (1 - Math.abs(pan));
-		} else if (pan > 0) {
 			rightVolume *= (1 - Math.abs(pan));
+		} else if (pan > 0) {
+			leftVolume *= (1 - Math.abs(pan));
 		}
 
 		soundPool.setVolume((int)soundId, leftVolume, rightVolume);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/CheckBox.java
Patch:
@@ -41,6 +41,8 @@ public void setStyle (ButtonStyle style) {
 		}
 	}
 
+	/** Returns the checkbox's style. Modifying the returned style may not have an effect until {@link #setStyle(ButtonStyle)} is
+	 * called. */
 	public CheckBoxStyle getStyle () {
 		return (CheckBoxStyle)super.getStyle();
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -80,6 +80,8 @@ public void setStyle (LabelStyle style) {
 		invalidateHierarchy();
 	}
 
+	/** Returns the label's style. Modifying the returned style may not have an effect until {@link #setStyle(LabelStyle)} is
+	 * called. */
 	public LabelStyle getStyle () {
 		return style;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
Patch:
@@ -67,6 +67,7 @@ public void setStyle (ListStyle style) {
 			invalidateHierarchy();
 	}
 
+	/** Returns the list's style. Modifying the returned style may not have an effect until {@link #setStyle(ListStyle)} is called. */
 	public ListStyle getStyle () {
 		return style;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -91,6 +91,8 @@ public void setStyle (ScrollPaneStyle style) {
 		invalidateHierarchy();
 	}
 
+	/** Returns the scroll pane's style. Modifying the returned style may not have an effect until
+	 * {@link #setStyle(ScrollPaneStyle)} is called. */
 	public ScrollPaneStyle getStyle () {
 		return style;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
Patch:
@@ -74,6 +74,8 @@ public void setStyle (SelectBoxStyle style) {
 			invalidateHierarchy();
 	}
 
+	/** Returns the select box's style. Modifying the returned style may not have an effect until {@link #setStyle(SelectBoxStyle)}
+	 * is called. */
 	public SelectBoxStyle getStyle () {
 		return style;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -74,6 +74,8 @@ public void setStyle (SliderStyle style) {
 		invalidateHierarchy();
 	}
 
+	/** Returns the slider's style. Modifying the returned style may not have an effect until {@link #setStyle(SliderStyle)} is
+	 * called. */
 	public SliderStyle getStyle () {
 		return style;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -89,6 +89,8 @@ public void setStyle (SplitPaneStyle style) {
 		invalidateHierarchy();
 	}
 
+	/** Returns the split pane's style. Modifying the returned style may not have an effect until {@link #setStyle(SplitPaneStyle)}
+	 * is called. */
 	public SplitPaneStyle getStyle () {
 		return style;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -114,6 +114,8 @@ public void setStyle (TextFieldStyle style) {
 		invalidateHierarchy();
 	}
 
+	/** Returns the text field's style. Modifying the returned style may not have an effect until {@link #setStyle(TextFieldStyle)}
+	 * is called. */
 	public TextFieldStyle getStyle () {
 		return style;
 	}
@@ -433,7 +435,7 @@ public void setMessageText (String messageText) {
 	}
 
 	public void setText (String text) {
-		if (text == null) throw new IllegalArgumentException("text must not be null");
+		if (text == null) throw new IllegalArgumentException("text cannot be null.");
 
 		BitmapFont font = style.font;
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -66,11 +66,11 @@ public Button (ButtonStyle style, String name) {
 		pack();
 
 		super.setClickListener(new ClickListener() {
-			public void click (Actor actor) {
+			public void click (Actor actor, float x, float y) {
 				boolean newChecked = !isChecked;
 				setChecked(newChecked);
 				// Don't fire listener if the button group reverted the change to isChecked.
-				if (newChecked == isChecked && listener != null) listener.click(actor);
+				if (newChecked == isChecked && listener != null) listener.click(actor, x, y);
 			}
 		});
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ClickListener.java
Patch:
@@ -6,5 +6,5 @@
 /** A callback for when an actor is clicked.
  * @author Nathan Sweet */
 public interface ClickListener {
-	public void click (Actor actor);
+	public void click (Actor actor, float x, float y);
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
Patch:
@@ -123,7 +123,7 @@ public void setupUI () {
 
 		reload.setClickListener(new ClickListener() {
 			@Override
-			public void click (Actor button) {
+			public void click (Actor button, float x, float y) {
 				ShaderProgram prog = new ShaderProgram(Gdx.files.internal("data/shaders/projtex-vert.glsl").readString(), Gdx.files
 					.internal("data/shaders/projtex-frag.glsl").readString());
 				if (prog.isCompiled() == false) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -83,7 +83,7 @@ public void create () {
 
 		play.setClickListener(new ClickListener() {
 			@Override
-			public void click (Actor actor) {
+			public void click (Actor actor, float x, float y) {
 				soundId = sound.play(volume.getValue());
 				sound.setPitch(soundId, pitch.getValue());
 				sound.setPan(soundId, pan.getValue(), volume.getValue());
@@ -92,7 +92,7 @@ public void click (Actor actor) {
 
 		stop.setClickListener(new ClickListener() {
 			@Override
-			public void click (Actor actor) {
+			public void click (Actor actor, float x, float y) {
 				sound.stop(soundId);
 			}
 		});

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TableTest.java
Patch:
@@ -64,7 +64,7 @@ public void create () {
 		table.add(label);
 
 		table.setClickListener(new ClickListener() {
-			public void click (Actor actor) {
+			public void click (Actor actor, float x, float y) {
 				System.out.println("click!");
 			}
 		});

File: gdx/src/com/badlogic/gdx/physics/box2d/Fixture.java
Patch:
@@ -71,6 +71,7 @@ public Type getType () {
 	public Shape getShape () {
 		if (shape == null) {
 			long shapeAddr = jniGetShape(addr);
+			if (shapeAddr == 0) throw new GdxRuntimeException("Null shape address!");
 			int type = Shape.jniGetType(shapeAddr);
 
 			switch(type) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/LibgdxToolkit.java
Patch:
@@ -131,7 +131,7 @@ public void setProperty (TableLayout layout, Actor object, String name, List<Str
 			if (layout.skin != null && values.size() == 1 && name.equalsIgnoreCase("style")) {
 				try {
 					String styleName = values.get(0);
-					Class styleClass = Class.forName(object.getClass().getName() + "Style");
+					Class styleClass = Class.forName(object.getClass().getName() + "$" + object.getClass().getSimpleName() + "Style");
 					if (layout.skin.hasStyle(styleName, styleClass)) {
 						try {
 							Method setStyleMethod = object.getClass().getMethod("setStyle", styleClass);
@@ -193,6 +193,7 @@ public void addChild (Actor parent, Actor child, String layoutString) {
 		if (child.parent != null) child.remove();
 		try {
 			parent.getClass().getMethod("setWidget", Actor.class).invoke(parent, child);
+			return;
 		} catch (InvocationTargetException ex) {
 			throw new RuntimeException("Error calling setWidget.", ex);
 		} catch (Exception ignored) {

File: gdx/src/com/badlogic/gdx/graphics/glutils/FrameBuffer.java
Patch:
@@ -93,6 +93,8 @@ public FrameBuffer (Pixmap.Format format, int width, int height, boolean hasDept
 	}
 
 	private void build () {
+		if (!Gdx.graphics.isGL20Available()) throw new GdxRuntimeException("GL2 is required.");
+
 		colorTexture = new Texture(width, height, format);
 		colorTexture.setFilter(TextureFilter.Linear, TextureFilter.Linear);
 		colorTexture.setWrap(TextureWrap.ClampToEdge, TextureWrap.ClampToEdge);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -29,7 +29,6 @@
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Rectangle;
 import com.badlogic.gdx.math.Vector2;
-import com.badlogic.gdx.scenes.scene2d.ui.Cullable;
 import com.badlogic.gdx.utils.ObjectMap;
 
 /** A group is an Actor that contains other Actors (also other Groups which are Actors).

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Layout.java
Patch:
@@ -34,7 +34,7 @@ public interface Layout {
 	 * {@link Actor#draw(com.badlogic.gdx.graphics.g2d.SpriteBatch, float)} before drawing is performed. */
 	public void validate ();
 
-	/** Sizes this actor to its preferred width and height and calls {@link #invalidate()}. */
+	/** Sizes this actor to its preferred width and height and, if its size was changed, calls {@link #invalidate()}. */
 	public void pack ();
 
 	public float getMinWidth ();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ClickListener.java
Patch:
@@ -3,7 +3,8 @@
 
 import com.badlogic.gdx.scenes.scene2d.Actor;
 
-/** @author Nathan Sweet */
+/** A callback for when an actor is clicked.
+ * @author Nathan Sweet */
 public interface ClickListener {
 	public void click (Actor actor);
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ImageTest.java
Patch:
@@ -28,8 +28,8 @@ public void create () {
 		ui.addActor(root);
 		root.debug();
 
-		Image image = new Image(image2, Scaling.stretch);
-		root.add(image).minWidth(16).minHeight(14);
+		Image image = new Image(image2, Scaling.fill);
+		root.add(image).width(160).height(100);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -153,6 +153,8 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 		batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
 		backgroundPatch.draw(batch, 0, 0, width, height);
 		float textY = height - (int)(backgroundPatch.getTopHeight() / 2) + (int)(textBounds.height / 2);
+		titleFont.setColor(color.r * titleFontColor.r, color.g * titleFontColor.g, color.b * titleFontColor.b, color.a
+			* parentAlpha * titleFontColor.a);
 		titleFont.setColor(titleFontColor.r, titleFontColor.g, titleFontColor.b, titleFontColor.a * parentAlpha);
 		titleFont.drawMultiLine(batch, title, (int)(width / 2), textY, 0, HAlignment.CENTER);
 		batch.flush();

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidSound.java
Patch:
@@ -96,9 +96,9 @@ public void setPan (long soundId, float pan, float volume) {
 		float rightVolume = volume;
 
 		if (pan < 0) {
-			rightVolume *= (1 - Math.abs(pan));
-		} else if (pan > 0) {
 			leftVolume *= (1 - Math.abs(pan));
+		} else if (pan > 0) {
+			rightVolume *= (1 - Math.abs(pan));
 		}
 
 		soundPool.setVolume((int)soundId, leftVolume, rightVolume);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -84,7 +84,7 @@ public void create () {
 		play.setClickListener(new ClickListener() {
 			@Override
 			public void click (Actor actor) {
-				soundId = sound.play();
+				soundId = sound.play(volume.getValue());
 				sound.setPitch(soundId, pitch.getValue());
 				sound.setPan(soundId, pan.getValue(), volume.getValue());
 			}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -109,7 +109,7 @@ public Color getColor () {
 	public void layout () {
 		float wrapWidth = this.wrapWidth != 0 ? this.wrapWidth : width;
 		if (wrap)
-			bounds.set(cache.getFont().getWrappedBounds(text, width));
+			bounds.set(cache.getFont().getWrappedBounds(text, wrapWidth));
 		else
 			bounds.set(cache.getFont().getMultiLineBounds(text));
 
@@ -165,7 +165,7 @@ public float getPrefWidth () {
 	}
 
 	public float getPrefHeight () {
-		if (wrap) return 100;
+		if (wrap && wrapWidth == 0) return 100;
 		validate();
 		return bounds.height - style.font.getDescent() * 2;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/Table.java
Patch:
@@ -218,7 +218,7 @@ public Cell stack (Actor... actor) {
 	}
 
 	/** Creates a new table with the same Skin, Stage, and AssetManager as this table. */
-	public Table table () {
+	public Table newTable () {
 		return layout.getToolkit().newTable(this);
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InterpolationTest.java
Patch:
@@ -18,9 +18,9 @@
 
 public class InterpolationTest extends GdxTest {
 	static private final String[] interpolators = new String[] {"bounce", "bounceIn", "bounceOut", "circle", "circleIn",
-		"circleOut", "elastic", "elasticIn", "elasticOut", "exp", "expIn", "expOut", "fade", "linear", "pow2", "pow2In", "pow2Out",
-		"pow3", "pow3In", "pow3Out", "pow4", "pow4In", "pow4Out", "pow5", "pow5In", "pow5Out", "sine", "sineIn", "sineOut",
-		"swing", "swingIn", "swingOut"};
+		"circleOut", "elastic", "elasticIn", "elasticOut", "exp10", "exp10In", "exp10Out", "exp5", "exp5In", "exp5Out", "fade",
+		"linear", "pow2", "pow2In", "pow2Out", "pow3", "pow3In", "pow3Out", "pow4", "pow4In", "pow4Out", "pow5", "pow5In",
+		"pow5Out", "sine", "sineIn", "sineOut", "swing", "swingIn", "swingOut"};
 
 	private Stage stage;
 	private Table root;

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -286,7 +286,7 @@ public Iterator<T> iterator () {
 	 * taken. */
 	public void truncate (int newSize) {
 		if (size <= newSize) return;
-		for (int i = size; i < newSize; i++)
+		for (int i = newSize; i < size; i++)
 			items[i] = null;
 		size = newSize;
 	}

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/Mp3.java
Patch:
@@ -61,8 +61,8 @@ public int read (byte[] buffer) {
 				}
 
 				int totalLength = 0;
-				int minRequiredLength = buffer.length - OutputBuffer.BUFFERSIZE * 2 - 1;
-				while (totalLength < minRequiredLength) {
+				int minRequiredLength = buffer.length - OutputBuffer.BUFFERSIZE * 2;
+				while (totalLength <= minRequiredLength) {
 					Header header = bitstream.readFrame();
 					if (header == null) break;
 					if (setup) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -53,7 +53,7 @@ public Button (String text, ButtonStyle style, String name) {
 	}
 
 	public Button (ButtonStyle style, String name) {
-		super(name);
+		super(null, null, null, name);
 		setStyle(style);
 		initialize();
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -100,7 +100,7 @@ public Window (String title, Stage stage, WindowStyle style) {
 	 * @param prefHeight the (preferred) height
 	 * @param style the {@link WindowStyle} */
 	public Window (String name, String title, Stage stage, WindowStyle style, int prefWidth, int prefHeight) {
-		super(name);
+		super(null, null, null, name);
 		this.stage = stage;
 		this.title = title;
 		width = prefWidth;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MipMapTest.java
Patch:
@@ -103,7 +103,7 @@ private void createUI () {
 		minFilter = new ComboBox(filters, ui, skin.getStyle(ComboBoxStyle.class), "minfilter");
 		magFilter = new ComboBox(new String[] {"Nearest", "Linear"}, ui, skin.getStyle(ComboBoxStyle.class), "magfilter");
 
-		Table table = new Table("container");
+		Table table = new Table();
 		table.width = ui.width();
 		table.height = 30;
 		table.y = ui.height() - 30;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
Patch:
@@ -112,7 +112,7 @@ public void setupUI () {
 		ComboBox camera = new ComboBox(new String[] {"Camera", "Light"}, ui, skin.getStyle(ComboBoxStyle.class), "camera");
 		Label fps = new Label("fps: ", skin.getStyle(LabelStyle.class), "fps");
 
-		Table table = new Table("container");
+		Table table = new Table();
 		table.width = ui.width();
 		table.height = ui.height();
 		table.top().padTop(15);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ShadowMappingTest.java
Patch:
@@ -123,7 +123,7 @@ private void setupUI () {
 			skin.getStyle(ComboBoxStyle.class), "shaderCombo");
 		Label fpsLabel = new Label("fps:", skin.getStyle(LabelStyle.class), "fps");
 
-		Table table = new Table("toolbar");
+		Table table = new Table();
 		table.width = Gdx.graphics.getWidth();
 		table.height = 100;
 		table.top().padTop(12);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -57,7 +57,7 @@ public void create () {
 		final Slider volume = new Slider(0.1f, 1, 0.1f, skin);
 		volume.setValue(1);
 		final Label volumeValue = new Label("1.0", skin);
-		Table table = new Table("ui");
+		Table table = new Table();
 		final Slider pan = new Slider(-1f, 1f, 0.1f, skin);
 		pan.setValue(0);
 		final Label panValue = new Label("0.0", skin);

File: gdx/src/com/badlogic/gdx/assets/loaders/TextureAtlasLoader.java
Patch:
@@ -22,6 +22,7 @@
 import com.badlogic.gdx.assets.loaders.TextureLoader.TextureParameter;
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas.TextureAtlasData;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas.TextureAtlasData.Page;
@@ -51,8 +52,9 @@ public Array<AssetDescriptor> getDependencies (String fileName, TextureAtlasPara
 
 		if (parameter != null)
 			data = new TextureAtlasData(atlasFile, imgDir, parameter.flip);
-		else
+		else {
 			data = new TextureAtlasData(atlasFile, imgDir, false);
+		}
 
 		Array<AssetDescriptor> dependencies = new Array<AssetDescriptor>();
 		for (Page page : data.getPages()) {

File: gdx/src/com/badlogic/gdx/graphics/Color.java
Patch:
@@ -185,7 +185,7 @@ public String toString () {
 	 * @return the packed color as a float */
 	public static float toFloatBits (int r, int g, int b, int a) {
 		int color = (a << 24) | (b << 16) | (g << 8) | r;
-		float floatColor = NumberUtils.intBitsToFloat(color & 0xfeffffff);
+		float floatColor = NumberUtils.intToFloatColor(color);
 		return floatColor;
 	}
 
@@ -206,7 +206,7 @@ public static int toIntBits (int r, int g, int b, int a) {
 	 * @return the packed color as a 32-bit float */
 	public float toFloatBits () {
 		int color = ((int)(255 * a) << 24) | ((int)(255 * b) << 16) | ((int)(255 * g) << 8) | ((int)(255 * r));
-		return NumberUtils.intBitsToFloat(color & 0xfeffffff);
+		return NumberUtils.intToFloatColor(color);
 	}
 
 	/** Packs the 4 components of this color into a 32-bit int.
@@ -222,7 +222,7 @@ public int toIntBits () {
 	 * @return the packed color as a 32-bit float */
 	public static float toFloatBits (float r, float g, float b, float a) {
 		int color = ((int)(255 * a) << 24) | ((int)(255 * b) << 16) | ((int)(255 * g) << 8) | ((int)(255 * r));
-		return NumberUtils.intBitsToFloat(color & 0xfeffffff);
+		return NumberUtils.intToFloatColor(color);
 	}
 
 	public static int alpha (float alpha) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -717,13 +717,13 @@ public void setColor (Color tint) {
 
 	public void setColor (float r, float g, float b, float a) {
 		int intBits = (int)(255 * a) << 24 | (int)(255 * b) << 16 | (int)(255 * g) << 8 | (int)(255 * r);
-		color = NumberUtils.intBitsToFloat((intBits & 0xfeffffff));
+		color = NumberUtils.intToFloatColor(intBits);
 	}
 
 	/** Returns the color of this font. Changing the returned color will have no affect, {@link #setColor(Color)} or
 	 * {@link #setColor(float, float, float, float)} must be used. */
 	public Color getColor () {
-		int intBits = NumberUtils.floatToRawIntBits(color);
+		int intBits = NumberUtils.floatToIntColor(color);
 		Color color = this.tempColor;
 		color.r = (intBits & 0xff) / 255f;
 		color.g = ((intBits >>> 8) & 0xff) / 255f;

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -93,7 +93,7 @@ public void setColor (Color tint) {
 
 	public void setColor (float r, float g, float b, float a) {
 		int intBits = ((int)(255 * a) << 24) | ((int)(255 * b) << 16) | ((int)(255 * g) << 8) | ((int)(255 * r));
-		float color = NumberUtils.intBitsToFloat((intBits & 0xfeffffff));
+		float color = NumberUtils.intToFloatColor(intBits);
 		if (color == this.color) return;
 		this.color = color;
 		float[] vertices = this.vertices;
@@ -121,7 +121,7 @@ public void draw (SpriteBatch spriteBatch, float alphaModulation) {
 
 	public Color getColor () {
 		float floatBits = color;
-		int intBits = NumberUtils.floatToRawIntBits(color);
+		int intBits = NumberUtils.floatToIntColor(color);
 		Color color = tmpColor;
 		color.r = (intBits & 0xff) / 255f;
 		color.g = ((intBits >>> 8) & 0xff) / 255f;

File: gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
Patch:
@@ -211,7 +211,7 @@ public void setColor (Color tint) {
 
 	public void setColor (float r, float g, float b, float a) {
 		int intBits = ((int)(255 * a) << 24) | ((int)(255 * b) << 16) | ((int)(255 * g) << 8) | ((int)(255 * r));
-		float color = NumberUtils.intBitsToFloat(intBits & 0xfeffffff);
+		float color = NumberUtils.intToFloatColor(intBits);
 		float[] vertices = this.vertices;
 		vertices[C1] = color;
 		vertices[C2] = color;
@@ -447,7 +447,7 @@ public float getScaleY () {
 	 * {@link #setColor(float, float, float, float)} must be used. */
 	public Color getColor () {
 		float floatBits = vertices[C1];
-		int intBits = NumberUtils.floatToRawIntBits(vertices[C1]);
+		int intBits = NumberUtils.floatToIntColor(vertices[C1]);
 		Color color = this.color;
 		color.r = (intBits & 0xff) / 255f;
 		color.g = ((intBits >>> 8) & 0xff) / 255f;

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -274,7 +274,7 @@ public void setColor (Color tint) {
 	/** @see #setColor(Color) */
 	public void setColor (float r, float g, float b, float a) {
 		int intBits = (int)(255 * a) << 24 | (int)(255 * b) << 16 | (int)(255 * g) << 8 | (int)(255 * r);
-		color = NumberUtils.intBitsToFloat(intBits & 0xfeffffff);
+		color = NumberUtils.intToFloatColor(intBits);
 	}
 
 	/** @see #setColor(Color)
@@ -285,7 +285,7 @@ public void setColor (float color) {
 
 	/** @return the rendering color of this SpriteBatch. Manipulating the returned instance has no effect. */
 	public Color getColor () {
-		int intBits = NumberUtils.floatToRawIntBits(color);
+		int intBits = NumberUtils.floatToIntColor(color);
 		Color color = this.tempColor;
 		color.r = (intBits & 0xff) / 255f;
 		color.g = ((intBits >>> 8) & 0xff) / 255f;

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteCache.java
Patch:
@@ -136,7 +136,7 @@ public void setColor (Color tint) {
 	/** @see #setColor(Color) */
 	public void setColor (float r, float g, float b, float a) {
 		int intBits = (int)(255 * a) << 24 | (int)(255 * b) << 16 | (int)(255 * g) << 8 | (int)(255 * r);
-		color = NumberUtils.intBitsToFloat(intBits & 0xfeffffff);
+		color = NumberUtils.intToFloatColor(intBits);
 	}
 
 	/** @see #setColor(Color)
@@ -146,7 +146,7 @@ public void setColor (float color) {
 	}
 
 	public Color getColor () {
-		int intBits = NumberUtils.floatToRawIntBits(color);
+		int intBits = NumberUtils.floatToIntColor(color);
 		Color color = this.tempColor;
 		color.r = (intBits & 0xff) / 255f;
 		color.g = ((intBits >>> 8) & 0xff) / 255f;

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.math.Quaternion;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.math.Vector3;
+import com.badlogic.gdx.utils.NumberUtils;
 
 /** <p/>
  * Represents a sprite in 3d space. Typical 3d transformations such as translation, rotation and scaling are supported. The
@@ -65,7 +66,7 @@ protected Decal () {
 	 * @param a Alpha component */
 	public void setColor (float r, float g, float b, float a) {
 		int intBits = ((int)(255 * a) << 24) | ((int)(255 * b) << 16) | ((int)(255 * g) << 8) | ((int)(255 * r));
-		float color = Float.intBitsToFloat(intBits & 0xfeffffff);
+		float color = NumberUtils.intToFloatColor(intBits);
 		vertices[C1] = color;
 		vertices[C2] = color;
 		vertices[C3] = color;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.AlphaTest;
 import com.badlogic.gdx.tests.AssetManagerTest;
 import com.badlogic.gdx.tests.Box2DInitialOverlapTest;
 import com.badlogic.gdx.tests.Box2DTest;
@@ -35,7 +36,7 @@
 
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
-		GdxTest test = new PixmapTest();
+		GdxTest test = new AlphaTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -220,7 +220,7 @@ private Glyph getFirstGlyph () {
 			for (Glyph[] page : this.glyphs) {
 				if (page == null) continue;
 				for (Glyph glyph : page) {
-					if (glyph == null) continue;
+					if (glyph == null || glyph.height == 0 || glyph.width == 0) continue;
 					return glyph;
 				}
 			}

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -191,7 +191,7 @@ public BitmapFontData (FileHandle fontFile, boolean flip) {
 					capGlyph = getGlyph(capChars[i]);
 					if (capGlyph != null) break;
 				}
-				if (xGlyph == null) xGlyph = getFirstGlyph();
+				if (capGlyph == null) capGlyph = getFirstGlyph();
 				capHeight = capGlyph.height;
 
 				ascent = baseLine - capHeight;

File: gdx/src/com/badlogic/gdx/assets/loaders/SkinLoader.java
Patch:
@@ -51,9 +51,10 @@ public Array<AssetDescriptor> getDependencies (String fileName, SkinParameter pa
 		ObjectMap<String, String> bitmapFontMap = null;
 		if (resources != null) bitmapFontMap = resources.get(BitmapFont.class.getName());
 
+		skinFile = resolve(fileName);
+		
 		fontPaths = new ObjectMap();
 		if (bitmapFontMap != null) {
-			skinFile = resolve(fileName);
 			for (Entry<String, String> entry : bitmapFontMap.entries()) {
 				FileHandle fontFile = skinFile.parent().child(entry.value);
 				if (!fontFile.exists()) fontFile = Gdx.files.internal(entry.value);

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureRegion.java
Patch:
@@ -152,7 +152,7 @@ public void setRegionY (int y) {
 
 	/** Returns the region's width. May be negative if the texture region is flipped horizontally. */
 	public int getRegionWidth () {
-		return (int)(u2 * texture.getWidth()) - (int)(u * texture.getWidth());
+		return Math.round((u2 - u) * texture.getWidth());
 	}
 
 	public void setRegionWidth (int width) {
@@ -161,7 +161,7 @@ public void setRegionWidth (int width) {
 
 	/** Returns the region's height. May be negative if the texture region is flipped horizontally. */
 	public int getRegionHeight () {
-		return (int)(v2 * texture.getHeight()) - (int)(v * texture.getHeight());
+		return Math.round((v2 - v) * texture.getHeight());
 	}
 
 	public void setRegionHeight (int height) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ComboBox.java
Patch:
@@ -40,7 +40,7 @@
  * 
  * <h2>Layout</h2> A ComboBox's (preferred) width and height are determined by the border patches in the background
  * {@link NinePatch} as well as the bounding box of the widest item in the list of strings. Use
- * {@link ComboBox#setPrefSize(int, int)} to change this size programmatically. In case the set size is to small to contain the
+ *  to change this size programmatically. In case the set size is to small to contain the
  * widest item, artifacts may appear.</p>
  * 
  * The additional popup list will be positioned at the bottom edge of the ComboBox, displaying all items. The width and size is
@@ -69,7 +69,7 @@
  * 
  * <ul>
  * <li>The <code>name</code> attribute defines the name of the style which you can later use with
- * {@link Skin#newComboBox(String, String[], Stage, String)}.</li>
+ * .</li>
  * <li>The <code>background</code> attribute references a {@link NinePatch} by name, to be used as the ComboBox's background</li>
  * <li>The <code>listBackground</code> attribute references a {@link NinePatch} by name, to be used as the background for the
  * popup list</li>

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
Patch:
@@ -30,7 +30,7 @@
  * registered with the list to listen to selection changes. Items have an index in the list, the top item having the index 0.
  * 
  * <h2>Layout</h2> The (preferred) width and height of a List are derrived from the bounding box around all list items. Use
- * {@link #setPrefSize(int, int)} to programmatically change the size to your liking. In case the width and height you set are to
+ *  to programmatically change the size to your liking. In case the width and height you set are to
  * small for the contained text you will see artifacts. The patch highlighting the current selection will have the width of the
  * List, either determined as explained above or set programmatically.
  * 
@@ -53,7 +53,7 @@
  * 
  * <ul>
  * <li>The <code>name</code> attribute defines the name of the style which you can later use with
- * {@link Skin#newList(String, String[], String)}.</li>
+ * .</li>
  * <li>The <code>fontName</code> attribute references a {@link BitmapFont} by name, to be used for render the items</li>
  * <li>The <code>fontColorUnselected</code> attribute references a {@link Color} by name, to be used for render unselected items</li>
  * <li>The <code>fontColorSelected</code> attribute references a {@link Color} by name, to be used to render the selected item</li>

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -71,7 +71,7 @@
  * 
  * <ul>
  * <li>The <code>name</code> attribute defines the name of the style which you can later use with
- * {@link Skin#newScrollPane(String, Stage, Actor, int, int, String)}.</li>
+ * .</li>
  * <li>The <code>background</code> attribute references a {@link NinePatch} by name, to be used as the scroll pane's background</li>
  * <li>The <code>hScroll</code> attribute references a {@link NinePatch} by name, to be used as the scroll pane's horizontal
  * scroll bar.</li>

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -27,7 +27,7 @@
  * 
  * <h2>Layout</h2> A slider's (preferred) width and height are determined by the parameter past to its constructor as well as the
  * maximum height of the {@link NinePatch} and {@link TextureRegion} involved in the display of the slider. Use
- * {@link #setPrefSize(int, int)} to programmatically change the size to your liking. In case the width and height you set are to
+ *  to programmatically change the size to your liking. In case the width and height you set are to
  * small you will see artifacts.</p>
  * 
  * The slider background will only be stretched in the x-axis. The slider handle will be centered on the background vertically.
@@ -48,7 +48,7 @@
  * 
  * <ul>
  * <li>The <code>name</code> attribute defines the name of the style which you can later use with
- * {@link Skin#newSlider(String, float, float, float, float, String)}.</li>
+ * .</li>
  * <li>The <code>slider</code> attribute references a {@link NinePatch} by name, to be used as the slider's background</li>
  * <li>The <code>knob</code> attribute references a {@link TextureRegion} by name, to be used as the slider's handle</li> *
  * </ul>

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -70,7 +70,7 @@
  * 
  * <ul>
  * <li>The <code>name</code> attribute defines the name of the style which you can later use with
- * {@link Skin#newSplitPane(String, Stage, Actor, Actor, boolean, int, int, String)}.</li>
+ * .</li>
  * <li>The <code>handle</code> attribute references a {@link NinePatch} by name, to be used as the split pane's handle</li>
  * </ul>
  * @author mzechner */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -55,7 +55,7 @@
  * 
  * <h2>Layout</h2>
  * The (preferred) width and height of a TextField are derrived from the width given at construction time as well as the
- * combination of the used font's height and the top and bottom border patches. Use {@link Button#setPrefSize(int, int)} to
+ * combination of the used font's height and the top and bottom border patches. Use to
  * programmatically change the size to your liking. In case the width and height you set are to small for the contained text, the
  * TextField will clip the characters based on the current cursor position.
  * 
@@ -80,7 +80,7 @@
  * 
  * <ul>
  * <li>The <code>name</code> attribute defines the name of the style which you can later use with
- * {@link Skin#newTextField(String, float, String)}.</li>
+ * .</li>
  * <li>The <code>font</code> attribute references a {@link BitmapFont} by name, to be used to render the text in the text field</li>
  * <li>The <code>fontColor</code> attribute references a {@link Color} by name, to be used to render the text on the text field</li>
  * <li>The <code>cursorPatch</code> attribute references a {@link NinePatch} by name, to be used to render the text field's cursor

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -64,7 +64,7 @@
  * 
  * <ul>
  * <li>The <code>name</code> attribute defines the name of the style which you can later use with
- * {@link Skin#newWindow(String, Stage, String, int, int, String)}.</li>
+ * .</li>
  * <li>The <code>titleFont</code> attribute references a {@link BitmapFont} by name, to be used to render the title string.</li>
  * *
  * <li>The <code>titleFontColor</code> attribute references a {@link Color} by name, to be used to render the title string.</li>

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -123,7 +123,7 @@ public int getX () {
 	}
 
 	public int getY () {
-		return Gdx.graphics.getHeight() - Mouse.getY();
+		return Gdx.graphics.getHeight() - 1 - Mouse.getY();
 	}
 
 	public boolean isAccelerometerAvailable () {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -143,6 +143,7 @@ void start () {
 
 			public void run () {
 				if (!running) return;
+				canvas.setCursor(null);
 				graphics.updateTime();
 				synchronized (runnables) {
 					for (int i = 0; i < runnables.size(); i++) {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglFrame.java
Patch:
@@ -41,6 +41,8 @@ public void windowClosing (WindowEvent e) {
 				lwjglCanvas.stop();
 			}
 		});
+
+		setVisible(true);
 	}
 
 	public LwjglCanvas getLwjglCanvas () {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglPreferences.java
Patch:
@@ -32,7 +32,7 @@
 public class LwjglPreferences implements Preferences {
 	private final String name;
 	private final Properties properties = new Properties();
-	
+
 	LwjglPreferences (String name) {
 		this(Gdx.files.external(name));
 	}
@@ -172,6 +172,7 @@ public void clear () {
 
 	@Override
 	public void flush () {
+		if (Gdx.files == null) return;
 		OutputStream out = null;
 		try {
 			out = new BufferedOutputStream(Gdx.files.external(LwjglPreferences.this.name).write(false));

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureRegion.java
Patch:
@@ -152,7 +152,7 @@ public void setRegionY (int y) {
 
 	/** Returns the region's width. May be negative if the texture region is flipped horizontally. */
 	public int getRegionWidth () {
-		return (int)(u2 * texture.getWidth() - u * texture.getWidth());
+		return (int)(u2 * texture.getWidth()) - (int)(u * texture.getWidth());
 	}
 
 	public void setRegionWidth (int width) {
@@ -161,7 +161,7 @@ public void setRegionWidth (int width) {
 
 	/** Returns the region's height. May be negative if the texture region is flipped horizontally. */
 	public int getRegionHeight () {
-		return (int)(v2 * texture.getHeight() - v * texture.getHeight());
+		return (int)(v2 * texture.getHeight()) - (int)(v * texture.getHeight());
 	}
 
 	public void setRegionHeight (int height) {

File: gdx/src/com/badlogic/gdx/math/Interpolation.java
Patch:
@@ -132,6 +132,7 @@ public float apply (float a) {
 		}
 	};
 
+	// BOZO - Scale.
 	static public final Interpolation swingIn = new Interpolation() {
 		public float apply (float a) {
 			return a * a * ((1.70158f + 1) * a - 1.70158f);

File: gdx/src/com/badlogic/gdx/physics/box2d/Contact.java
Patch:
@@ -92,7 +92,6 @@ public Fixture getFixtureB () {
 	
 	/**
 	 *  Get the child primitive index for fixture A.
-	 * @return
 	 */
 	public int getChildIndexA() {
 		return jniGetChildIndexA(addr);
@@ -102,7 +101,6 @@ public int getChildIndexA() {
 
 	/**
 	 *  Get the child primitive index for fixture B.
-	 * @return
 	 */
 	public int getChildIndexB() {
 		return jniGetChildIndexB(addr);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -294,6 +294,7 @@ public void act (float delta) {
 	/** Renders the stage */
 	public void draw () {
 		camera.update();
+		if (!root.visible) return;
 		batch.setProjectionMatrix(camera.combined);
 		batch.begin();
 		root.draw(batch, 1);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -143,7 +143,7 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 		final BitmapFont titleFont = style.titleFont;
 		final Color titleFontColor = style.titleFontColor;
 
-		layout();
+		validate();
 		applyTransform(batch);
 		calculateBoundsAndScissors(batch.getTransformMatrix());
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ImageTest.java
Patch:
@@ -6,12 +6,11 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
 import com.badlogic.gdx.scenes.scene2d.Stage;
-import com.badlogic.gdx.scenes.scene2d.ui.Button;
 import com.badlogic.gdx.scenes.scene2d.ui.Image;
-import com.badlogic.gdx.scenes.scene2d.ui.Image.Scaling;
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.scenes.scene2d.ui.tablelayout.Table;
 import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.utils.Scaling;
 
 public class ImageTest extends GdxTest {
 	Skin skin;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SimpleStageCullingTest.java
Patch:
@@ -31,6 +31,7 @@
 import com.badlogic.gdx.scenes.scene2d.ui.Image;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.tests.utils.OrthoCamController;
+import com.badlogic.gdx.utils.Scaling;
 
 /** This is a simple demonstration of how to perform VERY basic culling on hierarchies of stage actors that do not scale or rotate.
  * It is not a general solution as it assumes that actors and groups are only translated (moved, change their x/y coordinates).

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StageTest.java
Patch:
@@ -34,8 +34,8 @@
 import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.scenes.scene2d.ui.Image;
 import com.badlogic.gdx.scenes.scene2d.ui.Label;
-import com.badlogic.gdx.scenes.scene2d.ui.Image.Scaling;
 import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.utils.Scaling;
 
 public class StageTest extends GdxTest implements InputProcessor {
 	private static final int NUM_GROUPS = 5;

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -399,7 +399,6 @@ private void handleTaskError (Throwable t) {
 		if (listener != null) {
 			listener.error(assetDesc.fileName, assetDesc.type, t);
 		} else {
-			t.printStackTrace();
 			throw new GdxRuntimeException(t);
 		}
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureRegion.java
Patch:
@@ -152,7 +152,7 @@ public void setRegionY (int y) {
 
 	/** Returns the region's width. May be negative if the texture region is flipped horizontally. */
 	public int getRegionWidth () {
-		return (int)((u2 - u) * texture.getWidth());
+		return (int)(u2 * texture.getWidth() - u * texture.getWidth());
 	}
 
 	public void setRegionWidth (int width) {
@@ -161,7 +161,7 @@ public void setRegionWidth (int width) {
 
 	/** Returns the region's height. May be negative if the texture region is flipped horizontally. */
 	public int getRegionHeight () {
-		return (int)((v2 - v) * texture.getHeight());
+		return (int)(v2 * texture.getHeight() - v * texture.getHeight());
 	}
 
 	public void setRegionHeight (int height) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/LibgdxToolkit.java
Patch:
@@ -128,7 +128,7 @@ public void clearDebugRectangles (TableLayout layout) {
 
 	public void addDebugRectangle (TableLayout layout, int type, int x, int y, int w, int h) {
 		if (layout.debugRects == null) layout.debugRects = new Array();
-		layout.debugRects.add(new DebugRect(type, x, y, w, h));
+		layout.debugRects.add(new DebugRect(type, x, (int)(layout.getTable().height - y), w, h));
 	}
 
 	/** Sets the name of a font. */

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -355,6 +355,7 @@ void pause () {
 				try {
 					synch.wait();
 				} catch (InterruptedException ignored) {
+					Gdx.app.log("AndroidGraphics", "waiting for pause synchronization failed!");
 				}
 			}
 		}
@@ -369,6 +370,7 @@ void destroy () {
 				try {
 					synch.wait();
 				} catch (InterruptedException ex) {
+					Gdx.app.log("AndroidGraphics", "waiting for destroy synchronization failed!");
 				}
 			}
 		}

File: gdx/src/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.IOException;
 import java.nio.ByteBuffer;
 
+import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.graphics.g2d.Gdx2DPixmap;
 import com.badlogic.gdx.utils.Disposable;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -24,6 +24,7 @@
 import com.badlogic.gdx.tests.Box2DTestCollection;
 import com.badlogic.gdx.tests.EdgeDetectionTest;
 import com.badlogic.gdx.tests.GroupCullingTest;
+import com.badlogic.gdx.tests.PixmapTest;
 import com.badlogic.gdx.tests.SoundTest;
 import com.badlogic.gdx.tests.UITest;
 import com.badlogic.gdx.tests.MD5Test;
@@ -34,7 +35,7 @@
 
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
-		GdxTest test = new GroupCullingTest();
+		GdxTest test = new PixmapTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
Patch:
@@ -251,7 +251,7 @@ public void write (Json json, NinePatch ninePatch, Class valueType) {
 				TextureRegion[] patches = ninePatch.getPatches();
 				if (patches[0] == null && patches[1] == null && patches[2] == null && patches[3] == null && patches[4] != null
 					&& patches[5] == null && patches[6] == null && patches[7] == null && patches[8] == null)
-					json.writeValue(patches[4]);
+					json.writeValue(new TextureRegion[] {patches[4]});
 				else
 					json.writeValue(ninePatch.getPatches());
 			}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/TableLayout.java
Patch:
@@ -133,7 +133,7 @@ public void drawDebug (SpriteBatch batch) {
 		Actor parent = table.parent;
 		float x = table.x, y = 0;
 		while (parent != null) {
-			if (parent instanceof Group) {
+			if (parent instanceof Group && ((Group)parent).transform) {
 				x += parent.x;
 				y = parent.y + parent.height - y;
 			}

File: gdx/src/com/badlogic/gdx/graphics/glutils/ImmediateModeRenderer20.java
Patch:
@@ -84,7 +84,7 @@ private VertexAttribute[] buildVertexAttributes (boolean hasNormals, boolean has
 		return array;
 	}
 
-	public String createVertexShader (boolean hasNormals, boolean hasColors, int numTexCoords) {
+	private String createVertexShader (boolean hasNormals, boolean hasColors, int numTexCoords) {
 		String shader = "attribute vec4 " + ShaderProgram.POSITION_ATTRIBUTE + ";\n"
 			+ (hasNormals ? "attribute vec3 " + ShaderProgram.NORMAL_ATTRIBUTE + ";\n" : "")
 			+ (hasColors ? "attribute vec4 " + ShaderProgram.COLOR_ATTRIBUTE + ";\n" : "");

File: gdx/src/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -165,7 +165,7 @@ public void destroyBody (Body body) {
 			this.fixtures.remove(body.getFixtureList().get(i).addr).setUserData(null);
 		}
 		for (int i = 0; i < body.getJointList().size(); i++)
-			this.joints.remove(body.getJointList().get(i).joint.addr);
+			destroyJoint(body.getJointList().get(i).joint);
 		jniDestroyBody(addr, body.addr);
 		freeBodies.free(body);
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/FlickScrollPane.java
Patch:
@@ -115,9 +115,6 @@ public boolean longPress (int x, int y) {
 	boolean tap (int x, int y) {
 		focus(null, 0);
 		if (!super.touchDown(x, y, 0)) return false;
-		Actor actor = focusedActor[0];
-		toLocalCoordinates(actor, point);
-		actor.touchUp(point.x, point.y, 0);
 		return true;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/NinePatch.java
Patch:
@@ -54,8 +54,8 @@ public NinePatch (TextureRegion region, int left, int right, int top, int bottom
 	public NinePatch (TextureRegion region) {
 		this.patches = new TextureRegion[] {
 			//
-			region, null, null, //
 			null, null, null, //
+			null, region, null, //
 			null, null, null //
 		};
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Image.java
Patch:
@@ -73,7 +73,7 @@ public void layout () {
 			return;
 
 		float width = this.width * scaleX;
-		float height = this.width * scaleY;
+		float height = this.height * scaleY;
 
 		switch (scaling) {
 		case fill: {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -84,7 +84,7 @@ public void create () {
 		final Button imgToggleButton = new Button(new Image(image), skin.getStyle("toggle", ButtonStyle.class));
 		final CheckBox checkBox = new CheckBox("Check me", skin.getStyle(CheckBoxStyle.class), "checkbox");
 		final Slider slider = new Slider(0, 10, 1, skin.getStyle(SliderStyle.class), "slider");
-		final TextField textfield = new TextField("", skin.getStyle(TextFieldStyle.class), "textfield");
+		final TextField textfield = new TextField("", "Click here!", skin.getStyle(TextFieldStyle.class), "textfield");
 		final ComboBox combobox = new ComboBox(new String[] {"Android", "Windows", "Linux", "OSX"}, ui,
 			skin.getStyle(ComboBoxStyle.class), "combo");
 		final Image imageActor = new Image(image2);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -212,8 +212,8 @@ public void touchUp (float x, float y, int pointer) {
 			actor.toLocalCoordinates(point);
 			actor.touchUp(point.x, point.y, pointer);
 		}
-		// If the focused actor hasn't changed and hasn't already lost focus, remove its focus.
-		if (focusedActor[pointer] == actor && actor != null) actor.parent.focus(null, pointer);
+		// If the focused actor hasn't changed, remove its focus.
+		if (focusedActor[pointer] == actor) actor.parent.focus(null, pointer);
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/TableLayout.java
Patch:
@@ -30,7 +30,6 @@
 import java.util.List;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas;
@@ -40,7 +39,8 @@
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.Group;
 import com.badlogic.gdx.scenes.scene2d.Layout;
-import com.badlogic.gdx.scenes.scene2d.actors.Image;
+import com.badlogic.gdx.scenes.scene2d.ui.Image;
+import com.badlogic.gdx.scenes.scene2d.ui.Image.Scaling;
 import com.badlogic.gdx.scenes.scene2d.ui.tablelayout.LibgdxToolkit.DebugRect;
 import com.badlogic.gdx.utils.Array;
 import com.esotericsoftware.tablelayout.BaseTableLayout;
@@ -71,7 +71,7 @@ public Actor register (Actor actor) {
 
 	/** Finds the texture region in the {@link #atlas}, creates an {@link Image} and registers it with the specified name. */
 	public Actor registerImage (String name) {
-		return register(new Image(name, atlas.findRegion(name)));
+		return register(new Image(atlas.findRegion(name), Scaling.none, name));
 	}
 
 	public Actor getWidget (String name) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ActionTest.java
Patch:
@@ -20,10 +20,11 @@
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
+import com.badlogic.gdx.graphics.g2d.TextureRegion;
 import com.badlogic.gdx.scenes.scene2d.Action;
 import com.badlogic.gdx.scenes.scene2d.OnActionCompleted;
 import com.badlogic.gdx.scenes.scene2d.Stage;
-import com.badlogic.gdx.scenes.scene2d.actors.Image;
+import com.badlogic.gdx.scenes.scene2d.ui.Image;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class ActionTest extends GdxTest implements OnActionCompleted {
@@ -40,7 +41,7 @@ public void create () {
 		stage = new Stage(480, 320, true);
 		Texture texture = new Texture(Gdx.files.internal("data/badlogic.jpg"), false);
 		texture.setFilter(TextureFilter.Linear, TextureFilter.Linear);
-		final Image img = new Image("actor", texture);
+		final Image img = new Image(new TextureRegion(texture));
 		img.width = img.height = 100;
 		img.originX = 50;
 		img.originY = 50;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GroupFadeTest.java
Patch:
@@ -19,12 +19,13 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.g2d.TextureRegion;
 import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.scenes.scene2d.actions.FadeIn;
 import com.badlogic.gdx.scenes.scene2d.actions.FadeOut;
 import com.badlogic.gdx.scenes.scene2d.actions.Forever;
 import com.badlogic.gdx.scenes.scene2d.actions.Sequence;
-import com.badlogic.gdx.scenes.scene2d.actors.Image;
+import com.badlogic.gdx.scenes.scene2d.ui.Image;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class GroupFadeTest extends GdxTest {
@@ -42,7 +43,7 @@ public void create () {
 		stage = new Stage(480, 320, true);
 
 		for (int i = 0; i < 100; i++) {
-			Image img = new Image("img" + i, texture);
+			Image img = new Image(new TextureRegion(texture));
 			img.x = (float)Math.random() * 480;
 			img.y = (float)Math.random() * 320;
 			img.color.a = (float)Math.random() * 0.5f + 0.5f;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SimpleStageCullingTest.java
Patch:
@@ -24,10 +24,11 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
+import com.badlogic.gdx.graphics.g2d.TextureRegion;
 import com.badlogic.gdx.math.Rectangle;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.Stage;
-import com.badlogic.gdx.scenes.scene2d.actors.Image;
+import com.badlogic.gdx.scenes.scene2d.ui.Image;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.tests.utils.OrthoCamController;
 
@@ -48,7 +49,7 @@ private class CullableActor extends Image {
 		boolean visible = false;
 
 		public CullableActor (String name, Texture texture, OrthographicCamera camera) {
-			super(name, texture);
+			super(new TextureRegion(texture), Scaling.none, name);
 			this.camera = camera;
 		}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StagePerformanceTest.java
Patch:
@@ -29,7 +29,7 @@
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.Group;
 import com.badlogic.gdx.scenes.scene2d.Stage;
-import com.badlogic.gdx.scenes.scene2d.actors.Image;
+import com.badlogic.gdx.scenes.scene2d.ui.Image;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class StagePerformanceTest extends GdxTest {
@@ -64,7 +64,7 @@ public void create () {
 		Random rand = new Random();
 		for (int y = 0, i = 0; y < 12; y++) {
 			for (int x = 0; x < 24; x++) {
-				Image img = new Image("img" + i, regions[rand.nextInt(8 * 8)]);
+				Image img = new Image(regions[rand.nextInt(8 * 8)]);
 				img.x = x;
 				img.y = y;
 				img.width = 1;

File: gdx/src/com/badlogic/gdx/physics/box2d/Transform.java
Patch:
@@ -18,9 +18,8 @@
 
 import com.badlogic.gdx.math.Vector2;
 
-/** Encodes a Box2D transform. We are lazy so we only store a 6 float wide array. First two floats are the position of the
- * b2Transform struct. Next two floats are the b2Transform.R.col1 x and y coordinates. Final 2 floats are the b2Transform.R.col2 x
- * and y coordinates;
+/** Encodes a Box2D transform. We are lazy so we only store a 4 float wide array. First two floats are the position of the
+ * b2Transform struct. Next two floats are the cosine and sine of the rotation angle.
  * @author mzechner */
 public class Transform {
 	public static final int POS_X = 0;

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -507,7 +507,7 @@ public synchronized void setReferenceCount(String fileName, int refCount) {
 	}
 	
 	/** @return a string containg ref count and dependency information for all assets. */
-	public synchronized String getDiagonistics () {
+	public synchronized String getDiagnostics () {
 		StringBuffer buffer = new StringBuffer();
 		for (String fileName : assetTypes.keys()) {
 			buffer.append(fileName);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AssetManagerTest.java
Patch:
@@ -95,7 +95,7 @@ public void render () {
 		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		boolean result = manager.update();
 		if (result & !diagnosed) {
-			Gdx.app.log("AssetManagerTest", "\n" + manager.getDiagonistics() + "\n" + Texture.getManagedStatus());
+			Gdx.app.log("AssetManagerTest", "\n" + manager.getDiagnostics() + "\n" + Texture.getManagedStatus());
 			diagnosed = false;
 //			invalidateTexture(manager.get("data/animation.png", Texture.class));
 //			invalidateTexture(manager.get("data/pack1.png", Texture.class));

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -23,7 +23,7 @@
 import com.badlogic.gdx.tests.Box2DTest;
 import com.badlogic.gdx.tests.Box2DTestCollection;
 import com.badlogic.gdx.tests.EdgeDetectionTest;
-import com.badlogic.gdx.tests.GestureDetectorTest;
+import com.badlogic.gdx.tests.UITest;
 import com.badlogic.gdx.tests.MD5Test;
 import com.badlogic.gdx.tests.StbTrueTypeTest;
 import com.badlogic.gdx.tests.TiledMapTest;
@@ -32,7 +32,7 @@
 
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
-		GdxTest test = new GestureDetectorTest();
+		GdxTest test = new UITest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -23,6 +23,7 @@
 import com.badlogic.gdx.tests.Box2DTest;
 import com.badlogic.gdx.tests.Box2DTestCollection;
 import com.badlogic.gdx.tests.EdgeDetectionTest;
+import com.badlogic.gdx.tests.GestureDetectorTest;
 import com.badlogic.gdx.tests.MD5Test;
 import com.badlogic.gdx.tests.StbTrueTypeTest;
 import com.badlogic.gdx.tests.TiledMapTest;
@@ -31,7 +32,7 @@
 
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
-		GdxTest test = new EdgeDetectionTest();
+		GdxTest test = new GestureDetectorTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GestureDetectorTest.java
Patch:
@@ -45,11 +45,13 @@ public boolean touchDown (int x, int y, int pointer) {
 
 		@Override
 		public boolean tap (int x, int y, int count) {
+			Gdx.app.log("GestureDetectorTest", "tap at " + x + ", " + y + ", count: " + count);
 			return false;
 		}
 
 		@Override
 		public boolean longPress (int x, int y) {
+			Gdx.app.log("GestureDetectorTest", "long press at " + x + ", " + y);
 			return false;
 		}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
Patch:
@@ -163,7 +163,7 @@ private ListStyle () {
 		public ListStyle (BitmapFont font, Color fontColorSelected, Color fontColorUnselected, NinePatch selectedPatch) {
 			this.font = font;
 			this.fontColorSelected.set(fontColorSelected);
-			this.fontColorUnselected.set(this.fontColorUnselected);
+			this.fontColorUnselected.set(fontColorUnselected);
 			this.selectedPatch = selectedPatch;
 		}
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -14,7 +14,7 @@ public class Button extends Table {
 	public ButtonStyle style;
 	public boolean isChecked;
 
-	ClickListener listener;
+	protected ClickListener listener;
 
 	public Button (Skin skin) {
 		this(skin.getStyle(ButtonStyle.class), null);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/CheckBox.java
Patch:
@@ -6,7 +6,7 @@
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
 
 public class CheckBox extends Button {
-	private Image image;
+	protected Image image;
 
 	public CheckBox (String text, CheckBoxStyle style) {
 		this(text, style, null);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Image.java
Patch:
@@ -7,9 +7,9 @@
 
 public class Image extends Widget {
 	protected TextureRegion region;
-	private NinePatch patch;
-	private final Scaling scaling;
-	private int align = Align.CENTER;
+	protected NinePatch patch;
+	protected final Scaling scaling;
+	protected int align = Align.CENTER;
 	protected float imageX, imageY, imageWidth, imageHeight;
 
 	public Image (TextureRegion region) {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -22,6 +22,7 @@
 import com.badlogic.gdx.tests.Box2DInitialOverlapTest;
 import com.badlogic.gdx.tests.Box2DTest;
 import com.badlogic.gdx.tests.Box2DTestCollection;
+import com.badlogic.gdx.tests.EdgeDetectionTest;
 import com.badlogic.gdx.tests.MD5Test;
 import com.badlogic.gdx.tests.StbTrueTypeTest;
 import com.badlogic.gdx.tests.TiledMapTest;
@@ -30,7 +31,7 @@
 
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
-		GdxTest test = new StbTrueTypeTest();
+		GdxTest test = new EdgeDetectionTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -63,7 +63,7 @@
  * 
  * <p>
  * A SpriteBatch works with OpenGL ES 1.x and 2.0. In the case of a 2.0 context it will use its own custom shader to draw all
- * provided sprites. Specifying your own shader does not work (yet).
+ * provided sprites. You can set your own custom shader via {@link #setShader(ShaderProgram)}.
  * </p>
  * 
  * <p>

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/WheelJointDef.java
Patch:
@@ -18,7 +18,7 @@ public WheelJointDef () {
 		type = JointType.WheelJoint;
 	}
 	
-	void initialize(Body bodyA, Body bodyB, Vector2 anchor, Vector2 axis) {
+	public void initialize(Body bodyA, Body bodyB, Vector2 anchor, Vector2 axis) {
 		this.bodyA = bodyA;
 		this.bodyB = bodyB;
 		localAnchorA.set(bodyA.getLocalPoint(anchor));

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -117,7 +117,6 @@ public void layout () {
 
 	@Override
 	public void draw (SpriteBatch batch, float parentAlpha) {
-		cache.setColor(color);
 		cache.setPosition(x, y - style.font.getDescent());
 		cache.draw(batch, parentAlpha);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StbTrueTypeTest.java
Patch:
@@ -31,7 +31,7 @@ public void create () {
 		System.out.println(font.getCodePointBox('e'));
 		Bitmap glyphBitmap = font.makeCodepointBitmap(scale, scale, 'e');
 		glyphBitmap.dispose();
-		int glyphIndex = font.findGlyphIndex('e');
+		int glyphIndex = font.findGlyphIndex('T');
 		glyphBitmap = font.makeGlyphBitmap(scale, scale, 0, 0, glyphIndex);
 		texture = new Texture(glyphBitmap.pixmap);
 		texture.bind();
@@ -41,11 +41,11 @@ public void create () {
 
 	@Override
 	public void render () {
-		Gdx.gl.glClearColor(1, 1, 1, 1);
+		Gdx.gl.glClearColor(0.3f, 0.3f, 0.3f, 1);
 		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		
 		batch.begin();
-		batch.setColor(1, 0, 0, 1);
+		batch.setColor(0, 0, 0, 1);
 		batch.setBlendFunction(GL10.GL_ONE, GL10.GL_ONE_MINUS_SRC_ALPHA);
 		batch.draw(texture, 100, 100);
 		batch.end();

File: gdx/src/com/badlogic/gdx/Version.java
Patch:
@@ -21,5 +21,5 @@
  * @author mzechner */
 public class Version {
 	/** the current version of libgdx in the major.minor format **/
-	public static String VERSION = "0.9.2";
+	public static String VERSION = "0.9.3";
 }

File: gdx/src/com/badlogic/gdx/graphics/g2d/stbtt/StbTrueTypeFont.java
Patch:
@@ -172,7 +172,7 @@ public Bitmap makeCodepointBitmap (float scaleX, float scaleY, int codePoint) {
 		
 		Pixmap pixmap = new Pixmap(box.x1 - box.x0, box.y1 - box.y0, Format.Alpha);
 		StbTrueType.makeCodepointBitmap(addr, pixmap.getPixels(), pixmap.getWidth(), pixmap.getHeight(), pixmap.getWidth(), scaleX, scaleY, codePoint);
-		Pixmap pixmapRGBA = new Pixmap(box.x1 - box.x0, box.y1 - box.y0, Format.RGBA8888);
+		Pixmap pixmapRGBA = new Pixmap(box.x1 - box.x0, box.y1 - box.y0, Format.RGBA4444);
 		pixmapRGBA.drawPixmap(pixmap, 0, 0, 0, 0, pixmap.getWidth(), pixmap.getHeight());
 		pixmap.dispose();
 		return new Bitmap(pixmapRGBA, box);
@@ -185,7 +185,7 @@ public Bitmap makeGlyphBitmap (float scaleX,	float scaleY, float shiftX, float s
 		
 		Pixmap pixmap = new Pixmap(box.x1 - box.x0, box.y1 - box.y0, Format.Alpha);
 		StbTrueType.makeGlyphBitmap(addr, pixmap.getPixels(), pixmap.getWidth(), pixmap.getHeight(), pixmap.getWidth(), scaleX, scaleY, shiftX, shiftY, glyph);
-		Pixmap pixmapRGBA = new Pixmap(box.x1 - box.x0, box.y1 - box.y0, Format.RGBA8888);
+		Pixmap pixmapRGBA = new Pixmap(box.x1 - box.x0, box.y1 - box.y0, Format.RGBA4444);
 		pixmapRGBA.drawPixmap(pixmap, 0, 0, 0, 0, pixmap.getWidth(), pixmap.getHeight());
 		pixmap.dispose();
 		return new Bitmap(pixmapRGBA, box);

File: gdx/src/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -47,10 +47,11 @@ public class Pixmap implements Disposable {
 	 * 
 	 * @author mzechner */
 	public enum Format {
-		Alpha, LuminanceAlpha, RGB565, RGBA4444, RGB888, RGBA8888;
+		Alpha, Intensity, LuminanceAlpha, RGB565, RGBA4444, RGB888, RGBA8888;
 
 		static int toGdx2DPixmapFormat (Format format) {
 			if (format == Alpha) return Gdx2DPixmap.GDX2D_FORMAT_ALPHA;
+			if (format == Intensity) return Gdx2DPixmap.GDX2D_FORMAT_ALPHA;
 			if (format == LuminanceAlpha) return Gdx2DPixmap.GDX2D_FORMAT_LUMINANCE_ALPHA;
 			if (format == RGB565) return Gdx2DPixmap.GDX2D_FORMAT_RGB565;
 			if (format == RGBA4444) return Gdx2DPixmap.GDX2D_FORMAT_RGBA4444;

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -23,13 +23,14 @@
 import com.badlogic.gdx.tests.Box2DTest;
 import com.badlogic.gdx.tests.Box2DTestCollection;
 import com.badlogic.gdx.tests.MD5Test;
+import com.badlogic.gdx.tests.StbTrueTypeTest;
 import com.badlogic.gdx.tests.TiledMapTest;
 import com.badlogic.gdx.tests.VorbisTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
-		GdxTest test = new Box2DTest();
+		GdxTest test = new StbTrueTypeTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/TexturePacker.java
Patch:
@@ -681,8 +681,8 @@ static public class Settings {
 		public boolean rotate = false;
 		public int minWidth = 16;
 		public int minHeight = 16;
-		public int maxWidth = 512;
-		public int maxHeight = 512;
+		public int maxWidth = 1024;
+		public int maxHeight = 1024;
 		public boolean stripWhitespace = false;
 		public boolean incremental;
 		public boolean alias = true;

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/TexturePacker.java
Patch:
@@ -683,7 +683,7 @@ static public class Settings {
 		public int minHeight = 16;
 		public int maxWidth = 512;
 		public int maxHeight = 512;
-		public boolean stripWhitespace = true;
+		public boolean stripWhitespace = false;
 		public boolean incremental;
 		public boolean alias = true;
 		public boolean edgePadding = true;

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/JavaSoundAudioDevice.java
Patch:
@@ -35,7 +35,7 @@ public JavaSoundAudioDevice (int samplingRate, boolean isMono) {
 		try {
 			AudioFormat format = new AudioFormat(samplingRate, 16, isMono ? 1 : 2, true, false);
 			line = AudioSystem.getSourceDataLine(format);
-			line.open(format, Math.min(1024, samplingRate / 10) * 2);
+			line.open(format, Math.min(2048, samplingRate / 5) * 2);
 			line.start();
 		} catch (Exception ex) {
 			throw new GdxRuntimeException("Error creating JavaSoundAudioDevice.", ex);

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/JavaSoundAudioRecorder.java
Patch:
@@ -50,7 +50,7 @@ public void read (short[] samples, int offset, int numSamples) {
 			read += line.read(buffer, read, toRead - read);
 
 		for (int i = 0, j = 0; i < numSamples * 2; i += 2, j++)
-			samples[offset + j] = (short)((buffer[i] << 8) | (buffer[i + 1] & 0xff));
+			samples[offset + j] = (short)((buffer[i + 1] << 8) | (buffer[i] & 0xff));
 	}
 
 	public void dispose () {

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -41,7 +41,7 @@ public class Json {
 	private static final boolean debug = false;
 
 	private JsonWriter writer;
-	private String typeName = "type";
+	private String typeName = "class";
 	private boolean usePrototypes = true;
 	private OutputType outputType;
 	private final ObjectMap<Class, ObjectMap<String, FieldMetadata>> typeToFields = new ObjectMap();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -54,7 +54,7 @@ public class Group extends Actor {
 	public Actor keyboardFocusedActor = null;
 	public Actor scrollFocusedActor = null;
 
-	private final Vector2 point = new Vector2();
+	protected final Vector2 point = new Vector2();
 
 	public Group () {
 		this(null);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -44,8 +44,7 @@ public Button (String text, ButtonStyle style) {
 	}
 
 	public Button (String text, ButtonStyle style, String name) {
-		super(name);
-		setStyle(style);
+		this(style, name);
 		setText(text);
 	}
 
@@ -95,7 +94,7 @@ public String getText () {
 	public void draw (SpriteBatch batch, float parentAlpha) {
 		float offsetX = 0, offsetY = 0;
 		if (isPressed) {
-			setBackground(style.down);
+			setBackground(style.down == null ? style.up : style.down);
 			offsetX = style.pressedOffsetX;
 			offsetY = style.pressedOffsetY;
 		} else {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -117,6 +117,7 @@ public void layout () {
 
 	@Override
 	public void draw (SpriteBatch batch, float parentAlpha) {
+		cache.setColor(color);
 		cache.setPosition(x, y - style.font.getDescent());
 		cache.draw(batch, parentAlpha);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/GestureDetectorTest.java
Patch:
@@ -71,6 +71,7 @@ public boolean pan (int x, int y, int deltaX, int deltaY) {
 		public boolean zoom (float originalDistance, float currentDistance) {
 			float ratio = originalDistance / currentDistance;
 			camera.zoom = initialScale * ratio;
+			System.out.println(camera.zoom);
 			return false;
 		}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/Table.java
Patch:
@@ -51,7 +51,6 @@ public class Table extends Group implements Layout {
 	boolean sizeInvalid = true;
 
 	private ClickListener listener;
-	public boolean isPressed;
 
 	NinePatch backgroundPatch;
 	private TextureRegion backgroundRegion;
@@ -60,6 +59,8 @@ public class Table extends Group implements Layout {
 	private final Rectangle tableBounds = new Rectangle();
 	private final Rectangle scissors = new Rectangle();
 
+	public boolean isPressed;
+
 	public Table () {
 		this(new TableLayout(), null);
 	}
@@ -181,6 +182,7 @@ public void setClickListener (ClickListener listener) {
 	public boolean touchDown (float x, float y, int pointer) {
 		if (super.touchDown(x, y, pointer)) return true;
 		if (pointer != 0) return false;
+		if (listener == null) return false;
 		isPressed = true;
 		return true;
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/SimpleTileAtlas.java
Patch:
@@ -48,6 +48,7 @@ public SimpleTileAtlas (TiledMap map, FileHandle inputDir) {
 			}
 			Texture texture = new Texture(pixmap);
 			pixmap.dispose();
+			textures.add(texture);
 
 			int idx = 0;
 			TextureRegion[][] regions = split(texture, originalWidth, originalHeight, map.tileWidth, map.tileHeight, set.spacing,

File: gdx/src/com/badlogic/gdx/math/Rectangle.java
Patch:
@@ -101,8 +101,8 @@ public boolean contains (Rectangle rectangle) {
 		float ymin = rectangle.y;
 		float ymax = ymin + rectangle.height;
 
-		return ((xmin > x && xmin < x + width) || (xmax > x && xmax < x + width))
-			&& ((ymin > y && ymin < y + height) || (ymax > y && ymax < y + height));
+		return ((xmin > x && xmin < x + width) && (xmax > x && xmax < x + width))
+			&& ((ymin > y && ymin < y + height) && (ymax > y && ymax < y + height));
 	}
 
 	/** @param rectangle the other {@link Rectangle}

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -683,7 +683,7 @@ public int computeVisibleGlyphs (CharSequence str, int start, int end, float ava
 				if (g != null) {
 					if (lastGlyph != null) width += lastGlyph.getKerning(ch);
 					lastGlyph = g;
-					if (width + g.width + g.xoffset > availableWidth) break;
+					if (width + g.xadvance > availableWidth) break;
 					width += g.xadvance;
 				}
 			}
@@ -695,7 +695,7 @@ public int computeVisibleGlyphs (CharSequence str, int start, int end, float ava
 				if (g != null) {
 					if (lastGlyph != null) width += lastGlyph.getKerning(ch) * scaleX;
 					lastGlyph = g;
-					if (width + (g.width + g.xoffset) * scaleX > availableWidth) break;
+					if (width + g.xadvance * scaleX > availableWidth) break;
 					width += g.xadvance * scaleX;
 				}
 			}

File: gdx/src/com/badlogic/gdx/graphics/g2d/NinePatch.java
Patch:
@@ -123,7 +123,7 @@ public float getBottomHeight () {
 	}
 
 	public float getTotalHeight () {
-		return getTopHeight() + getBottomHeight() + patches[MIDDLE_LEFT].getRegionHeight();
+		return getTopHeight() + getBottomHeight() + patches[MIDDLE_CENTER].getRegionHeight();
 	}
 
 	public float getTotalWidth () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/FlickScrollPane.java
Patch:
@@ -53,10 +53,10 @@ public class FlickScrollPane extends Group implements Layout {
 	public boolean clamp;
 
 	public FlickScrollPane (Actor widget, Stage stage) {
-		this(null, widget, stage, 0, 0);
+		this(widget, stage, 0, 0, null);
 	}
 
-	public FlickScrollPane (String name, Actor widget, Stage stage, int prefWidth, int prefHeight) {
+	public FlickScrollPane (Actor widget, Stage stage, int prefWidth, int prefHeight, String name) {
 		super(name);
 		this.prefWidth = this.width = prefWidth;
 		this.prefHeight = this.height = prefHeight;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -107,14 +107,14 @@ public class ScrollPane extends Group implements Layout {
 	Vector2 lastPoint = new Vector2();
 
 	public ScrollPane (Actor widget, Stage stage, Skin skin) {
-		this(null, widget, stage, skin.getStyle(ScrollPaneStyle.class), 0, 0);
+		this(widget, stage, skin.getStyle(ScrollPaneStyle.class), 0, 0, null);
 	}
 
 	public ScrollPane (Actor widget, Stage stage, ScrollPaneStyle style) {
-		this(null, widget, stage, style, 0, 0);
+		this(widget, stage, style, 0, 0, null);
 	}
 
-	public ScrollPane (String name, Actor widget, Stage stage, ScrollPaneStyle style, int prefWidth, int prefHeight) {
+	public ScrollPane (Actor widget, Stage stage, ScrollPaneStyle style, int prefWidth, int prefHeight, String name) {
 		super(name);
 		this.style = style;
 		this.prefWidth = this.width = prefWidth;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Widget.java
Patch:
@@ -46,10 +46,10 @@ public Widget () {
 	}
 
 	/** Creates a new widget with the preferred width and height
-	 * @param name the name
 	 * @param prefWidth the preferred width
-	 * @param prefHeight the preferred height */
-	public Widget (String name, float prefWidth, float prefHeight) {
+	 * @param prefHeight the preferred height 
+	 * @param name the name*/
+	public Widget (float prefWidth, float prefHeight, String name) {
 		super(name);
 		this.prefWidth = prefWidth;
 		this.prefHeight = prefHeight;

File: gdx/src/com/badlogic/gdx/utils/Json.java
Patch:
@@ -536,11 +536,11 @@ public void readFields (Object object, Object jsonData) {
 		if (fields == null) fields = cacheFields(type);
 		for (Entry<String, Object> entry : jsonMap.entries()) {
 			FieldMetadata metadata = fields.get(entry.key);
-			Field field = metadata.field;
 			if (ignoreUnknownFields) {
 				if (debug) System.out.println("Ignoring unknown field: " + entry.key + " (" + type.getName() + ")");
-			} else if (field == null)
+			} else if (metadata == null)
 				throw new SerializationException("Unable to find field: " + entry.key + " (" + type.getName() + ")");
+			Field field = metadata.field;
 			if (entry.value == null) continue;
 			try {
 				field.set(object, readValue(field.getType(), metadata.elementType, entry.value));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -47,6 +47,7 @@ public class GdxTests {
 		GestureDetectorTest.class, LabelTest.class,
 		BitmapFontTest.class,
 		BlitTest.class,
+		TableTest.class,
 		BobTest.class,
 		Box2DInitialOverlapTest.class,
 		Box2DTest.class,

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -113,8 +113,8 @@ public void setViewport (float width, float height, boolean stretch) {
 		}
 
 		this.stretch = stretch;
-		centerX = width / 2;
-		centerY = height / 2;
+		centerX = this.width / 2;
+		centerY = this.height / 2;
 
 		camera.position.set(centerX, centerY, 0);
 		camera.viewportWidth = this.width;

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1TextureData.java
Patch:
@@ -65,9 +65,9 @@ public void prepare () {
 		if (file == null && data == null) throw new GdxRuntimeException("Can only load once from ETC1Data");
 		if(file != null) {
 			data = new ETC1Data(file);
-			width = data.width;
-			height = data.height;
 		}
+		width = data.width;
+		height = data.height;
 		isPrepared = true;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -142,7 +142,6 @@ public void touchUp (float x, float y, int pointer) {
 
 	@Override
 	public void touchDragged (float x, float y, int pointer) {
-
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Stack.java
Patch:
@@ -51,8 +51,8 @@ public void layout () {
 		needsLayout = false;
 		for (int i = 0, n = children.size(); i < n; i++) {
 			Actor actor = children.get(i);
-			actor.x = x;
-			actor.y = y;
+			actor.x = 0;
+			actor.y = 0;
 			actor.width = width;
 			actor.height = height;
 			if (actor instanceof Layout) {

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -89,6 +89,7 @@ public Array (T[] array) {
 	 *           memory copy. */
 	public Array (boolean ordered, T[] array) {
 		this(ordered, array.length, (Class)array.getClass().getComponentType());
+		size = array.length;
 		System.arraycopy(array, 0, items, 0, size);
 	}
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -540,7 +540,7 @@ public void setTitle (String title) {
 	}
 
 	@Override
-	public void setIcon (Pixmap pixmap) {
+	public void setIcon (Pixmap[] pixmap) {
 
 	}
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglGraphics.java
Patch:
@@ -188,7 +188,7 @@ public void setTitle (String title) {
 	}
 
 	@Override
-	public void setIcon (Pixmap pixmap) {
+	public void setIcon (Pixmap[] pixmap) {
 
 	}
 

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -22,13 +22,14 @@
 import com.badlogic.gdx.tests.Box2DInitialOverlapTest;
 import com.badlogic.gdx.tests.Box2DTest;
 import com.badlogic.gdx.tests.Box2DTestCollection;
+import com.badlogic.gdx.tests.MD5Test;
 import com.badlogic.gdx.tests.TiledMapTest;
 import com.badlogic.gdx.tests.VorbisTest;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
-		GdxTest test = new AssetManagerTest();
+		GdxTest test = new MD5Test();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		config.vSyncEnabled = true;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MD5Test.java
Patch:
@@ -43,7 +43,7 @@ public class MD5Test extends GdxTest implements InputProcessor {
 	@Override
 	public void create () {
 		Gdx.app.log("MD5 Test", "created");
-		model = MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(), false);
+		model = MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(), true);
 		anim = MD5Loader.loadAnimation(Gdx.files.internal("data/walk1.md5anim").read());
 		skeleton = new MD5Joints();
 		skeleton.joints = new float[anim.frames[0].joints.length];

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TiledLoader.java
Patch:
@@ -115,6 +115,9 @@ protected void attribute (String name, String value) {
 						if (currLayerWidth != 0 && currLayerHeight != 0) {
 							currLayer.tiles = new int[currLayerHeight][currLayerWidth];
 						}
+						if ("name".equals(name)) {
+							currLayer.name = value;
+						}
 						return;
 					}
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/ImmediateModeRenderer.java
Patch:
@@ -34,4 +34,6 @@ public interface ImmediateModeRenderer {
 	public int getNumVertices ();
 
 	public int getMaxVertices ();
+	
+	public void dispose();
 }
\ No newline at end of file

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -90,7 +90,9 @@ public Thread newThread (Runnable r) {
 	public synchronized <T> T get (String fileName, Class<T> type) {
 		ObjectMap<String, RefCountedContainer> assetsByType = assets.get(type);
 		if (assetsByType == null) throw new GdxRuntimeException("Asset '" + fileName + "' not loaded");
-		T asset = assetsByType.get(fileName).getObject(type);
+		RefCountedContainer assetContainer = assetsByType.get(fileName);
+		if (assetContainer == null) throw new GdxRuntimeException("Asset '" + fileName + "' not loaded");
+		T asset = assetContainer.getObject(type);
 		if (asset == null) throw new GdxRuntimeException("Asset '" + fileName + "' not loaded");
 		return asset;
 	}

File: gdx/src/com/badlogic/gdx/assets/loaders/resolvers/ResolutionFileResolver.java
Patch:
@@ -62,7 +62,8 @@ public FileHandle resolve (String fileName) {
 			}
 		}
 		
-		FileHandle handle = baseResolver.resolve(fileName + bestDesc.suffix);
+		FileHandle originalHandle = new FileHandle(fileName);
+		FileHandle handle = baseResolver.resolve(originalHandle.parent() + "/" + bestDesc.suffix + "/" + originalHandle.name());
 		if(!handle.exists()) handle = baseResolver.resolve(fileName);
 		return handle;
 	}

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -437,7 +437,7 @@ public synchronized void clear () {
 		loadQueue.clear();
 		while (!update());
 
-		HashMap<String, Integer> dependencyCount = new HashMap<String, Integer>();
+		HashMap<String, Integer> dependencyCount = new HashMap<String, Integer>(); // FIXME use ObjectIntMap once its ready.
 		while(assetTypes.size > 0) {
 			// for each asset, figure out how often it was referenced
 			dependencyCount.clear();

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
 
-import com.badlogic.gdx.assets.AssetLoaderParameters.LoadedCallback;
 import com.badlogic.gdx.assets.loaders.AssetLoader;
 import com.badlogic.gdx.assets.loaders.BitmapFontLoader;
 import com.badlogic.gdx.assets.loaders.MusicLoader;
@@ -31,14 +30,15 @@
 import com.badlogic.gdx.assets.loaders.SoundLoader;
 import com.badlogic.gdx.assets.loaders.TextureAtlasLoader;
 import com.badlogic.gdx.assets.loaders.TextureLoader;
-import com.badlogic.gdx.assets.loaders.TextureLoader.TextureParameter;
+import com.badlogic.gdx.assets.loaders.TileMapRendererLoader;
 import com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver;
 import com.badlogic.gdx.audio.Music;
 import com.badlogic.gdx.audio.Sound;
 import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas;
+import com.badlogic.gdx.graphics.g2d.tiled.TileMapRenderer;
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;
@@ -72,6 +72,7 @@ public AssetManager () {
 		setLoader(TextureAtlas.class, new TextureAtlasLoader(new InternalFileHandleResolver()));
 		setLoader(Texture.class, new TextureLoader(new InternalFileHandleResolver()));
 		setLoader(Skin.class, new SkinLoader(new InternalFileHandleResolver()));
+		setLoader(TileMapRenderer.class, new TileMapRendererLoader(new InternalFileHandleResolver()));
 		threadPool = Executors.newFixedThreadPool(1, new ThreadFactory() {
 			@Override
 			public Thread newThread (Runnable r) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Widget.java
Patch:
@@ -38,7 +38,7 @@
 public abstract class Widget extends Actor implements Layout {
 	public float prefWidth;
 	public float prefHeight;
-	protected boolean invalidated = false;
+	protected boolean invalidated = true;
 
 	/** Creates a new widget without a name or preferred size. */
 	public Widget () {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -52,6 +52,7 @@ public class GdxTests {
 		Box2DTest.class,
 		Box2DTestCollection.class,
 		BufferUtilsTest.class,
+		ImageTest.class,
 		CompassTest.class,
 		ComplexActionTest.class,
 		CullTest.class,

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -455,9 +455,6 @@ public AtlasRegion (AtlasRegion region) {
 			originalWidth = region.originalWidth;
 			originalHeight = region.originalHeight;
 			rotate = region.rotate;
-
-			setRegionWidth(packedWidth);
-			setRegionHeight(packedHeight);
 		}
 
 		/** Flips the region, adjusting the offset so the image appears to be flipped as if no whitespace has been removed for

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/TexturePacker.java
Patch:
@@ -685,7 +685,7 @@ static public class Settings {
 		public int maxHeight = 512;
 		public boolean stripWhitespace = true;
 		public boolean incremental;
-		public boolean alias;
+		public boolean alias = true;
 		public boolean edgePadding = true;
 
 		HashMap<String, Long> crcs = new HashMap();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
Patch:
@@ -250,7 +250,7 @@ public void render () {
 		// not needed as the opengl matrices are already set
 		// by the spritebatch which in turn uses the camera matrices :)
 		camera.apply(Gdx.gl10);
-		debugRenderer.render(world);
+		debugRenderer.render(world, camera.combined);
 
 		// finally we render all contact points
 		gl.glPointSize(4);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/KinematicBodyTest.java
Patch:
@@ -65,6 +65,6 @@ public void render () {
 		world.step(Math.min(0.032f, Gdx.graphics.getDeltaTime()), 3, 4);
 		cam.update();
 		cam.apply(Gdx.gl10);
-		renderer.render(world);
+		renderer.render(world, cam.combined);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/Box2DTest.java
Patch:
@@ -92,7 +92,7 @@ public void render () {
 		camera.apply(gl);
 
 		// render the world using the debug renderer
-		renderer.render(world);
+		renderer.render(world, camera.combined);
 		float renderTime = (System.nanoTime() - startTime) / 1000000000.0f;
 
 		batch.begin();

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -105,6 +105,8 @@ private View createGLSurfaceView (Activity activity, boolean useGL2, ResolutionS
 			view.setRenderer(this);
 			return view;
 		} else {
+			config.useGL20 = false;
+			configChooser = getEglConfigChooser();
 			if (Integer.parseInt(android.os.Build.VERSION.SDK) <= 4) {
 				GLSurfaceViewCupcake view = new GLSurfaceViewCupcake(activity, resolutionStrategy);
 				if (configChooser != null)

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/headers/HeaderFixer.java
Patch:
@@ -29,7 +29,7 @@ static class HeaderFileProcessor extends FileProcessor {
 		final String header;
 
 		public HeaderFileProcessor () {
-			header = new FileHandle("data/licence-header.txt").readString();
+			header = new FileHandle("assets/licence-header.txt").readString();
 			addInputSuffix(".java");
 			setFlattenOutput(false);
 			setRecursive(true);

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -23,7 +23,7 @@
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
-		config.useGL20 = false;
+		config.useGL20 = true;
 		config.vSyncEnabled = true;
 		new LwjglApplication(new ShapeRendererTest(), config);
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -191,6 +191,7 @@ public BitmapFontData (FileHandle fontFile, boolean flip) {
 					capGlyph = getGlyph(capChars[i]);
 					if (capGlyph != null) break;
 				}
+				if (xGlyph == null) xGlyph = getFirstGlyph();
 				capHeight = capGlyph.height;
 
 				ascent = baseLine - capHeight;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
Patch:
@@ -198,11 +198,12 @@ public void setSelectedIndex (int index) {
 		selected = index;
 	}
 
-	/** @return the text of the curently selected entry */
+	/** @return the text of the currently selected entry or null if the list is empty*/
 	public String getSelection () {
+		if(entries.length == 0) return null;
 		return entries[selected];
 	}
-
+	
 	/** @param index sets the selected item */
 	public void setSelection (int index) {
 		if (index < 0 || index >= entries.length) throw new GdxRuntimeException("Index must be > 0 and < #entries");

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -252,7 +252,7 @@ public void draw (SpriteBatch batch, float parentAlpha) {
 			blink();
 			if (cursorOn) {
 				cursorPatch.draw(batch, x + background.getLeftWidth() + glyphPositions.get(cursor) + renderOffset - 1, y + textY
-					- textBounds.height - font.getDescent() / 2, cursorPatch.getTotalWidth(), textBounds.height);
+					- textBounds.height - font.getDescent(), cursorPatch.getTotalWidth(), textBounds.height + font.getDescent() / 2);
 			}
 		}
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -285,7 +285,7 @@ public Actor hit (float x, float y) {
 		return null;
 	}
 
-	/** Adds an {@link Actor} to this Group. The order Actors are added is reversed for hit testing and rendering.
+	/** Adds an {@link Actor} to this Group. The order Actors are added is reversed for hit testing.
 	 * @param actor the Actor */
 	public void addActor (Actor actor) {
 		children.add(actor);

File: gdx/src/com/badlogic/gdx/assets/AssetLoadingTask.java
Patch:
@@ -69,7 +69,7 @@ public Void call () throws Exception {
 
 	/** Updates the loading of the asset. In case the asset is loaded with an {@link AsynchronousAssetLoader}, the loaders
 	 * {@link AsynchronousAssetLoader#loadAsync(AssetManager, String, Object)} method is first called on a worker thread. Once this
-	 * method returns, the rest of the asset is loaded on the rendering thread via {@link AsynchronousAssetLoader#loadSync()}.
+	 * method returns, the rest of the asset is loaded on the rendering thread via {@link AsynchronousAssetLoader#loadSync(AssetManager, String, Object)}.
 	 * @return true in case the asset was fully loaded, false otherwise
 	 * @throws GdxRuntimeException */
 	public boolean update () {
@@ -123,7 +123,7 @@ private void handleAsyncLoader () {
 					} catch (Exception e) {
 						throw new GdxRuntimeException("Couldn't load asset '" + assetDesc.fileName + "'", e);
 					}
-					asset = asyncLoader.loadSync();
+					asset = asyncLoader.loadSync(manager, assetDesc.fileName, assetDesc.params);
 				}
 			}
 		}

File: gdx/src/com/badlogic/gdx/assets/loaders/AssetLoader.java
Patch:
@@ -16,10 +16,11 @@
 package com.badlogic.gdx.assets.loaders;
 
 import com.badlogic.gdx.assets.AssetDescriptor;
+import com.badlogic.gdx.assets.AssetLoaderParameters;
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.utils.Array;
 
-public abstract class AssetLoader<T, P> {
+public abstract class AssetLoader<T, P extends AssetLoaderParameters<T>> {
 	private FileHandleResolver resolver;
 
 	public AssetLoader (FileHandleResolver resolver) {

File: gdx/src/com/badlogic/gdx/assets/loaders/SynchronousAssetLoader.java
Patch:
@@ -15,9 +15,10 @@
  ******************************************************************************/
 package com.badlogic.gdx.assets.loaders;
 
+import com.badlogic.gdx.assets.AssetLoaderParameters;
 import com.badlogic.gdx.assets.AssetManager;
 
-public abstract class SynchronousAssetLoader<T, P> extends AssetLoader<T, P> {
+public abstract class SynchronousAssetLoader<T, P extends AssetLoaderParameters<T>> extends AssetLoader<T, P> {
 	public SynchronousAssetLoader (FileHandleResolver resolver) {
 		super(resolver);
 	}

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -27,7 +27,7 @@
 import com.badlogic.gdx.assets.AssetManager;
 import com.badlogic.gdx.assets.ReferenceCountedAsset;
 import com.badlogic.gdx.assets.loaders.AssetLoader;
-import com.badlogic.gdx.assets.loaders.TextureParameter;
+import com.badlogic.gdx.assets.loaders.TextureLoader.TextureParameter;
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.graphics.Pixmap.Blending;
 import com.badlogic.gdx.graphics.Pixmap.Format;

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -246,6 +246,7 @@ private void load (TextureAtlasData data) {
 			atlasRegion.originalHeight = region.originalHeight;
 			atlasRegion.originalWidth = region.originalWidth;
 			atlasRegion.rotate = region.rotate;
+			if (region.flip) atlasRegion.flip(false, true);
 			regions.add(atlasRegion);
 		}
 	}

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
-import com.badlogic.gdx.tests.BlitTest;
 import com.badlogic.gdx.tests.ETC1Test;
 
 public class LwjglDebugStarter {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglTestStarter.java
Patch:
@@ -33,7 +33,6 @@
 import javax.swing.JScrollPane;
 import javax.swing.ListSelectionModel;
 import javax.swing.UIManager;
-import javax.swing.UnsupportedLookAndFeelException;
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ETC1Test.java
Patch:
@@ -25,7 +25,6 @@
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.glutils.ETC1;
 import com.badlogic.gdx.graphics.glutils.ETC1.ETC1Data;
-import com.badlogic.gdx.graphics.glutils.ETC1TextureData;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.tests.utils.OrthoCamController;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MipMapTest.java
Patch:
@@ -32,8 +32,8 @@
 import com.badlogic.gdx.scenes.scene2d.ui.CheckBox;
 import com.badlogic.gdx.scenes.scene2d.ui.CheckBox.CheckBoxStyle;
 import com.badlogic.gdx.scenes.scene2d.ui.ComboBox;
-import com.badlogic.gdx.scenes.scene2d.ui.Label;
 import com.badlogic.gdx.scenes.scene2d.ui.ComboBox.ComboBoxStyle;
+import com.badlogic.gdx.scenes.scene2d.ui.Label;
 import com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle;
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.scenes.scene2d.ui.tablelayout.Table;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureAtlasTest.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.badlogic.gdx.tests;
 
-import java.util.List;
-
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.g2d.Animation;

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -103,7 +103,8 @@ public synchronized void remove (String fileName) {
 			return;
 		}
 		
-		// check if it's currently processed and cancel if necessary
+		// check if it's currently processed (and the first element in the stack, thus not a dependency)
+		// and cancel if necessary
 		if(tasks.size() > 0) {
 			AssetLoadingTask currAsset = tasks.firstElement();
 			if(currAsset.assetDesc.fileName.equals(fileName)) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -581,7 +581,7 @@ public TextBounds getMultiLineBounds (CharSequence str) {
 			numLines++;
 		}
 		textBounds.width = maxWidth;
-		textBounds.height = data.capHeight - data.descent + (numLines - 1) * data.lineHeight;
+		textBounds.height = data.capHeight + (numLines - 1) * data.lineHeight;
 		return textBounds;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java
Patch:
@@ -490,7 +490,7 @@ public DecalMaterial getMaterial () {
 	 */
 	public void lookAt(Vector3 position, Vector3 up) {
 		dir.set(position).sub(this.position).nor();
-		setRotation(dir, Vector3.Y);
+		setRotation(dir, up);
 	}
 
 	// meaning of the floats in the vertices array

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java
Patch:
@@ -476,8 +476,8 @@ public void setBlending (int srcBlendFactor, int dstBlendFactor) {
 		material.srcBlendFactor = srcBlendFactor;
 		material.dstBlendFactor = dstBlendFactor;
 	}
-
-	protected DecalMaterial getMaterial () {
+	
+	public DecalMaterial getMaterial () {
 		return material;
 	}
 	

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java
Patch:
@@ -266,7 +266,7 @@ public float getWidth () {
 	 * 
 	 * @param height Height in world units */
 	public void setHeight (float height) {
-		this.dimensions.y += height;
+		this.dimensions.y = height;
 		updated = false;
 	}
 

File: gdx/src/com/badlogic/gdx/assets/ReferenceCountedAsset.java
Patch:
@@ -19,4 +19,6 @@ public interface ReferenceCountedAsset {
 	public void incRefCount ();
 
 	public int getRefCount ();
+
+	public void setRefCount (int refCount);
 }
\ No newline at end of file

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -24,6 +24,7 @@ public class JoglDebugStarter {
 	public static void main (String[] argv) {
 		JoglApplicationConfiguration config = new JoglApplicationConfiguration();
 		config.useGL20 = true;
-		new JoglApplication(new com.badlogic.gdx.tests.ETC1Test(), config);
+		config.vSyncEnabled = false;
+		new JoglApplication(new com.badlogic.gdx.tests.AssetManagerTest(), config);
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
Patch:
@@ -199,7 +199,7 @@ public String getSelection () {
 	public void setSelection(int index) {
 		if(index < 0 || index >= entries.length) throw new GdxRuntimeException("Index must be > 0 and < #entries");
 		selected = index;
-		invalidateHierarchy();
+		invalidateHierarchy(); 
 	}
 
 	/** Sets the entries of this list. Invalidates all parents.

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AssetManagerTest.java
Patch:
@@ -51,6 +51,7 @@ public void create () {
 		manager = new AssetManager();
 		manager.setLoader(Texture.class, new TextureLoader(resolver));
 		manager.setErrorListener(this);
+		manager.preload("data/animation.png", Texture.class);
 		manager.preload("data/pack1.png", Texture.class);
 		manager.preload("data/pack", TextureAtlas.class);
 		manager.preload("data/verdana39.png", Texture.class);
@@ -76,7 +77,7 @@ public void render () {
 
 		batch.begin();
 		if (manager.isLoaded("data/animation.png")) batch.draw(manager.get("data/animation.png", Texture.class), 100, 100);
-		if (manager.isLoaded("data/badlogic.jpg")) batch.draw(manager.get("data/badlogic.jpg", Texture.class), 200, 100);
+		if (manager.isLoaded("data/verdana39.png")) batch.draw(manager.get("data/verdana39.png", Texture.class), 300, 100);
 		if (manager.isLoaded("data/pack")) batch.draw(manager.get("data/pack", TextureAtlas.class).findRegion("particle-star"), 164, 100);
 		if (manager.isLoaded("data/verdana39.fnt")) manager.get("data/verdana39.fnt", BitmapFont.class).draw(batch, "This is a test", 100, 200);
 		font.draw(batch, "loaded: " + manager.getProgress(), 0, 30);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -108,7 +108,6 @@ public LwjglApplication (ApplicationListener listener, boolean useGL2, Canvas ca
 
 	private void initialize () {
 		mainLoopThread = new Thread("LWJGL Application") {
-			@SuppressWarnings("synthetic-access")
 			public void run () {
 				graphics.setVSync(graphics.config.vSyncEnabled);
 				LwjglApplication.this.mainLoop();
@@ -117,7 +116,7 @@ public void run () {
 		mainLoopThread.start();
 	}
 
-	private void mainLoop () {
+	void mainLoop () {
 		try {
 			graphics.setupDisplay();
 		} catch (LWJGLException e) {
@@ -187,7 +186,7 @@ public Files getFiles () {
 	}
 
 	@Override
-	public Graphics getGraphics () {
+	public LwjglGraphics getGraphics () {
 		return graphics;
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -80,6 +80,7 @@ public Dimension getMinimumSize () {
 		canvas.setIgnoreRepaint(true);
 
 		graphics = new LwjglGraphics(canvas, useGL2);
+		graphics.setVSync(true);
 		audio = new OpenALAudio();
 		files = new LwjglFiles();
 		input = new LwjglInput();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/LibgdxToolkit.java
Patch:
@@ -41,6 +41,7 @@
 import com.badlogic.gdx.scenes.scene2d.actors.Label;
 import com.badlogic.gdx.scenes.scene2d.ui.Stack;
 import com.badlogic.gdx.utils.Array;
+import com.esotericsoftware.tablelayout.Toolkit;
 
 /** @author Nathan Sweet */
 public class LibgdxToolkit extends Toolkit<Actor, Table, TableLayout> {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/Table.java
Patch:
@@ -34,6 +34,7 @@
 import com.badlogic.gdx.scenes.scene2d.Group;
 import com.badlogic.gdx.scenes.scene2d.Layout;
 import com.badlogic.gdx.scenes.scene2d.Stage;
+import com.esotericsoftware.tablelayout.Cell;
 
 /** @author Nathan Sweet */
 public class Table extends Group implements Layout {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/TableLayout.java
Patch:
@@ -43,6 +43,8 @@
 import com.badlogic.gdx.scenes.scene2d.actors.Image;
 import com.badlogic.gdx.scenes.scene2d.ui.tablelayout.LibgdxToolkit.DebugRect;
 import com.badlogic.gdx.utils.Array;
+import com.esotericsoftware.tablelayout.BaseTableLayout;
+import com.esotericsoftware.tablelayout.Cell;
 
 /** @author Nathan Sweet */
 public class TableLayout extends BaseTableLayout<Actor, Table, TableLayout, LibgdxToolkit> {
@@ -86,8 +88,8 @@ public void layout () {
 		if (!needsLayout) return;
 		needsLayout = false;
 
-		setLayoutSize(0, 0, (int)table.width, (int)table.height);
 		Table table = getTable();
+		setLayoutSize(0, 0, (int)table.width, (int)table.height);
 
 		super.layout();
 

File: gdx/src/com/badlogic/gdx/utils/FloatArray.java
Patch:
@@ -30,12 +30,12 @@ public class FloatArray {
 
 	/** Creates an ordered array with a capacity of 16. */
 	public FloatArray () {
-		this(false, 16);
+		this(true, 16);
 	}
 
 	/** Creates an ordered array with the specified capacity. */
 	public FloatArray (int capacity) {
-		this(false, capacity);
+		this(true, capacity);
 	}
 
 	/** @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a

File: gdx/src/com/badlogic/gdx/utils/IntArray.java
Patch:
@@ -30,12 +30,12 @@ public class IntArray {
 
 	/** Creates an ordered array with a capacity of 16. */
 	public IntArray () {
-		this(false, 16);
+		this(true, 16);
 	}
 
 	/** Creates an ordered array with the specified capacity. */
 	public IntArray (int capacity) {
-		this(false, capacity);
+		this(true, capacity);
 	}
 
 	/** @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a

File: gdx/src/com/badlogic/gdx/utils/JsonWriter.java
Patch:
@@ -111,7 +111,7 @@ public JsonWriter set (String name, Object value) throws IOException {
 			writer.write(String.valueOf(value));
 		} else {
 			writer.write("\":\"");
-			writer.write(value.toString());
+			writer.write(value.toString().replace("\\", "\\\\"));
 			writer.write("\"");
 		}
 		return this;

File: gdx/src/com/badlogic/gdx/utils/LongArray.java
Patch:
@@ -30,12 +30,12 @@ public class LongArray {
 
 	/** Creates an ordered array with a capacity of 16. */
 	public LongArray () {
-		this(false, 16);
+		this(true, 16);
 	}
 
 	/** Creates an ordered array with the specified capacity. */
 	public LongArray (int capacity) {
-		this(false, capacity);
+		this(true, capacity);
 	}
 
 	/** @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -29,6 +29,7 @@
 package com.badlogic.gdx.tests.utils;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import com.badlogic.gdx.tests.*;
@@ -95,6 +96,7 @@ public static String[] getNames () {
 		List<String> names = new ArrayList<String>();
 		for (Class clazz : tests)
 			names.add(clazz.getSimpleName());
+		Collections.sort(names);
 		return names.toArray(new String[names.size()]);
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/CullTest.java
Patch:
@@ -24,11 +24,11 @@
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.OrthographicCamera;
-import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g3d.loaders.obj.ObjLoader;
 import com.badlogic.gdx.math.Vector3;
+import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class CullTest extends GdxTest implements ApplicationListener {
 

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -24,6 +24,6 @@ public class JoglDebugStarter {
 	public static void main (String[] argv) {
 		JoglApplicationConfiguration config = new JoglApplicationConfiguration();
 		config.useGL20 = true;
-		new JoglApplication(new com.badlogic.gdx.tests.ProjectiveTextureTest(), config);
+		new JoglApplication(new com.badlogic.gdx.tests.ETC1Test(), config);
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,13 +18,14 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
-import com.badlogic.gdx.tests.AssetManagerTest;
+import com.badlogic.gdx.tests.BlitTest;
+import com.badlogic.gdx.tests.ETC1Test;
 
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = true;
 		config.vSyncEnabled = true;
-		new LwjglApplication(new AssetManagerTest(), config);
+		new LwjglApplication(new ETC1Test(), config);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -46,6 +46,7 @@ public class GdxTests {
 		BitmapFontAlignmentTest.class,
 		BitmapFontFlipTest.class,
 		BitmapFontTest.class,
+		BlitTest.class,
 		BobTest.class,
 		Box2DInitialOverlapTest.class,
 		Box2DTest.class,

File: tests/gdx-tests/src/com/badlogic/gdx/tests/CullTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.badlogic.gdx.graphics.g3d.loaders.obj.ObjLoader;
 import com.badlogic.gdx.math.Vector3;
 
-public class CullTest implements ApplicationListener {
+public class CullTest extends GdxTest implements ApplicationListener {
 
    public boolean needsGL20() {
       return false;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -194,7 +194,7 @@ private void initiateGLInstances () {
 		major = Integer.parseInt("" + version.charAt(0));
 		minor = Integer.parseInt("" + version.charAt(2));
 
-		if (config.useGL20 && major >= 2) {
+		if (config.useGL20 && (major >= 2 || version.contains("2.1"))) { // special case for MESA, wtf...
 			// FIXME add check whether gl 2.0 is supported
 			gl20 = new LwjglGL20();
 			gl = gl20;

File: gdx/src/com/badlogic/gdx/assets/AssetManager.java
Patch:
@@ -204,7 +204,7 @@ public synchronized boolean update () {
 				if (preloadQueue.size == 0) return true;
 				nextTask();
 				// second check if we tried to load an asset that's already loaded and the queue became empty.
-				if (preloadQueue.size == 0) return true;
+				if (preloadQueue.size == 0 || tasks.size() == 0) return true;
 			}
 			return updateTask() && preloadQueue.size == 0;
 		} catch (Throwable t) {

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -126,7 +126,7 @@ public Texture (FileHandle file, boolean useMipMaps) {
 	}
 
 	public Texture (FileHandle file, Format format, boolean useMipMaps) {
-		if (file.name().endsWith(".etc1")) {
+		if (file.name().contains(".etc1")) {
 			create(new ETC1TextureData(file, useMipMaps));
 		} else {
 			create(new FileTextureData(file, null, format, useMipMaps));

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ComboBox.java
Patch:
@@ -108,7 +108,7 @@ public void layout () {
 		final NinePatch background = style.background;
 		final BitmapFont font = style.font;
 
-		prefHeight = background.getTotalHeight();
+		prefHeight = Math.max(font.getLineHeight() - font.getDescent(), background.getTotalHeight());
 		float max = 0;
 		for (int i = 0; i < entries.length; i++) {
 			max = Math.max(font.getBounds(entries[i]).width, max);

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglApplicationConfiguration.java
Patch:
@@ -37,7 +37,7 @@ public class JoglApplicationConfiguration {
 	/** fullscreen **/
 	public boolean fullscreen = false;
 	/** whether to enable vsync, can be changed at runtime via {@link Graphics#setVSync(boolean)} **/
-	public boolean vSyncEnabled = false;
+	public boolean vSyncEnabled = true;
 	/** title of application **/
 	public String title = "Jogl Application";
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -38,7 +38,7 @@ public class LwjglApplicationConfiguration {
 	/** whether to use CPU synching or not. If this is false display vsynching is used, which might not work in windowed mode **/
 	public boolean useCPUSynch = true;
 	/** whether to enable vsync, can be changed at runtime via {@link Graphics#setVSync(boolean)} **/
-	public boolean vSyncEnabled = false;
+	public boolean vSyncEnabled = true;
 	/** title of application **/
 	public String title = "Lwjgl Application";
 	/** whether to call System.exit() on tear-down. Needed for Webstarts on some versions of Mac OS X it seems **/

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/FileProcessor.java
Patch:
@@ -66,6 +66,7 @@ public FileProcessor setRecursive (boolean recursive) {
 
 	/** @return the processed files added with {@link #addProcessedFile(InputFile)}. */
 	public ArrayList<InputFile> process (File inputFile, File outputRoot) throws Exception {
+		if (!inputFile.exists()) throw new IllegalArgumentException("Input file does not exist: " + inputFile.getAbsolutePath());
 		if (inputFile.isFile())
 			return process(new File[] {inputFile}, outputRoot);
 		else
@@ -87,7 +88,7 @@ public ArrayList<InputFile> process (File[] files, File outputRoot) throws Excep
 			File inputDir = entry.getKey();
 			File newOutputDir = flattenOutput ? outputRoot : dirInputFiles.get(0).outputDir;
 			String outputName = inputDir.getName();
-			if (outputSuffix != null) outputName += outputSuffix;
+			if (outputSuffix != null) outputName = outputName.replaceAll("(.*)\\..*", "$1") + outputSuffix;
 
 			InputFile inputFile = new InputFile();
 			inputFile.inputFile = entry.getKey();

File: gdx/src/com/badlogic/gdx/utils/ObjectMap.java
Patch:
@@ -434,9 +434,9 @@ private int hash3 (long h) {
 	}
 
 	public String toString () {
-		if (size == 0) return "[]";
+		if (size == 0) return "{}";
 		StringBuilder buffer = new StringBuilder(32);
-		buffer.append('[');
+		buffer.append('{');
 		K[] keyTable = this.keyTable;
 		V[] valueTable = this.valueTable;
 		int i = keyTable.length;
@@ -456,7 +456,7 @@ public String toString () {
 			buffer.append('=');
 			buffer.append(valueTable[i]);
 		}
-		buffer.append(']');
+		buffer.append('}');
 		return buffer.toString();
 	}
 

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -22,6 +22,7 @@
 import com.badlogic.gdx.tests.FlickScrollPaneTest;
 import com.badlogic.gdx.tests.IsoCamTest;
 import com.badlogic.gdx.tests.ParallaxTest;
+import com.badlogic.gdx.tests.SimpleDecalTest;
 import com.badlogic.gdx.tests.TextureAtlasTest;
 
 public class LwjglDebugStarter {
@@ -30,6 +31,6 @@ public static void main (String[] argv) {
 
 //		config.useGL20 = true;
 		config.vSyncEnabled = true;
-		new LwjglApplication(new FlickScrollPaneTest(), config);
+		new LwjglApplication(new SimpleDecalTest(), config);
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -29,6 +29,7 @@ public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 
 //		config.useGL20 = true;
-		new LwjglApplication(new TextureAtlasTest(), config);
+		config.vSyncEnabled = true;
+		new LwjglApplication(new FlickScrollPaneTest(), config);
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -22,12 +22,13 @@
 import com.badlogic.gdx.tests.FlickScrollPaneTest;
 import com.badlogic.gdx.tests.IsoCamTest;
 import com.badlogic.gdx.tests.ParallaxTest;
+import com.badlogic.gdx.tests.TextureAtlasTest;
 
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 
 //		config.useGL20 = true;
-		new LwjglApplication(new CullTest(), config);
+		new LwjglApplication(new TextureAtlasTest(), config);
 	}
 }

File: extensions/gdx-tools/src/com/badlogic/gdx/tools/etc1/ETC1Compressor.java
Patch:
@@ -47,7 +47,7 @@ protected void processFile (InputFile inputFile) throws Exception {
 				pixmap.dispose();
 				pixmap = tmp;
 			}
-			ETC1.encodeImage(pixmap).write(new FileHandle(inputFile.outputFile));
+			ETC1.encodeImagePKM(pixmap).write(new FileHandle(inputFile.outputFile));
 			pixmap.dispose();
 		}
 

File: extensions/tiled-preprocessor/src/com/badlogic/gdx/tiledmappacker/TiledMapPacker.java
Patch:
@@ -48,6 +48,8 @@
 import com.badlogic.gdx.graphics.g2d.tiled.TiledLoader;
 import com.badlogic.gdx.graphics.g2d.tiled.TiledMap;
 import com.badlogic.gdx.math.Vector2;
+import com.badlogic.gdx.tools.imagepacker.TexturePacker;
+import com.badlogic.gdx.tools.imagepacker.TexturePacker.Settings;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /** Packs a Tiled Map, adding some properties to improve the speed of the {@link TileMapRenderer}. Also runs the texture packer on

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ETC1Test.java
Patch:
@@ -60,12 +60,12 @@ public void create () {
 		pixmap.dispose();
 		pixmap = ETC1.decodeImage(encodedImage, Format.RGB565);
 
-// ETC1.encodeImagePKM(new Pixmap(Gdx.files.internal("data/environment.jpg"))).write(Gdx.files.absolute("test.pkm"));
+		// ETC1.encodeImagePKM(new Pixmap(Gdx.files.internal("data/environment.jpg"))).write(Gdx.files.absolute("test.pkm"));
 
 		encodedImage.dispose();
 
 		img1 = new Texture(pixmap);
-		img2 = new Texture(new ETC1TextureData(Gdx.files.internal("data/test.pkm")));
+		img2 = new Texture("data/test.etc1");
 		batch = new SpriteBatch();
 		pixmap.dispose();
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -475,7 +475,7 @@ public AtlasSprite (AtlasRegion region) {
 			this.region = new AtlasRegion(region);
 			setRegion(region);
 			if (region.rotate) rotate90(true);
-			setOrigin(region.originalWidth / 2, region.originalHeight / 2);
+			setOrigin(region.originalWidth / 2f, region.originalHeight / 2f);
 			super.setBounds(region.offsetX, region.offsetY, Math.abs(region.getRegionWidth()), Math.abs(region.getRegionHeight()));
 			setColor(1, 1, 1, 1);
 		}

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -18,13 +18,14 @@
 
 import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
+import com.badlogic.gdx.tests.FlickScrollPaneTest;
 import com.badlogic.gdx.tests.IsoCamTest;
 
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 
 		config.useGL20 = true;
-		new LwjglApplication(new IsoCamTest(), config);
+		new LwjglApplication(new FlickScrollPaneTest(), config);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FlickScrollPaneTest.java
Patch:
@@ -66,7 +66,8 @@ public void render () {
 
 	public void resize (int width, int height) {
 		stage.setViewport(width, height, false);
-		container.getTableLayout().size(width, height);
+		container.width = width;
+		container.height = height;
 	}
 
 	public void pause () {

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1.java
Patch:
@@ -102,7 +102,6 @@ public void write (FileHandle file) {
 				write.writeInt(compressedData.capacity());
 				while (writtenBytes != compressedData.capacity()) {
 					int bytesToWrite = Math.min(compressedData.remaining(), buffer.length);
-					System.out.println("writting " + bytesToWrite);
 					compressedData.get(buffer, 0, bytesToWrite);
 					write.write(buffer, 0, bytesToWrite);
 					writtenBytes += bytesToWrite;

File: gdx/src/com/badlogic/gdx/graphics/g2d/Gdx2DPixmap.java
Patch:
@@ -102,7 +102,7 @@ public Gdx2DPixmap(ByteBuffer buffer, long[] nativeData) {
 		if(pixelPtr == null)
 			throw new IllegalArgumentException("couldn't load pixmap");
 		
-		System.arraycopy(nativeData, 0, this.nativeData, 0, 4);
+		System.arraycopy(nativeData, 0, Gdx2DPixmap.nativeData, 0, 4);
 		this.basePtr = nativeData[0];
 		this.width = (int)nativeData[1];
 		this.height = (int)nativeData[2];

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1.java
Patch:
@@ -96,7 +96,7 @@ public boolean hasPKMHeader() {
 		
 		/**
 		 * Writes the ETC1Data with a PKM header to the given file.
-		 * @param handle the file.
+		 * @param file the file.
 		 */
 		public void write(FileHandle file) {
 			DataOutputStream write = null;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -137,6 +137,7 @@ public LabelStyle(BitmapFont font, Color fontColor) {
 	
 	public void setText(String text) {
 		this.label = text;
+		layout();
 		invalidateHierarchy();
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/BaseTableLayout.java
Patch:
@@ -504,14 +504,14 @@ public L left () {
 
 	/** Sets the alignment of the table within the widget being laid out to {@link #BOTTOM}. */
 	public L bottom () {
-		align = BOTTOM;
+		align |= BOTTOM;
 		align &= ~TOP;
 		return (L)this;
 	}
 
 	/** Sets the alignment of the table within the widget being laid out to {@link #RIGHT}. */
 	public L right () {
-		align = RIGHT;
+		align |= RIGHT;
 		align &= ~LEFT;
 		return (L)this;
 	}

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -38,6 +38,6 @@ public static void main (String[] argv) {
 		config.width = 800;
 		config.height = 480;
 		config.useGL20 = true;
-		new LwjglApplication(new ETC1Test(), config);
+		new LwjglApplication(new AssetManagerTest(), config);
 	}
 }

File: gdx/src/com/badlogic/gdx/assets/loaders/BitmapFontLoader.java
Patch:
@@ -15,7 +15,6 @@ public class BitmapFontLoader implements AsynchronousAssetLoader<BitmapFont, Bit
 	BitmapFontData data;
 	AssetManager manager;
 	String fileName;
-	BitmapFontParameter parameter;
 
 	@Override
 	public Array<AssetDescriptor> getDependencies (String fileName, BitmapFontParameter parameter) {
@@ -31,7 +30,6 @@ public Array<AssetDescriptor> getDependencies (String fileName, BitmapFontParame
 	public void loadAsync (AssetManager manager, String fileName, BitmapFontParameter parameter) {
 		this.manager = manager;
 		this.fileName = fileName;
-		this.parameter = parameter;
 	}
 
 	@Override

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonModel.java
Patch:
@@ -18,6 +18,7 @@ public class SkeletonModel implements AnimatedModel {
 	public SkeletonModel(Skeleton skeleton, SkeletonSubMesh[] subMeshes) {
 		this.skeleton = skeleton;
 		this.subMeshes = subMeshes;
+		setMaterial(new Material("default"));
 	}
 	
 	public void setBindPose() {

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -158,7 +158,7 @@ private void uploadImageData(Pixmap pixmap) {
 		
 		Gdx.gl.glBindTexture(GL10.GL_TEXTURE_2D, glHandle);								
 		if(data.useMipMaps()) {						
-			MipMapGenerator.generateMipMap(pixmap, this, disposePixmap);			
+			MipMapGenerator.generateMipMap(pixmap, pixmap.getWidth(), pixmap.getHeight(), disposePixmap);			
 		} else {
 			Gdx.gl.glTexImage2D(GL10.GL_TEXTURE_2D, 0, pixmap.getGLInternalFormat(), pixmap.getWidth(), pixmap.getHeight(), 0, pixmap.getGLFormat(), pixmap.getGLType(), pixmap.getPixels());
 			if(disposePixmap) pixmap.dispose();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ETC1Test.java
Patch:
@@ -44,6 +44,8 @@ public boolean needsGL20() {
 		pixmap.dispose();
 		pixmap = ETC1.decodeImage(encodedImage, Format.RGB565);
 		
+//		ETC1.encodeImagePKM(new Pixmap(Gdx.files.internal("data/environment.jpg"))).write(Gdx.files.absolute("test.pkm"));
+		
 		encodedImage.dispose();
 		
 		img1 = new Texture(pixmap);

File: gdx/src/com/badlogic/gdx/graphics/glutils/ETC1.java
Patch:
@@ -61,7 +61,7 @@ public final static class ETC1Data implements Disposable {
 		}
 		
 		public ETC1Data(FileHandle pkmFile) {
-			compressedData = BufferUtils.newByteBuffer((int)pkmFile.length());
+			compressedData = BufferUtils.newDisposableByteBuffer((int)pkmFile.length());
 			
 			byte[] buffer = new byte[1024*10];
 			InputStream in = null;

File: gdx/src/com/badlogic/gdx/assets/AssetLoadingTask.java
Patch:
@@ -59,7 +59,7 @@ public Void call () throws Exception {
 	
 	/**
 	 * Updates the loading of the asset. In case the asset is loaded with an
-	 * {@link AsynchronousAssetLoader}, the loaders {@link AsynchronousAssetLoader#loadAsync(String, Object)}
+	 * {@link AsynchronousAssetLoader}, the loaders {@link AsynchronousAssetLoader#loadAsync(AssetManager, String, Object)}
 	 * method is first called on a worker thread. Once this method returns, the rest 
 	 * of the asset is loaded on the rendering thread via {@link AsynchronousAssetLoader#loadSync()}. 
 	 * @return true in case the asset was fully loaded, false otherwise

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -156,7 +156,7 @@ private void uploadImageData(Pixmap pixmap) {
 	
 	/**
 	 * Used internally to reload after context loss.
-	 * Creates a new GL handle then calls {@link #load(NewTextureData)}.
+	 * Creates a new GL handle then calls {@link #load(TextureData)}.
 	 */
 	private void reload() {
 		if(!data.isManaged()) throw new GdxRuntimeException("Tried to reload unmanaged Texture");

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/DecalBatch.java
Patch:
@@ -147,7 +147,6 @@ protected void render() {
 	/**
 	 * Renders a group of vertices to the buffer, flushing them to GL when done/full
 	 *
-	 * @param material Material of that group to set
 	 * @param decals   Decals to render
 	 */
 	private void render(ShaderProgram shader, Array<Decal> decals) {

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/SimpleOrthoGroupStrategy.java
Patch:
@@ -80,7 +80,7 @@ public void afterGroups() {
 		Gdx.gl10.glDisable(GL10.GL_TEXTURE_2D);
 	}
 
-	private class Comparator implements java.util.Comparator<Decal> {
+	class Comparator implements java.util.Comparator<Decal> {
 		@Override
 		public int compare(Decal a, Decal b) {
 			return a.getZ() - b.getZ() < 0 ? -1 : 1;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Stack.java
Patch:
@@ -25,12 +25,13 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
 
-package com.badlogic.gdx.scenes.scene2d.ui.tablelayout;
+package com.badlogic.gdx.scenes.scene2d.ui;
 
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.Group;
 import com.badlogic.gdx.scenes.scene2d.Layout;
+import com.badlogic.gdx.scenes.scene2d.ui.tablelayout.LibgdxToolkit;
 
 /** @author Nathan Sweet */
 public class Stack extends Group implements Layout {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/LibgdxToolkit.java
Patch:
@@ -39,6 +39,7 @@
 import com.badlogic.gdx.scenes.scene2d.actors.Button;
 import com.badlogic.gdx.scenes.scene2d.actors.Image;
 import com.badlogic.gdx.scenes.scene2d.actors.Label;
+import com.badlogic.gdx.scenes.scene2d.ui.Stack;
 import com.badlogic.gdx.utils.Array;
 
 /** @author Nathan Sweet */

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java
Patch:
@@ -106,10 +106,8 @@ public Window(String name, Stage stage, String title, int prefWidth, int prefHei
 		height = prefHeight;
 		this.style = style;
 
-		TableLayout layout = getTableLayout();
-		layout.updatesTransform = true;
-		
 		final NinePatch background = style.background;
+		TableLayout layout = getTableLayout();
 		layout.padBottom(Integer.toString((int)(background.getBottomHeight()) + 1));
 		layout.padTop(Integer.toString((int)(background.getTopHeight()) + 1));
 		layout.padLeft(Integer.toString((int)(background.getLeftWidth()) + 1));

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglAnimator.java
Patch:
@@ -292,7 +292,7 @@ public void run () {
 							} else {
 								// Compute union with already dirty region
 								// Note we could compute multiple non-overlapping
-								// regions: might want to do that in the future
+								// regions: might want to do that in the loadFuture
 								// (prob. need more complex algorithm -- dynamic
 								// programming?)
 								dirty.add(new Rectangle(x, y, visible.width, visible.height));

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -34,7 +34,7 @@
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
-//		config.useGL20 = true;
-		new LwjglApplication(new AssetManagerTest(), config);
+		config.useGL20 = true;
+		new LwjglApplication(new ShadowMappingTest(), config);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ShadowMappingTest.java
Patch:
@@ -111,8 +111,8 @@ private void setupUI() {
 		table.add(label2);
 		table.add(shaderCombo);
 		table.add(fpsLabel);
-		table.getTable().y = ui.top() - 100;		
-		ui.addActor(table.getTable());
+		table.y = ui.top() - 100;		
+		ui.addActor(table);
 		
 		cameraCombo.setSelectionListener(new ComboBox.SelectionListener() {			
 			@Override public void selected (ComboBox comboBox, int selectionIndex, String selection) {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -59,6 +59,7 @@ public LwjglApplication (ApplicationListener listener, String title, int width,
 		config.width = width;
 		config.height = height;
 		config.useGL20 = useGL2;
+		config.vSyncEnabled = true;
 		graphics = new LwjglGraphics(config);
 		audio = new OpenALAudio();
 		files = new LwjglFiles();

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/MapRenderer.java
Patch:
@@ -9,15 +9,15 @@
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.SpriteCache;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.Vector3;
 
 public class MapRenderer {	
 	Map map;
 	OrthographicCamera cam;	
 	SpriteCache cache;
 	SpriteBatch batch = new SpriteBatch(10000);
-	ImmediateModeRenderer renderer = new ImmediateModeRenderer(2000*2);
+	ImmediateModeRenderer10 renderer = new ImmediateModeRenderer10(2000*2);
 	int[][] blocks;
 	TextureRegion tile;	
 	Animation bobLeft;

File: demos/returntomarchfeld/rtm/src/com/badlogic/rtm/LevelRenderer.java
Patch:
@@ -33,7 +33,7 @@
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 public class LevelRenderer implements ApplicationListener {
@@ -43,7 +43,7 @@ public class LevelRenderer implements ApplicationListener {
 	Mesh wallMesh;
 	SpriteBatch batch;
 	BitmapFont font;
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	float angle = -90;
 
 	@Override public void create () {

File: demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/GLFieldRenderer.java
Patch:
@@ -2,15 +2,15 @@
 package com.dozingcatsoftware.bouncy;
 
 import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 
 public class GLFieldRenderer implements IFieldRenderer {
 	static final int CIRCLE_VERTICES = 10;
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	float[] circleVerts = new float[2 * CIRCLE_VERTICES];
 
 	public GLFieldRenderer () {
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 
 		float angle = 0;
 		float angleInc = 360.0f / CIRCLE_VERTICES;

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/KeyframedModelViewer.java
Patch:
@@ -17,7 +17,7 @@
 import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedAnimation;
 import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedModel;
 import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedSubMesh;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.collision.BoundingBox;
 
 public class KeyframedModelViewer implements ApplicationListener {
@@ -26,7 +26,7 @@ public class KeyframedModelViewer implements ApplicationListener {
 	Texture texture = null;
 	boolean hasNormals = false;
 	BoundingBox bounds = new BoundingBox();
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	float angle = 0;
 	String fileName;
 	String textureFileName;
@@ -58,7 +58,7 @@ public KeyframedModelViewer(String fileName, String textureFileName) {
 		cam.near = 1f;
 		cam.far = 1000;
 		
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 		batch = new SpriteBatch();
 		font = new BitmapFont();
 	}

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/SkeletonModelViewer.java
Patch:
@@ -15,7 +15,7 @@
 import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonAnimation;
 import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonModel;
 import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonSubMesh;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.collision.BoundingBox;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
@@ -25,7 +25,7 @@ public class SkeletonModelViewer implements ApplicationListener {
 	Texture texture = null;
 	boolean hasNormals = false;
 	BoundingBox bounds = new BoundingBox();
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	float angle = 0;
 	String fileName;
 	String textureFileName;
@@ -60,7 +60,7 @@ public SkeletonModelViewer(String fileName, String textureFileName) {
 		cam.near = 0.1f;
 		cam.far = 1000;
 		
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 		batch = new SpriteBatch();
 		font = new BitmapFont();
 	}

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/StillModelViewer.java
Patch:
@@ -16,7 +16,7 @@
 import com.badlogic.gdx.graphics.g3d.loaders.g3d.chunks.G3dExporter;
 import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
 import com.badlogic.gdx.graphics.g3d.model.still.StillSubMesh;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.collision.BoundingBox;
 
 public class StillModelViewer implements ApplicationListener {
@@ -26,7 +26,7 @@ public class StillModelViewer implements ApplicationListener {
 	Texture[] textures = null;
 	boolean hasNormals = false;
 	BoundingBox bounds = new BoundingBox();
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	float angle = 0;
 	String fileName;
 	String[] textureFileNames;
@@ -73,7 +73,7 @@ public StillModelViewer(String fileName, String ... textureFileNames) {
 		cam.near = 0.1f;
 		cam.far = 1000;
 					
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 		batch = new SpriteBatch();
 		font = new BitmapFont();		
 	}

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/Viewer.java
Patch:
@@ -16,7 +16,7 @@
 import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
 import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonKeyframe;
 import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonModel;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.BoundingBox;
 
@@ -29,7 +29,7 @@ public static void main(String[] argv) {
 	static final int NUM_INSTANCES = 1;	
 	SkeletonModel model;	
 	PerspectiveCamera cam;
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	float angle = 0;
 	SpriteBatch batch;
 	BitmapFont font;
@@ -53,7 +53,7 @@ public static void main(String[] argv) {
 		cam.near = 0.1f;
 		cam.far = 1000;
 		
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 		batch = new SpriteBatch();
 		font = new BitmapFont();
 				

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/WolfensteinTest.java
Patch:
@@ -12,7 +12,7 @@
 import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
 import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.Intersector;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.Ray;
@@ -24,7 +24,7 @@ public static void main(String[] argv) {
 
 	PerspectiveCamera camera;
 	StillModel model;
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	Texture texture;
 	float[] triangles;
 	short[] indices;
@@ -45,7 +45,7 @@ public void create() {
 		camera = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());	
 		camera.position.y = 1;
 		
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 	}
 	
 	Vector3 movement = new Vector3();

File: gdx/src/com/badlogic/gdx/math/Frustum.java
Patch:
@@ -18,7 +18,7 @@
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.Plane.PlaneSide;
 import com.badlogic.gdx.math.collision.BoundingBox;
 

File: gdx/src/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java
Patch:
@@ -21,7 +21,7 @@
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
 import com.badlogic.gdx.physics.box2d.JointDef.JointType;
@@ -31,7 +31,7 @@
 public class Box2DDebugRenderer {
 
 	/** the immediate mode renderer to output our debug drawings **/
-	protected ImmediateModeRenderer renderer;
+	protected ImmediateModeRenderer10 renderer;
 
 	/** a spritebatch and a font for text rendering **/
 	public SpriteBatch batch;
@@ -42,7 +42,7 @@ public class Box2DDebugRenderer {
 
 	public Box2DDebugRenderer () {
 		// next we setup the immediate mode renderer
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 
 		// next we create a SpriteBatch and a font
 		batch = new SpriteBatch();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/FlickScrollPane.java
Patch:
@@ -27,14 +27,15 @@
 import com.badlogic.gdx.scenes.scene2d.Layout;
 import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.scenes.scene2d.interpolators.DecelerateInterpolator;
+import com.badlogic.gdx.scenes.scene2d.ui.tablelayout.Table;
 import com.badlogic.gdx.scenes.scene2d.ui.utils.ScissorStack;
 
 /**
  * A special container that allows scrolling over its children, supporting
  * scrolling by click/dragging anywhere and flick gestures.
  * 
  * <h2>Functionality</h2> A ScrollPane can embed any {@link Actor} (and
- * {@link Widget} or {@link Container} for that matter) and provide scrolling
+ * {@link Widget} or {@link Table} for that matter) and provide scrolling
  * functionality in case the embedded Actor is bigger than the scroll pane
  * itself. The scroll pane will automatically decide whether it needs a vertical
  * and/or horizontal scroll handle based on the contained Actor's size with

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -34,7 +34,7 @@
  * A special container that allows scrolling over its children.
  * 
  * <h2>Functionality</h2>
- * A ScrollPane can embed any {@link Actor} (and {@link Widget} or {@link Container} for that matter) and provide
+ * A ScrollPane can embed any {@link Actor} (and {@link Widget} or {@link Table} for that matter) and provide
  * scrolling functionality in case the embedded Actor is bigger than the scroll pane itself. The scroll pane will
  * automatically decide whether it needs a vertical and/or horizontal scroll handle based on the contained
  * Actor's size with respect to the scroll pane's own size.</p>

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -24,14 +24,15 @@
 import com.badlogic.gdx.scenes.scene2d.Group;
 import com.badlogic.gdx.scenes.scene2d.Layout;
 import com.badlogic.gdx.scenes.scene2d.Stage;
+import com.badlogic.gdx.scenes.scene2d.ui.tablelayout.Table;
 import com.badlogic.gdx.scenes.scene2d.ui.utils.ScissorStack;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /**
  * A special container holding two children and allowing to define the space used by each.
  * 
  * <h2>Functionality</h2>
- * A SplitPane can embedd to {@link Actor} instances (or {@link Widget} or {@link Container} instances for that matter), separated
+ * A SplitPane can embedd to {@link Actor} instances (or {@link Widget} or {@link Table} instances for that matter), separated
  * by a split handle, either vertically or horizontally. Both widgets will be sized so that they take up their respective space
  * within the SplitPane. The handle can be moved via dragging to vary the size available to each widget.</p>
  * 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Widget.java
Patch:
@@ -18,12 +18,13 @@
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.Group;
 import com.badlogic.gdx.scenes.scene2d.Layout;
+import com.badlogic.gdx.scenes.scene2d.ui.tablelayout.Table;
 
 /**
  * Base class for all UI widgets. A widget implements the {@link Layout} interface which
  * has a couple of features.</p>
  * 
- * A widget has a preferred width and height which it will use if possible, e.g. if it is not in a {@link Container} ({@link Pane}, {@link Window}) or a {@link SplitPane} or
+ * A widget has a preferred width and height which it will use if possible, e.g. if it is not in a {@link Table} ({@link Pane}, {@link Window}) or a {@link SplitPane} or
  * a {@link ScrollPane}. In case it is contained in one of the aforementioned containers, the
  * preferred width and height will be used to guide the layouting mechanism employed by those containers.</p>
  * 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/ParseException.java
Patch:
@@ -24,8 +24,10 @@
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
+
 package com.badlogic.gdx.scenes.scene2d.ui.tablelayout;
 
+/** @author Nathan Sweet */
 public class ParseException extends RuntimeException {
 	public int line, column;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AudioRecorderTest.java
Patch:
@@ -19,19 +19,19 @@
 import com.badlogic.gdx.audio.AudioDevice;
 import com.badlogic.gdx.audio.AudioRecorder;
 import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class AudioRecorderTest extends GdxTest {
 	short[] samples = new short[1024 * 4];
 	AudioDevice device;
 	AudioRecorder recorder;
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 
 	@Override public void create () {
 		device = Gdx.audio.newAudioDevice(44100, true);
 		recorder = Gdx.audio.newAudioRecoder(44100, true);
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 
 		Thread t = new Thread(new Runnable() {
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
Patch:
@@ -26,7 +26,7 @@
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.math.Vector3;
@@ -54,7 +54,7 @@ public class Box2DTest extends GdxTest implements InputProcessor {
 	private com.badlogic.gdx.graphics.OrthographicCamera camera;
 
 	/** the immediate mode renderer to output our debug drawings **/
-	private ImmediateModeRenderer renderer;
+	private ImmediateModeRenderer10 renderer;
 	
 	/** box2d debug renderer **/
 	private Box2DDebugRenderer debugRenderer;
@@ -91,7 +91,7 @@ public class Box2DTest extends GdxTest implements InputProcessor {
 		camera.position.set(0, 16, 0);
 
 		// next we setup the immediate mode renderer
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 		
 		// next we create the box2d debug renderer
 		debugRenderer = new Box2DDebugRenderer();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/CompassTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class CompassTest extends GdxTest {
@@ -30,12 +30,12 @@ public class CompassTest extends GdxTest {
 
 	BitmapFont font;
 	SpriteBatch batch;
-	ImmediateModeRenderer renderer;	
+	ImmediateModeRenderer10 renderer;	
 	
 	@Override public void create() {
 		font = new BitmapFont();
 		batch = new SpriteBatch();
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 	}
 	
 	@Override public void render() {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ImmediateModeRendererAlphaTest.java
Patch:
@@ -22,12 +22,12 @@
 import com.badlogic.gdx.graphics.g2d.Sprite;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class ImmediateModeRendererAlphaTest extends GdxTest {	
 
-	     ImmediateModeRenderer renderer;
+	     ImmediateModeRenderer10 renderer;
 	   
 	     Texture background;
 	     TextureRegion bgTR;
@@ -48,7 +48,7 @@ public void create() {
 	      
 	          this.batcher = new SpriteBatch();
 	      
-	           this.renderer = new ImmediateModeRenderer();
+	           this.renderer = new ImmediateModeRenderer10();
 
 	     }
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ImmediateModeRendererTest.java
Patch:
@@ -21,11 +21,11 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.Texture.TextureWrap;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class ImmediateModeRendererTest extends GdxTest {
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	Texture texture;
 
 	@Override public void dispose () {
@@ -50,7 +50,7 @@ public class ImmediateModeRendererTest extends GdxTest {
 	}
 
 	@Override public void create () {
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InverseKinematicsTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.OrthographicCamera;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.math.Vector3;
@@ -35,7 +35,7 @@ public String toString() {
 	
 	static final float GRAVITY = 0;
 	OrthographicCamera camera;
-	ImmediateModeRenderer renderer;	
+	ImmediateModeRenderer10 renderer;	
 	Bone[] bones;
 	Vector3 globalCoords = new Vector3();
 	Vector3 endPoint = new Vector3();
@@ -44,7 +44,7 @@ public String toString() {
 	@Override public void create() {
 		float aspect = Gdx.graphics.getWidth() / (float)Gdx.graphics.getHeight();
 		camera = new OrthographicCamera(15 * aspect, 15);
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 		
 		bones = new Bone[] { new Bone("bone0", 0, 0, 0),
 									new Bone("bone1", 0, 2, 2),

File: tests/gdx-tests/src/com/badlogic/gdx/tests/IsometricTileTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteCache;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.tests.utils.OrthoCamController;
 
@@ -42,15 +42,15 @@ public class IsometricTileTest extends GdxTest {
 	int[] layers = new int[LAYERS];
 	OrthographicCamera cam;
 	OrthoCamController camController;
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	long startTime = System.nanoTime();
 
 	@Override public void create () {
 		cam = new OrthographicCamera(480, 320);		
 		camController = new OrthoCamController(cam);
 		Gdx.input.setInputProcessor(camController);
 
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 		texture = new Texture(Gdx.files.internal("data/isotile.png"));
 
 		Random rand = new Random();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MultitouchTest.java
Patch:
@@ -21,11 +21,11 @@
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.OrthographicCamera;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class MultitouchTest extends GdxTest implements InputProcessor {
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	OrthographicCamera camera;
 	long startTime = System.nanoTime();
 
@@ -62,7 +62,7 @@ public class MultitouchTest extends GdxTest implements InputProcessor {
 
 	@Override public void create () {
 		Gdx.app.log("Multitouch", "multitouch supported: " + Gdx.input.isPeripheralAvailable(Peripheral.MultitouchScreen));
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 		camera = new OrthographicCamera(Gdx.graphics.getWidth(), Gdx.graphics.getHeight());		
 		camera.position.set(Gdx.graphics.getWidth() / 2.0f, Gdx.graphics.getHeight() / 2.0f, 0);
 		Gdx.input.setInputProcessor(this);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PickingTest.java
Patch:
@@ -26,7 +26,7 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g3d.loaders.obj.ObjLoader;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.Intersector;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.Ray;
@@ -46,7 +46,7 @@ public class PickingTest extends GdxTest {
 	Mesh sphere;
 	Camera cam;	
 	Vector3[] positions = new Vector3[100];
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	SpriteBatch batch;
 	Texture logo;
 	
@@ -66,7 +66,7 @@ public class PickingTest extends GdxTest {
 												rand.nextFloat() * 100 - rand.nextFloat() * 100);
 		}		
 		positions[0].set(0, 0, -10);
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 	}
 
 	Vector3 intersection = new Vector3();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/RemoteTest.java
Patch:
@@ -23,14 +23,14 @@
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.input.RemoteInput;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class RemoteTest extends GdxTest implements ApplicationListener, InputProcessor {	
 	BitmapFont font;
 	SpriteBatch batch;
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	String ips;
 	
 	@Override public void create () {
@@ -41,7 +41,7 @@ public class RemoteTest extends GdxTest implements ApplicationListener, InputPro
 		Gdx.input.setInputProcessor(this);		
 		batch = new SpriteBatch();
 		font = new BitmapFont();
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 	}
 
 	@Override public void resume () {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SplineTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.OrthographicCamera;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.CatmullRomSpline;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.math.Vector3;
@@ -35,15 +35,15 @@ public class SplineTest extends GdxTest {
 
 	final int CONTROL_POINTS = 10;
 	OrthographicCamera cam;
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	CatmullRomSpline spline;
 	Vector3[] path;
 	
 
 	@Override public void create () {
 		cam = new OrthographicCamera(Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam.position.set(Gdx.graphics.getWidth() / 2, Gdx.graphics.getHeight() / 2, 0);
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 		spline = new CatmullRomSpline();
 		float x = 0;
 		float y = Gdx.graphics.getHeight() / 2;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StageTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.Group;
@@ -38,7 +38,7 @@ public class StageTest extends GdxTest implements InputProcessor {
 	private static final int NUM_GROUPS = 5;
 	private static final int NUM_SPRITES = (int)Math.sqrt(400 / NUM_GROUPS);
 	private static final float SPACING = 5;
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	Stage stage;
 	Stage ui;
 	Texture texture;
@@ -94,7 +94,7 @@ public class StageTest extends GdxTest implements InputProcessor {
 		 ui.addActor(fps);
 
 		Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 		Gdx.input.setInputProcessor(this);
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TerrainTest.java
Patch:
@@ -26,14 +26,14 @@
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes;
-import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer;
+import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.Intersector;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.Ray;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class TerrainTest extends GdxTest {
-	ImmediateModeRenderer renderer;
+	ImmediateModeRenderer10 renderer;
 	TerrainChunk chunk;
 	Mesh mesh;
 	PerspectiveCamera camera;
@@ -42,7 +42,7 @@ public class TerrainTest extends GdxTest {
 	long lastTime = System.nanoTime();
 
 	@Override public void create () {
-		renderer = new ImmediateModeRenderer();
+		renderer = new ImmediateModeRenderer10();
 
 		chunk = new TerrainChunk(32, 32, 4);
 

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/QbobViewer.java
Patch:
@@ -50,7 +50,7 @@ public class QbobViewer implements ApplicationListener {
 		model[3] = G3dLoader.loadStillModel(Gdx.files.internal("data/qbob/test_section_04.dae.g3d"));
 		lightMaps[3] = new Texture(Gdx.files.internal("data/qbob/world_blobbie_lm_04.jpg"), Format.RGB565, true);
 		
-		diffuse = new Texture(Gdx.files.internal("data/qbob/World_blobbie_blocks.png"), Format.RGB565, true);
+		diffuse = new Texture(Gdx.files.internal("data/qbob/world_blobbie_blocks.png"), Format.RGB565, true);
 																		
 		cam = new PerspectiveCamera(60, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam.position.set(30, 10, 85f);

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/SkeletonModelViewer.java
Patch:
@@ -159,6 +159,6 @@ public static void main(String[] argv) {
 //			System.out.println("KeyframedModelViewer <filename> ?<texture-filename>");
 //			System.exit(-1);
 //		}
-		new JoglApplication(new SkeletonModelViewer("data/robot-mesh.xml", "data/r2skin.jpg"), "SkeletonModel Viewer", 800, 480, false);
+		new JoglApplication(new SkeletonModelViewer("data/robot-mesh.xml", "data/robot.jpg"), "SkeletonModel Viewer", 800, 480, false);
 	}
 }

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/Viewer.java
Patch:
@@ -40,7 +40,7 @@ public static void main(String[] argv) {
 	
 	@Override public void create () {
 		
-		Texture texture = new Texture(Gdx.files.internal("data/nskingr.jpg"));
+		Texture texture = new Texture(Gdx.files.internal("data/ninja.jpg"));
 		Material mat = new Material("mat", new TextureAttribute(texture, 0, "s_tex"));
 		model = new OgreXmlLoader().load(Gdx.files.internal("data/ninja.mesh.xml"), 
 													Gdx.files.internal("data/ninja.skeleton.xml"));		

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -234,6 +234,8 @@ private void load(TextureAtlasData data) {
 		ObjectMap<Page, Texture> pageToTexture = new ObjectMap<Page, Texture>();
 		for(Page page: data.pages) {
 			Texture texture = new Texture(page.textureFile, page.format, page.useMipMaps);
+			texture.setFilter(page.minFilter, page.magFilter);
+			texture.setWrap(page.uWrap, page.vWrap);
 			textures.add(texture);
 			pageToTexture.put(page, texture);
 		}

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -184,7 +184,7 @@ public enum ApplicationType {
 	
 	/**
 	 * Exits the application. This will cause a call to pause() and dispose()
-	 * some time in the future, it will not immediately finish your application!
+	 * some time in the loadFuture, it will not immediately finish your application!
 	 */
 	public void exit();
 }

File: gdx/src/com/badlogic/gdx/assets/loaders/AsynchronousAssetLoader.java
Patch:
@@ -1,6 +1,8 @@
 package com.badlogic.gdx.assets.loaders;
 
+import com.badlogic.gdx.assets.AssetManager;
+
 public interface AsynchronousAssetLoader<T,P> extends AssetLoader<T, P> {
-	void loadAsync(String fileName, P parameter);
+	void loadAsync(AssetManager manager, String fileName, P parameter);
 	T loadSync();
 }

File: gdx/src/com/badlogic/gdx/assets/loaders/SynchronousAssetLoader.java
Patch:
@@ -1,5 +1,7 @@
 package com.badlogic.gdx.assets.loaders;
 
+import com.badlogic.gdx.assets.AssetManager;
+
 public interface SynchronousAssetLoader<T, P> extends AssetLoader<T, P>{
-	T load(String fileName, P parameter);
+	T load(AssetManager assetManager, String fileName, P parameter);
 }

File: gdx/src/com/badlogic/gdx/graphics/g3d/keyframed/KeyframedModel.java
Patch:
@@ -35,7 +35,7 @@
 
 /**
  * An animated model with {@link KeyframeAnimation}s. Currently the animations can only be instanced from an {@link MD5Animation}.
- * Support for binary serialization may be included in future development.
+ * Support for binary serialization may be included in loadFuture development.
  *  
  * @author Dave Clayton <contact@redskyforge.com>
  *

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -175,7 +175,7 @@ public SpriteBatch (int size, int buffers) {
 
 		for (int i = 0; i < buffers; i++) {
 			this.buffers[i] = new Mesh(false, size * 4, size * 6, new VertexAttribute(Usage.Position, 2, ShaderProgram.POSITION_ATTRIBUTE),
-				new VertexAttribute(Usage.ColorPacked, 4, ShaderProgram.TEXCOORD_ATTRIBUTE), new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + "0"));
+				new VertexAttribute(Usage.ColorPacked, 4, ShaderProgram.COLOR_ATTRIBUTE), new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + "0"));
 		}
 
 		projectionMatrix.setToOrtho2D(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/GroupPlug.java
Patch:
@@ -8,6 +8,6 @@
  * modular {@link GroupStrategy GroupStrategies}.
  */
 public interface GroupPlug {
-	public void beforeGroup(ObjectMap.Values<Array<Decal>> contents);
+	public void beforeGroup(Array<Decal> contents);
 	public void afterGroup();
 }

File: gdx/src/com/badlogic/gdx/graphics/g3d/decals/PluggableGroupStrategy.java
Patch:
@@ -12,7 +12,7 @@ public abstract class PluggableGroupStrategy implements GroupStrategy {
 	private IntMap<GroupPlug> plugs = new IntMap<GroupPlug>();
 
 	@Override
-	public void beforeGroup(int group, ObjectMap.Values<Array<Decal>> contents) {
+	public void beforeGroup(int group, Array<Decal> contents) {
 		plugs.get(group).beforeGroup(contents);
 	}
 

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/renderer/GdxImage.java
Patch:
@@ -43,14 +43,15 @@ public class GdxImage implements Image, SupportsDrawRepeat {
 	private final boolean tile;
 
 	public GdxImage (GdxRenderer renderer, Texture texture, int srcX, int srcY, int srcWidth, int srcHeight, Color color,
-		boolean tile) {
+		boolean tile, float rotation) {
 		this.renderer = renderer;
 		width = Math.abs(srcWidth);
 		height = Math.abs(srcHeight);
 		this.tintColor = color == null ? Color.WHITE : color;
 		this.tile = tile;
 		sprite = new Sprite(texture, srcX, srcY, srcWidth, srcHeight);
 		sprite.flip(false, true);
+		sprite.setRotation(rotation);
 	}
 
 	public GdxImage (GdxImage image, Color tintColor) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -79,7 +79,8 @@ protected void updateTransform () {
 			transform.idt();
 		if (rotation != 0) transform.mul(scenetransform.setToRotation(rotation));
 		if (scaleX != 1 || scaleY != 1) transform.mul(scenetransform.setToScaling(scaleX, scaleY));
-		transform.trn(-originX + x, -originY + y);
+		if (originX != 0 || originY != 0) transform.mul(scenetransform.setToTranslation(-originX, -originY));
+		transform.trn(x, y);
 
 		if (parent != null) {
 			scenetransform.set(parent.scenetransform);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -77,7 +77,7 @@ public abstract class Actor {
 	public Group parent;
 	public final String name;
 	public boolean touchable = true;
-	public boolean visable = true;
+	public boolean visible = true;
 
 	public float x;
 	public float y;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -77,6 +77,7 @@ public abstract class Actor {
 	public Group parent;
 	public final String name;
 	public boolean touchable = true;
+	public boolean visable = true;
 
 	public float x;
 	public float y;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/FlickScrollPane.java
Patch:
@@ -422,7 +422,7 @@ public void act(float delta) {
 			}
 			
 			
-			Gdx.app.log("", String.format("t %f h %f v %f", relscrolltime, hScrollAmount, vScrollAmount));
+			//Gdx.app.log("", String.format("t %f h %f v %f", relscrolltime, hScrollAmount, vScrollAmount));
 
 			if(scrolledtime >= scrolltime){
 				hScrollAmount = smoothscrolldestx;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MultiTouchActorTest.java
Patch:
@@ -21,13 +21,13 @@ public LogButton (String name, Texture texture) {
 			super(name, texture);
 		}		
 		
-		@Override protected boolean touchUp (float x, float y, int pointer) {			
+		@Override public boolean touchUp (float x, float y, int pointer) {			
 			boolean result = super.touchUp(x, y, pointer);
 			if(result) Gdx.app.log("MultiTouchActorTest", "button '" + name + "', touch up, pointer " + pointer);
 			return result;
 		}
 		
-		@Override protected boolean touchDown (float x, float y, int pointer) {
+		@Override public boolean touchDown (float x, float y, int pointer) {
 			boolean result = super.touchDown(x, y, pointer);
 			if(result) Gdx.app.log("MultiTouchActorTest", "button '" + name + "', touch down, pointer " + pointer);
 			return result;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -188,8 +188,6 @@ protected void onPause() {
    	 if(wakeLock != null) wakeLock.release();
         graphics.pause();
         
-        if (audio != null) audio.pause();
-        
         input.unregisterSensorListeners();
         // erase pointer ids. this sucks donkeyballs...
         int[] realId = input.realId;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
Patch:
@@ -109,7 +109,9 @@ protected void resume () {
 				mediaPlayer.setDataSource(aHandle.path());
 				mediaPlayer.prepare();
 				AndroidMusic music = new AndroidMusic(this, mediaPlayer);
-				musics.add(music);
+				synchronized(musics) {
+					musics.add(music);
+				}
 				return music;
 			} catch (Exception ex) {
 				throw new GdxRuntimeException("Error loading audio file: " + file, ex);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -423,6 +423,7 @@ void destroy () {
 
 		if (lpause) {
 			app.listener.pause();
+			((AndroidApplication)app).audio.pause();
 			Gdx.app.log("AndroidGraphics", "paused");
 		}
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/Gdx2DPixmap.java
Patch:
@@ -67,7 +67,7 @@ public Gdx2DPixmap(byte[] encodedData, int offset, int len, int requestedFormat)
 	}
 	
 	public Gdx2DPixmap(InputStream in, int requestedFormat) throws IOException {
-		ByteArrayOutputStream bytes = new ByteArrayOutputStream();
+		ByteArrayOutputStream bytes = new ByteArrayOutputStream(1024);
 		byte[] buffer = new byte[1024];
 		int readBytes = 0;
 		

File: gdx/src/com/badlogic/gdx/math/MathUtils.java
Patch:
@@ -148,7 +148,7 @@ static public final float random (float start, float end) {
 
 	static public int nextPowerOfTwo (int value) {
 		if (value == 0) return 1;
-		if ((value & value - 1) == 0) return value;
+		value--;
 		value |= value >> 1;
 		value |= value >> 2;
 		value |= value >> 4;

File: gdx/src/com/badlogic/gdx/utils/GdxNativesLoader.java
Patch:
@@ -35,7 +35,6 @@ public class GdxNativesLoader {
 	static public File nativesDir = new File(System.getProperty("java.io.tmpdir") + "/libgdx/" + crc("gdx.dll"));
 
 	static private String crc (String nativeFile) {
-		System.out.println("loading /" + nativeFile);
 		InputStream input = GdxNativesLoader.class.getResourceAsStream("/" + nativeFile);
 		if (input == null) return Version.VERSION; // fallback
 		CRC32 crc = new CRC32();

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObjectSubData.java
Patch:
@@ -150,7 +150,7 @@ public int getNumMaxIndices () {
 	public void setIndices (short[] indices, int offset, int count) {
 		isDirty = true;
 		buffer.clear();
-		buffer.put(indices);
+		buffer.put(indices, offset, count);
 		buffer.flip();
 		byteBuffer.position(0);
 		byteBuffer.limit(count << 1);

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObject.java
Patch:
@@ -139,12 +139,12 @@ public int getNumMaxIndices () {
 	 * 
 	 * @param indices the vertex data
 	 * @param offset the offset to start copying the data from
-	 * @param count the number of floats to copy
+	 * @param count the number of shorts to copy
 	 */
 	public void setIndices (short[] indices, int offset, int count) {
 		isDirty = true;
 		buffer.clear();
-		buffer.put(indices);
+		buffer.put(indices, offset, count);
 		buffer.flip();
 		byteBuffer.position(0);
 		byteBuffer.limit(count << 1);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/Image.java
Patch:
@@ -48,7 +48,7 @@ public Image (String name, TextureRegion region) {
 	@Override protected void draw (SpriteBatch batch, float parentAlpha) {
 		if (region.getTexture() != null) {
 			batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
-			if (scaleX == 0 && scaleY == 0 && rotation == 0)
+			if (scaleX == 1 && scaleY == 1 && rotation == 0)
 				batch.draw(region, x, y, width, height);
 			else
 				batch.draw(region, x, y, originX, originY, width, height, scaleX, scaleY, rotation);

File: gdx/src/com/badlogic/gdx/physics/box2d/PolygonShape.java
Patch:
@@ -69,7 +69,7 @@ public void setAsBox (float hx, float hy) {
 	 * @param hx the half-width.
 	 * @param hy the half-height.
 	 * @param center the center of the box in local coordinates.
-	 * @param angle the rotation of the box in local coordinates.
+	 * @param angle the rotation in radians of the box in local coordinates.
 	 */
 	public void setAsBox (float hx, float hy, Vector2 center, float angle) {
 		jniSetAsBox(addr, hx, hy, center.x, center.y, angle);

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -91,7 +91,7 @@ public interface Application {
 	 * 
 	 */
 	public enum ApplicationType {
-		Android, Desktop, Applet
+		Android, Desktop, Applet, WebGL
 	}
 	
 	public static final int LOG_NONE = 0;

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -69,7 +69,7 @@ public interface Graphics {
 	 * 
 	 */
 	public enum GraphicsType {
-		AndroidGL, JoglGL, LWJGL, Angle
+		AndroidGL, JoglGL, LWJGL, Angle, WebGL
 	}
 	
 	/**

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -35,6 +35,7 @@
 import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.FloatArray;
 import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.badlogic.gdx.utils.NumberUtils;
 
 /**
  * Renders bitmap fonts. The font consists of 2 files: an image file or {@link TextureRegion} containing the glyphs and a file in
@@ -717,15 +718,15 @@ public void setColor (Color tint) {
 
 	public void setColor (float r, float g, float b, float a) {
 		int intBits = (int)(255 * a) << 24 | (int)(255 * b) << 16 | (int)(255 * g) << 8 | (int)(255 * r);
-		color = Float.intBitsToFloat((intBits & 0xfeffffff));
+		color = NumberUtils.intBitsToFloat((intBits & 0xfeffffff));
 	}
 
 	/**
 	 * Returns the color of this font. Changing the returned color will have no affect, {@link #setColor(Color)} or
 	 * {@link #setColor(float, float, float, float)} must be used.
 	 */
 	public Color getColor () {
-		int intBits = Float.floatToRawIntBits(color);
+		int intBits = NumberUtils.floatToRawIntBits(color);
 		Color color = this.tempColor;
 		color.r = (intBits & 0xff) / 255f;
 		color.g = ((intBits >>> 8) & 0xff) / 255f;

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.graphics.g2d.BitmapFont.HAlignment;
 import com.badlogic.gdx.graphics.g2d.BitmapFont.TextBounds;
 import com.badlogic.gdx.utils.Disposable;
+import com.badlogic.gdx.utils.NumberUtils;
 
 /**
  * Caches glyph geometry for a BitmapFont, providing a fast way to render static text. This saves needing to compute the location
@@ -91,7 +92,7 @@ public void setColor (Color tint) {
 
 	public void setColor (float r, float g, float b, float a) {
 		int intBits = ((int)(255 * a) << 24) | ((int)(255 * b) << 16) | ((int)(255 * g) << 8) | ((int)(255 * r));
-		float color = Float.intBitsToFloat((intBits & 0xfeffffff));
+		float color = NumberUtils.intBitsToFloat((intBits & 0xfeffffff));
 		if (color == this.color) return;
 		this.color = color;
 		float[] vertices = this.vertices;
@@ -115,7 +116,7 @@ public void draw (SpriteBatch spriteBatch, float alphaModulation) {
 
 	public Color getColor () {
 		float floatBits = color;
-		int intBits = Float.floatToRawIntBits(color);
+		int intBits = NumberUtils.floatToRawIntBits(color);
 		Color color = tmpColor;
 		color.r = (intBits & 0xff) / 255f;
 		color.g = ((intBits >>> 8) & 0xff) / 255f;

File: gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
Patch:
@@ -19,6 +19,7 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.math.Rectangle;
+import com.badlogic.gdx.utils.NumberUtils;
 
 /**
  * Holds the geometry, color, and texture information for drawing 2D sprites using {@link SpriteBatch}. A Sprite has a position
@@ -229,7 +230,7 @@ public void setColor (Color tint) {
 
 	public void setColor (float r, float g, float b, float a) {
 		int intBits = ((int)(255 * a) << 24) | ((int)(255 * b) << 16) | ((int)(255 * g) << 8) | ((int)(255 * r));
-		float color = Float.intBitsToFloat(intBits & 0xfeffffff);
+		float color = NumberUtils.intBitsToFloat(intBits & 0xfeffffff);
 		float[] vertices = this.vertices;
 		vertices[C1] = color;
 		vertices[C2] = color;
@@ -480,7 +481,7 @@ public float getScaleY () {
 	 */
 	public Color getColor () {
 		float floatBits = vertices[C1];
-		int intBits = Float.floatToRawIntBits(vertices[C1]);
+		int intBits = NumberUtils.floatToRawIntBits(vertices[C1]);
 		Color color = this.color;
 		color.r = (intBits & 0xff) / 255f;
 		color.g = ((intBits >>> 8) & 0xff) / 255f;

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TileAtlas.java
Patch:
@@ -119,7 +119,7 @@ private static FileHandle getRelativeFileHandle(FileHandle path, String relative
         FileHandle child = path;
 
         StringTokenizer tokenizer = new StringTokenizer(relativePath, "\\/");
-        while (tokenizer.hasMoreElements()) {
+        while (tokenizer.hasMoreTokens()) {
             String token = tokenizer.nextToken();
             if (token.equals("..")) {
                 child = child.parent();

File: gdx/src/com/badlogic/gdx/math/MathUtils.java
Patch:
@@ -17,6 +17,8 @@
 
 import java.util.Random;
 
+import com.badlogic.gdx.utils.NumberUtils;
+
 /**
  * Utility and fast math functions.<br>
  * <br>
@@ -164,7 +166,7 @@ static public boolean isPowerOfTwo (int value) {
 	static private final int BIG_ENOUGH_INT = 16 * 1024;
 	static private final double BIG_ENOUGH_FLOOR = BIG_ENOUGH_INT;
 	static private final double CEIL = 0.9999999;
-	static private final double BIG_ENOUGH_CEIL = Double.longBitsToDouble(Double.doubleToLongBits(BIG_ENOUGH_INT + 1) - 1);
+	static private final double BIG_ENOUGH_CEIL = NumberUtils.longBitsToDouble(NumberUtils.doubleToLongBits(BIG_ENOUGH_INT + 1) - 1);
 	static private final double BIG_ENOUGH_ROUND = BIG_ENOUGH_INT + 0.5f;
 
 	/**

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -406,6 +406,9 @@ public AtlasRegion (AtlasRegion region) {
 			originalWidth = region.originalWidth;
 			originalHeight = region.originalHeight;
 			rotate = region.rotate;
+
+			setRegionWidth(packedWidth);
+			setRegionHeight(packedHeight);
 		}
 
 		/**

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFileHandle.java
Patch:
@@ -95,7 +95,7 @@ public FileHandle[] list (String suffix) {
 				for (int i = 0, n = handles.length; i < n; i++) {
 					String path = relativePaths[i];
 					if (!path.endsWith(suffix)) continue;
-					handles[i] = new AndroidFileHandle(assets, new File(file, path), type);
+					handles[count] = new AndroidFileHandle(assets, new File(file, path), type);
 					count++;
 				}
 				if (count < relativePaths.length) {

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -188,7 +188,7 @@ public FileHandle[] list (String suffix) {
 		for (int i = 0, n = relativePaths.length; i < n; i++) {
 			String path = relativePaths[i];
 			if (!path.endsWith(suffix)) continue;
-			handles[i] = child(path);
+			handles[count] = child(path);
 			count++;
 		}
 		if (count < relativePaths.length) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/BaseTableLayout.java
Patch:
@@ -525,6 +525,7 @@ public void layout () {
 		// Distribute remaining space to any expanding columns/rows.
 		if (totalExpandWidth > 0) {
 			int extra = Math.max(0, tableLayoutWidth - tablePrefWidth);
+			tablePrefWidth += extra;
 			int used = 0, lastIndex = 0;
 			for (int i = 0; i < columns; i++) {
 				if (expandWidth[i] == 0) continue;
@@ -537,6 +538,7 @@ public void layout () {
 		}
 		if (totalExpandHeight > 0) {
 			int extra = Math.max(0, tableLayoutHeight - tablePrefHeight);
+			tablePrefHeight += extra;
 			int used = 0, lastIndex = 0;
 			for (int i = 0; i < rows; i++) {
 				if (expandHeight[i] == 0) continue;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FlickScrollPaneTest.java
Patch:
@@ -36,7 +36,7 @@ public void create () {
 		table.layout.parse("pad:10 * expand:x space:4");
 		for (int i = 0; i < 100; i++) {
 			table.row();
-			table.add(new Label(null, i + "uno", new LabelStyle(font, Color.RED)));
+			table.add(new Label(null, i + "uno", new LabelStyle(font, Color.RED))).expand(true, false).fill(true, false);
 			table.add(new Label(null, i + "dos", new LabelStyle(font, Color.RED)));
 			table.add(new Label(null, i + "tres long0 long1 long2 long3 long4 long5 long6 long7 long8 long9", new LabelStyle(font,
 				Color.RED)));

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -811,7 +811,7 @@ public float getAscent () {
 	}
 
 	/**
-	 * Returns the descent, which is the distance from the baseline to the bottom of the glyph 'g'. This number is negative.
+	 * Returns the descent, which is the distance from the bottom of the glyph 'g' to the baseline. This number is negative.
 	 */
 	public float getDescent () {
 		return descent;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Button.java
Patch:
@@ -92,9 +92,8 @@ public void layout() {
 		final BitmapFont font = style.font;
 		final NinePatch downPatch = style.down;
 		bounds.set(font.getMultiLineBounds(text));
-		bounds.height -= font.getDescent();
-		
-		prefHeight = downPatch.getBottomHeight() + downPatch.getTopHeight() + bounds.height;
+
+		prefHeight = downPatch.getBottomHeight() + downPatch.getTopHeight() + bounds.height + -font.getDescent() * 2;
 		prefWidth = downPatch.getLeftWidth() + downPatch.getRightWidth() + bounds.width;
 		invalidated = false;
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/tablelayout/TableLayout.java
Patch:
@@ -339,7 +339,7 @@ static private class DebugRect extends Rectangle {
 		final String type;
 
 		public DebugRect (String type, int x, int y, int width, int height) {
-			super(x, y, width, height - 1);
+			super(x, y, width, height);
 			this.type = type;
 		}
 	}

File: extensions/image-packer/src/com/badlogic/gdx/imagepacker/TexturePacker.java
Patch:
@@ -501,7 +501,7 @@ private void writePackEntry (Image image) throws IOException {
 			writer.write("  xy: " + left + ", " + top + "\n");
 			writer.write("  size: " + image.getWidth() + ", " + image.getHeight() + "\n");
 			writer.write("  orig: " + image.originalWidth + ", " + image.originalHeight + "\n");
-			writer.write("  offset: " + image.offsetX + ", " + image.offsetY + "\n");
+			writer.write("  offset: " + image.offsetX + ", " + (image.originalHeight - image.getHeight() - image.offsetY) + "\n");
 			writer.write("  index: " + index + "\n");
 		}
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/Image.java
Patch:
@@ -21,11 +21,10 @@
 import com.badlogic.gdx.scenes.scene2d.Actor;
 
 public class Image extends Actor {
-	public TextureRegion region;
+	public TextureRegion region = null;
 
 	public Image (String name) {
 		super(name);
-		this.region = new TextureRegion();
 	}
 
 	public Image (String name, Texture texture) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Container.java
Patch:
@@ -221,6 +221,9 @@ public CellProperties uniform(boolean x, boolean y) {
 		 */
 		public CellProperties pad(int top, int left, int bottom, int right) {
 			cell.padTop = Integer.toString(top);
+			cell.padLeft = Integer.toString(left);
+			cell.padBottom = Integer.toString(bottom);
+			cell.padRight = Integer.toString(right);
 			return this;
 		}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.awt.Canvas;
 import java.awt.Toolkit;
+import java.nio.ByteBuffer;
 
 import org.lwjgl.LWJGLException;
 import org.lwjgl.opengl.Display;
@@ -348,7 +349,8 @@ public LwjglDisplayMode (int width, int height, int refreshRate, int bitsPerPixe
 		Display.setTitle(title);
 	}
 
-	@Override public void setIcon (Pixmap pixmap) {		
+	@Override public void setIcon (Pixmap pixmap) { 
+		Display.setIcon(new ByteBuffer[] { pixmap.getPixels().duplicate() } );
 	}
 
 	@Override public BufferFormat getBufferFormat () {		

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -43,7 +43,7 @@
  * 
  * <p>
  * Actors have a z-order which is equal to the order they were inserted into this Stage. Actors inserted later will be drawn on
- * top of Actors added earlier. The same is true for touch events that will get distributed to later Actors first.
+ * top of Actors added earlier. Touch events that will get distributed to later Actors first.
  * </p>
  * 
  * <p>Actors can get focused. When your game pauses and resumes make sure to call the {@link Stage#unfocusAll()} method so 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -139,8 +139,7 @@ public AndroidInput (AndroidApplication activity, View view, AndroidApplicationC
 			touchHandler = new AndroidMultiTouchHandler();
 		else
 			touchHandler = new AndroidSingleTouchHandler();
-		hasMultitouch = touchHandler instanceof AndroidMultiTouchHandler
-			&& ((AndroidMultiTouchHandler)touchHandler).supportsMultitouch(activity);
+		hasMultitouch = touchHandler.supportsMultitouch(app);
 
 		vibrator = (Vibrator)activity.getSystemService(Context.VIBRATOR_SERVICE);
 		

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidTouchHandler.java
Patch:
@@ -15,8 +15,10 @@
  ******************************************************************************/
 package com.badlogic.gdx.backends.android;
 
+import android.content.Context;
 import android.view.MotionEvent;
 
 public interface AndroidTouchHandler {
 	public void onTouch (MotionEvent event, AndroidInput input);
+	public boolean supportsMultitouch(AndroidApplication app);
 }

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglInput.java
Patch:
@@ -498,6 +498,7 @@ protected static int translateKeyCode (int keyCode) {
 		if (keyCode == java.awt.event.KeyEvent.VK_F10) return Input.Keys.F10;
 		if (keyCode == java.awt.event.KeyEvent.VK_F11) return Input.Keys.F11;
 		if (keyCode == java.awt.event.KeyEvent.VK_F12) return Input.Keys.F12;
+		if (keyCode == java.awt.event.KeyEvent.VK_COLON) return Input.Keys.COLON;		
 
 		return Input.Keys.UNKNOWN;
 	}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -312,7 +312,7 @@ public static int getGdxKeyCode (int lwjglKeyCode) {
 		case Keyboard.KEY_F10: return Input.Keys.F10;
 		case Keyboard.KEY_F11: return Input.Keys.F11;
 		case Keyboard.KEY_F12: return Input.Keys.F12;		
-		
+		case Keyboard.KEY_COLON: return Input.Keys.COLON;
 		default:
 			return Input.Keys.UNKNOWN;
 		}
@@ -452,6 +452,7 @@ public static int getLwjglKeyCode (int gdxKeyCode) {
 		case Input.Keys.F10: return Keyboard.KEY_F10;
 		case Input.Keys.F11: return Keyboard.KEY_F11;
 		case Input.Keys.F12: return Keyboard.KEY_F12;
+		case Input.Keys.COLON: return Keyboard.KEY_COLON;
 		default:
 			return Keyboard.KEY_NONE;
 		}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -130,9 +130,7 @@ private void mainLoop () {
 		graphics.resize = false;
 
 		int lastWidth = graphics.getWidth();
-		int lastHeight = graphics.getHeight();
-
-		Gdx.app.log("LwjglApplication", "extension: " + Gdx.gl.glGetString(GL10.GL_EXTENSIONS));
+		int lastHeight = graphics.getHeight();	
 		
 		graphics.lastTime = System.nanoTime();
 		while (running && !Display.isCloseRequested()) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -112,7 +112,7 @@ protected void draw(SpriteBatch batch, float parentAlpha) {
 		if(invalidated) layout();
 		
 		batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
-		sliderPos = value / (max-min) * (width - knob.getRegionWidth());
+		sliderPos = (value-min) / (max-min) * (width - knob.getRegionWidth());
 		sliderPos = Math.max(0, sliderPos);
 		sliderPos = Math.min(width - knob.getRegionWidth(), sliderPos);
 		
@@ -205,7 +205,7 @@ public Slider setValueChangedListener(ValueChangedListener listener) {
 	 * @return the current value of the slider
 	 */
 	public float getValue() {
-		return (int)(value / steps) * steps;	
+		return (float)Math.floor(value / steps) * steps;	
 	}	
 	
 	/**

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PixelsPerInchTest.java
Patch:
@@ -34,7 +34,7 @@ public class PixelsPerInchTest extends GdxTest {
 	@Override public void create () {
 		font = new BitmapFont();
 		batch = new SpriteBatch();
-		texture = new Texture(Gdx.files.internal("data/ui.png"));
+		texture = new Texture(Gdx.files.internal("data/badlogicsmall.jpg"));
 	}
 
 	public void render () {

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglGraphics.java
Patch:
@@ -327,6 +327,6 @@ protected static JFrame findJFrame(Component component) {
 
 	@Override public BufferFormat getBufferFormat () {
 		GLCapabilities caps = canvas.getChosenGLCapabilities();
-		return new BufferFormat(caps.getRedBits(), caps.getGreenBits(), caps.getBlueBits(), caps.getAlphaBits(), caps.getDepthBits(), caps.getStencilBits(), caps.getNumSamples());		
+		return new BufferFormat(caps.getRedBits(), caps.getGreenBits(), caps.getBlueBits(), caps.getAlphaBits(), caps.getDepthBits(), caps.getStencilBits(), caps.getNumSamples(), false);		
 	}
 }

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/GdxTestActivity.java
Patch:
@@ -33,7 +33,6 @@ public void onCreate (Bundle bundle) {
 		GdxTest test = GdxTests.newTest(testName);
 		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
-		config.stencil = 1;
 		config.numSamples = 2;
 		initialize(test, config);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AnimationTest.java
Patch:
@@ -80,7 +80,7 @@ public void update(float deltaTime) {
 	}
 
 	@Override public void render () {
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
 		batch.begin();
 		for(int i = 0; i < cavemen.length; i++) {
 			Caveman caveman = cavemen[i];

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FilterPerformanceTest.java
Patch:
@@ -62,7 +62,7 @@ public void create () {
 		textMatrix = new Matrix4().setToOrtho2D(0, 0, 480, 320);		
 
 		atlas = new TextureAtlas(Gdx.files.internal("data/issue_pack"), Gdx.files.internal("data/"));
-		texture = new Texture(Gdx.files.internal("data/resource1.png"));
+		texture = new Texture(Gdx.files.internal("data/resource1.jpg"));
 		texture.setFilter(TextureFilter.MipMap, TextureFilter.Nearest);													 
 		setTextureFilter(0);
 		setModeString();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MeshMultitextureTest.java
Patch:
@@ -65,7 +65,7 @@ public class MeshMultitextureTest extends GdxTest {
 		mesh.setIndices(new short[] { 0, 1, 2, 2, 3, 0 });
 
 		tex1 = new Texture(Gdx.files.internal("data/planet_earth.png"));
-		tex2 = new Texture(Gdx.files.internal("data/planet_heavyclouds.png"));
+		tex2 = new Texture(Gdx.files.internal("data/planet_heavyclouds.jpg"));
 	}
 
 	@Override public boolean needsGL20 () {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
Patch:
@@ -62,8 +62,8 @@ public class ProjectiveTextureTest extends GdxTest {
 	}
 	
 	public void setupScene() {
-		plane = new Mesh(true, 4, 6, new VertexAttribute(Usage.Position, 3, "a_Position"),
-											  new VertexAttribute(Usage.Normal, 3, "a_Normal"));
+		plane = new Mesh(true, 4, 6, new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE),
+											  new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE));
 		plane.setVertices(new float[] { -10, -1, 10, 0, 1, 0, 
 												   10, -1, 10, 0, 1, 0, 
 												   10, -1, -10, 0, 1, 0,

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ShadowMappingTest.java
Patch:
@@ -58,7 +58,7 @@ public class ShadowMappingTest extends GdxTest {
 	}
 	
 	private void setupScene() {
-		plane = new Mesh(true, 4, 4, new VertexAttribute(Usage.Position, 3, "a_Position"));
+		plane = new Mesh(true, 4, 4, new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE));
 		plane.setVertices(new float[] { -10, -1, 10, 
 												   10, -1, 10,
 												   10, -1, -10,
@@ -131,7 +131,7 @@ private void setupUI() {
 	}
 	
 	@Override public void render() {
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT | (Gdx.graphics.getBufferFormat().coverageSampling?GL20.GL_COVERAGE_BUFFER_BIT_NV:0));
 		Gdx.gl.glEnable(GL20.GL_DEPTH_TEST);						
 		
 		if(currShader == flatShader) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -73,8 +73,7 @@ public class GdxTests
 		FloatTest.class,
 		FrameBufferTest.class,
 		FramebufferToTextureTest.class,
-		FullscreenTest.class,
-		FastTextReadingTest.class,
+		FullscreenTest.class,		
 		Gdx2DTest.class,
 		GroupFadeTest.class,
 		ImmediateModeRendererTest.class,

File: gdx/src/com/badlogic/gdx/math/Quaternion.java
Patch:
@@ -298,7 +298,7 @@ public static Quaternion idt() {
 	 * @return This quaternion for chaining.
 	 */
 	public Quaternion setFromAxis(Vector3 axis, float angle) {
-		return setFromAxis(axis.z, axis.y, axis.z, angle);
+		return setFromAxis(axis.x, axis.y, axis.z, angle);
 	}
 
 	/**

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Loader.java
Patch:
@@ -18,6 +18,7 @@
 import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedAnimation;
 import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedModel;
 import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedSubMesh;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.utils.LittleEndianInputStream;
 import com.badlogic.gdx.utils.ObjectMap;
 
@@ -143,8 +144,8 @@ private KeyframedModel buildModel (MD2Header header, MD2Triangle[] triangles, fl
 
 		
 		Mesh mesh = new Mesh(false, header.numVertices, indices.length, 
-									new VertexAttribute(Usage.Position, 3, "a_pos"), 
-									new VertexAttribute(Usage.TextureCoordinates, 2, "a_tex0"));
+									new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE), 
+									new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORDS_ATTRIBUTE + "0"));
 		mesh.setIndices(indices);
 		ObjectMap<String, KeyframedAnimation> animations = new ObjectMap<String, KeyframedAnimation>();
 		animations.put("all", animation);

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -24,6 +24,7 @@ public class JoglDebugStarter {
 
 	public static void main (String[] argv) {		
 		JoglApplicationConfiguration config = new JoglApplicationConfiguration();		
-		new JoglApplication(new com.badlogic.gdx.tests.UITest(), config);
+		config.useGL20 = true;
+		new JoglApplication(new com.badlogic.gdx.tests.ProjectiveTextureTest(), config);
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,6 +21,6 @@
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();			
-		new LwjglApplication(new com.badlogic.gdx.tests.SpriteCacheTest(), config);
+		new LwjglApplication(new com.badlogic.gdx.tests.InputTest(), config);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InputTest.java
Patch:
@@ -19,11 +19,13 @@
 import com.badlogic.gdx.InputProcessor;
 import com.badlogic.gdx.Input.Buttons;
 import com.badlogic.gdx.Input.Keys;
+import com.badlogic.gdx.input.RemoteInput;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class InputTest extends GdxTest implements InputProcessor {
 
 	@Override public void create () {
+		Gdx.input = new RemoteInput();
 		Gdx.input.setInputProcessor(this);
 	}	
 	

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -356,7 +356,7 @@ public LwjglDisplayMode (int width, int height, int refreshRate, int bitsPerPixe
 
 	@Override public void setVSync (boolean vsync) {
 		this.vsync = vsync;
-		if(vsync && !config.useCPUSynch == false) Display.setVSyncEnabled(true);
-		if(!vsync && !config.useCPUSynch == false) Display.setVSyncEnabled(false);
+		if(vsync && !config.useCPUSynch) Display.setVSyncEnabled(true);
+		if(!vsync && !config.useCPUSynch) Display.setVSyncEnabled(false);
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/Button.java
Patch:
@@ -83,7 +83,7 @@ public Button (String name, TextureRegion unpressedRegion, TextureRegion pressed
 		TextureRegion region = pressed ? pressedRegion : unpressedRegion;
 		batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
 		if (region.getTexture() != null) {
-			if (scaleX == 0 && scaleY == 0 && rotation == 0)
+			if (scaleX == 1 && scaleY == 1 && rotation == 0)
 				batch.draw(region, x, y, width, height);
 			else
 				batch.draw(region, x, y, originX, originY, width, height, scaleX, scaleY, rotation);

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -57,6 +57,6 @@ public void update() {
 		Matrix4.mul(combined.val, view.val);
 		invProjectionView.set(combined);	
 		Matrix4.inv(invProjectionView.val);
-		frustum.update(combined);
+		frustum.update(invProjectionView);
 	}
 }

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglGraphics.java
Patch:
@@ -89,7 +89,7 @@ public void resume () {
 	}
 
 	@Override public void reshape (GLAutoDrawable drawable, int x, int y, int width, int height) {
-		listener.resize(width, height);
+		listener.resize(width, height);		
 	}
 
 	@Override public void display (GLAutoDrawable arg0) {

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java
Patch:
@@ -67,7 +67,7 @@
  */
 public class ShaderProgram implements Disposable {
 	/** flag indicating whether attributes & uniforms must be present at all times **/
-	public static boolean pedantic = true;
+	public static boolean pedantic = true;	
 	
 	/** the list of currently available shaders **/
 	private final static Map<Application, List<ShaderProgram>> shaders = new HashMap<Application, List<ShaderProgram>>();

File: gdx/src/com/badlogic/gdx/math/Vector3.java
Patch:
@@ -35,6 +35,9 @@ public class Vector3 implements Serializable {
 	private static Vector3 tmp = new Vector3();
 	private static Vector3 tmp2 = new Vector3();
 	private static Vector3 tmp3 = new Vector3();
+	public static Vector3 X = new Vector3(1, 0, 0);
+	public static Vector3 Y = new Vector3(0, 1, 0);
+	public static Vector3 Z = new Vector3(0, 0, 1);
 
 	/**
 	 * Constructs a vector at (0,0,0)

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/CheckBox.java
Patch:
@@ -132,10 +132,12 @@ protected void draw(SpriteBatch batch, float parentAlpha) {
 		final Color fontColor = style.fontColor;
 		
 		if(invalidated) layout();
+		
+		batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
 		if(isChecked) batch.draw(checkedRegion, x + boxPos.x, y + boxPos.y);
 		else batch.draw(uncheckedRegion, x + boxPos.x, y + boxPos.y);
 		
-		font.setColor(fontColor);
+		font.setColor(fontColor.r, fontColor.g, fontColor.b, fontColor.a * parentAlpha);
 		font.draw(batch, label, x + textPos.x, y + textPos.y);
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java
Patch:
@@ -94,7 +94,7 @@ protected void draw(SpriteBatch batch, float parentAlpha) {
 		final Color fontColor = style.fontColor;
 		
 		if(invalidated) layout();
-		font.setColor(fontColor);		
+		font.setColor(fontColor.r, fontColor.g, fontColor.b, fontColor.a * parentAlpha);		
 		font.drawMultiLine(batch, label, x + textPos.x, y + height);		
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
Patch:
@@ -121,14 +121,15 @@ protected void draw(SpriteBatch batch, float parentAlpha) {
 		final Color fontColorUnselected = style.fontColorUnselected;
 		
 		if(invalidated) layout();
+		batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
 		
 		float posY = height;
 		for(int i = 0; i < entries.length; i++) {
 			if(selected == i) {
 				selectedPatch.draw(batch, x, y + posY - entryHeight, Math.max(prefWidth, width), entryHeight);
-				font.setColor(fontColorSelected);
+				font.setColor(fontColorSelected.r, fontColorSelected.g, fontColorSelected.b, fontColorSelected.a * parentAlpha);
 			} else {
-				font.setColor(fontColorUnselected);
+				font.setColor(fontColorUnselected.r, fontColorUnselected.g, fontColorUnselected.b, fontColorUnselected.a * parentAlpha);
 			}
 			font.draw(batch, entries[i], x + textOffsetX, y + posY - textOffsetY);
 			posY -= entryHeight;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Pane.java
Patch:
@@ -104,6 +104,7 @@ private void calculateScissors(Matrix4 transform) {
 	public void draw(SpriteBatch batch, float parentAlpha) {
 		final NinePatch background = style.background;
 		
+		batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
 		background.draw(batch, x, y, width, height);		
 		setupTransform(batch);
 		applyLayout();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java
Patch:
@@ -206,13 +206,14 @@ public void draw(SpriteBatch batch, float parentAlpha) {
 		setupTransform(batch);	
 		
 		// if invalidated layout!
-		if(invalidated) layout();
+		if(invalidated) layout();		
 		
 		// calculate the bounds for the scrollbars, the widget
 		// area and the scissor area. Nasty...
 		calculateBoundsAndPositions(batch.getTransformMatrix());			
 		
 		// first draw the background ninepatch
+		batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
 		background.draw(batch, 0, 0, width, height);				
 		
 		// enable scissors for widget area and draw that damn
@@ -222,6 +223,7 @@ public void draw(SpriteBatch batch, float parentAlpha) {
 		ScissorStack.popScissors();
 		
 		// render scrollbars and knobs on top.
+		batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
 		if(hasHScroll) {
 			hScroll.draw(batch, hScrollBounds.x, hScrollBounds.y, hScrollBounds.width, hScrollBounds.height);
 			hScrollKnob.draw(batch, hScrollKnobBounds.x, hScrollKnobBounds.y, hScrollKnobBounds.width, hScrollKnobBounds.height);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Slider.java
Patch:
@@ -108,6 +108,8 @@ protected void draw(SpriteBatch batch, float parentAlpha) {
 		final NinePatch slider = style.slider;
 		
 		if(invalidated) layout();
+		
+		batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
 		sliderPos = value / (max-min) * (width - knob.getRegionWidth());
 		sliderPos = Math.max(0, sliderPos);
 		sliderPos = Math.min(width - knob.getRegionWidth(), sliderPos);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SplitPane.java
Patch:
@@ -227,14 +227,15 @@ private void calculateVertBoundsAndPositions() {
 	protected void draw(SpriteBatch batch, float parentAlpha) {
 		NinePatch handle = style.handle;
 		
-		setupTransform(batch);			
+		setupTransform(batch);		
 		calculateBoundsAndPositions(batch.getTransformMatrix());									
 		for(int i = 0; i < children.size(); i++) {
 			ScissorStack.pushScissors(scissors[i]);			
 			drawChild(children.get(i), batch, parentAlpha);
 			ScissorStack.popScissors();
 		}
-		handle.draw(batch, handleBounds.x, handleBounds.y, handleBounds.width, handleBounds.height, parentAlpha);
+		batch.setColor(color.r, color.g, color.b, color.a);
+		handle.draw(batch, handleBounds.x, handleBounds.y, handleBounds.width, handleBounds.height);
 		if(invalidated) layout();
 		resetTransform(batch);
 	}

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglInput.java
Patch:
@@ -325,8 +325,7 @@ private void checkCatched(MouseEvent e) {
 			deltaY = e.getLocationOnScreen().y - y;
 			if(e.getX() < 0 || e.getX() >= canvas.getWidth() || e.getY() < 0 || e.getY() >= canvas.getHeight()) {
 				robot.mouseMove(x - deltaX, y - deltaY);
-			}
-			System.out.println("reported: " + e.getX() + ", " + e.getY() + ", set: " + (x - canvas.getLocationOnScreen().x) + ", " + (y - canvas.getLocationOnScreen().y) );
+			}			
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
Patch:
@@ -64,7 +64,7 @@ public TextField (String name, float prefWidth, TextFieldStyle style) {
 		super(name, prefWidth, 0);
 		this.style = style;
 		this.initialPrefWidth = prefWidth;
-		this.clipboard = Gdx.app.getType() == ApplicationType.Desktop ? new DesktopClipboard() : new AndroidClipboard();
+		this.clipboard = Clipboard.getDefaultKeyboard();
 		layout();
 		this.width = this.prefWidth;
 		this.height = this.prefHeight;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/utils/AndroidClipboard.java
Patch:
@@ -15,7 +15,7 @@
  ******************************************************************************/
 package com.badlogic.gdx.scenes.scene2d.ui.utils;
 
-public class AndroidClipboard implements Clipboard {
+public class AndroidClipboard extends Clipboard {
 
 	@Override public String getContents () {
 		return "";

File: gdx/src/com/badlogic/gdx/scenes/scene2d/ui/utils/DesktopClipboard.java
Patch:
@@ -23,7 +23,7 @@
 import java.awt.datatransfer.UnsupportedFlavorException;
 import java.io.IOException;
 
-public class DesktopClipboard implements Clipboard, ClipboardOwner {
+public class DesktopClipboard extends Clipboard implements ClipboardOwner {
 
 	@Override public String getContents () {
 		String result = "";

File: gdx/src/com/badlogic/gdx/math/Rectangle.java
Patch:
@@ -151,8 +151,8 @@ public void set (float x, float y, float width, float height) {
 	}
 
 	/**
-	 * @param x0 point x coordinate
-	 * @param y0 point y coordinate
+	 * @param x point x coordinate
+	 * @param y point y coordinate
 	 * @return whether the point is contained in the rectangle
 	 */
 	public boolean contains (float x, float y) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
+import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.InputAdapter;
 import com.badlogic.gdx.graphics.Camera;
 import com.badlogic.gdx.graphics.OrthographicCamera;
@@ -287,7 +288,7 @@ public boolean scrolled(int amount) {
 	/**
 	 * Called when a key was pressed
 	 * 
-	 * @param keycode one of the constants in {@link Input.Keys}
+	 * @param keycode one of the constants in {@link Keys}
 	 * @return whether the input was processed
 	 */
 	@Override
@@ -298,7 +299,7 @@ public boolean keyDown (int keycode) {
 	/**
 	 * Called when a key was released
 	 * 
-	 * @param keycode one of the constants in {@link Input.Keys}
+	 * @param keycode one of the constants in {@link Keys}
 	 * @return whether the input was processed
 	 */
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/OldUITest.java
Patch:
@@ -47,7 +47,7 @@
 import com.badlogic.gdx.scenes.scene2d.actors.LinearGroup.LinearGroupLayout;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
-public class UITest extends GdxTest implements InputProcessor {
+public class OldUITest extends GdxTest implements InputProcessor {
 	Texture uiTexture;
 	Texture badlogic;
 	Stage ui;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -120,7 +120,7 @@
 import com.badlogic.gdx.tests.TextureRenderTest;
 import com.badlogic.gdx.tests.TileTest;
 import com.badlogic.gdx.tests.TiledMapTest;
-import com.badlogic.gdx.tests.UITest;
+import com.badlogic.gdx.tests.OldUITest;
 import com.badlogic.gdx.tests.VBOVATest;
 import com.badlogic.gdx.tests.VertexArrayClassTest;
 import com.badlogic.gdx.tests.VertexArrayTest;
@@ -233,7 +233,7 @@ public class GdxTests
 		TextureRenderTest.class,
 		TiledMapTest.class,
 		TileTest.class,
-		UITest.class,
+		OldUITest.class,
 		VBOVATest.class,
 		VertexArrayTest.class,		
 		VertexBufferObjectTest.class,

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,6 +21,6 @@
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();		
-		new LwjglApplication(new com.badlogic.gdx.tests.InputTest(), config);
+		new LwjglApplication(new com.badlogic.gdx.tests.IntegerBitmapFontTest(), config);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -67,6 +67,7 @@
 import com.badlogic.gdx.tests.IndexBufferObjectClassTest;
 import com.badlogic.gdx.tests.IndexBufferObjectShaderTest;
 import com.badlogic.gdx.tests.InputTest;
+import com.badlogic.gdx.tests.IntegerBitmapFontTest;
 import com.badlogic.gdx.tests.IsoCamTest;
 import com.badlogic.gdx.tests.IsometricTileTest;
 import com.badlogic.gdx.tests.KinematicBodyTest;
@@ -178,6 +179,7 @@ public class GdxTests
 		IndexBufferObjectClassTest.class,
 		IndexBufferObjectShaderTest.class,
 		InputTest.class,
+		IntegerBitmapFontTest.class,
 		IsoCamTest.class,
 		IsometricTileTest.class,
 		KinematicBodyTest.class,

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/QbobViewer.java
Patch:
@@ -87,7 +87,7 @@ public class QbobViewer implements ApplicationListener {
 		Gdx.gl.glActiveTexture(GL10.GL_TEXTURE0);
 		Gdx.gl.glEnable(GL10.GL_TEXTURE_2D);
 		diffuse.bind();
-		diffuse.setFilter(TextureFilter.MipMapNearestNearest, TextureFilter.Linear);				
+		diffuse.setFilter(TextureFilter.MipMap, TextureFilter.Linear);				
 		
 		Gdx.gl.glActiveTexture(GL10.GL_TEXTURE1);
 		Gdx.gl.glEnable(GL10.GL_TEXTURE_2D);

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -24,6 +24,6 @@ public class JoglDebugStarter {
 
 	public static void main (String[] argv) {		
 		JoglApplicationConfiguration config = new JoglApplicationConfiguration();		
-		new JoglApplication(new com.badlogic.gdx.tests.CullTest(), config);
+		new JoglApplication(new com.badlogic.gdx.tests.InputTest(), config);
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -21,6 +21,6 @@
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();		
-		new LwjglApplication(new com.badlogic.gdx.tests.CullTest(), config);
+		new LwjglApplication(new com.badlogic.gdx.tests.InputTest(), config);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FrameBufferTest.java
Patch:
@@ -89,7 +89,7 @@ public class FrameBufferTest extends GdxTest {
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
 
 		spriteBatch = new SpriteBatch();
-		frameBuffer = new FrameBuffer(Format.RGB565, 128, 128, true);
+		frameBuffer = new FrameBuffer(Format.RGB565, 128, 128, false);
 		createShader(Gdx.graphics);
 	}
 

File: gdx/src/com/badlogic/gdx/physics/box2d/Body.java
Patch:
@@ -115,6 +115,7 @@ public void destroyFixture (Fixture fixture) {
 		jniDestroyFixture(addr, fixture.addr);
 		this.world.fixtures.remove(fixture.addr);
 		this.fixtures.remove(fixture);
+		this.world.freeFixtures.free(fixture);
 	}
 
 	private native void jniDestroyFixture (long addr, long fixtureAddr);

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -145,7 +145,7 @@ public enum ApplicationType {
 	public long getNativeHeap ();
 	
 	/**
-	 * Returns the {@link Preferences} instance of this Application. The
+	 * Returns the {@link Preferences} instance of this Application. It
 	 * can be used to store application settings across runs.
 	 * @param name the name of the preferences, must be useable as a file name.
 	 * @return the preferences.

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -318,7 +318,7 @@ public long getNativeHeap() {
 		super.onConfigurationChanged(config);
 		boolean keyboardAvailable = false;
 		if(config.keyboardHidden == Configuration.HARDKEYBOARDHIDDEN_NO) keyboardAvailable = true;
-		input.keyboardAvailable = keyboardAvailable;		
+		input.keyboardAvailable = keyboardAvailable;
 	}
 
 	@Override public void log (String tag, String message, Exception exception) {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -528,7 +528,6 @@ protected AndroidDisplayMode (int width, int height, int refreshRate, int bitsPe
 	@Override public DisplayMode getDesktopDisplayMode () {
 		DisplayMetrics metrics = new DisplayMetrics();
 		app.getWindowManager().getDefaultDisplay().getMetrics(metrics);
-
 		return new AndroidDisplayMode(metrics.widthPixels, metrics.heightPixels, 0, 0);
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/Camera.java
Patch:
@@ -200,7 +200,7 @@ public void project(Vector3 vec) {
 	 * specify the viewport position and dimensions in the coordinate system expected by {@link GLCommon#glViewport(int, int, int, int)}, with
 	 * the origin in the bottom left corner of the screen.
 	 * 
-	 * @param vec the point in window coordinates (origin top left)
+	 * @param vec the point in object/world space
 	 * @param viewportX the coordinate of the top left corner of the viewport in glViewport coordinates (origin bottom left)
 	 * @param viewportY the coordinate of the top left corner of the viewport in glViewport coordinates (origin bottom left)
 	 * @param viewportWidth the width of the viewport in pixels

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/GdxTestActivity.java
Patch:
@@ -32,7 +32,8 @@ public void onCreate (Bundle bundle) {
 
 		GdxTest test = GdxTests.newTest(testName);
 		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
-		config.useGL20 = test.needsGL20();		
+		config.useGL20 = test.needsGL20();	
+		config.stencil = 1;
 		initialize(test, config);
 	}
 }

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -98,7 +98,7 @@ public void initialize(ApplicationListener listener, boolean useGL2IfAvailable)
      * @param config the {@link AndroidApplicationConfiguration}, defining various settings of the application (use accelerometer, etc.).
      */
     public void initialize(ApplicationListener listener, AndroidApplicationConfiguration config) {
-   	 graphics = new AndroidGraphics(this, config.useGL20, config.resolutionStrategy==null?new FillResolutionStrategy():config.resolutionStrategy);
+   	 graphics = new AndroidGraphics(this, config, config.resolutionStrategy==null?new FillResolutionStrategy():config.resolutionStrategy);
        input = new AndroidInput(this, graphics.view, config);
        audio = new AndroidAudio(this);
        files = new AndroidFiles(this.getAssets());
@@ -165,7 +165,7 @@ public View initializeForView(ApplicationListener listener, boolean useGL2IfAvai
      * @return the GLSurfaceView of the application
      */
     public View initializeForView(ApplicationListener listener, AndroidApplicationConfiguration config) {
-   	 graphics = new AndroidGraphics(this, config.useGL20, config.resolutionStrategy==null?new FillResolutionStrategy():config.resolutionStrategy);
+   	 graphics = new AndroidGraphics(this, config, config.resolutionStrategy==null?new FillResolutionStrategy():config.resolutionStrategy);
        input = new AndroidInput(this, graphics.view, config);
        audio = new AndroidAudio(this);
        files = new AndroidFiles(this.getAssets());

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglApplicationConfiguration.java
Patch:
@@ -13,7 +13,7 @@ public class JoglApplicationConfiguration {
 	/** number of bits per color channel **/
 	public int r = 8, g = 8, b = 8, a = 8;
 	/** number of bits for depth and stencil buffer **/
-	public int depth = 16, stencil = 8;
+	public int depth = 16, stencil = 0;
 	/** number of samples for MSAA **/
 	public int samples = 0;
 	/** width & height of application **/

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplicationConfiguration.java
Patch:
@@ -12,7 +12,7 @@ public class LwjglApplicationConfiguration {
 	/** number of bits per color channel **/
 	public int r = 8, g = 8, b = 8, a = 8;
 	/** number of bits for depth and stencil buffer **/
-	public int depth = 16, stencil = 8;
+	public int depth = 16, stencil = 0;
 	/** number of samples for MSAA **/
 	public int samples = 0;
 	/** width & height of application **/

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -20,7 +20,7 @@
 
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
-		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();			
+		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();		
 		new LwjglApplication(new com.badlogic.gdx.tests.CullTest(), config);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/CullTest.java
Patch:
@@ -54,11 +54,13 @@ public class CullTest extends GdxTest {
 		batch = new SpriteBatch();
 		font = new BitmapFont();
 		Gdx.graphics.setVSync(true);
+		Gdx.app.log("CullTest", "" + Gdx.graphics.getBufferFormat().toString());
 	}
 	
 	@Override public void render() {
 		GL10 gl = Gdx.gl10;
 		
+		gl.glClearColor(0, 0, 0, 0);
 		gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
 		gl.glEnable(GL10.GL_DEPTH_TEST);
 		

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FullscreenTest.java
Patch:
@@ -26,7 +26,8 @@ public class FullscreenTest extends GdxTest {
 		for(DisplayMode mode: modes) {
 			System.out.println(mode);
 		}
-		Gdx.graphics.setDisplayMode(800, 600, true);			
+		Gdx.graphics.setDisplayMode(800, 600, true);
+		Gdx.app.log("FullscreenTest", Gdx.graphics.getBufferFormat().toString());
 	}
 
 	@Override public void resume () {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -515,7 +515,7 @@ public float getPpcY() {
 	}
 	
 	@Override public DisplayMode[] getDisplayModes () {
-		return new DisplayMode[0];
+		return new DisplayMode[] { getDesktopDisplayMode() };
 	}
 	
 	@Override public boolean setDisplayMode (int width, int height, boolean fullscreen) {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
Patch:
@@ -154,7 +154,9 @@ protected void resume () {
 	 */
 	public void dispose () {
 		synchronized(musics) {
-			for (AndroidMusic music : musics) {
+			// gah i hate myself.... music.dispose() removes the music from the list...
+			ArrayList<AndroidMusic> musicsCopy = new ArrayList<AndroidMusic>(musics);
+			for (AndroidMusic music : musicsCopy) {
 				music.dispose();
 			}		
 		}

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/QbobViewer.java
Patch:
@@ -53,7 +53,7 @@ public class QbobViewer implements ApplicationListener {
 		model[3] = G3dLoader.loadStillModel(Gdx.files.internal("data/qbob/test_section_04.dae.g3d"));
 		lightMaps[3] = new Texture(Gdx.files.internal("data/qbob/world_blobbie_lm_04.jpg"), true);
 		
-		diffuse = new Texture(Gdx.files.internal("data/qbob/world_blobbie_blocks.png"), true);
+		diffuse = new Texture(Gdx.files.internal("data/qbob/World_blobbie_blocks.png"), true);
 																		
 		cam = new PerspectiveCamera(60, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam.position.set(30, 10, 85f);

File: gdx/src/com/badlogic/gdx/utils/Xml.java
Patch:
@@ -445,8 +445,8 @@ public String getName () {
 		public String getAttribute (String name) {
 			if (attributes == null) return null;
 			return attributes.get(name);
-		}
-
+		}	
+		
 		public void setAttribute (String name, String value) {
 			if (attributes == null) attributes = new ObjectMap(8);
 			attributes.put(name, value);

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglInput.java
Patch:
@@ -357,6 +357,8 @@ private int toGdxButton(int swingButton) {
 	}
 
 	protected static int translateKeyCode (int keyCode) {
+		if (keyCode == java.awt.event.KeyEvent.VK_ADD) return Input.Keys.PLUS;
+		if (keyCode == java.awt.event.KeyEvent.VK_SUBTRACT) return Input.Keys.MINUS;		
 		if (keyCode == java.awt.event.KeyEvent.VK_0) return Input.Keys.NUM_0;
 		if (keyCode == java.awt.event.KeyEvent.VK_1) return Input.Keys.NUM_1;
 		if (keyCode == java.awt.event.KeyEvent.VK_2) return Input.Keys.NUM_2;

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/Ogg.java
Patch:
@@ -28,6 +28,8 @@ static public class Music extends OpenALMusic {
 
 		public Music (OpenALAudio audio, FileHandle file) {
 			super(audio, file);
+			input = new OggInputStream(file.read());
+			setup(input.getChannels(), input.getSampleRate());
 		}
 
 		protected int read (byte[] buffer) {

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/Wav.java
Patch:
@@ -28,6 +28,8 @@ static public class Music extends OpenALMusic {
 
 		public Music (OpenALAudio audio, FileHandle file) {
 			super(audio, file);
+			input = new WavInputStream(file);
+			setup(input.channels, input.sampleRate);
 		}
 
 		protected int read (byte[] buffer) {

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -20,6 +20,6 @@
 public class JoglDebugStarter {
 
 	public static void main (String[] argv) {
-		new JoglApplication(new com.badlogic.gdx.tests.Box2DTest(), "Debug Test", 480, 320, false);
+		new JoglApplication(new com.badlogic.gdx.tests.MusicTest(), "Debug Test", 480, 320, false);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MusicTest.java
Patch:
@@ -37,6 +37,8 @@ public class MusicTest extends GdxTest {
 	
 	@Override public void create() {
 		music = Gdx.audio.newMusic(Gdx.files.internal("data/threeofaperfectpair.mp3"));
+//		music = Gdx.audio.newMusic(Gdx.files.internal("data/cloudconnected.ogg"));
+//		music = Gdx.audio.newMusic(Gdx.files.internal("data/sell_buy_item.wav"));		
 		buttons = new TextureRegion(new Texture(Gdx.files.internal("data/playback.png")));
 		batch = new SpriteBatch();
 		font = new BitmapFont();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -245,7 +245,8 @@ public static void toChildCoordinates (Actor child, float x, float y, Vector2 ou
 		if (focusedActor[pointer] != null) {
 			point.x = x;
 			point.y = y;			
-			focusedActor[pointer].toLocalCoordinates(point);						
+			focusedActor[pointer].toLocalCoordinates(point);
+			focusedActor[pointer].touchDown(point.x, point.y, pointer);
 			return true;
 		}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -135,6 +135,7 @@ protected void drawChildren(SpriteBatch batch, float parentAlpha) {
 	
 	protected void drawChild(Actor child, SpriteBatch batch, float parentAlpha) {
 		child.draw(batch, parentAlpha * color.a);
+		batch.flush();
 	}
 	
 	protected void resetTransform(SpriteBatch batch) {		

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -43,7 +43,7 @@ public class SoundTest extends GdxTest implements InputProcessor {
 
 	@Override public void create () {
 		// sound = Gdx.audio.newSound(Gdx.files.getFileHandle("data/shotgun.wav", FileType.Internal));
-		sound = Gdx.audio.newSound(Gdx.files.getFileHandle("data/test2_notwork.wav", FileType.Internal));
+		sound = Gdx.audio.newSound(Gdx.files.getFileHandle("data/sell_buy_item.wav", FileType.Internal));
 
 		// music = Gdx.audio.newMusic(Gdx.files.internal("data/cloudconnected.ogg"));
 		music = Gdx.audio.newMusic(Gdx.files.getFileHandle("data/threeofaperfectpair.mp3", FileType.Internal));

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -166,7 +166,7 @@ public void onClick (DialogInterface dialog, int whichButton) {
 				alert.setOnCancelListener(new OnCancelListener() {					
 					@Override
 					public void onCancel(DialogInterface arg0) {
-						listener.cancled();
+						listener.canceled();
 					}
 				});
 				alert.show();

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglInput.java
Patch:
@@ -109,7 +109,7 @@ public JoglInput (GLCanvas canvas) {
 				if (output != null) 
 					listener.input(output);
 				else
-					listener.cancled();
+					listener.canceled();
 				
 			}
 		});

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -110,7 +110,7 @@ public void run () {
 				if(output != null) 
 					listener.input(output);
 				else
-					listener.cancled();
+					listener.canceled();
 			}
 		});
 	}

File: gdx/src/com/badlogic/gdx/Input.java
Patch:
@@ -48,7 +48,7 @@ public interface Input {
 	 */
 	public interface TextInputListener {
 		public void input (String text);
-		public void cancled();
+		public void canceled();
 	}
 
 	/**

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -20,6 +20,6 @@
 public class JoglDebugStarter {
 
 	public static void main (String[] argv) {
-		new JoglApplication(new com.badlogic.gdx.tests.Box2DTest(), "Debug Test", 480, 320, false);
+		new JoglApplication(new com.badlogic.gdx.tests.SoundTest(), "Debug Test", 480, 320, false);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -43,7 +43,7 @@ public class SoundTest extends GdxTest implements InputProcessor {
 
 	@Override public void create () {
 		// sound = Gdx.audio.newSound(Gdx.files.getFileHandle("data/shotgun.wav", FileType.Internal));
-		sound = Gdx.audio.newSound(Gdx.files.getFileHandle("data/sell_buy_item.wav", FileType.Internal));
+		sound = Gdx.audio.newSound(Gdx.files.getFileHandle("data/test2_notwork.wav", FileType.Internal));
 
 		// music = Gdx.audio.newMusic(Gdx.files.internal("data/cloudconnected.ogg"));
 		music = Gdx.audio.newMusic(Gdx.files.getFileHandle("data/threeofaperfectpair.mp3", FileType.Internal));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextInputDialogTest.java
Patch:
@@ -47,7 +47,7 @@ public void input(String text) {
 				}
 				
 				@Override
-				public void cancled() {
+				public void canceled() {
 					message = "cancled by user";
 				}
 			}, "enter something funny", "funny");

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidMultiTouchHandler.java
Patch:
@@ -55,7 +55,8 @@ public void onTouch (MotionEvent event, AndroidInput input) {
 			case MotionEvent.ACTION_POINTER_UP:
 			case MotionEvent.ACTION_OUTSIDE:
 			case MotionEvent.ACTION_CANCEL:				
-				realPointerIndex = input.lookUpPointerIndex(pointerId);				
+				realPointerIndex = input.lookUpPointerIndex(pointerId);
+				if(realPointerIndex == -1) break;
 				input.realId[realPointerIndex] = -1;
 				x = (int)event.getX(pointerIndex);
 				y = (int)event.getY(pointerIndex);
@@ -73,6 +74,7 @@ public void onTouch (MotionEvent event, AndroidInput input) {
 					x = (int)event.getX(pointerIndex);
 					y = (int)event.getY(pointerIndex);
 					realPointerIndex = input.lookUpPointerIndex(pointerId);
+					if(realPointerIndex == -1) continue;
 					postTouchEvent(input, TouchEvent.TOUCH_DRAGGED, x, y, realPointerIndex);
 					input.touchX[realPointerIndex] = x;
 					input.touchY[realPointerIndex] = y;

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TileMapRenderer.java
Patch:
@@ -266,7 +266,7 @@ private int addBlock (int[][] layer, int layerNum, int blockRow, int blockCol, b
 					if (blended == blendedTiles.contains(tile)) {
 						region = atlas.getRegion(tile);
 						if (region != null) {
-							cache.add(region, col*unitsPerTileX, ((layer.length - row))*unitsPerTileY, (float)region.offsetX*unitsPerTileX/tileWidth, -(float)(region.packedHeight + region.offsetY)*unitsPerTileY/tileHeight, region.packedWidth, region.packedHeight, unitsPerTileX/tileWidth, unitsPerTileY/tileHeight, (region.rotate)?90:0);
+							cache.add(region, col*unitsPerTileX, (layer.length - row - 1)*unitsPerTileY, (float)region.offsetX*unitsPerTileX/tileWidth, -(float)(region.offsetY)*unitsPerTileY/tileHeight, region.packedWidth, region.packedHeight, unitsPerTileX/tileWidth, unitsPerTileY/tileHeight, (region.rotate)?90:0);
 						}
 					}
 				}

File: gdx/src/com/badlogic/gdx/math/Circle.java
Patch:
@@ -36,12 +36,12 @@ public Circle(Vector2 position, float radius) {
 	public boolean contains(float x, float y) {
 		x = this.x - x;
 		y = this.y - y;
-		return Math.sqrt(x*x + y*y) <= 0;
+		return x*x + y*y <= radius * radius;
 	}
 	
 	public boolean contains(Vector2 point) {
 		float x = this.x - point.x;
 		float y = this.y - point.y;
-		return Math.sqrt(x*x + y*y) <= 0;
+		return x*x + y*y <= radius * radius;
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TileMapRenderer.java
Patch:
@@ -266,9 +266,7 @@ private int addBlock (int[][] layer, int layerNum, int blockRow, int blockCol, b
 					if (blended == blendedTiles.contains(tile)) {
 						region = atlas.getRegion(tile);
 						if (region != null) {
-							y = ((layer.length - row) - (region.packedHeight + region.offsetY) / tileHeight) * unitsPerTileY;
-							x = (col + region.offsetX / tileWidth) * unitsPerTileX;
-							cache.add(region, x, y, unitsPerTileX, unitsPerTileY);
+							cache.add(region, col*unitsPerTileX, ((layer.length - row))*unitsPerTileY, (float)region.offsetX*unitsPerTileX/tileWidth, -(float)(region.packedHeight + region.offsetY)*unitsPerTileY/tileHeight, region.packedWidth, region.packedHeight, unitsPerTileX/tileWidth, unitsPerTileY/tileHeight, (region.rotate)?90:0);
 						}
 					}
 				}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -227,7 +227,7 @@ public static void toChildCoordinates (Actor child, float x, float y, Vector2 ou
 		if (focusedActor[pointer] != null) {
 			point.x = x;
 			point.y = y;
-			focusedActor[pointer].toLocalCoordinates(point);
+			toChildCoordinates(focusedActor[pointer], x, y, point);			
 			focusedActor[pointer].touchDown(point.x, point.y, pointer);
 			return true;
 		}
@@ -257,7 +257,7 @@ public static void toChildCoordinates (Actor child, float x, float y, Vector2 ou
 		if (focusedActor[pointer] != null) {
 			point.x = x;
 			point.y = y;
-			focusedActor[pointer].toLocalCoordinates(point);
+			toChildCoordinates(focusedActor[pointer], x, y, point);
 			focusedActor[pointer].touchUp(point.x, point.y, pointer);
 			return true;
 		}
@@ -280,7 +280,7 @@ public static void toChildCoordinates (Actor child, float x, float y, Vector2 ou
 		if (focusedActor[pointer] != null) {
 			point.x = x;
 			point.y = y;
-			focusedActor[pointer].toLocalCoordinates(point);
+			toChildCoordinates(focusedActor[pointer], x, y, point);
 			focusedActor[pointer].touchDragged(point.x, point.y, pointer);
 			return true;
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/FastImage.java
Patch:
@@ -95,7 +95,8 @@ private void updateSprite() {
 			sWidth = width;
 			sHeight = height;
 		}
-				
+		
+		sprite.setColor(color);
 		sprite.setRegion(region);		
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/LinearGroup.java
Patch:
@@ -26,7 +26,7 @@ public static enum LinearGroupLayout {
 
 	protected final LinearGroupLayout layout;
 
-	public LinearGroup (String name, int width, int height, LinearGroupLayout layout) {
+	public LinearGroup (String name, float width, float height, LinearGroupLayout layout) {
 		super(name, width, height);
 		this.layout = layout;
 	}

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/collada/ColladaLoader.java
Patch:
@@ -37,9 +37,7 @@ public static StillModel loadStillModel(InputStream in) {
 		
 		// convert geometries to meshes
 		StillSubMesh[] meshes = createMeshes(geos);
-		for(StillSubMesh mesh: meshes) {
-			System.out.println(mesh.mesh.getNumVertices());
-		}
+		
 		// create StillModel
 		StillModel model = new StillModel(meshes);		
 		return model;

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/collada/Source.java
Patch:
@@ -34,8 +34,6 @@ private void parseComponents(Element source) {
 		String[] tokens = floatArray.getText().split("\\s+");
 		for(int i = 0; i < tokens.length; i++) {
 			data[i] = Float.parseFloat(tokens[i]);
-		}			
-		
-		System.out.println(id + ": " + Arrays.toString(data));
+		}						
 	}
 }

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/utils/PerspectiveCamController.java
Patch:
@@ -1,4 +1,4 @@
-package com.badlogic.gdx.graphics.g3d.test;
+package com.badlogic.gdx.graphics.g3d.test.utils;
 
 import com.badlogic.gdx.InputAdapter;
 import com.badlogic.gdx.graphics.PerspectiveCamera;

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/KeyframedModelViewer.java
Patch:
@@ -8,6 +8,7 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 import com.badlogic.gdx.graphics.g3d.loaders.g3d.G3DTLoader;
+import com.badlogic.gdx.graphics.g3d.loaders.md2.MD2Loader;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
 import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedAnimation;
@@ -37,6 +38,7 @@ public KeyframedModelViewer(String fileName, String textureFileName) {
 	
 	@Override public void create () {
 		if(fileName.endsWith(".g3dt")) model = G3DTLoader.loadKeyframedModel(Gdx.files.internal(fileName));
+		else if(fileName.endsWith(".md2")) model = new MD2Loader().load(Gdx.files.internal(fileName), 1 / 7f);
 		else throw new GdxRuntimeException("Unknown file format '" + fileName + "'");		
 		if(textureFileName != null) texture = new Texture(Gdx.files.internal(textureFileName));		
 		hasNormals = hasNormals();
@@ -147,6 +149,6 @@ public static void main(String[] argv) {
 //			System.out.println("KeyframedModelViewer <filename> ?<texture-filename>");
 //			System.exit(-1);
 //		}
-		new JoglApplication(new KeyframedModelViewer("data/boy_low.g3dt", "data/boy_lowpoly_color.png"), "KeframedModel Viewer", 320, 240, false);
+		new JoglApplication(new KeyframedModelViewer("data/knight.md2", "data/knight.jpg"), "KeframedModel Viewer", 320, 240, false);
 	}
 }

File: extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/MD2Viewer.java
Patch:
@@ -17,7 +17,7 @@ public class MD2Viewer implements ApplicationListener {
 	float angle = 0;	
 	
 	@Override public void create () {		
-		model = new MD2Loader().load(Gdx.files.internal("data/knight.md2").read());
+		model = new MD2Loader().load(Gdx.files.internal("data/knight.md2").read(), 0.2f);
 		Material material = new Material("knight", new TextureAttribute(new Texture("data/knight.jpg"), 0, "a_tex0"));
 		model.setMaterial(material);	
 		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());

File: gdx/src/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java
Patch:
@@ -171,6 +171,7 @@ private void drawJoint (Joint joint) {
 			drawSegment(s2, p2, JOINT_COLOR);
 			drawSegment(s1, s2, JOINT_COLOR);
 		} else if (joint.getType() == JointType.MouseJoint) {
+			drawSegment(joint.getAnchorA(), joint.getAnchorB(), JOINT_COLOR);
 		} else {
 			drawSegment(x1, p1, JOINT_COLOR);
 			drawSegment(p1, p2, JOINT_COLOR);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Parallel.java
Patch:
@@ -52,6 +52,7 @@ public class Parallel extends CompositeAction {
 
 	@Override public void act (float delta) {
 		int len = actions.size();
+		boolean allDone = true;
 		for (int i = 0; i < len; i++) {
 			if (!actions.get(i).isDone()) {
 				actions.get(i).act(delta);
@@ -60,8 +61,10 @@ public class Parallel extends CompositeAction {
 					actions.get(i).finish();
 					finished[i] = true;
 				}
+				allDone &= finished[i];
 			}
 		}
+		if(allDone) callActionCompletedListener();
 	}
 
 	@Override public boolean isDone () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Remove.java
Patch:
@@ -43,6 +43,7 @@ public class Remove extends Action {
 		if(!removed) {
 			target.markToRemove(true);
 			removed = true;
+			callActionCompletedListener();
 		}
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Repeat.java
Patch:
@@ -56,6 +56,8 @@ public class Repeat extends TemporalAction {
 				action = action.copy();
 				oldAction.finish();
 				action.setTarget(target);
+			} else {
+				callActionCompletedListener();
 			}
 		}
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Sequence.java
Patch:
@@ -29,7 +29,7 @@ public class Sequence extends CompositeAction {
 	};
 
 	protected Actor target;
-	protected int currAction = 0;
+	protected int currAction = 0;	
 
 	public static Sequence $ (Action... actions) {
 		Sequence sequence = pool.obtain();
@@ -52,7 +52,8 @@ public class Sequence extends CompositeAction {
 			return;
 		}		
 		
-		if(currAction >= actions.size()) {			
+		if(currAction >= actions.size()) {				
+			callActionCompletedListener();			
 			return;		
 		}
 		

File: extensions/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/chunks/ChunkReader.java
Patch:
@@ -182,8 +182,9 @@ private static Chunk loadChunk(CountingDataInputStream din, byte[] bytes) throws
 		int id = din.readInt();
 		int payloadSize = din.readInt();
 		int numChildren = din.readInt();	
+		int offset = din.getReadBytes();
 		din.skipBytes(payloadSize);				
-		Chunk chunk = new Chunk(id, null, bytes, din.getReadBytes(), payloadSize);
+		Chunk chunk = new Chunk(id, null, bytes, offset, payloadSize);
 		for(int i = 0; i < numChildren; i++) {
 			Chunk child = loadChunk(din, bytes);
 			child.parent = chunk;

File: demos/cuboc/cuboc/src/com/badlogic/cubocy/Map.java
Patch:
@@ -74,7 +74,7 @@ public void update(float deltaTime) {
 		bob.update(deltaTime);
 		if(bob.state == Bob.DEAD) bob = new Bob(this, activeDispenser.bounds.x, activeDispenser.bounds.y);
 		cube.update(deltaTime);
-		if(cube.state == Cube.DEAD) cube = new Cube(this, activeDispenser.bounds.x, activeDispenser.bounds.y);
+		if(cube.state == Cube.DEAD) cube = new Cube(this, bob.bounds.x, bob.bounds.y);
 		for(int i = 0; i < dispensers.size; i++) {
 			if(bob.bounds.overlaps(dispensers.get(i).bounds)) {
 				activeDispenser = dispensers.get(i);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Delay.java
Patch:
@@ -69,7 +69,6 @@ public class Delay extends Action {
 	}
 
 	@Override public Actor getTarget () {
-		action.getTarget();
-		return null;
+		return action.getTarget();		
 	}
 }

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -289,7 +289,7 @@ public ApplicationType getType() {
      */
     @Override
     public int getVersion() {
-        return Build.VERSION.SDK.charAt(0) - '0';
+   	 return Integer.parseInt(android.os.Build.VERSION.SDK);        
     }
 
     @Override

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -405,6 +405,7 @@ public AtlasRegion (AtlasRegion region) {
 			packedHeight = region.packedHeight;
 			originalWidth = region.originalWidth;
 			originalHeight = region.originalHeight;
+			rotate = region.rotate;
 		}
 
 		/**

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglGraphicsBase.java
Patch:
@@ -104,14 +104,16 @@ void resume () {
 
 	void initializeGLInstances (GLAutoDrawable drawable) {
 		String version = drawable.getGL().glGetString(GL.GL_VERSION);
+		String renderer = drawable.getGL().glGetString(GL.GL_RENDERER);
 		major = Integer.parseInt("" + version.charAt(0));
 		minor = Integer.parseInt("" + version.charAt(2));
 
 		if (useGL2 && major >= 2) {
 			gl20 = new JoglGL20(drawable.getGL());
 			gl = gl20;
 		} else {
-			if (major == 1 && minor < 5) {
+			
+			if (major == 1 && minor < 5 || renderer.equals("Mirage Graphics3")) {
 				gl10 = new JoglGL10(drawable.getGL());
 			} else {
 				gl11 = new JoglGL11(drawable.getGL());

File: extensions/hiero/src/com/badlogic/gdx/hiero/unicodefont/UnicodeFont.java
Patch:
@@ -39,8 +39,10 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
+// BOZO - Look at actual pixels to determine glyph size, current size sometimes selects blank pixels (eg Calibri, 45, 'o').
+
 /**
- * A Slick bitmap font that can display unicode glyphs from a TrueTypeFont.
+ * A bitmap font that can display unicode glyphs from a TrueTypeFont.
  * 
  * For efficiency, glyphs are packed on to textures. Glyphs can be loaded to the textures on the fly, when they are first needed
  * for display. However, it is best to load the glyphs that are known to be needed at startup.

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TileMapRenderer.java
Patch:
@@ -266,7 +266,7 @@ private int addBlock (int[][] layer, int layerNum, int blockRow, int blockCol, b
 					if (blended == blendedTiles.contains(tile)) {
 						region = atlas.getRegion(tile);
 						if (region != null) {
-							y = ((layer.length - row) - (region.packedHeight + region.offsetY) / tileHeight) * unitsPerTileY;// + unitsPerTileY*layer.length;
+							y = ((layer.length - row) - (region.packedHeight + region.offsetY) / tileHeight) * unitsPerTileY;
 							x = (col + region.offsetX / tileWidth) * unitsPerTileX;
 							cache.add(region, x, y, unitsPerTileX, unitsPerTileY);
 						}
@@ -283,8 +283,7 @@ private int addBlock (int[][] layer, int layerNum, int blockRow, int blockCol, b
 	 * the first layer and the first row's size.
 	 */
 	public void render () {
-		render(0, 0, (int)(getLayerWidthInBlocks(0, 0) * tilesPerBlockX * unitsPerTileX), (int)(getLayerHeightInBlocks(0)
-			* tilesPerBlockX * unitsPerTileY));
+		render(0, 0, (int)getMapWidthUnits(), (int)(getMapHeightUnits()));
 	}
 
 	/**

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/FadeIn.java
Patch:
@@ -39,9 +39,8 @@ public class FadeIn extends AnimationAction {
 
 	@Override public void setTarget (Actor actor) {
 		this.target = actor;
-		this.target.color.a = 0;
-		this.startAlpha = 0;
-		this.deltaAlpha = 1;
+		this.startAlpha = this.target.color.a;
+		this.deltaAlpha = 1 - this.target.color.a;
 		this.taken = 0;
 		this.done = false;
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/FadeOut.java
Patch:
@@ -39,9 +39,8 @@ public class FadeOut extends AnimationAction {
 
 	@Override public void setTarget (Actor actor) {
 		this.target = actor;
-		this.target.color.a = 1;
-		this.startAlpha = 1;
-		this.deltaAlpha = -1;
+		this.startAlpha = this.target.color.a;
+		this.deltaAlpha = -this.target.color.a;
 		this.taken = 0;
 		this.done = false;
 	}

File: extensions/model-loaders/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonAnimation.java
Patch:
@@ -3,7 +3,7 @@
 import com.badlogic.gdx.graphics.g3d.model.Animation;
 
 public class SkeletonAnimation extends Animation {
-	public SkeletonKeyframe[][] perJointkeyFrames;
+	public final SkeletonKeyframe[][] perJointkeyFrames;
 	
 	public SkeletonAnimation(String name, float totalDuration, SkeletonKeyframe[][] perJointKeyFrames) {
 		super(name, totalDuration);

File: extensions/model-loaders/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonJoint.java
Patch:
@@ -10,9 +10,9 @@ public class SkeletonJoint {
 	public int index;
 	public int parentIndex;
 	public SkeletonJoint parent;
-	public Array<SkeletonJoint> children = new Array<SkeletonJoint>(1);
+	public final Array<SkeletonJoint> children = new Array<SkeletonJoint>(1);
 	
 	public final Vector3 position = new Vector3();	
 	public final Quaternion rotation = new Quaternion(new Vector3(0, 1, 0), 0);	
-	public final Vector3 scale = new Vector3(1, 1, 1);	
+	public final Vector3 scale = new Vector3(1, 1, 1);		
 }
\ No newline at end of file

File: extensions/model-loaders/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonKeyframe.java
Patch:
@@ -8,7 +8,7 @@ public class SkeletonKeyframe {
 	public int parentIndex = -1;
 	public final Vector3 position = new Vector3();
 	public final Vector3 scale = new Vector3(1, 1, 1);
-	public final Quaternion rotation = new Quaternion(0, 0, 0, 1);
+	public final Quaternion rotation = new Quaternion(0, 0, 0, 1);	
 	
 	public String toString() {
 		return "time: " + timeStamp + ", " +

File: gdx/src/com/badlogic/gdx/graphics/VertexAttributes.java
Patch:
@@ -29,7 +29,7 @@ public final class VertexAttributes {
 	 * @author mzechner
 	 * 
 	 */
-	public final class Usage {
+	public static final class Usage {
 		public static final int Position = 0;
 		public static final int Color = 1;
 		public static final int ColorPacked = 5;

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEffect.java
Patch:
@@ -40,7 +40,7 @@ public ParticleEffect () {
 	public ParticleEffect (ParticleEffect effect) {
 		emitters = new Array(true, effect.emitters.size);
 		for (int i = 0, n = effect.emitters.size; i < n; i++)
-			emitters.add(new ParticleEmitter(effect.emitters.items[i]));
+			emitters.add(new ParticleEmitter(effect.emitters.get(i)));
 	}
 
 	public void start () {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidMusic.java
Patch:
@@ -41,7 +41,9 @@ public class AndroidMusic implements Music {
 			Gdx.app.log("AndroidMusic", "error while disposing AndroidMusic instance, non-fatal");
 		} finally {
 			player = null;
-			audio.musics.remove(this);
+			synchronized(audio.musics) {
+				audio.musics.remove(this);
+			}
 		}
 	}
 

File: extensions/model-loaders/src/com/badlogic/gdx/graphics/g3d/model/Model.java
Patch:
@@ -3,13 +3,15 @@
 import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonSubMesh;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.math.collision.BoundingBox;
 
 public interface Model {	
 	public void render();
 	public void render(ShaderProgram program);
 	public Model getSubModel(String ... subMeshNames);
 	public SubMesh getSubMesh(String name);
 	public SubMesh[] getSubMeshes();
+	public void getBoundingBox(BoundingBox bbox);
 	public void setMaterials(Material ... materials);	
 	public void setMaterial(Material material);
 }

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -596,8 +596,8 @@ public void setColor (Color tint) {
 	}
 
 	public void setColor (float r, float g, float b, float a) {
-		int intBits = (int)(255 * a) << 24 | (int)(255 * b) << 16 | (int)(255 * g) << 8 | (int)(255 * r);
-		color = Float.intBitsToFloat(intBits);
+		int intBits = (int)(255 * a) << 24 | (int)(255 * b) << 16 | (int)(255 * g) << 8 | (int)(255 * r);		
+		color = Float.intBitsToFloat((intBits & 0xfeffffff));
 	}
 
 	/**

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -76,7 +76,7 @@ public void setColor (Color tint) {
 
 	public void setColor (float r, float g, float b, float a) {
 		int intBits = ((int)(255 * a) << 24) | ((int)(255 * b) << 16) | ((int)(255 * g) << 8) | ((int)(255 * r));
-		float color = Float.intBitsToFloat(intBits);
+		float color = Float.intBitsToFloat((intBits & 0xfeffffff));
 		if (color == this.color) return;
 		this.color = color;
 		float[] vertices = this.vertices;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -214,9 +214,10 @@ public List<Group> getGroups () {
 	 * @param x the x coordinate of the touch in screen coordinates
 	 * @param y the y coordinate of the touch in screen coordinates
 	 * @param pointer the pointer index
+	 * @param button the button that's been pressed
 	 * @return whether an {@link Actor} in the scene processed the event or not
 	 */
-	public boolean touchDown (int x, int y, int pointer, int newParam) {
+	public boolean touchDown (int x, int y, int pointer, int button) {
 		toStageCoordinates(x, y, coords);
 		Group.toChildCoordinates(root, coords.x, coords.y, point);
 		return root.touchDown(point.x, point.y, pointer);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -84,9 +84,9 @@ protected TouchEvent newObject () {
 
 	ArrayList<KeyEvent> keyEvents = new ArrayList<KeyEvent>();
 	ArrayList<TouchEvent> touchEvents = new ArrayList<TouchEvent>();
-	int[] touchX = new int[10];
-	int[] touchY = new int[10];
-	boolean[] touched = new boolean[10];
+	int[] touchX = new int[40];
+	int[] touchY = new int[40];
+	boolean[] touched = new boolean[40];
 	final boolean hasMultitouch;
 	private HashSet<Integer> keys = new HashSet<Integer>();
 	private SensorManager manager;

File: gdx/src/com/badlogic/gdx/utils/Xml.java
Patch:
@@ -553,7 +553,7 @@ public Array<Element> getChildrenByName(String name) {
 			Array<Element> children = new Array<Element>();
 			if(this.children == null) return children;
 			for(int i = 0; i < this.children.size; i++) {
-				Element child = children.get(i);
+				Element child = this.children.get(i);
 				if(child.name.equals(name)) children.add(child);
 			}
 			return children;

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -490,7 +490,7 @@ public void setSprite (Sprite sprite) {
 		Texture texture = sprite.getTexture();
 		for (int i = 0, n = particles.length; i < n; i++) {
 			Particle particle = particles[i];
-			if (particle == null) break;
+			if (particle == null) continue;
 			particle.setTexture(texture);
 			particle.setOrigin(originX, originY);
 		}

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -20,6 +20,6 @@
 public class JoglDebugStarter {
 
 	public static void main (String[] argv) {
-		new JoglApplication(new com.badlogic.gdx.tests.PickingTest(), "Debug Test", 480, 320, false);
+		new JoglApplication(new com.badlogic.gdx.tests.ActionTest(), "Debug Test", 480, 320, false);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/LifeCycleTest.java
Patch:
@@ -50,8 +50,7 @@ public class LifeCycleTest extends GdxTest {
 
 	@Override public void create () {
 		Gdx.app.log("Test", "Thread=" + Thread.currentThread().getId() + ", app created: " + Gdx.graphics.getWidth() + "x"
-			+ Gdx.graphics.getHeight());
-		System.exit(0);
+			+ Gdx.graphics.getHeight());		
 	}
 
 	@Override public void resize (int width, int height) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MD5Test.java
Patch:
@@ -47,7 +47,7 @@ public class MD5Test extends GdxTest implements InputProcessor {
 		skeleton.joints = new float[anim.frames[0].joints.length];
 		animInfo = new MD5AnimationInfo(anim.frames.length, anim.secondsPerFrame);
 		renderer = new MD5Renderer(model, false, true);
-		renderer.setSkeleton(model.baseSkeleton);
+		renderer.setSkeleton(model.baseSkeleton);		
 
 		// long start = System.nanoTime();
 		// for( int i = 0; i < 100000; i++ )
@@ -84,7 +84,7 @@ public class MD5Test extends GdxTest implements InputProcessor {
 		float renderTime = 0;
 		float skinTime = 0;
 
-		for (int z = 0; z < 50; z += 50) {
+		for (int z = 0; z < 100; z += 50) {
 			gl.glPushMatrix();
 			gl.glTranslatef(0, 0, -z);
 			gl.glRotatef(angle, 0, 1, 0);
@@ -107,6 +107,7 @@ public class MD5Test extends GdxTest implements InputProcessor {
 		batch.begin();
 		font.draw(batch, "fps: " + Gdx.graphics.getFramesPerSecond() + (renderer.isJniUsed() ? ", jni" : ", java")
 			+ ", render time: " + renderTime + ", skin time: " + skinTime, 10, 20);
+		font.draw(batch, "#triangles: " + model.getNumTriangles() + ", #vertices: " + model.getNumVertices(), 10, 40);
 		batch.end();
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureDataTest.java
Patch:
@@ -64,7 +64,7 @@ public void create () {
 			int height = 0;
 			
 			public void load() {
-				Pixmap pixmap = new Pixmap(Gdx.files.internal("data/stone2.png"));
+				Pixmap pixmap = new Pixmap(Gdx.files.internal("data/t8890.png"));
 				Gdx.gl.glTexImage2D(GL10.GL_TEXTURE_2D, 0, pixmap.getGLInternalFormat(), pixmap.getWidth(), pixmap.getHeight(), 0, pixmap.getGLFormat(), pixmap.getGLType(), pixmap.getPixels());
 				width = pixmap.getWidth();
 				height = pixmap.getHeight();

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TileAtlas.java
Patch:
@@ -104,7 +104,7 @@ private static String removePath(String s){
 	}
 
 	private static FileHandle getRelativeFileHandle(FileHandle path, String relativePath){
-		if(relativePath.trim().isEmpty()) return path;
+		if(relativePath.trim().length() == 0) return path;
 		
 		FileHandle child = path;
 		

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Delay.java
Patch:
@@ -65,11 +65,10 @@ public class Delay extends Action {
 	@Override public void finish () {
 		pool.free(this);
 		action.finish();
-		super.finish();
+		if(!listenerFired) super.finish();
 	}
 
 	@Override public Action copy () {
 		return $(action.copy(), duration);
 	}
-
 }

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/MainMenu.java
Patch:
@@ -72,7 +72,7 @@ public MainMenu (Application app) {
 		spriteBatch.draw(logo, 0, 320-128, 480, 128, 0, 0, 512, 256, false, false);
 		spriteBatch.setBlendFunction(GL10.GL_ONE, GL10.GL_ONE_MINUS_SRC_ALPHA);
 		String text = "Touch screen to start!";
-		int width = font.getBounds(text).width;	
+		float width = font.getBounds(text).width;	
 		font.draw(spriteBatch, text, 240 - width / 2, 128);
 		spriteBatch.end();
 	}

File: gdx/src/com/badlogic/gdx/audio/analysis/AudioTools.java
Patch:
@@ -47,7 +47,7 @@ public class AudioTools {
 	 * @param target the target buffer
 	 * @param numSamples the number of samples
 	 */
-	public static native void convertToShort (FloatBuffer source, FloatBuffer target, int numSamples);
+	public static native void convertToShort (FloatBuffer source, ShortBuffer target, int numSamples);
 
 	/**
 	 * Converts the samples in source which are assumed to be interleaved left/right stereo samples to mono, writting the converted

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Layout.java
Patch:
@@ -17,6 +17,8 @@
 
 public interface Layout {
 	public void layout ();
+	
+	public void invalidate ();
 
 	public float getPrefWidth ();
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/Button.java
Patch:
@@ -121,6 +121,9 @@ public Actor hit (float x, float y) {
 	public void layout () {
 	}
 
+	public void invalidate () {
+	}
+
 	public float getPrefWidth () {
 		return unpressedRegion.getRegionWidth();
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapTest.java
Patch:
@@ -47,7 +47,7 @@ public class TiledMapTest extends GdxTest {
 	private static final int SCREEN_WIDTH = 480;
 	private static final int SCREEN_HEIGHT = 320;
 
-	//private static final int[] layersList = {2,3};
+	private static final int[] layersList = {2,3};
 
 	SpriteBatch spriteBatch;
 	BitmapFont font;

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TiledLoader.java
Patch:
@@ -172,8 +172,8 @@ public static TiledMap createMap (FileHandle tmxFile) {
 						}
 					} catch (NumberFormatException e) {
 						throw new GdxRuntimeException("Required attribute missing from TMX file! Property for " + qName + " missing.");
-						// Note: Required attributes are parsed with "Integer.parseInt()" directly
-						// Non-required are parsed with parseIntWithDefault()
+						// Note: Required integer attributes are parsed with "Integer.parseInt()" directly
+						// Non-required integer attributes are parsed with parseIntWithDefault()
 					}
 				}
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglGraphicsBase.java
Patch:
@@ -69,6 +69,7 @@ void initialize (String title, int width, int height, boolean useGL2) {
 		canvas.addGLEventListener(this);
 		this.useGL2 = useGL2;
 		this.glu = new JoglGLU();
+		Gdx.glu = glu;
 	}
 
 	GLCanvas getCanvas () {

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -20,6 +20,6 @@
 public class JoglDebugStarter {
 
 	public static void main (String[] argv) {
-		new JoglApplication(new com.badlogic.gdx.tests.ActionTest(), "Debug Test", 480, 320, false);
+		new JoglApplication(new com.badlogic.gdx.tests.PickingTest(), "Debug Test", 480, 320, false);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/LifeCycleTest.java
Patch:
@@ -51,6 +51,7 @@ public class LifeCycleTest extends GdxTest {
 	@Override public void create () {
 		Gdx.app.log("Test", "Thread=" + Thread.currentThread().getId() + ", app created: " + Gdx.graphics.getWidth() + "x"
 			+ Gdx.graphics.getHeight());
+		System.exit(0);
 	}
 
 	@Override public void resize (int width, int height) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureAtlasTest.java
Patch:
@@ -31,8 +31,7 @@ public class TextureAtlasTest extends GdxTest {
 	BitmapFont font;
 
 	public void create () {
-		batch = new SpriteBatch();
-
+		batch = new SpriteBatch();	
 		atlas = new TextureAtlas(Gdx.files.internal("data/pack"));
 
 		badlogic = atlas.createSprite("badlogicslice");

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
Patch:
@@ -149,7 +149,7 @@ protected void resume () {
 	public void dispose () {
 		for (AndroidMusic music : musics) {
 			music.dispose();
-		}
+		}		
 		soundPool.release();
 	}
 }

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidSound.java
Patch:
@@ -40,7 +40,6 @@ final class AndroidSound implements Sound {
 	}
 
 	@Override public void play (float volume) {
-// int streamVolume = manager.getStreamVolume(AudioManager.STREAM_MUSIC);
 		soundPool.play(soundId, volume, volume, 1, 0, 1);
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -479,6 +479,8 @@ public static int getLwjglKeyCode (int gdxKeyCode) {
 			return Keyboard.KEY_TAB;
 		case Input.Keys.DEL:
 			return Keyboard.KEY_BACK;
+		case Input.Keys.ESCAPE:
+			return Keyboard.KEY_ESCAPE;
 		default:
 			return Keyboard.KEY_NONE;
 		}

File: gdx/src/com/badlogic/gdx/math/Rectangle.java
Patch:
@@ -143,7 +143,7 @@ public boolean overlaps(Rectangle rectangle) {
 					y + height < rectangle.y);
 	}
 
-	public void set (int x, int y, int width, int height) {
+	public void set (float x, float y, float width, float height) {
 		this.x = x;
 		this.y = y;
 		this.width = width;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapTest.java
Patch:
@@ -47,7 +47,7 @@ public class TiledMapTest extends GdxTest {
 	private static final int SCREEN_WIDTH = 480;
 	private static final int SCREEN_HEIGHT = 320;
 
-	private static final int[] layersList = {2,3};
+	//private static final int[] layersList = {2,3};
 
 	SpriteBatch spriteBatch;
 	BitmapFont font;
@@ -76,7 +76,7 @@ public class TiledMapTest extends GdxTest {
 		tmp.set(0, 0, 0);
 		cam.unproject(tmp);
 
-		tileMapRenderer.render(tmp.x, tmp.y, Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), layersList);
+		tileMapRenderer.render(tmp.x, tmp.y, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());//, layersList);
 
 		spriteBatch.begin();
 		font.draw(spriteBatch, "FPS: " + Gdx.graphics.getFramesPerSecond(), 20, 20);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapTest.java
Patch:
@@ -47,7 +47,7 @@ public class TiledMapTest extends GdxTest {
 	private static final int SCREEN_WIDTH = 480;
 	private static final int SCREEN_HEIGHT = 320;
 
-	// private static final int[] layersList = {0,1,2,3};
+	private static final int[] layersList = {2,3};
 
 	SpriteBatch spriteBatch;
 	BitmapFont font;
@@ -76,7 +76,7 @@ public class TiledMapTest extends GdxTest {
 		tmp.set(0, 0, 0);
 		cam.unproject(tmp);
 
-		tileMapRenderer.render(tmp.x, tmp.y, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		tileMapRenderer.render(tmp.x, tmp.y, Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), layersList);
 
 		spriteBatch.begin();
 		font.draw(spriteBatch, "FPS: " + Gdx.graphics.getFramesPerSecond(), 20, 20);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -87,9 +87,9 @@ public Stage (float width, float height, boolean stretch) {
 	 * 
 	 * @param width thew width of the viewport in device independent pixels
 	 * @param height the height of the viewport in device independent pixels
-	 * @param strech whether to stretch the viewport or not
+	 * @param stretch whether to stretch the viewport or not
 	 */
-	public void setViewport (float width, float height, boolean strech) {
+	public void setViewport (float width, float height, boolean stretch) {
 		if (!stretch) {
 			if (width > height) {
 				float toDeviceSpace = Gdx.graphics.getHeight() / height;
@@ -111,6 +111,7 @@ public void setViewport (float width, float height, boolean strech) {
 			this.height = height;
 		}
 
+		this.stretch = stretch;
 		centerX = width / 2;
 		centerY = height / 2;
 

File: extensions/model-loaders/src/com/badlogic/gdx/graphics/g3d/md2/MD2Loader.java
Patch:
@@ -102,7 +102,7 @@ private KeyframedModel buildModel (MD2Header header, MD2Triangle[] triangles, fl
 
 		KeyframedSubMesh subMesh = new KeyframedSubMesh();
 		KeyframedAnimation animation = new KeyframedAnimation();
-		animation.duration = frames.length * 0.2f;
+		animation.totalDuration = frames.length * 0.2f;
 		animation.keyframes = new Keyframe[frames.length];
 
 		for (int frameNum = 0; frameNum < frames.length; frameNum++) {

File: extensions/model-loaders/src/com/badlogic/gdx/graphics/g3d/model/skeleton/Skeleton.java
Patch:
@@ -105,7 +105,7 @@ protected void calculateMatrices(Array<SkeletonKeyframe> joints) {
 	public void setAnimation(String name, float time) {		
 		SkeletonAnimation anim = animations.get(name);
 		if(anim == null) throw new IllegalArgumentException("Animation with name '" + name + "' does not exist");
-		if(time < 0 || time > anim.duration) throw new IllegalArgumentException("time must be 0 <= time <= animation duration");
+		if(time < 0 || time > anim.totalDuration) throw new IllegalArgumentException("time must be 0 <= time <= animation duration");
 		
 		int len = anim.perJointkeyFrames.length;
 		for(int i = 0; i < len; i++) {

File: extensions/model-loaders/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonAnimation.java
Patch:
@@ -1,6 +1,7 @@
 package com.badlogic.gdx.graphics.g3d.model.skeleton;
 
-public class SkeletonAnimation {
-	public float duration;
+import com.badlogic.gdx.graphics.g3d.model.Animation;
+
+public class SkeletonAnimation extends Animation {
 	public SkeletonKeyframe[][] perJointkeyFrames;
 }

File: extensions/model-loaders/src/com/badlogic/gdx/graphics/g3d/orgrexml/OgreXmlLoader.java
Patch:
@@ -366,7 +366,7 @@ private Skeleton generateSkeleton (com.badlogic.gdx.graphics.g3d.orgrexml.skelet
 		for(int i = 0; i < animations.size(); i++) {
 			Animation animation = animations.get(i);
 			SkeletonAnimation skelAnim = new SkeletonAnimation();
-			skelAnim.duration = animation.length;
+			skelAnim.totalDuration = animation.length;
 			skelAnim.perJointkeyFrames = new SkeletonKeyframe[skel.bindPoseJoints.size][];
 			
 			List<Track> tracks = animation.getTracks().getTrack();

File: extensions/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/Viewer.java
Patch:
@@ -115,7 +115,7 @@ public static void main(String[] argv) {
 		}
 		
 		time += Gdx.graphics.getDeltaTime() / 10;
-		if(time > model.skeleton.animations.get(animation).duration) {
+		if(time > model.skeleton.animations.get(animation).totalDuration) {
 			time = 0;
 		}					
 	}

File: extensions/model-loaders/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonSubMesh.java
Patch:
@@ -2,8 +2,9 @@
 
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.g3d.Material;
+import com.badlogic.gdx.graphics.g3d.model.SubMesh;
 
-public class SubMesh {
+public class SkeletonSubMesh extends SubMesh {
 	public String name;		
 	public Material material;
 	public Mesh mesh;

File: extensions/model-loaders/src/com/badlogic/gdx/graphics/g3d/test/MD2Viewer.java
Patch:
@@ -6,7 +6,7 @@
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g3d.md2.MD2Loader;
+import com.badlogic.gdx.graphics.g3d.md2old.MD2Loader;
 import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedModel;
 
 public class MD2Viewer implements ApplicationListener {
@@ -28,6 +28,7 @@ public class MD2Viewer implements ApplicationListener {
 	}
 
 	@Override public void render () {
+		Gdx.gl.glClearColor(1, 1, 1, 1);
 		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
 		Gdx.gl.glEnable(GL10.GL_DEPTH_TEST);
 		
@@ -37,7 +38,7 @@ public class MD2Viewer implements ApplicationListener {
 		angle += 45 * Gdx.graphics.getDeltaTime();
 		Gdx.gl10.glRotatef(angle, 0, 1, 0);
 		
-		Gdx.gl.glEnable(GL10.GL_TEXTURE_2D);
+		Gdx.gl.glEnable(GL10.GL_TEXTURE_2D);		
 		texture.bind();		
 		
 		model.subMeshes[0].mesh.setVertices(model.subMeshes[0].animations.get("all").keyframes[0].vertices);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
Patch:
@@ -208,7 +208,7 @@ private void createBoxes () {
 				// get the world manifold from which we get the
 				// contact points. A manifold can have 0, 1 or 2
 				// contact points.
-				WorldManifold manifold = contact.GetWorldManifold();
+				WorldManifold manifold = contact.getWorldManifold();
 				int numContactPoints = manifold.getNumberOfContactPoints();
 				for (int j = 0; j < numContactPoints; j++) {
 					Vector2 point = manifold.getPoints()[j];

File: gdx/src/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -526,7 +526,7 @@ private void beginContact (long contactAddr) {
 
 	private void endContact (long contactAddr) {
 		contact.addr = contactAddr;
-		contact.GetWorldManifold();
+		contact.getWorldManifold();
 		if (contactListener != null) contactListener.endContact(contact);
 	}
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglInput.java
Patch:
@@ -418,6 +418,8 @@ protected static int translateKeyCode (int keyCode) {
 		if (keyCode == java.awt.event.KeyEvent.VK_END) return Input.Keys.KEYCODE_END;
 		if (keyCode == java.awt.event.KeyEvent.VK_INSERT) return Input.Keys.KEYCODE_INSERT;
 		if (keyCode == java.awt.event.KeyEvent.VK_NUMPAD5) return Input.Keys.KEYCODE_DPAD_CENTER;
+		if (keyCode == java.awt.event.KeyEvent.VK_PAGE_UP) return Input.Keys.KEYCODE_PAGE_UP;
+		if (keyCode == java.awt.event.KeyEvent.VK_PAGE_DOWN) return Input.Keys.KEYCODE_PAGE_DOWN;
 
 		return Input.Keys.KEYCODE_UNKNOWN;
 	}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -357,7 +357,7 @@ public static int getGdxKeyCode (int lwjglKeyCode) {
 		case Keyboard.KEY_NUMPAD5:
 			return Input.Keys.KEYCODE_DPAD_CENTER;
 		case Keyboard.KEY_BACK:
-			return Input.Keys.KEYCODE_DEL;
+			return Input.Keys.KEYCODE_DEL;		
 		default:
 			return Input.Keys.KEYCODE_UNKNOWN;
 		}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
Patch:
@@ -73,8 +73,8 @@ protected void resume () {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override public AudioDevice newAudioDevice (boolean isMono) {
-		return new AndroidAudioDevice(isMono);
+	@Override public AudioDevice newAudioDevice (int samplingRate, boolean isMono) {
+		return new AndroidAudioDevice(samplingRate, isMono);
 	}
 
 	/**

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudioDevice.java
Patch:
@@ -40,11 +40,11 @@ class AndroidAudioDevice implements AudioDevice {
 	/** the latency in samples **/
 	private final int latency;
 
-	AndroidAudioDevice (boolean isMono) {
+	AndroidAudioDevice (int samplingRate, boolean isMono) {
 		this.isMono = isMono;
-		int minSize = AudioTrack.getMinBufferSize(44100, isMono ? AudioFormat.CHANNEL_CONFIGURATION_MONO
+		int minSize = AudioTrack.getMinBufferSize(samplingRate, isMono ? AudioFormat.CHANNEL_CONFIGURATION_MONO
 			: AudioFormat.CHANNEL_CONFIGURATION_STEREO, AudioFormat.ENCODING_PCM_16BIT);
-		track = new AudioTrack(AudioManager.STREAM_MUSIC, 44100, isMono ? AudioFormat.CHANNEL_CONFIGURATION_MONO
+		track = new AudioTrack(AudioManager.STREAM_MUSIC, samplingRate, isMono ? AudioFormat.CHANNEL_CONFIGURATION_MONO
 			: AudioFormat.CHANNEL_CONFIGURATION_STEREO, AudioFormat.ENCODING_PCM_16BIT, minSize, AudioTrack.MODE_STREAM);
 		track.play();
 		latency = minSize / (isMono?1:2);

File: backends/gdx-backends-angle/src/com/badlogic/gdx/backends/angle/AngleAudio.java
Patch:
@@ -122,8 +122,8 @@ public boolean writeSamples (int numSamples, float[] buffer) {
 		}
 	}
 
-	public AudioDevice newAudioDevice (boolean isMono) {
-		return new AngleAudioDevice(isMono);
+	public AudioDevice newAudioDevice (int samplingRate, boolean isMono) {
+		return new AngleAudioDevice(samplingRate, isMono);
 	}
 
 	public Music newMusic (FileHandle file) {

File: backends/gdx-backends-angle/src/com/badlogic/gdx/backends/angle/AngleAudioDevice.java
Patch:
@@ -38,11 +38,11 @@ final class AngleAudioDevice implements AudioDevice {
 	/** byte buffer **/
 	private byte[] bytes = new byte[44100 * 2 * 2];
 
-	public AngleAudioDevice (boolean isMono) {
+	public AngleAudioDevice (int samplingRate, boolean isMono) {
 		this.isMono = isMono;
 
 		try {
-			AudioFormat format = new AudioFormat(44100.0f, 16, isMono ? 1 : 2, true, false);
+			AudioFormat format = new AudioFormat(samplingRate, 16, isMono ? 1 : 2, true, false);
 			line = AudioSystem.getSourceDataLine(format);
 			line.open(format, 4410 * 2);
 			line.start();

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/JavaSoundAudioDevice.java
Patch:
@@ -30,13 +30,13 @@ public class JavaSoundAudioDevice implements AudioDevice {
 	private final boolean isMono;
 	private byte[] bytes = new byte[44100 * 2 * 2];
 
-	public JavaSoundAudioDevice (boolean isMono) {
+	public JavaSoundAudioDevice (int samplingRate, boolean isMono) {
 		this.isMono = isMono;
 
 		try {
-			AudioFormat format = new AudioFormat(44100.0f, 16, isMono ? 1 : 2, true, false);
+			AudioFormat format = new AudioFormat(samplingRate, 16, isMono ? 1 : 2, true, false);
 			line = AudioSystem.getSourceDataLine(format);
-			line.open(format, 4410 * 2);
+			line.open(format, Math.min(1024, samplingRate / 10) * 2);
 			line.start();
 		} catch (Exception ex) {
 			throw new GdxRuntimeException("Error creating JavaSoundAudioDevice.", ex);

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALAudio.java
Patch:
@@ -165,9 +165,9 @@ public void dispose () {
 		AL.destroy();
 	}
 
-	public AudioDevice newAudioDevice (boolean isMono) {
+	public AudioDevice newAudioDevice (int samplingRate, boolean isMono) {
 		// BOZO - Write OpenAL device.
-		return new JavaSoundAudioDevice(isMono);
+		return new JavaSoundAudioDevice(samplingRate, isMono);
 	}
 
 	public AudioRecorder newAudioRecoder (int samplingRate, boolean isMono) {

File: gdx/src/com/badlogic/gdx/Audio.java
Patch:
@@ -41,15 +41,16 @@
  */
 public interface Audio {
 	/**
-	 * Creates a new {@link AudioDevice} either in 44.1khz mono or stereo mode. The AudioDevice has to be disposed via its
+	 * Creates a new {@link AudioDevice} either in mono or stereo mode. The AudioDevice has to be disposed via its
 	 * {@link AudioDevice#dispose()} method when it is no longer used.
 	 * 
+	 * @param samplingRate the sampling rate.
 	 * @param isMono whether the AudioDevice should be in mono or stereo mode
 	 * @return the AudioDevice
 	 * 
 	 * @throws GdxRuntimeException in case the device could not be created
 	 */
-	public AudioDevice newAudioDevice (boolean isMono);
+	public AudioDevice newAudioDevice (int samplingRate, boolean isMono);
 
 	/**
 	 * Creates a new {@link AudioRecorder}. The AudioRecorder has to be disposed after it is no longer used.

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AudioDeviceTest.java
Patch:
@@ -25,7 +25,7 @@ public class AudioDeviceTest extends GdxTest {
 
 	@Override public void create () {
 		if (thread == null) {
-			final AudioDevice device = Gdx.app.getAudio().newAudioDevice(false);
+			final AudioDevice device = Gdx.app.getAudio().newAudioDevice(44100, false);
 			thread = new Thread(new Runnable() {
 				@Override public void run () {
 					final float frequency = 440;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AudioRecorderTest.java
Patch:
@@ -29,7 +29,7 @@ public class AudioRecorderTest extends GdxTest {
 	ImmediateModeRenderer renderer;
 
 	@Override public void create () {
-		device = Gdx.audio.newAudioDevice(true);
+		device = Gdx.audio.newAudioDevice(44100, true);
 		recorder = Gdx.audio.newAudioRecoder(44100, true);
 		renderer = new ImmediateModeRenderer();
 
@@ -65,7 +65,7 @@ public class AudioRecorderTest extends GdxTest {
 	}
 
 	@Override public void resume () {
-		device = Gdx.audio.newAudioDevice(true);
+		device = Gdx.audio.newAudioDevice(44100, true);
 		recorder = Gdx.audio.newAudioRecoder(44100, true);
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/OrthoCamController.java
Patch:
@@ -23,7 +23,7 @@
 public class OrthoCamController extends InputAdapter {
 	final OrthographicCamera camera;
 	final Vector3 curr = new Vector3();
-	final Vector3 last = new Vector3(-1, -1, 0);	
+	final Vector3 last = new Vector3(-1, -1, -1);	
 	final Vector3 delta = new Vector3();
 	
 	public OrthoCamController(OrthographicCamera camera) {

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/JavaSoundAudioDevice.java
Patch:
@@ -57,8 +57,8 @@ public void writeSamples (short[] samples, int offset, int numSamples) {
 
 		for (int i = offset, j = 0; i < offset + numSamples; i++, j += 2) {
 			short value = samples[i];
-			bytes[j + 1] = (byte)(value & 0xff);
-			bytes[j] = (byte)(value >> 8);
+			bytes[j] = (byte)(value & 0xff);
+			bytes[j+1] = (byte)(value >> 8);
 		}
 
 		int writtenBytes = line.write(bytes, 0, numSamples * 2);

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/renderer/GdxFont.java
Patch:
@@ -143,7 +143,7 @@ public int computeTextWidth (CharSequence str, int start, int end) {
 	}
 
 	public int computeVisibleGlpyhs (CharSequence str, int start, int end, int width) {
-		return bitmapFont.computeVisibleGlpyhs(str, start, end, width);
+		return bitmapFont.computeVisibleGlyphs(str, start, end, width);
 	}
 
 	FontState evalFontState (AnimationState animationState) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
Patch:
@@ -313,7 +313,7 @@ public TextBounds setWrappedText (CharSequence str, float x, float y, float wrap
 		int start = 0;
 		int numLines = 0;
 		while (start < length) {
-			int lineEnd = start + font.computeVisibleGlpyhs(str, start, BitmapFont.indexOf(str, '\n', start), wrapWidth);
+			int lineEnd = start + font.computeVisibleGlyphs(str, start, BitmapFont.indexOf(str, '\n', start), wrapWidth);
 			if (lineEnd < length) {
 				while (lineEnd > start) {
 					char ch = str.charAt(lineEnd);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VBOVATest.java
Patch:
@@ -46,6 +46,9 @@ public class VBOVATest extends GdxTest {
 	boolean isStatic = false;
 
 	@Override public void create () {
+		int viewport[] = new int[4];
+		Gdx.gl10.glGetIntegerv(GL11.GL_VIEWPORT, viewport, 0);
+		Gdx.gl10.glGetIntegerv(GL11.GL_VIEWPORT, viewport, 0);
 		VertexAttribute[] attributes = {new VertexAttribute(Usage.Position, 3, "a_pos")};
 		vbo = new VertexBufferObject(false, TRIANGLES * 3, attributes);
 		vbosd = new VertexBufferObjectSubData(false, TRIANGLES * 3, attributes);

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -216,10 +216,10 @@ public T peek () {
 	}
 
 	public void clear () {
-		size = 0;
 		Object[] items = this.items;
 		for (int i = 0, n = size; i < n; i++)
 			items[i] = null;
+		size = 0;
 	}
 
 	/**

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -445,7 +445,7 @@ void unregisterSensorListeners() {
 		if(peripheral == Peripheral.HardwareKeyboard) return keyboardAvailable;
 		if(peripheral == Peripheral.OnscreenKeyboard) return true;
 		if(peripheral == Peripheral.Vibrator) return vibrator != null;
-		if(peripheral == Peripheral.MultitouchScreen) return touchHandler instanceof AndroidMultiTouchHandler;
+		if(peripheral == Peripheral.MultitouchScreen) return hasMultitouch;
 		return false;
 	}
 }

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLocklessInput.java
Patch:
@@ -423,7 +423,7 @@ private void updateOrientation() {
 		if(peripheral == Peripheral.HardwareKeyboard) return keyboardAvailable;
 		if(peripheral == Peripheral.OnscreenKeyboard) return true;
 		if(peripheral == Peripheral.Vibrator) return vibrator != null;
-		if(peripheral == Peripheral.MultitouchScreen) return touchHandler instanceof AndroidMultiTouchHandler;
+		if(peripheral == Peripheral.MultitouchScreen) return hasMultitouch;
 		return false;
 	}
 }

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -445,6 +445,7 @@ void unregisterSensorListeners() {
 		if(peripheral == Peripheral.HardwareKeyboard) return keyboardAvailable;
 		if(peripheral == Peripheral.OnscreenKeyboard) return true;
 		if(peripheral == Peripheral.Vibrator) return vibrator != null;
+		if(peripheral == Peripheral.MultitouchScreen) return touchHandler instanceof AndroidMultiTouchHandler;
 		return false;
 	}
 }

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLocklessInput.java
Patch:
@@ -423,6 +423,7 @@ private void updateOrientation() {
 		if(peripheral == Peripheral.HardwareKeyboard) return keyboardAvailable;
 		if(peripheral == Peripheral.OnscreenKeyboard) return true;
 		if(peripheral == Peripheral.Vibrator) return vibrator != null;
+		if(peripheral == Peripheral.MultitouchScreen) return touchHandler instanceof AndroidMultiTouchHandler;
 		return false;
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ScreenCaptureTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
 import com.badlogic.gdx.tests.utils.GdxTest;
-import com.badlogic.gdx.tests.utils.ScreenUtils;
+import com.badlogic.gdx.utils.ScreenUtils;
 
 public class ScreenCaptureTest extends GdxTest implements InputProcessor {
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFileHandle.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.backends.android;
 
 import java.io.File;
@@ -44,6 +45,7 @@ public class AndroidFileHandle extends FileHandle {
 	}
 
 	public FileHandle child (String name) {
+		if (file.getPath().length() == 0) return new AndroidFileHandle(assets, new File(name), type);
 		return new AndroidFileHandle(assets, new File(file, name), type);
 	}
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglFileHandle.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.backends.jogl;
 
 import java.io.File;
@@ -34,6 +35,7 @@ public class JoglFileHandle extends FileHandle {
 	}
 
 	public FileHandle child (String name) {
+		if (file.getPath().length() == 0) return new JoglFileHandle(new File(name), type);
 		return new JoglFileHandle(new File(file, name), type);
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglFileHandle.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
+
 package com.badlogic.gdx.backends.lwjgl;
 
 import java.io.File;
@@ -34,6 +35,7 @@ final class LwjglFileHandle extends FileHandle {
 	}
 
 	public FileHandle child (String name) {
+		if (file.getPath().length() == 0) return new LwjglFileHandle(new File(name), type);
 		return new LwjglFileHandle(new File(file, name), type);
 	}
 

File: backends/gdx-backends-angle/src/com/badlogic/gdx/backends/angle/AngleFileHandle.java
Patch:
@@ -48,6 +48,7 @@ final class AngleFileHandle extends FileHandle {
 	}
 
 	public FileHandle child (String name) {
+		if (file.getPath().length() == 0) return new AngleFileHandle(new File(name), type);
 		return new AngleFileHandle(new File(file, name), type);
 	}
 

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/TWL.java
Patch:
@@ -168,7 +168,7 @@ public boolean touchUp (int x, int y, int pointer, int button) {
 			ignoreMouse = false;
 			return false;
 		}
-		boolean handled = gui.handleMouse(x, y, 0, false);
+		boolean handled = gui.handleMouse(x, y, button, false);
 		if (Gdx.app.getType() == ApplicationType.Android) {
 			// Move mouse away since there is no mouse cursor on android.
 			gui.handleMouse(-9999, -9999, -1, false);

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -89,7 +89,6 @@ public TextureAtlas (FileHandle packFile, FileHandle imagesDir, boolean flip) {
 				else if (pageImage == null) {
 					FileHandle file = imagesDir.child(line);
 
-					// FIXME - Actually load in the requested format.
 					Format format = Format.valueOf(readValue(reader));
 
 					readTuple(reader);
@@ -108,7 +107,7 @@ else if (direction.equals("xy")) {
 						repeatY = Repeat;
 					}
 
-					pageImage = new Texture(file, TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false);
+					pageImage = new Texture(file, format, TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false);
 					pageImage.setFilter(min, max);
 					pageImage.setWrap(repeatX, repeatY);
 					textures.add(pageImage);

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/renderer/GdxRenderer.java
Patch:
@@ -130,9 +130,8 @@ public void setClipRect (Rect rect) {
 	public Font loadFont (URL baseUrl, Map<String, String> parameter, Collection<FontParameter> conditionalParameter)
 		throws IOException {
 		String fileName = parameter.get("filename");
-		if (fileName == null) {
-			throw new IllegalArgumentException("filename parameter required");
-		}
+		if (fileName == null) throw new IllegalArgumentException("Font filename parameter is required.");
+		if (!fileName.startsWith("/")) fileName = "/" + fileName;
 		BitmapFont bitmapFont = getActiveCacheContext().loadBitmapFont(new URL(baseUrl, fileName));
 		return new GdxFont(this, bitmapFont, parameter, conditionalParameter);
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/Image.java
Patch:
@@ -21,7 +21,7 @@
 import com.badlogic.gdx.scenes.scene2d.Actor;
 
 public class Image extends Actor {
-	public final TextureRegion region;
+	public TextureRegion region;
 
 	public Image (String name) {
 		super(name);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -178,7 +178,7 @@ public class GdxTests
 		MeshShaderTest.class,
 		MeshTest.class,		
 		//Mpg123Test.class,
-		MultitouchTest.class,
+		MultitouchTest.class,		
 		MusicTest.class,
 		MyFirstTriangle.class,
 		ObjTest.class,

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -20,6 +20,6 @@
 public class JoglDebugStarter {
 
 	public static void main (String[] argv) {
-		new JoglApplication(new com.badlogic.gdx.tests.MatrixJNITest(), "Debug Test", 480, 320, false);
+		new JoglApplication(new com.badlogic.gdx.tests.CullTest(), "Debug Test", 480, 320, false);
 	}
 }

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -20,6 +20,6 @@
 public class JoglDebugStarter {
 
 	public static void main (String[] argv) {
-		new JoglApplication(new com.badlogic.gdx.tests.KinematicBodyTest(), "Debug Test", 480, 320, false);
+		new JoglApplication(new com.badlogic.gdx.tests.MatrixJNITest(), "Debug Test", 480, 320, false);
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TiledLayer.java
Patch:
@@ -30,7 +30,7 @@ public class TiledLayer {
 	public final int width, height;
 
 	/** Contains the tile ids, addressed as [row][column]. */
-	public final int[][] tile;
+	public final int[][] tiles;
 
 	/**
 	 * Constructs a new TiledLayer, typically used by {@link TiledLoader}
@@ -42,6 +42,6 @@ public class TiledLayer {
 		this.name = name;
 		this.width = width;
 		this.height = height;
-		tile = new int[height][width];
+		tiles = new int[height][width];
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -254,7 +254,7 @@ public static void toChildCoordinates (Actor child, float x, float y, Vector2 ou
 	@Override protected boolean touchUp (float x, float y, int pointer) {
 		if (!touchable) return false;
 
-		if (focusedActor != null) {
+		if (focusedActor[pointer] != null) {
 			point.x = x;
 			point.y = y;
 			focusedActor[pointer].toLocalCoordinates(point);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -41,6 +41,7 @@
 import com.badlogic.gdx.tests.BitmapFontFlipTest;
 import com.badlogic.gdx.tests.BitmapFontTest;
 import com.badlogic.gdx.tests.BobTest;
+import com.badlogic.gdx.tests.Box2DInitialOverlapTest;
 import com.badlogic.gdx.tests.Box2DTest;
 import com.badlogic.gdx.tests.Box2DTestCollection;
 import com.badlogic.gdx.tests.CompassTest;
@@ -143,6 +144,7 @@ public class GdxTests
 		BitmapFontFlipTest.class,
 		BitmapFontTest.class,
 		BobTest.class,
+		Box2DInitialOverlapTest.class,
 		Box2DTest.class,
 		Box2DTestCollection.class,
 		CompassTest.class,

File: extensions/image-packer/src/com/badlogic/gdx/imagepacker/TexturePacker.java
Patch:
@@ -249,13 +249,14 @@ private boolean writePage (String prefix, File outputDir) throws IOException {
 			type = BufferedImage.TYPE_INT_ARGB;
 			break;
 		case RGB565:
+		case RGB888:
 			type = BufferedImage.TYPE_INT_RGB;
 			break;
 		case Alpha:
 			type = BufferedImage.TYPE_BYTE_GRAY;
 			break;
 		default:
-			throw new RuntimeException();
+			throw new RuntimeException("Luminance Alpha format is not supported.");
 		}
 
 		int imageNumber = 1;

File: gdx/src/com/badlogic/gdx/utils/AtomicQueue.java
Patch:
@@ -1,6 +1,4 @@
 /*
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
- * 
  * Copyright (c) 2008-2010, Matthias Mann
  * 
  * All rights reserved.

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/JavaSoundAudioDevice.java
Patch:
@@ -72,7 +72,7 @@ public void writeSamples (float[] samples, int offset, int numSamples) {
 			if (fValue > 1) fValue = 1;
 			if (fValue < -1) fValue = -1;
 			short value = (short)(fValue * Short.MAX_VALUE);
-			bytes[j] = (byte)(value | 0xff);
+			bytes[j] = (byte)(value & 0xff);
 			bytes[j + 1] = (byte)(value >> 8);
 		}
 

File: gdx/src/com/badlogic/gdx/graphics/Color.java
Patch:
@@ -213,9 +213,8 @@ public static float toFloatBits (int r, int g, int b, int a) {
 	 * @param a the alpha component, 0 - 255
 	 * @return the packed color as a 32-bit int
 	 */
-	public static float toIntBits (int r, int g, int b, int a) {
+	public static int toIntBits (int r, int g, int b, int a) {
 		return (a << 24) | (b << 16) | (g << 8) | r;
-
 	}
 
 	/**

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/Settings.java
Patch:
@@ -22,7 +22,7 @@ public static void load() {
             for(int i = 0; i < 5; i++) {
                 highscores[i] = Integer.parseInt(in.readLine());
             }
-        } catch (Exception e) {
+        } catch (Throwable e) {
             // :( It's ok we have defaults        
         } finally {
             try {
@@ -42,7 +42,7 @@ public static void save() {
                 out.write(Integer.toString(highscores[i]));
             }
 
-        } catch (IOException e) {
+        } catch (Throwable e) {
         } finally {
             try {
                 if (out != null)

File: extensions/model-loaders/src/com/badlogic/gdx/graphics/g3d/obj/ObjLoader.java
Patch:
@@ -11,7 +11,7 @@
  * governing permissions and limitations under the License.
  */
 
-package com.solaria.utils;
+package com.badlogic.gdx.graphics.g3d.obj;
 
 import java.io.BufferedReader;
 import java.io.IOException;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/Button.java
Patch:
@@ -66,8 +66,8 @@ public Button (String name, TextureRegion region) {
 
 	public Button (String name, TextureRegion unpressedRegion, TextureRegion pressedRegion) {
 		super(name);
-		width = unpressedRegion.getRegionWidth();
-		height = unpressedRegion.getRegionHeight();
+		width = Math.abs(unpressedRegion.getRegionWidth());
+		height = Math.abs(unpressedRegion.getRegionHeight());
 		originX = width / 2.0f;
 		originY = height / 2.0f;
 		this.unpressedRegion = new TextureRegion(unpressedRegion);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/FastImage.java
Patch:
@@ -37,8 +37,8 @@ public FastImage (String name, Texture texture) {
 
 	public FastImage (String name, TextureRegion region) {
 		super(name);
-		width = region.getRegionWidth();
-		height = region.getRegionHeight();
+		width = Math.abs(region.getRegionWidth());
+		height = Math.abs(region.getRegionHeight());
 		originX = width / 2.0f;
 		originY = height / 2.0f;
 		this.region = new TextureRegion(region);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/Image.java
Patch:
@@ -37,8 +37,8 @@ public Image (String name, Texture texture) {
 
 	public Image (String name, TextureRegion region) {
 		super(name);
-		width = region.getRegionWidth();
-		height = region.getRegionHeight();
+		width = Math.abs(region.getRegionWidth());
+		height = Math.abs(region.getRegionHeight());
 		originX = width / 2.0f;
 		originY = height / 2.0f;
 		this.region = new TextureRegion(region);

File: extensions/particle-editor/src/com/badlogic/gdx/graphics/particles/ParticleEditor.java
Patch:
@@ -237,7 +237,7 @@ class Renderer implements ApplicationListener, InputProcessor {
 		public void create () {
 			if (spriteBatch != null) return;
 
-			((LwjglGraphics)Gdx.graphics).setEnforcePotImages(false);
+			Texture.setEnforcePotImages(false);
 
 			spriteBatch = new SpriteBatch();
 

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/Layout.java
Patch:
@@ -43,7 +43,8 @@ public Layout (String theme, boolean eatEvents) {
 	}
 
 	protected boolean handleEvent (Event evt) {
-		return eatEvents;
+		boolean handled = super.handleEvent(evt);
+		return eatEvents ? true : handled;
 	}
 
 	public Direction horizontal () {

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/TWL.java
Patch:
@@ -279,6 +279,8 @@ static public int getTwlKeyCode (int gdxKeyCode) {
 		case Keys.KEYCODE_COMMA:
 			return Event.KEY_COMMA;
 		case Keys.KEYCODE_DEL:
+			return Event.KEY_BACK;
+		case Keys.KEYCODE_FORWARD_DEL:
 			return Event.KEY_DELETE;
 		case Keys.KEYCODE_DPAD_LEFT:
 			return Event.KEY_LEFT;

File: gdx/src/com/badlogic/gdx/Input.java
Patch:
@@ -93,6 +93,7 @@ public class Keys {
 		public static final int KEYCODE_COMMA = 55;
 		public static final int KEYCODE_D = 32;
 		public static final int KEYCODE_DEL = 67;
+		public static final int KEYCODE_FORWARD_DEL = 112;
 		public static final int KEYCODE_DPAD_CENTER = 23;
 		public static final int KEYCODE_DPAD_DOWN = 20;
 		public static final int KEYCODE_DPAD_LEFT = 21;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/EdgeDetectionTest.java
Patch:
@@ -104,7 +104,7 @@ public void render() {
 		batchShader.setUniformi("u_filterSize", filter.length);
 		batchShader.setUniform1fv("u_filter", filter, 0, filter.length);
 		batchShader.setUniform2fv("u_offsets", offsets, 0, offsets.length);		
-		batch.draw(fboRegion, 0, 0, Gdx.graphics.getWidth() / 2, Gdx.graphics.getHeight() / 2);
+		batch.draw(fboRegion, 0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		batch.end();
 		logger.log();
 	}

File: gdx/src/com/badlogic/gdx/Files.java
Patch:
@@ -37,8 +37,8 @@ public enum FileType {
 
 		/**
 		 * Path relative to the asset directory on Android and to the application's root directory on the desktop. On the desktop,
-		 * if the file is not, the classpath is then checked. This enables files to be found when using JWS or applets. Internal
-		 * files are always readonly.
+		 * if the file is not found, then the classpath is checked. This enables files to be found when using JWS or applets.
+		 * Internal files are always readonly.
 		 */
 		Internal,
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -128,7 +128,7 @@ private void mainLoop () {
 			listener.render();
 			audio.update();
 			Display.update();
-			Display.sync(60);
+			if (graphics.vsync) Display.sync(60);
 		}
 
 		listener.pause();

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -158,7 +158,7 @@ public void run () {
 				listener.render();
 				audio.update();
 				Display.update();
-				Display.sync(60);
+				if (graphics.vsync) Display.sync(60);
 			}
 		};
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -55,7 +55,7 @@ public final class LwjglGraphics implements Graphics {
 	int height;
 	String title;
 	Canvas canvas;
-	boolean enforcePotImages = true;
+	boolean vsync = true;
 
 	LwjglGraphics (String title, int width, int height, boolean useGL2IfAvailable) {
 		useGL2 = useGL2IfAvailable;
@@ -212,7 +212,7 @@ private void initiateGLInstances () {
 		return (Toolkit.getDefaultToolkit().getScreenResolution() / 2.54f);
 	}
 
-	public void setEnforcePotImages (boolean enforcePotImages) {
-		this.enforcePotImages = enforcePotImages;
+	public void setVsync (boolean vsync) {
+		this.vsync = vsync;
 	}
 }

File: gdx/src/com/badlogic/gdx/utils/Array.java
Patch:
@@ -65,6 +65,7 @@ public Array (boolean ordered, int capacity) {
 	 * @param capacity Any elements added beyond this will cause the backing array to be grown.
 	 */
 	public Array (boolean ordered, int capacity, Class<T> arrayType) {
+		this.ordered = ordered;
 		items = (T[])java.lang.reflect.Array.newInstance(arrayType, capacity);
 	}
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglNativesLoader.java
Patch:
@@ -26,6 +26,7 @@ public class JoglNativesLoader {
 	 */
 	static void load () {
 		GdxNativesLoader.load();
+		if(GdxNativesLoader.disableNativesLoading) return;
 
 		if (nativesLoaded) return;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglNativesLoader.java
Patch:
@@ -41,6 +41,7 @@ final class LwjglNativesLoader {
 
 	static void load () {
 		GdxNativesLoader.load();
+		if(GdxNativesLoader.disableNativesLoading) return;
 		if (!load) return;
 		if (isWindows) {
 			extractLibrary("OpenAL32.dll", "OpenAL64.dll");

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureRegion.java
Patch:
@@ -252,8 +252,10 @@ public TextureRegion[][] split(int tileWidth, int tileHeight) {
 		int rows = height / tileHeight;
 		int cols = width / tileWidth;		
 		
+		int startX = x;
 		TextureRegion[][] tiles = new TextureRegion[rows][cols];		
 		for(int row = 0; row < rows; row++, y += tileHeight) {
+			x = startX;
 			for(int col = 0; col < cols; col++, x += tileWidth) {
 				tiles[row][col] = new TextureRegion(texture, x, y, tileWidth, tileHeight);
 			}

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -18,6 +18,6 @@
 public class JoglDebugStarter {
 
 	public static void main (String[] argv) {
-		new JoglApplication(new com.badlogic.gdx.tests.FramebufferToTextureTest(), "Debug Test", 480, 320, false);
+		new JoglApplication(new com.badlogic.gdx.tests.SimpleAnimationTest(), "Debug Test", 480, 320, false);
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TiledMapRenderer.java
Patch:
@@ -298,7 +298,7 @@ public int getMapWidthPixels () {
 	 * */
 	public int getRow (int worldY) {
 		if (worldY < 0) return 0;
-		if (worldY > pixelsPerMapY) return tileHeight - 1;
+		if (worldY > pixelsPerMapY) return pixelsPerMapY/tileHeight;
 		return worldY / tileHeight;
 	}
 	
@@ -308,7 +308,7 @@ public int getRow (int worldY) {
 	 * */
 	public int getCol (int worldX) {
 		if (worldX < 0) return 0;
-		if (worldX > pixelsPerMapX) return tileWidth - 1;
+		if (worldX > pixelsPerMapX) return pixelsPerMapX/tileWidth;
 		return worldX / tileWidth;
 	}
 

File: gdx/src/com/badlogic/gdx/Version.java
Patch:
@@ -22,5 +22,5 @@
  */
 public class Version {
 	/** the current version of libgdx in the major.minor format **/
-	public static String VERSION = "0.9";
+	public static String VERSION = "0.91";
 }

File: gdx/src/com/badlogic/gdx/math/Intersector.java
Patch:
@@ -313,7 +313,7 @@ public static boolean intersectRaySphere (Ray ray, Vector3 center, float radius,
 	 * Quick check wheter the given {@link Ray} and {@link BoundingBox} intersect.
 	 * 
 	 * @param ray The ray
-	 * @param bounds The bounding box
+	 * @param box The bounding box
 	 * @return Wheter the ray and the bounding box intersect.
 	 */
 	static public boolean intersectRayBoundsFast (Ray ray, BoundingBox box) {

File: gdx/src/com/badlogic/gdx/math/Quaternion.java
Patch:
@@ -343,7 +343,6 @@ public Quaternion setFromMatrix(Matrix4 matrix) {
 	 * @param zx z-axis x-coordinate
 	 * @param zy z-axis y-coordinate
 	 * @param zz z-axis z-coordinate
-	 * @return
 	 */
 	public Quaternion setFromAxes(float xx, float xy, float xz, 
 											float yx, float yy, float yz, 

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -90,8 +90,8 @@ public ParticleEmitter (BufferedReader reader) throws IOException {
 	}
 
 	public ParticleEmitter (ParticleEmitter emitter) {
-		name = emitter.name;
 		sprite = emitter.sprite;
+		name = emitter.name;
 		setMaxParticleCount(emitter.maxParticleCount);
 		minParticleCount = emitter.minParticleCount;
 		delayValue.load(emitter.delayValue);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -406,6 +406,7 @@ public void onDrawFrame(javax.microedition.khronos.opengles.GL10 gl) {
         if (ldestroy) {
             app.listener.dispose();
             ((AndroidApplication)app).audio.dispose();
+            ((AndroidApplication)app).audio = null;
             Gdx.app.log("AndroidGraphics", "destroyed");
         }
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -172,8 +172,7 @@ protected void onPause() {
                 ((android.opengl.GLSurfaceView) graphics.view).onPause();
         }
         
-        if(isFinishing()) {
-      	  audio.dispose();
+        if(isFinishing()) {      	  
            audio = null;
         }
         

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -405,6 +405,7 @@ public void onDrawFrame(javax.microedition.khronos.opengles.GL10 gl) {
 
         if (ldestroy) {
             app.listener.dispose();
+            ((AndroidApplication)app).audio.dispose();
             Gdx.app.log("AndroidGraphics", "destroyed");
         }
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidMusic.java
Patch:
@@ -30,7 +30,7 @@ public class AndroidMusic implements Music {
 		this.player = player;
 	}
 
-	@Override public void dispose () {
+	@Override public void dispose () {		
 		if(player == null) return;
 		try {
 			if (player.isPlaying()) player.stop();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/FadeIn.java
Patch:
@@ -64,7 +64,8 @@ public class FadeIn extends AnimationAction {
 
 	@Override public Action copy () {
 		FadeIn fadeIn = $(duration);
-		fadeIn.setInterpolator(interpolator.copy());
+		if(interpolator != null)
+			fadeIn.setInterpolator(interpolator.copy());		
 		return fadeIn;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/FadeOut.java
Patch:
@@ -61,7 +61,8 @@ public class FadeOut extends AnimationAction {
 
 	@Override public Action copy () {
 		FadeOut fadeOut = $(duration);
-		fadeOut.setInterpolator(interpolator.copy());
+		if(interpolator != null)
+			fadeOut.setInterpolator(interpolator.copy());
 		return fadeOut;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/FadeTo.java
Patch:
@@ -63,7 +63,8 @@ public class FadeTo extends AnimationAction {
 
 	@Override public Action copy () {
 		FadeTo fadeTo = $(toAlpha, duration);
-		fadeTo.setInterpolator(interpolator.copy());
+		if(interpolator != null)
+			fadeTo.setInterpolator(interpolator.copy());
 		return fadeTo;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/MoveBy.java
Patch:
@@ -72,7 +72,8 @@ public class MoveBy extends AnimationAction {
 
 	@Override public Action copy () {
 		MoveBy moveBy = $(deltaX, deltaY, duration);
-		moveBy.setInterpolator(interpolator.copy());
+		if(interpolator != null)
+			moveBy.setInterpolator(interpolator.copy());
 		return moveBy;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/MoveTo.java
Patch:
@@ -70,7 +70,8 @@ public class MoveTo extends AnimationAction {
 
 	@Override public Action copy () {
 		MoveTo moveTo = $(x, y, duration);
-		moveTo.setInterpolator(interpolator.copy());
+		if(interpolator != null)
+			moveTo.setInterpolator(interpolator.copy());
 		return moveTo;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RotateBy.java
Patch:
@@ -62,7 +62,8 @@ public class RotateBy extends AnimationAction {
 
 	@Override public Action copy () {
 		RotateBy rotateBy = $(rotation, duration);
-		rotateBy.setInterpolator(interpolator.copy());
+		if(interpolator != null)
+			rotateBy.setInterpolator(interpolator.copy());
 		return rotateBy;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RotateTo.java
Patch:
@@ -62,7 +62,8 @@ public class RotateTo extends AnimationAction {
 
 	@Override public Action copy () {
 		RotateTo rotateTo = $(rotation, duration);
-		rotateTo.setInterpolator(interpolator.copy());
+		if(interpolator != null)
+			rotateTo.setInterpolator(interpolator.copy());
 		return rotateTo;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/ScaleTo.java
Patch:
@@ -70,7 +70,8 @@ public class ScaleTo extends AnimationAction {
 
 	@Override public Action copy () {
 		ScaleTo scaleTo = $(scaleX, scaleY, duration);
-		scaleTo.setInterpolator(interpolator.copy());
+		if(interpolator != null)
+			scaleTo.setInterpolator(interpolator.copy());
 		return scaleTo;
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/GL20.java
Patch:
@@ -326,6 +326,7 @@ public interface GL20 extends GLCommon {
 	public static final int GL_RENDERBUFFER_BINDING = 0x8CA7;
 	public static final int GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
 	public static final int GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
+	public static final int GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
 
 	public void glAttachShader (int program, int shader);
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Parallel.java
Patch:
@@ -17,7 +17,6 @@
 import com.badlogic.gdx.scenes.scene2d.Action;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.CompositeAction;
-import com.badlogic.gdx.utils.Array;
 
 public class Parallel extends CompositeAction {
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/AnimationAction.java
Patch:
@@ -27,7 +27,7 @@ public abstract class AnimationAction extends Action {
 	protected Actor target;
 	protected boolean done;
 
-	private Interpolator interpolator;
+	protected Interpolator interpolator;
 
 	@Override public boolean isDone () {
 		return done;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/FadeIn.java
Patch:
@@ -63,6 +63,8 @@ public class FadeIn extends AnimationAction {
 	}
 
 	@Override public Action copy () {
-		return $(duration);
+		FadeIn fadeIn = $(duration);
+		fadeIn.setInterpolator(interpolator.copy());
+		return fadeIn;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/FadeOut.java
Patch:
@@ -60,6 +60,8 @@ public class FadeOut extends AnimationAction {
 	}
 
 	@Override public Action copy () {
-		return $(duration);
+		FadeOut fadeOut = $(duration);
+		fadeOut.setInterpolator(interpolator.copy());
+		return fadeOut;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/FadeTo.java
Patch:
@@ -62,6 +62,8 @@ public class FadeTo extends AnimationAction {
 	}
 
 	@Override public Action copy () {
-		return $(toAlpha, duration);
+		FadeTo fadeTo = $(toAlpha, duration);
+		fadeTo.setInterpolator(interpolator.copy());
+		return fadeTo;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/MoveBy.java
Patch:
@@ -71,6 +71,8 @@ public class MoveBy extends AnimationAction {
 	}
 
 	@Override public Action copy () {
-		return $(deltaX, deltaY, duration);
+		MoveBy moveBy = $(deltaX, deltaY, duration);
+		moveBy.setInterpolator(interpolator.copy());
+		return moveBy;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/MoveTo.java
Patch:
@@ -69,6 +69,8 @@ public class MoveTo extends AnimationAction {
 	}
 
 	@Override public Action copy () {
-		return $(x, y, duration);
+		MoveTo moveTo = $(x, y, duration);
+		moveTo.setInterpolator(interpolator.copy());
+		return moveTo;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RotateBy.java
Patch:
@@ -61,6 +61,8 @@ public class RotateBy extends AnimationAction {
 	}
 
 	@Override public Action copy () {
-		return $(rotation, duration);
+		RotateBy rotateBy = $(rotation, duration);
+		rotateBy.setInterpolator(interpolator.copy());
+		return rotateBy;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RotateTo.java
Patch:
@@ -61,6 +61,8 @@ public class RotateTo extends AnimationAction {
 	}
 
 	@Override public Action copy () {
-		return $(rotation, duration);
+		RotateTo rotateTo = $(rotation, duration);
+		rotateTo.setInterpolator(interpolator.copy());
+		return rotateTo;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/ScaleTo.java
Patch:
@@ -69,6 +69,8 @@ public class ScaleTo extends AnimationAction {
 	}
 
 	@Override public Action copy () {
-		return $(scaleX, scaleY, duration);
+		ScaleTo scaleTo = $(scaleX, scaleY, duration);
+		scaleTo.setInterpolator(interpolator.copy());
+		return scaleTo;
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/interpolators/LinearInterpolator.java
Patch:
@@ -50,4 +50,7 @@ public class LinearInterpolator implements Interpolator {
 		return input;
 	}
 
+	@Override public Interpolator copy () {
+		return $();
+	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Sequence.java
Patch:
@@ -75,8 +75,7 @@ public class Sequence extends CompositeAction {
 		action.actions.clear();
 		int len = actions.size();
 		for (int i = 0; i < len; i++) {			
-			action.actions.add(actions.get(i).copy());
-			actions.get(i).finish();
+			action.actions.add(actions.get(i).copy());			
 		}
 		return action;
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
Patch:
@@ -46,6 +46,7 @@ public class Sprite extends TextureRegion {
 	 * drawn.
 	 */
 	public Sprite () {
+		setColor(1, 1, 1, 1);
 	}
 
 	/**

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -248,7 +248,7 @@ private int createGLHandle() {
 	private void uploadImageData(Pixmap pixmap) {					
 		this.width = pixmap.getWidth();
 		this.height = pixmap.getHeight();
-		if(!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height))
+		if(Gdx.gl20 == null && (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height)))
 			throw new GdxRuntimeException("texture width and height must be powers of two");
 		Gdx.gl.glBindTexture(GL10.GL_TEXTURE_2D, glHandle);
 		Gdx.gl.glTexImage2D(GL10.GL_TEXTURE_2D, 0, pixmap.getGLInternalFormat(), pixmap.getWidth(), pixmap.getHeight(), 0, pixmap.getGLFormat(), pixmap.getGLType(), pixmap.getPixels());

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALMusic.java
Patch:
@@ -66,8 +66,6 @@ public void play () {
 		if (streamID == -1) {
 			streamID = audio.obtainStream(true);
 			if (streamID == -1) return;
-			alSourceStop(streamID);
-			alSourcei(streamID, AL_BUFFER, 0);
 			alSourcei(streamID, AL_LOOPING, AL_FALSE);
 			alSourcef(streamID, AL_GAIN, volume);
 			for (int i = 0; i < bufferCount; i++)

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL10.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.lwjgl.BufferUtils;
 import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL12;
 import org.lwjgl.opengl.GL13;
 
 import com.badlogic.gdx.graphics.GL10;
@@ -436,6 +437,8 @@ else if (pixels instanceof DoubleBuffer)
 	}
 
 	public final void glTexParameterf (int target, int pname, float param) {
+		// LwjglGraphics.major is should to be 1 if we are in LwjglGL10.
+		if (LwjglGraphics.minor < 2 && param == GL12.GL_CLAMP_TO_EDGE) param = GL11.GL_CLAMP;
 		GL11.glTexParameterf(target, pname, param);
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Sequence.java
Patch:
@@ -74,9 +74,9 @@ public class Sequence extends CompositeAction {
 		Sequence action = pool.obtain();
 		action.actions.clear();
 		int len = actions.size();
-		for (int i = 0; i < len; i++) {
-			actions.get(i).finish();
+		for (int i = 0; i < len; i++) {			
 			action.actions.add(actions.get(i).copy());
+			actions.get(i).finish();
 		}
 		return action;
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEffect.java
Patch:
@@ -30,11 +30,11 @@ public class ParticleEffect {
 	private final Array<ParticleEmitter> emitters;
 
 	public ParticleEffect () {
-		emitters = new Array();
+		emitters = new Array(true, 8, ParticleEmitter.class);
 	}
 
 	public ParticleEffect (ParticleEffect effect) {
-		emitters = new Array(effect.emitters.size);
+		emitters = new Array(true, effect.emitters.size, ParticleEmitter.class);
 		for (int i = 0, n = effect.emitters.size; i < n; i++)
 			emitters.add(new ParticleEmitter(effect.emitters.items[i]));
 	}

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -1140,7 +1140,7 @@ public void load (BufferedReader reader) throws IOException {
 
 		public void load (GradientColorValue value) {
 			super.load(value);
-			colors = new float[3];
+			colors = new float[value.colors.length];
 			System.arraycopy(value.colors, 0, colors, 0, colors.length);
 			timeline = new float[value.timeline.length];
 			System.arraycopy(value.timeline, 0, timeline, 0, timeline.length);

File: gdx/src/com/badlogic/gdx/math/Matrix3.java
Patch:
@@ -26,7 +26,7 @@
 public class Matrix3 implements Serializable {	
 	private static final long serialVersionUID = 7907569533774959788L;
 	private final static float DEGREE_TO_RAD = (float)Math.PI / 180;
-	float[] vals = new float[9];
+	public float[] vals = new float[9];
 
 	public Matrix3 () {
 		idt();

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -390,7 +390,8 @@ private void activateParticle (int index) {
 				float lineX = width * MathUtils.random();
 				x += lineX;
 				y += lineX * (height / (float)width);
-			}
+			} else
+				y += height * MathUtils.random();
 			break;
 		}
 		}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidMusic.java
Patch:
@@ -21,7 +21,7 @@
 
 public class AndroidMusic implements Music {
 	private final AndroidAudio audio;
-	private final MediaPlayer player;
+	private MediaPlayer player;
 	private boolean isPrepared = true;
 
 	AndroidMusic (AndroidAudio audio, MediaPlayer player) {
@@ -30,8 +30,10 @@ public class AndroidMusic implements Music {
 	}
 
 	@Override public void dispose () {
+		if(player == null) return;
 		if (player.isPlaying()) player.stop();
 		player.release();
+		player = null;
 		audio.musics.remove(this);
 	}
 

File: extensions/image-packer/src/com/badlogic/gdx/imagepacker/TexturePacker.java
Patch:
@@ -664,7 +664,7 @@ static public class Settings {
 		public int maxWidth = 512;
 		public int maxHeight = 512;
 		public boolean stripWhitespace = true;
-		public boolean incremental;
+		public boolean incremental=true;
 		public boolean alias;
 
 		HashMap<String, Long> crcs = new HashMap();
@@ -788,7 +788,7 @@ static public void process (Settings settings, String input, String output) thro
 
 		// Load incremental file.
 		File incrmentalFile = null;
-		if (settings.incremental) {
+		if (settings.incremental && packFile.exists()) {
 			settings.crcs.clear();
 			incrmentalFile = new File(System.getProperty("user.home") + "/.texturepacker/" + hash(inputDir.getAbsolutePath()));
 			if (incrmentalFile.exists()) {
@@ -837,7 +837,7 @@ static public void process (Settings settings, String input, String output) thro
 		process(settings, inputDir, outputDir, packFile);
 
 		// Write incrmental file.
-		if (settings.incremental) {
+		if (incrmentalFile != null) {
 			incrmentalFile.getParentFile().mkdirs();
 			FileWriter writer = new FileWriter(incrmentalFile);
 			for (Entry<String, Long> entry : settings.crcs.entrySet()) {

File: gdx/src/com/badlogic/gdx/math/Vector2.java
Patch:
@@ -261,7 +261,7 @@ public float crs(float x, float y) {
 	 * @return the angle in degrees of this vector (point) relative to the x-axis. Angles are counter-clockwise and between 0 and 360.
 	 */
 	public float angle() {
-      float angle = (float)Math.atan2(y, x) * MathUtils.degreesToRadians;
+      float angle = (float)Math.atan2(y, x) * MathUtils.radiansToDegrees;
       if(angle < 0)
           angle += 360;
       return angle;

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java
Patch:
@@ -148,7 +148,7 @@ public Renderer (Application app) {
 			explosionMesh.setVertices(vertices);
 			font = new BitmapFont(Gdx.files.internal("data/font10.fnt"), Gdx.files.internal("data/font10.png"), false);
 
-			camera = new PerspectiveCamera(67, 480, 320);			
+			camera = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());			
 		} catch (Exception ex) {
 			ex.printStackTrace();
 		}
@@ -218,8 +218,7 @@ private void renderBackground (GL10 gl) {
 
 	private void setProjectionAndCamera (Graphics graphics, Ship ship, Application app) {
 		camera.position.set(ship.position.x, 6, 2);
-		dir.set(ship.position.x, 0, -4).sub(camera.position).nor();
-		camera.position.set(dir);
+		camera.direction.set(ship.position.x, 0, -4).sub(camera.position).nor();		
 		camera.update();
 		camera.apply(Gdx.gl10);		
 	}

File: gdx/src/com/badlogic/gdx/InputMultiplexer.java
Patch:
@@ -21,7 +21,7 @@
  * @author Nathan Sweet
  */
 public class InputMultiplexer implements InputProcessor {
-	private ArrayList<InputProcessor> processors = new ArrayList(4);
+	private ArrayList<InputProcessor> processors = new ArrayList<InputProcessor>(4);
 
 	public void addProcessor (InputProcessor processor) {
 		processors.add(processor);

File: gdx/src/com/badlogic/gdx/files/FileHandle.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
-import java.nio.charset.Charset;
 
 import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Files.FileType;

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -27,7 +27,6 @@
 import com.badlogic.gdx.graphics.glutils.VertexBufferObject;
 import com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData;
 import com.badlogic.gdx.graphics.glutils.VertexData;
-import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.BoundingBox;
 import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -1,9 +1,6 @@
 package com.badlogic.gdx.graphics;
 
-import java.util.Arrays;
-
 import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.math.collision.Ray;
 
 /**
  * A camera with orthographic projection.

File: gdx/src/com/badlogic/gdx/graphics/PerspectiveCamera.java
Patch:
@@ -1,7 +1,5 @@
 package com.badlogic.gdx.graphics;
 
-import java.util.Arrays;
-
 import com.badlogic.gdx.math.Vector3;
 
 /**

File: gdx/src/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -17,7 +17,6 @@
 import java.nio.ByteBuffer;
 
 import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.g2d.Gdx2DPixmap;
 import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;

File: gdx/src/com/badlogic/gdx/graphics/TextureData.java
Patch:
@@ -13,9 +13,6 @@
 
 package com.badlogic.gdx.graphics;
 
-import com.badlogic.gdx.Graphics;
-import com.badlogic.gdx.graphics.Texture.TextureFilter;
-import com.badlogic.gdx.graphics.Texture.TextureWrap;
 
 /**
  * Loads image data for a texture. Used with

File: gdx/src/com/badlogic/gdx/graphics/g3d/keyframed/KeyframeAnimator.java
Patch:
@@ -12,7 +12,6 @@
  */
 package com.badlogic.gdx.graphics.g3d.keyframed;
 
-import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.g3d.Animator;
 import com.badlogic.gdx.graphics.g3d.loaders.md5.MD5Quaternion;
 import com.badlogic.gdx.math.Quaternion;

File: gdx/src/com/badlogic/gdx/graphics/g3d/keyframed/KeyframedModel.java
Patch:
@@ -194,7 +194,7 @@ public KeyframeAnimation sampleAnimationFromMD5(MD5Model md5model, MD5Renderer m
 						if(name.equals(skel.names[j]))
 						{
 							int idx = j*8;
-							float p = skel.joints[idx];
+							// FIXME what is this? float p = skel.joints[idx];
 							float x = skel.joints[idx+1];
 							float y = skel.joints[idx+2];
 							float z = skel.joints[idx+3];

File: gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md5/MD5Model.java
Patch:
@@ -17,8 +17,6 @@
 import java.io.DataOutputStream;
 import java.io.IOException;
 
-import com.badlogic.gdx.utils.Disposable;
-
 /**
  * Represents an MD5 (Doom 3) skinned model.
  * Note: The normal interpolation implementation is experimental. Using it will incur a greater CPU overhead, and correct normals

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObject.java
Patch:
@@ -22,7 +22,6 @@
 import com.badlogic.gdx.graphics.GL11;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.utils.BufferUtils;
-import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /**

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObjectSubData.java
Patch:
@@ -22,7 +22,6 @@
 import com.badlogic.gdx.graphics.GL11;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.utils.BufferUtils;
-import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /**

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java
Patch:
@@ -18,7 +18,6 @@
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 import java.util.ArrayList;
-import java.util.HashMap;
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.GL20;

File: gdx/src/com/badlogic/gdx/math/Matrix3.java
Patch:
@@ -23,7 +23,8 @@
  * @author mzechner
  * 
  */
-public class Matrix3 implements Serializable {
+public class Matrix3 implements Serializable {	
+	private static final long serialVersionUID = 7907569533774959788L;
 	private final static float DEGREE_TO_RAD = (float)Math.PI / 180;
 	float[] vals = new float[9];
 

File: gdx/src/com/badlogic/gdx/math/Plane.java
Patch:
@@ -21,7 +21,9 @@
  * @author badlogicgames@gmail.com
  * 
  */
-public class Plane implements Serializable {
+public class Plane implements Serializable {	
+	private static final long serialVersionUID = -1240652082930747866L;
+
 	/**
 	 * Enum specifying on which side a point lies respective to the plane and it's normal. {@link PlaneSide#Front} is the side to
 	 * which the normal points.

File: gdx/src/com/badlogic/gdx/math/Rectangle.java
Patch:
@@ -20,7 +20,8 @@
  * @author badlogicgames@gmail.com
  * 
  */
-public class Rectangle implements Serializable {
+public class Rectangle implements Serializable {	
+	private static final long serialVersionUID = 5733252015138115702L;
 	public float x, y;
 	public float width, height;
 

File: gdx/src/com/badlogic/gdx/math/Vector2.java
Patch:
@@ -22,7 +22,9 @@
  * @author badlogicgames@gmail.com
  * 
  */
-public class Vector2 implements Serializable {
+public class Vector2 implements Serializable {	
+	private static final long serialVersionUID = 913902788239530931L;
+
 	/** static temporary vector **/
 	private final static Vector2 tmp = new Vector2();
 

File: gdx/src/com/badlogic/gdx/math/collision/Ray.java
Patch:
@@ -24,7 +24,8 @@
  * @author badlogicgames@gmail.com
  * 
  */
-public class Ray implements Serializable {
+public class Ray implements Serializable {	
+	private static final long serialVersionUID = -620692054835390878L;
 	public final Vector3 origin = new Vector3();
 	public final Vector3 direction = new Vector3();
 

File: gdx/src/com/badlogic/gdx/math/collision/Segment.java
Patch:
@@ -23,7 +23,9 @@
  * @author mzechner
  * 
  */
-public class Segment implements Serializable {
+public class Segment implements Serializable {	
+	private static final long serialVersionUID = 2739667069736519602L;
+
 	/** the starting position **/
 	public final Vector3 a = new Vector3();
 

File: gdx/src/com/badlogic/gdx/math/collision/Sphere.java
Patch:
@@ -23,7 +23,8 @@
  * @author badlogicgames@gmail.com
  * 
  */
-public class Sphere implements Serializable {
+public class Sphere implements Serializable {	
+	private static final long serialVersionUID = -6487336868908521596L;
 	/** the radius of the sphere **/
 	public float radius;
 	/** the center of the sphere **/

File: gdx/src/com/badlogic/gdx/physics/box2d/Body.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
-import com.badlogic.gdx.utils.Disposable;
 
 /**
  * A rigid body. These are created via World.CreateBody.

File: gdx/src/com/badlogic/gdx/Version.java
Patch:
@@ -13,7 +13,6 @@
 
 package com.badlogic.gdx;
 
-import com.badlogic.gdx.utils.GdxNativesLoader;
 
 /**
  * The version of libgdx

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RotateBy.java
Patch:
@@ -49,7 +49,7 @@ public class RotateBy extends AnimationAction {
 	@Override public void act (float delta) {
 		float alpha = createInterpolatedAlpha(delta);
 		if (done) {
-			target.rotation = rotation;
+			target.rotation = startRotation + rotation;
 		} else {
 			target.rotation = startRotation + deltaRotation * alpha;
 		}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/MoveBy.java
Patch:
@@ -71,6 +71,6 @@ public class MoveBy extends AnimationAction {
 	}
 
 	@Override public Action copy () {
-		return $(x, y, duration);
+		return $(deltaX, deltaY, duration);
 	}
 }

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglInput.java
Patch:
@@ -426,6 +426,7 @@ protected static int translateKeyCode (int keyCode) {
 		if (keyCode == java.awt.event.KeyEvent.VK_ESCAPE) return Input.Keys.KEYCODE_ESCAPE;
 		if (keyCode == java.awt.event.KeyEvent.VK_END) return Input.Keys.KEYCODE_END;
 		if (keyCode == java.awt.event.KeyEvent.VK_INSERT) return Input.Keys.KEYCODE_INSERT;
+		if (keyCode == java.awt.event.KeyEvent.VK_NUMPAD5) return Input.Keys.KEYCODE_DPAD_CENTER;
 
 		return Input.Keys.KEYCODE_UNKNOWN;
 	}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -355,6 +355,8 @@ public static int getGdxKeyCode (int lwjglKeyCode) {
 			return Input.Keys.KEYCODE_END;
 		case Keyboard.KEY_INSERT:
 			return Input.Keys.KEYCODE_INSERT;
+		case Keyboard.KEY_NUMPAD5:
+			return Input.Keys.KEYCODE_DPAD_CENTER;
 		default:
 			return Input.Keys.KEYCODE_UNKNOWN;
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/RemoteTest.java
Patch:
@@ -19,10 +19,10 @@ public class RemoteTest extends GdxTest implements ApplicationListener, InputPro
 	String ips;
 	
 	@Override public void create () {
-		RemoteInput receiver = new RemoteInput();
-		ips = Arrays.toString(receiver.getIPs());
+		RemoteInput receiver = new RemoteInput();		
 		Gdx.input = receiver;		
 		
+		ips = Arrays.toString(receiver.getIPs());
 		Gdx.input.setInputProcessor(this);		
 		batch = new SpriteBatch();
 		font = new BitmapFont();

File: gdx/src/com/badlogic/gdx/utils/ComparableTimSort.java
Patch:
@@ -91,6 +91,7 @@ class ComparableTimSort {
 	}
 
 	public void doSort (Object[] a, int lo, int hi) {
+		stackSize = 0;
 		rangeCheck(a.length, lo, hi);
 		int nRemaining = hi - lo;
 		if (nRemaining < 2) return; // Arrays of size 0 and 1 are always sorted

File: gdx/src/com/badlogic/gdx/utils/TimSort.java
Patch:
@@ -113,6 +113,7 @@ class TimSort<T> {
 	}
 
 	public void doSort (T[] a, Comparator<T> c, int lo, int hi) {
+		stackSize = 0;
 		rangeCheck(a.length, lo, hi);
 		int nRemaining = hi - lo;
 		if (nRemaining < 2) return; // Arrays of size 0 and 1 are always sorted

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -97,7 +97,6 @@ private void mainLoop () {
 			throw new GdxRuntimeException(e);
 		}
 
-		Keyboard.enableRepeatEvents(true);
 		listener.create();
 		listener.resize(graphics.getWidth(), graphics.getHeight());
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -129,8 +129,6 @@ void start () {
 			throw new GdxRuntimeException(e);
 		}
 
-		Keyboard.enableRepeatEvents(true);
-
 		listener.create();
 		listener.resize(graphics.getWidth(), graphics.getHeight());
 

File: extensions/gdx-remote/src/com/badlogic/gdx/remote/UxAndroid.java
Patch:
@@ -4,13 +4,13 @@
 import javax.microedition.khronos.opengles.GL10;
 
 import android.os.Bundle;
+import android.util.Log;
 
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.backends.android.AndroidApplication;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.badlogic.gdx.input.RemoteInput;
 import com.badlogic.gdx.input.RemoteSender;
 
 public class UxAndroid extends AndroidApplication {
@@ -21,7 +21,8 @@ public class UxAndroid extends AndroidApplication {
 		super.onCreate(savedInstanceState);
 		Bundle bundle = getIntent().getExtras();
 		IP = bundle.getString("ip");
-		PORT = bundle.getInt("port");
+		PORT = Integer.parseInt(bundle.getString("port"));
+		Log.d("UxAndroid", "ip: " + IP + ", port: " + PORT);
 		initialize(new ApplicationListener() {
 
 			RemoteSender sender;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -125,7 +125,7 @@ private void mainLoop () {
 				}
 			}
 
-			((LwjglInput)Gdx.input).processEvents();
+			input.processEvents();
 			listener.render();
 			audio.update();
 			Display.update();

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -156,7 +156,7 @@ public void run () {
 					lastHeight = height;
 					listener.resize(width, height);
 				}
-				((LwjglInput)Gdx.input).processEvents();
+				input.processEvents();
 				listener.render();
 				audio.update();
 				Display.update();

File: gdx/src/com/badlogic/gdx/graphics/glutils/ImmediateModeRenderer.java
Patch:
@@ -155,9 +155,9 @@ public void vertex (float x, float y, float z) {
 		positions[idxPos++] = y;
 		positions[idxPos++] = z;
 
-		idxCols += 4;
-		idxNors += 3;
-		idxTexCoords += 2;
+		if (idxCols > 0) idxCols += 4;
+		if (idxNors > 0) idxNors += 3;
+		if (idxTexCoords > 0) idxTexCoords += 2;
 	}
 
 	/**

File: gdx/src/com/badlogic/gdx/graphics/g3d/keyframed/KeyframedModel.java
Patch:
@@ -14,13 +14,12 @@
 
 import java.util.ArrayList;
 
-import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.VertexAttributes;
 import com.badlogic.gdx.graphics.g3d.Animator;
-import com.badlogic.gdx.graphics.g3d.Material;
 import com.badlogic.gdx.graphics.g3d.Animator.WrapMode;
+import com.badlogic.gdx.graphics.g3d.Material;
 import com.badlogic.gdx.graphics.g3d.loaders.md5.MD5Animation;
 import com.badlogic.gdx.graphics.g3d.loaders.md5.MD5Animator;
 import com.badlogic.gdx.graphics.g3d.loaders.md5.MD5Joints;

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -227,8 +227,8 @@ private void createShader () {
 	}
 
 	/**
-	 * Sets up the SpriteBatch for drawing. This will disable depth buffer testing and writting, culling and lighting. It enables
-	 * blending and alpha testing. If you have more texture units enabled than the first one you have to disable them before
+	 * Sets up the SpriteBatch for drawing. This will disable depth buffer writting. It enables
+	 * blending and texturing. If you have more texture units enabled than the first one you have to disable them before
 	 * calling this. Uses a screen coordinate system by default where everything is given in pixels. You can specify your own
 	 * projection and modelview matrices via {@link #setProjectionMatrix(Matrix4)} and {@link #setTransformMatrix(Matrix4)}.
 	 */
@@ -264,7 +264,7 @@ public void begin () {
 	}
 
 	/**
-	 * Finishes off rendering. Must always be called after a call to {@link #begin()}
+	 * Finishes off rendering. Enables depth writes, disables blending and texturing. Must always be called after a call to {@link #begin()}
 	 */
 	public void end () {
 		if (!drawing) throw new IllegalStateException("SpriteBatch.begin must be called before end.");

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidMusic.java
Patch:
@@ -73,4 +73,7 @@ public class AndroidMusic implements Music {
 		isPrepared = false;
 	}
 
+	public float getPosition () {
+		return player.getCurrentPosition() * 1000;
+	}
 }

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidSound.java
Patch:
@@ -42,4 +42,7 @@ final class AndroidSound implements Sound {
 		soundPool.play(soundId, volume, volume, 1, 0, 1);
 	}
 
+	public void stop () {
+		soundPool.stop(soundId);
+	}
 }

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALMusic.java
Patch:
@@ -75,6 +75,7 @@ public void stop () {
 		if (streamID == -1) return;
 		reset();
 		alSourceStop(streamID);
+		alSourcei(streamID, AL_BUFFER, 0);
 		streamID = -1;
 	}
 

File: demos/metagun/metagun-desktop/src/com/mojang/metagun/Metagun.java
Patch:
@@ -26,10 +26,10 @@ public class Metagun implements ApplicationListener {
 	public void create() {
 		Art.load();
 		Sound.load();
-		Gdx.input.setInputProcessor(input);
+		Gdx.input.setInputProcessor(input);		
 		running = true;
-//		setScreen(new TitleScreen());
-		setScreen(new GameScreen());		
+		setScreen(new TitleScreen());
+//		setScreen(new GameScreen());		
 	}
 
 	public void pause() {

File: demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/GameScreen.java
Patch:
@@ -84,7 +84,7 @@ public void render () {
 			String msg = "PRESS X TO TRY AGAIN";
 			drawString(msg, 160 - msg.length() * 3, 120 - 3);
 		}
-//		if(Gdx.app.getType() == ApplicationType.Android) {
+		if(Gdx.app.getType() == ApplicationType.Android) {
 			draw(Art.buttons[0][0], 0, 240-32);
 			draw(Art.buttons[1][0], 32, 240-32);
 			
@@ -93,7 +93,7 @@ public void render () {
 			
 			draw(Art.buttons[2][0], 320-64, 240-32);
 			draw(Art.buttons[3][0], 320-32, 240-32);
-//		}
+		}
 		spriteBatch.end();
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -33,7 +33,7 @@ public OrthographicCamera(float viewportWidth, float viewportHeight) {
 	private final Vector3 tmp = new Vector3();
 	@Override	
 	public void update() {
-		projection.setToOrtho(-viewportWidth / 2, viewportWidth / 2, -viewportHeight / 2, viewportHeight / 2, Math.abs(near), Math.abs(far));
+		projection.setToOrtho(zoom * -viewportWidth / 2, zoom * viewportWidth / 2, zoom * -viewportHeight / 2, zoom * viewportHeight / 2, Math.abs(near), Math.abs(far));
 		view.setToLookAt(position, tmp.set(position).add(direction), up);	
 		combined.set(projection).mul(view);
 		invProjectionView.set(combined);

File: gdx/src/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -257,7 +257,7 @@ public void drawCircle (int x, int y, int radius) {
 	 * @param radius The radius in pixels
 	 */
 	public void fillCircle (int x, int y, int radius) {
-		pixmap.drawCircle(x, y, radius, color);
+		pixmap.fillCircle(x, y, radius, color);
 	}
 
 	/**

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -671,6 +671,7 @@ public void setImagePath (String imagePath) {
 	public void setFlip (boolean flipX, boolean flipY) {
 		this.flipX = flipX;
 		this.flipY = flipY;
+		if (particles == null) return;
 		for (int i = 0, n = particles.length; i < n; i++) {
 			Particle particle = particles[i];
 			if (particle != null) particle.flip(flipX, flipY);

File: gdx/src/com/badlogic/gdx/graphics/tmp/Camera.java
Patch:
@@ -51,7 +51,7 @@ public abstract class Camera {
 	
 	/**
 	 * Recalculates the projection and view matrix of this
-	 * camera and the frustum planes. Use this after you've manipulated
+	 * camera and the {@link Frustum} planes. Use this after you've manipulated
 	 * any of the attributes of the camera.
 	 */
 	public abstract void update();

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TiledMapTest.java
Patch:
@@ -41,7 +41,7 @@ public class TiledMapTest extends GdxTest{
         private static final int SCREEN_WIDTH = 480;
         private static final int SCREEN_HEIGHT = 320;
 
-        private static final int[] layersList = {0,1,2};
+        private static final int[] layersList = {0};
         
         SpriteBatch spriteBatch;
         BitmapFont font;
@@ -105,8 +105,8 @@ private void updateCameraPosition() {
                 
                 spriteBatch = new SpriteBatch();
                 
-                FileHandle mapHandle = Gdx.files.internal("data/tiledmap/perspective walls.tmx");
-                FileHandle packfile = Gdx.files.internal("data/tiledmap/perspective walls packfile");
+                FileHandle mapHandle = Gdx.files.internal("data/tiledmap/margin spacing doctype test.tmx");
+                FileHandle packfile = Gdx.files.internal("data/tiledmap/margin spacing doctype test packfile");
                 FileHandle baseDir = Gdx.files.internal("data/tiledmap");
 
                 startTime = System.currentTimeMillis();

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/ScaleTo.java
Patch:
@@ -33,7 +33,7 @@ public class ScaleTo extends AnimationAction {
 	protected float deltaScaleX;
 	protected float deltaScaleY;
 
-	public static AnimationAction $ (float scaleX, float scaleY, float duration) {
+	public static ScaleTo $ (float scaleX, float scaleY, float duration) {
 		ScaleTo action = pool.obtain();
 		action.scaleX = scaleX;
 		action.scaleY = scaleY;

File: gdx/src/com/badlogic/gdx/graphics/tmp/Camera.java
Patch:
@@ -4,7 +4,7 @@
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.Ray;
 
-public abstract class BaseCamera {				
+public abstract class Camera {				
 	/** the position of the camera **/
 	public final Vector3 position = new Vector3();
 	/** the unit length direction vector of the camera **/

File: gdx/src/com/badlogic/gdx/graphics/tmp/OrthographicCamera.java
Patch:
@@ -5,7 +5,7 @@
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.Ray;
 
-public class OrthographicCamera extends BaseCamera {
+public class OrthographicCamera extends Camera {
 	public float zoom = 1;
 	
 	public OrthographicCamera(float viewportWidth, float viewportHeight) {
@@ -17,7 +17,7 @@ public OrthographicCamera(float viewportWidth, float viewportHeight) {
 	private final Vector3 tmp = new Vector3();
 	@Override	
 	public void update() {
-		projection.setToOrtho(-viewportWidth / 2, viewportWidth / 2, -viewportHeight / 2, viewportHeight / 2, -Math.abs(near), -Math.abs(far));
+		projection.setToOrtho(-viewportWidth / 2, viewportWidth / 2, -viewportHeight / 2, viewportHeight / 2, Math.abs(near), Math.abs(far));
 		view.setToLookAt(position, tmp.set(position).add(direction), up);	
 		combined.set(projection).mul(view);
 		frustum.update(combined);

File: gdx/src/com/badlogic/gdx/graphics/tmp/PerspectiveCamera.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.badlogic.gdx.math.Vector3;
 
-public class PerspectiveCamera extends BaseCamera {	
+public class PerspectiveCamera extends Camera {	
 	/** the field of view in degrees **/
 	public float fieldOfView = 67;
 	

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -18,6 +18,6 @@
 public class JoglDebugStarter {
 
 	public static void main (String[] argv) {
-		new JoglApplication(new com.badlogic.gdx.tests.AnimationTest(), "Debug Test", 480, 320, false);
+		new JoglApplication(new com.badlogic.gdx.tests.CullTest(), "Debug Test", 480, 320, false);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -29,6 +29,7 @@
 import com.badlogic.gdx.tests.Box2DTest;
 import com.badlogic.gdx.tests.Box2DTestCollection;
 import com.badlogic.gdx.tests.CompassTest;
+import com.badlogic.gdx.tests.CullTest;
 import com.badlogic.gdx.tests.FilesTest;
 import com.badlogic.gdx.tests.FilterPerformanceTest;
 import com.badlogic.gdx.tests.FloatTest;
@@ -116,6 +117,7 @@ public class GdxTests
 		Box2DTest.class,
 		Box2DTestCollection.class,
 		CompassTest.class,
+		CullTest.class,
 		FilesTest.class,
 		//FillrateTest.class,
 		FloatTest.class,

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/FadeIn.java
Patch:
@@ -17,11 +17,10 @@
 import com.badlogic.gdx.scenes.scene2d.Action;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.AnimationAction;
-import com.badlogic.gdx.utils.Pool;
 
 public class FadeIn extends AnimationAction {
 
-	private static final Pool<FadeIn> pool = new Pool<FadeIn>(4, 100) {
+	private static final ActionResetingPool<FadeIn> pool = new ActionResetingPool<FadeIn>(4, 100) {
 		@Override protected FadeIn newObject () {
 			return new FadeIn();
 		}
@@ -34,7 +33,6 @@ public class FadeIn extends AnimationAction {
 		FadeIn action = pool.obtain();
 		action.duration = duration;
 		action.invDuration = 1 / duration;
-		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/FadeTo.java
Patch:
@@ -17,11 +17,10 @@
 import com.badlogic.gdx.scenes.scene2d.Action;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.AnimationAction;
-import com.badlogic.gdx.utils.Pool;
 
 public class FadeTo extends AnimationAction {
 
-	private static final Pool<FadeTo> pool = new Pool<FadeTo>(4, 100) {
+	private static final ActionResetingPool<FadeTo> pool = new ActionResetingPool<FadeTo>(4, 100) {
 		@Override protected FadeTo newObject () {
 			return new FadeTo();
 		}
@@ -36,7 +35,6 @@ public class FadeTo extends AnimationAction {
 		action.toAlpha = Math.min(Math.max(alpha, 0.0f), 1.0f);
 		action.duration = duration;
 		action.invDuration = 1 / duration;
-		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/MoveBy.java
Patch:
@@ -17,11 +17,10 @@
 import com.badlogic.gdx.scenes.scene2d.Action;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.AnimationAction;
-import com.badlogic.gdx.utils.Pool;
 
 public class MoveBy extends AnimationAction {
 
-	private static final Pool<MoveBy> pool = new Pool<MoveBy>(4, 100) {
+	private static final ActionResetingPool<MoveBy> pool = new ActionResetingPool<MoveBy>(4, 100) {
 		@Override protected MoveBy newObject () {
 			return new MoveBy();
 		}
@@ -40,7 +39,6 @@ public class MoveBy extends AnimationAction {
 		action.y = y;
 		action.duration = duration;
 		action.invDuration = 1 / duration;
-		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/MoveTo.java
Patch:
@@ -17,11 +17,10 @@
 import com.badlogic.gdx.scenes.scene2d.Action;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.AnimationAction;
-import com.badlogic.gdx.utils.Pool;
 
 public class MoveTo extends AnimationAction {
 
-	private static final Pool<MoveTo> pool = new Pool<MoveTo>(4, 100) {
+	private static final ActionResetingPool<MoveTo> pool = new ActionResetingPool<MoveTo>(4, 100) {
 		@Override protected MoveTo newObject () {
 			return new MoveTo();
 		}
@@ -40,7 +39,6 @@ public class MoveTo extends AnimationAction {
 		action.y = y;
 		action.duration = duration;
 		action.invDuration = 1 / duration;
-		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RotateBy.java
Patch:
@@ -17,11 +17,10 @@
 import com.badlogic.gdx.scenes.scene2d.Action;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.AnimationAction;
-import com.badlogic.gdx.utils.Pool;
 
 public class RotateBy extends AnimationAction {
 
-	private static final Pool<RotateBy> pool = new Pool<RotateBy>(4, 100) {
+	private static final ActionResetingPool<RotateBy> pool = new ActionResetingPool<RotateBy>(4, 100) {
 		@Override protected RotateBy newObject () {
 			return new RotateBy();
 		}
@@ -36,7 +35,6 @@ public class RotateBy extends AnimationAction {
 		action.rotation = rotation;
 		action.duration = duration;
 		action.invDuration = 1 / duration;
-		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RotateTo.java
Patch:
@@ -17,11 +17,10 @@
 import com.badlogic.gdx.scenes.scene2d.Action;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.AnimationAction;
-import com.badlogic.gdx.utils.Pool;
 
 public class RotateTo extends AnimationAction {
 
-	private static final Pool<RotateTo> pool = new Pool<RotateTo>(4, 100) {
+	private static final ActionResetingPool<RotateTo> pool = new ActionResetingPool<RotateTo>(4, 100) {
 		@Override protected RotateTo newObject () {
 			return new RotateTo();
 		}
@@ -36,7 +35,6 @@ public class RotateTo extends AnimationAction {
 		action.rotation = rotation;
 		action.duration = duration;
 		action.invDuration = 1 / duration;
-		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/ScaleTo.java
Patch:
@@ -17,11 +17,10 @@
 import com.badlogic.gdx.scenes.scene2d.Action;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.AnimationAction;
-import com.badlogic.gdx.utils.Pool;
 
 public class ScaleTo extends AnimationAction {
 
-	private static final Pool<ScaleTo> pool = new Pool<ScaleTo>(4, 100) {
+	private static final ActionResetingPool<ScaleTo> pool = new ActionResetingPool<ScaleTo>(4, 100) {
 		@Override protected ScaleTo newObject () {
 			return new ScaleTo();
 		}
@@ -40,7 +39,6 @@ public class ScaleTo extends AnimationAction {
 		action.scaleY = scaleY;
 		action.duration = duration;
 		action.invDuration = 1 / duration;
-		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/audio/AudioDevice.java
Patch:
@@ -13,6 +13,8 @@
 
 package com.badlogic.gdx.audio;
 
+import com.badlogic.gdx.utils.Disposable;
+
 /**
  * Encapsulates an audio device in 44.1khz mono or stereo mode. Use the {@link #writeSamples(float[], int, int)} and
  * {@link #writeSamples(short[], int, int)} methods to write float or 16-bit signed short PCM data directly to the audio device.
@@ -22,7 +24,7 @@
  * @author badlogicgames@gmail.com
  * 
  */
-public interface AudioDevice {
+public interface AudioDevice extends Disposable {
 	/**
 	 * @return whether this AudioDevice is in mono or stereo mode.
 	 */

File: gdx/src/com/badlogic/gdx/audio/AudioRecorder.java
Patch:
@@ -13,6 +13,8 @@
 
 package com.badlogic.gdx.audio;
 
+import com.badlogic.gdx.utils.Disposable;
+
 /**
  * An AudioRecorder allows to record input from an audio device. It has a sampling rate and is either stereo or mono. Samples are
  * returned in signed 16-bit PCM format. Stereo samples are interleaved in the order left channel, right channel. The
@@ -21,7 +23,7 @@
  * @author mzechner
  * 
  */
-public interface AudioRecorder {
+public interface AudioRecorder extends Disposable {
 	/**
 	 * Reads in numSamples samples into the array samples starting at offset. If the recorder is in stereo you have to multiply
 	 * numSamples by 2.

File: gdx/src/com/badlogic/gdx/audio/Music.java
Patch:
@@ -17,6 +17,7 @@
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Audio;
 import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.utils.Disposable;
 
 /**
  * <p>
@@ -36,7 +37,7 @@
  * @author mzechner
  * 
  */
-public interface Music {
+public interface Music extends Disposable {
 	/**
 	 * Starts the play back of the music stream. In case the stream was paused this will resume the play back. In case the music
 	 * stream is finished playing this will restart the play back.

File: gdx/src/com/badlogic/gdx/audio/Sound.java
Patch:
@@ -15,6 +15,7 @@
 
 import com.badlogic.gdx.Audio;
 import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.utils.Disposable;
 
 /**
  * <p>
@@ -29,7 +30,7 @@
  * @author badlogicgames@gmail.com
  * 
  */
-public interface Sound {
+public interface Sound extends Disposable {
 	/**
 	 * Plays the sound, you can call this repeatedly to play the same sound a couple of times with a bit of lag introduced.
 	 */

File: gdx/src/com/badlogic/gdx/audio/analysis/KissFFT.java
Patch:
@@ -16,12 +16,14 @@
 import java.nio.FloatBuffer;
 import java.nio.ShortBuffer;
 
+import com.badlogic.gdx.utils.Disposable;
+
 /**
  * A class for spectral analysis using native KissFFT
  * @author mzechner
  * 
  */
-public class KissFFT {
+public class KissFFT implements Disposable {
 	/** the pointer to the kiss fft object **/
 	private final long handle;
 

File: gdx/src/com/badlogic/gdx/audio/analysis/NativeFFT.java
Patch:
@@ -15,13 +15,15 @@
 
 import java.nio.FloatBuffer;
 
+import com.badlogic.gdx.utils.Disposable;
+
 /**
  * A native implementation of the Fast Fourier Transform, directly ported from the {@link FFT} class.
  * 
  * @author mzechner
  * 
  */
-public class NativeFFT {
+public class NativeFFT implements Disposable {
 	/** the handle to the native fft instance **/
 	private long handle;
 

File: gdx/src/com/badlogic/gdx/audio/io/Decoder.java
Patch:
@@ -15,13 +15,15 @@
 
 import java.nio.ShortBuffer;
 
+import com.badlogic.gdx.utils.Disposable;
+
 /**
  * Interface for audio decoders that return successive amplitude frames. When a decoder is no longer used it has to be disposed.
  * 
  * @author badlogicgames@gmail.com
  * 
  */
-public interface Decoder {
+public interface Decoder extends Disposable {
 	/**
 	 * Reads in samples.capacity() samples in 16-bit signed PCM format from the decoder. Returns the actual number read in. If this
 	 * number is smaller than the capacity of the buffer then the end of stream has been reached. The provided ShortBuffer must be

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -29,6 +29,7 @@
 import com.badlogic.gdx.graphics.glutils.VertexData;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.BoundingBox;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /**
@@ -60,7 +61,7 @@
  * 
  * 
  */
-public class Mesh {
+public class Mesh implements Disposable {
 	public enum VertexDataType {
 		VertexArray, VertexBufferObject, VertexBufferObjectSubData,
 	}

File: gdx/src/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -19,6 +19,7 @@
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.g2d.Gdx2DPixmap;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /**
@@ -36,7 +37,7 @@
  * @author badlogicgames@gmail.com
  * 
  */
-public class Pixmap {
+public class Pixmap implements Disposable {
 	/**
 	 * Different pixel formats.
 	 * 

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.utils.BufferUtils;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.MathUtils;
 
@@ -50,7 +51,7 @@
  * @author badlogicgames@gmail.com
  * 
  */
-public class Texture {
+public class Texture implements Disposable {
 	/**
 	 * Texture filter enum
 	 * 

File: gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java
Patch:
@@ -33,6 +33,7 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.Texture.TextureWrap;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /**
@@ -51,7 +52,7 @@
  * @author Nathan Sweet
  * @author Matthias Mann
  */
-public class BitmapFont {
+public class BitmapFont implements Disposable {
 	static private final int LOG2_PAGE_SIZE = 9;
 	static private final int PAGE_SIZE = 1 << LOG2_PAGE_SIZE;
 	static private final int PAGES = 0x10000 / PAGE_SIZE;

File: gdx/src/com/badlogic/gdx/graphics/g2d/Gdx2DPixmap.java
Patch:
@@ -18,14 +18,15 @@
 import java.nio.ByteBuffer;
 
 import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /**
  * Experimental. Do not use!
  * @author mzechner
  *
  */
-public class Gdx2DPixmap {
+public class Gdx2DPixmap implements Disposable {
 	public static final int GDX2D_FORMAT_ALPHA = 1;
 	public static final int GDX2D_FORMAT_LUMINANCE_ALPHA = 2;
 	public static final int GDX2D_FORMAT_RGB888 = 3;

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -26,6 +26,7 @@
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Matrix4;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.MathUtils;
 
@@ -69,7 +70,7 @@
  * @author mzechner
  * 
  */
-public class SpriteBatch {
+public class SpriteBatch implements Disposable {
 	private Mesh mesh;
 	private Mesh[] buffers;
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteCache.java
Patch:
@@ -27,6 +27,7 @@
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Matrix4;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.MathUtils;
 
@@ -62,7 +63,7 @@
  * SpriteCache must be disposed once it is no longer needed.
  * @author Nathan Sweet
  */
-public class SpriteCache {
+public class SpriteCache implements Disposable {
 	static private final float[] tempVertices = new float[VERTEX_SIZE * 6];
 
 	private final Mesh mesh;

File: gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
Patch:
@@ -27,6 +27,7 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.Texture.TextureWrap;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 import static com.badlogic.gdx.graphics.Texture.TextureWrap.*;
@@ -37,7 +38,7 @@
  * A TextureAtlas must be disposed to free up the resources consumed by the backing textures.
  * @author Nathan Sweet
  */
-public class TextureAtlas {
+public class TextureAtlas implements Disposable {
 	static private final String[] tuple = new String[2];
 
 	private final HashSet<Texture> textures = new HashSet(4);

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TileAtlas.java
Patch:
@@ -20,13 +20,14 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas.AtlasRegion;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.IntMap;
 
 /**
  * Contains an atlas of tiles by tile id for use with {@link TiledMapRenderer}
  * @author David Fraska
  */
-public class TileAtlas {
+public class TileAtlas implements Disposable {
 	private IntMap<AtlasRegion> regionsMap;
 	private final HashSet<Texture> textures = new HashSet<Texture>(1);
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TiledMap.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.HashMap;
 
 import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.utils.Disposable;
 
 /**
  * Contains information from a Tiled Map. Use {@link TiledLoader#createMap(FileHandle)} to fill it.

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TiledMapRenderer.java
Patch:
@@ -22,14 +22,15 @@
 import com.badlogic.gdx.graphics.g2d.TextureAtlas.AtlasRegion;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Matrix4;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.IntArray;
 
 /**
  * A renderer for Tiled maps backed with a Sprite Cache.
  * @author David Fraska
  * */
-public class TiledMapRenderer {
+public class TiledMapRenderer implements Disposable {
 	private SpriteCache cache;
 	private int normalCacheId[][][], blendedCacheId[][][];
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md5/MD5Model.java
Patch:
@@ -17,6 +17,8 @@
 import java.io.DataOutputStream;
 import java.io.IOException;
 
+import com.badlogic.gdx.utils.Disposable;
+
 /**
  * Represents an MD5 (Doom 3) skinned model.
  * Note: The normal interpolation implementation is experimental. Using it will incur a greater CPU overhead, and correct normals

File: gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md5/MD5Renderer.java
Patch:
@@ -19,14 +19,15 @@
 import com.badlogic.gdx.graphics.VertexAttributes;
 import com.badlogic.gdx.graphics.g3d.Material;
 import com.badlogic.gdx.math.collision.BoundingBox;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /**
  * The MD5Renderer draws the current frame of an animated MD5 model. It also calculates the bounding box using the resulting interpolated vertex data. 
  * @author Mario Zechner <contact@badlogicgames.com>, Nathan Sweet <admin@esotericsoftware.com>, Dave Clayton <contact@redskyforge.com>
  *
  */
-public class MD5Renderer {
+public class MD5Renderer implements Disposable{
 	private final MD5Model model;
 	private final Mesh mesh;
 	private final short[][] indices;

File: gdx/src/com/badlogic/gdx/graphics/glutils/FrameBuffer.java
Patch:
@@ -24,6 +24,7 @@
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.Texture.TextureWrap;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /**
@@ -45,7 +46,7 @@
  * @author mzechner
  * 
  */
-public class FrameBuffer {
+public class FrameBuffer implements Disposable {
 	/** the frame buffers **/
 	private final static ArrayList<FrameBuffer> buffers = new ArrayList<FrameBuffer>();
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObject.java
Patch:
@@ -22,6 +22,7 @@
 import com.badlogic.gdx.graphics.GL11;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.utils.BufferUtils;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /**

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObjectSubData.java
Patch:
@@ -22,6 +22,7 @@
 import com.badlogic.gdx.graphics.GL11;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.utils.BufferUtils;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /**

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexData.java
Patch:
@@ -15,12 +15,14 @@
 
 import java.nio.ShortBuffer;
 
+import com.badlogic.gdx.utils.Disposable;
+
 /**
  * An IndexData instance holds index data. Can be either a plain short buffer or an OpenGL buffer object.
  * @author mzechner
  * 
  */
-public interface IndexData {
+public interface IndexData extends Disposable {
 	/**
 	 * @return the number of indices currently stored in this buffer
 	 */

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java
Patch:
@@ -25,6 +25,7 @@
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.math.Matrix3;
 import com.badlogic.gdx.math.Matrix4;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.ObjectMap;
 
 /**
@@ -58,7 +59,7 @@
  * @author mzechner
  * 
  */
-public class ShaderProgram {
+public class ShaderProgram implements Disposable {
 	/** the list of currently available shaders **/
 	private final static ArrayList<ShaderProgram> shaders = new ArrayList<ShaderProgram>();
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexData.java
Patch:
@@ -16,6 +16,7 @@
 import java.nio.FloatBuffer;
 
 import com.badlogic.gdx.graphics.VertexAttributes;
+import com.badlogic.gdx.utils.Disposable;
 
 /**
  * A VertexData instance holds vertices for rendering with OpenGL. It is implemented as either a {@link VertexArray} or a
@@ -24,7 +25,7 @@
  * @author mzechner
  * 
  */
-public interface VertexData {
+public interface VertexData extends Disposable {
 	/**
 	 * @return the number of vertices this VertexData stores
 	 */

File: gdx/src/com/badlogic/gdx/physics/box2d/Body.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
+import com.badlogic.gdx.utils.Disposable;
 
 /**
  * A rigid body. These are created via World.CreateBody.

File: gdx/src/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -37,14 +37,15 @@
 import com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef;
 import com.badlogic.gdx.physics.box2d.joints.WeldJoint;
 import com.badlogic.gdx.physics.box2d.joints.WeldJointDef;
+import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.LongMap;
 
 /**
  * The world class manages all physics entities, dynamic simulation, and asynchronous queries. The world also contains efficient
  * memory management facilities.
  * @author mzechner
  */
-public class World {
+public class World implements Disposable {
 	/** the address of the world instance **/
 	private final long addr;
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -20,6 +20,7 @@
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector2;
+import com.badlogic.gdx.utils.Disposable;
 
 /**
  * <p>
@@ -42,7 +43,7 @@
  * @author mzechner
  * 
  */
-public class Stage extends InputAdapter {
+public class Stage extends InputAdapter implements Disposable {
 	protected float width;
 	protected float height;
 	protected float centerX;

File: gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
Patch:
@@ -408,9 +408,9 @@ public Rectangle getBoundingRectangle() {
 		miny = miny > vertices[Y3]? vertices[Y3]: miny;
 		miny = miny > vertices[Y4]? vertices[Y4]: miny;
 		
-		maxy = maxy > vertices[Y2]? vertices[Y2]: maxy;
-		maxy = maxy > vertices[Y3]? vertices[Y3]: maxy;
-		maxy = maxy > vertices[Y4]? vertices[Y4]: maxy;
+		maxy = maxy < vertices[Y2]? vertices[Y2]: maxy;
+		maxy = maxy < vertices[Y3]? vertices[Y3]: maxy;
+		maxy = maxy < vertices[Y4]? vertices[Y4]: maxy;
 		
 		bounds.x = minx;
 		bounds.y = miny;

File: gdx/src/com/badlogic/gdx/math/Matrix4.java
Patch:
@@ -413,6 +413,7 @@ public Matrix4 setToProjection (float near, float far, float fov, float aspectRa
 		val[M13] = 0;
 		val[M23] = l_a2;
 		val[M33] = 0;
+		
 		return this;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -306,6 +306,9 @@ public void setColor (float color) {
 		this.color = color;
 	}
 
+	/**
+	 * @return the rendering color of this SpriteBatch. Manipulating the returned instance has no effect.
+	 */
 	public Color getColor () {
 		int intBits = Float.floatToRawIntBits(color);
 		Color color = this.tempColor;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/Button.java
Patch:
@@ -102,7 +102,7 @@ public Button (String name, TextureRegion unpressedRegion, TextureRegion pressed
 	}
 
 	@Override protected boolean touchDragged (float x, float y, int pointer) {
-		return true;
+		return pressed;
 	}
 
 	public Actor hit (float x, float y) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/SpriteBatch.java
Patch:
@@ -708,7 +708,7 @@ public void draw (Texture texture, float[] spriteVertices, int offset, int lengt
 	 * Draws a rectangle with the top left corner at x,y having the width and height of the region.
 	 */
 	public void draw (TextureRegion region, float x, float y) {
-		draw(region, x, y, region.getRegionWidth(), region.getRegionHeight());
+		draw(region, x, y, Math.abs(region.getRegionWidth()), Math.abs(region.getRegionHeight()));
 	}
 
 	/**

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -18,6 +18,6 @@
 public class JoglDebugStarter {
 
 	public static void main (String[] argv) {
-		new JoglApplication(new com.badlogic.gdx.tests.TextureDataTest(), "Debug Test", 480, 320, false);
+		new JoglApplication(new com.badlogic.gdx.tests.AnimationTest(), "Debug Test", 480, 320, false);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.tests.ActionTest;
 import com.badlogic.gdx.tests.AlphaTest;
+import com.badlogic.gdx.tests.AnimationTest;
 import com.badlogic.gdx.tests.AtlasIssueTest;
 import com.badlogic.gdx.tests.AudioDeviceTest;
 import com.badlogic.gdx.tests.AudioRecorderTest;
@@ -98,7 +99,8 @@ public class GdxTests
 	public static final Class[] tests = {	
 		PixmapTest.class,
 		RotationTest.class,
-		Gdx2DTest.class,						
+		Gdx2DTest.class,
+		AnimationTest.class,
 		ActionTest.class,
 		AlphaTest.class,	
 		AtlasIssueTest.class,		

File: extensions/particle-editor/src/com/badlogic/gdx/graphics/particles/ParticleEditor.java
Patch:
@@ -393,8 +393,8 @@ public static void main (String[] args) {
 		}
 		EventQueue.invokeLater(new Runnable() {
 			public void run () {
+				new ParticleEditor();
 			}
 		});
-		new ParticleEditor();
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/g2d/ParticleEmitter.java
Patch:
@@ -416,7 +416,7 @@ private boolean updateParticle (int index, float delta, int deltaMillis) {
 
 			float velocityX, velocityY;
 			if ((updateFlags & UPDATE_ANGLE) != 0) {
-				float angle = particle.angle += particle.angleDiff * angleValue.getScale(percent);
+				float angle = particle.angle + particle.angleDiff * angleValue.getScale(percent);
 				velocityX = velocity * MathUtils.cosDeg(angle);
 				velocityY = velocity * MathUtils.sinDeg(angle);
 				if ((updateFlags & UPDATE_ROTATION) != 0) {

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -204,14 +204,14 @@ public Texture(TextureData data) {
 		this.isManaged = true;
 		this.isMipMap = false;
 		this.textureData = data;
-		this.width = textureData.getWidth();
-		this.height = textureData.getHeight();
 		this.file = null;
 		glHandle = createGLHandle();
 		Gdx.gl.glBindTexture(GL10.GL_TEXTURE_2D, glHandle);
 		setFilter(minFilter, magFilter);
 		setWrap(uWrap, vWrap);
 		textureData.load();			
+		this.width = textureData.getWidth();
+		this.height = textureData.getHeight();
 		managedTextures.add(this);
 	}
 	

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -204,12 +204,14 @@ public Texture(TextureData data) {
 		this.isManaged = true;
 		this.isMipMap = false;
 		this.textureData = data;
+		this.width = textureData.getWidth();
+		this.height = textureData.getHeight();
 		this.file = null;
 		glHandle = createGLHandle();
 		Gdx.gl.glBindTexture(GL10.GL_TEXTURE_2D, glHandle);
 		setFilter(minFilter, magFilter);
 		setWrap(uWrap, vWrap);
-		textureData.load();	
+		textureData.load();			
 		managedTextures.add(this);
 	}
 	

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -18,6 +18,6 @@
 public class JoglDebugStarter {
 
 	public static void main (String[] argv) {
-		new JoglApplication(new com.badlogic.gdx.tests.RotationTest(), "Debug Test", 480, 320, false);
+		new JoglApplication(new com.badlogic.gdx.tests.TextureDataTest(), "Debug Test", 480, 320, false);
 	}
 }

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -18,6 +18,6 @@
 public class JoglDebugStarter {
 
 	public static void main (String[] argv) {
-		new JoglApplication(new com.badlogic.gdx.tests.Gdx2DTest(), "Debug Test", 480, 320, false);
+		new JoglApplication(new com.badlogic.gdx.tests.RotationTest(), "Debug Test", 480, 320, false);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -54,6 +54,7 @@
 import com.badlogic.gdx.tests.PixmapBlendingTest;
 import com.badlogic.gdx.tests.PixmapTest;
 import com.badlogic.gdx.tests.Pong;
+import com.badlogic.gdx.tests.RotationTest;
 import com.badlogic.gdx.tests.ShaderMultitextureTest;
 import com.badlogic.gdx.tests.SimpleTest;
 import com.badlogic.gdx.tests.SoundTest;
@@ -96,6 +97,7 @@ public class GdxTests
 {
 	public static final Class[] tests = {	
 		PixmapTest.class,
+		RotationTest.class,
 		Gdx2DTest.class,						
 		ActionTest.class,
 		AlphaTest.class,	

File: demos/helloworld/gdx-helloworld/src/com/badlogic/gdx/helloworld/HelloWorld.java
Patch:
@@ -64,8 +64,7 @@ public class HelloWorld implements ApplicationListener {
 	@Override public void create () {
 		font = new BitmapFont();
 		font.setColor(Color.RED);
-		texture = Gdx.graphics.newTexture(Gdx.files.getFileHandle("data/badlogic.jpg", FileType.Internal), TextureFilter.MipMap,
-			TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge);
+		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
 		spriteBatch = new SpriteBatch();
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/MoveBy.java
Patch:
@@ -50,6 +50,8 @@ public class MoveBy extends AnimationAction {
 		this.startY = target.y;
 		this.deltaX = x;
 		this.deltaY = y;
+		this.x = target.x + x;
+		this.y = target.y + y;
 		this.taken = 0;
 		this.done = false;
 	}

File: gdx/src/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -116,8 +116,7 @@ public static void setFilter(Filter filter) {
 	public Pixmap(int width, int height, Format format) {
 		pixmap = new Gdx2DPixmap(width, height, Format.toGdx2DPixmapFormat(format));
 		setColor(0, 0, 0, 0);
-		fill();
-		setColor(1, 1, 1, 1);
+		fill();		
 	}
 	
 	/**

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -196,7 +196,7 @@ public Texture(int width, int height, Format format) {
 	 * Creates a new texture from the given {@link TextureData}. The
 	 * texture is managed and the TextureData instance is invoked
 	 * in case of a context loss to recreate the texture. The texture wrap for u and v is set to GL_CLAMP_TO_EDGE by default.
-	 * The texture is not managed and has to be reloaded manually on a context loss.
+	 * The texture is managed.
 	 * @param data the TextureData
 	 */
 	public Texture(TextureData data) {
@@ -209,6 +209,7 @@ public Texture(TextureData data) {
 		setFilter(minFilter, magFilter);
 		setWrap(uWrap, vWrap);
 		textureData.load();	
+		managedTextures.add(this);
 	}
 	
 	private void reload() {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Delay.java
Patch:
@@ -32,6 +32,7 @@ protected Delay newObject () {
 		Delay delay = pool.obtain();
 		delay.duration = duration;
 		delay.action = action;
+		delay.listener = null;
 		return delay;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/FadeIn.java
Patch:
@@ -36,6 +36,7 @@ protected FadeIn newObject () {
 		FadeIn action = pool.obtain();
 		action.duration = duration;
 		action.invDuration = 1 / duration;
+		action.listener = null;
 		return action;
 	}
 
@@ -46,6 +47,7 @@ protected FadeIn newObject () {
 		this.deltaAlpha = 1;
 		this.taken = 0;
 		this.done = false;
+		
 	}
 
 	@Override public void act (float delta) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/FadeOut.java
Patch:
@@ -36,6 +36,7 @@ protected FadeOut newObject () {
 		FadeOut action = pool.obtain();
 		action.duration = duration;
 		action.invDuration = 1 / duration;
+		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/FadeTo.java
Patch:
@@ -40,6 +40,7 @@ protected FadeTo newObject () {
 		action.toAlpha = alpha;
 		action.duration = duration;
 		action.invDuration = 1 / duration;
+		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Forever.java
Patch:
@@ -30,6 +30,7 @@ protected Forever newObject () {
 	public static Forever $ (Action action) {
 		Forever forever = pool.obtain();
 		forever.action = action;
+		forever.listener = null;
 		return forever;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/MoveBy.java
Patch:
@@ -42,6 +42,7 @@ protected MoveBy newObject () {
 		action.y = y;
 		action.duration = duration;
 		action.invDuration = 1 / duration;
+		action.listener = null;
 		return action;
 	}
 
@@ -52,7 +53,7 @@ protected MoveBy newObject () {
 		this.deltaX = x;
 		this.deltaY = y;
 		this.taken = 0;
-		this.done = false;
+		this.done = false;		
 	}
 
 	@Override public void act (float delta) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/MoveTo.java
Patch:
@@ -42,6 +42,7 @@ protected MoveTo newObject () {
 		action.y = y;
 		action.duration = duration;
 		action.invDuration = 1 / duration;
+		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Parallel.java
Patch:
@@ -35,6 +35,7 @@ protected Parallel newObject () {
 		int len = actions.length;
 		for (int i = 0; i < len; i++)
 			action.actions.add(actions[i]);
+		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Repeat.java
Patch:
@@ -34,6 +34,7 @@ protected Repeat newObject () {
 		repeat.action = action;
 		repeat.times = times;
 		repeat.finishedTimes = 0;
+		repeat.listener = null;
 		return repeat;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RotateBy.java
Patch:
@@ -38,6 +38,7 @@ protected RotateBy newObject () {
 		action.rotation = rotation;
 		action.duration = duration;
 		action.invDuration = 1 / duration;
+		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RotateTo.java
Patch:
@@ -38,6 +38,7 @@ protected RotateTo newObject () {
 		action.rotation = rotation;
 		action.duration = duration;
 		action.invDuration = 1 / duration;
+		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/ScaleTo.java
Patch:
@@ -42,6 +42,7 @@ protected ScaleTo newObject () {
 		action.scaleY = scaleY;
 		action.duration = duration;
 		action.invDuration = 1 / duration;
+		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Sequence.java
Patch:
@@ -38,6 +38,7 @@ protected Sequence newObject () {
 		int len = actions.length;
 		for (int i = 0; i < len; i++)
 			action.actions.add(actions[i]);
+		action.listener = null;
 		return action;
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Parallel.java
Patch:
@@ -82,6 +82,8 @@ protected Parallel newObject () {
 	@Override public Action copy () {
 		Parallel action = pool.obtain();
 		action.actions.clear();
+		if(action.finished == null || action.finished.length < actions.size()) 
+			action.finished = new boolean[actions.size()];
 		int len = actions.size();
 		for(int i = 0; i < len; i++)
 			action.finished[i] = false;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PixmapTest.java
Patch:
@@ -38,7 +38,7 @@ public void create() {
       pixmap.drawLine(100, 0, 100, 100);
       
       pixmap.setColor(1.0f, 1.0f, 1.0f, 1.0f);    // White
-      pixmap.drawCircle(400, 300, 16);
+      pixmap.drawCircle(400, 300, 100);
       
       // Blit the composited overlay to a texture
       texture.draw (pixmap, 0,0);

File: gdx/src/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -115,6 +115,9 @@ public static void setFilter(Filter filter) {
 	 */
 	public Pixmap(int width, int height, Format format) {
 		pixmap = new Gdx2DPixmap(width, height, Format.toGdx2DPixmapFormat(format));
+		setColor(0, 0, 0, 0);
+		fill();
+		setColor(1, 1, 1, 1);
 	}
 	
 	/**

File: gdx/src/com/badlogic/gdx/graphics/g2d/Gdx2DPixmap.java
Patch:
@@ -57,7 +57,7 @@ public Gdx2DPixmap(InputStream in, int requestedFormat) throws IOException {
 		int readBytes = 0;
 		
 		while((readBytes = in.read(buffer)) != -1) {
-			bytes.write(buffer);
+			bytes.write(buffer, 0, readBytes);
 		}
 		
 		buffer = bytes.toByteArray();

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OggInputStream.java
Patch:
@@ -168,7 +168,7 @@ private boolean getPageAndPacket () {
 		try {
 			bytes = input.read(buffer, index, 4096);
 		} catch (Exception e) {
-			throw new GdxRuntimeException("Failure reading Vorbis.");
+			throw new GdxRuntimeException("Failure reading Vorbis.", e);
 		}
 		syncState.wrote(bytes);
 
@@ -252,7 +252,7 @@ private boolean getPageAndPacket () {
 			try {
 				bytes = input.read(buffer, index, 4096);
 			} catch (Exception e) {
-				throw new GdxRuntimeException("Failed to read Vorbis.");
+				throw new GdxRuntimeException("Failed to read Vorbis.", e);
 			}
 			if (bytes == 0 && i < 2) {
 				throw new GdxRuntimeException("End of file before finding all Vorbis headers.");
@@ -393,7 +393,7 @@ private void readPCM () {
 						try {
 							bytes = input.read(buffer, index, 4096);
 						} catch (Exception e) {
-							throw new GdxRuntimeException("Error during Vorbis decoding.");
+							throw new GdxRuntimeException("Error during Vorbis decoding.", e);
 						}
 					} else {
 						bytes = 0;

File: gdx/src/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -129,7 +129,7 @@ public Pixmap(FileHandle file) {
 			in = file.read();
 			pixmap = new Gdx2DPixmap(in, 0);
 		} catch (Exception e) {
-			throw new GdxRuntimeException("couldn't load file '" + file.name() + "', " + e.getMessage());
+			throw new GdxRuntimeException("couldn't load file '" + file.name() + "'", e);
 		} finally {
 			if(in != null);
 			try { in.close(); } catch(Exception e) { };

File: demos/metagun/metagun-desktop/src/com/mojang/metagun/entity/Entity.java
Patch:
@@ -1,9 +1,9 @@
 package com.mojang.metagun.entity;
 
-import java.awt.Graphics;
 import java.util.Random;
 
-import com.mojang.metagun.level.*;
+import com.mojang.metagun.level.Camera;
+import com.mojang.metagun.level.Level;
 import com.mojang.metagun.screen.Screen;
 
 public abstract class Entity {

File: demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/SignReadScreen.java
Patch:
@@ -1,5 +1,6 @@
 package com.mojang.metagun.screen;
 
+import com.badlogic.gdx.Gdx;
 import com.mojang.metagun.Art;
 import com.mojang.metagun.Input;
 
@@ -192,7 +193,8 @@ public void render() {
     }
     
     public void tick(Input input) {
-        if (!input.oldButtons[Input.ESCAPE] && input.buttons[Input.ESCAPE]) {
+        if (!input.oldButtons[Input.ESCAPE] && input.buttons[Input.ESCAPE] ||
+      	    Gdx.input.isTouched()) {
             setScreen(parent);
             return;
         }

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALMusic.java
Patch:
@@ -72,16 +72,18 @@ public void play () {
 	}
 
 	public void stop () {
+		if (streamID == -1) return;
 		reset();
 		alSourceStop(streamID);
 		streamID = -1;
 	}
 
 	public void pause () {
-		alSourcePause(streamID);
+		if (streamID != -1) alSourcePause(streamID);
 	}
 
 	public boolean isPlaying () {
+		if (streamID == -1) return false;
 		return alGetSourcei(streamID, AL_SOURCE_STATE) == AL_PLAYING;
 	}
 

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALSound.java
Patch:
@@ -69,7 +69,7 @@ public void loop () {
 	}
 
 	public void stop () {
-		alSourceStop(streamID);
+		if (streamID != -1) alSourceStop(streamID);
 	}
 
 	public void dispose () {

File: gdx/src/com/badlogic/gdx/Input.java
Patch:
@@ -46,6 +46,7 @@ public interface Input {
 	 */
 	public interface TextInputListener {
 		public void input (String text);
+		public void cancled();
 	}
 
 	/**

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ManagedTest.java
Patch:
@@ -34,7 +34,7 @@ public class ManagedTest extends GdxTest {
 		mesh.setVertices(new float[] {-0.5f, -0.5f, 0, 0, 0.5f, -0.5f, 1, 0, 0.5f, 0.5f, 1, 1, -0.5f, 0.5f, 0, 1});
 		mesh.setIndices(new short[] {0, 1, 2, 3});
 
-		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
+		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"), true);
 		texture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);		
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MeshTest.java
Patch:
@@ -30,6 +30,7 @@ public class MeshTest extends GdxTest {
 	Texture texture;
 
 	@Override public void render () {
+		Gdx.graphics.getGL10().glClear(GL10.GL_COLOR_BUFFER_BIT);
 		Gdx.graphics.getGL10().glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		Gdx.graphics.getGL10().glEnable(GL10.GL_TEXTURE_2D);
 		texture.bind();
@@ -45,7 +46,7 @@ public class MeshTest extends GdxTest {
 			Color.toFloatBits(255, 255, 255, 255), 0, 1});
 		mesh.setIndices(new short[] {0, 1, 2, 2, 3, 0});
 
-		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
+		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"), true);
 		texture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -66,6 +66,7 @@
 import com.badlogic.gdx.tests.SpritePerformanteTest2;
 import com.badlogic.gdx.tests.StageTest;
 import com.badlogic.gdx.tests.TerrainTest;
+import com.badlogic.gdx.tests.TextInputDialogTest;
 import com.badlogic.gdx.tests.TextureAtlasTest;
 import com.badlogic.gdx.tests.TextureRenderTest;
 import com.badlogic.gdx.tests.TileTest;
@@ -145,6 +146,7 @@ public class GdxTests
 		StageTest.class,
 		TerrainTest.class,		
 		TextureAtlasTest.class,
+		TextInputDialogTest.class,
 		TextureRenderTest.class,
 		TiledMapTest.class,
 		TileTest.class,

File: demos/superjumper/superjumper/src/com/badlogicgames/superjumper/Assets.java
Patch:
@@ -43,7 +43,7 @@ public class Assets {
     public static Sound clickSound;
     
     public static Texture loadTexture(String file) {
-   	 return Gdx.graphics.newTexture(Gdx.files.internal(file), TextureFilter.Nearest, TextureFilter.Nearest, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge);
+    	return new Texture(Gdx.files.internal(file));
     }
     
     public static void load() {

File: gdx/src/com/badlogic/gdx/graphics/g3d/keyframed/KeyframeAnimation.java
Patch:
@@ -23,13 +23,15 @@ public class KeyframeAnimation extends Animation {
 	public String name;
 	public Keyframe[] keyframes;
 	public float length;
+	public float sampleRate;
 	public int refs;
 	
-	public KeyframeAnimation(String name, int frames, float length)
+	public KeyframeAnimation(String name, int frames, float length, float sampleRate)
 	{
 		this.name = name;
 		this.keyframes = new Keyframe[frames];
 		this.length = length;
+		this.sampleRate = sampleRate;
 		this.refs = 1;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md5/MD5Loader.java
Patch:
@@ -210,7 +210,7 @@ public static MD5Model loadModel (InputStream in, boolean allocateNormals) {
 			return null;
 		}			
 	}
-
+	
 	public static MD5Animation loadAnimation (InputStream in) {
 		BufferedReader reader = new BufferedReader(new InputStreamReader(in));
 		List<String> tokens = new ArrayList<String>();

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvaders.java
Patch:
@@ -71,7 +71,7 @@ public class GdxInvaders implements ApplicationListener {
 
 	@Override public void create () {
 		if (!isInitialized) {
-			screen = new GameOver(Gdx.app);
+			screen = new MainMenu(Gdx.app);
 			Music music = Gdx.audio.newMusic(Gdx.files.getFileHandle("data/8.12.mp3", FileType.Internal));
 			music.setLooping(true);
 			music.play();

File: demos/vector-pinball/gdx-vectorpinball/src/com/dozingcatsoftware/bouncy/Bouncy.java
Patch:
@@ -77,13 +77,13 @@ public class Bouncy extends InputAdapter implements ApplicationListener {
 
 	}
 
-	@Override public boolean touchDown (int x, int y, int pointer) {
+	@Override public boolean touchDown (int x, int y, int pointer, int button) {
 		field.removeDeadBalls();
 		if (field.getBalls().size() != 0) field.setAllFlippersEngaged(true);
 		return false;
 	}
 
-	@Override public boolean touchUp (int x, int y, int pointer) {
+	@Override public boolean touchUp (int x, int y, int pointer, int button) {
 		field.removeDeadBalls();
 		if (field.getBalls().size() == 0) field.launchBall();
 		field.setAllFlippersEngaged(false);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -287,6 +287,7 @@ public void onSurfaceChanged(javax.microedition.khronos.opengles.GL10 gl, int wi
         this.width = width;
         this.height = height;
         updatePpi();
+        gl.glViewport(0, 0, this.width, this.height);
         app.listener.resize(width, height);
     }
 

File: tests/gdx-tests-angle/src/com/badlogic/gdx/tests/angle/AngleDebugStarter.java
Patch:
@@ -17,6 +17,6 @@
 
 public class AngleDebugStarter {
 	public static void main (String[] argv) {
-		new AngleApplication(new com.badlogic.gdx.tests.gles2.SimpleVertexShader(), "Angle Test", 480, 320, true);
+		new AngleApplication(new com.badlogic.gdx.tests.InputTest(), "Angle Test", 480, 320, false);
 	}
 }

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -18,6 +18,6 @@
 public class JoglDebugStarter {
 
 	public static void main (String[] argv) {
-		new JoglApplication(new com.badlogic.gdx.tests.SpritePerformanteTest2(), "Debug Test", 800, 600, false);
+		new JoglApplication(new com.badlogic.gdx.tests.Gdx2DTest(), "Debug Test", 280, 100, false);
 	}
 }

File: tests/gdx-tests-angle/src/com/badlogic/gdx/tests/angle/AngleDebugStarter.java
Patch:
@@ -17,6 +17,6 @@
 
 public class AngleDebugStarter {
 	public static void main (String[] argv) {
-		new AngleApplication(new com.badlogic.gdx.tests.MeshShaderTest(), "Angle Test", 480, 320, false);
+		new AngleApplication(new com.badlogic.gdx.tests.gles2.SimpleVertexShader(), "Angle Test", 480, 320, true);
 	}
 }

File: gdx/src/com/badlogic/gdx/utils/GdxNativesLoader.java
Patch:
@@ -88,7 +88,7 @@ static public void load () {
 		String vm = System.getProperty("java.vm.name");
 		if (vm == null || !vm.contains("Dalvik")) {
 			if (isWindows) {
-				nativesLoaded = loadLibrary("gdx.dll", "gdx64.dll");
+				nativesLoaded = loadLibrary("gdx.dll", "gdx-64.dll");
 			} else if (isMac) {
 				nativesLoaded = loadLibrary("libgdx.dylib", "libgdx.dylib");
 			} else if (isLinux) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.badlogic.gdx.tests.ActionTest;
 import com.badlogic.gdx.tests.AlphaTest;
 import com.badlogic.gdx.tests.AtlasIssueTest;
 import com.badlogic.gdx.tests.AudioDeviceTest;
@@ -90,8 +91,9 @@
  */
 public class GdxTests 
 {
-	public static final Class[] tests = {		
+	public static final Class[] tests = {				
 		Gdx2DTest.class,						
+		ActionTest.class,
 		AlphaTest.class,	
 		AtlasIssueTest.class,		
 		FilterPerformanceTest.class,

File: gdx/src/com/badlogic/gdx/utils/GdxNativesLoader.java
Patch:
@@ -37,9 +37,9 @@ static public boolean loadLibrary (String nativeFile32, String nativeFile64) {
 	}
 
 	static public String extractLibrary (String native32, String native64) {
+		String nativeFileName = is64Bit ? native64 : native32;
 		try {
 			// Extract native from classpath to temp dir.
-			String nativeFileName = is64Bit ? native64 : native32;
 			InputStream input = GdxNativesLoader.class.getResourceAsStream("/" + nativeFileName);
 			if (input == null) return null;
 			nativesDir.mkdirs();
@@ -55,7 +55,7 @@ static public String extractLibrary (String native32, String native64) {
 			output.close();
 			return nativeFile.getAbsolutePath();
 		} catch (IOException ex) {
-			ex.printStackTrace();
+			new GdxRuntimeException("Error extracting native library: " + nativeFileName, ex).printStackTrace();
 			return null;
 		}
 	}

File: backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALAudio.java
Patch:
@@ -110,6 +110,8 @@ public void dispose () {
 			if (state != AL_STOPPED) alSourceStop(streamID);
 			alDeleteSources(streamID);
 		}
+		
+		AL.destroy();
 	}
 
 	public AudioDevice newAudioDevice (boolean isMono) {
@@ -118,5 +120,5 @@ public AudioDevice newAudioDevice (boolean isMono) {
 
 	public AudioRecorder newAudioRecoder (int samplingRate, boolean isMono) {
 		return new JavaSoundAudioRecorder(samplingRate, isMono);
-	}
+	}	
 }

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglInput.java
Patch:
@@ -312,8 +312,10 @@ private int toGdxButton(int swingButton) {
 			touchEvents.add(event);			
 
 			touchX = event.x;
-			touchY = event.y;			
+			touchY = event.y;					
 			pressedButtons.remove(event.button);
+			if(pressedButtons.size()==0)
+				touchDown = false;
 		}
 	}
 	

File: gdx/src/com/badlogic/gdx/math/Vector3.java
Patch:
@@ -307,7 +307,7 @@ public Vector3 crs (Vector3 vector) {
 	 * @return This vector for chaining
 	 */
 	public Vector3 crs (float x, float y, float z) {
-		return this.set(y * z - z * y, z * x - x * z, x * y - y * x);
+		return this.set(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x);
 	}
 
 	/**

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TiledMapRenderer.java
Patch:
@@ -291,7 +291,7 @@ public int getMapWidthPixels () {
 	 * Computes the Tiled Map row given a Y coordinate in pixels
 	 * @param worldY the Y coordinate in pixels
 	 * */
-	int getRow (int worldY) {
+	public int getRow (int worldY) {
 		if (worldY < 0) return 0;
 		if (worldY > pixelsPerMapY) return tileHeight - 1;
 		return worldY / tileHeight;
@@ -301,13 +301,14 @@ int getRow (int worldY) {
 	 * Computes the Tiled Map column given an X coordinate in pixels
 	 * @param worldX the X coordinate in pixels
 	 * */
-	int getCol (int worldX) {
+	public int getCol (int worldX) {
 		if (worldX < 0) return 0;
 		if (worldX > pixelsPerMapX) return tileWidth - 1;
 		return worldX / tileWidth;
 	}
 
 	private static int parseIntWithDefault (String string, int defaultValue) {
+		if(string == null) return defaultValue;
 		try {
 			return Integer.parseInt(string);
 		} catch (NumberFormatException e) {

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TiledMap.java
Patch:
@@ -26,6 +26,7 @@ public class TiledMap {
 	public ArrayList<TiledLayer> layers = new ArrayList<TiledLayer>(4);
 	public ArrayList<TiledObjectGroup> objectGroups = new ArrayList<TiledObjectGroup>(1);
 	public ArrayList<TileSet> tileSets = new ArrayList<TileSet>(5);
+	
 	/** Stores the map properties with a key of the property name. */
 	public HashMap<String, String> properties = new HashMap<String, String>(2);
 	private ArrayList<TileProperty> tileProperties = new ArrayList<TileProperty>(0);

File: gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TiledMapRenderer.java
Patch:
@@ -56,7 +56,7 @@ public class TiledMapRenderer {
 	 * {@link TiledMapRenderer#getLastCol()}, and {@link TiledMapRenderer#getLastRow()} after calling
 	 * {@link TiledMapRenderer#render(int, int, int, int, int[])} to determine how many blocks were drawn.
 	 * 
-	 * @param map The map to be drawn
+	 * @param map A Tiled map that has been run through the {@link TiledMapPacker}, which will add a few properties to optimize the renderer
 	 * @param atlas The tile atlas to be used when drawing the map
 	 * @param blockWidth The width of each block to be drawn, in pixels
 	 * @param blockHeight The width of each block to be drawn, in pixels

File: gdx/src/com/badlogic/gdx/utils/GdxNativesLoader.java
Patch:
@@ -90,7 +90,7 @@ public static boolean loadLibrary (String libName, String classPath, String outp
 			System.load(outputPath + tmpName);
 			return true;
 		} catch (Throwable t) {
-			System.err.println("GdxNativesLoader: Couldn't unpack and load native '" + libName + "'");
+			//System.err.println("GdxNativesLoader: Couldn't unpack and load native '" + libName + "'");
 			return false;
 		} finally {
 			if (out != null) try {

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/BufferUtilsTest.java
Patch:
@@ -11,7 +11,7 @@
  * governing permissions and limitations under the License.
  */
 
-package com.badlogic.gdx.tests.android;
+package com.badlogic.gdx.tests;
 
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/MicroBenchmarks.java
Patch:
@@ -11,7 +11,7 @@
  * governing permissions and limitations under the License.
  */
 
-package com.badlogic.gdx.tests.android;
+package com.badlogic.gdx.tests;
 
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/WindowedTest.java
Patch:
@@ -11,7 +11,7 @@
  * governing permissions and limitations under the License.
  */
 
-package com.badlogic.gdx.tests.android;
+package com.badlogic.gdx.tests;
 
 import javax.microedition.khronos.opengles.GL10;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -26,6 +26,7 @@
 import com.badlogic.gdx.tests.BobTest;
 import com.badlogic.gdx.tests.Box2DTest;
 import com.badlogic.gdx.tests.Box2DTestCollection;
+import com.badlogic.gdx.tests.CompassTest;
 import com.badlogic.gdx.tests.FilesTest;
 import com.badlogic.gdx.tests.FilterPerformanceTest;
 import com.badlogic.gdx.tests.FloatTest;
@@ -101,6 +102,7 @@ public class GdxTests
 		BobTest.class,
 		Box2DTest.class,
 		Box2DTestCollection.class,
+		CompassTest.class,
 		FilesTest.class,
 		//FillrateTest.class,
 		FloatTest.class,

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglNativesLoader.java
Patch:
@@ -27,6 +27,7 @@ final class LwjglNativesLoader {
 
 	static {
 		try {
+			System.setProperty("org.lwjgl.input.Mouse.allowNegativeMouseCoords", "true");
 			Method method = Class.forName("javax.jnlp.ServiceManager").getDeclaredMethod("lookup", new Class[] {String.class});
 			method.invoke(null, "javax.jnlp.PersistenceService");
 			load = false;
@@ -35,8 +36,7 @@ final class LwjglNativesLoader {
 		}
 	}
 
-	static void load () {
-		System.setProperty("org.lwjgl.input.Mouse.allowNegativeMouseCoords", "true");
+	static void load () {		
 		Version.loadLibrary();
 
 		if (!load) return;

File: extensions/awesomium/gdx-awesomium-tests/src/com/badlogic/gdx/awesomium/GLTest.java
Patch:
@@ -76,14 +76,14 @@ public void calculatePoint (int x, int y) {
 				if(point.y > 511) point.y = 511;				
 			}
 
-			@Override public boolean touchDown (int x, int y, int pointer) {
+			@Override public boolean touchDown (int x, int y, int pointer, int newParam) {
 				calculatePoint(x, y);
 				webView.injectMouseMove((int)point.x, (int)point.y);
 				webView.injectMouseDown(MouseButton.Left);
 				return false;
 			}
 
-			@Override public boolean touchUp (int x, int y, int pointer) {
+			@Override public boolean touchUp (int x, int y, int pointer, int button) {
 				calculatePoint(x, y);
 				webView.injectMouseMove((int)point.x, (int)point.y);
 				webView.injectMouseUp(MouseButton.Left);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -210,7 +210,7 @@ public List<Group> getGroups () {
 	 * @param pointer the pointer index
 	 * @return whether an {@link Actor} in the scene processed the event or not
 	 */
-	public boolean touchDown (int x, int y, int pointer) {
+	public boolean touchDown (int x, int y, int pointer, int newParam) {
 		toStageCoordinates(x, y, coords);
 		Group.toChildCoordinates(root, coords.x, coords.y, point);
 		return root.touchDown(point.x, point.y, pointer);
@@ -224,7 +224,7 @@ public boolean touchDown (int x, int y, int pointer) {
 	 * @param pointer the pointer index
 	 * @return whether an {@link Actor} in the scene processed the event or not
 	 */
-	public boolean touchUp (int x, int y, int pointer) {
+	public boolean touchUp (int x, int y, int pointer, int button) {
 		toStageCoordinates(x, y, coords);
 		Group.toChildCoordinates(root, coords.x, coords.y, point);
 		return root.touchUp(point.x, point.y, pointer);

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -18,6 +18,6 @@
 public class JoglDebugStarter {
 
 	public static void main (String[] argv) {
-		new JoglApplication(new com.badlogic.gdx.tests.Gdx2DTest(), "Debug Test", 480, 320, false);
+		new JoglApplication(new com.badlogic.gdx.tests.ShaderMultitextureTest(), "Debug Test", 480, 320, true);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontAlignmentTest.java
Patch:
@@ -38,7 +38,7 @@ public class BitmapFontAlignmentTest extends GdxTest {
 
 	@Override public void create () {
 		Gdx.input.setInputProcessor(new InputAdapter() {
-			public boolean touchDown (int x, int y, int pointer) {
+			public boolean touchDown (int x, int y, int pointer, int newParam) {
 				renderMode = (renderMode + 1) % 6;
 				return false;
 			}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontFlipTest.java
Patch:
@@ -39,7 +39,7 @@ public class BitmapFontFlipTest extends GdxTest {
 
 	@Override public void create () {
 		Gdx.input.setInputProcessor(new InputAdapter() {
-			public boolean touchDown (int x, int y, int pointer) {
+			public boolean touchDown (int x, int y, int pointer, int newParam) {
 				renderMode = (renderMode + 1) % 4;
 				return false;
 			}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontTest.java
Patch:
@@ -38,7 +38,7 @@ public class BitmapFontTest extends GdxTest {
 
 	@Override public void create () {
 		Gdx.input.setInputProcessor(new InputAdapter() {
-			public boolean touchDown (int x, int y, int pointer) {
+			public boolean touchDown (int x, int y, int pointer, int newParam) {
 				renderMode = (renderMode + 1) % 4;
 				return false;
 			}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FilterPerformanceTest.java
Patch:
@@ -71,7 +71,7 @@ public void create () {
 		font = new BitmapFont(Gdx.files.internal("data/font.fnt"), Gdx.files.internal("data/font.png"), false);	
 
 		Gdx.input.setInputProcessor(new InputAdapter() {
-			public boolean touchDown (int x, int y, int pointer) {
+			public boolean touchDown (int x, int y, int pointer, int newParam) {
 				mode++;
 				if (mode == filters.length * 2) mode = 0;
 				setTextureFilter(mode / 2);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/OrthoCamController.java
Patch:
@@ -25,7 +25,7 @@ public OrthoCamController(OrthographicCamera camera) {
 		return false;
 	}
 	
-	@Override public boolean touchUp(int x, int y, int pointer) {
+	@Override public boolean touchUp(int x, int y, int pointer, int button) {
 		last.set(-1, -1);
 		return false;
 	}

File: gdx/src/com/badlogic/gdx/math/Frustum.java
Patch:
@@ -13,6 +13,7 @@
 
 package com.badlogic.gdx.math;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -27,7 +28,7 @@
  * @author badlogicgames@gmail.com
  * 
  */
-public final class Frustum {
+public class Frustum implements Serializable {
 	private static final long serialVersionUID = -7082961504074610513L;
 	protected List<Plane> planes = new ArrayList<Plane>(6);
 	protected float near, far, fov, aspect, near_width, near_height, far_width, far_height, tang;

File: gdx/src/com/badlogic/gdx/math/Matrix3.java
Patch:
@@ -13,6 +13,8 @@
 
 package com.badlogic.gdx.math;
 
+import java.io.Serializable;
+
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /**
@@ -21,7 +23,7 @@
  * @author mzechner
  * 
  */
-public class Matrix3 {
+public class Matrix3 implements Serializable {
 	private final static float DEGREE_TO_RAD = (float)Math.PI / 180;
 	float[] vals = new float[9];
 

File: gdx/src/com/badlogic/gdx/math/Matrix4.java
Patch:
@@ -13,14 +13,16 @@
 
 package com.badlogic.gdx.math;
 
+import java.io.Serializable;
+
 /**
  * Encapsulates a column major 4 by 4 matrix. You can access the linear array for use with OpenGL via the public
  * {@link Matrix4#val} member. Like the {@link Vector3} class it allows to chain methods by returning a reference to itself.
  * 
  * @author badlogicgames@gmail.com
  * 
  */
-public final class Matrix4 {
+public class Matrix4 implements Serializable {
 	private static final long serialVersionUID = -2717655254359579617L;
 	public static final int M00 = 0;// 0;
 	public static final int M01 = 4;// 1;

File: gdx/src/com/badlogic/gdx/math/Plane.java
Patch:
@@ -13,13 +13,15 @@
 
 package com.badlogic.gdx.math;
 
+import java.io.Serializable;
+
 /**
  * A plane defined via a unit length normal and the distance from the origin, as you learned in your math class.
  * 
  * @author badlogicgames@gmail.com
  * 
  */
-public final class Plane {
+public class Plane implements Serializable {
 	/**
 	 * Enum specifying on which side a point lies respective to the plane and it's normal. {@link PlaneSide#Front} is the side to
 	 * which the normal points.

File: gdx/src/com/badlogic/gdx/math/Quaternion.java
Patch:
@@ -21,7 +21,7 @@
  * @author badlogicgames@gmail.com
  * 
  */
-public final class Quaternion implements Serializable {
+public class Quaternion implements Serializable {
 	private static final long serialVersionUID = -7661875440774897168L;
 	public float x;
 	public float y;

File: gdx/src/com/badlogic/gdx/math/Rectangle.java
Patch:
@@ -13,12 +13,14 @@
 
 package com.badlogic.gdx.math;
 
+import java.io.Serializable;
+
 /**
  * Encapsulates a 2D rectangle defined by it's bottom corner point and its extends in x (width) and y (height).
  * @author badlogicgames@gmail.com
  * 
  */
-public class Rectangle {
+public class Rectangle implements Serializable {
 	public float x, y;
 	public float width, height;
 

File: gdx/src/com/badlogic/gdx/math/Vector2.java
Patch:
@@ -13,12 +13,14 @@
 
 package com.badlogic.gdx.math;
 
+import java.io.Serializable;
+
 /**
  * Encapsulates a 2D vector. Allows chaining methods by returning a reference to itself
  * @author badlogicgames@gmail.com
  * 
  */
-public final class Vector2 {
+public class Vector2 implements Serializable {
 	/** static temporary vector **/
 	private final static Vector2 tmp = new Vector2();
 

File: gdx/src/com/badlogic/gdx/math/Vector3.java
Patch:
@@ -13,13 +13,15 @@
 
 package com.badlogic.gdx.math;
 
+import java.io.Serializable;
+
 /**
  * Encapsulates a 3D vector. Allows chaining operations by returning a reference to it self in all modification methods.
  * 
  * @author badlogicgames@gmail.com
  * 
  */
-public final class Vector3 {
+public class Vector3 implements Serializable {
 	private static final long serialVersionUID = 3840054589595372522L;
 	/** the x-component of this vector **/
 	public float x;

File: gdx/src/com/badlogic/gdx/math/collision/BoundingBox.java
Patch:
@@ -13,6 +13,7 @@
 
 package com.badlogic.gdx.math.collision;
 
+import java.io.Serializable;
 import java.util.List;
 
 import com.badlogic.gdx.math.Matrix4;
@@ -25,7 +26,7 @@
  * @author badlogicgames@gmail.com
  * 
  */
-public final class BoundingBox {
+public class BoundingBox implements Serializable {
 	private static final long serialVersionUID = -1286036817192127343L;
 	final Vector3 crn[] = new Vector3[8];
 	public final Vector3 min = new Vector3();

File: gdx/src/com/badlogic/gdx/math/collision/Ray.java
Patch:
@@ -13,6 +13,8 @@
 
 package com.badlogic.gdx.math.collision;
 
+import java.io.Serializable;
+
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 
@@ -22,7 +24,7 @@
  * @author badlogicgames@gmail.com
  * 
  */
-public final class Ray {
+public class Ray implements Serializable {
 	public final Vector3 origin = new Vector3();
 	public final Vector3 direction = new Vector3();
 

File: gdx/src/com/badlogic/gdx/math/collision/Segment.java
Patch:
@@ -13,6 +13,8 @@
 
 package com.badlogic.gdx.math.collision;
 
+import java.io.Serializable;
+
 import com.badlogic.gdx.math.Vector3;
 
 /**
@@ -21,7 +23,7 @@
  * @author mzechner
  * 
  */
-public class Segment {
+public class Segment implements Serializable {
 	/** the starting position **/
 	public final Vector3 a = new Vector3();
 

File: gdx/src/com/badlogic/gdx/math/collision/Sphere.java
Patch:
@@ -13,6 +13,8 @@
 
 package com.badlogic.gdx.math.collision;
 
+import java.io.Serializable;
+
 import com.badlogic.gdx.math.Vector3;
 
 /**
@@ -21,7 +23,7 @@
  * @author badlogicgames@gmail.com
  * 
  */
-public final class Sphere {
+public class Sphere implements Serializable {
 	/** the radius of the sphere **/
 	public float radius;
 	/** the center of the sphere **/

File: gdx/src/com/badlogic/gdx/math/CatmullRomSpline.java
Patch:
@@ -100,7 +100,6 @@ public List<Vector3> getPath (int numPoints) {
 	 * 
 	 * @param points the array of Vector3 instances to store the path in
 	 * @param numPoints number of points returned for a segment
-	 * @return the path
 	 */	
 	public void getPath (Vector3[] points, int numPoints) {		
 		int idx = 0;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VBOVATest.java
Patch:
@@ -101,6 +101,7 @@ public class VBOVATest extends GdxTest {
 		}
 
 		for (int i = 0; i < 5; i++) {
+			if (!isStatic) vertexBuffer.setVertices(vertices, 0, vertices.length);
 			vertexBuffer.bind();
 			if (mode == 3) {
 				ibo.bind();
@@ -112,9 +113,7 @@ public class VBOVATest extends GdxTest {
 			}
 			if (mode == 5) {
 				vaibo.setIndices(indices, 0, indices.length);
-			}
-
-			if (!isStatic) vertexBuffer.setVertices(vertices, 0, vertices.length);
+			}		
 
 			if (mode <= 2) {
 				Gdx.gl11.glDrawArrays(GL11.GL_TRIANGLES, 0, TRIANGLES * 3);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/FillResolutionStrategy.java
Patch:
@@ -3,7 +3,7 @@
 import android.view.View;
 
 /**
- * This {@link ResolutionStrategy} will strech the GLSurfaceView to full screen.
+ * This {@link ResolutionStrategy} will stretch the GLSurfaceView to full screen.
  * FillResolutionStrategy is the default {@link ResolutionStrategy} if none is specified.
  */
 public class FillResolutionStrategy implements ResolutionStrategy {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/RatioResolutionStrategy.java
Patch:
@@ -3,7 +3,7 @@
 import android.view.View;
 
 /**
- * This {@link ResolutionStrategy} will maintain a given aspect ratio and strech the GLSurfaceView to the maximum available screen size.
+ * This {@link ResolutionStrategy} will maintain a given aspect ratio and stretch the GLSurfaceView to the maximum available screen size.
  */
 public class RatioResolutionStrategy implements ResolutionStrategy {
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Sequence.java
Patch:
@@ -54,6 +54,7 @@ protected Sequence newObject () {
 
 		actions.get(currAction).act(delta);
 		if (actions.get(currAction).isDone()) {
+			actions.get(currAction).finish();
 			currAction++;
 			if (currAction < actions.size()) actions.get(currAction).setTarget(target);
 		}
@@ -65,9 +66,7 @@ protected Sequence newObject () {
 
 	@Override public void finish () {
 		pool.removeValue(this, true);
-		int len = 0;
-		for (int i = 0; i < len; i++)
-			actions.get(i).finish();
+		int len = 0;		
 		if(listener != null)
 			listener.completed(this);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/IndexBufferObjectShaderTest.java
Patch:
@@ -79,7 +79,9 @@ public void create() {
 					+ "   v_texCoords = a_texCoords; \n"
 					+ "   gl_Position =  a_position;  \n"
 					+ "}                            \n";
-			String fragmentShader = "precision mediump float;\n"
+			String fragmentShader = "#ifdef GL_ES\n"
+					+ "precision mediump float;\n"
+					+ "#endif\n"
 					+ "varying vec4 v_color;\n"
 					+ "varying vec2 v_texCoords;\n"
 					+ "uniform sampler2D u_texture;\n"

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MeshShaderTest.java
Patch:
@@ -51,7 +51,9 @@ public void create() {
 				+ "   v_texCoords = a_texCoords; \n"
 				+ "   gl_Position =  u_worldView * a_position;  \n"
 				+ "}                            \n";
-		String fragmentShader = "precision mediump float;\n"
+		String fragmentShader = "#ifdef GL_ES\n"
+				+ "precision mediump float;\n"
+				+ "#endif\n"
 				+ "varying vec4 v_color;\n"
 				+ "varying vec2 v_texCoords;\n"
 				+ "uniform sampler2D u_texture;\n"

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VertexBufferObjectShaderTest.java
Patch:
@@ -76,7 +76,9 @@ public void create() {
 					+ "   v_texCoords = a_texCoords; \n"
 					+ "   gl_Position =  a_position;  \n"
 					+ "}                            \n";
-			String fragmentShader = "precision mediump float;\n"
+			String fragmentShader = "#ifdef GL_ES\n"
+					+ "precision mediump float;\n"
+					+ "#endif\n"
 					+ "varying vec4 v_color;\n"
 					+ "varying vec2 v_texCoords;\n"
 					+ "uniform sampler2D u_texture;\n"

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gles2/HelloTriangle.java
Patch:
@@ -26,7 +26,9 @@ public void create() {
 		      "   gl_Position = vPosition;  \n" +
 		      "}                            \n";
 		String fragmentShader =		
-			"precision mediump float;\n" +
+			"#ifdef GL_ES\n"
+			+ "precision mediump float;\n"
+			+ "#endif\b" +
 		    "void main()                                  \n" +		
 		    "{                                            \n" +
 		    "  gl_FragColor = vec4 ( 1.0, 0.0, 0.0, 1.0 );\n" +

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gles2/MipMap2D.java
Patch:
@@ -35,7 +35,9 @@ public class MipMap2D extends GdxTest {
 	      "   v_texCoord = a_texCoord;  \n" +
 	      "}                            \n";
 		String fragmentShader = 
-			"precision mediump float;                            \n" +
+			"#ifdef GL_ES\n"
+			+ "precision mediump float;\n"
+			+ "#endif\n" +
 	      "varying vec2 v_texCoord;                            \n" +
 	      "uniform sampler2D s_texture;                        \n" +
 	      "void main()                                         \n" +

File: tests/gdx-tests/src/com/badlogic/gdx/tests/gles2/SimpleVertexShader.java
Patch:
@@ -33,7 +33,9 @@ public void create() {
 	      "   gl_Position = u_mvpMatrix * a_position;  \n" +
 	      "}                            \n";
 		String fragmentShader =		
-			"precision mediump float;\n" +
+			"#ifdef GL_ES\n"
+			+ "precision mediump float;\n"
+			+ "#endif\n" +
 		    "void main()                                  \n" +		
 		    "{                                            \n" +
 		    "  gl_FragColor = vec4 ( 1.0, 0.0, 0.0, 1.0 );\n" +

File: demos/invaders/gdx-invaders-android/src/com/badlogic/gdxinvaders/GdxInvadersAndroid.java
Patch:
@@ -5,12 +5,13 @@
 import android.os.Bundle;
 
 import com.badlogic.gdx.backends.android.AndroidApplication;
+import com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy;
 
 public class GdxInvadersAndroid extends AndroidApplication {
 	/** Called when the activity is first created. */
 	@Override public void onCreate (Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-		initialize(new GdxInvaders(),false, 20);		
+		initialize(new GdxInvaders(),false, new FillResolutionStrategy(), 20);		
 	}
 }

File: demos/vector-pinball/gdx-vectorpinball-android/src/com/dozingcatsoftware/bouncy/BouncyAndroid.java
Patch:
@@ -4,11 +4,12 @@
 import android.os.Bundle;
 
 import com.badlogic.gdx.backends.android.AndroidApplication;
+import com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy;
 
 public class BouncyAndroid extends AndroidApplication {
 	/** Called when the activity is first created. */
 	@Override public void onCreate (Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
-		initialize(new Bouncy(), false, 16);
+		initialize(new Bouncy(), false, new FillResolutionStrategy(), 16);
 	}
 }

File: extensions/awesomium/gdx-awesomium-tests/src/com/badlogic/gdx/awesomium/GLTest.java
Patch:
@@ -15,7 +15,7 @@
 import com.badlogic.gdx.graphics.Texture.TextureWrap;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.PerspectiveCamera;
+import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.math.Intersector;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Plane;

File: extensions/awesomium/gdx-awesomium-tests/src/com/badlogic/gdx/awesomium/GLTest.java
Patch:
@@ -9,13 +9,13 @@
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.GLCommon;
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.Texture.TextureWrap;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
+import com.badlogic.gdx.graphics.g3d.PerspectiveCamera;
 import com.badlogic.gdx.math.Intersector;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Plane;

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/WindowedTest.java
Patch:
@@ -27,6 +27,8 @@
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.backends.android.AndroidApplication;
+import com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy;
+import com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy;
 import com.badlogic.gdx.graphics.Color;
 
 public class WindowedTest extends AndroidApplication implements ApplicationListener {
@@ -41,7 +43,7 @@ public void onCreate (Bundle bundle) {
 		Button b2 = new Button(this);
 		b2.setText("New Window");
 		b2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
-		View view = initializeForView(this, false, 16);
+		View view = initializeForView(this, false,new FillResolutionStrategy(),  16);
 
 		LinearLayout layout = new LinearLayout(this);
 		layout.setOrientation(LinearLayout.VERTICAL);

File: extensions/image-packer/src/com/badlogic/gdx/imagepacker/TexturePacker.java
Patch:
@@ -605,8 +605,8 @@ public boolean isY () {
 
 	static public class Settings {
 		public Format defaultFormat = Format.RGBA8888;
-		public TextureFilter defaultFilterMin = TextureFilter.Linear;
-		public TextureFilter defaultFilterMag = TextureFilter.Linear;
+		public TextureFilter defaultFilterMin = TextureFilter.Nearest;
+		public TextureFilter defaultFilterMag = TextureFilter.Nearest;
 		public int alphaThreshold = 0;
 		public boolean pot = true;
 		public int padding = 1;

File: gdx/src/com/badlogic/gdx/graphics/TextureAtlas.java
Patch:
@@ -317,8 +317,7 @@ static private void readTuple (BufferedReader reader) throws IOException {
 	}
 
 	/**
-	 * Describes the region of a packed image and provides extra information, such as the original image size before any whitespace
-	 * was stripped.
+	 * Describes the region of a packed image and provides information about the original image before it was packed.
 	 */
 	static public class AtlasRegion extends TextureRegion {
 		/**
@@ -331,7 +330,8 @@ static public class AtlasRegion extends TextureRegion {
 		public int index;
 
 		/**
-		 * The name of the original image file, with any trailing numbers or special flags removed.
+		 * The name of the original image file, up to the first underscore. Underscores denote special instructions to the texture
+		 * packer.
 		 */
 		public String name;
 

File: gdx/src/com/badlogic/gdx/utils/Bag.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.NoSuchElementException;
 
 /**
- * An unordered, resizable array. Avoids a memory copy when removing elements (the last element is moved to the removed element's
+ * An unordered, resizable array of objects. Avoids a memory copy when removing elements (the last element is moved to the removed element's
  * position).
  * @author Riven
  * @author Nathan Sweet

File: gdx/src/com/badlogic/gdx/utils/BagPool.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.NoSuchElementException;
 
 /**
- * An unordered, resizable array that reuses element instances
+ * An unordered, resizable array of objects that reuses element instances.
  * @see Bag
  * @author Riven
  * @author Nathan Sweet

File: gdx/src/com/badlogic/gdx/graphics/SpriteBatch.java
Patch:
@@ -85,7 +85,7 @@ public class SpriteBatch {
 
 	private ShaderProgram shader;
 
-	private float color = Color.WHITE.toFloatBits();
+	float color = Color.WHITE.toFloatBits();
 	private Color tempColor = new Color(1, 1, 1, 1);
 
 	/** number of render calls **/

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/ButtonTest.java
Patch:
@@ -19,6 +19,7 @@
 import com.badlogic.gdx.InputMultiplexer;
 import com.badlogic.gdx.InputProcessor;
 import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.SpriteBatch;
 import com.badlogic.gdx.twl.Layout;
 import com.badlogic.gdx.twl.TWL;
 
@@ -37,7 +38,8 @@ public class ButtonTest implements ApplicationListener, InputProcessor {
 		layout.horizontal().sequence(0).parallel(button, fpsCounter).end().gap();
 		layout.vertical().sequence(0, button, 5, fpsCounter, 0);
 
-		twl = new TWL("data/widgets.xml", FileType.Internal, layout);
+		SpriteBatch batch = new SpriteBatch();
+		twl = new TWL(batch, "data/widgets.xml", FileType.Internal, layout);
 
 		input.addProcessor(twl);
 		input.addProcessor(this);

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/TextAreaTest.java
Patch:
@@ -17,6 +17,7 @@
 import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.SpriteBatch;
 import com.badlogic.gdx.twl.Layout;
 import com.badlogic.gdx.twl.TWL;
 
@@ -46,7 +47,8 @@ public class TextAreaTest implements ApplicationListener {
 		layout.horizontal().parallel(scrollPane, fpsCounter);
 		layout.vertical().sequence(scrollPane, 5, fpsCounter, 5);
 
-		twl = new TWL("data/widgets.xml", FileType.Internal, layout);
+		SpriteBatch batch = new SpriteBatch();
+		twl = new TWL(batch, "data/widgets.xml", FileType.Internal, layout);
 
 		textArea.addCallback(new TextArea.Callback() {
 			Timer timer;

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/renderer/GdxFont.java
Patch:
@@ -74,7 +74,7 @@ public int drawText (AnimationState as, int x, int y, CharSequence str, int star
 		x += fontState.offsetX;
 		y += fontState.offsetY + yOffset;
 		bitmapFont.setColor(renderer.getColor(fontState.color));
-		return bitmapFont.draw(renderer.spriteBatch, str, x, y, start, end).width;
+		return bitmapFont.draw(renderer.batch, str, x, y, start, end).width;
 	}
 
 	public int drawMultiLineText (AnimationState as, int x, int y, CharSequence str, int width,
@@ -83,7 +83,7 @@ public int drawMultiLineText (AnimationState as, int x, int y, CharSequence str,
 		x += fontState.offsetX;
 		y += fontState.offsetY + yOffset;
 		bitmapFont.setColor(renderer.getColor(fontState.color));
-		return bitmapFont.drawMultiLine(renderer.spriteBatch, str, x, y, width, gdxAlignment[align.ordinal()]).width;
+		return bitmapFont.drawMultiLine(renderer.batch, str, x, y, width, gdxAlignment[align.ordinal()]).width;
 	}
 
 	public FontCache cacheText (FontCache cache, CharSequence str) {
@@ -181,7 +181,7 @@ public void draw (AnimationState as, int x, int y) {
 			GdxFont.FontState fontState = evalFontState(as);
 			setColor(renderer.getColor(fontState.color));
 			setPosition(x + fontState.offsetX, y + fontState.offsetY);
-			draw(renderer.spriteBatch);
+			draw(renderer.batch);
 		}
 
 		public int getWidth () {

File: gdx/src/com/badlogic/gdx/graphics/Sprite.java
Patch:
@@ -84,13 +84,14 @@ public Sprite (TextureRegion region) {
 
 	/**
 	 * Creates a sprite with width, height, and texture region equal to the specified size, relative to specified sprite's texture
-	 * region. * @param srcWidth The width of the texture region. May be negative to flip the sprite when drawn.
+	 * region.
+	 * @param srcWidth The width of the texture region. May be negative to flip the sprite when drawn.
 	 * @param srcHeight The height of the texture region. May be negative to flip the sprite when drawn.
 	 */
 	public Sprite (TextureRegion region, int srcX, int srcY, int srcWidth, int srcHeight) {
 		setRegion(region, srcX, srcY, srcWidth, srcHeight);
 		setColor(1, 1, 1, 1);
-		setSize(Math.abs(region.getRegionWidth()), Math.abs(region.getRegionHeight()));
+		setSize(Math.abs(srcWidth), Math.abs(srcHeight));
 		setOrigin(width / 2, height / 2);
 	}
 

File: gdx/src/com/badlogic/gdx/utils/MathUtils.java
Patch:
@@ -161,7 +161,7 @@ static public boolean isPowerOfTwo (int value) {
 
 	static private final int BIG_ENOUGH_INT = 16 * 1024;
 	static private final double BIG_ENOUGH_FLOOR = BIG_ENOUGH_INT;
-	static private final double BIG_ENOUGH_CEIL = BIG_ENOUGH_INT + 0.5;
+	static private final double BIG_ENOUGH_CEIL = BIG_ENOUGH_INT + 0.99999999;
 
 	static public int floor (float x) {
 		return (int)(x + BIG_ENOUGH_FLOOR) - BIG_ENOUGH_INT;

File: gdx/src/com/badlogic/gdx/utils/ArrayPool.java
Patch:
@@ -35,7 +35,7 @@
  * @author Nathan Sweet
  * @author Matthias Mann
  */
-abstract public class ArrayPool<T> {
+abstract public class ArrayPool<T> implements Iterable<T> {
 	public T[] items;
 	public int size;
 

File: gdx/src/com/badlogic/gdx/utils/Bag.java
Patch:
@@ -24,7 +24,7 @@
  * @author Riven
  * @author Nathan Sweet
  */
-public class Bag<T> {
+public class Bag<T> implements Iterable<T> {
 	public T[] items;
 	public int size;
 

File: gdx/src/com/badlogic/gdx/utils/BagPool.java
Patch:
@@ -24,7 +24,7 @@
  * @author Riven
  * @author Nathan Sweet
  */
-abstract public class BagPool<T> {
+abstract public class BagPool<T> implements Iterable<T> {
 	public T[] items;
 	public int size;
 

File: gdx/src/com/badlogic/gdx/graphics/TextureRegion.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * Defines a rectangular area of a texture. The coordinate system used has its origin in the upper left corner with the x-axis
- * pointing to the left and the y axis pointing downwards.
+ * pointing to the right and the y axis pointing downwards.
  * @author mzechner
  * @author Nathan Sweet
  */

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/TWL.java
Patch:
@@ -153,7 +153,8 @@ public boolean touchUp (int x, int y, int pointer) {
 	}
 
 	public boolean touchDragged (int x, int y, int pointer) {
-		return gui.handleMouse(x, y, -1, true);
+		gui.handleMouse(x, y, -1, true);
+		return false;
 	}
 
 	public void dispose () {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglTestStarter.java
Patch:
@@ -62,8 +62,8 @@ public void mouseClicked (MouseEvent event) {
 			add(pane, BorderLayout.CENTER);
 			add(button, BorderLayout.SOUTH);
 
-			GdxTest test = GdxTests.newTest("FilesTest");
-			new LwjglApplication(test, "Test", 480, 320, test.needsGL20());
+			// GdxTest test = GdxTests.newTest("BitmapFontFlipTest");
+			// new LwjglApplication(test, "Test", 480, 320, test.needsGL20());
 		}
 	}
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -95,19 +95,19 @@ private View createGLSurfaceView (Activity activity, boolean useGL2) {
 
 		if (useGL2 && checkGL20()) {
 			GLSurfaceView20 view = new GLSurfaceView20(activity);
-			view.setRenderer(this);
 			if (configChooser != null) view.setEGLConfigChooser(configChooser);
+			view.setRenderer(this);			
 			return view;
 		} else {
 			if (Integer.parseInt(android.os.Build.VERSION.SDK) <= 4) {
 				GLSurfaceViewCupcake view = new GLSurfaceViewCupcake(activity);
-				view.setRenderer(this);
 				if (configChooser != null) view.setEGLConfigChooser(configChooser);
+				view.setRenderer(this);
 				return view;
 			} else {
 				android.opengl.GLSurfaceView view = new android.opengl.GLSurfaceView(activity);
-				view.setRenderer(this);
 				if (configChooser != null) view.setEGLConfigChooser(configChooser);
+				view.setRenderer(this);				
 				return view;
 			}
 		}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MD5Test.java
Patch:
@@ -39,7 +39,7 @@ public class MD5Test extends GdxTest implements InputProcessor {
 
 	@Override public void create () {
 		Gdx.app.log("MD5 Test", "created");
-		model = MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(), true);
+		model = MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(), false);
 		anim = MD5Loader.loadAnimation(Gdx.files.internal("data/walk1.md5anim").read());
 		skeleton = new MD5Joints();
 		skeleton.joints = new float[anim.frames[0].joints.length];

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -103,7 +103,7 @@ public class GdxTests
 		LifeCycleTest.class,
 		ManagedTest.class,
 		ManualBindTest.class,
-		//MD5Test.class,
+		MD5Test.class,
 		MeshMultitextureTest.class,
 		MeshShaderTest.class,
 		MeshTest.class,

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MD5Test.java
Patch:
@@ -39,7 +39,7 @@ public class MD5Test extends GdxTest implements InputProcessor {
 
 	@Override public void create () {
 		Gdx.app.log("MD5 Test", "created");
-		model = MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(), false);
+		model = MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(), true);
 		anim = MD5Loader.loadAnimation(Gdx.files.internal("data/walk1.md5anim").read());
 		skeleton = new MD5Joints();
 		skeleton.joints = new float[anim.frames[0].joints.length];

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -103,7 +103,7 @@ public class GdxTests
 		LifeCycleTest.class,
 		ManagedTest.class,
 		ManualBindTest.class,
-		MD5Test.class,
+		//MD5Test.class,
 		MeshMultitextureTest.class,
 		MeshShaderTest.class,
 		MeshTest.class,

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MD5Test.java
Patch:
@@ -39,12 +39,12 @@ public class MD5Test extends GdxTest implements InputProcessor {
 
 	@Override public void create () {
 		Gdx.app.log("MD5 Test", "created");
-		model = MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read());
+		model = MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(), false);
 		anim = MD5Loader.loadAnimation(Gdx.files.internal("data/walk1.md5anim").read());
 		skeleton = new MD5Joints();
 		skeleton.joints = new float[anim.frames[0].joints.length];
 		animInfo = new MD5AnimationInfo(anim.frames.length, anim.secondsPerFrame);
-		renderer = new MD5Renderer(model, true);
+		renderer = new MD5Renderer(model, false, true);
 		renderer.setSkeleton(model.baseSkeleton);
 
 		// long start = System.nanoTime();

File: tests/gdx-tests-angle/src/com/badlogic/gdx/tests/angle/AngleDebugStarter.java
Patch:
@@ -17,6 +17,6 @@
 
 public class AngleDebugStarter {
 	public static void main (String[] argv) {
-		new AngleApplication(new com.badlogic.gdx.tests.VertexBufferObjectShaderTest(), "Angle Test", 480, 320, false);
+		new AngleApplication(new com.badlogic.gdx.tests.MeshShaderTest(), "Angle Test", 480, 320, false);
 	}
 }

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidTexture.java
Patch:
@@ -83,6 +83,9 @@ final class AndroidTexture implements Texture {
 		if (image != null) {
 			this.texWidth = image.getWidth();
 			this.texHeight = image.getHeight();
+			
+			if (Gdx.gl!=Gdx.gl20 && (!MathUtils.isPowerOfTwo(image.getWidth()) || !MathUtils.isPowerOfTwo(image.getHeight())))
+				throw new GdxRuntimeException("texture must have power of two size");
 		}
 
 		createTexture();

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -135,7 +135,7 @@ public Pixmap newPixmap (Object nativePixmap) {
 
 	public Texture newUnmanagedTexture (int width, int height, Pixmap.Format format, TextureFilter minFilter,
 		TextureFilter magFilter, TextureWrap uWrap, TextureWrap vWrap) {
-		if (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height))
+		if (gl!=gl20 && (!MathUtils.isPowerOfTwo(height) || !MathUtils.isPowerOfTwo(height)))
 			throw new GdxRuntimeException("Texture dimensions must be a power of two: " + width + "x" + height);
 
 		if (format == Format.Alpha)
@@ -146,7 +146,7 @@ public Texture newUnmanagedTexture (int width, int height, Pixmap.Format format,
 
 	public Texture newUnmanagedTexture (Pixmap pixmap, TextureFilter minFilter, TextureFilter magFilter, TextureWrap uWrap,
 		TextureWrap vWrap) {
-		if (!MathUtils.isPowerOfTwo(pixmap.getHeight()) || !MathUtils.isPowerOfTwo(pixmap.getWidth()))
+		if (gl!=gl20 && (!MathUtils.isPowerOfTwo(pixmap.getWidth()) || !MathUtils.isPowerOfTwo(pixmap.getHeight())))
 			throw new GdxRuntimeException("Texture dimensions must be a power of two: " + width + "x" + height);
 
 		return new LwjglTexture((BufferedImage)pixmap.getNativePixmap(), minFilter, magFilter, uWrap, vWrap, false);
@@ -156,7 +156,7 @@ public Texture newTexture (FileHandle file, TextureFilter minFilter, TextureFilt
 		TextureWrap vWrap) {
 		if (enforcePotImages) {
 			Pixmap pixmap = newPixmap(file);
-			if (!MathUtils.isPowerOfTwo(pixmap.getHeight()) || !MathUtils.isPowerOfTwo(pixmap.getWidth()))
+			if (gl!=gl20 && (!MathUtils.isPowerOfTwo(pixmap.getWidth()) || !MathUtils.isPowerOfTwo(pixmap.getHeight())))
 				throw new GdxRuntimeException("Texture dimensions must be a power of two: " + file + " (" + pixmap.getWidth() + "x"
 					+ pixmap.getHeight() + ")");
 		}

File: gdx/src/com/badlogic/gdx/math/Matrix4.java
Patch:
@@ -428,7 +428,7 @@ public Matrix4 setToProjection (float near, float far, float fov, float aspectRa
 	 * @return This matrix for chaining
 	 */
 	public Matrix4 setToOrtho2D (float x, float y, float width, float height) {
-		setToOrtho(0, width, 0, height, 0, 1);
+		setToOrtho(x, x + width, y, y + height, 0, 1);
 		return this;
 	}
 
@@ -445,7 +445,7 @@ public Matrix4 setToOrtho2D (float x, float y, float width, float height) {
 	 * @return This matrix for chaining
 	 */
 	public Matrix4 setToOrtho2D (float x, float y, float width, float height, float near, float far) {
-		setToOrtho(0, width, 0, height, near, far);
+		setToOrtho(x, x + width, y, y + height, near, far);
 		return this;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/BitmapFont.java
Patch:
@@ -125,7 +125,8 @@ private void init (FileHandle fontFile, TextureRegion region, boolean flip) {
 			else {
 				String[] page = reader.readLine().split(" ", 4);
 				if (!page[2].startsWith("file=")) throw new GdxRuntimeException("Invalid font file: " + fontFile);
-				FileHandle imageFile = fontFile.parent().child(page[2].substring(5));
+				String imgFilename = page[2].substring(6, page[2].length()-1);
+				FileHandle imageFile = fontFile.parent().child(imgFilename);
 				region = new TextureRegion(Gdx.graphics.newTexture(imageFile, TextureFilter.Linear, TextureFilter.Linear,
 					TextureWrap.ClampToEdge, TextureWrap.ClampToEdge));
 			}

File: gdx/src/com/badlogic/gdx/graphics/SpriteCache.java
Patch:
@@ -909,13 +909,14 @@ public void end () {
 			GL10 gl = Gdx.gl10;
 			gl.glDepthMask(true);
 			gl.glDisable(GL10.GL_TEXTURE_2D);
+			mesh.unbind();
 		} else {
 			shader.end();
 			GL20 gl = Gdx.gl20;
 			gl.glDepthMask(true);
 			gl.glDisable(GL20.GL_TEXTURE_2D);
+			mesh.unbind(shader);
 		}
-		mesh.unbind();
 	}
 
 	/**

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -80,7 +80,7 @@ public interface Graphics {
 	 * 
 	 */
 	public enum GraphicsType {
-		AndroidGL, JoglGL, LWJGL
+		AndroidGL, JoglGL, LWJGL, Angle
 	}
 
 	/**

File: demos/helloworld/gdx-helloworld/src/com/badlogic/gdx/helloworld/HelloWorld.java
Patch:
@@ -48,8 +48,9 @@ public class HelloWorld implements ApplicationListener {
 		textPosition.add(textDirection.tmp().mul(Gdx.graphics.getDeltaTime()).mul(60));
 
 		spriteBatch.begin();
+		spriteBatch.setColor(Color.WHITE);
 		spriteBatch.draw(texture, centerX - texture.getWidth() / 2, centerY - texture.getHeight() / 2, 0, 0, texture.getWidth(),
-			texture.getHeight(), Color.WHITE);
+			texture.getHeight());
 		spriteBatch.setBlendFunction(GL10.GL_ONE, GL10.GL_ONE_MINUS_SRC_ALPHA);
 		font.draw(spriteBatch, "Hello World!", (int)textPosition.x, (int)textPosition.y);		
 		spriteBatch.end();

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java
Patch:
@@ -214,7 +214,8 @@ private void renderBackground (GL10 gl) {
 		spriteBatch.setTransformMatrix(transformMatrix);
 		spriteBatch.begin();
 		spriteBatch.disableBlending();
-		spriteBatch.draw(backgroundTexture, 0, 0, 480, 320, 0, 0, 512, 512, Color.WHITE, false, false);
+		spriteBatch.setColor(Color.WHITE);
+		spriteBatch.draw(backgroundTexture, 0, 0, 480, 320, 0, 0, 512, 512, false, false);
 		spriteBatch.end();
 	}
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameOver.java
Patch:
@@ -79,9 +79,10 @@ public GameOver (Application app) {
 		spriteBatch.setTransformMatrix(transformMatrix);
 		spriteBatch.begin();
 		spriteBatch.disableBlending();
-		spriteBatch.draw(background, 0, 0, 480, 320, 0, 0, 512, 512, Color.WHITE, false, false);
+		spriteBatch.setColor(Color.WHITE);
+		spriteBatch.draw(background, 0, 0, 480, 320, 0, 0, 512, 512, false, false);
 		spriteBatch.enableBlending();
-		spriteBatch.draw(logo, 0, 320-128, 480, 128, 0, 256, 512, 256, Color.WHITE, false, false);
+		spriteBatch.draw(logo, 0, 320-128, 480, 128, 0, 256, 512, 256, false, false);
 		String text = "It is the end my friend.\nTouch to continue!";
 		TextBounds bounds = font.getMultiLineBounds(text);
 		spriteBatch.setBlendFunction(GL10.GL_ONE, GL10.GL_ONE_MINUS_SRC_ALPHA);

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/MainMenu.java
Patch:
@@ -67,9 +67,10 @@ public MainMenu (Application app) {
 		spriteBatch.setTransformMatrix(transformMatrix);
 		spriteBatch.begin();
 		spriteBatch.disableBlending();
-		spriteBatch.draw(background, 0, 0, 480, 320, 0, 0, 512, 512, Color.WHITE, false, false);
+		spriteBatch.setColor(Color.WHITE);		
+		spriteBatch.draw(background, 0, 0, 480, 320, 0, 0, 512, 512, false, false);
 		spriteBatch.enableBlending();
-		spriteBatch.draw(logo, 0, 320-128, 480, 128, 0, 0, 512, 256, Color.WHITE, false, false);
+		spriteBatch.draw(logo, 0, 320-128, 480, 128, 0, 0, 512, 256, false, false);
 		spriteBatch.setBlendFunction(GL10.GL_ONE, GL10.GL_ONE_MINUS_SRC_ALPHA);
 		String text = "Touch screen to start!";
 		int width = font.getBounds(text).width;	

File: gdx/src/com/badlogic/gdx/utils/GdxNativesLoader.java
Patch:
@@ -78,10 +78,11 @@ public static boolean loadLibrary(String libName, String classPath,
 		BufferedOutputStream out = null;
 
 		try {
+			String tmpName = System.nanoTime() + libName;
 			in = GdxNativesLoader.class
 					.getResourceAsStream(classPath + libName);
 			out = new BufferedOutputStream(new FileOutputStream(outputPath
-					+ libName));
+					+ tmpName));
 			byte[] bytes = new byte[1024 * 4];
 			while (true) {
 				int read_bytes = in.read(bytes);
@@ -94,7 +95,7 @@ public static boolean loadLibrary(String libName, String classPath,
 			out = null;
 			in.close();
 			in = null;
-			System.load(outputPath + libName);
+			System.load(outputPath + tmpName);
 			return true;
 		} catch (Throwable t) {
 			System.err.println("GdxNativesLoader: Couldn't unpack and load native '" + libName + "'");

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -129,6 +129,9 @@ public Mesh(boolean isStatic, int maxVertices, int maxIndices,
 	 */
 	public Mesh(VertexDataType type, boolean isStatic, int maxVertices,
 			int maxIndices, VertexAttribute... attributes) {
+		if(type == VertexDataType.VertexArray && Gdx.graphics.isGL20Available())
+			type = VertexDataType.VertexBufferObject;
+		
 		if (type == VertexDataType.VertexBufferObject) {
 			vertices = new VertexBufferObject(isStatic, maxVertices, attributes);
 			indices = new IndexBufferObject(isStatic, maxIndices);

File: gdx/src/com/badlogic/gdx/graphics/Sprite.java
Patch:
@@ -334,7 +334,7 @@ public float[] getVertices () {
 				final float localYSin = localY * sin;
 				final float localX2Cos = localX2 * cos;
 				final float localX2Sin = localX2 * sin;
-				final float localY2Cos = localX2 * cos;
+				final float localY2Cos = localY2 * cos;
 				final float localY2Sin = localY2 * sin;
 
 				final float x1 = localXCos - localYSin + worldOriginX;

File: gdx/src/com/badlogic/gdx/graphics/TextureRegion.java
Patch:
@@ -204,7 +204,7 @@ public void flip (boolean x, boolean y) {
 	 * Offsets the region relative to the current region. Generally the region's size should be the entire size of the texture in
 	 * the direction(s) it is scrolled.
 	 * @param xAmount The percentage to offset horizontally.
-	 * @param yAmount The percentage to offset vertically.
+	 * @param yAmount The percentage to offset vertically. This is done in texture space, so up is negative.
 	 */
 	public void scroll (float xAmount, float yAmount) {
 		if (xAmount != 0) {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Parallel.java
Patch:
@@ -47,7 +47,8 @@ public class Parallel implements Action {
 	@Override public void act (float delta) {
 		int len = actions.size();
 		for (int i = 0; i < len; i++)
-			actions.get(i).act(delta);
+			if(!actions.get(i).isDone())
+				actions.get(i).act(delta);
 	}
 
 	@Override public boolean isDone () {

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Sequence.java
Patch:
@@ -60,7 +60,7 @@ public class Sequence implements Action {
 	}
 
 	@Override public boolean isDone () {
-		return currAction == actions.size();
+		return currAction >= actions.size();
 	}
 
 	@Override public void finish () {

File: extensions/image-packer/src/com/badlogic/gdx/imagepacker/TexturePacker.java
Patch:
@@ -593,7 +593,7 @@ public boolean isY () {
 		formatToAbbrev.put(Format.Alpha, "a");
 	}
 
-	static class Settings {
+	static public class Settings {
 		public Format defaultFormat = Format.RGBA8888;
 		public TextureFilter defaultFilterMin = TextureFilter.Linear;
 		public TextureFilter defaultFilterMag = TextureFilter.Linear;

File: gdx/src/com/badlogic/gdx/graphics/BitmapFontCache.java
Patch:
@@ -89,7 +89,7 @@ public void setColor (float r, float g, float b, float a) {
 	}
 
 	public void draw (SpriteBatch spriteBatch) {
-		spriteBatch.draw(font.getTextureRegion().getTexture(), vertices, 0, idx);
+		spriteBatch.draw(font.getRegion().getTexture(), vertices, 0, idx);
 	}
 
 	private void reset (int glyphCount) {

File: gdx/src/com/badlogic/gdx/graphics/particles/ParticleEmitter.java
Patch:
@@ -292,8 +292,9 @@ private void activateParticle (int index) {
 			particle.angleSin = MathUtils.sinDeg(angle);
 		}
 
-		particle.scale = scaleValue.newLowValue() / sprite.getWidth();
-		particle.scaleDiff = scaleValue.newHighValue() / sprite.getWidth();
+		float spriteWidth = sprite.getWidth();
+		particle.scale = scaleValue.newLowValue() / spriteWidth;
+		particle.scaleDiff = scaleValue.newHighValue() / spriteWidth;
 		if (!scaleValue.isRelative()) particle.scaleDiff -= particle.scale;
 		if ((updateFlags & UPDATE_SCALE) == 0) particle.setScale(particle.scale + particle.scaleDiff * scaleValue.getScale(0));
 
@@ -393,7 +394,6 @@ private void activateParticle (int index) {
 		}
 		}
 
-		float spriteWidth = sprite.getWidth();
 		float spriteHeight = sprite.getHeight();
 		particle.setBounds(x - spriteWidth / 2, y - spriteHeight / 2, spriteWidth, spriteHeight);
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontFlipTest.java
Patch:
@@ -33,7 +33,7 @@ public class BitmapFontFlipTest extends GdxTest {
 	private SpriteBatch spriteBatch;
 	private BitmapFont font;
 	private Sprite logoSprite;
-	private Color red = new Color(1, 0, 0, 0.5f);
+	private Color red = new Color(1, 0, 0, 0);
 	private BitmapFontCache cache1, cache2, cache3, cache4, cache5;
 	int renderMode;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/IsometricTileTest.java
Patch:
@@ -57,7 +57,7 @@ public class IsometricTileTest extends GdxTest {
 				for(int y=0; y < HEIGHT; y++) {								
 					int tileX = colX - y * TILE_WIDTH / 2;
 					int tileY = colY - y * TILE_HEIGHT_DIAMOND / 2;
-					cache.add(texture, tileX, tileY, rand.nextInt(2) * 54, 0,TILE_WIDTH, TILE_HEIGHT, Color.WHITE);				
+					cache.add(texture, tileX, tileY, rand.nextInt(2) * 54, 0,TILE_WIDTH, TILE_HEIGHT);				
 				}
 				colX += TILE_WIDTH / 2;
 				colY -= TILE_HEIGHT_DIAMOND / 2;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ParticleEmitterTest.java
Patch:
@@ -87,7 +87,7 @@ else if (keycode == Input.Keys.KEYCODE_DPAD_DOWN)
 				else if (keycode == Input.Keys.KEYCODE_SPACE) {
 					emitterIndex = (emitterIndex + 1) % emitters.size();
 					emitter = emitters.get(emitterIndex);
-					particleCount = (int)(emitter.getEmission().getHighMax() * emitter.getLife().getHighMax());
+					particleCount = (int)(emitter.getEmission().getHighMax() * emitter.getLife().getHighMax() / 1000f);
 				} else
 					return false;
 				particleCount = Math.max(0, particleCount);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureAtlasTest.java
Patch:
@@ -41,8 +41,8 @@ public void create () {
 		badlogicSmall.flip(true, true);
 
 		AtlasRegion region = atlas.getRegion("badlogicsmall");
-		System.out.println("badlogicSmall original size: " + region.getOriginalWidth() + ", " + region.getOriginalHeight());
-		System.out.println("badlogicSmall packed size: " + region.getPackedWidth() + ", " + region.getPackedHeight());
+		System.out.println("badlogicSmall original size: " + region.originalWidth + ", " + region.originalHeight);
+		System.out.println("badlogicSmall packed size: " + region.packedWidth + ", " + region.packedHeight);
 
 		star = atlas.getSprite("particle-star");
 		star.setPosition(10, 70);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TileTest.java
Patch:
@@ -58,7 +58,7 @@ public void create() {
 				for(int x = 0; x < WIDTH; x++) {
 					int tileX = rand.nextInt(5);
 					int tileY = rand.nextInt(5);
-					cache.add(texture, x << 5, y << 5, 1 + tileX * 33, 1 + tileY * 33, 32, 32, Color.WHITE);
+					cache.add(texture, x << 5, y << 5, 1 + tileX * 33, 1 + tileY * 33, 32, 32);
 				}
 			}	
 			layers[i] = cache.endCache();

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/renderer/GdxImage.java
Patch:
@@ -50,7 +50,7 @@ public GdxImage (GdxRenderer renderer, Texture texture, int srcX, int srcY, int
 		this.tintColor = color == null ? Color.WHITE : color;
 		this.tile = tile;
 		sprite = new Sprite(texture, srcX, srcY, srcWidth, srcHeight);
-		sprite.getRegion().flip(false, true);
+		sprite.flip(false, true);
 	}
 
 	public GdxImage (GdxImage image, Color tintColor) {

File: gdx/src/com/badlogic/gdx/graphics/BitmapFont.java
Patch:
@@ -65,7 +65,7 @@ public class BitmapFont {
 	private int xHeight;
 	private final TextBounds textBounds = new TextBounds();
 	private float color = Color.WHITE.toFloatBits();
-	private Color tempColor;
+	private Color tempColor = new Color(1, 1, 1, 1);
 
 	/**
 	 * Creates a BitmapFont using the default 15pt Arial font included in the libgdx JAR file. This is convenient to easily display
@@ -133,8 +133,8 @@ private void init (FileHandle fontFile, TextureRegion region, boolean flip) {
 			this.region = region;
 			float invTexWidth = 1.0f / region.getTexture().getWidth();
 			float invTexHeight = 1.0f / region.getTexture().getHeight();
-			float u = region.getU();
-			float v = region.getV();
+			float u = region.u;
+			float v = region.v;
 
 			while (true) {
 				String line = reader.readLine();

File: gdx/src/com/badlogic/gdx/graphics/particles/ParticleEmitter.java
Patch:
@@ -266,7 +266,7 @@ private void activateParticle (int index) {
 		Particle particle = particles[index];
 		if (particle == null) {
 			particles[index] = particle = new Particle(sprite);
-			particle.getRegion().flip(flipX, flipY);
+			particle.flip(flipX, flipY);
 		}
 
 		float percent = durationTimer / (float)duration;
@@ -483,7 +483,7 @@ public void setSprite (Sprite sprite) {
 		for (int i = 0, n = particles.length; i < n; i++) {
 			Particle particle = particles[i];
 			if (particle == null) break;
-			particle.getRegion().setTexture(texture);
+			particle.setTexture(texture);
 			particle.setOrigin(originX, originY);
 		}
 	}

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/Button.java
Patch:
@@ -66,8 +66,8 @@ public Button (String name, TextureRegion region) {
 
 	public Button (String name, TextureRegion unpressedRegion, TextureRegion pressedRegion) {
 		super(name);
-		width = unpressedRegion.getWidth();
-		height = unpressedRegion.getHeight();
+		width = unpressedRegion.getRegionWidth();
+		height = unpressedRegion.getRegionHeight();
 		originX = width / 2.0f;
 		originY = height / 2.0f;
 		this.unpressedRegion = new TextureRegion(unpressedRegion);

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/Image.java
Patch:
@@ -36,8 +36,8 @@ public Image (String name, Texture texture) {
 
 	public Image (String name, TextureRegion region) {
 		super(name);
-		width = region.getWidth();
-		height = region.getHeight();
+		width = region.getRegionWidth();
+		height = region.getRegionHeight();
 		originX = width / 2.0f;
 		originY = height / 2.0f;
 		this.region = new TextureRegion(region);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontFlipTest.java
Patch:
@@ -50,7 +50,7 @@ public boolean touchDown (int x, int y, int pointer) {
 
 		logoSprite = new Sprite(Gdx.graphics.newTexture(Gdx.files.getFileHandle("data/badlogic.jpg", FileType.Internal),
 			TextureFilter.Linear, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge));
-		logoSprite.getRegion().flip(false, true);
+		logoSprite.flip(false, true);
 		logoSprite.setPosition(0, 320 - 256);
 		logoSprite.setColor(1, 1, 1, 0.5f);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PixmapBlendingTest.java
Patch:
@@ -58,7 +58,7 @@ public class PixmapBlendingTest extends GdxTest {
 
 		logoSprite = new Sprite(Gdx.graphics.newUnmanagedTexture(pixD, TextureFilter.Nearest, TextureFilter.Linear,
 			TextureWrap.ClampToEdge, TextureWrap.ClampToEdge));
-		logoSprite.getRegion().flip(false, true);
+		logoSprite.flip(false, true);
 	}
 
 	@Override public void render () {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureAtlasTest.java
Patch:
@@ -38,7 +38,7 @@ public void create () {
 
 		badlogicSmall = atlas.getSprite("badlogicsmall");
 		badlogicSmall.setPosition(10, 10);
-		badlogicSmall.getRegion().flip(true, true);
+		badlogicSmall.flip(true, true);
 
 		AtlasRegion region = atlas.getRegion("badlogicsmall");
 		System.out.println("badlogicSmall original size: " + region.getOriginalWidth() + ", " + region.getOriginalHeight());

File: tests/gdx-tests-jogl/src/com/badlogic/gdx/tests/jogl/JoglDebugStarter.java
Patch:
@@ -18,6 +18,6 @@
 public class JoglDebugStarter {
 	
 	public static void main( String[] argv ) {
-		new JoglApplication( new com.badlogic.gdx.tests.TileTest(), "Debug Test", 480, 320, false );		
+		new JoglApplication( new com.badlogic.gdx.tests.IsometricTileTest(), "Debug Test", 480, 320, false );		
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -31,6 +31,7 @@
 import com.badlogic.gdx.tests.IndexBufferObjectClassTest;
 import com.badlogic.gdx.tests.IndexBufferObjectShaderTest;
 import com.badlogic.gdx.tests.InputTest;
+import com.badlogic.gdx.tests.IsometricTileTest;
 import com.badlogic.gdx.tests.LifeCycleTest;
 import com.badlogic.gdx.tests.MD5Test;
 import com.badlogic.gdx.tests.ManagedTest;
@@ -96,6 +97,7 @@ public class GdxTests
 		IndexBufferObjectClassTest.class,
 		IndexBufferObjectShaderTest.class,
 		InputTest.class,
+		IsometricTileTest.class,
 		LifeCycleTest.class,
 		ManagedTest.class,
 		ManualBindTest.class,

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -116,9 +116,9 @@ public class GdxTests
 		SpriteBatchShaderTest.class,
 		SpriteBatchTest.class,
 		SpritePerformanceTest.class,
-		TextureAtlasTest.class,
 		StageTest.class,
 		TerrainTest.class,		
+		TextureAtlasTest.class,
 		TextureRenderTest.class,
 		TileTest.class,
 		UITest.class,

File: gdx/src/com/badlogic/gdx/graphics/SpriteBatch.java
Patch:
@@ -966,8 +966,7 @@ protected void renderMesh() {
 			mesh.render(GL10.GL_TRIANGLES, 0, idx / 20 * 6);
 		}
 		int spritesInBatch = idx / 20 / 6;
-		if(spritesInBatch>maxSpritesInBatch)
-			spritesInBatch = maxSpritesInBatch;
+		if (spritesInBatch > maxSpritesInBatch) spritesInBatch = maxSpritesInBatch;
 		idx = 0;
 		currBufferIdx++;
 		if(currBufferIdx == buffers.length) {

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/renderer/GdxImage.java
Patch:
@@ -50,7 +50,7 @@ public GdxImage (GdxRenderer renderer, Texture texture, int srcX, int srcY, int
 		this.tintColor = color == null ? Color.WHITE : color;
 		this.tile = tile;
 		sprite = new Sprite(texture, srcX, srcY, srcWidth, srcHeight);
-		sprite.flip(false, true);
+		sprite.getTextureRegion().flip(false, true);
 	}
 
 	public GdxImage (GdxImage image, Color tintColor) {

File: gdx/src/com/badlogic/gdx/graphics/BitmapFontCache.java
Patch:
@@ -89,7 +89,7 @@ public void setColor (float r, float g, float b, float a) {
 	}
 
 	public void draw (SpriteBatch spriteBatch) {
-		spriteBatch.draw(font.getSprite().getTexture(), vertices, 0, idx);
+		spriteBatch.draw(font.getTextureRegion().getTexture(), vertices, 0, idx);
 	}
 
 	private void reset (int glyphCount) {

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -12,6 +12,7 @@
  */
 package com.badlogic.gdx.graphics;
 
+import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
 
 /**
@@ -125,4 +126,6 @@ public enum TextureWrap {
 	 *         parameters.
 	 */
 	public int getTextureObjectHandle();
+
+	public void setWrap (TextureWrap x, TextureWrap y);
 }

File: gdx/src/com/badlogic/gdx/graphics/particles/ParticleEffect.java
Patch:
@@ -26,7 +26,6 @@
 import com.badlogic.gdx.graphics.Sprite;
 import com.badlogic.gdx.graphics.SpriteBatch;
 import com.badlogic.gdx.graphics.SpriteSheet;
-import com.badlogic.gdx.graphics.SpriteSheet.PackedSprite;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.Texture.TextureWrap;

File: gdx/src/com/badlogic/gdx/graphics/particles/ParticleEmitter.java
Patch:
@@ -266,7 +266,7 @@ private void activateParticle (int index) {
 		Particle particle = particles[index];
 		if (particle == null) {
 			particles[index] = particle = new Particle(sprite);
-			particle.flip(flipX, flipY);
+			particle.getTextureRegion().flip(flipX, flipY);
 		}
 
 		float percent = durationTimer / (float)duration;
@@ -483,7 +483,7 @@ public void setSprite (Sprite sprite) {
 		for (int i = 0, n = particles.length; i < n; i++) {
 			Particle particle = particles[i];
 			if (particle == null) break;
-			particle.setTexture(texture);
+			particle.getTextureRegion().setTexture(texture);
 			particle.setOrigin(originX, originY);
 		}
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontFlipTest.java
Patch:
@@ -50,7 +50,7 @@ public boolean touchDown (int x, int y, int pointer) {
 
 		logoSprite = new Sprite(Gdx.graphics.newTexture(Gdx.files.getFileHandle("data/badlogic.jpg", FileType.Internal),
 			TextureFilter.Linear, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge));
-		logoSprite.flip(false, true);
+		logoSprite.getTextureRegion().flip(false, true);
 		logoSprite.setPosition(0, 320 - 256);
 		logoSprite.setColor(1, 1, 1, 0.5f);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteCacheOffsetTest.java
Patch:
@@ -42,7 +42,7 @@ public void create () {
 				cache.add(sprite);
 			}
 			cache.endCache();
-			sprite.rotate(90);
+			sprite.rotate90(true);
 		}
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TileTest.java
Patch:
@@ -38,7 +38,7 @@ public class TileTest extends GdxTest {
 	public void create() {
 		cam = new OrthographicCamera();
 		cam.setViewport(480, 320);
-		cam.getPosition().set(WIDTH*32/2, HEIGHT/2,0);		
+		cam.getPosition().set(WIDTH*32/2, HEIGHT*32/2,0);		
 		texture = Gdx.graphics.newTexture(Gdx.files.internal("data/tiles.png"), TextureFilter.Nearest, TextureFilter.Nearest, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge);
 		
 		for(int i = 0; i < LAYERS; i++) {

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglNativesLoader.java
Patch:
@@ -35,7 +35,8 @@ static void loadLibraries() {
 		com.sun.gluegen.runtime.NativeLibLoader.disableLoading();
 		// By wkien: On some systems (read: mine) jogl_awt would not find its
 		// dependency jawt if not loaded before
-//		System.loadLibrary("jawt");
+		if(System.getProperty("os.name").contains("Windows"))
+			System.loadLibrary("jawt");
 		loadLibrary("gluegen-rt");
 		loadLibrary("jogl_awt");
 		loadLibrary("jogl");

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/renderer/GdxFont.java
Patch:
@@ -54,7 +54,7 @@ class GdxFont implements Font {
 	public GdxFont (GdxRenderer renderer, BitmapFont bitmapFont, Map<String, String> params, Collection<FontParameter> condParams) {
 		this.bitmapFont = bitmapFont;
 		this.renderer = renderer;
-		yOffset = -bitmapFont.getCapHeight();
+		yOffset = -bitmapFont.getAscent();
 
 		ArrayList<FontState> states = new ArrayList<FontState>();
 		for (FontParameter p : condParams) {
@@ -179,7 +179,6 @@ public GdxFontCache () {
 		}
 
 		public void draw (AnimationState as, int x, int y) {
-			y += bitmapFont.getCapHeight();
 			GdxFont.FontState fontState = evalFontState(as);
 			setColor(renderer.getColor(fontState.color));
 			setPosition(x + fontState.offsetX, y + fontState.offsetY);

File: gdx/src/com/badlogic/gdx/graphics/BitmapFontCache.java
Patch:
@@ -182,7 +182,7 @@ public TextBounds setText (CharSequence str, float x, float y) {
 	 */
 	public TextBounds setText (CharSequence str, float x, float y, int start, int end) {
 		reset(end - start);
-		y += font.yOffset;
+		y += font.ascent;
 		textBounds.width = addToCache(str, x, y, start, end);
 		textBounds.height = font.capHeight;
 		return textBounds;
@@ -211,7 +211,7 @@ public TextBounds setMultiLineText (CharSequence str, float x, float y, float al
 		int length = str.length();
 		reset(length);
 
-		y += font.yOffset;
+		y += font.ascent;
 		int down = font.down;
 
 		int maxWidth = 0;
@@ -261,7 +261,7 @@ public TextBounds setWrappedText (CharSequence str, float x, float y, float wrap
 		int length = str.length();
 		reset(length);
 
-		y += font.yOffset;
+		y += font.ascent;
 		int down = font.down;
 
 		int maxWidth = 0;

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/ButtonTest.java
Patch:
@@ -74,7 +74,7 @@ public boolean keyTyped (char character) {
 	}
 
 	public boolean touchDown (int x, int y, int pointer) {
-		System.out.println("Not handled by TWL!");
+		System.out.println("This touch made it through and was not handled by TWL.");
 		return false;
 	}
 

File: demos/helloworld/gdx-helloworld-android/src/com/badlogic/gdx/HelloWorldAndroid.java
Patch:
@@ -18,7 +18,7 @@
 import com.badlogic.gdx.backends.android.AndroidApplication;
 import com.badlogic.gdx.helloworld.HelloWorld;
 
-public class GDXHelloWorld extends AndroidApplication {
+public class HelloWorldAndroid extends AndroidApplication {
 	@Override public void onCreate (Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		initialize(new HelloWorld(), false);		

File: demos/helloworld/gdx-helloworld/src/com/badlogic/gdx/helloworld/HelloWorld.java
Patch:
@@ -50,6 +50,7 @@ public class HelloWorld implements ApplicationListener {
 		spriteBatch.begin();
 		spriteBatch.draw(texture, centerX - texture.getWidth() / 2, centerY - texture.getHeight() / 2, 0, 0, texture.getWidth(),
 			texture.getHeight(), Color.WHITE);
+		spriteBatch.setBlendFunction(GL10.GL_ONE, GL10.GL_ONE_MINUS_SRC_ALPHA);
 		font.draw(spriteBatch, "Hello World!", (int)textPosition.x, (int)textPosition.y);		
 		spriteBatch.end();
 	}

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvaders.java
Patch:
@@ -71,7 +71,7 @@ public class GdxInvaders implements ApplicationListener {
 
 	@Override public void create () {
 		if (!isInitialized) {
-			screen = new MainMenu(Gdx.app);
+			screen = new GameOver(Gdx.app);
 			Music music = Gdx.audio.newMusic(Gdx.files.getFileHandle("data/8.12.mp3", FileType.Internal));
 			music.setLooping(true);
 			music.play();

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvadersDesktop.java
Patch:
@@ -22,6 +22,6 @@
  */
 public class GdxInvadersDesktop {
 	public static void main (String[] argv) {
-		new JoglApplication(new GdxInvaders(),"Gdx Invaders", 480, 320, false);		
+		new JoglApplication(new GdxInvaders(),"Gdx Invaders", 800, 480, false);		
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/Color.java
Patch:
@@ -218,7 +218,7 @@ public String toString () {
 	 */
 	public static float toFloatBits(int r, int g, int b, int a) {
 		int color = (a << 24) | (b << 16) | (g << 8) | r;
-		float floatColor = Float.intBitsToFloat(color);
+		float floatColor = Float.intBitsToFloat(color & 0xfeffffff);
 		return floatColor;
 	}
 
@@ -250,7 +250,7 @@ public static float toIntBits(int r, int g, int b, int a) {
 	public float toFloatBits() {
 		int color = ((int) (255 * a) << 24) | ((int) (255 * b) << 16)
 				| ((int) (255 * g) << 8) | ((int) (255 * r));
-		return Float.intBitsToFloat(color);
+		return Float.intBitsToFloat(color & 0xfeffffff);
 	}
 
 	/**
@@ -273,6 +273,6 @@ public int toIntBits() {
 	public static float toFloatBits(float r, float g, float b, float a) {
 		int color = ((int) (255 * a) << 24) | ((int) (255 * b) << 16)
 				| ((int) (255 * g) << 8) | ((int) (255 * r));
-		return Float.intBitsToFloat(color);
+		return Float.intBitsToFloat(color & 0xfeffffff);
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/BitmapFont.java
Patch:
@@ -34,8 +34,8 @@
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 /**
- * Renders bitmap fonts. The bitmap font consists of 2 files: an image file (or {@link Sprite}) containing the glyphs and a file
- * in the AngleCode BMFont text format that describes where each glyph is on the image. Currently only a single image of glyphs is
+ * Renders bitmap fonts. The font consists of 2 files: an image file (or {@link Sprite}) containing the glyphs and a file in the
+ * AngleCode BMFont text format that describes where each glyph is on the image. Currently only a single image of glyphs is
  * supported.<br>
  * <br>
  * Text is drawn using a {@link SpriteBatch}. Text can be cached in a {@link BitmapFontCache} for faster rendering of static text,

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplet.java
Patch:
@@ -28,6 +28,7 @@ public class LwjglApplet extends Applet {
 	LwjglApplication app;
 
 	public LwjglApplet (final ApplicationListener listener, final boolean useGL2) {
+		LwjglNativesLoader.load = false;
 		canvas = new Canvas() {
 			public final void addNotify () {
 				super.addNotify();

File: demos/helloworld/gdx-helloworld-android/src/com/badlogic/gdx/GDXHelloWorld.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx;
 

File: demos/helloworld/gdx-helloworld/src/com/badlogic/gdx/helloworld/HelloWorld.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.helloworld;
 

File: demos/helloworld/gdx-helloworld/src/com/badlogic/gdx/helloworld/HelloWorldDesktop.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.helloworld;
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvaders.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdxinvaders;
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvadersDesktop.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdxinvaders;
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdxinvaders;
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameLoop.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdxinvaders.screens;
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameOver.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdxinvaders.screens;
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/MainMenu.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdxinvaders.screens;
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/Screen.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdxinvaders.screens;
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Block.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdxinvaders.simulation;
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Explosion.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdxinvaders.simulation;
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Invader.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdxinvaders.simulation;
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Ship.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdxinvaders.simulation;
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Shot.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdxinvaders.simulation;
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Simulation.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdxinvaders.simulation;
 

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/SimulationListener.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdxinvaders.simulation;
 

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/AndroidTestStarter.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 mzechner
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.android;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AudioDeviceTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AudioRecorderTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTestCollection.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FFTTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FloatTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FrameBufferTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ImmediateModeRendererTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/InputTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/LifeCycleTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ManagedTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MeshShaderTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MeshTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Mpg123Test.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ObjTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Pong.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SimpleTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteBatchRotationTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteBatchShaderTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteBatchTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteCacheOffsetTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteCacheTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StageTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureRenderTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VertexArrayTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VertexBufferObjectTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VorbisTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/ApplyForce.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/BodyTypes.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/Box2DTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/Bridge.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/Cantilever.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/Chain.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/CharacterCollision.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/CollisionFiltering.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/ContinuousTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/OneSidedPlatform.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/Prismatic.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/Pyramid.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/SimpleTest.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/SphereStack.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/VaryingRestitution.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/VerticalStack.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.tests.box2d;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAudio.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.lwjgl;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAudioDevice.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.lwjgl;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAudioRecorder.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.lwjgl;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglFileHandle.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.lwjgl;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglFiles.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.lwjgl;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL10.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.lwjgl;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL11.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.lwjgl;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL20.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.lwjgl;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGraphics.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.lwjgl;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.lwjgl;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglMusic.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.lwjgl;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglPixmap.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.lwjgl;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglSound.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.lwjgl;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglTexture.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.lwjgl;
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglApplication.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.jogl;
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglAudio.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.jogl;
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglAudioDevice.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.jogl;
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglAudioRecorder.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.jogl;
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglFileHandle.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.jogl;
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglFiles.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.jogl;
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglGL10.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.jogl;
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglGL11.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.jogl;
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglGL20.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.jogl;
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglMusic.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.jogl;
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglPixmap.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.jogl;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudio.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudioDevice.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidAudioRecorder.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFileHandle.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFiles.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGL10.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGL11.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGL20.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidMultiTouchHandler.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidMusic.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidPixmap.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidSingleTouchHandler.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidSound.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidTexture.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidTouchHandler.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx.backends.android;
 

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx;
 

File: gdx/src/com/badlogic/gdx/ApplicationListener.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx;
 

File: gdx/src/com/badlogic/gdx/Gdx.java
Patch:
@@ -1,5 +1,5 @@
-/*******************************************************************************
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com)
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
  * License. You may obtain a copy of the License at
@@ -9,7 +9,7 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
  * governing permissions and limitations under the License.
- ******************************************************************************/
+ */
 
 package com.badlogic.gdx;
 

File: gdx/src/com/badlogic/gdx/utils/json/JSONArray.java
Patch:
@@ -1,6 +1,3 @@
-
-package com.badlogic.gdx.utils.json;
-
 /*
  * Copyright (c) 2002 JSON.org
  * 
@@ -18,6 +15,7 @@
  * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
  * IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
+package com.badlogic.gdx.utils.json;
 
 import java.io.IOException;
 import java.io.Writer;

File: gdx/src/com/badlogic/gdx/utils/json/JSONObject.java
Patch:
@@ -1,6 +1,3 @@
-
-package com.badlogic.gdx.utils.json;
-
 /*
  * Copyright (c) 2002 JSON.org
  * 
@@ -18,6 +15,8 @@
  * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
  * IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
+package com.badlogic.gdx.utils.json;
+
 
 import java.io.IOException;
 import java.io.Writer;

File: demos/helloworld/gdx-helloworld/src/com/badlogic/gdx/helloworld/HelloWorld.java
Patch:
@@ -50,7 +50,7 @@ public class HelloWorld implements ApplicationListener {
 		spriteBatch.begin();
 		spriteBatch.draw(texture, centerX - texture.getWidth() / 2, centerY - texture.getHeight() / 2, 0, 0, texture.getWidth(),
 			texture.getHeight(), Color.WHITE);
-		font.draw(spriteBatch, "Hello World!", (int)textPosition.x, (int)textPosition.y, Color.RED);		
+		font.draw(spriteBatch, "Hello World!", (int)textPosition.x, (int)textPosition.y);		
 		spriteBatch.end();
 	}
 
@@ -61,6 +61,7 @@ public class HelloWorld implements ApplicationListener {
 
 	@Override public void create () {
 		font = new BitmapFont();
+		font.setColor(Color.RED);
 		texture = Gdx.graphics.newTexture(Gdx.files.getFileHandle("data/badlogic.jpg", FileType.Internal), TextureFilter.MipMap,
 			TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge);
 		spriteBatch = new SpriteBatch();

File: gdx/src/com/badlogic/gdx/graphics/SpriteCache.java
Patch:
@@ -99,7 +99,7 @@ public SpriteCache (int size, ShaderProgram shader) {
 	 */
 	public void beginCache () {
 		if (currentCache != null) throw new IllegalStateException("endCache must be called before begin.");
-		currentCache = new Cache(caches.size(), mesh.getNumVertices() / 2 * 6);
+		currentCache = new Cache(caches.size(), mesh.getNumVertices() / 4 * 6);
 		caches.add(currentCache);
 		mesh.getVerticesBuffer().compact();
 	}
@@ -536,7 +536,7 @@ public void draw (int cacheID, int offset, int length) {
 		if (!drawing) throw new IllegalStateException("SpriteCache.begin must be called before draw.");
 
 		Cache cache = caches.get(cacheID);
-		offset = offset * 12 + cache.offset;
+		offset = offset * 6 + cache.offset;
 		length *= 6;
 		Texture[] textures = cache.textures;
 		int[] counts = cache.counts;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteCacheOffsetTest.java
Patch:
@@ -15,6 +15,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputProcessor;
+import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Sprite;
 import com.badlogic.gdx.graphics.SpriteCache;
 import com.badlogic.gdx.tests.utils.GdxTest;
@@ -46,6 +47,7 @@ public void create () {
 	}
 
 	public void render () {
+		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		cache.begin();
 		for (int y = 1; y < tileMapHeight - 1; y++)
 			cache.draw(y, 1, tileMapWidth - 2);

File: gdx/src/com/badlogic/gdx/graphics/BitmapFontCache.java
Patch:
@@ -119,7 +119,7 @@ public void setColor(float r, float g, float b, float a) {
 	 *            The SpriteBatch
 	 */
 	public void draw(SpriteBatch spriteBatch) {
-		spriteBatch.draw(font.texture, vertices, 0, idx);
+		spriteBatch.draw(font.getSprite().getTexture(), vertices, 0, idx);
 	}
 
 	void reset(int glyphCount) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteSheetTest.java
Patch:
@@ -16,7 +16,7 @@ public class SpriteSheetTest extends GdxTest {
 	public void create () {
 		batch = new SpriteBatch();
 
-		spriteSheet = new SpriteSheet(Gdx.files.internal("data/pack"), Gdx.files.internal("data"));
+		spriteSheet = new SpriteSheet(Gdx.files.internal("data"));
 		badlogic = spriteSheet.get("badlogicslice");
 		badlogicSmall = spriteSheet.get("badlogicsmall");
 		star = spriteSheet.get("particle-star");

File: gdx/src/com/badlogic/gdx/graphics/BitmapFont.java
Patch:
@@ -36,6 +36,8 @@
 import java.io.InputStreamReader;
 import java.util.StringTokenizer;
 
+// BOZO - BitmapFont could take a sprite, so multiple fonts could be packed.
+
 /**
  * Loads and renders AngleCode BMFont files. The bitmap font consists of 2
  * files: the .fnt file which must be saved with text encoding (not xml or

File: extensions/particle-editor/src/com/badlogic/gdx/graphics/particles/EffectPanel.java
Patch:
@@ -108,7 +108,7 @@ void openEffect () {
 		lastDir = dir;
 		ParticleEffect effect = new ParticleEffect();
 		try {
-			effect.loadEmitters(Gdx.files.getFileHandle(new File(dir, file).getAbsolutePath(), FileType.Absolute));
+			effect.loadEmitters(Gdx.files.absolute(new File(dir, file).getAbsolutePath()));
 			editor.effect = effect;
 			emitterTableModel.getDataVector().removeAllElements();
 			editor.particleData.clear();

File: extensions/particle-editor/src/com/badlogic/gdx/graphics/particles/ImagePanel.java
Patch:
@@ -44,7 +44,7 @@ public void actionPerformed (ActionEvent event) {
 						heightLabel.setText("Height: " + icon.getIconHeight());
 						revalidate();
 						emitter.setImagePath(new File(dir, file).getAbsolutePath());
-						emitter.setTexture(null);
+						emitter.setSprite(null);
 					} catch (Exception ex) {
 						ex.printStackTrace();
 					}

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -364,7 +364,7 @@ public void render(int primitiveType, int offset, int count) {
 		} else {
 			if (indices.getNumIndices() > 0)
 				Gdx.gl11.glDrawElements(primitiveType, count,
-						GL10.GL_UNSIGNED_SHORT, offset);
+						GL10.GL_UNSIGNED_SHORT, offset * 2);
 			else
 				Gdx.gl11.glDrawArrays(primitiveType, offset, count);
 		}
@@ -453,7 +453,7 @@ public void render(ShaderProgram shader, int primitiveType, int offset,
 
 		if (indices.getNumIndices() > 0)
 			Gdx.gl20.glDrawElements(primitiveType, count,
-					GL10.GL_UNSIGNED_SHORT, offset);
+					GL10.GL_UNSIGNED_SHORT, offset * 2);
 		else
 			Gdx.gl20.glDrawArrays(primitiveType, offset, count);
 

File: gdx/src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -56,7 +56,7 @@
  */
 public interface Texture {
 	/**
-	 * Texture filter enum featuring the 3 most used filters.
+	 * Texture filter enum
 	 * 
 	 * @author badlogicgames@gmail.com
 	 * 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFileHandle.java
Patch:
@@ -137,12 +137,13 @@ private void ensureInternalFileExists (String fileName) {
 		try {
 			assets.open(fileName).close(); // Check if file exists.
 		} catch (Exception ex) {
+			int count;
 			try {
-				if (assets.list(fileName).length == 0) // Try as directory.
-					throw new GdxRuntimeException("File not found: " + fileName + " (" + type + ")", ex);
+				count = assets.list(fileName).length; // Try as directory.
 			} catch (Exception ex2) {
 				throw new GdxRuntimeException("Error locating file: " + fileName + " (" + type + ")", ex2);
 			}
+			if (count == 0) throw new GdxRuntimeException("File not found: " + fileName + " (" + type + ")", ex);
 		}
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/particles/ParticleEffect.java
Patch:
@@ -123,7 +123,7 @@ private void loadEmitterImages (FileHandle imagesDir) {
 			ParticleEmitter emitter = emitters.get(i);
 			String imagePath = emitter.getImagePath();
 			if (imagePath == null) continue;
-			String imageName = new File(imagePath).getName();
+			String imageName = new File(imagePath.replace('\\', '/')).getName();
 			emitter.setTexture(loadTexture(imagesDir.child(imageName)));
 		}
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteSheetTest.java
Patch:
@@ -17,7 +17,7 @@ public void create () {
 		batch = new SpriteBatch();
 
 		spriteSheet = new SpriteSheet(Gdx.files.internal("data/pack"), Gdx.files.internal("data"));
-		badlogic = spriteSheet.get("badlogic");
+		badlogic = spriteSheet.get("badlogicslice");
 		badlogicSmall = spriteSheet.get("badlogicsmall");
 		star = spriteSheet.get("particle-star");
 

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -14,8 +14,6 @@
 package com.badlogic.gdx.graphics;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Graphics;
-import com.badlogic.gdx.graphics.OrthographicCamera.Side;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.math.Vector3;
@@ -263,6 +261,7 @@ public void getWorldToScreen(float worldX, float worldY, Vector2 screen) {
 	 * @return The world x-coordinate
 	 */
 	public float getScreenToWorldX(float screenX) {
+        screenX = screenX / Gdx.graphics.getWidth() * viewportWidth;
 		return (screenX * scale) - (viewportWidth * scale) / 2 + position.x;
 	}
 
@@ -285,6 +284,7 @@ public int getWorldToScreenX(float worldX) {
 	 * @return The world y-coordinate
 	 */
 	public float getScreenToWorldY(float screenY) {
+        screenY = screenY / Gdx.graphics.getHeight() * viewportHeight;
 		return ((viewportHeight - screenY - 1) * scale)
 				- (viewportHeight * scale) / 2 + position.y;
 	}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglPixmap.java
Patch:
@@ -47,6 +47,7 @@ final class LwjglPixmap implements Pixmap {
 	}
 
 	LwjglPixmap (BufferedImage image) {
+		if (image == null) throw new IllegalArgumentException("image cannot be null.");
 		pixmap = convert(image);
 	}
 
@@ -62,10 +63,7 @@ private BufferedImage convert (BufferedImage image) {
 	}
 
 	private int getInternalFormat (Pixmap.Format format) {
-// if (format == Pixmap.Format.RGBA4444 || format == Pixmap.Format.RGBA8888 || format == Pixmap.Format.RGB565)
 		return BufferedImage.TYPE_4BYTE_ABGR;
-// else
-// return BufferedImage.TYPE_BYTE_GRAY;
 	}
 
 	public void drawCircle (int x, int y, int radius) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -29,6 +29,7 @@
 import com.badlogic.gdx.tests.MultitouchTest;
 import com.badlogic.gdx.tests.MyFirstTriangle;
 import com.badlogic.gdx.tests.ObjTest;
+import com.badlogic.gdx.tests.PixmapBlendingTesting;
 import com.badlogic.gdx.tests.SpriteSheetTest;
 import com.badlogic.gdx.tests.ParticleEmitterTest;
 import com.badlogic.gdx.tests.PixelsPerInchTest;
@@ -91,6 +92,7 @@ public class GdxTests
 		SpriteSheetTest.class,
 		ParticleEmitterTest.class,
 		PixelsPerInchTest.class,
+		PixmapBlendingTesting.class,
 		Pong.class,
 		SimpleTest.class,
 		SoundTest.class,

File: gdx/src/com/badlogic/gdx/graphics/BitmapFont.java
Patch:
@@ -81,8 +81,8 @@ public class BitmapFont {
      * the gdx jar file. This is here to get you up and running quickly.
      */
     public BitmapFont() {
-		this(Gdx.files.internal("com/badlogic/gdx/utils/arial-15.fnt"),
-			Gdx.files.internal("com/badlogic/gdx/utils/arial-15.png"), false);
+		this(Gdx.files.classpath("com/badlogic/gdx/utils/arial-15.fnt"),
+			Gdx.files.classpath("com/badlogic/gdx/utils/arial-15.png"), false);
     }
 
     public BitmapFont(FileHandle fontFile, Texture texture, boolean flip) {

File: demos/rtm/src/com/badlogic/rtm/LevelRenderer.java
Patch:
@@ -62,7 +62,7 @@ private void load () {
 			float uSize = 62.0f / 256.0f;
 			float vSize = 62.0f / 256.0f;
 			
-			BufferedReader reader = new BufferedReader(new InputStreamReader(Gdx.files.readFile("data/level.map", FileType.Internal)));
+			BufferedReader reader = new BufferedReader(new InputStreamReader(Gdx.files.internal("data/level.map").read()));
 			String line = reader.readLine();
 			String tokens[] = line.split(",");
 			camera.getPosition().set(Float.parseFloat(tokens[0]), 0, Float.parseFloat(tokens[1]));

File: gdx/src/com/badlogic/gdx/Files.java
Patch:
@@ -69,13 +69,13 @@ public enum FileType {
 	public FileHandle absolute (String path);
 
 	/**
-	 * Returns the external storage path directory. This is the SD card on Android or the home directory of the current user on the
+	 * @return the external storage path directory. This is the SD card on Android or the home directory of the current user on the
 	 * desktop.
 	 */
 	public String getExternalStoragePath ();
 
 	/**
-	 * Returns true if the external storage is ready for file i/o.
+	 * @return true if the external storage is ready for file i/o.
 	 */
 	public boolean isExternalStorageAvailable ();
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -10,6 +10,7 @@
 import com.badlogic.gdx.tests.BitmapFontTest;
 import com.badlogic.gdx.tests.Box2DTest;
 import com.badlogic.gdx.tests.Box2DTestCollection;
+import com.badlogic.gdx.tests.FilesTest;
 import com.badlogic.gdx.tests.FillrateTest;
 import com.badlogic.gdx.tests.FloatTest;
 import com.badlogic.gdx.tests.FrameBufferTest;
@@ -67,6 +68,7 @@ public class GdxTests
 		BitmapFontTest.class,
 		Box2DTest.class,
 		Box2DTestCollection.class,
+		FilesTest.class,
 		FillrateTest.class,
 		FloatTest.class,
 		FrameBufferTest.class,

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -230,6 +230,8 @@ public void setInputProcessor(InputProcessor processor) {
 	void processEvents() {
 		synchronized(this) {
 			if(processor!=null) {		
+				InputProcessor processor = this.processor;
+
 				int len = keyEvents.size();
 				for(int i=0; i < len; i++) {
 					KeyEvent e = keyEvents.get(i);

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglInput.java
Patch:
@@ -158,6 +158,8 @@ public boolean isTouched(int pointer) {
 	void processEvents() {
 		synchronized(this) {
 			if(processor!=null) {		
+				InputProcessor processor = this.processor;
+
 				int len = keyEvents.size();
 				for(int i=0; i < len; i++) {
 					KeyEvent e = keyEvents.get(i);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java
Patch:
@@ -167,7 +167,8 @@ public boolean supportsMultitouch () {
 
 	void processEvents() {
 		synchronized(this) {
-			if(processor!=null) {		
+			if(processor!=null) {	
+				InputProcessor processor = this.processor;
 				int len = keyEvents.size();
 				for(int i=0; i < len; i++) {
 					KeyEvent e = keyEvents.get(i);

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -68,7 +68,7 @@
  * <p>
  * {@link Input} offers you various methods to poll user input from the
  * keyboard, touch screen, mouse and accelerometer. Additionally you can
- * implement an {@link InputProcessor} and use it with {@link Input#processEvents(InputProcessor)}
+ * implement an {@link InputProcessor} and use it with {@link Input#setInputProcessor(InputProcessor)}
  * to receive input events.
  * </p>
  * 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglGraphics.java
Patch:
@@ -67,11 +67,10 @@ public void display(GLAutoDrawable arg0) {
 		synchronized (this) {
 			if (!paused) {
 				updateTimes();
+				((JoglInput)Gdx.input).processEvents();
 				listener.render();
 			}
-		}		
-		
-		Gdx.input.processEvents(null);
+		}					
 	}
 	
 	@Override

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -97,8 +97,8 @@ private void mainLoop () {
 				}
 			}
 
+			((LwjglInput)Gdx.input).processEvents();
 			listener.render();
-			input.processEvents(null);
 			Display.update();
 			Display.sync(60);
 		}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglCanvas.java
Patch:
@@ -131,9 +131,8 @@ public void run () {
 					lastHeight = height;
 					listener.resize(width, height);
 				}
-
+				((LwjglInput)Gdx.input).processEvents();
 				listener.render();
-				input.processEvents(null);
 				Display.update();
 				Display.sync(60);
 			}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL10.java
Patch:
@@ -431,7 +431,7 @@ else if (pixels instanceof FloatBuffer)
 			GL11.glTexImage2D(target, level, internalformat, width, height, border, format, type, (FloatBuffer)pixels);
 		else if (pixels instanceof DoubleBuffer)
 			GL11.glTexImage2D(target, level, internalformat, width, height, border, format, type, (DoubleBuffer)pixels);
-		else
+		else		
 			throw new GdxRuntimeException("Can't use " + pixels.getClass().getName()
 				+ " with this method. Use ByteBuffer, ShortBuffer, IntBuffer, FloatBuffer or DoubleBuffer instead. Blame LWJGL");
 	}

File: demos/rtm/src/com/badlogic/rtm/LevelRenderer.java
Patch:
@@ -199,7 +199,7 @@ private void load () {
 		wallMesh.render(GL10.GL_TRIANGLES);
 		
 		batch.begin();
-		font.draw(batch, "fps: " + Gdx.graphics.getFramesPerSecond(), 10, 10, Color.RED);
+		font.draw(batch, "fps: " + Gdx.graphics.getFramesPerSecond() + ", delta:" + Gdx.graphics.getDeltaTime(), 10, 10, Color.WHITE);
 		batch.end();
 		
 		processInput();

File: extensions/particle-editor/src/com/badlogic/gdx/graphics/particles/ParticleEditor.java
Patch:
@@ -237,6 +237,7 @@ public void create () {
 				"data/default.png", FileType.Internal), true);
 			effectPanel.newEmitter("Untitled", true);
 			// if (resources.openFile("/editor-bg.png") != null) bgImage = new Image(gl, "/editor-bg.png");
+			Gdx.input.setInputProcessor(this);
 		}
 
 		@Override public void resize (int width, int height) {
@@ -296,7 +297,6 @@ public void render () {
 
 			// gl.drawLine((int)(viewWidth * getCurrentParticles().getPercentComplete()), viewHeight - 1, viewWidth, viewHeight -
 // 1);
-			Gdx.input.processEvents(this);
 		}
 
 		private void loadImage (ParticleEmitter emitter) {

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/ButtonTest.java
Patch:
@@ -29,15 +29,14 @@ public class ButtonTest implements ApplicationListener, InputProcessor {
 
 		input.addProcessor(twl);
 		input.addProcessor(this);
+		Gdx.input.setInputProcessor(input);
 	}
 
 	@Override public void resize (int width, int height) {
 	}
 
 	@Override public void render () {
 		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
-
-		Gdx.input.processEvents(input);
 		twl.render();
 	}
 

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/TextAreaTest.java
Patch:
@@ -65,14 +65,15 @@ public void run () {
 				speed = -speed;
 			}
 		});
+		
+		Gdx.input.setInputProcessor(twl);
 	}
 
 	@Override public void resize (int width, int height) {
 	}
 
 	@Override public void render () {
 		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
-		Gdx.input.processEvents(twl);
 		twl.render();
 	}
 

File: gdx/src/com/badlogic/gdx/InputProcessor.java
Patch:
@@ -15,9 +15,9 @@
 
 /**
  * An InputProcessor is used to receive input events from the keyboard and the touch
- * screen (mouse on the desktop). For this it has to be used in combination with
- * {@link Input#processEvents(InputProcessor)} method. The methods return a
- * boolean in case you want to write a multiplexing InputProcessor that has a
+ * screen (mouse on the desktop). For this it has to be registered with the {@link Input#setInputProcessor(InputProcessor)}
+ * method. It will be called each frame before the call to {@link ApplicationListener#render()}. 
+ * The methods return a* boolean in case you want to write a multiplexing InputProcessor that has a
  * chain of child processors that signal whether they processed the event. The
  * {@link InputMultiplexer} offers you exactly this functionality.
  * 

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObjectSubData.java
Patch:
@@ -86,9 +86,9 @@ public VertexBufferObjectSubData(boolean isStatic, int numVertices,
 //		}
 		usage = isStatic ? GL11.GL_STATIC_DRAW : GL11.GL_DYNAMIC_DRAW;
 		buffer = byteBuffer.asFloatBuffer();
+		bufferHandle = createBufferObject();
 		buffer.flip();
 		byteBuffer.flip();
-		bufferHandle = createBufferObject();
 	}
 
 	private int createBufferObject() {

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
Patch:
@@ -4,6 +4,6 @@
 
 public class LwjglDebugStarter {
 	public static void main(String[] argv) {
-		new LwjglApplication(new com.badlogic.gdx.tests.UITest(), "UI Test", 480, 320, false);
+		new LwjglApplication(new com.badlogic.gdx.tests.VBOVATest(), "UI Test", 480, 320, false);
 	}
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontFlipTest.java
Patch:
@@ -48,6 +48,7 @@ public boolean touchDown (int x, int y, int pointer) {
 				return false;
 			}
 		};
+		Gdx.input.setInputProcessor(inputProcessor);
 
 		cache1 = new BitmapFontCache(font);
 		cache2 = new BitmapFontCache(font);
@@ -86,9 +87,7 @@ public void render () {
 			renderCached();
 			break;
 		}
-		spriteBatch.end();
-		
-		Gdx.input.processEvents(inputProcessor);
+		spriteBatch.end();			
 	}
 
 	private void renderNormal () {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/BitmapFontTest.java
Patch:
@@ -51,6 +51,8 @@ public boolean touchDown (int x, int y, int pointer) {
 				return false;
 			}
 		};
+		
+		Gdx.input.setInputProcessor(inputProcessor);
 
 		cache1 = new BitmapFontCache(font);
 		cache2 = new BitmapFontCache(font);
@@ -90,8 +92,6 @@ public void render () {
 			break;
 		}
 		spriteBatch.end();
-		
-		Gdx.input.processEvents(inputProcessor);
 	}
 
 	private void renderNormal () {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTestCollection.java
Patch:
@@ -48,7 +48,6 @@ public class Box2DTestCollection extends GdxTest implements InputProcessor {
 
 	@Override public void render () {
 		tests[testIndex].render();
-		Gdx.input.processEvents(this);
 	}
 
 	@Override public void create () {
@@ -57,6 +56,8 @@ public class Box2DTestCollection extends GdxTest implements InputProcessor {
 			Box2DTest test = tests[testIndex];
 			test.create();			
 		}
+		
+		Gdx.input.setInputProcessor(this);
 	}
 
 	@Override public boolean keyDown (int keycode) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FillrateTest.java
Patch:
@@ -60,6 +60,8 @@ public void create() {
 		short[] indices = { 0, 1, 2, 2, 3, 0 };
 		mesh.setVertices(vertices);
 		mesh.setIndices(indices);
+		
+		Gdx.input.setInputProcessor(this);
 	}
 
 	@Override
@@ -108,8 +110,6 @@ public void render() {
 			if (Gdx.graphics.getFramesPerSecond() < 60)
 				numFills--;
 		}
-		
-		Gdx.input.processEvents(this);
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MD5Test.java
Patch:
@@ -57,6 +57,8 @@ public void create() {
 		font = new BitmapFont();
 		Gdx.graphics.getGL10().glViewport(0, 0, Gdx.graphics.getWidth(),
 				Gdx.graphics.getHeight());
+		
+		Gdx.input.setInputProcessor(this);
 	}
 
 	float angle = 0;
@@ -101,8 +103,6 @@ public void render() {
 				+ (renderer.isJniUsed() ? ", jni" : ", java") + ", render time: " + renderTime + ", skin time: " + skinTime, 10, 20,
 				Color.WHITE);
 		batch.end();
-		
-		Gdx.input.processEvents(this);
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MultitouchTest.java
Patch:
@@ -36,8 +36,6 @@ public class MultitouchTest extends GdxTest implements InputProcessor {
 		}
 
 		renderer.end();
-		
-		Gdx.input.processEvents(this);
 	}
 
 
@@ -46,7 +44,8 @@ public class MultitouchTest extends GdxTest implements InputProcessor {
 		renderer = new ImmediateModeRenderer();
 		camera = new OrthographicCamera();
 		camera.setViewport(Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		camera.getPosition().set(Gdx.graphics.getWidth() / 2.0f, Gdx.graphics.getHeight() / 2.0f, 0);		
+		camera.getPosition().set(Gdx.graphics.getWidth() / 2.0f, Gdx.graphics.getHeight() / 2.0f, 0);
+		Gdx.input.setInputProcessor(this);
 	}
 
 	@Override public boolean keyDown (int keycode) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ObjTest.java
Patch:
@@ -43,7 +43,8 @@ public class ObjTest extends GdxTest implements InputProcessor {
 
 		cam = new PerspectiveCamera();
 		cam.getPosition().set(2, 2, 2);
-		cam.getDirection().set(-1, -1, -1);		
+		cam.getDirection().set(-1, -1, -1);
+		Gdx.input.setInputProcessor(this);
 	}
 
 	@Override public void render () {
@@ -66,8 +67,6 @@ public class ObjTest extends GdxTest implements InputProcessor {
 		gl.glRotatef(angleX, 1, 0, 0);
 		texture.bind();
 		mesh.render(GL10.GL_TRIANGLES);
-		
-		Gdx.input.processEvents(this);
 	}
 
 	@Override public boolean keyDown (int keycode) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ParticleEmitterTest.java
Patch:
@@ -86,7 +86,10 @@ else if (keycode == Input.Keys.KEYCODE_SPACE) {
 				return false;
 			}
 		};
+		
+		Gdx.input.setInputProcessor(inputProcessor);
 	}
+	
 
 	public void render () {
 		spriteBatch.getProjectionMatrix().setToOrtho2D(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
@@ -102,8 +105,6 @@ public void render () {
 			int activeCount = emitters.get(emitterIndex).getActiveCount();
 			System.out.println(activeCount + "/" + particleCount + " particles, FPS: " + Gdx.graphics.getFramesPerSecond());
 		}
-		
-		Gdx.input.processEvents(inputProcessor);
 	}
 
 	public boolean needsGL20 () {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SimpleTest.java
Patch:
@@ -23,16 +23,14 @@ public class SimpleTest extends GdxTest implements InputProcessor {
 
 	@Override public void create () {		
 		Gdx.app.log("Simple Test", "Thread=" + Thread.currentThread().getId() + ", surface created");
+		Gdx.input.setInputProcessor(this);
 	}
 
 	@Override public void render () {
 		GL10 gl = Gdx.app.getGraphics().getGL10();
 
 		gl.glClearColor(r, g, b, 1);
 		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
-		
-		Gdx.input.processEvents(this);
-
 	}
 
 	@Override public void dispose () {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -26,7 +26,6 @@ public class SoundTest extends GdxTest implements InputProcessor {
 	float volume = 1.0f;
 
 	@Override public void render () {		
-		Gdx.input.processEvents(this);
 	}
 
 
@@ -37,6 +36,7 @@ public class SoundTest extends GdxTest implements InputProcessor {
 			music = Gdx.audio.newMusic(Gdx.files.getFileHandle("data/cloudconnected.ogg", FileType.Internal));
 			music.play();
 			music.setLooping(true);
+			Gdx.input.setInputProcessor(this);
 	}
 
 	@Override public boolean keyDown (int keycode) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteCacheTest.java
Patch:
@@ -43,8 +43,6 @@ public class SpriteCacheTest extends GdxTest implements InputProcessor {
 		if (renderMethod == 0) renderNormal();
 		;
 		if (renderMethod == 1) renderSprites();
-
-		Gdx.input.processEvents(this);
 	}
 
 	private void renderNormal () {
@@ -182,6 +180,8 @@ private void renderSprites () {
 			spriteCache.add(sprites3[i]);
 		}
 		spritesCache = spriteCache.endCache();
+		
+		Gdx.input.setInputProcessor(this);
 	}
 
 	@Override public boolean keyDown (int keycode) {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StageTest.java
Patch:
@@ -103,6 +103,7 @@ public void create() {
 
 		Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
 		renderer = new ImmediateModeRenderer();
+		Gdx.input.setInputProcessor(this);
 	}
 
 	private void fillGroup(Group group, Texture texture) {
@@ -190,9 +191,7 @@ public void render() {
 		// Gdx.graphics.getFramesPerSecond() + ", actors " + images.size() +
 		// ", groups "
 		// + stage.getGroups().size();
-		ui.render();
-		
-		Gdx.input.processEvents(this);
+		ui.render();		
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -129,7 +129,7 @@ public void clicked(Button button) {
 		ui.addActor(linearh);
 
 		// Group.enableDebugging( "data/debug.png" );
-
+		Gdx.input.setInputProcessor(this);
 	}
 
 	@Override
@@ -138,8 +138,6 @@ public void render() {
 		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		ui.act(Gdx.graphics.getDeltaTime());
 		ui.render();
-
-		Gdx.input.processEvents(this);
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VBOVATest.java
Patch:
@@ -25,7 +25,7 @@ public class VBOVATest extends GdxTest {
 	VertexData vertexBuffer;
 	float[] vertices;
 	short[] indices;
-	int mode = 0;
+	int mode = 1;
 	long startTime = 0;
 	int frames = 0;
 	boolean isStatic = false;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/WaterRipples.java
Patch:
@@ -68,6 +68,7 @@ public class WaterRipples extends GdxTest implements InputProcessor {
 		initialized = true;
 
 		batch = new SpriteBatch();
+		Gdx.input.setInputProcessor(this);
 //			font = Gdx.graphics.newFont("Arial", 12, FontStyle.Plain);
 	}
 
@@ -190,9 +191,7 @@ private void touchWater (Vector3 point) {
 
 		batch.begin();
 //		batch.drawText(font, "fps: " + Gdx.graphics.getFramesPerSecond(), 10, 20, Color.WHITE);
-		batch.end();
-		
-		Gdx.input.processEvents(this);
+		batch.end();		
 	}
 
 	@Override public boolean keyDown (int keycode) {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL11.java
Patch:
@@ -91,9 +91,11 @@ else if (data instanceof DoubleBuffer)
 			GL15.glBufferData(target, (DoubleBuffer)data, usage);
 		else if (data instanceof ShortBuffer) //
 			GL15.glBufferData(target, (ShortBuffer)data, usage);
+		else if (data == null )
+			GL15.glBufferData(target, size, usage);
 	}
 
-	public void glBufferSubData (int target, int offset, int size, Buffer data) {
+	public void glBufferSubData (int target, int offset, int size, Buffer data) {				
 		if (data instanceof ByteBuffer)
 			GL15.glBufferSubData(target, offset, (ByteBuffer)data);
 		else if (data instanceof IntBuffer)

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -144,8 +144,8 @@ public static void toChildCoordinates (Actor child, float x, float y, Vector2 ou
 					out.x = (x - child.x) / child.scaleX;
 					out.y = (y - child.y) / child.scaleY;
 				} else {
-					out.x = x / child.scaleX - (child.x - child.originX);
-					out.y = x / child.scaleY - (child.y - child.originY);
+					out.x = (x - child.x - child.originX) / child.scaleX + child.originX;
+					out.y = (y - child.y - child.originY) / child.scaleY + child.originY;
 				}
 			}
 		} else {

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObject.java
Patch:
@@ -74,6 +74,7 @@ public IndexBufferObject(boolean isStatic, int maxIndices) {
 //		}
 		buffer = byteBuffer.asShortBuffer();
 		buffer.flip();
+		byteBuffer.flip();
 		bufferHandle = createBufferObject();
 		usage = isStatic ? GL11.GL_STATIC_DRAW : GL11.GL_DYNAMIC_DRAW;
 	}
@@ -90,6 +91,8 @@ public IndexBufferObject(int maxIndices) {
 		this.isDirect = true;
 		
 		buffer = byteBuffer.asShortBuffer();
+		buffer.flip();
+		byteBuffer.flip();
 		bufferHandle = createBufferObject();
 		usage = GL11.GL_STATIC_DRAW;
 	}

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObjectSubData.java
Patch:
@@ -75,6 +75,7 @@ public IndexBufferObjectSubData(boolean isStatic, int maxIndices) {
 		usage = isStatic ? GL11.GL_STATIC_DRAW : GL11.GL_DYNAMIC_DRAW;
 		buffer = byteBuffer.asShortBuffer();
 		buffer.flip();
+		byteBuffer.flip();
 		bufferHandle = createBufferObject();
 	}
 
@@ -91,6 +92,8 @@ public IndexBufferObjectSubData(int maxIndices) {
 
 		usage = GL11.GL_STATIC_DRAW;
 		buffer = byteBuffer.asShortBuffer();
+		buffer.flip();
+		byteBuffer.flip();
 		bufferHandle = createBufferObject();
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObject.java
Patch:
@@ -86,6 +86,7 @@ public VertexBufferObject(boolean isStatic, int numVertices,
 //		}
 		buffer = byteBuffer.asFloatBuffer();
 		buffer.flip();
+		byteBuffer.flip();
 		bufferHandle = createBufferObject();
 		usage = isStatic ? GL11.GL_STATIC_DRAW : GL11.GL_DYNAMIC_DRAW;
 	}
@@ -111,14 +112,14 @@ public VertexAttributes getAttributes() {
 	 */
 	@Override
 	public int getNumVertices() {
-		return buffer.limit();
+		return buffer.limit() * 4 / attributes.vertexSize;
 	}
 
 	/**
 	 * {@inheritDoc}
 	 */
 	public int getNumMaxVertices() {
-		return buffer.capacity();
+		return byteBuffer.capacity() / attributes.vertexSize;
 	}
 
 	/**

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObjectSubData.java
Patch:
@@ -87,6 +87,7 @@ public VertexBufferObjectSubData(boolean isStatic, int numVertices,
 		usage = isStatic ? GL11.GL_STATIC_DRAW : GL11.GL_DYNAMIC_DRAW;
 		buffer = byteBuffer.asFloatBuffer();
 		buffer.flip();
+		byteBuffer.flip();
 		bufferHandle = createBufferObject();
 	}
 
@@ -119,14 +120,14 @@ public VertexAttributes getAttributes() {
 	 */
 	@Override
 	public int getNumVertices() {
-		return buffer.limit();
+		return buffer.limit() * 4 / attributes.vertexSize;
 	}
 
 	/**
 	 * {@inheritDoc}
 	 */
 	public int getNumMaxVertices() {
-		return buffer.capacity();
+		return byteBuffer.capacity() / attributes.vertexSize;
 	}
 
 	/**

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteCacheTest.java
Patch:
@@ -168,6 +168,8 @@ private void renderSprites () {
 				false, false);
 		normalCache = spriteCache.endCache();
 
+		angle = -15;
+		
 		spriteCache.beginCache();
 		for (int i = SPRITES; i < SPRITES << 1; i++) {
 			sprites3[i].setRotation(angle);

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObject.java
Patch:
@@ -185,7 +185,8 @@ public void bind() {
 		if (Gdx.gl11 != null) {
 			GL11 gl = Gdx.gl11;
 			gl.glBindBuffer(GL11.GL_ELEMENT_ARRAY_BUFFER, bufferHandle);
-			if (isDirty) {				
+			if (isDirty) {		
+				byteBuffer.limit(buffer.limit()*2);
 				gl.glBufferData(GL11.GL_ELEMENT_ARRAY_BUFFER, byteBuffer
 						.limit(), byteBuffer, usage);
 				isDirty = false;
@@ -194,6 +195,7 @@ public void bind() {
 			GL20 gl = Gdx.gl20;
 			gl.glBindBuffer(GL20.GL_ELEMENT_ARRAY_BUFFER, bufferHandle);
 			if (isDirty) {				
+				byteBuffer.limit(buffer.limit()*2);
 				gl.glBufferData(GL20.GL_ELEMENT_ARRAY_BUFFER, byteBuffer
 						.limit(), byteBuffer, usage);
 				isDirty = false;

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObjectSubData.java
Patch:
@@ -197,6 +197,7 @@ public void bind() {
 			if (isDirty) {				
 //				gl.glBufferData(GL11.GL_ELEMENT_ARRAY_BUFFER, byteBuffer
 //						.limit(), byteBuffer, usage);
+				byteBuffer.limit(buffer.limit()*2);
 				gl.glBufferSubData(GL11.GL_ELEMENT_ARRAY_BUFFER, 0, byteBuffer.limit(), byteBuffer);
 				isDirty = false;
 			}
@@ -206,6 +207,7 @@ public void bind() {
 			if (isDirty) {				
 //				gl.glBufferData(GL20.GL_ELEMENT_ARRAY_BUFFER, byteBuffer
 //						.limit(), byteBuffer, usage);
+				byteBuffer.limit(buffer.limit()*2);
 				gl.glBufferSubData(GL20.GL_ELEMENT_ARRAY_BUFFER, 0, byteBuffer.limit(), byteBuffer);
 				isDirty = false;
 			}

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexArray.java
Patch:
@@ -98,6 +98,8 @@ public void bind() {
 		int textureUnit = 0;
 		int numAttributes = attributes.size();
 
+		byteBuffer.limit(buffer.limit()*4);
+
 		for (int i = 0; i < numAttributes; i++) {
 			VertexAttribute attribute = attributes.get(i);
 
@@ -174,7 +176,7 @@ public void unbind() {
 						+ attribute.usage);
 			}
 		}
-		
+		byteBuffer.position(0);
 		isBound = false;
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObject.java
Patch:
@@ -171,6 +171,7 @@ public void bind() {
 
 		gl.glBindBuffer(GL11.GL_ARRAY_BUFFER, bufferHandle);
 		if (isDirty) {
+			byteBuffer.limit(buffer.limit()*4);
 			gl.glBufferData(GL11.GL_ARRAY_BUFFER, byteBuffer.limit(),
 					byteBuffer, usage);
 			isDirty = false;
@@ -235,6 +236,7 @@ public void bind(ShaderProgram shader) {
 
 		gl.glBindBuffer(GL20.GL_ARRAY_BUFFER, bufferHandle);
 		if (isDirty) {			
+			byteBuffer.limit(buffer.limit()*4);
 			gl.glBufferData(GL20.GL_ARRAY_BUFFER, byteBuffer.limit(),
 					byteBuffer, usage);
 			isDirty = false;

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObjectSubData.java
Patch:
@@ -179,6 +179,7 @@ public void bind() {
 
 		gl.glBindBuffer(GL11.GL_ARRAY_BUFFER, bufferHandle);
 		if (isDirty) {
+			byteBuffer.limit(buffer.limit()*4);
 			gl.glBufferSubData(GL11.GL_ARRAY_BUFFER, 0, byteBuffer.limit(), byteBuffer);
 //			gl.glBufferData(GL11.GL_ARRAY_BUFFER, byteBuffer.limit(),
 //					byteBuffer, usage);
@@ -244,6 +245,7 @@ public void bind(ShaderProgram shader) {
 
 		gl.glBindBuffer(GL20.GL_ARRAY_BUFFER, bufferHandle);
 		if (isDirty) {
+			byteBuffer.limit(buffer.limit()*4);
 			gl.glBufferSubData(GL11.GL_ARRAY_BUFFER, 0, byteBuffer.limit(), byteBuffer);
 //			gl.glBufferData(GL20.GL_ARRAY_BUFFER, byteBuffer.limit(),
 //					byteBuffer, usage);

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObject.java
Patch:
@@ -73,6 +73,7 @@ public IndexBufferObject(boolean isStatic, int maxIndices) {
 			isDirect = true;
 //		}
 		buffer = byteBuffer.asShortBuffer();
+		buffer.flip();
 		bufferHandle = createBufferObject();
 		usage = isStatic ? GL11.GL_STATIC_DRAW : GL11.GL_DYNAMIC_DRAW;
 	}

File: gdx/src/com/badlogic/gdx/graphics/glutils/IndexBufferObjectSubData.java
Patch:
@@ -74,6 +74,7 @@ public IndexBufferObjectSubData(boolean isStatic, int maxIndices) {
 //		}
 		usage = isStatic ? GL11.GL_STATIC_DRAW : GL11.GL_DYNAMIC_DRAW;
 		buffer = byteBuffer.asShortBuffer();
+		buffer.flip();
 		bufferHandle = createBufferObject();
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexArray.java
Patch:
@@ -48,6 +48,7 @@ public VertexArray(int numVertices, VertexAttribute... attributes) {
 				* numVertices);
 		byteBuffer.order(ByteOrder.nativeOrder());
 		buffer = byteBuffer.asFloatBuffer();
+		buffer.flip();
 	}
 
 	/**
@@ -71,7 +72,7 @@ public FloatBuffer getBuffer() {
 	 */
 	@Override
 	public int getNumVertices() {
-		return byteBuffer.limit() / attributes.vertexSize;
+		return buffer.limit();
 	}
 
 	/**

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObject.java
Patch:
@@ -118,7 +118,7 @@ public int getNumVertices() {
 	 * {@inheritDoc}
 	 */
 	public int getNumMaxVertices() {
-		return byteBuffer.capacity() / attributes.vertexSize;
+		return buffer.capacity();
 	}
 
 	/**

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObjectSubData.java
Patch:
@@ -86,6 +86,7 @@ public VertexBufferObjectSubData(boolean isStatic, int numVertices,
 //		}
 		usage = isStatic ? GL11.GL_STATIC_DRAW : GL11.GL_DYNAMIC_DRAW;
 		buffer = byteBuffer.asFloatBuffer();
+		buffer.flip();
 		bufferHandle = createBufferObject();
 	}
 
@@ -118,14 +119,14 @@ public VertexAttributes getAttributes() {
 	 */
 	@Override
 	public int getNumVertices() {
-		return byteBuffer.limit() / attributes.vertexSize;
+		return buffer.limit();
 	}
 
 	/**
 	 * {@inheritDoc}
 	 */
 	public int getNumMaxVertices() {
-		return byteBuffer.capacity() / attributes.vertexSize;
+		return buffer.capacity();
 	}
 
 	/**

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ParticleEmitterTest.java
Patch:
@@ -80,7 +80,7 @@ else if (keycode == Input.Keys.KEYCODE_SPACE) {
 					return false;
 				particleCount = Math.max(0, particleCount);
 				if (particleCount > emitter.getMaxParticleCount()) emitter.setMaxParticleCount(particleCount * 2);
-				emitter.getEmission().setHigh(particleCount / emitter.getLife().getHighMax());
+				emitter.getEmission().setHigh(particleCount / emitter.getLife().getHighMax() * 1000);
 				effect.getEmitters().clear();
 				effect.getEmitters().add(emitter);
 				return false;

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -74,7 +74,7 @@ public class Mesh {
 	 */
 	public Mesh(boolean isStatic, int maxVertices, int maxIndices,
 			VertexAttribute... attributes) {
-		if (Gdx.gl11 != null || Gdx.gl20 != null) {
+		if (isStatic && (Gdx.gl11 != null || Gdx.gl20 != null)) {
 			vertices = new VertexBufferObject(isStatic, maxVertices, attributes);
 			indices = new IndexBufferObject(isStatic, maxIndices);
 			isVertexArray = false;

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObject.java
Patch:
@@ -85,6 +85,7 @@ public VertexBufferObject(boolean isStatic, int numVertices,
 			isDirect = true;
 //		}
 		buffer = byteBuffer.asFloatBuffer();
+		buffer.flip();
 		bufferHandle = createBufferObject();
 		usage = isStatic ? GL11.GL_STATIC_DRAW : GL11.GL_DYNAMIC_DRAW;
 	}
@@ -110,7 +111,7 @@ public VertexAttributes getAttributes() {
 	 */
 	@Override
 	public int getNumVertices() {
-		return byteBuffer.limit() / attributes.vertexSize;
+		return buffer.limit();
 	}
 
 	/**

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -35,6 +35,7 @@
 import com.badlogic.gdx.tests.SpriteBatchRotationTest;
 import com.badlogic.gdx.tests.SpriteBatchShaderTest;
 import com.badlogic.gdx.tests.SpriteBatchTest;
+import com.badlogic.gdx.tests.SpriteCacheTest;
 import com.badlogic.gdx.tests.StageTest;
 import com.badlogic.gdx.tests.TerrainTest;
 import com.badlogic.gdx.tests.TextureRenderTest;
@@ -87,6 +88,7 @@ public class GdxTests
 		Pong.class,
 		SimpleTest.class,
 		SoundTest.class,
+		SpriteCacheTest.class,
 		SpriteBatchRotationTest.class,
 		SpriteBatchShaderTest.class,
 		SpriteBatchTest.class,

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -145,7 +145,7 @@ public static void toChildCoordinates (Actor child, float x, float y, Vector2 ou
 					out.y = (y - child.y) / child.scaleY;
 				} else {
 					out.x = x / child.scaleX - (child.x - child.originX);
-					out.x = x / child.scaleX - (child.x - child.originX);
+					out.y = x / child.scaleY - (child.y - child.originY);
 				}
 			}
 		} else {

File: tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
Patch:
@@ -28,6 +28,7 @@
 import com.badlogic.gdx.tests.MultitouchTest;
 import com.badlogic.gdx.tests.ObjTest;
 import com.badlogic.gdx.tests.ParticleEmitterTest;
+import com.badlogic.gdx.tests.PixelsPerInchTest;
 import com.badlogic.gdx.tests.Pong;
 import com.badlogic.gdx.tests.SimpleTest;
 import com.badlogic.gdx.tests.SoundTest;
@@ -82,6 +83,7 @@ public class GdxTests
 		MultitouchTest.class,
 		ObjTest.class,
 		ParticleEmitterTest.class,
+		PixelsPerInchTest.class,
 		Pong.class,
 		SimpleTest.class,
 		SoundTest.class,

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexArray.java
Patch:
@@ -89,8 +89,6 @@ public void setVertices(float[] vertices, int offset, int count) {
 		BufferUtils.copy(vertices, byteBuffer, count, offset);
 		buffer.position(0);
 		buffer.limit(count);
-				
-		if( isBound ) bind();
 	}
 
 	@Override

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -123,6 +123,8 @@ public View initializeForView (ApplicationListener listener, boolean useGL2IfAva
 		input = new AndroidInput(this, graphics.view, sleepTime);		
 		audio = new AndroidAudio(this);
 		files = new AndroidFiles(this.getAssets());
+		this.listener = listener;
+		this.handler = new Handler();
 
 		Gdx.app = this;
 		Gdx.input = this.getInput();

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidTexture.java
Patch:
@@ -99,6 +99,7 @@ final class AndroidTexture implements Texture {
 	 */
 	AndroidTexture (AndroidGraphics graphics, TextureData textureData, TextureFilter minFilter, TextureFilter magFilter,
 		TextureWrap uWrap, TextureWrap vWrap) {
+		this.textureData = textureData;
 		this.minFilter = minFilter;
 		this.magFilter = magFilter;
 		this.uWrap = uWrap;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidPixmap.java
Patch:
@@ -47,9 +47,6 @@ final class AndroidPixmap implements Pixmap {
 		paint.setXfermode(new PorterDuffXfermode(Mode.SRC));
 	}
 
-	/**
-	 * {@inheritDoc}
-	 */
 	public AndroidPixmap (Bitmap bitmap) {
 		pixmap = bitmap;
 

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLLogWrapper.java
Patch:
@@ -924,7 +924,7 @@ private String getPointerTypeName (int type) {
 		}
 	}
 
-	private ByteBuffer toByteBuffer (int byteCount, Buffer input) {
+	ByteBuffer toByteBuffer (int byteCount, Buffer input) {
 		ByteBuffer result = null;
 		boolean convertWholeBuffer = (byteCount < 0);
 		if (input instanceof ByteBuffer) {

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLSurfaceView20.java
Patch:
@@ -50,7 +50,7 @@
  * red/green/blue/alpha channels bit depths). Failure to do so would result in an EGL_BAD_MATCH error.
  */
 public class GLSurfaceView20 extends GLSurfaceView {
-	private static String TAG = "GL2JNIView";
+	static String TAG = "GL2JNIView";
 	private static final boolean DEBUG = false;
 
 	public GLSurfaceView20 (Context context) {
@@ -89,7 +89,7 @@ private void init (boolean translucent, int depth, int stencil) {
 		/* Set the renderer responsible for frame rendering */
 	}
 
-	private static class ContextFactory implements GLSurfaceView.EGLContextFactory {
+	static class ContextFactory implements GLSurfaceView.EGLContextFactory {
 		private static int EGL_CONTEXT_CLIENT_VERSION = 0x3098;
 
 		public EGLContext createContext (EGL10 egl, EGLDisplay display, EGLConfig eglConfig) {
@@ -106,7 +106,7 @@ public void destroyContext (EGL10 egl, EGLDisplay display, EGLContext context) {
 		}
 	}
 
-	private static void checkEglError (String prompt, EGL10 egl) {
+	static void checkEglError (String prompt, EGL10 egl) {
 		int error;
 		while ((error = egl.eglGetError()) != EGL10.EGL_SUCCESS) {
 			Log.e(TAG, String.format("%s: EGL error: 0x%x", prompt, error));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
Patch:
@@ -56,13 +56,13 @@ public class Box2DTest extends GdxTest implements InputProcessor {
 	private ArrayList<Body> boxes = new ArrayList<Body>();
 
 	/** our ground box **/
-	private Body groundBody;
+	Body groundBody;
 
 	/** our mouse joint **/
 	private MouseJoint mouseJoint = null;
 
 	/** a hit body **/
-	private Body hitBody = null;
+	Body hitBody = null;
 
 	@Override public void create () {
 		// setup the camera. In Box2D we operate on a

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FFTTest.java
Patch:
@@ -61,14 +61,14 @@ private static float sum (float samples[]) {
 		return sum;
 	}
 
-	@SuppressWarnings("unused") private static float sum (FloatBuffer buffer) {
+	private static float sum (FloatBuffer buffer) {
 		float sum = 0;
 		for (int i = 1; i < SAMPLES / 2 + 1; i++)
 			sum += buffer.get(i) * 2 / SAMPLES;
 		return sum;
 	}
 
-	@SuppressWarnings("unused") private static void createFlat (float samples[], ShortBuffer shortSamples) {
+	private static void createFlat (float samples[], ShortBuffer shortSamples) {
 		for (int i = 0; i < samples.length; i++) {
 			samples[i] = 1;
 			shortSamples.put(Short.MAX_VALUE);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureRenderTest.java
Patch:
@@ -157,7 +157,7 @@ private static class SimpleRect {
 		public float height;
 		public float width;
 
-		private SimpleRect (int index, float x, float y, float width, float height) {
+		SimpleRect (int index, float x, float y, float width, float height) {
 			this.index = index;
 			this.x = x;
 			this.y = y;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/CollisionFiltering.java
Patch:
@@ -27,7 +27,7 @@ public class CollisionFiltering extends Box2DTest {
 	private final static short k_smallGroup = 1;
 	private final static short k_largeGroup = -1;
 
-	@SuppressWarnings("unused") private final static short k_defaultCategory = 0x0001;
+	private final static short k_defaultCategory = 0x0001;
 	private final static short k_triangleCategory = 0x0002;
 	private final static short k_boxCategory = 0x0004;
 	private final static short k_circleCategory = 0x0008;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidSound.java
Patch:
@@ -38,8 +38,8 @@ final class AndroidSound implements Sound {
 	}
 
 	@Override public void play (float volume) {
-		int streamVolume = manager.getStreamVolume(AudioManager.STREAM_MUSIC);
-		soundPool.play(soundId, streamVolume * volume, streamVolume * volume, 1, 0, 1);
+//		int streamVolume = manager.getStreamVolume(AudioManager.STREAM_MUSIC);
+		soundPool.play(soundId, volume, volume, 1, 0, 1);
 	}
 
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -57,7 +57,7 @@ public class SoundTest extends GdxTest implements InputProcessor {
 	}
 
 	@Override public boolean touchDown (int x, int y, int pointer) {
-		sound.play();
+		sound.play(0.5f);
 		return false;
 	}
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglAudio.java
Patch:
@@ -121,7 +121,7 @@ public boolean writeSamples (int numSamples, float[] buffer) {
 		try {
 			JoglMusic music = new JoglMusic(((JoglFileHandle)file));
 			return music;
-		} catch (Exception e) {
+		} catch (Throwable e) {
 			throw new GdxRuntimeException("Couldn't create Music instance from file '" + file + "'", e);
 		}
 	}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAudio.java
Patch:
@@ -115,7 +115,7 @@ public Music newMusic (FileHandle file) {
 		try {
 			LwjglMusic music = new LwjglMusic(((LwjglFileHandle)file));
 			return music;
-		} catch (Exception e) {
+		} catch (Throwable e) {
 			throw new GdxRuntimeException("Couldn't create Music instance from file '" + file + "'", e);
 		}
 	}

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -32,6 +32,7 @@
 import android.view.inputmethod.InputMethodManager;
 import android.widget.EditText;
 
+import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.InputProcessor;
 import com.badlogic.gdx.utils.Pool;
@@ -308,7 +309,7 @@ public boolean onKey(View v, int keyCode, android.view.KeyEvent e) {
 				event.type = KeyEvent.KEY_TYPED;
 				keyEvents.add(event);
 				
-				keys.remove(event.keyCode);
+				keys.remove(e.getKeyCode());
 			}
 		}
 

File: extensions/hiero/src/com/badlogic/gdx/hiero/unicodefont/GlyphPage.java
Patch:
@@ -156,6 +156,9 @@ private void renderGlyph (Glyph glyph, int width, int height) {
 			glyph.setShape(null); // The shape will never be needed again.
 		}
 
+		width = Math.min(width, texture.getWidth());
+		height = Math.min(height, texture.getHeight());
+
 		WritableRaster raster = scratchImage.getRaster();
 		int[] row = new int[width];
 		for (int y = 0; y < height; y++) {

File: extensions/hiero/src/com/badlogic/gdx/hiero/unicodefont/GlyphPage.java
Patch:
@@ -137,7 +137,6 @@ int loadGlyphs (List glyphs, int maxGlyphsToLoad) {
 	 * Loads a single glyph to the backing texture, if it fits.
 	 */
 	private void renderGlyph (Glyph glyph, int width, int height) {
-		System.out.println(glyph.getCodePoint());
 		// Draw the glyph to the scratch image using Java2D.
 		scratchGraphics.setComposite(AlphaComposite.Clear);
 		scratchGraphics.fillRect(0, 0, MAX_GLYPH_SIZE, MAX_GLYPH_SIZE);

File: extensions/hiero/src/com/badlogic/gdx/hiero/unicodefont/UnicodeFont.java
Patch:
@@ -461,13 +461,13 @@ public boolean isMissing () {
 
 	private Rectangle getGlyphBounds (GlyphVector vector, int index, int codePoint) {
 		Rectangle bounds;
+		bounds = vector.getGlyphPixelBounds(index, GlyphPage.renderContext, 0, 0);
 		if (nativeRendering) {
-			if (codePoint == '\n')
+			if (bounds.width == 0 || bounds.height == 0)
 				bounds = new Rectangle();
 			else
 				bounds = metrics.getStringBounds("" + (char)codePoint, GlyphPage.scratchGraphics).getBounds();
-		} else
-			bounds = vector.getGlyphPixelBounds(index, GlyphPage.renderContext, 0, 0);
+		}
 		if (codePoint == ' ') bounds.width = spaceWidth;
 		return bounds;
 	}

File: extensions/hiero/src/com/badlogic/gdx/hiero/unicodefont/GlyphPage.java
Patch:
@@ -137,6 +137,7 @@ int loadGlyphs (List glyphs, int maxGlyphsToLoad) {
 	 * Loads a single glyph to the backing texture, if it fits.
 	 */
 	private void renderGlyph (Glyph glyph, int width, int height) {
+		System.out.println(glyph.getCodePoint());
 		// Draw the glyph to the scratch image using Java2D.
 		scratchGraphics.setComposite(AlphaComposite.Clear);
 		scratchGraphics.fillRect(0, 0, MAX_GLYPH_SIZE, MAX_GLYPH_SIZE);

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * <p>
  * An
- * <code>Application<code> is the main entry point of your project. It sets up a window and 
+ * <code>Application</code> is the main entry point of your project. It sets up a window and 
  * rendering surface and manages the different aspects of your application, namely 
  * {@link Graphics}, {@link Audio}, {@link Input} and {@link Files}. Think of an Application 
  * being equivalent to a JFrame of Activity.

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -23,10 +23,10 @@
  * </p>
  * 
  * <p>
- * An application can either be a desktop application ({@link JoglApplication},
- * {@link LwjglApplication} found in gdx-backends-jogl.jar and
+ * An application can either be a desktop application JoglApplication,
+ * LwjglApplication found in gdx-backends-jogl.jar and
  * gdx-backends-lwjgl.jar respectively), or an Android application
- * {@link AndroidApplication} found in gdx-backends-android.jar). Each
+ * AndroidApplication found in gdx-backends-android.jar). Each
  * application class has it's own startup and initialization methods. Please
  * refer to their documentation for more information.
  * </p>

File: gdx/src/com/badlogic/gdx/graphics/BitmapFont.java
Patch:
@@ -79,7 +79,7 @@ public class BitmapFont {
 	 * the gdx jar file. This is here to get you up and running quickly.
 	 */
 	public BitmapFont() {
-		
+
 		this(new FileHandle() {
 			@Override
 			public String getPath() {

File: gdx/src/com/badlogic/gdx/graphics/ImmediateModeRenderer.java
Patch:
@@ -22,10 +22,10 @@
 
 /**
  * An ImmediateModeRenderer allows you to perform immediate mode rendering as you were accustomed to in your desktop OpenGL
- * environment. In order to draw something you first have to call {@link ImmediateModeRenderer.begin()} with the primitive type
+ * environment. In order to draw something you first have to call {@link ImmediateModeRenderer#begin(int)} with the primitive type
  * you want to render. Next you specify as many vertices as you want by first defining the vertex color, normal and texture
  * coordinates followed by the vertex position which finalizes the definition of a single vertex. When you are done specifying the
- * geometry you have to call {@link ImmediateModeRenderer.end()} to make the renderer render the geometry. Internally the renderer
+ * geometry you have to call {@link ImmediateModeRenderer#end()} to make the renderer render the geometry. Internally the renderer
  * uses vertex arrays to render the provided geometry. This is not the best performing way to do this so use this class only for
  * non performance critical low vertex count geometries while debugging.
  * 
@@ -69,7 +69,6 @@ public class ImmediateModeRenderer {
 
 	/**
 	 * Constructs a new ImmediateModeRenderer
-	 * @param gl
 	 */
 	public ImmediateModeRenderer () {
 		if (Gdx.graphics.isGL20Available())

File: gdx/src/com/badlogic/gdx/graphics/TextureRegion.java
Patch:
@@ -2,7 +2,9 @@
 package com.badlogic.gdx.graphics;
 
 /**
- * A TextureRegion defines a rectangular area in a texture given in pixels.
+ * A TextureRegion defines a rectangular area in a texture given in pixels. The
+ * coordinate system used has its origin in the upper left corner with the x-axis
+ * pointing to the left and the y axis pointing downwards.
  * 
  * @author mzechner
  * 

File: gdx/src/com/badlogic/gdx/utils/IntHashMap.java
Patch:
@@ -163,6 +163,7 @@ class EntryIterable implements Iterable<T> {
 				return true;
 			}
 
+			@SuppressWarnings("synthetic-access")
 			private boolean loadNextEntry () {
 				while (true) {
 					currIndex++;

File: gdx/src/com/badlogic/gdx/utils/LongHashMap.java
Patch:
@@ -166,6 +166,7 @@ class EntryIterable implements Iterable<T> {
 				return true;
 			}
 
+			@SuppressWarnings("synthetic-access")
 			private boolean loadNextEntry () {
 				while (true) {
 					currIndex++;

File: gdx/src/com/badlogic/gdx/physics/box2d/PolygonShape.java
Patch:
@@ -93,13 +93,12 @@ public int getVertexCount () {
 
 	private native int jniGetVertexCount (long addr);
 
+	private static float[] verts = new float[2];
 	/**
 	 * Returns the vertex at the given position.
 	 * @param index the index of the vertex 0 <= index < getVertexCount( )
 	 * @param vertex vertex
 	 */
-	private static float[] verts = new float[2];
-
 	public void getVertex (int index, Vector2 vertex) {
 		jniGetVertex(addr, index, verts);
 		vertex.x = verts[0];

File: gdx/src/com/badlogic/gdx/math/Vector3.java
Patch:
@@ -112,7 +112,7 @@ public Vector3 cpy () {
 	/**
 	 * NEVER EVER SAVE THIS REFERENCE!
 	 * 
-	 * @return
+	 * @return a temporary copy of this vector
 	 */
 	public Vector3 tmp () {
 		return tmp.set(this);
@@ -121,7 +121,7 @@ public Vector3 tmp () {
 	/**
 	 * NEVER EVER SAVE THIS REFERENCE!
 	 * 
-	 * @return
+	 * @return a temporary copy of this vector
 	 */
 	public Vector3 tmp2 () {
 		return tmp2.set(this);
@@ -130,7 +130,7 @@ public Vector3 tmp2 () {
 	/**
 	 * NEVER EVER SAVE THIS REFERENCE!
 	 * 
-	 * @return
+	 * @return a temporary copy of this vector
 	 */
 	Vector3 tmp3 () {
 		return tmp3.set(this);

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglMusic.java
Patch:
@@ -13,7 +13,7 @@
 
 package com.badlogic.gdx.backends.jogl;
 
-import java.io.File;
+import java.io.BufferedInputStream;
 import java.io.IOException;
 
 import javax.sound.sampled.AudioFormat;
@@ -58,7 +58,7 @@ public JoglMusic (JoglFileHandle handle) throws UnsupportedAudioFileException, I
 	}
 
 	private void openAudioInputStream () throws UnsupportedAudioFileException, IOException {
-		ain = AudioSystem.getAudioInputStream(handle.readFile());
+		ain = AudioSystem.getAudioInputStream(new BufferedInputStream(handle.readFile()));
 		AudioFormat baseFormat = ain.getFormat();
 		AudioFormat decodedFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, baseFormat.getSampleRate(), 16,
 			baseFormat.getChannels(), baseFormat.getChannels() * 2, baseFormat.getSampleRate(), false);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglMusic.java
Patch:
@@ -13,7 +13,7 @@
 
 package com.badlogic.gdx.backends.lwjgl;
 
-import java.io.File;
+import java.io.BufferedInputStream;
 import java.io.IOException;
 
 import javax.sound.sampled.AudioFormat;
@@ -58,7 +58,7 @@ public LwjglMusic (LwjglFileHandle handle) throws UnsupportedAudioFileException,
 	}
 
 	private void openAudioInputStream () throws UnsupportedAudioFileException, IOException {
-		ain = AudioSystem.getAudioInputStream(handle.readFile());
+		ain = AudioSystem.getAudioInputStream(new BufferedInputStream(handle.readFile()));
 		AudioFormat baseFormat = ain.getFormat();
 		AudioFormat decodedFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, baseFormat.getSampleRate(), 16,
 			baseFormat.getChannels(), baseFormat.getChannels() * 2, baseFormat.getSampleRate(), false);

File: gdx/src/com/badlogic/gdx/physics/box2d/Fixture.java
Patch:
@@ -105,8 +105,8 @@ public void setFilterData (Filter filter) {
 
 	public Filter getFilterData () {
 		jniGetFilterData(addr, tmp);
-		filter.categoryBits = tmp[0];
-		filter.maskBits = tmp[1];
+		filter.maskBits = tmp[0];
+		filter.categoryBits = tmp[1];
 		filter.groupIndex = tmp[2];
 		return filter;
 	}

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
Patch:
@@ -110,6 +110,7 @@ private void mainLoop () {
 		listener.pause();
 		listener.dispose();
 		Display.destroy();
+		audio.dispose();
 	}
 
 	@Override public Audio getAudio () {

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglApplication.java
Patch:
@@ -109,18 +109,19 @@ public void windowOpened(WindowEvent arg0) {
 			
 			@Override
 			public void windowIconified(WindowEvent arg0) {			
-				graphics.pause();								
+//				graphics.pause();								
 			}
 			
 			@Override
 			public void windowDeiconified(WindowEvent arg0) {
-				graphics.resume();
+//				graphics.resume();
 			}		
 			
 			@Override
 			public void windowClosing(WindowEvent arg0) {
 				graphics.pause();				
 				graphics.destroy();
+				audio.dispose();
 				frame.remove(graphics.getCanvas());
 			}				
 		});

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglGraphicsBase.java
Patch:
@@ -28,7 +28,7 @@
 
 public abstract class JoglGraphicsBase implements Graphics, GLEventListener {
 	GLCanvas canvas;
-	Animator animator;	
+	JoglAnimator animator;	
 	boolean useGL2;
 	long frameStart = System.nanoTime();
 	long lastFrameTime = System.nanoTime();
@@ -70,7 +70,7 @@ void create() {
 		lastFrameTime = frameStart;
 		deltaTime = 0;
 		mean.clear();	
-		animator = new Animator(canvas);
+		animator = new JoglAnimator(canvas);
 //		animator.setRunAsFastAsPossible(true);
 		animator.start();
 	}
@@ -88,7 +88,7 @@ void resume() {
 		lastFrameTime = frameStart;
 		deltaTime = 0;
 		mean.clear();			
-		animator = new Animator(canvas);
+		animator = new JoglAnimator(canvas);
 		animator.setRunAsFastAsPossible(true);
 		animator.start();
 	}	

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java
Patch:
@@ -310,7 +310,7 @@ public void dispose () {
 		invaderTexture.dispose();
 		backgroundTexture.dispose();
 		explosionTexture.dispose();
-		font.dispose();
+//		font.dispose();
 		explosionMesh.dispose();
 		shipMesh.dispose();
 		invaderMesh.dispose();

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -97,7 +97,7 @@ public TouchEvent createObject() {
 	private String text = null;
 	private TextInputListener textListener = null;
 	private Handler handle;
-	private final AndroidApplication app;
+	final AndroidApplication app;
 	private final AndroidTouchHandler touchHandler;
 	private int sleepTime = 0;
 	private boolean catchBack = false;
@@ -156,7 +156,6 @@ public float getAccelerometerZ() {
 	public void getTextInput(final TextInputListener listener,
 			final String title, final String text) {
 		handle.post(new Runnable() {
-			@SuppressWarnings("synthetic-access")
 			public void run() {
 				AlertDialog.Builder alert = new AlertDialog.Builder(
 						AndroidInput.this.app);

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidMultiTouchHandler.java
Patch:
@@ -73,7 +73,7 @@ public void onTouch (MotionEvent event, AndroidInput input) {
 	private void postTouchEvent (AndroidInput input, int type, int x, int y, int pointer) {
 		synchronized (input) {
 			TouchEvent event = input.freeTouchEvents.newObject();
-			event.pointer = 0;
+			event.pointer = pointer;
 			event.x = x;
 			event.y = y;
 			event.type = type;			

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglMusic.java
Patch:
@@ -33,15 +33,15 @@ private enum State {
 
 	private State state = State.Stopped;
 	private final Thread thread;
-	private final File file;
+	private final JoglFileHandle handle;
 	private AudioInputStream ain;
 	private final SourceDataLine line;
 	private final byte[] buffer;
 	private boolean looping = false;
 	private boolean disposed = false;
 
 	public JoglMusic (JoglFileHandle handle) throws UnsupportedAudioFileException, IOException, LineUnavailableException {
-		this.file = handle.getFile();
+		this.handle = handle;
 
 		openAudioInputStream();
 		AudioFormat audioFormat = ain.getFormat();
@@ -58,7 +58,7 @@ public JoglMusic (JoglFileHandle handle) throws UnsupportedAudioFileException, I
 	}
 
 	private void openAudioInputStream () throws UnsupportedAudioFileException, IOException {
-		ain = AudioSystem.getAudioInputStream(file);
+		ain = AudioSystem.getAudioInputStream(handle.readFile());
 		AudioFormat baseFormat = ain.getFormat();
 		AudioFormat decodedFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, baseFormat.getSampleRate(), 16,
 			baseFormat.getChannels(), baseFormat.getChannels() * 2, baseFormat.getSampleRate(), false);

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglSound.java
Patch:
@@ -50,7 +50,7 @@ public class JoglSound implements Sound {
 
 	public JoglSound (JoglAudio audio, JoglFileHandle file) throws UnsupportedAudioFileException, IOException {
 		this.audio = audio;
-		InputStream fin = new BufferedInputStream(new FileInputStream(file.getFile()));
+		InputStream fin = new BufferedInputStream(file.readFile());
 		AudioInputStream ain = AudioSystem.getAudioInputStream(fin);
 		AudioFormat baseFormat = ain.getFormat();
 		AudioFormat decodedFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, baseFormat.getSampleRate(), 16,

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglMusic.java
Patch:
@@ -33,15 +33,15 @@ private enum State {
 
 	private State state = State.Stopped;
 	private final Thread thread;
-	private final File file;
+	private final LwjglFileHandle handle;
 	private AudioInputStream ain;
 	private final SourceDataLine line;
 	private final byte[] buffer;
 	private boolean looping = false;
 	private boolean disposed = false;
 
 	public LwjglMusic (LwjglFileHandle handle) throws UnsupportedAudioFileException, IOException, LineUnavailableException {
-		this.file = handle.getFile();
+		this.handle = handle;
 
 		openAudioInputStream();
 		AudioFormat audioFormat = ain.getFormat();
@@ -58,7 +58,7 @@ public LwjglMusic (LwjglFileHandle handle) throws UnsupportedAudioFileException,
 	}
 
 	private void openAudioInputStream () throws UnsupportedAudioFileException, IOException {
-		ain = AudioSystem.getAudioInputStream(file);
+		ain = AudioSystem.getAudioInputStream(handle.readFile());
 		AudioFormat baseFormat = ain.getFormat();
 		AudioFormat decodedFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, baseFormat.getSampleRate(), 16,
 			baseFormat.getChannels(), baseFormat.getChannels() * 2, baseFormat.getSampleRate(), false);

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglSound.java
Patch:
@@ -50,7 +50,7 @@ final class LwjglSound implements Sound {
 
 	public LwjglSound (LwjglAudio audio, LwjglFileHandle file) throws UnsupportedAudioFileException, IOException {
 		this.audio = audio;
-		InputStream fin = new BufferedInputStream(new FileInputStream(file.getFile()));
+		InputStream fin = new BufferedInputStream(file.readFile());
 		AudioInputStream ain = AudioSystem.getAudioInputStream(fin);
 		AudioFormat baseFormat = ain.getFormat();
 		AudioFormat decodedFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, baseFormat.getSampleRate(), 16,

File: gdx/src/com/badlogic/gdx/Game.java
Patch:
@@ -8,7 +8,7 @@
  * screen is set.
  */
 public abstract class Game implements ApplicationListener {
-	Screen screen;
+	private Screen screen;
 
 	@Override public void dispose () {
 		if (screen != null) screen.hide();

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglFiles.java
Patch:
@@ -41,9 +41,6 @@ public FileHandle getFileHandle (String filename, FileType type) {
 		else
 			file = new File(this.externalPath + filename);
 
-		// BOZO - Hack.
-		if (!file.exists()) file = new File("resources/" + filename); 
-		
 		if (file.exists() == false)
 			throw new GdxRuntimeException("File '" + filename + "' doesn't exist");
 		else

File: demos/helloworld/gdx-helloworld/src/com/badlogic/gdx/helloworld/HelloWorld.java
Patch:
@@ -32,7 +32,7 @@ public class HelloWorld implements ApplicationListener {
 	Vector2 textPosition = new Vector2(100, 100);
 	Vector2 textDirection = new Vector2(1, 1);
 
-	@Override public void destroy () {
+	@Override public void dispose () {
 
 	}
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglInput.java
Patch:
@@ -36,7 +36,7 @@
  * @author mzechner
  * 
  */
-final class LwjglInput implements Input {
+public final class LwjglInput implements Input {
 	class KeyEvent {
 		static final int KEY_DOWN = 0;
 		static final int KEY_UP = 1;

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/ButtonTestDesktop.java
Patch:
@@ -1,10 +1,10 @@
 
 package com.badlogic.gdx.twl.tests;
 
-import com.badlogic.gdx.backends.jogl.JoglApplication;
+import com.badlogic.gdx.backends.desktop.LwjglApplication;
 
 public class ButtonTestDesktop {
 	public static void main (String[] argv) {
-		new JoglApplication(new ButtonTest(), "Button Test", 480, 320, false);
+		new LwjglApplication(new ButtonTest(), "Button Test", 480, 320, false);
 	}
 }

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/TextAreaTestDesktop.java
Patch:
@@ -1,10 +1,10 @@
 
 package com.badlogic.gdx.twl.tests;
 
-import com.badlogic.gdx.backends.jogl.JoglApplication;
+import com.badlogic.gdx.backends.desktop.LwjglApplication;
 
 public class TextAreaTestDesktop {
 	public static void main (String[] argv) {
-		new JoglApplication(new TextAreaTest(), "Twl Test", 480, 320, false);		
+		new LwjglApplication(new TextAreaTest(), "Twl Test", 480, 320, false);		
 	}
 }

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglApplication.java
Patch:
@@ -63,7 +63,8 @@ private void mainLoop( ) {
 		
 		int lastWidth = graphics.getWidth();
 		int lastHeight = graphics.getHeight();
-		
+
+		graphics.lastTime = System.nanoTime();
 		while(running && !Display.isCloseRequested()) {
 			graphics.updateTime();
 			input.update();

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglCanvas.java
Patch:
@@ -53,8 +53,6 @@ public Dimension getMinimumSize () {
 			}
 		};
 
-		canvas.setSize(100, 100);
-		canvas.setMinimumSize(new Dimension(2, 2));
 		graphics = new LwjglGraphics(canvas, useGL2);
 		audio = new LwjglAudio();
 		files = new LwjglFiles();

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/PNGDecoder.java
Patch:
@@ -64,7 +64,7 @@ public boolean isHasAlpha () {
 	private static final int PLTE = 0x504C5445;
 	private static final int tRNS = 0x74524E53;
 	private static final int IDAT = 0x49444154;
-	@SuppressWarnings("unused") private static final int IEND = 0x49454E44;
+	private static final int IEND = 0x49454E44;
 
 	private static final byte COLOR_GREYSCALE = 0;
 	private static final byte COLOR_TRUECOLOR = 2;

File: extensions/particle-editor/src/com/badlogic/gdx/graphics/particles/GradientPanel.java
Patch:
@@ -136,8 +136,8 @@ public void setColor (Color color) {
 	void updateColor () {
 		Color color = new Color(Color.HSBtoRGB(hueSlider.getPercentage(), 1 - saturationSlider.getPercentage(), 1));
 		lightnessSlider.setColors(new Color[] {color, Color.black});
-		color = new Color(Color.HSBtoRGB(hueSlider.getPercentage(), 1 - saturationSlider.getPercentage(), 1 - lightnessSlider
-			.getPercentage()));
+		color = new Color(Color.HSBtoRGB(hueSlider.getPercentage(), 1 - saturationSlider.getPercentage(),
+			1 - lightnessSlider.getPercentage()));
 		colorPanel.setBackground(color);
 		gradientEditor.setColor(color);
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglFiles.java
Patch:
@@ -41,6 +41,9 @@ public FileHandle getFileHandle (String filename, FileType type) {
 		else
 			file = new File(this.externalPath + filename);
 
+		// BOZO - Hack.
+		if (!file.exists()) file = new File("resources/" + filename); 
+		
 		if (file.exists() == false)
 			throw new GdxRuntimeException("File '" + filename + "' doesn't exist");
 		else

File: extensions/particle-editor/src/com/badlogic/gdx/graphics/particles/CountPanel.java
Patch:
@@ -22,9 +22,7 @@ public CountPanel (final ParticleEditor editor) {
 		maxSpinner.setValue(editor.getEmitter().getMaxParticleCount());
 		maxSpinner.addChangeListener(new ChangeListener() {
 			public void stateChanged (ChangeEvent event) {
-				synchronized (editor.effect) {
 					editor.getEmitter().setMaxParticleCount((Integer)maxSpinner.getValue());
-				}
 			}
 		});
 

File: demos/invaders/gdx-invaders-android/src/com/badlogic/gdxinvaders/GdxInvadersAndroid.java
Patch:
@@ -11,7 +11,6 @@ public class GdxInvadersAndroid extends AndroidApplication {
 	@Override public void onCreate (Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-		initialize(false, 20);
-		getGraphics().setRenderListener(new GdxInvaders());
+		initialize(new GdxInvaders(),false, 20);		
 	}
 }

File: demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvadersDesktop.java
Patch:
@@ -13,7 +13,7 @@
 
 package com.badlogic.gdxinvaders;
 
-import com.badlogic.gdx.backends.desktop.JoglApplication;
+import com.badlogic.gdx.backends.jogl.JoglApplication;
 
 /**
  * Entry point for desktop version of Gdx Invaders. Constructs a JoglApplication and registers the renderer.
@@ -22,7 +22,6 @@
  */
 public class GdxInvadersDesktop {
 	public static void main (String[] argv) {
-		JoglApplication app = new JoglApplication("Gdx Invaders", 480, 320, false);
-		app.getGraphics().setRenderListener(new GdxInvaders());
+		new JoglApplication(new GdxInvaders(),"Gdx Invaders", 480, 320, false);		
 	}
 }

File: demos/helloworld/gdx-helloworld-android/src/com/badlogic/gdx/GDXHelloWorld.java
Patch:
@@ -21,7 +21,6 @@
 public class GDXHelloWorld extends AndroidApplication {
 	@Override public void onCreate (Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
-		initialize(false);
-		getGraphics().setRenderListener(new HelloWorld());
+		initialize(new HelloWorld(), false);		
 	}
 }

File: demos/helloworld/gdx-helloworld/src/com/badlogic/gdx/helloworld/HelloWorldDesktop.java
Patch:
@@ -13,11 +13,10 @@
 
 package com.badlogic.gdx.helloworld;
 
-import com.badlogic.gdx.backends.desktop.JoglApplication;
+import com.badlogic.gdx.backends.jogl.JoglApplication;
 
 public class HelloWorldDesktop {
 	public static void main (String[] argv) {
-		JoglApplication app = new JoglApplication("Hello World", 480, 320, false);
-		app.getGraphics().setRenderListener(new HelloWorld());
+		new JoglApplication(new HelloWorld(), "Hello World", 480, 320, false);		
 	}
 }

File: extensions/hiero/src/com/badlogic/gdx/hiero/Hiero.java
Patch:
@@ -1180,8 +1180,7 @@ public void render () {
 			int viewHeight = Gdx.graphics.getHeight();
 			if (viewWidth != glCanvas.getWidth() || viewHeight != glCanvas.getHeight()) {
 				viewWidth = Math.max(1, glCanvas.getWidth());
-				viewHeight = Math.max(1, glCanvas.getHeight());
-				app.setSize(viewWidth, viewHeight);
+				viewHeight = Math.max(1, glCanvas.getHeight());				
 			}
 
 			if (newUnicodeFont != null) {

File: extensions/particle-editor/src/com/badlogic/gdx/graphics/particles/ParticleEditor.java
Patch:
@@ -256,6 +256,7 @@ public void create () {
 		
 		@Override
 		public void resize(int width, int height) {
+			Gdx.gl.glViewport(0, 0, width, height);
 			spriteBatch.getProjectionMatrix().setToOrtho(0, width, height, 0, 0, 1);
 
 			synchronized (effect) {
@@ -269,8 +270,7 @@ public void render () {
 				int viewHeight = Gdx.graphics.getHeight();
 				if (viewWidth != glCanvas.getWidth() || viewHeight != glCanvas.getHeight()) {
 					viewWidth = Math.max(1, glCanvas.getWidth());
-					viewHeight = Math.max(1, glCanvas.getHeight());
-					app.setSize(viewWidth, viewHeight);
+					viewHeight = Math.max(1, glCanvas.getHeight());					
 				}
 
 				float delta = Gdx.graphics.getDeltaTime();

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglApplication.java
Patch:
@@ -46,6 +46,7 @@ public LwjglApplication(ApplicationListener listener, String title, int width, i
 	private void initialize() {
 		LwjglNativesLoader.load();
 		mainLoopThread = new Thread("LWJGL Application") {
+			@SuppressWarnings("synthetic-access")
 			public void run () {				
 				LwjglApplication.this.mainLoop();							
 			}

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglApplication.java
Patch:
@@ -94,7 +94,7 @@ public void windowOpened(WindowEvent arg0) {
 			
 			@Override
 			public void windowIconified(WindowEvent arg0) {			
-				graphics.pause();				
+				graphics.pause();								
 			}
 			
 			@Override

File: extensions/twl/gdx-twl-tests-android/src/com/badlogic/gdx/twl/TextAreaTest.java
Patch:
@@ -20,7 +20,6 @@
 public class TextAreaTest extends AndroidApplication {
 	public void onCreate (Bundle bundle) {
 		super.onCreate(bundle);
-		initialize(false);
-		getGraphics().setRenderListener(new com.badlogic.gdx.twl.tests.TextAreaTest());
+		initialize(new com.badlogic.gdx.twl.tests.TextAreaTest(), false);		
 	}
 }

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/ButtonTestDesktop.java
Patch:
@@ -1,11 +1,10 @@
 
 package com.badlogic.gdx.twl.tests;
 
-import com.badlogic.gdx.backends.desktop.JoglApplication;
+import com.badlogic.gdx.backends.jogl.JoglApplication;
 
 public class ButtonTestDesktop {
 	public static void main (String[] argv) {
-		JoglApplication app = new JoglApplication("Button Test", 480, 320, false);
-		app.getGraphics().setRenderListener(new ButtonTest());
+		new JoglApplication(new ButtonTest(), "Button Test", 480, 320, false);
 	}
 }

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/TextAreaTestDesktop.java
Patch:
@@ -1,11 +1,10 @@
 
 package com.badlogic.gdx.twl.tests;
 
-import com.badlogic.gdx.backends.desktop.JoglApplication;
+import com.badlogic.gdx.backends.jogl.JoglApplication;
 
 public class TextAreaTestDesktop {
 	public static void main (String[] argv) {
-		JoglApplication app = new JoglApplication("Twl Test", 480, 320, false);
-		app.getGraphics().setRenderListener(new TextAreaTest());
+		new JoglApplication(new TextAreaTest(), "Twl Test", 480, 320, false);		
 	}
 }

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/renderer/TwlInputListener.java
Patch:
@@ -2,7 +2,6 @@
 package com.badlogic.gdx.twl.renderer;
 
 import com.badlogic.gdx.InputProcessor;
-import com.badlogic.gdx.RenderListener;
 
 import de.matthiasmann.twl.GUI;
 

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/renderer/TwlRenderer.java
Patch:
@@ -241,8 +241,7 @@ public InputStream getInputStream () {
 			gui.applyTheme(ThemeManager.createThemeManager(themeURL, renderer));
 		} catch (IOException ex) {
 			throw new GdxRuntimeException("Error loading theme: " + themeFile, ex);
-		}
-		Gdx.input.addInputListener(new TwlInputListener(gui));
+		}		
 		return gui;
 	}
 }

File: tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglTestStarter.java
Patch:
@@ -15,7 +15,7 @@
 import javax.swing.JScrollPane;
 import javax.swing.ListSelectionModel;
 
-import com.badlogic.gdx.backends.desktop.LwjglApplication;
+import com.badlogic.gdx.backends.desktop.LwjglApplicationNew;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.tests.utils.GdxTests;
 
@@ -43,8 +43,7 @@ public void mouseClicked (MouseEvent event) {
 				@Override public void actionPerformed (ActionEvent e) {
 					String testName = (String)list.getSelectedValue();
 					GdxTest test = GdxTests.newTest(testName);
-					LwjglApplication app = new LwjglApplication(testName, 480, 320, test.needsGL20());
-					app.getGraphics().setRenderListener(test);
+					new LwjglApplicationNew(test,testName, 480, 320, test.needsGL20());					
 				}
 			});
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglAudio.java
Patch:
@@ -11,7 +11,7 @@
  * governing permissions and limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.backends.desktop;
+package com.badlogic.gdx.backends.jogl;
 
 import java.util.ArrayList;
 import java.util.Iterator;

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglAudioDevice.java
Patch:
@@ -11,7 +11,7 @@
  * governing permissions and limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.backends.desktop;
+package com.badlogic.gdx.backends.jogl;
 
 import javax.sound.sampled.AudioFormat;
 import javax.sound.sampled.AudioSystem;

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglAudioRecorder.java
Patch:
@@ -11,7 +11,7 @@
  * governing permissions and limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.backends.desktop;
+package com.badlogic.gdx.backends.jogl;
 
 import javax.sound.sampled.AudioFormat;
 import javax.sound.sampled.AudioFormat.Encoding;

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglFileHandle.java
Patch:
@@ -11,7 +11,7 @@
  * governing permissions and limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.backends.desktop;
+package com.badlogic.gdx.backends.jogl;
 
 import java.io.File;
 import java.io.FileInputStream;

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglFiles.java
Patch:
@@ -11,7 +11,7 @@
  * governing permissions and limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.backends.desktop;
+package com.badlogic.gdx.backends.jogl;
 
 import java.io.File;
 import java.io.FileInputStream;

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglGL10.java
Patch:
@@ -11,11 +11,9 @@
  * governing permissions and limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.backends.desktop;
+package com.badlogic.gdx.backends.jogl;
 
 import java.nio.Buffer;
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglGL11.java
Patch:
@@ -11,15 +11,14 @@
  * governing permissions and limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.backends.desktop;
+package com.badlogic.gdx.backends.jogl;
 
 import java.nio.Buffer;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 
 import javax.media.opengl.GL;
 
-import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.GL11;
 
 /**

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglGL20.java
Patch:
@@ -11,7 +11,7 @@
  * governing permissions and limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.backends.desktop;
+package com.badlogic.gdx.backends.jogl;
 
 import java.nio.Buffer;
 import java.nio.ByteBuffer;

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglMusic.java
Patch:
@@ -11,7 +11,7 @@
  * governing permissions and limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.backends.desktop;
+package com.badlogic.gdx.backends.jogl;
 
 import java.io.File;
 import java.io.IOException;

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglPixmap.java
Patch:
@@ -11,7 +11,7 @@
  * governing permissions and limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.backends.desktop;
+package com.badlogic.gdx.backends.jogl;
 
 import java.awt.AlphaComposite;
 import java.awt.BasicStroke;

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglSound.java
Patch:
@@ -11,7 +11,7 @@
  * governing permissions and limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.backends.desktop;
+package com.badlogic.gdx.backends.jogl;
 
 import java.io.BufferedInputStream;
 import java.io.ByteArrayOutputStream;

File: backends/gdx-backend-jogl/src/com/badlogic/gdx/backends/jogl/JoglTexture.java
Patch:
@@ -11,7 +11,7 @@
  * governing permissions and limitations under the License.
  ******************************************************************************/
 
-package com.badlogic.gdx.backends.desktop;
+package com.badlogic.gdx.backends.jogl;
 
 import java.awt.image.BufferedImage;
 import java.io.InputStream;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglApplication.java
Patch:
@@ -166,7 +166,7 @@ public void setSize (int width, int height) {
 		this.width = width;
 		this.height = height;
 		for (RenderListener listener : listeners)
-			listener.surfaceChanged(getWidth(), getHeight());
+			listener.resized(getWidth(), getHeight());
 	}
 
 	void start () throws LWJGLException {
@@ -175,7 +175,7 @@ void start () throws LWJGLException {
 		setupDisplay();
 
 		for (RenderListener listener : listeners)
-			listener.surfaceCreated();
+			listener.created();
 		setSize(width, height);
 		graphics.lastTime = System.nanoTime();
 		for (RenderListener listener : listeners)

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglGraphics.java
Patch:
@@ -158,7 +158,7 @@ public void render () {
 		frames++;
 	}
 
-	public void surfaceCreated () {
+	public void created () {
 		String version = org.lwjgl.opengl.GL11.glGetString(GL11.GL_VERSION);
 		int major = Integer.parseInt("" + version.charAt(0));
 		int minor = Integer.parseInt("" + version.charAt(2));
@@ -187,7 +187,7 @@ public float getDeltaTime () {
 		return deltaTime;
 	}
 
-	public void surfaceChanged (int width, int height) {
+	public void resized (int width, int height) {
 	}
 
 	public GraphicsType getType () {

File: extensions/hiero/src/com/badlogic/gdx/hiero/unicodefont/UnicodeFontTest.java
Patch:
@@ -13,14 +13,14 @@
 public class UnicodeFontTest implements RenderListener {
 	private UnicodeFont unicodeFont;
 
-	public void surfaceCreated () {
+	public void created () {
 		unicodeFont = new UnicodeFont("c:/windows/fonts/arial.ttf", 48, false, false);
 		unicodeFont.getEffects().add(new ColorEffect(java.awt.Color.white));
 		// unicodeFont.addAsciiGlyphs();
 		// unicodeFont.loadGlyphs();
 	}
 
-	public void surfaceChanged (int width, int height) {
+	public void resized (int width, int height) {
 		glViewport(0, 0, width, height);
 		glScissor(0, 0, width, height);
 		glEnable(GL_SCISSOR_TEST);

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/ButtonTest.java
Patch:
@@ -23,7 +23,7 @@
 public class ButtonTest implements RenderListener {
 	GUI gui;
 
-	public void surfaceCreated () {
+	public void created () {
 		if (gui != null) return;
 
 		Button button = new Button("Click Me");
@@ -42,7 +42,7 @@ public void render () {
 		gui.update();
 	}
 
-	public void surfaceChanged (int width, int height) {
+	public void resized (int width, int height) {
 		gui.setSize();
 	}
 

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/TextAreaTest.java
Patch:
@@ -22,7 +22,7 @@
 public class TextAreaTest implements RenderListener {
 	GUI gui;
 
-	public void surfaceCreated () {
+	public void created () {
 		if (gui != null) return;
 
 		final HTMLTextAreaModel htmlText = new HTMLTextAreaModel();
@@ -75,7 +75,7 @@ public void render () {
 		gui.update();
 	}
 
-	public void surfaceChanged (int width, int height) {
+	public void resized (int width, int height) {
 		TwlRenderer.updateSize(gui);
 	}
 

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/renderer/TwlInputListener.java
Patch:
@@ -1,15 +1,15 @@
 
 package com.badlogic.gdx.twl.renderer;
 
-import com.badlogic.gdx.InputListener;
+import com.badlogic.gdx.InputProcessor;
 import com.badlogic.gdx.RenderListener;
 
 import de.matthiasmann.twl.GUI;
 
 /**
  * @author Nathan Sweet <misc@n4te.com>
  */
-public class TwlInputListener implements InputListener {
+public class TwlInputListener implements InputProcessor {
 	private final GUI gui;
 
 	public TwlInputListener (GUI gui) {

File: gdx/src/com/badlogic/gdx/InputAdapter.java
Patch:
@@ -2,13 +2,13 @@
 package com.badlogic.gdx;
 
 /**
- * An adapter class for {@link InputListener}. You can derive from this
+ * An adapter class for {@link InputProcessor}. You can derive from this
  * and only override what you are interested in.
  * 
  * @author mzechner
  *
  */
-public class InputAdapter implements InputListener {
+public class InputAdapter implements InputProcessor {
 	public boolean keyDown (int keycode) {
 		return false;
 	}

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -71,6 +71,8 @@ public Mesh (boolean isStatic, int maxVertices, int maxIndices, VertexAttribute.
 			indices = new IndexBufferObject(maxIndices);
 			isVertexArray = true;
 		}		
+		
+		meshes.add(this);
 	}
 
 	/**

File: tests/gdx-tests-android/src/com/badlogic/gdx/tests/android/GdxTestActivity.java
Patch:
@@ -16,7 +16,6 @@ public void onCreate (Bundle bundle) {
 		String testName = (String)extras.get("test");
 		
 		GdxTest test = GdxTests.newTest(testName);
-		initialize(test.needsGL20());
-		getGraphics().setRenderListener(test);
+		initialize(test, test.needsGL20());		
 	}
 }

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglApplication.java
Patch:
@@ -177,6 +177,7 @@ void start () throws LWJGLException {
 		for (RenderListener listener : listeners)
 			listener.surfaceCreated();
 		setSize(width, height);
+		graphics.lastTime = System.nanoTime();
 		for (RenderListener listener : listeners)
 			listener.render();
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglGraphics.java
Patch:
@@ -44,12 +44,13 @@ public final class LwjglGraphics implements Graphics, RenderListener {
 	private GL11 gl11;
 	private GL20 gl20;
 	private final boolean useGL2;
-	private long lastTime;
 	private float deltaTime = 0;
 	private long frameStart = 0;
 	private int frames = 0;
 	private int fps;
 
+	long lastTime;
+
 	LwjglGraphics (final LwjglApplication application, String title, int width, int height, boolean useGL2IfAvailable) {
 		this.app = application;
 		useGL2 = useGL2IfAvailable;
@@ -180,8 +181,6 @@ public void surfaceCreated () {
 		Gdx.gl10 = gl10;
 		Gdx.gl11 = gl11;
 		Gdx.gl20 = gl20;
-
-		lastTime = System.nanoTime();
 	}
 
 	public float getDeltaTime () {

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/TextAreaTest.java
Patch:
@@ -64,6 +64,7 @@ public void run () {
 				}
 				if (timer.isRunning()) return;
 				timer.start();
+				System.out.println();
 				speed = -speed;
 			}
 		});

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -147,7 +147,6 @@ public void setViewport (float width, float height) {
 	 */
 	public void update () {
 		proj.setToOrtho2D(0, 0, (viewportWidth * scale), (viewportHeight * scale), near, far);
-		model.idt();
 		model.setToTranslation(tmp.set((-position.x + (viewportWidth / 2) * scale), (-position.y + (viewportHeight / 2) * scale),
 			(-position.z)));
 		combined.set(proj);

File: gdx/src/com/badlogic/gdx/graphics/SpriteBatch.java
Patch:
@@ -200,6 +200,7 @@ private void createShader () {
 	 * @param transform the transformation matrix.
 	 */
 	public void begin () {
+		if (drawing) throw new IllegalStateException("you have to call SpriteBatch.end() first");
 		renderCalls = 0;	
 		
 		if (Gdx.graphics.isGL20Available() == false) {
@@ -243,6 +244,7 @@ public void begin () {
 	 * Finishes off rendering of the last batch of sprites
 	 */
 	public void end () {
+		if (!drawing) throw new IllegalStateException("you have to call SpriteBatch.begin() first");
 		if (idx > 0) renderMesh();
 		lastTexture = null;
 		idx = 0;

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObject.java
Patch:
@@ -271,9 +271,7 @@ public void bind(ShaderProgram shader) {
 	public void unbind() {
 		GL11 gl = Gdx.gl11;
 		int textureUnit = 0;
-		int numAttributes = attributes.size();
-
-		gl.glBindBuffer(GL11.GL_ARRAY_BUFFER, 0);
+		int numAttributes = attributes.size();	
 
 		for (int i = 0; i < numAttributes; i++) {
 
@@ -298,6 +296,8 @@ public void unbind() {
 						+ attribute.usage);
 			}
 		}
+		
+		gl.glBindBuffer(GL11.GL_ARRAY_BUFFER, 0);
 		isBound = false;
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/IndexBufferObjectClassTest.java
Patch:
@@ -27,7 +27,9 @@ public boolean needsGL20() {
 
 	@Override
 	public void dispose() {
-		
+		texture.dispose();
+		vbo.dispose();
+		ibo.dispose();
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/IndexBufferObjectShaderTest.java
Patch:
@@ -28,7 +28,9 @@ public boolean needsGL20() {
 
 	@Override
 	public void dispose() {
-
+		texture.dispose();
+		shader.dispose();
+		ibo.dispose();
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteBatchShaderTest.java
Patch:
@@ -27,7 +27,7 @@
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class SpriteBatchShaderTest implements GdxTest {
-	int SPRITES = 500;
+	int SPRITES = 400;
 
 	long startTime = System.nanoTime();
 	int frames = 0;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StageTest.java
Patch:
@@ -179,8 +179,8 @@ private void fillGroup (Group group, Texture texture) {
 		renderer.end();
 		Gdx.graphics.getGL10().glPointSize(4);
 
-		((Label)ui.findActor("fps")).text = "fps: " + Gdx.graphics.getFramesPerSecond() + ", actors " + images.size() + ", groups "
-			+ stage.getGroups().size();
+//		((Label)ui.findActor("fps")).text = "fps: " + Gdx.graphics.getFramesPerSecond() + ", actors " + images.size() + ", groups "
+//			+ stage.getGroups().size();
 		ui.render();
 	}
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VertexArrayClassTest.java
Patch:
@@ -27,7 +27,8 @@ public boolean needsGL20() {
 
 	@Override
 	public void dispose() {
-		
+		texture.dispose();
+		va.dispose();
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VertexBufferObjectClassTest.java
Patch:
@@ -27,7 +27,8 @@ public boolean needsGL20() {
 
 	@Override
 	public void dispose() {
-		
+		texture.dispose();
+		vbo.dispose();		
 	}
 
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VertexBufferObjectShaderTest.java
Patch:
@@ -29,7 +29,9 @@ public boolean needsGL20() {
 
 	@Override
 	public void dispose() {
-
+		texture.dispose();
+		vbo.dispose();
+		shader.dispose();
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java
Patch:
@@ -430,6 +430,7 @@ public void end () {
 	 */
 	public void dispose () {
 		GL20 gl = Gdx.graphics.getGL20();
+		gl.glUseProgram(0);
 		gl.glDeleteShader(vertexShaderHandle);
 		gl.glDeleteShader(fragmentShaderHandle);
 		gl.glDeleteProgram(program);

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObject.java
Patch:
@@ -335,13 +335,15 @@ public void dispose() {
 		if (Gdx.gl20 != null) {
 			tmpHandle.clear();
 			tmpHandle.put(bufferHandle);
+			tmpHandle.flip();
 			GL20 gl = Gdx.gl20;
 			gl.glBindBuffer(GL20.GL_ARRAY_BUFFER, 0);
 			gl.glDeleteBuffers(1, tmpHandle);
 			bufferHandle = 0;
 		} else {
 			tmpHandle.clear();
 			tmpHandle.put(bufferHandle);
+			tmpHandle.flip();
 			GL11 gl = Gdx.gl11;
 			gl.glBindBuffer(GL11.GL_ARRAY_BUFFER, 0);
 			gl.glDeleteBuffers(1, tmpHandle);

File: gdx/src/com/badlogic/gdx/graphics/glutils/VertexBufferObject.java
Patch:
@@ -64,12 +64,12 @@ public VertexBufferObject (boolean isStatic, int numVertices, VertexAttribute ..
 		if( Gdx.app.getType() == ApplicationType.Android && Gdx.app.getVersion() < 5 ) {
 			byteBuffer = ByteBuffer.allocate(this.attributes.vertexSize * numVertices);
 			byteBuffer.order(ByteOrder.nativeOrder());
-			isDirect = true;
+			isDirect = false;
 		}
 		else {
 			byteBuffer = ByteBuffer.allocateDirect(this.attributes.vertexSize * numVertices);
 			byteBuffer.order(ByteOrder.nativeOrder());
-			isDirect = false;
+			isDirect = true;
 		}		
 		buffer = byteBuffer.asFloatBuffer();
 		bufferHandle = createBufferObject();

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/renderer/TwlRenderer.java
Patch:
@@ -207,8 +207,8 @@ public TintStack push (float r, float g, float b, float a) {
 	static public void updateSize (GUI gui) {
 		Renderer renderer = gui.getRenderer();
 		if (!(renderer instanceof TwlRenderer)) throw new IllegalArgumentException("gui's renderer must be a TwlRenderer.");
-		((TwlRenderer)renderer).spriteBatch.getProjectionMatrix().setToOrtho2D(0, 0, Gdx.graphics.getWidth(),
-			Gdx.graphics.getHeight());
+		((TwlRenderer)renderer).spriteBatch.getProjectionMatrix().setToOrtho(0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight(),
+			0, 0, 1);
 		gui.setSize();
 	}
 

File: backends/gdx-backend-applet/src/com/badlogic/gdx/backends/applet/AppletInputMultiplexer.java
Patch:
@@ -39,7 +39,7 @@ private enum EventType {
 		MouseDown, MouseUp, MouseMoved, MouseDragged, KeyDown, KeyUp, KeyTyped
 	}
 
-	private class Event {
+	private static class Event {
 		public int x, y;
 		public int keycode;
 		public char keychar;

File: gdx/src/com/badlogic/gdx/Application.java
Patch:
@@ -15,20 +15,20 @@
 
 /**
  * <p>
- * An <code>Application<code> is the main class of your project. It manages the different
+ * An <code>Application<code> is the main class of your project. It sets up a window and rendering surfaces and manages the different
  * aspects of your application, namely {@link Graphics}, {@link Audio}, {@link Input}
  * and {@link Files}.
  * </p>
  * 
  * <p>
- * An application can either be a desktop application ({@link JoglApplication}), an applet ({@link AppletApplication} or and
+ * An application can either be a desktop application ({@link JoglApplication}, {@link LwjglApplication}), or an
  * Android application ({@link AndroidApplication}). Each application class has it's own startup and initialization methods.
  * Please refer to their documentation for more information.
  * </p>
  * 
  * <p>
  * {@link Graphics} offers you various methods to output visuals to the screen. This is achieved via OpenGL ES 1.0, 1.1 or 2.0
- * depending on what's available an the platform. On the desktop the features of OpenGL ES 2.0 are emulated via Jogl. On Android
+ * depending on what's available an the platform. On the desktop the features of OpenGL ES 2.0 are emulated via desktop OpenGL. On Android
  * the functionality of the Java OpenGL ES bindings is used. The Graphics object allows you to register a {@link RenderListener}
  * which will be called each time a new frame has to be drawn. This <code>RenderListener<code> usually 
  * houses you application logic.

File: gdx/src/com/badlogic/gdx/graphics/SpriteBatch.java
Patch:
@@ -152,7 +152,7 @@ public SpriteBatch () {
 	 * @param size the batch size in number of sprites
 	 */
 	public SpriteBatch (int size) {
-		this.mesh = new Mesh(false, false, size * 4, size * 6, new VertexAttribute(Usage.Position, 2, "a_position"),
+		this.mesh = new Mesh(false, size * 4, size * 6, new VertexAttribute(Usage.Position, 2, "a_position"),
 			new VertexAttribute(Usage.ColorPacked, 4, "a_color"), new VertexAttribute(Usage.TextureCoordinates, 2, "a_texCoords"));
 		projectionMatrix.setToOrtho2D(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 

File: gdx/src/com/badlogic/gdx/graphics/loaders/md5/MD5Renderer.java
Patch:
@@ -30,7 +30,7 @@ public MD5Renderer (MD5Model model, boolean useJni) {
 			this.vertices[i] = model.meshes[i].createVertexArray();
 		}
 
-		this.mesh = new Mesh(false, false, maxVertices, maxIndices, new VertexAttribute(VertexAttributes.Usage.Position, 3,
+		this.mesh = new Mesh(false, maxVertices, maxIndices, new VertexAttribute(VertexAttributes.Usage.Position, 3,
 			"a_position"), new VertexAttribute(VertexAttributes.Usage.TextureCoordinates, 2, "a_texCoords"));
 	}
 

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/Label.java
Patch:
@@ -8,8 +8,7 @@
 
 public class Label extends Actor {
 	public Font font;
-	public String text;
-	public final Color color = new Color(1, 1, 1, 1);
+	public String text;	
 
 	public Label (String name, Font font, String text) {
 		super(name);

File: tests/gdx-tests-applet/src/com/badlogic/gdx/SimpleTestApplet.java
Patch:
@@ -50,7 +50,7 @@ public void init () {
 		if (mesh == null) {
 			Gdx.input.addInputListener(this);
 
-			mesh = ModelLoader.loadObj(Gdx.files.readFile("data/cube.obj", FileType.Internal), true);
+			mesh = ModelLoader.loadObj(Gdx.files.readFile("data/cube.obj", FileType.Internal));
 			texture = Gdx.graphics.newTexture(Gdx.files.getFileHandle("data/badlogic.jpd", FileType.Internal), TextureFilter.MipMap,
 				TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FillrateTest.java
Patch:
@@ -29,7 +29,7 @@ public class FillrateTest implements GdxTest, InputListener {
 			texture = Gdx.graphics.newTexture(Gdx.files.getFileHandle("data/badlogicsmall.jpg", FileType.Internal),
 				TextureFilter.Linear, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge);
 
-			mesh = new Mesh(true, false, 4, 6, new VertexAttribute(VertexAttributes.Usage.Position, 2, "a_pos"),
+			mesh = new Mesh(true, 4, 6, new VertexAttribute(VertexAttributes.Usage.Position, 2, "a_pos"),
 				new VertexAttribute(VertexAttributes.Usage.TextureCoordinates, 2, "a_texCoords"));
 
 			float[] vertices = new float[4 * 4];

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FrameBufferTest.java
Patch:
@@ -70,7 +70,7 @@ public class FrameBufferTest implements GdxTest {
 
 	@Override public void surfaceCreated () {
 		if (mesh == null) {
-			mesh = new Mesh(true, false, 3, 0, new VertexAttribute(Usage.Position, 3, "a_Position"), new VertexAttribute(
+			mesh = new Mesh(true, 3, 0, new VertexAttribute(Usage.Position, 3, "a_Position"), new VertexAttribute(
 				Usage.ColorPacked, 4, "a_Color"), new VertexAttribute(Usage.TextureCoordinates, 2, "a_texCoords"));
 			float c1 = Color.toFloatBits(255, 0, 0, 255);
 			float c2 = Color.toFloatBits(255, 0, 0, 255);

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ManagedTest.java
Patch:
@@ -31,7 +31,7 @@ public class ManagedTest implements GdxTest {
 
 	@Override public void surfaceCreated () {
 		if (mesh == null) {
-			mesh = new Mesh(true, false, 4, 4, new VertexAttribute(Usage.Position, 2, "a_position"), new VertexAttribute(
+			mesh = new Mesh(true, 4, 4, new VertexAttribute(Usage.Position, 2, "a_position"), new VertexAttribute(
 				Usage.TextureCoordinates, 2, "a_texCoord"));
 			mesh.setVertices(new float[] {-0.5f, -0.5f, 0, 0, 0.5f, -0.5f, 1, 0, 0.5f, 0.5f, 1, 1, -0.5f, 0.5f, 0, 1});
 			mesh.setIndices(new short[] {0, 1, 2, 3});

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MeshMultitextureTest.java
Patch:
@@ -58,7 +58,7 @@ public class MeshMultitextureTest implements GdxTest {
 		tex2 = Gdx.graphics.newUnmanagedTexture(pixmap, TextureFilter.Linear, TextureFilter.Linear, TextureWrap.ClampToEdge,
 			TextureWrap.ClampToEdge);
 
-		mesh = new Mesh(true, false, 3, 0, new VertexAttribute(VertexAttributes.Usage.Color, 4, "a_Color"), new VertexAttribute(
+		mesh = new Mesh(true, 3, 0, new VertexAttribute(VertexAttributes.Usage.Color, 4, "a_Color"), new VertexAttribute(
 			VertexAttributes.Usage.TextureCoordinates, 2, "a_texCoords1"), new VertexAttribute(
 			VertexAttributes.Usage.TextureCoordinates, 2, "a_texCoords2"), new VertexAttribute(VertexAttributes.Usage.Position, 3,
 			"a_Position"));

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MeshShaderTest.java
Patch:
@@ -59,7 +59,7 @@ public class MeshShaderTest implements GdxTest {
 				System.exit(0);
 			}
 
-			mesh = new Mesh(true, false, 3, 3, new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(
+			mesh = new Mesh(true, 3, 3, new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(
 				Usage.Color, 4, "a_color"), new VertexAttribute(Usage.TextureCoordinates, 2, "a_texCoords"));
 
 			mesh.setVertices(new float[] {-0.5f, -0.5f, 0, 1, 0, 0, 1, 0, 0, 0.5f, -0.5f, 0, 0, 1, 0, 1, 1, 0, 0, 0.5f, 0, 0, 0, 1,

File: tests/gdx-tests/src/com/badlogic/gdx/tests/MeshTest.java
Patch:
@@ -49,7 +49,7 @@ public class MeshTest implements GdxTest {
 
 	@Override public void surfaceCreated () {
 		if (mesh == null) {
-			mesh = new Mesh(true, false, 3, 3, new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(
+			mesh = new Mesh(true, 3, 3, new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(
 				Usage.ColorPacked, 4, "a_color"), new VertexAttribute(Usage.TextureCoordinates, 2, "a_texCoords"));
 
 			mesh.setVertices(new float[] {-0.5f, -0.5f, 0, Color.toFloatBits(255, 0, 0, 255), 0, 0, 0.5f, -0.5f, 0,

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ObjTest.java
Patch:
@@ -44,7 +44,7 @@ public class ObjTest implements GdxTest, InputListener {
 		if (mesh == null) {
 			Gdx.input.addInputListener(this);
 
-			mesh = ModelLoader.loadObj(Gdx.files.readFile("data/cube.obj", FileType.Internal), true);
+			mesh = ModelLoader.loadObj(Gdx.files.readFile("data/cube.obj", FileType.Internal));
 			texture = Gdx.graphics.newTexture(Gdx.files.getFileHandle("data/badlogic.jpg", FileType.Internal), TextureFilter.MipMap,
 				TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge);
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Pong.java
Patch:
@@ -89,13 +89,13 @@ private void setupGraphics () {
 		// texture coordinates or indices. Note that we use a fixed
 		// point Mesh here. The paddle has dimensions (10, 60).
 		//
-		paddleMesh = new Mesh(true, false, 4, 0, new VertexAttribute(Usage.Position, 2, "a_position"));
+		paddleMesh = new Mesh(true, 4, 0, new VertexAttribute(Usage.Position, 2, "a_position"));
 		paddleMesh.setVertices(new float[] {-5, -30, 5, -30, 5, 30, -5, 30});
 
 		//
 		// We do the same for the ball which has dimensions (10,10)
 		//
-		ballMesh = new Mesh(true, false, 4, 0, new VertexAttribute(Usage.Position, 2, "a_position"));
+		ballMesh = new Mesh(true, 4, 0, new VertexAttribute(Usage.Position, 2, "a_position"));
 		ballMesh.setVertices(new float[] {-5, -5, 5, -5, 5, 5, -5, 5});
 
 		//

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TerrainTest.java
Patch:
@@ -38,7 +38,7 @@ public class TerrainTest implements GdxTest {
 			for (int i = 3; i < len; i += 4)
 				chunk.vertices[i] = Color.toFloatBits(rand.nextInt(255), rand.nextInt(255), rand.nextInt(255), 255);
 
-			mesh = new Mesh(true, false, chunk.vertices.length / 3, chunk.indices.length, new VertexAttribute(
+			mesh = new Mesh(true, chunk.vertices.length / 3, chunk.indices.length, new VertexAttribute(
 				VertexAttributes.Usage.Position, 3, "a_position"), new VertexAttribute(VertexAttributes.Usage.ColorPacked, 4,
 				"a_color"));
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureRenderTest.java
Patch:
@@ -52,7 +52,7 @@ public class TextureRenderTest implements GdxTest {
 		rects = createRects();
 
 		if (this.mesh == null)
-			this.mesh = new Mesh(false, false, 6 * 4 * rects.size(), 0, new VertexAttribute(VertexAttributes.Usage.Position, 2,
+			this.mesh = new Mesh(false, 6 * 4 * rects.size(), 0, new VertexAttribute(VertexAttributes.Usage.Position, 2,
 				"a_position"), new VertexAttribute(VertexAttributes.Usage.TextureCoordinates, 2, "a_texCoord"));
 
 		final float[] vertices = new float[rects.size() * 6 * 4];

File: tests/gdx-tests/src/com/badlogic/gdx/tests/WaterRipples.java
Patch:
@@ -62,7 +62,7 @@ public class WaterRipples implements GdxTest, InputListener {
 			curr = new float[WIDTH + 1][HEIGHT + 1];
 			intp = new float[WIDTH + 1][HEIGHT + 1];
 			vertices = new float[(WIDTH + 1) * (HEIGHT + 1) * 5];
-			mesh = new Mesh(false, false, (WIDTH + 1) * (HEIGHT + 1), WIDTH * HEIGHT * 6, new VertexAttribute(
+			mesh = new Mesh(false, (WIDTH + 1) * (HEIGHT + 1), WIDTH * HEIGHT * 6, new VertexAttribute(
 				VertexAttributes.Usage.Position, 3, "a_Position"), new VertexAttribute(VertexAttributes.Usage.TextureCoordinates, 2,
 				"a_texCoords"));
 			texture = Gdx.graphics.newTexture(Gdx.files.getFileHandle("data/stones.jpg", FileType.Internal), TextureFilter.Linear,

File: backends/gdx-backend-applet/src/com/badlogic/gdx/backends/applet/AppletFiles.java
Patch:
@@ -31,7 +31,7 @@ final class AppletFiles implements Files {
 	 * {@inheritDoc}
 	 */
 	@Override public FileHandle getFileHandle (String filename, FileType type) {
-		if (type == FileType.Absolut || type == FileType.External)
+		if (type == FileType.Absolute || type == FileType.External)
 			return null;
 		else
 			return new AppletFileHandle(filename);
@@ -55,7 +55,7 @@ final class AppletFiles implements Files {
 	 * {@inheritDoc}
 	 */
 	@Override public InputStream readFile (String fileName, FileType type) {
-		if (type == FileType.Absolut || type == FileType.External)
+		if (type == FileType.Absolute || type == FileType.External)
 			return null;
 		else
 			return new AppletFileHandle(fileName).getInputStream();

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglAudio.java
Patch:
@@ -97,7 +97,7 @@ public boolean writeSamples (int numSamples, float[] buffer) {
 			line = AudioSystem.getSourceDataLine(format);
 			line.open(format, 4410);
 			line.start();
-			thread = new Thread(this);
+			thread = new Thread(this, "LWJGL Audio");
 			thread.setDaemon(true);
 			thread.start();
 		} catch (Exception e) {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglMusic.java
Patch:
@@ -52,7 +52,7 @@ public LwjglMusic (LwjglFileHandle handle) throws UnsupportedAudioFileException,
 		ain.close();
 		ain = null;
 
-		thread = new Thread(this);
+		thread = new Thread(this, "LWJGL Music");
 		thread.setDaemon(true);
 		thread.start();
 	}

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/renderer/TwlRenderer.java
Patch:
@@ -111,7 +111,7 @@ public void endRendering () {
 	}
 
 	public void setClipRect (Rect rect) {
-		if (rendering) spriteBatch.renderMesh();
+		if (rendering) spriteBatch.flush();
 		if (rect == null) {
 			Gdx.gl.glDisable(GL10.GL_SCISSOR_TEST);
 			hasScissor = false;

File: gdx/src/com/badlogic/gdx/Files.java
Patch:
@@ -39,7 +39,7 @@ public interface Files {
 	 * 
 	 */
 	public enum FileType {
-		Internal, External, Absolut
+		Internal, External, Absolute
 	}
 
 	/**

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -123,9 +123,9 @@ public Mesh (boolean isStatic, boolean useFixedPoint, int maxVertices, int maxIn
 		} else {
 			useVBO = Gdx.graphics.isGL11Available() == true || Gdx.graphics.isGL20Available() == true;
 			if (useVBO) {
-				if (Gdx.app.getVersion() < 5)
-					isDirect = false;
-				else
+//				if (Gdx.app.getVersion() < 5)
+//					isDirect = false;
+//				else
 					isDirect = true;
 			} else
 				isDirect = true;

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -393,6 +393,7 @@ public void setVertices (int[] vertices, int offset, int count) {
 	 * @param indices the indices
 	 */
 	public void setIndices (short[] indices) {
+		this.indices.clear();
 		this.indices.put(indices);
 		this.indices.limit(indices.length);
 		this.indices.position(0);

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/TextAreaTest.java
Patch:
@@ -28,7 +28,7 @@ public void surfaceCreated () {
 		final HTMLTextAreaModel htmlText = new HTMLTextAreaModel();
 		TextArea textArea = new TextArea(htmlText);
 		htmlText
-			.setHtml("<div style='font-family:heading;text-align:center'>TWL TextAreaTest</div><a href='badlogic'><img src='badlogic' id='badlogic' style='float:right; margin:10px'/></a>Lorem ipsum dolor sit amet, douchebagus joglus. Sed fermentum gravida turpis, sit amet gravida justo laoreet non. Donec ultrices suscipit metus a mollis. Mollis varius egestas quisque feugiat pellentesque mi, quis scelerisque velit bibendum eget. Nulla orci in enim nisl mattis varius dignissim fringilla.<br/><br/><img src='twllogo' style='float:left; margin:10px'/>Curabitur purus leo, ultricies ut cursus eget, adipiscing in quam. Duis non velit vel mauris vulputate fringilla et quis.<br/><br/><div>Suspendisse lobortis iaculis tellus id fermentum. Integer fermentum varius pretium. Nullam libero magna, mattis vel placerat ac, dignissim sed lacus. Mauris varius libero id neque auctor a auctor odio fringilla.</div><br/><div>Mauris orci arcu, porta eget porttitor luctus, malesuada nec metus. Nunc fermentum viverra leo eu pretium. Curabitur vitae nibh massa, imperdiet egestas lectus. Nulla odio quam, lobortis eget fermentum non, faucibus ac mi. Morbi et libero nulla. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam sit amet rhoncus nulla. Morbi consectetur ante convallis ante tristique et porta ligula hendrerit. Donec rhoncus ornare augue, sit amet lacinia nulla auctor venenatis.</div><br/><div>Etiam semper egestas porta. Proin luctus porta faucibus. Curabitur sagittis, lorem nec imperdiet ullamcorper, sem risus consequat purus, non faucibus turpis lorem ut arcu. Nunc tempus lobortis enim vitae facilisis. Morbi posuere quam nec sem aliquam eleifend.</div>");
+			.setHtml("<div style='font-family:heading;text-align:center'>TWL TextAreaTest</div><a href='badlogic'><img src='badlogic' id='badlogic' style='float:right; margin:10px'/></a>Lorem ipsum dolor sit amet, douchebagus joglus. Sed fermentum gravida turpis, sit amet gravida justo laoreet non. Donec ultrices suscipit metus a mollis. Mollis varius egestas quisque feugiat pellentesque mi, quis scelerisque velit bibendum eget. Nulla orci in enim nisl mattis varius dignissim fringilla.<br/><br/><img src='twllogo' style='float:left; margin:10px'/>Curabitur purus leo, ultricies ut cursus eget, adipiscing in quam. Duis non velit vel mauris vulputate fringilla et quis.<br/><br/>Suspendisse lobortis iaculis tellus id fermentum. Integer fermentum varius pretium. Nullam libero magna, mattis vel placerat ac, dignissim sed lacus. Mauris varius libero id neque auctor a auctor odio fringilla.<br/><br/><div>Mauris orci arcu, porta eget porttitor luctus, malesuada nec metus. Nunc fermentum viverra leo eu pretium. Curabitur vitae nibh massa, imperdiet egestas lectus. Nulla odio quam, lobortis eget fermentum non, faucibus ac mi. Morbi et libero nulla. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam sit amet rhoncus nulla. Morbi consectetur ante convallis ante tristique et porta ligula hendrerit. Donec rhoncus ornare augue, sit amet lacinia nulla auctor venenatis.</div><br/><div>Etiam semper egestas porta. Proin luctus porta faucibus. Curabitur sagittis, lorem nec imperdiet ullamcorper, sem risus consequat purus, non faucibus turpis lorem ut arcu. Nunc tempus lobortis enim vitae facilisis. Morbi posuere quam nec sem aliquam eleifend.</div>");
 		ScrollPane scrollPane = new ScrollPane(textArea);
 		scrollPane.setFixed(ScrollPane.Fixed.HORIZONTAL);
 		FPSCounter fpsCounter = new FPSCounter(4, 2);

File: gdx/src/com/badlogic/gdx/graphics/SpriteBatch.java
Patch:
@@ -635,7 +635,7 @@ public void draw (Texture texture, float[] spriteVertices, int offset, int lengt
 		idx += length;
 	}
 
-	protected void renderMesh () {
+	public void renderMesh () {
 		if (idx == 0) return;
 
 		renderCalls++;

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/ButtonTest.java
Patch:
@@ -34,7 +34,7 @@ public void surfaceCreated () {
 		layout.setHorizontalGroup(layout.createParallelGroup().addWidgets(button, fpsCounter));
 		layout.setVerticalGroup(layout.createSequentialGroup().addWidget(button).addGap(5).addWidget(fpsCounter).addGap(5));
 
-		gui = TwlRenderer.createGUI(layout, Gdx.files.getFileHandle("data/widgets.xml", FileType.Internal));
+		gui = TwlRenderer.createGUI(layout, "data/widgets.xml", FileType.Internal);
 	}
 
 	public void render () {

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/TextAreaTest.java
Patch:
@@ -38,7 +38,7 @@ public void surfaceCreated () {
 		layout.setHorizontalGroup(layout.createParallelGroup().addWidgets(scrollPane, fpsCounter));
 		layout.setVerticalGroup(layout.createSequentialGroup().addWidget(scrollPane).addGap(5).addWidget(fpsCounter).addGap(5));
 
-		gui = TwlRenderer.createGUI(layout, Gdx.files.getFileHandle("data/widgets.xml", FileType.Internal));
+		gui = TwlRenderer.createGUI(layout, "data/widgets.xml", FileType.Internal);
 
 		textArea.addCallback(new TextArea.Callback() {
 			Timer timer;

File: extensions/twl/gdx-twl/src/com/badlogic/gdx/twl/renderer/GdxFont.java
Patch:
@@ -73,7 +73,7 @@ public int drawText (AnimationState as, int x, int y, CharSequence str, int star
 		x += fontState.offsetX;
 		y += fontState.offsetY + yOffset;
 		com.badlogic.gdx.graphics.Color color = renderer.getColor(fontState.color);
-		return bitmapFont.draw(renderer.spriteBatch, str, x, y, color);
+		return bitmapFont.draw(renderer.spriteBatch, str, x, y, color, start, end);
 	}
 
 	public int drawMultiLineText (AnimationState as, int x, int y, CharSequence str, int width,

File: gdx/src/com/badlogic/gdx/graphics/BitmapFont.java
Patch:
@@ -351,7 +351,7 @@ public int drawWrappedText (SpriteBatch spriteBatch, CharSequence str, int x, in
 		return numLines * lineHeight;
 	}
 
-	private void addToCache (BitmapFontCache cache, CharSequence str, int x, int y, float color, int start, int end) {
+	private int addToCache (BitmapFontCache cache, CharSequence str, int x, int y, float color, int start, int end) {
 		Glyph lastGlyph = null;
 		while (start < end) {
 			lastGlyph = getGlyph(str.charAt(start++));
@@ -371,6 +371,7 @@ private void addToCache (BitmapFontCache cache, CharSequence str, int x, int y,
 				x += g.xadvance;
 			}
 		}
+		return x;
 	}
 
 	/**
@@ -407,8 +408,7 @@ public void cacheText (BitmapFontCache cache, CharSequence str, int x, int y, Co
 		final float color = tint.toFloatBits();
 		cache.reset(end - start);
 		y += yOffset;
-		addToCache(cache, str, x, y, color, start, end);
-		cache.width = x;
+		cache.width = addToCache(cache, str, x, y, color, start, end);
 		cache.height = lineHeight;
 	}
 

File: extensions/twl/gdx-twl-tests/src/com/badlogic/gdx/twl/tests/TextAreaTest.java
Patch:
@@ -70,7 +70,7 @@ public void run () {
 	}
 
 	public void render () {
-		Gdx.graphics.getGL10().glClear(GL10.GL_COLOR_BUFFER_BIT);
+		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		gui.update();
 	}
 

File: gdx/src/com/badlogic/gdx/graphics/ImmediateModeRenderer.java
Patch:
@@ -172,7 +172,7 @@ public void vertex (float x, float y, float z) {
 	public void end () {
 		if (idxPos == 0) return;
 
-		GL10 gl = Gdx.graphics.getGL10();
+		GL10 gl = Gdx.gl10;
 		gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
 		positionsBuffer.clear();
 		positionsBuffer.put(positions, 0, idxPos);

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -527,7 +527,7 @@ private void renderVBO (int primitiveType, int offset, int count) {
 	}
 
 	private void renderVA (int primitiveType, int offset, int count) {
-		GL10 gl = Gdx.graphics.getGL10();
+		GL10 gl = Gdx.gl10;
 
 		int numAttributes = attributes.size();
 		int type = useFixedPoint ? GL11.GL_FIXED : GL11.GL_FLOAT;

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -162,7 +162,7 @@ public void update () {
 	 */
 	public void setMatrices () {
 		update();
-		GL10 gl = Gdx.graphics.getGL10();
+		GL10 gl = Gdx.gl10;
 		gl.glMatrixMode(GL10.GL_PROJECTION);
 		gl.glLoadMatrixf(getCombinedMatrix().val, 0);
 		gl.glMatrixMode(GL10.GL_MODELVIEW);

File: gdx/src/com/badlogic/gdx/graphics/PerspectiveCamera.java
Patch:
@@ -167,7 +167,7 @@ public void update () {
 	public void setMatrices () {
 		setViewport(Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		update();
-		GL10 gl = Gdx.graphics.getGL10();
+		GL10 gl = Gdx.gl10;
 		gl.glMatrixMode(GL10.GL_PROJECTION);
 		gl.glLoadMatrixf(getCombinedMatrix().val, 0);
 		gl.glMatrixMode(GL10.GL_MODELVIEW);

File: tests/gdx-tests-android/src/com/badlogic/gdx/GDXTester.java
Patch:
@@ -29,7 +29,7 @@ public class GDXTester extends ListActivity {
 		"Performance Test", "Mesh Shader Test", "SpriteBatch Test", "SpriteBatch Shader Test", "FrameBuffer Test",
 		"SpriteBatch Rotation Test", "Box2D Test", "Audio Recorder Test", "Box2D Test Collection", "Resources Test", "MD5 Test",
 		"Micro Benchmarks", "Multitouch Test", "BufferUtils Test", "Terrain Test", "Water Ripples", "Stage Test", "Windowed Test",
-		"Fillrate Test", "Alpha Test", "BitmapFont Test"};
+		"Fillrate Test", "Alpha Test", "BitmapFont Test", "BitmapFont Flip Test"};
 
 	@Override public void onCreate (Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
@@ -82,6 +82,7 @@ protected void onListItemClick (ListView l, View v, int position, long id) {
 		if (keyword.equals(items[36])) intent = new Intent(this, FillrateTest.class);
 		if (keyword.equals(items[37])) intent = new Intent(this, AlphaTest.class);
 		if (keyword.equals(items[38])) intent = new Intent(this, BitmapFontTest.class);
+		if (keyword.equals(items[39])) intent = new Intent(this, BitmapFontFlipTest.class);
 
 		startActivity(intent);
 	}

File: tests/gdx-tests-desktop/src/com/badlogic/gdx/tests/desktop/BitmapFontTest.java
Patch:
@@ -17,7 +17,7 @@
 
 public class BitmapFontTest {
 	public static void main (String[] argv) {
-		JoglApplication app = new JoglApplication("BitmapFont Test", 480, 320, false);
+		JoglApplication app = new JoglApplication("BitmapFont Flip Test", 480, 320, false);
 		app.getGraphics().setRenderListener(new com.badlogic.gdx.tests.BitmapFontTest());
 	}
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -101,7 +101,10 @@ protected void act( float delta )
 		{
 			action.act( delta );
 			if( action.isDone() )
+			{
+				action.finish();
 				actions.remove();
+			}
 		}
 	}
 	

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ObjTest.java
Patch:
@@ -49,8 +49,8 @@ public void surfaceCreated( )
 		{
 			Gdx.input.addInputListener( this );
 			
-			mesh = ModelLoader.loadObj( Gdx.files.readFile( "data/cube.obj", FileType.Internal ), true );			
-			texture = Gdx.graphics.newTexture( Gdx.files.getFileHandle( "data/badlogic.jpg", FileType.Internal), TextureFilter.MipMap, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge );					
+			mesh = ModelLoader.loadObj( Gdx.files.readFile( "data/scene.obj", FileType.Internal ), true );			
+			texture = Gdx.graphics.newTexture( Gdx.files.getFileHandle( "data/villager.png", FileType.Internal), TextureFilter.MipMap, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge );					
 			
 			cam = new PerspectiveCamera();
 			cam.getPosition().set( 2, 2, 2 );

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StageTest.java
Patch:
@@ -82,7 +82,7 @@ public void surfaceCreated()
 				stage.addActor( group );
 			}
 			
-			uiTexture = Gdx.graphics.newTexture( Gdx.files.getFileHandle( "data/uiTexture.png", FileType.Internal ),
+			uiTexture = Gdx.graphics.newTexture( Gdx.files.getFileHandle( "data/ui.png", FileType.Internal ),
 												 TextureFilter.Linear, TextureFilter.Linear, 
 												 TextureWrap.ClampToEdge, TextureWrap.ClampToEdge );
 			ui = new Stage( 480, 320, false );

File: tests/gdx-tests/src/com/badlogic/gdx/tests/UITest.java
Patch:
@@ -39,7 +39,7 @@ public void surfaceCreated()
 		{
 			Gdx.input.addInputListener( this );
 			
-			uiTexture = Gdx.graphics.newTexture( Gdx.files.getFileHandle( "data/uitexture.png", FileType.Internal ),
+			uiTexture = Gdx.graphics.newTexture( Gdx.files.getFileHandle( "data/ui.png", FileType.Internal ),
 												TextureFilter.Linear, TextureFilter.Linear,
 												TextureWrap.ClampToEdge, TextureWrap.ClampToEdge );
 			

File: tests/gdx-tests/src/com/badlogic/gdx/tests/StageTest.java
Patch:
@@ -75,8 +75,8 @@ public void surfaceCreated()
 				Group group = new Group( "group" + i );
 				group.x = (float)Math.random() * (stage.width() - NUM_SPRITES * (32 + SPACING));
 				group.y = (float)Math.random() * (stage.height() - NUM_SPRITES * (32 + SPACING));
-				group.refX = loc;
-				group.refY = loc;
+				group.originX = loc;
+				group.originY = loc;
 				
 				fillGroup( group, texture );
 				stage.addActor( group );
@@ -195,7 +195,7 @@ public void render()
 		{
 			renderer.color( 1, 0, 0, 1 );
 			Group group = stage.getRoot().getGroups().get(i);
-			renderer.vertex( group.x + group.refX, group.y + group.refY, 0 );
+			renderer.vertex( group.x + group.originX, group.y + group.originY, 0 );
 		}
 		renderer.end();
 		Gdx.graphics.getGL10().glPointSize( 4 );

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
Patch:
@@ -48,8 +48,8 @@ public abstract class Actor
 	public float y;
 	public float width;
 	public float height;
-	public float refX;
-	public float refY;
+	public float originX;
+	public float originY;
 	public float scaleX = 1;
 	public float scaleY = 1;
 	public float rotation;
@@ -118,7 +118,7 @@ public void clearActions( )
 	
 	public String toString( )
 	{
-		return name + ": [x=" + x + ", y=" + y + ", refX=" + refX + ", refY=" + refY + ", width=" + width + ", height=" + height + "]";
+		return name + ": [x=" + x + ", y=" + y + ", refX=" + originX + ", refY=" + originY + ", width=" + width + ", height=" + height + "]";
 	}
 	
 }

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/Label.java
Patch:
@@ -16,6 +16,8 @@ public Label( String name, Font font, String text )
 		super(name);
 		this.font = font;
 		this.text = text;
+		this.width = font.getStringWidth( text );
+		this.height = font.getLineHeight();
 	}
 	
 	@Override

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteBatchTest.java
Patch:
@@ -216,8 +216,7 @@ public void surfaceCreated( )
 		pixmap = Gdx.graphics.newPixmap(32, 32, Format.RGBA8888 );
 		pixmap.setColor(1, 1, 0, 0.5f );
 		pixmap.fill();
-//		texture2 = Gdx.graphics.newUnmanagedTexture( pixmap, TextureFilter.Nearest, TextureFilter.Nearest, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge );
-		texture2 = texture;
+		texture2 = Gdx.graphics.newUnmanagedTexture( pixmap, TextureFilter.Nearest, TextureFilter.Nearest, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge );		
 		pixmap.dispose();
 		
 		font = Gdx.graphics.newFont( "Arial", 32, FontStyle.Plain );

File: gdx/src/com/badlogic/gdx/graphics/SpriteBatch.java
Patch:
@@ -396,8 +396,8 @@ public void draw(Texture texture, float x, float y, float originX, float originY
 			x3 = cos * p3x - sin * p3y;
 			y3 = sin * p3x + cos * p3y;
 			
-			x4 = cos * p4x - sin * p4y;
-			y4 = sin * p4x + cos * p4y;			
+			x4 = x1 + (x3 - x2);
+			y4 = y3 - (y2 - y1);			
 		}
 		else
 		{

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteBatchTest.java
Patch:
@@ -118,7 +118,7 @@ private void renderNormal( )
 		
 		if( System.nanoTime() - startTime > 1000000000 )
 		{
-			Gdx.app.log( "SpriteBatch", "fps: " + frames + ", render calls: " + spriteBatch.renderCalls + ", " + begin + ", " + draw1 + ", " + draw2 + ", " + drawText + ", " + end );
+//			Gdx.app.log( "SpriteBatch", "fps: " + frames + ", render calls: " + spriteBatch.renderCalls + ", " + begin + ", " + draw1 + ", " + draw2 + ", " + drawText + ", " + end );
 			frames = 0;
 			startTime = System.nanoTime();
 		}
@@ -189,7 +189,7 @@ private void renderSprites( )
 		
 		if( System.nanoTime() - startTime > 1000000000 )
 		{
-			Gdx.app.log( "SpriteBatch", "fps: " + frames + ", render calls: " + spriteBatch.renderCalls + ", " + begin + ", " + draw1 + ", " + draw2 + ", " + drawText + ", " + end );
+//			Gdx.app.log( "SpriteBatch", "fps: " + frames + ", render calls: " + spriteBatch.renderCalls + ", " + begin + ", " + draw1 + ", " + draw2 + ", " + drawText + ", " + end );
 			frames = 0;
 			startTime = System.nanoTime();
 		}

File: gdx/src/com/badlogic/gdx/graphics/Sprite.java
Patch:
@@ -181,15 +181,15 @@ public void flip (boolean x, boolean y) {
 	 */
 	public void scrollTexture (float xAmount, float yAmount) {
 		float[] vertices = this.vertices;
-		if (xAmount > 0) {
+		if (xAmount != 0) {
 			float u = (vertices[U1] + xAmount) % 1;
 			float u2 = u + width / texture.getWidth();
 			vertices[U1] = u;
 			vertices[U2] = u;
 			vertices[U3] = u2;
 			vertices[U4] = u2;
 		}
-		if (yAmount > 0) {
+		if (yAmount != 0) {
 			float v = (vertices[V1] + yAmount) % 1;
 			float v2 = v + height / texture.getHeight();
 			vertices[V1] = v;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java
Patch:
@@ -238,6 +238,7 @@ protected boolean touchDown(float x, float y, int pointer)
 			point.x = x; point.y = y;
 			focusedActor.toLocalCoordinates( point );
 			focusedActor.touchDown( point.x, point.y, pointer );
+			return true;
 		}
 		
 		int len = children.size() - 1;
@@ -273,6 +274,7 @@ protected boolean touchUp(float x, float y, int pointer)
 			point.x = x; point.y = y;
 			focusedActor.toLocalCoordinates( point );
 			focusedActor.touchUp( point.x, point.y, pointer );
+			return true;
 		}
 		
 		int len = children.size() - 1;
@@ -301,6 +303,7 @@ protected boolean touchDragged(float x, float y, int pointer)
 			point.x = x; point.y = y;
 			focusedActor.toLocalCoordinates( point );
 			focusedActor.touchDragged( point.x, point.y, pointer );
+			return true;
 		}
 		
 		int len = children.size() - 1;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java
Patch:
@@ -21,10 +21,8 @@
 import android.os.Build;
 import android.util.Log;
 import android.view.View;
-import android.view.ViewGroup;
 import android.view.Window;
 import android.view.WindowManager;
-import android.widget.FrameLayout.LayoutParams;
 
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.ApplicationListener;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -25,7 +25,6 @@
 import android.hardware.SensorEvent;
 import android.hardware.SensorEventListener;
 import android.hardware.SensorManager;
-import android.opengl.GLSurfaceView;
 import android.os.Handler;
 import android.view.KeyEvent;
 import android.view.MotionEvent;

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidMultiTouchHandler.java
Patch:
@@ -15,12 +15,11 @@
  ******************************************************************************/
 package com.badlogic.gdx.backends.android;
 
+import android.view.MotionEvent;
+
 import com.badlogic.gdx.backends.android.AndroidInput.Event;
 import com.badlogic.gdx.backends.android.AndroidInput.EventType;
 
-import android.util.Log;
-import android.view.MotionEvent;
-
 /**
  * Multitouch handler for devices running Android >= 2.0. If device is
  * capable of (fake) multitouch this will report additional pointers.

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLBaseSurfaceView.java
Patch:
@@ -34,7 +34,6 @@
 import android.util.AttributeSet;
 import android.util.Log;
 import android.view.SurfaceHolder;
-import android.view.SurfaceView;
 
 /**
  * An implementation of SurfaceView that uses the dedicated surface for

File: backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLSurfaceViewCupcake.java
Patch:
@@ -36,9 +36,6 @@
 import android.view.SurfaceHolder;
 import android.view.SurfaceView;
 
-import com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake.EGLConfigChooser;
-import com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake.GLWrapper;
-
 /**
  * An implementation of SurfaceView that uses the dedicated surface for
  * displaying OpenGL rendering.

File: backends/gdx-backend-applet/src/com/badlogic/gdx/backends/applet/AppletInput.java
Patch:
@@ -21,7 +21,6 @@
 import javax.swing.JOptionPane;
 import javax.swing.SwingUtilities;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.InputListener;
 import com.badlogic.gdx.RenderListener;

File: backends/gdx-backend-desktop/src/com/badlogic/gdx/backends/desktop/JoglInput.java
Patch:
@@ -20,7 +20,6 @@
 import javax.swing.JOptionPane;
 import javax.swing.SwingUtilities;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.InputListener;
 import com.badlogic.gdx.RenderListener;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/BitmapDecoder.java
Patch:
@@ -25,6 +25,7 @@ class BitmapDecoder {
 
 	private BufferedImage tempImage;
 
+	@SuppressWarnings("unchecked")
 	public ByteBuffer decode (BufferedImage image, ByteBuffer buffer) throws IOException {
 		if (image == null) throw new IOException("Invalid image.");
 		width = image.getWidth();

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglApplication.java
Patch:
@@ -8,7 +8,6 @@
 import java.util.ArrayList;
 
 import org.lwjgl.LWJGLException;
-import org.lwjgl.Sys;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
@@ -26,6 +25,7 @@
 import com.badlogic.gdx.RenderListener;
 import com.badlogic.gdx.Version;
 
+@SuppressWarnings("unchecked")
 public class LwjglApplication implements Application {
 	static {
 		System.setProperty("org.lwjgl.input.Mouse.allowNegativeMouseCoords", "true");
@@ -119,8 +119,7 @@ private static void loadLibrary( String libName, String classPath )
 	private final LwjglAudio audio;
 
 	protected int width, height;
-	private String title = "";
-	private boolean isPaused;
+	private String title = "";	
 	private boolean mousePressed;
 	private int mouseX, mouseY;
 	private volatile boolean running = true;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglGL10.java
Patch:
@@ -24,7 +24,6 @@
 import org.lwjgl.BufferUtils;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL13;
-import org.lwjgl.opengl.GL21;
 
 import com.badlogic.gdx.GdxRuntimeException;
 import com.badlogic.gdx.graphics.GL10;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglGL11.java
Patch:
@@ -36,7 +36,6 @@
  * 
  */
 public final class LwjglGL11 extends LwjglGL10 implements com.badlogic.gdx.graphics.GL11 {
-	private double tmpDouble[] = new double[1000];
 	private float tmpFloat[] = new float[1000];
 	private IntBuffer tempInt;
 	private FloatBuffer tempFloat;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglGL20.java
Patch:
@@ -21,7 +21,6 @@
 import java.nio.IntBuffer;
 import java.nio.ShortBuffer;
 
-import org.lwjgl.BufferUtils;
 import org.lwjgl.opengl.EXTFramebufferObject;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL13;

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglInput.java
Patch:
@@ -13,7 +13,6 @@
 
 package com.badlogic.gdx.backends.desktop;
 
-import java.awt.event.KeyEvent;
 import java.util.ArrayList;
 
 import javax.swing.JOptionPane;
@@ -36,6 +35,7 @@
 final class LwjglInput implements Input, RenderListener {
 	String text;
 	TextInputListener textListener;
+	@SuppressWarnings("unchecked")
 	private final ArrayList<InputListener> listeners = new ArrayList();
 
 	public void addInputListener (InputListener listener) {

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/LwjglTexture.java
Patch:
@@ -19,9 +19,7 @@
 import java.io.InputStream;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
-import java.nio.IntBuffer;
 
-import org.lwjgl.BufferUtils;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 

File: backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/desktop/PNGDecoder.java
Patch:
@@ -64,6 +64,7 @@ public boolean isHasAlpha () {
 	private static final int PLTE = 0x504C5445;
 	private static final int tRNS = 0x74524E53;
 	private static final int IDAT = 0x49444154;
+	@SuppressWarnings("unused")
 	private static final int IEND = 0x49454E44;
 
 	private static final byte COLOR_GREYSCALE = 0;
@@ -545,8 +546,7 @@ private void unfilterSub (byte[] curLine) {
 		}
 	}
 
-	private void unfilterUp (byte[] curLine, byte[] prevLine) {
-		final int bpp = this.bytesPerPixel;
+	private void unfilterUp (byte[] curLine, byte[] prevLine) {		
 		for (int i = 1, n = curLine.length; i < n; ++i) {
 			curLine[i] += prevLine[i];
 		}

File: demos/invaders/gdx-invaders-applet/src/com/badlogic/gdxinvaders/GdxInvadersApplet.java
Patch:
@@ -21,6 +21,8 @@
 
 public class GdxInvadersApplet extends Applet
 {
+	private static final long serialVersionUID = -2444740109586326922L;
+
 	public void init()
 	{
 		AppletApplication app = new AppletApplication( this, false, false );		

File: gdx/src/com/badlogic/gdx/Graphics.java
Patch:
@@ -23,7 +23,6 @@
 import com.badlogic.gdx.graphics.GL11;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Pixmap;
-import com.badlogic.gdx.graphics.ShaderProgram;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Pixmap.Format;
 

File: gdx/src/com/badlogic/gdx/graphics/ModelLoader.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.InputStream;
 import java.util.ArrayList;
 
-import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.graphics.loaders.ObjLoader;
 import com.badlogic.gdx.graphics.loaders.OctLoader;
 import com.badlogic.gdx.math.Vector3;

File: gdx/src/com/badlogic/gdx/graphics/SpriteBatch.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.GdxRuntimeException;
-import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.graphics.Font.Glyph;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 import com.badlogic.gdx.math.Matrix4;

File: gdx/src/com/badlogic/gdx/graphics/loaders/OctLoader.java
Patch:
@@ -18,7 +18,6 @@
 import java.io.BufferedInputStream;
 import java.io.InputStream;
 
-import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;

File: gdx/src/com/badlogic/gdx/graphics/loaders/md5/MD5Mesh.java
Patch:
@@ -1,6 +1,5 @@
 package com.badlogic.gdx.graphics.loaders.md5;
 
-import com.badlogic.gdx.math.Vector3;
 
 public class MD5Mesh 
 {	

File: gdx/src/com/badlogic/gdx/graphics/loaders/md5/MD5Quaternion.java
Patch:
@@ -1,6 +1,5 @@
 package com.badlogic.gdx.graphics.loaders.md5;
 
-import com.badlogic.gdx.math.Quaternion;
 import com.badlogic.gdx.math.Vector3;
 
 public class MD5Quaternion 

File: gdx/src/com/badlogic/gdx/physics/box2d/Body.java
Patch:
@@ -67,7 +67,7 @@ protected Body( World world, long addr )
 	 */	 
 	public Fixture createFixture(FixtureDef def)
 	{				
-		Fixture fixture = new Fixture( world, this, jniCreateFixture(addr, def.shape.addr, def.friction, def.restitution, def.density, def.isSensor, def.filter.categoryBits, def.filter.maskBits, def.filter.groupIndex) );
+		Fixture fixture = new Fixture( this, jniCreateFixture(addr, def.shape.addr, def.friction, def.restitution, def.density, def.isSensor, def.filter.categoryBits, def.filter.maskBits, def.filter.groupIndex) );
 		this.world.fixtures.put( fixture.addr, fixture );
 		this.fixtures.add( fixture );
 		return fixture;
@@ -86,7 +86,7 @@ public Fixture createFixture(FixtureDef def)
 	 */
 	public Fixture createFixture(Shape shape, float density)
 	{
-		Fixture fixture = new Fixture( world, this, jniCreateFixture(addr, shape.addr, density));
+		Fixture fixture = new Fixture( this, jniCreateFixture(addr, shape.addr, density));
 		this.world.fixtures.put( fixture.addr, fixture );
 		this.fixtures.add( fixture );
 		return fixture;

File: gdx/src/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java
Patch:
@@ -18,13 +18,12 @@
 import java.util.List;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.Font;
-import com.badlogic.gdx.graphics.Font.FontStyle;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.ImmediateModeRenderer;
 import com.badlogic.gdx.graphics.SpriteBatch;
+import com.badlogic.gdx.graphics.Font.FontStyle;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
 import com.badlogic.gdx.physics.box2d.JointDef.JointType;

File: gdx/src/com/badlogic/gdx/utils/BufferUtils.java
Patch:
@@ -45,7 +45,7 @@ public static void copy( float[] src, Buffer dst, int numFloats, int offset )
 	
 	private native static void copyJni( float[] src, Buffer dst, int numFloats, int offset );	
 	
-	private native static void copyJni( Buffer src, Buffer dst, int numBytes );
+//	private native static void copyJni( Buffer src, Buffer dst, int numBytes );
 	
 	public static native float int2float( int value );
 	

File: gdx/src/com/badlogic/gdx/utils/Pool.java
Patch:
@@ -16,6 +16,7 @@
  *
  * @param <T> the type
  */
+@SuppressWarnings("unchecked")
 public class Pool <T> 
 {	
 	/**

File: gdx/src/com/badlogic/gdx/utils/PooledLinkedList.java
Patch:
@@ -160,6 +160,7 @@ public static void main( String[] argv )
 	public void clear() 
 	{
 		iter();
+		@SuppressWarnings("unused")
 		T v = null;
 		while( ( v = next() ) != null )
 			remove();

File: tests/gdx-tests-desktop/src/com/badlogic/gdx/tests/desktop/MD5Test.java
Patch:
@@ -1,11 +1,8 @@
 package com.badlogic.gdx.tests.desktop;
 
-import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 
 import com.badlogic.gdx.backends.desktop.JoglApplication;
-import com.badlogic.gdx.graphics.loaders.md5.MD5Animation;
-import com.badlogic.gdx.graphics.loaders.md5.MD5Loader;
 
 public class MD5Test 
 {

File: tests/gdx-tests-desktop/src/com/badlogic/gdx/tests/desktop/TextureRenderTest.java
Patch:
@@ -17,15 +17,13 @@
 
 import java.util.ArrayList;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.RenderListener;
 import com.badlogic.gdx.backends.desktop.JoglApplication;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.OrthographicCamera;
-import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes;
@@ -172,7 +170,7 @@ private SimpleRect(int index, float x, float y, float width, float height) {
 
     public static void main( String[] argv )
     {
-    	JoglApplication app = new JoglApplication("TextureRender Test", 480, 320, false );
+    	new JoglApplication("TextureRender Test", 480, 320, false );
     	Gdx.graphics.setRenderListener( new TextureRenderTest() );
     }
 }

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AudioDeviceTest.java
Patch:
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package com.badlogic.gdx.tests;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.RenderListener;
 import com.badlogic.gdx.audio.AudioDevice;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/AudioRecorderTest.java
Patch:
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package com.badlogic.gdx.tests;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.RenderListener;
@@ -44,8 +43,8 @@ public void render()
 		gl.glViewport( 0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight() );
 		gl.glClear( GL10.GL_COLOR_BUFFER_BIT );					
 		
-		float incX = 2.0f / samples.length;
-		float x = -1;
+//		float incX = 2.0f / samples.length;
+//		float x = -1;
 //		renderer.begin( GL10.GL_LINE_STRIP );
 //		for( int i = 0; i < samples.length/100; i++, x+=incX )			
 //			renderer.vertex( x, samples[i] / (float)Short.MAX_VALUE, 0 );

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.util.ArrayList;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputListener;
 import com.badlogic.gdx.RenderListener;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/DualThreadTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.badlogic.gdx.tests;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputListener;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FFTTest.java
Patch:
@@ -67,6 +67,7 @@ private static float sum( float samples[] )
 		return sum;
 	}
 	
+	@SuppressWarnings("unused")
 	private static float sum( FloatBuffer buffer )
 	{
 		float sum = 0;
@@ -75,6 +76,7 @@ private static float sum( FloatBuffer buffer )
 		return sum;
 	}
 	
+	@SuppressWarnings("unused")
 	private static void createFlat( float samples[], ShortBuffer shortSamples )
 	{
 		for( int i = 0; i < samples.length; i++ )

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FixedPointTest.java
Patch:
@@ -19,13 +19,12 @@
 import java.nio.ByteOrder;
 import java.nio.IntBuffer;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.RenderListener;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Pixmap;
-import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.Texture.TextureWrap;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/FloatTest.java
Patch:
@@ -19,13 +19,12 @@
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.RenderListener;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Pixmap;
-import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.Texture.TextureWrap;
 

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ImmediateModeRendererTest.java
Patch:
@@ -15,14 +15,11 @@
  ******************************************************************************/
 package com.badlogic.gdx.tests;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.RenderListener;
 import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.ImmediateModeRenderer;
-import com.badlogic.gdx.graphics.Pixmap;
-import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.Texture.TextureWrap;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/LifeCycleTest.java
Patch:
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package com.badlogic.gdx.tests;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.RenderListener;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/ObjTest.java
Patch:
@@ -15,16 +15,14 @@
  ******************************************************************************/
 package com.badlogic.gdx.tests;
 
-import com.badlogic.gdx.Application;
-import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputListener;
 import com.badlogic.gdx.RenderListener;
+import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.ModelLoader;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
-import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.Texture.TextureWrap;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/PerformanceTest.java
Patch:
@@ -15,10 +15,9 @@
  ******************************************************************************/
 package com.badlogic.gdx.tests;
 
-import com.badlogic.gdx.Application;
-import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.RenderListener;
+import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.ModelLoader;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/Pong.java
Patch:
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package com.badlogic.gdx.tests;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.RenderListener;
 import com.badlogic.gdx.graphics.Color;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SimpleTest.java
Patch:
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package com.badlogic.gdx.tests;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputListener;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TerrainTest.java
Patch:
@@ -2,11 +2,10 @@
 
 import java.util.Random;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
-import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.RenderListener;
+import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.ImmediateModeRenderer;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/TextureRenderTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.util.ArrayList;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.RenderListener;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/VertexArrayTest.java
Patch:
@@ -20,7 +20,6 @@
 import java.nio.FloatBuffer;
 import java.nio.ShortBuffer;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.RenderListener;
 import com.badlogic.gdx.graphics.GL10;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/ApplyForce.java
Patch:
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package com.badlogic.gdx.tests.box2d;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.graphics.Color;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/BodyTypes.java
Patch:
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package com.badlogic.gdx.tests.box2d;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.graphics.Color;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/Box2DTest.java
Patch:
@@ -16,7 +16,6 @@
 package com.badlogic.gdx.tests.box2d;
 
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.InputListener;
 import com.badlogic.gdx.RenderListener;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/CollisionFiltering.java
Patch:
@@ -30,6 +30,7 @@ public class CollisionFiltering extends Box2DTest
 	private final static short k_smallGroup = 1;
 	private final static short k_largeGroup = -1;
 
+	@SuppressWarnings("unused")
 	private final static short k_defaultCategory = 0x0001;
 	private final static short k_triangleCategory = 0x0002;
 	private final static short k_boxCategory = 0x0004;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/ContinuousTest.java
Patch:
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package com.badlogic.gdx.tests.box2d;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.physics.box2d.Body;
 import com.badlogic.gdx.physics.box2d.BodyDef;

File: tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/VerticalStack.java
Patch:
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package com.badlogic.gdx.tests.box2d;
 
-import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.graphics.Color;

File: gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
Patch:
@@ -241,7 +241,9 @@ public void act( float delta )
 	
 	public void render( )
 	{
-		batch.begin( projection, identity );
+		batch.setProjectionMatrix( projection );
+		batch.setTransformMatrix( identity );
+		batch.begin( );
 		root.render( batch );
 		batch.end( );
 	}

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteBatchTest.java
Patch:
@@ -164,7 +164,7 @@ private void renderSprites( )
 			if( angleInc != 0)
 				sprites3[i].rotate( angleInc ); // this is aids
 			if( scale != 1 )
-				sprites3[i].scale( scale ); // this is aids
+				sprites3[i].setScale( scale ); // this is aids
 			spriteBatch.draw( sprites3[i] );
 		}
 		draw1 = (System.nanoTime()-start)/1000000000.0f;
@@ -175,7 +175,7 @@ private void renderSprites( )
 			if( angleInc != 0)
 				sprites3[i].rotate( angleInc ); // this is aids
 			if( scale != 1 )
-				sprites3[i].scale( scale ); // this is aids
+				sprites3[i].setScale( scale ); // this is aids
 			spriteBatch.draw( sprites3[i] );
 		}
 		draw2 = (System.nanoTime()-start)/1000000000.0f;

File: gdx/src/com/badlogic/gdx/utils/BufferUtils.java
Patch:
@@ -32,15 +32,15 @@ public class BufferUtils
 	 * @param offset the offset in src to start copying from
 	 */
 	public static void copy( float[] src, Buffer dst, int numFloats, int offset )
-	{		
+	{				
 		copyJni( src, dst, numFloats, offset );
 		dst.position(0);  
 	
 		if( dst instanceof ByteBuffer )  
 			dst.limit(numFloats << 2);
 		else
 		if( dst instanceof FloatBuffer ) 
-			dst.limit(numFloats);
+			dst.limit(numFloats);			
 	}
 	
 	private native static void copyJni( float[] src, Buffer dst, int numFloats, int offset );	

File: tests/gdx-tests/src/com/badlogic/gdx/tests/SpriteBatchTest.java
Patch:
@@ -50,7 +50,7 @@ public class SpriteBatchTest implements RenderListener, InputListener
 	float angle = 0;
 	float ROTATION_SPEED = 20;
 	float scale = 1;
-	float SCALE_SPEED = 0; //-1;
+	float SCALE_SPEED = -1;
 	int renderMethod = 0;
 	
 	@Override
@@ -213,8 +213,7 @@ private void renderSprites2( )
 		float drawText = 0;
 		
 		long start = System.nanoTime();
-		spriteBatch.begin();			
-		spriteBatch.disableBlending();
+		spriteBatch.begin();					
 		begin = (System.nanoTime()-start)/1000000000.0f;
 				
 		float angleInc = ROTATION_SPEED * Gdx.graphics.getDeltaTime();

File: gdx-tests/src/com/badlogic/gdx/tests/FrameBufferTest.java
Patch:
@@ -68,7 +68,7 @@ public void render()
 		Gdx.graphics.getGL20().glClear( GL20.GL_COLOR_BUFFER_BIT );
 		
 		spriteBatch.begin();
-		spriteBatch.draw( frameBuffer.getColorBufferTexture(), 0, 200, 256, 256, 0, 0, frameBuffer.getColorBufferTexture().getWidth(), frameBuffer.getColorBufferTexture().getHeight(), Color.WHITE, false, true );
+		spriteBatch.draw( frameBuffer.getColorBufferTexture(), 0, 0, 256, 256, 0, 0, frameBuffer.getColorBufferTexture().getWidth(), frameBuffer.getColorBufferTexture().getHeight(), Color.WHITE, false, true );
 		spriteBatch.end();
 	}
 

File: gdx-tests/src/com/badlogic/gdx/tests/SpriteBatchShaderTest.java
Patch:
@@ -45,6 +45,8 @@ public class SpriteBatchShaderTest implements RenderListener
 	int coords[] = new int[SPRITES*2];
 	int coords2[] = new int[SPRITES*2];
 	
+	Color col = new Color( 1, 1, 1, 0.6f );
+	
 	Mesh mesh;
 	float vertices[] = new float[SPRITES * 6 * ( 2 + 2 + 4 )];
 	
@@ -69,7 +71,6 @@ public void render( )
 		
 		long start = System.nanoTime();
 		spriteBatch.begin();		
-//		spriteBatch.disableBlending();
 		begin = (System.nanoTime()-start)/1000000000.0f;
 		
 		int len = coords.length;
@@ -80,7 +81,7 @@ public void render( )
 		
 		start = System.nanoTime();
 		for( int i = 0; i < coords2.length; i+=2 )		
-			spriteBatch.draw( texture2, coords2[i], coords2[i+1], 0, 0, 32, 32, Color.WHITE );
+			spriteBatch.draw( texture2, coords2[i], coords2[i+1], 0, 0, 32, 32, col );
 		draw2 = (System.nanoTime()-start)/1000000000.0f;
 				
 		start = System.nanoTime();

File: gdx-tests/src/com/badlogic/gdx/tests/StageTest.java
Patch:
@@ -39,7 +39,7 @@
 
 public class StageTest implements RenderListener, InputListener
 {
-	private static final int NUM_SPRITES = (int)Math.sqrt(1000 / 10);
+	private static final int NUM_SPRITES = (int)Math.sqrt(100000 / 10);
 	private static final int NUM_GROUPS = 10;
 	private static final float SPACING = 5;
 	ImmediateModeRenderer renderer;

File: gdx-tests/src/com/badlogic/gdx/tests/Pong.java
Patch:
@@ -196,7 +196,7 @@ public void render( )
 		// For text to be transparent we have to enable blending and texturing.
 		// We could setup blending once but i'm lazy :)
 		spriteBatch.begin();
-		spriteBatch.drawText( font, score, Gdx.graphics.getWidth() / 2 - font.getStringWidth(score) / 2, Gdx.graphics.getHeight(), Color.WHITE );		
+		spriteBatch.drawText( font, score, Gdx.graphics.getWidth() / 2 - font.getStringWidth(score) / 2, Gdx.graphics.getHeight() - font.getLineHeight(), Color.WHITE );		
 		spriteBatch.end();
 	}
 

File: gdx-tests-android/src/com/badlogic/gdx/WindowedTest.java
Patch:
@@ -28,13 +28,14 @@ public void onCreate( Bundle bundle )
 		Button b2 = new Button( this );
 		b2.setText( "New Window" );
 		b2.setLayoutParams( new LinearLayout.LayoutParams( LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT ) );
+		View view = initializeForView( false, 16 );
 		
 		LinearLayout layout = new LinearLayout( this );
 		layout.setOrientation( LinearLayout.VERTICAL );
 		layout.addView( b1 );
 		layout.addView( b2 );
+		layout.addView( view, new LinearLayout.LayoutParams( LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT ) );
 		
-		initialize( false, 16, layout, new LinearLayout.LayoutParams( LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT ) );
 		getGraphics().setRenderListener(this);
 		setContentView( layout );
 		

File: gdx/src/com/badlogic/gdx/scenes/scene2d/actors/Image.java
Patch:
@@ -64,8 +64,7 @@ protected void render(SpriteBatch batch)
 
 	@Override
 	protected boolean touchDown(float x, float y, int pointer) {
-		System.out.println( name + " touch down:"  + x + ", " + y );
-		return false;
+		return x > 0 && y > 0 && x < width && y < height;
 	}
 
 	@Override

File: gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -139,7 +139,7 @@ public void set( EventType type, int x, int y, int pointer, int keycode, char ke
 	/** whether multitouch is supported or not **/
 	final boolean hasMultitouch;
 	
-	AndroidInput( AndroidApplication activity, GLSurfaceView view, int sleepTime )
+	AndroidInput( AndroidApplication activity, View view, int sleepTime )
 	{
 		view.setOnKeyListener( this );
 		view.setOnTouchListener( this );

File: gdx-tests-android/src/com/badlogic/gdx/GDXTester.java
Patch:
@@ -32,7 +32,7 @@ public class GDXTester extends ListActivity
 								   "Mpg123 Test", "Vorbis Test", "Performance Test", "Mesh Shader Test", "SpriteBatch Test",
 								   "SpriteBatch Shader Test", "FrameBuffer Test", "SpriteBatch Rotation Test", "Box2D Test",
 								   "Audio Recorder Test", "Box2D Test Collection", "Resources Test", "MD5 Test", "Micro Benchmarks", "Multitouch Test", "BufferUtils Test", "Terrain Test", "Water Ripples",
-								   "Stage Test"};
+								   "Stage Test", "Windowed Test"};
 	
 	@Override
 	public void onCreate(Bundle savedInstanceState) 
@@ -119,6 +119,8 @@ protected void onListItemClick(ListView l, View v, int position, long id)
 			intent = new Intent( this, WaterRipples.class );
 		if( keyword.equals( items[34] ) )
 			intent = new Intent( this, StageTest.class );
+		if( keyword.equals( items[35] ) )
+			intent = new Intent( this, WindowedTest.class );
 			
 		startActivity( intent );
 	}

File: gdx/src/com/badlogic/gdx/math/Vector2.java
Patch:
@@ -248,8 +248,8 @@ public Vector2 tmp( )
 	 */
 	public Vector2 mul( Matrix3 mat )
 	{
-		float x = this.x * mat.vals[0] + this.y * mat.vals[1] + mat.vals[2];
-		float y = this.x * mat.vals[3] + this.y * mat.vals[4] + mat.vals[5];
+		float x = this.x * mat.vals[0] + this.y * mat.vals[3] + mat.vals[6];
+		float y = this.x * mat.vals[1] + this.y * mat.vals[4] + mat.vals[7];
 		this.x = x;
 		this.y = y;
 		return this;

File: gdx-tests/src/com/badlogic/gdx/tests/SpriteBatchShaderTest.java
Patch:
@@ -68,7 +68,8 @@ public void render( )
 		float drawText = 0;
 		
 		long start = System.nanoTime();
-		spriteBatch.begin();			
+		spriteBatch.begin();		
+//		spriteBatch.disableBlending();
 		begin = (System.nanoTime()-start)/1000000000.0f;
 		
 		int len = coords.length;

File: gdx-tests/src/com/badlogic/gdx/tests/SpriteBatchTest.java
Patch:
@@ -75,7 +75,8 @@ private void renderNormal( )
 		float drawText = 0;
 		
 		long start = System.nanoTime();
-		spriteBatch.begin();			
+		spriteBatch.begin();
+		//spriteBatch.disableBlending();
 		begin = (System.nanoTime()-start)/1000000000.0f;
 				
 		start = System.nanoTime();

File: gdx-backend-desktop/src/com/badlogic/gdx/backends/desktop/JoglAudioDevice.java
Patch:
@@ -19,6 +19,7 @@
 import javax.sound.sampled.AudioSystem;
 import javax.sound.sampled.SourceDataLine;
 
+import com.badlogic.gdx.GdxRuntimeException;
 import com.badlogic.gdx.audio.AudioDevice;
 
 /**
@@ -49,7 +50,7 @@ public JoglAudioDevice( boolean isMono )
 			line.open(format, 4410*2);
 			line.start();				
 		} catch (Exception e) {
-			e.printStackTrace();			
+			throw new GdxRuntimeException( "Couldn't createa AudioDevice", e );			
 		}			
 	}
 	

File: gdx-backend-desktop/src/com/badlogic/gdx/backends/desktop/JoglAudioRecorder.java
Patch:
@@ -16,10 +16,11 @@
 package com.badlogic.gdx.backends.desktop;
 
 import javax.sound.sampled.AudioFormat;
+import javax.sound.sampled.AudioFormat.Encoding;
 import javax.sound.sampled.AudioSystem;
 import javax.sound.sampled.TargetDataLine;
-import javax.sound.sampled.AudioFormat.Encoding;
 
+import com.badlogic.gdx.GdxRuntimeException;
 import com.badlogic.gdx.audio.AudioRecorder;
 
 /**
@@ -48,7 +49,7 @@ public JoglAudioRecorder( int samplingRate, boolean isMono )
 		}
 		catch( Exception ex )
 		{			
-			throw new IllegalStateException( "Couldn't create AudioRecorder", ex );
+			throw new GdxRuntimeException( "Couldn't create AudioRecorder", ex );
 		}
 	}
 	

File: gdx-backend-desktop/src/com/badlogic/gdx/backends/desktop/JoglTexture.java
Patch:
@@ -22,6 +22,7 @@
 import javax.media.opengl.GL;
 import javax.media.opengl.GLContext;
 
+import com.badlogic.gdx.GdxRuntimeException;
 import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.graphics.Texture;
 import com.sun.opengl.util.texture.TextureData;
@@ -68,7 +69,7 @@ final class JoglTexture implements Texture
 		}
 		catch( Exception ex )
 		{			
-			throw new RuntimeException( ex );
+			throw new GdxRuntimeException( "Couldn load Texture", ex  );
 		}
 		GL gl = GLContext.getCurrent().getGL();
         

File: gdx-tests-android/src/com/badlogic/gdx/GDXTester.java
Patch:
@@ -28,7 +28,7 @@ public class GDXTester extends ListActivity
 {
 	String[] items = new String[]{ "Life Cycle Test", "Simple Test", "Vertex Array Test", "Vertex Buffer Object Test", "MeshRenderer Test", 
 								   "Fixed Point MeshRenderer Test", "Managed Test", "Text Test", "Sound Test", "Input Test", "Obj Test",
-								   "Fixed Point Test", "Float Test", "Lag Test", "Pong", "Collision Test", "Audio Device Test", 
+								   "Fixed Point Test", "Float Test", "Lag Test", "Pong", "Audio Device Test", 
 								   "Mpg123 Test", "Vorbis Test", "Performance Test", "Mesh Shader Test", "SpriteBatch Test",
 								   "SpriteBatch Shader Test", "FrameBuffer Test", "SpriteBatch Rotation Test", "Box2D Test",
 								   "Audio Recorder Test", "Box2D Test Collection", "Resources Test", "MD5 Test", "Micro Benchmarks", "Multitouch Test", "BufferUtils Test", "Terrain Test"};
@@ -78,8 +78,6 @@ protected void onListItemClick(ListView l, View v, int position, long id)
 			intent = new Intent( this, LagTest.class );
 		if( keyword.equals( items[14] ) )
 			intent = new Intent( this, Pong.class );
-		if( keyword.equals( items[15] ) )
-			intent = new Intent( this, CollisionTest.class );
 		if( keyword.equals( items[16] ) )
 			intent = new Intent( this, AudioDeviceTest.class );
 		if( keyword.equals( items[17] ) )

File: gdx-tests/src/com/badlogic/gdx/tests/box2d/ContinuousTest.java
Patch:
@@ -72,9 +72,9 @@ private void launch( )
 		m_body.setAngularVelocity( m_angularVelocity );
 	}
 
-	public void render( Application app )
+	public void render( )
 	{
-		super.render( app );
+		super.render( );
 		
 		
 		m_stepCount++;

File: gdx/src/com/badlogic/gdx/Version.java
Patch:
@@ -24,7 +24,7 @@
 public class Version 
 {	
 	/** the current version of libgdx in the major.minor format **/
-	public static String VERSION = "0.61";
+	public static String VERSION = "0.7";
 	
 	public static void loadLibrary()
 	{

File: gdx/src/com/badlogic/gdx/graphics/Color.java
Patch:
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package com.badlogic.gdx.graphics;
 
-import com.badlogic.gdx.utils.BufferUtils;
 
 /**
  * A color class, holding the r, g, b and alpha component

File: gdx/src/com/badlogic/gdx/graphics/loaders/OctLoader.java
Patch:
@@ -55,7 +55,7 @@ private static class OctFace
 		public float nx, ny, nz, d;
 	}
 	
-	public static Mesh loadOct( Graphics graphics, InputStream inputStream, boolean managed, boolean useFloats, Vector3 start )
+	public static Mesh loadOct(InputStream inputStream, boolean useFloats, Vector3 start )
 	{
 		LittleEndianInputStream in =  new LittleEndianInputStream( new BufferedInputStream(inputStream) );		
 		
@@ -124,7 +124,7 @@ public static Mesh loadOct( Graphics graphics, InputStream inputStream, boolean
 				}
 			}
 			
-			Mesh m = new Mesh( graphics, managed, true, !useFloats, numTriangles * 3, 0, 
+			Mesh m = new Mesh( true, !useFloats, numTriangles * 3, 0, 
 							   new VertexAttribute( Usage.Position, 3, "a_position"), 
 							   new VertexAttribute( Usage.Normal, 3, "a_position"),
 							   new VertexAttribute( Usage.TextureCoordinates, 2, "a_texCoords")

File: gdx/src/com/badlogic/gdx/graphics/loaders/md5/MD5Renderer.java
Patch:
@@ -1,6 +1,5 @@
 package com.badlogic.gdx.graphics.loaders.md5;
 
-import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.VertexAttribute;
@@ -14,7 +13,7 @@ public class MD5Renderer
 	private final float[][] vertices;	
 	private boolean useJni;
 	
-	public MD5Renderer( Graphics g, MD5Model model, boolean useJni, boolean managed )
+	public MD5Renderer( MD5Model model, boolean useJni )
 	{
 		int maxVertices = 0;
 		int maxIndices = 0;
@@ -35,7 +34,7 @@ public MD5Renderer( Graphics g, MD5Model model, boolean useJni, boolean managed
 			this.vertices[i] = model.meshes[i].createVertexArray();
 		}
 		
-		this.mesh = new Mesh( g, managed, false, false, maxVertices, maxIndices, 
+		this.mesh = new Mesh( false, false, maxVertices, maxIndices, 
 		 			     new VertexAttribute( VertexAttributes.Usage.Position, 3, "a_position" ), 
 						 new VertexAttribute( VertexAttributes.Usage.TextureCoordinates, 2, "a_texCoords" ) );		
 	}

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -238,6 +238,7 @@ private void fillBuffers( GL11 gl )
 	{							
 		gl.glBindBuffer( GL11.GL_ARRAY_BUFFER, vertexBufferObjectHandle );
 		// FIXME FUCK YOU QUALCOMM, your glBufferSubData is the slowest shit on earth...
+		// Does not have a lot of impact on the Droid with 2.1 (2-3 frames for MD5Test) but still shitty.
 		if( graphics.getType() == GraphicsType.AndroidGL )
 			gl.glBufferData( GL11.GL_ARRAY_BUFFER, getNumVertices() * attributes.vertexSize, vertices, isStatic?GL11.GL_STATIC_DRAW:GL11.GL_DYNAMIC_DRAW);
 		else

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -302,7 +302,7 @@ public void setVertices(float[] vertices, int offset, int count)
 		if( useFixedPoint )
 			throw new IllegalArgumentException( "can't set float vertices for fixed point mesh" );
 				
-		int result = BufferUtils.copy( vertices, this.vertices, count, offset );
+		BufferUtils.copy( vertices, this.vertices, count, offset );
 		this.verticesFloat.limit(this.vertices.limit()>>2);
 		this.verticesFloat.position(0);
 		

File: gdx/src/com/badlogic/gdx/graphics/ImmediateModeRenderer.java
Patch:
@@ -215,7 +215,7 @@ public void end( )
 		
 		if( texCoordsDefined )
 		{
-			//gl.glClientActiveTexture( GL10.GL_TEXTURE0 );
+			gl.glClientActiveTexture( GL10.GL_TEXTURE0 );
 			gl.glEnableClientState( GL10.GL_TEXTURE_COORD_ARRAY );
 			texCoordsBuffer.clear();
 			texCoordsBuffer.put( texCoords, 0, idxTexCoords );

File: gdx/src/com/badlogic/gdx/RenderListener.java
Patch:
@@ -22,9 +22,9 @@
  * and will receive setup, render and dispose events. In case
  * of a setup event the listener can create any resources it
  * needs later on to draw. The setup method is also called when
- * the OpenGL surface has been recreated. This happens only on
+ * the OpenGL surface has been recreated after a context loss. This happens only on
  * Android in case the application was paused and resumed. All
- * OpenGL resources like textures and shaders are lost and have to
+ * OpenGL resources like textures, meshes and shaders are lost and have to
  * be recreated. The render method is called whenever the {@link Application} is redrawn. The 
  * dispose method is called before the Application is closed 
  * or the RenderListener is unregistered from the Graphics instance.
@@ -69,7 +69,7 @@ public interface RenderListener
 	
 	/**
 	 * The dispose method is called when the application is closing
-	 * or the {@link RenderListener} has been unregistered form the
+	 * or the {@link RenderListener} has been unregistered from the
 	 * Graphics instance.
 	 * 
 	 * @param app The application

File: gdx/src/com/badlogic/gdx/graphics/Color.java
Patch:
@@ -17,7 +17,8 @@
 
 /**
  * A color class, holding the r, g, b and alpha component
- * as floats in the range [0,1].
+ * as floats in the range [0,1]. All methods perform clamping
+ * on the internal values after execution. 
  * 
  * @author mzechner
  *
@@ -89,7 +90,6 @@ public Color mul( Color color )
 
 	/**
 	 * Multiplies all components of this Color with the given value. 
-	 * No clipping is performed!
 	 * 
 	 * @param value the value
 	 * @return this color

File: gdx/src/com/badlogic/gdx/graphics/ImmediateModeRenderer.java
Patch:
@@ -21,15 +21,16 @@
 
 /**
  * An ImmediateModeRenderer allows you to perform immediate mode rendering as you
- * were acustomed to in your desktop OpenGL environment. In order to draw something
+ * were accustomed to in your desktop OpenGL environment. In order to draw something
  * you first have to call {@link ImmediateModeRenderer.begin()} with the primitive
  * type you want to render. Next you specify as many vertices as you want by first
  * defining the vertex color, normal and texture coordinates followed by the vertex
  * position which finalizes the definition of a single vertex. When you are done
  * specifying the geometry you have to call {@link ImmediateModeRenderer.end()} to
  * make the renderer render the geometry. Internally the renderer uses vertex arrays
  * to render the provided geometry. This is not the best performing way to do this
- * so use this class only for non performance critical low vertex count geometries.
+ * so use this class only for non performance critical low vertex count geometries while
+ * debugging.
  * 
  * Note that this class of course only works with OpenGL ES 1.x.
  * 

File: gdx/src/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * A Pixmap represents a plattform specific bitmap. On Android it 
- * encapsulates a Bitmap on the PC it encapsulates a BufferedImage.
+ * encapsulates a Bitmap on the desktop it encapsulates a BufferedImage.
  * Various methods are available to manipulate the Pixmap. This uses
  * the common bitmap coordinate system with the origin being in the
  * top left corner and the y-axis pointing downwards. Bitmaps can

File: gdx/src/com/badlogic/gdx/graphics/VertexAttributes.java
Patch:
@@ -111,6 +111,9 @@ private void checkValidity( )
 				cols = true;
 			}
 		}
+		
+		if( pos == false )
+			throw new IllegalArgumentException( "no position attribute was specified" );
 	}
 	
 	/**

File: gdx-tests-desktop/src/com/badlogic/gdx/tests/desktop/box2d/TestCollection.java
Patch:
@@ -21,7 +21,7 @@ public class TestCollection
 {
 	public static void main( String[] argv )
 	{
-		JoglApplication app = new JoglApplication( "Simple Test", 640, 480, false );
+		JoglApplication app = new JoglApplication( "Simple Test", 480, 320, false );
 		app.getGraphics().setRenderListener( new com.badlogic.gdx.tests.box2d.TestCollection( ) );
 	}
 }

File: gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
Patch:
@@ -150,7 +150,7 @@ private void createBoxes( )
 			BodyDef boxBodyDef = new BodyDef( );
 			boxBodyDef.type = BodyType.DynamicBody;
 			boxBodyDef.position.x = -24 + (float)(Math.random() * 48);
-			boxBodyDef.position.y = 10 +  (float)(Math.random() * 100);		
+			boxBodyDef.position.y = 10 +  (float)(Math.random() * 100);					
 			Body boxBody = world.createBody( boxBodyDef );
 			
 			// add the boxPoly shape as a fixture

File: gdx-tests/src/com/badlogic/gdx/tests/box2d/TestCollection.java
Patch:
@@ -22,7 +22,7 @@
 
 public class TestCollection implements RenderListener, InputListener 
 {
-	private final Box2DTest[] tests = { new CollisionFiltering(), new Chain(), new Bridge(), new SphereStack(), new Cantilever(), new ApplyForce(), new ContinuousTest(), new Prismatic(), new CharacterCollision(), new BodyTypes(), new SimpleTest(), new Pyramid( ), new OneSidedPlatform(), new VerticalStack(),
+	private final Box2DTest[] tests = { new DebugRendererTest(), new CollisionFiltering(), new Chain(), new Bridge(), new SphereStack(), new Cantilever(), new ApplyForce(), new ContinuousTest(), new Prismatic(), new CharacterCollision(), new BodyTypes(), new SimpleTest(), new Pyramid( ), new OneSidedPlatform(), new VerticalStack(),
 										new VaryingRestitution()
 	};
 	

File: gdx-tests/src/com/badlogic/gdx/tests/box2d/Box2DTest.java
Patch:
@@ -67,7 +67,7 @@ public abstract class Box2DTest implements RenderListener, InputListener
 	public void render(Application app) 
 	{
 		// update the world with a fixed time step
-		world.step( 1 / 60.0f, 8, 3 );
+		world.step( app.getGraphics().getDeltaTime(), 8, 3 );
 		
 		// clear the screen and setup the projection matrix
 		GL10 gl = app.getGraphics().getGL10();		

File: gdx-backend-desktop/src/com/badlogic/gdx/backends/desktop/JoglPanel.java
Patch:
@@ -236,12 +236,12 @@ private static void loadLibrary( String resource )
 	 */
 	public void dispose( )
 	{
+		if( animator != null )		
+			animator.stop();					
 		canvas.getContext().makeCurrent();
 		for( RenderListener listener: listeners )
 			listener.dispose( application );
-		remove(canvas);
-		if( animator != null )
-			animator.stop();    	
+		remove(canvas);   	
 	}
 	
 	

File: gdx-tests-android/src/com/badlogic/gdx/MD5Test.java
Patch:
@@ -1,7 +1,6 @@
 package com.badlogic.gdx;
 
 import android.os.Bundle;
-import android.os.Debug;
 
 import com.badlogic.gdx.backends.android.AndroidApplication;
 
@@ -10,6 +9,7 @@ public class MD5Test extends AndroidApplication
 	public void onCreate( Bundle bundle )
 	{
 		super.onCreate( bundle );
+//		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
 		initialize( false );
 		
 		getGraphics().setRenderListener( new com.badlogic.gdx.tests.MD5Test() );

File: gdx-tests/src/com/badlogic/gdx/tests/FrameBufferTest.java
Patch:
@@ -47,14 +47,15 @@ public void dispose(Application app)
 	public void render(Application app) 
 	{						
 		frameBuffer.begin();
-		app.getGraphics().getGL20().glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
+		app.getGraphics().getGL20().glViewport( 0, 0, frameBuffer.getWidth(), frameBuffer.getHeight() );
 		app.getGraphics().getGL20().glClearColor( 0f, 1f, 0f, 1 );
 		app.getGraphics().getGL20().glClear( GL20.GL_COLOR_BUFFER_BIT );
 		meshShader.begin();
 		mesh.render(meshShader, GL20.GL_TRIANGLES);
 		meshShader.end();
 		frameBuffer.end();	
 		
+		app.getGraphics().getGL20().glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
 		app.getGraphics().getGL20().glClearColor( 0.2f, 0.2f, 0.2f, 1 );
 		app.getGraphics().getGL20().glClear( GL20.GL_COLOR_BUFFER_BIT );
 		

File: gdx-tests/src/com/badlogic/gdx/tests/MD5Test.java
Patch:
@@ -38,7 +38,7 @@ public void surfaceCreated(Application app)
 			skeleton = new MD5Joints();
 			skeleton.joints = new float[anim.frames[0].joints.length];
 			animInfo = new MD5AnimationInfo( anim.frames.length, anim.secondsPerFrame );			
-			renderer = new MD5Renderer( app.getGraphics(), model, true, true );
+			renderer = new MD5Renderer( app.getGraphics(), model, false, true );
 			
 			
 //			long start = System.nanoTime();

File: gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGL10.java
Patch:
@@ -789,6 +789,6 @@ public final void glTexEnvxv(int target, int pname, int[] params, int offset)
 
 	@Override
 	public void glPolygonMode(int face, int mode) {
-		throw new UnsupportedOperationException( "not available in OpenGL ES" );		
+//		throw new UnsupportedOperationException( "not available in OpenGL ES" );		
 	}		
 }

File: gdx-tests-android/src/com/badlogic/gdx/GDXTester.java
Patch:
@@ -31,7 +31,7 @@ public class GDXTester extends ListActivity
 								   "Fixed Point Test", "Float Test", "Lag Test", "Pong", "Collision Test", "Audio Device Test", 
 								   "Mpg123 Test", "Vorbis Test", "Performance Test", "Mesh Shader Test", "SpriteBatch Test",
 								   "SpriteBatch Shader Test", "FrameBuffer Test", "SpriteBatch Rotation Test", "Box2D Test",
-								   "Audio Recorder Test", "Box2D Test Collection", "Resources Test", "MD5 Test"};
+								   "Audio Recorder Test", "Box2D Test Collection", "Resources Test", "MD5 Test", "Micro Benchmarks"};
 	
 	@Override
 	public void onCreate(Bundle savedInstanceState) 
@@ -108,6 +108,8 @@ protected void onListItemClick(ListView l, View v, int position, long id)
 			intent = new Intent( this, ResourcesTest.class );
 		if( keyword.equals( items[29] ) )
 			intent = new Intent( this, MD5Test.class );
+		if( keyword.equals( items[30] ) )
+			intent = new Intent( this, MicroBenchmarks.class );
 			
 		startActivity( intent );
 	}

File: gdx-tests/src/com/badlogic/gdx/tests/FrameBufferTest.java
Patch:
@@ -48,7 +48,7 @@ public void render(Application app)
 	{						
 		frameBuffer.begin();
 		app.getGraphics().getGL20().glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
-		app.getGraphics().getGL20().glClearColor( 0f, 0f, 0f, 1 );
+		app.getGraphics().getGL20().glClearColor( 0f, 1f, 0f, 1 );
 		app.getGraphics().getGL20().glClear( GL20.GL_COLOR_BUFFER_BIT );
 		meshShader.begin();
 		mesh.render(meshShader, GL20.GL_TRIANGLES);

File: gdx/src/com/badlogic/gdx/graphics/loaders/md5/MD5Quaternion.java
Patch:
@@ -71,7 +71,7 @@ public void multiply( MD5Quaternion q )
 		w = tw;
 		x = tx;
 		y = ty;
-		z = tz;
+		z = tz;		
 	}
 	
 	public void multiply( Vector3 v )
@@ -93,7 +93,7 @@ public void rotate( Vector3 vec )
 	{
 		inv.x = -x; inv.y = -y; inv.z = -z; inv.w = w;
 		
-		inv.normalize();
+//		inv.normalize();
 		tmp.set( this );
 		tmp.multiply( vec );
 		tmp.multiply( inv );

File: gdx/src/com/badlogic/gdx/graphics/loaders/md5/MD5Quaternion.java
Patch:
@@ -36,9 +36,9 @@ public void set( MD5Quaternion q )
 		this.z = q.z;
 	}
 	
-	private void computeW( )
+	public void computeW( )
 	{
-		float t = 1.0f - ( x * x - y * y - z * z );
+		float t = 1.0f - x * x - y * y - z * z;
 		
 		if( t < 0.0f )
 			w = 0;

File: gdx/src/com/badlogic/gdx/physics/box2d/Body.java
Patch:
@@ -318,7 +318,7 @@ public MassData getMassData()
 		massData.center.x = tmp[1];
 		massData.center.y = tmp[2];
 		massData.I = tmp[3];
-		return null;
+		return massData;
 	}
 	
 	private native void jniGetMassData( long addr, float[] massData );

File: gdx/src/com/badlogic/gdx/graphics/loaders/OctLoader.java
Patch:
@@ -23,6 +23,7 @@
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 import com.badlogic.gdx.math.Vector3;
+import com.badlogic.gdx.utils.LittleEndianInputStream;
 
 /**
  * Loads an OCT file as found in many of Paul Nettle's demos.

File: gdx/src/com/badlogic/gdx/physics/box2d/Body.java
Patch:
@@ -106,7 +106,7 @@ public Fixture createFixture(Shape shape, float density)
 	public void destroyFixture(Fixture fixture)
 	{
 		jniDestroyFixture( addr, fixture.addr );
-		this.world.fixtures.remove(fixture);
+		this.world.fixtures.remove(fixture.addr);
 		this.fixtures.remove(fixture);
 	}
 	

File: gdx/src/com/badlogic/gdx/utils/LittleEndianInputStream.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
-package com.badlogic.gdx.graphics.loaders;
+package com.badlogic.gdx.utils;
 
 import java.io.*;
 

File: gdx/src/com/badlogic/gdx/Version.java
Patch:
@@ -24,5 +24,5 @@
 public class Version 
 {	
 	/** the current version of libgdx in the major.minor format **/
-	public static String VERSION = "0.52";
+	public static String VERSION = "0.6";
 }

File: gdx-tests-android/src/com/badlogic/gdx/GDXTester.java
Patch:
@@ -31,7 +31,7 @@ public class GDXTester extends ListActivity
 								   "Fixed Point Test", "Float Test", "Lag Test", "Pong", "Collision Test", "Audio Device Test", 
 								   "Mpg123 Test", "Vorbis Test", "Performance Test", "Mesh Shader Test", "SpriteBatch Test",
 								   "SpriteBatch Shader Test", "FrameBuffer Test", "SpriteBatch Rotation Test", "Box2D Test",
-								   "Audio Recorder Test", "Box2D Test Collection"};
+								   "Audio Recorder Test", "Box2D Test Collection", "Resources Test"};
 	
 	@Override
 	public void onCreate(Bundle savedInstanceState) 
@@ -104,6 +104,8 @@ protected void onListItemClick(ListView l, View v, int position, long id)
 			intent = new Intent( this, AudioRecorderTest.class );
 		if( keyword.equals( items[27] ) )
 			intent = new Intent( this, TestCollection.class );
+		if( keyword.equals( items[28] ) )
+			intent = new Intent( this, ResourcesTest.class );
 			
 		startActivity( intent );
 	}

File: gdx-tests/src/com/badlogic/gdx/tests/box2d/Box2DTest.java
Patch:
@@ -70,7 +70,7 @@ public void render(Application app)
 		world.step( 1 / 60.0f, 8, 3 );
 		
 		// clear the screen and setup the projection matrix
-		GL10 gl = app.getGraphics().getGL10();
+		GL10 gl = app.getGraphics().getGL10();		
 		gl.glClear( GL10.GL_COLOR_BUFFER_BIT );		
 		camera.setMatrices( );
 		

File: gdx-tests/src/com/badlogic/gdx/tests/box2d/TestCollection.java
Patch:
@@ -64,12 +64,14 @@ public boolean keyDown(int keycode)
 	{
 		if( keycode == Keys.KEYCODE_SPACE )
 		{
+			app.log( "TestCollection", "disposing test '" + tests[testIndex].getClass().getName() );
 			tests[testIndex].dispose( app );
 			testIndex++;
 			if( testIndex >= tests.length )
 				testIndex = 0;
 			Box2DTest test = tests[testIndex];
-			test.surfaceCreated( app );		
+			test.surfaceCreated( app );
+			app.log( "TestCollection", "created test '" + tests[testIndex].getClass().getName() );
 		}
 		
 		return false;

File: gdx/src/com/badlogic/gdx/graphics/ImmediateModeRenderer.java
Patch:
@@ -38,7 +38,7 @@
  */
 public class ImmediateModeRenderer 
 {
-	private static final int MAX_VERTICES = 10000 * 3;
+	private static final int MAX_VERTICES = 2000 * 3;
 	
 	/** the gl instance **/
 	private final GL10 gl;	

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -674,15 +674,15 @@ private void checkManagedAndDirty( )
 	 */
 	public void dispose( )
 	{
+		meshes.remove(this);
+		
 		if( graphics.isGL11Available() == false && graphics.isGL20Available() == false )
 			return;
 		
 		if( graphics.isGL20Available() )
 			dispose( graphics.getGL20() );
 		else
-			dispose( graphics.getGL11() );
-		
-		meshes.remove(this);
+			dispose( graphics.getGL11() );			
 	}
 	
 	private void dispose( GL11 gl )

File: gdx/src/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java
Patch:
@@ -48,8 +48,8 @@ public class Box2DDebugRenderer
 	protected ImmediateModeRenderer renderer;
 	
 	/** a spritebatch and a font for text rendering **/
-	public final SpriteBatch batch;
-	public final Font font;
+	public SpriteBatch batch;
+	public Font font;
 	
 	/** vertices for polygon rendering **/
 	private static Vector2[] vertices = new Vector2[100];

File: gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -439,6 +439,8 @@ public void onSurfaceCreated(javax.microedition.khronos.opengles.GL10 gl, EGLCon
             listener.surfaceCreated(app);
         mean = new WindowedMean(5);
         this.lastFrameTime = System.nanoTime();
+        
+        gl.glViewport( 0, 0, this.width, this.height );
     }
 
     /**

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/LineJoint.java
Patch:
@@ -119,7 +119,7 @@ public void enableMotor(boolean flag)
 		jniEnableMotor( addr, flag );
 	}
 	
-	private native boolean jniEnableMotor( long addr, boolean flag );
+	private native void jniEnableMotor( long addr, boolean flag );
 
 	/**
 	 *  Set the motor speed, usually in meters per second.

File: gdx/src/com/badlogic/gdx/math/Vector3.java
Patch:
@@ -475,7 +475,7 @@ public String toString()
      * @param z The z-component of the other vector
      * @return The dot product
      */
-	public float dot(int x, int y, int z) { 
+	public float dot(float x, float y, float z) { 
 		return this.x * x + this.y * y + this.z * z;
 	}
 

File: gdx-tests/src/com/badlogic/gdx/tests/box2d/TestCollection.java
Patch:
@@ -7,7 +7,7 @@
 
 public class TestCollection implements RenderListener, InputListener 
 {
-	private final Box2DTest[] tests = { new SphereStack(), new Cantilever(), new ApplyForce(), new ContinuousTest(), new Prismatic(), new CharacterCollision(), new BodyTypes(), new SimpleTest(), new Pyramid( ), new OneSidedPlatform(), new VerticalStack(),
+	private final Box2DTest[] tests = { new CollisionFiltering(), new Chain(), new Bridge(), new SphereStack(), new Cantilever(), new ApplyForce(), new ContinuousTest(), new Prismatic(), new CharacterCollision(), new BodyTypes(), new SimpleTest(), new Pyramid( ), new OneSidedPlatform(), new VerticalStack(),
 										new VaryingRestitution()
 	};
 	

File: gdx/src/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java
Patch:
@@ -146,7 +146,7 @@ private void drawSolidCircle( Vector2 center, float radius, Vector2 axis, Color
 		renderer.color( color.r, color.g, color.b, color.a );
 		renderer.vertex( center.x, center.y, 0 );
 		renderer.color( color.r, color.g, color.b, color.a );
-		renderer.vertex( center.x + axis.x * radius, center.y + axis.y, 0 );
+		renderer.vertex( center.x + axis.x * radius, center.y + axis.y * radius, 0 );
 		renderer.end( );
 	}
 	

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/PrismaticJointDef.java
Patch:
@@ -45,7 +45,7 @@ public void initialize(Body bodyA, Body bodyB, Vector2 anchor, Vector2 axis)
 		this.bodyB = bodyB;
 		localAnchorA.set( bodyA.getLocalPoint( anchor ) );
 		localAnchorB.set( bodyB.getLocalPoint( anchor ) );
-		localAxis1.set(bodyA.getLocalVector( anchor ));
+		localAxis1.set(bodyA.getLocalVector( axis ));
 		referenceAngle = bodyB.getAngle() - bodyA.getAngle();
 		
 	}

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -248,7 +248,7 @@ public void getScreenToWorld( float screenX, float screenY, Vector2 world )
 		screenY = screenY / graphics.getHeight() * viewportHeight;
 		
 		world.set( ( screenX * scale ) - ( viewportWidth * scale ) / 2 + position.x,
-				   ( (viewportHeight -screenY-1) * scale ) - ( viewportHeight * scale ) / 2 + position.y );
+				   ( (viewportHeight -screenY) * scale ) - ( viewportHeight * scale ) / 2 + position.y );
 	}
 	
 	/**

File: gdx/src/com/badlogic/gdx/physics/box2d/Body.java
Patch:
@@ -132,9 +132,12 @@ public void setTransform(Vector2 position, float angle)
 	private final Transform transform = new Transform( );
 	public Transform getTransform()
 	{
+		jniGetTransform( addr, transform.vals );
 		return transform;
 	}
 
+	private native void jniGetTransform( long addr, float[] vals );
+	
 	/**
 	 * Get the world body origin position.
 	 * @return the world position of the body's origin.

File: gdx/src/com/badlogic/gdx/physics/box2d/BodyDef.java
Patch:
@@ -53,7 +53,7 @@ public int getValue()
 	
 	/** The body type: static, kinematic, or dynamic.
 	    Note: if a dynamic body would have zero mass, the mass is set to one. **/
-	public BodyType type;
+	public BodyType type = BodyType.StaticBody;
 
 	/** The world position of the body. Avoid creating bodies at the origin
 	    since this can lead to many overlapping shapes. **/

File: gdx/src/com/badlogic/gdx/physics/box2d/Fixture.java
Patch:
@@ -66,7 +66,7 @@ public Shape getShape( )
 		if( shape == null )
 		{
 			long shapeAddr = jniGetShape( addr );
-			int type = Shape.jniGetType( addr );
+			int type = Shape.jniGetType( shapeAddr );
 			
 			if( type == 0 )
 				shape = new CircleShape( shapeAddr );

File: gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
Patch:
@@ -175,7 +175,7 @@ public void render(Application app)
 		// matrices
 		GL10 gl = app.getGraphics().getGL10();
 		gl.glClear( GL10.GL_COLOR_BUFFER_BIT );
-		camera.setMatrices( app.getGraphics() );
+		camera.setMatrices( );
 		
 		// next we render the ground body
 		renderBox( gl, groundBody, 50, 1 );

File: gdx/src/com/badlogic/gdx/physics/box2d/Shape.java
Patch:
@@ -74,6 +74,8 @@ public void dispose( )
 	}
 	
 	private native void jniDispose( long addr );
+	
+	protected static native int jniGetType( long addr );
 
 //	/// Test a point for containment in this shape. This only works for convex shapes.
 //	/// @param xf the shape world transform.

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/PrismaticJointDef.java
Patch:
@@ -63,7 +63,7 @@ public void initialize(Body bodyA, Body bodyB, Vector2 anchor, Vector2 axis)
 	/**
 	 *  The local translation axis in body1.
 	 */
-	public final Vector2 localAxis1 = new Vector2( );
+	public final Vector2 localAxis1 = new Vector2(1, 0);
 
 	/**
 	 *  The constrained angle between the bodies: body2_angle - body1_angle.

File: gdx-tests/src/com/badlogic/gdx/tests/AudioRecorderTest.java
Patch:
@@ -83,6 +83,6 @@ public void pause(Application app)
 	public void resume(Application app) 
 	{
 		device = app.getAudio().newAudioDevice(true);
-		recorder = app.getAudio().newAudioRecoder( 22050, true );		
+		recorder = app.getAudio().newAudioRecoder( 44100, true );		
 	}	
 }

File: gdx/src/com/badlogic/gdx/physics/box2d/Filter.java
Patch:
@@ -10,18 +10,18 @@ public class Filter
 	/**
 	 * The collision category bits. Normally you would just set one bit.
 	 */
-	public short categoryBits;
+	public short categoryBits = 0x0001;
 	
 	/**
 	 * The collision mask bits. This states the categories that this
 	 * shape would accept for collision.
 	 */
-	public short maskBits;
+	public short maskBits = -1;
 	
 	/**
 	 * Collision groups allow a certain group of objects to never collide (negative)
 	 * or always collide (positive). Zero means no collision group. Non-zero group
 	 * filtering always wins against the mask bits.
 	 */	 
-	public short groupIndex;
+	public short groupIndex = 0;
 }

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -277,12 +277,12 @@ public int getWorldToScreenX( float worldX )
 	
 	/**
 	 * Returns the given screen y-coordinates as a world y-coordinate
-	 * @param screenX The screen y-coordinate
+	 * @param screenY The screen y-coordinate
 	 * @return The world y-coordinate
 	 */
-	public float getScreenToWorldY( float screenX )
+	public float getScreenToWorldY( float screenY )
 	{
-		return ( (viewportHeight - screenX-1) * scale ) - ( viewportHeight * scale ) / 2 + position.y;
+		return ( (viewportHeight - screenY-1) * scale ) - ( viewportHeight * scale ) / 2 + position.y;
 	}
 	
 	/**

File: gdx-backend-applet/src/com/badlogic/gdx/backends/applet/AppletApplication.java
Patch:
@@ -57,10 +57,11 @@ public class AppletApplication implements Application
 	 * method. 
 	 * 
 	 * @param useGL20IfAvailable wheter to use OpenGL 2.0 if it is available or not
+	 * @param allowFixedPoint not allowing fixed point will reduce memory consumption considerably
 	 */
-	public AppletApplication( Applet applet, boolean useGL20IfAvailable )
+	public AppletApplication( Applet applet, boolean useGL20IfAvailable, boolean allowFixedPoint )
 	{
-		graphics = new AppletGraphics( this, applet, useGL20IfAvailable );
+		graphics = new AppletGraphics( this, applet, useGL20IfAvailable, allowFixedPoint );
 		input = new AppletInput( graphics.graphicPanel );
 		audio = new AppletAudio( );
 	}

File: gdx-backend-applet/src/com/badlogic/gdx/backends/applet/AppletGL11.java
Patch:
@@ -37,9 +37,9 @@ public final class AppletGL11 extends AppletGL10 implements GL11
 	double tmpDouble[] = new double[1000];
 	float tmpFloat[] = new float[1000];
 	
-	public AppletGL11(GL gl) 
+	public AppletGL11(GL gl, boolean allowFixedPoint) 
 	{
-		super(gl);
+		super(gl, allowFixedPoint);
 	}
 
 	@Override

File: gdx-backend-applet/src/com/badlogic/gdx/backends/applet/AppletMusic.java
Patch:
@@ -40,7 +40,7 @@ private enum State
 	
 	private State state = State.Stopped;
 	private final Thread thread;
-	private final File file;
+	private final AppletFileHandle file;
 	private AudioInputStream ain;
 	private final SourceDataLine line;
 	private final byte[] buffer;
@@ -49,7 +49,7 @@ private enum State
 	
 	public AppletMusic( AppletFileHandle handle ) throws UnsupportedAudioFileException, IOException, LineUnavailableException
 	{			
-		this.file = handle.getFile();
+		this.file = handle;
 		
 		openAudioInputStream();		
 		AudioFormat audioFormat = ain.getFormat();		
@@ -68,7 +68,7 @@ public AppletMusic( AppletFileHandle handle ) throws UnsupportedAudioFileExcepti
 	
 	private void openAudioInputStream( ) throws UnsupportedAudioFileException, IOException
 	{			
-		ain = AudioSystem.getAudioInputStream(file);		
+		ain = AudioSystem.getAudioInputStream(file.getInputStream());		
 		AudioFormat baseFormat = ain.getFormat();
 		AudioFormat  decodedFormat = new AudioFormat(
 				AudioFormat.Encoding.PCM_SIGNED,

File: gdx-backend-applet/src/com/badlogic/gdx/backends/applet/AppletSound.java
Patch:
@@ -57,7 +57,7 @@ public class AppletSound implements Sound
 	public AppletSound( AppletAudio audio, AppletFileHandle file ) throws UnsupportedAudioFileException, IOException
 	{			
 		this.audio = audio;
-		InputStream fin = new BufferedInputStream( new FileInputStream( file.getFile() ) );		
+		InputStream fin = new BufferedInputStream( file.getInputStream() );		
 		AudioInputStream ain = AudioSystem.getAudioInputStream( fin );
 		AudioFormat baseFormat = ain.getFormat();
 		AudioFormat  decodedFormat = new AudioFormat(

File: gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvaders.java
Patch:
@@ -71,6 +71,7 @@ public void surfaceCreated(Application app)
 			Music music = app.getAudio().newMusic( app.getFiles().getFileHandle( "data/8.12.mp3", FileType.Internal ) );
 			music.setLooping(true);
 			music.play();
+			isInitialized = true;
 		}
 	}
 }

File: gdx/src/com/badlogic/gdx/Version.java
Patch:
@@ -9,5 +9,5 @@
 public class Version 
 {	
 	/** the current version of libgdx in the major.minor format **/
-	public static String VERSION = "0.51";
+	public static String VERSION = "0.52";
 }

File: gdx/src/com/badlogic/gdx/graphics/SpriteBatch.java
Patch:
@@ -696,14 +696,16 @@ public void drawText( Font font, String text, float x, float y, Color tint )
 	 */
 	public void disableBlending( )
 	{
-		blendingDisabled = true;
+		renderMesh();
+		blendingDisabled = true;		
 	}
 	
 	/**
 	 * Enables blending for sprites
 	 */
 	public void enableBlending( )
 	{
+		renderMesh();
 		blendingDisabled = false;
 	}
 }

File: gdx/src/com/badlogic/gdx/physics/box2d/World.java
Patch:
@@ -149,7 +149,7 @@ private native long jniCreateBody( long addr,
 	 */
 	public void destroyBody(Body body)
 	{
-		jniDestroyBody( body.addr, body.addr );
+		jniDestroyBody( addr, body.addr );
 		this.bodies.remove( body.addr );
 		for( int i = 0; i < body.getFixtureList().size(); i++ )
 			this.fixtures.remove(body.getFixtureList().get(i).addr);

File: gdx/src/com/badlogic/gdx/graphics/Color.java
Patch:
@@ -12,8 +12,8 @@ public class Color
 	public static final Color WHITE = new Color( 1, 1, 1, 1 );
 	public static final Color BLACK = new Color( 0, 0, 0, 1 );
 	public static final Color RED = new Color( 1, 0, 0, 1 );
-	public static final Color BLUE = new Color( 0, 1, 0, 1 );
-	public static final Color GREEN = new Color( 0, 0, 1, 1 );
+	public static final Color GREEN = new Color( 0, 1, 0, 1 );
+	public static final Color BLUE = new Color( 0, 0, 1, 1 );
 	
 	/** the red, green, blue and alpha components **/
 	public float r, g, b, a;

File: gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java
Patch:
@@ -54,7 +54,7 @@ public void render(Application app)
 		cam.setMatrices(app.getGraphics());	
 				
 		long s = System.nanoTime();
-		world.step( app.getGraphics().getDeltaTime(), 8, 3 );
+		world.step( app.getGraphics().getDeltaTime(), 1, 1 );
 		float updateTime = (System.nanoTime()-s)/1000000000.0f;
 		
 		for( int i = 0; i < boxes.size(); i++ )				
@@ -122,7 +122,7 @@ private void createWorld( )
 		ground.createFixture( groundBox, 1 );
 		groundBox.dispose();
 		
-		for( int i = 0; i < 20; i++ )
+		for( int i = 0; i < 100; i++ )
 		{			
 			boxes.add(createBox( ));
 		}			

File: gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -337,7 +337,7 @@ public void setRenderListener(RenderListener listener)
 		synchronized( this )
 		{
 			if( this.listener != null )
-				listener.dispose( app );
+				this.listener.dispose( app );
 			this.listener = listener;
 		}
 	}

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -178,7 +178,6 @@ public void update( )
 	 */
 	public void setMatrices( Graphics graphics )
 	{
-		setViewport(graphics.getWidth(), graphics.getHeight());
 		update();
 		GL10 gl = graphics.getGL10();
 		gl.glMatrixMode( GL10.GL_PROJECTION );

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/DistanceJoint.java
Patch:
@@ -1,12 +1,13 @@
 package com.badlogic.gdx.physics.box2d.joints;
 
 import com.badlogic.gdx.physics.box2d.Joint;
+import com.badlogic.gdx.physics.box2d.World;
 
 public class DistanceJoint extends Joint
 {
 
-	protected DistanceJoint(long addr) {
-		super(addr);
+	public DistanceJoint(World world, long addr) {
+		super( world, addr);
 		// TODO Auto-generated constructor stub
 	}
 

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/FrictionJoint.java
Patch:
@@ -1,12 +1,13 @@
 package com.badlogic.gdx.physics.box2d.joints;
 
 import com.badlogic.gdx.physics.box2d.Joint;
+import com.badlogic.gdx.physics.box2d.World;
 
 public class FrictionJoint extends Joint
 {
 
-	protected FrictionJoint(long addr) {
-		super(addr);
+	public FrictionJoint( World world, long addr) {
+		super(world, addr);
 		// TODO Auto-generated constructor stub
 	}
 

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/LineJoint.java
Patch:
@@ -1,12 +1,13 @@
 package com.badlogic.gdx.physics.box2d.joints;
 
 import com.badlogic.gdx.physics.box2d.Joint;
+import com.badlogic.gdx.physics.box2d.World;
 
 public class LineJoint extends Joint
 {
 
-	protected LineJoint(long addr) {
-		super(addr);
+	public LineJoint(World world, long addr) {
+		super(world, addr);
 		// TODO Auto-generated constructor stub
 	}
 

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/MouseJoint.java
Patch:
@@ -1,12 +1,13 @@
 package com.badlogic.gdx.physics.box2d.joints;
 
 import com.badlogic.gdx.physics.box2d.Joint;
+import com.badlogic.gdx.physics.box2d.World;
 
 public class MouseJoint extends Joint
 {
 
-	protected MouseJoint(long addr) {
-		super(addr);
+	public MouseJoint(World world, long addr) {
+		super(world, addr);
 		// TODO Auto-generated constructor stub
 	}
 

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/PrismaticJoint.java
Patch:
@@ -1,11 +1,12 @@
 package com.badlogic.gdx.physics.box2d.joints;
 
 import com.badlogic.gdx.physics.box2d.Joint;
+import com.badlogic.gdx.physics.box2d.World;
 
 public class PrismaticJoint extends Joint {
 
-	protected PrismaticJoint(long addr) {
-		super(addr);
+	public PrismaticJoint( World world, long addr) {
+		super(world, addr);
 		// TODO Auto-generated constructor stub
 	}
 

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/PulleyJoint.java
Patch:
@@ -1,11 +1,12 @@
 package com.badlogic.gdx.physics.box2d.joints;
 
 import com.badlogic.gdx.physics.box2d.Joint;
+import com.badlogic.gdx.physics.box2d.World;
 
 public class PulleyJoint extends Joint{
 
-	protected PulleyJoint(long addr) {
-		super(addr);
+	public PulleyJoint(World world, long addr) {
+		super(world, addr);
 		// TODO Auto-generated constructor stub
 	}
 

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/RevoluteJoint.java
Patch:
@@ -1,12 +1,13 @@
 package com.badlogic.gdx.physics.box2d.joints;
 
 import com.badlogic.gdx.physics.box2d.Joint;
+import com.badlogic.gdx.physics.box2d.World;
 
 public class RevoluteJoint extends Joint
 {
 
-	protected RevoluteJoint(long addr) {
-		super(addr);
+	public RevoluteJoint( World world, long addr) {
+		super(world,addr);
 		// TODO Auto-generated constructor stub
 	}
 

File: gdx/src/com/badlogic/gdx/physics/box2d/joints/WeldJoint.java
Patch:
@@ -1,11 +1,12 @@
 package com.badlogic.gdx.physics.box2d.joints;
 
 import com.badlogic.gdx.physics.box2d.Joint;
+import com.badlogic.gdx.physics.box2d.World;
 
 public class WeldJoint extends Joint{
 
-	protected WeldJoint(long addr) {
-		super(addr);
+	public WeldJoint(World world, long addr) {
+		super(world,addr);
 		// TODO Auto-generated constructor stub
 	}
 

File: gdx/src/com/badlogic/gdx/physics/box2d/Body.java
Patch:
@@ -82,10 +82,10 @@ public void destroyFixture(Fixture fixture)
 	 */
 	public void setTransform(Vector2 position, float angle)
 	{
-		jniSetTransform(position.x, position.y, angle);
+		jniSetTransform( addr, position.x, position.y, angle);
 	}	
 	
-	private native void jniSetTransform( float positionX, float positionY, float angle );
+	private native void jniSetTransform( long addr, float positionX, float positionY, float angle );
 	
 	/** 
 	 * Get the body transform for the body's origin. FIXME

File: gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -26,6 +26,7 @@
 import android.hardware.SensorEvent;
 import android.hardware.SensorEventListener;
 import android.hardware.SensorManager;
+import android.opengl.GLSurfaceView;
 import android.os.Handler;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
@@ -36,7 +37,6 @@
 
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.InputListener;
-import com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView;
 
 /**
  * An implementation of the {@link Input} interface for Android. 

File: gdx-backend-android/src/com/badlogic/gdx/backends/android/surfaceview/GLSurfaceView20.java
Patch:
@@ -59,7 +59,7 @@
  *   that matches it exactly (with regards to red/green/blue/alpha channels
  *   bit depths). Failure to do so would result in an EGL_BAD_MATCH error.
  */
-public class GLSurfaceView20 extends GLSurfaceView {
+public class GLSurfaceView20 extends GLBaseSurfaceView {
     private static String TAG = "GL2JNIView";
     private static final boolean DEBUG = false;
 
@@ -101,7 +101,7 @@ private void init(boolean translucent, int depth, int stencil) {
         /* Set the renderer responsible for frame rendering */        
     }
 
-    private static class ContextFactory implements GLSurfaceView.EGLContextFactory {
+    private static class ContextFactory implements GLBaseSurfaceView.EGLContextFactory {
         private static int EGL_CONTEXT_CLIENT_VERSION = 0x3098;
         public EGLContext createContext(EGL10 egl, EGLDisplay display, EGLConfig eglConfig) {
             Log.w(TAG, "creating OpenGL ES 2.0 context");
@@ -124,7 +124,7 @@ private static void checkEglError(String prompt, EGL10 egl) {
         }
     }
 
-    private static class ConfigChooser implements GLSurfaceView.EGLConfigChooser {
+    private static class ConfigChooser implements GLBaseSurfaceView.EGLConfigChooser {
 
         public ConfigChooser(int r, int g, int b, int a, int depth, int stencil) {
             mRedSize = r;

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -238,7 +238,9 @@ private void fillBuffers( )
 	private void fillBuffers( GL11 gl )
 	{							
 		gl.glBindBuffer( GL11.GL_ARRAY_BUFFER, vertexBufferObjectHandle );
-		gl.glBufferSubData( GL11.GL_ARRAY_BUFFER, 0, getNumVertices() * attributes.vertexSize, vertices );
+		gl.glBufferData( GL11.GL_ARRAY_BUFFER, getNumVertices() * attributes.vertexSize, vertices, isStatic?GL11.GL_STATIC_DRAW:GL11.GL_DYNAMIC_DRAW);
+		// FIXME FUCK YOU QUALCOMM, your glBufferSubData is the slowest shit on earth...
+//		gl.glBufferSubData( GL11.GL_ARRAY_BUFFER, 0, getNumVertices() * attributes.vertexSize, vertices );
 		gl.glBindBuffer( GL11.GL_ARRAY_BUFFER, 0 );
 		
 		if( maxIndices > 0 )

File: gdx/src/com/badlogic/gdx/graphics/ModelLoader.java
Patch:
@@ -116,7 +116,7 @@ public static Mesh loadGdx3D( Graphics graphics, InputStream in, boolean managed
 			{
 				float[] vertices = new float[numElements];
 				for( int i = 0; i < numElements; i++ )
-					vertices[i] = din.readInt();
+					vertices[i] = din.readFloat();
 				mesh.setVertices( vertices );
 			}
 			

File: gdx/src/com/badlogic/gdx/graphics/ShaderProgram.java
Patch:
@@ -404,6 +404,8 @@ public void setVertexAttribute(String name, int size, int type, boolean normaliz
 	{	
 		checkManaged( );
 		int location = fetchAttributeLocation(name);
+		if( location == -1 )
+			return;
 		gl.glVertexAttribPointer( location, size, type, normalize, stride, offset );
 	}
 	

File: gdx/src/com/badlogic/gdx/graphics/SpriteBatch.java
Patch:
@@ -161,6 +161,7 @@ public void begin( Matrix transform )
 			viewMatrix.setToOrtho2D( 0, 0, graphics.getWidth(), graphics.getHeight() );
 					
 			GL10 gl = graphics.getGL10();
+			gl.glViewport( 0, 0, graphics.getWidth(), graphics.getHeight() );
 			gl.glDisable( GL10.GL_LIGHTING );
 			gl.glDisable( GL10.GL_DEPTH_TEST );
 			gl.glDisable( GL10.GL_CULL_FACE );
@@ -189,7 +190,8 @@ public void begin( Matrix transform )
 			transform.set( transform );
 			viewMatrix.setToOrtho2D( 0, 0, graphics.getWidth(), graphics.getHeight() ).mul(transform);
 					
-			GL20 gl = graphics.getGL20();			
+			GL20 gl = graphics.getGL20();		
+			gl.glViewport( 0, 0, graphics.getWidth(), graphics.getHeight() );
 			gl.glDisable( GL20.GL_DEPTH_TEST );
 			gl.glDisable( GL20.GL_CULL_FACE );
 			gl.glDepthMask ( false );

File: gdx-tests/src/com/badlogic/gdx/tests/CollisionTest.java
Patch:
@@ -81,6 +81,7 @@ public void render(Application app)
 		GL10 gl = app.getGraphics().getGL10();
 		gl.glClearColor( 0, 0, 0, 0 );
 		gl.glClear( GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT );
+		gl.glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
 		
 		render3D( gl, app.getGraphics() );			
 	}			

File: gdx-tests/src/com/badlogic/gdx/tests/FixedPointTest.java
Patch:
@@ -48,6 +48,7 @@ public void dispose(Application application)
 	public void render(Application app) 
 	{			
 		GL10 gl = app.getGraphics().getGL10();
+		gl.glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
 		gl.glClearColor( 0.7f, 0.7f, 0.7f, 1 );
 		gl.glClear( GL10.GL_COLOR_BUFFER_BIT );
 		gl.glMatrixMode( GL10.GL_MODELVIEW );

File: gdx-tests/src/com/badlogic/gdx/tests/FloatTest.java
Patch:
@@ -49,6 +49,7 @@ public void dispose(Application application)
 	public void render(Application app) 
 	{			
 		GL10 gl = app.getGraphics().getGL10();
+		gl.glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
 		gl.glClearColor( 0.7f, 0.7f, 0.7f, 1 );
 		gl.glClear( GL10.GL_COLOR_BUFFER_BIT );
 		gl.glMatrixMode( GL10.GL_MODELVIEW );

File: gdx-tests/src/com/badlogic/gdx/tests/FrameBufferTest.java
Patch:
@@ -32,6 +32,7 @@ public void dispose(Application app)
 	public void render(Application app) 
 	{						
 		frameBuffer.begin();
+		app.getGraphics().getGL20().glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
 		app.getGraphics().getGL20().glClearColor( 0f, 0f, 0f, 1 );
 		app.getGraphics().getGL20().glClear( GL20.GL_COLOR_BUFFER_BIT );
 		meshShader.begin();

File: gdx-tests/src/com/badlogic/gdx/tests/ImmediateModeRendererTest.java
Patch:
@@ -40,6 +40,7 @@ public void dispose(Application app)
 	@Override
 	public void render(Application app) 
 	{	
+		app.getGraphics().getGL10().glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
 		app.getGraphics().getGL10().glEnable( GL10.GL_TEXTURE_2D );
 		texture.bind();
 		renderer.begin( GL10.GL_TRIANGLES );

File: gdx-tests/src/com/badlogic/gdx/tests/MeshShaderTest.java
Patch:
@@ -94,6 +94,7 @@ public void render(Application app)
 		angle += app.getGraphics().getDeltaTime() * 45;
 		matrix.setToRotation( axis, angle );		
 		
+		app.getGraphics().getGL20().glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
 		app.getGraphics().getGL20().glClearColor( 0.2f, 0.2f, 0.2f, 1 );
 		app.getGraphics().getGL20().glClear( GL20.GL_COLOR_BUFFER_BIT );
 		app.getGraphics().getGL20().glEnable( GL20.GL_TEXTURE_2D );

File: gdx-tests/src/com/badlogic/gdx/tests/MeshTest.java
Patch:
@@ -26,6 +26,7 @@ public void dispose(Application app) {
 	@Override
 	public void render(Application app) 
 	{
+		app.getGraphics().getGL10().glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
 		app.getGraphics().getGL10().glEnable( GL10.GL_TEXTURE_2D );
 		texture.bind();
 		mesh.render( GL10.GL_TRIANGLES, 0, 3 );

File: gdx-tests/src/com/badlogic/gdx/tests/ObjTest.java
Patch:
@@ -74,6 +74,7 @@ public void render(Application app)
 	{	
 		GL10 gl = app.getGraphics().getGL10();
 				
+		gl.glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
 		gl.glClear( GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT );
 		gl.glEnable( GL10.GL_DEPTH_TEST );
 		gl.glEnable( GL10.GL_LIGHTING );		

File: gdx-tests/src/com/badlogic/gdx/tests/PerformanceTest.java
Patch:
@@ -26,6 +26,7 @@ public void dispose(Application app)
 	@Override
 	public void render(Application app) 
 	{
+		app.getGraphics().getGL10().glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
 		Mesh m = null;
 		if( fixed )		
 			m = fpMesh;

File: gdx-tests/src/com/badlogic/gdx/tests/Pong.java
Patch:
@@ -157,6 +157,7 @@ public void render(Application app)
 		
 		// First we clear the screen
 		GL10 gl = app.getGraphics().getGL10();
+		gl.glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
 		gl.glClear( GL10.GL_COLOR_BUFFER_BIT );
 		
 		// Next we update the camera and set the camera matrix

File: gdx-tests/src/com/badlogic/gdx/tests/TextTest.java
Patch:
@@ -43,6 +43,7 @@ public void surfaceCreated(Application app)
 	@Override
 	public void render(Application app) 
 	{
+		app.getGraphics().getGL10().glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
 		app.getGraphics().getGL10().glClearColor( 0.7f, 0.7f, 0.7f, 1 );
 		app.getGraphics().getGL10().glClear(GL10.GL_COLOR_BUFFER_BIT );						
 		

File: gdx-tests/src/com/badlogic/gdx/tests/VertexArrayTest.java
Patch:
@@ -41,6 +41,7 @@ public void dispose(Application application)
 	public void render(Application app) 
 	{			
 		GL10 gl = app.getGraphics().getGL10();
+		gl.glViewport( 0, 0, app.getGraphics().getWidth(), app.getGraphics().getHeight() );
 		gl.glClearColor( 0.7f, 0.7f, 0.7f, 1 );
 		gl.glClear( GL10.GL_COLOR_BUFFER_BIT );		
 		

File: gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidTexture.java
Patch:
@@ -112,7 +112,8 @@ final class AndroidTexture implements Texture
 		buildMipmap( gl, image);					
 		gl.glBindTexture( GL10.GL_TEXTURE_2D, 0 );
 		
-		textures.add( this );
+		if( isManaged )
+			textures.add( this );
 	}
 	
 	AndroidTexture( AndroidGraphics graphics, GL20 gl, Bitmap image, TextureFilter minFilter, TextureFilter maxFilter, TextureWrap uWrap, TextureWrap vWrap, boolean managed )

File: gdx/src/com/badlogic/gdx/graphics/FrameBuffer.java
Patch:
@@ -61,7 +61,9 @@ public FrameBuffer( Graphics graphics, Pixmap.Format format, int width, int heig
 		colorTexture = graphics.newTexture(width, height, format, TextureFilter.Linear, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge, managed);
 		
 		build( );
-		buffers.add( this );
+		
+		if( managed )
+			buffers.add( this );
 	}
 	
 	private void build( )

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -132,7 +132,8 @@ public Mesh( Graphics graphics, boolean managed, boolean isStatic, boolean useFi
 		
 		createBuffers( );
 		
-		meshes.add( this );
+		if( managed )
+			meshes.add( this );
 	}
 	
 	private void createBuffers( )

File: gdx/src/com/badlogic/gdx/graphics/ShaderProgram.java
Patch:
@@ -102,7 +102,8 @@ public ShaderProgram( GL20 gl, String vertexShader, String fragmentShader, boole
 		ByteBuffer buffer = ByteBuffer.allocateDirect( 4 * 16 );
 		buffer.order(ByteOrder.nativeOrder());
 		matrix = buffer.asFloatBuffer();
-		shaders.add( this );
+		if( managed )
+			shaders.add( this );
 	}
 	
 	/**

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.ArrayList;
 
 import com.badlogic.gdx.Graphics;
-import com.badlogic.gdx.backends.desktop.JoglGraphics;
+import com.badlogic.gdx.Graphics.GraphicsType;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 
 /**
@@ -93,7 +93,7 @@ public Mesh( Graphics graphics, boolean managed, boolean isStatic, boolean useFi
 		this.maxIndices = maxIndices;
 		this.attributes = new VertexAttributes( attributes );
 		
-		if( graphics instanceof JoglGraphics )
+		if( graphics.getType() == GraphicsType.JoglGL )
 			usesDirectBuffers = true;
 		else
 		{
@@ -138,7 +138,7 @@ public Mesh( Graphics graphics, boolean managed, boolean isStatic, boolean useFi
 	private void createBuffers( )
 	{
 		// FIXME this is a hack as there's no way to support fixed point VBOs
-		if( useFixedPoint && graphics instanceof JoglGraphics )
+		if( useFixedPoint && graphics.getType() == GraphicsType.JoglGL)
 			return;
 		
 		if( graphics.isGL11Available() == false && graphics.isGL20Available() == false )

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -489,7 +489,7 @@ private void renderVBO( int primitiveType, int offset, int count )
 		if( maxIndices > 0 )
 		{			
 			gl.glBindBuffer( GL11.GL_ELEMENT_ARRAY_BUFFER, indexBufferObjectHandle );
-			gl.glDrawElements( primitiveType, count, GL10.GL_UNSIGNED_SHORT, offset );
+			gl.glDrawElements( primitiveType, count, GL10.GL_UNSIGNED_SHORT, offset * 2 );
 		}	
 		else
 		{
@@ -618,7 +618,7 @@ public void render( ShaderProgram shader, int primitiveType, int offset, int cou
 		if( maxIndices > 0 )
 		{			
 			gl.glBindBuffer( GL11.GL_ELEMENT_ARRAY_BUFFER, indexBufferObjectHandle );
-			gl.glDrawElements( primitiveType, count, GL10.GL_UNSIGNED_SHORT, offset );
+			gl.glDrawElements( primitiveType, count, GL10.GL_UNSIGNED_SHORT, offset * 2 );
 		}	
 		else
 		{

File: gdx/src/com/badlogic/gdx/graphics/loaders/ObjLoader.java
Patch:
@@ -188,11 +188,11 @@ public static Mesh loadObjFromString( Graphics graphics, String obj, boolean man
 		Mesh mesh = null;
 		
 		ArrayList<VertexAttribute> attributes = new ArrayList<VertexAttribute>( );
-		attributes.add( new VertexAttribute( Usage.Position, 3, "a_position" ) );
+		attributes.add( new VertexAttribute( Usage.Position, 3, "a_Position" ) );
 		if( numNormals > 0 )
-			attributes.add( new VertexAttribute( Usage.Normal, 3, "a_normal" ) );
+			attributes.add( new VertexAttribute( Usage.Normal, 3, "a_Normal" ) );
 		if( numUV > 0 )
-			attributes.add( new VertexAttribute( Usage.TextureCoordinates, 2, "a_texCoords" ) );
+			attributes.add( new VertexAttribute( Usage.TextureCoordinates, 2, "a_TexCoord" ) );
 				
 		mesh = new Mesh( graphics, managed, true, !useFloats, numFaces * 3, 0, attributes.toArray( new VertexAttribute[attributes.size()] ) );
 		if( useFloats )

File: gdx/src/com/badlogic/gdx/tests/SpriteBatchTest.java
Patch:
@@ -99,7 +99,7 @@ public void surfaceChanged(Application app, int width, int height)
 	@Override
 	public void surfaceCreated(Application app) 
 	{					
-		spriteBatch = new SpriteBatch( app.getGraphics() );
+		spriteBatch = new SpriteBatch( app.getGraphics() );		
 		
 		Pixmap pixmap = app.getGraphics().newPixmap( app.getFiles().getFileHandle( "data/badlogicsmall.jpg", FileType.Internal ) );		
 		texture = app.getGraphics().newTexture( 32, 32, Format.RGB565, TextureFilter.Nearest, TextureFilter.Nearest, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge, true );

File: gdx/src/com/badlogic/gdx/math/Vector3.java
Patch:
@@ -565,10 +565,11 @@ public boolean equals(Object obj) {
 	 * @param scalarY
 	 * @param scalarZ
 	 */
-	public void scale(float scalarX, float scalarY, float scalarZ) 
+	public Vector3 scale(float scalarX, float scalarY, float scalarZ) 
 	{	
 		x *= scalarX;
 		y *= scalarY;
 		z *= scalarZ;
+		return this;
 	}
 }

File: gdx/src/com/badlogic/gdx/graphics/SpriteBatch.java
Patch:
@@ -119,7 +119,7 @@ private void createShader( )
 							    "  gl_FragColor = v_color * texture2D(u_texture, v_texCoords);\n" +
 							    "}"; 
 		
-		shader = new ShaderProgram( graphics.getGL20(), vertexShader, fragmentShader);
+		shader = new ShaderProgram( graphics.getGL20(), vertexShader, fragmentShader, true);
 		if( shader.isCompiled() == false )
 			throw new IllegalArgumentException( "couldn't compile shader: " + shader.getLog()  );
 	}

File: gdx/src/com/badlogic/gdx/tests/MeshShaderTest.java
Patch:
@@ -47,7 +47,7 @@ public void surfaceCreated(Application app)
 							    "  gl_FragColor = v_color * texture2D(u_texture, v_texCoords);\n" +
 							    "}";  
 		
-		shader = new ShaderProgram( app.getGraphics().getGL20(), vertexShader, fragmentShader);
+		shader = new ShaderProgram( app.getGraphics().getGL20(), vertexShader, fragmentShader, true);
 		if( shader.isCompiled() == false )
 		{
 			app.log( "ShaderTest", shader.getLog() );

File: gdx/src/com/badlogic/gdx/backends/android/surfaceview/GLSurfaceView20.java
Patch:
@@ -65,7 +65,7 @@ public class GLSurfaceView20 extends GLSurfaceView {
 
     public GLSurfaceView20(Context context) {
         super(context);
-        init(false, 0, 0);
+        init(false, 16, 0);
     }
 
     public GLSurfaceView20(Context context, boolean translucent, int depth, int stencil) {

File: gdx/src/com/badlogic/gdx/graphics/ModelLoader.java
Patch:
@@ -21,7 +21,7 @@
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.graphics.loaders.ObjLoader;
 import com.badlogic.gdx.graphics.loaders.OctLoader;
-import com.badlogic.gdx.math.Vector;
+import com.badlogic.gdx.math.Vector3;
 
 /**
  * A class for loading various model formats such as 
@@ -61,7 +61,7 @@ public static Mesh loadObj( Graphics graphics, InputStream in, boolean managed,
 	 * @param start the start position as defined in the map
 	 * @return a Mesh holding the OCT data or null in case something went wrong.
 	 */
-	public static Mesh loadOct( Graphics graphics, InputStream in, boolean managed, boolean useFloats, Vector start )
+	public static Mesh loadOct( Graphics graphics, InputStream in, boolean managed, boolean useFloats, Vector3 start )
 	{
 		return OctLoader.loadOct( graphics, in, managed, useFloats, start );
 	}

File: gdx/src/com/badlogic/gdx/graphics/loaders/OctLoader.java
Patch:
@@ -7,7 +7,7 @@
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.math.Vector;
+import com.badlogic.gdx.math.Vector3;
 
 /**
  * Loads an OCT file as found in many of Paul Nettle's demos.
@@ -39,7 +39,7 @@ private static class OctFace
 		public float nx, ny, nz, d;
 	}
 	
-	public static Mesh loadOct( Graphics graphics, InputStream inputStream, boolean managed, boolean useFloats, Vector start )
+	public static Mesh loadOct( Graphics graphics, InputStream inputStream, boolean managed, boolean useFloats, Vector3 start )
 	{
 		LittleEndianInputStream in =  new LittleEndianInputStream( new BufferedInputStream(inputStream) );		
 		

File: gdx/src/com/badlogic/gdx/math/Quaternion.java
Patch:
@@ -68,7 +68,7 @@ public Quaternion(Quaternion quaternion)
      * @param axis The axis
      * @param angle The angle in degrees.
      */
-    public Quaternion(Vector axis, float angle)
+    public Quaternion(Vector3 axis, float angle)
     {
         this.set(axis,angle);
     }
@@ -108,7 +108,7 @@ public Quaternion set(Quaternion quaternion)
      * @param angle The angle in degrees
      * @return This quaternion for chaining.
      */
-    public Quaternion set(Vector axis, float angle)
+    public Quaternion set(Vector3 axis, float angle)
     {
         float l_ang= (float)(angle *(Math.PI/180));
         float l_sin = (float)(Math.sin(l_ang/2));

File: gdx/src/com/badlogic/gdx/math/collision/EllipsoidCollider.java
Patch:
@@ -16,7 +16,7 @@
  */
 package com.badlogic.gdx.math.collision;
 
-import com.badlogic.gdx.math.Vector;
+import com.badlogic.gdx.math.Vector3;
 
 /**
  * An EllipsoidCollider is a class that encapsulates the property of
@@ -49,7 +49,7 @@ public EllipsoidCollider( float xRadius, float yRadius, float zRadius, Collision
 		if( response == null )
 			throw new IllegalArgumentException( "response must be != null" );
 		
-		packet = new CollisionPacket( new Vector(), new Vector(), xRadius, yRadius, zRadius );
+		packet = new CollisionPacket( new Vector3(), new Vector3(), xRadius, yRadius, zRadius );
 		this.response = response;
 	}
 	
@@ -67,7 +67,7 @@ public EllipsoidCollider( float xRadius, float yRadius, float zRadius, Collision
 	 * @param velocity the velocity
 	 * @param displacementDistance the distance by which to displace a collider
 	 */
-	public boolean collide( CollisionMesh mesh, Vector position, Vector velocity, float displacementDistance )
+	public boolean collide( CollisionMesh mesh, Vector3 position, Vector3 velocity, float displacementDistance )
 	{
 		boolean collided = false;
 		int iterations = 0;

File: gdx/src/com/badlogic/gdx/tests/OctTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.ModelLoader;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
-import com.badlogic.gdx.math.Vector;
+import com.badlogic.gdx.math.Vector3;
 
 public class OctTest implements RenderListener, InputListener
 {
@@ -48,7 +48,7 @@ public void surfaceCreated(Application app)
 		{
 			app.getInput().addInputListener( this );
 			
-			mesh = ModelLoader.loadOct( app.getGraphics(), app.getFiles().readFile( "data/steps.oct", FileType.Internal ), true, false, new Vector() );											
+			mesh = ModelLoader.loadOct( app.getGraphics(), app.getFiles().readFile( "data/steps.oct", FileType.Internal ), true, false, new Vector3() );											
 			
 			cam = new PerspectiveCamera();
 			cam.getPosition().set( 2, 2, 2 );

File: gdx-android/src/com/badlogic/gdx/FixedPointMeshRendererTest.java
Patch:
@@ -26,6 +26,6 @@ public void onCreate( Bundle bundle )
 	{
 		super.onCreate( bundle );
 		initialize( false );
-		getGraphics().setRenderListener( new com.badlogic.gdx.tests.FixedPointMeshRendererTest() );
+		getGraphics().setRenderListener( new com.badlogic.gdx.tests.FixedPointMeshTest() );
 	}
 }

File: gdx-android/src/com/badlogic/gdx/MeshRendererTest.java
Patch:
@@ -28,6 +28,6 @@ public void onCreate( Bundle bundle )
 		super.onCreate( bundle );
 		setRequestedOrientation( ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE );
 		initialize(false);
-		getGraphics().setRenderListener( new com.badlogic.gdx.tests.MeshRendererTest() );
+		getGraphics().setRenderListener( new com.badlogic.gdx.tests.MeshTest() );
 	}
 }

File: gdx/src/com/badlogic/gdx/backends/android/AndroidPixmap.java
Patch:
@@ -74,6 +74,8 @@ protected static Bitmap.Config getInternalFormat( Pixmap.Format format )
 			return Bitmap.Config.ALPHA_8;
 		if( format == Pixmap.Format.RGBA4444 )
 			return Bitmap.Config.ARGB_4444;
+		if( format == Pixmap.Format.RGB565 )
+			return Bitmap.Config.RGB_565;
 		return Bitmap.Config.ARGB_8888;
 	}
 	

File: gdx/src/com/badlogic/gdx/backends/desktop/JoglPixmap.java
Patch:
@@ -54,7 +54,7 @@ final class JoglPixmap implements Pixmap
 
 	private int getInternalFormat( Pixmap.Format format )
 	{
-		if( format == Pixmap.Format.RGBA4444 || format == Pixmap.Format.RGBA8888 )
+		if( format == Pixmap.Format.RGBA4444 || format == Pixmap.Format.RGBA8888 || format == Pixmap.Format.RGB565 )
 			return BufferedImage.TYPE_4BYTE_ABGR;
 		else
 			return BufferedImage.TYPE_BYTE_GRAY;

File: gdx/src/com/badlogic/gdx/graphics/Font.java
Patch:
@@ -64,7 +64,7 @@ public enum FontStyle
 	
 	protected Font( Graphics graphics, boolean managed )
 	{
-		this.texture = graphics.newTexture( 512, 512, Pixmap.Format.RGBA4444, TextureFilter.Nearest, TextureFilter.Nearest, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge, managed );		
+		this.texture = graphics.newTexture( 512, 512, Pixmap.Format.RGBA8888, TextureFilter.Nearest, TextureFilter.Nearest, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge, managed );		
 		this.isManaged = managed;
 	}
 	

File: gdx/src/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -39,6 +39,7 @@ public interface Pixmap
 	public enum Format
 	{
 		Alpha,
+		RGB565,
 		RGBA4444,
 		RGBA8888
 	}

File: gdx/src/com/badlogic/gdx/graphics/VertexAttribute.java
Patch:
@@ -17,7 +17,7 @@
 public final class VertexAttribute
 {
 	/** the attribute {@link Usage} **/
-	public final Usage usage;
+	public final int usage;
 	/** the number of components this attribute has **/
 	public final int numComponents;
 	/** the offset of this attribute in bytes, don't change this! **/
@@ -32,7 +32,7 @@ public final class VertexAttribute
 	 * @param numComponents the number of components of this attribute, must be between 1 and 4.
 	 * @param alias the alias used in a shader for this attribute. Can be changed after construction.
 	 */
-	public VertexAttribute( Usage usage, int numComponents, String alias )
+	public VertexAttribute( int usage, int numComponents, String alias )
 	{
 		this.usage = usage;
 		this.numComponents = numComponents;

File: gdx/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -43,7 +43,6 @@
 import com.badlogic.gdx.graphics.GL11;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Pixmap;
-import com.badlogic.gdx.graphics.ShaderProgram;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Font.FontStyle;
 import com.badlogic.gdx.graphics.Pixmap.Format;

File: gdx/src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -62,7 +62,7 @@ public class Mesh
 	private final boolean useFixedPoint;
 	
 	/** filled already? then use subdata next time **/
-	private boolean filledOnce = false;
+//	private boolean filledOnce = false;
 	
 	/**
 	 * Creates a new Mesh with the given attributes
@@ -141,7 +141,7 @@ private void constructBufferObjects( GL20 gl )
 			indexBufferObjectHandle = handle.get(0);
 		}
 		
-		filledOnce = false;
+//		filledOnce = false;
 	}
 	
 	private void fillBuffers( )
@@ -155,7 +155,7 @@ private void fillBuffers( )
 		else
 			fillBuffers( graphics.getGL11() );
 		
-		filledOnce = true;
+//		filledOnce = true;
 	}
 	
 	private void fillBuffers( GL11 gl )

File: gdx/src/com/badlogic/gdx/tests/VorbisTest.java
Patch:
@@ -40,8 +40,7 @@ public void surfaceCreated(Application app)
 			decoder = new VorbisDecoder( "data/cloudconnected.ogg" );
 		app.log( "Vorbis", "channels: "+ decoder.getNumChannels() + ", rate: " + decoder.getRate() + ", length: " + decoder.getLength() );;
 				
-		ShortBuffer samplesBuffer = AudioTools.allocateShortBuffer( 1024, 2 );
-		short[] samples = new short[1024*2];
+		ShortBuffer samplesBuffer = AudioTools.allocateShortBuffer( 1024, 2 );		
 			
 		long start = System.nanoTime();
 		while( decoder.readSamples( samplesBuffer ) > 0 )

File: gdx/src/com/badlogic/gdx/tests/VorbisTest.java
Patch:
@@ -4,12 +4,10 @@
 
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.RenderListener;
-import com.badlogic.gdx.audio.AudioDevice;
 import com.badlogic.gdx.audio.analysis.AudioTools;
 import com.badlogic.gdx.audio.io.VorbisDecoder;
 import com.badlogic.gdx.backends.android.AndroidApplication;
 import com.badlogic.gdx.backends.desktop.JoglApplication;
-import com.badlogic.gdx.backends.desktop.JoglAudioDevice;
 
 public class VorbisTest implements RenderListener
 {

File: gdx/src/com/badlogic/gdx/graphics/Font.java
Patch:
@@ -16,8 +16,6 @@
  */
 package com.badlogic.gdx.graphics;
 
-import java.util.HashMap;
-
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.Texture.TextureWrap;

File: gdx/src/com/badlogic/gdx/graphics/ImmediateModeRenderer.java
Patch:
@@ -39,7 +39,7 @@
  */
 public class ImmediateModeRenderer 
 {
-	private static final int MAX_VERTICES = 2000;
+	private static final int MAX_VERTICES = 10000 * 3;
 	
 	/** the gl instance **/
 	private final GL10 gl;	

File: gdx/src/com/badlogic/gdx/audio/io/VorbisDecoder.java
Patch:
@@ -14,7 +14,7 @@
 public class VorbisDecoder implements Decoder 
 {
 	static
-	{
+	{		
 		System.loadLibrary( "gdx" );
 	}
 	
@@ -99,8 +99,8 @@ public static void main( String[] argv )
 		System.out.println( "channels: "+ decoder.getNumChannels() + ", rate: " + decoder.getRate() + ", length: " + decoder.getLength() );;
 		
 		JoglAudioDevice device = new JoglAudioDevice( decoder.getNumChannels() == 2?false:true );
-		ShortBuffer samplesBuffer = AudioTools.allocateShortBuffer( 1024, 2 );
-		short[] samples = new short[1024*2];
+		ShortBuffer samplesBuffer = AudioTools.allocateShortBuffer( 1024*10, 2 );
+		short[] samples = new short[samplesBuffer.capacity()];
 				
 		while( decoder.readSamples( samplesBuffer ) > 0 )
 		{

File: gdx/src/com/badlogic/gdx/backends/android/AndroidFiles.java
Patch:
@@ -27,7 +27,6 @@
 import android.os.Environment;
 
 import com.badlogic.gdx.Files;
-import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.files.FileHandle;
 
 /**

File: gdx/src/com/badlogic/gdx/math/collision/SlideResponse.java
Patch:
@@ -34,7 +34,7 @@ public void respond(CollisionPacket packet, float displacementDistance)
 	{	
 		if( packet.getNearestDistance() == 0 )
 		{			
-			System.out.println( "embedded: " + packet.position.dst(packet.intersectionPoint) + ", " + packet.plane );
+//			System.out.println( "embedded: " + packet.position.dst(packet.intersectionPoint) + ", " + packet.plane );
 			float distance = packet.plane.distance(packet.position);
 			packet.position.add(packet.plane.normal.tmp().mul(1 - distance + displacementDistance ));
 			packet.nearestDistance = displacementDistance;			

File: gdx/src/com/badlogic/gdx/tests/ObjTest.java
Patch:
@@ -19,6 +19,7 @@
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.InputListener;
 import com.badlogic.gdx.RenderListener;
+import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.backends.desktop.JoglApplication;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
@@ -52,10 +53,10 @@ public void surfaceCreated(Application app)
 		{
 			app.getInput().addInputListener( this );
 			
-			Mesh m = ModelLoader.loadObj( app.getFiles().readInternalFile( "data/cube.obj" ), false );
+			Mesh m = ModelLoader.loadObj( app.getFiles().readFile( "data/cube.obj", FileType.Internal ), false );
 			mesh = new MeshRenderer( app.getGraphics().getGL10(), m, true, true );
 			
-			Pixmap pixmap = app.getGraphics().newPixmap( app.getFiles().readInternalFile( "data/badlogic.jpg"));
+			Pixmap pixmap = app.getGraphics().newPixmap( app.getFiles().readFile( "data/badlogic.jpg", FileType.Internal));
 			texture = app.getGraphics().newTexture( pixmap, TextureFilter.MipMap, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge, true );					
 			
 			cam = new PerspectiveCamera();

File: gdx/src/com/badlogic/gdx/tests/OctTest.java
Patch:
@@ -3,6 +3,7 @@
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.InputListener;
 import com.badlogic.gdx.RenderListener;
+import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.backends.desktop.JoglApplication;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
@@ -32,7 +33,7 @@ public void surfaceCreated(Application app)
 		{
 			app.getInput().addInputListener( this );
 			
-			Mesh m = ModelLoader.loadOct( app.getFiles().readInternalFile( "data/steps.oct" ), false, new Vector() );
+			Mesh m = ModelLoader.loadOct( app.getFiles().readFile( "data/steps.oct", FileType.Internal ), false, new Vector() );
 			mesh = new MeshRenderer( app.getGraphics().getGL10(), m, true, true );									
 			
 			cam = new PerspectiveCamera();

File: gdx/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -19,6 +19,7 @@
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.InputListener;
 import com.badlogic.gdx.RenderListener;
+import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.audio.Music;
 import com.badlogic.gdx.audio.Sound;
 import com.badlogic.gdx.backends.desktop.JoglApplication;
@@ -58,9 +59,9 @@ public void surfaceCreated(Application app)
 		if( music == null )
 		{
 			app.getInput().addInputListener( this );	
-			sound = app.getAudio().newSound( app.getFiles().getInternalFileHandle( "data/shotgun.wav" ) );
+			sound = app.getAudio().newSound( app.getFiles().getFileHandle( "data/shotgun.wav", FileType.Internal ) );
 			
-			music = app.getAudio().newMusic( app.getFiles().getInternalFileHandle( "data/cloudconnected.ogg" ) );				
+			music = app.getAudio().newMusic( app.getFiles().getFileHandle( "data/cloudconnected.ogg", FileType.Internal ) );				
 			music.play();		
 			music.setLooping( true );
 		}

File: gdx/src/com/badlogic/gdx/tests/TextTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.badlogic.gdx.Application;
 import com.badlogic.gdx.RenderListener;
+import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.backends.desktop.JoglApplication;
 import com.badlogic.gdx.graphics.FloatMesh;
 import com.badlogic.gdx.graphics.Font;
@@ -47,7 +48,7 @@ public void surfaceCreated(Application app)
 		if( text == null )
 		{
 			cam = new OrthographicCamera();		
-			font = app.getGraphics().newFont( app.getFiles().getInternalFileHandle( "data/arial.ttf"), 11, FontStyle.Plain, true );
+			font = app.getGraphics().newFont( app.getFiles().getFileHandle( "data/arial.ttf", FileType.Internal), 11, FontStyle.Plain, true );
 			text = font.newText( );
 			text.setText( "This is a test\nIt is a multline text!\nyes really!11!111one" );
 			text.setHorizontalAlign( HorizontalAlign.Center );						

File: gdx/src/com/badlogic/gdx/math/collision/CollisionDetection.java
Patch:
@@ -1,8 +1,5 @@
 package com.badlogic.gdx.math.collision;
 
-import android.graphics.Path.Direction;
-
-import com.badlogic.gdx.graphics.FloatMesh;
 import com.badlogic.gdx.math.Intersector;
 import com.badlogic.gdx.math.Plane;
 import com.badlogic.gdx.math.Vector;
@@ -927,6 +924,7 @@ public static void collideTriangle( CollisionPacket packet, Vector p1, Vector p2
 				packet.intersectionPoint.set(collisionPoint);
 				packet.foundCollision = true;
 				packet.type = type;
+				packet.plane.set(plane);
 			}
 		}
 	}

File: gdx/src/com/badlogic/gdx/math/collision/EllipsoidCollider.java
Patch:
@@ -61,8 +61,7 @@ public boolean collide( CollisionMesh mesh, Vector position, Vector velocity, fl
 			CollisionDetection.collide( mesh, packet );
 			
 			if( packet.isColliding() && iterations < 5 )
-			{
-				System.out.println( "iter: " + iterations + ", type: " + packet.type );
+			{				
 				collided = true;
 				response.respond( packet, displacementDistance );
 				

File: gdx/src/com/badlogic/gdx/math/collision/EllipsoidCollider.java
Patch:
@@ -60,7 +60,7 @@ public boolean collide( CollisionMesh mesh, Vector position, Vector velocity, fl
 			packet.set( position, velocity );
 			CollisionDetection.collide( mesh, packet );
 			
-			if( packet.isColliding() && iterations < 20 )
+			if( packet.isColliding() && iterations < 5 )
 			{
 				System.out.println( "iter: " + iterations + ", type: " + packet.type );
 				collided = true;

File: gdx/src/com/badlogic/gdx/math/collision/EllipsoidCollider.java
Patch:
@@ -62,6 +62,7 @@ public boolean collide( CollisionMesh mesh, Vector position, Vector velocity, fl
 			
 			if( packet.isColliding() && iterations < 20 )
 			{
+				System.out.println( "iter: " + iterations + ", type: " + packet.type );
 				collided = true;
 				response.respond( packet, displacementDistance );
 				

File: gdx/src/com/badlogic/gdx/math/collision/SlideResponse.java
Patch:
@@ -42,7 +42,9 @@ public void respond(CollisionPacket packet, float displacementDistance)
 			
 			newVelocity.nor();
 			packet.getIntersectionPoint().sub( newVelocity.mul( displacementDistance ) );
+			System.out.println( "displacing" );
 		}
+		System.out.println( packet.getNearestDistance() );
 				
 		
 		slidingPlaneOrigin.set( packet.getIntersectionPoint() );

File: gdx/src/com/badlogic/gdx/backends/android/AndroidInput.java
Patch:
@@ -107,9 +107,7 @@ private class Event
 	{
 		public int x, y;		
 		public int pointer;
-		@SuppressWarnings("unused")
 		public int keycode;
-		@SuppressWarnings("unused")
 		public char keychar;
 		public EventType type;
 

File: gdx/src/com/badlogic/gdx/backends/android/AndroidFont.java
Patch:
@@ -97,7 +97,7 @@ public int getGlyphAdvance(char character) {
 	public Pixmap getGlyphBitmap(char character) {
 		Rect rect = new Rect();		
 		paint.getTextBounds( "" + character, 0, 1, rect );
-		Bitmap bitmap = Bitmap.createBitmap( rect.width()==0?1:rect.width() + 5, getLineHeight(), Bitmap.Config.ARGB_4444 );
+		Bitmap bitmap = Bitmap.createBitmap( rect.width()==0?1:rect.width() + 5, getLineHeight(), Bitmap.Config.ARGB_8888 );
 		Canvas g = new Canvas( bitmap );
 //		paint.setAntiAlias(true);
 		paint.setColor(0x00000000);

File: gdx/src/com/badlogic/gdx/tests/TextTest.java
Patch:
@@ -31,7 +31,7 @@ public void surfaceCreated(Application app)
 		if( text == null )
 		{
 			cam = new OrthographicCamera();		
-			font = app.getGraphics().newFont( app.getFiles().getInternalFileHandle( "data/arial.ttf"), 12, FontStyle.Plain, true );
+			font = app.getGraphics().newFont( app.getFiles().getInternalFileHandle( "data/arial.ttf"), 11, FontStyle.Plain, true );
 			text = font.newText( );
 			text.setText( "This is a test\nIt is a multline text!\nyes really!11!111one" );
 			text.setHorizontalAlign( HorizontalAlign.Center );			

File: gdx-android/src/com/badlogic/gdx/GDXTester.java
Patch:
@@ -10,7 +10,7 @@
 public class GDXTester extends ListActivity 
 {
 	String[] items = new String[]{ "Life Cycle Test", "Simple Test", "Vertex Array Test", "Vertex Buffer Object Test", "MeshRenderer Test", 
-								   "Fixed Point MeshRenderer Test", "Managed Test", "Text Test", "Sound Test" };
+								   "Fixed Point MeshRenderer Test", "Managed Test", "Text Test", "Sound Test", "Input Test"};
 	
 	@Override
 	public void onCreate(Bundle savedInstanceState) 
@@ -45,6 +45,8 @@ protected void onListItemClick(ListView l, View v, int position, long id)
 			intent = new Intent( this, TextTest.class );
 		if( keyword.equals( items[8] ) )
 			intent = new Intent( this, SoundTest.class );
+		if( keyword.equals( items[9] ) )
+			intent = new Intent( this, InputTest.class );
 			
 		startActivity( intent );
 	}

File: gdx/src/com/badlogic/gdx/tests/SoundTest.java
Patch:
@@ -42,7 +42,7 @@ public void surfaceCreated(Application app)
 		if( music == null )
 		{
 			app.getInput().addInputListener( this );	
-			sound = app.getAudio().newSound( app.getFiles().getInternalFileHandle( "data/shotgun44k.ogg" ) );
+			sound = app.getAudio().newSound( app.getFiles().getInternalFileHandle( "data/shotgun.wav" ) );
 			
 			music = app.getAudio().newMusic( app.getFiles().getInternalFileHandle( "data/cloudconnected.ogg" ) );				
 			music.play();		

File: gdx/src/com/badlogic/gdx/InputListener.java
Patch:
@@ -34,14 +34,14 @@ public interface InputListener
 {	
 	/**
 	 * Called when a key was pressed
-	 * @param keycode The system dependent key code
+	 * @param keycode one of the constants in {@link Input.Keys}
 	 * @return whether the input was processed
 	 */
 	public boolean keyDown( int keycode );
 	
 	/**
 	 * Called when a key was released
-	 * @param keycode The system dependent key code
+	 * @param keycode  one of the constants in {@link Input.Keys}
 	 */
 	public boolean keyUp( int keycode );
 	

File: gdx/src/com/badlogic/gdx/backends/android/AndroidFiles.java
Patch:
@@ -1,7 +1,6 @@
 package com.badlogic.gdx.backends.android;
 
 import java.io.File;
-import java.io.FileDescriptor;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;

File: gdx/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -16,7 +16,6 @@
 import android.view.Window;
 import android.view.WindowManager;
 
-import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.RenderListener;
 import com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView;

File: gdx/src/com/badlogic/gdx/backends/desktop/JoglAudio.java
Patch:
@@ -1,8 +1,5 @@
 package com.badlogic.gdx.backends.desktop;
 
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-import java.nio.ShortBuffer;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;

File: gdx/src/com/badlogic/gdx/backends/desktop/JoglFiles.java
Patch:
@@ -1,7 +1,6 @@
 package com.badlogic.gdx.backends.desktop;
 
 import java.io.File;
-import java.io.FileDescriptor;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;

File: gdx/src/com/badlogic/gdx/backends/desktop/JoglGraphics.java
Patch:
@@ -6,16 +6,13 @@
 import java.awt.event.WindowEvent;
 import java.awt.image.BufferedImage;
 import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
 import java.io.InputStream;
 
 import javax.imageio.ImageIO;
 import javax.media.opengl.GL;
 import javax.swing.JFrame;
 
 import com.badlogic.gdx.Application;
-import com.badlogic.gdx.Files;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.RenderListener;
 import com.badlogic.gdx.files.FileHandle;

File: gdx/src/com/badlogic/gdx/backends/desktop/JoglMusic.java
Patch:
@@ -2,13 +2,10 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.io.InputStream;
 
 import javax.sound.sampled.AudioFormat;
 import javax.sound.sampled.AudioInputStream;
 import javax.sound.sampled.AudioSystem;
-import javax.sound.sampled.Control;
-import javax.sound.sampled.DataLine;
 import javax.sound.sampled.FloatControl;
 import javax.sound.sampled.LineUnavailableException;
 import javax.sound.sampled.SourceDataLine;

File: gdx/src/com/badlogic/gdx/backends/desktop/JoglPanel.java
Patch:
@@ -334,13 +334,13 @@ public void mouseReleased(MouseEvent arg0)
 
 	public void keyPressed(KeyEvent arg0) 
 	{
-		keys.add( arg0.getKeyCode() );		
+		keys.add( JoglInputMultiplexer.translateKeyCode(arg0.getKeyCode()) );		
 	}
 
 	public void keyReleased(KeyEvent arg0) 
 	{
 //		getCanvas().getContext().makeCurrent();
-		keys.remove( arg0.getKeyCode() );		
+		keys.remove( JoglInputMultiplexer.translateKeyCode(arg0.getKeyCode()) );		
 	}
 
 	public void keyTyped(KeyEvent arg0) {

File: gdx/src/com/badlogic/gdx/backends/desktop/JoglSound.java
Patch:
@@ -13,7 +13,6 @@
 import javax.sound.sampled.AudioInputStream;
 import javax.sound.sampled.AudioSystem;
 import javax.sound.sampled.Clip;
-import javax.sound.sampled.SourceDataLine;
 import javax.sound.sampled.UnsupportedAudioFileException;
 
 import com.badlogic.gdx.audio.Sound;

File: gdx/src/com/badlogic/gdx/backends/android/AndroidFont.java
Patch:
@@ -46,7 +46,7 @@ final class AndroidFont extends Font
 
 	AndroidFont(Graphics graphics, String fontName, int size, FontStyle style, boolean managed) 
 	{
-		super( graphics, managed );
+		super( graphics, managed );		
 		font = Typeface.create( fontName, getFontStyle( style ) );
 		paint = new Paint( );
 		paint.setTypeface(font);
@@ -57,8 +57,8 @@ final class AndroidFont extends Font
 
 	AndroidFont(Graphics graphics, AssetManager assets, String file, int size,	FontStyle style, boolean managed) 
 	{	
-		super( graphics, managed );		
-		font = Typeface.createFromAsset( assets, file );
+		super( graphics, managed );				
+		font = Typeface.createFromAsset( assets, file );		
 		paint = new Paint( );
 		paint.setTypeface(font);
 		paint.setTextSize(size);	

File: gdx/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -269,7 +269,8 @@ public Texture newTexture(int width, int height, TextureFilter minFilter, Textur
 			texture = new AndroidTexture(this, gl10, bitmap, minFilter, magFilter, uWrap, vWrap, managed);
 		else
 			texture = new AndroidTexture(this, gl20, bitmap, minFilter, magFilter, uWrap, vWrap, managed );
-		bitmap.recycle();
+		if( !managed )
+			bitmap.recycle();
 		return texture;
 	}
 

File: gdx/src/com/badlogic/gdx/backends/android/AndroidTexture.java
Patch:
@@ -289,7 +289,7 @@ public void draw( Pixmap bmp, int x, int y )
 			Rect src = new Rect( );
 			RectF dst = new RectF( );
 			
-			dst.set( x, y, x + this.bitmap.getWidth(), y + this.bitmap.getHeight() );
+			dst.set( x, y, x + bitmap.getWidth(), y + bitmap.getHeight() );
 			src.set( 0, 0, bitmap.getWidth(), bitmap.getHeight() );
 			
 			canvas.drawBitmap(bitmap, src, dst, null);			

File: gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -179,6 +179,7 @@ public void update( )
 	public void setMatrices( Graphics graphics )
 	{
 		setViewport(graphics.getWidth(), graphics.getHeight());
+		update();
 		GL10 gl = graphics.getGL10();
 		gl.glMatrixMode( GL10.GL_PROJECTION );
 		gl.glLoadMatrixf( getCombinedMatrix().val, 0 );

File: gdx/src/com/badlogic/gdx/tests/VertexArrayTest.java
Patch:
@@ -37,8 +37,7 @@ public void render(Application app)
 		vertices.position(0);
 		gl.glVertexPointer( 3, GL10.GL_FLOAT, BYTES_PER_VERTEX, vertices );	
 				
-		gl.glDrawElements( GL10.GL_TRIANGLES, 3, GL10.GL_UNSIGNED_SHORT, indices);			
-//		gl.glDrawArrays( GL10.GL_TRIANGLES, 0, 3 );		
+		gl.glDrawElements( GL10.GL_TRIANGLES, 3, GL10.GL_UNSIGNED_SHORT, indices);				
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/backends/desktop/JoglGraphics.java
Patch:
@@ -224,7 +224,7 @@ public void surfaceCreated(Application app)
 		}
 		else
 		{
-			if( minor < 5 )
+			if( major == 1 && minor < 5 )
 			{
 				gl10 = new JoglGL10( graphicPanel.getGL() );
 			}

File: gdx/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -312,6 +312,7 @@ public void onDrawFrame(javax.microedition.khronos.opengles.GL10 gl)
 		{
 			if( listener != null )
 				listener.dispose( app );
+			listener = null;
 			dispose = false;
 		}
 	}

File: gdx/src/com/badlogic/gdx/backends/desktop/JoglGraphics.java
Patch:
@@ -71,7 +71,7 @@ public void windowClosing(WindowEvent e)
             {                 	                	
             	graphicPanel.dispose(); 
             	if( application.listener != null )
-            		application.listener.destroy();
+            		application.listener.destroy(application);
             }
         });                      
         useGL2 = useGL2IfAvailable;
@@ -191,8 +191,7 @@ public void setRenderListener( RenderListener listener)
 	@Override
 	public void dispose(Application app) 
 	{	
-		if( listener != null )
-			listener.dispose( app );
+		
 	}
 
 	@Override

File: gdx/src/com/badlogic/gdx/backends/android/AndroidGraphics.java
Patch:
@@ -83,7 +83,9 @@ public AndroidGraphics( AndroidApplication activity, boolean useGL2IfAvailable )
 		}
 		else
 			view = new GLSurfaceView( activity );
+		view.setRenderer(this);
 		activity.setContentView( view );
+		this.app = activity;
 	}
 	
 	/**

File: src/com/badlogic/gdx/math/BoundingBox.java
Patch:
@@ -16,7 +16,6 @@
  */
 package com.badlogic.gdx.math;
 
-import java.io.Serializable;
 import java.util.List;
 
 /**

File: src/com/badlogic/gdx/math/CatmullRomSpline.java
Patch:
@@ -16,7 +16,6 @@
  */
 package com.badlogic.gdx.math;
 
-import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 

File: src/com/badlogic/gdx/math/Frustum.java
Patch:
@@ -16,7 +16,6 @@
  */
 package com.badlogic.gdx.math;
 
-import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 

File: src/com/badlogic/gdx/math/Plane.java
Patch:
@@ -16,7 +16,6 @@
  */
 package com.badlogic.gdx.math;
 
-import java.io.Serializable;
 
 /**
  * A plane defined via a unit length normal and the distance from the

File: src/com/badlogic/gdx/audio/AudioDevice.java
Patch:
@@ -14,7 +14,7 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx;
+package com.badlogic.gdx.audio;
 
 /**
  * Encapsulates an audio device in 44.1khz mono mode. Use

File: src/com/badlogic/gdx/audio/Sound.java
Patch:
@@ -14,7 +14,7 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx;
+package com.badlogic.gdx.audio;
 
 /**
  * A sound is a short audio clip that can be played numerous times.

File: src/com/badlogic/gdx/backends/InputListener.java
Patch:
@@ -14,7 +14,9 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx;
+package com.badlogic.gdx.backends;
+
+import com.badlogic.gdx.Application;
 
 /**
  * An InputListener is used to receive input events from an {@link Application}. For this

File: src/com/badlogic/gdx/backends/android/AndroidAudioDevice.java
Patch:
@@ -20,7 +20,7 @@
 import android.media.AudioManager;
 import android.media.AudioTrack;
 
-import com.badlogic.gdx.AudioDevice;
+import com.badlogic.gdx.audio.AudioDevice;
 
 final class AndroidAudioDevice implements AudioDevice 
 {

File: src/com/badlogic/gdx/backends/android/AndroidMesh.java
Patch:
@@ -24,7 +24,7 @@
 import javax.microedition.khronos.opengles.GL10;
 import javax.microedition.khronos.opengles.GL11;
 
-import com.badlogic.gdx.Mesh;
+import com.badlogic.gdx.graphics.Mesh;
 
 /**
  * An implementation of {@link Mesh} for Android.

File: src/com/badlogic/gdx/backends/android/AndroidPixmap.java
Patch:
@@ -25,7 +25,7 @@
 import android.graphics.Paint.Style;
 import android.graphics.PorterDuff.Mode;
 
-import com.badlogic.gdx.Pixmap;
+import com.badlogic.gdx.graphics.Pixmap;
 
 /**
  * And implementation of {@link Pixmap}

File: src/com/badlogic/gdx/backends/android/AndroidSound.java
Patch:
@@ -19,7 +19,7 @@
 import android.media.AudioManager;
 import android.media.SoundPool;
 
-import com.badlogic.gdx.Sound;
+import com.badlogic.gdx.audio.Sound;
 
 /**
  * An implementation of {@link Sound} for Android

File: src/com/badlogic/gdx/backends/android/AndroidTexture.java
Patch:
@@ -22,10 +22,10 @@
 import android.opengl.GLUtils;
 import android.util.Log;
 
-import com.badlogic.gdx.Pixmap;
-import com.badlogic.gdx.Texture;
 import com.badlogic.gdx.Application.TextureFilter;
 import com.badlogic.gdx.Application.TextureWrap;
+import com.badlogic.gdx.graphics.Pixmap;
+import com.badlogic.gdx.graphics.Texture;
 
 /**
  * An implementation of {@link Texture} for Android

File: src/com/badlogic/gdx/backends/jogl/JoglAudioDevice.java
Patch:
@@ -21,7 +21,7 @@
 import javax.sound.sampled.SourceDataLine;
 import javax.sound.sampled.AudioFormat.Encoding;
 
-import com.badlogic.gdx.AudioDevice;
+import com.badlogic.gdx.audio.AudioDevice;
 
 /**
  * An implementation of {@link AudioDevice} for desktop Java based on

File: src/com/badlogic/gdx/backends/jogl/JoglInputMultiplexer.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 
-import com.badlogic.gdx.InputListener;
+import com.badlogic.gdx.backends.InputListener;
 
 
 /**

File: src/com/badlogic/gdx/backends/jogl/JoglMesh.java
Patch:
@@ -24,7 +24,7 @@
 import javax.media.opengl.GL;
 import javax.media.opengl.GLContext;
 
-import com.badlogic.gdx.Mesh;
+import com.badlogic.gdx.graphics.Mesh;
 
 /**
  * An implementation of {@link Mesh} based on Jogl.

File: src/com/badlogic/gdx/backends/jogl/JoglPanel.java
Patch:
@@ -40,7 +40,7 @@
 import javax.swing.JPanel;
 
 import com.badlogic.gdx.Application;
-import com.badlogic.gdx.RenderListener;
+import com.badlogic.gdx.graphics.RenderListener;
 import com.badlogic.gdx.math.WindowedMean;
 import com.sun.opengl.impl.NativeLibLoader;
 import com.sun.opengl.util.Animator;

File: src/com/badlogic/gdx/backends/jogl/JoglPixmap.java
Patch:
@@ -24,7 +24,7 @@
 import java.awt.RenderingHints;
 import java.awt.image.BufferedImage;
 
-import com.badlogic.gdx.Pixmap;
+import com.badlogic.gdx.graphics.Pixmap;
 
 /**
  * An implementation of Pixmap based on the java graphics framework.

File: src/com/badlogic/gdx/backends/jogl/JoglSound.java
Patch:
@@ -27,7 +27,7 @@
 import javax.sound.sampled.LineListener;
 import javax.sound.sampled.LineEvent.Type;
 
-import com.badlogic.gdx.Sound;
+import com.badlogic.gdx.audio.Sound;
 
 /**
  * An implementation of {@link Sound} based on java sound.

File: src/com/badlogic/gdx/backends/jogl/JoglTexture.java
Patch:
@@ -23,10 +23,10 @@
 import javax.media.opengl.GL;
 import javax.media.opengl.GLContext;
 
-import com.badlogic.gdx.Pixmap;
-import com.badlogic.gdx.Texture;
 import com.badlogic.gdx.Application.TextureFilter;
 import com.badlogic.gdx.Application.TextureWrap;
+import com.badlogic.gdx.graphics.Pixmap;
+import com.badlogic.gdx.graphics.Texture;
 import com.sun.opengl.util.texture.TextureData;
 import com.sun.opengl.util.texture.TextureIO;
 

File: src/com/badlogic/gdx/graphics/Mesh.java
Patch:
@@ -14,7 +14,7 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx;
+package com.badlogic.gdx.graphics;
 
 /**
  * <p>

File: src/com/badlogic/gdx/graphics/OrthographicCamera.java
Patch:
@@ -14,8 +14,9 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx;
+package com.badlogic.gdx.graphics;
 
+import com.badlogic.gdx.Application;
 import com.badlogic.gdx.Application.MatrixMode;
 import com.badlogic.gdx.math.Matrix;
 import com.badlogic.gdx.math.Ray;

File: src/com/badlogic/gdx/graphics/Pixmap.java
Patch:
@@ -14,7 +14,7 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx;
+package com.badlogic.gdx.graphics;
 
 /**
  * A Pixmap represents a plattform specific bitmap. On Android it 

File: src/com/badlogic/gdx/graphics/RenderListener.java
Patch:
@@ -14,7 +14,9 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx;
+package com.badlogic.gdx.graphics;
+
+import com.badlogic.gdx.Application;
 
 /**
  * A RenderListener can be hooked to a {@link Application}

File: src/com/badlogic/gdx/graphics/Texture.java
Patch:
@@ -14,7 +14,9 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx;
+package com.badlogic.gdx.graphics;
+
+import com.badlogic.gdx.Application;
 
 /**
  * A Texture represents a bitmap to be applied to a {@link Mesh}. 

File: src/com/badlogic/gdx/graphics/models/LittleEndianDataInputStream.java
Patch:
@@ -14,7 +14,7 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx.models;
+package com.badlogic.gdx.graphics.models;
 
 import java.io.DataInput;
 import java.io.DataInputStream;

File: src/com/badlogic/gdx/graphics/models/MD2Frame.java
Patch:
@@ -14,7 +14,7 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx.models;
+package com.badlogic.gdx.graphics.models;
 
 import java.nio.FloatBuffer;
 

File: src/com/badlogic/gdx/graphics/models/MD2Header.java
Patch:
@@ -14,7 +14,7 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx.models;
+package com.badlogic.gdx.graphics.models;
 
 public class MD2Header 
 {

File: src/com/badlogic/gdx/graphics/models/MD2Instance.java
Patch:
@@ -14,7 +14,7 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx.models;
+package com.badlogic.gdx.graphics.models;
 
 
 

File: src/com/badlogic/gdx/graphics/models/MD2Loader.java
Patch:
@@ -14,7 +14,7 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx.models;
+package com.badlogic.gdx.graphics.models;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;

File: src/com/badlogic/gdx/graphics/models/MD2Mesh.java
Patch:
@@ -14,15 +14,15 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx.models;
+package com.badlogic.gdx.graphics.models;
 
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
 
 import com.badlogic.gdx.Application;
-import com.badlogic.gdx.Mesh;
-import com.badlogic.gdx.Mesh.PrimitiveType;
+import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.Mesh.PrimitiveType;
 
 /**
  * Encapsulates a loaded MD2Mesh. Not to useful on its own so

File: src/com/badlogic/gdx/graphics/models/MD2Triangle.java
Patch:
@@ -14,7 +14,7 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx.models;
+package com.badlogic.gdx.graphics.models;
 
 public class MD2Triangle 
 {

File: src/com/badlogic/gdx/graphics/models/ObjLoader.java
Patch:
@@ -14,13 +14,13 @@
  *  You should have received a copy of the GNU General Public License
  *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.badlogic.gdx.models;
+package com.badlogic.gdx.graphics.models;
 
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
 
 import com.badlogic.gdx.Application;
-import com.badlogic.gdx.Mesh;
+import com.badlogic.gdx.graphics.Mesh;
 
 /**
  * Loads Wavefront OBJ files. Only triangulated meshes are supported.

File: src/com/badlogic/gdx/math/BoundingBox.java
Patch:
@@ -27,7 +27,7 @@
  * @author mzechner
  *
  */
-public final class BoundingBox implements Serializable
+public final class BoundingBox
 {   
 	private static final long serialVersionUID = -1286036817192127343L;
 	final Vector crn[] = new Vector[8];

File: src/com/badlogic/gdx/math/CatmullRomSpline.java
Patch:
@@ -27,7 +27,7 @@
  * @author mzechner
  *
  */
-public final class CatmullRomSpline implements Serializable
+public final class CatmullRomSpline
 {
 	/**
 	 * 

File: src/com/badlogic/gdx/math/EarCutTriangulator.java
Patch:
@@ -26,7 +26,7 @@
  * @author mzechner
  *
  */
-public class EarCutTriangulator 
+public final class EarCutTriangulator 
 {
 	/**
 	 * Triangulates the list of points and returns an array

File: src/com/badlogic/gdx/samples/TriangleTest.java
Patch:
@@ -17,10 +17,10 @@
 package com.badlogic.gdx.samples;
 
 import com.badlogic.gdx.Application;
-import com.badlogic.gdx.RenderListener;
-import com.badlogic.gdx.Mesh;
-import com.badlogic.gdx.Mesh.PrimitiveType;
 import com.badlogic.gdx.backends.jogl.JoglApplication;
+import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.RenderListener;
+import com.badlogic.gdx.graphics.Mesh.PrimitiveType;
 
 public class TriangleTest implements RenderListener
 {

File: src/com/badlogic/gdx/Application.java
Patch:
@@ -20,8 +20,6 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 
-import javax.media.opengl.GL;
-
 import com.badlogic.gdx.backends.jogl.JoglApplication;
 
 /**

File: src/com/badlogic/gdx/Font.java
Patch:
@@ -39,6 +39,7 @@ private class Glyph
 	{
 		public int advance;
 		public int width;
+		@SuppressWarnings("unused")
 		public int height;
 		public float u;
 		public float v;
@@ -74,7 +75,7 @@ public class TextRun
 		private int height;
 		private HorizontalAlign hAlign;
 		private VerticalAlign vAlign;
-		private boolean wordWrap = false;
+//		private boolean wordWrap = false;
 		private String[] lines;
 		private int[] widths;
 		private float posX, posY;

File: src/com/badlogic/gdx/backends/jogl/JoglFont.java
Patch:
@@ -53,7 +53,7 @@ final class JoglFont extends Font
 	JoglFont( Application app, InputStream in, int size, FontStyle style )
 	{
 		super( app );
-		int fontStyle = getJavaFontStyle( style );
+		
 		try
 		{
 			java.awt.Font baseFont = java.awt.Font.createFont( java.awt.Font.PLAIN, in);

File: src/com/badlogic/gdx/backends/jogl/JoglMesh.java
Patch:
@@ -25,7 +25,6 @@
 import javax.media.opengl.GLContext;
 
 import com.badlogic.gdx.Mesh;
-import com.badlogic.gdx.math.BoundingBox;
 
 /**
  * An implementation of {@link Mesh} based on Jogl.

File: src/com/badlogic/gdx/math/Sphere.java
Patch:
@@ -16,9 +16,6 @@
  */
 package com.badlogic.gdx.math;
 
-import java.util.HashSet;
-
-import javax.print.attribute.HashAttributeSet;
 
 public class Sphere 
 {

File: src/com/badlogic/gdx/models/LittleEndianDataInputStream.java
Patch:
@@ -104,7 +104,8 @@ public double readDouble() throws IOException {
     return Double.longBitsToDouble(readLong());
   }
 
-  public final String readLine() throws IOException {
+  @SuppressWarnings("deprecation")
+public final String readLine() throws IOException {
     return din.readLine();
   }
 

