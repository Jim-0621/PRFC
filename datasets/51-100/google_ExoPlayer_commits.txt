File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DefaultDashChunkSourceTest.java
Patch:
@@ -314,7 +314,7 @@ public void getNextChunk_chunkSourceWithDefaultCmcdConfiguration_setsCmcdLogging
     assertThat(output.chunk.dataSpec.httpRequestHeaders)
         .containsExactly(
             "CMCD-Object",
-            "br=700,tb=1300,d=4000",
+            "br=700,tb=1300,d=4000,ot=v",
             "CMCD-Request",
             "bl=0,mtp=1000",
             "CMCD-Session",
@@ -359,7 +359,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
     assertThat(output.chunk.dataSpec.httpRequestHeaders)
         .containsExactly(
             "CMCD-Object",
-            "br=700,tb=1300,d=4000",
+            "br=700,tb=1300,d=4000,ot=v",
             "CMCD-Request",
             "bl=0,mtp=1000",
             "CMCD-Session",
@@ -405,7 +405,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
     assertThat(output.chunk.dataSpec.httpRequestHeaders)
         .containsExactly(
             "CMCD-Object",
-            "br=700,tb=1300,d=4000,key1=value1",
+            "br=700,tb=1300,d=4000,ot=v,key1=value1",
             "CMCD-Request",
             "bl=0,mtp=1000,key2=\"stringValue\"",
             "CMCD-Session",

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/HlsChunkSourceTest.java
Patch:
@@ -210,7 +210,7 @@ public void getNextChunk_chunkSourceWithDefaultCmcdConfiguration_setsCmcdLogging
     assertThat(output.chunk.dataSpec.httpRequestHeaders)
         .containsExactly(
             "CMCD-Object",
-            "br=800,tb=800,d=4000",
+            "br=800,tb=800,d=4000,ot=v",
             "CMCD-Request",
             "bl=0",
             "CMCD-Session",
@@ -256,7 +256,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
     assertThat(output.chunk.dataSpec.httpRequestHeaders)
         .containsExactly(
             "CMCD-Object",
-            "br=800,tb=800,d=4000",
+            "br=800,tb=800,d=4000,ot=v",
             "CMCD-Request",
             "bl=0",
             "CMCD-Session",
@@ -303,7 +303,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
     assertThat(output.chunk.dataSpec.httpRequestHeaders)
         .containsExactly(
             "CMCD-Object",
-            "br=800,tb=800,d=4000,key1=value1",
+            "br=800,tb=800,d=4000,ot=v,key1=value1",
             "CMCD-Request",
             "bl=0,key2=\"stringValue\"",
             "CMCD-Session",

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/DefaultSsChunkSource.java
Patch:
@@ -296,7 +296,8 @@ public final void getNextChunk(
                     bufferedDurationUs,
                     /* streamingFormat= */ CmcdHeadersFactory.STREAMING_FORMAT_SS,
                     /* isLive= */ manifest.isLive)
-                .setChunkDurationUs(chunkEndTimeUs - chunkStartTimeUs);
+                .setChunkDurationUs(chunkEndTimeUs - chunkStartTimeUs)
+                .setObjectType(CmcdHeadersFactory.getObjectType(trackSelection));
 
     out.chunk =
         newMediaChunk(

File: library/smoothstreaming/src/test/java/com/google/android/exoplayer2/source/smoothstreaming/DefaultSsChunkSourceTest.java
Patch:
@@ -64,7 +64,7 @@ public void getNextChunk_chunkSourceWithDefaultCmcdConfiguration_setsCmcdLogging
     assertThat(output.chunk.dataSpec.httpRequestHeaders)
         .containsExactly(
             "CMCD-Object",
-            "br=308,tb=1536,d=1968",
+            "br=308,tb=1536,d=1968,ot=v",
             "CMCD-Request",
             "bl=0,mtp=1000",
             "CMCD-Session",
@@ -109,7 +109,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
     assertThat(output.chunk.dataSpec.httpRequestHeaders)
         .containsExactly(
             "CMCD-Object",
-            "br=308,tb=1536,d=1968",
+            "br=308,tb=1536,d=1968,ot=v",
             "CMCD-Request",
             "bl=0,mtp=1000",
             "CMCD-Session",
@@ -155,7 +155,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
     assertThat(output.chunk.dataSpec.httpRequestHeaders)
         .containsExactly(
             "CMCD-Object",
-            "br=308,tb=1536,d=1968,key1=value1",
+            "br=308,tb=1536,d=1968,ot=v,key1=value1",
             "CMCD-Request",
             "bl=0,mtp=1000,key2=\"stringValue\"",
             "CMCD-Session",

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -2079,11 +2079,11 @@ public boolean canReuseAudioTrack(Configuration newConfiguration) {
     }
 
     public long inputFramesToDurationUs(long frameCount) {
-      return (frameCount * C.MICROS_PER_SECOND) / inputFormat.sampleRate;
+      return Util.sampleCountToDurationUs(frameCount, inputFormat.sampleRate);
     }
 
     public long framesToDurationUs(long frameCount) {
-      return (frameCount * C.MICROS_PER_SECOND) / outputSampleRate;
+      return Util.sampleCountToDurationUs(frameCount, outputSampleRate);
     }
 
     public AudioTrack buildAudioTrack(

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/CmcdConfiguration.java
Patch:
@@ -289,7 +289,7 @@ public boolean isObjectDurationLoggingAllowed() {
   }
 
   /**
-   * Returns whether logging object duration is allowed based on the {@linkplain RequestConfig
+   * Returns whether logging measured throughput is allowed based on the {@linkplain RequestConfig
    * request configuration}.
    */
   public boolean isMeasuredThroughputLoggingAllowed() {

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/CmcdLogTest.java
Patch:
@@ -61,6 +61,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
     when(trackSelection.getSelectedFormat()).thenReturn(format);
     when(trackSelection.getTrackGroup())
         .thenReturn(new TrackGroup(format, new Format.Builder().setPeakBitrate(1_000_000).build()));
+    when(trackSelection.getLatestBitrateEstimate()).thenReturn(500_000L);
     CmcdLog cmcdLog =
         CmcdLog.createInstance(
             cmcdConfiguration,
@@ -78,7 +79,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
             "CMCD-Object",
             "br=840,tb=1000,d=3000,key1=value1",
             "CMCD-Request",
-            "bl=1800,key2=\"stringValue\"",
+            "bl=1800,mtp=500,key2=\"stringValue\"",
             "CMCD-Session",
             "cid=\"mediaId\",sid=\"sessionId\",sf=d,st=l",
             "CMCD-Status",

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DefaultDashChunkSource.java
Patch:
@@ -377,7 +377,7 @@ public void getNextChunk(
         playbackPositionUs, bufferedDurationUs, availableLiveDurationUs, queue, chunkIterators);
 
     int selectedTrackIndex = trackSelection.getSelectedIndex();
-    long chunkDurationUs = 0;
+    long chunkDurationUs = C.TIME_UNSET;
     if (selectedTrackIndex < chunkIterators.length && chunkIterators[selectedTrackIndex].next()) {
       chunkDurationUs =
           chunkIterators[selectedTrackIndex].getChunkEndTimeUs()

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DefaultDashChunkSourceTest.java
Patch:
@@ -316,7 +316,7 @@ public void getNextChunk_chunkSourceWithDefaultCmcdConfiguration_setsCmcdLogging
             "CMCD-Object",
             "br=700,tb=1300,d=4000",
             "CMCD-Request",
-            "bl=0",
+            "bl=0,mtp=1000",
             "CMCD-Session",
             "cid=\"mediaId\",sid=\"" + cmcdConfiguration.sessionId + "\",sf=d,st=v");
   }
@@ -361,7 +361,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
             "CMCD-Object",
             "br=700,tb=1300,d=4000",
             "CMCD-Request",
-            "bl=0",
+            "bl=0,mtp=1000",
             "CMCD-Session",
             "cid=\"mediaIdcontentIdSuffix\",sf=d,st=v",
             "CMCD-Status",
@@ -407,7 +407,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
             "CMCD-Object",
             "br=700,tb=1300,d=4000,key1=value1",
             "CMCD-Request",
-            "bl=0,key2=\"stringValue\"",
+            "bl=0,mtp=1000,key2=\"stringValue\"",
             "CMCD-Session",
             "cid=\"mediaId\",sid=\"" + cmcdConfiguration.sessionId + "\",sf=d,st=v,key3=1",
             "CMCD-Status",

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
Patch:
@@ -487,7 +487,7 @@ public void getNextChunk(
     seenExpectedPlaylistError = false;
     expectedPlaylistUrl = null;
 
-    long chunkDurationUs = 0;
+    long chunkDurationUs = C.TIME_UNSET;
     if (selectedTrackIndex < mediaChunkIterators.length
         && mediaChunkIterators[selectedTrackIndex].next()) {
       chunkDurationUs =

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/HlsChunkSourceTest.java
Patch:
@@ -210,7 +210,7 @@ public void getNextChunk_chunkSourceWithDefaultCmcdConfiguration_setsCmcdLogging
     assertThat(output.chunk.dataSpec.httpRequestHeaders)
         .containsExactly(
             "CMCD-Object",
-            "br=800,tb=800,d=0",
+            "br=800,tb=800",
             "CMCD-Request",
             "bl=0",
             "CMCD-Session",
@@ -256,7 +256,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
     assertThat(output.chunk.dataSpec.httpRequestHeaders)
         .containsExactly(
             "CMCD-Object",
-            "br=800,tb=800,d=0",
+            "br=800,tb=800",
             "CMCD-Request",
             "bl=0",
             "CMCD-Session",
@@ -303,7 +303,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
     assertThat(output.chunk.dataSpec.httpRequestHeaders)
         .containsExactly(
             "CMCD-Object",
-            "br=800,tb=800,d=0,key1=value1",
+            "br=800,tb=800,key1=value1",
             "CMCD-Request",
             "bl=0,key2=\"stringValue\"",
             "CMCD-Session",

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/DefaultSsChunkSource.java
Patch:
@@ -286,7 +286,7 @@ public final void getNextChunk(
     int manifestTrackIndex = trackSelection.getIndexInTrackGroup(trackSelectionIndex);
     Uri uri = streamElement.buildRequestUri(manifestTrackIndex, chunkIndex);
 
-    long chunkDurationUs = 0;
+    long chunkDurationUs = C.TIME_UNSET;
     if (trackSelectionIndex < chunkIterators.length && chunkIterators[trackSelectionIndex].next()) {
       chunkDurationUs =
           chunkIterators[trackSelectionIndex].getChunkEndTimeUs()

File: library/smoothstreaming/src/test/java/com/google/android/exoplayer2/source/smoothstreaming/DefaultSsChunkSourceTest.java
Patch:
@@ -66,7 +66,7 @@ public void getNextChunk_chunkSourceWithDefaultCmcdConfiguration_setsCmcdLogging
             "CMCD-Object",
             "br=307,tb=1536,d=1968",
             "CMCD-Request",
-            "bl=0",
+            "bl=0,mtp=1000",
             "CMCD-Session",
             "cid=\"mediaId\",sid=\"" + cmcdConfiguration.sessionId + "\",sf=s,st=v");
   }
@@ -111,7 +111,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
             "CMCD-Object",
             "br=307,tb=1536,d=1968",
             "CMCD-Request",
-            "bl=0",
+            "bl=0,mtp=1000",
             "CMCD-Session",
             "cid=\"mediaIdcontentIdSuffix\",sf=s,st=v",
             "CMCD-Status",
@@ -157,7 +157,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
             "CMCD-Object",
             "br=307,tb=1536,d=1968,key1=value1",
             "CMCD-Request",
-            "bl=0,key2=\"stringValue\"",
+            "bl=0,mtp=1000,key2=\"stringValue\"",
             "CMCD-Session",
             "cid=\"mediaId\",sid=\"" + cmcdConfiguration.sessionId + "\",sf=s,st=v,key3=1",
             "CMCD-Status",

File: library/core/src/main/java/com/google/android/exoplayer2/source/ClippingMediaPeriod.java
Patch:
@@ -331,6 +331,7 @@ public int readData(
         buffer.setFlags(C.BUFFER_FLAG_END_OF_STREAM);
         return C.RESULT_BUFFER_READ;
       }
+      long bufferedPositionUs = getBufferedPositionUs();
       @ReadDataResult int result = childStream.readData(formatHolder, buffer, readFlags);
       if (result == C.RESULT_FORMAT_READ) {
         Format format = Assertions.checkNotNull(formatHolder.format);
@@ -350,7 +351,7 @@ public int readData(
       if (endUs != C.TIME_END_OF_SOURCE
           && ((result == C.RESULT_BUFFER_READ && buffer.timeUs >= endUs)
               || (result == C.RESULT_NOTHING_READ
-                  && getBufferedPositionUs() == C.TIME_END_OF_SOURCE
+                  && bufferedPositionUs == C.TIME_END_OF_SOURCE
                   && !buffer.waitingForKeys))) {
         buffer.clear();
         buffer.setFlags(C.BUFFER_FLAG_END_OF_STREAM);

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/ServerSideAdInsertionMediaSource.java
Patch:
@@ -872,14 +872,15 @@ public long selectTracks(
         @SampleStream.ReadFlags int readFlags) {
       @SampleStream.ReadFlags
       int peekingFlags = readFlags | SampleStream.FLAG_PEEK | SampleStream.FLAG_OMIT_SAMPLE_DATA;
+      long bufferedPositionUs = getBufferedPositionUs(mediaPeriod);
       @SampleStream.ReadDataResult
       int result =
           castNonNull(sampleStreams[streamIndex]).readData(formatHolder, buffer, peekingFlags);
       long adjustedTimeUs =
           getMediaPeriodPositionUsWithEndOfSourceHandling(mediaPeriod, buffer.timeUs);
       if ((result == C.RESULT_BUFFER_READ && adjustedTimeUs == C.TIME_END_OF_SOURCE)
           || (result == C.RESULT_NOTHING_READ
-              && getBufferedPositionUs(mediaPeriod) == C.TIME_END_OF_SOURCE
+              && bufferedPositionUs == C.TIME_END_OF_SOURCE
               && !buffer.waitingForKeys)) {
         maybeNotifyDownstreamFormatChanged(mediaPeriod, streamIndex);
         buffer.clear();

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DefaultDashChunkSourceTest.java
Patch:
@@ -318,7 +318,7 @@ public void getNextChunk_chunkSourceWithDefaultCmcdConfiguration_setsCmcdLogging
             "CMCD-Request",
             "bl=0",
             "CMCD-Session",
-            "cid=\"mediaId\",sid=\"" + cmcdConfiguration.sessionId + "\"");
+            "cid=\"mediaId\",sid=\"" + cmcdConfiguration.sessionId + "\",sf=d,st=v");
   }
 
   @Test
@@ -363,7 +363,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
             "CMCD-Request",
             "bl=0",
             "CMCD-Session",
-            "cid=\"mediaIdcontentIdSuffix\"",
+            "cid=\"mediaIdcontentIdSuffix\",sf=d,st=v",
             "CMCD-Status",
             "rtp=3500");
   }
@@ -409,7 +409,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
             "CMCD-Request",
             "bl=0,key2=\"stringValue\"",
             "CMCD-Session",
-            "cid=\"mediaId\",sid=\"" + cmcdConfiguration.sessionId + "\",key3=1",
+            "cid=\"mediaId\",sid=\"" + cmcdConfiguration.sessionId + "\",sf=d,st=v,key3=1",
             "CMCD-Status",
             "key4=5.0");
   }

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/HlsChunkSourceTest.java
Patch:
@@ -214,7 +214,7 @@ public void getNextChunk_chunkSourceWithDefaultCmcdConfiguration_setsCmcdLogging
             "CMCD-Request",
             "bl=0",
             "CMCD-Session",
-            "cid=\"mediaId\",sid=\"" + cmcdConfiguration.sessionId + "\"");
+            "cid=\"mediaId\",sid=\"" + cmcdConfiguration.sessionId + "\",sf=h,st=v");
   }
 
   @Test
@@ -260,7 +260,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
             "CMCD-Request",
             "bl=0",
             "CMCD-Session",
-            "cid=\"mediaIdcontentIdSuffix\"",
+            "cid=\"mediaIdcontentIdSuffix\",sf=h,st=v",
             "CMCD-Status",
             "rtp=4000");
   }
@@ -307,7 +307,7 @@ public int getRequestedMaximumThroughputKbps(int throughputKbps) {
             "CMCD-Request",
             "bl=0,key2=\"stringValue\"",
             "CMCD-Session",
-            "cid=\"mediaId\",sid=\"" + cmcdConfiguration.sessionId + "\",key3=1",
+            "cid=\"mediaId\",sid=\"" + cmcdConfiguration.sessionId + "\",sf=h,st=v,key3=1",
             "CMCD-Status",
             "key4=5.0");
   }

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -441,7 +441,7 @@ private ImmutableList<Effect> createVideoEffectsFromBundle(Bundle bundle)
     if (selectedEffects[ConfigurationActivity.EDGE_DETECTOR_INDEX]) {
       try {
         Class<?> clazz =
-            Class.forName("com.google.android.exoplayer2.transformerdemo.MediaPipeProcessor");
+            Class.forName("com.google.android.exoplayer2.transformerdemo.MediaPipeShaderProgram");
         Constructor<?> constructor =
             clazz.getConstructor(
                 Context.class,

File: library/extractor/src/main/java/com/google/android/exoplayer2/audio/Ac3Util.java
Patch:
@@ -218,7 +218,7 @@ public static Format parseEAc3AnnexFFormat(
     int numDepSub = dataBitArray.readBits(4); // num_dep_sub
     dataBitArray.skipBits(1); // numDepSub > 0 ? LFE2 : reserved
     if (numDepSub > 0) {
-      dataBitArray.skipBytes(6); // other channel configurations
+      dataBitArray.skipBits(6); // other channel configurations
       // Read Lrs/Rrs pair
       // TODO: Read other channel configuration
       if (dataBitArray.readBits(1) != 0) {

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -1409,6 +1409,9 @@ void setMediaSources(
   /**
    * Sets the shuffle order.
    *
+   * <p>The {@link ShuffleOrder} passed must have the same length as the current playlist ({@link
+   * Player#getMediaItemCount()}).
+   *
    * @param shuffleOrder The shuffle order.
    */
   void setShuffleOrder(ShuffleOrder shuffleOrder);

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -762,6 +762,7 @@ public void replaceMediaItems(int fromIndex, int toIndex, List<MediaItem> mediaI
   @Override
   public void setShuffleOrder(ShuffleOrder shuffleOrder) {
     verifyApplicationThread();
+    checkArgument(shuffleOrder.getLength() == mediaSourceHolderSnapshots.size());
     this.shuffleOrder = shuffleOrder;
     Timeline timeline = createMaskingTimeline();
     PlaybackInfo newPlaybackInfo =

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
Patch:
@@ -193,9 +193,8 @@ private static String getDiagnosticInfoV21(@Nullable Throwable cause) {
 
     private static String buildCustomDiagnosticInfo(int errorCode) {
       String sign = errorCode < 0 ? "neg_" : "";
-      return "com.google.android.exoplayer2.mediacodec.MediaCodecRenderer_"
-          + sign
-          + Math.abs(errorCode);
+      String packageName = "com.google.android.exoplayer2.mediacodec";
+      return packageName + ".MediaCodecRenderer_" + sign + Math.abs(errorCode);
     }
   }
 

File: extensions/cronet/src/main/java/com/google/android/exoplayer2/ext/cronet/CronetDataSourceFactory.java
Patch:
@@ -356,7 +356,7 @@ protected HttpDataSource createDataSourceInternal(
             /* userAgent= */ null,
             defaultRequestProperties,
             /* contentTypePredicate= */ null,
-            /* keepPostFor302Redirects */ false);
+            /* keepPostFor302Redirects= */ false);
     if (transferListener != null) {
       dataSource.addTransferListener(transferListener);
     }

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/PlaybackStats.java
Patch:
@@ -344,7 +344,7 @@ public static PlaybackStats merge(PlaybackStats... playbackStats) {
     return new PlaybackStats(
         playbackCount,
         playbackStateDurationsMs,
-        /* playbackStateHistory */ Collections.emptyList(),
+        /* playbackStateHistory= */ Collections.emptyList(),
         /* mediaTimeHistory= */ Collections.emptyList(),
         firstReportedTimeMs,
         foregroundPlaybackCount,

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashUtil.java
Patch:
@@ -322,7 +322,7 @@ private static void loadInitializationData(
             dataSpec,
             representation.format,
             C.SELECTION_REASON_UNKNOWN,
-            null /* trackSelectionData */,
+            /* trackSelectionData= */ null,
             chunkExtractor);
     initializationChunk.load();
   }

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheFileMetadataIndex.java
Patch:
@@ -247,7 +247,7 @@ private Cursor getCursor() {
         .query(
             tableName,
             COLUMNS,
-            /* selection */ null,
+            /* selection= */ null,
             /* selectionArgs= */ null,
             /* groupBy= */ null,
             /* having= */ null,

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTimeline.java
Patch:
@@ -324,7 +324,7 @@ public static FakeTimeline createMultiPeriodAdTimeline(
     AdPlaybackState contentPeriodState = new AdPlaybackState(/* adsId= */ "adsId");
     AdPlaybackState firstAdPeriodState =
         contentPeriodState
-            .withNewAdGroup(/* adGroupIndex= */ 0, /* adGroupTimesUs */ 0)
+            .withNewAdGroup(/* adGroupIndex= */ 0, /* adGroupTimeUs= */ 0)
             .withAdCount(/* adGroupIndex= */ 0, 1)
             .withAdDurationsUs(
                 /* adGroupIndex= */ 0, DEFAULT_WINDOW_OFFSET_IN_FIRST_PERIOD_US + periodDurationUs)

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DefaultDashChunkSource.java
Patch:
@@ -380,8 +380,7 @@ public void getNextChunk(
     CmcdLog cmcdLog =
         cmcdConfiguration == null
             ? null
-            : CmcdLog.createInstance(
-                cmcdConfiguration, trackSelection, playbackPositionUs, loadPositionUs);
+            : CmcdLog.createInstance(cmcdConfiguration, trackSelection, bufferedDurationUs);
 
     RepresentationHolder representationHolder =
         updateSelectedBaseUrl(trackSelection.getSelectedIndex());

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
Patch:
@@ -491,8 +491,7 @@ public void getNextChunk(
     CmcdLog cmcdLog =
         cmcdConfiguration == null
             ? null
-            : CmcdLog.createInstance(
-                cmcdConfiguration, trackSelection, playbackPositionUs, loadPositionUs);
+            : CmcdLog.createInstance(cmcdConfiguration, trackSelection, bufferedDurationUs);
 
     // Check if the media segment or its initialization segment are fully encrypted.
     @Nullable

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/DefaultSsChunkSource.java
Patch:
@@ -290,9 +290,7 @@ public final void getNextChunk(
     CmcdLog cmcdLog =
         cmcdConfiguration == null
             ? null
-            : CmcdLog.createInstance(
-                cmcdConfiguration, trackSelection, playbackPositionUs, loadPositionUs);
-    ;
+            : CmcdLog.createInstance(cmcdConfiguration, trackSelection, bufferedDurationUs);
 
     out.chunk =
         newMediaChunk(

File: library/core/src/test/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecCallbackTest.java
Patch:
@@ -541,7 +541,7 @@ private static MediaCodec.CodecException createCodecException()
             Integer.TYPE, Integer.TYPE, String.class);
     constructor.setAccessible(true);
     return constructor.newInstance(
-        /* errorCode= */ 0, /* actionCode= */ 0, /* detailMessage= */ "error from codec");
+        /* errorCode */ 0, /* actionCode */ 0, /* detailMessage */ "error from codec");
   }
 
   private static MediaFormat createMediaFormat(String name) {

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecCallback.java
Patch:
@@ -134,10 +134,10 @@ public void shutdown() {
    */
   public int dequeueInputBufferIndex() {
     synchronized (lock) {
+      maybeThrowException();
       if (isFlushingOrShutdown()) {
         return MediaCodec.INFO_TRY_AGAIN_LATER;
       } else {
-        maybeThrowException();
         return availableInputBuffers.isEmpty()
             ? MediaCodec.INFO_TRY_AGAIN_LATER
             : availableInputBuffers.remove();
@@ -153,10 +153,10 @@ public int dequeueInputBufferIndex() {
    */
   public int dequeueOutputBufferIndex(MediaCodec.BufferInfo bufferInfo) {
     synchronized (lock) {
+      maybeThrowException();
       if (isFlushingOrShutdown()) {
         return MediaCodec.INFO_TRY_AGAIN_LATER;
       } else {
-        maybeThrowException();
         if (availableOutputBuffers.isEmpty()) {
           return MediaCodec.INFO_TRY_AGAIN_LATER;
         } else {

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -1571,7 +1571,8 @@ public void onCues(CueGroup cueGroup) {
     @Override
     public void onVideoSizeChanged(VideoSize videoSize) {
       if (videoSize.equals(VideoSize.UNKNOWN)
-          && (player == null || player.getPlaybackState() == Player.STATE_IDLE)) {
+          || player == null
+          || player.getPlaybackState() == Player.STATE_IDLE) {
         return;
       }
       updateAspectRatio();

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/HlsChunkSourceTest.java
Patch:
@@ -321,6 +321,7 @@ private HlsChunkSource createHlsChunkSource(@Nullable CmcdConfiguration cmcdConf
         new DefaultHlsDataSourceFactory(new FakeDataSource.Factory()),
         /* mediaTransferListener= */ null,
         new TimestampAdjusterProvider(),
+        /* timestampAdjusterInitializationTimeoutMs= */ 0,
         /* muxedCaptionFormats= */ null,
         PlayerId.UNSET,
         cmcdConfiguration);

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/HlsMediaPeriodTest.java
Patch:
@@ -96,7 +96,8 @@ public void getSteamKeys_isCompatibleWithHlsMultivariantPlaylistFilter() {
               /* allowChunklessPreparation= */ true,
               HlsMediaSource.METADATA_TYPE_ID3,
               /* useSessionKeys= */ false,
-              PlayerId.UNSET);
+              PlayerId.UNSET,
+              /* timestampAdjusterInitializationTimeoutMs= */ 0);
         };
 
     MediaPeriodAsserts.assertGetStreamKeysAndManifestFilterIntegration(

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
Patch:
@@ -523,7 +523,7 @@ public MediaPeriod createPeriod(MediaPeriodId id, Allocator allocator, long star
     DrmSessionEventListener.EventDispatcher drmEventDispatcher = createDrmEventDispatcher(id);
     DashMediaPeriod mediaPeriod =
         new DashMediaPeriod(
-            firstPeriodId + periodIndex,
+            /* id= */ firstPeriodId + periodIndex,
             manifest,
             baseUrlExclusionList,
             periodIndex,
@@ -571,7 +571,6 @@ protected void releaseSourceInternal() {
     elapsedRealtimeOffsetMs = C.TIME_UNSET;
     staleManifestReloadAttempt = 0;
     expiredManifestPublishTimeUs = C.TIME_UNSET;
-    firstPeriodId = 0;
     periodsById.clear();
     baseUrlExclusionList.reset();
     drmSessionManager.release();

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DashMediaPeriodTest.java
Patch:
@@ -211,6 +211,7 @@ private static DashMediaPeriod createDashMediaPeriod(DashManifest manifest, int
         periodIndex,
         mock(DashChunkSource.Factory.class),
         mock(TransferListener.class),
+        /* cmcdConfiguration= */ null,
         DrmSessionManager.DRM_UNSUPPORTED,
         new DrmSessionEventListener.EventDispatcher()
             .withParameters(/* windowIndex= */ 0, mediaPeriodId),

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/HlsMediaPeriodTest.java
Patch:
@@ -84,6 +84,7 @@ public void getSteamKeys_isCompatibleWithHlsMultivariantPlaylistFilter() {
               mockPlaylistTracker,
               mockDataSourceFactory,
               mock(TransferListener.class),
+              /* cmcdConfiguration= */ null,
               mock(DrmSessionManager.class),
               new DrmSessionEventListener.EventDispatcher()
                   .withParameters(/* windowIndex= */ 0, mediaPeriodId),

File: library/smoothstreaming/src/test/java/com/google/android/exoplayer2/source/smoothstreaming/SsMediaPeriodTest.java
Patch:
@@ -67,6 +67,7 @@ public void getSteamKeys_isCompatibleWithSsManifestFilter() {
               mock(SsChunkSource.Factory.class),
               mock(TransferListener.class),
               mock(CompositeSequenceableLoaderFactory.class),
+              /* cmcdConfiguration= */ null,
               mock(DrmSessionManager.class),
               new DrmSessionEventListener.EventDispatcher()
                   .withParameters(/* windowIndex= */ 0, mediaPeriodId),

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -1080,14 +1080,14 @@ private boolean drainToEndOfStream() throws WriteException {
         && (outputBuffer == null || !outputBuffer.hasRemaining());
   }
 
-  @SuppressWarnings("ReferenceEquality")
   /**
    * Writes the provided buffer to the audio track.
    *
    * @param buffer The buffer to write.
    * @param avSyncPresentationTimeUs The tunneling AV sync presentation time for the buffer, or
    *     {@link C#TIME_END_OF_SOURCE} when draining remaining buffers at the end of the stream.
    */
+  @SuppressWarnings("ReferenceEquality")
   private void writeBuffer(ByteBuffer buffer, long avSyncPresentationTimeUs) throws WriteException {
     if (!buffer.hasRemaining()) {
       return;

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/FinalShaderProgramWrapper.java
Patch:
@@ -461,14 +461,15 @@ private synchronized boolean ensureConfigured(int inputWidth, int inputHeight)
       defaultShaderProgram = null;
       outputSurfaceInfoChanged = false;
     }
+
     if (defaultShaderProgram == null) {
       defaultShaderProgram =
           createDefaultShaderProgram(
               outputSurfaceInfo == null ? 0 : outputSurfaceInfo.orientationDegrees,
               outputWidth,
               outputHeight);
+      outputSurfaceInfoChanged = false;
     }
-
     return true;
   }
 

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/AndroidTestUtil.java
Patch:
@@ -834,7 +834,7 @@ public static Format getFormatForTestFile(String uri) {
     }
   }
 
-  private static boolean canDecode(Format format) throws MediaCodecUtil.DecoderQueryException {
+  private static boolean canDecode(Format format) {
     // Check decoding capability in the same way as the default decoder factory.
     MediaFormat mediaFormat = MediaFormatUtil.createMediaFormatFromFormat(format);
     @Nullable
@@ -843,7 +843,7 @@ private static boolean canDecode(Format format) throws MediaCodecUtil.DecoderQue
       MediaFormatUtil.maybeSetInteger(
           mediaFormat, MediaFormat.KEY_PROFILE, codecProfileAndLevel.first);
     }
-    return DefaultDecoderFactory.getDecoderInfo(format) != null;
+    return EncoderUtil.findCodecForFormat(mediaFormat, /* isDecoder= */ true) != null;
   }
 
   private static boolean canEncode(Format format) {

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -2196,7 +2196,7 @@ public boolean maybeRegisterFrame(
         Format format, long presentationTimestampUs, boolean isLastBuffer) {
       checkStateNotNull(videoFrameProcessor);
       checkState(videoFrameProcessorMaxPendingFrameCount != C.LENGTH_UNSET);
-      checkState(!registeredLastFrame);
+
       if (videoFrameProcessor.getPendingInputFrameCount()
           < videoFrameProcessorMaxPendingFrameCount) {
         videoFrameProcessor.registerInputFrame();

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/IntentUtil.java
Patch:
@@ -95,7 +95,7 @@ public static void addToIntent(List<MediaItem> mediaItems, Intent intent) {
       if (mediaItem.mediaMetadata.title != null) {
         intent.putExtra(TITLE_EXTRA, mediaItem.mediaMetadata.title);
       }
-      addPlaybackPropertiesToIntent(localConfiguration, intent, /* extrasKeySuffix= */ "");
+      addLocalConfigurationToIntent(localConfiguration, intent, /* extrasKeySuffix= */ "");
       addClippingConfigurationToIntent(
           mediaItem.clippingConfiguration, intent, /* extrasKeySuffix= */ "");
     } else {
@@ -105,7 +105,7 @@ public static void addToIntent(List<MediaItem> mediaItems, Intent intent) {
         MediaItem.LocalConfiguration localConfiguration =
             checkNotNull(mediaItem.localConfiguration);
         intent.putExtra(URI_EXTRA + ("_" + i), localConfiguration.uri.toString());
-        addPlaybackPropertiesToIntent(localConfiguration, intent, /* extrasKeySuffix= */ "_" + i);
+        addLocalConfigurationToIntent(localConfiguration, intent, /* extrasKeySuffix= */ "_" + i);
         addClippingConfigurationToIntent(
             mediaItem.clippingConfiguration, intent, /* extrasKeySuffix= */ "_" + i);
         if (mediaItem.mediaMetadata.title != null) {
@@ -196,7 +196,7 @@ private static MediaItem.Builder populateDrmPropertiesFromIntent(
     return builder;
   }
 
-  private static void addPlaybackPropertiesToIntent(
+  private static void addLocalConfigurationToIntent(
       MediaItem.LocalConfiguration localConfiguration, Intent intent, String extrasKeySuffix) {
     intent
         .putExtra(MIME_TYPE_EXTRA + extrasKeySuffix, localConfiguration.mimeType)

File: library/common/src/test/java/com/google/android/exoplayer2/MediaItemTest.java
Patch:
@@ -799,7 +799,7 @@ public void buildUpon_individualSetters_equalsToOriginal() {
     MediaItem copy = mediaItem.buildUpon().build();
 
     assertThat(copy).isEqualTo(mediaItem);
-    assertThat(copy.localConfiguration).isEqualTo(mediaItem.playbackProperties);
+    assertThat(copy.localConfiguration).isEqualTo(mediaItem.localConfiguration);
   }
 
   @Test
@@ -864,7 +864,7 @@ public void buildUpon_wholeObjectSetters_equalsToOriginal() {
   }
 
   @Test
-  public void roundTripViaBundle_withoutPlaybackProperties_yieldsEqualInstance() {
+  public void roundTripViaBundle_withoutLocalConfiguration_yieldsEqualInstance() {
     MediaItem mediaItem =
         new MediaItem.Builder()
             .setMediaId("mediaId")
@@ -894,7 +894,7 @@ public void roundTripViaBundle_withoutPlaybackProperties_yieldsEqualInstance() {
   }
 
   @Test
-  public void roundTripViaBundle_withPlaybackProperties_dropsPlaybackProperties() {
+  public void roundTripViaBundle_withLocalConfiguration_dropsLocalConfiguration() {
     MediaItem mediaItem = new MediaItem.Builder().setUri(URI_STRING).build();
 
     assertThat(mediaItem.localConfiguration).isNotNull();

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Codec.java
Patch:
@@ -130,10 +130,10 @@ default boolean videoNeedsEncoding() {
 
   /**
    * Returns the maximum number of frames that may be pending in the output {@code Codec} at a time,
-   * or {@link C#UNLIMITED_PENDING_FRAME_COUNT} if it's not necessary to enforce a limit.
+   * or {@code 5} as a default value.
    */
   default int getMaxPendingFrameCount() {
-    return C.UNLIMITED_PENDING_FRAME_COUNT;
+    return 5;
   }
 
   /**

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExoAssetLoaderVideoRenderer.java
Patch:
@@ -147,8 +147,7 @@ protected boolean feedConsumerFromDecoder() throws ExportException {
       return true;
     }
 
-    if (maxDecoderPendingFrameCount != C.UNLIMITED_PENDING_FRAME_COUNT
-        && sampleConsumer.getPendingVideoFrameCount() == maxDecoderPendingFrameCount) {
+    if (sampleConsumer.getPendingVideoFrameCount() == maxDecoderPendingFrameCount) {
       return false;
     }
 

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -981,7 +981,7 @@ default void onDeviceInfoChanged(DeviceInfo deviceInfo) {}
     default void onDeviceVolumeChanged(int volume, boolean muted) {}
 
     /**
-     * Called each time there's a change in the size of the video being rendered.
+     * Called each time when {@link Player#getVideoSize()} changes.
      *
      * <p>{@link #onEvents(Player, Events)} will also be called to report this event along with
      * other events that happen in the same {@link Looper} message queue iteration.
@@ -3066,8 +3066,8 @@ default void replaceMediaItems(int fromIndex, int toIndex, List<MediaItem> media
   /**
    * Gets the size of the video.
    *
-   * <p>The video's width and height are {@code 0} if there is no video or its size has not been
-   * determined yet.
+   * <p>The video's width and height are {@code 0} if there is {@linkplain
+   * Tracks#isTypeSupported(int) no supported video track} or its size has not been determined yet.
    *
    * @see Listener#onVideoSizeChanged(VideoSize)
    */

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -630,6 +630,7 @@ protected void onDisabled() {
       super.onDisabled();
     } finally {
       eventDispatcher.disabled(decoderCounters);
+      eventDispatcher.videoSizeChanged(VideoSize.UNKNOWN);
     }
   }
 

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/FrameConsumptionManager.java
Patch:
@@ -65,6 +65,7 @@ public synchronized void onReadyToAcceptInputFrame() {
 
     long presentationTimeUs = pendingFrame.second;
     if (presentationTimeUs == C.TIME_END_OF_SOURCE) {
+      consumingGlShaderProgramInputCapacity++;
       videoFrameProcessingTaskExecutor.submit(
           consumingGlShaderProgram::signalEndOfCurrentInputStream);
     } else {

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExoAssetLoaderVideoRenderer.java
Patch:
@@ -71,6 +71,7 @@ protected Format overrideFormat(Format inputFormat) {
 
   @Override
   protected void onInputFormatRead(Format inputFormat) {
+    DebugTraceUtil.recordLatestVideoInputFormat(inputFormat);
     if (flattenForSlowMotion) {
       sefVideoSlowMotionFlattener = new SefSlowMotionFlattener(inputFormat);
     }

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
Patch:
@@ -27,6 +27,7 @@
 import android.content.res.AssetManager;
 import android.net.Uri;
 import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
 import android.text.TextUtils;
 import android.util.JsonReader;
@@ -271,7 +272,7 @@ private void onSampleDownloadButtonClicked(PlaylistHolder playlistHolder) {
       Toast.makeText(getApplicationContext(), downloadUnsupportedStringId, Toast.LENGTH_LONG)
           .show();
     } else if (!notificationPermissionToastShown
-        && Util.SDK_INT >= 33
+        && Build.VERSION.SDK_INT >= 33
         && checkSelfPermission(Api33.getPostNotificationPermissionString())
             != PackageManager.PERMISSION_GRANTED) {
       downloadMediaItemWaitingForNotificationPermission = playlistHolder.mediaItems.get(0);

File: library/core/src/test/java/com/google/android/exoplayer2/e2etest/TsPlaybackTest.java
Patch:
@@ -63,6 +63,7 @@ public static ImmutableList<String> mediaSamples() {
         "sample_h264_mpeg_audio.ts",
         "sample_h264_no_access_unit_delimiters.ts",
         "sample_h265.ts",
+        "sample_h265_rps_pred.ts",
         "sample_latm.ts",
         "sample_scte35.ts",
         "sample_with_id3.adts",

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaSource.java
Patch:
@@ -276,9 +276,9 @@ public MediaItem getMediaItem() {
   @Override
   protected void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     transferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(
         /* playbackLooper= */ checkNotNull(Looper.myLooper()), getPlayerId());
+    drmSessionManager.prepare();
     notifySourceInfoRefreshed();
   }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
Patch:
@@ -447,8 +447,8 @@ public MediaItem getMediaItem() {
   @Override
   protected void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     this.mediaTransferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(/* playbackLooper= */ Looper.myLooper(), getPlayerId());
+    drmSessionManager.prepare();
     if (sideloadedManifest) {
       processManifest(false);
     } else {

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaSource.java
Patch:
@@ -415,9 +415,9 @@ public MediaItem getMediaItem() {
   @Override
   protected void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     this.mediaTransferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(
         /* playbackLooper= */ checkNotNull(Looper.myLooper()), getPlayerId());
+    drmSessionManager.prepare();
     MediaSourceEventListener.EventDispatcher eventDispatcher =
         createEventDispatcher(/* mediaPeriodId= */ null);
     playlistTracker.start(

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/SsMediaSource.java
Patch:
@@ -372,8 +372,8 @@ public MediaItem getMediaItem() {
   @Override
   protected void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     this.mediaTransferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(/* playbackLooper= */ Looper.myLooper(), getPlayerId());
+    drmSessionManager.prepare();
     if (sideloadedManifest) {
       manifestLoaderErrorThrower = new LoaderErrorThrower.Dummy();
       processManifest();

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSource.java
Patch:
@@ -213,9 +213,9 @@ public boolean isSingleWindow() {
   public synchronized void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     assertThat(preparedSource).isFalse();
     transferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(
         /* playbackLooper= */ checkNotNull(Looper.myLooper()), getPlayerId());
+    drmSessionManager.prepare();
     preparedSource = true;
     releasedSource = false;
     sourceInfoRefreshHandler = Util.createHandlerForCurrentLooper();

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/ExportTest.java
Patch:
@@ -158,8 +158,10 @@ public void export8K24() throws Exception {
             .setEncoderFactory(new ForceEncodeEncoderFactory(context))
             .build();
     MediaItem mediaItem = MediaItem.fromUri(Uri.parse(MP4_REMOTE_8K24_URI_STRING));
+    // TODO: b/281824052 - have requestCalculateSsim always be true after linked bug is fixed.
+    boolean requestCalculateSsim = !Util.MANUFACTURER.equals("samsung");
     new TransformerAndroidTestRunner.Builder(context, transformer)
-        .setRequestCalculateSsim(true)
+        .setRequestCalculateSsim(requestCalculateSsim)
         .setTimeoutSeconds(180)
         .build()
         .run(testId, mediaItem);

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioCapabilities.java
Patch:
@@ -32,6 +32,7 @@
 import androidx.annotation.DoNotInline;
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
+import androidx.annotation.VisibleForTesting;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.util.MimeTypes;
@@ -46,7 +47,7 @@
 public final class AudioCapabilities {
 
   private static final int DEFAULT_MAX_CHANNEL_COUNT = 8;
-  private static final int DEFAULT_SAMPLE_RATE_HZ = 48_000;
+  @VisibleForTesting /* package */ static final int DEFAULT_SAMPLE_RATE_HZ = 48_000;
 
   /** The minimum audio capabilities supported by all devices. */
   public static final AudioCapabilities DEFAULT_AUDIO_CAPABILITIES =

File: library/common/src/main/java/com/google/android/exoplayer2/Format.java
Patch:
@@ -750,12 +750,12 @@ public Format build() {
 
   // Container specific.
 
-  /** The mime type of the container, or null if unknown or not applicable. */
+  /** The MIME type of the container, or null if unknown or not applicable. */
   @Nullable public final String containerMimeType;
 
   // Sample specific.
 
-  /** The sample mime type, or null if unknown or not applicable. */
+  /** The sample MIME type, or null if unknown or not applicable. */
   @Nullable public final String sampleMimeType;
   /**
    * The maximum size of a buffer of data (typically one sample), or {@link #NO_VALUE} if unknown or

File: library/common/src/main/java/com/google/android/exoplayer2/util/FileTypes.java
Patch:
@@ -132,7 +132,7 @@ private FileTypes() {}
   /**
    * Returns the {@link Type} corresponding to the MIME type provided.
    *
-   * <p>Returns {@link #UNKNOWN} if the mime type is {@code null}.
+   * <p>Returns {@link #UNKNOWN} if the MIME type is {@code null}.
    */
   public static @FileTypes.Type int inferFileTypeFromMimeType(@Nullable String mimeType) {
     if (mimeType == null) {

File: library/core/src/main/java/com/google/android/exoplayer2/RendererCapabilities.java
Patch:
@@ -180,7 +180,7 @@ interface Listener {
    *       C#FORMAT_UNSUPPORTED_DRM}, {@link C#FORMAT_UNSUPPORTED_SUBTYPE} and {@link
    *       C#FORMAT_UNSUPPORTED_TYPE}.
    *   <li>{@link AdaptiveSupport}: The level of support for adapting from the format to another
-   *       format of the same mime type. One of {@link #ADAPTIVE_SEAMLESS}, {@link
+   *       format of the same MIME type. One of {@link #ADAPTIVE_SEAMLESS}, {@link
    *       #ADAPTIVE_NOT_SEAMLESS} and {@link #ADAPTIVE_NOT_SUPPORTED}. Only set if the level of
    *       support for the format itself is {@link C#FORMAT_HANDLED} or {@link
    *       C#FORMAT_EXCEEDS_CAPABILITIES}.

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/MediaMetricsListener.java
Patch:
@@ -528,7 +528,7 @@ private void reportTrackChangeEvent(
       builder.setTrackState(TrackChangeEvent.TRACK_STATE_ON);
       builder.setTrackChangeReason(getTrackChangeReason(trackSelectionReason));
       if (format.containerMimeType != null) {
-        // TODO(b/181121074): Progressive container mime type is not filled in by MediaSource.
+        // TODO(b/181121074): Progressive container MIME type is not filled in by MediaSource.
         builder.setContainerMimeType(format.containerMimeType);
       }
       if (format.sampleMimeType != null) {

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecInfo.java
Patch:
@@ -57,7 +57,7 @@
 import java.lang.annotation.Target;
 import java.util.List;
 
-/** Information about a {@link MediaCodec} for a given mime type. */
+/** Information about a {@link MediaCodec} for a given MIME type. */
 @SuppressWarnings("InlinedApi")
 public final class MediaCodecInfo {
 
@@ -149,10 +149,10 @@ public final class MediaCodecInfo {
    * Creates an instance.
    *
    * @param name The name of the {@link MediaCodec}.
-   * @param mimeType A mime type supported by the {@link MediaCodec}.
+   * @param mimeType A MIME type supported by the {@link MediaCodec}.
    * @param codecMimeType The MIME type that the codec uses for media of type {@code #mimeType}.
    *     Equal to {@code mimeType} unless the codec is known to use a non-standard MIME type alias.
-   * @param capabilities The capabilities of the {@link MediaCodec} for the specified mime type, or
+   * @param capabilities The capabilities of the {@link MediaCodec} for the specified MIME type, or
    *     {@code null} if not known.
    * @param hardwareAccelerated Whether the {@link MediaCodec} is hardware accelerated.
    * @param softwareOnly Whether the {@link MediaCodec} is software only.

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
Patch:
@@ -96,7 +96,7 @@ public static class DecoderInitializationException extends Exception {
     private static final int NO_SUITABLE_DECODER_ERROR = CUSTOM_ERROR_CODE_BASE + 1;
     private static final int DECODER_QUERY_ERROR = CUSTOM_ERROR_CODE_BASE + 2;
 
-    /** The mime type for which a decoder was being initialized. */
+    /** The MIME type for which a decoder was being initialized. */
     public final String mimeType;
 
     /** Whether it was required that the decoder support a secure output path. */

File: library/core/src/main/java/com/google/android/exoplayer2/source/mediaparser/OutputConsumerAdapterV30.java
Patch:
@@ -217,7 +217,7 @@ public Pair<MediaParser.SeekPoint, MediaParser.SeekPoint> getSeekPoints(long see
   }
 
   /**
-   * Defines the container mime type to propagate through {@link TrackOutput#format}.
+   * Defines the container MIME type to propagate through {@link TrackOutput#format}.
    *
    * @param parserName The name of the selected parser.
    */

File: library/extractor/src/main/java/com/google/android/exoplayer2/audio/Ac3Util.java
Patch:
@@ -61,7 +61,7 @@ public static final class SyncFrameInfo {
     public static final int STREAM_TYPE_TYPE2 = 2;
 
     /**
-     * The sample mime type of the bitstream. One of {@link MimeTypes#AUDIO_AC3} and {@link
+     * The sample MIME type of the bitstream. One of {@link MimeTypes#AUDIO_AC3} and {@link
      * MimeTypes#AUDIO_E_AC3}.
      */
     @Nullable public final String mimeType;
@@ -448,7 +448,7 @@ public static SyncFrameInfo parseAc3SyncframeInfo(ParsableBitArray data) {
       int fscod = data.readBits(2);
       if (fscod == 3) {
         // fscod '11' indicates that the decoder should not attempt to decode audio. We invalidate
-        // the mime type to prevent association with a renderer.
+        // the MIME type to prevent association with a renderer.
         mimeType = null;
       }
       int frmsizecod = data.readBits(6);

File: library/extractor/src/main/java/com/google/android/exoplayer2/audio/MpegAudioUtil.java
Patch:
@@ -27,7 +27,7 @@ public static final class Header {
 
     /** MPEG audio header version. */
     public int version;
-    /** The mime type. */
+    /** The MIME type. */
     @Nullable public String mimeType;
     /** Size of the frame associated with this header, in bytes. */
     public int frameSize;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -2408,8 +2408,8 @@ private byte[] getHdrStaticInfo() {
     /**
      * Builds initialization data for a {@link Format} from FourCC codec private data.
      *
-     * @return The codec mime type and initialization data. If the compression type is not supported
-     *     then the mime type is set to {@link MimeTypes#VIDEO_UNKNOWN} and the initialization data
+     * @return The codec MIME type and initialization data. If the compression type is not supported
+     *     then the MIME type is set to {@link MimeTypes#VIDEO_UNKNOWN} and the initialization data
      *     is {@code null}.
      * @throws ParserException If the initialization data could not be built.
      */

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/SeiReader.java
Patch:
@@ -50,7 +50,7 @@ public void createTracks(ExtractorOutput extractorOutput, TrackIdGenerator idGen
       Assertions.checkArgument(
           MimeTypes.APPLICATION_CEA608.equals(channelMimeType)
               || MimeTypes.APPLICATION_CEA708.equals(channelMimeType),
-          "Invalid closed caption mime type provided: " + channelMimeType);
+          "Invalid closed caption MIME type provided: " + channelMimeType);
       String formatId = channelFormat.id != null ? channelFormat.id : idGenerator.getFormatId();
       output.format(
           new Format.Builder()

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/UserDataReader.java
Patch:
@@ -49,7 +49,7 @@ public void createTracks(
       Assertions.checkArgument(
           MimeTypes.APPLICATION_CEA608.equals(channelMimeType)
               || MimeTypes.APPLICATION_CEA708.equals(channelMimeType),
-          "Invalid closed caption mime type provided: " + channelMimeType);
+          "Invalid closed caption MIME type provided: " + channelMimeType);
       output.format(
           new Format.Builder()
               .setId(idGenerator.getFormatId())

File: library/extractor/src/main/java/com/google/android/exoplayer2/metadata/flac/PictureFrame.java
Patch:
@@ -31,7 +31,7 @@ public final class PictureFrame implements Metadata.Entry {
 
   /** The type of the picture. */
   public final int pictureType;
-  /** The mime type of the picture. */
+  /** The MIME type of the picture. */
   public final String mimeType;
   /** A description of the picture. */
   public final String description;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
Patch:
@@ -1550,7 +1550,7 @@ private static Format deriveFormat(
       sampleMimeType = MimeTypes.getMediaMimeType(codecs);
     } else {
       // The variant assigns more than one codec string to this track. We choose whichever codec
-      // string matches the sample mime type. This can happen when different languages are encoded
+      // string matches the sample MIME type. This can happen when different languages are encoded
       // using different codecs.
       codecs =
           MimeTypes.getCodecsCorrespondingToMimeType(

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/SampleQueueMappingException.java
Patch:
@@ -24,9 +24,9 @@
 public final class SampleQueueMappingException extends IOException {
 
   /**
-   * @param mimeType The mime type of the track group whose mapping failed.
+   * @param mimeType The MIME type of the track group whose mapping failed.
    */
   public SampleQueueMappingException(@Nullable String mimeType) {
-    super("Unable to bind a sample queue to TrackGroup with mime type " + mimeType + ".");
+    super("Unable to bind a sample queue to TrackGroup with MIME type " + mimeType + ".");
   }
 }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/SamplePipeline.java
Patch:
@@ -137,10 +137,10 @@ private boolean feedMuxer() throws ExportException {
    * <p>The {@linkplain Format requestedFormat} determines what support is checked.
    *
    * <ul>
-   *   <li>The {@link Format#sampleMimeType} determines whether audio or video mime types are
+   *   <li>The {@link Format#sampleMimeType} determines whether audio or video MIME types are
    *       considered. See {@link MimeTypes#isAudio} and {@link MimeTypes#isVideo} for more details.
    *   <li>The {@link Format#sampleMimeType} must be populated with the preferred {@linkplain
-   *       MimeTypes MIME type}. This mime type will be the first checked.
+   *       MimeTypes MIME type}. This MIME type will be the first checked.
    *   <li>When checking video support, if the HDR {@link Format#colorInfo} is set, only encoders
    *       that support that {@link ColorInfo} will be considered.
    * </ul>

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/MediaPeriodAsserts.java
Patch:
@@ -86,7 +86,7 @@ void assertGetStreamKeysAndManifestFilterIntegration(
    * @param mediaPeriodFactory A factory to create a {@link MediaPeriod} based on a manifest.
    * @param manifest The manifest which is to be tested.
    * @param periodIndex The index of period in the manifest.
-   * @param ignoredMimeType Optional mime type whose existence in the filtered track groups is not
+   * @param ignoredMimeType Optional MIME type whose existence in the filtered track groups is not
    *     asserted.
    */
   public static <T extends FilterableManifest<T>>

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -2177,7 +2177,7 @@ public MediaFormat amendMediaFormatKeys(MediaFormat mediaFormat) {
      */
     public void onCodecInitialized(String codecName) {
       videoFrameProcessorMaxPendingFrameCount =
-          Util.getMaxPendingFramesCountForMediaCodecEncoders(
+          Util.getMaxPendingFramesCountForMediaCodecDecoders(
               renderer.context, codecName, /* requestedHdrToneMapping= */ false);
     }
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultCodec.java
Patch:
@@ -151,7 +151,7 @@ public DefaultCodec(
     this.mediaCodec = mediaCodec;
     this.inputSurface = inputSurface;
     maxPendingFrameCount =
-        Util.getMaxPendingFramesCountForMediaCodecEncoders(
+        Util.getMaxPendingFramesCountForMediaCodecDecoders(
             context, mediaCodecName, requestedHdrToneMapping);
   }
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/MuxerWrapper.java
Patch:
@@ -22,7 +22,6 @@
 import static java.lang.Math.max;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 
-import android.util.Log;
 import android.util.SparseArray;
 import androidx.annotation.IntRange;
 import androidx.annotation.Nullable;
@@ -240,7 +239,6 @@ public void endTrack(@C.TrackType int trackType) {
       if (!isEnded) {
         isEnded = true;
         listener.onEnded(Util.usToMs(maxEndedTrackTimeUs), getCurrentOutputSizeBytes());
-        Log.e("LYC", DebugTraceUtil.generateTrace());
       }
     }
   }

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/DefaultVideoFrameProcessorVideoFrameRenderingTest.java
Patch:
@@ -345,11 +345,11 @@ public void onEnded() {
         .submit(
             () -> {
               blankFrameProducer.configureGlObjects();
-              checkNotNull(defaultVideoFrameProcessor)
-                  .setInputFrameInfo(new FrameInfo.Builder(WIDTH, HEIGHT).build());
               // A frame needs to be registered despite not queuing any external input to ensure
               // that the video frame processor knows about the stream offset.
-              defaultVideoFrameProcessor.registerInputStream(INPUT_TYPE_SURFACE);
+              checkNotNull(defaultVideoFrameProcessor).registerInputStream(INPUT_TYPE_SURFACE);
+              defaultVideoFrameProcessor.setInputFrameInfo(
+                  new FrameInfo.Builder(WIDTH, HEIGHT).build());
               defaultVideoFrameProcessor.registerInputFrame();
               blankFrameProducer.produceBlankFramesAndQueueEndOfStream(inputPresentationTimesUs);
               defaultVideoFrameProcessor.signalEndOfInput();

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultEncoderFactory.java
Patch:
@@ -547,10 +547,10 @@ private static void adjustMediaFormatForH264EncoderSettings(
           EncoderUtil.findHighestSupportedEncodingLevel(
               encoderInfo, mimeType, expectedEncodingProfile);
       if (supportedEncodingLevel != EncoderUtil.LEVEL_UNSET) {
-        // Use the highest supported profile and use B-frames.
+        // Use the highest supported profile. Don't configure B-frames, because it doesn't work on
+        // some devices.
         mediaFormat.setInteger(MediaFormat.KEY_PROFILE, expectedEncodingProfile);
         mediaFormat.setInteger(MediaFormat.KEY_LEVEL, supportedEncodingLevel);
-        mediaFormat.setInteger(MediaFormat.KEY_MAX_B_FRAMES, 1);
       }
     } else if (Util.SDK_INT >= 26) {
       int expectedEncodingProfile = MediaCodecInfo.CodecProfileLevel.AVCProfileHigh;

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/DefaultVideoFrameProcessor.java
Patch:
@@ -417,6 +417,7 @@ public void renderOutputFrame(long renderTimeNs) {
 
   @Override
   public void signalEndOfInput() {
+    DebugTraceUtil.recordVideoFrameProcessorReceiveDecoderEos();
     checkState(!inputStreamEnded);
     inputStreamEnded = true;
     boolean allInputStreamsProcessed;

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/ExternalTextureManager.java
Patch:
@@ -97,6 +97,7 @@ public ExternalTextureManager(
         unused ->
             videoFrameProcessingTaskExecutor.submit(
                 () -> {
+                  DebugTraceUtil.recordFrameRenderedToVideoFrameProcessorInput();
                   if (numberOfFramesToDropOnBecomingAvailable > 0) {
                     numberOfFramesToDropOnBecomingAvailable--;
                     surfaceTexture.updateTexImage();

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/FinalShaderProgramWrapper.java
Patch:
@@ -181,6 +181,7 @@ public void signalEndOfCurrentInputStream() {
     boolean frameProcessingEnded =
         checkNotNull(onInputStreamProcessedListener).onInputStreamProcessed();
     if (frameProcessingEnded) {
+      DebugTraceUtil.recordVideoFrameProcessorSignalEos();
       videoFrameProcessorListenerExecutor.execute(videoFrameProcessorListener::onEnded);
     }
   }
@@ -325,6 +326,7 @@ private synchronized void renderFrameToOutputSurface(
             ? System.nanoTime()
             : renderTimeNs);
     EGL14.eglSwapBuffers(eglDisplay, outputEglSurface);
+    DebugTraceUtil.recordFrameRenderedToVideoFrameProcessorOutput();
   }
 
   private void renderFrameToOutputTexture(GlTextureInfo inputTexture, long presentationTimeUs)

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExoAssetLoaderVideoRenderer.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.decoder.DecoderInputBuffer;
+import com.google.android.exoplayer2.effect.DebugTraceUtil;
 import com.google.android.exoplayer2.video.ColorInfo;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
@@ -127,6 +128,7 @@ protected void onDecoderInputReady(DecoderInputBuffer inputBuffer) {
   @RequiresNonNull({"sampleConsumer", "decoder"})
   protected boolean feedConsumerFromDecoder() throws ExportException {
     if (decoder.isEnded()) {
+      DebugTraceUtil.recordDecoderSignalEos();
       sampleConsumer.signalEndOfVideoInput();
       isEnded = true;
       return false;
@@ -154,6 +156,7 @@ protected boolean feedConsumerFromDecoder() throws ExportException {
     }
 
     decoder.releaseOutputBuffer(presentationTimeUs);
+    DebugTraceUtil.recordDecodedFrame();
     return true;
   }
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -29,6 +29,7 @@
 import com.google.android.exoplayer2.ExoPlayerLibraryInfo;
 import com.google.android.exoplayer2.MediaItem;
 import com.google.android.exoplayer2.audio.AudioProcessor;
+import com.google.android.exoplayer2.effect.DebugTraceUtil;
 import com.google.android.exoplayer2.effect.DefaultVideoFrameProcessor;
 import com.google.android.exoplayer2.effect.Presentation;
 import com.google.android.exoplayer2.source.DefaultMediaSourceFactory;
@@ -710,6 +711,7 @@ public void start(Composition composition, String path) {
     HandlerWrapper applicationHandler = clock.createHandler(looper, /* callback= */ null);
     FallbackListener fallbackListener =
         new FallbackListener(composition, listeners, applicationHandler, transformationRequest);
+    DebugTraceUtil.reset();
     transformerInternal =
         new TransformerInternal(
             context,

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoSamplePipeline.java
Patch:
@@ -37,6 +37,7 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.decoder.DecoderInputBuffer;
+import com.google.android.exoplayer2.effect.DebugTraceUtil;
 import com.google.android.exoplayer2.effect.Presentation;
 import com.google.android.exoplayer2.util.Consumer;
 import com.google.android.exoplayer2.util.DebugViewProvider;
@@ -289,6 +290,7 @@ protected DecoderInputBuffer getMuxerInputBuffer() throws ExportException {
         bufferInfo.presentationTimeUs = finalFramePresentationTimeUs;
       }
     }
+    DebugTraceUtil.recordEncodedFrame();
     encoderOutputBuffer.timeUs = bufferInfo.presentationTimeUs;
     encoderOutputBuffer.setFlags(bufferInfo.flags);
     return encoderOutputBuffer;

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -22,7 +22,6 @@
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
-import static com.google.android.exoplayer2.util.VideoFrameProcessor.INPUT_TYPE_SURFACE;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
 
@@ -2022,9 +2021,8 @@ public boolean maybeEnable(Format inputFormat, long initialStreamOffsetUs)
                     DebugViewProvider.NONE,
                     inputAndOutputColorInfos.first,
                     inputAndOutputColorInfos.second,
-                    INPUT_TYPE_SURFACE,
                     /* renderFramesAutomatically= */ false,
-                    /* executor= */ handler::post,
+                    /* listenerExecutor= */ handler::post,
                     new VideoFrameProcessor.Listener() {
                       @Override
                       public void onOutputSizeChanged(int width, int height) {
@@ -2075,6 +2073,7 @@ public void onEnded() {
                         throw new IllegalStateException();
                       }
                     });
+        videoFrameProcessor.registerInputStream(VideoFrameProcessor.INPUT_TYPE_SURFACE);
         this.initialStreamOffsetUs = initialStreamOffsetUs;
       } catch (Exception e) {
         throw renderer.createRendererException(

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/DefaultVideoFrameProcessorVideoFrameRenderingTest.java
Patch:
@@ -301,7 +301,6 @@ private void processFramesToEndOfStream(
                     DebugViewProvider.NONE,
                     /* inputColorInfo= */ ColorInfo.SDR_BT709_LIMITED,
                     /* outputColorInfo= */ ColorInfo.SDR_BT709_LIMITED,
-                    INPUT_TYPE_SURFACE,
                     renderFramesAutomatically,
                     MoreExecutors.directExecutor(),
                     new VideoFrameProcessor.Listener() {
@@ -341,7 +340,6 @@ public void onEnded() {
                         videoFrameProcessingEndedCountDownLatch.countDown();
                       }
                     }));
-
     defaultVideoFrameProcessor
         .getTaskExecutor()
         .submit(

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/FinalShaderProgramWrapper.java
Patch:
@@ -119,7 +119,6 @@ public FinalShaderProgramWrapper(
       ImmutableList<GlMatrixTransformation> matrixTransformations,
       ImmutableList<RgbMatrix> rgbMatrices,
       DebugViewProvider debugViewProvider,
-      ColorInfo inputColorInfo,
       ColorInfo outputColorInfo,
       boolean enableColorTransfers,
       boolean renderFramesAutomatically,

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/VideoFrameProcessorTestRunner.java
Patch:
@@ -275,7 +275,6 @@ private VideoFrameProcessorTestRunner(
             DebugViewProvider.NONE,
             inputColorInfo,
             outputColorInfo,
-            inputType,
             /* renderFramesAutomatically= */ true,
             MoreExecutors.directExecutor(),
             new VideoFrameProcessor.Listener() {
@@ -311,6 +310,7 @@ public void onEnded() {
                 videoFrameProcessingEnded = true;
               }
             });
+    videoFrameProcessor.registerInputStream(inputType);
   }
 
   public void processFirstFrameAndEnd() throws Exception {

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
Patch:
@@ -27,6 +27,7 @@
 import android.content.res.AssetManager;
 import android.net.Uri;
 import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
 import android.text.TextUtils;
 import android.util.JsonReader;
@@ -271,7 +272,7 @@ private void onSampleDownloadButtonClicked(PlaylistHolder playlistHolder) {
       Toast.makeText(getApplicationContext(), downloadUnsupportedStringId, Toast.LENGTH_LONG)
           .show();
     } else if (!notificationPermissionToastShown
-        && Util.SDK_INT >= 33
+        && Build.VERSION.SDK_INT >= 33
         && checkSelfPermission(Api33.getPostNotificationPermissionString())
             != PackageManager.PERMISSION_GRANTED) {
       downloadMediaItemWaitingForNotificationPermission = playlistHolder.mediaItems.get(0);

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/BitmapTextureManager.java
Patch:
@@ -36,7 +36,7 @@
  *
  * <p>Public methods in this class can be called from any thread.
  */
-/* package */ final class BitmapTextureManager implements InputHandler {
+/* package */ final class BitmapTextureManager implements TextureManager {
   private final GlShaderProgram shaderProgram;
   private final VideoFrameProcessingTaskExecutor videoFrameProcessingTaskExecutor;
   // The queue holds all bitmaps with one or more frames pending to be sent downstream.

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/ExternalTextureManager.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.effect;
 
+import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
 
 import android.graphics.Bitmap;
@@ -35,7 +36,7 @@
  * Forwards externally produced frames that become available via a {@link SurfaceTexture} to an
  * {@link ExternalShaderProgram} for consumption.
  */
-/* package */ final class ExternalTextureManager implements InputHandler {
+/* package */ final class ExternalTextureManager implements TextureManager {
 
   private final VideoFrameProcessingTaskExecutor videoFrameProcessingTaskExecutor;
   private final ExternalShaderProgram externalShaderProgram;
@@ -167,6 +168,7 @@ public void onFlush() {
    */
   @Override
   public void registerInputFrame(FrameInfo frame) {
+    checkState(!inputStreamEnded);
     pendingFrames.add(frame);
   }
 

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/TextureManager.java
Patch:
@@ -25,7 +25,7 @@
 import com.google.android.exoplayer2.util.VideoFrameProcessor;
 
 /** A component that handles {@code DefaultVideoFrameProcessor}'s input. */
-/* package */ interface InputHandler extends GlShaderProgram.InputListener {
+/* package */ interface TextureManager extends GlShaderProgram.InputListener {
 
   /**
    * See {@link DefaultVideoFrameProcessor#setInputDefaultBufferSize}.
@@ -61,7 +61,7 @@ default Surface getInputSurface() {
     throw new UnsupportedOperationException();
   }
 
-  /** Informs the {@code InputHandler} that a frame will be queued. */
+  /** Informs the {@code TextureManager} that a frame will be queued. */
   default void registerInputFrame(FrameInfo frameInfo) {
     throw new UnsupportedOperationException();
   }

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/DefaultVideoFrameProcessorVideoFrameReleaseTest.java
Patch:
@@ -350,10 +350,11 @@ public void onEnded() {
               checkNotNull(defaultVideoFrameProcessor)
                   .setInputFrameInfo(new FrameInfo.Builder(WIDTH, HEIGHT).build());
               // A frame needs to be registered despite not queuing any external input to ensure
-              // that
-              // the video frame processor knows about the stream offset.
+              // that the video frame processor knows about the stream offset.
+              defaultVideoFrameProcessor.registerInputStream(INPUT_TYPE_SURFACE);
               defaultVideoFrameProcessor.registerInputFrame();
               blankFrameProducer.produceBlankFramesAndQueueEndOfStream(inputPresentationTimesUs);
+              defaultVideoFrameProcessor.signalEndOfInput();
             });
     videoFrameProcessingEndedCountDownLatch.await();
     @Nullable

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoSamplePipeline.java
Patch:
@@ -218,6 +218,8 @@ public void onMediaItemChanged(
               .setPixelWidthHeightRatio(trackFormat.pixelWidthHeightRatio)
               .setOffsetToAddUs(mediaItemOffsetUs.get())
               .build());
+      videoFrameProcessor.registerInputStream(
+          MimeTypes.isVideo(trackFormat.sampleMimeType) ? INPUT_TYPE_SURFACE : INPUT_TYPE_BITMAP);
     }
     mediaItemOffsetUs.addAndGet(durationUs);
   }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/VideoFrameProcessorTestRunner.java
Patch:
@@ -20,6 +20,7 @@
 import static com.google.android.exoplayer2.testutil.BitmapPixelTestUtil.maybeSaveTestBitmap;
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
+import static com.google.android.exoplayer2.util.VideoFrameProcessor.INPUT_TYPE_BITMAP;
 import static com.google.android.exoplayer2.util.VideoFrameProcessor.INPUT_TYPE_SURFACE;
 import static com.google.common.truth.Truth.assertThat;
 
@@ -322,6 +323,7 @@ public void onContainerExtracted(MediaFormat mediaFormat) {
                         mediaFormat.getInteger(MediaFormat.KEY_HEIGHT))
                     .setPixelWidthHeightRatio(pixelWidthHeightRatio)
                     .build());
+            videoFrameProcessor.registerInputStream(INPUT_TYPE_SURFACE);
             videoFrameProcessor.registerInputFrame();
           }
 
@@ -341,6 +343,7 @@ public void queueInputBitmap(
             .setPixelWidthHeightRatio(pixelWidthHeightRatio)
             .setOffsetToAddUs(offsetToAddUs)
             .build());
+    videoFrameProcessor.registerInputStream(INPUT_TYPE_BITMAP);
     videoFrameProcessor.queueInputBitmap(inputBitmap, durationUs, frameRate);
   }
 

File: library/core/src/test/java/com/google/android/exoplayer2/e2etest/TsPlaybackTest.java
Patch:
@@ -63,6 +63,7 @@ public static ImmutableList<String> mediaSamples() {
         "sample_h264_mpeg_audio.ts",
         "sample_h264_no_access_unit_delimiters.ts",
         "sample_h265.ts",
+        "sample_h265_rps_pred.ts",
         "sample_latm.ts",
         "sample_scte35.ts",
         "sample_with_id3.adts",

File: library/common/src/main/java/com/google/android/exoplayer2/util/VideoFrameProcessor.java
Patch:
@@ -207,7 +207,7 @@ interface Listener {
   void registerInputFrame();
 
   /**
-   * returns the number of input frames that have been made available to the {@code
+   * Returns the number of input frames that have been made available to the {@code
    * VideoFrameProcessor} but have not been processed yet.
    *
    * <p>Can be called on any thread.

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoSamplePipeline.java
Patch:
@@ -391,8 +391,8 @@ public ColorInfo getSupportedInputColor() {
         // populate default color info, which depends on the resolution.
         return ColorInfo.SDR_BT709_LIMITED;
       }
-      if (inputFormat.colorInfo == null) {
-        Log.d(TAG, "colorInfo is null. Defaulting to SDR_BT709_LIMITED.");
+      if (inputFormat.colorInfo == null || !inputFormat.colorInfo.isValid()) {
+        Log.d(TAG, "colorInfo is null or invalid. Defaulting to SDR_BT709_LIMITED.");
         return ColorInfo.SDR_BT709_LIMITED;
       }
       return inputFormat.colorInfo;

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/H265Reader.java
Patch:
@@ -243,8 +243,9 @@ private static Format parseMediaFormat(
     System.arraycopy(sps.nalData, 0, csdData, vps.nalLength, sps.nalLength);
     System.arraycopy(pps.nalData, 0, csdData, vps.nalLength + sps.nalLength, pps.nalLength);
 
+    // Skip the 3-byte NAL unit start code synthesised by the NalUnitTargetBuffer constructor.
     NalUnitUtil.H265SpsData spsData =
-        NalUnitUtil.parseH265SpsNalUnit(sps.nalData, 3, sps.nalLength); // 3bytes start code
+        NalUnitUtil.parseH265SpsNalUnit(sps.nalData, /* nalOffset= */ 3, sps.nalLength);
 
     String codecs =
         CodecSpecificDataUtil.buildHevcCodecString(

File: libraries/extractor/src/test/java/androidx/media3/extractor/ts/TsExtractorTest.java
Patch:
@@ -91,10 +91,11 @@ public void sampleWithH264AndDtsAudio() throws Exception {
   public void sampleWithH265() throws Exception {
     ExtractorAsserts.assertBehavior(TsExtractor::new, "media/ts/sample_h265.ts", simulationConfig);
   }
-  
+
   @Test
   public void sampleWithH265RpsPred() throws Exception {
-    ExtractorAsserts.assertBehavior(TsExtractor::new, "media/ts/sample_h265_rps_pred.ts", simulationConfig);
+    ExtractorAsserts.assertBehavior(
+        TsExtractor::new, "media/ts/sample_h265_rps_pred.ts", simulationConfig);
   }
 
   @Test

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/H265Reader.java
Patch:
@@ -436,7 +436,7 @@ private static void skipShortTermRefPicSets(ParsableNalUnitBitArray bitArray) {
         bitArray.skipBit(); // delta_rps_sign
         bitArray.readUnsignedExpGolombCodedInt(); // abs_delta_rps_minus1
         for (int j = 0; j <= previousNumDeltaPocs; j++) {
-          if (bitArray.readBit()) { // used_by_curr_pic_flag[j]
+          if (!bitArray.readBit()) { // used_by_curr_pic_flag[j]
             bitArray.skipBit(); // use_delta_flag[j]
           }
         }

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaSource.java
Patch:
@@ -276,9 +276,9 @@ public MediaItem getMediaItem() {
   @Override
   protected void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     transferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(
         /* playbackLooper= */ checkNotNull(Looper.myLooper()), getPlayerId());
+    drmSessionManager.prepare();
     notifySourceInfoRefreshed();
   }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
Patch:
@@ -447,8 +447,8 @@ public MediaItem getMediaItem() {
   @Override
   protected void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     this.mediaTransferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(/* playbackLooper= */ Looper.myLooper(), getPlayerId());
+    drmSessionManager.prepare();
     if (sideloadedManifest) {
       processManifest(false);
     } else {

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaSource.java
Patch:
@@ -415,9 +415,9 @@ public MediaItem getMediaItem() {
   @Override
   protected void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     this.mediaTransferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(
         /* playbackLooper= */ checkNotNull(Looper.myLooper()), getPlayerId());
+    drmSessionManager.prepare();
     MediaSourceEventListener.EventDispatcher eventDispatcher =
         createEventDispatcher(/* mediaPeriodId= */ null);
     playlistTracker.start(

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/SsMediaSource.java
Patch:
@@ -372,8 +372,8 @@ public MediaItem getMediaItem() {
   @Override
   protected void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     this.mediaTransferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(/* playbackLooper= */ Looper.myLooper(), getPlayerId());
+    drmSessionManager.prepare();
     if (sideloadedManifest) {
       manifestLoaderErrorThrower = new LoaderErrorThrower.Dummy();
       processManifest();

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSource.java
Patch:
@@ -213,9 +213,9 @@ public boolean isSingleWindow() {
   public synchronized void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     assertThat(preparedSource).isFalse();
     transferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(
         /* playbackLooper= */ checkNotNull(Looper.myLooper()), getPlayerId());
+    drmSessionManager.prepare();
     preparedSource = true;
     releasedSource = false;
     sourceInfoRefreshHandler = Util.createHandlerForCurrentLooper();

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
Patch:
@@ -83,7 +83,7 @@ public final class CastPlayer extends BasePlayer {
 
   /** The {@link DeviceInfo} returned by {@link #getDeviceInfo() this player}. */
   public static final DeviceInfo DEVICE_INFO =
-      new DeviceInfo(DeviceInfo.PLAYBACK_TYPE_REMOTE, /* minVolume= */ 0, /* maxVolume= */ 0);
+      new DeviceInfo.Builder(DeviceInfo.PLAYBACK_TYPE_REMOTE).build();
 
   static {
     ExoPlayerLibraryInfo.registerModule("goog.exo.cast");

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/DefaultVideoFrameProcessor.java
Patch:
@@ -286,7 +286,7 @@ private DefaultVideoFrameProcessor(
             new BitmapTextureManager(inputShaderProgram, videoFrameProcessingTaskExecutor);
         inputShaderProgram.setInputListener(inputBitmapTextureManager);
         break;
-      case VideoFrameProcessor.INPUT_TYPE_TEXID: // fall through
+      case VideoFrameProcessor.INPUT_TYPE_TEXTURE_ID: // fall through
       default:
         throw new VideoFrameProcessingException("Input type not supported yet");
     }

File: library/common/src/main/java/com/google/android/exoplayer2/util/MimeTypes.java
Patch:
@@ -58,6 +58,7 @@ public final class MimeTypes {
   public static final String VIDEO_MJPEG = BASE_TYPE_VIDEO + "/mjpeg";
   public static final String VIDEO_MP42 = BASE_TYPE_VIDEO + "/mp42";
   public static final String VIDEO_MP43 = BASE_TYPE_VIDEO + "/mp43";
+  public static final String VIDEO_RAW = BASE_TYPE_VIDEO + "/raw";
   public static final String VIDEO_UNKNOWN = BASE_TYPE_VIDEO + "/x-unknown";
 
   // audio/ MIME types

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -22,6 +22,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
+import static com.google.android.exoplayer2.util.VideoFrameProcessor.INPUT_TYPE_SURFACE;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
 
@@ -2010,7 +2011,7 @@ public boolean maybeEnable(Format inputFormat, long initialStreamOffsetUs)
                     DebugViewProvider.NONE,
                     inputColorInfo,
                     outputColorInfo,
-                    /* isInputTextureExternal= */ true,
+                    INPUT_TYPE_SURFACE,
                     /* releaseFramesAutomatically= */ false,
                     /* executor= */ handler::post,
                     new VideoFrameProcessor.Listener() {

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/DefaultVideoFrameProcessorImageFrameOutputTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.android.exoplayer2.testutil.BitmapPixelTestUtil.readBitmap;
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+import static com.google.android.exoplayer2.util.VideoFrameProcessor.INPUT_TYPE_BITMAP;
 import static com.google.common.truth.Truth.assertThat;
 
 import androidx.test.ext.junit.runners.AndroidJUnit4;
@@ -124,7 +125,7 @@ private VideoFrameProcessorTestRunner.Builder getDefaultFrameProcessorTestRunner
     return new VideoFrameProcessorTestRunner.Builder()
         .setTestId(testId)
         .setVideoFrameProcessorFactory(new DefaultVideoFrameProcessor.Factory.Builder().build())
-        .setIsInputTextureExternal(false)
+        .setInputType(INPUT_TYPE_BITMAP)
         .setOnOutputFrameAvailableListener(
             unused -> checkNotNull(framesProduced).incrementAndGet());
   }

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/DefaultVideoFrameProcessorPixelTest.java
Patch:
@@ -20,6 +20,7 @@
 import static com.google.android.exoplayer2.testutil.BitmapPixelTestUtil.readBitmap;
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
+import static com.google.android.exoplayer2.util.VideoFrameProcessor.INPUT_TYPE_BITMAP;
 import static com.google.common.truth.Truth.assertThat;
 
 import android.content.Context;
@@ -110,7 +111,7 @@ public void noEffects_matchesGoldenFile() throws Exception {
   public void noEffects_withImageInput_matchesGoldenFile() throws Exception {
     String testId = "noEffects_withImageInput_matchesGoldenFile";
     videoFrameProcessorTestRunner =
-        getDefaultFrameProcessorTestRunnerBuilder(testId).setIsInputTextureExternal(false).build();
+        getDefaultFrameProcessorTestRunnerBuilder(testId).setInputType(INPUT_TYPE_BITMAP).build();
     Bitmap originalBitmap = readBitmap(IMAGE_PNG_ASSET_PATH);
     Bitmap expectedBitmap = readBitmap(IMAGE_TO_VIDEO_PNG_ASSET_PATH);
 
@@ -129,7 +130,7 @@ public void wrappedCrop_withImageInput_matchesGoldenFile() throws Exception {
     String testId = "wrappedCrop_withImageInput_matchesGoldenFile";
     videoFrameProcessorTestRunner =
         getDefaultFrameProcessorTestRunnerBuilder(testId)
-            .setIsInputTextureExternal(false)
+            .setInputType(INPUT_TYPE_BITMAP)
             .setEffects(
                 new GlEffectWrapper(
                     new Crop(

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/DefaultVideoFrameProcessorVideoFrameReleaseTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+import static com.google.android.exoplayer2.util.VideoFrameProcessor.INPUT_TYPE_SURFACE;
 import static com.google.common.truth.Truth.assertThat;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 
@@ -300,7 +301,7 @@ private void processFramesToEndOfStream(
                     DebugViewProvider.NONE,
                     /* inputColorInfo= */ ColorInfo.SDR_BT709_LIMITED,
                     /* outputColorInfo= */ ColorInfo.SDR_BT709_LIMITED,
-                    /* isInputTextureExternal= */ true,
+                    INPUT_TYPE_SURFACE,
                     releaseFramesAutomatically,
                     MoreExecutors.directExecutor(),
                     new VideoFrameProcessor.Listener() {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ProgressiveMediaSource.java
Patch:
@@ -278,9 +278,9 @@ public MediaItem getMediaItem() {
   @Override
   protected void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     transferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(
         /* playbackLooper= */ checkNotNull(Looper.myLooper()), getPlayerId());
+    drmSessionManager.prepare();
     notifySourceInfoRefreshed();
   }
 

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/DashMediaSource.java
Patch:
@@ -449,8 +449,8 @@ public MediaItem getMediaItem() {
   @Override
   protected void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     this.mediaTransferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(/* playbackLooper= */ Looper.myLooper(), getPlayerId());
+    drmSessionManager.prepare();
     if (sideloadedManifest) {
       processManifest(false);
     } else {

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsMediaSource.java
Patch:
@@ -417,9 +417,9 @@ public MediaItem getMediaItem() {
   @Override
   protected void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     this.mediaTransferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(
         /* playbackLooper= */ checkNotNull(Looper.myLooper()), getPlayerId());
+    drmSessionManager.prepare();
     MediaSourceEventListener.EventDispatcher eventDispatcher =
         createEventDispatcher(/* mediaPeriodId= */ null);
     playlistTracker.start(

File: libraries/exoplayer_smoothstreaming/src/main/java/androidx/media3/exoplayer/smoothstreaming/SsMediaSource.java
Patch:
@@ -374,8 +374,8 @@ public MediaItem getMediaItem() {
   @Override
   protected void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     this.mediaTransferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(/* playbackLooper= */ Looper.myLooper(), getPlayerId());
+    drmSessionManager.prepare();
     if (sideloadedManifest) {
       manifestLoaderErrorThrower = new LoaderErrorThrower.Dummy();
       processManifest();

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeMediaSource.java
Patch:
@@ -215,9 +215,9 @@ public boolean isSingleWindow() {
   public synchronized void prepareSourceInternal(@Nullable TransferListener mediaTransferListener) {
     assertThat(preparedSource).isFalse();
     transferListener = mediaTransferListener;
-    drmSessionManager.prepare();
     drmSessionManager.setPlayer(
         /* playbackLooper= */ checkNotNull(Looper.myLooper()), getPlayerId());
+    drmSessionManager.prepare();
     preparedSource = true;
     releasedSource = false;
     sourceInfoRefreshHandler = Util.createHandlerForCurrentLooper();

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/DefaultVideoFrameProcessorImageFrameOutputTest.java
Patch:
@@ -123,7 +123,7 @@ private VideoFrameProcessorTestRunner.Builder getDefaultFrameProcessorTestRunner
       String testId) {
     return new VideoFrameProcessorTestRunner.Builder()
         .setTestId(testId)
-        .setVideoFrameProcessorFactory(new DefaultVideoFrameProcessor.Factory())
+        .setVideoFrameProcessorFactory(new DefaultVideoFrameProcessor.Factory.Builder().build())
         .setIsInputTextureExternal(false)
         .setOnOutputFrameAvailableListener(
             unused -> checkNotNull(framesProduced).incrementAndGet());

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/DefaultVideoFrameProcessorPixelTest.java
Patch:
@@ -506,7 +506,7 @@ private VideoFrameProcessorTestRunner.Builder getDefaultFrameProcessorTestRunner
       String testId) {
     return new VideoFrameProcessorTestRunner.Builder()
         .setTestId(testId)
-        .setVideoFrameProcessorFactory(new DefaultVideoFrameProcessor.Factory())
+        .setVideoFrameProcessorFactory(new DefaultVideoFrameProcessor.Factory.Builder().build())
         .setVideoAssetPath(INPUT_SDR_MP4_ASSET_STRING);
   }
 

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/DefaultVideoFrameProcessorVideoFrameReleaseTest.java
Patch:
@@ -292,7 +292,8 @@ private void processFramesToEndOfStream(
     CountDownLatch videoFrameProcessingEndedCountDownLatch = new CountDownLatch(1);
     defaultVideoFrameProcessor =
         checkNotNull(
-            new DefaultVideoFrameProcessor.Factory()
+            new DefaultVideoFrameProcessor.Factory.Builder()
+                .build()
                 .create(
                     getApplicationContext(),
                     ImmutableList.of((GlEffect) (context, useHdr) -> blankFrameProducer),

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/ToneMapHdrToSdrUsingOpenGlPixelTest.java
Patch:
@@ -213,6 +213,6 @@ private VideoFrameProcessorTestRunner.Builder getDefaultFrameProcessorTestRunner
       String testId) {
     return new VideoFrameProcessorTestRunner.Builder()
         .setTestId(testId)
-        .setVideoFrameProcessorFactory(new DefaultVideoFrameProcessor.Factory());
+        .setVideoFrameProcessorFactory(new DefaultVideoFrameProcessor.Factory.Builder().build());
   }
 }

File: libraries/cast/src/main/java/androidx/media3/cast/CastPlayer.java
Patch:
@@ -85,7 +85,7 @@ public final class CastPlayer extends BasePlayer {
 
   /** The {@link DeviceInfo} returned by {@link #getDeviceInfo() this player}. */
   public static final DeviceInfo DEVICE_INFO =
-      new DeviceInfo(DeviceInfo.PLAYBACK_TYPE_REMOTE, /* minVolume= */ 0, /* maxVolume= */ 0);
+      new DeviceInfo.Builder(DeviceInfo.PLAYBACK_TYPE_REMOTE).build();
 
   static {
     MediaLibraryInfo.registerModule("media3.cast");

File: libraries/session/src/main/java/androidx/media3/session/MediaControllerImplLegacy.java
Patch:
@@ -1063,7 +1063,7 @@ public void setDeviceVolume(int volume, @C.VolumeFlags int flags) {
     DeviceInfo deviceInfo = getDeviceInfo();
     int minVolume = deviceInfo.minVolume;
     int maxVolume = deviceInfo.maxVolume;
-    if (minVolume <= volume && volume <= maxVolume) {
+    if (minVolume <= volume && (maxVolume == 0 || volume <= maxVolume)) {
       boolean isDeviceMuted = isDeviceMuted();
       ControllerInfo maskedControllerInfo =
           new ControllerInfo(
@@ -1093,7 +1093,7 @@ public void increaseDeviceVolume() {
   public void increaseDeviceVolume(@C.VolumeFlags int flags) {
     int volume = getDeviceVolume();
     int maxVolume = getDeviceInfo().maxVolume;
-    if (volume + 1 <= maxVolume) {
+    if (maxVolume == 0 || volume + 1 <= maxVolume) {
       boolean isDeviceMuted = isDeviceMuted();
 
       ControllerInfo maskedControllerInfo =

File: libraries/session/src/test/java/androidx/media3/session/PlayerInfoTest.java
Patch:
@@ -136,8 +136,7 @@ public void toBundleFromBundle_withAllCommands_restoresAllData() {
                             new int[] {C.FORMAT_EXCEEDS_CAPABILITIES},
                             /* trackSelected= */ new boolean[] {true}))))
             .setDeviceInfo(
-                new DeviceInfo(
-                    DeviceInfo.PLAYBACK_TYPE_REMOTE, /* minVolume= */ 4, /* maxVolume= */ 10))
+                new DeviceInfo.Builder(DeviceInfo.PLAYBACK_TYPE_REMOTE).setMaxVolume(10).build())
             .setDiscontinuityReason(Player.DISCONTINUITY_REASON_REMOVE)
             .setIsLoading(true)
             .setIsPlaying(true)

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaControllerListenerTest.java
Patch:
@@ -2767,7 +2767,7 @@ public void onEvents(Player player, Player.Events events) {
     threadTestRule.getHandler().postAndSync(() -> controller.addListener(listener));
 
     DeviceInfo deviceInfo =
-        new DeviceInfo(DeviceInfo.PLAYBACK_TYPE_REMOTE, /* minVolume= */ 0, /* maxVolume= */ 100);
+        new DeviceInfo.Builder(DeviceInfo.PLAYBACK_TYPE_REMOTE).setMaxVolume(100).build();
     Bundle playerConfig =
         new RemoteMediaSession.MockPlayerConfigBuilder().setDeviceInfo(deviceInfo).build();
     remoteSession.setPlayer(playerConfig);
@@ -2806,7 +2806,7 @@ public void onEvents(Player player, Player.Events events) {
     threadTestRule.getHandler().postAndSync(() -> controller.addListener(listener));
 
     DeviceInfo deviceInfo =
-        new DeviceInfo(DeviceInfo.PLAYBACK_TYPE_REMOTE, /* minVolume= */ 1, /* maxVolume= */ 23);
+        new DeviceInfo.Builder(DeviceInfo.PLAYBACK_TYPE_REMOTE).setMaxVolume(23).build();
     remoteSession.getMockPlayer().notifyDeviceInfoChanged(deviceInfo);
 
     assertThat(latch.await(TIMEOUT_MS, MILLISECONDS)).isTrue();
@@ -2819,7 +2819,7 @@ public void onEvents(Player player, Player.Events events) {
   @Test
   public void onDeviceVolumeChanged_isCalledByDeviceVolumeChange() throws Exception {
     DeviceInfo deviceInfo =
-        new DeviceInfo(DeviceInfo.PLAYBACK_TYPE_REMOTE, /* minVolume= */ 0, /* maxVolume= */ 100);
+        new DeviceInfo.Builder(DeviceInfo.PLAYBACK_TYPE_REMOTE).setMaxVolume(100).build();
     Bundle playerConfig =
         new RemoteMediaSession.MockPlayerConfigBuilder()
             .setDeviceInfo(deviceInfo)

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaControllerStateMaskingTest.java
Patch:
@@ -486,8 +486,7 @@ public void increaseDeviceVolume() throws Exception {
         new RemoteMediaSession.MockPlayerConfigBuilder()
             .setDeviceVolume(1)
             .setDeviceInfo(
-                new DeviceInfo(
-                    DeviceInfo.PLAYBACK_TYPE_LOCAL, /* minVolume= */ 0, /* maxVolume= */ 2))
+                new DeviceInfo.Builder(DeviceInfo.PLAYBACK_TYPE_LOCAL).setMaxVolume(2).build())
             .build();
     remoteSession.setPlayer(playerConfig);
 

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaSessionPermissionTest.java
Patch:
@@ -279,7 +279,7 @@ public void setPlayer_withoutAvailableCommands_doesNotCallProtectedPlayerGetters
             .build();
     // Set remote device info to ensure we also cover the volume provider compat setup.
     mockPlayer.deviceInfo =
-        new DeviceInfo(DeviceInfo.PLAYBACK_TYPE_REMOTE, /* minVolume= */ 0, /* maxVolume= */ 100);
+        new DeviceInfo.Builder(DeviceInfo.PLAYBACK_TYPE_REMOTE).setMaxVolume(100).build();
     Player player =
         new ForwardingPlayer(mockPlayer) {
           @Override

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaSessionPlayerTest.java
Patch:
@@ -842,8 +842,7 @@ private void changePlaybackTypeToRemote() throws Exception {
         .postAndSync(
             () -> {
               player.deviceInfo =
-                  new DeviceInfo(
-                      DeviceInfo.PLAYBACK_TYPE_REMOTE, /* minVolume= */ 0, /* maxVolume= */ 100);
+                  new DeviceInfo.Builder(DeviceInfo.PLAYBACK_TYPE_REMOTE).setMaxVolume(100).build();
               player.notifyDeviceInfoChanged();
             });
   }

File: libraries/effect/src/main/java/androidx/media3/effect/DefaultVideoFrameProcessor.java
Patch:
@@ -288,7 +288,7 @@ private DefaultVideoFrameProcessor(
             new BitmapTextureManager(inputShaderProgram, videoFrameProcessingTaskExecutor);
         inputShaderProgram.setInputListener(inputBitmapTextureManager);
         break;
-      case VideoFrameProcessor.INPUT_TYPE_TEXID: // fall through
+      case VideoFrameProcessor.INPUT_TYPE_TEXTURE_ID: // fall through
       default:
         throw new VideoFrameProcessingException("Input type not supported yet");
     }

File: libraries/common/src/main/java/androidx/media3/common/MimeTypes.java
Patch:
@@ -60,6 +60,7 @@ public final class MimeTypes {
   public static final String VIDEO_MJPEG = BASE_TYPE_VIDEO + "/mjpeg";
   public static final String VIDEO_MP42 = BASE_TYPE_VIDEO + "/mp42";
   public static final String VIDEO_MP43 = BASE_TYPE_VIDEO + "/mp43";
+  @UnstableApi public static final String VIDEO_RAW = BASE_TYPE_VIDEO + "/raw";
   @UnstableApi public static final String VIDEO_UNKNOWN = BASE_TYPE_VIDEO + "/x-unknown";
 
   // audio/ MIME types

File: libraries/effect/src/androidTest/java/androidx/media3/effect/DefaultVideoFrameProcessorImageFrameOutputTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package androidx.media3.effect;
 
+import static androidx.media3.common.VideoFrameProcessor.INPUT_TYPE_BITMAP;
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.test.utils.BitmapPixelTestUtil.readBitmap;
 import static com.google.common.truth.Truth.assertThat;
@@ -124,7 +125,7 @@ private VideoFrameProcessorTestRunner.Builder getDefaultFrameProcessorTestRunner
     return new VideoFrameProcessorTestRunner.Builder()
         .setTestId(testId)
         .setVideoFrameProcessorFactory(new DefaultVideoFrameProcessor.Factory.Builder().build())
-        .setIsInputTextureExternal(false)
+        .setInputType(INPUT_TYPE_BITMAP)
         .setOnOutputFrameAvailableListener(
             unused -> checkNotNull(framesProduced).incrementAndGet());
   }

File: libraries/effect/src/androidTest/java/androidx/media3/effect/DefaultVideoFrameProcessorPixelTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package androidx.media3.effect;
 
+import static androidx.media3.common.VideoFrameProcessor.INPUT_TYPE_BITMAP;
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.common.util.Assertions.checkStateNotNull;
 import static androidx.media3.test.utils.BitmapPixelTestUtil.MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE;
@@ -110,7 +111,7 @@ public void noEffects_matchesGoldenFile() throws Exception {
   public void noEffects_withImageInput_matchesGoldenFile() throws Exception {
     String testId = "noEffects_withImageInput_matchesGoldenFile";
     videoFrameProcessorTestRunner =
-        getDefaultFrameProcessorTestRunnerBuilder(testId).setIsInputTextureExternal(false).build();
+        getDefaultFrameProcessorTestRunnerBuilder(testId).setInputType(INPUT_TYPE_BITMAP).build();
     Bitmap originalBitmap = readBitmap(IMAGE_PNG_ASSET_PATH);
     Bitmap expectedBitmap = readBitmap(IMAGE_TO_VIDEO_PNG_ASSET_PATH);
 
@@ -129,7 +130,7 @@ public void wrappedCrop_withImageInput_matchesGoldenFile() throws Exception {
     String testId = "wrappedCrop_withImageInput_matchesGoldenFile";
     videoFrameProcessorTestRunner =
         getDefaultFrameProcessorTestRunnerBuilder(testId)
-            .setIsInputTextureExternal(false)
+            .setInputType(INPUT_TYPE_BITMAP)
             .setEffects(
                 new GlEffectWrapper(
                     new Crop(

File: libraries/effect/src/androidTest/java/androidx/media3/effect/DefaultVideoFrameProcessorVideoFrameReleaseTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package androidx.media3.effect;
 
+import static androidx.media3.common.VideoFrameProcessor.INPUT_TYPE_SURFACE;
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
 import static com.google.common.truth.Truth.assertThat;
@@ -300,7 +301,7 @@ private void processFramesToEndOfStream(
                     DebugViewProvider.NONE,
                     /* inputColorInfo= */ ColorInfo.SDR_BT709_LIMITED,
                     /* outputColorInfo= */ ColorInfo.SDR_BT709_LIMITED,
-                    /* isInputTextureExternal= */ true,
+                    INPUT_TYPE_SURFACE,
                     releaseFramesAutomatically,
                     MoreExecutors.directExecutor(),
                     new VideoFrameProcessor.Listener() {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/MediaCodecVideoRenderer.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.exoplayer.video;
 
 import static android.view.Display.DEFAULT_DISPLAY;
+import static androidx.media3.common.VideoFrameProcessor.INPUT_TYPE_SURFACE;
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.common.util.Assertions.checkState;
 import static androidx.media3.common.util.Assertions.checkStateNotNull;
@@ -2014,7 +2015,7 @@ public boolean maybeEnable(Format inputFormat, long initialStreamOffsetUs)
                     DebugViewProvider.NONE,
                     inputColorInfo,
                     outputColorInfo,
-                    /* isInputTextureExternal= */ true,
+                    INPUT_TYPE_SURFACE,
                     /* releaseFramesAutomatically= */ false,
                     /* executor= */ handler::post,
                     new VideoFrameProcessor.Listener() {

File: libraries/effect/src/androidTest/java/androidx/media3/effect/DefaultVideoFrameProcessorImageFrameOutputTest.java
Patch:
@@ -123,7 +123,7 @@ private VideoFrameProcessorTestRunner.Builder getDefaultFrameProcessorTestRunner
       String testId) {
     return new VideoFrameProcessorTestRunner.Builder()
         .setTestId(testId)
-        .setVideoFrameProcessorFactory(new DefaultVideoFrameProcessor.Factory())
+        .setVideoFrameProcessorFactory(new DefaultVideoFrameProcessor.Factory.Builder().build())
         .setIsInputTextureExternal(false)
         .setOnOutputFrameAvailableListener(
             unused -> checkNotNull(framesProduced).incrementAndGet());

File: libraries/effect/src/androidTest/java/androidx/media3/effect/DefaultVideoFrameProcessorPixelTest.java
Patch:
@@ -506,7 +506,7 @@ private VideoFrameProcessorTestRunner.Builder getDefaultFrameProcessorTestRunner
       String testId) {
     return new VideoFrameProcessorTestRunner.Builder()
         .setTestId(testId)
-        .setVideoFrameProcessorFactory(new DefaultVideoFrameProcessor.Factory())
+        .setVideoFrameProcessorFactory(new DefaultVideoFrameProcessor.Factory.Builder().build())
         .setVideoAssetPath(INPUT_SDR_MP4_ASSET_STRING);
   }
 

File: libraries/effect/src/androidTest/java/androidx/media3/effect/DefaultVideoFrameProcessorVideoFrameReleaseTest.java
Patch:
@@ -292,7 +292,8 @@ private void processFramesToEndOfStream(
     CountDownLatch videoFrameProcessingEndedCountDownLatch = new CountDownLatch(1);
     defaultVideoFrameProcessor =
         checkNotNull(
-            new DefaultVideoFrameProcessor.Factory()
+            new DefaultVideoFrameProcessor.Factory.Builder()
+                .build()
                 .create(
                     getApplicationContext(),
                     ImmutableList.of((GlEffect) (context, useHdr) -> blankFrameProducer),

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/ToneMapHdrToSdrUsingOpenGlPixelTest.java
Patch:
@@ -213,6 +213,6 @@ private VideoFrameProcessorTestRunner.Builder getDefaultFrameProcessorTestRunner
       String testId) {
     return new VideoFrameProcessorTestRunner.Builder()
         .setTestId(testId)
-        .setVideoFrameProcessorFactory(new DefaultVideoFrameProcessor.Factory());
+        .setVideoFrameProcessorFactory(new DefaultVideoFrameProcessor.Factory.Builder().build());
   }
 }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerInternal.java
Patch:
@@ -566,7 +566,6 @@ private SamplePipeline getSamplePipeline(
               firstEditedMediaItem.effects.videoEffects,
               compositionPresentation,
               firstEditedMediaItem.effects.videoFrameProcessorFactory,
-              firstEditedMediaItem.effects.glObjectsProvider,
               encoderFactory,
               muxerWrapper,
               /* errorConsumer= */ this::onError,

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerInternal.java
Patch:
@@ -566,7 +566,6 @@ private SamplePipeline getSamplePipeline(
               firstEditedMediaItem.effects.videoEffects,
               compositionPresentation,
               firstEditedMediaItem.effects.videoFrameProcessorFactory,
-              firstEditedMediaItem.effects.glObjectsProvider,
               encoderFactory,
               muxerWrapper,
               /* errorConsumer= */ this::onError,

File: libraries/session/src/test/java/androidx/media3/session/DefaultMediaNotificationProviderTest.java
Patch:
@@ -36,6 +36,7 @@
 import android.graphics.Bitmap;
 import android.net.Uri;
 import android.os.Bundle;
+import android.os.Handler;
 import android.os.Looper;
 import androidx.annotation.Nullable;
 import androidx.core.app.NotificationCompat;
@@ -785,6 +786,7 @@ private static MediaSession createMockMediaSessionForNotification(
     when(mockMediaSession.getPlayer()).thenReturn(mockPlayer);
     MediaSessionImpl mockMediaSessionImpl = mock(MediaSessionImpl.class);
     when(mockMediaSession.getImpl()).thenReturn(mockMediaSessionImpl);
+    when(mockMediaSessionImpl.getApplicationHandler()).thenReturn(new Handler(Looper.myLooper()));
     when(mockMediaSessionImpl.getUri()).thenReturn(Uri.parse("https://example.test"));
     return mockMediaSession;
   }

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionImpl.java
Patch:
@@ -351,7 +351,7 @@ public void broadcastCustomCommand(SessionCommand command, Bundle args) {
 
   private void dispatchOnPlayerInfoChanged(
       PlayerInfo playerInfo, boolean excludeTimeline, boolean excludeTracks) {
-
+    playerInfo = sessionStub.generateAndCacheUniqueTrackGroupIds(playerInfo);
     List<ControllerInfo> controllers =
         sessionStub.getConnectedControllersManager().getConnectedControllers();
     for (int i = 0; i < controllers.size(); i++) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioSink.java
Patch:
@@ -189,6 +189,8 @@ public InitializationException(
               + audioTrackState
               + " "
               + ("Config(" + sampleRate + ", " + channelConfig + ", " + bufferSize + ")")
+              + " "
+              + format
               + (isRecoverable ? " (recoverable)" : ""),
           audioTrackException);
       this.audioTrackState = audioTrackState;

File: libraries/session/src/main/java/androidx/media3/session/ConnectionRequest.java
Patch:
@@ -89,8 +89,8 @@ public Bundle toBundle() {
         int controllerInterfaceVersion =
             bundle.getInt(FIELD_CONTROLLER_INTERFACE_VERSION, /* defaultValue= */ 0);
         String packageName = checkNotNull(bundle.getString(FIELD_PACKAGE_NAME));
-        int pid = bundle.getInt(FIELD_PID, /* defaultValue= */ 0);
-        checkArgument(pid != 0);
+        checkArgument(bundle.containsKey(FIELD_PID));
+        int pid = bundle.getInt(FIELD_PID);
         @Nullable Bundle connectionHints = bundle.getBundle(FIELD_CONNECTION_HINTS);
         return new ConnectionRequest(
             libraryVersion,

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioSink.java
Patch:
@@ -185,6 +185,8 @@ public InitializationException(
               + audioTrackState
               + " "
               + ("Config(" + sampleRate + ", " + channelConfig + ", " + bufferSize + ")")
+              + " "
+              + format
               + (isRecoverable ? " (recoverable)" : ""),
           audioTrackException);
       this.audioTrackState = audioTrackState;

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/DefaultVideoFrameProcessor.java
Patch:
@@ -453,8 +453,6 @@ private static DefaultVideoFrameProcessor createOpenGlObjectsAndFrameProcessor(
       throws GlUtil.GlException, VideoFrameProcessingException {
     checkState(Thread.currentThread().getName().equals(THREAD_NAME));
 
-    // TODO(b/237674316): Delay initialization of things requiring the colorInfo, to
-    //  configure based on the color info from the decoder output media format instead.
     EGLDisplay eglDisplay = GlUtil.createEglDisplay();
     int[] configAttributes =
         ColorInfo.isTransferHdr(outputColorInfo)

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExoAssetLoaderBaseRenderer.java
Patch:
@@ -218,7 +218,7 @@ private boolean readInputFormatAndInitDecoderIfNeeded() throws ExportException {
 
     if (shouldInitDecoder) {
       if (getProcessedTrackType(inputFormat.sampleMimeType) == C.TRACK_TYPE_VIDEO) {
-        // TODO(b/237674316): Move surface creation out of video sampleConsumer. Init decoder and
+        // TODO(b/278259383): Move surface creation out of video sampleConsumer. Init decoder and
         // get decoder output Format before init sampleConsumer.
         if (!ensureSampleConsumerInitialized()) {
           return false;
@@ -256,7 +256,7 @@ && getProcessedTrackType(inputFormat.sampleMimeType) == C.TRACK_TYPE_AUDIO) {
         }
         outputFormat = decoderOutputFormat;
       } else {
-        // TODO(b/237674316): Move surface creation out of video sampleConsumer. Init decoder and
+        // TODO(b/278259383): Move surface creation out of video sampleConsumer. Init decoder and
         // get decoderOutput Format before init sampleConsumer.
         outputFormat = inputFormat;
       }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExoAssetLoaderVideoRenderer.java
Patch:
@@ -77,7 +77,7 @@ protected void onInputFormatRead(Format inputFormat) {
 
   @Override
   protected void initDecoder(Format inputFormat) throws ExportException {
-    // TODO(b/237674316): Move surface creation out of sampleConsumer. Init decoder before
+    // TODO(b/278259383): Move surface creation out of sampleConsumer. Init decoder before
     // sampleConsumer.
     checkStateNotNull(sampleConsumer);
     boolean isDecoderToneMappingRequired =

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoSamplePipeline.java
Patch:
@@ -88,6 +88,8 @@ public VideoSamplePipeline(
       DebugViewProvider debugViewProvider)
       throws ExportException {
     // TODO(b/262693177) Add tests for input format change.
+    // TODO(b/278259383) Consider delaying configuration of VideoSamplePipeline to use the decoder
+    // output format instead of the extractor output format, to match AudioSamplePipeline behavior.
     super(firstInputFormat, muxerWrapper);
 
     mediaItemOffsetUs = new AtomicLong();
@@ -384,7 +386,6 @@ public ColorInfo getSupportedInputColor() {
       if (isInputToneMapped) {
         // When tone-mapping HDR to SDR is enabled, assume we get BT.709 to avoid having the encoder
         // populate default color info, which depends on the resolution.
-        // TODO(b/237674316): Get the color info from the decoder output media format instead.
         return ColorInfo.SDR_BT709_LIMITED;
       }
       if (inputFormat.colorInfo == null) {

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultDecoderFactory.java
Patch:
@@ -105,6 +105,8 @@ public Codec createForVideoDecoding(
     if (codecProfileAndLevel != null) {
       MediaFormatUtil.maybeSetInteger(
           mediaFormat, MediaFormat.KEY_PROFILE, codecProfileAndLevel.first);
+      MediaFormatUtil.maybeSetInteger(
+          mediaFormat, MediaFormat.KEY_LEVEL, codecProfileAndLevel.second);
     }
 
     @Nullable

File: libraries/effect/src/main/java/androidx/media3/effect/DefaultVideoFrameProcessor.java
Patch:
@@ -455,8 +455,6 @@ private static DefaultVideoFrameProcessor createOpenGlObjectsAndFrameProcessor(
       throws GlUtil.GlException, VideoFrameProcessingException {
     checkState(Thread.currentThread().getName().equals(THREAD_NAME));
 
-    // TODO(b/237674316): Delay initialization of things requiring the colorInfo, to
-    //  configure based on the color info from the decoder output media format instead.
     EGLDisplay eglDisplay = GlUtil.createEglDisplay();
     int[] configAttributes =
         ColorInfo.isTransferHdr(outputColorInfo)

File: libraries/transformer/src/main/java/androidx/media3/transformer/ExoAssetLoaderBaseRenderer.java
Patch:
@@ -218,7 +218,7 @@ private boolean readInputFormatAndInitDecoderIfNeeded() throws ExportException {
 
     if (shouldInitDecoder) {
       if (getProcessedTrackType(inputFormat.sampleMimeType) == C.TRACK_TYPE_VIDEO) {
-        // TODO(b/237674316): Move surface creation out of video sampleConsumer. Init decoder and
+        // TODO(b/278259383): Move surface creation out of video sampleConsumer. Init decoder and
         // get decoder output Format before init sampleConsumer.
         if (!ensureSampleConsumerInitialized()) {
           return false;
@@ -256,7 +256,7 @@ && getProcessedTrackType(inputFormat.sampleMimeType) == C.TRACK_TYPE_AUDIO) {
         }
         outputFormat = decoderOutputFormat;
       } else {
-        // TODO(b/237674316): Move surface creation out of video sampleConsumer. Init decoder and
+        // TODO(b/278259383): Move surface creation out of video sampleConsumer. Init decoder and
         // get decoderOutput Format before init sampleConsumer.
         outputFormat = inputFormat;
       }

File: libraries/transformer/src/main/java/androidx/media3/transformer/ExoAssetLoaderVideoRenderer.java
Patch:
@@ -77,7 +77,7 @@ protected void onInputFormatRead(Format inputFormat) {
 
   @Override
   protected void initDecoder(Format inputFormat) throws ExportException {
-    // TODO(b/237674316): Move surface creation out of sampleConsumer. Init decoder before
+    // TODO(b/278259383): Move surface creation out of sampleConsumer. Init decoder before
     // sampleConsumer.
     checkStateNotNull(sampleConsumer);
     boolean isDecoderToneMappingRequired =

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoSamplePipeline.java
Patch:
@@ -88,6 +88,8 @@ public VideoSamplePipeline(
       DebugViewProvider debugViewProvider)
       throws ExportException {
     // TODO(b/262693177) Add tests for input format change.
+    // TODO(b/278259383) Consider delaying configuration of VideoSamplePipeline to use the decoder
+    // output format instead of the extractor output format, to match AudioSamplePipeline behavior.
     super(firstInputFormat, muxerWrapper);
 
     mediaItemOffsetUs = new AtomicLong();
@@ -384,7 +386,6 @@ public ColorInfo getSupportedInputColor() {
       if (isInputToneMapped) {
         // When tone-mapping HDR to SDR is enabled, assume we get BT.709 to avoid having the encoder
         // populate default color info, which depends on the resolution.
-        // TODO(b/237674316): Get the color info from the decoder output media format instead.
         return ColorInfo.SDR_BT709_LIMITED;
       }
       if (inputFormat.colorInfo == null) {

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultDecoderFactory.java
Patch:
@@ -105,6 +105,8 @@ public Codec createForVideoDecoding(
     if (codecProfileAndLevel != null) {
       MediaFormatUtil.maybeSetInteger(
           mediaFormat, MediaFormat.KEY_PROFILE, codecProfileAndLevel.first);
+      MediaFormatUtil.maybeSetInteger(
+          mediaFormat, MediaFormat.KEY_LEVEL, codecProfileAndLevel.second);
     }
 
     @Nullable

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionImpl.java
Patch:
@@ -352,7 +352,7 @@ public void broadcastCustomCommand(SessionCommand command, Bundle args) {
 
   private void dispatchOnPlayerInfoChanged(
       PlayerInfo playerInfo, boolean excludeTimeline, boolean excludeTracks) {
-
+    playerInfo = sessionStub.generateAndCacheUniqueTrackGroupIds(playerInfo);
     List<ControllerInfo> controllers =
         sessionStub.getConnectedControllersManager().getConnectedControllers();
     for (int i = 0; i < controllers.size(); i++) {

File: library/common/src/main/java/com/google/android/exoplayer2/audio/ChannelMixingMatrix.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.android.exoplayer2.transformer;
+package com.google.android.exoplayer2.audio;
 
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
 
@@ -39,7 +39,7 @@
  *          0 0.7]</pre>
  * </ul>
  */
-/* package */ final class ChannelMixingMatrix {
+public final class ChannelMixingMatrix {
   private final int inputChannelCount;
   private final int outputChannelCount;
   private final float[] coefficients;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/AudioMixerImpl.java
Patch:
@@ -26,6 +26,7 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.audio.AudioProcessor.AudioFormat;
 import com.google.android.exoplayer2.audio.AudioProcessor.UnhandledAudioFormatException;
+import com.google.android.exoplayer2.audio.ChannelMixingMatrix;
 import com.google.android.exoplayer2.util.Util;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/AudioMixingAlgorithm.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.audio.AudioProcessor.AudioFormat;
 import com.google.android.exoplayer2.audio.AudioProcessor.UnhandledAudioFormatException;
+import com.google.android.exoplayer2.audio.ChannelMixingMatrix;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import java.nio.ByteBuffer;
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/FloatAudioMixingAlgorithm.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.audio.AudioProcessor.AudioFormat;
+import com.google.android.exoplayer2.audio.ChannelMixingMatrix;
 import java.nio.ByteBuffer;
 
 /** An {@link AudioMixingAlgorithm} which mixes into float samples. */

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/ChannelMixingMatrixTest.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.common.truth.Truth.assertThat;
 
 import androidx.test.ext.junit.runners.AndroidJUnit4;
+import com.google.android.exoplayer2.audio.ChannelMixingMatrix;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/FloatAudioMixingAlgorithmTest.java
Patch:
@@ -23,6 +23,7 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.audio.AudioProcessor.AudioFormat;
+import com.google.android.exoplayer2.audio.ChannelMixingMatrix;
 import java.nio.ByteBuffer;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioSink.java
Patch:
@@ -188,6 +188,8 @@ public InitializationException(
               + audioTrackState
               + " "
               + ("Config(" + sampleRate + ", " + channelConfig + ", " + bufferSize + ")")
+              + " "
+              + format
               + (isRecoverable ? " (recoverable)" : ""),
           audioTrackException);
       this.audioTrackState = audioTrackState;

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/TestUtil.java
Patch:
@@ -148,6 +148,7 @@ public void release() {}
   public static final String FILE_AUDIO_VIDEO = "mp4/sample.mp4";
   public static final String FILE_AUDIO_VIDEO_INCREASING_TIMESTAMPS_15S =
       "mp4/sample_with_increasing_timestamps_320w_240h.mp4";
+  public static final String FILE_AUDIO_RAW = "wav/sample.wav";
   public static final String FILE_WITH_SUBTITLES = "mkv/sample_with_srt.mkv";
   public static final String FILE_WITH_SEF_SLOW_MOTION = "mp4/sample_sef_slow_motion.mp4";
   public static final String FILE_AUDIO_UNSUPPORTED_BY_DECODER = "amr/sample_wb.amr";
@@ -177,7 +178,7 @@ public static void createEncodersAndDecoders() {
         /* colorFormats= */ ImmutableList.of(),
         /* isDecoder= */ true);
     addCodec(
-        MimeTypes.AUDIO_AMR_NB,
+        MimeTypes.AUDIO_RAW,
         codecConfig,
         /* colorFormats= */ ImmutableList.of(),
         /* isDecoder= */ true);

File: libraries/transformer/src/main/java/androidx/media3/transformer/AudioMixerImpl.java
Patch:
@@ -26,6 +26,7 @@
 import androidx.media3.common.C;
 import androidx.media3.common.audio.AudioProcessor.AudioFormat;
 import androidx.media3.common.audio.AudioProcessor.UnhandledAudioFormatException;
+import androidx.media3.common.audio.ChannelMixingMatrix;
 import androidx.media3.common.util.Util;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;

File: libraries/transformer/src/main/java/androidx/media3/transformer/AudioMixingAlgorithm.java
Patch:
@@ -19,6 +19,7 @@
 import androidx.media3.common.C;
 import androidx.media3.common.audio.AudioProcessor.AudioFormat;
 import androidx.media3.common.audio.AudioProcessor.UnhandledAudioFormatException;
+import androidx.media3.common.audio.ChannelMixingMatrix;
 import androidx.media3.common.util.UnstableApi;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import java.nio.ByteBuffer;

File: libraries/transformer/src/main/java/androidx/media3/transformer/FloatAudioMixingAlgorithm.java
Patch:
@@ -21,11 +21,10 @@
 import androidx.media3.common.C;
 import androidx.media3.common.Format;
 import androidx.media3.common.audio.AudioProcessor.AudioFormat;
-import androidx.media3.common.util.UnstableApi;
+import androidx.media3.common.audio.ChannelMixingMatrix;
 import java.nio.ByteBuffer;
 
 /** An {@link AudioMixingAlgorithm} which mixes into float samples. */
-@UnstableApi
 /* package */ class FloatAudioMixingAlgorithm implements AudioMixingAlgorithm {
 
   // Short.MIN_VALUE != -Short.MAX_VALUE so use different scaling factors for positive and

File: libraries/transformer/src/test/java/androidx/media3/transformer/ChannelMixingMatrixTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
+import androidx.media3.common.audio.ChannelMixingMatrix;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: libraries/transformer/src/test/java/androidx/media3/transformer/FloatAudioMixingAlgorithmTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import androidx.media3.common.C;
 import androidx.media3.common.audio.AudioProcessor.AudioFormat;
+import androidx.media3.common.audio.ChannelMixingMatrix;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import java.nio.ByteBuffer;
 import org.junit.Test;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioSink.java
Patch:
@@ -192,6 +192,8 @@ public InitializationException(
               + audioTrackState
               + " "
               + ("Config(" + sampleRate + ", " + channelConfig + ", " + bufferSize + ")")
+              + " "
+              + format
               + (isRecoverable ? " (recoverable)" : ""),
           audioTrackException);
       this.audioTrackState = audioTrackState;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerInternal.java
Patch:
@@ -398,7 +398,7 @@ private void endInternal(@EndReason int endReason, @Nullable ExportException exp
 
     if (exception != null) {
       if (releasedPreviously) {
-        Log.e(TAG, "Export error after export ended: ", exception);
+        Log.w(TAG, "Export error after export ended", exception);
         return;
       }
       ExportException finalException = exception;

File: libraries/transformer/src/test/java/androidx/media3/transformer/TestUtil.java
Patch:
@@ -150,6 +150,7 @@ public void release() {}
   public static final String FILE_AUDIO_VIDEO = "mp4/sample.mp4";
   public static final String FILE_AUDIO_VIDEO_INCREASING_TIMESTAMPS_15S =
       "mp4/sample_with_increasing_timestamps_320w_240h.mp4";
+  public static final String FILE_AUDIO_RAW = "wav/sample.wav";
   public static final String FILE_WITH_SUBTITLES = "mkv/sample_with_srt.mkv";
   public static final String FILE_WITH_SEF_SLOW_MOTION = "mp4/sample_sef_slow_motion.mp4";
   public static final String FILE_AUDIO_UNSUPPORTED_BY_DECODER = "amr/sample_wb.amr";
@@ -179,7 +180,7 @@ public static void createEncodersAndDecoders() {
         /* colorFormats= */ ImmutableList.of(),
         /* isDecoder= */ true);
     addCodec(
-        MimeTypes.AUDIO_AMR_NB,
+        MimeTypes.AUDIO_RAW,
         codecConfig,
         /* colorFormats= */ ImmutableList.of(),
         /* isDecoder= */ true);

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerInternal.java
Patch:
@@ -398,7 +398,7 @@ private void endInternal(@EndReason int endReason, @Nullable ExportException exp
 
     if (exception != null) {
       if (releasedPreviously) {
-        Log.e(TAG, "Export error after export ended: ", exception);
+        Log.w(TAG, "Export error after export ended", exception);
         return;
       }
       ExportException finalException = exception;

File: libraries/session/src/main/java/androidx/media3/session/MediaLibraryService.java
Patch:
@@ -119,9 +119,8 @@ public static final class MediaLibrarySession extends MediaSession {
      * An extended {@link MediaSession.Callback} for the {@link MediaLibrarySession}.
      *
      * <p>When you return {@link LibraryResult} with {@link MediaItem media items}, each item must
-     * have valid {@link MediaItem#mediaId} and specify {@link MediaMetadata#isBrowsable} (or {@link
-     * MediaMetadata#folderType}) and {@link MediaMetadata#isPlayable} in its {@link
-     * MediaItem#mediaMetadata}.
+     * have valid {@link MediaItem#mediaId} and specify {@link MediaMetadata#isBrowsable} and {@link
+     * MediaMetadata#isPlayable} in its {@link MediaItem#mediaMetadata}.
      */
     public interface Callback extends MediaSession.Callback {
 

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/DefaultShaderProgram.java
Patch:
@@ -332,7 +332,6 @@ private static DefaultShaderProgram createWithSampler(
       ColorInfo outputColorInfo,
       boolean enableColorTransfers)
       throws VideoFrameProcessingException {
-    glProgram.setIntUniform("uEnableColorTransfer", enableColorTransfers ? GL_TRUE : GL_FALSE);
     boolean isInputTransferHdr = ColorInfo.isTransferHdr(inputColorInfo);
     @C.ColorTransfer int outputColorTransfer = outputColorInfo.colorTransfer;
     if (isInputTransferHdr) {
@@ -360,6 +359,7 @@ private static DefaultShaderProgram createWithSampler(
           outputColorTransfer != Format.NO_VALUE && outputColorTransfer != C.COLOR_TRANSFER_SDR);
       glProgram.setIntUniform("uOutputColorTransfer", outputColorTransfer);
     } else {
+      glProgram.setIntUniform("uEnableColorTransfer", enableColorTransfers ? GL_TRUE : GL_FALSE);
       checkArgument(
           outputColorInfo.colorSpace != C.COLOR_SPACE_BT2020,
           "Converting from SDR to HDR is not supported.");

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioSink.java
Patch:
@@ -130,6 +130,9 @@ default void onOffloadBufferFull() {}
      *     a {@link WriteException}, or an {@link UnexpectedDiscontinuityException}.
      */
     default void onAudioSinkError(Exception audioSinkError) {}
+
+    /** Called when audio capabilities changed. */
+    default void onAudioCapabilitiesChanged() {}
   }
 
   /** Thrown when a failure occurs configuring the sink. */

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -1456,6 +1456,9 @@ public void onAudioCapabilitiesChanged(AudioCapabilities audioCapabilities) {
     checkState(playbackLooper == Looper.myLooper());
     if (!audioCapabilities.equals(getAudioCapabilities())) {
       this.audioCapabilities = audioCapabilities;
+      if (listener != null) {
+        listener.onAudioCapabilitiesChanged();
+      }
     }
   }
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/EncodedSamplePipeline.java
Patch:
@@ -43,11 +43,10 @@
 
   public EncodedSamplePipeline(
       Format format,
-      long streamStartPositionUs,
       TransformationRequest transformationRequest,
       MuxerWrapper muxerWrapper,
       FallbackListener fallbackListener) {
-    super(format, streamStartPositionUs, muxerWrapper);
+    super(format, muxerWrapper);
     this.format = format;
     nextMediaItemOffsetUs = new AtomicLong();
     availableInputBuffers = new ConcurrentLinkedDeque<>();

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/TestUtil.java
Patch:
@@ -115,8 +115,7 @@ public void start() {
               .setChannelCount(2)
               .build();
       try {
-        listener.onTrackAdded(
-            format, supportedOutputTypes, /* streamStartPositionUs= */ 0, /* streamOffsetUs= */ 0);
+        listener.onTrackAdded(format, supportedOutputTypes);
 
         SampleConsumer sampleConsumer = listener.onOutputFormat(format);
         if (sampleConsumerRef != null) {

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/SequenceAssetLoader.java
Patch:
@@ -501,7 +501,9 @@ private void switchAssetLoader() {
     }
 
     private void release() {
-      handler.post(SequenceAssetLoader.this::release);
+      // TODO(b/276415739): releasing the player earlier causes more release timeouts on emulator
+      //  tests. Figure out what the cause is and uncomment the line below once fixed.
+      // handler.post(SequenceAssetLoader.this::release);
     }
   }
 }

File: libraries/effect/src/main/java/androidx/media3/effect/DefaultShaderProgram.java
Patch:
@@ -334,7 +334,6 @@ private static DefaultShaderProgram createWithSampler(
       ColorInfo outputColorInfo,
       boolean enableColorTransfers)
       throws VideoFrameProcessingException {
-    glProgram.setIntUniform("uEnableColorTransfer", enableColorTransfers ? GL_TRUE : GL_FALSE);
     boolean isInputTransferHdr = ColorInfo.isTransferHdr(inputColorInfo);
     @C.ColorTransfer int outputColorTransfer = outputColorInfo.colorTransfer;
     if (isInputTransferHdr) {
@@ -362,6 +361,7 @@ private static DefaultShaderProgram createWithSampler(
           outputColorTransfer != Format.NO_VALUE && outputColorTransfer != C.COLOR_TRANSFER_SDR);
       glProgram.setIntUniform("uOutputColorTransfer", outputColorTransfer);
     } else {
+      glProgram.setIntUniform("uEnableColorTransfer", enableColorTransfers ? GL_TRUE : GL_FALSE);
       checkArgument(
           outputColorInfo.colorSpace != C.COLOR_SPACE_BT2020,
           "Converting from SDR to HDR is not supported.");

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioSink.java
Patch:
@@ -134,6 +134,9 @@ default void onOffloadBufferFull() {}
      *     a {@link WriteException}, or an {@link UnexpectedDiscontinuityException}.
      */
     default void onAudioSinkError(Exception audioSinkError) {}
+
+    /** Called when audio capabilities changed. */
+    default void onAudioCapabilitiesChanged() {}
   }
 
   /** Thrown when a failure occurs configuring the sink. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/DefaultAudioSink.java
Patch:
@@ -1469,6 +1469,9 @@ public void onAudioCapabilitiesChanged(AudioCapabilities audioCapabilities) {
     checkState(playbackLooper == Looper.myLooper());
     if (!audioCapabilities.equals(getAudioCapabilities())) {
       this.audioCapabilities = audioCapabilities;
+      if (listener != null) {
+        listener.onAudioCapabilitiesChanged();
+      }
     }
   }
 

File: libraries/session/src/main/java/androidx/media3/session/ConnectionRequest.java
Patch:
@@ -89,8 +89,8 @@ public Bundle toBundle() {
         int controllerInterfaceVersion =
             bundle.getInt(FIELD_CONTROLLER_INTERFACE_VERSION, /* defaultValue= */ 0);
         String packageName = checkNotNull(bundle.getString(FIELD_PACKAGE_NAME));
-        int pid = bundle.getInt(FIELD_PID, /* defaultValue= */ 0);
-        checkArgument(pid != 0);
+        checkArgument(bundle.containsKey(FIELD_PID));
+        int pid = bundle.getInt(FIELD_PID);
         @Nullable Bundle connectionHints = bundle.getBundle(FIELD_CONNECTION_HINTS);
         return new ConnectionRequest(
             libraryVersion,

File: libraries/transformer/src/main/java/androidx/media3/transformer/EncodedSamplePipeline.java
Patch:
@@ -43,11 +43,10 @@
 
   public EncodedSamplePipeline(
       Format format,
-      long streamStartPositionUs,
       TransformationRequest transformationRequest,
       MuxerWrapper muxerWrapper,
       FallbackListener fallbackListener) {
-    super(format, streamStartPositionUs, muxerWrapper);
+    super(format, muxerWrapper);
     this.format = format;
     nextMediaItemOffsetUs = new AtomicLong();
     availableInputBuffers = new ConcurrentLinkedDeque<>();

File: libraries/transformer/src/test/java/androidx/media3/transformer/TestUtil.java
Patch:
@@ -117,8 +117,7 @@ public void start() {
               .setChannelCount(2)
               .build();
       try {
-        listener.onTrackAdded(
-            format, supportedOutputTypes, /* streamStartPositionUs= */ 0, /* streamOffsetUs= */ 0);
+        listener.onTrackAdded(format, supportedOutputTypes);
 
         SampleConsumer sampleConsumer = listener.onOutputFormat(format);
         if (sampleConsumerRef != null) {

File: libraries/transformer/src/main/java/androidx/media3/transformer/SequenceAssetLoader.java
Patch:
@@ -501,7 +501,9 @@ private void switchAssetLoader() {
     }
 
     private void release() {
-      handler.post(SequenceAssetLoader.this::release);
+      // TODO(b/276415739): releasing the player earlier causes more release timeouts on emulator
+      //  tests. Figure out what the cause is and uncomment the line below once fixed.
+      // handler.post(SequenceAssetLoader.this::release);
     }
   }
 }

File: library/core/src/main/java/com/google/android/exoplayer2/DefaultRenderersFactory.java
Patch:
@@ -24,7 +24,6 @@
 import android.os.Looper;
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
-import com.google.android.exoplayer2.audio.AudioCapabilities;
 import com.google.android.exoplayer2.audio.AudioRendererEventListener;
 import com.google.android.exoplayer2.audio.AudioSink;
 import com.google.android.exoplayer2.audio.DefaultAudioSink;
@@ -649,8 +648,7 @@ protected AudioSink buildAudioSink(
       boolean enableFloatOutput,
       boolean enableAudioTrackPlaybackParams,
       boolean enableOffload) {
-    return new DefaultAudioSink.Builder()
-        .setAudioCapabilities(AudioCapabilities.getCapabilities(context))
+    return new DefaultAudioSink.Builder(context)
         .setEnableFloatOutput(enableFloatOutput)
         .setEnableAudioTrackPlaybackParams(enableAudioTrackPlaybackParams)
         .setOffloadMode(

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultCodec.java
Patch:
@@ -347,6 +347,7 @@ private boolean maybeDequeueOutputBuffer(boolean setOutputBuffer) throws ExportE
         releaseOutputBuffer(/* render= */ false);
         return false;
       }
+      outputBufferInfo.flags &= ~MediaCodec.BUFFER_FLAG_END_OF_STREAM;
     }
     if ((outputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {
       // Encountered a CSD buffer, skip it.

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/MuxerWrapper.java
Patch:
@@ -301,7 +301,7 @@ private void resetAbortTimer() {
                           "No output sample written in the last "
                               + maxDelayBetweenSamplesMs
                               + " milliseconds. Aborting transformation."),
-                      ExportException.ERROR_CODE_MUXING_FAILED));
+                      ExportException.ERROR_CODE_MUXING_TIMEOUT));
             },
             maxDelayBetweenSamplesMs,
             MILLISECONDS);

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/MediaItemExportTest.java
Patch:
@@ -821,7 +821,7 @@ public void start_withSlowOutputSampleRate_completesWithError() {
     ExportException exception =
         assertThrows(ExportException.class, () -> TransformerTestRunner.runLooper(transformer));
     assertThat(exception).hasCauseThat().isInstanceOf(IllegalStateException.class);
-    assertThat(exception.errorCode).isEqualTo(ExportException.ERROR_CODE_MUXING_FAILED);
+    assertThat(exception.errorCode).isEqualTo(ExportException.ERROR_CODE_MUXING_TIMEOUT);
   }
 
   @Test

File: library/core/src/main/java/com/google/android/exoplayer2/DefaultRenderersFactory.java
Patch:
@@ -24,6 +24,7 @@
 import android.os.Looper;
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
+import com.google.android.exoplayer2.audio.AudioCapabilities;
 import com.google.android.exoplayer2.audio.AudioRendererEventListener;
 import com.google.android.exoplayer2.audio.AudioSink;
 import com.google.android.exoplayer2.audio.DefaultAudioSink;
@@ -648,7 +649,8 @@ protected AudioSink buildAudioSink(
       boolean enableFloatOutput,
       boolean enableAudioTrackPlaybackParams,
       boolean enableOffload) {
-    return new DefaultAudioSink.Builder(context)
+    return new DefaultAudioSink.Builder()
+        .setAudioCapabilities(AudioCapabilities.getCapabilities(context))
         .setEnableFloatOutput(enableFloatOutput)
         .setEnableAudioTrackPlaybackParams(enableAudioTrackPlaybackParams)
         .setOffloadMode(

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/AndroidTestUtil.java
Patch:
@@ -478,6 +478,9 @@ public final class AndroidTestUtil {
           .setFrameRate(23.163f)
           .setCodecs("hvc1.1.6.L183.B0")
           .build();
+
+  public static final String MP3_ASSET_URI_STRING = "asset:///media/mp3/test.mp3";
+
   /**
    * Log in logcat and in an analysis file that this test was skipped.
    *

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/TestUtil.java
Patch:
@@ -143,6 +143,7 @@ public void release() {}
 
   public static final String ASSET_URI_PREFIX = "asset:///media/";
   public static final String FILE_VIDEO_ONLY = "mp4/sample_18byte_nclx_colr.mp4";
+  public static final String FILE_AUDIO_ONLY = "mp3/test.mp3";
   public static final String FILE_AUDIO_VIDEO = "mp4/sample.mp4";
   public static final String FILE_AUDIO_VIDEO_INCREASING_TIMESTAMPS_15S =
       "mp4/sample_with_increasing_timestamps_320w_240h.mp4";

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/DefaultRenderersFactory.java
Patch:
@@ -26,7 +26,6 @@
 import androidx.annotation.Nullable;
 import androidx.media3.common.util.Log;
 import androidx.media3.common.util.UnstableApi;
-import androidx.media3.exoplayer.audio.AudioCapabilities;
 import androidx.media3.exoplayer.audio.AudioRendererEventListener;
 import androidx.media3.exoplayer.audio.AudioSink;
 import androidx.media3.exoplayer.audio.DefaultAudioSink;
@@ -649,8 +648,7 @@ protected AudioSink buildAudioSink(
       boolean enableFloatOutput,
       boolean enableAudioTrackPlaybackParams,
       boolean enableOffload) {
-    return new DefaultAudioSink.Builder()
-        .setAudioCapabilities(AudioCapabilities.getCapabilities(context))
+    return new DefaultAudioSink.Builder(context)
         .setEnableFloatOutput(enableFloatOutput)
         .setEnableAudioTrackPlaybackParams(enableAudioTrackPlaybackParams)
         .setOffloadMode(

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultCodec.java
Patch:
@@ -349,6 +349,7 @@ private boolean maybeDequeueOutputBuffer(boolean setOutputBuffer) throws ExportE
         releaseOutputBuffer(/* render= */ false);
         return false;
       }
+      outputBufferInfo.flags &= ~MediaCodec.BUFFER_FLAG_END_OF_STREAM;
     }
     if ((outputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {
       // Encountered a CSD buffer, skip it.

File: libraries/transformer/src/main/java/androidx/media3/transformer/MuxerWrapper.java
Patch:
@@ -301,7 +301,7 @@ private void resetAbortTimer() {
                           "No output sample written in the last "
                               + maxDelayBetweenSamplesMs
                               + " milliseconds. Aborting transformation."),
-                      ExportException.ERROR_CODE_MUXING_FAILED));
+                      ExportException.ERROR_CODE_MUXING_TIMEOUT));
             },
             maxDelayBetweenSamplesMs,
             MILLISECONDS);

File: libraries/transformer/src/test/java/androidx/media3/transformer/MediaItemExportTest.java
Patch:
@@ -821,7 +821,7 @@ public void start_withSlowOutputSampleRate_completesWithError() {
     ExportException exception =
         assertThrows(ExportException.class, () -> TransformerTestRunner.runLooper(transformer));
     assertThat(exception).hasCauseThat().isInstanceOf(IllegalStateException.class);
-    assertThat(exception.errorCode).isEqualTo(ExportException.ERROR_CODE_MUXING_FAILED);
+    assertThat(exception.errorCode).isEqualTo(ExportException.ERROR_CODE_MUXING_TIMEOUT);
   }
 
   @Test

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/DefaultRenderersFactory.java
Patch:
@@ -26,6 +26,7 @@
 import androidx.annotation.Nullable;
 import androidx.media3.common.util.Log;
 import androidx.media3.common.util.UnstableApi;
+import androidx.media3.exoplayer.audio.AudioCapabilities;
 import androidx.media3.exoplayer.audio.AudioRendererEventListener;
 import androidx.media3.exoplayer.audio.AudioSink;
 import androidx.media3.exoplayer.audio.DefaultAudioSink;
@@ -648,7 +649,8 @@ protected AudioSink buildAudioSink(
       boolean enableFloatOutput,
       boolean enableAudioTrackPlaybackParams,
       boolean enableOffload) {
-    return new DefaultAudioSink.Builder(context)
+    return new DefaultAudioSink.Builder()
+        .setAudioCapabilities(AudioCapabilities.getCapabilities(context))
         .setEnableFloatOutput(enableFloatOutput)
         .setEnableAudioTrackPlaybackParams(enableAudioTrackPlaybackParams)
         .setOffloadMode(

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/AndroidTestUtil.java
Patch:
@@ -478,6 +478,9 @@ public final class AndroidTestUtil {
           .setFrameRate(23.163f)
           .setCodecs("hvc1.1.6.L183.B0")
           .build();
+
+  public static final String MP3_ASSET_URI_STRING = "asset:///media/mp3/test.mp3";
+
   /**
    * Log in logcat and in an analysis file that this test was skipped.
    *

File: libraries/transformer/src/test/java/androidx/media3/transformer/TestUtil.java
Patch:
@@ -145,6 +145,7 @@ public void release() {}
 
   public static final String ASSET_URI_PREFIX = "asset:///media/";
   public static final String FILE_VIDEO_ONLY = "mp4/sample_18byte_nclx_colr.mp4";
+  public static final String FILE_AUDIO_ONLY = "mp3/test.mp3";
   public static final String FILE_AUDIO_VIDEO = "mp4/sample.mp4";
   public static final String FILE_AUDIO_VIDEO_INCREASING_TIMESTAMPS_15S =
       "mp4/sample_with_increasing_timestamps_320w_240h.mp4";

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -628,9 +628,7 @@ private OverlayEffect createOverlayEffectFromBundle(Bundle bundle, boolean[] sel
     "exportStopwatch",
   })
   private void onError(ExportException exportException) {
-    if (exportStopwatch.isRunning()) {
-      exportStopwatch.stop();
-    }
+    exportStopwatch.stop();
     informationTextView.setText(R.string.export_error);
     progressViewGroup.setVisibility(View.GONE);
     debugFrame.removeAllViews();

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -627,9 +627,7 @@ private OverlayEffect createOverlayEffectFromBundle(Bundle bundle, boolean[] sel
     "exportStopwatch",
   })
   private void onError(ExportException exportException) {
-    if (exportStopwatch.isRunning()) {
-      exportStopwatch.stop();
-    }
+    exportStopwatch.stop();
     informationTextView.setText(R.string.export_error);
     progressViewGroup.setVisibility(View.GONE);
     debugFrame.removeAllViews();

File: library/extractor/src/main/java/com/google/android/exoplayer2/metadata/mp4/MdtaMetadataEntry.java
Patch:
@@ -82,7 +82,7 @@ public int hashCode() {
 
   @Override
   public String toString() {
-    return "mdta: key=" + key;
+    return "mdta: key=" + key + ", value=" + Util.toHexString(value);
   }
 
   // Parcelable implementation.

File: library/extractor/src/main/java/com/google/android/exoplayer2/metadata/mp4/Mp4LocationData.java
Patch:
@@ -59,7 +59,7 @@ public int hashCode() {
 
   @Override
   public String toString() {
-    return "xyz: latitude=" + latitude + " longitude=" + longitude;
+    return "xyz: latitude=" + latitude + ", longitude=" + longitude;
   }
 
   // Parcelable implementation.

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/FinalShaderProgramWrapper.java
Patch:
@@ -324,7 +324,7 @@ private synchronized void maybeRenderFrameToOutputSurface(
         outputEglSurface,
         outputSurfaceInfo.width,
         outputSurfaceInfo.height);
-    glObjectsProvider.clearOutputFrame();
+    GlUtil.clearOutputFrame();
     defaultShaderProgram.drawFrame(inputTexture.texId, presentationTimeUs);
 
     EGLExt.eglPresentationTimeANDROID(
@@ -466,7 +466,7 @@ private void maybeRenderFrameToDebugSurface(GlTextureInfo inputTexture, long pre
     try {
       debugSurfaceViewWrapper.maybeRenderToSurfaceView(
           () -> {
-            glObjectsProvider.clearOutputFrame();
+            GlUtil.clearOutputFrame();
             @C.ColorTransfer
             int configuredColorTransfer = defaultShaderProgram.getOutputColorTransfer();
             defaultShaderProgram.setOutputColorTransfer(

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/FrameCacheGlShaderProgram.java
Patch:
@@ -137,7 +137,7 @@ public void queueInputFrame(GlTextureInfo inputTexture, long presentationTimeUs)
       // Copy frame to fbo.
       GlUtil.focusFramebufferUsingCurrentContext(
           outputTexture.fboId, outputTexture.width, outputTexture.height);
-      glObjectsProvider.clearOutputFrame();
+      GlUtil.clearOutputFrame();
       drawFrame(inputTexture.texId);
       inputListener.onInputFrameProcessed(inputTexture);
       outputListener.onOutputFrameAvailable(outputTexture, presentationTimeUs);

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/SingleFrameGlShaderProgram.java
Patch:
@@ -142,7 +142,7 @@ public final void queueInputFrame(GlTextureInfo inputTexture, long presentationT
       outputTextureInUse = true;
       GlUtil.focusFramebufferUsingCurrentContext(
           outputTexture.fboId, outputTexture.width, outputTexture.height);
-      glObjectsProvider.clearOutputFrame();
+      GlUtil.clearOutputFrame();
       drawFrame(inputTexture.texId, presentationTimeUs);
       inputListener.onInputFrameProcessed(inputTexture);
       outputListener.onOutputFrameAvailable(outputTexture, presentationTimeUs);

File: library/core/src/main/java/com/google/android/exoplayer2/DefaultRenderersFactory.java
Patch:
@@ -24,7 +24,6 @@
 import android.os.Looper;
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
-import com.google.android.exoplayer2.audio.AudioCapabilities;
 import com.google.android.exoplayer2.audio.AudioRendererEventListener;
 import com.google.android.exoplayer2.audio.AudioSink;
 import com.google.android.exoplayer2.audio.DefaultAudioSink;
@@ -649,8 +648,7 @@ protected AudioSink buildAudioSink(
       boolean enableFloatOutput,
       boolean enableAudioTrackPlaybackParams,
       boolean enableOffload) {
-    return new DefaultAudioSink.Builder()
-        .setAudioCapabilities(AudioCapabilities.getCapabilities(context))
+    return new DefaultAudioSink.Builder(context)
         .setEnableFloatOutput(enableFloatOutput)
         .setEnableAudioTrackPlaybackParams(enableAudioTrackPlaybackParams)
         .setOffloadMode(

File: libraries/extractor/src/main/java/androidx/media3/extractor/metadata/mp4/MdtaMetadataEntry.java
Patch:
@@ -84,7 +84,7 @@ public int hashCode() {
 
   @Override
   public String toString() {
-    return "mdta: key=" + key;
+    return "mdta: key=" + key + ", value=" + Util.toHexString(value);
   }
 
   // Parcelable implementation.

File: libraries/extractor/src/main/java/androidx/media3/extractor/metadata/mp4/Mp4LocationData.java
Patch:
@@ -61,7 +61,7 @@ public int hashCode() {
 
   @Override
   public String toString() {
-    return "xyz: latitude=" + latitude + " longitude=" + longitude;
+    return "xyz: latitude=" + latitude + ", longitude=" + longitude;
   }
 
   // Parcelable implementation.

File: libraries/effect/src/main/java/androidx/media3/effect/FinalShaderProgramWrapper.java
Patch:
@@ -324,7 +324,7 @@ private synchronized void maybeRenderFrameToOutputSurface(
         outputEglSurface,
         outputSurfaceInfo.width,
         outputSurfaceInfo.height);
-    glObjectsProvider.clearOutputFrame();
+    GlUtil.clearOutputFrame();
     defaultShaderProgram.drawFrame(inputTexture.texId, presentationTimeUs);
 
     EGLExt.eglPresentationTimeANDROID(
@@ -466,7 +466,7 @@ private void maybeRenderFrameToDebugSurface(GlTextureInfo inputTexture, long pre
     try {
       debugSurfaceViewWrapper.maybeRenderToSurfaceView(
           () -> {
-            glObjectsProvider.clearOutputFrame();
+            GlUtil.clearOutputFrame();
             @C.ColorTransfer
             int configuredColorTransfer = defaultShaderProgram.getOutputColorTransfer();
             defaultShaderProgram.setOutputColorTransfer(

File: libraries/effect/src/main/java/androidx/media3/effect/FrameCacheGlShaderProgram.java
Patch:
@@ -137,7 +137,7 @@ public void queueInputFrame(GlTextureInfo inputTexture, long presentationTimeUs)
       // Copy frame to fbo.
       GlUtil.focusFramebufferUsingCurrentContext(
           outputTexture.fboId, outputTexture.width, outputTexture.height);
-      glObjectsProvider.clearOutputFrame();
+      GlUtil.clearOutputFrame();
       drawFrame(inputTexture.texId);
       inputListener.onInputFrameProcessed(inputTexture);
       outputListener.onOutputFrameAvailable(outputTexture, presentationTimeUs);

File: libraries/effect/src/main/java/androidx/media3/effect/SingleFrameGlShaderProgram.java
Patch:
@@ -144,7 +144,7 @@ public final void queueInputFrame(GlTextureInfo inputTexture, long presentationT
       outputTextureInUse = true;
       GlUtil.focusFramebufferUsingCurrentContext(
           outputTexture.fboId, outputTexture.width, outputTexture.height);
-      glObjectsProvider.clearOutputFrame();
+      GlUtil.clearOutputFrame();
       drawFrame(inputTexture.texId, presentationTimeUs);
       inputListener.onInputFrameProcessed(inputTexture);
       outputListener.onOutputFrameAvailable(outputTexture, presentationTimeUs);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/DefaultRenderersFactory.java
Patch:
@@ -26,7 +26,6 @@
 import androidx.annotation.Nullable;
 import androidx.media3.common.util.Log;
 import androidx.media3.common.util.UnstableApi;
-import androidx.media3.exoplayer.audio.AudioCapabilities;
 import androidx.media3.exoplayer.audio.AudioRendererEventListener;
 import androidx.media3.exoplayer.audio.AudioSink;
 import androidx.media3.exoplayer.audio.DefaultAudioSink;
@@ -649,8 +648,7 @@ protected AudioSink buildAudioSink(
       boolean enableFloatOutput,
       boolean enableAudioTrackPlaybackParams,
       boolean enableOffload) {
-    return new DefaultAudioSink.Builder()
-        .setAudioCapabilities(AudioCapabilities.getCapabilities(context))
+    return new DefaultAudioSink.Builder(context)
         .setEnableFloatOutput(enableFloatOutput)
         .setEnableAudioTrackPlaybackParams(enableAudioTrackPlaybackParams)
         .setOffloadMode(

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/ConfigurationActivity.java
Patch:
@@ -573,7 +573,7 @@ private void selectTrimBounds(View view, boolean isChecked) {
     View dialogView = getLayoutInflater().inflate(R.layout.trim_options, /* root= */ null);
     RangeSlider trimRangeSlider =
         checkNotNull(dialogView.findViewById(R.id.trim_bounds_range_slider));
-    trimRangeSlider.setValues(0f, 10f); // seconds
+    trimRangeSlider.setValues(0f, 1f); // seconds
     new AlertDialog.Builder(/* context= */ this)
         .setView(dialogView)
         .setPositiveButton(

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/analysis/EncoderPerformanceAnalysisTest.java
Patch:
@@ -50,7 +50,7 @@ public class EncoderPerformanceAnalysisTest {
       ImmutableList.of(
           AndroidTestUtil.MP4_ASSET_WITH_INCREASING_TIMESTAMPS_320W_240H_15S_URI_STRING,
           AndroidTestUtil.MP4_ASSET_WITH_INCREASING_TIMESTAMPS_URI_STRING,
-          AndroidTestUtil.MP4_REMOTE_4K60_PORTRAIT_URI_STRING);
+          AndroidTestUtil.MP4_ASSET_4K60_PORTRAIT_URI_STRING);
 
   private static final ImmutableList<Integer> OPERATING_RATE_SETTINGS =
       ImmutableList.of(VideoEncoderSettings.NO_VALUE, 30, Integer.MAX_VALUE);

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/ConfigurationActivity.java
Patch:
@@ -573,7 +573,7 @@ private void selectTrimBounds(View view, boolean isChecked) {
     View dialogView = getLayoutInflater().inflate(R.layout.trim_options, /* root= */ null);
     RangeSlider trimRangeSlider =
         checkNotNull(dialogView.findViewById(R.id.trim_bounds_range_slider));
-    trimRangeSlider.setValues(0f, 10f); // seconds
+    trimRangeSlider.setValues(0f, 1f); // seconds
     new AlertDialog.Builder(/* context= */ this)
         .setView(dialogView)
         .setPositiveButton(

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/analysis/EncoderPerformanceAnalysisTest.java
Patch:
@@ -50,7 +50,7 @@ public class EncoderPerformanceAnalysisTest {
       ImmutableList.of(
           AndroidTestUtil.MP4_ASSET_WITH_INCREASING_TIMESTAMPS_320W_240H_15S_URI_STRING,
           AndroidTestUtil.MP4_ASSET_WITH_INCREASING_TIMESTAMPS_URI_STRING,
-          AndroidTestUtil.MP4_REMOTE_4K60_PORTRAIT_URI_STRING);
+          AndroidTestUtil.MP4_ASSET_4K60_PORTRAIT_URI_STRING);
 
   private static final ImmutableList<Integer> OPERATING_RATE_SETTINGS =
       ImmutableList.of(VideoEncoderSettings.NO_VALUE, 30, Integer.MAX_VALUE);

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -594,6 +594,7 @@ private OverlayEffect createOverlayEffectFromBundle(Bundle bundle, boolean[] sel
               .build();
       BitmapOverlay bitmapOverlay =
           BitmapOverlay.createStaticBitmapOverlay(
+              getApplicationContext(),
               Uri.parse(checkNotNull(bundle.getString(ConfigurationActivity.BITMAP_OVERLAY_URI))),
               overlaySettings);
       overlaysBuilder.add(bitmapOverlay);

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -453,7 +453,6 @@ public DefaultAudioSink build() {
   @GuardedBy("releaseExecutorLock")
   private static int pendingReleaseCount;
 
-  private final AudioCapabilities audioCapabilities;
   private final com.google.android.exoplayer2.audio.AudioProcessorChain audioProcessorChain;
   private final boolean enableFloatOutput;
   private final ChannelMappingAudioProcessor channelMappingAudioProcessor;
@@ -478,6 +477,7 @@ public DefaultAudioSink build() {
   private @MonotonicNonNull Configuration configuration;
   private @MonotonicNonNull AudioProcessingPipeline audioProcessingPipeline;
   @Nullable private AudioTrack audioTrack;
+  private AudioCapabilities audioCapabilities;
 
   private AudioAttributes audioAttributes;
   @Nullable private MediaPositionParameters afterDrainParameters;
@@ -1128,6 +1128,8 @@ private void writeBuffer(ByteBuffer buffer, long avSyncPresentationTimeUs) throw
         listener.onAudioSinkError(e);
       }
       if (e.isRecoverable) {
+        // Change to the audio capabilities supported by all the devices during the error recovery.
+        audioCapabilities = DEFAULT_AUDIO_CAPABILITIES;
         throw e; // Do not delay the exception if it can be recovered at higher level.
       }
       writeExceptionPendingExceptionHolder.throwExceptionIfDeadlineIsReached(e);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerInternal.java
Patch:
@@ -440,8 +440,8 @@ public void onTrackCount(int trackCount) {
                 ERROR_CODE_FAILED_RUNTIME_CHECK));
         return;
       }
-      trackCountsToReport.decrementAndGet();
       tracksToAdd.addAndGet(trackCount);
+      trackCountsToReport.decrementAndGet();
     }
 
     @Override
@@ -465,12 +465,11 @@ public boolean onTrackAdded(
       } else {
         outputHasVideo.set(true);
       }
-      if (trackCountsToReport.get() == 0 && tracksToAdd.get() == 1) {
+      if (trackCountsToReport.get() == 0 && tracksToAdd.decrementAndGet() == 0) {
         int outputTrackCount = (outputHasAudio.get() ? 1 : 0) + (outputHasVideo.get() ? 1 : 0);
         muxerWrapper.setTrackCount(outputTrackCount);
         fallbackListener.setTrackCount(outputTrackCount);
       }
-      tracksToAdd.decrementAndGet();
 
       return trackInfo.shouldTranscode;
     }

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -593,6 +593,7 @@ private OverlayEffect createOverlayEffectFromBundle(Bundle bundle, boolean[] sel
               .build();
       BitmapOverlay bitmapOverlay =
           BitmapOverlay.createStaticBitmapOverlay(
+              getApplicationContext(),
               Uri.parse(checkNotNull(bundle.getString(ConfigurationActivity.BITMAP_OVERLAY_URI))),
               overlaySettings);
       overlaysBuilder.add(bitmapOverlay);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/DefaultAudioSink.java
Patch:
@@ -466,7 +466,6 @@ public DefaultAudioSink build() {
   @GuardedBy("releaseExecutorLock")
   private static int pendingReleaseCount;
 
-  private final AudioCapabilities audioCapabilities;
   private final androidx.media3.common.audio.AudioProcessorChain audioProcessorChain;
   private final boolean enableFloatOutput;
   private final ChannelMappingAudioProcessor channelMappingAudioProcessor;
@@ -491,6 +490,7 @@ public DefaultAudioSink build() {
   private @MonotonicNonNull Configuration configuration;
   private @MonotonicNonNull AudioProcessingPipeline audioProcessingPipeline;
   @Nullable private AudioTrack audioTrack;
+  private AudioCapabilities audioCapabilities;
 
   private AudioAttributes audioAttributes;
   @Nullable private MediaPositionParameters afterDrainParameters;
@@ -1141,6 +1141,8 @@ private void writeBuffer(ByteBuffer buffer, long avSyncPresentationTimeUs) throw
         listener.onAudioSinkError(e);
       }
       if (e.isRecoverable) {
+        // Change to the audio capabilities supported by all the devices during the error recovery.
+        audioCapabilities = DEFAULT_AUDIO_CAPABILITIES;
         throw e; // Do not delay the exception if it can be recovered at higher level.
       }
       writeExceptionPendingExceptionHolder.throwExceptionIfDeadlineIsReached(e);

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerInternal.java
Patch:
@@ -440,8 +440,8 @@ public void onTrackCount(int trackCount) {
                 ERROR_CODE_FAILED_RUNTIME_CHECK));
         return;
       }
-      trackCountsToReport.decrementAndGet();
       tracksToAdd.addAndGet(trackCount);
+      trackCountsToReport.decrementAndGet();
     }
 
     @Override
@@ -465,12 +465,11 @@ public boolean onTrackAdded(
       } else {
         outputHasVideo.set(true);
       }
-      if (trackCountsToReport.get() == 0 && tracksToAdd.get() == 1) {
+      if (trackCountsToReport.get() == 0 && tracksToAdd.decrementAndGet() == 0) {
         int outputTrackCount = (outputHasAudio.get() ? 1 : 0) + (outputHasVideo.get() ? 1 : 0);
         muxerWrapper.setTrackCount(outputTrackCount);
         fallbackListener.setTrackCount(outputTrackCount);
       }
-      tracksToAdd.decrementAndGet();
 
       return trackInfo.shouldTranscode;
     }

File: library/common/src/main/java/com/google/android/exoplayer2/util/GlTextureInfo.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.google.android.exoplayer2.util;
 
+import com.google.android.exoplayer2.C;
+
 /** Contains information describing an OpenGL texture. */
 public final class GlTextureInfo {
 

File: library/common/src/main/java/com/google/android/exoplayer2/util/GlObjectsProvider.java
Patch:
@@ -20,6 +20,7 @@
 import android.opengl.EGLDisplay;
 import androidx.annotation.IntRange;
 import androidx.annotation.RequiresApi;
+import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.util.GlUtil.GlException;
 
 // TODO(271433904): Expand this class to cover more methods in GlUtil.

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerUtil.java
Patch:
@@ -29,7 +29,7 @@ private TransformerUtil() {}
    * Returns the {@link C.TrackType track type} constant corresponding to how a specified MIME type
    * should be processed, which may be {@link C#TRACK_TYPE_UNKNOWN} if it could not be determined.
    *
-   * <p>{@linkplain MimeTypes#isImage image} mime types are processed as {@link C#TRACK_TYPE_VIDEO}.
+   * <p>{@linkplain MimeTypes#isImage Image} MIME types are processed as {@link C#TRACK_TYPE_VIDEO}.
    *
    * <p>See {@link MimeTypes#getTrackType} for more details.
    */

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/FrameCache.java
Patch:
@@ -50,6 +50,6 @@ public FrameCache(@IntRange(from = 1, to = 8) int capacity) {
   @Override
   public GlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
       throws VideoFrameProcessingException {
-    return new FrameCacheShaderProgram(context, capacity, useHdr);
+    return new FrameCacheGlShaderProgram(context, capacity, useHdr);
   }
 }

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/FrameCacheGlShaderProgram.java
Patch:
@@ -35,7 +35,7 @@
  *
  * <p>Implements {@link FrameCache}.
  */
-/* package */ final class FrameCacheShaderProgram implements GlShaderProgram {
+/* package */ final class FrameCacheGlShaderProgram implements GlShaderProgram {
   private static final String VERTEX_SHADER_TRANSFORMATION_ES2_PATH =
       "shaders/vertex_shader_transformation_es2.glsl";
   private static final String FRAGMENT_SHADER_TRANSFORMATION_ES2_PATH =
@@ -53,7 +53,7 @@
   private Executor errorListenerExecutor;
 
   /** Creates a new instance. */
-  public FrameCacheShaderProgram(Context context, int capacity, boolean useHdr)
+  public FrameCacheGlShaderProgram(Context context, int capacity, boolean useHdr)
       throws VideoFrameProcessingException {
     freeOutputTextures = new ArrayDeque<>();
     inUseOutputTextures = new ArrayDeque<>();

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/CompositeAssetLoader.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.android.exoplayer2.transformer.Transformer.PROGRESS_STATE_AVAILABLE;
 import static com.google.android.exoplayer2.transformer.Transformer.PROGRESS_STATE_NOT_STARTED;
+import static com.google.android.exoplayer2.transformer.TransformerUtil.getProcessedTrackType;
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
@@ -191,9 +192,7 @@ public SampleConsumer onTrackAdded(
       long streamStartPositionUs,
       long streamOffsetUs)
       throws ExportException {
-    // Consider image as video because image inputs are fed to the VideoSamplePipeline.
-    int trackType =
-        MimeTypes.isAudio(format.sampleMimeType) ? C.TRACK_TYPE_AUDIO : C.TRACK_TYPE_VIDEO;
+    @C.TrackType int trackType = getProcessedTrackType(format.sampleMimeType);
     SampleConsumer sampleConsumer;
     if (currentMediaItemIndex.get() == 0) {
       boolean addForcedAudioTrack =

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerUtil.java
Patch:
@@ -29,7 +29,7 @@ private TransformerUtil() {}
    * Returns the {@link C.TrackType track type} constant corresponding to how a specified MIME type
    * should be processed, which may be {@link C#TRACK_TYPE_UNKNOWN} if it could not be determined.
    *
-   * <p>{@linkplain MimeTypes#isImage image} mime types are processed as {@link C#TRACK_TYPE_VIDEO}.
+   * <p>{@linkplain MimeTypes#isImage Image} MIME types are processed as {@link C#TRACK_TYPE_VIDEO}.
    *
    * <p>See {@link MimeTypes#getTrackType} for more details.
    */

File: libraries/effect/src/main/java/androidx/media3/effect/FrameCache.java
Patch:
@@ -52,6 +52,6 @@ public FrameCache(@IntRange(from = 1, to = 8) int capacity) {
   @Override
   public GlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
       throws VideoFrameProcessingException {
-    return new FrameCacheShaderProgram(context, capacity, useHdr);
+    return new FrameCacheGlShaderProgram(context, capacity, useHdr);
   }
 }

File: libraries/effect/src/main/java/androidx/media3/effect/FrameCacheGlShaderProgram.java
Patch:
@@ -35,7 +35,7 @@
  *
  * <p>Implements {@link FrameCache}.
  */
-/* package */ final class FrameCacheShaderProgram implements GlShaderProgram {
+/* package */ final class FrameCacheGlShaderProgram implements GlShaderProgram {
   private static final String VERTEX_SHADER_TRANSFORMATION_ES2_PATH =
       "shaders/vertex_shader_transformation_es2.glsl";
   private static final String FRAGMENT_SHADER_TRANSFORMATION_ES2_PATH =
@@ -53,7 +53,7 @@
   private Executor errorListenerExecutor;
 
   /** Creates a new instance. */
-  public FrameCacheShaderProgram(Context context, int capacity, boolean useHdr)
+  public FrameCacheGlShaderProgram(Context context, int capacity, boolean useHdr)
       throws VideoFrameProcessingException {
     freeOutputTextures = new ArrayDeque<>();
     inUseOutputTextures = new ArrayDeque<>();

File: libraries/transformer/src/main/java/androidx/media3/transformer/CompositeAssetLoader.java
Patch:
@@ -21,6 +21,7 @@
 import static androidx.media3.common.util.Assertions.checkStateNotNull;
 import static androidx.media3.transformer.Transformer.PROGRESS_STATE_AVAILABLE;
 import static androidx.media3.transformer.Transformer.PROGRESS_STATE_NOT_STARTED;
+import static androidx.media3.transformer.TransformerUtil.getProcessedTrackType;
 
 import android.graphics.Bitmap;
 import android.os.Looper;
@@ -191,9 +192,7 @@ public SampleConsumer onTrackAdded(
       long streamStartPositionUs,
       long streamOffsetUs)
       throws ExportException {
-    // Consider image as video because image inputs are fed to the VideoSamplePipeline.
-    int trackType =
-        MimeTypes.isAudio(format.sampleMimeType) ? C.TRACK_TYPE_AUDIO : C.TRACK_TYPE_VIDEO;
+    @C.TrackType int trackType = getProcessedTrackType(format.sampleMimeType);
     SampleConsumer sampleConsumer;
     if (currentMediaItemIndex.get() == 0) {
       boolean addForcedAudioTrack =

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionImpl.java
Patch:
@@ -447,7 +447,7 @@ public ListenableFuture<SessionResult> sendCustomCommand(
 
   public MediaSession.ConnectionResult onConnectOnHandler(ControllerInfo controller) {
     return checkNotNull(
-        callback.onConnect(instance, controller), "onConntext must return non-null future");
+        callback.onConnect(instance, controller), "onConnect must return non-null future");
   }
 
   public void onPostConnectOnHandler(ControllerInfo controller) {

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionImpl.java
Patch:
@@ -448,7 +448,7 @@ public ListenableFuture<SessionResult> sendCustomCommand(
 
   public MediaSession.ConnectionResult onConnectOnHandler(ControllerInfo controller) {
     return checkNotNull(
-        callback.onConnect(instance, controller), "onConntext must return non-null future");
+        callback.onConnect(instance, controller), "onConnect must return non-null future");
   }
 
   public void onPostConnectOnHandler(ControllerInfo controller) {

File: libraries/effect/src/androidTest/java/androidx/media3/effect/DefaultVideoFrameProcessorImageFrameOutputTest.java
Patch:
@@ -38,8 +38,8 @@
 public class DefaultVideoFrameProcessorImageFrameOutputTest {
   public static final String ORIGINAL_PNG_ASSET_PATH =
       "media/bitmap/sample_mp4_first_frame/electrical_colors/original.png";
-  public static final String WRAPPED_CROP_PNG_ASSET_PATH =
-      "media/bitmap/sample_mp4_first_frame/electrical_colors/image_input_with_wrapped_crop.png";
+  public static final String SCALE_WIDE_PNG_ASSET_PATH =
+      "media/bitmap/sample_mp4_first_frame/electrical_colors/scale_wide.png";
   public static final String BITMAP_OVERLAY_PNG_ASSET_PATH =
       "media/bitmap/sample_mp4_first_frame/electrical_colors/overlay_bitmap_FrameProcessor.png";
 
@@ -66,7 +66,7 @@ public void imageInput_queueThreeBitmaps_outputsCorrectNumberOfFrames() throws E
     videoFrameProcessorTestRunner.queueInputBitmap(
         readBitmap(ORIGINAL_PNG_ASSET_PATH), C.MICROS_PER_SECOND, /* frameRate= */ 2);
     videoFrameProcessorTestRunner.queueInputBitmap(
-        readBitmap(WRAPPED_CROP_PNG_ASSET_PATH), 2 * C.MICROS_PER_SECOND, /* frameRate= */ 3);
+        readBitmap(SCALE_WIDE_PNG_ASSET_PATH), 2 * C.MICROS_PER_SECOND, /* frameRate= */ 3);
     videoFrameProcessorTestRunner.queueInputBitmap(
         readBitmap(BITMAP_OVERLAY_PNG_ASSET_PATH), 3 * C.MICROS_PER_SECOND, /* frameRate= */ 4);
     videoFrameProcessorTestRunner.endFrameProcessingAndGetImage();

File: libraries/effect/src/androidTest/java/androidx/media3/effect/OverlayShaderProgramPixelTest.java
Patch:
@@ -58,7 +58,7 @@
  */
 @RunWith(AndroidJUnit4.class)
 public class OverlayShaderProgramPixelTest {
-  public static final String OVERLAY_PNG_ASSET_PATH = "media/bitmap/overlay/media3test.png";
+  public static final String OVERLAY_PNG_ASSET_PATH = "media/bitmap/input_images/media3test.png";
   public static final String ORIGINAL_PNG_ASSET_PATH =
       "media/bitmap/sample_mp4_first_frame/electrical_colors/original.png";
   public static final String OVERLAY_BITMAP_DEFAULT =

File: libraries/session/src/main/java/androidx/media3/session/MediaNotificationManager.java
Patch:
@@ -219,9 +219,11 @@ private void updateNotificationInternal(
     if (startInForegroundRequired) {
       startForeground(mediaNotification);
     } else {
-      maybeStopForegroundService(/* removeNotifications= */ false);
+      // Notification manager has to be updated first to avoid missing updates
+      // (https://github.com/androidx/media/issues/192).
       notificationManagerCompat.notify(
           mediaNotification.notificationId, mediaNotification.notification);
+      maybeStopForegroundService(/* removeNotifications= */ false);
     }
   }
 

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/DefaultVideoFrameProcessorImageFrameOutputTest.java
Patch:
@@ -38,8 +38,8 @@
 public class DefaultVideoFrameProcessorImageFrameOutputTest {
   public static final String ORIGINAL_PNG_ASSET_PATH =
       "media/bitmap/sample_mp4_first_frame/electrical_colors/original.png";
-  public static final String WRAPPED_CROP_PNG_ASSET_PATH =
-      "media/bitmap/sample_mp4_first_frame/electrical_colors/image_input_with_wrapped_crop.png";
+  public static final String SCALE_WIDE_PNG_ASSET_PATH =
+      "media/bitmap/sample_mp4_first_frame/electrical_colors/scale_wide.png";
   public static final String BITMAP_OVERLAY_PNG_ASSET_PATH =
       "media/bitmap/sample_mp4_first_frame/electrical_colors/overlay_bitmap_FrameProcessor.png";
 
@@ -66,7 +66,7 @@ public void imageInput_queueThreeBitmaps_outputsCorrectNumberOfFrames() throws E
     videoFrameProcessorTestRunner.queueInputBitmap(
         readBitmap(ORIGINAL_PNG_ASSET_PATH), C.MICROS_PER_SECOND, /* frameRate= */ 2);
     videoFrameProcessorTestRunner.queueInputBitmap(
-        readBitmap(WRAPPED_CROP_PNG_ASSET_PATH), 2 * C.MICROS_PER_SECOND, /* frameRate= */ 3);
+        readBitmap(SCALE_WIDE_PNG_ASSET_PATH), 2 * C.MICROS_PER_SECOND, /* frameRate= */ 3);
     videoFrameProcessorTestRunner.queueInputBitmap(
         readBitmap(BITMAP_OVERLAY_PNG_ASSET_PATH), 3 * C.MICROS_PER_SECOND, /* frameRate= */ 4);
     videoFrameProcessorTestRunner.endFrameProcessingAndGetImage();

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/OverlayShaderProgramPixelTest.java
Patch:
@@ -58,7 +58,7 @@
  */
 @RunWith(AndroidJUnit4.class)
 public class OverlayShaderProgramPixelTest {
-  public static final String OVERLAY_PNG_ASSET_PATH = "media/bitmap/overlay/media3test.png";
+  public static final String OVERLAY_PNG_ASSET_PATH = "media/bitmap/input_images/media3test.png";
   public static final String ORIGINAL_PNG_ASSET_PATH =
       "media/bitmap/sample_mp4_first_frame/electrical_colors/original.png";
   public static final String OVERLAY_BITMAP_DEFAULT =

File: library/common/src/main/java/com/google/android/exoplayer2/util/NetworkTypeObserver.java
Patch:
@@ -93,7 +93,7 @@ private NetworkTypeObserver(Context context) {
     networkType = C.NETWORK_TYPE_UNKNOWN;
     IntentFilter filter = new IntentFilter();
     filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
-    Util.registerReceiverNotExported(context, new Receiver(), filter);
+    context.registerReceiver(new Receiver(), filter);
   }
 
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/AudioBecomingNoisyManager.java
Patch:
@@ -21,7 +21,6 @@
 import android.content.IntentFilter;
 import android.media.AudioManager;
 import android.os.Handler;
-import com.google.android.exoplayer2.util.Util;
 
 /* package */ final class AudioBecomingNoisyManager {
 
@@ -47,8 +46,8 @@ public AudioBecomingNoisyManager(Context context, Handler eventHandler, EventLis
    */
   public void setEnabled(boolean enabled) {
     if (enabled && !receiverRegistered) {
-      Util.registerReceiverNotExported(
-          context, receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
+      context.registerReceiver(
+          receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
       receiverRegistered = true;
     } else if (!enabled && receiverRegistered) {
       context.unregisterReceiver(receiver);

File: library/core/src/main/java/com/google/android/exoplayer2/StreamVolumeManager.java
Patch:
@@ -74,7 +74,7 @@ public StreamVolumeManager(Context context, Handler eventHandler, Listener liste
     VolumeChangeReceiver receiver = new VolumeChangeReceiver();
     IntentFilter filter = new IntentFilter(VOLUME_CHANGED_ACTION);
     try {
-      Util.registerReceiverNotExported(applicationContext, receiver, filter);
+      applicationContext.registerReceiver(receiver, filter);
       this.receiver = receiver;
     } catch (RuntimeException e) {
       Log.w(TAG, "Error registering stream volume receiver", e);

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioCapabilities.java
Patch:
@@ -86,8 +86,8 @@ public final class AudioCapabilities {
   @SuppressWarnings("InlinedApi")
   public static AudioCapabilities getCapabilities(Context context) {
     Intent intent =
-        Util.registerReceiverNotExported(
-            context, /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
+        context.registerReceiver(
+            /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
     return getCapabilities(context, intent);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioCapabilitiesReceiver.java
Patch:
@@ -91,7 +91,9 @@ public AudioCapabilities register() {
     @Nullable Intent stickyIntent = null;
     if (receiver != null) {
       IntentFilter intentFilter = new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG);
-      stickyIntent = Util.registerReceiverNotExported(context, receiver, intentFilter, handler);
+      stickyIntent =
+          context.registerReceiver(
+              receiver, intentFilter, /* broadcastPermission= */ null, handler);
     }
     audioCapabilities = AudioCapabilities.getCapabilities(context, stickyIntent);
     return audioCapabilities;

File: library/core/src/main/java/com/google/android/exoplayer2/scheduler/RequirementsWatcher.java
Patch:
@@ -109,7 +109,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
       filter.addAction(Intent.ACTION_DEVICE_STORAGE_OK);
     }
     receiver = new DeviceStatusChangeReceiver();
-    Util.registerReceiverNotExported(context, receiver, filter, handler);
+    context.registerReceiver(receiver, filter, /* broadcastPermission= */ null, handler);
     return notMetRequirements;
   }
 

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
Patch:
@@ -1235,6 +1235,7 @@ private static int fetchPlaybackState(RemoteMediaClient remoteMediaClient) {
     int receiverAppStatus = remoteMediaClient.getPlayerState();
     switch (receiverAppStatus) {
       case MediaStatus.PLAYER_STATE_BUFFERING:
+      case MediaStatus.PLAYER_STATE_LOADING:
         return STATE_BUFFERING;
       case MediaStatus.PLAYER_STATE_PLAYING:
       case MediaStatus.PLAYER_STATE_PAUSED:
@@ -1297,6 +1298,7 @@ private static boolean isTrackActive(long id, long[] activeTrackIds) {
     return false;
   }
 
+  @SuppressWarnings("VisibleForTests")
   private static int getCastRepeatMode(@RepeatMode int repeatMode) {
     switch (repeatMode) {
       case REPEAT_MODE_ONE:

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspClient.java
Patch:
@@ -652,7 +652,7 @@ private void handleRtspResponse(List<String> message) {
           default:
             throw new IllegalStateException();
         }
-      } catch (ParserException e) {
+      } catch (ParserException | IllegalArgumentException e) {
         dispatchRtspError(new RtspPlaybackException(e));
       }
     }

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -191,11 +191,13 @@ public void releaseOutputBuffer(int index, long renderTimeStampNs) {
 
   @Override
   public int dequeueInputBufferIndex() {
+    bufferEnqueuer.maybeThrowException();
     return asynchronousMediaCodecCallback.dequeueInputBufferIndex();
   }
 
   @Override
   public int dequeueOutputBufferIndex(MediaCodec.BufferInfo bufferInfo) {
+    bufferEnqueuer.maybeThrowException();
     return asynchronousMediaCodecCallback.dequeueOutputBufferIndex(bufferInfo);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecBufferEnqueuer.java
Patch:
@@ -162,7 +162,8 @@ public void waitUntilQueueingComplete() throws InterruptedException {
     blockUntilHandlerThreadIsIdle();
   }
 
-  private void maybeThrowException() {
+  /** Throw any exception that occurred on the enqueuer's background queueing thread. */
+  public void maybeThrowException() {
     @Nullable RuntimeException exception = pendingRuntimeException.getAndSet(null);
     if (exception != null) {
       throw exception;

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecCallback.java
Patch:
@@ -263,11 +263,12 @@ private void flushInternal() {
     // else, pendingOutputFormat may already be non-null following a previous flush, and remains
     // set in this case.
 
+    // mediaCodecException is not reset to null. If the codec has raised an error, then it remains
+    // in FAILED_STATE even after flushing.
     availableInputBuffers.clear();
     availableOutputBuffers.clear();
     bufferInfos.clear();
     formats.clear();
-    mediaCodecException = null;
   }
 
   @GuardedBy("lock")

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -1713,8 +1713,9 @@ public void setDeviceMuted(boolean muted) {
   @Override
   public boolean isTunnelingEnabled() {
     verifyApplicationThread();
-    for (RendererConfiguration config : playbackInfo.trackSelectorResult.rendererConfigurations) {
-      if (config.tunneling) {
+    for (@Nullable
+    RendererConfiguration config : playbackInfo.trackSelectorResult.rendererConfigurations) {
+      if (config != null && config.tunneling) {
         return true;
       }
     }

File: libraries/common/src/main/java/androidx/media3/common/util/NetworkTypeObserver.java
Patch:
@@ -94,7 +94,7 @@ private NetworkTypeObserver(Context context) {
     networkType = C.NETWORK_TYPE_UNKNOWN;
     IntentFilter filter = new IntentFilter();
     filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
-    Util.registerReceiverNotExported(context, new Receiver(), filter);
+    context.registerReceiver(new Receiver(), filter);
   }
 
   /**

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/AudioBecomingNoisyManager.java
Patch:
@@ -21,7 +21,6 @@
 import android.content.IntentFilter;
 import android.media.AudioManager;
 import android.os.Handler;
-import androidx.media3.common.util.Util;
 
 /* package */ final class AudioBecomingNoisyManager {
 
@@ -47,8 +46,8 @@ public AudioBecomingNoisyManager(Context context, Handler eventHandler, EventLis
    */
   public void setEnabled(boolean enabled) {
     if (enabled && !receiverRegistered) {
-      Util.registerReceiverNotExported(
-          context, receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
+      context.registerReceiver(
+          receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
       receiverRegistered = true;
     } else if (!enabled && receiverRegistered) {
       context.unregisterReceiver(receiver);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/StreamVolumeManager.java
Patch:
@@ -75,7 +75,7 @@ public StreamVolumeManager(Context context, Handler eventHandler, Listener liste
     VolumeChangeReceiver receiver = new VolumeChangeReceiver();
     IntentFilter filter = new IntentFilter(VOLUME_CHANGED_ACTION);
     try {
-      Util.registerReceiverNotExported(applicationContext, receiver, filter);
+      applicationContext.registerReceiver(receiver, filter);
       this.receiver = receiver;
     } catch (RuntimeException e) {
       Log.w(TAG, "Error registering stream volume receiver", e);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioCapabilities.java
Patch:
@@ -88,8 +88,8 @@ public final class AudioCapabilities {
   @SuppressWarnings("InlinedApi")
   public static AudioCapabilities getCapabilities(Context context) {
     Intent intent =
-        Util.registerReceiverNotExported(
-            context, /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
+        context.registerReceiver(
+            /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
     return getCapabilities(context, intent);
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioCapabilitiesReceiver.java
Patch:
@@ -93,7 +93,9 @@ public AudioCapabilities register() {
     @Nullable Intent stickyIntent = null;
     if (receiver != null) {
       IntentFilter intentFilter = new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG);
-      stickyIntent = Util.registerReceiverNotExported(context, receiver, intentFilter, handler);
+      stickyIntent =
+          context.registerReceiver(
+              receiver, intentFilter, /* broadcastPermission= */ null, handler);
     }
     audioCapabilities = AudioCapabilities.getCapabilities(context, stickyIntent);
     return audioCapabilities;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/scheduler/RequirementsWatcher.java
Patch:
@@ -111,7 +111,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
       filter.addAction(Intent.ACTION_DEVICE_STORAGE_OK);
     }
     receiver = new DeviceStatusChangeReceiver();
-    Util.registerReceiverNotExported(context, receiver, filter, handler);
+    context.registerReceiver(receiver, filter, /* broadcastPermission= */ null, handler);
     return notMetRequirements;
   }
 

File: libraries/cast/src/main/java/androidx/media3/cast/CastPlayer.java
Patch:
@@ -1237,6 +1237,7 @@ private static int fetchPlaybackState(RemoteMediaClient remoteMediaClient) {
     int receiverAppStatus = remoteMediaClient.getPlayerState();
     switch (receiverAppStatus) {
       case MediaStatus.PLAYER_STATE_BUFFERING:
+      case MediaStatus.PLAYER_STATE_LOADING:
         return STATE_BUFFERING;
       case MediaStatus.PLAYER_STATE_PLAYING:
       case MediaStatus.PLAYER_STATE_PAUSED:
@@ -1299,6 +1300,7 @@ private static boolean isTrackActive(long id, long[] activeTrackIds) {
     return false;
   }
 
+  @SuppressWarnings("VisibleForTests")
   private static int getCastRepeatMode(@RepeatMode int repeatMode) {
     switch (repeatMode) {
       case REPEAT_MODE_ONE:

File: libraries/session/src/main/java/androidx/media3/session/MediaSession.java
Patch:
@@ -371,7 +371,7 @@ public static final class ControllerInfo {
      * @param remoteUserInfo The remote user info.
      * @param trusted {@code true} if trusted, {@code false} otherwise.
      * @param cb ControllerCb. Can be {@code null} only when a MediaBrowserCompat connects to
-     *     MediaSessionService and ControllerInfo is needed for SessionCallback#onConnected().
+     *     MediaSessionService and ControllerInfo is needed for {@code SessionCallback#onConnect()}.
      * @param connectionHints A session-specific argument sent from the controller for the
      *     connection. The contents of this bundle may affect the connection result.
      */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspClient.java
Patch:
@@ -652,7 +652,7 @@ private void handleRtspResponse(List<String> message) {
           default:
             throw new IllegalStateException();
         }
-      } catch (ParserException e) {
+      } catch (ParserException | IllegalArgumentException e) {
         dispatchRtspError(new RtspPlaybackException(e));
       }
     }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -191,11 +191,13 @@ public void releaseOutputBuffer(int index, long renderTimeStampNs) {
 
   @Override
   public int dequeueInputBufferIndex() {
+    bufferEnqueuer.maybeThrowException();
     return asynchronousMediaCodecCallback.dequeueInputBufferIndex();
   }
 
   @Override
   public int dequeueOutputBufferIndex(MediaCodec.BufferInfo bufferInfo) {
+    bufferEnqueuer.maybeThrowException();
     return asynchronousMediaCodecCallback.dequeueOutputBufferIndex(bufferInfo);
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/AsynchronousMediaCodecBufferEnqueuer.java
Patch:
@@ -162,7 +162,8 @@ public void waitUntilQueueingComplete() throws InterruptedException {
     blockUntilHandlerThreadIsIdle();
   }
 
-  private void maybeThrowException() {
+  /** Throw any exception that occurred on the enqueuer's background queueing thread. */
+  public void maybeThrowException() {
     @Nullable RuntimeException exception = pendingRuntimeException.getAndSet(null);
     if (exception != null) {
       throw exception;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/AsynchronousMediaCodecCallback.java
Patch:
@@ -263,11 +263,12 @@ private void flushInternal() {
     // else, pendingOutputFormat may already be non-null following a previous flush, and remains
     // set in this case.
 
+    // mediaCodecException is not reset to null. If the codec has raised an error, then it remains
+    // in FAILED_STATE even after flushing.
     availableInputBuffers.clear();
     availableOutputBuffers.clear();
     bufferInfos.clear();
     formats.clear();
-    mediaCodecException = null;
   }
 
   @GuardedBy("lock")

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayerImpl.java
Patch:
@@ -1724,8 +1724,9 @@ public void setDeviceMuted(boolean muted) {
   @Override
   public boolean isTunnelingEnabled() {
     verifyApplicationThread();
-    for (RendererConfiguration config : playbackInfo.trackSelectorResult.rendererConfigurations) {
-      if (config.tunneling) {
+    for (@Nullable
+    RendererConfiguration config : playbackInfo.trackSelectorResult.rendererConfigurations) {
+      if (config != null && config.tunneling) {
         return true;
       }
     }

File: libraries/common/src/main/java/androidx/media3/common/util/NetworkTypeObserver.java
Patch:
@@ -94,7 +94,7 @@ private NetworkTypeObserver(Context context) {
     networkType = C.NETWORK_TYPE_UNKNOWN;
     IntentFilter filter = new IntentFilter();
     filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
-    Util.registerReceiverNotExported(context, new Receiver(), filter);
+    context.registerReceiver(new Receiver(), filter);
   }
 
   /**

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/AudioBecomingNoisyManager.java
Patch:
@@ -21,7 +21,6 @@
 import android.content.IntentFilter;
 import android.media.AudioManager;
 import android.os.Handler;
-import androidx.media3.common.util.Util;
 
 /* package */ final class AudioBecomingNoisyManager {
 
@@ -47,8 +46,8 @@ public AudioBecomingNoisyManager(Context context, Handler eventHandler, EventLis
    */
   public void setEnabled(boolean enabled) {
     if (enabled && !receiverRegistered) {
-      Util.registerReceiverNotExported(
-          context, receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
+      context.registerReceiver(
+          receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
       receiverRegistered = true;
     } else if (!enabled && receiverRegistered) {
       context.unregisterReceiver(receiver);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/StreamVolumeManager.java
Patch:
@@ -75,7 +75,7 @@ public StreamVolumeManager(Context context, Handler eventHandler, Listener liste
     VolumeChangeReceiver receiver = new VolumeChangeReceiver();
     IntentFilter filter = new IntentFilter(VOLUME_CHANGED_ACTION);
     try {
-      Util.registerReceiverNotExported(applicationContext, receiver, filter);
+      applicationContext.registerReceiver(receiver, filter);
       this.receiver = receiver;
     } catch (RuntimeException e) {
       Log.w(TAG, "Error registering stream volume receiver", e);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioCapabilities.java
Patch:
@@ -90,8 +90,8 @@ public final class AudioCapabilities {
   @SuppressWarnings("InlinedApi")
   public static AudioCapabilities getCapabilities(Context context) {
     Intent intent =
-        Util.registerReceiverNotExported(
-            context, /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
+        context.registerReceiver(
+            /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
     return getCapabilities(context, intent);
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioCapabilitiesReceiver.java
Patch:
@@ -93,7 +93,9 @@ public AudioCapabilities register() {
     @Nullable Intent stickyIntent = null;
     if (receiver != null) {
       IntentFilter intentFilter = new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG);
-      stickyIntent = Util.registerReceiverNotExported(context, receiver, intentFilter, handler);
+      stickyIntent =
+          context.registerReceiver(
+              receiver, intentFilter, /* broadcastPermission= */ null, handler);
     }
     audioCapabilities = AudioCapabilities.getCapabilities(context, stickyIntent);
     return audioCapabilities;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/scheduler/RequirementsWatcher.java
Patch:
@@ -111,7 +111,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
       filter.addAction(Intent.ACTION_DEVICE_STORAGE_OK);
     }
     receiver = new DeviceStatusChangeReceiver();
-    Util.registerReceiverNotExported(context, receiver, filter, handler);
+    context.registerReceiver(receiver, filter, /* broadcastPermission= */ null, handler);
     return notMetRequirements;
   }
 

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/ToneMapHdrToSdrUsingOpenGlPixelTest.java
Patch:
@@ -69,7 +69,7 @@ public final class ToneMapHdrToSdrUsingOpenGlPixelTest {
   /** Input HLG video of which we only use the first frame. */
   private static final String INPUT_HLG_MP4_ASSET_STRING = "media/mp4/hlg-1080p.mp4";
   /** Input PQ video of which we only use the first frame. */
-  private static final String INPUT_PQ_MP4_ASSET_STRING = "media/mp4/hdr10-1080p.mp4";
+  private static final String INPUT_PQ_MP4_ASSET_STRING = "media/mp4/hdr10-720p.mp4";
 
   private static final String SKIP_REASON_NO_OPENGL_UNDER_API_29 =
       "OpenGL-based HDR to SDR tone mapping is unsupported below API 29.";

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/ToneMapHdrToSdrUsingMediaCodecTest.java
Patch:
@@ -16,8 +16,8 @@
 package androidx.media3.transformer.mh;
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
-import static androidx.media3.transformer.AndroidTestUtil.MP4_ASSET_1080P_4_SECOND_HDR10;
 import static androidx.media3.transformer.AndroidTestUtil.MP4_ASSET_1080P_5_SECOND_HLG10;
+import static androidx.media3.transformer.AndroidTestUtil.MP4_ASSET_720P_4_SECOND_HDR10;
 import static androidx.media3.transformer.mh.FileUtil.maybeAssertFileHasColorTransfer;
 import static com.google.common.truth.Truth.assertThat;
 
@@ -75,7 +75,7 @@ public void onFallbackApplied(
                   }
                 })
             .build();
-    MediaItem mediaItem = MediaItem.fromUri(Uri.parse(MP4_ASSET_1080P_4_SECOND_HDR10));
+    MediaItem mediaItem = MediaItem.fromUri(Uri.parse(MP4_ASSET_720P_4_SECOND_HDR10));
 
     try {
       ExportTestResult exportTestResult =
@@ -159,7 +159,7 @@ public void onFallbackApplied(
                   }
                 })
             .build();
-    MediaItem mediaItem = MediaItem.fromUri(Uri.parse(MP4_ASSET_1080P_4_SECOND_HDR10));
+    MediaItem mediaItem = MediaItem.fromUri(Uri.parse(MP4_ASSET_720P_4_SECOND_HDR10));
     ImmutableList<Effect> videoEffects =
         ImmutableList.of(
             new ScaleAndRotateTransformation.Builder().setRotationDegrees(180).build());

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/ToneMapHdrToSdrUsingOpenGlPixelTest.java
Patch:
@@ -17,8 +17,8 @@
 
 import static androidx.media3.test.utils.BitmapPixelTestUtil.getBitmapAveragePixelAbsoluteDifferenceArgb8888;
 import static androidx.media3.test.utils.BitmapPixelTestUtil.readBitmap;
-import static androidx.media3.transformer.AndroidTestUtil.MP4_ASSET_1080P_4_SECOND_HDR10_FORMAT;
 import static androidx.media3.transformer.AndroidTestUtil.MP4_ASSET_1080P_5_SECOND_HLG10_FORMAT;
+import static androidx.media3.transformer.AndroidTestUtil.MP4_ASSET_720P_4_SECOND_HDR10_FORMAT;
 import static androidx.media3.transformer.AndroidTestUtil.recordTestSkipped;
 import static androidx.media3.transformer.AndroidTestUtil.skipAndLogIfFormatsUnsupported;
 import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
@@ -161,7 +161,7 @@ public void toneMap_pqFrame_matchesGoldenFile() throws Exception {
     if (skipAndLogIfFormatsUnsupported(
         getApplicationContext(),
         testId,
-        /* inputFormat= */ MP4_ASSET_1080P_4_SECOND_HDR10_FORMAT,
+        /* inputFormat= */ MP4_ASSET_720P_4_SECOND_HDR10_FORMAT,
         /* outputFormat= */ null)) {
       return;
     }

File: libraries/effect/src/main/java/androidx/media3/effect/GlEffect.java
Patch:
@@ -51,9 +51,6 @@ GlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
    * @param inputHeight The input frame height, in pixels.
    */
   default boolean isNoOp(int inputWidth, int inputHeight) {
-    // TODO(b/265927935): Generalize this logic by implementing this method on all
-    //  subclasses, and deleting the default implementation here. Otherwise, some no-op effects may
-    //  not be properly detected or handled.
     return false;
   }
 }

File: libraries/transformer/src/main/java/androidx/media3/transformer/AudioSamplePipeline.java
Patch:
@@ -60,7 +60,6 @@
   // TODO(b/260618558): Move silent audio generation upstream of this component.
   public AudioSamplePipeline(
       Format firstInputFormat,
-      long streamStartPositionUs,
       long streamOffsetUs,
       TransformationRequest transformationRequest,
       boolean flattenForSlowMotion,
@@ -69,7 +68,7 @@ public AudioSamplePipeline(
       MuxerWrapper muxerWrapper,
       FallbackListener fallbackListener)
       throws ExportException {
-    super(firstInputFormat, streamStartPositionUs, muxerWrapper);
+    super(firstInputFormat, /* streamStartPositionUs= */ streamOffsetUs, muxerWrapper);
 
     silentAudioGenerator = new SilentAudioGenerator(firstInputFormat);
     availableInputBuffers = new ConcurrentLinkedDeque<>();

File: libraries/transformer/src/main/java/androidx/media3/transformer/CompositeAssetLoader.java
Patch:
@@ -196,7 +196,7 @@ public SampleConsumer onTrackAdded(
                 compositeAssetLoaderListener.onTrackAdded(
                     firstAudioFormat,
                     SUPPORTED_OUTPUT_TYPE_DECODED,
-                    /* streamStartPositionUs= */ streamOffsetUs,
+                    streamStartPositionUs,
                     streamOffsetUs));
         sampleConsumersByTrackType.put(C.TRACK_TYPE_AUDIO, audioSampleConsumer);
       }

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerInternal.java
Patch:
@@ -434,7 +434,6 @@ private SamplePipeline getSamplePipeline(
         if (MimeTypes.isAudio(firstInputFormat.sampleMimeType)) {
           return new AudioSamplePipeline(
               firstInputFormat,
-              streamStartPositionUs,
               streamOffsetUs,
               transformationRequest,
               firstEditedMediaItem.flattenForSlowMotion,

File: libraries/common/src/main/java/androidx/media3/common/DebugViewProvider.java
Patch:
@@ -19,7 +19,7 @@
 import androidx.annotation.Nullable;
 import androidx.media3.common.util.UnstableApi;
 
-/** Provider for views to show diagnostic information during a transformation, for debugging. */
+/** Provider for views to show diagnostic information during an export, for debugging. */
 @UnstableApi
 public interface DebugViewProvider {
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/ExoAssetLoaderBaseRenderer.java
Patch:
@@ -136,7 +136,7 @@ protected void onReset() {
   }
 
   /** Overrides the {@code inputFormat}. */
-  protected Format overrideFormat(Format inputFormat) throws ExportException {
+  protected Format overrideFormat(Format inputFormat) {
     return inputFormat;
   }
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformationRequest.java
Patch:
@@ -90,13 +90,13 @@ public final class TransformationRequest {
   /**
    * Interpret HDR input as SDR, likely with a washed out look.
    *
-   * <p>Supported on API 29+.
-   *
    * <p>This is much more widely supported than {@link #HDR_MODE_KEEP_HDR} and {@link
    * #HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_MEDIACODEC}. However, as HDR transfer functions and
    * metadata will be ignored, contents will be displayed incorrectly, likely with a washed out
    * look.
    *
+   * <p>Using this API may lead to codec errors before API 29, per b/269759013.
+   *
    * <p>Use of this flag may result in {@code ERROR_CODE_DECODING_FORMAT_UNSUPPORTED}.
    *
    * <p>This field is experimental, and will be renamed or removed in a future release.

File: library/common/src/main/java/com/google/android/exoplayer2/util/NetworkTypeObserver.java
Patch:
@@ -93,7 +93,7 @@ private NetworkTypeObserver(Context context) {
     networkType = C.NETWORK_TYPE_UNKNOWN;
     IntentFilter filter = new IntentFilter();
     filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
-    Util.registerReceiverNotExported(context, new Receiver(), filter);
+    context.registerReceiver(new Receiver(), filter);
   }
 
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/AudioBecomingNoisyManager.java
Patch:
@@ -21,7 +21,6 @@
 import android.content.IntentFilter;
 import android.media.AudioManager;
 import android.os.Handler;
-import com.google.android.exoplayer2.util.Util;
 
 /* package */ final class AudioBecomingNoisyManager {
 
@@ -47,8 +46,8 @@ public AudioBecomingNoisyManager(Context context, Handler eventHandler, EventLis
    */
   public void setEnabled(boolean enabled) {
     if (enabled && !receiverRegistered) {
-      Util.registerReceiverNotExported(
-          context, receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
+      context.registerReceiver(
+          receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
       receiverRegistered = true;
     } else if (!enabled && receiverRegistered) {
       context.unregisterReceiver(receiver);

File: library/core/src/main/java/com/google/android/exoplayer2/StreamVolumeManager.java
Patch:
@@ -74,7 +74,7 @@ public StreamVolumeManager(Context context, Handler eventHandler, Listener liste
     VolumeChangeReceiver receiver = new VolumeChangeReceiver();
     IntentFilter filter = new IntentFilter(VOLUME_CHANGED_ACTION);
     try {
-      Util.registerReceiverNotExported(applicationContext, receiver, filter);
+      applicationContext.registerReceiver(receiver, filter);
       this.receiver = receiver;
     } catch (RuntimeException e) {
       Log.w(TAG, "Error registering stream volume receiver", e);

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioCapabilities.java
Patch:
@@ -88,8 +88,8 @@ public final class AudioCapabilities {
   @SuppressWarnings("InlinedApi")
   public static AudioCapabilities getCapabilities(Context context) {
     Intent intent =
-        Util.registerReceiverNotExported(
-            context, /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
+        context.registerReceiver(
+            /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
     return getCapabilities(context, intent);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioCapabilitiesReceiver.java
Patch:
@@ -91,7 +91,9 @@ public AudioCapabilities register() {
     @Nullable Intent stickyIntent = null;
     if (receiver != null) {
       IntentFilter intentFilter = new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG);
-      stickyIntent = Util.registerReceiverNotExported(context, receiver, intentFilter, handler);
+      stickyIntent =
+          context.registerReceiver(
+              receiver, intentFilter, /* broadcastPermission= */ null, handler);
     }
     audioCapabilities = AudioCapabilities.getCapabilities(context, stickyIntent);
     return audioCapabilities;

File: library/core/src/main/java/com/google/android/exoplayer2/scheduler/RequirementsWatcher.java
Patch:
@@ -109,7 +109,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
       filter.addAction(Intent.ACTION_DEVICE_STORAGE_OK);
     }
     receiver = new DeviceStatusChangeReceiver();
-    Util.registerReceiverNotExported(context, receiver, filter, handler);
+    context.registerReceiver(receiver, filter, /* broadcastPermission= */ null, handler);
     return notMetRequirements;
   }
 

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/ToneMapHdrToSdrUsingOpenGlPixelTest.java
Patch:
@@ -69,7 +69,7 @@ public final class ToneMapHdrToSdrUsingOpenGlPixelTest {
   /** Input HLG video of which we only use the first frame. */
   private static final String INPUT_HLG_MP4_ASSET_STRING = "media/mp4/hlg-1080p.mp4";
   /** Input PQ video of which we only use the first frame. */
-  private static final String INPUT_PQ_MP4_ASSET_STRING = "media/mp4/hdr10-1080p.mp4";
+  private static final String INPUT_PQ_MP4_ASSET_STRING = "media/mp4/hdr10-720p.mp4";
 
   private static final String SKIP_REASON_NO_OPENGL_UNDER_API_29 =
       "OpenGL-based HDR to SDR tone mapping is unsupported below API 29.";

File: libraries/effect/src/main/java/androidx/media3/effect/GlMatrixTransformation.java
Patch:
@@ -55,7 +55,7 @@ default Size configure(int inputWidth, int inputHeight) {
   @Override
   default SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
       throws VideoFrameProcessingException {
-    return MatrixShaderProgram.create(
+    return DefaultShaderProgram.create(
         context,
         /* matrixTransformations= */ ImmutableList.of(this),
         /* rgbMatrices= */ ImmutableList.of(),

File: libraries/effect/src/main/java/androidx/media3/effect/RgbMatrix.java
Patch:
@@ -42,7 +42,7 @@ public interface RgbMatrix extends GlEffect {
   @Override
   default SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
       throws VideoFrameProcessingException {
-    return MatrixShaderProgram.create(
+    return DefaultShaderProgram.create(
         context,
         /* matrixTransformations= */ ImmutableList.of(),
         /* rgbMatrices= */ ImmutableList.of(this),

File: libraries/effect/src/test/java/androidx/media3/effect/ScaleAndRotateTransformationTest.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Unit tests for {@link ScaleAndRotateTransformation}.
  *
- * <p>See {@code MatrixShaderProgramPixelTest} for pixel tests testing {@link MatrixShaderProgram}
+ * <p>See {@code DefaultShaderProgramPixelTest} for pixel tests testing {@link DefaultShaderProgram}
  * given a transformation matrix.
  */
 @RunWith(AndroidJUnit4.class)

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/VideoFrameProcessorTestRunner.java
Patch:
@@ -69,7 +69,7 @@ public static final class Builder {
     public Builder() {
       pixelWidthHeightRatio = DEFAULT_PIXEL_WIDTH_HEIGHT_RATIO;
       isInputTextureExternal = true;
-      onOutputFrameAvailableListener = (unused) -> {};
+      onOutputFrameAvailableListener = unused -> {};
     }
 
     /**
@@ -191,7 +191,7 @@ public Builder setIsInputTextureExternal(boolean isInputTextureExternal) {
      * <p>The default value is a no-op.
      */
     @CanIgnoreReturnValue
-    public Builder setOnFrameAvailableListener(
+    public Builder setOnOutputFrameAvailableListener(
         OnOutputFrameAvailableListener onOutputFrameAvailableListener) {
       this.onOutputFrameAvailableListener = onOutputFrameAvailableListener;
       return this;

File: libraries/cast/src/main/java/androidx/media3/cast/CastPlayer.java
Patch:
@@ -1237,6 +1237,7 @@ private static int fetchPlaybackState(RemoteMediaClient remoteMediaClient) {
     int receiverAppStatus = remoteMediaClient.getPlayerState();
     switch (receiverAppStatus) {
       case MediaStatus.PLAYER_STATE_BUFFERING:
+      case MediaStatus.PLAYER_STATE_LOADING:
         return STATE_BUFFERING;
       case MediaStatus.PLAYER_STATE_PLAYING:
       case MediaStatus.PLAYER_STATE_PAUSED:
@@ -1299,6 +1300,7 @@ private static boolean isTrackActive(long id, long[] activeTrackIds) {
     return false;
   }
 
+  @SuppressWarnings("VisibleForTests")
   private static int getCastRepeatMode(@RepeatMode int repeatMode) {
     switch (repeatMode) {
       case REPEAT_MODE_ONE:

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/ToneMapHdrToSdrUsingMediaCodecTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.google.android.exoplayer2.transformer.mh;
 
-import static com.google.android.exoplayer2.transformer.AndroidTestUtil.MP4_ASSET_1080P_4_SECOND_HDR10;
 import static com.google.android.exoplayer2.transformer.AndroidTestUtil.MP4_ASSET_1080P_5_SECOND_HLG10;
+import static com.google.android.exoplayer2.transformer.AndroidTestUtil.MP4_ASSET_720P_4_SECOND_HDR10;
 import static com.google.android.exoplayer2.transformer.mh.FileUtil.maybeAssertFileHasColorTransfer;
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.common.truth.Truth.assertThat;
@@ -75,7 +75,7 @@ public void onFallbackApplied(
                   }
                 })
             .build();
-    MediaItem mediaItem = MediaItem.fromUri(Uri.parse(MP4_ASSET_1080P_4_SECOND_HDR10));
+    MediaItem mediaItem = MediaItem.fromUri(Uri.parse(MP4_ASSET_720P_4_SECOND_HDR10));
 
     try {
       ExportTestResult exportTestResult =
@@ -159,7 +159,7 @@ public void onFallbackApplied(
                   }
                 })
             .build();
-    MediaItem mediaItem = MediaItem.fromUri(Uri.parse(MP4_ASSET_1080P_4_SECOND_HDR10));
+    MediaItem mediaItem = MediaItem.fromUri(Uri.parse(MP4_ASSET_720P_4_SECOND_HDR10));
     ImmutableList<Effect> videoEffects =
         ImmutableList.of(
             new ScaleAndRotateTransformation.Builder().setRotationDegrees(180).build());

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/ToneMapHdrToSdrUsingOpenGlPixelTest.java
Patch:
@@ -18,8 +18,8 @@
 import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
 import static com.google.android.exoplayer2.testutil.BitmapPixelTestUtil.getBitmapAveragePixelAbsoluteDifferenceArgb8888;
 import static com.google.android.exoplayer2.testutil.BitmapPixelTestUtil.readBitmap;
-import static com.google.android.exoplayer2.transformer.AndroidTestUtil.MP4_ASSET_1080P_4_SECOND_HDR10_FORMAT;
 import static com.google.android.exoplayer2.transformer.AndroidTestUtil.MP4_ASSET_1080P_5_SECOND_HLG10_FORMAT;
+import static com.google.android.exoplayer2.transformer.AndroidTestUtil.MP4_ASSET_720P_4_SECOND_HDR10_FORMAT;
 import static com.google.android.exoplayer2.transformer.AndroidTestUtil.recordTestSkipped;
 import static com.google.android.exoplayer2.transformer.AndroidTestUtil.skipAndLogIfFormatsUnsupported;
 import static com.google.common.truth.Truth.assertThat;
@@ -161,7 +161,7 @@ public void toneMap_pqFrame_matchesGoldenFile() throws Exception {
     if (skipAndLogIfFormatsUnsupported(
         getApplicationContext(),
         testId,
-        /* inputFormat= */ MP4_ASSET_1080P_4_SECOND_HDR10_FORMAT,
+        /* inputFormat= */ MP4_ASSET_720P_4_SECOND_HDR10_FORMAT,
         /* outputFormat= */ null)) {
       return;
     }

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/GlEffect.java
Patch:
@@ -49,9 +49,6 @@ GlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
    * @param inputHeight The input frame height, in pixels.
    */
   default boolean isNoOp(int inputWidth, int inputHeight) {
-    // TODO(b/265927935): Generalize this logic by implementing this method on all
-    //  subclasses, and deleting the default implementation here. Otherwise, some no-op effects may
-    //  not be properly detected or handled.
     return false;
   }
 }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/AudioSamplePipeline.java
Patch:
@@ -60,7 +60,6 @@
   // TODO(b/260618558): Move silent audio generation upstream of this component.
   public AudioSamplePipeline(
       Format firstInputFormat,
-      long streamStartPositionUs,
       long streamOffsetUs,
       TransformationRequest transformationRequest,
       boolean flattenForSlowMotion,
@@ -69,7 +68,7 @@ public AudioSamplePipeline(
       MuxerWrapper muxerWrapper,
       FallbackListener fallbackListener)
       throws ExportException {
-    super(firstInputFormat, streamStartPositionUs, muxerWrapper);
+    super(firstInputFormat, /* streamStartPositionUs= */ streamOffsetUs, muxerWrapper);
 
     silentAudioGenerator = new SilentAudioGenerator(firstInputFormat);
     availableInputBuffers = new ConcurrentLinkedDeque<>();

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/CompositeAssetLoader.java
Patch:
@@ -196,7 +196,7 @@ public SampleConsumer onTrackAdded(
                 compositeAssetLoaderListener.onTrackAdded(
                     firstAudioFormat,
                     SUPPORTED_OUTPUT_TYPE_DECODED,
-                    /* streamStartPositionUs= */ streamOffsetUs,
+                    streamStartPositionUs,
                     streamOffsetUs));
         sampleConsumersByTrackType.put(C.TRACK_TYPE_AUDIO, audioSampleConsumer);
       }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerInternal.java
Patch:
@@ -434,7 +434,6 @@ private SamplePipeline getSamplePipeline(
         if (MimeTypes.isAudio(firstInputFormat.sampleMimeType)) {
           return new AudioSamplePipeline(
               firstInputFormat,
-              streamStartPositionUs,
               streamOffsetUs,
               transformationRequest,
               firstEditedMediaItem.flattenForSlowMotion,

File: library/common/src/main/java/com/google/android/exoplayer2/util/DebugViewProvider.java
Patch:
@@ -18,7 +18,7 @@
 import android.view.SurfaceView;
 import androidx.annotation.Nullable;
 
-/** Provider for views to show diagnostic information during a transformation, for debugging. */
+/** Provider for views to show diagnostic information during an export, for debugging. */
 public interface DebugViewProvider {
 
   /** Debug view provider that doesn't show any debug info. */

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExoAssetLoaderBaseRenderer.java
Patch:
@@ -136,7 +136,7 @@ protected void onReset() {
   }
 
   /** Overrides the {@code inputFormat}. */
-  protected Format overrideFormat(Format inputFormat) throws ExportException {
+  protected Format overrideFormat(Format inputFormat) {
     return inputFormat;
   }
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformationRequest.java
Patch:
@@ -88,13 +88,13 @@ public final class TransformationRequest {
   /**
    * Interpret HDR input as SDR, likely with a washed out look.
    *
-   * <p>Supported on API 29+.
-   *
    * <p>This is much more widely supported than {@link #HDR_MODE_KEEP_HDR} and {@link
    * #HDR_MODE_TONE_MAP_HDR_TO_SDR_USING_MEDIACODEC}. However, as HDR transfer functions and
    * metadata will be ignored, contents will be displayed incorrectly, likely with a washed out
    * look.
    *
+   * <p>Using this API may lead to codec errors before API 29, per b/269759013.
+   *
    * <p>Use of this flag may result in {@code ERROR_CODE_DECODING_FORMAT_UNSUPPORTED}.
    *
    * <p>This field is experimental, and will be renamed or removed in a future release.

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/GlMatrixTransformation.java
Patch:
@@ -53,7 +53,7 @@ default Size configure(int inputWidth, int inputHeight) {
   @Override
   default SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
       throws VideoFrameProcessingException {
-    return MatrixShaderProgram.create(
+    return DefaultShaderProgram.create(
         context,
         /* matrixTransformations= */ ImmutableList.of(this),
         /* rgbMatrices= */ ImmutableList.of(),

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/RgbMatrix.java
Patch:
@@ -40,7 +40,7 @@ public interface RgbMatrix extends GlEffect {
   @Override
   default SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
       throws VideoFrameProcessingException {
-    return MatrixShaderProgram.create(
+    return DefaultShaderProgram.create(
         context,
         /* matrixTransformations= */ ImmutableList.of(),
         /* rgbMatrices= */ ImmutableList.of(this),

File: library/effect/src/test/java/com/google/android/exoplayer2/effect/ScaleAndRotateTransformationTest.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Unit tests for {@link ScaleAndRotateTransformation}.
  *
- * <p>See {@code MatrixShaderProgramPixelTest} for pixel tests testing {@link MatrixShaderProgram}
+ * <p>See {@code DefaultShaderProgramPixelTest} for pixel tests testing {@link DefaultShaderProgram}
  * given a transformation matrix.
  */
 @RunWith(AndroidJUnit4.class)

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/VideoFrameProcessorTestRunner.java
Patch:
@@ -67,7 +67,7 @@ public static final class Builder {
     public Builder() {
       pixelWidthHeightRatio = DEFAULT_PIXEL_WIDTH_HEIGHT_RATIO;
       isInputTextureExternal = true;
-      onOutputFrameAvailableListener = (unused) -> {};
+      onOutputFrameAvailableListener = unused -> {};
     }
 
     /**
@@ -189,7 +189,7 @@ public Builder setIsInputTextureExternal(boolean isInputTextureExternal) {
      * <p>The default value is a no-op.
      */
     @CanIgnoreReturnValue
-    public Builder setOnFrameAvailableListener(
+    public Builder setOnOutputFrameAvailableListener(
         OnOutputFrameAvailableListener onOutputFrameAvailableListener) {
       this.onOutputFrameAvailableListener = onOutputFrameAvailableListener;
       return this;

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
Patch:
@@ -1235,6 +1235,7 @@ private static int fetchPlaybackState(RemoteMediaClient remoteMediaClient) {
     int receiverAppStatus = remoteMediaClient.getPlayerState();
     switch (receiverAppStatus) {
       case MediaStatus.PLAYER_STATE_BUFFERING:
+      case MediaStatus.PLAYER_STATE_LOADING:
         return STATE_BUFFERING;
       case MediaStatus.PLAYER_STATE_PLAYING:
       case MediaStatus.PLAYER_STATE_PAUSED:
@@ -1297,6 +1298,7 @@ private static boolean isTrackActive(long id, long[] activeTrackIds) {
     return false;
   }
 
+  @SuppressWarnings("VisibleForTests")
   private static int getCastRepeatMode(@RepeatMode int repeatMode) {
     switch (repeatMode) {
       case REPEAT_MODE_ONE:

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/ForceInterpretHdrVideoAsSdrTest.java
Patch:
@@ -19,7 +19,7 @@
 import static com.google.android.exoplayer2.transformer.AndroidTestUtil.MP4_ASSET_1080P_4_SECOND_HDR10_FORMAT;
 import static com.google.android.exoplayer2.transformer.AndroidTestUtil.MP4_ASSET_1080P_5_SECOND_HLG10;
 import static com.google.android.exoplayer2.transformer.AndroidTestUtil.MP4_ASSET_1080P_5_SECOND_HLG10_FORMAT;
-import static com.google.android.exoplayer2.transformer.mh.FileUtil.assertFileHasColorTransfer;
+import static com.google.android.exoplayer2.transformer.mh.FileUtil.maybeAssertFileHasColorTransfer;
 
 import android.content.Context;
 import android.net.Uri;
@@ -73,7 +73,7 @@ public void forceInterpretHdrVideoAsSdrTest_hdr10File_transformsOrThrows() throw
           new TransformerAndroidTestRunner.Builder(context, transformer)
               .build()
               .run(testId, mediaItem);
-      assertFileHasColorTransfer(exportTestResult.filePath, C.COLOR_TRANSFER_SDR);
+      maybeAssertFileHasColorTransfer(exportTestResult.filePath, C.COLOR_TRANSFER_SDR);
       Log.i(TAG, "Transformed.");
     } catch (ExportException exception) {
       if (exception.errorCode != ExportException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED) {
@@ -109,7 +109,7 @@ public void forceInterpretHdrVideoAsSdrTest_hlg10File_transformsOrThrows() throw
           new TransformerAndroidTestRunner.Builder(context, transformer)
               .build()
               .run(testId, mediaItem);
-      assertFileHasColorTransfer(exportTestResult.filePath, C.COLOR_TRANSFER_SDR);
+      maybeAssertFileHasColorTransfer(exportTestResult.filePath, C.COLOR_TRANSFER_SDR);
       Log.i(TAG, "Transformed.");
     } catch (ExportException exception) {
       if (exception.errorCode != ExportException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED) {

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExportException.java
Patch:
@@ -262,7 +262,7 @@ public static ExportException createForCodec(
    */
   public static ExportException createForAudioProcessing(Throwable cause, AudioFormat audioFormat) {
     return new ExportException(
-        "Audio processing error, audio_format = " + audioFormat,
+        "Audio processing error, audio_format=" + audioFormat,
         cause,
         ERROR_CODE_AUDIO_PROCESSING_FAILED);
   }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformationException.java
Patch:
@@ -266,7 +266,7 @@ public static TransformationException createForCodec(
   public static TransformationException createForAudioProcessing(
       Throwable cause, AudioFormat audioFormat) {
     return new TransformationException(
-        "Audio processing error, audio_format = " + audioFormat,
+        "Audio processing error, audio_format=" + audioFormat,
         cause,
         ERROR_CODE_AUDIO_PROCESSING_FAILED);
   }

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/ExoPlayerAssetLoaderTest.java
Patch:
@@ -119,7 +119,8 @@ private static AssetLoader getAssetLoader(
     Codec.DecoderFactory decoderFactory = new DefaultDecoderFactory(context);
     EditedMediaItem editedMediaItem =
         new EditedMediaItem.Builder(MediaItem.fromUri("asset:///media/mp4/sample.mp4")).build();
-    return new ExoPlayerAssetLoader.Factory(context, decoderFactory, clock)
+    return new ExoPlayerAssetLoader.Factory(
+            context, decoderFactory, /* forceInterpretHdrAsSdr= */ false, clock)
         .createAssetLoader(editedMediaItem, looper, listener);
   }
 

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/DefaultVideoFrameProcessor.java
Patch:
@@ -124,7 +124,7 @@ public DefaultVideoFrameProcessor create(
 
       ExecutorService singleThreadExecutorService = Util.newSingleThreadExecutor(THREAD_NAME);
 
-      Future<DefaultVideoFrameProcessor> glFrameProcessorFuture =
+      Future<DefaultVideoFrameProcessor> defaultVideoFrameProcessorFuture =
           singleThreadExecutorService.submit(
               () ->
                   createOpenGlObjectsAndFrameProcessor(
@@ -140,7 +140,7 @@ public DefaultVideoFrameProcessor create(
                       listener));
 
       try {
-        return glFrameProcessorFuture.get();
+        return defaultVideoFrameProcessorFuture.get();
       } catch (ExecutionException e) {
         throw new VideoFrameProcessingException(e);
       } catch (InterruptedException e) {

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/ExternalTextureManager.java
Patch:
@@ -107,7 +107,7 @@ public ExternalTextureManager(
     surface = new Surface(surfaceTexture);
   }
 
-  /** See {@link GlEffectsFrameProcessor#setInputDefaultBufferSize}. */
+  /** See {@link DefaultVideoFrameProcessor#setInputDefaultBufferSize}. */
   public void setDefaultBufferSize(int width, int height) {
     surfaceTexture.setDefaultBufferSize(width, height);
   }

File: library/core/src/test/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecCallbackTest.java
Patch:
@@ -460,6 +460,7 @@ private static MediaCodec.CodecException createCodecException() throws Exception
     Constructor<MediaCodec.CodecException> constructor =
         MediaCodec.CodecException.class.getDeclaredConstructor(
             Integer.TYPE, Integer.TYPE, String.class);
+    constructor.setAccessible(true);
     return constructor.newInstance(
         /* errorCode= */ 0, /* actionCode= */ 0, /* detailMessage= */ "error from codec");
   }

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/CropPixelTest.java
Patch:
@@ -32,9 +32,9 @@
 import android.opengl.EGLSurface;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.testutil.BitmapPixelTestUtil;
-import com.google.android.exoplayer2.util.FrameProcessingException;
 import com.google.android.exoplayer2.util.GlUtil;
 import com.google.android.exoplayer2.util.Size;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 import java.io.IOException;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.junit.After;
@@ -48,7 +48,7 @@
  * <p>Expected images are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public final class CropPixelTest {
@@ -82,7 +82,7 @@ public void createGlObjects() throws IOException, GlUtil.GlException {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (cropShaderProgram != null) {
       cropShaderProgram.release();
     }

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/HslAdjustmentPixelTest.java
Patch:
@@ -34,9 +34,9 @@
 import android.opengl.EGLSurface;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.testutil.BitmapPixelTestUtil;
-import com.google.android.exoplayer2.util.FrameProcessingException;
 import com.google.android.exoplayer2.util.GlUtil;
 import com.google.android.exoplayer2.util.Size;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 import java.io.IOException;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.junit.After;
@@ -50,7 +50,7 @@
  * <p>Expected images are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public final class HslAdjustmentPixelTest {
@@ -100,7 +100,7 @@ public void createGlObjects() throws IOException, GlUtil.GlException {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (hslProcessor != null) {
       hslProcessor.release();
     }

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/MatrixShaderProgramPixelTest.java
Patch:
@@ -32,8 +32,8 @@
 import android.opengl.EGLSurface;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.testutil.BitmapPixelTestUtil;
-import com.google.android.exoplayer2.util.FrameProcessingException;
 import com.google.android.exoplayer2.util.GlUtil;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 import java.io.IOException;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.junit.After;
@@ -47,7 +47,7 @@
  * <p>Expected images are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public final class MatrixShaderProgramPixelTest {
@@ -87,7 +87,7 @@ public void createGlObjects() throws IOException, GlUtil.GlException {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (matrixShaderProgram != null) {
       matrixShaderProgram.release();
     }

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/OverlayShaderProgramPixelTest.java
Patch:
@@ -37,9 +37,9 @@
 import android.text.style.ForegroundColorSpan;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.testutil.BitmapPixelTestUtil;
-import com.google.android.exoplayer2.util.FrameProcessingException;
 import com.google.android.exoplayer2.util.GlUtil;
 import com.google.android.exoplayer2.util.Size;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 import com.google.common.collect.ImmutableList;
 import java.io.IOException;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
@@ -54,7 +54,7 @@
  * <p>Expected bitmaps are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public class OverlayShaderProgramPixelTest {
@@ -101,7 +101,7 @@ public void createGlObjects() throws IOException, GlUtil.GlException {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (overlayShaderProgram != null) {
       overlayShaderProgram.release();
     }

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/PresentationPixelTest.java
Patch:
@@ -33,9 +33,9 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.testutil.BitmapPixelTestUtil;
-import com.google.android.exoplayer2.util.FrameProcessingException;
 import com.google.android.exoplayer2.util.GlUtil;
 import com.google.android.exoplayer2.util.Size;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 import java.io.IOException;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.junit.After;
@@ -49,7 +49,7 @@
  * <p>Expected images are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public final class PresentationPixelTest {
@@ -91,7 +91,7 @@ public void createGlObjects() throws IOException, GlUtil.GlException {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (presentationShaderProgram != null) {
       presentationShaderProgram.release();
     }

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/RgbAdjustmentPixelTest.java
Patch:
@@ -35,9 +35,9 @@
 import android.opengl.EGLSurface;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.testutil.BitmapPixelTestUtil;
-import com.google.android.exoplayer2.util.FrameProcessingException;
 import com.google.android.exoplayer2.util.GlUtil;
 import com.google.android.exoplayer2.util.Size;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 import com.google.common.collect.ImmutableList;
 import java.io.IOException;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
@@ -52,7 +52,7 @@
  * <p>Expected images are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public final class RgbAdjustmentPixelTest {
@@ -99,7 +99,7 @@ public void createGlObjects() throws IOException, GlUtil.GlException {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (matrixShaderProgram != null) {
       matrixShaderProgram.release();
     }

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/RgbFilterPixelTest.java
Patch:
@@ -33,9 +33,9 @@
 import android.opengl.EGLSurface;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.testutil.BitmapPixelTestUtil;
-import com.google.android.exoplayer2.util.FrameProcessingException;
 import com.google.android.exoplayer2.util.GlUtil;
 import com.google.android.exoplayer2.util.Size;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 import java.io.IOException;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.junit.After;
@@ -49,7 +49,7 @@
  * <p>Expected images are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public final class RgbFilterPixelTest {
@@ -94,7 +94,7 @@ public void createGlObjects() throws IOException, GlUtil.GlException {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (matrixShaderProgram != null) {
       matrixShaderProgram.release();
     }

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/SingleColorLutPixelTest.java
Patch:
@@ -34,9 +34,9 @@
 import android.opengl.EGLSurface;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.testutil.BitmapPixelTestUtil;
-import com.google.android.exoplayer2.util.FrameProcessingException;
 import com.google.android.exoplayer2.util.GlUtil;
 import com.google.android.exoplayer2.util.Size;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.junit.After;
 import org.junit.Before;
@@ -49,7 +49,7 @@
  * <p>Expected images are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public class SingleColorLutPixelTest {
@@ -88,7 +88,7 @@ public void createGlObjects() throws Exception {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (colorLutShaderProgram != null) {
       colorLutShaderProgram.release();
     }

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/ColorLut.java
Patch:
@@ -18,8 +18,8 @@
 
 import android.content.Context;
 import androidx.annotation.WorkerThread;
-import com.google.android.exoplayer2.util.FrameProcessingException;
 import com.google.android.exoplayer2.util.GlUtil;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 
 /**
  * Specifies color transformations using color lookup tables to apply to each frame in the fragment
@@ -43,7 +43,7 @@ public interface ColorLut extends GlEffect {
   @Override
   @WorkerThread
   default SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     return new ColorLutShaderProgram(context, /* colorLut= */ this, useHdr);
   }
 }

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/Contrast.java
Patch:
@@ -19,7 +19,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
 
 import android.content.Context;
-import com.google.android.exoplayer2.util.FrameProcessingException;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 
 /** A {@link GlEffect} to control the contrast of video frames. */
 public class Contrast implements GlEffect {
@@ -40,7 +40,7 @@ public Contrast(float contrast) {
 
   @Override
   public SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     return new ContrastShaderProgram(context, this, useHdr);
   }
 }

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/FrameCache.java
Patch:
@@ -19,13 +19,13 @@
 
 import android.content.Context;
 import androidx.annotation.IntRange;
-import com.google.android.exoplayer2.util.FrameProcessingException;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 
 /**
  * Caches the input frames.
  *
  * <p>Example usage: cache the processed frames when presenting them on screen, to accommodate for
- * the possible fluctuation in frame processing time between frames.
+ * the possible fluctuation in video frame processing time between frames.
  */
 public final class FrameCache implements GlEffect {
   /** The capacity of the frame cache. */
@@ -49,7 +49,7 @@ public FrameCache(@IntRange(from = 1, to = 8) int capacity) {
 
   @Override
   public GlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     return new FrameCacheShaderProgram(context, capacity, useHdr);
   }
 }

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/GlMatrixTransformation.java
Patch:
@@ -17,8 +17,8 @@
 
 import android.content.Context;
 import android.opengl.Matrix;
-import com.google.android.exoplayer2.util.FrameProcessingException;
 import com.google.android.exoplayer2.util.Size;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 import com.google.common.collect.ImmutableList;
 
 /**
@@ -52,7 +52,7 @@ default Size configure(int inputWidth, int inputHeight) {
 
   @Override
   default SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     return MatrixShaderProgram.create(
         context,
         /* matrixTransformations= */ ImmutableList.of(this),

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/HslAdjustment.java
Patch:
@@ -19,7 +19,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
 
 import android.content.Context;
-import com.google.android.exoplayer2.util.FrameProcessingException;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 
 /** Adjusts the HSL (Hue, Saturation, and Lightness) of a frame. */
@@ -112,7 +112,7 @@ private HslAdjustment(
 
   @Override
   public SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     return new HslShaderProgram(context, /* hslAdjustment= */ this, useHdr);
   }
 }

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/OverlayEffect.java
Patch:
@@ -16,7 +16,7 @@
 package com.google.android.exoplayer2.effect;
 
 import android.content.Context;
-import com.google.android.exoplayer2.util.FrameProcessingException;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 import com.google.common.collect.ImmutableList;
 
 /**
@@ -38,7 +38,7 @@ public OverlayEffect(ImmutableList<TextureOverlay> textureOverlays) {
 
   @Override
   public SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     return new OverlayShaderProgram(context, useHdr, overlays);
   }
 }

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/RgbFilter.java
Patch:
@@ -19,7 +19,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 
 import android.content.Context;
-import com.google.android.exoplayer2.util.FrameProcessingException;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /** Provides common color filters. */
@@ -90,7 +90,7 @@ public float[] getMatrix(long presentationTimeUs, boolean useHdr) {
 
   @Override
   public SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     checkForConsistentHdrSetting(useHdr);
     return RgbMatrix.super.toGlShaderProgram(context, useHdr);
   }

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/RgbMatrix.java
Patch:
@@ -17,7 +17,7 @@
 package com.google.android.exoplayer2.effect;
 
 import android.content.Context;
-import com.google.android.exoplayer2.util.FrameProcessingException;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 import com.google.common.collect.ImmutableList;
 
 /**
@@ -39,7 +39,7 @@ public interface RgbMatrix extends GlEffect {
 
   @Override
   default SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     return MatrixShaderProgram.create(
         context,
         /* matrixTransformations= */ ImmutableList.of(),

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/SingleColorLut.java
Patch:
@@ -24,9 +24,9 @@
 import android.opengl.GLES20;
 import android.opengl.GLUtils;
 import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.util.FrameProcessingException;
 import com.google.android.exoplayer2.util.GlUtil;
 import com.google.android.exoplayer2.util.Util;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 
 /** Transforms the colors of a frame by applying the same color lookup table to each frame. */
 public class SingleColorLut implements ColorLut {
@@ -148,13 +148,13 @@ public void release() throws GlUtil.GlException {
 
   @Override
   public SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     checkState(!useHdr, "HDR is currently not supported.");
 
     try {
       lutTextureId = storeLutAsTexture(lut);
     } catch (GlUtil.GlException e) {
-      throw new FrameProcessingException("Could not store the LUT as a texture.", e);
+      throw new VideoFrameProcessingException("Could not store the LUT as a texture.", e);
     }
 
     return new ColorLutShaderProgram(context, /* colorLut= */ this, useHdr);

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/TextureOverlay.java
Patch:
@@ -15,18 +15,18 @@
  */
 package com.google.android.exoplayer2.effect;
 
-import com.google.android.exoplayer2.util.FrameProcessingException;
 import com.google.android.exoplayer2.util.Size;
+import com.google.android.exoplayer2.util.VideoFrameProcessingException;
 
 /** Creates overlays from OpenGL textures. */
 public abstract class TextureOverlay {
   /**
    * Returns the overlay texture identifier displayed at the specified timestamp.
    *
    * @param presentationTimeUs The presentation timestamp of the current frame, in microseconds.
-   * @throws FrameProcessingException If an error occurs while processing or drawing the frame.
+   * @throws VideoFrameProcessingException If an error occurs while processing or drawing the frame.
    */
-  public abstract int getTextureId(long presentationTimeUs) throws FrameProcessingException;
+  public abstract int getTextureId(long presentationTimeUs) throws VideoFrameProcessingException;
 
   // This method is required to find the size of a texture given a texture identifier using OpenGL
   // ES 2.0. OpenGL ES 3.1 can do this with glGetTexLevelParameteriv().

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerInternal.java
Patch:
@@ -498,7 +498,7 @@ private SamplePipeline getSamplePipeline(
             streamOffsetUs,
             transformationRequest,
             firstEditedMediaItem.effects.videoEffects,
-            firstEditedMediaItem.effects.frameProcessorFactory,
+            firstEditedMediaItem.effects.videoFrameProcessorFactory,
             encoderFactory,
             muxerWrapper,
             /* errorConsumer= */ this::onError,

File: library/common/src/main/java/com/google/android/exoplayer2/util/FrameProcessor.java
Patch:
@@ -136,6 +136,7 @@ interface Listener {
    * @param inputBitmap The {@link Bitmap} queued to the {@link FrameProcessor}.
    * @param durationUs The duration for which to display the {@code inputBitmap}, in microseconds.
    * @param frameRate The frame rate at which to display the {@code inputBitmap}, in frames per
+   *     second.
    */
   // TODO(b/262693274): Remove duration and frameRate parameters when EditedMediaItem can be
   //  signalled down to the processors.

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/CropPixelTest.java
Patch:
@@ -106,7 +106,7 @@ public void drawFrame_noEdits_matchesGoldenFile() throws Exception {
         createArgb8888BitmapFromCurrentGlFramebuffer(outputSize.getWidth(), outputSize.getHeight());
 
     maybeSaveTestBitmapToCacheDirectory(testId, /* bitmapLabel= */ "actual", actualBitmap);
-    // TODO(b/207848601): switch to using proper tooling for testing against golden data.
+    // TODO(b/207848601): Switch to using proper tooling for testing against golden data.
     float averagePixelAbsoluteDifference =
         getBitmapAveragePixelAbsoluteDifferenceArgb8888(expectedBitmap, actualBitmap, testId);
     assertThat(averagePixelAbsoluteDifference).isAtMost(MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE);
@@ -127,7 +127,7 @@ public void drawFrame_cropSmaller_matchesGoldenFile() throws Exception {
         createArgb8888BitmapFromCurrentGlFramebuffer(outputSize.getWidth(), outputSize.getHeight());
 
     maybeSaveTestBitmapToCacheDirectory(testId, /* bitmapLabel= */ "actual", actualBitmap);
-    // TODO(b/207848601): switch to using proper tooling for testing against golden data.
+    // TODO(b/207848601): Switch to using proper tooling for testing against golden data.
     float averagePixelAbsoluteDifference =
         getBitmapAveragePixelAbsoluteDifferenceArgb8888(expectedBitmap, actualBitmap, testId);
     assertThat(averagePixelAbsoluteDifference).isAtMost(MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE);
@@ -148,7 +148,7 @@ public void drawFrame_cropLarger_matchesGoldenFile() throws Exception {
         createArgb8888BitmapFromCurrentGlFramebuffer(outputSize.getWidth(), outputSize.getHeight());
 
     maybeSaveTestBitmapToCacheDirectory(testId, /* bitmapLabel= */ "actual", actualBitmap);
-    // TODO(b/207848601): switch to using proper tooling for testing against golden data.
+    // TODO(b/207848601): Switch to using proper tooling for testing against golden data.
     float averagePixelAbsoluteDifference =
         getBitmapAveragePixelAbsoluteDifferenceArgb8888(expectedBitmap, actualBitmap, testId);
     assertThat(averagePixelAbsoluteDifference).isAtMost(MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE);

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/ExternalTextureManager.java
Patch:
@@ -35,7 +35,7 @@
  * Forwards externally produced frames that become available via a {@link SurfaceTexture} to an
  * {@link ExternalShaderProgram} for consumption.
  */
-/* package */ class ExternalTextureManager implements InputListener {
+/* package */ final class ExternalTextureManager implements InputListener {
 
   private final FrameProcessingTaskExecutor frameProcessingTaskExecutor;
   private final ExternalShaderProgram externalShaderProgram;

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/FrameCache.java
Patch:
@@ -27,7 +27,7 @@
  * <p>Example usage: cache the processed frames when presenting them on screen, to accommodate for
  * the possible fluctuation in frame processing time between frames.
  */
-public class FrameCache implements GlEffect {
+public final class FrameCache implements GlEffect {
   /** The capacity of the frame cache. */
   public final int capacity;
 

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/FrameCacheShaderProgram.java
Patch:
@@ -35,7 +35,7 @@
  *
  * <p>Implements {@link FrameCache}.
  */
-/* package */ class FrameCacheShaderProgram implements GlShaderProgram {
+/* package */ final class FrameCacheShaderProgram implements GlShaderProgram {
   private static final String VERTEX_SHADER_TRANSFORMATION_ES2_PATH =
       "shaders/vertex_shader_transformation_es2.glsl";
   private static final String FRAGMENT_SHADER_TRANSFORMATION_ES2_PATH =

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/ToneMapHdrToSdrUsingOpenGlPixelTest.java
Patch:
@@ -139,7 +139,7 @@ public void toneMap_hlgFrame_matchesGoldenFile() throws Exception {
     }
 
     Log.i(TAG, "Successfully tone mapped.");
-    // TODO(b/207848601): switch to using proper tooling for testing against golden data.
+    // TODO(b/207848601): Switch to using proper tooling for testing against golden data.
     float averagePixelAbsoluteDifference =
         getBitmapAveragePixelAbsoluteDifferenceArgb8888(expectedBitmap, actualBitmap, testId);
     assertThat(averagePixelAbsoluteDifference)
@@ -202,7 +202,7 @@ public void toneMap_pqFrame_matchesGoldenFile() throws Exception {
     }
 
     Log.i(TAG, "Successfully tone mapped.");
-    // TODO(b/207848601): switch to using proper tooling for testing against golden data.
+    // TODO(b/207848601): Switch to using proper tooling for testing against golden data.
     float averagePixelAbsoluteDifference =
         getBitmapAveragePixelAbsoluteDifferenceArgb8888(expectedBitmap, actualBitmap, testId);
     assertThat(averagePixelAbsoluteDifference)

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -399,7 +399,7 @@ public Builder setDebugViewProvider(DebugViewProvider debugViewProvider) {
      *   <li>Duration will match duration of the input media.
      *   <li>Sample mime type will match {@link TransformationRequest#audioMimeType}, or {@link
      *       MimeTypes#AUDIO_AAC} if {@code null}.
-     *   <li>Sample rate will be {@code 44100} hz. This can be modified by creating a {@link
+     *   <li>Sample rate will be {@code 44100} Hz. This can be modified by creating a {@link
      *       SonicAudioProcessor}, setting its {@linkplain
      *       SonicAudioProcessor#setOutputSampleRateHz(int) sample rate}, and passing it to the
      *       {@link EditedMediaItem} used to start the export.
@@ -422,8 +422,8 @@ public Builder experimentalSetGenerateSilentAudio(boolean generateSilentAudio) {
      *
      * @throws IllegalStateException If both audio and video have been removed (otherwise the output
      *     would not contain any samples).
-     * @throws IllegalStateException If the muxer doesn't support the requested audio MIME type.
-     * @throws IllegalStateException If the muxer doesn't support the requested video MIME type.
+     * @throws IllegalStateException If the muxer doesn't support the requested audio/video MIME
+     *     type.
      */
     public Transformer build() {
       if (transformationRequest.audioMimeType != null) {

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DecodeOneFrameUtil.java
Patch:
@@ -38,7 +38,7 @@
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 /** Utilities for decoding a frame for tests. */
-public class DecodeOneFrameUtil {
+public final class DecodeOneFrameUtil {
   public static final String NO_DECODER_SUPPORT_ERROR_STRING =
       "No MediaCodec decoders on this device support this value.";
 

File: libraries/session/src/main/java/androidx/media3/session/MediaSession.java
Patch:
@@ -372,7 +372,7 @@ public static final class ControllerInfo {
      * @param remoteUserInfo The remote user info.
      * @param trusted {@code true} if trusted, {@code false} otherwise.
      * @param cb ControllerCb. Can be {@code null} only when a MediaBrowserCompat connects to
-     *     MediaSessionService and ControllerInfo is needed for SessionCallback#onConnected().
+     *     MediaSessionService and ControllerInfo is needed for {@code SessionCallback#onConnect()}.
      * @param connectionHints A session-specific argument sent from the controller for the
      *     connection. The contents of this bundle may affect the connection result.
      */

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/ForceInterpretHdrVideoAsSdrTest.java
Patch:
@@ -19,7 +19,7 @@
 import static androidx.media3.transformer.AndroidTestUtil.MP4_ASSET_1080P_4_SECOND_HDR10_FORMAT;
 import static androidx.media3.transformer.AndroidTestUtil.MP4_ASSET_1080P_5_SECOND_HLG10;
 import static androidx.media3.transformer.AndroidTestUtil.MP4_ASSET_1080P_5_SECOND_HLG10_FORMAT;
-import static androidx.media3.transformer.mh.FileUtil.assertFileHasColorTransfer;
+import static androidx.media3.transformer.mh.FileUtil.maybeAssertFileHasColorTransfer;
 
 import android.content.Context;
 import android.net.Uri;
@@ -73,7 +73,7 @@ public void forceInterpretHdrVideoAsSdrTest_hdr10File_transformsOrThrows() throw
           new TransformerAndroidTestRunner.Builder(context, transformer)
               .build()
               .run(testId, mediaItem);
-      assertFileHasColorTransfer(exportTestResult.filePath, C.COLOR_TRANSFER_SDR);
+      maybeAssertFileHasColorTransfer(exportTestResult.filePath, C.COLOR_TRANSFER_SDR);
       Log.i(TAG, "Transformed.");
     } catch (ExportException exception) {
       if (exception.errorCode != ExportException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED) {
@@ -109,7 +109,7 @@ public void forceInterpretHdrVideoAsSdrTest_hlg10File_transformsOrThrows() throw
           new TransformerAndroidTestRunner.Builder(context, transformer)
               .build()
               .run(testId, mediaItem);
-      assertFileHasColorTransfer(exportTestResult.filePath, C.COLOR_TRANSFER_SDR);
+      maybeAssertFileHasColorTransfer(exportTestResult.filePath, C.COLOR_TRANSFER_SDR);
       Log.i(TAG, "Transformed.");
     } catch (ExportException exception) {
       if (exception.errorCode != ExportException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED) {

File: libraries/transformer/src/main/java/androidx/media3/transformer/ExportException.java
Patch:
@@ -264,7 +264,7 @@ public static ExportException createForCodec(
    */
   public static ExportException createForAudioProcessing(Throwable cause, AudioFormat audioFormat) {
     return new ExportException(
-        "Audio processing error, audio_format = " + audioFormat,
+        "Audio processing error, audio_format=" + audioFormat,
         cause,
         ERROR_CODE_AUDIO_PROCESSING_FAILED);
   }

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformationException.java
Patch:
@@ -268,7 +268,7 @@ public static TransformationException createForCodec(
   public static TransformationException createForAudioProcessing(
       Throwable cause, AudioFormat audioFormat) {
     return new TransformationException(
-        "Audio processing error, audio_format = " + audioFormat,
+        "Audio processing error, audio_format=" + audioFormat,
         cause,
         ERROR_CODE_AUDIO_PROCESSING_FAILED);
   }

File: libraries/transformer/src/test/java/androidx/media3/transformer/ExoPlayerAssetLoaderTest.java
Patch:
@@ -119,7 +119,8 @@ private static AssetLoader getAssetLoader(
     Codec.DecoderFactory decoderFactory = new DefaultDecoderFactory(context);
     EditedMediaItem editedMediaItem =
         new EditedMediaItem.Builder(MediaItem.fromUri("asset:///media/mp4/sample.mp4")).build();
-    return new ExoPlayerAssetLoader.Factory(context, decoderFactory, clock)
+    return new ExoPlayerAssetLoader.Factory(
+            context, decoderFactory, /* forceInterpretHdrAsSdr= */ false, clock)
         .createAssetLoader(editedMediaItem, looper, listener);
   }
 

File: libraries/effect/src/main/java/androidx/media3/effect/DefaultVideoFrameProcessor.java
Patch:
@@ -126,7 +126,7 @@ public DefaultVideoFrameProcessor create(
 
       ExecutorService singleThreadExecutorService = Util.newSingleThreadExecutor(THREAD_NAME);
 
-      Future<DefaultVideoFrameProcessor> glFrameProcessorFuture =
+      Future<DefaultVideoFrameProcessor> defaultVideoFrameProcessorFuture =
           singleThreadExecutorService.submit(
               () ->
                   createOpenGlObjectsAndFrameProcessor(
@@ -142,7 +142,7 @@ public DefaultVideoFrameProcessor create(
                       listener));
 
       try {
-        return glFrameProcessorFuture.get();
+        return defaultVideoFrameProcessorFuture.get();
       } catch (ExecutionException e) {
         throw new VideoFrameProcessingException(e);
       } catch (InterruptedException e) {

File: libraries/effect/src/main/java/androidx/media3/effect/ExternalTextureManager.java
Patch:
@@ -107,7 +107,7 @@ public ExternalTextureManager(
     surface = new Surface(surfaceTexture);
   }
 
-  /** See {@link GlEffectsFrameProcessor#setInputDefaultBufferSize}. */
+  /** See {@link DefaultVideoFrameProcessor#setInputDefaultBufferSize}. */
   public void setDefaultBufferSize(int width, int height) {
     surfaceTexture.setDefaultBufferSize(width, height);
   }

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/mediacodec/AsynchronousMediaCodecCallbackTest.java
Patch:
@@ -460,6 +460,7 @@ private static MediaCodec.CodecException createCodecException() throws Exception
     Constructor<MediaCodec.CodecException> constructor =
         MediaCodec.CodecException.class.getDeclaredConstructor(
             Integer.TYPE, Integer.TYPE, String.class);
+    constructor.setAccessible(true);
     return constructor.newInstance(
         /* errorCode= */ 0, /* actionCode= */ 0, /* detailMessage= */ "error from codec");
   }

File: libraries/effect/src/androidTest/java/androidx/media3/effect/CropPixelTest.java
Patch:
@@ -30,7 +30,7 @@
 import android.opengl.EGLContext;
 import android.opengl.EGLDisplay;
 import android.opengl.EGLSurface;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.GlUtil;
 import androidx.media3.common.util.Size;
 import androidx.media3.test.utils.BitmapPixelTestUtil;
@@ -48,7 +48,7 @@
  * <p>Expected images are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public final class CropPixelTest {
@@ -82,7 +82,7 @@ public void createGlObjects() throws IOException, GlUtil.GlException {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (cropShaderProgram != null) {
       cropShaderProgram.release();
     }

File: libraries/effect/src/androidTest/java/androidx/media3/effect/HslAdjustmentPixelTest.java
Patch:
@@ -32,7 +32,7 @@
 import android.opengl.EGLContext;
 import android.opengl.EGLDisplay;
 import android.opengl.EGLSurface;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.GlUtil;
 import androidx.media3.common.util.Size;
 import androidx.media3.test.utils.BitmapPixelTestUtil;
@@ -50,7 +50,7 @@
  * <p>Expected images are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public final class HslAdjustmentPixelTest {
@@ -100,7 +100,7 @@ public void createGlObjects() throws IOException, GlUtil.GlException {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (hslProcessor != null) {
       hslProcessor.release();
     }

File: libraries/effect/src/androidTest/java/androidx/media3/effect/MatrixShaderProgramPixelTest.java
Patch:
@@ -30,7 +30,7 @@
 import android.opengl.EGLContext;
 import android.opengl.EGLDisplay;
 import android.opengl.EGLSurface;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.GlUtil;
 import androidx.media3.test.utils.BitmapPixelTestUtil;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
@@ -47,7 +47,7 @@
  * <p>Expected images are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public final class MatrixShaderProgramPixelTest {
@@ -87,7 +87,7 @@ public void createGlObjects() throws IOException, GlUtil.GlException {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (matrixShaderProgram != null) {
       matrixShaderProgram.release();
     }

File: libraries/effect/src/androidTest/java/androidx/media3/effect/OverlayShaderProgramPixelTest.java
Patch:
@@ -35,7 +35,7 @@
 import android.text.Spannable;
 import android.text.SpannableString;
 import android.text.style.ForegroundColorSpan;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.GlUtil;
 import androidx.media3.common.util.Size;
 import androidx.media3.test.utils.BitmapPixelTestUtil;
@@ -54,7 +54,7 @@
  * <p>Expected bitmaps are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public class OverlayShaderProgramPixelTest {
@@ -101,7 +101,7 @@ public void createGlObjects() throws IOException, GlUtil.GlException {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (overlayShaderProgram != null) {
       overlayShaderProgram.release();
     }

File: libraries/effect/src/androidTest/java/androidx/media3/effect/PresentationPixelTest.java
Patch:
@@ -31,7 +31,7 @@
 import android.opengl.EGLDisplay;
 import android.opengl.EGLSurface;
 import androidx.media3.common.C;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.GlUtil;
 import androidx.media3.common.util.Size;
 import androidx.media3.test.utils.BitmapPixelTestUtil;
@@ -49,7 +49,7 @@
  * <p>Expected images are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public final class PresentationPixelTest {
@@ -91,7 +91,7 @@ public void createGlObjects() throws IOException, GlUtil.GlException {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (presentationShaderProgram != null) {
       presentationShaderProgram.release();
     }

File: libraries/effect/src/androidTest/java/androidx/media3/effect/RgbAdjustmentPixelTest.java
Patch:
@@ -33,7 +33,7 @@
 import android.opengl.EGLContext;
 import android.opengl.EGLDisplay;
 import android.opengl.EGLSurface;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.GlUtil;
 import androidx.media3.common.util.Size;
 import androidx.media3.test.utils.BitmapPixelTestUtil;
@@ -52,7 +52,7 @@
  * <p>Expected images are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public final class RgbAdjustmentPixelTest {
@@ -99,7 +99,7 @@ public void createGlObjects() throws IOException, GlUtil.GlException {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (matrixShaderProgram != null) {
       matrixShaderProgram.release();
     }

File: libraries/effect/src/androidTest/java/androidx/media3/effect/RgbFilterPixelTest.java
Patch:
@@ -31,7 +31,7 @@
 import android.opengl.EGLContext;
 import android.opengl.EGLDisplay;
 import android.opengl.EGLSurface;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.GlUtil;
 import androidx.media3.common.util.Size;
 import androidx.media3.test.utils.BitmapPixelTestUtil;
@@ -49,7 +49,7 @@
  * <p>Expected images are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public final class RgbFilterPixelTest {
@@ -94,7 +94,7 @@ public void createGlObjects() throws IOException, GlUtil.GlException {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (matrixShaderProgram != null) {
       matrixShaderProgram.release();
     }

File: libraries/effect/src/androidTest/java/androidx/media3/effect/SingleColorLutPixelTest.java
Patch:
@@ -32,7 +32,7 @@
 import android.opengl.EGLContext;
 import android.opengl.EGLDisplay;
 import android.opengl.EGLSurface;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.GlUtil;
 import androidx.media3.common.util.Size;
 import androidx.media3.test.utils.BitmapPixelTestUtil;
@@ -49,7 +49,7 @@
  * <p>Expected images are taken from an emulator, so tests on different emulators or physical
  * devices may fail. To test on other devices, please increase the {@link
  * BitmapPixelTestUtil#MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE} and/or inspect the saved output
- * bitmaps as recommended in {@link GlEffectsFrameProcessorPixelTest}.
+ * bitmaps as recommended in {@link DefaultVideoFrameProcessorPixelTest}.
  */
 @RunWith(AndroidJUnit4.class)
 public class SingleColorLutPixelTest {
@@ -88,7 +88,7 @@ public void createGlObjects() throws Exception {
   }
 
   @After
-  public void release() throws GlUtil.GlException, FrameProcessingException {
+  public void release() throws GlUtil.GlException, VideoFrameProcessingException {
     if (colorLutShaderProgram != null) {
       colorLutShaderProgram.release();
     }

File: libraries/effect/src/main/java/androidx/media3/effect/ColorLut.java
Patch:
@@ -18,7 +18,7 @@
 
 import android.content.Context;
 import androidx.annotation.WorkerThread;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.GlUtil;
 import androidx.media3.common.util.UnstableApi;
 
@@ -45,7 +45,7 @@ public interface ColorLut extends GlEffect {
   @Override
   @WorkerThread
   default SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     return new ColorLutShaderProgram(context, /* colorLut= */ this, useHdr);
   }
 }

File: libraries/effect/src/main/java/androidx/media3/effect/Contrast.java
Patch:
@@ -19,7 +19,7 @@
 import static androidx.media3.common.util.Assertions.checkArgument;
 
 import android.content.Context;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.UnstableApi;
 
 /** A {@link GlEffect} to control the contrast of video frames. */
@@ -42,7 +42,7 @@ public Contrast(float contrast) {
 
   @Override
   public SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     return new ContrastShaderProgram(context, this, useHdr);
   }
 }

File: libraries/effect/src/main/java/androidx/media3/effect/FrameCache.java
Patch:
@@ -19,14 +19,14 @@
 
 import android.content.Context;
 import androidx.annotation.IntRange;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.UnstableApi;
 
 /**
  * Caches the input frames.
  *
  * <p>Example usage: cache the processed frames when presenting them on screen, to accommodate for
- * the possible fluctuation in frame processing time between frames.
+ * the possible fluctuation in video frame processing time between frames.
  */
 @UnstableApi
 public final class FrameCache implements GlEffect {
@@ -51,7 +51,7 @@ public FrameCache(@IntRange(from = 1, to = 8) int capacity) {
 
   @Override
   public GlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     return new FrameCacheShaderProgram(context, capacity, useHdr);
   }
 }

File: libraries/effect/src/main/java/androidx/media3/effect/GlMatrixTransformation.java
Patch:
@@ -17,7 +17,7 @@
 
 import android.content.Context;
 import android.opengl.Matrix;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.Size;
 import androidx.media3.common.util.UnstableApi;
 import com.google.common.collect.ImmutableList;
@@ -54,7 +54,7 @@ default Size configure(int inputWidth, int inputHeight) {
 
   @Override
   default SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     return MatrixShaderProgram.create(
         context,
         /* matrixTransformations= */ ImmutableList.of(this),

File: libraries/effect/src/main/java/androidx/media3/effect/HslAdjustment.java
Patch:
@@ -19,7 +19,7 @@
 import static androidx.media3.common.util.Assertions.checkArgument;
 
 import android.content.Context;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.UnstableApi;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 
@@ -114,7 +114,7 @@ private HslAdjustment(
 
   @Override
   public SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     return new HslShaderProgram(context, /* hslAdjustment= */ this, useHdr);
   }
 }

File: libraries/effect/src/main/java/androidx/media3/effect/OverlayEffect.java
Patch:
@@ -16,7 +16,7 @@
 package androidx.media3.effect;
 
 import android.content.Context;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.UnstableApi;
 import com.google.common.collect.ImmutableList;
 
@@ -40,7 +40,7 @@ public OverlayEffect(ImmutableList<TextureOverlay> textureOverlays) {
 
   @Override
   public SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     return new OverlayShaderProgram(context, useHdr, overlays);
   }
 }

File: libraries/effect/src/main/java/androidx/media3/effect/RgbFilter.java
Patch:
@@ -19,7 +19,7 @@
 import static androidx.media3.common.util.Assertions.checkState;
 
 import android.content.Context;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.UnstableApi;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
@@ -92,7 +92,7 @@ public float[] getMatrix(long presentationTimeUs, boolean useHdr) {
 
   @Override
   public SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     checkForConsistentHdrSetting(useHdr);
     return RgbMatrix.super.toGlShaderProgram(context, useHdr);
   }

File: libraries/effect/src/main/java/androidx/media3/effect/RgbMatrix.java
Patch:
@@ -17,7 +17,7 @@
 package androidx.media3.effect;
 
 import android.content.Context;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.UnstableApi;
 import com.google.common.collect.ImmutableList;
 
@@ -41,7 +41,7 @@ public interface RgbMatrix extends GlEffect {
 
   @Override
   default SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     return MatrixShaderProgram.create(
         context,
         /* matrixTransformations= */ ImmutableList.of(),

File: libraries/effect/src/main/java/androidx/media3/effect/SingleColorLut.java
Patch:
@@ -24,7 +24,7 @@
 import android.opengl.GLES20;
 import android.opengl.GLUtils;
 import androidx.media3.common.Format;
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.GlUtil;
 import androidx.media3.common.util.UnstableApi;
 import androidx.media3.common.util.Util;
@@ -150,13 +150,13 @@ public void release() throws GlUtil.GlException {
 
   @Override
   public SingleFrameGlShaderProgram toGlShaderProgram(Context context, boolean useHdr)
-      throws FrameProcessingException {
+      throws VideoFrameProcessingException {
     checkState(!useHdr, "HDR is currently not supported.");
 
     try {
       lutTextureId = storeLutAsTexture(lut);
     } catch (GlUtil.GlException e) {
-      throw new FrameProcessingException("Could not store the LUT as a texture.", e);
+      throw new VideoFrameProcessingException("Could not store the LUT as a texture.", e);
     }
 
     return new ColorLutShaderProgram(context, /* colorLut= */ this, useHdr);

File: libraries/effect/src/main/java/androidx/media3/effect/TextureOverlay.java
Patch:
@@ -15,7 +15,7 @@
  */
 package androidx.media3.effect;
 
-import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.VideoFrameProcessingException;
 import androidx.media3.common.util.Size;
 import androidx.media3.common.util.UnstableApi;
 
@@ -26,9 +26,9 @@ public abstract class TextureOverlay {
    * Returns the overlay texture identifier displayed at the specified timestamp.
    *
    * @param presentationTimeUs The presentation timestamp of the current frame, in microseconds.
-   * @throws FrameProcessingException If an error occurs while processing or drawing the frame.
+   * @throws VideoFrameProcessingException If an error occurs while processing or drawing the frame.
    */
-  public abstract int getTextureId(long presentationTimeUs) throws FrameProcessingException;
+  public abstract int getTextureId(long presentationTimeUs) throws VideoFrameProcessingException;
 
   // This method is required to find the size of a texture given a texture identifier using OpenGL
   // ES 2.0. OpenGL ES 3.1 can do this with glGetTexLevelParameteriv().

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerInternal.java
Patch:
@@ -498,7 +498,7 @@ private SamplePipeline getSamplePipeline(
             streamOffsetUs,
             transformationRequest,
             firstEditedMediaItem.effects.videoEffects,
-            firstEditedMediaItem.effects.frameProcessorFactory,
+            firstEditedMediaItem.effects.videoFrameProcessorFactory,
             encoderFactory,
             muxerWrapper,
             /* errorConsumer= */ this::onError,

File: libraries/common/src/main/java/androidx/media3/common/FrameProcessor.java
Patch:
@@ -137,6 +137,7 @@ interface Listener {
    * @param inputBitmap The {@link Bitmap} queued to the {@link FrameProcessor}.
    * @param durationUs The duration for which to display the {@code inputBitmap}, in microseconds.
    * @param frameRate The frame rate at which to display the {@code inputBitmap}, in frames per
+   *     second.
    */
   // TODO(b/262693274): Remove duration and frameRate parameters when EditedMediaItem can be
   //  signalled down to the processors.

File: libraries/effect/src/androidTest/java/androidx/media3/effect/CropPixelTest.java
Patch:
@@ -106,7 +106,7 @@ public void drawFrame_noEdits_matchesGoldenFile() throws Exception {
         createArgb8888BitmapFromCurrentGlFramebuffer(outputSize.getWidth(), outputSize.getHeight());
 
     maybeSaveTestBitmapToCacheDirectory(testId, /* bitmapLabel= */ "actual", actualBitmap);
-    // TODO(b/207848601): switch to using proper tooling for testing against golden data.
+    // TODO(b/207848601): Switch to using proper tooling for testing against golden data.
     float averagePixelAbsoluteDifference =
         getBitmapAveragePixelAbsoluteDifferenceArgb8888(expectedBitmap, actualBitmap, testId);
     assertThat(averagePixelAbsoluteDifference).isAtMost(MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE);
@@ -127,7 +127,7 @@ public void drawFrame_cropSmaller_matchesGoldenFile() throws Exception {
         createArgb8888BitmapFromCurrentGlFramebuffer(outputSize.getWidth(), outputSize.getHeight());
 
     maybeSaveTestBitmapToCacheDirectory(testId, /* bitmapLabel= */ "actual", actualBitmap);
-    // TODO(b/207848601): switch to using proper tooling for testing against golden data.
+    // TODO(b/207848601): Switch to using proper tooling for testing against golden data.
     float averagePixelAbsoluteDifference =
         getBitmapAveragePixelAbsoluteDifferenceArgb8888(expectedBitmap, actualBitmap, testId);
     assertThat(averagePixelAbsoluteDifference).isAtMost(MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE);
@@ -148,7 +148,7 @@ public void drawFrame_cropLarger_matchesGoldenFile() throws Exception {
         createArgb8888BitmapFromCurrentGlFramebuffer(outputSize.getWidth(), outputSize.getHeight());
 
     maybeSaveTestBitmapToCacheDirectory(testId, /* bitmapLabel= */ "actual", actualBitmap);
-    // TODO(b/207848601): switch to using proper tooling for testing against golden data.
+    // TODO(b/207848601): Switch to using proper tooling for testing against golden data.
     float averagePixelAbsoluteDifference =
         getBitmapAveragePixelAbsoluteDifferenceArgb8888(expectedBitmap, actualBitmap, testId);
     assertThat(averagePixelAbsoluteDifference).isAtMost(MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE);

File: libraries/effect/src/main/java/androidx/media3/effect/ExternalTextureManager.java
Patch:
@@ -35,7 +35,7 @@
  * Forwards externally produced frames that become available via a {@link SurfaceTexture} to an
  * {@link ExternalShaderProgram} for consumption.
  */
-/* package */ class ExternalTextureManager implements InputListener {
+/* package */ final class ExternalTextureManager implements InputListener {
 
   private final FrameProcessingTaskExecutor frameProcessingTaskExecutor;
   private final ExternalShaderProgram externalShaderProgram;

File: libraries/effect/src/main/java/androidx/media3/effect/FrameCache.java
Patch:
@@ -29,7 +29,7 @@
  * the possible fluctuation in frame processing time between frames.
  */
 @UnstableApi
-public class FrameCache implements GlEffect {
+public final class FrameCache implements GlEffect {
   /** The capacity of the frame cache. */
   public final int capacity;
 

File: libraries/effect/src/main/java/androidx/media3/effect/FrameCacheShaderProgram.java
Patch:
@@ -35,7 +35,7 @@
  *
  * <p>Implements {@link FrameCache}.
  */
-/* package */ class FrameCacheShaderProgram implements GlShaderProgram {
+/* package */ final class FrameCacheShaderProgram implements GlShaderProgram {
   private static final String VERTEX_SHADER_TRANSFORMATION_ES2_PATH =
       "shaders/vertex_shader_transformation_es2.glsl";
   private static final String FRAGMENT_SHADER_TRANSFORMATION_ES2_PATH =

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/DecodeOneFrameUtil.java
Patch:
@@ -40,7 +40,7 @@
 
 /** Utilities for decoding a frame for tests. */
 @UnstableApi
-public class DecodeOneFrameUtil {
+public final class DecodeOneFrameUtil {
   public static final String NO_DECODER_SUPPORT_ERROR_STRING =
       "No MediaCodec decoders on this device support this value.";
 

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/ToneMapHdrToSdrUsingOpenGlPixelTest.java
Patch:
@@ -139,7 +139,7 @@ public void toneMap_hlgFrame_matchesGoldenFile() throws Exception {
     }
 
     Log.i(TAG, "Successfully tone mapped.");
-    // TODO(b/207848601): switch to using proper tooling for testing against golden data.
+    // TODO(b/207848601): Switch to using proper tooling for testing against golden data.
     float averagePixelAbsoluteDifference =
         getBitmapAveragePixelAbsoluteDifferenceArgb8888(expectedBitmap, actualBitmap, testId);
     assertThat(averagePixelAbsoluteDifference)
@@ -202,7 +202,7 @@ public void toneMap_pqFrame_matchesGoldenFile() throws Exception {
     }
 
     Log.i(TAG, "Successfully tone mapped.");
-    // TODO(b/207848601): switch to using proper tooling for testing against golden data.
+    // TODO(b/207848601): Switch to using proper tooling for testing against golden data.
     float averagePixelAbsoluteDifference =
         getBitmapAveragePixelAbsoluteDifferenceArgb8888(expectedBitmap, actualBitmap, testId);
     assertThat(averagePixelAbsoluteDifference)

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -401,7 +401,7 @@ public Builder setDebugViewProvider(DebugViewProvider debugViewProvider) {
      *   <li>Duration will match duration of the input media.
      *   <li>Sample mime type will match {@link TransformationRequest#audioMimeType}, or {@link
      *       MimeTypes#AUDIO_AAC} if {@code null}.
-     *   <li>Sample rate will be {@code 44100} hz. This can be modified by creating a {@link
+     *   <li>Sample rate will be {@code 44100} Hz. This can be modified by creating a {@link
      *       SonicAudioProcessor}, setting its {@linkplain
      *       SonicAudioProcessor#setOutputSampleRateHz(int) sample rate}, and passing it to the
      *       {@link EditedMediaItem} used to start the export.
@@ -424,8 +424,8 @@ public Builder experimentalSetGenerateSilentAudio(boolean generateSilentAudio) {
      *
      * @throws IllegalStateException If both audio and video have been removed (otherwise the output
      *     would not contain any samples).
-     * @throws IllegalStateException If the muxer doesn't support the requested audio MIME type.
-     * @throws IllegalStateException If the muxer doesn't support the requested video MIME type.
+     * @throws IllegalStateException If the muxer doesn't support the requested audio/video MIME
+     *     type.
      */
     public Transformer build() {
       if (transformationRequest.audioMimeType != null) {

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -1988,7 +1988,7 @@ public boolean maybeEnable(Format inputFormat) throws ExoPlaybackException {
                     DebugViewProvider.NONE,
                     inputColorInfo,
                     outputColorInfo,
-                    C.TRACK_TYPE_VIDEO,
+                    /* isInputTextureExternal= */ true,
                     /* releaseFramesAutomatically= */ false,
                     /* executor= */ handler::post,
                     new FrameProcessor.Listener() {

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/GlEffectsFrameProcessorFrameReleaseTest.java
Patch:
@@ -25,7 +25,6 @@
 import android.media.ImageReader;
 import androidx.annotation.Nullable;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
-import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.util.DebugViewProvider;
 import com.google.android.exoplayer2.util.FrameInfo;
 import com.google.android.exoplayer2.util.FrameProcessingException;
@@ -296,7 +295,7 @@ private void processFramesToEndOfStream(
                     DebugViewProvider.NONE,
                     /* inputColorInfo= */ ColorInfo.SDR_BT709_LIMITED,
                     /* outputColorInfo= */ ColorInfo.SDR_BT709_LIMITED,
-                    C.TRACK_TYPE_VIDEO,
+                    /* isInputTextureExternal= */ true,
                     releaseFramesAutomatically,
                     MoreExecutors.directExecutor(),
                     new FrameProcessor.Listener() {

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoSamplePipeline.java
Patch:
@@ -140,7 +140,7 @@ public VideoSamplePipeline(
               debugViewProvider,
               frameProcessorInputColor,
               frameProcessorOutputColor,
-              MimeTypes.getTrackType(firstInputFormat.sampleMimeType),
+              MimeTypes.isVideo(firstInputFormat.sampleMimeType),
               /* releaseFramesAutomatically= */ true,
               MoreExecutors.directExecutor(),
               new FrameProcessor.Listener() {

File: libraries/effect/src/androidTest/java/androidx/media3/effect/GlEffectsFrameProcessorFrameReleaseTest.java
Patch:
@@ -24,7 +24,6 @@
 import android.media.Image;
 import android.media.ImageReader;
 import androidx.annotation.Nullable;
-import androidx.media3.common.C;
 import androidx.media3.common.ColorInfo;
 import androidx.media3.common.DebugViewProvider;
 import androidx.media3.common.FrameInfo;
@@ -296,7 +295,7 @@ private void processFramesToEndOfStream(
                     DebugViewProvider.NONE,
                     /* inputColorInfo= */ ColorInfo.SDR_BT709_LIMITED,
                     /* outputColorInfo= */ ColorInfo.SDR_BT709_LIMITED,
-                    C.TRACK_TYPE_VIDEO,
+                    /* isInputTextureExternal= */ true,
                     releaseFramesAutomatically,
                     MoreExecutors.directExecutor(),
                     new FrameProcessor.Listener() {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/MediaCodecVideoRenderer.java
Patch:
@@ -1992,7 +1992,7 @@ public boolean maybeEnable(Format inputFormat) throws ExoPlaybackException {
                     DebugViewProvider.NONE,
                     inputColorInfo,
                     outputColorInfo,
-                    C.TRACK_TYPE_VIDEO,
+                    /* isInputTextureExternal= */ true,
                     /* releaseFramesAutomatically= */ false,
                     /* executor= */ handler::post,
                     new FrameProcessor.Listener() {

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoSamplePipeline.java
Patch:
@@ -140,7 +140,7 @@ public VideoSamplePipeline(
               debugViewProvider,
               frameProcessorInputColor,
               frameProcessorOutputColor,
-              MimeTypes.getTrackType(firstInputFormat.sampleMimeType),
+              MimeTypes.isVideo(firstInputFormat.sampleMimeType),
               /* releaseFramesAutomatically= */ true,
               MoreExecutors.directExecutor(),
               new FrameProcessor.Listener() {

File: library/common/src/main/java/com/google/android/exoplayer2/util/FrameProcessor.java
Patch:
@@ -20,6 +20,7 @@
 import android.opengl.EGLExt;
 import android.view.Surface;
 import androidx.annotation.Nullable;
+import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.video.ColorInfo;
 import java.util.List;
 import java.util.concurrent.Executor;

File: libraries/effect/src/androidTest/java/androidx/media3/effect/GlEffectsFrameProcessorPixelTest.java
Patch:
@@ -145,7 +145,8 @@ public void wrappedCrop_withImageInput_matchesGoldenFile() throws Exception {
     assertThat(averagePixelAbsoluteDifference).isAtMost(MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE);
   }
   // TODO(b/262693274): Once texture deletion is added to InternalTextureManager.java, add a test
-  //  queuing multiple input bitmaps to ensure successfully completion without errors.
+  //  queuing multiple input bitmaps to ensure successfully completion without errors, ensuring the
+  //  correct number of frames haas been queued.
 
   @Test
   public void noEffects_withFrameCache_matchesGoldenFile() throws Exception {

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/GlEffectsFrameProcessorPixelTest.java
Patch:
@@ -145,7 +145,8 @@ public void wrappedCrop_withImageInput_matchesGoldenFile() throws Exception {
     assertThat(averagePixelAbsoluteDifference).isAtMost(MAXIMUM_AVERAGE_PIXEL_ABSOLUTE_DIFFERENCE);
   }
   // TODO(b/262693274): Once texture deletion is added to InternalTextureManager.java, add a test
-  //  queuing multiple input bitmaps to ensure successfully completion without errors.
+  //  queuing multiple input bitmaps to ensure successfully completion without errors, ensuring the
+  //  correct number of frames haas been queued.
 
   @Test
   public void noEffects_withFrameCache_matchesGoldenFile() throws Exception {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/MediaCodecVideoRenderer.java
Patch:
@@ -2036,8 +2036,7 @@ public void onFrameProcessingError(FrameProcessingException exception) {
                             renderer.createRendererException(
                                 exception,
                                 inputFormat,
-                                // TODO(b/238302341) Add relevant error codes for frame processing.
-                                PlaybackException.ERROR_CODE_UNSPECIFIED));
+                                PlaybackException.ERROR_CODE_FRAME_PROCESSING_FAILED));
                       }
 
                       @Override
@@ -2047,7 +2046,7 @@ public void onFrameProcessingEnded() {
                     });
       } catch (Exception e) {
         throw renderer.createRendererException(
-            e, inputFormat, PlaybackException.ERROR_CODE_UNSPECIFIED);
+            e, inputFormat, PlaybackException.ERROR_CODE_FRAME_PROCESSOR_INIT_FAILED);
       }
 
       if (currentSurfaceAndSize != null) {

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -2032,8 +2032,7 @@ public void onFrameProcessingError(FrameProcessingException exception) {
                             renderer.createRendererException(
                                 exception,
                                 inputFormat,
-                                // TODO(b/238302341) Add relevant error codes for frame processing.
-                                PlaybackException.ERROR_CODE_UNSPECIFIED));
+                                PlaybackException.ERROR_CODE_FRAME_PROCESSING_FAILED));
                       }
 
                       @Override
@@ -2043,7 +2042,7 @@ public void onFrameProcessingEnded() {
                     });
       } catch (Exception e) {
         throw renderer.createRendererException(
-            e, inputFormat, PlaybackException.ERROR_CODE_UNSPECIFIED);
+            e, inputFormat, PlaybackException.ERROR_CODE_FRAME_PROCESSOR_INIT_FAILED);
       }
 
       if (currentSurfaceAndSize != null) {

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/HdrEditingTest.java
Patch:
@@ -295,6 +295,6 @@ public void transformUnexpectedColorInfo() throws Exception {
   }
 
   private static boolean deviceSupportsHdrEditing(String mimeType, ColorInfo colorInfo) {
-    return !EncoderUtil.getSupportedEncoderNamesForHdrEditing(mimeType, colorInfo).isEmpty();
+    return !EncoderUtil.getSupportedEncodersForHdrEditing(mimeType, colorInfo).isEmpty();
   }
 }

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/HdrEditingTest.java
Patch:
@@ -295,6 +295,6 @@ public void transformUnexpectedColorInfo() throws Exception {
   }
 
   private static boolean deviceSupportsHdrEditing(String mimeType, ColorInfo colorInfo) {
-    return !EncoderUtil.getSupportedEncoderNamesForHdrEditing(mimeType, colorInfo).isEmpty();
+    return !EncoderUtil.getSupportedEncodersForHdrEditing(mimeType, colorInfo).isEmpty();
   }
 }

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspClient.java
Patch:
@@ -652,7 +652,7 @@ private void handleRtspResponse(List<String> message) {
           default:
             throw new IllegalStateException();
         }
-      } catch (ParserException e) {
+      } catch (ParserException | IllegalArgumentException e) {
         dispatchRtspError(new RtspPlaybackException(e));
       }
     }

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspClient.java
Patch:
@@ -652,7 +652,7 @@ private void handleRtspResponse(List<String> message) {
           default:
             throw new IllegalStateException();
         }
-      } catch (ParserException e) {
+      } catch (ParserException | IllegalArgumentException e) {
         dispatchRtspError(new RtspPlaybackException(e));
       }
     }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/SamplePipeline.java
Patch:
@@ -55,7 +55,6 @@ protected static TransformationException createNoSupportedMimeTypeException(Form
 
     if (isVideo && ColorInfo.isTransferHdr(format.colorInfo)) {
       errorMessage += " Requested HDR colorInfo: " + format.colorInfo;
-      errorCode = TransformationException.ERROR_CODE_HDR_ENCODING_UNSUPPORTED;
     }
 
     return TransformationException.createForCodec(

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformationRequest.java
Patch:
@@ -95,9 +95,7 @@ public final class TransformationRequest {
    * metadata will be ignored, contents will be displayed incorrectly, likely with a washed out
    * look.
    *
-   * <p>Use of this flag may result in {@code
-   * TransformationException.ERROR_CODE_HDR_DECODING_UNSUPPORTED} or {@code
-   * ERROR_CODE_DECODING_FORMAT_UNSUPPORTED}.
+   * <p>Use of this flag may result in {@code ERROR_CODE_DECODING_FORMAT_UNSUPPORTED}.
    *
    * <p>This field is experimental, and will be renamed or removed in a future release.
    */

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoSamplePipeline.java
Patch:
@@ -88,8 +88,9 @@ public VideoSamplePipeline(
       if (transformationRequest.hdrMode == HDR_MODE_EXPERIMENTAL_FORCE_INTERPRET_HDR_AS_SDR) {
         if (SDK_INT < 29) {
           throw TransformationException.createForCodec(
-              new IllegalArgumentException("Interpreting HDR video as SDR is not supported."),
-              TransformationException.ERROR_CODE_HDR_DECODING_UNSUPPORTED,
+              new IllegalArgumentException(
+                  "Interpreting HDR video as SDR is not supported on this device."),
+              TransformationException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED,
               /* isVideo= */ true,
               /* isDecoder= */ true,
               firstInputFormat);

File: libraries/transformer/src/main/java/androidx/media3/transformer/SamplePipeline.java
Patch:
@@ -55,7 +55,6 @@ protected static TransformationException createNoSupportedMimeTypeException(Form
 
     if (isVideo && ColorInfo.isTransferHdr(format.colorInfo)) {
       errorMessage += " Requested HDR colorInfo: " + format.colorInfo;
-      errorCode = TransformationException.ERROR_CODE_HDR_ENCODING_UNSUPPORTED;
     }
 
     return TransformationException.createForCodec(

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformationRequest.java
Patch:
@@ -97,9 +97,7 @@ public final class TransformationRequest {
    * metadata will be ignored, contents will be displayed incorrectly, likely with a washed out
    * look.
    *
-   * <p>Use of this flag may result in {@code
-   * TransformationException.ERROR_CODE_HDR_DECODING_UNSUPPORTED} or {@code
-   * ERROR_CODE_DECODING_FORMAT_UNSUPPORTED}.
+   * <p>Use of this flag may result in {@code ERROR_CODE_DECODING_FORMAT_UNSUPPORTED}.
    *
    * <p>This field is experimental, and will be renamed or removed in a future release.
    */

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoSamplePipeline.java
Patch:
@@ -88,8 +88,9 @@ public VideoSamplePipeline(
       if (transformationRequest.hdrMode == HDR_MODE_EXPERIMENTAL_FORCE_INTERPRET_HDR_AS_SDR) {
         if (SDK_INT < 29) {
           throw TransformationException.createForCodec(
-              new IllegalArgumentException("Interpreting HDR video as SDR is not supported."),
-              TransformationException.ERROR_CODE_HDR_DECODING_UNSUPPORTED,
+              new IllegalArgumentException(
+                  "Interpreting HDR video as SDR is not supported on this device."),
+              TransformationException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED,
               /* isVideo= */ true,
               /* isDecoder= */ true,
               firstInputFormat);

File: libraries/session/src/main/java/androidx/media3/session/MediaNotificationManager.java
Patch:
@@ -219,9 +219,11 @@ private void updateNotificationInternal(
     if (startInForegroundRequired) {
       startForeground(mediaNotification);
     } else {
-      maybeStopForegroundService(/* removeNotifications= */ false);
+      // Notification manager has to be updated first to avoid missing updates
+      // (https://github.com/androidx/media/issues/192).
       notificationManagerCompat.notify(
           mediaNotification.notificationId, mediaNotification.notification);
+      maybeStopForegroundService(/* removeNotifications= */ false);
     }
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -191,11 +191,13 @@ public void releaseOutputBuffer(int index, long renderTimeStampNs) {
 
   @Override
   public int dequeueInputBufferIndex() {
+    bufferEnqueuer.maybeThrowException();
     return asynchronousMediaCodecCallback.dequeueInputBufferIndex();
   }
 
   @Override
   public int dequeueOutputBufferIndex(MediaCodec.BufferInfo bufferInfo) {
+    bufferEnqueuer.maybeThrowException();
     return asynchronousMediaCodecCallback.dequeueOutputBufferIndex(bufferInfo);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecBufferEnqueuer.java
Patch:
@@ -162,7 +162,8 @@ public void waitUntilQueueingComplete() throws InterruptedException {
     blockUntilHandlerThreadIsIdle();
   }
 
-  private void maybeThrowException() {
+  /** Throw any exception that occurred on the enqueuer's background queueing thread. */
+  public void maybeThrowException() {
     @Nullable RuntimeException exception = pendingRuntimeException.getAndSet(null);
     if (exception != null) {
       throw exception;

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecCallback.java
Patch:
@@ -263,11 +263,12 @@ private void flushInternal() {
     // else, pendingOutputFormat may already be non-null following a previous flush, and remains
     // set in this case.
 
+    // mediaCodecException is not reset to null. If the codec has raised an error, then it remains
+    // in FAILED_STATE even after flushing.
     availableInputBuffers.clear();
     availableOutputBuffers.clear();
     bufferInfos.clear();
     formats.clear();
-    mediaCodecException = null;
   }
 
   @GuardedBy("lock")

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -191,11 +191,13 @@ public void releaseOutputBuffer(int index, long renderTimeStampNs) {
 
   @Override
   public int dequeueInputBufferIndex() {
+    bufferEnqueuer.maybeThrowException();
     return asynchronousMediaCodecCallback.dequeueInputBufferIndex();
   }
 
   @Override
   public int dequeueOutputBufferIndex(MediaCodec.BufferInfo bufferInfo) {
+    bufferEnqueuer.maybeThrowException();
     return asynchronousMediaCodecCallback.dequeueOutputBufferIndex(bufferInfo);
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/AsynchronousMediaCodecBufferEnqueuer.java
Patch:
@@ -162,7 +162,8 @@ public void waitUntilQueueingComplete() throws InterruptedException {
     blockUntilHandlerThreadIsIdle();
   }
 
-  private void maybeThrowException() {
+  /** Throw any exception that occurred on the enqueuer's background queueing thread. */
+  public void maybeThrowException() {
     @Nullable RuntimeException exception = pendingRuntimeException.getAndSet(null);
     if (exception != null) {
       throw exception;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/AsynchronousMediaCodecCallback.java
Patch:
@@ -263,11 +263,12 @@ private void flushInternal() {
     // else, pendingOutputFormat may already be non-null following a previous flush, and remains
     // set in this case.
 
+    // mediaCodecException is not reset to null. If the codec has raised an error, then it remains
+    // in FAILED_STATE even after flushing.
     availableInputBuffers.clear();
     availableOutputBuffers.clear();
     bufferInfos.clear();
     formats.clear();
-    mediaCodecException = null;
   }
 
   @GuardedBy("lock")

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -1714,8 +1714,9 @@ public void setDeviceMuted(boolean muted) {
   @Override
   public boolean isTunnelingEnabled() {
     verifyApplicationThread();
-    for (RendererConfiguration config : playbackInfo.trackSelectorResult.rendererConfigurations) {
-      if (config.tunneling) {
+    for (@Nullable
+    RendererConfiguration config : playbackInfo.trackSelectorResult.rendererConfigurations) {
+      if (config != null && config.tunneling) {
         return true;
       }
     }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayerImpl.java
Patch:
@@ -1725,8 +1725,9 @@ public void setDeviceMuted(boolean muted) {
   @Override
   public boolean isTunnelingEnabled() {
     verifyApplicationThread();
-    for (RendererConfiguration config : playbackInfo.trackSelectorResult.rendererConfigurations) {
-      if (config.tunneling) {
+    for (@Nullable
+    RendererConfiguration config : playbackInfo.trackSelectorResult.rendererConfigurations) {
+      if (config != null && config.tunneling) {
         return true;
       }
     }

File: library/core/src/test/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecAdapterTest.java
Patch:
@@ -192,6 +192,7 @@ private static MediaCodec.CodecException createCodecException() throws Exception
     Constructor<MediaCodec.CodecException> constructor =
         MediaCodec.CodecException.class.getDeclaredConstructor(
             Integer.TYPE, Integer.TYPE, String.class);
+    constructor.setAccessible(true);
     return constructor.newInstance(
         /* errorCode= */ 0, /* actionCode= */ 0, /* detailMessage= */ "error from codec");
   }

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/mediacodec/AsynchronousMediaCodecAdapterTest.java
Patch:
@@ -192,6 +192,7 @@ private static MediaCodec.CodecException createCodecException() throws Exception
     Constructor<MediaCodec.CodecException> constructor =
         MediaCodec.CodecException.class.getDeclaredConstructor(
             Integer.TYPE, Integer.TYPE, String.class);
+    constructor.setAccessible(true);
     return constructor.newInstance(
         /* errorCode= */ 0, /* actionCode= */ 0, /* detailMessage= */ "error from codec");
   }

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/FinalMatrixShaderProgramWrapper.java
Patch:
@@ -184,7 +184,6 @@ public void releaseOutputFrame(long releaseTimeNs) {
   @Override
   public void signalEndOfCurrentInputStream() {
     checkState(!streamOffsetUsQueue.isEmpty(), "No input stream to end.");
-    android.util.Log.e("LYC", "Signal end");
     streamOffsetUsQueue.remove();
     if (streamOffsetUsQueue.isEmpty()) {
       frameProcessorListenerExecutor.execute(frameProcessorListener::onFrameProcessingEnded);

File: library/common/src/main/java/com/google/android/exoplayer2/util/FrameProcessor.java
Patch:
@@ -49,6 +49,8 @@ interface Factory {
      * @param debugViewProvider A {@link DebugViewProvider}.
      * @param inputColorInfo The {@link ColorInfo} for input frames.
      * @param outputColorInfo The {@link ColorInfo} for output frames.
+     * @param inputTrackType The {@link C.TrackType} of the input. Supported track types are {@link
+     *     C#TRACK_TYPE_VIDEO} and {@link C#TRACK_TYPE_IMAGE}.
      * @param releaseFramesAutomatically If {@code true}, the {@link FrameProcessor} will render
      *     output frames to the {@linkplain #setOutputSurfaceInfo(SurfaceInfo) output surface}
      *     automatically as {@link FrameProcessor} is done processing them. If {@code false}, the
@@ -66,6 +68,7 @@ FrameProcessor create(
         DebugViewProvider debugViewProvider,
         ColorInfo inputColorInfo,
         ColorInfo outputColorInfo,
+        @C.TrackType int inputTrackType,
         boolean releaseFramesAutomatically,
         Executor executor,
         Listener listener)

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -1982,6 +1982,7 @@ public boolean maybeEnable(Format inputFormat) throws ExoPlaybackException {
                     DebugViewProvider.NONE,
                     inputColorInfo,
                     outputColorInfo,
+                    C.TRACK_TYPE_VIDEO,
                     /* releaseFramesAutomatically= */ false,
                     /* executor= */ handler::post,
                     new FrameProcessor.Listener() {

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/GlEffectsFrameProcessorFrameReleaseTest.java
Patch:
@@ -25,6 +25,7 @@
 import android.media.ImageReader;
 import androidx.annotation.Nullable;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
+import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.util.DebugViewProvider;
 import com.google.android.exoplayer2.util.FrameInfo;
 import com.google.android.exoplayer2.util.FrameProcessingException;
@@ -295,6 +296,7 @@ private void processFramesToEndOfStream(
                     DebugViewProvider.NONE,
                     /* inputColorInfo= */ ColorInfo.SDR_BT709_LIMITED,
                     /* outputColorInfo= */ ColorInfo.SDR_BT709_LIMITED,
+                    C.TRACK_TYPE_VIDEO,
                     releaseFramesAutomatically,
                     MoreExecutors.directExecutor(),
                     new FrameProcessor.Listener() {

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/GlEffectsFrameProcessor.java
Patch:
@@ -94,6 +94,7 @@ public GlEffectsFrameProcessor create(
         DebugViewProvider debugViewProvider,
         ColorInfo inputColorInfo,
         ColorInfo outputColorInfo,
+        @C.TrackType int inputTrackType,
         boolean releaseFramesAutomatically,
         Executor listenerExecutor,
         Listener listener)

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoSamplePipeline.java
Patch:
@@ -154,6 +154,7 @@ public VideoSamplePipeline(
               debugViewProvider,
               frameProcessorInputColor,
               frameProcessorOutputColor,
+              MimeTypes.getTrackType(firstInputFormat.sampleMimeType),
               /* releaseFramesAutomatically= */ true,
               MoreExecutors.directExecutor(),
               new FrameProcessor.Listener() {

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FrameProcessorTestRunner.java
Patch:
@@ -28,6 +28,7 @@
 import android.media.ImageReader;
 import android.media.MediaFormat;
 import androidx.annotation.RequiresApi;
+import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.util.DebugViewProvider;
 import com.google.android.exoplayer2.util.Effect;
 import com.google.android.exoplayer2.util.FrameInfo;
@@ -223,6 +224,7 @@ private FrameProcessorTestRunner(
             DebugViewProvider.NONE,
             inputColorInfo,
             outputColorInfo,
+            C.TRACK_TYPE_VIDEO,
             /* releaseFramesAutomatically= */ true,
             MoreExecutors.directExecutor(),
             new FrameProcessor.Listener() {

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/TransformerEndToEndTest.java
Patch:
@@ -154,11 +154,10 @@ public Codec createForAudioEncoding(Format format) throws TransformationExceptio
     public Codec createForVideoEncoding(Format format) throws TransformationException {
       throw TransformationException.createForCodec(
           new IllegalArgumentException(),
+          TransformationException.ERROR_CODE_ENCODER_INIT_FAILED,
           /* isVideo= */ true,
           /* isDecoder= */ false,
-          format,
-          /* mediaCodecName= */ null,
-          TransformationException.ERROR_CODE_ENCODER_INIT_FAILED);
+          format);
     }
 
     @Override

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultDecoderFactory.java
Patch:
@@ -112,10 +112,9 @@ public Codec createForVideoDecoding(
   private static TransformationException createTransformationException(Format format) {
     return TransformationException.createForCodec(
         new IllegalArgumentException("The requested decoding format is not supported."),
+        TransformationException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED,
         MimeTypes.isVideo(format.sampleMimeType),
         /* isDecoder= */ true,
-        format,
-        /* mediaCodecName= */ null,
-        TransformationException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED);
+        format);
   }
 }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultEncoderFactory.java
Patch:
@@ -676,10 +676,9 @@ private static TransformationException createTransformationException(
       Format format, @TransformationException.ErrorCode int errorCode) {
     return TransformationException.createForCodec(
         new IllegalArgumentException("The requested encoding format is not supported."),
+        errorCode,
         MimeTypes.isVideo(format.sampleMimeType),
         /* isDecoder= */ false,
-        format,
-        /* mediaCodecName= */ null,
-        errorCode);
+        format);
   }
 }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/SamplePipeline.java
Patch:
@@ -48,11 +48,10 @@ protected static TransformationException createNoSupportedMimeTypeException(
       Format requestedEncoderFormat) {
     return TransformationException.createForCodec(
         new IllegalArgumentException("No MIME type is supported by both encoder and muxer."),
+        TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED,
         MimeTypes.isVideo(requestedEncoderFormat.sampleMimeType),
         /* isDecoder= */ false,
-        requestedEncoderFormat,
-        /* mediaCodecName= */ null,
-        TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED);
+        requestedEncoderFormat);
   }
 
   @Override

File: libraries/effect/src/main/java/androidx/media3/effect/FinalMatrixShaderProgramWrapper.java
Patch:
@@ -184,7 +184,6 @@ public void releaseOutputFrame(long releaseTimeNs) {
   @Override
   public void signalEndOfCurrentInputStream() {
     checkState(!streamOffsetUsQueue.isEmpty(), "No input stream to end.");
-    android.util.Log.e("LYC", "Signal end");
     streamOffsetUsQueue.remove();
     if (streamOffsetUsQueue.isEmpty()) {
       frameProcessorListenerExecutor.execute(frameProcessorListener::onFrameProcessingEnded);

File: libraries/common/src/main/java/androidx/media3/common/FrameProcessor.java
Patch:
@@ -50,6 +50,8 @@ interface Factory {
      * @param debugViewProvider A {@link DebugViewProvider}.
      * @param inputColorInfo The {@link ColorInfo} for input frames.
      * @param outputColorInfo The {@link ColorInfo} for output frames.
+     * @param inputTrackType The {@link C.TrackType} of the input. Supported track types are {@link
+     *     C#TRACK_TYPE_VIDEO} and {@link C#TRACK_TYPE_IMAGE}.
      * @param releaseFramesAutomatically If {@code true}, the {@link FrameProcessor} will render
      *     output frames to the {@linkplain #setOutputSurfaceInfo(SurfaceInfo) output surface}
      *     automatically as {@link FrameProcessor} is done processing them. If {@code false}, the
@@ -67,6 +69,7 @@ FrameProcessor create(
         DebugViewProvider debugViewProvider,
         ColorInfo inputColorInfo,
         ColorInfo outputColorInfo,
+        @C.TrackType int inputTrackType,
         boolean releaseFramesAutomatically,
         Executor executor,
         Listener listener)

File: libraries/effect/src/androidTest/java/androidx/media3/effect/GlEffectsFrameProcessorFrameReleaseTest.java
Patch:
@@ -24,6 +24,7 @@
 import android.media.Image;
 import android.media.ImageReader;
 import androidx.annotation.Nullable;
+import androidx.media3.common.C;
 import androidx.media3.common.ColorInfo;
 import androidx.media3.common.DebugViewProvider;
 import androidx.media3.common.FrameInfo;
@@ -295,6 +296,7 @@ private void processFramesToEndOfStream(
                     DebugViewProvider.NONE,
                     /* inputColorInfo= */ ColorInfo.SDR_BT709_LIMITED,
                     /* outputColorInfo= */ ColorInfo.SDR_BT709_LIMITED,
+                    C.TRACK_TYPE_VIDEO,
                     releaseFramesAutomatically,
                     MoreExecutors.directExecutor(),
                     new FrameProcessor.Listener() {

File: libraries/effect/src/main/java/androidx/media3/effect/GlEffectsFrameProcessor.java
Patch:
@@ -96,6 +96,7 @@ public GlEffectsFrameProcessor create(
         DebugViewProvider debugViewProvider,
         ColorInfo inputColorInfo,
         ColorInfo outputColorInfo,
+        @C.TrackType int inputTrackType,
         boolean releaseFramesAutomatically,
         Executor listenerExecutor,
         Listener listener)

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/MediaCodecVideoRenderer.java
Patch:
@@ -1986,6 +1986,7 @@ public boolean maybeEnable(Format inputFormat) throws ExoPlaybackException {
                     DebugViewProvider.NONE,
                     inputColorInfo,
                     outputColorInfo,
+                    C.TRACK_TYPE_VIDEO,
                     /* releaseFramesAutomatically= */ false,
                     /* executor= */ handler::post,
                     new FrameProcessor.Listener() {

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FrameProcessorTestRunner.java
Patch:
@@ -28,6 +28,7 @@
 import android.media.ImageReader;
 import android.media.MediaFormat;
 import androidx.annotation.RequiresApi;
+import androidx.media3.common.C;
 import androidx.media3.common.ColorInfo;
 import androidx.media3.common.DebugViewProvider;
 import androidx.media3.common.Effect;
@@ -225,6 +226,7 @@ private FrameProcessorTestRunner(
             DebugViewProvider.NONE,
             inputColorInfo,
             outputColorInfo,
+            C.TRACK_TYPE_VIDEO,
             /* releaseFramesAutomatically= */ true,
             MoreExecutors.directExecutor(),
             new FrameProcessor.Listener() {

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoSamplePipeline.java
Patch:
@@ -154,6 +154,7 @@ public VideoSamplePipeline(
               debugViewProvider,
               frameProcessorInputColor,
               frameProcessorOutputColor,
+              MimeTypes.getTrackType(firstInputFormat.sampleMimeType),
               /* releaseFramesAutomatically= */ true,
               MoreExecutors.directExecutor(),
               new FrameProcessor.Listener() {

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/TransformerEndToEndTest.java
Patch:
@@ -154,11 +154,10 @@ public Codec createForAudioEncoding(Format format) throws TransformationExceptio
     public Codec createForVideoEncoding(Format format) throws TransformationException {
       throw TransformationException.createForCodec(
           new IllegalArgumentException(),
+          TransformationException.ERROR_CODE_ENCODER_INIT_FAILED,
           /* isVideo= */ true,
           /* isDecoder= */ false,
-          format,
-          /* mediaCodecName= */ null,
-          TransformationException.ERROR_CODE_ENCODER_INIT_FAILED);
+          format);
     }
 
     @Override

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultDecoderFactory.java
Patch:
@@ -112,10 +112,9 @@ public Codec createForVideoDecoding(
   private static TransformationException createTransformationException(Format format) {
     return TransformationException.createForCodec(
         new IllegalArgumentException("The requested decoding format is not supported."),
+        TransformationException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED,
         MimeTypes.isVideo(format.sampleMimeType),
         /* isDecoder= */ true,
-        format,
-        /* mediaCodecName= */ null,
-        TransformationException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED);
+        format);
   }
 }

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultEncoderFactory.java
Patch:
@@ -678,10 +678,9 @@ private static TransformationException createTransformationException(
       Format format, @TransformationException.ErrorCode int errorCode) {
     return TransformationException.createForCodec(
         new IllegalArgumentException("The requested encoding format is not supported."),
+        errorCode,
         MimeTypes.isVideo(format.sampleMimeType),
         /* isDecoder= */ false,
-        format,
-        /* mediaCodecName= */ null,
-        errorCode);
+        format);
   }
 }

File: libraries/transformer/src/main/java/androidx/media3/transformer/SamplePipeline.java
Patch:
@@ -48,11 +48,10 @@ protected static TransformationException createNoSupportedMimeTypeException(
       Format requestedEncoderFormat) {
     return TransformationException.createForCodec(
         new IllegalArgumentException("No MIME type is supported by both encoder and muxer."),
+        TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED,
         MimeTypes.isVideo(requestedEncoderFormat.sampleMimeType),
         /* isDecoder= */ false,
-        requestedEncoderFormat,
-        /* mediaCodecName= */ null,
-        TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED);
+        requestedEncoderFormat);
   }
 
   @Override

File: libraries/ui_leanback/src/main/java/androidx/media3/ui/leanback/LeanbackPlayerAdapter.java
Patch:
@@ -110,9 +110,9 @@ public void onDetachedFromHost() {
   }
 
   @Override
-  public void setProgressUpdatingEnabled(boolean enabled) {
+  public void setProgressUpdatingEnabled(boolean enable) {
     handler.removeCallbacks(this);
-    if (enabled) {
+    if (enable) {
       handler.post(this);
     }
   }

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -1675,15 +1675,15 @@ public void resetFragmentInfo() {
     }
 
     /**
-     * Advances {@link #firstSampleToOutputIndex} to point to the sync sample before the specified
-     * seek time in the current fragment.
+     * Advances {@link #firstSampleToOutputIndex} to point to the sync sample at or before the
+     * specified seek time in the current fragment.
      *
      * @param timeUs The seek time, in microseconds.
      */
     public void seek(long timeUs) {
       int searchIndex = currentSampleIndex;
       while (searchIndex < fragment.sampleCount
-          && fragment.getSamplePresentationTimeUs(searchIndex) < timeUs) {
+          && fragment.getSamplePresentationTimeUs(searchIndex) <= timeUs) {
         if (fragment.sampleIsSyncFrameTable[searchIndex]) {
           firstSampleToOutputIndex = searchIndex;
         }

File: extensions/leanback/src/main/java/com/google/android/exoplayer2/ext/leanback/LeanbackPlayerAdapter.java
Patch:
@@ -110,9 +110,9 @@ public void onDetachedFromHost() {
   }
 
   @Override
-  public void setProgressUpdatingEnabled(boolean enabled) {
+  public void setProgressUpdatingEnabled(boolean enable) {
     handler.removeCallbacks(this);
-    if (enabled) {
+    if (enable) {
       handler.post(this);
     }
   }

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -1673,15 +1673,15 @@ public void resetFragmentInfo() {
     }
 
     /**
-     * Advances {@link #firstSampleToOutputIndex} to point to the sync sample before the specified
-     * seek time in the current fragment.
+     * Advances {@link #firstSampleToOutputIndex} to point to the sync sample at or before the
+     * specified seek time in the current fragment.
      *
      * @param timeUs The seek time, in microseconds.
      */
     public void seek(long timeUs) {
       int searchIndex = currentSampleIndex;
       while (searchIndex < fragment.sampleCount
-          && fragment.getSamplePresentationTimeUs(searchIndex) < timeUs) {
+          && fragment.getSamplePresentationTimeUs(searchIndex) <= timeUs) {
         if (fragment.sampleIsSyncFrameTable[searchIndex]) {
           firstSampleToOutputIndex = searchIndex;
         }

File: extensions/leanback/src/main/java/com/google/android/exoplayer2/ext/leanback/LeanbackPlayerAdapter.java
Patch:
@@ -110,9 +110,9 @@ public void onDetachedFromHost() {
   }
 
   @Override
-  public void setProgressUpdatingEnabled(boolean enabled) {
+  public void setProgressUpdatingEnabled(boolean enable) {
     handler.removeCallbacks(this);
-    if (enabled) {
+    if (enable) {
       handler.post(this);
     }
   }

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -738,9 +738,9 @@ public SurfaceView getDebugPreviewSurfaceView(int width, int height) {
 
       // Update the UI on the main thread and wait for the output surface to be available.
       CountDownLatch surfaceCreatedCountDownLatch = new CountDownLatch(1);
-      SurfaceView surfaceView = new SurfaceView(/* context= */ TransformerActivity.this);
       runOnUiThread(
           () -> {
+            surfaceView = new SurfaceView(/* context= */ TransformerActivity.this);
             AspectRatioFrameLayout debugFrame = checkNotNull(TransformerActivity.this.debugFrame);
             debugFrame.addView(surfaceView);
             debugFrame.setAspectRatio((float) width / height);
@@ -772,7 +772,6 @@ public void surfaceDestroyed(SurfaceHolder surfaceHolder) {
         Thread.currentThread().interrupt();
         return null;
       }
-      this.surfaceView = surfaceView;
       return surfaceView;
     }
   }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/CompositeAssetLoader.java
Patch:
@@ -153,7 +153,9 @@ public SampleConsumer onTrackAdded(
       sampleConsumersByTrackType.put(trackType, sampleConsumer);
       return sampleConsumer;
     }
-    return checkStateNotNull(sampleConsumersByTrackType.get(trackType));
+    return checkStateNotNull(
+        sampleConsumersByTrackType.get(trackType),
+        "The preceding MediaItem does not contain any track of type " + trackType);
   }
 
   @Override

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -1673,15 +1673,15 @@ public void resetFragmentInfo() {
     }
 
     /**
-     * Advances {@link #firstSampleToOutputIndex} to point to the sync sample before the specified
-     * seek time in the current fragment.
+     * Advances {@link #firstSampleToOutputIndex} to point to the sync sample at or before the
+     * specified seek time in the current fragment.
      *
      * @param timeUs The seek time, in microseconds.
      */
     public void seek(long timeUs) {
       int searchIndex = currentSampleIndex;
       while (searchIndex < fragment.sampleCount
-          && fragment.getSamplePresentationTimeUs(searchIndex) < timeUs) {
+          && fragment.getSamplePresentationTimeUs(searchIndex) <= timeUs) {
         if (fragment.sampleIsSyncFrameTable[searchIndex]) {
           firstSampleToOutputIndex = searchIndex;
         }

File: libraries/ui_leanback/src/main/java/androidx/media3/ui/leanback/LeanbackPlayerAdapter.java
Patch:
@@ -112,9 +112,9 @@ public void onDetachedFromHost() {
   }
 
   @Override
-  public void setProgressUpdatingEnabled(boolean enabled) {
+  public void setProgressUpdatingEnabled(boolean enable) {
     handler.removeCallbacks(this);
-    if (enabled) {
+    if (enable) {
       handler.post(this);
     }
   }

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -737,9 +737,9 @@ public SurfaceView getDebugPreviewSurfaceView(int width, int height) {
 
       // Update the UI on the main thread and wait for the output surface to be available.
       CountDownLatch surfaceCreatedCountDownLatch = new CountDownLatch(1);
-      SurfaceView surfaceView = new SurfaceView(/* context= */ TransformerActivity.this);
       runOnUiThread(
           () -> {
+            surfaceView = new SurfaceView(/* context= */ TransformerActivity.this);
             AspectRatioFrameLayout debugFrame = checkNotNull(TransformerActivity.this.debugFrame);
             debugFrame.addView(surfaceView);
             debugFrame.setAspectRatio((float) width / height);
@@ -771,7 +771,6 @@ public void surfaceDestroyed(SurfaceHolder surfaceHolder) {
         Thread.currentThread().interrupt();
         return null;
       }
-      this.surfaceView = surfaceView;
       return surfaceView;
     }
   }

File: libraries/transformer/src/main/java/androidx/media3/transformer/CompositeAssetLoader.java
Patch:
@@ -153,7 +153,9 @@ public SampleConsumer onTrackAdded(
       sampleConsumersByTrackType.put(trackType, sampleConsumer);
       return sampleConsumer;
     }
-    return checkStateNotNull(sampleConsumersByTrackType.get(trackType));
+    return checkStateNotNull(
+        sampleConsumersByTrackType.get(trackType),
+        "The preceding MediaItem does not contain any track of type " + trackType);
   }
 
   @Override

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -1675,15 +1675,15 @@ public void resetFragmentInfo() {
     }
 
     /**
-     * Advances {@link #firstSampleToOutputIndex} to point to the sync sample before the specified
-     * seek time in the current fragment.
+     * Advances {@link #firstSampleToOutputIndex} to point to the sync sample at or before the
+     * specified seek time in the current fragment.
      *
      * @param timeUs The seek time, in microseconds.
      */
     public void seek(long timeUs) {
       int searchIndex = currentSampleIndex;
       while (searchIndex < fragment.sampleCount
-          && fragment.getSamplePresentationTimeUs(searchIndex) < timeUs) {
+          && fragment.getSamplePresentationTimeUs(searchIndex) <= timeUs) {
         if (fragment.sampleIsSyncFrameTable[searchIndex]) {
           firstSampleToOutputIndex = searchIndex;
         }

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaUtil.java
Patch:
@@ -270,6 +270,7 @@ public static Looper getImaLooper() {
   }
 
   /** Returns a human-readable representation of a video progress update. */
+  @SuppressWarnings("RestrictedApi") // VideoProgressUpdate.equals() is annotated as hidden.
   public static String getStringForVideoProgressUpdate(VideoProgressUpdate videoProgressUpdate) {
     if (VideoProgressUpdate.VIDEO_TIME_NOT_READY.equals(videoProgressUpdate)) {
       return "not ready";

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaUtil.java
Patch:
@@ -270,6 +270,7 @@ public static Looper getImaLooper() {
   }
 
   /** Returns a human-readable representation of a video progress update. */
+  @SuppressWarnings("RestrictedApi") // VideoProgressUpdate.equals() is annotated as hidden.
   public static String getStringForVideoProgressUpdate(VideoProgressUpdate videoProgressUpdate) {
     if (VideoProgressUpdate.VIDEO_TIME_NOT_READY.equals(videoProgressUpdate)) {
       return "not ready";

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaUtil.java
Patch:
@@ -270,6 +270,7 @@ public static Looper getImaLooper() {
   }
 
   /** Returns a human-readable representation of a video progress update. */
+  @SuppressWarnings("RestrictedApi") // VideoProgressUpdate.equals() is annotated as hidden.
   public static String getStringForVideoProgressUpdate(VideoProgressUpdate videoProgressUpdate) {
     if (VideoProgressUpdate.VIDEO_TIME_NOT_READY.equals(videoProgressUpdate)) {
       return "not ready";

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaUtil.java
Patch:
@@ -270,6 +270,7 @@ public static Looper getImaLooper() {
   }
 
   /** Returns a human-readable representation of a video progress update. */
+  @SuppressWarnings("RestrictedApi") // VideoProgressUpdate.equals() is annotated as hidden.
   public static String getStringForVideoProgressUpdate(VideoProgressUpdate videoProgressUpdate) {
     if (VideoProgressUpdate.VIDEO_TIME_NOT_READY.equals(videoProgressUpdate)) {
       return "not ready";

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -1650,16 +1650,16 @@ private int writeSampleData(ExtractorInput input, Track track, int size, boolean
   }
 
   /**
-   * Called by {@link #writeSampleData(ExtractorInput, Track, int)} when the sample has been
-   * written. Returns the final sample size and resets state for the next sample.
+   * Called by {@link #writeSampleData(ExtractorInput, Track, int, boolean)} when the sample has
+   * been written. Returns the final sample size and resets state for the next sample.
    */
   private int finishWriteSampleData() {
     int sampleSize = sampleBytesWritten;
     resetWriteSampleData();
     return sampleSize;
   }
 
-  /** Resets state used by {@link #writeSampleData(ExtractorInput, Track, int)}. */
+  /** Resets state used by {@link #writeSampleData(ExtractorInput, Track, int, boolean)}. */
   private void resetWriteSampleData() {
     sampleBytesRead = 0;
     sampleBytesWritten = 0;

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -211,7 +211,9 @@ public Builder(Context context, AdViewProvider adViewProvider) {
       /**
        * Sets the IMA SDK settings.
        *
-       * <p>If this method is not called the default settings will be used.
+       * <p>If this method is not called, the {@linkplain ImaSdkFactory#createImaSdkSettings()
+       * default settings} will be used with the language set to {@linkplain
+       * Util#getSystemLanguageCodes() the preferred system language}.
        *
        * @param imaSdkSettings The {@link ImaSdkSettings}.
        * @return This builder, for convenience.

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaUtil.java
Patch:
@@ -166,6 +166,7 @@ public static final class ServerSideAdInsertionConfiguration {
     @Nullable public final AdEvent.AdEventListener applicationAdEventListener;
     @Nullable public final AdErrorEvent.AdErrorListener applicationAdErrorListener;
     public final ImmutableList<CompanionAdSlot> companionAdSlots;
+    public final boolean focusSkipButtonWhenAvailable;
     public final boolean debugModeEnabled;
 
     public ServerSideAdInsertionConfiguration(
@@ -174,12 +175,14 @@ public ServerSideAdInsertionConfiguration(
         @Nullable AdEvent.AdEventListener applicationAdEventListener,
         @Nullable AdErrorEvent.AdErrorListener applicationAdErrorListener,
         List<CompanionAdSlot> companionAdSlots,
+        boolean focusSkipButtonWhenAvailable,
         boolean debugModeEnabled) {
       this.imaSdkSettings = imaSdkSettings;
       this.adViewProvider = adViewProvider;
       this.applicationAdEventListener = applicationAdEventListener;
       this.applicationAdErrorListener = applicationAdErrorListener;
       this.companionAdSlots = ImmutableList.copyOf(companionAdSlots);
+      this.focusSkipButtonWhenAvailable = focusSkipButtonWhenAvailable;
       this.debugModeEnabled = debugModeEnabled;
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
Patch:
@@ -841,7 +841,7 @@ private Builder(Bundle bundle) {
         // Audio
         setExceedAudioConstraintsIfNecessary(
             bundle.getBoolean(
-                Parameters.keyForField(Parameters.FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NCESSARY),
+                Parameters.keyForField(Parameters.FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NECESSARY),
                 defaultValue.exceedAudioConstraintsIfNecessary));
         setAllowAudioMixedMimeTypeAdaptiveness(
             bundle.getBoolean(
@@ -1874,7 +1874,7 @@ public int hashCode() {
     private static final int FIELD_ALLOW_VIDEO_MIXED_MIME_TYPE_ADAPTIVENESS =
         FIELD_CUSTOM_ID_BASE + 1;
     private static final int FIELD_ALLOW_VIDEO_NON_SEAMLESS_ADAPTIVENESS = FIELD_CUSTOM_ID_BASE + 2;
-    private static final int FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NCESSARY = FIELD_CUSTOM_ID_BASE + 3;
+    private static final int FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NECESSARY = FIELD_CUSTOM_ID_BASE + 3;
     private static final int FIELD_ALLOW_AUDIO_MIXED_MIME_TYPE_ADAPTIVENESS =
         FIELD_CUSTOM_ID_BASE + 4;
     private static final int FIELD_ALLOW_AUDIO_MIXED_SAMPLE_RATE_ADAPTIVENESS =
@@ -1916,7 +1916,7 @@ public Bundle toBundle() {
           allowVideoMixedDecoderSupportAdaptiveness);
       // Audio
       bundle.putBoolean(
-          keyForField(FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NCESSARY),
+          keyForField(FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NECESSARY),
           exceedAudioConstraintsIfNecessary);
       bundle.putBoolean(
           keyForField(FIELD_ALLOW_AUDIO_MIXED_MIME_TYPE_ADAPTIVENESS),

File: library/common/src/test/java/com/google/android/exoplayer2/MediaMetadataTest.java
Patch:
@@ -112,12 +112,11 @@ public void toBundleSkipsDefaultValues_fromBundleRestoresThem() {
 
     Bundle mediaMetadataBundle = mediaMetadata.toBundle();
 
-    // check Bundle created above, contains no keys.
+    // Check that default values are skipped when bundling.
     assertThat(mediaMetadataBundle.keySet()).isEmpty();
 
     MediaMetadata mediaMetadataFromBundle = MediaMetadata.CREATOR.fromBundle(mediaMetadataBundle);
 
-    // check object retrieved from mediaMetadataBundle is equal to mediaMetadata.
     assertThat(mediaMetadataFromBundle).isEqualTo(mediaMetadata);
     // Extras is not implemented in MediaMetadata.equals(Object o).
     assertThat(mediaMetadataFromBundle.extras).isNull();

File: library/common/src/test/java/com/google/android/exoplayer2/source/ads/AdPlaybackStateTest.java
Patch:
@@ -422,13 +422,12 @@ public void adPlaybackStateWithNoAds_toBundleSkipsDefaultValues_fromBundleRestor
 
     Bundle adPlaybackStateWithNoAdsBundle = adPlaybackStateWithNoAds.toBundle();
 
-    // check Bundle created above, contains no keys.
+    // Check that default values are skipped when bundling.
     assertThat(adPlaybackStateWithNoAdsBundle.keySet()).isEmpty();
 
     AdPlaybackState adPlaybackStateWithNoAdsFromBundle =
         AdPlaybackState.CREATOR.fromBundle(adPlaybackStateWithNoAdsBundle);
 
-    // check object retrieved from adPlaybackStateWithNoAdsBundle is equal to AdPlaybackState.NONE
     assertThat(adPlaybackStateWithNoAdsFromBundle.adsId).isEqualTo(adPlaybackStateWithNoAds.adsId);
     assertThat(adPlaybackStateWithNoAdsFromBundle.adGroupCount)
         .isEqualTo(adPlaybackStateWithNoAds.adGroupCount);

File: extensions/leanback/src/main/java/com/google/android/exoplayer2/ext/leanback/LeanbackPlayerAdapter.java
Patch:
@@ -162,8 +162,8 @@ public void pause() {
   }
 
   @Override
-  public void seekTo(long positionMs) {
-    player.seekTo(player.getCurrentMediaItemIndex(), positionMs);
+  public void seekTo(long positionInMs) {
+    player.seekTo(player.getCurrentMediaItemIndex(), positionInMs);
   }
 
   @Override

File: library/common/src/main/java/com/google/android/exoplayer2/SimpleBasePlayer.java
Patch:
@@ -1981,8 +1981,7 @@ public final void addListener(Listener listener) {
 
   @Override
   public final void removeListener(Listener listener) {
-    // Don't verify application thread. We allow calls to this method from any thread.
-    checkNotNull(listener);
+    verifyApplicationThreadAndInitState();
     listeners.remove(listener);
   }
 

File: robolectricutils/src/main/java/com/google/android/exoplayer2/robolectric/RobolectricUtil.java
Patch:
@@ -94,7 +94,7 @@ public static void runMainLooperUntil(Supplier<Boolean> condition, long timeoutM
    */
   public static void runLooperUntil(Looper looper, Supplier<Boolean> condition)
       throws TimeoutException {
-    runLooperUntil(looper, condition, DEFAULT_TIMEOUT_MS * 1000000, Clock.DEFAULT);
+    runLooperUntil(looper, condition, DEFAULT_TIMEOUT_MS, Clock.DEFAULT);
   }
 
   /**

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/VideoEncoderWrapperTest.java
Patch:
@@ -45,6 +45,7 @@ public final class VideoEncoderWrapperTest {
       new FallbackListener(
           MediaItem.fromUri(Uri.EMPTY),
           new ListenerSet<>(Looper.myLooper(), Clock.DEFAULT, (listener, flags) -> {}),
+          Clock.DEFAULT.createHandler(Looper.myLooper(), /* callback= */ null),
           emptyTransformationRequest);
   private final VideoTranscodingSamplePipeline.EncoderWrapper encoderWrapper =
       new VideoTranscodingSamplePipeline.EncoderWrapper(

File: libraries/extractor/src/main/java/androidx/media3/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -1652,16 +1652,16 @@ private int writeSampleData(ExtractorInput input, Track track, int size, boolean
   }
 
   /**
-   * Called by {@link #writeSampleData(ExtractorInput, Track, int)} when the sample has been
-   * written. Returns the final sample size and resets state for the next sample.
+   * Called by {@link #writeSampleData(ExtractorInput, Track, int, boolean)} when the sample has
+   * been written. Returns the final sample size and resets state for the next sample.
    */
   private int finishWriteSampleData() {
     int sampleSize = sampleBytesWritten;
     resetWriteSampleData();
     return sampleSize;
   }
 
-  /** Resets state used by {@link #writeSampleData(ExtractorInput, Track, int)}. */
+  /** Resets state used by {@link #writeSampleData(ExtractorInput, Track, int, boolean)}. */
   private void resetWriteSampleData() {
     sampleBytesRead = 0;
     sampleBytesWritten = 0;

File: libraries/session/src/main/java/androidx/media3/session/MediaSession.java
Patch:
@@ -1155,9 +1155,7 @@ default void onPlayerChanged(
     default void onPlayerInfoChanged(
         int seq,
         PlayerInfo playerInfo,
-        boolean excludeMediaItems,
-        boolean excludeMediaItemsMetadata,
-        boolean excludeCues,
+        Player.Commands availableCommands,
         boolean excludeTimeline,
         boolean excludeTracks,
         int controllerInterfaceVersion)

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -213,7 +213,9 @@ public Builder(Context context, AdViewProvider adViewProvider) {
       /**
        * Sets the IMA SDK settings.
        *
-       * <p>If this method is not called the default settings will be used.
+       * <p>If this method is not called, the {@linkplain ImaSdkFactory#createImaSdkSettings()
+       * default settings} will be used with the language set to {@linkplain
+       * Util#getSystemLanguageCodes() the preferred system language}.
        *
        * @param imaSdkSettings The {@link ImaSdkSettings}.
        * @return This builder, for convenience.

File: libraries/session/src/main/java/androidx/media3/session/MediaControllerImplBase.java
Patch:
@@ -1468,7 +1468,7 @@ public void decreaseDeviceVolume() {
 
   @Override
   public void setDeviceMuted(boolean muted) {
-    if (!isPlayerCommandAvailable(Player.COMMAND_SET_DEVICE_VOLUME)) {
+    if (!isPlayerCommandAvailable(Player.COMMAND_ADJUST_DEVICE_VOLUME)) {
       return;
     }
 

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionStub.java
Patch:
@@ -1324,7 +1324,7 @@ public void setDeviceMuted(@Nullable IMediaController caller, int sequenceNumber
     queueSessionTaskWithPlayerCommand(
         caller,
         sequenceNumber,
-        COMMAND_SET_DEVICE_VOLUME,
+        COMMAND_ADJUST_DEVICE_VOLUME,
         sendSessionResultSuccess(player -> player.setDeviceMuted(muted)));
   }
 

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaSessionPermissionTest.java
Patch:
@@ -185,7 +185,8 @@ public void decreaseDeviceVolume() throws Exception {
 
   @Test
   public void setDeviceMuted() throws Exception {
-    testOnCommandRequest(COMMAND_SET_DEVICE_VOLUME, controller -> controller.setDeviceMuted(true));
+    testOnCommandRequest(
+        COMMAND_ADJUST_DEVICE_VOLUME, controller -> controller.setDeviceMuted(true));
   }
 
   @Test

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionLegacyStub.java
Patch:
@@ -313,7 +313,9 @@ public void onPlay() {
             playerWrapper.seekTo(
                 playerWrapper.getCurrentMediaItemIndex(), /* positionMs= */ C.TIME_UNSET);
           }
-          playerWrapper.play();
+          if (sessionImpl.onPlayRequested()) {
+            playerWrapper.play();
+          }
         },
         sessionCompat.getCurrentControllerInfo());
   }

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaUtil.java
Patch:
@@ -166,6 +166,7 @@ public static final class ServerSideAdInsertionConfiguration {
     @Nullable public final AdEvent.AdEventListener applicationAdEventListener;
     @Nullable public final AdErrorEvent.AdErrorListener applicationAdErrorListener;
     public final ImmutableList<CompanionAdSlot> companionAdSlots;
+    public final boolean focusSkipButtonWhenAvailable;
     public final boolean debugModeEnabled;
 
     public ServerSideAdInsertionConfiguration(
@@ -174,12 +175,14 @@ public ServerSideAdInsertionConfiguration(
         @Nullable AdEvent.AdEventListener applicationAdEventListener,
         @Nullable AdErrorEvent.AdErrorListener applicationAdErrorListener,
         List<CompanionAdSlot> companionAdSlots,
+        boolean focusSkipButtonWhenAvailable,
         boolean debugModeEnabled) {
       this.imaSdkSettings = imaSdkSettings;
       this.adViewProvider = adViewProvider;
       this.applicationAdEventListener = applicationAdEventListener;
       this.applicationAdErrorListener = applicationAdErrorListener;
       this.companionAdSlots = ImmutableList.copyOf(companionAdSlots);
+      this.focusSkipButtonWhenAvailable = focusSkipButtonWhenAvailable;
       this.debugModeEnabled = debugModeEnabled;
     }
   }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/DefaultTrackSelector.java
Patch:
@@ -845,7 +845,7 @@ private Builder(Bundle bundle) {
         // Audio
         setExceedAudioConstraintsIfNecessary(
             bundle.getBoolean(
-                Parameters.keyForField(Parameters.FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NCESSARY),
+                Parameters.keyForField(Parameters.FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NECESSARY),
                 defaultValue.exceedAudioConstraintsIfNecessary));
         setAllowAudioMixedMimeTypeAdaptiveness(
             bundle.getBoolean(
@@ -1878,7 +1878,7 @@ public int hashCode() {
     private static final int FIELD_ALLOW_VIDEO_MIXED_MIME_TYPE_ADAPTIVENESS =
         FIELD_CUSTOM_ID_BASE + 1;
     private static final int FIELD_ALLOW_VIDEO_NON_SEAMLESS_ADAPTIVENESS = FIELD_CUSTOM_ID_BASE + 2;
-    private static final int FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NCESSARY = FIELD_CUSTOM_ID_BASE + 3;
+    private static final int FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NECESSARY = FIELD_CUSTOM_ID_BASE + 3;
     private static final int FIELD_ALLOW_AUDIO_MIXED_MIME_TYPE_ADAPTIVENESS =
         FIELD_CUSTOM_ID_BASE + 4;
     private static final int FIELD_ALLOW_AUDIO_MIXED_SAMPLE_RATE_ADAPTIVENESS =
@@ -1920,7 +1920,7 @@ public Bundle toBundle() {
           allowVideoMixedDecoderSupportAdaptiveness);
       // Audio
       bundle.putBoolean(
-          keyForField(FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NCESSARY),
+          keyForField(FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NECESSARY),
           exceedAudioConstraintsIfNecessary);
       bundle.putBoolean(
           keyForField(FIELD_ALLOW_AUDIO_MIXED_MIME_TYPE_ADAPTIVENESS),

File: libraries/common/src/test/java/androidx/media3/common/AdPlaybackStateTest.java
Patch:
@@ -421,13 +421,12 @@ public void adPlaybackStateWithNoAds_toBundleSkipsDefaultValues_fromBundleRestor
 
     Bundle adPlaybackStateWithNoAdsBundle = adPlaybackStateWithNoAds.toBundle();
 
-    // check Bundle created above, contains no keys.
+    // Check that default values are skipped when bundling.
     assertThat(adPlaybackStateWithNoAdsBundle.keySet()).isEmpty();
 
     AdPlaybackState adPlaybackStateWithNoAdsFromBundle =
         AdPlaybackState.CREATOR.fromBundle(adPlaybackStateWithNoAdsBundle);
 
-    // check object retrieved from adPlaybackStateWithNoAdsBundle is equal to AdPlaybackState.NONE
     assertThat(adPlaybackStateWithNoAdsFromBundle.adsId).isEqualTo(adPlaybackStateWithNoAds.adsId);
     assertThat(adPlaybackStateWithNoAdsFromBundle.adGroupCount)
         .isEqualTo(adPlaybackStateWithNoAds.adGroupCount);

File: libraries/common/src/test/java/androidx/media3/common/MediaMetadataTest.java
Patch:
@@ -112,12 +112,11 @@ public void toBundleSkipsDefaultValues_fromBundleRestoresThem() {
 
     Bundle mediaMetadataBundle = mediaMetadata.toBundle();
 
-    // check Bundle created above, contains no keys.
+    // Check that default values are skipped when bundling.
     assertThat(mediaMetadataBundle.keySet()).isEmpty();
 
     MediaMetadata mediaMetadataFromBundle = MediaMetadata.CREATOR.fromBundle(mediaMetadataBundle);
 
-    // check object retrieved from mediaMetadataBundle is equal to mediaMetadata.
     assertThat(mediaMetadataFromBundle).isEqualTo(mediaMetadata);
     // Extras is not implemented in MediaMetadata.equals(Object o).
     assertThat(mediaMetadataFromBundle.extras).isNull();

File: libraries/ui_leanback/src/main/java/androidx/media3/ui/leanback/LeanbackPlayerAdapter.java
Patch:
@@ -158,8 +158,8 @@ public void pause() {
   }
 
   @Override
-  public void seekTo(long positionMs) {
-    player.seekTo(player.getCurrentMediaItemIndex(), positionMs);
+  public void seekTo(long positionInMs) {
+    player.seekTo(player.getCurrentMediaItemIndex(), positionInMs);
   }
 
   @Override

File: libraries/common/src/main/java/androidx/media3/common/SimpleBasePlayer.java
Patch:
@@ -1978,8 +1978,7 @@ public final void addListener(Listener listener) {
 
   @Override
   public final void removeListener(Listener listener) {
-    // Don't verify application thread. We allow calls to this method from any thread.
-    checkNotNull(listener);
+    verifyApplicationThreadAndInitState();
     listeners.remove(listener);
   }
 

File: libraries/session/src/main/java/androidx/media3/session/MediaController.java
Patch:
@@ -1720,6 +1720,7 @@ public void setTrackSelectionParameters(TrackSelectionParameters parameters) {
 
   @Override
   public Looper getApplicationLooper() {
+    // Don't verify application thread. We allow calls to this method from any thread.
     return applicationHandler.getLooper();
   }
 
@@ -1744,12 +1745,14 @@ public Looper getApplicationLooper() {
 
   @Override
   public void addListener(Player.Listener listener) {
+    // Don't verify application thread. We allow calls to this method from any thread.
     checkNotNull(listener, "listener must not be null");
     impl.addListener(listener);
   }
 
   @Override
   public void removeListener(Player.Listener listener) {
+    verifyApplicationThread();
     checkNotNull(listener, "listener must not be null");
     impl.removeListener(listener);
   }

File: libraries/test_utils_robolectric/src/main/java/androidx/media3/test/utils/robolectric/RobolectricUtil.java
Patch:
@@ -96,7 +96,7 @@ public static void runMainLooperUntil(Supplier<Boolean> condition, long timeoutM
    */
   public static void runLooperUntil(Looper looper, Supplier<Boolean> condition)
       throws TimeoutException {
-    runLooperUntil(looper, condition, DEFAULT_TIMEOUT_MS * 1000000, Clock.DEFAULT);
+    runLooperUntil(looper, condition, DEFAULT_TIMEOUT_MS, Clock.DEFAULT);
   }
 
   /**

File: libraries/session/src/main/java/androidx/media3/session/MediaBrowserImplLegacy.java
Patch:
@@ -311,7 +311,8 @@ private MediaItem createRootMediaItem(MediaBrowserCompat browserCompat) {
     String mediaId = browserCompat.getRoot();
     MediaMetadata mediaMetadata =
         new MediaMetadata.Builder()
-            .setFolderType(MediaMetadata.FOLDER_TYPE_MIXED)
+            .setIsBrowsable(true)
+            .setMediaType(MediaMetadata.MEDIA_TYPE_FOLDER_MIXED)
             .setIsPlayable(false)
             .setExtras(browserCompat.getExtras())
             .build();

File: libraries/session/src/main/java/androidx/media3/session/MediaConstants.java
Patch:
@@ -213,7 +213,7 @@ public final class MediaConstants {
    * {@link MediaBrowser#getLibraryRoot}, the preference applies to all playable items within the
    * browse tree.
    *
-   * <p>If exposed through {@link MediaMetadata#extras} of a {@linkplain MediaMetadata#folderType
+   * <p>If exposed through {@link MediaMetadata#extras} of a {@linkplain MediaMetadata#isBrowsable
    * browsable media item}, the preference applies to only the immediate playable children. It takes
    * precedence over preferences received with {@link MediaBrowser#getLibraryRoot}.
    *
@@ -238,7 +238,7 @@ public final class MediaConstants {
    * {@link MediaBrowser#getLibraryRoot}, the preference applies to all browsable items within the
    * browse tree.
    *
-   * <p>If exposed through {@link MediaMetadata#extras} of a {@linkplain MediaMetadata#folderType
+   * <p>If exposed through {@link MediaMetadata#extras} of a {@linkplain MediaMetadata#isBrowsable
    * browsable media item}, the preference applies to only the immediate browsable children. It
    * takes precedence over preferences received with {@link
    * MediaBrowser#getLibraryRoot(LibraryParams)}.

File: libraries/session/src/main/java/androidx/media3/session/MediaLibraryService.java
Patch:
@@ -123,8 +123,9 @@ public static final class MediaLibrarySession extends MediaSession {
      * An extended {@link MediaSession.Callback} for the {@link MediaLibrarySession}.
      *
      * <p>When you return {@link LibraryResult} with {@link MediaItem media items}, each item must
-     * have valid {@link MediaItem#mediaId} and specify {@link MediaMetadata#folderType} and {@link
-     * MediaMetadata#isPlayable} in its {@link MediaItem#mediaMetadata}.
+     * have valid {@link MediaItem#mediaId} and specify {@link MediaMetadata#isBrowsable} (or {@link
+     * MediaMetadata#folderType}) and {@link MediaMetadata#isPlayable} in its {@link
+     * MediaItem#mediaMetadata}.
      */
     public interface Callback extends MediaSession.Callback {
 

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaBrowserListenerTest.java
Patch:
@@ -42,7 +42,6 @@
 import android.os.Bundle;
 import androidx.annotation.Nullable;
 import androidx.media3.common.MediaItem;
-import androidx.media3.common.MediaMetadata;
 import androidx.media3.session.MediaLibraryService.LibraryParams;
 import androidx.media3.test.session.common.MediaBrowserConstants;
 import androidx.media3.test.session.common.TestUtils;
@@ -155,7 +154,7 @@ public void getItem_browsable() throws Exception {
 
     assertThat(result.resultCode).isEqualTo(RESULT_SUCCESS);
     assertThat(result.value.mediaId).isEqualTo(mediaId);
-    assertThat(result.value.mediaMetadata.folderType).isEqualTo(MediaMetadata.FOLDER_TYPE_MIXED);
+    assertThat(result.value.mediaMetadata.isBrowsable).isTrue();
   }
 
   @Test

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaBrowserServiceCompatCallbackWithMediaBrowserTest.java
Patch:
@@ -142,7 +142,7 @@ public void onLoadItem(String itemId, Result<MediaBrowserCompat.MediaItem> resul
     assertThat(latch.await(TIMEOUT_MS, MILLISECONDS)).isTrue();
     assertThat(result.resultCode).isEqualTo(LibraryResult.RESULT_SUCCESS);
     assertItemEquals(testItem, result.value);
-    assertThat(result.value.mediaMetadata.folderType).isEqualTo(MediaMetadata.FOLDER_TYPE_MIXED);
+    assertThat(result.value.mediaMetadata.isBrowsable).isTrue();
   }
 
   @Test

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaSessionServiceNotificationTest.java
Patch:
@@ -138,7 +138,6 @@ private MediaMetadata createTestMediaMetadata() throws IOException {
         .setTitle("Test Song Name")
         .setArtist("Test Artist Name")
         .setArtworkData(artworkData)
-        .setFolderType(MediaMetadata.FOLDER_TYPE_NONE)
         .setIsPlayable(true)
         .build();
   }
@@ -147,7 +146,6 @@ private MediaMetadata createAnotherTestMediaMetadata() {
     return new MediaMetadata.Builder()
         .setTitle("New Song Name")
         .setArtist("New Artist Name")
-        .setFolderType(MediaMetadata.FOLDER_TYPE_NONE)
         .setIsPlayable(true)
         .build();
   }

File: libraries/transformer/src/test/java/androidx/media3/transformer/VideoEncoderWrapperTest.java
Patch:
@@ -45,6 +45,7 @@ public final class VideoEncoderWrapperTest {
       new FallbackListener(
           MediaItem.fromUri(Uri.EMPTY),
           new ListenerSet<>(Looper.myLooper(), Clock.DEFAULT, (listener, flags) -> {}),
+          Clock.DEFAULT.createHandler(Looper.myLooper(), /* callback= */ null),
           emptyTransformationRequest);
   private final VideoTranscodingSamplePipeline.EncoderWrapper encoderWrapper =
       new VideoTranscodingSamplePipeline.EncoderWrapper(

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/ExoPlayerTest.java
Patch:
@@ -2524,7 +2524,7 @@ public void sendMessagesSeekAfterDeliveryTimeDuringPreparation() throws Exceptio
         .build()
         .start()
         .blockUntilEnded(TIMEOUT_MS);
-    assertThat(target.positionMs).isEqualTo(C.POSITION_UNSET);
+    assertThat(target.positionMs).isEqualTo(C.TIME_UNSET);
   }
 
   @Test
@@ -2546,7 +2546,7 @@ public void sendMessagesSeekAfterDeliveryTimeAfterPreparation() throws Exception
         .build()
         .start()
         .blockUntilEnded(TIMEOUT_MS);
-    assertThat(target.positionMs).isEqualTo(C.POSITION_UNSET);
+    assertThat(target.positionMs).isEqualTo(C.TIME_UNSET);
   }
 
   @Test
@@ -12292,7 +12292,7 @@ private static final class PositionGrabbingMessageTarget extends PlayerTarget {
 
     public PositionGrabbingMessageTarget() {
       mediaItemIndex = C.INDEX_UNSET;
-      positionMs = C.POSITION_UNSET;
+      positionMs = C.TIME_UNSET;
     }
 
     @Override

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/TextRenderer.java
Patch:
@@ -427,7 +427,7 @@ private void handleDecoderError(SubtitleDecoderException e) {
   @SideEffectFree
   private long getCurrentEventTimeUs(long positionUs) {
     int nextEventTimeIndex = subtitle.getNextEventTimeIndex(positionUs);
-    if (nextEventTimeIndex == 0) {
+    if (nextEventTimeIndex == 0 || subtitle.getEventTimeCount() == 0) {
       return subtitle.timeUs;
     }
 

File: libraries/common/src/test/java/androidx/media3/common/MediaMetadataTest.java
Patch:
@@ -64,6 +64,7 @@ public void builder_minimal_correctDefaults() {
     assertThat(mediaMetadata.genre).isNull();
     assertThat(mediaMetadata.compilation).isNull();
     assertThat(mediaMetadata.station).isNull();
+    assertThat(mediaMetadata.mediaType).isNull();
     assertThat(mediaMetadata.extras).isNull();
   }
 
@@ -149,6 +150,7 @@ private static MediaMetadata getFullyPopulatedMediaMetadata() {
         .setGenre("Pop")
         .setCompilation("Amazing songs.")
         .setStation("radio station")
+        .setMediaType(MediaMetadata.MEDIA_TYPE_MIXED)
         .setExtras(extras)
         .build();
   }

File: libraries/session/src/main/java/androidx/media3/session/MediaUtils.java
Patch:
@@ -351,7 +351,9 @@ public static MediaDescriptionCompat convertToMediaDescriptionCompat(
     }
     return builder
         .setTitle(metadata.title)
-        .setSubtitle(metadata.subtitle)
+        // The BT AVRPC service expects the subtitle of the media description to be the artist
+        // (see https://github.com/androidx/media/issues/148).
+        .setSubtitle(metadata.artist != null ? metadata.artist : metadata.subtitle)
         .setDescription(metadata.description)
         .setIconUri(metadata.artworkUri)
         .setMediaUri(item.requestMetadata.mediaUri)

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayerImplInternal.java
Patch:
@@ -281,7 +281,7 @@ public ExoPlayerImplInternal(
 
     deliverPendingMessageAtStartPositionRequired = true;
 
-    Handler eventHandler = new Handler(applicationLooper);
+    HandlerWrapper eventHandler = clock.createHandler(applicationLooper, /* callback= */ null);
     queue = new MediaPeriodQueue(analyticsCollector, eventHandler);
     mediaSourceList =
         new MediaSourceList(/* listener= */ this, analyticsCollector, eventHandler, playerId);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/MediaPeriodQueue.java
Patch:
@@ -26,6 +26,7 @@
 import androidx.media3.common.Player.RepeatMode;
 import androidx.media3.common.Timeline;
 import androidx.media3.common.util.Assertions;
+import androidx.media3.common.util.HandlerWrapper;
 import androidx.media3.exoplayer.analytics.AnalyticsCollector;
 import androidx.media3.exoplayer.source.MediaPeriod;
 import androidx.media3.exoplayer.source.MediaSource.MediaPeriodId;
@@ -71,7 +72,7 @@
   private final Timeline.Period period;
   private final Timeline.Window window;
   private final AnalyticsCollector analyticsCollector;
-  private final Handler analyticsCollectorHandler;
+  private final HandlerWrapper analyticsCollectorHandler;
 
   private long nextWindowSequenceNumber;
   private @RepeatMode int repeatMode;
@@ -91,7 +92,7 @@
    *     on.
    */
   public MediaPeriodQueue(
-      AnalyticsCollector analyticsCollector, Handler analyticsCollectorHandler) {
+      AnalyticsCollector analyticsCollector, HandlerWrapper analyticsCollectorHandler) {
     this.analyticsCollector = analyticsCollector;
     this.analyticsCollectorHandler = analyticsCollectorHandler;
     period = new Timeline.Period();

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/MediaSourceListTest.java
Patch:
@@ -67,7 +67,7 @@ public void setUp() {
         new MediaSourceList(
             mock(MediaSourceList.MediaSourceListInfoRefreshListener.class),
             analyticsCollector,
-            Util.createHandlerForCurrentOrMainLooper(),
+            Clock.DEFAULT.createHandler(Util.getCurrentOrMainLooper(), /* callback= */ null),
             PlayerId.UNSET);
   }
 

File: libraries/session/src/main/java/androidx/media3/session/DefaultMediaNotificationProvider.java
Patch:
@@ -244,8 +244,6 @@ public interface NotificationIdProvider {
   private final String channelId;
   @StringRes private final int channelNameResourceId;
   private final NotificationManager notificationManager;
-  // Cache the last bitmap load request to avoid reloading the bitmap again, particularly useful
-  // when showing a notification for the same item (e.g. when switching from playing to paused).
   private final Handler mainHandler;
 
   private @MonotonicNonNull OnBitmapLoadedFutureCallback pendingOnBitmapLoadedFutureCallback;

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionLegacyStub.java
Patch:
@@ -118,7 +118,6 @@
   private final MediaPlayPauseKeyHandler mediaPlayPauseKeyHandler;
   private final MediaSessionCompat sessionCompat;
   @Nullable private VolumeProviderCompat volumeProviderCompat;
-  private final Handler mainHandler;
 
   private volatile long connectionTimeoutMs;
   @Nullable private FutureCallback<Bitmap> pendingBitmapLoadCallback;
@@ -162,7 +161,6 @@ public MediaSessionLegacyStub(
     @Initialized
     MediaSessionLegacyStub thisRef = this;
     sessionCompat.setCallback(thisRef, handler);
-    mainHandler = new Handler(Looper.getMainLooper());
   }
 
   /** Starts to receive commands. */
@@ -1205,7 +1203,9 @@ public void onFailure(Throwable t) {
                 }
               };
           Futures.addCallback(
-              bitmapFuture, pendingBitmapLoadCallback, /* executor= */ mainHandler::post);
+              bitmapFuture,
+              pendingBitmapLoadCallback,
+              /* executor= */ sessionImpl.getApplicationHandler()::post);
         }
       }
       setMetadata(

File: libraries/common/src/main/java/androidx/media3/common/Player.java
Patch:
@@ -677,7 +677,8 @@ default void onTimelineChanged(Timeline timeline, @TimelineChangeReason int reas
      * to the current {@link #getRepeatMode() repeat mode}.
      *
      * <p>Note that this callback is also called when the playlist becomes non-empty or empty as a
-     * consequence of a playlist change.
+     * consequence of a playlist change or {@linkplain #onAvailableCommandsChanged(Commands) a
+     * change in available commands}.
      *
      * <p>{@link #onEvents(Player, Events)} will also be called to report this event along with
      * other events that happen in the same {@link Looper} message queue iteration.

File: libraries/session/src/main/java/androidx/media3/session/MediaSession.java
Patch:
@@ -1136,7 +1136,8 @@ default void onPlayerInfoChanged(
         boolean excludeMediaItemsMetadata,
         boolean excludeCues,
         boolean excludeTimeline,
-        boolean excludeTracks)
+        boolean excludeTracks,
+        int controllerInterfaceVersion)
         throws RemoteException {}
 
     default void onPeriodicSessionPositionInfoChanged(

File: libraries/session/src/main/java/androidx/media3/session/MediaSession.java
Patch:
@@ -807,11 +807,10 @@ public ListenableFuture<SessionResult> sendCustomCommand(
 
   /**
    * Returns the {@link MediaSessionCompat.Token} of the {@link MediaSessionCompat} created
-   * internally by this session. You may cast the {@link Object} to {@link
-   * MediaSessionCompat.Token}.
+   * internally by this session.
    */
   @UnstableApi
-  public Object getSessionCompatToken() {
+  public MediaSessionCompat.Token getSessionCompatToken() {
     return impl.getSessionCompat().getSessionToken();
   }
 

File: libraries/session/src/main/java/androidx/media3/session/MediaStyleNotificationHelper.java
Patch:
@@ -501,8 +501,7 @@ public static Notification.MediaStyle fillInMediaStyle(
       if (actionsToShowInCompact != null) {
         setShowActionsInCompactView(style, actionsToShowInCompact);
       }
-      MediaSessionCompat.Token legacyToken =
-          (MediaSessionCompat.Token) session.getSessionCompatToken();
+      MediaSessionCompat.Token legacyToken = session.getSessionCompatToken();
       style.setMediaSession((android.media.session.MediaSession.Token) legacyToken.getToken());
       return style;
     }

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -2514,7 +2514,7 @@ public void sendMessagesSeekAfterDeliveryTimeDuringPreparation() throws Exceptio
         .build()
         .start()
         .blockUntilEnded(TIMEOUT_MS);
-    assertThat(target.positionMs).isEqualTo(C.POSITION_UNSET);
+    assertThat(target.positionMs).isEqualTo(C.TIME_UNSET);
   }
 
   @Test
@@ -2536,7 +2536,7 @@ public void sendMessagesSeekAfterDeliveryTimeAfterPreparation() throws Exception
         .build()
         .start()
         .blockUntilEnded(TIMEOUT_MS);
-    assertThat(target.positionMs).isEqualTo(C.POSITION_UNSET);
+    assertThat(target.positionMs).isEqualTo(C.TIME_UNSET);
   }
 
   @Test
@@ -12282,7 +12282,7 @@ private static final class PositionGrabbingMessageTarget extends PlayerTarget {
 
     public PositionGrabbingMessageTarget() {
       mediaItemIndex = C.INDEX_UNSET;
-      positionMs = C.POSITION_UNSET;
+      positionMs = C.TIME_UNSET;
     }
 
     @Override

File: library/core/src/main/java/com/google/android/exoplayer2/text/TextRenderer.java
Patch:
@@ -418,7 +418,7 @@ private void handleDecoderError(SubtitleDecoderException e) {
   @SideEffectFree
   private long getCurrentEventTimeUs(long positionUs) {
     int nextEventTimeIndex = subtitle.getNextEventTimeIndex(positionUs);
-    if (nextEventTimeIndex == 0) {
+    if (nextEventTimeIndex == 0 || subtitle.getEventTimeCount() == 0) {
       return subtitle.timeUs;
     }
 

File: library/common/src/test/java/com/google/android/exoplayer2/MediaMetadataTest.java
Patch:
@@ -64,6 +64,7 @@ public void builder_minimal_correctDefaults() {
     assertThat(mediaMetadata.genre).isNull();
     assertThat(mediaMetadata.compilation).isNull();
     assertThat(mediaMetadata.station).isNull();
+    assertThat(mediaMetadata.mediaType).isNull();
     assertThat(mediaMetadata.extras).isNull();
   }
 
@@ -149,6 +150,7 @@ private static MediaMetadata getFullyPopulatedMediaMetadata() {
         .setGenre("Pop")
         .setCompilation("Amazing songs.")
         .setStation("radio station")
+        .setMediaType(MediaMetadata.MEDIA_TYPE_MIXED)
         .setExtras(extras)
         .build();
   }

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -273,7 +273,7 @@ public ExoPlayerImplInternal(
 
     deliverPendingMessageAtStartPositionRequired = true;
 
-    Handler eventHandler = new Handler(applicationLooper);
+    HandlerWrapper eventHandler = clock.createHandler(applicationLooper, /* callback= */ null);
     queue = new MediaPeriodQueue(analyticsCollector, eventHandler);
     mediaSourceList =
         new MediaSourceList(/* listener= */ this, analyticsCollector, eventHandler, playerId);

File: library/core/src/main/java/com/google/android/exoplayer2/MediaPeriodQueue.java
Patch:
@@ -30,6 +30,7 @@
 import com.google.android.exoplayer2.trackselection.TrackSelectorResult;
 import com.google.android.exoplayer2.upstream.Allocator;
 import com.google.android.exoplayer2.util.Assertions;
+import com.google.android.exoplayer2.util.HandlerWrapper;
 import com.google.common.collect.ImmutableList;
 
 /**
@@ -69,7 +70,7 @@
   private final Timeline.Period period;
   private final Timeline.Window window;
   private final AnalyticsCollector analyticsCollector;
-  private final Handler analyticsCollectorHandler;
+  private final HandlerWrapper analyticsCollectorHandler;
 
   private long nextWindowSequenceNumber;
   private @RepeatMode int repeatMode;
@@ -89,7 +90,7 @@
    *     on.
    */
   public MediaPeriodQueue(
-      AnalyticsCollector analyticsCollector, Handler analyticsCollectorHandler) {
+      AnalyticsCollector analyticsCollector, HandlerWrapper analyticsCollectorHandler) {
     this.analyticsCollector = analyticsCollector;
     this.analyticsCollectorHandler = analyticsCollectorHandler;
     period = new Timeline.Period();

File: library/core/src/test/java/com/google/android/exoplayer2/MediaSourceListTest.java
Patch:
@@ -64,7 +64,7 @@ public void setUp() {
         new MediaSourceList(
             mock(MediaSourceList.MediaSourceListInfoRefreshListener.class),
             analyticsCollector,
-            Util.createHandlerForCurrentOrMainLooper(),
+            Clock.DEFAULT.createHandler(Util.getCurrentOrMainLooper(), /* callback= */ null),
             PlayerId.UNSET);
   }
 

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -674,7 +674,8 @@ default void onTimelineChanged(Timeline timeline, @TimelineChangeReason int reas
      * to the current {@link #getRepeatMode() repeat mode}.
      *
      * <p>Note that this callback is also called when the playlist becomes non-empty or empty as a
-     * consequence of a playlist change.
+     * consequence of a playlist change or {@linkplain #onAvailableCommandsChanged(Commands) a
+     * change in available commands}.
      *
      * <p>{@link #onEvents(Player, Events)} will also be called to report this event along with
      * other events that happen in the same {@link Looper} message queue iteration.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/RendererCapabilities.java
Patch:
@@ -144,13 +144,13 @@ public interface RendererCapabilities {
   /** A mask to apply to {@link Capabilities} to obtain {@link DecoderSupport} only. */
   int MODE_SUPPORT_MASK = 0b11 << 7;
   /**
-   * The renderer will use a decoder for fallback mimetype if possible as format's MIME type is
-   * unsupported
+   * The format's MIME type is unsupported and the renderer may use a decoder for a fallback MIME
+   * type.
    */
   int DECODER_SUPPORT_FALLBACK_MIMETYPE = 0b10 << 7;
   /** The renderer is able to use the primary decoder for the format's MIME type. */
   int DECODER_SUPPORT_PRIMARY = 0b1 << 7;
-  /** The renderer will use a fallback decoder. */
+  /** The format exceeds the primary decoder's capabilities but is supported by fallback decoder */
   int DECODER_SUPPORT_FALLBACK = 0;
 
   /**

File: library/common/src/main/java/com/google/android/exoplayer2/SimpleBasePlayer.java
Patch:
@@ -32,6 +32,8 @@
 import androidx.annotation.IntRange;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.audio.AudioAttributes;
+import com.google.android.exoplayer2.metadata.Metadata;
+import com.google.android.exoplayer2.source.ads.AdPlaybackState;
 import com.google.android.exoplayer2.text.CueGroup;
 import com.google.android.exoplayer2.trackselection.TrackSelectionParameters;
 import com.google.android.exoplayer2.util.Clock;

File: library/core/src/main/java/com/google/android/exoplayer2/RendererCapabilities.java
Patch:
@@ -140,13 +140,13 @@ public interface RendererCapabilities {
   /** A mask to apply to {@link Capabilities} to obtain {@link DecoderSupport} only. */
   int MODE_SUPPORT_MASK = 0b11 << 7;
   /**
-   * The renderer will use a decoder for fallback mimetype if possible as format's MIME type is
-   * unsupported
+   * The format's MIME type is unsupported and the renderer may use a decoder for a fallback MIME
+   * type.
    */
   int DECODER_SUPPORT_FALLBACK_MIMETYPE = 0b10 << 7;
   /** The renderer is able to use the primary decoder for the format's MIME type. */
   int DECODER_SUPPORT_PRIMARY = 0b1 << 7;
-  /** The renderer will use a fallback decoder. */
+  /** The format exceeds the primary decoder's capabilities but is supported by fallback decoder */
   int DECODER_SUPPORT_FALLBACK = 0;
 
   /**

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -1649,16 +1649,16 @@ private int writeSampleData(ExtractorInput input, Track track, int size, boolean
   }
 
   /**
-   * Called by {@link #writeSampleData(ExtractorInput, Track, int)} when the sample has been
-   * written. Returns the final sample size and resets state for the next sample.
+   * Called by {@link #writeSampleData(ExtractorInput, Track, int, boolean)} when the sample has
+   * been written. Returns the final sample size and resets state for the next sample.
    */
   private int finishWriteSampleData() {
     int sampleSize = sampleBytesWritten;
     resetWriteSampleData();
     return sampleSize;
   }
 
-  /** Resets state used by {@link #writeSampleData(ExtractorInput, Track, int)}. */
+  /** Resets state used by {@link #writeSampleData(ExtractorInput, Track, int, boolean)}. */
   private void resetWriteSampleData() {
     sampleBytesRead = 0;
     sampleBytesWritten = 0;

File: libraries/extractor/src/main/java/androidx/media3/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -1651,16 +1651,16 @@ private int writeSampleData(ExtractorInput input, Track track, int size, boolean
   }
 
   /**
-   * Called by {@link #writeSampleData(ExtractorInput, Track, int)} when the sample has been
-   * written. Returns the final sample size and resets state for the next sample.
+   * Called by {@link #writeSampleData(ExtractorInput, Track, int, boolean)} when the sample has
+   * been written. Returns the final sample size and resets state for the next sample.
    */
   private int finishWriteSampleData() {
     int sampleSize = sampleBytesWritten;
     resetWriteSampleData();
     return sampleSize;
   }
 
-  /** Resets state used by {@link #writeSampleData(ExtractorInput, Track, int)}. */
+  /** Resets state used by {@link #writeSampleData(ExtractorInput, Track, int, boolean)}. */
   private void resetWriteSampleData() {
     sampleBytesRead = 0;
     sampleBytesWritten = 0;

File: libraries/session/src/main/java/androidx/media3/session/MediaSession.java
Patch:
@@ -1156,9 +1156,7 @@ default void onPlayerChanged(
     default void onPlayerInfoChanged(
         int seq,
         PlayerInfo playerInfo,
-        boolean excludeMediaItems,
-        boolean excludeMediaItemsMetadata,
-        boolean excludeCues,
+        Player.Commands availableCommands,
         boolean excludeTimeline,
         boolean excludeTracks,
         int controllerInterfaceVersion)

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -211,7 +211,9 @@ public Builder(Context context, AdViewProvider adViewProvider) {
       /**
        * Sets the IMA SDK settings.
        *
-       * <p>If this method is not called the default settings will be used.
+       * <p>If this method is not called, the {@linkplain ImaSdkFactory#createImaSdkSettings()
+       * default settings} will be used with the language set to {@linkplain
+       * Util#getSystemLanguageCodes() the preferred system language}.
        *
        * @param imaSdkSettings The {@link ImaSdkSettings}.
        * @return This builder, for convenience.

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -213,7 +213,9 @@ public Builder(Context context, AdViewProvider adViewProvider) {
       /**
        * Sets the IMA SDK settings.
        *
-       * <p>If this method is not called the default settings will be used.
+       * <p>If this method is not called, the {@linkplain ImaSdkFactory#createImaSdkSettings()
+       * default settings} will be used with the language set to {@linkplain
+       * Util#getSystemLanguageCodes() the preferred system language}.
        *
        * @param imaSdkSettings The {@link ImaSdkSettings}.
        * @return This builder, for convenience.

File: libraries/session/src/main/java/androidx/media3/session/MediaControllerImplBase.java
Patch:
@@ -1468,7 +1468,7 @@ public void decreaseDeviceVolume() {
 
   @Override
   public void setDeviceMuted(boolean muted) {
-    if (!isPlayerCommandAvailable(Player.COMMAND_SET_DEVICE_VOLUME)) {
+    if (!isPlayerCommandAvailable(Player.COMMAND_ADJUST_DEVICE_VOLUME)) {
       return;
     }
 

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionStub.java
Patch:
@@ -1324,7 +1324,7 @@ public void setDeviceMuted(@Nullable IMediaController caller, int sequenceNumber
     queueSessionTaskWithPlayerCommand(
         caller,
         sequenceNumber,
-        COMMAND_SET_DEVICE_VOLUME,
+        COMMAND_ADJUST_DEVICE_VOLUME,
         sendSessionResultSuccess(player -> player.setDeviceMuted(muted)));
   }
 

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaSessionPermissionTest.java
Patch:
@@ -185,7 +185,8 @@ public void decreaseDeviceVolume() throws Exception {
 
   @Test
   public void setDeviceMuted() throws Exception {
-    testOnCommandRequest(COMMAND_SET_DEVICE_VOLUME, controller -> controller.setDeviceMuted(true));
+    testOnCommandRequest(
+        COMMAND_ADJUST_DEVICE_VOLUME, controller -> controller.setDeviceMuted(true));
   }
 
   @Test

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -1106,7 +1106,7 @@ public Builder setClock(Clock clock) {
      * <p>The backing thread should run with priority {@link Process#THREAD_PRIORITY_AUDIO} and
      * should handle messages within 10ms.
      *
-     * @param playbackLooper A {@link looper}.
+     * @param playbackLooper A {@link Looper}.
      * @return This builder.
      * @throws IllegalStateException If {@link #build()} has already been called.
      */

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionLegacyStub.java
Patch:
@@ -313,7 +313,9 @@ public void onPlay() {
             playerWrapper.seekTo(
                 playerWrapper.getCurrentMediaItemIndex(), /* positionMs= */ C.TIME_UNSET);
           }
-          playerWrapper.play();
+          if (sessionImpl.onPlayRequested()) {
+            playerWrapper.play();
+          }
         },
         sessionCompat.getCurrentControllerInfo());
   }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayer.java
Patch:
@@ -1143,7 +1143,7 @@ public Builder setClock(Clock clock) {
      * <p>The backing thread should run with priority {@link Process#THREAD_PRIORITY_AUDIO} and
      * should handle messages within 10ms.
      *
-     * @param playbackLooper A {@link looper}.
+     * @param playbackLooper A {@link Looper}.
      * @return This builder.
      * @throws IllegalStateException If {@link #build()} has already been called.
      */

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaUtil.java
Patch:
@@ -166,6 +166,7 @@ public static final class ServerSideAdInsertionConfiguration {
     @Nullable public final AdEvent.AdEventListener applicationAdEventListener;
     @Nullable public final AdErrorEvent.AdErrorListener applicationAdErrorListener;
     public final ImmutableList<CompanionAdSlot> companionAdSlots;
+    public final boolean focusSkipButtonWhenAvailable;
     public final boolean debugModeEnabled;
 
     public ServerSideAdInsertionConfiguration(
@@ -174,12 +175,14 @@ public ServerSideAdInsertionConfiguration(
         @Nullable AdEvent.AdEventListener applicationAdEventListener,
         @Nullable AdErrorEvent.AdErrorListener applicationAdErrorListener,
         List<CompanionAdSlot> companionAdSlots,
+        boolean focusSkipButtonWhenAvailable,
         boolean debugModeEnabled) {
       this.imaSdkSettings = imaSdkSettings;
       this.adViewProvider = adViewProvider;
       this.applicationAdEventListener = applicationAdEventListener;
       this.applicationAdErrorListener = applicationAdErrorListener;
       this.companionAdSlots = ImmutableList.copyOf(companionAdSlots);
+      this.focusSkipButtonWhenAvailable = focusSkipButtonWhenAvailable;
       this.debugModeEnabled = debugModeEnabled;
     }
   }

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaUtil.java
Patch:
@@ -166,6 +166,7 @@ public static final class ServerSideAdInsertionConfiguration {
     @Nullable public final AdEvent.AdEventListener applicationAdEventListener;
     @Nullable public final AdErrorEvent.AdErrorListener applicationAdErrorListener;
     public final ImmutableList<CompanionAdSlot> companionAdSlots;
+    public final boolean focusSkipButtonWhenAvailable;
     public final boolean debugModeEnabled;
 
     public ServerSideAdInsertionConfiguration(
@@ -174,12 +175,14 @@ public ServerSideAdInsertionConfiguration(
         @Nullable AdEvent.AdEventListener applicationAdEventListener,
         @Nullable AdErrorEvent.AdErrorListener applicationAdErrorListener,
         List<CompanionAdSlot> companionAdSlots,
+        boolean focusSkipButtonWhenAvailable,
         boolean debugModeEnabled) {
       this.imaSdkSettings = imaSdkSettings;
       this.adViewProvider = adViewProvider;
       this.applicationAdEventListener = applicationAdEventListener;
       this.applicationAdErrorListener = applicationAdErrorListener;
       this.companionAdSlots = ImmutableList.copyOf(companionAdSlots);
+      this.focusSkipButtonWhenAvailable = focusSkipButtonWhenAvailable;
       this.debugModeEnabled = debugModeEnabled;
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
Patch:
@@ -841,7 +841,7 @@ private Builder(Bundle bundle) {
         // Audio
         setExceedAudioConstraintsIfNecessary(
             bundle.getBoolean(
-                Parameters.keyForField(Parameters.FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NCESSARY),
+                Parameters.keyForField(Parameters.FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NECESSARY),
                 defaultValue.exceedAudioConstraintsIfNecessary));
         setAllowAudioMixedMimeTypeAdaptiveness(
             bundle.getBoolean(
@@ -1874,7 +1874,7 @@ public int hashCode() {
     private static final int FIELD_ALLOW_VIDEO_MIXED_MIME_TYPE_ADAPTIVENESS =
         FIELD_CUSTOM_ID_BASE + 1;
     private static final int FIELD_ALLOW_VIDEO_NON_SEAMLESS_ADAPTIVENESS = FIELD_CUSTOM_ID_BASE + 2;
-    private static final int FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NCESSARY = FIELD_CUSTOM_ID_BASE + 3;
+    private static final int FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NECESSARY = FIELD_CUSTOM_ID_BASE + 3;
     private static final int FIELD_ALLOW_AUDIO_MIXED_MIME_TYPE_ADAPTIVENESS =
         FIELD_CUSTOM_ID_BASE + 4;
     private static final int FIELD_ALLOW_AUDIO_MIXED_SAMPLE_RATE_ADAPTIVENESS =
@@ -1916,7 +1916,7 @@ public Bundle toBundle() {
           allowVideoMixedDecoderSupportAdaptiveness);
       // Audio
       bundle.putBoolean(
-          keyForField(FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NCESSARY),
+          keyForField(FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NECESSARY),
           exceedAudioConstraintsIfNecessary);
       bundle.putBoolean(
           keyForField(FIELD_ALLOW_AUDIO_MIXED_MIME_TYPE_ADAPTIVENESS),

File: library/core/src/main/java/com/google/android/exoplayer2/Renderer.java
Patch:
@@ -208,7 +208,7 @@ interface WakeupListener {
   /**
    * The type of a message that can be passed to a video renderer to set the desired output
    * resolution. The message payload should be a {@link Size} of the desired output width and
-   * height. Use this method only when playing with video {@link Effect}.
+   * height. Use this method only when playing with video {@linkplain Effect effects}.
    */
   int MSG_SET_VIDEO_OUTPUT_RESOLUTION = 13;
   /**

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/DrawableOverlay.java
Patch:
@@ -35,7 +35,7 @@ public abstract class DrawableOverlay extends BitmapOverlay {
   /**
    * Returns the overlay {@link Drawable} displayed at the specified timestamp.
    *
-   * <p>The drawable must have it's bounds set via {@link Drawable#setBounds} for drawable to be
+   * <p>The drawable must have its bounds set via {@link Drawable#setBounds} for drawable to be
    * displayed on the frame.
    *
    * @param presentationTimeUs The presentation timestamp of the current frame, in microseconds.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/DefaultTrackSelector.java
Patch:
@@ -845,7 +845,7 @@ private Builder(Bundle bundle) {
         // Audio
         setExceedAudioConstraintsIfNecessary(
             bundle.getBoolean(
-                Parameters.keyForField(Parameters.FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NCESSARY),
+                Parameters.keyForField(Parameters.FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NECESSARY),
                 defaultValue.exceedAudioConstraintsIfNecessary));
         setAllowAudioMixedMimeTypeAdaptiveness(
             bundle.getBoolean(
@@ -1878,7 +1878,7 @@ public int hashCode() {
     private static final int FIELD_ALLOW_VIDEO_MIXED_MIME_TYPE_ADAPTIVENESS =
         FIELD_CUSTOM_ID_BASE + 1;
     private static final int FIELD_ALLOW_VIDEO_NON_SEAMLESS_ADAPTIVENESS = FIELD_CUSTOM_ID_BASE + 2;
-    private static final int FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NCESSARY = FIELD_CUSTOM_ID_BASE + 3;
+    private static final int FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NECESSARY = FIELD_CUSTOM_ID_BASE + 3;
     private static final int FIELD_ALLOW_AUDIO_MIXED_MIME_TYPE_ADAPTIVENESS =
         FIELD_CUSTOM_ID_BASE + 4;
     private static final int FIELD_ALLOW_AUDIO_MIXED_SAMPLE_RATE_ADAPTIVENESS =
@@ -1920,7 +1920,7 @@ public Bundle toBundle() {
           allowVideoMixedDecoderSupportAdaptiveness);
       // Audio
       bundle.putBoolean(
-          keyForField(FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NCESSARY),
+          keyForField(FIELD_EXCEED_AUDIO_CONSTRAINTS_IF_NECESSARY),
           exceedAudioConstraintsIfNecessary);
       bundle.putBoolean(
           keyForField(FIELD_ALLOW_AUDIO_MIXED_MIME_TYPE_ADAPTIVENESS),

File: libraries/effect/src/main/java/androidx/media3/effect/DrawableOverlay.java
Patch:
@@ -37,7 +37,7 @@ public abstract class DrawableOverlay extends BitmapOverlay {
   /**
    * Returns the overlay {@link Drawable} displayed at the specified timestamp.
    *
-   * <p>The drawable must have it's bounds set via {@link Drawable#setBounds} for drawable to be
+   * <p>The drawable must have its bounds set via {@link Drawable#setBounds} for drawable to be
    * displayed on the frame.
    *
    * @param presentationTimeUs The presentation timestamp of the current frame, in microseconds.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/Renderer.java
Patch:
@@ -212,7 +212,7 @@ interface WakeupListener {
   /**
    * The type of a message that can be passed to a video renderer to set the desired output
    * resolution. The message payload should be a {@link Size} of the desired output width and
-   * height. Use this method only when playing with video {@link Effect}.
+   * height. Use this method only when playing with video {@linkplain Effect effects}.
    */
   int MSG_SET_VIDEO_OUTPUT_RESOLUTION = 13;
   /**

File: libraries/common/src/test/java/androidx/media3/common/AdPlaybackStateTest.java
Patch:
@@ -421,13 +421,12 @@ public void adPlaybackStateWithNoAds_toBundleSkipsDefaultValues_fromBundleRestor
 
     Bundle adPlaybackStateWithNoAdsBundle = adPlaybackStateWithNoAds.toBundle();
 
-    // check Bundle created above, contains no keys.
+    // Check that default values are skipped when bundling.
     assertThat(adPlaybackStateWithNoAdsBundle.keySet()).isEmpty();
 
     AdPlaybackState adPlaybackStateWithNoAdsFromBundle =
         AdPlaybackState.CREATOR.fromBundle(adPlaybackStateWithNoAdsBundle);
 
-    // check object retrieved from adPlaybackStateWithNoAdsBundle is equal to AdPlaybackState.NONE
     assertThat(adPlaybackStateWithNoAdsFromBundle.adsId).isEqualTo(adPlaybackStateWithNoAds.adsId);
     assertThat(adPlaybackStateWithNoAdsFromBundle.adGroupCount)
         .isEqualTo(adPlaybackStateWithNoAds.adGroupCount);

File: libraries/common/src/test/java/androidx/media3/common/MediaMetadataTest.java
Patch:
@@ -112,12 +112,11 @@ public void toBundleSkipsDefaultValues_fromBundleRestoresThem() {
 
     Bundle mediaMetadataBundle = mediaMetadata.toBundle();
 
-    // check Bundle created above, contains no keys.
+    // Check that default values are skipped when bundling.
     assertThat(mediaMetadataBundle.keySet()).isEmpty();
 
     MediaMetadata mediaMetadataFromBundle = MediaMetadata.CREATOR.fromBundle(mediaMetadataBundle);
 
-    // check object retrieved from mediaMetadataBundle is equal to mediaMetadata.
     assertThat(mediaMetadataFromBundle).isEqualTo(mediaMetadata);
     // Extras is not implemented in MediaMetadata.equals(Object o).
     assertThat(mediaMetadataFromBundle.extras).isNull();

File: libraries/transformer/src/main/java/androidx/media3/transformer/AudioTranscodingSamplePipeline.java
Patch:
@@ -35,9 +35,7 @@
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
 import org.checkerframework.dataflow.qual.Pure;
 
-/**
- * Pipeline to decode audio samples, apply audio processing to the raw samples, and re-encode them.
- */
+/** Pipeline to apply audio processing to raw audio samples, encode them and mux them. */
 /* package */ final class AudioTranscodingSamplePipeline extends BaseSamplePipeline {
 
   private static final int DEFAULT_ENCODER_BITRATE = 128 * 1024;

File: libraries/transformer/src/main/java/androidx/media3/transformer/ExoPlayerAssetLoaderRenderer.java
Patch:
@@ -248,7 +248,7 @@ private boolean feedDecoderFromInput() throws TransformationException {
   }
 
   /**
-   * Attempts to read input data and pass the input data to the sample pipeline.
+   * Attempts to read input data and pass it to the sample pipeline.
    *
    * @return Whether it may be possible to read more data immediately by calling this method again.
    */

File: libraries/transformer/src/main/java/androidx/media3/transformer/PassthroughSamplePipeline.java
Patch:
@@ -20,7 +20,7 @@
 import androidx.media3.common.Format;
 import androidx.media3.decoder.DecoderInputBuffer;
 
-/** Pipeline that passes through the samples without any re-encoding or transformation. */
+/** Pipeline that muxes encoded samples without any transcoding or transformation. */
 /* package */ final class PassthroughSamplePipeline extends BaseSamplePipeline {
 
   private final DecoderInputBuffer buffer;

File: libraries/transformer/src/main/java/androidx/media3/transformer/SamplePipeline.java
Patch:
@@ -21,7 +21,7 @@
 import androidx.media3.decoder.DecoderInputBuffer;
 
 /**
- * Pipeline for processing {@link DecoderInputBuffer DecoderInputBuffers}.
+ * Pipeline for processing media data.
  *
  * <p>This pipeline can be used to implement transformations of audio or video samples.
  */

File: library/common/src/test/java/com/google/android/exoplayer2/MediaMetadataTest.java
Patch:
@@ -112,12 +112,11 @@ public void toBundleSkipsDefaultValues_fromBundleRestoresThem() {
 
     Bundle mediaMetadataBundle = mediaMetadata.toBundle();
 
-    // check Bundle created above, contains no keys.
+    // Check that default values are skipped when bundling.
     assertThat(mediaMetadataBundle.keySet()).isEmpty();
 
     MediaMetadata mediaMetadataFromBundle = MediaMetadata.CREATOR.fromBundle(mediaMetadataBundle);
 
-    // check object retrieved from mediaMetadataBundle is equal to mediaMetadata.
     assertThat(mediaMetadataFromBundle).isEqualTo(mediaMetadata);
     // Extras is not implemented in MediaMetadata.equals(Object o).
     assertThat(mediaMetadataFromBundle.extras).isNull();

File: library/common/src/test/java/com/google/android/exoplayer2/source/ads/AdPlaybackStateTest.java
Patch:
@@ -422,13 +422,12 @@ public void adPlaybackStateWithNoAds_toBundleSkipsDefaultValues_fromBundleRestor
 
     Bundle adPlaybackStateWithNoAdsBundle = adPlaybackStateWithNoAds.toBundle();
 
-    // check Bundle created above, contains no keys.
+    // Check that default values are skipped when bundling.
     assertThat(adPlaybackStateWithNoAdsBundle.keySet()).isEmpty();
 
     AdPlaybackState adPlaybackStateWithNoAdsFromBundle =
         AdPlaybackState.CREATOR.fromBundle(adPlaybackStateWithNoAdsBundle);
 
-    // check object retrieved from adPlaybackStateWithNoAdsBundle is equal to AdPlaybackState.NONE
     assertThat(adPlaybackStateWithNoAdsFromBundle.adsId).isEqualTo(adPlaybackStateWithNoAds.adsId);
     assertThat(adPlaybackStateWithNoAdsFromBundle.adGroupCount)
         .isEqualTo(adPlaybackStateWithNoAds.adGroupCount);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/AudioTranscodingSamplePipeline.java
Patch:
@@ -35,9 +35,7 @@
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
 import org.checkerframework.dataflow.qual.Pure;
 
-/**
- * Pipeline to decode audio samples, apply audio processing to the raw samples, and re-encode them.
- */
+/** Pipeline to apply audio processing to raw audio samples, encode them and mux them. */
 /* package */ final class AudioTranscodingSamplePipeline extends BaseSamplePipeline {
 
   private static final int DEFAULT_ENCODER_BITRATE = 128 * 1024;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExoPlayerAssetLoaderRenderer.java
Patch:
@@ -248,7 +248,7 @@ private boolean feedDecoderFromInput() throws TransformationException {
   }
 
   /**
-   * Attempts to read input data and pass the input data to the sample pipeline.
+   * Attempts to read input data and pass it to the sample pipeline.
    *
    * @return Whether it may be possible to read more data immediately by calling this method again.
    */

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/PassthroughSamplePipeline.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.decoder.DecoderInputBuffer;
 
-/** Pipeline that passes through the samples without any re-encoding or transformation. */
+/** Pipeline that muxes encoded samples without any transcoding or transformation. */
 /* package */ final class PassthroughSamplePipeline extends BaseSamplePipeline {
 
   private final DecoderInputBuffer buffer;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/SamplePipeline.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.android.exoplayer2.decoder.DecoderInputBuffer;
 
 /**
- * Pipeline for processing {@link DecoderInputBuffer DecoderInputBuffers}.
+ * Pipeline for processing media data.
  *
  * <p>This pipeline can be used to implement transformations of audio or video samples.
  */

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerInternal.java
Patch:
@@ -35,7 +35,6 @@
 import com.google.android.exoplayer2.decoder.DecoderInputBuffer;
 import com.google.android.exoplayer2.metadata.Metadata;
 import com.google.android.exoplayer2.metadata.mp4.SlowMotionData;
-import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.util.Clock;
 import com.google.android.exoplayer2.util.ConditionVariable;
 import com.google.android.exoplayer2.util.DebugViewProvider;
@@ -126,7 +125,6 @@ public TransformerInternal(
       boolean removeAudio,
       boolean removeVideo,
       boolean forceSilentAudio,
-      MediaSource.Factory mediaSourceFactory,
       AssetLoader.Factory assetLoaderFactory,
       Codec.DecoderFactory decoderFactory,
       Codec.EncoderFactory encoderFactory,
@@ -158,7 +156,6 @@ public TransformerInternal(
             .setRemoveAudio(removeAudio)
             .setRemoveVideo(removeVideo)
             .setFlattenVideoForSlowMotion(transformationRequest.flattenForSlowMotion)
-            .setMediaSourceFactory(mediaSourceFactory)
             .setDecoderFactory(this.decoderFactory)
             .setLooper(internalLooper)
             .setListener(componentListener)

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/TransformerEndToEndTest.java
Patch:
@@ -533,10 +533,11 @@ public void startTransformation_withSlowOutputSampleRate_completesWithError() th
     MediaSource.Factory mediaSourceFactory =
         new DefaultMediaSourceFactory(
             context, new SlowExtractorsFactory(/* delayBetweenReadsMs= */ 10));
+    AssetLoader.Factory assetLoaderFactory = new ExoPlayerAssetLoader.Factory(mediaSourceFactory);
     Muxer.Factory muxerFactory = new TestMuxerFactory(/* maxDelayBetweenSamplesMs= */ 1);
     Transformer transformer =
         createTransformerBuilder(/* enableFallback= */ false)
-            .setMediaSourceFactory(mediaSourceFactory)
+            .setAssetLoaderFactory(assetLoaderFactory)
             .setMuxerFactory(muxerFactory)
             .build();
     MediaItem mediaItem = MediaItem.fromUri(ASSET_URI_PREFIX + FILE_AUDIO_VIDEO);

File: extensions/leanback/src/main/java/com/google/android/exoplayer2/ext/leanback/LeanbackPlayerAdapter.java
Patch:
@@ -162,8 +162,8 @@ public void pause() {
   }
 
   @Override
-  public void seekTo(long positionMs) {
-    player.seekTo(player.getCurrentMediaItemIndex(), positionMs);
+  public void seekTo(long positionInMs) {
+    player.seekTo(player.getCurrentMediaItemIndex(), positionInMs);
   }
 
   @Override

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerInternal.java
Patch:
@@ -41,7 +41,6 @@
 import androidx.media3.common.util.ConditionVariable;
 import androidx.media3.common.util.HandlerWrapper;
 import androidx.media3.decoder.DecoderInputBuffer;
-import androidx.media3.exoplayer.source.MediaSource;
 import androidx.media3.extractor.metadata.mp4.SlowMotionData;
 import com.google.common.collect.ImmutableList;
 import java.lang.annotation.Documented;
@@ -126,7 +125,6 @@ public TransformerInternal(
       boolean removeAudio,
       boolean removeVideo,
       boolean forceSilentAudio,
-      MediaSource.Factory mediaSourceFactory,
       AssetLoader.Factory assetLoaderFactory,
       Codec.DecoderFactory decoderFactory,
       Codec.EncoderFactory encoderFactory,
@@ -158,7 +156,6 @@ public TransformerInternal(
             .setRemoveAudio(removeAudio)
             .setRemoveVideo(removeVideo)
             .setFlattenVideoForSlowMotion(transformationRequest.flattenForSlowMotion)
-            .setMediaSourceFactory(mediaSourceFactory)
             .setDecoderFactory(this.decoderFactory)
             .setLooper(internalLooper)
             .setListener(componentListener)

File: libraries/transformer/src/test/java/androidx/media3/transformer/TransformerEndToEndTest.java
Patch:
@@ -533,10 +533,11 @@ public void startTransformation_withSlowOutputSampleRate_completesWithError() th
     MediaSource.Factory mediaSourceFactory =
         new DefaultMediaSourceFactory(
             context, new SlowExtractorsFactory(/* delayBetweenReadsMs= */ 10));
+    AssetLoader.Factory assetLoaderFactory = new ExoPlayerAssetLoader.Factory(mediaSourceFactory);
     Muxer.Factory muxerFactory = new TestMuxerFactory(/* maxDelayBetweenSamplesMs= */ 1);
     Transformer transformer =
         createTransformerBuilder(/* enableFallback= */ false)
-            .setMediaSourceFactory(mediaSourceFactory)
+            .setAssetLoaderFactory(assetLoaderFactory)
             .setMuxerFactory(muxerFactory)
             .build();
     MediaItem mediaItem = MediaItem.fromUri(ASSET_URI_PREFIX + FILE_AUDIO_VIDEO);

File: libraries/ui_leanback/src/main/java/androidx/media3/ui/leanback/LeanbackPlayerAdapter.java
Patch:
@@ -164,8 +164,8 @@ public void pause() {
   }
 
   @Override
-  public void seekTo(long positionMs) {
-    player.seekTo(player.getCurrentMediaItemIndex(), positionMs);
+  public void seekTo(long positionInMs) {
+    player.seekTo(player.getCurrentMediaItemIndex(), positionInMs);
   }
 
   @Override

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/TransformerEndToEndTest.java
Patch:
@@ -337,9 +337,9 @@ public void startTransformation_withMultipleListeners_callsEachOnError() throws
     transformer.startTransformation(mediaItem, outputPath);
     TransformationException exception = TransformerTestRunner.runUntilError(transformer);
 
-    verify(mockListener1).onTransformationError(mediaItem, exception);
-    verify(mockListener2).onTransformationError(mediaItem, exception);
-    verify(mockListener3).onTransformationError(mediaItem, exception);
+    verify(mockListener1).onTransformationError(eq(mediaItem), any(), eq(exception));
+    verify(mockListener2).onTransformationError(eq(mediaItem), any(), eq(exception));
+    verify(mockListener3).onTransformationError(eq(mediaItem), any(), eq(exception));
   }
 
   @Test

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/TransformerTestRunner.java
Patch:
@@ -85,7 +85,9 @@ public void onTransformationCompleted(
 
           @Override
           public void onTransformationError(
-              MediaItem inputMediaItem, TransformationException exception) {
+              MediaItem inputMediaItem,
+              TransformationResult result,
+              TransformationException exception) {
             transformationException.set(exception);
           }
         });

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/EncoderUtil.java
Patch:
@@ -64,8 +64,8 @@ public static synchronized ImmutableList<MediaCodecInfo> getSupportedEncoders(St
     return ImmutableList.copyOf(mimeTypeToEncoders.get(Ascii.toLowerCase(mimeType)));
   }
 
-  /** Returns a list of video {@linkplain MimeTypes MIME types} that can be encoded. */
-  public static synchronized ImmutableSet<String> getSupportedVideoMimeTypes() {
+  /** Returns a list of {@linkplain MimeTypes MIME types} that can be encoded. */
+  public static synchronized ImmutableSet<String> getSupportedMimeTypes() {
     maybePopulateEncoderInfo();
     return ImmutableSet.copyOf(mimeTypeToEncoders.keySet());
   }

File: libraries/transformer/src/test/java/androidx/media3/transformer/TransformerEndToEndTest.java
Patch:
@@ -337,9 +337,9 @@ public void startTransformation_withMultipleListeners_callsEachOnError() throws
     transformer.startTransformation(mediaItem, outputPath);
     TransformationException exception = TransformerTestRunner.runUntilError(transformer);
 
-    verify(mockListener1).onTransformationError(mediaItem, exception);
-    verify(mockListener2).onTransformationError(mediaItem, exception);
-    verify(mockListener3).onTransformationError(mediaItem, exception);
+    verify(mockListener1).onTransformationError(eq(mediaItem), any(), eq(exception));
+    verify(mockListener2).onTransformationError(eq(mediaItem), any(), eq(exception));
+    verify(mockListener3).onTransformationError(eq(mediaItem), any(), eq(exception));
   }
 
   @Test

File: libraries/transformer/src/test/java/androidx/media3/transformer/TransformerTestRunner.java
Patch:
@@ -85,7 +85,9 @@ public void onTransformationCompleted(
 
           @Override
           public void onTransformationError(
-              MediaItem inputMediaItem, TransformationException exception) {
+              MediaItem inputMediaItem,
+              TransformationResult result,
+              TransformationException exception) {
             transformationException.set(exception);
           }
         });

File: libraries/transformer/src/main/java/androidx/media3/transformer/EncoderUtil.java
Patch:
@@ -66,8 +66,8 @@ public static synchronized ImmutableList<MediaCodecInfo> getSupportedEncoders(St
     return ImmutableList.copyOf(mimeTypeToEncoders.get(Ascii.toLowerCase(mimeType)));
   }
 
-  /** Returns a list of video {@linkplain MimeTypes MIME types} that can be encoded. */
-  public static synchronized ImmutableSet<String> getSupportedVideoMimeTypes() {
+  /** Returns a list of {@linkplain MimeTypes MIME types} that can be encoded. */
+  public static synchronized ImmutableSet<String> getSupportedMimeTypes() {
     maybePopulateEncoderInfo();
     return ImmutableSet.copyOf(mimeTypeToEncoders.keySet());
   }

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.audio;
 
 import static com.google.android.exoplayer2.audio.AudioCapabilities.DEFAULT_AUDIO_CAPABILITIES;
+import static com.google.android.exoplayer2.audio.AudioProcessor.EMPTY_BUFFER;
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Util.constrainValue;
 import static java.lang.Math.max;
@@ -1002,8 +1003,8 @@ private void registerStreamEventCallbackV29(AudioTrack audioTrack) {
    * {@link #writeBuffer(ByteBuffer, long)}.
    */
   private void processBuffers(long avSyncPresentationTimeUs) throws WriteException {
-    if (!audioProcessingPipeline.isOperational() && inputBuffer != null) {
-      writeBuffer(inputBuffer, avSyncPresentationTimeUs);
+    if (!audioProcessingPipeline.isOperational()) {
+      writeBuffer(inputBuffer != null ? inputBuffer : EMPTY_BUFFER, avSyncPresentationTimeUs);
       return;
     }
 

File: library/common/src/main/java/com/google/android/exoplayer2/SimpleBasePlayer.java
Patch:
@@ -1981,8 +1981,7 @@ public final void addListener(Listener listener) {
 
   @Override
   public final void removeListener(Listener listener) {
-    // Don't verify application thread. We allow calls to this method from any thread.
-    checkNotNull(listener);
+    verifyApplicationThreadAndInitState();
     listeners.remove(listener);
   }
 

File: robolectricutils/src/main/java/com/google/android/exoplayer2/robolectric/RobolectricUtil.java
Patch:
@@ -94,7 +94,7 @@ public static void runMainLooperUntil(Supplier<Boolean> condition, long timeoutM
    */
   public static void runLooperUntil(Looper looper, Supplier<Boolean> condition)
       throws TimeoutException {
-    runLooperUntil(looper, condition, DEFAULT_TIMEOUT_MS * 1000000, Clock.DEFAULT);
+    runLooperUntil(looper, condition, DEFAULT_TIMEOUT_MS, Clock.DEFAULT);
   }
 
   /**

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/BaseSamplePipeline.java
Patch:
@@ -47,7 +47,7 @@ protected static TransformationException createNoSupportedMimeTypeException(
         /* isDecoder= */ false,
         requestedEncoderFormat,
         /* mediaCodecName= */ null,
-        TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
+        TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED);
   }
 
   @Override

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultCodec.java
Patch:
@@ -405,7 +405,7 @@ private static TransformationException createInitializationTransformationExcepti
           mediaCodecName,
           isDecoder
               ? TransformationException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED
-              : TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
+              : TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED);
     }
     return TransformationException.createForUnexpected(cause);
   }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultEncoderFactory.java
Patch:
@@ -667,7 +667,7 @@ private static int getSuggestedBitrate(int width, int height, float frameRate) {
   @RequiresNonNull("#1.sampleMimeType")
   private static TransformationException createTransformationException(Format format) {
     return createTransformationException(
-        format, TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
+        format, TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED);
   }
 
   @RequiresNonNull("#1.sampleMimeType")

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/DefaultEncoderFactoryTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.google.android.exoplayer2.transformer;
 
 import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
-import static com.google.android.exoplayer2.transformer.TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED;
+import static com.google.android.exoplayer2.transformer.TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertThrows;
 
@@ -113,7 +113,7 @@ public void createForVideoEncoding_withFallbackOnAndUnsupportedMimeType_throws()
         assertThrows(
             TransformationException.class,
             () -> encoderFactory.createForVideoEncoding(requestedVideoFormat));
-    assertThat(transformationException.errorCode).isEqualTo(ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
+    assertThat(transformationException.errorCode).isEqualTo(ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED);
   }
 
   @Test

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/TransformerEndToEndTest.java
Patch:
@@ -450,7 +450,7 @@ public void startTransformation_withAudioEncoderFormatUnsupported_completesWithE
 
     assertThat(exception).hasCauseThat().isInstanceOf(IllegalArgumentException.class);
     assertThat(exception.errorCode)
-        .isEqualTo(TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
+        .isEqualTo(TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED);
   }
 
   @Test

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/GlEffectsFrameProcessorPixelTest.java
Patch:
@@ -44,6 +44,7 @@
 import com.google.android.exoplayer2.util.SurfaceInfo;
 import com.google.android.exoplayer2.video.ColorInfo;
 import com.google.common.collect.ImmutableList;
+import com.google.common.util.concurrent.MoreExecutors;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicReference;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
@@ -441,6 +442,7 @@ public void onFrameProcessingEnded() {
                         frameProcessingEnded = true;
                       }
                     },
+                    MoreExecutors.directExecutor(),
                     effects,
                     DebugViewProvider.NONE,
                     ColorInfo.SDR_BT709_LIMITED,

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -42,6 +42,7 @@
 import com.google.android.exoplayer2.util.Util;
 import com.google.android.exoplayer2.video.ColorInfo;
 import com.google.common.collect.ImmutableList;
+import com.google.common.util.concurrent.MoreExecutors;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.List;
@@ -195,6 +196,7 @@ public void onFrameProcessingEnded() {
                   }
                 }
               },
+              MoreExecutors.directExecutor(),
               effectsListBuilder.build(),
               debugViewProvider,
               // HDR colors are only used if the MediaCodec encoder supports FEATURE_HdrEditing.

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/VideoEncoderWrapperTest.java
Patch:
@@ -50,6 +50,7 @@ public final class VideoEncoderWrapperTest {
       new FallbackListener(
           MediaItem.fromUri(Uri.EMPTY),
           new ListenerSet<>(Looper.myLooper(), Clock.DEFAULT, (listener, flags) -> {}),
+          Clock.DEFAULT.createHandler(Looper.myLooper(), /* callback= */ null),
           emptyTransformationRequest);
   private final VideoTranscodingSamplePipeline.EncoderWrapper encoderWrapper =
       new VideoTranscodingSamplePipeline.EncoderWrapper(

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -2514,7 +2514,7 @@ public void sendMessagesSeekAfterDeliveryTimeDuringPreparation() throws Exceptio
         .build()
         .start()
         .blockUntilEnded(TIMEOUT_MS);
-    assertThat(target.positionMs).isEqualTo(C.POSITION_UNSET);
+    assertThat(target.positionMs).isEqualTo(C.TIME_UNSET);
   }
 
   @Test
@@ -2536,7 +2536,7 @@ public void sendMessagesSeekAfterDeliveryTimeAfterPreparation() throws Exception
         .build()
         .start()
         .blockUntilEnded(TIMEOUT_MS);
-    assertThat(target.positionMs).isEqualTo(C.POSITION_UNSET);
+    assertThat(target.positionMs).isEqualTo(C.TIME_UNSET);
   }
 
   @Test
@@ -12282,7 +12282,7 @@ private static final class PositionGrabbingMessageTarget extends PlayerTarget {
 
     public PositionGrabbingMessageTarget() {
       mediaItemIndex = C.INDEX_UNSET;
-      positionMs = C.POSITION_UNSET;
+      positionMs = C.TIME_UNSET;
     }
 
     @Override

File: library/core/src/main/java/com/google/android/exoplayer2/text/TextRenderer.java
Patch:
@@ -418,7 +418,7 @@ private void handleDecoderError(SubtitleDecoderException e) {
   @SideEffectFree
   private long getCurrentEventTimeUs(long positionUs) {
     int nextEventTimeIndex = subtitle.getNextEventTimeIndex(positionUs);
-    if (nextEventTimeIndex == 0) {
+    if (nextEventTimeIndex == 0 || subtitle.getEventTimeCount() == 0) {
       return subtitle.timeUs;
     }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/DefaultAudioSink.java
Patch:
@@ -15,6 +15,7 @@
  */
 package androidx.media3.exoplayer.audio;
 
+import static androidx.media3.common.audio.AudioProcessor.EMPTY_BUFFER;
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.common.util.Util.constrainValue;
 import static androidx.media3.exoplayer.audio.AudioCapabilities.DEFAULT_AUDIO_CAPABILITIES;
@@ -1013,8 +1014,8 @@ private void registerStreamEventCallbackV29(AudioTrack audioTrack) {
    * {@link #writeBuffer(ByteBuffer, long)}.
    */
   private void processBuffers(long avSyncPresentationTimeUs) throws WriteException {
-    if (!audioProcessingPipeline.isOperational() && inputBuffer != null) {
-      writeBuffer(inputBuffer, avSyncPresentationTimeUs);
+    if (!audioProcessingPipeline.isOperational()) {
+      writeBuffer(inputBuffer != null ? inputBuffer : EMPTY_BUFFER, avSyncPresentationTimeUs);
       return;
     }
 

File: libraries/common/src/main/java/androidx/media3/common/SimpleBasePlayer.java
Patch:
@@ -1978,8 +1978,7 @@ public final void addListener(Listener listener) {
 
   @Override
   public final void removeListener(Listener listener) {
-    // Don't verify application thread. We allow calls to this method from any thread.
-    checkNotNull(listener);
+    verifyApplicationThreadAndInitState();
     listeners.remove(listener);
   }
 

File: libraries/session/src/main/java/androidx/media3/session/MediaController.java
Patch:
@@ -1720,6 +1720,7 @@ public void setTrackSelectionParameters(TrackSelectionParameters parameters) {
 
   @Override
   public Looper getApplicationLooper() {
+    // Don't verify application thread. We allow calls to this method from any thread.
     return applicationHandler.getLooper();
   }
 
@@ -1744,12 +1745,14 @@ public Looper getApplicationLooper() {
 
   @Override
   public void addListener(Player.Listener listener) {
+    // Don't verify application thread. We allow calls to this method from any thread.
     checkNotNull(listener, "listener must not be null");
     impl.addListener(listener);
   }
 
   @Override
   public void removeListener(Player.Listener listener) {
+    verifyApplicationThread();
     checkNotNull(listener, "listener must not be null");
     impl.removeListener(listener);
   }

File: libraries/test_utils_robolectric/src/main/java/androidx/media3/test/utils/robolectric/RobolectricUtil.java
Patch:
@@ -96,7 +96,7 @@ public static void runMainLooperUntil(Supplier<Boolean> condition, long timeoutM
    */
   public static void runLooperUntil(Looper looper, Supplier<Boolean> condition)
       throws TimeoutException {
-    runLooperUntil(looper, condition, DEFAULT_TIMEOUT_MS * 1000000, Clock.DEFAULT);
+    runLooperUntil(looper, condition, DEFAULT_TIMEOUT_MS, Clock.DEFAULT);
   }
 
   /**

File: libraries/session/src/main/java/androidx/media3/session/MediaBrowserImplLegacy.java
Patch:
@@ -311,7 +311,8 @@ private MediaItem createRootMediaItem(MediaBrowserCompat browserCompat) {
     String mediaId = browserCompat.getRoot();
     MediaMetadata mediaMetadata =
         new MediaMetadata.Builder()
-            .setFolderType(MediaMetadata.FOLDER_TYPE_MIXED)
+            .setIsBrowsable(true)
+            .setMediaType(MediaMetadata.MEDIA_TYPE_FOLDER_MIXED)
             .setIsPlayable(false)
             .setExtras(browserCompat.getExtras())
             .build();

File: libraries/session/src/main/java/androidx/media3/session/MediaConstants.java
Patch:
@@ -213,7 +213,7 @@ public final class MediaConstants {
    * {@link MediaBrowser#getLibraryRoot}, the preference applies to all playable items within the
    * browse tree.
    *
-   * <p>If exposed through {@link MediaMetadata#extras} of a {@linkplain MediaMetadata#folderType
+   * <p>If exposed through {@link MediaMetadata#extras} of a {@linkplain MediaMetadata#isBrowsable
    * browsable media item}, the preference applies to only the immediate playable children. It takes
    * precedence over preferences received with {@link MediaBrowser#getLibraryRoot}.
    *
@@ -238,7 +238,7 @@ public final class MediaConstants {
    * {@link MediaBrowser#getLibraryRoot}, the preference applies to all browsable items within the
    * browse tree.
    *
-   * <p>If exposed through {@link MediaMetadata#extras} of a {@linkplain MediaMetadata#folderType
+   * <p>If exposed through {@link MediaMetadata#extras} of a {@linkplain MediaMetadata#isBrowsable
    * browsable media item}, the preference applies to only the immediate browsable children. It
    * takes precedence over preferences received with {@link
    * MediaBrowser#getLibraryRoot(LibraryParams)}.

File: libraries/session/src/main/java/androidx/media3/session/MediaLibraryService.java
Patch:
@@ -123,8 +123,9 @@ public static final class MediaLibrarySession extends MediaSession {
      * An extended {@link MediaSession.Callback} for the {@link MediaLibrarySession}.
      *
      * <p>When you return {@link LibraryResult} with {@link MediaItem media items}, each item must
-     * have valid {@link MediaItem#mediaId} and specify {@link MediaMetadata#folderType} and {@link
-     * MediaMetadata#isPlayable} in its {@link MediaItem#mediaMetadata}.
+     * have valid {@link MediaItem#mediaId} and specify {@link MediaMetadata#isBrowsable} (or {@link
+     * MediaMetadata#folderType}) and {@link MediaMetadata#isPlayable} in its {@link
+     * MediaItem#mediaMetadata}.
      */
     public interface Callback extends MediaSession.Callback {
 

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaBrowserListenerTest.java
Patch:
@@ -42,7 +42,6 @@
 import android.os.Bundle;
 import androidx.annotation.Nullable;
 import androidx.media3.common.MediaItem;
-import androidx.media3.common.MediaMetadata;
 import androidx.media3.session.MediaLibraryService.LibraryParams;
 import androidx.media3.test.session.common.MediaBrowserConstants;
 import androidx.media3.test.session.common.TestUtils;
@@ -155,7 +154,7 @@ public void getItem_browsable() throws Exception {
 
     assertThat(result.resultCode).isEqualTo(RESULT_SUCCESS);
     assertThat(result.value.mediaId).isEqualTo(mediaId);
-    assertThat(result.value.mediaMetadata.folderType).isEqualTo(MediaMetadata.FOLDER_TYPE_MIXED);
+    assertThat(result.value.mediaMetadata.isBrowsable).isTrue();
   }
 
   @Test

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaBrowserServiceCompatCallbackWithMediaBrowserTest.java
Patch:
@@ -142,7 +142,7 @@ public void onLoadItem(String itemId, Result<MediaBrowserCompat.MediaItem> resul
     assertThat(latch.await(TIMEOUT_MS, MILLISECONDS)).isTrue();
     assertThat(result.resultCode).isEqualTo(LibraryResult.RESULT_SUCCESS);
     assertItemEquals(testItem, result.value);
-    assertThat(result.value.mediaMetadata.folderType).isEqualTo(MediaMetadata.FOLDER_TYPE_MIXED);
+    assertThat(result.value.mediaMetadata.isBrowsable).isTrue();
   }
 
   @Test

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaSessionServiceNotificationTest.java
Patch:
@@ -138,7 +138,6 @@ private MediaMetadata createTestMediaMetadata() throws IOException {
         .setTitle("Test Song Name")
         .setArtist("Test Artist Name")
         .setArtworkData(artworkData)
-        .setFolderType(MediaMetadata.FOLDER_TYPE_NONE)
         .setIsPlayable(true)
         .build();
   }
@@ -147,7 +146,6 @@ private MediaMetadata createAnotherTestMediaMetadata() {
     return new MediaMetadata.Builder()
         .setTitle("New Song Name")
         .setArtist("New Artist Name")
-        .setFolderType(MediaMetadata.FOLDER_TYPE_NONE)
         .setIsPlayable(true)
         .build();
   }

File: libraries/transformer/src/main/java/androidx/media3/transformer/BaseSamplePipeline.java
Patch:
@@ -47,7 +47,7 @@ protected static TransformationException createNoSupportedMimeTypeException(
         /* isDecoder= */ false,
         requestedEncoderFormat,
         /* mediaCodecName= */ null,
-        TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
+        TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED);
   }
 
   @Override

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultCodec.java
Patch:
@@ -407,7 +407,7 @@ private static TransformationException createInitializationTransformationExcepti
           mediaCodecName,
           isDecoder
               ? TransformationException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED
-              : TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
+              : TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED);
     }
     return TransformationException.createForUnexpected(cause);
   }

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultEncoderFactory.java
Patch:
@@ -669,7 +669,7 @@ private static int getSuggestedBitrate(int width, int height, float frameRate) {
   @RequiresNonNull("#1.sampleMimeType")
   private static TransformationException createTransformationException(Format format) {
     return createTransformationException(
-        format, TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
+        format, TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED);
   }
 
   @RequiresNonNull("#1.sampleMimeType")

File: libraries/transformer/src/test/java/androidx/media3/transformer/DefaultEncoderFactoryTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package androidx.media3.transformer;
 
-import static androidx.media3.transformer.TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED;
+import static androidx.media3.transformer.TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED;
 import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertThrows;
@@ -113,7 +113,7 @@ public void createForVideoEncoding_withFallbackOnAndUnsupportedMimeType_throws()
         assertThrows(
             TransformationException.class,
             () -> encoderFactory.createForVideoEncoding(requestedVideoFormat));
-    assertThat(transformationException.errorCode).isEqualTo(ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
+    assertThat(transformationException.errorCode).isEqualTo(ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED);
   }
 
   @Test

File: libraries/transformer/src/test/java/androidx/media3/transformer/TransformerEndToEndTest.java
Patch:
@@ -450,7 +450,7 @@ public void startTransformation_withAudioEncoderFormatUnsupported_completesWithE
 
     assertThat(exception).hasCauseThat().isInstanceOf(IllegalArgumentException.class);
     assertThat(exception.errorCode)
-        .isEqualTo(TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
+        .isEqualTo(TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED);
   }
 
   @Test

File: library/common/src/test/java/com/google/android/exoplayer2/MediaMetadataTest.java
Patch:
@@ -64,6 +64,7 @@ public void builder_minimal_correctDefaults() {
     assertThat(mediaMetadata.genre).isNull();
     assertThat(mediaMetadata.compilation).isNull();
     assertThat(mediaMetadata.station).isNull();
+    assertThat(mediaMetadata.mediaType).isNull();
     assertThat(mediaMetadata.extras).isNull();
   }
 
@@ -149,6 +150,7 @@ private static MediaMetadata getFullyPopulatedMediaMetadata() {
         .setGenre("Pop")
         .setCompilation("Amazing songs.")
         .setStation("radio station")
+        .setMediaType(MediaMetadata.MEDIA_TYPE_MIXED)
         .setExtras(extras)
         .build();
   }

File: libraries/effect/src/androidTest/java/androidx/media3/effect/GlEffectsFrameProcessorPixelTest.java
Patch:
@@ -44,6 +44,7 @@
 import androidx.media3.test.utils.DecodeOneFrameUtil;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.common.collect.ImmutableList;
+import com.google.common.util.concurrent.MoreExecutors;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicReference;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
@@ -441,6 +442,7 @@ public void onFrameProcessingEnded() {
                         frameProcessingEnded = true;
                       }
                     },
+                    MoreExecutors.directExecutor(),
                     effects,
                     DebugViewProvider.NONE,
                     ColorInfo.SDR_BT709_LIMITED,

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -42,6 +42,7 @@
 import androidx.media3.effect.Presentation;
 import androidx.media3.effect.ScaleToFitTransformation;
 import com.google.common.collect.ImmutableList;
+import com.google.common.util.concurrent.MoreExecutors;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.List;
@@ -195,6 +196,7 @@ public void onFrameProcessingEnded() {
                   }
                 }
               },
+              MoreExecutors.directExecutor(),
               effectsListBuilder.build(),
               debugViewProvider,
               // HDR colors are only used if the MediaCodec encoder supports FEATURE_HdrEditing.

File: libraries/transformer/src/test/java/androidx/media3/transformer/VideoEncoderWrapperTest.java
Patch:
@@ -50,6 +50,7 @@ public final class VideoEncoderWrapperTest {
       new FallbackListener(
           MediaItem.fromUri(Uri.EMPTY),
           new ListenerSet<>(Looper.myLooper(), Clock.DEFAULT, (listener, flags) -> {}),
+          Clock.DEFAULT.createHandler(Looper.myLooper(), /* callback= */ null),
           emptyTransformationRequest);
   private final VideoTranscodingSamplePipeline.EncoderWrapper encoderWrapper =
       new VideoTranscodingSamplePipeline.EncoderWrapper(

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/ExoPlayerTest.java
Patch:
@@ -2524,7 +2524,7 @@ public void sendMessagesSeekAfterDeliveryTimeDuringPreparation() throws Exceptio
         .build()
         .start()
         .blockUntilEnded(TIMEOUT_MS);
-    assertThat(target.positionMs).isEqualTo(C.POSITION_UNSET);
+    assertThat(target.positionMs).isEqualTo(C.TIME_UNSET);
   }
 
   @Test
@@ -2546,7 +2546,7 @@ public void sendMessagesSeekAfterDeliveryTimeAfterPreparation() throws Exception
         .build()
         .start()
         .blockUntilEnded(TIMEOUT_MS);
-    assertThat(target.positionMs).isEqualTo(C.POSITION_UNSET);
+    assertThat(target.positionMs).isEqualTo(C.TIME_UNSET);
   }
 
   @Test
@@ -12292,7 +12292,7 @@ private static final class PositionGrabbingMessageTarget extends PlayerTarget {
 
     public PositionGrabbingMessageTarget() {
       mediaItemIndex = C.INDEX_UNSET;
-      positionMs = C.POSITION_UNSET;
+      positionMs = C.TIME_UNSET;
     }
 
     @Override

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/TextRenderer.java
Patch:
@@ -427,7 +427,7 @@ private void handleDecoderError(SubtitleDecoderException e) {
   @SideEffectFree
   private long getCurrentEventTimeUs(long positionUs) {
     int nextEventTimeIndex = subtitle.getNextEventTimeIndex(positionUs);
-    if (nextEventTimeIndex == 0) {
+    if (nextEventTimeIndex == 0 || subtitle.getEventTimeCount() == 0) {
       return subtitle.timeUs;
     }
 

File: libraries/common/src/test/java/androidx/media3/common/MediaMetadataTest.java
Patch:
@@ -64,6 +64,7 @@ public void builder_minimal_correctDefaults() {
     assertThat(mediaMetadata.genre).isNull();
     assertThat(mediaMetadata.compilation).isNull();
     assertThat(mediaMetadata.station).isNull();
+    assertThat(mediaMetadata.mediaType).isNull();
     assertThat(mediaMetadata.extras).isNull();
   }
 
@@ -149,6 +150,7 @@ private static MediaMetadata getFullyPopulatedMediaMetadata() {
         .setGenre("Pop")
         .setCompilation("Amazing songs.")
         .setStation("radio station")
+        .setMediaType(MediaMetadata.MEDIA_TYPE_MIXED)
         .setExtras(extras)
         .build();
   }

File: libraries/session/src/main/java/androidx/media3/session/MediaUtils.java
Patch:
@@ -351,7 +351,9 @@ public static MediaDescriptionCompat convertToMediaDescriptionCompat(
     }
     return builder
         .setTitle(metadata.title)
-        .setSubtitle(metadata.subtitle)
+        // The BT AVRPC service expects the subtitle of the media description to be the artist
+        // (see https://github.com/androidx/media/issues/148).
+        .setSubtitle(metadata.artist != null ? metadata.artist : metadata.subtitle)
         .setDescription(metadata.description)
         .setIconUri(metadata.artworkUri)
         .setMediaUri(item.requestMetadata.mediaUri)

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/EncoderUtil.java
Patch:
@@ -444,9 +444,7 @@ private static ImmutableListMultimap<String, MediaCodecInfo> populateEncoderInfo
       }
       String[] supportedMimeTypes = mediaCodecInfo.getSupportedTypes();
       for (String mimeType : supportedMimeTypes) {
-        if (MimeTypes.isVideo(mimeType)) {
-          encoderInfosBuilder.put(Ascii.toLowerCase(mimeType), mediaCodecInfo);
-        }
+        encoderInfosBuilder.put(Ascii.toLowerCase(mimeType), mediaCodecInfo);
       }
     }
     return encoderInfosBuilder.build();

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/VideoEncoderWrapperTest.java
Patch:
@@ -32,7 +32,6 @@
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.SurfaceInfo;
 import com.google.common.collect.ImmutableList;
-import java.util.List;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -165,7 +164,7 @@ public void setFallbackResolution(int fallbackWidth, int fallbackHeight) {
     }
 
     @Override
-    public Codec createForAudioEncoding(Format format, List<String> allowedMimeTypes) {
+    public Codec createForAudioEncoding(Format format) {
       throw new UnsupportedOperationException();
     }
 

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/AndroidTestUtil.java
Patch:
@@ -478,9 +478,8 @@ public Codec createForAudioEncoding(Format format, List<String> allowedMimeTypes
     }
 
     @Override
-    public Codec createForVideoEncoding(Format format, List<String> allowedMimeTypes)
-        throws TransformationException {
-      return encoderFactory.createForVideoEncoding(format, allowedMimeTypes);
+    public Codec createForVideoEncoding(Format format) throws TransformationException {
+      return encoderFactory.createForVideoEncoding(format);
     }
 
     @Override

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/TransformerAndroidTestRunner.java
Patch:
@@ -454,9 +454,8 @@ public Codec createForAudioEncoding(Format format, List<String> allowedMimeTypes
     }
 
     @Override
-    public Codec createForVideoEncoding(Format format, List<String> allowedMimeTypes)
-        throws TransformationException {
-      Codec videoEncoder = encoderFactory.createForVideoEncoding(format, allowedMimeTypes);
+    public Codec createForVideoEncoding(Format format) throws TransformationException {
+      Codec videoEncoder = encoderFactory.createForVideoEncoding(format);
       videoEncoderName = videoEncoder.getName();
       return videoEncoder;
     }

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/TransformerEndToEndTest.java
Patch:
@@ -146,8 +146,7 @@ public Codec createForAudioEncoding(Format format, List<String> allowedMimeTypes
     }
 
     @Override
-    public Codec createForVideoEncoding(Format format, List<String> allowedMimeTypes)
-        throws TransformationException {
+    public Codec createForVideoEncoding(Format format) throws TransformationException {
       throw TransformationException.createForCodec(
           new IllegalArgumentException(),
           /* isVideo= */ true,

File: libraries/transformer/src/main/java/androidx/media3/transformer/EncoderUtil.java
Patch:
@@ -446,9 +446,7 @@ private static ImmutableListMultimap<String, MediaCodecInfo> populateEncoderInfo
       }
       String[] supportedMimeTypes = mediaCodecInfo.getSupportedTypes();
       for (String mimeType : supportedMimeTypes) {
-        if (MimeTypes.isVideo(mimeType)) {
-          encoderInfosBuilder.put(Ascii.toLowerCase(mimeType), mediaCodecInfo);
-        }
+        encoderInfosBuilder.put(Ascii.toLowerCase(mimeType), mediaCodecInfo);
       }
     }
     return encoderInfosBuilder.build();

File: libraries/transformer/src/test/java/androidx/media3/transformer/VideoEncoderWrapperTest.java
Patch:
@@ -32,7 +32,6 @@
 import androidx.media3.common.util.ListenerSet;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.common.collect.ImmutableList;
-import java.util.List;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -165,7 +164,7 @@ public void setFallbackResolution(int fallbackWidth, int fallbackHeight) {
     }
 
     @Override
-    public Codec createForAudioEncoding(Format format, List<String> allowedMimeTypes) {
+    public Codec createForAudioEncoding(Format format) {
       throw new UnsupportedOperationException();
     }
 

File: library/common/src/main/java/com/google/android/exoplayer2/util/MediaFormatUtil.java
Patch:
@@ -321,7 +321,8 @@ private static boolean isValidColorRange(int colorRange) {
   /** Whether this is a valid {@link C.ColorTransfer} instance. */
   private static boolean isValidColorTransfer(int colorTransfer) {
     // LINT.IfChange(color_transfer)
-    return colorTransfer == C.COLOR_TRANSFER_SDR
+    return colorTransfer == C.COLOR_TRANSFER_LINEAR
+        || colorTransfer == C.COLOR_TRANSFER_SDR
         || colorTransfer == C.COLOR_TRANSFER_ST2084
         || colorTransfer == C.COLOR_TRANSFER_HLG
         || colorTransfer == Format.NO_VALUE;

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -273,7 +273,7 @@ public ExoPlayerImplInternal(
 
     deliverPendingMessageAtStartPositionRequired = true;
 
-    Handler eventHandler = new Handler(applicationLooper);
+    HandlerWrapper eventHandler = clock.createHandler(applicationLooper, /* callback= */ null);
     queue = new MediaPeriodQueue(analyticsCollector, eventHandler);
     mediaSourceList =
         new MediaSourceList(/* listener= */ this, analyticsCollector, eventHandler, playerId);

File: library/core/src/main/java/com/google/android/exoplayer2/MediaPeriodQueue.java
Patch:
@@ -30,6 +30,7 @@
 import com.google.android.exoplayer2.trackselection.TrackSelectorResult;
 import com.google.android.exoplayer2.upstream.Allocator;
 import com.google.android.exoplayer2.util.Assertions;
+import com.google.android.exoplayer2.util.HandlerWrapper;
 import com.google.common.collect.ImmutableList;
 
 /**
@@ -69,7 +70,7 @@
   private final Timeline.Period period;
   private final Timeline.Window window;
   private final AnalyticsCollector analyticsCollector;
-  private final Handler analyticsCollectorHandler;
+  private final HandlerWrapper analyticsCollectorHandler;
 
   private long nextWindowSequenceNumber;
   private @RepeatMode int repeatMode;
@@ -89,7 +90,7 @@
    *     on.
    */
   public MediaPeriodQueue(
-      AnalyticsCollector analyticsCollector, Handler analyticsCollectorHandler) {
+      AnalyticsCollector analyticsCollector, HandlerWrapper analyticsCollectorHandler) {
     this.analyticsCollector = analyticsCollector;
     this.analyticsCollectorHandler = analyticsCollectorHandler;
     period = new Timeline.Period();

File: library/core/src/test/java/com/google/android/exoplayer2/MediaSourceListTest.java
Patch:
@@ -64,7 +64,7 @@ public void setUp() {
         new MediaSourceList(
             mock(MediaSourceList.MediaSourceListInfoRefreshListener.class),
             analyticsCollector,
-            Util.createHandlerForCurrentOrMainLooper(),
+            Clock.DEFAULT.createHandler(Util.getCurrentOrMainLooper(), /* callback= */ null),
             PlayerId.UNSET);
   }
 

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/AndroidTestUtil.java
Patch:
@@ -478,9 +478,8 @@ public Codec createForAudioEncoding(Format format, List<String> allowedMimeTypes
     }
 
     @Override
-    public Codec createForVideoEncoding(Format format, List<String> allowedMimeTypes)
-        throws TransformationException {
-      return encoderFactory.createForVideoEncoding(format, allowedMimeTypes);
+    public Codec createForVideoEncoding(Format format) throws TransformationException {
+      return encoderFactory.createForVideoEncoding(format);
     }
 
     @Override

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/TransformerAndroidTestRunner.java
Patch:
@@ -454,9 +454,8 @@ public Codec createForAudioEncoding(Format format, List<String> allowedMimeTypes
     }
 
     @Override
-    public Codec createForVideoEncoding(Format format, List<String> allowedMimeTypes)
-        throws TransformationException {
-      Codec videoEncoder = encoderFactory.createForVideoEncoding(format, allowedMimeTypes);
+    public Codec createForVideoEncoding(Format format) throws TransformationException {
+      Codec videoEncoder = encoderFactory.createForVideoEncoding(format);
       videoEncoderName = videoEncoder.getName();
       return videoEncoder;
     }

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/TransformerEndToEndTest.java
Patch:
@@ -146,8 +146,7 @@ public Codec createForAudioEncoding(Format format, List<String> allowedMimeTypes
     }
 
     @Override
-    public Codec createForVideoEncoding(Format format, List<String> allowedMimeTypes)
-        throws TransformationException {
+    public Codec createForVideoEncoding(Format format) throws TransformationException {
       throw TransformationException.createForCodec(
           new IllegalArgumentException(),
           /* isVideo= */ true,

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultMuxer.java
Patch:
@@ -28,7 +28,7 @@ public final class DefaultMuxer implements Muxer {
   public static final class Factory implements Muxer.Factory {
 
     /** The default value returned by {@link #getMaxDelayBetweenSamplesMs()}. */
-    public static final long DEFAULT_MAX_DELAY_BETWEEN_SAMPLES_MS = 3000;
+    public static final long DEFAULT_MAX_DELAY_BETWEEN_SAMPLES_MS = 10_000;
 
     private final Muxer.Factory muxerFactory;
 

File: libraries/common/src/main/java/androidx/media3/common/util/MediaFormatUtil.java
Patch:
@@ -322,7 +322,8 @@ private static boolean isValidColorRange(int colorRange) {
   /** Whether this is a valid {@link C.ColorTransfer} instance. */
   private static boolean isValidColorTransfer(int colorTransfer) {
     // LINT.IfChange(color_transfer)
-    return colorTransfer == C.COLOR_TRANSFER_SDR
+    return colorTransfer == C.COLOR_TRANSFER_LINEAR
+        || colorTransfer == C.COLOR_TRANSFER_SDR
         || colorTransfer == C.COLOR_TRANSFER_ST2084
         || colorTransfer == C.COLOR_TRANSFER_HLG
         || colorTransfer == Format.NO_VALUE;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayerImplInternal.java
Patch:
@@ -281,7 +281,7 @@ public ExoPlayerImplInternal(
 
     deliverPendingMessageAtStartPositionRequired = true;
 
-    Handler eventHandler = new Handler(applicationLooper);
+    HandlerWrapper eventHandler = clock.createHandler(applicationLooper, /* callback= */ null);
     queue = new MediaPeriodQueue(analyticsCollector, eventHandler);
     mediaSourceList =
         new MediaSourceList(/* listener= */ this, analyticsCollector, eventHandler, playerId);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/MediaPeriodQueue.java
Patch:
@@ -26,6 +26,7 @@
 import androidx.media3.common.Player.RepeatMode;
 import androidx.media3.common.Timeline;
 import androidx.media3.common.util.Assertions;
+import androidx.media3.common.util.HandlerWrapper;
 import androidx.media3.exoplayer.analytics.AnalyticsCollector;
 import androidx.media3.exoplayer.source.MediaPeriod;
 import androidx.media3.exoplayer.source.MediaSource.MediaPeriodId;
@@ -71,7 +72,7 @@
   private final Timeline.Period period;
   private final Timeline.Window window;
   private final AnalyticsCollector analyticsCollector;
-  private final Handler analyticsCollectorHandler;
+  private final HandlerWrapper analyticsCollectorHandler;
 
   private long nextWindowSequenceNumber;
   private @RepeatMode int repeatMode;
@@ -91,7 +92,7 @@
    *     on.
    */
   public MediaPeriodQueue(
-      AnalyticsCollector analyticsCollector, Handler analyticsCollectorHandler) {
+      AnalyticsCollector analyticsCollector, HandlerWrapper analyticsCollectorHandler) {
     this.analyticsCollector = analyticsCollector;
     this.analyticsCollectorHandler = analyticsCollectorHandler;
     period = new Timeline.Period();

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/MediaSourceListTest.java
Patch:
@@ -67,7 +67,7 @@ public void setUp() {
         new MediaSourceList(
             mock(MediaSourceList.MediaSourceListInfoRefreshListener.class),
             analyticsCollector,
-            Util.createHandlerForCurrentOrMainLooper(),
+            Clock.DEFAULT.createHandler(Util.getCurrentOrMainLooper(), /* callback= */ null),
             PlayerId.UNSET);
   }
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultMuxer.java
Patch:
@@ -30,7 +30,7 @@ public final class DefaultMuxer implements Muxer {
   public static final class Factory implements Muxer.Factory {
 
     /** The default value returned by {@link #getMaxDelayBetweenSamplesMs()}. */
-    public static final long DEFAULT_MAX_DELAY_BETWEEN_SAMPLES_MS = 3000;
+    public static final long DEFAULT_MAX_DELAY_BETWEEN_SAMPLES_MS = 10_000;
 
     private final Muxer.Factory muxerFactory;
 

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/SsimHelper.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.google.android.exoplayer2.transformer;
 
+import static com.google.android.exoplayer2.transformer.AndroidTestUtil.MEDIA_CODEC_PRIORITY_NON_REALTIME;
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
@@ -232,6 +233,7 @@ public VideoDecodingWrapper(Context context, String filePath, int comparisonInte
 
       String sampleMimeType = checkNotNull(mediaFormat.getString(MediaFormat.KEY_MIME));
       mediaFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT, MEDIA_CODEC_COLOR_SPACE);
+      mediaFormat.setInteger(MediaFormat.KEY_PRIORITY, MEDIA_CODEC_PRIORITY_NON_REALTIME);
       this.mediaFormat = mediaFormat;
       mediaCodec = MediaCodec.createDecoderByType(sampleMimeType);
     }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformationException.java
Patch:
@@ -39,12 +39,11 @@
 public final class TransformationException extends Exception {
 
   /**
-   * Codes that identify causes of {@link Transformer} errors.
+   * Error codes that identify causes of {@link Transformer} errors.
    *
    * <p>This list of errors may be extended in future versions. The underlying values may also
    * change, so it is best to avoid relying on them directly without using the constants.
    */
-  // TODO(b/209469847): Update the javadoc once the underlying values are fixed.
   @Documented
   @Retention(RetentionPolicy.SOURCE)
   @Target(TYPE_USE)

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -674,7 +674,8 @@ default void onTimelineChanged(Timeline timeline, @TimelineChangeReason int reas
      * to the current {@link #getRepeatMode() repeat mode}.
      *
      * <p>Note that this callback is also called when the playlist becomes non-empty or empty as a
-     * consequence of a playlist change.
+     * consequence of a playlist change or {@linkplain #onAvailableCommandsChanged(Commands) a
+     * change in available commands}.
      *
      * <p>{@link #onEvents(Player, Events)} will also be called to report this event along with
      * other events that happen in the same {@link Looper} message queue iteration.

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/SsimHelper.java
Patch:
@@ -19,6 +19,7 @@
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.common.util.Assertions.checkState;
 import static androidx.media3.common.util.Assertions.checkStateNotNull;
+import static androidx.media3.transformer.AndroidTestUtil.MEDIA_CODEC_PRIORITY_NON_REALTIME;
 import static com.google.common.truth.Truth.assertThat;
 import static com.google.common.truth.Truth.assertWithMessage;
 
@@ -232,6 +233,7 @@ public VideoDecodingWrapper(Context context, String filePath, int comparisonInte
 
       String sampleMimeType = checkNotNull(mediaFormat.getString(MediaFormat.KEY_MIME));
       mediaFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT, MEDIA_CODEC_COLOR_SPACE);
+      mediaFormat.setInteger(MediaFormat.KEY_PRIORITY, MEDIA_CODEC_PRIORITY_NON_REALTIME);
       this.mediaFormat = mediaFormat;
       mediaCodec = MediaCodec.createDecoderByType(sampleMimeType);
     }

File: libraries/session/src/main/java/androidx/media3/session/DefaultMediaNotificationProvider.java
Patch:
@@ -244,8 +244,6 @@ public interface NotificationIdProvider {
   private final String channelId;
   @StringRes private final int channelNameResourceId;
   private final NotificationManager notificationManager;
-  // Cache the last bitmap load request to avoid reloading the bitmap again, particularly useful
-  // when showing a notification for the same item (e.g. when switching from playing to paused).
   private final Handler mainHandler;
 
   private @MonotonicNonNull OnBitmapLoadedFutureCallback pendingOnBitmapLoadedFutureCallback;

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionLegacyStub.java
Patch:
@@ -118,7 +118,6 @@
   private final MediaPlayPauseKeyHandler mediaPlayPauseKeyHandler;
   private final MediaSessionCompat sessionCompat;
   @Nullable private VolumeProviderCompat volumeProviderCompat;
-  private final Handler mainHandler;
 
   private volatile long connectionTimeoutMs;
   @Nullable private FutureCallback<Bitmap> pendingBitmapLoadCallback;
@@ -162,7 +161,6 @@ public MediaSessionLegacyStub(
     @Initialized
     MediaSessionLegacyStub thisRef = this;
     sessionCompat.setCallback(thisRef, handler);
-    mainHandler = new Handler(Looper.getMainLooper());
   }
 
   /** Starts to receive commands. */
@@ -1205,7 +1203,9 @@ public void onFailure(Throwable t) {
                 }
               };
           Futures.addCallback(
-              bitmapFuture, pendingBitmapLoadCallback, /* executor= */ mainHandler::post);
+              bitmapFuture,
+              pendingBitmapLoadCallback,
+              /* executor= */ sessionImpl.getApplicationHandler()::post);
         }
       }
       setMetadata(

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformationException.java
Patch:
@@ -41,12 +41,11 @@
 public final class TransformationException extends Exception {
 
   /**
-   * Codes that identify causes of {@link Transformer} errors.
+   * Error codes that identify causes of {@link Transformer} errors.
    *
    * <p>This list of errors may be extended in future versions. The underlying values may also
    * change, so it is best to avoid relying on them directly without using the constants.
    */
-  // TODO(b/209469847): Update the javadoc once the underlying values are fixed.
   @Documented
   @Retention(RetentionPolicy.SOURCE)
   @Target(TYPE_USE)

File: libraries/common/src/main/java/androidx/media3/common/Player.java
Patch:
@@ -677,7 +677,8 @@ default void onTimelineChanged(Timeline timeline, @TimelineChangeReason int reas
      * to the current {@link #getRepeatMode() repeat mode}.
      *
      * <p>Note that this callback is also called when the playlist becomes non-empty or empty as a
-     * consequence of a playlist change.
+     * consequence of a playlist change or {@linkplain #onAvailableCommandsChanged(Commands) a
+     * change in available commands}.
      *
      * <p>{@link #onEvents(Player, Events)} will also be called to report this event along with
      * other events that happen in the same {@link Looper} message queue iteration.

File: libraries/session/src/main/java/androidx/media3/session/MediaSession.java
Patch:
@@ -1136,7 +1136,8 @@ default void onPlayerInfoChanged(
         boolean excludeMediaItemsMetadata,
         boolean excludeCues,
         boolean excludeTimeline,
-        boolean excludeTracks)
+        boolean excludeTracks,
+        int controllerInterfaceVersion)
         throws RemoteException {}
 
     default void onPeriodicSessionPositionInfoChanged(

File: libraries/session/src/main/java/androidx/media3/session/MediaSession.java
Patch:
@@ -807,11 +807,10 @@ public ListenableFuture<SessionResult> sendCustomCommand(
 
   /**
    * Returns the {@link MediaSessionCompat.Token} of the {@link MediaSessionCompat} created
-   * internally by this session. You may cast the {@link Object} to {@link
-   * MediaSessionCompat.Token}.
+   * internally by this session.
    */
   @UnstableApi
-  public Object getSessionCompatToken() {
+  public MediaSessionCompat.Token getSessionCompatToken() {
     return impl.getSessionCompat().getSessionToken();
   }
 

File: libraries/session/src/main/java/androidx/media3/session/MediaStyleNotificationHelper.java
Patch:
@@ -501,8 +501,7 @@ public static Notification.MediaStyle fillInMediaStyle(
       if (actionsToShowInCompact != null) {
         setShowActionsInCompactView(style, actionsToShowInCompact);
       }
-      MediaSessionCompat.Token legacyToken =
-          (MediaSessionCompat.Token) session.getSessionCompatToken();
+      MediaSessionCompat.Token legacyToken = session.getSessionCompatToken();
       style.setMediaSession((android.media.session.MediaSession.Token) legacyToken.getToken());
       return style;
     }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/SpeedChangingAudioProcessor.java
Patch:
@@ -108,7 +108,9 @@ public void queueInput(ByteBuffer inputBuffer) {
       }
     } else {
       ByteBuffer buffer = replaceOutputBuffer(/* size= */ inputBuffer.remaining());
-      buffer.put(inputBuffer);
+      if (inputBuffer.hasRemaining()) {
+        buffer.put(inputBuffer);
+      }
       buffer.flip();
     }
     bytesRead += inputBuffer.position() - startPosition;

File: libraries/transformer/src/main/java/androidx/media3/transformer/SpeedChangingAudioProcessor.java
Patch:
@@ -108,7 +108,9 @@ public void queueInput(ByteBuffer inputBuffer) {
       }
     } else {
       ByteBuffer buffer = replaceOutputBuffer(/* size= */ inputBuffer.remaining());
-      buffer.put(inputBuffer);
+      if (inputBuffer.hasRemaining()) {
+        buffer.put(inputBuffer);
+      }
       buffer.flip();
     }
     bytesRead += inputBuffer.position() - startPosition;

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -190,6 +190,7 @@ private void startTransformation() {
       throw new IllegalStateException(e);
     }
     informationTextView.setText(R.string.transformation_started);
+    progressViewGroup.setVisibility(View.VISIBLE);
     inputCardView.setVisibility(View.GONE);
     outputPlayerView.setVisibility(View.GONE);
     Handler mainHandler = new Handler(getMainLooper());

File: library/common/src/main/java/com/google/android/exoplayer2/SimpleBasePlayer.java
Patch:
@@ -32,6 +32,8 @@
 import androidx.annotation.IntRange;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.audio.AudioAttributes;
+import com.google.android.exoplayer2.metadata.Metadata;
+import com.google.android.exoplayer2.source.ads.AdPlaybackState;
 import com.google.android.exoplayer2.text.CueGroup;
 import com.google.android.exoplayer2.trackselection.TrackSelectionParameters;
 import com.google.android.exoplayer2.util.Clock;

File: library/core/src/test/java/com/google/android/exoplayer2/metadata/MetadataRendererTest.java
Patch:
@@ -107,7 +107,7 @@ public void decodeMetadata_handlesId3WrappedInEmsg() throws Exception {
     assertThat(metadata).hasSize(1);
     assertThat(metadata.get(0).length()).isEqualTo(1);
     TextInformationFrame expectedId3Frame =
-        new TextInformationFrame("TXXX", "Test description", new String[] { "Test value" });
+        new TextInformationFrame("TXXX", "Test description", Collections.singletonList("Test value"));
     assertThat(metadata.get(0).get(0)).isEqualTo(expectedId3Frame);
   }
 

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -190,6 +190,7 @@ private void startTransformation() {
       throw new IllegalStateException(e);
     }
     informationTextView.setText(R.string.transformation_started);
+    progressViewGroup.setVisibility(View.VISIBLE);
     inputCardView.setVisibility(View.GONE);
     outputPlayerView.setVisibility(View.GONE);
     Handler mainHandler = new Handler(getMainLooper());

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -824,7 +824,7 @@ public void onMetadata(Metadata metadata) {
         if (entry instanceof TextInformationFrame) {
           TextInformationFrame textFrame = (TextInformationFrame) entry;
           if ("TXXX".equals(textFrame.id)) {
-            streamPlayer.triggerUserTextReceived(textFrame.value);
+            streamPlayer.triggerUserTextReceived(textFrame.values[0]);
           }
         } else if (entry instanceof EventMessage) {
           EventMessage eventMessage = (EventMessage) entry;

File: library/core/src/test/java/com/google/android/exoplayer2/metadata/MetadataRendererTest.java
Patch:
@@ -107,7 +107,7 @@ public void decodeMetadata_handlesId3WrappedInEmsg() throws Exception {
     assertThat(metadata).hasSize(1);
     assertThat(metadata.get(0).length()).isEqualTo(1);
     TextInformationFrame expectedId3Frame =
-        new TextInformationFrame("TXXX", "Test description", "Test value");
+        new TextInformationFrame("TXXX", "Test description", new String[] { "Test value" });
     assertThat(metadata.get(0).get(0)).isEqualTo(expectedId3Frame);
   }
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp3/Mp3Extractor.java
Patch:
@@ -592,7 +592,7 @@ private static long getId3TlenUs(@Nullable Metadata metadata) {
         Metadata.Entry entry = metadata.get(i);
         if (entry instanceof TextInformationFrame
             && ((TextInformationFrame) entry).id.equals("TLEN")) {
-          return Util.msToUs(Long.parseLong(((TextInformationFrame) entry).value));
+          return Util.msToUs(Long.parseLong(((TextInformationFrame) entry).values[0]));
         }
       }
     }

File: libraries/common/src/main/java/androidx/media3/common/util/ListenerSet.java
Patch:
@@ -270,6 +270,7 @@ public ListenerHolder(T listener) {
     public void release(IterationFinishedEvent<T> event) {
       released = true;
       if (needsIterationFinishedEvent) {
+        needsIterationFinishedEvent = false;
         event.invoke(listener, flagsBuilder.build());
       }
     }

File: library/common/src/main/java/com/google/android/exoplayer2/util/ListenerSet.java
Patch:
@@ -268,6 +268,7 @@ public ListenerHolder(T listener) {
     public void release(IterationFinishedEvent<T> event) {
       released = true;
       if (needsIterationFinishedEvent) {
+        needsIterationFinishedEvent = false;
         event.invoke(listener, flagsBuilder.build());
       }
     }

File: library/common/src/main/java/com/google/android/exoplayer2/util/ListenerSet.java
Patch:
@@ -268,6 +268,7 @@ public ListenerHolder(T listener) {
     public void release(IterationFinishedEvent<T> event) {
       released = true;
       if (needsIterationFinishedEvent) {
+        needsIterationFinishedEvent = false;
         event.invoke(listener, flagsBuilder.build());
       }
     }

File: libraries/common/src/main/java/androidx/media3/common/util/ListenerSet.java
Patch:
@@ -270,6 +270,7 @@ public ListenerHolder(T listener) {
     public void release(IterationFinishedEvent<T> event) {
       released = true;
       if (needsIterationFinishedEvent) {
+        needsIterationFinishedEvent = false;
         event.invoke(listener, flagsBuilder.build());
       }
     }

File: extensions/cast/src/test/java/com/google/android/exoplayer2/ext/cast/CastTimelineTrackerTest.java
Patch:
@@ -311,7 +311,7 @@ private static MediaQueue mockMediaQueue(int[] itemIds) {
   }
 
   private static MediaInfo getMediaInfo(long durationMs) {
-    return new MediaInfo.Builder(/*contentId= */ "")
+    return new MediaInfo.Builder(/* contentId= */ "")
         .setStreamDuration(durationMs)
         .setContentType(MimeTypes.APPLICATION_MP4)
         .setStreamType(MediaInfo.STREAM_TYPE_NONE)

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -680,7 +680,7 @@ private static AdPlaybackState setVodAdGroupPlaceholders(
               adPlaybackState,
               /* fromPositionUs= */ fromPositionUs,
               /* contentResumeOffsetUs= */ 0,
-              /* adDurationsUs...= */ getAdDuration(
+              /* adDurationsUs= */ getAdDuration(
                   /* startTimeSeconds= */ cuePoint.getStartTime(),
                   /* endTimeSeconds= */ cuePoint.getEndTime()));
     }

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaUtil.java
Patch:
@@ -443,7 +443,7 @@ public static ImmutableMap<Object, AdPlaybackState> splitAdPlaybackStateForPerio
   private static AdPlaybackState splitAdGroupForPeriod(
       Object adsId, AdGroup adGroup, long periodStartUs, long periodDurationUs) {
     AdPlaybackState adPlaybackState =
-        new AdPlaybackState(checkNotNull(adsId), /* adGroupTimesUs...= */ 0)
+        new AdPlaybackState(checkNotNull(adsId), /* adGroupTimesUs= */ 0)
             .withAdCount(/* adGroupIndex= */ 0, /* adCount= */ 1)
             .withAdDurationsUs(/* adGroupIndex= */ 0, periodDurationUs)
             .withIsServerSideInserted(/* adGroupIndex= */ 0, true)
@@ -605,7 +605,7 @@ public static AdPlaybackState addLiveAdBreak(
               adPlaybackState,
               /* fromPositionUs= */ currentContentPeriodPositionUs,
               /* contentResumeOffsetUs= */ sum(adDurationsUs),
-              /* adDurationsUs...= */ adDurationsUs);
+              /* adDurationsUs= */ adDurationsUs);
       adGroupIndex =
           adPlaybackState.getAdGroupIndexForPositionUs(
               mediaPeriodPositionUs, /* periodDurationUs= */ C.TIME_UNSET);

File: extensions/leanback/src/main/java/com/google/android/exoplayer2/ext/leanback/LeanbackPlayerAdapter.java
Patch:
@@ -264,7 +264,7 @@ public void onPlayerError(PlaybackException error) {
             // int arguments (int what, int extra). Since PlaybackException defines a single error
             // code, we pass 0 as the extra.
             context.getString(
-                R.string.lb_media_player_error, /* formatArgs...= */ error.errorCode, 0));
+                R.string.lb_media_player_error, /* formatArgs= */ error.errorCode, 0));
       }
     }
 

File: library/common/src/main/java/com/google/android/exoplayer2/util/GlProgram.java
Patch:
@@ -327,7 +327,7 @@ public static Uniform create(int programId, int index) {
           /* unusedLength */ new int[1],
           /* lengthOffset= */ 0,
           /* unusedSize */ new int[1],
-          /*sizeOffset= */ 0,
+          /* sizeOffset= */ 0,
           type,
           /* typeOffset= */ 0,
           nameBytes,

File: library/common/src/test/java/com/google/android/exoplayer2/trackselection/TrackSelectionParametersTest.java
Patch:
@@ -185,9 +185,9 @@ public void clearViewPortConstraints_withConstrains_clearConstrains() {
     TrackSelectionParameters parameters =
         new TrackSelectionParameters.Builder(getApplicationContext())
             .setViewportSize(
-                /*viewportWidth=*/ 1,
-                /*viewportHeight=*/ 2,
-                /*viewportOrientationMayChange=*/ false)
+                /* viewportWidth= */ 1,
+                /* viewportHeight= */ 2,
+                /* viewportOrientationMayChange= */ false)
             .clearViewportSizeConstraints()
             .build();
 

File: library/common/src/test/java/com/google/android/exoplayer2/util/FlagSetTest.java
Patch:
@@ -80,7 +80,7 @@ public void contains_afterAddIf_returnsTrueForAddedValues() {
   public void containsAny_withoutAdd_returnsFalseForAllValues() {
     FlagSet flags = new FlagSet.Builder().build();
 
-    assertThat(flags.containsAny(/* flags...= */ -1234, 0, 2, Integer.MAX_VALUE)).isFalse();
+    assertThat(flags.containsAny(/* flags= */ -1234, 0, 2, Integer.MAX_VALUE)).isFalse();
   }
 
   @Test
@@ -95,9 +95,9 @@ public void containsAny_afterAdd_returnsTrueForAddedValues() {
 
     assertThat(
             flags.containsAny(
-                /* flags...= */ -1235, -1234, 0, 1, 2, Integer.MAX_VALUE - 1, Integer.MAX_VALUE))
+                /* flags= */ -1235, -1234, 0, 1, 2, Integer.MAX_VALUE - 1, Integer.MAX_VALUE))
         .isTrue();
-    assertThat(flags.containsAny(/* flags...= */ -1235, 1, Integer.MAX_VALUE - 1)).isFalse();
+    assertThat(flags.containsAny(/* flags= */ -1235, 1, Integer.MAX_VALUE - 1)).isFalse();
   }
 
   @Test

File: library/core/src/main/java/com/google/android/exoplayer2/source/MaskingMediaSource.java
Patch:
@@ -374,7 +374,7 @@ public Period getPeriod(int periodIndex, Period period, boolean setIds) {
           /* id= */ setIds ? 0 : null,
           /* uid= */ setIds ? MaskingTimeline.MASKING_EXTERNAL_PERIOD_UID : null,
           /* windowIndex= */ 0,
-          /* durationUs = */ C.TIME_UNSET,
+          /* durationUs= */ C.TIME_UNSET,
           /* positionInWindowUs= */ 0,
           /* adPlaybackState= */ AdPlaybackState.NONE,
           /* isPlaceholder= */ true);

File: library/core/src/main/java/com/google/android/exoplayer2/text/ExoplayerCuesDecoder.java
Patch:
@@ -111,7 +111,7 @@ public SubtitleOutputBuffer dequeueOutputBuffer() throws SubtitleDecoderExceptio
       SingleEventSubtitle subtitle =
           new SingleEventSubtitle(
               inputBuffer.timeUs, cueDecoder.decode(checkNotNull(inputBuffer.data).array()));
-      outputBuffer.setContent(inputBuffer.timeUs, subtitle, /* subsampleOffsetUs=*/ 0);
+      outputBuffer.setContent(inputBuffer.timeUs, subtitle, /* subsampleOffsetUs= */ 0);
     }
     inputBuffer.clear();
     inputBufferState = INPUT_BUFFER_AVAILABLE;

File: library/core/src/test/java/com/google/android/exoplayer2/MediaSourceListTest.java
Patch:
@@ -448,7 +448,7 @@ public void clearMediaSourceList_expectSourcesReleasedAndRemoved() {
   @Test
   public void setMediaSources_expectTimelineUsesCustomShuffleOrder() {
     Timeline timeline =
-        mediaSourceList.setMediaSources(createFakeHolders(), new FakeShuffleOrder(/* length=*/ 4));
+        mediaSourceList.setMediaSources(createFakeHolders(), new FakeShuffleOrder(/* length= */ 4));
     assertTimelineUsesFakeShuffleOrder(timeline);
   }
 

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/DefaultAnalyticsCollectorTest.java
Patch:
@@ -1027,7 +1027,7 @@ public void adPlayback() throws Exception {
         new AtomicReference<>(
             FakeTimeline.createAdPlaybackState(
                 /* adsPerAdGroup= */ 1,
-                /* adGroupTimesUs...= */ windowOffsetInFirstPeriodUs,
+                /* adGroupTimesUs= */ windowOffsetInFirstPeriodUs,
                 windowOffsetInFirstPeriodUs + 5 * C.MICROS_PER_SECOND,
                 C.TIME_END_OF_SOURCE));
     AtomicInteger playedAdCount = new AtomicInteger(0);
@@ -1300,7 +1300,7 @@ public void seekAfterMidroll() throws Exception {
                 /* isDynamic= */ false,
                 10 * C.MICROS_PER_SECOND,
                 FakeTimeline.createAdPlaybackState(
-                    /* adsPerAdGroup= */ 1, /* adGroupTimesUs...= */
+                    /* adsPerAdGroup= */ 1, /* adGroupTimesUs= */
                     windowOffsetInFirstPeriodUs + 5 * C.MICROS_PER_SECOND)));
     FakeMediaSource fakeMediaSource =
         new FakeMediaSource(

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/DefaultPlaybackSessionManagerTest.java
Patch:
@@ -1285,7 +1285,7 @@ public void finishAllSessions_callsOnSessionFinishedForAllCreatedSessions() {
   private static EventTime createEventTime(
       Timeline timeline, int windowIndex, @Nullable MediaPeriodId mediaPeriodId) {
     return new EventTime(
-        /* realtimeMs = */ 0,
+        /* realtimeMs= */ 0,
         timeline,
         windowIndex,
         mediaPeriodId,
@@ -1303,7 +1303,7 @@ private static EventTime createEventTime(
       @Nullable MediaPeriodId eventMediaPeriodId,
       @Nullable MediaPeriodId currentMediaPeriodId) {
     return new EventTime(
-        /* realtimeMs = */ 0,
+        /* realtimeMs= */ 0,
         timeline,
         windowIndex,
         eventMediaPeriodId,

File: library/core/src/test/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessorTest.java
Patch:
@@ -289,11 +289,10 @@ private static InputBufferProvider getInputBufferProviderForAlternatingSilenceAn
     Pcm16BitAudioBuilder audioBuilder = new Pcm16BitAudioBuilder(channelCount, totalFrameCount);
     while (!audioBuilder.isFull()) {
       int silenceDurationFrames = (silenceDurationMs * sampleRate) / 1000;
-      audioBuilder.appendFrames(
-          /* count= */ silenceDurationFrames, /* channelLevels...= */ (short) 0);
+      audioBuilder.appendFrames(/* count= */ silenceDurationFrames, /* channelLevels= */ (short) 0);
       int noiseDurationFrames = (noiseDurationMs * sampleRate) / 1000;
       audioBuilder.appendFrames(
-          /* count= */ noiseDurationFrames, /* channelLevels...= */ Short.MAX_VALUE);
+          /* count= */ noiseDurationFrames, /* channelLevels= */ Short.MAX_VALUE);
     }
     return new InputBufferProvider(audioBuilder.build());
   }

File: library/core/src/test/java/com/google/android/exoplayer2/source/ConcatenatingMediaSourceTest.java
Patch:
@@ -363,7 +363,7 @@ public void dynamicChangeOfEmptyTimelines() throws IOException {
           new FakeMediaSource(Timeline.EMPTY),
           new FakeMediaSource(Timeline.EMPTY),
         };
-    Timeline nonEmptyTimeline = new FakeTimeline(/* windowCount = */ 1);
+    Timeline nonEmptyTimeline = new FakeTimeline(/* windowCount= */ 1);
 
     mediaSource.addMediaSources(Arrays.asList(childSources));
     Timeline timeline = testRunner.prepareSource();

File: library/core/src/test/java/com/google/android/exoplayer2/source/ads/AdsMediaSourceTest.java
Patch:
@@ -78,7 +78,7 @@ public final class AdsMediaSourceTest {
       CONTENT_TIMELINE.getUidOfPeriod(/* periodIndex= */ 0);
 
   private static final AdPlaybackState AD_PLAYBACK_STATE =
-      new AdPlaybackState(/* adsId= */ new Object(), /* adGroupTimesUs...= */ 0)
+      new AdPlaybackState(/* adsId= */ new Object(), /* adGroupTimesUs= */ 0)
           .withContentDurationUs(CONTENT_DURATION_US)
           .withAdCount(/* adGroupIndex= */ 0, /* adCount= */ 1)
           .withAvailableAdUri(

File: library/effect/src/androidTest/java/com/google/android/exoplayer2/effect/ContrastPixelTest.java
Patch:
@@ -104,7 +104,7 @@ public void drawFrame_noContrastChange_leavesFrameUnchanged() throws Exception {
     setupOutputTexture(outputSize.first, outputSize.second);
     Bitmap expectedBitmap = readBitmap(ORIGINAL_PNG_ASSET_PATH);
 
-    contrastProcessor.drawFrame(inputTexId, /* presentationTimeUs = */ 0);
+    contrastProcessor.drawFrame(inputTexId, /* presentationTimeUs= */ 0);
     Bitmap actualBitmap =
         createArgb8888BitmapFromCurrentGlFramebuffer(outputSize.first, outputSize.second);
 
@@ -128,7 +128,7 @@ public void drawFrame_minimumContrast_producesAllGrayFrame() throws Exception {
             Color.rgb(
                 OPENGL_NEUTRAL_RGB_VALUE, OPENGL_NEUTRAL_RGB_VALUE, OPENGL_NEUTRAL_RGB_VALUE));
 
-    contrastProcessor.drawFrame(inputTexId, /* presentationTimeUs = */ 0);
+    contrastProcessor.drawFrame(inputTexId, /* presentationTimeUs= */ 0);
     Bitmap actualBitmap =
         createArgb8888BitmapFromCurrentGlFramebuffer(outputSize.first, outputSize.second);
 
@@ -187,7 +187,7 @@ public void drawFrame_maximumContrast_pixelEither0or255() throws Exception {
     setupOutputTexture(outputSize.first, outputSize.second);
     Bitmap expectedBitmap = readBitmap(MAXIMUM_CONTRAST_PNG_ASSET_PATH);
 
-    contrastProcessor.drawFrame(inputTexId, /* presentationTimeUs = */ 0);
+    contrastProcessor.drawFrame(inputTexId, /* presentationTimeUs= */ 0);
     Bitmap actualBitmap =
         createArgb8888BitmapFromCurrentGlFramebuffer(outputSize.first, outputSize.second);
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -654,7 +654,7 @@ private void onEmsgLeafAtomRead(ParsableByteArray atom) {
     }
 
     byte[] messageData = new byte[atom.bytesLeft()];
-    atom.readBytes(messageData, /*offset=*/ 0, atom.bytesLeft());
+    atom.readBytes(messageData, /* offset= */ 0, atom.bytesLeft());
     EventMessage eventMessage = new EventMessage(schemeIdUri, value, durationMs, id, messageData);
     ParsableByteArray encodedEventMessage =
         new ParsableByteArray(eventMessageEncoder.encode(eventMessage));

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaPeriod.java
Patch:
@@ -687,7 +687,7 @@ private void buildAndPrepareMainSampleStreamWrapper(
       sampleStreamWrapper.prepareWithMultivariantPlaylistInfo(
           muxedTrackGroups.toArray(new TrackGroup[0]),
           /* primaryTrackGroupIndex= */ 0,
-          /* optionalTrackGroupsIndices...= */ muxedTrackGroups.indexOf(id3TrackGroup));
+          /* optionalTrackGroupsIndices= */ muxedTrackGroups.indexOf(id3TrackGroup));
     }
   }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeAdaptiveMediaPeriod.java
Patch:
@@ -107,7 +107,7 @@ public void prepare(Callback callback, long positionUs) {
         C.SELECTION_REASON_UNKNOWN,
         /* trackSelectionData= */ null,
         /* mediaStartTimeUs= */ 0,
-        /* mediaEndTimeUs = */ C.TIME_UNSET);
+        /* mediaEndTimeUs= */ C.TIME_UNSET);
     this.callback = callback;
     prepared = true;
     Util.castNonNull(this.callback).onPrepared(this);
@@ -126,7 +126,7 @@ public void prepare(Callback callback, long positionUs) {
         C.SELECTION_REASON_UNKNOWN,
         /* trackSelectionData= */ null,
         /* mediaStartTimeUs= */ 0,
-        /* mediaEndTimeUs = */ C.TIME_UNSET);
+        /* mediaEndTimeUs= */ C.TIME_UNSET);
   }
 
   @Override

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaPeriod.java
Patch:
@@ -232,7 +232,7 @@ public synchronized void prepare(Callback callback, long positionUs) {
         C.SELECTION_REASON_UNKNOWN,
         /* trackSelectionData= */ null,
         /* mediaStartTimeUs= */ 0,
-        /* mediaEndTimeUs = */ C.TIME_UNSET);
+        /* mediaEndTimeUs= */ C.TIME_UNSET);
     prepareCallback = callback;
     if (deferOnPrepared) {
       playerHandler = Util.createHandlerForCurrentLooper();
@@ -416,7 +416,7 @@ private void finishPreparation() {
         C.SELECTION_REASON_UNKNOWN,
         /* trackSelectionData= */ null,
         /* mediaStartTimeUs= */ 0,
-        /* mediaEndTimeUs = */ C.TIME_UNSET);
+        /* mediaEndTimeUs= */ C.TIME_UNSET);
   }
 
   private boolean isLoadingFinished() {

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSource.java
Patch:
@@ -387,7 +387,7 @@ private void finishSourcePreparation(boolean sendManifestLoadEvents) {
               C.SELECTION_REASON_UNKNOWN,
               /* trackSelectionData= */ null,
               /* mediaStartTimeMs= */ C.TIME_UNSET,
-              /* mediaEndTimeMs = */ C.TIME_UNSET);
+              /* mediaEndTimeMs= */ C.TIME_UNSET);
       long elapsedRealTimeMs = SystemClock.elapsedRealtime();
       MediaSourceEventListener.EventDispatcher eventDispatcher =
           createEventDispatcher(/* mediaPeriodId= */ null);

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackSelector.java
Patch:
@@ -67,7 +67,7 @@ private FakeTrackSelector(FakeTrackSelectionFactory fakeTrackSelectionFactory) {
       boolean hasTracks = trackGroupArray.length > 0;
       definitions[i] =
           hasTracks
-              ? new ExoTrackSelection.Definition(trackGroupArray.get(0), /* tracks...= */ 0)
+              ? new ExoTrackSelection.Definition(trackGroupArray.get(0), /* tracks= */ 0)
               : null;
     }
     return definitions;

File: testutils/src/test/java/com/google/android/exoplayer2/testutil/FakeTimelineTest.java
Patch:
@@ -39,7 +39,7 @@ public void createMultiPeriodAdTimeline_firstPeriodIsAd() {
         FakeTimeline.createMultiPeriodAdTimeline(
             windowId,
             numberOfPlayedAds,
-            /* isAdPeriodFlags...= */ true,
+            /* isAdPeriodFlags= */ true,
             false,
             true,
             true,
@@ -94,7 +94,7 @@ public void createMultiPeriodAdTimeline_firstPeriodIsContent_correctWindowDurati
         FakeTimeline.createMultiPeriodAdTimeline(
             /* windowId= */ new Object(),
             /* numberOfPlayedAds= */ 0,
-            /* isAdPeriodFlags...= */ false,
+            /* isAdPeriodFlags= */ false,
             true,
             true,
             false);

File: libraries/cast/src/test/java/androidx/media3/cast/CastTimelineTrackerTest.java
Patch:
@@ -311,7 +311,7 @@ private static MediaQueue mockMediaQueue(int[] itemIds) {
   }
 
   private static MediaInfo getMediaInfo(long durationMs) {
-    return new MediaInfo.Builder(/*contentId= */ "")
+    return new MediaInfo.Builder(/* contentId= */ "")
         .setStreamDuration(durationMs)
         .setContentType(MimeTypes.APPLICATION_MP4)
         .setStreamType(MediaInfo.STREAM_TYPE_NONE)

File: libraries/common/src/main/java/androidx/media3/common/util/GlProgram.java
Patch:
@@ -328,7 +328,7 @@ public static Uniform create(int programId, int index) {
           /* unusedLength */ new int[1],
           /* lengthOffset= */ 0,
           /* unusedSize */ new int[1],
-          /*sizeOffset= */ 0,
+          /* sizeOffset= */ 0,
           type,
           /* typeOffset= */ 0,
           nameBytes,

File: libraries/common/src/test/java/androidx/media3/common/FlagSetTest.java
Patch:
@@ -80,7 +80,7 @@ public void contains_afterAddIf_returnsTrueForAddedValues() {
   public void containsAny_withoutAdd_returnsFalseForAllValues() {
     FlagSet flags = new FlagSet.Builder().build();
 
-    assertThat(flags.containsAny(/* flags...= */ -1234, 0, 2, Integer.MAX_VALUE)).isFalse();
+    assertThat(flags.containsAny(/* flags= */ -1234, 0, 2, Integer.MAX_VALUE)).isFalse();
   }
 
   @Test
@@ -95,9 +95,9 @@ public void containsAny_afterAdd_returnsTrueForAddedValues() {
 
     assertThat(
             flags.containsAny(
-                /* flags...= */ -1235, -1234, 0, 1, 2, Integer.MAX_VALUE - 1, Integer.MAX_VALUE))
+                /* flags= */ -1235, -1234, 0, 1, 2, Integer.MAX_VALUE - 1, Integer.MAX_VALUE))
         .isTrue();
-    assertThat(flags.containsAny(/* flags...= */ -1235, 1, Integer.MAX_VALUE - 1)).isFalse();
+    assertThat(flags.containsAny(/* flags= */ -1235, 1, Integer.MAX_VALUE - 1)).isFalse();
   }
 
   @Test

File: libraries/common/src/test/java/androidx/media3/common/TrackSelectionParametersTest.java
Patch:
@@ -181,9 +181,9 @@ public void clearViewPortConstraints_withConstrains_clearConstrains() {
     TrackSelectionParameters parameters =
         new TrackSelectionParameters.Builder(getApplicationContext())
             .setViewportSize(
-                /*viewportWidth=*/ 1,
-                /*viewportHeight=*/ 2,
-                /*viewportOrientationMayChange=*/ false)
+                /* viewportWidth= */ 1,
+                /* viewportHeight= */ 2,
+                /* viewportOrientationMayChange= */ false)
             .clearViewportSizeConstraints()
             .build();
 

File: libraries/effect/src/androidTest/java/androidx/media3/effect/ContrastPixelTest.java
Patch:
@@ -104,7 +104,7 @@ public void drawFrame_noContrastChange_leavesFrameUnchanged() throws Exception {
     setupOutputTexture(outputSize.first, outputSize.second);
     Bitmap expectedBitmap = readBitmap(ORIGINAL_PNG_ASSET_PATH);
 
-    contrastProcessor.drawFrame(inputTexId, /* presentationTimeUs = */ 0);
+    contrastProcessor.drawFrame(inputTexId, /* presentationTimeUs= */ 0);
     Bitmap actualBitmap =
         createArgb8888BitmapFromCurrentGlFramebuffer(outputSize.first, outputSize.second);
 
@@ -128,7 +128,7 @@ public void drawFrame_minimumContrast_producesAllGrayFrame() throws Exception {
             Color.rgb(
                 OPENGL_NEUTRAL_RGB_VALUE, OPENGL_NEUTRAL_RGB_VALUE, OPENGL_NEUTRAL_RGB_VALUE));
 
-    contrastProcessor.drawFrame(inputTexId, /* presentationTimeUs = */ 0);
+    contrastProcessor.drawFrame(inputTexId, /* presentationTimeUs= */ 0);
     Bitmap actualBitmap =
         createArgb8888BitmapFromCurrentGlFramebuffer(outputSize.first, outputSize.second);
 
@@ -187,7 +187,7 @@ public void drawFrame_maximumContrast_pixelEither0or255() throws Exception {
     setupOutputTexture(outputSize.first, outputSize.second);
     Bitmap expectedBitmap = readBitmap(MAXIMUM_CONTRAST_PNG_ASSET_PATH);
 
-    contrastProcessor.drawFrame(inputTexId, /* presentationTimeUs = */ 0);
+    contrastProcessor.drawFrame(inputTexId, /* presentationTimeUs= */ 0);
     Bitmap actualBitmap =
         createArgb8888BitmapFromCurrentGlFramebuffer(outputSize.first, outputSize.second);
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MaskingMediaSource.java
Patch:
@@ -376,7 +376,7 @@ public Period getPeriod(int periodIndex, Period period, boolean setIds) {
           /* id= */ setIds ? 0 : null,
           /* uid= */ setIds ? MaskingTimeline.MASKING_EXTERNAL_PERIOD_UID : null,
           /* windowIndex= */ 0,
-          /* durationUs = */ C.TIME_UNSET,
+          /* durationUs= */ C.TIME_UNSET,
           /* positionInWindowUs= */ 0,
           /* adPlaybackState= */ AdPlaybackState.NONE,
           /* isPlaceholder= */ true);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/ExoplayerCuesDecoder.java
Patch:
@@ -120,7 +120,7 @@ public SubtitleOutputBuffer dequeueOutputBuffer() throws SubtitleDecoderExceptio
       SingleEventSubtitle subtitle =
           new SingleEventSubtitle(
               inputBuffer.timeUs, cueDecoder.decode(checkNotNull(inputBuffer.data).array()));
-      outputBuffer.setContent(inputBuffer.timeUs, subtitle, /* subsampleOffsetUs=*/ 0);
+      outputBuffer.setContent(inputBuffer.timeUs, subtitle, /* subsampleOffsetUs= */ 0);
     }
     inputBuffer.clear();
     inputBufferState = INPUT_BUFFER_AVAILABLE;

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/MediaSourceListTest.java
Patch:
@@ -451,7 +451,7 @@ public void clearMediaSourceList_expectSourcesReleasedAndRemoved() {
   @Test
   public void setMediaSources_expectTimelineUsesCustomShuffleOrder() {
     Timeline timeline =
-        mediaSourceList.setMediaSources(createFakeHolders(), new FakeShuffleOrder(/* length=*/ 4));
+        mediaSourceList.setMediaSources(createFakeHolders(), new FakeShuffleOrder(/* length= */ 4));
     assertTimelineUsesFakeShuffleOrder(timeline);
   }
 

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/analytics/DefaultAnalyticsCollectorTest.java
Patch:
@@ -1027,7 +1027,7 @@ public void adPlayback() throws Exception {
         new AtomicReference<>(
             FakeTimeline.createAdPlaybackState(
                 /* adsPerAdGroup= */ 1,
-                /* adGroupTimesUs...= */ windowOffsetInFirstPeriodUs,
+                /* adGroupTimesUs= */ windowOffsetInFirstPeriodUs,
                 windowOffsetInFirstPeriodUs + 5 * C.MICROS_PER_SECOND,
                 C.TIME_END_OF_SOURCE));
     AtomicInteger playedAdCount = new AtomicInteger(0);
@@ -1300,7 +1300,7 @@ public void seekAfterMidroll() throws Exception {
                 /* isDynamic= */ false,
                 10 * C.MICROS_PER_SECOND,
                 FakeTimeline.createAdPlaybackState(
-                    /* adsPerAdGroup= */ 1, /* adGroupTimesUs...= */
+                    /* adsPerAdGroup= */ 1, /* adGroupTimesUs= */
                     windowOffsetInFirstPeriodUs + 5 * C.MICROS_PER_SECOND)));
     FakeMediaSource fakeMediaSource =
         new FakeMediaSource(

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/analytics/DefaultPlaybackSessionManagerTest.java
Patch:
@@ -1285,7 +1285,7 @@ public void finishAllSessions_callsOnSessionFinishedForAllCreatedSessions() {
   private static EventTime createEventTime(
       Timeline timeline, int windowIndex, @Nullable MediaPeriodId mediaPeriodId) {
     return new EventTime(
-        /* realtimeMs = */ 0,
+        /* realtimeMs= */ 0,
         timeline,
         windowIndex,
         mediaPeriodId,
@@ -1303,7 +1303,7 @@ private static EventTime createEventTime(
       @Nullable MediaPeriodId eventMediaPeriodId,
       @Nullable MediaPeriodId currentMediaPeriodId) {
     return new EventTime(
-        /* realtimeMs = */ 0,
+        /* realtimeMs= */ 0,
         timeline,
         windowIndex,
         eventMediaPeriodId,

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/audio/SilenceSkippingAudioProcessorTest.java
Patch:
@@ -289,11 +289,10 @@ private static InputBufferProvider getInputBufferProviderForAlternatingSilenceAn
     Pcm16BitAudioBuilder audioBuilder = new Pcm16BitAudioBuilder(channelCount, totalFrameCount);
     while (!audioBuilder.isFull()) {
       int silenceDurationFrames = (silenceDurationMs * sampleRate) / 1000;
-      audioBuilder.appendFrames(
-          /* count= */ silenceDurationFrames, /* channelLevels...= */ (short) 0);
+      audioBuilder.appendFrames(/* count= */ silenceDurationFrames, /* channelLevels= */ (short) 0);
       int noiseDurationFrames = (noiseDurationMs * sampleRate) / 1000;
       audioBuilder.appendFrames(
-          /* count= */ noiseDurationFrames, /* channelLevels...= */ Short.MAX_VALUE);
+          /* count= */ noiseDurationFrames, /* channelLevels= */ Short.MAX_VALUE);
     }
     return new InputBufferProvider(audioBuilder.build());
   }

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/source/ConcatenatingMediaSourceTest.java
Patch:
@@ -363,7 +363,7 @@ public void dynamicChangeOfEmptyTimelines() throws IOException {
           new FakeMediaSource(Timeline.EMPTY),
           new FakeMediaSource(Timeline.EMPTY),
         };
-    Timeline nonEmptyTimeline = new FakeTimeline(/* windowCount = */ 1);
+    Timeline nonEmptyTimeline = new FakeTimeline(/* windowCount= */ 1);
 
     mediaSource.addMediaSources(Arrays.asList(childSources));
     Timeline timeline = testRunner.prepareSource();

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/source/ads/AdsMediaSourceTest.java
Patch:
@@ -79,7 +79,7 @@ public final class AdsMediaSourceTest {
       CONTENT_TIMELINE.getUidOfPeriod(/* periodIndex= */ 0);
 
   private static final AdPlaybackState AD_PLAYBACK_STATE =
-      new AdPlaybackState(/* adsId= */ new Object(), /* adGroupTimesUs...= */ 0)
+      new AdPlaybackState(/* adsId= */ new Object(), /* adGroupTimesUs= */ 0)
           .withContentDurationUs(CONTENT_DURATION_US)
           .withAdCount(/* adGroupIndex= */ 0, /* adCount= */ 1)
           .withAvailableAdUri(

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsMediaPeriod.java
Patch:
@@ -689,7 +689,7 @@ private void buildAndPrepareMainSampleStreamWrapper(
       sampleStreamWrapper.prepareWithMultivariantPlaylistInfo(
           muxedTrackGroups.toArray(new TrackGroup[0]),
           /* primaryTrackGroupIndex= */ 0,
-          /* optionalTrackGroupsIndices...= */ muxedTrackGroups.indexOf(id3TrackGroup));
+          /* optionalTrackGroupsIndices= */ muxedTrackGroups.indexOf(id3TrackGroup));
     }
   }
 

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -682,7 +682,7 @@ private static AdPlaybackState setVodAdGroupPlaceholders(
               adPlaybackState,
               /* fromPositionUs= */ fromPositionUs,
               /* contentResumeOffsetUs= */ 0,
-              /* adDurationsUs...= */ getAdDuration(
+              /* adDurationsUs= */ getAdDuration(
                   /* startTimeSeconds= */ cuePoint.getStartTime(),
                   /* endTimeSeconds= */ cuePoint.getEndTime()));
     }

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaUtil.java
Patch:
@@ -443,7 +443,7 @@ public static ImmutableMap<Object, AdPlaybackState> splitAdPlaybackStateForPerio
   private static AdPlaybackState splitAdGroupForPeriod(
       Object adsId, AdGroup adGroup, long periodStartUs, long periodDurationUs) {
     AdPlaybackState adPlaybackState =
-        new AdPlaybackState(checkNotNull(adsId), /* adGroupTimesUs...= */ 0)
+        new AdPlaybackState(checkNotNull(adsId), /* adGroupTimesUs= */ 0)
             .withAdCount(/* adGroupIndex= */ 0, /* adCount= */ 1)
             .withAdDurationsUs(/* adGroupIndex= */ 0, periodDurationUs)
             .withIsServerSideInserted(/* adGroupIndex= */ 0, true)
@@ -605,7 +605,7 @@ public static AdPlaybackState addLiveAdBreak(
               adPlaybackState,
               /* fromPositionUs= */ currentContentPeriodPositionUs,
               /* contentResumeOffsetUs= */ sum(adDurationsUs),
-              /* adDurationsUs...= */ adDurationsUs);
+              /* adDurationsUs= */ adDurationsUs);
       adGroupIndex =
           adPlaybackState.getAdGroupIndexForPositionUs(
               mediaPeriodPositionUs, /* periodDurationUs= */ C.TIME_UNSET);

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -656,7 +656,7 @@ private void onEmsgLeafAtomRead(ParsableByteArray atom) {
     }
 
     byte[] messageData = new byte[atom.bytesLeft()];
-    atom.readBytes(messageData, /*offset=*/ 0, atom.bytesLeft());
+    atom.readBytes(messageData, /* offset= */ 0, atom.bytesLeft());
     EventMessage eventMessage = new EventMessage(schemeIdUri, value, durationMs, id, messageData);
     ParsableByteArray encodedEventMessage =
         new ParsableByteArray(eventMessageEncoder.encode(eventMessage));

File: libraries/session/src/main/java/androidx/media3/session/PlayerInfo.java
Patch:
@@ -376,7 +376,7 @@ public PlayerInfo build() {
           DeviceInfo.UNKNOWN,
           /* deviceVolume= */ 0,
           /* deviceMuted= */ false,
-          /* playWhenReady = */ false,
+          /* playWhenReady= */ false,
           PLAY_WHEN_READY_CHANGE_REASON_USER_REQUEST,
           PLAYBACK_SUPPRESSION_REASON_NONE,
           STATE_IDLE,

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeAdaptiveMediaPeriod.java
Patch:
@@ -109,7 +109,7 @@ public void prepare(Callback callback, long positionUs) {
         C.SELECTION_REASON_UNKNOWN,
         /* trackSelectionData= */ null,
         /* mediaStartTimeUs= */ 0,
-        /* mediaEndTimeUs = */ C.TIME_UNSET);
+        /* mediaEndTimeUs= */ C.TIME_UNSET);
     this.callback = callback;
     prepared = true;
     Util.castNonNull(this.callback).onPrepared(this);
@@ -128,7 +128,7 @@ public void prepare(Callback callback, long positionUs) {
         C.SELECTION_REASON_UNKNOWN,
         /* trackSelectionData= */ null,
         /* mediaStartTimeUs= */ 0,
-        /* mediaEndTimeUs = */ C.TIME_UNSET);
+        /* mediaEndTimeUs= */ C.TIME_UNSET);
   }
 
   @Override

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeMediaPeriod.java
Patch:
@@ -234,7 +234,7 @@ public synchronized void prepare(Callback callback, long positionUs) {
         C.SELECTION_REASON_UNKNOWN,
         /* trackSelectionData= */ null,
         /* mediaStartTimeUs= */ 0,
-        /* mediaEndTimeUs = */ C.TIME_UNSET);
+        /* mediaEndTimeUs= */ C.TIME_UNSET);
     prepareCallback = callback;
     if (deferOnPrepared) {
       playerHandler = Util.createHandlerForCurrentLooper();
@@ -418,7 +418,7 @@ private void finishPreparation() {
         C.SELECTION_REASON_UNKNOWN,
         /* trackSelectionData= */ null,
         /* mediaStartTimeUs= */ 0,
-        /* mediaEndTimeUs = */ C.TIME_UNSET);
+        /* mediaEndTimeUs= */ C.TIME_UNSET);
   }
 
   private boolean isLoadingFinished() {

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeMediaSource.java
Patch:
@@ -389,7 +389,7 @@ private void finishSourcePreparation(boolean sendManifestLoadEvents) {
               C.SELECTION_REASON_UNKNOWN,
               /* trackSelectionData= */ null,
               /* mediaStartTimeMs= */ C.TIME_UNSET,
-              /* mediaEndTimeMs = */ C.TIME_UNSET);
+              /* mediaEndTimeMs= */ C.TIME_UNSET);
       long elapsedRealTimeMs = SystemClock.elapsedRealtime();
       MediaSourceEventListener.EventDispatcher eventDispatcher =
           createEventDispatcher(/* mediaPeriodId= */ null);

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeTrackSelector.java
Patch:
@@ -69,7 +69,7 @@ private FakeTrackSelector(FakeTrackSelectionFactory fakeTrackSelectionFactory) {
       boolean hasTracks = trackGroupArray.length > 0;
       definitions[i] =
           hasTracks
-              ? new ExoTrackSelection.Definition(trackGroupArray.get(0), /* tracks...= */ 0)
+              ? new ExoTrackSelection.Definition(trackGroupArray.get(0), /* tracks= */ 0)
               : null;
     }
     return definitions;

File: libraries/test_utils/src/test/java/androidx/media3/test/utils/FakeTimelineTest.java
Patch:
@@ -39,7 +39,7 @@ public void createMultiPeriodAdTimeline_firstPeriodIsAd() {
         FakeTimeline.createMultiPeriodAdTimeline(
             windowId,
             numberOfPlayedAds,
-            /* isAdPeriodFlags...= */ true,
+            /* isAdPeriodFlags= */ true,
             false,
             true,
             true,
@@ -94,7 +94,7 @@ public void createMultiPeriodAdTimeline_firstPeriodIsContent_correctWindowDurati
         FakeTimeline.createMultiPeriodAdTimeline(
             /* windowId= */ new Object(),
             /* numberOfPlayedAds= */ 0,
-            /* isAdPeriodFlags...= */ false,
+            /* isAdPeriodFlags= */ false,
             true,
             true,
             false);

File: libraries/ui_leanback/src/main/java/androidx/media3/ui/leanback/LeanbackPlayerAdapter.java
Patch:
@@ -266,7 +266,7 @@ public void onPlayerError(PlaybackException error) {
             // int arguments (int what, int extra). Since PlaybackException defines a single error
             // code, we pass 0 as the extra.
             context.getString(
-                R.string.lb_media_player_error, /* formatArgs...= */ error.errorCode, 0));
+                R.string.lb_media_player_error, /* formatArgs= */ error.errorCode, 0));
       }
     }
 

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -274,8 +274,6 @@ private Transformer createTransformer(@Nullable Bundle bundle, String filePath)
           bundle.getBoolean(ConfigurationActivity.ENABLE_REQUEST_SDR_TONE_MAPPING));
       requestBuilder.experimental_setForceInterpretHdrVideoAsSdr(
           bundle.getBoolean(ConfigurationActivity.FORCE_INTERPRET_HDR_VIDEO_AS_SDR));
-      requestBuilder.experimental_setEnableHdrEditing(
-          bundle.getBoolean(ConfigurationActivity.ENABLE_HDR_EDITING));
       transformerBuilder
           .setTransformationRequest(requestBuilder.build())
           .setRemoveAudio(bundle.getBoolean(ConfigurationActivity.SHOULD_REMOVE_AUDIO))

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -303,9 +303,7 @@ private static TransformationRequest createSupportedTransformationRequest(
     TransformationRequest.Builder transformationRequestBuilder = transformationRequest.buildUpon();
     if (transformationRequest.enableRequestSdrToneMapping != isToneMappedToSdr) {
       checkState(isToneMappedToSdr);
-      transformationRequestBuilder
-          .setEnableRequestSdrToneMapping(true)
-          .experimental_setEnableHdrEditing(false);
+      transformationRequestBuilder.setEnableRequestSdrToneMapping(true);
     }
     return transformationRequestBuilder
         .setVideoMimeType(supportedFormat.sampleMimeType)

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/RendererCapabilities.java
Patch:
@@ -144,13 +144,13 @@ public interface RendererCapabilities {
   /** A mask to apply to {@link Capabilities} to obtain {@link DecoderSupport} only. */
   int MODE_SUPPORT_MASK = 0b11 << 7;
   /**
-   * The renderer will use a decoder for fallback mimetype if possible as format's MIME type is
-   * unsupported
+   * The format's MIME type is unsupported and the renderer may use a decoder for a fallback MIME
+   * type.
    */
   int DECODER_SUPPORT_FALLBACK_MIMETYPE = 0b10 << 7;
   /** The renderer is able to use the primary decoder for the format's MIME type. */
   int DECODER_SUPPORT_PRIMARY = 0b1 << 7;
-  /** The renderer will use a fallback decoder. */
+  /** The format exceeds the primary decoder's capabilities but is supported by fallback decoder */
   int DECODER_SUPPORT_FALLBACK = 0;
 
   /**

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -274,8 +274,6 @@ private Transformer createTransformer(@Nullable Bundle bundle, String filePath)
           bundle.getBoolean(ConfigurationActivity.ENABLE_REQUEST_SDR_TONE_MAPPING));
       requestBuilder.experimental_setForceInterpretHdrVideoAsSdr(
           bundle.getBoolean(ConfigurationActivity.FORCE_INTERPRET_HDR_VIDEO_AS_SDR));
-      requestBuilder.experimental_setEnableHdrEditing(
-          bundle.getBoolean(ConfigurationActivity.ENABLE_HDR_EDITING));
       transformerBuilder
           .setTransformationRequest(requestBuilder.build())
           .setRemoveAudio(bundle.getBoolean(ConfigurationActivity.SHOULD_REMOVE_AUDIO))

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -303,9 +303,7 @@ private static TransformationRequest createSupportedTransformationRequest(
     TransformationRequest.Builder transformationRequestBuilder = transformationRequest.buildUpon();
     if (transformationRequest.enableRequestSdrToneMapping != isToneMappedToSdr) {
       checkState(isToneMappedToSdr);
-      transformationRequestBuilder
-          .setEnableRequestSdrToneMapping(true)
-          .experimental_setEnableHdrEditing(false);
+      transformationRequestBuilder.setEnableRequestSdrToneMapping(true);
     }
     return transformationRequestBuilder
         .setVideoMimeType(supportedFormat.sampleMimeType)

File: library/core/src/main/java/com/google/android/exoplayer2/RendererCapabilities.java
Patch:
@@ -140,13 +140,13 @@ public interface RendererCapabilities {
   /** A mask to apply to {@link Capabilities} to obtain {@link DecoderSupport} only. */
   int MODE_SUPPORT_MASK = 0b11 << 7;
   /**
-   * The renderer will use a decoder for fallback mimetype if possible as format's MIME type is
-   * unsupported
+   * The format's MIME type is unsupported and the renderer may use a decoder for a fallback MIME
+   * type.
    */
   int DECODER_SUPPORT_FALLBACK_MIMETYPE = 0b10 << 7;
   /** The renderer is able to use the primary decoder for the format's MIME type. */
   int DECODER_SUPPORT_PRIMARY = 0b1 << 7;
-  /** The renderer will use a fallback decoder. */
+  /** The format exceeds the primary decoder's capabilities but is supported by fallback decoder */
   int DECODER_SUPPORT_FALLBACK = 0;
 
   /**

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/AudioTranscodingSamplePipeline.java
Patch:
@@ -55,8 +55,8 @@
 
   public AudioTranscodingSamplePipeline(
       Format inputFormat,
-      long streamOffsetUs,
       long streamStartPositionUs,
+      long streamOffsetUs,
       TransformationRequest transformationRequest,
       Codec.DecoderFactory decoderFactory,
       Codec.EncoderFactory encoderFactory,
@@ -65,8 +65,8 @@ public AudioTranscodingSamplePipeline(
       throws TransformationException {
     super(
         inputFormat,
-        streamOffsetUs,
         streamStartPositionUs,
+        streamOffsetUs,
         transformationRequest.flattenForSlowMotion,
         muxerWrapper);
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/BaseSamplePipeline.java
Patch:
@@ -30,8 +30,8 @@
 
 /* package */ abstract class BaseSamplePipeline implements SamplePipeline {
 
-  private final long streamOffsetUs;
   private final long streamStartPositionUs;
+  private final long streamOffsetUs;
   private final MuxerWrapper muxerWrapper;
   private final @C.TrackType int trackType;
   private final @MonotonicNonNull SefSlowMotionFlattener sefVideoSlowMotionFlattener;
@@ -42,12 +42,12 @@
 
   public BaseSamplePipeline(
       Format inputFormat,
-      long streamOffsetUs,
       long streamStartPositionUs,
+      long streamOffsetUs,
       boolean flattenForSlowMotion,
       MuxerWrapper muxerWrapper) {
-    this.streamOffsetUs = streamOffsetUs;
     this.streamStartPositionUs = streamStartPositionUs;
+    this.streamOffsetUs = streamOffsetUs;
     this.muxerWrapper = muxerWrapper;
     trackType = MimeTypes.getTrackType(inputFormat.sampleMimeType);
     sefVideoSlowMotionFlattener =

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExoPlayerAssetLoaderRenderer.java
Patch:
@@ -44,8 +44,8 @@
   private final DecoderInputBuffer decoderInputBuffer;
 
   private boolean isTransformationRunning;
-  private long streamOffsetUs;
   private long streamStartPositionUs;
+  private long streamOffsetUs;
   private @MonotonicNonNull SamplePipeline samplePipeline;
 
   public ExoPlayerAssetLoaderRenderer(
@@ -110,8 +110,8 @@ public void render(long positionUs, long elapsedRealtimeUs) {
 
   @Override
   protected void onStreamChanged(Format[] formats, long startPositionUs, long offsetUs) {
-    this.streamOffsetUs = offsetUs;
     this.streamStartPositionUs = startPositionUs;
+    this.streamOffsetUs = offsetUs;
   }
 
   @Override

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/PassthroughSamplePipeline.java
Patch:
@@ -30,15 +30,15 @@
 
   public PassthroughSamplePipeline(
       Format format,
-      long streamOffsetUs,
       long streamStartPositionUs,
+      long streamOffsetUs,
       TransformationRequest transformationRequest,
       MuxerWrapper muxerWrapper,
       FallbackListener fallbackListener) {
     super(
         format,
-        streamOffsetUs,
         streamStartPositionUs,
+        streamOffsetUs,
         transformationRequest.flattenForSlowMotion,
         muxerWrapper);
     this.format = format;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerInternal.java
Patch:
@@ -160,7 +160,7 @@ private SamplePipeline getSamplePipeline(
       if (MimeTypes.isAudio(inputFormat.sampleMimeType) && shouldTranscodeAudio(inputFormat)) {
         return new AudioTranscodingSamplePipeline(
             inputFormat,
-            streamOffsetUs,
+            streamStartPositionUs,
             streamOffsetUs,
             transformationRequest,
             decoderFactory,
@@ -172,8 +172,8 @@ && shouldTranscodeVideo(inputFormat, streamStartPositionUs, streamOffsetUs)) {
         return new VideoTranscodingSamplePipeline(
             context,
             inputFormat,
-            streamOffsetUs,
             streamStartPositionUs,
+            streamOffsetUs,
             transformationRequest,
             videoEffects,
             frameProcessorFactory,
@@ -186,8 +186,8 @@ && shouldTranscodeVideo(inputFormat, streamStartPositionUs, streamOffsetUs)) {
       } else {
         return new PassthroughSamplePipeline(
             inputFormat,
-            streamOffsetUs,
             streamStartPositionUs,
+            streamOffsetUs,
             transformationRequest,
             muxerWrapper,
             fallbackListener);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -66,8 +66,8 @@
   public VideoTranscodingSamplePipeline(
       Context context,
       Format inputFormat,
-      long streamOffsetUs,
       long streamStartPositionUs,
+      long streamOffsetUs,
       TransformationRequest transformationRequest,
       ImmutableList<Effect> effects,
       FrameProcessor.Factory frameProcessorFactory,
@@ -80,8 +80,8 @@ public VideoTranscodingSamplePipeline(
       throws TransformationException {
     super(
         inputFormat,
-        streamOffsetUs,
         streamStartPositionUs,
+        streamOffsetUs,
         transformationRequest.flattenForSlowMotion,
         muxerWrapper);
 

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -152,7 +152,7 @@ public MediaSource.Factory setDrmSessionManagerProvider(
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return contentMediaSourceFactory.getSupportedTypes();
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactory.java
Patch:
@@ -395,7 +395,7 @@ public DefaultMediaSourceFactory setLoadErrorHandlingPolicy(
   }
 
   @Override
-  public int[] getSupportedTypes() {
+  public @C.ContentType int[] getSupportedTypes() {
     return delegateFactoryLoader.getSupportedTypes();
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaSource.java
Patch:
@@ -225,7 +225,7 @@ public ProgressiveMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_OTHER};
     }
   }

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
Patch:
@@ -311,7 +311,7 @@ public DashMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_DASH};
     }
   }

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaSource.java
Patch:
@@ -359,7 +359,7 @@ public HlsMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_HLS};
     }
   }

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMediaSource.java
Patch:
@@ -164,7 +164,7 @@ public Factory setLoadErrorHandlingPolicy(LoadErrorHandlingPolicy loadErrorHandl
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_RTSP};
     }
 

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/SsMediaSource.java
Patch:
@@ -290,7 +290,7 @@ public SsMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_SS};
     }
   }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSourceFactory.java
Patch:
@@ -47,7 +47,7 @@ public MediaSourceFactory setLoadErrorHandlingPolicy(
   }
 
   @Override
-  public int[] getSupportedTypes() {
+  public @C.ContentType int[] getSupportedTypes() {
     return new int[] {C.CONTENT_TYPE_OTHER};
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
Patch:
@@ -2385,7 +2385,7 @@ private void setParametersInternal(Parameters parameters) {
       selectTracks(
           MappedTrackInfo mappedTrackInfo,
           @Capabilities int[][][] rendererFormatSupports,
-          @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupports,
+          @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupport,
           MediaPeriodId mediaPeriodId,
           Timeline timeline)
           throws ExoPlaybackException {
@@ -2405,7 +2405,7 @@ private void setParametersInternal(Parameters parameters) {
         selectAllTracks(
             mappedTrackInfo,
             rendererFormatSupports,
-            rendererMixedMimeTypeAdaptationSupports,
+            rendererMixedMimeTypeAdaptationSupport,
             parameters);
 
     applyTrackSelectionOverrides(mappedTrackInfo, parameters, definitions);

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/MappingTrackSelector.java
Patch:
@@ -434,7 +434,7 @@ public final TrackSelectorResult selectTracks(
    * Given mapped track information, returns a track selection and configuration for each renderer.
    *
    * @param mappedTrackInfo Mapped track information.
-   * @param rendererFormatSupports The {@link Capabilities} for ach mapped track, indexed by
+   * @param rendererFormatSupports The {@link Capabilities} for each mapped track, indexed by
    *     renderer, track group and track (in that order).
    * @param rendererMixedMimeTypeAdaptationSupport The {@link AdaptiveSupport} for mixed MIME type
    *     adaptation for the renderer.

File: library/core/src/test/java/com/google/android/exoplayer2/trackselection/MappingTrackSelectorTest.java
Patch:
@@ -147,7 +147,7 @@ private static final class FakeMappingTrackSelector extends MappingTrackSelector
     protected Pair<RendererConfiguration[], ExoTrackSelection[]> selectTracks(
         MappedTrackInfo mappedTrackInfo,
         @Capabilities int[][][] rendererFormatSupports,
-        @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupports,
+        @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupport,
         MediaPeriodId mediaPeriodId,
         Timeline timeline) {
       int rendererCount = mappedTrackInfo.getRendererCount();

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeClock.java
Patch:
@@ -284,7 +284,7 @@ protected final class HandlerMessage
     private final int arg2;
     @Nullable private final Object obj;
 
-    public HandlerMessage(
+    private HandlerMessage(
         long timeMs,
         ClockHandler handler,
         int what,

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtpPayloadFormat.java
Patch:
@@ -56,7 +56,7 @@ public final class RtpPayloadFormat {
   public static final String RTP_MEDIA_VP9 = "VP9";
 
   /** Returns whether the format of a {@link MediaDescription} is supported. */
-  public static boolean isFormatSupported(MediaDescription mediaDescription) {
+  /* package */ static boolean isFormatSupported(MediaDescription mediaDescription) {
     switch (Ascii.toUpperCase(mediaDescription.rtpMapAttribute.mediaEncoding)) {
       case RTP_MEDIA_AC3:
       case RTP_MEDIA_AMR:

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -531,7 +531,7 @@ public void prepareSourceInternal(@Nullable TransferListener mediaTransferListen
 
   @Override
   protected void onChildSourceInfoRefreshed(
-      Void id, MediaSource mediaSource, Timeline newTimeline) {
+      Void childSourceId, MediaSource mediaSource, Timeline newTimeline) {
     refreshSourceInfo(
         new ForwardingTimeline(newTimeline) {
           @Override

File: library/core/src/main/java/com/google/android/exoplayer2/source/ClippingMediaSource.java
Patch:
@@ -226,11 +226,11 @@ protected void releaseSourceInternal() {
   }
 
   @Override
-  protected void onChildSourceInfoRefreshed(Timeline timeline) {
+  protected void onChildSourceInfoRefreshed(Timeline newTimeline) {
     if (clippingError != null) {
       return;
     }
-    refreshClippedTimeline(timeline);
+    refreshClippedTimeline(newTimeline);
   }
 
   private void refreshClippedTimeline(Timeline timeline) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/LoopingMediaSource.java
Patch:
@@ -108,11 +108,11 @@ public void releasePeriod(MediaPeriod mediaPeriod) {
   }
 
   @Override
-  protected void onChildSourceInfoRefreshed(Timeline timeline) {
+  protected void onChildSourceInfoRefreshed(Timeline newTimeline) {
     Timeline loopingTimeline =
         loopCount != Integer.MAX_VALUE
-            ? new LoopingTimeline(timeline, loopCount)
-            : new InfinitelyLoopingTimeline(timeline);
+            ? new LoopingTimeline(newTimeline, loopCount)
+            : new InfinitelyLoopingTimeline(newTimeline);
     refreshSourceInfo(loopingTimeline);
   }
 

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloader.java
Patch:
@@ -115,7 +115,7 @@ public SsDownloader(
 
   @Override
   protected List<Segment> getSegments(
-      DataSource dataSource, SsManifest manifest, boolean allowIncompleteList) {
+      DataSource dataSource, SsManifest manifest, boolean removing) {
     ArrayList<Segment> segments = new ArrayList<>();
     for (StreamElement streamElement : manifest.streamElements) {
       for (int i = 0; i < streamElement.formats.length; i++) {

File: libraries/transformer/src/main/java/androidx/media3/transformer/AudioTranscodingSamplePipeline.java
Patch:
@@ -55,8 +55,8 @@
 
   public AudioTranscodingSamplePipeline(
       Format inputFormat,
-      long streamOffsetUs,
       long streamStartPositionUs,
+      long streamOffsetUs,
       TransformationRequest transformationRequest,
       Codec.DecoderFactory decoderFactory,
       Codec.EncoderFactory encoderFactory,
@@ -65,8 +65,8 @@ public AudioTranscodingSamplePipeline(
       throws TransformationException {
     super(
         inputFormat,
-        streamOffsetUs,
         streamStartPositionUs,
+        streamOffsetUs,
         transformationRequest.flattenForSlowMotion,
         muxerWrapper);
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/BaseSamplePipeline.java
Patch:
@@ -30,8 +30,8 @@
 
 /* package */ abstract class BaseSamplePipeline implements SamplePipeline {
 
-  private final long streamOffsetUs;
   private final long streamStartPositionUs;
+  private final long streamOffsetUs;
   private final MuxerWrapper muxerWrapper;
   private final @C.TrackType int trackType;
   private final @MonotonicNonNull SefSlowMotionFlattener sefVideoSlowMotionFlattener;
@@ -42,12 +42,12 @@
 
   public BaseSamplePipeline(
       Format inputFormat,
-      long streamOffsetUs,
       long streamStartPositionUs,
+      long streamOffsetUs,
       boolean flattenForSlowMotion,
       MuxerWrapper muxerWrapper) {
-    this.streamOffsetUs = streamOffsetUs;
     this.streamStartPositionUs = streamStartPositionUs;
+    this.streamOffsetUs = streamOffsetUs;
     this.muxerWrapper = muxerWrapper;
     trackType = MimeTypes.getTrackType(inputFormat.sampleMimeType);
     sefVideoSlowMotionFlattener =

File: libraries/transformer/src/main/java/androidx/media3/transformer/ExoPlayerAssetLoaderRenderer.java
Patch:
@@ -44,8 +44,8 @@
   private final DecoderInputBuffer decoderInputBuffer;
 
   private boolean isTransformationRunning;
-  private long streamOffsetUs;
   private long streamStartPositionUs;
+  private long streamOffsetUs;
   private @MonotonicNonNull SamplePipeline samplePipeline;
 
   public ExoPlayerAssetLoaderRenderer(
@@ -110,8 +110,8 @@ public void render(long positionUs, long elapsedRealtimeUs) {
 
   @Override
   protected void onStreamChanged(Format[] formats, long startPositionUs, long offsetUs) {
-    this.streamOffsetUs = offsetUs;
     this.streamStartPositionUs = startPositionUs;
+    this.streamOffsetUs = offsetUs;
   }
 
   @Override

File: libraries/transformer/src/main/java/androidx/media3/transformer/PassthroughSamplePipeline.java
Patch:
@@ -30,15 +30,15 @@
 
   public PassthroughSamplePipeline(
       Format format,
-      long streamOffsetUs,
       long streamStartPositionUs,
+      long streamOffsetUs,
       TransformationRequest transformationRequest,
       MuxerWrapper muxerWrapper,
       FallbackListener fallbackListener) {
     super(
         format,
-        streamOffsetUs,
         streamStartPositionUs,
+        streamOffsetUs,
         transformationRequest.flattenForSlowMotion,
         muxerWrapper);
     this.format = format;

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerInternal.java
Patch:
@@ -160,7 +160,7 @@ private SamplePipeline getSamplePipeline(
       if (MimeTypes.isAudio(inputFormat.sampleMimeType) && shouldTranscodeAudio(inputFormat)) {
         return new AudioTranscodingSamplePipeline(
             inputFormat,
-            streamOffsetUs,
+            streamStartPositionUs,
             streamOffsetUs,
             transformationRequest,
             decoderFactory,
@@ -172,8 +172,8 @@ && shouldTranscodeVideo(inputFormat, streamStartPositionUs, streamOffsetUs)) {
         return new VideoTranscodingSamplePipeline(
             context,
             inputFormat,
-            streamOffsetUs,
             streamStartPositionUs,
+            streamOffsetUs,
             transformationRequest,
             videoEffects,
             frameProcessorFactory,
@@ -186,8 +186,8 @@ && shouldTranscodeVideo(inputFormat, streamStartPositionUs, streamOffsetUs)) {
       } else {
         return new PassthroughSamplePipeline(
             inputFormat,
-            streamOffsetUs,
             streamStartPositionUs,
+            streamOffsetUs,
             transformationRequest,
             muxerWrapper,
             fallbackListener);

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -66,8 +66,8 @@
   public VideoTranscodingSamplePipeline(
       Context context,
       Format inputFormat,
-      long streamOffsetUs,
       long streamStartPositionUs,
+      long streamOffsetUs,
       TransformationRequest transformationRequest,
       ImmutableList<Effect> effects,
       FrameProcessor.Factory frameProcessorFactory,
@@ -80,8 +80,8 @@ public VideoTranscodingSamplePipeline(
       throws TransformationException {
     super(
         inputFormat,
-        streamOffsetUs,
         streamStartPositionUs,
+        streamOffsetUs,
         transformationRequest.flattenForSlowMotion,
         muxerWrapper);
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/DefaultMediaSourceFactory.java
Patch:
@@ -412,7 +412,7 @@ public DefaultMediaSourceFactory setLoadErrorHandlingPolicy(
 
   @UnstableApi
   @Override
-  public int[] getSupportedTypes() {
+  public @C.ContentType int[] getSupportedTypes() {
     return delegateFactoryLoader.getSupportedTypes();
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ProgressiveMediaSource.java
Patch:
@@ -227,7 +227,7 @@ public ProgressiveMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_OTHER};
     }
   }

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/DashMediaSource.java
Patch:
@@ -313,7 +313,7 @@ public DashMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_DASH};
     }
   }

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsMediaSource.java
Patch:
@@ -361,7 +361,7 @@ public HlsMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_HLS};
     }
   }

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -154,7 +154,7 @@ public MediaSource.Factory setDrmSessionManagerProvider(
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return contentMediaSourceFactory.getSupportedTypes();
     }
 

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaSource.java
Patch:
@@ -166,7 +166,7 @@ public Factory setLoadErrorHandlingPolicy(LoadErrorHandlingPolicy loadErrorHandl
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_RTSP};
     }
 

File: libraries/exoplayer_smoothstreaming/src/main/java/androidx/media3/exoplayer/smoothstreaming/SsMediaSource.java
Patch:
@@ -292,7 +292,7 @@ public SsMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_SS};
     }
   }

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeMediaSourceFactory.java
Patch:
@@ -49,7 +49,7 @@ public MediaSourceFactory setLoadErrorHandlingPolicy(
   }
 
   @Override
-  public int[] getSupportedTypes() {
+  public @C.ContentType int[] getSupportedTypes() {
     return new int[] {C.CONTENT_TYPE_OTHER};
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/DefaultTrackSelector.java
Patch:
@@ -2392,7 +2392,7 @@ private void setParametersInternal(Parameters parameters) {
       selectTracks(
           MappedTrackInfo mappedTrackInfo,
           @Capabilities int[][][] rendererFormatSupports,
-          @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupports,
+          @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupport,
           MediaPeriodId mediaPeriodId,
           Timeline timeline)
           throws ExoPlaybackException {
@@ -2412,7 +2412,7 @@ private void setParametersInternal(Parameters parameters) {
         selectAllTracks(
             mappedTrackInfo,
             rendererFormatSupports,
-            rendererMixedMimeTypeAdaptationSupports,
+            rendererMixedMimeTypeAdaptationSupport,
             parameters);
 
     applyTrackSelectionOverrides(mappedTrackInfo, parameters, definitions);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/MappingTrackSelector.java
Patch:
@@ -436,7 +436,7 @@ public final TrackSelectorResult selectTracks(
    * Given mapped track information, returns a track selection and configuration for each renderer.
    *
    * @param mappedTrackInfo Mapped track information.
-   * @param rendererFormatSupports The {@link Capabilities} for ach mapped track, indexed by
+   * @param rendererFormatSupports The {@link Capabilities} for each mapped track, indexed by
    *     renderer, track group and track (in that order).
    * @param rendererMixedMimeTypeAdaptationSupport The {@link AdaptiveSupport} for mixed MIME type
    *     adaptation for the renderer.

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/trackselection/MappingTrackSelectorTest.java
Patch:
@@ -147,7 +147,7 @@ private static final class FakeMappingTrackSelector extends MappingTrackSelector
     protected Pair<RendererConfiguration[], ExoTrackSelection[]> selectTracks(
         MappedTrackInfo mappedTrackInfo,
         @Capabilities int[][][] rendererFormatSupports,
-        @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupports,
+        @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupport,
         MediaPeriodId mediaPeriodId,
         Timeline timeline) {
       int rendererCount = mappedTrackInfo.getRendererCount();

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeClock.java
Patch:
@@ -286,7 +286,7 @@ protected final class HandlerMessage
     private final int arg2;
     @Nullable private final Object obj;
 
-    public HandlerMessage(
+    private HandlerMessage(
         long timeMs,
         ClockHandler handler,
         int what,

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtpPayloadFormat.java
Patch:
@@ -58,7 +58,7 @@ public final class RtpPayloadFormat {
   public static final String RTP_MEDIA_VP9 = "VP9";
 
   /** Returns whether the format of a {@link MediaDescription} is supported. */
-  public static boolean isFormatSupported(MediaDescription mediaDescription) {
+  /* package */ static boolean isFormatSupported(MediaDescription mediaDescription) {
     switch (Ascii.toUpperCase(mediaDescription.rtpMapAttribute.mediaEncoding)) {
       case RTP_MEDIA_AC3:
       case RTP_MEDIA_AMR:

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ClippingMediaSource.java
Patch:
@@ -228,11 +228,11 @@ protected void releaseSourceInternal() {
   }
 
   @Override
-  protected void onChildSourceInfoRefreshed(Timeline timeline) {
+  protected void onChildSourceInfoRefreshed(Timeline newTimeline) {
     if (clippingError != null) {
       return;
     }
-    refreshClippedTimeline(timeline);
+    refreshClippedTimeline(newTimeline);
   }
 
   private void refreshClippedTimeline(Timeline timeline) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/LoopingMediaSource.java
Patch:
@@ -110,11 +110,11 @@ public void releasePeriod(MediaPeriod mediaPeriod) {
   }
 
   @Override
-  protected void onChildSourceInfoRefreshed(Timeline timeline) {
+  protected void onChildSourceInfoRefreshed(Timeline newTimeline) {
     Timeline loopingTimeline =
         loopCount != Integer.MAX_VALUE
-            ? new LoopingTimeline(timeline, loopCount)
-            : new InfinitelyLoopingTimeline(timeline);
+            ? new LoopingTimeline(newTimeline, loopCount)
+            : new InfinitelyLoopingTimeline(newTimeline);
     refreshSourceInfo(loopingTimeline);
   }
 

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -533,7 +533,7 @@ public void prepareSourceInternal(@Nullable TransferListener mediaTransferListen
 
   @Override
   protected void onChildSourceInfoRefreshed(
-      Void id, MediaSource mediaSource, Timeline newTimeline) {
+      Void childSourceId, MediaSource mediaSource, Timeline newTimeline) {
     refreshSourceInfo(
         new ForwardingTimeline(newTimeline) {
           @Override

File: libraries/exoplayer_smoothstreaming/src/main/java/androidx/media3/exoplayer/smoothstreaming/offline/SsDownloader.java
Patch:
@@ -117,7 +117,7 @@ public SsDownloader(
 
   @Override
   protected List<Segment> getSegments(
-      DataSource dataSource, SsManifest manifest, boolean allowIncompleteList) {
+      DataSource dataSource, SsManifest manifest, boolean removing) {
     ArrayList<Segment> segments = new ArrayList<>();
     for (StreamElement streamElement : manifest.streamElements) {
       for (int i = 0; i < streamElement.formats.length; i++) {

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -152,7 +152,7 @@ public MediaSource.Factory setDrmSessionManagerProvider(
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return contentMediaSourceFactory.getSupportedTypes();
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactory.java
Patch:
@@ -395,7 +395,7 @@ public DefaultMediaSourceFactory setLoadErrorHandlingPolicy(
   }
 
   @Override
-  public int[] getSupportedTypes() {
+  public @C.ContentType int[] getSupportedTypes() {
     return delegateFactoryLoader.getSupportedTypes();
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaSource.java
Patch:
@@ -225,7 +225,7 @@ public ProgressiveMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_OTHER};
     }
   }

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
Patch:
@@ -311,7 +311,7 @@ public DashMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_DASH};
     }
   }

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaSource.java
Patch:
@@ -359,7 +359,7 @@ public HlsMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_HLS};
     }
   }

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMediaSource.java
Patch:
@@ -164,7 +164,7 @@ public Factory setLoadErrorHandlingPolicy(LoadErrorHandlingPolicy loadErrorHandl
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_RTSP};
     }
 

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/SsMediaSource.java
Patch:
@@ -290,7 +290,7 @@ public SsMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_SS};
     }
   }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSourceFactory.java
Patch:
@@ -47,7 +47,7 @@ public MediaSourceFactory setLoadErrorHandlingPolicy(
   }
 
   @Override
-  public int[] getSupportedTypes() {
+  public @C.ContentType int[] getSupportedTypes() {
     return new int[] {C.CONTENT_TYPE_OTHER};
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/DefaultMediaSourceFactory.java
Patch:
@@ -412,7 +412,7 @@ public DefaultMediaSourceFactory setLoadErrorHandlingPolicy(
 
   @UnstableApi
   @Override
-  public int[] getSupportedTypes() {
+  public @C.ContentType int[] getSupportedTypes() {
     return delegateFactoryLoader.getSupportedTypes();
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ProgressiveMediaSource.java
Patch:
@@ -227,7 +227,7 @@ public ProgressiveMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_OTHER};
     }
   }

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/DashMediaSource.java
Patch:
@@ -313,7 +313,7 @@ public DashMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_DASH};
     }
   }

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsMediaSource.java
Patch:
@@ -361,7 +361,7 @@ public HlsMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_HLS};
     }
   }

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -154,7 +154,7 @@ public MediaSource.Factory setDrmSessionManagerProvider(
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return contentMediaSourceFactory.getSupportedTypes();
     }
 

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaSource.java
Patch:
@@ -166,7 +166,7 @@ public Factory setLoadErrorHandlingPolicy(LoadErrorHandlingPolicy loadErrorHandl
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_RTSP};
     }
 

File: libraries/exoplayer_smoothstreaming/src/main/java/androidx/media3/exoplayer/smoothstreaming/SsMediaSource.java
Patch:
@@ -292,7 +292,7 @@ public SsMediaSource createMediaSource(MediaItem mediaItem) {
     }
 
     @Override
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       return new int[] {C.CONTENT_TYPE_SS};
     }
   }

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeMediaSourceFactory.java
Patch:
@@ -49,7 +49,7 @@ public MediaSourceFactory setLoadErrorHandlingPolicy(
   }
 
   @Override
-  public int[] getSupportedTypes() {
+  public @C.ContentType int[] getSupportedTypes() {
     return new int[] {C.CONTENT_TYPE_OTHER};
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
Patch:
@@ -2385,7 +2385,7 @@ private void setParametersInternal(Parameters parameters) {
       selectTracks(
           MappedTrackInfo mappedTrackInfo,
           @Capabilities int[][][] rendererFormatSupports,
-          @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupports,
+          @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupport,
           MediaPeriodId mediaPeriodId,
           Timeline timeline)
           throws ExoPlaybackException {
@@ -2405,7 +2405,7 @@ private void setParametersInternal(Parameters parameters) {
         selectAllTracks(
             mappedTrackInfo,
             rendererFormatSupports,
-            rendererMixedMimeTypeAdaptationSupports,
+            rendererMixedMimeTypeAdaptationSupport,
             parameters);
 
     applyTrackSelectionOverrides(mappedTrackInfo, parameters, definitions);

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/MappingTrackSelector.java
Patch:
@@ -434,7 +434,7 @@ public final TrackSelectorResult selectTracks(
    * Given mapped track information, returns a track selection and configuration for each renderer.
    *
    * @param mappedTrackInfo Mapped track information.
-   * @param rendererFormatSupports The {@link Capabilities} for ach mapped track, indexed by
+   * @param rendererFormatSupports The {@link Capabilities} for each mapped track, indexed by
    *     renderer, track group and track (in that order).
    * @param rendererMixedMimeTypeAdaptationSupport The {@link AdaptiveSupport} for mixed MIME type
    *     adaptation for the renderer.

File: library/core/src/test/java/com/google/android/exoplayer2/trackselection/MappingTrackSelectorTest.java
Patch:
@@ -147,7 +147,7 @@ private static final class FakeMappingTrackSelector extends MappingTrackSelector
     protected Pair<RendererConfiguration[], ExoTrackSelection[]> selectTracks(
         MappedTrackInfo mappedTrackInfo,
         @Capabilities int[][][] rendererFormatSupports,
-        @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupports,
+        @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupport,
         MediaPeriodId mediaPeriodId,
         Timeline timeline) {
       int rendererCount = mappedTrackInfo.getRendererCount();

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/DefaultTrackSelector.java
Patch:
@@ -2392,7 +2392,7 @@ private void setParametersInternal(Parameters parameters) {
       selectTracks(
           MappedTrackInfo mappedTrackInfo,
           @Capabilities int[][][] rendererFormatSupports,
-          @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupports,
+          @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupport,
           MediaPeriodId mediaPeriodId,
           Timeline timeline)
           throws ExoPlaybackException {
@@ -2412,7 +2412,7 @@ private void setParametersInternal(Parameters parameters) {
         selectAllTracks(
             mappedTrackInfo,
             rendererFormatSupports,
-            rendererMixedMimeTypeAdaptationSupports,
+            rendererMixedMimeTypeAdaptationSupport,
             parameters);
 
     applyTrackSelectionOverrides(mappedTrackInfo, parameters, definitions);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/MappingTrackSelector.java
Patch:
@@ -436,7 +436,7 @@ public final TrackSelectorResult selectTracks(
    * Given mapped track information, returns a track selection and configuration for each renderer.
    *
    * @param mappedTrackInfo Mapped track information.
-   * @param rendererFormatSupports The {@link Capabilities} for ach mapped track, indexed by
+   * @param rendererFormatSupports The {@link Capabilities} for each mapped track, indexed by
    *     renderer, track group and track (in that order).
    * @param rendererMixedMimeTypeAdaptationSupport The {@link AdaptiveSupport} for mixed MIME type
    *     adaptation for the renderer.

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/trackselection/MappingTrackSelectorTest.java
Patch:
@@ -147,7 +147,7 @@ private static final class FakeMappingTrackSelector extends MappingTrackSelector
     protected Pair<RendererConfiguration[], ExoTrackSelection[]> selectTracks(
         MappedTrackInfo mappedTrackInfo,
         @Capabilities int[][][] rendererFormatSupports,
-        @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupports,
+        @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupport,
         MediaPeriodId mediaPeriodId,
         Timeline timeline) {
       int rendererCount = mappedTrackInfo.getRendererCount();

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeClock.java
Patch:
@@ -284,7 +284,7 @@ protected final class HandlerMessage
     private final int arg2;
     @Nullable private final Object obj;
 
-    public HandlerMessage(
+    private HandlerMessage(
         long timeMs,
         ClockHandler handler,
         int what,

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeClock.java
Patch:
@@ -286,7 +286,7 @@ protected final class HandlerMessage
     private final int arg2;
     @Nullable private final Object obj;
 
-    public HandlerMessage(
+    private HandlerMessage(
         long timeMs,
         ClockHandler handler,
         int what,

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtpPayloadFormat.java
Patch:
@@ -56,7 +56,7 @@ public final class RtpPayloadFormat {
   public static final String RTP_MEDIA_VP9 = "VP9";
 
   /** Returns whether the format of a {@link MediaDescription} is supported. */
-  public static boolean isFormatSupported(MediaDescription mediaDescription) {
+  /* package */ static boolean isFormatSupported(MediaDescription mediaDescription) {
     switch (Ascii.toUpperCase(mediaDescription.rtpMapAttribute.mediaEncoding)) {
       case RTP_MEDIA_AC3:
       case RTP_MEDIA_AMR:

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtpPayloadFormat.java
Patch:
@@ -58,7 +58,7 @@ public final class RtpPayloadFormat {
   public static final String RTP_MEDIA_VP9 = "VP9";
 
   /** Returns whether the format of a {@link MediaDescription} is supported. */
-  public static boolean isFormatSupported(MediaDescription mediaDescription) {
+  /* package */ static boolean isFormatSupported(MediaDescription mediaDescription) {
     switch (Ascii.toUpperCase(mediaDescription.rtpMapAttribute.mediaEncoding)) {
       case RTP_MEDIA_AC3:
       case RTP_MEDIA_AMR:

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -531,7 +531,7 @@ public void prepareSourceInternal(@Nullable TransferListener mediaTransferListen
 
   @Override
   protected void onChildSourceInfoRefreshed(
-      Void id, MediaSource mediaSource, Timeline newTimeline) {
+      Void childSourceId, MediaSource mediaSource, Timeline newTimeline) {
     refreshSourceInfo(
         new ForwardingTimeline(newTimeline) {
           @Override

File: library/core/src/main/java/com/google/android/exoplayer2/source/ClippingMediaSource.java
Patch:
@@ -226,11 +226,11 @@ protected void releaseSourceInternal() {
   }
 
   @Override
-  protected void onChildSourceInfoRefreshed(Timeline timeline) {
+  protected void onChildSourceInfoRefreshed(Timeline newTimeline) {
     if (clippingError != null) {
       return;
     }
-    refreshClippedTimeline(timeline);
+    refreshClippedTimeline(newTimeline);
   }
 
   private void refreshClippedTimeline(Timeline timeline) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/LoopingMediaSource.java
Patch:
@@ -108,11 +108,11 @@ public void releasePeriod(MediaPeriod mediaPeriod) {
   }
 
   @Override
-  protected void onChildSourceInfoRefreshed(Timeline timeline) {
+  protected void onChildSourceInfoRefreshed(Timeline newTimeline) {
     Timeline loopingTimeline =
         loopCount != Integer.MAX_VALUE
-            ? new LoopingTimeline(timeline, loopCount)
-            : new InfinitelyLoopingTimeline(timeline);
+            ? new LoopingTimeline(newTimeline, loopCount)
+            : new InfinitelyLoopingTimeline(newTimeline);
     refreshSourceInfo(loopingTimeline);
   }
 

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloader.java
Patch:
@@ -115,7 +115,7 @@ public SsDownloader(
 
   @Override
   protected List<Segment> getSegments(
-      DataSource dataSource, SsManifest manifest, boolean allowIncompleteList) {
+      DataSource dataSource, SsManifest manifest, boolean removing) {
     ArrayList<Segment> segments = new ArrayList<>();
     for (StreamElement streamElement : manifest.streamElements) {
       for (int i = 0; i < streamElement.formats.length; i++) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ClippingMediaSource.java
Patch:
@@ -228,11 +228,11 @@ protected void releaseSourceInternal() {
   }
 
   @Override
-  protected void onChildSourceInfoRefreshed(Timeline timeline) {
+  protected void onChildSourceInfoRefreshed(Timeline newTimeline) {
     if (clippingError != null) {
       return;
     }
-    refreshClippedTimeline(timeline);
+    refreshClippedTimeline(newTimeline);
   }
 
   private void refreshClippedTimeline(Timeline timeline) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/LoopingMediaSource.java
Patch:
@@ -110,11 +110,11 @@ public void releasePeriod(MediaPeriod mediaPeriod) {
   }
 
   @Override
-  protected void onChildSourceInfoRefreshed(Timeline timeline) {
+  protected void onChildSourceInfoRefreshed(Timeline newTimeline) {
     Timeline loopingTimeline =
         loopCount != Integer.MAX_VALUE
-            ? new LoopingTimeline(timeline, loopCount)
-            : new InfinitelyLoopingTimeline(timeline);
+            ? new LoopingTimeline(newTimeline, loopCount)
+            : new InfinitelyLoopingTimeline(newTimeline);
     refreshSourceInfo(loopingTimeline);
   }
 

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -533,7 +533,7 @@ public void prepareSourceInternal(@Nullable TransferListener mediaTransferListen
 
   @Override
   protected void onChildSourceInfoRefreshed(
-      Void id, MediaSource mediaSource, Timeline newTimeline) {
+      Void childSourceId, MediaSource mediaSource, Timeline newTimeline) {
     refreshSourceInfo(
         new ForwardingTimeline(newTimeline) {
           @Override

File: libraries/exoplayer_smoothstreaming/src/main/java/androidx/media3/exoplayer/smoothstreaming/offline/SsDownloader.java
Patch:
@@ -117,7 +117,7 @@ public SsDownloader(
 
   @Override
   protected List<Segment> getSegments(
-      DataSource dataSource, SsManifest manifest, boolean allowIncompleteList) {
+      DataSource dataSource, SsManifest manifest, boolean removing) {
     ArrayList<Segment> segments = new ArrayList<>();
     for (StreamElement streamElement : manifest.streamElements) {
       for (int i = 0; i < streamElement.formats.length; i++) {

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/SimpleSubtitleDecoder.java
Patch:
@@ -89,11 +89,11 @@ protected final SubtitleDecoderException decode(
    * Decodes data into a {@link Subtitle}.
    *
    * @param data An array holding the data to be decoded, starting at position 0.
-   * @param size The size of the data to be decoded.
+   * @param length The number of bytes from {@code data} to be decoded.
    * @param reset Whether the decoder must be reset before decoding.
    * @return The decoded {@link Subtitle}.
    * @throws SubtitleDecoderException If a decoding error occurs.
    */
-  protected abstract Subtitle decode(byte[] data, int size, boolean reset)
+  protected abstract Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException;
 }

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/pgs/PgsDecoder.java
Patch:
@@ -54,8 +54,9 @@ public PgsDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] data, int size, boolean reset) throws SubtitleDecoderException {
-    buffer.reset(data, size);
+  protected Subtitle decode(byte[] data, int length, boolean reset)
+      throws SubtitleDecoderException {
+    buffer.reset(data, length);
     maybeInflateData(buffer);
     cueBuilder.reset();
     ArrayList<Cue> cues = new ArrayList<>();

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/subrip/SubripDecoder.java
Patch:
@@ -70,10 +70,10 @@ public SubripDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset) {
+  protected Subtitle decode(byte[] data, int length, boolean reset) {
     ArrayList<Cue> cues = new ArrayList<>();
     LongArray cueTimesUs = new LongArray();
-    ParsableByteArray subripData = new ParsableByteArray(bytes, length);
+    ParsableByteArray subripData = new ParsableByteArray(data, length);
 
     @Nullable String currentLine;
     while ((currentLine = subripData.readLine()) != null) {

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java
Patch:
@@ -113,15 +113,15 @@ public TtmlDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
     try {
       XmlPullParser xmlParser = xmlParserFactory.newPullParser();
       Map<String, TtmlStyle> globalStyles = new HashMap<>();
       Map<String, TtmlRegion> regionMap = new HashMap<>();
       Map<String, String> imageMap = new HashMap<>();
       regionMap.put(TtmlNode.ANONYMOUS_REGION_ID, new TtmlRegion(TtmlNode.ANONYMOUS_REGION_ID));
-      ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes, 0, length);
+      ByteArrayInputStream inputStream = new ByteArrayInputStream(data, 0, length);
       xmlParser.setInput(inputStream, null);
       @Nullable TtmlSubtitle ttmlSubtitle = null;
       ArrayDeque<TtmlNode> nodeStack = new ArrayDeque<>();

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/tx3g/Tx3gDecoder.java
Patch:
@@ -123,9 +123,9 @@ public Tx3gDecoder(List<byte[]> initializationData) {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
-    parsableByteArray.reset(bytes, length);
+    parsableByteArray.reset(data, length);
     String cueTextString = readSubtitleText(parsableByteArray);
     if (cueTextString.isEmpty()) {
       return Tx3gSubtitle.EMPTY;

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/webvtt/Mp4WebvttDecoder.java
Patch:
@@ -49,11 +49,11 @@ public Mp4WebvttDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
     // Webvtt in Mp4 samples have boxes inside of them, so we have to do a traditional box parsing:
     // first 4 bytes size and then 4 bytes type.
-    sampleData.reset(bytes, length);
+    sampleData.reset(data, length);
     List<Cue> resultingCueList = new ArrayList<>();
     while (sampleData.bytesLeft() > 0) {
       if (sampleData.bytesLeft() < BOX_HEADER_SIZE) {

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttDecoder.java
Patch:
@@ -51,9 +51,9 @@ public WebvttDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
-    parsableWebvttData.reset(bytes, length);
+    parsableWebvttData.reset(data, length);
     List<WebvttCssStyle> definedStyles = new ArrayList<>();
 
     // Validate the first line of the header, and skip the remainder.

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/ColorLut.java
Patch:
@@ -42,7 +42,7 @@ public interface ColorLut extends GlEffect {
   /** This method must be executed on the same thread as other GL commands. */
   @Override
   @WorkerThread
-  default ColorLutProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  default SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return new ColorLutProcessor(context, /* colorLut= */ this, useHdr);
   }

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/HslAdjustment.java
Patch:
@@ -111,7 +111,7 @@ private HslAdjustment(
   }
 
   @Override
-  public HslProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  public SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return new HslProcessor(context, /* hslAdjustment= */ this, useHdr);
   }

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/RgbFilter.java
Patch:
@@ -89,7 +89,7 @@ public float[] getMatrix(long presentationTimeUs, boolean useHdr) {
   }
 
   @Override
-  public MatrixTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  public SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     checkForConsistentHdrSetting(useHdr);
     return RgbMatrix.super.toGlTextureProcessor(context, useHdr);

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/RgbMatrix.java
Patch:
@@ -38,7 +38,7 @@ public interface RgbMatrix extends GlEffect {
   float[] getMatrix(long presentationTimeUs, boolean useHdr);
 
   @Override
-  default MatrixTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  default SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return MatrixTextureProcessor.create(
         context,

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/SingleColorLut.java
Patch:
@@ -147,7 +147,7 @@ public void release() throws GlUtil.GlException {
   }
 
   @Override
-  public ColorLutProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  public SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     checkState(!useHdr, "HDR is currently not supported.");
 

File: libraries/session/src/main/java/androidx/media3/session/MediaNotificationManager.java
Patch:
@@ -294,7 +294,8 @@ public void onEvents(Player player, Player.Events events) {
       if (events.containsAny(
           Player.EVENT_PLAYBACK_STATE_CHANGED,
           Player.EVENT_PLAY_WHEN_READY_CHANGED,
-          Player.EVENT_MEDIA_METADATA_CHANGED)) {
+          Player.EVENT_MEDIA_METADATA_CHANGED,
+          Player.EVENT_TIMELINE_CHANGED)) {
         mediaSessionService.onUpdateNotification(session);
       }
     }

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/SimpleSubtitleDecoder.java
Patch:
@@ -91,11 +91,11 @@ protected final SubtitleDecoderException decode(
    * Decodes data into a {@link Subtitle}.
    *
    * @param data An array holding the data to be decoded, starting at position 0.
-   * @param size The size of the data to be decoded.
+   * @param length The number of bytes from {@code data} to be decoded.
    * @param reset Whether the decoder must be reset before decoding.
    * @return The decoded {@link Subtitle}.
    * @throws SubtitleDecoderException If a decoding error occurs.
    */
-  protected abstract Subtitle decode(byte[] data, int size, boolean reset)
+  protected abstract Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException;
 }

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/pgs/PgsDecoder.java
Patch:
@@ -56,8 +56,9 @@ public PgsDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] data, int size, boolean reset) throws SubtitleDecoderException {
-    buffer.reset(data, size);
+  protected Subtitle decode(byte[] data, int length, boolean reset)
+      throws SubtitleDecoderException {
+    buffer.reset(data, length);
     maybeInflateData(buffer);
     cueBuilder.reset();
     ArrayList<Cue> cues = new ArrayList<>();

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/subrip/SubripDecoder.java
Patch:
@@ -72,10 +72,10 @@ public SubripDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset) {
+  protected Subtitle decode(byte[] data, int length, boolean reset) {
     ArrayList<Cue> cues = new ArrayList<>();
     LongArray cueTimesUs = new LongArray();
-    ParsableByteArray subripData = new ParsableByteArray(bytes, length);
+    ParsableByteArray subripData = new ParsableByteArray(data, length);
 
     @Nullable String currentLine;
     while ((currentLine = subripData.readLine()) != null) {

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/ttml/TtmlDecoder.java
Patch:
@@ -115,15 +115,15 @@ public TtmlDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
     try {
       XmlPullParser xmlParser = xmlParserFactory.newPullParser();
       Map<String, TtmlStyle> globalStyles = new HashMap<>();
       Map<String, TtmlRegion> regionMap = new HashMap<>();
       Map<String, String> imageMap = new HashMap<>();
       regionMap.put(TtmlNode.ANONYMOUS_REGION_ID, new TtmlRegion(TtmlNode.ANONYMOUS_REGION_ID));
-      ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes, 0, length);
+      ByteArrayInputStream inputStream = new ByteArrayInputStream(data, 0, length);
       xmlParser.setInput(inputStream, null);
       @Nullable TtmlSubtitle ttmlSubtitle = null;
       ArrayDeque<TtmlNode> nodeStack = new ArrayDeque<>();

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/tx3g/Tx3gDecoder.java
Patch:
@@ -125,9 +125,9 @@ public Tx3gDecoder(List<byte[]> initializationData) {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
-    parsableByteArray.reset(bytes, length);
+    parsableByteArray.reset(data, length);
     String cueTextString = readSubtitleText(parsableByteArray);
     if (cueTextString.isEmpty()) {
       return Tx3gSubtitle.EMPTY;

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/webvtt/Mp4WebvttDecoder.java
Patch:
@@ -51,11 +51,11 @@ public Mp4WebvttDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
     // Webvtt in Mp4 samples have boxes inside of them, so we have to do a traditional box parsing:
     // first 4 bytes size and then 4 bytes type.
-    sampleData.reset(bytes, length);
+    sampleData.reset(data, length);
     List<Cue> resultingCueList = new ArrayList<>();
     while (sampleData.bytesLeft() > 0) {
       if (sampleData.bytesLeft() < BOX_HEADER_SIZE) {

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/webvtt/WebvttDecoder.java
Patch:
@@ -53,9 +53,9 @@ public WebvttDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
-    parsableWebvttData.reset(bytes, length);
+    parsableWebvttData.reset(data, length);
     List<WebvttCssStyle> definedStyles = new ArrayList<>();
 
     // Validate the first line of the header, and skip the remainder.

File: libraries/effect/src/main/java/androidx/media3/effect/ColorLut.java
Patch:
@@ -44,7 +44,7 @@ public interface ColorLut extends GlEffect {
   /** This method must be executed on the same thread as other GL commands. */
   @Override
   @WorkerThread
-  default ColorLutProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  default SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return new ColorLutProcessor(context, /* colorLut= */ this, useHdr);
   }

File: libraries/effect/src/main/java/androidx/media3/effect/HslAdjustment.java
Patch:
@@ -113,7 +113,7 @@ private HslAdjustment(
   }
 
   @Override
-  public HslProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  public SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return new HslProcessor(context, /* hslAdjustment= */ this, useHdr);
   }

File: libraries/effect/src/main/java/androidx/media3/effect/RgbFilter.java
Patch:
@@ -91,7 +91,7 @@ public float[] getMatrix(long presentationTimeUs, boolean useHdr) {
   }
 
   @Override
-  public MatrixTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  public SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     checkForConsistentHdrSetting(useHdr);
     return RgbMatrix.super.toGlTextureProcessor(context, useHdr);

File: libraries/effect/src/main/java/androidx/media3/effect/RgbMatrix.java
Patch:
@@ -40,7 +40,7 @@ public interface RgbMatrix extends GlEffect {
   float[] getMatrix(long presentationTimeUs, boolean useHdr);
 
   @Override
-  default MatrixTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  default SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return MatrixTextureProcessor.create(
         context,

File: libraries/effect/src/main/java/androidx/media3/effect/SingleColorLut.java
Patch:
@@ -149,7 +149,7 @@ public void release() throws GlUtil.GlException {
   }
 
   @Override
-  public ColorLutProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  public SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     checkState(!useHdr, "HDR is currently not supported.");
 

File: libraries/session/src/main/java/androidx/media3/session/MediaNotificationManager.java
Patch:
@@ -294,7 +294,8 @@ public void onEvents(Player player, Player.Events events) {
       if (events.containsAny(
           Player.EVENT_PLAYBACK_STATE_CHANGED,
           Player.EVENT_PLAY_WHEN_READY_CHANGED,
-          Player.EVENT_MEDIA_METADATA_CHANGED)) {
+          Player.EVENT_MEDIA_METADATA_CHANGED,
+          Player.EVENT_TIMELINE_CHANGED)) {
         mediaSessionService.onUpdateNotification(session);
       }
     }

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/SimpleSubtitleDecoder.java
Patch:
@@ -89,11 +89,11 @@ protected final SubtitleDecoderException decode(
    * Decodes data into a {@link Subtitle}.
    *
    * @param data An array holding the data to be decoded, starting at position 0.
-   * @param size The size of the data to be decoded.
+   * @param length The number of bytes from {@code data} to be decoded.
    * @param reset Whether the decoder must be reset before decoding.
    * @return The decoded {@link Subtitle}.
    * @throws SubtitleDecoderException If a decoding error occurs.
    */
-  protected abstract Subtitle decode(byte[] data, int size, boolean reset)
+  protected abstract Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException;
 }

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/pgs/PgsDecoder.java
Patch:
@@ -54,8 +54,9 @@ public PgsDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] data, int size, boolean reset) throws SubtitleDecoderException {
-    buffer.reset(data, size);
+  protected Subtitle decode(byte[] data, int length, boolean reset)
+      throws SubtitleDecoderException {
+    buffer.reset(data, length);
     maybeInflateData(buffer);
     cueBuilder.reset();
     ArrayList<Cue> cues = new ArrayList<>();

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/subrip/SubripDecoder.java
Patch:
@@ -70,10 +70,10 @@ public SubripDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset) {
+  protected Subtitle decode(byte[] data, int length, boolean reset) {
     ArrayList<Cue> cues = new ArrayList<>();
     LongArray cueTimesUs = new LongArray();
-    ParsableByteArray subripData = new ParsableByteArray(bytes, length);
+    ParsableByteArray subripData = new ParsableByteArray(data, length);
 
     @Nullable String currentLine;
     while ((currentLine = subripData.readLine()) != null) {

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java
Patch:
@@ -113,15 +113,15 @@ public TtmlDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
     try {
       XmlPullParser xmlParser = xmlParserFactory.newPullParser();
       Map<String, TtmlStyle> globalStyles = new HashMap<>();
       Map<String, TtmlRegion> regionMap = new HashMap<>();
       Map<String, String> imageMap = new HashMap<>();
       regionMap.put(TtmlNode.ANONYMOUS_REGION_ID, new TtmlRegion(TtmlNode.ANONYMOUS_REGION_ID));
-      ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes, 0, length);
+      ByteArrayInputStream inputStream = new ByteArrayInputStream(data, 0, length);
       xmlParser.setInput(inputStream, null);
       @Nullable TtmlSubtitle ttmlSubtitle = null;
       ArrayDeque<TtmlNode> nodeStack = new ArrayDeque<>();

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/tx3g/Tx3gDecoder.java
Patch:
@@ -123,9 +123,9 @@ public Tx3gDecoder(List<byte[]> initializationData) {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
-    parsableByteArray.reset(bytes, length);
+    parsableByteArray.reset(data, length);
     String cueTextString = readSubtitleText(parsableByteArray);
     if (cueTextString.isEmpty()) {
       return Tx3gSubtitle.EMPTY;

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/webvtt/Mp4WebvttDecoder.java
Patch:
@@ -49,11 +49,11 @@ public Mp4WebvttDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
     // Webvtt in Mp4 samples have boxes inside of them, so we have to do a traditional box parsing:
     // first 4 bytes size and then 4 bytes type.
-    sampleData.reset(bytes, length);
+    sampleData.reset(data, length);
     List<Cue> resultingCueList = new ArrayList<>();
     while (sampleData.bytesLeft() > 0) {
       if (sampleData.bytesLeft() < BOX_HEADER_SIZE) {

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttDecoder.java
Patch:
@@ -51,9 +51,9 @@ public WebvttDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
-    parsableWebvttData.reset(bytes, length);
+    parsableWebvttData.reset(data, length);
     List<WebvttCssStyle> definedStyles = new ArrayList<>();
 
     // Validate the first line of the header, and skip the remainder.

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/SimpleSubtitleDecoder.java
Patch:
@@ -91,11 +91,11 @@ protected final SubtitleDecoderException decode(
    * Decodes data into a {@link Subtitle}.
    *
    * @param data An array holding the data to be decoded, starting at position 0.
-   * @param size The size of the data to be decoded.
+   * @param length The number of bytes from {@code data} to be decoded.
    * @param reset Whether the decoder must be reset before decoding.
    * @return The decoded {@link Subtitle}.
    * @throws SubtitleDecoderException If a decoding error occurs.
    */
-  protected abstract Subtitle decode(byte[] data, int size, boolean reset)
+  protected abstract Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException;
 }

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/pgs/PgsDecoder.java
Patch:
@@ -56,8 +56,9 @@ public PgsDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] data, int size, boolean reset) throws SubtitleDecoderException {
-    buffer.reset(data, size);
+  protected Subtitle decode(byte[] data, int length, boolean reset)
+      throws SubtitleDecoderException {
+    buffer.reset(data, length);
     maybeInflateData(buffer);
     cueBuilder.reset();
     ArrayList<Cue> cues = new ArrayList<>();

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/subrip/SubripDecoder.java
Patch:
@@ -72,10 +72,10 @@ public SubripDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset) {
+  protected Subtitle decode(byte[] data, int length, boolean reset) {
     ArrayList<Cue> cues = new ArrayList<>();
     LongArray cueTimesUs = new LongArray();
-    ParsableByteArray subripData = new ParsableByteArray(bytes, length);
+    ParsableByteArray subripData = new ParsableByteArray(data, length);
 
     @Nullable String currentLine;
     while ((currentLine = subripData.readLine()) != null) {

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/ttml/TtmlDecoder.java
Patch:
@@ -115,15 +115,15 @@ public TtmlDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
     try {
       XmlPullParser xmlParser = xmlParserFactory.newPullParser();
       Map<String, TtmlStyle> globalStyles = new HashMap<>();
       Map<String, TtmlRegion> regionMap = new HashMap<>();
       Map<String, String> imageMap = new HashMap<>();
       regionMap.put(TtmlNode.ANONYMOUS_REGION_ID, new TtmlRegion(TtmlNode.ANONYMOUS_REGION_ID));
-      ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes, 0, length);
+      ByteArrayInputStream inputStream = new ByteArrayInputStream(data, 0, length);
       xmlParser.setInput(inputStream, null);
       @Nullable TtmlSubtitle ttmlSubtitle = null;
       ArrayDeque<TtmlNode> nodeStack = new ArrayDeque<>();

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/tx3g/Tx3gDecoder.java
Patch:
@@ -125,9 +125,9 @@ public Tx3gDecoder(List<byte[]> initializationData) {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
-    parsableByteArray.reset(bytes, length);
+    parsableByteArray.reset(data, length);
     String cueTextString = readSubtitleText(parsableByteArray);
     if (cueTextString.isEmpty()) {
       return Tx3gSubtitle.EMPTY;

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/webvtt/Mp4WebvttDecoder.java
Patch:
@@ -51,11 +51,11 @@ public Mp4WebvttDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
     // Webvtt in Mp4 samples have boxes inside of them, so we have to do a traditional box parsing:
     // first 4 bytes size and then 4 bytes type.
-    sampleData.reset(bytes, length);
+    sampleData.reset(data, length);
     List<Cue> resultingCueList = new ArrayList<>();
     while (sampleData.bytesLeft() > 0) {
       if (sampleData.bytesLeft() < BOX_HEADER_SIZE) {

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/webvtt/WebvttDecoder.java
Patch:
@@ -53,9 +53,9 @@ public WebvttDecoder() {
   }
 
   @Override
-  protected Subtitle decode(byte[] bytes, int length, boolean reset)
+  protected Subtitle decode(byte[] data, int length, boolean reset)
       throws SubtitleDecoderException {
-    parsableWebvttData.reset(bytes, length);
+    parsableWebvttData.reset(data, length);
     List<WebvttCssStyle> definedStyles = new ArrayList<>();
 
     // Validate the first line of the header, and skip the remainder.

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/ColorLut.java
Patch:
@@ -42,7 +42,7 @@ public interface ColorLut extends GlEffect {
   /** This method must be executed on the same thread as other GL commands. */
   @Override
   @WorkerThread
-  default ColorLutProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  default SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return new ColorLutProcessor(context, /* colorLut= */ this, useHdr);
   }

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/HslAdjustment.java
Patch:
@@ -111,7 +111,7 @@ private HslAdjustment(
   }
 
   @Override
-  public HslProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  public SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return new HslProcessor(context, /* hslAdjustment= */ this, useHdr);
   }

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/RgbFilter.java
Patch:
@@ -89,7 +89,7 @@ public float[] getMatrix(long presentationTimeUs, boolean useHdr) {
   }
 
   @Override
-  public MatrixTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  public SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     checkForConsistentHdrSetting(useHdr);
     return RgbMatrix.super.toGlTextureProcessor(context, useHdr);

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/RgbMatrix.java
Patch:
@@ -38,7 +38,7 @@ public interface RgbMatrix extends GlEffect {
   float[] getMatrix(long presentationTimeUs, boolean useHdr);
 
   @Override
-  default MatrixTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  default SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return MatrixTextureProcessor.create(
         context,

File: library/effect/src/main/java/com/google/android/exoplayer2/effect/SingleColorLut.java
Patch:
@@ -147,7 +147,7 @@ public void release() throws GlUtil.GlException {
   }
 
   @Override
-  public ColorLutProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  public SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     checkState(!useHdr, "HDR is currently not supported.");
 

File: libraries/effect/src/main/java/androidx/media3/effect/ColorLut.java
Patch:
@@ -44,7 +44,7 @@ public interface ColorLut extends GlEffect {
   /** This method must be executed on the same thread as other GL commands. */
   @Override
   @WorkerThread
-  default ColorLutProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  default SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return new ColorLutProcessor(context, /* colorLut= */ this, useHdr);
   }

File: libraries/effect/src/main/java/androidx/media3/effect/HslAdjustment.java
Patch:
@@ -113,7 +113,7 @@ private HslAdjustment(
   }
 
   @Override
-  public HslProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  public SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return new HslProcessor(context, /* hslAdjustment= */ this, useHdr);
   }

File: libraries/effect/src/main/java/androidx/media3/effect/RgbFilter.java
Patch:
@@ -91,7 +91,7 @@ public float[] getMatrix(long presentationTimeUs, boolean useHdr) {
   }
 
   @Override
-  public MatrixTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  public SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     checkForConsistentHdrSetting(useHdr);
     return RgbMatrix.super.toGlTextureProcessor(context, useHdr);

File: libraries/effect/src/main/java/androidx/media3/effect/RgbMatrix.java
Patch:
@@ -40,7 +40,7 @@ public interface RgbMatrix extends GlEffect {
   float[] getMatrix(long presentationTimeUs, boolean useHdr);
 
   @Override
-  default MatrixTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  default SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return MatrixTextureProcessor.create(
         context,

File: libraries/effect/src/main/java/androidx/media3/effect/SingleColorLut.java
Patch:
@@ -149,7 +149,7 @@ public void release() throws GlUtil.GlException {
   }
 
   @Override
-  public ColorLutProcessor toGlTextureProcessor(Context context, boolean useHdr)
+  public SingleFrameGlTextureProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     checkState(!useHdr, "HDR is currently not supported.");
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/SampleQueue.java
Patch:
@@ -573,10 +573,10 @@ public final void setUpstreamFormatChangeListener(
   // TrackOutput implementation. Called by the loading thread.
 
   @Override
-  public final void format(Format unadjustedUpstreamFormat) {
-    Format adjustedUpstreamFormat = getAdjustedUpstreamFormat(unadjustedUpstreamFormat);
+  public final void format(Format format) {
+    Format adjustedUpstreamFormat = getAdjustedUpstreamFormat(format);
     upstreamFormatAdjustmentRequired = false;
-    this.unadjustedUpstreamFormat = unadjustedUpstreamFormat;
+    unadjustedUpstreamFormat = format;
     boolean upstreamFormatChanged = setUpstreamFormat(adjustedUpstreamFormat);
     if (upstreamFormatChangeListener != null && upstreamFormatChanged) {
       upstreamFormatChangeListener.onUpstreamFormatChanged(adjustedUpstreamFormat);

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/cea/Cea608Decoder.java
Patch:
@@ -872,8 +872,8 @@ private static boolean isXdsControlCode(byte cc1) {
   }
 
   private static boolean isServiceSwitchCommand(byte cc1) {
-    // cc1 - 0|0|0|1|C|1|0|0
-    return (cc1 & 0xF7) == 0x14;
+    // cc1 - 0|0|0|1|C|1|0|F
+    return (cc1 & 0xF6) == 0x14;
   }
 
   private static final class CueBuilder {

File: library/core/src/main/java/com/google/android/exoplayer2/audio/TeeAudioProcessor.java
Patch:
@@ -18,6 +18,7 @@
 import static java.lang.Math.min;
 
 import androidx.annotation.Nullable;
+import androidx.media3.common.audio.AudioProcessorChain;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Log;
@@ -34,8 +35,8 @@
  * <p>This audio processor can be inserted into the audio processor chain to access audio data
  * before/after particular processing steps have been applied. For example, to get audio output
  * after playback speed adjustment and silence skipping have been applied it is necessary to pass a
- * custom {@link DefaultAudioSink.AudioProcessorChain} when creating the audio sink, and include
- * this audio processor after all other audio processors.
+ * custom {@link AudioProcessorChain} when creating the audio sink, and include this audio processor
+ * after all other audio processors.
  */
 public final class TeeAudioProcessor extends BaseAudioProcessor {
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/SampleQueue.java
Patch:
@@ -575,10 +575,10 @@ public final void setUpstreamFormatChangeListener(
   // TrackOutput implementation. Called by the loading thread.
 
   @Override
-  public final void format(Format unadjustedUpstreamFormat) {
-    Format adjustedUpstreamFormat = getAdjustedUpstreamFormat(unadjustedUpstreamFormat);
+  public final void format(Format format) {
+    Format adjustedUpstreamFormat = getAdjustedUpstreamFormat(format);
     upstreamFormatAdjustmentRequired = false;
-    this.unadjustedUpstreamFormat = unadjustedUpstreamFormat;
+    unadjustedUpstreamFormat = format;
     boolean upstreamFormatChanged = setUpstreamFormat(adjustedUpstreamFormat);
     if (upstreamFormatChangeListener != null && upstreamFormatChanged) {
       upstreamFormatChangeListener.onUpstreamFormatChanged(adjustedUpstreamFormat);

File: libraries/session/src/main/java/androidx/media3/session/MediaNotification.java
Patch:
@@ -128,7 +128,7 @@ interface Callback {
     /**
      * Creates a new {@link MediaNotification}.
      *
-     * @param session The media session.
+     * @param mediaSession The media session.
      * @param actionFactory The {@link ActionFactory} for creating notification {@link
      *     NotificationCompat.Action actions}.
      * @param customLayout The custom layout {@linkplain MediaSession#setCustomLayout(List) set by
@@ -138,7 +138,7 @@ interface Callback {
      *     been loaded asynchronously.
      */
     MediaNotification createNotification(
-        MediaSession session,
+        MediaSession mediaSession,
         ImmutableList<CommandButton> customLayout,
         ActionFactory actionFactory,
         Callback onNotificationChangedCallback);

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/cea/Cea608Decoder.java
Patch:
@@ -874,8 +874,8 @@ private static boolean isXdsControlCode(byte cc1) {
   }
 
   private static boolean isServiceSwitchCommand(byte cc1) {
-    // cc1 - 0|0|0|1|C|1|0|0
-    return (cc1 & 0xF7) == 0x14;
+    // cc1 - 0|0|0|1|C|1|0|F
+    return (cc1 & 0xF6) == 0x14;
   }
 
   private static final class CueBuilder {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/TeeAudioProcessor.java
Patch:
@@ -19,6 +19,7 @@
 
 import androidx.annotation.Nullable;
 import androidx.media3.common.C;
+import androidx.media3.common.audio.AudioProcessorChain;
 import androidx.media3.common.util.Assertions;
 import androidx.media3.common.util.Log;
 import androidx.media3.common.util.UnstableApi;
@@ -36,8 +37,8 @@
  * <p>This audio processor can be inserted into the audio processor chain to access audio data
  * before/after particular processing steps have been applied. For example, to get audio output
  * after playback speed adjustment and silence skipping have been applied it is necessary to pass a
- * custom {@link DefaultAudioSink.AudioProcessorChain} when creating the audio sink, and include
- * this audio processor after all other audio processors.
+ * custom {@link AudioProcessorChain} when creating the audio sink, and include this audio processor
+ * after all other audio processors.
  */
 @UnstableApi
 public final class TeeAudioProcessor extends BaseAudioProcessor {

File: libraries/session/src/main/java/androidx/media3/session/MediaLibrarySessionImpl.java
Patch:
@@ -64,8 +64,9 @@ public MediaLibrarySessionImpl(
       Player player,
       @Nullable PendingIntent sessionActivity,
       MediaLibrarySession.Callback callback,
-      Bundle tokenExtras) {
-    super(instance, context, id, player, sessionActivity, callback, tokenExtras);
+      Bundle tokenExtras,
+      BitmapLoader bitmapLoader) {
+    super(instance, context, id, player, sessionActivity, callback, tokenExtras, bitmapLoader);
     this.instance = instance;
     this.callback = callback;
     subscriptions = new ArrayMap<>();

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/SampleQueue.java
Patch:
@@ -575,10 +575,10 @@ public final void setUpstreamFormatChangeListener(
   // TrackOutput implementation. Called by the loading thread.
 
   @Override
-  public final void format(Format unadjustedUpstreamFormat) {
-    Format adjustedUpstreamFormat = getAdjustedUpstreamFormat(unadjustedUpstreamFormat);
+  public final void format(Format format) {
+    Format adjustedUpstreamFormat = getAdjustedUpstreamFormat(format);
     upstreamFormatAdjustmentRequired = false;
-    this.unadjustedUpstreamFormat = unadjustedUpstreamFormat;
+    unadjustedUpstreamFormat = format;
     boolean upstreamFormatChanged = setUpstreamFormat(adjustedUpstreamFormat);
     if (upstreamFormatChangeListener != null && upstreamFormatChanged) {
       upstreamFormatChangeListener.onUpstreamFormatChanged(adjustedUpstreamFormat);

File: libraries/session/src/main/java/androidx/media3/session/MediaNotification.java
Patch:
@@ -128,7 +128,7 @@ interface Callback {
     /**
      * Creates a new {@link MediaNotification}.
      *
-     * @param session The media session.
+     * @param mediaSession The media session.
      * @param actionFactory The {@link ActionFactory} for creating notification {@link
      *     NotificationCompat.Action actions}.
      * @param customLayout The custom layout {@linkplain MediaSession#setCustomLayout(List) set by
@@ -138,7 +138,7 @@ interface Callback {
      *     been loaded asynchronously.
      */
     MediaNotification createNotification(
-        MediaSession session,
+        MediaSession mediaSession,
         ImmutableList<CommandButton> customLayout,
         ActionFactory actionFactory,
         Callback onNotificationChangedCallback);

File: library/core/src/main/java/com/google/android/exoplayer2/source/SampleQueue.java
Patch:
@@ -573,10 +573,10 @@ public final void setUpstreamFormatChangeListener(
   // TrackOutput implementation. Called by the loading thread.
 
   @Override
-  public final void format(Format unadjustedUpstreamFormat) {
-    Format adjustedUpstreamFormat = getAdjustedUpstreamFormat(unadjustedUpstreamFormat);
+  public final void format(Format format) {
+    Format adjustedUpstreamFormat = getAdjustedUpstreamFormat(format);
     upstreamFormatAdjustmentRequired = false;
-    this.unadjustedUpstreamFormat = unadjustedUpstreamFormat;
+    unadjustedUpstreamFormat = format;
     boolean upstreamFormatChanged = setUpstreamFormat(adjustedUpstreamFormat);
     if (upstreamFormatChangeListener != null && upstreamFormatChanged) {
       upstreamFormatChangeListener.onUpstreamFormatChanged(adjustedUpstreamFormat);

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/cea/Cea608Decoder.java
Patch:
@@ -872,8 +872,8 @@ private static boolean isXdsControlCode(byte cc1) {
   }
 
   private static boolean isServiceSwitchCommand(byte cc1) {
-    // cc1 - 0|0|0|1|C|1|0|0
-    return (cc1 & 0xF7) == 0x14;
+    // cc1 - 0|0|0|1|C|1|0|F
+    return (cc1 & 0xF6) == 0x14;
   }
 
   private static final class CueBuilder {

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/cea/Cea608Decoder.java
Patch:
@@ -874,8 +874,8 @@ private static boolean isXdsControlCode(byte cc1) {
   }
 
   private static boolean isServiceSwitchCommand(byte cc1) {
-    // cc1 - 0|0|0|1|C|1|0|0
-    return (cc1 & 0xF7) == 0x14;
+    // cc1 - 0|0|0|1|C|1|0|F
+    return (cc1 & 0xF6) == 0x14;
   }
 
   private static final class CueBuilder {

File: library/core/src/main/java/com/google/android/exoplayer2/audio/TeeAudioProcessor.java
Patch:
@@ -18,6 +18,7 @@
 import static java.lang.Math.min;
 
 import androidx.annotation.Nullable;
+import androidx.media3.common.audio.AudioProcessorChain;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Log;
@@ -34,8 +35,8 @@
  * <p>This audio processor can be inserted into the audio processor chain to access audio data
  * before/after particular processing steps have been applied. For example, to get audio output
  * after playback speed adjustment and silence skipping have been applied it is necessary to pass a
- * custom {@link DefaultAudioSink.AudioProcessorChain} when creating the audio sink, and include
- * this audio processor after all other audio processors.
+ * custom {@link AudioProcessorChain} when creating the audio sink, and include this audio processor
+ * after all other audio processors.
  */
 public final class TeeAudioProcessor extends BaseAudioProcessor {
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/TeeAudioProcessor.java
Patch:
@@ -19,6 +19,7 @@
 
 import androidx.annotation.Nullable;
 import androidx.media3.common.C;
+import androidx.media3.common.audio.AudioProcessorChain;
 import androidx.media3.common.util.Assertions;
 import androidx.media3.common.util.Log;
 import androidx.media3.common.util.UnstableApi;
@@ -36,8 +37,8 @@
  * <p>This audio processor can be inserted into the audio processor chain to access audio data
  * before/after particular processing steps have been applied. For example, to get audio output
  * after playback speed adjustment and silence skipping have been applied it is necessary to pass a
- * custom {@link DefaultAudioSink.AudioProcessorChain} when creating the audio sink, and include
- * this audio processor after all other audio processors.
+ * custom {@link AudioProcessorChain} when creating the audio sink, and include this audio processor
+ * after all other audio processors.
  */
 @UnstableApi
 public final class TeeAudioProcessor extends BaseAudioProcessor {

File: libraries/session/src/main/java/androidx/media3/session/MediaLibrarySessionImpl.java
Patch:
@@ -64,8 +64,9 @@ public MediaLibrarySessionImpl(
       Player player,
       @Nullable PendingIntent sessionActivity,
       MediaLibrarySession.Callback callback,
-      Bundle tokenExtras) {
-    super(instance, context, id, player, sessionActivity, callback, tokenExtras);
+      Bundle tokenExtras,
+      BitmapLoader bitmapLoader) {
+    super(instance, context, id, player, sessionActivity, callback, tokenExtras, bitmapLoader);
     this.instance = instance;
     this.callback = callback;
     subscriptions = new ArrayMap<>();

File: libraries/transformer/src/main/java/androidx/media3/transformer/SpeedChangingAudioProcessor.java
Patch:
@@ -105,7 +105,7 @@ public void queueInput(ByteBuffer inputBuffer) {
         endOfStreamQueuedToSonic = true;
       }
     } else {
-      ByteBuffer buffer = replaceOutputBuffer(/* count= */ inputBuffer.remaining());
+      ByteBuffer buffer = replaceOutputBuffer(/* size= */ inputBuffer.remaining());
       buffer.put(inputBuffer);
       buffer.flip();
     }

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -126,7 +126,7 @@ public static final class Builder {
      */
     public Builder(Context context) {
       this.context = context.getApplicationContext();
-      muxerFactory = new FrameworkMuxer.Factory();
+      muxerFactory = new DefaultMuxer.Factory();
       looper = Util.getCurrentOrMainLooper();
       clock = Clock.DEFAULT;
       listeners = new ListenerSet<>(looper, clock, (listener, flags) -> {});
@@ -424,7 +424,7 @@ public Builder setDebugViewProvider(DebugViewProvider debugViewProvider) {
     /**
      * Sets the factory for muxers that write the media container.
      *
-     * <p>The default value is a {@link FrameworkMuxer.Factory}.
+     * <p>The default value is a {@link DefaultMuxer.Factory}.
      *
      * @param muxerFactory A {@link Muxer.Factory}.
      * @return This builder.

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/SpeedChangingAudioProcessor.java
Patch:
@@ -105,7 +105,7 @@ public void queueInput(ByteBuffer inputBuffer) {
         endOfStreamQueuedToSonic = true;
       }
     } else {
-      ByteBuffer buffer = replaceOutputBuffer(/* count= */ inputBuffer.remaining());
+      ByteBuffer buffer = replaceOutputBuffer(/* size= */ inputBuffer.remaining());
       buffer.put(inputBuffer);
       buffer.flip();
     }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -124,7 +124,7 @@ public static final class Builder {
      */
     public Builder(Context context) {
       this.context = context.getApplicationContext();
-      muxerFactory = new FrameworkMuxer.Factory();
+      muxerFactory = new DefaultMuxer.Factory();
       looper = Util.getCurrentOrMainLooper();
       clock = Clock.DEFAULT;
       listeners = new ListenerSet<>(looper, clock, (listener, flags) -> {});
@@ -422,7 +422,7 @@ public Builder setDebugViewProvider(DebugViewProvider debugViewProvider) {
     /**
      * Sets the factory for muxers that write the media container.
      *
-     * <p>The default value is a {@link FrameworkMuxer.Factory}.
+     * <p>The default value is a {@link DefaultMuxer.Factory}.
      *
      * @param muxerFactory A {@link Muxer.Factory}.
      * @return This builder.

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/AspectRatioFrameLayout.java
Patch:
@@ -95,7 +95,7 @@ void onAspectRatioUpdated(
   @Nullable private AspectRatioListener aspectRatioListener;
 
   private float videoAspectRatio;
-  @ResizeMode private int resizeMode;
+  private @ResizeMode int resizeMode;
 
   public AspectRatioFrameLayout(Context context) {
     this(context, /* attrs= */ null);

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/CanvasSubtitleOutput.java
Patch:
@@ -37,7 +37,7 @@
   private final List<SubtitlePainter> painters;
 
   private List<Cue> cues;
-  @Cue.TextSizeType private int textSizeType;
+  private @Cue.TextSizeType int textSizeType;
   private float textSize;
   private CaptionStyleCompat style;
   private float bottomPaddingFraction;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/CaptionStyleCompat.java
Patch:
@@ -93,7 +93,7 @@ public final class CaptionStyleCompat {
    *   <li>{@link #EDGE_TYPE_DEPRESSED}
    * </ul>
    */
-  @EdgeType public final int edgeType;
+  public final @EdgeType int edgeType;
 
   /** The preferred edge color, if using an edge type other than {@link #EDGE_TYPE_NONE}. */
   public final int edgeColor;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerNotificationManager.java
Patch:
@@ -705,7 +705,7 @@ public void onBitmap(final Bitmap bitmap) {
   private int color;
   @DrawableRes private int smallIconResourceId;
   private int visibility;
-  @Priority private int priority;
+  private @Priority int priority;
   private boolean useChronometer;
   @Nullable private String groupKey;
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/SubtitleView.java
Patch:
@@ -118,7 +118,7 @@ void update(
 
   private List<Cue> cues;
   private CaptionStyleCompat style;
-  @Cue.TextSizeType private int defaultTextSizeType;
+  private @Cue.TextSizeType int defaultTextSizeType;
   private float defaultTextSize;
   private float bottomPaddingFraction;
   private boolean applyEmbeddedStyles;

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -461,8 +461,7 @@ private void onTransformationError(TransformationException exception) {
     informationTextView.setText(R.string.transformation_error);
     progressViewGroup.setVisibility(View.GONE);
     debugFrame.removeAllViews();
-    Toast.makeText(
-            TransformerActivity.this, "Transformation error: " + exception, Toast.LENGTH_LONG)
+    Toast.makeText(getApplicationContext(), "Transformation error: " + exception, Toast.LENGTH_LONG)
         .show();
     Log.e(TAG, "Transformation error", exception);
   }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/MuxerWrapper.java
Patch:
@@ -88,7 +88,8 @@ public void registerTrack() {
 
   /** Returns whether the sample {@linkplain MimeTypes MIME type} is supported. */
   public boolean supportsSampleMimeType(@Nullable String mimeType) {
-    return muxerFactory.supportsSampleMimeType(mimeType, containerMimeType);
+    @C.TrackType int trackType = MimeTypes.getTrackType(mimeType);
+    return getSupportedSampleMimeTypes(trackType).contains(mimeType);
   }
 
   /**

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/ConfigurationActivity.java
Patch:
@@ -437,7 +437,7 @@ private void selectTrimBounds(View view, boolean isChecked) {
     View dialogView = getLayoutInflater().inflate(R.layout.trim_options, /* root= */ null);
     RangeSlider trimRangeSlider =
         checkNotNull(dialogView.findViewById(R.id.trim_bounds_range_slider));
-    trimRangeSlider.setValues(0f, 60f); // seconds
+    trimRangeSlider.setValues(0f, 10f); // seconds
     new AlertDialog.Builder(/* context= */ this)
         .setView(dialogView)
         .setPositiveButton(

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -307,7 +307,7 @@ public void onTransformationError(
         .build();
   }
 
-  // Create a cache file, resetting it if it already exists.
+  /** Creates a cache file, resetting it if it already exists. */
   private File createExternalCacheFile(String fileName) throws IOException {
     File file = new File(getExternalCacheDir(), fileName);
     if (file.exists() && !file.delete()) {
@@ -505,12 +505,14 @@ private void playMediaItems(MediaItem inputMediaItem, MediaItem outputMediaItem)
 
     ExoPlayer inputPlayer = new ExoPlayer.Builder(/* context= */ this).build();
     inputPlayerView.setPlayer(inputPlayer);
+    inputPlayerView.setControllerAutoShow(false);
     inputPlayer.setMediaItem(inputMediaItem);
     inputPlayer.prepare();
     this.inputPlayer = inputPlayer;
 
     ExoPlayer outputPlayer = new ExoPlayer.Builder(/* context= */ this).build();
     outputPlayerView.setPlayer(outputPlayer);
+    outputPlayerView.setControllerAutoShow(false);
     outputPlayer.setMediaItem(outputMediaItem);
     outputPlayer.prepare();
     this.outputPlayer = outputPlayer;

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/AdaptiveTrackSelection.java
Patch:
@@ -753,7 +753,8 @@ private static long[][] getSortedTrackBitrates(@NullableType Definition[] defini
       }
       trackBitrates[i] = new long[definition.tracks.length];
       for (int j = 0; j < definition.tracks.length; j++) {
-        trackBitrates[i][j] = definition.group.getFormat(definition.tracks[j]).bitrate;
+        long bitrate = definition.group.getFormat(definition.tracks[j]).bitrate;
+        trackBitrates[i][j] = bitrate == Format.NO_VALUE ? 0 : bitrate;
       }
       Arrays.sort(trackBitrates[i]);
     }

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
Patch:
@@ -3100,6 +3100,8 @@ private static int getVideoCodecPreferenceScore(@Nullable String mimeType) {
       return 0;
     }
     switch (mimeType) {
+      case MimeTypes.VIDEO_DOLBY_VISION:
+        return 5;
       case MimeTypes.VIDEO_AV1:
         return 4;
       case MimeTypes.VIDEO_H265:

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -124,8 +124,8 @@
 public final class Util {
 
   /**
-   * Like {@link android.os.Build.VERSION#SDK_INT}, but in a place where it can be conveniently
-   * overridden for local testing.
+   * Like {@link Build.VERSION#SDK_INT}, but in a place where it can be conveniently overridden for
+   * local testing.
    */
   public static final int SDK_INT = Build.VERSION.SDK_INT;
 

File: library/common/src/main/java/com/google/android/exoplayer2/MediaItem.java
Patch:
@@ -1776,7 +1776,7 @@ private ClippingProperties(Builder builder) {
    * MediaItem}.
    *
    * <p>This metadata is most useful for cases where playback requests are forwarded to other player
-   * instances (e.g. from a {@link android.media.session.MediaController}) and the player creating
+   * instances (e.g. from a {@code androidx.media3.session.MediaController}) and the player creating
    * the request doesn't know the required {@link LocalConfiguration} for playback.
    */
   public static final class RequestMetadata implements Bundleable {

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/SetHdrEditingTransformationTest.java
Patch:
@@ -174,7 +174,7 @@ public void onFallbackApplied(
         assertThat(exception)
             .hasCauseThat()
             .hasMessageThat()
-            .isEqualTo("Tone-mapping requested but not supported by the decoder");
+            .isEqualTo("Tone-mapping requested but not supported by the decoder.");
       }
       return;
     }

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/SetHdrToSdrToneMapTransformationTest.java
Patch:
@@ -90,7 +90,7 @@ public void onFallbackApplied(
         assertThat(exception)
             .hasCauseThat()
             .hasMessageThat()
-            .isEqualTo("Tone-mapping requested but not supported by the decoder");
+            .isEqualTo("Tone-mapping requested but not supported by the decoder.");
       }
       return;
     }
@@ -147,7 +147,7 @@ public void onFallbackApplied(
         assertThat(exception)
             .hasCauseThat()
             .hasMessageThat()
-            .isEqualTo("Tone-mapping requested but not supported by the decoder");
+            .isEqualTo("Tone-mapping requested but not supported by the decoder.");
       }
       return;
     }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultCodec.java
Patch:
@@ -114,7 +114,7 @@ public DefaultCodec(
         // https://developer.android.com/reference/android/media/MediaFormat#KEY_COLOR_TRANSFER_REQUEST.
         checkArgument(
             Api29.isSdrToneMappingEnabled(mediaCodec.getInputFormat()),
-            "Tone-mapping requested but not supported by the decoder");
+            "Tone-mapping requested but not supported by the decoder.");
       }
       if (isVideo && !isDecoder) {
         inputSurface = mediaCodec.createInputSurface();

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioProcessor.java
Patch:
@@ -132,8 +132,8 @@ public UnhandledAudioFormatException(AudioFormat inputAudioFormat) {
   ByteBuffer getOutput();
 
   /**
-   * Returns whether this processor will return no more output from {@link #getOutput()} until it
-   * has been {@link #flush()}ed and more input has been queued.
+   * Returns whether this processor will return no more output from {@link #getOutput()} until
+   * {@link #flush()} has been called and more input has been queued.
    */
   boolean isEnded();
 

File: google3/third_party/java_src/android_libs/media/libraries/effect/src/main/java/androidx/media3/effect/ColorLut.java
Patch:
@@ -17,6 +17,7 @@
 package androidx.media3.effect;
 
 import android.content.Context;
+import androidx.annotation.WorkerThread;
 import androidx.media3.common.FrameProcessingException;
 import com.google.android.exoplayer2.util.GlUtil;
 
@@ -38,7 +39,9 @@ public interface ColorLut extends GlEffect {
   /** Releases the OpenGL texture of the LUT. */
   void release() throws GlUtil.GlException;
 
+  /** This method must be executed on the same thread as other GL commands. */
   @Override
+  @WorkerThread
   default ColorLutProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return new ColorLutProcessor(context, /* colorLut= */ this, useHdr);

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -1084,7 +1084,6 @@ && isLoadingPossible()) {
 
     if (sleepingForOffload || playbackInfo.playbackState == Player.STATE_ENDED) {
       // No need to schedule next work.
-      return;
     } else if (isPlaying || playbackInfo.playbackState == Player.STATE_BUFFERING) {
       // We are actively playing or waiting for data to be ready. Schedule next work quickly.
       scheduleNextWork(operationStartTimeMs, ACTIVE_INTERVAL_MS);

File: google3/third_party/java_src/android_libs/media/libraries/effect/src/androidTest/java/androidx/media3/effect/GlEffectsFrameProcessorPixelTest.java
Patch:
@@ -391,7 +391,7 @@ public void processData_fullRotationIncreaseBrightnessAndCenterCrop_producesExpe
   // TODO(b/239757183): Consider moving RgbMatrix composition tests to a new file.
   public void drawFrame_grayscaleAndIncreaseRedChannel_producesGrayscaleAndRedImage()
       throws Exception {
-    String testId = "drawFrame_grayscale";
+    String testId = "drawFrame_grayscaleAndIncreaseRedChannel";
     ImmutableList<Effect> grayscaleThenIncreaseRed =
         ImmutableList.of(
             RgbFilter.createGrayscaleFilter(), new RgbAdjustment.Builder().setRedScale(3).build());

File: library/core/src/test/java/com/google/android/exoplayer2/audio/MediaCodecAudioRendererTest.java
Patch:
@@ -153,7 +153,7 @@ public void render_configuresAudioSink_afterFormatChange() throws Exception {
         /* joining= */ false,
         /* mayRenderStartOfStream= */ false,
         /* startPositionUs= */ 0,
-        /* offsetUs */ 0);
+        /* offsetUs= */ 0);
 
     mediaCodecAudioRenderer.start();
     mediaCodecAudioRenderer.render(/* positionUs= */ 0, SystemClock.elapsedRealtime() * 1000);
@@ -210,7 +210,7 @@ public void render_configuresAudioSink_afterGaplessFormatChange() throws Excepti
         /* joining= */ false,
         /* mayRenderStartOfStream= */ false,
         /* startPositionUs= */ 0,
-        /* offsetUs */ 0);
+        /* offsetUs= */ 0);
 
     mediaCodecAudioRenderer.start();
     mediaCodecAudioRenderer.render(/* positionUs= */ 0, SystemClock.elapsedRealtime() * 1000);
@@ -284,7 +284,7 @@ protected void onOutputFormatChanged(Format format, @Nullable MediaFormat mediaF
         /* joining= */ false,
         /* mayRenderStartOfStream= */ false,
         /* startPositionUs= */ 0,
-        /* offsetUs */ 0);
+        /* offsetUs= */ 0);
 
     exceptionThrowingRenderer.start();
     exceptionThrowingRenderer.render(/* positionUs= */ 0, SystemClock.elapsedRealtime() * 1000);

File: extensions/cronet/src/test/java/com/google/android/exoplayer2/ext/cronet/CronetDataSourceTest.java
Patch:
@@ -145,7 +145,7 @@ public void setUp() {
     testResponseHeader.put("Content-Type", TEST_CONTENT_TYPE);
     // This value can be anything since the DataSpec is unset.
     testResponseHeader.put("Content-Length", Long.toString(TEST_CONTENT_LENGTH));
-    testUrlResponseInfo = createUrlResponseInfo(200); // statusCode
+    testUrlResponseInfo = createUrlResponseInfo(/* statusCode= */ 200);
   }
 
   @After

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DefaultDashChunkSourceTest.java
Patch:
@@ -95,7 +95,7 @@ public void getNextChunk_forLowLatencyManifest_setsCorrectMayNotLoadAtFullNetwor
             /* elapsedRealtimeOffsetMs= */ 0,
             /* maxSegmentsPerLoad= */ 1,
             /* enableEventMessageTrack= */ false,
-            /* closedCaptionFormats */ ImmutableList.of(),
+            /* closedCaptionFormats= */ ImmutableList.of(),
             /* playerTrackEmsgHandler= */ null,
             PlayerId.UNSET);
 
@@ -144,7 +144,7 @@ public void getNextChunk_forVodManifest_doesNotSetMayNotLoadAtFullNetworkSpeedFl
             /* elapsedRealtimeOffsetMs= */ 0,
             /* maxSegmentsPerLoad= */ 1,
             /* enableEventMessageTrack= */ false,
-            /* closedCaptionFormats */ ImmutableList.of(),
+            /* closedCaptionFormats= */ ImmutableList.of(),
             /* playerTrackEmsgHandler= */ null,
             PlayerId.UNSET);
 
@@ -328,7 +328,7 @@ private DashChunkSource createDashChunkSource(int numberOfTracks) throws IOExcep
         /* elapsedRealtimeOffsetMs= */ 0,
         /* maxSegmentsPerLoad= */ 1,
         /* enableEventMessageTrack= */ false,
-        /* closedCaptionFormats */ ImmutableList.of(),
+        /* closedCaptionFormats= */ ImmutableList.of(),
         /* playerTrackEmsgHandler= */ null,
         PlayerId.UNSET);
   }

File: library/core/src/test/java/com/google/android/exoplayer2/MediaPeriodQueueTest.java
Patch:
@@ -1081,7 +1081,7 @@ private void setupTimeline(Timeline timeline) {
     mediaSourceList.setMediaSources(
         ImmutableList.of(mediaSourceHolder), new FakeShuffleOrder(/* length= */ 1));
     mediaSourceHolder.mediaSource.prepareSource(
-        mock(MediaSourceCaller.class), /* mediaTransferListener */ null, PlayerId.UNSET);
+        mock(MediaSourceCaller.class), /* mediaTransferListener= */ null, PlayerId.UNSET);
 
     Timeline playlistTimeline = mediaSourceList.createTimeline();
     firstPeriodUid = playlistTimeline.getUidOfPeriod(/* periodIndex= */ 0);

File: library/core/src/test/java/com/google/android/exoplayer2/MediaSourceListTest.java
Patch:
@@ -371,7 +371,7 @@ public void removeMediaSources_whenPrepared_expectRelease() {
             mockMediaSource2,
             mockMediaSource3,
             mockMediaSource4);
-    mediaSourceList.prepare(/* mediaTransferListener */ null);
+    mediaSourceList.prepare(/* mediaTransferListener= */ null);
     mediaSourceList.addMediaSources(/* index= */ 0, holders, shuffleOrder);
     mediaSourceList.removeMediaSourceRange(/* fromIndex= */ 1, /* toIndex= */ 3, shuffleOrder);
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaPeriod.java
Patch:
@@ -118,7 +118,7 @@ public FakeMediaPeriod(
         mediaSourceEventDispatcher,
         DrmSessionManager.DRM_UNSUPPORTED,
         new DrmSessionEventListener.EventDispatcher(),
-        /* deferOnPrepared */ false);
+        /* deferOnPrepared= */ false);
   }
 
   /**

File: google3/third_party/java_src/android_libs/media/libraries/effect/src/main/java/androidx/media3/effect/FinalMatrixTransformationProcessorWrapper.java
Patch:
@@ -374,7 +374,7 @@ private MatrixTransformationProcessor createMatrixTransformationProcessorForOutp
             matrixTransformationListBuilder.build(),
             sampleFromExternalTexture,
             colorInfo,
-            /* outputOpticalColors= */ true);
+            /* outputElectricalColors= */ true);
     matrixTransformationProcessor.setTextureTransformMatrix(textureTransformMatrix);
     Pair<Integer, Integer> outputSize =
         matrixTransformationProcessor.configure(inputWidth, inputHeight);

File: google3/third_party/java_src/android_libs/media/libraries/effect/src/main/java/androidx/media3/effect/GlEffectsFrameProcessor.java
Patch:
@@ -210,7 +210,7 @@ private static ImmutableList<GlTextureProcessor> getGlTextureProcessorsForGlEffe
                 matrixTransformations,
                 sampleFromExternalTexture,
                 colorInfo,
-                /* outputOpticalColors= */ false));
+                /* outputElectricalColors= */ false));
         matrixTransformationListBuilder = new ImmutableList.Builder<>();
         sampleFromExternalTexture = false;
       }
@@ -240,7 +240,7 @@ private static ImmutableList<GlTextureProcessor> getGlTextureProcessorsForGlEffe
                 ImmutableList.of(),
                 sampleFromExternalTexture,
                 colorInfo,
-                /* outputOpticalColors= */ false));
+                /* outputElectricalColors= */ false));
         sampleFromExternalTexture = false;
       }
       textureProcessorListBuilder.add(

File: library/common/src/main/java/androidx/media3/common/FrameProcessor.java
Patch:
@@ -33,7 +33,7 @@
  * to the input {@link Surface}.
  */
 public interface FrameProcessor {
-  // TODO(b/238302213): Allow effects to be replaced.
+  // TODO(b/243036513): Allow effects to be replaced.
 
   /** A factory for {@link FrameProcessor} instances. */
   interface Factory {

File: google3/third_party/java_src/android_libs/media/libraries/effect/src/main/java/androidx/media3/effect/RgbMatrixProcessor.java
Patch:
@@ -30,7 +30,7 @@
  * Applies a sequence of {@link RgbMatrix} to each frame.
  *
  * <p>After applying all {@link RgbMatrix} instances, color values are clamped to the limits of the
- * color space. Intermediate reults are not clamped.
+ * color space. Intermediate results are not clamped.
  */
 /* package */ final class RgbMatrixProcessor extends SingleFrameGlTextureProcessor {
   private static final String VERTEX_SHADER_PATH = "shaders/vertex_shader_transformation_es2.glsl";

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
Patch:
@@ -111,8 +111,6 @@ public final class CastPlayer extends BasePlayer {
 
   private static final long PROGRESS_REPORT_PERIOD_MS = 1000;
   private static final long[] EMPTY_TRACK_ID_ARRAY = new long[0];
-  private static final CueGroup EMPTY_CUE_GROUP =
-      new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
 
   private final CastContext castContext;
   private final MediaItemConverter mediaItemConverter;
@@ -726,7 +724,7 @@ public VideoSize getVideoSize() {
   /** This method is not supported and returns an empty {@link CueGroup}. */
   @Override
   public CueGroup getCurrentCues() {
-    return EMPTY_CUE_GROUP;
+    return CueGroup.EMPTY_TIME_ZERO;
   }
 
   /** This method is not supported and always returns {@link DeviceInfo#UNKNOWN}. */

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -345,7 +345,7 @@ public ExoPlayerImpl(ExoPlayer.Builder builder, @Nullable Player wrappingPlayer)
       } else {
         audioSessionId = Util.generateAudioSessionIdV21(applicationContext);
       }
-      currentCueGroup = new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
+      currentCueGroup = CueGroup.EMPTY_TIME_ZERO;
       throwsWhenUsingWrongThread = true;
 
       addListener(analyticsCollector);
@@ -990,7 +990,7 @@ public void release() {
       checkNotNull(priorityTaskManager).remove(C.PRIORITY_PLAYBACK);
       isPriorityTaskManagerRegistered = false;
     }
-    currentCueGroup = new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
+    currentCueGroup = CueGroup.EMPTY_TIME_ZERO;
     playerReleased = true;
   }
 

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/FallbackListenerTest.java
Patch:
@@ -19,7 +19,6 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 import android.net.Uri;
@@ -89,7 +88,7 @@ public void onTransformationRequestFinalized_withDifferentRequest_callsCallback(
     fallbackListener.registerTrack();
     fallbackListener.onTransformationRequestFinalized(audioFallbackRequest);
 
-    verify(mockListener, times(1))
+    verify(mockListener)
         .onFallbackApplied(PLACEHOLDER_MEDIA_ITEM, originalRequest, audioFallbackRequest);
   }
 
@@ -117,7 +116,7 @@ public void onTransformationRequestFinalized_withDifferentRequest_callsCallback(
     fallbackListener.onTransformationRequestFinalized(audioFallbackRequest);
     fallbackListener.onTransformationRequestFinalized(videoFallbackRequest);
 
-    verify(mockListener, times(1))
+    verify(mockListener)
         .onFallbackApplied(PLACEHOLDER_MEDIA_ITEM, originalRequest, mergedFallbackRequest);
   }
 

File: demos/transformer/src/withMediaPipe/java/androidx/media3/demo/transformer/MediaPipeProcessor.java
Patch:
@@ -69,7 +69,6 @@ protected void loadLibrary(String name) {
    * @param inputStreamName Name of the input video stream in the graph.
    * @param outputStreamName Name of the input video stream in the graph.
    */
-  @SuppressWarnings("AndroidConcurrentHashMap") // Only used on API >= 23.
   public MediaPipeProcessor(
       Context context,
       boolean useHdr,

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -225,7 +225,7 @@ public long getSkippedOutputFrameCount() {
   }
 
   /** Provides the buffer size to use when creating an {@link AudioTrack}. */
-  interface AudioTrackBufferSizeProvider {
+  public interface AudioTrackBufferSizeProvider {
     /** Default instance. */
     AudioTrackBufferSizeProvider DEFAULT =
         new DefaultAudioTrackBufferSizeProvider.Builder().build();

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformationException.java
Patch:
@@ -23,6 +23,7 @@
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
 import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.FrameProcessor;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.audio.AudioProcessor;
@@ -273,7 +274,7 @@ public static TransformationException createForAudioProcessor(
   }
 
   /**
-   * Creates an instance for a {@link GlEffectsFrameProcessor} related exception.
+   * Creates an instance for a {@link FrameProcessor} related exception.
    *
    * @param cause The cause of the failure.
    * @param errorCode See {@link #errorCode}.

File: google3/third_party/java_src/android_libs/media/libraries/effect/src/main/java/androidx/media3/effect/FinalMatrixTransformationProcessorWrapper.java
Patch:
@@ -79,7 +79,7 @@
   @Nullable private SurfaceViewWrapper debugSurfaceViewWrapper;
   private @MonotonicNonNull Listener listener;
   private @MonotonicNonNull Pair<Integer, Integer> outputSizeBeforeSurfaceTransformation;
-  private @MonotonicNonNull SurfaceView debugSurfaceView;
+  @Nullable private SurfaceView debugSurfaceView;
 
   private volatile boolean outputSizeOrRotationChanged;
 
@@ -229,6 +229,7 @@ private synchronized boolean ensureConfigured(int inputWidth, int inputHeight)
         debugSurfaceViewWrapper =
             new SurfaceViewWrapper(eglDisplay, eglContext, useHdr, debugSurfaceView);
       }
+      this.debugSurfaceView = debugSurfaceView;
     }
 
     if (matrixTransformationProcessor != null && outputSizeOrRotationChanged) {

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -1022,6 +1022,7 @@ private C() {}
    */
   public static final int STEREO_MODE_STEREO_MESH = 3;
 
+  // LINT.IfChange(color_space)
   /**
    * Video colorspaces. One of {@link Format#NO_VALUE}, {@link #COLOR_SPACE_BT709}, {@link
    * #COLOR_SPACE_BT601} or {@link #COLOR_SPACE_BT2020}.
@@ -1044,6 +1045,7 @@ private C() {}
    */
   public static final int COLOR_SPACE_BT2020 = MediaFormat.COLOR_STANDARD_BT2020;
 
+  // LINT.IfChange(color_transfer)
   /**
    * Video color transfer characteristics. One of {@link Format#NO_VALUE}, {@link
    * #COLOR_TRANSFER_SDR}, {@link #COLOR_TRANSFER_ST2084} or {@link #COLOR_TRANSFER_HLG}.
@@ -1066,6 +1068,7 @@ private C() {}
    */
   public static final int COLOR_TRANSFER_HLG = MediaFormat.COLOR_TRANSFER_HLG;
 
+  // LINT.IfChange(color_range)
   /**
    * Video color range. One of {@link Format#NO_VALUE}, {@link #COLOR_RANGE_LIMITED} or {@link
    * #COLOR_RANGE_FULL}.

File: library/common/src/main/java/com/google/android/exoplayer2/video/ColorInfo.java
Patch:
@@ -78,7 +78,9 @@ public final class ColorInfo implements Bundleable {
 
   /** Returns whether the {@code ColorInfo} uses an HDR {@link C.ColorTransfer}. */
   public static boolean isHdr(@Nullable ColorInfo colorInfo) {
-    return colorInfo != null && colorInfo.colorTransfer != C.COLOR_TRANSFER_SDR;
+    return colorInfo != null
+        && colorInfo.colorTransfer != Format.NO_VALUE
+        && colorInfo.colorTransfer != C.COLOR_TRANSFER_SDR;
   }
 
   /**

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpVp8Reader.java
Patch:
@@ -214,7 +214,7 @@ private void outputSampleMetadataForFragmentedPackets() {
             fragmentedSampleSizeBytes,
             /* offset= */ 0,
             /* cryptoData= */ null);
-    fragmentedSampleSizeBytes = 0;
+    fragmentedSampleSizeBytes = C.LENGTH_UNSET;
     fragmentedSampleTimeUs = C.TIME_UNSET;
     gotFirstPacketOfVp8Frame = false;
   }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -120,7 +120,7 @@ public void onOutputSizeChanged(int width, int height) {
                 public void onFrameProcessingError(FrameProcessingException exception) {
                   asyncErrorListener.onTransformationException(
                       TransformationException.createForFrameProcessingException(
-                          exception, TransformationException.ERROR_CODE_GL_PROCESSING_FAILED));
+                          exception, TransformationException.ERROR_CODE_FRAME_PROCESSING_FAILED));
                 }
 
                 @Override
@@ -140,7 +140,7 @@ public void onFrameProcessingEnded() {
               /* useHdr= */ encoderWrapper.isHdrEditingEnabled());
     } catch (FrameProcessingException e) {
       throw TransformationException.createForFrameProcessingException(
-          e, TransformationException.ERROR_CODE_GL_INIT_FAILED);
+          e, TransformationException.ERROR_CODE_FRAME_PROCESSING_FAILED);
     }
     frameProcessor.setInputFrameInfo(
         new FrameInfo(

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/SpeedChangingAudioProcessor.java
Patch:
@@ -105,7 +105,7 @@ public void queueInput(ByteBuffer inputBuffer) {
         endOfStreamQueuedToSonic = true;
       }
     } else {
-      ByteBuffer buffer = replaceOutputBuffer(/* count= */ inputBuffer.remaining());
+      ByteBuffer buffer = replaceOutputBuffer(/* size= */ inputBuffer.remaining());
       buffer.put(inputBuffer);
       buffer.flip();
     }

File: libraries/transformer/src/main/java/androidx/media3/transformer/SpeedChangingAudioProcessor.java
Patch:
@@ -105,7 +105,7 @@ public void queueInput(ByteBuffer inputBuffer) {
         endOfStreamQueuedToSonic = true;
       }
     } else {
-      ByteBuffer buffer = replaceOutputBuffer(/* count= */ inputBuffer.remaining());
+      ByteBuffer buffer = replaceOutputBuffer(/* size= */ inputBuffer.remaining());
       buffer.put(inputBuffer);
       buffer.flip();
     }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -124,7 +124,7 @@ public static final class Builder {
      */
     public Builder(Context context) {
       this.context = context.getApplicationContext();
-      muxerFactory = new FrameworkMuxer.Factory();
+      muxerFactory = new DefaultMuxer.Factory();
       looper = Util.getCurrentOrMainLooper();
       clock = Clock.DEFAULT;
       listeners = new ListenerSet<>(looper, clock, (listener, flags) -> {});
@@ -422,7 +422,7 @@ public Builder setDebugViewProvider(DebugViewProvider debugViewProvider) {
     /**
      * Sets the factory for muxers that write the media container.
      *
-     * <p>The default value is a {@link FrameworkMuxer.Factory}.
+     * <p>The default value is a {@link DefaultMuxer.Factory}.
      *
      * @param muxerFactory A {@link Muxer.Factory}.
      * @return This builder.

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -126,7 +126,7 @@ public static final class Builder {
      */
     public Builder(Context context) {
       this.context = context.getApplicationContext();
-      muxerFactory = new FrameworkMuxer.Factory();
+      muxerFactory = new DefaultMuxer.Factory();
       looper = Util.getCurrentOrMainLooper();
       clock = Clock.DEFAULT;
       listeners = new ListenerSet<>(looper, clock, (listener, flags) -> {});
@@ -424,7 +424,7 @@ public Builder setDebugViewProvider(DebugViewProvider debugViewProvider) {
     /**
      * Sets the factory for muxers that write the media container.
      *
-     * <p>The default value is a {@link FrameworkMuxer.Factory}.
+     * <p>The default value is a {@link DefaultMuxer.Factory}.
      *
      * @param muxerFactory A {@link Muxer.Factory}.
      * @return This builder.

File: libraries/ui/src/main/java/androidx/media3/ui/AspectRatioFrameLayout.java
Patch:
@@ -97,7 +97,7 @@ void onAspectRatioUpdated(
   @Nullable private AspectRatioListener aspectRatioListener;
 
   private float videoAspectRatio;
-  @ResizeMode private int resizeMode;
+  private @ResizeMode int resizeMode;
 
   public AspectRatioFrameLayout(Context context) {
     this(context, /* attrs= */ null);

File: libraries/ui/src/main/java/androidx/media3/ui/CanvasSubtitleOutput.java
Patch:
@@ -37,7 +37,7 @@
   private final List<SubtitlePainter> painters;
 
   private List<Cue> cues;
-  @Cue.TextSizeType private int textSizeType;
+  private @Cue.TextSizeType int textSizeType;
   private float textSize;
   private CaptionStyleCompat style;
   private float bottomPaddingFraction;

File: libraries/ui/src/main/java/androidx/media3/ui/CaptionStyleCompat.java
Patch:
@@ -95,7 +95,7 @@ public final class CaptionStyleCompat {
    *   <li>{@link #EDGE_TYPE_DEPRESSED}
    * </ul>
    */
-  @EdgeType public final int edgeType;
+  public final @EdgeType int edgeType;
 
   /** The preferred edge color, if using an edge type other than {@link #EDGE_TYPE_NONE}. */
   public final int edgeColor;

File: libraries/ui/src/main/java/androidx/media3/ui/PlayerNotificationManager.java
Patch:
@@ -707,7 +707,7 @@ public void onBitmap(final Bitmap bitmap) {
   private int color;
   @DrawableRes private int smallIconResourceId;
   private int visibility;
-  @Priority private int priority;
+  private @Priority int priority;
   private boolean useChronometer;
   @Nullable private String groupKey;
 

File: libraries/ui/src/main/java/androidx/media3/ui/SubtitleView.java
Patch:
@@ -120,7 +120,7 @@ void update(
 
   private List<Cue> cues;
   private CaptionStyleCompat style;
-  @Cue.TextSizeType private int defaultTextSizeType;
+  private @Cue.TextSizeType int defaultTextSizeType;
   private float defaultTextSize;
   private float bottomPaddingFraction;
   private boolean applyEmbeddedStyles;

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -460,8 +460,7 @@ private void onTransformationError(TransformationException exception) {
     informationTextView.setText(R.string.transformation_error);
     progressViewGroup.setVisibility(View.GONE);
     debugFrame.removeAllViews();
-    Toast.makeText(
-            TransformerActivity.this, "Transformation error: " + exception, Toast.LENGTH_LONG)
+    Toast.makeText(getApplicationContext(), "Transformation error: " + exception, Toast.LENGTH_LONG)
         .show();
     Log.e(TAG, "Transformation error", exception);
   }

File: libraries/transformer/src/main/java/androidx/media3/transformer/MuxerWrapper.java
Patch:
@@ -88,7 +88,8 @@ public void registerTrack() {
 
   /** Returns whether the sample {@linkplain MimeTypes MIME type} is supported. */
   public boolean supportsSampleMimeType(@Nullable String mimeType) {
-    return muxerFactory.supportsSampleMimeType(mimeType, containerMimeType);
+    @C.TrackType int trackType = MimeTypes.getTrackType(mimeType);
+    return getSupportedSampleMimeTypes(trackType).contains(mimeType);
   }
 
   /**

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/ConfigurationActivity.java
Patch:
@@ -437,7 +437,7 @@ private void selectTrimBounds(View view, boolean isChecked) {
     View dialogView = getLayoutInflater().inflate(R.layout.trim_options, /* root= */ null);
     RangeSlider trimRangeSlider =
         checkNotNull(dialogView.findViewById(R.id.trim_bounds_range_slider));
-    trimRangeSlider.setValues(0f, 60f); // seconds
+    trimRangeSlider.setValues(0f, 10f); // seconds
     new AlertDialog.Builder(/* context= */ this)
         .setView(dialogView)
         .setPositiveButton(

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -307,7 +307,7 @@ public void onTransformationError(
         .build();
   }
 
-  // Create a cache file, resetting it if it already exists.
+  /** Creates a cache file, resetting it if it already exists. */
   private File createExternalCacheFile(String fileName) throws IOException {
     File file = new File(getExternalCacheDir(), fileName);
     if (file.exists() && !file.delete()) {
@@ -504,12 +504,14 @@ private void playMediaItems(MediaItem inputMediaItem, MediaItem outputMediaItem)
 
     ExoPlayer inputPlayer = new ExoPlayer.Builder(/* context= */ this).build();
     inputPlayerView.setPlayer(inputPlayer);
+    inputPlayerView.setControllerAutoShow(false);
     inputPlayer.setMediaItem(inputMediaItem);
     inputPlayer.prepare();
     this.inputPlayer = inputPlayer;
 
     ExoPlayer outputPlayer = new ExoPlayer.Builder(/* context= */ this).build();
     outputPlayerView.setPlayer(outputPlayer);
+    outputPlayerView.setControllerAutoShow(false);
     outputPlayer.setMediaItem(outputMediaItem);
     outputPlayer.prepare();
     this.outputPlayer = outputPlayer;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/AdaptiveTrackSelection.java
Patch:
@@ -755,7 +755,8 @@ private static long[][] getSortedTrackBitrates(@NullableType Definition[] defini
       }
       trackBitrates[i] = new long[definition.tracks.length];
       for (int j = 0; j < definition.tracks.length; j++) {
-        trackBitrates[i][j] = definition.group.getFormat(definition.tracks[j]).bitrate;
+        long bitrate = definition.group.getFormat(definition.tracks[j]).bitrate;
+        trackBitrates[i][j] = bitrate == Format.NO_VALUE ? 0 : bitrate;
       }
       Arrays.sort(trackBitrates[i]);
     }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/DefaultTrackSelector.java
Patch:
@@ -3107,6 +3107,8 @@ private static int getVideoCodecPreferenceScore(@Nullable String mimeType) {
       return 0;
     }
     switch (mimeType) {
+      case MimeTypes.VIDEO_DOLBY_VISION:
+        return 5;
       case MimeTypes.VIDEO_AV1:
         return 4;
       case MimeTypes.VIDEO_H265:

File: libraries/common/src/main/java/androidx/media3/common/util/Util.java
Patch:
@@ -125,8 +125,8 @@
 public final class Util {
 
   /**
-   * Like {@link android.os.Build.VERSION#SDK_INT}, but in a place where it can be conveniently
-   * overridden for local testing.
+   * Like {@link Build.VERSION#SDK_INT}, but in a place where it can be conveniently overridden for
+   * local testing.
    */
   @UnstableApi public static final int SDK_INT = Build.VERSION.SDK_INT;
 

File: libraries/session/src/main/java/androidx/media3/session/MediaController.java
Patch:
@@ -89,7 +89,7 @@
  *
  * <p>When a controller is created with the {@link SessionToken} for a {@link MediaSession} (i.e.
  * session token type is {@link SessionToken#TYPE_SESSION}), the controller will connect to the
- * specific session.F
+ * specific session.
  *
  * <p>When a controller is created with the {@link SessionToken} for a {@link MediaSessionService}
  * (i.e. session token type is {@link SessionToken#TYPE_SESSION_SERVICE} or {@link

File: libraries/common/src/main/java/androidx/media3/common/MediaItem.java
Patch:
@@ -1815,7 +1815,7 @@ private ClippingProperties(Builder builder) {
    * MediaItem}.
    *
    * <p>This metadata is most useful for cases where playback requests are forwarded to other player
-   * instances (e.g. from a {@link android.media.session.MediaController}) and the player creating
+   * instances (e.g. from a {@code androidx.media3.session.MediaController}) and the player creating
    * the request doesn't know the required {@link LocalConfiguration} for playback.
    */
   public static final class RequestMetadata implements Bundleable {

File: libraries/ui/src/main/java/androidx/media3/ui/AspectRatioFrameLayout.java
Patch:
@@ -97,7 +97,7 @@ void onAspectRatioUpdated(
   @Nullable private AspectRatioListener aspectRatioListener;
 
   private float videoAspectRatio;
-  @ResizeMode private int resizeMode;
+  private @ResizeMode int resizeMode;
 
   public AspectRatioFrameLayout(Context context) {
     this(context, /* attrs= */ null);

File: libraries/ui/src/main/java/androidx/media3/ui/CanvasSubtitleOutput.java
Patch:
@@ -37,7 +37,7 @@
   private final List<SubtitlePainter> painters;
 
   private List<Cue> cues;
-  @Cue.TextSizeType private int textSizeType;
+  private @Cue.TextSizeType int textSizeType;
   private float textSize;
   private CaptionStyleCompat style;
   private float bottomPaddingFraction;

File: libraries/ui/src/main/java/androidx/media3/ui/CaptionStyleCompat.java
Patch:
@@ -95,7 +95,7 @@ public final class CaptionStyleCompat {
    *   <li>{@link #EDGE_TYPE_DEPRESSED}
    * </ul>
    */
-  @EdgeType public final int edgeType;
+  public final @EdgeType int edgeType;
 
   /** The preferred edge color, if using an edge type other than {@link #EDGE_TYPE_NONE}. */
   public final int edgeColor;

File: libraries/ui/src/main/java/androidx/media3/ui/PlayerNotificationManager.java
Patch:
@@ -707,7 +707,7 @@ public void onBitmap(final Bitmap bitmap) {
   private int color;
   @DrawableRes private int smallIconResourceId;
   private int visibility;
-  @Priority private int priority;
+  private @Priority int priority;
   private boolean useChronometer;
   @Nullable private String groupKey;
 

File: libraries/ui/src/main/java/androidx/media3/ui/SubtitleView.java
Patch:
@@ -120,7 +120,7 @@ void update(
 
   private List<Cue> cues;
   private CaptionStyleCompat style;
-  @Cue.TextSizeType private int defaultTextSizeType;
+  private @Cue.TextSizeType int defaultTextSizeType;
   private float defaultTextSize;
   private float bottomPaddingFraction;
   private boolean applyEmbeddedStyles;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/AspectRatioFrameLayout.java
Patch:
@@ -95,7 +95,7 @@ void onAspectRatioUpdated(
   @Nullable private AspectRatioListener aspectRatioListener;
 
   private float videoAspectRatio;
-  @ResizeMode private int resizeMode;
+  private @ResizeMode int resizeMode;
 
   public AspectRatioFrameLayout(Context context) {
     this(context, /* attrs= */ null);

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/CanvasSubtitleOutput.java
Patch:
@@ -37,7 +37,7 @@
   private final List<SubtitlePainter> painters;
 
   private List<Cue> cues;
-  @Cue.TextSizeType private int textSizeType;
+  private @Cue.TextSizeType int textSizeType;
   private float textSize;
   private CaptionStyleCompat style;
   private float bottomPaddingFraction;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/CaptionStyleCompat.java
Patch:
@@ -93,7 +93,7 @@ public final class CaptionStyleCompat {
    *   <li>{@link #EDGE_TYPE_DEPRESSED}
    * </ul>
    */
-  @EdgeType public final int edgeType;
+  public final @EdgeType int edgeType;
 
   /** The preferred edge color, if using an edge type other than {@link #EDGE_TYPE_NONE}. */
   public final int edgeColor;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerNotificationManager.java
Patch:
@@ -705,7 +705,7 @@ public void onBitmap(final Bitmap bitmap) {
   private int color;
   @DrawableRes private int smallIconResourceId;
   private int visibility;
-  @Priority private int priority;
+  private @Priority int priority;
   private boolean useChronometer;
   @Nullable private String groupKey;
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/SubtitleView.java
Patch:
@@ -118,7 +118,7 @@ void update(
 
   private List<Cue> cues;
   private CaptionStyleCompat style;
-  @Cue.TextSizeType private int defaultTextSizeType;
+  private @Cue.TextSizeType int defaultTextSizeType;
   private float defaultTextSize;
   private float bottomPaddingFraction;
   private boolean applyEmbeddedStyles;

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -460,8 +460,7 @@ private void onTransformationError(TransformationException exception) {
     informationTextView.setText(R.string.transformation_error);
     progressViewGroup.setVisibility(View.GONE);
     debugFrame.removeAllViews();
-    Toast.makeText(
-            TransformerActivity.this, "Transformation error: " + exception, Toast.LENGTH_LONG)
+    Toast.makeText(getApplicationContext(), "Transformation error: " + exception, Toast.LENGTH_LONG)
         .show();
     Log.e(TAG, "Transformation error", exception);
   }

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -461,8 +461,7 @@ private void onTransformationError(TransformationException exception) {
     informationTextView.setText(R.string.transformation_error);
     progressViewGroup.setVisibility(View.GONE);
     debugFrame.removeAllViews();
-    Toast.makeText(
-            TransformerActivity.this, "Transformation error: " + exception, Toast.LENGTH_LONG)
+    Toast.makeText(getApplicationContext(), "Transformation error: " + exception, Toast.LENGTH_LONG)
         .show();
     Log.e(TAG, "Transformation error", exception);
   }

File: libraries/transformer/src/main/java/androidx/media3/transformer/MuxerWrapper.java
Patch:
@@ -88,7 +88,8 @@ public void registerTrack() {
 
   /** Returns whether the sample {@linkplain MimeTypes MIME type} is supported. */
   public boolean supportsSampleMimeType(@Nullable String mimeType) {
-    return muxerFactory.supportsSampleMimeType(mimeType, containerMimeType);
+    @C.TrackType int trackType = MimeTypes.getTrackType(mimeType);
+    return getSupportedSampleMimeTypes(trackType).contains(mimeType);
   }
 
   /**

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/MuxerWrapper.java
Patch:
@@ -88,7 +88,8 @@ public void registerTrack() {
 
   /** Returns whether the sample {@linkplain MimeTypes MIME type} is supported. */
   public boolean supportsSampleMimeType(@Nullable String mimeType) {
-    return muxerFactory.supportsSampleMimeType(mimeType, containerMimeType);
+    @C.TrackType int trackType = MimeTypes.getTrackType(mimeType);
+    return getSupportedSampleMimeTypes(trackType).contains(mimeType);
   }
 
   /**

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/ConfigurationActivity.java
Patch:
@@ -437,7 +437,7 @@ private void selectTrimBounds(View view, boolean isChecked) {
     View dialogView = getLayoutInflater().inflate(R.layout.trim_options, /* root= */ null);
     RangeSlider trimRangeSlider =
         checkNotNull(dialogView.findViewById(R.id.trim_bounds_range_slider));
-    trimRangeSlider.setValues(0f, 60f); // seconds
+    trimRangeSlider.setValues(0f, 10f); // seconds
     new AlertDialog.Builder(/* context= */ this)
         .setView(dialogView)
         .setPositiveButton(

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/ConfigurationActivity.java
Patch:
@@ -437,7 +437,7 @@ private void selectTrimBounds(View view, boolean isChecked) {
     View dialogView = getLayoutInflater().inflate(R.layout.trim_options, /* root= */ null);
     RangeSlider trimRangeSlider =
         checkNotNull(dialogView.findViewById(R.id.trim_bounds_range_slider));
-    trimRangeSlider.setValues(0f, 60f); // seconds
+    trimRangeSlider.setValues(0f, 10f); // seconds
     new AlertDialog.Builder(/* context= */ this)
         .setView(dialogView)
         .setPositiveButton(

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -307,7 +307,7 @@ public void onTransformationError(
         .build();
   }
 
-  // Create a cache file, resetting it if it already exists.
+  /** Creates a cache file, resetting it if it already exists. */
   private File createExternalCacheFile(String fileName) throws IOException {
     File file = new File(getExternalCacheDir(), fileName);
     if (file.exists() && !file.delete()) {
@@ -504,12 +504,14 @@ private void playMediaItems(MediaItem inputMediaItem, MediaItem outputMediaItem)
 
     ExoPlayer inputPlayer = new ExoPlayer.Builder(/* context= */ this).build();
     inputPlayerView.setPlayer(inputPlayer);
+    inputPlayerView.setControllerAutoShow(false);
     inputPlayer.setMediaItem(inputMediaItem);
     inputPlayer.prepare();
     this.inputPlayer = inputPlayer;
 
     ExoPlayer outputPlayer = new ExoPlayer.Builder(/* context= */ this).build();
     outputPlayerView.setPlayer(outputPlayer);
+    outputPlayerView.setControllerAutoShow(false);
     outputPlayer.setMediaItem(outputMediaItem);
     outputPlayer.prepare();
     this.outputPlayer = outputPlayer;

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -307,7 +307,7 @@ public void onTransformationError(
         .build();
   }
 
-  // Create a cache file, resetting it if it already exists.
+  /** Creates a cache file, resetting it if it already exists. */
   private File createExternalCacheFile(String fileName) throws IOException {
     File file = new File(getExternalCacheDir(), fileName);
     if (file.exists() && !file.delete()) {
@@ -505,12 +505,14 @@ private void playMediaItems(MediaItem inputMediaItem, MediaItem outputMediaItem)
 
     ExoPlayer inputPlayer = new ExoPlayer.Builder(/* context= */ this).build();
     inputPlayerView.setPlayer(inputPlayer);
+    inputPlayerView.setControllerAutoShow(false);
     inputPlayer.setMediaItem(inputMediaItem);
     inputPlayer.prepare();
     this.inputPlayer = inputPlayer;
 
     ExoPlayer outputPlayer = new ExoPlayer.Builder(/* context= */ this).build();
     outputPlayerView.setPlayer(outputPlayer);
+    outputPlayerView.setControllerAutoShow(false);
     outputPlayer.setMediaItem(outputMediaItem);
     outputPlayer.prepare();
     this.outputPlayer = outputPlayer;

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/AdaptiveTrackSelection.java
Patch:
@@ -753,7 +753,8 @@ private static long[][] getSortedTrackBitrates(@NullableType Definition[] defini
       }
       trackBitrates[i] = new long[definition.tracks.length];
       for (int j = 0; j < definition.tracks.length; j++) {
-        trackBitrates[i][j] = definition.group.getFormat(definition.tracks[j]).bitrate;
+        long bitrate = definition.group.getFormat(definition.tracks[j]).bitrate;
+        trackBitrates[i][j] = bitrate == Format.NO_VALUE ? 0 : bitrate;
       }
       Arrays.sort(trackBitrates[i]);
     }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/AdaptiveTrackSelection.java
Patch:
@@ -755,7 +755,8 @@ private static long[][] getSortedTrackBitrates(@NullableType Definition[] defini
       }
       trackBitrates[i] = new long[definition.tracks.length];
       for (int j = 0; j < definition.tracks.length; j++) {
-        trackBitrates[i][j] = definition.group.getFormat(definition.tracks[j]).bitrate;
+        long bitrate = definition.group.getFormat(definition.tracks[j]).bitrate;
+        trackBitrates[i][j] = bitrate == Format.NO_VALUE ? 0 : bitrate;
       }
       Arrays.sort(trackBitrates[i]);
     }

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
Patch:
@@ -3100,6 +3100,8 @@ private static int getVideoCodecPreferenceScore(@Nullable String mimeType) {
       return 0;
     }
     switch (mimeType) {
+      case MimeTypes.VIDEO_DOLBY_VISION:
+        return 5;
       case MimeTypes.VIDEO_AV1:
         return 4;
       case MimeTypes.VIDEO_H265:

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/DefaultTrackSelector.java
Patch:
@@ -3107,6 +3107,8 @@ private static int getVideoCodecPreferenceScore(@Nullable String mimeType) {
       return 0;
     }
     switch (mimeType) {
+      case MimeTypes.VIDEO_DOLBY_VISION:
+        return 5;
       case MimeTypes.VIDEO_AV1:
         return 4;
       case MimeTypes.VIDEO_H265:

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -124,8 +124,8 @@
 public final class Util {
 
   /**
-   * Like {@link android.os.Build.VERSION#SDK_INT}, but in a place where it can be conveniently
-   * overridden for local testing.
+   * Like {@link Build.VERSION#SDK_INT}, but in a place where it can be conveniently overridden for
+   * local testing.
    */
   public static final int SDK_INT = Build.VERSION.SDK_INT;
 

File: libraries/common/src/main/java/androidx/media3/common/util/Util.java
Patch:
@@ -125,8 +125,8 @@
 public final class Util {
 
   /**
-   * Like {@link android.os.Build.VERSION#SDK_INT}, but in a place where it can be conveniently
-   * overridden for local testing.
+   * Like {@link Build.VERSION#SDK_INT}, but in a place where it can be conveniently overridden for
+   * local testing.
    */
   @UnstableApi public static final int SDK_INT = Build.VERSION.SDK_INT;
 

File: libraries/session/src/main/java/androidx/media3/session/MediaController.java
Patch:
@@ -89,7 +89,7 @@
  *
  * <p>When a controller is created with the {@link SessionToken} for a {@link MediaSession} (i.e.
  * session token type is {@link SessionToken#TYPE_SESSION}), the controller will connect to the
- * specific session.F
+ * specific session.
  *
  * <p>When a controller is created with the {@link SessionToken} for a {@link MediaSessionService}
  * (i.e. session token type is {@link SessionToken#TYPE_SESSION_SERVICE} or {@link

File: library/common/src/main/java/com/google/android/exoplayer2/MediaItem.java
Patch:
@@ -1776,7 +1776,7 @@ private ClippingProperties(Builder builder) {
    * MediaItem}.
    *
    * <p>This metadata is most useful for cases where playback requests are forwarded to other player
-   * instances (e.g. from a {@link android.media.session.MediaController}) and the player creating
+   * instances (e.g. from a {@code androidx.media3.session.MediaController}) and the player creating
    * the request doesn't know the required {@link LocalConfiguration} for playback.
    */
   public static final class RequestMetadata implements Bundleable {

File: libraries/common/src/main/java/androidx/media3/common/MediaItem.java
Patch:
@@ -1815,7 +1815,7 @@ private ClippingProperties(Builder builder) {
    * MediaItem}.
    *
    * <p>This metadata is most useful for cases where playback requests are forwarded to other player
-   * instances (e.g. from a {@link android.media.session.MediaController}) and the player creating
+   * instances (e.g. from a {@code androidx.media3.session.MediaController}) and the player creating
    * the request doesn't know the required {@link LocalConfiguration} for playback.
    */
   public static final class RequestMetadata implements Bundleable {

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaTrack.java
Patch:
@@ -217,8 +217,9 @@ public int hashCode() {
               PARAMETER_MP4A_C_PRESENT).equals("0")) {
             isConfigPresent  = false;
           }
+          checkArgument(!isConfigPresent, "cpresent == 0 means we need to parse config");
           @Nullable String configInput = fmtpParameters.get(PARAMETER_MP4V_CONFIG);
-          if (!isConfigPresent  && configInput != null && configInput.length() % 2 == 0) {
+          if (configInput != null && configInput.length() % 2 == 0) {
             Pair<Integer, Integer> configParameters = getSampleRateAndChannelCount(configInput);
             channelCount = configParameters.first;
             clockRate = configParameters.second;

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/SetHdrEditingTransformationTest.java
Patch:
@@ -174,7 +174,7 @@ public void onFallbackApplied(
         assertThat(exception)
             .hasCauseThat()
             .hasMessageThat()
-            .isEqualTo("Tone-mapping requested but not supported by the decoder");
+            .isEqualTo("Tone-mapping requested but not supported by the decoder.");
       }
       return;
     }

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/SetHdrToSdrToneMapTransformationTest.java
Patch:
@@ -90,7 +90,7 @@ public void onFallbackApplied(
         assertThat(exception)
             .hasCauseThat()
             .hasMessageThat()
-            .isEqualTo("Tone-mapping requested but not supported by the decoder");
+            .isEqualTo("Tone-mapping requested but not supported by the decoder.");
       }
       return;
     }
@@ -147,7 +147,7 @@ public void onFallbackApplied(
         assertThat(exception)
             .hasCauseThat()
             .hasMessageThat()
-            .isEqualTo("Tone-mapping requested but not supported by the decoder");
+            .isEqualTo("Tone-mapping requested but not supported by the decoder.");
       }
       return;
     }

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultCodec.java
Patch:
@@ -116,7 +116,7 @@ public DefaultCodec(
         // https://developer.android.com/reference/android/media/MediaFormat#KEY_COLOR_TRANSFER_REQUEST.
         checkArgument(
             Api29.isSdrToneMappingEnabled(mediaCodec.getInputFormat()),
-            "Tone-mapping requested but not supported by the decoder");
+            "Tone-mapping requested but not supported by the decoder.");
       }
       if (isVideo && !isDecoder) {
         inputSurface = mediaCodec.createInputSurface();

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioProcessor.java
Patch:
@@ -134,8 +134,8 @@ public UnhandledAudioFormatException(AudioFormat inputAudioFormat) {
   ByteBuffer getOutput();
 
   /**
-   * Returns whether this processor will return no more output from {@link #getOutput()} until it
-   * has been {@link #flush()}ed and more input has been queued.
+   * Returns whether this processor will return no more output from {@link #getOutput()} until
+   * {@link #flush()} has been called and more input has been queued.
    */
   boolean isEnded();
 

File: libraries/test_session_common/src/main/java/androidx/media3/test/session/common/MediaBrowserConstants.java
Patch:
@@ -30,7 +30,6 @@ public class MediaBrowserConstants {
   public static final String MEDIA_ID_GET_BROWSABLE_ITEM = "media_id_get_browsable_item";
   public static final String MEDIA_ID_GET_PLAYABLE_ITEM = "media_id_get_playable_item";
   public static final String MEDIA_ID_GET_ITEM_WITH_METADATA = "media_id_get_item_with_metadata";
-  public static final String MEDIA_ID_GET_NULL_ITEM = "media_id_get_null_item";
 
   public static final String PARENT_ID = "parent_id";
   public static final String PARENT_ID_LONG_LIST = "parent_id_long_list";

File: libraries/effect/src/main/java/androidx/media3/effect/ColorLut.java
Patch:
@@ -17,6 +17,7 @@
 package androidx.media3.effect;
 
 import android.content.Context;
+import androidx.annotation.WorkerThread;
 import androidx.media3.common.FrameProcessingException;
 import androidx.media3.common.util.GlUtil;
 import androidx.media3.common.util.UnstableApi;
@@ -40,7 +41,9 @@ public interface ColorLut extends GlEffect {
   /** Releases the OpenGL texture of the LUT. */
   void release() throws GlUtil.GlException;
 
+  /** This method must be executed on the same thread as other GL commands. */
   @Override
+  @WorkerThread
   default ColorLutProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return new ColorLutProcessor(context, /* colorLut= */ this, useHdr);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayerImplInternal.java
Patch:
@@ -1092,7 +1092,6 @@ && isLoadingPossible()) {
 
     if (sleepingForOffload || playbackInfo.playbackState == Player.STATE_ENDED) {
       // No need to schedule next work.
-      return;
     } else if (isPlaying || playbackInfo.playbackState == Player.STATE_BUFFERING) {
       // We are actively playing or waiting for data to be ready. Schedule next work quickly.
       scheduleNextWork(operationStartTimeMs, ACTIVE_INTERVAL_MS);

File: libraries/effect/src/androidTest/java/androidx/media3/effect/GlEffectsFrameProcessorPixelTest.java
Patch:
@@ -391,7 +391,7 @@ public void processData_fullRotationIncreaseBrightnessAndCenterCrop_producesExpe
   // TODO(b/239757183): Consider moving RgbMatrix composition tests to a new file.
   public void drawFrame_grayscaleAndIncreaseRedChannel_producesGrayscaleAndRedImage()
       throws Exception {
-    String testId = "drawFrame_grayscale";
+    String testId = "drawFrame_grayscaleAndIncreaseRedChannel";
     ImmutableList<Effect> grayscaleThenIncreaseRed =
         ImmutableList.of(
             RgbFilter.createGrayscaleFilter(), new RgbAdjustment.Builder().setRedScale(3).build());

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaControllerListenerTest.java
Patch:
@@ -1899,10 +1899,10 @@ public ListenableFuture<SessionResult> onCustomCommand(
     controllerTestRule.createController(
         remoteSession.getToken(), /* connectionHints= */ null, listener);
 
-    // TODO(jaewan): Test with multiple controllers
+    // TODO(b/245724167): Test with multiple controllers
     remoteSession.broadcastCustomCommand(testCommand, testArgs);
 
-    // TODO(jaewan): Test receivers as well.
+    // TODO(b/245724167): Test receivers as well.
     remoteSession.sendCustomCommand(testCommand, testArgs);
     assertThat(latch.await(TIMEOUT_MS, MILLISECONDS)).isTrue();
   }

File: libraries/session/src/main/java/androidx/media3/session/MediaControllerImplBase.java
Patch:
@@ -1261,7 +1261,7 @@ private void removeMediaItemsInternal(int fromIndex, int toIndex) {
           /* ignored */ PLAY_WHEN_READY_CHANGE_REASON_USER_REQUEST,
           /* positionDiscontinuity= */ currentItemRemoved,
           DISCONTINUITY_REASON_REMOVE,
-          /* mediaItemTransition*/ playerInfo.sessionPositionInfo.positionInfo.mediaItemIndex
+          /* mediaItemTransition= */ playerInfo.sessionPositionInfo.positionInfo.mediaItemIndex
                   >= fromIndex
               && playerInfo.sessionPositionInfo.positionInfo.mediaItemIndex < clippedToIndex,
           MEDIA_ITEM_TRANSITION_REASON_PLAYLIST_CHANGED);

File: libraries/session/src/main/java/androidx/media3/session/MediaControllerStub.java
Patch:
@@ -183,7 +183,7 @@ public void onPlayerInfoChanged(int seq, Bundle playerInfoBundle, boolean isTime
         controller ->
             controller.onPlayerInfoChanged(
                 playerInfo,
-                /* timelineChangedReason */ Player.TIMELINE_CHANGE_REASON_SOURCE_UPDATE,
+                /* timelineChangedReason= */ Player.TIMELINE_CHANGE_REASON_SOURCE_UPDATE,
                 isTimelineExcluded));
   }
 

File: libraries/session/src/main/java/androidx/media3/session/MediaUtils.java
Patch:
@@ -320,7 +320,7 @@ public static <T extends Parcelable> List<T> truncateListBySize(
     return result;
   }
 
-  /* Converts a {@link MediaItem} to a {@link MediaDescriptionCompat}. */
+  /** Converts a {@link MediaItem} to a {@link MediaDescriptionCompat}. */
   public static MediaDescriptionCompat convertToMediaDescriptionCompat(MediaItem item) {
     MediaDescriptionCompat.Builder builder =
         new MediaDescriptionCompat.Builder()

File: libraries/session/src/main/java/androidx/media3/session/SessionToken.java
Patch:
@@ -399,7 +399,7 @@ private static int getUid(PackageManager manager, String packageName) {
     try {
       return manager.getApplicationInfo(packageName, 0).uid;
     } catch (PackageManager.NameNotFoundException e) {
-      throw new IllegalArgumentException("Cannot find package " + packageName);
+      throw new IllegalArgumentException("Cannot find package " + packageName, e);
     }
   }
 

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/audio/MediaCodecAudioRendererTest.java
Patch:
@@ -153,7 +153,7 @@ public void render_configuresAudioSink_afterFormatChange() throws Exception {
         /* joining= */ false,
         /* mayRenderStartOfStream= */ false,
         /* startPositionUs= */ 0,
-        /* offsetUs */ 0);
+        /* offsetUs= */ 0);
 
     mediaCodecAudioRenderer.start();
     mediaCodecAudioRenderer.render(/* positionUs= */ 0, SystemClock.elapsedRealtime() * 1000);
@@ -210,7 +210,7 @@ public void render_configuresAudioSink_afterGaplessFormatChange() throws Excepti
         /* joining= */ false,
         /* mayRenderStartOfStream= */ false,
         /* startPositionUs= */ 0,
-        /* offsetUs */ 0);
+        /* offsetUs= */ 0);
 
     mediaCodecAudioRenderer.start();
     mediaCodecAudioRenderer.render(/* positionUs= */ 0, SystemClock.elapsedRealtime() * 1000);
@@ -284,7 +284,7 @@ protected void onOutputFormatChanged(Format format, @Nullable MediaFormat mediaF
         /* joining= */ false,
         /* mayRenderStartOfStream= */ false,
         /* startPositionUs= */ 0,
-        /* offsetUs */ 0);
+        /* offsetUs= */ 0);
 
     exceptionThrowingRenderer.start();
     exceptionThrowingRenderer.render(/* positionUs= */ 0, SystemClock.elapsedRealtime() * 1000);

File: libraries/datasource_cronet/src/test/java/androidx/media3/datasource/cronet/CronetDataSourceTest.java
Patch:
@@ -145,7 +145,7 @@ public void setUp() {
     testResponseHeader.put("Content-Type", TEST_CONTENT_TYPE);
     // This value can be anything since the DataSpec is unset.
     testResponseHeader.put("Content-Length", Long.toString(TEST_CONTENT_LENGTH));
-    testUrlResponseInfo = createUrlResponseInfo(200); // statusCode
+    testUrlResponseInfo = createUrlResponseInfo(/* statusCode= */ 200);
   }
 
   @After

File: libraries/session/src/main/java/androidx/media3/session/SessionPositionInfo.java
Patch:
@@ -15,6 +15,7 @@
  */
 package androidx.media3.session;
 
+import static androidx.media3.common.util.Assertions.checkArgument;
 import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
@@ -83,6 +84,7 @@ public SessionPositionInfo(
       long currentLiveOffsetMs,
       long contentDurationMs,
       long contentBufferedPositionMs) {
+    checkArgument(isPlayingAd == (positionInfo.adGroupIndex != C.INDEX_UNSET));
     this.positionInfo = positionInfo;
     this.isPlayingAd = isPlayingAd;
     this.eventTimeMs = eventTimeMs;

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaControllerListenerTest.java
Patch:
@@ -331,6 +331,7 @@ public void setPlayer_notifiesChangedValues() throws Exception {
     AtomicReference<Timeline> timelineRef = new AtomicReference<>();
     AtomicReference<MediaMetadata> playlistMetadataRef = new AtomicReference<>();
     AtomicReference<AudioAttributes> audioAttributesRef = new AtomicReference<>();
+    AtomicBoolean isPlayingAdRef = new AtomicBoolean();
     AtomicInteger currentAdGroupIndexRef = new AtomicInteger();
     AtomicInteger currentAdIndexInAdGroupRef = new AtomicInteger();
     AtomicBoolean shuffleModeEnabledRef = new AtomicBoolean();
@@ -373,6 +374,7 @@ public void onPositionDiscontinuity(
                           PositionInfo oldPosition,
                           PositionInfo newPosition,
                           @DiscontinuityReason int reason) {
+                        isPlayingAdRef.set(controller.isPlayingAd());
                         currentAdGroupIndexRef.set(newPosition.adGroupIndex);
                         currentAdIndexInAdGroupRef.set(newPosition.adIndexInAdGroup);
                         latch.countDown();
@@ -398,6 +400,7 @@ public void onRepeatModeChanged(@RepeatMode int repeatMode) {
             .setPlaylistMetadata(testPlaylistMetadata)
             .setShuffleModeEnabled(testShuffleModeEnabled)
             .setRepeatMode(testRepeatMode)
+            .setIsPlayingAd(true)
             .setCurrentAdGroupIndex(testCurrentAdGroupIndex)
             .setCurrentAdIndexInAdGroup(testCurrentAdIndexInAdGroup)
             .build();

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaControllerStateMaskingTest.java
Patch:
@@ -1166,6 +1166,8 @@ public void seekTo_whilePlayingAd_ignored() throws Exception {
             .setCurrentPosition(initialPosition)
             .setContentPosition(initialPosition)
             .setIsPlayingAd(/* isPlayingAd= */ true)
+            .setCurrentAdGroupIndex(0)
+            .setCurrentAdIndexInAdGroup(0)
             .build();
     remoteSession.setPlayer(playerConfig);
 

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaControllerTest.java
Patch:
@@ -899,6 +899,8 @@ public void getContentPosition_whenPlayingAd_doesNotAdvance() throws Exception {
             .setDuration(10_000L)
             .setIsPlaying(true)
             .setIsPlayingAd(true)
+            .setCurrentAdGroupIndex(0)
+            .setCurrentAdIndexInAdGroup(0)
             .setPlaybackParameters(new PlaybackParameters(/* speed= */ 2.0f))
             .build();
     remoteSession.setPlayer(playerConfig);

File: libraries/exoplayer_dash/src/test/java/androidx/media3/exoplayer/dash/DefaultDashChunkSourceTest.java
Patch:
@@ -95,7 +95,7 @@ public void getNextChunk_forLowLatencyManifest_setsCorrectMayNotLoadAtFullNetwor
             /* elapsedRealtimeOffsetMs= */ 0,
             /* maxSegmentsPerLoad= */ 1,
             /* enableEventMessageTrack= */ false,
-            /* closedCaptionFormats */ ImmutableList.of(),
+            /* closedCaptionFormats= */ ImmutableList.of(),
             /* playerTrackEmsgHandler= */ null,
             PlayerId.UNSET);
 
@@ -144,7 +144,7 @@ public void getNextChunk_forVodManifest_doesNotSetMayNotLoadAtFullNetworkSpeedFl
             /* elapsedRealtimeOffsetMs= */ 0,
             /* maxSegmentsPerLoad= */ 1,
             /* enableEventMessageTrack= */ false,
-            /* closedCaptionFormats */ ImmutableList.of(),
+            /* closedCaptionFormats= */ ImmutableList.of(),
             /* playerTrackEmsgHandler= */ null,
             PlayerId.UNSET);
 
@@ -328,7 +328,7 @@ private DashChunkSource createDashChunkSource(int numberOfTracks) throws IOExcep
         /* elapsedRealtimeOffsetMs= */ 0,
         /* maxSegmentsPerLoad= */ 1,
         /* enableEventMessageTrack= */ false,
-        /* closedCaptionFormats */ ImmutableList.of(),
+        /* closedCaptionFormats= */ ImmutableList.of(),
         /* playerTrackEmsgHandler= */ null,
         PlayerId.UNSET);
   }

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/MediaPeriodQueueTest.java
Patch:
@@ -1087,7 +1087,7 @@ private void setupTimeline(Timeline timeline) {
     mediaSourceList.setMediaSources(
         ImmutableList.of(mediaSourceHolder), new FakeShuffleOrder(/* length= */ 1));
     mediaSourceHolder.mediaSource.prepareSource(
-        mock(MediaSourceCaller.class), /* mediaTransferListener */ null, PlayerId.UNSET);
+        mock(MediaSourceCaller.class), /* mediaTransferListener= */ null, PlayerId.UNSET);
 
     Timeline playlistTimeline = mediaSourceList.createTimeline();
     firstPeriodUid = playlistTimeline.getUidOfPeriod(/* periodIndex= */ 0);

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/MediaSourceListTest.java
Patch:
@@ -374,7 +374,7 @@ public void removeMediaSources_whenPrepared_expectRelease() {
             mockMediaSource2,
             mockMediaSource3,
             mockMediaSource4);
-    mediaSourceList.prepare(/* mediaTransferListener */ null);
+    mediaSourceList.prepare(/* mediaTransferListener= */ null);
     mediaSourceList.addMediaSources(/* index= */ 0, holders, shuffleOrder);
     mediaSourceList.removeMediaSourceRange(/* fromIndex= */ 1, /* toIndex= */ 3, shuffleOrder);
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeMediaPeriod.java
Patch:
@@ -120,7 +120,7 @@ public FakeMediaPeriod(
         mediaSourceEventDispatcher,
         DrmSessionManager.DRM_UNSUPPORTED,
         new DrmSessionEventListener.EventDispatcher(),
-        /* deferOnPrepared */ false);
+        /* deferOnPrepared= */ false);
   }
 
   /**

File: libraries/effect/src/main/java/androidx/media3/effect/FinalMatrixTransformationProcessorWrapper.java
Patch:
@@ -374,7 +374,7 @@ private MatrixTransformationProcessor createMatrixTransformationProcessorForOutp
             matrixTransformationListBuilder.build(),
             sampleFromExternalTexture,
             colorInfo,
-            /* outputOpticalColors= */ true);
+            /* outputElectricalColors= */ true);
     matrixTransformationProcessor.setTextureTransformMatrix(textureTransformMatrix);
     Pair<Integer, Integer> outputSize =
         matrixTransformationProcessor.configure(inputWidth, inputHeight);

File: libraries/effect/src/main/java/androidx/media3/effect/GlEffectsFrameProcessor.java
Patch:
@@ -212,7 +212,7 @@ private static ImmutableList<GlTextureProcessor> getGlTextureProcessorsForGlEffe
                 matrixTransformations,
                 sampleFromExternalTexture,
                 colorInfo,
-                /* outputOpticalColors= */ false));
+                /* outputElectricalColors= */ false));
         matrixTransformationListBuilder = new ImmutableList.Builder<>();
         sampleFromExternalTexture = false;
       }
@@ -242,7 +242,7 @@ private static ImmutableList<GlTextureProcessor> getGlTextureProcessorsForGlEffe
                 ImmutableList.of(),
                 sampleFromExternalTexture,
                 colorInfo,
-                /* outputOpticalColors= */ false));
+                /* outputElectricalColors= */ false));
         sampleFromExternalTexture = false;
       }
       textureProcessorListBuilder.add(

File: libraries/common/src/main/java/androidx/media3/common/FrameProcessor.java
Patch:
@@ -35,7 +35,7 @@
  */
 @UnstableApi
 public interface FrameProcessor {
-  // TODO(b/238302213): Allow effects to be replaced.
+  // TODO(b/243036513): Allow effects to be replaced.
 
   /** A factory for {@link FrameProcessor} instances. */
   interface Factory {

File: libraries/effect/src/main/java/androidx/media3/effect/RgbMatrixProcessor.java
Patch:
@@ -30,7 +30,7 @@
  * Applies a sequence of {@link RgbMatrix} to each frame.
  *
  * <p>After applying all {@link RgbMatrix} instances, color values are clamped to the limits of the
- * color space. Intermediate reults are not clamped.
+ * color space. Intermediate results are not clamped.
  */
 /* package */ final class RgbMatrixProcessor extends SingleFrameGlTextureProcessor {
   private static final String VERTEX_SHADER_PATH = "shaders/vertex_shader_transformation_es2.glsl";

File: libraries/cast/src/main/java/androidx/media3/cast/CastPlayer.java
Patch:
@@ -113,8 +113,6 @@ public final class CastPlayer extends BasePlayer {
 
   private static final long PROGRESS_REPORT_PERIOD_MS = 1000;
   private static final long[] EMPTY_TRACK_ID_ARRAY = new long[0];
-  private static final CueGroup EMPTY_CUE_GROUP =
-      new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
 
   private final CastContext castContext;
   private final MediaItemConverter mediaItemConverter;
@@ -728,7 +726,7 @@ public VideoSize getVideoSize() {
   /** This method is not supported and returns an empty {@link CueGroup}. */
   @Override
   public CueGroup getCurrentCues() {
-    return EMPTY_CUE_GROUP;
+    return CueGroup.EMPTY_TIME_ZERO;
   }
 
   /** This method is not supported and always returns {@link DeviceInfo#UNKNOWN}. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayerImpl.java
Patch:
@@ -356,7 +356,7 @@ public ExoPlayerImpl(ExoPlayer.Builder builder, @Nullable Player wrappingPlayer)
       } else {
         audioSessionId = Util.generateAudioSessionIdV21(applicationContext);
       }
-      currentCueGroup = new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
+      currentCueGroup = CueGroup.EMPTY_TIME_ZERO;
       throwsWhenUsingWrongThread = true;
 
       addListener(analyticsCollector);
@@ -1001,7 +1001,7 @@ public void release() {
       checkNotNull(priorityTaskManager).remove(C.PRIORITY_PLAYBACK);
       isPriorityTaskManagerRegistered = false;
     }
-    currentCueGroup = new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
+    currentCueGroup = CueGroup.EMPTY_TIME_ZERO;
     playerReleased = true;
   }
 

File: libraries/test_session_current/src/main/java/androidx/media3/session/MediaSessionProviderService.java
Patch:
@@ -112,8 +112,6 @@
 public class MediaSessionProviderService extends Service {
 
   private static final String TAG = "MSProviderService";
-  private static final CueGroup EMPTY_CUE_GROUP =
-      new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
 
   private Map<String, MediaSession> sessionMap = new HashMap<>();
   private RemoteMediaSessionStub sessionBinder;
@@ -363,7 +361,9 @@ private Player createMockPlayer(Bundle config) {
       }
       Bundle cueGroupBundle = config.getBundle(KEY_CURRENT_CUE_GROUP);
       player.cueGroup =
-          cueGroupBundle == null ? EMPTY_CUE_GROUP : CueGroup.CREATOR.fromBundle(cueGroupBundle);
+          cueGroupBundle == null
+              ? CueGroup.EMPTY_TIME_ZERO
+              : CueGroup.CREATOR.fromBundle(cueGroupBundle);
       @Nullable Bundle deviceInfoBundle = config.getBundle(KEY_DEVICE_INFO);
       if (deviceInfoBundle != null) {
         player.deviceInfo = DeviceInfo.CREATOR.fromBundle(deviceInfoBundle);

File: libraries/test_session_current/src/main/java/androidx/media3/session/MockPlayer.java
Patch:
@@ -197,8 +197,6 @@ public class MockPlayer implements Player {
   private final ArraySet<Listener> listeners = new ArraySet<>();
   private final ImmutableMap<@Method Integer, ConditionVariable> conditionVariables =
       createMethodConditionVariables();
-  private static final CueGroup EMPTY_CUE_GROUP =
-      new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
 
   @Nullable PlaybackException playerError;
   public AudioAttributes audioAttributes;
@@ -280,7 +278,7 @@ private MockPlayer(Builder builder) {
     repeatMode = Player.REPEAT_MODE_OFF;
     videoSize = VideoSize.UNKNOWN;
     volume = 1.0f;
-    cueGroup = EMPTY_CUE_GROUP;
+    cueGroup = CueGroup.EMPTY_TIME_ZERO;
     deviceInfo = DeviceInfo.UNKNOWN;
     seekPositionMs = C.TIME_UNSET;
     seekMediaItemIndex = C.INDEX_UNSET;

File: libraries/transformer/src/test/java/androidx/media3/transformer/FallbackListenerTest.java
Patch:
@@ -19,7 +19,6 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 import android.net.Uri;
@@ -89,7 +88,7 @@ public void onTransformationRequestFinalized_withDifferentRequest_callsCallback(
     fallbackListener.registerTrack();
     fallbackListener.onTransformationRequestFinalized(audioFallbackRequest);
 
-    verify(mockListener, times(1))
+    verify(mockListener)
         .onFallbackApplied(PLACEHOLDER_MEDIA_ITEM, originalRequest, audioFallbackRequest);
   }
 
@@ -117,7 +116,7 @@ public void onTransformationRequestFinalized_withDifferentRequest_callsCallback(
     fallbackListener.onTransformationRequestFinalized(audioFallbackRequest);
     fallbackListener.onTransformationRequestFinalized(videoFallbackRequest);
 
-    verify(mockListener, times(1))
+    verify(mockListener)
         .onFallbackApplied(PLACEHOLDER_MEDIA_ITEM, originalRequest, mergedFallbackRequest);
   }
 

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/SetHdrEditingTransformationTest.java
Patch:
@@ -174,7 +174,7 @@ public void onFallbackApplied(
         assertThat(exception)
             .hasCauseThat()
             .hasMessageThat()
-            .isEqualTo("Tone-mapping requested but not supported by the decoder");
+            .isEqualTo("Tone-mapping requested but not supported by the decoder.");
       }
       return;
     }

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/SetHdrToSdrToneMapTransformationTest.java
Patch:
@@ -90,7 +90,7 @@ public void onFallbackApplied(
         assertThat(exception)
             .hasCauseThat()
             .hasMessageThat()
-            .isEqualTo("Tone-mapping requested but not supported by the decoder");
+            .isEqualTo("Tone-mapping requested but not supported by the decoder.");
       }
       return;
     }
@@ -147,7 +147,7 @@ public void onFallbackApplied(
         assertThat(exception)
             .hasCauseThat()
             .hasMessageThat()
-            .isEqualTo("Tone-mapping requested but not supported by the decoder");
+            .isEqualTo("Tone-mapping requested but not supported by the decoder.");
       }
       return;
     }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultCodec.java
Patch:
@@ -114,7 +114,7 @@ public DefaultCodec(
         // https://developer.android.com/reference/android/media/MediaFormat#KEY_COLOR_TRANSFER_REQUEST.
         checkArgument(
             Api29.isSdrToneMappingEnabled(mediaCodec.getInputFormat()),
-            "Tone-mapping requested but not supported by the decoder");
+            "Tone-mapping requested but not supported by the decoder.");
       }
       if (isVideo && !isDecoder) {
         inputSurface = mediaCodec.createInputSurface();

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/SetHdrEditingTransformationTest.java
Patch:
@@ -174,7 +174,7 @@ public void onFallbackApplied(
         assertThat(exception)
             .hasCauseThat()
             .hasMessageThat()
-            .isEqualTo("Tone-mapping requested but not supported by the decoder");
+            .isEqualTo("Tone-mapping requested but not supported by the decoder.");
       }
       return;
     }

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/SetHdrToSdrToneMapTransformationTest.java
Patch:
@@ -90,7 +90,7 @@ public void onFallbackApplied(
         assertThat(exception)
             .hasCauseThat()
             .hasMessageThat()
-            .isEqualTo("Tone-mapping requested but not supported by the decoder");
+            .isEqualTo("Tone-mapping requested but not supported by the decoder.");
       }
       return;
     }
@@ -147,7 +147,7 @@ public void onFallbackApplied(
         assertThat(exception)
             .hasCauseThat()
             .hasMessageThat()
-            .isEqualTo("Tone-mapping requested but not supported by the decoder");
+            .isEqualTo("Tone-mapping requested but not supported by the decoder.");
       }
       return;
     }

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultCodec.java
Patch:
@@ -116,7 +116,7 @@ public DefaultCodec(
         // https://developer.android.com/reference/android/media/MediaFormat#KEY_COLOR_TRANSFER_REQUEST.
         checkArgument(
             Api29.isSdrToneMappingEnabled(mediaCodec.getInputFormat()),
-            "Tone-mapping requested but not supported by the decoder");
+            "Tone-mapping requested but not supported by the decoder.");
       }
       if (isVideo && !isDecoder) {
         inputSurface = mediaCodec.createInputSurface();

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioProcessor.java
Patch:
@@ -132,8 +132,8 @@ public UnhandledAudioFormatException(AudioFormat inputAudioFormat) {
   ByteBuffer getOutput();
 
   /**
-   * Returns whether this processor will return no more output from {@link #getOutput()} until it
-   * has been {@link #flush()}ed and more input has been queued.
+   * Returns whether this processor will return no more output from {@link #getOutput()} until
+   * {@link #flush()} has been called and more input has been queued.
    */
   boolean isEnded();
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioProcessor.java
Patch:
@@ -134,8 +134,8 @@ public UnhandledAudioFormatException(AudioFormat inputAudioFormat) {
   ByteBuffer getOutput();
 
   /**
-   * Returns whether this processor will return no more output from {@link #getOutput()} until it
-   * has been {@link #flush()}ed and more input has been queued.
+   * Returns whether this processor will return no more output from {@link #getOutput()} until
+   * {@link #flush()} has been called and more input has been queued.
    */
   boolean isEnded();
 

File: libraries/test_session_common/src/main/java/androidx/media3/test/session/common/MediaBrowserConstants.java
Patch:
@@ -30,7 +30,6 @@ public class MediaBrowserConstants {
   public static final String MEDIA_ID_GET_BROWSABLE_ITEM = "media_id_get_browsable_item";
   public static final String MEDIA_ID_GET_PLAYABLE_ITEM = "media_id_get_playable_item";
   public static final String MEDIA_ID_GET_ITEM_WITH_METADATA = "media_id_get_item_with_metadata";
-  public static final String MEDIA_ID_GET_NULL_ITEM = "media_id_get_null_item";
 
   public static final String PARENT_ID = "parent_id";
   public static final String PARENT_ID_LONG_LIST = "parent_id_long_list";

File: google3/third_party/java_src/android_libs/media/libraries/effect/src/main/java/androidx/media3/effect/ColorLut.java
Patch:
@@ -17,6 +17,7 @@
 package androidx.media3.effect;
 
 import android.content.Context;
+import androidx.annotation.WorkerThread;
 import androidx.media3.common.FrameProcessingException;
 import com.google.android.exoplayer2.util.GlUtil;
 
@@ -38,7 +39,9 @@ public interface ColorLut extends GlEffect {
   /** Releases the OpenGL texture of the LUT. */
   void release() throws GlUtil.GlException;
 
+  /** This method must be executed on the same thread as other GL commands. */
   @Override
+  @WorkerThread
   default ColorLutProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return new ColorLutProcessor(context, /* colorLut= */ this, useHdr);

File: libraries/effect/src/main/java/androidx/media3/effect/ColorLut.java
Patch:
@@ -17,6 +17,7 @@
 package androidx.media3.effect;
 
 import android.content.Context;
+import androidx.annotation.WorkerThread;
 import androidx.media3.common.FrameProcessingException;
 import androidx.media3.common.util.GlUtil;
 import androidx.media3.common.util.UnstableApi;
@@ -40,7 +41,9 @@ public interface ColorLut extends GlEffect {
   /** Releases the OpenGL texture of the LUT. */
   void release() throws GlUtil.GlException;
 
+  /** This method must be executed on the same thread as other GL commands. */
   @Override
+  @WorkerThread
   default ColorLutProcessor toGlTextureProcessor(Context context, boolean useHdr)
       throws FrameProcessingException {
     return new ColorLutProcessor(context, /* colorLut= */ this, useHdr);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayerImplInternal.java
Patch:
@@ -1092,7 +1092,6 @@ && isLoadingPossible()) {
 
     if (sleepingForOffload || playbackInfo.playbackState == Player.STATE_ENDED) {
       // No need to schedule next work.
-      return;
     } else if (isPlaying || playbackInfo.playbackState == Player.STATE_BUFFERING) {
       // We are actively playing or waiting for data to be ready. Schedule next work quickly.
       scheduleNextWork(operationStartTimeMs, ACTIVE_INTERVAL_MS);

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -1084,7 +1084,6 @@ && isLoadingPossible()) {
 
     if (sleepingForOffload || playbackInfo.playbackState == Player.STATE_ENDED) {
       // No need to schedule next work.
-      return;
     } else if (isPlaying || playbackInfo.playbackState == Player.STATE_BUFFERING) {
       // We are actively playing or waiting for data to be ready. Schedule next work quickly.
       scheduleNextWork(operationStartTimeMs, ACTIVE_INTERVAL_MS);

File: libraries/effect/src/androidTest/java/androidx/media3/effect/GlEffectsFrameProcessorPixelTest.java
Patch:
@@ -391,7 +391,7 @@ public void processData_fullRotationIncreaseBrightnessAndCenterCrop_producesExpe
   // TODO(b/239757183): Consider moving RgbMatrix composition tests to a new file.
   public void drawFrame_grayscaleAndIncreaseRedChannel_producesGrayscaleAndRedImage()
       throws Exception {
-    String testId = "drawFrame_grayscale";
+    String testId = "drawFrame_grayscaleAndIncreaseRedChannel";
     ImmutableList<Effect> grayscaleThenIncreaseRed =
         ImmutableList.of(
             RgbFilter.createGrayscaleFilter(), new RgbAdjustment.Builder().setRedScale(3).build());

File: google3/third_party/java_src/android_libs/media/libraries/effect/src/androidTest/java/androidx/media3/effect/GlEffectsFrameProcessorPixelTest.java
Patch:
@@ -391,7 +391,7 @@ public void processData_fullRotationIncreaseBrightnessAndCenterCrop_producesExpe
   // TODO(b/239757183): Consider moving RgbMatrix composition tests to a new file.
   public void drawFrame_grayscaleAndIncreaseRedChannel_producesGrayscaleAndRedImage()
       throws Exception {
-    String testId = "drawFrame_grayscale";
+    String testId = "drawFrame_grayscaleAndIncreaseRedChannel";
     ImmutableList<Effect> grayscaleThenIncreaseRed =
         ImmutableList.of(
             RgbFilter.createGrayscaleFilter(), new RgbAdjustment.Builder().setRedScale(3).build());

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaControllerListenerTest.java
Patch:
@@ -1899,10 +1899,10 @@ public ListenableFuture<SessionResult> onCustomCommand(
     controllerTestRule.createController(
         remoteSession.getToken(), /* connectionHints= */ null, listener);
 
-    // TODO(jaewan): Test with multiple controllers
+    // TODO(b/245724167): Test with multiple controllers
     remoteSession.broadcastCustomCommand(testCommand, testArgs);
 
-    // TODO(jaewan): Test receivers as well.
+    // TODO(b/245724167): Test receivers as well.
     remoteSession.sendCustomCommand(testCommand, testArgs);
     assertThat(latch.await(TIMEOUT_MS, MILLISECONDS)).isTrue();
   }

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/DefaultRtpPayloadReaderFactory.java
Patch:
@@ -36,7 +36,7 @@ public RtpPayloadReader createPayloadReader(RtpPayloadFormat payloadFormat) {
         return new RtpAc3Reader(payloadFormat);
       case MimeTypes.AUDIO_AAC:
         if(payloadFormat.mediaEncoding.equals(RtpPayloadFormat.RTP_MEDIA_MPEG4_AUDIO)){
-          return new RtpMp4aPayloadReader(payloadFormat);
+          return new RtpMp4aReader(payloadFormat);
         } else {
           return new RtpAacReader(payloadFormat);
         }

File: libraries/session/src/main/java/androidx/media3/session/MediaControllerImplBase.java
Patch:
@@ -1261,7 +1261,7 @@ private void removeMediaItemsInternal(int fromIndex, int toIndex) {
           /* ignored */ PLAY_WHEN_READY_CHANGE_REASON_USER_REQUEST,
           /* positionDiscontinuity= */ currentItemRemoved,
           DISCONTINUITY_REASON_REMOVE,
-          /* mediaItemTransition*/ playerInfo.sessionPositionInfo.positionInfo.mediaItemIndex
+          /* mediaItemTransition= */ playerInfo.sessionPositionInfo.positionInfo.mediaItemIndex
                   >= fromIndex
               && playerInfo.sessionPositionInfo.positionInfo.mediaItemIndex < clippedToIndex,
           MEDIA_ITEM_TRANSITION_REASON_PLAYLIST_CHANGED);

File: libraries/session/src/main/java/androidx/media3/session/MediaControllerStub.java
Patch:
@@ -183,7 +183,7 @@ public void onPlayerInfoChanged(int seq, Bundle playerInfoBundle, boolean isTime
         controller ->
             controller.onPlayerInfoChanged(
                 playerInfo,
-                /* timelineChangedReason */ Player.TIMELINE_CHANGE_REASON_SOURCE_UPDATE,
+                /* timelineChangedReason= */ Player.TIMELINE_CHANGE_REASON_SOURCE_UPDATE,
                 isTimelineExcluded));
   }
 

File: libraries/session/src/main/java/androidx/media3/session/MediaUtils.java
Patch:
@@ -320,7 +320,7 @@ public static <T extends Parcelable> List<T> truncateListBySize(
     return result;
   }
 
-  /* Converts a {@link MediaItem} to a {@link MediaDescriptionCompat}. */
+  /** Converts a {@link MediaItem} to a {@link MediaDescriptionCompat}. */
   public static MediaDescriptionCompat convertToMediaDescriptionCompat(MediaItem item) {
     MediaDescriptionCompat.Builder builder =
         new MediaDescriptionCompat.Builder()

File: libraries/session/src/main/java/androidx/media3/session/SessionToken.java
Patch:
@@ -399,7 +399,7 @@ private static int getUid(PackageManager manager, String packageName) {
     try {
       return manager.getApplicationInfo(packageName, 0).uid;
     } catch (PackageManager.NameNotFoundException e) {
-      throw new IllegalArgumentException("Cannot find package " + packageName);
+      throw new IllegalArgumentException("Cannot find package " + packageName, e);
     }
   }
 

File: library/core/src/test/java/com/google/android/exoplayer2/audio/MediaCodecAudioRendererTest.java
Patch:
@@ -153,7 +153,7 @@ public void render_configuresAudioSink_afterFormatChange() throws Exception {
         /* joining= */ false,
         /* mayRenderStartOfStream= */ false,
         /* startPositionUs= */ 0,
-        /* offsetUs */ 0);
+        /* offsetUs= */ 0);
 
     mediaCodecAudioRenderer.start();
     mediaCodecAudioRenderer.render(/* positionUs= */ 0, SystemClock.elapsedRealtime() * 1000);
@@ -210,7 +210,7 @@ public void render_configuresAudioSink_afterGaplessFormatChange() throws Excepti
         /* joining= */ false,
         /* mayRenderStartOfStream= */ false,
         /* startPositionUs= */ 0,
-        /* offsetUs */ 0);
+        /* offsetUs= */ 0);
 
     mediaCodecAudioRenderer.start();
     mediaCodecAudioRenderer.render(/* positionUs= */ 0, SystemClock.elapsedRealtime() * 1000);
@@ -284,7 +284,7 @@ protected void onOutputFormatChanged(Format format, @Nullable MediaFormat mediaF
         /* joining= */ false,
         /* mayRenderStartOfStream= */ false,
         /* startPositionUs= */ 0,
-        /* offsetUs */ 0);
+        /* offsetUs= */ 0);
 
     exceptionThrowingRenderer.start();
     exceptionThrowingRenderer.render(/* positionUs= */ 0, SystemClock.elapsedRealtime() * 1000);

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/audio/MediaCodecAudioRendererTest.java
Patch:
@@ -153,7 +153,7 @@ public void render_configuresAudioSink_afterFormatChange() throws Exception {
         /* joining= */ false,
         /* mayRenderStartOfStream= */ false,
         /* startPositionUs= */ 0,
-        /* offsetUs */ 0);
+        /* offsetUs= */ 0);
 
     mediaCodecAudioRenderer.start();
     mediaCodecAudioRenderer.render(/* positionUs= */ 0, SystemClock.elapsedRealtime() * 1000);
@@ -210,7 +210,7 @@ public void render_configuresAudioSink_afterGaplessFormatChange() throws Excepti
         /* joining= */ false,
         /* mayRenderStartOfStream= */ false,
         /* startPositionUs= */ 0,
-        /* offsetUs */ 0);
+        /* offsetUs= */ 0);
 
     mediaCodecAudioRenderer.start();
     mediaCodecAudioRenderer.render(/* positionUs= */ 0, SystemClock.elapsedRealtime() * 1000);
@@ -284,7 +284,7 @@ protected void onOutputFormatChanged(Format format, @Nullable MediaFormat mediaF
         /* joining= */ false,
         /* mayRenderStartOfStream= */ false,
         /* startPositionUs= */ 0,
-        /* offsetUs */ 0);
+        /* offsetUs= */ 0);
 
     exceptionThrowingRenderer.start();
     exceptionThrowingRenderer.render(/* positionUs= */ 0, SystemClock.elapsedRealtime() * 1000);

File: extensions/cronet/src/test/java/com/google/android/exoplayer2/ext/cronet/CronetDataSourceTest.java
Patch:
@@ -145,7 +145,7 @@ public void setUp() {
     testResponseHeader.put("Content-Type", TEST_CONTENT_TYPE);
     // This value can be anything since the DataSpec is unset.
     testResponseHeader.put("Content-Length", Long.toString(TEST_CONTENT_LENGTH));
-    testUrlResponseInfo = createUrlResponseInfo(200); // statusCode
+    testUrlResponseInfo = createUrlResponseInfo(/* statusCode= */ 200);
   }
 
   @After

File: libraries/datasource_cronet/src/test/java/androidx/media3/datasource/cronet/CronetDataSourceTest.java
Patch:
@@ -145,7 +145,7 @@ public void setUp() {
     testResponseHeader.put("Content-Type", TEST_CONTENT_TYPE);
     // This value can be anything since the DataSpec is unset.
     testResponseHeader.put("Content-Length", Long.toString(TEST_CONTENT_LENGTH));
-    testUrlResponseInfo = createUrlResponseInfo(200); // statusCode
+    testUrlResponseInfo = createUrlResponseInfo(/* statusCode= */ 200);
   }
 
   @After

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
Patch:
@@ -2073,6 +2073,7 @@ private boolean drmNeedsCodecReinitialization(
     }
 
     // Note: Both oldSession and newSession are non-null, and they are different sessions.
+   if(!newSession.getSchemeUuid().equals(oldSession.getSchemeUuid())) return true;
 
     if (Util.SDK_INT < 23) {
       // MediaCrypto.setMediaDrmSession is only available from API level 23, so re-initialization is

File: libraries/session/src/main/java/androidx/media3/session/SessionPositionInfo.java
Patch:
@@ -15,6 +15,7 @@
  */
 package androidx.media3.session;
 
+import static androidx.media3.common.util.Assertions.checkArgument;
 import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
@@ -83,6 +84,7 @@ public SessionPositionInfo(
       long currentLiveOffsetMs,
       long contentDurationMs,
       long contentBufferedPositionMs) {
+    checkArgument(isPlayingAd == (positionInfo.adGroupIndex != C.INDEX_UNSET));
     this.positionInfo = positionInfo;
     this.isPlayingAd = isPlayingAd;
     this.eventTimeMs = eventTimeMs;

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaControllerListenerTest.java
Patch:
@@ -331,6 +331,7 @@ public void setPlayer_notifiesChangedValues() throws Exception {
     AtomicReference<Timeline> timelineRef = new AtomicReference<>();
     AtomicReference<MediaMetadata> playlistMetadataRef = new AtomicReference<>();
     AtomicReference<AudioAttributes> audioAttributesRef = new AtomicReference<>();
+    AtomicBoolean isPlayingAdRef = new AtomicBoolean();
     AtomicInteger currentAdGroupIndexRef = new AtomicInteger();
     AtomicInteger currentAdIndexInAdGroupRef = new AtomicInteger();
     AtomicBoolean shuffleModeEnabledRef = new AtomicBoolean();
@@ -373,6 +374,7 @@ public void onPositionDiscontinuity(
                           PositionInfo oldPosition,
                           PositionInfo newPosition,
                           @DiscontinuityReason int reason) {
+                        isPlayingAdRef.set(controller.isPlayingAd());
                         currentAdGroupIndexRef.set(newPosition.adGroupIndex);
                         currentAdIndexInAdGroupRef.set(newPosition.adIndexInAdGroup);
                         latch.countDown();
@@ -398,6 +400,7 @@ public void onRepeatModeChanged(@RepeatMode int repeatMode) {
             .setPlaylistMetadata(testPlaylistMetadata)
             .setShuffleModeEnabled(testShuffleModeEnabled)
             .setRepeatMode(testRepeatMode)
+            .setIsPlayingAd(true)
             .setCurrentAdGroupIndex(testCurrentAdGroupIndex)
             .setCurrentAdIndexInAdGroup(testCurrentAdIndexInAdGroup)
             .build();

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaControllerStateMaskingTest.java
Patch:
@@ -1166,6 +1166,8 @@ public void seekTo_whilePlayingAd_ignored() throws Exception {
             .setCurrentPosition(initialPosition)
             .setContentPosition(initialPosition)
             .setIsPlayingAd(/* isPlayingAd= */ true)
+            .setCurrentAdGroupIndex(0)
+            .setCurrentAdIndexInAdGroup(0)
             .build();
     remoteSession.setPlayer(playerConfig);
 

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaControllerTest.java
Patch:
@@ -899,6 +899,8 @@ public void getContentPosition_whenPlayingAd_doesNotAdvance() throws Exception {
             .setDuration(10_000L)
             .setIsPlaying(true)
             .setIsPlayingAd(true)
+            .setCurrentAdGroupIndex(0)
+            .setCurrentAdIndexInAdGroup(0)
             .setPlaybackParameters(new PlaybackParameters(/* speed= */ 2.0f))
             .build();
     remoteSession.setPlayer(playerConfig);

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DefaultDashChunkSourceTest.java
Patch:
@@ -95,7 +95,7 @@ public void getNextChunk_forLowLatencyManifest_setsCorrectMayNotLoadAtFullNetwor
             /* elapsedRealtimeOffsetMs= */ 0,
             /* maxSegmentsPerLoad= */ 1,
             /* enableEventMessageTrack= */ false,
-            /* closedCaptionFormats */ ImmutableList.of(),
+            /* closedCaptionFormats= */ ImmutableList.of(),
             /* playerTrackEmsgHandler= */ null,
             PlayerId.UNSET);
 
@@ -144,7 +144,7 @@ public void getNextChunk_forVodManifest_doesNotSetMayNotLoadAtFullNetworkSpeedFl
             /* elapsedRealtimeOffsetMs= */ 0,
             /* maxSegmentsPerLoad= */ 1,
             /* enableEventMessageTrack= */ false,
-            /* closedCaptionFormats */ ImmutableList.of(),
+            /* closedCaptionFormats= */ ImmutableList.of(),
             /* playerTrackEmsgHandler= */ null,
             PlayerId.UNSET);
 
@@ -328,7 +328,7 @@ private DashChunkSource createDashChunkSource(int numberOfTracks) throws IOExcep
         /* elapsedRealtimeOffsetMs= */ 0,
         /* maxSegmentsPerLoad= */ 1,
         /* enableEventMessageTrack= */ false,
-        /* closedCaptionFormats */ ImmutableList.of(),
+        /* closedCaptionFormats= */ ImmutableList.of(),
         /* playerTrackEmsgHandler= */ null,
         PlayerId.UNSET);
   }

File: libraries/exoplayer_dash/src/test/java/androidx/media3/exoplayer/dash/DefaultDashChunkSourceTest.java
Patch:
@@ -95,7 +95,7 @@ public void getNextChunk_forLowLatencyManifest_setsCorrectMayNotLoadAtFullNetwor
             /* elapsedRealtimeOffsetMs= */ 0,
             /* maxSegmentsPerLoad= */ 1,
             /* enableEventMessageTrack= */ false,
-            /* closedCaptionFormats */ ImmutableList.of(),
+            /* closedCaptionFormats= */ ImmutableList.of(),
             /* playerTrackEmsgHandler= */ null,
             PlayerId.UNSET);
 
@@ -144,7 +144,7 @@ public void getNextChunk_forVodManifest_doesNotSetMayNotLoadAtFullNetworkSpeedFl
             /* elapsedRealtimeOffsetMs= */ 0,
             /* maxSegmentsPerLoad= */ 1,
             /* enableEventMessageTrack= */ false,
-            /* closedCaptionFormats */ ImmutableList.of(),
+            /* closedCaptionFormats= */ ImmutableList.of(),
             /* playerTrackEmsgHandler= */ null,
             PlayerId.UNSET);
 
@@ -328,7 +328,7 @@ private DashChunkSource createDashChunkSource(int numberOfTracks) throws IOExcep
         /* elapsedRealtimeOffsetMs= */ 0,
         /* maxSegmentsPerLoad= */ 1,
         /* enableEventMessageTrack= */ false,
-        /* closedCaptionFormats */ ImmutableList.of(),
+        /* closedCaptionFormats= */ ImmutableList.of(),
         /* playerTrackEmsgHandler= */ null,
         PlayerId.UNSET);
   }

File: library/core/src/test/java/com/google/android/exoplayer2/MediaPeriodQueueTest.java
Patch:
@@ -1081,7 +1081,7 @@ private void setupTimeline(Timeline timeline) {
     mediaSourceList.setMediaSources(
         ImmutableList.of(mediaSourceHolder), new FakeShuffleOrder(/* length= */ 1));
     mediaSourceHolder.mediaSource.prepareSource(
-        mock(MediaSourceCaller.class), /* mediaTransferListener */ null, PlayerId.UNSET);
+        mock(MediaSourceCaller.class), /* mediaTransferListener= */ null, PlayerId.UNSET);
 
     Timeline playlistTimeline = mediaSourceList.createTimeline();
     firstPeriodUid = playlistTimeline.getUidOfPeriod(/* periodIndex= */ 0);

File: library/core/src/test/java/com/google/android/exoplayer2/MediaSourceListTest.java
Patch:
@@ -371,7 +371,7 @@ public void removeMediaSources_whenPrepared_expectRelease() {
             mockMediaSource2,
             mockMediaSource3,
             mockMediaSource4);
-    mediaSourceList.prepare(/* mediaTransferListener */ null);
+    mediaSourceList.prepare(/* mediaTransferListener= */ null);
     mediaSourceList.addMediaSources(/* index= */ 0, holders, shuffleOrder);
     mediaSourceList.removeMediaSourceRange(/* fromIndex= */ 1, /* toIndex= */ 3, shuffleOrder);
 

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/MediaPeriodQueueTest.java
Patch:
@@ -1087,7 +1087,7 @@ private void setupTimeline(Timeline timeline) {
     mediaSourceList.setMediaSources(
         ImmutableList.of(mediaSourceHolder), new FakeShuffleOrder(/* length= */ 1));
     mediaSourceHolder.mediaSource.prepareSource(
-        mock(MediaSourceCaller.class), /* mediaTransferListener */ null, PlayerId.UNSET);
+        mock(MediaSourceCaller.class), /* mediaTransferListener= */ null, PlayerId.UNSET);
 
     Timeline playlistTimeline = mediaSourceList.createTimeline();
     firstPeriodUid = playlistTimeline.getUidOfPeriod(/* periodIndex= */ 0);

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/MediaSourceListTest.java
Patch:
@@ -374,7 +374,7 @@ public void removeMediaSources_whenPrepared_expectRelease() {
             mockMediaSource2,
             mockMediaSource3,
             mockMediaSource4);
-    mediaSourceList.prepare(/* mediaTransferListener */ null);
+    mediaSourceList.prepare(/* mediaTransferListener= */ null);
     mediaSourceList.addMediaSources(/* index= */ 0, holders, shuffleOrder);
     mediaSourceList.removeMediaSourceRange(/* fromIndex= */ 1, /* toIndex= */ 3, shuffleOrder);
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaPeriod.java
Patch:
@@ -118,7 +118,7 @@ public FakeMediaPeriod(
         mediaSourceEventDispatcher,
         DrmSessionManager.DRM_UNSUPPORTED,
         new DrmSessionEventListener.EventDispatcher(),
-        /* deferOnPrepared */ false);
+        /* deferOnPrepared= */ false);
   }
 
   /**

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeMediaPeriod.java
Patch:
@@ -120,7 +120,7 @@ public FakeMediaPeriod(
         mediaSourceEventDispatcher,
         DrmSessionManager.DRM_UNSUPPORTED,
         new DrmSessionEventListener.EventDispatcher(),
-        /* deferOnPrepared */ false);
+        /* deferOnPrepared= */ false);
   }
 
   /**

File: google3/third_party/java_src/android_libs/media/libraries/effect/src/main/java/androidx/media3/effect/FinalMatrixTransformationProcessorWrapper.java
Patch:
@@ -374,7 +374,7 @@ private MatrixTransformationProcessor createMatrixTransformationProcessorForOutp
             matrixTransformationListBuilder.build(),
             sampleFromExternalTexture,
             colorInfo,
-            /* outputOpticalColors= */ true);
+            /* outputElectricalColors= */ true);
     matrixTransformationProcessor.setTextureTransformMatrix(textureTransformMatrix);
     Pair<Integer, Integer> outputSize =
         matrixTransformationProcessor.configure(inputWidth, inputHeight);

File: google3/third_party/java_src/android_libs/media/libraries/effect/src/main/java/androidx/media3/effect/GlEffectsFrameProcessor.java
Patch:
@@ -210,7 +210,7 @@ private static ImmutableList<GlTextureProcessor> getGlTextureProcessorsForGlEffe
                 matrixTransformations,
                 sampleFromExternalTexture,
                 colorInfo,
-                /* outputOpticalColors= */ false));
+                /* outputElectricalColors= */ false));
         matrixTransformationListBuilder = new ImmutableList.Builder<>();
         sampleFromExternalTexture = false;
       }
@@ -240,7 +240,7 @@ private static ImmutableList<GlTextureProcessor> getGlTextureProcessorsForGlEffe
                 ImmutableList.of(),
                 sampleFromExternalTexture,
                 colorInfo,
-                /* outputOpticalColors= */ false));
+                /* outputElectricalColors= */ false));
         sampleFromExternalTexture = false;
       }
       textureProcessorListBuilder.add(

File: libraries/effect/src/main/java/androidx/media3/effect/FinalMatrixTransformationProcessorWrapper.java
Patch:
@@ -374,7 +374,7 @@ private MatrixTransformationProcessor createMatrixTransformationProcessorForOutp
             matrixTransformationListBuilder.build(),
             sampleFromExternalTexture,
             colorInfo,
-            /* outputOpticalColors= */ true);
+            /* outputElectricalColors= */ true);
     matrixTransformationProcessor.setTextureTransformMatrix(textureTransformMatrix);
     Pair<Integer, Integer> outputSize =
         matrixTransformationProcessor.configure(inputWidth, inputHeight);

File: libraries/effect/src/main/java/androidx/media3/effect/GlEffectsFrameProcessor.java
Patch:
@@ -212,7 +212,7 @@ private static ImmutableList<GlTextureProcessor> getGlTextureProcessorsForGlEffe
                 matrixTransformations,
                 sampleFromExternalTexture,
                 colorInfo,
-                /* outputOpticalColors= */ false));
+                /* outputElectricalColors= */ false));
         matrixTransformationListBuilder = new ImmutableList.Builder<>();
         sampleFromExternalTexture = false;
       }
@@ -242,7 +242,7 @@ private static ImmutableList<GlTextureProcessor> getGlTextureProcessorsForGlEffe
                 ImmutableList.of(),
                 sampleFromExternalTexture,
                 colorInfo,
-                /* outputOpticalColors= */ false));
+                /* outputElectricalColors= */ false));
         sampleFromExternalTexture = false;
       }
       textureProcessorListBuilder.add(

File: library/common/src/main/java/androidx/media3/common/FrameProcessor.java
Patch:
@@ -33,7 +33,7 @@
  * to the input {@link Surface}.
  */
 public interface FrameProcessor {
-  // TODO(b/238302213): Allow effects to be replaced.
+  // TODO(b/243036513): Allow effects to be replaced.
 
   /** A factory for {@link FrameProcessor} instances. */
   interface Factory {

File: libraries/common/src/main/java/androidx/media3/common/FrameProcessor.java
Patch:
@@ -35,7 +35,7 @@
  */
 @UnstableApi
 public interface FrameProcessor {
-  // TODO(b/238302213): Allow effects to be replaced.
+  // TODO(b/243036513): Allow effects to be replaced.
 
   /** A factory for {@link FrameProcessor} instances. */
   interface Factory {

File: libraries/session/src/main/java/androidx/media3/session/DefaultMediaNotificationProvider.java
Patch:
@@ -139,7 +139,7 @@ public Builder(Context context) {
 
     /**
      * Sets the {@link MediaNotification#notificationId} used for the created notifications. By
-     * default, this is set to {@link #DEFAULT_NOTIFICATION_ID}.
+     * default this is set to {@link #DEFAULT_NOTIFICATION_ID}.
      *
      * @param notificationId The notification ID.
      * @return This builder.
@@ -152,7 +152,7 @@ public Builder setNotificationId(int notificationId) {
 
     /**
      * Sets the ID of the {@link NotificationChannel} on which created notifications are posted on.
-     * By default, this is set to {@link #DEFAULT_CHANNEL_ID}.
+     * By default this is set to {@link #DEFAULT_CHANNEL_ID}.
      *
      * @param channelId The channel ID.
      * @return This builder.
@@ -165,7 +165,7 @@ public Builder setChannelId(String channelId) {
 
     /**
      * Sets the name of the {@link NotificationChannel} on which created notifications are posted
-     * on. By default, this is set to {@link #DEFAULT_CHANNEL_NAME_RESOURCE_ID}.
+     * on. By default this is set to {@link #DEFAULT_CHANNEL_NAME_RESOURCE_ID}.
      *
      * @param channelNameResourceId The string resource ID with the channel name.
      * @return This builder.

File: libraries/session/src/main/java/androidx/media3/session/DefaultMediaNotificationProvider.java
Patch:
@@ -139,7 +139,7 @@ public Builder(Context context) {
 
     /**
      * Sets the {@link MediaNotification#notificationId} used for the created notifications. By
-     * default, this is set to {@link #DEFAULT_NOTIFICATION_ID}.
+     * default this is set to {@link #DEFAULT_NOTIFICATION_ID}.
      *
      * @param notificationId The notification ID.
      * @return This builder.
@@ -152,7 +152,7 @@ public Builder setNotificationId(int notificationId) {
 
     /**
      * Sets the ID of the {@link NotificationChannel} on which created notifications are posted on.
-     * By default, this is set to {@link #DEFAULT_CHANNEL_ID}.
+     * By default this is set to {@link #DEFAULT_CHANNEL_ID}.
      *
      * @param channelId The channel ID.
      * @return This builder.
@@ -165,7 +165,7 @@ public Builder setChannelId(String channelId) {
 
     /**
      * Sets the name of the {@link NotificationChannel} on which created notifications are posted
-     * on. By default, this is set to {@link #DEFAULT_CHANNEL_NAME_RESOURCE_ID}.
+     * on. By default this is set to {@link #DEFAULT_CHANNEL_NAME_RESOURCE_ID}.
      *
      * @param channelNameResourceId The string resource ID with the channel name.
      * @return This builder.

File: libraries/session/src/main/java/androidx/media3/session/DefaultMediaNotificationProvider.java
Patch:
@@ -139,7 +139,7 @@ public Builder(Context context) {
 
     /**
      * Sets the {@link MediaNotification#notificationId} used for the created notifications. By
-     * default this is set to {@link #DEFAULT_NOTIFICATION_ID}.
+     * default, this is set to {@link #DEFAULT_NOTIFICATION_ID}.
      *
      * @param notificationId The notification ID.
      * @return This builder.
@@ -152,7 +152,7 @@ public Builder setNotificationId(int notificationId) {
 
     /**
      * Sets the ID of the {@link NotificationChannel} on which created notifications are posted on.
-     * By default this is set to {@link #DEFAULT_CHANNEL_ID}.
+     * By default, this is set to {@link #DEFAULT_CHANNEL_ID}.
      *
      * @param channelId The channel ID.
      * @return This builder.
@@ -165,7 +165,7 @@ public Builder setChannelId(String channelId) {
 
     /**
      * Sets the name of the {@link NotificationChannel} on which created notifications are posted
-     * on. By default this is set to {@link #DEFAULT_CHANNEL_NAME_RESOURCE_ID}.
+     * on. By default, this is set to {@link #DEFAULT_CHANNEL_NAME_RESOURCE_ID}.
      *
      * @param channelNameResourceId The string resource ID with the channel name.
      * @return This builder.

File: google3/third_party/java_src/android_libs/media/libraries/effect/src/main/java/androidx/media3/effect/RgbMatrixProcessor.java
Patch:
@@ -30,7 +30,7 @@
  * Applies a sequence of {@link RgbMatrix} to each frame.
  *
  * <p>After applying all {@link RgbMatrix} instances, color values are clamped to the limits of the
- * color space. Intermediate reults are not clamped.
+ * color space. Intermediate results are not clamped.
  */
 /* package */ final class RgbMatrixProcessor extends SingleFrameGlTextureProcessor {
   private static final String VERTEX_SHADER_PATH = "shaders/vertex_shader_transformation_es2.glsl";

File: libraries/effect/src/main/java/androidx/media3/effect/RgbMatrixProcessor.java
Patch:
@@ -30,7 +30,7 @@
  * Applies a sequence of {@link RgbMatrix} to each frame.
  *
  * <p>After applying all {@link RgbMatrix} instances, color values are clamped to the limits of the
- * color space. Intermediate reults are not clamped.
+ * color space. Intermediate results are not clamped.
  */
 /* package */ final class RgbMatrixProcessor extends SingleFrameGlTextureProcessor {
   private static final String VERTEX_SHADER_PATH = "shaders/vertex_shader_transformation_es2.glsl";

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
Patch:
@@ -111,8 +111,6 @@ public final class CastPlayer extends BasePlayer {
 
   private static final long PROGRESS_REPORT_PERIOD_MS = 1000;
   private static final long[] EMPTY_TRACK_ID_ARRAY = new long[0];
-  private static final CueGroup EMPTY_CUE_GROUP =
-      new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
 
   private final CastContext castContext;
   private final MediaItemConverter mediaItemConverter;
@@ -726,7 +724,7 @@ public VideoSize getVideoSize() {
   /** This method is not supported and returns an empty {@link CueGroup}. */
   @Override
   public CueGroup getCurrentCues() {
-    return EMPTY_CUE_GROUP;
+    return CueGroup.EMPTY_TIME_ZERO;
   }
 
   /** This method is not supported and always returns {@link DeviceInfo#UNKNOWN}. */

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -345,7 +345,7 @@ public ExoPlayerImpl(ExoPlayer.Builder builder, @Nullable Player wrappingPlayer)
       } else {
         audioSessionId = Util.generateAudioSessionIdV21(applicationContext);
       }
-      currentCueGroup = new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
+      currentCueGroup = CueGroup.EMPTY_TIME_ZERO;
       throwsWhenUsingWrongThread = true;
 
       addListener(analyticsCollector);
@@ -990,7 +990,7 @@ public void release() {
       checkNotNull(priorityTaskManager).remove(C.PRIORITY_PLAYBACK);
       isPriorityTaskManagerRegistered = false;
     }
-    currentCueGroup = new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
+    currentCueGroup = CueGroup.EMPTY_TIME_ZERO;
     playerReleased = true;
   }
 

File: libraries/cast/src/main/java/androidx/media3/cast/CastPlayer.java
Patch:
@@ -113,8 +113,6 @@ public final class CastPlayer extends BasePlayer {
 
   private static final long PROGRESS_REPORT_PERIOD_MS = 1000;
   private static final long[] EMPTY_TRACK_ID_ARRAY = new long[0];
-  private static final CueGroup EMPTY_CUE_GROUP =
-      new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
 
   private final CastContext castContext;
   private final MediaItemConverter mediaItemConverter;
@@ -728,7 +726,7 @@ public VideoSize getVideoSize() {
   /** This method is not supported and returns an empty {@link CueGroup}. */
   @Override
   public CueGroup getCurrentCues() {
-    return EMPTY_CUE_GROUP;
+    return CueGroup.EMPTY_TIME_ZERO;
   }
 
   /** This method is not supported and always returns {@link DeviceInfo#UNKNOWN}. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayerImpl.java
Patch:
@@ -356,7 +356,7 @@ public ExoPlayerImpl(ExoPlayer.Builder builder, @Nullable Player wrappingPlayer)
       } else {
         audioSessionId = Util.generateAudioSessionIdV21(applicationContext);
       }
-      currentCueGroup = new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
+      currentCueGroup = CueGroup.EMPTY_TIME_ZERO;
       throwsWhenUsingWrongThread = true;
 
       addListener(analyticsCollector);
@@ -1001,7 +1001,7 @@ public void release() {
       checkNotNull(priorityTaskManager).remove(C.PRIORITY_PLAYBACK);
       isPriorityTaskManagerRegistered = false;
     }
-    currentCueGroup = new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
+    currentCueGroup = CueGroup.EMPTY_TIME_ZERO;
     playerReleased = true;
   }
 

File: libraries/test_session_current/src/main/java/androidx/media3/session/MediaSessionProviderService.java
Patch:
@@ -112,8 +112,6 @@
 public class MediaSessionProviderService extends Service {
 
   private static final String TAG = "MSProviderService";
-  private static final CueGroup EMPTY_CUE_GROUP =
-      new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
 
   private Map<String, MediaSession> sessionMap = new HashMap<>();
   private RemoteMediaSessionStub sessionBinder;
@@ -363,7 +361,9 @@ private Player createMockPlayer(Bundle config) {
       }
       Bundle cueGroupBundle = config.getBundle(KEY_CURRENT_CUE_GROUP);
       player.cueGroup =
-          cueGroupBundle == null ? EMPTY_CUE_GROUP : CueGroup.CREATOR.fromBundle(cueGroupBundle);
+          cueGroupBundle == null
+              ? CueGroup.EMPTY_TIME_ZERO
+              : CueGroup.CREATOR.fromBundle(cueGroupBundle);
       @Nullable Bundle deviceInfoBundle = config.getBundle(KEY_DEVICE_INFO);
       if (deviceInfoBundle != null) {
         player.deviceInfo = DeviceInfo.CREATOR.fromBundle(deviceInfoBundle);

File: libraries/test_session_current/src/main/java/androidx/media3/session/MockPlayer.java
Patch:
@@ -197,8 +197,6 @@ public class MockPlayer implements Player {
   private final ArraySet<Listener> listeners = new ArraySet<>();
   private final ImmutableMap<@Method Integer, ConditionVariable> conditionVariables =
       createMethodConditionVariables();
-  private static final CueGroup EMPTY_CUE_GROUP =
-      new CueGroup(ImmutableList.of(), /* presentationTimeUs= */ 0);
 
   @Nullable PlaybackException playerError;
   public AudioAttributes audioAttributes;
@@ -280,7 +278,7 @@ private MockPlayer(Builder builder) {
     repeatMode = Player.REPEAT_MODE_OFF;
     videoSize = VideoSize.UNKNOWN;
     volume = 1.0f;
-    cueGroup = EMPTY_CUE_GROUP;
+    cueGroup = CueGroup.EMPTY_TIME_ZERO;
     deviceInfo = DeviceInfo.UNKNOWN;
     seekPositionMs = C.TIME_UNSET;
     seekMediaItemIndex = C.INDEX_UNSET;

File: libraries/session/src/main/java/androidx/media3/session/DefaultMediaNotificationProvider.java
Patch:
@@ -139,7 +139,7 @@ public Builder(Context context) {
 
     /**
      * Sets the {@link MediaNotification#notificationId} used for the created notifications. By
-     * default this is set to {@link #DEFAULT_NOTIFICATION_ID}.
+     * default, this is set to {@link #DEFAULT_NOTIFICATION_ID}.
      *
      * @param notificationId The notification ID.
      * @return This builder.
@@ -152,7 +152,7 @@ public Builder setNotificationId(int notificationId) {
 
     /**
      * Sets the ID of the {@link NotificationChannel} on which created notifications are posted on.
-     * By default this is set to {@link #DEFAULT_CHANNEL_ID}.
+     * By default, this is set to {@link #DEFAULT_CHANNEL_ID}.
      *
      * @param channelId The channel ID.
      * @return This builder.
@@ -165,7 +165,7 @@ public Builder setChannelId(String channelId) {
 
     /**
      * Sets the name of the {@link NotificationChannel} on which created notifications are posted
-     * on. By default this is set to {@link #DEFAULT_CHANNEL_NAME_RESOURCE_ID}.
+     * on. By default, this is set to {@link #DEFAULT_CHANNEL_NAME_RESOURCE_ID}.
      *
      * @param channelNameResourceId The string resource ID with the channel name.
      * @return This builder.

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/FallbackListenerTest.java
Patch:
@@ -19,7 +19,6 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 import android.net.Uri;
@@ -89,7 +88,7 @@ public void onTransformationRequestFinalized_withDifferentRequest_callsCallback(
     fallbackListener.registerTrack();
     fallbackListener.onTransformationRequestFinalized(audioFallbackRequest);
 
-    verify(mockListener, times(1))
+    verify(mockListener)
         .onFallbackApplied(PLACEHOLDER_MEDIA_ITEM, originalRequest, audioFallbackRequest);
   }
 
@@ -117,7 +116,7 @@ public void onTransformationRequestFinalized_withDifferentRequest_callsCallback(
     fallbackListener.onTransformationRequestFinalized(audioFallbackRequest);
     fallbackListener.onTransformationRequestFinalized(videoFallbackRequest);
 
-    verify(mockListener, times(1))
+    verify(mockListener)
         .onFallbackApplied(PLACEHOLDER_MEDIA_ITEM, originalRequest, mergedFallbackRequest);
   }
 

File: libraries/transformer/src/test/java/androidx/media3/transformer/FallbackListenerTest.java
Patch:
@@ -19,7 +19,6 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 import android.net.Uri;
@@ -89,7 +88,7 @@ public void onTransformationRequestFinalized_withDifferentRequest_callsCallback(
     fallbackListener.registerTrack();
     fallbackListener.onTransformationRequestFinalized(audioFallbackRequest);
 
-    verify(mockListener, times(1))
+    verify(mockListener)
         .onFallbackApplied(PLACEHOLDER_MEDIA_ITEM, originalRequest, audioFallbackRequest);
   }
 
@@ -117,7 +116,7 @@ public void onTransformationRequestFinalized_withDifferentRequest_callsCallback(
     fallbackListener.onTransformationRequestFinalized(audioFallbackRequest);
     fallbackListener.onTransformationRequestFinalized(videoFallbackRequest);
 
-    verify(mockListener, times(1))
+    verify(mockListener)
         .onFallbackApplied(PLACEHOLDER_MEDIA_ITEM, originalRequest, mergedFallbackRequest);
   }
 

File: demos/transformer/src/withMediaPipe/java/androidx/media3/demo/transformer/MediaPipeProcessor.java
Patch:
@@ -69,7 +69,6 @@ protected void loadLibrary(String name) {
    * @param inputStreamName Name of the input video stream in the graph.
    * @param outputStreamName Name of the input video stream in the graph.
    */
-  @SuppressWarnings("AndroidConcurrentHashMap") // Only used on API >= 23.
   public MediaPipeProcessor(
       Context context,
       boolean useHdr,

File: demos/transformer/src/withMediaPipe/java/androidx/media3/demo/transformer/MediaPipeProcessor.java
Patch:
@@ -69,7 +69,6 @@ protected void loadLibrary(String name) {
    * @param inputStreamName Name of the input video stream in the graph.
    * @param outputStreamName Name of the input video stream in the graph.
    */
-  @SuppressWarnings("AndroidConcurrentHashMap") // Only used on API >= 23.
   public MediaPipeProcessor(
       Context context,
       boolean useHdr,

File: demos/transformer/src/withMediaPipe/java/androidx/media3/demo/transformer/MediaPipeProcessor.java
Patch:
@@ -69,7 +69,6 @@ protected void loadLibrary(String name) {
    * @param inputStreamName Name of the input video stream in the graph.
    * @param outputStreamName Name of the input video stream in the graph.
    */
-  @SuppressWarnings("AndroidConcurrentHashMap") // Only used on API >= 23.
   public MediaPipeProcessor(
       Context context,
       boolean useHdr,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/DefaultAudioSink.java
Patch:
@@ -234,7 +234,7 @@ public long getSkippedOutputFrameCount() {
   }
 
   /** Provides the buffer size to use when creating an {@link AudioTrack}. */
-  interface AudioTrackBufferSizeProvider {
+  public interface AudioTrackBufferSizeProvider {
     /** Default instance. */
     AudioTrackBufferSizeProvider DEFAULT =
         new DefaultAudioTrackBufferSizeProvider.Builder().build();

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -225,7 +225,7 @@ public long getSkippedOutputFrameCount() {
   }
 
   /** Provides the buffer size to use when creating an {@link AudioTrack}. */
-  interface AudioTrackBufferSizeProvider {
+  public interface AudioTrackBufferSizeProvider {
     /** Default instance. */
     AudioTrackBufferSizeProvider DEFAULT =
         new DefaultAudioTrackBufferSizeProvider.Builder().build();

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/DefaultAudioSink.java
Patch:
@@ -234,7 +234,7 @@ public long getSkippedOutputFrameCount() {
   }
 
   /** Provides the buffer size to use when creating an {@link AudioTrack}. */
-  interface AudioTrackBufferSizeProvider {
+  public interface AudioTrackBufferSizeProvider {
     /** Default instance. */
     AudioTrackBufferSizeProvider DEFAULT =
         new DefaultAudioTrackBufferSizeProvider.Builder().build();

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformationException.java
Patch:
@@ -24,6 +24,7 @@
 import androidx.annotation.Nullable;
 import androidx.media3.common.Format;
 import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.FrameProcessor;
 import androidx.media3.common.PlaybackException;
 import androidx.media3.common.util.Clock;
 import androidx.media3.common.util.UnstableApi;
@@ -275,7 +276,7 @@ public static TransformationException createForAudioProcessor(
   }
 
   /**
-   * Creates an instance for a {@link GlEffectsFrameProcessor} related exception.
+   * Creates an instance for a {@link FrameProcessor} related exception.
    *
    * @param cause The cause of the failure.
    * @param errorCode See {@link #errorCode}.

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformationException.java
Patch:
@@ -23,6 +23,7 @@
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
 import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.FrameProcessor;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.audio.AudioProcessor;
@@ -273,7 +274,7 @@ public static TransformationException createForAudioProcessor(
   }
 
   /**
-   * Creates an instance for a {@link GlEffectsFrameProcessor} related exception.
+   * Creates an instance for a {@link FrameProcessor} related exception.
    *
    * @param cause The cause of the failure.
    * @param errorCode See {@link #errorCode}.

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformationException.java
Patch:
@@ -24,6 +24,7 @@
 import androidx.annotation.Nullable;
 import androidx.media3.common.Format;
 import androidx.media3.common.FrameProcessingException;
+import androidx.media3.common.FrameProcessor;
 import androidx.media3.common.PlaybackException;
 import androidx.media3.common.util.Clock;
 import androidx.media3.common.util.UnstableApi;
@@ -275,7 +276,7 @@ public static TransformationException createForAudioProcessor(
   }
 
   /**
-   * Creates an instance for a {@link GlEffectsFrameProcessor} related exception.
+   * Creates an instance for a {@link FrameProcessor} related exception.
    *
    * @param cause The cause of the failure.
    * @param errorCode See {@link #errorCode}.

File: google3/third_party/java_src/android_libs/media/libraries/effect/src/main/java/androidx/media3/effect/FinalMatrixTransformationProcessorWrapper.java
Patch:
@@ -79,7 +79,7 @@
   @Nullable private SurfaceViewWrapper debugSurfaceViewWrapper;
   private @MonotonicNonNull Listener listener;
   private @MonotonicNonNull Pair<Integer, Integer> outputSizeBeforeSurfaceTransformation;
-  private @MonotonicNonNull SurfaceView debugSurfaceView;
+  @Nullable private SurfaceView debugSurfaceView;
 
   private volatile boolean outputSizeOrRotationChanged;
 
@@ -229,6 +229,7 @@ private synchronized boolean ensureConfigured(int inputWidth, int inputHeight)
         debugSurfaceViewWrapper =
             new SurfaceViewWrapper(eglDisplay, eglContext, useHdr, debugSurfaceView);
       }
+      this.debugSurfaceView = debugSurfaceView;
     }
 
     if (matrixTransformationProcessor != null && outputSizeOrRotationChanged) {

File: libraries/effect/src/main/java/androidx/media3/effect/FinalMatrixTransformationProcessorWrapper.java
Patch:
@@ -79,7 +79,7 @@
   @Nullable private SurfaceViewWrapper debugSurfaceViewWrapper;
   private @MonotonicNonNull Listener listener;
   private @MonotonicNonNull Pair<Integer, Integer> outputSizeBeforeSurfaceTransformation;
-  private @MonotonicNonNull SurfaceView debugSurfaceView;
+  @Nullable private SurfaceView debugSurfaceView;
 
   private volatile boolean outputSizeOrRotationChanged;
 
@@ -229,6 +229,7 @@ private synchronized boolean ensureConfigured(int inputWidth, int inputHeight)
         debugSurfaceViewWrapper =
             new SurfaceViewWrapper(eglDisplay, eglContext, useHdr, debugSurfaceView);
       }
+      this.debugSurfaceView = debugSurfaceView;
     }
 
     if (matrixTransformationProcessor != null && outputSizeOrRotationChanged) {

File: libraries/effect/src/main/java/androidx/media3/effect/FinalMatrixTransformationProcessorWrapper.java
Patch:
@@ -79,7 +79,7 @@
   @Nullable private SurfaceViewWrapper debugSurfaceViewWrapper;
   private @MonotonicNonNull Listener listener;
   private @MonotonicNonNull Pair<Integer, Integer> outputSizeBeforeSurfaceTransformation;
-  private @MonotonicNonNull SurfaceView debugSurfaceView;
+  @Nullable private SurfaceView debugSurfaceView;
 
   private volatile boolean outputSizeOrRotationChanged;
 
@@ -229,6 +229,7 @@ private synchronized boolean ensureConfigured(int inputWidth, int inputHeight)
         debugSurfaceViewWrapper =
             new SurfaceViewWrapper(eglDisplay, eglContext, useHdr, debugSurfaceView);
       }
+      this.debugSurfaceView = debugSurfaceView;
     }
 
     if (matrixTransformationProcessor != null && outputSizeOrRotationChanged) {

File: libraries/common/src/main/java/androidx/media3/common/C.java
Patch:
@@ -1044,6 +1044,7 @@ private C() {}
    */
   @UnstableApi public static final int STEREO_MODE_STEREO_MESH = 3;
 
+  // LINT.IfChange(color_space)
   /**
    * Video colorspaces. One of {@link Format#NO_VALUE}, {@link #COLOR_SPACE_BT709}, {@link
    * #COLOR_SPACE_BT601} or {@link #COLOR_SPACE_BT2020}.
@@ -1067,6 +1068,7 @@ private C() {}
    */
   @UnstableApi public static final int COLOR_SPACE_BT2020 = MediaFormat.COLOR_STANDARD_BT2020;
 
+  // LINT.IfChange(color_transfer)
   /**
    * Video color transfer characteristics. One of {@link Format#NO_VALUE}, {@link
    * #COLOR_TRANSFER_SDR}, {@link #COLOR_TRANSFER_ST2084} or {@link #COLOR_TRANSFER_HLG}.
@@ -1090,6 +1092,7 @@ private C() {}
    */
   @UnstableApi public static final int COLOR_TRANSFER_HLG = MediaFormat.COLOR_TRANSFER_HLG;
 
+  // LINT.IfChange(color_range)
   /**
    * Video color range. One of {@link Format#NO_VALUE}, {@link #COLOR_RANGE_LIMITED} or {@link
    * #COLOR_RANGE_FULL}.

File: libraries/common/src/main/java/androidx/media3/common/ColorInfo.java
Patch:
@@ -77,7 +77,9 @@ public final class ColorInfo implements Bundleable {
 
   /** Returns whether the {@code ColorInfo} uses an HDR {@link C.ColorTransfer}. */
   public static boolean isHdr(@Nullable ColorInfo colorInfo) {
-    return colorInfo != null && colorInfo.colorTransfer != C.COLOR_TRANSFER_SDR;
+    return colorInfo != null
+        && colorInfo.colorTransfer != Format.NO_VALUE
+        && colorInfo.colorTransfer != C.COLOR_TRANSFER_SDR;
   }
 
   /**

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/RtpVp8Reader.java
Patch:
@@ -214,7 +214,7 @@ private void outputSampleMetadataForFragmentedPackets() {
             fragmentedSampleSizeBytes,
             /* offset= */ 0,
             /* cryptoData= */ null);
-    fragmentedSampleSizeBytes = 0;
+    fragmentedSampleSizeBytes = C.LENGTH_UNSET;
     fragmentedSampleTimeUs = C.TIME_UNSET;
     gotFirstPacketOfVp8Frame = false;
   }

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -120,7 +120,7 @@ public void onOutputSizeChanged(int width, int height) {
                 public void onFrameProcessingError(FrameProcessingException exception) {
                   asyncErrorListener.onTransformationException(
                       TransformationException.createForFrameProcessingException(
-                          exception, TransformationException.ERROR_CODE_GL_PROCESSING_FAILED));
+                          exception, TransformationException.ERROR_CODE_FRAME_PROCESSING_FAILED));
                 }
 
                 @Override
@@ -140,7 +140,7 @@ public void onFrameProcessingEnded() {
               /* useHdr= */ encoderWrapper.isHdrEditingEnabled());
     } catch (FrameProcessingException e) {
       throw TransformationException.createForFrameProcessingException(
-          e, TransformationException.ERROR_CODE_GL_INIT_FAILED);
+          e, TransformationException.ERROR_CODE_FRAME_PROCESSING_FAILED);
     }
     frameProcessor.setInputFrameInfo(
         new FrameInfo(

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -1022,6 +1022,7 @@ private C() {}
    */
   public static final int STEREO_MODE_STEREO_MESH = 3;
 
+  // LINT.IfChange(color_space)
   /**
    * Video colorspaces. One of {@link Format#NO_VALUE}, {@link #COLOR_SPACE_BT709}, {@link
    * #COLOR_SPACE_BT601} or {@link #COLOR_SPACE_BT2020}.
@@ -1044,6 +1045,7 @@ private C() {}
    */
   public static final int COLOR_SPACE_BT2020 = MediaFormat.COLOR_STANDARD_BT2020;
 
+  // LINT.IfChange(color_transfer)
   /**
    * Video color transfer characteristics. One of {@link Format#NO_VALUE}, {@link
    * #COLOR_TRANSFER_SDR}, {@link #COLOR_TRANSFER_ST2084} or {@link #COLOR_TRANSFER_HLG}.
@@ -1066,6 +1068,7 @@ private C() {}
    */
   public static final int COLOR_TRANSFER_HLG = MediaFormat.COLOR_TRANSFER_HLG;
 
+  // LINT.IfChange(color_range)
   /**
    * Video color range. One of {@link Format#NO_VALUE}, {@link #COLOR_RANGE_LIMITED} or {@link
    * #COLOR_RANGE_FULL}.

File: library/common/src/main/java/com/google/android/exoplayer2/video/ColorInfo.java
Patch:
@@ -78,7 +78,9 @@ public final class ColorInfo implements Bundleable {
 
   /** Returns whether the {@code ColorInfo} uses an HDR {@link C.ColorTransfer}. */
   public static boolean isHdr(@Nullable ColorInfo colorInfo) {
-    return colorInfo != null && colorInfo.colorTransfer != C.COLOR_TRANSFER_SDR;
+    return colorInfo != null
+        && colorInfo.colorTransfer != Format.NO_VALUE
+        && colorInfo.colorTransfer != C.COLOR_TRANSFER_SDR;
   }
 
   /**

File: libraries/common/src/main/java/androidx/media3/common/C.java
Patch:
@@ -1044,6 +1044,7 @@ private C() {}
    */
   @UnstableApi public static final int STEREO_MODE_STEREO_MESH = 3;
 
+  // LINT.IfChange(color_space)
   /**
    * Video colorspaces. One of {@link Format#NO_VALUE}, {@link #COLOR_SPACE_BT709}, {@link
    * #COLOR_SPACE_BT601} or {@link #COLOR_SPACE_BT2020}.
@@ -1067,6 +1068,7 @@ private C() {}
    */
   @UnstableApi public static final int COLOR_SPACE_BT2020 = MediaFormat.COLOR_STANDARD_BT2020;
 
+  // LINT.IfChange(color_transfer)
   /**
    * Video color transfer characteristics. One of {@link Format#NO_VALUE}, {@link
    * #COLOR_TRANSFER_SDR}, {@link #COLOR_TRANSFER_ST2084} or {@link #COLOR_TRANSFER_HLG}.
@@ -1090,6 +1092,7 @@ private C() {}
    */
   @UnstableApi public static final int COLOR_TRANSFER_HLG = MediaFormat.COLOR_TRANSFER_HLG;
 
+  // LINT.IfChange(color_range)
   /**
    * Video color range. One of {@link Format#NO_VALUE}, {@link #COLOR_RANGE_LIMITED} or {@link
    * #COLOR_RANGE_FULL}.

File: libraries/common/src/main/java/androidx/media3/common/ColorInfo.java
Patch:
@@ -77,7 +77,9 @@ public final class ColorInfo implements Bundleable {
 
   /** Returns whether the {@code ColorInfo} uses an HDR {@link C.ColorTransfer}. */
   public static boolean isHdr(@Nullable ColorInfo colorInfo) {
-    return colorInfo != null && colorInfo.colorTransfer != C.COLOR_TRANSFER_SDR;
+    return colorInfo != null
+        && colorInfo.colorTransfer != Format.NO_VALUE
+        && colorInfo.colorTransfer != C.COLOR_TRANSFER_SDR;
   }
 
   /**

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpVp8Reader.java
Patch:
@@ -214,7 +214,7 @@ private void outputSampleMetadataForFragmentedPackets() {
             fragmentedSampleSizeBytes,
             /* offset= */ 0,
             /* cryptoData= */ null);
-    fragmentedSampleSizeBytes = 0;
+    fragmentedSampleSizeBytes = C.LENGTH_UNSET;
     fragmentedSampleTimeUs = C.TIME_UNSET;
     gotFirstPacketOfVp8Frame = false;
   }

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/RtpVp8Reader.java
Patch:
@@ -214,7 +214,7 @@ private void outputSampleMetadataForFragmentedPackets() {
             fragmentedSampleSizeBytes,
             /* offset= */ 0,
             /* cryptoData= */ null);
-    fragmentedSampleSizeBytes = 0;
+    fragmentedSampleSizeBytes = C.LENGTH_UNSET;
     fragmentedSampleTimeUs = C.TIME_UNSET;
     gotFirstPacketOfVp8Frame = false;
   }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -120,7 +120,7 @@ public void onOutputSizeChanged(int width, int height) {
                 public void onFrameProcessingError(FrameProcessingException exception) {
                   asyncErrorListener.onTransformationException(
                       TransformationException.createForFrameProcessingException(
-                          exception, TransformationException.ERROR_CODE_GL_PROCESSING_FAILED));
+                          exception, TransformationException.ERROR_CODE_FRAME_PROCESSING_FAILED));
                 }
 
                 @Override
@@ -140,7 +140,7 @@ public void onFrameProcessingEnded() {
               /* useHdr= */ encoderWrapper.isHdrEditingEnabled());
     } catch (FrameProcessingException e) {
       throw TransformationException.createForFrameProcessingException(
-          e, TransformationException.ERROR_CODE_GL_INIT_FAILED);
+          e, TransformationException.ERROR_CODE_FRAME_PROCESSING_FAILED);
     }
     frameProcessor.setInputFrameInfo(
         new FrameInfo(

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -120,7 +120,7 @@ public void onOutputSizeChanged(int width, int height) {
                 public void onFrameProcessingError(FrameProcessingException exception) {
                   asyncErrorListener.onTransformationException(
                       TransformationException.createForFrameProcessingException(
-                          exception, TransformationException.ERROR_CODE_GL_PROCESSING_FAILED));
+                          exception, TransformationException.ERROR_CODE_FRAME_PROCESSING_FAILED));
                 }
 
                 @Override
@@ -140,7 +140,7 @@ public void onFrameProcessingEnded() {
               /* useHdr= */ encoderWrapper.isHdrEditingEnabled());
     } catch (FrameProcessingException e) {
       throw TransformationException.createForFrameProcessingException(
-          e, TransformationException.ERROR_CODE_GL_INIT_FAILED);
+          e, TransformationException.ERROR_CODE_FRAME_PROCESSING_FAILED);
     }
     frameProcessor.setInputFrameInfo(
         new FrameInfo(

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionService.java
Patch:
@@ -433,7 +433,8 @@ private MediaNotificationManager getMediaNotificationManager() {
     synchronized (lock) {
       if (mediaNotificationManager == null) {
         if (mediaNotificationProvider == null) {
-          mediaNotificationProvider = new DefaultMediaNotificationProvider(getApplicationContext());
+          mediaNotificationProvider =
+              new DefaultMediaNotificationProvider.Builder(getApplicationContext()).build();
         }
         mediaNotificationManager =
             new MediaNotificationManager(

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/AndroidTestUtil.java
Patch:
@@ -84,6 +84,9 @@ public final class AndroidTestUtil {
           .setFrameRate(30.472f)
           .build();
 
+  public static final String MP4_ASSET_1080P_1_SECOND_HDR10_VIDEO_SDR_CONTAINER =
+      "asset:///media/mp4/hdr10-video-with-sdr-container.mp4";
+
   public static final String MP4_REMOTE_10_SECONDS_URI_STRING =
       "https://storage.googleapis.com/exoplayer-test-media-1/mp4/android-screens-10s.mp4";
   public static final Format MP4_REMOTE_10_SECONDS_FORMAT =

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -150,8 +150,6 @@ public void onFrameProcessingEnded() {
     decoder =
         decoderFactory.createForVideoDecoding(
             inputFormat, frameProcessor.getInputSurface(), isToneMappingRequired);
-    // TODO(b/236316454): Check in the decoder output format whether tone-mapping was actually
-    //  applied and throw an exception if not.
     maxPendingFrameCount = decoder.getMaxPendingFrameCount();
   }
 

File: libraries/session/src/main/java/androidx/media3/session/ConnectionState.java
Patch:
@@ -121,7 +121,9 @@ public Bundle toBundle() {
                 || !playerCommandsFromSession.contains(Player.COMMAND_GET_MEDIA_ITEMS_METADATA),
             /* excludeCues= */ !playerCommandsFromPlayer.contains(Player.COMMAND_GET_TEXT)
                 || !playerCommandsFromSession.contains(Player.COMMAND_GET_TEXT),
-            /* excludeTimeline= */ false));
+            /* excludeTimeline= */ false,
+            /* excludeTracks= */ !playerCommandsFromPlayer.contains(Player.COMMAND_GET_TRACKS)
+                || !playerCommandsFromSession.contains(Player.COMMAND_GET_TRACKS)));
     return bundle;
   }
 

File: libraries/session/src/main/java/androidx/media3/session/MediaControllerImplBase.java
Patch:
@@ -2395,9 +2395,9 @@ void onPlayerInfoChanged(
               listener.onMediaItemTransition(
                   currentMediaItem, playerInfo.mediaItemTransitionReason));
     }
-    if (!Util.areEqual(oldPlayerInfo.currentTracks, newPlayerInfo.currentTracks)) {
+    if (!Util.areEqual(oldPlayerInfo.currentTracks, playerInfo.currentTracks)) {
       listeners.queueEvent(
-          EVENT_TRACKS_CHANGED, listener -> listener.onTracksChanged(newPlayerInfo.currentTracks));
+          EVENT_TRACKS_CHANGED, listener -> listener.onTracksChanged(playerInfo.currentTracks));
     }
     if (!Util.areEqual(oldPlayerInfo.playbackParameters, playerInfo.playbackParameters)) {
       listeners.queueEvent(

File: libraries/session/src/main/java/androidx/media3/session/MediaSession.java
Patch:
@@ -1070,7 +1070,8 @@ default void onPlayerInfoChanged(
         boolean excludeMediaItems,
         boolean excludeMediaItemsMetadata,
         boolean excludeCues,
-        boolean excludeTimeline)
+        boolean excludeTimeline,
+        boolean excludeTracks)
         throws RemoteException {}
 
     default void onPeriodicSessionPositionInfoChanged(

File: libraries/test_session_common/src/main/java/androidx/media3/test/session/common/MediaSessionConstants.java
Patch:
@@ -26,10 +26,12 @@ public class MediaSessionConstants {
   public static final String TEST_WITH_CUSTOM_COMMANDS = "testWithCustomCommands";
   public static final String TEST_CONTROLLER_LISTENER_SESSION_REJECTS = "connection_sessionRejects";
   public static final String TEST_IS_SESSION_COMMAND_AVAILABLE = "testIsSessionCommandAvailable";
+  public static final String TEST_COMMAND_GET_TRACKS = "testCommandGetTracksUnavailable";
 
   // Bundle keys
   public static final String KEY_AVAILABLE_SESSION_COMMANDS = "availableSessionCommands";
   public static final String KEY_CONTROLLER = "controllerKey";
+  public static final String KEY_COMMAND_GET_TASKS_UNAVAILABLE = "commandGetTasksUnavailable";
 
   private MediaSessionConstants() {}
 }

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/VideoEncoderWrapperTest.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.android.exoplayer2.MediaItem;
 import com.google.android.exoplayer2.util.Clock;
 import com.google.android.exoplayer2.util.ListenerSet;
+import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.common.collect.ImmutableList;
 import java.util.List;
 import org.junit.Before;
@@ -47,7 +48,7 @@ public final class VideoEncoderWrapperTest {
   private final VideoTranscodingSamplePipeline.EncoderWrapper encoderWrapper =
       new VideoTranscodingSamplePipeline.EncoderWrapper(
           fakeEncoderFactory,
-          /* inputFormat= */ new Format.Builder().build(),
+          /* inputFormat= */ new Format.Builder().setSampleMimeType(MimeTypes.VIDEO_H265).build(),
           /* allowedOutputMimeTypes= */ ImmutableList.of(),
           emptyTransformationRequest,
           fallbackListener);

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/AndroidTestUtil.java
Patch:
@@ -84,6 +84,9 @@ public final class AndroidTestUtil {
           .setFrameRate(30.472f)
           .build();
 
+  public static final String MP4_ASSET_1080P_1_SECOND_HDR10_VIDEO_SDR_CONTAINER =
+      "asset:///media/mp4/hdr10-video-with-sdr-container.mp4";
+
   public static final String MP4_REMOTE_10_SECONDS_URI_STRING =
       "https://storage.googleapis.com/exoplayer-test-media-1/mp4/android-screens-10s.mp4";
   public static final Format MP4_REMOTE_10_SECONDS_FORMAT =

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -150,8 +150,6 @@ public void onFrameProcessingEnded() {
     decoder =
         decoderFactory.createForVideoDecoding(
             inputFormat, frameProcessor.getInputSurface(), isToneMappingRequired);
-    // TODO(b/236316454): Check in the decoder output format whether tone-mapping was actually
-    //  applied and throw an exception if not.
     maxPendingFrameCount = decoder.getMaxPendingFrameCount();
   }
 

File: libraries/transformer/src/test/java/androidx/media3/transformer/VideoEncoderWrapperTest.java
Patch:
@@ -24,6 +24,7 @@
 import androidx.media3.common.C;
 import androidx.media3.common.Format;
 import androidx.media3.common.MediaItem;
+import androidx.media3.common.MimeTypes;
 import androidx.media3.common.util.Clock;
 import androidx.media3.common.util.ListenerSet;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
@@ -47,7 +48,7 @@ public final class VideoEncoderWrapperTest {
   private final VideoTranscodingSamplePipeline.EncoderWrapper encoderWrapper =
       new VideoTranscodingSamplePipeline.EncoderWrapper(
           fakeEncoderFactory,
-          /* inputFormat= */ new Format.Builder().build(),
+          /* inputFormat= */ new Format.Builder().setSampleMimeType(MimeTypes.VIDEO_H265).build(),
           /* allowedOutputMimeTypes= */ ImmutableList.of(),
           emptyTransformationRequest,
           fallbackListener);

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionService.java
Patch:
@@ -433,7 +433,8 @@ private MediaNotificationManager getMediaNotificationManager() {
     synchronized (lock) {
       if (mediaNotificationManager == null) {
         if (mediaNotificationProvider == null) {
-          mediaNotificationProvider = new DefaultMediaNotificationProvider(getApplicationContext());
+          mediaNotificationProvider =
+              new DefaultMediaNotificationProvider.Builder(getApplicationContext()).build();
         }
         mediaNotificationManager =
             new MediaNotificationManager(

File: libraries/session/src/main/java/androidx/media3/session/ConnectionState.java
Patch:
@@ -121,7 +121,9 @@ public Bundle toBundle() {
                 || !playerCommandsFromSession.contains(Player.COMMAND_GET_MEDIA_ITEMS_METADATA),
             /* excludeCues= */ !playerCommandsFromPlayer.contains(Player.COMMAND_GET_TEXT)
                 || !playerCommandsFromSession.contains(Player.COMMAND_GET_TEXT),
-            /* excludeTimeline= */ false));
+            /* excludeTimeline= */ false,
+            /* excludeTracks= */ !playerCommandsFromPlayer.contains(Player.COMMAND_GET_TRACKS)
+                || !playerCommandsFromSession.contains(Player.COMMAND_GET_TRACKS)));
     return bundle;
   }
 

File: libraries/session/src/main/java/androidx/media3/session/MediaControllerImplBase.java
Patch:
@@ -2395,9 +2395,9 @@ void onPlayerInfoChanged(
               listener.onMediaItemTransition(
                   currentMediaItem, playerInfo.mediaItemTransitionReason));
     }
-    if (!Util.areEqual(oldPlayerInfo.currentTracks, newPlayerInfo.currentTracks)) {
+    if (!Util.areEqual(oldPlayerInfo.currentTracks, playerInfo.currentTracks)) {
       listeners.queueEvent(
-          EVENT_TRACKS_CHANGED, listener -> listener.onTracksChanged(newPlayerInfo.currentTracks));
+          EVENT_TRACKS_CHANGED, listener -> listener.onTracksChanged(playerInfo.currentTracks));
     }
     if (!Util.areEqual(oldPlayerInfo.playbackParameters, playerInfo.playbackParameters)) {
       listeners.queueEvent(

File: libraries/session/src/main/java/androidx/media3/session/MediaSession.java
Patch:
@@ -1070,7 +1070,8 @@ default void onPlayerInfoChanged(
         boolean excludeMediaItems,
         boolean excludeMediaItemsMetadata,
         boolean excludeCues,
-        boolean excludeTimeline)
+        boolean excludeTimeline,
+        boolean excludeTracks)
         throws RemoteException {}
 
     default void onPeriodicSessionPositionInfoChanged(

File: libraries/test_session_common/src/main/java/androidx/media3/test/session/common/MediaSessionConstants.java
Patch:
@@ -26,10 +26,12 @@ public class MediaSessionConstants {
   public static final String TEST_WITH_CUSTOM_COMMANDS = "testWithCustomCommands";
   public static final String TEST_CONTROLLER_LISTENER_SESSION_REJECTS = "connection_sessionRejects";
   public static final String TEST_IS_SESSION_COMMAND_AVAILABLE = "testIsSessionCommandAvailable";
+  public static final String TEST_COMMAND_GET_TRACKS = "testCommandGetTracksUnavailable";
 
   // Bundle keys
   public static final String KEY_AVAILABLE_SESSION_COMMANDS = "availableSessionCommands";
   public static final String KEY_CONTROLLER = "controllerKey";
+  public static final String KEY_COMMAND_GET_TASKS_UNAVAILABLE = "commandGetTasksUnavailable";
 
   private MediaSessionConstants() {}
 }

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/AndroidTestUtil.java
Patch:
@@ -84,6 +84,9 @@ public final class AndroidTestUtil {
           .setFrameRate(30.472f)
           .build();
 
+  public static final String MP4_ASSET_1080P_1_SECOND_HDR10_VIDEO_SDR_CONTAINER =
+      "asset:///media/mp4/hdr10-video-with-sdr-container.mp4";
+
   public static final String MP4_REMOTE_10_SECONDS_URI_STRING =
       "https://storage.googleapis.com/exoplayer-test-media-1/mp4/android-screens-10s.mp4";
   public static final Format MP4_REMOTE_10_SECONDS_FORMAT =

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -150,8 +150,6 @@ public void onFrameProcessingEnded() {
     decoder =
         decoderFactory.createForVideoDecoding(
             inputFormat, frameProcessor.getInputSurface(), isToneMappingRequired);
-    // TODO(b/236316454): Check in the decoder output format whether tone-mapping was actually
-    //  applied and throw an exception if not.
     maxPendingFrameCount = decoder.getMaxPendingFrameCount();
   }
 

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/AndroidTestUtil.java
Patch:
@@ -84,6 +84,9 @@ public final class AndroidTestUtil {
           .setFrameRate(30.472f)
           .build();
 
+  public static final String MP4_ASSET_1080P_1_SECOND_HDR10_VIDEO_SDR_CONTAINER =
+      "asset:///media/mp4/hdr10-video-with-sdr-container.mp4";
+
   public static final String MP4_REMOTE_10_SECONDS_URI_STRING =
       "https://storage.googleapis.com/exoplayer-test-media-1/mp4/android-screens-10s.mp4";
   public static final Format MP4_REMOTE_10_SECONDS_FORMAT =

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -150,8 +150,6 @@ public void onFrameProcessingEnded() {
     decoder =
         decoderFactory.createForVideoDecoding(
             inputFormat, frameProcessor.getInputSurface(), isToneMappingRequired);
-    // TODO(b/236316454): Check in the decoder output format whether tone-mapping was actually
-    //  applied and throw an exception if not.
     maxPendingFrameCount = decoder.getMaxPendingFrameCount();
   }
 

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/VideoEncoderWrapperTest.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.android.exoplayer2.MediaItem;
 import com.google.android.exoplayer2.util.Clock;
 import com.google.android.exoplayer2.util.ListenerSet;
+import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.common.collect.ImmutableList;
 import java.util.List;
 import org.junit.Before;
@@ -47,7 +48,7 @@ public final class VideoEncoderWrapperTest {
   private final VideoTranscodingSamplePipeline.EncoderWrapper encoderWrapper =
       new VideoTranscodingSamplePipeline.EncoderWrapper(
           fakeEncoderFactory,
-          /* inputFormat= */ new Format.Builder().build(),
+          /* inputFormat= */ new Format.Builder().setSampleMimeType(MimeTypes.VIDEO_H265).build(),
           /* allowedOutputMimeTypes= */ ImmutableList.of(),
           emptyTransformationRequest,
           fallbackListener);

File: libraries/transformer/src/test/java/androidx/media3/transformer/VideoEncoderWrapperTest.java
Patch:
@@ -24,6 +24,7 @@
 import androidx.media3.common.C;
 import androidx.media3.common.Format;
 import androidx.media3.common.MediaItem;
+import androidx.media3.common.MimeTypes;
 import androidx.media3.common.util.Clock;
 import androidx.media3.common.util.ListenerSet;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
@@ -47,7 +48,7 @@ public final class VideoEncoderWrapperTest {
   private final VideoTranscodingSamplePipeline.EncoderWrapper encoderWrapper =
       new VideoTranscodingSamplePipeline.EncoderWrapper(
           fakeEncoderFactory,
-          /* inputFormat= */ new Format.Builder().build(),
+          /* inputFormat= */ new Format.Builder().setSampleMimeType(MimeTypes.VIDEO_H265).build(),
           /* allowedOutputMimeTypes= */ ImmutableList.of(),
           emptyTransformationRequest,
           fallbackListener);

File: libraries/exoplayer_rtsp/src/test/java/androidx/media3/exoplayer/rtsp/reader/RtpH263ReaderTest.java
Patch:
@@ -42,7 +42,7 @@
 public final class RtpH263ReaderTest {
   private static final byte[] FRAME_1_FRAGMENT_1_DATA =
       getBytesFromHexString("80020c0419b7b7d9591f03023e0c37b");
-  private final RtpPacket FRAME_1_FRAGMENT_1 =
+  private static final RtpPacket FRAME_1_FRAGMENT_1 =
       new RtpPacket.Builder()
           .setTimestamp((int) 2599168056L)
           .setSequenceNumber(40289)
@@ -67,7 +67,7 @@ public final class RtpH263ReaderTest {
 
   private static final byte[] FRAME_2_FRAGMENT_1_DATA =
       getBytesFromHexString("800a0e023ffffffffffffffffff");
-  private final RtpPacket FRAME_2_FRAGMENT_1 =
+  private static final RtpPacket FRAME_2_FRAGMENT_1 =
       new RtpPacket.Builder()
           .setTimestamp((int) 2599168344L)
           .setSequenceNumber(40291)
@@ -174,7 +174,7 @@ public void consume_outOfOrderPackets() {
         FRAME_1_FRAGMENT_1.timestamp, FRAME_1_FRAGMENT_1.sequenceNumber);
     consume(h263Reader, FRAME_1_FRAGMENT_1);
     consume(h263Reader, FRAME_2_FRAGMENT_1);
-    consume(h263Reader, FRAME_1_FRAGMENT_1);
+    consume(h263Reader, FRAME_1_FRAGMENT_2);
     consume(h263Reader, FRAME_2_FRAGMENT_2);
 
     trackOutput = extractorOutput.trackOutputs.get(0);

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpVp8Reader.java
Patch:
@@ -36,7 +36,7 @@
 /* package */ final class RtpVp8Reader implements RtpPayloadReader {
   private static final String TAG = "RtpVP8Reader";
 
-  /** VP9 uses a 90 KHz media clock (RFC7741 Section 4.1). */
+  /** VP8 uses a 90 KHz media clock (RFC7741 Section 4.1). */
   private static final long MEDIA_CLOCK_FREQUENCY = 90_000;
 
   private final RtpPayloadFormat payloadFormat;

File: library/rtsp/src/test/java/com/google/android/exoplayer2/source/rtsp/reader/RtpVp8ReaderTest.java
Patch:
@@ -39,7 +39,7 @@
 @RunWith(AndroidJUnit4.class)
 public final class RtpVp8ReaderTest {
 
-  /** VP9 uses a 90 KHz media clock (RFC7741 Section 4.1). */
+  /** VP8 uses a 90 KHz media clock (RFC7741 Section 4.1). */
   private static final long MEDIA_CLOCK_FREQUENCY = 90_000;
 
   private static final byte[] PARTITION_1 = getBytesFromHexString("000102030405060708090A0B0C0D0E");
@@ -61,7 +61,7 @@ public final class RtpVp8ReaderTest {
       new RtpPacket.Builder()
           .setTimestamp(PARTITION_1_RTP_TIMESTAMP)
           .setSequenceNumber(40290)
-          .setMarker(false)
+          .setMarker(true)
           .setPayloadData(Bytes.concat(getBytesFromHexString("00"), PARTITION_1_FRAGMENT_2))
           .build();
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/video/HevcConfig.java
Patch:
@@ -45,7 +45,7 @@ public static HevcConfig parse(ParsableByteArray data) throws ParserException {
       int csdLength = 0;
       int csdStartPosition = data.getPosition();
       for (int i = 0; i < numberOfArrays; i++) {
-        data.skipBytes(1); // completeness (1), nal_unit_type (7)
+        data.skipBytes(1); // completeness (1), reserved (1), nal_unit_type (6)
         int numberOfNalUnits = data.readUnsignedShort();
         for (int j = 0; j < numberOfNalUnits; j++) {
           int nalUnitLength = data.readUnsignedShort();
@@ -63,7 +63,8 @@ public static HevcConfig parse(ParsableByteArray data) throws ParserException {
       float pixelWidthHeightRatio = 1;
       @Nullable String codecs = null;
       for (int i = 0; i < numberOfArrays; i++) {
-        int nalUnitType = data.readUnsignedByte() & 0x7F; // completeness (1), nal_unit_type (7)
+        int nalUnitType =
+            data.readUnsignedByte() & 0x3F; // completeness (1), reserved (1), nal_unit_type (6)
         int numberOfNalUnits = data.readUnsignedShort();
         for (int j = 0; j < numberOfNalUnits; j++) {
           int nalUnitLength = data.readUnsignedShort();

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/RtpVp8Reader.java
Patch:
@@ -36,7 +36,7 @@
 /* package */ final class RtpVp8Reader implements RtpPayloadReader {
   private static final String TAG = "RtpVP8Reader";
 
-  /** VP9 uses a 90 KHz media clock (RFC7741 Section 4.1). */
+  /** VP8 uses a 90 KHz media clock (RFC7741 Section 4.1). */
   private static final long MEDIA_CLOCK_FREQUENCY = 90_000;
 
   private final RtpPayloadFormat payloadFormat;

File: libraries/exoplayer_rtsp/src/test/java/androidx/media3/exoplayer/rtsp/reader/RtpVp8ReaderTest.java
Patch:
@@ -39,7 +39,7 @@
 @RunWith(AndroidJUnit4.class)
 public final class RtpVp8ReaderTest {
 
-  /** VP9 uses a 90 KHz media clock (RFC7741 Section 4.1). */
+  /** VP8 uses a 90 KHz media clock (RFC7741 Section 4.1). */
   private static final long MEDIA_CLOCK_FREQUENCY = 90_000;
 
   private static final byte[] PARTITION_1 = getBytesFromHexString("000102030405060708090A0B0C0D0E");
@@ -61,7 +61,7 @@ public final class RtpVp8ReaderTest {
       new RtpPacket.Builder()
           .setTimestamp(PARTITION_1_RTP_TIMESTAMP)
           .setSequenceNumber(40290)
-          .setMarker(false)
+          .setMarker(true)
           .setPayloadData(Bytes.concat(getBytesFromHexString("00"), PARTITION_1_FRAGMENT_2))
           .build();
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/HevcConfig.java
Patch:
@@ -46,7 +46,7 @@ public static HevcConfig parse(ParsableByteArray data) throws ParserException {
       int csdLength = 0;
       int csdStartPosition = data.getPosition();
       for (int i = 0; i < numberOfArrays; i++) {
-        data.skipBytes(1); // completeness (1), nal_unit_type (7)
+        data.skipBytes(1); // completeness (1), reserved (1), nal_unit_type (6)
         int numberOfNalUnits = data.readUnsignedShort();
         for (int j = 0; j < numberOfNalUnits; j++) {
           int nalUnitLength = data.readUnsignedShort();
@@ -64,7 +64,8 @@ public static HevcConfig parse(ParsableByteArray data) throws ParserException {
       float pixelWidthHeightRatio = 1;
       @Nullable String codecs = null;
       for (int i = 0; i < numberOfArrays; i++) {
-        int nalUnitType = data.readUnsignedByte() & 0x7F; // completeness (1), nal_unit_type (7)
+        int nalUnitType =
+            data.readUnsignedByte() & 0x3F; // completeness (1), reserved (1), nal_unit_type (6)
         int numberOfNalUnits = data.readUnsignedShort();
         for (int j = 0; j < numberOfNalUnits; j++) {
           int nalUnitLength = data.readUnsignedShort();

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpVp8Reader.java
Patch:
@@ -36,7 +36,7 @@
 /* package */ final class RtpVp8Reader implements RtpPayloadReader {
   private static final String TAG = "RtpVP8Reader";
 
-  /** VP9 uses a 90 KHz media clock (RFC7741 Section 4.1). */
+  /** VP8 uses a 90 KHz media clock (RFC7741 Section 4.1). */
   private static final long MEDIA_CLOCK_FREQUENCY = 90_000;
 
   private final RtpPayloadFormat payloadFormat;

File: library/rtsp/src/test/java/com/google/android/exoplayer2/source/rtsp/reader/RtpVp8ReaderTest.java
Patch:
@@ -39,7 +39,7 @@
 @RunWith(AndroidJUnit4.class)
 public final class RtpVp8ReaderTest {
 
-  /** VP9 uses a 90 KHz media clock (RFC7741 Section 4.1). */
+  /** VP8 uses a 90 KHz media clock (RFC7741 Section 4.1). */
   private static final long MEDIA_CLOCK_FREQUENCY = 90_000;
 
   private static final byte[] PARTITION_1 = getBytesFromHexString("000102030405060708090A0B0C0D0E");
@@ -61,7 +61,7 @@ public final class RtpVp8ReaderTest {
       new RtpPacket.Builder()
           .setTimestamp(PARTITION_1_RTP_TIMESTAMP)
           .setSequenceNumber(40290)
-          .setMarker(false)
+          .setMarker(true)
           .setPayloadData(Bytes.concat(getBytesFromHexString("00"), PARTITION_1_FRAGMENT_2))
           .build();
 

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/RtpVp8Reader.java
Patch:
@@ -36,7 +36,7 @@
 /* package */ final class RtpVp8Reader implements RtpPayloadReader {
   private static final String TAG = "RtpVP8Reader";
 
-  /** VP9 uses a 90 KHz media clock (RFC7741 Section 4.1). */
+  /** VP8 uses a 90 KHz media clock (RFC7741 Section 4.1). */
   private static final long MEDIA_CLOCK_FREQUENCY = 90_000;
 
   private final RtpPayloadFormat payloadFormat;

File: libraries/exoplayer_rtsp/src/test/java/androidx/media3/exoplayer/rtsp/reader/RtpVp8ReaderTest.java
Patch:
@@ -39,7 +39,7 @@
 @RunWith(AndroidJUnit4.class)
 public final class RtpVp8ReaderTest {
 
-  /** VP9 uses a 90 KHz media clock (RFC7741 Section 4.1). */
+  /** VP8 uses a 90 KHz media clock (RFC7741 Section 4.1). */
   private static final long MEDIA_CLOCK_FREQUENCY = 90_000;
 
   private static final byte[] PARTITION_1 = getBytesFromHexString("000102030405060708090A0B0C0D0E");
@@ -61,7 +61,7 @@ public final class RtpVp8ReaderTest {
       new RtpPacket.Builder()
           .setTimestamp(PARTITION_1_RTP_TIMESTAMP)
           .setSequenceNumber(40290)
-          .setMarker(false)
+          .setMarker(true)
           .setPayloadData(Bytes.concat(getBytesFromHexString("00"), PARTITION_1_FRAGMENT_2))
           .build();
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/video/HevcConfig.java
Patch:
@@ -45,7 +45,7 @@ public static HevcConfig parse(ParsableByteArray data) throws ParserException {
       int csdLength = 0;
       int csdStartPosition = data.getPosition();
       for (int i = 0; i < numberOfArrays; i++) {
-        data.skipBytes(1); // completeness (1), nal_unit_type (7)
+        data.skipBytes(1); // completeness (1), reserved (1), nal_unit_type (6)
         int numberOfNalUnits = data.readUnsignedShort();
         for (int j = 0; j < numberOfNalUnits; j++) {
           int nalUnitLength = data.readUnsignedShort();
@@ -63,7 +63,8 @@ public static HevcConfig parse(ParsableByteArray data) throws ParserException {
       float pixelWidthHeightRatio = 1;
       @Nullable String codecs = null;
       for (int i = 0; i < numberOfArrays; i++) {
-        int nalUnitType = data.readUnsignedByte() & 0x7F; // completeness (1), nal_unit_type (7)
+        int nalUnitType =
+            data.readUnsignedByte() & 0x3F; // completeness (1), reserved (1), nal_unit_type (6)
         int numberOfNalUnits = data.readUnsignedShort();
         for (int j = 0; j < numberOfNalUnits; j++) {
           int nalUnitLength = data.readUnsignedShort();

File: libraries/extractor/src/main/java/androidx/media3/extractor/HevcConfig.java
Patch:
@@ -46,7 +46,7 @@ public static HevcConfig parse(ParsableByteArray data) throws ParserException {
       int csdLength = 0;
       int csdStartPosition = data.getPosition();
       for (int i = 0; i < numberOfArrays; i++) {
-        data.skipBytes(1); // completeness (1), nal_unit_type (7)
+        data.skipBytes(1); // completeness (1), reserved (1), nal_unit_type (6)
         int numberOfNalUnits = data.readUnsignedShort();
         for (int j = 0; j < numberOfNalUnits; j++) {
           int nalUnitLength = data.readUnsignedShort();
@@ -64,7 +64,8 @@ public static HevcConfig parse(ParsableByteArray data) throws ParserException {
       float pixelWidthHeightRatio = 1;
       @Nullable String codecs = null;
       for (int i = 0; i < numberOfArrays; i++) {
-        int nalUnitType = data.readUnsignedByte() & 0x7F; // completeness (1), nal_unit_type (7)
+        int nalUnitType =
+            data.readUnsignedByte() & 0x3F; // completeness (1), reserved (1), nal_unit_type (6)
         int numberOfNalUnits = data.readUnsignedShort();
         for (int j = 0; j < numberOfNalUnits; j++) {
           int nalUnitLength = data.readUnsignedShort();

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultEncoderFactory.java
Patch:
@@ -33,6 +33,7 @@
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.util.Log;
+import com.google.android.exoplayer2.util.MediaFormatUtil;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
 import com.google.common.collect.ImmutableList;
@@ -252,6 +253,7 @@ public Codec createForVideoEncoding(Format format, List<String> allowedMimeTypes
       adjustMediaFormatForH264EncoderSettings(mediaFormat, encoderInfo);
     }
 
+    MediaFormatUtil.maybeSetColorInfo(mediaFormat, format.colorInfo);
     mediaFormat.setInteger(
         MediaFormat.KEY_COLOR_FORMAT, supportedVideoEncoderSettings.colorProfile);
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -1659,7 +1659,7 @@ private static EsdsData parseEsdsFromParent(ParsableByteArray parent, int positi
       parent.skipBytes(2);
     }
     if ((flags & 0x40 /* URL_Flag */) != 0) {
-      parent.skipBytes(parent.readUnsignedShort());
+      parent.skipBytes(parent.readUnsignedByte());
     }
     if ((flags & 0x20 /* OCRstreamFlag */) != 0) {
       parent.skipBytes(2);

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -38,6 +38,7 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ExoPlayer;
 import com.google.android.exoplayer2.MediaItem;
+import com.google.android.exoplayer2.transformer.DebugViewProvider;
 import com.google.android.exoplayer2.transformer.DefaultEncoderFactory;
 import com.google.android.exoplayer2.transformer.GlEffect;
 import com.google.android.exoplayer2.transformer.GlTextureProcessor;
@@ -418,7 +419,7 @@ private void showToast(@StringRes int messageResource) {
     Toast.makeText(getApplicationContext(), getString(messageResource), Toast.LENGTH_LONG).show();
   }
 
-  private final class DemoDebugViewProvider implements Transformer.DebugViewProvider {
+  private final class DemoDebugViewProvider implements DebugViewProvider {
 
     private @MonotonicNonNull SurfaceView surfaceView;
     private int width;

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/GlEffectsFrameProcessorPixelTest.java
Patch:
@@ -378,7 +378,7 @@ public void onFrameProcessingEnded() {
                   },
                   /* streamOffsetUs= */ 0L,
                   effects,
-                  Transformer.DebugViewProvider.NONE,
+                  DebugViewProvider.NONE,
                   /* enableExperimentalHdrEditing= */ false));
       glEffectsFrameProcessor.setInputFrameInfo(
           new FrameInfo(inputWidth, inputHeight, pixelWidthHeightRatio));

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/FinalMatrixTransformationProcessorWrapper.java
Patch:
@@ -59,7 +59,7 @@
   private final EGLDisplay eglDisplay;
   private final EGLContext eglContext;
   private final long streamOffsetUs;
-  private final Transformer.DebugViewProvider debugViewProvider;
+  private final DebugViewProvider debugViewProvider;
   private final FrameProcessor.Listener frameProcessorListener;
   private final boolean enableExperimentalHdrEditing;
 
@@ -85,7 +85,7 @@ public FinalMatrixTransformationProcessorWrapper(
       ImmutableList<GlMatrixTransformation> matrixTransformations,
       long streamOffsetUs,
       FrameProcessor.Listener frameProcessorListener,
-      Transformer.DebugViewProvider debugViewProvider,
+      DebugViewProvider debugViewProvider,
       boolean enableExperimentalHdrEditing) {
     this.context = context;
     this.matrixTransformations = matrixTransformations;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerVideoRenderer.java
Patch:
@@ -39,7 +39,7 @@
   private final ImmutableList<GlEffect> effects;
   private final Codec.EncoderFactory encoderFactory;
   private final Codec.DecoderFactory decoderFactory;
-  private final Transformer.DebugViewProvider debugViewProvider;
+  private final DebugViewProvider debugViewProvider;
   private final DecoderInputBuffer decoderInputBuffer;
 
   private @MonotonicNonNull SefSlowMotionFlattener sefSlowMotionFlattener;
@@ -55,7 +55,7 @@ public TransformerVideoRenderer(
       Codec.DecoderFactory decoderFactory,
       Transformer.AsyncErrorListener asyncErrorListener,
       FallbackListener fallbackListener,
-      Transformer.DebugViewProvider debugViewProvider) {
+      DebugViewProvider debugViewProvider) {
     super(
         C.TRACK_TYPE_VIDEO,
         muxerWrapper,

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -60,7 +60,7 @@ public VideoTranscodingSamplePipeline(
       List<String> allowedOutputMimeTypes,
       FallbackListener fallbackListener,
       Transformer.AsyncErrorListener asyncErrorListener,
-      Transformer.DebugViewProvider debugViewProvider)
+      DebugViewProvider debugViewProvider)
       throws TransformationException {
     decoderInputBuffer =
         new DecoderInputBuffer(DecoderInputBuffer.BUFFER_REPLACEMENT_MODE_DISABLED);

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -699,6 +699,7 @@ public void moveMediaItems(int fromIndex, int toIndex, int newFromIndex) {
   @Override
   public void setShuffleOrder(ShuffleOrder shuffleOrder) {
     verifyApplicationThread();
+    this.shuffleOrder = shuffleOrder;
     Timeline timeline = createMaskingTimeline();
     PlaybackInfo newPlaybackInfo =
         maskTimelineAndPosition(
@@ -707,7 +708,6 @@ public void setShuffleOrder(ShuffleOrder shuffleOrder) {
             maskWindowPositionMsOrGetPeriodPositionUs(
                 timeline, getCurrentMediaItemIndex(), getCurrentPosition()));
     pendingOperationAcks++;
-    this.shuffleOrder = shuffleOrder;
     internalPlayer.setShuffleOrder(shuffleOrder);
     updatePlaybackInfo(
         newPlaybackInfo,

File: libraries/session/src/main/java/androidx/media3/session/SimpleBitmapLoader.java
Patch:
@@ -89,6 +89,9 @@ private static Bitmap decode(byte[] data) {
   }
 
   private static Bitmap load(Uri uri) throws IOException {
+    if (uri.getScheme().equals("file")) {
+      return BitmapFactory.decodeFile(uri.getPath());
+    }
     URLConnection connection = new URL(uri.toString()).openConnection();
     if (!(connection instanceof HttpURLConnection)) {
       throw new UnsupportedOperationException("Unsupported scheme: " + uri.getScheme());

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultEncoderFactory.java
Patch:
@@ -34,6 +34,7 @@
 import androidx.media3.common.Format;
 import androidx.media3.common.MimeTypes;
 import androidx.media3.common.util.Log;
+import androidx.media3.common.util.MediaFormatUtil;
 import androidx.media3.common.util.UnstableApi;
 import androidx.media3.common.util.Util;
 import com.google.common.collect.ImmutableList;
@@ -254,6 +255,7 @@ public Codec createForVideoEncoding(Format format, List<String> allowedMimeTypes
       adjustMediaFormatForH264EncoderSettings(mediaFormat, encoderInfo);
     }
 
+    MediaFormatUtil.maybeSetColorInfo(mediaFormat, format.colorInfo);
     mediaFormat.setInteger(
         MediaFormat.KEY_COLOR_FORMAT, supportedVideoEncoderSettings.colorProfile);
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/AtomParsers.java
Patch:
@@ -1659,7 +1659,7 @@ private static EsdsData parseEsdsFromParent(ParsableByteArray parent, int positi
       parent.skipBytes(2);
     }
     if ((flags & 0x40 /* URL_Flag */) != 0) {
-      parent.skipBytes(parent.readUnsignedShort());
+      parent.skipBytes(parent.readUnsignedByte());
     }
     if ((flags & 0x20 /* OCRstreamFlag */) != 0) {
       parent.skipBytes(2);

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -41,6 +41,7 @@
 import androidx.media3.common.util.Util;
 import androidx.media3.exoplayer.ExoPlayer;
 import androidx.media3.exoplayer.util.DebugTextViewHelper;
+import androidx.media3.transformer.DebugViewProvider;
 import androidx.media3.transformer.DefaultEncoderFactory;
 import androidx.media3.transformer.GlEffect;
 import androidx.media3.transformer.GlTextureProcessor;
@@ -417,7 +418,7 @@ private void showToast(@StringRes int messageResource) {
     Toast.makeText(getApplicationContext(), getString(messageResource), Toast.LENGTH_LONG).show();
   }
 
-  private final class DemoDebugViewProvider implements Transformer.DebugViewProvider {
+  private final class DemoDebugViewProvider implements DebugViewProvider {
 
     private @MonotonicNonNull SurfaceView surfaceView;
     private int width;

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/GlEffectsFrameProcessorPixelTest.java
Patch:
@@ -378,7 +378,7 @@ public void onFrameProcessingEnded() {
                   },
                   /* streamOffsetUs= */ 0L,
                   effects,
-                  Transformer.DebugViewProvider.NONE,
+                  DebugViewProvider.NONE,
                   /* enableExperimentalHdrEditing= */ false));
       glEffectsFrameProcessor.setInputFrameInfo(
           new FrameInfo(inputWidth, inputHeight, pixelWidthHeightRatio));

File: libraries/transformer/src/main/java/androidx/media3/transformer/FinalMatrixTransformationProcessorWrapper.java
Patch:
@@ -59,7 +59,7 @@
   private final EGLDisplay eglDisplay;
   private final EGLContext eglContext;
   private final long streamOffsetUs;
-  private final Transformer.DebugViewProvider debugViewProvider;
+  private final DebugViewProvider debugViewProvider;
   private final FrameProcessor.Listener frameProcessorListener;
   private final boolean enableExperimentalHdrEditing;
 
@@ -85,7 +85,7 @@ public FinalMatrixTransformationProcessorWrapper(
       ImmutableList<GlMatrixTransformation> matrixTransformations,
       long streamOffsetUs,
       FrameProcessor.Listener frameProcessorListener,
-      Transformer.DebugViewProvider debugViewProvider,
+      DebugViewProvider debugViewProvider,
       boolean enableExperimentalHdrEditing) {
     this.context = context;
     this.matrixTransformations = matrixTransformations;

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerVideoRenderer.java
Patch:
@@ -39,7 +39,7 @@
   private final ImmutableList<GlEffect> effects;
   private final Codec.EncoderFactory encoderFactory;
   private final Codec.DecoderFactory decoderFactory;
-  private final Transformer.DebugViewProvider debugViewProvider;
+  private final DebugViewProvider debugViewProvider;
   private final DecoderInputBuffer decoderInputBuffer;
 
   private @MonotonicNonNull SefSlowMotionFlattener sefSlowMotionFlattener;
@@ -55,7 +55,7 @@ public TransformerVideoRenderer(
       Codec.DecoderFactory decoderFactory,
       Transformer.AsyncErrorListener asyncErrorListener,
       FallbackListener fallbackListener,
-      Transformer.DebugViewProvider debugViewProvider) {
+      DebugViewProvider debugViewProvider) {
     super(
         C.TRACK_TYPE_VIDEO,
         muxerWrapper,

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -60,7 +60,7 @@ public VideoTranscodingSamplePipeline(
       List<String> allowedOutputMimeTypes,
       FallbackListener fallbackListener,
       Transformer.AsyncErrorListener asyncErrorListener,
-      Transformer.DebugViewProvider debugViewProvider)
+      DebugViewProvider debugViewProvider)
       throws TransformationException {
     decoderInputBuffer =
         new DecoderInputBuffer(DecoderInputBuffer.BUFFER_REPLACEMENT_MODE_DISABLED);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayerImpl.java
Patch:
@@ -710,6 +710,7 @@ public void moveMediaItems(int fromIndex, int toIndex, int newFromIndex) {
   @Override
   public void setShuffleOrder(ShuffleOrder shuffleOrder) {
     verifyApplicationThread();
+    this.shuffleOrder = shuffleOrder;
     Timeline timeline = createMaskingTimeline();
     PlaybackInfo newPlaybackInfo =
         maskTimelineAndPosition(
@@ -718,7 +719,6 @@ public void setShuffleOrder(ShuffleOrder shuffleOrder) {
             maskWindowPositionMsOrGetPeriodPositionUs(
                 timeline, getCurrentMediaItemIndex(), getCurrentPosition()));
     pendingOperationAcks++;
-    this.shuffleOrder = shuffleOrder;
     internalPlayer.setShuffleOrder(shuffleOrder);
     updatePlaybackInfo(
         newPlaybackInfo,

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultEncoderFactory.java
Patch:
@@ -34,6 +34,7 @@
 import androidx.media3.common.Format;
 import androidx.media3.common.MimeTypes;
 import androidx.media3.common.util.Log;
+import androidx.media3.common.util.MediaFormatUtil;
 import androidx.media3.common.util.UnstableApi;
 import androidx.media3.common.util.Util;
 import com.google.common.collect.ImmutableList;
@@ -254,6 +255,7 @@ public Codec createForVideoEncoding(Format format, List<String> allowedMimeTypes
       adjustMediaFormatForH264EncoderSettings(mediaFormat, encoderInfo);
     }
 
+    MediaFormatUtil.maybeSetColorInfo(mediaFormat, format.colorInfo);
     mediaFormat.setInteger(
         MediaFormat.KEY_COLOR_FORMAT, supportedVideoEncoderSettings.colorProfile);
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultEncoderFactory.java
Patch:
@@ -33,6 +33,7 @@
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.util.Log;
+import com.google.android.exoplayer2.util.MediaFormatUtil;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
 import com.google.common.collect.ImmutableList;
@@ -252,6 +253,7 @@ public Codec createForVideoEncoding(Format format, List<String> allowedMimeTypes
       adjustMediaFormatForH264EncoderSettings(mediaFormat, encoderInfo);
     }
 
+    MediaFormatUtil.maybeSetColorInfo(mediaFormat, format.colorInfo);
     mediaFormat.setInteger(
         MediaFormat.KEY_COLOR_FORMAT, supportedVideoEncoderSettings.colorProfile);
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -1659,7 +1659,7 @@ private static EsdsData parseEsdsFromParent(ParsableByteArray parent, int positi
       parent.skipBytes(2);
     }
     if ((flags & 0x40 /* URL_Flag */) != 0) {
-      parent.skipBytes(parent.readUnsignedShort());
+      parent.skipBytes(parent.readUnsignedByte());
     }
     if ((flags & 0x20 /* OCRstreamFlag */) != 0) {
       parent.skipBytes(2);

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/AtomParsers.java
Patch:
@@ -1659,7 +1659,7 @@ private static EsdsData parseEsdsFromParent(ParsableByteArray parent, int positi
       parent.skipBytes(2);
     }
     if ((flags & 0x40 /* URL_Flag */) != 0) {
-      parent.skipBytes(parent.readUnsignedShort());
+      parent.skipBytes(parent.readUnsignedByte());
     }
     if ((flags & 0x20 /* OCRstreamFlag */) != 0) {
       parent.skipBytes(2);

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -38,6 +38,7 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ExoPlayer;
 import com.google.android.exoplayer2.MediaItem;
+import com.google.android.exoplayer2.transformer.DebugViewProvider;
 import com.google.android.exoplayer2.transformer.DefaultEncoderFactory;
 import com.google.android.exoplayer2.transformer.GlEffect;
 import com.google.android.exoplayer2.transformer.GlTextureProcessor;
@@ -418,7 +419,7 @@ private void showToast(@StringRes int messageResource) {
     Toast.makeText(getApplicationContext(), getString(messageResource), Toast.LENGTH_LONG).show();
   }
 
-  private final class DemoDebugViewProvider implements Transformer.DebugViewProvider {
+  private final class DemoDebugViewProvider implements DebugViewProvider {
 
     private @MonotonicNonNull SurfaceView surfaceView;
     private int width;

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/GlEffectsFrameProcessorPixelTest.java
Patch:
@@ -378,7 +378,7 @@ public void onFrameProcessingEnded() {
                   },
                   /* streamOffsetUs= */ 0L,
                   effects,
-                  Transformer.DebugViewProvider.NONE,
+                  DebugViewProvider.NONE,
                   /* enableExperimentalHdrEditing= */ false));
       glEffectsFrameProcessor.setInputFrameInfo(
           new FrameInfo(inputWidth, inputHeight, pixelWidthHeightRatio));

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/FinalMatrixTransformationProcessorWrapper.java
Patch:
@@ -59,7 +59,7 @@
   private final EGLDisplay eglDisplay;
   private final EGLContext eglContext;
   private final long streamOffsetUs;
-  private final Transformer.DebugViewProvider debugViewProvider;
+  private final DebugViewProvider debugViewProvider;
   private final FrameProcessor.Listener frameProcessorListener;
   private final boolean enableExperimentalHdrEditing;
 
@@ -85,7 +85,7 @@ public FinalMatrixTransformationProcessorWrapper(
       ImmutableList<GlMatrixTransformation> matrixTransformations,
       long streamOffsetUs,
       FrameProcessor.Listener frameProcessorListener,
-      Transformer.DebugViewProvider debugViewProvider,
+      DebugViewProvider debugViewProvider,
       boolean enableExperimentalHdrEditing) {
     this.context = context;
     this.matrixTransformations = matrixTransformations;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerVideoRenderer.java
Patch:
@@ -39,7 +39,7 @@
   private final ImmutableList<GlEffect> effects;
   private final Codec.EncoderFactory encoderFactory;
   private final Codec.DecoderFactory decoderFactory;
-  private final Transformer.DebugViewProvider debugViewProvider;
+  private final DebugViewProvider debugViewProvider;
   private final DecoderInputBuffer decoderInputBuffer;
 
   private @MonotonicNonNull SefSlowMotionFlattener sefSlowMotionFlattener;
@@ -55,7 +55,7 @@ public TransformerVideoRenderer(
       Codec.DecoderFactory decoderFactory,
       Transformer.AsyncErrorListener asyncErrorListener,
       FallbackListener fallbackListener,
-      Transformer.DebugViewProvider debugViewProvider) {
+      DebugViewProvider debugViewProvider) {
     super(
         C.TRACK_TYPE_VIDEO,
         muxerWrapper,

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -60,7 +60,7 @@ public VideoTranscodingSamplePipeline(
       List<String> allowedOutputMimeTypes,
       FallbackListener fallbackListener,
       Transformer.AsyncErrorListener asyncErrorListener,
-      Transformer.DebugViewProvider debugViewProvider)
+      DebugViewProvider debugViewProvider)
       throws TransformationException {
     decoderInputBuffer =
         new DecoderInputBuffer(DecoderInputBuffer.BUFFER_REPLACEMENT_MODE_DISABLED);

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -41,6 +41,7 @@
 import androidx.media3.common.util.Util;
 import androidx.media3.exoplayer.ExoPlayer;
 import androidx.media3.exoplayer.util.DebugTextViewHelper;
+import androidx.media3.transformer.DebugViewProvider;
 import androidx.media3.transformer.DefaultEncoderFactory;
 import androidx.media3.transformer.GlEffect;
 import androidx.media3.transformer.GlTextureProcessor;
@@ -417,7 +418,7 @@ private void showToast(@StringRes int messageResource) {
     Toast.makeText(getApplicationContext(), getString(messageResource), Toast.LENGTH_LONG).show();
   }
 
-  private final class DemoDebugViewProvider implements Transformer.DebugViewProvider {
+  private final class DemoDebugViewProvider implements DebugViewProvider {
 
     private @MonotonicNonNull SurfaceView surfaceView;
     private int width;

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/GlEffectsFrameProcessorPixelTest.java
Patch:
@@ -378,7 +378,7 @@ public void onFrameProcessingEnded() {
                   },
                   /* streamOffsetUs= */ 0L,
                   effects,
-                  Transformer.DebugViewProvider.NONE,
+                  DebugViewProvider.NONE,
                   /* enableExperimentalHdrEditing= */ false));
       glEffectsFrameProcessor.setInputFrameInfo(
           new FrameInfo(inputWidth, inputHeight, pixelWidthHeightRatio));

File: libraries/transformer/src/main/java/androidx/media3/transformer/FinalMatrixTransformationProcessorWrapper.java
Patch:
@@ -59,7 +59,7 @@
   private final EGLDisplay eglDisplay;
   private final EGLContext eglContext;
   private final long streamOffsetUs;
-  private final Transformer.DebugViewProvider debugViewProvider;
+  private final DebugViewProvider debugViewProvider;
   private final FrameProcessor.Listener frameProcessorListener;
   private final boolean enableExperimentalHdrEditing;
 
@@ -85,7 +85,7 @@ public FinalMatrixTransformationProcessorWrapper(
       ImmutableList<GlMatrixTransformation> matrixTransformations,
       long streamOffsetUs,
       FrameProcessor.Listener frameProcessorListener,
-      Transformer.DebugViewProvider debugViewProvider,
+      DebugViewProvider debugViewProvider,
       boolean enableExperimentalHdrEditing) {
     this.context = context;
     this.matrixTransformations = matrixTransformations;

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerVideoRenderer.java
Patch:
@@ -39,7 +39,7 @@
   private final ImmutableList<GlEffect> effects;
   private final Codec.EncoderFactory encoderFactory;
   private final Codec.DecoderFactory decoderFactory;
-  private final Transformer.DebugViewProvider debugViewProvider;
+  private final DebugViewProvider debugViewProvider;
   private final DecoderInputBuffer decoderInputBuffer;
 
   private @MonotonicNonNull SefSlowMotionFlattener sefSlowMotionFlattener;
@@ -55,7 +55,7 @@ public TransformerVideoRenderer(
       Codec.DecoderFactory decoderFactory,
       Transformer.AsyncErrorListener asyncErrorListener,
       FallbackListener fallbackListener,
-      Transformer.DebugViewProvider debugViewProvider) {
+      DebugViewProvider debugViewProvider) {
     super(
         C.TRACK_TYPE_VIDEO,
         muxerWrapper,

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -60,7 +60,7 @@ public VideoTranscodingSamplePipeline(
       List<String> allowedOutputMimeTypes,
       FallbackListener fallbackListener,
       Transformer.AsyncErrorListener asyncErrorListener,
-      Transformer.DebugViewProvider debugViewProvider)
+      DebugViewProvider debugViewProvider)
       throws TransformationException {
     decoderInputBuffer =
         new DecoderInputBuffer(DecoderInputBuffer.BUFFER_REPLACEMENT_MODE_DISABLED);

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -699,6 +699,7 @@ public void moveMediaItems(int fromIndex, int toIndex, int newFromIndex) {
   @Override
   public void setShuffleOrder(ShuffleOrder shuffleOrder) {
     verifyApplicationThread();
+    this.shuffleOrder = shuffleOrder;
     Timeline timeline = createMaskingTimeline();
     PlaybackInfo newPlaybackInfo =
         maskTimelineAndPosition(
@@ -707,7 +708,6 @@ public void setShuffleOrder(ShuffleOrder shuffleOrder) {
             maskWindowPositionMsOrGetPeriodPositionUs(
                 timeline, getCurrentMediaItemIndex(), getCurrentPosition()));
     pendingOperationAcks++;
-    this.shuffleOrder = shuffleOrder;
     internalPlayer.setShuffleOrder(shuffleOrder);
     updatePlaybackInfo(
         newPlaybackInfo,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayerImpl.java
Patch:
@@ -710,6 +710,7 @@ public void moveMediaItems(int fromIndex, int toIndex, int newFromIndex) {
   @Override
   public void setShuffleOrder(ShuffleOrder shuffleOrder) {
     verifyApplicationThread();
+    this.shuffleOrder = shuffleOrder;
     Timeline timeline = createMaskingTimeline();
     PlaybackInfo newPlaybackInfo =
         maskTimelineAndPosition(
@@ -718,7 +719,6 @@ public void setShuffleOrder(ShuffleOrder shuffleOrder) {
             maskWindowPositionMsOrGetPeriodPositionUs(
                 timeline, getCurrentMediaItemIndex(), getCurrentPosition()));
     pendingOperationAcks++;
-    this.shuffleOrder = shuffleOrder;
     internalPlayer.setShuffleOrder(shuffleOrder);
     updatePlaybackInfo(
         newPlaybackInfo,

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/StubPlayer.java
Patch:
@@ -70,7 +70,7 @@ public void removeListener(Listener listener) {
   }
 
   @Override
-  public PlaybackException getPlayerError() {
+  public @Nullable PlaybackException getPlayerError() {
     throw new UnsupportedOperationException();
   }
 

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/AndroidTestUtil.java
Patch:
@@ -225,7 +225,7 @@ public static final class ForceEncodeEncoderFactory implements Codec.EncoderFact
 
     /** Creates an instance that wraps {@link DefaultEncoderFactory}. */
     public ForceEncodeEncoderFactory(Context context) {
-      encoderFactory = new DefaultEncoderFactory(context);
+      encoderFactory = new DefaultEncoderFactory.Builder(context).build();
     }
 
     /**

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -120,7 +120,7 @@ public Builder(Context context) {
       looper = Util.getCurrentOrMainLooper();
       clock = Clock.DEFAULT;
       listeners = new ListenerSet<>(looper, clock, (listener, flags) -> {});
-      encoderFactory = new DefaultEncoderFactory(this.context);
+      encoderFactory = new DefaultEncoderFactory.Builder(this.context).build();
       decoderFactory = new DefaultDecoderFactory(this.context);
       debugViewProvider = DebugViewProvider.NONE;
       containerMimeType = MimeTypes.VIDEO_MP4;

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/TransformerEndToEndTest.java
Patch:
@@ -751,7 +751,7 @@ private Transformer.Builder createTransformerBuilder(boolean enableFallback) {
         .setClock(clock)
         .setMuxerFactory(new TestMuxerFactory())
         .setEncoderFactory(
-            new DefaultEncoderFactory(context, EncoderSelector.DEFAULT, enableFallback));
+            new DefaultEncoderFactory.Builder(context).setEnableFallback(enableFallback).build());
   }
 
   private static void createEncodersAndDecoders() {

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/AndroidTestUtil.java
Patch:
@@ -225,7 +225,7 @@ public static final class ForceEncodeEncoderFactory implements Codec.EncoderFact
 
     /** Creates an instance that wraps {@link DefaultEncoderFactory}. */
     public ForceEncodeEncoderFactory(Context context) {
-      encoderFactory = new DefaultEncoderFactory(context);
+      encoderFactory = new DefaultEncoderFactory.Builder(context).build();
     }
 
     /**

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -122,7 +122,7 @@ public Builder(Context context) {
       looper = Util.getCurrentOrMainLooper();
       clock = Clock.DEFAULT;
       listeners = new ListenerSet<>(looper, clock, (listener, flags) -> {});
-      encoderFactory = new DefaultEncoderFactory(this.context);
+      encoderFactory = new DefaultEncoderFactory.Builder(this.context).build();
       decoderFactory = new DefaultDecoderFactory(this.context);
       debugViewProvider = DebugViewProvider.NONE;
       containerMimeType = MimeTypes.VIDEO_MP4;

File: libraries/transformer/src/test/java/androidx/media3/transformer/TransformerEndToEndTest.java
Patch:
@@ -751,7 +751,7 @@ private Transformer.Builder createTransformerBuilder(boolean enableFallback) {
         .setClock(clock)
         .setMuxerFactory(new TestMuxerFactory())
         .setEncoderFactory(
-            new DefaultEncoderFactory(context, EncoderSelector.DEFAULT, enableFallback));
+            new DefaultEncoderFactory.Builder(context).setEnableFallback(enableFallback).build());
   }
 
   private static void createEncodersAndDecoders() {

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/AndroidTestUtil.java
Patch:
@@ -225,7 +225,7 @@ public static final class ForceEncodeEncoderFactory implements Codec.EncoderFact
 
     /** Creates an instance that wraps {@link DefaultEncoderFactory}. */
     public ForceEncodeEncoderFactory(Context context) {
-      encoderFactory = new DefaultEncoderFactory(context);
+      encoderFactory = new DefaultEncoderFactory.Builder(context).build();
     }
 
     /**

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -120,7 +120,7 @@ public Builder(Context context) {
       looper = Util.getCurrentOrMainLooper();
       clock = Clock.DEFAULT;
       listeners = new ListenerSet<>(looper, clock, (listener, flags) -> {});
-      encoderFactory = new DefaultEncoderFactory(this.context);
+      encoderFactory = new DefaultEncoderFactory.Builder(this.context).build();
       decoderFactory = new DefaultDecoderFactory(this.context);
       debugViewProvider = DebugViewProvider.NONE;
       containerMimeType = MimeTypes.VIDEO_MP4;

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/TransformerEndToEndTest.java
Patch:
@@ -751,7 +751,7 @@ private Transformer.Builder createTransformerBuilder(boolean enableFallback) {
         .setClock(clock)
         .setMuxerFactory(new TestMuxerFactory())
         .setEncoderFactory(
-            new DefaultEncoderFactory(context, EncoderSelector.DEFAULT, enableFallback));
+            new DefaultEncoderFactory.Builder(context).setEnableFallback(enableFallback).build());
   }
 
   private static void createEncodersAndDecoders() {

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/AndroidTestUtil.java
Patch:
@@ -225,7 +225,7 @@ public static final class ForceEncodeEncoderFactory implements Codec.EncoderFact
 
     /** Creates an instance that wraps {@link DefaultEncoderFactory}. */
     public ForceEncodeEncoderFactory(Context context) {
-      encoderFactory = new DefaultEncoderFactory(context);
+      encoderFactory = new DefaultEncoderFactory.Builder(context).build();
     }
 
     /**

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -122,7 +122,7 @@ public Builder(Context context) {
       looper = Util.getCurrentOrMainLooper();
       clock = Clock.DEFAULT;
       listeners = new ListenerSet<>(looper, clock, (listener, flags) -> {});
-      encoderFactory = new DefaultEncoderFactory(this.context);
+      encoderFactory = new DefaultEncoderFactory.Builder(this.context).build();
       decoderFactory = new DefaultDecoderFactory(this.context);
       debugViewProvider = DebugViewProvider.NONE;
       containerMimeType = MimeTypes.VIDEO_MP4;

File: libraries/transformer/src/test/java/androidx/media3/transformer/TransformerEndToEndTest.java
Patch:
@@ -751,7 +751,7 @@ private Transformer.Builder createTransformerBuilder(boolean enableFallback) {
         .setClock(clock)
         .setMuxerFactory(new TestMuxerFactory())
         .setEncoderFactory(
-            new DefaultEncoderFactory(context, EncoderSelector.DEFAULT, enableFallback));
+            new DefaultEncoderFactory.Builder(context).setEnableFallback(enableFallback).build());
   }
 
   private static void createEncodersAndDecoders() {

File: library/core/src/main/java/com/google/android/exoplayer2/text/TextOutput.java
Patch:
@@ -35,7 +35,7 @@ default void onCues(List<Cue> cues) {}
    * Called when there is a change in the {@link CueGroup}.
    *
    * <p>Both {@link #onCues(List)} and {@link #onCues(CueGroup)} are called when there is a change
-   * in the cues You should only implement one or the other.
+   * in the cues. You should only implement one or the other.
    */
   void onCues(CueGroup cueGroup);
 }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/TextOutput.java
Patch:
@@ -39,7 +39,7 @@ default void onCues(List<Cue> cues) {}
    * Called when there is a change in the {@link CueGroup}.
    *
    * <p>Both {@link #onCues(List)} and {@link #onCues(CueGroup)} are called when there is a change
-   * in the cues You should only implement one or the other.
+   * in the cues. You should only implement one or the other.
    */
   void onCues(CueGroup cueGroup);
 }

File: library/core/src/main/java/com/google/android/exoplayer2/text/TextOutput.java
Patch:
@@ -35,7 +35,7 @@ default void onCues(List<Cue> cues) {}
    * Called when there is a change in the {@link CueGroup}.
    *
    * <p>Both {@link #onCues(List)} and {@link #onCues(CueGroup)} are called when there is a change
-   * in the cues You should only implement one or the other.
+   * in the cues. You should only implement one or the other.
    */
   void onCues(CueGroup cueGroup);
 }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/TextOutput.java
Patch:
@@ -39,7 +39,7 @@ default void onCues(List<Cue> cues) {}
    * Called when there is a change in the {@link CueGroup}.
    *
    * <p>Both {@link #onCues(List)} and {@link #onCues(CueGroup)} are called when there is a change
-   * in the cues You should only implement one or the other.
+   * in the cues. You should only implement one or the other.
    */
   void onCues(CueGroup cueGroup);
 }

File: libraries/session/src/main/java/androidx/media3/session/MediaLibraryServiceLegacyStub.java
Patch:
@@ -24,6 +24,7 @@
 import static androidx.media3.session.LibraryResult.RESULT_SUCCESS;
 import static androidx.media3.session.MediaUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES;
 
+import android.annotation.SuppressLint;
 import android.os.BadParcelableException;
 import android.os.Bundle;
 import android.os.RemoteException;
@@ -116,6 +117,7 @@ public BrowserRoot onGetRoot(
   // TODO(b/192455639): Optimize potential multiple calls of
   //                    MediaBrowserCompat.SubscriptionCallback#onChildrenLoaded() with the same
   //                    content.
+  @SuppressLint("RestrictedApi")
   @Override
   public void onSubscribe(String id, Bundle option) {
     @Nullable ControllerInfo controller = getCurrentController();
@@ -141,6 +143,7 @@ public void onSubscribe(String id, Bundle option) {
         });
   }
 
+  @SuppressLint("RestrictedApi")
   @Override
   public void onUnsubscribe(String id) {
     @Nullable ControllerInfo controller = getCurrentController();

File: library/common/src/main/java/com/google/android/exoplayer2/util/NetworkTypeObserver.java
Patch:
@@ -93,7 +93,7 @@ private NetworkTypeObserver(Context context) {
     networkType = C.NETWORK_TYPE_UNKNOWN;
     IntentFilter filter = new IntentFilter();
     filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
-    context.registerReceiver(/* receiver= */ new Receiver(), filter);
+    Util.registerReceiverNotExported(context, new Receiver(), filter);
   }
 
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/AudioBecomingNoisyManager.java
Patch:
@@ -21,6 +21,7 @@
 import android.content.IntentFilter;
 import android.media.AudioManager;
 import android.os.Handler;
+import com.google.android.exoplayer2.util.Util;
 
 /* package */ final class AudioBecomingNoisyManager {
 
@@ -46,8 +47,8 @@ public AudioBecomingNoisyManager(Context context, Handler eventHandler, EventLis
    */
   public void setEnabled(boolean enabled) {
     if (enabled && !receiverRegistered) {
-      context.registerReceiver(
-          receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
+      Util.registerReceiverNotExported(
+          context, receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
       receiverRegistered = true;
     } else if (!enabled && receiverRegistered) {
       context.unregisterReceiver(receiver);

File: library/core/src/main/java/com/google/android/exoplayer2/StreamVolumeManager.java
Patch:
@@ -74,7 +74,7 @@ public StreamVolumeManager(Context context, Handler eventHandler, Listener liste
     VolumeChangeReceiver receiver = new VolumeChangeReceiver();
     IntentFilter filter = new IntentFilter(VOLUME_CHANGED_ACTION);
     try {
-      applicationContext.registerReceiver(receiver, filter);
+      Util.registerReceiverNotExported(applicationContext, receiver, filter);
       this.receiver = receiver;
     } catch (RuntimeException e) {
       Log.w(TAG, "Error registering stream volume receiver", e);

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioCapabilities.java
Patch:
@@ -86,8 +86,8 @@ public final class AudioCapabilities {
   @SuppressWarnings("InlinedApi")
   public static AudioCapabilities getCapabilities(Context context) {
     Intent intent =
-        context.registerReceiver(
-            /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
+        Util.registerReceiverNotExported(
+            context, /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
     return getCapabilities(context, intent);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/scheduler/RequirementsWatcher.java
Patch:
@@ -109,7 +109,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
       filter.addAction(Intent.ACTION_DEVICE_STORAGE_OK);
     }
     receiver = new DeviceStatusChangeReceiver();
-    context.registerReceiver(receiver, filter, null, handler);
+    Util.registerReceiverNotExported(context, receiver, filter, handler);
     return notMetRequirements;
   }
 

File: libraries/common/src/main/java/androidx/media3/common/util/NetworkTypeObserver.java
Patch:
@@ -94,7 +94,7 @@ private NetworkTypeObserver(Context context) {
     networkType = C.NETWORK_TYPE_UNKNOWN;
     IntentFilter filter = new IntentFilter();
     filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
-    context.registerReceiver(/* receiver= */ new Receiver(), filter);
+    Util.registerReceiverNotExported(context, new Receiver(), filter);
   }
 
   /**

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/AudioBecomingNoisyManager.java
Patch:
@@ -21,6 +21,7 @@
 import android.content.IntentFilter;
 import android.media.AudioManager;
 import android.os.Handler;
+import androidx.media3.common.util.Util;
 
 /* package */ final class AudioBecomingNoisyManager {
 
@@ -46,8 +47,8 @@ public AudioBecomingNoisyManager(Context context, Handler eventHandler, EventLis
    */
   public void setEnabled(boolean enabled) {
     if (enabled && !receiverRegistered) {
-      context.registerReceiver(
-          receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
+      Util.registerReceiverNotExported(
+          context, receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
       receiverRegistered = true;
     } else if (!enabled && receiverRegistered) {
       context.unregisterReceiver(receiver);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/StreamVolumeManager.java
Patch:
@@ -75,7 +75,7 @@ public StreamVolumeManager(Context context, Handler eventHandler, Listener liste
     VolumeChangeReceiver receiver = new VolumeChangeReceiver();
     IntentFilter filter = new IntentFilter(VOLUME_CHANGED_ACTION);
     try {
-      applicationContext.registerReceiver(receiver, filter);
+      Util.registerReceiverNotExported(applicationContext, receiver, filter);
       this.receiver = receiver;
     } catch (RuntimeException e) {
       Log.w(TAG, "Error registering stream volume receiver", e);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioCapabilities.java
Patch:
@@ -88,8 +88,8 @@ public final class AudioCapabilities {
   @SuppressWarnings("InlinedApi")
   public static AudioCapabilities getCapabilities(Context context) {
     Intent intent =
-        context.registerReceiver(
-            /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
+        Util.registerReceiverNotExported(
+            context, /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
     return getCapabilities(context, intent);
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/scheduler/RequirementsWatcher.java
Patch:
@@ -111,7 +111,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
       filter.addAction(Intent.ACTION_DEVICE_STORAGE_OK);
     }
     receiver = new DeviceStatusChangeReceiver();
-    context.registerReceiver(receiver, filter, null, handler);
+    Util.registerReceiverNotExported(context, receiver, filter, handler);
     return notMetRequirements;
   }
 

File: libraries/session/src/main/java/androidx/media3/session/MediaLibraryServiceLegacyStub.java
Patch:
@@ -24,6 +24,7 @@
 import static androidx.media3.session.LibraryResult.RESULT_SUCCESS;
 import static androidx.media3.session.MediaUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES;
 
+import android.annotation.SuppressLint;
 import android.os.BadParcelableException;
 import android.os.Bundle;
 import android.os.RemoteException;
@@ -116,6 +117,7 @@ public BrowserRoot onGetRoot(
   // TODO(b/192455639): Optimize potential multiple calls of
   //                    MediaBrowserCompat.SubscriptionCallback#onChildrenLoaded() with the same
   //                    content.
+  @SuppressLint("RestrictedApi")
   @Override
   public void onSubscribe(String id, Bundle option) {
     @Nullable ControllerInfo controller = getCurrentController();
@@ -141,6 +143,7 @@ public void onSubscribe(String id, Bundle option) {
         });
   }
 
+  @SuppressLint("RestrictedApi")
   @Override
   public void onUnsubscribe(String id) {
     @Nullable ControllerInfo controller = getCurrentController();

File: library/common/src/main/java/com/google/android/exoplayer2/util/NetworkTypeObserver.java
Patch:
@@ -93,7 +93,7 @@ private NetworkTypeObserver(Context context) {
     networkType = C.NETWORK_TYPE_UNKNOWN;
     IntentFilter filter = new IntentFilter();
     filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
-    context.registerReceiver(/* receiver= */ new Receiver(), filter);
+    Util.registerReceiverNotExported(context, new Receiver(), filter);
   }
 
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/AudioBecomingNoisyManager.java
Patch:
@@ -21,6 +21,7 @@
 import android.content.IntentFilter;
 import android.media.AudioManager;
 import android.os.Handler;
+import com.google.android.exoplayer2.util.Util;
 
 /* package */ final class AudioBecomingNoisyManager {
 
@@ -46,8 +47,8 @@ public AudioBecomingNoisyManager(Context context, Handler eventHandler, EventLis
    */
   public void setEnabled(boolean enabled) {
     if (enabled && !receiverRegistered) {
-      context.registerReceiver(
-          receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
+      Util.registerReceiverNotExported(
+          context, receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
       receiverRegistered = true;
     } else if (!enabled && receiverRegistered) {
       context.unregisterReceiver(receiver);

File: library/core/src/main/java/com/google/android/exoplayer2/StreamVolumeManager.java
Patch:
@@ -74,7 +74,7 @@ public StreamVolumeManager(Context context, Handler eventHandler, Listener liste
     VolumeChangeReceiver receiver = new VolumeChangeReceiver();
     IntentFilter filter = new IntentFilter(VOLUME_CHANGED_ACTION);
     try {
-      applicationContext.registerReceiver(receiver, filter);
+      Util.registerReceiverNotExported(applicationContext, receiver, filter);
       this.receiver = receiver;
     } catch (RuntimeException e) {
       Log.w(TAG, "Error registering stream volume receiver", e);

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioCapabilities.java
Patch:
@@ -86,8 +86,8 @@ public final class AudioCapabilities {
   @SuppressWarnings("InlinedApi")
   public static AudioCapabilities getCapabilities(Context context) {
     Intent intent =
-        context.registerReceiver(
-            /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
+        Util.registerReceiverNotExported(
+            context, /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
     return getCapabilities(context, intent);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/scheduler/RequirementsWatcher.java
Patch:
@@ -109,7 +109,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
       filter.addAction(Intent.ACTION_DEVICE_STORAGE_OK);
     }
     receiver = new DeviceStatusChangeReceiver();
-    context.registerReceiver(receiver, filter, null, handler);
+    Util.registerReceiverNotExported(context, receiver, filter, handler);
     return notMetRequirements;
   }
 

File: libraries/common/src/main/java/androidx/media3/common/util/NetworkTypeObserver.java
Patch:
@@ -94,7 +94,7 @@ private NetworkTypeObserver(Context context) {
     networkType = C.NETWORK_TYPE_UNKNOWN;
     IntentFilter filter = new IntentFilter();
     filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
-    context.registerReceiver(/* receiver= */ new Receiver(), filter);
+    Util.registerReceiverNotExported(context, new Receiver(), filter);
   }
 
   /**

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/AudioBecomingNoisyManager.java
Patch:
@@ -21,6 +21,7 @@
 import android.content.IntentFilter;
 import android.media.AudioManager;
 import android.os.Handler;
+import androidx.media3.common.util.Util;
 
 /* package */ final class AudioBecomingNoisyManager {
 
@@ -46,8 +47,8 @@ public AudioBecomingNoisyManager(Context context, Handler eventHandler, EventLis
    */
   public void setEnabled(boolean enabled) {
     if (enabled && !receiverRegistered) {
-      context.registerReceiver(
-          receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
+      Util.registerReceiverNotExported(
+          context, receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
       receiverRegistered = true;
     } else if (!enabled && receiverRegistered) {
       context.unregisterReceiver(receiver);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/StreamVolumeManager.java
Patch:
@@ -75,7 +75,7 @@ public StreamVolumeManager(Context context, Handler eventHandler, Listener liste
     VolumeChangeReceiver receiver = new VolumeChangeReceiver();
     IntentFilter filter = new IntentFilter(VOLUME_CHANGED_ACTION);
     try {
-      applicationContext.registerReceiver(receiver, filter);
+      Util.registerReceiverNotExported(applicationContext, receiver, filter);
       this.receiver = receiver;
     } catch (RuntimeException e) {
       Log.w(TAG, "Error registering stream volume receiver", e);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioCapabilities.java
Patch:
@@ -88,8 +88,8 @@ public final class AudioCapabilities {
   @SuppressWarnings("InlinedApi")
   public static AudioCapabilities getCapabilities(Context context) {
     Intent intent =
-        context.registerReceiver(
-            /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
+        Util.registerReceiverNotExported(
+            context, /* receiver= */ null, new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG));
     return getCapabilities(context, intent);
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/scheduler/RequirementsWatcher.java
Patch:
@@ -111,7 +111,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
       filter.addAction(Intent.ACTION_DEVICE_STORAGE_OK);
     }
     receiver = new DeviceStatusChangeReceiver();
-    context.registerReceiver(receiver, filter, null, handler);
+    Util.registerReceiverNotExported(context, receiver, filter, handler);
     return notMetRequirements;
   }
 

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -2489,6 +2489,7 @@ public static long getNowUnixTimeMs(long elapsedRealtimeEpochOffsetMs) {
    * @param toIndex The index up to which elements should be moved (exclusive).
    * @param newFromIndex The new from index.
    */
+  @SuppressWarnings("ExtendsObject") // See go/lsc-extends-object
   public static <T extends Object> void moveItems(
       List<T> items, int fromIndex, int toIndex, int newFromIndex) {
     ArrayDeque<T> removedItems = new ArrayDeque<>();

File: libraries/common/src/main/java/androidx/media3/common/util/Util.java
Patch:
@@ -2600,6 +2600,7 @@ public static long getNowUnixTimeMs(long elapsedRealtimeEpochOffsetMs) {
    * @param newFromIndex The new from index.
    */
   @UnstableApi
+  @SuppressWarnings("ExtendsObject") // See go/lsc-extends-object
   public static <T extends Object> void moveItems(
       List<T> items, int fromIndex, int toIndex, int newFromIndex) {
     ArrayDeque<T> removedItems = new ArrayDeque<>();

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -2493,6 +2493,7 @@ public static long getNowUnixTimeMs(long elapsedRealtimeEpochOffsetMs) {
    * @param toIndex The index up to which elements should be moved (exclusive).
    * @param newFromIndex The new from index.
    */
+  @SuppressWarnings("ExtendsObject") // See go/lsc-extends-object
   public static <T extends Object> void moveItems(
       List<T> items, int fromIndex, int toIndex, int newFromIndex) {
     ArrayDeque<T> removedItems = new ArrayDeque<>();

File: libraries/common/src/main/java/androidx/media3/common/util/Util.java
Patch:
@@ -2604,6 +2604,7 @@ public static long getNowUnixTimeMs(long elapsedRealtimeEpochOffsetMs) {
    * @param newFromIndex The new from index.
    */
   @UnstableApi
+  @SuppressWarnings("ExtendsObject") // See go/lsc-extends-object
   public static <T extends Object> void moveItems(
       List<T> items, int fromIndex, int toIndex, int newFromIndex) {
     ArrayDeque<T> removedItems = new ArrayDeque<>();

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/MediaPeriodQueueTest.java
Patch:
@@ -1286,7 +1286,7 @@ private static Timeline createMultiPeriodServerSideInsertedTimeline(
           countDownLatch.countDown();
         },
         /* mediaTransferListener= */ null,
-        new PlayerId());
+        PlayerId.UNSET);
     if (!countDownLatch.await(/* timeout= */ 2, SECONDS)) {
       fail();
     }

File: library/core/src/test/java/com/google/android/exoplayer2/MediaPeriodQueueTest.java
Patch:
@@ -1280,7 +1280,7 @@ private static Timeline createMultiPeriodServerSideInsertedTimeline(
           countDownLatch.countDown();
         },
         /* mediaTransferListener= */ null,
-        new PlayerId());
+        PlayerId.UNSET);
     if (!countDownLatch.await(/* timeout= */ 2, SECONDS)) {
       fail();
     }

File: library/core/src/test/java/com/google/android/exoplayer2/MediaPeriodQueueTest.java
Patch:
@@ -1280,7 +1280,7 @@ private static Timeline createMultiPeriodServerSideInsertedTimeline(
           countDownLatch.countDown();
         },
         /* mediaTransferListener= */ null,
-        new PlayerId());
+        PlayerId.UNSET);
     if (!countDownLatch.await(/* timeout= */ 2, SECONDS)) {
       fail();
     }

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/MediaPeriodQueueTest.java
Patch:
@@ -1286,7 +1286,7 @@ private static Timeline createMultiPeriodServerSideInsertedTimeline(
           countDownLatch.countDown();
         },
         /* mediaTransferListener= */ null,
-        new PlayerId());
+        PlayerId.UNSET);
     if (!countDownLatch.await(/* timeout= */ 2, SECONDS)) {
       fail();
     }

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -369,6 +369,7 @@ public ExoPlayerImpl(ExoPlayer.Builder builder, @Nullable Player wrappingPlayer)
       deviceInfo = createDeviceInfo(streamVolumeManager);
       videoSize = VideoSize.UNKNOWN;
 
+      trackSelector.setAudioAttributes(audioAttributes);
       sendRendererMessage(TRACK_TYPE_AUDIO, MSG_SET_AUDIO_SESSION_ID, audioSessionId);
       sendRendererMessage(TRACK_TYPE_VIDEO, MSG_SET_AUDIO_SESSION_ID, audioSessionId);
       sendRendererMessage(TRACK_TYPE_AUDIO, MSG_SET_AUDIO_ATTRIBUTES, audioAttributes);
@@ -1364,6 +1365,7 @@ public void setAudioAttributes(AudioAttributes newAudioAttributes, boolean handl
     }
 
     audioFocusManager.setAudioAttributes(handleAudioFocus ? newAudioAttributes : null);
+    trackSelector.setAudioAttributes(newAudioAttributes);
     boolean playWhenReady = getPlayWhenReady();
     @AudioFocusManager.PlayerCommand
     int playerCommand = audioFocusManager.updateAudioFocus(playWhenReady, getPlaybackState());

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -107,13 +107,15 @@ public final class DownloadHelper {
           DefaultTrackSelector.Parameters.DEFAULT_WITHOUT_CONTEXT
               .buildUpon()
               .setForceHighestSupportedBitrate(true)
+              .setConstrainAudioChannelCountToDeviceCapabilities(false)
               .build();
 
   /** Returns the default parameters used for track selection for downloading. */
   public static DefaultTrackSelector.Parameters getDefaultTrackSelectorParameters(Context context) {
     return DefaultTrackSelector.Parameters.getDefaults(context)
         .buildUpon()
         .setForceHighestSupportedBitrate(true)
+        .setConstrainAudioChannelCountToDeviceCapabilities(false)
         .build();
   }
 

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -260,6 +260,7 @@ private Transformer createTransformer(@Nullable Bundle bundle, String filePath)
           .setRemoveVideo(bundle.getBoolean(ConfigurationActivity.SHOULD_REMOVE_VIDEO))
           .setEncoderFactory(
               new DefaultEncoderFactory(
+                  /* context= */ this,
                   EncoderSelector.DEFAULT,
                   /* enableFallback= */ bundle.getBoolean(ConfigurationActivity.ENABLE_FALLBACK)));
 

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/AndroidTestUtil.java
Patch:
@@ -224,8 +224,8 @@ public static final class ForceEncodeEncoderFactory implements Codec.EncoderFact
     private final Codec.EncoderFactory encoderFactory;
 
     /** Creates an instance that wraps {@link DefaultEncoderFactory}. */
-    public ForceEncodeEncoderFactory() {
-      encoderFactory = Codec.EncoderFactory.DEFAULT;
+    public ForceEncodeEncoderFactory(Context context) {
+      encoderFactory = new DefaultEncoderFactory(context);
     }
 
     /**

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/RepeatedTranscodeTransformationTest.java
Patch:
@@ -48,7 +48,7 @@ public void repeatedTranscode_givesConsistentLengthOutput() throws Exception {
                 new Transformer.Builder(context)
                     .setTransformationRequest(
                         new TransformationRequest.Builder().setRotationDegrees(45).build())
-                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
                     .build())
             .build();
 
@@ -78,7 +78,7 @@ public void repeatedTranscodeNoAudio_givesConsistentLengthOutput() throws Except
                     .setRemoveAudio(true)
                     .setTransformationRequest(
                         new TransformationRequest.Builder().setRotationDegrees(45).build())
-                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
                     .build())
             .build();
 
@@ -107,7 +107,7 @@ public void repeatedTranscodeNoVideo_givesConsistentLengthOutput() throws Except
                 new Transformer.Builder(context)
                     .setRemoveVideo(true)
                     .setTransformationRequest(new TransformationRequest.Builder().build())
-                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
                     .build())
             .build();
 

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/TranscodeQualityTest.java
Patch:
@@ -52,7 +52,7 @@ public void transformWithDecodeEncode_ssimIsGreaterThan90Percent() throws Except
         new Transformer.Builder(context)
             .setTransformationRequest(
                 new TransformationRequest.Builder().setVideoMimeType(MimeTypes.VIDEO_H264).build())
-            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
             .setRemoveAudio(true)
             .build();
 
@@ -119,7 +119,7 @@ public void transcodeAvcToAvc320x240_ssimIsGreaterThan90Percent() throws Excepti
         new Transformer.Builder(context)
             .setTransformationRequest(
                 new TransformationRequest.Builder().setVideoMimeType(MimeTypes.VIDEO_H264).build())
-            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
             .setRemoveAudio(true)
             .build();
 

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/analysis/BitrateAnalysisTest.java
Patch:
@@ -118,6 +118,7 @@ public void analyzeBitrate() throws Exception {
             .setEncoderFactory(
                 new AndroidTestUtil.ForceEncodeEncoderFactory(
                     /* wrappedEncoderFactory= */ new DefaultEncoderFactory(
+                        context,
                         EncoderSelector.DEFAULT,
                         new VideoEncoderSettings.Builder()
                             .setBitrate(bitrate)

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/analysis/EncoderPerformanceAnalysisTest.java
Patch:
@@ -128,6 +128,7 @@ public void analyzeEncoderPerformance() throws Exception {
             .setEncoderFactory(
                 new AndroidTestUtil.ForceEncodeEncoderFactory(
                     /* wrappedEncoderFactory= */ new DefaultEncoderFactory(
+                        context,
                         EncoderSelector.DEFAULT,
                         new VideoEncoderSettings.Builder()
                             .setEncoderPerformanceParameters(operatingRate, priority)

File: libraries/transformer/src/test/java/androidx/media3/transformer/TransformerEndToEndTest.java
Patch:
@@ -750,7 +750,8 @@ private Transformer.Builder createTransformerBuilder(boolean enableFallback) {
     return new Transformer.Builder(context)
         .setClock(clock)
         .setMuxerFactory(new TestMuxerFactory())
-        .setEncoderFactory(new DefaultEncoderFactory(EncoderSelector.DEFAULT, enableFallback));
+        .setEncoderFactory(
+            new DefaultEncoderFactory(context, EncoderSelector.DEFAULT, enableFallback));
   }
 
   private static void createEncodersAndDecoders() {

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -260,6 +260,7 @@ private Transformer createTransformer(@Nullable Bundle bundle, String filePath)
           .setRemoveVideo(bundle.getBoolean(ConfigurationActivity.SHOULD_REMOVE_VIDEO))
           .setEncoderFactory(
               new DefaultEncoderFactory(
+                  /* context= */ this,
                   EncoderSelector.DEFAULT,
                   /* enableFallback= */ bundle.getBoolean(ConfigurationActivity.ENABLE_FALLBACK)));
 

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/AndroidTestUtil.java
Patch:
@@ -224,8 +224,8 @@ public static final class ForceEncodeEncoderFactory implements Codec.EncoderFact
     private final Codec.EncoderFactory encoderFactory;
 
     /** Creates an instance that wraps {@link DefaultEncoderFactory}. */
-    public ForceEncodeEncoderFactory() {
-      encoderFactory = Codec.EncoderFactory.DEFAULT;
+    public ForceEncodeEncoderFactory(Context context) {
+      encoderFactory = new DefaultEncoderFactory(context);
     }
 
     /**

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/RepeatedTranscodeTransformationTest.java
Patch:
@@ -48,7 +48,7 @@ public void repeatedTranscode_givesConsistentLengthOutput() throws Exception {
                 new Transformer.Builder(context)
                     .setTransformationRequest(
                         new TransformationRequest.Builder().setRotationDegrees(45).build())
-                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
                     .build())
             .build();
 
@@ -78,7 +78,7 @@ public void repeatedTranscodeNoAudio_givesConsistentLengthOutput() throws Except
                     .setRemoveAudio(true)
                     .setTransformationRequest(
                         new TransformationRequest.Builder().setRotationDegrees(45).build())
-                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
                     .build())
             .build();
 
@@ -107,7 +107,7 @@ public void repeatedTranscodeNoVideo_givesConsistentLengthOutput() throws Except
                 new Transformer.Builder(context)
                     .setRemoveVideo(true)
                     .setTransformationRequest(new TransformationRequest.Builder().build())
-                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
                     .build())
             .build();
 

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/TranscodeQualityTest.java
Patch:
@@ -52,7 +52,7 @@ public void transformWithDecodeEncode_ssimIsGreaterThan90Percent() throws Except
         new Transformer.Builder(context)
             .setTransformationRequest(
                 new TransformationRequest.Builder().setVideoMimeType(MimeTypes.VIDEO_H264).build())
-            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
             .setRemoveAudio(true)
             .build();
 
@@ -119,7 +119,7 @@ public void transcodeAvcToAvc320x240_ssimIsGreaterThan90Percent() throws Excepti
         new Transformer.Builder(context)
             .setTransformationRequest(
                 new TransformationRequest.Builder().setVideoMimeType(MimeTypes.VIDEO_H264).build())
-            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
             .setRemoveAudio(true)
             .build();
 

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/analysis/BitrateAnalysisTest.java
Patch:
@@ -118,6 +118,7 @@ public void analyzeBitrate() throws Exception {
             .setEncoderFactory(
                 new AndroidTestUtil.ForceEncodeEncoderFactory(
                     /* wrappedEncoderFactory= */ new DefaultEncoderFactory(
+                        context,
                         EncoderSelector.DEFAULT,
                         new VideoEncoderSettings.Builder()
                             .setBitrate(bitrate)

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/analysis/EncoderPerformanceAnalysisTest.java
Patch:
@@ -128,6 +128,7 @@ public void analyzeEncoderPerformance() throws Exception {
             .setEncoderFactory(
                 new AndroidTestUtil.ForceEncodeEncoderFactory(
                     /* wrappedEncoderFactory= */ new DefaultEncoderFactory(
+                        context,
                         EncoderSelector.DEFAULT,
                         new VideoEncoderSettings.Builder()
                             .setEncoderPerformanceParameters(operatingRate, priority)

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/TransformerEndToEndTest.java
Patch:
@@ -750,7 +750,8 @@ private Transformer.Builder createTransformerBuilder(boolean enableFallback) {
     return new Transformer.Builder(context)
         .setClock(clock)
         .setMuxerFactory(new TestMuxerFactory())
-        .setEncoderFactory(new DefaultEncoderFactory(EncoderSelector.DEFAULT, enableFallback));
+        .setEncoderFactory(
+            new DefaultEncoderFactory(context, EncoderSelector.DEFAULT, enableFallback));
   }
 
   private static void createEncodersAndDecoders() {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayerImpl.java
Patch:
@@ -380,6 +380,7 @@ public ExoPlayerImpl(ExoPlayer.Builder builder, @Nullable Player wrappingPlayer)
       deviceInfo = createDeviceInfo(streamVolumeManager);
       videoSize = VideoSize.UNKNOWN;
 
+      trackSelector.setAudioAttributes(audioAttributes);
       sendRendererMessage(TRACK_TYPE_AUDIO, MSG_SET_AUDIO_SESSION_ID, audioSessionId);
       sendRendererMessage(TRACK_TYPE_VIDEO, MSG_SET_AUDIO_SESSION_ID, audioSessionId);
       sendRendererMessage(TRACK_TYPE_AUDIO, MSG_SET_AUDIO_ATTRIBUTES, audioAttributes);
@@ -1375,6 +1376,7 @@ public void setAudioAttributes(AudioAttributes newAudioAttributes, boolean handl
     }
 
     audioFocusManager.setAudioAttributes(handleAudioFocus ? newAudioAttributes : null);
+    trackSelector.setAudioAttributes(newAudioAttributes);
     boolean playWhenReady = getPlayWhenReady();
     @AudioFocusManager.PlayerCommand
     int playerCommand = audioFocusManager.updateAudioFocus(playWhenReady, getPlaybackState());

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadHelper.java
Patch:
@@ -110,13 +110,15 @@ public final class DownloadHelper {
           DefaultTrackSelector.Parameters.DEFAULT_WITHOUT_CONTEXT
               .buildUpon()
               .setForceHighestSupportedBitrate(true)
+              .setConstrainAudioChannelCountToDeviceCapabilities(false)
               .build();
 
   /** Returns the default parameters used for track selection for downloading. */
   public static DefaultTrackSelector.Parameters getDefaultTrackSelectorParameters(Context context) {
     return DefaultTrackSelector.Parameters.getDefaults(context)
         .buildUpon()
         .setForceHighestSupportedBitrate(true)
+        .setConstrainAudioChannelCountToDeviceCapabilities(false)
         .build();
   }
 

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionService.java
Patch:
@@ -43,10 +43,10 @@
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /**
@@ -472,7 +472,8 @@ public MediaSessionServiceStub(MediaSessionService serviceReference) {
       Context context = serviceReference.getApplicationContext();
       handler = new Handler(context.getMainLooper());
       mediaSessionManager = MediaSessionManager.getSessionManager(context);
-      pendingControllers = Collections.newSetFromMap(new ConcurrentHashMap<>());
+      // ConcurrentHashMap has a bug in APIs 21-22 that can result in lost updates.
+      pendingControllers = Collections.synchronizedSet(new HashSet<>());
     }
 
     @Override

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionStub.java
Patch:
@@ -83,10 +83,10 @@
 import java.lang.ref.WeakReference;
 import java.util.Collections;
 import java.util.Deque;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.CancellationException;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutionException;
 
 /**
@@ -109,7 +109,8 @@ public MediaSessionStub(MediaSessionImpl sessionImpl) {
     this.sessionImpl = new WeakReference<>(sessionImpl);
     sessionManager = MediaSessionManager.getSessionManager(sessionImpl.getContext());
     connectedControllersManager = new ConnectedControllersManager<>(sessionImpl);
-    pendingControllers = Collections.newSetFromMap(new ConcurrentHashMap<>());
+    // ConcurrentHashMap has a bug in APIs 21-22 that can result in lost updates.
+    pendingControllers = Collections.synchronizedSet(new HashSet<>());
   }
 
   public ConnectedControllersManager<IBinder> getConnectedControllersManager() {

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -369,6 +369,7 @@ public ExoPlayerImpl(ExoPlayer.Builder builder, @Nullable Player wrappingPlayer)
       deviceInfo = createDeviceInfo(streamVolumeManager);
       videoSize = VideoSize.UNKNOWN;
 
+      trackSelector.setAudioAttributes(audioAttributes);
       sendRendererMessage(TRACK_TYPE_AUDIO, MSG_SET_AUDIO_SESSION_ID, audioSessionId);
       sendRendererMessage(TRACK_TYPE_VIDEO, MSG_SET_AUDIO_SESSION_ID, audioSessionId);
       sendRendererMessage(TRACK_TYPE_AUDIO, MSG_SET_AUDIO_ATTRIBUTES, audioAttributes);
@@ -1364,6 +1365,7 @@ public void setAudioAttributes(AudioAttributes newAudioAttributes, boolean handl
     }
 
     audioFocusManager.setAudioAttributes(handleAudioFocus ? newAudioAttributes : null);
+    trackSelector.setAudioAttributes(newAudioAttributes);
     boolean playWhenReady = getPlayWhenReady();
     @AudioFocusManager.PlayerCommand
     int playerCommand = audioFocusManager.updateAudioFocus(playWhenReady, getPlaybackState());

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -107,13 +107,15 @@ public final class DownloadHelper {
           DefaultTrackSelector.Parameters.DEFAULT_WITHOUT_CONTEXT
               .buildUpon()
               .setForceHighestSupportedBitrate(true)
+              .setConstrainAudioChannelCountToDeviceCapabilities(false)
               .build();
 
   /** Returns the default parameters used for track selection for downloading. */
   public static DefaultTrackSelector.Parameters getDefaultTrackSelectorParameters(Context context) {
     return DefaultTrackSelector.Parameters.getDefaults(context)
         .buildUpon()
         .setForceHighestSupportedBitrate(true)
+        .setConstrainAudioChannelCountToDeviceCapabilities(false)
         .build();
   }
 

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -260,6 +260,7 @@ private Transformer createTransformer(@Nullable Bundle bundle, String filePath)
           .setRemoveVideo(bundle.getBoolean(ConfigurationActivity.SHOULD_REMOVE_VIDEO))
           .setEncoderFactory(
               new DefaultEncoderFactory(
+                  /* context= */ this,
                   EncoderSelector.DEFAULT,
                   /* enableFallback= */ bundle.getBoolean(ConfigurationActivity.ENABLE_FALLBACK)));
 

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/AndroidTestUtil.java
Patch:
@@ -224,8 +224,8 @@ public static final class ForceEncodeEncoderFactory implements Codec.EncoderFact
     private final Codec.EncoderFactory encoderFactory;
 
     /** Creates an instance that wraps {@link DefaultEncoderFactory}. */
-    public ForceEncodeEncoderFactory() {
-      encoderFactory = Codec.EncoderFactory.DEFAULT;
+    public ForceEncodeEncoderFactory(Context context) {
+      encoderFactory = new DefaultEncoderFactory(context);
     }
 
     /**

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/RepeatedTranscodeTransformationTest.java
Patch:
@@ -48,7 +48,7 @@ public void repeatedTranscode_givesConsistentLengthOutput() throws Exception {
                 new Transformer.Builder(context)
                     .setTransformationRequest(
                         new TransformationRequest.Builder().setRotationDegrees(45).build())
-                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
                     .build())
             .build();
 
@@ -78,7 +78,7 @@ public void repeatedTranscodeNoAudio_givesConsistentLengthOutput() throws Except
                     .setRemoveAudio(true)
                     .setTransformationRequest(
                         new TransformationRequest.Builder().setRotationDegrees(45).build())
-                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
                     .build())
             .build();
 
@@ -107,7 +107,7 @@ public void repeatedTranscodeNoVideo_givesConsistentLengthOutput() throws Except
                 new Transformer.Builder(context)
                     .setRemoveVideo(true)
                     .setTransformationRequest(new TransformationRequest.Builder().build())
-                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
                     .build())
             .build();
 

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/TranscodeQualityTest.java
Patch:
@@ -52,7 +52,7 @@ public void transformWithDecodeEncode_ssimIsGreaterThan90Percent() throws Except
         new Transformer.Builder(context)
             .setTransformationRequest(
                 new TransformationRequest.Builder().setVideoMimeType(MimeTypes.VIDEO_H264).build())
-            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
             .setRemoveAudio(true)
             .build();
 
@@ -119,7 +119,7 @@ public void transcodeAvcToAvc320x240_ssimIsGreaterThan90Percent() throws Excepti
         new Transformer.Builder(context)
             .setTransformationRequest(
                 new TransformationRequest.Builder().setVideoMimeType(MimeTypes.VIDEO_H264).build())
-            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
             .setRemoveAudio(true)
             .build();
 

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/analysis/BitrateAnalysisTest.java
Patch:
@@ -118,6 +118,7 @@ public void analyzeBitrate() throws Exception {
             .setEncoderFactory(
                 new AndroidTestUtil.ForceEncodeEncoderFactory(
                     /* wrappedEncoderFactory= */ new DefaultEncoderFactory(
+                        context,
                         EncoderSelector.DEFAULT,
                         new VideoEncoderSettings.Builder()
                             .setBitrate(bitrate)

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/analysis/EncoderPerformanceAnalysisTest.java
Patch:
@@ -128,6 +128,7 @@ public void analyzeEncoderPerformance() throws Exception {
             .setEncoderFactory(
                 new AndroidTestUtil.ForceEncodeEncoderFactory(
                     /* wrappedEncoderFactory= */ new DefaultEncoderFactory(
+                        context,
                         EncoderSelector.DEFAULT,
                         new VideoEncoderSettings.Builder()
                             .setEncoderPerformanceParameters(operatingRate, priority)

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/TransformerEndToEndTest.java
Patch:
@@ -750,7 +750,8 @@ private Transformer.Builder createTransformerBuilder(boolean enableFallback) {
     return new Transformer.Builder(context)
         .setClock(clock)
         .setMuxerFactory(new TestMuxerFactory())
-        .setEncoderFactory(new DefaultEncoderFactory(EncoderSelector.DEFAULT, enableFallback));
+        .setEncoderFactory(
+            new DefaultEncoderFactory(context, EncoderSelector.DEFAULT, enableFallback));
   }
 
   private static void createEncodersAndDecoders() {

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -260,6 +260,7 @@ private Transformer createTransformer(@Nullable Bundle bundle, String filePath)
           .setRemoveVideo(bundle.getBoolean(ConfigurationActivity.SHOULD_REMOVE_VIDEO))
           .setEncoderFactory(
               new DefaultEncoderFactory(
+                  /* context= */ this,
                   EncoderSelector.DEFAULT,
                   /* enableFallback= */ bundle.getBoolean(ConfigurationActivity.ENABLE_FALLBACK)));
 

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/AndroidTestUtil.java
Patch:
@@ -224,8 +224,8 @@ public static final class ForceEncodeEncoderFactory implements Codec.EncoderFact
     private final Codec.EncoderFactory encoderFactory;
 
     /** Creates an instance that wraps {@link DefaultEncoderFactory}. */
-    public ForceEncodeEncoderFactory() {
-      encoderFactory = Codec.EncoderFactory.DEFAULT;
+    public ForceEncodeEncoderFactory(Context context) {
+      encoderFactory = new DefaultEncoderFactory(context);
     }
 
     /**

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/RepeatedTranscodeTransformationTest.java
Patch:
@@ -48,7 +48,7 @@ public void repeatedTranscode_givesConsistentLengthOutput() throws Exception {
                 new Transformer.Builder(context)
                     .setTransformationRequest(
                         new TransformationRequest.Builder().setRotationDegrees(45).build())
-                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
                     .build())
             .build();
 
@@ -78,7 +78,7 @@ public void repeatedTranscodeNoAudio_givesConsistentLengthOutput() throws Except
                     .setRemoveAudio(true)
                     .setTransformationRequest(
                         new TransformationRequest.Builder().setRotationDegrees(45).build())
-                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
                     .build())
             .build();
 
@@ -107,7 +107,7 @@ public void repeatedTranscodeNoVideo_givesConsistentLengthOutput() throws Except
                 new Transformer.Builder(context)
                     .setRemoveVideo(true)
                     .setTransformationRequest(new TransformationRequest.Builder().build())
-                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+                    .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
                     .build())
             .build();
 

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/TranscodeQualityTest.java
Patch:
@@ -52,7 +52,7 @@ public void transformWithDecodeEncode_ssimIsGreaterThan90Percent() throws Except
         new Transformer.Builder(context)
             .setTransformationRequest(
                 new TransformationRequest.Builder().setVideoMimeType(MimeTypes.VIDEO_H264).build())
-            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
             .setRemoveAudio(true)
             .build();
 
@@ -119,7 +119,7 @@ public void transcodeAvcToAvc320x240_ssimIsGreaterThan90Percent() throws Excepti
         new Transformer.Builder(context)
             .setTransformationRequest(
                 new TransformationRequest.Builder().setVideoMimeType(MimeTypes.VIDEO_H264).build())
-            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory())
+            .setEncoderFactory(new AndroidTestUtil.ForceEncodeEncoderFactory(context))
             .setRemoveAudio(true)
             .build();
 

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/analysis/BitrateAnalysisTest.java
Patch:
@@ -118,6 +118,7 @@ public void analyzeBitrate() throws Exception {
             .setEncoderFactory(
                 new AndroidTestUtil.ForceEncodeEncoderFactory(
                     /* wrappedEncoderFactory= */ new DefaultEncoderFactory(
+                        context,
                         EncoderSelector.DEFAULT,
                         new VideoEncoderSettings.Builder()
                             .setBitrate(bitrate)

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/analysis/EncoderPerformanceAnalysisTest.java
Patch:
@@ -128,6 +128,7 @@ public void analyzeEncoderPerformance() throws Exception {
             .setEncoderFactory(
                 new AndroidTestUtil.ForceEncodeEncoderFactory(
                     /* wrappedEncoderFactory= */ new DefaultEncoderFactory(
+                        context,
                         EncoderSelector.DEFAULT,
                         new VideoEncoderSettings.Builder()
                             .setEncoderPerformanceParameters(operatingRate, priority)

File: libraries/transformer/src/test/java/androidx/media3/transformer/TransformerEndToEndTest.java
Patch:
@@ -750,7 +750,8 @@ private Transformer.Builder createTransformerBuilder(boolean enableFallback) {
     return new Transformer.Builder(context)
         .setClock(clock)
         .setMuxerFactory(new TestMuxerFactory())
-        .setEncoderFactory(new DefaultEncoderFactory(EncoderSelector.DEFAULT, enableFallback));
+        .setEncoderFactory(
+            new DefaultEncoderFactory(context, EncoderSelector.DEFAULT, enableFallback));
   }
 
   private static void createEncodersAndDecoders() {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayerImpl.java
Patch:
@@ -380,6 +380,7 @@ public ExoPlayerImpl(ExoPlayer.Builder builder, @Nullable Player wrappingPlayer)
       deviceInfo = createDeviceInfo(streamVolumeManager);
       videoSize = VideoSize.UNKNOWN;
 
+      trackSelector.setAudioAttributes(audioAttributes);
       sendRendererMessage(TRACK_TYPE_AUDIO, MSG_SET_AUDIO_SESSION_ID, audioSessionId);
       sendRendererMessage(TRACK_TYPE_VIDEO, MSG_SET_AUDIO_SESSION_ID, audioSessionId);
       sendRendererMessage(TRACK_TYPE_AUDIO, MSG_SET_AUDIO_ATTRIBUTES, audioAttributes);
@@ -1375,6 +1376,7 @@ public void setAudioAttributes(AudioAttributes newAudioAttributes, boolean handl
     }
 
     audioFocusManager.setAudioAttributes(handleAudioFocus ? newAudioAttributes : null);
+    trackSelector.setAudioAttributes(newAudioAttributes);
     boolean playWhenReady = getPlayWhenReady();
     @AudioFocusManager.PlayerCommand
     int playerCommand = audioFocusManager.updateAudioFocus(playWhenReady, getPlaybackState());

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadHelper.java
Patch:
@@ -110,13 +110,15 @@ public final class DownloadHelper {
           DefaultTrackSelector.Parameters.DEFAULT_WITHOUT_CONTEXT
               .buildUpon()
               .setForceHighestSupportedBitrate(true)
+              .setConstrainAudioChannelCountToDeviceCapabilities(false)
               .build();
 
   /** Returns the default parameters used for track selection for downloading. */
   public static DefaultTrackSelector.Parameters getDefaultTrackSelectorParameters(Context context) {
     return DefaultTrackSelector.Parameters.getDefaults(context)
         .buildUpon()
         .setForceHighestSupportedBitrate(true)
+        .setConstrainAudioChannelCountToDeviceCapabilities(false)
         .build();
   }
 

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionService.java
Patch:
@@ -43,10 +43,10 @@
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /**
@@ -472,7 +472,8 @@ public MediaSessionServiceStub(MediaSessionService serviceReference) {
       Context context = serviceReference.getApplicationContext();
       handler = new Handler(context.getMainLooper());
       mediaSessionManager = MediaSessionManager.getSessionManager(context);
-      pendingControllers = Collections.newSetFromMap(new ConcurrentHashMap<>());
+      // ConcurrentHashMap has a bug in APIs 21-22 that can result in lost updates.
+      pendingControllers = Collections.synchronizedSet(new HashSet<>());
     }
 
     @Override

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionStub.java
Patch:
@@ -83,10 +83,10 @@
 import java.lang.ref.WeakReference;
 import java.util.Collections;
 import java.util.Deque;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.CancellationException;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutionException;
 
 /**
@@ -109,7 +109,8 @@ public MediaSessionStub(MediaSessionImpl sessionImpl) {
     this.sessionImpl = new WeakReference<>(sessionImpl);
     sessionManager = MediaSessionManager.getSessionManager(sessionImpl.getContext());
     connectedControllersManager = new ConnectedControllersManager<>(sessionImpl);
-    pendingControllers = Collections.newSetFromMap(new ConcurrentHashMap<>());
+    // ConcurrentHashMap has a bug in APIs 21-22 that can result in lost updates.
+    pendingControllers = Collections.synchronizedSet(new HashSet<>());
   }
 
   public ConnectedControllersManager<IBinder> getConnectedControllersManager() {

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/BitmapOverlayProcessor.java
Patch:
@@ -44,7 +44,7 @@
  */
 // TODO(b/227625365): Delete this class and use a texture processor from the Transformer library,
 //  once overlaying a bitmap and text is supported in Transformer.
-/* package */ final class BitmapOverlayProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class BitmapOverlayProcessor extends SingleFrameGlTextureProcessor {
   static {
     GlUtil.glAssertionsEnabled = true;
   }
@@ -147,6 +147,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     if (glProgram != null) {
       glProgram.delete();
     }

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/PeriodicVignetteProcessor.java
Patch:
@@ -30,7 +30,7 @@
  * A {@link SingleFrameGlTextureProcessor} that periodically dims the frames such that pixels are
  * darker the further they are away from the frame center.
  */
-/* package */ final class PeriodicVignetteProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class PeriodicVignetteProcessor extends SingleFrameGlTextureProcessor {
   static {
     GlUtil.glAssertionsEnabled = true;
   }
@@ -108,6 +108,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     if (glProgram != null) {
       glProgram.delete();
     }

File: demos/transformer/src/withMediaPipe/java/androidx/media3/demo/transformer/MediaPipeProcessor.java
Patch:
@@ -40,7 +40,7 @@
  * Runs a MediaPipe graph on input frames. The implementation is currently limited to graphs that
  * can immediately produce one output frame per input frame.
  */
-/* package */ final class MediaPipeProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class MediaPipeProcessor extends SingleFrameGlTextureProcessor {
 
   private static final LibraryLoader LOADER =
       new LibraryLoader("mediapipe_jni") {
@@ -160,6 +160,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     checkStateNotNull(frameProcessor).close();
   }
 }

File: libraries/transformer/src/main/java/androidx/media3/transformer/ExternalTextureProcessor.java
Patch:
@@ -26,7 +26,7 @@
 import java.io.IOException;
 
 /** Copies frames from an external texture and applies color transformations for HDR if needed. */
-/* package */ class ExternalTextureProcessor implements SingleFrameGlTextureProcessor {
+/* package */ class ExternalTextureProcessor extends SingleFrameGlTextureProcessor {
 
   static {
     GlUtil.glAssertionsEnabled = true;
@@ -115,6 +115,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     if (glProgram != null) {
       glProgram.delete();
     }

File: libraries/transformer/src/main/java/androidx/media3/transformer/MatrixTransformationProcessor.java
Patch:
@@ -41,7 +41,7 @@
  */
 @UnstableApi
 @SuppressWarnings("FunctionalInterfaceClash") // b/228192298
-/* package */ final class MatrixTransformationProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class MatrixTransformationProcessor extends SingleFrameGlTextureProcessor {
 
   static {
     GlUtil.glAssertionsEnabled = true;
@@ -171,6 +171,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     glProgram.delete();
   }
 

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/BitmapOverlayProcessor.java
Patch:
@@ -44,7 +44,7 @@
  */
 // TODO(b/227625365): Delete this class and use a texture processor from the Transformer library,
 //  once overlaying a bitmap and text is supported in Transformer.
-/* package */ final class BitmapOverlayProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class BitmapOverlayProcessor extends SingleFrameGlTextureProcessor {
   static {
     GlUtil.glAssertionsEnabled = true;
   }
@@ -147,6 +147,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     if (glProgram != null) {
       glProgram.delete();
     }

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/PeriodicVignetteProcessor.java
Patch:
@@ -30,7 +30,7 @@
  * A {@link SingleFrameGlTextureProcessor} that periodically dims the frames such that pixels are
  * darker the further they are away from the frame center.
  */
-/* package */ final class PeriodicVignetteProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class PeriodicVignetteProcessor extends SingleFrameGlTextureProcessor {
   static {
     GlUtil.glAssertionsEnabled = true;
   }
@@ -108,6 +108,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     if (glProgram != null) {
       glProgram.delete();
     }

File: demos/transformer/src/withMediaPipe/java/androidx/media3/demo/transformer/MediaPipeProcessor.java
Patch:
@@ -40,7 +40,7 @@
  * Runs a MediaPipe graph on input frames. The implementation is currently limited to graphs that
  * can immediately produce one output frame per input frame.
  */
-/* package */ final class MediaPipeProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class MediaPipeProcessor extends SingleFrameGlTextureProcessor {
 
   private static final LibraryLoader LOADER =
       new LibraryLoader("mediapipe_jni") {
@@ -160,6 +160,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     checkStateNotNull(frameProcessor).close();
   }
 }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExternalTextureProcessor.java
Patch:
@@ -26,7 +26,7 @@
 import java.io.IOException;
 
 /** Copies frames from an external texture and applies color transformations for HDR if needed. */
-/* package */ class ExternalTextureProcessor implements SingleFrameGlTextureProcessor {
+/* package */ class ExternalTextureProcessor extends SingleFrameGlTextureProcessor {
 
   static {
     GlUtil.glAssertionsEnabled = true;
@@ -115,6 +115,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     if (glProgram != null) {
       glProgram.delete();
     }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/MatrixTransformationProcessor.java
Patch:
@@ -39,7 +39,7 @@
  * <p>The background color of the output frame will be black.
  */
 @SuppressWarnings("FunctionalInterfaceClash") // b/228192298
-/* package */ final class MatrixTransformationProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class MatrixTransformationProcessor extends SingleFrameGlTextureProcessor {
 
   static {
     GlUtil.glAssertionsEnabled = true;
@@ -169,6 +169,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     glProgram.delete();
   }
 

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/BitmapOverlayProcessor.java
Patch:
@@ -44,7 +44,7 @@
  */
 // TODO(b/227625365): Delete this class and use a texture processor from the Transformer library,
 //  once overlaying a bitmap and text is supported in Transformer.
-/* package */ final class BitmapOverlayProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class BitmapOverlayProcessor extends SingleFrameGlTextureProcessor {
   static {
     GlUtil.glAssertionsEnabled = true;
   }
@@ -147,6 +147,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     if (glProgram != null) {
       glProgram.delete();
     }

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/PeriodicVignetteProcessor.java
Patch:
@@ -30,7 +30,7 @@
  * A {@link SingleFrameGlTextureProcessor} that periodically dims the frames such that pixels are
  * darker the further they are away from the frame center.
  */
-/* package */ final class PeriodicVignetteProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class PeriodicVignetteProcessor extends SingleFrameGlTextureProcessor {
   static {
     GlUtil.glAssertionsEnabled = true;
   }
@@ -108,6 +108,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     if (glProgram != null) {
       glProgram.delete();
     }

File: demos/transformer/src/withMediaPipe/java/androidx/media3/demo/transformer/MediaPipeProcessor.java
Patch:
@@ -40,7 +40,7 @@
  * Runs a MediaPipe graph on input frames. The implementation is currently limited to graphs that
  * can immediately produce one output frame per input frame.
  */
-/* package */ final class MediaPipeProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class MediaPipeProcessor extends SingleFrameGlTextureProcessor {
 
   private static final LibraryLoader LOADER =
       new LibraryLoader("mediapipe_jni") {
@@ -160,6 +160,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     checkStateNotNull(frameProcessor).close();
   }
 }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExternalTextureProcessor.java
Patch:
@@ -26,7 +26,7 @@
 import java.io.IOException;
 
 /** Copies frames from an external texture and applies color transformations for HDR if needed. */
-/* package */ class ExternalTextureProcessor implements SingleFrameGlTextureProcessor {
+/* package */ class ExternalTextureProcessor extends SingleFrameGlTextureProcessor {
 
   static {
     GlUtil.glAssertionsEnabled = true;
@@ -115,6 +115,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     if (glProgram != null) {
       glProgram.delete();
     }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/MatrixTransformationProcessor.java
Patch:
@@ -39,7 +39,7 @@
  * <p>The background color of the output frame will be black.
  */
 @SuppressWarnings("FunctionalInterfaceClash") // b/228192298
-/* package */ final class MatrixTransformationProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class MatrixTransformationProcessor extends SingleFrameGlTextureProcessor {
 
   static {
     GlUtil.glAssertionsEnabled = true;
@@ -169,6 +169,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     glProgram.delete();
   }
 

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/BitmapOverlayProcessor.java
Patch:
@@ -44,7 +44,7 @@
  */
 // TODO(b/227625365): Delete this class and use a texture processor from the Transformer library,
 //  once overlaying a bitmap and text is supported in Transformer.
-/* package */ final class BitmapOverlayProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class BitmapOverlayProcessor extends SingleFrameGlTextureProcessor {
   static {
     GlUtil.glAssertionsEnabled = true;
   }
@@ -147,6 +147,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     if (glProgram != null) {
       glProgram.delete();
     }

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/PeriodicVignetteProcessor.java
Patch:
@@ -30,7 +30,7 @@
  * A {@link SingleFrameGlTextureProcessor} that periodically dims the frames such that pixels are
  * darker the further they are away from the frame center.
  */
-/* package */ final class PeriodicVignetteProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class PeriodicVignetteProcessor extends SingleFrameGlTextureProcessor {
   static {
     GlUtil.glAssertionsEnabled = true;
   }
@@ -108,6 +108,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     if (glProgram != null) {
       glProgram.delete();
     }

File: demos/transformer/src/withMediaPipe/java/androidx/media3/demo/transformer/MediaPipeProcessor.java
Patch:
@@ -40,7 +40,7 @@
  * Runs a MediaPipe graph on input frames. The implementation is currently limited to graphs that
  * can immediately produce one output frame per input frame.
  */
-/* package */ final class MediaPipeProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class MediaPipeProcessor extends SingleFrameGlTextureProcessor {
 
   private static final LibraryLoader LOADER =
       new LibraryLoader("mediapipe_jni") {
@@ -160,6 +160,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     checkStateNotNull(frameProcessor).close();
   }
 }

File: libraries/transformer/src/main/java/androidx/media3/transformer/ExternalTextureProcessor.java
Patch:
@@ -26,7 +26,7 @@
 import java.io.IOException;
 
 /** Copies frames from an external texture and applies color transformations for HDR if needed. */
-/* package */ class ExternalTextureProcessor implements SingleFrameGlTextureProcessor {
+/* package */ class ExternalTextureProcessor extends SingleFrameGlTextureProcessor {
 
   static {
     GlUtil.glAssertionsEnabled = true;
@@ -115,6 +115,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     if (glProgram != null) {
       glProgram.delete();
     }

File: libraries/transformer/src/main/java/androidx/media3/transformer/MatrixTransformationProcessor.java
Patch:
@@ -41,7 +41,7 @@
  */
 @UnstableApi
 @SuppressWarnings("FunctionalInterfaceClash") // b/228192298
-/* package */ final class MatrixTransformationProcessor implements SingleFrameGlTextureProcessor {
+/* package */ final class MatrixTransformationProcessor extends SingleFrameGlTextureProcessor {
 
   static {
     GlUtil.glAssertionsEnabled = true;
@@ -171,6 +171,7 @@ public void drawFrame(int inputTexId, long presentationTimeUs) throws FrameProce
 
   @Override
   public void release() {
+    super.release();
     glProgram.delete();
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadHelper.java
Patch:
@@ -746,7 +746,7 @@ public void addTrackSelectionForSingleRenderer(
       List<SelectionOverride> overrides) {
     try {
       assertPreparedWithMedia();
-      DefaultTrackSelector.ParametersBuilder builder = trackSelectorParameters.buildUpon();
+      DefaultTrackSelector.Parameters.Builder builder = trackSelectorParameters.buildUpon();
       for (int i = 0; i < mappedTrackInfos[periodIndex].getRendererCount(); i++) {
         builder.setRendererDisabled(/* rendererIndex= */ i, /* disabled= */ i != rendererIndex);
       }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/TrackSelectionUtil.java
Patch:
@@ -98,7 +98,7 @@ public static DefaultTrackSelector.Parameters updateParametersWithOverride(
       TrackGroupArray trackGroupArray,
       boolean isDisabled,
       @Nullable SelectionOverride override) {
-    DefaultTrackSelector.ParametersBuilder builder =
+    DefaultTrackSelector.Parameters.Builder builder =
         parameters
             .buildUpon()
             .clearSelectionOverrides(rendererIndex)

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -743,7 +743,7 @@ public void addTrackSelectionForSingleRenderer(
       List<SelectionOverride> overrides) {
     try {
       assertPreparedWithMedia();
-      DefaultTrackSelector.ParametersBuilder builder = trackSelectorParameters.buildUpon();
+      DefaultTrackSelector.Parameters.Builder builder = trackSelectorParameters.buildUpon();
       for (int i = 0; i < mappedTrackInfos[periodIndex].getRendererCount(); i++) {
         builder.setRendererDisabled(/* rendererIndex= */ i, /* disabled= */ i != rendererIndex);
       }

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelectionUtil.java
Patch:
@@ -96,7 +96,7 @@ public static DefaultTrackSelector.Parameters updateParametersWithOverride(
       TrackGroupArray trackGroupArray,
       boolean isDisabled,
       @Nullable SelectionOverride override) {
-    DefaultTrackSelector.ParametersBuilder builder =
+    DefaultTrackSelector.Parameters.Builder builder =
         parameters
             .buildUpon()
             .clearSelectionOverrides(rendererIndex)

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadHelper.java
Patch:
@@ -746,7 +746,7 @@ public void addTrackSelectionForSingleRenderer(
       List<SelectionOverride> overrides) {
     try {
       assertPreparedWithMedia();
-      DefaultTrackSelector.ParametersBuilder builder = trackSelectorParameters.buildUpon();
+      DefaultTrackSelector.Parameters.Builder builder = trackSelectorParameters.buildUpon();
       for (int i = 0; i < mappedTrackInfos[periodIndex].getRendererCount(); i++) {
         builder.setRendererDisabled(/* rendererIndex= */ i, /* disabled= */ i != rendererIndex);
       }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/TrackSelectionUtil.java
Patch:
@@ -98,7 +98,7 @@ public static DefaultTrackSelector.Parameters updateParametersWithOverride(
       TrackGroupArray trackGroupArray,
       boolean isDisabled,
       @Nullable SelectionOverride override) {
-    DefaultTrackSelector.ParametersBuilder builder =
+    DefaultTrackSelector.Parameters.Builder builder =
         parameters
             .buildUpon()
             .clearSelectionOverrides(rendererIndex)

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -743,7 +743,7 @@ public void addTrackSelectionForSingleRenderer(
       List<SelectionOverride> overrides) {
     try {
       assertPreparedWithMedia();
-      DefaultTrackSelector.ParametersBuilder builder = trackSelectorParameters.buildUpon();
+      DefaultTrackSelector.Parameters.Builder builder = trackSelectorParameters.buildUpon();
       for (int i = 0; i < mappedTrackInfos[periodIndex].getRendererCount(); i++) {
         builder.setRendererDisabled(/* rendererIndex= */ i, /* disabled= */ i != rendererIndex);
       }

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelectionUtil.java
Patch:
@@ -96,7 +96,7 @@ public static DefaultTrackSelector.Parameters updateParametersWithOverride(
       TrackGroupArray trackGroupArray,
       boolean isDisabled,
       @Nullable SelectionOverride override) {
-    DefaultTrackSelector.ParametersBuilder builder =
+    DefaultTrackSelector.Parameters.Builder builder =
         parameters
             .buildUpon()
             .clearSelectionOverrides(rendererIndex)

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -1193,9 +1193,7 @@ private void writeBuffer(ByteBuffer buffer, long avSyncPresentationTimeUs) throw
           && listener != null
           && bytesWritten < bytesRemaining
           && !isWaitingForOffloadEndOfStreamHandled) {
-        long pendingDurationMs =
-            audioTrackPositionTracker.getPendingBufferDurationMs(writtenEncodedFrames);
-        listener.onOffloadBufferFull(pendingDurationMs);
+        listener.onOffloadBufferFull();
       }
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
Patch:
@@ -926,9 +926,9 @@ public void onOffloadBufferEmptying() {
     }
 
     @Override
-    public void onOffloadBufferFull(long bufferEmptyingDeadlineMs) {
+    public void onOffloadBufferFull() {
       if (wakeupListener != null) {
-        wakeupListener.onSleep(bufferEmptyingDeadlineMs);
+        wakeupListener.onSleep();
       }
     }
 

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/analysis/BitrateAnalysisTest.java
Patch:
@@ -19,7 +19,9 @@
 import static android.media.MediaCodecInfo.EncoderCapabilities.BITRATE_MODE_VBR;
 
 import android.content.Context;
+import android.net.Uri;
 import androidx.test.core.app.ApplicationProvider;
+import com.google.android.exoplayer2.MediaItem;
 import com.google.android.exoplayer2.transformer.AndroidTestUtil;
 import com.google.android.exoplayer2.transformer.DefaultEncoderFactory;
 import com.google.android.exoplayer2.transformer.EncoderSelector;
@@ -116,6 +118,6 @@ public void analyzeBitrate() throws Exception {
         .setInputValues(inputValues)
         .setCalculateSsim(true)
         .build()
-        .run(testId, fileUri);
+        .run(testId, MediaItem.fromUri(Uri.parse(fileUri)));
   }
 }

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/analysis/EncoderPerformanceAnalysisTest.java
Patch:
@@ -23,6 +23,7 @@
 import android.media.MediaFormat;
 import android.net.Uri;
 import androidx.test.core.app.ApplicationProvider;
+import com.google.android.exoplayer2.MediaItem;
 import com.google.android.exoplayer2.transformer.AndroidTestUtil;
 import com.google.android.exoplayer2.transformer.DefaultEncoderFactory;
 import com.google.android.exoplayer2.transformer.EncoderSelector;
@@ -136,6 +137,6 @@ public void analyzeEncoderPerformance() throws Exception {
     new TransformerAndroidTestRunner.Builder(context, transformer)
         .setInputValues(inputValues)
         .build()
-        .run(testId, fileUri);
+        .run(testId, MediaItem.fromUri(Uri.parse(fileUri)));
   }
 }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformationRequest.java
Patch:
@@ -88,6 +88,9 @@ private Builder(TransformationRequest transformationRequest) {
      * Mp4Extractor#FLAG_READ_SEF_DATA} is set on the {@link Mp4Extractor} used. Otherwise, the slow
      * motion metadata will be ignored and the input won't be flattened.
      *
+     * <p>Using slow motion flattening together with {@link
+     * com.google.android.exoplayer2.MediaItem.ClippingConfiguration} is not supported yet.
+     *
      * @param flattenForSlowMotion Whether to flatten for slow motion.
      * @return This builder.
      */

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerAudioRenderer.java
Patch:
@@ -70,7 +70,8 @@ protected boolean ensureConfigured() throws TransformationException {
     Format inputFormat = checkNotNull(formatHolder.format);
     if (shouldPassthrough(inputFormat)) {
       samplePipeline =
-          new PassthroughSamplePipeline(inputFormat, transformationRequest, fallbackListener);
+          new PassthroughSamplePipeline(
+              inputFormat, startPositionOffsetUs, transformationRequest, fallbackListener);
     } else {
       samplePipeline =
           new AudioTranscodingSamplePipeline(

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerBaseRenderer.java
Patch:
@@ -45,6 +45,7 @@
   protected boolean muxerWrapperTrackAdded;
   protected boolean muxerWrapperTrackEnded;
   protected long streamOffsetUs;
+  protected long startPositionOffsetUs;
   protected @MonotonicNonNull SamplePipeline samplePipeline;
 
   public TransformerBaseRenderer(
@@ -109,6 +110,7 @@ public final void render(long positionUs, long elapsedRealtimeUs) throws ExoPlay
   @Override
   protected final void onStreamChanged(Format[] formats, long startPositionUs, long offsetUs) {
     this.streamOffsetUs = offsetUs;
+    this.startPositionOffsetUs = startPositionUs - offsetUs;
   }
 
   @Override

File: libraries/session/src/main/java/androidx/media3/session/MediaLibrarySessionImpl.java
Patch:
@@ -63,9 +63,8 @@ public MediaLibrarySessionImpl(
       Player player,
       @Nullable PendingIntent sessionActivity,
       MediaLibrarySession.Callback callback,
-      MediaSession.MediaItemFiller mediaItemFiller,
       Bundle tokenExtras) {
-    super(instance, context, id, player, sessionActivity, callback, mediaItemFiller, tokenExtras);
+    super(instance, context, id, player, sessionActivity, callback, tokenExtras);
     this.instance = instance;
     this.callback = callback;
     subscriptions = new ArrayMap<>();

File: libraries/test_session_current/src/main/java/androidx/media3/session/MediaTestUtils.java
Patch:
@@ -58,8 +58,8 @@ public static MediaItem createMediaItem(String mediaId) {
     return new MediaItem.Builder().setMediaId(mediaId).setMediaMetadata(mediaMetadata).build();
   }
 
-  public static List<MediaItem> createMediaItems(int size) {
-    List<MediaItem> list = new ArrayList<>();
+  public static ArrayList<MediaItem> createMediaItems(int size) {
+    ArrayList<MediaItem> list = new ArrayList<>();
     for (int i = 0; i < size; i++) {
       list.add(createMediaItem("mediaItem_" + (i + 1)));
     }

File: libraries/session/src/main/java/androidx/media3/session/MediaNotification.java
Patch:
@@ -157,7 +157,7 @@ MediaNotification createNotification(
    *
    * @param notificationId The notification id to be used for {@link NotificationManager#notify(int,
    *     Notification)}.
-   * @param notification A {@link Notification} that reflects the sate of a {@link MediaController}
+   * @param notification A {@link Notification} that reflects the state of a {@link MediaController}
    *     and to send media commands to a {@link MediaSession}. The notification may be used to start
    *     a service in the <a
    *     href="https://developer.android.com/guide/components/foreground-services">foreground</a>.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/DefaultAudioSink.java
Patch:
@@ -1202,9 +1202,7 @@ private void writeBuffer(ByteBuffer buffer, long avSyncPresentationTimeUs) throw
           && listener != null
           && bytesWritten < bytesRemaining
           && !isWaitingForOffloadEndOfStreamHandled) {
-        long pendingDurationMs =
-            audioTrackPositionTracker.getPendingBufferDurationMs(writtenEncodedFrames);
-        listener.onOffloadBufferFull(pendingDurationMs);
+        listener.onOffloadBufferFull();
       }
     }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/MediaCodecAudioRenderer.java
Patch:
@@ -930,9 +930,9 @@ public void onOffloadBufferEmptying() {
     }
 
     @Override
-    public void onOffloadBufferFull(long bufferEmptyingDeadlineMs) {
+    public void onOffloadBufferFull() {
       if (wakeupListener != null) {
-        wakeupListener.onSleep(bufferEmptyingDeadlineMs);
+        wakeupListener.onSleep();
       }
     }
 

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/analysis/BitrateAnalysisTest.java
Patch:
@@ -19,6 +19,8 @@
 import static android.media.MediaCodecInfo.EncoderCapabilities.BITRATE_MODE_VBR;
 
 import android.content.Context;
+import android.net.Uri;
+import androidx.media3.common.MediaItem;
 import androidx.media3.common.util.Assertions;
 import androidx.media3.transformer.AndroidTestUtil;
 import androidx.media3.transformer.DefaultEncoderFactory;
@@ -116,6 +118,6 @@ public void analyzeBitrate() throws Exception {
         .setInputValues(inputValues)
         .setCalculateSsim(true)
         .build()
-        .run(testId, fileUri);
+        .run(testId, MediaItem.fromUri(Uri.parse(fileUri)));
   }
 }

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/analysis/EncoderPerformanceAnalysisTest.java
Patch:
@@ -22,6 +22,7 @@
 import android.content.Context;
 import android.media.MediaFormat;
 import android.net.Uri;
+import androidx.media3.common.MediaItem;
 import androidx.media3.common.util.Util;
 import androidx.media3.transformer.AndroidTestUtil;
 import androidx.media3.transformer.DefaultEncoderFactory;
@@ -136,6 +137,6 @@ public void analyzeEncoderPerformance() throws Exception {
     new TransformerAndroidTestRunner.Builder(context, transformer)
         .setInputValues(inputValues)
         .build()
-        .run(testId, fileUri);
+        .run(testId, MediaItem.fromUri(Uri.parse(fileUri)));
   }
 }

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformationRequest.java
Patch:
@@ -90,6 +90,9 @@ private Builder(TransformationRequest transformationRequest) {
      * Mp4Extractor#FLAG_READ_SEF_DATA} is set on the {@link Mp4Extractor} used. Otherwise, the slow
      * motion metadata will be ignored and the input won't be flattened.
      *
+     * <p>Using slow motion flattening together with {@link
+     * androidx.media3.common.MediaItem.ClippingConfiguration} is not supported yet.
+     *
      * @param flattenForSlowMotion Whether to flatten for slow motion.
      * @return This builder.
      */

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerAudioRenderer.java
Patch:
@@ -70,7 +70,8 @@ protected boolean ensureConfigured() throws TransformationException {
     Format inputFormat = checkNotNull(formatHolder.format);
     if (shouldPassthrough(inputFormat)) {
       samplePipeline =
-          new PassthroughSamplePipeline(inputFormat, transformationRequest, fallbackListener);
+          new PassthroughSamplePipeline(
+              inputFormat, startPositionOffsetUs, transformationRequest, fallbackListener);
     } else {
       samplePipeline =
           new AudioTranscodingSamplePipeline(

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerBaseRenderer.java
Patch:
@@ -45,6 +45,7 @@
   protected boolean muxerWrapperTrackAdded;
   protected boolean muxerWrapperTrackEnded;
   protected long streamOffsetUs;
+  protected long startPositionOffsetUs;
   protected @MonotonicNonNull SamplePipeline samplePipeline;
 
   public TransformerBaseRenderer(
@@ -109,6 +110,7 @@ public final void render(long positionUs, long elapsedRealtimeUs) throws ExoPlay
   @Override
   protected final void onStreamChanged(Format[] formats, long startPositionUs, long offsetUs) {
     this.streamOffsetUs = offsetUs;
+    this.startPositionOffsetUs = startPositionUs - offsetUs;
   }
 
   @Override

File: libraries/common/src/main/java/androidx/media3/common/BasePlayer.java
Patch:
@@ -94,7 +94,7 @@ public final boolean isCommandAvailable(@Command int command) {
   /**
    * {@inheritDoc}
    *
-   * <p>BasePlayer and its descendents will return {@code true}.
+   * <p>BasePlayer and its descendants will return {@code true}.
    */
   @Override
   public final boolean canAdvertiseSession() {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/DefaultTrackSelector.java
Patch:
@@ -653,7 +653,7 @@ public ParametersBuilder setExceedRendererCapabilitiesIfNecessary(
      * supported by the audio and video renderers for the selected tracks.
      *
      * <p>Tunneling is known to have many device specific issues and limitations. Manual testing is
-     * strongly recomended to check that the media plays correctly when this option is enabled. See
+     * strongly recommended to check that the media plays correctly when this option is enabled. See
      * [#9661](https://github.com/google/ExoPlayer/issues/9661),
      * [#9133](https://github.com/google/ExoPlayer/issues/9133),
      * [#9317](https://github.com/google/ExoPlayer/issues/9317),

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/spherical/Projection.java
Patch:
@@ -113,7 +113,7 @@ public static Projection createEquirectangular(
 
       for (int i = 0; i < longitudes + 1; ++i) { // For each vertical edge in the band.
         for (int k = 0; k < 2; ++k) { // For low and high points on an edge.
-          // For each point, determine it's position in polar coordinates.
+          // For each point, determine its position in polar coordinates.
           float phi = k == 0 ? phiLow : phiHigh;
           float theta = quadWidthRads * i + (float) Math.PI - horizontalFovRads / 2;
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/DataSourceContractTest.java
Patch:
@@ -64,7 +64,7 @@
  *
  * <p>Most implementations should pass all these tests. If necessary, subclasses can disable tests
  * by overriding the {@link Test @Test} method with a no-op implementation. It's recommended (but
- * not required) to also annotate this {@link Ignore @Ignore} so that JUnit correclty reports the
+ * not required) to also annotate this {@link Ignore @Ignore} so that JUnit correctly reports the
  * test as skipped/ignored instead of passing.
  */
 @RequiresApi(19)

File: library/common/src/main/java/com/google/android/exoplayer2/BasePlayer.java
Patch:
@@ -92,7 +92,7 @@ public final boolean isCommandAvailable(@Command int command) {
   /**
    * {@inheritDoc}
    *
-   * <p>BasePlayer and its descendents will return {@code true}.
+   * <p>BasePlayer and its descendants will return {@code true}.
    */
   @Override
   public final boolean canAdvertiseSession() {

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
Patch:
@@ -649,7 +649,7 @@ public ParametersBuilder setExceedRendererCapabilitiesIfNecessary(
      * supported by the audio and video renderers for the selected tracks.
      *
      * <p>Tunneling is known to have many device specific issues and limitations. Manual testing is
-     * strongly recomended to check that the media plays correctly when this option is enabled. See
+     * strongly recommended to check that the media plays correctly when this option is enabled. See
      * [#9661](https://github.com/google/ExoPlayer/issues/9661),
      * [#9133](https://github.com/google/ExoPlayer/issues/9133),
      * [#9317](https://github.com/google/ExoPlayer/issues/9317),

File: library/core/src/main/java/com/google/android/exoplayer2/video/spherical/Projection.java
Patch:
@@ -113,7 +113,7 @@ public static Projection createEquirectangular(
 
       for (int i = 0; i < longitudes + 1; ++i) { // For each vertical edge in the band.
         for (int k = 0; k < 2; ++k) { // For low and high points on an edge.
-          // For each point, determine it's position in polar coordinates.
+          // For each point, determine its position in polar coordinates.
           float phi = k == 0 ? phiLow : phiHigh;
           float theta = quadWidthRads * i + (float) Math.PI - horizontalFovRads / 2;
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DataSourceContractTest.java
Patch:
@@ -63,7 +63,7 @@
  *
  * <p>Most implementations should pass all these tests. If necessary, subclasses can disable tests
  * by overriding the {@link Test @Test} method with a no-op implementation. It's recommended (but
- * not required) to also annotate this {@link Ignore @Ignore} so that JUnit correclty reports the
+ * not required) to also annotate this {@link Ignore @Ignore} so that JUnit correctly reports the
  * test as skipped/ignored instead of passing.
  */
 @RequiresApi(19)

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/IntentUtil.java
Patch:
@@ -189,7 +189,7 @@ private static MediaItem.Builder populateDrmPropertiesFromIntent(
                   intent.getBooleanExtra(
                       DRM_FORCE_DEFAULT_LICENSE_URI_EXTRA + extrasKeySuffix, false))
               .setLicenseRequestHeaders(headers)
-              .forceSessionsForAudioAndVideoTracks(
+              .setForceSessionsForAudioAndVideoTracks(
                   intent.getBooleanExtra(DRM_SESSION_FOR_CLEAR_CONTENT + extrasKeySuffix, false))
               .build());
     }

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
Patch:
@@ -455,7 +455,7 @@ private PlaylistHolder readEntry(JsonReader reader, boolean insidePlaylist) thro
               new MediaItem.DrmConfiguration.Builder(drmUuid)
                   .setLicenseUri(drmLicenseUri)
                   .setLicenseRequestHeaders(drmLicenseRequestHeaders)
-                  .forceSessionsForAudioAndVideoTracks(drmSessionForClearContent)
+                  .setForceSessionsForAudioAndVideoTracks(drmSessionForClearContent)
                   .setMultiSession(drmMultiSession)
                   .setForceDefaultLicenseUri(drmForceDefaultLicenseUri)
                   .build());

File: library/common/src/test/java/com/google/android/exoplayer2/MediaItemTest.java
Patch:
@@ -225,7 +225,7 @@ public void drmConfigurationBuilderSetSessionForClearPeriods_overridesSetSession
         new MediaItem.DrmConfiguration.Builder(C.WIDEVINE_UUID)
             .setLicenseUri(licenseUri)
             .setForcedSessionTrackTypes(ImmutableList.of(C.TRACK_TYPE_AUDIO))
-            .forceSessionsForAudioAndVideoTracks(true)
+            .setForceSessionsForAudioAndVideoTracks(true)
             .build();
 
     assertThat(drmConfiguration.sessionForClearTypes)

File: demos/main/src/main/java/androidx/media3/demo/main/IntentUtil.java
Patch:
@@ -188,7 +188,7 @@ private static MediaItem.Builder populateDrmPropertiesFromIntent(
                   intent.getBooleanExtra(
                       DRM_FORCE_DEFAULT_LICENSE_URI_EXTRA + extrasKeySuffix, false))
               .setLicenseRequestHeaders(headers)
-              .forceSessionsForAudioAndVideoTracks(
+              .setForceSessionsForAudioAndVideoTracks(
                   intent.getBooleanExtra(DRM_SESSION_FOR_CLEAR_CONTENT + extrasKeySuffix, false))
               .build());
     }

File: demos/main/src/main/java/androidx/media3/demo/main/SampleChooserActivity.java
Patch:
@@ -458,7 +458,7 @@ private PlaylistHolder readEntry(JsonReader reader, boolean insidePlaylist) thro
               new MediaItem.DrmConfiguration.Builder(drmUuid)
                   .setLicenseUri(drmLicenseUri)
                   .setLicenseRequestHeaders(drmLicenseRequestHeaders)
-                  .forceSessionsForAudioAndVideoTracks(drmSessionForClearContent)
+                  .setForceSessionsForAudioAndVideoTracks(drmSessionForClearContent)
                   .setMultiSession(drmMultiSession)
                   .setForceDefaultLicenseUri(drmForceDefaultLicenseUri)
                   .build());

File: libraries/common/src/test/java/androidx/media3/common/MediaItemTest.java
Patch:
@@ -223,7 +223,7 @@ public void drmConfigurationBuilderSetSessionForClearPeriods_overridesSetSession
         new MediaItem.DrmConfiguration.Builder(C.WIDEVINE_UUID)
             .setLicenseUri(licenseUri)
             .setForcedSessionTrackTypes(ImmutableList.of(C.TRACK_TYPE_AUDIO))
-            .forceSessionsForAudioAndVideoTracks(true)
+            .setForceSessionsForAudioAndVideoTracks(true)
             .build();
 
     assertThat(drmConfiguration.sessionForClearTypes)

File: libraries/datasource/src/main/java/androidx/media3/datasource/HttpDataSource.java
Patch:
@@ -418,7 +418,7 @@ final class InvalidResponseCodeException extends HttpDataSourceException {
     @Nullable public final String responseMessage;
 
     /** An unmodifiable map of the response header fields and values. */
-    public final Map<String, List<String>> headerFields;
+    @UnstableApi public final Map<String, List<String>> headerFields;
 
     /** The response body. */
     public final byte[] responseBody;

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -134,14 +134,14 @@ public Factory(AdsLoader adsLoader, MediaSource.Factory contentMediaSourceFactor
 
     @Override
     public MediaSource.Factory setLoadErrorHandlingPolicy(
-        @Nullable LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
+        LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
       contentMediaSourceFactory.setLoadErrorHandlingPolicy(loadErrorHandlingPolicy);
       return this;
     }
 
     @Override
     public MediaSource.Factory setDrmSessionManagerProvider(
-        @Nullable DrmSessionManagerProvider drmSessionManagerProvider) {
+        DrmSessionManagerProvider drmSessionManagerProvider) {
       contentMediaSourceFactory.setDrmSessionManagerProvider(drmSessionManagerProvider);
       return this;
     }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSourceFactory.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.google.android.exoplayer2.testutil;
 
-import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.MediaItem;
 import com.google.android.exoplayer2.drm.DrmSessionManagerProvider;
@@ -37,13 +36,13 @@ public final class FakeMediaSourceFactory implements MediaSourceFactory {
 
   @Override
   public MediaSourceFactory setDrmSessionManagerProvider(
-      @Nullable DrmSessionManagerProvider drmSessionManagerProvider) {
+      DrmSessionManagerProvider drmSessionManagerProvider) {
     throw new UnsupportedOperationException();
   }
 
   @Override
   public MediaSourceFactory setLoadErrorHandlingPolicy(
-      @Nullable LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
+      LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
     throw new UnsupportedOperationException();
   }
 

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -136,14 +136,14 @@ public Factory(AdsLoader adsLoader, MediaSource.Factory contentMediaSourceFactor
 
     @Override
     public MediaSource.Factory setLoadErrorHandlingPolicy(
-        @Nullable LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
+        LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
       contentMediaSourceFactory.setLoadErrorHandlingPolicy(loadErrorHandlingPolicy);
       return this;
     }
 
     @Override
     public MediaSource.Factory setDrmSessionManagerProvider(
-        @Nullable DrmSessionManagerProvider drmSessionManagerProvider) {
+        DrmSessionManagerProvider drmSessionManagerProvider) {
       contentMediaSourceFactory.setDrmSessionManagerProvider(drmSessionManagerProvider);
       return this;
     }

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeMediaSourceFactory.java
Patch:
@@ -15,7 +15,6 @@
  */
 package androidx.media3.test.utils;
 
-import androidx.annotation.Nullable;
 import androidx.media3.common.AdPlaybackState;
 import androidx.media3.common.C;
 import androidx.media3.common.MediaItem;
@@ -39,13 +38,13 @@ public final class FakeMediaSourceFactory implements MediaSourceFactory {
 
   @Override
   public MediaSourceFactory setDrmSessionManagerProvider(
-      @Nullable DrmSessionManagerProvider drmSessionManagerProvider) {
+      DrmSessionManagerProvider drmSessionManagerProvider) {
     throw new UnsupportedOperationException();
   }
 
   @Override
   public MediaSourceFactory setLoadErrorHandlingPolicy(
-      @Nullable LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
+      LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
     throw new UnsupportedOperationException();
   }
 

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -136,14 +136,14 @@ public Factory(AdsLoader adsLoader, MediaSource.Factory contentMediaSourceFactor
 
     @Override
     public MediaSource.Factory setLoadErrorHandlingPolicy(
-        LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
+        @Nullable LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
       contentMediaSourceFactory.setLoadErrorHandlingPolicy(loadErrorHandlingPolicy);
       return this;
     }
 
     @Override
     public MediaSource.Factory setDrmSessionManagerProvider(
-        DrmSessionManagerProvider drmSessionManagerProvider) {
+        @Nullable DrmSessionManagerProvider drmSessionManagerProvider) {
       contentMediaSourceFactory.setDrmSessionManagerProvider(drmSessionManagerProvider);
       return this;
     }

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeMediaSourceFactory.java
Patch:
@@ -15,6 +15,7 @@
  */
 package androidx.media3.test.utils;
 
+import androidx.annotation.Nullable;
 import androidx.media3.common.AdPlaybackState;
 import androidx.media3.common.C;
 import androidx.media3.common.MediaItem;
@@ -38,13 +39,13 @@ public final class FakeMediaSourceFactory implements MediaSourceFactory {
 
   @Override
   public MediaSourceFactory setDrmSessionManagerProvider(
-      DrmSessionManagerProvider drmSessionManagerProvider) {
+      @Nullable DrmSessionManagerProvider drmSessionManagerProvider) {
     throw new UnsupportedOperationException();
   }
 
   @Override
   public MediaSourceFactory setLoadErrorHandlingPolicy(
-      LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
+      @Nullable LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
     throw new UnsupportedOperationException();
   }
 

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -136,14 +136,14 @@ public Factory(AdsLoader adsLoader, MediaSource.Factory contentMediaSourceFactor
 
     @Override
     public MediaSource.Factory setLoadErrorHandlingPolicy(
-        @Nullable LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
+        LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
       contentMediaSourceFactory.setLoadErrorHandlingPolicy(loadErrorHandlingPolicy);
       return this;
     }
 
     @Override
     public MediaSource.Factory setDrmSessionManagerProvider(
-        @Nullable DrmSessionManagerProvider drmSessionManagerProvider) {
+        DrmSessionManagerProvider drmSessionManagerProvider) {
       contentMediaSourceFactory.setDrmSessionManagerProvider(drmSessionManagerProvider);
       return this;
     }

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeMediaSourceFactory.java
Patch:
@@ -15,7 +15,6 @@
  */
 package androidx.media3.test.utils;
 
-import androidx.annotation.Nullable;
 import androidx.media3.common.AdPlaybackState;
 import androidx.media3.common.C;
 import androidx.media3.common.MediaItem;
@@ -39,13 +38,13 @@ public final class FakeMediaSourceFactory implements MediaSourceFactory {
 
   @Override
   public MediaSourceFactory setDrmSessionManagerProvider(
-      @Nullable DrmSessionManagerProvider drmSessionManagerProvider) {
+      DrmSessionManagerProvider drmSessionManagerProvider) {
     throw new UnsupportedOperationException();
   }
 
   @Override
   public MediaSourceFactory setLoadErrorHandlingPolicy(
-      @Nullable LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
+      LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
     throw new UnsupportedOperationException();
   }
 

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/DefaultHlsDataSourceFactory.java
Patch:
@@ -15,6 +15,7 @@
  */
 package androidx.media3.exoplayer.hls;
 
+import androidx.media3.common.C;
 import androidx.media3.common.util.UnstableApi;
 import androidx.media3.datasource.DataSource;
 
@@ -32,7 +33,7 @@ public DefaultHlsDataSourceFactory(DataSource.Factory dataSourceFactory) {
   }
 
   @Override
-  public DataSource createDataSource(int dataType) {
+  public DataSource createDataSource(@C.DataType int dataType) {
     return dataSourceFactory.createDataSource();
   }
 }

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsDataSourceFactory.java
Patch:
@@ -26,9 +26,8 @@ public interface HlsDataSourceFactory {
   /**
    * Creates a {@link DataSource} for the given data type.
    *
-   * @param dataType The data type for which the {@link DataSource} will be used. One of {@link C}
-   *     {@code .DATA_TYPE_*} constants.
+   * @param dataType The {@link C.DataType} for which the {@link DataSource} will be used.
    * @return A {@link DataSource} for the given data type.
    */
-  DataSource createDataSource(int dataType);
+  DataSource createDataSource(@C.DataType int dataType);
 }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/MediaCodecRenderer.java
Patch:
@@ -1994,7 +1994,8 @@ protected void renderToEndOfStream() throws ExoPlaybackException {
    *
    * @throws ExoPlaybackException If an error occurs processing the signal.
    */
-  @TargetApi(23) // codecDrainAction == DRAIN_ACTION_UPDATE_DRM_SESSION implies SDK_INT >= 23.
+  // codecDrainAction == DRAIN_ACTION_FLUSH_AND_UPDATE_DRM_SESSION implies SDK_INT >= 23.
+  @TargetApi(23)
   private void processEndOfStream() throws ExoPlaybackException {
     switch (codecDrainAction) {
       case DRAIN_ACTION_REINITIALIZE:

File: demos/transformer/src/withMediaPipe/java/androidx/media3/demo/transformer/MediaPipeFrameProcessor.java
Patch:
@@ -29,6 +29,7 @@
 import androidx.media3.transformer.FrameProcessingException;
 import androidx.media3.transformer.GlFrameProcessor;
 import com.google.mediapipe.components.FrameProcessor;
+import com.google.mediapipe.framework.AndroidAssetUtil;
 import com.google.mediapipe.framework.AppTextureFrame;
 import com.google.mediapipe.framework.TextureFrame;
 import com.google.mediapipe.glutil.EglManager;
@@ -89,6 +90,8 @@ public void initialize(Context context, int inputTexId, int inputWidth, int inpu
     this.inputHeight = inputHeight;
     glProgram = new GlProgram(context, COPY_VERTEX_SHADER_NAME, COPY_FRAGMENT_SHADER_NAME);
 
+    AndroidAssetUtil.initializeNativeAssetManager(context);
+
     EglManager eglManager = new EglManager(EGL14.eglGetCurrentContext());
     frameProcessor =
         new FrameProcessor(

File: libraries/transformer/src/main/java/androidx/media3/transformer/FrameProcessorChain.java
Patch:
@@ -159,7 +159,7 @@ private static FrameProcessorChain createOpenGlObjectsAndFrameProcessorChain(
       GlUtil.focusEglSurface(
           eglDisplay, eglContext, EGL14.EGL_NO_SURFACE, /* width= */ 1, /* height= */ 1);
     } else if (enableExperimentalHdrEditing) {
-      // TODO(b/209404935): Don't assume BT.2020 PQ input/output.
+      // TODO(b/227624622): Don't assume BT.2020 PQ input/output.
       GlUtil.focusPlaceholderEglSurfaceBt2020Pq(eglContext, eglDisplay);
     } else {
       GlUtil.focusPlaceholderEglSurface(eglContext, eglDisplay);
@@ -467,7 +467,7 @@ private void createOpenGlSurfaces(Surface outputSurface, @Nullable SurfaceView d
       checkStateNotNull(eglDisplay);
 
       if (enableExperimentalHdrEditing) {
-        // TODO(b/209404935): Don't assume BT.2020 PQ input/output.
+        // TODO(b/227624622): Don't assume BT.2020 PQ input/output.
         eglSurface = GlUtil.getEglSurfaceBt2020Pq(eglDisplay, outputSurface);
         if (debugSurfaceView != null) {
           debugPreviewEglSurface =

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -266,7 +266,7 @@ private Transformer createTransformer(@Nullable Bundle bundle, String filePath)
                             /* inputStreamName= */ "input_video",
                             /* outputStreamName= */ "output_video");
                   } catch (Exception e) {
-                    showToast(R.string.no_media_pipe_error);
+                    runOnUiThread(() -> showToast(R.string.no_media_pipe_error));
                     throw new RuntimeException("Failed to load MediaPipe processor", e);
                   }
                 });

File: libraries/common/src/main/java/androidx/media3/common/util/NetworkTypeObserver.java
Patch:
@@ -279,7 +279,8 @@ public void onDisplayInfoChanged(TelephonyDisplayInfo telephonyDisplayInfo) {
       int overrideNetworkType = telephonyDisplayInfo.getOverrideNetworkType();
       boolean is5gNsa =
           overrideNetworkType == TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_NR_NSA
-              || overrideNetworkType == TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVE;
+              || overrideNetworkType == TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVE
+              || overrideNetworkType == TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_NR_ADVANCED;
       updateNetworkType(is5gNsa ? C.NETWORK_TYPE_5G_NSA : C.NETWORK_TYPE_4G);
     }
   }

File: libraries/common/src/main/java/androidx/media3/common/util/Util.java
Patch:
@@ -2835,6 +2835,7 @@ private static String maybeReplaceLegacyLanguageTags(String languageTag) {
         "ji", "yi",
         // Individual macrolanguage codes mapped back to full macrolanguage code.
         // See https://en.wikipedia.org/wiki/ISO_639_macrolanguage
+        "arb", "ar-arb",
         "in", "ms-ind",
         "ind", "ms-ind",
         "nb", "no-nob",

File: libraries/common/src/test/java/androidx/media3/common/util/UtilTest.java
Patch:
@@ -1162,6 +1162,7 @@ public void normalizeLanguageCode_macrolanguageTags_areFullyMaintained() {
     assertThat(Util.normalizeLanguageCode("ara-ayl")).isEqualTo("ar-ayl");
 
     // Special case of short codes that are actually part of a macrolanguage.
+    assertThat(Util.normalizeLanguageCode("arb")).isEqualTo("ar-arb");
     assertThat(Util.normalizeLanguageCode("nb")).isEqualTo("no-nob");
     assertThat(Util.normalizeLanguageCode("nn")).isEqualTo("no-nno");
     assertThat(Util.normalizeLanguageCode("nob")).isEqualTo("no-nob");

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -607,7 +607,7 @@ private void setAdPlaybackState(AdPlaybackState adPlaybackState) {
   }
 
   @MainThread
-  @EnsuresNonNull("contentTimeline")
+  @EnsuresNonNull("this.contentTimeline")
   private void setContentTimeline(Timeline contentTimeline) {
     if (contentTimeline.equals(this.contentTimeline)) {
       return;

File: demos/main/src/main/java/androidx/media3/demo/main/PlayerActivity.java
Patch:
@@ -314,8 +314,8 @@ private MediaSource.Factory createMediaSourceFactory() {
             serverSideAdsLoader, new DefaultMediaSourceFactory(dataSourceFactory));
     return new DefaultMediaSourceFactory(dataSourceFactory)
         .setDrmSessionManagerProvider(drmSessionManagerProvider)
-        .setAdsLoaderProvider(this::getClientSideAdsLoader)
-        .setAdViewProvider(playerView)
+        .setLocalAdInsertionComponents(
+            this::getClientSideAdsLoader, /* adViewProvider= */ playerView)
         .setServerSideAdInsertionMediaSourceFactory(imaServerSideAdInsertionMediaSourceFactory);
   }
 

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -134,14 +134,14 @@ public Factory(AdsLoader adsLoader, MediaSource.Factory contentMediaSourceFactor
 
     @Override
     public MediaSource.Factory setLoadErrorHandlingPolicy(
-        LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
+        @Nullable LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
       contentMediaSourceFactory.setLoadErrorHandlingPolicy(loadErrorHandlingPolicy);
       return this;
     }
 
     @Override
     public MediaSource.Factory setDrmSessionManagerProvider(
-        DrmSessionManagerProvider drmSessionManagerProvider) {
+        @Nullable DrmSessionManagerProvider drmSessionManagerProvider) {
       contentMediaSourceFactory.setDrmSessionManagerProvider(drmSessionManagerProvider);
       return this;
     }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSourceFactory.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.testutil;
 
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.MediaItem;
 import com.google.android.exoplayer2.drm.DrmSessionManagerProvider;
@@ -36,13 +37,13 @@ public final class FakeMediaSourceFactory implements MediaSourceFactory {
 
   @Override
   public MediaSourceFactory setDrmSessionManagerProvider(
-      DrmSessionManagerProvider drmSessionManagerProvider) {
+      @Nullable DrmSessionManagerProvider drmSessionManagerProvider) {
     throw new UnsupportedOperationException();
   }
 
   @Override
   public MediaSourceFactory setLoadErrorHandlingPolicy(
-      LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
+      @Nullable LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
     throw new UnsupportedOperationException();
   }
 

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -134,14 +134,14 @@ public Factory(AdsLoader adsLoader, MediaSource.Factory contentMediaSourceFactor
 
     @Override
     public MediaSource.Factory setLoadErrorHandlingPolicy(
-        @Nullable LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
+        LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
       contentMediaSourceFactory.setLoadErrorHandlingPolicy(loadErrorHandlingPolicy);
       return this;
     }
 
     @Override
     public MediaSource.Factory setDrmSessionManagerProvider(
-        @Nullable DrmSessionManagerProvider drmSessionManagerProvider) {
+        DrmSessionManagerProvider drmSessionManagerProvider) {
       contentMediaSourceFactory.setDrmSessionManagerProvider(drmSessionManagerProvider);
       return this;
     }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSourceFactory.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.google.android.exoplayer2.testutil;
 
-import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.MediaItem;
 import com.google.android.exoplayer2.drm.DrmSessionManagerProvider;
@@ -37,13 +36,13 @@ public final class FakeMediaSourceFactory implements MediaSourceFactory {
 
   @Override
   public MediaSourceFactory setDrmSessionManagerProvider(
-      @Nullable DrmSessionManagerProvider drmSessionManagerProvider) {
+      DrmSessionManagerProvider drmSessionManagerProvider) {
     throw new UnsupportedOperationException();
   }
 
   @Override
   public MediaSourceFactory setLoadErrorHandlingPolicy(
-      @Nullable LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
+      LoadErrorHandlingPolicy loadErrorHandlingPolicy) {
     throw new UnsupportedOperationException();
   }
 

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/DefaultHlsDataSourceFactory.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.source.hls;
 
+import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.upstream.DataSource;
 
 /** Default implementation of {@link HlsDataSourceFactory}. */
@@ -30,7 +31,7 @@ public DefaultHlsDataSourceFactory(DataSource.Factory dataSourceFactory) {
   }
 
   @Override
-  public DataSource createDataSource(int dataType) {
+  public DataSource createDataSource(@C.DataType int dataType) {
     return dataSourceFactory.createDataSource();
   }
 }

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsDataSourceFactory.java
Patch:
@@ -24,9 +24,8 @@ public interface HlsDataSourceFactory {
   /**
    * Creates a {@link DataSource} for the given data type.
    *
-   * @param dataType The data type for which the {@link DataSource} will be used. One of {@link C}
-   *     {@code .DATA_TYPE_*} constants.
+   * @param dataType The {@link C.DataType} for which the {@link DataSource} will be used.
    * @return A {@link DataSource} for the given data type.
    */
-  DataSource createDataSource(int dataType);
+  DataSource createDataSource(@C.DataType int dataType);
 }

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
Patch:
@@ -1992,7 +1992,8 @@ protected void renderToEndOfStream() throws ExoPlaybackException {
    *
    * @throws ExoPlaybackException If an error occurs processing the signal.
    */
-  @TargetApi(23) // codecDrainAction == DRAIN_ACTION_UPDATE_DRM_SESSION implies SDK_INT >= 23.
+  // codecDrainAction == DRAIN_ACTION_FLUSH_AND_UPDATE_DRM_SESSION implies SDK_INT >= 23.
+  @TargetApi(23)
   private void processEndOfStream() throws ExoPlaybackException {
     switch (codecDrainAction) {
       case DRAIN_ACTION_REINITIALIZE:

File: demos/transformer/src/withMediaPipe/java/androidx/media3/demo/transformer/MediaPipeFrameProcessor.java
Patch:
@@ -29,6 +29,7 @@
 import com.google.android.exoplayer2.util.GlUtil;
 import com.google.android.exoplayer2.util.LibraryLoader;
 import com.google.mediapipe.components.FrameProcessor;
+import com.google.mediapipe.framework.AndroidAssetUtil;
 import com.google.mediapipe.framework.AppTextureFrame;
 import com.google.mediapipe.framework.TextureFrame;
 import com.google.mediapipe.glutil.EglManager;
@@ -89,6 +90,8 @@ public void initialize(Context context, int inputTexId, int inputWidth, int inpu
     this.inputHeight = inputHeight;
     glProgram = new GlProgram(context, COPY_VERTEX_SHADER_NAME, COPY_FRAGMENT_SHADER_NAME);
 
+    AndroidAssetUtil.initializeNativeAssetManager(context);
+
     EglManager eglManager = new EglManager(EGL14.eglGetCurrentContext());
     frameProcessor =
         new FrameProcessor(

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/FrameProcessorChain.java
Patch:
@@ -159,7 +159,7 @@ private static FrameProcessorChain createOpenGlObjectsAndFrameProcessorChain(
       GlUtil.focusEglSurface(
           eglDisplay, eglContext, EGL14.EGL_NO_SURFACE, /* width= */ 1, /* height= */ 1);
     } else if (enableExperimentalHdrEditing) {
-      // TODO(b/209404935): Don't assume BT.2020 PQ input/output.
+      // TODO(b/227624622): Don't assume BT.2020 PQ input/output.
       GlUtil.focusPlaceholderEglSurfaceBt2020Pq(eglContext, eglDisplay);
     } else {
       GlUtil.focusPlaceholderEglSurface(eglContext, eglDisplay);
@@ -467,7 +467,7 @@ private void createOpenGlSurfaces(Surface outputSurface, @Nullable SurfaceView d
       checkStateNotNull(eglDisplay);
 
       if (enableExperimentalHdrEditing) {
-        // TODO(b/209404935): Don't assume BT.2020 PQ input/output.
+        // TODO(b/227624622): Don't assume BT.2020 PQ input/output.
         eglSurface = GlUtil.getEglSurfaceBt2020Pq(eglDisplay, outputSurface);
         if (debugSurfaceView != null) {
           debugPreviewEglSurface =

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -267,7 +267,7 @@ private Transformer createTransformer(@Nullable Bundle bundle, String filePath)
                             /* inputStreamName= */ "input_video",
                             /* outputStreamName= */ "output_video");
                   } catch (Exception e) {
-                    showToast(R.string.no_media_pipe_error);
+                    runOnUiThread(() -> showToast(R.string.no_media_pipe_error));
                     throw new RuntimeException("Failed to load MediaPipe processor", e);
                   }
                 });

File: library/common/src/main/java/com/google/android/exoplayer2/util/NetworkTypeObserver.java
Patch:
@@ -278,7 +278,8 @@ public void onDisplayInfoChanged(TelephonyDisplayInfo telephonyDisplayInfo) {
       int overrideNetworkType = telephonyDisplayInfo.getOverrideNetworkType();
       boolean is5gNsa =
           overrideNetworkType == TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_NR_NSA
-              || overrideNetworkType == TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVE;
+              || overrideNetworkType == TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVE
+              || overrideNetworkType == TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_NR_ADVANCED;
       updateNetworkType(is5gNsa ? C.NETWORK_TYPE_5G_NSA : C.NETWORK_TYPE_4G);
     }
   }

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -2719,6 +2719,7 @@ private static String maybeReplaceLegacyLanguageTags(String languageTag) {
         "ji", "yi",
         // Individual macrolanguage codes mapped back to full macrolanguage code.
         // See https://en.wikipedia.org/wiki/ISO_639_macrolanguage
+        "arb", "ar-arb",
         "in", "ms-ind",
         "ind", "ms-ind",
         "nb", "no-nob",

File: library/common/src/test/java/com/google/android/exoplayer2/util/UtilTest.java
Patch:
@@ -1162,6 +1162,7 @@ public void normalizeLanguageCode_macrolanguageTags_areFullyMaintained() {
     assertThat(Util.normalizeLanguageCode("ara-ayl")).isEqualTo("ar-ayl");
 
     // Special case of short codes that are actually part of a macrolanguage.
+    assertThat(Util.normalizeLanguageCode("arb")).isEqualTo("ar-arb");
     assertThat(Util.normalizeLanguageCode("nb")).isEqualTo("no-nob");
     assertThat(Util.normalizeLanguageCode("nn")).isEqualTo("no-nno");
     assertThat(Util.normalizeLanguageCode("nob")).isEqualTo("no-nob");

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaServerSideAdInsertionMediaSource.java
Patch:
@@ -605,7 +605,7 @@ private void setAdPlaybackState(AdPlaybackState adPlaybackState) {
   }
 
   @MainThread
-  @EnsuresNonNull("contentTimeline")
+  @EnsuresNonNull("this.contentTimeline")
   private void setContentTimeline(Timeline contentTimeline) {
     if (contentTimeline.equals(this.contentTimeline)) {
       return;

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -311,8 +311,8 @@ private MediaSource.Factory createMediaSourceFactory() {
             serverSideAdsLoader, new DefaultMediaSourceFactory(dataSourceFactory));
     return new DefaultMediaSourceFactory(dataSourceFactory)
         .setDrmSessionManagerProvider(drmSessionManagerProvider)
-        .setAdsLoaderProvider(this::getClientSideAdsLoader)
-        .setAdViewProvider(playerView)
+        .setLocalAdInsertionComponents(
+            this::getClientSideAdsLoader, /* adViewProvider= */ playerView)
         .setServerSideAdInsertionMediaSourceFactory(imaServerSideAdInsertionMediaSourceFactory);
   }
 

File: libraries/common/src/main/java/androidx/media3/common/util/GlUtil.java
Patch:
@@ -50,6 +50,8 @@ public GlException(String message) {
     }
   }
 
+  // TODO(b/231937416): Consider removing this flag, enabling assertions by default, and making
+  //  GlException checked.
   /** Whether to throw a {@link GlException} in case of an OpenGL error. */
   public static boolean glAssertionsEnabled = false;
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/GlFrameProcessor.java
Patch:
@@ -46,6 +46,7 @@ public interface GlFrameProcessor {
    * @param inputTexId Identifier of a 2D OpenGL texture.
    * @param inputWidth The input width, in pixels.
    * @param inputHeight The input height, in pixels.
+   * @throws IOException If an error occurs while reading resources.
    */
   void initialize(Context context, int inputTexId, int inputWidth, int inputHeight)
       throws IOException;
@@ -69,8 +70,9 @@ void initialize(Context context, int inputTexId, int inputWidth, int inputHeight
    * program's vertex attributes and uniforms, and issue a drawing command.
    *
    * @param presentationTimeUs The presentation timestamp of the current frame, in microseconds.
+   * @throws FrameProcessingException If an error occurs while processing or drawing the frame.
    */
-  void drawFrame(long presentationTimeUs);
+  void drawFrame(long presentationTimeUs) throws FrameProcessingException;
 
   /** Releases all resources. */
   void release();

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/BitmapOverlayFrameProcessor.java
Patch:
@@ -101,7 +101,9 @@ public void initialize(Context context, int inputTexId, int inputWidth, int inpu
     glProgram = new GlProgram(context, VERTEX_SHADER_PATH, FRAGMENT_SHADER_PATH);
     // Draw the frame on the entire normalized device coordinate space, from -1 to 1, for x and y.
     glProgram.setBufferAttribute(
-        "aFramePosition", GlUtil.getNormalizedCoordinateBounds(), GlUtil.RECTANGLE_VERTICES_COUNT);
+        "aFramePosition",
+        GlUtil.getNormalizedCoordinateBounds(),
+        GlUtil.HOMOGENEOUS_COORDINATE_VECTOR_SIZE);
     glProgram.setSamplerTexIdUniform("uTexSampler0", inputTexId, /* texUnitIndex= */ 0);
     glProgram.setSamplerTexIdUniform("uTexSampler1", bitmapTexId, /* texUnitIndex= */ 1);
     glProgram.setFloatUniform("uScaleX", bitmapScaleX);

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/PeriodicVignetteFrameProcessor.java
Patch:
@@ -87,7 +87,9 @@ public void initialize(Context context, int inputTexId, int inputWidth, int inpu
     glProgram.setFloatsUniform("uOuterRadius", new float[] {outerRadius});
     // Draw the frame on the entire normalized device coordinate space, from -1 to 1, for x and y.
     glProgram.setBufferAttribute(
-        "aFramePosition", GlUtil.getNormalizedCoordinateBounds(), GlUtil.RECTANGLE_VERTICES_COUNT);
+        "aFramePosition",
+        GlUtil.getNormalizedCoordinateBounds(),
+        GlUtil.HOMOGENEOUS_COORDINATE_VECTOR_SIZE);
   }
 
   @Override

File: demos/transformer/src/withMediaPipe/java/androidx/media3/demo/transformer/MediaPipeFrameProcessor.java
Patch:
@@ -144,7 +144,7 @@ public void drawFrame(long presentationTimeUs) {
       glProgram.setBufferAttribute(
           "aFramePosition",
           GlUtil.getNormalizedCoordinateBounds(),
-          GlUtil.RECTANGLE_VERTICES_COUNT);
+          GlUtil.HOMOGENEOUS_COORDINATE_VECTOR_SIZE);
       glProgram.bindAttributesAndUniforms();
       GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, /* first= */ 0, /* count= */ 4);
       GlUtil.checkGlError();

File: libraries/common/src/main/java/androidx/media3/common/util/GlUtil.java
Patch:
@@ -53,8 +53,8 @@ public GlException(String message) {
   /** Whether to throw a {@link GlException} in case of an OpenGL error. */
   public static boolean glAssertionsEnabled = false;
 
-  /** Number of vertices in a rectangle. */
-  public static final int RECTANGLE_VERTICES_COUNT = 4;
+  /** Number of elements in a 3d homogeneous coordinate vector describing a vertex. */
+  public static final int HOMOGENEOUS_COORDINATE_VECTOR_SIZE = 4;
 
   /** Length of the normalized device coordinate (NDC) space, which spans from -1 to 1. */
   public static final float LENGTH_NDC = 2f;

File: libraries/transformer/src/main/java/androidx/media3/transformer/ExternalCopyFrameProcessor.java
Patch:
@@ -77,7 +77,9 @@ public void initialize(Context context, int inputTexId, int inputWidth, int inpu
     glProgram.setSamplerTexIdUniform("uTexSampler", inputTexId, /* texUnitIndex= */ 0);
     // Draw the frame on the entire normalized device coordinate space, from -1 to 1, for x and y.
     glProgram.setBufferAttribute(
-        "aFramePosition", GlUtil.getNormalizedCoordinateBounds(), GlUtil.RECTANGLE_VERTICES_COUNT);
+        "aFramePosition",
+        GlUtil.getNormalizedCoordinateBounds(),
+        GlUtil.HOMOGENEOUS_COORDINATE_VECTOR_SIZE);
     if (enableExperimentalHdrEditing) {
       // In HDR editing mode the decoder output is sampled in YUV.
       glProgram.setFloatsUniform("uColorTransform", MATRIX_YUV_TO_BT2020_COLOR_TRANSFORM);

File: libraries/transformer/src/main/java/androidx/media3/transformer/MatrixTransformationFrameProcessor.java
Patch:
@@ -86,7 +86,9 @@ public void initialize(Context context, int inputTexId, int inputWidth, int inpu
     glProgram.setSamplerTexIdUniform("uTexSampler", inputTexId, /* texUnitIndex= */ 0);
     // Draw the frame on the entire normalized device coordinate space, from -1 to 1, for x and y.
     glProgram.setBufferAttribute(
-        "aFramePosition", GlUtil.getNormalizedCoordinateBounds(), GlUtil.RECTANGLE_VERTICES_COUNT);
+        "aFramePosition",
+        GlUtil.getNormalizedCoordinateBounds(),
+        GlUtil.HOMOGENEOUS_COORDINATE_VECTOR_SIZE);
   }
 
   @Override

File: library/common/src/main/java/com/google/android/exoplayer2/util/GlUtil.java
Patch:
@@ -49,6 +49,8 @@ public GlException(String message) {
     }
   }
 
+  // TODO(b/231937416): Consider removing this flag, enabling assertions by default, and making
+  //  GlException checked.
   /** Whether to throw a {@link GlException} in case of an OpenGL error. */
   public static boolean glAssertionsEnabled = false;
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/GlFrameProcessor.java
Patch:
@@ -44,6 +44,7 @@ public interface GlFrameProcessor {
    * @param inputTexId Identifier of a 2D OpenGL texture.
    * @param inputWidth The input width, in pixels.
    * @param inputHeight The input height, in pixels.
+   * @throws IOException If an error occurs while reading resources.
    */
   void initialize(Context context, int inputTexId, int inputWidth, int inputHeight)
       throws IOException;
@@ -67,8 +68,9 @@ void initialize(Context context, int inputTexId, int inputWidth, int inputHeight
    * program's vertex attributes and uniforms, and issue a drawing command.
    *
    * @param presentationTimeUs The presentation timestamp of the current frame, in microseconds.
+   * @throws FrameProcessingException If an error occurs while processing or drawing the frame.
    */
-  void drawFrame(long presentationTimeUs);
+  void drawFrame(long presentationTimeUs) throws FrameProcessingException;
 
   /** Releases all resources. */
   void release();

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/BitmapOverlayFrameProcessor.java
Patch:
@@ -101,7 +101,9 @@ public void initialize(Context context, int inputTexId, int inputWidth, int inpu
     glProgram = new GlProgram(context, VERTEX_SHADER_PATH, FRAGMENT_SHADER_PATH);
     // Draw the frame on the entire normalized device coordinate space, from -1 to 1, for x and y.
     glProgram.setBufferAttribute(
-        "aFramePosition", GlUtil.getNormalizedCoordinateBounds(), GlUtil.RECTANGLE_VERTICES_COUNT);
+        "aFramePosition",
+        GlUtil.getNormalizedCoordinateBounds(),
+        GlUtil.HOMOGENEOUS_COORDINATE_VECTOR_SIZE);
     glProgram.setSamplerTexIdUniform("uTexSampler0", inputTexId, /* texUnitIndex= */ 0);
     glProgram.setSamplerTexIdUniform("uTexSampler1", bitmapTexId, /* texUnitIndex= */ 1);
     glProgram.setFloatUniform("uScaleX", bitmapScaleX);

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/PeriodicVignetteFrameProcessor.java
Patch:
@@ -87,7 +87,9 @@ public void initialize(Context context, int inputTexId, int inputWidth, int inpu
     glProgram.setFloatsUniform("uOuterRadius", new float[] {outerRadius});
     // Draw the frame on the entire normalized device coordinate space, from -1 to 1, for x and y.
     glProgram.setBufferAttribute(
-        "aFramePosition", GlUtil.getNormalizedCoordinateBounds(), GlUtil.RECTANGLE_VERTICES_COUNT);
+        "aFramePosition",
+        GlUtil.getNormalizedCoordinateBounds(),
+        GlUtil.HOMOGENEOUS_COORDINATE_VECTOR_SIZE);
   }
 
   @Override

File: demos/transformer/src/withMediaPipe/java/androidx/media3/demo/transformer/MediaPipeFrameProcessor.java
Patch:
@@ -144,7 +144,7 @@ public void drawFrame(long presentationTimeUs) {
       glProgram.setBufferAttribute(
           "aFramePosition",
           GlUtil.getNormalizedCoordinateBounds(),
-          GlUtil.RECTANGLE_VERTICES_COUNT);
+          GlUtil.HOMOGENEOUS_COORDINATE_VECTOR_SIZE);
       glProgram.bindAttributesAndUniforms();
       GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, /* first= */ 0, /* count= */ 4);
       GlUtil.checkGlError();

File: library/common/src/main/java/com/google/android/exoplayer2/util/GlUtil.java
Patch:
@@ -52,8 +52,8 @@ public GlException(String message) {
   /** Whether to throw a {@link GlException} in case of an OpenGL error. */
   public static boolean glAssertionsEnabled = false;
 
-  /** Number of vertices in a rectangle. */
-  public static final int RECTANGLE_VERTICES_COUNT = 4;
+  /** Number of elements in a 3d homogeneous coordinate vector describing a vertex. */
+  public static final int HOMOGENEOUS_COORDINATE_VECTOR_SIZE = 4;
 
   /** Length of the normalized device coordinate (NDC) space, which spans from -1 to 1. */
   public static final float LENGTH_NDC = 2f;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExternalCopyFrameProcessor.java
Patch:
@@ -77,7 +77,9 @@ public void initialize(Context context, int inputTexId, int inputWidth, int inpu
     glProgram.setSamplerTexIdUniform("uTexSampler", inputTexId, /* texUnitIndex= */ 0);
     // Draw the frame on the entire normalized device coordinate space, from -1 to 1, for x and y.
     glProgram.setBufferAttribute(
-        "aFramePosition", GlUtil.getNormalizedCoordinateBounds(), GlUtil.RECTANGLE_VERTICES_COUNT);
+        "aFramePosition",
+        GlUtil.getNormalizedCoordinateBounds(),
+        GlUtil.HOMOGENEOUS_COORDINATE_VECTOR_SIZE);
     if (enableExperimentalHdrEditing) {
       // In HDR editing mode the decoder output is sampled in YUV.
       glProgram.setFloatsUniform("uColorTransform", MATRIX_YUV_TO_BT2020_COLOR_TRANSFORM);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/MatrixTransformationFrameProcessor.java
Patch:
@@ -84,7 +84,9 @@ public void initialize(Context context, int inputTexId, int inputWidth, int inpu
     glProgram.setSamplerTexIdUniform("uTexSampler", inputTexId, /* texUnitIndex= */ 0);
     // Draw the frame on the entire normalized device coordinate space, from -1 to 1, for x and y.
     glProgram.setBufferAttribute(
-        "aFramePosition", GlUtil.getNormalizedCoordinateBounds(), GlUtil.RECTANGLE_VERTICES_COUNT);
+        "aFramePosition",
+        GlUtil.getNormalizedCoordinateBounds(),
+        GlUtil.HOMOGENEOUS_COORDINATE_VECTOR_SIZE);
   }
 
   @Override

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/RtpH263Reader.java
Patch:
@@ -178,7 +178,7 @@ private void parseVopHeader(ParsableByteArray data, boolean gotResolution) {
      * >Android's software H263 decoder</a>.
      */
     long shortHeader = data.readUnsignedInt();
-    if (((shortHeader >> 10) & 0xffff) == 0x20) {
+    if (((shortHeader >> 10) & 0x3f) == 0x20) {
       int header = data.peekUnsignedByte();
       int vopType = ((header >> 1) & 0x1);
       if (!gotResolution && vopType == I_VOP) {

File: libraries/transformer/src/main/java/androidx/media3/transformer/ExternalCopyFrameProcessor.java
Patch:
@@ -65,8 +65,6 @@ public void initialize(Context context, int inputTexId, int inputWidth, int inpu
     checkArgument(inputHeight > 0, "inputHeight must be positive");
 
     size = new Size(inputWidth, inputHeight);
-    // TODO(b/205002913): check the loaded program is consistent with the attributes and uniforms
-    //  expected in the code.
     String vertexShaderFilePath =
         enableExperimentalHdrEditing
             ? VERTEX_SHADER_TEX_TRANSFORM_ES3_PATH

File: libraries/transformer/src/main/java/androidx/media3/transformer/MatrixTransformationFrameProcessor.java
Patch:
@@ -82,8 +82,6 @@ public void initialize(Context context, int inputTexId, int inputWidth, int inpu
     checkArgument(inputHeight > 0, "inputHeight must be positive");
 
     outputSize = matrixTransformation.configure(inputWidth, inputHeight);
-    // TODO(b/205002913): check the loaded program is consistent with the attributes and uniforms
-    //  expected in the code.
     glProgram = new GlProgram(context, VERTEX_SHADER_TRANSFORMATION_PATH, FRAGMENT_SHADER_PATH);
     glProgram.setSamplerTexIdUniform("uTexSampler", inputTexId, /* texUnitIndex= */ 0);
     // Draw the frame on the entire normalized device coordinate space, from -1 to 1, for x and y.

File: demos/gl/src/main/java/androidx/media3/demo/gl/MainActivity.java
Patch:
@@ -163,12 +163,12 @@ private void initializePlayer() {
         TextUtils.isEmpty(fileExtension)
             ? Util.inferContentType(uri)
             : Util.inferContentTypeForExtension(fileExtension);
-    if (type == C.TYPE_DASH) {
+    if (type == C.CONTENT_TYPE_DASH) {
       mediaSource =
           new DashMediaSource.Factory(dataSourceFactory)
               .setDrmSessionManagerProvider(unusedMediaItem -> drmSessionManager)
               .createMediaSource(MediaItem.fromUri(uri));
-    } else if (type == C.TYPE_OTHER) {
+    } else if (type == C.CONTENT_TYPE_OTHER) {
       mediaSource =
           new ProgressiveMediaSource.Factory(dataSourceFactory)
               .setDrmSessionManagerProvider(unusedMediaItem -> drmSessionManager)

File: demos/surface/src/main/java/androidx/media3/demo/surface/MainActivity.java
Patch:
@@ -208,12 +208,12 @@ private void initializePlayer() {
         TextUtils.isEmpty(fileExtension)
             ? Util.inferContentType(uri)
             : Util.inferContentTypeForExtension(fileExtension);
-    if (type == C.TYPE_DASH) {
+    if (type == C.CONTENT_TYPE_DASH) {
       mediaSource =
           new DashMediaSource.Factory(dataSourceFactory)
               .setDrmSessionManagerProvider(unusedMediaItem -> drmSessionManager)
               .createMediaSource(MediaItem.fromUri(uri));
-    } else if (type == C.TYPE_OTHER) {
+    } else if (type == C.CONTENT_TYPE_OTHER) {
       mediaSource =
           new ProgressiveMediaSource.Factory(dataSourceFactory)
               .setDrmSessionManagerProvider(unusedMediaItem -> drmSessionManager)

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadHelper.java
Patch:
@@ -960,7 +960,7 @@ private static MediaSource createMediaSourceInternal(
   private static boolean isProgressive(MediaItem.LocalConfiguration localConfiguration) {
     return Util.inferContentTypeForUriAndMimeType(
             localConfiguration.uri, localConfiguration.mimeType)
-        == C.TYPE_OTHER;
+        == C.CONTENT_TYPE_OTHER;
   }
 
   private static final class MediaPreparer

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadRequest.java
Patch:
@@ -138,7 +138,9 @@ private DownloadRequest(
       @Nullable String customCacheKey,
       @Nullable byte[] data) {
     @C.ContentType int contentType = Util.inferContentTypeForUriAndMimeType(uri, mimeType);
-    if (contentType == C.TYPE_DASH || contentType == C.TYPE_HLS || contentType == C.TYPE_SS) {
+    if (contentType == C.CONTENT_TYPE_DASH
+        || contentType == C.CONTENT_TYPE_HLS
+        || contentType == C.CONTENT_TYPE_SS) {
       Assertions.checkArgument(
           customCacheKey == null, "customCacheKey must be null for type: " + contentType);
     }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ProgressiveMediaSource.java
Patch:
@@ -198,7 +198,7 @@ public ProgressiveMediaSource createMediaSource(MediaItem mediaItem) {
 
     @Override
     public int[] getSupportedTypes() {
-      return new int[] {C.TYPE_OTHER};
+      return new int[] {C.CONTENT_TYPE_OTHER};
     }
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ads/AdsLoader.java
Patch:
@@ -124,7 +124,8 @@ default void onAdTapped() {}
    * be ignored. Called on the main thread by {@link AdsMediaSource}.
    *
    * @param contentTypes The supported content types for ad media. Each element must be one of
-   *     {@link C#TYPE_DASH}, {@link C#TYPE_HLS}, {@link C#TYPE_SS} and {@link C#TYPE_OTHER}.
+   *     {@link C#CONTENT_TYPE_DASH}, {@link C#CONTENT_TYPE_HLS}, {@link C#CONTENT_TYPE_SS} and
+   *     {@link C#CONTENT_TYPE_OTHER}.
    */
   @UnstableApi
   void setSupportedContentTypes(@C.ContentType int... contentTypes);

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/source/DefaultMediaSourceFactoryTest.java
Patch:
@@ -188,7 +188,7 @@ public void getSupportedTypes_coreModule_onlyOther() {
         new DefaultMediaSourceFactory((Context) ApplicationProvider.getApplicationContext())
             .getSupportedTypes();
 
-    assertThat(supportedTypes).asList().containsExactly(C.TYPE_OTHER);
+    assertThat(supportedTypes).asList().containsExactly(C.CONTENT_TYPE_OTHER);
   }
 
   @Test

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/DashMediaSource.java
Patch:
@@ -292,7 +292,7 @@ public DashMediaSource createMediaSource(MediaItem mediaItem) {
 
     @Override
     public int[] getSupportedTypes() {
-      return new int[] {C.TYPE_DASH};
+      return new int[] {C.CONTENT_TYPE_DASH};
     }
   }
 

File: libraries/exoplayer_dash/src/test/java/androidx/media3/exoplayer/dash/DefaultMediaSourceFactoryTest.java
Patch:
@@ -95,6 +95,6 @@ public void getSupportedTypes_dashModule_containsTypeDash() {
         new DefaultMediaSourceFactory((Context) ApplicationProvider.getApplicationContext())
             .getSupportedTypes();
 
-    assertThat(supportedTypes).asList().containsExactly(C.TYPE_OTHER, C.TYPE_DASH);
+    assertThat(supportedTypes).asList().containsExactly(C.CONTENT_TYPE_OTHER, C.CONTENT_TYPE_DASH);
   }
 }

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsMediaSource.java
Patch:
@@ -331,7 +331,7 @@ public HlsMediaSource createMediaSource(MediaItem mediaItem) {
 
     @Override
     public int[] getSupportedTypes() {
-      return new int[] {C.TYPE_HLS};
+      return new int[] {C.CONTENT_TYPE_HLS};
     }
   }
 

File: libraries/exoplayer_hls/src/test/java/androidx/media3/exoplayer/hls/DefaultMediaSourceFactoryTest.java
Patch:
@@ -95,6 +95,6 @@ public void getSupportedTypes_hlsModule_containsTypeHls() {
         new DefaultMediaSourceFactory((Context) ApplicationProvider.getApplicationContext())
             .getSupportedTypes();
 
-    assertThat(supportedTypes).asList().containsExactly(C.TYPE_OTHER, C.TYPE_HLS);
+    assertThat(supportedTypes).asList().containsExactly(C.CONTENT_TYPE_OTHER, C.CONTENT_TYPE_HLS);
   }
 }

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaAdsLoader.java
Patch:
@@ -525,11 +525,11 @@ public void setSupportedContentTypes(@C.ContentType int... contentTypes) {
     List<String> supportedMimeTypes = new ArrayList<>();
     for (@C.ContentType int contentType : contentTypes) {
       // IMA does not support Smooth Streaming ad media.
-      if (contentType == C.TYPE_DASH) {
+      if (contentType == C.CONTENT_TYPE_DASH) {
         supportedMimeTypes.add(MimeTypes.APPLICATION_MPD);
-      } else if (contentType == C.TYPE_HLS) {
+      } else if (contentType == C.CONTENT_TYPE_HLS) {
         supportedMimeTypes.add(MimeTypes.APPLICATION_M3U8);
-      } else if (contentType == C.TYPE_OTHER) {
+      } else if (contentType == C.CONTENT_TYPE_OTHER) {
         supportedMimeTypes.addAll(
             Arrays.asList(
                 MimeTypes.VIDEO_MP4,

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaSource.java
Patch:
@@ -163,7 +163,7 @@ public Factory setLoadErrorHandlingPolicy(
 
     @Override
     public int[] getSupportedTypes() {
-      return new int[] {C.TYPE_RTSP};
+      return new int[] {C.CONTENT_TYPE_RTSP};
     }
 
     /**

File: libraries/exoplayer_smoothstreaming/src/main/java/androidx/media3/exoplayer/smoothstreaming/SsMediaSource.java
Patch:
@@ -273,7 +273,7 @@ public SsMediaSource createMediaSource(MediaItem mediaItem) {
 
     @Override
     public int[] getSupportedTypes() {
-      return new int[] {C.TYPE_SS};
+      return new int[] {C.CONTENT_TYPE_SS};
     }
   }
 

File: libraries/exoplayer_smoothstreaming/src/test/java/androidx/media3/exoplayer/smoothstreaming/DefaultMediaSourceFactoryTest.java
Patch:
@@ -106,6 +106,6 @@ public void getSupportedTypes_smoothstreamingModule_containsTypeSS() {
         new DefaultMediaSourceFactory((Context) ApplicationProvider.getApplicationContext())
             .getSupportedTypes();
 
-    assertThat(supportedTypes).asList().containsExactly(C.TYPE_OTHER, C.TYPE_SS);
+    assertThat(supportedTypes).asList().containsExactly(C.CONTENT_TYPE_OTHER, C.CONTENT_TYPE_SS);
   }
 }

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeMediaSourceFactory.java
Patch:
@@ -51,7 +51,7 @@ public MediaSourceFactory setLoadErrorHandlingPolicy(
 
   @Override
   public int[] getSupportedTypes() {
-    return new int[] {C.TYPE_OTHER};
+    return new int[] {C.CONTENT_TYPE_OTHER};
   }
 
   @Override

File: libraries/common/src/main/java/androidx/media3/common/MimeTypes.java
Patch:
@@ -87,6 +87,7 @@ public final class MimeTypes {
   public static final String AUDIO_AMR_NB = BASE_TYPE_AUDIO + "/3gpp";
   public static final String AUDIO_AMR_WB = BASE_TYPE_AUDIO + "/amr-wb";
   public static final String AUDIO_FLAC = BASE_TYPE_AUDIO + "/flac";
+  public static final String AUDIO_MIDI = BASE_TYPE_AUDIO + "/midi";
   public static final String AUDIO_ALAC = BASE_TYPE_AUDIO + "/alac";
   public static final String AUDIO_MSGSM = BASE_TYPE_AUDIO + "/gsm";
   public static final String AUDIO_OGG = BASE_TYPE_AUDIO + "/ogg";

File: libraries/common/src/main/java/androidx/media3/common/util/Util.java
Patch:
@@ -1707,12 +1707,12 @@ public static int getPcmFrameSize(@C.PcmEncoding int pcmEncoding, int channelCou
       case C.STREAM_TYPE_NOTIFICATION:
       case C.STREAM_TYPE_RING:
       case C.STREAM_TYPE_SYSTEM:
-        return C.CONTENT_TYPE_SONIFICATION;
+        return C.AUDIO_CONTENT_TYPE_SONIFICATION;
       case C.STREAM_TYPE_VOICE_CALL:
-        return C.CONTENT_TYPE_SPEECH;
+        return C.AUDIO_CONTENT_TYPE_SPEECH;
       case C.STREAM_TYPE_MUSIC:
       default:
-        return C.CONTENT_TYPE_MUSIC;
+        return C.AUDIO_CONTENT_TYPE_MUSIC;
     }
   }
 

File: libraries/common/src/test/java/androidx/media3/common/AudioAttributesTest.java
Patch:
@@ -29,7 +29,7 @@ public class AudioAttributesTest {
   public void roundTripViaBundle_yieldsEqualInstance() {
     AudioAttributes audioAttributes =
         new AudioAttributes.Builder()
-            .setContentType(C.CONTENT_TYPE_SONIFICATION)
+            .setContentType(C.AUDIO_CONTENT_TYPE_SONIFICATION)
             .setFlags(C.FLAG_AUDIBILITY_ENFORCED)
             .setUsage(C.USAGE_ALARM)
             .setAllowedCapturePolicy(C.ALLOW_CAPTURE_BY_SYSTEM)

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/AudioFocusManager.java
Patch:
@@ -298,7 +298,7 @@ private void abandonAudioFocusV26() {
   }
 
   private boolean willPauseWhenDucked() {
-    return audioAttributes != null && audioAttributes.contentType == C.CONTENT_TYPE_SPEECH;
+    return audioAttributes != null && audioAttributes.contentType == C.AUDIO_CONTENT_TYPE_SPEECH;
   }
 
   /**
@@ -369,7 +369,7 @@ private boolean willPauseWhenDucked() {
 
         // Special usages:
       case C.USAGE_ASSISTANCE_ACCESSIBILITY:
-        if (audioAttributes.contentType == C.CONTENT_TYPE_SPEECH) {
+        if (audioAttributes.contentType == C.AUDIO_CONTENT_TYPE_SPEECH) {
           // Voice shouldn't be interrupted by other playback.
           return AUDIOFOCUS_GAIN_TRANSIENT;
         }

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/AudioFocusManagerTest.java
Patch:
@@ -397,7 +397,7 @@ public void onAudioFocusChange_withPausedWhenDucked_sendsCommandWaitForCallback(
     AudioAttributes speechAudioAttributes =
         new AudioAttributes.Builder()
             .setUsage(C.USAGE_MEDIA)
-            .setContentType(C.CONTENT_TYPE_SPEECH)
+            .setContentType(C.AUDIO_CONTENT_TYPE_SPEECH)
             .build();
     audioFocusManager.setAudioAttributes(speechAudioAttributes);
 

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaControllerListenerTest.java
Patch:
@@ -1811,7 +1811,7 @@ public void onAudioAttributesChanged_isCalledAndUpdatesGetter() throws Exception
     AudioAttributes testAttributes =
         new AudioAttributes.Builder()
             .setUsage(C.USAGE_MEDIA)
-            .setContentType(C.CONTENT_TYPE_MOVIE)
+            .setContentType(C.AUDIO_CONTENT_TYPE_MOVIE)
             .build();
 
     MediaController controller = controllerTestRule.createController(remoteSession.getToken());

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaControllerTest.java
Patch:
@@ -520,7 +520,7 @@ public void getTrackSelectionParameters_returnsTrackSelectionParametersOfPlayerI
   @Test
   public void getAudioAttributes_returnsAudioAttributesOfPlayerInSession() throws Exception {
     AudioAttributes testAttributes =
-        new AudioAttributes.Builder().setContentType(C.CONTENT_TYPE_MUSIC).build();
+        new AudioAttributes.Builder().setContentType(C.AUDIO_CONTENT_TYPE_MUSIC).build();
 
     Bundle playerConfig =
         new RemoteMediaSession.MockPlayerConfigBuilder().setAudioAttributes(testAttributes).build();

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/PeriodicVignetteFrameProcessor.java
Patch:
@@ -60,7 +60,6 @@
    *
    * <p>The parameters are given in normalized texture coordinates from 0 to 1.
    *
-   * @param context The {@link Context}.
    * @param centerX The x-coordinate of the center of the effect.
    * @param centerY The y-coordinate of the center of the effect.
    * @param minInnerRadius The lower bound of the radius that is unaffected by the effect.

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaServerSideAdInsertionUriBuilder.java
Patch:
@@ -139,7 +139,7 @@ public ImaServerSideAdInsertionUriBuilder setVideoId(@Nullable String videoId) {
   /**
    * Sets the format of the stream request.
    *
-   * @param format VOD or live stream type.
+   * @param format {@link C#TYPE_DASH} or {@link C#TYPE_HLS}.
    * @return This instance, for convenience.
    */
   public ImaServerSideAdInsertionUriBuilder setFormat(@ContentType int format) {

File: libraries/common/src/main/java/androidx/media3/common/util/Util.java
Patch:
@@ -1245,7 +1245,7 @@ public static long parseXsDateTime(String value) throws ParserException {
 
     long time = dateTime.getTimeInMillis();
     if (timezoneShift != 0) {
-      time -= timezoneShift * 60000;
+      time -= timezoneShift * 60000L;
     }
 
     return time;

File: libraries/extractor/src/main/java/androidx/media3/extractor/amr/AmrExtractor.java
Patch:
@@ -414,6 +414,7 @@ private void assertInitialized() {
    * @return The stream bitrate.
    */
   private static int getBitrateFromFrameSize(int frameSize, long durationUsPerFrame) {
-    return (int) ((frameSize * C.BITS_PER_BYTE * C.MICROS_PER_SECOND) / durationUsPerFrame);
+    return (int)
+        ((frameSize * ((long) C.BITS_PER_BYTE) * C.MICROS_PER_SECOND) / durationUsPerFrame);
   }
 }

File: libraries/extractor/src/main/java/androidx/media3/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -1742,9 +1742,9 @@ private static byte[] formatSubtitleTimecode(
     checkArgument(timeUs != C.TIME_UNSET);
     byte[] timeCodeData;
     int hours = (int) (timeUs / (3600 * C.MICROS_PER_SECOND));
-    timeUs -= (hours * 3600 * C.MICROS_PER_SECOND);
+    timeUs -= (hours * 3600L * C.MICROS_PER_SECOND);
     int minutes = (int) (timeUs / (60 * C.MICROS_PER_SECOND));
-    timeUs -= (minutes * 60 * C.MICROS_PER_SECOND);
+    timeUs -= (minutes * 60L * C.MICROS_PER_SECOND);
     int seconds = (int) (timeUs / C.MICROS_PER_SECOND);
     timeUs -= (seconds * C.MICROS_PER_SECOND);
     int lastValue = (int) (timeUs / lastTimecodeValueScalingFactor);

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp3/VbriSeeker.java
Patch:
@@ -89,7 +89,7 @@ public static VbriSeeker create(
         default:
           return null;
       }
-      position += segmentSize * scale;
+      position += segmentSize * ((long) scale);
     }
     if (inputLength != C.LENGTH_UNSET && inputLength != position) {
       Log.w(TAG, "VBRI data size mismatch: " + inputLength + ", " + position);

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/AdtsExtractor.java
Patch:
@@ -365,6 +365,7 @@ private SeekMap getConstantBitrateSeekMap(long inputLength, boolean allowSeeksIf
    * @return The stream bitrate.
    */
   private static int getBitrateFromFrameSize(int frameSize, long durationUsPerFrame) {
-    return (int) ((frameSize * C.BITS_PER_BYTE * C.MICROS_PER_SECOND) / durationUsPerFrame);
+    return (int)
+        ((frameSize * ((long) C.BITS_PER_BYTE) * C.MICROS_PER_SECOND) / durationUsPerFrame);
   }
 }

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeAdaptiveDataSet.java
Patch:
@@ -144,7 +144,8 @@ public long getChunkEndTimeUs() {
     for (int i = 0; i < trackGroup.length; i++) {
       String uri = getUri(i);
       Format format = trackGroup.getFormat(i);
-      double avgChunkLength = format.bitrate * chunkDurationUs / (8 * C.MICROS_PER_SECOND);
+      double avgChunkLength =
+          format.bitrate * chunkDurationUs / ((double) (8 * C.MICROS_PER_SECOND));
       FakeData newData = this.newData(uri);
       for (int j = 0; j < fullChunks; j++) {
         newData.appendReadData((int) (avgChunkLength * bitrateFactors[j]));

File: libraries/session/src/main/java/androidx/media3/session/MediaControllerImplLegacy.java
Patch:
@@ -846,7 +846,7 @@ public void moveMediaItems(int fromIndex, int toIndex, int newIndex) {
         calculateCurrentItemIndexAfterRemoveItems(currentMediaItemIndex, fromIndex, toIndex);
     if (currentMediaItemIndexAfterRemove == C.INDEX_UNSET) {
       currentMediaItemIndexAfterRemove =
-          Util.constrainValue(fromIndex, /* min= */ 0, /* toIndex= */ lastItemIndexAfterRemove);
+          Util.constrainValue(fromIndex, /* min= */ 0, /* max= */ lastItemIndexAfterRemove);
       Log.w(
           TAG,
           "Currently playing item will be removed and added back to mimic move."
@@ -1550,8 +1550,8 @@ public void onSessionReady() {
         pendingLegacyPlayerInfo =
             pendingLegacyPlayerInfo.copyWithExtraBinderGetters(
                 convertToSafePlaybackStateCompat(controllerCompat.getPlaybackState()),
-                controllerCompat.getShuffleMode(),
-                controllerCompat.getRepeatMode());
+                controllerCompat.getRepeatMode(),
+                controllerCompat.getShuffleMode());
         boolean isCaptioningEnabled = controllerCompat.isCaptioningEnabled();
         onCaptioningEnabledChanged(isCaptioningEnabled);
 

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/DefaultRtpPayloadReaderFactory.java
Patch:
@@ -41,7 +41,7 @@ public RtpPayloadReader createPayloadReader(RtpPayloadFormat payloadFormat) {
       case MimeTypes.VIDEO_H265:
         return new RtpH265Reader(payloadFormat);
       case MimeTypes.VIDEO_VP9:
-        return new RtpVP9Reader(payloadFormat);
+        return new RtpVp9Reader(payloadFormat);
       default:
         // No supported reader, returning null.
     }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExternalCopyFrameProcessor.java
Patch:
@@ -65,8 +65,6 @@ public void initialize(Context context, int inputTexId, int inputWidth, int inpu
     checkArgument(inputHeight > 0, "inputHeight must be positive");
 
     size = new Size(inputWidth, inputHeight);
-    // TODO(b/205002913): check the loaded program is consistent with the attributes and uniforms
-    //  expected in the code.
     String vertexShaderFilePath =
         enableExperimentalHdrEditing
             ? VERTEX_SHADER_TEX_TRANSFORM_ES3_PATH

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/MatrixTransformationFrameProcessor.java
Patch:
@@ -80,8 +80,6 @@ public void initialize(Context context, int inputTexId, int inputWidth, int inpu
     checkArgument(inputHeight > 0, "inputHeight must be positive");
 
     outputSize = matrixTransformation.configure(inputWidth, inputHeight);
-    // TODO(b/205002913): check the loaded program is consistent with the attributes and uniforms
-    //  expected in the code.
     glProgram = new GlProgram(context, VERTEX_SHADER_TRANSFORMATION_PATH, FRAGMENT_SHADER_PATH);
     glProgram.setSamplerTexIdUniform("uTexSampler", inputTexId, /* texUnitIndex= */ 0);
     // Draw the frame on the entire normalized device coordinate space, from -1 to 1, for x and y.

File: demos/gl/src/main/java/com/google/android/exoplayer2/gldemo/MainActivity.java
Patch:
@@ -163,12 +163,12 @@ private void initializePlayer() {
         TextUtils.isEmpty(fileExtension)
             ? Util.inferContentType(uri)
             : Util.inferContentTypeForExtension(fileExtension);
-    if (type == C.TYPE_DASH) {
+    if (type == C.CONTENT_TYPE_DASH) {
       mediaSource =
           new DashMediaSource.Factory(dataSourceFactory)
               .setDrmSessionManagerProvider(unusedMediaItem -> drmSessionManager)
               .createMediaSource(MediaItem.fromUri(uri));
-    } else if (type == C.TYPE_OTHER) {
+    } else if (type == C.CONTENT_TYPE_OTHER) {
       mediaSource =
           new ProgressiveMediaSource.Factory(dataSourceFactory)
               .setDrmSessionManagerProvider(unusedMediaItem -> drmSessionManager)

File: demos/surface/src/main/java/com/google/android/exoplayer2/surfacedemo/MainActivity.java
Patch:
@@ -208,12 +208,12 @@ private void initializePlayer() {
         TextUtils.isEmpty(fileExtension)
             ? Util.inferContentType(uri)
             : Util.inferContentTypeForExtension(fileExtension);
-    if (type == C.TYPE_DASH) {
+    if (type == C.CONTENT_TYPE_DASH) {
       mediaSource =
           new DashMediaSource.Factory(dataSourceFactory)
               .setDrmSessionManagerProvider(unusedMediaItem -> drmSessionManager)
               .createMediaSource(MediaItem.fromUri(uri));
-    } else if (type == C.TYPE_OTHER) {
+    } else if (type == C.CONTENT_TYPE_OTHER) {
       mediaSource =
           new ProgressiveMediaSource.Factory(dataSourceFactory)
               .setDrmSessionManagerProvider(unusedMediaItem -> drmSessionManager)

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -503,11 +503,11 @@ public void setSupportedContentTypes(@C.ContentType int... contentTypes) {
     List<String> supportedMimeTypes = new ArrayList<>();
     for (@C.ContentType int contentType : contentTypes) {
       // IMA does not support Smooth Streaming ad media.
-      if (contentType == C.TYPE_DASH) {
+      if (contentType == C.CONTENT_TYPE_DASH) {
         supportedMimeTypes.add(MimeTypes.APPLICATION_MPD);
-      } else if (contentType == C.TYPE_HLS) {
+      } else if (contentType == C.CONTENT_TYPE_HLS) {
         supportedMimeTypes.add(MimeTypes.APPLICATION_M3U8);
-      } else if (contentType == C.TYPE_OTHER) {
+      } else if (contentType == C.CONTENT_TYPE_OTHER) {
         supportedMimeTypes.addAll(
             Arrays.asList(
                 MimeTypes.VIDEO_MP4,

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -957,7 +957,7 @@ private static MediaSource createMediaSourceInternal(
   private static boolean isProgressive(MediaItem.LocalConfiguration localConfiguration) {
     return Util.inferContentTypeForUriAndMimeType(
             localConfiguration.uri, localConfiguration.mimeType)
-        == C.TYPE_OTHER;
+        == C.CONTENT_TYPE_OTHER;
   }
 
   private static final class MediaPreparer

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadRequest.java
Patch:
@@ -135,7 +135,9 @@ private DownloadRequest(
       @Nullable String customCacheKey,
       @Nullable byte[] data) {
     @C.ContentType int contentType = Util.inferContentTypeForUriAndMimeType(uri, mimeType);
-    if (contentType == C.TYPE_DASH || contentType == C.TYPE_HLS || contentType == C.TYPE_SS) {
+    if (contentType == C.CONTENT_TYPE_DASH
+        || contentType == C.CONTENT_TYPE_HLS
+        || contentType == C.CONTENT_TYPE_SS) {
       Assertions.checkArgument(
           customCacheKey == null, "customCacheKey must be null for type: " + contentType);
     }

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaSource.java
Patch:
@@ -196,7 +196,7 @@ public ProgressiveMediaSource createMediaSource(MediaItem mediaItem) {
 
     @Override
     public int[] getSupportedTypes() {
-      return new int[] {C.TYPE_OTHER};
+      return new int[] {C.CONTENT_TYPE_OTHER};
     }
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/AdsLoader.java
Patch:
@@ -121,7 +121,8 @@ default void onAdTapped() {}
    * be ignored. Called on the main thread by {@link AdsMediaSource}.
    *
    * @param contentTypes The supported content types for ad media. Each element must be one of
-   *     {@link C#TYPE_DASH}, {@link C#TYPE_HLS}, {@link C#TYPE_SS} and {@link C#TYPE_OTHER}.
+   *     {@link C#CONTENT_TYPE_DASH}, {@link C#CONTENT_TYPE_HLS}, {@link C#CONTENT_TYPE_SS} and
+   *     {@link C#CONTENT_TYPE_OTHER}.
    */
   void setSupportedContentTypes(@C.ContentType int... contentTypes);
 

File: library/core/src/test/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactoryTest.java
Patch:
@@ -188,7 +188,7 @@ public void getSupportedTypes_coreModule_onlyOther() {
         new DefaultMediaSourceFactory((Context) ApplicationProvider.getApplicationContext())
             .getSupportedTypes();
 
-    assertThat(supportedTypes).asList().containsExactly(C.TYPE_OTHER);
+    assertThat(supportedTypes).asList().containsExactly(C.CONTENT_TYPE_OTHER);
   }
 
   @Test

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
Patch:
@@ -290,7 +290,7 @@ public DashMediaSource createMediaSource(MediaItem mediaItem) {
 
     @Override
     public int[] getSupportedTypes() {
-      return new int[] {C.TYPE_DASH};
+      return new int[] {C.CONTENT_TYPE_DASH};
     }
   }
 

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DefaultMediaSourceFactoryTest.java
Patch:
@@ -95,6 +95,6 @@ public void getSupportedTypes_dashModule_containsTypeDash() {
         new DefaultMediaSourceFactory((Context) ApplicationProvider.getApplicationContext())
             .getSupportedTypes();
 
-    assertThat(supportedTypes).asList().containsExactly(C.TYPE_OTHER, C.TYPE_DASH);
+    assertThat(supportedTypes).asList().containsExactly(C.CONTENT_TYPE_OTHER, C.CONTENT_TYPE_DASH);
   }
 }

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaSource.java
Patch:
@@ -329,7 +329,7 @@ public HlsMediaSource createMediaSource(MediaItem mediaItem) {
 
     @Override
     public int[] getSupportedTypes() {
-      return new int[] {C.TYPE_HLS};
+      return new int[] {C.CONTENT_TYPE_HLS};
     }
   }
 

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/DefaultMediaSourceFactoryTest.java
Patch:
@@ -95,6 +95,6 @@ public void getSupportedTypes_hlsModule_containsTypeHls() {
         new DefaultMediaSourceFactory((Context) ApplicationProvider.getApplicationContext())
             .getSupportedTypes();
 
-    assertThat(supportedTypes).asList().containsExactly(C.TYPE_OTHER, C.TYPE_HLS);
+    assertThat(supportedTypes).asList().containsExactly(C.CONTENT_TYPE_OTHER, C.CONTENT_TYPE_HLS);
   }
 }

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMediaSource.java
Patch:
@@ -161,7 +161,7 @@ public Factory setLoadErrorHandlingPolicy(
 
     @Override
     public int[] getSupportedTypes() {
-      return new int[] {C.TYPE_RTSP};
+      return new int[] {C.CONTENT_TYPE_RTSP};
     }
 
     /**

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/SsMediaSource.java
Patch:
@@ -271,7 +271,7 @@ public SsMediaSource createMediaSource(MediaItem mediaItem) {
 
     @Override
     public int[] getSupportedTypes() {
-      return new int[] {C.TYPE_SS};
+      return new int[] {C.CONTENT_TYPE_SS};
     }
   }
 

File: library/smoothstreaming/src/test/java/com/google/android/exoplayer2/source/smoothstreaming/DefaultMediaSourceFactoryTest.java
Patch:
@@ -106,6 +106,6 @@ public void getSupportedTypes_smoothstreamingModule_containsTypeSS() {
         new DefaultMediaSourceFactory((Context) ApplicationProvider.getApplicationContext())
             .getSupportedTypes();
 
-    assertThat(supportedTypes).asList().containsExactly(C.TYPE_OTHER, C.TYPE_SS);
+    assertThat(supportedTypes).asList().containsExactly(C.CONTENT_TYPE_OTHER, C.CONTENT_TYPE_SS);
   }
 }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSourceFactory.java
Patch:
@@ -49,7 +49,7 @@ public MediaSourceFactory setLoadErrorHandlingPolicy(
 
   @Override
   public int[] getSupportedTypes() {
-    return new int[] {C.TYPE_OTHER};
+    return new int[] {C.CONTENT_TYPE_OTHER};
   }
 
   @Override

File: library/common/src/main/java/com/google/android/exoplayer2/util/MimeTypes.java
Patch:
@@ -85,6 +85,7 @@ public final class MimeTypes {
   public static final String AUDIO_AMR_NB = BASE_TYPE_AUDIO + "/3gpp";
   public static final String AUDIO_AMR_WB = BASE_TYPE_AUDIO + "/amr-wb";
   public static final String AUDIO_FLAC = BASE_TYPE_AUDIO + "/flac";
+  public static final String AUDIO_MIDI = BASE_TYPE_AUDIO + "/midi";
   public static final String AUDIO_ALAC = BASE_TYPE_AUDIO + "/alac";
   public static final String AUDIO_MSGSM = BASE_TYPE_AUDIO + "/gsm";
   public static final String AUDIO_OGG = BASE_TYPE_AUDIO + "/ogg";

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -1705,12 +1705,12 @@ public static int getPcmFrameSize(@C.PcmEncoding int pcmEncoding, int channelCou
       case C.STREAM_TYPE_NOTIFICATION:
       case C.STREAM_TYPE_RING:
       case C.STREAM_TYPE_SYSTEM:
-        return C.CONTENT_TYPE_SONIFICATION;
+        return C.AUDIO_CONTENT_TYPE_SONIFICATION;
       case C.STREAM_TYPE_VOICE_CALL:
-        return C.CONTENT_TYPE_SPEECH;
+        return C.AUDIO_CONTENT_TYPE_SPEECH;
       case C.STREAM_TYPE_MUSIC:
       default:
-        return C.CONTENT_TYPE_MUSIC;
+        return C.AUDIO_CONTENT_TYPE_MUSIC;
     }
   }
 

File: library/common/src/test/java/com/google/android/exoplayer2/audio/AudioAttributesTest.java
Patch:
@@ -30,7 +30,7 @@ public class AudioAttributesTest {
   public void roundTripViaBundle_yieldsEqualInstance() {
     AudioAttributes audioAttributes =
         new AudioAttributes.Builder()
-            .setContentType(C.CONTENT_TYPE_SONIFICATION)
+            .setContentType(C.AUDIO_CONTENT_TYPE_SONIFICATION)
             .setFlags(C.FLAG_AUDIBILITY_ENFORCED)
             .setUsage(C.USAGE_ALARM)
             .setAllowedCapturePolicy(C.ALLOW_CAPTURE_BY_SYSTEM)

File: library/core/src/main/java/com/google/android/exoplayer2/AudioFocusManager.java
Patch:
@@ -296,7 +296,7 @@ private void abandonAudioFocusV26() {
   }
 
   private boolean willPauseWhenDucked() {
-    return audioAttributes != null && audioAttributes.contentType == C.CONTENT_TYPE_SPEECH;
+    return audioAttributes != null && audioAttributes.contentType == C.AUDIO_CONTENT_TYPE_SPEECH;
   }
 
   /**
@@ -367,7 +367,7 @@ private boolean willPauseWhenDucked() {
 
         // Special usages:
       case C.USAGE_ASSISTANCE_ACCESSIBILITY:
-        if (audioAttributes.contentType == C.CONTENT_TYPE_SPEECH) {
+        if (audioAttributes.contentType == C.AUDIO_CONTENT_TYPE_SPEECH) {
           // Voice shouldn't be interrupted by other playback.
           return AUDIOFOCUS_GAIN_TRANSIENT;
         }

File: library/core/src/test/java/com/google/android/exoplayer2/AudioFocusManagerTest.java
Patch:
@@ -395,7 +395,7 @@ public void onAudioFocusChange_withPausedWhenDucked_sendsCommandWaitForCallback(
     AudioAttributes speechAudioAttributes =
         new AudioAttributes.Builder()
             .setUsage(C.USAGE_MEDIA)
-            .setContentType(C.CONTENT_TYPE_SPEECH)
+            .setContentType(C.AUDIO_CONTENT_TYPE_SPEECH)
             .build();
     audioFocusManager.setAudioAttributes(speechAudioAttributes);
 

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/PeriodicVignetteFrameProcessor.java
Patch:
@@ -60,7 +60,6 @@
    *
    * <p>The parameters are given in normalized texture coordinates from 0 to 1.
    *
-   * @param context The {@link Context}.
    * @param centerX The x-coordinate of the center of the effect.
    * @param centerY The y-coordinate of the center of the effect.
    * @param minInnerRadius The lower bound of the radius that is unaffected by the effect.

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaServerSideAdInsertionUriBuilder.java
Patch:
@@ -137,7 +137,7 @@ public ImaServerSideAdInsertionUriBuilder setVideoId(@Nullable String videoId) {
   /**
    * Sets the format of the stream request.
    *
-   * @param format VOD or live stream type.
+   * @param format {@link C#TYPE_DASH} or {@link C#TYPE_HLS}.
    * @return This instance, for convenience.
    */
   public ImaServerSideAdInsertionUriBuilder setFormat(@ContentType int format) {

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -1243,7 +1243,7 @@ public static long parseXsDateTime(String value) throws ParserException {
 
     long time = dateTime.getTimeInMillis();
     if (timezoneShift != 0) {
-      time -= timezoneShift * 60000;
+      time -= timezoneShift * 60000L;
     }
 
     return time;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/amr/AmrExtractor.java
Patch:
@@ -412,6 +412,7 @@ private void assertInitialized() {
    * @return The stream bitrate.
    */
   private static int getBitrateFromFrameSize(int frameSize, long durationUsPerFrame) {
-    return (int) ((frameSize * C.BITS_PER_BYTE * C.MICROS_PER_SECOND) / durationUsPerFrame);
+    return (int)
+        ((frameSize * ((long) C.BITS_PER_BYTE) * C.MICROS_PER_SECOND) / durationUsPerFrame);
   }
 }

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -1740,9 +1740,9 @@ private static byte[] formatSubtitleTimecode(
     checkArgument(timeUs != C.TIME_UNSET);
     byte[] timeCodeData;
     int hours = (int) (timeUs / (3600 * C.MICROS_PER_SECOND));
-    timeUs -= (hours * 3600 * C.MICROS_PER_SECOND);
+    timeUs -= (hours * 3600L * C.MICROS_PER_SECOND);
     int minutes = (int) (timeUs / (60 * C.MICROS_PER_SECOND));
-    timeUs -= (minutes * 60 * C.MICROS_PER_SECOND);
+    timeUs -= (minutes * 60L * C.MICROS_PER_SECOND);
     int seconds = (int) (timeUs / C.MICROS_PER_SECOND);
     timeUs -= (seconds * C.MICROS_PER_SECOND);
     int lastValue = (int) (timeUs / lastTimecodeValueScalingFactor);

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp3/VbriSeeker.java
Patch:
@@ -89,7 +89,7 @@ public static VbriSeeker create(
         default:
           return null;
       }
-      position += segmentSize * scale;
+      position += segmentSize * ((long) scale);
     }
     if (inputLength != C.LENGTH_UNSET && inputLength != position) {
       Log.w(TAG, "VBRI data size mismatch: " + inputLength + ", " + position);

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractor.java
Patch:
@@ -363,6 +363,7 @@ private SeekMap getConstantBitrateSeekMap(long inputLength, boolean allowSeeksIf
    * @return The stream bitrate.
    */
   private static int getBitrateFromFrameSize(int frameSize, long durationUsPerFrame) {
-    return (int) ((frameSize * C.BITS_PER_BYTE * C.MICROS_PER_SECOND) / durationUsPerFrame);
+    return (int)
+        ((frameSize * ((long) C.BITS_PER_BYTE) * C.MICROS_PER_SECOND) / durationUsPerFrame);
   }
 }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeAdaptiveDataSet.java
Patch:
@@ -142,7 +142,8 @@ public long getChunkEndTimeUs() {
     for (int i = 0; i < trackGroup.length; i++) {
       String uri = getUri(i);
       Format format = trackGroup.getFormat(i);
-      double avgChunkLength = format.bitrate * chunkDurationUs / (8 * C.MICROS_PER_SECOND);
+      double avgChunkLength =
+          format.bitrate * chunkDurationUs / ((double) (8 * C.MICROS_PER_SECOND));
       FakeData newData = this.newData(uri);
       for (int j = 0; j < fullChunks; j++) {
         newData.appendReadData((int) (avgChunkLength * bitrateFactors[j]));

File: libraries/test_session_current/src/main/java/androidx/media3/session/MockPlayer.java
Patch:
@@ -1204,7 +1204,7 @@ public void awaitMethodCalled(@Method int method, long timeOutMs)
       throws TimeoutException, InterruptedException {
     if (!checkNotNull(conditionVariables.get(method)).block(timeOutMs)) {
       throw new TimeoutException(
-          Util.formatInvariant("Method %d not called after %f ms", method, timeOutMs));
+          Util.formatInvariant("Method %d not called after %d ms", method, timeOutMs));
     }
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -1008,7 +1008,7 @@ public boolean handleBuffer(
       if (configuration.outputMode == OUTPUT_MODE_PCM) {
         submittedPcmBytes += buffer.remaining();
       } else {
-        submittedEncodedFrames += framesPerEncodedSample * encodedAccessUnitCount;
+        submittedEncodedFrames += (long) framesPerEncodedSample * encodedAccessUnitCount;
       }
 
       inputBuffer = buffer;
@@ -1203,7 +1203,7 @@ private void writeBuffer(ByteBuffer buffer, long avSyncPresentationTimeUs) throw
         // When playing non-PCM, the inputBuffer is never processed, thus the last inputBuffer
         // must be the current input buffer.
         Assertions.checkState(buffer == inputBuffer);
-        writtenEncodedFrames += framesPerEncodedSample * inputBufferAccessUnitCount;
+        writtenEncodedFrames += (long) framesPerEncodedSample * inputBufferAccessUnitCount;
       }
       outputBuffer = null;
     }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/FrameProcessorChain.java
Patch:
@@ -481,8 +481,7 @@ private void processFrame() {
       GlUtil.focusEglSurface(
           eglDisplay, eglContext, debugPreviewEglSurface, debugPreviewWidth, debugPreviewHeight);
       clearOutputFrame();
-      // The four-vertex triangle strip forms a quad.
-      GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, /* first= */ 0, /* count= */ 4);
+      getLast(frameProcessors).drawFrame(presentationTimeUs);
       EGL14.eglSwapBuffers(eglDisplay, debugPreviewEglSurface);
     }
 

File: library/rtsp/src/test/java/com/google/android/exoplayer2/source/rtsp/RtspSessionTimingTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.ParserException;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -62,8 +63,7 @@ public void parseTiming_withRangeTimingAndColonSeparator() throws Exception {
   }
 
   @Test
-  public void parseTiming_withInvalidRangeTiming_throwsIllegalArgumentException() {
-    assertThrows(
-        IllegalArgumentException.class, () -> RtspSessionTiming.parseTiming("npt=10.000-2.054"));
+  public void parseTiming_withInvalidRangeTiming_throwsParserException() {
+    assertThrows(ParserException.class, () -> RtspSessionTiming.parseTiming("npt=10.000-2.054"));
   }
 }

File: library/rtsp/src/test/java/com/google/android/exoplayer2/source/rtsp/RtspAuthenticationInfoTest.java
Patch:
@@ -33,7 +33,7 @@ public void getAuthorizationHeaderValue_withBasicAuthenticationMechanism_getsCor
     String authenticationRealm = "WallyWorld";
     String username = "Aladdin";
     String password = "open sesame";
-    String expectedAuthorizationHeaderValue = "QWxhZGRpbjpvcGVuIHNlc2FtZQ==\n";
+    String expectedAuthorizationHeaderValue = "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\n";
     RtspAuthenticationInfo authenticator =
         new RtspAuthenticationInfo(
             RtspAuthenticationInfo.BASIC, authenticationRealm, /* nonce= */ "", /* opaque= */ "");

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -271,7 +271,7 @@ private static int getMaxPendingFrameCount() {
       // TODO(b/226330223): Investigate increasing this limit.
       return 1;
     }
-    if (Util.SDK_INT < 31
+    if (Util.SDK_INT < 33
         && ("OnePlus".equals(Util.MANUFACTURER) || "samsung".equals(Util.MANUFACTURER))) {
       // Some OMX decoders don't correctly track their number of output buffers available, and get
       // stuck if too many frames are rendered without being processed, so we limit the number of

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/analysis/BitrateAnalysisTest.java
Patch:
@@ -107,8 +107,6 @@ public void analyzeBitrate() throws Exception {
                     /* enableFallback= */ false))
             .build();
 
-    inputValues.put("Transformer", transformer);
-
     new TransformerAndroidTestRunner.Builder(context, transformer)
         .setInputValues(inputValues)
         .setCalculateSsim(true)

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/TransformationTest.java
Patch:
@@ -54,7 +54,7 @@ public void transform() throws Exception {
 
   @Test
   public void transformWithDecodeEncode() throws Exception {
-    String testId = TAG + "_transformForceCodecUse";
+    String testId = TAG + "_transformWithDecodeEncode";
     Context context = ApplicationProvider.getApplicationContext();
     Transformer transformer =
         new Transformer.Builder(context)

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeterTest.java
Patch:
@@ -761,7 +761,7 @@ private void setActiveNetworkInfo(NetworkInfo networkInfo, int networkTypeOverri
               networkInfo.getType(), networkTypeOverride);
       Shadows.shadowOf(telephonyManager).setTelephonyDisplayInfo(displayInfo);
     }
-    // Create a sticky broadcast for the connectivity action because Roboletric isn't replying with
+    // Create a sticky broadcast for the connectivity action because Robolectric isn't replying with
     // the current network state if a receiver for this intent is registered.
     ApplicationProvider.getApplicationContext()
         .sendStickyBroadcast(new Intent(ConnectivityManager.CONNECTIVITY_ACTION));

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/DefaultAudioSink.java
Patch:
@@ -1017,7 +1017,7 @@ public boolean handleBuffer(
       if (configuration.outputMode == OUTPUT_MODE_PCM) {
         submittedPcmBytes += buffer.remaining();
       } else {
-        submittedEncodedFrames += framesPerEncodedSample * encodedAccessUnitCount;
+        submittedEncodedFrames += (long) framesPerEncodedSample * encodedAccessUnitCount;
       }
 
       inputBuffer = buffer;
@@ -1212,7 +1212,7 @@ private void writeBuffer(ByteBuffer buffer, long avSyncPresentationTimeUs) throw
         // When playing non-PCM, the inputBuffer is never processed, thus the last inputBuffer
         // must be the current input buffer.
         Assertions.checkState(buffer == inputBuffer);
-        writtenEncodedFrames += framesPerEncodedSample * inputBufferAccessUnitCount;
+        writtenEncodedFrames += (long) framesPerEncodedSample * inputBufferAccessUnitCount;
       }
       outputBuffer = null;
     }

File: libraries/transformer/src/main/java/androidx/media3/transformer/FrameProcessorChain.java
Patch:
@@ -481,8 +481,7 @@ private void processFrame() {
       GlUtil.focusEglSurface(
           eglDisplay, eglContext, debugPreviewEglSurface, debugPreviewWidth, debugPreviewHeight);
       clearOutputFrame();
-      // The four-vertex triangle strip forms a quad.
-      GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, /* first= */ 0, /* count= */ 4);
+      getLast(frameProcessors).drawFrame(presentationTimeUs);
       EGL14.eglSwapBuffers(eglDisplay, debugPreviewEglSurface);
     }
 

File: libraries/exoplayer_rtsp/src/test/java/androidx/media3/exoplayer/rtsp/RtspSessionTimingTest.java
Patch:
@@ -19,6 +19,7 @@
 import static org.junit.Assert.assertThrows;
 
 import androidx.media3.common.C;
+import androidx.media3.common.ParserException;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -62,8 +63,7 @@ public void parseTiming_withRangeTimingAndColonSeparator() throws Exception {
   }
 
   @Test
-  public void parseTiming_withInvalidRangeTiming_throwsIllegalArgumentException() {
-    assertThrows(
-        IllegalArgumentException.class, () -> RtspSessionTiming.parseTiming("npt=10.000-2.054"));
+  public void parseTiming_withInvalidRangeTiming_throwsParserException() {
+    assertThrows(ParserException.class, () -> RtspSessionTiming.parseTiming("npt=10.000-2.054"));
   }
 }

File: libraries/exoplayer_rtsp/src/test/java/androidx/media3/exoplayer/rtsp/RtspAuthenticationInfoTest.java
Patch:
@@ -33,7 +33,7 @@ public void getAuthorizationHeaderValue_withBasicAuthenticationMechanism_getsCor
     String authenticationRealm = "WallyWorld";
     String username = "Aladdin";
     String password = "open sesame";
-    String expectedAuthorizationHeaderValue = "QWxhZGRpbjpvcGVuIHNlc2FtZQ==\n";
+    String expectedAuthorizationHeaderValue = "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\n";
     RtspAuthenticationInfo authenticator =
         new RtspAuthenticationInfo(
             RtspAuthenticationInfo.BASIC, authenticationRealm, /* nonce= */ "", /* opaque= */ "");

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -271,7 +271,7 @@ private static int getMaxPendingFrameCount() {
       // TODO(b/226330223): Investigate increasing this limit.
       return 1;
     }
-    if (Util.SDK_INT < 31
+    if (Util.SDK_INT < 33
         && ("OnePlus".equals(Util.MANUFACTURER) || "samsung".equals(Util.MANUFACTURER))) {
       // Some OMX decoders don't correctly track their number of output buffers available, and get
       // stuck if too many frames are rendered without being processed, so we limit the number of

File: libraries/session/src/main/java/androidx/media3/session/MediaController.java
Patch:
@@ -415,6 +415,7 @@ public void release() {
       return;
     }
     released = true;
+    applicationHandler.removeCallbacksAndMessages(null);
     try {
       impl.release();
     } catch (Exception e) {

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/analysis/BitrateAnalysisTest.java
Patch:
@@ -107,8 +107,6 @@ public void analyzeBitrate() throws Exception {
                     /* enableFallback= */ false))
             .build();
 
-    inputValues.put("Transformer", transformer);
-
     new TransformerAndroidTestRunner.Builder(context, transformer)
         .setInputValues(inputValues)
         .setCalculateSsim(true)

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/TransformationTest.java
Patch:
@@ -54,7 +54,7 @@ public void transform() throws Exception {
 
   @Test
   public void transformWithDecodeEncode() throws Exception {
-    String testId = TAG + "_transformForceCodecUse";
+    String testId = TAG + "_transformWithDecodeEncode";
     Context context = ApplicationProvider.getApplicationContext();
     Transformer transformer =
         new Transformer.Builder(context)

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/upstream/DefaultBandwidthMeterTest.java
Patch:
@@ -763,7 +763,7 @@ private void setActiveNetworkInfo(NetworkInfo networkInfo, int networkTypeOverri
               networkInfo.getType(), networkTypeOverride);
       Shadows.shadowOf(telephonyManager).setTelephonyDisplayInfo(displayInfo);
     }
-    // Create a sticky broadcast for the connectivity action because Roboletric isn't replying with
+    // Create a sticky broadcast for the connectivity action because Robolectric isn't replying with
     // the current network state if a receiver for this intent is registered.
     ApplicationProvider.getApplicationContext()
         .sendStickyBroadcast(new Intent(ConnectivityManager.CONNECTIVITY_ACTION));

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/AdvancedFrameProcessorTest.java
Patch:
@@ -39,7 +39,7 @@ public void construct_withInvalidMatrixSize_throwsException() {
   }
 
   @Test
-  public void construct_withValidMatrixSize_completesSucessfully() {
+  public void construct_withValidMatrixSize_completesSuccessfully() {
     new AdvancedFrameProcessor(getApplicationContext(), new float[16]);
   }
 }

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -1902,17 +1902,18 @@ public static UUID getDrmUuid(String drmScheme) {
 
   /**
    * Returns the MIME type corresponding to the given adaptive {@link ContentType}, or {@code null}
-   * if the content type is {@link C#TYPE_OTHER}.
+   * if the content type is not adaptive.
    */
   @Nullable
-  public static String getAdaptiveMimeTypeForContentType(int contentType) {
+  public static String getAdaptiveMimeTypeForContentType(@ContentType int contentType) {
     switch (contentType) {
       case C.TYPE_DASH:
         return MimeTypes.APPLICATION_MPD;
       case C.TYPE_HLS:
         return MimeTypes.APPLICATION_M3U8;
       case C.TYPE_SS:
         return MimeTypes.APPLICATION_SS;
+      case C.TYPE_RTSP:
       case C.TYPE_OTHER:
       default:
         return null;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/MuxerWrapper.java
Patch:
@@ -160,7 +160,9 @@ public boolean writeSample(
 
     trackTypeToBytesWritten.put(
         trackType, trackTypeToBytesWritten.get(trackType) + data.remaining());
-    trackTypeToTimeUs.put(trackType, presentationTimeUs);
+    if (trackTypeToTimeUs.get(trackType) < presentationTimeUs) {
+      trackTypeToTimeUs.put(trackType, presentationTimeUs);
+    }
 
     muxer.writeSampleData(trackIndex, data, isKeyFrame, presentationTimeUs);
     previousTrackType = trackType;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/AdvancedFrameProcessor.java
Patch:
@@ -126,9 +126,6 @@ public void updateProgramAndDraw(long presentationTimeUs) {
     checkStateNotNull(glProgram);
     glProgram.use();
     glProgram.bindAttributesAndUniforms();
-    GLES20.glClearColor(/* red= */ 0, /* green= */ 0, /* blue= */ 0, /* alpha= */ 0);
-    GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
-    GlUtil.checkGlError();
     // The four-vertex triangle strip forms a quad.
     GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, /* first= */ 0, /* count= */ 4);
     GlUtil.checkGlError();

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExternalCopyFrameProcessor.java
Patch:
@@ -105,8 +105,6 @@ public void updateProgramAndDraw(long presentationTimeUs) {
     checkStateNotNull(glProgram);
     glProgram.use();
     glProgram.bindAttributesAndUniforms();
-    GLES20.glClearColor(/* red= */ 0, /* green= */ 0, /* blue= */ 0, /* alpha= */ 0);
-    GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
     // The four-vertex triangle strip forms a quad.
     GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, /* first= */ 0, /* count= */ 4);
   }

File: library/core/src/main/java/com/google/android/exoplayer2/video/VideoFrameReleaseHelper.java
Patch:
@@ -166,7 +166,7 @@ public void onStarted() {
    * @param surface The new {@link Surface}, or {@code null} if the renderer does not have one.
    */
   public void onSurfaceChanged(@Nullable Surface surface) {
-    if (surface instanceof DummySurface) {
+    if (surface instanceof PlaceholderSurface) {
       // We don't care about dummy surfaces for release timing, since they're not visible.
       surface = null;
     }

File: library/core/src/test/java/com/google/android/exoplayer2/offline/DefaultDownloaderFactoryTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import android.net.Uri;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
-import com.google.android.exoplayer2.upstream.DummyDataSource;
+import com.google.android.exoplayer2.upstream.PlaceholderDataSource;
 import com.google.android.exoplayer2.upstream.cache.Cache;
 import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
 import org.junit.Test;
@@ -35,7 +35,7 @@ public void createProgressiveDownloader() throws Exception {
     CacheDataSource.Factory cacheDataSourceFactory =
         new CacheDataSource.Factory()
             .setCache(Mockito.mock(Cache.class))
-            .setUpstreamDataSourceFactory(DummyDataSource.FACTORY);
+            .setUpstreamDataSourceFactory(PlaceholderDataSource.FACTORY);
     DownloaderFactory factory =
         new DefaultDownloaderFactory(cacheDataSourceFactory, /* executor= */ Runnable::run);
 

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DashDownloaderTest.java
Patch:
@@ -40,7 +40,7 @@
 import com.google.android.exoplayer2.testutil.FakeDataSource;
 import com.google.android.exoplayer2.testutil.TestUtil;
 import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.upstream.DummyDataSource;
+import com.google.android.exoplayer2.upstream.PlaceholderDataSource;
 import com.google.android.exoplayer2.upstream.cache.Cache;
 import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
 import com.google.android.exoplayer2.upstream.cache.NoOpCacheEvictor;
@@ -86,7 +86,7 @@ public void createWithDefaultDownloaderFactory() {
     CacheDataSource.Factory cacheDataSourceFactory =
         new CacheDataSource.Factory()
             .setCache(Mockito.mock(Cache.class))
-            .setUpstreamDataSourceFactory(DummyDataSource.FACTORY);
+            .setUpstreamDataSourceFactory(PlaceholderDataSource.FACTORY);
     DownloaderFactory factory =
         new DefaultDownloaderFactory(cacheDataSourceFactory, /* executor= */ Runnable::run);
 
@@ -96,7 +96,7 @@ public void createWithDefaultDownloaderFactory() {
                 .setMimeType(MimeTypes.APPLICATION_MPD)
                 .setStreamKeys(
                     Collections.singletonList(
-                        new StreamKey(/* groupIndex= */ 0, /* trackIndex= */ 0)))
+                        new StreamKey(/* groupIndex= */ 0, /* streamIndex= */ 0)))
                 .build());
     assertThat(downloader).isInstanceOf(DashDownloader.class);
   }

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
Patch:
@@ -33,8 +33,8 @@
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DataSourceException;
 import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.upstream.DummyDataSource;
 import com.google.android.exoplayer2.upstream.FileDataSource;
+import com.google.android.exoplayer2.upstream.PlaceholderDataSource;
 import com.google.android.exoplayer2.upstream.PriorityDataSource;
 import com.google.android.exoplayer2.upstream.TeeDataSource;
 import com.google.android.exoplayer2.upstream.TransferListener;
@@ -539,7 +539,7 @@ private CacheDataSource(
               ? new TeeDataSource(upstreamDataSource, cacheWriteDataSink)
               : null;
     } else {
-      this.upstreamDataSource = DummyDataSource.INSTANCE;
+      this.upstreamDataSource = PlaceholderDataSource.INSTANCE;
       this.cacheWriteDataSource = null;
     }
     this.eventListener = eventListener;

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloaderTest.java
Patch:
@@ -48,7 +48,7 @@
 import com.google.android.exoplayer2.testutil.FakeDataSet;
 import com.google.android.exoplayer2.testutil.FakeDataSource;
 import com.google.android.exoplayer2.testutil.TestUtil;
-import com.google.android.exoplayer2.upstream.DummyDataSource;
+import com.google.android.exoplayer2.upstream.PlaceholderDataSource;
 import com.google.android.exoplayer2.upstream.cache.Cache;
 import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
 import com.google.android.exoplayer2.upstream.cache.NoOpCacheEvictor;
@@ -104,7 +104,7 @@ public void createWithDefaultDownloaderFactory() {
     CacheDataSource.Factory cacheDataSourceFactory =
         new CacheDataSource.Factory()
             .setCache(Mockito.mock(Cache.class))
-            .setUpstreamDataSourceFactory(DummyDataSource.FACTORY);
+            .setUpstreamDataSourceFactory(PlaceholderDataSource.FACTORY);
     DownloaderFactory factory =
         new DefaultDownloaderFactory(cacheDataSourceFactory, /* executor= */ Runnable::run);
 
@@ -114,7 +114,7 @@ public void createWithDefaultDownloaderFactory() {
                 .setMimeType(MimeTypes.APPLICATION_M3U8)
                 .setStreamKeys(
                     Collections.singletonList(
-                        new StreamKey(/* groupIndex= */ 0, /* trackIndex= */ 0)))
+                        new StreamKey(/* groupIndex= */ 0, /* streamIndex= */ 0)))
                 .build());
     assertThat(downloader).isInstanceOf(HlsDownloader.class);
   }

File: library/smoothstreaming/src/test/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloaderTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.google.android.exoplayer2.offline.Downloader;
 import com.google.android.exoplayer2.offline.DownloaderFactory;
 import com.google.android.exoplayer2.offline.StreamKey;
-import com.google.android.exoplayer2.upstream.DummyDataSource;
+import com.google.android.exoplayer2.upstream.PlaceholderDataSource;
 import com.google.android.exoplayer2.upstream.cache.Cache;
 import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
 import com.google.android.exoplayer2.util.MimeTypes;
@@ -42,7 +42,7 @@ public void createWithDefaultDownloaderFactory() throws Exception {
     CacheDataSource.Factory cacheDataSourceFactory =
         new CacheDataSource.Factory()
             .setCache(Mockito.mock(Cache.class))
-            .setUpstreamDataSourceFactory(DummyDataSource.FACTORY);
+            .setUpstreamDataSourceFactory(PlaceholderDataSource.FACTORY);
     DownloaderFactory factory =
         new DefaultDownloaderFactory(cacheDataSourceFactory, /* executor= */ Runnable::run);
 
@@ -52,7 +52,7 @@ public void createWithDefaultDownloaderFactory() throws Exception {
                 .setMimeType(MimeTypes.APPLICATION_SS)
                 .setStreamKeys(
                     Collections.singletonList(
-                        new StreamKey(/* groupIndex= */ 0, /* trackIndex= */ 0)))
+                        new StreamKey(/* groupIndex= */ 0, /* streamIndex= */ 0)))
                 .build());
     assertThat(downloader).isInstanceOf(SsDownloader.class);
   }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/CacheAsserts.java
Patch:
@@ -24,7 +24,7 @@
 import com.google.android.exoplayer2.upstream.DataSourceInputStream;
 import com.google.android.exoplayer2.upstream.DataSourceUtil;
 import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.upstream.DummyDataSource;
+import com.google.android.exoplayer2.upstream.PlaceholderDataSource;
 import com.google.android.exoplayer2.upstream.cache.Cache;
 import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
 import com.google.android.exoplayer2.util.Assertions;
@@ -127,7 +127,7 @@ public static void assertCachedData(Cache cache, FakeDataSet fakeDataSet) throws
    */
   public static void assertDataCached(Cache cache, DataSpec dataSpec, byte[] expected)
       throws IOException {
-    DataSource dataSource = new CacheDataSource(cache, DummyDataSource.INSTANCE, 0);
+    DataSource dataSource = new CacheDataSource(cache, PlaceholderDataSource.INSTANCE, 0);
     byte[] bytes;
     try {
       dataSource.open(dataSpec);

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaPeriod.java
Patch:
@@ -644,7 +644,8 @@ private void buildAndPrepareMainSampleStreamWrapper(
     int numberOfVideoCodecs = Util.getCodecCountOfType(codecs, C.TRACK_TYPE_VIDEO);
     int numberOfAudioCodecs = Util.getCodecCountOfType(codecs, C.TRACK_TYPE_AUDIO);
     boolean codecsStringAllowsChunklessPreparation =
-        numberOfAudioCodecs <= 1
+        (numberOfAudioCodecs == 1
+                || (numberOfAudioCodecs == 0 && multivariantPlaylist.audios.isEmpty()))
             && numberOfVideoCodecs <= 1
             && numberOfAudioCodecs + numberOfVideoCodecs > 0;
     @C.TrackType

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/TransformerAndroidTestRunner.java
Patch:
@@ -309,6 +309,9 @@ private static JSONObject getTestResultJson(TransformationTestResult testResult)
     TransformationResult transformationResult = testResult.transformationResult;
 
     JSONObject transformationResultJson = new JSONObject();
+    if (transformationResult.durationMs != C.LENGTH_UNSET) {
+      transformationResultJson.put("durationMs", transformationResult.durationMs);
+    }
     if (transformationResult.fileSizeBytes != C.LENGTH_UNSET) {
       transformationResultJson.put("fileSizeBytes", transformationResult.fileSizeBytes);
     }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/AdvancedFrameProcessor.java
Patch:
@@ -122,7 +122,7 @@ public void initialize(int inputTexId) throws IOException {
   }
 
   @Override
-  public void updateProgramAndDraw(long presentationTimeNs) {
+  public void updateProgramAndDraw(long presentationTimeUs) {
     checkStateNotNull(glProgram);
     glProgram.use();
     glProgram.bindAttributesAndUniforms();

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExternalCopyFrameProcessor.java
Patch:
@@ -101,7 +101,7 @@ public void setTextureTransformMatrix(float[] textureTransformMatrix) {
   }
 
   @Override
-  public void updateProgramAndDraw(long presentationTimeNs) {
+  public void updateProgramAndDraw(long presentationTimeUs) {
     checkStateNotNull(glProgram);
     glProgram.use();
     glProgram.bindAttributesAndUniforms();

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/GlFrameProcessor.java
Patch:
@@ -58,9 +58,9 @@ public interface GlFrameProcessor {
    * <p>The frame processor must be {@linkplain #initialize(int) initialized}. The caller is
    * responsible for focussing the correct render target before calling this method.
    *
-   * @param presentationTimeNs The presentation timestamp of the current frame, in nanoseconds.
+   * @param presentationTimeUs The presentation timestamp of the current frame, in microseconds.
    */
-  void updateProgramAndDraw(long presentationTimeNs);
+  void updateProgramAndDraw(long presentationTimeUs);
 
   /** Releases all resources. */
   void release();

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/PresentationFrameProcessor.java
Patch:
@@ -150,8 +150,8 @@ public void initialize(int inputTexId) throws IOException {
   }
 
   @Override
-  public void updateProgramAndDraw(long presentationTimeNs) {
-    checkStateNotNull(advancedFrameProcessor).updateProgramAndDraw(presentationTimeNs);
+  public void updateProgramAndDraw(long presentationTimeUs) {
+    checkStateNotNull(advancedFrameProcessor).updateProgramAndDraw(presentationTimeUs);
   }
 
   @Override

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ScaleToFitFrameProcessor.java
Patch:
@@ -174,8 +174,8 @@ public void initialize(int inputTexId) throws IOException {
   }
 
   @Override
-  public void updateProgramAndDraw(long presentationTimeNs) {
-    checkStateNotNull(advancedFrameProcessor).updateProgramAndDraw(presentationTimeNs);
+  public void updateProgramAndDraw(long presentationTimeUs) {
+    checkStateNotNull(advancedFrameProcessor).updateProgramAndDraw(presentationTimeUs);
   }
 
   @Override

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -1000,6 +1000,7 @@ private void handleTransformationEnded(@Nullable TransformationException excepti
       } else {
         TransformationResult result =
             new TransformationResult.Builder()
+                .setDurationMs(muxerWrapper.getDurationMs())
                 .setAverageAudioBitrate(muxerWrapper.getTrackAverageBitrate(C.TRACK_TYPE_AUDIO))
                 .setAverageVideoBitrate(muxerWrapper.getTrackAverageBitrate(C.TRACK_TYPE_VIDEO))
                 .build();

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -518,6 +518,9 @@ private static List<MediaItem> createMediaItems(Intent intent, DownloadTracker d
 
   private static MediaItem maybeSetDownloadProperties(
       MediaItem item, @Nullable DownloadRequest downloadRequest) {
+    if (downloadRequest == null) {
+      return item;
+    }
     MediaItem.Builder builder = item.buildUpon();
     builder
         .setMediaId(downloadRequest.id)

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/ConfigurationActivity.java
Patch:
@@ -61,13 +61,15 @@ public final class ConfigurationActivity extends AppCompatActivity {
     "https://storage.googleapis.com/exoplayer-test-media-0/BigBuckBunny_320x180.mp4",
     "https://html5demos.com/assets/dizzy.webm",
     "https://storage.googleapis.com/exoplayer-test-media-1/mp4/portrait_4k60.mp4",
+    "https://storage.googleapis.com/exoplayer-test-media-1/mp4/8k24fps_4s.mp4",
   };
   private static final String[] URI_DESCRIPTIONS = { // same order as INPUT_URIS
     "MP4 with H264 video and AAC audio",
     "MP4 with H265 video and AAC audio",
     "Long MP4 with H264 video and AAC audio",
     "WebM with VP8 video and Vorbis audio",
     "4K 60fps MP4 with H264 video and AAC audio (portrait, timestamps always increase)",
+    "8k 24fps MP4 with H265 video and AAC audio",
   };
   private static final String SAME_AS_INPUT_OPTION = "same as input";
 

File: libraries/transformer/src/test/java/androidx/media3/transformer/AdvancedFrameProcessorTest.java
Patch:
@@ -39,7 +39,7 @@ public void construct_withInvalidMatrixSize_throwsException() {
   }
 
   @Test
-  public void construct_withValidMatrixSize_completesSucessfully() {
+  public void construct_withValidMatrixSize_completesSuccessfully() {
     new AdvancedFrameProcessor(getApplicationContext(), new float[16]);
   }
 }

File: libraries/common/src/main/java/androidx/media3/common/util/Util.java
Patch:
@@ -1904,17 +1904,18 @@ public static UUID getDrmUuid(String drmScheme) {
 
   /**
    * Returns the MIME type corresponding to the given adaptive {@link ContentType}, or {@code null}
-   * if the content type is {@link C#TYPE_OTHER}.
+   * if the content type is not adaptive.
    */
   @Nullable
-  public static String getAdaptiveMimeTypeForContentType(int contentType) {
+  public static String getAdaptiveMimeTypeForContentType(@ContentType int contentType) {
     switch (contentType) {
       case C.TYPE_DASH:
         return MimeTypes.APPLICATION_MPD;
       case C.TYPE_HLS:
         return MimeTypes.APPLICATION_M3U8;
       case C.TYPE_SS:
         return MimeTypes.APPLICATION_SS;
+      case C.TYPE_RTSP:
       case C.TYPE_OTHER:
       default:
         return null;

File: libraries/transformer/src/main/java/androidx/media3/transformer/MuxerWrapper.java
Patch:
@@ -160,7 +160,9 @@ public boolean writeSample(
 
     trackTypeToBytesWritten.put(
         trackType, trackTypeToBytesWritten.get(trackType) + data.remaining());
-    trackTypeToTimeUs.put(trackType, presentationTimeUs);
+    if (trackTypeToTimeUs.get(trackType) < presentationTimeUs) {
+      trackTypeToTimeUs.put(trackType, presentationTimeUs);
+    }
 
     muxer.writeSampleData(trackIndex, data, isKeyFrame, presentationTimeUs);
     previousTrackType = trackType;

File: libraries/transformer/src/main/java/androidx/media3/transformer/AdvancedFrameProcessor.java
Patch:
@@ -128,9 +128,6 @@ public void updateProgramAndDraw(long presentationTimeUs) {
     checkStateNotNull(glProgram);
     glProgram.use();
     glProgram.bindAttributesAndUniforms();
-    GLES20.glClearColor(/* red= */ 0, /* green= */ 0, /* blue= */ 0, /* alpha= */ 0);
-    GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
-    GlUtil.checkGlError();
     // The four-vertex triangle strip forms a quad.
     GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, /* first= */ 0, /* count= */ 4);
     GlUtil.checkGlError();

File: libraries/transformer/src/main/java/androidx/media3/transformer/ExternalCopyFrameProcessor.java
Patch:
@@ -105,8 +105,6 @@ public void updateProgramAndDraw(long presentationTimeUs) {
     checkStateNotNull(glProgram);
     glProgram.use();
     glProgram.bindAttributesAndUniforms();
-    GLES20.glClearColor(/* red= */ 0, /* green= */ 0, /* blue= */ 0, /* alpha= */ 0);
-    GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
     // The four-vertex triangle strip forms a quad.
     GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, /* first= */ 0, /* count= */ 4);
   }

File: libraries/common/src/main/java/androidx/media3/common/MimeTypes.java
Patch:
@@ -108,11 +108,10 @@ public final class MimeTypes {
   public static final String APPLICATION_MP4 = BASE_TYPE_APPLICATION + "/mp4";
   public static final String APPLICATION_WEBM = BASE_TYPE_APPLICATION + "/webm";
 
-  @UnstableApi
   public static final String APPLICATION_MATROSKA = BASE_TYPE_APPLICATION + "/x-matroska";
 
   public static final String APPLICATION_MPD = BASE_TYPE_APPLICATION + "/dash+xml";
-  @UnstableApi public static final String APPLICATION_M3U8 = BASE_TYPE_APPLICATION + "/x-mpegURL";
+  public static final String APPLICATION_M3U8 = BASE_TYPE_APPLICATION + "/x-mpegURL";
   public static final String APPLICATION_SS = BASE_TYPE_APPLICATION + "/vnd.ms-sstr+xml";
   public static final String APPLICATION_ID3 = BASE_TYPE_APPLICATION + "/id3";
   public static final String APPLICATION_CEA608 = BASE_TYPE_APPLICATION + "/cea-608";
@@ -135,7 +134,7 @@ public final class MimeTypes {
   @UnstableApi public static final String APPLICATION_EXIF = BASE_TYPE_APPLICATION + "/x-exif";
   @UnstableApi public static final String APPLICATION_ICY = BASE_TYPE_APPLICATION + "/x-icy";
   public static final String APPLICATION_AIT = BASE_TYPE_APPLICATION + "/vnd.dvb.ait";
-  @UnstableApi public static final String APPLICATION_RTSP = BASE_TYPE_APPLICATION + "/x-rtsp";
+  public static final String APPLICATION_RTSP = BASE_TYPE_APPLICATION + "/x-rtsp";
 
   // image/ MIME types
 

File: libraries/datasource/src/main/java/androidx/media3/datasource/cache/CacheDataSource.java
Patch:
@@ -36,8 +36,8 @@
 import androidx.media3.datasource.DataSource;
 import androidx.media3.datasource.DataSourceException;
 import androidx.media3.datasource.DataSpec;
-import androidx.media3.datasource.DummyDataSource;
 import androidx.media3.datasource.FileDataSource;
+import androidx.media3.datasource.PlaceholderDataSource;
 import androidx.media3.datasource.PriorityDataSource;
 import androidx.media3.datasource.TeeDataSource;
 import androidx.media3.datasource.TransferListener;
@@ -541,7 +541,7 @@ private CacheDataSource(
               ? new TeeDataSource(upstreamDataSource, cacheWriteDataSink)
               : null;
     } else {
-      this.upstreamDataSource = DummyDataSource.INSTANCE;
+      this.upstreamDataSource = PlaceholderDataSource.INSTANCE;
       this.cacheWriteDataSource = null;
     }
     this.eventListener = eventListener;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/VideoFrameReleaseHelper.java
Patch:
@@ -168,7 +168,7 @@ public void onStarted() {
    * @param surface The new {@link Surface}, or {@code null} if the renderer does not have one.
    */
   public void onSurfaceChanged(@Nullable Surface surface) {
-    if (surface instanceof DummySurface) {
+    if (surface instanceof PlaceholderSurface) {
       // We don't care about dummy surfaces for release timing, since they're not visible.
       surface = null;
     }

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/offline/DefaultDownloaderFactoryTest.java
Patch:
@@ -18,7 +18,7 @@
 import static com.google.common.truth.Truth.assertThat;
 
 import android.net.Uri;
-import androidx.media3.datasource.DummyDataSource;
+import androidx.media3.datasource.PlaceholderDataSource;
 import androidx.media3.datasource.cache.Cache;
 import androidx.media3.datasource.cache.CacheDataSource;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
@@ -35,7 +35,7 @@ public void createProgressiveDownloader() throws Exception {
     CacheDataSource.Factory cacheDataSourceFactory =
         new CacheDataSource.Factory()
             .setCache(Mockito.mock(Cache.class))
-            .setUpstreamDataSourceFactory(DummyDataSource.FACTORY);
+            .setUpstreamDataSourceFactory(PlaceholderDataSource.FACTORY);
     DownloaderFactory factory =
         new DefaultDownloaderFactory(cacheDataSourceFactory, /* executor= */ Runnable::run);
 

File: libraries/exoplayer_dash/src/test/java/androidx/media3/exoplayer/dash/offline/DashDownloaderTest.java
Patch:
@@ -31,7 +31,7 @@
 import androidx.media3.common.StreamKey;
 import androidx.media3.common.util.Util;
 import androidx.media3.datasource.DataSpec;
-import androidx.media3.datasource.DummyDataSource;
+import androidx.media3.datasource.PlaceholderDataSource;
 import androidx.media3.datasource.cache.Cache;
 import androidx.media3.datasource.cache.CacheDataSource;
 import androidx.media3.datasource.cache.NoOpCacheEvictor;
@@ -86,7 +86,7 @@ public void createWithDefaultDownloaderFactory() {
     CacheDataSource.Factory cacheDataSourceFactory =
         new CacheDataSource.Factory()
             .setCache(Mockito.mock(Cache.class))
-            .setUpstreamDataSourceFactory(DummyDataSource.FACTORY);
+            .setUpstreamDataSourceFactory(PlaceholderDataSource.FACTORY);
     DownloaderFactory factory =
         new DefaultDownloaderFactory(cacheDataSourceFactory, /* executor= */ Runnable::run);
 
@@ -96,7 +96,7 @@ public void createWithDefaultDownloaderFactory() {
                 .setMimeType(MimeTypes.APPLICATION_MPD)
                 .setStreamKeys(
                     Collections.singletonList(
-                        new StreamKey(/* groupIndex= */ 0, /* trackIndex= */ 0)))
+                        new StreamKey(/* groupIndex= */ 0, /* streamIndex= */ 0)))
                 .build());
     assertThat(downloader).isInstanceOf(DashDownloader.class);
   }

File: libraries/exoplayer_hls/src/test/java/androidx/media3/exoplayer/hls/offline/HlsDownloaderTest.java
Patch:
@@ -39,7 +39,7 @@
 import androidx.media3.common.MimeTypes;
 import androidx.media3.common.StreamKey;
 import androidx.media3.common.util.Util;
-import androidx.media3.datasource.DummyDataSource;
+import androidx.media3.datasource.PlaceholderDataSource;
 import androidx.media3.datasource.cache.Cache;
 import androidx.media3.datasource.cache.CacheDataSource;
 import androidx.media3.datasource.cache.NoOpCacheEvictor;
@@ -104,7 +104,7 @@ public void createWithDefaultDownloaderFactory() {
     CacheDataSource.Factory cacheDataSourceFactory =
         new CacheDataSource.Factory()
             .setCache(Mockito.mock(Cache.class))
-            .setUpstreamDataSourceFactory(DummyDataSource.FACTORY);
+            .setUpstreamDataSourceFactory(PlaceholderDataSource.FACTORY);
     DownloaderFactory factory =
         new DefaultDownloaderFactory(cacheDataSourceFactory, /* executor= */ Runnable::run);
 
@@ -114,7 +114,7 @@ public void createWithDefaultDownloaderFactory() {
                 .setMimeType(MimeTypes.APPLICATION_M3U8)
                 .setStreamKeys(
                     Collections.singletonList(
-                        new StreamKey(/* groupIndex= */ 0, /* trackIndex= */ 0)))
+                        new StreamKey(/* groupIndex= */ 0, /* streamIndex= */ 0)))
                 .build());
     assertThat(downloader).isInstanceOf(HlsDownloader.class);
   }

File: libraries/exoplayer_smoothstreaming/src/test/java/androidx/media3/exoplayer/smoothstreaming/offline/SsDownloaderTest.java
Patch:
@@ -20,7 +20,7 @@
 import android.net.Uri;
 import androidx.media3.common.MimeTypes;
 import androidx.media3.common.StreamKey;
-import androidx.media3.datasource.DummyDataSource;
+import androidx.media3.datasource.PlaceholderDataSource;
 import androidx.media3.datasource.cache.Cache;
 import androidx.media3.datasource.cache.CacheDataSource;
 import androidx.media3.exoplayer.offline.DefaultDownloaderFactory;
@@ -42,7 +42,7 @@ public void createWithDefaultDownloaderFactory() throws Exception {
     CacheDataSource.Factory cacheDataSourceFactory =
         new CacheDataSource.Factory()
             .setCache(Mockito.mock(Cache.class))
-            .setUpstreamDataSourceFactory(DummyDataSource.FACTORY);
+            .setUpstreamDataSourceFactory(PlaceholderDataSource.FACTORY);
     DownloaderFactory factory =
         new DefaultDownloaderFactory(cacheDataSourceFactory, /* executor= */ Runnable::run);
 
@@ -52,7 +52,7 @@ public void createWithDefaultDownloaderFactory() throws Exception {
                 .setMimeType(MimeTypes.APPLICATION_SS)
                 .setStreamKeys(
                     Collections.singletonList(
-                        new StreamKey(/* groupIndex= */ 0, /* trackIndex= */ 0)))
+                        new StreamKey(/* groupIndex= */ 0, /* streamIndex= */ 0)))
                 .build());
     assertThat(downloader).isInstanceOf(SsDownloader.class);
   }

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/CacheAsserts.java
Patch:
@@ -26,7 +26,7 @@
 import androidx.media3.datasource.DataSourceInputStream;
 import androidx.media3.datasource.DataSourceUtil;
 import androidx.media3.datasource.DataSpec;
-import androidx.media3.datasource.DummyDataSource;
+import androidx.media3.datasource.PlaceholderDataSource;
 import androidx.media3.datasource.cache.Cache;
 import androidx.media3.datasource.cache.CacheDataSource;
 import androidx.media3.test.utils.FakeDataSet.FakeData;
@@ -129,7 +129,7 @@ public static void assertCachedData(Cache cache, FakeDataSet fakeDataSet) throws
    */
   public static void assertDataCached(Cache cache, DataSpec dataSpec, byte[] expected)
       throws IOException {
-    DataSource dataSource = new CacheDataSource(cache, DummyDataSource.INSTANCE, 0);
+    DataSource dataSource = new CacheDataSource(cache, PlaceholderDataSource.INSTANCE, 0);
     byte[] bytes;
     try {
       dataSource.open(dataSpec);

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsMediaPeriod.java
Patch:
@@ -646,7 +646,8 @@ private void buildAndPrepareMainSampleStreamWrapper(
     int numberOfVideoCodecs = Util.getCodecCountOfType(codecs, C.TRACK_TYPE_VIDEO);
     int numberOfAudioCodecs = Util.getCodecCountOfType(codecs, C.TRACK_TYPE_AUDIO);
     boolean codecsStringAllowsChunklessPreparation =
-        numberOfAudioCodecs <= 1
+        (numberOfAudioCodecs == 1
+                || (numberOfAudioCodecs == 0 && multivariantPlaylist.audios.isEmpty()))
             && numberOfVideoCodecs <= 1
             && numberOfAudioCodecs + numberOfVideoCodecs > 0;
     @C.TrackType

File: libraries/test_session_common/src/main/java/androidx/media3/test/session/common/MediaBrowserConstants.java
Patch:
@@ -36,6 +36,9 @@ public class MediaBrowserConstants {
   public static final String PARENT_ID_LONG_LIST = "parent_id_long_list";
   public static final String PARENT_ID_NO_CHILDREN = "parent_id_no_children";
   public static final String PARENT_ID_ERROR = "parent_id_error";
+  public static final String PARENT_ID_AUTH_EXPIRED_ERROR = "parent_auth_expired_error";
+  public static final String PARENT_ID_AUTH_EXPIRED_ERROR_KEY_ERROR_RESOLUTION_ACTION_LABEL =
+      "parent_auth_expired_error_label";
 
   public static final List<String> GET_CHILDREN_RESULT = new ArrayList<>();
   public static final int CHILDREN_COUNT = 100;

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/TransformerAndroidTestRunner.java
Patch:
@@ -309,6 +309,9 @@ private static JSONObject getTestResultJson(TransformationTestResult testResult)
     TransformationResult transformationResult = testResult.transformationResult;
 
     JSONObject transformationResultJson = new JSONObject();
+    if (transformationResult.durationMs != C.LENGTH_UNSET) {
+      transformationResultJson.put("durationMs", transformationResult.durationMs);
+    }
     if (transformationResult.fileSizeBytes != C.LENGTH_UNSET) {
       transformationResultJson.put("fileSizeBytes", transformationResult.fileSizeBytes);
     }

File: libraries/transformer/src/main/java/androidx/media3/transformer/AdvancedFrameProcessor.java
Patch:
@@ -124,7 +124,7 @@ public void initialize(int inputTexId) throws IOException {
   }
 
   @Override
-  public void updateProgramAndDraw(long presentationTimeNs) {
+  public void updateProgramAndDraw(long presentationTimeUs) {
     checkStateNotNull(glProgram);
     glProgram.use();
     glProgram.bindAttributesAndUniforms();

File: libraries/transformer/src/main/java/androidx/media3/transformer/ExternalCopyFrameProcessor.java
Patch:
@@ -101,7 +101,7 @@ public void setTextureTransformMatrix(float[] textureTransformMatrix) {
   }
 
   @Override
-  public void updateProgramAndDraw(long presentationTimeNs) {
+  public void updateProgramAndDraw(long presentationTimeUs) {
     checkStateNotNull(glProgram);
     glProgram.use();
     glProgram.bindAttributesAndUniforms();

File: libraries/transformer/src/main/java/androidx/media3/transformer/GlFrameProcessor.java
Patch:
@@ -60,9 +60,9 @@ public interface GlFrameProcessor {
    * <p>The frame processor must be {@linkplain #initialize(int) initialized}. The caller is
    * responsible for focussing the correct render target before calling this method.
    *
-   * @param presentationTimeNs The presentation timestamp of the current frame, in nanoseconds.
+   * @param presentationTimeUs The presentation timestamp of the current frame, in microseconds.
    */
-  void updateProgramAndDraw(long presentationTimeNs);
+  void updateProgramAndDraw(long presentationTimeUs);
 
   /** Releases all resources. */
   void release();

File: libraries/transformer/src/main/java/androidx/media3/transformer/PresentationFrameProcessor.java
Patch:
@@ -152,8 +152,8 @@ public void initialize(int inputTexId) throws IOException {
   }
 
   @Override
-  public void updateProgramAndDraw(long presentationTimeNs) {
-    checkStateNotNull(advancedFrameProcessor).updateProgramAndDraw(presentationTimeNs);
+  public void updateProgramAndDraw(long presentationTimeUs) {
+    checkStateNotNull(advancedFrameProcessor).updateProgramAndDraw(presentationTimeUs);
   }
 
   @Override

File: libraries/transformer/src/main/java/androidx/media3/transformer/ScaleToFitFrameProcessor.java
Patch:
@@ -176,8 +176,8 @@ public void initialize(int inputTexId) throws IOException {
   }
 
   @Override
-  public void updateProgramAndDraw(long presentationTimeNs) {
-    checkStateNotNull(advancedFrameProcessor).updateProgramAndDraw(presentationTimeNs);
+  public void updateProgramAndDraw(long presentationTimeUs) {
+    checkStateNotNull(advancedFrameProcessor).updateProgramAndDraw(presentationTimeUs);
   }
 
   @Override

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -1002,6 +1002,7 @@ private void handleTransformationEnded(@Nullable TransformationException excepti
       } else {
         TransformationResult result =
             new TransformationResult.Builder()
+                .setDurationMs(muxerWrapper.getDurationMs())
                 .setAverageAudioBitrate(muxerWrapper.getTrackAverageBitrate(C.TRACK_TYPE_AUDIO))
                 .setAverageVideoBitrate(muxerWrapper.getTrackAverageBitrate(C.TRACK_TYPE_VIDEO))
                 .build();

File: demos/main/src/main/java/androidx/media3/demo/main/PlayerActivity.java
Patch:
@@ -520,6 +520,9 @@ private static List<MediaItem> createMediaItems(Intent intent, DownloadTracker d
   @OptIn(markerClass = androidx.media3.common.util.UnstableApi.class)
   private static MediaItem maybeSetDownloadProperties(
       MediaItem item, @Nullable DownloadRequest downloadRequest) {
+    if (downloadRequest == null) {
+      return item;
+    }
     MediaItem.Builder builder = item.buildUpon();
     builder
         .setMediaId(downloadRequest.id)

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/ConfigurationActivity.java
Patch:
@@ -61,13 +61,15 @@ public final class ConfigurationActivity extends AppCompatActivity {
     "https://storage.googleapis.com/exoplayer-test-media-0/BigBuckBunny_320x180.mp4",
     "https://html5demos.com/assets/dizzy.webm",
     "https://storage.googleapis.com/exoplayer-test-media-1/mp4/portrait_4k60.mp4",
+    "https://storage.googleapis.com/exoplayer-test-media-1/mp4/8k24fps_4s.mp4",
   };
   private static final String[] URI_DESCRIPTIONS = { // same order as INPUT_URIS
     "MP4 with H264 video and AAC audio",
     "MP4 with H265 video and AAC audio",
     "Long MP4 with H264 video and AAC audio",
     "WebM with VP8 video and Vorbis audio",
     "4K 60fps MP4 with H264 video and AAC audio (portrait, timestamps always increase)",
+    "8k 24fps MP4 with H265 video and AAC audio",
   };
   private static final String SAME_AS_INPUT_OPTION = "same as input";
 

File: libraries/session/src/main/java/androidx/media3/session/MediaController.java
Patch:
@@ -417,6 +417,7 @@ public void release() {
       return;
     }
     released = true;
+    applicationHandler.removeCallbacksAndMessages(null);
     try {
       impl.release();
     } catch (Exception e) {

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/AdvancedFrameProcessor.java
Patch:
@@ -127,8 +127,10 @@ public void updateProgramAndDraw(long presentationTimeNs) {
     glProgram.bindAttributesAndUniforms();
     GLES20.glClearColor(/* red= */ 0, /* green= */ 0, /* blue= */ 0, /* alpha= */ 0);
     GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
+    GlUtil.checkGlError();
     // The four-vertex triangle strip forms a quad.
     GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, /* first= */ 0, /* count= */ 4);
+    GlUtil.checkGlError();
   }
 
   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecUtil.java
Patch:
@@ -441,6 +441,8 @@ private static String getCodecMimeType(
       return "audio/x-lg-alac";
     } else if (mimeType.equals(MimeTypes.AUDIO_FLAC) && "OMX.lge.flac.decoder".equals(name)) {
       return "audio/x-lg-flac";
+    } else if (mimeType.equals(MimeTypes.AUDIO_AC3) && "OMX.lge.ac3.decoder".equals(name)) {
+      return "audio/lg-ac3";
     }
 
     return null;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/SamplePipeline.java
Patch:
@@ -40,8 +40,8 @@
   void queueInputBuffer() throws TransformationException;
 
   /**
-   * Processes the input data and returns whether more data can be processed by calling this method
-   * again.
+   * Processes the input data and returns whether it may be possible to process more data by calling
+   * this method again.
    */
   boolean processData() throws TransformationException;
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/AdvancedFrameProcessor.java
Patch:
@@ -127,8 +127,10 @@ public void updateProgramAndDraw(long presentationTimeNs) {
     glProgram.bindAttributesAndUniforms();
     GLES20.glClearColor(/* red= */ 0, /* green= */ 0, /* blue= */ 0, /* alpha= */ 0);
     GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
+    GlUtil.checkGlError();
     // The four-vertex triangle strip forms a quad.
     GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, /* first= */ 0, /* count= */ 4);
+    GlUtil.checkGlError();
   }
 
   @Override

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/MediaCodecUtil.java
Patch:
@@ -443,6 +443,8 @@ private static String getCodecMimeType(
       return "audio/x-lg-alac";
     } else if (mimeType.equals(MimeTypes.AUDIO_FLAC) && "OMX.lge.flac.decoder".equals(name)) {
       return "audio/x-lg-flac";
+    } else if (mimeType.equals(MimeTypes.AUDIO_AC3) && "OMX.lge.ac3.decoder".equals(name)) {
+      return "audio/lg-ac3";
     }
 
     return null;

File: libraries/transformer/src/main/java/androidx/media3/transformer/SamplePipeline.java
Patch:
@@ -40,8 +40,8 @@
   void queueInputBuffer() throws TransformationException;
 
   /**
-   * Processes the input data and returns whether more data can be processed by calling this method
-   * again.
+   * Processes the input data and returns whether it may be possible to process more data by calling
+   * this method again.
    */
   boolean processData() throws TransformationException;
 

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtpPayloadFormat.java
Patch:
@@ -37,19 +37,19 @@
 public final class RtpPayloadFormat {
 
   private static final String RTP_MEDIA_AC3 = "AC3";
-  private static final String RTP_MEDIA_OPUS = "OPUS";
-  private static final String RTP_MEDIA_MPEG4_GENERIC = "MPEG4-GENERIC";
   private static final String RTP_MEDIA_H264 = "H264";
   private static final String RTP_MEDIA_H265 = "H265";
+  private static final String RTP_MEDIA_MPEG4_GENERIC = "MPEG4-GENERIC";
+  private static final String RTP_MEDIA_OPUS = "OPUS";
 
   /** Returns whether the format of a {@link MediaDescription} is supported. */
   public static boolean isFormatSupported(MediaDescription mediaDescription) {
     switch (Ascii.toUpperCase(mediaDescription.rtpMapAttribute.mediaEncoding)) {
       case RTP_MEDIA_AC3:
-      case RTP_MEDIA_OPUS:
       case RTP_MEDIA_H264:
       case RTP_MEDIA_H265:
       case RTP_MEDIA_MPEG4_GENERIC:
+      case RTP_MEDIA_OPUS:
         return true;
       default:
         return false;

File: libraries/datasource/src/main/java/androidx/media3/datasource/BaseDataSource.java
Patch:
@@ -48,6 +48,7 @@ protected BaseDataSource(boolean isNetwork) {
     this.listeners = new ArrayList<>(/* initialCapacity= */ 1);
   }
 
+  @UnstableApi
   @Override
   public final void addTransferListener(TransferListener transferListener) {
     checkNotNull(transferListener);

File: libraries/datasource/src/main/java/androidx/media3/datasource/HttpDataSource.java
Patch:
@@ -172,6 +172,7 @@ protected abstract HttpDataSource createDataSourceInternal(
   }
 
   /** A {@link Predicate} that rejects content types often used for pay-walls. */
+  @UnstableApi
   Predicate<String> REJECT_PAYWALL_TYPES =
       contentType -> {
         if (contentType == null) {

File: libraries/datasource_cronet/src/main/java/androidx/media3/datasource/cronet/CronetUtil.java
Patch:
@@ -31,7 +31,6 @@
 import org.chromium.net.CronetProvider;
 
 /** Cronet utility methods. */
-@UnstableApi
 public final class CronetUtil {
 
   private static final String TAG = "CronetUtil";
@@ -77,6 +76,7 @@ public static CronetEngine buildCronetEngine(Context context) {
    *     over Cronet Embedded, if both are available.
    * @return The {@link CronetEngine}, or {@code null} if no suitable engine could be built.
    */
+  @UnstableApi
   @Nullable
   public static CronetEngine buildCronetEngine(
       Context context, @Nullable String userAgent, boolean preferGooglePlayServices) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/DefaultMediaSourceFactory.java
Patch:
@@ -147,7 +147,6 @@ public DefaultMediaSourceFactory(Context context, ExtractorsFactory extractorsFa
    * @param dataSourceFactory A {@link DataSource.Factory} to create {@link DataSource} instances
    *     for requesting media data.
    */
-  @UnstableApi
   public DefaultMediaSourceFactory(DataSource.Factory dataSourceFactory) {
     this(dataSourceFactory, new DefaultExtractorsFactory());
   }

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/FrameEditorDataProcessingTest.java
Patch:
@@ -244,9 +244,9 @@ private void setUpAndPrepareFirstFrame(GlFrameProcessor glFrameProcessor) throws
 
       int inputWidth = checkNotNull(mediaFormat).getInteger(MediaFormat.KEY_WIDTH);
       int inputHeight = mediaFormat.getInteger(MediaFormat.KEY_HEIGHT);
-      Size outputDimensions = glFrameProcessor.configureOutputDimensions(inputWidth, inputHeight);
-      int outputWidth = outputDimensions.getWidth();
-      int outputHeight = outputDimensions.getHeight();
+      Size outputSize = glFrameProcessor.configureOutputSize(inputWidth, inputHeight);
+      int outputWidth = outputSize.getWidth();
+      int outputHeight = outputSize.getHeight();
       frameEditorOutputImageReader =
           ImageReader.newInstance(
               outputWidth, outputHeight, PixelFormat.RGBA_8888, /* maxImages= */ 1);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/AdvancedFrameProcessor.java
Patch:
@@ -101,7 +101,7 @@ public AdvancedFrameProcessor(Context context, Matrix transformationMatrix) {
   }
 
   @Override
-  public Size configureOutputDimensions(int inputWidth, int inputHeight) {
+  public Size configureOutputSize(int inputWidth, int inputHeight) {
     return new Size(inputWidth, inputHeight);
   }
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/ExternalCopyFrameProcessor.java
Patch:
@@ -59,7 +59,7 @@ public ExternalCopyFrameProcessor(Context context, boolean enableExperimentalHdr
   }
 
   @Override
-  public Size configureOutputDimensions(int inputWidth, int inputHeight) {
+  public Size configureOutputSize(int inputWidth, int inputHeight) {
     return new Size(inputWidth, inputHeight);
   }
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/GlFrameProcessor.java
Patch:
@@ -25,7 +25,7 @@
  *
  * <ol>
  *   <li>The constructor, for implementation-specific arguments.
- *   <li>{@link #configureOutputDimensions(int, int)}, to configure based on input dimensions.
+ *   <li>{@link #configureOutputSize(int, int)}, to configure based on input dimensions.
  *   <li>{@link #initialize(int)}, to set up graphics initialization.
  *   <li>{@link #updateProgramAndDraw(long)}, to process one frame.
  *   <li>{@link #release()}, upon conclusion of processing.
@@ -34,12 +34,12 @@
 /* package */ interface GlFrameProcessor {
 
   /**
-   * Returns the output {@link Size dimensions} of frames processed through {@link
+   * Returns the output {@link Size} of frames processed through {@link
    * #updateProgramAndDraw(long)}.
    *
    * <p>This method must be called before {@link #initialize(int)} and does not use OpenGL.
    */
-  Size configureOutputDimensions(int inputWidth, int inputHeight);
+  Size configureOutputSize(int inputWidth, int inputHeight);
 
   /**
    * Does any initialization necessary such as loading and compiling a GLSL shader programs.

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -74,7 +74,7 @@ public VideoTranscodingSamplePipeline(
             transformationRequest.transformationMatrix,
             transformationRequest.outputHeight);
     Size requestedEncoderDimensions =
-        scaleToFitFrameProcessor.configureOutputDimensions(decodedWidth, decodedHeight);
+        scaleToFitFrameProcessor.configureOutputSize(decodedWidth, decodedHeight);
     outputRotationDegrees = scaleToFitFrameProcessor.getOutputRotationDegrees();
 
     Format requestedEncoderFormat =

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/FrameEditorDataProcessingTest.java
Patch:
@@ -244,9 +244,9 @@ private void setUpAndPrepareFirstFrame(GlFrameProcessor glFrameProcessor) throws
 
       int inputWidth = checkNotNull(mediaFormat).getInteger(MediaFormat.KEY_WIDTH);
       int inputHeight = mediaFormat.getInteger(MediaFormat.KEY_HEIGHT);
-      Size outputDimensions = glFrameProcessor.configureOutputDimensions(inputWidth, inputHeight);
-      int outputWidth = outputDimensions.getWidth();
-      int outputHeight = outputDimensions.getHeight();
+      Size outputSize = glFrameProcessor.configureOutputSize(inputWidth, inputHeight);
+      int outputWidth = outputSize.getWidth();
+      int outputHeight = outputSize.getHeight();
       frameEditorOutputImageReader =
           ImageReader.newInstance(
               outputWidth, outputHeight, PixelFormat.RGBA_8888, /* maxImages= */ 1);

File: libraries/transformer/src/main/java/androidx/media3/transformer/AdvancedFrameProcessor.java
Patch:
@@ -101,7 +101,7 @@ public AdvancedFrameProcessor(Context context, Matrix transformationMatrix) {
   }
 
   @Override
-  public Size configureOutputDimensions(int inputWidth, int inputHeight) {
+  public Size configureOutputSize(int inputWidth, int inputHeight) {
     return new Size(inputWidth, inputHeight);
   }
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/ExternalCopyFrameProcessor.java
Patch:
@@ -59,7 +59,7 @@ public ExternalCopyFrameProcessor(Context context, boolean enableExperimentalHdr
   }
 
   @Override
-  public Size configureOutputDimensions(int inputWidth, int inputHeight) {
+  public Size configureOutputSize(int inputWidth, int inputHeight) {
     return new Size(inputWidth, inputHeight);
   }
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/GlFrameProcessor.java
Patch:
@@ -25,7 +25,7 @@
  *
  * <ol>
  *   <li>The constructor, for implementation-specific arguments.
- *   <li>{@link #configureOutputDimensions(int, int)}, to configure based on input dimensions.
+ *   <li>{@link #configureOutputSize(int, int)}, to configure based on input dimensions.
  *   <li>{@link #initialize(int)}, to set up graphics initialization.
  *   <li>{@link #updateProgramAndDraw(long)}, to process one frame.
  *   <li>{@link #release()}, upon conclusion of processing.
@@ -34,12 +34,12 @@
 /* package */ interface GlFrameProcessor {
 
   /**
-   * Returns the output {@link Size dimensions} of frames processed through {@link
+   * Returns the output {@link Size} of frames processed through {@link
    * #updateProgramAndDraw(long)}.
    *
    * <p>This method must be called before {@link #initialize(int)} and does not use OpenGL.
    */
-  Size configureOutputDimensions(int inputWidth, int inputHeight);
+  Size configureOutputSize(int inputWidth, int inputHeight);
 
   /**
    * Does any initialization necessary such as loading and compiling a GLSL shader programs.

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoTranscodingSamplePipeline.java
Patch:
@@ -74,7 +74,7 @@ public VideoTranscodingSamplePipeline(
             transformationRequest.transformationMatrix,
             transformationRequest.outputHeight);
     Size requestedEncoderDimensions =
-        scaleToFitFrameProcessor.configureOutputDimensions(decodedWidth, decodedHeight);
+        scaleToFitFrameProcessor.configureOutputSize(decodedWidth, decodedHeight);
     outputRotationDegrees = scaleToFitFrameProcessor.getOutputRotationDegrees();
 
     Format requestedEncoderFormat =

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/DefaultMediaCodecAdapterFactory.java
Patch:
@@ -94,8 +94,9 @@ public void experimentalSetSynchronizeCodecInteractionsWithQueueingEnabled(boole
   @Override
   public MediaCodecAdapter createAdapter(MediaCodecAdapter.Configuration configuration)
       throws IOException {
-    if ((asynchronousMode == MODE_ENABLED && Util.SDK_INT >= 23)
-        || (asynchronousMode == MODE_DEFAULT && Util.SDK_INT >= 31)) {
+    if (Util.SDK_INT >= 23
+        && (asynchronousMode == MODE_ENABLED
+            || (asynchronousMode == MODE_DEFAULT && Util.SDK_INT >= 31))) {
       int trackType = MimeTypes.getTrackType(configuration.format.sampleMimeType);
       Log.i(
           TAG,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/DefaultMediaCodecAdapterFactory.java
Patch:
@@ -96,8 +96,9 @@ public void experimentalSetSynchronizeCodecInteractionsWithQueueingEnabled(boole
   @Override
   public MediaCodecAdapter createAdapter(MediaCodecAdapter.Configuration configuration)
       throws IOException {
-    if ((asynchronousMode == MODE_ENABLED && Util.SDK_INT >= 23)
-        || (asynchronousMode == MODE_DEFAULT && Util.SDK_INT >= 31)) {
+    if (Util.SDK_INT >= 23
+        && (asynchronousMode == MODE_ENABLED
+            || (asynchronousMode == MODE_DEFAULT && Util.SDK_INT >= 31))) {
       int trackType = MimeTypes.getTrackType(configuration.format.sampleMimeType);
       Log.i(
           TAG,

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashUtil.java
Patch:
@@ -33,7 +33,6 @@
 import com.google.android.exoplayer2.source.dash.manifest.Representation;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.google.android.exoplayer2.upstream.ParsingLoadable;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.MimeTypes;
@@ -83,7 +82,7 @@ public static DataSpec buildDataSpec(
   /**
    * Loads a DASH manifest.
    *
-   * @param dataSource The {@link HttpDataSource} from which the manifest should be read.
+   * @param dataSource The {@link DataSource} from which the manifest should be read.
    * @param uri The {@link Uri} of the manifest to be read.
    * @return An instance of {@link DashManifest}.
    * @throws IOException Thrown when there is an error while loading.
@@ -95,7 +94,7 @@ public static DashManifest loadManifest(DataSource dataSource, Uri uri) throws I
   /**
    * Loads a {@link Format} for acquiring keys for a given period in a DASH manifest.
    *
-   * @param dataSource The {@link HttpDataSource} from which data should be loaded.
+   * @param dataSource The {@link DataSource} from which data should be loaded.
    * @param period The {@link Period}.
    * @return The loaded {@link Format}, or null if none is defined.
    * @throws IOException Thrown when there is an error while loading.

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/DashUtil.java
Patch:
@@ -24,7 +24,6 @@
 import androidx.media3.common.util.UnstableApi;
 import androidx.media3.datasource.DataSource;
 import androidx.media3.datasource.DataSpec;
-import androidx.media3.datasource.HttpDataSource;
 import androidx.media3.exoplayer.dash.manifest.DashManifest;
 import androidx.media3.exoplayer.dash.manifest.DashManifestParser;
 import androidx.media3.exoplayer.dash.manifest.Period;
@@ -85,7 +84,7 @@ public static DataSpec buildDataSpec(
   /**
    * Loads a DASH manifest.
    *
-   * @param dataSource The {@link HttpDataSource} from which the manifest should be read.
+   * @param dataSource The {@link DataSource} from which the manifest should be read.
    * @param uri The {@link Uri} of the manifest to be read.
    * @return An instance of {@link DashManifest}.
    * @throws IOException Thrown when there is an error while loading.
@@ -97,7 +96,7 @@ public static DashManifest loadManifest(DataSource dataSource, Uri uri) throws I
   /**
    * Loads a {@link Format} for acquiring keys for a given period in a DASH manifest.
    *
-   * @param dataSource The {@link HttpDataSource} from which data should be loaded.
+   * @param dataSource The {@link DataSource} from which data should be loaded.
    * @param period The {@link Period}.
    * @return The loaded {@link Format}, or null if none is defined.
    * @throws IOException Thrown when there is an error while loading.

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultEncoderFactory.java
Patch:
@@ -232,7 +232,7 @@ private static Pair<MediaCodecInfo, Format> findEncoderWithClosestFormatSupport(
             /* cost= */ (encoderInfo) -> {
               @Nullable
               Pair<Integer, Integer> closestSupportedResolution =
-                  EncoderUtil.getClosestSupportedResolution(
+                  EncoderUtil.getSupportedResolution(
                       encoderInfo, mimeType, requestedFormat.width, requestedFormat.height);
               if (closestSupportedResolution == null) {
                 // Drops encoder.
@@ -248,7 +248,7 @@ private static Pair<MediaCodecInfo, Format> findEncoderWithClosestFormatSupport(
     // The supported resolution is the same for all remaining encoders.
     Pair<Integer, Integer> finalResolution =
         checkNotNull(
-            EncoderUtil.getClosestSupportedResolution(
+            EncoderUtil.getSupportedResolution(
                 filteredEncoders.get(0), mimeType, requestedFormat.width, requestedFormat.height));
 
     int requestedBitrate =

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultEncoderFactory.java
Patch:
@@ -234,7 +234,7 @@ private static Pair<MediaCodecInfo, Format> findEncoderWithClosestFormatSupport(
             /* cost= */ (encoderInfo) -> {
               @Nullable
               Pair<Integer, Integer> closestSupportedResolution =
-                  EncoderUtil.getClosestSupportedResolution(
+                  EncoderUtil.getSupportedResolution(
                       encoderInfo, mimeType, requestedFormat.width, requestedFormat.height);
               if (closestSupportedResolution == null) {
                 // Drops encoder.
@@ -250,7 +250,7 @@ private static Pair<MediaCodecInfo, Format> findEncoderWithClosestFormatSupport(
     // The supported resolution is the same for all remaining encoders.
     Pair<Integer, Integer> finalResolution =
         checkNotNull(
-            EncoderUtil.getClosestSupportedResolution(
+            EncoderUtil.getSupportedResolution(
                 filteredEncoders.get(0), mimeType, requestedFormat.width, requestedFormat.height));
 
     int requestedBitrate =

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaTrack.java
Patch:
@@ -128,10 +128,11 @@ public int hashCode() {
         checkArgument(channelCount == 1, "multi channel is not supported currently");
         checkArgument(!fmtpParameters.isEmpty());
         checkArgument(
-            fmtpParameters.containsKey(PARAMETER_AMR_OCTET_ALIGN), "mode not supported currently");
+            fmtpParameters.containsKey(PARAMETER_AMR_OCTET_ALIGN),
+            "modes other than octet align is not supported currently");
         checkArgument(
             !fmtpParameters.containsKey(PARAMETER_AMR_INTERLEAVING),
-            "mode not supported currently");
+            "interleaving mode is not supported currently");
         break;
       case MimeTypes.VIDEO_H264:
         checkArgument(!fmtpParameters.isEmpty());

File: libraries/session/src/main/java/androidx/media3/session/MediaNotificationManager.java
Patch:
@@ -196,7 +196,9 @@ public void onConnected() {
     @Override
     public void onEvents(Player player, Player.Events events) {
       if (events.containsAny(
-          Player.EVENT_PLAY_WHEN_READY_CHANGED, Player.EVENT_MEDIA_METADATA_CHANGED)) {
+          Player.EVENT_PLAYBACK_STATE_CHANGED,
+          Player.EVENT_PLAY_WHEN_READY_CHANGED,
+          Player.EVENT_MEDIA_METADATA_CHANGED)) {
         updateNotification(session);
       }
     }

File: libraries/session/src/main/java/androidx/media3/session/MediaLibraryServiceLegacyStub.java
Patch:
@@ -198,7 +198,7 @@ public void onLoadChildren(
             try {
               int page = options.getInt(EXTRA_PAGE);
               int pageSize = options.getInt(EXTRA_PAGE_SIZE);
-              if (page > 0 && pageSize > 0) {
+              if (page >= 0 && pageSize > 0) {
                 // Requesting the list of children through pagination.
                 @Nullable
                 LibraryParams params =
@@ -223,7 +223,7 @@ public void onLoadChildren(
                   parentId,
                   /* page= */ 0,
                   /* pageSize= */ Integer.MAX_VALUE,
-                  /* extras= */ null);
+                  /* params= */ null);
           sendLibraryResultWithMediaItemsWhenReady(result, future);
         });
   }

File: libraries/session/src/main/java/androidx/media3/session/MediaNotificationManager.java
Patch:
@@ -196,7 +196,9 @@ public void onConnected() {
     @Override
     public void onEvents(Player player, Player.Events events) {
       if (events.containsAny(
-          Player.EVENT_PLAY_WHEN_READY_CHANGED, Player.EVENT_MEDIA_METADATA_CHANGED)) {
+          Player.EVENT_PLAYBACK_STATE_CHANGED,
+          Player.EVENT_PLAY_WHEN_READY_CHANGED,
+          Player.EVENT_MEDIA_METADATA_CHANGED)) {
         updateNotification(session);
       }
     }

File: library/common/src/test/java/com/google/android/exoplayer2/trackselection/TrackSelectionOverrideTest.java
Patch:
@@ -31,12 +31,12 @@
 public final class TrackSelectionOverrideTest {
 
   @Test
-  public void newTrackSelectionOverride_withJustTrackGroup_selectsAllTracks() {
+  public void newTrackSelectionOverride_withOneTrack_selectsOneTrack() {
     TrackSelectionOverride trackSelectionOverride =
-        new TrackSelectionOverride(newTrackGroupWithIds(1, 2));
+        new TrackSelectionOverride(newTrackGroupWithIds(1, 2), /* trackIndex= */ 1);
 
     assertThat(trackSelectionOverride.trackGroup).isEqualTo(newTrackGroupWithIds(1, 2));
-    assertThat(trackSelectionOverride.trackIndices).containsExactly(0, 1).inOrder();
+    assertThat(trackSelectionOverride.trackIndices).containsExactly(1).inOrder();
   }
 
   @Test

File: libraries/common/src/test/java/androidx/media3/common/TrackSelectionOverrideTest.java
Patch:
@@ -29,12 +29,12 @@
 public final class TrackSelectionOverrideTest {
 
   @Test
-  public void newTrackSelectionOverride_withJustTrackGroup_selectsAllTracks() {
+  public void newTrackSelectionOverride_withOneTrack_selectsOneTrack() {
     TrackSelectionOverride trackSelectionOverride =
-        new TrackSelectionOverride(newTrackGroupWithIds(1, 2));
+        new TrackSelectionOverride(newTrackGroupWithIds(1, 2), /* trackIndex= */ 1);
 
     assertThat(trackSelectionOverride.trackGroup).isEqualTo(newTrackGroupWithIds(1, 2));
-    assertThat(trackSelectionOverride.trackIndices).containsExactly(0, 1).inOrder();
+    assertThat(trackSelectionOverride.trackIndices).containsExactly(1).inOrder();
   }
 
   @Test

File: library/common/src/test/java/com/google/android/exoplayer2/trackselection/TrackSelectionParametersTest.java
Patch:
@@ -24,7 +24,6 @@
 import com.google.android.exoplayer2.source.TrackGroup;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -113,7 +112,8 @@ public void parametersSet_fromDefault_isAsExpected() {
                         new Format.Builder().setId(4).build(),
                         new Format.Builder().setId(5).build()),
                     /* trackIndices= */ ImmutableList.of(1)))
-            .setDisabledTrackTypes(ImmutableSet.of(C.TRACK_TYPE_AUDIO, C.TRACK_TYPE_TEXT))
+            .setTrackTypeDisabled(C.TRACK_TYPE_AUDIO, /* disabled= */ true)
+            .setTrackTypeDisabled(C.TRACK_TYPE_TEXT, /* disabled= */ true)
             .build();
 
     // Video

File: libraries/common/src/test/java/androidx/media3/common/TrackSelectionParametersTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -109,7 +108,8 @@ public void parametersSet_fromDefault_isAsExpected() {
                         new Format.Builder().setId(4).build(),
                         new Format.Builder().setId(5).build()),
                     /* trackIndices= */ ImmutableList.of(1)))
-            .setDisabledTrackTypes(ImmutableSet.of(C.TRACK_TYPE_AUDIO, C.TRACK_TYPE_TEXT))
+            .setTrackTypeDisabled(C.TRACK_TYPE_AUDIO, /* disabled= */ true)
+            .setTrackTypeDisabled(C.TRACK_TYPE_TEXT, /* disabled= */ true)
             .build();
 
     // Video

File: libraries/session/src/main/java/androidx/media3/session/MediaLibraryServiceLegacyStub.java
Patch:
@@ -198,7 +198,7 @@ public void onLoadChildren(
             try {
               int page = options.getInt(EXTRA_PAGE);
               int pageSize = options.getInt(EXTRA_PAGE_SIZE);
-              if (page > 0 && pageSize > 0) {
+              if (page >= 0 && pageSize > 0) {
                 // Requesting the list of children through pagination.
                 @Nullable
                 LibraryParams params =
@@ -223,7 +223,7 @@ public void onLoadChildren(
                   parentId,
                   /* page= */ 0,
                   /* pageSize= */ Integer.MAX_VALUE,
-                  /* extras= */ null);
+                  /* params= */ null);
           sendLibraryResultWithMediaItemsWhenReady(result, future);
         });
   }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/FrameEditor.java
Patch:
@@ -165,11 +165,11 @@ public static FrameEditor create(
   private final EGLDisplay eglDisplay;
   private final EGLContext eglContext;
   private final EGLSurface eglSurface;
-  /** Indentifier of the external texture the {@code FrameEditor} reads its input from. */
+  /** Identifier of the external texture the {@code FrameEditor} reads its input from. */
   private final int inputExternalTexId;
   /**
-   * Indentifier of the texture where the output of the {@link ExternalCopyFrameProcessor} is
-   * written to and the {@link TransformationFrameProcessor} reads its input from.
+   * Identifier of the texture where the output of the {@link ExternalCopyFrameProcessor} is written
+   * to and the {@link TransformationFrameProcessor} reads its input from.
    */
   private final int intermediateTexId;
   /** Identifier of a framebuffer object associated with the intermediate texture. */

File: libraries/transformer/src/main/java/androidx/media3/transformer/FrameEditor.java
Patch:
@@ -165,11 +165,11 @@ public static FrameEditor create(
   private final EGLDisplay eglDisplay;
   private final EGLContext eglContext;
   private final EGLSurface eglSurface;
-  /** Indentifier of the external texture the {@code FrameEditor} reads its input from. */
+  /** Identifier of the external texture the {@code FrameEditor} reads its input from. */
   private final int inputExternalTexId;
   /**
-   * Indentifier of the texture where the output of the {@link ExternalCopyFrameProcessor} is
-   * written to and the {@link TransformationFrameProcessor} reads its input from.
+   * Identifier of the texture where the output of the {@link ExternalCopyFrameProcessor} is written
+   * to and the {@link TransformationFrameProcessor} reads its input from.
    */
   private final int intermediateTexId;
   /** Identifier of a framebuffer object associated with the intermediate texture. */

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/AndroidTestUtil.java
Patch:
@@ -45,6 +45,9 @@ public final class AndroidTestUtil {
   public static final String SEF_ASSET_URI_STRING = "asset:///media/mp4/sample_sef_slow_motion.mp4";
   public static final String REMOTE_MP4_10_SECONDS_URI_STRING =
       "https://storage.googleapis.com/exoplayer-test-media-1/mp4/android-screens-10s.mp4";
+  /** Test clip transcoded from {@link #REMOTE_MP4_10_SECONDS_URI_STRING} with H264 and MP3. */
+  public static final String REMOTE_MP4_10_SECONDS_H264_MP3_URI_STRING =
+      "https://storage.googleapis.com/exoplayer-test-media-1/mp4/%20android-screens-10s-h264-mp3.mp4";
 
   /**
    * Transforms the {@code uriString} with the {@link Transformer}, saving a summary of the

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/AndroidTestUtil.java
Patch:
@@ -40,6 +40,8 @@
 /** Utilities for instrumentation tests. */
 public final class AndroidTestUtil {
   public static final String MP4_ASSET_URI_STRING = "asset:///media/mp4/sample.mp4";
+  public static final String MP4_ASSET_WITH_INCREASING_TIMESTAMPS_URI_STRING =
+      "asset:///media/mp4/sample_with_increasing_timestamps.mp4";
   public static final String SEF_ASSET_URI_STRING = "asset:///media/mp4/sample_sef_slow_motion.mp4";
   public static final String REMOTE_MP4_10_SECONDS_URI_STRING =
       "https://storage.googleapis.com/exoplayer-test-media-1/mp4/android-screens-10s.mp4";

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/AndroidTestUtil.java
Patch:
@@ -45,6 +45,9 @@ public final class AndroidTestUtil {
   public static final String SEF_ASSET_URI_STRING = "asset:///media/mp4/sample_sef_slow_motion.mp4";
   public static final String REMOTE_MP4_10_SECONDS_URI_STRING =
       "https://storage.googleapis.com/exoplayer-test-media-1/mp4/android-screens-10s.mp4";
+  /** Test clip transcoded from {@link #REMOTE_MP4_10_SECONDS_URI_STRING} with H264 and MP3. */
+  public static final String REMOTE_MP4_10_SECONDS_H264_MP3_URI_STRING =
+      "https://storage.googleapis.com/exoplayer-test-media-1/mp4/%20android-screens-10s-h264-mp3.mp4";
 
   /**
    * Transforms the {@code uriString} with the {@link Transformer}, saving a summary of the

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/AndroidTestUtil.java
Patch:
@@ -40,6 +40,8 @@
 /** Utilities for instrumentation tests. */
 public final class AndroidTestUtil {
   public static final String MP4_ASSET_URI_STRING = "asset:///media/mp4/sample.mp4";
+  public static final String MP4_ASSET_WITH_INCREASING_TIMESTAMPS_URI_STRING =
+      "asset:///media/mp4/sample_with_increasing_timestamps.mp4";
   public static final String SEF_ASSET_URI_STRING = "asset:///media/mp4/sample_sef_slow_motion.mp4";
   public static final String REMOTE_MP4_10_SECONDS_URI_STRING =
       "https://storage.googleapis.com/exoplayer-test-media-1/mp4/android-screens-10s.mp4";

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionService.java
Patch:
@@ -396,7 +396,7 @@ private MediaNotificationManager getMediaNotificationManager() {
         if (mediaNotificationProvider == null) {
           mediaNotificationProvider = new DefaultMediaNotificationProvider(getApplicationContext());
         }
-        actionFactory = new DefaultActionFactory(getApplicationContext());
+        actionFactory = new DefaultActionFactory(/* service= */ this);
         mediaNotificationManager =
             new MediaNotificationManager(
                 /* mediaSessionService= */ this, mediaNotificationProvider, actionFactory);

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -149,6 +149,7 @@ private void startTransformation() {
       throw new IllegalStateException(e);
     }
     informationTextView.setText(R.string.transformation_started);
+    playerView.setVisibility(View.GONE);
     Handler mainHandler = new Handler(getMainLooper());
     ProgressHolder progressHolder = new ProgressHolder();
     mainHandler.post(
@@ -285,6 +286,7 @@ private void onTransformationCompleted(String filePath) {
         getString(
             R.string.transformation_completed, transformationStopwatch.elapsed(TimeUnit.SECONDS)));
     progressViewGroup.setVisibility(View.GONE);
+    playerView.setVisibility(View.VISIBLE);
     playMediaItem(MediaItem.fromUri("file://" + filePath));
     Log.d(TAG, "Output file path: file://" + filePath);
   }

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -149,6 +149,7 @@ private void startTransformation() {
       throw new IllegalStateException(e);
     }
     informationTextView.setText(R.string.transformation_started);
+    playerView.setVisibility(View.GONE);
     Handler mainHandler = new Handler(getMainLooper());
     ProgressHolder progressHolder = new ProgressHolder();
     mainHandler.post(
@@ -285,6 +286,7 @@ private void onTransformationCompleted(String filePath) {
         getString(
             R.string.transformation_completed, transformationStopwatch.elapsed(TimeUnit.SECONDS)));
     progressViewGroup.setVisibility(View.GONE);
+    playerView.setVisibility(View.VISIBLE);
     playMediaItem(MediaItem.fromUri("file://" + filePath));
     Log.d(TAG, "Output file path: file://" + filePath);
   }

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -32,6 +32,7 @@
 import androidx.annotation.VisibleForTesting;
 import com.google.android.exoplayer2.analytics.AnalyticsCollector;
 import com.google.android.exoplayer2.analytics.AnalyticsListener;
+import com.google.android.exoplayer2.analytics.DefaultAnalyticsCollector;
 import com.google.android.exoplayer2.audio.AudioAttributes;
 import com.google.android.exoplayer2.audio.AudioSink;
 import com.google.android.exoplayer2.audio.AuxEffectInfo;
@@ -563,7 +564,7 @@ private Builder(
       this.analyticsCollectorSupplier =
           analyticsCollectorSupplier != null
               ? analyticsCollectorSupplier
-              : () -> new AnalyticsCollector(checkNotNull(clock));
+              : () -> new DefaultAnalyticsCollector(checkNotNull(clock));
       looper = Util.getCurrentOrMainLooper();
       audioAttributes = AudioAttributes.DEFAULT;
       wakeMode = C.WAKE_MODE_NONE;

File: library/core/src/test/java/com/google/android/exoplayer2/MediaPeriodQueueTest.java
Patch:
@@ -25,6 +25,7 @@
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.analytics.AnalyticsCollector;
+import com.google.android.exoplayer2.analytics.DefaultAnalyticsCollector;
 import com.google.android.exoplayer2.analytics.PlayerId;
 import com.google.android.exoplayer2.source.MediaSource.MediaPeriodId;
 import com.google.android.exoplayer2.source.MediaSource.MediaSourceCaller;
@@ -77,7 +78,7 @@ public final class MediaPeriodQueueTest {
 
   @Before
   public void setUp() {
-    AnalyticsCollector analyticsCollector = new AnalyticsCollector(Clock.DEFAULT);
+    AnalyticsCollector analyticsCollector = new DefaultAnalyticsCollector(Clock.DEFAULT);
     analyticsCollector.setPlayer(
         new ExoPlayer.Builder(ApplicationProvider.getApplicationContext()).build(),
         Looper.getMainLooper());

File: library/core/src/test/java/com/google/android/exoplayer2/MediaSourceListTest.java
Patch:
@@ -29,6 +29,7 @@
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.analytics.AnalyticsCollector;
+import com.google.android.exoplayer2.analytics.DefaultAnalyticsCollector;
 import com.google.android.exoplayer2.analytics.PlayerId;
 import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.source.ShuffleOrder;
@@ -55,7 +56,7 @@ public class MediaSourceListTest {
 
   @Before
   public void setUp() {
-    AnalyticsCollector analyticsCollector = new AnalyticsCollector(Clock.DEFAULT);
+    AnalyticsCollector analyticsCollector = new DefaultAnalyticsCollector(Clock.DEFAULT);
     analyticsCollector.setPlayer(
         new ExoPlayer.Builder(ApplicationProvider.getApplicationContext()).build(),
         Looper.getMainLooper());

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/TestExoPlayerBuilder.java
Patch:
@@ -26,7 +26,7 @@
 import com.google.android.exoplayer2.Renderer;
 import com.google.android.exoplayer2.RenderersFactory;
 import com.google.android.exoplayer2.SimpleExoPlayer;
-import com.google.android.exoplayer2.analytics.AnalyticsCollector;
+import com.google.android.exoplayer2.analytics.DefaultAnalyticsCollector;
 import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
 import com.google.android.exoplayer2.upstream.BandwidthMeter;
@@ -300,7 +300,7 @@ public SimpleExoPlayer build() {
             .setTrackSelector(trackSelector)
             .setLoadControl(loadControl)
             .setBandwidthMeter(bandwidthMeter)
-            .setAnalyticsCollector(new AnalyticsCollector(clock))
+            .setAnalyticsCollector(new DefaultAnalyticsCollector(clock))
             .setClock(clock)
             .setUseLazyPreparation(useLazyPreparation)
             .setLooper(looper)

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
Patch:
@@ -525,7 +525,7 @@ public void setRepeatMode(@RepeatMode int repeatMode) {
     setRepeatModeAndNotifyIfChanged(repeatMode);
     listeners.flushEvents();
     PendingResult<MediaChannelResult> pendingResult =
-        remoteMediaClient.queueSetRepeatMode(getCastRepeatMode(repeatMode), /* jsonObject= */ null);
+        remoteMediaClient.queueSetRepeatMode(getCastRepeatMode(repeatMode), /* customData= */ null);
     this.repeatMode.pendingResultCallback =
         new ResultCallback<MediaChannelResult>() {
           @Override

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -2664,7 +2664,7 @@ private static PositionUpdateForPlaylistChange resolvePositionForPlaylistChange(
     boolean earliestCuePointIsUnchangedOrLater =
         periodIdWithAds.nextAdGroupIndex == C.INDEX_UNSET
             || (oldPeriodId.nextAdGroupIndex != C.INDEX_UNSET
-                && periodIdWithAds.adGroupIndex >= oldPeriodId.nextAdGroupIndex);
+                && periodIdWithAds.nextAdGroupIndex >= oldPeriodId.nextAdGroupIndex);
     // Drop update if we keep playing the same content (MediaPeriod.periodUid are identical) and
     // the only change is that MediaPeriodId.nextAdGroupIndex increased. This postpones a potential
     // discontinuity until we reach the former next ad group position.

File: extensions/av1/src/main/java/com/google/android/exoplayer2/ext/av1/Gav1Decoder.java
Patch:
@@ -39,7 +39,7 @@ public final class Gav1Decoder
 
   private final long gav1DecoderContext;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a Gav1Decoder.

File: extensions/av1/src/main/java/com/google/android/exoplayer2/ext/av1/Libgav1VideoRenderer.java
Patch:
@@ -126,8 +126,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!MimeTypes.VIDEO_AV1.equalsIgnoreCase(format.sampleMimeType)
         || !Gav1Library.isAvailable()) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: extensions/ffmpeg/src/main/java/com/google/android/exoplayer2/ext/ffmpeg/FfmpegAudioDecoder.java
Patch:
@@ -41,7 +41,7 @@
 
   private final String codecName;
   @Nullable private final byte[] extraData;
-  @C.PcmEncoding private final int encoding;
+  private final @C.PcmEncoding int encoding;
   private final int outputBufferSize;
 
   private long nativeContext; // May be reassigned on resetting the codec.
@@ -158,8 +158,7 @@ public int getSampleRate() {
   }
 
   /** Returns the encoding of output audio. */
-  @C.PcmEncoding
-  public int getEncoding() {
+  public @C.PcmEncoding int getEncoding() {
     return encoding;
   }
 

File: extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/LibflacAudioRenderer.java
Patch:
@@ -77,8 +77,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     if (!FlacLibrary.isAvailable()
         || !MimeTypes.AUDIO_FLAC.equalsIgnoreCase(format.sampleMimeType)) {
       return C.FORMAT_UNSUPPORTED_TYPE;

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdTagLoader.java
Patch:
@@ -162,7 +162,7 @@
   /** Whether IMA has sent an ad event to pause content since the last resume content event. */
   private boolean imaPausedContent;
   /** The current ad playback state. */
-  @ImaAdState private int imaAdState;
+  private @ImaAdState int imaAdState;
   /** The current ad media info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */
   @Nullable private AdMediaInfo imaAdMediaInfo;
   /** The current ad info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ServerSideAdInsertionStreamRequest.java
Patch:
@@ -51,7 +51,7 @@ public static final class Builder {
     @Nullable private String authToken;
     @Nullable private String streamActivityMonitorId;
     private ImmutableMap<String, String> adTagParameters;
-    @ContentType public int format = C.TYPE_HLS;
+    public @ContentType int format = C.TYPE_HLS;
     private int loadVideoTimeoutMs;
 
     /** Creates a new instance. */
@@ -270,7 +270,7 @@ public ServerSideAdInsertionStreamRequest build() {
   @Nullable public final String contentUrl;
   @Nullable public final String authToken;
   @Nullable public final String streamActivityMonitorId;
-  @ContentType public int format = C.TYPE_HLS;
+  public @ContentType int format = C.TYPE_HLS;
   public final int loadVideoTimeoutMs;
 
   private ServerSideAdInsertionStreamRequest(

File: extensions/mediasession/src/main/java/com/google/android/exoplayer2/ext/mediasession/RepeatModeActionProvider.java
Patch:
@@ -26,13 +26,12 @@
 public final class RepeatModeActionProvider implements MediaSessionConnector.CustomActionProvider {
 
   /** The default repeat toggle modes. */
-  @RepeatModeUtil.RepeatToggleModes
-  public static final int DEFAULT_REPEAT_TOGGLE_MODES =
+  public static final @RepeatModeUtil.RepeatToggleModes int DEFAULT_REPEAT_TOGGLE_MODES =
       RepeatModeUtil.REPEAT_TOGGLE_MODE_ONE | RepeatModeUtil.REPEAT_TOGGLE_MODE_ALL;
 
   private static final String ACTION_REPEAT_MODE = "ACTION_EXO_REPEAT_MODE";
 
-  @RepeatModeUtil.RepeatToggleModes private final int repeatToggleModes;
+  private final @RepeatModeUtil.RepeatToggleModes int repeatToggleModes;
   private final CharSequence repeatAllDescription;
   private final CharSequence repeatOneDescription;
   private final CharSequence repeatOffDescription;

File: extensions/opus/src/main/java/com/google/android/exoplayer2/ext/opus/LibopusAudioRenderer.java
Patch:
@@ -78,8 +78,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     boolean drmIsSupported = OpusLibrary.supportsCryptoType(format.cryptoType);
     if (!OpusLibrary.isAvailable()
         || !MimeTypes.AUDIO_OPUS.equalsIgnoreCase(format.sampleMimeType)) {

File: extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/LibvpxVideoRenderer.java
Patch:
@@ -124,8 +124,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!VpxLibrary.isAvailable() || !MimeTypes.VIDEO_VP9.equalsIgnoreCase(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);
     }

File: extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/VpxDecoder.java
Patch:
@@ -47,7 +47,7 @@ public final class VpxDecoder
 
   @Nullable private ByteBuffer lastSupplementalData;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a VP9 decoder.

File: library/common/src/main/java/com/google/android/exoplayer2/BasePlayer.java
Patch:
@@ -382,8 +382,7 @@ public final long getContentDuration() {
         : timeline.getWindow(getCurrentMediaItemIndex(), window).getDurationMs();
   }
 
-  @RepeatMode
-  private int getRepeatModeForNavigation() {
+  private @RepeatMode int getRepeatModeForNavigation() {
     @RepeatMode int repeatMode = getRepeatMode();
     return repeatMode == REPEAT_MODE_ONE ? REPEAT_MODE_OFF : repeatMode;
   }

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -1215,8 +1215,8 @@ public static String getFormatSupportString(@FormatSupport int formatSupport) {
       replacement = "Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode)",
       imports = {"com.google.android.exoplayer2.util.Util"})
   @Deprecated
-  @PlaybackException.ErrorCode
-  public static int getErrorCodeForMediaDrmErrorCode(int mediaDrmErrorCode) {
+  public static @PlaybackException.ErrorCode int getErrorCodeForMediaDrmErrorCode(
+      int mediaDrmErrorCode) {
     return Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode);
   }
 }

File: library/common/src/main/java/com/google/android/exoplayer2/HeartRating.java
Patch:
@@ -78,7 +78,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_HEART;
+  private static final @RatingType int TYPE = RATING_TYPE_HEART;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: library/common/src/main/java/com/google/android/exoplayer2/MediaMetadata.java
Patch:
@@ -56,11 +56,11 @@ public static final class Builder {
     @Nullable private Rating userRating;
     @Nullable private Rating overallRating;
     @Nullable private byte[] artworkData;
-    @Nullable @PictureType private Integer artworkDataType;
+    @Nullable private @PictureType Integer artworkDataType;
     @Nullable private Uri artworkUri;
     @Nullable private Integer trackNumber;
     @Nullable private Integer totalTrackCount;
-    @Nullable @FolderType private Integer folderType;
+    @Nullable private @FolderType Integer folderType;
     @Nullable private Boolean isPlayable;
     @Nullable private Integer recordingYear;
     @Nullable private Integer recordingMonth;

File: library/common/src/main/java/com/google/android/exoplayer2/PercentageRating.java
Patch:
@@ -76,7 +76,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_PERCENTAGE;
+  private static final @RatingType int TYPE = RATING_TYPE_PERCENTAGE;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -686,8 +686,7 @@ final class Commands implements Bundleable {
     /** A builder for {@link Commands} instances. */
     public static final class Builder {
 
-      @Command
-      private static final int[] SUPPORTED_COMMANDS = {
+      private static final @Command int[] SUPPORTED_COMMANDS = {
         COMMAND_PLAY_PAUSE,
         COMMAND_PREPARE,
         COMMAND_STOP,

File: library/common/src/main/java/com/google/android/exoplayer2/StarRating.java
Patch:
@@ -102,7 +102,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_STAR;
+  private static final @RatingType int TYPE = RATING_TYPE_STAR;
   private static final int MAX_STARS_DEFAULT = 5;
 
   @Documented

File: library/common/src/main/java/com/google/android/exoplayer2/ThumbRating.java
Patch:
@@ -75,7 +75,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_THUMB;
+  private static final @RatingType int TYPE = RATING_TYPE_THUMB;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: library/common/src/main/java/com/google/android/exoplayer2/drm/DrmInitData.java
Patch:
@@ -51,7 +51,8 @@ public final class DrmInitData implements Comparator<SchemeData>, Parcelable {
    * @param mediaData DRM session acquisition data obtained from the media.
    * @return A {@link DrmInitData} obtained from merging a media manifest and a media stream.
    */
-  public static @Nullable DrmInitData createSessionCreationData(
+  @Nullable
+  public static DrmInitData createSessionCreationData(
       @Nullable DrmInitData manifestData, @Nullable DrmInitData mediaData) {
     ArrayList<SchemeData> result = new ArrayList<>();
     String schemeType = null;

File: library/common/src/main/java/com/google/android/exoplayer2/source/TrackGroup.java
Patch:
@@ -204,8 +204,7 @@ private static String normalizeLanguage(@Nullable String language) {
     return language == null || language.equals(C.LANGUAGE_UNDETERMINED) ? "" : language;
   }
 
-  @C.RoleFlags
-  private static int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
+  private static @C.RoleFlags int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
     // Treat trick-play and non-trick-play formats as compatible.
     return roleFlags | C.ROLE_FLAG_TRICK_PLAY;
   }

File: library/common/src/main/java/com/google/android/exoplayer2/source/ads/AdPlaybackState.java
Patch:
@@ -68,7 +68,7 @@ public static final class AdGroup implements Bundleable {
     /** The URI of each ad in the ad group. */
     public final @NullableType Uri[] uris;
     /** The state of each ad in the ad group. */
-    @AdState public final int[] states;
+    public final @AdState int[] states;
     /** The durations of each ad in the ad group, in microseconds. */
     public final long[] durationsUs;
     /**

File: library/common/src/main/java/com/google/android/exoplayer2/text/span/RubySpan.java
Patch:
@@ -36,7 +36,7 @@ public final class RubySpan implements LanguageFeatureSpan {
   public final String rubyText;
 
   /** The position of the ruby text relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public RubySpan(String rubyText, @TextAnnotation.Position int position) {
     this.rubyText = rubyText;

File: library/common/src/main/java/com/google/android/exoplayer2/text/span/TextEmphasisSpan.java
Patch:
@@ -81,13 +81,13 @@ public final class TextEmphasisSpan implements LanguageFeatureSpan {
   public static final int MARK_FILL_OPEN = 2;
 
   /** The mark shape used for text emphasis. */
-  @MarkShape public int markShape;
+  public @MarkShape int markShape;
 
   /** The mark fill for the text emphasis mark. */
-  @MarkShape public int markFill;
+  public @MarkShape int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public TextEmphasisSpan(
       @MarkShape int shape, @MarkFill int fill, @TextAnnotation.Position int position) {

File: library/core/src/androidTest/java/com/google/android/exoplayer2/StreamVolumeManagerTest.java
Patch:
@@ -272,7 +272,7 @@ public void onStreamVolumeChanged_isCalled_whenAudioManagerChangesIt() throws Ex
 
   private static class TestListener implements StreamVolumeManager.Listener {
 
-    @C.StreamType private int lastStreamType;
+    private @C.StreamType int lastStreamType;
     private int lastStreamVolume;
     private boolean lastStreamVolumeMuted;
     public final CountDownLatch onStreamVolumeChangedLatch;

File: library/core/src/main/java/com/google/android/exoplayer2/DefaultRenderersFactory.java
Patch:
@@ -93,7 +93,7 @@ public class DefaultRenderersFactory implements RenderersFactory {
 
   private final Context context;
   private final DefaultMediaCodecAdapterFactory codecAdapterFactory;
-  @ExtensionRendererMode private int extensionRendererMode;
+  private @ExtensionRendererMode int extensionRendererMode;
   private long allowedVideoJoiningTimeMs;
   private boolean enableDecoderFallback;
   private MediaCodecSelector mediaCodecSelector;

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlaybackException.java
Patch:
@@ -80,7 +80,7 @@ public final class ExoPlaybackException extends PlaybackException {
   public static final int TYPE_REMOTE = 3;
 
   /** The {@link Type} of the playback failure. */
-  @Type public final int type;
+  public final @Type int type;
 
   /** If {@link #type} is {@link #TYPE_RENDERER}, this is the name of the renderer. */
   @Nullable public final String rendererName;
@@ -99,7 +99,7 @@ public final class ExoPlaybackException extends PlaybackException {
    * renderer for {@link #rendererFormat}. If {@link #rendererFormat} is null, this is {@link
    * C#FORMAT_HANDLED}.
    */
-  @FormatSupport public final int rendererFormatSupport;
+  public final @FormatSupport int rendererFormatSupport;
 
   /** The {@link MediaPeriodId} of the media associated with this error, or null if undetermined. */
   @Nullable public final MediaPeriodId mediaPeriodId;

File: library/core/src/main/java/com/google/android/exoplayer2/ExoTimeoutException.java
Patch:
@@ -59,7 +59,7 @@ public final class ExoTimeoutException extends RuntimeException {
   public static final int TIMEOUT_OPERATION_DETACH_SURFACE = 3;
 
   /** The operation on the ExoPlayer playback thread that timed out. */
-  @TimeoutOperation public final int timeoutOperation;
+  public final @TimeoutOperation int timeoutOperation;
 
   /**
    * Creates the timeout exception.

File: library/core/src/main/java/com/google/android/exoplayer2/PlaybackInfo.java
Patch:
@@ -51,7 +51,7 @@
   /** The start position after a reported position discontinuity, in microseconds. */
   public final long discontinuityStartPositionUs;
   /** The current playback state. One of the {@link Player}.STATE_ constants. */
-  @Player.State public final int playbackState;
+  public final @Player.State int playbackState;
   /** The current playback error, or null if this is not an error state. */
   @Nullable public final ExoPlaybackException playbackError;
   /** Whether the player is currently loading. */
@@ -67,7 +67,7 @@
   /** Whether playback should proceed when {@link #playbackState} == {@link Player#STATE_READY}. */
   public final boolean playWhenReady;
   /** Reason why playback is suppressed even though {@link #playWhenReady} is {@code true}. */
-  @PlaybackSuppressionReason public final int playbackSuppressionReason;
+  public final @PlaybackSuppressionReason int playbackSuppressionReason;
   /** The playback parameters. */
   public final PlaybackParameters playbackParameters;
   /** Whether offload scheduling is enabled for the main player loop. */

File: library/core/src/main/java/com/google/android/exoplayer2/StreamVolumeManager.java
Patch:
@@ -54,7 +54,7 @@ public interface Listener {
   private final AudioManager audioManager;
 
   @Nullable private VolumeChangeReceiver receiver;
-  @C.StreamType private int streamType;
+  private @C.StreamType int streamType;
   private int volume;
   private boolean muted;
 

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsListener.java
Patch:
@@ -148,8 +148,7 @@ public int size() {
      * @param index The index. Must be between 0 (inclusive) and {@link #size()} (exclusive).
      * @return The {@link EventFlags event} at the given index.
      */
-    @EventFlags
-    public int get(int index) {
+    public @EventFlags int get(int index) {
       return flags.get(index);
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/MediaMetricsListener.java
Patch:
@@ -118,7 +118,7 @@ public static MediaMetricsListener create(Context context) {
 
   @Nullable private String activeSessionId;
   @Nullable private PlaybackMetrics.Builder metricsBuilder;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int currentPlaybackState;
   private int currentNetworkType;
   @Nullable private PlaybackException pendingPlayerError;
@@ -885,7 +885,7 @@ public ErrorInfo(int errorCode, int subErrorCode) {
   private static final class PendingFormatUpdate {
 
     public final Format format;
-    @C.SelectionReason public final int selectionReason;
+    public final @C.SelectionReason int selectionReason;
     public final String sessionId;
 
     public PendingFormatUpdate(

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/PlaybackStatsListener.java
Patch:
@@ -82,7 +82,7 @@ public interface Callback {
 
   @Nullable private String discontinuityFromSession;
   private long discontinuityFromPositionMs;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int droppedFrames;
   @Nullable private Exception nonFatalException;
   private long bandwidthTimeMs;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioProcessor.java
Patch:
@@ -43,7 +43,7 @@ final class AudioFormat {
     /** The number of interleaved channels. */
     public final int channelCount;
     /** The type of linear PCM encoding. */
-    @C.PcmEncoding public final int encoding;
+    public final @C.PcmEncoding int encoding;
     /** The number of bytes used to represent one audio frame. */
     public final int bytesPerFrame;
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/ForwardingAudioSink.java
Patch:
@@ -46,8 +46,7 @@ public boolean supportsFormat(Format format) {
   }
 
   @Override
-  @SinkFormatSupport
-  public int getFormatSupport(Format format) {
+  public @SinkFormatSupport int getFormatSupport(Format format) {
     return sink.getFormatSupport(format);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
Patch:
@@ -282,8 +282,7 @@ public void experimentalSetEnableKeepAudioTrackOnSeek(boolean enableKeepAudioTra
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     if (!MimeTypes.isAudio(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: library/core/src/main/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessor.java
Patch:
@@ -86,7 +86,7 @@ public final class SilenceSkippingAudioProcessor extends BaseAudioProcessor {
    */
   private byte[] paddingBuffer;
 
-  @State private int state;
+  private @State int state;
   private int maybeSilenceBufferSize;
   private int paddingSize;
   private boolean hasOutputNoise;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/SpatializerDelegate.java
Patch:
@@ -129,8 +129,7 @@ public boolean isAvailable() {
   }
 
   /** Delegates to Spatializer.getImmersiveAudioLevel() */
-  @ImmersiveAudioLevel
-  public int getImmersiveAudioLevel() {
+  public @ImmersiveAudioLevel int getImmersiveAudioLevel() {
     try {
       return (int) Util.castNonNull(getImmersiveAudioLevel.invoke(spatializer));
     } catch (IllegalAccessException | InvocationTargetException e) {

File: library/core/src/main/java/com/google/android/exoplayer2/audio/TeeAudioProcessor.java
Patch:
@@ -125,7 +125,7 @@ public static final class WavFileAudioBufferSink implements AudioBufferSink {
 
     private int sampleRateHz;
     private int channelCount;
-    @C.PcmEncoding private int encoding;
+    private @C.PcmEncoding int encoding;
     @Nullable private RandomAccessFile randomAccessFile;
     private int counter;
     private int bytesWritten;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/TrimmingAudioProcessor.java
Patch:
@@ -25,7 +25,7 @@
 /** Audio processor for trimming samples from the start/end of data. */
 /* package */ final class TrimmingAudioProcessor extends BaseAudioProcessor {
 
-  @C.PcmEncoding private static final int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
 
   private int trimStartFrames;
   private int trimEndFrames;

File: library/core/src/main/java/com/google/android/exoplayer2/decoder/DecoderReuseEvaluation.java
Patch:
@@ -123,13 +123,13 @@ public final class DecoderReuseEvaluation {
   public final Format newFormat;
 
   /** The {@link DecoderReuseResult result} of the evaluation. */
-  @DecoderReuseResult public final int result;
+  public final @DecoderReuseResult int result;
 
   /**
    * {@link DecoderDiscardReasons Reasons} why the decoder cannot be reused. Always {@code 0} if
    * reuse is possible. May also be {code 0} if reuse is not possible for an unspecified reason.
    */
-  @DecoderDiscardReasons public final int discardReasons;
+  public final @DecoderDiscardReasons int discardReasons;
 
   /**
    * @param decoderName The name of the decoder.

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSession.java
Patch:
@@ -254,8 +254,7 @@ public void onProvisionError(Exception error, boolean thrownByExoMediaDrm) {
   // DrmSession implementation.
 
   @Override
-  @DrmSession.State
-  public final int getState() {
+  public final @DrmSession.State int getState() {
     return state;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
Patch:
@@ -309,7 +309,7 @@ private MissingSchemeDataException(UUID uuid) {
   @Nullable private byte[] offlineLicenseKeySetId;
   private @MonotonicNonNull PlayerId playerId;
 
-  /* package */ volatile @Nullable MediaDrmHandler mediaDrmHandler;
+  /* package */ @Nullable volatile MediaDrmHandler mediaDrmHandler;
 
   /**
    * @param uuid The UUID of the drm scheme.
@@ -587,8 +587,7 @@ private DrmSession acquireSession(
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType(Format format) {
+  public @C.CryptoType int getCryptoType(Format format) {
     @C.CryptoType int cryptoType = checkNotNull(exoMediaDrm).getCryptoType();
     if (format.drmInitData == null) {
       int trackType = MimeTypes.getTrackType(format.sampleMimeType);

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DrmSession.java
Patch:
@@ -63,7 +63,7 @@ static void replaceSession(
   class DrmSessionException extends IOException {
 
     /** The {@link PlaybackException.ErrorCode} that corresponds to the failure. */
-    @PlaybackException.ErrorCode public final int errorCode;
+    public final @PlaybackException.ErrorCode int errorCode;
 
     public DrmSessionException(Throwable cause, @PlaybackException.ErrorCode int errorCode) {
       super(cause);

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DrmSessionManager.java
Patch:
@@ -64,8 +64,7 @@ public DrmSession acquireSession(
         }
 
         @Override
-        @C.CryptoType
-        public int getCryptoType(Format format) {
+        public @C.CryptoType int getCryptoType(Format format) {
           return format.drmInitData != null ? C.CRYPTO_TYPE_UNSUPPORTED : C.CRYPTO_TYPE_NONE;
         }
       };

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DummyExoMediaDrm.java
Patch:
@@ -150,8 +150,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) {
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_UNSUPPORTED;
   }
 }

File: library/core/src/main/java/com/google/android/exoplayer2/drm/ExoMediaDrm.java
Patch:
@@ -265,7 +265,7 @@ final class KeyRequest {
 
     private final byte[] data;
     private final String licenseServerUrl;
-    @RequestType private final int requestType;
+    private final @RequestType int requestType;
 
     /**
      * Creates an instance with {@link #REQUEST_TYPE_UNKNOWN}.
@@ -305,8 +305,7 @@ public String getLicenseServerUrl() {
      * request does not specify a type. Note that when using a platform {@link MediaDrm} instance,
      * key requests only specify a type on API levels 23 and above.
      */
-    @RequestType
-    public int getRequestType() {
+    public @RequestType int getRequestType() {
       return requestType;
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/drm/FrameworkMediaDrm.java
Patch:
@@ -339,8 +339,7 @@ public FrameworkCryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCr
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_FRAMEWORK;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/drm/UnsupportedDrmException.java
Patch:
@@ -47,7 +47,7 @@ public final class UnsupportedDrmException extends Exception {
   public static final int REASON_INSTANTIATION_ERROR = 2;
 
   /** Either {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
-  @Reason public final int reason;
+  public final @Reason int reason;
 
   /** @param reason {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
   public UnsupportedDrmException(@Reason int reason) {

File: library/core/src/main/java/com/google/android/exoplayer2/drm/WidevineUtil.java
Patch:
@@ -37,7 +37,8 @@ private WidevineUtil() {}
    * @return A {@link Pair} consisting of the remaining license and playback durations in seconds,
    *     or null if called before the session has been opened or after it's been released.
    */
-  public static @Nullable Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
+  @Nullable
+  public static Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
     Map<String, String> keyStatus = drmSession.queryKeyStatus();
     if (keyStatus == null) {
       return null;

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -141,7 +141,7 @@ public AsynchronousMediaCodecAdapter createAdapter(Configuration configuration)
   private final boolean synchronizeCodecInteractionsWithQueueing;
   private final boolean enableImmediateCodecStartAfterFlush;
   private boolean codecReleased;
-  @State private int state;
+  private @State int state;
 
   private AsynchronousMediaCodecAdapter(
       MediaCodec codec,

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/DefaultMediaCodecAdapterFactory.java
Patch:
@@ -51,7 +51,7 @@ public final class DefaultMediaCodecAdapterFactory implements MediaCodecAdapter.
 
   private static final String TAG = "DMCodecAdapterFactory";
 
-  @Mode private int asynchronousMode;
+  private @Mode int asynchronousMode;
   private boolean enableSynchronizeCodecInteractionsWithQueueing;
   private boolean enableImmediateCodecStartAfterFlush;
 

File: library/core/src/main/java/com/google/android/exoplayer2/metadata/MetadataRenderer.java
Patch:
@@ -89,8 +89,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: library/core/src/main/java/com/google/android/exoplayer2/offline/Download.java
Patch:
@@ -97,7 +97,7 @@ public final class Download {
   /** The download request. */
   public final DownloadRequest request;
   /** The state of the download. */
-  @State public final int state;
+  public final @State int state;
   /** The first time when download entry is created. */
   public final long startTimeMs;
   /** The last update time. */
@@ -110,7 +110,7 @@ public final class Download {
    * If {@link #state} is {@link #STATE_FAILED} then this is the cause, otherwise {@link
    * #FAILURE_REASON_NONE}.
    */
-  @FailureReason public final int failureReason;
+  public final @FailureReason int failureReason;
 
   /* package */ final DownloadProgress progress;
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -1097,8 +1097,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    @C.SelectionReason
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
Patch:
@@ -349,8 +349,7 @@ public Requirements getRequirements() {
    *
    * @return The not met {@link Requirements.RequirementFlags}, or 0 if all requirements are met.
    */
-  @Requirements.RequirementFlags
-  public int getNotMetRequirements() {
+  public @Requirements.RequirementFlags int getNotMetRequirements() {
     return notMetRequirements;
   }
 
@@ -703,7 +702,7 @@ private static final class InternalHandler extends Handler {
     private final ArrayList<Download> downloads;
     private final HashMap<String, Task> activeTasks;
 
-    @Requirements.RequirementFlags private int notMetRequirements;
+    private @Requirements.RequirementFlags int notMetRequirements;
     private boolean downloadsPaused;
     private int maxParallelDownloads;
     private int minRetryCount;

File: library/core/src/main/java/com/google/android/exoplayer2/scheduler/RequirementsWatcher.java
Patch:
@@ -60,7 +60,7 @@ void onRequirementsStateChanged(
 
   @Nullable private DeviceStatusChangeReceiver receiver;
 
-  @Requirements.RequirementFlags private int notMetRequirements;
+  private @Requirements.RequirementFlags int notMetRequirements;
   @Nullable private NetworkCallback networkCallback;
 
   /**
@@ -81,8 +81,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
    *
    * @return Initial {@link Requirements.RequirementFlags RequirementFlags} that are not met, or 0.
    */
-  @Requirements.RequirementFlags
-  public int start() {
+  public @Requirements.RequirementFlags int start() {
     notMetRequirements = requirements.getNotMetRequirements(context);
 
     IntentFilter filter = new IntentFilter();

File: library/core/src/main/java/com/google/android/exoplayer2/source/ClippingMediaSource.java
Patch:
@@ -61,7 +61,7 @@ public static final class IllegalClippingException extends IOException {
     public static final int REASON_START_EXCEEDS_END = 2;
 
     /** The reason clipping failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason clipping failed. */
     public IllegalClippingException(@Reason int reason) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactory.java
Patch:
@@ -456,8 +456,7 @@ public DelegateFactoryLoader(
       mediaSourceFactories = new HashMap<>();
     }
 
-    @C.ContentType
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       ensureAllSuppliersAreLoaded();
       return Ints.toArray(supportedTypes);
     }

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaLoadData.java
Patch:
@@ -26,7 +26,7 @@
 public final class MediaLoadData {
 
   /** The {@link DataType data type}. */
-  @DataType public final int dataType;
+  public final @DataType int dataType;
   /**
    * One of the {@link TrackType track types}, which is a media track type if the data corresponds
    * to media of a specific type, or {@link C#TRACK_TYPE_UNKNOWN} otherwise.

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaSourceFactory.java
Patch:
@@ -44,8 +44,7 @@ public MediaSourceFactory setLoadErrorHandlingPolicy(
         }
 
         @Override
-        @C.ContentType
-        public int[] getSupportedTypes() {
+        public @C.ContentType int[] getSupportedTypes() {
           throw new UnsupportedOperationException();
         }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/MergingMediaSource.java
Patch:
@@ -59,7 +59,7 @@ public static final class IllegalMergeException extends IOException {
     public static final int REASON_PERIOD_COUNT_MISMATCH = 0;
 
     /** The reason the merge failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason the merge failed. */
     public IllegalMergeException(@Reason int reason) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaPeriod.java
Patch:
@@ -129,7 +129,7 @@ interface Listener {
   private @MonotonicNonNull SeekMap seekMap;
   private long durationUs;
   private boolean isLive;
-  @DataType private int dataType;
+  private @DataType int dataType;
 
   private boolean seenFirstTrackSelection;
   private boolean notifyDiscontinuity;

File: library/core/src/main/java/com/google/android/exoplayer2/source/SilenceMediaSource.java
Patch:
@@ -83,7 +83,7 @@ public SilenceMediaSource createMediaSource() {
   public static final String MEDIA_ID = "SilenceMediaSource";
 
   private static final int SAMPLE_RATE_HZ = 44100;
-  @C.PcmEncoding private static final int PCM_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int PCM_ENCODING = C.ENCODING_PCM_16BIT;
   private static final int CHANNEL_COUNT = 2;
   private static final Format FORMAT =
       new Format.Builder()

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/Chunk.java
Patch:
@@ -40,15 +40,15 @@ public abstract class Chunk implements Loadable {
   /** The {@link DataSpec} that defines the data to be loaded. */
   public final DataSpec dataSpec;
   /** The {@link DataType data type} of the chunk. For reporting only. */
-  @DataType public final int type;
+  public final @DataType int type;
   /** The format of the track to which this chunk belongs. */
   public final Format trackFormat;
   /**
    * One of the {@link C.SelectionReason selection reasons} if the chunk belongs to a track. {@link
    * C#SELECTION_REASON_UNKNOWN} if the chunk does not belong to a track, or if the selection reason
    * is unknown.
    */
-  @C.SelectionReason public final int trackSelectionReason;
+  public final @C.SelectionReason int trackSelectionReason;
   /**
    * Optional data associated with the selection of the track to which this chunk belongs. Null if
    * the chunk does not belong to a track, or if there is no associated track selection data.

File: library/core/src/main/java/com/google/android/exoplayer2/source/mediaparser/OutputConsumerAdapterV30.java
Patch:
@@ -538,8 +538,7 @@ private static DrmInitData toExoPlayerDrmInitData(
     return new DrmInitData(schemeType, schemeDatas);
   }
 
-  @SelectionFlags
-  private static int getSelectionFlags(MediaFormat mediaFormat) {
+  private static @SelectionFlags int getSelectionFlags(MediaFormat mediaFormat) {
     int selectionFlags = 0;
     selectionFlags |=
         getFlag(

File: library/core/src/main/java/com/google/android/exoplayer2/text/ExoplayerCuesDecoder.java
Patch:
@@ -54,7 +54,7 @@ public final class ExoplayerCuesDecoder implements SubtitleDecoder {
   private final SubtitleInputBuffer inputBuffer;
   private final Deque<SubtitleOutputBuffer> availableOutputBuffers;
 
-  @InputBufferState private int inputBufferState;
+  private @InputBufferState int inputBufferState;
   private boolean released;
 
   public ExoplayerCuesDecoder() {

File: library/core/src/main/java/com/google/android/exoplayer2/text/TextRenderer.java
Patch:
@@ -86,7 +86,7 @@ public final class TextRenderer extends BaseRenderer implements Callback {
   private boolean inputStreamEnded;
   private boolean outputStreamEnded;
   private boolean waitingForKeyFrame;
-  @ReplacementState private int decoderReplacementState;
+  private @ReplacementState int decoderReplacementState;
   @Nullable private Format streamFormat;
   @Nullable private SubtitleDecoder decoder;
   @Nullable private SubtitleInputBuffer nextInputBuffer;
@@ -133,8 +133,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeter.java
Patch:
@@ -276,14 +276,14 @@ public static synchronized DefaultBandwidthMeter getSingletonInstance(Context co
   private long sampleStartTimeMs;
   private long sampleBytesTransferred;
 
-  @C.NetworkType private int networkType;
+  private @C.NetworkType int networkType;
   private long totalElapsedTimeMs;
   private long totalBytesTransferred;
   private long bitrateEstimate;
   private long lastReportedBitrateEstimate;
 
   private boolean networkTypeOverrideSet;
-  @C.NetworkType private int networkTypeOverride;
+  private @C.NetworkType int networkTypeOverride;
 
   /** @deprecated Use {@link Builder} instead. */
   @Deprecated

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/LoadErrorHandlingPolicy.java
Patch:
@@ -128,7 +128,7 @@ public boolean isFallbackAvailable(@FallbackType int type) {
   /** A selected fallback option. */
   final class FallbackSelection {
     /** The type of fallback. */
-    @FallbackType public final int type;
+    public final @FallbackType int type;
     /** The duration for which the failing resource should be excluded, in milliseconds. */
     public final long exclusionDurationMs;
 

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/ParsingLoadable.java
Patch:
@@ -98,7 +98,7 @@ public static <T> T load(
   private final StatsDataSource dataSource;
   private final Parser<? extends T> parser;
 
-  private volatile @Nullable T result;
+  @Nullable private volatile T result;
 
   /**
    * @param dataSource A {@link DataSource} to use when loading the data.

File: library/core/src/main/java/com/google/android/exoplayer2/video/DecoderVideoRenderer.java
Patch:
@@ -118,7 +118,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
 
   private DecoderInputBuffer inputBuffer;
   private VideoDecoderOutputBuffer outputBuffer;
-  @VideoOutputMode private int outputMode;
+  private @VideoOutputMode int outputMode;
   @Nullable private Object output;
   @Nullable private Surface outputSurface;
   @Nullable private VideoDecoderOutputBufferRenderer outputBufferRenderer;
@@ -127,7 +127,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
   @Nullable private DrmSession decoderDrmSession;
   @Nullable private DrmSession sourceDrmSession;
 
-  @ReinitializationState private int decoderReinitializationState;
+  private @ReinitializationState int decoderReinitializationState;
   private boolean decoderReceivedBuffers;
 
   private boolean renderedFirstFrameAfterReset;

File: library/core/src/main/java/com/google/android/exoplayer2/video/DummySurface.java
Patch:
@@ -103,8 +103,7 @@ public void release() {
     }
   }
 
-  @SecureMode
-  private static int getSecureMode(Context context) {
+  private static @SecureMode int getSecureMode(Context context) {
     if (GlUtil.isProtectedContentExtensionSupported(context)) {
       if (GlUtil.isSurfacelessContextExtensionSupported()) {
         return SECURE_MODE_SURFACELESS_CONTEXT;

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -128,7 +128,7 @@ public class MediaCodecVideoRenderer extends MediaCodecRenderer {
   @Nullable private Surface surface;
   @Nullable private DummySurface dummySurface;
   private boolean haveReportedFirstFrameRenderedForCurrentSurface;
-  @C.VideoScalingMode private int scalingMode;
+  private @C.VideoScalingMode int scalingMode;
   private boolean renderedFirstFrameAfterReset;
   private boolean mayRenderFirstFrameAfterEnableIfNotStarted;
   private boolean renderedFirstFrameAfterEnable;
@@ -339,8 +339,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     String mimeType = format.sampleMimeType;
     if (!MimeTypes.isVideo(mimeType)) {

File: library/core/src/main/java/com/google/android/exoplayer2/video/VideoFrameReleaseHelper.java
Patch:
@@ -109,7 +109,7 @@ public final class VideoFrameReleaseHelper {
   private float surfacePlaybackFrameRate;
 
   private float playbackSpeed;
-  @C.VideoChangeFrameRateStrategy private int changeFrameRateStrategy;
+  private @C.VideoChangeFrameRateStrategy int changeFrameRateStrategy;
 
   private long vsyncDurationNs;
   private long vsyncOffsetNs;

File: library/core/src/main/java/com/google/android/exoplayer2/video/spherical/CameraMotionRenderer.java
Patch:
@@ -56,8 +56,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     return MimeTypes.APPLICATION_CAMERA_MOTION.equals(format.sampleMimeType)
         ? RendererCapabilities.create(C.FORMAT_HANDLED)
         : RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: library/core/src/main/java/com/google/android/exoplayer2/video/spherical/SceneRenderer.java
Patch:
@@ -50,8 +50,8 @@
   private @MonotonicNonNull SurfaceTexture surfaceTexture;
 
   // Used by other threads only
-  @C.StereoMode private volatile int defaultStereoMode;
-  @C.StereoMode private int lastStereoMode;
+  private volatile @C.StereoMode int defaultStereoMode;
+  private @C.StereoMode int lastStereoMode;
   @Nullable private byte[] lastProjectionData;
 
   // Methods called on any thread.

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -11478,7 +11478,7 @@ public void handleMessage(ExoPlayer player, int messageType, @Nullable Object me
   private static final class PlayerStateGrabber extends PlayerRunnable {
 
     public boolean playWhenReady;
-    @Player.State public int playbackState;
+    public @Player.State int playbackState;
     @Nullable public Timeline timeline;
 
     @Override

File: library/core/src/test/java/com/google/android/exoplayer2/audio/DecoderAudioRendererTest.java
Patch:
@@ -71,8 +71,7 @@ public String getName() {
           }
 
           @Override
-          @C.FormatSupport
-          protected int supportsFormatInternal(Format format) {
+          protected @C.FormatSupport int supportsFormatInternal(Format format) {
             return FORMAT_HANDLED;
           }
 

File: library/core/src/test/java/com/google/android/exoplayer2/video/DecoderVideoRendererTest.java
Patch:
@@ -84,16 +84,15 @@ public void setUp() {
             /* maxDroppedFramesToNotify= */ -1) {
 
           private final Phaser inputBuffersInCodecPhaser = new Phaser();
-          @C.VideoOutputMode private int outputMode;
+          private @C.VideoOutputMode int outputMode;
 
           @Override
           public String getName() {
             return "TestVideoRenderer";
           }
 
           @Override
-          @Capabilities
-          public int supportsFormat(Format format) {
+          public @Capabilities int supportsFormat(Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: library/core/src/test/java/com/google/android/exoplayer2/video/MediaCodecVideoRendererTest.java
Patch:
@@ -110,8 +110,8 @@ public void setUp() throws Exception {
             /* eventListener= */ eventListener,
             /* maxDroppedFramesToNotify= */ 1) {
           @Override
-          @Capabilities
-          protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format) {
+          protected @Capabilities int supportsFormat(
+              MediaCodecSelector mediaCodecSelector, Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaPeriod.java
Patch:
@@ -937,7 +937,7 @@ private static final class TrackGroupInfo {
 
     public final int[] adaptationSetIndices;
     public final @C.TrackType int trackType;
-    @TrackGroupCategory public final int trackGroupCategory;
+    public final @TrackGroupCategory int trackGroupCategory;
 
     public final int eventStreamGroupIndex;
     public final int primaryTrackGroupIndex;

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/DataSourceException.java
Patch:
@@ -55,7 +55,7 @@ public static boolean isCausedByPositionOutOfRange(IOException e) {
    * The reason of this {@link DataSourceException}, should be one of the {@code ERROR_CODE_IO_*} in
    * {@link PlaybackException.ErrorCode}.
    */
-  @PlaybackException.ErrorCode public final int reason;
+  public final @PlaybackException.ErrorCode int reason;
 
   /**
    * Constructs a DataSourceException.

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java
Patch:
@@ -231,7 +231,7 @@ public static HttpDataSourceException createForIOException(
     /** The {@link DataSpec} associated with the current connection. */
     public final DataSpec dataSpec;
 
-    @Type public final int type;
+    public final @Type int type;
 
     /**
      * @deprecated Use {@link #HttpDataSourceException(DataSpec, int, int)
@@ -347,8 +347,8 @@ public HttpDataSourceException(
       this.type = type;
     }
 
-    @PlaybackException.ErrorCode
-    private static int assignErrorCode(@PlaybackException.ErrorCode int errorCode, @Type int type) {
+    private static @PlaybackException.ErrorCode int assignErrorCode(
+        @PlaybackException.ErrorCode int errorCode, @Type int type) {
       return errorCode == PlaybackException.ERROR_CODE_IO_UNSPECIFIED && type == TYPE_OPEN
           ? PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED
           : errorCode;

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
Patch:
@@ -70,7 +70,7 @@ public static final class Factory implements DataSource.Factory {
     @Nullable private DataSource.Factory upstreamDataSourceFactory;
     @Nullable private PriorityTaskManager upstreamPriorityTaskManager;
     private int upstreamPriority;
-    @CacheDataSource.Flags private int flags;
+    private @CacheDataSource.Flags int flags;
     @Nullable private CacheDataSource.EventListener eventListener;
 
     public Factory() {

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/Buffer.java
Patch:
@@ -20,7 +20,7 @@
 /** Base class for buffers with flags. */
 public abstract class Buffer {
 
-  @C.BufferFlags private int flags;
+  private @C.BufferFlags int flags;
 
   /** Clears the buffer. */
   public void clear() {

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/CryptoInfo.java
Patch:
@@ -46,7 +46,7 @@ public final class CryptoInfo {
    *
    * @see android.media.MediaCodec.CryptoInfo#mode
    */
-  @C.CryptoMode public int mode;
+  public @C.CryptoMode int mode;
   /**
    * The number of leading unencrypted bytes in each sub-sample. If null, all bytes are treated as
    * encrypted and {@link #numBytesOfEncryptedData} must be specified.

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/DecoderInputBuffer.java
Patch:
@@ -109,7 +109,7 @@ public InsufficientCapacityException(int currentCapacity, int requiredCapacity)
    */
   @Nullable public ByteBuffer supplementalData;
 
-  @BufferReplacementMode private final int bufferReplacementMode;
+  private final @BufferReplacementMode int bufferReplacementMode;
   private final int paddingSize;
 
   /** Returns a new instance that's not able to hold any data. */

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/VideoDecoderOutputBuffer.java
Patch:
@@ -32,7 +32,7 @@ public class VideoDecoderOutputBuffer extends DecoderOutputBuffer {
   public int decoderPrivate;
 
   /** Output mode. */
-  @C.VideoOutputMode public int mode;
+  public @C.VideoOutputMode int mode;
   /** RGB buffer for RGB mode. */
   @Nullable public ByteBuffer data;
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/BinarySearchSeeker.java
Patch:
@@ -421,7 +421,7 @@ public static final class TimestampSearchResult {
         new TimestampSearchResult(TYPE_NO_TIMESTAMP, C.TIME_UNSET, C.POSITION_UNSET);
 
     /** The type of the result. */
-    @Type private final int type;
+    private final @Type int type;
 
     /**
      * When {@link #type} is {@link #TYPE_POSITION_OVERESTIMATED}, the {@link

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/TrackOutput.java
Patch:
@@ -38,7 +38,7 @@ public interface TrackOutput {
   final class CryptoData {
 
     /** The encryption mode used for the sample. */
-    @C.CryptoMode public final int cryptoMode;
+    public final @C.CryptoMode int cryptoMode;
 
     /** The encryption key associated with the sample. Its contents must not be modified. */
     public final byte[] encryptionKey;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/TrueHdSampleRechunker.java
Patch:
@@ -32,7 +32,7 @@ public final class TrueHdSampleRechunker {
   private boolean foundSyncframe;
   private int chunkSampleCount;
   private long chunkTimeUs;
-  @C.BufferFlags private int chunkFlags;
+  private @C.BufferFlags int chunkFlags;
   private int chunkSize;
   private int chunkOffset;
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/jpeg/JpegExtractor.java
Patch:
@@ -82,7 +82,7 @@ public final class JpegExtractor implements Extractor {
 
   private @MonotonicNonNull ExtractorOutput extractorOutput;
 
-  @State private int state;
+  private @State int state;
   private int marker;
   private int segmentLength;
   private long mp4StartPosition;
@@ -126,8 +126,8 @@ public void init(ExtractorOutput output) {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     switch (state) {
       case STATE_READING_MARKER:
         readMarker(input);

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp3/Mp3Extractor.java
Patch:
@@ -140,7 +140,7 @@ public final class Mp3Extractor implements Extractor {
   private static final int SEEK_HEADER_VBRI = 0x56425249;
   private static final int SEEK_HEADER_UNSET = 0;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final long forcedFirstSampleTimestampUs;
   private final ParsableByteArray scratch;
   private final MpegAudioUtil.Header synchronizedHeader;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -1910,7 +1910,7 @@ private static final class StsdData {
 
     @Nullable public Format format;
     public int nalUnitLengthFieldLength;
-    @Track.Transformation public int requiredSampleTransformation;
+    public @Track.Transformation int requiredSampleTransformation;
 
     public StsdData(int numberOfEntries) {
       trackEncryptionBoxes = new TrackEncryptionBox[numberOfEntries];

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -130,7 +130,7 @@ public class FragmentedMp4Extractor implements Extractor {
   private static final int STATE_READING_SAMPLE_CONTINUE = 4;
 
   // Workarounds.
-  @Flags private final int flags;
+  private final @Flags int flags;
   @Nullable private final Track sideloadedTrack;
 
   // Sideloaded data.
@@ -1687,8 +1687,7 @@ public int getCurrentSampleSize() {
     }
 
     /** Returns the {@link C.BufferFlags} corresponding to the current sample. */
-    @C.BufferFlags
-    public int getCurrentSampleFlags() {
+    public @C.BufferFlags int getCurrentSampleFlags() {
       int flags =
           !currentlyInFragment
               ? moovSampleTable.flags[currentSampleIndex]

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Track.java
Patch:
@@ -67,7 +67,7 @@ public final class Track {
    * One of {@code TRANSFORMATION_*}. Defines the transformation to apply before outputting each
    * sample.
    */
-  @Transformation public final int sampleTransformation;
+  public final @Transformation int sampleTransformation;
 
   /** Durations of edit list segments in the movie timescale. Null if there is no edit list. */
   @Nullable public final long[] editListDurations;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/TrackEncryptionBox.java
Patch:
@@ -77,8 +77,7 @@ public TrackEncryptionBox(
             schemeToCryptoMode(schemeType), keyId, defaultEncryptedBlocks, defaultClearBlocks);
   }
 
-  @C.CryptoMode
-  private static int schemeToCryptoMode(@Nullable String schemeType) {
+  private static @C.CryptoMode int schemeToCryptoMode(@Nullable String schemeType) {
     if (schemeType == null) {
       // If unknown, assume cenc.
       return C.CRYPTO_MODE_AES_CTR;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac3Reader.java
Patch:
@@ -60,7 +60,7 @@ public final class Ac3Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac4Reader.java
Patch:
@@ -58,7 +58,7 @@ public final class Ac4Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/DefaultTsPayloadReaderFactory.java
Patch:
@@ -102,7 +102,7 @@ public final class DefaultTsPayloadReaderFactory implements TsPayloadReader.Fact
 
   private static final int DESCRIPTOR_TAG_CAPTION_SERVICE = 0x86;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final List<Format> closedCaptionFormats;
 
   public DefaultTsPayloadReaderFactory() {

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/H263Reader.java
Patch:
@@ -333,7 +333,7 @@ private static final class CsdBuffer {
     private static final int STATE_WAIT_FOR_VOP_START = 4;
 
     private boolean isFilling;
-    @State private int state;
+    private @State int state;
 
     public int length;
     public int volStartPosition;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
Patch:
@@ -116,7 +116,7 @@ public final class TsExtractor implements Extractor {
   private static final int BUFFER_SIZE = TS_PACKET_SIZE * 50;
   private static final int SNIFF_TS_PACKET_COUNT = 5;
 
-  @Mode private final int mode;
+  private final @Mode int mode;
   private final int timestampSearchBytes;
   private final List<TimestampAdjuster> timestampAdjusters;
   private final ParsableByteArray tsPacketBuffer;
@@ -296,8 +296,8 @@ public void release() {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     long inputLength = input.getLength();
     if (tracksEnded) {
       boolean canReadDuration = inputLength != C.LENGTH_UNSET && mode != MODE_HLS;

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/SubtitleExtractor.java
Patch:
@@ -84,7 +84,7 @@ public class SubtitleExtractor implements Extractor {
   private @MonotonicNonNull ExtractorOutput extractorOutput;
   private @MonotonicNonNull TrackOutput trackOutput;
   private int bytesRead;
-  @State private int state;
+  private @State int state;
   private long seekTimeUs;
 
   /**

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/ttml/TextEmphasis.java
Patch:
@@ -97,13 +97,13 @@
           TtmlNode.ANNOTATION_POSITION_OUTSIDE);
 
   /** The text emphasis mark shape. */
-  @MarkShape public final int markShape;
+  public final @MarkShape int markShape;
 
   /** The fill style of the text emphasis mark. */
-  @TextEmphasisSpan.MarkFill public final int markFill;
+  public final @TextEmphasisSpan.MarkFill int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @Position public final int position;
+  public final @Position int position;
 
   private TextEmphasis(
       @MarkShape int markShape,

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/mkv/DefaultEbmlReaderTest.java
Patch:
@@ -178,8 +178,7 @@ private static final class TestProcessor implements EbmlProcessor {
     private final List<String> events = new ArrayList<>();
 
     @Override
-    @EbmlProcessor.ElementType
-    public int getElementType(int id) {
+    public @EbmlProcessor.ElementType int getElementType(int id) {
       switch (id) {
         case ID_EBML:
         case ID_SEGMENT:

File: library/extractor/src/test/java/com/google/android/exoplayer2/text/ttml/TtmlStyleTest.java
Patch:
@@ -42,7 +42,7 @@ public final class TtmlStyleTest {
   private static final String FONT_FAMILY = "serif";
   @ColorInt private static final int FONT_COLOR = Color.WHITE;
   private static final float FONT_SIZE = 12.5f;
-  @TtmlStyle.FontSizeUnit private static final int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
+  private static final @TtmlStyle.FontSizeUnit int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
   @ColorInt private static final int BACKGROUND_COLOR = Color.BLACK;
   private static final int RUBY_TYPE = TtmlStyle.RUBY_TYPE_TEXT;
   private static final int RUBY_POSITION = TextAnnotation.POSITION_AFTER;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -60,7 +60,7 @@ public final class DefaultHlsExtractorFactory implements HlsExtractorFactory {
         FileTypes.MP3,
       };
 
-  @DefaultTsPayloadReaderFactory.Flags private final int payloadReaderFactoryFlags;
+  private final @DefaultTsPayloadReaderFactory.Flags int payloadReaderFactoryFlags;
   private final boolean exposeCea608WhenMissingDeclarations;
 
   /**

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
Patch:
@@ -303,8 +303,7 @@ public long getAdjustedSeekPositionUs(long positionUs, SeekParameters seekParame
    *     has been {@link #CHUNK_PUBLICATION_STATE_REMOVED removed} or is definitely {@link
    *     #CHUNK_PUBLICATION_STATE_PUBLISHED published}.
    */
-  @ChunkPublicationState
-  public int getChunkPublicationState(HlsMediaChunk mediaChunk) {
+  public @ChunkPublicationState int getChunkPublicationState(HlsMediaChunk mediaChunk) {
     if (mediaChunk.partIndex == C.INDEX_UNSET) {
       // Chunks based on full segments can't be removed and are always published.
       return CHUNK_PUBLICATION_STATE_PUBLISHED;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylist.java
Patch:
@@ -396,7 +396,7 @@ public RenditionReport(Uri playlistUri, long lastMediaSequence, int lastPartInde
   public static final int PLAYLIST_TYPE_EVENT = 2;
 
   /** The type of the playlist. See {@link PlaylistType}. */
-  @PlaylistType public final int playlistType;
+  public final @PlaylistType int playlistType;
   /**
    * The start offset in microseconds from the beginning of the playlist, as defined by
    * #EXT-X-START, or {@link C#TIME_UNSET} if undefined. The value is guaranteed to be between 0 and

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspAuthenticationInfo.java
Patch:
@@ -54,7 +54,7 @@
   private static final String ALGORITHM = "MD5";
 
   /** The authentication mechanism. */
-  @AuthenticationMechanism public final int authenticationMechanism;
+  public final @AuthenticationMechanism int authenticationMechanism;
   /** The authentication realm. */
   public final String realm;
   /** The nonce used in digest authentication; empty if using {@link #BASIC} authentication. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspClient.java
Patch:
@@ -141,7 +141,7 @@ public interface PlaybackEventListener {
   @Nullable private String sessionId;
   @Nullable private KeepAliveMonitor keepAliveMonitor;
   @Nullable private RtspAuthenticationInfo rtspAuthenticationInfo;
-  @RtspState private int rtspState;
+  private @RtspState int rtspState;
   private boolean hasUpdatedTimelineAndTracks;
   private boolean receivedAuthorizationRequest;
   private boolean hasPendingPauseRequest;
@@ -204,8 +204,7 @@ public void start() throws IOException {
   }
 
   /** Returns the current {@link RtspState RTSP state}. */
-  @RtspState
-  public int getState() {
+  public @RtspState int getState() {
     return rtspState;
   }
 

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMediaPeriod.java
Patch:
@@ -773,8 +773,7 @@ public boolean isSampleQueueReady() {
       return sampleQueue.isReady(/* loadingFinished= */ canceled);
     }
 
-    @ReadDataResult
-    public int read(
+    public @ReadDataResult int read(
         FormatHolder formatHolder, DecoderInputBuffer buffer, @ReadFlags int readFlags) {
       return sampleQueue.read(formatHolder, buffer, readFlags, /* loadingFinished= */ canceled);
     }

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageChannel.java
Patch:
@@ -351,7 +351,7 @@ private static final class MessageParser {
 
     private final List<String> messageLines;
 
-    @ReadingState private int state;
+    private @ReadingState int state;
     private long messageBodyLength;
 
     /** Creates a new instance. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageUtil.java
Patch:
@@ -254,8 +254,7 @@ public static String toMethodString(@RtspRequest.Method int method) {
     }
   }
 
-  @RtspRequest.Method
-  private static int parseMethodString(String method) {
+  private static @RtspRequest.Method int parseMethodString(String method) {
     switch (method) {
       case "ANNOUNCE":
         return METHOD_ANNOUNCE;

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspRequest.java
Patch:
@@ -86,7 +86,7 @@
   /** The {@link Uri} to which this request is sent. */
   public final Uri uri;
   /** The request method, as defined in {@link Method}. */
-  @Method public final int method;
+  public final @Method int method;
   /** The headers of this request. */
   public final RtspHeaders headers;
   /** The body of this RTSP message, or empty string if absent. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpH264Reader.java
Patch:
@@ -58,7 +58,7 @@
   private final RtpPayloadFormat payloadFormat;
 
   private @MonotonicNonNull TrackOutput trackOutput;
-  @C.BufferFlags private int bufferFlags;
+  private @C.BufferFlags int bufferFlags;
 
   private long firstReceivedTimestamp;
   private int previousSequenceNumber;
@@ -296,8 +296,7 @@ private static long toSampleUs(
             /* divisor= */ MEDIA_CLOCK_FREQUENCY);
   }
 
-  @C.BufferFlags
-  private static int getBufferFlagsFromNalType(int nalType) {
+  private static @C.BufferFlags int getBufferFlagsFromNalType(int nalType) {
     return nalType == NAL_UNIT_TYPE_IDR ? C.BUFFER_FLAG_KEY_FRAME : 0;
   }
 }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -540,7 +540,7 @@ public interface DebugViewProvider {
 
   @Nullable private MuxerWrapper muxerWrapper;
   @Nullable private ExoPlayer player;
-  @ProgressState private int progressState;
+  private @ProgressState int progressState;
 
   private Transformer(
       Context context,
@@ -741,8 +741,7 @@ public Looper getApplicationLooper() {
    * @return The {@link ProgressState}.
    * @throws IllegalStateException If this method is called from the wrong thread.
    */
-  @ProgressState
-  public int getProgress(ProgressHolder progressHolder) {
+  public @ProgressState int getProgress(ProgressHolder progressHolder) {
     verifyApplicationThread();
     if (progressState == PROGRESS_STATE_AVAILABLE) {
       Player player = checkNotNull(this.player);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerBaseRenderer.java
Patch:
@@ -67,8 +67,7 @@ public TransformerBaseRenderer(
    * @return The {@link Capabilities} for this format.
    */
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     return RendererCapabilities.create(
         MimeTypes.getTrackType(format.sampleMimeType) == getTrackType()
             ? C.FORMAT_HANDLED

File: robolectricutils/src/main/java/com/google/android/exoplayer2/robolectric/TestDownloadManagerListener.java
Patch:
@@ -42,7 +42,7 @@ public final class TestDownloadManagerListener implements DownloadManager.Listen
   private final ConditionVariable initializedCondition;
   private final ConditionVariable idleCondition;
 
-  @Download.FailureReason private int failureReason;
+  private @Download.FailureReason int failureReason;
 
   public TestDownloadManagerListener(DownloadManager downloadManager) {
     this.downloadManager = downloadManager;

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java
Patch:
@@ -493,7 +493,7 @@ protected void doActionImpl(
   /** Calls {@link Player#setRepeatMode(int)}. */
   public static final class SetRepeatMode extends Action {
 
-    @Player.RepeatMode private final int repeatMode;
+    private final @Player.RepeatMode int repeatMode;
 
     /**
      * @param tag A tag to use for logging.
@@ -740,7 +740,7 @@ public static final class WaitForTimelineChanged extends Action {
 
     @Nullable private final Timeline expectedTimeline;
     private final boolean ignoreExpectedReason;
-    @Player.TimelineChangeReason private final int expectedReason;
+    private final @Player.TimelineChangeReason int expectedReason;
 
     /**
      * Creates action waiting for a timeline change for a given reason.
@@ -907,7 +907,7 @@ protected void doActionImpl(
    */
   public static final class WaitForPlaybackState extends Action {
 
-    @Player.State private final int targetPlaybackState;
+    private final @Player.State int targetPlaybackState;
 
     /**
      * @param tag A tag to use for logging.

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/CapturingAudioSink.java
Patch:
@@ -91,7 +91,7 @@ public void dump(Dumper dumper) {
 
   private static final class DumpableConfiguration implements Dumper.Dumpable {
 
-    @C.PcmEncoding private final int inputPcmEncoding;
+    private final @C.PcmEncoding int inputPcmEncoding;
     private final int inputChannelCount;
     private final int inputSampleRate;
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DownloadBuilder.java
Patch:
@@ -45,7 +45,7 @@ public final class DownloadBuilder {
   @Nullable private String cacheKey;
   private byte[] customMetadata;
 
-  @Download.State private int state;
+  private @Download.State int state;
   private long startTimeMs;
   private long updateTimeMs;
   private long contentLength;

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DumpFileAsserts.java
Patch:
@@ -70,7 +70,7 @@ public class DumpFileAsserts {
   /** Write output to folder {@code /storage/emulated/0/Android/data} of device. */
   private static final int WRITE_TO_DEVICE = 1 << 1;
 
-  @DumpFilesAction private static final int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
+  private static final @DumpFilesAction int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
 
   private DumpFileAsserts() {}
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExoMediaDrm.java
Patch:
@@ -396,8 +396,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCryptoExcep
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return FakeCryptoConfig.TYPE;
   }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeRenderer.java
Patch:
@@ -160,8 +160,7 @@ public boolean isEnded() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) throws ExoPlaybackException {
+  public @Capabilities int supportsFormat(Format format) throws ExoPlaybackException {
     int trackType = MimeTypes.getTrackType(format.sampleMimeType);
     return trackType != C.TRACK_TYPE_UNKNOWN && trackType == getTrackType()
         ? RendererCapabilities.create(C.FORMAT_HANDLED, ADAPTIVE_SEAMLESS, TUNNELING_NOT_SUPPORTED)

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeSampleStream.java
Patch:
@@ -293,7 +293,7 @@ private void maybeNotifyDownstreamFormat(long timeUs) {
 
   private static class SampleInfo {
     public final byte[] data;
-    @C.BufferFlags public final int flags;
+    public final @C.BufferFlags int flags;
     public final long timeUs;
 
     public SampleInfo(byte[] data, @C.BufferFlags int flags, long timeUs) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayer.java
Patch:
@@ -47,6 +47,7 @@
 import androidx.media3.datasource.DataSource;
 import androidx.media3.exoplayer.analytics.AnalyticsCollector;
 import androidx.media3.exoplayer.analytics.AnalyticsListener;
+import androidx.media3.exoplayer.analytics.DefaultAnalyticsCollector;
 import androidx.media3.exoplayer.audio.AudioSink;
 import androidx.media3.exoplayer.audio.DefaultAudioSink;
 import androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;
@@ -578,7 +579,7 @@ private Builder(
       this.analyticsCollectorSupplier =
           analyticsCollectorSupplier != null
               ? analyticsCollectorSupplier
-              : () -> new AnalyticsCollector(checkNotNull(clock));
+              : () -> new DefaultAnalyticsCollector(checkNotNull(clock));
       looper = Util.getCurrentOrMainLooper();
       audioAttributes = AudioAttributes.DEFAULT;
       wakeMode = C.WAKE_MODE_NONE;

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/MediaPeriodQueueTest.java
Patch:
@@ -31,6 +31,7 @@
 import androidx.media3.common.TracksInfo;
 import androidx.media3.common.util.Clock;
 import androidx.media3.exoplayer.analytics.AnalyticsCollector;
+import androidx.media3.exoplayer.analytics.DefaultAnalyticsCollector;
 import androidx.media3.exoplayer.analytics.PlayerId;
 import androidx.media3.exoplayer.source.MediaSource.MediaPeriodId;
 import androidx.media3.exoplayer.source.MediaSource.MediaSourceCaller;
@@ -83,7 +84,7 @@ public final class MediaPeriodQueueTest {
 
   @Before
   public void setUp() {
-    AnalyticsCollector analyticsCollector = new AnalyticsCollector(Clock.DEFAULT);
+    AnalyticsCollector analyticsCollector = new DefaultAnalyticsCollector(Clock.DEFAULT);
     analyticsCollector.setPlayer(
         new ExoPlayer.Builder(ApplicationProvider.getApplicationContext()).build(),
         Looper.getMainLooper());

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/MediaSourceListTest.java
Patch:
@@ -32,6 +32,7 @@
 import androidx.media3.common.util.Clock;
 import androidx.media3.common.util.Util;
 import androidx.media3.exoplayer.analytics.AnalyticsCollector;
+import androidx.media3.exoplayer.analytics.DefaultAnalyticsCollector;
 import androidx.media3.exoplayer.analytics.PlayerId;
 import androidx.media3.exoplayer.source.MediaSource;
 import androidx.media3.exoplayer.source.ShuffleOrder;
@@ -58,7 +59,7 @@ public class MediaSourceListTest {
 
   @Before
   public void setUp() {
-    AnalyticsCollector analyticsCollector = new AnalyticsCollector(Clock.DEFAULT);
+    AnalyticsCollector analyticsCollector = new DefaultAnalyticsCollector(Clock.DEFAULT);
     analyticsCollector.setPlayer(
         new ExoPlayer.Builder(ApplicationProvider.getApplicationContext()).build(),
         Looper.getMainLooper());

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/TestExoPlayerBuilder.java
Patch:
@@ -29,7 +29,7 @@
 import androidx.media3.exoplayer.Renderer;
 import androidx.media3.exoplayer.RenderersFactory;
 import androidx.media3.exoplayer.SimpleExoPlayer;
-import androidx.media3.exoplayer.analytics.AnalyticsCollector;
+import androidx.media3.exoplayer.analytics.DefaultAnalyticsCollector;
 import androidx.media3.exoplayer.source.MediaSource;
 import androidx.media3.exoplayer.trackselection.DefaultTrackSelector;
 import androidx.media3.exoplayer.upstream.BandwidthMeter;
@@ -302,7 +302,7 @@ public SimpleExoPlayer build() {
             .setTrackSelector(trackSelector)
             .setLoadControl(loadControl)
             .setBandwidthMeter(bandwidthMeter)
-            .setAnalyticsCollector(new AnalyticsCollector(clock))
+            .setAnalyticsCollector(new DefaultAnalyticsCollector(clock))
             .setClock(clock)
             .setUseLazyPreparation(useLazyPreparation)
             .setLooper(looper)

File: libraries/cast/src/main/java/androidx/media3/cast/CastPlayer.java
Patch:
@@ -527,7 +527,7 @@ public void setRepeatMode(@RepeatMode int repeatMode) {
     setRepeatModeAndNotifyIfChanged(repeatMode);
     listeners.flushEvents();
     PendingResult<MediaChannelResult> pendingResult =
-        remoteMediaClient.queueSetRepeatMode(getCastRepeatMode(repeatMode), /* jsonObject= */ null);
+        remoteMediaClient.queueSetRepeatMode(getCastRepeatMode(repeatMode), /* customData= */ null);
     this.repeatMode.pendingResultCallback =
         new ResultCallback<MediaChannelResult>() {
           @Override

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayerImplInternal.java
Patch:
@@ -2672,7 +2672,7 @@ private static PositionUpdateForPlaylistChange resolvePositionForPlaylistChange(
     boolean earliestCuePointIsUnchangedOrLater =
         periodIdWithAds.nextAdGroupIndex == C.INDEX_UNSET
             || (oldPeriodId.nextAdGroupIndex != C.INDEX_UNSET
-                && periodIdWithAds.adGroupIndex >= oldPeriodId.nextAdGroupIndex);
+                && periodIdWithAds.nextAdGroupIndex >= oldPeriodId.nextAdGroupIndex);
     // Drop update if we keep playing the same content (MediaPeriod.periodUid are identical) and
     // the only change is that MediaPeriodId.nextAdGroupIndex increased. This postpones a potential
     // discontinuity until we reach the former next ad group position.

File: libraries/common/src/main/java/androidx/media3/common/AdPlaybackState.java
Patch:
@@ -67,7 +67,7 @@ public static final class AdGroup implements Bundleable {
     /** The URI of each ad in the ad group. */
     public final @NullableType Uri[] uris;
     /** The state of each ad in the ad group. */
-    @AdState public final int[] states;
+    public final @AdState int[] states;
     /** The durations of each ad in the ad group, in microseconds. */
     public final long[] durationsUs;
     /**

File: libraries/common/src/main/java/androidx/media3/common/BasePlayer.java
Patch:
@@ -384,8 +384,7 @@ public final long getContentDuration() {
         : timeline.getWindow(getCurrentMediaItemIndex(), window).getDurationMs();
   }
 
-  @RepeatMode
-  private int getRepeatModeForNavigation() {
+  private @RepeatMode int getRepeatModeForNavigation() {
     @RepeatMode int repeatMode = getRepeatMode();
     return repeatMode == REPEAT_MODE_ONE ? REPEAT_MODE_OFF : repeatMode;
   }

File: libraries/common/src/main/java/androidx/media3/common/C.java
Patch:
@@ -1247,8 +1247,8 @@ public static String getFormatSupportString(@FormatSupport int formatSupport) {
       replacement = "Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode)",
       imports = {"androidx.media3.common.util.Util"})
   @Deprecated
-  @PlaybackException.ErrorCode
-  public static int getErrorCodeForMediaDrmErrorCode(int mediaDrmErrorCode) {
+  public static @PlaybackException.ErrorCode int getErrorCodeForMediaDrmErrorCode(
+      int mediaDrmErrorCode) {
     return Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode);
   }
 }

File: libraries/common/src/main/java/androidx/media3/common/DrmInitData.java
Patch:
@@ -52,7 +52,8 @@ public final class DrmInitData implements Comparator<SchemeData>, Parcelable {
    * @param mediaData DRM session acquisition data obtained from the media.
    * @return A {@link DrmInitData} obtained from merging a media manifest and a media stream.
    */
-  public static @Nullable DrmInitData createSessionCreationData(
+  @Nullable
+  public static DrmInitData createSessionCreationData(
       @Nullable DrmInitData manifestData, @Nullable DrmInitData mediaData) {
     ArrayList<SchemeData> result = new ArrayList<>();
     String schemeType = null;

File: libraries/common/src/main/java/androidx/media3/common/HeartRating.java
Patch:
@@ -79,7 +79,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_HEART;
+  private static final @RatingType int TYPE = RATING_TYPE_HEART;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: libraries/common/src/main/java/androidx/media3/common/MediaMetadata.java
Patch:
@@ -56,11 +56,11 @@ public static final class Builder {
     @Nullable private Rating userRating;
     @Nullable private Rating overallRating;
     @Nullable private byte[] artworkData;
-    @Nullable @PictureType private Integer artworkDataType;
+    @Nullable private @PictureType Integer artworkDataType;
     @Nullable private Uri artworkUri;
     @Nullable private Integer trackNumber;
     @Nullable private Integer totalTrackCount;
-    @Nullable @FolderType private Integer folderType;
+    @Nullable private @FolderType Integer folderType;
     @Nullable private Boolean isPlayable;
     @Nullable private Integer recordingYear;
     @Nullable private Integer recordingMonth;

File: libraries/common/src/main/java/androidx/media3/common/PercentageRating.java
Patch:
@@ -77,7 +77,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_PERCENTAGE;
+  private static final @RatingType int TYPE = RATING_TYPE_PERCENTAGE;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: libraries/common/src/main/java/androidx/media3/common/Player.java
Patch:
@@ -686,8 +686,7 @@ final class Commands implements Bundleable {
     @UnstableApi
     public static final class Builder {
 
-      @Command
-      private static final int[] SUPPORTED_COMMANDS = {
+      private static final @Command int[] SUPPORTED_COMMANDS = {
         COMMAND_PLAY_PAUSE,
         COMMAND_PREPARE,
         COMMAND_STOP,

File: libraries/common/src/main/java/androidx/media3/common/StarRating.java
Patch:
@@ -103,7 +103,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_STAR;
+  private static final @RatingType int TYPE = RATING_TYPE_STAR;
   private static final int MAX_STARS_DEFAULT = 5;
 
   @Documented

File: libraries/common/src/main/java/androidx/media3/common/ThumbRating.java
Patch:
@@ -76,7 +76,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_THUMB;
+  private static final @RatingType int TYPE = RATING_TYPE_THUMB;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: libraries/common/src/main/java/androidx/media3/common/TrackGroup.java
Patch:
@@ -207,8 +207,7 @@ private static String normalizeLanguage(@Nullable String language) {
     return language == null || language.equals(C.LANGUAGE_UNDETERMINED) ? "" : language;
   }
 
-  @C.RoleFlags
-  private static int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
+  private static @C.RoleFlags int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
     // Treat trick-play and non-trick-play formats as compatible.
     return roleFlags | C.ROLE_FLAG_TRICK_PLAY;
   }

File: libraries/common/src/main/java/androidx/media3/common/text/RubySpan.java
Patch:
@@ -39,7 +39,7 @@ public final class RubySpan implements LanguageFeatureSpan {
   public final String rubyText;
 
   /** The position of the ruby text relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public RubySpan(String rubyText, @TextAnnotation.Position int position) {
     this.rubyText = rubyText;

File: libraries/common/src/main/java/androidx/media3/common/text/TextEmphasisSpan.java
Patch:
@@ -83,13 +83,13 @@ public final class TextEmphasisSpan implements LanguageFeatureSpan {
   public static final int MARK_FILL_OPEN = 2;
 
   /** The mark shape used for text emphasis. */
-  @MarkShape public int markShape;
+  public @MarkShape int markShape;
 
   /** The mark fill for the text emphasis mark. */
-  @MarkShape public int markFill;
+  public @MarkShape int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public TextEmphasisSpan(
       @MarkShape int shape, @MarkFill int fill, @TextAnnotation.Position int position) {

File: libraries/datasource/src/main/java/androidx/media3/datasource/DataSourceException.java
Patch:
@@ -57,7 +57,7 @@ public static boolean isCausedByPositionOutOfRange(IOException e) {
    * The reason of this {@link DataSourceException}, should be one of the {@code ERROR_CODE_IO_*} in
    * {@link PlaybackException.ErrorCode}.
    */
-  @PlaybackException.ErrorCode public final int reason;
+  public final @PlaybackException.ErrorCode int reason;
 
   /**
    * Constructs a DataSourceException.

File: libraries/datasource/src/main/java/androidx/media3/datasource/HttpDataSource.java
Patch:
@@ -233,7 +233,7 @@ public static HttpDataSourceException createForIOException(
     /** The {@link DataSpec} associated with the current connection. */
     public final DataSpec dataSpec;
 
-    @Type public final int type;
+    public final @Type int type;
 
     /**
      * @deprecated Use {@link #HttpDataSourceException(DataSpec, int, int)
@@ -349,8 +349,8 @@ public HttpDataSourceException(
       this.type = type;
     }
 
-    @PlaybackException.ErrorCode
-    private static int assignErrorCode(@PlaybackException.ErrorCode int errorCode, @Type int type) {
+    private static @PlaybackException.ErrorCode int assignErrorCode(
+        @PlaybackException.ErrorCode int errorCode, @Type int type) {
       return errorCode == PlaybackException.ERROR_CODE_IO_UNSPECIFIED && type == TYPE_OPEN
           ? PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED
           : errorCode;

File: libraries/datasource/src/main/java/androidx/media3/datasource/cache/CacheDataSource.java
Patch:
@@ -72,7 +72,7 @@ public static final class Factory implements DataSource.Factory {
     @Nullable private DataSource.Factory upstreamDataSourceFactory;
     @Nullable private PriorityTaskManager upstreamPriorityTaskManager;
     private int upstreamPriority;
-    @CacheDataSource.Flags private int flags;
+    private @CacheDataSource.Flags int flags;
     @Nullable private CacheDataSource.EventListener eventListener;
 
     public Factory() {

File: libraries/decoder/src/main/java/androidx/media3/decoder/Buffer.java
Patch:
@@ -22,7 +22,7 @@
 @UnstableApi
 public abstract class Buffer {
 
-  @C.BufferFlags private int flags;
+  private @C.BufferFlags int flags;
 
   /** Clears the buffer. */
   public void clear() {

File: libraries/decoder/src/main/java/androidx/media3/decoder/CryptoInfo.java
Patch:
@@ -48,7 +48,7 @@ public final class CryptoInfo {
    *
    * @see android.media.MediaCodec.CryptoInfo#mode
    */
-  @C.CryptoMode public int mode;
+  public @C.CryptoMode int mode;
   /**
    * The number of leading unencrypted bytes in each sub-sample. If null, all bytes are treated as
    * encrypted and {@link #numBytesOfEncryptedData} must be specified.

File: libraries/decoder/src/main/java/androidx/media3/decoder/DecoderInputBuffer.java
Patch:
@@ -111,7 +111,7 @@ public InsufficientCapacityException(int currentCapacity, int requiredCapacity)
    */
   @Nullable public ByteBuffer supplementalData;
 
-  @BufferReplacementMode private final int bufferReplacementMode;
+  private final @BufferReplacementMode int bufferReplacementMode;
   private final int paddingSize;
 
   /** Returns a new instance that's not able to hold any data. */

File: libraries/decoder/src/main/java/androidx/media3/decoder/VideoDecoderOutputBuffer.java
Patch:
@@ -34,7 +34,7 @@ public class VideoDecoderOutputBuffer extends DecoderOutputBuffer {
   public int decoderPrivate;
 
   /** Output mode. */
-  @C.VideoOutputMode public int mode;
+  public @C.VideoOutputMode int mode;
   /** RGB buffer for RGB mode. */
   @Nullable public ByteBuffer data;
 

File: libraries/decoder_av1/src/main/java/androidx/media3/decoder/av1/Gav1Decoder.java
Patch:
@@ -41,7 +41,7 @@ public final class Gav1Decoder
 
   private final long gav1DecoderContext;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a Gav1Decoder.

File: libraries/decoder_av1/src/main/java/androidx/media3/decoder/av1/Libgav1VideoRenderer.java
Patch:
@@ -128,8 +128,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!MimeTypes.VIDEO_AV1.equalsIgnoreCase(format.sampleMimeType)
         || !Gav1Library.isAvailable()) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: libraries/decoder_ffmpeg/src/main/java/androidx/media3/decoder/ffmpeg/FfmpegAudioDecoder.java
Patch:
@@ -41,7 +41,7 @@
 
   private final String codecName;
   @Nullable private final byte[] extraData;
-  @C.PcmEncoding private final int encoding;
+  private final @C.PcmEncoding int encoding;
   private final int outputBufferSize;
 
   private long nativeContext; // May be reassigned on resetting the codec.
@@ -158,8 +158,7 @@ public int getSampleRate() {
   }
 
   /** Returns the encoding of output audio. */
-  @C.PcmEncoding
-  public int getEncoding() {
+  public @C.PcmEncoding int getEncoding() {
     return encoding;
   }
 

File: libraries/decoder_flac/src/main/java/androidx/media3/decoder/flac/LibflacAudioRenderer.java
Patch:
@@ -79,8 +79,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     if (!FlacLibrary.isAvailable()
         || !MimeTypes.AUDIO_FLAC.equalsIgnoreCase(format.sampleMimeType)) {
       return C.FORMAT_UNSUPPORTED_TYPE;

File: libraries/decoder_opus/src/main/java/androidx/media3/decoder/opus/LibopusAudioRenderer.java
Patch:
@@ -80,8 +80,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     boolean drmIsSupported = OpusLibrary.supportsCryptoType(format.cryptoType);
     if (!OpusLibrary.isAvailable()
         || !MimeTypes.AUDIO_OPUS.equalsIgnoreCase(format.sampleMimeType)) {

File: libraries/decoder_vp9/src/main/java/androidx/media3/decoder/vp9/LibvpxVideoRenderer.java
Patch:
@@ -126,8 +126,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!VpxLibrary.isAvailable() || !MimeTypes.VIDEO_VP9.equalsIgnoreCase(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);
     }

File: libraries/decoder_vp9/src/main/java/androidx/media3/decoder/vp9/VpxDecoder.java
Patch:
@@ -49,7 +49,7 @@ public final class VpxDecoder
 
   @Nullable private ByteBuffer lastSupplementalData;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a VP9 decoder.

File: libraries/exoplayer/src/androidTest/java/androidx/media3/exoplayer/StreamVolumeManagerTest.java
Patch:
@@ -273,7 +273,7 @@ public void onStreamVolumeChanged_isCalled_whenAudioManagerChangesIt() throws Ex
 
   private static class TestListener implements StreamVolumeManager.Listener {
 
-    @C.StreamType private int lastStreamType;
+    private @C.StreamType int lastStreamType;
     private int lastStreamVolume;
     private boolean lastStreamVolumeMuted;
     public final CountDownLatch onStreamVolumeChangedLatch;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/DecoderReuseEvaluation.java
Patch:
@@ -125,13 +125,13 @@ public final class DecoderReuseEvaluation {
   public final Format newFormat;
 
   /** The {@link DecoderReuseResult result} of the evaluation. */
-  @DecoderReuseResult public final int result;
+  public final @DecoderReuseResult int result;
 
   /**
    * {@link DecoderDiscardReasons Reasons} why the decoder cannot be reused. Always {@code 0} if
    * reuse is possible. May also be {code 0} if reuse is not possible for an unspecified reason.
    */
-  @DecoderDiscardReasons public final int discardReasons;
+  public final @DecoderDiscardReasons int discardReasons;
 
   /**
    * @param decoderName The name of the decoder.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/DefaultRenderersFactory.java
Patch:
@@ -95,7 +95,7 @@ public class DefaultRenderersFactory implements RenderersFactory {
 
   private final Context context;
   private final DefaultMediaCodecAdapterFactory codecAdapterFactory;
-  @ExtensionRendererMode private int extensionRendererMode;
+  private @ExtensionRendererMode int extensionRendererMode;
   private long allowedVideoJoiningTimeMs;
   private boolean enableDecoderFallback;
   private MediaCodecSelector mediaCodecSelector;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlaybackException.java
Patch:
@@ -85,7 +85,7 @@ public final class ExoPlaybackException extends PlaybackException {
   @UnstableApi public static final int TYPE_REMOTE = 3;
 
   /** The {@link Type} of the playback failure. */
-  @UnstableApi @Type public final int type;
+  @UnstableApi public final @Type int type;
 
   /** If {@link #type} is {@link #TYPE_RENDERER}, this is the name of the renderer. */
   @UnstableApi @Nullable public final String rendererName;
@@ -104,7 +104,7 @@ public final class ExoPlaybackException extends PlaybackException {
    * renderer for {@link #rendererFormat}. If {@link #rendererFormat} is null, this is {@link
    * C#FORMAT_HANDLED}.
    */
-  @UnstableApi @FormatSupport public final int rendererFormatSupport;
+  @UnstableApi public final @FormatSupport int rendererFormatSupport;
 
   /** The {@link MediaPeriodId} of the media associated with this error, or null if undetermined. */
   @UnstableApi @Nullable public final MediaPeriodId mediaPeriodId;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoTimeoutException.java
Patch:
@@ -62,7 +62,7 @@ public final class ExoTimeoutException extends RuntimeException {
   public static final int TIMEOUT_OPERATION_DETACH_SURFACE = 3;
 
   /** The operation on the ExoPlayer playback thread that timed out. */
-  @TimeoutOperation public final int timeoutOperation;
+  public final @TimeoutOperation int timeoutOperation;
 
   /**
    * Creates the timeout exception.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/PlaybackInfo.java
Patch:
@@ -55,7 +55,7 @@
   /** The start position after a reported position discontinuity, in microseconds. */
   public final long discontinuityStartPositionUs;
   /** The current playback state. One of the {@link Player}.STATE_ constants. */
-  @Player.State public final int playbackState;
+  public final @Player.State int playbackState;
   /** The current playback error, or null if this is not an error state. */
   @Nullable public final ExoPlaybackException playbackError;
   /** Whether the player is currently loading. */
@@ -71,7 +71,7 @@
   /** Whether playback should proceed when {@link #playbackState} == {@link Player#STATE_READY}. */
   public final boolean playWhenReady;
   /** Reason why playback is suppressed even though {@link #playWhenReady} is {@code true}. */
-  @PlaybackSuppressionReason public final int playbackSuppressionReason;
+  public final @PlaybackSuppressionReason int playbackSuppressionReason;
   /** The playback parameters. */
   public final PlaybackParameters playbackParameters;
   /** Whether offload scheduling is enabled for the main player loop. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/StreamVolumeManager.java
Patch:
@@ -55,7 +55,7 @@ public interface Listener {
   private final AudioManager audioManager;
 
   @Nullable private VolumeChangeReceiver receiver;
-  @C.StreamType private int streamType;
+  private @C.StreamType int streamType;
   private int volume;
   private boolean muted;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/AnalyticsListener.java
Patch:
@@ -150,8 +150,7 @@ public int size() {
      * @param index The index. Must be between 0 (inclusive) and {@link #size()} (exclusive).
      * @return The {@link EventFlags event} at the given index.
      */
-    @EventFlags
-    public int get(int index) {
+    public @EventFlags int get(int index) {
       return flags.get(index);
     }
   }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/MediaMetricsListener.java
Patch:
@@ -120,7 +120,7 @@ public static MediaMetricsListener create(Context context) {
 
   @Nullable private String activeSessionId;
   @Nullable private PlaybackMetrics.Builder metricsBuilder;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int currentPlaybackState;
   private int currentNetworkType;
   @Nullable private PlaybackException pendingPlayerError;
@@ -887,7 +887,7 @@ public ErrorInfo(int errorCode, int subErrorCode) {
   private static final class PendingFormatUpdate {
 
     public final Format format;
-    @C.SelectionReason public final int selectionReason;
+    public final @C.SelectionReason int selectionReason;
     public final String sessionId;
 
     public PendingFormatUpdate(

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/PlaybackStatsListener.java
Patch:
@@ -84,7 +84,7 @@ public interface Callback {
 
   @Nullable private String discontinuityFromSession;
   private long discontinuityFromPositionMs;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int droppedFrames;
   @Nullable private Exception nonFatalException;
   private long bandwidthTimeMs;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioProcessor.java
Patch:
@@ -45,7 +45,7 @@ final class AudioFormat {
     /** The number of interleaved channels. */
     public final int channelCount;
     /** The type of linear PCM encoding. */
-    @C.PcmEncoding public final int encoding;
+    public final @C.PcmEncoding int encoding;
     /** The number of bytes used to represent one audio frame. */
     public final int bytesPerFrame;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/ForwardingAudioSink.java
Patch:
@@ -50,8 +50,7 @@ public boolean supportsFormat(Format format) {
   }
 
   @Override
-  @SinkFormatSupport
-  public int getFormatSupport(Format format) {
+  public @SinkFormatSupport int getFormatSupport(Format format) {
     return sink.getFormatSupport(format);
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/MediaCodecAudioRenderer.java
Patch:
@@ -286,8 +286,7 @@ public void experimentalSetEnableKeepAudioTrackOnSeek(boolean enableKeepAudioTra
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     if (!MimeTypes.isAudio(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/SilenceSkippingAudioProcessor.java
Patch:
@@ -88,7 +88,7 @@ public final class SilenceSkippingAudioProcessor extends BaseAudioProcessor {
    */
   private byte[] paddingBuffer;
 
-  @State private int state;
+  private @State int state;
   private int maybeSilenceBufferSize;
   private int paddingSize;
   private boolean hasOutputNoise;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/SpatializerDelegate.java
Patch:
@@ -129,8 +129,7 @@ public boolean isAvailable() {
   }
 
   /** Delegates to Spatializer.getImmersiveAudioLevel() */
-  @ImmersiveAudioLevel
-  public int getImmersiveAudioLevel() {
+  public @ImmersiveAudioLevel int getImmersiveAudioLevel() {
     try {
       return (int) Util.castNonNull(getImmersiveAudioLevel.invoke(spatializer));
     } catch (IllegalAccessException | InvocationTargetException e) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/TeeAudioProcessor.java
Patch:
@@ -128,7 +128,7 @@ public static final class WavFileAudioBufferSink implements AudioBufferSink {
 
     private int sampleRateHz;
     private int channelCount;
-    @C.PcmEncoding private int encoding;
+    private @C.PcmEncoding int encoding;
     @Nullable private RandomAccessFile randomAccessFile;
     private int counter;
     private int bytesWritten;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/TrimmingAudioProcessor.java
Patch:
@@ -25,7 +25,7 @@
 /** Audio processor for trimming samples from the start/end of data. */
 /* package */ final class TrimmingAudioProcessor extends BaseAudioProcessor {
 
-  @C.PcmEncoding private static final int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
 
   private int trimStartFrames;
   private int trimEndFrames;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DefaultDrmSession.java
Patch:
@@ -254,8 +254,7 @@ public void onProvisionError(Exception error, boolean thrownByExoMediaDrm) {
   // DrmSession implementation.
 
   @Override
-  @DrmSession.State
-  public final int getState() {
+  public final @DrmSession.State int getState() {
     return state;
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DefaultDrmSessionManager.java
Patch:
@@ -312,7 +312,7 @@ private MissingSchemeDataException(UUID uuid) {
   @Nullable private byte[] offlineLicenseKeySetId;
   private @MonotonicNonNull PlayerId playerId;
 
-  /* package */ volatile @Nullable MediaDrmHandler mediaDrmHandler;
+  /* package */ @Nullable volatile MediaDrmHandler mediaDrmHandler;
 
   /**
    * @param uuid The UUID of the drm scheme.
@@ -590,8 +590,7 @@ private DrmSession acquireSession(
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType(Format format) {
+  public @C.CryptoType int getCryptoType(Format format) {
     @C.CryptoType int cryptoType = checkNotNull(exoMediaDrm).getCryptoType();
     if (format.drmInitData == null) {
       int trackType = MimeTypes.getTrackType(format.sampleMimeType);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DrmSession.java
Patch:
@@ -65,7 +65,7 @@ static void replaceSession(
   class DrmSessionException extends IOException {
 
     /** The {@link PlaybackException.ErrorCode} that corresponds to the failure. */
-    @PlaybackException.ErrorCode public final int errorCode;
+    public final @PlaybackException.ErrorCode int errorCode;
 
     public DrmSessionException(Throwable cause, @PlaybackException.ErrorCode int errorCode) {
       super(cause);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DrmSessionManager.java
Patch:
@@ -66,8 +66,7 @@ public DrmSession acquireSession(
         }
 
         @Override
-        @C.CryptoType
-        public int getCryptoType(Format format) {
+        public @C.CryptoType int getCryptoType(Format format) {
           return format.drmInitData != null ? C.CRYPTO_TYPE_UNSUPPORTED : C.CRYPTO_TYPE_NONE;
         }
       };

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DummyExoMediaDrm.java
Patch:
@@ -153,8 +153,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) {
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_UNSUPPORTED;
   }
 }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/ExoMediaDrm.java
Patch:
@@ -267,7 +267,7 @@ final class KeyRequest {
 
     private final byte[] data;
     private final String licenseServerUrl;
-    @RequestType private final int requestType;
+    private final @RequestType int requestType;
 
     /**
      * Creates an instance with {@link #REQUEST_TYPE_UNKNOWN}.
@@ -307,8 +307,7 @@ public String getLicenseServerUrl() {
      * request does not specify a type. Note that when using a platform {@link MediaDrm} instance,
      * key requests only specify a type on API levels 23 and above.
      */
-    @RequestType
-    public int getRequestType() {
+    public @RequestType int getRequestType() {
       return requestType;
     }
   }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/FrameworkMediaDrm.java
Patch:
@@ -342,8 +342,7 @@ public FrameworkCryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCr
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_FRAMEWORK;
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/UnsupportedDrmException.java
Patch:
@@ -49,7 +49,7 @@ public final class UnsupportedDrmException extends Exception {
   public static final int REASON_INSTANTIATION_ERROR = 2;
 
   /** Either {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
-  @Reason public final int reason;
+  public final @Reason int reason;
 
   /** @param reason {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
   public UnsupportedDrmException(@Reason int reason) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/WidevineUtil.java
Patch:
@@ -39,7 +39,8 @@ private WidevineUtil() {}
    * @return A {@link Pair} consisting of the remaining license and playback durations in seconds,
    *     or null if called before the session has been opened or after it's been released.
    */
-  public static @Nullable Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
+  @Nullable
+  public static Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
     Map<String, String> keyStatus = drmSession.queryKeyStatus();
     if (keyStatus == null) {
       return null;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -141,7 +141,7 @@ public AsynchronousMediaCodecAdapter createAdapter(Configuration configuration)
   private final boolean synchronizeCodecInteractionsWithQueueing;
   private final boolean enableImmediateCodecStartAfterFlush;
   private boolean codecReleased;
-  @State private int state;
+  private @State int state;
 
   private AsynchronousMediaCodecAdapter(
       MediaCodec codec,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/DefaultMediaCodecAdapterFactory.java
Patch:
@@ -53,7 +53,7 @@ public final class DefaultMediaCodecAdapterFactory implements MediaCodecAdapter.
 
   private static final String TAG = "DMCodecAdapterFactory";
 
-  @Mode private int asynchronousMode;
+  private @Mode int asynchronousMode;
   private boolean enableSynchronizeCodecInteractionsWithQueueing;
   private boolean enableImmediateCodecStartAfterFlush;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/metadata/MetadataRenderer.java
Patch:
@@ -94,8 +94,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/Download.java
Patch:
@@ -99,7 +99,7 @@ public final class Download {
   /** The download request. */
   public final DownloadRequest request;
   /** The state of the download. */
-  @State public final int state;
+  public final @State int state;
   /** The first time when download entry is created. */
   public final long startTimeMs;
   /** The last update time. */
@@ -112,7 +112,7 @@ public final class Download {
    * If {@link #state} is {@link #STATE_FAILED} then this is the cause, otherwise {@link
    * #FAILURE_REASON_NONE}.
    */
-  @FailureReason public final int failureReason;
+  public final @FailureReason int failureReason;
 
   /* package */ final DownloadProgress progress;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadHelper.java
Patch:
@@ -1100,8 +1100,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    @C.SelectionReason
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadManager.java
Patch:
@@ -351,8 +351,7 @@ public Requirements getRequirements() {
    *
    * @return The not met {@link Requirements.RequirementFlags}, or 0 if all requirements are met.
    */
-  @Requirements.RequirementFlags
-  public int getNotMetRequirements() {
+  public @Requirements.RequirementFlags int getNotMetRequirements() {
     return notMetRequirements;
   }
 
@@ -705,7 +704,7 @@ private static final class InternalHandler extends Handler {
     private final ArrayList<Download> downloads;
     private final HashMap<String, Task> activeTasks;
 
-    @Requirements.RequirementFlags private int notMetRequirements;
+    private @Requirements.RequirementFlags int notMetRequirements;
     private boolean downloadsPaused;
     private int maxParallelDownloads;
     private int minRetryCount;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/scheduler/RequirementsWatcher.java
Patch:
@@ -62,7 +62,7 @@ void onRequirementsStateChanged(
 
   @Nullable private DeviceStatusChangeReceiver receiver;
 
-  @Requirements.RequirementFlags private int notMetRequirements;
+  private @Requirements.RequirementFlags int notMetRequirements;
   @Nullable private NetworkCallback networkCallback;
 
   /**
@@ -83,8 +83,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
    *
    * @return Initial {@link Requirements.RequirementFlags RequirementFlags} that are not met, or 0.
    */
-  @Requirements.RequirementFlags
-  public int start() {
+  public @Requirements.RequirementFlags int start() {
     notMetRequirements = requirements.getNotMetRequirements(context);
 
     IntentFilter filter = new IntentFilter();

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ClippingMediaSource.java
Patch:
@@ -63,7 +63,7 @@ public static final class IllegalClippingException extends IOException {
     public static final int REASON_START_EXCEEDS_END = 2;
 
     /** The reason clipping failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason clipping failed. */
     public IllegalClippingException(@Reason int reason) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/DefaultMediaSourceFactory.java
Patch:
@@ -472,8 +472,7 @@ public DelegateFactoryLoader(
       mediaSourceFactories = new HashMap<>();
     }
 
-    @C.ContentType
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       ensureAllSuppliersAreLoaded();
       return Ints.toArray(supportedTypes);
     }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MediaLoadData.java
Patch:
@@ -28,7 +28,7 @@
 public final class MediaLoadData {
 
   /** The {@link DataType data type}. */
-  @DataType public final int dataType;
+  public final @DataType int dataType;
   /**
    * One of the {@link TrackType track types}, which is a media track type if the data corresponds
    * to media of a specific type, or {@link C#TRACK_TYPE_UNKNOWN} otherwise.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MediaSourceFactory.java
Patch:
@@ -47,8 +47,7 @@ public MediaSourceFactory setLoadErrorHandlingPolicy(
         }
 
         @Override
-        @C.ContentType
-        public int[] getSupportedTypes() {
+        public @C.ContentType int[] getSupportedTypes() {
           throw new UnsupportedOperationException();
         }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MergingMediaSource.java
Patch:
@@ -61,7 +61,7 @@ public static final class IllegalMergeException extends IOException {
     public static final int REASON_PERIOD_COUNT_MISMATCH = 0;
 
     /** The reason the merge failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason the merge failed. */
     public IllegalMergeException(@Reason int reason) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ProgressiveMediaPeriod.java
Patch:
@@ -131,7 +131,7 @@ interface Listener {
   private @MonotonicNonNull SeekMap seekMap;
   private long durationUs;
   private boolean isLive;
-  @DataType private int dataType;
+  private @DataType int dataType;
 
   private boolean seenFirstTrackSelection;
   private boolean notifyDiscontinuity;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/SilenceMediaSource.java
Patch:
@@ -87,7 +87,7 @@ public SilenceMediaSource createMediaSource() {
   public static final String MEDIA_ID = "SilenceMediaSource";
 
   private static final int SAMPLE_RATE_HZ = 44100;
-  @C.PcmEncoding private static final int PCM_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int PCM_ENCODING = C.ENCODING_PCM_16BIT;
   private static final int CHANNEL_COUNT = 2;
   private static final Format FORMAT =
       new Format.Builder()

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/chunk/Chunk.java
Patch:
@@ -42,15 +42,15 @@ public abstract class Chunk implements Loadable {
   /** The {@link DataSpec} that defines the data to be loaded. */
   public final DataSpec dataSpec;
   /** The {@link DataType data type} of the chunk. For reporting only. */
-  @DataType public final int type;
+  public final @DataType int type;
   /** The format of the track to which this chunk belongs. */
   public final Format trackFormat;
   /**
    * One of the {@link C.SelectionReason selection reasons} if the chunk belongs to a track. {@link
    * C#SELECTION_REASON_UNKNOWN} if the chunk does not belong to a track, or if the selection reason
    * is unknown.
    */
-  @C.SelectionReason public final int trackSelectionReason;
+  public final @C.SelectionReason int trackSelectionReason;
   /**
    * Optional data associated with the selection of the track to which this chunk belongs. Null if
    * the chunk does not belong to a track, or if there is no associated track selection data.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/mediaparser/OutputConsumerAdapterV30.java
Patch:
@@ -540,8 +540,7 @@ private static DrmInitData toExoPlayerDrmInitData(
     return new DrmInitData(schemeType, schemeDatas);
   }
 
-  @SelectionFlags
-  private static int getSelectionFlags(MediaFormat mediaFormat) {
+  private static @SelectionFlags int getSelectionFlags(MediaFormat mediaFormat) {
     int selectionFlags = 0;
     selectionFlags |=
         getFlag(

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/ExoplayerCuesDecoder.java
Patch:
@@ -63,7 +63,7 @@ public final class ExoplayerCuesDecoder implements SubtitleDecoder {
   private final SubtitleInputBuffer inputBuffer;
   private final Deque<SubtitleOutputBuffer> availableOutputBuffers;
 
-  @InputBufferState private int inputBufferState;
+  private @InputBufferState int inputBufferState;
   private boolean released;
 
   public ExoplayerCuesDecoder() {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/TextRenderer.java
Patch:
@@ -94,7 +94,7 @@ public final class TextRenderer extends BaseRenderer implements Callback {
   private boolean inputStreamEnded;
   private boolean outputStreamEnded;
   private boolean waitingForKeyFrame;
-  @ReplacementState private int decoderReplacementState;
+  private @ReplacementState int decoderReplacementState;
   @Nullable private Format streamFormat;
   @Nullable private SubtitleDecoder decoder;
   @Nullable private SubtitleInputBuffer nextInputBuffer;
@@ -141,8 +141,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/DefaultBandwidthMeter.java
Patch:
@@ -281,14 +281,14 @@ public static synchronized DefaultBandwidthMeter getSingletonInstance(Context co
   private long sampleStartTimeMs;
   private long sampleBytesTransferred;
 
-  @C.NetworkType private int networkType;
+  private @C.NetworkType int networkType;
   private long totalElapsedTimeMs;
   private long totalBytesTransferred;
   private long bitrateEstimate;
   private long lastReportedBitrateEstimate;
 
   private boolean networkTypeOverrideSet;
-  @C.NetworkType private int networkTypeOverride;
+  private @C.NetworkType int networkTypeOverride;
 
   /** @deprecated Use {@link Builder} instead. */
   @Deprecated

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/LoadErrorHandlingPolicy.java
Patch:
@@ -130,7 +130,7 @@ public boolean isFallbackAvailable(@FallbackType int type) {
   /** A selected fallback option. */
   final class FallbackSelection {
     /** The type of fallback. */
-    @FallbackType public final int type;
+    public final @FallbackType int type;
     /** The duration for which the failing resource should be excluded, in milliseconds. */
     public final long exclusionDurationMs;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/ParsingLoadable.java
Patch:
@@ -104,7 +104,7 @@ public static <T> T load(
   private final StatsDataSource dataSource;
   private final Parser<? extends T> parser;
 
-  private volatile @Nullable T result;
+  @Nullable private volatile T result;
 
   /**
    * @param dataSource A {@link DataSource} to use when loading the data.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/DecoderVideoRenderer.java
Patch:
@@ -121,7 +121,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
 
   private DecoderInputBuffer inputBuffer;
   private VideoDecoderOutputBuffer outputBuffer;
-  @VideoOutputMode private int outputMode;
+  private @VideoOutputMode int outputMode;
   @Nullable private Object output;
   @Nullable private Surface outputSurface;
   @Nullable private VideoDecoderOutputBufferRenderer outputBufferRenderer;
@@ -130,7 +130,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
   @Nullable private DrmSession decoderDrmSession;
   @Nullable private DrmSession sourceDrmSession;
 
-  @ReinitializationState private int decoderReinitializationState;
+  private @ReinitializationState int decoderReinitializationState;
   private boolean decoderReceivedBuffers;
 
   private boolean renderedFirstFrameAfterReset;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/DummySurface.java
Patch:
@@ -105,8 +105,7 @@ public void release() {
     }
   }
 
-  @SecureMode
-  private static int getSecureMode(Context context) {
+  private static @SecureMode int getSecureMode(Context context) {
     if (GlUtil.isProtectedContentExtensionSupported(context)) {
       if (GlUtil.isSurfacelessContextExtensionSupported()) {
         return SECURE_MODE_SURFACELESS_CONTEXT;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/MediaCodecVideoRenderer.java
Patch:
@@ -131,7 +131,7 @@ public class MediaCodecVideoRenderer extends MediaCodecRenderer {
   @Nullable private Surface surface;
   @Nullable private DummySurface dummySurface;
   private boolean haveReportedFirstFrameRenderedForCurrentSurface;
-  @C.VideoScalingMode private int scalingMode;
+  private @C.VideoScalingMode int scalingMode;
   private boolean renderedFirstFrameAfterReset;
   private boolean mayRenderFirstFrameAfterEnableIfNotStarted;
   private boolean renderedFirstFrameAfterEnable;
@@ -342,8 +342,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     String mimeType = format.sampleMimeType;
     if (!MimeTypes.isVideo(mimeType)) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/VideoFrameReleaseHelper.java
Patch:
@@ -111,7 +111,7 @@ public final class VideoFrameReleaseHelper {
   private float surfacePlaybackFrameRate;
 
   private float playbackSpeed;
-  @C.VideoChangeFrameRateStrategy private int changeFrameRateStrategy;
+  private @C.VideoChangeFrameRateStrategy int changeFrameRateStrategy;
 
   private long vsyncDurationNs;
   private long vsyncOffsetNs;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/spherical/CameraMotionRenderer.java
Patch:
@@ -58,8 +58,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     return MimeTypes.APPLICATION_CAMERA_MOTION.equals(format.sampleMimeType)
         ? RendererCapabilities.create(C.FORMAT_HANDLED)
         : RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/spherical/SceneRenderer.java
Patch:
@@ -50,8 +50,8 @@
   private @MonotonicNonNull SurfaceTexture surfaceTexture;
 
   // Used by other threads only
-  @C.StereoMode private volatile int defaultStereoMode;
-  @C.StereoMode private int lastStereoMode;
+  private volatile @C.StereoMode int defaultStereoMode;
+  private @C.StereoMode int lastStereoMode;
   @Nullable private byte[] lastProjectionData;
 
   // Methods called on any thread.

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/ExoPlayerTest.java
Patch:
@@ -11488,7 +11488,7 @@ public void handleMessage(ExoPlayer player, int messageType, @Nullable Object me
   private static final class PlayerStateGrabber extends PlayerRunnable {
 
     public boolean playWhenReady;
-    @Player.State public int playbackState;
+    public @Player.State int playbackState;
     @Nullable public Timeline timeline;
 
     @Override

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/audio/DecoderAudioRendererTest.java
Patch:
@@ -71,8 +71,7 @@ public String getName() {
           }
 
           @Override
-          @C.FormatSupport
-          protected int supportsFormatInternal(Format format) {
+          protected @C.FormatSupport int supportsFormatInternal(Format format) {
             return FORMAT_HANDLED;
           }
 

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/video/DecoderVideoRendererTest.java
Patch:
@@ -84,16 +84,15 @@ public void setUp() {
             /* maxDroppedFramesToNotify= */ -1) {
 
           private final Phaser inputBuffersInCodecPhaser = new Phaser();
-          @C.VideoOutputMode private int outputMode;
+          private @C.VideoOutputMode int outputMode;
 
           @Override
           public String getName() {
             return "TestVideoRenderer";
           }
 
           @Override
-          @Capabilities
-          public int supportsFormat(Format format) {
+          public @Capabilities int supportsFormat(Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/video/MediaCodecVideoRendererTest.java
Patch:
@@ -111,8 +111,8 @@ public void setUp() throws Exception {
             /* eventListener= */ eventListener,
             /* maxDroppedFramesToNotify= */ 1) {
           @Override
-          @Capabilities
-          protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format) {
+          protected @Capabilities int supportsFormat(
+              MediaCodecSelector mediaCodecSelector, Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/DashMediaPeriod.java
Patch:
@@ -937,7 +937,7 @@ private static final class TrackGroupInfo {
 
     public final int[] adaptationSetIndices;
     public final @C.TrackType int trackType;
-    @TrackGroupCategory public final int trackGroupCategory;
+    public final @TrackGroupCategory int trackGroupCategory;
 
     public final int eventStreamGroupIndex;
     public final int primaryTrackGroupIndex;

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -62,7 +62,7 @@ public final class DefaultHlsExtractorFactory implements HlsExtractorFactory {
         FileTypes.MP3,
       };
 
-  @DefaultTsPayloadReaderFactory.Flags private final int payloadReaderFactoryFlags;
+  private final @DefaultTsPayloadReaderFactory.Flags int payloadReaderFactoryFlags;
   private final boolean exposeCea608WhenMissingDeclarations;
 
   /**

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsChunkSource.java
Patch:
@@ -303,8 +303,7 @@ public long getAdjustedSeekPositionUs(long positionUs, SeekParameters seekParame
    *     has been {@link #CHUNK_PUBLICATION_STATE_REMOVED removed} or is definitely {@link
    *     #CHUNK_PUBLICATION_STATE_PUBLISHED published}.
    */
-  @ChunkPublicationState
-  public int getChunkPublicationState(HlsMediaChunk mediaChunk) {
+  public @ChunkPublicationState int getChunkPublicationState(HlsMediaChunk mediaChunk) {
     if (mediaChunk.partIndex == C.INDEX_UNSET) {
       // Chunks based on full segments can't be removed and are always published.
       return CHUNK_PUBLICATION_STATE_PUBLISHED;

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/playlist/HlsMediaPlaylist.java
Patch:
@@ -398,7 +398,7 @@ public RenditionReport(Uri playlistUri, long lastMediaSequence, int lastPartInde
   public static final int PLAYLIST_TYPE_EVENT = 2;
 
   /** The type of the playlist. See {@link PlaylistType}. */
-  @PlaylistType public final int playlistType;
+  public final @PlaylistType int playlistType;
   /**
    * The start offset in microseconds from the beginning of the playlist, as defined by
    * #EXT-X-START, or {@link C#TIME_UNSET} if undefined. The value is guaranteed to be between 0 and

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/AdTagLoader.java
Patch:
@@ -162,7 +162,7 @@
   /** Whether IMA has sent an ad event to pause content since the last resume content event. */
   private boolean imaPausedContent;
   /** The current ad playback state. */
-  @ImaAdState private int imaAdState;
+  private @ImaAdState int imaAdState;
   /** The current ad media info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */
   @Nullable private AdMediaInfo imaAdMediaInfo;
   /** The current ad info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ServerSideAdInsertionStreamRequest.java
Patch:
@@ -51,7 +51,7 @@ public static final class Builder {
     @Nullable private String authToken;
     @Nullable private String streamActivityMonitorId;
     private ImmutableMap<String, String> adTagParameters;
-    @ContentType public int format = C.TYPE_HLS;
+    public @ContentType int format = C.TYPE_HLS;
     private int loadVideoTimeoutMs;
 
     /** Creates a new instance. */
@@ -270,7 +270,7 @@ public ServerSideAdInsertionStreamRequest build() {
   @Nullable public final String contentUrl;
   @Nullable public final String authToken;
   @Nullable public final String streamActivityMonitorId;
-  @ContentType public int format = C.TYPE_HLS;
+  public @ContentType int format = C.TYPE_HLS;
   public final int loadVideoTimeoutMs;
 
   private ServerSideAdInsertionStreamRequest(

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspAuthenticationInfo.java
Patch:
@@ -56,7 +56,7 @@
   private static final String ALGORITHM = "MD5";
 
   /** The authentication mechanism. */
-  @AuthenticationMechanism public final int authenticationMechanism;
+  public final @AuthenticationMechanism int authenticationMechanism;
   /** The authentication realm. */
   public final String realm;
   /** The nonce used in digest authentication; empty if using {@link #BASIC} authentication. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspClient.java
Patch:
@@ -141,7 +141,7 @@ public interface PlaybackEventListener {
   @Nullable private String sessionId;
   @Nullable private KeepAliveMonitor keepAliveMonitor;
   @Nullable private RtspAuthenticationInfo rtspAuthenticationInfo;
-  @RtspState private int rtspState;
+  private @RtspState int rtspState;
   private boolean hasUpdatedTimelineAndTracks;
   private boolean receivedAuthorizationRequest;
   private boolean hasPendingPauseRequest;
@@ -204,8 +204,7 @@ public void start() throws IOException {
   }
 
   /** Returns the current {@link RtspState RTSP state}. */
-  @RtspState
-  public int getState() {
+  public @RtspState int getState() {
     return rtspState;
   }
 

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaPeriod.java
Patch:
@@ -775,8 +775,7 @@ public boolean isSampleQueueReady() {
       return sampleQueue.isReady(/* loadingFinished= */ canceled);
     }
 
-    @ReadDataResult
-    public int read(
+    public @ReadDataResult int read(
         FormatHolder formatHolder, DecoderInputBuffer buffer, @ReadFlags int readFlags) {
       return sampleQueue.read(formatHolder, buffer, readFlags, /* loadingFinished= */ canceled);
     }

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMessageChannel.java
Patch:
@@ -353,7 +353,7 @@ private static final class MessageParser {
 
     private final List<String> messageLines;
 
-    @ReadingState private int state;
+    private @ReadingState int state;
     private long messageBodyLength;
 
     /** Creates a new instance. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMessageUtil.java
Patch:
@@ -256,8 +256,7 @@ public static String toMethodString(@RtspRequest.Method int method) {
     }
   }
 
-  @RtspRequest.Method
-  private static int parseMethodString(String method) {
+  private static @RtspRequest.Method int parseMethodString(String method) {
     switch (method) {
       case "ANNOUNCE":
         return METHOD_ANNOUNCE;

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspRequest.java
Patch:
@@ -88,7 +88,7 @@
   /** The {@link Uri} to which this request is sent. */
   public final Uri uri;
   /** The request method, as defined in {@link Method}. */
-  @Method public final int method;
+  public final @Method int method;
   /** The headers of this request. */
   public final RtspHeaders headers;
   /** The body of this RTSP message, or empty string if absent. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/RtpH264Reader.java
Patch:
@@ -58,7 +58,7 @@
   private final RtpPayloadFormat payloadFormat;
 
   private @MonotonicNonNull TrackOutput trackOutput;
-  @C.BufferFlags private int bufferFlags;
+  private @C.BufferFlags int bufferFlags;
 
   private long firstReceivedTimestamp;
   private int previousSequenceNumber;
@@ -296,8 +296,7 @@ private static long toSampleUs(
             /* divisor= */ MEDIA_CLOCK_FREQUENCY);
   }
 
-  @C.BufferFlags
-  private static int getBufferFlagsFromNalType(int nalType) {
+  private static @C.BufferFlags int getBufferFlagsFromNalType(int nalType) {
     return nalType == NAL_UNIT_TYPE_IDR ? C.BUFFER_FLAG_KEY_FRAME : 0;
   }
 }

File: libraries/extractor/src/main/java/androidx/media3/extractor/BinarySearchSeeker.java
Patch:
@@ -423,7 +423,7 @@ public static final class TimestampSearchResult {
         new TimestampSearchResult(TYPE_NO_TIMESTAMP, C.TIME_UNSET, C.POSITION_UNSET);
 
     /** The type of the result. */
-    @Type private final int type;
+    private final @Type int type;
 
     /**
      * When {@link #type} is {@link #TYPE_POSITION_OVERESTIMATED}, the {@link

File: libraries/extractor/src/main/java/androidx/media3/extractor/TrackOutput.java
Patch:
@@ -40,7 +40,7 @@ public interface TrackOutput {
   final class CryptoData {
 
     /** The encryption mode used for the sample. */
-    @C.CryptoMode public final int cryptoMode;
+    public final @C.CryptoMode int cryptoMode;
 
     /** The encryption key associated with the sample. Its contents must not be modified. */
     public final byte[] encryptionKey;

File: libraries/extractor/src/main/java/androidx/media3/extractor/TrueHdSampleRechunker.java
Patch:
@@ -33,7 +33,7 @@ public final class TrueHdSampleRechunker {
   private boolean foundSyncframe;
   private int chunkSampleCount;
   private long chunkTimeUs;
-  @C.BufferFlags private int chunkFlags;
+  private @C.BufferFlags int chunkFlags;
   private int chunkSize;
   private int chunkOffset;
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/jpeg/JpegExtractor.java
Patch:
@@ -84,7 +84,7 @@ public final class JpegExtractor implements Extractor {
 
   private @MonotonicNonNull ExtractorOutput extractorOutput;
 
-  @State private int state;
+  private @State int state;
   private int marker;
   private int segmentLength;
   private long mp4StartPosition;
@@ -128,8 +128,8 @@ public void init(ExtractorOutput output) {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     switch (state) {
       case STATE_READING_MARKER:
         readMarker(input);

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp3/Mp3Extractor.java
Patch:
@@ -142,7 +142,7 @@ public final class Mp3Extractor implements Extractor {
   private static final int SEEK_HEADER_VBRI = 0x56425249;
   private static final int SEEK_HEADER_UNSET = 0;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final long forcedFirstSampleTimestampUs;
   private final ParsableByteArray scratch;
   private final MpegAudioUtil.Header synchronizedHeader;

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/AtomParsers.java
Patch:
@@ -1910,7 +1910,7 @@ private static final class StsdData {
 
     @Nullable public Format format;
     public int nalUnitLengthFieldLength;
-    @Track.Transformation public int requiredSampleTransformation;
+    public @Track.Transformation int requiredSampleTransformation;
 
     public StsdData(int numberOfEntries) {
       trackEncryptionBoxes = new TrackEncryptionBox[numberOfEntries];

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -132,7 +132,7 @@ public class FragmentedMp4Extractor implements Extractor {
   private static final int STATE_READING_SAMPLE_CONTINUE = 4;
 
   // Workarounds.
-  @Flags private final int flags;
+  private final @Flags int flags;
   @Nullable private final Track sideloadedTrack;
 
   // Sideloaded data.
@@ -1689,8 +1689,7 @@ public int getCurrentSampleSize() {
     }
 
     /** Returns the {@link C.BufferFlags} corresponding to the current sample. */
-    @C.BufferFlags
-    public int getCurrentSampleFlags() {
+    public @C.BufferFlags int getCurrentSampleFlags() {
       int flags =
           !currentlyInFragment
               ? moovSampleTable.flags[currentSampleIndex]

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/Track.java
Patch:
@@ -69,7 +69,7 @@ public final class Track {
    * One of {@code TRANSFORMATION_*}. Defines the transformation to apply before outputting each
    * sample.
    */
-  @Transformation public final int sampleTransformation;
+  public final @Transformation int sampleTransformation;
 
   /** Durations of edit list segments in the movie timescale. Null if there is no edit list. */
   @Nullable public final long[] editListDurations;

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/TrackEncryptionBox.java
Patch:
@@ -79,8 +79,7 @@ public TrackEncryptionBox(
             schemeToCryptoMode(schemeType), keyId, defaultEncryptedBlocks, defaultClearBlocks);
   }
 
-  @C.CryptoMode
-  private static int schemeToCryptoMode(@Nullable String schemeType) {
+  private static @C.CryptoMode int schemeToCryptoMode(@Nullable String schemeType) {
     if (schemeType == null) {
       // If unknown, assume cenc.
       return C.CRYPTO_MODE_AES_CTR;

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/SubtitleExtractor.java
Patch:
@@ -87,7 +87,7 @@ public class SubtitleExtractor implements Extractor {
   private @MonotonicNonNull ExtractorOutput extractorOutput;
   private @MonotonicNonNull TrackOutput trackOutput;
   private int bytesRead;
-  @State private int state;
+  private @State int state;
   private long seekTimeUs;
 
   /**

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/ttml/TextEmphasis.java
Patch:
@@ -97,13 +97,13 @@
           TtmlNode.ANNOTATION_POSITION_OUTSIDE);
 
   /** The text emphasis mark shape. */
-  @MarkShape public final int markShape;
+  public final @MarkShape int markShape;
 
   /** The fill style of the text emphasis mark. */
-  @TextEmphasisSpan.MarkFill public final int markFill;
+  public final @TextEmphasisSpan.MarkFill int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @Position public final int position;
+  public final @Position int position;
 
   private TextEmphasis(
       @MarkShape int markShape,

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/Ac3Reader.java
Patch:
@@ -62,7 +62,7 @@ public final class Ac3Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/Ac4Reader.java
Patch:
@@ -60,7 +60,7 @@ public final class Ac4Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/DefaultTsPayloadReaderFactory.java
Patch:
@@ -104,7 +104,7 @@ public final class DefaultTsPayloadReaderFactory implements TsPayloadReader.Fact
 
   private static final int DESCRIPTOR_TAG_CAPTION_SERVICE = 0x86;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final List<Format> closedCaptionFormats;
 
   public DefaultTsPayloadReaderFactory() {

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/H263Reader.java
Patch:
@@ -335,7 +335,7 @@ private static final class CsdBuffer {
     private static final int STATE_WAIT_FOR_VOP_START = 4;
 
     private boolean isFilling;
-    @State private int state;
+    private @State int state;
 
     public int length;
     public int volStartPosition;

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/TsExtractor.java
Patch:
@@ -118,7 +118,7 @@ public final class TsExtractor implements Extractor {
   private static final int BUFFER_SIZE = TS_PACKET_SIZE * 50;
   private static final int SNIFF_TS_PACKET_COUNT = 5;
 
-  @Mode private final int mode;
+  private final @Mode int mode;
   private final int timestampSearchBytes;
   private final List<TimestampAdjuster> timestampAdjusters;
   private final ParsableByteArray tsPacketBuffer;
@@ -298,8 +298,8 @@ public void release() {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     long inputLength = input.getLength();
     if (tracksEnded) {
       boolean canReadDuration = inputLength != C.LENGTH_UNSET && mode != MODE_HLS;

File: libraries/extractor/src/test/java/androidx/media3/extractor/mkv/DefaultEbmlReaderTest.java
Patch:
@@ -178,8 +178,7 @@ private static final class TestProcessor implements EbmlProcessor {
     private final List<String> events = new ArrayList<>();
 
     @Override
-    @EbmlProcessor.ElementType
-    public int getElementType(int id) {
+    public @EbmlProcessor.ElementType int getElementType(int id) {
       switch (id) {
         case ID_EBML:
         case ID_SEGMENT:

File: libraries/extractor/src/test/java/androidx/media3/extractor/text/ttml/TtmlStyleTest.java
Patch:
@@ -42,7 +42,7 @@ public final class TtmlStyleTest {
   private static final String FONT_FAMILY = "serif";
   @ColorInt private static final int FONT_COLOR = Color.WHITE;
   private static final float FONT_SIZE = 12.5f;
-  @TtmlStyle.FontSizeUnit private static final int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
+  private static final @TtmlStyle.FontSizeUnit int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
   @ColorInt private static final int BACKGROUND_COLOR = Color.BLACK;
   private static final int RUBY_TYPE = TtmlStyle.RUBY_TYPE_TEXT;
   private static final int RUBY_POSITION = TextAnnotation.POSITION_AFTER;

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/Action.java
Patch:
@@ -495,7 +495,7 @@ protected void doActionImpl(
   /** Calls {@link Player#setRepeatMode(int)}. */
   public static final class SetRepeatMode extends Action {
 
-    @Player.RepeatMode private final int repeatMode;
+    private final @Player.RepeatMode int repeatMode;
 
     /**
      * @param tag A tag to use for logging.
@@ -742,7 +742,7 @@ public static final class WaitForTimelineChanged extends Action {
 
     @Nullable private final Timeline expectedTimeline;
     private final boolean ignoreExpectedReason;
-    @Player.TimelineChangeReason private final int expectedReason;
+    private final @Player.TimelineChangeReason int expectedReason;
 
     /**
      * Creates action waiting for a timeline change for a given reason.
@@ -909,7 +909,7 @@ protected void doActionImpl(
    */
   public static final class WaitForPlaybackState extends Action {
 
-    @Player.State private final int targetPlaybackState;
+    private final @Player.State int targetPlaybackState;
 
     /**
      * @param tag A tag to use for logging.

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/CapturingAudioSink.java
Patch:
@@ -93,7 +93,7 @@ public void dump(Dumper dumper) {
 
   private static final class DumpableConfiguration implements Dumper.Dumpable {
 
-    @C.PcmEncoding private final int inputPcmEncoding;
+    private final @C.PcmEncoding int inputPcmEncoding;
     private final int inputChannelCount;
     private final int inputSampleRate;
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/DownloadBuilder.java
Patch:
@@ -47,7 +47,7 @@ public final class DownloadBuilder {
   @Nullable private String cacheKey;
   private byte[] customMetadata;
 
-  @Download.State private int state;
+  private @Download.State int state;
   private long startTimeMs;
   private long updateTimeMs;
   private long contentLength;

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/DumpFileAsserts.java
Patch:
@@ -72,7 +72,7 @@ public class DumpFileAsserts {
   /** Write output to folder {@code /storage/emulated/0/Android/data} of device. */
   private static final int WRITE_TO_DEVICE = 1 << 1;
 
-  @DumpFilesAction private static final int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
+  private static final @DumpFilesAction int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
 
   private DumpFileAsserts() {}
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeExoMediaDrm.java
Patch:
@@ -398,8 +398,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCryptoExcep
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return FakeCryptoConfig.TYPE;
   }
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeRenderer.java
Patch:
@@ -162,8 +162,7 @@ public boolean isEnded() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) throws ExoPlaybackException {
+  public @Capabilities int supportsFormat(Format format) throws ExoPlaybackException {
     int trackType = MimeTypes.getTrackType(format.sampleMimeType);
     return trackType != C.TRACK_TYPE_UNKNOWN && trackType == getTrackType()
         ? RendererCapabilities.create(C.FORMAT_HANDLED, ADAPTIVE_SEAMLESS, TUNNELING_NOT_SUPPORTED)

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeSampleStream.java
Patch:
@@ -295,7 +295,7 @@ private void maybeNotifyDownstreamFormat(long timeUs) {
 
   private static class SampleInfo {
     public final byte[] data;
-    @C.BufferFlags public final int flags;
+    public final @C.BufferFlags int flags;
     public final long timeUs;
 
     public SampleInfo(byte[] data, @C.BufferFlags int flags, long timeUs) {

File: libraries/test_utils_robolectric/src/main/java/androidx/media3/test/utils/robolectric/TestDownloadManagerListener.java
Patch:
@@ -44,7 +44,7 @@ public final class TestDownloadManagerListener implements DownloadManager.Listen
   private final ConditionVariable initializedCondition;
   private final ConditionVariable idleCondition;
 
-  @Download.FailureReason private int failureReason;
+  private @Download.FailureReason int failureReason;
 
   public TestDownloadManagerListener(DownloadManager downloadManager) {
     this.downloadManager = downloadManager;

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -542,7 +542,7 @@ public interface DebugViewProvider {
 
   @Nullable private MuxerWrapper muxerWrapper;
   @Nullable private ExoPlayer player;
-  @ProgressState private int progressState;
+  private @ProgressState int progressState;
 
   private Transformer(
       Context context,
@@ -743,8 +743,7 @@ public Looper getApplicationLooper() {
    * @return The {@link ProgressState}.
    * @throws IllegalStateException If this method is called from the wrong thread.
    */
-  @ProgressState
-  public int getProgress(ProgressHolder progressHolder) {
+  public @ProgressState int getProgress(ProgressHolder progressHolder) {
     verifyApplicationThread();
     if (progressState == PROGRESS_STATE_AVAILABLE) {
       Player player = checkNotNull(this.player);

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerBaseRenderer.java
Patch:
@@ -67,8 +67,7 @@ public TransformerBaseRenderer(
    * @return The {@link Capabilities} for this format.
    */
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     return RendererCapabilities.create(
         MimeTypes.getTrackType(format.sampleMimeType) == getTrackType()
             ? C.FORMAT_HANDLED

File: extensions/av1/src/main/java/com/google/android/exoplayer2/ext/av1/Gav1Decoder.java
Patch:
@@ -39,7 +39,7 @@ public final class Gav1Decoder
 
   private final long gav1DecoderContext;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a Gav1Decoder.

File: extensions/av1/src/main/java/com/google/android/exoplayer2/ext/av1/Libgav1VideoRenderer.java
Patch:
@@ -126,8 +126,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!MimeTypes.VIDEO_AV1.equalsIgnoreCase(format.sampleMimeType)
         || !Gav1Library.isAvailable()) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: extensions/ffmpeg/src/main/java/com/google/android/exoplayer2/ext/ffmpeg/FfmpegAudioDecoder.java
Patch:
@@ -41,7 +41,7 @@
 
   private final String codecName;
   @Nullable private final byte[] extraData;
-  @C.PcmEncoding private final int encoding;
+  private final @C.PcmEncoding int encoding;
   private final int outputBufferSize;
 
   private long nativeContext; // May be reassigned on resetting the codec.
@@ -158,8 +158,7 @@ public int getSampleRate() {
   }
 
   /** Returns the encoding of output audio. */
-  @C.PcmEncoding
-  public int getEncoding() {
+  public @C.PcmEncoding int getEncoding() {
     return encoding;
   }
 

File: extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/LibflacAudioRenderer.java
Patch:
@@ -77,8 +77,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     if (!FlacLibrary.isAvailable()
         || !MimeTypes.AUDIO_FLAC.equalsIgnoreCase(format.sampleMimeType)) {
       return C.FORMAT_UNSUPPORTED_TYPE;

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdTagLoader.java
Patch:
@@ -162,7 +162,7 @@
   /** Whether IMA has sent an ad event to pause content since the last resume content event. */
   private boolean imaPausedContent;
   /** The current ad playback state. */
-  @ImaAdState private int imaAdState;
+  private @ImaAdState int imaAdState;
   /** The current ad media info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */
   @Nullable private AdMediaInfo imaAdMediaInfo;
   /** The current ad info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ServerSideAdInsertionStreamRequest.java
Patch:
@@ -51,7 +51,7 @@ public static final class Builder {
     @Nullable private String authToken;
     @Nullable private String streamActivityMonitorId;
     private ImmutableMap<String, String> adTagParameters;
-    @ContentType public int format = C.TYPE_HLS;
+    public @ContentType int format = C.TYPE_HLS;
     private int loadVideoTimeoutMs;
 
     /** Creates a new instance. */
@@ -270,7 +270,7 @@ public ServerSideAdInsertionStreamRequest build() {
   @Nullable public final String contentUrl;
   @Nullable public final String authToken;
   @Nullable public final String streamActivityMonitorId;
-  @ContentType public int format = C.TYPE_HLS;
+  public @ContentType int format = C.TYPE_HLS;
   public final int loadVideoTimeoutMs;
 
   private ServerSideAdInsertionStreamRequest(

File: extensions/mediasession/src/main/java/com/google/android/exoplayer2/ext/mediasession/RepeatModeActionProvider.java
Patch:
@@ -26,13 +26,12 @@
 public final class RepeatModeActionProvider implements MediaSessionConnector.CustomActionProvider {
 
   /** The default repeat toggle modes. */
-  @RepeatModeUtil.RepeatToggleModes
-  public static final int DEFAULT_REPEAT_TOGGLE_MODES =
+  public static final @RepeatModeUtil.RepeatToggleModes int DEFAULT_REPEAT_TOGGLE_MODES =
       RepeatModeUtil.REPEAT_TOGGLE_MODE_ONE | RepeatModeUtil.REPEAT_TOGGLE_MODE_ALL;
 
   private static final String ACTION_REPEAT_MODE = "ACTION_EXO_REPEAT_MODE";
 
-  @RepeatModeUtil.RepeatToggleModes private final int repeatToggleModes;
+  private final @RepeatModeUtil.RepeatToggleModes int repeatToggleModes;
   private final CharSequence repeatAllDescription;
   private final CharSequence repeatOneDescription;
   private final CharSequence repeatOffDescription;

File: extensions/opus/src/main/java/com/google/android/exoplayer2/ext/opus/LibopusAudioRenderer.java
Patch:
@@ -78,8 +78,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     boolean drmIsSupported = OpusLibrary.supportsCryptoType(format.cryptoType);
     if (!OpusLibrary.isAvailable()
         || !MimeTypes.AUDIO_OPUS.equalsIgnoreCase(format.sampleMimeType)) {

File: extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/LibvpxVideoRenderer.java
Patch:
@@ -124,8 +124,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!VpxLibrary.isAvailable() || !MimeTypes.VIDEO_VP9.equalsIgnoreCase(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);
     }

File: extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/VpxDecoder.java
Patch:
@@ -47,7 +47,7 @@ public final class VpxDecoder
 
   @Nullable private ByteBuffer lastSupplementalData;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a VP9 decoder.

File: library/common/src/main/java/com/google/android/exoplayer2/BasePlayer.java
Patch:
@@ -382,8 +382,7 @@ public final long getContentDuration() {
         : timeline.getWindow(getCurrentMediaItemIndex(), window).getDurationMs();
   }
 
-  @RepeatMode
-  private int getRepeatModeForNavigation() {
+  private @RepeatMode int getRepeatModeForNavigation() {
     @RepeatMode int repeatMode = getRepeatMode();
     return repeatMode == REPEAT_MODE_ONE ? REPEAT_MODE_OFF : repeatMode;
   }

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -1215,8 +1215,8 @@ public static String getFormatSupportString(@FormatSupport int formatSupport) {
       replacement = "Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode)",
       imports = {"com.google.android.exoplayer2.util.Util"})
   @Deprecated
-  @PlaybackException.ErrorCode
-  public static int getErrorCodeForMediaDrmErrorCode(int mediaDrmErrorCode) {
+  public static @PlaybackException.ErrorCode int getErrorCodeForMediaDrmErrorCode(
+      int mediaDrmErrorCode) {
     return Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode);
   }
 }

File: library/common/src/main/java/com/google/android/exoplayer2/HeartRating.java
Patch:
@@ -78,7 +78,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_HEART;
+  private static final @RatingType int TYPE = RATING_TYPE_HEART;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: library/common/src/main/java/com/google/android/exoplayer2/MediaMetadata.java
Patch:
@@ -56,11 +56,11 @@ public static final class Builder {
     @Nullable private Rating userRating;
     @Nullable private Rating overallRating;
     @Nullable private byte[] artworkData;
-    @Nullable @PictureType private Integer artworkDataType;
+    @Nullable private @PictureType Integer artworkDataType;
     @Nullable private Uri artworkUri;
     @Nullable private Integer trackNumber;
     @Nullable private Integer totalTrackCount;
-    @Nullable @FolderType private Integer folderType;
+    @Nullable private @FolderType Integer folderType;
     @Nullable private Boolean isPlayable;
     @Nullable private Integer recordingYear;
     @Nullable private Integer recordingMonth;

File: library/common/src/main/java/com/google/android/exoplayer2/PercentageRating.java
Patch:
@@ -76,7 +76,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_PERCENTAGE;
+  private static final @RatingType int TYPE = RATING_TYPE_PERCENTAGE;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -686,8 +686,7 @@ final class Commands implements Bundleable {
     /** A builder for {@link Commands} instances. */
     public static final class Builder {
 
-      @Command
-      private static final int[] SUPPORTED_COMMANDS = {
+      private static final @Command int[] SUPPORTED_COMMANDS = {
         COMMAND_PLAY_PAUSE,
         COMMAND_PREPARE,
         COMMAND_STOP,

File: library/common/src/main/java/com/google/android/exoplayer2/StarRating.java
Patch:
@@ -102,7 +102,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_STAR;
+  private static final @RatingType int TYPE = RATING_TYPE_STAR;
   private static final int MAX_STARS_DEFAULT = 5;
 
   @Documented

File: library/common/src/main/java/com/google/android/exoplayer2/ThumbRating.java
Patch:
@@ -75,7 +75,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_THUMB;
+  private static final @RatingType int TYPE = RATING_TYPE_THUMB;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: library/common/src/main/java/com/google/android/exoplayer2/drm/DrmInitData.java
Patch:
@@ -51,7 +51,8 @@ public final class DrmInitData implements Comparator<SchemeData>, Parcelable {
    * @param mediaData DRM session acquisition data obtained from the media.
    * @return A {@link DrmInitData} obtained from merging a media manifest and a media stream.
    */
-  public static @Nullable DrmInitData createSessionCreationData(
+  @Nullable
+  public static DrmInitData createSessionCreationData(
       @Nullable DrmInitData manifestData, @Nullable DrmInitData mediaData) {
     ArrayList<SchemeData> result = new ArrayList<>();
     String schemeType = null;

File: library/common/src/main/java/com/google/android/exoplayer2/source/TrackGroup.java
Patch:
@@ -204,8 +204,7 @@ private static String normalizeLanguage(@Nullable String language) {
     return language == null || language.equals(C.LANGUAGE_UNDETERMINED) ? "" : language;
   }
 
-  @C.RoleFlags
-  private static int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
+  private static @C.RoleFlags int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
     // Treat trick-play and non-trick-play formats as compatible.
     return roleFlags | C.ROLE_FLAG_TRICK_PLAY;
   }

File: library/common/src/main/java/com/google/android/exoplayer2/source/ads/AdPlaybackState.java
Patch:
@@ -68,7 +68,7 @@ public static final class AdGroup implements Bundleable {
     /** The URI of each ad in the ad group. */
     public final @NullableType Uri[] uris;
     /** The state of each ad in the ad group. */
-    @AdState public final int[] states;
+    public final @AdState int[] states;
     /** The durations of each ad in the ad group, in microseconds. */
     public final long[] durationsUs;
     /**

File: library/common/src/main/java/com/google/android/exoplayer2/text/span/RubySpan.java
Patch:
@@ -36,7 +36,7 @@ public final class RubySpan implements LanguageFeatureSpan {
   public final String rubyText;
 
   /** The position of the ruby text relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public RubySpan(String rubyText, @TextAnnotation.Position int position) {
     this.rubyText = rubyText;

File: library/common/src/main/java/com/google/android/exoplayer2/text/span/TextEmphasisSpan.java
Patch:
@@ -81,13 +81,13 @@ public final class TextEmphasisSpan implements LanguageFeatureSpan {
   public static final int MARK_FILL_OPEN = 2;
 
   /** The mark shape used for text emphasis. */
-  @MarkShape public int markShape;
+  public @MarkShape int markShape;
 
   /** The mark fill for the text emphasis mark. */
-  @MarkShape public int markFill;
+  public @MarkShape int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public TextEmphasisSpan(
       @MarkShape int shape, @MarkFill int fill, @TextAnnotation.Position int position) {

File: library/core/src/androidTest/java/com/google/android/exoplayer2/StreamVolumeManagerTest.java
Patch:
@@ -272,7 +272,7 @@ public void onStreamVolumeChanged_isCalled_whenAudioManagerChangesIt() throws Ex
 
   private static class TestListener implements StreamVolumeManager.Listener {
 
-    @C.StreamType private int lastStreamType;
+    private @C.StreamType int lastStreamType;
     private int lastStreamVolume;
     private boolean lastStreamVolumeMuted;
     public final CountDownLatch onStreamVolumeChangedLatch;

File: library/core/src/main/java/com/google/android/exoplayer2/DefaultRenderersFactory.java
Patch:
@@ -93,7 +93,7 @@ public class DefaultRenderersFactory implements RenderersFactory {
 
   private final Context context;
   private final DefaultMediaCodecAdapterFactory codecAdapterFactory;
-  @ExtensionRendererMode private int extensionRendererMode;
+  private @ExtensionRendererMode int extensionRendererMode;
   private long allowedVideoJoiningTimeMs;
   private boolean enableDecoderFallback;
   private MediaCodecSelector mediaCodecSelector;

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlaybackException.java
Patch:
@@ -80,7 +80,7 @@ public final class ExoPlaybackException extends PlaybackException {
   public static final int TYPE_REMOTE = 3;
 
   /** The {@link Type} of the playback failure. */
-  @Type public final int type;
+  public final @Type int type;
 
   /** If {@link #type} is {@link #TYPE_RENDERER}, this is the name of the renderer. */
   @Nullable public final String rendererName;
@@ -99,7 +99,7 @@ public final class ExoPlaybackException extends PlaybackException {
    * renderer for {@link #rendererFormat}. If {@link #rendererFormat} is null, this is {@link
    * C#FORMAT_HANDLED}.
    */
-  @FormatSupport public final int rendererFormatSupport;
+  public final @FormatSupport int rendererFormatSupport;
 
   /** The {@link MediaPeriodId} of the media associated with this error, or null if undetermined. */
   @Nullable public final MediaPeriodId mediaPeriodId;

File: library/core/src/main/java/com/google/android/exoplayer2/ExoTimeoutException.java
Patch:
@@ -59,7 +59,7 @@ public final class ExoTimeoutException extends RuntimeException {
   public static final int TIMEOUT_OPERATION_DETACH_SURFACE = 3;
 
   /** The operation on the ExoPlayer playback thread that timed out. */
-  @TimeoutOperation public final int timeoutOperation;
+  public final @TimeoutOperation int timeoutOperation;
 
   /**
    * Creates the timeout exception.

File: library/core/src/main/java/com/google/android/exoplayer2/PlaybackInfo.java
Patch:
@@ -51,7 +51,7 @@
   /** The start position after a reported position discontinuity, in microseconds. */
   public final long discontinuityStartPositionUs;
   /** The current playback state. One of the {@link Player}.STATE_ constants. */
-  @Player.State public final int playbackState;
+  public final @Player.State int playbackState;
   /** The current playback error, or null if this is not an error state. */
   @Nullable public final ExoPlaybackException playbackError;
   /** Whether the player is currently loading. */
@@ -67,7 +67,7 @@
   /** Whether playback should proceed when {@link #playbackState} == {@link Player#STATE_READY}. */
   public final boolean playWhenReady;
   /** Reason why playback is suppressed even though {@link #playWhenReady} is {@code true}. */
-  @PlaybackSuppressionReason public final int playbackSuppressionReason;
+  public final @PlaybackSuppressionReason int playbackSuppressionReason;
   /** The playback parameters. */
   public final PlaybackParameters playbackParameters;
   /** Whether offload scheduling is enabled for the main player loop. */

File: library/core/src/main/java/com/google/android/exoplayer2/StreamVolumeManager.java
Patch:
@@ -54,7 +54,7 @@ public interface Listener {
   private final AudioManager audioManager;
 
   @Nullable private VolumeChangeReceiver receiver;
-  @C.StreamType private int streamType;
+  private @C.StreamType int streamType;
   private int volume;
   private boolean muted;
 

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsListener.java
Patch:
@@ -148,8 +148,7 @@ public int size() {
      * @param index The index. Must be between 0 (inclusive) and {@link #size()} (exclusive).
      * @return The {@link EventFlags event} at the given index.
      */
-    @EventFlags
-    public int get(int index) {
+    public @EventFlags int get(int index) {
       return flags.get(index);
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/MediaMetricsListener.java
Patch:
@@ -118,7 +118,7 @@ public static MediaMetricsListener create(Context context) {
 
   @Nullable private String activeSessionId;
   @Nullable private PlaybackMetrics.Builder metricsBuilder;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int currentPlaybackState;
   private int currentNetworkType;
   @Nullable private PlaybackException pendingPlayerError;
@@ -885,7 +885,7 @@ public ErrorInfo(int errorCode, int subErrorCode) {
   private static final class PendingFormatUpdate {
 
     public final Format format;
-    @C.SelectionReason public final int selectionReason;
+    public final @C.SelectionReason int selectionReason;
     public final String sessionId;
 
     public PendingFormatUpdate(

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/PlaybackStatsListener.java
Patch:
@@ -82,7 +82,7 @@ public interface Callback {
 
   @Nullable private String discontinuityFromSession;
   private long discontinuityFromPositionMs;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int droppedFrames;
   @Nullable private Exception nonFatalException;
   private long bandwidthTimeMs;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioProcessor.java
Patch:
@@ -43,7 +43,7 @@ final class AudioFormat {
     /** The number of interleaved channels. */
     public final int channelCount;
     /** The type of linear PCM encoding. */
-    @C.PcmEncoding public final int encoding;
+    public final @C.PcmEncoding int encoding;
     /** The number of bytes used to represent one audio frame. */
     public final int bytesPerFrame;
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/ForwardingAudioSink.java
Patch:
@@ -46,8 +46,7 @@ public boolean supportsFormat(Format format) {
   }
 
   @Override
-  @SinkFormatSupport
-  public int getFormatSupport(Format format) {
+  public @SinkFormatSupport int getFormatSupport(Format format) {
     return sink.getFormatSupport(format);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
Patch:
@@ -282,8 +282,7 @@ public void experimentalSetEnableKeepAudioTrackOnSeek(boolean enableKeepAudioTra
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     if (!MimeTypes.isAudio(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: library/core/src/main/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessor.java
Patch:
@@ -86,7 +86,7 @@ public final class SilenceSkippingAudioProcessor extends BaseAudioProcessor {
    */
   private byte[] paddingBuffer;
 
-  @State private int state;
+  private @State int state;
   private int maybeSilenceBufferSize;
   private int paddingSize;
   private boolean hasOutputNoise;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/SpatializerDelegate.java
Patch:
@@ -129,8 +129,7 @@ public boolean isAvailable() {
   }
 
   /** Delegates to Spatializer.getImmersiveAudioLevel() */
-  @ImmersiveAudioLevel
-  public int getImmersiveAudioLevel() {
+  public @ImmersiveAudioLevel int getImmersiveAudioLevel() {
     try {
       return (int) Util.castNonNull(getImmersiveAudioLevel.invoke(spatializer));
     } catch (IllegalAccessException | InvocationTargetException e) {

File: library/core/src/main/java/com/google/android/exoplayer2/audio/TeeAudioProcessor.java
Patch:
@@ -125,7 +125,7 @@ public static final class WavFileAudioBufferSink implements AudioBufferSink {
 
     private int sampleRateHz;
     private int channelCount;
-    @C.PcmEncoding private int encoding;
+    private @C.PcmEncoding int encoding;
     @Nullable private RandomAccessFile randomAccessFile;
     private int counter;
     private int bytesWritten;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/TrimmingAudioProcessor.java
Patch:
@@ -25,7 +25,7 @@
 /** Audio processor for trimming samples from the start/end of data. */
 /* package */ final class TrimmingAudioProcessor extends BaseAudioProcessor {
 
-  @C.PcmEncoding private static final int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
 
   private int trimStartFrames;
   private int trimEndFrames;

File: library/core/src/main/java/com/google/android/exoplayer2/decoder/DecoderReuseEvaluation.java
Patch:
@@ -123,13 +123,13 @@ public final class DecoderReuseEvaluation {
   public final Format newFormat;
 
   /** The {@link DecoderReuseResult result} of the evaluation. */
-  @DecoderReuseResult public final int result;
+  public final @DecoderReuseResult int result;
 
   /**
    * {@link DecoderDiscardReasons Reasons} why the decoder cannot be reused. Always {@code 0} if
    * reuse is possible. May also be {code 0} if reuse is not possible for an unspecified reason.
    */
-  @DecoderDiscardReasons public final int discardReasons;
+  public final @DecoderDiscardReasons int discardReasons;
 
   /**
    * @param decoderName The name of the decoder.

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSession.java
Patch:
@@ -254,8 +254,7 @@ public void onProvisionError(Exception error, boolean thrownByExoMediaDrm) {
   // DrmSession implementation.
 
   @Override
-  @DrmSession.State
-  public final int getState() {
+  public final @DrmSession.State int getState() {
     return state;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
Patch:
@@ -309,7 +309,7 @@ private MissingSchemeDataException(UUID uuid) {
   @Nullable private byte[] offlineLicenseKeySetId;
   private @MonotonicNonNull PlayerId playerId;
 
-  /* package */ volatile @Nullable MediaDrmHandler mediaDrmHandler;
+  /* package */ @Nullable volatile MediaDrmHandler mediaDrmHandler;
 
   /**
    * @param uuid The UUID of the drm scheme.
@@ -587,8 +587,7 @@ private DrmSession acquireSession(
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType(Format format) {
+  public @C.CryptoType int getCryptoType(Format format) {
     @C.CryptoType int cryptoType = checkNotNull(exoMediaDrm).getCryptoType();
     if (format.drmInitData == null) {
       int trackType = MimeTypes.getTrackType(format.sampleMimeType);

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DrmSession.java
Patch:
@@ -63,7 +63,7 @@ static void replaceSession(
   class DrmSessionException extends IOException {
 
     /** The {@link PlaybackException.ErrorCode} that corresponds to the failure. */
-    @PlaybackException.ErrorCode public final int errorCode;
+    public final @PlaybackException.ErrorCode int errorCode;
 
     public DrmSessionException(Throwable cause, @PlaybackException.ErrorCode int errorCode) {
       super(cause);

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DrmSessionManager.java
Patch:
@@ -64,8 +64,7 @@ public DrmSession acquireSession(
         }
 
         @Override
-        @C.CryptoType
-        public int getCryptoType(Format format) {
+        public @C.CryptoType int getCryptoType(Format format) {
           return format.drmInitData != null ? C.CRYPTO_TYPE_UNSUPPORTED : C.CRYPTO_TYPE_NONE;
         }
       };

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DummyExoMediaDrm.java
Patch:
@@ -150,8 +150,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) {
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_UNSUPPORTED;
   }
 }

File: library/core/src/main/java/com/google/android/exoplayer2/drm/ExoMediaDrm.java
Patch:
@@ -265,7 +265,7 @@ final class KeyRequest {
 
     private final byte[] data;
     private final String licenseServerUrl;
-    @RequestType private final int requestType;
+    private final @RequestType int requestType;
 
     /**
      * Creates an instance with {@link #REQUEST_TYPE_UNKNOWN}.
@@ -305,8 +305,7 @@ public String getLicenseServerUrl() {
      * request does not specify a type. Note that when using a platform {@link MediaDrm} instance,
      * key requests only specify a type on API levels 23 and above.
      */
-    @RequestType
-    public int getRequestType() {
+    public @RequestType int getRequestType() {
       return requestType;
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/drm/FrameworkMediaDrm.java
Patch:
@@ -339,8 +339,7 @@ public FrameworkCryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCr
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_FRAMEWORK;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/drm/UnsupportedDrmException.java
Patch:
@@ -47,7 +47,7 @@ public final class UnsupportedDrmException extends Exception {
   public static final int REASON_INSTANTIATION_ERROR = 2;
 
   /** Either {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
-  @Reason public final int reason;
+  public final @Reason int reason;
 
   /** @param reason {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
   public UnsupportedDrmException(@Reason int reason) {

File: library/core/src/main/java/com/google/android/exoplayer2/drm/WidevineUtil.java
Patch:
@@ -37,7 +37,8 @@ private WidevineUtil() {}
    * @return A {@link Pair} consisting of the remaining license and playback durations in seconds,
    *     or null if called before the session has been opened or after it's been released.
    */
-  public static @Nullable Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
+  @Nullable
+  public static Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
     Map<String, String> keyStatus = drmSession.queryKeyStatus();
     if (keyStatus == null) {
       return null;

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -141,7 +141,7 @@ public AsynchronousMediaCodecAdapter createAdapter(Configuration configuration)
   private final boolean synchronizeCodecInteractionsWithQueueing;
   private final boolean enableImmediateCodecStartAfterFlush;
   private boolean codecReleased;
-  @State private int state;
+  private @State int state;
 
   private AsynchronousMediaCodecAdapter(
       MediaCodec codec,

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/DefaultMediaCodecAdapterFactory.java
Patch:
@@ -51,7 +51,7 @@ public final class DefaultMediaCodecAdapterFactory implements MediaCodecAdapter.
 
   private static final String TAG = "DMCodecAdapterFactory";
 
-  @Mode private int asynchronousMode;
+  private @Mode int asynchronousMode;
   private boolean enableSynchronizeCodecInteractionsWithQueueing;
   private boolean enableImmediateCodecStartAfterFlush;
 

File: library/core/src/main/java/com/google/android/exoplayer2/metadata/MetadataRenderer.java
Patch:
@@ -89,8 +89,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: library/core/src/main/java/com/google/android/exoplayer2/offline/Download.java
Patch:
@@ -97,7 +97,7 @@ public final class Download {
   /** The download request. */
   public final DownloadRequest request;
   /** The state of the download. */
-  @State public final int state;
+  public final @State int state;
   /** The first time when download entry is created. */
   public final long startTimeMs;
   /** The last update time. */
@@ -110,7 +110,7 @@ public final class Download {
    * If {@link #state} is {@link #STATE_FAILED} then this is the cause, otherwise {@link
    * #FAILURE_REASON_NONE}.
    */
-  @FailureReason public final int failureReason;
+  public final @FailureReason int failureReason;
 
   /* package */ final DownloadProgress progress;
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -1097,8 +1097,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    @C.SelectionReason
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
Patch:
@@ -349,8 +349,7 @@ public Requirements getRequirements() {
    *
    * @return The not met {@link Requirements.RequirementFlags}, or 0 if all requirements are met.
    */
-  @Requirements.RequirementFlags
-  public int getNotMetRequirements() {
+  public @Requirements.RequirementFlags int getNotMetRequirements() {
     return notMetRequirements;
   }
 
@@ -703,7 +702,7 @@ private static final class InternalHandler extends Handler {
     private final ArrayList<Download> downloads;
     private final HashMap<String, Task> activeTasks;
 
-    @Requirements.RequirementFlags private int notMetRequirements;
+    private @Requirements.RequirementFlags int notMetRequirements;
     private boolean downloadsPaused;
     private int maxParallelDownloads;
     private int minRetryCount;

File: library/core/src/main/java/com/google/android/exoplayer2/scheduler/RequirementsWatcher.java
Patch:
@@ -60,7 +60,7 @@ void onRequirementsStateChanged(
 
   @Nullable private DeviceStatusChangeReceiver receiver;
 
-  @Requirements.RequirementFlags private int notMetRequirements;
+  private @Requirements.RequirementFlags int notMetRequirements;
   @Nullable private NetworkCallback networkCallback;
 
   /**
@@ -81,8 +81,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
    *
    * @return Initial {@link Requirements.RequirementFlags RequirementFlags} that are not met, or 0.
    */
-  @Requirements.RequirementFlags
-  public int start() {
+  public @Requirements.RequirementFlags int start() {
     notMetRequirements = requirements.getNotMetRequirements(context);
 
     IntentFilter filter = new IntentFilter();

File: library/core/src/main/java/com/google/android/exoplayer2/source/ClippingMediaSource.java
Patch:
@@ -61,7 +61,7 @@ public static final class IllegalClippingException extends IOException {
     public static final int REASON_START_EXCEEDS_END = 2;
 
     /** The reason clipping failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason clipping failed. */
     public IllegalClippingException(@Reason int reason) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactory.java
Patch:
@@ -456,8 +456,7 @@ public DelegateFactoryLoader(
       mediaSourceFactories = new HashMap<>();
     }
 
-    @C.ContentType
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       ensureAllSuppliersAreLoaded();
       return Ints.toArray(supportedTypes);
     }

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaLoadData.java
Patch:
@@ -26,7 +26,7 @@
 public final class MediaLoadData {
 
   /** The {@link DataType data type}. */
-  @DataType public final int dataType;
+  public final @DataType int dataType;
   /**
    * One of the {@link TrackType track types}, which is a media track type if the data corresponds
    * to media of a specific type, or {@link C#TRACK_TYPE_UNKNOWN} otherwise.

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaSourceFactory.java
Patch:
@@ -44,8 +44,7 @@ public MediaSourceFactory setLoadErrorHandlingPolicy(
         }
 
         @Override
-        @C.ContentType
-        public int[] getSupportedTypes() {
+        public @C.ContentType int[] getSupportedTypes() {
           throw new UnsupportedOperationException();
         }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/MergingMediaSource.java
Patch:
@@ -59,7 +59,7 @@ public static final class IllegalMergeException extends IOException {
     public static final int REASON_PERIOD_COUNT_MISMATCH = 0;
 
     /** The reason the merge failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason the merge failed. */
     public IllegalMergeException(@Reason int reason) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaPeriod.java
Patch:
@@ -129,7 +129,7 @@ interface Listener {
   private @MonotonicNonNull SeekMap seekMap;
   private long durationUs;
   private boolean isLive;
-  @DataType private int dataType;
+  private @DataType int dataType;
 
   private boolean seenFirstTrackSelection;
   private boolean notifyDiscontinuity;

File: library/core/src/main/java/com/google/android/exoplayer2/source/SilenceMediaSource.java
Patch:
@@ -83,7 +83,7 @@ public SilenceMediaSource createMediaSource() {
   public static final String MEDIA_ID = "SilenceMediaSource";
 
   private static final int SAMPLE_RATE_HZ = 44100;
-  @C.PcmEncoding private static final int PCM_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int PCM_ENCODING = C.ENCODING_PCM_16BIT;
   private static final int CHANNEL_COUNT = 2;
   private static final Format FORMAT =
       new Format.Builder()

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/Chunk.java
Patch:
@@ -40,15 +40,15 @@ public abstract class Chunk implements Loadable {
   /** The {@link DataSpec} that defines the data to be loaded. */
   public final DataSpec dataSpec;
   /** The {@link DataType data type} of the chunk. For reporting only. */
-  @DataType public final int type;
+  public final @DataType int type;
   /** The format of the track to which this chunk belongs. */
   public final Format trackFormat;
   /**
    * One of the {@link C.SelectionReason selection reasons} if the chunk belongs to a track. {@link
    * C#SELECTION_REASON_UNKNOWN} if the chunk does not belong to a track, or if the selection reason
    * is unknown.
    */
-  @C.SelectionReason public final int trackSelectionReason;
+  public final @C.SelectionReason int trackSelectionReason;
   /**
    * Optional data associated with the selection of the track to which this chunk belongs. Null if
    * the chunk does not belong to a track, or if there is no associated track selection data.

File: library/core/src/main/java/com/google/android/exoplayer2/source/mediaparser/OutputConsumerAdapterV30.java
Patch:
@@ -538,8 +538,7 @@ private static DrmInitData toExoPlayerDrmInitData(
     return new DrmInitData(schemeType, schemeDatas);
   }
 
-  @SelectionFlags
-  private static int getSelectionFlags(MediaFormat mediaFormat) {
+  private static @SelectionFlags int getSelectionFlags(MediaFormat mediaFormat) {
     int selectionFlags = 0;
     selectionFlags |=
         getFlag(

File: library/core/src/main/java/com/google/android/exoplayer2/text/ExoplayerCuesDecoder.java
Patch:
@@ -54,7 +54,7 @@ public final class ExoplayerCuesDecoder implements SubtitleDecoder {
   private final SubtitleInputBuffer inputBuffer;
   private final Deque<SubtitleOutputBuffer> availableOutputBuffers;
 
-  @InputBufferState private int inputBufferState;
+  private @InputBufferState int inputBufferState;
   private boolean released;
 
   public ExoplayerCuesDecoder() {

File: library/core/src/main/java/com/google/android/exoplayer2/text/TextRenderer.java
Patch:
@@ -86,7 +86,7 @@ public final class TextRenderer extends BaseRenderer implements Callback {
   private boolean inputStreamEnded;
   private boolean outputStreamEnded;
   private boolean waitingForKeyFrame;
-  @ReplacementState private int decoderReplacementState;
+  private @ReplacementState int decoderReplacementState;
   @Nullable private Format streamFormat;
   @Nullable private SubtitleDecoder decoder;
   @Nullable private SubtitleInputBuffer nextInputBuffer;
@@ -133,8 +133,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeter.java
Patch:
@@ -276,14 +276,14 @@ public static synchronized DefaultBandwidthMeter getSingletonInstance(Context co
   private long sampleStartTimeMs;
   private long sampleBytesTransferred;
 
-  @C.NetworkType private int networkType;
+  private @C.NetworkType int networkType;
   private long totalElapsedTimeMs;
   private long totalBytesTransferred;
   private long bitrateEstimate;
   private long lastReportedBitrateEstimate;
 
   private boolean networkTypeOverrideSet;
-  @C.NetworkType private int networkTypeOverride;
+  private @C.NetworkType int networkTypeOverride;
 
   /** @deprecated Use {@link Builder} instead. */
   @Deprecated

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/LoadErrorHandlingPolicy.java
Patch:
@@ -128,7 +128,7 @@ public boolean isFallbackAvailable(@FallbackType int type) {
   /** A selected fallback option. */
   final class FallbackSelection {
     /** The type of fallback. */
-    @FallbackType public final int type;
+    public final @FallbackType int type;
     /** The duration for which the failing resource should be excluded, in milliseconds. */
     public final long exclusionDurationMs;
 

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/ParsingLoadable.java
Patch:
@@ -98,7 +98,7 @@ public static <T> T load(
   private final StatsDataSource dataSource;
   private final Parser<? extends T> parser;
 
-  private volatile @Nullable T result;
+  @Nullable private volatile T result;
 
   /**
    * @param dataSource A {@link DataSource} to use when loading the data.

File: library/core/src/main/java/com/google/android/exoplayer2/video/DecoderVideoRenderer.java
Patch:
@@ -118,7 +118,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
 
   private DecoderInputBuffer inputBuffer;
   private VideoDecoderOutputBuffer outputBuffer;
-  @VideoOutputMode private int outputMode;
+  private @VideoOutputMode int outputMode;
   @Nullable private Object output;
   @Nullable private Surface outputSurface;
   @Nullable private VideoDecoderOutputBufferRenderer outputBufferRenderer;
@@ -127,7 +127,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
   @Nullable private DrmSession decoderDrmSession;
   @Nullable private DrmSession sourceDrmSession;
 
-  @ReinitializationState private int decoderReinitializationState;
+  private @ReinitializationState int decoderReinitializationState;
   private boolean decoderReceivedBuffers;
 
   private boolean renderedFirstFrameAfterReset;

File: library/core/src/main/java/com/google/android/exoplayer2/video/DummySurface.java
Patch:
@@ -103,8 +103,7 @@ public void release() {
     }
   }
 
-  @SecureMode
-  private static int getSecureMode(Context context) {
+  private static @SecureMode int getSecureMode(Context context) {
     if (GlUtil.isProtectedContentExtensionSupported(context)) {
       if (GlUtil.isSurfacelessContextExtensionSupported()) {
         return SECURE_MODE_SURFACELESS_CONTEXT;

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -128,7 +128,7 @@ public class MediaCodecVideoRenderer extends MediaCodecRenderer {
   @Nullable private Surface surface;
   @Nullable private DummySurface dummySurface;
   private boolean haveReportedFirstFrameRenderedForCurrentSurface;
-  @C.VideoScalingMode private int scalingMode;
+  private @C.VideoScalingMode int scalingMode;
   private boolean renderedFirstFrameAfterReset;
   private boolean mayRenderFirstFrameAfterEnableIfNotStarted;
   private boolean renderedFirstFrameAfterEnable;
@@ -339,8 +339,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     String mimeType = format.sampleMimeType;
     if (!MimeTypes.isVideo(mimeType)) {

File: library/core/src/main/java/com/google/android/exoplayer2/video/VideoFrameReleaseHelper.java
Patch:
@@ -109,7 +109,7 @@ public final class VideoFrameReleaseHelper {
   private float surfacePlaybackFrameRate;
 
   private float playbackSpeed;
-  @C.VideoChangeFrameRateStrategy private int changeFrameRateStrategy;
+  private @C.VideoChangeFrameRateStrategy int changeFrameRateStrategy;
 
   private long vsyncDurationNs;
   private long vsyncOffsetNs;

File: library/core/src/main/java/com/google/android/exoplayer2/video/spherical/CameraMotionRenderer.java
Patch:
@@ -56,8 +56,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     return MimeTypes.APPLICATION_CAMERA_MOTION.equals(format.sampleMimeType)
         ? RendererCapabilities.create(C.FORMAT_HANDLED)
         : RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: library/core/src/main/java/com/google/android/exoplayer2/video/spherical/SceneRenderer.java
Patch:
@@ -50,8 +50,8 @@
   private @MonotonicNonNull SurfaceTexture surfaceTexture;
 
   // Used by other threads only
-  @C.StereoMode private volatile int defaultStereoMode;
-  @C.StereoMode private int lastStereoMode;
+  private volatile @C.StereoMode int defaultStereoMode;
+  private @C.StereoMode int lastStereoMode;
   @Nullable private byte[] lastProjectionData;
 
   // Methods called on any thread.

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -11478,7 +11478,7 @@ public void handleMessage(ExoPlayer player, int messageType, @Nullable Object me
   private static final class PlayerStateGrabber extends PlayerRunnable {
 
     public boolean playWhenReady;
-    @Player.State public int playbackState;
+    public @Player.State int playbackState;
     @Nullable public Timeline timeline;
 
     @Override

File: library/core/src/test/java/com/google/android/exoplayer2/audio/DecoderAudioRendererTest.java
Patch:
@@ -71,8 +71,7 @@ public String getName() {
           }
 
           @Override
-          @C.FormatSupport
-          protected int supportsFormatInternal(Format format) {
+          protected @C.FormatSupport int supportsFormatInternal(Format format) {
             return FORMAT_HANDLED;
           }
 

File: library/core/src/test/java/com/google/android/exoplayer2/video/DecoderVideoRendererTest.java
Patch:
@@ -84,16 +84,15 @@ public void setUp() {
             /* maxDroppedFramesToNotify= */ -1) {
 
           private final Phaser inputBuffersInCodecPhaser = new Phaser();
-          @C.VideoOutputMode private int outputMode;
+          private @C.VideoOutputMode int outputMode;
 
           @Override
           public String getName() {
             return "TestVideoRenderer";
           }
 
           @Override
-          @Capabilities
-          public int supportsFormat(Format format) {
+          public @Capabilities int supportsFormat(Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: library/core/src/test/java/com/google/android/exoplayer2/video/MediaCodecVideoRendererTest.java
Patch:
@@ -110,8 +110,8 @@ public void setUp() throws Exception {
             /* eventListener= */ eventListener,
             /* maxDroppedFramesToNotify= */ 1) {
           @Override
-          @Capabilities
-          protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format) {
+          protected @Capabilities int supportsFormat(
+              MediaCodecSelector mediaCodecSelector, Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaPeriod.java
Patch:
@@ -937,7 +937,7 @@ private static final class TrackGroupInfo {
 
     public final int[] adaptationSetIndices;
     public final @C.TrackType int trackType;
-    @TrackGroupCategory public final int trackGroupCategory;
+    public final @TrackGroupCategory int trackGroupCategory;
 
     public final int eventStreamGroupIndex;
     public final int primaryTrackGroupIndex;

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/DataSourceException.java
Patch:
@@ -55,7 +55,7 @@ public static boolean isCausedByPositionOutOfRange(IOException e) {
    * The reason of this {@link DataSourceException}, should be one of the {@code ERROR_CODE_IO_*} in
    * {@link PlaybackException.ErrorCode}.
    */
-  @PlaybackException.ErrorCode public final int reason;
+  public final @PlaybackException.ErrorCode int reason;
 
   /**
    * Constructs a DataSourceException.

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java
Patch:
@@ -231,7 +231,7 @@ public static HttpDataSourceException createForIOException(
     /** The {@link DataSpec} associated with the current connection. */
     public final DataSpec dataSpec;
 
-    @Type public final int type;
+    public final @Type int type;
 
     /**
      * @deprecated Use {@link #HttpDataSourceException(DataSpec, int, int)
@@ -347,8 +347,8 @@ public HttpDataSourceException(
       this.type = type;
     }
 
-    @PlaybackException.ErrorCode
-    private static int assignErrorCode(@PlaybackException.ErrorCode int errorCode, @Type int type) {
+    private static @PlaybackException.ErrorCode int assignErrorCode(
+        @PlaybackException.ErrorCode int errorCode, @Type int type) {
       return errorCode == PlaybackException.ERROR_CODE_IO_UNSPECIFIED && type == TYPE_OPEN
           ? PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED
           : errorCode;

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
Patch:
@@ -70,7 +70,7 @@ public static final class Factory implements DataSource.Factory {
     @Nullable private DataSource.Factory upstreamDataSourceFactory;
     @Nullable private PriorityTaskManager upstreamPriorityTaskManager;
     private int upstreamPriority;
-    @CacheDataSource.Flags private int flags;
+    private @CacheDataSource.Flags int flags;
     @Nullable private CacheDataSource.EventListener eventListener;
 
     public Factory() {

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/Buffer.java
Patch:
@@ -20,7 +20,7 @@
 /** Base class for buffers with flags. */
 public abstract class Buffer {
 
-  @C.BufferFlags private int flags;
+  private @C.BufferFlags int flags;
 
   /** Clears the buffer. */
   public void clear() {

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/CryptoInfo.java
Patch:
@@ -46,7 +46,7 @@ public final class CryptoInfo {
    *
    * @see android.media.MediaCodec.CryptoInfo#mode
    */
-  @C.CryptoMode public int mode;
+  public @C.CryptoMode int mode;
   /**
    * The number of leading unencrypted bytes in each sub-sample. If null, all bytes are treated as
    * encrypted and {@link #numBytesOfEncryptedData} must be specified.

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/DecoderInputBuffer.java
Patch:
@@ -109,7 +109,7 @@ public InsufficientCapacityException(int currentCapacity, int requiredCapacity)
    */
   @Nullable public ByteBuffer supplementalData;
 
-  @BufferReplacementMode private final int bufferReplacementMode;
+  private final @BufferReplacementMode int bufferReplacementMode;
   private final int paddingSize;
 
   /** Returns a new instance that's not able to hold any data. */

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/VideoDecoderOutputBuffer.java
Patch:
@@ -32,7 +32,7 @@ public class VideoDecoderOutputBuffer extends DecoderOutputBuffer {
   public int decoderPrivate;
 
   /** Output mode. */
-  @C.VideoOutputMode public int mode;
+  public @C.VideoOutputMode int mode;
   /** RGB buffer for RGB mode. */
   @Nullable public ByteBuffer data;
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/BinarySearchSeeker.java
Patch:
@@ -421,7 +421,7 @@ public static final class TimestampSearchResult {
         new TimestampSearchResult(TYPE_NO_TIMESTAMP, C.TIME_UNSET, C.POSITION_UNSET);
 
     /** The type of the result. */
-    @Type private final int type;
+    private final @Type int type;
 
     /**
      * When {@link #type} is {@link #TYPE_POSITION_OVERESTIMATED}, the {@link

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/TrackOutput.java
Patch:
@@ -38,7 +38,7 @@ public interface TrackOutput {
   final class CryptoData {
 
     /** The encryption mode used for the sample. */
-    @C.CryptoMode public final int cryptoMode;
+    public final @C.CryptoMode int cryptoMode;
 
     /** The encryption key associated with the sample. Its contents must not be modified. */
     public final byte[] encryptionKey;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/TrueHdSampleRechunker.java
Patch:
@@ -32,7 +32,7 @@ public final class TrueHdSampleRechunker {
   private boolean foundSyncframe;
   private int chunkSampleCount;
   private long chunkTimeUs;
-  @C.BufferFlags private int chunkFlags;
+  private @C.BufferFlags int chunkFlags;
   private int chunkSize;
   private int chunkOffset;
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/jpeg/JpegExtractor.java
Patch:
@@ -82,7 +82,7 @@ public final class JpegExtractor implements Extractor {
 
   private @MonotonicNonNull ExtractorOutput extractorOutput;
 
-  @State private int state;
+  private @State int state;
   private int marker;
   private int segmentLength;
   private long mp4StartPosition;
@@ -126,8 +126,8 @@ public void init(ExtractorOutput output) {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     switch (state) {
       case STATE_READING_MARKER:
         readMarker(input);

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp3/Mp3Extractor.java
Patch:
@@ -140,7 +140,7 @@ public final class Mp3Extractor implements Extractor {
   private static final int SEEK_HEADER_VBRI = 0x56425249;
   private static final int SEEK_HEADER_UNSET = 0;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final long forcedFirstSampleTimestampUs;
   private final ParsableByteArray scratch;
   private final MpegAudioUtil.Header synchronizedHeader;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -1910,7 +1910,7 @@ private static final class StsdData {
 
     @Nullable public Format format;
     public int nalUnitLengthFieldLength;
-    @Track.Transformation public int requiredSampleTransformation;
+    public @Track.Transformation int requiredSampleTransformation;
 
     public StsdData(int numberOfEntries) {
       trackEncryptionBoxes = new TrackEncryptionBox[numberOfEntries];

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -130,7 +130,7 @@ public class FragmentedMp4Extractor implements Extractor {
   private static final int STATE_READING_SAMPLE_CONTINUE = 4;
 
   // Workarounds.
-  @Flags private final int flags;
+  private final @Flags int flags;
   @Nullable private final Track sideloadedTrack;
 
   // Sideloaded data.
@@ -1687,8 +1687,7 @@ public int getCurrentSampleSize() {
     }
 
     /** Returns the {@link C.BufferFlags} corresponding to the current sample. */
-    @C.BufferFlags
-    public int getCurrentSampleFlags() {
+    public @C.BufferFlags int getCurrentSampleFlags() {
       int flags =
           !currentlyInFragment
               ? moovSampleTable.flags[currentSampleIndex]

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Track.java
Patch:
@@ -67,7 +67,7 @@ public final class Track {
    * One of {@code TRANSFORMATION_*}. Defines the transformation to apply before outputting each
    * sample.
    */
-  @Transformation public final int sampleTransformation;
+  public final @Transformation int sampleTransformation;
 
   /** Durations of edit list segments in the movie timescale. Null if there is no edit list. */
   @Nullable public final long[] editListDurations;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/TrackEncryptionBox.java
Patch:
@@ -77,8 +77,7 @@ public TrackEncryptionBox(
             schemeToCryptoMode(schemeType), keyId, defaultEncryptedBlocks, defaultClearBlocks);
   }
 
-  @C.CryptoMode
-  private static int schemeToCryptoMode(@Nullable String schemeType) {
+  private static @C.CryptoMode int schemeToCryptoMode(@Nullable String schemeType) {
     if (schemeType == null) {
       // If unknown, assume cenc.
       return C.CRYPTO_MODE_AES_CTR;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac3Reader.java
Patch:
@@ -60,7 +60,7 @@ public final class Ac3Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac4Reader.java
Patch:
@@ -58,7 +58,7 @@ public final class Ac4Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/DefaultTsPayloadReaderFactory.java
Patch:
@@ -102,7 +102,7 @@ public final class DefaultTsPayloadReaderFactory implements TsPayloadReader.Fact
 
   private static final int DESCRIPTOR_TAG_CAPTION_SERVICE = 0x86;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final List<Format> closedCaptionFormats;
 
   public DefaultTsPayloadReaderFactory() {

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/H263Reader.java
Patch:
@@ -333,7 +333,7 @@ private static final class CsdBuffer {
     private static final int STATE_WAIT_FOR_VOP_START = 4;
 
     private boolean isFilling;
-    @State private int state;
+    private @State int state;
 
     public int length;
     public int volStartPosition;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
Patch:
@@ -116,7 +116,7 @@ public final class TsExtractor implements Extractor {
   private static final int BUFFER_SIZE = TS_PACKET_SIZE * 50;
   private static final int SNIFF_TS_PACKET_COUNT = 5;
 
-  @Mode private final int mode;
+  private final @Mode int mode;
   private final int timestampSearchBytes;
   private final List<TimestampAdjuster> timestampAdjusters;
   private final ParsableByteArray tsPacketBuffer;
@@ -296,8 +296,8 @@ public void release() {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     long inputLength = input.getLength();
     if (tracksEnded) {
       boolean canReadDuration = inputLength != C.LENGTH_UNSET && mode != MODE_HLS;

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/SubtitleExtractor.java
Patch:
@@ -84,7 +84,7 @@ public class SubtitleExtractor implements Extractor {
   private @MonotonicNonNull ExtractorOutput extractorOutput;
   private @MonotonicNonNull TrackOutput trackOutput;
   private int bytesRead;
-  @State private int state;
+  private @State int state;
   private long seekTimeUs;
 
   /**

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/ttml/TextEmphasis.java
Patch:
@@ -97,13 +97,13 @@
           TtmlNode.ANNOTATION_POSITION_OUTSIDE);
 
   /** The text emphasis mark shape. */
-  @MarkShape public final int markShape;
+  public final @MarkShape int markShape;
 
   /** The fill style of the text emphasis mark. */
-  @TextEmphasisSpan.MarkFill public final int markFill;
+  public final @TextEmphasisSpan.MarkFill int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @Position public final int position;
+  public final @Position int position;
 
   private TextEmphasis(
       @MarkShape int markShape,

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/mkv/DefaultEbmlReaderTest.java
Patch:
@@ -178,8 +178,7 @@ private static final class TestProcessor implements EbmlProcessor {
     private final List<String> events = new ArrayList<>();
 
     @Override
-    @EbmlProcessor.ElementType
-    public int getElementType(int id) {
+    public @EbmlProcessor.ElementType int getElementType(int id) {
       switch (id) {
         case ID_EBML:
         case ID_SEGMENT:

File: library/extractor/src/test/java/com/google/android/exoplayer2/text/ttml/TtmlStyleTest.java
Patch:
@@ -42,7 +42,7 @@ public final class TtmlStyleTest {
   private static final String FONT_FAMILY = "serif";
   @ColorInt private static final int FONT_COLOR = Color.WHITE;
   private static final float FONT_SIZE = 12.5f;
-  @TtmlStyle.FontSizeUnit private static final int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
+  private static final @TtmlStyle.FontSizeUnit int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
   @ColorInt private static final int BACKGROUND_COLOR = Color.BLACK;
   private static final int RUBY_TYPE = TtmlStyle.RUBY_TYPE_TEXT;
   private static final int RUBY_POSITION = TextAnnotation.POSITION_AFTER;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -60,7 +60,7 @@ public final class DefaultHlsExtractorFactory implements HlsExtractorFactory {
         FileTypes.MP3,
       };
 
-  @DefaultTsPayloadReaderFactory.Flags private final int payloadReaderFactoryFlags;
+  private final @DefaultTsPayloadReaderFactory.Flags int payloadReaderFactoryFlags;
   private final boolean exposeCea608WhenMissingDeclarations;
 
   /**

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
Patch:
@@ -303,8 +303,7 @@ public long getAdjustedSeekPositionUs(long positionUs, SeekParameters seekParame
    *     has been {@link #CHUNK_PUBLICATION_STATE_REMOVED removed} or is definitely {@link
    *     #CHUNK_PUBLICATION_STATE_PUBLISHED published}.
    */
-  @ChunkPublicationState
-  public int getChunkPublicationState(HlsMediaChunk mediaChunk) {
+  public @ChunkPublicationState int getChunkPublicationState(HlsMediaChunk mediaChunk) {
     if (mediaChunk.partIndex == C.INDEX_UNSET) {
       // Chunks based on full segments can't be removed and are always published.
       return CHUNK_PUBLICATION_STATE_PUBLISHED;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylist.java
Patch:
@@ -396,7 +396,7 @@ public RenditionReport(Uri playlistUri, long lastMediaSequence, int lastPartInde
   public static final int PLAYLIST_TYPE_EVENT = 2;
 
   /** The type of the playlist. See {@link PlaylistType}. */
-  @PlaylistType public final int playlistType;
+  public final @PlaylistType int playlistType;
   /**
    * The start offset in microseconds from the beginning of the playlist, as defined by
    * #EXT-X-START, or {@link C#TIME_UNSET} if undefined. The value is guaranteed to be between 0 and

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspAuthenticationInfo.java
Patch:
@@ -54,7 +54,7 @@
   private static final String ALGORITHM = "MD5";
 
   /** The authentication mechanism. */
-  @AuthenticationMechanism public final int authenticationMechanism;
+  public final @AuthenticationMechanism int authenticationMechanism;
   /** The authentication realm. */
   public final String realm;
   /** The nonce used in digest authentication; empty if using {@link #BASIC} authentication. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspClient.java
Patch:
@@ -141,7 +141,7 @@ public interface PlaybackEventListener {
   @Nullable private String sessionId;
   @Nullable private KeepAliveMonitor keepAliveMonitor;
   @Nullable private RtspAuthenticationInfo rtspAuthenticationInfo;
-  @RtspState private int rtspState;
+  private @RtspState int rtspState;
   private boolean hasUpdatedTimelineAndTracks;
   private boolean receivedAuthorizationRequest;
   private boolean hasPendingPauseRequest;
@@ -204,8 +204,7 @@ public void start() throws IOException {
   }
 
   /** Returns the current {@link RtspState RTSP state}. */
-  @RtspState
-  public int getState() {
+  public @RtspState int getState() {
     return rtspState;
   }
 

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMediaPeriod.java
Patch:
@@ -773,8 +773,7 @@ public boolean isSampleQueueReady() {
       return sampleQueue.isReady(/* loadingFinished= */ canceled);
     }
 
-    @ReadDataResult
-    public int read(
+    public @ReadDataResult int read(
         FormatHolder formatHolder, DecoderInputBuffer buffer, @ReadFlags int readFlags) {
       return sampleQueue.read(formatHolder, buffer, readFlags, /* loadingFinished= */ canceled);
     }

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageChannel.java
Patch:
@@ -351,7 +351,7 @@ private static final class MessageParser {
 
     private final List<String> messageLines;
 
-    @ReadingState private int state;
+    private @ReadingState int state;
     private long messageBodyLength;
 
     /** Creates a new instance. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageUtil.java
Patch:
@@ -254,8 +254,7 @@ public static String toMethodString(@RtspRequest.Method int method) {
     }
   }
 
-  @RtspRequest.Method
-  private static int parseMethodString(String method) {
+  private static @RtspRequest.Method int parseMethodString(String method) {
     switch (method) {
       case "ANNOUNCE":
         return METHOD_ANNOUNCE;

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspRequest.java
Patch:
@@ -86,7 +86,7 @@
   /** The {@link Uri} to which this request is sent. */
   public final Uri uri;
   /** The request method, as defined in {@link Method}. */
-  @Method public final int method;
+  public final @Method int method;
   /** The headers of this request. */
   public final RtspHeaders headers;
   /** The body of this RTSP message, or empty string if absent. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpH264Reader.java
Patch:
@@ -58,7 +58,7 @@
   private final RtpPayloadFormat payloadFormat;
 
   private @MonotonicNonNull TrackOutput trackOutput;
-  @C.BufferFlags private int bufferFlags;
+  private @C.BufferFlags int bufferFlags;
 
   private long firstReceivedTimestamp;
   private int previousSequenceNumber;
@@ -296,8 +296,7 @@ private static long toSampleUs(
             /* divisor= */ MEDIA_CLOCK_FREQUENCY);
   }
 
-  @C.BufferFlags
-  private static int getBufferFlagsFromNalType(int nalType) {
+  private static @C.BufferFlags int getBufferFlagsFromNalType(int nalType) {
     return nalType == NAL_UNIT_TYPE_IDR ? C.BUFFER_FLAG_KEY_FRAME : 0;
   }
 }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -540,7 +540,7 @@ public interface DebugViewProvider {
 
   @Nullable private MuxerWrapper muxerWrapper;
   @Nullable private ExoPlayer player;
-  @ProgressState private int progressState;
+  private @ProgressState int progressState;
 
   private Transformer(
       Context context,
@@ -741,8 +741,7 @@ public Looper getApplicationLooper() {
    * @return The {@link ProgressState}.
    * @throws IllegalStateException If this method is called from the wrong thread.
    */
-  @ProgressState
-  public int getProgress(ProgressHolder progressHolder) {
+  public @ProgressState int getProgress(ProgressHolder progressHolder) {
     verifyApplicationThread();
     if (progressState == PROGRESS_STATE_AVAILABLE) {
       Player player = checkNotNull(this.player);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerBaseRenderer.java
Patch:
@@ -67,8 +67,7 @@ public TransformerBaseRenderer(
    * @return The {@link Capabilities} for this format.
    */
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     return RendererCapabilities.create(
         MimeTypes.getTrackType(format.sampleMimeType) == getTrackType()
             ? C.FORMAT_HANDLED

File: robolectricutils/src/main/java/com/google/android/exoplayer2/robolectric/TestDownloadManagerListener.java
Patch:
@@ -42,7 +42,7 @@ public final class TestDownloadManagerListener implements DownloadManager.Listen
   private final ConditionVariable initializedCondition;
   private final ConditionVariable idleCondition;
 
-  @Download.FailureReason private int failureReason;
+  private @Download.FailureReason int failureReason;
 
   public TestDownloadManagerListener(DownloadManager downloadManager) {
     this.downloadManager = downloadManager;

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java
Patch:
@@ -493,7 +493,7 @@ protected void doActionImpl(
   /** Calls {@link Player#setRepeatMode(int)}. */
   public static final class SetRepeatMode extends Action {
 
-    @Player.RepeatMode private final int repeatMode;
+    private final @Player.RepeatMode int repeatMode;
 
     /**
      * @param tag A tag to use for logging.
@@ -740,7 +740,7 @@ public static final class WaitForTimelineChanged extends Action {
 
     @Nullable private final Timeline expectedTimeline;
     private final boolean ignoreExpectedReason;
-    @Player.TimelineChangeReason private final int expectedReason;
+    private final @Player.TimelineChangeReason int expectedReason;
 
     /**
      * Creates action waiting for a timeline change for a given reason.
@@ -907,7 +907,7 @@ protected void doActionImpl(
    */
   public static final class WaitForPlaybackState extends Action {
 
-    @Player.State private final int targetPlaybackState;
+    private final @Player.State int targetPlaybackState;
 
     /**
      * @param tag A tag to use for logging.

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/CapturingAudioSink.java
Patch:
@@ -91,7 +91,7 @@ public void dump(Dumper dumper) {
 
   private static final class DumpableConfiguration implements Dumper.Dumpable {
 
-    @C.PcmEncoding private final int inputPcmEncoding;
+    private final @C.PcmEncoding int inputPcmEncoding;
     private final int inputChannelCount;
     private final int inputSampleRate;
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DownloadBuilder.java
Patch:
@@ -45,7 +45,7 @@ public final class DownloadBuilder {
   @Nullable private String cacheKey;
   private byte[] customMetadata;
 
-  @Download.State private int state;
+  private @Download.State int state;
   private long startTimeMs;
   private long updateTimeMs;
   private long contentLength;

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DumpFileAsserts.java
Patch:
@@ -70,7 +70,7 @@ public class DumpFileAsserts {
   /** Write output to folder {@code /storage/emulated/0/Android/data} of device. */
   private static final int WRITE_TO_DEVICE = 1 << 1;
 
-  @DumpFilesAction private static final int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
+  private static final @DumpFilesAction int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
 
   private DumpFileAsserts() {}
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExoMediaDrm.java
Patch:
@@ -396,8 +396,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCryptoExcep
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return FakeCryptoConfig.TYPE;
   }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeRenderer.java
Patch:
@@ -160,8 +160,7 @@ public boolean isEnded() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) throws ExoPlaybackException {
+  public @Capabilities int supportsFormat(Format format) throws ExoPlaybackException {
     int trackType = MimeTypes.getTrackType(format.sampleMimeType);
     return trackType != C.TRACK_TYPE_UNKNOWN && trackType == getTrackType()
         ? RendererCapabilities.create(C.FORMAT_HANDLED, ADAPTIVE_SEAMLESS, TUNNELING_NOT_SUPPORTED)

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeSampleStream.java
Patch:
@@ -293,7 +293,7 @@ private void maybeNotifyDownstreamFormat(long timeUs) {
 
   private static class SampleInfo {
     public final byte[] data;
-    @C.BufferFlags public final int flags;
+    public final @C.BufferFlags int flags;
     public final long timeUs;
 
     public SampleInfo(byte[] data, @C.BufferFlags int flags, long timeUs) {

File: extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/FlacExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.ext.flac;
 
 import static com.google.android.exoplayer2.util.Util.getPcmEncoding;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -40,6 +41,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.nio.ByteBuffer;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNull;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
@@ -61,6 +63,7 @@ public final class FlacExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_DISABLE_ID3_METADATA})

File: library/common/src/main/java/com/google/android/exoplayer2/PlaybackException.java
Patch:
@@ -406,6 +406,7 @@ public boolean errorInfoEquals(@Nullable PlaybackException other) {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       open = true,
       value = {

File: library/common/src/main/java/com/google/android/exoplayer2/text/span/TextAnnotation.java
Patch:
@@ -15,11 +15,13 @@
  */
 package com.google.android.exoplayer2.text.span;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import androidx.annotation.IntDef;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 
 /** Properties of a text annotation (i.e. ruby, text emphasis marks). */
 public final class TextAnnotation {
@@ -55,6 +57,7 @@ public final class TextAnnotation {
    */
   @Documented
   @Retention(SOURCE)
+  @Target(TYPE_USE)
   @IntDef({POSITION_UNKNOWN, POSITION_BEFORE, POSITION_AFTER})
   public @interface Position {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/util/FileTypes.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.util;
 
 import static com.google.android.exoplayer2.util.MimeTypes.normalizeMimeType;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import androidx.annotation.IntDef;
@@ -24,6 +25,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.List;
 import java.util.Map;
 
@@ -37,6 +39,7 @@ public final class FileTypes {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     UNKNOWN, AC3, AC4, ADTS, AMR, FLAC, FLV, MATROSKA, MP3, MP4, OGG, PS, TS, WAV, WEBVTT, JPEG
   })

File: library/common/src/main/java/com/google/android/exoplayer2/util/NotificationUtil.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.util;
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.app.Notification;
@@ -29,6 +30,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** Utility methods for displaying {@link Notification Notifications}. */
 @SuppressLint("InlinedApi")
@@ -41,6 +43,7 @@ public final class NotificationUtil {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     IMPORTANCE_UNSPECIFIED,
     IMPORTANCE_NONE,

File: library/core/src/main/java/com/google/android/exoplayer2/AudioFocusManager.java
Patch:
@@ -62,6 +62,7 @@ public interface PlayerControl {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     PLAYER_COMMAND_DO_NOT_PLAY,
     PLAYER_COMMAND_WAIT_FOR_CALLBACK,

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
Patch:
@@ -19,6 +19,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.media.ResourceBusyException;
@@ -47,6 +48,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -260,6 +262,7 @@ private MissingSchemeDataException(UUID uuid) {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({MODE_PLAYBACK, MODE_QUERY, MODE_DOWNLOAD, MODE_RELEASE})
   public @interface Mode {}
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/source/ClippingMediaSource.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -31,6 +32,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 
 /**
@@ -48,6 +50,7 @@ public static final class IllegalClippingException extends IOException {
      */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({REASON_INVALID_PERIOD_COUNT, REASON_NOT_SEEKABLE_TO_START, REASON_START_EXCEEDS_END})
     public @interface Reason {}
     /** The wrapped source doesn't consist of a single period. */

File: library/core/src/main/java/com/google/android/exoplayer2/source/MergingMediaSource.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -31,6 +32,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -50,6 +52,7 @@ public static final class IllegalMergeException extends IOException {
     /** The reason the merge failed. One of {@link #REASON_PERIOD_COUNT_MISMATCH}. */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({REASON_PERIOD_COUNT_MISMATCH})
     public @interface Reason {}
     /** The sources have different period counts. */

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/AdsMediaSource.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import android.os.Handler;
@@ -45,6 +46,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -71,6 +73,7 @@ public static final class AdLoadException extends IOException {
      */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({TYPE_AD, TYPE_AD_GROUP, TYPE_ALL_ADS, TYPE_UNEXPECTED})
     public @interface Type {}
     /** Type for when an ad failed to load. The ad will be skipped. */

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
Patch:
@@ -1420,6 +1420,7 @@ private static String keyForField(@FieldNumber int field) {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({SELECTION_ELIGIBILITY_NO, SELECTION_ELIGIBILITY_FIXED, SELECTION_ELIGIBILITY_ADAPTIVE})
   protected @interface SelectionEligibility {}
 

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/LoadErrorHandlingPolicy.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.upstream;
 
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -28,6 +29,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * A policy that defines how load errors are handled.
@@ -52,6 +54,7 @@ public interface LoadErrorHandlingPolicy {
   /** Fallback type. One of {@link #FALLBACK_TYPE_LOCATION} or {@link #FALLBACK_TYPE_TRACK}. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FALLBACK_TYPE_LOCATION, FALLBACK_TYPE_TRACK})
   @interface FallbackType {}
 

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import androidx.annotation.IntDef;
@@ -41,6 +42,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -328,6 +330,7 @@ public interface EventListener {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/flac/FlacExtractor.java
Patch:
@@ -65,6 +65,7 @@ public final class FlacExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_DISABLE_ID3_METADATA})

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -21,6 +21,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import android.util.SparseArray;
@@ -58,6 +59,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.util.ArrayList;
@@ -85,6 +87,7 @@ public class MatroskaExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_DISABLE_SEEK_FOR_CUES})

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -21,6 +21,7 @@
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static com.google.android.exoplayer2.util.Util.nullSafeArrayCopy;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import android.util.SparseArray;
@@ -56,6 +57,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -78,6 +80,7 @@ public class FragmentedMp4Extractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Mp4Extractor.java
Patch:
@@ -74,6 +74,7 @@ public final class Mp4Extractor implements Extractor, SeekMap {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractor.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.android.exoplayer2.extractor.ts.TsPayloadReader.FLAG_DATA_ALIGNMENT_INDICATOR;
 import static com.google.android.exoplayer2.metadata.id3.Id3Decoder.ID3_HEADER_LENGTH;
 import static com.google.android.exoplayer2.metadata.id3.Id3Decoder.ID3_TAG;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import com.google.android.exoplayer2.C;
@@ -40,6 +41,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -56,6 +58,7 @@ public final class AdtsExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_ENABLE_CONSTANT_BITRATE_SEEKING, FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS})

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.extractor.ts;
 
 import static com.google.android.exoplayer2.extractor.ts.TsPayloadReader.FLAG_PAYLOAD_UNIT_START_INDICATOR;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.SparseArray;
 import android.util.SparseBooleanArray;
@@ -44,6 +45,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -63,6 +65,7 @@ public final class TsExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({MODE_MULTI_PMT, MODE_SINGLE_PMT, MODE_HLS})
   public @interface Mode {}
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCssStyle.java
Patch:
@@ -49,6 +49,7 @@ public final class WebvttCssStyle {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {UNSPECIFIED, STYLE_NORMAL, STYLE_BOLD, STYLE_ITALIC, STYLE_BOLD_ITALIC})
@@ -65,6 +66,7 @@ public final class WebvttCssStyle {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({UNSPECIFIED, FONT_SIZE_UNIT_PIXEL, FONT_SIZE_UNIT_EM, FONT_SIZE_UNIT_PERCENT})
   public @interface FontSizeUnit {}
 

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylist.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import androidx.annotation.IntDef;
@@ -30,6 +31,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -385,6 +387,7 @@ public RenditionReport(Uri playlistUri, long lastMediaSequence, int lastPartInde
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({PLAYLIST_TYPE_UNKNOWN, PLAYLIST_TYPE_VOD, PLAYLIST_TYPE_EVENT})
   public @interface PlaylistType {}
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -23,6 +23,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.graphics.Matrix;
@@ -62,6 +63,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /**
@@ -501,6 +503,7 @@ public interface DebugViewProvider {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     PROGRESS_STATE_WAITING_FOR_AVAILABILITY,
     PROGRESS_STATE_AVAILABLE,

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.android.exoplayer2.Player.COMMAND_GET_TEXT;
 import static com.google.android.exoplayer2.Player.COMMAND_SET_VIDEO_SURFACE;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.content.Context;
@@ -64,6 +65,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
@@ -261,6 +263,7 @@ public class PlayerView extends FrameLayout implements AdViewProvider {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({SHOW_BUFFERING_NEVER, SHOW_BUFFERING_WHEN_PLAYING, SHOW_BUFFERING_ALWAYS})
   public @interface ShowBuffering {}
   /** The buffering view is never shown. */

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.android.exoplayer2.Player.COMMAND_GET_TEXT;
 import static com.google.android.exoplayer2.Player.COMMAND_SET_VIDEO_SURFACE;
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.content.Context;
@@ -65,6 +66,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
@@ -183,6 +185,7 @@ public class StyledPlayerView extends FrameLayout implements AdViewProvider {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({SHOW_BUFFERING_NEVER, SHOW_BUFFERING_WHEN_PLAYING, SHOW_BUFFERING_ALWAYS})
   public @interface ShowBuffering {}
   /** The buffering view is never shown. */

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/SubtitleView.java
Patch:
@@ -16,6 +16,7 @@
  */
 package com.google.android.exoplayer2.ui;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.content.Context;
@@ -35,6 +36,7 @@
 import com.google.android.exoplayer2.util.Util;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -111,6 +113,7 @@ void update(
    */
   @Documented
   @Retention(SOURCE)
+  @Target(TYPE_USE)
   @IntDef({VIEW_TYPE_CANVAS, VIEW_TYPE_WEB})
   public @interface ViewType {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -729,6 +729,7 @@ private C() {}
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       open = true,
       value = {

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaLoadData.java
Patch:
@@ -41,7 +41,7 @@ public final class MediaLoadData {
    * One of the {@link SelectionReason selection reasons} if the data belongs to a track. {@link
    * C#SELECTION_REASON_UNKNOWN} otherwise.
    */
-  public final int trackSelectionReason;
+  public final @C.SelectionReason int trackSelectionReason;
   /**
    * Optional data associated with the selection of the track to which the data belongs. Null if the
    * data does not belong to a track.

File: library/core/src/main/java/com/google/android/exoplayer2/source/MergingMediaPeriod.java
Patch:
@@ -546,7 +546,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return trackSelection.getSelectionReason();
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/AdaptiveTrackSelection.java
Patch:
@@ -313,7 +313,7 @@ protected AdaptiveTrackSelection createAdaptiveTrackSelection(
 
   private float playbackSpeed;
   private int selectedIndex;
-  private int reason;
+  private @C.SelectionReason int reason;
   private long lastBufferEvaluationMs;
   @Nullable private MediaChunk lastBufferEvaluationMediaChunk;
 
@@ -446,7 +446,7 @@ public void updateSelectedTrack(
     }
 
     int previousSelectedIndex = selectedIndex;
-    int previousReason = reason;
+    @C.SelectionReason int previousReason = reason;
     int formatIndexOfPreviousChunk =
         queue.isEmpty() ? C.INDEX_UNSET : indexOf(Iterables.getLast(queue).trackFormat);
     if (formatIndexOfPreviousChunk != C.INDEX_UNSET) {
@@ -484,7 +484,7 @@ public int getSelectedIndex() {
   }
 
   @Override
-  public int getSelectionReason() {
+  public @C.SelectionReason int getSelectionReason() {
     return reason;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/ExoTrackSelection.java
Patch:
@@ -122,6 +122,7 @@ ExoTrackSelection[] createTrackSelections(
   int getSelectedIndex();
 
   /** Returns the reason for the current track selection. */
+  @C.SelectionReason
   int getSelectionReason();
 
   /** Returns optional data associated with the current track selection. */

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
Patch:
@@ -915,7 +915,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackSelection.java
Patch:
@@ -114,7 +114,7 @@ public int getSelectedIndex() {
   }
 
   @Override
-  public int getSelectionReason() {
+  public @C.SelectionReason int getSelectionReason() {
     return C.SELECTION_REASON_UNKNOWN;
   }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/MediaPeriodAsserts.java
Patch:
@@ -238,7 +238,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java
Patch:
@@ -161,7 +161,7 @@ protected DashManifest parseMediaPresentationDescription(XmlPullParser xpp, Uri
       } else if (XmlPullParserUtil.isStartTag(xpp, "UTCTiming")) {
         utcTiming = parseUtcTiming(xpp);
       } else if (XmlPullParserUtil.isStartTag(xpp, "Location")) {
-        location = Uri.parse(xpp.nextText());
+        location = UriUtil.resolveToUri(documentBaseUri.toString(), xpp.nextText());
       } else if (XmlPullParserUtil.isStartTag(xpp, "ServiceDescription")) {
         serviceDescription = parseServiceDescription(xpp);
       } else if (XmlPullParserUtil.isStartTag(xpp, "Period") && !seenEarlyAccessPeriod) {

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdTagLoader.java
Patch:
@@ -23,6 +23,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.net.Uri;
@@ -69,6 +70,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -108,6 +110,7 @@
   /** The state of ad playback. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({IMA_AD_STATE_NONE, IMA_AD_STATE_PLAYING, IMA_AD_STATE_PAUSED})
   private @interface ImaAdState {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/DeviceInfo.java
Patch:
@@ -87,6 +87,7 @@ public int hashCode() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_PLAYBACK_TYPE, FIELD_MIN_VOLUME, FIELD_MAX_VOLUME})
   private @interface FieldNumber {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/HeartRating.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2;
 
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.IntDef;
@@ -24,6 +25,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * A rating expressed as "heart" or "no heart". It can be used to indicate whether the content is a
@@ -80,6 +82,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_RATED, FIELD_IS_HEART})
   private @interface FieldNumber {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/MediaMetadata.java
Patch:
@@ -828,6 +828,7 @@ public int hashCode() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_TITLE,
     FIELD_ARTIST,

File: library/common/src/main/java/com/google/android/exoplayer2/PercentageRating.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2;
 
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.FloatRange;
@@ -25,6 +26,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** A rating expressed as a percentage. */
 public final class PercentageRating extends Rating {
@@ -78,6 +80,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_PERCENT})
   private @interface FieldNumber {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -600,6 +600,7 @@ public int hashCode() {
     // Bundleable implementation.
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({
       FIELD_MEDIA_ITEM_INDEX,
       FIELD_MEDIA_ITEM,
@@ -894,6 +895,7 @@ public int hashCode() {
 
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({FIELD_COMMANDS})
     private @interface FieldNumber {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/StarRating.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2;
 
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.FloatRange;
@@ -26,6 +27,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** A rating expressed as a fractional number of stars. */
 public final class StarRating extends Rating {
@@ -105,6 +107,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_MAX_STARS, FIELD_STAR_RATING})
   private @interface FieldNumber {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/ThumbRating.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2;
 
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.IntDef;
@@ -24,6 +25,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** A rating expressed as "thumbs up" or "thumbs down". */
 public final class ThumbRating extends Rating {
@@ -77,6 +79,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_RATED, FIELD_IS_THUMBS_UP})
   private @interface FieldNumber {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/source/TrackGroup.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.source;
 
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.CheckResult;
@@ -31,6 +32,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Arrays;
 import java.util.List;
 
@@ -138,6 +140,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_FORMATS, FIELD_ID})
   private @interface FieldNumber {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/text/Cue.java
Patch:
@@ -961,6 +961,7 @@ public Cue build() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_TEXT,
     FIELD_TEXT_ALIGNMENT,

File: library/common/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelectionParameters.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.BundleableUtil.fromNullableBundle;
 import static com.google.common.base.MoreObjects.firstNonNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.graphics.Point;
@@ -36,6 +37,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Locale;
 import java.util.Set;
 import org.checkerframework.checker.initialization.qual.UnknownInitialization;
@@ -978,6 +980,7 @@ public int hashCode() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_PREFERRED_AUDIO_LANGUAGES,
     FIELD_PREFERRED_AUDIO_ROLE_FLAGS,

File: library/core/src/main/java/com/google/android/exoplayer2/AudioFocusManager.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2;
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.media.AudioFocusRequest;
@@ -32,6 +33,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /** Manages requesting and responding to changes in audio focus. */
@@ -76,6 +78,7 @@ public interface PlayerControl {
   /** Audio focus state. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     AUDIO_FOCUS_STATE_NO_FOCUS,
     AUDIO_FOCUS_STATE_HAVE_FOCUS,

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioTrackPositionTracker.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.media.AudioTimestamp;
 import android.media.AudioTrack;
@@ -30,6 +31,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.lang.reflect.Method;
 
 /**
@@ -111,6 +113,7 @@ void onSystemTimeUsMismatch(
   /** {@link AudioTrack} playback states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({PLAYSTATE_STOPPED, PLAYSTATE_PAUSED, PLAYSTATE_PLAYING})
   private @interface PlayState {}
   /** @see AudioTrack#PLAYSTATE_STOPPED */

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DecoderAudioRenderer.java
Patch:
@@ -21,6 +21,7 @@
 import static com.google.android.exoplayer2.source.SampleStream.FLAG_REQUIRE_FORMAT;
 import static com.google.common.base.MoreObjects.firstNonNull;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Handler;
 import android.os.SystemClock;
@@ -93,6 +94,7 @@ public abstract class DecoderAudioRenderer<
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @java.lang.annotation.Target(TYPE_USE)
   @IntDef({
     REINITIALIZATION_STATE_NONE,
     REINITIALIZATION_STATE_SIGNAL_END_OF_STREAM,

File: library/core/src/main/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessor.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.audio;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import com.google.android.exoplayer2.C;
@@ -24,6 +25,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.nio.ByteBuffer;
 
 /**
@@ -51,6 +53,7 @@ public final class SilenceSkippingAudioProcessor extends BaseAudioProcessor {
   /** Trimming states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_NOISY,
     STATE_MAYBE_SILENT,

File: library/core/src/main/java/com/google/android/exoplayer2/text/TextRenderer.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Handler;
 import android.os.Handler.Callback;
@@ -36,6 +37,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Collections;
 import java.util.List;
 
@@ -52,6 +54,7 @@ public final class TextRenderer extends BaseRenderer implements Callback {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     REPLACEMENT_STATE_NONE,
     REPLACEMENT_STATE_SIGNAL_END_OF_STREAM,

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/Loader.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.upstream;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.os.Handler;
@@ -33,6 +34,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -143,6 +145,7 @@ public interface ReleaseCallback {
   /** Types of action that can be taken in response to a load error. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     ACTION_TYPE_RETRY,
     ACTION_TYPE_RETRY_AND_RESET_ERROR_COUNT,

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaPeriod.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.source.dash;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import android.util.SparseArray;
@@ -60,6 +61,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.IdentityHashMap;
@@ -911,6 +913,7 @@ private static final class TrackGroupInfo {
 
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({CATEGORY_PRIMARY, CATEGORY_EMBEDDED, CATEGORY_MANIFEST_EVENTS})
     public @interface TrackGroupCategory {}
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/flac/FlacExtractor.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -41,6 +42,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /**
@@ -77,6 +79,7 @@ public final class FlacExtractor implements Extractor {
   /** Parser state. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READ_ID3_METADATA,
     STATE_GET_STREAM_MARKER_AND_INFO_BLOCK_BYTES,

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.extractor.flv;
 
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import com.google.android.exoplayer2.C;
@@ -32,6 +33,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -44,6 +46,7 @@ public final class FlvExtractor implements Extractor {
   /** Extractor states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READING_FLV_HEADER,
     STATE_SKIPPING_TO_TAG_HEADER,

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/jpeg/JpegExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.extractor.jpeg;
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -36,6 +37,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /** Extracts JPEG image using the Exif format. */
@@ -44,6 +46,7 @@ public final class JpegExtractor implements Extractor {
   /** Parser states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READING_MARKER,
     STATE_READING_SEGMENT_LENGTH,

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac3Reader.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.extractor.ts;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -33,6 +34,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -41,6 +43,7 @@ public final class Ac3Reader implements ElementaryStreamReader {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({STATE_FINDING_SYNC, STATE_READING_HEADER, STATE_READING_SAMPLE})
   private @interface State {}
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac4Reader.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.extractor.ts;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -33,6 +34,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -41,6 +43,7 @@ public final class Ac4Reader implements ElementaryStreamReader {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({STATE_FINDING_SYNC, STATE_READING_HEADER, STATE_READING_SAMPLE})
   private @interface State {}
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/ssa/SsaStyle.java
Patch:
@@ -18,6 +18,7 @@
 
 import static com.google.android.exoplayer2.text.ssa.SsaDecoder.STYLE_LINE_PREFIX;
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.graphics.Color;
@@ -35,6 +36,7 @@
 import com.google.common.primitives.Ints;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -61,6 +63,7 @@
    *   <li>{@link #SSA_ALIGNMENT_TOP_RIGHT}
    * </ul>
    */
+  @Target(TYPE_USE)
   @IntDef({
     SSA_ALIGNMENT_UNKNOWN,
     SSA_ALIGNMENT_BOTTOM_LEFT,

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCueParser.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.text.webvtt;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.graphics.Color;
@@ -46,6 +47,7 @@
 import com.google.android.exoplayer2.util.Util;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -74,6 +76,7 @@ public final class WebvttCueParser {
    */
   @Documented
   @Retention(SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     TEXT_ALIGNMENT_START,
     TEXT_ALIGNMENT_CENTER,

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspClient.java
Patch:
@@ -35,6 +35,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
 import static com.google.common.base.Strings.nullToEmpty;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import android.os.Handler;
@@ -61,6 +62,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.net.Socket;
 import java.util.ArrayDeque;
 import java.util.HashMap;
@@ -78,6 +80,7 @@
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({RTSP_STATE_UNINITIALIZED, RTSP_STATE_INIT, RTSP_STATE_READY, RTSP_STATE_PLAYING})
   public @interface RtspState {}
   /** RTSP uninitialized state, the state before sending any SETUP request. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageChannel.java
Patch:
@@ -19,6 +19,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Handler;
 import android.os.HandlerThread;
@@ -42,6 +43,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.net.Socket;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
@@ -339,6 +341,7 @@ private static final class MessageParser {
 
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({STATE_READING_FIRST_LINE, STATE_READING_HEADER, STATE_READING_BODY})
     @interface ReadingState {}
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DumpFileAsserts.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.testutil;
 
 import static com.google.common.truth.Truth.assertWithMessage;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import androidx.annotation.IntDef;
@@ -28,6 +29,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * Helper class to enable assertions based on golden-data dump files.
@@ -51,6 +53,7 @@ public class DumpFileAsserts {
   /** Possible actions to take with the dumps passed to {@link #assertOutput}. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {COMPARE_WITH_EXISTING, WRITE_TO_LOCAL, WRITE_TO_DEVICE})

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/WebServerDispatcher.java
Patch:
@@ -21,6 +21,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import androidx.annotation.IntDef;
@@ -33,6 +34,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Arrays;
 import java.util.List;
 import java.util.regex.Matcher;
@@ -66,6 +68,7 @@ public static class Resource {
      */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({GZIP_SUPPORT_DISABLED, GZIP_SUPPORT_ENABLED, GZIP_SUPPORT_FORCED})
     private @interface GzipSupport {}
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
Patch:
@@ -249,7 +249,10 @@
  * a layout file. This is achieved by setting the {@code player_layout_id} attribute on a
  * PlayerView. This will cause the specified layout to be inflated instead of {@code
  * exo_player_view.xml} for only the instance on which the attribute is set.
+ *
+ * @deprecated Use {@link StyledPlayerView} instead.
  */
+@Deprecated
 public class PlayerView extends FrameLayout implements AdViewProvider {
 
   /**

File: library/common/src/main/java/com/google/android/exoplayer2/DeviceInfo.java
Patch:
@@ -15,11 +15,12 @@
  */
 package com.google.android.exoplayer2;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
+
 import android.os.Bundle;
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -30,7 +31,7 @@ public final class DeviceInfo implements Bundleable {
   /** Types of playback. One of {@link #PLAYBACK_TYPE_LOCAL} or {@link #PLAYBACK_TYPE_REMOTE}. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({
     PLAYBACK_TYPE_LOCAL,
     PLAYBACK_TYPE_REMOTE,

File: library/common/src/main/java/com/google/android/exoplayer2/PlaybackException.java
Patch:
@@ -45,6 +45,8 @@ public class PlaybackException extends Exception implements Bundleable {
    * <p>This list of errors may be extended in future versions, and {@link Player} implementations
    * may define custom error codes.
    */
+  // @Target list includes both 'default' targets and TYPE_USE, to ensure backwards compatibility
+  // with Kotlin usages from before TYPE_USE was added.
   @Documented
   @Retention(RetentionPolicy.SOURCE)
   @Target({FIELD, METHOD, PARAMETER, LOCAL_VARIABLE, TYPE_USE})

File: library/common/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelection.java
Patch:
@@ -15,12 +15,13 @@
  */
 package com.google.android.exoplayer2.trackselection;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
+
 import androidx.annotation.IntDef;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.source.TrackGroup;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -39,7 +40,7 @@ public interface TrackSelection {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef(
       open = true,
       value = {TYPE_UNSET})

File: library/common/src/main/java/com/google/android/exoplayer2/ui/AdOverlayInfo.java
Patch:
@@ -36,6 +36,8 @@ public final class AdOverlayInfo {
    * The purpose of the overlay. One of {@link #PURPOSE_CONTROLS}, {@link #PURPOSE_CLOSE_AD}, {@link
    * #PURPOSE_OTHER} or {@link #PURPOSE_NOT_VISIBLE}.
    */
+  // @Target list includes both 'default' targets and TYPE_USE, to ensure backwards compatibility
+  // with Kotlin usages from before TYPE_USE was added.
   @Documented
   @Retention(RetentionPolicy.SOURCE)
   @Target({FIELD, METHOD, PARAMETER, LOCAL_VARIABLE, TYPE_USE})

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/PlaybackStats.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.SystemClock;
 import androidx.annotation.IntDef;
@@ -25,7 +26,6 @@
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.analytics.AnalyticsListener.EventTime;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -172,7 +172,7 @@ public int hashCode() {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({
     PLAYBACK_STATE_NOT_STARTED,
     PLAYBACK_STATE_JOINING_BACKGROUND,

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/wav/WavExtractor.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import androidx.annotation.IntDef;
@@ -37,7 +38,6 @@
 import com.google.android.exoplayer2.util.Util;
 import java.io.IOException;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -63,7 +63,7 @@ public final class WavExtractor implements Extractor {
   /** Parser state. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READING_FILE_TYPE,
     STATE_READING_RF64_SAMPLE_DATA_SIZE,

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaSource.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.source.hls;
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.os.Looper;
@@ -56,7 +57,6 @@
 import com.google.android.exoplayer2.util.Util;
 import java.io.IOException;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 import java.util.List;
@@ -83,7 +83,7 @@ public final class HlsMediaSource extends BaseMediaSource
    */
   @Documented
   @Retention(SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({METADATA_TYPE_ID3, METADATA_TYPE_EMSG})
   public @interface MetadataType {}
 

File: extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/FlacExtractor.java
Patch:
@@ -286,7 +286,7 @@ private static void outputSample(
     sampleData.setPosition(0);
     output.sampleData(sampleData, size);
     output.sampleMetadata(
-        timeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* encryptionData= */ null);
+        timeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* cryptoData= */ null);
   }
 
   /** A {@link SeekMap} implementation using a SeekTable within the Flac stream. */

File: library/common/src/main/java/com/google/android/exoplayer2/MediaItem.java
Patch:
@@ -1800,7 +1800,7 @@ private static MediaItem fromBundle(Bundle bundle) {
     return new MediaItem(
         mediaId,
         clippingConfiguration,
-        /* playbackProperties= */ null,
+        /* localConfiguration= */ null,
         liveConfiguration,
         mediaMetadata);
   }

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaPeriod.java
Patch:
@@ -1069,7 +1069,7 @@ public void onIcyMetadata(ParsableByteArray metadata) {
       TrackOutput icyTrackOutput = Assertions.checkNotNull(this.icyTrackOutput);
       icyTrackOutput.sampleData(metadata, length);
       icyTrackOutput.sampleMetadata(
-          timeUs, C.BUFFER_FLAG_KEY_FRAME, length, /* offset= */ 0, /* encryptionData= */ null);
+          timeUs, C.BUFFER_FLAG_KEY_FRAME, length, /* offset= */ 0, /* cryptoData= */ null);
       seenIcyMetadata = true;
     }
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/amr/AmrExtractor.java
Patch:
@@ -317,7 +317,7 @@ private int readSample(ExtractorInput extractorInput) throws IOException {
         C.BUFFER_FLAG_KEY_FRAME,
         currentSampleSize,
         /* offset= */ 0,
-        /* encryptionData= */ null);
+        /* cryptoData= */ null);
     currentSampleTimeUs += SAMPLE_TIME_PER_FRAME_US;
     return RESULT_CONTINUE;
   }

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/flac/FlacExtractor.java
Patch:
@@ -414,6 +414,6 @@ private void outputSampleMetadata() {
             C.BUFFER_FLAG_KEY_FRAME,
             currentFrameBytesWritten,
             /* offset= */ 0,
-            /* encryptionData= */ null);
+            /* cryptoData= */ null);
   }
 }

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/H263Reader.java
Patch:
@@ -473,7 +473,7 @@ public void onDataEnd(long position, int bytesWrittenPastPosition, boolean hasOu
         int size = (int) (position - samplePosition);
         @C.BufferFlags int flags = sampleIsKeyframe ? C.BUFFER_FLAG_KEY_FRAME : 0;
         output.sampleMetadata(
-            sampleTimeUs, flags, size, bytesWrittenPastPosition, /* encryptionData= */ null);
+            sampleTimeUs, flags, size, bytesWrittenPastPosition, /* cryptoData= */ null);
       }
       // Start a new sample, unless this is a 'group of video object plane' in which case we
       // include the data at the start of a 'video object plane' coming next.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/wav/WavExtractor.java
Patch:
@@ -367,7 +367,7 @@ public boolean sampleData(ExtractorInput input, long bytesLeft) throws IOExcepti
         int size = pendingFrames * bytesPerFrame;
         int offset = pendingOutputBytes - size;
         trackOutput.sampleMetadata(
-            timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* encryptionData= */ null);
+            timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* cryptoData= */ null);
         outputFrameCount += pendingFrames;
         pendingOutputBytes = offset;
       }
@@ -546,7 +546,7 @@ private void writeSampleMetadata(int sampleFrames) {
       int size = numOutputFramesToBytes(sampleFrames);
       int offset = pendingOutputBytes - size;
       trackOutput.sampleMetadata(
-          timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* encryptionData= */ null);
+          timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* cryptoData= */ null);
       outputFrameCount += sampleFrames;
       pendingOutputBytes -= size;
     }

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpAacReader.java
Patch:
@@ -151,7 +151,7 @@ public void seek(long nextRtpTimestamp, long timeUs) {
 
   private static void outputSampleMetadata(TrackOutput trackOutput, long sampleTimeUs, int size) {
     trackOutput.sampleMetadata(
-        sampleTimeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* encryptionData= */ null);
+        sampleTimeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* cryptoData= */ null);
   }
 
   /** Returns the correct sample time from RTP timestamp, accounting for the AAC sampling rate. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpAc3Reader.java
Patch:
@@ -138,7 +138,7 @@ private void processSingleFramePacket(ParsableByteArray data, long sampleTimeUs)
             /* flags= */ C.BUFFER_FLAG_KEY_FRAME,
             /* size= */ frameSize,
             /* offset= */ 0,
-            /* encryptionData= */ null);
+            /* cryptoData= */ null);
   }
 
   private void processMultiFramePacket(ParsableByteArray data, int numOfFrames, long sampleTimeUs) {
@@ -157,7 +157,7 @@ private void processMultiFramePacket(ParsableByteArray data, int numOfFrames, lo
               /* flags= */ C.BUFFER_FLAG_KEY_FRAME,
               /* size= */ frameInfo.frameSize,
               /* offset= */ 0,
-              /* encryptionData= */ null);
+              /* cryptoData= */ null);
 
       sampleTimeUs += (frameInfo.sampleCount / frameInfo.sampleRate) * C.MICROS_PER_SECOND;
       // Advance the position by the number of bytes read.
@@ -203,7 +203,7 @@ private void outputSampleMetadataForFragmentedPackets() {
             /* flags= */ C.BUFFER_FLAG_KEY_FRAME,
             /* size= */ numBytesPendingMetadataOutput,
             /* offset= */ 0,
-            /* encryptionData= */ null);
+            /* cryptoData= */ null);
     numBytesPendingMetadataOutput = 0;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -890,8 +890,7 @@ private static MediaSource createMediaSourceInternal(
       MediaItem mediaItem,
       DataSource.Factory dataSourceFactory,
       @Nullable DrmSessionManager drmSessionManager) {
-    return new DefaultMediaSourceFactory(
-            dataSourceFactory, ExtractorsFactory.EMPTY, /* serverSideDaiMediaSourceFactory= */ null)
+    return new DefaultMediaSourceFactory(dataSourceFactory, ExtractorsFactory.EMPTY)
         .setDrmSessionManagerProvider(
             drmSessionManager != null ? unusedMediaItem -> drmSessionManager : null)
         .createMediaSource(mediaItem);

File: libraries/ui/src/main/java/androidx/media3/ui/PlayerView.java
Patch:
@@ -424,7 +424,7 @@ public PlayerView(Context context, @Nullable AttributeSet attrs, int defStyleAtt
     if (customController != null) {
       this.controller = customController;
     } else if (controllerPlaceholder != null) {
-      // Propagate attrs as playbackAttrs so that StyledPlayerControlView's custom attributes are
+      // Propagate attrs as playbackAttrs so that PlayerControlView's custom attributes are
       // transferred, but standard attributes (e.g. background) are not.
       this.controller = new PlayerControlView(context, null, 0, attrs);
       controller.setId(R.id.exo_controller);
@@ -1522,7 +1522,7 @@ public void onClick(View view) {
       toggleControllerVisibility();
     }
 
-    // StyledPlayerControlView.VisibilityListener implementation
+    // PlayerControlView.VisibilityListener implementation
 
     @Override
     public void onVisibilityChange(int visibility) {

File: libraries/common/src/main/java/androidx/media3/common/AdPlaybackState.java
Patch:
@@ -67,7 +67,7 @@ public static final class AdGroup implements Bundleable {
     /** The URI of each ad in the ad group. */
     public final @NullableType Uri[] uris;
     /** The state of each ad in the ad group. */
-    @AdState public final int[] states;
+    public final @AdState int[] states;
     /** The durations of each ad in the ad group, in microseconds. */
     public final long[] durationsUs;
     /**

File: libraries/common/src/main/java/androidx/media3/common/BasePlayer.java
Patch:
@@ -384,8 +384,7 @@ public final long getContentDuration() {
         : timeline.getWindow(getCurrentMediaItemIndex(), window).getDurationMs();
   }
 
-  @RepeatMode
-  private int getRepeatModeForNavigation() {
+  private @RepeatMode int getRepeatModeForNavigation() {
     @RepeatMode int repeatMode = getRepeatMode();
     return repeatMode == REPEAT_MODE_ONE ? REPEAT_MODE_OFF : repeatMode;
   }

File: libraries/common/src/main/java/androidx/media3/common/C.java
Patch:
@@ -1247,8 +1247,8 @@ public static String getFormatSupportString(@FormatSupport int formatSupport) {
       replacement = "Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode)",
       imports = {"androidx.media3.common.util.Util"})
   @Deprecated
-  @PlaybackException.ErrorCode
-  public static int getErrorCodeForMediaDrmErrorCode(int mediaDrmErrorCode) {
+  public static @PlaybackException.ErrorCode int getErrorCodeForMediaDrmErrorCode(
+      int mediaDrmErrorCode) {
     return Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode);
   }
 }

File: libraries/common/src/main/java/androidx/media3/common/DrmInitData.java
Patch:
@@ -52,7 +52,8 @@ public final class DrmInitData implements Comparator<SchemeData>, Parcelable {
    * @param mediaData DRM session acquisition data obtained from the media.
    * @return A {@link DrmInitData} obtained from merging a media manifest and a media stream.
    */
-  public static @Nullable DrmInitData createSessionCreationData(
+  @Nullable
+  public static DrmInitData createSessionCreationData(
       @Nullable DrmInitData manifestData, @Nullable DrmInitData mediaData) {
     ArrayList<SchemeData> result = new ArrayList<>();
     String schemeType = null;

File: libraries/common/src/main/java/androidx/media3/common/HeartRating.java
Patch:
@@ -79,7 +79,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_HEART;
+  private static final @RatingType int TYPE = RATING_TYPE_HEART;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: libraries/common/src/main/java/androidx/media3/common/MediaMetadata.java
Patch:
@@ -56,11 +56,11 @@ public static final class Builder {
     @Nullable private Rating userRating;
     @Nullable private Rating overallRating;
     @Nullable private byte[] artworkData;
-    @Nullable @PictureType private Integer artworkDataType;
+    @Nullable private @PictureType Integer artworkDataType;
     @Nullable private Uri artworkUri;
     @Nullable private Integer trackNumber;
     @Nullable private Integer totalTrackCount;
-    @Nullable @FolderType private Integer folderType;
+    @Nullable private @FolderType Integer folderType;
     @Nullable private Boolean isPlayable;
     @Nullable private Integer recordingYear;
     @Nullable private Integer recordingMonth;

File: libraries/common/src/main/java/androidx/media3/common/PercentageRating.java
Patch:
@@ -77,7 +77,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_PERCENTAGE;
+  private static final @RatingType int TYPE = RATING_TYPE_PERCENTAGE;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: libraries/common/src/main/java/androidx/media3/common/Player.java
Patch:
@@ -686,8 +686,7 @@ final class Commands implements Bundleable {
     @UnstableApi
     public static final class Builder {
 
-      @Command
-      private static final int[] SUPPORTED_COMMANDS = {
+      private static final @Command int[] SUPPORTED_COMMANDS = {
         COMMAND_PLAY_PAUSE,
         COMMAND_PREPARE,
         COMMAND_STOP,

File: libraries/common/src/main/java/androidx/media3/common/StarRating.java
Patch:
@@ -103,7 +103,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_STAR;
+  private static final @RatingType int TYPE = RATING_TYPE_STAR;
   private static final int MAX_STARS_DEFAULT = 5;
 
   @Documented

File: libraries/common/src/main/java/androidx/media3/common/ThumbRating.java
Patch:
@@ -76,7 +76,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_THUMB;
+  private static final @RatingType int TYPE = RATING_TYPE_THUMB;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: libraries/common/src/main/java/androidx/media3/common/TrackGroup.java
Patch:
@@ -207,8 +207,7 @@ private static String normalizeLanguage(@Nullable String language) {
     return language == null || language.equals(C.LANGUAGE_UNDETERMINED) ? "" : language;
   }
 
-  @C.RoleFlags
-  private static int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
+  private static @C.RoleFlags int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
     // Treat trick-play and non-trick-play formats as compatible.
     return roleFlags | C.ROLE_FLAG_TRICK_PLAY;
   }

File: libraries/common/src/main/java/androidx/media3/common/text/RubySpan.java
Patch:
@@ -39,7 +39,7 @@ public final class RubySpan implements LanguageFeatureSpan {
   public final String rubyText;
 
   /** The position of the ruby text relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public RubySpan(String rubyText, @TextAnnotation.Position int position) {
     this.rubyText = rubyText;

File: libraries/common/src/main/java/androidx/media3/common/text/TextEmphasisSpan.java
Patch:
@@ -83,13 +83,13 @@ public final class TextEmphasisSpan implements LanguageFeatureSpan {
   public static final int MARK_FILL_OPEN = 2;
 
   /** The mark shape used for text emphasis. */
-  @MarkShape public int markShape;
+  public @MarkShape int markShape;
 
   /** The mark fill for the text emphasis mark. */
-  @MarkShape public int markFill;
+  public @MarkShape int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public TextEmphasisSpan(
       @MarkShape int shape, @MarkFill int fill, @TextAnnotation.Position int position) {

File: libraries/datasource/src/main/java/androidx/media3/datasource/DataSourceException.java
Patch:
@@ -57,7 +57,7 @@ public static boolean isCausedByPositionOutOfRange(IOException e) {
    * The reason of this {@link DataSourceException}, should be one of the {@code ERROR_CODE_IO_*} in
    * {@link PlaybackException.ErrorCode}.
    */
-  @PlaybackException.ErrorCode public final int reason;
+  public final @PlaybackException.ErrorCode int reason;
 
   /**
    * Constructs a DataSourceException.

File: libraries/datasource/src/main/java/androidx/media3/datasource/HttpDataSource.java
Patch:
@@ -233,7 +233,7 @@ public static HttpDataSourceException createForIOException(
     /** The {@link DataSpec} associated with the current connection. */
     public final DataSpec dataSpec;
 
-    @Type public final int type;
+    public final @Type int type;
 
     /**
      * @deprecated Use {@link #HttpDataSourceException(DataSpec, int, int)
@@ -349,8 +349,8 @@ public HttpDataSourceException(
       this.type = type;
     }
 
-    @PlaybackException.ErrorCode
-    private static int assignErrorCode(@PlaybackException.ErrorCode int errorCode, @Type int type) {
+    private static @PlaybackException.ErrorCode int assignErrorCode(
+        @PlaybackException.ErrorCode int errorCode, @Type int type) {
       return errorCode == PlaybackException.ERROR_CODE_IO_UNSPECIFIED && type == TYPE_OPEN
           ? PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED
           : errorCode;

File: libraries/datasource/src/main/java/androidx/media3/datasource/cache/CacheDataSource.java
Patch:
@@ -72,7 +72,7 @@ public static final class Factory implements DataSource.Factory {
     @Nullable private DataSource.Factory upstreamDataSourceFactory;
     @Nullable private PriorityTaskManager upstreamPriorityTaskManager;
     private int upstreamPriority;
-    @CacheDataSource.Flags private int flags;
+    private @CacheDataSource.Flags int flags;
     @Nullable private CacheDataSource.EventListener eventListener;
 
     public Factory() {

File: libraries/decoder/src/main/java/androidx/media3/decoder/Buffer.java
Patch:
@@ -22,7 +22,7 @@
 @UnstableApi
 public abstract class Buffer {
 
-  @C.BufferFlags private int flags;
+  private @C.BufferFlags int flags;
 
   /** Clears the buffer. */
   public void clear() {

File: libraries/decoder/src/main/java/androidx/media3/decoder/CryptoInfo.java
Patch:
@@ -48,7 +48,7 @@ public final class CryptoInfo {
    *
    * @see android.media.MediaCodec.CryptoInfo#mode
    */
-  @C.CryptoMode public int mode;
+  public @C.CryptoMode int mode;
   /**
    * The number of leading unencrypted bytes in each sub-sample. If null, all bytes are treated as
    * encrypted and {@link #numBytesOfEncryptedData} must be specified.

File: libraries/decoder/src/main/java/androidx/media3/decoder/DecoderInputBuffer.java
Patch:
@@ -111,7 +111,7 @@ public InsufficientCapacityException(int currentCapacity, int requiredCapacity)
    */
   @Nullable public ByteBuffer supplementalData;
 
-  @BufferReplacementMode private final int bufferReplacementMode;
+  private final @BufferReplacementMode int bufferReplacementMode;
   private final int paddingSize;
 
   /** Returns a new instance that's not able to hold any data. */

File: libraries/decoder/src/main/java/androidx/media3/decoder/VideoDecoderOutputBuffer.java
Patch:
@@ -34,7 +34,7 @@ public class VideoDecoderOutputBuffer extends DecoderOutputBuffer {
   public int decoderPrivate;
 
   /** Output mode. */
-  @C.VideoOutputMode public int mode;
+  public @C.VideoOutputMode int mode;
   /** RGB buffer for RGB mode. */
   @Nullable public ByteBuffer data;
 

File: libraries/decoder_av1/src/main/java/androidx/media3/decoder/av1/Gav1Decoder.java
Patch:
@@ -41,7 +41,7 @@ public final class Gav1Decoder
 
   private final long gav1DecoderContext;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a Gav1Decoder.

File: libraries/decoder_av1/src/main/java/androidx/media3/decoder/av1/Libgav1VideoRenderer.java
Patch:
@@ -128,8 +128,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!MimeTypes.VIDEO_AV1.equalsIgnoreCase(format.sampleMimeType)
         || !Gav1Library.isAvailable()) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: libraries/decoder_ffmpeg/src/main/java/androidx/media3/decoder/ffmpeg/FfmpegAudioDecoder.java
Patch:
@@ -41,7 +41,7 @@
 
   private final String codecName;
   @Nullable private final byte[] extraData;
-  @C.PcmEncoding private final int encoding;
+  private final @C.PcmEncoding int encoding;
   private final int outputBufferSize;
 
   private long nativeContext; // May be reassigned on resetting the codec.
@@ -158,8 +158,7 @@ public int getSampleRate() {
   }
 
   /** Returns the encoding of output audio. */
-  @C.PcmEncoding
-  public int getEncoding() {
+  public @C.PcmEncoding int getEncoding() {
     return encoding;
   }
 

File: libraries/decoder_flac/src/main/java/androidx/media3/decoder/flac/LibflacAudioRenderer.java
Patch:
@@ -79,8 +79,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     if (!FlacLibrary.isAvailable()
         || !MimeTypes.AUDIO_FLAC.equalsIgnoreCase(format.sampleMimeType)) {
       return C.FORMAT_UNSUPPORTED_TYPE;

File: libraries/decoder_opus/src/main/java/androidx/media3/decoder/opus/LibopusAudioRenderer.java
Patch:
@@ -80,8 +80,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     boolean drmIsSupported = OpusLibrary.supportsCryptoType(format.cryptoType);
     if (!OpusLibrary.isAvailable()
         || !MimeTypes.AUDIO_OPUS.equalsIgnoreCase(format.sampleMimeType)) {

File: libraries/decoder_vp9/src/main/java/androidx/media3/decoder/vp9/LibvpxVideoRenderer.java
Patch:
@@ -126,8 +126,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!VpxLibrary.isAvailable() || !MimeTypes.VIDEO_VP9.equalsIgnoreCase(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);
     }

File: libraries/decoder_vp9/src/main/java/androidx/media3/decoder/vp9/VpxDecoder.java
Patch:
@@ -49,7 +49,7 @@ public final class VpxDecoder
 
   @Nullable private ByteBuffer lastSupplementalData;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a VP9 decoder.

File: libraries/exoplayer/src/androidTest/java/androidx/media3/exoplayer/StreamVolumeManagerTest.java
Patch:
@@ -273,7 +273,7 @@ public void onStreamVolumeChanged_isCalled_whenAudioManagerChangesIt() throws Ex
 
   private static class TestListener implements StreamVolumeManager.Listener {
 
-    @C.StreamType private int lastStreamType;
+    private @C.StreamType int lastStreamType;
     private int lastStreamVolume;
     private boolean lastStreamVolumeMuted;
     public final CountDownLatch onStreamVolumeChangedLatch;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/DecoderReuseEvaluation.java
Patch:
@@ -125,13 +125,13 @@ public final class DecoderReuseEvaluation {
   public final Format newFormat;
 
   /** The {@link DecoderReuseResult result} of the evaluation. */
-  @DecoderReuseResult public final int result;
+  public final @DecoderReuseResult int result;
 
   /**
    * {@link DecoderDiscardReasons Reasons} why the decoder cannot be reused. Always {@code 0} if
    * reuse is possible. May also be {code 0} if reuse is not possible for an unspecified reason.
    */
-  @DecoderDiscardReasons public final int discardReasons;
+  public final @DecoderDiscardReasons int discardReasons;
 
   /**
    * @param decoderName The name of the decoder.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/DefaultRenderersFactory.java
Patch:
@@ -95,7 +95,7 @@ public class DefaultRenderersFactory implements RenderersFactory {
 
   private final Context context;
   private final DefaultMediaCodecAdapterFactory codecAdapterFactory;
-  @ExtensionRendererMode private int extensionRendererMode;
+  private @ExtensionRendererMode int extensionRendererMode;
   private long allowedVideoJoiningTimeMs;
   private boolean enableDecoderFallback;
   private MediaCodecSelector mediaCodecSelector;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlaybackException.java
Patch:
@@ -85,7 +85,7 @@ public final class ExoPlaybackException extends PlaybackException {
   @UnstableApi public static final int TYPE_REMOTE = 3;
 
   /** The {@link Type} of the playback failure. */
-  @UnstableApi @Type public final int type;
+  @UnstableApi public final @Type int type;
 
   /** If {@link #type} is {@link #TYPE_RENDERER}, this is the name of the renderer. */
   @UnstableApi @Nullable public final String rendererName;
@@ -104,7 +104,7 @@ public final class ExoPlaybackException extends PlaybackException {
    * renderer for {@link #rendererFormat}. If {@link #rendererFormat} is null, this is {@link
    * C#FORMAT_HANDLED}.
    */
-  @UnstableApi @FormatSupport public final int rendererFormatSupport;
+  @UnstableApi public final @FormatSupport int rendererFormatSupport;
 
   /** The {@link MediaPeriodId} of the media associated with this error, or null if undetermined. */
   @UnstableApi @Nullable public final MediaPeriodId mediaPeriodId;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoTimeoutException.java
Patch:
@@ -62,7 +62,7 @@ public final class ExoTimeoutException extends RuntimeException {
   public static final int TIMEOUT_OPERATION_DETACH_SURFACE = 3;
 
   /** The operation on the ExoPlayer playback thread that timed out. */
-  @TimeoutOperation public final int timeoutOperation;
+  public final @TimeoutOperation int timeoutOperation;
 
   /**
    * Creates the timeout exception.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/PlaybackInfo.java
Patch:
@@ -55,7 +55,7 @@
   /** The start position after a reported position discontinuity, in microseconds. */
   public final long discontinuityStartPositionUs;
   /** The current playback state. One of the {@link Player}.STATE_ constants. */
-  @Player.State public final int playbackState;
+  public final @Player.State int playbackState;
   /** The current playback error, or null if this is not an error state. */
   @Nullable public final ExoPlaybackException playbackError;
   /** Whether the player is currently loading. */
@@ -71,7 +71,7 @@
   /** Whether playback should proceed when {@link #playbackState} == {@link Player#STATE_READY}. */
   public final boolean playWhenReady;
   /** Reason why playback is suppressed even though {@link #playWhenReady} is {@code true}. */
-  @PlaybackSuppressionReason public final int playbackSuppressionReason;
+  public final @PlaybackSuppressionReason int playbackSuppressionReason;
   /** The playback parameters. */
   public final PlaybackParameters playbackParameters;
   /** Whether offload scheduling is enabled for the main player loop. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/StreamVolumeManager.java
Patch:
@@ -55,7 +55,7 @@ public interface Listener {
   private final AudioManager audioManager;
 
   @Nullable private VolumeChangeReceiver receiver;
-  @C.StreamType private int streamType;
+  private @C.StreamType int streamType;
   private int volume;
   private boolean muted;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/AnalyticsListener.java
Patch:
@@ -150,8 +150,7 @@ public int size() {
      * @param index The index. Must be between 0 (inclusive) and {@link #size()} (exclusive).
      * @return The {@link EventFlags event} at the given index.
      */
-    @EventFlags
-    public int get(int index) {
+    public @EventFlags int get(int index) {
       return flags.get(index);
     }
   }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/MediaMetricsListener.java
Patch:
@@ -120,7 +120,7 @@ public static MediaMetricsListener create(Context context) {
 
   @Nullable private String activeSessionId;
   @Nullable private PlaybackMetrics.Builder metricsBuilder;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int currentPlaybackState;
   private int currentNetworkType;
   @Nullable private PlaybackException pendingPlayerError;
@@ -887,7 +887,7 @@ public ErrorInfo(int errorCode, int subErrorCode) {
   private static final class PendingFormatUpdate {
 
     public final Format format;
-    @C.SelectionReason public final int selectionReason;
+    public final @C.SelectionReason int selectionReason;
     public final String sessionId;
 
     public PendingFormatUpdate(

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/PlaybackStatsListener.java
Patch:
@@ -84,7 +84,7 @@ public interface Callback {
 
   @Nullable private String discontinuityFromSession;
   private long discontinuityFromPositionMs;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int droppedFrames;
   @Nullable private Exception nonFatalException;
   private long bandwidthTimeMs;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioProcessor.java
Patch:
@@ -45,7 +45,7 @@ final class AudioFormat {
     /** The number of interleaved channels. */
     public final int channelCount;
     /** The type of linear PCM encoding. */
-    @C.PcmEncoding public final int encoding;
+    public final @C.PcmEncoding int encoding;
     /** The number of bytes used to represent one audio frame. */
     public final int bytesPerFrame;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/ForwardingAudioSink.java
Patch:
@@ -50,8 +50,7 @@ public boolean supportsFormat(Format format) {
   }
 
   @Override
-  @SinkFormatSupport
-  public int getFormatSupport(Format format) {
+  public @SinkFormatSupport int getFormatSupport(Format format) {
     return sink.getFormatSupport(format);
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/MediaCodecAudioRenderer.java
Patch:
@@ -286,8 +286,7 @@ public void experimentalSetEnableKeepAudioTrackOnSeek(boolean enableKeepAudioTra
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     if (!MimeTypes.isAudio(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/SilenceSkippingAudioProcessor.java
Patch:
@@ -88,7 +88,7 @@ public final class SilenceSkippingAudioProcessor extends BaseAudioProcessor {
    */
   private byte[] paddingBuffer;
 
-  @State private int state;
+  private @State int state;
   private int maybeSilenceBufferSize;
   private int paddingSize;
   private boolean hasOutputNoise;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/SpatializerDelegate.java
Patch:
@@ -129,8 +129,7 @@ public boolean isAvailable() {
   }
 
   /** Delegates to Spatializer.getImmersiveAudioLevel() */
-  @ImmersiveAudioLevel
-  public int getImmersiveAudioLevel() {
+  public @ImmersiveAudioLevel int getImmersiveAudioLevel() {
     try {
       return (int) Util.castNonNull(getImmersiveAudioLevel.invoke(spatializer));
     } catch (IllegalAccessException | InvocationTargetException e) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/TeeAudioProcessor.java
Patch:
@@ -128,7 +128,7 @@ public static final class WavFileAudioBufferSink implements AudioBufferSink {
 
     private int sampleRateHz;
     private int channelCount;
-    @C.PcmEncoding private int encoding;
+    private @C.PcmEncoding int encoding;
     @Nullable private RandomAccessFile randomAccessFile;
     private int counter;
     private int bytesWritten;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/TrimmingAudioProcessor.java
Patch:
@@ -25,7 +25,7 @@
 /** Audio processor for trimming samples from the start/end of data. */
 /* package */ final class TrimmingAudioProcessor extends BaseAudioProcessor {
 
-  @C.PcmEncoding private static final int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
 
   private int trimStartFrames;
   private int trimEndFrames;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DefaultDrmSession.java
Patch:
@@ -254,8 +254,7 @@ public void onProvisionError(Exception error, boolean thrownByExoMediaDrm) {
   // DrmSession implementation.
 
   @Override
-  @DrmSession.State
-  public final int getState() {
+  public final @DrmSession.State int getState() {
     return state;
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DefaultDrmSessionManager.java
Patch:
@@ -312,7 +312,7 @@ private MissingSchemeDataException(UUID uuid) {
   @Nullable private byte[] offlineLicenseKeySetId;
   private @MonotonicNonNull PlayerId playerId;
 
-  /* package */ volatile @Nullable MediaDrmHandler mediaDrmHandler;
+  /* package */ @Nullable volatile MediaDrmHandler mediaDrmHandler;
 
   /**
    * @param uuid The UUID of the drm scheme.
@@ -590,8 +590,7 @@ private DrmSession acquireSession(
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType(Format format) {
+  public @C.CryptoType int getCryptoType(Format format) {
     @C.CryptoType int cryptoType = checkNotNull(exoMediaDrm).getCryptoType();
     if (format.drmInitData == null) {
       int trackType = MimeTypes.getTrackType(format.sampleMimeType);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DrmSession.java
Patch:
@@ -65,7 +65,7 @@ static void replaceSession(
   class DrmSessionException extends IOException {
 
     /** The {@link PlaybackException.ErrorCode} that corresponds to the failure. */
-    @PlaybackException.ErrorCode public final int errorCode;
+    public final @PlaybackException.ErrorCode int errorCode;
 
     public DrmSessionException(Throwable cause, @PlaybackException.ErrorCode int errorCode) {
       super(cause);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DrmSessionManager.java
Patch:
@@ -66,8 +66,7 @@ public DrmSession acquireSession(
         }
 
         @Override
-        @C.CryptoType
-        public int getCryptoType(Format format) {
+        public @C.CryptoType int getCryptoType(Format format) {
           return format.drmInitData != null ? C.CRYPTO_TYPE_UNSUPPORTED : C.CRYPTO_TYPE_NONE;
         }
       };

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DummyExoMediaDrm.java
Patch:
@@ -153,8 +153,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) {
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_UNSUPPORTED;
   }
 }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/ExoMediaDrm.java
Patch:
@@ -267,7 +267,7 @@ final class KeyRequest {
 
     private final byte[] data;
     private final String licenseServerUrl;
-    @RequestType private final int requestType;
+    private final @RequestType int requestType;
 
     /**
      * Creates an instance with {@link #REQUEST_TYPE_UNKNOWN}.
@@ -307,8 +307,7 @@ public String getLicenseServerUrl() {
      * request does not specify a type. Note that when using a platform {@link MediaDrm} instance,
      * key requests only specify a type on API levels 23 and above.
      */
-    @RequestType
-    public int getRequestType() {
+    public @RequestType int getRequestType() {
       return requestType;
     }
   }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/FrameworkMediaDrm.java
Patch:
@@ -342,8 +342,7 @@ public FrameworkCryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCr
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_FRAMEWORK;
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/UnsupportedDrmException.java
Patch:
@@ -49,7 +49,7 @@ public final class UnsupportedDrmException extends Exception {
   public static final int REASON_INSTANTIATION_ERROR = 2;
 
   /** Either {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
-  @Reason public final int reason;
+  public final @Reason int reason;
 
   /** @param reason {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
   public UnsupportedDrmException(@Reason int reason) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/WidevineUtil.java
Patch:
@@ -39,7 +39,8 @@ private WidevineUtil() {}
    * @return A {@link Pair} consisting of the remaining license and playback durations in seconds,
    *     or null if called before the session has been opened or after it's been released.
    */
-  public static @Nullable Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
+  @Nullable
+  public static Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
     Map<String, String> keyStatus = drmSession.queryKeyStatus();
     if (keyStatus == null) {
       return null;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -141,7 +141,7 @@ public AsynchronousMediaCodecAdapter createAdapter(Configuration configuration)
   private final boolean synchronizeCodecInteractionsWithQueueing;
   private final boolean enableImmediateCodecStartAfterFlush;
   private boolean codecReleased;
-  @State private int state;
+  private @State int state;
 
   private AsynchronousMediaCodecAdapter(
       MediaCodec codec,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/DefaultMediaCodecAdapterFactory.java
Patch:
@@ -53,7 +53,7 @@ public final class DefaultMediaCodecAdapterFactory implements MediaCodecAdapter.
 
   private static final String TAG = "DMCodecAdapterFactory";
 
-  @Mode private int asynchronousMode;
+  private @Mode int asynchronousMode;
   private boolean enableSynchronizeCodecInteractionsWithQueueing;
   private boolean enableImmediateCodecStartAfterFlush;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/metadata/MetadataRenderer.java
Patch:
@@ -94,8 +94,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/Download.java
Patch:
@@ -99,7 +99,7 @@ public final class Download {
   /** The download request. */
   public final DownloadRequest request;
   /** The state of the download. */
-  @State public final int state;
+  public final @State int state;
   /** The first time when download entry is created. */
   public final long startTimeMs;
   /** The last update time. */
@@ -112,7 +112,7 @@ public final class Download {
    * If {@link #state} is {@link #STATE_FAILED} then this is the cause, otherwise {@link
    * #FAILURE_REASON_NONE}.
    */
-  @FailureReason public final int failureReason;
+  public final @FailureReason int failureReason;
 
   /* package */ final DownloadProgress progress;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadHelper.java
Patch:
@@ -1100,8 +1100,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    @C.SelectionReason
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadManager.java
Patch:
@@ -351,8 +351,7 @@ public Requirements getRequirements() {
    *
    * @return The not met {@link Requirements.RequirementFlags}, or 0 if all requirements are met.
    */
-  @Requirements.RequirementFlags
-  public int getNotMetRequirements() {
+  public @Requirements.RequirementFlags int getNotMetRequirements() {
     return notMetRequirements;
   }
 
@@ -705,7 +704,7 @@ private static final class InternalHandler extends Handler {
     private final ArrayList<Download> downloads;
     private final HashMap<String, Task> activeTasks;
 
-    @Requirements.RequirementFlags private int notMetRequirements;
+    private @Requirements.RequirementFlags int notMetRequirements;
     private boolean downloadsPaused;
     private int maxParallelDownloads;
     private int minRetryCount;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/scheduler/RequirementsWatcher.java
Patch:
@@ -62,7 +62,7 @@ void onRequirementsStateChanged(
 
   @Nullable private DeviceStatusChangeReceiver receiver;
 
-  @Requirements.RequirementFlags private int notMetRequirements;
+  private @Requirements.RequirementFlags int notMetRequirements;
   @Nullable private NetworkCallback networkCallback;
 
   /**
@@ -83,8 +83,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
    *
    * @return Initial {@link Requirements.RequirementFlags RequirementFlags} that are not met, or 0.
    */
-  @Requirements.RequirementFlags
-  public int start() {
+  public @Requirements.RequirementFlags int start() {
     notMetRequirements = requirements.getNotMetRequirements(context);
 
     IntentFilter filter = new IntentFilter();

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ClippingMediaSource.java
Patch:
@@ -63,7 +63,7 @@ public static final class IllegalClippingException extends IOException {
     public static final int REASON_START_EXCEEDS_END = 2;
 
     /** The reason clipping failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason clipping failed. */
     public IllegalClippingException(@Reason int reason) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/DefaultMediaSourceFactory.java
Patch:
@@ -472,8 +472,7 @@ public DelegateFactoryLoader(
       mediaSourceFactories = new HashMap<>();
     }
 
-    @C.ContentType
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       ensureAllSuppliersAreLoaded();
       return Ints.toArray(supportedTypes);
     }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MediaLoadData.java
Patch:
@@ -28,7 +28,7 @@
 public final class MediaLoadData {
 
   /** The {@link DataType data type}. */
-  @DataType public final int dataType;
+  public final @DataType int dataType;
   /**
    * One of the {@link TrackType track types}, which is a media track type if the data corresponds
    * to media of a specific type, or {@link C#TRACK_TYPE_UNKNOWN} otherwise.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MediaSourceFactory.java
Patch:
@@ -47,8 +47,7 @@ public MediaSourceFactory setLoadErrorHandlingPolicy(
         }
 
         @Override
-        @C.ContentType
-        public int[] getSupportedTypes() {
+        public @C.ContentType int[] getSupportedTypes() {
           throw new UnsupportedOperationException();
         }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MergingMediaSource.java
Patch:
@@ -61,7 +61,7 @@ public static final class IllegalMergeException extends IOException {
     public static final int REASON_PERIOD_COUNT_MISMATCH = 0;
 
     /** The reason the merge failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason the merge failed. */
     public IllegalMergeException(@Reason int reason) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ProgressiveMediaPeriod.java
Patch:
@@ -131,7 +131,7 @@ interface Listener {
   private @MonotonicNonNull SeekMap seekMap;
   private long durationUs;
   private boolean isLive;
-  @DataType private int dataType;
+  private @DataType int dataType;
 
   private boolean seenFirstTrackSelection;
   private boolean notifyDiscontinuity;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/SilenceMediaSource.java
Patch:
@@ -87,7 +87,7 @@ public SilenceMediaSource createMediaSource() {
   public static final String MEDIA_ID = "SilenceMediaSource";
 
   private static final int SAMPLE_RATE_HZ = 44100;
-  @C.PcmEncoding private static final int PCM_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int PCM_ENCODING = C.ENCODING_PCM_16BIT;
   private static final int CHANNEL_COUNT = 2;
   private static final Format FORMAT =
       new Format.Builder()

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/chunk/Chunk.java
Patch:
@@ -42,15 +42,15 @@ public abstract class Chunk implements Loadable {
   /** The {@link DataSpec} that defines the data to be loaded. */
   public final DataSpec dataSpec;
   /** The {@link DataType data type} of the chunk. For reporting only. */
-  @DataType public final int type;
+  public final @DataType int type;
   /** The format of the track to which this chunk belongs. */
   public final Format trackFormat;
   /**
    * One of the {@link C.SelectionReason selection reasons} if the chunk belongs to a track. {@link
    * C#SELECTION_REASON_UNKNOWN} if the chunk does not belong to a track, or if the selection reason
    * is unknown.
    */
-  @C.SelectionReason public final int trackSelectionReason;
+  public final @C.SelectionReason int trackSelectionReason;
   /**
    * Optional data associated with the selection of the track to which this chunk belongs. Null if
    * the chunk does not belong to a track, or if there is no associated track selection data.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/mediaparser/OutputConsumerAdapterV30.java
Patch:
@@ -540,8 +540,7 @@ private static DrmInitData toExoPlayerDrmInitData(
     return new DrmInitData(schemeType, schemeDatas);
   }
 
-  @SelectionFlags
-  private static int getSelectionFlags(MediaFormat mediaFormat) {
+  private static @SelectionFlags int getSelectionFlags(MediaFormat mediaFormat) {
     int selectionFlags = 0;
     selectionFlags |=
         getFlag(

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/ExoplayerCuesDecoder.java
Patch:
@@ -63,7 +63,7 @@ public final class ExoplayerCuesDecoder implements SubtitleDecoder {
   private final SubtitleInputBuffer inputBuffer;
   private final Deque<SubtitleOutputBuffer> availableOutputBuffers;
 
-  @InputBufferState private int inputBufferState;
+  private @InputBufferState int inputBufferState;
   private boolean released;
 
   public ExoplayerCuesDecoder() {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/TextRenderer.java
Patch:
@@ -94,7 +94,7 @@ public final class TextRenderer extends BaseRenderer implements Callback {
   private boolean inputStreamEnded;
   private boolean outputStreamEnded;
   private boolean waitingForKeyFrame;
-  @ReplacementState private int decoderReplacementState;
+  private @ReplacementState int decoderReplacementState;
   @Nullable private Format streamFormat;
   @Nullable private SubtitleDecoder decoder;
   @Nullable private SubtitleInputBuffer nextInputBuffer;
@@ -141,8 +141,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/DefaultBandwidthMeter.java
Patch:
@@ -281,14 +281,14 @@ public static synchronized DefaultBandwidthMeter getSingletonInstance(Context co
   private long sampleStartTimeMs;
   private long sampleBytesTransferred;
 
-  @C.NetworkType private int networkType;
+  private @C.NetworkType int networkType;
   private long totalElapsedTimeMs;
   private long totalBytesTransferred;
   private long bitrateEstimate;
   private long lastReportedBitrateEstimate;
 
   private boolean networkTypeOverrideSet;
-  @C.NetworkType private int networkTypeOverride;
+  private @C.NetworkType int networkTypeOverride;
 
   /** @deprecated Use {@link Builder} instead. */
   @Deprecated

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/LoadErrorHandlingPolicy.java
Patch:
@@ -130,7 +130,7 @@ public boolean isFallbackAvailable(@FallbackType int type) {
   /** A selected fallback option. */
   final class FallbackSelection {
     /** The type of fallback. */
-    @FallbackType public final int type;
+    public final @FallbackType int type;
     /** The duration for which the failing resource should be excluded, in milliseconds. */
     public final long exclusionDurationMs;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/ParsingLoadable.java
Patch:
@@ -104,7 +104,7 @@ public static <T> T load(
   private final StatsDataSource dataSource;
   private final Parser<? extends T> parser;
 
-  private volatile @Nullable T result;
+  @Nullable private volatile T result;
 
   /**
    * @param dataSource A {@link DataSource} to use when loading the data.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/DecoderVideoRenderer.java
Patch:
@@ -121,7 +121,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
 
   private DecoderInputBuffer inputBuffer;
   private VideoDecoderOutputBuffer outputBuffer;
-  @VideoOutputMode private int outputMode;
+  private @VideoOutputMode int outputMode;
   @Nullable private Object output;
   @Nullable private Surface outputSurface;
   @Nullable private VideoDecoderOutputBufferRenderer outputBufferRenderer;
@@ -130,7 +130,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
   @Nullable private DrmSession decoderDrmSession;
   @Nullable private DrmSession sourceDrmSession;
 
-  @ReinitializationState private int decoderReinitializationState;
+  private @ReinitializationState int decoderReinitializationState;
   private boolean decoderReceivedBuffers;
 
   private boolean renderedFirstFrameAfterReset;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/DummySurface.java
Patch:
@@ -105,8 +105,7 @@ public void release() {
     }
   }
 
-  @SecureMode
-  private static int getSecureMode(Context context) {
+  private static @SecureMode int getSecureMode(Context context) {
     if (GlUtil.isProtectedContentExtensionSupported(context)) {
       if (GlUtil.isSurfacelessContextExtensionSupported()) {
         return SECURE_MODE_SURFACELESS_CONTEXT;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/MediaCodecVideoRenderer.java
Patch:
@@ -131,7 +131,7 @@ public class MediaCodecVideoRenderer extends MediaCodecRenderer {
   @Nullable private Surface surface;
   @Nullable private DummySurface dummySurface;
   private boolean haveReportedFirstFrameRenderedForCurrentSurface;
-  @C.VideoScalingMode private int scalingMode;
+  private @C.VideoScalingMode int scalingMode;
   private boolean renderedFirstFrameAfterReset;
   private boolean mayRenderFirstFrameAfterEnableIfNotStarted;
   private boolean renderedFirstFrameAfterEnable;
@@ -342,8 +342,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     String mimeType = format.sampleMimeType;
     if (!MimeTypes.isVideo(mimeType)) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/VideoFrameReleaseHelper.java
Patch:
@@ -111,7 +111,7 @@ public final class VideoFrameReleaseHelper {
   private float surfacePlaybackFrameRate;
 
   private float playbackSpeed;
-  @C.VideoChangeFrameRateStrategy private int changeFrameRateStrategy;
+  private @C.VideoChangeFrameRateStrategy int changeFrameRateStrategy;
 
   private long vsyncDurationNs;
   private long vsyncOffsetNs;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/spherical/CameraMotionRenderer.java
Patch:
@@ -58,8 +58,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     return MimeTypes.APPLICATION_CAMERA_MOTION.equals(format.sampleMimeType)
         ? RendererCapabilities.create(C.FORMAT_HANDLED)
         : RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/spherical/SceneRenderer.java
Patch:
@@ -50,8 +50,8 @@
   private @MonotonicNonNull SurfaceTexture surfaceTexture;
 
   // Used by other threads only
-  @C.StereoMode private volatile int defaultStereoMode;
-  @C.StereoMode private int lastStereoMode;
+  private volatile @C.StereoMode int defaultStereoMode;
+  private @C.StereoMode int lastStereoMode;
   @Nullable private byte[] lastProjectionData;
 
   // Methods called on any thread.

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/ExoPlayerTest.java
Patch:
@@ -11488,7 +11488,7 @@ public void handleMessage(ExoPlayer player, int messageType, @Nullable Object me
   private static final class PlayerStateGrabber extends PlayerRunnable {
 
     public boolean playWhenReady;
-    @Player.State public int playbackState;
+    public @Player.State int playbackState;
     @Nullable public Timeline timeline;
 
     @Override

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/audio/DecoderAudioRendererTest.java
Patch:
@@ -71,8 +71,7 @@ public String getName() {
           }
 
           @Override
-          @C.FormatSupport
-          protected int supportsFormatInternal(Format format) {
+          protected @C.FormatSupport int supportsFormatInternal(Format format) {
             return FORMAT_HANDLED;
           }
 

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/video/DecoderVideoRendererTest.java
Patch:
@@ -84,16 +84,15 @@ public void setUp() {
             /* maxDroppedFramesToNotify= */ -1) {
 
           private final Phaser inputBuffersInCodecPhaser = new Phaser();
-          @C.VideoOutputMode private int outputMode;
+          private @C.VideoOutputMode int outputMode;
 
           @Override
           public String getName() {
             return "TestVideoRenderer";
           }
 
           @Override
-          @Capabilities
-          public int supportsFormat(Format format) {
+          public @Capabilities int supportsFormat(Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/video/MediaCodecVideoRendererTest.java
Patch:
@@ -111,8 +111,8 @@ public void setUp() throws Exception {
             /* eventListener= */ eventListener,
             /* maxDroppedFramesToNotify= */ 1) {
           @Override
-          @Capabilities
-          protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format) {
+          protected @Capabilities int supportsFormat(
+              MediaCodecSelector mediaCodecSelector, Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/DashMediaPeriod.java
Patch:
@@ -937,7 +937,7 @@ private static final class TrackGroupInfo {
 
     public final int[] adaptationSetIndices;
     public final @C.TrackType int trackType;
-    @TrackGroupCategory public final int trackGroupCategory;
+    public final @TrackGroupCategory int trackGroupCategory;
 
     public final int eventStreamGroupIndex;
     public final int primaryTrackGroupIndex;

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -62,7 +62,7 @@ public final class DefaultHlsExtractorFactory implements HlsExtractorFactory {
         FileTypes.MP3,
       };
 
-  @DefaultTsPayloadReaderFactory.Flags private final int payloadReaderFactoryFlags;
+  private final @DefaultTsPayloadReaderFactory.Flags int payloadReaderFactoryFlags;
   private final boolean exposeCea608WhenMissingDeclarations;
 
   /**

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsChunkSource.java
Patch:
@@ -303,8 +303,7 @@ public long getAdjustedSeekPositionUs(long positionUs, SeekParameters seekParame
    *     has been {@link #CHUNK_PUBLICATION_STATE_REMOVED removed} or is definitely {@link
    *     #CHUNK_PUBLICATION_STATE_PUBLISHED published}.
    */
-  @ChunkPublicationState
-  public int getChunkPublicationState(HlsMediaChunk mediaChunk) {
+  public @ChunkPublicationState int getChunkPublicationState(HlsMediaChunk mediaChunk) {
     if (mediaChunk.partIndex == C.INDEX_UNSET) {
       // Chunks based on full segments can't be removed and are always published.
       return CHUNK_PUBLICATION_STATE_PUBLISHED;

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/playlist/HlsMediaPlaylist.java
Patch:
@@ -398,7 +398,7 @@ public RenditionReport(Uri playlistUri, long lastMediaSequence, int lastPartInde
   public static final int PLAYLIST_TYPE_EVENT = 2;
 
   /** The type of the playlist. See {@link PlaylistType}. */
-  @PlaylistType public final int playlistType;
+  public final @PlaylistType int playlistType;
   /**
    * The start offset in microseconds from the beginning of the playlist, as defined by
    * #EXT-X-START, or {@link C#TIME_UNSET} if undefined. The value is guaranteed to be between 0 and

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/AdTagLoader.java
Patch:
@@ -162,7 +162,7 @@
   /** Whether IMA has sent an ad event to pause content since the last resume content event. */
   private boolean imaPausedContent;
   /** The current ad playback state. */
-  @ImaAdState private int imaAdState;
+  private @ImaAdState int imaAdState;
   /** The current ad media info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */
   @Nullable private AdMediaInfo imaAdMediaInfo;
   /** The current ad info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ServerSideAdInsertionStreamRequest.java
Patch:
@@ -51,7 +51,7 @@ public static final class Builder {
     @Nullable private String authToken;
     @Nullable private String streamActivityMonitorId;
     private ImmutableMap<String, String> adTagParameters;
-    @ContentType public int format = C.TYPE_HLS;
+    public @ContentType int format = C.TYPE_HLS;
     private int loadVideoTimeoutMs;
 
     /** Creates a new instance. */
@@ -270,7 +270,7 @@ public ServerSideAdInsertionStreamRequest build() {
   @Nullable public final String contentUrl;
   @Nullable public final String authToken;
   @Nullable public final String streamActivityMonitorId;
-  @ContentType public int format = C.TYPE_HLS;
+  public @ContentType int format = C.TYPE_HLS;
   public final int loadVideoTimeoutMs;
 
   private ServerSideAdInsertionStreamRequest(

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspAuthenticationInfo.java
Patch:
@@ -56,7 +56,7 @@
   private static final String ALGORITHM = "MD5";
 
   /** The authentication mechanism. */
-  @AuthenticationMechanism public final int authenticationMechanism;
+  public final @AuthenticationMechanism int authenticationMechanism;
   /** The authentication realm. */
   public final String realm;
   /** The nonce used in digest authentication; empty if using {@link #BASIC} authentication. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspClient.java
Patch:
@@ -141,7 +141,7 @@ public interface PlaybackEventListener {
   @Nullable private String sessionId;
   @Nullable private KeepAliveMonitor keepAliveMonitor;
   @Nullable private RtspAuthenticationInfo rtspAuthenticationInfo;
-  @RtspState private int rtspState;
+  private @RtspState int rtspState;
   private boolean hasUpdatedTimelineAndTracks;
   private boolean receivedAuthorizationRequest;
   private boolean hasPendingPauseRequest;
@@ -204,8 +204,7 @@ public void start() throws IOException {
   }
 
   /** Returns the current {@link RtspState RTSP state}. */
-  @RtspState
-  public int getState() {
+  public @RtspState int getState() {
     return rtspState;
   }
 

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaPeriod.java
Patch:
@@ -775,8 +775,7 @@ public boolean isSampleQueueReady() {
       return sampleQueue.isReady(/* loadingFinished= */ canceled);
     }
 
-    @ReadDataResult
-    public int read(
+    public @ReadDataResult int read(
         FormatHolder formatHolder, DecoderInputBuffer buffer, @ReadFlags int readFlags) {
       return sampleQueue.read(formatHolder, buffer, readFlags, /* loadingFinished= */ canceled);
     }

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMessageChannel.java
Patch:
@@ -353,7 +353,7 @@ private static final class MessageParser {
 
     private final List<String> messageLines;
 
-    @ReadingState private int state;
+    private @ReadingState int state;
     private long messageBodyLength;
 
     /** Creates a new instance. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMessageUtil.java
Patch:
@@ -256,8 +256,7 @@ public static String toMethodString(@RtspRequest.Method int method) {
     }
   }
 
-  @RtspRequest.Method
-  private static int parseMethodString(String method) {
+  private static @RtspRequest.Method int parseMethodString(String method) {
     switch (method) {
       case "ANNOUNCE":
         return METHOD_ANNOUNCE;

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspRequest.java
Patch:
@@ -88,7 +88,7 @@
   /** The {@link Uri} to which this request is sent. */
   public final Uri uri;
   /** The request method, as defined in {@link Method}. */
-  @Method public final int method;
+  public final @Method int method;
   /** The headers of this request. */
   public final RtspHeaders headers;
   /** The body of this RTSP message, or empty string if absent. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/RtpH264Reader.java
Patch:
@@ -58,7 +58,7 @@
   private final RtpPayloadFormat payloadFormat;
 
   private @MonotonicNonNull TrackOutput trackOutput;
-  @C.BufferFlags private int bufferFlags;
+  private @C.BufferFlags int bufferFlags;
 
   private long firstReceivedTimestamp;
   private int previousSequenceNumber;
@@ -296,8 +296,7 @@ private static long toSampleUs(
             /* divisor= */ MEDIA_CLOCK_FREQUENCY);
   }
 
-  @C.BufferFlags
-  private static int getBufferFlagsFromNalType(int nalType) {
+  private static @C.BufferFlags int getBufferFlagsFromNalType(int nalType) {
     return nalType == NAL_UNIT_TYPE_IDR ? C.BUFFER_FLAG_KEY_FRAME : 0;
   }
 }

File: libraries/extractor/src/main/java/androidx/media3/extractor/BinarySearchSeeker.java
Patch:
@@ -423,7 +423,7 @@ public static final class TimestampSearchResult {
         new TimestampSearchResult(TYPE_NO_TIMESTAMP, C.TIME_UNSET, C.POSITION_UNSET);
 
     /** The type of the result. */
-    @Type private final int type;
+    private final @Type int type;
 
     /**
      * When {@link #type} is {@link #TYPE_POSITION_OVERESTIMATED}, the {@link

File: libraries/extractor/src/main/java/androidx/media3/extractor/TrackOutput.java
Patch:
@@ -40,7 +40,7 @@ public interface TrackOutput {
   final class CryptoData {
 
     /** The encryption mode used for the sample. */
-    @C.CryptoMode public final int cryptoMode;
+    public final @C.CryptoMode int cryptoMode;
 
     /** The encryption key associated with the sample. Its contents must not be modified. */
     public final byte[] encryptionKey;

File: libraries/extractor/src/main/java/androidx/media3/extractor/TrueHdSampleRechunker.java
Patch:
@@ -33,7 +33,7 @@ public final class TrueHdSampleRechunker {
   private boolean foundSyncframe;
   private int chunkSampleCount;
   private long chunkTimeUs;
-  @C.BufferFlags private int chunkFlags;
+  private @C.BufferFlags int chunkFlags;
   private int chunkSize;
   private int chunkOffset;
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/jpeg/JpegExtractor.java
Patch:
@@ -84,7 +84,7 @@ public final class JpegExtractor implements Extractor {
 
   private @MonotonicNonNull ExtractorOutput extractorOutput;
 
-  @State private int state;
+  private @State int state;
   private int marker;
   private int segmentLength;
   private long mp4StartPosition;
@@ -128,8 +128,8 @@ public void init(ExtractorOutput output) {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     switch (state) {
       case STATE_READING_MARKER:
         readMarker(input);

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp3/Mp3Extractor.java
Patch:
@@ -142,7 +142,7 @@ public final class Mp3Extractor implements Extractor {
   private static final int SEEK_HEADER_VBRI = 0x56425249;
   private static final int SEEK_HEADER_UNSET = 0;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final long forcedFirstSampleTimestampUs;
   private final ParsableByteArray scratch;
   private final MpegAudioUtil.Header synchronizedHeader;

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/AtomParsers.java
Patch:
@@ -1910,7 +1910,7 @@ private static final class StsdData {
 
     @Nullable public Format format;
     public int nalUnitLengthFieldLength;
-    @Track.Transformation public int requiredSampleTransformation;
+    public @Track.Transformation int requiredSampleTransformation;
 
     public StsdData(int numberOfEntries) {
       trackEncryptionBoxes = new TrackEncryptionBox[numberOfEntries];

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -132,7 +132,7 @@ public class FragmentedMp4Extractor implements Extractor {
   private static final int STATE_READING_SAMPLE_CONTINUE = 4;
 
   // Workarounds.
-  @Flags private final int flags;
+  private final @Flags int flags;
   @Nullable private final Track sideloadedTrack;
 
   // Sideloaded data.
@@ -1689,8 +1689,7 @@ public int getCurrentSampleSize() {
     }
 
     /** Returns the {@link C.BufferFlags} corresponding to the current sample. */
-    @C.BufferFlags
-    public int getCurrentSampleFlags() {
+    public @C.BufferFlags int getCurrentSampleFlags() {
       int flags =
           !currentlyInFragment
               ? moovSampleTable.flags[currentSampleIndex]

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/Track.java
Patch:
@@ -69,7 +69,7 @@ public final class Track {
    * One of {@code TRANSFORMATION_*}. Defines the transformation to apply before outputting each
    * sample.
    */
-  @Transformation public final int sampleTransformation;
+  public final @Transformation int sampleTransformation;
 
   /** Durations of edit list segments in the movie timescale. Null if there is no edit list. */
   @Nullable public final long[] editListDurations;

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/TrackEncryptionBox.java
Patch:
@@ -79,8 +79,7 @@ public TrackEncryptionBox(
             schemeToCryptoMode(schemeType), keyId, defaultEncryptedBlocks, defaultClearBlocks);
   }
 
-  @C.CryptoMode
-  private static int schemeToCryptoMode(@Nullable String schemeType) {
+  private static @C.CryptoMode int schemeToCryptoMode(@Nullable String schemeType) {
     if (schemeType == null) {
       // If unknown, assume cenc.
       return C.CRYPTO_MODE_AES_CTR;

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/SubtitleExtractor.java
Patch:
@@ -87,7 +87,7 @@ public class SubtitleExtractor implements Extractor {
   private @MonotonicNonNull ExtractorOutput extractorOutput;
   private @MonotonicNonNull TrackOutput trackOutput;
   private int bytesRead;
-  @State private int state;
+  private @State int state;
   private long seekTimeUs;
 
   /**

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/ttml/TextEmphasis.java
Patch:
@@ -97,13 +97,13 @@
           TtmlNode.ANNOTATION_POSITION_OUTSIDE);
 
   /** The text emphasis mark shape. */
-  @MarkShape public final int markShape;
+  public final @MarkShape int markShape;
 
   /** The fill style of the text emphasis mark. */
-  @TextEmphasisSpan.MarkFill public final int markFill;
+  public final @TextEmphasisSpan.MarkFill int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @Position public final int position;
+  public final @Position int position;
 
   private TextEmphasis(
       @MarkShape int markShape,

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/Ac3Reader.java
Patch:
@@ -62,7 +62,7 @@ public final class Ac3Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/Ac4Reader.java
Patch:
@@ -60,7 +60,7 @@ public final class Ac4Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/DefaultTsPayloadReaderFactory.java
Patch:
@@ -104,7 +104,7 @@ public final class DefaultTsPayloadReaderFactory implements TsPayloadReader.Fact
 
   private static final int DESCRIPTOR_TAG_CAPTION_SERVICE = 0x86;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final List<Format> closedCaptionFormats;
 
   public DefaultTsPayloadReaderFactory() {

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/H263Reader.java
Patch:
@@ -335,7 +335,7 @@ private static final class CsdBuffer {
     private static final int STATE_WAIT_FOR_VOP_START = 4;
 
     private boolean isFilling;
-    @State private int state;
+    private @State int state;
 
     public int length;
     public int volStartPosition;

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/TsExtractor.java
Patch:
@@ -118,7 +118,7 @@ public final class TsExtractor implements Extractor {
   private static final int BUFFER_SIZE = TS_PACKET_SIZE * 50;
   private static final int SNIFF_TS_PACKET_COUNT = 5;
 
-  @Mode private final int mode;
+  private final @Mode int mode;
   private final int timestampSearchBytes;
   private final List<TimestampAdjuster> timestampAdjusters;
   private final ParsableByteArray tsPacketBuffer;
@@ -298,8 +298,8 @@ public void release() {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     long inputLength = input.getLength();
     if (tracksEnded) {
       boolean canReadDuration = inputLength != C.LENGTH_UNSET && mode != MODE_HLS;

File: libraries/extractor/src/test/java/androidx/media3/extractor/mkv/DefaultEbmlReaderTest.java
Patch:
@@ -178,8 +178,7 @@ private static final class TestProcessor implements EbmlProcessor {
     private final List<String> events = new ArrayList<>();
 
     @Override
-    @EbmlProcessor.ElementType
-    public int getElementType(int id) {
+    public @EbmlProcessor.ElementType int getElementType(int id) {
       switch (id) {
         case ID_EBML:
         case ID_SEGMENT:

File: libraries/extractor/src/test/java/androidx/media3/extractor/text/ttml/TtmlStyleTest.java
Patch:
@@ -42,7 +42,7 @@ public final class TtmlStyleTest {
   private static final String FONT_FAMILY = "serif";
   @ColorInt private static final int FONT_COLOR = Color.WHITE;
   private static final float FONT_SIZE = 12.5f;
-  @TtmlStyle.FontSizeUnit private static final int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
+  private static final @TtmlStyle.FontSizeUnit int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
   @ColorInt private static final int BACKGROUND_COLOR = Color.BLACK;
   private static final int RUBY_TYPE = TtmlStyle.RUBY_TYPE_TEXT;
   private static final int RUBY_POSITION = TextAnnotation.POSITION_AFTER;

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/Action.java
Patch:
@@ -495,7 +495,7 @@ protected void doActionImpl(
   /** Calls {@link Player#setRepeatMode(int)}. */
   public static final class SetRepeatMode extends Action {
 
-    @Player.RepeatMode private final int repeatMode;
+    private final @Player.RepeatMode int repeatMode;
 
     /**
      * @param tag A tag to use for logging.
@@ -742,7 +742,7 @@ public static final class WaitForTimelineChanged extends Action {
 
     @Nullable private final Timeline expectedTimeline;
     private final boolean ignoreExpectedReason;
-    @Player.TimelineChangeReason private final int expectedReason;
+    private final @Player.TimelineChangeReason int expectedReason;
 
     /**
      * Creates action waiting for a timeline change for a given reason.
@@ -909,7 +909,7 @@ protected void doActionImpl(
    */
   public static final class WaitForPlaybackState extends Action {
 
-    @Player.State private final int targetPlaybackState;
+    private final @Player.State int targetPlaybackState;
 
     /**
      * @param tag A tag to use for logging.

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/CapturingAudioSink.java
Patch:
@@ -93,7 +93,7 @@ public void dump(Dumper dumper) {
 
   private static final class DumpableConfiguration implements Dumper.Dumpable {
 
-    @C.PcmEncoding private final int inputPcmEncoding;
+    private final @C.PcmEncoding int inputPcmEncoding;
     private final int inputChannelCount;
     private final int inputSampleRate;
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/DownloadBuilder.java
Patch:
@@ -47,7 +47,7 @@ public final class DownloadBuilder {
   @Nullable private String cacheKey;
   private byte[] customMetadata;
 
-  @Download.State private int state;
+  private @Download.State int state;
   private long startTimeMs;
   private long updateTimeMs;
   private long contentLength;

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/DumpFileAsserts.java
Patch:
@@ -72,7 +72,7 @@ public class DumpFileAsserts {
   /** Write output to folder {@code /storage/emulated/0/Android/data} of device. */
   private static final int WRITE_TO_DEVICE = 1 << 1;
 
-  @DumpFilesAction private static final int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
+  private static final @DumpFilesAction int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
 
   private DumpFileAsserts() {}
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeExoMediaDrm.java
Patch:
@@ -398,8 +398,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCryptoExcep
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return FakeCryptoConfig.TYPE;
   }
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeRenderer.java
Patch:
@@ -162,8 +162,7 @@ public boolean isEnded() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) throws ExoPlaybackException {
+  public @Capabilities int supportsFormat(Format format) throws ExoPlaybackException {
     int trackType = MimeTypes.getTrackType(format.sampleMimeType);
     return trackType != C.TRACK_TYPE_UNKNOWN && trackType == getTrackType()
         ? RendererCapabilities.create(C.FORMAT_HANDLED, ADAPTIVE_SEAMLESS, TUNNELING_NOT_SUPPORTED)

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeSampleStream.java
Patch:
@@ -295,7 +295,7 @@ private void maybeNotifyDownstreamFormat(long timeUs) {
 
   private static class SampleInfo {
     public final byte[] data;
-    @C.BufferFlags public final int flags;
+    public final @C.BufferFlags int flags;
     public final long timeUs;
 
     public SampleInfo(byte[] data, @C.BufferFlags int flags, long timeUs) {

File: libraries/test_utils_robolectric/src/main/java/androidx/media3/test/utils/robolectric/TestDownloadManagerListener.java
Patch:
@@ -44,7 +44,7 @@ public final class TestDownloadManagerListener implements DownloadManager.Listen
   private final ConditionVariable initializedCondition;
   private final ConditionVariable idleCondition;
 
-  @Download.FailureReason private int failureReason;
+  private @Download.FailureReason int failureReason;
 
   public TestDownloadManagerListener(DownloadManager downloadManager) {
     this.downloadManager = downloadManager;

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -542,7 +542,7 @@ public interface DebugViewProvider {
 
   @Nullable private MuxerWrapper muxerWrapper;
   @Nullable private ExoPlayer player;
-  @ProgressState private int progressState;
+  private @ProgressState int progressState;
 
   private Transformer(
       Context context,
@@ -743,8 +743,7 @@ public Looper getApplicationLooper() {
    * @return The {@link ProgressState}.
    * @throws IllegalStateException If this method is called from the wrong thread.
    */
-  @ProgressState
-  public int getProgress(ProgressHolder progressHolder) {
+  public @ProgressState int getProgress(ProgressHolder progressHolder) {
     verifyApplicationThread();
     if (progressState == PROGRESS_STATE_AVAILABLE) {
       Player player = checkNotNull(this.player);

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerBaseRenderer.java
Patch:
@@ -67,8 +67,7 @@ public TransformerBaseRenderer(
    * @return The {@link Capabilities} for this format.
    */
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     return RendererCapabilities.create(
         MimeTypes.getTrackType(format.sampleMimeType) == getTrackType()
             ? C.FORMAT_HANDLED

File: libraries/common/src/main/java/androidx/media3/common/FileTypes.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.common;
 
 import static androidx.media3.common.MimeTypes.normalizeMimeType;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import androidx.annotation.IntDef;
@@ -25,6 +26,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.List;
 import java.util.Map;
 
@@ -39,6 +41,7 @@ public final class FileTypes {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     UNKNOWN, AC3, AC4, ADTS, AMR, FLAC, FLV, MATROSKA, MP3, MP4, OGG, PS, TS, WAV, WEBVTT, JPEG
   })

File: libraries/common/src/main/java/androidx/media3/common/PlaybackException.java
Patch:
@@ -410,6 +410,7 @@ public boolean errorInfoEquals(@Nullable PlaybackException other) {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       open = true,
       value = {

File: libraries/common/src/main/java/androidx/media3/common/text/TextAnnotation.java
Patch:
@@ -15,12 +15,14 @@
  */
 package androidx.media3.common.text;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import androidx.annotation.IntDef;
 import androidx.media3.common.util.UnstableApi;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 
 /** Properties of a text annotation (i.e. ruby, text emphasis marks). */
 @UnstableApi
@@ -57,6 +59,7 @@ public final class TextAnnotation {
    */
   @Documented
   @Retention(SOURCE)
+  @Target(TYPE_USE)
   @IntDef({POSITION_UNKNOWN, POSITION_BEFORE, POSITION_AFTER})
   public @interface Position {}
 

File: libraries/common/src/main/java/androidx/media3/common/util/NotificationUtil.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.common.util;
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.app.Notification;
@@ -29,6 +30,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** Utility methods for displaying {@link Notification Notifications}. */
 @SuppressLint("InlinedApi")
@@ -42,6 +44,7 @@ public final class NotificationUtil {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     IMPORTANCE_UNSPECIFIED,
     IMPORTANCE_NONE,

File: libraries/datasource/src/main/java/androidx/media3/datasource/cache/CacheDataSource.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.common.util.Util.castNonNull;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import androidx.annotation.IntDef;
@@ -42,6 +43,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -330,6 +332,7 @@ public interface EventListener {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {

File: libraries/decoder_flac/src/main/java/androidx/media3/decoder/flac/FlacExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.decoder.flac;
 
 import static androidx.media3.common.util.Util.getPcmEncoding;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -41,6 +42,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.nio.ByteBuffer;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNull;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
@@ -63,6 +65,7 @@ public final class FlacExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_DISABLE_ID3_METADATA})

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/AudioFocusManager.java
Patch:
@@ -64,6 +64,7 @@ public interface PlayerControl {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     PLAYER_COMMAND_DO_NOT_PLAY,
     PLAYER_COMMAND_WAIT_FOR_CALLBACK,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DefaultDrmSessionManager.java
Patch:
@@ -19,6 +19,7 @@
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.common.util.Assertions.checkState;
 import static androidx.media3.common.util.Assertions.checkStateNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.media.ResourceBusyException;
@@ -49,6 +50,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -263,6 +265,7 @@ private MissingSchemeDataException(UUID uuid) {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({MODE_PLAYBACK, MODE_QUERY, MODE_DOWNLOAD, MODE_RELEASE})
   public @interface Mode {}
   /**

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ClippingMediaSource.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -32,6 +33,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 
 /**
@@ -50,6 +52,7 @@ public static final class IllegalClippingException extends IOException {
      */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({REASON_INVALID_PERIOD_COUNT, REASON_NOT_SEEKABLE_TO_START, REASON_START_EXCEEDS_END})
     public @interface Reason {}
     /** The wrapped source doesn't consist of a single period. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MergingMediaSource.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -32,6 +33,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -52,6 +54,7 @@ public static final class IllegalMergeException extends IOException {
     /** The reason the merge failed. One of {@link #REASON_PERIOD_COUNT_MISMATCH}. */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({REASON_PERIOD_COUNT_MISMATCH})
     public @interface Reason {}
     /** The sources have different period counts. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ads/AdsMediaSource.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.common.util.Assertions.checkState;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import android.os.Handler;
@@ -47,6 +48,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -74,6 +76,7 @@ public static final class AdLoadException extends IOException {
      */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({TYPE_AD, TYPE_AD_GROUP, TYPE_ALL_ADS, TYPE_UNEXPECTED})
     public @interface Type {}
     /** Type for when an ad failed to load. The ad will be skipped. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/DefaultTrackSelector.java
Patch:
@@ -1428,6 +1428,7 @@ private static String keyForField(@FieldNumber int field) {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({SELECTION_ELIGIBILITY_NO, SELECTION_ELIGIBILITY_FIXED, SELECTION_ELIGIBILITY_ADAPTIVE})
   protected @interface SelectionEligibility {}
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/LoadErrorHandlingPolicy.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.exoplayer.upstream;
 
 import static androidx.media3.common.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -29,6 +30,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * A policy that defines how load errors are handled.
@@ -54,6 +56,7 @@ public interface LoadErrorHandlingPolicy {
   /** Fallback type. One of {@link #FALLBACK_TYPE_LOCATION} or {@link #FALLBACK_TYPE_TRACK}. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FALLBACK_TYPE_LOCATION, FALLBACK_TYPE_TRACK})
   @interface FallbackType {}
 

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/playlist/HlsMediaPlaylist.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import androidx.annotation.IntDef;
@@ -31,6 +32,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -387,6 +389,7 @@ public RenditionReport(Uri playlistUri, long lastMediaSequence, int lastPartInde
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({PLAYLIST_TYPE_UNKNOWN, PLAYLIST_TYPE_VOD, PLAYLIST_TYPE_EVENT})
   public @interface PlaylistType {}
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/flac/FlacExtractor.java
Patch:
@@ -67,6 +67,7 @@ public final class FlacExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_DISABLE_ID3_METADATA})

File: libraries/extractor/src/main/java/androidx/media3/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -21,6 +21,7 @@
 import static androidx.media3.common.util.Assertions.checkStateNotNull;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import android.util.SparseArray;
@@ -59,6 +60,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.util.ArrayList;
@@ -87,6 +89,7 @@ public class MatroskaExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_DISABLE_SEEK_FOR_CUES})

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -21,6 +21,7 @@
 import static androidx.media3.common.util.Util.nullSafeArrayCopy;
 import static androidx.media3.extractor.mp4.AtomParsers.parseTraks;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import android.util.SparseArray;
@@ -57,6 +58,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -80,6 +82,7 @@ public class FragmentedMp4Extractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/Mp4Extractor.java
Patch:
@@ -76,6 +76,7 @@ public final class Mp4Extractor implements Extractor, SeekMap {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/webvtt/WebvttCssStyle.java
Patch:
@@ -51,6 +51,7 @@ public final class WebvttCssStyle {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {UNSPECIFIED, STYLE_NORMAL, STYLE_BOLD, STYLE_ITALIC, STYLE_BOLD_ITALIC})
@@ -67,6 +68,7 @@ public final class WebvttCssStyle {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({UNSPECIFIED, FONT_SIZE_UNIT_PIXEL, FONT_SIZE_UNIT_EM, FONT_SIZE_UNIT_PERCENT})
   public @interface FontSizeUnit {}
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/AdtsExtractor.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.extractor.metadata.id3.Id3Decoder.ID3_HEADER_LENGTH;
 import static androidx.media3.extractor.metadata.id3.Id3Decoder.ID3_TAG;
 import static androidx.media3.extractor.ts.TsPayloadReader.FLAG_DATA_ALIGNMENT_INDICATOR;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.media3.common.C;
@@ -41,6 +42,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -58,6 +60,7 @@ public final class AdtsExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_ENABLE_CONSTANT_BITRATE_SEEKING, FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS})

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/TsExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.extractor.ts;
 
 import static androidx.media3.extractor.ts.TsPayloadReader.FLAG_PAYLOAD_UNIT_START_INDICATOR;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.SparseArray;
 import android.util.SparseBooleanArray;
@@ -45,6 +46,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -65,6 +67,7 @@ public final class TsExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({MODE_MULTI_PMT, MODE_SINGLE_PMT, MODE_HLS})
   public @interface Mode {}
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -23,6 +23,7 @@
 import static androidx.media3.exoplayer.DefaultLoadControl.DEFAULT_MAX_BUFFER_MS;
 import static androidx.media3.exoplayer.DefaultLoadControl.DEFAULT_MIN_BUFFER_MS;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.graphics.Matrix;
@@ -63,6 +64,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /**
@@ -503,6 +505,7 @@ public interface DebugViewProvider {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     PROGRESS_STATE_WAITING_FOR_AVAILABILITY,
     PROGRESS_STATE_AVAILABLE,

File: libraries/ui/src/main/java/androidx/media3/ui/LegacyPlayerView.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.media3.common.Player.COMMAND_GET_TEXT;
 import static androidx.media3.common.Player.COMMAND_SET_VIDEO_SURFACE;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.content.Context;
@@ -67,6 +68,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
@@ -265,6 +267,7 @@ public class LegacyPlayerView extends FrameLayout implements AdViewProvider {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({SHOW_BUFFERING_NEVER, SHOW_BUFFERING_WHEN_PLAYING, SHOW_BUFFERING_ALWAYS})
   public @interface ShowBuffering {}
   /** The buffering view is never shown. */

File: libraries/ui/src/main/java/androidx/media3/ui/PlayerView.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.common.Player.COMMAND_GET_TEXT;
 import static androidx.media3.common.Player.COMMAND_SET_VIDEO_SURFACE;
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.content.Context;
@@ -68,6 +69,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
@@ -187,6 +189,7 @@ public class PlayerView extends FrameLayout implements AdViewProvider {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({SHOW_BUFFERING_NEVER, SHOW_BUFFERING_WHEN_PLAYING, SHOW_BUFFERING_ALWAYS})
   public @interface ShowBuffering {}
   /** The buffering view is never shown. */

File: libraries/ui/src/main/java/androidx/media3/ui/SubtitleView.java
Patch:
@@ -16,6 +16,7 @@
  */
 package androidx.media3.ui;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.content.Context;
@@ -36,6 +37,7 @@
 import androidx.media3.common.util.Util;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -113,6 +115,7 @@ void update(
    */
   @Documented
   @Retention(SOURCE)
+  @Target(TYPE_USE)
   @IntDef({VIEW_TYPE_CANVAS, VIEW_TYPE_WEB})
   public @interface ViewType {}
 

File: libraries/common/src/main/java/androidx/media3/common/C.java
Patch:
@@ -745,6 +745,7 @@ private C() {}
   @UnstableApi
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       open = true,
       value = {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MediaLoadData.java
Patch:
@@ -43,7 +43,7 @@ public final class MediaLoadData {
    * One of the {@link SelectionReason selection reasons} if the data belongs to a track. {@link
    * C#SELECTION_REASON_UNKNOWN} otherwise.
    */
-  public final int trackSelectionReason;
+  public final @C.SelectionReason int trackSelectionReason;
   /**
    * Optional data associated with the selection of the track to which the data belongs. Null if the
    * data does not belong to a track.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MergingMediaPeriod.java
Patch:
@@ -548,7 +548,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return trackSelection.getSelectionReason();
     }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/AdaptiveTrackSelection.java
Patch:
@@ -316,7 +316,7 @@ protected AdaptiveTrackSelection createAdaptiveTrackSelection(
 
   private float playbackSpeed;
   private int selectedIndex;
-  private int reason;
+  private @C.SelectionReason int reason;
   private long lastBufferEvaluationMs;
   @Nullable private MediaChunk lastBufferEvaluationMediaChunk;
 
@@ -449,7 +449,7 @@ public void updateSelectedTrack(
     }
 
     int previousSelectedIndex = selectedIndex;
-    int previousReason = reason;
+    @C.SelectionReason int previousReason = reason;
     int formatIndexOfPreviousChunk =
         queue.isEmpty() ? C.INDEX_UNSET : indexOf(Iterables.getLast(queue).trackFormat);
     if (formatIndexOfPreviousChunk != C.INDEX_UNSET) {
@@ -487,7 +487,7 @@ public int getSelectedIndex() {
   }
 
   @Override
-  public int getSelectionReason() {
+  public @C.SelectionReason int getSelectionReason() {
     return reason;
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/ExoTrackSelection.java
Patch:
@@ -125,6 +125,7 @@ ExoTrackSelection[] createTrackSelections(
   int getSelectedIndex();
 
   /** Returns the reason for the current track selection. */
+  @C.SelectionReason
   int getSelectionReason();
 
   /** Returns optional data associated with the current track selection. */

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsChunkSource.java
Patch:
@@ -915,7 +915,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeTrackSelection.java
Patch:
@@ -116,7 +116,7 @@ public int getSelectedIndex() {
   }
 
   @Override
-  public int getSelectionReason() {
+  public @C.SelectionReason int getSelectionReason() {
     return C.SELECTION_REASON_UNKNOWN;
   }
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/MediaPeriodAsserts.java
Patch:
@@ -240,7 +240,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/manifest/DashManifestParser.java
Patch:
@@ -163,7 +163,7 @@ protected DashManifest parseMediaPresentationDescription(XmlPullParser xpp, Uri
       } else if (XmlPullParserUtil.isStartTag(xpp, "UTCTiming")) {
         utcTiming = parseUtcTiming(xpp);
       } else if (XmlPullParserUtil.isStartTag(xpp, "Location")) {
-        location = Uri.parse(xpp.nextText());
+        location = UriUtil.resolveToUri(documentBaseUri.toString(), xpp.nextText());
       } else if (XmlPullParserUtil.isStartTag(xpp, "ServiceDescription")) {
         serviceDescription = parseServiceDescription(xpp);
       } else if (XmlPullParserUtil.isStartTag(xpp, "Period") && !seenEarlyAccessPeriod) {

File: libraries/common/src/main/java/androidx/media3/common/DeviceInfo.java
Patch:
@@ -89,6 +89,7 @@ public int hashCode() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_PLAYBACK_TYPE, FIELD_MIN_VOLUME, FIELD_MAX_VOLUME})
   private @interface FieldNumber {}
 

File: libraries/common/src/main/java/androidx/media3/common/HeartRating.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.common;
 
 import static androidx.media3.common.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.IntDef;
@@ -25,6 +26,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * A rating expressed as "heart" or "no heart". It can be used to indicate whether the content is a
@@ -81,6 +83,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_RATED, FIELD_IS_HEART})
   private @interface FieldNumber {}
 

File: libraries/common/src/main/java/androidx/media3/common/MediaMetadata.java
Patch:
@@ -833,6 +833,7 @@ public int hashCode() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_TITLE,
     FIELD_ARTIST,

File: libraries/common/src/main/java/androidx/media3/common/PercentageRating.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.common;
 
 import static androidx.media3.common.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.FloatRange;
@@ -26,6 +27,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** A rating expressed as a percentage. */
 public final class PercentageRating extends Rating {
@@ -79,6 +81,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_PERCENT})
   private @interface FieldNumber {}
 

File: libraries/common/src/main/java/androidx/media3/common/Player.java
Patch:
@@ -598,6 +598,7 @@ public int hashCode() {
     // Bundleable implementation.
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({
       FIELD_MEDIA_ITEM_INDEX,
       FIELD_MEDIA_ITEM,
@@ -895,6 +896,7 @@ public int hashCode() {
 
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({FIELD_COMMANDS})
     private @interface FieldNumber {}
 

File: libraries/common/src/main/java/androidx/media3/common/StarRating.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.common;
 
 import static androidx.media3.common.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.FloatRange;
@@ -27,6 +28,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** A rating expressed as a fractional number of stars. */
 public final class StarRating extends Rating {
@@ -106,6 +108,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_MAX_STARS, FIELD_STAR_RATING})
   private @interface FieldNumber {}
 

File: libraries/common/src/main/java/androidx/media3/common/ThumbRating.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.common;
 
 import static androidx.media3.common.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.IntDef;
@@ -25,6 +26,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** A rating expressed as "thumbs up" or "thumbs down". */
 public final class ThumbRating extends Rating {
@@ -78,6 +80,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_RATED, FIELD_IS_THUMBS_UP})
   private @interface FieldNumber {}
 

File: libraries/common/src/main/java/androidx/media3/common/TrackGroup.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.common;
 
 import static androidx.media3.common.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.CheckResult;
@@ -29,6 +30,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Arrays;
 import java.util.List;
 
@@ -139,6 +141,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_FORMATS, FIELD_ID})
   private @interface FieldNumber {}
 

File: libraries/common/src/main/java/androidx/media3/common/TrackSelectionParameters.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.common.util.BundleableUtil.fromNullableBundle;
 import static com.google.common.base.MoreObjects.firstNonNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.graphics.Point;
@@ -35,6 +36,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Locale;
 import java.util.Set;
 import org.checkerframework.checker.initialization.qual.UnknownInitialization;
@@ -984,6 +986,7 @@ public int hashCode() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_PREFERRED_AUDIO_LANGUAGES,
     FIELD_PREFERRED_AUDIO_ROLE_FLAGS,

File: libraries/common/src/main/java/androidx/media3/common/text/Cue.java
Patch:
@@ -968,6 +968,7 @@ public Cue build() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_TEXT,
     FIELD_TEXT_ALIGNMENT,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/AudioFocusManager.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.exoplayer;
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.media.AudioFocusRequest;
@@ -34,6 +35,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /** Manages requesting and responding to changes in audio focus. */
@@ -78,6 +80,7 @@ public interface PlayerControl {
   /** Audio focus state. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     AUDIO_FOCUS_STATE_NO_FOCUS,
     AUDIO_FOCUS_STATE_HAVE_FOCUS,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioTrackPositionTracker.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.common.util.Util.castNonNull;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.media.AudioTimestamp;
 import android.media.AudioTrack;
@@ -30,6 +31,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.lang.reflect.Method;
 
 /**
@@ -111,6 +113,7 @@ void onSystemTimeUsMismatch(
   /** {@link AudioTrack} playback states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({PLAYSTATE_STOPPED, PLAYSTATE_PAUSED, PLAYSTATE_PLAYING})
   private @interface PlayState {}
   /** @see AudioTrack#PLAYSTATE_STOPPED */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/DecoderAudioRenderer.java
Patch:
@@ -21,6 +21,7 @@
 import static androidx.media3.exoplayer.source.SampleStream.FLAG_REQUIRE_FORMAT;
 import static com.google.common.base.MoreObjects.firstNonNull;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Handler;
 import android.os.SystemClock;
@@ -97,6 +98,7 @@ public abstract class DecoderAudioRenderer<
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @java.lang.annotation.Target(TYPE_USE)
   @IntDef({
     REINITIALIZATION_STATE_NONE,
     REINITIALIZATION_STATE_SIGNAL_END_OF_STREAM,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/SilenceSkippingAudioProcessor.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.exoplayer.audio;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.media3.common.C;
@@ -25,6 +26,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.nio.ByteBuffer;
 
 /**
@@ -53,6 +55,7 @@ public final class SilenceSkippingAudioProcessor extends BaseAudioProcessor {
   /** Trimming states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_NOISY,
     STATE_MAYBE_SILENT,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/TextRenderer.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.common.util.Assertions.checkState;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Handler;
 import android.os.Handler.Callback;
@@ -43,6 +44,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Collections;
 import java.util.List;
 
@@ -60,6 +62,7 @@ public final class TextRenderer extends BaseRenderer implements Callback {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     REPLACEMENT_STATE_NONE,
     REPLACEMENT_STATE_SIGNAL_END_OF_STREAM,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/Loader.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.exoplayer.upstream;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.os.Handler;
@@ -34,6 +35,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -145,6 +147,7 @@ public interface ReleaseCallback {
   /** Types of action that can be taken in response to a load error. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     ACTION_TYPE_RETRY,
     ACTION_TYPE_RETRY_AND_RESET_ERROR_COUNT,

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/DashMediaPeriod.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.exoplayer.dash;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import android.util.SparseArray;
@@ -60,6 +61,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.IdentityHashMap;
@@ -911,6 +913,7 @@ private static final class TrackGroupInfo {
 
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({CATEGORY_PRIMARY, CATEGORY_EMBEDDED, CATEGORY_MANIFEST_EVENTS})
     public @interface TrackGroupCategory {}
 

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/AdTagLoader.java
Patch:
@@ -23,6 +23,7 @@
 import static androidx.media3.exoplayer.ima.ImaUtil.getAdGroupTimesUsForCuePoints;
 import static androidx.media3.exoplayer.ima.ImaUtil.getImaLooper;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.net.Uri;
@@ -69,6 +70,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -108,6 +110,7 @@
   /** The state of ad playback. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({IMA_AD_STATE_NONE, IMA_AD_STATE_PLAYING, IMA_AD_STATE_PAUSED})
   private @interface ImaAdState {}
 

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspClient.java
Patch:
@@ -35,6 +35,7 @@
 import static androidx.media3.exoplayer.rtsp.RtspRequest.METHOD_UNSET;
 import static com.google.common.base.Strings.nullToEmpty;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import android.os.Handler;
@@ -61,6 +62,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.net.Socket;
 import java.util.ArrayDeque;
 import java.util.HashMap;
@@ -78,6 +80,7 @@
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({RTSP_STATE_UNINITIALIZED, RTSP_STATE_INIT, RTSP_STATE_READY, RTSP_STATE_PLAYING})
   public @interface RtspState {}
   /** RTSP uninitialized state, the state before sending any SETUP request. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMessageChannel.java
Patch:
@@ -19,6 +19,7 @@
 import static androidx.media3.common.util.Assertions.checkState;
 import static androidx.media3.common.util.Assertions.checkStateNotNull;
 import static androidx.media3.exoplayer.rtsp.RtspMessageUtil.isRtspStartLine;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Handler;
 import android.os.HandlerThread;
@@ -43,6 +44,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.net.Socket;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
@@ -341,6 +343,7 @@ private static final class MessageParser {
 
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({STATE_READING_FIRST_LINE, STATE_READING_HEADER, STATE_READING_BODY})
     @interface ReadingState {}
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/flac/FlacExtractor.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.common.util.Util.castNonNull;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -42,6 +43,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /**
@@ -79,6 +81,7 @@ public final class FlacExtractor implements Extractor {
   /** Parser state. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READ_ID3_METADATA,
     STATE_GET_STREAM_MARKER_AND_INFO_BLOCK_BYTES,

File: libraries/extractor/src/main/java/androidx/media3/extractor/flv/FlvExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.extractor.flv;
 
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.media3.common.C;
@@ -33,6 +34,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -46,6 +48,7 @@ public final class FlvExtractor implements Extractor {
   /** Extractor states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READING_FLV_HEADER,
     STATE_SKIPPING_TO_TAG_HEADER,

File: libraries/extractor/src/main/java/androidx/media3/extractor/jpeg/JpegExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.extractor.jpeg;
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -37,6 +38,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /** Extracts JPEG image using the Exif format. */
@@ -46,6 +48,7 @@ public final class JpegExtractor implements Extractor {
   /** Parser states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READING_MARKER,
     STATE_READING_SEGMENT_LENGTH,

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/ssa/SsaStyle.java
Patch:
@@ -18,6 +18,7 @@
 
 import static androidx.media3.common.util.Assertions.checkArgument;
 import static androidx.media3.extractor.text.ssa.SsaDecoder.STYLE_LINE_PREFIX;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.graphics.Color;
@@ -35,6 +36,7 @@
 import com.google.common.primitives.Ints;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -61,6 +63,7 @@
    *   <li>{@link #SSA_ALIGNMENT_TOP_RIGHT}
    * </ul>
    */
+  @Target(TYPE_USE)
   @IntDef({
     SSA_ALIGNMENT_UNKNOWN,
     SSA_ALIGNMENT_BOTTOM_LEFT,

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/webvtt/WebvttCueParser.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.extractor.text.webvtt;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.graphics.Color;
@@ -47,6 +48,7 @@
 import androidx.media3.common.util.Util;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -76,6 +78,7 @@ public final class WebvttCueParser {
    */
   @Documented
   @Retention(SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     TEXT_ALIGNMENT_START,
     TEXT_ALIGNMENT_CENTER,

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/Ac3Reader.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.extractor.ts;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -34,6 +35,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -43,6 +45,7 @@ public final class Ac3Reader implements ElementaryStreamReader {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({STATE_FINDING_SYNC, STATE_READING_HEADER, STATE_READING_SAMPLE})
   private @interface State {}
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/Ac4Reader.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.extractor.ts;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -34,6 +35,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -43,6 +45,7 @@ public final class Ac4Reader implements ElementaryStreamReader {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({STATE_FINDING_SYNC, STATE_READING_HEADER, STATE_READING_SAMPLE})
   private @interface State {}
 

File: libraries/session/src/main/java/androidx/media3/session/CommandButton.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.media3.common.util.Assertions.checkArgument;
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.DrawableRes;
@@ -29,6 +30,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.List;
 
 /**
@@ -195,6 +197,7 @@ private CommandButton(
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_SESSION_COMMAND,
     FIELD_PLAYER_COMMAND,

File: libraries/session/src/main/java/androidx/media3/session/ConnectionRequest.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.media3.common.util.Assertions.checkArgument;
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.IntDef;
@@ -26,6 +27,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * Created by {@link MediaController} to send its state to the {@link MediaSession} to request to
@@ -56,6 +58,7 @@ private ConnectionRequest(int version, String packageName, int pid, Bundle conne
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_VERSION, FIELD_PACKAGE_NAME, FIELD_PID, FIELD_CONNECTION_HINTS})
   private @interface FieldNumber {}
 

File: libraries/session/src/main/java/androidx/media3/session/ConnectionState.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.session;
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.app.PendingIntent;
 import android.os.Bundle;
@@ -29,6 +30,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * Created by {@link MediaSession} to send its state to the {@link MediaController} when the
@@ -75,6 +77,7 @@ public ConnectionState(
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_VERSION,
     FIELD_SESSION_BINDER,

File: libraries/session/src/main/java/androidx/media3/session/LibraryResult.java
Patch:
@@ -250,6 +250,7 @@ private static void verifyMediaItem(MediaItem item) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_RESULT_CODE,
     FIELD_COMPLETION_TIME_MS,

File: libraries/session/src/main/java/androidx/media3/session/MediaLibraryService.java
Patch:
@@ -19,6 +19,7 @@
 import static androidx.media3.common.util.Assertions.checkNotEmpty;
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.session.LibraryResult.RESULT_ERROR_NOT_SUPPORTED;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.app.PendingIntent;
 import android.content.Context;
@@ -41,6 +42,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * Superclass to be extended by services hosting {@link MediaLibrarySession media library sessions}.
@@ -650,6 +652,7 @@ public LibraryParams build() {
 
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({
       FIELD_EXTRAS,
       FIELD_RECENT,

File: libraries/session/src/main/java/androidx/media3/session/PlayerInfo.java
Patch:
@@ -20,6 +20,7 @@
 import static androidx.media3.common.Player.PLAYBACK_SUPPRESSION_REASON_NONE;
 import static androidx.media3.common.Player.PLAY_WHEN_READY_CHANGE_REASON_USER_REQUEST;
 import static androidx.media3.common.Player.STATE_IDLE;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import android.os.SystemClock;
@@ -48,6 +49,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.List;
 
 /**
@@ -649,6 +651,7 @@ private boolean isPlaying(
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_PLAYBACK_PARAMETERS,
     FIELD_REPEAT_MODE,

File: libraries/session/src/main/java/androidx/media3/session/SessionCommand.java
Patch:
@@ -172,6 +172,7 @@ public int hashCode() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_COMMAND_CODE, FIELD_CUSTOM_ACTION, FIELD_CUSTOM_EXTRAS})
   private @interface FieldNumber {}
 

File: libraries/session/src/main/java/androidx/media3/session/SessionCommands.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.common.util.Assertions.checkArgument;
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.session.SessionCommand.COMMAND_CODE_CUSTOM;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.IntDef;
@@ -31,6 +32,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
@@ -227,6 +229,7 @@ private static boolean containsCommandCode(
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_SESSION_COMMANDS})
   private @interface FieldNumber {}
 

File: libraries/session/src/main/java/androidx/media3/session/SessionResult.java
Patch:
@@ -177,6 +177,7 @@ private SessionResult(@Code int resultCode, Bundle extras, long completionTimeMs
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RESULT_CODE, FIELD_EXTRAS, FIELD_COMPLETION_TIME_MS})
   private @interface FieldNumber {}
 

File: libraries/session/src/main/java/androidx/media3/session/SessionToken.java
Patch:
@@ -424,6 +424,7 @@ private static MediaControllerCompat createMediaControllerCompat(
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_IMPL_TYPE, FIELD_IMPL})
   private @interface FieldNumber {}
 
@@ -433,6 +434,7 @@ private static MediaControllerCompat createMediaControllerCompat(
   /** Types of {@link SessionTokenImpl} */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({IMPL_TYPE_BASE, IMPL_TYPE_LEGACY})
   private @interface SessionTokenImplType {}
 

File: libraries/session/src/main/java/androidx/media3/session/SessionTokenImplBase.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.common.util.Assertions.checkArgument;
 import static androidx.media3.common.util.Assertions.checkNotEmpty;
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.ComponentName;
 import android.os.Bundle;
@@ -31,6 +32,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /* package */ final class SessionTokenImplBase implements SessionToken.SessionTokenImpl {
 
@@ -184,6 +186,7 @@ public Object getBinder() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_UID,
     FIELD_TYPE,

File: libraries/session/src/main/java/androidx/media3/session/SessionTokenImplLegacy.java
Patch:
@@ -22,6 +22,7 @@
 import static androidx.media3.session.SessionToken.TYPE_LIBRARY_SERVICE;
 import static androidx.media3.session.SessionToken.TYPE_SESSION;
 import static androidx.media3.session.SessionToken.TYPE_SESSION_LEGACY;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.ComponentName;
 import android.os.Bundle;
@@ -34,6 +35,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /* package */ final class SessionTokenImplLegacy implements SessionTokenImpl {
 
@@ -169,6 +171,7 @@ public Object getBinder() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_LEGACY_TOKEN,
     FIELD_UID,

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/DumpFileAsserts.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.test.utils;
 
 import static com.google.common.truth.Truth.assertWithMessage;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import androidx.annotation.IntDef;
@@ -29,6 +30,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * Helper class to enable assertions based on golden-data dump files.
@@ -53,6 +55,7 @@ public class DumpFileAsserts {
   /** Possible actions to take with the dumps passed to {@link #assertOutput}. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {COMPARE_WITH_EXISTING, WRITE_TO_LOCAL, WRITE_TO_DEVICE})

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/WebServerDispatcher.java
Patch:
@@ -21,6 +21,7 @@
 import static androidx.media3.test.utils.WebServerDispatcher.Resource.GZIP_SUPPORT_FORCED;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import androidx.annotation.IntDef;
@@ -34,6 +35,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Arrays;
 import java.util.List;
 import java.util.regex.Matcher;
@@ -68,6 +70,7 @@ public static class Resource {
      */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({GZIP_SUPPORT_DISABLED, GZIP_SUPPORT_ENABLED, GZIP_SUPPORT_FORCED})
     private @interface GzipSupport {}
 

File: libraries/ui/src/main/java/androidx/media3/ui/LegacyPlayerView.java
Patch:
@@ -252,7 +252,10 @@
  * single instance in a layout file. This is achieved by setting the {@code player_layout_id}
  * attribute on a LegacyPlayerView. This will cause the specified layout to be inflated instead of
  * {@code exo_legacy_player_view.xml} for only the instance on which the attribute is set.
+ *
+ * @deprecated Use {@link PlayerView} instead.
  */
+@Deprecated
 @UnstableApi
 public class LegacyPlayerView extends FrameLayout implements AdViewProvider {
 

File: libraries/common/src/main/java/androidx/media3/common/AdOverlayInfo.java
Patch:
@@ -37,6 +37,8 @@ public final class AdOverlayInfo {
    * The purpose of the overlay. One of {@link #PURPOSE_CONTROLS}, {@link #PURPOSE_CLOSE_AD}, {@link
    * #PURPOSE_OTHER} or {@link #PURPOSE_NOT_VISIBLE}.
    */
+  // @Target list includes both 'default' targets and TYPE_USE, to ensure backwards compatibility
+  // with Kotlin usages from before TYPE_USE was added.
   @Documented
   @Retention(RetentionPolicy.SOURCE)
   @Target({FIELD, METHOD, PARAMETER, LOCAL_VARIABLE, TYPE_USE})

File: libraries/common/src/main/java/androidx/media3/common/DeviceInfo.java
Patch:
@@ -15,12 +15,13 @@
  */
 package androidx.media3.common;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
+
 import android.os.Bundle;
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
 import androidx.media3.common.util.UnstableApi;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -31,7 +32,7 @@ public final class DeviceInfo implements Bundleable {
   /** Types of playback. One of {@link #PLAYBACK_TYPE_LOCAL} or {@link #PLAYBACK_TYPE_REMOTE}. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({
     PLAYBACK_TYPE_LOCAL,
     PLAYBACK_TYPE_REMOTE,

File: libraries/common/src/main/java/androidx/media3/common/PlaybackException.java
Patch:
@@ -46,6 +46,8 @@ public class PlaybackException extends Exception implements Bundleable {
    * <p>This list of errors may be extended in future versions, and {@link Player} implementations
    * may define custom error codes.
    */
+  // @Target list includes both 'default' targets and TYPE_USE, to ensure backwards compatibility
+  // with Kotlin usages from before TYPE_USE was added.
   @Documented
   @Retention(RetentionPolicy.SOURCE)
   @Target({FIELD, METHOD, PARAMETER, LOCAL_VARIABLE, TYPE_USE})

File: libraries/common/src/main/java/androidx/media3/common/TrackSelection.java
Patch:
@@ -15,10 +15,11 @@
  */
 package androidx.media3.common;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
+
 import androidx.annotation.IntDef;
 import androidx.media3.common.util.UnstableApi;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -38,7 +39,7 @@ public interface TrackSelection {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef(
       open = true,
       value = {TYPE_UNSET})

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/PlaybackStats.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.SystemClock;
 import androidx.annotation.IntDef;
@@ -26,7 +27,6 @@
 import androidx.media3.common.util.UnstableApi;
 import androidx.media3.exoplayer.analytics.AnalyticsListener.EventTime;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -174,7 +174,7 @@ public int hashCode() {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({
     PLAYBACK_STATE_NOT_STARTED,
     PLAYBACK_STATE_JOINING_BACKGROUND,

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsMediaSource.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.exoplayer.hls;
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.os.Looper;
@@ -57,7 +58,6 @@
 import androidx.media3.extractor.Extractor;
 import java.io.IOException;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 import java.util.List;
@@ -85,7 +85,7 @@ public final class HlsMediaSource extends BaseMediaSource
    */
   @Documented
   @Retention(SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({METADATA_TYPE_ID3, METADATA_TYPE_EMSG})
   public @interface MetadataType {}
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/wav/WavExtractor.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import androidx.annotation.IntDef;
@@ -38,7 +39,6 @@
 import androidx.media3.extractor.WavUtil;
 import java.io.IOException;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -65,7 +65,7 @@ public final class WavExtractor implements Extractor {
   /** Parser state. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READING_FILE_TYPE,
     STATE_READING_RF64_SAMPLE_DATA_SIZE,

File: libraries/session/src/main/java/androidx/media3/session/SessionCommand.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.media3.common.util.Assertions.checkArgument;
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import android.text.TextUtils;
@@ -29,7 +30,6 @@
 import com.google.common.base.Objects;
 import com.google.common.collect.ImmutableList;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -46,7 +46,7 @@ public final class SessionCommand implements Bundleable {
   /** Command codes of session commands. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({
     COMMAND_CODE_CUSTOM,
     COMMAND_CODE_SESSION_SET_MEDIA_URI,

File: libraries/common/src/main/java/androidx/media3/common/MediaItem.java
Patch:
@@ -1839,7 +1839,7 @@ private static MediaItem fromBundle(Bundle bundle) {
     return new MediaItem(
         mediaId,
         clippingConfiguration,
-        /* playbackProperties= */ null,
+        /* localConfiguration= */ null,
         liveConfiguration,
         mediaMetadata);
   }

File: libraries/decoder_flac/src/main/java/androidx/media3/decoder/flac/FlacExtractor.java
Patch:
@@ -288,7 +288,7 @@ private static void outputSample(
     sampleData.setPosition(0);
     output.sampleData(sampleData, size);
     output.sampleMetadata(
-        timeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* encryptionData= */ null);
+        timeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* cryptoData= */ null);
   }
 
   /** A {@link SeekMap} implementation using a SeekTable within the Flac stream. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ProgressiveMediaPeriod.java
Patch:
@@ -1071,7 +1071,7 @@ public void onIcyMetadata(ParsableByteArray metadata) {
       TrackOutput icyTrackOutput = Assertions.checkNotNull(this.icyTrackOutput);
       icyTrackOutput.sampleData(metadata, length);
       icyTrackOutput.sampleMetadata(
-          timeUs, C.BUFFER_FLAG_KEY_FRAME, length, /* offset= */ 0, /* encryptionData= */ null);
+          timeUs, C.BUFFER_FLAG_KEY_FRAME, length, /* offset= */ 0, /* cryptoData= */ null);
       seenIcyMetadata = true;
     }
 

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/RtpAacReader.java
Patch:
@@ -151,7 +151,7 @@ public void seek(long nextRtpTimestamp, long timeUs) {
 
   private static void outputSampleMetadata(TrackOutput trackOutput, long sampleTimeUs, int size) {
     trackOutput.sampleMetadata(
-        sampleTimeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* encryptionData= */ null);
+        sampleTimeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* cryptoData= */ null);
   }
 
   /** Returns the correct sample time from RTP timestamp, accounting for the AAC sampling rate. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/RtpAc3Reader.java
Patch:
@@ -140,7 +140,7 @@ private void processSingleFramePacket(ParsableByteArray data, long sampleTimeUs)
             /* flags= */ C.BUFFER_FLAG_KEY_FRAME,
             /* size= */ frameSize,
             /* offset= */ 0,
-            /* encryptionData= */ null);
+            /* cryptoData= */ null);
   }
 
   private void processMultiFramePacket(ParsableByteArray data, int numOfFrames, long sampleTimeUs) {
@@ -159,7 +159,7 @@ private void processMultiFramePacket(ParsableByteArray data, int numOfFrames, lo
               /* flags= */ C.BUFFER_FLAG_KEY_FRAME,
               /* size= */ frameInfo.frameSize,
               /* offset= */ 0,
-              /* encryptionData= */ null);
+              /* cryptoData= */ null);
 
       sampleTimeUs += (frameInfo.sampleCount / frameInfo.sampleRate) * C.MICROS_PER_SECOND;
       // Advance the position by the number of bytes read.
@@ -205,7 +205,7 @@ private void outputSampleMetadataForFragmentedPackets() {
             /* flags= */ C.BUFFER_FLAG_KEY_FRAME,
             /* size= */ numBytesPendingMetadataOutput,
             /* offset= */ 0,
-            /* encryptionData= */ null);
+            /* cryptoData= */ null);
     numBytesPendingMetadataOutput = 0;
   }
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/amr/AmrExtractor.java
Patch:
@@ -319,7 +319,7 @@ private int readSample(ExtractorInput extractorInput) throws IOException {
         C.BUFFER_FLAG_KEY_FRAME,
         currentSampleSize,
         /* offset= */ 0,
-        /* encryptionData= */ null);
+        /* cryptoData= */ null);
     currentSampleTimeUs += SAMPLE_TIME_PER_FRAME_US;
     return RESULT_CONTINUE;
   }

File: libraries/extractor/src/main/java/androidx/media3/extractor/flac/FlacExtractor.java
Patch:
@@ -416,6 +416,6 @@ private void outputSampleMetadata() {
             C.BUFFER_FLAG_KEY_FRAME,
             currentFrameBytesWritten,
             /* offset= */ 0,
-            /* encryptionData= */ null);
+            /* cryptoData= */ null);
   }
 }

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/H263Reader.java
Patch:
@@ -475,7 +475,7 @@ public void onDataEnd(long position, int bytesWrittenPastPosition, boolean hasOu
         int size = (int) (position - samplePosition);
         @C.BufferFlags int flags = sampleIsKeyframe ? C.BUFFER_FLAG_KEY_FRAME : 0;
         output.sampleMetadata(
-            sampleTimeUs, flags, size, bytesWrittenPastPosition, /* encryptionData= */ null);
+            sampleTimeUs, flags, size, bytesWrittenPastPosition, /* cryptoData= */ null);
       }
       // Start a new sample, unless this is a 'group of video object plane' in which case we
       // include the data at the start of a 'video object plane' coming next.

File: libraries/extractor/src/main/java/androidx/media3/extractor/wav/WavExtractor.java
Patch:
@@ -369,7 +369,7 @@ public boolean sampleData(ExtractorInput input, long bytesLeft) throws IOExcepti
         int size = pendingFrames * bytesPerFrame;
         int offset = pendingOutputBytes - size;
         trackOutput.sampleMetadata(
-            timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* encryptionData= */ null);
+            timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* cryptoData= */ null);
         outputFrameCount += pendingFrames;
         pendingOutputBytes = offset;
       }
@@ -548,7 +548,7 @@ private void writeSampleMetadata(int sampleFrames) {
       int size = numOutputFramesToBytes(sampleFrames);
       int offset = pendingOutputBytes - size;
       trackOutput.sampleMetadata(
-          timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* encryptionData= */ null);
+          timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* cryptoData= */ null);
       outputFrameCount += sampleFrames;
       pendingOutputBytes -= size;
     }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadHelper.java
Patch:
@@ -893,8 +893,7 @@ private static MediaSource createMediaSourceInternal(
       MediaItem mediaItem,
       DataSource.Factory dataSourceFactory,
       @Nullable DrmSessionManager drmSessionManager) {
-    return new DefaultMediaSourceFactory(
-            dataSourceFactory, ExtractorsFactory.EMPTY, /* serverSideDaiMediaSourceFactory= */ null)
+    return new DefaultMediaSourceFactory(dataSourceFactory, ExtractorsFactory.EMPTY)
         .setDrmSessionManagerProvider(
             drmSessionManager != null ? unusedMediaItem -> drmSessionManager : null)
         .createMediaSource(mediaItem);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultEncoderFactory.java
Patch:
@@ -79,9 +79,9 @@ public Codec createForAudioEncoding(Format format, List<String> allowedMimeTypes
       } else {
         throw TransformationException.createForCodec(
             new IllegalArgumentException("The requested output format is not supported."),
-            format,
             /* isVideo= */ false,
             /* isDecoder= */ false,
+            format,
             /* mediaCodecName= */ null,
             TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
       }
@@ -119,9 +119,9 @@ public Codec createForVideoEncoding(Format format, List<String> allowedMimeTypes
     if (encoderAndClosestFormatSupport == null) {
       throw TransformationException.createForCodec(
           new IllegalArgumentException("The requested output format is not supported."),
-          format,
           /* isVideo= */ true,
           /* isDecoder= */ false,
+          format,
           /* mediaCodecName= */ null,
           TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
     }

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultEncoderFactory.java
Patch:
@@ -81,9 +81,9 @@ public Codec createForAudioEncoding(Format format, List<String> allowedMimeTypes
       } else {
         throw TransformationException.createForCodec(
             new IllegalArgumentException("The requested output format is not supported."),
-            format,
             /* isVideo= */ false,
             /* isDecoder= */ false,
+            format,
             /* mediaCodecName= */ null,
             TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
       }
@@ -121,9 +121,9 @@ public Codec createForVideoEncoding(Format format, List<String> allowedMimeTypes
     if (encoderAndClosestFormatSupport == null) {
       throw TransformationException.createForCodec(
           new IllegalArgumentException("The requested output format is not supported."),
-          format,
           /* isVideo= */ true,
           /* isDecoder= */ false,
+          format,
           /* mediaCodecName= */ null,
           TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
     }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/WebServerDispatcher.java
Patch:
@@ -28,6 +28,7 @@
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.util.Util;
 import com.google.common.base.Joiner;
+import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
@@ -239,7 +240,7 @@ public Builder buildUpon() {
 
   /** Returns the path for a given {@link RecordedRequest}, stripping any query parameters. */
   public static String getRequestPath(RecordedRequest request) {
-    return Util.splitAtFirst(request.getPath(), "\\?")[0];
+    return Util.splitAtFirst(Strings.nullToEmpty(request.getPath()), "\\?")[0];
   }
 
   /**

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/WebServerDispatcher.java
Patch:
@@ -29,6 +29,7 @@
 import androidx.media3.common.util.UnstableApi;
 import androidx.media3.common.util.Util;
 import com.google.common.base.Joiner;
+import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
@@ -241,7 +242,7 @@ public Builder buildUpon() {
 
   /** Returns the path for a given {@link RecordedRequest}, stripping any query parameters. */
   public static String getRequestPath(RecordedRequest request) {
-    return Util.splitAtFirst(request.getPath(), "\\?")[0];
+    return Util.splitAtFirst(Strings.nullToEmpty(request.getPath()), "\\?")[0];
   }
 
   /**

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/ConfigurationActivity.java
Patch:
@@ -61,12 +61,14 @@ public final class ConfigurationActivity extends AppCompatActivity {
     "https://storage.googleapis.com/exoplayer-test-media-0/android-block-1080-hevc.mp4",
     "https://storage.googleapis.com/exoplayer-test-media-0/BigBuckBunny_320x180.mp4",
     "https://html5demos.com/assets/dizzy.webm",
+    "https://storage.googleapis.com/exoplayer-test-media-1/mp4/portrait_4k60.mp4",
   };
   private static final String[] URI_DESCRIPTIONS = { // same order as INPUT_URIS
     "MP4 with H264 video and AAC audio",
     "MP4 with H265 video and AAC audio",
     "Long MP4 with H264 video and AAC audio",
     "WebM with VP8 video and Vorbis audio",
+    "4K 60fps MP4 with H264 video and AAC audio (portrait, timestamps always increase)",
   };
   private static final String SAME_AS_INPUT_OPTION = "same as input";
 

File: library/common/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelectionOverride.java
Patch:
@@ -87,7 +87,7 @@ public TrackSelectionOverride(TrackGroup trackGroup, List<Integer> trackIndices)
 
   /** Returns the {@link C.TrackType} of the overridden track group. */
   public @C.TrackType int getTrackType() {
-    return MimeTypes.getTrackType(trackGroup.getFormat(0).sampleMimeType);
+    return trackGroup.type;
   }
 
   @Override

File: libraries/common/src/main/java/androidx/media3/common/TrackSelectionOverride.java
Patch:
@@ -88,7 +88,7 @@ public TrackSelectionOverride(TrackGroup trackGroup, List<Integer> trackIndices)
 
   /** Returns the {@link C.TrackType} of the overridden track group. */
   public @C.TrackType int getTrackType() {
-    return MimeTypes.getTrackType(trackGroup.getFormat(0).sampleMimeType);
+    return trackGroup.type;
   }
 
   @Override

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/TransformerEndToEndTest.java
Patch:
@@ -48,7 +48,7 @@ public void videoTranscoding_completesWithConsistentFrameCount() throws Exceptio
                 new TransformationRequest.Builder().setVideoMimeType(MimeTypes.VIDEO_H264).build())
             .setMuxerFactory(muxerFactory)
             .setEncoderFactory(
-                new DefaultEncoderFactory(EncoderSelector.DEFAULT, /* disableFallback= */ true))
+                new DefaultEncoderFactory(EncoderSelector.DEFAULT, /* enableFallback= */ false))
             .build();
     // Result of the following command:
     // ffprobe -count_frames -select_streams v:0 -show_entries stream=nb_read_frames bear-vp9.webm
@@ -81,7 +81,7 @@ public void videoEditing_completesWithConsistentFrameCount() throws Exception {
                     .build())
             .setMuxerFactory(muxerFactory)
             .setEncoderFactory(
-                new DefaultEncoderFactory(EncoderSelector.DEFAULT, /* disableFallback= */ true))
+                new DefaultEncoderFactory(EncoderSelector.DEFAULT, /* enableFallback= */ false))
             .build();
     // Result of the following command:
     // ffprobe -count_frames -select_streams v:0 -show_entries stream=nb_read_frames sample.mp4

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/TransformerEndToEndTest.java
Patch:
@@ -48,7 +48,7 @@ public void videoTranscoding_completesWithConsistentFrameCount() throws Exceptio
                 new TransformationRequest.Builder().setVideoMimeType(MimeTypes.VIDEO_H264).build())
             .setMuxerFactory(muxerFactory)
             .setEncoderFactory(
-                new DefaultEncoderFactory(EncoderSelector.DEFAULT, /* disableFallback= */ true))
+                new DefaultEncoderFactory(EncoderSelector.DEFAULT, /* enableFallback= */ false))
             .build();
     // Result of the following command:
     // ffprobe -count_frames -select_streams v:0 -show_entries stream=nb_read_frames bear-vp9.webm
@@ -81,7 +81,7 @@ public void videoEditing_completesWithConsistentFrameCount() throws Exception {
                     .build())
             .setMuxerFactory(muxerFactory)
             .setEncoderFactory(
-                new DefaultEncoderFactory(EncoderSelector.DEFAULT, /* disableFallback= */ true))
+                new DefaultEncoderFactory(EncoderSelector.DEFAULT, /* enableFallback= */ false))
             .build();
     // Result of the following command:
     // ffprobe -count_frames -select_streams v:0 -show_entries stream=nb_read_frames sample.mp4

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -248,8 +248,9 @@ private static Matrix getTransformationMatrix(Bundle bundle) {
 
     float translateX = bundle.getFloat(ConfigurationActivity.TRANSLATE_X, /* defaultValue= */ 0);
     float translateY = bundle.getFloat(ConfigurationActivity.TRANSLATE_Y, /* defaultValue= */ 0);
-    // TODO(b/213198690): Get resolution for aspect ratio and scale all translations' translateX
-    // by this aspect ratio.
+    // TODO(b/201293185): Implement an AdvancedFrameEditor to handle translation, as the current
+    // transformationMatrix is automatically adjusted to focus on the original pixels and
+    // effectively undo translations.
     transformationMatrix.postTranslate(translateX, translateY);
 
     float scaleX = bundle.getFloat(ConfigurationActivity.SCALE_X, /* defaultValue= */ 1);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerVideoRenderer.java
Patch:
@@ -115,6 +115,9 @@ private boolean shouldPassthrough(Format inputFormat) {
       return false;
     }
     if (!transformationRequest.transformationMatrix.isIdentity()) {
+      // TODO(b/201293185, b/214010296): Move FrameProcessor transformationMatrix calculation /
+      // adjustments out of the VideoTranscodingSamplePipeline, so that we can skip transcoding when
+      // adjustments result in identity matrices.
       return false;
     }
     return true;

File: libraries/session/src/main/java/androidx/media3/session/MediaSessionService.java
Patch:
@@ -396,7 +396,7 @@ private MediaNotificationManager getMediaNotificationManager() {
         if (mediaNotificationProvider == null) {
           mediaNotificationProvider = new DefaultMediaNotificationProvider(getApplicationContext());
         }
-        actionFactory = new DefaultActionFactory(getApplicationContext());
+        actionFactory = new DefaultActionFactory(/* service= */ this);
         mediaNotificationManager =
             new MediaNotificationManager(
                 /* mediaSessionService= */ this, mediaNotificationProvider, actionFactory);

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -248,8 +248,9 @@ private static Matrix getTransformationMatrix(Bundle bundle) {
 
     float translateX = bundle.getFloat(ConfigurationActivity.TRANSLATE_X, /* defaultValue= */ 0);
     float translateY = bundle.getFloat(ConfigurationActivity.TRANSLATE_Y, /* defaultValue= */ 0);
-    // TODO(b/213198690): Get resolution for aspect ratio and scale all translations' translateX
-    // by this aspect ratio.
+    // TODO(b/201293185): Implement an AdvancedFrameEditor to handle translation, as the current
+    // transformationMatrix is automatically adjusted to focus on the original pixels and
+    // effectively undo translations.
     transformationMatrix.postTranslate(translateX, translateY);
 
     float scaleX = bundle.getFloat(ConfigurationActivity.SCALE_X, /* defaultValue= */ 1);

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerVideoRenderer.java
Patch:
@@ -115,6 +115,9 @@ private boolean shouldPassthrough(Format inputFormat) {
       return false;
     }
     if (!transformationRequest.transformationMatrix.isIdentity()) {
+      // TODO(b/201293185, b/214010296): Move FrameProcessor transformationMatrix calculation /
+      // adjustments out of the VideoTranscodingSamplePipeline, so that we can skip transcoding when
+      // adjustments result in identity matrices.
       return false;
     }
     return true;

File: demos/transformer/src/main/java/com/google/android/exoplayer2/transformerdemo/TransformerActivity.java
Patch:
@@ -150,6 +150,7 @@ private void startTransformation() {
       throw new IllegalStateException(e);
     }
     informationTextView.setText(R.string.transformation_started);
+    playerView.setVisibility(View.GONE);
     Handler mainHandler = new Handler(getMainLooper());
     ProgressHolder progressHolder = new ProgressHolder();
     mainHandler.post(
@@ -287,6 +288,7 @@ private void onTransformationCompleted(String filePath) {
         getString(
             R.string.transformation_completed, transformationStopwatch.elapsed(TimeUnit.SECONDS)));
     progressViewGroup.setVisibility(View.GONE);
+    playerView.setVisibility(View.VISIBLE);
     playMediaItem(MediaItem.fromUri("file://" + filePath));
     Log.d(TAG, "Output file path: file://" + filePath);
   }

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -32,6 +32,7 @@
 import androidx.annotation.VisibleForTesting;
 import com.google.android.exoplayer2.analytics.AnalyticsCollector;
 import com.google.android.exoplayer2.analytics.AnalyticsListener;
+import com.google.android.exoplayer2.analytics.DefaultAnalyticsCollector;
 import com.google.android.exoplayer2.audio.AudioAttributes;
 import com.google.android.exoplayer2.audio.AudioSink;
 import com.google.android.exoplayer2.audio.AuxEffectInfo;
@@ -565,7 +566,7 @@ private Builder(
       this.analyticsCollectorSupplier =
           analyticsCollectorSupplier != null
               ? analyticsCollectorSupplier
-              : () -> new AnalyticsCollector(checkNotNull(clock));
+              : () -> new DefaultAnalyticsCollector(checkNotNull(clock));
       looper = Util.getCurrentOrMainLooper();
       audioAttributes = AudioAttributes.DEFAULT;
       wakeMode = C.WAKE_MODE_NONE;

File: library/core/src/test/java/com/google/android/exoplayer2/MediaPeriodQueueTest.java
Patch:
@@ -25,6 +25,7 @@
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.analytics.AnalyticsCollector;
+import com.google.android.exoplayer2.analytics.DefaultAnalyticsCollector;
 import com.google.android.exoplayer2.analytics.PlayerId;
 import com.google.android.exoplayer2.source.MediaSource.MediaPeriodId;
 import com.google.android.exoplayer2.source.MediaSource.MediaSourceCaller;
@@ -77,7 +78,7 @@ public final class MediaPeriodQueueTest {
 
   @Before
   public void setUp() {
-    AnalyticsCollector analyticsCollector = new AnalyticsCollector(Clock.DEFAULT);
+    AnalyticsCollector analyticsCollector = new DefaultAnalyticsCollector(Clock.DEFAULT);
     analyticsCollector.setPlayer(
         new ExoPlayer.Builder(ApplicationProvider.getApplicationContext()).build(),
         Looper.getMainLooper());

File: library/core/src/test/java/com/google/android/exoplayer2/MediaSourceListTest.java
Patch:
@@ -29,6 +29,7 @@
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.analytics.AnalyticsCollector;
+import com.google.android.exoplayer2.analytics.DefaultAnalyticsCollector;
 import com.google.android.exoplayer2.analytics.PlayerId;
 import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.source.ShuffleOrder;
@@ -55,7 +56,7 @@ public class MediaSourceListTest {
 
   @Before
   public void setUp() {
-    AnalyticsCollector analyticsCollector = new AnalyticsCollector(Clock.DEFAULT);
+    AnalyticsCollector analyticsCollector = new DefaultAnalyticsCollector(Clock.DEFAULT);
     analyticsCollector.setPlayer(
         new ExoPlayer.Builder(ApplicationProvider.getApplicationContext()).build(),
         Looper.getMainLooper());

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/TestExoPlayerBuilder.java
Patch:
@@ -26,7 +26,7 @@
 import com.google.android.exoplayer2.Renderer;
 import com.google.android.exoplayer2.RenderersFactory;
 import com.google.android.exoplayer2.SimpleExoPlayer;
-import com.google.android.exoplayer2.analytics.AnalyticsCollector;
+import com.google.android.exoplayer2.analytics.DefaultAnalyticsCollector;
 import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
 import com.google.android.exoplayer2.upstream.BandwidthMeter;
@@ -300,7 +300,7 @@ public SimpleExoPlayer build() {
             .setTrackSelector(trackSelector)
             .setLoadControl(loadControl)
             .setBandwidthMeter(bandwidthMeter)
-            .setAnalyticsCollector(new AnalyticsCollector(clock))
+            .setAnalyticsCollector(new DefaultAnalyticsCollector(clock))
             .setClock(clock)
             .setUseLazyPreparation(useLazyPreparation)
             .setLooper(looper)

File: extensions/opus/src/main/java/com/google/android/exoplayer2/ext/opus/OpusDecoder.java
Patch:
@@ -97,6 +97,7 @@ public OpusDecoder(
     }
     preSkipSamples = getPreSkipSamples(initializationData);
     seekPreRollSamples = getSeekPreRollSamples(initializationData);
+    skipSamples = preSkipSamples;
 
     byte[] headerBytes = initializationData.get(0);
     if (headerBytes.length < 19) {

File: demos/transformer/src/main/java/androidx/media3/demo/transformer/TransformerActivity.java
Patch:
@@ -150,6 +150,7 @@ private void startTransformation() {
       throw new IllegalStateException(e);
     }
     informationTextView.setText(R.string.transformation_started);
+    playerView.setVisibility(View.GONE);
     Handler mainHandler = new Handler(getMainLooper());
     ProgressHolder progressHolder = new ProgressHolder();
     mainHandler.post(
@@ -287,6 +288,7 @@ private void onTransformationCompleted(String filePath) {
         getString(
             R.string.transformation_completed, transformationStopwatch.elapsed(TimeUnit.SECONDS)));
     progressViewGroup.setVisibility(View.GONE);
+    playerView.setVisibility(View.VISIBLE);
     playMediaItem(MediaItem.fromUri("file://" + filePath));
     Log.d(TAG, "Output file path: file://" + filePath);
   }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayer.java
Patch:
@@ -47,6 +47,7 @@
 import androidx.media3.datasource.DataSource;
 import androidx.media3.exoplayer.analytics.AnalyticsCollector;
 import androidx.media3.exoplayer.analytics.AnalyticsListener;
+import androidx.media3.exoplayer.analytics.DefaultAnalyticsCollector;
 import androidx.media3.exoplayer.audio.AudioSink;
 import androidx.media3.exoplayer.audio.DefaultAudioSink;
 import androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;
@@ -580,7 +581,7 @@ private Builder(
       this.analyticsCollectorSupplier =
           analyticsCollectorSupplier != null
               ? analyticsCollectorSupplier
-              : () -> new AnalyticsCollector(checkNotNull(clock));
+              : () -> new DefaultAnalyticsCollector(checkNotNull(clock));
       looper = Util.getCurrentOrMainLooper();
       audioAttributes = AudioAttributes.DEFAULT;
       wakeMode = C.WAKE_MODE_NONE;

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/MediaPeriodQueueTest.java
Patch:
@@ -31,6 +31,7 @@
 import androidx.media3.common.TracksInfo;
 import androidx.media3.common.util.Clock;
 import androidx.media3.exoplayer.analytics.AnalyticsCollector;
+import androidx.media3.exoplayer.analytics.DefaultAnalyticsCollector;
 import androidx.media3.exoplayer.analytics.PlayerId;
 import androidx.media3.exoplayer.source.MediaSource.MediaPeriodId;
 import androidx.media3.exoplayer.source.MediaSource.MediaSourceCaller;
@@ -83,7 +84,7 @@ public final class MediaPeriodQueueTest {
 
   @Before
   public void setUp() {
-    AnalyticsCollector analyticsCollector = new AnalyticsCollector(Clock.DEFAULT);
+    AnalyticsCollector analyticsCollector = new DefaultAnalyticsCollector(Clock.DEFAULT);
     analyticsCollector.setPlayer(
         new ExoPlayer.Builder(ApplicationProvider.getApplicationContext()).build(),
         Looper.getMainLooper());

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/MediaSourceListTest.java
Patch:
@@ -32,6 +32,7 @@
 import androidx.media3.common.util.Clock;
 import androidx.media3.common.util.Util;
 import androidx.media3.exoplayer.analytics.AnalyticsCollector;
+import androidx.media3.exoplayer.analytics.DefaultAnalyticsCollector;
 import androidx.media3.exoplayer.analytics.PlayerId;
 import androidx.media3.exoplayer.source.MediaSource;
 import androidx.media3.exoplayer.source.ShuffleOrder;
@@ -58,7 +59,7 @@ public class MediaSourceListTest {
 
   @Before
   public void setUp() {
-    AnalyticsCollector analyticsCollector = new AnalyticsCollector(Clock.DEFAULT);
+    AnalyticsCollector analyticsCollector = new DefaultAnalyticsCollector(Clock.DEFAULT);
     analyticsCollector.setPlayer(
         new ExoPlayer.Builder(ApplicationProvider.getApplicationContext()).build(),
         Looper.getMainLooper());

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/TestExoPlayerBuilder.java
Patch:
@@ -29,7 +29,7 @@
 import androidx.media3.exoplayer.Renderer;
 import androidx.media3.exoplayer.RenderersFactory;
 import androidx.media3.exoplayer.SimpleExoPlayer;
-import androidx.media3.exoplayer.analytics.AnalyticsCollector;
+import androidx.media3.exoplayer.analytics.DefaultAnalyticsCollector;
 import androidx.media3.exoplayer.source.MediaSource;
 import androidx.media3.exoplayer.trackselection.DefaultTrackSelector;
 import androidx.media3.exoplayer.upstream.BandwidthMeter;
@@ -302,7 +302,7 @@ public SimpleExoPlayer build() {
             .setTrackSelector(trackSelector)
             .setLoadControl(loadControl)
             .setBandwidthMeter(bandwidthMeter)
-            .setAnalyticsCollector(new AnalyticsCollector(clock))
+            .setAnalyticsCollector(new DefaultAnalyticsCollector(clock))
             .setClock(clock)
             .setUseLazyPreparation(useLazyPreparation)
             .setLooper(looper)

File: libraries/decoder_opus/src/main/java/androidx/media3/decoder/opus/OpusDecoder.java
Patch:
@@ -99,6 +99,7 @@ public OpusDecoder(
     }
     preSkipSamples = getPreSkipSamples(initializationData);
     seekPreRollSamples = getSeekPreRollSamples(initializationData);
+    skipSamples = preSkipSamples;
 
     byte[] headerBytes = initializationData.get(0);
     if (headerBytes.length < 19) {

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
Patch:
@@ -525,7 +525,7 @@ public void setRepeatMode(@RepeatMode int repeatMode) {
     setRepeatModeAndNotifyIfChanged(repeatMode);
     listeners.flushEvents();
     PendingResult<MediaChannelResult> pendingResult =
-        remoteMediaClient.queueSetRepeatMode(getCastRepeatMode(repeatMode), /* jsonObject= */ null);
+        remoteMediaClient.queueSetRepeatMode(getCastRepeatMode(repeatMode), /* customData= */ null);
     this.repeatMode.pendingResultCallback =
         new ResultCallback<MediaChannelResult>() {
           @Override

File: libraries/cast/src/main/java/androidx/media3/cast/CastPlayer.java
Patch:
@@ -527,7 +527,7 @@ public void setRepeatMode(@RepeatMode int repeatMode) {
     setRepeatModeAndNotifyIfChanged(repeatMode);
     listeners.flushEvents();
     PendingResult<MediaChannelResult> pendingResult =
-        remoteMediaClient.queueSetRepeatMode(getCastRepeatMode(repeatMode), /* jsonObject= */ null);
+        remoteMediaClient.queueSetRepeatMode(getCastRepeatMode(repeatMode), /* customData= */ null);
     this.repeatMode.pendingResultCallback =
         new ResultCallback<MediaChannelResult>() {
           @Override

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/AudioTranscodingSamplePipeline.java
Patch:
@@ -150,7 +150,7 @@ public DecoderInputBuffer getOutputBuffer() throws TransformationException {
 
   @Override
   public void releaseOutputBuffer() throws TransformationException {
-    encoder.releaseOutputBuffer();
+    encoder.releaseOutputBuffer(/* render= */ false);
   }
 
   @Override
@@ -188,7 +188,7 @@ private boolean feedEncoderFromDecoder() throws TransformationException {
 
     feedEncoder(decoderOutputBuffer);
     if (!decoderOutputBuffer.hasRemaining()) {
-      decoder.releaseOutputBuffer();
+      decoder.releaseOutputBuffer(/* render= */ false);
     }
     return true;
   }
@@ -243,7 +243,7 @@ private boolean feedProcessorFromDecoder() throws TransformationException {
 
     speedChangingAudioProcessor.queueInput(decoderOutputBuffer);
     if (!decoderOutputBuffer.hasRemaining()) {
-      decoder.releaseOutputBuffer();
+      decoder.releaseOutputBuffer(/* render= */ false);
     }
     return true;
   }

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -2664,7 +2664,7 @@ private static PositionUpdateForPlaylistChange resolvePositionForPlaylistChange(
     boolean earliestCuePointIsUnchangedOrLater =
         periodIdWithAds.nextAdGroupIndex == C.INDEX_UNSET
             || (oldPeriodId.nextAdGroupIndex != C.INDEX_UNSET
-                && periodIdWithAds.adGroupIndex >= oldPeriodId.nextAdGroupIndex);
+                && periodIdWithAds.nextAdGroupIndex >= oldPeriodId.nextAdGroupIndex);
     // Drop update if we keep playing the same content (MediaPeriod.periodUid are identical) and
     // the only change is that MediaPeriodId.nextAdGroupIndex increased. This postpones a potential
     // discontinuity until we reach the former next ad group position.

File: libraries/transformer/src/main/java/androidx/media3/transformer/AudioTranscodingSamplePipeline.java
Patch:
@@ -150,7 +150,7 @@ public DecoderInputBuffer getOutputBuffer() throws TransformationException {
 
   @Override
   public void releaseOutputBuffer() throws TransformationException {
-    encoder.releaseOutputBuffer();
+    encoder.releaseOutputBuffer(/* render= */ false);
   }
 
   @Override
@@ -188,7 +188,7 @@ private boolean feedEncoderFromDecoder() throws TransformationException {
 
     feedEncoder(decoderOutputBuffer);
     if (!decoderOutputBuffer.hasRemaining()) {
-      decoder.releaseOutputBuffer();
+      decoder.releaseOutputBuffer(/* render= */ false);
     }
     return true;
   }
@@ -243,7 +243,7 @@ private boolean feedProcessorFromDecoder() throws TransformationException {
 
     speedChangingAudioProcessor.queueInput(decoderOutputBuffer);
     if (!decoderOutputBuffer.hasRemaining()) {
-      decoder.releaseOutputBuffer();
+      decoder.releaseOutputBuffer(/* render= */ false);
     }
     return true;
   }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayerImplInternal.java
Patch:
@@ -2672,7 +2672,7 @@ private static PositionUpdateForPlaylistChange resolvePositionForPlaylistChange(
     boolean earliestCuePointIsUnchangedOrLater =
         periodIdWithAds.nextAdGroupIndex == C.INDEX_UNSET
             || (oldPeriodId.nextAdGroupIndex != C.INDEX_UNSET
-                && periodIdWithAds.adGroupIndex >= oldPeriodId.nextAdGroupIndex);
+                && periodIdWithAds.nextAdGroupIndex >= oldPeriodId.nextAdGroupIndex);
     // Drop update if we keep playing the same content (MediaPeriod.periodUid are identical) and
     // the only change is that MediaPeriodId.nextAdGroupIndex increased. This postpones a potential
     // discontinuity until we reach the former next ad group position.

File: extensions/av1/src/main/java/com/google/android/exoplayer2/ext/av1/Gav1Decoder.java
Patch:
@@ -39,7 +39,7 @@ public final class Gav1Decoder
 
   private final long gav1DecoderContext;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a Gav1Decoder.

File: extensions/av1/src/main/java/com/google/android/exoplayer2/ext/av1/Libgav1VideoRenderer.java
Patch:
@@ -126,8 +126,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!MimeTypes.VIDEO_AV1.equalsIgnoreCase(format.sampleMimeType)
         || !Gav1Library.isAvailable()) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: extensions/ffmpeg/src/main/java/com/google/android/exoplayer2/ext/ffmpeg/FfmpegAudioDecoder.java
Patch:
@@ -41,7 +41,7 @@
 
   private final String codecName;
   @Nullable private final byte[] extraData;
-  @C.PcmEncoding private final int encoding;
+  private final @C.PcmEncoding int encoding;
   private final int outputBufferSize;
 
   private long nativeContext; // May be reassigned on resetting the codec.
@@ -158,8 +158,7 @@ public int getSampleRate() {
   }
 
   /** Returns the encoding of output audio. */
-  @C.PcmEncoding
-  public int getEncoding() {
+  public @C.PcmEncoding int getEncoding() {
     return encoding;
   }
 

File: extensions/ffmpeg/src/main/java/com/google/android/exoplayer2/ext/ffmpeg/FfmpegVideoRenderer.java
Patch:
@@ -71,8 +71,7 @@ public String getName() {
   }
 
   @Override
-  @RendererCapabilities.Capabilities
-  public final int supportsFormat(Format format) {
+  public final @RendererCapabilities.Capabilities int supportsFormat(Format format) {
     // TODO: Remove this line and uncomment the implementation below.
     return C.FORMAT_UNSUPPORTED_TYPE;
     /*

File: extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/LibflacAudioRenderer.java
Patch:
@@ -77,8 +77,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     if (!FlacLibrary.isAvailable()
         || !MimeTypes.AUDIO_FLAC.equalsIgnoreCase(format.sampleMimeType)) {
       return C.FORMAT_UNSUPPORTED_TYPE;

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdTagLoader.java
Patch:
@@ -162,7 +162,7 @@
   /** Whether IMA has sent an ad event to pause content since the last resume content event. */
   private boolean imaPausedContent;
   /** The current ad playback state. */
-  @ImaAdState private int imaAdState;
+  private @ImaAdState int imaAdState;
   /** The current ad media info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */
   @Nullable private AdMediaInfo imaAdMediaInfo;
   /** The current ad info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ServerSideAdInsertionStreamRequest.java
Patch:
@@ -51,7 +51,7 @@ public static final class Builder {
     @Nullable private String authToken;
     @Nullable private String streamActivityMonitorId;
     private ImmutableMap<String, String> adTagParameters;
-    @ContentType public int format = C.TYPE_HLS;
+    public @ContentType int format = C.TYPE_HLS;
     private int loadVideoTimeoutMs;
 
     /** Creates a new instance. */
@@ -270,7 +270,7 @@ public ServerSideAdInsertionStreamRequest build() {
   @Nullable public final String contentUrl;
   @Nullable public final String authToken;
   @Nullable public final String streamActivityMonitorId;
-  @ContentType public int format = C.TYPE_HLS;
+  public @ContentType int format = C.TYPE_HLS;
   public final int loadVideoTimeoutMs;
 
   private ServerSideAdInsertionStreamRequest(

File: extensions/mediasession/src/main/java/com/google/android/exoplayer2/ext/mediasession/RepeatModeActionProvider.java
Patch:
@@ -26,13 +26,12 @@
 public final class RepeatModeActionProvider implements MediaSessionConnector.CustomActionProvider {
 
   /** The default repeat toggle modes. */
-  @RepeatModeUtil.RepeatToggleModes
-  public static final int DEFAULT_REPEAT_TOGGLE_MODES =
+  public static final @RepeatModeUtil.RepeatToggleModes int DEFAULT_REPEAT_TOGGLE_MODES =
       RepeatModeUtil.REPEAT_TOGGLE_MODE_ONE | RepeatModeUtil.REPEAT_TOGGLE_MODE_ALL;
 
   private static final String ACTION_REPEAT_MODE = "ACTION_EXO_REPEAT_MODE";
 
-  @RepeatModeUtil.RepeatToggleModes private final int repeatToggleModes;
+  private final @RepeatModeUtil.RepeatToggleModes int repeatToggleModes;
   private final CharSequence repeatAllDescription;
   private final CharSequence repeatOneDescription;
   private final CharSequence repeatOffDescription;

File: extensions/opus/src/main/java/com/google/android/exoplayer2/ext/opus/LibopusAudioRenderer.java
Patch:
@@ -78,8 +78,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     boolean drmIsSupported = OpusLibrary.supportsCryptoType(format.cryptoType);
     if (!OpusLibrary.isAvailable()
         || !MimeTypes.AUDIO_OPUS.equalsIgnoreCase(format.sampleMimeType)) {

File: extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/LibvpxVideoRenderer.java
Patch:
@@ -124,8 +124,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!VpxLibrary.isAvailable() || !MimeTypes.VIDEO_VP9.equalsIgnoreCase(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);
     }

File: extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/VpxDecoder.java
Patch:
@@ -47,7 +47,7 @@ public final class VpxDecoder
 
   @Nullable private ByteBuffer lastSupplementalData;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a VP9 decoder.

File: library/common/src/main/java/com/google/android/exoplayer2/BasePlayer.java
Patch:
@@ -382,8 +382,7 @@ public final long getContentDuration() {
         : timeline.getWindow(getCurrentMediaItemIndex(), window).getDurationMs();
   }
 
-  @RepeatMode
-  private int getRepeatModeForNavigation() {
+  private @RepeatMode int getRepeatModeForNavigation() {
     @RepeatMode int repeatMode = getRepeatMode();
     return repeatMode == REPEAT_MODE_ONE ? REPEAT_MODE_OFF : repeatMode;
   }

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -1218,8 +1218,8 @@ public static String getFormatSupportString(@FormatSupport int formatSupport) {
       replacement = "Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode)",
       imports = {"com.google.android.exoplayer2.util.Util"})
   @Deprecated
-  @PlaybackException.ErrorCode
-  public static int getErrorCodeForMediaDrmErrorCode(int mediaDrmErrorCode) {
+  public static @PlaybackException.ErrorCode int getErrorCodeForMediaDrmErrorCode(
+      int mediaDrmErrorCode) {
     return Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode);
   }
 }

File: library/common/src/main/java/com/google/android/exoplayer2/HeartRating.java
Patch:
@@ -78,7 +78,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_HEART;
+  private static final @RatingType int TYPE = RATING_TYPE_HEART;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: library/common/src/main/java/com/google/android/exoplayer2/MediaMetadata.java
Patch:
@@ -56,11 +56,11 @@ public static final class Builder {
     @Nullable private Rating userRating;
     @Nullable private Rating overallRating;
     @Nullable private byte[] artworkData;
-    @Nullable @PictureType private Integer artworkDataType;
+    @Nullable private @PictureType Integer artworkDataType;
     @Nullable private Uri artworkUri;
     @Nullable private Integer trackNumber;
     @Nullable private Integer totalTrackCount;
-    @Nullable @FolderType private Integer folderType;
+    @Nullable private @FolderType Integer folderType;
     @Nullable private Boolean isPlayable;
     @Nullable private Integer recordingYear;
     @Nullable private Integer recordingMonth;

File: library/common/src/main/java/com/google/android/exoplayer2/PercentageRating.java
Patch:
@@ -76,7 +76,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_PERCENTAGE;
+  private static final @RatingType int TYPE = RATING_TYPE_PERCENTAGE;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -686,8 +686,7 @@ final class Commands implements Bundleable {
     /** A builder for {@link Commands} instances. */
     public static final class Builder {
 
-      @Command
-      private static final int[] SUPPORTED_COMMANDS = {
+      private static final @Command int[] SUPPORTED_COMMANDS = {
         COMMAND_PLAY_PAUSE,
         COMMAND_PREPARE,
         COMMAND_STOP,

File: library/common/src/main/java/com/google/android/exoplayer2/StarRating.java
Patch:
@@ -102,7 +102,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_STAR;
+  private static final @RatingType int TYPE = RATING_TYPE_STAR;
   private static final int MAX_STARS_DEFAULT = 5;
 
   @Documented

File: library/common/src/main/java/com/google/android/exoplayer2/ThumbRating.java
Patch:
@@ -75,7 +75,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_THUMB;
+  private static final @RatingType int TYPE = RATING_TYPE_THUMB;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: library/common/src/main/java/com/google/android/exoplayer2/drm/DrmInitData.java
Patch:
@@ -51,7 +51,8 @@ public final class DrmInitData implements Comparator<SchemeData>, Parcelable {
    * @param mediaData DRM session acquisition data obtained from the media.
    * @return A {@link DrmInitData} obtained from merging a media manifest and a media stream.
    */
-  public static @Nullable DrmInitData createSessionCreationData(
+  @Nullable
+  public static DrmInitData createSessionCreationData(
       @Nullable DrmInitData manifestData, @Nullable DrmInitData mediaData) {
     ArrayList<SchemeData> result = new ArrayList<>();
     String schemeType = null;

File: library/common/src/main/java/com/google/android/exoplayer2/source/TrackGroup.java
Patch:
@@ -204,8 +204,7 @@ private static String normalizeLanguage(@Nullable String language) {
     return language == null || language.equals(C.LANGUAGE_UNDETERMINED) ? "" : language;
   }
 
-  @C.RoleFlags
-  private static int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
+  private static @C.RoleFlags int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
     // Treat trick-play and non-trick-play formats as compatible.
     return roleFlags | C.ROLE_FLAG_TRICK_PLAY;
   }

File: library/common/src/main/java/com/google/android/exoplayer2/source/ads/AdPlaybackState.java
Patch:
@@ -68,7 +68,7 @@ public static final class AdGroup implements Bundleable {
     /** The URI of each ad in the ad group. */
     public final @NullableType Uri[] uris;
     /** The state of each ad in the ad group. */
-    @AdState public final int[] states;
+    public final @AdState int[] states;
     /** The durations of each ad in the ad group, in microseconds. */
     public final long[] durationsUs;
     /**

File: library/common/src/main/java/com/google/android/exoplayer2/text/span/RubySpan.java
Patch:
@@ -36,7 +36,7 @@ public final class RubySpan implements LanguageFeatureSpan {
   public final String rubyText;
 
   /** The position of the ruby text relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public RubySpan(String rubyText, @TextAnnotation.Position int position) {
     this.rubyText = rubyText;

File: library/common/src/main/java/com/google/android/exoplayer2/text/span/TextEmphasisSpan.java
Patch:
@@ -81,13 +81,13 @@ public final class TextEmphasisSpan implements LanguageFeatureSpan {
   public static final int MARK_FILL_OPEN = 2;
 
   /** The mark shape used for text emphasis. */
-  @MarkShape public int markShape;
+  public @MarkShape int markShape;
 
   /** The mark fill for the text emphasis mark. */
-  @MarkShape public int markFill;
+  public @MarkShape int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public TextEmphasisSpan(
       @MarkShape int shape, @MarkFill int fill, @TextAnnotation.Position int position) {

File: library/core/src/androidTest/java/com/google/android/exoplayer2/StreamVolumeManagerTest.java
Patch:
@@ -272,7 +272,7 @@ public void onStreamVolumeChanged_isCalled_whenAudioManagerChangesIt() throws Ex
 
   private static class TestListener implements StreamVolumeManager.Listener {
 
-    @C.StreamType private int lastStreamType;
+    private @C.StreamType int lastStreamType;
     private int lastStreamVolume;
     private boolean lastStreamVolumeMuted;
     public final CountDownLatch onStreamVolumeChangedLatch;

File: library/core/src/main/java/com/google/android/exoplayer2/DefaultRenderersFactory.java
Patch:
@@ -93,7 +93,7 @@ public class DefaultRenderersFactory implements RenderersFactory {
 
   private final Context context;
   private final DefaultMediaCodecAdapterFactory codecAdapterFactory;
-  @ExtensionRendererMode private int extensionRendererMode;
+  private @ExtensionRendererMode int extensionRendererMode;
   private long allowedVideoJoiningTimeMs;
   private boolean enableDecoderFallback;
   private MediaCodecSelector mediaCodecSelector;

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlaybackException.java
Patch:
@@ -80,7 +80,7 @@ public final class ExoPlaybackException extends PlaybackException {
   public static final int TYPE_REMOTE = 3;
 
   /** The {@link Type} of the playback failure. */
-  @Type public final int type;
+  public final @Type int type;
 
   /** If {@link #type} is {@link #TYPE_RENDERER}, this is the name of the renderer. */
   @Nullable public final String rendererName;
@@ -99,7 +99,7 @@ public final class ExoPlaybackException extends PlaybackException {
    * renderer for {@link #rendererFormat}. If {@link #rendererFormat} is null, this is {@link
    * C#FORMAT_HANDLED}.
    */
-  @FormatSupport public final int rendererFormatSupport;
+  public final @FormatSupport int rendererFormatSupport;
 
   /** The {@link MediaPeriodId} of the media associated with this error, or null if undetermined. */
   @Nullable public final MediaPeriodId mediaPeriodId;

File: library/core/src/main/java/com/google/android/exoplayer2/ExoTimeoutException.java
Patch:
@@ -59,7 +59,7 @@ public final class ExoTimeoutException extends RuntimeException {
   public static final int TIMEOUT_OPERATION_DETACH_SURFACE = 3;
 
   /** The operation on the ExoPlayer playback thread that timed out. */
-  @TimeoutOperation public final int timeoutOperation;
+  public final @TimeoutOperation int timeoutOperation;
 
   /**
    * Creates the timeout exception.

File: library/core/src/main/java/com/google/android/exoplayer2/PlaybackInfo.java
Patch:
@@ -51,7 +51,7 @@
   /** The start position after a reported position discontinuity, in microseconds. */
   public final long discontinuityStartPositionUs;
   /** The current playback state. One of the {@link Player}.STATE_ constants. */
-  @Player.State public final int playbackState;
+  public final @Player.State int playbackState;
   /** The current playback error, or null if this is not an error state. */
   @Nullable public final ExoPlaybackException playbackError;
   /** Whether the player is currently loading. */
@@ -67,7 +67,7 @@
   /** Whether playback should proceed when {@link #playbackState} == {@link Player#STATE_READY}. */
   public final boolean playWhenReady;
   /** Reason why playback is suppressed even though {@link #playWhenReady} is {@code true}. */
-  @PlaybackSuppressionReason public final int playbackSuppressionReason;
+  public final @PlaybackSuppressionReason int playbackSuppressionReason;
   /** The playback parameters. */
   public final PlaybackParameters playbackParameters;
   /** Whether offload scheduling is enabled for the main player loop. */

File: library/core/src/main/java/com/google/android/exoplayer2/StreamVolumeManager.java
Patch:
@@ -54,7 +54,7 @@ public interface Listener {
   private final AudioManager audioManager;
 
   @Nullable private VolumeChangeReceiver receiver;
-  @C.StreamType private int streamType;
+  private @C.StreamType int streamType;
   private int volume;
   private boolean muted;
 

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsListener.java
Patch:
@@ -148,8 +148,7 @@ public int size() {
      * @param index The index. Must be between 0 (inclusive) and {@link #size()} (exclusive).
      * @return The {@link EventFlags event} at the given index.
      */
-    @EventFlags
-    public int get(int index) {
+    public @EventFlags int get(int index) {
       return flags.get(index);
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/MediaMetricsListener.java
Patch:
@@ -118,7 +118,7 @@ public static MediaMetricsListener create(Context context) {
 
   @Nullable private String activeSessionId;
   @Nullable private PlaybackMetrics.Builder metricsBuilder;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int currentPlaybackState;
   private int currentNetworkType;
   @Nullable private PlaybackException pendingPlayerError;
@@ -885,7 +885,7 @@ public ErrorInfo(int errorCode, int subErrorCode) {
   private static final class PendingFormatUpdate {
 
     public final Format format;
-    @C.SelectionReason public final int selectionReason;
+    public final @C.SelectionReason int selectionReason;
     public final String sessionId;
 
     public PendingFormatUpdate(

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/PlaybackStatsListener.java
Patch:
@@ -82,7 +82,7 @@ public interface Callback {
 
   @Nullable private String discontinuityFromSession;
   private long discontinuityFromPositionMs;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int droppedFrames;
   @Nullable private Exception nonFatalException;
   private long bandwidthTimeMs;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioProcessor.java
Patch:
@@ -43,7 +43,7 @@ final class AudioFormat {
     /** The number of interleaved channels. */
     public final int channelCount;
     /** The type of linear PCM encoding. */
-    @C.PcmEncoding public final int encoding;
+    public final @C.PcmEncoding int encoding;
     /** The number of bytes used to represent one audio frame. */
     public final int bytesPerFrame;
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/ForwardingAudioSink.java
Patch:
@@ -46,8 +46,7 @@ public boolean supportsFormat(Format format) {
   }
 
   @Override
-  @SinkFormatSupport
-  public int getFormatSupport(Format format) {
+  public @SinkFormatSupport int getFormatSupport(Format format) {
     return sink.getFormatSupport(format);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
Patch:
@@ -282,8 +282,7 @@ public void experimentalSetEnableKeepAudioTrackOnSeek(boolean enableKeepAudioTra
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     if (!MimeTypes.isAudio(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: library/core/src/main/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessor.java
Patch:
@@ -86,7 +86,7 @@ public final class SilenceSkippingAudioProcessor extends BaseAudioProcessor {
    */
   private byte[] paddingBuffer;
 
-  @State private int state;
+  private @State int state;
   private int maybeSilenceBufferSize;
   private int paddingSize;
   private boolean hasOutputNoise;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/SpatializerDelegate.java
Patch:
@@ -129,8 +129,7 @@ public boolean isAvailable() {
   }
 
   /** Delegates to Spatializer.getImmersiveAudioLevel() */
-  @ImmersiveAudioLevel
-  public int getImmersiveAudioLevel() {
+  public @ImmersiveAudioLevel int getImmersiveAudioLevel() {
     try {
       return (int) Util.castNonNull(getImmersiveAudioLevel.invoke(spatializer));
     } catch (IllegalAccessException | InvocationTargetException e) {

File: library/core/src/main/java/com/google/android/exoplayer2/audio/TeeAudioProcessor.java
Patch:
@@ -125,7 +125,7 @@ public static final class WavFileAudioBufferSink implements AudioBufferSink {
 
     private int sampleRateHz;
     private int channelCount;
-    @C.PcmEncoding private int encoding;
+    private @C.PcmEncoding int encoding;
     @Nullable private RandomAccessFile randomAccessFile;
     private int counter;
     private int bytesWritten;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/TrimmingAudioProcessor.java
Patch:
@@ -25,7 +25,7 @@
 /** Audio processor for trimming samples from the start/end of data. */
 /* package */ final class TrimmingAudioProcessor extends BaseAudioProcessor {
 
-  @C.PcmEncoding private static final int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
 
   private int trimStartFrames;
   private int trimEndFrames;

File: library/core/src/main/java/com/google/android/exoplayer2/decoder/DecoderReuseEvaluation.java
Patch:
@@ -123,13 +123,13 @@ public final class DecoderReuseEvaluation {
   public final Format newFormat;
 
   /** The {@link DecoderReuseResult result} of the evaluation. */
-  @DecoderReuseResult public final int result;
+  public final @DecoderReuseResult int result;
 
   /**
    * {@link DecoderDiscardReasons Reasons} why the decoder cannot be reused. Always {@code 0} if
    * reuse is possible. May also be {code 0} if reuse is not possible for an unspecified reason.
    */
-  @DecoderDiscardReasons public final int discardReasons;
+  public final @DecoderDiscardReasons int discardReasons;
 
   /**
    * @param decoderName The name of the decoder.

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSession.java
Patch:
@@ -254,8 +254,7 @@ public void onProvisionError(Exception error, boolean thrownByExoMediaDrm) {
   // DrmSession implementation.
 
   @Override
-  @DrmSession.State
-  public final int getState() {
+  public final @DrmSession.State int getState() {
     return state;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
Patch:
@@ -309,7 +309,7 @@ private MissingSchemeDataException(UUID uuid) {
   @Nullable private byte[] offlineLicenseKeySetId;
   private @MonotonicNonNull PlayerId playerId;
 
-  /* package */ volatile @Nullable MediaDrmHandler mediaDrmHandler;
+  /* package */ @Nullable volatile MediaDrmHandler mediaDrmHandler;
 
   /**
    * @param uuid The UUID of the drm scheme.
@@ -587,8 +587,7 @@ private DrmSession acquireSession(
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType(Format format) {
+  public @C.CryptoType int getCryptoType(Format format) {
     @C.CryptoType int cryptoType = checkNotNull(exoMediaDrm).getCryptoType();
     if (format.drmInitData == null) {
       int trackType = MimeTypes.getTrackType(format.sampleMimeType);

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DrmSession.java
Patch:
@@ -63,7 +63,7 @@ static void replaceSession(
   class DrmSessionException extends IOException {
 
     /** The {@link PlaybackException.ErrorCode} that corresponds to the failure. */
-    @PlaybackException.ErrorCode public final int errorCode;
+    public final @PlaybackException.ErrorCode int errorCode;
 
     public DrmSessionException(Throwable cause, @PlaybackException.ErrorCode int errorCode) {
       super(cause);

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DrmSessionManager.java
Patch:
@@ -64,8 +64,7 @@ public DrmSession acquireSession(
         }
 
         @Override
-        @C.CryptoType
-        public int getCryptoType(Format format) {
+        public @C.CryptoType int getCryptoType(Format format) {
           return format.drmInitData != null ? C.CRYPTO_TYPE_UNSUPPORTED : C.CRYPTO_TYPE_NONE;
         }
       };

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DummyExoMediaDrm.java
Patch:
@@ -150,8 +150,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) {
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_UNSUPPORTED;
   }
 }

File: library/core/src/main/java/com/google/android/exoplayer2/drm/ExoMediaDrm.java
Patch:
@@ -265,7 +265,7 @@ final class KeyRequest {
 
     private final byte[] data;
     private final String licenseServerUrl;
-    @RequestType private final int requestType;
+    private final @RequestType int requestType;
 
     /**
      * Creates an instance with {@link #REQUEST_TYPE_UNKNOWN}.
@@ -305,8 +305,7 @@ public String getLicenseServerUrl() {
      * request does not specify a type. Note that when using a platform {@link MediaDrm} instance,
      * key requests only specify a type on API levels 23 and above.
      */
-    @RequestType
-    public int getRequestType() {
+    public @RequestType int getRequestType() {
       return requestType;
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/drm/FrameworkMediaDrm.java
Patch:
@@ -339,8 +339,7 @@ public FrameworkCryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCr
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_FRAMEWORK;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/drm/UnsupportedDrmException.java
Patch:
@@ -47,7 +47,7 @@ public final class UnsupportedDrmException extends Exception {
   public static final int REASON_INSTANTIATION_ERROR = 2;
 
   /** Either {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
-  @Reason public final int reason;
+  public final @Reason int reason;
 
   /** @param reason {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
   public UnsupportedDrmException(@Reason int reason) {

File: library/core/src/main/java/com/google/android/exoplayer2/drm/WidevineUtil.java
Patch:
@@ -37,7 +37,8 @@ private WidevineUtil() {}
    * @return A {@link Pair} consisting of the remaining license and playback durations in seconds,
    *     or null if called before the session has been opened or after it's been released.
    */
-  public static @Nullable Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
+  @Nullable
+  public static Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
     Map<String, String> keyStatus = drmSession.queryKeyStatus();
     if (keyStatus == null) {
       return null;

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -141,7 +141,7 @@ public AsynchronousMediaCodecAdapter createAdapter(Configuration configuration)
   private final boolean synchronizeCodecInteractionsWithQueueing;
   private final boolean enableImmediateCodecStartAfterFlush;
   private boolean codecReleased;
-  @State private int state;
+  private @State int state;
 
   private AsynchronousMediaCodecAdapter(
       MediaCodec codec,

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/DefaultMediaCodecAdapterFactory.java
Patch:
@@ -51,7 +51,7 @@ public final class DefaultMediaCodecAdapterFactory implements MediaCodecAdapter.
 
   private static final String TAG = "DMCodecAdapterFactory";
 
-  @Mode private int asynchronousMode;
+  private @Mode int asynchronousMode;
   private boolean enableSynchronizeCodecInteractionsWithQueueing;
   private boolean enableImmediateCodecStartAfterFlush;
 

File: library/core/src/main/java/com/google/android/exoplayer2/metadata/MetadataRenderer.java
Patch:
@@ -89,8 +89,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: library/core/src/main/java/com/google/android/exoplayer2/offline/Download.java
Patch:
@@ -97,7 +97,7 @@ public final class Download {
   /** The download request. */
   public final DownloadRequest request;
   /** The state of the download. */
-  @State public final int state;
+  public final @State int state;
   /** The first time when download entry is created. */
   public final long startTimeMs;
   /** The last update time. */
@@ -110,7 +110,7 @@ public final class Download {
    * If {@link #state} is {@link #STATE_FAILED} then this is the cause, otherwise {@link
    * #FAILURE_REASON_NONE}.
    */
-  @FailureReason public final int failureReason;
+  public final @FailureReason int failureReason;
 
   /* package */ final DownloadProgress progress;
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -1097,8 +1097,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    @C.SelectionReason
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
Patch:
@@ -349,8 +349,7 @@ public Requirements getRequirements() {
    *
    * @return The not met {@link Requirements.RequirementFlags}, or 0 if all requirements are met.
    */
-  @Requirements.RequirementFlags
-  public int getNotMetRequirements() {
+  public @Requirements.RequirementFlags int getNotMetRequirements() {
     return notMetRequirements;
   }
 
@@ -703,7 +702,7 @@ private static final class InternalHandler extends Handler {
     private final ArrayList<Download> downloads;
     private final HashMap<String, Task> activeTasks;
 
-    @Requirements.RequirementFlags private int notMetRequirements;
+    private @Requirements.RequirementFlags int notMetRequirements;
     private boolean downloadsPaused;
     private int maxParallelDownloads;
     private int minRetryCount;

File: library/core/src/main/java/com/google/android/exoplayer2/scheduler/RequirementsWatcher.java
Patch:
@@ -60,7 +60,7 @@ void onRequirementsStateChanged(
 
   @Nullable private DeviceStatusChangeReceiver receiver;
 
-  @Requirements.RequirementFlags private int notMetRequirements;
+  private @Requirements.RequirementFlags int notMetRequirements;
   @Nullable private NetworkCallback networkCallback;
 
   /**
@@ -81,8 +81,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
    *
    * @return Initial {@link Requirements.RequirementFlags RequirementFlags} that are not met, or 0.
    */
-  @Requirements.RequirementFlags
-  public int start() {
+  public @Requirements.RequirementFlags int start() {
     notMetRequirements = requirements.getNotMetRequirements(context);
 
     IntentFilter filter = new IntentFilter();

File: library/core/src/main/java/com/google/android/exoplayer2/source/ClippingMediaSource.java
Patch:
@@ -61,7 +61,7 @@ public static final class IllegalClippingException extends IOException {
     public static final int REASON_START_EXCEEDS_END = 2;
 
     /** The reason clipping failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason clipping failed. */
     public IllegalClippingException(@Reason int reason) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactory.java
Patch:
@@ -456,8 +456,7 @@ public DelegateFactoryLoader(
       mediaSourceFactories = new HashMap<>();
     }
 
-    @C.ContentType
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       ensureAllSuppliersAreLoaded();
       return Ints.toArray(supportedTypes);
     }

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaLoadData.java
Patch:
@@ -26,7 +26,7 @@
 public final class MediaLoadData {
 
   /** The {@link DataType data type}. */
-  @DataType public final int dataType;
+  public final @DataType int dataType;
   /**
    * One of the {@link TrackType track types}, which is a media track type if the data corresponds
    * to media of a specific type, or {@link C#TRACK_TYPE_UNKNOWN} otherwise.

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaSourceFactory.java
Patch:
@@ -44,8 +44,7 @@ public MediaSourceFactory setLoadErrorHandlingPolicy(
         }
 
         @Override
-        @C.ContentType
-        public int[] getSupportedTypes() {
+        public @C.ContentType int[] getSupportedTypes() {
           throw new UnsupportedOperationException();
         }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/MergingMediaSource.java
Patch:
@@ -59,7 +59,7 @@ public static final class IllegalMergeException extends IOException {
     public static final int REASON_PERIOD_COUNT_MISMATCH = 0;
 
     /** The reason the merge failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason the merge failed. */
     public IllegalMergeException(@Reason int reason) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaPeriod.java
Patch:
@@ -129,7 +129,7 @@ interface Listener {
   private @MonotonicNonNull SeekMap seekMap;
   private long durationUs;
   private boolean isLive;
-  @DataType private int dataType;
+  private @DataType int dataType;
 
   private boolean seenFirstTrackSelection;
   private boolean notifyDiscontinuity;

File: library/core/src/main/java/com/google/android/exoplayer2/source/SilenceMediaSource.java
Patch:
@@ -83,7 +83,7 @@ public SilenceMediaSource createMediaSource() {
   public static final String MEDIA_ID = "SilenceMediaSource";
 
   private static final int SAMPLE_RATE_HZ = 44100;
-  @C.PcmEncoding private static final int PCM_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int PCM_ENCODING = C.ENCODING_PCM_16BIT;
   private static final int CHANNEL_COUNT = 2;
   private static final Format FORMAT =
       new Format.Builder()

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/Chunk.java
Patch:
@@ -40,15 +40,15 @@ public abstract class Chunk implements Loadable {
   /** The {@link DataSpec} that defines the data to be loaded. */
   public final DataSpec dataSpec;
   /** The {@link DataType data type} of the chunk. For reporting only. */
-  @DataType public final int type;
+  public final @DataType int type;
   /** The format of the track to which this chunk belongs. */
   public final Format trackFormat;
   /**
    * One of the {@link C.SelectionReason selection reasons} if the chunk belongs to a track. {@link
    * C#SELECTION_REASON_UNKNOWN} if the chunk does not belong to a track, or if the selection reason
    * is unknown.
    */
-  @C.SelectionReason public final int trackSelectionReason;
+  public final @C.SelectionReason int trackSelectionReason;
   /**
    * Optional data associated with the selection of the track to which this chunk belongs. Null if
    * the chunk does not belong to a track, or if there is no associated track selection data.

File: library/core/src/main/java/com/google/android/exoplayer2/source/mediaparser/OutputConsumerAdapterV30.java
Patch:
@@ -538,8 +538,7 @@ private static DrmInitData toExoPlayerDrmInitData(
     return new DrmInitData(schemeType, schemeDatas);
   }
 
-  @SelectionFlags
-  private static int getSelectionFlags(MediaFormat mediaFormat) {
+  private static @SelectionFlags int getSelectionFlags(MediaFormat mediaFormat) {
     int selectionFlags = 0;
     selectionFlags |=
         getFlag(

File: library/core/src/main/java/com/google/android/exoplayer2/text/ExoplayerCuesDecoder.java
Patch:
@@ -54,7 +54,7 @@ public final class ExoplayerCuesDecoder implements SubtitleDecoder {
   private final SubtitleInputBuffer inputBuffer;
   private final Deque<SubtitleOutputBuffer> availableOutputBuffers;
 
-  @InputBufferState private int inputBufferState;
+  private @InputBufferState int inputBufferState;
   private boolean released;
 
   public ExoplayerCuesDecoder() {

File: library/core/src/main/java/com/google/android/exoplayer2/text/TextRenderer.java
Patch:
@@ -86,7 +86,7 @@ public final class TextRenderer extends BaseRenderer implements Callback {
   private boolean inputStreamEnded;
   private boolean outputStreamEnded;
   private boolean waitingForKeyFrame;
-  @ReplacementState private int decoderReplacementState;
+  private @ReplacementState int decoderReplacementState;
   @Nullable private Format streamFormat;
   @Nullable private SubtitleDecoder decoder;
   @Nullable private SubtitleInputBuffer nextInputBuffer;
@@ -133,8 +133,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeter.java
Patch:
@@ -276,14 +276,14 @@ public static synchronized DefaultBandwidthMeter getSingletonInstance(Context co
   private long sampleStartTimeMs;
   private long sampleBytesTransferred;
 
-  @C.NetworkType private int networkType;
+  private @C.NetworkType int networkType;
   private long totalElapsedTimeMs;
   private long totalBytesTransferred;
   private long bitrateEstimate;
   private long lastReportedBitrateEstimate;
 
   private boolean networkTypeOverrideSet;
-  @C.NetworkType private int networkTypeOverride;
+  private @C.NetworkType int networkTypeOverride;
 
   /** @deprecated Use {@link Builder} instead. */
   @Deprecated

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/LoadErrorHandlingPolicy.java
Patch:
@@ -128,7 +128,7 @@ public boolean isFallbackAvailable(@FallbackType int type) {
   /** A selected fallback option. */
   final class FallbackSelection {
     /** The type of fallback. */
-    @FallbackType public final int type;
+    public final @FallbackType int type;
     /** The duration for which the failing resource should be excluded, in milliseconds. */
     public final long exclusionDurationMs;
 

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/ParsingLoadable.java
Patch:
@@ -98,7 +98,7 @@ public static <T> T load(
   private final StatsDataSource dataSource;
   private final Parser<? extends T> parser;
 
-  private volatile @Nullable T result;
+  @Nullable private volatile T result;
 
   /**
    * @param dataSource A {@link DataSource} to use when loading the data.

File: library/core/src/main/java/com/google/android/exoplayer2/video/DecoderVideoRenderer.java
Patch:
@@ -118,7 +118,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
 
   private DecoderInputBuffer inputBuffer;
   private VideoDecoderOutputBuffer outputBuffer;
-  @VideoOutputMode private int outputMode;
+  private @VideoOutputMode int outputMode;
   @Nullable private Object output;
   @Nullable private Surface outputSurface;
   @Nullable private VideoDecoderOutputBufferRenderer outputBufferRenderer;
@@ -127,7 +127,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
   @Nullable private DrmSession decoderDrmSession;
   @Nullable private DrmSession sourceDrmSession;
 
-  @ReinitializationState private int decoderReinitializationState;
+  private @ReinitializationState int decoderReinitializationState;
   private boolean decoderReceivedBuffers;
 
   private boolean renderedFirstFrameAfterReset;

File: library/core/src/main/java/com/google/android/exoplayer2/video/DummySurface.java
Patch:
@@ -103,8 +103,7 @@ public void release() {
     }
   }
 
-  @SecureMode
-  private static int getSecureMode(Context context) {
+  private static @SecureMode int getSecureMode(Context context) {
     if (GlUtil.isProtectedContentExtensionSupported(context)) {
       if (GlUtil.isSurfacelessContextExtensionSupported()) {
         return SECURE_MODE_SURFACELESS_CONTEXT;

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -128,7 +128,7 @@ public class MediaCodecVideoRenderer extends MediaCodecRenderer {
   @Nullable private Surface surface;
   @Nullable private DummySurface dummySurface;
   private boolean haveReportedFirstFrameRenderedForCurrentSurface;
-  @C.VideoScalingMode private int scalingMode;
+  private @C.VideoScalingMode int scalingMode;
   private boolean renderedFirstFrameAfterReset;
   private boolean mayRenderFirstFrameAfterEnableIfNotStarted;
   private boolean renderedFirstFrameAfterEnable;
@@ -339,8 +339,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     String mimeType = format.sampleMimeType;
     if (!MimeTypes.isVideo(mimeType)) {

File: library/core/src/main/java/com/google/android/exoplayer2/video/VideoFrameReleaseHelper.java
Patch:
@@ -109,7 +109,7 @@ public final class VideoFrameReleaseHelper {
   private float surfacePlaybackFrameRate;
 
   private float playbackSpeed;
-  @C.VideoChangeFrameRateStrategy private int changeFrameRateStrategy;
+  private @C.VideoChangeFrameRateStrategy int changeFrameRateStrategy;
 
   private long vsyncDurationNs;
   private long vsyncOffsetNs;

File: library/core/src/main/java/com/google/android/exoplayer2/video/spherical/CameraMotionRenderer.java
Patch:
@@ -56,8 +56,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     return MimeTypes.APPLICATION_CAMERA_MOTION.equals(format.sampleMimeType)
         ? RendererCapabilities.create(C.FORMAT_HANDLED)
         : RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: library/core/src/main/java/com/google/android/exoplayer2/video/spherical/SceneRenderer.java
Patch:
@@ -50,8 +50,8 @@
   private @MonotonicNonNull SurfaceTexture surfaceTexture;
 
   // Used by other threads only
-  @C.StereoMode private volatile int defaultStereoMode;
-  @C.StereoMode private int lastStereoMode;
+  private volatile @C.StereoMode int defaultStereoMode;
+  private @C.StereoMode int lastStereoMode;
   @Nullable private byte[] lastProjectionData;
 
   // Methods called on any thread.

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -11478,7 +11478,7 @@ public void handleMessage(ExoPlayer player, int messageType, @Nullable Object me
   private static final class PlayerStateGrabber extends PlayerRunnable {
 
     public boolean playWhenReady;
-    @Player.State public int playbackState;
+    public @Player.State int playbackState;
     @Nullable public Timeline timeline;
 
     @Override

File: library/core/src/test/java/com/google/android/exoplayer2/audio/DecoderAudioRendererTest.java
Patch:
@@ -71,8 +71,7 @@ public String getName() {
           }
 
           @Override
-          @C.FormatSupport
-          protected int supportsFormatInternal(Format format) {
+          protected @C.FormatSupport int supportsFormatInternal(Format format) {
             return FORMAT_HANDLED;
           }
 

File: library/core/src/test/java/com/google/android/exoplayer2/video/DecoderVideoRendererTest.java
Patch:
@@ -84,16 +84,15 @@ public void setUp() {
             /* maxDroppedFramesToNotify= */ -1) {
 
           private final Phaser inputBuffersInCodecPhaser = new Phaser();
-          @C.VideoOutputMode private int outputMode;
+          private @C.VideoOutputMode int outputMode;
 
           @Override
           public String getName() {
             return "TestVideoRenderer";
           }
 
           @Override
-          @Capabilities
-          public int supportsFormat(Format format) {
+          public @Capabilities int supportsFormat(Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: library/core/src/test/java/com/google/android/exoplayer2/video/MediaCodecVideoRendererTest.java
Patch:
@@ -110,8 +110,8 @@ public void setUp() throws Exception {
             /* eventListener= */ eventListener,
             /* maxDroppedFramesToNotify= */ 1) {
           @Override
-          @Capabilities
-          protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format) {
+          protected @Capabilities int supportsFormat(
+              MediaCodecSelector mediaCodecSelector, Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaPeriod.java
Patch:
@@ -937,7 +937,7 @@ private static final class TrackGroupInfo {
 
     public final int[] adaptationSetIndices;
     public final @C.TrackType int trackType;
-    @TrackGroupCategory public final int trackGroupCategory;
+    public final @TrackGroupCategory int trackGroupCategory;
 
     public final int eventStreamGroupIndex;
     public final int primaryTrackGroupIndex;

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/DataSourceException.java
Patch:
@@ -55,7 +55,7 @@ public static boolean isCausedByPositionOutOfRange(IOException e) {
    * The reason of this {@link DataSourceException}, should be one of the {@code ERROR_CODE_IO_*} in
    * {@link PlaybackException.ErrorCode}.
    */
-  @PlaybackException.ErrorCode public final int reason;
+  public final @PlaybackException.ErrorCode int reason;
 
   /**
    * Constructs a DataSourceException.

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java
Patch:
@@ -231,7 +231,7 @@ public static HttpDataSourceException createForIOException(
     /** The {@link DataSpec} associated with the current connection. */
     public final DataSpec dataSpec;
 
-    @Type public final int type;
+    public final @Type int type;
 
     /**
      * @deprecated Use {@link #HttpDataSourceException(DataSpec, int, int)
@@ -347,8 +347,8 @@ public HttpDataSourceException(
       this.type = type;
     }
 
-    @PlaybackException.ErrorCode
-    private static int assignErrorCode(@PlaybackException.ErrorCode int errorCode, @Type int type) {
+    private static @PlaybackException.ErrorCode int assignErrorCode(
+        @PlaybackException.ErrorCode int errorCode, @Type int type) {
       return errorCode == PlaybackException.ERROR_CODE_IO_UNSPECIFIED && type == TYPE_OPEN
           ? PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED
           : errorCode;

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
Patch:
@@ -70,7 +70,7 @@ public static final class Factory implements DataSource.Factory {
     @Nullable private DataSource.Factory upstreamDataSourceFactory;
     @Nullable private PriorityTaskManager upstreamPriorityTaskManager;
     private int upstreamPriority;
-    @CacheDataSource.Flags private int flags;
+    private @CacheDataSource.Flags int flags;
     @Nullable private CacheDataSource.EventListener eventListener;
 
     public Factory() {

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/Buffer.java
Patch:
@@ -20,7 +20,7 @@
 /** Base class for buffers with flags. */
 public abstract class Buffer {
 
-  @C.BufferFlags private int flags;
+  private @C.BufferFlags int flags;
 
   /** Clears the buffer. */
   public void clear() {

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/CryptoInfo.java
Patch:
@@ -46,7 +46,7 @@ public final class CryptoInfo {
    *
    * @see android.media.MediaCodec.CryptoInfo#mode
    */
-  @C.CryptoMode public int mode;
+  public @C.CryptoMode int mode;
   /**
    * The number of leading unencrypted bytes in each sub-sample. If null, all bytes are treated as
    * encrypted and {@link #numBytesOfEncryptedData} must be specified.

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/DecoderInputBuffer.java
Patch:
@@ -109,7 +109,7 @@ public InsufficientCapacityException(int currentCapacity, int requiredCapacity)
    */
   @Nullable public ByteBuffer supplementalData;
 
-  @BufferReplacementMode private final int bufferReplacementMode;
+  private final @BufferReplacementMode int bufferReplacementMode;
   private final int paddingSize;
 
   /** Returns a new instance that's not able to hold any data. */

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/VideoDecoderOutputBuffer.java
Patch:
@@ -32,7 +32,7 @@ public class VideoDecoderOutputBuffer extends DecoderOutputBuffer {
   public int decoderPrivate;
 
   /** Output mode. */
-  @C.VideoOutputMode public int mode;
+  public @C.VideoOutputMode int mode;
   /** RGB buffer for RGB mode. */
   @Nullable public ByteBuffer data;
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/BinarySearchSeeker.java
Patch:
@@ -421,7 +421,7 @@ public static final class TimestampSearchResult {
         new TimestampSearchResult(TYPE_NO_TIMESTAMP, C.TIME_UNSET, C.POSITION_UNSET);
 
     /** The type of the result. */
-    @Type private final int type;
+    private final @Type int type;
 
     /**
      * When {@link #type} is {@link #TYPE_POSITION_OVERESTIMATED}, the {@link

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/TrackOutput.java
Patch:
@@ -38,7 +38,7 @@ public interface TrackOutput {
   final class CryptoData {
 
     /** The encryption mode used for the sample. */
-    @C.CryptoMode public final int cryptoMode;
+    public final @C.CryptoMode int cryptoMode;
 
     /** The encryption key associated with the sample. Its contents must not be modified. */
     public final byte[] encryptionKey;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/TrueHdSampleRechunker.java
Patch:
@@ -32,7 +32,7 @@ public final class TrueHdSampleRechunker {
   private boolean foundSyncframe;
   private int chunkSampleCount;
   private long chunkTimeUs;
-  @C.BufferFlags private int chunkFlags;
+  private @C.BufferFlags int chunkFlags;
   private int chunkSize;
   private int chunkOffset;
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/jpeg/JpegExtractor.java
Patch:
@@ -82,7 +82,7 @@ public final class JpegExtractor implements Extractor {
 
   private @MonotonicNonNull ExtractorOutput extractorOutput;
 
-  @State private int state;
+  private @State int state;
   private int marker;
   private int segmentLength;
   private long mp4StartPosition;
@@ -126,8 +126,8 @@ public void init(ExtractorOutput output) {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     switch (state) {
       case STATE_READING_MARKER:
         readMarker(input);

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp3/Mp3Extractor.java
Patch:
@@ -140,7 +140,7 @@ public final class Mp3Extractor implements Extractor {
   private static final int SEEK_HEADER_VBRI = 0x56425249;
   private static final int SEEK_HEADER_UNSET = 0;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final long forcedFirstSampleTimestampUs;
   private final ParsableByteArray scratch;
   private final MpegAudioUtil.Header synchronizedHeader;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -1910,7 +1910,7 @@ private static final class StsdData {
 
     @Nullable public Format format;
     public int nalUnitLengthFieldLength;
-    @Track.Transformation public int requiredSampleTransformation;
+    public @Track.Transformation int requiredSampleTransformation;
 
     public StsdData(int numberOfEntries) {
       trackEncryptionBoxes = new TrackEncryptionBox[numberOfEntries];

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -130,7 +130,7 @@ public class FragmentedMp4Extractor implements Extractor {
   private static final int STATE_READING_SAMPLE_CONTINUE = 4;
 
   // Workarounds.
-  @Flags private final int flags;
+  private final @Flags int flags;
   @Nullable private final Track sideloadedTrack;
 
   // Sideloaded data.
@@ -1687,8 +1687,7 @@ public int getCurrentSampleSize() {
     }
 
     /** Returns the {@link C.BufferFlags} corresponding to the current sample. */
-    @C.BufferFlags
-    public int getCurrentSampleFlags() {
+    public @C.BufferFlags int getCurrentSampleFlags() {
       int flags =
           !currentlyInFragment
               ? moovSampleTable.flags[currentSampleIndex]

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Track.java
Patch:
@@ -67,7 +67,7 @@ public final class Track {
    * One of {@code TRANSFORMATION_*}. Defines the transformation to apply before outputting each
    * sample.
    */
-  @Transformation public final int sampleTransformation;
+  public final @Transformation int sampleTransformation;
 
   /** Durations of edit list segments in the movie timescale. Null if there is no edit list. */
   @Nullable public final long[] editListDurations;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/TrackEncryptionBox.java
Patch:
@@ -77,8 +77,7 @@ public TrackEncryptionBox(
             schemeToCryptoMode(schemeType), keyId, defaultEncryptedBlocks, defaultClearBlocks);
   }
 
-  @C.CryptoMode
-  private static int schemeToCryptoMode(@Nullable String schemeType) {
+  private static @C.CryptoMode int schemeToCryptoMode(@Nullable String schemeType) {
     if (schemeType == null) {
       // If unknown, assume cenc.
       return C.CRYPTO_MODE_AES_CTR;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac3Reader.java
Patch:
@@ -60,7 +60,7 @@ public final class Ac3Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac4Reader.java
Patch:
@@ -58,7 +58,7 @@ public final class Ac4Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/DefaultTsPayloadReaderFactory.java
Patch:
@@ -102,7 +102,7 @@ public final class DefaultTsPayloadReaderFactory implements TsPayloadReader.Fact
 
   private static final int DESCRIPTOR_TAG_CAPTION_SERVICE = 0x86;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final List<Format> closedCaptionFormats;
 
   public DefaultTsPayloadReaderFactory() {

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/H263Reader.java
Patch:
@@ -333,7 +333,7 @@ private static final class CsdBuffer {
     private static final int STATE_WAIT_FOR_VOP_START = 4;
 
     private boolean isFilling;
-    @State private int state;
+    private @State int state;
 
     public int length;
     public int volStartPosition;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
Patch:
@@ -116,7 +116,7 @@ public final class TsExtractor implements Extractor {
   private static final int BUFFER_SIZE = TS_PACKET_SIZE * 50;
   private static final int SNIFF_TS_PACKET_COUNT = 5;
 
-  @Mode private final int mode;
+  private final @Mode int mode;
   private final int timestampSearchBytes;
   private final List<TimestampAdjuster> timestampAdjusters;
   private final ParsableByteArray tsPacketBuffer;
@@ -296,8 +296,8 @@ public void release() {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     long inputLength = input.getLength();
     if (tracksEnded) {
       boolean canReadDuration = inputLength != C.LENGTH_UNSET && mode != MODE_HLS;

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/SubtitleExtractor.java
Patch:
@@ -84,7 +84,7 @@ public class SubtitleExtractor implements Extractor {
   private @MonotonicNonNull ExtractorOutput extractorOutput;
   private @MonotonicNonNull TrackOutput trackOutput;
   private int bytesRead;
-  @State private int state;
+  private @State int state;
   private long seekTimeUs;
 
   /**

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/ttml/TextEmphasis.java
Patch:
@@ -97,13 +97,13 @@
           TtmlNode.ANNOTATION_POSITION_OUTSIDE);
 
   /** The text emphasis mark shape. */
-  @MarkShape public final int markShape;
+  public final @MarkShape int markShape;
 
   /** The fill style of the text emphasis mark. */
-  @TextEmphasisSpan.MarkFill public final int markFill;
+  public final @TextEmphasisSpan.MarkFill int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @Position public final int position;
+  public final @Position int position;
 
   private TextEmphasis(
       @MarkShape int markShape,

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/mkv/DefaultEbmlReaderTest.java
Patch:
@@ -178,8 +178,7 @@ private static final class TestProcessor implements EbmlProcessor {
     private final List<String> events = new ArrayList<>();
 
     @Override
-    @EbmlProcessor.ElementType
-    public int getElementType(int id) {
+    public @EbmlProcessor.ElementType int getElementType(int id) {
       switch (id) {
         case ID_EBML:
         case ID_SEGMENT:

File: library/extractor/src/test/java/com/google/android/exoplayer2/text/ttml/TtmlStyleTest.java
Patch:
@@ -42,7 +42,7 @@ public final class TtmlStyleTest {
   private static final String FONT_FAMILY = "serif";
   @ColorInt private static final int FONT_COLOR = Color.WHITE;
   private static final float FONT_SIZE = 12.5f;
-  @TtmlStyle.FontSizeUnit private static final int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
+  private static final @TtmlStyle.FontSizeUnit int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
   @ColorInt private static final int BACKGROUND_COLOR = Color.BLACK;
   private static final int RUBY_TYPE = TtmlStyle.RUBY_TYPE_TEXT;
   private static final int RUBY_POSITION = TextAnnotation.POSITION_AFTER;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -60,7 +60,7 @@ public final class DefaultHlsExtractorFactory implements HlsExtractorFactory {
         FileTypes.MP3,
       };
 
-  @DefaultTsPayloadReaderFactory.Flags private final int payloadReaderFactoryFlags;
+  private final @DefaultTsPayloadReaderFactory.Flags int payloadReaderFactoryFlags;
   private final boolean exposeCea608WhenMissingDeclarations;
 
   /**

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
Patch:
@@ -303,8 +303,7 @@ public long getAdjustedSeekPositionUs(long positionUs, SeekParameters seekParame
    *     has been {@link #CHUNK_PUBLICATION_STATE_REMOVED removed} or is definitely {@link
    *     #CHUNK_PUBLICATION_STATE_PUBLISHED published}.
    */
-  @ChunkPublicationState
-  public int getChunkPublicationState(HlsMediaChunk mediaChunk) {
+  public @ChunkPublicationState int getChunkPublicationState(HlsMediaChunk mediaChunk) {
     if (mediaChunk.partIndex == C.INDEX_UNSET) {
       // Chunks based on full segments can't be removed and are always published.
       return CHUNK_PUBLICATION_STATE_PUBLISHED;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylist.java
Patch:
@@ -396,7 +396,7 @@ public RenditionReport(Uri playlistUri, long lastMediaSequence, int lastPartInde
   public static final int PLAYLIST_TYPE_EVENT = 2;
 
   /** The type of the playlist. See {@link PlaylistType}. */
-  @PlaylistType public final int playlistType;
+  public final @PlaylistType int playlistType;
   /**
    * The start offset in microseconds from the beginning of the playlist, as defined by
    * #EXT-X-START, or {@link C#TIME_UNSET} if undefined. The value is guaranteed to be between 0 and

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspAuthenticationInfo.java
Patch:
@@ -54,7 +54,7 @@
   private static final String ALGORITHM = "MD5";
 
   /** The authentication mechanism. */
-  @AuthenticationMechanism public final int authenticationMechanism;
+  public final @AuthenticationMechanism int authenticationMechanism;
   /** The authentication realm. */
   public final String realm;
   /** The nonce used in digest authentication; empty if using {@link #BASIC} authentication. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspClient.java
Patch:
@@ -141,7 +141,7 @@ public interface PlaybackEventListener {
   @Nullable private String sessionId;
   @Nullable private KeepAliveMonitor keepAliveMonitor;
   @Nullable private RtspAuthenticationInfo rtspAuthenticationInfo;
-  @RtspState private int rtspState;
+  private @RtspState int rtspState;
   private boolean hasUpdatedTimelineAndTracks;
   private boolean receivedAuthorizationRequest;
   private boolean hasPendingPauseRequest;
@@ -204,8 +204,7 @@ public void start() throws IOException {
   }
 
   /** Returns the current {@link RtspState RTSP state}. */
-  @RtspState
-  public int getState() {
+  public @RtspState int getState() {
     return rtspState;
   }
 

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMediaPeriod.java
Patch:
@@ -773,8 +773,7 @@ public boolean isSampleQueueReady() {
       return sampleQueue.isReady(/* loadingFinished= */ canceled);
     }
 
-    @ReadDataResult
-    public int read(
+    public @ReadDataResult int read(
         FormatHolder formatHolder, DecoderInputBuffer buffer, @ReadFlags int readFlags) {
       return sampleQueue.read(formatHolder, buffer, readFlags, /* loadingFinished= */ canceled);
     }

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageChannel.java
Patch:
@@ -351,7 +351,7 @@ private static final class MessageParser {
 
     private final List<String> messageLines;
 
-    @ReadingState private int state;
+    private @ReadingState int state;
     private long messageBodyLength;
 
     /** Creates a new instance. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageUtil.java
Patch:
@@ -254,8 +254,7 @@ public static String toMethodString(@RtspRequest.Method int method) {
     }
   }
 
-  @RtspRequest.Method
-  private static int parseMethodString(String method) {
+  private static @RtspRequest.Method int parseMethodString(String method) {
     switch (method) {
       case "ANNOUNCE":
         return METHOD_ANNOUNCE;

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspRequest.java
Patch:
@@ -86,7 +86,7 @@
   /** The {@link Uri} to which this request is sent. */
   public final Uri uri;
   /** The request method, as defined in {@link Method}. */
-  @Method public final int method;
+  public final @Method int method;
   /** The headers of this request. */
   public final RtspHeaders headers;
   /** The body of this RTSP message, or empty string if absent. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpH264Reader.java
Patch:
@@ -58,7 +58,7 @@
   private final RtpPayloadFormat payloadFormat;
 
   private @MonotonicNonNull TrackOutput trackOutput;
-  @C.BufferFlags private int bufferFlags;
+  private @C.BufferFlags int bufferFlags;
 
   private long firstReceivedTimestamp;
   private int previousSequenceNumber;
@@ -296,8 +296,7 @@ private static long toSampleUs(
             /* divisor= */ MEDIA_CLOCK_FREQUENCY);
   }
 
-  @C.BufferFlags
-  private static int getBufferFlagsFromNalType(int nalType) {
+  private static @C.BufferFlags int getBufferFlagsFromNalType(int nalType) {
     return nalType == NAL_UNIT_TYPE_IDR ? C.BUFFER_FLAG_KEY_FRAME : 0;
   }
 }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -550,7 +550,7 @@ public interface DebugViewProvider {
 
   @Nullable private MuxerWrapper muxerWrapper;
   @Nullable private ExoPlayer player;
-  @ProgressState private int progressState;
+  private @ProgressState int progressState;
 
   private Transformer(
       Context context,
@@ -752,8 +752,7 @@ public Looper getApplicationLooper() {
    * @return The {@link ProgressState}.
    * @throws IllegalStateException If this method is called from the wrong thread.
    */
-  @ProgressState
-  public int getProgress(ProgressHolder progressHolder) {
+  public @ProgressState int getProgress(ProgressHolder progressHolder) {
     verifyApplicationThread();
     if (progressState == PROGRESS_STATE_AVAILABLE) {
       Player player = checkNotNull(this.player);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerBaseRenderer.java
Patch:
@@ -67,8 +67,7 @@ public TransformerBaseRenderer(
    * @return The {@link Capabilities} for this format.
    */
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     return RendererCapabilities.create(
         MimeTypes.getTrackType(format.sampleMimeType) == getTrackType()
             ? C.FORMAT_HANDLED

File: robolectricutils/src/main/java/com/google/android/exoplayer2/robolectric/TestDownloadManagerListener.java
Patch:
@@ -42,7 +42,7 @@ public final class TestDownloadManagerListener implements DownloadManager.Listen
   private final ConditionVariable initializedCondition;
   private final ConditionVariable idleCondition;
 
-  @Download.FailureReason private int failureReason;
+  private @Download.FailureReason int failureReason;
 
   public TestDownloadManagerListener(DownloadManager downloadManager) {
     this.downloadManager = downloadManager;

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java
Patch:
@@ -493,7 +493,7 @@ protected void doActionImpl(
   /** Calls {@link Player#setRepeatMode(int)}. */
   public static final class SetRepeatMode extends Action {
 
-    @Player.RepeatMode private final int repeatMode;
+    private final @Player.RepeatMode int repeatMode;
 
     /**
      * @param tag A tag to use for logging.
@@ -740,7 +740,7 @@ public static final class WaitForTimelineChanged extends Action {
 
     @Nullable private final Timeline expectedTimeline;
     private final boolean ignoreExpectedReason;
-    @Player.TimelineChangeReason private final int expectedReason;
+    private final @Player.TimelineChangeReason int expectedReason;
 
     /**
      * Creates action waiting for a timeline change for a given reason.
@@ -907,7 +907,7 @@ protected void doActionImpl(
    */
   public static final class WaitForPlaybackState extends Action {
 
-    @Player.State private final int targetPlaybackState;
+    private final @Player.State int targetPlaybackState;
 
     /**
      * @param tag A tag to use for logging.

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/CapturingAudioSink.java
Patch:
@@ -91,7 +91,7 @@ public void dump(Dumper dumper) {
 
   private static final class DumpableConfiguration implements Dumper.Dumpable {
 
-    @C.PcmEncoding private final int inputPcmEncoding;
+    private final @C.PcmEncoding int inputPcmEncoding;
     private final int inputChannelCount;
     private final int inputSampleRate;
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DownloadBuilder.java
Patch:
@@ -45,7 +45,7 @@ public final class DownloadBuilder {
   @Nullable private String cacheKey;
   private byte[] customMetadata;
 
-  @Download.State private int state;
+  private @Download.State int state;
   private long startTimeMs;
   private long updateTimeMs;
   private long contentLength;

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DumpFileAsserts.java
Patch:
@@ -70,7 +70,7 @@ public class DumpFileAsserts {
   /** Write output to folder {@code /storage/emulated/0/Android/data} of device. */
   private static final int WRITE_TO_DEVICE = 1 << 1;
 
-  @DumpFilesAction private static final int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
+  private static final @DumpFilesAction int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
 
   private DumpFileAsserts() {}
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExoMediaDrm.java
Patch:
@@ -396,8 +396,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCryptoExcep
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return FakeCryptoConfig.TYPE;
   }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeRenderer.java
Patch:
@@ -160,8 +160,7 @@ public boolean isEnded() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) throws ExoPlaybackException {
+  public @Capabilities int supportsFormat(Format format) throws ExoPlaybackException {
     int trackType = MimeTypes.getTrackType(format.sampleMimeType);
     return trackType != C.TRACK_TYPE_UNKNOWN && trackType == getTrackType()
         ? RendererCapabilities.create(C.FORMAT_HANDLED, ADAPTIVE_SEAMLESS, TUNNELING_NOT_SUPPORTED)

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeSampleStream.java
Patch:
@@ -293,7 +293,7 @@ private void maybeNotifyDownstreamFormat(long timeUs) {
 
   private static class SampleInfo {
     public final byte[] data;
-    @C.BufferFlags public final int flags;
+    public final @C.BufferFlags int flags;
     public final long timeUs;
 
     public SampleInfo(byte[] data, @C.BufferFlags int flags, long timeUs) {

File: libraries/common/src/main/java/androidx/media3/common/AdPlaybackState.java
Patch:
@@ -67,7 +67,7 @@ public static final class AdGroup implements Bundleable {
     /** The URI of each ad in the ad group. */
     public final @NullableType Uri[] uris;
     /** The state of each ad in the ad group. */
-    @AdState public final int[] states;
+    public final @AdState int[] states;
     /** The durations of each ad in the ad group, in microseconds. */
     public final long[] durationsUs;
     /**

File: libraries/common/src/main/java/androidx/media3/common/BasePlayer.java
Patch:
@@ -384,8 +384,7 @@ public final long getContentDuration() {
         : timeline.getWindow(getCurrentMediaItemIndex(), window).getDurationMs();
   }
 
-  @RepeatMode
-  private int getRepeatModeForNavigation() {
+  private @RepeatMode int getRepeatModeForNavigation() {
     @RepeatMode int repeatMode = getRepeatMode();
     return repeatMode == REPEAT_MODE_ONE ? REPEAT_MODE_OFF : repeatMode;
   }

File: libraries/common/src/main/java/androidx/media3/common/C.java
Patch:
@@ -1250,8 +1250,8 @@ public static String getFormatSupportString(@FormatSupport int formatSupport) {
       replacement = "Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode)",
       imports = {"androidx.media3.common.util.Util"})
   @Deprecated
-  @PlaybackException.ErrorCode
-  public static int getErrorCodeForMediaDrmErrorCode(int mediaDrmErrorCode) {
+  public static @PlaybackException.ErrorCode int getErrorCodeForMediaDrmErrorCode(
+      int mediaDrmErrorCode) {
     return Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode);
   }
 }

File: libraries/common/src/main/java/androidx/media3/common/DrmInitData.java
Patch:
@@ -52,7 +52,8 @@ public final class DrmInitData implements Comparator<SchemeData>, Parcelable {
    * @param mediaData DRM session acquisition data obtained from the media.
    * @return A {@link DrmInitData} obtained from merging a media manifest and a media stream.
    */
-  public static @Nullable DrmInitData createSessionCreationData(
+  @Nullable
+  public static DrmInitData createSessionCreationData(
       @Nullable DrmInitData manifestData, @Nullable DrmInitData mediaData) {
     ArrayList<SchemeData> result = new ArrayList<>();
     String schemeType = null;

File: libraries/common/src/main/java/androidx/media3/common/HeartRating.java
Patch:
@@ -79,7 +79,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_HEART;
+  private static final @RatingType int TYPE = RATING_TYPE_HEART;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: libraries/common/src/main/java/androidx/media3/common/MediaMetadata.java
Patch:
@@ -56,11 +56,11 @@ public static final class Builder {
     @Nullable private Rating userRating;
     @Nullable private Rating overallRating;
     @Nullable private byte[] artworkData;
-    @Nullable @PictureType private Integer artworkDataType;
+    @Nullable private @PictureType Integer artworkDataType;
     @Nullable private Uri artworkUri;
     @Nullable private Integer trackNumber;
     @Nullable private Integer totalTrackCount;
-    @Nullable @FolderType private Integer folderType;
+    @Nullable private @FolderType Integer folderType;
     @Nullable private Boolean isPlayable;
     @Nullable private Integer recordingYear;
     @Nullable private Integer recordingMonth;

File: libraries/common/src/main/java/androidx/media3/common/PercentageRating.java
Patch:
@@ -77,7 +77,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_PERCENTAGE;
+  private static final @RatingType int TYPE = RATING_TYPE_PERCENTAGE;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: libraries/common/src/main/java/androidx/media3/common/Player.java
Patch:
@@ -686,8 +686,7 @@ final class Commands implements Bundleable {
     @UnstableApi
     public static final class Builder {
 
-      @Command
-      private static final int[] SUPPORTED_COMMANDS = {
+      private static final @Command int[] SUPPORTED_COMMANDS = {
         COMMAND_PLAY_PAUSE,
         COMMAND_PREPARE,
         COMMAND_STOP,

File: libraries/common/src/main/java/androidx/media3/common/StarRating.java
Patch:
@@ -103,7 +103,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_STAR;
+  private static final @RatingType int TYPE = RATING_TYPE_STAR;
   private static final int MAX_STARS_DEFAULT = 5;
 
   @Documented

File: libraries/common/src/main/java/androidx/media3/common/ThumbRating.java
Patch:
@@ -76,7 +76,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_THUMB;
+  private static final @RatingType int TYPE = RATING_TYPE_THUMB;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: libraries/common/src/main/java/androidx/media3/common/TrackGroup.java
Patch:
@@ -207,8 +207,7 @@ private static String normalizeLanguage(@Nullable String language) {
     return language == null || language.equals(C.LANGUAGE_UNDETERMINED) ? "" : language;
   }
 
-  @C.RoleFlags
-  private static int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
+  private static @C.RoleFlags int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
     // Treat trick-play and non-trick-play formats as compatible.
     return roleFlags | C.ROLE_FLAG_TRICK_PLAY;
   }

File: libraries/common/src/main/java/androidx/media3/common/text/RubySpan.java
Patch:
@@ -39,7 +39,7 @@ public final class RubySpan implements LanguageFeatureSpan {
   public final String rubyText;
 
   /** The position of the ruby text relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public RubySpan(String rubyText, @TextAnnotation.Position int position) {
     this.rubyText = rubyText;

File: libraries/common/src/main/java/androidx/media3/common/text/TextEmphasisSpan.java
Patch:
@@ -83,13 +83,13 @@ public final class TextEmphasisSpan implements LanguageFeatureSpan {
   public static final int MARK_FILL_OPEN = 2;
 
   /** The mark shape used for text emphasis. */
-  @MarkShape public int markShape;
+  public @MarkShape int markShape;
 
   /** The mark fill for the text emphasis mark. */
-  @MarkShape public int markFill;
+  public @MarkShape int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public TextEmphasisSpan(
       @MarkShape int shape, @MarkFill int fill, @TextAnnotation.Position int position) {

File: libraries/datasource/src/main/java/androidx/media3/datasource/DataSourceException.java
Patch:
@@ -57,7 +57,7 @@ public static boolean isCausedByPositionOutOfRange(IOException e) {
    * The reason of this {@link DataSourceException}, should be one of the {@code ERROR_CODE_IO_*} in
    * {@link PlaybackException.ErrorCode}.
    */
-  @PlaybackException.ErrorCode public final int reason;
+  public final @PlaybackException.ErrorCode int reason;
 
   /**
    * Constructs a DataSourceException.

File: libraries/datasource/src/main/java/androidx/media3/datasource/HttpDataSource.java
Patch:
@@ -233,7 +233,7 @@ public static HttpDataSourceException createForIOException(
     /** The {@link DataSpec} associated with the current connection. */
     public final DataSpec dataSpec;
 
-    @Type public final int type;
+    public final @Type int type;
 
     /**
      * @deprecated Use {@link #HttpDataSourceException(DataSpec, int, int)
@@ -349,8 +349,8 @@ public HttpDataSourceException(
       this.type = type;
     }
 
-    @PlaybackException.ErrorCode
-    private static int assignErrorCode(@PlaybackException.ErrorCode int errorCode, @Type int type) {
+    private static @PlaybackException.ErrorCode int assignErrorCode(
+        @PlaybackException.ErrorCode int errorCode, @Type int type) {
       return errorCode == PlaybackException.ERROR_CODE_IO_UNSPECIFIED && type == TYPE_OPEN
           ? PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED
           : errorCode;

File: libraries/datasource/src/main/java/androidx/media3/datasource/cache/CacheDataSource.java
Patch:
@@ -72,7 +72,7 @@ public static final class Factory implements DataSource.Factory {
     @Nullable private DataSource.Factory upstreamDataSourceFactory;
     @Nullable private PriorityTaskManager upstreamPriorityTaskManager;
     private int upstreamPriority;
-    @CacheDataSource.Flags private int flags;
+    private @CacheDataSource.Flags int flags;
     @Nullable private CacheDataSource.EventListener eventListener;
 
     public Factory() {

File: libraries/decoder/src/main/java/androidx/media3/decoder/Buffer.java
Patch:
@@ -22,7 +22,7 @@
 @UnstableApi
 public abstract class Buffer {
 
-  @C.BufferFlags private int flags;
+  private @C.BufferFlags int flags;
 
   /** Clears the buffer. */
   public void clear() {

File: libraries/decoder/src/main/java/androidx/media3/decoder/CryptoInfo.java
Patch:
@@ -48,7 +48,7 @@ public final class CryptoInfo {
    *
    * @see android.media.MediaCodec.CryptoInfo#mode
    */
-  @C.CryptoMode public int mode;
+  public @C.CryptoMode int mode;
   /**
    * The number of leading unencrypted bytes in each sub-sample. If null, all bytes are treated as
    * encrypted and {@link #numBytesOfEncryptedData} must be specified.

File: libraries/decoder/src/main/java/androidx/media3/decoder/DecoderInputBuffer.java
Patch:
@@ -111,7 +111,7 @@ public InsufficientCapacityException(int currentCapacity, int requiredCapacity)
    */
   @Nullable public ByteBuffer supplementalData;
 
-  @BufferReplacementMode private final int bufferReplacementMode;
+  private final @BufferReplacementMode int bufferReplacementMode;
   private final int paddingSize;
 
   /** Returns a new instance that's not able to hold any data. */

File: libraries/decoder/src/main/java/androidx/media3/decoder/VideoDecoderOutputBuffer.java
Patch:
@@ -34,7 +34,7 @@ public class VideoDecoderOutputBuffer extends DecoderOutputBuffer {
   public int decoderPrivate;
 
   /** Output mode. */
-  @C.VideoOutputMode public int mode;
+  public @C.VideoOutputMode int mode;
   /** RGB buffer for RGB mode. */
   @Nullable public ByteBuffer data;
 

File: libraries/decoder_av1/src/main/java/androidx/media3/decoder/av1/Gav1Decoder.java
Patch:
@@ -41,7 +41,7 @@ public final class Gav1Decoder
 
   private final long gav1DecoderContext;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a Gav1Decoder.

File: libraries/decoder_av1/src/main/java/androidx/media3/decoder/av1/Libgav1VideoRenderer.java
Patch:
@@ -128,8 +128,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!MimeTypes.VIDEO_AV1.equalsIgnoreCase(format.sampleMimeType)
         || !Gav1Library.isAvailable()) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: libraries/decoder_ffmpeg/src/main/java/androidx/media3/decoder/ffmpeg/FfmpegAudioDecoder.java
Patch:
@@ -41,7 +41,7 @@
 
   private final String codecName;
   @Nullable private final byte[] extraData;
-  @C.PcmEncoding private final int encoding;
+  private final @C.PcmEncoding int encoding;
   private final int outputBufferSize;
 
   private long nativeContext; // May be reassigned on resetting the codec.
@@ -158,8 +158,7 @@ public int getSampleRate() {
   }
 
   /** Returns the encoding of output audio. */
-  @C.PcmEncoding
-  public int getEncoding() {
+  public @C.PcmEncoding int getEncoding() {
     return encoding;
   }
 

File: libraries/decoder_ffmpeg/src/main/java/androidx/media3/decoder/ffmpeg/FfmpegVideoRenderer.java
Patch:
@@ -73,8 +73,7 @@ public String getName() {
   }
 
   @Override
-  @RendererCapabilities.Capabilities
-  public final int supportsFormat(Format format) {
+  public final @RendererCapabilities.Capabilities int supportsFormat(Format format) {
     // TODO: Remove this line and uncomment the implementation below.
     return C.FORMAT_UNSUPPORTED_TYPE;
     /*

File: libraries/decoder_flac/src/main/java/androidx/media3/decoder/flac/LibflacAudioRenderer.java
Patch:
@@ -79,8 +79,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     if (!FlacLibrary.isAvailable()
         || !MimeTypes.AUDIO_FLAC.equalsIgnoreCase(format.sampleMimeType)) {
       return C.FORMAT_UNSUPPORTED_TYPE;

File: libraries/decoder_opus/src/main/java/androidx/media3/decoder/opus/LibopusAudioRenderer.java
Patch:
@@ -80,8 +80,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     boolean drmIsSupported = OpusLibrary.supportsCryptoType(format.cryptoType);
     if (!OpusLibrary.isAvailable()
         || !MimeTypes.AUDIO_OPUS.equalsIgnoreCase(format.sampleMimeType)) {

File: libraries/decoder_vp9/src/main/java/androidx/media3/decoder/vp9/LibvpxVideoRenderer.java
Patch:
@@ -126,8 +126,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!VpxLibrary.isAvailable() || !MimeTypes.VIDEO_VP9.equalsIgnoreCase(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);
     }

File: libraries/decoder_vp9/src/main/java/androidx/media3/decoder/vp9/VpxDecoder.java
Patch:
@@ -49,7 +49,7 @@ public final class VpxDecoder
 
   @Nullable private ByteBuffer lastSupplementalData;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a VP9 decoder.

File: libraries/exoplayer/src/androidTest/java/androidx/media3/exoplayer/StreamVolumeManagerTest.java
Patch:
@@ -273,7 +273,7 @@ public void onStreamVolumeChanged_isCalled_whenAudioManagerChangesIt() throws Ex
 
   private static class TestListener implements StreamVolumeManager.Listener {
 
-    @C.StreamType private int lastStreamType;
+    private @C.StreamType int lastStreamType;
     private int lastStreamVolume;
     private boolean lastStreamVolumeMuted;
     public final CountDownLatch onStreamVolumeChangedLatch;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/DecoderReuseEvaluation.java
Patch:
@@ -125,13 +125,13 @@ public final class DecoderReuseEvaluation {
   public final Format newFormat;
 
   /** The {@link DecoderReuseResult result} of the evaluation. */
-  @DecoderReuseResult public final int result;
+  public final @DecoderReuseResult int result;
 
   /**
    * {@link DecoderDiscardReasons Reasons} why the decoder cannot be reused. Always {@code 0} if
    * reuse is possible. May also be {code 0} if reuse is not possible for an unspecified reason.
    */
-  @DecoderDiscardReasons public final int discardReasons;
+  public final @DecoderDiscardReasons int discardReasons;
 
   /**
    * @param decoderName The name of the decoder.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/DefaultRenderersFactory.java
Patch:
@@ -95,7 +95,7 @@ public class DefaultRenderersFactory implements RenderersFactory {
 
   private final Context context;
   private final DefaultMediaCodecAdapterFactory codecAdapterFactory;
-  @ExtensionRendererMode private int extensionRendererMode;
+  private @ExtensionRendererMode int extensionRendererMode;
   private long allowedVideoJoiningTimeMs;
   private boolean enableDecoderFallback;
   private MediaCodecSelector mediaCodecSelector;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlaybackException.java
Patch:
@@ -85,7 +85,7 @@ public final class ExoPlaybackException extends PlaybackException {
   @UnstableApi public static final int TYPE_REMOTE = 3;
 
   /** The {@link Type} of the playback failure. */
-  @UnstableApi @Type public final int type;
+  @UnstableApi public final @Type int type;
 
   /** If {@link #type} is {@link #TYPE_RENDERER}, this is the name of the renderer. */
   @UnstableApi @Nullable public final String rendererName;
@@ -104,7 +104,7 @@ public final class ExoPlaybackException extends PlaybackException {
    * renderer for {@link #rendererFormat}. If {@link #rendererFormat} is null, this is {@link
    * C#FORMAT_HANDLED}.
    */
-  @UnstableApi @FormatSupport public final int rendererFormatSupport;
+  @UnstableApi public final @FormatSupport int rendererFormatSupport;
 
   /** The {@link MediaPeriodId} of the media associated with this error, or null if undetermined. */
   @UnstableApi @Nullable public final MediaPeriodId mediaPeriodId;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoTimeoutException.java
Patch:
@@ -62,7 +62,7 @@ public final class ExoTimeoutException extends RuntimeException {
   public static final int TIMEOUT_OPERATION_DETACH_SURFACE = 3;
 
   /** The operation on the ExoPlayer playback thread that timed out. */
-  @TimeoutOperation public final int timeoutOperation;
+  public final @TimeoutOperation int timeoutOperation;
 
   /**
    * Creates the timeout exception.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/PlaybackInfo.java
Patch:
@@ -55,7 +55,7 @@
   /** The start position after a reported position discontinuity, in microseconds. */
   public final long discontinuityStartPositionUs;
   /** The current playback state. One of the {@link Player}.STATE_ constants. */
-  @Player.State public final int playbackState;
+  public final @Player.State int playbackState;
   /** The current playback error, or null if this is not an error state. */
   @Nullable public final ExoPlaybackException playbackError;
   /** Whether the player is currently loading. */
@@ -71,7 +71,7 @@
   /** Whether playback should proceed when {@link #playbackState} == {@link Player#STATE_READY}. */
   public final boolean playWhenReady;
   /** Reason why playback is suppressed even though {@link #playWhenReady} is {@code true}. */
-  @PlaybackSuppressionReason public final int playbackSuppressionReason;
+  public final @PlaybackSuppressionReason int playbackSuppressionReason;
   /** The playback parameters. */
   public final PlaybackParameters playbackParameters;
   /** Whether offload scheduling is enabled for the main player loop. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/StreamVolumeManager.java
Patch:
@@ -55,7 +55,7 @@ public interface Listener {
   private final AudioManager audioManager;
 
   @Nullable private VolumeChangeReceiver receiver;
-  @C.StreamType private int streamType;
+  private @C.StreamType int streamType;
   private int volume;
   private boolean muted;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/AnalyticsListener.java
Patch:
@@ -150,8 +150,7 @@ public int size() {
      * @param index The index. Must be between 0 (inclusive) and {@link #size()} (exclusive).
      * @return The {@link EventFlags event} at the given index.
      */
-    @EventFlags
-    public int get(int index) {
+    public @EventFlags int get(int index) {
       return flags.get(index);
     }
   }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/MediaMetricsListener.java
Patch:
@@ -120,7 +120,7 @@ public static MediaMetricsListener create(Context context) {
 
   @Nullable private String activeSessionId;
   @Nullable private PlaybackMetrics.Builder metricsBuilder;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int currentPlaybackState;
   private int currentNetworkType;
   @Nullable private PlaybackException pendingPlayerError;
@@ -887,7 +887,7 @@ public ErrorInfo(int errorCode, int subErrorCode) {
   private static final class PendingFormatUpdate {
 
     public final Format format;
-    @C.SelectionReason public final int selectionReason;
+    public final @C.SelectionReason int selectionReason;
     public final String sessionId;
 
     public PendingFormatUpdate(

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/PlaybackStatsListener.java
Patch:
@@ -84,7 +84,7 @@ public interface Callback {
 
   @Nullable private String discontinuityFromSession;
   private long discontinuityFromPositionMs;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int droppedFrames;
   @Nullable private Exception nonFatalException;
   private long bandwidthTimeMs;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioProcessor.java
Patch:
@@ -45,7 +45,7 @@ final class AudioFormat {
     /** The number of interleaved channels. */
     public final int channelCount;
     /** The type of linear PCM encoding. */
-    @C.PcmEncoding public final int encoding;
+    public final @C.PcmEncoding int encoding;
     /** The number of bytes used to represent one audio frame. */
     public final int bytesPerFrame;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/ForwardingAudioSink.java
Patch:
@@ -50,8 +50,7 @@ public boolean supportsFormat(Format format) {
   }
 
   @Override
-  @SinkFormatSupport
-  public int getFormatSupport(Format format) {
+  public @SinkFormatSupport int getFormatSupport(Format format) {
     return sink.getFormatSupport(format);
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/MediaCodecAudioRenderer.java
Patch:
@@ -286,8 +286,7 @@ public void experimentalSetEnableKeepAudioTrackOnSeek(boolean enableKeepAudioTra
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     if (!MimeTypes.isAudio(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/SilenceSkippingAudioProcessor.java
Patch:
@@ -88,7 +88,7 @@ public final class SilenceSkippingAudioProcessor extends BaseAudioProcessor {
    */
   private byte[] paddingBuffer;
 
-  @State private int state;
+  private @State int state;
   private int maybeSilenceBufferSize;
   private int paddingSize;
   private boolean hasOutputNoise;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/SpatializerDelegate.java
Patch:
@@ -129,8 +129,7 @@ public boolean isAvailable() {
   }
 
   /** Delegates to Spatializer.getImmersiveAudioLevel() */
-  @ImmersiveAudioLevel
-  public int getImmersiveAudioLevel() {
+  public @ImmersiveAudioLevel int getImmersiveAudioLevel() {
     try {
       return (int) Util.castNonNull(getImmersiveAudioLevel.invoke(spatializer));
     } catch (IllegalAccessException | InvocationTargetException e) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/TeeAudioProcessor.java
Patch:
@@ -128,7 +128,7 @@ public static final class WavFileAudioBufferSink implements AudioBufferSink {
 
     private int sampleRateHz;
     private int channelCount;
-    @C.PcmEncoding private int encoding;
+    private @C.PcmEncoding int encoding;
     @Nullable private RandomAccessFile randomAccessFile;
     private int counter;
     private int bytesWritten;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/TrimmingAudioProcessor.java
Patch:
@@ -25,7 +25,7 @@
 /** Audio processor for trimming samples from the start/end of data. */
 /* package */ final class TrimmingAudioProcessor extends BaseAudioProcessor {
 
-  @C.PcmEncoding private static final int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
 
   private int trimStartFrames;
   private int trimEndFrames;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DefaultDrmSession.java
Patch:
@@ -254,8 +254,7 @@ public void onProvisionError(Exception error, boolean thrownByExoMediaDrm) {
   // DrmSession implementation.
 
   @Override
-  @DrmSession.State
-  public final int getState() {
+  public final @DrmSession.State int getState() {
     return state;
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DefaultDrmSessionManager.java
Patch:
@@ -312,7 +312,7 @@ private MissingSchemeDataException(UUID uuid) {
   @Nullable private byte[] offlineLicenseKeySetId;
   private @MonotonicNonNull PlayerId playerId;
 
-  /* package */ volatile @Nullable MediaDrmHandler mediaDrmHandler;
+  /* package */ @Nullable volatile MediaDrmHandler mediaDrmHandler;
 
   /**
    * @param uuid The UUID of the drm scheme.
@@ -590,8 +590,7 @@ private DrmSession acquireSession(
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType(Format format) {
+  public @C.CryptoType int getCryptoType(Format format) {
     @C.CryptoType int cryptoType = checkNotNull(exoMediaDrm).getCryptoType();
     if (format.drmInitData == null) {
       int trackType = MimeTypes.getTrackType(format.sampleMimeType);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DrmSession.java
Patch:
@@ -65,7 +65,7 @@ static void replaceSession(
   class DrmSessionException extends IOException {
 
     /** The {@link PlaybackException.ErrorCode} that corresponds to the failure. */
-    @PlaybackException.ErrorCode public final int errorCode;
+    public final @PlaybackException.ErrorCode int errorCode;
 
     public DrmSessionException(Throwable cause, @PlaybackException.ErrorCode int errorCode) {
       super(cause);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DrmSessionManager.java
Patch:
@@ -66,8 +66,7 @@ public DrmSession acquireSession(
         }
 
         @Override
-        @C.CryptoType
-        public int getCryptoType(Format format) {
+        public @C.CryptoType int getCryptoType(Format format) {
           return format.drmInitData != null ? C.CRYPTO_TYPE_UNSUPPORTED : C.CRYPTO_TYPE_NONE;
         }
       };

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DummyExoMediaDrm.java
Patch:
@@ -153,8 +153,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) {
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_UNSUPPORTED;
   }
 }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/ExoMediaDrm.java
Patch:
@@ -267,7 +267,7 @@ final class KeyRequest {
 
     private final byte[] data;
     private final String licenseServerUrl;
-    @RequestType private final int requestType;
+    private final @RequestType int requestType;
 
     /**
      * Creates an instance with {@link #REQUEST_TYPE_UNKNOWN}.
@@ -307,8 +307,7 @@ public String getLicenseServerUrl() {
      * request does not specify a type. Note that when using a platform {@link MediaDrm} instance,
      * key requests only specify a type on API levels 23 and above.
      */
-    @RequestType
-    public int getRequestType() {
+    public @RequestType int getRequestType() {
       return requestType;
     }
   }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/FrameworkMediaDrm.java
Patch:
@@ -342,8 +342,7 @@ public FrameworkCryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCr
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_FRAMEWORK;
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/UnsupportedDrmException.java
Patch:
@@ -49,7 +49,7 @@ public final class UnsupportedDrmException extends Exception {
   public static final int REASON_INSTANTIATION_ERROR = 2;
 
   /** Either {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
-  @Reason public final int reason;
+  public final @Reason int reason;
 
   /** @param reason {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
   public UnsupportedDrmException(@Reason int reason) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/WidevineUtil.java
Patch:
@@ -39,7 +39,8 @@ private WidevineUtil() {}
    * @return A {@link Pair} consisting of the remaining license and playback durations in seconds,
    *     or null if called before the session has been opened or after it's been released.
    */
-  public static @Nullable Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
+  @Nullable
+  public static Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
     Map<String, String> keyStatus = drmSession.queryKeyStatus();
     if (keyStatus == null) {
       return null;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -141,7 +141,7 @@ public AsynchronousMediaCodecAdapter createAdapter(Configuration configuration)
   private final boolean synchronizeCodecInteractionsWithQueueing;
   private final boolean enableImmediateCodecStartAfterFlush;
   private boolean codecReleased;
-  @State private int state;
+  private @State int state;
 
   private AsynchronousMediaCodecAdapter(
       MediaCodec codec,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/DefaultMediaCodecAdapterFactory.java
Patch:
@@ -53,7 +53,7 @@ public final class DefaultMediaCodecAdapterFactory implements MediaCodecAdapter.
 
   private static final String TAG = "DMCodecAdapterFactory";
 
-  @Mode private int asynchronousMode;
+  private @Mode int asynchronousMode;
   private boolean enableSynchronizeCodecInteractionsWithQueueing;
   private boolean enableImmediateCodecStartAfterFlush;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/metadata/MetadataRenderer.java
Patch:
@@ -94,8 +94,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/Download.java
Patch:
@@ -99,7 +99,7 @@ public final class Download {
   /** The download request. */
   public final DownloadRequest request;
   /** The state of the download. */
-  @State public final int state;
+  public final @State int state;
   /** The first time when download entry is created. */
   public final long startTimeMs;
   /** The last update time. */
@@ -112,7 +112,7 @@ public final class Download {
    * If {@link #state} is {@link #STATE_FAILED} then this is the cause, otherwise {@link
    * #FAILURE_REASON_NONE}.
    */
-  @FailureReason public final int failureReason;
+  public final @FailureReason int failureReason;
 
   /* package */ final DownloadProgress progress;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadHelper.java
Patch:
@@ -1100,8 +1100,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    @C.SelectionReason
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadManager.java
Patch:
@@ -351,8 +351,7 @@ public Requirements getRequirements() {
    *
    * @return The not met {@link Requirements.RequirementFlags}, or 0 if all requirements are met.
    */
-  @Requirements.RequirementFlags
-  public int getNotMetRequirements() {
+  public @Requirements.RequirementFlags int getNotMetRequirements() {
     return notMetRequirements;
   }
 
@@ -705,7 +704,7 @@ private static final class InternalHandler extends Handler {
     private final ArrayList<Download> downloads;
     private final HashMap<String, Task> activeTasks;
 
-    @Requirements.RequirementFlags private int notMetRequirements;
+    private @Requirements.RequirementFlags int notMetRequirements;
     private boolean downloadsPaused;
     private int maxParallelDownloads;
     private int minRetryCount;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/scheduler/RequirementsWatcher.java
Patch:
@@ -62,7 +62,7 @@ void onRequirementsStateChanged(
 
   @Nullable private DeviceStatusChangeReceiver receiver;
 
-  @Requirements.RequirementFlags private int notMetRequirements;
+  private @Requirements.RequirementFlags int notMetRequirements;
   @Nullable private NetworkCallback networkCallback;
 
   /**
@@ -83,8 +83,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
    *
    * @return Initial {@link Requirements.RequirementFlags RequirementFlags} that are not met, or 0.
    */
-  @Requirements.RequirementFlags
-  public int start() {
+  public @Requirements.RequirementFlags int start() {
     notMetRequirements = requirements.getNotMetRequirements(context);
 
     IntentFilter filter = new IntentFilter();

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ClippingMediaSource.java
Patch:
@@ -63,7 +63,7 @@ public static final class IllegalClippingException extends IOException {
     public static final int REASON_START_EXCEEDS_END = 2;
 
     /** The reason clipping failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason clipping failed. */
     public IllegalClippingException(@Reason int reason) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/DefaultMediaSourceFactory.java
Patch:
@@ -472,8 +472,7 @@ public DelegateFactoryLoader(
       mediaSourceFactories = new HashMap<>();
     }
 
-    @C.ContentType
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       ensureAllSuppliersAreLoaded();
       return Ints.toArray(supportedTypes);
     }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MediaLoadData.java
Patch:
@@ -28,7 +28,7 @@
 public final class MediaLoadData {
 
   /** The {@link DataType data type}. */
-  @DataType public final int dataType;
+  public final @DataType int dataType;
   /**
    * One of the {@link TrackType track types}, which is a media track type if the data corresponds
    * to media of a specific type, or {@link C#TRACK_TYPE_UNKNOWN} otherwise.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MediaSourceFactory.java
Patch:
@@ -47,8 +47,7 @@ public MediaSourceFactory setLoadErrorHandlingPolicy(
         }
 
         @Override
-        @C.ContentType
-        public int[] getSupportedTypes() {
+        public @C.ContentType int[] getSupportedTypes() {
           throw new UnsupportedOperationException();
         }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MergingMediaSource.java
Patch:
@@ -61,7 +61,7 @@ public static final class IllegalMergeException extends IOException {
     public static final int REASON_PERIOD_COUNT_MISMATCH = 0;
 
     /** The reason the merge failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason the merge failed. */
     public IllegalMergeException(@Reason int reason) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ProgressiveMediaPeriod.java
Patch:
@@ -131,7 +131,7 @@ interface Listener {
   private @MonotonicNonNull SeekMap seekMap;
   private long durationUs;
   private boolean isLive;
-  @DataType private int dataType;
+  private @DataType int dataType;
 
   private boolean seenFirstTrackSelection;
   private boolean notifyDiscontinuity;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/SilenceMediaSource.java
Patch:
@@ -87,7 +87,7 @@ public SilenceMediaSource createMediaSource() {
   public static final String MEDIA_ID = "SilenceMediaSource";
 
   private static final int SAMPLE_RATE_HZ = 44100;
-  @C.PcmEncoding private static final int PCM_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int PCM_ENCODING = C.ENCODING_PCM_16BIT;
   private static final int CHANNEL_COUNT = 2;
   private static final Format FORMAT =
       new Format.Builder()

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/chunk/Chunk.java
Patch:
@@ -42,15 +42,15 @@ public abstract class Chunk implements Loadable {
   /** The {@link DataSpec} that defines the data to be loaded. */
   public final DataSpec dataSpec;
   /** The {@link DataType data type} of the chunk. For reporting only. */
-  @DataType public final int type;
+  public final @DataType int type;
   /** The format of the track to which this chunk belongs. */
   public final Format trackFormat;
   /**
    * One of the {@link C.SelectionReason selection reasons} if the chunk belongs to a track. {@link
    * C#SELECTION_REASON_UNKNOWN} if the chunk does not belong to a track, or if the selection reason
    * is unknown.
    */
-  @C.SelectionReason public final int trackSelectionReason;
+  public final @C.SelectionReason int trackSelectionReason;
   /**
    * Optional data associated with the selection of the track to which this chunk belongs. Null if
    * the chunk does not belong to a track, or if there is no associated track selection data.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/mediaparser/OutputConsumerAdapterV30.java
Patch:
@@ -540,8 +540,7 @@ private static DrmInitData toExoPlayerDrmInitData(
     return new DrmInitData(schemeType, schemeDatas);
   }
 
-  @SelectionFlags
-  private static int getSelectionFlags(MediaFormat mediaFormat) {
+  private static @SelectionFlags int getSelectionFlags(MediaFormat mediaFormat) {
     int selectionFlags = 0;
     selectionFlags |=
         getFlag(

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/ExoplayerCuesDecoder.java
Patch:
@@ -63,7 +63,7 @@ public final class ExoplayerCuesDecoder implements SubtitleDecoder {
   private final SubtitleInputBuffer inputBuffer;
   private final Deque<SubtitleOutputBuffer> availableOutputBuffers;
 
-  @InputBufferState private int inputBufferState;
+  private @InputBufferState int inputBufferState;
   private boolean released;
 
   public ExoplayerCuesDecoder() {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/TextRenderer.java
Patch:
@@ -94,7 +94,7 @@ public final class TextRenderer extends BaseRenderer implements Callback {
   private boolean inputStreamEnded;
   private boolean outputStreamEnded;
   private boolean waitingForKeyFrame;
-  @ReplacementState private int decoderReplacementState;
+  private @ReplacementState int decoderReplacementState;
   @Nullable private Format streamFormat;
   @Nullable private SubtitleDecoder decoder;
   @Nullable private SubtitleInputBuffer nextInputBuffer;
@@ -141,8 +141,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/DefaultBandwidthMeter.java
Patch:
@@ -281,14 +281,14 @@ public static synchronized DefaultBandwidthMeter getSingletonInstance(Context co
   private long sampleStartTimeMs;
   private long sampleBytesTransferred;
 
-  @C.NetworkType private int networkType;
+  private @C.NetworkType int networkType;
   private long totalElapsedTimeMs;
   private long totalBytesTransferred;
   private long bitrateEstimate;
   private long lastReportedBitrateEstimate;
 
   private boolean networkTypeOverrideSet;
-  @C.NetworkType private int networkTypeOverride;
+  private @C.NetworkType int networkTypeOverride;
 
   /** @deprecated Use {@link Builder} instead. */
   @Deprecated

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/LoadErrorHandlingPolicy.java
Patch:
@@ -130,7 +130,7 @@ public boolean isFallbackAvailable(@FallbackType int type) {
   /** A selected fallback option. */
   final class FallbackSelection {
     /** The type of fallback. */
-    @FallbackType public final int type;
+    public final @FallbackType int type;
     /** The duration for which the failing resource should be excluded, in milliseconds. */
     public final long exclusionDurationMs;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/ParsingLoadable.java
Patch:
@@ -104,7 +104,7 @@ public static <T> T load(
   private final StatsDataSource dataSource;
   private final Parser<? extends T> parser;
 
-  private volatile @Nullable T result;
+  @Nullable private volatile T result;
 
   /**
    * @param dataSource A {@link DataSource} to use when loading the data.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/DecoderVideoRenderer.java
Patch:
@@ -121,7 +121,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
 
   private DecoderInputBuffer inputBuffer;
   private VideoDecoderOutputBuffer outputBuffer;
-  @VideoOutputMode private int outputMode;
+  private @VideoOutputMode int outputMode;
   @Nullable private Object output;
   @Nullable private Surface outputSurface;
   @Nullable private VideoDecoderOutputBufferRenderer outputBufferRenderer;
@@ -130,7 +130,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
   @Nullable private DrmSession decoderDrmSession;
   @Nullable private DrmSession sourceDrmSession;
 
-  @ReinitializationState private int decoderReinitializationState;
+  private @ReinitializationState int decoderReinitializationState;
   private boolean decoderReceivedBuffers;
 
   private boolean renderedFirstFrameAfterReset;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/DummySurface.java
Patch:
@@ -105,8 +105,7 @@ public void release() {
     }
   }
 
-  @SecureMode
-  private static int getSecureMode(Context context) {
+  private static @SecureMode int getSecureMode(Context context) {
     if (GlUtil.isProtectedContentExtensionSupported(context)) {
       if (GlUtil.isSurfacelessContextExtensionSupported()) {
         return SECURE_MODE_SURFACELESS_CONTEXT;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/MediaCodecVideoRenderer.java
Patch:
@@ -131,7 +131,7 @@ public class MediaCodecVideoRenderer extends MediaCodecRenderer {
   @Nullable private Surface surface;
   @Nullable private DummySurface dummySurface;
   private boolean haveReportedFirstFrameRenderedForCurrentSurface;
-  @C.VideoScalingMode private int scalingMode;
+  private @C.VideoScalingMode int scalingMode;
   private boolean renderedFirstFrameAfterReset;
   private boolean mayRenderFirstFrameAfterEnableIfNotStarted;
   private boolean renderedFirstFrameAfterEnable;
@@ -342,8 +342,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     String mimeType = format.sampleMimeType;
     if (!MimeTypes.isVideo(mimeType)) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/VideoFrameReleaseHelper.java
Patch:
@@ -111,7 +111,7 @@ public final class VideoFrameReleaseHelper {
   private float surfacePlaybackFrameRate;
 
   private float playbackSpeed;
-  @C.VideoChangeFrameRateStrategy private int changeFrameRateStrategy;
+  private @C.VideoChangeFrameRateStrategy int changeFrameRateStrategy;
 
   private long vsyncDurationNs;
   private long vsyncOffsetNs;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/spherical/CameraMotionRenderer.java
Patch:
@@ -58,8 +58,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     return MimeTypes.APPLICATION_CAMERA_MOTION.equals(format.sampleMimeType)
         ? RendererCapabilities.create(C.FORMAT_HANDLED)
         : RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/spherical/SceneRenderer.java
Patch:
@@ -50,8 +50,8 @@
   private @MonotonicNonNull SurfaceTexture surfaceTexture;
 
   // Used by other threads only
-  @C.StereoMode private volatile int defaultStereoMode;
-  @C.StereoMode private int lastStereoMode;
+  private volatile @C.StereoMode int defaultStereoMode;
+  private @C.StereoMode int lastStereoMode;
   @Nullable private byte[] lastProjectionData;
 
   // Methods called on any thread.

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/ExoPlayerTest.java
Patch:
@@ -11488,7 +11488,7 @@ public void handleMessage(ExoPlayer player, int messageType, @Nullable Object me
   private static final class PlayerStateGrabber extends PlayerRunnable {
 
     public boolean playWhenReady;
-    @Player.State public int playbackState;
+    public @Player.State int playbackState;
     @Nullable public Timeline timeline;
 
     @Override

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/audio/DecoderAudioRendererTest.java
Patch:
@@ -71,8 +71,7 @@ public String getName() {
           }
 
           @Override
-          @C.FormatSupport
-          protected int supportsFormatInternal(Format format) {
+          protected @C.FormatSupport int supportsFormatInternal(Format format) {
             return FORMAT_HANDLED;
           }
 

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/video/DecoderVideoRendererTest.java
Patch:
@@ -84,16 +84,15 @@ public void setUp() {
             /* maxDroppedFramesToNotify= */ -1) {
 
           private final Phaser inputBuffersInCodecPhaser = new Phaser();
-          @C.VideoOutputMode private int outputMode;
+          private @C.VideoOutputMode int outputMode;
 
           @Override
           public String getName() {
             return "TestVideoRenderer";
           }
 
           @Override
-          @Capabilities
-          public int supportsFormat(Format format) {
+          public @Capabilities int supportsFormat(Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/video/MediaCodecVideoRendererTest.java
Patch:
@@ -111,8 +111,8 @@ public void setUp() throws Exception {
             /* eventListener= */ eventListener,
             /* maxDroppedFramesToNotify= */ 1) {
           @Override
-          @Capabilities
-          protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format) {
+          protected @Capabilities int supportsFormat(
+              MediaCodecSelector mediaCodecSelector, Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/DashMediaPeriod.java
Patch:
@@ -937,7 +937,7 @@ private static final class TrackGroupInfo {
 
     public final int[] adaptationSetIndices;
     public final @C.TrackType int trackType;
-    @TrackGroupCategory public final int trackGroupCategory;
+    public final @TrackGroupCategory int trackGroupCategory;
 
     public final int eventStreamGroupIndex;
     public final int primaryTrackGroupIndex;

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -62,7 +62,7 @@ public final class DefaultHlsExtractorFactory implements HlsExtractorFactory {
         FileTypes.MP3,
       };
 
-  @DefaultTsPayloadReaderFactory.Flags private final int payloadReaderFactoryFlags;
+  private final @DefaultTsPayloadReaderFactory.Flags int payloadReaderFactoryFlags;
   private final boolean exposeCea608WhenMissingDeclarations;
 
   /**

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsChunkSource.java
Patch:
@@ -303,8 +303,7 @@ public long getAdjustedSeekPositionUs(long positionUs, SeekParameters seekParame
    *     has been {@link #CHUNK_PUBLICATION_STATE_REMOVED removed} or is definitely {@link
    *     #CHUNK_PUBLICATION_STATE_PUBLISHED published}.
    */
-  @ChunkPublicationState
-  public int getChunkPublicationState(HlsMediaChunk mediaChunk) {
+  public @ChunkPublicationState int getChunkPublicationState(HlsMediaChunk mediaChunk) {
     if (mediaChunk.partIndex == C.INDEX_UNSET) {
       // Chunks based on full segments can't be removed and are always published.
       return CHUNK_PUBLICATION_STATE_PUBLISHED;

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/playlist/HlsMediaPlaylist.java
Patch:
@@ -398,7 +398,7 @@ public RenditionReport(Uri playlistUri, long lastMediaSequence, int lastPartInde
   public static final int PLAYLIST_TYPE_EVENT = 2;
 
   /** The type of the playlist. See {@link PlaylistType}. */
-  @PlaylistType public final int playlistType;
+  public final @PlaylistType int playlistType;
   /**
    * The start offset in microseconds from the beginning of the playlist, as defined by
    * #EXT-X-START, or {@link C#TIME_UNSET} if undefined. The value is guaranteed to be between 0 and

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/AdTagLoader.java
Patch:
@@ -162,7 +162,7 @@
   /** Whether IMA has sent an ad event to pause content since the last resume content event. */
   private boolean imaPausedContent;
   /** The current ad playback state. */
-  @ImaAdState private int imaAdState;
+  private @ImaAdState int imaAdState;
   /** The current ad media info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */
   @Nullable private AdMediaInfo imaAdMediaInfo;
   /** The current ad info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ServerSideAdInsertionStreamRequest.java
Patch:
@@ -51,7 +51,7 @@ public static final class Builder {
     @Nullable private String authToken;
     @Nullable private String streamActivityMonitorId;
     private ImmutableMap<String, String> adTagParameters;
-    @ContentType public int format = C.TYPE_HLS;
+    public @ContentType int format = C.TYPE_HLS;
     private int loadVideoTimeoutMs;
 
     /** Creates a new instance. */
@@ -270,7 +270,7 @@ public ServerSideAdInsertionStreamRequest build() {
   @Nullable public final String contentUrl;
   @Nullable public final String authToken;
   @Nullable public final String streamActivityMonitorId;
-  @ContentType public int format = C.TYPE_HLS;
+  public @ContentType int format = C.TYPE_HLS;
   public final int loadVideoTimeoutMs;
 
   private ServerSideAdInsertionStreamRequest(

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspAuthenticationInfo.java
Patch:
@@ -56,7 +56,7 @@
   private static final String ALGORITHM = "MD5";
 
   /** The authentication mechanism. */
-  @AuthenticationMechanism public final int authenticationMechanism;
+  public final @AuthenticationMechanism int authenticationMechanism;
   /** The authentication realm. */
   public final String realm;
   /** The nonce used in digest authentication; empty if using {@link #BASIC} authentication. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspClient.java
Patch:
@@ -141,7 +141,7 @@ public interface PlaybackEventListener {
   @Nullable private String sessionId;
   @Nullable private KeepAliveMonitor keepAliveMonitor;
   @Nullable private RtspAuthenticationInfo rtspAuthenticationInfo;
-  @RtspState private int rtspState;
+  private @RtspState int rtspState;
   private boolean hasUpdatedTimelineAndTracks;
   private boolean receivedAuthorizationRequest;
   private boolean hasPendingPauseRequest;
@@ -204,8 +204,7 @@ public void start() throws IOException {
   }
 
   /** Returns the current {@link RtspState RTSP state}. */
-  @RtspState
-  public int getState() {
+  public @RtspState int getState() {
     return rtspState;
   }
 

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaPeriod.java
Patch:
@@ -775,8 +775,7 @@ public boolean isSampleQueueReady() {
       return sampleQueue.isReady(/* loadingFinished= */ canceled);
     }
 
-    @ReadDataResult
-    public int read(
+    public @ReadDataResult int read(
         FormatHolder formatHolder, DecoderInputBuffer buffer, @ReadFlags int readFlags) {
       return sampleQueue.read(formatHolder, buffer, readFlags, /* loadingFinished= */ canceled);
     }

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMessageChannel.java
Patch:
@@ -353,7 +353,7 @@ private static final class MessageParser {
 
     private final List<String> messageLines;
 
-    @ReadingState private int state;
+    private @ReadingState int state;
     private long messageBodyLength;
 
     /** Creates a new instance. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMessageUtil.java
Patch:
@@ -256,8 +256,7 @@ public static String toMethodString(@RtspRequest.Method int method) {
     }
   }
 
-  @RtspRequest.Method
-  private static int parseMethodString(String method) {
+  private static @RtspRequest.Method int parseMethodString(String method) {
     switch (method) {
       case "ANNOUNCE":
         return METHOD_ANNOUNCE;

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspRequest.java
Patch:
@@ -88,7 +88,7 @@
   /** The {@link Uri} to which this request is sent. */
   public final Uri uri;
   /** The request method, as defined in {@link Method}. */
-  @Method public final int method;
+  public final @Method int method;
   /** The headers of this request. */
   public final RtspHeaders headers;
   /** The body of this RTSP message, or empty string if absent. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/RtpH264Reader.java
Patch:
@@ -58,7 +58,7 @@
   private final RtpPayloadFormat payloadFormat;
 
   private @MonotonicNonNull TrackOutput trackOutput;
-  @C.BufferFlags private int bufferFlags;
+  private @C.BufferFlags int bufferFlags;
 
   private long firstReceivedTimestamp;
   private int previousSequenceNumber;
@@ -296,8 +296,7 @@ private static long toSampleUs(
             /* divisor= */ MEDIA_CLOCK_FREQUENCY);
   }
 
-  @C.BufferFlags
-  private static int getBufferFlagsFromNalType(int nalType) {
+  private static @C.BufferFlags int getBufferFlagsFromNalType(int nalType) {
     return nalType == NAL_UNIT_TYPE_IDR ? C.BUFFER_FLAG_KEY_FRAME : 0;
   }
 }

File: libraries/extractor/src/main/java/androidx/media3/extractor/BinarySearchSeeker.java
Patch:
@@ -423,7 +423,7 @@ public static final class TimestampSearchResult {
         new TimestampSearchResult(TYPE_NO_TIMESTAMP, C.TIME_UNSET, C.POSITION_UNSET);
 
     /** The type of the result. */
-    @Type private final int type;
+    private final @Type int type;
 
     /**
      * When {@link #type} is {@link #TYPE_POSITION_OVERESTIMATED}, the {@link

File: libraries/extractor/src/main/java/androidx/media3/extractor/TrackOutput.java
Patch:
@@ -40,7 +40,7 @@ public interface TrackOutput {
   final class CryptoData {
 
     /** The encryption mode used for the sample. */
-    @C.CryptoMode public final int cryptoMode;
+    public final @C.CryptoMode int cryptoMode;
 
     /** The encryption key associated with the sample. Its contents must not be modified. */
     public final byte[] encryptionKey;

File: libraries/extractor/src/main/java/androidx/media3/extractor/TrueHdSampleRechunker.java
Patch:
@@ -33,7 +33,7 @@ public final class TrueHdSampleRechunker {
   private boolean foundSyncframe;
   private int chunkSampleCount;
   private long chunkTimeUs;
-  @C.BufferFlags private int chunkFlags;
+  private @C.BufferFlags int chunkFlags;
   private int chunkSize;
   private int chunkOffset;
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/jpeg/JpegExtractor.java
Patch:
@@ -84,7 +84,7 @@ public final class JpegExtractor implements Extractor {
 
   private @MonotonicNonNull ExtractorOutput extractorOutput;
 
-  @State private int state;
+  private @State int state;
   private int marker;
   private int segmentLength;
   private long mp4StartPosition;
@@ -128,8 +128,8 @@ public void init(ExtractorOutput output) {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     switch (state) {
       case STATE_READING_MARKER:
         readMarker(input);

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp3/Mp3Extractor.java
Patch:
@@ -142,7 +142,7 @@ public final class Mp3Extractor implements Extractor {
   private static final int SEEK_HEADER_VBRI = 0x56425249;
   private static final int SEEK_HEADER_UNSET = 0;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final long forcedFirstSampleTimestampUs;
   private final ParsableByteArray scratch;
   private final MpegAudioUtil.Header synchronizedHeader;

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/AtomParsers.java
Patch:
@@ -1910,7 +1910,7 @@ private static final class StsdData {
 
     @Nullable public Format format;
     public int nalUnitLengthFieldLength;
-    @Track.Transformation public int requiredSampleTransformation;
+    public @Track.Transformation int requiredSampleTransformation;
 
     public StsdData(int numberOfEntries) {
       trackEncryptionBoxes = new TrackEncryptionBox[numberOfEntries];

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -132,7 +132,7 @@ public class FragmentedMp4Extractor implements Extractor {
   private static final int STATE_READING_SAMPLE_CONTINUE = 4;
 
   // Workarounds.
-  @Flags private final int flags;
+  private final @Flags int flags;
   @Nullable private final Track sideloadedTrack;
 
   // Sideloaded data.
@@ -1689,8 +1689,7 @@ public int getCurrentSampleSize() {
     }
 
     /** Returns the {@link C.BufferFlags} corresponding to the current sample. */
-    @C.BufferFlags
-    public int getCurrentSampleFlags() {
+    public @C.BufferFlags int getCurrentSampleFlags() {
       int flags =
           !currentlyInFragment
               ? moovSampleTable.flags[currentSampleIndex]

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/Track.java
Patch:
@@ -69,7 +69,7 @@ public final class Track {
    * One of {@code TRANSFORMATION_*}. Defines the transformation to apply before outputting each
    * sample.
    */
-  @Transformation public final int sampleTransformation;
+  public final @Transformation int sampleTransformation;
 
   /** Durations of edit list segments in the movie timescale. Null if there is no edit list. */
   @Nullable public final long[] editListDurations;

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/TrackEncryptionBox.java
Patch:
@@ -79,8 +79,7 @@ public TrackEncryptionBox(
             schemeToCryptoMode(schemeType), keyId, defaultEncryptedBlocks, defaultClearBlocks);
   }
 
-  @C.CryptoMode
-  private static int schemeToCryptoMode(@Nullable String schemeType) {
+  private static @C.CryptoMode int schemeToCryptoMode(@Nullable String schemeType) {
     if (schemeType == null) {
       // If unknown, assume cenc.
       return C.CRYPTO_MODE_AES_CTR;

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/SubtitleExtractor.java
Patch:
@@ -87,7 +87,7 @@ public class SubtitleExtractor implements Extractor {
   private @MonotonicNonNull ExtractorOutput extractorOutput;
   private @MonotonicNonNull TrackOutput trackOutput;
   private int bytesRead;
-  @State private int state;
+  private @State int state;
   private long seekTimeUs;
 
   /**

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/ttml/TextEmphasis.java
Patch:
@@ -97,13 +97,13 @@
           TtmlNode.ANNOTATION_POSITION_OUTSIDE);
 
   /** The text emphasis mark shape. */
-  @MarkShape public final int markShape;
+  public final @MarkShape int markShape;
 
   /** The fill style of the text emphasis mark. */
-  @TextEmphasisSpan.MarkFill public final int markFill;
+  public final @TextEmphasisSpan.MarkFill int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @Position public final int position;
+  public final @Position int position;
 
   private TextEmphasis(
       @MarkShape int markShape,

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/Ac3Reader.java
Patch:
@@ -62,7 +62,7 @@ public final class Ac3Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/Ac4Reader.java
Patch:
@@ -60,7 +60,7 @@ public final class Ac4Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/DefaultTsPayloadReaderFactory.java
Patch:
@@ -104,7 +104,7 @@ public final class DefaultTsPayloadReaderFactory implements TsPayloadReader.Fact
 
   private static final int DESCRIPTOR_TAG_CAPTION_SERVICE = 0x86;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final List<Format> closedCaptionFormats;
 
   public DefaultTsPayloadReaderFactory() {

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/H263Reader.java
Patch:
@@ -335,7 +335,7 @@ private static final class CsdBuffer {
     private static final int STATE_WAIT_FOR_VOP_START = 4;
 
     private boolean isFilling;
-    @State private int state;
+    private @State int state;
 
     public int length;
     public int volStartPosition;

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/TsExtractor.java
Patch:
@@ -118,7 +118,7 @@ public final class TsExtractor implements Extractor {
   private static final int BUFFER_SIZE = TS_PACKET_SIZE * 50;
   private static final int SNIFF_TS_PACKET_COUNT = 5;
 
-  @Mode private final int mode;
+  private final @Mode int mode;
   private final int timestampSearchBytes;
   private final List<TimestampAdjuster> timestampAdjusters;
   private final ParsableByteArray tsPacketBuffer;
@@ -298,8 +298,8 @@ public void release() {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     long inputLength = input.getLength();
     if (tracksEnded) {
       boolean canReadDuration = inputLength != C.LENGTH_UNSET && mode != MODE_HLS;

File: libraries/extractor/src/test/java/androidx/media3/extractor/mkv/DefaultEbmlReaderTest.java
Patch:
@@ -178,8 +178,7 @@ private static final class TestProcessor implements EbmlProcessor {
     private final List<String> events = new ArrayList<>();
 
     @Override
-    @EbmlProcessor.ElementType
-    public int getElementType(int id) {
+    public @EbmlProcessor.ElementType int getElementType(int id) {
       switch (id) {
         case ID_EBML:
         case ID_SEGMENT:

File: libraries/extractor/src/test/java/androidx/media3/extractor/text/ttml/TtmlStyleTest.java
Patch:
@@ -42,7 +42,7 @@ public final class TtmlStyleTest {
   private static final String FONT_FAMILY = "serif";
   @ColorInt private static final int FONT_COLOR = Color.WHITE;
   private static final float FONT_SIZE = 12.5f;
-  @TtmlStyle.FontSizeUnit private static final int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
+  private static final @TtmlStyle.FontSizeUnit int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
   @ColorInt private static final int BACKGROUND_COLOR = Color.BLACK;
   private static final int RUBY_TYPE = TtmlStyle.RUBY_TYPE_TEXT;
   private static final int RUBY_POSITION = TextAnnotation.POSITION_AFTER;

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/Action.java
Patch:
@@ -495,7 +495,7 @@ protected void doActionImpl(
   /** Calls {@link Player#setRepeatMode(int)}. */
   public static final class SetRepeatMode extends Action {
 
-    @Player.RepeatMode private final int repeatMode;
+    private final @Player.RepeatMode int repeatMode;
 
     /**
      * @param tag A tag to use for logging.
@@ -742,7 +742,7 @@ public static final class WaitForTimelineChanged extends Action {
 
     @Nullable private final Timeline expectedTimeline;
     private final boolean ignoreExpectedReason;
-    @Player.TimelineChangeReason private final int expectedReason;
+    private final @Player.TimelineChangeReason int expectedReason;
 
     /**
      * Creates action waiting for a timeline change for a given reason.
@@ -909,7 +909,7 @@ protected void doActionImpl(
    */
   public static final class WaitForPlaybackState extends Action {
 
-    @Player.State private final int targetPlaybackState;
+    private final @Player.State int targetPlaybackState;
 
     /**
      * @param tag A tag to use for logging.

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/CapturingAudioSink.java
Patch:
@@ -93,7 +93,7 @@ public void dump(Dumper dumper) {
 
   private static final class DumpableConfiguration implements Dumper.Dumpable {
 
-    @C.PcmEncoding private final int inputPcmEncoding;
+    private final @C.PcmEncoding int inputPcmEncoding;
     private final int inputChannelCount;
     private final int inputSampleRate;
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/DownloadBuilder.java
Patch:
@@ -47,7 +47,7 @@ public final class DownloadBuilder {
   @Nullable private String cacheKey;
   private byte[] customMetadata;
 
-  @Download.State private int state;
+  private @Download.State int state;
   private long startTimeMs;
   private long updateTimeMs;
   private long contentLength;

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/DumpFileAsserts.java
Patch:
@@ -72,7 +72,7 @@ public class DumpFileAsserts {
   /** Write output to folder {@code /storage/emulated/0/Android/data} of device. */
   private static final int WRITE_TO_DEVICE = 1 << 1;
 
-  @DumpFilesAction private static final int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
+  private static final @DumpFilesAction int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
 
   private DumpFileAsserts() {}
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeExoMediaDrm.java
Patch:
@@ -398,8 +398,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCryptoExcep
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return FakeCryptoConfig.TYPE;
   }
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeRenderer.java
Patch:
@@ -162,8 +162,7 @@ public boolean isEnded() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) throws ExoPlaybackException {
+  public @Capabilities int supportsFormat(Format format) throws ExoPlaybackException {
     int trackType = MimeTypes.getTrackType(format.sampleMimeType);
     return trackType != C.TRACK_TYPE_UNKNOWN && trackType == getTrackType()
         ? RendererCapabilities.create(C.FORMAT_HANDLED, ADAPTIVE_SEAMLESS, TUNNELING_NOT_SUPPORTED)

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeSampleStream.java
Patch:
@@ -295,7 +295,7 @@ private void maybeNotifyDownstreamFormat(long timeUs) {
 
   private static class SampleInfo {
     public final byte[] data;
-    @C.BufferFlags public final int flags;
+    public final @C.BufferFlags int flags;
     public final long timeUs;
 
     public SampleInfo(byte[] data, @C.BufferFlags int flags, long timeUs) {

File: libraries/test_utils_robolectric/src/main/java/androidx/media3/test/utils/robolectric/TestDownloadManagerListener.java
Patch:
@@ -44,7 +44,7 @@ public final class TestDownloadManagerListener implements DownloadManager.Listen
   private final ConditionVariable initializedCondition;
   private final ConditionVariable idleCondition;
 
-  @Download.FailureReason private int failureReason;
+  private @Download.FailureReason int failureReason;
 
   public TestDownloadManagerListener(DownloadManager downloadManager) {
     this.downloadManager = downloadManager;

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -552,7 +552,7 @@ public interface DebugViewProvider {
 
   @Nullable private MuxerWrapper muxerWrapper;
   @Nullable private ExoPlayer player;
-  @ProgressState private int progressState;
+  private @ProgressState int progressState;
 
   private Transformer(
       Context context,
@@ -754,8 +754,7 @@ public Looper getApplicationLooper() {
    * @return The {@link ProgressState}.
    * @throws IllegalStateException If this method is called from the wrong thread.
    */
-  @ProgressState
-  public int getProgress(ProgressHolder progressHolder) {
+  public @ProgressState int getProgress(ProgressHolder progressHolder) {
     verifyApplicationThread();
     if (progressState == PROGRESS_STATE_AVAILABLE) {
       Player player = checkNotNull(this.player);

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerBaseRenderer.java
Patch:
@@ -67,8 +67,7 @@ public TransformerBaseRenderer(
    * @return The {@link Capabilities} for this format.
    */
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     return RendererCapabilities.create(
         MimeTypes.getTrackType(format.sampleMimeType) == getTrackType()
             ? C.FORMAT_HANDLED

File: libraries/ui/src/main/java/androidx/media3/ui/PlayerView.java
Patch:
@@ -424,7 +424,7 @@ public PlayerView(Context context, @Nullable AttributeSet attrs, int defStyleAtt
     if (customController != null) {
       this.controller = customController;
     } else if (controllerPlaceholder != null) {
-      // Propagate attrs as playbackAttrs so that StyledPlayerControlView's custom attributes are
+      // Propagate attrs as playbackAttrs so that PlayerControlView's custom attributes are
       // transferred, but standard attributes (e.g. background) are not.
       this.controller = new PlayerControlView(context, null, 0, attrs);
       controller.setId(R.id.exo_controller);
@@ -1522,7 +1522,7 @@ public void onClick(View view) {
       toggleControllerVisibility();
     }
 
-    // StyledPlayerControlView.VisibilityListener implementation
+    // PlayerControlView.VisibilityListener implementation
 
     @Override
     public void onVisibilityChange(int visibility) {

File: extensions/av1/src/main/java/com/google/android/exoplayer2/ext/av1/Gav1Decoder.java
Patch:
@@ -39,7 +39,7 @@ public final class Gav1Decoder
 
   private final long gav1DecoderContext;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a Gav1Decoder.

File: extensions/av1/src/main/java/com/google/android/exoplayer2/ext/av1/Libgav1VideoRenderer.java
Patch:
@@ -126,8 +126,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!MimeTypes.VIDEO_AV1.equalsIgnoreCase(format.sampleMimeType)
         || !Gav1Library.isAvailable()) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: extensions/ffmpeg/src/main/java/com/google/android/exoplayer2/ext/ffmpeg/FfmpegAudioDecoder.java
Patch:
@@ -41,7 +41,7 @@
 
   private final String codecName;
   @Nullable private final byte[] extraData;
-  @C.PcmEncoding private final int encoding;
+  private final @C.PcmEncoding int encoding;
   private final int outputBufferSize;
 
   private long nativeContext; // May be reassigned on resetting the codec.
@@ -158,8 +158,7 @@ public int getSampleRate() {
   }
 
   /** Returns the encoding of output audio. */
-  @C.PcmEncoding
-  public int getEncoding() {
+  public @C.PcmEncoding int getEncoding() {
     return encoding;
   }
 

File: extensions/ffmpeg/src/main/java/com/google/android/exoplayer2/ext/ffmpeg/FfmpegVideoRenderer.java
Patch:
@@ -71,8 +71,7 @@ public String getName() {
   }
 
   @Override
-  @RendererCapabilities.Capabilities
-  public final int supportsFormat(Format format) {
+  public final @RendererCapabilities.Capabilities int supportsFormat(Format format) {
     // TODO: Remove this line and uncomment the implementation below.
     return C.FORMAT_UNSUPPORTED_TYPE;
     /*

File: extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/LibflacAudioRenderer.java
Patch:
@@ -77,8 +77,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     if (!FlacLibrary.isAvailable()
         || !MimeTypes.AUDIO_FLAC.equalsIgnoreCase(format.sampleMimeType)) {
       return C.FORMAT_UNSUPPORTED_TYPE;

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdTagLoader.java
Patch:
@@ -162,7 +162,7 @@
   /** Whether IMA has sent an ad event to pause content since the last resume content event. */
   private boolean imaPausedContent;
   /** The current ad playback state. */
-  @ImaAdState private int imaAdState;
+  private @ImaAdState int imaAdState;
   /** The current ad media info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */
   @Nullable private AdMediaInfo imaAdMediaInfo;
   /** The current ad info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ServerSideAdInsertionStreamRequest.java
Patch:
@@ -51,7 +51,7 @@ public static final class Builder {
     @Nullable private String authToken;
     @Nullable private String streamActivityMonitorId;
     private ImmutableMap<String, String> adTagParameters;
-    @ContentType public int format = C.TYPE_HLS;
+    public @ContentType int format = C.TYPE_HLS;
     private int loadVideoTimeoutMs;
 
     /** Creates a new instance. */
@@ -270,7 +270,7 @@ public ServerSideAdInsertionStreamRequest build() {
   @Nullable public final String contentUrl;
   @Nullable public final String authToken;
   @Nullable public final String streamActivityMonitorId;
-  @ContentType public int format = C.TYPE_HLS;
+  public @ContentType int format = C.TYPE_HLS;
   public final int loadVideoTimeoutMs;
 
   private ServerSideAdInsertionStreamRequest(

File: extensions/mediasession/src/main/java/com/google/android/exoplayer2/ext/mediasession/RepeatModeActionProvider.java
Patch:
@@ -26,13 +26,12 @@
 public final class RepeatModeActionProvider implements MediaSessionConnector.CustomActionProvider {
 
   /** The default repeat toggle modes. */
-  @RepeatModeUtil.RepeatToggleModes
-  public static final int DEFAULT_REPEAT_TOGGLE_MODES =
+  public static final @RepeatModeUtil.RepeatToggleModes int DEFAULT_REPEAT_TOGGLE_MODES =
       RepeatModeUtil.REPEAT_TOGGLE_MODE_ONE | RepeatModeUtil.REPEAT_TOGGLE_MODE_ALL;
 
   private static final String ACTION_REPEAT_MODE = "ACTION_EXO_REPEAT_MODE";
 
-  @RepeatModeUtil.RepeatToggleModes private final int repeatToggleModes;
+  private final @RepeatModeUtil.RepeatToggleModes int repeatToggleModes;
   private final CharSequence repeatAllDescription;
   private final CharSequence repeatOneDescription;
   private final CharSequence repeatOffDescription;

File: extensions/opus/src/main/java/com/google/android/exoplayer2/ext/opus/LibopusAudioRenderer.java
Patch:
@@ -78,8 +78,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     boolean drmIsSupported = OpusLibrary.supportsCryptoType(format.cryptoType);
     if (!OpusLibrary.isAvailable()
         || !MimeTypes.AUDIO_OPUS.equalsIgnoreCase(format.sampleMimeType)) {

File: extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/LibvpxVideoRenderer.java
Patch:
@@ -124,8 +124,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!VpxLibrary.isAvailable() || !MimeTypes.VIDEO_VP9.equalsIgnoreCase(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);
     }

File: extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/VpxDecoder.java
Patch:
@@ -47,7 +47,7 @@ public final class VpxDecoder
 
   @Nullable private ByteBuffer lastSupplementalData;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a VP9 decoder.

File: library/common/src/main/java/com/google/android/exoplayer2/BasePlayer.java
Patch:
@@ -382,8 +382,7 @@ public final long getContentDuration() {
         : timeline.getWindow(getCurrentMediaItemIndex(), window).getDurationMs();
   }
 
-  @RepeatMode
-  private int getRepeatModeForNavigation() {
+  private @RepeatMode int getRepeatModeForNavigation() {
     @RepeatMode int repeatMode = getRepeatMode();
     return repeatMode == REPEAT_MODE_ONE ? REPEAT_MODE_OFF : repeatMode;
   }

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -1215,8 +1215,8 @@ public static String getFormatSupportString(@FormatSupport int formatSupport) {
       replacement = "Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode)",
       imports = {"com.google.android.exoplayer2.util.Util"})
   @Deprecated
-  @PlaybackException.ErrorCode
-  public static int getErrorCodeForMediaDrmErrorCode(int mediaDrmErrorCode) {
+  public static @PlaybackException.ErrorCode int getErrorCodeForMediaDrmErrorCode(
+      int mediaDrmErrorCode) {
     return Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode);
   }
 }

File: library/common/src/main/java/com/google/android/exoplayer2/HeartRating.java
Patch:
@@ -78,7 +78,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_HEART;
+  private static final @RatingType int TYPE = RATING_TYPE_HEART;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: library/common/src/main/java/com/google/android/exoplayer2/MediaMetadata.java
Patch:
@@ -56,11 +56,11 @@ public static final class Builder {
     @Nullable private Rating userRating;
     @Nullable private Rating overallRating;
     @Nullable private byte[] artworkData;
-    @Nullable @PictureType private Integer artworkDataType;
+    @Nullable private @PictureType Integer artworkDataType;
     @Nullable private Uri artworkUri;
     @Nullable private Integer trackNumber;
     @Nullable private Integer totalTrackCount;
-    @Nullable @FolderType private Integer folderType;
+    @Nullable private @FolderType Integer folderType;
     @Nullable private Boolean isPlayable;
     @Nullable private Integer recordingYear;
     @Nullable private Integer recordingMonth;

File: library/common/src/main/java/com/google/android/exoplayer2/PercentageRating.java
Patch:
@@ -76,7 +76,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_PERCENTAGE;
+  private static final @RatingType int TYPE = RATING_TYPE_PERCENTAGE;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -686,8 +686,7 @@ final class Commands implements Bundleable {
     /** A builder for {@link Commands} instances. */
     public static final class Builder {
 
-      @Command
-      private static final int[] SUPPORTED_COMMANDS = {
+      private static final @Command int[] SUPPORTED_COMMANDS = {
         COMMAND_PLAY_PAUSE,
         COMMAND_PREPARE,
         COMMAND_STOP,

File: library/common/src/main/java/com/google/android/exoplayer2/StarRating.java
Patch:
@@ -102,7 +102,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_STAR;
+  private static final @RatingType int TYPE = RATING_TYPE_STAR;
   private static final int MAX_STARS_DEFAULT = 5;
 
   @Documented

File: library/common/src/main/java/com/google/android/exoplayer2/ThumbRating.java
Patch:
@@ -75,7 +75,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_THUMB;
+  private static final @RatingType int TYPE = RATING_TYPE_THUMB;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: library/common/src/main/java/com/google/android/exoplayer2/drm/DrmInitData.java
Patch:
@@ -51,7 +51,8 @@ public final class DrmInitData implements Comparator<SchemeData>, Parcelable {
    * @param mediaData DRM session acquisition data obtained from the media.
    * @return A {@link DrmInitData} obtained from merging a media manifest and a media stream.
    */
-  public static @Nullable DrmInitData createSessionCreationData(
+  @Nullable
+  public static DrmInitData createSessionCreationData(
       @Nullable DrmInitData manifestData, @Nullable DrmInitData mediaData) {
     ArrayList<SchemeData> result = new ArrayList<>();
     String schemeType = null;

File: library/common/src/main/java/com/google/android/exoplayer2/source/TrackGroup.java
Patch:
@@ -204,8 +204,7 @@ private static String normalizeLanguage(@Nullable String language) {
     return language == null || language.equals(C.LANGUAGE_UNDETERMINED) ? "" : language;
   }
 
-  @C.RoleFlags
-  private static int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
+  private static @C.RoleFlags int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
     // Treat trick-play and non-trick-play formats as compatible.
     return roleFlags | C.ROLE_FLAG_TRICK_PLAY;
   }

File: library/common/src/main/java/com/google/android/exoplayer2/source/ads/AdPlaybackState.java
Patch:
@@ -68,7 +68,7 @@ public static final class AdGroup implements Bundleable {
     /** The URI of each ad in the ad group. */
     public final @NullableType Uri[] uris;
     /** The state of each ad in the ad group. */
-    @AdState public final int[] states;
+    public final @AdState int[] states;
     /** The durations of each ad in the ad group, in microseconds. */
     public final long[] durationsUs;
     /**

File: library/common/src/main/java/com/google/android/exoplayer2/text/span/RubySpan.java
Patch:
@@ -36,7 +36,7 @@ public final class RubySpan implements LanguageFeatureSpan {
   public final String rubyText;
 
   /** The position of the ruby text relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public RubySpan(String rubyText, @TextAnnotation.Position int position) {
     this.rubyText = rubyText;

File: library/common/src/main/java/com/google/android/exoplayer2/text/span/TextEmphasisSpan.java
Patch:
@@ -81,13 +81,13 @@ public final class TextEmphasisSpan implements LanguageFeatureSpan {
   public static final int MARK_FILL_OPEN = 2;
 
   /** The mark shape used for text emphasis. */
-  @MarkShape public int markShape;
+  public @MarkShape int markShape;
 
   /** The mark fill for the text emphasis mark. */
-  @MarkShape public int markFill;
+  public @MarkShape int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public TextEmphasisSpan(
       @MarkShape int shape, @MarkFill int fill, @TextAnnotation.Position int position) {

File: library/core/src/androidTest/java/com/google/android/exoplayer2/StreamVolumeManagerTest.java
Patch:
@@ -272,7 +272,7 @@ public void onStreamVolumeChanged_isCalled_whenAudioManagerChangesIt() throws Ex
 
   private static class TestListener implements StreamVolumeManager.Listener {
 
-    @C.StreamType private int lastStreamType;
+    private @C.StreamType int lastStreamType;
     private int lastStreamVolume;
     private boolean lastStreamVolumeMuted;
     public final CountDownLatch onStreamVolumeChangedLatch;

File: library/core/src/main/java/com/google/android/exoplayer2/DefaultRenderersFactory.java
Patch:
@@ -93,7 +93,7 @@ public class DefaultRenderersFactory implements RenderersFactory {
 
   private final Context context;
   private final DefaultMediaCodecAdapterFactory codecAdapterFactory;
-  @ExtensionRendererMode private int extensionRendererMode;
+  private @ExtensionRendererMode int extensionRendererMode;
   private long allowedVideoJoiningTimeMs;
   private boolean enableDecoderFallback;
   private MediaCodecSelector mediaCodecSelector;

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlaybackException.java
Patch:
@@ -80,7 +80,7 @@ public final class ExoPlaybackException extends PlaybackException {
   public static final int TYPE_REMOTE = 3;
 
   /** The {@link Type} of the playback failure. */
-  @Type public final int type;
+  public final @Type int type;
 
   /** If {@link #type} is {@link #TYPE_RENDERER}, this is the name of the renderer. */
   @Nullable public final String rendererName;
@@ -99,7 +99,7 @@ public final class ExoPlaybackException extends PlaybackException {
    * renderer for {@link #rendererFormat}. If {@link #rendererFormat} is null, this is {@link
    * C#FORMAT_HANDLED}.
    */
-  @FormatSupport public final int rendererFormatSupport;
+  public final @FormatSupport int rendererFormatSupport;
 
   /** The {@link MediaPeriodId} of the media associated with this error, or null if undetermined. */
   @Nullable public final MediaPeriodId mediaPeriodId;

File: library/core/src/main/java/com/google/android/exoplayer2/ExoTimeoutException.java
Patch:
@@ -59,7 +59,7 @@ public final class ExoTimeoutException extends RuntimeException {
   public static final int TIMEOUT_OPERATION_DETACH_SURFACE = 3;
 
   /** The operation on the ExoPlayer playback thread that timed out. */
-  @TimeoutOperation public final int timeoutOperation;
+  public final @TimeoutOperation int timeoutOperation;
 
   /**
    * Creates the timeout exception.

File: library/core/src/main/java/com/google/android/exoplayer2/PlaybackInfo.java
Patch:
@@ -51,7 +51,7 @@
   /** The start position after a reported position discontinuity, in microseconds. */
   public final long discontinuityStartPositionUs;
   /** The current playback state. One of the {@link Player}.STATE_ constants. */
-  @Player.State public final int playbackState;
+  public final @Player.State int playbackState;
   /** The current playback error, or null if this is not an error state. */
   @Nullable public final ExoPlaybackException playbackError;
   /** Whether the player is currently loading. */
@@ -67,7 +67,7 @@
   /** Whether playback should proceed when {@link #playbackState} == {@link Player#STATE_READY}. */
   public final boolean playWhenReady;
   /** Reason why playback is suppressed even though {@link #playWhenReady} is {@code true}. */
-  @PlaybackSuppressionReason public final int playbackSuppressionReason;
+  public final @PlaybackSuppressionReason int playbackSuppressionReason;
   /** The playback parameters. */
   public final PlaybackParameters playbackParameters;
   /** Whether offload scheduling is enabled for the main player loop. */

File: library/core/src/main/java/com/google/android/exoplayer2/StreamVolumeManager.java
Patch:
@@ -54,7 +54,7 @@ public interface Listener {
   private final AudioManager audioManager;
 
   @Nullable private VolumeChangeReceiver receiver;
-  @C.StreamType private int streamType;
+  private @C.StreamType int streamType;
   private int volume;
   private boolean muted;
 

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsListener.java
Patch:
@@ -148,8 +148,7 @@ public int size() {
      * @param index The index. Must be between 0 (inclusive) and {@link #size()} (exclusive).
      * @return The {@link EventFlags event} at the given index.
      */
-    @EventFlags
-    public int get(int index) {
+    public @EventFlags int get(int index) {
       return flags.get(index);
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/MediaMetricsListener.java
Patch:
@@ -118,7 +118,7 @@ public static MediaMetricsListener create(Context context) {
 
   @Nullable private String activeSessionId;
   @Nullable private PlaybackMetrics.Builder metricsBuilder;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int currentPlaybackState;
   private int currentNetworkType;
   @Nullable private PlaybackException pendingPlayerError;
@@ -885,7 +885,7 @@ public ErrorInfo(int errorCode, int subErrorCode) {
   private static final class PendingFormatUpdate {
 
     public final Format format;
-    @C.SelectionReason public final int selectionReason;
+    public final @C.SelectionReason int selectionReason;
     public final String sessionId;
 
     public PendingFormatUpdate(

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/PlaybackStatsListener.java
Patch:
@@ -82,7 +82,7 @@ public interface Callback {
 
   @Nullable private String discontinuityFromSession;
   private long discontinuityFromPositionMs;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int droppedFrames;
   @Nullable private Exception nonFatalException;
   private long bandwidthTimeMs;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioProcessor.java
Patch:
@@ -43,7 +43,7 @@ final class AudioFormat {
     /** The number of interleaved channels. */
     public final int channelCount;
     /** The type of linear PCM encoding. */
-    @C.PcmEncoding public final int encoding;
+    public final @C.PcmEncoding int encoding;
     /** The number of bytes used to represent one audio frame. */
     public final int bytesPerFrame;
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/ForwardingAudioSink.java
Patch:
@@ -46,8 +46,7 @@ public boolean supportsFormat(Format format) {
   }
 
   @Override
-  @SinkFormatSupport
-  public int getFormatSupport(Format format) {
+  public @SinkFormatSupport int getFormatSupport(Format format) {
     return sink.getFormatSupport(format);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
Patch:
@@ -282,8 +282,7 @@ public void experimentalSetEnableKeepAudioTrackOnSeek(boolean enableKeepAudioTra
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     if (!MimeTypes.isAudio(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: library/core/src/main/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessor.java
Patch:
@@ -86,7 +86,7 @@ public final class SilenceSkippingAudioProcessor extends BaseAudioProcessor {
    */
   private byte[] paddingBuffer;
 
-  @State private int state;
+  private @State int state;
   private int maybeSilenceBufferSize;
   private int paddingSize;
   private boolean hasOutputNoise;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/SpatializerDelegate.java
Patch:
@@ -129,8 +129,7 @@ public boolean isAvailable() {
   }
 
   /** Delegates to Spatializer.getImmersiveAudioLevel() */
-  @ImmersiveAudioLevel
-  public int getImmersiveAudioLevel() {
+  public @ImmersiveAudioLevel int getImmersiveAudioLevel() {
     try {
       return (int) Util.castNonNull(getImmersiveAudioLevel.invoke(spatializer));
     } catch (IllegalAccessException | InvocationTargetException e) {

File: library/core/src/main/java/com/google/android/exoplayer2/audio/TeeAudioProcessor.java
Patch:
@@ -125,7 +125,7 @@ public static final class WavFileAudioBufferSink implements AudioBufferSink {
 
     private int sampleRateHz;
     private int channelCount;
-    @C.PcmEncoding private int encoding;
+    private @C.PcmEncoding int encoding;
     @Nullable private RandomAccessFile randomAccessFile;
     private int counter;
     private int bytesWritten;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/TrimmingAudioProcessor.java
Patch:
@@ -25,7 +25,7 @@
 /** Audio processor for trimming samples from the start/end of data. */
 /* package */ final class TrimmingAudioProcessor extends BaseAudioProcessor {
 
-  @C.PcmEncoding private static final int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
 
   private int trimStartFrames;
   private int trimEndFrames;

File: library/core/src/main/java/com/google/android/exoplayer2/decoder/DecoderReuseEvaluation.java
Patch:
@@ -123,13 +123,13 @@ public final class DecoderReuseEvaluation {
   public final Format newFormat;
 
   /** The {@link DecoderReuseResult result} of the evaluation. */
-  @DecoderReuseResult public final int result;
+  public final @DecoderReuseResult int result;
 
   /**
    * {@link DecoderDiscardReasons Reasons} why the decoder cannot be reused. Always {@code 0} if
    * reuse is possible. May also be {code 0} if reuse is not possible for an unspecified reason.
    */
-  @DecoderDiscardReasons public final int discardReasons;
+  public final @DecoderDiscardReasons int discardReasons;
 
   /**
    * @param decoderName The name of the decoder.

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSession.java
Patch:
@@ -254,8 +254,7 @@ public void onProvisionError(Exception error, boolean thrownByExoMediaDrm) {
   // DrmSession implementation.
 
   @Override
-  @DrmSession.State
-  public final int getState() {
+  public final @DrmSession.State int getState() {
     return state;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
Patch:
@@ -309,7 +309,7 @@ private MissingSchemeDataException(UUID uuid) {
   @Nullable private byte[] offlineLicenseKeySetId;
   private @MonotonicNonNull PlayerId playerId;
 
-  /* package */ volatile @Nullable MediaDrmHandler mediaDrmHandler;
+  /* package */ @Nullable volatile MediaDrmHandler mediaDrmHandler;
 
   /**
    * @param uuid The UUID of the drm scheme.
@@ -587,8 +587,7 @@ private DrmSession acquireSession(
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType(Format format) {
+  public @C.CryptoType int getCryptoType(Format format) {
     @C.CryptoType int cryptoType = checkNotNull(exoMediaDrm).getCryptoType();
     if (format.drmInitData == null) {
       int trackType = MimeTypes.getTrackType(format.sampleMimeType);

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DrmSession.java
Patch:
@@ -63,7 +63,7 @@ static void replaceSession(
   class DrmSessionException extends IOException {
 
     /** The {@link PlaybackException.ErrorCode} that corresponds to the failure. */
-    @PlaybackException.ErrorCode public final int errorCode;
+    public final @PlaybackException.ErrorCode int errorCode;
 
     public DrmSessionException(Throwable cause, @PlaybackException.ErrorCode int errorCode) {
       super(cause);

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DrmSessionManager.java
Patch:
@@ -64,8 +64,7 @@ public DrmSession acquireSession(
         }
 
         @Override
-        @C.CryptoType
-        public int getCryptoType(Format format) {
+        public @C.CryptoType int getCryptoType(Format format) {
           return format.drmInitData != null ? C.CRYPTO_TYPE_UNSUPPORTED : C.CRYPTO_TYPE_NONE;
         }
       };

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DummyExoMediaDrm.java
Patch:
@@ -150,8 +150,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) {
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_UNSUPPORTED;
   }
 }

File: library/core/src/main/java/com/google/android/exoplayer2/drm/ExoMediaDrm.java
Patch:
@@ -265,7 +265,7 @@ final class KeyRequest {
 
     private final byte[] data;
     private final String licenseServerUrl;
-    @RequestType private final int requestType;
+    private final @RequestType int requestType;
 
     /**
      * Creates an instance with {@link #REQUEST_TYPE_UNKNOWN}.
@@ -305,8 +305,7 @@ public String getLicenseServerUrl() {
      * request does not specify a type. Note that when using a platform {@link MediaDrm} instance,
      * key requests only specify a type on API levels 23 and above.
      */
-    @RequestType
-    public int getRequestType() {
+    public @RequestType int getRequestType() {
       return requestType;
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/drm/FrameworkMediaDrm.java
Patch:
@@ -339,8 +339,7 @@ public FrameworkCryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCr
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_FRAMEWORK;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/drm/UnsupportedDrmException.java
Patch:
@@ -47,7 +47,7 @@ public final class UnsupportedDrmException extends Exception {
   public static final int REASON_INSTANTIATION_ERROR = 2;
 
   /** Either {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
-  @Reason public final int reason;
+  public final @Reason int reason;
 
   /** @param reason {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
   public UnsupportedDrmException(@Reason int reason) {

File: library/core/src/main/java/com/google/android/exoplayer2/drm/WidevineUtil.java
Patch:
@@ -37,7 +37,8 @@ private WidevineUtil() {}
    * @return A {@link Pair} consisting of the remaining license and playback durations in seconds,
    *     or null if called before the session has been opened or after it's been released.
    */
-  public static @Nullable Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
+  @Nullable
+  public static Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
     Map<String, String> keyStatus = drmSession.queryKeyStatus();
     if (keyStatus == null) {
       return null;

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -141,7 +141,7 @@ public AsynchronousMediaCodecAdapter createAdapter(Configuration configuration)
   private final boolean synchronizeCodecInteractionsWithQueueing;
   private final boolean enableImmediateCodecStartAfterFlush;
   private boolean codecReleased;
-  @State private int state;
+  private @State int state;
 
   private AsynchronousMediaCodecAdapter(
       MediaCodec codec,

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/DefaultMediaCodecAdapterFactory.java
Patch:
@@ -51,7 +51,7 @@ public final class DefaultMediaCodecAdapterFactory implements MediaCodecAdapter.
 
   private static final String TAG = "DMCodecAdapterFactory";
 
-  @Mode private int asynchronousMode;
+  private @Mode int asynchronousMode;
   private boolean enableSynchronizeCodecInteractionsWithQueueing;
   private boolean enableImmediateCodecStartAfterFlush;
 

File: library/core/src/main/java/com/google/android/exoplayer2/metadata/MetadataRenderer.java
Patch:
@@ -89,8 +89,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: library/core/src/main/java/com/google/android/exoplayer2/offline/Download.java
Patch:
@@ -97,7 +97,7 @@ public final class Download {
   /** The download request. */
   public final DownloadRequest request;
   /** The state of the download. */
-  @State public final int state;
+  public final @State int state;
   /** The first time when download entry is created. */
   public final long startTimeMs;
   /** The last update time. */
@@ -110,7 +110,7 @@ public final class Download {
    * If {@link #state} is {@link #STATE_FAILED} then this is the cause, otherwise {@link
    * #FAILURE_REASON_NONE}.
    */
-  @FailureReason public final int failureReason;
+  public final @FailureReason int failureReason;
 
   /* package */ final DownloadProgress progress;
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -1097,8 +1097,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    @C.SelectionReason
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
Patch:
@@ -349,8 +349,7 @@ public Requirements getRequirements() {
    *
    * @return The not met {@link Requirements.RequirementFlags}, or 0 if all requirements are met.
    */
-  @Requirements.RequirementFlags
-  public int getNotMetRequirements() {
+  public @Requirements.RequirementFlags int getNotMetRequirements() {
     return notMetRequirements;
   }
 
@@ -703,7 +702,7 @@ private static final class InternalHandler extends Handler {
     private final ArrayList<Download> downloads;
     private final HashMap<String, Task> activeTasks;
 
-    @Requirements.RequirementFlags private int notMetRequirements;
+    private @Requirements.RequirementFlags int notMetRequirements;
     private boolean downloadsPaused;
     private int maxParallelDownloads;
     private int minRetryCount;

File: library/core/src/main/java/com/google/android/exoplayer2/scheduler/RequirementsWatcher.java
Patch:
@@ -60,7 +60,7 @@ void onRequirementsStateChanged(
 
   @Nullable private DeviceStatusChangeReceiver receiver;
 
-  @Requirements.RequirementFlags private int notMetRequirements;
+  private @Requirements.RequirementFlags int notMetRequirements;
   @Nullable private NetworkCallback networkCallback;
 
   /**
@@ -81,8 +81,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
    *
    * @return Initial {@link Requirements.RequirementFlags RequirementFlags} that are not met, or 0.
    */
-  @Requirements.RequirementFlags
-  public int start() {
+  public @Requirements.RequirementFlags int start() {
     notMetRequirements = requirements.getNotMetRequirements(context);
 
     IntentFilter filter = new IntentFilter();

File: library/core/src/main/java/com/google/android/exoplayer2/source/ClippingMediaSource.java
Patch:
@@ -61,7 +61,7 @@ public static final class IllegalClippingException extends IOException {
     public static final int REASON_START_EXCEEDS_END = 2;
 
     /** The reason clipping failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason clipping failed. */
     public IllegalClippingException(@Reason int reason) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactory.java
Patch:
@@ -456,8 +456,7 @@ public DelegateFactoryLoader(
       mediaSourceFactories = new HashMap<>();
     }
 
-    @C.ContentType
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       ensureAllSuppliersAreLoaded();
       return Ints.toArray(supportedTypes);
     }

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaLoadData.java
Patch:
@@ -26,7 +26,7 @@
 public final class MediaLoadData {
 
   /** The {@link DataType data type}. */
-  @DataType public final int dataType;
+  public final @DataType int dataType;
   /**
    * One of the {@link TrackType track types}, which is a media track type if the data corresponds
    * to media of a specific type, or {@link C#TRACK_TYPE_UNKNOWN} otherwise.

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaSourceFactory.java
Patch:
@@ -44,8 +44,7 @@ public MediaSourceFactory setLoadErrorHandlingPolicy(
         }
 
         @Override
-        @C.ContentType
-        public int[] getSupportedTypes() {
+        public @C.ContentType int[] getSupportedTypes() {
           throw new UnsupportedOperationException();
         }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/MergingMediaSource.java
Patch:
@@ -59,7 +59,7 @@ public static final class IllegalMergeException extends IOException {
     public static final int REASON_PERIOD_COUNT_MISMATCH = 0;
 
     /** The reason the merge failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason the merge failed. */
     public IllegalMergeException(@Reason int reason) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaPeriod.java
Patch:
@@ -129,7 +129,7 @@ interface Listener {
   private @MonotonicNonNull SeekMap seekMap;
   private long durationUs;
   private boolean isLive;
-  @DataType private int dataType;
+  private @DataType int dataType;
 
   private boolean seenFirstTrackSelection;
   private boolean notifyDiscontinuity;

File: library/core/src/main/java/com/google/android/exoplayer2/source/SilenceMediaSource.java
Patch:
@@ -83,7 +83,7 @@ public SilenceMediaSource createMediaSource() {
   public static final String MEDIA_ID = "SilenceMediaSource";
 
   private static final int SAMPLE_RATE_HZ = 44100;
-  @C.PcmEncoding private static final int PCM_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int PCM_ENCODING = C.ENCODING_PCM_16BIT;
   private static final int CHANNEL_COUNT = 2;
   private static final Format FORMAT =
       new Format.Builder()

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/Chunk.java
Patch:
@@ -40,15 +40,15 @@ public abstract class Chunk implements Loadable {
   /** The {@link DataSpec} that defines the data to be loaded. */
   public final DataSpec dataSpec;
   /** The {@link DataType data type} of the chunk. For reporting only. */
-  @DataType public final int type;
+  public final @DataType int type;
   /** The format of the track to which this chunk belongs. */
   public final Format trackFormat;
   /**
    * One of the {@link C.SelectionReason selection reasons} if the chunk belongs to a track. {@link
    * C#SELECTION_REASON_UNKNOWN} if the chunk does not belong to a track, or if the selection reason
    * is unknown.
    */
-  @C.SelectionReason public final int trackSelectionReason;
+  public final @C.SelectionReason int trackSelectionReason;
   /**
    * Optional data associated with the selection of the track to which this chunk belongs. Null if
    * the chunk does not belong to a track, or if there is no associated track selection data.

File: library/core/src/main/java/com/google/android/exoplayer2/source/mediaparser/OutputConsumerAdapterV30.java
Patch:
@@ -538,8 +538,7 @@ private static DrmInitData toExoPlayerDrmInitData(
     return new DrmInitData(schemeType, schemeDatas);
   }
 
-  @SelectionFlags
-  private static int getSelectionFlags(MediaFormat mediaFormat) {
+  private static @SelectionFlags int getSelectionFlags(MediaFormat mediaFormat) {
     int selectionFlags = 0;
     selectionFlags |=
         getFlag(

File: library/core/src/main/java/com/google/android/exoplayer2/text/ExoplayerCuesDecoder.java
Patch:
@@ -54,7 +54,7 @@ public final class ExoplayerCuesDecoder implements SubtitleDecoder {
   private final SubtitleInputBuffer inputBuffer;
   private final Deque<SubtitleOutputBuffer> availableOutputBuffers;
 
-  @InputBufferState private int inputBufferState;
+  private @InputBufferState int inputBufferState;
   private boolean released;
 
   public ExoplayerCuesDecoder() {

File: library/core/src/main/java/com/google/android/exoplayer2/text/TextRenderer.java
Patch:
@@ -86,7 +86,7 @@ public final class TextRenderer extends BaseRenderer implements Callback {
   private boolean inputStreamEnded;
   private boolean outputStreamEnded;
   private boolean waitingForKeyFrame;
-  @ReplacementState private int decoderReplacementState;
+  private @ReplacementState int decoderReplacementState;
   @Nullable private Format streamFormat;
   @Nullable private SubtitleDecoder decoder;
   @Nullable private SubtitleInputBuffer nextInputBuffer;
@@ -133,8 +133,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeter.java
Patch:
@@ -276,14 +276,14 @@ public static synchronized DefaultBandwidthMeter getSingletonInstance(Context co
   private long sampleStartTimeMs;
   private long sampleBytesTransferred;
 
-  @C.NetworkType private int networkType;
+  private @C.NetworkType int networkType;
   private long totalElapsedTimeMs;
   private long totalBytesTransferred;
   private long bitrateEstimate;
   private long lastReportedBitrateEstimate;
 
   private boolean networkTypeOverrideSet;
-  @C.NetworkType private int networkTypeOverride;
+  private @C.NetworkType int networkTypeOverride;
 
   /** @deprecated Use {@link Builder} instead. */
   @Deprecated

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/LoadErrorHandlingPolicy.java
Patch:
@@ -128,7 +128,7 @@ public boolean isFallbackAvailable(@FallbackType int type) {
   /** A selected fallback option. */
   final class FallbackSelection {
     /** The type of fallback. */
-    @FallbackType public final int type;
+    public final @FallbackType int type;
     /** The duration for which the failing resource should be excluded, in milliseconds. */
     public final long exclusionDurationMs;
 

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/ParsingLoadable.java
Patch:
@@ -98,7 +98,7 @@ public static <T> T load(
   private final StatsDataSource dataSource;
   private final Parser<? extends T> parser;
 
-  private volatile @Nullable T result;
+  @Nullable private volatile T result;
 
   /**
    * @param dataSource A {@link DataSource} to use when loading the data.

File: library/core/src/main/java/com/google/android/exoplayer2/video/DecoderVideoRenderer.java
Patch:
@@ -118,7 +118,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
 
   private DecoderInputBuffer inputBuffer;
   private VideoDecoderOutputBuffer outputBuffer;
-  @VideoOutputMode private int outputMode;
+  private @VideoOutputMode int outputMode;
   @Nullable private Object output;
   @Nullable private Surface outputSurface;
   @Nullable private VideoDecoderOutputBufferRenderer outputBufferRenderer;
@@ -127,7 +127,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
   @Nullable private DrmSession decoderDrmSession;
   @Nullable private DrmSession sourceDrmSession;
 
-  @ReinitializationState private int decoderReinitializationState;
+  private @ReinitializationState int decoderReinitializationState;
   private boolean decoderReceivedBuffers;
 
   private boolean renderedFirstFrameAfterReset;

File: library/core/src/main/java/com/google/android/exoplayer2/video/DummySurface.java
Patch:
@@ -103,8 +103,7 @@ public void release() {
     }
   }
 
-  @SecureMode
-  private static int getSecureMode(Context context) {
+  private static @SecureMode int getSecureMode(Context context) {
     if (GlUtil.isProtectedContentExtensionSupported(context)) {
       if (GlUtil.isSurfacelessContextExtensionSupported()) {
         return SECURE_MODE_SURFACELESS_CONTEXT;

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -128,7 +128,7 @@ public class MediaCodecVideoRenderer extends MediaCodecRenderer {
   @Nullable private Surface surface;
   @Nullable private DummySurface dummySurface;
   private boolean haveReportedFirstFrameRenderedForCurrentSurface;
-  @C.VideoScalingMode private int scalingMode;
+  private @C.VideoScalingMode int scalingMode;
   private boolean renderedFirstFrameAfterReset;
   private boolean mayRenderFirstFrameAfterEnableIfNotStarted;
   private boolean renderedFirstFrameAfterEnable;
@@ -339,8 +339,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     String mimeType = format.sampleMimeType;
     if (!MimeTypes.isVideo(mimeType)) {

File: library/core/src/main/java/com/google/android/exoplayer2/video/VideoFrameReleaseHelper.java
Patch:
@@ -109,7 +109,7 @@ public final class VideoFrameReleaseHelper {
   private float surfacePlaybackFrameRate;
 
   private float playbackSpeed;
-  @C.VideoChangeFrameRateStrategy private int changeFrameRateStrategy;
+  private @C.VideoChangeFrameRateStrategy int changeFrameRateStrategy;
 
   private long vsyncDurationNs;
   private long vsyncOffsetNs;

File: library/core/src/main/java/com/google/android/exoplayer2/video/spherical/CameraMotionRenderer.java
Patch:
@@ -56,8 +56,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     return MimeTypes.APPLICATION_CAMERA_MOTION.equals(format.sampleMimeType)
         ? RendererCapabilities.create(C.FORMAT_HANDLED)
         : RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: library/core/src/main/java/com/google/android/exoplayer2/video/spherical/SceneRenderer.java
Patch:
@@ -50,8 +50,8 @@
   private @MonotonicNonNull SurfaceTexture surfaceTexture;
 
   // Used by other threads only
-  @C.StereoMode private volatile int defaultStereoMode;
-  @C.StereoMode private int lastStereoMode;
+  private volatile @C.StereoMode int defaultStereoMode;
+  private @C.StereoMode int lastStereoMode;
   @Nullable private byte[] lastProjectionData;
 
   // Methods called on any thread.

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -11478,7 +11478,7 @@ public void handleMessage(ExoPlayer player, int messageType, @Nullable Object me
   private static final class PlayerStateGrabber extends PlayerRunnable {
 
     public boolean playWhenReady;
-    @Player.State public int playbackState;
+    public @Player.State int playbackState;
     @Nullable public Timeline timeline;
 
     @Override

File: library/core/src/test/java/com/google/android/exoplayer2/audio/DecoderAudioRendererTest.java
Patch:
@@ -71,8 +71,7 @@ public String getName() {
           }
 
           @Override
-          @C.FormatSupport
-          protected int supportsFormatInternal(Format format) {
+          protected @C.FormatSupport int supportsFormatInternal(Format format) {
             return FORMAT_HANDLED;
           }
 

File: library/core/src/test/java/com/google/android/exoplayer2/video/DecoderVideoRendererTest.java
Patch:
@@ -84,16 +84,15 @@ public void setUp() {
             /* maxDroppedFramesToNotify= */ -1) {
 
           private final Phaser inputBuffersInCodecPhaser = new Phaser();
-          @C.VideoOutputMode private int outputMode;
+          private @C.VideoOutputMode int outputMode;
 
           @Override
           public String getName() {
             return "TestVideoRenderer";
           }
 
           @Override
-          @Capabilities
-          public int supportsFormat(Format format) {
+          public @Capabilities int supportsFormat(Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: library/core/src/test/java/com/google/android/exoplayer2/video/MediaCodecVideoRendererTest.java
Patch:
@@ -110,8 +110,8 @@ public void setUp() throws Exception {
             /* eventListener= */ eventListener,
             /* maxDroppedFramesToNotify= */ 1) {
           @Override
-          @Capabilities
-          protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format) {
+          protected @Capabilities int supportsFormat(
+              MediaCodecSelector mediaCodecSelector, Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaPeriod.java
Patch:
@@ -937,7 +937,7 @@ private static final class TrackGroupInfo {
 
     public final int[] adaptationSetIndices;
     public final @C.TrackType int trackType;
-    @TrackGroupCategory public final int trackGroupCategory;
+    public final @TrackGroupCategory int trackGroupCategory;
 
     public final int eventStreamGroupIndex;
     public final int primaryTrackGroupIndex;

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/DataSourceException.java
Patch:
@@ -55,7 +55,7 @@ public static boolean isCausedByPositionOutOfRange(IOException e) {
    * The reason of this {@link DataSourceException}, should be one of the {@code ERROR_CODE_IO_*} in
    * {@link PlaybackException.ErrorCode}.
    */
-  @PlaybackException.ErrorCode public final int reason;
+  public final @PlaybackException.ErrorCode int reason;
 
   /**
    * Constructs a DataSourceException.

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java
Patch:
@@ -231,7 +231,7 @@ public static HttpDataSourceException createForIOException(
     /** The {@link DataSpec} associated with the current connection. */
     public final DataSpec dataSpec;
 
-    @Type public final int type;
+    public final @Type int type;
 
     /**
      * @deprecated Use {@link #HttpDataSourceException(DataSpec, int, int)
@@ -347,8 +347,8 @@ public HttpDataSourceException(
       this.type = type;
     }
 
-    @PlaybackException.ErrorCode
-    private static int assignErrorCode(@PlaybackException.ErrorCode int errorCode, @Type int type) {
+    private static @PlaybackException.ErrorCode int assignErrorCode(
+        @PlaybackException.ErrorCode int errorCode, @Type int type) {
       return errorCode == PlaybackException.ERROR_CODE_IO_UNSPECIFIED && type == TYPE_OPEN
           ? PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED
           : errorCode;

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
Patch:
@@ -70,7 +70,7 @@ public static final class Factory implements DataSource.Factory {
     @Nullable private DataSource.Factory upstreamDataSourceFactory;
     @Nullable private PriorityTaskManager upstreamPriorityTaskManager;
     private int upstreamPriority;
-    @CacheDataSource.Flags private int flags;
+    private @CacheDataSource.Flags int flags;
     @Nullable private CacheDataSource.EventListener eventListener;
 
     public Factory() {

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/Buffer.java
Patch:
@@ -20,7 +20,7 @@
 /** Base class for buffers with flags. */
 public abstract class Buffer {
 
-  @C.BufferFlags private int flags;
+  private @C.BufferFlags int flags;
 
   /** Clears the buffer. */
   public void clear() {

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/CryptoInfo.java
Patch:
@@ -46,7 +46,7 @@ public final class CryptoInfo {
    *
    * @see android.media.MediaCodec.CryptoInfo#mode
    */
-  @C.CryptoMode public int mode;
+  public @C.CryptoMode int mode;
   /**
    * The number of leading unencrypted bytes in each sub-sample. If null, all bytes are treated as
    * encrypted and {@link #numBytesOfEncryptedData} must be specified.

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/DecoderInputBuffer.java
Patch:
@@ -109,7 +109,7 @@ public InsufficientCapacityException(int currentCapacity, int requiredCapacity)
    */
   @Nullable public ByteBuffer supplementalData;
 
-  @BufferReplacementMode private final int bufferReplacementMode;
+  private final @BufferReplacementMode int bufferReplacementMode;
   private final int paddingSize;
 
   /** Returns a new instance that's not able to hold any data. */

File: library/decoder/src/main/java/com/google/android/exoplayer2/decoder/VideoDecoderOutputBuffer.java
Patch:
@@ -32,7 +32,7 @@ public class VideoDecoderOutputBuffer extends DecoderOutputBuffer {
   public int decoderPrivate;
 
   /** Output mode. */
-  @C.VideoOutputMode public int mode;
+  public @C.VideoOutputMode int mode;
   /** RGB buffer for RGB mode. */
   @Nullable public ByteBuffer data;
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/BinarySearchSeeker.java
Patch:
@@ -421,7 +421,7 @@ public static final class TimestampSearchResult {
         new TimestampSearchResult(TYPE_NO_TIMESTAMP, C.TIME_UNSET, C.POSITION_UNSET);
 
     /** The type of the result. */
-    @Type private final int type;
+    private final @Type int type;
 
     /**
      * When {@link #type} is {@link #TYPE_POSITION_OVERESTIMATED}, the {@link

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/TrackOutput.java
Patch:
@@ -38,7 +38,7 @@ public interface TrackOutput {
   final class CryptoData {
 
     /** The encryption mode used for the sample. */
-    @C.CryptoMode public final int cryptoMode;
+    public final @C.CryptoMode int cryptoMode;
 
     /** The encryption key associated with the sample. Its contents must not be modified. */
     public final byte[] encryptionKey;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/TrueHdSampleRechunker.java
Patch:
@@ -32,7 +32,7 @@ public final class TrueHdSampleRechunker {
   private boolean foundSyncframe;
   private int chunkSampleCount;
   private long chunkTimeUs;
-  @C.BufferFlags private int chunkFlags;
+  private @C.BufferFlags int chunkFlags;
   private int chunkSize;
   private int chunkOffset;
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/jpeg/JpegExtractor.java
Patch:
@@ -82,7 +82,7 @@ public final class JpegExtractor implements Extractor {
 
   private @MonotonicNonNull ExtractorOutput extractorOutput;
 
-  @State private int state;
+  private @State int state;
   private int marker;
   private int segmentLength;
   private long mp4StartPosition;
@@ -126,8 +126,8 @@ public void init(ExtractorOutput output) {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     switch (state) {
       case STATE_READING_MARKER:
         readMarker(input);

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp3/Mp3Extractor.java
Patch:
@@ -140,7 +140,7 @@ public final class Mp3Extractor implements Extractor {
   private static final int SEEK_HEADER_VBRI = 0x56425249;
   private static final int SEEK_HEADER_UNSET = 0;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final long forcedFirstSampleTimestampUs;
   private final ParsableByteArray scratch;
   private final MpegAudioUtil.Header synchronizedHeader;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -1910,7 +1910,7 @@ private static final class StsdData {
 
     @Nullable public Format format;
     public int nalUnitLengthFieldLength;
-    @Track.Transformation public int requiredSampleTransformation;
+    public @Track.Transformation int requiredSampleTransformation;
 
     public StsdData(int numberOfEntries) {
       trackEncryptionBoxes = new TrackEncryptionBox[numberOfEntries];

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -130,7 +130,7 @@ public class FragmentedMp4Extractor implements Extractor {
   private static final int STATE_READING_SAMPLE_CONTINUE = 4;
 
   // Workarounds.
-  @Flags private final int flags;
+  private final @Flags int flags;
   @Nullable private final Track sideloadedTrack;
 
   // Sideloaded data.
@@ -1687,8 +1687,7 @@ public int getCurrentSampleSize() {
     }
 
     /** Returns the {@link C.BufferFlags} corresponding to the current sample. */
-    @C.BufferFlags
-    public int getCurrentSampleFlags() {
+    public @C.BufferFlags int getCurrentSampleFlags() {
       int flags =
           !currentlyInFragment
               ? moovSampleTable.flags[currentSampleIndex]

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Track.java
Patch:
@@ -67,7 +67,7 @@ public final class Track {
    * One of {@code TRANSFORMATION_*}. Defines the transformation to apply before outputting each
    * sample.
    */
-  @Transformation public final int sampleTransformation;
+  public final @Transformation int sampleTransformation;
 
   /** Durations of edit list segments in the movie timescale. Null if there is no edit list. */
   @Nullable public final long[] editListDurations;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/TrackEncryptionBox.java
Patch:
@@ -77,8 +77,7 @@ public TrackEncryptionBox(
             schemeToCryptoMode(schemeType), keyId, defaultEncryptedBlocks, defaultClearBlocks);
   }
 
-  @C.CryptoMode
-  private static int schemeToCryptoMode(@Nullable String schemeType) {
+  private static @C.CryptoMode int schemeToCryptoMode(@Nullable String schemeType) {
     if (schemeType == null) {
       // If unknown, assume cenc.
       return C.CRYPTO_MODE_AES_CTR;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac3Reader.java
Patch:
@@ -60,7 +60,7 @@ public final class Ac3Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac4Reader.java
Patch:
@@ -58,7 +58,7 @@ public final class Ac4Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/DefaultTsPayloadReaderFactory.java
Patch:
@@ -102,7 +102,7 @@ public final class DefaultTsPayloadReaderFactory implements TsPayloadReader.Fact
 
   private static final int DESCRIPTOR_TAG_CAPTION_SERVICE = 0x86;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final List<Format> closedCaptionFormats;
 
   public DefaultTsPayloadReaderFactory() {

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/H263Reader.java
Patch:
@@ -333,7 +333,7 @@ private static final class CsdBuffer {
     private static final int STATE_WAIT_FOR_VOP_START = 4;
 
     private boolean isFilling;
-    @State private int state;
+    private @State int state;
 
     public int length;
     public int volStartPosition;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
Patch:
@@ -116,7 +116,7 @@ public final class TsExtractor implements Extractor {
   private static final int BUFFER_SIZE = TS_PACKET_SIZE * 50;
   private static final int SNIFF_TS_PACKET_COUNT = 5;
 
-  @Mode private final int mode;
+  private final @Mode int mode;
   private final int timestampSearchBytes;
   private final List<TimestampAdjuster> timestampAdjusters;
   private final ParsableByteArray tsPacketBuffer;
@@ -296,8 +296,8 @@ public void release() {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     long inputLength = input.getLength();
     if (tracksEnded) {
       boolean canReadDuration = inputLength != C.LENGTH_UNSET && mode != MODE_HLS;

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/SubtitleExtractor.java
Patch:
@@ -84,7 +84,7 @@ public class SubtitleExtractor implements Extractor {
   private @MonotonicNonNull ExtractorOutput extractorOutput;
   private @MonotonicNonNull TrackOutput trackOutput;
   private int bytesRead;
-  @State private int state;
+  private @State int state;
   private long seekTimeUs;
 
   /**

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/ttml/TextEmphasis.java
Patch:
@@ -97,13 +97,13 @@
           TtmlNode.ANNOTATION_POSITION_OUTSIDE);
 
   /** The text emphasis mark shape. */
-  @MarkShape public final int markShape;
+  public final @MarkShape int markShape;
 
   /** The fill style of the text emphasis mark. */
-  @TextEmphasisSpan.MarkFill public final int markFill;
+  public final @TextEmphasisSpan.MarkFill int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @Position public final int position;
+  public final @Position int position;
 
   private TextEmphasis(
       @MarkShape int markShape,

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/mkv/DefaultEbmlReaderTest.java
Patch:
@@ -178,8 +178,7 @@ private static final class TestProcessor implements EbmlProcessor {
     private final List<String> events = new ArrayList<>();
 
     @Override
-    @EbmlProcessor.ElementType
-    public int getElementType(int id) {
+    public @EbmlProcessor.ElementType int getElementType(int id) {
       switch (id) {
         case ID_EBML:
         case ID_SEGMENT:

File: library/extractor/src/test/java/com/google/android/exoplayer2/text/ttml/TtmlStyleTest.java
Patch:
@@ -42,7 +42,7 @@ public final class TtmlStyleTest {
   private static final String FONT_FAMILY = "serif";
   @ColorInt private static final int FONT_COLOR = Color.WHITE;
   private static final float FONT_SIZE = 12.5f;
-  @TtmlStyle.FontSizeUnit private static final int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
+  private static final @TtmlStyle.FontSizeUnit int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
   @ColorInt private static final int BACKGROUND_COLOR = Color.BLACK;
   private static final int RUBY_TYPE = TtmlStyle.RUBY_TYPE_TEXT;
   private static final int RUBY_POSITION = TextAnnotation.POSITION_AFTER;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -60,7 +60,7 @@ public final class DefaultHlsExtractorFactory implements HlsExtractorFactory {
         FileTypes.MP3,
       };
 
-  @DefaultTsPayloadReaderFactory.Flags private final int payloadReaderFactoryFlags;
+  private final @DefaultTsPayloadReaderFactory.Flags int payloadReaderFactoryFlags;
   private final boolean exposeCea608WhenMissingDeclarations;
 
   /**

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
Patch:
@@ -303,8 +303,7 @@ public long getAdjustedSeekPositionUs(long positionUs, SeekParameters seekParame
    *     has been {@link #CHUNK_PUBLICATION_STATE_REMOVED removed} or is definitely {@link
    *     #CHUNK_PUBLICATION_STATE_PUBLISHED published}.
    */
-  @ChunkPublicationState
-  public int getChunkPublicationState(HlsMediaChunk mediaChunk) {
+  public @ChunkPublicationState int getChunkPublicationState(HlsMediaChunk mediaChunk) {
     if (mediaChunk.partIndex == C.INDEX_UNSET) {
       // Chunks based on full segments can't be removed and are always published.
       return CHUNK_PUBLICATION_STATE_PUBLISHED;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylist.java
Patch:
@@ -396,7 +396,7 @@ public RenditionReport(Uri playlistUri, long lastMediaSequence, int lastPartInde
   public static final int PLAYLIST_TYPE_EVENT = 2;
 
   /** The type of the playlist. See {@link PlaylistType}. */
-  @PlaylistType public final int playlistType;
+  public final @PlaylistType int playlistType;
   /**
    * The start offset in microseconds from the beginning of the playlist, as defined by
    * #EXT-X-START, or {@link C#TIME_UNSET} if undefined. The value is guaranteed to be between 0 and

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspAuthenticationInfo.java
Patch:
@@ -54,7 +54,7 @@
   private static final String ALGORITHM = "MD5";
 
   /** The authentication mechanism. */
-  @AuthenticationMechanism public final int authenticationMechanism;
+  public final @AuthenticationMechanism int authenticationMechanism;
   /** The authentication realm. */
   public final String realm;
   /** The nonce used in digest authentication; empty if using {@link #BASIC} authentication. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspClient.java
Patch:
@@ -141,7 +141,7 @@ public interface PlaybackEventListener {
   @Nullable private String sessionId;
   @Nullable private KeepAliveMonitor keepAliveMonitor;
   @Nullable private RtspAuthenticationInfo rtspAuthenticationInfo;
-  @RtspState private int rtspState;
+  private @RtspState int rtspState;
   private boolean hasUpdatedTimelineAndTracks;
   private boolean receivedAuthorizationRequest;
   private boolean hasPendingPauseRequest;
@@ -204,8 +204,7 @@ public void start() throws IOException {
   }
 
   /** Returns the current {@link RtspState RTSP state}. */
-  @RtspState
-  public int getState() {
+  public @RtspState int getState() {
     return rtspState;
   }
 

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMediaPeriod.java
Patch:
@@ -773,8 +773,7 @@ public boolean isSampleQueueReady() {
       return sampleQueue.isReady(/* loadingFinished= */ canceled);
     }
 
-    @ReadDataResult
-    public int read(
+    public @ReadDataResult int read(
         FormatHolder formatHolder, DecoderInputBuffer buffer, @ReadFlags int readFlags) {
       return sampleQueue.read(formatHolder, buffer, readFlags, /* loadingFinished= */ canceled);
     }

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageChannel.java
Patch:
@@ -351,7 +351,7 @@ private static final class MessageParser {
 
     private final List<String> messageLines;
 
-    @ReadingState private int state;
+    private @ReadingState int state;
     private long messageBodyLength;
 
     /** Creates a new instance. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageUtil.java
Patch:
@@ -254,8 +254,7 @@ public static String toMethodString(@RtspRequest.Method int method) {
     }
   }
 
-  @RtspRequest.Method
-  private static int parseMethodString(String method) {
+  private static @RtspRequest.Method int parseMethodString(String method) {
     switch (method) {
       case "ANNOUNCE":
         return METHOD_ANNOUNCE;

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspRequest.java
Patch:
@@ -86,7 +86,7 @@
   /** The {@link Uri} to which this request is sent. */
   public final Uri uri;
   /** The request method, as defined in {@link Method}. */
-  @Method public final int method;
+  public final @Method int method;
   /** The headers of this request. */
   public final RtspHeaders headers;
   /** The body of this RTSP message, or empty string if absent. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpH264Reader.java
Patch:
@@ -58,7 +58,7 @@
   private final RtpPayloadFormat payloadFormat;
 
   private @MonotonicNonNull TrackOutput trackOutput;
-  @C.BufferFlags private int bufferFlags;
+  private @C.BufferFlags int bufferFlags;
 
   private long firstReceivedTimestamp;
   private int previousSequenceNumber;
@@ -296,8 +296,7 @@ private static long toSampleUs(
             /* divisor= */ MEDIA_CLOCK_FREQUENCY);
   }
 
-  @C.BufferFlags
-  private static int getBufferFlagsFromNalType(int nalType) {
+  private static @C.BufferFlags int getBufferFlagsFromNalType(int nalType) {
     return nalType == NAL_UNIT_TYPE_IDR ? C.BUFFER_FLAG_KEY_FRAME : 0;
   }
 }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -540,7 +540,7 @@ public interface DebugViewProvider {
 
   @Nullable private MuxerWrapper muxerWrapper;
   @Nullable private ExoPlayer player;
-  @ProgressState private int progressState;
+  private @ProgressState int progressState;
 
   private Transformer(
       Context context,
@@ -741,8 +741,7 @@ public Looper getApplicationLooper() {
    * @return The {@link ProgressState}.
    * @throws IllegalStateException If this method is called from the wrong thread.
    */
-  @ProgressState
-  public int getProgress(ProgressHolder progressHolder) {
+  public @ProgressState int getProgress(ProgressHolder progressHolder) {
     verifyApplicationThread();
     if (progressState == PROGRESS_STATE_AVAILABLE) {
       Player player = checkNotNull(this.player);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerBaseRenderer.java
Patch:
@@ -67,8 +67,7 @@ public TransformerBaseRenderer(
    * @return The {@link Capabilities} for this format.
    */
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     return RendererCapabilities.create(
         MimeTypes.getTrackType(format.sampleMimeType) == getTrackType()
             ? C.FORMAT_HANDLED

File: robolectricutils/src/main/java/com/google/android/exoplayer2/robolectric/TestDownloadManagerListener.java
Patch:
@@ -42,7 +42,7 @@ public final class TestDownloadManagerListener implements DownloadManager.Listen
   private final ConditionVariable initializedCondition;
   private final ConditionVariable idleCondition;
 
-  @Download.FailureReason private int failureReason;
+  private @Download.FailureReason int failureReason;
 
   public TestDownloadManagerListener(DownloadManager downloadManager) {
     this.downloadManager = downloadManager;

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java
Patch:
@@ -493,7 +493,7 @@ protected void doActionImpl(
   /** Calls {@link Player#setRepeatMode(int)}. */
   public static final class SetRepeatMode extends Action {
 
-    @Player.RepeatMode private final int repeatMode;
+    private final @Player.RepeatMode int repeatMode;
 
     /**
      * @param tag A tag to use for logging.
@@ -740,7 +740,7 @@ public static final class WaitForTimelineChanged extends Action {
 
     @Nullable private final Timeline expectedTimeline;
     private final boolean ignoreExpectedReason;
-    @Player.TimelineChangeReason private final int expectedReason;
+    private final @Player.TimelineChangeReason int expectedReason;
 
     /**
      * Creates action waiting for a timeline change for a given reason.
@@ -907,7 +907,7 @@ protected void doActionImpl(
    */
   public static final class WaitForPlaybackState extends Action {
 
-    @Player.State private final int targetPlaybackState;
+    private final @Player.State int targetPlaybackState;
 
     /**
      * @param tag A tag to use for logging.

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/CapturingAudioSink.java
Patch:
@@ -91,7 +91,7 @@ public void dump(Dumper dumper) {
 
   private static final class DumpableConfiguration implements Dumper.Dumpable {
 
-    @C.PcmEncoding private final int inputPcmEncoding;
+    private final @C.PcmEncoding int inputPcmEncoding;
     private final int inputChannelCount;
     private final int inputSampleRate;
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DownloadBuilder.java
Patch:
@@ -45,7 +45,7 @@ public final class DownloadBuilder {
   @Nullable private String cacheKey;
   private byte[] customMetadata;
 
-  @Download.State private int state;
+  private @Download.State int state;
   private long startTimeMs;
   private long updateTimeMs;
   private long contentLength;

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DumpFileAsserts.java
Patch:
@@ -70,7 +70,7 @@ public class DumpFileAsserts {
   /** Write output to folder {@code /storage/emulated/0/Android/data} of device. */
   private static final int WRITE_TO_DEVICE = 1 << 1;
 
-  @DumpFilesAction private static final int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
+  private static final @DumpFilesAction int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
 
   private DumpFileAsserts() {}
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExoMediaDrm.java
Patch:
@@ -396,8 +396,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCryptoExcep
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return FakeCryptoConfig.TYPE;
   }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeRenderer.java
Patch:
@@ -160,8 +160,7 @@ public boolean isEnded() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) throws ExoPlaybackException {
+  public @Capabilities int supportsFormat(Format format) throws ExoPlaybackException {
     int trackType = MimeTypes.getTrackType(format.sampleMimeType);
     return trackType != C.TRACK_TYPE_UNKNOWN && trackType == getTrackType()
         ? RendererCapabilities.create(C.FORMAT_HANDLED, ADAPTIVE_SEAMLESS, TUNNELING_NOT_SUPPORTED)

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeSampleStream.java
Patch:
@@ -293,7 +293,7 @@ private void maybeNotifyDownstreamFormat(long timeUs) {
 
   private static class SampleInfo {
     public final byte[] data;
-    @C.BufferFlags public final int flags;
+    public final @C.BufferFlags int flags;
     public final long timeUs;
 
     public SampleInfo(byte[] data, @C.BufferFlags int flags, long timeUs) {

File: extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/FlacExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.ext.flac;
 
 import static com.google.android.exoplayer2.util.Util.getPcmEncoding;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -40,6 +41,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.nio.ByteBuffer;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNull;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
@@ -61,6 +63,7 @@ public final class FlacExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_DISABLE_ID3_METADATA})

File: library/common/src/main/java/com/google/android/exoplayer2/PlaybackException.java
Patch:
@@ -406,6 +406,7 @@ public boolean errorInfoEquals(@Nullable PlaybackException other) {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       open = true,
       value = {

File: library/common/src/main/java/com/google/android/exoplayer2/text/span/TextAnnotation.java
Patch:
@@ -15,11 +15,13 @@
  */
 package com.google.android.exoplayer2.text.span;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import androidx.annotation.IntDef;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 
 /** Properties of a text annotation (i.e. ruby, text emphasis marks). */
 public final class TextAnnotation {
@@ -55,6 +57,7 @@ public final class TextAnnotation {
    */
   @Documented
   @Retention(SOURCE)
+  @Target(TYPE_USE)
   @IntDef({POSITION_UNKNOWN, POSITION_BEFORE, POSITION_AFTER})
   public @interface Position {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/util/FileTypes.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.util;
 
 import static com.google.android.exoplayer2.util.MimeTypes.normalizeMimeType;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import androidx.annotation.IntDef;
@@ -24,6 +25,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.List;
 import java.util.Map;
 
@@ -37,6 +39,7 @@ public final class FileTypes {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     UNKNOWN, AC3, AC4, ADTS, AMR, FLAC, FLV, MATROSKA, MP3, MP4, OGG, PS, TS, WAV, WEBVTT, JPEG
   })

File: library/common/src/main/java/com/google/android/exoplayer2/util/NotificationUtil.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.util;
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.app.Notification;
@@ -29,6 +30,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** Utility methods for displaying {@link Notification Notifications}. */
 @SuppressLint("InlinedApi")
@@ -41,6 +43,7 @@ public final class NotificationUtil {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     IMPORTANCE_UNSPECIFIED,
     IMPORTANCE_NONE,

File: library/core/src/main/java/com/google/android/exoplayer2/AudioFocusManager.java
Patch:
@@ -62,6 +62,7 @@ public interface PlayerControl {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     PLAYER_COMMAND_DO_NOT_PLAY,
     PLAYER_COMMAND_WAIT_FOR_CALLBACK,

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
Patch:
@@ -19,6 +19,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.media.ResourceBusyException;
@@ -47,6 +48,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -260,6 +262,7 @@ private MissingSchemeDataException(UUID uuid) {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({MODE_PLAYBACK, MODE_QUERY, MODE_DOWNLOAD, MODE_RELEASE})
   public @interface Mode {}
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/source/ClippingMediaSource.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -31,6 +32,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 
 /**
@@ -48,6 +50,7 @@ public static final class IllegalClippingException extends IOException {
      */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({REASON_INVALID_PERIOD_COUNT, REASON_NOT_SEEKABLE_TO_START, REASON_START_EXCEEDS_END})
     public @interface Reason {}
     /** The wrapped source doesn't consist of a single period. */

File: library/core/src/main/java/com/google/android/exoplayer2/source/MergingMediaSource.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -31,6 +32,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -50,6 +52,7 @@ public static final class IllegalMergeException extends IOException {
     /** The reason the merge failed. One of {@link #REASON_PERIOD_COUNT_MISMATCH}. */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({REASON_PERIOD_COUNT_MISMATCH})
     public @interface Reason {}
     /** The sources have different period counts. */

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/AdsMediaSource.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import android.os.Handler;
@@ -45,6 +46,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -71,6 +73,7 @@ public static final class AdLoadException extends IOException {
      */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({TYPE_AD, TYPE_AD_GROUP, TYPE_ALL_ADS, TYPE_UNEXPECTED})
     public @interface Type {}
     /** Type for when an ad failed to load. The ad will be skipped. */

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
Patch:
@@ -1420,6 +1420,7 @@ private static String keyForField(@FieldNumber int field) {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({SELECTION_ELIGIBILITY_NO, SELECTION_ELIGIBILITY_FIXED, SELECTION_ELIGIBILITY_ADAPTIVE})
   protected @interface SelectionEligibility {}
 

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/LoadErrorHandlingPolicy.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.upstream;
 
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -28,6 +29,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * A policy that defines how load errors are handled.
@@ -52,6 +54,7 @@ public interface LoadErrorHandlingPolicy {
   /** Fallback type. One of {@link #FALLBACK_TYPE_LOCATION} or {@link #FALLBACK_TYPE_TRACK}. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FALLBACK_TYPE_LOCATION, FALLBACK_TYPE_TRACK})
   @interface FallbackType {}
 

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import androidx.annotation.IntDef;
@@ -41,6 +42,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -328,6 +330,7 @@ public interface EventListener {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/flac/FlacExtractor.java
Patch:
@@ -65,6 +65,7 @@ public final class FlacExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_DISABLE_ID3_METADATA})

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -21,6 +21,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import android.util.SparseArray;
@@ -58,6 +59,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.util.ArrayList;
@@ -85,6 +87,7 @@ public class MatroskaExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_DISABLE_SEEK_FOR_CUES})

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -21,6 +21,7 @@
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static com.google.android.exoplayer2.util.Util.nullSafeArrayCopy;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import android.util.SparseArray;
@@ -56,6 +57,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -78,6 +80,7 @@ public class FragmentedMp4Extractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Mp4Extractor.java
Patch:
@@ -74,6 +74,7 @@ public final class Mp4Extractor implements Extractor, SeekMap {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractor.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.android.exoplayer2.extractor.ts.TsPayloadReader.FLAG_DATA_ALIGNMENT_INDICATOR;
 import static com.google.android.exoplayer2.metadata.id3.Id3Decoder.ID3_HEADER_LENGTH;
 import static com.google.android.exoplayer2.metadata.id3.Id3Decoder.ID3_TAG;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import com.google.android.exoplayer2.C;
@@ -40,6 +41,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -56,6 +58,7 @@ public final class AdtsExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_ENABLE_CONSTANT_BITRATE_SEEKING, FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS})

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.extractor.ts;
 
 import static com.google.android.exoplayer2.extractor.ts.TsPayloadReader.FLAG_PAYLOAD_UNIT_START_INDICATOR;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.SparseArray;
 import android.util.SparseBooleanArray;
@@ -44,6 +45,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -63,6 +65,7 @@ public final class TsExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({MODE_MULTI_PMT, MODE_SINGLE_PMT, MODE_HLS})
   public @interface Mode {}
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCssStyle.java
Patch:
@@ -49,6 +49,7 @@ public final class WebvttCssStyle {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {UNSPECIFIED, STYLE_NORMAL, STYLE_BOLD, STYLE_ITALIC, STYLE_BOLD_ITALIC})
@@ -65,6 +66,7 @@ public final class WebvttCssStyle {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({UNSPECIFIED, FONT_SIZE_UNIT_PIXEL, FONT_SIZE_UNIT_EM, FONT_SIZE_UNIT_PERCENT})
   public @interface FontSizeUnit {}
 

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylist.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import androidx.annotation.IntDef;
@@ -30,6 +31,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -385,6 +387,7 @@ public RenditionReport(Uri playlistUri, long lastMediaSequence, int lastPartInde
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({PLAYLIST_TYPE_UNKNOWN, PLAYLIST_TYPE_VOD, PLAYLIST_TYPE_EVENT})
   public @interface PlaylistType {}
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -23,6 +23,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.graphics.Matrix;
@@ -62,6 +63,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /**
@@ -501,6 +503,7 @@ public interface DebugViewProvider {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     PROGRESS_STATE_WAITING_FOR_AVAILABILITY,
     PROGRESS_STATE_AVAILABLE,

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.android.exoplayer2.Player.COMMAND_GET_TEXT;
 import static com.google.android.exoplayer2.Player.COMMAND_SET_VIDEO_SURFACE;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.content.Context;
@@ -64,6 +65,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
@@ -261,6 +263,7 @@ public class PlayerView extends FrameLayout implements AdViewProvider {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({SHOW_BUFFERING_NEVER, SHOW_BUFFERING_WHEN_PLAYING, SHOW_BUFFERING_ALWAYS})
   public @interface ShowBuffering {}
   /** The buffering view is never shown. */

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.android.exoplayer2.Player.COMMAND_GET_TEXT;
 import static com.google.android.exoplayer2.Player.COMMAND_SET_VIDEO_SURFACE;
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.content.Context;
@@ -65,6 +66,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
@@ -183,6 +185,7 @@ public class StyledPlayerView extends FrameLayout implements AdViewProvider {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({SHOW_BUFFERING_NEVER, SHOW_BUFFERING_WHEN_PLAYING, SHOW_BUFFERING_ALWAYS})
   public @interface ShowBuffering {}
   /** The buffering view is never shown. */

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/SubtitleView.java
Patch:
@@ -16,6 +16,7 @@
  */
 package com.google.android.exoplayer2.ui;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.content.Context;
@@ -35,6 +36,7 @@
 import com.google.android.exoplayer2.util.Util;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -111,6 +113,7 @@ void update(
    */
   @Documented
   @Retention(SOURCE)
+  @Target(TYPE_USE)
   @IntDef({VIEW_TYPE_CANVAS, VIEW_TYPE_WEB})
   public @interface ViewType {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -729,6 +729,7 @@ private C() {}
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       open = true,
       value = {

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaLoadData.java
Patch:
@@ -41,7 +41,7 @@ public final class MediaLoadData {
    * One of the {@link SelectionReason selection reasons} if the data belongs to a track. {@link
    * C#SELECTION_REASON_UNKNOWN} otherwise.
    */
-  public final int trackSelectionReason;
+  public final @C.SelectionReason int trackSelectionReason;
   /**
    * Optional data associated with the selection of the track to which the data belongs. Null if the
    * data does not belong to a track.

File: library/core/src/main/java/com/google/android/exoplayer2/source/MergingMediaPeriod.java
Patch:
@@ -546,7 +546,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return trackSelection.getSelectionReason();
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/AdaptiveTrackSelection.java
Patch:
@@ -313,7 +313,7 @@ protected AdaptiveTrackSelection createAdaptiveTrackSelection(
 
   private float playbackSpeed;
   private int selectedIndex;
-  private int reason;
+  private @C.SelectionReason int reason;
   private long lastBufferEvaluationMs;
   @Nullable private MediaChunk lastBufferEvaluationMediaChunk;
 
@@ -446,7 +446,7 @@ public void updateSelectedTrack(
     }
 
     int previousSelectedIndex = selectedIndex;
-    int previousReason = reason;
+    @C.SelectionReason int previousReason = reason;
     int formatIndexOfPreviousChunk =
         queue.isEmpty() ? C.INDEX_UNSET : indexOf(Iterables.getLast(queue).trackFormat);
     if (formatIndexOfPreviousChunk != C.INDEX_UNSET) {
@@ -484,7 +484,7 @@ public int getSelectedIndex() {
   }
 
   @Override
-  public int getSelectionReason() {
+  public @C.SelectionReason int getSelectionReason() {
     return reason;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/ExoTrackSelection.java
Patch:
@@ -122,6 +122,7 @@ ExoTrackSelection[] createTrackSelections(
   int getSelectedIndex();
 
   /** Returns the reason for the current track selection. */
+  @C.SelectionReason
   int getSelectionReason();
 
   /** Returns optional data associated with the current track selection. */

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
Patch:
@@ -915,7 +915,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackSelection.java
Patch:
@@ -114,7 +114,7 @@ public int getSelectedIndex() {
   }
 
   @Override
-  public int getSelectionReason() {
+  public @C.SelectionReason int getSelectionReason() {
     return C.SELECTION_REASON_UNKNOWN;
   }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/MediaPeriodAsserts.java
Patch:
@@ -238,7 +238,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: libraries/common/src/main/java/androidx/media3/common/AdPlaybackState.java
Patch:
@@ -67,7 +67,7 @@ public static final class AdGroup implements Bundleable {
     /** The URI of each ad in the ad group. */
     public final @NullableType Uri[] uris;
     /** The state of each ad in the ad group. */
-    @AdState public final int[] states;
+    public final @AdState int[] states;
     /** The durations of each ad in the ad group, in microseconds. */
     public final long[] durationsUs;
     /**

File: libraries/common/src/main/java/androidx/media3/common/BasePlayer.java
Patch:
@@ -384,8 +384,7 @@ public final long getContentDuration() {
         : timeline.getWindow(getCurrentMediaItemIndex(), window).getDurationMs();
   }
 
-  @RepeatMode
-  private int getRepeatModeForNavigation() {
+  private @RepeatMode int getRepeatModeForNavigation() {
     @RepeatMode int repeatMode = getRepeatMode();
     return repeatMode == REPEAT_MODE_ONE ? REPEAT_MODE_OFF : repeatMode;
   }

File: libraries/common/src/main/java/androidx/media3/common/C.java
Patch:
@@ -1247,8 +1247,8 @@ public static String getFormatSupportString(@FormatSupport int formatSupport) {
       replacement = "Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode)",
       imports = {"androidx.media3.common.util.Util"})
   @Deprecated
-  @PlaybackException.ErrorCode
-  public static int getErrorCodeForMediaDrmErrorCode(int mediaDrmErrorCode) {
+  public static @PlaybackException.ErrorCode int getErrorCodeForMediaDrmErrorCode(
+      int mediaDrmErrorCode) {
     return Util.getErrorCodeForMediaDrmErrorCode(mediaDrmErrorCode);
   }
 }

File: libraries/common/src/main/java/androidx/media3/common/DrmInitData.java
Patch:
@@ -52,7 +52,8 @@ public final class DrmInitData implements Comparator<SchemeData>, Parcelable {
    * @param mediaData DRM session acquisition data obtained from the media.
    * @return A {@link DrmInitData} obtained from merging a media manifest and a media stream.
    */
-  public static @Nullable DrmInitData createSessionCreationData(
+  @Nullable
+  public static DrmInitData createSessionCreationData(
       @Nullable DrmInitData manifestData, @Nullable DrmInitData mediaData) {
     ArrayList<SchemeData> result = new ArrayList<>();
     String schemeType = null;

File: libraries/common/src/main/java/androidx/media3/common/HeartRating.java
Patch:
@@ -79,7 +79,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_HEART;
+  private static final @RatingType int TYPE = RATING_TYPE_HEART;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: libraries/common/src/main/java/androidx/media3/common/MediaMetadata.java
Patch:
@@ -56,11 +56,11 @@ public static final class Builder {
     @Nullable private Rating userRating;
     @Nullable private Rating overallRating;
     @Nullable private byte[] artworkData;
-    @Nullable @PictureType private Integer artworkDataType;
+    @Nullable private @PictureType Integer artworkDataType;
     @Nullable private Uri artworkUri;
     @Nullable private Integer trackNumber;
     @Nullable private Integer totalTrackCount;
-    @Nullable @FolderType private Integer folderType;
+    @Nullable private @FolderType Integer folderType;
     @Nullable private Boolean isPlayable;
     @Nullable private Integer recordingYear;
     @Nullable private Integer recordingMonth;

File: libraries/common/src/main/java/androidx/media3/common/PercentageRating.java
Patch:
@@ -77,7 +77,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_PERCENTAGE;
+  private static final @RatingType int TYPE = RATING_TYPE_PERCENTAGE;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: libraries/common/src/main/java/androidx/media3/common/Player.java
Patch:
@@ -686,8 +686,7 @@ final class Commands implements Bundleable {
     @UnstableApi
     public static final class Builder {
 
-      @Command
-      private static final int[] SUPPORTED_COMMANDS = {
+      private static final @Command int[] SUPPORTED_COMMANDS = {
         COMMAND_PLAY_PAUSE,
         COMMAND_PREPARE,
         COMMAND_STOP,

File: libraries/common/src/main/java/androidx/media3/common/StarRating.java
Patch:
@@ -103,7 +103,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_STAR;
+  private static final @RatingType int TYPE = RATING_TYPE_STAR;
   private static final int MAX_STARS_DEFAULT = 5;
 
   @Documented

File: libraries/common/src/main/java/androidx/media3/common/ThumbRating.java
Patch:
@@ -76,7 +76,7 @@ public boolean equals(@Nullable Object obj) {
 
   // Bundleable implementation.
 
-  @RatingType private static final int TYPE = RATING_TYPE_THUMB;
+  private static final @RatingType int TYPE = RATING_TYPE_THUMB;
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: libraries/common/src/main/java/androidx/media3/common/TrackGroup.java
Patch:
@@ -207,8 +207,7 @@ private static String normalizeLanguage(@Nullable String language) {
     return language == null || language.equals(C.LANGUAGE_UNDETERMINED) ? "" : language;
   }
 
-  @C.RoleFlags
-  private static int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
+  private static @C.RoleFlags int normalizeRoleFlags(@C.RoleFlags int roleFlags) {
     // Treat trick-play and non-trick-play formats as compatible.
     return roleFlags | C.ROLE_FLAG_TRICK_PLAY;
   }

File: libraries/common/src/main/java/androidx/media3/common/text/RubySpan.java
Patch:
@@ -39,7 +39,7 @@ public final class RubySpan implements LanguageFeatureSpan {
   public final String rubyText;
 
   /** The position of the ruby text relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public RubySpan(String rubyText, @TextAnnotation.Position int position) {
     this.rubyText = rubyText;

File: libraries/common/src/main/java/androidx/media3/common/text/TextEmphasisSpan.java
Patch:
@@ -83,13 +83,13 @@ public final class TextEmphasisSpan implements LanguageFeatureSpan {
   public static final int MARK_FILL_OPEN = 2;
 
   /** The mark shape used for text emphasis. */
-  @MarkShape public int markShape;
+  public @MarkShape int markShape;
 
   /** The mark fill for the text emphasis mark. */
-  @MarkShape public int markFill;
+  public @MarkShape int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @TextAnnotation.Position public final int position;
+  public final @TextAnnotation.Position int position;
 
   public TextEmphasisSpan(
       @MarkShape int shape, @MarkFill int fill, @TextAnnotation.Position int position) {

File: libraries/datasource/src/main/java/androidx/media3/datasource/DataSourceException.java
Patch:
@@ -57,7 +57,7 @@ public static boolean isCausedByPositionOutOfRange(IOException e) {
    * The reason of this {@link DataSourceException}, should be one of the {@code ERROR_CODE_IO_*} in
    * {@link PlaybackException.ErrorCode}.
    */
-  @PlaybackException.ErrorCode public final int reason;
+  public final @PlaybackException.ErrorCode int reason;
 
   /**
    * Constructs a DataSourceException.

File: libraries/datasource/src/main/java/androidx/media3/datasource/HttpDataSource.java
Patch:
@@ -233,7 +233,7 @@ public static HttpDataSourceException createForIOException(
     /** The {@link DataSpec} associated with the current connection. */
     public final DataSpec dataSpec;
 
-    @Type public final int type;
+    public final @Type int type;
 
     /**
      * @deprecated Use {@link #HttpDataSourceException(DataSpec, int, int)
@@ -349,8 +349,8 @@ public HttpDataSourceException(
       this.type = type;
     }
 
-    @PlaybackException.ErrorCode
-    private static int assignErrorCode(@PlaybackException.ErrorCode int errorCode, @Type int type) {
+    private static @PlaybackException.ErrorCode int assignErrorCode(
+        @PlaybackException.ErrorCode int errorCode, @Type int type) {
       return errorCode == PlaybackException.ERROR_CODE_IO_UNSPECIFIED && type == TYPE_OPEN
           ? PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED
           : errorCode;

File: libraries/datasource/src/main/java/androidx/media3/datasource/cache/CacheDataSource.java
Patch:
@@ -72,7 +72,7 @@ public static final class Factory implements DataSource.Factory {
     @Nullable private DataSource.Factory upstreamDataSourceFactory;
     @Nullable private PriorityTaskManager upstreamPriorityTaskManager;
     private int upstreamPriority;
-    @CacheDataSource.Flags private int flags;
+    private @CacheDataSource.Flags int flags;
     @Nullable private CacheDataSource.EventListener eventListener;
 
     public Factory() {

File: libraries/decoder/src/main/java/androidx/media3/decoder/Buffer.java
Patch:
@@ -22,7 +22,7 @@
 @UnstableApi
 public abstract class Buffer {
 
-  @C.BufferFlags private int flags;
+  private @C.BufferFlags int flags;
 
   /** Clears the buffer. */
   public void clear() {

File: libraries/decoder/src/main/java/androidx/media3/decoder/CryptoInfo.java
Patch:
@@ -48,7 +48,7 @@ public final class CryptoInfo {
    *
    * @see android.media.MediaCodec.CryptoInfo#mode
    */
-  @C.CryptoMode public int mode;
+  public @C.CryptoMode int mode;
   /**
    * The number of leading unencrypted bytes in each sub-sample. If null, all bytes are treated as
    * encrypted and {@link #numBytesOfEncryptedData} must be specified.

File: libraries/decoder/src/main/java/androidx/media3/decoder/DecoderInputBuffer.java
Patch:
@@ -111,7 +111,7 @@ public InsufficientCapacityException(int currentCapacity, int requiredCapacity)
    */
   @Nullable public ByteBuffer supplementalData;
 
-  @BufferReplacementMode private final int bufferReplacementMode;
+  private final @BufferReplacementMode int bufferReplacementMode;
   private final int paddingSize;
 
   /** Returns a new instance that's not able to hold any data. */

File: libraries/decoder/src/main/java/androidx/media3/decoder/VideoDecoderOutputBuffer.java
Patch:
@@ -34,7 +34,7 @@ public class VideoDecoderOutputBuffer extends DecoderOutputBuffer {
   public int decoderPrivate;
 
   /** Output mode. */
-  @C.VideoOutputMode public int mode;
+  public @C.VideoOutputMode int mode;
   /** RGB buffer for RGB mode. */
   @Nullable public ByteBuffer data;
 

File: libraries/decoder_av1/src/main/java/androidx/media3/decoder/av1/Gav1Decoder.java
Patch:
@@ -41,7 +41,7 @@ public final class Gav1Decoder
 
   private final long gav1DecoderContext;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a Gav1Decoder.

File: libraries/decoder_av1/src/main/java/androidx/media3/decoder/av1/Libgav1VideoRenderer.java
Patch:
@@ -128,8 +128,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!MimeTypes.VIDEO_AV1.equalsIgnoreCase(format.sampleMimeType)
         || !Gav1Library.isAvailable()) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: libraries/decoder_ffmpeg/src/main/java/androidx/media3/decoder/ffmpeg/FfmpegAudioDecoder.java
Patch:
@@ -41,7 +41,7 @@
 
   private final String codecName;
   @Nullable private final byte[] extraData;
-  @C.PcmEncoding private final int encoding;
+  private final @C.PcmEncoding int encoding;
   private final int outputBufferSize;
 
   private long nativeContext; // May be reassigned on resetting the codec.
@@ -158,8 +158,7 @@ public int getSampleRate() {
   }
 
   /** Returns the encoding of output audio. */
-  @C.PcmEncoding
-  public int getEncoding() {
+  public @C.PcmEncoding int getEncoding() {
     return encoding;
   }
 

File: libraries/decoder_ffmpeg/src/main/java/androidx/media3/decoder/ffmpeg/FfmpegVideoRenderer.java
Patch:
@@ -73,8 +73,7 @@ public String getName() {
   }
 
   @Override
-  @RendererCapabilities.Capabilities
-  public final int supportsFormat(Format format) {
+  public final @RendererCapabilities.Capabilities int supportsFormat(Format format) {
     // TODO: Remove this line and uncomment the implementation below.
     return C.FORMAT_UNSUPPORTED_TYPE;
     /*

File: libraries/decoder_flac/src/main/java/androidx/media3/decoder/flac/LibflacAudioRenderer.java
Patch:
@@ -79,8 +79,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     if (!FlacLibrary.isAvailable()
         || !MimeTypes.AUDIO_FLAC.equalsIgnoreCase(format.sampleMimeType)) {
       return C.FORMAT_UNSUPPORTED_TYPE;

File: libraries/decoder_opus/src/main/java/androidx/media3/decoder/opus/LibopusAudioRenderer.java
Patch:
@@ -80,8 +80,7 @@ public String getName() {
   }
 
   @Override
-  @C.FormatSupport
-  protected int supportsFormatInternal(Format format) {
+  protected @C.FormatSupport int supportsFormatInternal(Format format) {
     boolean drmIsSupported = OpusLibrary.supportsCryptoType(format.cryptoType);
     if (!OpusLibrary.isAvailable()
         || !MimeTypes.AUDIO_OPUS.equalsIgnoreCase(format.sampleMimeType)) {

File: libraries/decoder_vp9/src/main/java/androidx/media3/decoder/vp9/LibvpxVideoRenderer.java
Patch:
@@ -126,8 +126,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     if (!VpxLibrary.isAvailable() || !MimeTypes.VIDEO_VP9.equalsIgnoreCase(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);
     }

File: libraries/decoder_vp9/src/main/java/androidx/media3/decoder/vp9/VpxDecoder.java
Patch:
@@ -49,7 +49,7 @@ public final class VpxDecoder
 
   @Nullable private ByteBuffer lastSupplementalData;
 
-  @C.VideoOutputMode private volatile int outputMode;
+  private volatile @C.VideoOutputMode int outputMode;
 
   /**
    * Creates a VP9 decoder.

File: libraries/exoplayer/src/androidTest/java/androidx/media3/exoplayer/StreamVolumeManagerTest.java
Patch:
@@ -273,7 +273,7 @@ public void onStreamVolumeChanged_isCalled_whenAudioManagerChangesIt() throws Ex
 
   private static class TestListener implements StreamVolumeManager.Listener {
 
-    @C.StreamType private int lastStreamType;
+    private @C.StreamType int lastStreamType;
     private int lastStreamVolume;
     private boolean lastStreamVolumeMuted;
     public final CountDownLatch onStreamVolumeChangedLatch;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/DecoderReuseEvaluation.java
Patch:
@@ -125,13 +125,13 @@ public final class DecoderReuseEvaluation {
   public final Format newFormat;
 
   /** The {@link DecoderReuseResult result} of the evaluation. */
-  @DecoderReuseResult public final int result;
+  public final @DecoderReuseResult int result;
 
   /**
    * {@link DecoderDiscardReasons Reasons} why the decoder cannot be reused. Always {@code 0} if
    * reuse is possible. May also be {code 0} if reuse is not possible for an unspecified reason.
    */
-  @DecoderDiscardReasons public final int discardReasons;
+  public final @DecoderDiscardReasons int discardReasons;
 
   /**
    * @param decoderName The name of the decoder.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/DefaultRenderersFactory.java
Patch:
@@ -95,7 +95,7 @@ public class DefaultRenderersFactory implements RenderersFactory {
 
   private final Context context;
   private final DefaultMediaCodecAdapterFactory codecAdapterFactory;
-  @ExtensionRendererMode private int extensionRendererMode;
+  private @ExtensionRendererMode int extensionRendererMode;
   private long allowedVideoJoiningTimeMs;
   private boolean enableDecoderFallback;
   private MediaCodecSelector mediaCodecSelector;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlaybackException.java
Patch:
@@ -85,7 +85,7 @@ public final class ExoPlaybackException extends PlaybackException {
   @UnstableApi public static final int TYPE_REMOTE = 3;
 
   /** The {@link Type} of the playback failure. */
-  @UnstableApi @Type public final int type;
+  @UnstableApi public final @Type int type;
 
   /** If {@link #type} is {@link #TYPE_RENDERER}, this is the name of the renderer. */
   @UnstableApi @Nullable public final String rendererName;
@@ -104,7 +104,7 @@ public final class ExoPlaybackException extends PlaybackException {
    * renderer for {@link #rendererFormat}. If {@link #rendererFormat} is null, this is {@link
    * C#FORMAT_HANDLED}.
    */
-  @UnstableApi @FormatSupport public final int rendererFormatSupport;
+  @UnstableApi public final @FormatSupport int rendererFormatSupport;
 
   /** The {@link MediaPeriodId} of the media associated with this error, or null if undetermined. */
   @UnstableApi @Nullable public final MediaPeriodId mediaPeriodId;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoTimeoutException.java
Patch:
@@ -62,7 +62,7 @@ public final class ExoTimeoutException extends RuntimeException {
   public static final int TIMEOUT_OPERATION_DETACH_SURFACE = 3;
 
   /** The operation on the ExoPlayer playback thread that timed out. */
-  @TimeoutOperation public final int timeoutOperation;
+  public final @TimeoutOperation int timeoutOperation;
 
   /**
    * Creates the timeout exception.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/PlaybackInfo.java
Patch:
@@ -55,7 +55,7 @@
   /** The start position after a reported position discontinuity, in microseconds. */
   public final long discontinuityStartPositionUs;
   /** The current playback state. One of the {@link Player}.STATE_ constants. */
-  @Player.State public final int playbackState;
+  public final @Player.State int playbackState;
   /** The current playback error, or null if this is not an error state. */
   @Nullable public final ExoPlaybackException playbackError;
   /** Whether the player is currently loading. */
@@ -71,7 +71,7 @@
   /** Whether playback should proceed when {@link #playbackState} == {@link Player#STATE_READY}. */
   public final boolean playWhenReady;
   /** Reason why playback is suppressed even though {@link #playWhenReady} is {@code true}. */
-  @PlaybackSuppressionReason public final int playbackSuppressionReason;
+  public final @PlaybackSuppressionReason int playbackSuppressionReason;
   /** The playback parameters. */
   public final PlaybackParameters playbackParameters;
   /** Whether offload scheduling is enabled for the main player loop. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/StreamVolumeManager.java
Patch:
@@ -55,7 +55,7 @@ public interface Listener {
   private final AudioManager audioManager;
 
   @Nullable private VolumeChangeReceiver receiver;
-  @C.StreamType private int streamType;
+  private @C.StreamType int streamType;
   private int volume;
   private boolean muted;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/AnalyticsListener.java
Patch:
@@ -150,8 +150,7 @@ public int size() {
      * @param index The index. Must be between 0 (inclusive) and {@link #size()} (exclusive).
      * @return The {@link EventFlags event} at the given index.
      */
-    @EventFlags
-    public int get(int index) {
+    public @EventFlags int get(int index) {
       return flags.get(index);
     }
   }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/MediaMetricsListener.java
Patch:
@@ -120,7 +120,7 @@ public static MediaMetricsListener create(Context context) {
 
   @Nullable private String activeSessionId;
   @Nullable private PlaybackMetrics.Builder metricsBuilder;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int currentPlaybackState;
   private int currentNetworkType;
   @Nullable private PlaybackException pendingPlayerError;
@@ -887,7 +887,7 @@ public ErrorInfo(int errorCode, int subErrorCode) {
   private static final class PendingFormatUpdate {
 
     public final Format format;
-    @C.SelectionReason public final int selectionReason;
+    public final @C.SelectionReason int selectionReason;
     public final String sessionId;
 
     public PendingFormatUpdate(

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/PlaybackStatsListener.java
Patch:
@@ -84,7 +84,7 @@ public interface Callback {
 
   @Nullable private String discontinuityFromSession;
   private long discontinuityFromPositionMs;
-  @Player.DiscontinuityReason private int discontinuityReason;
+  private @Player.DiscontinuityReason int discontinuityReason;
   private int droppedFrames;
   @Nullable private Exception nonFatalException;
   private long bandwidthTimeMs;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioProcessor.java
Patch:
@@ -45,7 +45,7 @@ final class AudioFormat {
     /** The number of interleaved channels. */
     public final int channelCount;
     /** The type of linear PCM encoding. */
-    @C.PcmEncoding public final int encoding;
+    public final @C.PcmEncoding int encoding;
     /** The number of bytes used to represent one audio frame. */
     public final int bytesPerFrame;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/ForwardingAudioSink.java
Patch:
@@ -50,8 +50,7 @@ public boolean supportsFormat(Format format) {
   }
 
   @Override
-  @SinkFormatSupport
-  public int getFormatSupport(Format format) {
+  public @SinkFormatSupport int getFormatSupport(Format format) {
     return sink.getFormatSupport(format);
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/MediaCodecAudioRenderer.java
Patch:
@@ -286,8 +286,7 @@ public void experimentalSetEnableKeepAudioTrackOnSeek(boolean enableKeepAudioTra
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     if (!MimeTypes.isAudio(format.sampleMimeType)) {
       return RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/SilenceSkippingAudioProcessor.java
Patch:
@@ -88,7 +88,7 @@ public final class SilenceSkippingAudioProcessor extends BaseAudioProcessor {
    */
   private byte[] paddingBuffer;
 
-  @State private int state;
+  private @State int state;
   private int maybeSilenceBufferSize;
   private int paddingSize;
   private boolean hasOutputNoise;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/SpatializerDelegate.java
Patch:
@@ -129,8 +129,7 @@ public boolean isAvailable() {
   }
 
   /** Delegates to Spatializer.getImmersiveAudioLevel() */
-  @ImmersiveAudioLevel
-  public int getImmersiveAudioLevel() {
+  public @ImmersiveAudioLevel int getImmersiveAudioLevel() {
     try {
       return (int) Util.castNonNull(getImmersiveAudioLevel.invoke(spatializer));
     } catch (IllegalAccessException | InvocationTargetException e) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/TeeAudioProcessor.java
Patch:
@@ -128,7 +128,7 @@ public static final class WavFileAudioBufferSink implements AudioBufferSink {
 
     private int sampleRateHz;
     private int channelCount;
-    @C.PcmEncoding private int encoding;
+    private @C.PcmEncoding int encoding;
     @Nullable private RandomAccessFile randomAccessFile;
     private int counter;
     private int bytesWritten;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/TrimmingAudioProcessor.java
Patch:
@@ -25,7 +25,7 @@
 /** Audio processor for trimming samples from the start/end of data. */
 /* package */ final class TrimmingAudioProcessor extends BaseAudioProcessor {
 
-  @C.PcmEncoding private static final int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int OUTPUT_ENCODING = C.ENCODING_PCM_16BIT;
 
   private int trimStartFrames;
   private int trimEndFrames;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DefaultDrmSession.java
Patch:
@@ -254,8 +254,7 @@ public void onProvisionError(Exception error, boolean thrownByExoMediaDrm) {
   // DrmSession implementation.
 
   @Override
-  @DrmSession.State
-  public final int getState() {
+  public final @DrmSession.State int getState() {
     return state;
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DefaultDrmSessionManager.java
Patch:
@@ -312,7 +312,7 @@ private MissingSchemeDataException(UUID uuid) {
   @Nullable private byte[] offlineLicenseKeySetId;
   private @MonotonicNonNull PlayerId playerId;
 
-  /* package */ volatile @Nullable MediaDrmHandler mediaDrmHandler;
+  /* package */ @Nullable volatile MediaDrmHandler mediaDrmHandler;
 
   /**
    * @param uuid The UUID of the drm scheme.
@@ -590,8 +590,7 @@ private DrmSession acquireSession(
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType(Format format) {
+  public @C.CryptoType int getCryptoType(Format format) {
     @C.CryptoType int cryptoType = checkNotNull(exoMediaDrm).getCryptoType();
     if (format.drmInitData == null) {
       int trackType = MimeTypes.getTrackType(format.sampleMimeType);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DrmSession.java
Patch:
@@ -65,7 +65,7 @@ static void replaceSession(
   class DrmSessionException extends IOException {
 
     /** The {@link PlaybackException.ErrorCode} that corresponds to the failure. */
-    @PlaybackException.ErrorCode public final int errorCode;
+    public final @PlaybackException.ErrorCode int errorCode;
 
     public DrmSessionException(Throwable cause, @PlaybackException.ErrorCode int errorCode) {
       super(cause);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DrmSessionManager.java
Patch:
@@ -66,8 +66,7 @@ public DrmSession acquireSession(
         }
 
         @Override
-        @C.CryptoType
-        public int getCryptoType(Format format) {
+        public @C.CryptoType int getCryptoType(Format format) {
           return format.drmInitData != null ? C.CRYPTO_TYPE_UNSUPPORTED : C.CRYPTO_TYPE_NONE;
         }
       };

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DummyExoMediaDrm.java
Patch:
@@ -153,8 +153,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) {
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_UNSUPPORTED;
   }
 }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/ExoMediaDrm.java
Patch:
@@ -267,7 +267,7 @@ final class KeyRequest {
 
     private final byte[] data;
     private final String licenseServerUrl;
-    @RequestType private final int requestType;
+    private final @RequestType int requestType;
 
     /**
      * Creates an instance with {@link #REQUEST_TYPE_UNKNOWN}.
@@ -307,8 +307,7 @@ public String getLicenseServerUrl() {
      * request does not specify a type. Note that when using a platform {@link MediaDrm} instance,
      * key requests only specify a type on API levels 23 and above.
      */
-    @RequestType
-    public int getRequestType() {
+    public @RequestType int getRequestType() {
       return requestType;
     }
   }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/FrameworkMediaDrm.java
Patch:
@@ -342,8 +342,7 @@ public FrameworkCryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCr
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return C.CRYPTO_TYPE_FRAMEWORK;
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/UnsupportedDrmException.java
Patch:
@@ -49,7 +49,7 @@ public final class UnsupportedDrmException extends Exception {
   public static final int REASON_INSTANTIATION_ERROR = 2;
 
   /** Either {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
-  @Reason public final int reason;
+  public final @Reason int reason;
 
   /** @param reason {@link #REASON_UNSUPPORTED_SCHEME} or {@link #REASON_INSTANTIATION_ERROR}. */
   public UnsupportedDrmException(@Reason int reason) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/WidevineUtil.java
Patch:
@@ -39,7 +39,8 @@ private WidevineUtil() {}
    * @return A {@link Pair} consisting of the remaining license and playback durations in seconds,
    *     or null if called before the session has been opened or after it's been released.
    */
-  public static @Nullable Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
+  @Nullable
+  public static Pair<Long, Long> getLicenseDurationRemainingSec(DrmSession drmSession) {
     Map<String, String> keyStatus = drmSession.queryKeyStatus();
     if (keyStatus == null) {
       return null;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -141,7 +141,7 @@ public AsynchronousMediaCodecAdapter createAdapter(Configuration configuration)
   private final boolean synchronizeCodecInteractionsWithQueueing;
   private final boolean enableImmediateCodecStartAfterFlush;
   private boolean codecReleased;
-  @State private int state;
+  private @State int state;
 
   private AsynchronousMediaCodecAdapter(
       MediaCodec codec,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/DefaultMediaCodecAdapterFactory.java
Patch:
@@ -53,7 +53,7 @@ public final class DefaultMediaCodecAdapterFactory implements MediaCodecAdapter.
 
   private static final String TAG = "DMCodecAdapterFactory";
 
-  @Mode private int asynchronousMode;
+  private @Mode int asynchronousMode;
   private boolean enableSynchronizeCodecInteractionsWithQueueing;
   private boolean enableImmediateCodecStartAfterFlush;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/metadata/MetadataRenderer.java
Patch:
@@ -94,8 +94,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/Download.java
Patch:
@@ -99,7 +99,7 @@ public final class Download {
   /** The download request. */
   public final DownloadRequest request;
   /** The state of the download. */
-  @State public final int state;
+  public final @State int state;
   /** The first time when download entry is created. */
   public final long startTimeMs;
   /** The last update time. */
@@ -112,7 +112,7 @@ public final class Download {
    * If {@link #state} is {@link #STATE_FAILED} then this is the cause, otherwise {@link
    * #FAILURE_REASON_NONE}.
    */
-  @FailureReason public final int failureReason;
+  public final @FailureReason int failureReason;
 
   /* package */ final DownloadProgress progress;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadHelper.java
Patch:
@@ -1100,8 +1100,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    @C.SelectionReason
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadManager.java
Patch:
@@ -351,8 +351,7 @@ public Requirements getRequirements() {
    *
    * @return The not met {@link Requirements.RequirementFlags}, or 0 if all requirements are met.
    */
-  @Requirements.RequirementFlags
-  public int getNotMetRequirements() {
+  public @Requirements.RequirementFlags int getNotMetRequirements() {
     return notMetRequirements;
   }
 
@@ -705,7 +704,7 @@ private static final class InternalHandler extends Handler {
     private final ArrayList<Download> downloads;
     private final HashMap<String, Task> activeTasks;
 
-    @Requirements.RequirementFlags private int notMetRequirements;
+    private @Requirements.RequirementFlags int notMetRequirements;
     private boolean downloadsPaused;
     private int maxParallelDownloads;
     private int minRetryCount;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/scheduler/RequirementsWatcher.java
Patch:
@@ -62,7 +62,7 @@ void onRequirementsStateChanged(
 
   @Nullable private DeviceStatusChangeReceiver receiver;
 
-  @Requirements.RequirementFlags private int notMetRequirements;
+  private @Requirements.RequirementFlags int notMetRequirements;
   @Nullable private NetworkCallback networkCallback;
 
   /**
@@ -83,8 +83,7 @@ public RequirementsWatcher(Context context, Listener listener, Requirements requ
    *
    * @return Initial {@link Requirements.RequirementFlags RequirementFlags} that are not met, or 0.
    */
-  @Requirements.RequirementFlags
-  public int start() {
+  public @Requirements.RequirementFlags int start() {
     notMetRequirements = requirements.getNotMetRequirements(context);
 
     IntentFilter filter = new IntentFilter();

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ClippingMediaSource.java
Patch:
@@ -63,7 +63,7 @@ public static final class IllegalClippingException extends IOException {
     public static final int REASON_START_EXCEEDS_END = 2;
 
     /** The reason clipping failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason clipping failed. */
     public IllegalClippingException(@Reason int reason) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/DefaultMediaSourceFactory.java
Patch:
@@ -472,8 +472,7 @@ public DelegateFactoryLoader(
       mediaSourceFactories = new HashMap<>();
     }
 
-    @C.ContentType
-    public int[] getSupportedTypes() {
+    public @C.ContentType int[] getSupportedTypes() {
       ensureAllSuppliersAreLoaded();
       return Ints.toArray(supportedTypes);
     }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MediaLoadData.java
Patch:
@@ -28,7 +28,7 @@
 public final class MediaLoadData {
 
   /** The {@link DataType data type}. */
-  @DataType public final int dataType;
+  public final @DataType int dataType;
   /**
    * One of the {@link TrackType track types}, which is a media track type if the data corresponds
    * to media of a specific type, or {@link C#TRACK_TYPE_UNKNOWN} otherwise.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MediaSourceFactory.java
Patch:
@@ -47,8 +47,7 @@ public MediaSourceFactory setLoadErrorHandlingPolicy(
         }
 
         @Override
-        @C.ContentType
-        public int[] getSupportedTypes() {
+        public @C.ContentType int[] getSupportedTypes() {
           throw new UnsupportedOperationException();
         }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MergingMediaSource.java
Patch:
@@ -61,7 +61,7 @@ public static final class IllegalMergeException extends IOException {
     public static final int REASON_PERIOD_COUNT_MISMATCH = 0;
 
     /** The reason the merge failed. */
-    @Reason public final int reason;
+    public final @Reason int reason;
 
     /** @param reason The reason the merge failed. */
     public IllegalMergeException(@Reason int reason) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ProgressiveMediaPeriod.java
Patch:
@@ -131,7 +131,7 @@ interface Listener {
   private @MonotonicNonNull SeekMap seekMap;
   private long durationUs;
   private boolean isLive;
-  @DataType private int dataType;
+  private @DataType int dataType;
 
   private boolean seenFirstTrackSelection;
   private boolean notifyDiscontinuity;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/SilenceMediaSource.java
Patch:
@@ -87,7 +87,7 @@ public SilenceMediaSource createMediaSource() {
   public static final String MEDIA_ID = "SilenceMediaSource";
 
   private static final int SAMPLE_RATE_HZ = 44100;
-  @C.PcmEncoding private static final int PCM_ENCODING = C.ENCODING_PCM_16BIT;
+  private static final @C.PcmEncoding int PCM_ENCODING = C.ENCODING_PCM_16BIT;
   private static final int CHANNEL_COUNT = 2;
   private static final Format FORMAT =
       new Format.Builder()

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/chunk/Chunk.java
Patch:
@@ -42,15 +42,15 @@ public abstract class Chunk implements Loadable {
   /** The {@link DataSpec} that defines the data to be loaded. */
   public final DataSpec dataSpec;
   /** The {@link DataType data type} of the chunk. For reporting only. */
-  @DataType public final int type;
+  public final @DataType int type;
   /** The format of the track to which this chunk belongs. */
   public final Format trackFormat;
   /**
    * One of the {@link C.SelectionReason selection reasons} if the chunk belongs to a track. {@link
    * C#SELECTION_REASON_UNKNOWN} if the chunk does not belong to a track, or if the selection reason
    * is unknown.
    */
-  @C.SelectionReason public final int trackSelectionReason;
+  public final @C.SelectionReason int trackSelectionReason;
   /**
    * Optional data associated with the selection of the track to which this chunk belongs. Null if
    * the chunk does not belong to a track, or if there is no associated track selection data.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/mediaparser/OutputConsumerAdapterV30.java
Patch:
@@ -540,8 +540,7 @@ private static DrmInitData toExoPlayerDrmInitData(
     return new DrmInitData(schemeType, schemeDatas);
   }
 
-  @SelectionFlags
-  private static int getSelectionFlags(MediaFormat mediaFormat) {
+  private static @SelectionFlags int getSelectionFlags(MediaFormat mediaFormat) {
     int selectionFlags = 0;
     selectionFlags |=
         getFlag(

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/ExoplayerCuesDecoder.java
Patch:
@@ -63,7 +63,7 @@ public final class ExoplayerCuesDecoder implements SubtitleDecoder {
   private final SubtitleInputBuffer inputBuffer;
   private final Deque<SubtitleOutputBuffer> availableOutputBuffers;
 
-  @InputBufferState private int inputBufferState;
+  private @InputBufferState int inputBufferState;
   private boolean released;
 
   public ExoplayerCuesDecoder() {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/TextRenderer.java
Patch:
@@ -94,7 +94,7 @@ public final class TextRenderer extends BaseRenderer implements Callback {
   private boolean inputStreamEnded;
   private boolean outputStreamEnded;
   private boolean waitingForKeyFrame;
-  @ReplacementState private int decoderReplacementState;
+  private @ReplacementState int decoderReplacementState;
   @Nullable private Format streamFormat;
   @Nullable private SubtitleDecoder decoder;
   @Nullable private SubtitleInputBuffer nextInputBuffer;
@@ -141,8 +141,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     if (decoderFactory.supportsFormat(format)) {
       return RendererCapabilities.create(
           format.cryptoType == C.CRYPTO_TYPE_NONE ? C.FORMAT_HANDLED : C.FORMAT_UNSUPPORTED_DRM);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/DefaultBandwidthMeter.java
Patch:
@@ -281,14 +281,14 @@ public static synchronized DefaultBandwidthMeter getSingletonInstance(Context co
   private long sampleStartTimeMs;
   private long sampleBytesTransferred;
 
-  @C.NetworkType private int networkType;
+  private @C.NetworkType int networkType;
   private long totalElapsedTimeMs;
   private long totalBytesTransferred;
   private long bitrateEstimate;
   private long lastReportedBitrateEstimate;
 
   private boolean networkTypeOverrideSet;
-  @C.NetworkType private int networkTypeOverride;
+  private @C.NetworkType int networkTypeOverride;
 
   /** @deprecated Use {@link Builder} instead. */
   @Deprecated

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/LoadErrorHandlingPolicy.java
Patch:
@@ -130,7 +130,7 @@ public boolean isFallbackAvailable(@FallbackType int type) {
   /** A selected fallback option. */
   final class FallbackSelection {
     /** The type of fallback. */
-    @FallbackType public final int type;
+    public final @FallbackType int type;
     /** The duration for which the failing resource should be excluded, in milliseconds. */
     public final long exclusionDurationMs;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/ParsingLoadable.java
Patch:
@@ -104,7 +104,7 @@ public static <T> T load(
   private final StatsDataSource dataSource;
   private final Parser<? extends T> parser;
 
-  private volatile @Nullable T result;
+  @Nullable private volatile T result;
 
   /**
    * @param dataSource A {@link DataSource} to use when loading the data.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/DecoderVideoRenderer.java
Patch:
@@ -121,7 +121,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
 
   private DecoderInputBuffer inputBuffer;
   private VideoDecoderOutputBuffer outputBuffer;
-  @VideoOutputMode private int outputMode;
+  private @VideoOutputMode int outputMode;
   @Nullable private Object output;
   @Nullable private Surface outputSurface;
   @Nullable private VideoDecoderOutputBufferRenderer outputBufferRenderer;
@@ -130,7 +130,7 @@ public abstract class DecoderVideoRenderer extends BaseRenderer {
   @Nullable private DrmSession decoderDrmSession;
   @Nullable private DrmSession sourceDrmSession;
 
-  @ReinitializationState private int decoderReinitializationState;
+  private @ReinitializationState int decoderReinitializationState;
   private boolean decoderReceivedBuffers;
 
   private boolean renderedFirstFrameAfterReset;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/DummySurface.java
Patch:
@@ -105,8 +105,7 @@ public void release() {
     }
   }
 
-  @SecureMode
-  private static int getSecureMode(Context context) {
+  private static @SecureMode int getSecureMode(Context context) {
     if (GlUtil.isProtectedContentExtensionSupported(context)) {
       if (GlUtil.isSurfacelessContextExtensionSupported()) {
         return SECURE_MODE_SURFACELESS_CONTEXT;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/MediaCodecVideoRenderer.java
Patch:
@@ -131,7 +131,7 @@ public class MediaCodecVideoRenderer extends MediaCodecRenderer {
   @Nullable private Surface surface;
   @Nullable private DummySurface dummySurface;
   private boolean haveReportedFirstFrameRenderedForCurrentSurface;
-  @C.VideoScalingMode private int scalingMode;
+  private @C.VideoScalingMode int scalingMode;
   private boolean renderedFirstFrameAfterReset;
   private boolean mayRenderFirstFrameAfterEnableIfNotStarted;
   private boolean renderedFirstFrameAfterEnable;
@@ -342,8 +342,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
+  protected @Capabilities int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
       throws DecoderQueryException {
     String mimeType = format.sampleMimeType;
     if (!MimeTypes.isVideo(mimeType)) {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/VideoFrameReleaseHelper.java
Patch:
@@ -111,7 +111,7 @@ public final class VideoFrameReleaseHelper {
   private float surfacePlaybackFrameRate;
 
   private float playbackSpeed;
-  @C.VideoChangeFrameRateStrategy private int changeFrameRateStrategy;
+  private @C.VideoChangeFrameRateStrategy int changeFrameRateStrategy;
 
   private long vsyncDurationNs;
   private long vsyncOffsetNs;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/spherical/CameraMotionRenderer.java
Patch:
@@ -58,8 +58,7 @@ public String getName() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) {
+  public @Capabilities int supportsFormat(Format format) {
     return MimeTypes.APPLICATION_CAMERA_MOTION.equals(format.sampleMimeType)
         ? RendererCapabilities.create(C.FORMAT_HANDLED)
         : RendererCapabilities.create(C.FORMAT_UNSUPPORTED_TYPE);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/spherical/SceneRenderer.java
Patch:
@@ -50,8 +50,8 @@
   private @MonotonicNonNull SurfaceTexture surfaceTexture;
 
   // Used by other threads only
-  @C.StereoMode private volatile int defaultStereoMode;
-  @C.StereoMode private int lastStereoMode;
+  private volatile @C.StereoMode int defaultStereoMode;
+  private @C.StereoMode int lastStereoMode;
   @Nullable private byte[] lastProjectionData;
 
   // Methods called on any thread.

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/ExoPlayerTest.java
Patch:
@@ -11488,7 +11488,7 @@ public void handleMessage(ExoPlayer player, int messageType, @Nullable Object me
   private static final class PlayerStateGrabber extends PlayerRunnable {
 
     public boolean playWhenReady;
-    @Player.State public int playbackState;
+    public @Player.State int playbackState;
     @Nullable public Timeline timeline;
 
     @Override

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/audio/DecoderAudioRendererTest.java
Patch:
@@ -71,8 +71,7 @@ public String getName() {
           }
 
           @Override
-          @C.FormatSupport
-          protected int supportsFormatInternal(Format format) {
+          protected @C.FormatSupport int supportsFormatInternal(Format format) {
             return FORMAT_HANDLED;
           }
 

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/video/DecoderVideoRendererTest.java
Patch:
@@ -84,16 +84,15 @@ public void setUp() {
             /* maxDroppedFramesToNotify= */ -1) {
 
           private final Phaser inputBuffersInCodecPhaser = new Phaser();
-          @C.VideoOutputMode private int outputMode;
+          private @C.VideoOutputMode int outputMode;
 
           @Override
           public String getName() {
             return "TestVideoRenderer";
           }
 
           @Override
-          @Capabilities
-          public int supportsFormat(Format format) {
+          public @Capabilities int supportsFormat(Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/video/MediaCodecVideoRendererTest.java
Patch:
@@ -111,8 +111,8 @@ public void setUp() throws Exception {
             /* eventListener= */ eventListener,
             /* maxDroppedFramesToNotify= */ 1) {
           @Override
-          @Capabilities
-          protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format) {
+          protected @Capabilities int supportsFormat(
+              MediaCodecSelector mediaCodecSelector, Format format) {
             return RendererCapabilities.create(C.FORMAT_HANDLED);
           }
 

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/DashMediaPeriod.java
Patch:
@@ -937,7 +937,7 @@ private static final class TrackGroupInfo {
 
     public final int[] adaptationSetIndices;
     public final @C.TrackType int trackType;
-    @TrackGroupCategory public final int trackGroupCategory;
+    public final @TrackGroupCategory int trackGroupCategory;
 
     public final int eventStreamGroupIndex;
     public final int primaryTrackGroupIndex;

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -62,7 +62,7 @@ public final class DefaultHlsExtractorFactory implements HlsExtractorFactory {
         FileTypes.MP3,
       };
 
-  @DefaultTsPayloadReaderFactory.Flags private final int payloadReaderFactoryFlags;
+  private final @DefaultTsPayloadReaderFactory.Flags int payloadReaderFactoryFlags;
   private final boolean exposeCea608WhenMissingDeclarations;
 
   /**

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsChunkSource.java
Patch:
@@ -303,8 +303,7 @@ public long getAdjustedSeekPositionUs(long positionUs, SeekParameters seekParame
    *     has been {@link #CHUNK_PUBLICATION_STATE_REMOVED removed} or is definitely {@link
    *     #CHUNK_PUBLICATION_STATE_PUBLISHED published}.
    */
-  @ChunkPublicationState
-  public int getChunkPublicationState(HlsMediaChunk mediaChunk) {
+  public @ChunkPublicationState int getChunkPublicationState(HlsMediaChunk mediaChunk) {
     if (mediaChunk.partIndex == C.INDEX_UNSET) {
       // Chunks based on full segments can't be removed and are always published.
       return CHUNK_PUBLICATION_STATE_PUBLISHED;

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/playlist/HlsMediaPlaylist.java
Patch:
@@ -398,7 +398,7 @@ public RenditionReport(Uri playlistUri, long lastMediaSequence, int lastPartInde
   public static final int PLAYLIST_TYPE_EVENT = 2;
 
   /** The type of the playlist. See {@link PlaylistType}. */
-  @PlaylistType public final int playlistType;
+  public final @PlaylistType int playlistType;
   /**
    * The start offset in microseconds from the beginning of the playlist, as defined by
    * #EXT-X-START, or {@link C#TIME_UNSET} if undefined. The value is guaranteed to be between 0 and

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/AdTagLoader.java
Patch:
@@ -162,7 +162,7 @@
   /** Whether IMA has sent an ad event to pause content since the last resume content event. */
   private boolean imaPausedContent;
   /** The current ad playback state. */
-  @ImaAdState private int imaAdState;
+  private @ImaAdState int imaAdState;
   /** The current ad media info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */
   @Nullable private AdMediaInfo imaAdMediaInfo;
   /** The current ad info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ServerSideAdInsertionStreamRequest.java
Patch:
@@ -51,7 +51,7 @@ public static final class Builder {
     @Nullable private String authToken;
     @Nullable private String streamActivityMonitorId;
     private ImmutableMap<String, String> adTagParameters;
-    @ContentType public int format = C.TYPE_HLS;
+    public @ContentType int format = C.TYPE_HLS;
     private int loadVideoTimeoutMs;
 
     /** Creates a new instance. */
@@ -270,7 +270,7 @@ public ServerSideAdInsertionStreamRequest build() {
   @Nullable public final String contentUrl;
   @Nullable public final String authToken;
   @Nullable public final String streamActivityMonitorId;
-  @ContentType public int format = C.TYPE_HLS;
+  public @ContentType int format = C.TYPE_HLS;
   public final int loadVideoTimeoutMs;
 
   private ServerSideAdInsertionStreamRequest(

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspAuthenticationInfo.java
Patch:
@@ -56,7 +56,7 @@
   private static final String ALGORITHM = "MD5";
 
   /** The authentication mechanism. */
-  @AuthenticationMechanism public final int authenticationMechanism;
+  public final @AuthenticationMechanism int authenticationMechanism;
   /** The authentication realm. */
   public final String realm;
   /** The nonce used in digest authentication; empty if using {@link #BASIC} authentication. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspClient.java
Patch:
@@ -141,7 +141,7 @@ public interface PlaybackEventListener {
   @Nullable private String sessionId;
   @Nullable private KeepAliveMonitor keepAliveMonitor;
   @Nullable private RtspAuthenticationInfo rtspAuthenticationInfo;
-  @RtspState private int rtspState;
+  private @RtspState int rtspState;
   private boolean hasUpdatedTimelineAndTracks;
   private boolean receivedAuthorizationRequest;
   private boolean hasPendingPauseRequest;
@@ -204,8 +204,7 @@ public void start() throws IOException {
   }
 
   /** Returns the current {@link RtspState RTSP state}. */
-  @RtspState
-  public int getState() {
+  public @RtspState int getState() {
     return rtspState;
   }
 

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaPeriod.java
Patch:
@@ -775,8 +775,7 @@ public boolean isSampleQueueReady() {
       return sampleQueue.isReady(/* loadingFinished= */ canceled);
     }
 
-    @ReadDataResult
-    public int read(
+    public @ReadDataResult int read(
         FormatHolder formatHolder, DecoderInputBuffer buffer, @ReadFlags int readFlags) {
       return sampleQueue.read(formatHolder, buffer, readFlags, /* loadingFinished= */ canceled);
     }

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMessageChannel.java
Patch:
@@ -353,7 +353,7 @@ private static final class MessageParser {
 
     private final List<String> messageLines;
 
-    @ReadingState private int state;
+    private @ReadingState int state;
     private long messageBodyLength;
 
     /** Creates a new instance. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMessageUtil.java
Patch:
@@ -256,8 +256,7 @@ public static String toMethodString(@RtspRequest.Method int method) {
     }
   }
 
-  @RtspRequest.Method
-  private static int parseMethodString(String method) {
+  private static @RtspRequest.Method int parseMethodString(String method) {
     switch (method) {
       case "ANNOUNCE":
         return METHOD_ANNOUNCE;

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspRequest.java
Patch:
@@ -88,7 +88,7 @@
   /** The {@link Uri} to which this request is sent. */
   public final Uri uri;
   /** The request method, as defined in {@link Method}. */
-  @Method public final int method;
+  public final @Method int method;
   /** The headers of this request. */
   public final RtspHeaders headers;
   /** The body of this RTSP message, or empty string if absent. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/RtpH264Reader.java
Patch:
@@ -58,7 +58,7 @@
   private final RtpPayloadFormat payloadFormat;
 
   private @MonotonicNonNull TrackOutput trackOutput;
-  @C.BufferFlags private int bufferFlags;
+  private @C.BufferFlags int bufferFlags;
 
   private long firstReceivedTimestamp;
   private int previousSequenceNumber;
@@ -296,8 +296,7 @@ private static long toSampleUs(
             /* divisor= */ MEDIA_CLOCK_FREQUENCY);
   }
 
-  @C.BufferFlags
-  private static int getBufferFlagsFromNalType(int nalType) {
+  private static @C.BufferFlags int getBufferFlagsFromNalType(int nalType) {
     return nalType == NAL_UNIT_TYPE_IDR ? C.BUFFER_FLAG_KEY_FRAME : 0;
   }
 }

File: libraries/extractor/src/main/java/androidx/media3/extractor/BinarySearchSeeker.java
Patch:
@@ -423,7 +423,7 @@ public static final class TimestampSearchResult {
         new TimestampSearchResult(TYPE_NO_TIMESTAMP, C.TIME_UNSET, C.POSITION_UNSET);
 
     /** The type of the result. */
-    @Type private final int type;
+    private final @Type int type;
 
     /**
      * When {@link #type} is {@link #TYPE_POSITION_OVERESTIMATED}, the {@link

File: libraries/extractor/src/main/java/androidx/media3/extractor/TrackOutput.java
Patch:
@@ -40,7 +40,7 @@ public interface TrackOutput {
   final class CryptoData {
 
     /** The encryption mode used for the sample. */
-    @C.CryptoMode public final int cryptoMode;
+    public final @C.CryptoMode int cryptoMode;
 
     /** The encryption key associated with the sample. Its contents must not be modified. */
     public final byte[] encryptionKey;

File: libraries/extractor/src/main/java/androidx/media3/extractor/TrueHdSampleRechunker.java
Patch:
@@ -33,7 +33,7 @@ public final class TrueHdSampleRechunker {
   private boolean foundSyncframe;
   private int chunkSampleCount;
   private long chunkTimeUs;
-  @C.BufferFlags private int chunkFlags;
+  private @C.BufferFlags int chunkFlags;
   private int chunkSize;
   private int chunkOffset;
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/jpeg/JpegExtractor.java
Patch:
@@ -84,7 +84,7 @@ public final class JpegExtractor implements Extractor {
 
   private @MonotonicNonNull ExtractorOutput extractorOutput;
 
-  @State private int state;
+  private @State int state;
   private int marker;
   private int segmentLength;
   private long mp4StartPosition;
@@ -128,8 +128,8 @@ public void init(ExtractorOutput output) {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     switch (state) {
       case STATE_READING_MARKER:
         readMarker(input);

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp3/Mp3Extractor.java
Patch:
@@ -142,7 +142,7 @@ public final class Mp3Extractor implements Extractor {
   private static final int SEEK_HEADER_VBRI = 0x56425249;
   private static final int SEEK_HEADER_UNSET = 0;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final long forcedFirstSampleTimestampUs;
   private final ParsableByteArray scratch;
   private final MpegAudioUtil.Header synchronizedHeader;

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/AtomParsers.java
Patch:
@@ -1910,7 +1910,7 @@ private static final class StsdData {
 
     @Nullable public Format format;
     public int nalUnitLengthFieldLength;
-    @Track.Transformation public int requiredSampleTransformation;
+    public @Track.Transformation int requiredSampleTransformation;
 
     public StsdData(int numberOfEntries) {
       trackEncryptionBoxes = new TrackEncryptionBox[numberOfEntries];

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -132,7 +132,7 @@ public class FragmentedMp4Extractor implements Extractor {
   private static final int STATE_READING_SAMPLE_CONTINUE = 4;
 
   // Workarounds.
-  @Flags private final int flags;
+  private final @Flags int flags;
   @Nullable private final Track sideloadedTrack;
 
   // Sideloaded data.
@@ -1689,8 +1689,7 @@ public int getCurrentSampleSize() {
     }
 
     /** Returns the {@link C.BufferFlags} corresponding to the current sample. */
-    @C.BufferFlags
-    public int getCurrentSampleFlags() {
+    public @C.BufferFlags int getCurrentSampleFlags() {
       int flags =
           !currentlyInFragment
               ? moovSampleTable.flags[currentSampleIndex]

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/Track.java
Patch:
@@ -69,7 +69,7 @@ public final class Track {
    * One of {@code TRANSFORMATION_*}. Defines the transformation to apply before outputting each
    * sample.
    */
-  @Transformation public final int sampleTransformation;
+  public final @Transformation int sampleTransformation;
 
   /** Durations of edit list segments in the movie timescale. Null if there is no edit list. */
   @Nullable public final long[] editListDurations;

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/TrackEncryptionBox.java
Patch:
@@ -79,8 +79,7 @@ public TrackEncryptionBox(
             schemeToCryptoMode(schemeType), keyId, defaultEncryptedBlocks, defaultClearBlocks);
   }
 
-  @C.CryptoMode
-  private static int schemeToCryptoMode(@Nullable String schemeType) {
+  private static @C.CryptoMode int schemeToCryptoMode(@Nullable String schemeType) {
     if (schemeType == null) {
       // If unknown, assume cenc.
       return C.CRYPTO_MODE_AES_CTR;

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/SubtitleExtractor.java
Patch:
@@ -87,7 +87,7 @@ public class SubtitleExtractor implements Extractor {
   private @MonotonicNonNull ExtractorOutput extractorOutput;
   private @MonotonicNonNull TrackOutput trackOutput;
   private int bytesRead;
-  @State private int state;
+  private @State int state;
   private long seekTimeUs;
 
   /**

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/ttml/TextEmphasis.java
Patch:
@@ -97,13 +97,13 @@
           TtmlNode.ANNOTATION_POSITION_OUTSIDE);
 
   /** The text emphasis mark shape. */
-  @MarkShape public final int markShape;
+  public final @MarkShape int markShape;
 
   /** The fill style of the text emphasis mark. */
-  @TextEmphasisSpan.MarkFill public final int markFill;
+  public final @TextEmphasisSpan.MarkFill int markFill;
 
   /** The position of the text emphasis relative to the base text. */
-  @Position public final int position;
+  public final @Position int position;
 
   private TextEmphasis(
       @MarkShape int markShape,

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/Ac3Reader.java
Patch:
@@ -62,7 +62,7 @@ public final class Ac3Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/Ac4Reader.java
Patch:
@@ -60,7 +60,7 @@ public final class Ac4Reader implements ElementaryStreamReader {
   private @MonotonicNonNull String formatId;
   private @MonotonicNonNull TrackOutput output;
 
-  @State private int state;
+  private @State int state;
   private int bytesRead;
 
   // Used to find the header.

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/DefaultTsPayloadReaderFactory.java
Patch:
@@ -104,7 +104,7 @@ public final class DefaultTsPayloadReaderFactory implements TsPayloadReader.Fact
 
   private static final int DESCRIPTOR_TAG_CAPTION_SERVICE = 0x86;
 
-  @Flags private final int flags;
+  private final @Flags int flags;
   private final List<Format> closedCaptionFormats;
 
   public DefaultTsPayloadReaderFactory() {

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/H263Reader.java
Patch:
@@ -335,7 +335,7 @@ private static final class CsdBuffer {
     private static final int STATE_WAIT_FOR_VOP_START = 4;
 
     private boolean isFilling;
-    @State private int state;
+    private @State int state;
 
     public int length;
     public int volStartPosition;

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/TsExtractor.java
Patch:
@@ -118,7 +118,7 @@ public final class TsExtractor implements Extractor {
   private static final int BUFFER_SIZE = TS_PACKET_SIZE * 50;
   private static final int SNIFF_TS_PACKET_COUNT = 5;
 
-  @Mode private final int mode;
+  private final @Mode int mode;
   private final int timestampSearchBytes;
   private final List<TimestampAdjuster> timestampAdjusters;
   private final ParsableByteArray tsPacketBuffer;
@@ -298,8 +298,8 @@ public void release() {
   }
 
   @Override
-  @ReadResult
-  public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
+  public @ReadResult int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException {
     long inputLength = input.getLength();
     if (tracksEnded) {
       boolean canReadDuration = inputLength != C.LENGTH_UNSET && mode != MODE_HLS;

File: libraries/extractor/src/test/java/androidx/media3/extractor/mkv/DefaultEbmlReaderTest.java
Patch:
@@ -178,8 +178,7 @@ private static final class TestProcessor implements EbmlProcessor {
     private final List<String> events = new ArrayList<>();
 
     @Override
-    @EbmlProcessor.ElementType
-    public int getElementType(int id) {
+    public @EbmlProcessor.ElementType int getElementType(int id) {
       switch (id) {
         case ID_EBML:
         case ID_SEGMENT:

File: libraries/extractor/src/test/java/androidx/media3/extractor/text/ttml/TtmlStyleTest.java
Patch:
@@ -42,7 +42,7 @@ public final class TtmlStyleTest {
   private static final String FONT_FAMILY = "serif";
   @ColorInt private static final int FONT_COLOR = Color.WHITE;
   private static final float FONT_SIZE = 12.5f;
-  @TtmlStyle.FontSizeUnit private static final int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
+  private static final @TtmlStyle.FontSizeUnit int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;
   @ColorInt private static final int BACKGROUND_COLOR = Color.BLACK;
   private static final int RUBY_TYPE = TtmlStyle.RUBY_TYPE_TEXT;
   private static final int RUBY_POSITION = TextAnnotation.POSITION_AFTER;

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/Action.java
Patch:
@@ -495,7 +495,7 @@ protected void doActionImpl(
   /** Calls {@link Player#setRepeatMode(int)}. */
   public static final class SetRepeatMode extends Action {
 
-    @Player.RepeatMode private final int repeatMode;
+    private final @Player.RepeatMode int repeatMode;
 
     /**
      * @param tag A tag to use for logging.
@@ -742,7 +742,7 @@ public static final class WaitForTimelineChanged extends Action {
 
     @Nullable private final Timeline expectedTimeline;
     private final boolean ignoreExpectedReason;
-    @Player.TimelineChangeReason private final int expectedReason;
+    private final @Player.TimelineChangeReason int expectedReason;
 
     /**
      * Creates action waiting for a timeline change for a given reason.
@@ -909,7 +909,7 @@ protected void doActionImpl(
    */
   public static final class WaitForPlaybackState extends Action {
 
-    @Player.State private final int targetPlaybackState;
+    private final @Player.State int targetPlaybackState;
 
     /**
      * @param tag A tag to use for logging.

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/CapturingAudioSink.java
Patch:
@@ -93,7 +93,7 @@ public void dump(Dumper dumper) {
 
   private static final class DumpableConfiguration implements Dumper.Dumpable {
 
-    @C.PcmEncoding private final int inputPcmEncoding;
+    private final @C.PcmEncoding int inputPcmEncoding;
     private final int inputChannelCount;
     private final int inputSampleRate;
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/DownloadBuilder.java
Patch:
@@ -47,7 +47,7 @@ public final class DownloadBuilder {
   @Nullable private String cacheKey;
   private byte[] customMetadata;
 
-  @Download.State private int state;
+  private @Download.State int state;
   private long startTimeMs;
   private long updateTimeMs;
   private long contentLength;

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/DumpFileAsserts.java
Patch:
@@ -72,7 +72,7 @@ public class DumpFileAsserts {
   /** Write output to folder {@code /storage/emulated/0/Android/data} of device. */
   private static final int WRITE_TO_DEVICE = 1 << 1;
 
-  @DumpFilesAction private static final int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
+  private static final @DumpFilesAction int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
 
   private DumpFileAsserts() {}
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeExoMediaDrm.java
Patch:
@@ -398,8 +398,7 @@ public CryptoConfig createCryptoConfig(byte[] sessionId) throws MediaCryptoExcep
   }
 
   @Override
-  @C.CryptoType
-  public int getCryptoType() {
+  public @C.CryptoType int getCryptoType() {
     return FakeCryptoConfig.TYPE;
   }
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeRenderer.java
Patch:
@@ -162,8 +162,7 @@ public boolean isEnded() {
   }
 
   @Override
-  @Capabilities
-  public int supportsFormat(Format format) throws ExoPlaybackException {
+  public @Capabilities int supportsFormat(Format format) throws ExoPlaybackException {
     int trackType = MimeTypes.getTrackType(format.sampleMimeType);
     return trackType != C.TRACK_TYPE_UNKNOWN && trackType == getTrackType()
         ? RendererCapabilities.create(C.FORMAT_HANDLED, ADAPTIVE_SEAMLESS, TUNNELING_NOT_SUPPORTED)

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeSampleStream.java
Patch:
@@ -295,7 +295,7 @@ private void maybeNotifyDownstreamFormat(long timeUs) {
 
   private static class SampleInfo {
     public final byte[] data;
-    @C.BufferFlags public final int flags;
+    public final @C.BufferFlags int flags;
     public final long timeUs;
 
     public SampleInfo(byte[] data, @C.BufferFlags int flags, long timeUs) {

File: libraries/test_utils_robolectric/src/main/java/androidx/media3/test/utils/robolectric/TestDownloadManagerListener.java
Patch:
@@ -44,7 +44,7 @@ public final class TestDownloadManagerListener implements DownloadManager.Listen
   private final ConditionVariable initializedCondition;
   private final ConditionVariable idleCondition;
 
-  @Download.FailureReason private int failureReason;
+  private @Download.FailureReason int failureReason;
 
   public TestDownloadManagerListener(DownloadManager downloadManager) {
     this.downloadManager = downloadManager;

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -542,7 +542,7 @@ public interface DebugViewProvider {
 
   @Nullable private MuxerWrapper muxerWrapper;
   @Nullable private ExoPlayer player;
-  @ProgressState private int progressState;
+  private @ProgressState int progressState;
 
   private Transformer(
       Context context,
@@ -743,8 +743,7 @@ public Looper getApplicationLooper() {
    * @return The {@link ProgressState}.
    * @throws IllegalStateException If this method is called from the wrong thread.
    */
-  @ProgressState
-  public int getProgress(ProgressHolder progressHolder) {
+  public @ProgressState int getProgress(ProgressHolder progressHolder) {
     verifyApplicationThread();
     if (progressState == PROGRESS_STATE_AVAILABLE) {
       Player player = checkNotNull(this.player);

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerBaseRenderer.java
Patch:
@@ -67,8 +67,7 @@ public TransformerBaseRenderer(
    * @return The {@link Capabilities} for this format.
    */
   @Override
-  @Capabilities
-  public final int supportsFormat(Format format) {
+  public final @Capabilities int supportsFormat(Format format) {
     return RendererCapabilities.create(
         MimeTypes.getTrackType(format.sampleMimeType) == getTrackType()
             ? C.FORMAT_HANDLED

File: libraries/common/src/main/java/androidx/media3/common/FileTypes.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.common;
 
 import static androidx.media3.common.MimeTypes.normalizeMimeType;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import androidx.annotation.IntDef;
@@ -25,6 +26,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.List;
 import java.util.Map;
 
@@ -39,6 +41,7 @@ public final class FileTypes {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     UNKNOWN, AC3, AC4, ADTS, AMR, FLAC, FLV, MATROSKA, MP3, MP4, OGG, PS, TS, WAV, WEBVTT, JPEG
   })

File: libraries/common/src/main/java/androidx/media3/common/PlaybackException.java
Patch:
@@ -410,6 +410,7 @@ public boolean errorInfoEquals(@Nullable PlaybackException other) {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       open = true,
       value = {

File: libraries/common/src/main/java/androidx/media3/common/text/TextAnnotation.java
Patch:
@@ -15,12 +15,14 @@
  */
 package androidx.media3.common.text;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import androidx.annotation.IntDef;
 import androidx.media3.common.util.UnstableApi;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 
 /** Properties of a text annotation (i.e. ruby, text emphasis marks). */
 @UnstableApi
@@ -57,6 +59,7 @@ public final class TextAnnotation {
    */
   @Documented
   @Retention(SOURCE)
+  @Target(TYPE_USE)
   @IntDef({POSITION_UNKNOWN, POSITION_BEFORE, POSITION_AFTER})
   public @interface Position {}
 

File: libraries/common/src/main/java/androidx/media3/common/util/NotificationUtil.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.common.util;
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.app.Notification;
@@ -29,6 +30,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** Utility methods for displaying {@link Notification Notifications}. */
 @SuppressLint("InlinedApi")
@@ -42,6 +44,7 @@ public final class NotificationUtil {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     IMPORTANCE_UNSPECIFIED,
     IMPORTANCE_NONE,

File: libraries/datasource/src/main/java/androidx/media3/datasource/cache/CacheDataSource.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.common.util.Util.castNonNull;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import androidx.annotation.IntDef;
@@ -42,6 +43,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -330,6 +332,7 @@ public interface EventListener {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {

File: libraries/decoder_flac/src/main/java/androidx/media3/decoder/flac/FlacExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.decoder.flac;
 
 import static androidx.media3.common.util.Util.getPcmEncoding;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -41,6 +42,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.nio.ByteBuffer;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNull;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
@@ -63,6 +65,7 @@ public final class FlacExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_DISABLE_ID3_METADATA})

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/AudioFocusManager.java
Patch:
@@ -64,6 +64,7 @@ public interface PlayerControl {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     PLAYER_COMMAND_DO_NOT_PLAY,
     PLAYER_COMMAND_WAIT_FOR_CALLBACK,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/drm/DefaultDrmSessionManager.java
Patch:
@@ -19,6 +19,7 @@
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.common.util.Assertions.checkState;
 import static androidx.media3.common.util.Assertions.checkStateNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.media.ResourceBusyException;
@@ -49,6 +50,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -263,6 +265,7 @@ private MissingSchemeDataException(UUID uuid) {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({MODE_PLAYBACK, MODE_QUERY, MODE_DOWNLOAD, MODE_RELEASE})
   public @interface Mode {}
   /**

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ClippingMediaSource.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -32,6 +33,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 
 /**
@@ -50,6 +52,7 @@ public static final class IllegalClippingException extends IOException {
      */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({REASON_INVALID_PERIOD_COUNT, REASON_NOT_SEEKABLE_TO_START, REASON_START_EXCEEDS_END})
     public @interface Reason {}
     /** The wrapped source doesn't consist of a single period. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MergingMediaSource.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -32,6 +33,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -52,6 +54,7 @@ public static final class IllegalMergeException extends IOException {
     /** The reason the merge failed. One of {@link #REASON_PERIOD_COUNT_MISMATCH}. */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({REASON_PERIOD_COUNT_MISMATCH})
     public @interface Reason {}
     /** The sources have different period counts. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ads/AdsMediaSource.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.common.util.Assertions.checkState;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import android.os.Handler;
@@ -47,6 +48,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -74,6 +76,7 @@ public static final class AdLoadException extends IOException {
      */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({TYPE_AD, TYPE_AD_GROUP, TYPE_ALL_ADS, TYPE_UNEXPECTED})
     public @interface Type {}
     /** Type for when an ad failed to load. The ad will be skipped. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/DefaultTrackSelector.java
Patch:
@@ -1428,6 +1428,7 @@ private static String keyForField(@FieldNumber int field) {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({SELECTION_ELIGIBILITY_NO, SELECTION_ELIGIBILITY_FIXED, SELECTION_ELIGIBILITY_ADAPTIVE})
   protected @interface SelectionEligibility {}
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/LoadErrorHandlingPolicy.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.exoplayer.upstream;
 
 import static androidx.media3.common.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -29,6 +30,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * A policy that defines how load errors are handled.
@@ -54,6 +56,7 @@ public interface LoadErrorHandlingPolicy {
   /** Fallback type. One of {@link #FALLBACK_TYPE_LOCATION} or {@link #FALLBACK_TYPE_TRACK}. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FALLBACK_TYPE_LOCATION, FALLBACK_TYPE_TRACK})
   @interface FallbackType {}
 

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/playlist/HlsMediaPlaylist.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import androidx.annotation.IntDef;
@@ -31,6 +32,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -387,6 +389,7 @@ public RenditionReport(Uri playlistUri, long lastMediaSequence, int lastPartInde
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({PLAYLIST_TYPE_UNKNOWN, PLAYLIST_TYPE_VOD, PLAYLIST_TYPE_EVENT})
   public @interface PlaylistType {}
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/flac/FlacExtractor.java
Patch:
@@ -67,6 +67,7 @@ public final class FlacExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_DISABLE_ID3_METADATA})

File: libraries/extractor/src/main/java/androidx/media3/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -21,6 +21,7 @@
 import static androidx.media3.common.util.Assertions.checkStateNotNull;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import android.util.SparseArray;
@@ -59,6 +60,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.util.ArrayList;
@@ -87,6 +89,7 @@ public class MatroskaExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_DISABLE_SEEK_FOR_CUES})

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -21,6 +21,7 @@
 import static androidx.media3.common.util.Util.nullSafeArrayCopy;
 import static androidx.media3.extractor.mp4.AtomParsers.parseTraks;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import android.util.SparseArray;
@@ -57,6 +58,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -80,6 +82,7 @@ public class FragmentedMp4Extractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {

File: libraries/extractor/src/main/java/androidx/media3/extractor/mp4/Mp4Extractor.java
Patch:
@@ -76,6 +76,7 @@ public final class Mp4Extractor implements Extractor, SeekMap {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/webvtt/WebvttCssStyle.java
Patch:
@@ -51,6 +51,7 @@ public final class WebvttCssStyle {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {UNSPECIFIED, STYLE_NORMAL, STYLE_BOLD, STYLE_ITALIC, STYLE_BOLD_ITALIC})
@@ -67,6 +68,7 @@ public final class WebvttCssStyle {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({UNSPECIFIED, FONT_SIZE_UNIT_PIXEL, FONT_SIZE_UNIT_EM, FONT_SIZE_UNIT_PERCENT})
   public @interface FontSizeUnit {}
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/AdtsExtractor.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.extractor.metadata.id3.Id3Decoder.ID3_HEADER_LENGTH;
 import static androidx.media3.extractor.metadata.id3.Id3Decoder.ID3_TAG;
 import static androidx.media3.extractor.ts.TsPayloadReader.FLAG_DATA_ALIGNMENT_INDICATOR;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.media3.common.C;
@@ -41,6 +42,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -58,6 +60,7 @@ public final class AdtsExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {FLAG_ENABLE_CONSTANT_BITRATE_SEEKING, FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS})

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/TsExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.extractor.ts;
 
 import static androidx.media3.extractor.ts.TsPayloadReader.FLAG_PAYLOAD_UNIT_START_INDICATOR;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.SparseArray;
 import android.util.SparseBooleanArray;
@@ -45,6 +46,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -65,6 +67,7 @@ public final class TsExtractor implements Extractor {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({MODE_MULTI_PMT, MODE_SINGLE_PMT, MODE_HLS})
   public @interface Mode {}
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -23,6 +23,7 @@
 import static androidx.media3.exoplayer.DefaultLoadControl.DEFAULT_MAX_BUFFER_MS;
 import static androidx.media3.exoplayer.DefaultLoadControl.DEFAULT_MIN_BUFFER_MS;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.graphics.Matrix;
@@ -63,6 +64,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /**
@@ -503,6 +505,7 @@ public interface DebugViewProvider {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     PROGRESS_STATE_WAITING_FOR_AVAILABILITY,
     PROGRESS_STATE_AVAILABLE,

File: libraries/ui/src/main/java/androidx/media3/ui/LegacyPlayerView.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.media3.common.Player.COMMAND_GET_TEXT;
 import static androidx.media3.common.Player.COMMAND_SET_VIDEO_SURFACE;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.content.Context;
@@ -67,6 +68,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
@@ -265,6 +267,7 @@ public class LegacyPlayerView extends FrameLayout implements AdViewProvider {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({SHOW_BUFFERING_NEVER, SHOW_BUFFERING_WHEN_PLAYING, SHOW_BUFFERING_ALWAYS})
   public @interface ShowBuffering {}
   /** The buffering view is never shown. */

File: libraries/ui/src/main/java/androidx/media3/ui/PlayerView.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.common.Player.COMMAND_GET_TEXT;
 import static androidx.media3.common.Player.COMMAND_SET_VIDEO_SURFACE;
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.content.Context;
@@ -68,6 +69,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
@@ -187,6 +189,7 @@ public class PlayerView extends FrameLayout implements AdViewProvider {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({SHOW_BUFFERING_NEVER, SHOW_BUFFERING_WHEN_PLAYING, SHOW_BUFFERING_ALWAYS})
   public @interface ShowBuffering {}
   /** The buffering view is never shown. */

File: libraries/ui/src/main/java/androidx/media3/ui/SubtitleView.java
Patch:
@@ -16,6 +16,7 @@
  */
 package androidx.media3.ui;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.content.Context;
@@ -36,6 +37,7 @@
 import androidx.media3.common.util.Util;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -113,6 +115,7 @@ void update(
    */
   @Documented
   @Retention(SOURCE)
+  @Target(TYPE_USE)
   @IntDef({VIEW_TYPE_CANVAS, VIEW_TYPE_WEB})
   public @interface ViewType {}
 

File: libraries/common/src/main/java/androidx/media3/common/C.java
Patch:
@@ -745,6 +745,7 @@ private C() {}
   @UnstableApi
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       open = true,
       value = {

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MediaLoadData.java
Patch:
@@ -43,7 +43,7 @@ public final class MediaLoadData {
    * One of the {@link SelectionReason selection reasons} if the data belongs to a track. {@link
    * C#SELECTION_REASON_UNKNOWN} otherwise.
    */
-  public final int trackSelectionReason;
+  public final @C.SelectionReason int trackSelectionReason;
   /**
    * Optional data associated with the selection of the track to which the data belongs. Null if the
    * data does not belong to a track.

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/MergingMediaPeriod.java
Patch:
@@ -548,7 +548,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return trackSelection.getSelectionReason();
     }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/AdaptiveTrackSelection.java
Patch:
@@ -316,7 +316,7 @@ protected AdaptiveTrackSelection createAdaptiveTrackSelection(
 
   private float playbackSpeed;
   private int selectedIndex;
-  private int reason;
+  private @C.SelectionReason int reason;
   private long lastBufferEvaluationMs;
   @Nullable private MediaChunk lastBufferEvaluationMediaChunk;
 
@@ -449,7 +449,7 @@ public void updateSelectedTrack(
     }
 
     int previousSelectedIndex = selectedIndex;
-    int previousReason = reason;
+    @C.SelectionReason int previousReason = reason;
     int formatIndexOfPreviousChunk =
         queue.isEmpty() ? C.INDEX_UNSET : indexOf(Iterables.getLast(queue).trackFormat);
     if (formatIndexOfPreviousChunk != C.INDEX_UNSET) {
@@ -487,7 +487,7 @@ public int getSelectedIndex() {
   }
 
   @Override
-  public int getSelectionReason() {
+  public @C.SelectionReason int getSelectionReason() {
     return reason;
   }
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/trackselection/ExoTrackSelection.java
Patch:
@@ -125,6 +125,7 @@ ExoTrackSelection[] createTrackSelections(
   int getSelectedIndex();
 
   /** Returns the reason for the current track selection. */
+  @C.SelectionReason
   int getSelectionReason();
 
   /** Returns optional data associated with the current track selection. */

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsChunkSource.java
Patch:
@@ -915,7 +915,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeTrackSelection.java
Patch:
@@ -116,7 +116,7 @@ public int getSelectedIndex() {
   }
 
   @Override
-  public int getSelectionReason() {
+  public @C.SelectionReason int getSelectionReason() {
     return C.SELECTION_REASON_UNKNOWN;
   }
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/MediaPeriodAsserts.java
Patch:
@@ -240,7 +240,7 @@ public int getSelectedIndex() {
     }
 
     @Override
-    public int getSelectionReason() {
+    public @C.SelectionReason int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java
Patch:
@@ -161,7 +161,7 @@ protected DashManifest parseMediaPresentationDescription(XmlPullParser xpp, Uri
       } else if (XmlPullParserUtil.isStartTag(xpp, "UTCTiming")) {
         utcTiming = parseUtcTiming(xpp);
       } else if (XmlPullParserUtil.isStartTag(xpp, "Location")) {
-        location = Uri.parse(xpp.nextText());
+        location = UriUtil.resolveToUri(documentBaseUri.toString(), xpp.nextText());
       } else if (XmlPullParserUtil.isStartTag(xpp, "ServiceDescription")) {
         serviceDescription = parseServiceDescription(xpp);
       } else if (XmlPullParserUtil.isStartTag(xpp, "Period") && !seenEarlyAccessPeriod) {

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/manifest/DashManifestParser.java
Patch:
@@ -163,7 +163,7 @@ protected DashManifest parseMediaPresentationDescription(XmlPullParser xpp, Uri
       } else if (XmlPullParserUtil.isStartTag(xpp, "UTCTiming")) {
         utcTiming = parseUtcTiming(xpp);
       } else if (XmlPullParserUtil.isStartTag(xpp, "Location")) {
-        location = Uri.parse(xpp.nextText());
+        location = UriUtil.resolveToUri(documentBaseUri.toString(), xpp.nextText());
       } else if (XmlPullParserUtil.isStartTag(xpp, "ServiceDescription")) {
         serviceDescription = parseServiceDescription(xpp);
       } else if (XmlPullParserUtil.isStartTag(xpp, "Period") && !seenEarlyAccessPeriod) {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/DefaultExtractorsFactoryTest.java
Patch:
@@ -20,6 +20,7 @@
 import android.net.Uri;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.extractor.amr.AmrExtractor;
+import com.google.android.exoplayer2.extractor.avi.AviExtractor;
 import com.google.android.exoplayer2.extractor.flac.FlacExtractor;
 import com.google.android.exoplayer2.extractor.flv.FlvExtractor;
 import com.google.android.exoplayer2.extractor.jpeg.JpegExtractor;
@@ -69,6 +70,7 @@ public void createExtractors_withoutMediaInfo_optimizesSniffingOrder() {
             AdtsExtractor.class,
             Ac3Extractor.class,
             Ac4Extractor.class,
+            AviExtractor.class,
             Mp3Extractor.class,
             JpegExtractor.class)
         .inOrder();
@@ -112,6 +114,7 @@ public void createExtractors_withMediaInfo_optimizesSniffingOrder() {
             AdtsExtractor.class,
             Ac3Extractor.class,
             Ac4Extractor.class,
+            AviExtractor.class,
             JpegExtractor.class)
         .inOrder();
   }

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdTagLoader.java
Patch:
@@ -23,6 +23,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.net.Uri;
@@ -69,6 +70,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -108,6 +110,7 @@
   /** The state of ad playback. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({IMA_AD_STATE_NONE, IMA_AD_STATE_PLAYING, IMA_AD_STATE_PAUSED})
   private @interface ImaAdState {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/DeviceInfo.java
Patch:
@@ -87,6 +87,7 @@ public int hashCode() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_PLAYBACK_TYPE, FIELD_MIN_VOLUME, FIELD_MAX_VOLUME})
   private @interface FieldNumber {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/HeartRating.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2;
 
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.IntDef;
@@ -24,6 +25,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * A rating expressed as "heart" or "no heart". It can be used to indicate whether the content is a
@@ -80,6 +82,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_RATED, FIELD_IS_HEART})
   private @interface FieldNumber {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/MediaMetadata.java
Patch:
@@ -828,6 +828,7 @@ public int hashCode() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_TITLE,
     FIELD_ARTIST,

File: library/common/src/main/java/com/google/android/exoplayer2/PercentageRating.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2;
 
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.FloatRange;
@@ -25,6 +26,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** A rating expressed as a percentage. */
 public final class PercentageRating extends Rating {
@@ -78,6 +80,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_PERCENT})
   private @interface FieldNumber {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -600,6 +600,7 @@ public int hashCode() {
     // Bundleable implementation.
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({
       FIELD_MEDIA_ITEM_INDEX,
       FIELD_MEDIA_ITEM,
@@ -894,6 +895,7 @@ public int hashCode() {
 
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({FIELD_COMMANDS})
     private @interface FieldNumber {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/StarRating.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2;
 
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.FloatRange;
@@ -26,6 +27,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** A rating expressed as a fractional number of stars. */
 public final class StarRating extends Rating {
@@ -105,6 +107,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_MAX_STARS, FIELD_STAR_RATING})
   private @interface FieldNumber {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/ThumbRating.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2;
 
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.IntDef;
@@ -24,6 +25,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** A rating expressed as "thumbs up" or "thumbs down". */
 public final class ThumbRating extends Rating {
@@ -77,6 +79,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_RATED, FIELD_IS_THUMBS_UP})
   private @interface FieldNumber {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/source/TrackGroup.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.source;
 
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.CheckResult;
@@ -31,6 +32,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Arrays;
 import java.util.List;
 
@@ -138,6 +140,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_FORMATS, FIELD_ID})
   private @interface FieldNumber {}
 

File: library/common/src/main/java/com/google/android/exoplayer2/text/Cue.java
Patch:
@@ -961,6 +961,7 @@ public Cue build() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_TEXT,
     FIELD_TEXT_ALIGNMENT,

File: library/common/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelectionParameters.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.BundleableUtil.fromNullableBundle;
 import static com.google.common.base.MoreObjects.firstNonNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.graphics.Point;
@@ -36,6 +37,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Locale;
 import java.util.Set;
 import org.checkerframework.checker.initialization.qual.UnknownInitialization;
@@ -978,6 +980,7 @@ public int hashCode() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_PREFERRED_AUDIO_LANGUAGES,
     FIELD_PREFERRED_AUDIO_ROLE_FLAGS,

File: library/core/src/main/java/com/google/android/exoplayer2/AudioFocusManager.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2;
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.media.AudioFocusRequest;
@@ -32,6 +33,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /** Manages requesting and responding to changes in audio focus. */
@@ -76,6 +78,7 @@ public interface PlayerControl {
   /** Audio focus state. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     AUDIO_FOCUS_STATE_NO_FOCUS,
     AUDIO_FOCUS_STATE_HAVE_FOCUS,

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioTrackPositionTracker.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.media.AudioTimestamp;
 import android.media.AudioTrack;
@@ -30,6 +31,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.lang.reflect.Method;
 
 /**
@@ -111,6 +113,7 @@ void onSystemTimeUsMismatch(
   /** {@link AudioTrack} playback states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({PLAYSTATE_STOPPED, PLAYSTATE_PAUSED, PLAYSTATE_PLAYING})
   private @interface PlayState {}
   /** @see AudioTrack#PLAYSTATE_STOPPED */

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DecoderAudioRenderer.java
Patch:
@@ -21,6 +21,7 @@
 import static com.google.android.exoplayer2.source.SampleStream.FLAG_REQUIRE_FORMAT;
 import static com.google.common.base.MoreObjects.firstNonNull;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Handler;
 import android.os.SystemClock;
@@ -93,6 +94,7 @@ public abstract class DecoderAudioRenderer<
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @java.lang.annotation.Target(TYPE_USE)
   @IntDef({
     REINITIALIZATION_STATE_NONE,
     REINITIALIZATION_STATE_SIGNAL_END_OF_STREAM,

File: library/core/src/main/java/com/google/android/exoplayer2/audio/SilenceSkippingAudioProcessor.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.audio;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import com.google.android.exoplayer2.C;
@@ -24,6 +25,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.nio.ByteBuffer;
 
 /**
@@ -51,6 +53,7 @@ public final class SilenceSkippingAudioProcessor extends BaseAudioProcessor {
   /** Trimming states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_NOISY,
     STATE_MAYBE_SILENT,

File: library/core/src/main/java/com/google/android/exoplayer2/text/TextRenderer.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Handler;
 import android.os.Handler.Callback;
@@ -36,6 +37,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Collections;
 import java.util.List;
 
@@ -52,6 +54,7 @@ public final class TextRenderer extends BaseRenderer implements Callback {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     REPLACEMENT_STATE_NONE,
     REPLACEMENT_STATE_SIGNAL_END_OF_STREAM,

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/Loader.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.upstream;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.os.Handler;
@@ -33,6 +34,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -143,6 +145,7 @@ public interface ReleaseCallback {
   /** Types of action that can be taken in response to a load error. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     ACTION_TYPE_RETRY,
     ACTION_TYPE_RETRY_AND_RESET_ERROR_COUNT,

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaPeriod.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.source.dash;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import android.util.SparseArray;
@@ -60,6 +61,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.IdentityHashMap;
@@ -911,6 +913,7 @@ private static final class TrackGroupInfo {
 
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({CATEGORY_PRIMARY, CATEGORY_EMBEDDED, CATEGORY_MANIFEST_EVENTS})
     public @interface TrackGroupCategory {}
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/flac/FlacExtractor.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -41,6 +42,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /**
@@ -77,6 +79,7 @@ public final class FlacExtractor implements Extractor {
   /** Parser state. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READ_ID3_METADATA,
     STATE_GET_STREAM_MARKER_AND_INFO_BLOCK_BYTES,

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.extractor.flv;
 
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import com.google.android.exoplayer2.C;
@@ -32,6 +33,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -44,6 +46,7 @@ public final class FlvExtractor implements Extractor {
   /** Extractor states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READING_FLV_HEADER,
     STATE_SKIPPING_TO_TAG_HEADER,

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/jpeg/JpegExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.extractor.jpeg;
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -36,6 +37,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /** Extracts JPEG image using the Exif format. */
@@ -44,6 +46,7 @@ public final class JpegExtractor implements Extractor {
   /** Parser states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READING_MARKER,
     STATE_READING_SEGMENT_LENGTH,

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac3Reader.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.extractor.ts;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -33,6 +34,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -41,6 +43,7 @@ public final class Ac3Reader implements ElementaryStreamReader {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({STATE_FINDING_SYNC, STATE_READING_HEADER, STATE_READING_SAMPLE})
   private @interface State {}
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac4Reader.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.extractor.ts;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -33,6 +34,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -41,6 +43,7 @@ public final class Ac4Reader implements ElementaryStreamReader {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({STATE_FINDING_SYNC, STATE_READING_HEADER, STATE_READING_SAMPLE})
   private @interface State {}
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/ssa/SsaStyle.java
Patch:
@@ -18,6 +18,7 @@
 
 import static com.google.android.exoplayer2.text.ssa.SsaDecoder.STYLE_LINE_PREFIX;
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.graphics.Color;
@@ -35,6 +36,7 @@
 import com.google.common.primitives.Ints;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -61,6 +63,7 @@
    *   <li>{@link #SSA_ALIGNMENT_TOP_RIGHT}
    * </ul>
    */
+  @Target(TYPE_USE)
   @IntDef({
     SSA_ALIGNMENT_UNKNOWN,
     SSA_ALIGNMENT_BOTTOM_LEFT,

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCueParser.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.text.webvtt;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.graphics.Color;
@@ -46,6 +47,7 @@
 import com.google.android.exoplayer2.util.Util;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -74,6 +76,7 @@ public final class WebvttCueParser {
    */
   @Documented
   @Retention(SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     TEXT_ALIGNMENT_START,
     TEXT_ALIGNMENT_CENTER,

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspClient.java
Patch:
@@ -35,6 +35,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
 import static com.google.common.base.Strings.nullToEmpty;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import android.os.Handler;
@@ -61,6 +62,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.net.Socket;
 import java.util.ArrayDeque;
 import java.util.HashMap;
@@ -78,6 +80,7 @@
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({RTSP_STATE_UNINITIALIZED, RTSP_STATE_INIT, RTSP_STATE_READY, RTSP_STATE_PLAYING})
   public @interface RtspState {}
   /** RTSP uninitialized state, the state before sending any SETUP request. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageChannel.java
Patch:
@@ -19,6 +19,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkArgument;
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Handler;
 import android.os.HandlerThread;
@@ -42,6 +43,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.net.Socket;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
@@ -339,6 +341,7 @@ private static final class MessageParser {
 
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({STATE_READING_FIRST_LINE, STATE_READING_HEADER, STATE_READING_BODY})
     @interface ReadingState {}
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DumpFileAsserts.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.testutil;
 
 import static com.google.common.truth.Truth.assertWithMessage;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import androidx.annotation.IntDef;
@@ -28,6 +29,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * Helper class to enable assertions based on golden-data dump files.
@@ -51,6 +53,7 @@ public class DumpFileAsserts {
   /** Possible actions to take with the dumps passed to {@link #assertOutput}. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {COMPARE_WITH_EXISTING, WRITE_TO_LOCAL, WRITE_TO_DEVICE})

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/WebServerDispatcher.java
Patch:
@@ -21,6 +21,7 @@
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import androidx.annotation.IntDef;
@@ -33,6 +34,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Arrays;
 import java.util.List;
 import java.util.regex.Matcher;
@@ -66,6 +68,7 @@ public static class Resource {
      */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({GZIP_SUPPORT_DISABLED, GZIP_SUPPORT_ENABLED, GZIP_SUPPORT_FORCED})
     private @interface GzipSupport {}
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
Patch:
@@ -249,7 +249,10 @@
  * a layout file. This is achieved by setting the {@code player_layout_id} attribute on a
  * PlayerView. This will cause the specified layout to be inflated instead of {@code
  * exo_player_view.xml} for only the instance on which the attribute is set.
+ *
+ * @deprecated Use {@link StyledPlayerView} instead.
  */
+@Deprecated
 public class PlayerView extends FrameLayout implements AdViewProvider {
 
   /**

File: libraries/common/src/main/java/androidx/media3/common/DeviceInfo.java
Patch:
@@ -89,6 +89,7 @@ public int hashCode() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_PLAYBACK_TYPE, FIELD_MIN_VOLUME, FIELD_MAX_VOLUME})
   private @interface FieldNumber {}
 

File: libraries/common/src/main/java/androidx/media3/common/HeartRating.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.common;
 
 import static androidx.media3.common.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.IntDef;
@@ -25,6 +26,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * A rating expressed as "heart" or "no heart". It can be used to indicate whether the content is a
@@ -81,6 +83,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_RATED, FIELD_IS_HEART})
   private @interface FieldNumber {}
 

File: libraries/common/src/main/java/androidx/media3/common/MediaMetadata.java
Patch:
@@ -833,6 +833,7 @@ public int hashCode() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_TITLE,
     FIELD_ARTIST,

File: libraries/common/src/main/java/androidx/media3/common/PercentageRating.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.common;
 
 import static androidx.media3.common.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.FloatRange;
@@ -26,6 +27,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** A rating expressed as a percentage. */
 public final class PercentageRating extends Rating {
@@ -79,6 +81,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_PERCENT})
   private @interface FieldNumber {}
 

File: libraries/common/src/main/java/androidx/media3/common/Player.java
Patch:
@@ -598,6 +598,7 @@ public int hashCode() {
     // Bundleable implementation.
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({
       FIELD_MEDIA_ITEM_INDEX,
       FIELD_MEDIA_ITEM,
@@ -895,6 +896,7 @@ public int hashCode() {
 
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({FIELD_COMMANDS})
     private @interface FieldNumber {}
 

File: libraries/common/src/main/java/androidx/media3/common/StarRating.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.common;
 
 import static androidx.media3.common.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.FloatRange;
@@ -27,6 +28,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** A rating expressed as a fractional number of stars. */
 public final class StarRating extends Rating {
@@ -106,6 +108,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_MAX_STARS, FIELD_STAR_RATING})
   private @interface FieldNumber {}
 

File: libraries/common/src/main/java/androidx/media3/common/ThumbRating.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.common;
 
 import static androidx.media3.common.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.IntDef;
@@ -25,6 +26,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /** A rating expressed as "thumbs up" or "thumbs down". */
 public final class ThumbRating extends Rating {
@@ -78,6 +80,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RATING_TYPE, FIELD_RATED, FIELD_IS_THUMBS_UP})
   private @interface FieldNumber {}
 

File: libraries/common/src/main/java/androidx/media3/common/TrackGroup.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.common;
 
 import static androidx.media3.common.util.Assertions.checkArgument;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.CheckResult;
@@ -29,6 +30,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Arrays;
 import java.util.List;
 
@@ -139,6 +141,7 @@ public boolean equals(@Nullable Object obj) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_FORMATS, FIELD_ID})
   private @interface FieldNumber {}
 

File: libraries/common/src/main/java/androidx/media3/common/TrackSelectionParameters.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.common.util.BundleableUtil.fromNullableBundle;
 import static com.google.common.base.MoreObjects.firstNonNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.graphics.Point;
@@ -35,6 +36,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Locale;
 import java.util.Set;
 import org.checkerframework.checker.initialization.qual.UnknownInitialization;
@@ -984,6 +986,7 @@ public int hashCode() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_PREFERRED_AUDIO_LANGUAGES,
     FIELD_PREFERRED_AUDIO_ROLE_FLAGS,

File: libraries/common/src/main/java/androidx/media3/common/text/Cue.java
Patch:
@@ -968,6 +968,7 @@ public Cue build() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_TEXT,
     FIELD_TEXT_ALIGNMENT,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/AudioFocusManager.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.exoplayer;
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.media.AudioFocusRequest;
@@ -34,6 +35,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /** Manages requesting and responding to changes in audio focus. */
@@ -78,6 +80,7 @@ public interface PlayerControl {
   /** Audio focus state. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     AUDIO_FOCUS_STATE_NO_FOCUS,
     AUDIO_FOCUS_STATE_HAVE_FOCUS,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/AudioTrackPositionTracker.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.common.util.Util.castNonNull;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.media.AudioTimestamp;
 import android.media.AudioTrack;
@@ -30,6 +31,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.lang.reflect.Method;
 
 /**
@@ -111,6 +113,7 @@ void onSystemTimeUsMismatch(
   /** {@link AudioTrack} playback states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({PLAYSTATE_STOPPED, PLAYSTATE_PAUSED, PLAYSTATE_PLAYING})
   private @interface PlayState {}
   /** @see AudioTrack#PLAYSTATE_STOPPED */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/DecoderAudioRenderer.java
Patch:
@@ -21,6 +21,7 @@
 import static androidx.media3.exoplayer.source.SampleStream.FLAG_REQUIRE_FORMAT;
 import static com.google.common.base.MoreObjects.firstNonNull;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Handler;
 import android.os.SystemClock;
@@ -97,6 +98,7 @@ public abstract class DecoderAudioRenderer<
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @java.lang.annotation.Target(TYPE_USE)
   @IntDef({
     REINITIALIZATION_STATE_NONE,
     REINITIALIZATION_STATE_SIGNAL_END_OF_STREAM,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/SilenceSkippingAudioProcessor.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.exoplayer.audio;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.media3.common.C;
@@ -25,6 +26,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.nio.ByteBuffer;
 
 /**
@@ -53,6 +55,7 @@ public final class SilenceSkippingAudioProcessor extends BaseAudioProcessor {
   /** Trimming states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_NOISY,
     STATE_MAYBE_SILENT,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/text/TextRenderer.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.common.util.Assertions.checkState;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Handler;
 import android.os.Handler.Callback;
@@ -43,6 +44,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Collections;
 import java.util.List;
 
@@ -60,6 +62,7 @@ public final class TextRenderer extends BaseRenderer implements Callback {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     REPLACEMENT_STATE_NONE,
     REPLACEMENT_STATE_SIGNAL_END_OF_STREAM,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/upstream/Loader.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.exoplayer.upstream;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.annotation.SuppressLint;
 import android.os.Handler;
@@ -34,6 +35,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -145,6 +147,7 @@ public interface ReleaseCallback {
   /** Types of action that can be taken in response to a load error. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     ACTION_TYPE_RETRY,
     ACTION_TYPE_RETRY_AND_RESET_ERROR_COUNT,

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/DashMediaPeriod.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.exoplayer.dash;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import android.util.SparseArray;
@@ -60,6 +61,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.IdentityHashMap;
@@ -911,6 +913,7 @@ private static final class TrackGroupInfo {
 
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({CATEGORY_PRIMARY, CATEGORY_EMBEDDED, CATEGORY_MANIFEST_EVENTS})
     public @interface TrackGroupCategory {}
 

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/AdTagLoader.java
Patch:
@@ -23,6 +23,7 @@
 import static androidx.media3.exoplayer.ima.ImaUtil.getAdGroupTimesUsForCuePoints;
 import static androidx.media3.exoplayer.ima.ImaUtil.getImaLooper;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import android.net.Uri;
@@ -69,6 +70,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -108,6 +110,7 @@
   /** The state of ad playback. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({IMA_AD_STATE_NONE, IMA_AD_STATE_PLAYING, IMA_AD_STATE_PAUSED})
   private @interface ImaAdState {}
 

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspClient.java
Patch:
@@ -35,6 +35,7 @@
 import static androidx.media3.exoplayer.rtsp.RtspRequest.METHOD_UNSET;
 import static com.google.common.base.Strings.nullToEmpty;
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.net.Uri;
 import android.os.Handler;
@@ -61,6 +62,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.net.Socket;
 import java.util.ArrayDeque;
 import java.util.HashMap;
@@ -78,6 +80,7 @@
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({RTSP_STATE_UNINITIALIZED, RTSP_STATE_INIT, RTSP_STATE_READY, RTSP_STATE_PLAYING})
   public @interface RtspState {}
   /** RTSP uninitialized state, the state before sending any SETUP request. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMessageChannel.java
Patch:
@@ -19,6 +19,7 @@
 import static androidx.media3.common.util.Assertions.checkState;
 import static androidx.media3.common.util.Assertions.checkStateNotNull;
 import static androidx.media3.exoplayer.rtsp.RtspMessageUtil.isRtspStartLine;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Handler;
 import android.os.HandlerThread;
@@ -43,6 +44,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.net.Socket;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
@@ -341,6 +343,7 @@ private static final class MessageParser {
 
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({STATE_READING_FIRST_LINE, STATE_READING_HEADER, STATE_READING_BODY})
     @interface ReadingState {}
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/flac/FlacExtractor.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.common.util.Util.castNonNull;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -42,6 +43,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /**
@@ -79,6 +81,7 @@ public final class FlacExtractor implements Extractor {
   /** Parser state. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READ_ID3_METADATA,
     STATE_GET_STREAM_MARKER_AND_INFO_BLOCK_BYTES,

File: libraries/extractor/src/main/java/androidx/media3/extractor/flv/FlvExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.extractor.flv;
 
 import static java.lang.Math.max;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.media3.common.C;
@@ -33,6 +34,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -46,6 +48,7 @@ public final class FlvExtractor implements Extractor {
   /** Extractor states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READING_FLV_HEADER,
     STATE_SKIPPING_TO_TAG_HEADER,

File: libraries/extractor/src/main/java/androidx/media3/extractor/jpeg/JpegExtractor.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.extractor.jpeg;
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -37,6 +38,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /** Extracts JPEG image using the Exif format. */
@@ -46,6 +48,7 @@ public final class JpegExtractor implements Extractor {
   /** Parser states. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READING_MARKER,
     STATE_READING_SEGMENT_LENGTH,

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/ssa/SsaStyle.java
Patch:
@@ -18,6 +18,7 @@
 
 import static androidx.media3.common.util.Assertions.checkArgument;
 import static androidx.media3.extractor.text.ssa.SsaDecoder.STYLE_LINE_PREFIX;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.graphics.Color;
@@ -35,6 +36,7 @@
 import com.google.common.primitives.Ints;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -61,6 +63,7 @@
    *   <li>{@link #SSA_ALIGNMENT_TOP_RIGHT}
    * </ul>
    */
+  @Target(TYPE_USE)
   @IntDef({
     SSA_ALIGNMENT_UNKNOWN,
     SSA_ALIGNMENT_BOTTOM_LEFT,

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/webvtt/WebvttCueParser.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.extractor.text.webvtt;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.graphics.Color;
@@ -47,6 +48,7 @@
 import androidx.media3.common.util.Util;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -76,6 +78,7 @@ public final class WebvttCueParser {
    */
   @Documented
   @Retention(SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     TEXT_ALIGNMENT_START,
     TEXT_ALIGNMENT_CENTER,

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/Ac3Reader.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.extractor.ts;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -34,6 +35,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -43,6 +45,7 @@ public final class Ac3Reader implements ElementaryStreamReader {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({STATE_FINDING_SYNC, STATE_READING_HEADER, STATE_READING_SAMPLE})
   private @interface State {}
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/Ac4Reader.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.extractor.ts;
 
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
@@ -34,6 +35,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -43,6 +45,7 @@ public final class Ac4Reader implements ElementaryStreamReader {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({STATE_FINDING_SYNC, STATE_READING_HEADER, STATE_READING_SAMPLE})
   private @interface State {}
 

File: libraries/session/src/main/java/androidx/media3/session/CommandButton.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.media3.common.util.Assertions.checkArgument;
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.DrawableRes;
@@ -29,6 +30,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.List;
 
 /**
@@ -195,6 +197,7 @@ private CommandButton(
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_SESSION_COMMAND,
     FIELD_PLAYER_COMMAND,

File: libraries/session/src/main/java/androidx/media3/session/ConnectionRequest.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.media3.common.util.Assertions.checkArgument;
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.IntDef;
@@ -26,6 +27,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * Created by {@link MediaController} to send its state to the {@link MediaSession} to request to
@@ -56,6 +58,7 @@ private ConnectionRequest(int version, String packageName, int pid, Bundle conne
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_VERSION, FIELD_PACKAGE_NAME, FIELD_PID, FIELD_CONNECTION_HINTS})
   private @interface FieldNumber {}
 

File: libraries/session/src/main/java/androidx/media3/session/ConnectionState.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.session;
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.app.PendingIntent;
 import android.os.Bundle;
@@ -29,6 +30,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * Created by {@link MediaSession} to send its state to the {@link MediaController} when the
@@ -75,6 +77,7 @@ public ConnectionState(
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_VERSION,
     FIELD_SESSION_BINDER,

File: libraries/session/src/main/java/androidx/media3/session/LibraryResult.java
Patch:
@@ -250,6 +250,7 @@ private static void verifyMediaItem(MediaItem item) {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_RESULT_CODE,
     FIELD_COMPLETION_TIME_MS,

File: libraries/session/src/main/java/androidx/media3/session/MediaLibraryService.java
Patch:
@@ -19,6 +19,7 @@
 import static androidx.media3.common.util.Assertions.checkNotEmpty;
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.session.LibraryResult.RESULT_ERROR_NOT_SUPPORTED;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.app.PendingIntent;
 import android.content.Context;
@@ -41,6 +42,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * Superclass to be extended by services hosting {@link MediaLibrarySession media library sessions}.
@@ -650,6 +652,7 @@ public LibraryParams build() {
 
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({
       FIELD_EXTRAS,
       FIELD_RECENT,

File: libraries/session/src/main/java/androidx/media3/session/PlayerInfo.java
Patch:
@@ -20,6 +20,7 @@
 import static androidx.media3.common.Player.PLAYBACK_SUPPRESSION_REASON_NONE;
 import static androidx.media3.common.Player.PLAY_WHEN_READY_CHANGE_REASON_USER_REQUEST;
 import static androidx.media3.common.Player.STATE_IDLE;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import android.os.SystemClock;
@@ -48,6 +49,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.List;
 
 /**
@@ -649,6 +651,7 @@ private boolean isPlaying(
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_PLAYBACK_PARAMETERS,
     FIELD_REPEAT_MODE,

File: libraries/session/src/main/java/androidx/media3/session/SessionCommand.java
Patch:
@@ -172,6 +172,7 @@ public int hashCode() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_COMMAND_CODE, FIELD_CUSTOM_ACTION, FIELD_CUSTOM_EXTRAS})
   private @interface FieldNumber {}
 

File: libraries/session/src/main/java/androidx/media3/session/SessionCommands.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.common.util.Assertions.checkArgument;
 import static androidx.media3.common.util.Assertions.checkNotNull;
 import static androidx.media3.session.SessionCommand.COMMAND_CODE_CUSTOM;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import androidx.annotation.IntDef;
@@ -31,6 +32,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
@@ -227,6 +229,7 @@ private static boolean containsCommandCode(
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_SESSION_COMMANDS})
   private @interface FieldNumber {}
 

File: libraries/session/src/main/java/androidx/media3/session/SessionResult.java
Patch:
@@ -177,6 +177,7 @@ private SessionResult(@Code int resultCode, Bundle extras, long completionTimeMs
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_RESULT_CODE, FIELD_EXTRAS, FIELD_COMPLETION_TIME_MS})
   private @interface FieldNumber {}
 

File: libraries/session/src/main/java/androidx/media3/session/SessionToken.java
Patch:
@@ -424,6 +424,7 @@ private static MediaControllerCompat createMediaControllerCompat(
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({FIELD_IMPL_TYPE, FIELD_IMPL})
   private @interface FieldNumber {}
 
@@ -433,6 +434,7 @@ private static MediaControllerCompat createMediaControllerCompat(
   /** Types of {@link SessionTokenImpl} */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({IMPL_TYPE_BASE, IMPL_TYPE_LEGACY})
   private @interface SessionTokenImplType {}
 

File: libraries/session/src/main/java/androidx/media3/session/SessionTokenImplBase.java
Patch:
@@ -18,6 +18,7 @@
 import static androidx.media3.common.util.Assertions.checkArgument;
 import static androidx.media3.common.util.Assertions.checkNotEmpty;
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.ComponentName;
 import android.os.Bundle;
@@ -31,6 +32,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /* package */ final class SessionTokenImplBase implements SessionToken.SessionTokenImpl {
 
@@ -184,6 +186,7 @@ public Object getBinder() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_UID,
     FIELD_TYPE,

File: libraries/session/src/main/java/androidx/media3/session/SessionTokenImplLegacy.java
Patch:
@@ -22,6 +22,7 @@
 import static androidx.media3.session.SessionToken.TYPE_LIBRARY_SERVICE;
 import static androidx.media3.session.SessionToken.TYPE_SESSION;
 import static androidx.media3.session.SessionToken.TYPE_SESSION_LEGACY;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.ComponentName;
 import android.os.Bundle;
@@ -34,6 +35,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /* package */ final class SessionTokenImplLegacy implements SessionTokenImpl {
 
@@ -169,6 +171,7 @@ public Object getBinder() {
 
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef({
     FIELD_LEGACY_TOKEN,
     FIELD_UID,

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/DumpFileAsserts.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.test.utils;
 
 import static com.google.common.truth.Truth.assertWithMessage;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.content.Context;
 import androidx.annotation.IntDef;
@@ -29,6 +30,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * Helper class to enable assertions based on golden-data dump files.
@@ -53,6 +55,7 @@ public class DumpFileAsserts {
   /** Possible actions to take with the dumps passed to {@link #assertOutput}. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target(TYPE_USE)
   @IntDef(
       flag = true,
       value = {COMPARE_WITH_EXISTING, WRITE_TO_LOCAL, WRITE_TO_DEVICE})

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/WebServerDispatcher.java
Patch:
@@ -21,6 +21,7 @@
 import static androidx.media3.test.utils.WebServerDispatcher.Resource.GZIP_SUPPORT_FORCED;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import androidx.annotation.IntDef;
@@ -34,6 +35,7 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.Arrays;
 import java.util.List;
 import java.util.regex.Matcher;
@@ -68,6 +70,7 @@ public static class Resource {
      */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
+    @Target(TYPE_USE)
     @IntDef({GZIP_SUPPORT_DISABLED, GZIP_SUPPORT_ENABLED, GZIP_SUPPORT_FORCED})
     private @interface GzipSupport {}
 

File: libraries/ui/src/main/java/androidx/media3/ui/LegacyPlayerView.java
Patch:
@@ -252,7 +252,10 @@
  * single instance in a layout file. This is achieved by setting the {@code player_layout_id}
  * attribute on a LegacyPlayerView. This will cause the specified layout to be inflated instead of
  * {@code exo_legacy_player_view.xml} for only the instance on which the attribute is set.
+ *
+ * @deprecated Use {@link PlayerView} instead.
  */
+@Deprecated
 @UnstableApi
 public class LegacyPlayerView extends FrameLayout implements AdViewProvider {
 

File: library/common/src/main/java/com/google/android/exoplayer2/DeviceInfo.java
Patch:
@@ -15,11 +15,12 @@
  */
 package com.google.android.exoplayer2;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
+
 import android.os.Bundle;
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -30,7 +31,7 @@ public final class DeviceInfo implements Bundleable {
   /** Types of playback. One of {@link #PLAYBACK_TYPE_LOCAL} or {@link #PLAYBACK_TYPE_REMOTE}. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({
     PLAYBACK_TYPE_LOCAL,
     PLAYBACK_TYPE_REMOTE,

File: library/common/src/main/java/com/google/android/exoplayer2/PlaybackException.java
Patch:
@@ -45,6 +45,8 @@ public class PlaybackException extends Exception implements Bundleable {
    * <p>This list of errors may be extended in future versions, and {@link Player} implementations
    * may define custom error codes.
    */
+  // @Target list includes both 'default' targets and TYPE_USE, to ensure backwards compatibility
+  // with Kotlin usages from before TYPE_USE was added.
   @Documented
   @Retention(RetentionPolicy.SOURCE)
   @Target({FIELD, METHOD, PARAMETER, LOCAL_VARIABLE, TYPE_USE})

File: library/common/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelection.java
Patch:
@@ -15,12 +15,13 @@
  */
 package com.google.android.exoplayer2.trackselection;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
+
 import androidx.annotation.IntDef;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.source.TrackGroup;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -39,7 +40,7 @@ public interface TrackSelection {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef(
       open = true,
       value = {TYPE_UNSET})

File: library/common/src/main/java/com/google/android/exoplayer2/ui/AdOverlayInfo.java
Patch:
@@ -36,6 +36,8 @@ public final class AdOverlayInfo {
    * The purpose of the overlay. One of {@link #PURPOSE_CONTROLS}, {@link #PURPOSE_CLOSE_AD}, {@link
    * #PURPOSE_OTHER} or {@link #PURPOSE_NOT_VISIBLE}.
    */
+  // @Target list includes both 'default' targets and TYPE_USE, to ensure backwards compatibility
+  // with Kotlin usages from before TYPE_USE was added.
   @Documented
   @Retention(RetentionPolicy.SOURCE)
   @Target({FIELD, METHOD, PARAMETER, LOCAL_VARIABLE, TYPE_USE})

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/PlaybackStats.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.SystemClock;
 import androidx.annotation.IntDef;
@@ -25,7 +26,6 @@
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.analytics.AnalyticsListener.EventTime;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -172,7 +172,7 @@ public int hashCode() {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({
     PLAYBACK_STATE_NOT_STARTED,
     PLAYBACK_STATE_JOINING_BACKGROUND,

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/wav/WavExtractor.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import androidx.annotation.IntDef;
@@ -37,7 +38,6 @@
 import com.google.android.exoplayer2.util.Util;
 import java.io.IOException;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -63,7 +63,7 @@ public final class WavExtractor implements Extractor {
   /** Parser state. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READING_FILE_TYPE,
     STATE_READING_RF64_SAMPLE_DATA_SIZE,

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaSource.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.source.hls;
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.os.Looper;
@@ -56,7 +57,6 @@
 import com.google.android.exoplayer2.util.Util;
 import java.io.IOException;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 import java.util.List;
@@ -83,7 +83,7 @@ public final class HlsMediaSource extends BaseMediaSource
    */
   @Documented
   @Retention(SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({METADATA_TYPE_ID3, METADATA_TYPE_EMSG})
   public @interface MetadataType {}
 

File: extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/FlacExtractor.java
Patch:
@@ -286,7 +286,7 @@ private static void outputSample(
     sampleData.setPosition(0);
     output.sampleData(sampleData, size);
     output.sampleMetadata(
-        timeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* encryptionData= */ null);
+        timeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* cryptoData= */ null);
   }
 
   /** A {@link SeekMap} implementation using a SeekTable within the Flac stream. */

File: library/common/src/main/java/com/google/android/exoplayer2/MediaItem.java
Patch:
@@ -1800,7 +1800,7 @@ private static MediaItem fromBundle(Bundle bundle) {
     return new MediaItem(
         mediaId,
         clippingConfiguration,
-        /* playbackProperties= */ null,
+        /* localConfiguration= */ null,
         liveConfiguration,
         mediaMetadata);
   }

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaPeriod.java
Patch:
@@ -1069,7 +1069,7 @@ public void onIcyMetadata(ParsableByteArray metadata) {
       TrackOutput icyTrackOutput = Assertions.checkNotNull(this.icyTrackOutput);
       icyTrackOutput.sampleData(metadata, length);
       icyTrackOutput.sampleMetadata(
-          timeUs, C.BUFFER_FLAG_KEY_FRAME, length, /* offset= */ 0, /* encryptionData= */ null);
+          timeUs, C.BUFFER_FLAG_KEY_FRAME, length, /* offset= */ 0, /* cryptoData= */ null);
       seenIcyMetadata = true;
     }
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/amr/AmrExtractor.java
Patch:
@@ -317,7 +317,7 @@ private int readSample(ExtractorInput extractorInput) throws IOException {
         C.BUFFER_FLAG_KEY_FRAME,
         currentSampleSize,
         /* offset= */ 0,
-        /* encryptionData= */ null);
+        /* cryptoData= */ null);
     currentSampleTimeUs += SAMPLE_TIME_PER_FRAME_US;
     return RESULT_CONTINUE;
   }

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/flac/FlacExtractor.java
Patch:
@@ -414,6 +414,6 @@ private void outputSampleMetadata() {
             C.BUFFER_FLAG_KEY_FRAME,
             currentFrameBytesWritten,
             /* offset= */ 0,
-            /* encryptionData= */ null);
+            /* cryptoData= */ null);
   }
 }

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/H263Reader.java
Patch:
@@ -473,7 +473,7 @@ public void onDataEnd(long position, int bytesWrittenPastPosition, boolean hasOu
         int size = (int) (position - samplePosition);
         @C.BufferFlags int flags = sampleIsKeyframe ? C.BUFFER_FLAG_KEY_FRAME : 0;
         output.sampleMetadata(
-            sampleTimeUs, flags, size, bytesWrittenPastPosition, /* encryptionData= */ null);
+            sampleTimeUs, flags, size, bytesWrittenPastPosition, /* cryptoData= */ null);
       }
       // Start a new sample, unless this is a 'group of video object plane' in which case we
       // include the data at the start of a 'video object plane' coming next.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/wav/WavExtractor.java
Patch:
@@ -367,7 +367,7 @@ public boolean sampleData(ExtractorInput input, long bytesLeft) throws IOExcepti
         int size = pendingFrames * bytesPerFrame;
         int offset = pendingOutputBytes - size;
         trackOutput.sampleMetadata(
-            timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* encryptionData= */ null);
+            timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* cryptoData= */ null);
         outputFrameCount += pendingFrames;
         pendingOutputBytes = offset;
       }
@@ -546,7 +546,7 @@ private void writeSampleMetadata(int sampleFrames) {
       int size = numOutputFramesToBytes(sampleFrames);
       int offset = pendingOutputBytes - size;
       trackOutput.sampleMetadata(
-          timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* encryptionData= */ null);
+          timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* cryptoData= */ null);
       outputFrameCount += sampleFrames;
       pendingOutputBytes -= size;
     }

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpAacReader.java
Patch:
@@ -151,7 +151,7 @@ public void seek(long nextRtpTimestamp, long timeUs) {
 
   private static void outputSampleMetadata(TrackOutput trackOutput, long sampleTimeUs, int size) {
     trackOutput.sampleMetadata(
-        sampleTimeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* encryptionData= */ null);
+        sampleTimeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* cryptoData= */ null);
   }
 
   /** Returns the correct sample time from RTP timestamp, accounting for the AAC sampling rate. */

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpAc3Reader.java
Patch:
@@ -138,7 +138,7 @@ private void processSingleFramePacket(ParsableByteArray data, long sampleTimeUs)
             /* flags= */ C.BUFFER_FLAG_KEY_FRAME,
             /* size= */ frameSize,
             /* offset= */ 0,
-            /* encryptionData= */ null);
+            /* cryptoData= */ null);
   }
 
   private void processMultiFramePacket(ParsableByteArray data, int numOfFrames, long sampleTimeUs) {
@@ -157,7 +157,7 @@ private void processMultiFramePacket(ParsableByteArray data, int numOfFrames, lo
               /* flags= */ C.BUFFER_FLAG_KEY_FRAME,
               /* size= */ frameInfo.frameSize,
               /* offset= */ 0,
-              /* encryptionData= */ null);
+              /* cryptoData= */ null);
 
       sampleTimeUs += (frameInfo.sampleCount / frameInfo.sampleRate) * C.MICROS_PER_SECOND;
       // Advance the position by the number of bytes read.
@@ -203,7 +203,7 @@ private void outputSampleMetadataForFragmentedPackets() {
             /* flags= */ C.BUFFER_FLAG_KEY_FRAME,
             /* size= */ numBytesPendingMetadataOutput,
             /* offset= */ 0,
-            /* encryptionData= */ null);
+            /* cryptoData= */ null);
     numBytesPendingMetadataOutput = 0;
   }
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultEncoderFactory.java
Patch:
@@ -50,7 +50,7 @@ public final class DefaultEncoderFactory implements Codec.EncoderFactory {
 
   /** Creates a new instance using the {@link EncoderSelector#DEFAULT default encoder selector}. */
   public DefaultEncoderFactory() {
-    this.videoEncoderSelector = EncoderSelector.DEFAULT;
+    this(EncoderSelector.DEFAULT);
   }
 
   /** Creates a new instance. */

File: libraries/common/src/main/java/androidx/media3/common/AdOverlayInfo.java
Patch:
@@ -37,6 +37,8 @@ public final class AdOverlayInfo {
    * The purpose of the overlay. One of {@link #PURPOSE_CONTROLS}, {@link #PURPOSE_CLOSE_AD}, {@link
    * #PURPOSE_OTHER} or {@link #PURPOSE_NOT_VISIBLE}.
    */
+  // @Target list includes both 'default' targets and TYPE_USE, to ensure backwards compatibility
+  // with Kotlin usages from before TYPE_USE was added.
   @Documented
   @Retention(RetentionPolicy.SOURCE)
   @Target({FIELD, METHOD, PARAMETER, LOCAL_VARIABLE, TYPE_USE})

File: libraries/common/src/main/java/androidx/media3/common/DeviceInfo.java
Patch:
@@ -15,12 +15,13 @@
  */
 package androidx.media3.common;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
+
 import android.os.Bundle;
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
 import androidx.media3.common.util.UnstableApi;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -31,7 +32,7 @@ public final class DeviceInfo implements Bundleable {
   /** Types of playback. One of {@link #PLAYBACK_TYPE_LOCAL} or {@link #PLAYBACK_TYPE_REMOTE}. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({
     PLAYBACK_TYPE_LOCAL,
     PLAYBACK_TYPE_REMOTE,

File: libraries/common/src/main/java/androidx/media3/common/PlaybackException.java
Patch:
@@ -46,6 +46,8 @@ public class PlaybackException extends Exception implements Bundleable {
    * <p>This list of errors may be extended in future versions, and {@link Player} implementations
    * may define custom error codes.
    */
+  // @Target list includes both 'default' targets and TYPE_USE, to ensure backwards compatibility
+  // with Kotlin usages from before TYPE_USE was added.
   @Documented
   @Retention(RetentionPolicy.SOURCE)
   @Target({FIELD, METHOD, PARAMETER, LOCAL_VARIABLE, TYPE_USE})

File: libraries/common/src/main/java/androidx/media3/common/TrackSelection.java
Patch:
@@ -15,10 +15,11 @@
  */
 package androidx.media3.common;
 
+import static java.lang.annotation.ElementType.TYPE_USE;
+
 import androidx.annotation.IntDef;
 import androidx.media3.common.util.UnstableApi;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -38,7 +39,7 @@ public interface TrackSelection {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef(
       open = true,
       value = {TYPE_UNSET})

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/PlaybackStats.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.SystemClock;
 import androidx.annotation.IntDef;
@@ -26,7 +27,6 @@
 import androidx.media3.common.util.UnstableApi;
 import androidx.media3.exoplayer.analytics.AnalyticsListener.EventTime;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -174,7 +174,7 @@ public int hashCode() {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({
     PLAYBACK_STATE_NOT_STARTED,
     PLAYBACK_STATE_JOINING_BACKGROUND,

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsMediaSource.java
Patch:
@@ -16,6 +16,7 @@
 package androidx.media3.exoplayer.hls;
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.os.Looper;
@@ -57,7 +58,6 @@
 import androidx.media3.extractor.Extractor;
 import java.io.IOException;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 import java.util.List;
@@ -85,7 +85,7 @@ public final class HlsMediaSource extends BaseMediaSource
    */
   @Documented
   @Retention(SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({METADATA_TYPE_ID3, METADATA_TYPE_EMSG})
   public @interface MetadataType {}
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/wav/WavExtractor.java
Patch:
@@ -17,6 +17,7 @@
 
 import static java.lang.Math.max;
 import static java.lang.Math.min;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.util.Pair;
 import androidx.annotation.IntDef;
@@ -38,7 +39,6 @@
 import androidx.media3.extractor.WavUtil;
 import java.io.IOException;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -65,7 +65,7 @@ public final class WavExtractor implements Extractor {
   /** Parser state. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({
     STATE_READING_FILE_TYPE,
     STATE_READING_RF64_SAMPLE_DATA_SIZE,

File: libraries/session/src/main/java/androidx/media3/session/SessionCommand.java
Patch:
@@ -17,6 +17,7 @@
 
 import static androidx.media3.common.util.Assertions.checkArgument;
 import static androidx.media3.common.util.Assertions.checkNotNull;
+import static java.lang.annotation.ElementType.TYPE_USE;
 
 import android.os.Bundle;
 import android.text.TextUtils;
@@ -29,7 +30,6 @@
 import com.google.common.base.Objects;
 import com.google.common.collect.ImmutableList;
 import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -46,7 +46,7 @@ public final class SessionCommand implements Bundleable {
   /** Command codes of session commands. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_USE})
+  @Target(TYPE_USE)
   @IntDef({
     COMMAND_CODE_CUSTOM,
     COMMAND_CODE_SESSION_SET_MEDIA_URI,

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -890,8 +890,7 @@ private static MediaSource createMediaSourceInternal(
       MediaItem mediaItem,
       DataSource.Factory dataSourceFactory,
       @Nullable DrmSessionManager drmSessionManager) {
-    return new DefaultMediaSourceFactory(
-            dataSourceFactory, ExtractorsFactory.EMPTY, /* serverSideDaiMediaSourceFactory= */ null)
+    return new DefaultMediaSourceFactory(dataSourceFactory, ExtractorsFactory.EMPTY)
         .setDrmSessionManagerProvider(
             drmSessionManager != null ? unusedMediaItem -> drmSessionManager : null)
         .createMediaSource(mediaItem);

File: libraries/common/src/main/java/androidx/media3/common/MediaItem.java
Patch:
@@ -1839,7 +1839,7 @@ private static MediaItem fromBundle(Bundle bundle) {
     return new MediaItem(
         mediaId,
         clippingConfiguration,
-        /* playbackProperties= */ null,
+        /* localConfiguration= */ null,
         liveConfiguration,
         mediaMetadata);
   }

File: libraries/decoder_flac/src/main/java/androidx/media3/decoder/flac/FlacExtractor.java
Patch:
@@ -288,7 +288,7 @@ private static void outputSample(
     sampleData.setPosition(0);
     output.sampleData(sampleData, size);
     output.sampleMetadata(
-        timeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* encryptionData= */ null);
+        timeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* cryptoData= */ null);
   }
 
   /** A {@link SeekMap} implementation using a SeekTable within the Flac stream. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ProgressiveMediaPeriod.java
Patch:
@@ -1071,7 +1071,7 @@ public void onIcyMetadata(ParsableByteArray metadata) {
       TrackOutput icyTrackOutput = Assertions.checkNotNull(this.icyTrackOutput);
       icyTrackOutput.sampleData(metadata, length);
       icyTrackOutput.sampleMetadata(
-          timeUs, C.BUFFER_FLAG_KEY_FRAME, length, /* offset= */ 0, /* encryptionData= */ null);
+          timeUs, C.BUFFER_FLAG_KEY_FRAME, length, /* offset= */ 0, /* cryptoData= */ null);
       seenIcyMetadata = true;
     }
 

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/RtpAacReader.java
Patch:
@@ -151,7 +151,7 @@ public void seek(long nextRtpTimestamp, long timeUs) {
 
   private static void outputSampleMetadata(TrackOutput trackOutput, long sampleTimeUs, int size) {
     trackOutput.sampleMetadata(
-        sampleTimeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* encryptionData= */ null);
+        sampleTimeUs, C.BUFFER_FLAG_KEY_FRAME, size, /* offset= */ 0, /* cryptoData= */ null);
   }
 
   /** Returns the correct sample time from RTP timestamp, accounting for the AAC sampling rate. */

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/RtpAc3Reader.java
Patch:
@@ -140,7 +140,7 @@ private void processSingleFramePacket(ParsableByteArray data, long sampleTimeUs)
             /* flags= */ C.BUFFER_FLAG_KEY_FRAME,
             /* size= */ frameSize,
             /* offset= */ 0,
-            /* encryptionData= */ null);
+            /* cryptoData= */ null);
   }
 
   private void processMultiFramePacket(ParsableByteArray data, int numOfFrames, long sampleTimeUs) {
@@ -159,7 +159,7 @@ private void processMultiFramePacket(ParsableByteArray data, int numOfFrames, lo
               /* flags= */ C.BUFFER_FLAG_KEY_FRAME,
               /* size= */ frameInfo.frameSize,
               /* offset= */ 0,
-              /* encryptionData= */ null);
+              /* cryptoData= */ null);
 
       sampleTimeUs += (frameInfo.sampleCount / frameInfo.sampleRate) * C.MICROS_PER_SECOND;
       // Advance the position by the number of bytes read.
@@ -205,7 +205,7 @@ private void outputSampleMetadataForFragmentedPackets() {
             /* flags= */ C.BUFFER_FLAG_KEY_FRAME,
             /* size= */ numBytesPendingMetadataOutput,
             /* offset= */ 0,
-            /* encryptionData= */ null);
+            /* cryptoData= */ null);
     numBytesPendingMetadataOutput = 0;
   }
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/amr/AmrExtractor.java
Patch:
@@ -319,7 +319,7 @@ private int readSample(ExtractorInput extractorInput) throws IOException {
         C.BUFFER_FLAG_KEY_FRAME,
         currentSampleSize,
         /* offset= */ 0,
-        /* encryptionData= */ null);
+        /* cryptoData= */ null);
     currentSampleTimeUs += SAMPLE_TIME_PER_FRAME_US;
     return RESULT_CONTINUE;
   }

File: libraries/extractor/src/main/java/androidx/media3/extractor/flac/FlacExtractor.java
Patch:
@@ -416,6 +416,6 @@ private void outputSampleMetadata() {
             C.BUFFER_FLAG_KEY_FRAME,
             currentFrameBytesWritten,
             /* offset= */ 0,
-            /* encryptionData= */ null);
+            /* cryptoData= */ null);
   }
 }

File: libraries/extractor/src/main/java/androidx/media3/extractor/ts/H263Reader.java
Patch:
@@ -475,7 +475,7 @@ public void onDataEnd(long position, int bytesWrittenPastPosition, boolean hasOu
         int size = (int) (position - samplePosition);
         @C.BufferFlags int flags = sampleIsKeyframe ? C.BUFFER_FLAG_KEY_FRAME : 0;
         output.sampleMetadata(
-            sampleTimeUs, flags, size, bytesWrittenPastPosition, /* encryptionData= */ null);
+            sampleTimeUs, flags, size, bytesWrittenPastPosition, /* cryptoData= */ null);
       }
       // Start a new sample, unless this is a 'group of video object plane' in which case we
       // include the data at the start of a 'video object plane' coming next.

File: libraries/extractor/src/main/java/androidx/media3/extractor/wav/WavExtractor.java
Patch:
@@ -369,7 +369,7 @@ public boolean sampleData(ExtractorInput input, long bytesLeft) throws IOExcepti
         int size = pendingFrames * bytesPerFrame;
         int offset = pendingOutputBytes - size;
         trackOutput.sampleMetadata(
-            timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* encryptionData= */ null);
+            timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* cryptoData= */ null);
         outputFrameCount += pendingFrames;
         pendingOutputBytes = offset;
       }
@@ -548,7 +548,7 @@ private void writeSampleMetadata(int sampleFrames) {
       int size = numOutputFramesToBytes(sampleFrames);
       int offset = pendingOutputBytes - size;
       trackOutput.sampleMetadata(
-          timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* encryptionData= */ null);
+          timeUs, C.BUFFER_FLAG_KEY_FRAME, size, offset, /* cryptoData= */ null);
       outputFrameCount += sampleFrames;
       pendingOutputBytes -= size;
     }

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultEncoderFactory.java
Patch:
@@ -52,7 +52,7 @@ public final class DefaultEncoderFactory implements Codec.EncoderFactory {
 
   /** Creates a new instance using the {@link EncoderSelector#DEFAULT default encoder selector}. */
   public DefaultEncoderFactory() {
-    this.videoEncoderSelector = EncoderSelector.DEFAULT;
+    this(EncoderSelector.DEFAULT);
   }
 
   /** Creates a new instance. */

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadHelper.java
Patch:
@@ -893,8 +893,7 @@ private static MediaSource createMediaSourceInternal(
       MediaItem mediaItem,
       DataSource.Factory dataSourceFactory,
       @Nullable DrmSessionManager drmSessionManager) {
-    return new DefaultMediaSourceFactory(
-            dataSourceFactory, ExtractorsFactory.EMPTY, /* serverSideDaiMediaSourceFactory= */ null)
+    return new DefaultMediaSourceFactory(dataSourceFactory, ExtractorsFactory.EMPTY)
         .setDrmSessionManagerProvider(
             drmSessionManager != null ? unusedMediaItem -> drmSessionManager : null)
         .createMediaSource(mediaItem);

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/avi/ListBox.java
Patch:
@@ -15,6 +15,8 @@ public class ListBox extends Box {
   public static final int LIST = 'L' | ('I' << 8) | ('S' << 16) | ('T' << 24);
   //Header List
   public static final int TYPE_HDRL = 'h' | ('d' << 8) | ('r' << 16) | ('l' << 24);
+  //Stream List
+  public static final int TYPE_STRL = 's' | ('t' << 8) | ('r' << 16) | ('l' << 24);
 
   private final int listType;
 
@@ -47,9 +49,6 @@ public <T extends Box> T getChild(Class<T> c) {
 
   /**
    * Assume the input is pointing to the list type
-   * @param boxFactory
-   * @param input
-   * @return
    * @throws IOException
    */
   public static ListBox newInstance(final int listSize, BoxFactory boxFactory,

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/avi/AviExtractorRoboTest.java
Patch:
@@ -46,7 +46,7 @@ public void parseStream_givenNoStreamHeader() {
       final AviExtractor aviExtractor = new AviExtractor();
       final FakeExtractorOutput fakeExtractorOutput = new FakeExtractorOutput();
       aviExtractor.init(fakeExtractorOutput);
-      final ListBox streamList = new ListBox(128, AviExtractor.STRL, Collections.EMPTY_LIST);
+      final ListBox streamList = new ListBox(128, ListBox.TYPE_STRL, Collections.EMPTY_LIST);
       Assert.assertNull(aviExtractor.parseStream(streamList, 0));
   }
 
@@ -55,7 +55,7 @@ public void parseStream_givenNoStreamFormat() {
     final AviExtractor aviExtractor = new AviExtractor();
     final FakeExtractorOutput fakeExtractorOutput = new FakeExtractorOutput();
     aviExtractor.init(fakeExtractorOutput);
-    final ListBox streamList = new ListBox(128, AviExtractor.STRL,
+    final ListBox streamList = new ListBox(128, ListBox.TYPE_STRL,
         Collections.singletonList(DataHelper.getVidsStreamHeader()));
     Assert.assertNull(aviExtractor.parseStream(streamList, 0));
   }
@@ -73,7 +73,7 @@ public void readTracks_givenVideoTrack() throws IOException {
     byteBuffer.put(aviHeader);
     byteBuffer.putInt(ListBox.LIST);
     byteBuffer.putInt(byteBuffer.remaining() - 4);
-    byteBuffer.putInt(AviExtractor.STRL);
+    byteBuffer.putInt(ListBox.TYPE_STRL);
 
     final StreamHeaderBox streamHeaderBox = DataHelper.getVidsStreamHeader();
     byteBuffer.putInt(StreamHeaderBox.STRH);

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/avi/AviExtractorTest.java
Patch:
@@ -319,7 +319,7 @@ public void readHeaderList_givenBadHeader() throws IOException {
   @Test
   public void readHeaderList_givenNoHeaderList() throws IOException {
     final ByteBuffer byteBuffer = DataHelper.getRiffHeader(88, 0x44);
-    byteBuffer.putInt(0x14, AviExtractor.STRL); //Overwrite header list with stream list
+    byteBuffer.putInt(0x14, ListBox.TYPE_STRL); //Overwrite header list with stream list
     final FakeExtractorInput input = new FakeExtractorInput.Builder().
         setData(byteBuffer.array()).build();
     Assert.assertNull(AviExtractor.readHeaderList(input));

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/avi/DataHelper.java
Patch:
@@ -62,7 +62,7 @@ public static ListBox getVideoStreamList() {
     list.add(streamHeaderBox);
     list.add(streamFormatBox);
     return new ListBox((int)(streamHeaderBox.getSize() + streamFormatBox.getSize()),
-        AviExtractor.STRL, list);
+        ListBox.TYPE_STRL, list);
   }
 
   public static ListBox getAacStreamList() throws IOException {
@@ -72,7 +72,7 @@ public static ListBox getAacStreamList() throws IOException {
     list.add(streamHeaderBox);
     list.add(streamFormatBox);
     return new ListBox((int)(streamHeaderBox.getSize() + streamFormatBox.getSize()),
-        AviExtractor.STRL, list);
+        ListBox.TYPE_STRL, list);
   }
 
   public static StreamNameBox getStreamNameBox(final String name) {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/avi/StreamNameBoxTest.java
Patch:
@@ -10,7 +10,7 @@ public class StreamNameBoxTest {
   @Test
   public void createStreamName_givenList() throws IOException {
     final String name = "Test";
-    final ListBuilder listBuilder = new ListBuilder(AviExtractor.STRL);
+    final ListBuilder listBuilder = new ListBuilder(ListBox.TYPE_STRL);
     listBuilder.addBox(DataHelper.getStreamNameBox(name));
     final ByteBuffer listBuffer = listBuilder.build();
     final FakeExtractorInput fakeExtractorInput = new FakeExtractorInput.Builder().setData(listBuffer.array()).build();

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/RemoveAudioTransformationTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.google.android.exoplayer2.transformer.mh;
 
-import static com.google.android.exoplayer2.transformer.mh.AndroidTestUtil.MP4_ASSET_URI_STRING;
-import static com.google.android.exoplayer2.transformer.mh.AndroidTestUtil.runTransformer;
+import static com.google.android.exoplayer2.transformer.AndroidTestUtil.MP4_ASSET_URI_STRING;
+import static com.google.android.exoplayer2.transformer.AndroidTestUtil.runTransformer;
 
 import android.content.Context;
 import androidx.test.core.app.ApplicationProvider;

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/RemoveVideoTransformationTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.google.android.exoplayer2.transformer.mh;
 
-import static com.google.android.exoplayer2.transformer.mh.AndroidTestUtil.MP4_ASSET_URI_STRING;
-import static com.google.android.exoplayer2.transformer.mh.AndroidTestUtil.runTransformer;
+import static com.google.android.exoplayer2.transformer.AndroidTestUtil.MP4_ASSET_URI_STRING;
+import static com.google.android.exoplayer2.transformer.AndroidTestUtil.runTransformer;
 
 import android.content.Context;
 import androidx.test.core.app.ApplicationProvider;

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/RepeatedTranscodeTransformationTest.java
Patch:
@@ -15,13 +15,14 @@
  */
 package com.google.android.exoplayer2.transformer.mh;
 
-import static com.google.android.exoplayer2.transformer.mh.AndroidTestUtil.runTransformer;
+import static com.google.android.exoplayer2.transformer.AndroidTestUtil.runTransformer;
 import static com.google.common.truth.Truth.assertWithMessage;
 
 import android.content.Context;
 import android.graphics.Matrix;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
+import com.google.android.exoplayer2.transformer.AndroidTestUtil;
 import com.google.android.exoplayer2.transformer.TransformationRequest;
 import com.google.android.exoplayer2.transformer.Transformer;
 import com.google.android.exoplayer2.util.Assertions;

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/SefTransformationTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.google.android.exoplayer2.transformer.mh;
 
-import static com.google.android.exoplayer2.transformer.mh.AndroidTestUtil.SEF_ASSET_URI_STRING;
-import static com.google.android.exoplayer2.transformer.mh.AndroidTestUtil.runTransformer;
+import static com.google.android.exoplayer2.transformer.AndroidTestUtil.SEF_ASSET_URI_STRING;
+import static com.google.android.exoplayer2.transformer.AndroidTestUtil.runTransformer;
 
 import android.content.Context;
 import androidx.test.core.app.ApplicationProvider;

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/SetTransformationMatrixTransformationTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.google.android.exoplayer2.transformer.mh;
 
-import static com.google.android.exoplayer2.transformer.mh.AndroidTestUtil.REMOTE_MP4_10_SECONDS_URI_STRING;
-import static com.google.android.exoplayer2.transformer.mh.AndroidTestUtil.runTransformer;
+import static com.google.android.exoplayer2.transformer.AndroidTestUtil.REMOTE_MP4_10_SECONDS_URI_STRING;
+import static com.google.android.exoplayer2.transformer.AndroidTestUtil.runTransformer;
 
 import android.content.Context;
 import android.graphics.Matrix;

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/TransformationTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.google.android.exoplayer2.transformer.mh;
 
-import static com.google.android.exoplayer2.transformer.mh.AndroidTestUtil.MP4_ASSET_URI_STRING;
-import static com.google.android.exoplayer2.transformer.mh.AndroidTestUtil.runTransformer;
+import static com.google.android.exoplayer2.transformer.AndroidTestUtil.MP4_ASSET_URI_STRING;
+import static com.google.android.exoplayer2.transformer.AndroidTestUtil.runTransformer;
 
 import android.content.Context;
 import androidx.test.core.app.ApplicationProvider;

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/RemoveAudioTransformationTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package androidx.media3.transformer.mh;
 
-import static androidx.media3.transformer.mh.AndroidTestUtil.MP4_ASSET_URI_STRING;
-import static androidx.media3.transformer.mh.AndroidTestUtil.runTransformer;
+import static androidx.media3.transformer.AndroidTestUtil.MP4_ASSET_URI_STRING;
+import static androidx.media3.transformer.AndroidTestUtil.runTransformer;
 
 import android.content.Context;
 import androidx.media3.transformer.Transformer;

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/RemoveVideoTransformationTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package androidx.media3.transformer.mh;
 
-import static androidx.media3.transformer.mh.AndroidTestUtil.MP4_ASSET_URI_STRING;
-import static androidx.media3.transformer.mh.AndroidTestUtil.runTransformer;
+import static androidx.media3.transformer.AndroidTestUtil.MP4_ASSET_URI_STRING;
+import static androidx.media3.transformer.AndroidTestUtil.runTransformer;
 
 import android.content.Context;
 import androidx.media3.transformer.Transformer;

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/RepeatedTranscodeTransformationTest.java
Patch:
@@ -15,13 +15,14 @@
  */
 package androidx.media3.transformer.mh;
 
-import static androidx.media3.transformer.mh.AndroidTestUtil.runTransformer;
+import static androidx.media3.transformer.AndroidTestUtil.runTransformer;
 import static com.google.common.truth.Truth.assertWithMessage;
 
 import android.content.Context;
 import android.graphics.Matrix;
 import androidx.media3.common.MimeTypes;
 import androidx.media3.common.util.Assertions;
+import androidx.media3.transformer.AndroidTestUtil;
 import androidx.media3.transformer.TransformationRequest;
 import androidx.media3.transformer.Transformer;
 import androidx.test.core.app.ApplicationProvider;

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/SefTransformationTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package androidx.media3.transformer.mh;
 
-import static androidx.media3.transformer.mh.AndroidTestUtil.SEF_ASSET_URI_STRING;
-import static androidx.media3.transformer.mh.AndroidTestUtil.runTransformer;
+import static androidx.media3.transformer.AndroidTestUtil.SEF_ASSET_URI_STRING;
+import static androidx.media3.transformer.AndroidTestUtil.runTransformer;
 
 import android.content.Context;
 import androidx.media3.transformer.TransformationRequest;

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/SetTransformationMatrixTransformationTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package androidx.media3.transformer.mh;
 
-import static androidx.media3.transformer.mh.AndroidTestUtil.REMOTE_MP4_10_SECONDS_URI_STRING;
-import static androidx.media3.transformer.mh.AndroidTestUtil.runTransformer;
+import static androidx.media3.transformer.AndroidTestUtil.REMOTE_MP4_10_SECONDS_URI_STRING;
+import static androidx.media3.transformer.AndroidTestUtil.runTransformer;
 
 import android.content.Context;
 import android.graphics.Matrix;

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/TransformationTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package androidx.media3.transformer.mh;
 
-import static androidx.media3.transformer.mh.AndroidTestUtil.MP4_ASSET_URI_STRING;
-import static androidx.media3.transformer.mh.AndroidTestUtil.runTransformer;
+import static androidx.media3.transformer.AndroidTestUtil.MP4_ASSET_URI_STRING;
+import static androidx.media3.transformer.AndroidTestUtil.runTransformer;
 
 import android.content.Context;
 import androidx.media3.transformer.Transformer;

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/avi/AviSeekMapTest.java
Patch:
@@ -9,7 +9,7 @@ public class AviSeekMapTest {
   @Test
   public void setFrames_givenExactSeekPointMatch() {
     final AviSeekMap aviSeekMap = DataHelper.getAviSeekMap();
-    final long position = aviSeekMap.keyFrameOffsetsDiv2[1] * 2L + aviSeekMap.moviOffset;
+    final long position = aviSeekMap.keyFrameOffsetsDiv2[1] * 2L + aviSeekMap.seekOffset;
     final int secs = 4;
     final AviTrack[] aviTracks = new AviTrack[]{DataHelper.getVideoAviTrack(secs),
         DataHelper.getAudioAviTrack(secs)};

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/avi/StreamHeaderBox.java
Patch:
@@ -31,7 +31,7 @@ public float getFrameRate() {
   }
 
   public long getDurationUs() {
-    return getScale() * getLength() * 1_000_000L / getRate();
+    return 1_000_000L * getScale() * getLength() / getRate();
   }
 
   public int getSteamType() {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/avi/PicCountClockTest.java
Patch:
@@ -7,15 +7,15 @@ public class PicCountClockTest {
   @Test
   public void us_givenTwoStepsForward() {
     final PicCountClock picCountClock = new PicCountClock(10_000L, 100);
-    picCountClock.setMaxPicCount(16*2);
+    picCountClock.setMaxPicCount(16*2, 2);
     picCountClock.setPicCount(2*2);
     Assert.assertEquals(2*100, picCountClock.getUs());
   }
 
   @Test
   public void us_givenThreeStepsBackwards() {
     final PicCountClock picCountClock = new PicCountClock(10_000L, 100);
-    picCountClock.setMaxPicCount(16*2);
+    picCountClock.setMaxPicCount(16*2, 2);
     picCountClock.setPicCount(4*2); // 400ms
     Assert.assertEquals(400, picCountClock.getUs());
     picCountClock.setPicCount(1*2);
@@ -32,7 +32,7 @@ public void setIndex_given3Chunks() {
   @Test
   public void us_giveWrapBackwards() {
     final PicCountClock picCountClock = new PicCountClock(10_000L, 100);
-    picCountClock.setMaxPicCount(16*2);
+    picCountClock.setMaxPicCount(16*2, 2);
     //Need to walk up no faster than maxPicCount / 2
     picCountClock.setPicCount(7*2);
     picCountClock.setPicCount(11*2);

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/avi/AviExtractor.java
Patch:
@@ -471,9 +471,10 @@ void readIdx1(ExtractorInput input, int remaining) throws IOException {
   }
 
   @Nullable
-  private AviTrack getAviTrack(int chunkId) {
+  @VisibleForTesting
+  AviTrack getAviTrack(int chunkId) {
     for (AviTrack aviTrack : aviTracks) {
-      if (aviTrack.handlesChunkId(chunkId)) {
+      if (aviTrack != null && aviTrack.handlesChunkId(chunkId)) {
         return aviTrack;
       }
     }

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/avi/VideoFormat.java
Patch:
@@ -28,7 +28,7 @@ public class VideoFormat {
     STREAM_MAP.put(XVID, mimeType);
     STREAM_MAP.put('D' | ('X' << 8) | ('5' << 16) | ('0' << 24), mimeType);
     STREAM_MAP.put('d' | ('i' << 8) | ('v' << 16) | ('x' << 24), mimeType);
-
+    STREAM_MAP.put('F' | ('M' << 8) | ('P' << 16) | ('4' << 24), mimeType);
     STREAM_MAP.put('M' | ('J' << 8) | ('P' << 16) | ('G' << 24), MimeTypes.VIDEO_MJPEG);
     STREAM_MAP.put('m' | ('j' << 8) | ('p' << 16) | ('g' << 24), MimeTypes.VIDEO_MJPEG);
   }

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/SimpleExoPlayer.java
Patch:
@@ -1552,9 +1552,7 @@ public void setDeviceMuted(boolean muted) {
     streamVolumeManager.setMuted(muted);
   }
 
-  @Deprecated
-  @Override
-  public void setThrowsWhenUsingWrongThread(boolean throwsWhenUsingWrongThread) {
+  /* package */ void setThrowsWhenUsingWrongThread(boolean throwsWhenUsingWrongThread) {
     this.throwsWhenUsingWrongThread = throwsWhenUsingWrongThread;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -1541,9 +1541,7 @@ public void setDeviceMuted(boolean muted) {
     streamVolumeManager.setMuted(muted);
   }
 
-  @Deprecated
-  @Override
-  public void setThrowsWhenUsingWrongThread(boolean throwsWhenUsingWrongThread) {
+  /* package */ void setThrowsWhenUsingWrongThread(boolean throwsWhenUsingWrongThread) {
     this.throwsWhenUsingWrongThread = throwsWhenUsingWrongThread;
   }
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -774,6 +774,7 @@ public void cancel() {
    */
   private void releaseResources(boolean forCancellation) throws TransformationException {
     verifyApplicationThread();
+    progressState = PROGRESS_STATE_NO_TRANSFORMATION;
     if (player != null) {
       player.release();
       player = null;
@@ -787,7 +788,6 @@ private void releaseResources(boolean forCancellation) throws TransformationExce
       }
       muxerWrapper = null;
     }
-    progressState = PROGRESS_STATE_NO_TRANSFORMATION;
   }
 
   private void verifyApplicationThread() {

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/SessionPlayerConnectorTest.java
Patch:
@@ -924,8 +924,7 @@ public void onPlaylistChanged(
     assertThat(onPlaylistChangedLatch.getCount()).isEqualTo(1);
   }
 
-  // TODO(b/168860979): De-flake and re-enable.
-  @Ignore
+  @Ignore("Internal ref: b/168860979")
   @Test
   @LargeTest
   public void replacePlaylistItem_calledOnlyOnce_notifiesPlaylistChangeOnlyOnce() throws Exception {

File: library/common/src/main/java/com/google/android/exoplayer2/HeartRating.java
Patch:
@@ -100,7 +100,7 @@ public Bundle toBundle() {
 
   private static HeartRating fromBundle(Bundle bundle) {
     checkArgument(
-        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_DEFAULT)
+        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_UNSET)
             == TYPE);
     boolean isRated = bundle.getBoolean(keyForField(FIELD_RATED), /* defaultValue= */ false);
     return isRated

File: library/common/src/main/java/com/google/android/exoplayer2/PercentageRating.java
Patch:
@@ -96,7 +96,7 @@ public Bundle toBundle() {
 
   private static PercentageRating fromBundle(Bundle bundle) {
     checkArgument(
-        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_DEFAULT)
+        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_UNSET)
             == TYPE);
     float percent = bundle.getFloat(keyForField(FIELD_PERCENT), /* defaultValue= */ RATING_UNSET);
     return percent == RATING_UNSET ? new PercentageRating() : new PercentageRating(percent);

File: library/common/src/main/java/com/google/android/exoplayer2/StarRating.java
Patch:
@@ -125,7 +125,7 @@ public Bundle toBundle() {
 
   private static StarRating fromBundle(Bundle bundle) {
     checkArgument(
-        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_DEFAULT)
+        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_UNSET)
             == TYPE);
     int maxStars =
         bundle.getInt(keyForField(FIELD_MAX_STARS), /* defaultValue= */ MAX_STARS_DEFAULT);

File: library/common/src/main/java/com/google/android/exoplayer2/ThumbRating.java
Patch:
@@ -97,7 +97,7 @@ public Bundle toBundle() {
 
   private static ThumbRating fromBundle(Bundle bundle) {
     checkArgument(
-        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_DEFAULT)
+        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_UNSET)
             == TYPE);
     boolean rated = bundle.getBoolean(keyForField(FIELD_RATED), /* defaultValue= */ false);
     return rated

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -2405,6 +2405,8 @@ public static String getTrackTypeString(@C.TrackType int trackType) {
         return "camera motion";
       case C.TRACK_TYPE_NONE:
         return "none";
+      case C.TRACK_TYPE_UNKNOWN:
+        return "unknown";
       default:
         return trackType >= C.TRACK_TYPE_CUSTOM_BASE ? "custom (" + trackType + ")" : "?";
     }

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadManagerDashTest.java
Patch:
@@ -109,8 +109,7 @@ public void tearDown() {
     testThread.release();
   }
 
-  // Disabled due to flakiness.
-  @Ignore
+  @Ignore("Disabled due to flakiness")
   @Test
   public void saveAndLoadActionFile() throws Throwable {
     // Configure fakeDataSet to block until interrupted when TEST_MPD is read.

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadServiceDashTest.java
Patch:
@@ -157,7 +157,7 @@ public void tearDown() {
     testThread.release();
   }
 
-  @Ignore // b/78877092
+  @Ignore("Internal ref: b/78877092")
   @Test
   public void multipleDownloadRequest() throws Throwable {
     downloadKeys(fakeStreamKey1);
@@ -168,7 +168,7 @@ public void multipleDownloadRequest() throws Throwable {
     assertCachedData(cache, fakeDataSet);
   }
 
-  @Ignore // b/78877092
+  @Ignore("Internal ref: b/78877092")
   @Test
   public void removeAction() throws Throwable {
     downloadKeys(fakeStreamKey1, fakeStreamKey2);
@@ -182,7 +182,7 @@ public void removeAction() throws Throwable {
     assertCacheEmpty(cache);
   }
 
-  @Ignore // b/78877092
+  @Ignore("Internal ref: b/78877092")
   @Test
   public void removeBeforeDownloadComplete() throws Throwable {
     pauseDownloadCondition = new ConditionVariable();

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerNotificationManager.java
Patch:
@@ -1478,6 +1478,7 @@ private static Map<String, NotificationCompat.Action> createPlaybackActions(
     return actions;
   }
 
+  @SuppressWarnings("UnspecifiedImmutableFlag") // Warning is spurious.
   private static PendingIntent createBroadcastIntent(
       String action, Context context, int instanceId) {
     Intent intent = new Intent(action).setPackage(context.getPackageName());

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -776,6 +776,7 @@ public void cancel() {
    */
   private void releaseResources(boolean forCancellation) throws TransformationException {
     verifyApplicationThread();
+    progressState = PROGRESS_STATE_NO_TRANSFORMATION;
     if (player != null) {
       player.release();
       player = null;
@@ -789,7 +790,6 @@ private void releaseResources(boolean forCancellation) throws TransformationExce
       }
       muxerWrapper = null;
     }
-    progressState = PROGRESS_STATE_NO_TRANSFORMATION;
   }
 
   private void verifyApplicationThread() {

File: libraries/common/src/main/java/androidx/media3/common/HeartRating.java
Patch:
@@ -102,7 +102,7 @@ public Bundle toBundle() {
 
   private static HeartRating fromBundle(Bundle bundle) {
     checkArgument(
-        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_DEFAULT)
+        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_UNSET)
             == TYPE);
     boolean isRated = bundle.getBoolean(keyForField(FIELD_RATED), /* defaultValue= */ false);
     return isRated

File: libraries/common/src/main/java/androidx/media3/common/PercentageRating.java
Patch:
@@ -98,7 +98,7 @@ public Bundle toBundle() {
 
   private static PercentageRating fromBundle(Bundle bundle) {
     checkArgument(
-        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_DEFAULT)
+        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_UNSET)
             == TYPE);
     float percent = bundle.getFloat(keyForField(FIELD_PERCENT), /* defaultValue= */ RATING_UNSET);
     return percent == RATING_UNSET ? new PercentageRating() : new PercentageRating(percent);

File: libraries/common/src/main/java/androidx/media3/common/StarRating.java
Patch:
@@ -127,7 +127,7 @@ public Bundle toBundle() {
 
   private static StarRating fromBundle(Bundle bundle) {
     checkArgument(
-        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_DEFAULT)
+        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_UNSET)
             == TYPE);
     int maxStars =
         bundle.getInt(keyForField(FIELD_MAX_STARS), /* defaultValue= */ MAX_STARS_DEFAULT);

File: libraries/common/src/main/java/androidx/media3/common/ThumbRating.java
Patch:
@@ -99,7 +99,7 @@ public Bundle toBundle() {
 
   private static ThumbRating fromBundle(Bundle bundle) {
     checkArgument(
-        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_DEFAULT)
+        bundle.getInt(keyForField(FIELD_RATING_TYPE), /* defaultValue= */ RATING_TYPE_UNSET)
             == TYPE);
     boolean rated = bundle.getBoolean(keyForField(FIELD_RATED), /* defaultValue= */ false);
     return rated

File: libraries/common/src/main/java/androidx/media3/common/util/Util.java
Patch:
@@ -2407,6 +2407,8 @@ public static String getTrackTypeString(@C.TrackType int trackType) {
         return "camera motion";
       case C.TRACK_TYPE_NONE:
         return "none";
+      case C.TRACK_TYPE_UNKNOWN:
+        return "unknown";
       default:
         return trackType >= C.TRACK_TYPE_CUSTOM_BASE ? "custom (" + trackType + ")" : "?";
     }

File: libraries/exoplayer_dash/src/test/java/androidx/media3/exoplayer/dash/offline/DownloadManagerDashTest.java
Patch:
@@ -109,8 +109,7 @@ public void tearDown() {
     testThread.release();
   }
 
-  // Disabled due to flakiness.
-  @Ignore
+  @Ignore("Disabled due to flakiness")
   @Test
   public void saveAndLoadActionFile() throws Throwable {
     // Configure fakeDataSet to block until interrupted when TEST_MPD is read.

File: libraries/exoplayer_dash/src/test/java/androidx/media3/exoplayer/dash/offline/DownloadServiceDashTest.java
Patch:
@@ -157,7 +157,7 @@ public void tearDown() {
     testThread.release();
   }
 
-  @Ignore // b/78877092
+  @Ignore("Internal ref: b/78877092")
   @Test
   public void multipleDownloadRequest() throws Throwable {
     downloadKeys(fakeStreamKey1);
@@ -168,7 +168,7 @@ public void multipleDownloadRequest() throws Throwable {
     assertCachedData(cache, fakeDataSet);
   }
 
-  @Ignore // b/78877092
+  @Ignore("Internal ref: b/78877092")
   @Test
   public void removeAction() throws Throwable {
     downloadKeys(fakeStreamKey1, fakeStreamKey2);
@@ -182,7 +182,7 @@ public void removeAction() throws Throwable {
     assertCacheEmpty(cache);
   }
 
-  @Ignore // b/78877092
+  @Ignore("Internal ref: b/78877092")
   @Test
   public void removeBeforeDownloadComplete() throws Throwable {
     pauseDownloadCondition = new ConditionVariable();

File: libraries/ui/src/main/java/androidx/media3/ui/PlayerNotificationManager.java
Patch:
@@ -1480,6 +1480,7 @@ private static Map<String, NotificationCompat.Action> createPlaybackActions(
     return actions;
   }
 
+  @SuppressWarnings("UnspecifiedImmutableFlag") // Warning is spurious.
   private static PendingIntent createBroadcastIntent(
       String action, Context context, int instanceId) {
     Intent intent = new Intent(action).setPackage(context.getPackageName());

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/avi/AviExtractor.java
Patch:
@@ -431,7 +431,7 @@ void readIdx1(ExtractorInput input, int remaining) throws IOException {
   @Nullable
   private AviTrack getAviTrack(int chunkId) {
     final int streamId = getStreamId(chunkId);
-    if (streamId >= 0) {
+    if (streamId >= 0 && streamId < aviTracks.length) {
       return aviTracks[streamId];
     }
     return null;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/avi/AviSeekMap.java
Patch:
@@ -3,7 +3,6 @@
 import androidx.annotation.NonNull;
 import com.google.android.exoplayer2.extractor.SeekMap;
 import com.google.android.exoplayer2.extractor.SeekPoint;
-import com.google.android.exoplayer2.util.Log;
 
 public class AviSeekMap implements SeekMap {
   final long videoUsPerChunk;
@@ -58,7 +57,7 @@ public SeekPoints getSeekPoints(long timeUs) {
     int offset = seekOffsets[videoStreamId][seekFrameIndex];
     final long outUs = seekFrameIndex * seekIndexFactor * videoUsPerChunk;
     final long position = offset + moviOffset;
-    Log.d(AviExtractor.TAG, "SeekPoint: us=" + outUs + " pos=" + position);
+    //Log.d(AviExtractor.TAG, "SeekPoint: us=" + outUs + " pos=" + position);
 
     return new SeekPoints(new SeekPoint(outUs, position));
   }

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/avi/AudioFormatTest.java
Patch:
@@ -13,13 +13,14 @@ public class AudioFormatTest {
 
   @Test
   public void getters_givenAacStreamFormat() throws IOException {
-    final StreamFormatBox streamFormatBox = DataHelper.getAudioStreamFormat();
+    final StreamFormatBox streamFormatBox = DataHelper.getAacStreamFormat();
     final AudioFormat audioFormat = streamFormatBox.getAudioFormat();
     Assert.assertEquals(MimeTypes.AUDIO_AAC, audioFormat.getMimeType());
     Assert.assertEquals(2, audioFormat.getChannels());
     Assert.assertEquals(AudioFormat.WAVE_FORMAT_AAC, audioFormat.getFormatTag());
     Assert.assertEquals(48000, audioFormat.getSamplesPerSecond());
     Assert.assertEquals(0, audioFormat.getBitsPerSample()); //Not meaningful for AAC
     Assert.assertArrayEquals(CODEC_PRIVATE, audioFormat.getCodecData());
+    Assert.assertEquals(MimeTypes.AUDIO_AAC, audioFormat.getMimeType());
   }
 }

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/avi/StreamHeaderBoxTest.java
Patch:
@@ -19,11 +19,10 @@ public void getters_givenXvidStreamHeader() throws IOException {
     Assert.assertTrue(streamHeaderBox.isVideo());
     Assert.assertFalse(streamHeaderBox.isAudio());
     Assert.assertEquals(StreamHeaderBox.VIDS, streamHeaderBox.getSteamType());
-    Assert.assertEquals(StreamHeaderBox.XVID, streamHeaderBox.getFourCC());
+    Assert.assertEquals(VideoFormat.XVID, streamHeaderBox.getFourCC());
     Assert.assertEquals(0, streamHeaderBox.getInitialFrames());
     Assert.assertEquals(FPS24, streamHeaderBox.getFrameRate(), 0.1);
     Assert.assertEquals(US_SAMPLE24FPS, streamHeaderBox.getUsPerSample());
-    Assert.assertEquals(MimeTypes.VIDEO_MP4V, streamHeaderBox.getMimeType());
     Assert.assertEquals(11805L, streamHeaderBox.getLength());
     Assert.assertEquals(0, streamHeaderBox.getSuggestedBufferSize());
   }

File: extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/VpxLibrary.java
Patch:
@@ -28,7 +28,7 @@ public final class VpxLibrary {
   }
 
   private static final LibraryLoader LOADER = new LibraryLoader("vpx", "vpxV2JNI");
-  @C.CryptoType private static int cryptoType = C.CRYPTO_TYPE_UNSUPPORTED;
+  private static @C.CryptoType int cryptoType = C.CRYPTO_TYPE_UNSUPPORTED;
 
   private VpxLibrary() {}
 

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecUtil.java
Patch:
@@ -142,7 +142,7 @@ public static MediaCodecInfo getDecoderInfo(String mimeType, boolean secure, boo
     return decoderInfos.isEmpty() ? null : decoderInfos.get(0);
   }
 
-  /*
+  /**
    * Returns all {@link MediaCodecInfo}s for the given mime type, in the order given by {@link
    * MediaCodecList}.
    *

File: libraries/decoder_vp9/src/main/java/androidx/media3/decoder/vp9/VpxLibrary.java
Patch:
@@ -30,7 +30,7 @@ public final class VpxLibrary {
   }
 
   private static final LibraryLoader LOADER = new LibraryLoader("vpx", "vpxV2JNI");
-  @C.CryptoType private static int cryptoType = C.CRYPTO_TYPE_UNSUPPORTED;
+  private static @C.CryptoType int cryptoType = C.CRYPTO_TYPE_UNSUPPORTED;
 
   private VpxLibrary() {}
 

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/DefaultPlaybackSessionManager.java
Patch:
@@ -177,7 +177,8 @@ public synchronized void updateSessionsWithTimelineChange(EventTime eventTime) {
     Iterator<SessionDescriptor> iterator = sessions.values().iterator();
     while (iterator.hasNext()) {
       SessionDescriptor session = iterator.next();
-      if (!session.tryResolvingToNewTimeline(previousTimeline, currentTimeline)) {
+      if (!session.tryResolvingToNewTimeline(previousTimeline, currentTimeline)
+          || session.isFinishedAtEventTime(eventTime)) {
         iterator.remove();
         if (session.isCreated) {
           if (session.sessionId.equals(currentSessionId)) {

File: libraries/session/src/main/java/androidx/media3/session/MediaControllerImplLegacy.java
Patch:
@@ -280,7 +280,7 @@ public void play() {
                   Uri.parse(pendingSetMediaUriRequest.value), pendingSetMediaUriRequest.extras);
           break;
         default:
-          throw new AssertionError("Unexpected type " + pendingSetMediaUriRequest.type);
+          throw new IllegalStateException("Unexpected type " + pendingSetMediaUriRequest.type);
       }
       pendingSetMediaUriRequest.result.set(new SessionResult(RESULT_SUCCESS));
       pendingSetMediaUriRequest = null;
@@ -345,7 +345,7 @@ public void prepare() {
                   Uri.parse(pendingSetMediaUriRequest.value), pendingSetMediaUriRequest.extras);
           break;
         default:
-          throw new AssertionError("Unexpected type " + pendingSetMediaUriRequest.type);
+          throw new IllegalStateException("Unexpected type " + pendingSetMediaUriRequest.type);
       }
       pendingSetMediaUriRequest.result.set(new SessionResult(RESULT_SUCCESS));
       pendingSetMediaUriRequest = null;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/MediaCodecUtil.java
Patch:
@@ -144,7 +144,7 @@ public static MediaCodecInfo getDecoderInfo(String mimeType, boolean secure, boo
     return decoderInfos.isEmpty() ? null : decoderInfos.get(0);
   }
 
-  /*
+  /**
    * Returns all {@link MediaCodecInfo}s for the given mime type, in the order given by {@link
    * MediaCodecList}.
    *

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/analytics/DefaultPlaybackSessionManager.java
Patch:
@@ -179,7 +179,8 @@ public synchronized void updateSessionsWithTimelineChange(EventTime eventTime) {
     Iterator<SessionDescriptor> iterator = sessions.values().iterator();
     while (iterator.hasNext()) {
       SessionDescriptor session = iterator.next();
-      if (!session.tryResolvingToNewTimeline(previousTimeline, currentTimeline)) {
+      if (!session.tryResolvingToNewTimeline(previousTimeline, currentTimeline)
+          || session.isFinishedAtEventTime(eventTime)) {
         iterator.remove();
         if (session.isCreated) {
           if (session.sessionId.equals(currentSessionId)) {

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/TransformerTest.java
Patch:
@@ -65,6 +65,7 @@
 /** Unit test for {@link Transformer}. */
 @RunWith(AndroidJUnit4.class)
 public final class TransformerTest {
+  // TODO(b/214973843): Disable fallback for all tests that aren't specifically testing fallback.
 
   private static final String URI_PREFIX = "asset:///media/";
   private static final String FILE_VIDEO_ONLY = "mp4/sample_18byte_nclx_colr.mp4";

File: libraries/transformer/src/test/java/androidx/media3/transformer/TransformerTest.java
Patch:
@@ -65,6 +65,7 @@
 /** Unit test for {@link Transformer}. */
 @RunWith(AndroidJUnit4.class)
 public final class TransformerTest {
+  // TODO(b/214973843): Disable fallback for all tests that aren't specifically testing fallback.
 
   private static final String URI_PREFIX = "asset:///media/";
   private static final String FILE_VIDEO_ONLY = "mp4/sample_18byte_nclx_colr.mp4";

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultCodecFactory.java
Patch:
@@ -294,7 +294,7 @@ private static TransformationException createTransformationException(
           mediaCodecName,
           isDecoder
               ? TransformationException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED
-              : TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED);
+              : TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
     }
     return TransformationException.createForUnexpected(cause);
   }

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerAudioRenderer.java
Patch:
@@ -75,7 +75,7 @@ protected boolean ensureConfigured() throws TransformationException {
               "The output sample MIME inferred from the input format is not supported by the muxer."
                   + " Sample MIME type: "
                   + sampleMimeType),
-          TransformationException.ERROR_CODE_MUXER_SAMPLE_MIME_TYPE_UNSUPPORTED);
+          TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
     }
     if (shouldPassthrough(inputFormat)) {
       samplePipeline = new PassthroughSamplePipeline(inputFormat);

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerVideoRenderer.java
Patch:
@@ -84,7 +84,7 @@ protected boolean ensureConfigured() throws TransformationException {
               "The output sample MIME inferred from the input format is not supported by the muxer."
                   + " Sample MIME type: "
                   + sampleMimeType),
-          TransformationException.ERROR_CODE_MUXER_SAMPLE_MIME_TYPE_UNSUPPORTED);
+          TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
     }
     if (shouldPassthrough(inputFormat)) {
       samplePipeline = new PassthroughSamplePipeline(inputFormat);

File: libraries/transformer/src/main/java/androidx/media3/transformer/DefaultCodecFactory.java
Patch:
@@ -101,14 +101,12 @@ public Codec createForAudioEncoding(Format format) throws TransformationExceptio
 
   @Override
   public Codec createForVideoEncoding(Format format) throws TransformationException {
-    checkArgument(format.sampleMimeType != null);
     checkArgument(format.width != Format.NO_VALUE);
     checkArgument(format.height != Format.NO_VALUE);
     // According to interface Javadoc, format.rotationDegrees should be 0. The video should always
     // be in landscape orientation.
     checkArgument(format.height < format.width);
     checkArgument(format.rotationDegrees == 0);
-    // Checking again to silence null checker warning.
     checkNotNull(format.sampleMimeType);
     format = getVideoEncoderSupportedFormat(format);
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultCodecFactory.java
Patch:
@@ -294,7 +294,7 @@ private static TransformationException createTransformationException(
           mediaCodecName,
           isDecoder
               ? TransformationException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED
-              : TransformationException.ERROR_CODE_ENCODING_FORMAT_UNSUPPORTED);
+              : TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
     }
     return TransformationException.createForUnexpected(cause);
   }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerAudioRenderer.java
Patch:
@@ -75,7 +75,7 @@ protected boolean ensureConfigured() throws TransformationException {
               "The output sample MIME inferred from the input format is not supported by the muxer."
                   + " Sample MIME type: "
                   + sampleMimeType),
-          TransformationException.ERROR_CODE_MUXER_SAMPLE_MIME_TYPE_UNSUPPORTED);
+          TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
     }
     if (shouldPassthrough(inputFormat)) {
       samplePipeline = new PassthroughSamplePipeline(inputFormat);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerVideoRenderer.java
Patch:
@@ -84,7 +84,7 @@ protected boolean ensureConfigured() throws TransformationException {
               "The output sample MIME inferred from the input format is not supported by the muxer."
                   + " Sample MIME type: "
                   + sampleMimeType),
-          TransformationException.ERROR_CODE_MUXER_SAMPLE_MIME_TYPE_UNSUPPORTED);
+          TransformationException.ERROR_CODE_OUTPUT_FORMAT_UNSUPPORTED);
     }
     if (shouldPassthrough(inputFormat)) {
       samplePipeline = new PassthroughSamplePipeline(inputFormat);

File: libraries/test_session_current/src/main/java/androidx/media3/session/MockMediaLibraryService.java
Patch:
@@ -313,7 +313,7 @@ public ListenableFuture<LibraryResult<Void>> onSubscribe(
           return Futures.immediateFuture(LibraryResult.ofVoid(params));
         case SUBSCRIBE_ID_NOTIFY_CHILDREN_CHANGED_TO_ONE:
           MockMediaLibraryService.this.session.notifyChildrenChanged(
-              MediaTestUtils.getTestControllerInfo(MockMediaLibraryService.this.session),
+              browser,
               parentId,
               NOTIFY_CHILDREN_CHANGED_ITEM_COUNT,
               NOTIFY_CHILDREN_CHANGED_PARAMS);
@@ -324,7 +324,7 @@ public ListenableFuture<LibraryResult<Void>> onSubscribe(
           return Futures.immediateFuture(LibraryResult.ofVoid(params));
         case SUBSCRIBE_ID_NOTIFY_CHILDREN_CHANGED_TO_ONE_WITH_NON_SUBSCRIBED_ID:
           MockMediaLibraryService.this.session.notifyChildrenChanged(
-              MediaTestUtils.getTestControllerInfo(MockMediaLibraryService.this.session),
+              browser,
               unsubscribedId,
               NOTIFY_CHILDREN_CHANGED_ITEM_COUNT,
               NOTIFY_CHILDREN_CHANGED_PARAMS);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/DefaultCodecFactory.java
Patch:
@@ -101,14 +101,12 @@ public Codec createForAudioEncoding(Format format) throws TransformationExceptio
 
   @Override
   public Codec createForVideoEncoding(Format format) throws TransformationException {
-    checkArgument(format.sampleMimeType != null);
     checkArgument(format.width != Format.NO_VALUE);
     checkArgument(format.height != Format.NO_VALUE);
     // According to interface Javadoc, format.rotationDegrees should be 0. The video should always
     // be in landscape orientation.
     checkArgument(format.height < format.width);
     checkArgument(format.rotationDegrees == 0);
-    // Checking again to silence null checker warning.
     checkNotNull(format.sampleMimeType);
     format = getVideoEncoderSupportedFormat(format);
 

File: libraries/session/src/main/java/androidx/media3/session/MediaNotificationHandler.java
Patch:
@@ -259,7 +259,7 @@ private int getSmallIconResId() {
       return appIcon;
     } else {
       // App icon is not set.
-      return R.drawable.media_session_service_notification_ic_music_note;
+      return Util.SDK_INT >= 21 ? R.drawable.media_session_service_notification_ic_music_note : 0;
     }
   }
 

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/BaseUrlExclusionList.java
Patch:
@@ -68,7 +68,9 @@ public BaseUrlExclusionList() {
   public void exclude(BaseUrl baseUrlToExclude, long exclusionDurationMs) {
     long excludeUntilMs = SystemClock.elapsedRealtime() + exclusionDurationMs;
     addExclusion(baseUrlToExclude.serviceLocation, excludeUntilMs, excludedServiceLocations);
-    addExclusion(baseUrlToExclude.priority, excludeUntilMs, excludedPriorities);
+    if (baseUrlToExclude.priority != BaseUrl.PRIORITY_UNSET) {
+      addExclusion(baseUrlToExclude.priority, excludeUntilMs, excludedPriorities);
+    }
   }
 
   /**

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/manifest/Representation.java
Patch:
@@ -215,7 +215,7 @@ public static SingleSegmentRepresentation newInstance(
           new RangedUri(null, initializationStart, initializationEnd - initializationStart + 1);
       SingleSegmentBase segmentBase =
           new SingleSegmentBase(rangedUri, 1, 0, indexStart, indexEnd - indexStart + 1);
-      List<BaseUrl> baseUrls = ImmutableList.of(new BaseUrl(uri));
+      ImmutableList<BaseUrl> baseUrls = ImmutableList.of(new BaseUrl(uri));
       return new SingleSegmentRepresentation(
           revisionId,
           format,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/RendererCapabilities.java
Patch:
@@ -29,7 +29,7 @@
 public interface RendererCapabilities {
 
   /** @deprecated Use {@link C.FormatSupport} instead. */
-  @SuppressWarnings("Deprecation")
+  @SuppressWarnings("deprecation")
   @Documented
   @Retention(RetentionPolicy.SOURCE)
   @IntDef({

File: libraries/session/src/main/java/androidx/media3/session/MediaController.java
Patch:
@@ -374,6 +374,7 @@ default ListenableFuture<SessionResult> onCustomCommand(
     @Initialized
     MediaController thisRef = this;
     impl = thisRef.createImpl(context, thisRef, token, connectionHints);
+    impl.connect();
   }
 
   /* package */ MediaControllerImpl createImpl(
@@ -1823,6 +1824,8 @@ private void verifyApplicationThread() {
 
   interface MediaControllerImpl {
 
+    void connect();
+
     void addListener(Player.Listener listener);
 
     void removeListener(Player.Listener listener);

File: libraries/session/src/main/java/androidx/media3/session/MediaControllerImplLegacy.java
Patch:
@@ -155,9 +155,11 @@ public MediaControllerImplLegacy(Context context, MediaController instance, Sess
     this.instance = instance;
     controllerCompatCallback = new ControllerCompatCallback();
     this.token = token;
+  }
 
+  @Override
+  public void connect() {
     if (this.token.getType() == SessionToken.TYPE_SESSION) {
-      browserCompat = null;
       connectToSession((MediaSessionCompat.Token) checkStateNotNull(this.token.getBinder()));
     } else {
       connectToService();

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/avi/BoxFactory.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.Arrays;
 
 public class BoxFactory {
-  static int[] types = {AviHeaderBox.AVIH, StreamHeaderBox.STRH, StreamFormatBox.STRF};
+  static int[] types = {AviHeaderBox.AVIH, StreamHeaderBox.STRH, StreamFormatBox.STRF, StreamNameBox.STRN};
   static {
     Arrays.sort(types);
   }
@@ -23,6 +23,8 @@ private ResidentBox createBoxImpl(final int type, final int size, final ByteBuff
         return new StreamHeaderBox(type, size, boxBuffer);
       case StreamFormatBox.STRF:
         return new StreamFormatBox(type, size, boxBuffer);
+      case StreamNameBox.STRN:
+        return new StreamNameBox(type, size, boxBuffer);
       default:
         return null;
     }

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/avi/ListBox.java
Patch:
@@ -60,7 +60,7 @@ public static ListBox newInstance(final int listSize, BoxFactory boxFactory,
     byte [] bytes = headerBuffer.array();
     input.readFully(bytes, 0, 4);
     final int listType = headerBuffer.getInt();
-
+    //String listTypeName = AviExtractor.toString(listType);
     long endPos = input.getPosition() + listSize - 4;
     while (input.getPosition() + 8 < endPos) {
       headerBuffer.clear();
@@ -73,7 +73,7 @@ public static ListBox newInstance(final int listSize, BoxFactory boxFactory,
       } else {
         box = boxFactory.createBox(type, size, input);
       }
-
+      AviExtractor.alignInput(input);
       if (box != null) {
         list.add(box);
       }

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/avi/AviSeekMap.java
Patch:
@@ -63,7 +63,7 @@ public SeekPoints getSeekPoints(long timeUs) {
 
   public void setFrames(final long position, final long timeUs, final SparseArray<AviTrack> idTrackMap) {
     final int seekFrameIndex = getSeekFrameIndex(timeUs);
-    videoTrack.frame = seekFrameIndex * seekIndexFactor;
+    videoTrack.seekFrame(seekFrameIndex * seekIndexFactor);
     for (int i=0;i<audioIdMap.size();i++) {
       final int audioId = audioIdMap.keyAt(i);
       final int[] video2AudioFrameMap = audioIdMap.get(audioId);

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/FlacStreamMetadata.java
Patch:
@@ -249,7 +249,9 @@ public Metadata getMetadataCopyWithAppendedEntriesFrom(@Nullable Metadata other)
     return metadata == null ? other : metadata.copyWithAppendedEntriesFrom(other);
   }
 
-  /** Returns */
+  /**
+   * Returns a new Metadata instance created from {@code vorbisComments} and {@code pictureFrames}
+   */
   @Nullable
   private static Metadata concatenateVorbisMetadata(
       List<String> vorbisComments,

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/VorbisUtil.java
Patch:
@@ -265,7 +265,7 @@ public static CommentHeader readVorbisCommentHeader(
   }
 
   /**
-   * Builds a metadata instance from Vorbis comments.
+   * Builds a metadata instance from a list of Vorbis Comments.
    *
    * METADATA_BLOCK_PICTURE comments will be transformed into picture frames.
    * All others will be transformed into vorbis comments.

File: library/extractor/src/main/java/com/google/android/exoplayer2/metadata/vorbis/PictureFrame.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Arrays;
 
 /** A picture parsed from a FLAC file. */
-public final class PictureFrame implements Metadata.Entry {
+public class PictureFrame implements Metadata.Entry {
 
   /** The type of the picture. */
   public final int pictureType;

File: library/extractor/src/main/java/com/google/android/exoplayer2/metadata/vorbis/VorbisComment.java
Patch:
@@ -24,7 +24,7 @@
 import com.google.android.exoplayer2.metadata.Metadata;
 
 /** A vorbis comment, extracted from a FLAC or OGG file. */
-public final class VorbisComment implements Metadata.Entry {
+public class VorbisComment implements Metadata.Entry {
 
   /** The key. */
   public final String key;

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/BaseUrlExclusionList.java
Patch:
@@ -66,7 +66,9 @@ public BaseUrlExclusionList() {
   public void exclude(BaseUrl baseUrlToExclude, long exclusionDurationMs) {
     long excludeUntilMs = SystemClock.elapsedRealtime() + exclusionDurationMs;
     addExclusion(baseUrlToExclude.serviceLocation, excludeUntilMs, excludedServiceLocations);
-    addExclusion(baseUrlToExclude.priority, excludeUntilMs, excludedPriorities);
+    if (baseUrlToExclude.priority != BaseUrl.PRIORITY_UNSET) {
+      addExclusion(baseUrlToExclude.priority, excludeUntilMs, excludedPriorities);
+    }
   }
 
   /**

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/Representation.java
Patch:
@@ -213,7 +213,7 @@ public static SingleSegmentRepresentation newInstance(
           new RangedUri(null, initializationStart, initializationEnd - initializationStart + 1);
       SingleSegmentBase segmentBase =
           new SingleSegmentBase(rangedUri, 1, 0, indexStart, indexEnd - indexStart + 1);
-      List<BaseUrl> baseUrls = ImmutableList.of(new BaseUrl(uri));
+      ImmutableList<BaseUrl> baseUrls = ImmutableList.of(new BaseUrl(uri));
       return new SingleSegmentRepresentation(
           revisionId,
           format,

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DefaultDashChunkSource.java
Patch:
@@ -217,7 +217,7 @@ public DefaultDashChunkSource(
               periodDurationUs,
               representation,
               selectedBaseUrl != null ? selectedBaseUrl : representation.baseUrls.get(0),
-              BundledChunkExtractor.FACTORY.createProgressiveMediaExtractor(
+              chunkExtractorFactory.createProgressiveMediaExtractor(
                   trackType,
                   representation.format,
                   enableEventMessageTrack,

File: library/core/src/main/java/com/google/android/exoplayer2/RendererCapabilities.java
Patch:
@@ -25,7 +25,7 @@
 public interface RendererCapabilities {
 
   /** @deprecated Use {@link C.FormatSupport} instead. */
-  @SuppressWarnings("Deprecation")
+  @SuppressWarnings("deprecation")
   @Documented
   @Retention(RetentionPolicy.SOURCE)
   @IntDef({

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/spherical/ProjectionRenderer.java
Patch:
@@ -178,9 +178,6 @@ public void draw(int textureId, float[] mvpMatrix, boolean rightEye) {
     // Render.
     GLES20.glDrawArrays(meshData.drawMode, /* first= */ 0, meshData.vertexCount);
     checkGlError();
-
-    GLES20.glDisableVertexAttribArray(positionHandle);
-    GLES20.glDisableVertexAttribArray(texCoordsHandle);
   }
 
   /** Cleans up GL resources. */

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -99,7 +99,6 @@ public static final class Builder {
     private boolean removeAudio;
     private boolean removeVideo;
     private String containerMimeType;
-    // TODO(b/204869912): Make final once deprecated setters are removed.
     private TransformationRequest transformationRequest;
     private Transformer.Listener listener;
     private DebugViewProvider debugViewProvider;

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerVideoRenderer.java
Patch:
@@ -77,7 +77,7 @@ protected boolean ensureConfigured() throws TransformationException {
     }
     Format inputFormat = checkNotNull(formatHolder.format);
     String sampleMimeType = checkNotNull(inputFormat.sampleMimeType);
-    if (transformationRequest.audioMimeType == null
+    if (transformationRequest.videoMimeType == null
         && !muxerWrapper.supportsSampleMimeType(sampleMimeType)) {
       throw TransformationException.createForMuxer(
           new IllegalArgumentException(

File: libraries/exoplayer_rtsp/src/test/java/androidx/media3/exoplayer/rtsp/RtspPlaybackTest.java
Patch:
@@ -209,7 +209,7 @@ public RtspResponse getOptionsResponse() {
     }
 
     @Override
-    public RtspResponse getDescribeResponse(Uri requestedUri) {
+    public RtspResponse getDescribeResponse(Uri requestedUri, RtspHeaders headers) {
       return RtspTestUtils.newDescribeResponseWithSdpMessage(
           SESSION_DESCRIPTION, rtpPacketStreamDumps, requestedUri);
     }

File: libraries/exoplayer_rtsp/src/test/java/androidx/media3/exoplayer/rtsp/RtspServer.java
Patch:
@@ -45,7 +45,7 @@ public interface ResponseProvider {
     RtspResponse getOptionsResponse();
 
     /** Returns an RTSP DESCRIBE {@link RtspResponse response}. */
-    default RtspResponse getDescribeResponse(Uri requestedUri) {
+    default RtspResponse getDescribeResponse(Uri requestedUri, RtspHeaders headers) {
       return RtspTestUtils.RTSP_ERROR_METHOD_NOT_ALLOWED;
     }
 
@@ -143,7 +143,7 @@ private void handleRtspMessage(List<String> message) {
           break;
 
         case METHOD_DESCRIBE:
-          sendResponse(responseProvider.getDescribeResponse(request.uri), cSeq);
+          sendResponse(responseProvider.getDescribeResponse(request.uri, request.headers), cSeq);
           break;
 
         case METHOD_SETUP:

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/manifest/UrlTemplate.java
Patch:
@@ -142,7 +142,7 @@ private static int parseTemplate(
             // Allowed conversions are decimal integer (which is the only conversion allowed by the
             // DASH specification) and hexadecimal integer (due to existing content that uses it).
             // Else we assume that the conversion is missing, and that it should be decimal integer.
-            if (!formatTag.endsWith("d") && !formatTag.endsWith("x")) {
+            if (!formatTag.endsWith("d") && !formatTag.endsWith("x") && !formatTag.endsWith("X")) {
               formatTag += "d";
             }
             identifier = identifier.substring(0, formatTagIndex);

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformationException.java
Patch:
@@ -313,7 +313,7 @@ public static TransformationException createForUnexpected(Exception cause) {
    * @param errorCode A number which identifies the cause of the error. May be one of the {@link
    *     ErrorCode ErrorCodes}.
    */
-  public TransformationException(
+  private TransformationException(
       @Nullable String message, @Nullable Throwable cause, @ErrorCode int errorCode) {
     super(message, cause);
     this.errorCode = errorCode;

File: library/core/src/main/java/com/google/android/exoplayer2/video/spherical/ProjectionRenderer.java
Patch:
@@ -178,9 +178,6 @@ public void draw(int textureId, float[] mvpMatrix, boolean rightEye) {
     // Render.
     GLES20.glDrawArrays(meshData.drawMode, /* first= */ 0, meshData.vertexCount);
     checkGlError();
-
-    GLES20.glDisableVertexAttribArray(positionHandle);
-    GLES20.glDisableVertexAttribArray(texCoordsHandle);
   }
 
   /** Cleans up GL resources. */

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ogg/VorbisReader.java
Patch:
@@ -117,8 +117,6 @@ protected boolean readHeaders(ParsableByteArray packet, long position, SetupData
         Arrays.asList(vorbisSetup.commentHeader.comments)
     );
 
-    Log.d("VorbisReader", "hi metadata" + vorbisMetadata.toString());
-
     setupData.format =
         new Format.Builder()
             .setSampleMimeType(MimeTypes.AUDIO_VORBIS)

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ogg/OggExtractorParameterizedTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.extractor.ogg;
 
+import com.google.android.exoplayer2.testutil.DumpFileAsserts;
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
 import com.google.common.collect.ImmutableList;
 import org.junit.Test;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -97,7 +97,6 @@ public static final class Builder {
     private boolean removeAudio;
     private boolean removeVideo;
     private String containerMimeType;
-    // TODO(b/204869912): Make final once deprecated setters are removed.
     private TransformationRequest transformationRequest;
     private Transformer.Listener listener;
     private DebugViewProvider debugViewProvider;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerVideoRenderer.java
Patch:
@@ -77,7 +77,7 @@ protected boolean ensureConfigured() throws TransformationException {
     }
     Format inputFormat = checkNotNull(formatHolder.format);
     String sampleMimeType = checkNotNull(inputFormat.sampleMimeType);
-    if (transformationRequest.audioMimeType == null
+    if (transformationRequest.videoMimeType == null
         && !muxerWrapper.supportsSampleMimeType(sampleMimeType)) {
       throw TransformationException.createForMuxer(
           new IllegalArgumentException(

File: library/rtsp/src/test/java/com/google/android/exoplayer2/source/rtsp/RtspPlaybackTest.java
Patch:
@@ -209,7 +209,7 @@ public RtspResponse getOptionsResponse() {
     }
 
     @Override
-    public RtspResponse getDescribeResponse(Uri requestedUri) {
+    public RtspResponse getDescribeResponse(Uri requestedUri, RtspHeaders headers) {
       return RtspTestUtils.newDescribeResponseWithSdpMessage(
           SESSION_DESCRIPTION, rtpPacketStreamDumps, requestedUri);
     }

File: library/rtsp/src/test/java/com/google/android/exoplayer2/source/rtsp/RtspServer.java
Patch:
@@ -45,7 +45,7 @@ public interface ResponseProvider {
     RtspResponse getOptionsResponse();
 
     /** Returns an RTSP DESCRIBE {@link RtspResponse response}. */
-    default RtspResponse getDescribeResponse(Uri requestedUri) {
+    default RtspResponse getDescribeResponse(Uri requestedUri, RtspHeaders headers) {
       return RtspTestUtils.RTSP_ERROR_METHOD_NOT_ALLOWED;
     }
 
@@ -143,7 +143,7 @@ private void handleRtspMessage(List<String> message) {
           break;
 
         case METHOD_DESCRIBE:
-          sendResponse(responseProvider.getDescribeResponse(request.uri), cSeq);
+          sendResponse(responseProvider.getDescribeResponse(request.uri, request.headers), cSeq);
           break;
 
         case METHOD_SETUP:

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/UrlTemplate.java
Patch:
@@ -140,7 +140,7 @@ private static int parseTemplate(
             // Allowed conversions are decimal integer (which is the only conversion allowed by the
             // DASH specification) and hexadecimal integer (due to existing content that uses it).
             // Else we assume that the conversion is missing, and that it should be decimal integer.
-            if (!formatTag.endsWith("d") && !formatTag.endsWith("x")) {
+            if (!formatTag.endsWith("d") && !formatTag.endsWith("x") && !formatTag.endsWith("X")) {
               formatTag += "d";
             }
             identifier = identifier.substring(0, formatTagIndex);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformationException.java
Patch:
@@ -311,7 +311,7 @@ public static TransformationException createForUnexpected(Exception cause) {
    * @param errorCode A number which identifies the cause of the error. May be one of the {@link
    *     ErrorCode ErrorCodes}.
    */
-  public TransformationException(
+  private TransformationException(
       @Nullable String message, @Nullable Throwable cause, @ErrorCode int errorCode) {
     super(message, cause);
     this.errorCode = errorCode;

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/manifest/DashManifestParser.java
Patch:
@@ -1474,8 +1474,6 @@ protected int parseSelectionFlagsFromDashRoleScheme(@Nullable String value) {
       return 0;
     }
     switch (value) {
-      case "main":
-        return C.SELECTION_FLAG_DEFAULT;
       case "forced_subtitle":
         // Support both hyphen and underscore (https://github.com/google/ExoPlayer/issues/9727).
       case "forced-subtitle":

File: libraries/exoplayer_dash/src/test/java/androidx/media3/exoplayer/dash/manifest/DashManifestParserTest.java
Patch:
@@ -243,7 +243,8 @@ public void parseMediaPresentationDescription_text() throws IOException {
     assertThat(format.containerMimeType).isEqualTo(MimeTypes.APPLICATION_RAWCC);
     assertThat(format.sampleMimeType).isEqualTo(MimeTypes.APPLICATION_CEA608);
     assertThat(format.codecs).isEqualTo("cea608");
-    assertThat(format.roleFlags).isEqualTo(C.ROLE_FLAG_SUBTITLE);
+    assertThat(format.roleFlags).isEqualTo(C.ROLE_FLAG_SUBTITLE | C.ROLE_FLAG_MAIN);
+    assertThat(format.selectionFlags).isEqualTo(0);
     assertThat(adaptationSets.get(0).type).isEqualTo(C.TRACK_TYPE_TEXT);
 
     format = adaptationSets.get(1).representations.get(0).format;

File: libraries/decoder_opus/src/main/java/androidx/media3/decoder/opus/OpusLibrary.java
Patch:
@@ -30,7 +30,7 @@ public final class OpusLibrary {
   }
 
   private static final LibraryLoader LOADER = new LibraryLoader("opusV2JNI");
-  @C.CryptoType private static int cryptoType = C.CRYPTO_TYPE_UNSUPPORTED;
+  private static @C.CryptoType int cryptoType = C.CRYPTO_TYPE_UNSUPPORTED;
 
   private OpusLibrary() {}
 

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/source/SampleQueueTest.java
Patch:
@@ -1758,8 +1758,7 @@ public DrmSession acquireSession(
     }
 
     @Override
-    @C.CryptoType
-    public int getCryptoType(Format format) {
+    public @C.CryptoType int getCryptoType(Format format) {
       return mockPlaceholderDrmSession != null || format.drmInitData != null
           ? FakeCryptoConfig.TYPE
           : C.CRYPTO_TYPE_NONE;

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/PlayerEmsgHandler.java
Patch:
@@ -137,7 +137,7 @@ public boolean handleMessage(Message message) {
       return true;
     }
     switch (message.what) {
-      case (EMSG_MANIFEST_EXPIRED):
+      case EMSG_MANIFEST_EXPIRED:
         ManifestExpiryEventInfo messageObj = (ManifestExpiryEventInfo) message.obj;
         handleManifestExpiredMessage(
             messageObj.eventTimeUs, messageObj.manifestPublishTimeMsInEmsg);

File: demos/main/src/main/java/androidx/media3/demo/main/PlayerActivity.java
Patch:
@@ -47,7 +47,7 @@
 import androidx.media3.exoplayer.mediacodec.MediaCodecUtil.DecoderQueryException;
 import androidx.media3.exoplayer.offline.DownloadRequest;
 import androidx.media3.exoplayer.source.DefaultMediaSourceFactory;
-import androidx.media3.exoplayer.source.MediaSourceFactory;
+import androidx.media3.exoplayer.source.MediaSource;
 import androidx.media3.exoplayer.source.ads.AdsLoader;
 import androidx.media3.exoplayer.trackselection.DefaultTrackSelector;
 import androidx.media3.exoplayer.util.DebugTextViewHelper;
@@ -261,7 +261,7 @@ protected boolean initializePlayer() {
           intent.getBooleanExtra(IntentUtil.PREFER_EXTENSION_DECODERS_EXTRA, false);
       RenderersFactory renderersFactory =
           DemoUtil.buildRenderersFactory(/* context= */ this, preferExtensionDecoders);
-      MediaSourceFactory mediaSourceFactory =
+      MediaSource.Factory mediaSourceFactory =
           new DefaultMediaSourceFactory(dataSourceFactory)
               .setAdsLoaderProvider(this::getAdsLoader)
               .setAdViewProvider(playerView);

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ProgressiveMediaSource.java
Patch:
@@ -52,6 +52,7 @@ public final class ProgressiveMediaSource extends BaseMediaSource
     implements ProgressiveMediaPeriod.Listener {
 
   /** Factory for {@link ProgressiveMediaSource}s. */
+  @SuppressWarnings("deprecation") // Implement deprecated type for backwards compatibility.
   public static final class Factory implements MediaSourceFactory {
 
     private final DataSource.Factory dataSourceFactory;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ads/AdsMediaSource.java
Patch:
@@ -42,7 +42,6 @@
 import androidx.media3.exoplayer.source.MediaSource;
 import androidx.media3.exoplayer.source.MediaSource.MediaPeriodId;
 import androidx.media3.exoplayer.source.MediaSourceEventListener;
-import androidx.media3.exoplayer.source.MediaSourceFactory;
 import androidx.media3.exoplayer.upstream.Allocator;
 import java.io.IOException;
 import java.lang.annotation.Documented;
@@ -130,7 +129,7 @@ public RuntimeException getRuntimeExceptionForUnexpected() {
       new MediaPeriodId(/* periodUid= */ new Object());
 
   private final MediaSource contentMediaSource;
-  private final MediaSourceFactory adMediaSourceFactory;
+  private final MediaSource.Factory adMediaSourceFactory;
   private final AdsLoader adsLoader;
   private final AdViewProvider adViewProvider;
   private final DataSpec adTagDataSpec;
@@ -162,7 +161,7 @@ public AdsMediaSource(
       MediaSource contentMediaSource,
       DataSpec adTagDataSpec,
       Object adsId,
-      MediaSourceFactory adMediaSourceFactory,
+      MediaSource.Factory adMediaSourceFactory,
       AdsLoader adsLoader,
       AdViewProvider adViewProvider) {
     this.contentMediaSource = contentMediaSource;

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/e2etest/WebvttPlaybackTest.java
Patch:
@@ -25,7 +25,7 @@
 import androidx.media3.common.Player;
 import androidx.media3.exoplayer.ExoPlayer;
 import androidx.media3.exoplayer.source.DefaultMediaSourceFactory;
-import androidx.media3.exoplayer.source.MediaSourceFactory;
+import androidx.media3.exoplayer.source.MediaSource;
 import androidx.media3.test.utils.CapturingRenderersFactory;
 import androidx.media3.test.utils.DumpFileAsserts;
 import androidx.media3.test.utils.FakeClock;
@@ -58,7 +58,7 @@ public void test() throws Exception {
     Context applicationContext = ApplicationProvider.getApplicationContext();
     CapturingRenderersFactory capturingRenderersFactory =
         new CapturingRenderersFactory(applicationContext);
-    MediaSourceFactory mediaSourceFactory =
+    MediaSource.Factory mediaSourceFactory =
         new DefaultMediaSourceFactory(applicationContext)
             .experimentalUseProgressiveMediaSourceForSubtitles(true);
     ExoPlayer player =

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/source/ads/AdsMediaSourceTest.java
Patch:
@@ -33,9 +33,9 @@
 import androidx.media3.datasource.DataSpec;
 import androidx.media3.exoplayer.analytics.PlayerId;
 import androidx.media3.exoplayer.source.MediaPeriod;
+import androidx.media3.exoplayer.source.MediaSource;
 import androidx.media3.exoplayer.source.MediaSource.MediaPeriodId;
 import androidx.media3.exoplayer.source.MediaSource.MediaSourceCaller;
-import androidx.media3.exoplayer.source.MediaSourceFactory;
 import androidx.media3.exoplayer.source.SinglePeriodTimeline;
 import androidx.media3.exoplayer.source.ads.AdsLoader.EventListener;
 import androidx.media3.exoplayer.upstream.Allocator;
@@ -102,7 +102,7 @@ public void setUp() {
     // later.
     contentMediaSource = new FakeMediaSource(/* timeline= */ null);
     prerollAdMediaSource = new FakeMediaSource(/* timeline= */ null);
-    MediaSourceFactory adMediaSourceFactory = mock(MediaSourceFactory.class);
+    MediaSource.Factory adMediaSourceFactory = mock(MediaSource.Factory.class);
     when(adMediaSourceFactory.createMediaSource(any(MediaItem.class)))
         .thenReturn(prerollAdMediaSource);
 

File: libraries/exoplayer_dash/src/main/java/androidx/media3/exoplayer/dash/DashMediaSource.java
Patch:
@@ -99,6 +99,7 @@ public final class DashMediaSource extends BaseMediaSource {
   }
 
   /** Factory for {@link DashMediaSource}s. */
+  @SuppressWarnings("deprecation") // Implement deprecated type for backwards compatibility.
   public static final class Factory implements MediaSourceFactory {
 
     private final DashChunkSource.Factory chunkSourceFactory;

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsMediaSource.java
Patch:
@@ -94,6 +94,7 @@ public final class HlsMediaSource extends BaseMediaSource
   public static final int METADATA_TYPE_EMSG = 3;
 
   /** Factory for {@link HlsMediaSource}s. */
+  @SuppressWarnings("deprecation") // Implement deprecated type for backwards compatibility.
   public static final class Factory implements MediaSourceFactory {
 
     private final HlsDataSourceFactory hlsDataSourceFactory;

File: libraries/exoplayer_ima/src/main/java/androidx/media3/exoplayer/ima/ImaAdsLoader.java
Patch:
@@ -38,7 +38,7 @@
 import androidx.media3.common.util.UnstableApi;
 import androidx.media3.common.util.Util;
 import androidx.media3.datasource.DataSpec;
-import androidx.media3.exoplayer.source.MediaSourceFactory;
+import androidx.media3.exoplayer.source.MediaSource;
 import androidx.media3.exoplayer.source.ads.AdsLoader;
 import androidx.media3.exoplayer.source.ads.AdsMediaSource;
 import com.google.ads.interactivemedia.v3.api.AdDisplayContainer;
@@ -229,7 +229,7 @@ public Builder setCompanionAdSlots(Collection<CompanionAdSlot> companionAdSlots)
 
     /**
      * Sets the MIME types to prioritize for linear ad media. If not specified, MIME types supported
-     * by the {@link MediaSourceFactory adMediaSourceFactory} used to construct the {@link
+     * by the {@link MediaSource.Factory adMediaSourceFactory} used to construct the {@link
      * AdsMediaSource} will be used.
      *
      * @param adMediaMimeTypes The MIME types to prioritize for linear ad media. May contain {@link

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaSource.java
Patch:
@@ -63,6 +63,7 @@ public final class RtspMediaSource extends BaseMediaSource {
    *   <li>{@link #setLoadErrorHandlingPolicy(LoadErrorHandlingPolicy)}
    * </ul>
    */
+  @SuppressWarnings("deprecation") // Implement deprecated type for backwards compatibility.
   public static final class Factory implements MediaSourceFactory {
 
     private long timeoutMs;

File: libraries/exoplayer_smoothstreaming/src/main/java/androidx/media3/exoplayer/smoothstreaming/SsMediaSource.java
Patch:
@@ -78,6 +78,7 @@ public final class SsMediaSource extends BaseMediaSource
   }
 
   /** Factory for {@link SsMediaSource}. */
+  @SuppressWarnings("deprecation") // Implement deprecated type for backwards compatibility.
   public static final class Factory implements MediaSourceFactory {
 
     private final SsChunkSource.Factory chunkSourceFactory;

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/FakeMediaSourceFactory.java
Patch:
@@ -29,6 +29,8 @@
 
 /** Fake {@link MediaSourceFactory} that creates a {@link FakeMediaSource}. */
 @UnstableApi
+// Implement and return deprecated type for backwards compatibility.
+@SuppressWarnings("deprecation")
 public final class FakeMediaSourceFactory implements MediaSourceFactory {
 
   /** The window UID used by media sources that are created by the factory. */

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformationRequest.java
Patch:
@@ -22,7 +22,7 @@
 import androidx.media3.common.MimeTypes;
 import androidx.media3.common.util.UnstableApi;
 import androidx.media3.common.util.Util;
-import androidx.media3.exoplayer.source.MediaSourceFactory;
+import androidx.media3.exoplayer.source.MediaSource;
 import androidx.media3.extractor.mp4.Mp4Extractor;
 
 /** A media transformation request. */
@@ -94,8 +94,8 @@ public Builder setTransformationMatrix(Matrix transformationMatrix) {
      *   <li>The recording frame rate of the video is 120 or 240 fps.
      * </ul>
      *
-     * <p>If specifying a {@link MediaSourceFactory} using {@link
-     * Transformer.Builder#setMediaSourceFactory(MediaSourceFactory)}, make sure that {@link
+     * <p>If specifying a {@link MediaSource.Factory} using {@link
+     * Transformer.Builder#setMediaSourceFactory(MediaSource.Factory)}, make sure that {@link
      * Mp4Extractor#FLAG_READ_SEF_DATA} is set on the {@link Mp4Extractor} used. Otherwise, the slow
      * motion metadata will be ignored and the input won't be flattened.
      *

File: libraries/common/src/main/java/androidx/media3/common/AdOverlayInfo.java
Patch:
@@ -31,7 +31,6 @@
 import java.lang.annotation.Target;
 
 /** Provides information about an overlay view shown on top of an ad view group. */
-@UnstableApi
 public final class AdOverlayInfo {
 
   /**
@@ -97,12 +96,14 @@ public AdOverlayInfo build() {
   @Nullable public final String reasonDetail;
 
   /** @deprecated Use {@link Builder} instead. */
+  @UnstableApi
   @Deprecated
   public AdOverlayInfo(View view, @Purpose int purpose) {
     this(view, purpose, /* detailedReason= */ null);
   }
 
   /** @deprecated Use {@link Builder} instead. */
+  @UnstableApi
   @Deprecated
   public AdOverlayInfo(View view, @Purpose int purpose, @Nullable String detailedReason) {
     this.view = view;

File: libraries/common/src/main/java/androidx/media3/common/AdViewProvider.java
Patch:
@@ -17,12 +17,10 @@
 
 import android.view.ViewGroup;
 import androidx.annotation.Nullable;
-import androidx.media3.common.util.UnstableApi;
 import com.google.common.collect.ImmutableList;
 import java.util.List;
 
 /** Provides information about views for the ad playback UI. */
-@UnstableApi
 public interface AdViewProvider {
 
   /**

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayer.java
Patch:
@@ -630,7 +630,6 @@ public Builder setRenderersFactory(RenderersFactory renderersFactory) {
      * @return This builder.
      * @throws IllegalStateException If {@link #build()} has already been called.
      */
-    @UnstableApi
     public Builder setMediaSourceFactory(MediaSourceFactory mediaSourceFactory) {
       checkState(!buildCalled);
       this.mediaSourceFactorySupplier = () -> mediaSourceFactory;

File: libraries/common/src/main/java/androidx/media3/common/C.java
Patch:
@@ -625,6 +625,7 @@ private C() {}
       flag = true,
       value = {SELECTION_FLAG_DEFAULT, SELECTION_FLAG_FORCED, SELECTION_FLAG_AUTOSELECT})
   public @interface SelectionFlags {}
+  // LINT.IfChange(selection_flags)
   /** Indicates that the track should be selected if user preferences do not state otherwise. */
   public static final int SELECTION_FLAG_DEFAULT = 1;
   /**
@@ -1103,6 +1104,7 @@ private C() {}
         ROLE_FLAG_TRICK_PLAY
       })
   public @interface RoleFlags {}
+  // LINT.IfChange(role_flags)
   /** Indicates a main track. */
   public static final int ROLE_FLAG_MAIN = 1;
   /**

File: libraries/common/src/main/java/androidx/media3/common/Format.java
Patch:
@@ -629,7 +629,8 @@ public Format build() {
    * <ul>
    *   <li>DASH representations: Always {@link Format#NO_VALUE}.
    *   <li>HLS variants: The {@code AVERAGE-BANDWIDTH} attribute defined on the corresponding {@code
-   *       EXT-X-STREAM-INF} tag in the master playlist, or {@link Format#NO_VALUE} if not present.
+   *       EXT-X-STREAM-INF} tag in the multivariant playlist, or {@link Format#NO_VALUE} if not
+   *       present.
    *   <li>SmoothStreaming track elements: The {@code Bitrate} attribute defined on the
    *       corresponding {@code TrackElement} in the manifest, or {@link Format#NO_VALUE} if not
    *       present.

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -81,8 +81,9 @@ public DefaultHlsExtractorFactory() {
    *     DefaultTsPayloadReaderFactory} instances. Other flags may be added on top of {@code
    *     payloadReaderFactoryFlags} when creating {@link DefaultTsPayloadReaderFactory}.
    * @param exposeCea608WhenMissingDeclarations Whether created {@link TsExtractor} instances should
-   *     expose a CEA-608 track should the master playlist contain no Closed Captions declarations.
-   *     If the master playlist contains any Closed Captions declarations, this flag is ignored.
+   *     expose a CEA-608 track should the multivariant playlist contain no Closed Captions
+   *     declarations. If the multivariant playlist contains any Closed Captions declarations, this
+   *     flag is ignored.
    */
   public DefaultHlsExtractorFactory(
       int payloadReaderFactoryFlags, boolean exposeCea608WhenMissingDeclarations) {

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsChunkSource.java
Patch:
@@ -154,7 +154,7 @@ public void clear() {
    *     {@link HlsChunkSource}s are used for a single playback, they should all share the same
    *     provider.
    * @param muxedCaptionFormats List of muxed caption {@link Format}s. Null if no closed caption
-   *     information is available in the master playlist.
+   *     information is available in the multivariant playlist.
    */
   public HlsChunkSource(
       HlsExtractorFactory extractorFactory,
@@ -877,8 +877,8 @@ private static final class InitializationTrackSelection extends BaseTrackSelecti
 
     public InitializationTrackSelection(TrackGroup group, int[] tracks) {
       super(group, tracks);
-      // The initially selected index corresponds to the first EXT-X-STREAMINF tag in the master
-      // playlist.
+      // The initially selected index corresponds to the first EXT-X-STREAMINF tag in the
+      // multivariant playlist.
       selectedIndex = indexOf(group.getFormat(tracks[0]));
     }
 

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsExtractorFactory.java
Patch:
@@ -40,7 +40,7 @@ public interface HlsExtractorFactory {
    * @param uri The URI of the media chunk.
    * @param format A {@link Format} associated with the chunk to extract.
    * @param muxedCaptionFormats List of muxed caption {@link Format}s. Null if no closed caption
-   *     information is available in the master playlist.
+   *     information is available in the multivariant playlist.
    * @param timestampAdjuster Adjuster corresponding to the provided discontinuity sequence number.
    * @param responseHeaders The HTTP response headers associated with the media segment or
    *     initialization section to extract.

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsMediaChunk.java
Patch:
@@ -64,7 +64,7 @@
    * @param segmentBaseHolder The segment holder.
    * @param playlistUrl The url of the playlist from which this chunk was obtained.
    * @param muxedCaptionFormats List of muxed caption {@link Format}s. Null if no closed caption
-   *     information is available in the master playlist.
+   *     information is available in the multivariant playlist.
    * @param trackSelectionReason See {@link #trackSelectionReason}.
    * @param trackSelectionData See {@link #trackSelectionData}.
    * @param isMasterTimestampSource True if the chunk can initialize the timestamp adjuster.

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/playlist/DefaultHlsPlaylistParserFactory.java
Patch:
@@ -30,7 +30,8 @@ public ParsingLoadable.Parser<HlsPlaylist> createPlaylistParser() {
 
   @Override
   public ParsingLoadable.Parser<HlsPlaylist> createPlaylistParser(
-      HlsMasterPlaylist masterPlaylist, @Nullable HlsMediaPlaylist previousMediaPlaylist) {
-    return new HlsPlaylistParser(masterPlaylist, previousMediaPlaylist);
+      HlsMultivariantPlaylist multivariantPlaylist,
+      @Nullable HlsMediaPlaylist previousMediaPlaylist) {
+    return new HlsPlaylistParser(multivariantPlaylist, previousMediaPlaylist);
   }
 }

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/playlist/FilteringHlsPlaylistParserFactory.java
Patch:
@@ -51,9 +51,10 @@ public ParsingLoadable.Parser<HlsPlaylist> createPlaylistParser() {
 
   @Override
   public ParsingLoadable.Parser<HlsPlaylist> createPlaylistParser(
-      HlsMasterPlaylist masterPlaylist, @Nullable HlsMediaPlaylist previousMediaPlaylist) {
+      HlsMultivariantPlaylist multivariantPlaylist,
+      @Nullable HlsMediaPlaylist previousMediaPlaylist) {
     return new FilteringManifestParser<>(
-        hlsPlaylistParserFactory.createPlaylistParser(masterPlaylist, previousMediaPlaylist),
+        hlsPlaylistParserFactory.createPlaylistParser(multivariantPlaylist, previousMediaPlaylist),
         streamKeys);
   }
 }

File: demos/main/src/main/java/androidx/media3/demo/main/PlayerActivity.java
Patch:
@@ -234,7 +234,7 @@ public void onClick(View view) {
     }
   }
 
-  // PlayerControlView.VisibilityListener implementation
+  // StyledPlayerControlView.VisibilityListener implementation
 
   @Override
   public void onVisibilityChange(int visibility) {

File: libraries/ui/src/main/java/androidx/media3/ui/StyledPlayerView.java
Patch:
@@ -501,7 +501,7 @@ public StyledPlayerView(Context context, @Nullable AttributeSet attrs, int defSt
     if (customController != null) {
       this.controller = customController;
     } else if (controllerPlaceholder != null) {
-      // Propagate attrs as playbackAttrs so that PlayerControlView's custom attributes are
+      // Propagate attrs as playbackAttrs so that StyledPlayerControlView's custom attributes are
       // transferred, but standard attributes (e.g. background) are not.
       this.controller = new StyledPlayerControlView(context, null, 0, attrs);
       controller.setId(R.id.exo_controller);

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -847,7 +847,7 @@ public void onPlayerError(PlaybackException error) {
       handleTransformationEnded(
           cause instanceof TransformationException
               ? (TransformationException) cause
-              : TransformationException.createForUnexpected(error));
+              : TransformationException.createForPlaybackException(error));
     }
 
     private void handleTransformationEnded(@Nullable TransformationException exception) {

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/mh/AndroidTestUtil.java
Patch:
@@ -24,6 +24,7 @@
 import android.os.Build;
 import androidx.annotation.Nullable;
 import androidx.media3.common.MediaItem;
+import androidx.media3.transformer.TransformationException;
 import androidx.media3.transformer.Transformer;
 import androidx.test.platform.app.InstrumentationRegistry;
 import java.io.File;
@@ -79,7 +80,8 @@ public void onTransformationCompleted(MediaItem inputMediaItem) {
                   }
 
                   @Override
-                  public void onTransformationError(MediaItem inputMediaItem, Exception exception) {
+                  public void onTransformationError(
+                      MediaItem inputMediaItem, TransformationException exception) {
                     exceptionReference.set(exception);
                     countDownLatch.countDown();
                   }

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsChunkSource.java
Patch:
@@ -255,7 +255,8 @@ public long getAdjustedSeekPositionUs(long positionUs, SeekParameters seekParame
     HlsMediaPlaylist mediaPlaylist =
         selectedIndex < playlistUrls.length && selectedIndex != C.INDEX_UNSET
             ? playlistTracker.getPlaylistSnapshot(
-                playlistUrls[selectedIndex], /* isForPlayback= */ true)
+                playlistUrls[trackSelection.getSelectedIndexInTrackGroup()],
+                /* isForPlayback= */ true)
             : null;
 
     if (mediaPlaylist == null

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java
Patch:
@@ -1472,8 +1472,6 @@ protected int parseSelectionFlagsFromDashRoleScheme(@Nullable String value) {
       return 0;
     }
     switch (value) {
-      case "main":
-        return C.SELECTION_FLAG_DEFAULT;
       case "forced_subtitle":
         // Support both hyphen and underscore (https://github.com/google/ExoPlayer/issues/9727).
       case "forced-subtitle":

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParserTest.java
Patch:
@@ -243,7 +243,8 @@ public void parseMediaPresentationDescription_text() throws IOException {
     assertThat(format.containerMimeType).isEqualTo(MimeTypes.APPLICATION_RAWCC);
     assertThat(format.sampleMimeType).isEqualTo(MimeTypes.APPLICATION_CEA608);
     assertThat(format.codecs).isEqualTo("cea608");
-    assertThat(format.roleFlags).isEqualTo(C.ROLE_FLAG_SUBTITLE);
+    assertThat(format.roleFlags).isEqualTo(C.ROLE_FLAG_SUBTITLE | C.ROLE_FLAG_MAIN);
+    assertThat(format.selectionFlags).isEqualTo(0);
     assertThat(adaptationSets.get(0).type).isEqualTo(C.TRACK_TYPE_TEXT);
 
     format = adaptationSets.get(1).representations.get(0).format;

File: extensions/opus/src/main/java/com/google/android/exoplayer2/ext/opus/OpusLibrary.java
Patch:
@@ -28,7 +28,7 @@ public final class OpusLibrary {
   }
 
   private static final LibraryLoader LOADER = new LibraryLoader("opusV2JNI");
-  @C.CryptoType private static int cryptoType = C.CRYPTO_TYPE_UNSUPPORTED;
+  private static @C.CryptoType int cryptoType = C.CRYPTO_TYPE_UNSUPPORTED;
 
   private OpusLibrary() {}
 

File: library/core/src/test/java/com/google/android/exoplayer2/source/SampleQueueTest.java
Patch:
@@ -1758,8 +1758,7 @@ public DrmSession acquireSession(
     }
 
     @Override
-    @C.CryptoType
-    public int getCryptoType(Format format) {
+    public @C.CryptoType int getCryptoType(Format format) {
       return mockPlaceholderDrmSession != null || format.drmInitData != null
           ? FakeCryptoConfig.TYPE
           : C.CRYPTO_TYPE_NONE;

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/PlayerEmsgHandler.java
Patch:
@@ -135,7 +135,7 @@ public boolean handleMessage(Message message) {
       return true;
     }
     switch (message.what) {
-      case (EMSG_MANIFEST_EXPIRED):
+      case EMSG_MANIFEST_EXPIRED:
         ManifestExpiryEventInfo messageObj = (ManifestExpiryEventInfo) message.obj;
         handleManifestExpiredMessage(
             messageObj.eventTimeUs, messageObj.manifestPublishTimeMsInEmsg);

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -44,7 +44,7 @@
 import com.google.android.exoplayer2.mediacodec.MediaCodecUtil.DecoderQueryException;
 import com.google.android.exoplayer2.offline.DownloadRequest;
 import com.google.android.exoplayer2.source.DefaultMediaSourceFactory;
-import com.google.android.exoplayer2.source.MediaSourceFactory;
+import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.source.ads.AdsLoader;
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
 import com.google.android.exoplayer2.ui.StyledPlayerControlView;
@@ -261,7 +261,7 @@ protected boolean initializePlayer() {
           intent.getBooleanExtra(IntentUtil.PREFER_EXTENSION_DECODERS_EXTRA, false);
       RenderersFactory renderersFactory =
           DemoUtil.buildRenderersFactory(/* context= */ this, preferExtensionDecoders);
-      MediaSourceFactory mediaSourceFactory =
+      MediaSource.Factory mediaSourceFactory =
           new DefaultMediaSourceFactory(dataSourceFactory)
               .setAdsLoaderProvider(this::getAdsLoader)
               .setAdViewProvider(playerView);

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -46,7 +46,7 @@
 import com.google.android.exoplayer2.ExoPlayerLibraryInfo;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.Timeline;
-import com.google.android.exoplayer2.source.MediaSourceFactory;
+import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.source.ads.AdsLoader;
 import com.google.android.exoplayer2.source.ads.AdsMediaSource;
 import com.google.android.exoplayer2.ui.AdViewProvider;
@@ -222,7 +222,7 @@ public Builder setCompanionAdSlots(Collection<CompanionAdSlot> companionAdSlots)
 
     /**
      * Sets the MIME types to prioritize for linear ad media. If not specified, MIME types supported
-     * by the {@link MediaSourceFactory adMediaSourceFactory} used to construct the {@link
+     * by the {@link MediaSource.Factory adMediaSourceFactory} used to construct the {@link
      * AdsMediaSource} will be used.
      *
      * @param adMediaMimeTypes The MIME types to prioritize for linear ad media. May contain {@link

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaSource.java
Patch:
@@ -50,6 +50,7 @@ public final class ProgressiveMediaSource extends BaseMediaSource
     implements ProgressiveMediaPeriod.Listener {
 
   /** Factory for {@link ProgressiveMediaSource}s. */
+  @SuppressWarnings("deprecation") // Implement deprecated type for backwards compatibility.
   public static final class Factory implements MediaSourceFactory {
 
     private final DataSource.Factory dataSourceFactory;

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/AdsMediaSource.java
Patch:
@@ -35,7 +35,6 @@
 import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.source.MediaSource.MediaPeriodId;
 import com.google.android.exoplayer2.source.MediaSourceEventListener;
-import com.google.android.exoplayer2.source.MediaSourceFactory;
 import com.google.android.exoplayer2.ui.AdViewProvider;
 import com.google.android.exoplayer2.upstream.Allocator;
 import com.google.android.exoplayer2.upstream.DataSpec;
@@ -127,7 +126,7 @@ public RuntimeException getRuntimeExceptionForUnexpected() {
       new MediaPeriodId(/* periodUid= */ new Object());
 
   private final MediaSource contentMediaSource;
-  private final MediaSourceFactory adMediaSourceFactory;
+  private final MediaSource.Factory adMediaSourceFactory;
   private final AdsLoader adsLoader;
   private final AdViewProvider adViewProvider;
   private final DataSpec adTagDataSpec;
@@ -159,7 +158,7 @@ public AdsMediaSource(
       MediaSource contentMediaSource,
       DataSpec adTagDataSpec,
       Object adsId,
-      MediaSourceFactory adMediaSourceFactory,
+      MediaSource.Factory adMediaSourceFactory,
       AdsLoader adsLoader,
       AdViewProvider adViewProvider) {
     this.contentMediaSource = contentMediaSource;

File: library/core/src/test/java/com/google/android/exoplayer2/e2etest/WebvttPlaybackTest.java
Patch:
@@ -28,7 +28,7 @@
 import com.google.android.exoplayer2.robolectric.ShadowMediaCodecConfig;
 import com.google.android.exoplayer2.robolectric.TestPlayerRunHelper;
 import com.google.android.exoplayer2.source.DefaultMediaSourceFactory;
-import com.google.android.exoplayer2.source.MediaSourceFactory;
+import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.testutil.CapturingRenderersFactory;
 import com.google.android.exoplayer2.testutil.DumpFileAsserts;
 import com.google.android.exoplayer2.testutil.FakeClock;
@@ -58,7 +58,7 @@ public void test() throws Exception {
     Context applicationContext = ApplicationProvider.getApplicationContext();
     CapturingRenderersFactory capturingRenderersFactory =
         new CapturingRenderersFactory(applicationContext);
-    MediaSourceFactory mediaSourceFactory =
+    MediaSource.Factory mediaSourceFactory =
         new DefaultMediaSourceFactory(applicationContext)
             .experimentalUseProgressiveMediaSourceForSubtitles(true);
     ExoPlayer player =

File: library/core/src/test/java/com/google/android/exoplayer2/source/ads/AdsMediaSourceTest.java
Patch:
@@ -31,9 +31,9 @@
 import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.analytics.PlayerId;
 import com.google.android.exoplayer2.source.MediaPeriod;
+import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.source.MediaSource.MediaPeriodId;
 import com.google.android.exoplayer2.source.MediaSource.MediaSourceCaller;
-import com.google.android.exoplayer2.source.MediaSourceFactory;
 import com.google.android.exoplayer2.source.SinglePeriodTimeline;
 import com.google.android.exoplayer2.source.ads.AdsLoader.EventListener;
 import com.google.android.exoplayer2.testutil.FakeMediaSource;
@@ -101,7 +101,7 @@ public void setUp() {
     // later.
     contentMediaSource = new FakeMediaSource(/* timeline= */ null);
     prerollAdMediaSource = new FakeMediaSource(/* timeline= */ null);
-    MediaSourceFactory adMediaSourceFactory = mock(MediaSourceFactory.class);
+    MediaSource.Factory adMediaSourceFactory = mock(MediaSource.Factory.class);
     when(adMediaSourceFactory.createMediaSource(any(MediaItem.class)))
         .thenReturn(prerollAdMediaSource);
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
Patch:
@@ -97,6 +97,7 @@ public final class DashMediaSource extends BaseMediaSource {
   }
 
   /** Factory for {@link DashMediaSource}s. */
+  @SuppressWarnings("deprecation") // Implement deprecated type for backwards compatibility.
   public static final class Factory implements MediaSourceFactory {
 
     private final DashChunkSource.Factory chunkSourceFactory;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaSource.java
Patch:
@@ -92,6 +92,7 @@ public final class HlsMediaSource extends BaseMediaSource
   public static final int METADATA_TYPE_EMSG = 3;
 
   /** Factory for {@link HlsMediaSource}s. */
+  @SuppressWarnings("deprecation") // Implement deprecated type for backwards compatibility.
   public static final class Factory implements MediaSourceFactory {
 
     private final HlsDataSourceFactory hlsDataSourceFactory;

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMediaSource.java
Patch:
@@ -61,6 +61,7 @@ public final class RtspMediaSource extends BaseMediaSource {
    *   <li>{@link #setLoadErrorHandlingPolicy(LoadErrorHandlingPolicy)}
    * </ul>
    */
+  @SuppressWarnings("deprecation") // Implement deprecated type for backwards compatibility.
   public static final class Factory implements MediaSourceFactory {
 
     private long timeoutMs;

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/SsMediaSource.java
Patch:
@@ -76,6 +76,7 @@ public final class SsMediaSource extends BaseMediaSource
   }
 
   /** Factory for {@link SsMediaSource}. */
+  @SuppressWarnings("deprecation") // Implement deprecated type for backwards compatibility.
   public static final class Factory implements MediaSourceFactory {
 
     private final SsChunkSource.Factory chunkSourceFactory;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformationRequest.java
Patch:
@@ -20,7 +20,7 @@
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.extractor.mp4.Mp4Extractor;
-import com.google.android.exoplayer2.source.MediaSourceFactory;
+import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
 
@@ -92,8 +92,8 @@ public Builder setTransformationMatrix(Matrix transformationMatrix) {
      *   <li>The recording frame rate of the video is 120 or 240 fps.
      * </ul>
      *
-     * <p>If specifying a {@link MediaSourceFactory} using {@link
-     * Transformer.Builder#setMediaSourceFactory(MediaSourceFactory)}, make sure that {@link
+     * <p>If specifying a {@link MediaSource.Factory} using {@link
+     * Transformer.Builder#setMediaSourceFactory(MediaSource.Factory)}, make sure that {@link
      * Mp4Extractor#FLAG_READ_SEF_DATA} is set on the {@link Mp4Extractor} used. Otherwise, the slow
      * motion metadata will be ignored and the input won't be flattened.
      *

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSourceFactory.java
Patch:
@@ -27,6 +27,8 @@
 import com.google.android.exoplayer2.util.Util;
 
 /** Fake {@link MediaSourceFactory} that creates a {@link FakeMediaSource}. */
+// Implement and return deprecated type for backwards compatibility.
+@SuppressWarnings("deprecation")
 public final class FakeMediaSourceFactory implements MediaSourceFactory {
 
   /** The window UID used by media sources that are created by the factory. */

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -604,6 +604,7 @@ private C() {}
       flag = true,
       value = {SELECTION_FLAG_DEFAULT, SELECTION_FLAG_FORCED, SELECTION_FLAG_AUTOSELECT})
   public @interface SelectionFlags {}
+  // LINT.IfChange(selection_flags)
   /** Indicates that the track should be selected if user preferences do not state otherwise. */
   public static final int SELECTION_FLAG_DEFAULT = 1;
   /**
@@ -1069,6 +1070,7 @@ private C() {}
         ROLE_FLAG_TRICK_PLAY
       })
   public @interface RoleFlags {}
+  // LINT.IfChange(role_flags)
   /** Indicates a main track. */
   public static final int ROLE_FLAG_MAIN = 1;
   /**

File: library/common/src/main/java/com/google/android/exoplayer2/Format.java
Patch:
@@ -631,7 +631,8 @@ public Format build() {
    * <ul>
    *   <li>DASH representations: Always {@link Format#NO_VALUE}.
    *   <li>HLS variants: The {@code AVERAGE-BANDWIDTH} attribute defined on the corresponding {@code
-   *       EXT-X-STREAM-INF} tag in the master playlist, or {@link Format#NO_VALUE} if not present.
+   *       EXT-X-STREAM-INF} tag in the multivariant playlist, or {@link Format#NO_VALUE} if not
+   *       present.
    *   <li>SmoothStreaming track elements: The {@code Bitrate} attribute defined on the
    *       corresponding {@code TrackElement} in the manifest, or {@link Format#NO_VALUE} if not
    *       present.

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -79,8 +79,9 @@ public DefaultHlsExtractorFactory() {
    *     DefaultTsPayloadReaderFactory} instances. Other flags may be added on top of {@code
    *     payloadReaderFactoryFlags} when creating {@link DefaultTsPayloadReaderFactory}.
    * @param exposeCea608WhenMissingDeclarations Whether created {@link TsExtractor} instances should
-   *     expose a CEA-608 track should the master playlist contain no Closed Captions declarations.
-   *     If the master playlist contains any Closed Captions declarations, this flag is ignored.
+   *     expose a CEA-608 track should the multivariant playlist contain no Closed Captions
+   *     declarations. If the multivariant playlist contains any Closed Captions declarations, this
+   *     flag is ignored.
    */
   public DefaultHlsExtractorFactory(
       int payloadReaderFactoryFlags, boolean exposeCea608WhenMissingDeclarations) {

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
Patch:
@@ -154,7 +154,7 @@ public void clear() {
    *     {@link HlsChunkSource}s are used for a single playback, they should all share the same
    *     provider.
    * @param muxedCaptionFormats List of muxed caption {@link Format}s. Null if no closed caption
-   *     information is available in the master playlist.
+   *     information is available in the multivariant playlist.
    */
   public HlsChunkSource(
       HlsExtractorFactory extractorFactory,
@@ -877,8 +877,8 @@ private static final class InitializationTrackSelection extends BaseTrackSelecti
 
     public InitializationTrackSelection(TrackGroup group, int[] tracks) {
       super(group, tracks);
-      // The initially selected index corresponds to the first EXT-X-STREAMINF tag in the master
-      // playlist.
+      // The initially selected index corresponds to the first EXT-X-STREAMINF tag in the
+      // multivariant playlist.
       selectedIndex = indexOf(group.getFormat(tracks[0]));
     }
 

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsExtractorFactory.java
Patch:
@@ -38,7 +38,7 @@ public interface HlsExtractorFactory {
    * @param uri The URI of the media chunk.
    * @param format A {@link Format} associated with the chunk to extract.
    * @param muxedCaptionFormats List of muxed caption {@link Format}s. Null if no closed caption
-   *     information is available in the master playlist.
+   *     information is available in the multivariant playlist.
    * @param timestampAdjuster Adjuster corresponding to the provided discontinuity sequence number.
    * @param responseHeaders The HTTP response headers associated with the media segment or
    *     initialization section to extract.

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaChunk.java
Patch:
@@ -64,7 +64,7 @@
    * @param segmentBaseHolder The segment holder.
    * @param playlistUrl The url of the playlist from which this chunk was obtained.
    * @param muxedCaptionFormats List of muxed caption {@link Format}s. Null if no closed caption
-   *     information is available in the master playlist.
+   *     information is available in the multivariant playlist.
    * @param trackSelectionReason See {@link #trackSelectionReason}.
    * @param trackSelectionData See {@link #trackSelectionData}.
    * @param isMasterTimestampSource True if the chunk can initialize the timestamp adjuster.

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/DefaultHlsPlaylistParserFactory.java
Patch:
@@ -28,7 +28,8 @@ public ParsingLoadable.Parser<HlsPlaylist> createPlaylistParser() {
 
   @Override
   public ParsingLoadable.Parser<HlsPlaylist> createPlaylistParser(
-      HlsMasterPlaylist masterPlaylist, @Nullable HlsMediaPlaylist previousMediaPlaylist) {
-    return new HlsPlaylistParser(masterPlaylist, previousMediaPlaylist);
+      HlsMultivariantPlaylist multivariantPlaylist,
+      @Nullable HlsMediaPlaylist previousMediaPlaylist) {
+    return new HlsPlaylistParser(multivariantPlaylist, previousMediaPlaylist);
   }
 }

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/FilteringHlsPlaylistParserFactory.java
Patch:
@@ -49,9 +49,10 @@ public ParsingLoadable.Parser<HlsPlaylist> createPlaylistParser() {
 
   @Override
   public ParsingLoadable.Parser<HlsPlaylist> createPlaylistParser(
-      HlsMasterPlaylist masterPlaylist, @Nullable HlsMediaPlaylist previousMediaPlaylist) {
+      HlsMultivariantPlaylist multivariantPlaylist,
+      @Nullable HlsMediaPlaylist previousMediaPlaylist) {
     return new FilteringManifestParser<>(
-        hlsPlaylistParserFactory.createPlaylistParser(masterPlaylist, previousMediaPlaylist),
+        hlsPlaylistParserFactory.createPlaylistParser(multivariantPlaylist, previousMediaPlaylist),
         streamKeys);
   }
 }

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -234,7 +234,7 @@ public void onClick(View view) {
     }
   }
 
-  // PlayerControlView.VisibilityListener implementation
+  // StyledPlayerControlView.VisibilityListener implementation
 
   @Override
   public void onVisibilityChange(int visibility) {

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -498,7 +498,7 @@ public StyledPlayerView(Context context, @Nullable AttributeSet attrs, int defSt
     if (customController != null) {
       this.controller = customController;
     } else if (controllerPlaceholder != null) {
-      // Propagate attrs as playbackAttrs so that PlayerControlView's custom attributes are
+      // Propagate attrs as playbackAttrs so that StyledPlayerControlView's custom attributes are
       // transferred, but standard attributes (e.g. background) are not.
       this.controller = new StyledPlayerControlView(context, null, 0, attrs);
       controller.setId(R.id.exo_controller);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -845,7 +845,7 @@ public void onPlayerError(PlaybackException error) {
       handleTransformationEnded(
           cause instanceof TransformationException
               ? (TransformationException) cause
-              : TransformationException.createForUnexpected(error));
+              : TransformationException.createForPlaybackException(error));
     }
 
     private void handleTransformationEnded(@Nullable TransformationException exception) {

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/mh/AndroidTestUtil.java
Patch:
@@ -25,6 +25,7 @@
 import androidx.annotation.Nullable;
 import androidx.test.platform.app.InstrumentationRegistry;
 import com.google.android.exoplayer2.MediaItem;
+import com.google.android.exoplayer2.transformer.TransformationException;
 import com.google.android.exoplayer2.transformer.Transformer;
 import java.io.File;
 import java.io.FileWriter;
@@ -79,7 +80,8 @@ public void onTransformationCompleted(MediaItem inputMediaItem) {
                   }
 
                   @Override
-                  public void onTransformationError(MediaItem inputMediaItem, Exception exception) {
+                  public void onTransformationError(
+                      MediaItem inputMediaItem, TransformationException exception) {
                     exceptionReference.set(exception);
                     countDownLatch.countDown();
                   }

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
Patch:
@@ -255,7 +255,8 @@ public long getAdjustedSeekPositionUs(long positionUs, SeekParameters seekParame
     HlsMediaPlaylist mediaPlaylist =
         selectedIndex < playlistUrls.length && selectedIndex != C.INDEX_UNSET
             ? playlistTracker.getPlaylistSnapshot(
-                playlistUrls[selectedIndex], /* isForPlayback= */ true)
+                playlistUrls[trackSelection.getSelectedIndexInTrackGroup()],
+                /* isForPlayback= */ true)
             : null;
 
     if (mediaPlaylist == null

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/FrameEditorTest.java
Patch:
@@ -92,7 +92,8 @@ public void setUp() throws Exception {
               width,
               height,
               identityMatrix,
-              frameEditorOutputImageReader.getSurface());
+              frameEditorOutputImageReader.getSurface(),
+              Transformer.DebugViewProvider.NONE);
 
       // Queue the first video frame from the extractor.
       String mimeType = checkNotNull(mediaFormat.getString(MediaFormat.KEY_MIME));

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/FrameEditorTest.java
Patch:
@@ -92,7 +92,8 @@ public void setUp() throws Exception {
               width,
               height,
               identityMatrix,
-              frameEditorOutputImageReader.getSurface());
+              frameEditorOutputImageReader.getSurface(),
+              Transformer.DebugViewProvider.NONE);
 
       // Queue the first video frame from the extractor.
       String mimeType = checkNotNull(mediaFormat.getString(MediaFormat.KEY_MIME));

File: extensions/ffmpeg/src/main/java/com/google/android/exoplayer2/ext/ffmpeg/FfmpegAudioRenderer.java
Patch:
@@ -64,7 +64,7 @@ public FfmpegAudioRenderer(
     this(
         eventHandler,
         eventListener,
-        new DefaultAudioSink(/* audioCapabilities= */ null, audioProcessors));
+        new DefaultAudioSink.Builder().setAudioProcessors(audioProcessors).build());
   }
 
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -33,7 +33,6 @@
 import com.google.android.exoplayer2.analytics.AnalyticsCollector;
 import com.google.android.exoplayer2.analytics.AnalyticsListener;
 import com.google.android.exoplayer2.audio.AudioAttributes;
-import com.google.android.exoplayer2.audio.AudioCapabilities;
 import com.google.android.exoplayer2.audio.AudioSink;
 import com.google.android.exoplayer2.audio.AuxEffectInfo;
 import com.google.android.exoplayer2.audio.DefaultAudioSink;
@@ -1492,8 +1491,7 @@ void setVideoChangeFrameRateStrategy(
    * <ul>
    *   <li>Audio offload rendering is enabled in {@link
    *       DefaultRenderersFactory#setEnableAudioOffload} or the equivalent option passed to {@link
-   *       DefaultAudioSink#DefaultAudioSink(AudioCapabilities,
-   *       DefaultAudioSink.AudioProcessorChain, boolean, boolean, int)}.
+   *       DefaultAudioSink.Builder#setOffloadMode}.
    *   <li>An audio track is playing in a format that the device supports offloading (for example,
    *       MP3 or AAC).
    *   <li>The {@link AudioSink} is playing with an offload {@link AudioTrack}.

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/CapturingRenderersFactory.java
Patch:
@@ -31,7 +31,6 @@
 import com.google.android.exoplayer2.Renderer;
 import com.google.android.exoplayer2.RenderersFactory;
 import com.google.android.exoplayer2.audio.AudioCapabilities;
-import com.google.android.exoplayer2.audio.AudioProcessor;
 import com.google.android.exoplayer2.audio.AudioRendererEventListener;
 import com.google.android.exoplayer2.audio.DefaultAudioSink;
 import com.google.android.exoplayer2.audio.MediaCodecAudioRenderer;
@@ -94,7 +93,9 @@ public Renderer[] createRenderers(
           /* enableDecoderFallback= */ false,
           eventHandler,
           audioRendererEventListener,
-          new DefaultAudioSink(AudioCapabilities.getCapabilities(context), new AudioProcessor[0])),
+          new DefaultAudioSink.Builder()
+              .setAudioCapabilities(AudioCapabilities.getCapabilities(context))
+              .build()),
       new TextRenderer(textRendererOutput, eventHandler.getLooper()),
       new MetadataRenderer(metadataRendererOutput, eventHandler.getLooper())
     };

File: libraries/decoder_ffmpeg/src/main/java/androidx/media3/decoder/ffmpeg/FfmpegAudioRenderer.java
Patch:
@@ -66,7 +66,7 @@ public FfmpegAudioRenderer(
     this(
         eventHandler,
         eventListener,
-        new DefaultAudioSink(/* audioCapabilities= */ null, audioProcessors));
+        new DefaultAudioSink.Builder().setAudioProcessors(audioProcessors).build());
   }
 
   /**

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayer.java
Patch:
@@ -47,7 +47,6 @@
 import androidx.media3.datasource.DataSource;
 import androidx.media3.exoplayer.analytics.AnalyticsCollector;
 import androidx.media3.exoplayer.analytics.AnalyticsListener;
-import androidx.media3.exoplayer.audio.AudioCapabilities;
 import androidx.media3.exoplayer.audio.AudioSink;
 import androidx.media3.exoplayer.audio.DefaultAudioSink;
 import androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;
@@ -1585,8 +1584,7 @@ void setVideoChangeFrameRateStrategy(
    * <ul>
    *   <li>Audio offload rendering is enabled in {@link
    *       DefaultRenderersFactory#setEnableAudioOffload} or the equivalent option passed to {@link
-   *       DefaultAudioSink#DefaultAudioSink(AudioCapabilities,
-   *       DefaultAudioSink.AudioProcessorChain, boolean, boolean, int)}.
+   *       DefaultAudioSink.Builder#setOffloadMode}.
    *   <li>An audio track is playing in a format that the device supports offloading (for example,
    *       MP3 or AAC).
    *   <li>The {@link AudioSink} is playing with an offload {@link AudioTrack}.

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/CapturingRenderersFactory.java
Patch:
@@ -33,7 +33,6 @@
 import androidx.media3.exoplayer.Renderer;
 import androidx.media3.exoplayer.RenderersFactory;
 import androidx.media3.exoplayer.audio.AudioCapabilities;
-import androidx.media3.exoplayer.audio.AudioProcessor;
 import androidx.media3.exoplayer.audio.AudioRendererEventListener;
 import androidx.media3.exoplayer.audio.DefaultAudioSink;
 import androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;
@@ -96,7 +95,9 @@ public Renderer[] createRenderers(
           /* enableDecoderFallback= */ false,
           eventHandler,
           audioRendererEventListener,
-          new DefaultAudioSink(AudioCapabilities.getCapabilities(context), new AudioProcessor[0])),
+          new DefaultAudioSink.Builder()
+              .setAudioCapabilities(AudioCapabilities.getCapabilities(context))
+              .build()),
       new TextRenderer(textRendererOutput, eventHandler.getLooper()),
       new MetadataRenderer(metadataRendererOutput, eventHandler.getLooper())
     };

File: libraries/common/src/test/java/androidx/media3/common/MediaItemTest.java
Patch:
@@ -276,6 +276,7 @@ public void builderSetSubtitleConfigurations() {
                 .setSelectionFlags(C.SELECTION_FLAG_FORCED)
                 .setRoleFlags(C.ROLE_FLAG_ALTERNATE)
                 .setLabel("label")
+                .setId("id")
                 .build());
 
     MediaItem mediaItem =
@@ -617,6 +618,7 @@ public void buildUpon_individualSetters_equalsToOriginal() {
                         .setSelectionFlags(C.SELECTION_FLAG_FORCED)
                         .setRoleFlags(C.ROLE_FLAG_ALTERNATE)
                         .setLabel("label")
+                        .setId("id")
                         .build()))
             .setTag(new Object())
             .build();
@@ -673,6 +675,7 @@ public void buildUpon_wholeObjectSetters_equalsToOriginal() {
                         .setSelectionFlags(C.SELECTION_FLAG_FORCED)
                         .setRoleFlags(C.ROLE_FLAG_ALTERNATE)
                         .setLabel("label")
+                        .setId("id")
                         .build()))
             .setTag(new Object())
             .build();

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/DefaultMediaSourceFactory.java
Patch:
@@ -406,6 +406,7 @@ public MediaSource createMediaSource(MediaItem mediaItem) {
                   .setSelectionFlags(subtitleConfigurations.get(i).selectionFlags)
                   .setRoleFlags(subtitleConfigurations.get(i).roleFlags)
                   .setLabel(subtitleConfigurations.get(i).label)
+                  .setId(subtitleConfigurations.get(i).id)
                   .build();
           ExtractorsFactory extractorsFactory =
               () ->

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/SingleSampleMediaSource.java
Patch:
@@ -172,6 +172,7 @@ private SingleSampleMediaSource(
             .setSelectionFlags(subtitleConfiguration.selectionFlags)
             .setRoleFlags(subtitleConfiguration.roleFlags)
             .setLabel(subtitleConfiguration.label)
+            .setId(subtitleConfiguration.id)
             .build();
     dataSpec =
         new DataSpec.Builder()

File: libraries/session/src/main/java/androidx/media3/session/ConnectedControllersManager.java
Patch:
@@ -128,7 +128,7 @@ record = controllerRecords.remove(controllerInfo);
           if (sessionImpl.isReleased()) {
             return;
           }
-          sessionImpl.getCallback().onDisconnected(sessionImpl.getInstance(), controllerInfo);
+          sessionImpl.onDisconnectedOnHandler(controllerInfo);
         });
   }
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoSamplePipeline.java
Patch:
@@ -80,8 +80,7 @@ public VideoSamplePipeline(
       throw createRendererException(
           e, rendererIndex, inputFormat, PlaybackException.ERROR_CODE_UNSPECIFIED);
     }
-    if (inputFormat.height != transformation.outputHeight
-        || !transformation.transformationMatrix.isIdentity()) {
+    if (inputFormat.height != outputHeight || !transformation.transformationMatrix.isIdentity()) {
       frameEditor =
           FrameEditor.create(
               context,

File: library/common/src/test/java/com/google/android/exoplayer2/MediaItemTest.java
Patch:
@@ -278,6 +278,7 @@ public void builderSetSubtitleConfigurations() {
                 .setSelectionFlags(C.SELECTION_FLAG_FORCED)
                 .setRoleFlags(C.ROLE_FLAG_ALTERNATE)
                 .setLabel("label")
+                .setId("id")
                 .build());
 
     MediaItem mediaItem =
@@ -619,6 +620,7 @@ public void buildUpon_individualSetters_equalsToOriginal() {
                         .setSelectionFlags(C.SELECTION_FLAG_FORCED)
                         .setRoleFlags(C.ROLE_FLAG_ALTERNATE)
                         .setLabel("label")
+                        .setId("id")
                         .build()))
             .setTag(new Object())
             .build();
@@ -675,6 +677,7 @@ public void buildUpon_wholeObjectSetters_equalsToOriginal() {
                         .setSelectionFlags(C.SELECTION_FLAG_FORCED)
                         .setRoleFlags(C.ROLE_FLAG_ALTERNATE)
                         .setLabel("label")
+                        .setId("id")
                         .build()))
             .setTag(new Object())
             .build();

File: library/core/src/main/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactory.java
Patch:
@@ -404,6 +404,7 @@ public MediaSource createMediaSource(MediaItem mediaItem) {
                   .setSelectionFlags(subtitleConfigurations.get(i).selectionFlags)
                   .setRoleFlags(subtitleConfigurations.get(i).roleFlags)
                   .setLabel(subtitleConfigurations.get(i).label)
+                  .setId(subtitleConfigurations.get(i).id)
                   .build();
           ExtractorsFactory extractorsFactory =
               () ->

File: library/core/src/main/java/com/google/android/exoplayer2/source/SingleSampleMediaSource.java
Patch:
@@ -170,6 +170,7 @@ private SingleSampleMediaSource(
             .setSelectionFlags(subtitleConfiguration.selectionFlags)
             .setRoleFlags(subtitleConfiguration.roleFlags)
             .setLabel(subtitleConfiguration.label)
+            .setId(subtitleConfiguration.id)
             .build();
     dataSpec =
         new DataSpec.Builder()

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/HlsMediaSource.java
Patch:
@@ -144,6 +144,7 @@ public Factory(HlsDataSourceFactory hlsDataSourceFactory) {
       metadataType = METADATA_TYPE_ID3;
       streamKeys = Collections.emptyList();
       elapsedRealTimeOffsetMs = C.TIME_UNSET;
+      allowChunklessPreparation = true;
     }
 
     /**

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaTrack.java
Patch:
@@ -127,8 +127,6 @@ public int hashCode() {
     }
 
     checkArgument(clockRate > 0);
-    // Checks if payload type is "dynamic" as defined in RFC3551 Section 3.
-    checkArgument(rtpPayloadType >= 96);
     return new RtpPayloadFormat(formatBuilder.build(), rtpPayloadType, clockRate, fmtpParameters);
   }
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoSamplePipeline.java
Patch:
@@ -80,8 +80,7 @@ public VideoSamplePipeline(
       throw createRendererException(
           e, rendererIndex, inputFormat, PlaybackException.ERROR_CODE_UNSPECIFIED);
     }
-    if (inputFormat.height != transformation.outputHeight
-        || !transformation.transformationMatrix.isIdentity()) {
+    if (inputFormat.height != outputHeight || !transformation.transformationMatrix.isIdentity()) {
       frameEditor =
           FrameEditor.create(
               context,

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaSource.java
Patch:
@@ -142,6 +142,7 @@ public Factory(HlsDataSourceFactory hlsDataSourceFactory) {
       metadataType = METADATA_TYPE_ID3;
       streamKeys = Collections.emptyList();
       elapsedRealTimeOffsetMs = C.TIME_UNSET;
+      allowChunklessPreparation = true;
     }
 
     /**

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMediaTrack.java
Patch:
@@ -125,8 +125,6 @@ public int hashCode() {
     }
 
     checkArgument(clockRate > 0);
-    // Checks if payload type is "dynamic" as defined in RFC3551 Section 3.
-    checkArgument(rtpPayloadType >= 96);
     return new RtpPayloadFormat(formatBuilder.build(), rtpPayloadType, clockRate, fmtpParameters);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -832,8 +832,6 @@ private void assertPreparedWithMedia() {
    * Runs the track selection for a given period index with the current parameters. The selected
    * tracks will be added to {@link #trackSelectionsByPeriodAndRenderer}.
    */
-  // Intentional reference comparison of track group instances.
-  @SuppressWarnings("ReferenceEquality")
   @RequiresNonNull({
     "trackGroupArrays",
     "trackSelectionsByPeriodAndRenderer",
@@ -858,7 +856,7 @@ private TrackSelectorResult runTrackSelection(int periodIndex) {
         boolean mergedWithExistingSelection = false;
         for (int j = 0; j < existingSelectionList.size(); j++) {
           ExoTrackSelection existingSelection = existingSelectionList.get(j);
-          if (existingSelection.getTrackGroup() == newSelection.getTrackGroup()) {
+          if (existingSelection.getTrackGroup().equals(newSelection.getTrackGroup())) {
             // Merge with existing selection.
             scratchSet.clear();
             for (int k = 0; k < existingSelection.length(); k++) {

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
Patch:
@@ -1058,7 +1058,8 @@ private boolean updateTracksAndSelectionsAndNotifyIfChanged() {
         new TracksInfo.TrackGroupInfo[castMediaTracks.size()];
     for (int i = 0; i < castMediaTracks.size(); i++) {
       MediaTrack mediaTrack = castMediaTracks.get(i);
-      trackGroups[i] = new TrackGroup(CastUtils.mediaTrackToFormat(mediaTrack));
+      trackGroups[i] =
+          new TrackGroup(/* id= */ Integer.toString(i), CastUtils.mediaTrackToFormat(mediaTrack));
 
       long id = mediaTrack.getId();
       @C.TrackType int trackType = MimeTypes.getTrackType(mediaTrack.getContentType());

File: library/common/src/test/java/com/google/android/exoplayer2/source/TrackGroupTest.java
Patch:
@@ -32,8 +32,9 @@ public void roundTripViaBundle_ofTrackGroup_yieldsEqualInstance() {
     Format.Builder formatBuilder = new Format.Builder();
     Format format1 = formatBuilder.setSampleMimeType(MimeTypes.VIDEO_H264).build();
     Format format2 = formatBuilder.setSampleMimeType(MimeTypes.AUDIO_AAC).build();
+    String id = "abc";
 
-    TrackGroup trackGroupToBundle = new TrackGroup(format1, format2);
+    TrackGroup trackGroupToBundle = new TrackGroup(id, format1, format2);
 
     TrackGroup trackGroupFromBundle = TrackGroup.CREATOR.fromBundle(trackGroupToBundle.toBundle());
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaPeriod.java
Patch:
@@ -781,7 +781,7 @@ private void maybeFinishPrepare() {
         }
       }
       trackFormat = trackFormat.copyWithCryptoType(drmSessionManager.getCryptoType(trackFormat));
-      trackArray[i] = new TrackGroup(trackFormat);
+      trackArray[i] = new TrackGroup(/* id= */ Integer.toString(i), trackFormat);
     }
     trackState = new TrackState(new TrackGroupArray(trackArray), trackIsAudioVideoFlags);
     prepared = true;

File: library/core/src/main/java/com/google/android/exoplayer2/util/EventLogger.java
Patch:
@@ -273,7 +273,7 @@ public void onTracksChanged(
                   trackGroup.length,
                   mappedTrackInfo.getAdaptiveSupport(
                       rendererIndex, groupIndex, /* includeCapabilitiesExceededTracks= */ false));
-          logd("    Group:" + groupIndex + ", adaptive_supported=" + adaptiveSupport + " [");
+          logd("    Group:" + trackGroup.id + ", adaptive_supported=" + adaptiveSupport + " [");
           for (int trackIndex = 0; trackIndex < trackGroup.length; trackIndex++) {
             String status = getTrackStatusString(trackSelection, trackGroup, trackIndex);
             String formatSupport =

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMediaPeriod.java
Patch:
@@ -400,7 +400,9 @@ private static ImmutableList<TrackGroup> buildTrackGroups(
     SampleQueue sampleQueue;
     for (int i = 0; i < rtspLoaderWrappers.size(); i++) {
       sampleQueue = rtspLoaderWrappers.get(i).sampleQueue;
-      listBuilder.add(new TrackGroup(checkNotNull(sampleQueue.getUpstreamFormat())));
+      listBuilder.add(
+          new TrackGroup(
+              /* id= */ Integer.toString(i), checkNotNull(sampleQueue.getUpstreamFormat())));
     }
     return listBuilder.build();
   }

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/SsMediaPeriod.java
Patch:
@@ -263,7 +263,7 @@ private static TrackGroupArray buildTrackGroups(
         exposedFormats[j] =
             manifestFormat.copyWithCryptoType(drmSessionManager.getCryptoType(manifestFormat));
       }
-      trackGroups[i] = new TrackGroup(exposedFormats);
+      trackGroups[i] = new TrackGroup(/* id= */ Integer.toString(i), exposedFormats);
     }
     return new TrackGroupArray(trackGroups);
   }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/AudioSamplePipeline.java
Patch:
@@ -23,7 +23,6 @@
 
 import android.media.MediaCodec.BufferInfo;
 import androidx.annotation.Nullable;
-import androidx.annotation.RequiresApi;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.Format;
@@ -41,7 +40,6 @@
 /**
  * Pipeline to decode audio samples, apply transformations on the raw samples, and re-encode them.
  */
-@RequiresApi(18)
 /* package */ final class AudioSamplePipeline implements SamplePipeline {
 
   private static final String TAG = "AudioSamplePipeline";

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/FrameEditor.java
Patch:
@@ -24,15 +24,13 @@
 import android.opengl.EGLSurface;
 import android.opengl.GLES20;
 import android.view.Surface;
-import androidx.annotation.RequiresApi;
 import com.google.android.exoplayer2.util.GlUtil;
 import java.io.IOException;
 
 /**
  * FrameEditor applies changes to individual video frames. Changes include just resolution for now,
  * but may later include brightness, cropping, rotation, etc.
  */
-@RequiresApi(18)
 /* package */ final class FrameEditor {
 
   static {

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/FrameworkMuxer.java
Patch:
@@ -36,7 +36,6 @@
 import java.nio.ByteBuffer;
 
 /** Muxer implementation that uses a {@link MediaMuxer}. */
-@RequiresApi(18)
 /* package */ final class FrameworkMuxer implements Muxer {
 
   public static final class Factory implements Muxer.Factory {

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/MediaCodecAdapterWrapper.java
Patch:
@@ -26,7 +26,6 @@
 import android.media.MediaFormat;
 import android.view.Surface;
 import androidx.annotation.Nullable;
-import androidx.annotation.RequiresApi;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.decoder.DecoderInputBuffer;
@@ -50,7 +49,6 @@
  * through {@link MediaCodecAdapter}. This is done by simplifying the calls needed to queue and
  * dequeue buffers, removing the need to track buffer indices and codec events.
  */
-@RequiresApi(18)
 /* package */ final class MediaCodecAdapterWrapper {
 
   // MediaCodec decoders always output 16 bit PCM, unless configured to output PCM float.
@@ -303,7 +301,6 @@ public void queueInputBuffer(DecoderInputBuffer inputBuffer) {
     inputBuffer.data = null;
   }
 
-  @RequiresApi(18)
   public void signalEndOfInputStream() {
     codec.signalEndOfInputStream();
   }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/MuxerWrapper.java
Patch:
@@ -22,7 +22,6 @@
 import android.util.SparseIntArray;
 import android.util.SparseLongArray;
 import androidx.annotation.Nullable;
-import androidx.annotation.RequiresApi;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.util.MimeTypes;
@@ -34,7 +33,6 @@
  *
  * <p>This wrapper can contain at most one video track and one audio track.
  */
-@RequiresApi(18)
 /* package */ final class MuxerWrapper {
 
   /**

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -79,7 +79,6 @@
  * of the application's main thread is used. In all cases the Looper of the thread from which the
  * transformer must be accessed can be queried using {@link #getApplicationLooper()}.
  */
-@RequiresApi(18)
 public final class Transformer {
 
   static {

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerAudioRenderer.java
Patch:
@@ -20,7 +20,6 @@
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 
 import androidx.annotation.Nullable;
-import androidx.annotation.RequiresApi;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.Format;
@@ -30,7 +29,6 @@
 import com.google.android.exoplayer2.metadata.mp4.SlowMotionData;
 import com.google.android.exoplayer2.source.SampleStream.ReadDataResult;
 
-@RequiresApi(18)
 /* package */ final class TransformerAudioRenderer extends TransformerBaseRenderer {
 
   private static final String TAG = "TransformerAudioRenderer";

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerBaseRenderer.java
Patch:
@@ -19,7 +19,6 @@
 import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
 
 import androidx.annotation.Nullable;
-import androidx.annotation.RequiresApi;
 import com.google.android.exoplayer2.BaseRenderer;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ExoPlaybackException;
@@ -34,7 +33,6 @@
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
-@RequiresApi(18)
 /* package */ abstract class TransformerBaseRenderer extends BaseRenderer {
 
   protected final MuxerWrapper muxerWrapper;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerMediaClock.java
Patch:
@@ -18,12 +18,10 @@
 import static com.google.android.exoplayer2.util.Util.minValue;
 
 import android.util.SparseLongArray;
-import androidx.annotation.RequiresApi;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.PlaybackParameters;
 import com.google.android.exoplayer2.util.MediaClock;
 
-@RequiresApi(18)
 /* package */ final class TransformerMediaClock implements MediaClock {
 
   private final SparseLongArray trackTypeToTimeUs;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerVideoRenderer.java
Patch:
@@ -20,7 +20,6 @@
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 
 import android.content.Context;
-import androidx.annotation.RequiresApi;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.Format;
@@ -31,7 +30,6 @@
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
-@RequiresApi(18)
 /* package */ final class TransformerVideoRenderer extends TransformerBaseRenderer {
 
   private static final String TAG = "TransformerTranscodingVideoRenderer";

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoSamplePipeline.java
Patch:
@@ -21,7 +21,6 @@
 import android.content.Context;
 import android.media.MediaCodec;
 import androidx.annotation.Nullable;
-import androidx.annotation.RequiresApi;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.Format;
@@ -33,7 +32,6 @@
 /**
  * Pipeline to decode video samples, apply transformations on the raw samples, and re-encode them.
  */
-@RequiresApi(18)
 /* package */ final class VideoSamplePipeline implements SamplePipeline {
 
   private static final String TAG = "VideoSamplePipeline";

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/cea/Cea708Decoder.java
Patch:
@@ -1413,7 +1413,7 @@ private static final class Cea708CueInfo {
      * @param size See {@link Cue#size}.
      * @param windowColorSet See {@link Cue#windowColorSet}.
      * @param windowColor See {@link Cue#windowColor}.
-     * @param priority See (@link #priority}.
+     * @param priority See {@link #priority}.
      */
     public Cea708CueInfo(
         CharSequence text,

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerBaseRenderer.java
Patch:
@@ -29,6 +29,7 @@
 import com.google.android.exoplayer2.source.SampleStream.ReadDataResult;
 import com.google.android.exoplayer2.util.MediaClock;
 import com.google.android.exoplayer2.util.MimeTypes;
+import com.google.errorprone.annotations.ForOverride;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
@@ -133,6 +134,7 @@ protected final void onReset() {
     muxerWrapperTrackEnded = false;
   }
 
+  @ForOverride
   @EnsuresNonNullIf(expression = "samplePipeline", result = true)
   protected abstract boolean ensureConfigured() throws ExoPlaybackException;
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/offline/DownloadHelper.java
Patch:
@@ -835,8 +835,6 @@ private void assertPreparedWithMedia() {
    * Runs the track selection for a given period index with the current parameters. The selected
    * tracks will be added to {@link #trackSelectionsByPeriodAndRenderer}.
    */
-  // Intentional reference comparison of track group instances.
-  @SuppressWarnings("ReferenceEquality")
   @RequiresNonNull({
     "trackGroupArrays",
     "trackSelectionsByPeriodAndRenderer",
@@ -861,7 +859,7 @@ private TrackSelectorResult runTrackSelection(int periodIndex) {
         boolean mergedWithExistingSelection = false;
         for (int j = 0; j < existingSelectionList.size(); j++) {
           ExoTrackSelection existingSelection = existingSelectionList.get(j);
-          if (existingSelection.getTrackGroup() == newSelection.getTrackGroup()) {
+          if (existingSelection.getTrackGroup().equals(newSelection.getTrackGroup())) {
             // Merge with existing selection.
             scratchSet.clear();
             for (int k = 0; k < existingSelection.length(); k++) {

File: libraries/cast/src/main/java/androidx/media3/cast/CastPlayer.java
Patch:
@@ -1060,7 +1060,8 @@ private boolean updateTracksAndSelectionsAndNotifyIfChanged() {
         new TracksInfo.TrackGroupInfo[castMediaTracks.size()];
     for (int i = 0; i < castMediaTracks.size(); i++) {
       MediaTrack mediaTrack = castMediaTracks.get(i);
-      trackGroups[i] = new TrackGroup(CastUtils.mediaTrackToFormat(mediaTrack));
+      trackGroups[i] =
+          new TrackGroup(/* id= */ Integer.toString(i), CastUtils.mediaTrackToFormat(mediaTrack));
 
       long id = mediaTrack.getId();
       @C.TrackType int trackType = MimeTypes.getTrackType(mediaTrack.getContentType());

File: libraries/common/src/test/java/androidx/media3/common/TrackGroupTest.java
Patch:
@@ -30,8 +30,9 @@ public void roundTripViaBundle_ofTrackGroup_yieldsEqualInstance() {
     Format.Builder formatBuilder = new Format.Builder();
     Format format1 = formatBuilder.setSampleMimeType(MimeTypes.VIDEO_H264).build();
     Format format2 = formatBuilder.setSampleMimeType(MimeTypes.AUDIO_AAC).build();
+    String id = "abc";
 
-    TrackGroup trackGroupToBundle = new TrackGroup(format1, format2);
+    TrackGroup trackGroupToBundle = new TrackGroup(id, format1, format2);
 
     TrackGroup trackGroupFromBundle = TrackGroup.CREATOR.fromBundle(trackGroupToBundle.toBundle());
 

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/source/ProgressiveMediaPeriod.java
Patch:
@@ -783,7 +783,7 @@ private void maybeFinishPrepare() {
         }
       }
       trackFormat = trackFormat.copyWithCryptoType(drmSessionManager.getCryptoType(trackFormat));
-      trackArray[i] = new TrackGroup(trackFormat);
+      trackArray[i] = new TrackGroup(/* id= */ Integer.toString(i), trackFormat);
     }
     trackState = new TrackState(new TrackGroupArray(trackArray), trackIsAudioVideoFlags);
     prepared = true;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/util/EventLogger.java
Patch:
@@ -277,7 +277,7 @@ public void onTracksChanged(
                   trackGroup.length,
                   mappedTrackInfo.getAdaptiveSupport(
                       rendererIndex, groupIndex, /* includeCapabilitiesExceededTracks= */ false));
-          logd("    Group:" + groupIndex + ", adaptive_supported=" + adaptiveSupport + " [");
+          logd("    Group:" + trackGroup.id + ", adaptive_supported=" + adaptiveSupport + " [");
           for (int trackIndex = 0; trackIndex < trackGroup.length; trackIndex++) {
             String status = getTrackStatusString(trackSelection, trackGroup, trackIndex);
             String formatSupport =

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaPeriod.java
Patch:
@@ -402,7 +402,9 @@ private static ImmutableList<TrackGroup> buildTrackGroups(
     SampleQueue sampleQueue;
     for (int i = 0; i < rtspLoaderWrappers.size(); i++) {
       sampleQueue = rtspLoaderWrappers.get(i).sampleQueue;
-      listBuilder.add(new TrackGroup(checkNotNull(sampleQueue.getUpstreamFormat())));
+      listBuilder.add(
+          new TrackGroup(
+              /* id= */ Integer.toString(i), checkNotNull(sampleQueue.getUpstreamFormat())));
     }
     return listBuilder.build();
   }

File: libraries/exoplayer_smoothstreaming/src/main/java/androidx/media3/exoplayer/smoothstreaming/SsMediaPeriod.java
Patch:
@@ -263,7 +263,7 @@ private static TrackGroupArray buildTrackGroups(
         exposedFormats[j] =
             manifestFormat.copyWithCryptoType(drmSessionManager.getCryptoType(manifestFormat));
       }
-      trackGroups[i] = new TrackGroup(exposedFormats);
+      trackGroups[i] = new TrackGroup(/* id= */ Integer.toString(i), exposedFormats);
     }
     return new TrackGroupArray(trackGroups);
   }

File: libraries/transformer/src/main/java/androidx/media3/transformer/AudioSamplePipeline.java
Patch:
@@ -23,7 +23,6 @@
 
 import android.media.MediaCodec.BufferInfo;
 import androidx.annotation.Nullable;
-import androidx.annotation.RequiresApi;
 import androidx.media3.common.C;
 import androidx.media3.common.Format;
 import androidx.media3.common.PlaybackException;
@@ -41,7 +40,6 @@
 /**
  * Pipeline to decode audio samples, apply transformations on the raw samples, and re-encode them.
  */
-@RequiresApi(18)
 /* package */ final class AudioSamplePipeline implements SamplePipeline {
 
   private static final String TAG = "AudioSamplePipeline";

File: libraries/transformer/src/main/java/androidx/media3/transformer/FrameEditor.java
Patch:
@@ -24,15 +24,13 @@
 import android.opengl.EGLSurface;
 import android.opengl.GLES20;
 import android.view.Surface;
-import androidx.annotation.RequiresApi;
 import androidx.media3.common.util.GlUtil;
 import java.io.IOException;
 
 /**
  * FrameEditor applies changes to individual video frames. Changes include just resolution for now,
  * but may later include brightness, cropping, rotation, etc.
  */
-@RequiresApi(18)
 /* package */ final class FrameEditor {
 
   static {

File: libraries/transformer/src/main/java/androidx/media3/transformer/FrameworkMuxer.java
Patch:
@@ -36,7 +36,6 @@
 import java.nio.ByteBuffer;
 
 /** Muxer implementation that uses a {@link MediaMuxer}. */
-@RequiresApi(18)
 /* package */ final class FrameworkMuxer implements Muxer {
 
   public static final class Factory implements Muxer.Factory {

File: libraries/transformer/src/main/java/androidx/media3/transformer/MediaCodecAdapterWrapper.java
Patch:
@@ -26,7 +26,6 @@
 import android.media.MediaFormat;
 import android.view.Surface;
 import androidx.annotation.Nullable;
-import androidx.annotation.RequiresApi;
 import androidx.media3.common.C;
 import androidx.media3.common.Format;
 import androidx.media3.common.MimeTypes;
@@ -50,7 +49,6 @@
  * through {@link MediaCodecAdapter}. This is done by simplifying the calls needed to queue and
  * dequeue buffers, removing the need to track buffer indices and codec events.
  */
-@RequiresApi(18)
 /* package */ final class MediaCodecAdapterWrapper {
 
   // MediaCodec decoders always output 16 bit PCM, unless configured to output PCM float.
@@ -303,7 +301,6 @@ public void queueInputBuffer(DecoderInputBuffer inputBuffer) {
     inputBuffer.data = null;
   }
 
-  @RequiresApi(18)
   public void signalEndOfInputStream() {
     codec.signalEndOfInputStream();
   }

File: libraries/transformer/src/main/java/androidx/media3/transformer/MuxerWrapper.java
Patch:
@@ -22,7 +22,6 @@
 import android.util.SparseIntArray;
 import android.util.SparseLongArray;
 import androidx.annotation.Nullable;
-import androidx.annotation.RequiresApi;
 import androidx.media3.common.C;
 import androidx.media3.common.Format;
 import androidx.media3.common.MimeTypes;
@@ -34,7 +33,6 @@
  *
  * <p>This wrapper can contain at most one video track and one audio track.
  */
-@RequiresApi(18)
 /* package */ final class MuxerWrapper {
 
   /**

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformer.java
Patch:
@@ -80,7 +80,6 @@
  * of the application's main thread is used. In all cases the Looper of the thread from which the
  * transformer must be accessed can be queried using {@link #getApplicationLooper()}.
  */
-@RequiresApi(18)
 @UnstableApi
 public final class Transformer {
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerAudioRenderer.java
Patch:
@@ -20,7 +20,6 @@
 import static androidx.media3.exoplayer.source.SampleStream.FLAG_REQUIRE_FORMAT;
 
 import androidx.annotation.Nullable;
-import androidx.annotation.RequiresApi;
 import androidx.media3.common.C;
 import androidx.media3.common.Format;
 import androidx.media3.common.Metadata;
@@ -30,7 +29,6 @@
 import androidx.media3.exoplayer.source.SampleStream.ReadDataResult;
 import androidx.media3.extractor.metadata.mp4.SlowMotionData;
 
-@RequiresApi(18)
 /* package */ final class TransformerAudioRenderer extends TransformerBaseRenderer {
 
   private static final String TAG = "TransformerAudioRenderer";

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerBaseRenderer.java
Patch:
@@ -19,7 +19,6 @@
 import static androidx.media3.common.util.Assertions.checkStateNotNull;
 
 import androidx.annotation.Nullable;
-import androidx.annotation.RequiresApi;
 import androidx.media3.common.C;
 import androidx.media3.common.Format;
 import androidx.media3.common.MimeTypes;
@@ -34,7 +33,6 @@
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
-@RequiresApi(18)
 /* package */ abstract class TransformerBaseRenderer extends BaseRenderer {
 
   protected final MuxerWrapper muxerWrapper;

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerMediaClock.java
Patch:
@@ -18,12 +18,10 @@
 import static androidx.media3.common.util.Util.minValue;
 
 import android.util.SparseLongArray;
-import androidx.annotation.RequiresApi;
 import androidx.media3.common.C;
 import androidx.media3.common.PlaybackParameters;
 import androidx.media3.exoplayer.MediaClock;
 
-@RequiresApi(18)
 /* package */ final class TransformerMediaClock implements MediaClock {
 
   private final SparseLongArray trackTypeToTimeUs;

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerVideoRenderer.java
Patch:
@@ -20,7 +20,6 @@
 import static androidx.media3.exoplayer.source.SampleStream.FLAG_REQUIRE_FORMAT;
 
 import android.content.Context;
-import androidx.annotation.RequiresApi;
 import androidx.media3.common.C;
 import androidx.media3.common.Format;
 import androidx.media3.decoder.DecoderInputBuffer;
@@ -31,7 +30,6 @@
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
-@RequiresApi(18)
 /* package */ final class TransformerVideoRenderer extends TransformerBaseRenderer {
 
   private static final String TAG = "TransformerTranscodingVideoRenderer";

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoSamplePipeline.java
Patch:
@@ -21,7 +21,6 @@
 import android.content.Context;
 import android.media.MediaCodec;
 import androidx.annotation.Nullable;
-import androidx.annotation.RequiresApi;
 import androidx.media3.common.C;
 import androidx.media3.common.Format;
 import androidx.media3.common.PlaybackException;
@@ -33,7 +32,6 @@
 /**
  * Pipeline to decode video samples, apply transformations on the raw samples, and re-encode them.
  */
-@RequiresApi(18)
 /* package */ final class VideoSamplePipeline implements SamplePipeline {
 
   private static final String TAG = "VideoSamplePipeline";

File: libraries/extractor/src/main/java/androidx/media3/extractor/text/cea/Cea708Decoder.java
Patch:
@@ -1415,7 +1415,7 @@ private static final class Cea708CueInfo {
      * @param size See {@link Cue#size}.
      * @param windowColorSet See {@link Cue#windowColorSet}.
      * @param windowColor See {@link Cue#windowColor}.
-     * @param priority See (@link #priority}.
+     * @param priority See {@link #priority}.
      */
     public Cea708CueInfo(
         CharSequence text,

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerBaseRenderer.java
Patch:
@@ -29,6 +29,7 @@
 import androidx.media3.exoplayer.MediaClock;
 import androidx.media3.exoplayer.RendererCapabilities;
 import androidx.media3.exoplayer.source.SampleStream.ReadDataResult;
+import com.google.errorprone.annotations.ForOverride;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
@@ -133,6 +134,7 @@ protected final void onReset() {
     muxerWrapperTrackEnded = false;
   }
 
+  @ForOverride
   @EnsuresNonNullIf(expression = "samplePipeline", result = true)
   protected abstract boolean ensureConfigured() throws ExoPlaybackException;
 

File: libraries/extractor/src/main/java/androidx/media3/extractor/NalUnitUtil.java
Patch:
@@ -784,7 +784,7 @@ private static void skipShortTermReferencePictureSets(ParsableNalUnitBitArray bi
         bitArray.skipBit(); // delta_rps_sign
         bitArray.readUnsignedExpGolombCodedInt(); // abs_delta_rps_minus1
         for (int j = 0; j <= previousNumDeltaPocs; j++) {
-          if (bitArray.readBit()) { // used_by_curr_pic_flag[j]
+          if (!bitArray.readBit()) { // used_by_curr_pic_flag[j]
             bitArray.skipBit(); // use_delta_flag[j]
           }
         }

File: libraries/session/src/main/java/androidx/media3/session/MediaSession.java
Patch:
@@ -294,7 +294,7 @@ public Builder setSessionCallback(SessionCallback callback) {
      * @return The builder to allow chaining.
      */
     @Override
-    Builder setMediaItemFiller(MediaItemFiller mediaItemFiller) {
+    public Builder setMediaItemFiller(MediaItemFiller mediaItemFiller) {
       return super.setMediaItemFiller(mediaItemFiller);
     }
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformation.java
Patch:
@@ -21,9 +21,6 @@
 /** A media transformation configuration. */
 /* package */ final class Transformation {
 
-  /** A value for various fields to indicate that the field's value is unknown or not set. */
-  public static final int NO_VALUE = -1;
-
   public final boolean removeAudio;
   public final boolean removeVideo;
   public final boolean flattenForSlowMotion;

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerAudioRenderer.java
Patch:
@@ -46,7 +46,7 @@ public String getName() {
     return TAG;
   }
 
-  /** Attempts to read the input format and to initialize the sample or passthrough pipeline. */
+  /** Attempts to read the input format and to initialize the {@link SamplePipeline}. */
   @Override
   protected boolean ensureConfigured() throws ExoPlaybackException {
     if (samplePipeline != null) {

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerVideoRenderer.java
Patch:
@@ -57,7 +57,7 @@ public String getName() {
     return TAG;
   }
 
-  /** Attempts to read the input format and to initialize the sample or passthrough pipeline. */
+  /** Attempts to read the input format and to initialize the {@link SamplePipeline}. */
   @Override
   protected boolean ensureConfigured() throws ExoPlaybackException {
     if (samplePipeline != null) {
@@ -72,7 +72,7 @@ protected boolean ensureConfigured() throws ExoPlaybackException {
     Format inputFormat = checkNotNull(formatHolder.format);
     if ((transformation.videoMimeType != null
             && !transformation.videoMimeType.equals(inputFormat.sampleMimeType))
-        || (transformation.outputHeight != Transformation.NO_VALUE
+        || (transformation.outputHeight != Format.NO_VALUE
             && transformation.outputHeight != inputFormat.height)) {
       samplePipeline = new VideoSamplePipeline(context, inputFormat, transformation, getIndex());
     } else {

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoSamplePipeline.java
Patch:
@@ -58,7 +58,7 @@ public VideoSamplePipeline(
 
     int outputWidth = inputFormat.width;
     int outputHeight = inputFormat.height;
-    if (transformation.outputHeight != Transformation.NO_VALUE
+    if (transformation.outputHeight != Format.NO_VALUE
         && transformation.outputHeight != inputFormat.height) {
       outputWidth = inputFormat.width * transformation.outputHeight / inputFormat.height;
       outputHeight = transformation.outputHeight;

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/RemoveAudioTransformationTest.java
Patch:
@@ -30,8 +30,7 @@ public class RemoveAudioTransformationTest {
   @Test
   public void removeAudioTransform() throws Exception {
     Context context = ApplicationProvider.getApplicationContext();
-    Transformer transformer =
-        new Transformer.Builder().setContext(context).setRemoveAudio(true).build();
+    Transformer transformer = new Transformer.Builder(context).setRemoveAudio(true).build();
     runTransformer(context, transformer, MP4_ASSET_URI_STRING, /* timeoutSeconds= */ 120);
   }
 }

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/RemoveVideoTransformationTest.java
Patch:
@@ -30,8 +30,7 @@ public class RemoveVideoTransformationTest {
   @Test
   public void removeVideoTransform() throws Exception {
     Context context = ApplicationProvider.getApplicationContext();
-    Transformer transformer =
-        new Transformer.Builder().setContext(context).setRemoveVideo(true).build();
+    Transformer transformer = new Transformer.Builder(context).setRemoveVideo(true).build();
     runTransformer(context, transformer, MP4_ASSET_URI_STRING, /* timeoutSeconds= */ 120);
   }
 }

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/SefTransformationTest.java
Patch:
@@ -31,7 +31,7 @@ public class SefTransformationTest {
   public void sefTransform() throws Exception {
     Context context = ApplicationProvider.getApplicationContext();
     Transformer transformer =
-        new Transformer.Builder().setContext(context).setFlattenForSlowMotion(true).build();
+        new Transformer.Builder(context).setFlattenForSlowMotion(true).build();
     runTransformer(context, transformer, SEF_ASSET_URI_STRING, /* timeoutSeconds= */ 120);
   }
 }

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/TransformationTest.java
Patch:
@@ -30,7 +30,7 @@ public class TransformationTest {
   @Test
   public void transform() throws Exception {
     Context context = ApplicationProvider.getApplicationContext();
-    Transformer transformer = new Transformer.Builder().setContext(context).build();
+    Transformer transformer = new Transformer.Builder(context).build();
     runTransformer(context, transformer, MP4_ASSET_URI_STRING, /* timeoutSeconds= */ 120);
   }
 }

File: libraries/transformer/src/main/java/androidx/media3/transformer/FrameworkMuxer.java
Patch:
@@ -61,7 +61,7 @@ public FrameworkMuxer create(ParcelFileDescriptor parcelFileDescriptor, String o
     public boolean supportsOutputMimeType(String mimeType) {
       try {
         mimeTypeToMuxerOutputFormat(mimeType);
-      } catch (IllegalStateException e) {
+      } catch (IllegalArgumentException e) {
         return false;
       }
       return true;

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerBaseRenderer.java
Patch:
@@ -29,7 +29,6 @@
 import androidx.media3.exoplayer.MediaClock;
 import androidx.media3.exoplayer.RendererCapabilities;
 import androidx.media3.exoplayer.source.SampleStream.ReadDataResult;
-import com.google.errorprone.annotations.ForOverride;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
@@ -134,7 +133,6 @@ protected final void onStopped() {
     isRendererStarted = false;
   }
 
-  @ForOverride
   @EnsuresNonNullIf(expression = "samplePipeline", result = true)
   protected abstract boolean ensureConfigured() throws ExoPlaybackException;
 

File: libraries/ui/src/main/java/androidx/media3/ui/PlayerNotificationManager.java
Patch:
@@ -345,7 +345,9 @@ public Builder(
      *
      * @param context The {@link Context}.
      * @param notificationId The id of the notification to be posted. Must be greater than 0.
-     * @param channelId The id of the notification channel.
+     * @param channelId The id of the notification channel of an existing notification channel or of
+     *     the channel that should be automatically created. In the latter case, {@link
+     *     #setChannelNameResourceId(int)} needs to be called as well.
      */
     public Builder(Context context, @IntRange(from = 1) int notificationId, String channelId) {
       checkArgument(notificationId > 0);

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/flv/ScriptTagPayloadReader.java
Patch:
@@ -89,6 +89,9 @@ protected boolean parsePayload(ParsableByteArray data, long timeUs) {
       // We're only interested in metadata.
       return false;
     }
+    if (data.getData().length <= data.getPosition()) {
+      return false;
+    }
     int type = readAmfType(data);
     if (type != AMF_TYPE_ECMA_ARRAY) {
       // We're not interested in this metadata.

File: library/extractor/src/main/java/com/google/android/exoplayer2/util/NalUnitUtil.java
Patch:
@@ -779,7 +779,7 @@ private static void skipShortTermReferencePictureSets(ParsableNalUnitBitArray bi
         bitArray.skipBit(); // delta_rps_sign
         bitArray.readUnsignedExpGolombCodedInt(); // abs_delta_rps_minus1
         for (int j = 0; j <= previousNumDeltaPocs; j++) {
-          if (bitArray.readBit()) { // used_by_curr_pic_flag[j]
+          if (!bitArray.readBit()) { // used_by_curr_pic_flag[j]
             bitArray.skipBit(); // use_delta_flag[j]
           }
         }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformation.java
Patch:
@@ -21,9 +21,6 @@
 /** A media transformation configuration. */
 /* package */ final class Transformation {
 
-  /** A value for various fields to indicate that the field's value is unknown or not set. */
-  public static final int NO_VALUE = -1;
-
   public final boolean removeAudio;
   public final boolean removeVideo;
   public final boolean flattenForSlowMotion;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerAudioRenderer.java
Patch:
@@ -46,7 +46,7 @@ public String getName() {
     return TAG;
   }
 
-  /** Attempts to read the input format and to initialize the sample or passthrough pipeline. */
+  /** Attempts to read the input format and to initialize the {@link SamplePipeline}. */
   @Override
   protected boolean ensureConfigured() throws ExoPlaybackException {
     if (samplePipeline != null) {

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerVideoRenderer.java
Patch:
@@ -57,7 +57,7 @@ public String getName() {
     return TAG;
   }
 
-  /** Attempts to read the input format and to initialize the sample or passthrough pipeline. */
+  /** Attempts to read the input format and to initialize the {@link SamplePipeline}. */
   @Override
   protected boolean ensureConfigured() throws ExoPlaybackException {
     if (samplePipeline != null) {
@@ -72,7 +72,7 @@ protected boolean ensureConfigured() throws ExoPlaybackException {
     Format inputFormat = checkNotNull(formatHolder.format);
     if ((transformation.videoMimeType != null
             && !transformation.videoMimeType.equals(inputFormat.sampleMimeType))
-        || (transformation.outputHeight != Transformation.NO_VALUE
+        || (transformation.outputHeight != Format.NO_VALUE
             && transformation.outputHeight != inputFormat.height)) {
       samplePipeline = new VideoSamplePipeline(context, inputFormat, transformation, getIndex());
     } else {

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoSamplePipeline.java
Patch:
@@ -58,7 +58,7 @@ public VideoSamplePipeline(
 
     int outputWidth = inputFormat.width;
     int outputHeight = inputFormat.height;
-    if (transformation.outputHeight != Transformation.NO_VALUE
+    if (transformation.outputHeight != Format.NO_VALUE
         && transformation.outputHeight != inputFormat.height) {
       outputWidth = inputFormat.width * transformation.outputHeight / inputFormat.height;
       outputHeight = transformation.outputHeight;

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/RemoveAudioTransformationTest.java
Patch:
@@ -30,8 +30,7 @@ public class RemoveAudioTransformationTest {
   @Test
   public void removeAudioTransform() throws Exception {
     Context context = ApplicationProvider.getApplicationContext();
-    Transformer transformer =
-        new Transformer.Builder().setContext(context).setRemoveAudio(true).build();
+    Transformer transformer = new Transformer.Builder(context).setRemoveAudio(true).build();
     runTransformer(context, transformer, MP4_ASSET_URI_STRING, /* timeoutSeconds= */ 120);
   }
 }

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/RemoveVideoTransformationTest.java
Patch:
@@ -30,8 +30,7 @@ public class RemoveVideoTransformationTest {
   @Test
   public void removeVideoTransform() throws Exception {
     Context context = ApplicationProvider.getApplicationContext();
-    Transformer transformer =
-        new Transformer.Builder().setContext(context).setRemoveVideo(true).build();
+    Transformer transformer = new Transformer.Builder(context).setRemoveVideo(true).build();
     runTransformer(context, transformer, MP4_ASSET_URI_STRING, /* timeoutSeconds= */ 120);
   }
 }

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/SefTransformationTest.java
Patch:
@@ -31,7 +31,7 @@ public class SefTransformationTest {
   public void sefTransform() throws Exception {
     Context context = ApplicationProvider.getApplicationContext();
     Transformer transformer =
-        new Transformer.Builder().setContext(context).setFlattenForSlowMotion(true).build();
+        new Transformer.Builder(context).setFlattenForSlowMotion(true).build();
     runTransformer(context, transformer, SEF_ASSET_URI_STRING, /* timeoutSeconds= */ 120);
   }
 }

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/TransformationTest.java
Patch:
@@ -30,7 +30,7 @@ public class TransformationTest {
   @Test
   public void transform() throws Exception {
     Context context = ApplicationProvider.getApplicationContext();
-    Transformer transformer = new Transformer.Builder().setContext(context).build();
+    Transformer transformer = new Transformer.Builder(context).build();
     runTransformer(context, transformer, MP4_ASSET_URI_STRING, /* timeoutSeconds= */ 120);
   }
 }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/FrameworkMuxer.java
Patch:
@@ -61,7 +61,7 @@ public FrameworkMuxer create(ParcelFileDescriptor parcelFileDescriptor, String o
     public boolean supportsOutputMimeType(String mimeType) {
       try {
         mimeTypeToMuxerOutputFormat(mimeType);
-      } catch (IllegalStateException e) {
+      } catch (IllegalArgumentException e) {
         return false;
       }
       return true;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerBaseRenderer.java
Patch:
@@ -29,7 +29,6 @@
 import com.google.android.exoplayer2.source.SampleStream.ReadDataResult;
 import com.google.android.exoplayer2.util.MediaClock;
 import com.google.android.exoplayer2.util.MimeTypes;
-import com.google.errorprone.annotations.ForOverride;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
@@ -134,7 +133,6 @@ protected final void onStopped() {
     isRendererStarted = false;
   }
 
-  @ForOverride
   @EnsuresNonNullIf(expression = "samplePipeline", result = true)
   protected abstract boolean ensureConfigured() throws ExoPlaybackException;
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerNotificationManager.java
Patch:
@@ -343,7 +343,9 @@ public Builder(
      *
      * @param context The {@link Context}.
      * @param notificationId The id of the notification to be posted. Must be greater than 0.
-     * @param channelId The id of the notification channel.
+     * @param channelId The id of the notification channel of an existing notification channel or of
+     *     the channel that should be automatically created. In the latter case, {@link
+     *     #setChannelNameResourceId(int)} needs to be called as well.
      */
     public Builder(Context context, @IntRange(from = 1) int notificationId, String channelId) {
       checkArgument(notificationId > 0);

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -1694,7 +1694,9 @@ private static boolean evaluateDeviceNeedsSetOutputSurfaceWorkaround() {
       // https://github.com/google/ExoPlayer/issues/6899.
       // https://github.com/google/ExoPlayer/issues/8014.
       // https://github.com/google/ExoPlayer/issues/8329.
+      // https://github.com/google/ExoPlayer/issues/9710.
       switch (Util.DEVICE) {
+        case "aquaman":
         case "dangal":
         case "dangalUHD":
         case "dangalFHD":

File: demos/cast/src/main/java/com/google/android/exoplayer2/castdemo/PlayerManager.java
Patch:
@@ -28,7 +28,6 @@
 import com.google.android.exoplayer2.TracksInfo;
 import com.google.android.exoplayer2.ext.cast.CastPlayer;
 import com.google.android.exoplayer2.ext.cast.SessionAvailabilityListener;
-import com.google.android.exoplayer2.ui.PlayerView;
 import com.google.android.exoplayer2.ui.StyledPlayerControlView;
 import com.google.android.exoplayer2.ui.StyledPlayerView;
 import com.google.android.gms.cast.framework.CastContext;
@@ -67,7 +66,7 @@ interface Listener {
    *
    * @param context A {@link Context}.
    * @param listener A {@link Listener} for queue position changes.
-   * @param playerView The {@link PlayerView} for playback.
+   * @param playerView The {@link StyledPlayerView} for playback.
    * @param castContext The {@link CastContext}.
    */
   public PlayerManager(

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/video/MediaCodecVideoRenderer.java
Patch:
@@ -1697,7 +1697,9 @@ private static boolean evaluateDeviceNeedsSetOutputSurfaceWorkaround() {
       // https://github.com/google/ExoPlayer/issues/6899.
       // https://github.com/google/ExoPlayer/issues/8014.
       // https://github.com/google/ExoPlayer/issues/8329.
+      // https://github.com/google/ExoPlayer/issues/9710.
       switch (Util.DEVICE) {
+        case "aquaman":
         case "dangal":
         case "dangalUHD":
         case "dangalFHD":

File: demos/cast/src/main/java/androidx/media3/demo/cast/PlayerManager.java
Patch:
@@ -28,7 +28,6 @@
 import androidx.media3.common.Timeline;
 import androidx.media3.common.TracksInfo;
 import androidx.media3.exoplayer.ExoPlayer;
-import androidx.media3.ui.PlayerView;
 import androidx.media3.ui.StyledPlayerControlView;
 import androidx.media3.ui.StyledPlayerView;
 import com.google.android.gms.cast.framework.CastContext;
@@ -67,7 +66,7 @@ interface Listener {
    *
    * @param context A {@link Context}.
    * @param listener A {@link Listener} for queue position changes.
-   * @param playerView The {@link PlayerView} for playback.
+   * @param playerView The {@link StyledPlayerView} for playback.
    * @param castContext The {@link CastContext}.
    */
   public PlayerManager(

File: libraries/transformer/src/test/java/androidx/media3/transformer/TransformerBuilderTest.java
Patch:
@@ -30,10 +30,10 @@
 public class TransformerBuilderTest {
 
   @Test
-  public void setContainerMimeType_unsupportedMimeType_throws() {
+  public void setOutputMimeType_unsupportedMimeType_throws() {
     assertThrows(
         IllegalStateException.class,
-        () -> new Transformer.Builder().setContainerMimeType(MimeTypes.VIDEO_FLV).build());
+        () -> new Transformer.Builder().setOutputMimeType(MimeTypes.VIDEO_FLV).build());
   }
 
   @Test

File: libraries/transformer/src/androidTest/java/androidx/media3/transformer/RepeatedTranscodeTransformationTest.java
Patch:
@@ -29,7 +29,7 @@
 
 /** Tests repeated transcoding operations (as a stress test and to help reproduce flakiness). */
 @RunWith(AndroidJUnit4.class)
-@Ignore("Internal - b/206914753")
+@Ignore("Internal - b/206917996")
 public final class RepeatedTranscodeTransformationTest {
 
   private static final int TRANSCODE_COUNT = 10;

File: demos/gl/src/main/java/androidx/media3/demo/gl/BitmapOverlayVideoProcessor.java
Patch:
@@ -88,6 +88,7 @@ public void initialize() {
     } catch (IOException e) {
       throw new IllegalStateException(e);
     }
+    program.use();
     GlUtil.Attribute[] attributes = program.getAttributes();
     for (GlUtil.Attribute attribute : attributes) {
       if (attribute.name.equals("a_position")) {
@@ -142,7 +143,6 @@ public void draw(int frameTexture, long frameTimestampUs, float[] transformMatri
     // Run the shader program.
     GlUtil.Uniform[] uniforms = checkNotNull(this.uniforms);
     GlUtil.Attribute[] attributes = checkNotNull(this.attributes);
-    checkNotNull(program).use();
     for (GlUtil.Uniform uniform : uniforms) {
       switch (uniform.name) {
         case "tex_sampler_0":

File: libraries/ui/src/main/java/androidx/media3/ui/StyledPlayerControlView.java
Patch:
@@ -2077,6 +2077,7 @@ public void onTrackSelection(String subtext) {
 
     @Override
     public void init(List<TrackInformation> trackInformations) {
+      this.tracks = trackInformations;
       // Update subtext in settings menu with current audio track selection.
       TrackSelectionParameters params = checkNotNull(player).getTrackSelectionParameters();
       if (trackInformations.isEmpty()) {
@@ -2099,7 +2100,6 @@ public void init(List<TrackInformation> trackInformations) {
           }
         }
       }
-      this.tracks = trackInformations;
     }
   }
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/Transformation.java
Patch:
@@ -28,7 +28,7 @@
   public final boolean removeVideo;
   public final boolean flattenForSlowMotion;
   public final int outputHeight;
-  public final String outputMimeType;
+  public final String containerMimeType;
   @Nullable public final String audioMimeType;
   @Nullable public final String videoMimeType;
 
@@ -37,14 +37,14 @@ public Transformation(
       boolean removeVideo,
       boolean flattenForSlowMotion,
       int outputHeight,
-      String outputMimeType,
+      String containerMimeType,
       @Nullable String audioMimeType,
       @Nullable String videoMimeType) {
     this.removeAudio = removeAudio;
     this.removeVideo = removeVideo;
     this.flattenForSlowMotion = flattenForSlowMotion;
     this.outputHeight = outputHeight;
-    this.outputMimeType = outputMimeType;
+    this.containerMimeType = containerMimeType;
     this.audioMimeType = audioMimeType;
     this.videoMimeType = videoMimeType;
   }

File: libraries/transformer/src/test/java/androidx/media3/transformer/TransformerBuilderTest.java
Patch:
@@ -30,10 +30,10 @@
 public class TransformerBuilderTest {
 
   @Test
-  public void setOutputMimeType_unsupportedMimeType_throws() {
+  public void setContainerMimeType_unsupportedMimeType_throws() {
     assertThrows(
         IllegalStateException.class,
-        () -> new Transformer.Builder().setOutputMimeType(MimeTypes.VIDEO_FLV).build());
+        () -> new Transformer.Builder().setContainerMimeType(MimeTypes.VIDEO_FLV).build());
   }
 
   @Test

File: libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/RtpH264Reader.java
Patch:
@@ -259,7 +259,7 @@ private void processFragmentationUnitPacket(ParsableByteArray data, int packetSe
       fuScratchBuffer.setPosition(1);
     } else {
       // Check that this packet is in the sequence of the previous packet.
-      int expectedSequenceNumber = (previousSequenceNumber + 1) % RtpPacket.MAX_SEQUENCE_NUMBER;
+      int expectedSequenceNumber = RtpPacket.getNextSequenceNumber(previousSequenceNumber);
       if (packetSequenceNumber != expectedSequenceNumber) {
         Log.w(
             TAG,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/DefaultMediaCodecAdapterFactory.java
Patch:
@@ -53,6 +53,7 @@ public final class DefaultMediaCodecAdapterFactory implements MediaCodecAdapter.
 
   public DefaultMediaCodecAdapterFactory() {
     asynchronousMode = MODE_DEFAULT;
+    enableImmediateCodecStartAfterFlush = true;
   }
 
   /**
@@ -94,7 +95,7 @@ public void experimentalSetSynchronizeCodecInteractionsWithQueueingEnabled(boole
    * playback thread, when operating the codec in asynchronous mode. If disabled, {@link
    * MediaCodec#start} will be called by the callback thread after pending callbacks are handled.
    *
-   * <p>By default, this feature is disabled.
+   * <p>By default, this feature is enabled.
    *
    * <p>This method is experimental, and will be renamed or removed in a future release.
    *

File: libraries/common/src/test/java/androidx/media3/common/MediaMetadataTest.java
Patch:
@@ -64,6 +64,7 @@ public void builder_minimal_correctDefaults() {
     assertThat(mediaMetadata.totalDiscCount).isNull();
     assertThat(mediaMetadata.genre).isNull();
     assertThat(mediaMetadata.compilation).isNull();
+    assertThat(mediaMetadata.station).isNull();
     assertThat(mediaMetadata.extras).isNull();
   }
 
@@ -149,6 +150,7 @@ private static MediaMetadata getFullyPopulatedMediaMetadata() {
         .setTotalDiscCount(3)
         .setGenre("Pop")
         .setCompilation("Amazing songs.")
+        .setStation("radio station")
         .setExtras(extras)
         .build();
   }

File: libraries/transformer/src/main/java/androidx/media3/transformer/AudioSamplePipeline.java
Patch:
@@ -88,7 +88,7 @@ public AudioSamplePipeline(
     try {
       this.decoder = MediaCodecAdapterWrapper.createForAudioDecoding(decoderInputFormat);
     } catch (IOException e) {
-      // TODO (internal b/184262323): Assign an adequate error code.
+      // TODO(internal b/192864511): Assign a specific error code.
       throw ExoPlaybackException.createForRenderer(
           e,
           TAG,

File: libraries/transformer/src/main/java/androidx/media3/transformer/VideoSamplePipeline.java
Patch:
@@ -80,7 +80,7 @@ public VideoSamplePipeline(
                   .build(),
               ImmutableMap.of());
     } catch (IOException e) {
-      // TODO (internal b/184262323): Assign an adequate error code.
+      // TODO(internal b/192864511): Assign a specific error code.
       throw createRendererException(
           e, rendererIndex, decoderInputFormat, PlaybackException.ERROR_CODE_UNSPECIFIED);
     }

File: libraries/ui/src/main/java/androidx/media3/ui/StyledPlayerControlView.java
Patch:
@@ -2167,7 +2167,9 @@ public void onBindViewHolder(SubSettingViewHolder holder, int position) {
               TrackSelectionParameters trackSelectionParameters =
                   player.getTrackSelectionParameters();
               TrackSelectionOverrides overrides =
-                  new TrackSelectionOverrides.Builder()
+                  trackSelectionParameters
+                      .trackSelectionOverrides
+                      .buildUpon()
                       .setOverrideForType(
                           new TrackSelectionOverride(
                               track.trackGroup, ImmutableList.of(track.trackIndex)))

File: libraries/cast/src/test/java/androidx/media3/cast/CastPlayerTest.java
Patch:
@@ -392,7 +392,6 @@ public void setMediaItems_doNotReset_callsRemoteMediaClient() {
     assertThat(mediaQueueItems[1].getMedia().getContentId()).isEqualTo(uri2);
   }
 
-  @SuppressWarnings("deprecation") // Verifies deprecated callback being called correctly.
   @Test
   public void setMediaItems_replaceExistingPlaylist_notifiesMediaItemTransition() {
     List<MediaItem> firstPlaylist = new ArrayList<>();

File: libraries/common/src/main/java/androidx/media3/common/text/Cue.java
Patch:
@@ -366,7 +366,6 @@ public Cue(
    * @deprecated Use {@link Builder}.
    */
   @UnstableApi
-  @SuppressWarnings("deprecation")
   @Deprecated
   public Cue(
       CharSequence text,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/DefaultLoadControl.java
Patch:
@@ -265,7 +265,6 @@ public DefaultLoadControl build() {
   private boolean isLoading;
 
   /** Constructs a new instance, using the {@code DEFAULT_*} constants defined in this class. */
-  @SuppressWarnings("deprecation")
   public DefaultLoadControl() {
     this(
         new DefaultAllocator(true, C.DEFAULT_BUFFER_SEGMENT_SIZE),

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/SimpleExoPlayer.java
Patch:
@@ -407,7 +407,6 @@ public SimpleExoPlayer build() {
 
   /** @deprecated Use the {@link ExoPlayer.Builder}. */
   @Deprecated
-  @SuppressWarnings("deprecation")
   protected SimpleExoPlayer(
       Context context,
       RenderersFactory renderersFactory,
@@ -439,7 +438,6 @@ protected SimpleExoPlayer(Builder builder) {
   }
 
   /** @param builder The {@link ExoPlayer.Builder} to obtain all construction parameters. */
-  @SuppressWarnings("deprecation")
   /* package */ SimpleExoPlayer(ExoPlayer.Builder builder) {
     constructorFinished = new ConditionVariable();
     try {

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaControllerSurfaceSizeChangeTest.java
Patch:
@@ -52,9 +52,8 @@
 import org.junit.runners.Parameterized;
 
 /**
- * A class that tests whether {@link MediaController.Listener#onSurfaceSizeChanged(int, int)} is
- * called when calling {@link MediaController#setVideoSurface(Surface)} and other surface related
- * methods.
+ * A class that tests whether {@link Player.Listener#onSurfaceSizeChanged(int, int)} is called when
+ * calling {@link MediaController#setVideoSurface(Surface)} and other surface related methods.
  */
 @RunWith(Parameterized.class)
 @LargeTest

File: libraries/test_session_current/src/main/java/androidx/media3/session/RemoteMediaController.java
Patch:
@@ -340,7 +340,7 @@ private void disconnect() {
    * @param connectionHints connection hints
    * @param waitForConnection true if this method needs to wait for the connection,
    */
-  void create(SessionToken token, Bundle connectionHints, boolean waitForConnection)
+  protected void create(SessionToken token, Bundle connectionHints, boolean waitForConnection)
       throws RemoteException {
     binder.create(
         /* isBrowser= */ false, controllerId, token.toBundle(), connectionHints, waitForConnection);

File: libraries/ui/src/main/java/androidx/media3/ui/PlayerControlView.java
Patch:
@@ -1224,7 +1224,6 @@ private void dispatchPlayPause(Player player) {
     }
   }
 
-  @SuppressWarnings("deprecation")
   private void dispatchPlay(Player player) {
     @State int state = player.getPlaybackState();
     if (state == Player.STATE_IDLE) {

File: libraries/ui_leanback/src/main/java/androidx/media3/ui/leanback/LeanbackPlayerAdapter.java
Patch:
@@ -136,8 +136,6 @@ public long getCurrentPosition() {
     return player.getPlaybackState() == Player.STATE_IDLE ? -1 : player.getCurrentPosition();
   }
 
-  // Calls deprecated method to provide backwards compatibility.
-  @SuppressWarnings("deprecation")
   @Override
   public void play() {
     if (player.getPlaybackState() == Player.STATE_IDLE) {

File: libraries/common/src/main/java/androidx/media3/common/TrackSelectionOverrides.java
Patch:
@@ -172,7 +172,8 @@ public int hashCode() {
       return trackGroup.hashCode() + 31 * trackIndices.hashCode();
     }
 
-    private @C.TrackType int getTrackType() {
+    /** Returns the {@link C.TrackType} of the overriden track group. */
+    public @C.TrackType int getTrackType() {
       return MimeTypes.getTrackType(trackGroup.getFormat(0).sampleMimeType);
     }
 

File: libraries/test_utils/src/main/java/androidx/media3/test/utils/WebServerDispatcher.java
Patch:
@@ -263,7 +263,7 @@ public MockResponse dispatch(RecordedRequest request) {
     Resource resource = checkNotNull(resourcesByPath.get(requestPath));
     byte[] resourceData = resource.getData();
     if (resource.supportsRangeRequests()) {
-      response.setHeader("Accept-ranges", "bytes");
+      response.setHeader("Accept-Ranges", "bytes");
     }
     @Nullable ImmutableMap<String, Float> acceptEncodingHeader = getAcceptEncodingHeader(request);
     @Nullable String preferredContentCoding;

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/TransformerBuilderTest.java
Patch:
@@ -30,10 +30,10 @@
 public class TransformerBuilderTest {
 
   @Test
-  public void setContainerMimeType_unsupportedMimeType_throws() {
+  public void setOutputMimeType_unsupportedMimeType_throws() {
     assertThrows(
         IllegalStateException.class,
-        () -> new Transformer.Builder().setContainerMimeType(MimeTypes.VIDEO_FLV).build());
+        () -> new Transformer.Builder().setOutputMimeType(MimeTypes.VIDEO_FLV).build());
   }
 
   @Test

File: demos/gl/src/main/java/com/google/android/exoplayer2/gldemo/BitmapOverlayVideoProcessor.java
Patch:
@@ -88,6 +88,7 @@ public void initialize() {
     } catch (IOException e) {
       throw new IllegalStateException(e);
     }
+    program.use();
     GlUtil.Attribute[] attributes = program.getAttributes();
     for (GlUtil.Attribute attribute : attributes) {
       if (attribute.name.equals("a_position")) {
@@ -142,7 +143,6 @@ public void draw(int frameTexture, long frameTimestampUs, float[] transformMatri
     // Run the shader program.
     GlUtil.Uniform[] uniforms = checkNotNull(this.uniforms);
     GlUtil.Attribute[] attributes = checkNotNull(this.attributes);
-    checkNotNull(program).use();
     for (GlUtil.Uniform uniform : uniforms) {
       switch (uniform.name) {
         case "tex_sampler_0":

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -2075,6 +2075,7 @@ public void onTrackSelection(String subtext) {
 
     @Override
     public void init(List<TrackInformation> trackInformations) {
+      this.tracks = trackInformations;
       // Update subtext in settings menu with current audio track selection.
       TrackSelectionParameters params = checkNotNull(player).getTrackSelectionParameters();
       if (trackInformations.isEmpty()) {
@@ -2097,7 +2098,6 @@ public void init(List<TrackInformation> trackInformations) {
           }
         }
       }
-      this.tracks = trackInformations;
     }
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/DefaultMediaCodecAdapterFactory.java
Patch:
@@ -51,6 +51,7 @@ public final class DefaultMediaCodecAdapterFactory implements MediaCodecAdapter.
 
   public DefaultMediaCodecAdapterFactory() {
     asynchronousMode = MODE_DEFAULT;
+    enableImmediateCodecStartAfterFlush = true;
   }
 
   /**
@@ -92,7 +93,7 @@ public void experimentalSetSynchronizeCodecInteractionsWithQueueingEnabled(boole
    * playback thread, when operating the codec in asynchronous mode. If disabled, {@link
    * MediaCodec#start} will be called by the callback thread after pending callbacks are handled.
    *
-   * <p>By default, this feature is disabled.
+   * <p>By default, this feature is enabled.
    *
    * <p>This method is experimental, and will be renamed or removed in a future release.
    *

File: library/common/src/test/java/com/google/android/exoplayer2/MediaMetadataTest.java
Patch:
@@ -64,6 +64,7 @@ public void builder_minimal_correctDefaults() {
     assertThat(mediaMetadata.totalDiscCount).isNull();
     assertThat(mediaMetadata.genre).isNull();
     assertThat(mediaMetadata.compilation).isNull();
+    assertThat(mediaMetadata.station).isNull();
     assertThat(mediaMetadata.extras).isNull();
   }
 
@@ -149,6 +150,7 @@ private static MediaMetadata getFullyPopulatedMediaMetadata() {
         .setTotalDiscCount(3)
         .setGenre("Pop")
         .setCompilation("Amazing songs.")
+        .setStation("radio station")
         .setExtras(extras)
         .build();
   }

File: library/transformer/src/androidTest/java/com/google/android/exoplayer2/transformer/RepeatedTranscodeTransformationTest.java
Patch:
@@ -29,7 +29,7 @@
 
 /** Tests repeated transcoding operations (as a stress test and to help reproduce flakiness). */
 @RunWith(AndroidJUnit4.class)
-@Ignore("Internal - b/206914753")
+@Ignore("Internal - b/206917996")
 public final class RepeatedTranscodeTransformationTest {
 
   private static final int TRANSCODE_COUNT = 10;

File: demos/gl/src/main/java/com/google/android/exoplayer2/gldemo/BitmapOverlayVideoProcessor.java
Patch:
@@ -88,6 +88,7 @@ public void initialize() {
     } catch (IOException e) {
       throw new IllegalStateException(e);
     }
+    program.use();
     GlUtil.Attribute[] attributes = program.getAttributes();
     for (GlUtil.Attribute attribute : attributes) {
       if (attribute.name.equals("a_position")) {
@@ -142,7 +143,6 @@ public void draw(int frameTexture, long frameTimestampUs, float[] transformMatri
     // Run the shader program.
     GlUtil.Uniform[] uniforms = checkNotNull(this.uniforms);
     GlUtil.Attribute[] attributes = checkNotNull(this.attributes);
-    checkNotNull(program).use();
     for (GlUtil.Uniform uniform : uniforms) {
       switch (uniform.name) {
         case "tex_sampler_0":

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -2075,6 +2075,7 @@ public void onTrackSelection(String subtext) {
 
     @Override
     public void init(List<TrackInformation> trackInformations) {
+      this.tracks = trackInformations;
       // Update subtext in settings menu with current audio track selection.
       TrackSelectionParameters params = checkNotNull(player).getTrackSelectionParameters();
       if (trackInformations.isEmpty()) {
@@ -2097,7 +2098,6 @@ public void init(List<TrackInformation> trackInformations) {
           }
         }
       }
-      this.tracks = trackInformations;
     }
   }
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformation.java
Patch:
@@ -28,7 +28,7 @@
   public final boolean removeVideo;
   public final boolean flattenForSlowMotion;
   public final int outputHeight;
-  public final String outputMimeType;
+  public final String containerMimeType;
   @Nullable public final String audioMimeType;
   @Nullable public final String videoMimeType;
 
@@ -37,14 +37,14 @@ public Transformation(
       boolean removeVideo,
       boolean flattenForSlowMotion,
       int outputHeight,
-      String outputMimeType,
+      String containerMimeType,
       @Nullable String audioMimeType,
       @Nullable String videoMimeType) {
     this.removeAudio = removeAudio;
     this.removeVideo = removeVideo;
     this.flattenForSlowMotion = flattenForSlowMotion;
     this.outputHeight = outputHeight;
-    this.outputMimeType = outputMimeType;
+    this.containerMimeType = containerMimeType;
     this.audioMimeType = audioMimeType;
     this.videoMimeType = videoMimeType;
   }

File: library/transformer/src/test/java/com/google/android/exoplayer2/transformer/TransformerBuilderTest.java
Patch:
@@ -30,10 +30,10 @@
 public class TransformerBuilderTest {
 
   @Test
-  public void setOutputMimeType_unsupportedMimeType_throws() {
+  public void setContainerMimeType_unsupportedMimeType_throws() {
     assertThrows(
         IllegalStateException.class,
-        () -> new Transformer.Builder().setOutputMimeType(MimeTypes.VIDEO_FLV).build());
+        () -> new Transformer.Builder().setContainerMimeType(MimeTypes.VIDEO_FLV).build());
   }
 
   @Test

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpH264Reader.java
Patch:
@@ -259,7 +259,7 @@ private void processFragmentationUnitPacket(ParsableByteArray data, int packetSe
       fuScratchBuffer.setPosition(1);
     } else {
       // Check that this packet is in the sequence of the previous packet.
-      int expectedSequenceNumber = (previousSequenceNumber + 1) % RtpPacket.MAX_SEQUENCE_NUMBER;
+      int expectedSequenceNumber = RtpPacket.getNextSequenceNumber(previousSequenceNumber);
       if (packetSequenceNumber != expectedSequenceNumber) {
         Log.w(
             TAG,

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/DefaultMediaCodecAdapterFactory.java
Patch:
@@ -51,6 +51,7 @@ public final class DefaultMediaCodecAdapterFactory implements MediaCodecAdapter.
 
   public DefaultMediaCodecAdapterFactory() {
     asynchronousMode = MODE_DEFAULT;
+    enableImmediateCodecStartAfterFlush = true;
   }
 
   /**
@@ -92,7 +93,7 @@ public void experimentalSetSynchronizeCodecInteractionsWithQueueingEnabled(boole
    * playback thread, when operating the codec in asynchronous mode. If disabled, {@link
    * MediaCodec#start} will be called by the callback thread after pending callbacks are handled.
    *
-   * <p>By default, this feature is disabled.
+   * <p>By default, this feature is enabled.
    *
    * <p>This method is experimental, and will be renamed or removed in a future release.
    *

File: library/common/src/test/java/com/google/android/exoplayer2/MediaMetadataTest.java
Patch:
@@ -64,6 +64,7 @@ public void builder_minimal_correctDefaults() {
     assertThat(mediaMetadata.totalDiscCount).isNull();
     assertThat(mediaMetadata.genre).isNull();
     assertThat(mediaMetadata.compilation).isNull();
+    assertThat(mediaMetadata.station).isNull();
     assertThat(mediaMetadata.extras).isNull();
   }
 
@@ -149,6 +150,7 @@ private static MediaMetadata getFullyPopulatedMediaMetadata() {
         .setTotalDiscCount(3)
         .setGenre("Pop")
         .setCompilation("Amazing songs.")
+        .setStation("radio station")
         .setExtras(extras)
         .build();
   }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/AudioSamplePipeline.java
Patch:
@@ -88,7 +88,7 @@ public AudioSamplePipeline(
     try {
       this.decoder = MediaCodecAdapterWrapper.createForAudioDecoding(decoderInputFormat);
     } catch (IOException e) {
-      // TODO (internal b/184262323): Assign an adequate error code.
+      // TODO(internal b/192864511): Assign a specific error code.
       throw ExoPlaybackException.createForRenderer(
           e,
           TAG,

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/VideoSamplePipeline.java
Patch:
@@ -80,7 +80,7 @@ public VideoSamplePipeline(
                   .build(),
               ImmutableMap.of());
     } catch (IOException e) {
-      // TODO (internal b/184262323): Assign an adequate error code.
+      // TODO(internal b/192864511): Assign a specific error code.
       throw createRendererException(
           e, rendererIndex, decoderInputFormat, PlaybackException.ERROR_CODE_UNSPECIFIED);
     }

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -2165,7 +2165,9 @@ public void onBindViewHolder(SubSettingViewHolder holder, int position) {
               TrackSelectionParameters trackSelectionParameters =
                   player.getTrackSelectionParameters();
               TrackSelectionOverrides overrides =
-                  new TrackSelectionOverrides.Builder()
+                  trackSelectionParameters
+                      .trackSelectionOverrides
+                      .buildUpon()
                       .setOverrideForType(
                           new TrackSelectionOverride(
                               track.trackGroup, ImmutableList.of(track.trackIndex)))

File: extensions/cast/src/test/java/com/google/android/exoplayer2/ext/cast/CastPlayerTest.java
Patch:
@@ -392,7 +392,6 @@ public void setMediaItems_doNotReset_callsRemoteMediaClient() {
     assertThat(mediaQueueItems[1].getMedia().getContentId()).isEqualTo(uri2);
   }
 
-  @SuppressWarnings("deprecation") // Verifies deprecated callback being called correctly.
   @Test
   public void setMediaItems_replaceExistingPlaylist_notifiesMediaItemTransition() {
     List<MediaItem> firstPlaylist = new ArrayList<>();

File: extensions/leanback/src/main/java/com/google/android/exoplayer2/ext/leanback/LeanbackPlayerAdapter.java
Patch:
@@ -134,8 +134,6 @@ public long getCurrentPosition() {
     return player.getPlaybackState() == Player.STATE_IDLE ? -1 : player.getCurrentPosition();
   }
 
-  // Calls deprecated method to provide backwards compatibility.
-  @SuppressWarnings("deprecation")
   @Override
   public void play() {
     if (player.getPlaybackState() == Player.STATE_IDLE) {

File: library/common/src/main/java/com/google/android/exoplayer2/text/Cue.java
Patch:
@@ -362,7 +362,6 @@ public Cue(
    * @param textSize See {@link #textSize}.
    * @deprecated Use {@link Builder}.
    */
-  @SuppressWarnings("deprecation")
   @Deprecated
   public Cue(
       CharSequence text,

File: library/core/src/main/java/com/google/android/exoplayer2/DefaultLoadControl.java
Patch:
@@ -262,7 +262,6 @@ public DefaultLoadControl build() {
   private boolean isLoading;
 
   /** Constructs a new instance, using the {@code DEFAULT_*} constants defined in this class. */
-  @SuppressWarnings("deprecation")
   public DefaultLoadControl() {
     this(
         new DefaultAllocator(true, C.DEFAULT_BUFFER_SEGMENT_SIZE),

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -396,7 +396,6 @@ public SimpleExoPlayer build() {
 
   /** @deprecated Use the {@link ExoPlayer.Builder}. */
   @Deprecated
-  @SuppressWarnings("deprecation")
   protected SimpleExoPlayer(
       Context context,
       RenderersFactory renderersFactory,
@@ -428,7 +427,6 @@ protected SimpleExoPlayer(Builder builder) {
   }
 
   /** @param builder The {@link ExoPlayer.Builder} to obtain all construction parameters. */
-  @SuppressWarnings("deprecation")
   /* package */ SimpleExoPlayer(ExoPlayer.Builder builder) {
     constructorFinished = new ConditionVariable();
     try {

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.java
Patch:
@@ -1222,7 +1222,6 @@ private void dispatchPlayPause(Player player) {
     }
   }
 
-  @SuppressWarnings("deprecation")
   private void dispatchPlay(Player player) {
     @State int state = player.getPlaybackState();
     if (state == Player.STATE_IDLE) {

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -2165,7 +2165,9 @@ public void onBindViewHolder(SubSettingViewHolder holder, int position) {
               TrackSelectionParameters trackSelectionParameters =
                   player.getTrackSelectionParameters();
               TrackSelectionOverrides overrides =
-                  new TrackSelectionOverrides.Builder()
+                  trackSelectionParameters
+                      .trackSelectionOverrides
+                      .buildUpon()
                       .setOverrideForType(
                           new TrackSelectionOverride(
                               track.trackGroup, ImmutableList.of(track.trackIndex)))

File: extensions/cast/src/test/java/com/google/android/exoplayer2/ext/cast/CastPlayerTest.java
Patch:
@@ -392,7 +392,6 @@ public void setMediaItems_doNotReset_callsRemoteMediaClient() {
     assertThat(mediaQueueItems[1].getMedia().getContentId()).isEqualTo(uri2);
   }
 
-  @SuppressWarnings("deprecation") // Verifies deprecated callback being called correctly.
   @Test
   public void setMediaItems_replaceExistingPlaylist_notifiesMediaItemTransition() {
     List<MediaItem> firstPlaylist = new ArrayList<>();

File: extensions/leanback/src/main/java/com/google/android/exoplayer2/ext/leanback/LeanbackPlayerAdapter.java
Patch:
@@ -134,8 +134,6 @@ public long getCurrentPosition() {
     return player.getPlaybackState() == Player.STATE_IDLE ? -1 : player.getCurrentPosition();
   }
 
-  // Calls deprecated method to provide backwards compatibility.
-  @SuppressWarnings("deprecation")
   @Override
   public void play() {
     if (player.getPlaybackState() == Player.STATE_IDLE) {

File: library/common/src/main/java/com/google/android/exoplayer2/text/Cue.java
Patch:
@@ -362,7 +362,6 @@ public Cue(
    * @param textSize See {@link #textSize}.
    * @deprecated Use {@link Builder}.
    */
-  @SuppressWarnings("deprecation")
   @Deprecated
   public Cue(
       CharSequence text,

File: library/core/src/main/java/com/google/android/exoplayer2/DefaultLoadControl.java
Patch:
@@ -262,7 +262,6 @@ public DefaultLoadControl build() {
   private boolean isLoading;
 
   /** Constructs a new instance, using the {@code DEFAULT_*} constants defined in this class. */
-  @SuppressWarnings("deprecation")
   public DefaultLoadControl() {
     this(
         new DefaultAllocator(true, C.DEFAULT_BUFFER_SEGMENT_SIZE),

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -396,7 +396,6 @@ public SimpleExoPlayer build() {
 
   /** @deprecated Use the {@link ExoPlayer.Builder}. */
   @Deprecated
-  @SuppressWarnings("deprecation")
   protected SimpleExoPlayer(
       Context context,
       RenderersFactory renderersFactory,
@@ -428,7 +427,6 @@ protected SimpleExoPlayer(Builder builder) {
   }
 
   /** @param builder The {@link ExoPlayer.Builder} to obtain all construction parameters. */
-  @SuppressWarnings("deprecation")
   /* package */ SimpleExoPlayer(ExoPlayer.Builder builder) {
     constructorFinished = new ConditionVariable();
     try {

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.java
Patch:
@@ -1222,7 +1222,6 @@ private void dispatchPlayPause(Player player) {
     }
   }
 
-  @SuppressWarnings("deprecation")
   private void dispatchPlay(Player player) {
     @State int state = player.getPlaybackState();
     if (state == Player.STATE_IDLE) {

File: library/core/src/test/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecAdapterTest.java
Patch:
@@ -54,7 +54,8 @@ public void setUp() throws Exception {
         new AsynchronousMediaCodecAdapter.Factory(
                 /* callbackThreadSupplier= */ () -> callbackThread,
                 /* queueingThreadSupplier= */ () -> queueingThread,
-                /* synchronizeCodecInteractionsWithQueueing= */ false)
+                /* synchronizeCodecInteractionsWithQueueing= */ false,
+                /* enableImmediateCodecStartAfterFlush= */ false)
             .createAdapter(configuration);
     bufferInfo = new MediaCodec.BufferInfo();
     // After starting the MediaCodec, the ShadowMediaCodec offers input buffer 0. We advance the

File: library/common/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelectionOverrides.java
Patch:
@@ -174,7 +174,8 @@ public int hashCode() {
       return trackGroup.hashCode() + 31 * trackIndices.hashCode();
     }
 
-    private @C.TrackType int getTrackType() {
+    /** Returns the {@link C.TrackType} of the overriden track group. */
+    public @C.TrackType int getTrackType() {
       return MimeTypes.getTrackType(trackGroup.getFormat(0).sampleMimeType);
     }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/WebServerDispatcher.java
Patch:
@@ -261,7 +261,7 @@ public MockResponse dispatch(RecordedRequest request) {
     Resource resource = checkNotNull(resourcesByPath.get(requestPath));
     byte[] resourceData = resource.getData();
     if (resource.supportsRangeRequests()) {
-      response.setHeader("Accept-ranges", "bytes");
+      response.setHeader("Accept-Ranges", "bytes");
     }
     @Nullable ImmutableMap<String, Float> acceptEncodingHeader = getAcceptEncodingHeader(request);
     @Nullable String preferredContentCoding;

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -982,6 +982,7 @@ public ExoPlayer build() {
    * {@link ExoPlaybackException}.
    */
   @Override
+  @Nullable
   ExoPlaybackException getPlayerError();
 
   /**

File: library/common/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelectionOverrides.java
Patch:
@@ -174,7 +174,8 @@ public int hashCode() {
       return trackGroup.hashCode() + 31 * trackIndices.hashCode();
     }
 
-    private @C.TrackType int getTrackType() {
+    /** Returns the {@link C.TrackType} of the overriden track group. */
+    public @C.TrackType int getTrackType() {
       return MimeTypes.getTrackType(trackGroup.getFormat(0).sampleMimeType);
     }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/WebServerDispatcher.java
Patch:
@@ -261,7 +261,7 @@ public MockResponse dispatch(RecordedRequest request) {
     Resource resource = checkNotNull(resourcesByPath.get(requestPath));
     byte[] resourceData = resource.getData();
     if (resource.supportsRangeRequests()) {
-      response.setHeader("Accept-ranges", "bytes");
+      response.setHeader("Accept-Ranges", "bytes");
     }
     @Nullable ImmutableMap<String, Float> acceptEncodingHeader = getAcceptEncodingHeader(request);
     @Nullable String preferredContentCoding;

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/ExoPlayer.java
Patch:
@@ -1018,6 +1018,7 @@ public ExoPlayer build() {
    * {@link ExoPlaybackException}.
    */
   @Override
+  @Nullable
   ExoPlaybackException getPlayerError();
 
   /**

File: libraries/common/src/main/java/androidx/media3/common/Player.java
Patch:
@@ -2136,7 +2136,7 @@ default void onPlaylistMetadataChanged(MediaMetadata mediaMetadata) {}
   /** Returns the index of the period currently being played. */
   int getCurrentPeriodIndex();
 
-  /** @deprecated Use {@link #getCurrentMediaItem()} instead. */
+  /** @deprecated Use {@link #getCurrentMediaItemIndex()} instead. */
   @UnstableApi
   @Deprecated
   int getCurrentWindowIndex();

File: libraries/exoplayer/src/test/java/androidx/media3/exoplayer/mediacodec/AsynchronousMediaCodecAdapterTest.java
Patch:
@@ -54,7 +54,8 @@ public void setUp() throws Exception {
         new AsynchronousMediaCodecAdapter.Factory(
                 /* callbackThreadSupplier= */ () -> callbackThread,
                 /* queueingThreadSupplier= */ () -> queueingThread,
-                /* synchronizeCodecInteractionsWithQueueing= */ false)
+                /* synchronizeCodecInteractionsWithQueueing= */ false,
+                /* enableImmediateCodecStartAfterFlush= */ false)
             .createAdapter(configuration);
     bufferInfo = new MediaCodec.BufferInfo();
     // After starting the MediaCodec, the ShadowMediaCodec offers input buffer 0. We advance the

File: libraries/session/src/main/java/androidx/media3/session/MediaControllerImplLegacy.java
Patch:
@@ -1305,14 +1305,14 @@ private void handleNewLegacyParameters(
             controllerCompat.getFlags(),
             controllerCompat.isSessionReady(),
             controllerCompat.getRatingType(),
-            instance.timeDiffMs);
+            instance.getTimeDiffMs());
     Pair<@NullableType Integer, @NullableType Integer> reasons =
         calculateDiscontinuityAndTransitionReason(
             legacyPlayerInfo,
             controllerInfo,
             newLegacyPlayerInfo,
             newControllerInfo,
-            instance.timeDiffMs);
+            instance.getTimeDiffMs());
     updateControllerInfo(
         notifyConnected,
         newLegacyPlayerInfo,

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -289,6 +289,7 @@ public void setVideoScalingMode(@C.VideoScalingMode int scalingMode) {
 
   @Override
   public void signalEndOfInputStream() {
+    maybeBlockOnQueueing();
     codec.signalEndOfInputStream();
   }
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerAudioRenderer.java
Patch:
@@ -316,6 +316,7 @@ private void feedEncoder(MediaCodecAdapterWrapper encoder, ByteBuffer inputBuffe
 
   private void queueEndOfStreamToEncoder(MediaCodecAdapterWrapper encoder) {
     checkState(checkNotNull(encoderInputBuffer.data).position() == 0);
+    encoderInputBuffer.timeUs = nextEncoderInputBufferTimeUs;
     encoderInputBuffer.addFlag(C.BUFFER_FLAG_END_OF_STREAM);
     encoderInputBuffer.flip();
     // Queuing EOS should only occur with an empty buffer.

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaBrowserListenerTest.java
Patch:
@@ -183,7 +183,7 @@ public void getChildren() throws Exception {
             .postAndSync(() -> browser.getChildren(parentId, page, pageSize, params))
             .get(TIMEOUT_MS, MILLISECONDS);
     assertThat(result.resultCode).isEqualTo(RESULT_SUCCESS);
-    assertThat(result.params).isNull();
+    MediaTestUtils.assertLibraryParamsEquals(params, result.params);
 
     MediaTestUtils.assertPaginatedListHasIds(
         result.value, MediaBrowserConstants.GET_CHILDREN_RESULT, page, pageSize);
@@ -205,7 +205,7 @@ public void getChildren_withLongList() throws Exception {
             .postAndSync(() -> browser.getChildren(parentId, page, pageSize, params))
             .get(LONG_TIMEOUT_MS, MILLISECONDS);
     assertThat(result.resultCode).isEqualTo(RESULT_SUCCESS);
-    assertThat(result.params).isNull();
+    MediaTestUtils.assertLibraryParamsEquals(params, result.params);
 
     assertThat(result.value).hasSize(LONG_LIST_COUNT);
     for (int i = 0; i < result.value.size(); i++) {

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaLibrarySessionCallbackTest.java
Patch:
@@ -20,6 +20,7 @@
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 
 import android.content.Context;
+import androidx.annotation.Nullable;
 import androidx.media3.session.MediaLibraryService.LibraryParams;
 import androidx.media3.session.MediaLibraryService.MediaLibrarySession;
 import androidx.media3.session.MediaSession.ControllerInfo;
@@ -82,11 +83,11 @@ public ListenableFuture<LibraryResult<Void>> onSubscribe(
               MediaLibrarySession session,
               ControllerInfo browser,
               String parentId,
-              LibraryParams params) {
+              @Nullable LibraryParams params) {
             assertThat(parentId).isEqualTo(testParentId);
             MediaTestUtils.assertLibraryParamsEquals(testParams, params);
             latch.countDown();
-            return Futures.immediateFuture(LibraryResult.ofVoid());
+            return Futures.immediateFuture(LibraryResult.ofVoid(params));
           }
         };
 

File: libraries/test_session_current/src/androidTest/java/androidx/media3/session/MediaBrowserListenerWithMediaBrowserServiceCompatTest.java
Patch:
@@ -115,7 +115,7 @@ public void onChildrenChanged(
     remoteService.setProxyForTest(TEST_ON_CHILDREN_CHANGED_SUBSCRIBE_AND_UNSUBSCRIBE);
     MediaBrowser browser = createBrowser(listener);
 
-    LibraryResult resultForSubscribe =
+    LibraryResult<Void> resultForSubscribe =
         threadTestRule
             .getHandler()
             .postAndSync(() -> browser.subscribe(testParentId, null))
@@ -124,7 +124,7 @@ public void onChildrenChanged(
     remoteService.notifyChildrenChanged(testParentId);
     assertThat(latch.await(TIMEOUT_MS, MILLISECONDS)).isTrue();
 
-    LibraryResult resultForUnsubscribe =
+    LibraryResult<Void> resultForUnsubscribe =
         threadTestRule
             .getHandler()
             .postAndSync(() -> browser.unsubscribe(testParentId))

File: libraries/common/src/main/java/androidx/media3/common/MediaMetadata.java
Patch:
@@ -628,15 +628,15 @@ public MediaMetadata build() {
   /** Optional artwork data as a compressed byte array. */
   @Nullable public final byte[] artworkData;
   /** Optional {@link PictureType} of the artwork data. */
-  @Nullable @PictureType public final Integer artworkDataType;
+  @Nullable public final @PictureType Integer artworkDataType;
   /** Optional artwork {@link Uri}. */
   @Nullable public final Uri artworkUri;
   /** Optional track number. */
   @Nullable public final Integer trackNumber;
   /** Optional total number of tracks. */
   @Nullable public final Integer totalTrackCount;
   /** Optional {@link FolderType}. */
-  @Nullable @FolderType public final Integer folderType;
+  @Nullable public final @FolderType Integer folderType;
   /** Optional boolean for media playability. */
   @Nullable public final Boolean isPlayable;
   /** @deprecated Use {@link #recordingYear} instead. */

File: libraries/common/src/main/java/androidx/media3/common/PlaybackException.java
Patch:
@@ -321,7 +321,7 @@ public final String getErrorCodeName() {
   }
 
   /** An error code which identifies the cause of the playback failure. */
-  @ErrorCode public final int errorCode;
+  public final @ErrorCode int errorCode;
 
   /** The value of {@link SystemClock#elapsedRealtime()} when this exception was created. */
   public final long timestampMs;

File: libraries/session/src/main/java/androidx/media3/session/CommandButton.java
Patch:
@@ -44,7 +44,7 @@ public final class CommandButton implements Bundleable {
   public static final class Builder {
 
     @Nullable private SessionCommand sessionCommand;
-    @Player.Command private int playerCommand;
+    private @Player.Command int playerCommand;
     @DrawableRes private int iconResId;
     private CharSequence displayName;
     private Bundle extras;
@@ -153,7 +153,7 @@ public CommandButton build() {
    * The {@link Player.Command} command of the button. Can be {@link Player#COMMAND_INVALID} if the
    * button is a placeholder.
    */
-  @Player.Command public final int playerCommand;
+  public final @Player.Command int playerCommand;
 
   /**
    * The icon resource id of the button. Can be {@code 0} if the command is predefined and a custom

File: libraries/session/src/main/java/androidx/media3/session/LibraryResult.java
Patch:
@@ -134,7 +134,7 @@ public final class LibraryResult<V> implements Bundleable {
   public static final int RESULT_ERROR_SESSION_SETUP_REQUIRED = -108;
 
   /** The {@link Code} of this result. */
-  @Code public final int resultCode;
+  public final @Code int resultCode;
 
   /**
    * The completion time of the command in milliseconds. It's the same as {@link

File: libraries/session/src/main/java/androidx/media3/session/SessionCommand.java
Patch:
@@ -119,7 +119,7 @@ public final class SessionCommand implements Bundleable {
    * The command code of a predefined command. It will be {@link #COMMAND_CODE_CUSTOM} for a custom
    * command.
    */
-  @CommandCode public final int commandCode;
+  public final @CommandCode int commandCode;
 
   /** The action of a custom command. It will be an empty string for a predefined command. */
   public final String customAction;

File: libraries/session/src/main/java/androidx/media3/session/SessionResult.java
Patch:
@@ -137,7 +137,7 @@ public final class SessionResult implements Bundleable {
   public static final int RESULT_ERROR_SESSION_SETUP_REQUIRED = -108;
 
   /** The {@link Code} of this result. */
-  @Code public final int resultCode;
+  public final @Code int resultCode;
 
   /** The extra {@link Bundle} for the result. */
   public final Bundle extras;

File: libraries/session/src/main/java/androidx/media3/session/SessionToken.java
Patch:
@@ -223,8 +223,7 @@ public String getServiceName() {
    * Returns the type of this token. One of {@link #TYPE_SESSION}, {@link #TYPE_SESSION_SERVICE}, or
    * {@link #TYPE_LIBRARY_SERVICE}.
    */
-  @TokenType
-  public int getType() {
+  public @TokenType int getType() {
     return impl.getType();
   }
 

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerAudioRenderer.java
Patch:
@@ -279,6 +279,7 @@ private boolean feedDecoderFromInput(MediaCodecAdapterWrapper decoder) {
     int result = readSource(getFormatHolder(), decoderInputBuffer, /* readFlags= */ 0);
     switch (result) {
       case C.RESULT_BUFFER_READ:
+        decoderInputBuffer.timeUs -= streamOffsetUs;
         mediaClock.updateTimeForTrackType(getTrackType(), decoderInputBuffer.timeUs);
         decoderInputBuffer.flip();
         decoder.queueInputBuffer(decoderInputBuffer);

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerMuxingVideoRenderer.java
Patch:
@@ -117,6 +117,7 @@ private boolean readAndTransformBuffer() {
       muxerWrapper.endTrack(getTrackType());
       return false;
     }
+    buffer.timeUs -= streamOffsetUs;
     mediaClock.updateTimeForTrackType(getTrackType(), buffer.timeUs);
     ByteBuffer data = checkNotNull(buffer.data);
     data.flip();

File: libraries/transformer/src/main/java/androidx/media3/transformer/TransformerTranscodingVideoRenderer.java
Patch:
@@ -320,6 +320,7 @@ private boolean feedDecoderFromInput(MediaCodecAdapterWrapper decoder) {
       case C.RESULT_FORMAT_READ:
         throw new IllegalStateException("Format changes are not supported.");
       case C.RESULT_BUFFER_READ:
+        decoderInputBuffer.timeUs -= streamOffsetUs;
         mediaClock.updateTimeForTrackType(getTrackType(), decoderInputBuffer.timeUs);
         ByteBuffer data = checkNotNull(decoderInputBuffer.data);
         data.flip();

File: libraries/session/src/main/java/androidx/media3/session/MediaControllerImplLegacy.java
Patch:
@@ -2022,7 +2022,7 @@ private static ControllerInfo createControllerInfo(
             /* videoSize= */ VideoSize.UNKNOWN,
             /* timeline= */ currentTimeline,
             /* playlistMetadata= */ playlistMetadata,
-            /* volume= */ deviceVolume,
+            /* volume= */ 1.0f,
             /* audioAttributes= */ audioAttributes,
             /* cues= */ Collections.emptyList(),
             /* deviceInfo= */ deviceInfo,

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -982,6 +982,7 @@ public ExoPlayer build() {
    * {@link ExoPlaybackException}.
    */
   @Override
+  @Nullable
   ExoPlaybackException getPlayerError();
 
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -289,6 +289,7 @@ public void setVideoScalingMode(@C.VideoScalingMode int scalingMode) {
 
   @Override
   public void signalEndOfInputStream() {
+    maybeBlockOnQueueing();
     codec.signalEndOfInputStream();
   }
 

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -2119,7 +2119,7 @@ default void onPlaylistMetadataChanged(MediaMetadata mediaMetadata) {}
   /** Returns the index of the period currently being played. */
   int getCurrentPeriodIndex();
 
-  /** @deprecated Use {@link #getCurrentMediaItem()} instead. */
+  /** @deprecated Use {@link #getCurrentMediaItemIndex()} instead. */
   @Deprecated
   int getCurrentWindowIndex();
 

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -2119,7 +2119,7 @@ default void onPlaylistMetadataChanged(MediaMetadata mediaMetadata) {}
   /** Returns the index of the period currently being played. */
   int getCurrentPeriodIndex();
 
-  /** @deprecated Use {@link #getCurrentMediaItem()} instead. */
+  /** @deprecated Use {@link #getCurrentMediaItemIndex()} instead. */
   @Deprecated
   int getCurrentWindowIndex();
 

File: library/core/src/test/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecAdapterTest.java
Patch:
@@ -54,7 +54,8 @@ public void setUp() throws Exception {
         new AsynchronousMediaCodecAdapter.Factory(
                 /* callbackThreadSupplier= */ () -> callbackThread,
                 /* queueingThreadSupplier= */ () -> queueingThread,
-                /* synchronizeCodecInteractionsWithQueueing= */ false)
+                /* synchronizeCodecInteractionsWithQueueing= */ false,
+                /* enableImmediateCodecStartAfterFlush= */ false)
             .createAdapter(configuration);
     bufferInfo = new MediaCodec.BufferInfo();
     // After starting the MediaCodec, the ShadowMediaCodec offers input buffer 0. We advance the

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -289,6 +289,7 @@ public void setVideoScalingMode(@C.VideoScalingMode int scalingMode) {
 
   @Override
   public void signalEndOfInputStream() {
+    maybeBlockOnQueueing();
     codec.signalEndOfInputStream();
   }
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerAudioRenderer.java
Patch:
@@ -316,6 +316,7 @@ private void feedEncoder(MediaCodecAdapterWrapper encoder, ByteBuffer inputBuffe
 
   private void queueEndOfStreamToEncoder(MediaCodecAdapterWrapper encoder) {
     checkState(checkNotNull(encoderInputBuffer.data).position() == 0);
+    encoderInputBuffer.timeUs = nextEncoderInputBufferTimeUs;
     encoderInputBuffer.addFlag(C.BUFFER_FLAG_END_OF_STREAM);
     encoderInputBuffer.flip();
     // Queuing EOS should only occur with an empty buffer.

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerAudioRenderer.java
Patch:
@@ -316,6 +316,7 @@ private void feedEncoder(MediaCodecAdapterWrapper encoder, ByteBuffer inputBuffe
 
   private void queueEndOfStreamToEncoder(MediaCodecAdapterWrapper encoder) {
     checkState(checkNotNull(encoderInputBuffer.data).position() == 0);
+    encoderInputBuffer.timeUs = nextEncoderInputBufferTimeUs;
     encoderInputBuffer.addFlag(C.BUFFER_FLAG_END_OF_STREAM);
     encoderInputBuffer.flip();
     // Queuing EOS should only occur with an empty buffer.

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/crypto/AesCipherDataSink.java
Patch:
@@ -13,12 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.android.exoplayer2.upstream;
+package com.google.android.exoplayer2.upstream.crypto;
 
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
 
 import androidx.annotation.Nullable;
+import com.google.android.exoplayer2.upstream.DataSink;
+import com.google.android.exoplayer2.upstream.DataSpec;
 import java.io.IOException;
 import javax.crypto.Cipher;
 

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/crypto/AesFlushingCipher.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.android.exoplayer2.upstream;
+package com.google.android.exoplayer2.upstream.crypto;
 
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.util.Assertions;

File: library/datasource/src/test/java/com/google/android/exoplayer2/upstream/crypto/AesFlushingCipherTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.android.exoplayer2.upstream;
+package com.google.android.exoplayer2.upstream.crypto;
 
 import static com.google.common.truth.Truth.assertThat;
 import static java.lang.Math.min;

File: library/common/src/main/java/com/google/android/exoplayer2/MediaMetadata.java
Patch:
@@ -623,15 +623,15 @@ public MediaMetadata build() {
   /** Optional artwork data as a compressed byte array. */
   @Nullable public final byte[] artworkData;
   /** Optional {@link PictureType} of the artwork data. */
-  @Nullable @PictureType public final Integer artworkDataType;
+  @Nullable public final @PictureType Integer artworkDataType;
   /** Optional artwork {@link Uri}. */
   @Nullable public final Uri artworkUri;
   /** Optional track number. */
   @Nullable public final Integer trackNumber;
   /** Optional total number of tracks. */
   @Nullable public final Integer totalTrackCount;
   /** Optional {@link FolderType}. */
-  @Nullable @FolderType public final Integer folderType;
+  @Nullable public final @FolderType Integer folderType;
   /** Optional boolean for media playability. */
   @Nullable public final Boolean isPlayable;
   /** @deprecated Use {@link #recordingYear} instead. */

File: library/common/src/main/java/com/google/android/exoplayer2/PlaybackException.java
Patch:
@@ -320,7 +320,7 @@ public final String getErrorCodeName() {
   }
 
   /** An error code which identifies the cause of the playback failure. */
-  @ErrorCode public final int errorCode;
+  public final @ErrorCode int errorCode;
 
   /** The value of {@link SystemClock#elapsedRealtime()} when this exception was created. */
   public final long timestampMs;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerAudioRenderer.java
Patch:
@@ -279,6 +279,7 @@ private boolean feedDecoderFromInput(MediaCodecAdapterWrapper decoder) {
     int result = readSource(getFormatHolder(), decoderInputBuffer, /* readFlags= */ 0);
     switch (result) {
       case C.RESULT_BUFFER_READ:
+        decoderInputBuffer.timeUs -= streamOffsetUs;
         mediaClock.updateTimeForTrackType(getTrackType(), decoderInputBuffer.timeUs);
         decoderInputBuffer.flip();
         decoder.queueInputBuffer(decoderInputBuffer);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerMuxingVideoRenderer.java
Patch:
@@ -117,6 +117,7 @@ private boolean readAndTransformBuffer() {
       muxerWrapper.endTrack(getTrackType());
       return false;
     }
+    buffer.timeUs -= streamOffsetUs;
     mediaClock.updateTimeForTrackType(getTrackType(), buffer.timeUs);
     ByteBuffer data = checkNotNull(buffer.data);
     data.flip();

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerTranscodingVideoRenderer.java
Patch:
@@ -320,6 +320,7 @@ private boolean feedDecoderFromInput(MediaCodecAdapterWrapper decoder) {
       case C.RESULT_FORMAT_READ:
         throw new IllegalStateException("Format changes are not supported.");
       case C.RESULT_BUFFER_READ:
+        decoderInputBuffer.timeUs -= streamOffsetUs;
         mediaClock.updateTimeForTrackType(getTrackType(), decoderInputBuffer.timeUs);
         ByteBuffer data = checkNotNull(decoderInputBuffer.data);
         data.flip();

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/crypto/AesCipherDataSink.java
Patch:
@@ -13,12 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.android.exoplayer2.upstream;
+package com.google.android.exoplayer2.upstream.crypto;
 
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
 
 import androidx.annotation.Nullable;
+import com.google.android.exoplayer2.upstream.DataSink;
+import com.google.android.exoplayer2.upstream.DataSpec;
 import java.io.IOException;
 import javax.crypto.Cipher;
 

File: library/datasource/src/main/java/com/google/android/exoplayer2/upstream/crypto/AesFlushingCipher.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.android.exoplayer2.upstream;
+package com.google.android.exoplayer2.upstream.crypto;
 
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.util.Assertions;

File: library/datasource/src/test/java/com/google/android/exoplayer2/upstream/crypto/AesFlushingCipherTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.android.exoplayer2.upstream;
+package com.google.android.exoplayer2.upstream.crypto;
 
 import static com.google.common.truth.Truth.assertThat;
 import static java.lang.Math.min;

File: library/common/src/main/java/com/google/android/exoplayer2/MediaMetadata.java
Patch:
@@ -623,15 +623,15 @@ public MediaMetadata build() {
   /** Optional artwork data as a compressed byte array. */
   @Nullable public final byte[] artworkData;
   /** Optional {@link PictureType} of the artwork data. */
-  @Nullable @PictureType public final Integer artworkDataType;
+  @Nullable public final @PictureType Integer artworkDataType;
   /** Optional artwork {@link Uri}. */
   @Nullable public final Uri artworkUri;
   /** Optional track number. */
   @Nullable public final Integer trackNumber;
   /** Optional total number of tracks. */
   @Nullable public final Integer totalTrackCount;
   /** Optional {@link FolderType}. */
-  @Nullable @FolderType public final Integer folderType;
+  @Nullable public final @FolderType Integer folderType;
   /** Optional boolean for media playability. */
   @Nullable public final Boolean isPlayable;
   /** @deprecated Use {@link #recordingYear} instead. */

File: library/common/src/main/java/com/google/android/exoplayer2/PlaybackException.java
Patch:
@@ -320,7 +320,7 @@ public final String getErrorCodeName() {
   }
 
   /** An error code which identifies the cause of the playback failure. */
-  @ErrorCode public final int errorCode;
+  public final @ErrorCode int errorCode;
 
   /** The value of {@link SystemClock#elapsedRealtime()} when this exception was created. */
   public final long timestampMs;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerAudioRenderer.java
Patch:
@@ -279,6 +279,7 @@ private boolean feedDecoderFromInput(MediaCodecAdapterWrapper decoder) {
     int result = readSource(getFormatHolder(), decoderInputBuffer, /* readFlags= */ 0);
     switch (result) {
       case C.RESULT_BUFFER_READ:
+        decoderInputBuffer.timeUs -= streamOffsetUs;
         mediaClock.updateTimeForTrackType(getTrackType(), decoderInputBuffer.timeUs);
         decoderInputBuffer.flip();
         decoder.queueInputBuffer(decoderInputBuffer);

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerMuxingVideoRenderer.java
Patch:
@@ -117,6 +117,7 @@ private boolean readAndTransformBuffer() {
       muxerWrapper.endTrack(getTrackType());
       return false;
     }
+    buffer.timeUs -= streamOffsetUs;
     mediaClock.updateTimeForTrackType(getTrackType(), buffer.timeUs);
     ByteBuffer data = checkNotNull(buffer.data);
     data.flip();

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerTranscodingVideoRenderer.java
Patch:
@@ -320,6 +320,7 @@ private boolean feedDecoderFromInput(MediaCodecAdapterWrapper decoder) {
       case C.RESULT_FORMAT_READ:
         throw new IllegalStateException("Format changes are not supported.");
       case C.RESULT_BUFFER_READ:
+        decoderInputBuffer.timeUs -= streamOffsetUs;
         mediaClock.updateTimeForTrackType(getTrackType(), decoderInputBuffer.timeUs);
         ByteBuffer data = checkNotNull(decoderInputBuffer.data);
         data.flip();

File: demos/cast/src/main/java/com/google/android/exoplayer2/castdemo/PlayerManager.java
Patch:
@@ -18,7 +18,6 @@
 import android.content.Context;
 import android.view.KeyEvent;
 import android.view.View;
-import androidx.annotation.NonNull;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ExoPlayer;
 import com.google.android.exoplayer2.MediaItem;
@@ -226,7 +225,7 @@ public void onPositionDiscontinuity(
   }
 
   @Override
-  public void onTimelineChanged(@NonNull Timeline timeline, @TimelineChangeReason int reason) {
+  public void onTimelineChanged(Timeline timeline, @TimelineChangeReason int reason) {
     updateCurrentItemIndex();
   }
 

File: demos/gl/src/main/java/com/google/android/exoplayer2/gldemo/VideoProcessingGLSurfaceView.java
Patch:
@@ -23,7 +23,6 @@
 import android.opengl.GLSurfaceView;
 import android.os.Handler;
 import android.view.Surface;
-import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ExoPlayer;
@@ -290,7 +289,7 @@ public void onDrawFrame(GL10 gl) {
     public void onVideoFrameAboutToBeRendered(
         long presentationTimeUs,
         long releaseTimeNs,
-        @NonNull Format format,
+        Format format,
         @Nullable MediaFormat mediaFormat) {
       sampleTimestampQueue.add(releaseTimeNs, presentationTimeUs);
     }

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
Patch:
@@ -40,7 +40,6 @@
 import android.widget.ImageButton;
 import android.widget.TextView;
 import android.widget.Toast;
-import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.appcompat.app.AppCompatActivity;
 import com.google.android.exoplayer2.MediaItem;
@@ -163,7 +162,7 @@ public void onDownloadsChanged() {
 
   @Override
   public void onRequestPermissionsResult(
-      int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
+      int requestCode, String[] permissions, int[] grantResults) {
     super.onRequestPermissionsResult(requestCode, permissions, grantResults);
     if (grantResults.length == 0) {
       // Empty results are triggered if a permission is requested while another request was already

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -27,7 +27,6 @@
 import android.os.SystemClock;
 import android.util.Pair;
 import androidx.annotation.IntDef;
-import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
 import com.google.android.exoplayer2.C;
@@ -1829,7 +1828,7 @@ public void onDataRequest(AudioTrack track, int size) {
             }
 
             @Override
-            public void onTearDown(@NonNull AudioTrack track) {
+            public void onTearDown(AudioTrack track) {
               Assertions.checkState(track == audioTrack);
               if (listener != null && playing) {
                 // The audio track was destroyed while in use. Thus a new AudioTrack needs to be

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/MediaParserHlsMediaChunkExtractor.java
Patch:
@@ -31,7 +31,6 @@
 import android.media.MediaParser.OutputConsumer;
 import android.media.MediaParser.SeekPoint;
 import android.text.TextUtils;
-import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
 import com.google.android.exoplayer2.Format;
@@ -262,7 +261,7 @@ private PeekingInputReader(ExtractorInput extractorInput) {
     }
 
     @Override
-    public int read(@NonNull byte[] buffer, int offset, int readLength) throws IOException {
+    public int read(byte[] buffer, int offset, int readLength) throws IOException {
       int peekedBytes = extractorInput.peek(buffer, offset, readLength);
       totalPeekedBytes += peekedBytes;
       return peekedBytes;

File: testutils/src/test/java/com/google/android/exoplayer2/testutil/FakeClockTest.java
Patch:
@@ -22,7 +22,6 @@
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.Message;
-import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.util.HandlerWrapper;
@@ -398,7 +397,7 @@ public TestCallback() {
     }
 
     @Override
-    public boolean handleMessage(@NonNull Message msg) {
+    public boolean handleMessage(Message msg) {
       messages.add(new MessageData(msg.what, msg.arg1, msg.arg2, msg.obj));
       return true;
     }

File: demos/cast/src/main/java/androidx/media3/demo/cast/PlayerManager.java
Patch:
@@ -18,7 +18,6 @@
 import android.content.Context;
 import android.view.KeyEvent;
 import android.view.View;
-import androidx.annotation.NonNull;
 import androidx.media3.cast.CastPlayer;
 import androidx.media3.cast.SessionAvailabilityListener;
 import androidx.media3.common.C;
@@ -226,7 +225,7 @@ public void onPositionDiscontinuity(
   }
 
   @Override
-  public void onTimelineChanged(@NonNull Timeline timeline, @TimelineChangeReason int reason) {
+  public void onTimelineChanged(Timeline timeline, @TimelineChangeReason int reason) {
     updateCurrentItemIndex();
   }
 

File: demos/gl/src/main/java/androidx/media3/demo/gl/VideoProcessingGLSurfaceView.java
Patch:
@@ -23,7 +23,6 @@
 import android.opengl.GLSurfaceView;
 import android.os.Handler;
 import android.view.Surface;
-import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.media3.common.C;
 import androidx.media3.common.Format;
@@ -290,7 +289,7 @@ public void onDrawFrame(GL10 gl) {
     public void onVideoFrameAboutToBeRendered(
         long presentationTimeUs,
         long releaseTimeNs,
-        @NonNull Format format,
+        Format format,
         @Nullable MediaFormat mediaFormat) {
       sampleTimestampQueue.add(releaseTimeNs, presentationTimeUs);
     }

File: demos/main/src/main/java/androidx/media3/demo/main/SampleChooserActivity.java
Patch:
@@ -40,7 +40,6 @@
 import android.widget.ImageButton;
 import android.widget.TextView;
 import android.widget.Toast;
-import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.media3.common.MediaItem;
@@ -163,7 +162,7 @@ public void onDownloadsChanged() {
 
   @Override
   public void onRequestPermissionsResult(
-      int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
+      int requestCode, String[] permissions, int[] grantResults) {
     super.onRequestPermissionsResult(requestCode, permissions, grantResults);
     if (grantResults.length == 0) {
       // Empty results are triggered if a permission is requested while another request was already

File: libraries/exoplayer/src/main/java/androidx/media3/exoplayer/audio/DefaultAudioSink.java
Patch:
@@ -27,7 +27,6 @@
 import android.os.SystemClock;
 import android.util.Pair;
 import androidx.annotation.IntDef;
-import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
 import androidx.media3.common.AudioAttributes;
@@ -1838,7 +1837,7 @@ public void onDataRequest(AudioTrack track, int size) {
             }
 
             @Override
-            public void onTearDown(@NonNull AudioTrack track) {
+            public void onTearDown(AudioTrack track) {
               Assertions.checkState(track == audioTrack);
               if (listener != null && playing) {
                 // The audio track was destroyed while in use. Thus a new AudioTrack needs to be

File: libraries/exoplayer_hls/src/main/java/androidx/media3/exoplayer/hls/MediaParserHlsMediaChunkExtractor.java
Patch:
@@ -31,7 +31,6 @@
 import android.media.MediaParser.OutputConsumer;
 import android.media.MediaParser.SeekPoint;
 import android.text.TextUtils;
-import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
 import androidx.media3.common.FileTypes;
@@ -264,7 +263,7 @@ private PeekingInputReader(ExtractorInput extractorInput) {
     }
 
     @Override
-    public int read(@NonNull byte[] buffer, int offset, int readLength) throws IOException {
+    public int read(byte[] buffer, int offset, int readLength) throws IOException {
       int peekedBytes = extractorInput.peek(buffer, offset, readLength);
       totalPeekedBytes += peekedBytes;
       return peekedBytes;

File: libraries/test_utils/src/test/java/androidx/media3/test/utils/FakeClockTest.java
Patch:
@@ -22,7 +22,6 @@
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.Message;
-import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.media3.common.util.HandlerWrapper;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
@@ -398,7 +397,7 @@ public TestCallback() {
     }
 
     @Override
-    public boolean handleMessage(@NonNull Message msg) {
+    public boolean handleMessage(Message msg) {
       messages.add(new MessageData(msg.what, msg.arg1, msg.arg2, msg.obj));
       return true;
     }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -304,7 +304,8 @@ public Transformer build() {
               removeVideo,
               flattenForSlowMotion,
               outputMimeType,
-              /* audioMimeType= */ null);
+              /* audioMimeType= */ null,
+              /* videoMimeType= */ null);
       return new Transformer(
           context, mediaSourceFactory, muxerFactory, transformation, listener, looper, clock);
     }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/truth/SpannedSubject.java
Patch:
@@ -52,7 +52,6 @@
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
 /** A Truth {@link Subject} for assertions on {@link Spanned} instances containing text styling. */
-// TODO: add support for more Spans i.e. all those used in androidx.media3.common.text.
 public final class SpannedSubject extends Subject {
 
   @Nullable private final Spanned actual;

File: library/core/src/main/java/com/google/android/exoplayer2/source/ClippingMediaSource.java
Patch:
@@ -57,7 +57,7 @@ public static final class IllegalClippingException extends IOException {
     public static final int REASON_START_EXCEEDS_END = 2;
 
     /** The reason clipping failed. */
-    public final @Reason int reason;
+    @Reason public final int reason;
 
     /** @param reason The reason clipping failed. */
     public IllegalClippingException(@Reason int reason) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/SinglePeriodTimeline.java
Patch:
@@ -147,7 +147,7 @@ public SinglePeriodTimeline(
    * @param isDynamic Whether the window may change when the timeline is updated.
    * @param useLiveConfiguration Whether the window is live and {@link MediaItem#liveConfiguration}
    *     is used to configure live playback behaviour.
-   * @param manifest The manifest. May be (@code null}.
+   * @param manifest The manifest. May be {@code null}.
    * @param mediaItem A media item used for {@link Timeline.Window#mediaItem}.
    */
   public SinglePeriodTimeline(

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
Patch:
@@ -348,7 +348,7 @@ private PlaylistHolder readEntry(JsonReader reader, boolean insidePlaylist) thro
       String subtitleLanguage = null;
       UUID drmUuid = null;
       String drmLicenseUri = null;
-      ImmutableMap<String, String> drmLicenseRequestHeaders = null;
+      ImmutableMap<String, String> drmLicenseRequestHeaders = ImmutableMap.of();
       boolean drmSessionForClearContent = false;
       boolean drmMultiSession = false;
       boolean drmForceDefaultLicenseUri = false;
@@ -453,7 +453,7 @@ private PlaylistHolder readEntry(JsonReader reader, boolean insidePlaylist) thro
         } else {
           checkState(drmLicenseUri == null, "drm_uuid is required if drm_license_uri is set.");
           checkState(
-              drmLicenseRequestHeaders == null,
+              drmLicenseRequestHeaders.isEmpty(),
               "drm_uuid is required if drm_key_request_properties is set.");
           checkState(
               !drmSessionForClearContent,

File: library/common/src/main/java/com/google/android/exoplayer2/upstream/DataReader.java
Patch:
@@ -13,8 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package androidx.media3.common;
+package com.google.android.exoplayer2.upstream;
 
+import com.google.android.exoplayer2.C;
 import java.io.IOException;
 
 /** Reads bytes from a data stream. */

File: library/common/src/main/java/com/google/android/exoplayer2/upstream/DataSource.java
Patch:
@@ -17,7 +17,6 @@
 
 import android.net.Uri;
 import androidx.annotation.Nullable;
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
 import java.io.IOException;
 import java.util.Collections;

File: library/core/src/main/java/com/google/android/exoplayer2/source/BundledExtractorsAdapter.java
Patch:
@@ -17,7 +17,6 @@
 
 import android.net.Uri;
 import androidx.annotation.Nullable;
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.extractor.DefaultExtractorInput;
 import com.google.android.exoplayer2.extractor.Extractor;
@@ -26,6 +25,7 @@
 import com.google.android.exoplayer2.extractor.ExtractorsFactory;
 import com.google.android.exoplayer2.extractor.PositionHolder;
 import com.google.android.exoplayer2.extractor.mp3.Mp3Extractor;
+import com.google.android.exoplayer2.upstream.DataReader;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Util;
 import java.io.EOFException;

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaParserExtractorAdapter.java
Patch:
@@ -25,13 +25,13 @@
 import android.net.Uri;
 import android.util.Pair;
 import androidx.annotation.RequiresApi;
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.extractor.Extractor;
 import com.google.android.exoplayer2.extractor.ExtractorOutput;
 import com.google.android.exoplayer2.extractor.PositionHolder;
 import com.google.android.exoplayer2.source.mediaparser.InputReaderAdapterV30;
 import com.google.android.exoplayer2.source.mediaparser.OutputConsumerAdapterV30;
+import com.google.android.exoplayer2.upstream.DataReader;
 import java.io.IOException;
 import java.util.List;
 import java.util.Map;

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaExtractor.java
Patch:
@@ -16,11 +16,11 @@
 package com.google.android.exoplayer2.source;
 
 import android.net.Uri;
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.extractor.Extractor;
 import com.google.android.exoplayer2.extractor.ExtractorOutput;
 import com.google.android.exoplayer2.extractor.PositionHolder;
+import com.google.android.exoplayer2.upstream.DataReader;
 import java.io.IOException;
 import java.util.List;
 import java.util.Map;

File: library/core/src/main/java/com/google/android/exoplayer2/source/SampleDataQueue.java
Patch:
@@ -18,7 +18,6 @@
 import static java.lang.Math.min;
 
 import androidx.annotation.Nullable;
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.decoder.CryptoInfo;
 import com.google.android.exoplayer2.decoder.DecoderInputBuffer;
@@ -27,6 +26,7 @@
 import com.google.android.exoplayer2.source.SampleQueue.SampleExtrasHolder;
 import com.google.android.exoplayer2.upstream.Allocation;
 import com.google.android.exoplayer2.upstream.Allocator;
+import com.google.android.exoplayer2.upstream.DataReader;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import com.google.android.exoplayer2.util.Util;
 import java.io.EOFException;

File: library/core/src/main/java/com/google/android/exoplayer2/source/SampleQueue.java
Patch:
@@ -27,7 +27,6 @@
 import androidx.annotation.GuardedBy;
 import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.FormatHolder;
@@ -41,6 +40,7 @@
 import com.google.android.exoplayer2.extractor.TrackOutput;
 import com.google.android.exoplayer2.source.SampleStream.ReadFlags;
 import com.google.android.exoplayer2.upstream.Allocator;
+import com.google.android.exoplayer2.upstream.DataReader;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.MimeTypes;

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/BundledChunkExtractor.java
Patch:
@@ -19,7 +19,6 @@
 
 import android.util.SparseArray;
 import androidx.annotation.Nullable;
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.extractor.ChunkIndex;
@@ -33,6 +32,7 @@
 import com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor;
 import com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor;
 import com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor;
+import com.google.android.exoplayer2.upstream.DataReader;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.ParsableByteArray;

File: library/core/src/main/java/com/google/android/exoplayer2/source/mediaparser/InputReaderAdapterV30.java
Patch:
@@ -19,8 +19,8 @@
 import android.media.MediaParser;
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.upstream.DataReader;
 import com.google.android.exoplayer2.util.Util;
 import java.io.IOException;
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/mediaparser/OutputConsumerAdapterV30.java
Patch:
@@ -40,7 +40,6 @@
 import android.util.Pair;
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.C.SelectionFlags;
 import com.google.android.exoplayer2.Format;
@@ -53,6 +52,7 @@
 import com.google.android.exoplayer2.extractor.SeekPoint;
 import com.google.android.exoplayer2.extractor.TrackOutput;
 import com.google.android.exoplayer2.extractor.TrackOutput.CryptoData;
+import com.google.android.exoplayer2.upstream.DataReader;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.MimeTypes;

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/PlayerEmsgHandler.java
Patch:
@@ -20,7 +20,6 @@
 import android.os.Handler;
 import android.os.Message;
 import androidx.annotation.Nullable;
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.FormatHolder;
@@ -34,6 +33,7 @@
 import com.google.android.exoplayer2.source.chunk.Chunk;
 import com.google.android.exoplayer2.source.dash.manifest.DashManifest;
 import com.google.android.exoplayer2.upstream.Allocator;
+import com.google.android.exoplayer2.upstream.DataReader;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import com.google.android.exoplayer2.util.Util;
 import java.io.IOException;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorInput.java
Patch:
@@ -17,9 +17,9 @@
 
 import static java.lang.Math.min;
 
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ExoPlayerLibraryInfo;
+import com.google.android.exoplayer2.upstream.DataReader;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Util;
 import java.io.EOFException;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/DummyTrackOutput.java
Patch:
@@ -18,9 +18,9 @@
 import static java.lang.Math.min;
 
 import androidx.annotation.Nullable;
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
+import com.google.android.exoplayer2.upstream.DataReader;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import java.io.EOFException;
 import java.io.IOException;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ExtractorInput.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.google.android.exoplayer2.extractor;
 
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.upstream.DataReader;
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/TrackOutput.java
Patch:
@@ -17,9 +17,9 @@
 
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
+import com.google.android.exoplayer2.upstream.DataReader;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import java.io.EOFException;
 import java.io.IOException;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
Patch:
@@ -26,7 +26,6 @@
 import android.os.Looper;
 import android.util.SparseIntArray;
 import androidx.annotation.Nullable;
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.FormatHolder;
@@ -59,6 +58,7 @@
 import com.google.android.exoplayer2.source.chunk.MediaChunkIterator;
 import com.google.android.exoplayer2.trackselection.ExoTrackSelection;
 import com.google.android.exoplayer2.upstream.Allocator;
+import com.google.android.exoplayer2.upstream.DataReader;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.google.android.exoplayer2.upstream.LoadErrorHandlingPolicy;
 import com.google.android.exoplayer2.upstream.LoadErrorHandlingPolicy.LoadErrorInfo;

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackOutput.java
Patch:
@@ -18,11 +18,11 @@
 import static com.google.common.truth.Truth.assertThat;
 
 import androidx.annotation.Nullable;
-import androidx.media3.common.DataReader;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.extractor.TrackOutput;
 import com.google.android.exoplayer2.testutil.Dumper.Dumpable;
+import com.google.android.exoplayer2.upstream.DataReader;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import com.google.android.exoplayer2.util.Util;

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManagerProvider.java
Patch:
@@ -110,7 +110,8 @@ private DrmSessionManager createManager(MediaItem.DrmConfiguration drmConfigurat
                 drmConfiguration.scheme, FrameworkMediaDrm.DEFAULT_PROVIDER)
             .setMultiSession(drmConfiguration.multiSession)
             .setPlayClearSamplesWithoutKeys(drmConfiguration.playClearContentWithoutKey)
-            .setUseDrmSessionsForClearContent(Ints.toArray(drmConfiguration.sessionForClearTypes))
+            .setUseDrmSessionsForClearContent(
+                Ints.toArray(drmConfiguration.forcedSessionTrackTypes))
             .build(httpDrmCallback);
     drmSessionManager.setMode(MODE_PLAYBACK, drmConfiguration.getKeySetId());
     return drmSessionManager;

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/IntentUtil.java
Patch:
@@ -177,7 +177,7 @@ private static MediaItem.Builder populateDrmPropertiesFromIntent(
                   intent.getBooleanExtra(
                       DRM_FORCE_DEFAULT_LICENSE_URI_EXTRA + extrasKeySuffix, false))
               .setLicenseRequestHeaders(headers)
-              .setSessionForClearPeriods(
+              .forceSessionsForAudioAndVideoTracks(
                   intent.getBooleanExtra(DRM_SESSION_FOR_CLEAR_CONTENT + extrasKeySuffix, false))
               .build());
     }

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
Patch:
@@ -445,7 +445,7 @@ private PlaylistHolder readEntry(JsonReader reader, boolean insidePlaylist) thro
               new MediaItem.DrmConfiguration.Builder(drmUuid)
                   .setLicenseUri(drmLicenseUri)
                   .setLicenseRequestHeaders(drmLicenseRequestHeaders)
-                  .setSessionForClearPeriods(drmSessionForClearContent)
+                  .forceSessionsForAudioAndVideoTracks(drmSessionForClearContent)
                   .setMultiSession(drmMultiSession)
                   .setForceDefaultLicenseUri(drmForceDefaultLicenseUri)
                   .build());

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/TrueHdSampleRechunker.java
Patch:
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.google.android.exoplayer2.extractor;
 
 import static com.google.android.exoplayer2.util.Assertions.checkState;
 
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.audio.Ac3Util;
 import java.io.IOException;
 
 /**

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -1327,8 +1327,8 @@ private static void parseAudioSampleEntry(
       parent.skipBytes(6); // sampleSize, compressionId, packetSize.
 
       sampleRate = parent.readUnsignedFixedPoint1616();
-      parent.skipBytes(-4);
       // The sample rate has been redefined as a 32-bit value for Dolby TrueHD (MLP) streams.
+      parent.setPosition(parent.getPosition() - 4);
       sampleRateMlp = parent.readInt();
 
       if (quickTimeSoundDescriptionVersion == 1) {

File: library/common/src/main/java/com/google/android/exoplayer2/upstream/crypto/AesCipherDataSink.java
Patch:
@@ -19,6 +19,8 @@
 import static java.lang.Math.min;
 
 import androidx.annotation.Nullable;
+import com.google.android.exoplayer2.upstream.DataSink;
+import com.google.android.exoplayer2.upstream.DataSpec;
 import java.io.IOException;
 import javax.crypto.Cipher;
 

File: library/common/src/main/java/com/google/android/exoplayer2/upstream/crypto/AesCipherDataSource.java
Patch:
@@ -21,6 +21,9 @@
 import android.net.Uri;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.upstream.DataSpec;
+import com.google.android.exoplayer2.upstream.TransferListener;
 import java.io.IOException;
 import java.util.List;
 import java.util.Map;

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -34,6 +34,7 @@
 import com.google.android.exoplayer2.audio.AuxEffectInfo;
 import com.google.android.exoplayer2.audio.DefaultAudioSink;
 import com.google.android.exoplayer2.audio.MediaCodecAudioRenderer;
+import com.google.android.exoplayer2.decoder.DecoderCounters;
 import com.google.android.exoplayer2.extractor.DefaultExtractorsFactory;
 import com.google.android.exoplayer2.extractor.ExtractorsFactory;
 import com.google.android.exoplayer2.metadata.MetadataRenderer;

File: library/extractor/src/main/java/com/google/android/exoplayer2/text/SubtitleExtractor.java
Patch:
@@ -212,6 +212,7 @@ private void decode() throws IOException {
       }
       inputBuffer.ensureSpaceForWrite(bytesRead);
       inputBuffer.data.put(subtitleData.getData(), /* offset= */ 0, bytesRead);
+      inputBuffer.data.limit(bytesRead);
       subtitleDecoder.queueInputBuffer(inputBuffer);
       @Nullable SubtitleOutputBuffer outputBuffer = subtitleDecoder.dequeueOutputBuffer();
       while (outputBuffer == null) {

File: library/extractor/src/test/java/com/google/android/exoplayer2/text/SubtitleExtractorTest.java
Patch:
@@ -44,7 +44,7 @@ public class SubtitleExtractorTest {
           + "This is the second subtitle.\n"
           + "\n"
           + "00:02.600 --> 00:04.567\n"
-          + "This is the third subtitle.";
+          + "This is the third subtitle.\n";
 
   @Test
   public void extractor_outputsCues() throws Exception {

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecAdapter.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.google.android.exoplayer2.mediacodec;
 
 import android.media.MediaCodec;
@@ -179,7 +178,7 @@ private Configuration(
   interface Factory {
 
     /** Default factory used in most cases. */
-    Factory DEFAULT = new SynchronousMediaCodecAdapter.Factory();
+    Factory DEFAULT = new DefaultMediaCodecAdapterFactory();
 
     /** Creates a {@link MediaCodecAdapter} instance. */
     MediaCodecAdapter createAdapter(Configuration configuration) throws IOException;

File: library/core/src/test/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecAdapterTest.java
Patch:
@@ -54,7 +54,6 @@ public void setUp() throws Exception {
         new AsynchronousMediaCodecAdapter.Factory(
                 /* callbackThreadSupplier= */ () -> callbackThread,
                 /* queueingThreadSupplier= */ () -> queueingThread,
-                /* forceQueueingSynchronizationWorkaround= */ false,
                 /* synchronizeCodecInteractionsWithQueueing= */ false)
             .createAdapter(configuration);
     bufferInfo = new MediaCodec.BufferInfo();

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/DefaultTsPayloadReaderFactory.java
Patch:
@@ -161,6 +161,7 @@ public TsPayloadReader createPayloadReader(int streamType, EsInfo esInfo) {
       case TsExtractor.TS_STREAM_TYPE_DTS:
         return new PesReader(new DtsReader(esInfo.language));
       case TsExtractor.TS_STREAM_TYPE_H262:
+      case TsExtractor.TS_STREAM_TYPE_DC2_H262:
         return new PesReader(new H262Reader(buildUserDataReader(esInfo)));
       case TsExtractor.TS_STREAM_TYPE_H263:
         return new PesReader(new H263Reader(buildUserDataReader(esInfo)));

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
Patch:
@@ -97,6 +97,7 @@ public final class TsExtractor implements Extractor {
   public static final int TS_STREAM_TYPE_DVBSUBS = 0x59;
 
   // Stream types that aren't defined by the MPEG-2 TS specification.
+  public static final int TS_STREAM_TYPE_DC2_H262 = 0x80;
   public static final int TS_STREAM_TYPE_AIT = 0x101;
 
   public static final int TS_SYNC_BYTE = 0x47; // First byte of each TS packet.

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -461,7 +461,7 @@ private C() {}
 
   /**
    * Playback offload mode. One of {@link #PLAYBACK_OFFLOAD_NOT_SUPPORTED},{@link
-   * PLAYBACK_OFFLOAD_SUPPORTED} or {@link PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED}.
+   * #PLAYBACK_OFFLOAD_SUPPORTED} or {@link #PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED}.
    */
   @IntDef({
     PLAYBACK_OFFLOAD_NOT_SUPPORTED,

File: library/common/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelectionParameters.java
Patch:
@@ -31,6 +31,7 @@
 import com.google.android.exoplayer2.Bundleable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.MediaItem;
+import com.google.android.exoplayer2.source.TrackGroup;
 import com.google.android.exoplayer2.util.Util;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.java
Patch:
@@ -508,6 +508,9 @@ public PlayerControlView(
     shuffleOnContentDescription = resources.getString(R.string.exo_controls_shuffle_on_description);
     shuffleOffContentDescription =
         resources.getString(R.string.exo_controls_shuffle_off_description);
+
+    currentPosition = C.TIME_UNSET;
+    currentBufferedPosition = C.TIME_UNSET;
   }
 
   /**

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.java
Patch:
@@ -343,8 +343,8 @@ public interface ProgressUpdateListener {
   private long[] extraAdGroupTimesMs;
   private boolean[] extraPlayedAdGroups;
   private long currentWindowOffset;
-  private long currentPosition;
-  private long currentBufferedPosition;
+  private long currentPosition = C.POSITION_UNSET;
+  private long currentBufferedPosition = C.POSITION_UNSET;
 
   public PlayerControlView(Context context) {
     this(context, /* attrs= */ null);

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -1219,7 +1219,8 @@ private void updatePlaybackInfo(
       }
       newMediaMetadata = mediaItem != null ? mediaItem.mediaMetadata : MediaMetadata.EMPTY;
     }
-    if (!previousPlaybackInfo.staticMetadata.equals(newPlaybackInfo.staticMetadata)) {
+    if (mediaItemTransitioned
+        || !previousPlaybackInfo.staticMetadata.equals(newPlaybackInfo.staticMetadata)) {
       newMediaMetadata =
           newMediaMetadata.buildUpon().populateFromMetadata(newPlaybackInfo.staticMetadata).build();
     }

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioCapabilities.java
Patch:
@@ -90,8 +90,9 @@ public static AudioCapabilities getCapabilities(Context context) {
     }
     // AudioTrack.isDirectPlaybackSupported returns true for encodings that are supported for audio
     // offload, as well as for encodings we want to list for passthrough mode. Therefore we only use
-    // it on TV devices, which generally shouldn't support audio offload for surround encodings.
-    if (Util.SDK_INT >= 29 && Util.isTv(context)) {
+    // it on TV and Automotive devices, which generally shouldn't support audio offload for surround
+    // encodings.
+    if (Util.SDK_INT >= 29 && (Util.isTv(context) || Util.isAutomotive(context))) {
       return new AudioCapabilities(
           Api29.getDirectPlaybackSupportedEncodings(), DEFAULT_MAX_CHANNEL_COUNT);
     }

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -1634,6 +1634,7 @@ private boolean useOffloadedPlayback(Format format, AudioAttributes audioAttribu
     }
   }
 
+  @RequiresApi(29)
   @C.AudioManagerOffloadMode
   private int getOffloadedPlaybackSupport(
       AudioFormat audioFormat, android.media.AudioAttributes audioAttributes) {

File: library/common/src/main/java/com/google/android/exoplayer2/util/MimeTypes.java
Patch:
@@ -98,6 +98,8 @@ public final class MimeTypes {
 
   public static final String TEXT_EXOPLAYER_CUES = BASE_TYPE_TEXT + "/x-exoplayer-cues";
 
+  public static final String TEXT_UNKNOWN = BASE_TYPE_TEXT + "/x-unknown";
+
   // application/ MIME types
 
   public static final String APPLICATION_MP4 = BASE_TYPE_APPLICATION + "/mp4";

File: library/core/src/main/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactory.java
Patch:
@@ -381,7 +381,7 @@ public MediaSource createMediaSource(MediaItem mediaItem) {
       mediaSources[0] = mediaSource;
       for (int i = 0; i < subtitles.size(); i++) {
         if (useProgressiveMediaSourceForSubtitles
-            && subtitles.get(i).mimeType.equals(MimeTypes.TEXT_VTT)) {
+            && MimeTypes.TEXT_VTT.equals(subtitles.get(i).mimeType)) {
           int index = i;
           ProgressiveMediaSource.Factory progressiveMediaSourceFactory =
               new ProgressiveMediaSource.Factory(

File: library/core/src/main/java/com/google/android/exoplayer2/source/SingleSampleMediaSource.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.source;
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+import static com.google.common.base.MoreObjects.firstNonNull;
 
 import android.net.Uri;
 import androidx.annotation.Nullable;
@@ -28,6 +29,7 @@
 import com.google.android.exoplayer2.upstream.DefaultLoadErrorHandlingPolicy;
 import com.google.android.exoplayer2.upstream.LoadErrorHandlingPolicy;
 import com.google.android.exoplayer2.upstream.TransferListener;
+import com.google.android.exoplayer2.util.MimeTypes;
 import java.util.Collections;
 
 /**
@@ -163,7 +165,7 @@ private SingleSampleMediaSource(
     format =
         new Format.Builder()
             .setId(trackId)
-            .setSampleMimeType(subtitle.mimeType)
+            .setSampleMimeType(firstNonNull(subtitle.mimeType, MimeTypes.TEXT_UNKNOWN))
             .setLanguage(subtitle.language)
             .setSelectionFlags(subtitle.selectionFlags)
             .setRoleFlags(subtitle.roleFlags)

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/IntentUtil.java
Patch:
@@ -203,7 +203,7 @@ private static void addPlaybackPropertiesToIntent(
 
   private static void addDrmConfigurationToIntent(
       MediaItem.DrmConfiguration drmConfiguration, Intent intent, String extrasKeySuffix) {
-    intent.putExtra(DRM_SCHEME_EXTRA + extrasKeySuffix, drmConfiguration.uuid.toString());
+    intent.putExtra(DRM_SCHEME_EXTRA + extrasKeySuffix, drmConfiguration.scheme.toString());
     intent.putExtra(
         DRM_LICENSE_URI_EXTRA + extrasKeySuffix,
         drmConfiguration.licenseUri != null ? drmConfiguration.licenseUri.toString() : null);

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -329,7 +329,7 @@ private List<MediaItem> createMediaItems(Intent intent) {
           showToast(R.string.error_drm_unsupported_before_api_18);
           finish();
           return Collections.emptyList();
-        } else if (!FrameworkMediaDrm.isCryptoSchemeSupported(drmConfiguration.uuid)) {
+        } else if (!FrameworkMediaDrm.isCryptoSchemeSupported(drmConfiguration.scheme)) {
           showToast(R.string.error_drm_unsupported_scheme);
           finish();
           return Collections.emptyList();

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/DefaultMediaItemConverter.java
Patch:
@@ -144,7 +144,7 @@ private static JSONObject getMediaItemJson(MediaItem mediaItem) throws JSONExcep
   private static JSONObject getDrmConfigurationJson(MediaItem.DrmConfiguration drmConfiguration)
       throws JSONException {
     JSONObject json = new JSONObject();
-    json.put(KEY_UUID, drmConfiguration.uuid);
+    json.put(KEY_UUID, drmConfiguration.scheme);
     json.put(KEY_LICENSE_URI, drmConfiguration.licenseUri);
     json.put(KEY_REQUEST_HEADERS, new JSONObject(drmConfiguration.requestHeaders));
     return json;
@@ -159,9 +159,9 @@ private static JSONObject getPlayerConfigJson(MediaItem mediaItem) throws JSONEx
     MediaItem.DrmConfiguration drmConfiguration = mediaItem.playbackProperties.drmConfiguration;
 
     String drmScheme;
-    if (C.WIDEVINE_UUID.equals(drmConfiguration.uuid)) {
+    if (C.WIDEVINE_UUID.equals(drmConfiguration.scheme)) {
       drmScheme = "widevine";
-    } else if (C.PLAYREADY_UUID.equals(drmConfiguration.uuid)) {
+    } else if (C.PLAYREADY_UUID.equals(drmConfiguration.scheme)) {
       drmScheme = "playready";
     } else {
       return null;

File: library/common/src/test/java/com/google/android/exoplayer2/MediaItemTest.java
Patch:
@@ -106,6 +106,7 @@ public void builderSetDrmPropertiesIndividually() {
             .build();
 
     assertThat(mediaItem.playbackProperties.drmConfiguration).isNotNull();
+    assertThat(mediaItem.playbackProperties.drmConfiguration.scheme).isEqualTo(C.WIDEVINE_UUID);
     assertThat(mediaItem.playbackProperties.drmConfiguration.uuid).isEqualTo(C.WIDEVINE_UUID);
     assertThat(mediaItem.playbackProperties.drmConfiguration.licenseUri).isEqualTo(licenseUri);
     assertThat(mediaItem.playbackProperties.drmConfiguration.requestHeaders)
@@ -140,6 +141,7 @@ public void builderSetDrmConfigurationOverwritesIndividualProperties() {
             .build();
 
     assertThat(mediaItem.playbackProperties.drmConfiguration).isNotNull();
+    assertThat(mediaItem.playbackProperties.drmConfiguration.scheme).isEqualTo(C.CLEARKEY_UUID);
     assertThat(mediaItem.playbackProperties.drmConfiguration.uuid).isEqualTo(C.CLEARKEY_UUID);
     assertThat(mediaItem.playbackProperties.drmConfiguration.licenseUri).isNull();
     assertThat(mediaItem.playbackProperties.drmConfiguration.requestHeaders).isEmpty();
@@ -172,6 +174,7 @@ public void builderSetDrmConfiguration() {
             .build();
 
     assertThat(mediaItem.playbackProperties.drmConfiguration).isNotNull();
+    assertThat(mediaItem.playbackProperties.drmConfiguration.scheme).isEqualTo(C.WIDEVINE_UUID);
     assertThat(mediaItem.playbackProperties.drmConfiguration.uuid).isEqualTo(C.WIDEVINE_UUID);
     assertThat(mediaItem.playbackProperties.drmConfiguration.licenseUri).isEqualTo(licenseUri);
     assertThat(mediaItem.playbackProperties.drmConfiguration.requestHeaders)

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManagerProvider.java
Patch:
@@ -107,7 +107,7 @@ private DrmSessionManager createManager(MediaItem.DrmConfiguration drmConfigurat
     DefaultDrmSessionManager drmSessionManager =
         new DefaultDrmSessionManager.Builder()
             .setUuidAndExoMediaDrmProvider(
-                drmConfiguration.uuid, FrameworkMediaDrm.DEFAULT_PROVIDER)
+                drmConfiguration.scheme, FrameworkMediaDrm.DEFAULT_PROVIDER)
             .setMultiSession(drmConfiguration.multiSession)
             .setPlayClearSamplesWithoutKeys(drmConfiguration.playClearContentWithoutKey)
             .setUseDrmSessionsForClearContent(Ints.toArray(drmConfiguration.sessionForClearTypes))

File: library/common/src/main/java/com/google/android/exoplayer2/source/ads/AdPlaybackState.java
Patch:
@@ -118,9 +118,10 @@ public int getFirstAdIndexToPlay() {
 
     /**
      * Returns the index of the next ad in the ad group that should be played after playing {@code
-     * lastPlayedAdIndex}, or {@link #count} if no later ads should be played.
+     * lastPlayedAdIndex}, or {@link #count} if no later ads should be played. If no ads have been
+     * played, pass -1 to get the index of the first ad to play.
      */
-    public int getNextAdIndexToPlay(@IntRange(from = 0) int lastPlayedAdIndex) {
+    public int getNextAdIndexToPlay(@IntRange(from = -1) int lastPlayedAdIndex) {
       int nextAdIndexToPlay = lastPlayedAdIndex + 1;
       while (nextAdIndexToPlay < states.length) {
         if (isServerSideInserted

File: library/common/src/main/java/com/google/android/exoplayer2/util/MimeTypes.java
Patch:
@@ -78,7 +78,7 @@ public final class MimeTypes {
   public static final String AUDIO_DTS = BASE_TYPE_AUDIO + "/vnd.dts";
   public static final String AUDIO_DTS_HD = BASE_TYPE_AUDIO + "/vnd.dts.hd";
   public static final String AUDIO_DTS_EXPRESS = BASE_TYPE_AUDIO + "/vnd.dts.hd;profile=lbr";
-  public static final String AUDIO_DTS_UHD = BASE_TYPE_AUDIO + "/vnd.dts.uhd";
+  public static final String AUDIO_DTS_X = BASE_TYPE_AUDIO + "/vnd.dts.uhd;profile=p2";
   public static final String AUDIO_VORBIS = BASE_TYPE_AUDIO + "/vorbis";
   public static final String AUDIO_OPUS = BASE_TYPE_AUDIO + "/opus";
   public static final String AUDIO_AMR = BASE_TYPE_AUDIO + "/amr";
@@ -410,7 +410,7 @@ public static String getMediaMimeType(@Nullable String codec) {
     } else if (codec.startsWith("dtsh") || codec.startsWith("dtsl")) {
       return MimeTypes.AUDIO_DTS_HD;
     } else if (codec.startsWith("dtsx")) {
-      return MimeTypes.AUDIO_DTS_UHD;
+      return MimeTypes.AUDIO_DTS_X;
     } else if (codec.startsWith("opus")) {
       return MimeTypes.AUDIO_OPUS;
     } else if (codec.startsWith("vorbis")) {

File: library/common/src/test/java/com/google/android/exoplayer2/util/MimeTypesTest.java
Patch:
@@ -140,7 +140,7 @@ public void getMediaMimeType_fromValidCodecs_returnsCorrectMimeType() {
     assertThat(MimeTypes.getMediaMimeType("dtse")).isEqualTo(MimeTypes.AUDIO_DTS_EXPRESS);
     assertThat(MimeTypes.getMediaMimeType("dtsh")).isEqualTo(MimeTypes.AUDIO_DTS_HD);
     assertThat(MimeTypes.getMediaMimeType("dtsl")).isEqualTo(MimeTypes.AUDIO_DTS_HD);
-    assertThat(MimeTypes.getMediaMimeType("dtsx")).isEqualTo(MimeTypes.AUDIO_DTS_UHD);
+    assertThat(MimeTypes.getMediaMimeType("dtsx")).isEqualTo(MimeTypes.AUDIO_DTS_X);
     assertThat(MimeTypes.getMediaMimeType("opus")).isEqualTo(MimeTypes.AUDIO_OPUS);
     assertThat(MimeTypes.getMediaMimeType("vorbis")).isEqualTo(MimeTypes.AUDIO_VORBIS);
     assertThat(MimeTypes.getMediaMimeType("mp4a")).isEqualTo(MimeTypes.AUDIO_AAC);

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -1374,7 +1374,7 @@ private static void parseAudioSampleEntry(
     } else if (atomType == Atom.TYPE_dtse) {
       mimeType = MimeTypes.AUDIO_DTS_EXPRESS;
     } else if (atomType == Atom.TYPE_dtsx) {
-      mimeType = MimeTypes.AUDIO_DTS_UHD;
+      mimeType = MimeTypes.AUDIO_DTS_X;
     } else if (atomType == Atom.TYPE_samr) {
       mimeType = MimeTypes.AUDIO_AMR_NB;
     } else if (atomType == Atom.TYPE_sawb) {

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
Patch:
@@ -135,7 +135,7 @@ public interface Callback extends SequenceableLoader.Callback<HlsSampleStreamWra
   private final LoadErrorHandlingPolicy loadErrorHandlingPolicy;
   private final Loader loader;
   private final MediaSourceEventListener.EventDispatcher mediaSourceEventDispatcher;
-  @HlsMediaSource.MetadataType private final int metadataType;
+  private final @HlsMediaSource.MetadataType int metadataType;
   private final HlsChunkSource.HlsChunkHolder nextChunkHolder;
   private final ArrayList<HlsMediaChunk> mediaChunks;
   private final List<HlsMediaChunk> readOnlyMediaChunks;

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DefaultDownloaderFactory.java
Patch:
@@ -98,7 +98,6 @@ private Downloader createDownloader(DownloadRequest request, @C.ContentType int
             .setUri(request.uri)
             .setStreamKeys(request.streamKeys)
             .setCustomCacheKey(request.customCacheKey)
-            .setDrmKeySetId(request.keySetId)
             .build();
     try {
       return constructor.newInstance(mediaItem, cacheDataSourceFactory, executor);

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadRequest.java
Patch:
@@ -229,7 +229,6 @@ public MediaItem toMediaItem() {
         .setCustomCacheKey(customCacheKey)
         .setMimeType(mimeType)
         .setStreamKeys(streamKeys)
-        .setDrmKeySetId(keySetId)
         .build();
   }
 

File: library/core/src/test/java/com/google/android/exoplayer2/source/SinglePeriodTimelineTest.java
Patch:
@@ -79,9 +79,9 @@ public void getPeriodPositionDynamicWindowKnownDuration() {
         timeline.getPeriodPosition(window, period, 0, C.TIME_UNSET, windowDurationUs + 1);
     assertThat(position).isNull();
     // Should return (0, duration) with a projection equal to window duration.
-    position = timeline.getPeriodPosition(window, period, 0, C.TIME_UNSET, windowDurationUs);
+    position = timeline.getPeriodPosition(window, period, 0, C.TIME_UNSET, windowDurationUs - 1);
     assertThat(position.first).isEqualTo(timeline.getUidOfPeriod(0));
-    assertThat(position.second).isEqualTo(windowDurationUs);
+    assertThat(position.second).isEqualTo(windowDurationUs - 1);
     // Should return (0, 0) without a position projection.
     position = timeline.getPeriodPosition(window, period, 0, C.TIME_UNSET, 0);
     assertThat(position.first).isEqualTo(timeline.getUidOfPeriod(0));

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageUtil.java
Patch:
@@ -94,7 +94,7 @@ public RtspAuthUserInfo(String username, String password) {
 
   // Session header pattern, see RFC2326 Sections 3.4 and 12.37.
   private static final Pattern SESSION_HEADER_PATTERN =
-      Pattern.compile("([\\w$-_.+]+)(?:;\\s?timeout=(\\d+))?");
+      Pattern.compile("([\\w$\\-_.+]+)(?:;\\s?timeout=(\\d+))?");
 
   // WWW-Authenticate header pattern, see RFC2068 Sections 14.46 and RFC2069.
   private static final Pattern WWW_AUTHENTICATION_HEADER_DIGEST_PATTERN =

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspClient.java
Patch:
@@ -501,7 +501,7 @@ private void handleRtspMessage(List<String> message) {
             ImmutableList<RtspTrackTiming> trackTimingList =
                 rtpInfoString == null
                     ? ImmutableList.of()
-                    : RtspTrackTiming.parseTrackTiming(rtpInfoString);
+                    : RtspTrackTiming.parseTrackTiming(rtpInfoString, uri);
             onPlayResponseReceived(new RtspPlayResponse(response.status, timing, trackTimingList));
             break;
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioSink.java
Patch:
@@ -446,6 +446,6 @@ boolean handleBuffer(ByteBuffer buffer, long presentationTimeUs, int encodedAcce
    */
   void experimentalFlushWithoutAudioTrackRelease();
 
-  /** Resets the renderer, releasing any resources that it currently holds. */
+  /** Resets the sink, releasing any resources that it currently holds. */
   void reset();
 }

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DefaultDownloadIndex.java
Patch:
@@ -415,7 +415,7 @@ private Cursor getCursor(String selection, @Nullable String[] selectionArgs)
           .append('.')
           .append(streamKey.groupIndex)
           .append('.')
-          .append(streamKey.trackIndex)
+          .append(streamKey.streamIndex)
           .append(',');
     }
     if (stringBuilder.length() > 0) {

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifest.java
Patch:
@@ -189,7 +189,7 @@ private static ArrayList<AdaptationSet> copyAdaptationSets(
       List<Representation> representations = adaptationSet.representations;
       ArrayList<Representation> copyRepresentations = new ArrayList<>();
       do {
-        Representation representation = representations.get(key.trackIndex);
+        Representation representation = representations.get(key.streamIndex);
         copyRepresentations.add(representation);
         key = keys.poll();
       } while (key.periodIndex == periodIndex && key.groupIndex == adaptationSetIndex);

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMasterPlaylist.java
Patch:
@@ -308,7 +308,7 @@ private static <T> List<T> copyStreams(
       T stream = streams.get(i);
       for (int j = 0; j < streamKeys.size(); j++) {
         StreamKey streamKey = streamKeys.get(j);
-        if (streamKey.groupIndex == groupIndex && streamKey.trackIndex == i) {
+        if (streamKey.groupIndex == groupIndex && streamKey.streamIndex == i) {
           copiedStreams.add(stream);
           break;
         }

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifest.java
Patch:
@@ -339,7 +339,7 @@ public final SsManifest copy(List<StreamKey> streamKeys) {
         copiedFormats.clear();
       }
       currentStreamElement = streamElement;
-      copiedFormats.add(streamElement.formats[key.trackIndex]);
+      copiedFormats.add(streamElement.formats[key.streamIndex]);
     }
     if (currentStreamElement != null) {
       // Add the last stream element.

File: library/common/src/main/java/com/google/android/exoplayer2/metadata/id3/Id3Decoder.java
Patch:
@@ -806,9 +806,9 @@ private static int indexOfEos(byte[] data, int fromIndex, int encoding) {
       return terminationPos;
     }
 
-    // Otherwise ensure an even index and look for a second zero byte.
+    // Otherwise ensure an even offset from the start, and look for a second zero byte.
     while (terminationPos < data.length - 1) {
-      if (terminationPos % 2 == 0 && data[terminationPos + 1] == (byte) 0) {
+      if ((terminationPos - fromIndex) % 2 == 0 && data[terminationPos + 1] == (byte) 0) {
         return terminationPos;
       }
       terminationPos = indexOfZeroByte(data, terminationPos + 1);

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
Patch:
@@ -597,14 +597,14 @@ public long open(DataSpec dataSpec) throws IOException {
 
   @Override
   public int read(byte[] buffer, int offset, int length) throws IOException {
-    DataSpec requestDataSpec = checkNotNull(this.requestDataSpec);
-    DataSpec currentDataSpec = checkNotNull(this.currentDataSpec);
     if (length == 0) {
       return 0;
     }
     if (bytesRemaining == 0) {
       return C.RESULT_END_OF_INPUT;
     }
+    DataSpec requestDataSpec = checkNotNull(this.requestDataSpec);
+    DataSpec currentDataSpec = checkNotNull(this.currentDataSpec);
     try {
       if (readPosition >= checkCachePosition) {
         openNextSource(requestDataSpec, true);

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/MediaDescription.java
Patch:
@@ -43,11 +43,11 @@ public static final class RtpMapAttribute {
 
     /** Parses the RTPMAP attribute value (with the part "a=rtpmap:" removed). */
     public static RtpMapAttribute parse(String rtpmapString) throws ParserException {
-      String[] rtpmapInfo = Util.split(rtpmapString, " ");
+      String[] rtpmapInfo = Util.splitAtFirst(rtpmapString, " ");
       checkArgument(rtpmapInfo.length == 2);
       int payloadType = parseInt(rtpmapInfo[0]);
 
-      String[] mediaInfo = Util.split(rtpmapInfo[1], "/");
+      String[] mediaInfo = Util.split(rtpmapInfo[1].trim(), "/");
       checkArgument(mediaInfo.length >= 2);
       int clockRate = parseInt(mediaInfo[1]);
       int encodingParameters = C.INDEX_UNSET;

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecUtil.java
Patch:
@@ -580,10 +580,10 @@ private static void applyWorkarounds(String mimeType, List<MediaCodecInfo> decod
       }
     }
 
-    if (Util.SDK_INT < 30 && decoderInfos.size() > 1) {
+    if (Util.SDK_INT < 32 && decoderInfos.size() > 1) {
       String firstCodecName = decoderInfos.get(0).name;
       // Prefer anything other than OMX.qti.audio.decoder.flac on older devices. See [Internal
-      // ref: b/147278539] and [Internal ref: b/147354613].
+      // ref: b/199124812].
       if ("OMX.qti.audio.decoder.flac".equals(firstCodecName)) {
         decoderInfos.add(decoderInfos.remove(0));
       }

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
Patch:
@@ -156,8 +156,7 @@
  * <h2>Tunneling</h2>
  *
  * Tunneled playback can be enabled in cases where the combination of renderers and selected tracks
- * support it. Tunneled playback is enabled by passing an audio session ID to {@link
- * ParametersBuilder#setTunnelingEnabled(boolean)}.
+ * supports it. This can be done by using {@link ParametersBuilder#setTunnelingEnabled(boolean)}.
  */
 public class DefaultTrackSelector extends MappingTrackSelector {
 

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/UdpDataSourceContractTest.java
Patch:
@@ -91,12 +91,12 @@ public void dataSpecWithPositionAndLength_readExpectedRange() {}
   @Test
   @Ignore("UdpDataSource doesn't support DataSpec's position or length [internal: b/175856954]")
   @Override
-  public void dataSpecWithPositionAtEnd_throwsPositionOutOfRangeException() {}
+  public void dataSpecWithPositionAtEnd_readsZeroBytes() {}
 
   @Test
   @Ignore("UdpDataSource doesn't support DataSpec's position or length [internal: b/175856954]")
   @Override
-  public void dataSpecWithPositionAtEndAndLength_throwsPositionOutOfRangeException() {}
+  public void dataSpecWithPositionAtEndAndLength_readsZeroBytes() {}
 
   @Test
   @Ignore("UdpDataSource doesn't support DataSpec's position or length [internal: b/175856954]")

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DataSourceContractTest.java
Patch:
@@ -218,7 +218,7 @@ public void dataSpecWithPositionAndLength_readExpectedRange() throws Exception {
   }
 
   @Test
-  public void dataSpecWithPositionAtEnd_throwsPositionOutOfRangeException() throws Exception {
+  public void dataSpecWithPositionAtEnd_readsZeroBytes() throws Exception {
     ImmutableList<TestResource> resources = getTestResources();
     Assertions.checkArgument(!resources.isEmpty(), "Must provide at least one test resource.");
 
@@ -249,8 +249,7 @@ public void dataSpecWithPositionAtEnd_throwsPositionOutOfRangeException() throws
   }
 
   @Test
-  public void dataSpecWithPositionAtEndAndLength_throwsPositionOutOfRangeException()
-      throws Exception {
+  public void dataSpecWithPositionAtEndAndLength_readsZeroBytes() throws Exception {
     ImmutableList<TestResource> resources = getTestResources();
     Assertions.checkArgument(!resources.isEmpty(), "Must provide at least one test resource.");
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -757,6 +757,9 @@ public void setPlayer(@Nullable Player player) {
     if (player != null) {
       player.addListener(componentListener);
     }
+    if (player instanceof ForwardingPlayer) {
+      player = ((ForwardingPlayer) player).getWrappedPlayer();
+    }
     if (player instanceof ExoPlayer) {
       TrackSelector trackSelector = ((ExoPlayer) player).getTrackSelector();
       if (trackSelector instanceof DefaultTrackSelector) {

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/BaseUrlExclusionList.java
Patch:
@@ -34,8 +34,8 @@
 import java.util.Set;
 
 /**
- * Holds the state of {@link #exclude(BaseUrl, long) excluded} base URLs to be used {@link
- * #selectBaseUrl(List) to select} a base URL based on these exclusions.
+ * Holds the state of {@link #exclude(BaseUrl, long) excluded} base URLs to be used to {@link
+ * #selectBaseUrl(List) select} a base URL based on these exclusions.
  */
 public final class BaseUrlExclusionList {
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
Patch:
@@ -367,8 +367,8 @@ protected MediaCodecAdapter.Configuration getMediaCodecConfiguration(
         MimeTypes.AUDIO_RAW.equals(codecInfo.mimeType)
             && !MimeTypes.AUDIO_RAW.equals(format.sampleMimeType);
     decryptOnlyCodecFormat = decryptOnlyCodecEnabled ? format : null;
-    return new MediaCodecAdapter.Configuration(
-        codecInfo, mediaFormat, format, /* surface= */ null, crypto, /* flags= */ 0);
+    return MediaCodecAdapter.Configuration.createForAudioDecoding(
+        codecInfo, mediaFormat, format, crypto);
   }
 
   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -640,8 +640,8 @@ protected MediaCodecAdapter.Configuration getMediaCodecConfiguration(
       }
       surface = dummySurface;
     }
-    return new MediaCodecAdapter.Configuration(
-        codecInfo, mediaFormat, format, surface, crypto, /* flags= */ 0);
+    return MediaCodecAdapter.Configuration.createForVideoDecoding(
+        codecInfo, mediaFormat, format, surface, crypto);
   }
 
   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/AdaptiveTrackSelection.java
Patch:
@@ -273,7 +273,7 @@ public AdaptiveTrackSelection(TrackGroup group, int[] tracks, BandwidthMeter ban
   protected AdaptiveTrackSelection(
       TrackGroup group,
       int[] tracks,
-      int type,
+      @Type int type,
       BandwidthMeter bandwidthMeter,
       long minDurationForQualityIncreaseMs,
       long maxDurationForQualityDecreaseMs,

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/BaseTrackSelection.java
Patch:
@@ -39,7 +39,7 @@ public abstract class BaseTrackSelection implements ExoTrackSelection {
   protected final int[] tracks;
 
   /** The type of the selection. */
-  private final int type;
+  private final @Type int type;
   /** The {@link Format}s of the selected tracks, in order of decreasing bandwidth. */
   private final Format[] formats;
   /** Selected track exclusion timestamps, in order of decreasing bandwidth. */
@@ -63,7 +63,7 @@ public BaseTrackSelection(TrackGroup group, int... tracks) {
    *     null or empty. May be in any order.
    * @param type The type that will be returned from {@link TrackSelection#getType()}.
    */
-  public BaseTrackSelection(TrackGroup group, int[] tracks, int type) {
+  public BaseTrackSelection(TrackGroup group, int[] tracks, @Type int type) {
     Assertions.checkState(tracks.length > 0);
     this.type = type;
     this.group = Assertions.checkNotNull(group);

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
Patch:
@@ -1262,7 +1262,7 @@ public static final class SelectionOverride implements Bundleable {
     public final int groupIndex;
     public final int[] tracks;
     public final int length;
-    public final int type;
+    public final @TrackSelection.Type int type;
 
     /**
      * Constructs a {@code SelectionOverride} to override tracks of a group.
@@ -1281,7 +1281,7 @@ public SelectionOverride(int groupIndex, int... tracks) {
      * @param tracks The overriding track indices within the track group.
      * @param type The type that will be returned from {@link TrackSelection#getType()}.
      */
-    public SelectionOverride(int groupIndex, int[] tracks, int type) {
+    public SelectionOverride(int groupIndex, int[] tracks, @TrackSelection.Type int type) {
       this.groupIndex = groupIndex;
       this.tracks = Arrays.copyOf(tracks, tracks.length);
       this.length = tracks.length;

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/ExoTrackSelection.java
Patch:
@@ -43,7 +43,7 @@ final class Definition {
     /** The indices of the selected tracks in {@link #group}. */
     public final int[] tracks;
     /** The type that will be returned from {@link TrackSelection#getType()}. */
-    public final int type;
+    public final @Type int type;
 
     /**
      * @param group The {@link TrackGroup}. Must not be null.
@@ -60,7 +60,7 @@ public Definition(TrackGroup group, int... tracks) {
      *     null or empty. May be in any order.
      * @param type The type that will be returned from {@link TrackSelection#getType()}.
      */
-    public Definition(TrackGroup group, int[] tracks, int type) {
+    public Definition(TrackGroup group, int[] tracks, @Type int type) {
       this.group = group;
       this.tracks = tracks;
       this.type = type;

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashChunkSource.java
Patch:
@@ -40,7 +40,7 @@ interface Factory {
      * @param periodIndex The index of the corresponding period in the manifest.
      * @param adaptationSetIndices The indices of the corresponding adaptation sets in the period.
      * @param trackSelection The track selection.
-     * @param type The {@link C.TrackType track type}.
+     * @param trackType The {@link C.TrackType track type}.
      * @param elapsedRealtimeOffsetMs If known, an estimate of the instantaneous difference between
      *     server-side unix time and {@link SystemClock#elapsedRealtime()} in milliseconds,
      *     specified as the server's unix time minus the local elapsed time. Or {@link C#TIME_UNSET}
@@ -58,7 +58,7 @@ DashChunkSource createDashChunkSource(
         int periodIndex,
         int[] adaptationSetIndices,
         ExoTrackSelection trackSelection,
-        @C.TrackType int type,
+        @C.TrackType int trackType,
         long elapsedRealtimeOffsetMs,
         boolean enableEventMessageTrack,
         List<Format> closedCaptionFormats,

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/IntentUtil.java
Patch:
@@ -216,7 +216,7 @@ private static void addDrmConfigurationToIntent(
     }
     intent.putExtra(DRM_KEY_REQUEST_PROPERTIES_EXTRA + extrasKeySuffix, drmKeyRequestProperties);
 
-    List<Integer> drmSessionForClearTypes = drmConfiguration.sessionForClearTypes;
+    List<@C.TrackType Integer> drmSessionForClearTypes = drmConfiguration.sessionForClearTypes;
     if (!drmSessionForClearTypes.isEmpty()) {
       // Only video and audio together are supported.
       Assertions.checkState(

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
Patch:
@@ -1022,7 +1022,7 @@ private boolean updateTracksAndSelectionsAndNotifyIfChanged() {
       trackGroups[i] = new TrackGroup(CastUtils.mediaTrackToFormat(mediaTrack));
 
       long id = mediaTrack.getId();
-      int trackType = MimeTypes.getTrackType(mediaTrack.getContentType());
+      @C.TrackType int trackType = MimeTypes.getTrackType(mediaTrack.getContentType());
       int rendererIndex = getRendererIndexForTrackType(trackType);
       if (isTrackActive(id, activeTrackIds)
           && rendererIndex != C.INDEX_UNSET
@@ -1289,7 +1289,7 @@ private static boolean isTrackActive(long id, long[] activeTrackIds) {
     return false;
   }
 
-  private static int getRendererIndexForTrackType(int trackType) {
+  private static int getRendererIndexForTrackType(@C.TrackType int trackType) {
     return trackType == C.TRACK_TYPE_VIDEO
         ? RENDERER_INDEX_VIDEO
         : trackType == C.TRACK_TYPE_AUDIO

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -29,8 +29,10 @@
 import com.google.android.exoplayer2.util.Util;
 import com.google.errorprone.annotations.InlineMe;
 import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.util.UUID;
 
 /** Defines constants used by the library. */
@@ -658,6 +660,7 @@ private C() {}
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
+  @Target({ElementType.TYPE_USE})
   @IntDef(
       open = true,
       value = {

File: library/common/src/main/java/com/google/android/exoplayer2/DeviceInfo.java
Patch:
@@ -30,7 +30,7 @@ public final class DeviceInfo implements Bundleable {
   /** Types of playback. One of {@link #PLAYBACK_TYPE_LOCAL} or {@link #PLAYBACK_TYPE_REMOTE}. */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_PARAMETER, ElementType.TYPE_USE})
+  @Target({ElementType.TYPE_USE})
   @IntDef({
     PLAYBACK_TYPE_LOCAL,
     PLAYBACK_TYPE_REMOTE,

File: library/core/src/main/java/com/google/android/exoplayer2/BaseRenderer.java
Patch:
@@ -30,7 +30,7 @@
 /** An abstract base class suitable for most {@link Renderer} implementations. */
 public abstract class BaseRenderer implements Renderer, RendererCapabilities {
 
-  private final int trackType;
+  private final @C.TrackType int trackType;
   private final FormatHolder formatHolder;
 
   @Nullable private RendererConfiguration configuration;
@@ -48,14 +48,14 @@ public abstract class BaseRenderer implements Renderer, RendererCapabilities {
    * @param trackType The track type that the renderer handles. One of the {@link C} {@code
    *     TRACK_TYPE_*} constants.
    */
-  public BaseRenderer(int trackType) {
+  public BaseRenderer(@C.TrackType int trackType) {
     this.trackType = trackType;
     formatHolder = new FormatHolder();
     readingPositionUs = C.TIME_END_OF_SOURCE;
   }
 
   @Override
-  public final int getTrackType() {
+  public final @C.TrackType int getTrackType() {
     return trackType;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -897,8 +897,9 @@ public SimpleExoPlayer build() {
    * return {@link C#TRACK_TYPE_AUDIO} and a text renderer will return {@link C#TRACK_TYPE_TEXT}.
    *
    * @param index The index of the renderer.
-   * @return One of the {@code TRACK_TYPE_*} constants defined in {@link C}.
+   * @return The {@link C.TrackType track type} that the renderer handles.
    */
+  @C.TrackType
   int getRendererType(int index);
 
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -928,7 +928,7 @@ public int getRendererCount() {
     return renderers.length;
   }
 
-  public int getRendererType(int index) {
+  public @C.TrackType int getRendererType(int index) {
     return renderers[index].getTrackType();
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/NoSampleRenderer.java
Patch:
@@ -35,7 +35,7 @@ public abstract class NoSampleRenderer implements Renderer, RendererCapabilities
   private boolean streamIsFinal;
 
   @Override
-  public final int getTrackType() {
+  public final @C.TrackType int getTrackType() {
     return C.TRACK_TYPE_NONE;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/RendererCapabilities.java
Patch:
@@ -201,8 +201,9 @@ static int getTunnelingSupport(@Capabilities int supportFlags) {
    * text renderer will return {@link C#TRACK_TYPE_TEXT}, and so on.
    *
    * @see Renderer#getTrackType()
-   * @return One of the {@code TRACK_TYPE_*} constants defined in {@link C}.
+   * @return The {@link C.TrackType track type}.
    */
+  @C.TrackType
   int getTrackType();
 
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -1427,7 +1427,7 @@ public int getRendererCount() {
   }
 
   @Override
-  public int getRendererType(int index) {
+  public @C.TrackType int getRendererType(int index) {
     verifyApplicationThread();
     return player.getRendererType(index);
   }

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/PlaybackStats.java
Patch:
@@ -172,7 +172,7 @@ public int hashCode() {
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)
-  @Target({ElementType.TYPE_PARAMETER, ElementType.TYPE_USE})
+  @Target({ElementType.TYPE_USE})
   @IntDef({
     PLAYBACK_STATE_NOT_STARTED,
     PLAYBACK_STATE_JOINING_BACKGROUND,

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/PlaybackStatsListener.java
Patch:
@@ -527,6 +527,7 @@ public void onEvents(
         boolean audioEnabled = false;
         for (TrackSelection trackSelection : player.getCurrentTrackSelections().getAll()) {
           if (trackSelection != null && trackSelection.length() > 0) {
+            @C.TrackType
             int trackType = MimeTypes.getTrackType(trackSelection.getFormat(0).sampleMimeType);
             if (trackType == C.TRACK_TYPE_VIDEO) {
               videoEnabled = true;

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecAdapter.java
Patch:
@@ -52,8 +52,8 @@ public static final class Factory implements MediaCodecAdapter.Factory {
     private final boolean forceQueueingSynchronizationWorkaround;
     private final boolean synchronizeCodecInteractionsWithQueueing;
 
-    /** Creates a factory for the specified {@code trackType}. */
-    public Factory(int trackType) {
+    /** Creates a factory for codecs handling the specified {@link C.TrackType track type}. */
+    public Factory(@C.TrackType int trackType) {
       this(
           trackType,
           /* forceQueueingSynchronizationWorkaround= */ false,

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaLoadData.java
Patch:
@@ -28,10 +28,10 @@ public final class MediaLoadData {
   /** The {@link DataType data type}. */
   @DataType public final int dataType;
   /**
-   * One of the {@link TrackType track type}, which is a media track type if the data corresponds to
-   * media of a specific type, or {@link C#TRACK_TYPE_UNKNOWN} otherwise.
+   * One of the {@link TrackType track types}, which is a media track type if the data corresponds
+   * to media of a specific type, or {@link C#TRACK_TYPE_UNKNOWN} otherwise.
    */
-  @TrackType public final int trackType;
+  public final @TrackType int trackType;
   /**
    * The format of the track to which the data belongs. Null if the data does not belong to a
    * specific track.

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/BaseMediaChunkOutput.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.source.chunk;
 
+import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.extractor.DummyTrackOutput;
 import com.google.android.exoplayer2.extractor.TrackOutput;
 import com.google.android.exoplayer2.source.SampleQueue;
@@ -29,7 +30,7 @@ public final class BaseMediaChunkOutput implements TrackOutputProvider {
 
   private static final String TAG = "BaseMediaChunkOutput";
 
-  private final int[] trackTypes;
+  private final @C.TrackType int[] trackTypes;
   private final SampleQueue[] sampleQueues;
 
   /**
@@ -42,7 +43,7 @@ public BaseMediaChunkOutput(int[] trackTypes, SampleQueue[] sampleQueues) {
   }
 
   @Override
-  public TrackOutput track(int id, int type) {
+  public TrackOutput track(int id, @C.TrackType int type) {
     for (int i = 0; i < trackTypes.length; i++) {
       if (type == trackTypes[i]) {
         return sampleQueues[i];

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/ChunkSampleStream.java
Patch:
@@ -69,7 +69,7 @@ public interface ReleaseCallback<T extends ChunkSource> {
 
   private static final String TAG = "ChunkSampleStream";
 
-  @C.TrackType public final int primaryTrackType;
+  public final @C.TrackType int primaryTrackType;
 
   private final int[] embeddedTrackTypes;
   private final Format[] embeddedTrackFormats;

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/MediaParserChunkExtractor.java
Patch:
@@ -81,15 +81,15 @@ public final class MediaParserChunkExtractor implements ChunkExtractor {
   /**
    * Creates a new instance.
    *
-   * @param primaryTrackType The type of the primary track, or {@link C#TRACK_TYPE_NONE} if there is
-   *     no primary track. Must be one of the {@link C C.TRACK_TYPE_*} constants.
+   * @param primaryTrackType The {@link C.TrackType type} of the primary track. {@link
+   *     C#TRACK_TYPE_NONE} if there is no primary track.
    * @param manifestFormat The chunks {@link Format} as obtained from the manifest.
    * @param closedCaptionFormats A list containing the {@link Format Formats} of the closed-caption
    *     tracks in the chunks.
    */
   @SuppressLint("WrongConstant")
   public MediaParserChunkExtractor(
-      int primaryTrackType, Format manifestFormat, List<Format> closedCaptionFormats) {
+      @C.TrackType int primaryTrackType, Format manifestFormat, List<Format> closedCaptionFormats) {
     outputConsumerAdapter =
         new OutputConsumerAdapterV30(
             manifestFormat, primaryTrackType, /* expectDummySeekMap= */ true);

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaPeriod.java
Patch:
@@ -921,7 +921,7 @@ private static final class TrackGroupInfo {
     private static final int CATEGORY_MANIFEST_EVENTS = 2;
 
     public final int[] adaptationSetIndices;
-    @C.TrackType public final int trackType;
+    public final @C.TrackType int trackType;
     @TrackGroupCategory public final int trackGroupCategory;
 
     public final int eventStreamGroupIndex;

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashUtil.java
Patch:
@@ -103,7 +103,7 @@ public static DashManifest loadManifest(DataSource dataSource, Uri uri) throws I
   @Nullable
   public static Format loadFormatWithDrmInitData(DataSource dataSource, Period period)
       throws IOException {
-    int primaryTrackType = C.TRACK_TYPE_VIDEO;
+    @C.TrackType int primaryTrackType = C.TRACK_TYPE_VIDEO;
     Representation representation = getFirstRepresentation(period, primaryTrackType);
     if (representation == null) {
       primaryTrackType = C.TRACK_TYPE_AUDIO;
@@ -329,7 +329,7 @@ private static ChunkExtractor newChunkExtractor(int trackType, Format format) {
   }
 
   @Nullable
-  private static Representation getFirstRepresentation(Period period, int type) {
+  private static Representation getFirstRepresentation(Period period, @C.TrackType int type) {
     int index = period.getAdaptationSetIndex(type);
     if (index == C.INDEX_UNSET) {
       return null;

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/AdaptationSet.java
Patch:
@@ -32,7 +32,7 @@ public class AdaptationSet {
   public final int id;
 
   /** The {@link C.TrackType track type} of the adaptation set. */
-  @C.TrackType public final int type;
+  public final @C.TrackType int type;
 
   /** {@link Representation}s in the adaptation set. */
   public final List<Representation> representations;

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java
Patch:
@@ -528,8 +528,7 @@ protected AdaptationSet buildAdaptationSet(
         supplementalProperties);
   }
 
-  @C.TrackType
-  protected int parseContentType(XmlPullParser xpp) {
+  protected @C.TrackType int parseContentType(XmlPullParser xpp) {
     String contentType = xpp.getAttributeValue(null, "contentType");
     return TextUtils.isEmpty(contentType)
         ? C.TRACK_TYPE_UNKNOWN

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -280,6 +280,7 @@ private static Track parseTrak(
       boolean isQuickTime)
       throws ParserException {
     Atom.ContainerAtom mdia = checkNotNull(trak.getContainerAtomOfType(Atom.TYPE_mdia));
+    @C.TrackType
     int trackType =
         getTrackTypeForHdlr(parseHdlr(checkNotNull(mdia.getLeafAtomOfType(Atom.TYPE_hdlr)).data));
     if (trackType == C.TRACK_TYPE_UNKNOWN) {
@@ -866,8 +867,7 @@ private static int parseHdlr(ParsableByteArray hdlr) {
   }
 
   /** Returns the track type for a given handler value. */
-  @C.TrackType
-  private static int getTrackTypeForHdlr(int hdlr) {
+  private static @C.TrackType int getTrackTypeForHdlr(int hdlr) {
     if (hdlr == TYPE_soun) {
       return C.TRACK_TYPE_AUDIO;
     } else if (hdlr == TYPE_vide) {

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Track.java
Patch:
@@ -45,7 +45,7 @@ public final class Track {
   /**
    * One of {@link C#TRACK_TYPE_AUDIO}, {@link C#TRACK_TYPE_VIDEO} and {@link C#TRACK_TYPE_TEXT}.
    */
-  @C.TrackType public final int type;
+  public final @C.TrackType int type;
 
   /** The track timescale, defined as the number of time units that pass in one second. */
   public final long timescale;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
Patch:
@@ -125,7 +125,7 @@ public interface Callback extends SequenceableLoader.Callback<HlsSampleStreamWra
           new HashSet<>(
               Arrays.asList(C.TRACK_TYPE_AUDIO, C.TRACK_TYPE_VIDEO, C.TRACK_TYPE_METADATA)));
 
-  @C.TrackType private final int trackType;
+  private final @C.TrackType int trackType;
   private final Callback callback;
   private final HlsChunkSource chunkSource;
   private final Allocator allocator;

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifest.java
Patch:
@@ -60,7 +60,7 @@ public static class StreamElement {
     private static final String URL_PLACEHOLDER_BITRATE_1 = "{bitrate}";
     private static final String URL_PLACEHOLDER_BITRATE_2 = "{Bitrate}";
 
-    @C.TrackType public final int type;
+    public final @C.TrackType int type;
     public final String subType;
     public final long timescale;
     public final String name;

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerMediaClock.java
Patch:
@@ -37,7 +37,7 @@ public TransformerMediaClock() {
    * Updates the time for a given track type. The clock time is computed based on the different
    * track times.
    */
-  public void updateTimeForTrackType(int trackType, long timeUs) {
+  public void updateTimeForTrackType(@C.TrackType int trackType, long timeUs) {
     long previousTimeUs = trackTypeToTimeUs.get(trackType, /* valueIfKeyNotFound= */ C.TIME_UNSET);
     if (previousTimeUs != C.TIME_UNSET && timeUs <= previousTimeUs) {
       // Make sure that the track times are increasing and therefore that the clock time is

File: library/common/src/main/java/com/google/android/exoplayer2/util/BundleableUtils.java
Patch:
@@ -135,7 +135,7 @@ public static <T extends Bundleable> SparseArray<Bundle> toBundleSparseArray(
   }
 
   /**
-   * Set the application class loader to the given {@link Bundle} if no class loader is present.
+   * Sets the application class loader to the given {@link Bundle} if no class loader is present.
    *
    * <p>This assumes that all classes unparceled from {@code bundle} are sharing the class loader of
    * {@code BundleableUtils}.

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -1417,7 +1417,7 @@ public static long toUnsignedLong(int x) {
   }
 
   /**
-   * Return the long that is composed of the bits of the 2 specified integers.
+   * Returns the long that is composed of the bits of the 2 specified integers.
    *
    * @param mostSignificantBits The 32 most significant bits of the long to return.
    * @param leastSignificantBits The 32 least significant bits of the long to return.

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -482,7 +482,7 @@ public Builder(
     }
 
     /**
-     * Set a limit on the time a call to {@link #setForegroundMode} can spend. If a call to {@link
+     * Sets a limit on the time a call to {@link #setForegroundMode} can spend. If a call to {@link
      * #setForegroundMode} takes more than {@code timeoutMs} milliseconds to complete, the player
      * will raise an error via {@link Player.Listener#onPlayerError}.
      *

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -253,7 +253,7 @@ public ExoPlayerImpl(
   }
 
   /**
-   * Set a limit on the time a call to {@link #setForegroundMode} can spend. If a call to {@link
+   * Sets a limit on the time a call to {@link #setForegroundMode} can spend. If a call to {@link
    * #setForegroundMode} takes more than {@code timeoutMs} milliseconds to complete, the player will
    * raise an error via {@link Player.Listener#onPlayerError}.
    *

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
Patch:
@@ -416,7 +416,7 @@ public MediaCodecRenderer(
   }
 
   /**
-   * Set a limit on the time a single {@link #render(long, long)} call can spend draining and
+   * Sets a limit on the time a single {@link #render(long, long)} call can spend draining and
    * filling the decoder.
    *
    * <p>This method should be called right after creating an instance of this class.

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
Patch:
@@ -555,7 +555,7 @@ public Player getPlayer() {
   }
 
   /**
-   * Set the {@link Player} to use.
+   * Sets the {@link Player} to use.
    *
    * <p>To transition a {@link Player} from targeting one view to another, it's recommended to use
    * {@link #switchTargetView(Player, PlayerView, PlayerView)} rather than this method. If you do
@@ -912,7 +912,7 @@ public void setControllerHideDuringAds(boolean controllerHideDuringAds) {
   }
 
   /**
-   * Set the {@link PlayerControlView.VisibilityListener}.
+   * Sets the {@link PlayerControlView.VisibilityListener}.
    *
    * @param listener The listener to be notified about visibility changes, or null to remove the
    *     current listener.
@@ -1030,7 +1030,7 @@ public void setExtraAdGroupMarkers(
   }
 
   /**
-   * Set the {@link AspectRatioFrameLayout.AspectRatioListener}.
+   * Sets the {@link AspectRatioFrameLayout.AspectRatioListener}.
    *
    * @param listener The listener to be notified about aspect ratios changes of the video content or
    *     the content frame.

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -562,7 +562,7 @@ public Player getPlayer() {
   }
 
   /**
-   * Set the {@link Player} to use.
+   * Sets the {@link Player} to use.
    *
    * <p>To transition a {@link Player} from targeting one view to another, it's recommended to use
    * {@link #switchTargetView(Player, StyledPlayerView, StyledPlayerView)} rather than this method.
@@ -917,7 +917,7 @@ public void setControllerHideDuringAds(boolean controllerHideDuringAds) {
   }
 
   /**
-   * Set the {@link StyledPlayerControlView.VisibilityListener}.
+   * Sets the {@link StyledPlayerControlView.VisibilityListener}.
    *
    * @param listener The listener to be notified about visibility changes, or null to remove the
    *     current listener.
@@ -1067,7 +1067,7 @@ public void setExtraAdGroupMarkers(
   }
 
   /**
-   * Set the {@link AspectRatioFrameLayout.AspectRatioListener}.
+   * Sets the {@link AspectRatioFrameLayout.AspectRatioListener}.
    *
    * @param listener The listener to be notified about aspect ratios changes of the video content or
    *     the content frame.

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/SubtitleView.java
Patch:
@@ -163,7 +163,7 @@ public void setCues(@Nullable List<Cue> cues) {
   }
 
   /**
-   * Set the type of {@link View} used to display subtitles.
+   * Sets the type of {@link View} used to display subtitles.
    *
    * <p>NOTE: {@link #VIEW_TYPE_WEB} is currently very experimental, and doesn't support most
    * styling and layout properties of {@link Cue}.
@@ -198,7 +198,7 @@ private <T extends View & Output> void setView(T view) {
   }
 
   /**
-   * Set the text size to a given unit and value.
+   * Sets the text size to a given unit and value.
    *
    * <p>See {@link TypedValue} for the possible dimension units.
    *

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/AdditionalFailureInfo.java
Patch:
@@ -48,7 +48,7 @@ public AdditionalFailureInfo() {
   }
 
   /**
-   * Set the additional info to be added to any test failures. Pass {@code null} to skip adding any
+   * Sets the additional info to be added to any test failures. Pass {@code null} to skip adding any
    * additional info.
    *
    * <p>Can be called from any thread.

File: library/common/src/main/java/com/google/android/exoplayer2/util/NalUnitUtil.java
Patch:
@@ -452,7 +452,7 @@ public static H265SpsData parseH265SpsNalUnit(byte[] nalData, int nalOffset, int
   }
 
   /**
-   * Parses a H.265 SPS NAL unit payload (excluding the NAL unit header)  using the syntax defined in ITU-T Recommendation H.265 (2019)
+   * Parses a H.265 SPS NAL unit payload (excluding the NAL unit header) using the syntax defined in ITU-T Recommendation H.265 (2019)
    * subsection 7.3.2.2.1.
    *
    * @param nalData A buffer containing escaped SPS data.
@@ -615,7 +615,7 @@ public static PpsData parsePpsNalUnit(byte[] nalData, int nalOffset, int nalLimi
   }
 
   /**
-   * Parses a PPS NAL unit payload (excluding the NAL unit header)  using the syntax defined in ITU-T Recommendation H.264 (2013)
+   * Parses a PPS NAL unit payload (excluding the NAL unit header) using the syntax defined in ITU-T Recommendation H.264 (2013)
    * subsection 7.3.2.2.
    *
    * @param nalData A buffer containing escaped PPS data.

File: library/core/src/test/java/com/google/android/exoplayer2/source/SinglePeriodTimelineTest.java
Patch:
@@ -79,9 +79,9 @@ public void getPeriodPositionDynamicWindowKnownDuration() {
         timeline.getPeriodPosition(window, period, 0, C.TIME_UNSET, windowDurationUs + 1);
     assertThat(position).isNull();
     // Should return (0, duration) with a projection equal to window duration.
-    position = timeline.getPeriodPosition(window, period, 0, C.TIME_UNSET, windowDurationUs);
+    position = timeline.getPeriodPosition(window, period, 0, C.TIME_UNSET, windowDurationUs - 1);
     assertThat(position.first).isEqualTo(timeline.getUidOfPeriod(0));
-    assertThat(position.second).isEqualTo(windowDurationUs);
+    assertThat(position.second).isEqualTo(windowDurationUs - 1);
     // Should return (0, 0) without a position projection.
     position = timeline.getPeriodPosition(window, period, 0, C.TIME_UNSET, 0);
     assertThat(position.first).isEqualTo(timeline.getUidOfPeriod(0));

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageUtil.java
Patch:
@@ -94,7 +94,7 @@ public RtspAuthUserInfo(String username, String password) {
 
   // Session header pattern, see RFC2326 Sections 3.4 and 12.37.
   private static final Pattern SESSION_HEADER_PATTERN =
-      Pattern.compile("([\\w$-_.+]+)(?:;\\s?timeout=(\\d+))?");
+      Pattern.compile("([\\w$\\-_.+]+)(?:;\\s?timeout=(\\d+))?");
 
   // WWW-Authenticate header pattern, see RFC2068 Sections 14.46 and RFC2069.
   private static final Pattern WWW_AUTHENTICATION_HEADER_DIGEST_PATTERN =

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -672,6 +672,8 @@ private C() {}
         TRACK_TYPE_NONE,
       })
   public @interface TrackType {}
+  /** A type constant for a fake or empty track. */
+  public static final int TRACK_TYPE_NONE = -2;
   /** A type constant for tracks of unknown type. */
   public static final int TRACK_TYPE_UNKNOWN = -1;
   /** A type constant for tracks of some default type, where the type itself is unknown. */
@@ -688,8 +690,6 @@ private C() {}
   public static final int TRACK_TYPE_METADATA = 5;
   /** A type constant for camera motion tracks. */
   public static final int TRACK_TYPE_CAMERA_MOTION = 6;
-  /** A type constant for a fake or empty track. */
-  public static final int TRACK_TYPE_NONE = 7;
   /**
    * Applications or extensions may define custom {@code TRACK_TYPE_*} constants greater than or
    * equal to this value.

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspClient.java
Patch:
@@ -545,7 +545,7 @@ private void handleRtspResponse(List<String> message) {
             ImmutableList<RtspTrackTiming> trackTimingList =
                 rtpInfoString == null
                     ? ImmutableList.of()
-                    : RtspTrackTiming.parseTrackTiming(rtpInfoString);
+                    : RtspTrackTiming.parseTrackTiming(rtpInfoString, uri);
             onPlayResponseReceived(new RtspPlayResponse(response.status, timing, trackTimingList));
             break;
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioSink.java
Patch:
@@ -446,6 +446,6 @@ boolean handleBuffer(ByteBuffer buffer, long presentationTimeUs, int encodedAcce
    */
   void experimentalFlushWithoutAudioTrackRelease();
 
-  /** Resets the renderer, releasing any resources that it currently holds. */
+  /** Resets the sink, releasing any resources that it currently holds. */
   void reset();
 }

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DefaultDownloadIndex.java
Patch:
@@ -415,7 +415,7 @@ private Cursor getCursor(String selection, @Nullable String[] selectionArgs)
           .append('.')
           .append(streamKey.groupIndex)
           .append('.')
-          .append(streamKey.trackIndex)
+          .append(streamKey.streamIndex)
           .append(',');
     }
     if (stringBuilder.length() > 0) {

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifest.java
Patch:
@@ -189,7 +189,7 @@ private static ArrayList<AdaptationSet> copyAdaptationSets(
       List<Representation> representations = adaptationSet.representations;
       ArrayList<Representation> copyRepresentations = new ArrayList<>();
       do {
-        Representation representation = representations.get(key.trackIndex);
+        Representation representation = representations.get(key.streamIndex);
         copyRepresentations.add(representation);
         key = keys.poll();
       } while (key.periodIndex == periodIndex && key.groupIndex == adaptationSetIndex);

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMasterPlaylist.java
Patch:
@@ -308,7 +308,7 @@ private static <T> List<T> copyStreams(
       T stream = streams.get(i);
       for (int j = 0; j < streamKeys.size(); j++) {
         StreamKey streamKey = streamKeys.get(j);
-        if (streamKey.groupIndex == groupIndex && streamKey.trackIndex == i) {
+        if (streamKey.groupIndex == groupIndex && streamKey.streamIndex == i) {
           copiedStreams.add(stream);
           break;
         }

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifest.java
Patch:
@@ -339,7 +339,7 @@ public final SsManifest copy(List<StreamKey> streamKeys) {
         copiedFormats.clear();
       }
       currentStreamElement = streamElement;
-      copiedFormats.add(streamElement.formats[key.trackIndex]);
+      copiedFormats.add(streamElement.formats[key.streamIndex]);
     }
     if (currentStreamElement != null) {
       // Add the last stream element.

File: library/common/src/main/java/com/google/android/exoplayer2/metadata/id3/Id3Decoder.java
Patch:
@@ -806,9 +806,9 @@ private static int indexOfEos(byte[] data, int fromIndex, int encoding) {
       return terminationPos;
     }
 
-    // Otherwise ensure an even index and look for a second zero byte.
+    // Otherwise ensure an even offset from the start, and look for a second zero byte.
     while (terminationPos < data.length - 1) {
-      if (terminationPos % 2 == 0 && data[terminationPos + 1] == (byte) 0) {
+      if ((terminationPos - fromIndex) % 2 == 0 && data[terminationPos + 1] == (byte) 0) {
         return terminationPos;
       }
       terminationPos = indexOfZeroByte(data, terminationPos + 1);

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -1047,8 +1047,8 @@ public SimpleExoPlayer build() {
   /**
    * Sets the ID of the audio session to attach to the underlying {@link android.media.AudioTrack}.
    *
-   * <p>The audio session ID can be generated using {@link C#generateAudioSessionIdV21(Context)} for
-   * API 21+.
+   * <p>The audio session ID can be generated using {@link Util#generateAudioSessionIdV21(Context)}
+   * for API 21+.
    *
    * @param audioSessionId The audio session ID, or {@link C#AUDIO_SESSION_ID_UNSET} if it should be
    *     generated by the framework.

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
Patch:
@@ -597,14 +597,14 @@ public long open(DataSpec dataSpec) throws IOException {
 
   @Override
   public int read(byte[] buffer, int offset, int length) throws IOException {
-    DataSpec requestDataSpec = checkNotNull(this.requestDataSpec);
-    DataSpec currentDataSpec = checkNotNull(this.currentDataSpec);
     if (length == 0) {
       return 0;
     }
     if (bytesRemaining == 0) {
       return C.RESULT_END_OF_INPUT;
     }
+    DataSpec requestDataSpec = checkNotNull(this.requestDataSpec);
+    DataSpec currentDataSpec = checkNotNull(this.currentDataSpec);
     try {
       if (readPosition >= checkCachePosition) {
         openNextSource(requestDataSpec, true);

File: library/core/src/main/java/com/google/android/exoplayer2/BaseRenderer.java
Patch:
@@ -196,7 +196,8 @@ public int supportsMixedMimeTypeAdaptation() throws ExoPlaybackException {
   // PlayerMessage.Target implementation.
 
   @Override
-  public void handleMessage(int messageType, @Nullable Object message) throws ExoPlaybackException {
+  public void handleMessage(@MessageType int messageType, @Nullable Object message)
+      throws ExoPlaybackException {
     // Do nothing.
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/NoSampleRenderer.java
Patch:
@@ -179,7 +179,8 @@ public int supportsMixedMimeTypeAdaptation() throws ExoPlaybackException {
   // PlayerMessage.Target implementation.
 
   @Override
-  public void handleMessage(int messageType, @Nullable Object message) throws ExoPlaybackException {
+  public void handleMessage(@MessageType int messageType, @Nullable Object message)
+      throws ExoPlaybackException {
     // Do nothing.
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/PlayerMessage.java
Patch:
@@ -18,6 +18,7 @@
 import android.os.Handler;
 import android.os.Looper;
 import androidx.annotation.Nullable;
+import com.google.android.exoplayer2.Renderer.MessageType;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Clock;
 import java.util.concurrent.TimeoutException;
@@ -39,7 +40,8 @@ public interface Target {
      * @throws ExoPlaybackException If an error occurred whilst handling the message. Should only be
      *     thrown by targets that handle messages on the playback thread.
      */
-    void handleMessage(int messageType, @Nullable Object message) throws ExoPlaybackException;
+    void handleMessage(@MessageType int messageType, @Nullable Object message)
+        throws ExoPlaybackException;
   }
 
   /** A sender for messages. */

File: library/core/src/main/java/com/google/android/exoplayer2/video/DecoderVideoRenderer.java
Patch:
@@ -247,7 +247,8 @@ public boolean isReady() {
   // PlayerMessage.Target implementation.
 
   @Override
-  public void handleMessage(int messageType, @Nullable Object message) throws ExoPlaybackException {
+  public void handleMessage(@MessageType int messageType, @Nullable Object message)
+      throws ExoPlaybackException {
     if (messageType == MSG_SET_VIDEO_OUTPUT) {
       setOutput(message);
     } else if (messageType == MSG_SET_VIDEO_FRAME_METADATA_LISTENER) {

File: library/core/src/main/java/com/google/android/exoplayer2/video/spherical/CameraMotionRenderer.java
Patch:
@@ -64,7 +64,8 @@ public int supportsFormat(Format format) {
   }
 
   @Override
-  public void handleMessage(int messageType, @Nullable Object message) throws ExoPlaybackException {
+  public void handleMessage(@MessageType int messageType, @Nullable Object message)
+      throws ExoPlaybackException {
     if (messageType == MSG_SET_CAMERA_MOTION_LISTENER) {
       listener = (CameraMotionListener) message;
     } else {

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -2573,7 +2573,7 @@ public void setAndSwitchSurface() throws Exception {
     Renderer videoRenderer =
         new FakeRenderer(C.TRACK_TYPE_VIDEO) {
           @Override
-          public void handleMessage(int messageType, @Nullable Object message)
+          public void handleMessage(@MessageType int messageType, @Nullable Object message)
               throws ExoPlaybackException {
             super.handleMessage(messageType, message);
             rendererMessages.add(messageType);
@@ -11093,7 +11093,7 @@ public FakeSleepRenderer sleepOnNextRender() {
     }
 
     @Override
-    public void handleMessage(int messageType, @Nullable Object message)
+    public void handleMessage(@MessageType int messageType, @Nullable Object message)
         throws ExoPlaybackException {
       if (messageType == MSG_SET_WAKEUP_LISTENER) {
         assertThat(message).isNotNull();
@@ -11116,7 +11116,7 @@ private static final class CountingMessageTarget implements PlayerMessage.Target
     public int messageCount;
 
     @Override
-    public void handleMessage(int messageType, @Nullable Object message) {
+    public void handleMessage(@Renderer.MessageType int messageType, @Nullable Object message) {
       messageCount++;
     }
   }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/ActionSchedule.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.PlayerMessage;
 import com.google.android.exoplayer2.PlayerMessage.Target;
+import com.google.android.exoplayer2.Renderer;
 import com.google.android.exoplayer2.SimpleExoPlayer;
 import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.audio.AudioAttributes;
@@ -616,7 +617,8 @@ public abstract void handleMessage(
         SimpleExoPlayer player, int messageType, @Nullable Object message);
 
     @Override
-    public final void handleMessage(int messageType, @Nullable Object message) {
+    public final void handleMessage(
+        @Renderer.MessageType int messageType, @Nullable Object message) {
       handleMessage(Assertions.checkStateNotNull(player), messageType, message);
       if (callback != null) {
         hasArrived = true;

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/MediaDescription.java
Patch:
@@ -43,11 +43,11 @@ public static final class RtpMapAttribute {
 
     /** Parses the RTPMAP attribute value (with the part "a=rtpmap:" removed). */
     public static RtpMapAttribute parse(String rtpmapString) throws ParserException {
-      String[] rtpmapInfo = Util.split(rtpmapString, " ");
+      String[] rtpmapInfo = Util.splitAtFirst(rtpmapString, " ");
       checkArgument(rtpmapInfo.length == 2);
       int payloadType = parseInt(rtpmapInfo[0]);
 
-      String[] mediaInfo = Util.split(rtpmapInfo[1], "/");
+      String[] mediaInfo = Util.split(rtpmapInfo[1].trim(), "/");
       checkArgument(mediaInfo.length >= 2);
       int clockRate = parseInt(mediaInfo[1]);
       int encodingParameters = C.INDEX_UNSET;

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -1096,6 +1096,7 @@ public int getSelectedIndex() {
     }
 
     @Override
+    @C.SelectionReason
     public int getSelectionReason() {
       return C.SELECTION_REASON_UNKNOWN;
     }

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/BaseMediaChunk.java
Patch:
@@ -58,7 +58,7 @@ public BaseMediaChunk(
       DataSource dataSource,
       DataSpec dataSpec,
       Format trackFormat,
-      int trackSelectionReason,
+      @C.SelectionReason int trackSelectionReason,
       @Nullable Object trackSelectionData,
       long startTimeUs,
       long endTimeUs,

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/ContainerMediaChunk.java
Patch:
@@ -61,7 +61,7 @@ public ContainerMediaChunk(
       DataSource dataSource,
       DataSpec dataSpec,
       Format trackFormat,
-      int trackSelectionReason,
+      @C.SelectionReason int trackSelectionReason,
       @Nullable Object trackSelectionData,
       long startTimeUs,
       long endTimeUs,

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/DataChunk.java
Patch:
@@ -51,7 +51,7 @@ public DataChunk(
       DataSpec dataSpec,
       @DataType int type,
       Format trackFormat,
-      int trackSelectionReason,
+      @C.SelectionReason int trackSelectionReason,
       @Nullable Object trackSelectionData,
       @Nullable byte[] data) {
     super(

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/InitializationChunk.java
Patch:
@@ -51,7 +51,7 @@ public InitializationChunk(
       DataSource dataSource,
       DataSpec dataSpec,
       Format trackFormat,
-      int trackSelectionReason,
+      @C.SelectionReason int trackSelectionReason,
       @Nullable Object trackSelectionData,
       ChunkExtractor chunkExtractor) {
     super(

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/MediaChunk.java
Patch:
@@ -42,7 +42,7 @@ public MediaChunk(
       DataSource dataSource,
       DataSpec dataSpec,
       Format trackFormat,
-      int trackSelectionReason,
+      @C.SelectionReason int trackSelectionReason,
       @Nullable Object trackSelectionData,
       long startTimeUs,
       long endTimeUs,

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/SingleSampleMediaChunk.java
Patch:
@@ -52,7 +52,7 @@ public SingleSampleMediaChunk(
       DataSource dataSource,
       DataSpec dataSpec,
       Format trackFormat,
-      int trackSelectionReason,
+      @C.SelectionReason int trackSelectionReason,
       @Nullable Object trackSelectionData,
       long startTimeUs,
       long endTimeUs,

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DefaultDashChunkSource.java
Patch:
@@ -609,7 +609,7 @@ protected Chunk newInitializationChunk(
       RepresentationHolder representationHolder,
       DataSource dataSource,
       Format trackFormat,
-      int trackSelectionReason,
+      @C.SelectionReason int trackSelectionReason,
       Object trackSelectionData,
       @Nullable RangedUri initializationUri,
       RangedUri indexUri) {
@@ -644,9 +644,9 @@ protected Chunk newInitializationChunk(
   protected Chunk newMediaChunk(
       RepresentationHolder representationHolder,
       DataSource dataSource,
-      int trackType,
+      @C.TrackType int trackType,
       Format trackFormat,
-      int trackSelectionReason,
+      @C.SelectionReason int trackSelectionReason,
       Object trackSelectionData,
       long firstSegmentNum,
       int maxSegmentCount,

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
Patch:
@@ -875,7 +875,7 @@ public EncryptionKeyChunk(
         DataSource dataSource,
         DataSpec dataSpec,
         Format trackFormat,
-        int trackSelectionReason,
+        @C.SelectionReason int trackSelectionReason,
         @Nullable Object trackSelectionData,
         byte[] scratchSpace) {
       super(

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaChunk.java
Patch:
@@ -84,7 +84,7 @@ public static HlsMediaChunk createInstance(
       HlsChunkSource.SegmentBaseHolder segmentBaseHolder,
       Uri playlistUrl,
       @Nullable List<Format> muxedCaptionFormats,
-      int trackSelectionReason,
+      @C.SelectionReason int trackSelectionReason,
       @Nullable Object trackSelectionData,
       boolean isMasterTimestampSource,
       TimestampAdjusterProvider timestampAdjusterProvider,
@@ -280,7 +280,7 @@ private HlsMediaChunk(
       boolean initSegmentEncrypted,
       Uri playlistUrl,
       @Nullable List<Format> muxedCaptionFormats,
-      int trackSelectionReason,
+      @C.SelectionReason int trackSelectionReason,
       @Nullable Object trackSelectionData,
       long startTimeUs,
       long endTimeUs,

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/DefaultSsChunkSource.java
Patch:
@@ -318,7 +318,7 @@ private static MediaChunk newMediaChunk(
       long chunkStartTimeUs,
       long chunkEndTimeUs,
       long chunkSeekTimeUs,
-      int trackSelectionReason,
+      @C.SelectionReason int trackSelectionReason,
       @Nullable Object trackSelectionData,
       ChunkExtractor chunkExtractor) {
     DataSpec dataSpec = new DataSpec(uri);

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecUtil.java
Patch:
@@ -580,10 +580,10 @@ private static void applyWorkarounds(String mimeType, List<MediaCodecInfo> decod
       }
     }
 
-    if (Util.SDK_INT < 30 && decoderInfos.size() > 1) {
+    if (Util.SDK_INT < 32 && decoderInfos.size() > 1) {
       String firstCodecName = decoderInfos.get(0).name;
       // Prefer anything other than OMX.qti.audio.decoder.flac on older devices. See [Internal
-      // ref: b/147278539] and [Internal ref: b/147354613].
+      // ref: b/199124812].
       if ("OMX.qti.audio.decoder.flac".equals(firstCodecName)) {
         decoderInfos.add(decoderInfos.remove(0));
       }

File: library/common/src/main/java/com/google/android/exoplayer2/Format.java
Patch:
@@ -1008,7 +1008,7 @@ public Format withManifestFormatInfo(Format manifestFormat) {
       return this;
     }
 
-    int trackType = MimeTypes.getTrackType(sampleMimeType);
+    @C.TrackType int trackType = MimeTypes.getTrackType(sampleMimeType);
 
     // Use manifest value only.
     @Nullable String id = manifestFormat.id;

File: library/common/src/main/java/com/google/android/exoplayer2/MediaItem.java
Patch:
@@ -352,8 +352,8 @@ public Builder setDrmSessionForClearPeriods(boolean sessionForClearPeriods) {
     }
 
     /**
-     * Sets a list of {@link C}{@code .TRACK_TYPE_*} constants for which to use a DRM session even
-     * when the tracks are in the clear.
+     * Sets a list of {@link C.TrackType track types} for which to use a DRM session even when the
+     * tracks are in the clear.
      *
      * <p>For the common case of using a DRM session for {@link C#TRACK_TYPE_VIDEO} and {@link
      * C#TRACK_TYPE_AUDIO} the {@link #setDrmSessionForClearPeriods(boolean)} can be used.

File: library/core/src/main/java/com/google/android/exoplayer2/Renderer.java
Patch:
@@ -208,8 +208,9 @@ interface WakeupListener {
    * Returns the track type that the renderer handles.
    *
    * @see ExoPlayer#getRendererType(int)
-   * @return One of the {@code TRACK_TYPE_*} constants defined in {@link C}.
+   * @return The {@link C.TrackType track type}.
    */
+  @C.TrackType
   int getTrackType();
 
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -1837,7 +1837,8 @@ private void verifyApplicationThread() {
     }
   }
 
-  private void sendRendererMessage(int trackType, int messageType, @Nullable Object payload) {
+  private void sendRendererMessage(
+      @C.TrackType int trackType, int messageType, @Nullable Object payload) {
     for (Renderer renderer : renderers) {
       if (renderer.getTrackType() == trackType) {
         player.createMessage(renderer).setType(messageType).setPayload(payload).send();

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
Patch:
@@ -360,8 +360,7 @@ private static String buildCustomDiagnosticInfo(int errorCode) {
   private int pendingOutputStreamOffsetCount;
 
   /**
-   * @param trackType The track type that the renderer handles. One of the {@code C.TRACK_TYPE_*}
-   *     constants defined in {@link C}.
+   * @param trackType The {@link C.TrackType track type} that the renderer handles.
    * @param mediaCodecSelector A decoder selector.
    * @param enableDecoderFallback Whether to enable fallback to lower-priority decoders if decoder
    *     initialization fails. This may result in using a decoder that is less efficient or slower
@@ -371,7 +370,7 @@ private static String buildCustomDiagnosticInfo(int errorCode) {
    *     explicitly using {@link MediaFormat#KEY_OPERATING_RATE}).
    */
   public MediaCodecRenderer(
-      int trackType,
+      @C.TrackType int trackType,
       MediaCodecAdapter.Factory codecAdapterFactory,
       MediaCodecSelector mediaCodecSelector,
       boolean enableDecoderFallback,

File: library/core/src/main/java/com/google/android/exoplayer2/source/mediaparser/OutputConsumerAdapterV30.java
Patch:
@@ -429,6 +429,7 @@ private void maybeEndTracks() {
     tracksEnded = true;
   }
 
+  @C.TrackType
   private static int toTrackTypeConstant(@Nullable String string) {
     if (string == null) {
       return C.TRACK_TYPE_UNKNOWN;

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaPeriod.java
Patch:
@@ -921,7 +921,7 @@ private static final class TrackGroupInfo {
     private static final int CATEGORY_MANIFEST_EVENTS = 2;
 
     public final int[] adaptationSetIndices;
-    public final int trackType;
+    @C.TrackType public final int trackType;
     @TrackGroupCategory public final int trackGroupCategory;
 
     public final int eventStreamGroupIndex;
@@ -981,7 +981,7 @@ public static TrackGroupInfo mpdEventTrack(int eventStreamIndex) {
     }
 
     private TrackGroupInfo(
-        int trackType,
+        @C.TrackType int trackType,
         @TrackGroupCategory int trackGroupCategory,
         int[] adaptationSetIndices,
         int primaryTrackGroupIndex,

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -866,6 +866,7 @@ private static int parseHdlr(ParsableByteArray hdlr) {
   }
 
   /** Returns the track type for a given handler value. */
+  @C.TrackType
   private static int getTrackTypeForHdlr(int hdlr) {
     if (hdlr == TYPE_soun) {
       return C.TRACK_TYPE_AUDIO;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Track.java
Patch:
@@ -45,7 +45,7 @@ public final class Track {
   /**
    * One of {@link C#TRACK_TYPE_AUDIO}, {@link C#TRACK_TYPE_VIDEO} and {@link C#TRACK_TYPE_TEXT}.
    */
-  public final int type;
+  @C.TrackType public final int type;
 
   /** The track timescale, defined as the number of time units that pass in one second. */
   public final long timescale;
@@ -81,7 +81,7 @@ public final class Track {
 
   public Track(
       int id,
-      int type,
+      @C.TrackType int type,
       long timescale,
       long movieTimescale,
       long durationUs,

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaPeriod.java
Patch:
@@ -628,6 +628,7 @@ private void buildAndPrepareMainSampleStreamWrapper(
         numberOfAudioCodecs <= 1
             && numberOfVideoCodecs <= 1
             && numberOfAudioCodecs + numberOfVideoCodecs > 0;
+    @C.TrackType
     int trackType =
         !useVideoVariantsOnly && numberOfAudioCodecs > 0
             ? C.TRACK_TYPE_AUDIO
@@ -754,7 +755,7 @@ private void buildAndPrepareAudioSampleStreamWrappers(
   }
 
   private HlsSampleStreamWrapper buildSampleStreamWrapper(
-      int trackType,
+      @C.TrackType int trackType,
       Uri[] playlistUrls,
       Format[] playlistFormats,
       @Nullable Format muxedAudioFormat,

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifest.java
Patch:
@@ -60,7 +60,7 @@ public static class StreamElement {
     private static final String URL_PLACEHOLDER_BITRATE_1 = "{bitrate}";
     private static final String URL_PLACEHOLDER_BITRATE_2 = "{Bitrate}";
 
-    public final int type;
+    @C.TrackType public final int type;
     public final String subType;
     public final long timescale;
     public final String name;
@@ -82,7 +82,7 @@ public static class StreamElement {
     public StreamElement(
         String baseUri,
         String chunkTemplate,
-        int type,
+        @C.TrackType int type,
         String subType,
         long timescale,
         String name,
@@ -115,7 +115,7 @@ public StreamElement(
     private StreamElement(
         String baseUri,
         String chunkTemplate,
-        int type,
+        @C.TrackType int type,
         String subType,
         long timescale,
         String name,

File: library/smoothstreaming/src/test/java/com/google/android/exoplayer2/source/smoothstreaming/SsTestUtils.java
Patch:
@@ -59,7 +59,8 @@ public static SsManifest createSsManifest(StreamElement... streamElements) {
   }
 
   /** Creates test video stream element with the given name, track type and formats. */
-  public static StreamElement createStreamElement(String name, int trackType, Format... formats) {
+  public static StreamElement createStreamElement(
+      String name, @C.TrackType int trackType, Format... formats) {
     return new StreamElement(
         TEST_BASE_URI,
         TEST_CHUNK_TEMPLATE,

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DefaultRenderersFactoryAsserts.java
Patch:
@@ -23,6 +23,7 @@
 import android.os.Handler;
 import android.os.Looper;
 import androidx.test.core.app.ApplicationProvider;
+import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.DefaultRenderersFactory;
 import com.google.android.exoplayer2.Renderer;
 import com.google.android.exoplayer2.audio.AudioRendererEventListener;
@@ -45,7 +46,8 @@ public final class DefaultRenderersFactoryAsserts {
    * @param clazz The extension renderer class.
    * @param type The type of the renderer.
    */
-  public static void assertExtensionRendererCreated(Class<? extends Renderer> clazz, int type) {
+  public static void assertExtensionRendererCreated(
+      Class<? extends Renderer> clazz, @C.TrackType int type) {
     // In EXTENSION_RENDERER_MODE_OFF the renderer should not be created.
     Renderer[] renderers = createRenderers(EXTENSION_RENDERER_MODE_OFF);
     for (Renderer renderer : renderers) {

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeRenderer.java
Patch:
@@ -62,7 +62,7 @@ public class FakeRenderer extends BaseRenderer {
   public int positionResetCount;
   public int sampleBufferReadCount;
 
-  public FakeRenderer(int trackType) {
+  public FakeRenderer(@C.TrackType int trackType) {
     super(trackType);
     buffer = new DecoderInputBuffer(DecoderInputBuffer.BUFFER_REPLACEMENT_MODE_NORMAL);
     lastSamplePositionUs = Long.MIN_VALUE;

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
Patch:
@@ -164,8 +164,7 @@
  * <h2>Tunneling</h2>
  *
  * Tunneled playback can be enabled in cases where the combination of renderers and selected tracks
- * support it. Tunneled playback is enabled by passing an audio session ID to {@link
- * ParametersBuilder#setTunnelingEnabled(boolean)}.
+ * supports it. This can be done by using {@link ParametersBuilder#setTunnelingEnabled(boolean)}.
  */
 public class DefaultTrackSelector extends MappingTrackSelector {
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/subtitle/SubtitleExtractor.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.android.exoplayer2.extractor.ExtractorInput;
 import com.google.android.exoplayer2.extractor.ExtractorOutput;
 import com.google.android.exoplayer2.extractor.PositionHolder;
+import com.google.android.exoplayer2.extractor.SeekMap;
 import com.google.android.exoplayer2.extractor.TrackOutput;
 import com.google.android.exoplayer2.text.Cue;
 import com.google.android.exoplayer2.text.CueEncoder;
@@ -117,6 +118,8 @@ public void init(ExtractorOutput output) {
     checkState(state == STATE_CREATED);
     extractorOutput = output;
     trackOutput = extractorOutput.track(/* id= */ 0, C.TRACK_TYPE_TEXT);
+    extractorOutput.endTracks();
+    extractorOutput.seekMap(new SeekMap.Unseekable(C.TIME_UNSET));
     trackOutput.format(format);
     state = STATE_INITIALIZED;
   }

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/MediaCodecAdapterWrapper.java
Patch:
@@ -333,7 +333,7 @@ public ByteBuffer getOutputBuffer() {
   /** Returns the {@link BufferInfo} associated with the current output buffer, if available. */
   @Nullable
   public BufferInfo getOutputBufferInfo() {
-    return maybeDequeueAndSetOutputBuffer() ? outputBufferInfo : null;
+    return maybeDequeueOutputBuffer() ? outputBufferInfo : null;
   }
 
   /**

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/UdpDataSourceContractTest.java
Patch:
@@ -91,12 +91,12 @@ public void dataSpecWithPositionAndLength_readExpectedRange() {}
   @Test
   @Ignore("UdpDataSource doesn't support DataSpec's position or length [internal: b/175856954]")
   @Override
-  public void dataSpecWithPositionAtEnd_throwsPositionOutOfRangeException() {}
+  public void dataSpecWithPositionAtEnd_readsZeroBytes() {}
 
   @Test
   @Ignore("UdpDataSource doesn't support DataSpec's position or length [internal: b/175856954]")
   @Override
-  public void dataSpecWithPositionAtEndAndLength_throwsPositionOutOfRangeException() {}
+  public void dataSpecWithPositionAtEndAndLength_readsZeroBytes() {}
 
   @Test
   @Ignore("UdpDataSource doesn't support DataSpec's position or length [internal: b/175856954]")

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DataSourceContractTest.java
Patch:
@@ -217,7 +217,7 @@ public void dataSpecWithPositionAndLength_readExpectedRange() throws Exception {
   }
 
   @Test
-  public void dataSpecWithPositionAtEnd_throwsPositionOutOfRangeException() throws Exception {
+  public void dataSpecWithPositionAtEnd_readsZeroBytes() throws Exception {
     ImmutableList<TestResource> resources = getTestResources();
     Assertions.checkArgument(!resources.isEmpty(), "Must provide at least one test resource.");
 
@@ -248,8 +248,7 @@ public void dataSpecWithPositionAtEnd_throwsPositionOutOfRangeException() throws
   }
 
   @Test
-  public void dataSpecWithPositionAtEndAndLength_throwsPositionOutOfRangeException()
-      throws Exception {
+  public void dataSpecWithPositionAtEndAndLength_readsZeroBytes() throws Exception {
     ImmutableList<TestResource> resources = getTestResources();
     Assertions.checkArgument(!resources.isEmpty(), "Must provide at least one test resource.");
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -756,6 +756,9 @@ public void setPlayer(@Nullable Player player) {
     if (player != null) {
       player.addListener(componentListener);
     }
+    if (player instanceof ForwardingPlayer) {
+      player = ((ForwardingPlayer) player).getWrappedPlayer();
+    }
     if (player instanceof ExoPlayer) {
       TrackSelector trackSelector = ((ExoPlayer) player).getTrackSelector();
       if (trackSelector instanceof DefaultTrackSelector) {

File: library/common/src/main/java/com/google/android/exoplayer2/util/MimeTypes.java
Patch:
@@ -96,6 +96,8 @@ public final class MimeTypes {
   public static final String TEXT_VTT = BASE_TYPE_TEXT + "/vtt";
   public static final String TEXT_SSA = BASE_TYPE_TEXT + "/x-ssa";
 
+  public static final String TEXT_EXOPLAYER_CUES = BASE_TYPE_TEXT + "/x-exoplayer-cues";
+
   // application/ MIME types
 
   public static final String APPLICATION_MP4 = BASE_TYPE_APPLICATION + "/mp4";

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -1041,7 +1041,6 @@ private C() {}
    * audio MIME type.
    */
   public static final int FORMAT_UNSUPPORTED_TYPE = 0b000;
-
   /**
    * Converts a time in microseconds to the corresponding time in milliseconds, preserving {@link
    * #TIME_UNSET} and {@link #TIME_END_OF_SOURCE} values.

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
Patch:
@@ -459,7 +459,7 @@ public long getSeekForwardIncrement() {
   }
 
   @Override
-  public int getMaxSeekToPreviousPosition() {
+  public long getMaxSeekToPreviousPosition() {
     return C.DEFAULT_MAX_SEEK_TO_PREVIOUS_POSITION_MS;
   }
 

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -665,15 +665,15 @@ private C() {}
   public static final int DEFAULT_BUFFER_SEGMENT_SIZE = 64 * 1024;
 
   /** A default seek back increment, in milliseconds. */
-  public static final long DEFAULT_SEEK_BACK_INCREMENT_MS = 5000;
+  public static final long DEFAULT_SEEK_BACK_INCREMENT_MS = 5_000;
   /** A default seek forward increment, in milliseconds. */
   public static final long DEFAULT_SEEK_FORWARD_INCREMENT_MS = 15_000;
 
   /**
    * A default maximum position for which a seek to previous will seek to the previous window, in
    * milliseconds.
    */
-  public static final int DEFAULT_MAX_SEEK_TO_PREVIOUS_POSITION_MS = 3000;
+  public static final long DEFAULT_MAX_SEEK_TO_PREVIOUS_POSITION_MS = 3_000;
 
   /** "cenc" scheme type name as defined in ISO/IEC 23001-7:2016. */
   @SuppressWarnings("ConstantField")

File: library/common/src/main/java/com/google/android/exoplayer2/ForwardingPlayer.java
Patch:
@@ -299,7 +299,7 @@ public void seekToPrevious() {
   }
 
   @Override
-  public int getMaxSeekToPreviousPosition() {
+  public long getMaxSeekToPreviousPosition() {
     return player.getMaxSeekToPreviousPosition();
   }
 
@@ -752,7 +752,7 @@ public void onSeekForwardIncrementChanged(long seekForwardIncrementMs) {
     }
 
     @Override
-    public void onMaxSeekToPreviousPositionChanged(int maxSeekToPreviousPositionMs) {
+    public void onMaxSeekToPreviousPositionChanged(long maxSeekToPreviousPositionMs) {
       eventListener.onMaxSeekToPreviousPositionChanged(maxSeekToPreviousPositionMs);
     }
 

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -338,7 +338,7 @@ default void onSeekForwardIncrementChanged(long seekForwardIncrementMs) {}
      * @param maxSeekToPreviousPositionMs The maximum position for which {@link #seekToPrevious()}
      *     seeks to the previous position, in milliseconds.
      */
-    default void onMaxSeekToPreviousPositionChanged(int maxSeekToPreviousPositionMs) {}
+    default void onMaxSeekToPreviousPositionChanged(long maxSeekToPreviousPositionMs) {}
 
     /**
      * @deprecated Seeks are processed without delay. Listen to {@link
@@ -1785,9 +1785,9 @@ default void onPlaylistMetadataChanged(MediaMetadata mediaMetadata) {}
    * in milliseconds.
    *
    * @return The maximum seek to previous position, in milliseconds.
-   * @see Listener#onMaxSeekToPreviousPositionChanged(int)
+   * @see Listener#onMaxSeekToPreviousPositionChanged(long)
    */
-  int getMaxSeekToPreviousPosition();
+  long getMaxSeekToPreviousPosition();
 
   /**
    * Seeks to an earlier position in the current or previous window (if available). More precisely:

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -724,7 +724,7 @@ public long getSeekForwardIncrement() {
   }
 
   @Override
-  public int getMaxSeekToPreviousPosition() {
+  public long getMaxSeekToPreviousPosition() {
     return C.DEFAULT_MAX_SEEK_TO_PREVIOUS_POSITION_MS;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -1380,7 +1380,7 @@ public long getSeekForwardIncrement() {
   }
 
   @Override
-  public int getMaxSeekToPreviousPosition() {
+  public long getMaxSeekToPreviousPosition() {
     verifyApplicationThread();
     return player.getMaxSeekToPreviousPosition();
   }

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsCollector.java
Patch:
@@ -769,7 +769,7 @@ public void onSeekForwardIncrementChanged(long seekForwardIncrementMs) {
   }
 
   @Override
-  public void onMaxSeekToPreviousPositionChanged(int maxSeekToPreviousPositionMs) {
+  public void onMaxSeekToPreviousPositionChanged(long maxSeekToPreviousPositionMs) {
     EventTime eventTime = generateCurrentPlayerMediaPeriodEventTime();
     sendEvent(
         eventTime,

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsListener.java
Patch:
@@ -623,7 +623,7 @@ default void onSeekForwardIncrementChanged(EventTime eventTime, long seekForward
    * @param maxSeekToPreviousPositionMs The maximum seek to previous position, in milliseconds.
    */
   default void onMaxSeekToPreviousPositionChanged(
-      EventTime eventTime, int maxSeekToPreviousPositionMs) {}
+      EventTime eventTime, long maxSeekToPreviousPositionMs) {}
 
   /**
    * Called when the repeat mode changed.

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/StubExoPlayer.java
Patch:
@@ -305,7 +305,7 @@ public long getSeekForwardIncrement() {
   }
 
   @Override
-  public int getMaxSeekToPreviousPosition() {
+  public long getMaxSeekToPreviousPosition() {
     throw new UnsupportedOperationException();
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DecoderAudioRenderer.java
Patch:
@@ -68,8 +68,8 @@
  *   <li>Message with type {@link #MSG_SET_VOLUME} to set the volume. The message payload should be
  *       a {@link Float} with 0 being silence and 1 being unity gain.
  *   <li>Message with type {@link #MSG_SET_AUDIO_ATTRIBUTES} to set the audio attributes. The
- *       message payload should be an {@link com.google.android.exoplayer2.audio.AudioAttributes}
- *       instance that will configure the underlying audio track.
+ *       message payload should be an {@link AudioAttributes} instance that will configure the
+ *       underlying audio track.
  *   <li>Message with type {@link #MSG_SET_AUX_EFFECT_INFO} to set the auxiliary effect. The message
  *       payload should be an {@link AuxEffectInfo} instance that will configure the underlying
  *       audio track.

File: library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
Patch:
@@ -70,8 +70,8 @@
  *   <li>Message with type {@link #MSG_SET_VOLUME} to set the volume. The message payload should be
  *       a {@link Float} with 0 being silence and 1 being unity gain.
  *   <li>Message with type {@link #MSG_SET_AUDIO_ATTRIBUTES} to set the audio attributes. The
- *       message payload should be an {@link com.google.android.exoplayer2.audio.AudioAttributes}
- *       instance that will configure the underlying audio track.
+ *       message payload should be an {@link AudioAttributes} instance that will configure the
+ *       underlying audio track.
  *   <li>Message with type {@link #MSG_SET_AUX_EFFECT_INFO} to set the auxiliary effect. The message
  *       payload should be an {@link AuxEffectInfo} instance that will configure the underlying
  *       audio track.

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMediaSource.java
Patch:
@@ -69,7 +69,7 @@ public static final class Factory implements MediaSourceFactory {
     private long timeoutMs;
     private String userAgent;
     private boolean forceUseRtpTcp;
-    private boolean debugLoggingEnabled;
+    private boolean debugLoggingEnabled = true;
 
     public Factory() {
       timeoutMs = DEFAULT_TIMEOUT_MS;

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/BaseUrlExclusionList.java
Patch:
@@ -34,8 +34,8 @@
 import java.util.Set;
 
 /**
- * Holds the state of {@link #exclude(BaseUrl, long) excluded} base URLs to be used {@link
- * #selectBaseUrl(List) to select} a base URL based on these exclusions.
+ * Holds the state of {@link #exclude(BaseUrl, long) excluded} base URLs to be used to {@link
+ * #selectBaseUrl(List) select} a base URL based on these exclusions.
  */
 public final class BaseUrlExclusionList {
 

File: library/common/src/main/java/com/google/android/exoplayer2/Timeline.java
Patch:
@@ -710,7 +710,7 @@ public int getAdGroupCount() {
      * 0} (inclusive) and {@code removedAdGroupCount} (exclusive) will be empty.
      */
     public int getRemovedAdGroupCount() {
-      return adPlaybackState.adGroupCount;
+      return adPlaybackState.removedAdGroupCount;
     }
 
     /**

File: library/common/src/main/java/com/google/android/exoplayer2/Timeline.java
Patch:
@@ -710,7 +710,7 @@ public int getAdGroupCount() {
      * 0} (inclusive) and {@code removedAdGroupCount} (exclusive) will be empty.
      */
     public int getRemovedAdGroupCount() {
-      return adPlaybackState.adGroupCount;
+      return adPlaybackState.removedAdGroupCount;
     }
 
     /**

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Muxer.java
Patch:
@@ -28,8 +28,8 @@
  * <p>Query whether {@link #supportsSampleMimeType(String) sample MIME types are supported} and
  * {@link #addTrack(Format) add all tracks}, then {@link #writeSampleData(int, ByteBuffer, boolean,
  * long) write sample data} to mux samples. Once any sample data has been written, it is not
- * possible to add tracks. After writing all sample data, {@link #release() release} the instance to
- * finish writing to the output and return any resources to the system.
+ * possible to add tracks. After writing all sample data, {@link #release(boolean) release} the
+ * instance to finish writing to the output and return any resources to the system.
  */
 /* package */ interface Muxer {
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/TransformerAudioRenderer.java
Patch:
@@ -222,8 +222,8 @@ private boolean drainSonicToFeedEncoder() {
   }
 
   /**
-   * Attempts to process decoder output audio, and returns whether it may be possible to process
-   * more data immediately by calling this method again.
+   * Attempts to process decoder output data, and returns whether it may be possible to process more
+   * data immediately by calling this method again.
    */
   private boolean drainDecoderToFeedSonic() {
     MediaCodecAdapterWrapper decoder = checkNotNull(this.decoder);

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifestParser.java
Patch:
@@ -192,7 +192,7 @@ protected final void putNormalizedAttribute(String key, @Nullable Object value)
      * provided name, the parent element parser will be queried, and so on up the chain.
      *
      * @param key The name of the attribute.
-     * @return The stashed value, or null if the attribute was not be found.
+     * @return The stashed value, or null if the attribute was not found.
      */
     @Nullable
     protected final Object getNormalizedAttribute(String key) {
@@ -595,6 +595,7 @@ private void parseStreamElementStartTag(XmlPullParser parser) throws ParserExcep
       }
       putNormalizedAttribute(KEY_SUB_TYPE, subType);
       name = parser.getAttributeValue(null, KEY_NAME);
+      putNormalizedAttribute(KEY_NAME, name);
       url = parseRequiredString(parser, KEY_URL);
       maxWidth = parseInt(parser, KEY_MAX_WIDTH, Format.NO_VALUE);
       maxHeight = parseInt(parser, KEY_MAX_HEIGHT, Format.NO_VALUE);

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageUtil.java
Patch:
@@ -92,9 +92,9 @@ public RtspAuthUserInfo(String username, String password) {
   private static final Pattern CONTENT_LENGTH_HEADER_PATTERN =
       Pattern.compile("Content-Length:\\s?(\\d+)", CASE_INSENSITIVE);
 
-  // Session header pattern, see RFC2326 Section 12.37.
+  // Session header pattern, see RFC2326 Sections 3.4 and 12.37.
   private static final Pattern SESSION_HEADER_PATTERN =
-      Pattern.compile("(\\w+)(?:;\\s?timeout=(\\d+))?");
+      Pattern.compile("([\\w$-_.+]+)(?:;\\s?timeout=(\\d+))?");
 
   // WWW-Authenticate header pattern, see RFC2068 Sections 14.46 and RFC2069.
   private static final Pattern WWW_AUTHENTICATION_HEADER_DIGEST_PATTERN =

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifestParser.java
Patch:
@@ -192,7 +192,7 @@ protected final void putNormalizedAttribute(String key, @Nullable Object value)
      * provided name, the parent element parser will be queried, and so on up the chain.
      *
      * @param key The name of the attribute.
-     * @return The stashed value, or null if the attribute was not be found.
+     * @return The stashed value, or null if the attribute was not found.
      */
     @Nullable
     protected final Object getNormalizedAttribute(String key) {
@@ -595,6 +595,7 @@ private void parseStreamElementStartTag(XmlPullParser parser) throws ParserExcep
       }
       putNormalizedAttribute(KEY_SUB_TYPE, subType);
       name = parser.getAttributeValue(null, KEY_NAME);
+      putNormalizedAttribute(KEY_NAME, name);
       url = parseRequiredString(parser, KEY_URL);
       maxWidth = parseInt(parser, KEY_MAX_WIDTH, Format.NO_VALUE);
       maxHeight = parseInt(parser, KEY_MAX_HEIGHT, Format.NO_VALUE);

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageUtil.java
Patch:
@@ -92,9 +92,9 @@ public RtspAuthUserInfo(String username, String password) {
   private static final Pattern CONTENT_LENGTH_HEADER_PATTERN =
       Pattern.compile("Content-Length:\\s?(\\d+)", CASE_INSENSITIVE);
 
-  // Session header pattern, see RFC2326 Section 12.37.
+  // Session header pattern, see RFC2326 Sections 3.4 and 12.37.
   private static final Pattern SESSION_HEADER_PATTERN =
-      Pattern.compile("(\\w+)(?:;\\s?timeout=(\\d+))?");
+      Pattern.compile("([\\w$-_.+]+)(?:;\\s?timeout=(\\d+))?");
 
   // WWW-Authenticate header pattern, see RFC2068 Sections 14.46 and RFC2069.
   private static final Pattern WWW_AUTHENTICATION_HEADER_DIGEST_PATTERN =

File: library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCssStyle.java
Patch:
@@ -263,7 +263,7 @@ public WebvttCssStyle setFontSize(float fontSize) {
     return this;
   }
 
-  public WebvttCssStyle setFontSizeUnit(short unit) {
+  public WebvttCssStyle setFontSizeUnit(@FontSizeUnit int unit) {
     this.fontSizeUnit = unit;
     return this;
   }

File: library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttDecoder.java
Patch:
@@ -44,12 +44,12 @@ public final class WebvttDecoder extends SimpleSubtitleDecoder {
   private static final String STYLE_START = "STYLE";
 
   private final ParsableByteArray parsableWebvttData;
-  private final CssParser cssParser;
+  private final WebvttCssParser cssParser;
 
   public WebvttDecoder() {
     super("WebvttDecoder");
     parsableWebvttData = new ParsableByteArray();
-    cssParser = new CssParser();
+    cssParser = new WebvttCssParser();
   }
 
   @Override

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/TimestampAdjusterProvider.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.google.android.exoplayer2.source.hls;
 
+import static com.google.android.exoplayer2.util.TimestampAdjuster.MODE_SHARED;
+
 import android.util.SparseArray;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.util.TimestampAdjuster;
@@ -40,7 +42,7 @@ public TimestampAdjusterProvider() {
   public TimestampAdjuster getAdjuster(int discontinuitySequence) {
     @Nullable TimestampAdjuster adjuster = timestampAdjusters.get(discontinuitySequence);
     if (adjuster == null) {
-      adjuster = new TimestampAdjuster(/* firstSampleTimestampUs= */ 0);
+      adjuster = new TimestampAdjuster(MODE_SHARED);
       timestampAdjusters.put(discontinuitySequence, adjuster);
     }
     return adjuster;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/TimestampAdjusterProvider.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.source.hls;
 
 import android.util.SparseArray;
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.util.TimestampAdjuster;
 
 /** Provides {@link TimestampAdjuster} instances for use during HLS playbacks. */
@@ -37,9 +38,9 @@ public TimestampAdjusterProvider() {
    * @return A {@link TimestampAdjuster}.
    */
   public TimestampAdjuster getAdjuster(int discontinuitySequence) {
-    TimestampAdjuster adjuster = timestampAdjusters.get(discontinuitySequence);
+    @Nullable TimestampAdjuster adjuster = timestampAdjusters.get(discontinuitySequence);
     if (adjuster == null) {
-      adjuster = new TimestampAdjuster(TimestampAdjuster.DO_NOT_OFFSET);
+      adjuster = new TimestampAdjuster(/* firstSampleTimestampUs= */ 0);
       timestampAdjusters.put(discontinuitySequence, adjuster);
     }
     return adjuster;

File: library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCssStyle.java
Patch:
@@ -263,7 +263,7 @@ public WebvttCssStyle setFontSize(float fontSize) {
     return this;
   }
 
-  public WebvttCssStyle setFontSizeUnit(short unit) {
+  public WebvttCssStyle setFontSizeUnit(@FontSizeUnit int unit) {
     this.fontSizeUnit = unit;
     return this;
   }

File: library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttDecoder.java
Patch:
@@ -44,12 +44,12 @@ public final class WebvttDecoder extends SimpleSubtitleDecoder {
   private static final String STYLE_START = "STYLE";
 
   private final ParsableByteArray parsableWebvttData;
-  private final CssParser cssParser;
+  private final WebvttCssParser cssParser;
 
   public WebvttDecoder() {
     super("WebvttDecoder");
     parsableWebvttData = new ParsableByteArray();
-    cssParser = new CssParser();
+    cssParser = new WebvttCssParser();
   }
 
   @Override

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/TimestampAdjusterProvider.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.google.android.exoplayer2.source.hls;
 
+import static com.google.android.exoplayer2.util.TimestampAdjuster.MODE_SHARED;
+
 import android.util.SparseArray;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.util.TimestampAdjuster;
@@ -40,7 +42,7 @@ public TimestampAdjusterProvider() {
   public TimestampAdjuster getAdjuster(int discontinuitySequence) {
     @Nullable TimestampAdjuster adjuster = timestampAdjusters.get(discontinuitySequence);
     if (adjuster == null) {
-      adjuster = new TimestampAdjuster(/* firstSampleTimestampUs= */ 0);
+      adjuster = new TimestampAdjuster(MODE_SHARED);
       timestampAdjusters.put(discontinuitySequence, adjuster);
     }
     return adjuster;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/TimestampAdjusterProvider.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.source.hls;
 
 import android.util.SparseArray;
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.util.TimestampAdjuster;
 
 /** Provides {@link TimestampAdjuster} instances for use during HLS playbacks. */
@@ -37,9 +38,9 @@ public TimestampAdjusterProvider() {
    * @return A {@link TimestampAdjuster}.
    */
   public TimestampAdjuster getAdjuster(int discontinuitySequence) {
-    TimestampAdjuster adjuster = timestampAdjusters.get(discontinuitySequence);
+    @Nullable TimestampAdjuster adjuster = timestampAdjusters.get(discontinuitySequence);
     if (adjuster == null) {
-      adjuster = new TimestampAdjuster(TimestampAdjuster.DO_NOT_OFFSET);
+      adjuster = new TimestampAdjuster(/* firstSampleTimestampUs= */ 0);
       timestampAdjusters.put(discontinuitySequence, adjuster);
     }
     return adjuster;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/AssetDataSource.java
Patch:
@@ -83,7 +83,7 @@ public long open(DataSpec dataSpec) throws AssetDataSourceException {
         // assetManager.open() returns an AssetInputStream, whose skip() implementation only skips
         // fewer bytes than requested if the skip is beyond the end of the asset's data.
         throw new AssetDataSourceException(
-            /* cause=*/ null, PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE);
+            /* cause= */ null, PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE);
       }
       if (dataSpec.length != C.LENGTH_UNSET) {
         bytesRemaining = dataSpec.length;

File: library/common/src/main/java/com/google/android/exoplayer2/Timeline.java
Patch:
@@ -1446,8 +1446,7 @@ public int getWindowCount() {
     }
 
     @Override
-    public Window getWindow(
-        int windowIndex, Window window, long ignoredDefaultPositionProjectionUs) {
+    public Window getWindow(int windowIndex, Window window, long defaultPositionProjectionUs) {
       Window w = windows.get(windowIndex);
       window.set(
           w.uid,
@@ -1524,7 +1523,7 @@ public int getPeriodCount() {
     }
 
     @Override
-    public Period getPeriod(int periodIndex, Period period, boolean ignoredSetIds) {
+    public Period getPeriod(int periodIndex, Period period, boolean setIds) {
       Period p = periods.get(periodIndex);
       period.set(
           p.id,

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsCollector.java
Patch:
@@ -809,12 +809,13 @@ public final void onSeekProcessed() {
   // BandwidthMeter.EventListener implementation.
 
   @Override
-  public final void onBandwidthSample(int elapsedMs, long bytesTransferred, long bitrate) {
+  public final void onBandwidthSample(int elapsedMs, long bytesTransferred, long bitrateEstimate) {
     EventTime eventTime = generateLoadingMediaPeriodEventTime();
     sendEvent(
         eventTime,
         AnalyticsListener.EVENT_BANDWIDTH_ESTIMATE,
-        listener -> listener.onBandwidthEstimate(eventTime, elapsedMs, bytesTransferred, bitrate));
+        listener ->
+            listener.onBandwidthEstimate(eventTime, elapsedMs, bytesTransferred, bitrateEstimate));
   }
 
   // DrmSessionEventListener implementation.

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
Patch:
@@ -1249,10 +1249,10 @@ public int getPeriodCount() {
     }
 
     @Override
-    public Period getPeriod(int periodIndex, Period period, boolean setIdentifiers) {
+    public Period getPeriod(int periodIndex, Period period, boolean setIds) {
       Assertions.checkIndex(periodIndex, 0, getPeriodCount());
-      Object id = setIdentifiers ? manifest.getPeriod(periodIndex).id : null;
-      Object uid = setIdentifiers ? (firstPeriodId + periodIndex) : null;
+      Object id = setIds ? manifest.getPeriod(periodIndex).id : null;
+      Object uid = setIds ? (firstPeriodId + periodIndex) : null;
       return period.set(
           id,
           uid,

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/SsMediaSource.java
Patch:
@@ -471,9 +471,9 @@ public MediaPeriod createPeriod(MediaPeriodId id, Allocator allocator, long star
   }
 
   @Override
-  public void releasePeriod(MediaPeriod period) {
-    ((SsMediaPeriod) period).release();
-    mediaPeriods.remove(period);
+  public void releasePeriod(MediaPeriod mediaPeriod) {
+    ((SsMediaPeriod) mediaPeriod).release();
+    mediaPeriods.remove(mediaPeriod);
   }
 
   @Override

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -423,8 +423,8 @@ public void onPlaybackStateChanged(@Player.State int playbackState) {
     }
 
     @Override
-    public void onPlayerError(@NonNull PlaybackException e) {
-      if (e.errorCode == PlaybackException.ERROR_CODE_BEHIND_LIVE_WINDOW) {
+    public void onPlayerError(@NonNull PlaybackException error) {
+      if (error.errorCode == PlaybackException.ERROR_CODE_BEHIND_LIVE_WINDOW) {
         player.seekToDefaultPosition();
         player.prepare();
       } else {

File: extensions/cronet/src/main/java/com/google/android/exoplayer2/ext/cronet/CronetDataSource.java
Patch:
@@ -767,10 +767,10 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int readLength) throws HttpDataSourceException {
+  public int read(byte[] buffer, int offset, int length) throws HttpDataSourceException {
     Assertions.checkState(opened);
 
-    if (readLength == 0) {
+    if (length == 0) {
       return 0;
     } else if (bytesRemaining == 0) {
       return C.RESULT_END_OF_INPUT;
@@ -801,7 +801,7 @@ public int read(byte[] buffer, int offset, int readLength) throws HttpDataSource
             Longs.min(
                 bytesRemaining != C.LENGTH_UNSET ? bytesRemaining : Long.MAX_VALUE,
                 readBuffer.remaining(),
-                readLength);
+                length);
 
     readBuffer.get(buffer, offset, bytesRead);
 

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/PlayerTestRule.java
Patch:
@@ -165,8 +165,8 @@ public Map<String, List<String>> getResponseHeaders() {
     }
 
     @Override
-    public int read(byte[] target, int offset, int length) throws IOException {
-      return wrappedDataSource.read(target, offset, length);
+    public int read(byte[] buffer, int offset, int length) throws IOException {
+      return wrappedDataSource.read(buffer, offset, length);
     }
 
     @Override

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/PlayerWrapper.java
Patch:
@@ -594,7 +594,7 @@ public void onPlayWhenReadyChanged(boolean playWhenReady, int reason) {
     }
 
     @Override
-    public void onPlaybackStateChanged(@Player.State int state) {
+    public void onPlaybackStateChanged(@Player.State int playbackState) {
       handlePlayerStateChanged();
     }
 

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/SessionCallbackBuilder.java
Patch:
@@ -97,14 +97,14 @@ public interface AllowedCommandProvider {
      * @param session The media session.
      * @param controllerInfo The {@link ControllerInfo} for the controller for which allowed
      *     commands are being queried.
-     * @param baseAllowedSessionCommand Base allowed session commands for customization.
+     * @param baseAllowedSessionCommands Base allowed session commands for customization.
      * @return The allowed commands for the controller.
      * @see MediaSession.SessionCallback#onConnect(MediaSession, ControllerInfo)
      */
     SessionCommandGroup getAllowedCommands(
         MediaSession session,
         ControllerInfo controllerInfo,
-        SessionCommandGroup baseAllowedSessionCommand);
+        SessionCommandGroup baseAllowedSessionCommands);
 
     /**
      * Called when a {@link MediaController} has called an API that controls {@link SessionPlayer}

File: extensions/okhttp/src/main/java/com/google/android/exoplayer2/ext/okhttp/OkHttpDataSource.java
Patch:
@@ -374,9 +374,9 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int readLength) throws HttpDataSourceException {
+  public int read(byte[] buffer, int offset, int length) throws HttpDataSourceException {
     try {
-      return readInternal(buffer, offset, readLength);
+      return readInternal(buffer, offset, length);
     } catch (IOException e) {
       throw new HttpDataSourceException(
           e,

File: extensions/rtmp/src/main/java/com/google/android/exoplayer2/ext/rtmp/RtmpDataSource.java
Patch:
@@ -85,8 +85,8 @@ public long open(DataSpec dataSpec) throws RtmpIOException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int readLength) throws IOException {
-    int bytesRead = castNonNull(rtmpClient).read(buffer, offset, readLength);
+  public int read(byte[] buffer, int offset, int length) throws IOException {
+    int bytesRead = castNonNull(rtmpClient).read(buffer, offset, length);
     if (bytesRead == -1) {
       return C.RESULT_END_OF_INPUT;
     }

File: library/common/src/main/java/com/google/android/exoplayer2/ForwardingPlayer.java
Patch:
@@ -680,8 +680,8 @@ public void onPlayerStateChanged(boolean playWhenReady, @State int playbackState
     }
 
     @Override
-    public void onPlaybackStateChanged(@State int state) {
-      eventListener.onPlaybackStateChanged(state);
+    public void onPlaybackStateChanged(@State int playbackState) {
+      eventListener.onPlaybackStateChanged(playbackState);
     }
 
     @Override

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -192,9 +192,9 @@ default void onPlayerStateChanged(boolean playWhenReady, @State int playbackStat
      * <p>{@link #onEvents(Player, Events)} will also be called to report this event along with
      * other events that happen in the same {@link Looper} message queue iteration.
      *
-     * @param state The new playback {@link State state}.
+     * @param playbackState The new playback {@link State state}.
      */
-    default void onPlaybackStateChanged(@State int state) {}
+    default void onPlaybackStateChanged(@State int playbackState) {}
 
     /**
      * Called when the value returned from {@link #getPlayWhenReady()} changes.
@@ -899,7 +899,7 @@ default void onIsLoadingChanged(boolean isLoading) {}
     default void onAvailableCommandsChanged(Commands availableCommands) {}
 
     @Override
-    default void onPlaybackStateChanged(@State int state) {}
+    default void onPlaybackStateChanged(@State int playbackState) {}
 
     @Override
     default void onPlayWhenReadyChanged(

File: library/common/src/main/java/com/google/android/exoplayer2/upstream/DataReader.java
Patch:
@@ -28,13 +28,13 @@ public interface DataReader {
    * Otherwise, the call will block until at least one byte of data has been read and the number of
    * bytes read is returned.
    *
-   * @param target A target array into which data should be written.
+   * @param buffer A target array into which data should be written.
    * @param offset The offset into the target array at which to write.
    * @param length The maximum number of bytes to read from the input.
    * @return The number of bytes read, or {@link C#RESULT_END_OF_INPUT} if the input has ended. This
    *     may be less than {@code length} because the end of the input (or available data) was
    *     reached, the method was interrupted, or the operation was aborted early for another reason.
    * @throws IOException If an error occurs reading from the input.
    */
-  int read(byte[] target, int offset, int length) throws IOException;
+  int read(byte[] buffer, int offset, int length) throws IOException;
 }

File: library/common/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
Patch:
@@ -475,9 +475,9 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int readLength) throws HttpDataSourceException {
+  public int read(byte[] buffer, int offset, int length) throws HttpDataSourceException {
     try {
-      return readInternal(buffer, offset, readLength);
+      return readInternal(buffer, offset, length);
     } catch (IOException e) {
       throw new HttpDataSourceException(
           e,

File: library/common/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java
Patch:
@@ -454,7 +454,7 @@ public InvalidResponseCodeException(
   void close() throws HttpDataSourceException;
 
   @Override
-  int read(byte[] buffer, int offset, int readLength) throws HttpDataSourceException;
+  int read(byte[] buffer, int offset, int length) throws HttpDataSourceException;
 
   /**
    * Sets the value of a request header. The value will be used for subsequent connections

File: library/common/src/main/java/com/google/android/exoplayer2/upstream/TransferListener.java
Patch:
@@ -61,7 +61,7 @@ public interface TransferListener {
    * @param source The source performing the transfer.
    * @param dataSpec Describes the data being transferred.
    * @param isNetwork Whether the data is transferred through a network.
-   * @param bytesTransferred The number of bytes transferred since the previous call to this method
+   * @param bytesTransferred The number of bytes transferred since the previous call to this method.
    */
   void onBytesTransferred(
       DataSource source, DataSpec dataSpec, boolean isNetwork, int bytesTransferred);

File: library/common/src/test/java/com/google/android/exoplayer2/upstream/BaseDataSourceTest.java
Patch:
@@ -101,9 +101,9 @@ public long open(DataSpec dataSpec) throws IOException {
     }
 
     @Override
-    public int read(byte[] buffer, int offset, int readLength) throws IOException {
-      bytesTransferred(readLength);
-      return readLength;
+    public int read(byte[] buffer, int offset, int length) throws IOException {
+      bytesTransferred(length);
+      return length;
     }
 
     @Override

File: library/core/src/main/java/com/google/android/exoplayer2/BaseRenderer.java
Patch:
@@ -196,7 +196,7 @@ public int supportsMixedMimeTypeAdaptation() throws ExoPlaybackException {
   // PlayerMessage.Target implementation.
 
   @Override
-  public void handleMessage(int messageType, @Nullable Object payload) throws ExoPlaybackException {
+  public void handleMessage(int messageType, @Nullable Object message) throws ExoPlaybackException {
     // Do nothing.
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/NoSampleRenderer.java
Patch:
@@ -179,7 +179,7 @@ public int supportsMixedMimeTypeAdaptation() throws ExoPlaybackException {
   // PlayerMessage.Target implementation.
 
   @Override
-  public void handleMessage(int what, @Nullable Object object) throws ExoPlaybackException {
+  public void handleMessage(int messageType, @Nullable Object message) throws ExoPlaybackException {
     // Do nothing.
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/PlayerMessage.java
Patch:
@@ -35,11 +35,11 @@ public interface Target {
      * Handles a message delivered to the target.
      *
      * @param messageType The message type.
-     * @param payload The message payload.
+     * @param message The message payload.
      * @throws ExoPlaybackException If an error occurred whilst handling the message. Should only be
      *     thrown by targets that handle messages on the playback thread.
      */
-    void handleMessage(int messageType, @Nullable Object payload) throws ExoPlaybackException;
+    void handleMessage(int messageType, @Nullable Object message) throws ExoPlaybackException;
   }
 
   /** A sender for messages. */

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioProcessor.java
Patch:
@@ -108,9 +108,9 @@ public UnhandledAudioFormatException(AudioFormat inputAudioFormat) {
    * The caller retains ownership of the provided buffer. Calling this method invalidates any
    * previous buffer returned by {@link #getOutput()}.
    *
-   * @param buffer The input buffer to process.
+   * @param inputBuffer The input buffer to process.
    */
-  void queueInput(ByteBuffer buffer);
+  void queueInput(ByteBuffer inputBuffer);
 
   /**
    * Queues an end of stream signal. After this method has been called, {@link

File: library/core/src/main/java/com/google/android/exoplayer2/drm/FrameworkMediaDrm.java
Patch:
@@ -292,15 +292,15 @@ public void setPropertyByteArray(String propertyName, byte[] value) {
   }
 
   @Override
-  public FrameworkMediaCrypto createMediaCrypto(byte[] initData) throws MediaCryptoException {
+  public FrameworkMediaCrypto createMediaCrypto(byte[] sessionId) throws MediaCryptoException {
     // Work around a bug prior to Lollipop where L1 Widevine forced into L3 mode would still
     // indicate that it required secure video decoders [Internal ref: b/11428937].
     boolean forceAllowInsecureDecoderComponents =
         Util.SDK_INT < 21
             && C.WIDEVINE_UUID.equals(uuid)
             && "L3".equals(getPropertyString("securityLevel"));
     return new FrameworkMediaCrypto(
-        adjustUuid(uuid), initData, forceAllowInsecureDecoderComponents);
+        adjustUuid(uuid), sessionId, forceAllowInsecureDecoderComponents);
   }
 
   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderFactory.java
Patch:
@@ -21,8 +21,8 @@ public interface DownloaderFactory {
   /**
    * Creates a {@link Downloader} to perform the given {@link DownloadRequest}.
    *
-   * @param action The action.
+   * @param request The download request.
    * @return The downloader.
    */
-  Downloader createDownloader(DownloadRequest action);
+  Downloader createDownloader(DownloadRequest request);
 }

File: library/core/src/main/java/com/google/android/exoplayer2/source/IcyDataSource.java
Patch:
@@ -79,15 +79,15 @@ public long open(DataSpec dataSpec) {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int readLength) throws IOException {
+  public int read(byte[] buffer, int offset, int length) throws IOException {
     if (bytesUntilMetadata == 0) {
       if (readMetadata()) {
         bytesUntilMetadata = metadataIntervalBytes;
       } else {
         return C.RESULT_END_OF_INPUT;
       }
     }
-    int bytesRead = upstream.read(buffer, offset, min(bytesUntilMetadata, readLength));
+    int bytesRead = upstream.read(buffer, offset, min(bytesUntilMetadata, length));
     if (bytesRead != C.RESULT_END_OF_INPUT) {
       bytesUntilMetadata -= bytesRead;
     }

File: library/core/src/main/java/com/google/android/exoplayer2/source/MaskingMediaPeriod.java
Patch:
@@ -139,7 +139,7 @@ public void releasePeriod() {
   }
 
   @Override
-  public void prepare(Callback callback, long preparePositionUs) {
+  public void prepare(Callback callback, long positionUs) {
     this.callback = callback;
     if (mediaPeriod != null) {
       mediaPeriod.prepare(

File: library/core/src/main/java/com/google/android/exoplayer2/source/SampleQueue.java
Patch:
@@ -581,8 +581,8 @@ public final int sampleData(
 
   @Override
   public final void sampleData(
-      ParsableByteArray buffer, int length, @SampleDataPart int sampleDataPart) {
-    sampleDataQueue.sampleData(buffer, length);
+      ParsableByteArray data, int length, @SampleDataPart int sampleDataPart) {
+    sampleDataQueue.sampleData(data, length);
   }
 
   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/MediaParserChunkExtractor.java
Patch:
@@ -137,9 +137,9 @@ public void release() {
   }
 
   @Override
-  public boolean read(ExtractorInput extractorInput) throws IOException {
+  public boolean read(ExtractorInput input) throws IOException {
     maybeExecutePendingSeek();
-    inputReaderAdapter.setDataReader(extractorInput, extractorInput.getLength());
+    inputReaderAdapter.setDataReader(input, input.getLength());
     return mediaParser.advance(inputReaderAdapter);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/mediaparser/OutputConsumerAdapterV30.java
Patch:
@@ -684,8 +684,8 @@ private static final class DataReaderAdapter implements DataReader {
     @Nullable public MediaParser.InputReader input;
 
     @Override
-    public int read(byte[] target, int offset, int length) throws IOException {
-      return Util.castNonNull(input).read(target, offset, length);
+    public int read(byte[] buffer, int offset, int length) throws IOException {
+      return Util.castNonNull(input).read(buffer, offset, length);
     }
   }
 }

File: library/core/src/main/java/com/google/android/exoplayer2/text/SimpleSubtitleDecoder.java
Patch:
@@ -42,7 +42,7 @@ public final String getName() {
   }
 
   @Override
-  public void setPositionUs(long timeUs) {
+  public void setPositionUs(long positionUs) {
     // Do nothing
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/ExoTrackSelection.java
Patch:
@@ -134,9 +134,9 @@ ExoTrackSelection[] createTrackSelections(
    * Called to notify the selection of the current playback speed. The playback speed may affect
    * adaptive track selection.
    *
-   * @param speed The factor by which playback is sped up.
+   * @param playbackSpeed The factor by which playback is sped up.
    */
-  void onPlaybackSpeed(float speed);
+  void onPlaybackSpeed(float playbackSpeed);
 
   /**
    * Called to notify the selection of a position discontinuity.

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/MappingTrackSelector.java
Patch:
@@ -325,7 +325,7 @@ public final void onSelectionActivated(@Nullable Object info) {
   public final TrackSelectorResult selectTracks(
       RendererCapabilities[] rendererCapabilities,
       TrackGroupArray trackGroups,
-      MediaPeriodId mediaPeriodId,
+      MediaPeriodId periodId,
       Timeline timeline)
       throws ExoPlaybackException {
     // Structures into which data will be written during the selection. The extra item at the end
@@ -404,7 +404,7 @@ public final TrackSelectorResult selectTracks(
             mappedTrackInfo,
             rendererFormatSupports,
             rendererMixedMimeTypeAdaptationSupports,
-            mediaPeriodId,
+            periodId,
             timeline);
     return new TrackSelectorResult(result.first, result.second, mappedTrackInfo);
   }

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/AssetDataSource.java
Patch:
@@ -103,8 +103,8 @@ public long open(DataSpec dataSpec) throws AssetDataSourceException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int readLength) throws AssetDataSourceException {
-    if (readLength == 0) {
+  public int read(byte[] buffer, int offset, int length) throws AssetDataSourceException {
+    if (length == 0) {
       return 0;
     } else if (bytesRemaining == 0) {
       return C.RESULT_END_OF_INPUT;
@@ -113,7 +113,7 @@ public int read(byte[] buffer, int offset, int readLength) throws AssetDataSourc
     int bytesRead;
     try {
       int bytesToRead =
-          bytesRemaining == C.LENGTH_UNSET ? readLength : (int) min(bytesRemaining, readLength);
+          bytesRemaining == C.LENGTH_UNSET ? length : (int) min(bytesRemaining, length);
       bytesRead = castNonNull(inputStream).read(buffer, offset, bytesToRead);
     } catch (IOException e) {
       throw new AssetDataSourceException(e, PlaybackException.ERROR_CODE_IO_UNSPECIFIED);

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/ContentDataSource.java
Patch:
@@ -139,8 +139,8 @@ public long open(DataSpec dataSpec) throws ContentDataSourceException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int readLength) throws ContentDataSourceException {
-    if (readLength == 0) {
+  public int read(byte[] buffer, int offset, int length) throws ContentDataSourceException {
+    if (length == 0) {
       return 0;
     } else if (bytesRemaining == 0) {
       return C.RESULT_END_OF_INPUT;
@@ -149,7 +149,7 @@ public int read(byte[] buffer, int offset, int readLength) throws ContentDataSou
     int bytesRead;
     try {
       int bytesToRead =
-          bytesRemaining == C.LENGTH_UNSET ? readLength : (int) min(bytesRemaining, readLength);
+          bytesRemaining == C.LENGTH_UNSET ? length : (int) min(bytesRemaining, length);
       bytesRead = castNonNull(inputStream).read(buffer, offset, bytesToRead);
     } catch (IOException e) {
       throw new ContentDataSourceException(e, PlaybackException.ERROR_CODE_IO_UNSPECIFIED);

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeter.java
Patch:
@@ -372,11 +372,11 @@ public synchronized void onTransferStart(
 
   @Override
   public synchronized void onBytesTransferred(
-      DataSource source, DataSpec dataSpec, boolean isNetwork, int bytes) {
+      DataSource source, DataSpec dataSpec, boolean isNetwork, int bytesTransferred) {
     if (!isTransferAtFullNetworkSpeed(dataSpec, isNetwork)) {
       return;
     }
-    sampleBytesTransferred += bytes;
+    sampleBytesTransferred += bytesTransferred;
   }
 
   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultDataSource.java
Patch:
@@ -202,8 +202,8 @@ public long open(DataSpec dataSpec) throws IOException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int readLength) throws IOException {
-    return Assertions.checkNotNull(dataSource).read(buffer, offset, readLength);
+  public int read(byte[] buffer, int offset, int length) throws IOException {
+    return Assertions.checkNotNull(dataSource).read(buffer, offset, length);
   }
 
   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DummyDataSource.java
Patch:
@@ -40,7 +40,7 @@ public long open(DataSpec dataSpec) throws IOException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int readLength) {
+  public int read(byte[] buffer, int offset, int length) {
     throw new UnsupportedOperationException();
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
Patch:
@@ -128,15 +128,15 @@ public long open(DataSpec dataSpec) throws FileDataSourceException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int readLength) throws FileDataSourceException {
-    if (readLength == 0) {
+  public int read(byte[] buffer, int offset, int length) throws FileDataSourceException {
+    if (length == 0) {
       return 0;
     } else if (bytesRemaining == 0) {
       return C.RESULT_END_OF_INPUT;
     } else {
       int bytesRead;
       try {
-        bytesRead = castNonNull(file).read(buffer, offset, (int) min(bytesRemaining, readLength));
+        bytesRead = castNonNull(file).read(buffer, offset, (int) min(bytesRemaining, length));
       } catch (IOException e) {
         throw new FileDataSourceException(e, PlaybackException.ERROR_CODE_IO_UNSPECIFIED);
       }

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/PriorityDataSource.java
Patch:
@@ -67,9 +67,9 @@ public long open(DataSpec dataSpec) throws IOException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int max) throws IOException {
+  public int read(byte[] buffer, int offset, int length) throws IOException {
     priorityTaskManager.proceedOrThrow(priority);
-    return upstream.read(buffer, offset, max);
+    return upstream.read(buffer, offset, length);
   }
 
   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/RawResourceDataSource.java
Patch:
@@ -232,8 +232,8 @@ public long open(DataSpec dataSpec) throws RawResourceDataSourceException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int readLength) throws RawResourceDataSourceException {
-    if (readLength == 0) {
+  public int read(byte[] buffer, int offset, int length) throws RawResourceDataSourceException {
+    if (length == 0) {
       return 0;
     } else if (bytesRemaining == 0) {
       return C.RESULT_END_OF_INPUT;
@@ -242,7 +242,7 @@ public int read(byte[] buffer, int offset, int readLength) throws RawResourceDat
     int bytesRead;
     try {
       int bytesToRead =
-          bytesRemaining == C.LENGTH_UNSET ? readLength : (int) min(bytesRemaining, readLength);
+          bytesRemaining == C.LENGTH_UNSET ? length : (int) min(bytesRemaining, length);
       bytesRead = castNonNull(inputStream).read(buffer, offset, bytesToRead);
     } catch (IOException e) {
       throw new RawResourceDataSourceException(e, PlaybackException.ERROR_CODE_IO_UNSPECIFIED);

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/ResolvingDataSource.java
Patch:
@@ -109,8 +109,8 @@ public long open(DataSpec dataSpec) throws IOException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int readLength) throws IOException {
-    return upstreamDataSource.read(buffer, offset, readLength);
+  public int read(byte[] buffer, int offset, int length) throws IOException {
+    return upstreamDataSource.read(buffer, offset, length);
   }
 
   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/StatsDataSource.java
Patch:
@@ -88,8 +88,8 @@ public long open(DataSpec dataSpec) throws IOException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int readLength) throws IOException {
-    int bytesRead = dataSource.read(buffer, offset, readLength);
+  public int read(byte[] buffer, int offset, int length) throws IOException {
+    int bytesRead = dataSource.read(buffer, offset, length);
     if (bytesRead != C.RESULT_END_OF_INPUT) {
       this.bytesRead += bytesRead;
     }

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/TeeDataSource.java
Patch:
@@ -63,11 +63,11 @@ public long open(DataSpec dataSpec) throws IOException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int max) throws IOException {
+  public int read(byte[] buffer, int offset, int length) throws IOException {
     if (bytesRemaining == 0) {
       return C.RESULT_END_OF_INPUT;
     }
-    int bytesRead = upstream.read(buffer, offset, max);
+    int bytesRead = upstream.read(buffer, offset, length);
     if (bytesRead > 0) {
       // TODO: Consider continuing even if writes to the sink fail.
       dataSink.write(buffer, offset, bytesRead);

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/UdpDataSource.java
Patch:
@@ -130,8 +130,8 @@ public long open(DataSpec dataSpec) throws UdpDataSourceException {
   }
 
   @Override
-  public int read(byte[] buffer, int offset, int readLength) throws UdpDataSourceException {
-    if (readLength == 0) {
+  public int read(byte[] buffer, int offset, int length) throws UdpDataSourceException {
+    if (length == 0) {
       return 0;
     }
 
@@ -147,7 +147,7 @@ public int read(byte[] buffer, int offset, int readLength) throws UdpDataSourceE
     }
 
     int packetOffset = packet.getLength() - packetRemaining;
-    int bytesToRead = min(packetRemaining, readLength);
+    int bytesToRead = min(packetRemaining, length);
     System.arraycopy(packetBuffer, packetOffset, buffer, offset, bytesToRead);
     packetRemaining -= bytesToRead;
     return bytesToRead;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/NoOpCacheEvictor.java
Patch:
@@ -34,7 +34,7 @@ public void onCacheInitialized() {
   }
 
   @Override
-  public void onStartFile(Cache cache, String key, long position, long maxLength) {
+  public void onStartFile(Cache cache, String key, long position, long length) {
     // Do nothing.
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/util/DebugTextViewHelper.java
Patch:
@@ -84,7 +84,7 @@ public final void onPlaybackStateChanged(@Player.State int playbackState) {
 
   @Override
   public final void onPlayWhenReadyChanged(
-      boolean playWhenReady, @Player.PlayWhenReadyChangeReason int playbackState) {
+      boolean playWhenReady, @Player.PlayWhenReadyChangeReason int reason) {
     updateAndPost();
   }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/PlayerEmsgHandler.java
Patch:
@@ -290,8 +290,8 @@ public void sampleData(ParsableByteArray data, int length, @SampleDataPart int s
 
     @Override
     public void sampleMetadata(
-        long timeUs, int flags, int size, int offset, @Nullable CryptoData encryptionData) {
-      sampleQueue.sampleMetadata(timeUs, flags, size, offset, encryptionData);
+        long timeUs, int flags, int size, int offset, @Nullable CryptoData cryptoData) {
+      sampleQueue.sampleMetadata(timeUs, flags, size, offset, cryptoData);
       parseAndDiscardSamples();
     }
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorInput.java
Patch:
@@ -56,12 +56,12 @@ public DefaultExtractorInput(DataReader dataReader, long position, long length)
   }
 
   @Override
-  public int read(byte[] target, int offset, int length) throws IOException {
-    int bytesRead = readFromPeekBuffer(target, offset, length);
+  public int read(byte[] buffer, int offset, int length) throws IOException {
+    int bytesRead = readFromPeekBuffer(buffer, offset, length);
     if (bytesRead == 0) {
       bytesRead =
           readFromUpstream(
-              target, offset, length, /* bytesAlreadyRead= */ 0, /* allowEndOfInput= */ true);
+              buffer, offset, length, /* bytesAlreadyRead= */ 0, /* allowEndOfInput= */ true);
     }
     commitBytesRead(bytesRead);
     return bytesRead;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ExtractorInput.java
Patch:
@@ -72,14 +72,14 @@ public interface ExtractorInput extends DataReader {
    * <p>This method blocks until at least one byte of data can be read, the end of the input is
    * detected, or an exception is thrown.
    *
-   * @param target A target array into which data should be written.
+   * @param buffer A target array into which data should be written.
    * @param offset The offset into the target array at which to write.
    * @param length The maximum number of bytes to read from the input.
    * @return The number of bytes read, or {@link C#RESULT_END_OF_INPUT} if the input has ended.
    * @throws IOException If an error occurs reading from the input.
    */
   @Override
-  int read(byte[] target, int offset, int length) throws IOException;
+  int read(byte[] buffer, int offset, int length) throws IOException;
 
   /**
    * Like {@link #read(byte[], int, int)}, but reads the requested {@code length} in full.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ForwardingExtractorInput.java
Patch:
@@ -27,8 +27,8 @@ public ForwardingExtractorInput(ExtractorInput input) {
   }
 
   @Override
-  public int read(byte[] target, int offset, int length) throws IOException {
-    return input.read(target, offset, length);
+  public int read(byte[] buffer, int offset, int length) throws IOException {
+    return input.read(buffer, offset, length);
   }
 
   @Override

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/Aes128DataSource.java
Patch:
@@ -96,9 +96,9 @@ public final long open(DataSpec dataSpec) throws IOException {
   }
 
   @Override
-  public final int read(byte[] buffer, int offset, int readLength) throws IOException {
+  public final int read(byte[] buffer, int offset, int length) throws IOException {
     Assertions.checkNotNull(cipherInputStream);
-    int bytesRead = cipherInputStream.read(buffer, offset, readLength);
+    int bytesRead = cipherInputStream.read(buffer, offset, length);
     if (bytesRead < 0) {
       return C.RESULT_END_OF_INPUT;
     }

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -94,7 +94,7 @@ public BundledHlsMediaChunkExtractor createExtractor(
       @Nullable List<Format> muxedCaptionFormats,
       TimestampAdjuster timestampAdjuster,
       Map<String, List<String>> responseHeaders,
-      ExtractorInput extractorInput)
+      ExtractorInput sniffingExtractorInput)
       throws IOException {
     @FileTypes.Type
     int formatInferredFileType = FileTypes.inferFileTypeFromMimeType(format.sampleMimeType);
@@ -115,13 +115,13 @@ public BundledHlsMediaChunkExtractor createExtractor(
 
     // Extractor to be used if the type is not recognized.
     @Nullable Extractor fallBackExtractor = null;
-    extractorInput.resetPeekPosition();
+    sniffingExtractorInput.resetPeekPosition();
     for (int i = 0; i < fileTypeOrder.size(); i++) {
       int fileType = fileTypeOrder.get(i);
       Extractor extractor =
           checkNotNull(
               createExtractorByFileType(fileType, format, muxedCaptionFormats, timestampAdjuster));
-      if (sniffQuietly(extractor, extractorInput)) {
+      if (sniffQuietly(extractor, sniffingExtractorInput)) {
         return new BundledHlsMediaChunkExtractor(extractor, format, timestampAdjuster);
       }
       if (fallBackExtractor == null

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
Patch:
@@ -1781,10 +1781,9 @@ public int sampleData(
     }
 
     @Override
-    public void sampleData(
-        ParsableByteArray buffer, int length, @SampleDataPart int sampleDataPart) {
+    public void sampleData(ParsableByteArray data, int length, @SampleDataPart int sampleDataPart) {
       ensureBufferCapacity(bufferPosition + length);
-      buffer.readBytes(this.buffer, bufferPosition, length);
+      data.readBytes(this.buffer, bufferPosition, length);
       bufferPosition += length;
     }
 

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/Aes128DataSourceTest.java
Patch:
@@ -109,7 +109,7 @@ public long open(DataSpec dataSpec) throws IOException {
     }
 
     @Override
-    public int read(byte[] buffer, int offset, int readLength) {
+    public int read(byte[] buffer, int offset, int length) {
       return C.RESULT_END_OF_INPUT;
     }
 

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/TransferRtpDataChannel.java
Patch:
@@ -88,14 +88,14 @@ public Uri getUri() {
   }
 
   @Override
-  public int read(byte[] target, int offset, int length) {
+  public int read(byte[] buffer, int offset, int length) {
     if (length == 0) {
       return 0;
     }
 
     int bytesRead = 0;
     int bytesToRead = min(length, unreadData.length);
-    System.arraycopy(unreadData, /* srcPos= */ 0, target, offset, bytesToRead);
+    System.arraycopy(unreadData, /* srcPos= */ 0, buffer, offset, bytesToRead);
     bytesRead += bytesToRead;
     unreadData = Arrays.copyOfRange(unreadData, bytesToRead, unreadData.length);
 
@@ -115,7 +115,7 @@ public int read(byte[] target, int offset, int length) {
     }
 
     bytesToRead = min(length - bytesRead, data.length);
-    System.arraycopy(data, /* srcPos= */ 0, target, offset + bytesRead, bytesToRead);
+    System.arraycopy(data, /* srcPos= */ 0, buffer, offset + bytesRead, bytesToRead);
     if (bytesToRead < data.length) {
       unreadData = Arrays.copyOfRange(data, bytesToRead, data.length);
     }

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/UdpDataSourceRtpDataChannel.java
Patch:
@@ -94,9 +94,9 @@ public void close() {
   }
 
   @Override
-  public int read(byte[] target, int offset, int length) throws IOException {
+  public int read(byte[] buffer, int offset, int length) throws IOException {
     try {
-      return dataSource.read(target, offset, length);
+      return dataSource.read(buffer, offset, length);
     } catch (UdpDataSource.UdpDataSourceException e) {
       if (e.reason == PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT) {
         return C.RESULT_END_OF_INPUT;

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpAacReader.java
Patch:
@@ -86,7 +86,7 @@ public void onReceivingFirstPacket(long timestamp, int sequenceNumber) {
 
   @Override
   public void consume(
-      ParsableByteArray data, long timestamp, int sequenceNumber, boolean isFrameBoundary) {
+      ParsableByteArray data, long timestamp, int sequenceNumber, boolean rtpMarker) {
     /*
     AAC as RTP payload (RFC3640):
       +---------+-----------+-----------+---------------+
@@ -120,7 +120,7 @@ Access Unit(AU) Header section
 
       // Outputs all the received data, whether fragmented or not.
       trackOutput.sampleData(data, data.bytesLeft());
-      if (isFrameBoundary) {
+      if (rtpMarker) {
         outputSampleMetadata(trackOutput, sampleTimeUs, auSize);
       }
     } else {

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpAc3Reader.java
Patch:
@@ -73,7 +73,7 @@ public void onReceivingFirstPacket(long timestamp, int sequenceNumber) {
 
   @Override
   public void consume(
-      ParsableByteArray data, long timestamp, int sequenceNumber, boolean isFrameBoundary) {
+      ParsableByteArray data, long timestamp, int sequenceNumber, boolean rtpMarker) {
     /*
     AC-3 payload as an RTP payload (RFC4184).
       +-+-+-+-+-+-+-+-+-+-+-+-+-+- .. +-+-+-+-+-+-+-+
@@ -115,7 +115,7 @@ public void consume(
         // Falls through.
       case AC3_FRAME_TYPE_NON_INITIAL_FRAGMENT:
         // The content of an AC3 frame is split into multiple RTP packets.
-        processFragmentedPacket(data, isFrameBoundary, frameType, sampleTimeUs);
+        processFragmentedPacket(data, rtpMarker, frameType, sampleTimeUs);
         break;
 
       default:

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/reader/RtpH264Reader.java
Patch:
@@ -86,8 +86,7 @@ public void createTracks(ExtractorOutput extractorOutput, int trackId) {
   public void onReceivingFirstPacket(long timestamp, int sequenceNumber) {}
 
   @Override
-  public void consume(
-      ParsableByteArray data, long timestamp, int sequenceNumber, boolean isAuBoundary)
+  public void consume(ParsableByteArray data, long timestamp, int sequenceNumber, boolean rtpMarker)
       throws ParserException {
 
     int rtpH264PacketMode;
@@ -111,7 +110,7 @@ public void consume(
           /* cause= */ null);
     }
 
-    if (isAuBoundary) {
+    if (rtpMarker) {
       if (firstReceivedTimestamp == C.TIME_UNSET) {
         firstReceivedTimestamp = timestamp;
       }

File: library/rtsp/src/test/java/com/google/android/exoplayer2/source/rtsp/RtspPlaybackTest.java
Patch:
@@ -285,7 +285,7 @@ public Uri getUri() {
     public void close() {}
 
     @Override
-    public int read(byte[] target, int offset, int length) {
+    public int read(byte[] buffer, int offset, int length) {
       if (length == 0) {
         return 0;
       }
@@ -301,7 +301,7 @@ public int read(byte[] target, int offset, int length) {
       }
 
       int byteToRead = min(length, data.length);
-      System.arraycopy(data, /* srcPos= */ 0, target, offset, byteToRead);
+      System.arraycopy(data, /* srcPos= */ 0, buffer, offset, byteToRead);
       return byteToRead;
     }
   }

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/DefaultSsChunkSource.java
Patch:
@@ -62,15 +62,15 @@ public Factory(DataSource.Factory dataSourceFactory) {
     public SsChunkSource createChunkSource(
         LoaderErrorThrower manifestLoaderErrorThrower,
         SsManifest manifest,
-        int elementIndex,
+        int streamElementIndex,
         ExoTrackSelection trackSelection,
         @Nullable TransferListener transferListener) {
       DataSource dataSource = dataSourceFactory.createDataSource();
       if (transferListener != null) {
         dataSource.addTransferListener(transferListener);
       }
       return new DefaultSsChunkSource(
-          manifestLoaderErrorThrower, manifest, elementIndex, trackSelection, dataSource);
+          manifestLoaderErrorThrower, manifest, streamElementIndex, trackSelection, dataSource);
     }
   }
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
Patch:
@@ -1507,7 +1507,7 @@ public void onRenderedFirstFrame() {
     }
 
     @Override
-    public void onTracksChanged(TrackGroupArray tracks, TrackSelectionArray selections) {
+    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray selections) {
       // Suppress the update if transitioning to an unprepared period within the same window. This
       // is necessary to avoid closing the shutter when such a transition occurs. See:
       // https://github.com/google/ExoPlayer/issues/5507.

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -1548,7 +1548,7 @@ public void onRenderedFirstFrame() {
     }
 
     @Override
-    public void onTracksChanged(TrackGroupArray tracks, TrackSelectionArray selections) {
+    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray selections) {
       // Suppress the update if transitioning to an unprepared period within the same window. This
       // is necessary to avoid closing the shutter when such a transition occurs. See:
       // https://github.com/google/ExoPlayer/issues/5507.

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExtractorInput.java
Patch:
@@ -107,10 +107,10 @@ public void setPosition(int position) {
   }
 
   @Override
-  public int read(byte[] target, int offset, int length) throws IOException {
+  public int read(byte[] buffer, int offset, int length) throws IOException {
     checkIOException(readPosition, failedReadPositions);
     length = getLengthToRead(readPosition, length, partiallySatisfiedTargetReadPositions);
-    return readFullyInternal(target, offset, length, true) ? length : C.RESULT_END_OF_INPUT;
+    return readFullyInternal(buffer, offset, length, true) ? length : C.RESULT_END_OF_INPUT;
   }
 
   @Override

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackSelection.java
Patch:
@@ -125,7 +125,7 @@ public Object getSelectionData() {
   }
 
   @Override
-  public void onPlaybackSpeed(float speed) {
+  public void onPlaybackSpeed(float playbackSpeed) {
     // Do nothing.
   }
 
@@ -152,7 +152,7 @@ public boolean blacklist(int index, long exclusionDurationMs) {
   }
 
   @Override
-  public boolean isBlacklisted(int index, long exclusionDurationMs) {
+  public boolean isBlacklisted(int index, long nowMs) {
     assertThat(isEnabled).isTrue();
     return false;
   }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeVideoRenderer.java
Patch:
@@ -95,14 +95,14 @@ protected void onFormatChanged(Format format) {
   }
 
   @Override
-  public void handleMessage(int messageType, @Nullable Object payload) throws ExoPlaybackException {
+  public void handleMessage(int messageType, @Nullable Object message) throws ExoPlaybackException {
     switch (messageType) {
       case MSG_SET_VIDEO_OUTPUT:
-        output = payload;
+        output = message;
         renderedFirstFrameAfterReset = false;
         break;
       default:
-        super.handleMessage(messageType, payload);
+        super.handleMessage(messageType, message);
     }
   }
 

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -2116,7 +2116,9 @@ public static byte[] gzip(byte[] input) {
     try (GZIPOutputStream os = new GZIPOutputStream(output)) {
       os.write(input);
     } catch (IOException e) {
-      throw new AssertionError(e);
+      // A ByteArrayOutputStream wrapped in a GZipOutputStream should never throw IOException since
+      // no I/O is happening.
+      throw new IllegalStateException(e);
     }
     return output.toByteArray();
   }

File: library/common/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java
Patch:
@@ -362,7 +362,7 @@ public InvalidContentTypeException(String contentType, DataSpec dataSpec) {
       super(
           "Invalid content type: " + contentType,
           dataSpec,
-          PlaybackException.ERROR_CODE_IO_BAD_HTTP_REQUEST,
+          PlaybackException.ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE,
           TYPE_OPEN);
       this.contentType = contentType;
     }

File: extensions/cronet/src/main/java/com/google/android/exoplayer2/ext/cronet/CronetDataSource.java
Patch:
@@ -937,7 +937,7 @@ protected UrlRequest.Builder buildRequestBuilder(DataSpec dataSpec) throws IOExc
       throw new OpenException(
           "HTTP request with non-empty body must set Content-Type",
           dataSpec,
-          PlaybackException.ERROR_CODE_IO_BAD_HTTP_REQUEST,
+          PlaybackException.ERROR_CODE_FAILED_RUNTIME_CHECK,
           Status.IDLE);
     }
 

File: extensions/okhttp/src/main/java/com/google/android/exoplayer2/ext/okhttp/OkHttpDataSource.java
Patch:
@@ -405,7 +405,7 @@ private Request makeRequest(DataSpec dataSpec) throws HttpDataSourceException {
       throw new HttpDataSourceException(
           "Malformed URL",
           dataSpec,
-          PlaybackException.ERROR_CODE_IO_BAD_HTTP_REQUEST,
+          PlaybackException.ERROR_CODE_FAILED_RUNTIME_CHECK,
           HttpDataSourceException.TYPE_OPEN);
     }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashChunkSource.java
Patch:
@@ -35,6 +35,7 @@ interface Factory {
     /**
      * @param manifestLoaderErrorThrower Throws errors affecting loading of manifests.
      * @param manifest The initial manifest.
+     * @param baseUrlExclusionList The base URL exclusion list.
      * @param periodIndex The index of the corresponding period in the manifest.
      * @param adaptationSetIndices The indices of the corresponding adaptation sets in the period.
      * @param trackSelection The track selection.
@@ -51,6 +52,7 @@ interface Factory {
     DashChunkSource createDashChunkSource(
         LoaderErrorThrower manifestLoaderErrorThrower,
         DashManifest manifest,
+        BaseUrlExclusionList baseUrlExclusionList,
         int periodIndex,
         int[] adaptationSetIndices,
         ExoTrackSelection trackSelection,

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DashMediaPeriodTest.java
Patch:
@@ -200,6 +200,7 @@ private static DashMediaPeriod createDashMediaPeriod(DashManifest manifest, int
     return new DashMediaPeriod(
         /* id= */ periodIndex,
         manifest,
+        new BaseUrlExclusionList(),
         periodIndex,
         mock(DashChunkSource.Factory.class),
         mock(TransferListener.class),

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Mp4Extractor.java
Patch:
@@ -133,7 +133,7 @@ public final class Mp4Extractor implements Extractor, SeekMap {
    */
   private static final long MAXIMUM_READ_AHEAD_BYTES_STREAM = 10 * 1024 * 1024;
 
-  private final @Flags int flags;
+  @Flags private final int flags;
 
   // Temporary arrays.
   private final ParsableByteArray nalStartCode;

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -597,7 +597,7 @@ public boolean handleMessage(Message msg) {
     } catch (BehindLiveWindowException e) {
       handleIoException(e, PlaybackException.ERROR_CODE_BEHIND_LIVE_WINDOW);
     } catch (IOException e) {
-      handleIoException(e, PlaybackException.ERROR_CODE_UNSPECIFIED);
+      handleIoException(e, PlaybackException.ERROR_CODE_IO_UNSPECIFIED);
     } catch (RuntimeException e) {
       ExoPlaybackException error = ExoPlaybackException.createForUnexpected(e);
       Log.e(TAG, "Playback error", error);

File: library/common/src/main/java/com/google/android/exoplayer2/DefaultControlDispatcher.java
Patch:
@@ -18,7 +18,8 @@
 import static java.lang.Math.max;
 import static java.lang.Math.min;
 
-/** Default {@link ControlDispatcher}. */
+/** @deprecated Use a {@link ForwardingPlayer} or configure the player to customize operations. */
+@Deprecated
 public class DefaultControlDispatcher implements ControlDispatcher {
 
   private final long rewindIncrementMs;

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSession.java
Patch:
@@ -564,7 +564,8 @@ private static int getErrorCodeForMediaDrmException(
       // better diagnosis tools were provided, we treat this as a system error.
       return PlaybackException.ERROR_CODE_DRM_SYSTEM_ERROR;
     } else {
-      return PlaybackException.ERROR_CODE_DRM_UNSPECIFIED;
+      // The error happened during the license request.
+      return PlaybackException.ERROR_CODE_DRM_LICENSE_ACQUISITION_FAILED;
     }
   }
 

File: library/core/src/test/java/com/google/android/exoplayer2/source/SampleQueueTest.java
Patch:
@@ -558,7 +558,7 @@ public void readWithErrorSessionReadsNothingAndThrows() throws IOException {
     when(mockDrmSession.getError())
         .thenReturn(
             new DrmSession.DrmSessionException(
-                new Exception(), PlaybackException.ERROR_CODE_DRM_UNSPECIFIED));
+                new Exception(), PlaybackException.ERROR_CODE_DRM_SYSTEM_ERROR));
     assertReadNothing(/* formatRequired= */ false);
     try {
       sampleQueue.maybeThrowError();

File: library/common/src/main/java/com/google/android/exoplayer2/metadata/flac/PictureFrame.java
Patch:
@@ -76,7 +76,7 @@ public PictureFrame(
 
   @Override
   public void populateMediaMetadata(MediaMetadata.Builder builder) {
-    builder.setArtworkData(pictureData);
+    builder.maybeSetArtworkData(pictureData, pictureType);
   }
 
   @Override

File: library/common/src/main/java/com/google/android/exoplayer2/metadata/id3/ApicFrame.java
Patch:
@@ -53,7 +53,7 @@ public ApicFrame(
 
   @Override
   public void populateMediaMetadata(MediaMetadata.Builder builder) {
-    builder.setArtworkData(pictureData);
+    builder.maybeSetArtworkData(pictureData, pictureType);
   }
 
   @Override

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -9206,6 +9206,7 @@ public void targetLiveOffsetInMedia_unknownWindowStartTime_doesNotAdjustLiveOffs
             /* windowDefaultStartPositionUs= */ 0,
             /* isSeekable= */ true,
             /* isDynamic= */ true,
+            /* suppressPositionProjection= */ false,
             /* manifest= */ null,
             mediaItem,
             mediaItem.liveConfiguration);

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -9428,6 +9428,7 @@ public void targetLiveOffsetInMedia_unknownWindowStartTime_doesNotAdjustLiveOffs
             /* windowDefaultStartPositionUs= */ 0,
             /* isSeekable= */ true,
             /* isDynamic= */ true,
+            /* suppressPositionProjection= */ false,
             /* manifest= */ null,
             mediaItem,
             mediaItem.liveConfiguration);

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
Patch:
@@ -1304,11 +1304,12 @@ private void updateAspectRatio() {
     int height = videoSize.height;
     int unappliedRotationDegrees = videoSize.unappliedRotationDegrees;
     float videoAspectRatio =
-        (height == 0 || width == 0) ? 1 : (width * videoSize.pixelWidthHeightRatio) / height;
+        (height == 0 || width == 0) ? 0 : (width * videoSize.pixelWidthHeightRatio) / height;
 
     if (surfaceView instanceof TextureView) {
       // Try to apply rotation transformation when our surface is a TextureView.
-      if (unappliedRotationDegrees == 90 || unappliedRotationDegrees == 270) {
+      if (videoAspectRatio > 0
+          && (unappliedRotationDegrees == 90 || unappliedRotationDegrees == 270)) {
         // We will apply a rotation 90/270 degree to the output texture of the TextureView.
         // In this case, the output video's width and height will be swapped.
         videoAspectRatio = 1 / videoAspectRatio;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -1455,11 +1455,12 @@ private void updateAspectRatio() {
     int height = videoSize.height;
     int unappliedRotationDegrees = videoSize.unappliedRotationDegrees;
     float videoAspectRatio =
-        (height == 0 || width == 0) ? 1 : (width * videoSize.pixelWidthHeightRatio) / height;
+        (height == 0 || width == 0) ? 0 : (width * videoSize.pixelWidthHeightRatio) / height;
 
     if (surfaceView instanceof TextureView) {
       // Try to apply rotation transformation when our surface is a TextureView.
-      if (unappliedRotationDegrees == 90 || unappliedRotationDegrees == 270) {
+      if (videoAspectRatio > 0
+          && (unappliedRotationDegrees == 90 || unappliedRotationDegrees == 270)) {
         // We will apply a rotation 90/270 degree to the output texture of the TextureView.
         // In this case, the output video's width and height will be swapped.
         videoAspectRatio = 1 / videoAspectRatio;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Atom.java
Patch:
@@ -106,6 +106,8 @@
   @SuppressWarnings("ConstantCaseForConstants")
   public static final int TYPE_s263 = 0x73323633;
 
+  public static final int TYPE_H263 = 0x48323633;
+
   @SuppressWarnings("ConstantCaseForConstants")
   public static final int TYPE_d263 = 0x64323633;
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -915,6 +915,7 @@ private static StsdData parseStsd(
           || childAtomType == Atom.TYPE_hvc1
           || childAtomType == Atom.TYPE_hev1
           || childAtomType == Atom.TYPE_s263
+          || childAtomType == Atom.TYPE_H263
           || childAtomType == Atom.TYPE_vp08
           || childAtomType == Atom.TYPE_vp09
           || childAtomType == Atom.TYPE_av01
@@ -1056,6 +1057,8 @@ private static void parseVideoSampleEntry(
     @Nullable String mimeType = null;
     if (atomType == Atom.TYPE_m1v_) {
       mimeType = MimeTypes.VIDEO_MPEG;
+    } else if (atomType == Atom.TYPE_H263) {
+      mimeType = MimeTypes.VIDEO_H263;
     }
 
     @Nullable List<byte[]> initializationData = null;

File: library/core/src/main/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactory.java
Patch:
@@ -18,7 +18,6 @@
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 
 import android.content.Context;
-import android.util.Pair;
 import android.util.SparseArray;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
@@ -40,6 +39,7 @@
 import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.collect.ImmutableList;
 import java.util.Arrays;
 import java.util.List;
 
@@ -427,7 +427,8 @@ private MediaSource maybeWrapWithAdsMediaSource(MediaItem mediaItem, MediaSource
         new DataSpec(adsConfiguration.adTagUri),
         /* adsId= */ adsConfiguration.adsId != null
             ? adsConfiguration.adsId
-            : Pair.create(mediaItem.mediaId, adsConfiguration.adTagUri),
+            : ImmutableList.of(
+                mediaItem.mediaId, mediaItem.playbackProperties.uri, adsConfiguration.adTagUri),
         /* adMediaSourceFactory= */ this,
         adsLoader,
         adViewProvider);

File: library/common/src/main/java/com/google/android/exoplayer2/metadata/emsg/EventMessageDecoder.java
Patch:
@@ -35,8 +35,8 @@ protected Metadata decode(MetadataInputBuffer inputBuffer, ByteBuffer buffer) {
   public EventMessage decode(ParsableByteArray emsgData) {
     String schemeIdUri = Assertions.checkNotNull(emsgData.readNullTerminatedString());
     String value = Assertions.checkNotNull(emsgData.readNullTerminatedString());
-    long durationMs = emsgData.readUnsignedInt();
-    long id = emsgData.readUnsignedInt();
+    long durationMs = emsgData.readLong();
+    long id = emsgData.readLong();
     byte[] messageData =
         Arrays.copyOfRange(emsgData.getData(), emsgData.getPosition(), emsgData.limit());
     return new EventMessage(schemeIdUri, value, durationMs, id, messageData);

File: library/common/src/test/java/com/google/android/exoplayer2/metadata/emsg/EventMessageDecoderTest.java
Patch:
@@ -37,8 +37,8 @@ public void decodeEventMessage() {
         Bytes.concat(
             createByteArray(117, 114, 110, 58, 116, 101, 115, 116, 0), // scheme_id_uri = "urn:test"
             createByteArray(49, 50, 51, 0), // value = "123"
-            createByteArray(0, 0, 11, 184), // event_duration_ms = 3000
-            createByteArray(0, 15, 67, 211), // id = 1000403
+            createByteArray(0, 0, 0, 0, 0, 0, 11, 184), // event_duration_ms = 3000
+            createByteArray(0, 0, 0, 0, 0, 15, 67, 211), // id = 1000403
             createByteArray(0, 1, 2, 3, 4)); // message_data = {0, 1, 2, 3, 4}
     EventMessageDecoder decoder = new EventMessageDecoder();
 

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
Patch:
@@ -1502,7 +1502,8 @@ private static Format deriveFormat(
             .setPeakBitrate(propagateBitrates ? playlistFormat.peakBitrate : Format.NO_VALUE)
             .setCodecs(codecs)
             .setWidth(playlistFormat.width)
-            .setHeight(playlistFormat.height);
+            .setHeight(playlistFormat.height)
+            .setFrameRate(playlistFormat.frameRate);
 
     if (sampleMimeType != null) {
       formatBuilder.setSampleMimeType(sampleMimeType);

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/UdpDataSourceRtpDataChannel.java
Patch:
@@ -21,13 +21,13 @@
 import android.net.Uri;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.upstream.DataSpec;
 import com.google.android.exoplayer2.upstream.TransferListener;
 import com.google.android.exoplayer2.upstream.UdpDataSource;
 import com.google.android.exoplayer2.util.Util;
 import com.google.common.primitives.Ints;
 import java.io.IOException;
-import java.net.SocketTimeoutException;
 
 /** An {@link RtpDataChannel} for UDP transport. */
 /* package */ final class UdpDataSourceRtpDataChannel implements RtpDataChannel {
@@ -98,7 +98,7 @@ public int read(byte[] target, int offset, int length) throws IOException {
     try {
       return dataSource.read(target, offset, length);
     } catch (UdpDataSource.UdpDataSourceException e) {
-      if (e.getCause() instanceof SocketTimeoutException) {
+      if (e.reason == PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT) {
         return C.RESULT_END_OF_INPUT;
       } else {
         throw e;

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
Patch:
@@ -876,14 +876,14 @@ public void onProvisionCompleted() {
     }
 
     @Override
-    public void onProvisionError(Exception error) {
+    public void onProvisionError(Exception error, boolean thrownByExoMediaDrm) {
       provisioningSession = null;
       ImmutableList<DefaultDrmSession> sessionsToNotify =
           ImmutableList.copyOf(sessionsAwaitingProvisioning);
       // Clear the list before calling onProvisionError in case provisioning is re-requested.
       sessionsAwaitingProvisioning.clear();
       for (DefaultDrmSession session : sessionsToNotify) {
-        session.onProvisionError(error);
+        session.onProvisionError(error, thrownByExoMediaDrm);
       }
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/ByteArrayDataSource.java
Patch:
@@ -47,9 +47,7 @@ public long open(DataSpec dataSpec) throws IOException {
     uri = dataSpec.uri;
     transferInitializing(dataSpec);
     if (dataSpec.position > data.length) {
-      throw new DataSourceException(
-          PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE,
-          DataSourceException.TYPE_READ);
+      throw new DataSourceException(PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE);
     }
     readPosition = (int) dataSpec.position;
     bytesRemaining = data.length - (int) dataSpec.position;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSchemeDataSource.java
Patch:
@@ -70,9 +70,7 @@ public long open(DataSpec dataSpec) throws IOException {
     }
     if (dataSpec.position > data.length) {
       data = null;
-      throw new DataSourceException(
-          PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE,
-          DataSourceException.TYPE_READ);
+      throw new DataSourceException(PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE);
     }
     readPosition = (int) dataSpec.position;
     bytesRemaining = data.length - readPosition;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
Patch:
@@ -91,9 +91,7 @@ public long open(DataSpec dataSpec) throws FileDataSourceException {
       bytesRemaining =
           dataSpec.length == C.LENGTH_UNSET ? file.length() - dataSpec.position : dataSpec.length;
       if (bytesRemaining < 0) {
-        throw new DataSourceException(
-            PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE,
-            DataSourceException.TYPE_READ);
+        throw new DataSourceException(PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE);
       }
     } catch (FileDataSourceException e) {
       throw e;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
Patch:
@@ -575,8 +575,7 @@ public long open(DataSpec dataSpec) throws IOException {
           bytesRemaining -= dataSpec.position;
           if (bytesRemaining < 0) {
             throw new DataSourceException(
-                PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE,
-                DataSourceException.TYPE_READ);
+                PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE);
           }
         }
       }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeDataSource.java
Patch:
@@ -117,9 +117,7 @@ public final long open(DataSpec dataSpec) throws IOException {
     }
 
     if (dataSpec.position > totalLength) {
-      throw new DataSourceException(
-          PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE,
-          DataSourceException.TYPE_READ);
+      throw new DataSourceException(PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE);
     }
 
     // Scan through the segments, configuring them for the current read.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Atom.java
Patch:
@@ -99,6 +99,8 @@
   @SuppressWarnings("ConstantCaseForConstants")
   public static final int TYPE_s263 = 0x73323633;
 
+  public static final int TYPE_H263 = 0x48323633;
+
   @SuppressWarnings("ConstantCaseForConstants")
   public static final int TYPE_d263 = 0x64323633;
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -938,6 +938,7 @@ private static StsdData parseStsd(
           || childAtomType == Atom.TYPE_hvc1
           || childAtomType == Atom.TYPE_hev1
           || childAtomType == Atom.TYPE_s263
+          || childAtomType == Atom.TYPE_H263
           || childAtomType == Atom.TYPE_vp08
           || childAtomType == Atom.TYPE_vp09
           || childAtomType == Atom.TYPE_av01
@@ -1100,6 +1101,8 @@ private static void parseVideoSampleEntry(
     @Nullable String mimeType = null;
     if (atomType == Atom.TYPE_m1v_) {
       mimeType = MimeTypes.VIDEO_MPEG;
+    } else if (atomType == Atom.TYPE_H263) {
+      mimeType = MimeTypes.VIDEO_H263;
     }
 
     @Nullable List<byte[]> initializationData = null;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerNotificationManager.java
Patch:
@@ -230,7 +230,7 @@ default CharSequence getCurrentSubText(Player player) {
      * @param player The {@link Player} for which a notification is being built.
      * @param callback A {@link BitmapCallback} to provide a {@link Bitmap} asynchronously.
      * @return The large icon for the current media item, or null if the icon will be returned
-     *     through the {@link BitmapCallback} or if no icon should displayed.
+     *     through the {@link BitmapCallback} or if no icon should be displayed.
      */
     @Nullable
     Bitmap getCurrentLargeIcon(Player player, BitmapCallback callback);

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSession.java
Patch:
@@ -30,6 +30,7 @@
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
 import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.drm.DrmInitData.SchemeData;
 import com.google.android.exoplayer2.drm.ExoMediaDrm.KeyRequest;
 import com.google.android.exoplayer2.drm.ExoMediaDrm.ProvisionRequest;
@@ -511,7 +512,8 @@ private void onKeysError(Exception e) {
   }
 
   private void onError(final Exception e) {
-    lastException = new DrmSessionException(e);
+    // TODO(internal b/184262323): Add an argument here which takes the error code from the caller.
+    lastException = new DrmSessionException(e, PlaybackException.ERROR_CODE_DRM_UNSPECIFIED);
     Log.e(TAG, "DRM session error", e);
     dispatchEvent(eventDispatcher -> eventDispatcher.drmSessionManagerError(e));
     if (state != STATE_OPENED_WITH_KEYS) {

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
Patch:
@@ -30,6 +30,7 @@
 import androidx.annotation.RequiresApi;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.drm.DrmInitData.SchemeData;
 import com.google.android.exoplayer2.drm.DrmSession.DrmSessionException;
 import com.google.android.exoplayer2.drm.ExoMediaDrm.OnEventListener;
@@ -540,7 +541,8 @@ private DrmSession acquireSession(
         if (eventDispatcher != null) {
           eventDispatcher.drmSessionManagerError(error);
         }
-        return new ErrorStateDrmSession(new DrmSessionException(error));
+        return new ErrorStateDrmSession(
+            new DrmSessionException(error, PlaybackException.ERROR_CODE_DRM_CONTENT_ERROR));
       }
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DrmSessionManager.java
Patch:
@@ -18,6 +18,7 @@
 import android.os.Looper;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.Format;
+import com.google.android.exoplayer2.PlaybackException;
 
 /** Manages a DRM session. */
 public interface DrmSessionManager {
@@ -54,8 +55,8 @@ public DrmSession acquireSession(
           } else {
             return new ErrorStateDrmSession(
                 new DrmSession.DrmSessionException(
-                    new UnsupportedDrmException(
-                        UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME)));
+                    new UnsupportedDrmException(UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME),
+                    PlaybackException.ERROR_CODE_DRM_SCHEME_UNSUPPORTED));
           }
         }
 

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -1116,7 +1116,7 @@ public static String getFormatSupportString(@FormatSupport int formatSupport) {
   private static final int ERROR_PROVISIONING_RETRY = 28;
 
   @PlaybackException.ErrorCode
-  public static int getErrorCodeCorrespondingToPlatformDrmErrorCode(int mediaDrmErrorCode) {
+  public static int getErrorCodeForMediaDrmErrorCode(int mediaDrmErrorCode) {
     switch (mediaDrmErrorCode) {
       case ERROR_PROVISIONING_CONFIG:
       case ERROR_PROVISIONING_PARSE:

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -3120,10 +3120,12 @@ public static boolean isMediaDrmStateException(@Nullable Throwable throwable) {
     }
 
     @DoNotInline
+    @ErrorCode
     public static int mediaDrmStateExceptionToErrorCode(Throwable throwable) {
       @Nullable
       String diagnosticsInfo = ((MediaDrm.MediaDrmStateException) throwable).getDiagnosticInfo();
-      return Util.getErrorCodeFromPlatformDiagnosticsInfo(diagnosticsInfo);
+      int drmErrorCode = Util.getErrorCodeFromPlatformDiagnosticsInfo(diagnosticsInfo);
+      return C.getErrorCodeForMediaDrmErrorCode(drmErrorCode);
     }
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
Patch:
@@ -1302,7 +1302,7 @@ private boolean feedInputBuffer() throws ExoPlaybackException {
         }
       } catch (CryptoException e) {
         throw createRendererException(
-            e, inputFormat, C.getErrorCodeCorrespondingToPlatformDrmErrorCode(e.getErrorCode()));
+            e, inputFormat, C.getErrorCodeForMediaDrmErrorCode(e.getErrorCode()));
       }
       return false;
     }
@@ -1373,7 +1373,7 @@ private boolean feedInputBuffer() throws ExoPlaybackException {
       }
     } catch (CryptoException e) {
       throw createRendererException(
-          e, inputFormat, C.getErrorCodeCorrespondingToPlatformDrmErrorCode(e.getErrorCode()));
+          e, inputFormat, C.getErrorCodeForMediaDrmErrorCode(e.getErrorCode()));
     }
 
     resetInputBuffer();

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdTagLoader.java
Patch:
@@ -161,7 +161,7 @@
   /** Whether IMA has sent an ad event to pause content since the last resume content event. */
   private boolean imaPausedContent;
   /** The current ad playback state. */
-  private @ImaAdState int imaAdState;
+  @ImaAdState private int imaAdState;
   /** The current ad media info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */
   @Nullable private AdMediaInfo imaAdMediaInfo;
   /** The current ad info, or {@code null} if in state {@link #IMA_AD_STATE_NONE}. */

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -1715,7 +1715,7 @@ public void seekAndReprepareAfterPlaybackError_keepsSeekPositionAndTimeline() th
               throw ExoPlaybackException.createForSource(new IOException());
             })
         .send();
-    runUntilPlaybackState(player, Player.STATE_IDLE);
+    TestPlayerRunHelper.runUntilError(player);
     player.seekTo(/* positionMs= */ 50);
     runUntilPendingCommandsAreFullyHandled(player);
     long positionAfterSeekHandled = player.getCurrentPosition();
@@ -9426,7 +9426,7 @@ public void onRepeatModeChanged(int repeatMode) {
     TestPlayerRunHelper.runUntilPlaybackState(player, Player.STATE_READY);
     player.play();
     player.setMediaItem(MediaItem.fromUri("http://this-will-throw-an-exception.mp4"));
-    TestPlayerRunHelper.runUntilPlaybackState(player, Player.STATE_IDLE);
+    TestPlayerRunHelper.runUntilError(player);
     runUntilPendingCommandsAreFullyHandled(player);
     player.release();
 

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/AnalyticsCollectorTest.java
Patch:
@@ -1662,7 +1662,7 @@ public void onEvents_isReportedWithCorrectEventTimes() throws Exception {
     TestPlayerRunHelper.runUntilPositionDiscontinuity(
         player, Player.DISCONTINUITY_REASON_AUTO_TRANSITION);
     player.setMediaItem(MediaItem.fromUri("http://this-will-throw-an-exception.mp4"));
-    TestPlayerRunHelper.runUntilPlaybackState(player, Player.STATE_IDLE);
+    TestPlayerRunHelper.runUntilError(player);
     ShadowLooper.runMainLooperToNextTask();
     player.release();
     surface.release();

File: library/core/src/main/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactory.java
Patch:
@@ -18,7 +18,6 @@
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 
 import android.content.Context;
-import android.util.Pair;
 import android.util.SparseArray;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
@@ -40,6 +39,7 @@
 import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.collect.ImmutableList;
 import java.util.Arrays;
 import java.util.List;
 
@@ -426,7 +426,8 @@ private MediaSource maybeWrapWithAdsMediaSource(MediaItem mediaItem, MediaSource
         new DataSpec(adsConfiguration.adTagUri),
         /* adsId= */ adsConfiguration.adsId != null
             ? adsConfiguration.adsId
-            : Pair.create(mediaItem.mediaId, adsConfiguration.adTagUri),
+            : ImmutableList.of(
+                mediaItem.mediaId, mediaItem.playbackProperties.uri, adsConfiguration.adTagUri),
         /* adMediaSourceFactory= */ this,
         adsLoader,
         adViewProvider);

File: library/common/src/main/java/com/google/android/exoplayer2/metadata/emsg/EventMessageDecoder.java
Patch:
@@ -35,8 +35,8 @@ protected Metadata decode(MetadataInputBuffer inputBuffer, ByteBuffer buffer) {
   public EventMessage decode(ParsableByteArray emsgData) {
     String schemeIdUri = Assertions.checkNotNull(emsgData.readNullTerminatedString());
     String value = Assertions.checkNotNull(emsgData.readNullTerminatedString());
-    long durationMs = emsgData.readUnsignedInt();
-    long id = emsgData.readUnsignedInt();
+    long durationMs = emsgData.readLong();
+    long id = emsgData.readLong();
     byte[] messageData =
         Arrays.copyOfRange(emsgData.getData(), emsgData.getPosition(), emsgData.limit());
     return new EventMessage(schemeIdUri, value, durationMs, id, messageData);

File: library/common/src/test/java/com/google/android/exoplayer2/metadata/emsg/EventMessageDecoderTest.java
Patch:
@@ -37,8 +37,8 @@ public void decodeEventMessage() {
         Bytes.concat(
             createByteArray(117, 114, 110, 58, 116, 101, 115, 116, 0), // scheme_id_uri = "urn:test"
             createByteArray(49, 50, 51, 0), // value = "123"
-            createByteArray(0, 0, 11, 184), // event_duration_ms = 3000
-            createByteArray(0, 15, 67, 211), // id = 1000403
+            createByteArray(0, 0, 0, 0, 0, 0, 11, 184), // event_duration_ms = 3000
+            createByteArray(0, 0, 0, 0, 0, 15, 67, 211), // id = 1000403
             createByteArray(0, 1, 2, 3, 4)); // message_data = {0, 1, 2, 3, 4}
     EventMessageDecoder decoder = new EventMessageDecoder();
 

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/DataSchemeDataSourceTest.java
Patch:
@@ -22,6 +22,7 @@
 import android.net.Uri;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.util.Util;
 import java.io.IOException;
 import org.junit.Before;
@@ -103,7 +104,7 @@ public void invalidStartPositionRequest() throws IOException {
           buildDataSpec(DATA_SCHEME_URI, /* position= */ 108, /* length= */ C.LENGTH_UNSET));
       fail();
     } catch (DataSourceException e) {
-      assertThat(e.reason).isEqualTo(DataSourceException.POSITION_OUT_OF_RANGE);
+      assertThat(e.reason).isEqualTo(PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE);
     }
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/ExoTimeoutException.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.annotation.RetentionPolicy;
 
 /** A timeout of an operation on the ExoPlayer playback thread. */
-public final class ExoTimeoutException extends Exception {
+public final class ExoTimeoutException extends RuntimeException {
 
   /**
    * The operation which produced the timeout error. One of {@link #TIMEOUT_OPERATION_RELEASE},

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -1953,8 +1953,9 @@ private void setVideoOutputInternal(@Nullable Object videoOutput) {
         // One of the renderers timed out releasing its resources.
         player.stop(
             /* reset= */ false,
-            ExoPlaybackException.createForRenderer(
-                new ExoTimeoutException(ExoTimeoutException.TIMEOUT_OPERATION_DETACH_SURFACE)));
+            ExoPlaybackException.createForUnexpected(
+                new ExoTimeoutException(ExoTimeoutException.TIMEOUT_OPERATION_DETACH_SURFACE),
+                PlaybackException.ERROR_CODE_TIMEOUT));
       }
       if (this.videoOutput == ownedSurface) {
         // We're replacing a surface that we are responsible for releasing.

File: library/common/src/test/java/com/google/android/exoplayer2/ExoPlaybackExceptionTest.java
Patch:
@@ -51,7 +51,8 @@ public void roundTripViaBundle_ofExoPlaybackExceptionTypeRenderer_yieldsEqualIns
             /* rendererIndex= */ 123,
             /* rendererFormat= */ new Format.Builder().setCodecs("anyCodec").build(),
             /* rendererFormatSupport= */ C.FORMAT_UNSUPPORTED_SUBTYPE,
-            /* isRecoverable= */ true);
+            /* isRecoverable= */ true,
+            /* errorCode= */ PlaybackException.ERROR_CODE_DECODER_INIT_FAILED);
 
     ExoPlaybackException after = ExoPlaybackException.CREATOR.fromBundle(before.toBundle());
     assertThat(areExoPlaybackExceptionsEqual(before, after)).isTrue();

File: library/common/src/test/java/com/google/android/exoplayer2/PlaybackExceptionTest.java
Patch:
@@ -78,7 +78,7 @@ public void exception_producesExpectedBundle() {
 
     Bundle bundle = exception.toBundle();
     assertThat(bundle.getString("0")).isEqualTo(PlaybackException.class.getName());
-    assertThat(bundle.getInt("1")).isEqualTo(4002); // Error code.
+    assertThat(bundle.getInt("1")).isEqualTo(4003); // Error code.
     assertThat(bundle.getLong("2")).isEqualTo(2000); // Timestamp.
     assertThat(bundle.getString("3")).isEqualTo("message");
     assertThat(bundle.getString("4")).isEqualTo(cause.getClass().getName());

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -611,6 +611,8 @@ public boolean handleMessage(Message msg) {
         errorCode = PlaybackException.ERROR_CODE_UNSPECIFIED;
       }
       handleIoException(e, errorCode);
+    } catch (HttpDataSource.CleartextNotPermittedException e) {
+      handleIoException(e, PlaybackException.ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED);
     } catch (HttpDataSource.InvalidResponseCodeException e) {
       handleIoException(e, PlaybackException.ERROR_CODE_IO_BAD_HTTP_STATUS);
     } catch (HttpDataSource.HttpDataSourceException e) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/ChunkSampleStream.java
Patch:
@@ -518,7 +518,8 @@ public LoadErrorAction onLoadError(
 
     long exclusionDurationMs =
         cancelable
-            ? loadErrorHandlingPolicy.getBlacklistDurationMsFor(loadErrorInfo)
+            ? loadErrorHandlingPolicy.getExclusionDurationMsFor(
+                LoadErrorHandlingPolicy.FALLBACK_TYPE_TRACK, loadErrorInfo)
             : C.TIME_UNSET;
     @Nullable LoadErrorAction loadErrorAction = null;
     if (chunkSource.onChunkLoadError(loadable, cancelable, error, exclusionDurationMs)) {

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
Patch:
@@ -893,7 +893,9 @@ public LoadErrorAction onLoadError(
     LoadErrorInfo loadErrorInfo =
         new LoadErrorInfo(loadEventInfo, mediaLoadData, error, errorCount);
     LoadErrorAction loadErrorAction;
-    long exclusionDurationMs = loadErrorHandlingPolicy.getBlacklistDurationMsFor(loadErrorInfo);
+    long exclusionDurationMs =
+        loadErrorHandlingPolicy.getExclusionDurationMsFor(
+            LoadErrorHandlingPolicy.FALLBACK_TYPE_TRACK, loadErrorInfo);
     if (exclusionDurationMs != C.TIME_UNSET) {
       exclusionSucceeded = chunkSource.maybeExcludeTrack(loadable, exclusionDurationMs);
     }

File: extensions/ima/src/test/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoaderTest.java
Patch:
@@ -273,7 +273,9 @@ public void startAndCallbacksAfterRelease() {
     adEventListener.onAdEvent(getAdEvent(AdEventType.STARTED, mockPrerollSingleAd));
     videoAdPlayer.pauseAd(TEST_AD_MEDIA_INFO);
     videoAdPlayer.stopAd(TEST_AD_MEDIA_INFO);
-    imaAdsLoader.onPlayerError(ExoPlaybackException.createForSource(new IOException()));
+    ExoPlaybackException anException = ExoPlaybackException.createForSource(new IOException());
+    imaAdsLoader.onPlayerErrorChanged(anException);
+    imaAdsLoader.onPlayerError(anException);
     imaAdsLoader.onPositionDiscontinuity(
         new Player.PositionInfo(
             /* windowUid= */ new Object(),

File: library/common/src/main/java/com/google/android/exoplayer2/audio/AacUtil.java
Patch:
@@ -250,7 +250,7 @@ public static Config parseAudioSpecificConfig(ParsableBitArray bitArray, boolean
     // For supported containers, bits_to_decode() is always 0.
     int channelCount = AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE[channelConfiguration];
     if (channelCount == AUDIO_SPECIFIC_CONFIG_CHANNEL_CONFIGURATION_INVALID) {
-      throw new ParserException();
+      throw ParserException.createForMalformedContainer(/* message= */ null, /* cause= */ null);
     }
     return new Config(sampleRateHz, channelCount, codecs);
   }
@@ -349,7 +349,7 @@ private static int getSamplingFrequency(ParsableBitArray bitArray) throws Parser
     } else if (frequencyIndex < 13) {
       samplingFrequency = AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE[frequencyIndex];
     } else {
-      throw new ParserException();
+      throw ParserException.createForMalformedContainer(/* message= */ null, /* cause= */ null);
     }
     return samplingFrequency;
   }

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/FlacFrameReader.java
Patch:
@@ -153,7 +153,7 @@ public static long getFirstSampleNumber(
     SampleNumberHolder sampleNumberHolder = new SampleNumberHolder();
     if (!checkAndReadFirstSampleNumber(
         scratch, flacStreamMetadata, isBlockSizeVariable, sampleNumberHolder)) {
-      throw new ParserException();
+      throw ParserException.createForMalformedContainer(/* message= */ null, /* cause= */ null);
     }
 
     return sampleNumberHolder.sampleNumber;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/SefReader.java
Patch:
@@ -231,7 +231,7 @@ private static SlowMotionData readSlowMotionData(ParsableByteArray data, int dat
     for (int i = 0; i < segmentStrings.size(); i++) {
       List<String> values = COLON_SPLITTER.splitToList(segmentStrings.get(i));
       if (values.size() != 3) {
-        throw new ParserException();
+        throw ParserException.createForMalformedContainer(/* message= */ null, /* cause= */ null);
       }
       try {
         long startTimeMs = Long.parseLong(values.get(0));

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -32,7 +32,6 @@
 import androidx.annotation.Nullable;
 import androidx.appcompat.app.AppCompatActivity;
 import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.MediaItem;
 import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.Player;
@@ -424,7 +423,7 @@ public void onPlaybackStateChanged(@Player.State int playbackState) {
     }
 
     @Override
-    public void onPlayerError(@NonNull ExoPlaybackException e) {
+    public void onPlayerError(@NonNull PlaybackException e) {
       if (e.errorCode == PlaybackException.ERROR_CODE_BEHIND_LIVE_WINDOW) {
         player.seekToDefaultPosition();
         player.prepare();

File: extensions/flac/src/androidTest/java/com/google/android/exoplayer2/ext/flac/FlacPlaybackTest.java
Patch:
@@ -23,8 +23,8 @@
 import androidx.annotation.Nullable;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
-import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.MediaItem;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.Renderer;
 import com.google.android.exoplayer2.RenderersFactory;
@@ -96,7 +96,7 @@ private static class TestPlaybackRunnable implements Player.Listener, Runnable {
     private final AudioSink audioSink;
 
     @Nullable private SimpleExoPlayer player;
-    @Nullable private ExoPlaybackException playbackException;
+    @Nullable private PlaybackException playbackException;
 
     public TestPlaybackRunnable(Uri uri, Context context, AudioSink audioSink) {
       this.uri = uri;
@@ -129,7 +129,7 @@ public void run() {
     }
 
     @Override
-    public void onPlayerError(ExoPlaybackException error) {
+    public void onPlayerError(PlaybackException error) {
       playbackException = error;
     }
 

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdTagLoader.java
Patch:
@@ -51,8 +51,8 @@
 import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer;
 import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate;
 import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.ExoPlayerLibraryInfo;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.source.ads.AdPlaybackState;
@@ -514,7 +514,7 @@ public void onPlayWhenReadyChanged(
   }
 
   @Override
-  public void onPlayerError(ExoPlaybackException error) {
+  public void onPlayerError(PlaybackException error) {
     if (imaAdState != IMA_AD_STATE_NONE) {
       AdMediaInfo adMediaInfo = checkNotNull(imaAdMediaInfo);
       for (int i = 0; i < adCallbacks.size(); i++) {

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/PlayerWrapper.java
Patch:
@@ -27,8 +27,8 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ControlDispatcher;
 import com.google.android.exoplayer2.DefaultControlDispatcher;
-import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.MediaItem;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.PlaybackParameters;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.Timeline;
@@ -597,7 +597,7 @@ public void onPositionDiscontinuity(
     }
 
     @Override
-    public void onPlayerError(ExoPlaybackException error) {
+    public void onPlayerError(PlaybackException error) {
       updateSessionPlayerState();
     }
 

File: extensions/opus/src/androidTest/java/com/google/android/exoplayer2/ext/opus/OpusPlaybackTest.java
Patch:
@@ -23,8 +23,8 @@
 import androidx.annotation.Nullable;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
-import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.MediaItem;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.Renderer;
 import com.google.android.exoplayer2.RenderersFactory;
@@ -79,7 +79,7 @@ private static class TestPlaybackRunnable implements Player.Listener, Runnable {
     private final Uri uri;
 
     @Nullable private SimpleExoPlayer player;
-    @Nullable private ExoPlaybackException playbackException;
+    @Nullable private PlaybackException playbackException;
 
     public TestPlaybackRunnable(Uri uri, Context context) {
       this.uri = uri;
@@ -109,7 +109,7 @@ public void run() {
     }
 
     @Override
-    public void onPlayerError(ExoPlaybackException error) {
+    public void onPlayerError(PlaybackException error) {
       playbackException = error;
     }
 

File: extensions/vp9/src/androidTest/java/com/google/android/exoplayer2/ext/vp9/VpxPlaybackTest.java
Patch:
@@ -24,8 +24,8 @@
 import androidx.annotation.Nullable;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
-import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.MediaItem;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.Renderer;
 import com.google.android.exoplayer2.RenderersFactory;
@@ -107,7 +107,7 @@ private static class TestPlaybackRunnable implements Player.Listener, Runnable {
     private final Uri uri;
 
     @Nullable private SimpleExoPlayer player;
-    @Nullable private ExoPlaybackException playbackException;
+    @Nullable private PlaybackException playbackException;
 
     public TestPlaybackRunnable(Uri uri, Context context) {
       this.uri = uri;
@@ -144,7 +144,7 @@ public void run() {
     }
 
     @Override
-    public void onPlayerError(ExoPlaybackException error) {
+    public void onPlayerError(PlaybackException error) {
       playbackException = error;
     }
 

File: library/common/src/main/java/com/google/android/exoplayer2/ForwardingPlayer.java
Patch:
@@ -681,7 +681,7 @@ public void onShuffleModeEnabledChanged(boolean shuffleModeEnabled) {
     }
 
     @Override
-    public void onPlayerError(ExoPlaybackException error) {
+    public void onPlayerError(PlaybackException error) {
       eventListener.onPlayerError(error);
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/PlayerMessage.java
Patch:
@@ -245,8 +245,7 @@ public boolean getDeleteAfterDelivery() {
 
   /**
    * Sends the message. If the target throws an {@link ExoPlaybackException} then it is propagated
-   * out of the player as an error using {@link
-   * Player.Listener#onPlayerError(ExoPlaybackException)}.
+   * out of the player as an error using {@link Player.Listener#onPlayerError(PlaybackException)}.
    *
    * @return This message.
    * @throws IllegalStateException If this message has already been sent.

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsListener.java
Patch:
@@ -650,6 +650,9 @@ default void onAvailableCommandsChanged(EventTime eventTime, Player.Commands ava
   /**
    * Called when a fatal player error occurred.
    *
+   * <p>Implementations of {@link Player} may pass an instance of a subclass of {@link
+   * PlaybackException} to this method in order to include more information about the error.
+   *
    * @param eventTime The event time.
    * @param error The error.
    */

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioSink.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.Format;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.PlaybackParameters;
 import com.google.android.exoplayer2.Player;
 import java.lang.annotation.Documented;
@@ -122,7 +123,7 @@ default void onOffloadBufferFull(long bufferEmptyingDeadlineMs) {}
      * wishes to do so.
      *
      * <p>Fatal errors that cannot be recovered will be reported wrapped in a {@link
-     * ExoPlaybackException} by {@link Player.Listener#onPlayerError(ExoPlaybackException)}.
+     * ExoPlaybackException} by {@link Player.Listener#onPlayerError(PlaybackException)}.
      *
      * @param audioSinkError The error that occurred. Typically an {@link InitializationException},
      *     a {@link WriteException}, or an {@link UnexpectedDiscontinuityException}.

File: library/rtsp/src/test/java/com/google/android/exoplayer2/source/rtsp/RtspPlaybackTest.java
Patch:
@@ -20,8 +20,8 @@
 import android.net.Uri;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
-import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.MediaItem;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.Player.Listener;
 import com.google.android.exoplayer2.SimpleExoPlayer;
 import com.google.android.exoplayer2.robolectric.RobolectricUtil;
@@ -95,7 +95,7 @@ public void prepare_noSupportedTrack_throwsPreparationError() throws Exception {
       player.addListener(
           new Listener() {
             @Override
-            public void onPlayerError(ExoPlaybackException error) {
+            public void onPlayerError(PlaybackException error) {
               playbackError.set(error);
             }
           });

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoPlayerTestRunner.java
Patch:
@@ -29,6 +29,7 @@
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.LoadControl;
 import com.google.android.exoplayer2.MediaItem;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.Renderer;
 import com.google.android.exoplayer2.RenderersFactory;
@@ -692,7 +693,7 @@ public void onPlaybackStateChanged(@Player.State int playbackState) {
   }
 
   @Override
-  public void onPlayerError(ExoPlaybackException error) {
+  public void onPlayerError(PlaybackException error) {
     handleException(error);
   }
 

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMediaSource.java
Patch:
@@ -228,7 +228,7 @@ public MediaPeriod createPeriod(MediaPeriodId id, Allocator allocator, long star
         allocator,
         rtpDataChannelFactory,
         uri,
-        (timing) -> {
+        /* listener= */ timing -> {
           timelineDurationUs = C.msToUs(timing.getDurationMs());
           timelineIsSeekable = !timing.isLive();
           timelineIsLive = timing.isLive();

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
Patch:
@@ -1506,7 +1506,8 @@ private static Format deriveFormat(
             .setPeakBitrate(propagateBitrates ? playlistFormat.peakBitrate : Format.NO_VALUE)
             .setCodecs(codecs)
             .setWidth(playlistFormat.width)
-            .setHeight(playlistFormat.height);
+            .setHeight(playlistFormat.height)
+            .setFrameRate(playlistFormat.frameRate);
 
     if (sampleMimeType != null) {
       formatBuilder.setSampleMimeType(sampleMimeType);

File: library/common/src/main/java/com/google/android/exoplayer2/ForwardingPlayer.java
Patch:
@@ -662,7 +662,7 @@ public void onPlayWhenReadyChanged(
     @Override
     public void onPlaybackSuppressionReasonChanged(
         @PlayWhenReadyChangeReason int playbackSuppressionReason) {
-      eventListener.onPlaybackStateChanged(playbackSuppressionReason);
+      eventListener.onPlaybackSuppressionReasonChanged(playbackSuppressionReason);
     }
 
     @Override

File: library/common/src/main/java/com/google/android/exoplayer2/ForwardingPlayer.java
Patch:
@@ -178,7 +178,7 @@ public boolean isPlaying() {
 
   @Nullable
   @Override
-  public ExoPlaybackException getPlayerError() {
+  public PlaybackException getPlayerError() {
     return player.getPlayerError();
   }
 

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -1472,7 +1472,7 @@ default void onMetadata(Metadata metadata) {}
    * @see Listener#onPlayerError(ExoPlaybackException)
    */
   @Nullable
-  ExoPlaybackException getPlayerError();
+  PlaybackException getPlayerError();
 
   /**
    * Resumes playback as soon as {@link #getPlaybackState()} == {@link #STATE_READY}. Equivalent to

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/PlaybackStatsListener.java
Patch:
@@ -22,8 +22,8 @@
 import android.util.Pair;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.Format;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.Timeline.Period;
@@ -489,7 +489,7 @@ public void onEvents(
         int droppedFrameCount,
         boolean hasAudioUnderun,
         boolean startedLoading,
-        @Nullable ExoPlaybackException fatalError,
+        @Nullable PlaybackException fatalError,
         @Nullable Exception nonFatalException,
         long bandwidthTimeMs,
         long bandwidthBytes,

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoHostedTest.java
Patch:
@@ -195,7 +195,9 @@ public void onEvents(Player player, Events events) {
       }
     }
     if (events.contains(EVENT_PLAYER_ERROR)) {
-      playerError = checkNotNull(player.getPlayerError());
+      // The exception is guaranteed to be an ExoPlaybackException because the underlying player is
+      // an ExoPlayer instance.
+      playerError = (ExoPlaybackException) checkNotNull(player.getPlayerError());
       onPlayerErrorInternal(playerError);
     }
     if (events.contains(EVENT_PLAYBACK_STATE_CHANGED)) {

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -62,7 +62,7 @@
  * An extensible media player that plays {@link MediaSource}s. Instances can be obtained from {@link
  * SimpleExoPlayer.Builder}.
  *
- * <h3>Player components</h3>
+ * <h2>Player components</h2>
  *
  * <p>ExoPlayer is designed to make few assumptions about (and hence impose few restrictions on) the
  * type of the media being played, how and where it is stored, and how it is rendered. Rather than
@@ -106,7 +106,7 @@
  * {@link DataSource} factories to be injected via their constructors. By providing a custom factory
  * it's possible to load data from a non-standard source, or through a different network stack.
  *
- * <h3>Threading model</h3>
+ * <h2>Threading model</h2>
  *
  * <p>The figure below shows ExoPlayer's threading model.
  *

File: library/core/src/main/java/com/google/android/exoplayer2/drm/ExoMediaDrm.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * Used to obtain keys for decrypting protected media streams.
  *
- * <h3>Reference counting</h3>
+ * <h2>Reference counting</h2>
  *
  * <p>Access to an instance is managed by reference counting, where {@link #acquire()} increments
  * the reference count and {@link #release()} decrements it. When the reference count drops to 0

File: library/core/src/main/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactory.java
Patch:
@@ -72,7 +72,7 @@
  *       is thrown if none of the available extractors can read the stream.
  * </ul>
  *
- * <h3>Ad support for media items with ad tag URIs</h3>
+ * <h2>Ad support for media items with ad tag URIs</h2>
  *
  * <p>To support media items with {@link MediaItem.PlaybackProperties#adsConfiguration ads
  * configuration}, {@link #setAdsLoaderProvider} and {@link #setAdViewProvider} need to be called to

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelector.java
Patch:
@@ -32,7 +32,7 @@
  * the player's {@link Renderer}s. The {@link DefaultTrackSelector} implementation should be
  * suitable for most use cases.
  *
- * <h3>Interactions with the player</h3>
+ * <h2>Interactions with the player</h2>
  *
  * The following interactions occur between the player and its track selector during playback.
  *
@@ -65,7 +65,7 @@
  *       will call {@link InvalidationListener#onTrackSelectionsInvalidated()}.
  * </ul>
  *
- * <h3>Renderer configuration</h3>
+ * <h2>Renderer configuration</h2>
  *
  * The {@link TrackSelectorResult} returned by {@link #selectTracks(RendererCapabilities[],
  * TrackGroupArray, MediaPeriodId, Timeline)} contains not only {@link TrackSelection}s for each
@@ -77,7 +77,7 @@
  * configure renderers in a particular way if certain tracks are selected. Hence it makes sense to
  * determine the track selection and corresponding renderer configurations in a single step.
  *
- * <h3>Threading model</h3>
+ * <h2>Threading model</h2>
  *
  * All calls made by the player into the track selector are on the player's internal playback
  * thread. The track selector may call {@link InvalidationListener#onTrackSelectionsInvalidated()}

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/Cache.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * A cache that supports partial caching of resources.
  *
- * <h3>Terminology</h3>
+ * <h2>Terminology</h2>
  *
  * <ul>
  *   <li>A <em>resource</em> is a complete piece of logical data, for example a complete media file.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ExtractorInput.java
Patch:
@@ -34,15 +34,15 @@
  *       wants to read an entire block/frame/header of known length.
  * </ul>
  *
- * <h3>{@link InputStream}-like methods</h3>
+ * <h2>{@link InputStream}-like methods</h2>
  *
  * <p>The {@code read()/peek()} and {@code skip()} methods provide {@link InputStream}-like
  * byte-level access operations. The {@code length} parameter is a maximum, and each method returns
  * the number of bytes actually processed. This may be less than {@code length} because the end of
  * the input was reached, or the method was interrupted, or the operation was aborted early for
  * another reason.
  *
- * <h3>Block-based methods</h3>
+ * <h2>Block-based methods</h2>
  *
  * <p>The {@code read/skip/peekFully()} and {@code advancePeekPosition()} methods assume the user
  * wants to read an entire block/frame/header of known length.

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/DefaultTimeBar.java
Patch:
@@ -51,7 +51,7 @@
  *
  * <p>A DefaultTimeBar can be customized by setting attributes, as outlined below.
  *
- * <h3>Attributes</h3>
+ * <h2>Attributes</h2>
  *
  * The following attributes can be set on a DefaultTimeBar when used in a layout XML file:
  *

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerNotificationManager.java
Patch:
@@ -75,7 +75,7 @@
  * <p>If the player is released it must be removed from the manager by calling {@code
  * setPlayer(null)}.
  *
- * <h3>Action customization</h3>
+ * <h2>Action customization</h2>
  *
  * Playback actions can be included or omitted as follows:
  *
@@ -140,7 +140,7 @@
  *       </ul>
  * </ul>
  *
- * <h3>Overriding drawables</h3>
+ * <h2>Overriding drawables</h2>
  *
  * The drawables used by PlayerNotificationManager can be overridden by drawables with the same
  * names defined in your application. The drawables that can be overridden are:

File: library/rtsp/src/test/java/com/google/android/exoplayer2/source/rtsp/RtpPacketStreamDump.java
Patch:
@@ -83,7 +83,7 @@ public static RtpPacketStreamDump parse(String jsonString) throws ParserExceptio
           mediaDescription,
           packetsBuilder.build());
     } catch (JSONException e) {
-      throw ParserException.createForMalformedManifest(/* message= */ null, e);
+      throw new ParserException(e);
     }
   }
 

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMediaSource.java
Patch:
@@ -21,6 +21,7 @@
 import android.net.Uri;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.ExoPlayerLibraryInfo;
 import com.google.android.exoplayer2.MediaItem;
 import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.drm.DrmSessionManager;

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/SessionDescriptionParser.java
Patch:
@@ -186,7 +186,7 @@ public static SessionDescription parse(String sdpString) throws ParserException
 
     try {
       return sessionDescriptionBuilder.build();
-    } catch (IllegalStateException e) {
+    } catch (IllegalArgumentException | IllegalStateException e) {
       throw new ParserException(e);
     }
   }
@@ -197,7 +197,7 @@ private static void addMediaDescriptionToSession(
       throws ParserException {
     try {
       sessionDescriptionBuilder.addMediaDescription(mediaDescriptionBuilder.build());
-    } catch (IllegalStateException e) {
+    } catch (IllegalArgumentException | IllegalStateException e) {
       throw new ParserException(e);
     }
   }

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/SessionDescriptionParser.java
Patch:
@@ -41,8 +41,6 @@
   private static final Pattern MEDIA_DESCRIPTION_PATTERN =
       Pattern.compile("(\\S+)\\s(\\S+)\\s(\\S+)\\s(\\S+)");
 
-  private static final String CRLF = "\r\n";
-
   private static final String VERSION_TYPE = "v";
   private static final String ORIGIN_TYPE = "o";
   private static final String SESSION_TYPE = "s";
@@ -71,7 +69,7 @@ public static SessionDescription parse(String sdpString) throws ParserException
     @Nullable MediaDescription.Builder mediaDescriptionBuilder = null;
 
     // Lines are separated by an CRLF.
-    for (String line : Util.split(sdpString, CRLF)) {
+    for (String line : RtspMessageUtil.splitRtspMessageBody(sdpString)) {
       if ("".equals(line)) {
         continue;
       }

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/SessionDescriptionParser.java
Patch:
@@ -189,7 +189,7 @@ public static SessionDescription parse(String sdpString) throws ParserException
 
     try {
       return sessionDescriptionBuilder.build();
-    } catch (IllegalStateException e) {
+    } catch (IllegalArgumentException | IllegalStateException e) {
       throw ParserException.createForMalformedManifest(/* message= */ null, e);
     }
   }
@@ -200,7 +200,7 @@ private static void addMediaDescriptionToSession(
       throws ParserException {
     try {
       sessionDescriptionBuilder.addMediaDescription(mediaDescriptionBuilder.build());
-    } catch (IllegalStateException e) {
+    } catch (IllegalArgumentException | IllegalStateException e) {
       throw ParserException.createForMalformedManifest(/* message= */ null, e);
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
Patch:
@@ -33,7 +33,7 @@ public final class FileDataSource extends BaseDataSource {
   /** Thrown when a {@link FileDataSource} encounters an error reading a file. */
   public static class FileDataSourceException extends IOException {
 
-    public FileDataSourceException(IOException cause) {
+    public FileDataSourceException(Exception cause) {
       super(cause);
     }
 
@@ -94,7 +94,7 @@ public long open(DataSpec dataSpec) throws FileDataSourceException {
       }
     } catch (FileDataSourceException e) {
       throw e;
-    } catch (IOException e) {
+    } catch (Exception e) {
       throw new FileDataSourceException(e);
     }
 

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/SessionDescriptionParser.java
Patch:
@@ -41,8 +41,6 @@
   private static final Pattern MEDIA_DESCRIPTION_PATTERN =
       Pattern.compile("(\\S+)\\s(\\S+)\\s(\\S+)\\s(\\S+)");
 
-  private static final String CRLF = "\r\n";
-
   private static final String VERSION_TYPE = "v";
   private static final String ORIGIN_TYPE = "o";
   private static final String SESSION_TYPE = "s";
@@ -71,7 +69,7 @@ public static SessionDescription parse(String sdpString) throws ParserException
     @Nullable MediaDescription.Builder mediaDescriptionBuilder = null;
 
     // Lines are separated by an CRLF.
-    for (String line : Util.split(sdpString, CRLF)) {
+    for (String line : RtspMessageUtil.splitRtspMessageBody(sdpString)) {
       if ("".equals(line)) {
         continue;
       }

File: library/common/src/main/java/com/google/android/exoplayer2/MediaItem.java
Patch:
@@ -284,8 +284,7 @@ public Builder setDrmLicenseRequestHeaders(
     }
 
     /**
-     * Sets the {@link UUID} of the protection scheme. If a DRM system UUID is set, the {@link
-     * DrmConfiguration#licenseUri} needs to be set as well.
+     * Sets the {@link UUID} of the protection scheme.
      *
      * <p>If {@link #setUri} is passed a non-null {@code uri}, the DRM system UUID is used to create
      * a {@link PlaybackProperties} object. Otherwise it will be ignored.

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -570,6 +570,7 @@ public void setPlayer(@Nullable Player player) {
     }
     @Nullable Player oldPlayer = this.player;
     if (oldPlayer != null) {
+      oldPlayer.removeListener(componentListener);
       if (surfaceView instanceof TextureView) {
         oldPlayer.clearVideoTextureView((TextureView) surfaceView);
       } else if (surfaceView instanceof SurfaceView) {

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
Patch:
@@ -487,6 +487,7 @@ public DrmSessionReference preacquireSession(
       Looper playbackLooper,
       @Nullable DrmSessionEventListener.EventDispatcher eventDispatcher,
       Format format) {
+    checkState(prepareCallsCount > 0);
     initPlaybackLooper(playbackLooper);
     PreacquiredSessionReference preacquiredSessionReference =
         new PreacquiredSessionReference(eventDispatcher);
@@ -500,6 +501,7 @@ public DrmSession acquireSession(
       Looper playbackLooper,
       @Nullable DrmSessionEventListener.EventDispatcher eventDispatcher,
       Format format) {
+    checkState(prepareCallsCount > 0);
     initPlaybackLooper(playbackLooper);
     return acquireSession(
         playbackLooper,

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
Patch:
@@ -709,6 +709,7 @@ public boolean continueLoading(long positionUs) {
               ? lastMediaChunk.endTimeUs
               : max(lastSeekPositionUs, lastMediaChunk.startTimeUs);
     }
+    nextChunkHolder.clear();
     chunkSource.getNextChunk(
         positionUs,
         loadPositionUs,
@@ -718,7 +719,6 @@ public boolean continueLoading(long positionUs) {
     boolean endOfStream = nextChunkHolder.endOfStream;
     @Nullable Chunk loadable = nextChunkHolder.chunk;
     @Nullable Uri playlistUrlToLoad = nextChunkHolder.playlistUrl;
-    nextChunkHolder.clear();
 
     if (endOfStream) {
       pendingResetPositionUs = C.TIME_UNSET;

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageUtil.java
Patch:
@@ -37,7 +37,6 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ParserException;
 import com.google.android.exoplayer2.util.Util;
-import com.google.common.base.Charsets;
 import com.google.common.base.Joiner;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
@@ -139,7 +138,7 @@ public static ImmutableList<String> serializeResponse(RtspResponse response) {
    *     removed.
    */
   public static byte[] convertMessageToByteArray(List<String> message) {
-    return Joiner.on("\r\n").join(message).getBytes(Charsets.UTF_8);
+    return Joiner.on("\r\n").join(message).getBytes(RtspMessageChannel.CHARSET);
   }
 
   /** Removes the user info from the supplied {@link Uri}. */

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheFileMetadataIndex.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.google.android.exoplayer2.upstream.cache;
 
+import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.database.SQLException;
@@ -146,7 +148,7 @@ public Map<String, CacheFileMetadata> getAll() throws DatabaseIOException {
     try (Cursor cursor = getCursor()) {
       Map<String, CacheFileMetadata> fileMetadata = new HashMap<>(cursor.getCount());
       while (cursor.moveToNext()) {
-        String name = cursor.getString(COLUMN_INDEX_NAME);
+        String name = checkNotNull(cursor.getString(COLUMN_INDEX_NAME));
         long length = cursor.getLong(COLUMN_INDEX_LENGTH);
         long lastTouchTimestamp = cursor.getLong(COLUMN_INDEX_LAST_TOUCH_TIMESTAMP);
         fileMetadata.put(name, new CacheFileMetadata(length, lastTouchTimestamp));

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CachedContentIndex.java
Patch:
@@ -832,7 +832,7 @@ public void load(
         try (Cursor cursor = getCursor()) {
           while (cursor.moveToNext()) {
             int id = cursor.getInt(COLUMN_INDEX_ID);
-            String key = cursor.getString(COLUMN_INDEX_KEY);
+            String key = checkNotNull(cursor.getString(COLUMN_INDEX_KEY));
             byte[] metadataBytes = cursor.getBlob(COLUMN_INDEX_METADATA);
 
             ByteArrayInputStream inputStream = new ByteArrayInputStream(metadataBytes);

File: robolectricutils/src/main/java/com/google/android/exoplayer2/robolectric/TestPlayerRunHelper.java
Patch:
@@ -193,7 +193,7 @@ public void onPositionDiscontinuity(
    * @throws TimeoutException If the {@link RobolectricUtil#DEFAULT_TIMEOUT_MS default timeout} is
    *     exceeded.
    */
-  public static ExoPlaybackException runUntilError(Player player) throws TimeoutException {
+  public static ExoPlaybackException runUntilError(ExoPlayer player) throws TimeoutException {
     verifyMainTestThread(player);
     AtomicReference<ExoPlaybackException> receivedError = new AtomicReference<>();
     Player.Listener listener =

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsListener.java
Patch:
@@ -26,10 +26,10 @@
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.MediaItem;
 import com.google.android.exoplayer2.MediaMetadata;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.PlaybackParameters;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.Player.DiscontinuityReason;
@@ -617,7 +617,7 @@ default void onLoadingChanged(EventTime eventTime, boolean isLoading) {}
    * @param eventTime The event time.
    * @param error The error.
    */
-  default void onPlayerError(EventTime eventTime, ExoPlaybackException error) {}
+  default void onPlayerError(EventTime eventTime, PlaybackException error) {}
 
   /**
    * Called when the available or selected tracks for the renderers changed.

File: library/core/src/main/java/com/google/android/exoplayer2/util/EventLogger.java
Patch:
@@ -21,7 +21,6 @@
 import android.text.TextUtils;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.MediaItem;
 import com.google.android.exoplayer2.PlaybackException;
@@ -245,7 +244,7 @@ public void onMediaItemTransition(
   }
 
   @Override
-  public void onPlayerError(EventTime eventTime, ExoPlaybackException e) {
+  public void onPlayerError(EventTime eventTime, PlaybackException e) {
     loge(eventTime, "playerFailed", e);
   }
 

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -7161,8 +7161,7 @@ public void run(SimpleExoPlayer player) {
                     player.addAnalyticsListener(
                         new AnalyticsListener() {
                           @Override
-                          public void onPlayerError(
-                              EventTime eventTime, ExoPlaybackException error) {
+                          public void onPlayerError(EventTime eventTime, PlaybackException error) {
                             timelineAfterError.set(player.getCurrentTimeline());
                             trackGroupsAfterError.set(player.getCurrentTrackGroups());
                             trackSelectionsAfterError.set(player.getCurrentTrackSelections());

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/AnalyticsCollectorTest.java
Patch:
@@ -71,6 +71,7 @@
 import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.MediaItem;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.PlaybackParameters;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.Renderer;
@@ -1942,7 +1943,7 @@ public void recursiveListenerInvocation_arrivesInCorrectOrder() {
         spy(
             new AnalyticsListener() {
               @Override
-              public void onPlayerError(EventTime eventTime, ExoPlaybackException error) {
+              public void onPlayerError(EventTime eventTime, PlaybackException error) {
                 analyticsCollector.onSurfaceSizeChanged(/* width= */ 0, /* height= */ 0);
               }
             });
@@ -2141,7 +2142,7 @@ public void onIsLoadingChanged(EventTime eventTime, boolean isLoading) {
     }
 
     @Override
-    public void onPlayerError(EventTime eventTime, ExoPlaybackException error) {
+    public void onPlayerError(EventTime eventTime, PlaybackException error) {
       reportedEvents.add(new ReportedEvent(EVENT_PLAYER_ERROR, eventTime));
     }
 

File: library/transformer/src/main/java/com/google/android/exoplayer2/transformer/Transformer.java
Patch:
@@ -37,8 +37,8 @@
 import androidx.annotation.VisibleForTesting;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.DefaultLoadControl;
-import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.MediaItem;
+import com.google.android.exoplayer2.PlaybackException;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.Renderer;
 import com.google.android.exoplayer2.RenderersFactory;
@@ -639,7 +639,7 @@ public void onTracksChanged(
     }
 
     @Override
-    public void onPlayerError(EventTime eventTime, ExoPlaybackException error) {
+    public void onPlayerError(EventTime eventTime, PlaybackException error) {
       handleTransformationEnded(error);
     }
 

File: library/common/src/main/java/com/google/android/exoplayer2/MediaItem.java
Patch:
@@ -284,8 +284,7 @@ public Builder setDrmLicenseRequestHeaders(
     }
 
     /**
-     * Sets the {@link UUID} of the protection scheme. If a DRM system UUID is set, the {@link
-     * DrmConfiguration#licenseUri} needs to be set as well.
+     * Sets the {@link UUID} of the protection scheme.
      *
      * <p>If {@link #setUri} is passed a non-null {@code uri}, the DRM system UUID is used to create
      * a {@link PlaybackProperties} object. Otherwise it will be ignored.

File: library/common/src/main/java/com/google/android/exoplayer2/ExoPlaybackException.java
Patch:
@@ -432,5 +432,4 @@ public Bundle toBundle() {
     bundle.putBoolean(keyForField(FIELD_IS_RECOVERABLE), isRecoverable);
     return bundle;
   }
-
 }

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtpDataLoadable.java
Patch:
@@ -57,7 +57,6 @@ public interface EventListener {
     void onTransportReady(String transport, RtpDataChannel rtpDataChannel);
   }
 
-
   /** The track ID associated with the Loadable. */
   public final int trackId;
   /** The {@link RtspMediaTrack} to load. */

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -579,6 +579,7 @@ public void setPlayer(@Nullable Player player) {
     }
     @Nullable Player oldPlayer = this.player;
     if (oldPlayer != null) {
+      oldPlayer.removeListener(componentListener);
       if (surfaceView instanceof TextureView) {
         oldPlayer.clearVideoTextureView((TextureView) surfaceView);
       } else if (surfaceView instanceof SurfaceView) {

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
Patch:
@@ -487,6 +487,7 @@ public DrmSessionReference preacquireSession(
       Looper playbackLooper,
       @Nullable DrmSessionEventListener.EventDispatcher eventDispatcher,
       Format format) {
+    checkState(prepareCallsCount > 0);
     initPlaybackLooper(playbackLooper);
     PreacquiredSessionReference preacquiredSessionReference =
         new PreacquiredSessionReference(eventDispatcher);
@@ -500,6 +501,7 @@ public DrmSession acquireSession(
       Looper playbackLooper,
       @Nullable DrmSessionEventListener.EventDispatcher eventDispatcher,
       Format format) {
+    checkState(prepareCallsCount > 0);
     initPlaybackLooper(playbackLooper);
     return acquireSession(
         playbackLooper,

File: library/common/src/main/java/com/google/android/exoplayer2/MediaMetadata.java
Patch:
@@ -245,6 +245,7 @@ public MediaMetadata build() {
   @Documented
   @Retention(RetentionPolicy.SOURCE)
   @IntDef({
+    FOLDER_TYPE_NONE,
     FOLDER_TYPE_MIXED,
     FOLDER_TYPE_TITLES,
     FOLDER_TYPE_ALBUMS,
@@ -255,6 +256,8 @@ public MediaMetadata build() {
   })
   public @interface FolderType {}
 
+  /** Type for an item that is not a folder. */
+  public static final int FOLDER_TYPE_NONE = -1;
   /** Type for a folder containing media of mixed types. */
   public static final int FOLDER_TYPE_MIXED = 0;
   /** Type for a folder containing only playable media. */

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -46,6 +46,7 @@
 import com.google.android.exoplayer2.trackselection.TrackSelector;
 import com.google.android.exoplayer2.trackselection.TrackSelectorResult;
 import com.google.android.exoplayer2.upstream.BandwidthMeter;
+import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Clock;
 import com.google.android.exoplayer2.util.HandlerWrapper;
@@ -571,6 +572,8 @@ public boolean handleMessage(Message msg) {
         stopInternal(/* forceResetRenderers= */ true, /* acknowledgeStop= */ false);
         playbackInfo = playbackInfo.copyWithPlaybackError(e);
       }
+    } catch (HttpDataSource.InvalidResponseCodeException e) {
+      handleIoException(e, PlaybackException.ERROR_CODE_IO_BAD_HTTP_STATUS);
     } catch (BehindLiveWindowException e) {
       handleIoException(e, PlaybackException.ERROR_CODE_BEHIND_LIVE_WINDOW);
     } catch (IOException e) {

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
Patch:
@@ -713,6 +713,7 @@ public boolean continueLoading(long positionUs) {
               ? lastMediaChunk.endTimeUs
               : max(lastSeekPositionUs, lastMediaChunk.startTimeUs);
     }
+    nextChunkHolder.clear();
     chunkSource.getNextChunk(
         positionUs,
         loadPositionUs,
@@ -722,7 +723,6 @@ public boolean continueLoading(long positionUs) {
     boolean endOfStream = nextChunkHolder.endOfStream;
     @Nullable Chunk loadable = nextChunkHolder.chunk;
     @Nullable Uri playlistUrlToLoad = nextChunkHolder.playlistUrl;
-    nextChunkHolder.clear();
 
     if (endOfStream) {
       pendingResetPositionUs = C.TIME_UNSET;

File: library/core/src/main/java/com/google/android/exoplayer2/BaseRenderer.java
Patch:
@@ -113,7 +113,9 @@ public final void replaceStream(
       throws ExoPlaybackException {
     Assertions.checkState(!streamIsFinal);
     this.stream = stream;
-    readingPositionUs = offsetUs;
+    if (readingPositionUs == C.TIME_END_OF_SOURCE) {
+      readingPositionUs = startPositionUs;
+    }
     streamFormats = formats;
     streamOffsetUs = offsetUs;
     onStreamChanged(formats, startPositionUs, offsetUs);

File: library/core/src/main/java/com/google/android/exoplayer2/Renderer.java
Patch:
@@ -339,9 +339,8 @@ void replaceStream(Format[] formats, SampleStream stream, long startPositionUs,
   boolean hasReadStreamToEnd();
 
   /**
-   * Returns the renderer time up to which the renderer has read samples from the current {@link
-   * SampleStream}, in microseconds, or {@link C#TIME_END_OF_SOURCE} if the renderer has read the
-   * current {@link SampleStream} to the end.
+   * Returns the renderer time up to which the renderer has read samples, in microseconds, or {@link
+   * C#TIME_END_OF_SOURCE} if the renderer has read the current {@link SampleStream} to the end.
    *
    * <p>This method may be called when the renderer is in the following states: {@link
    * #STATE_ENABLED}, {@link #STATE_STARTED}.

File: library/rtsp/src/main/java/com/google/android/exoplayer2/source/rtsp/RtspMessageUtil.java
Patch:
@@ -37,7 +37,6 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ParserException;
 import com.google.android.exoplayer2.util.Util;
-import com.google.common.base.Charsets;
 import com.google.common.base.Joiner;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
@@ -139,7 +138,7 @@ public static ImmutableList<String> serializeResponse(RtspResponse response) {
    *     removed.
    */
   public static byte[] convertMessageToByteArray(List<String> message) {
-    return Joiner.on("\r\n").join(message).getBytes(Charsets.UTF_8);
+    return Joiner.on("\r\n").join(message).getBytes(RtspMessageChannel.CHARSET);
   }
 
   /** Removes the user info from the supplied {@link Uri}. */

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaPeriod.java
Patch:
@@ -22,6 +22,7 @@
 import android.os.Handler;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.C.DataType;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.FormatHolder;
 import com.google.android.exoplayer2.ParserException;
@@ -127,7 +128,7 @@ interface Listener {
   private @MonotonicNonNull SeekMap seekMap;
   private long durationUs;
   private boolean isLive;
-  private int dataType;
+  @DataType private int dataType;
 
   private boolean seenFirstTrackSelection;
   private boolean notifyDiscontinuity;

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/DataChunk.java
Patch:
@@ -17,6 +17,7 @@
 
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.C.DataType;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DataSpec;
@@ -48,7 +49,7 @@ public abstract class DataChunk extends Chunk {
   public DataChunk(
       DataSource dataSource,
       DataSpec dataSpec,
-      int type,
+      @DataType int type,
       Format trackFormat,
       int trackSelectionReason,
       @Nullable Object trackSelectionData,

File: library/common/src/main/java/com/google/android/exoplayer2/PlaybackException.java
Patch:
@@ -112,11 +112,11 @@ public class PlaybackException extends Exception implements Bundleable {
   // Content parsing errors (3xxx).
 
   /**
-   * Caused by a parsing error associated to a media manifest. Examples of a media manifest are a
+   * Caused by a parsing error associated with a media manifest. Examples of a media manifest are a
    * DASH or a SmoothStreaming manifest, or an HLS playlist.
    */
   public static final int ERROR_CODE_PARSING_MANIFEST_MALFORMED = 3001;
-  /** Caused by a parsing error associated to a media container format bitstream. */
+  /** Caused by a parsing error associated with a media container format bitstream. */
   public static final int ERROR_CODE_PARSING_CONTAINER_MALFORMED = 3002;
   /**
    * Caused by attempting to extract a file with an unsupported media container format, or an

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaSourceEventListener.java
Patch:
@@ -94,9 +94,9 @@ default void onLoadCanceled(
    * <p>This method being called does not indicate that playback has failed, or that it will fail.
    * The player may be able to recover from the error. Hence applications should <em>not</em>
    * implement this method to display a user visible error or initiate an application level retry.
-   * {@link Player.EventListener#onPlayerError} is the appropriate place to implement such behavior.
-   * This method is called to provide the application with an opportunity to log the error if it
-   * wishes to do so.
+   * {@link Player.Listener#onPlayerError} is the appropriate place to implement such behavior. This
+   * method is called to provide the application with an opportunity to log the error if it wishes
+   * to do so.
    *
    * @param windowIndex The window index in the timeline of the media source this load belongs to.
    * @param mediaPeriodId The {@link MediaPeriodId} this load belongs to. Null if the load does not

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/SinglePeriodAdTimeline.java
Patch:
@@ -52,7 +52,8 @@ public Period getPeriod(int periodIndex, Period period, boolean setIds) {
         period.windowIndex,
         durationUs,
         period.getPositionInWindowUs(),
-        adPlaybackState);
+        adPlaybackState,
+        period.isPlaceholder);
     return period;
   }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTimeline.java
Patch:
@@ -416,8 +416,8 @@ public Period getPeriod(int periodIndex, Period period, boolean setIds) {
         windowIndex,
         periodDurationUs,
         positionInWindowUs,
-        windowDefinition.adPlaybackState);
-    period.isPlaceholder = windowDefinition.isPlaceholder;
+        windowDefinition.adPlaybackState,
+        windowDefinition.isPlaceholder);
     return period;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/SinglePeriodAdTimeline.java
Patch:
@@ -52,7 +52,8 @@ public Period getPeriod(int periodIndex, Period period, boolean setIds) {
         period.windowIndex,
         durationUs,
         period.getPositionInWindowUs(),
-        adPlaybackState);
+        adPlaybackState,
+        period.isPlaceholder);
     return period;
   }
 }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTimeline.java
Patch:
@@ -414,8 +414,8 @@ public Period getPeriod(int periodIndex, Period period, boolean setIds) {
         windowIndex,
         periodDurationUs,
         positionInWindowUs,
-        windowDefinition.adPlaybackState);
-    period.isPlaceholder = windowDefinition.isPlaceholder;
+        windowDefinition.adPlaybackState,
+        windowDefinition.isPlaceholder);
     return period;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaSourceEventListener.java
Patch:
@@ -94,9 +94,9 @@ default void onLoadCanceled(
    * <p>This method being called does not indicate that playback has failed, or that it will fail.
    * The player may be able to recover from the error. Hence applications should <em>not</em>
    * implement this method to display a user visible error or initiate an application level retry.
-   * {@link Player.EventListener#onPlayerError} is the appropriate place to implement such behavior.
-   * This method is called to provide the application with an opportunity to log the error if it
-   * wishes to do so.
+   * {@link Player.Listener#onPlayerError} is the appropriate place to implement such behavior. This
+   * method is called to provide the application with an opportunity to log the error if it wishes
+   * to do so.
    *
    * @param windowIndex The window index in the timeline of the media source this load belongs to.
    * @param mediaPeriodId The {@link MediaPeriodId} this load belongs to. Null if the load does not

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -77,7 +77,7 @@ public class PlayerActivity extends AppCompatActivity
   protected StyledPlayerView playerView;
   protected LinearLayout debugRootView;
   protected TextView debugTextView;
-  protected SimpleExoPlayer player;
+  protected @Nullable SimpleExoPlayer player;
 
   private boolean isShowingTrackSelectionDialog;
   private Button selectTracksButton;

File: library/core/src/test/java/com/google/android/exoplayer2/text/CueTest.java
Patch:
@@ -37,6 +37,7 @@ public void buildAndBuildUponWorkAsExpected() {
         new Cue.Builder()
             .setText(SpannedString.valueOf("text"))
             .setTextAlignment(Layout.Alignment.ALIGN_CENTER)
+            .setMultiRowAlignment(Layout.Alignment.ALIGN_NORMAL)
             .setLine(5, Cue.LINE_TYPE_NUMBER)
             .setLineAnchor(Cue.ANCHOR_TYPE_END)
             .setPosition(0.4f)
@@ -52,6 +53,7 @@ public void buildAndBuildUponWorkAsExpected() {
 
     assertThat(cue.text.toString()).isEqualTo("text");
     assertThat(cue.textAlignment).isEqualTo(Layout.Alignment.ALIGN_CENTER);
+    assertThat(cue.multiRowAlignment).isEqualTo(Layout.Alignment.ALIGN_NORMAL);
     assertThat(cue.line).isEqualTo(5);
     assertThat(cue.lineType).isEqualTo(Cue.LINE_TYPE_NUMBER);
     assertThat(cue.position).isEqualTo(0.4f);
@@ -66,6 +68,7 @@ public void buildAndBuildUponWorkAsExpected() {
 
     assertThat(modifiedCue.text).isSameInstanceAs(cue.text);
     assertThat(modifiedCue.textAlignment).isEqualTo(cue.textAlignment);
+    assertThat(modifiedCue.multiRowAlignment).isEqualTo(cue.multiRowAlignment);
     assertThat(modifiedCue.line).isEqualTo(cue.line);
     assertThat(modifiedCue.lineType).isEqualTo(cue.lineType);
     assertThat(modifiedCue.position).isEqualTo(cue.position);

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -77,7 +77,7 @@ public class PlayerActivity extends AppCompatActivity
   protected StyledPlayerView playerView;
   protected LinearLayout debugRootView;
   protected TextView debugTextView;
-  protected SimpleExoPlayer player;
+  protected @Nullable SimpleExoPlayer player;
 
   private boolean isShowingTrackSelectionDialog;
   private Button selectTracksButton;

File: library/core/src/test/java/com/google/android/exoplayer2/text/CueTest.java
Patch:
@@ -37,6 +37,7 @@ public void buildAndBuildUponWorkAsExpected() {
         new Cue.Builder()
             .setText(SpannedString.valueOf("text"))
             .setTextAlignment(Layout.Alignment.ALIGN_CENTER)
+            .setMultiRowAlignment(Layout.Alignment.ALIGN_NORMAL)
             .setLine(5, Cue.LINE_TYPE_NUMBER)
             .setLineAnchor(Cue.ANCHOR_TYPE_END)
             .setPosition(0.4f)
@@ -52,6 +53,7 @@ public void buildAndBuildUponWorkAsExpected() {
 
     assertThat(cue.text.toString()).isEqualTo("text");
     assertThat(cue.textAlignment).isEqualTo(Layout.Alignment.ALIGN_CENTER);
+    assertThat(cue.multiRowAlignment).isEqualTo(Layout.Alignment.ALIGN_NORMAL);
     assertThat(cue.line).isEqualTo(5);
     assertThat(cue.lineType).isEqualTo(Cue.LINE_TYPE_NUMBER);
     assertThat(cue.position).isEqualTo(0.4f);
@@ -66,6 +68,7 @@ public void buildAndBuildUponWorkAsExpected() {
 
     assertThat(modifiedCue.text).isSameInstanceAs(cue.text);
     assertThat(modifiedCue.textAlignment).isEqualTo(cue.textAlignment);
+    assertThat(modifiedCue.multiRowAlignment).isEqualTo(cue.multiRowAlignment);
     assertThat(modifiedCue.line).isEqualTo(cue.line);
     assertThat(modifiedCue.lineType).isEqualTo(cue.lineType);
     assertThat(modifiedCue.position).isEqualTo(cue.position);

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeVideoRenderer.java
Patch:
@@ -26,6 +26,7 @@
 import com.google.android.exoplayer2.decoder.DecoderCounters;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.video.VideoRendererEventListener;
+import com.google.android.exoplayer2.video.VideoSize;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /** A {@link FakeRenderer} that supports {@link C#TRACK_TYPE_VIDEO}. */
@@ -119,7 +120,8 @@ protected boolean shouldProcessBuffer(long bufferTimeUs, long playbackPositionUs
     if (shouldProcess && !renderedFirstFrameAfterReset && output != null) {
       @MonotonicNonNull Format format = Assertions.checkNotNull(this.format);
       eventDispatcher.videoSizeChanged(
-          format.width, format.height, format.rotationDegrees, format.pixelWidthHeightRatio);
+          new VideoSize(
+              format.width, format.height, format.rotationDegrees, format.pixelWidthHeightRatio));
       eventDispatcher.renderedFirstFrame(output);
       renderedFirstFrameAfterReset = true;
       renderedFirstFrameAfterEnable = true;

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeVideoRenderer.java
Patch:
@@ -26,6 +26,7 @@
 import com.google.android.exoplayer2.decoder.DecoderCounters;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.video.VideoRendererEventListener;
+import com.google.android.exoplayer2.video.VideoSize;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /** A {@link FakeRenderer} that supports {@link C#TRACK_TYPE_VIDEO}. */
@@ -119,7 +120,8 @@ protected boolean shouldProcessBuffer(long bufferTimeUs, long playbackPositionUs
     if (shouldProcess && !renderedFirstFrameAfterReset && output != null) {
       @MonotonicNonNull Format format = Assertions.checkNotNull(this.format);
       eventDispatcher.videoSizeChanged(
-          format.width, format.height, format.rotationDegrees, format.pixelWidthHeightRatio);
+          new VideoSize(
+              format.width, format.height, format.rotationDegrees, format.pixelWidthHeightRatio));
       eventDispatcher.renderedFirstFrame(output);
       renderedFirstFrameAfterReset = true;
       renderedFirstFrameAfterEnable = true;

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/AnalyticsCollectorTest.java
Patch:
@@ -1504,9 +1504,9 @@ public void drmEvents_periodWithDifferentDrmData_keysLoadedAgain() throws Except
     assertThat(listener.getEvents(EVENT_DRM_SESSION_ACQUIRED))
         .containsExactly(period0, period1)
         .inOrder();
-    assertThat(listener.getEvents(EVENT_DRM_KEYS_LOADED))
-        .containsExactly(period0, period1)
-        .inOrder();
+    // The pre-fetched key load for period1 might complete before the blocking key load for period0,
+    // so we can't assert the order:
+    assertThat(listener.getEvents(EVENT_DRM_KEYS_LOADED)).containsExactly(period0, period1);
     // The period1 release event is lost because it's posted to "ExoPlayerTest thread" after that
     // thread has been quit during clean-up.
     assertThat(listener.getEvents(EVENT_DRM_SESSION_RELEASED)).containsExactly(period0);

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/AnalyticsCollectorTest.java
Patch:
@@ -1504,9 +1504,9 @@ public void drmEvents_periodWithDifferentDrmData_keysLoadedAgain() throws Except
     assertThat(listener.getEvents(EVENT_DRM_SESSION_ACQUIRED))
         .containsExactly(period0, period1)
         .inOrder();
-    assertThat(listener.getEvents(EVENT_DRM_KEYS_LOADED))
-        .containsExactly(period0, period1)
-        .inOrder();
+    // The pre-fetched key load for period1 might complete before the blocking key load for period0,
+    // so we can't assert the order:
+    assertThat(listener.getEvents(EVENT_DRM_KEYS_LOADED)).containsExactly(period0, period1);
     // The period1 release event is lost because it's posted to "ExoPlayerTest thread" after that
     // thread has been quit during clean-up.
     assertThat(listener.getEvents(EVENT_DRM_SESSION_RELEASED)).containsExactly(period0);

File: extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/FlacExtractor.java
Patch:
@@ -73,7 +73,7 @@ public final class FlacExtractor implements Extractor {
    */
   public static final int FLAG_DISABLE_ID3_METADATA =
       com.google.android.exoplayer2.extractor.flac.FlacExtractor.FLAG_DISABLE_ID3_METADATA;
-  // LINT.ThenChange(../../../../../../../../../../../library/extractor/src/main/java/com/google/android/exoplayer2/extractor/flac/FlacExtractor.java)
+  // LINT.ThenChange(../../../../../../../../../../extractor/src/main/java/com/google/android/exoplayer2/extractor/flac/FlacExtractor.java)
 
   private final ParsableByteArray outputBuffer;
   private final boolean id3MetadataDisabled;

File: playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DebugRenderersFactory.java
Patch:
@@ -140,10 +140,11 @@ protected MediaCodecAdapter.Configuration getMediaCodecConfiguration(
     protected void resetCodecStateForFlush() {
       super.resetCodecStateForFlush();
       clearTimestamps();
+      // Check if there is a format change on the input side still pending propagation to the
+      // output.
+      inputFormatChanged = !inputFormatChangeTimesUs.isEmpty();
       inputFormatChangeTimesUs.clear();
-      inputFormatChanged = false;
       outputMediaFormatChanged = false;
-      currentMediaFormat = null;
     }
 
     @Override

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/PlayerEmsgHandler.java
Patch:
@@ -205,7 +205,8 @@ private void handleManifestExpiredMessage(long eventTimeUs, long manifestPublish
     }
   }
 
-  private @Nullable Map.Entry<Long, Long> ceilingExpiryEntryForPublishTime(long publishTimeMs) {
+  @Nullable
+  private Map.Entry<Long, Long> ceilingExpiryEntryForPublishTime(long publishTimeMs) {
     return manifestPublishTimeToExpiryTimeUs.ceilingEntry(publishTimeMs);
   }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
Patch:
@@ -1139,7 +1139,7 @@ private static long getAvailableStartTimeInManifestUs(
       if (index == null) {
         return periodStartTimeInManifestUs;
       }
-      int availableSegmentCount = index.getAvailableSegmentCount(periodDurationUs, nowUnixTimeUs);
+      long availableSegmentCount = index.getAvailableSegmentCount(periodDurationUs, nowUnixTimeUs);
       if (availableSegmentCount == 0) {
         return periodStartTimeInManifestUs;
       }
@@ -1171,7 +1171,7 @@ private static long getAvailableEndTimeInManifestUs(
       if (index == null) {
         return periodStartTimeInManifestUs + periodDurationUs;
       }
-      int availableSegmentCount = index.getAvailableSegmentCount(periodDurationUs, nowUnixTimeUs);
+      long availableSegmentCount = index.getAvailableSegmentCount(periodDurationUs, nowUnixTimeUs);
       if (availableSegmentCount == 0) {
         return periodStartTimeInManifestUs;
       }

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashSegmentIndex.java
Patch:
@@ -89,7 +89,7 @@ public interface DashSegmentIndex {
    *     C#TIME_UNSET} if the period's duration is not yet known.
    * @return The number of segments in the index, or {@link #INDEX_UNBOUNDED}.
    */
-  int getSegmentCount(long periodDurationUs);
+  long getSegmentCount(long periodDurationUs);
 
   /**
    * Returns the number of available segments in the index.
@@ -99,7 +99,7 @@ public interface DashSegmentIndex {
    * @param nowUnixTimeUs The current time in milliseconds since the Unix epoch.
    * @return The number of available segments in the index.
    */
-  int getAvailableSegmentCount(long periodDurationUs, long nowUnixTimeUs);
+  long getAvailableSegmentCount(long periodDurationUs, long nowUnixTimeUs);
 
   /**
    * Returns the time, in microseconds, at which a new segment becomes available, or {@link

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashWrappingSegmentIndex.java
Patch:
@@ -48,12 +48,12 @@ public long getFirstAvailableSegmentNum(long periodDurationUs, long nowUnixTimeU
   }
 
   @Override
-  public int getSegmentCount(long periodDurationUs) {
+  public long getSegmentCount(long periodDurationUs) {
     return chunkIndex.length;
   }
 
   @Override
-  public int getAvailableSegmentCount(long periodDurationUs, long nowUnixTimeUs) {
+  public long getAvailableSegmentCount(long periodDurationUs, long nowUnixTimeUs) {
     return chunkIndex.length;
   }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/Representation.java
Patch:
@@ -352,12 +352,12 @@ public long getFirstAvailableSegmentNum(long periodDurationUs, long nowUnixTimeU
     }
 
     @Override
-    public int getSegmentCount(long periodDurationUs) {
+    public long getSegmentCount(long periodDurationUs) {
       return segmentBase.getSegmentCount(periodDurationUs);
     }
 
     @Override
-    public int getAvailableSegmentCount(long periodDurationUs, long nowUnixTimeUs) {
+    public long getAvailableSegmentCount(long periodDurationUs, long nowUnixTimeUs) {
       return segmentBase.getAvailableSegmentCount(periodDurationUs, nowUnixTimeUs);
     }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/SingleSegmentIndex.java
Patch:
@@ -63,12 +63,12 @@ public long getFirstAvailableSegmentNum(long periodDurationUs, long nowUnixTimeU
   }
 
   @Override
-  public int getSegmentCount(long periodDurationUs) {
+  public long getSegmentCount(long periodDurationUs) {
     return 1;
   }
 
   @Override
-  public int getAvailableSegmentCount(long periodDurationUs, long nowUnixTimeUs) {
+  public long getAvailableSegmentCount(long periodDurationUs, long nowUnixTimeUs) {
     return 1;
   }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloader.java
Patch:
@@ -183,7 +183,7 @@ private void addSegmentsForAdaptationSet(
         continue;
       }
 
-      int segmentCount = index.getSegmentCount(periodDurationUs);
+      long segmentCount = index.getSegmentCount(periodDurationUs);
       if (segmentCount == DashSegmentIndex.INDEX_UNBOUNDED) {
         throw new DownloadException("Unbounded segment index");
       }

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/AdaptiveTrackSelection.java
Patch:
@@ -697,7 +697,7 @@ private static void addCheckpoint(
   }
 
   /** Checkpoint to determine allocated bandwidth. */
-  protected static final class AdaptationCheckpoint {
+  public static final class AdaptationCheckpoint {
 
     /** Total bandwidth in bits per second at which this checkpoint applies. */
     public final long totalBandwidth;

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -1821,7 +1821,10 @@ public void setDeviceMuted(boolean muted) {
    * <p>The default is {@code true} and this method will be removed in the future.
    *
    * @param throwsWhenUsingWrongThread Whether to throw when methods are called from a wrong thread.
+   * @deprecated Disabling the enforcement can result in hard-to-detect bugs. Do not use this method
+   *     except to ease the transition while wrong thread access problems are fixed.
    */
+  @Deprecated
   public void setThrowsWhenUsingWrongThread(boolean throwsWhenUsingWrongThread) {
     this.throwsWhenUsingWrongThread = throwsWhenUsingWrongThread;
   }

File: demos/gl/src/main/java/com/google/android/exoplayer2/gldemo/VideoProcessingGLSurfaceView.java
Patch:
@@ -25,8 +25,8 @@
 import android.view.Surface;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import com.google.android.exoplayer2.ExoPlayer;
 import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.GlUtil;
 import com.google.android.exoplayer2.util.TimedValueQueue;
@@ -72,7 +72,7 @@ public interface VideoProcessor {
 
   @Nullable private SurfaceTexture surfaceTexture;
   @Nullable private Surface surface;
-  @Nullable private Player.VideoComponent videoComponent;
+  @Nullable private ExoPlayer.VideoComponent videoComponent;
 
   /**
    * Creates a new instance. Pass {@code true} for {@code requireSecureContext} if the {@link
@@ -151,7 +151,7 @@ public void destroySurface(EGL10 egl, EGLDisplay display, EGLSurface surface) {
    *
    * @param newVideoComponent The new video component, or {@code null} to detach this view.
    */
-  public void setVideoComponent(@Nullable Player.VideoComponent newVideoComponent) {
+  public void setVideoComponent(@Nullable ExoPlayer.VideoComponent newVideoComponent) {
     if (newVideoComponent == videoComponent) {
       return;
     }

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -79,7 +79,7 @@
 public class SimpleExoPlayer extends BasePlayer
     implements ExoPlayer,
         ExoPlayer.AudioComponent,
-        Player.VideoComponent,
+        ExoPlayer.VideoComponent,
         ExoPlayer.TextComponent,
         ExoPlayer.MetadataComponent,
         ExoPlayer.DeviceComponent {

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -59,7 +59,6 @@
 import com.google.android.exoplayer2.metadata.id3.ApicFrame;
 import com.google.android.exoplayer2.source.TrackGroupArray;
 import com.google.android.exoplayer2.text.Cue;
-import com.google.android.exoplayer2.text.TextOutput;
 import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
 import com.google.android.exoplayer2.trackselection.TrackSelectionUtil;
 import com.google.android.exoplayer2.ui.AspectRatioFrameLayout.ResizeMode;
@@ -1507,8 +1506,7 @@ private boolean isDpadKey(int keyCode) {
   }
 
   private final class ComponentListener
-      implements Player.EventListener,
-          TextOutput,
+      implements Player.Listener,
           VideoListener,
           OnLayoutChangeListener,
           OnClickListener,

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/ProgramInformation.java
Patch:
@@ -53,7 +53,7 @@ public boolean equals(@Nullable Object obj) {
     if (this == obj) {
       return true;
     }
-    if (obj == null || getClass() != obj.getClass()) {
+    if (!(obj instanceof ProgramInformation)) {
       return false;
     }
     ProgramInformation other = (ProgramInformation) obj;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeter.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.android.exoplayer2.util.NetworkTypeObserver;
 import com.google.android.exoplayer2.util.SlidingPercentile;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableListMultimap;
 import com.google.common.collect.ImmutableMap;
@@ -170,7 +171,7 @@ public Builder setInitialBitrateEstimate(
      */
     public Builder setInitialBitrateEstimate(String countryCode) {
       initialBitrateEstimates =
-          getInitialBitrateEstimatesForCountry(Util.toUpperInvariant(countryCode));
+          getInitialBitrateEstimatesForCountry(Ascii.toUpperCase(countryCode));
       return this;
     }
 

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylistParserTest.java
Patch:
@@ -135,7 +135,7 @@ public void parseMediaPlaylist() throws Exception {
         .isEqualTo("https://priv.example.com/key.php?r=2682");
     // 0xA7A == 2682.
     assertThat(segment.encryptionIV).isNotNull();
-    assertThat(Util.toUpperInvariant(segment.encryptionIV)).isEqualTo("A7A");
+    assertThat(segment.encryptionIV).ignoringCase().isEqualTo("A7A");
     assertThat(segment.byteRangeLength).isEqualTo(51740);
     assertThat(segment.byteRangeOffset).isEqualTo(2147586650L);
     assertThat(segment.url).isEqualTo("https://priv.example.com/fileSequence2682.ts");
@@ -148,7 +148,7 @@ public void parseMediaPlaylist() throws Exception {
         .isEqualTo("https://priv.example.com/key.php?r=2682");
     // 0xA7B == 2683.
     assertThat(segment.encryptionIV).isNotNull();
-    assertThat(Util.toUpperInvariant(segment.encryptionIV)).isEqualTo("A7B");
+    assertThat(segment.encryptionIV).ignoringCase().isEqualTo("A7B");
     assertThat(segment.byteRangeLength).isEqualTo(C.LENGTH_UNSET);
     assertThat(segment.byteRangeOffset).isEqualTo(0);
     assertThat(segment.url).isEqualTo("https://priv.example.com/fileSequence2683.ts");

File: library/common/src/test/java/com/google/android/exoplayer2/ExoPlaybackExceptionTest.java
Patch:
@@ -28,14 +28,14 @@
 public class ExoPlaybackExceptionTest {
 
   @Test
-  public void roundtripViaBundle_ofExoPlaybackExceptionTypeRemote_yieldsEqualInstance() {
+  public void roundTripViaBundle_ofExoPlaybackExceptionTypeRemote_yieldsEqualInstance() {
     ExoPlaybackException before = ExoPlaybackException.createForRemote(/* message= */ "test");
     ExoPlaybackException after = ExoPlaybackException.CREATOR.fromBundle(before.toBundle());
     assertThat(areEqual(before, after)).isTrue();
   }
 
   @Test
-  public void roundtripViaBundle_ofExoPlaybackExceptionTypeRenderer_yieldsEqualInstance() {
+  public void roundTripViaBundle_ofExoPlaybackExceptionTypeRenderer_yieldsEqualInstance() {
     ExoPlaybackException before =
         ExoPlaybackException.createForRenderer(
             new IllegalStateException("ExoPlaybackExceptionTest"),
@@ -51,7 +51,7 @@ public void roundtripViaBundle_ofExoPlaybackExceptionTypeRenderer_yieldsEqualIns
 
   @Test
   public void
-      roundtripViaBundle_ofExoPlaybackExceptionTypeRendererWithPrivateCause_yieldsRemoteExceptionWithSameMessage() {
+      roundTripViaBundle_ofExoPlaybackExceptionTypeRendererWithPrivateCause_yieldsRemoteExceptionWithSameMessage() {
     ExoPlaybackException before =
         ExoPlaybackException.createForRenderer(
             new Exception(/* message= */ "anonymous exception that class loader cannot know") {});

File: library/common/src/test/java/com/google/android/exoplayer2/MediaItemTest.java
Patch:
@@ -395,7 +395,7 @@ public void buildUpon_equalsToOriginal() {
   }
 
   @Test
-  public void roundtripViaBundle_withoutPlaybackProperties_yieldsEqualInstance() {
+  public void roundTripViaBundle_withoutPlaybackProperties_yieldsEqualInstance() {
     MediaItem mediaItem =
         new MediaItem.Builder()
             .setMediaId("mediaId")
@@ -417,7 +417,7 @@ public void roundtripViaBundle_withoutPlaybackProperties_yieldsEqualInstance() {
   }
 
   @Test
-  public void roundtripViaBundle_withPlaybackProperties_dropsPlaybackProperties() {
+  public void roundTripViaBundle_withPlaybackProperties_dropsPlaybackProperties() {
     MediaItem mediaItem = new MediaItem.Builder().setUri(URI_STRING).build();
 
     assertThat(mediaItem.playbackProperties).isNotNull();

File: library/common/src/test/java/com/google/android/exoplayer2/MediaMetadataTest.java
Patch:
@@ -44,7 +44,7 @@ public void builderSetTitle_setsTitle() {
   }
 
   @Test
-  public void roundtripViaBundle_yieldsEqualInstance() {
+  public void roundTripViaBundle_yieldsEqualInstance() {
     MediaMetadata mediaMetadata = new MediaMetadata.Builder().setTitle("title").build();
 
     assertThat(MediaMetadata.CREATOR.fromBundle(mediaMetadata.toBundle())).isEqualTo(mediaMetadata);

File: library/common/src/test/java/com/google/android/exoplayer2/PlaybackParametersTest.java
Patch:
@@ -26,7 +26,7 @@
 public class PlaybackParametersTest {
 
   @Test
-  public void roundtripViaBundle_ofPlaybackParameters_yieldsEqualInstance() {
+  public void roundTripViaBundle_ofPlaybackParameters_yieldsEqualInstance() {
     PlaybackParameters playbackParameters =
         new PlaybackParameters(/* speed= */ 2.9f, /* pitch= */ 1.2f);
 

File: library/common/src/test/java/com/google/android/exoplayer2/PositionInfoTest.java
Patch:
@@ -27,7 +27,7 @@
 public class PositionInfoTest {
 
   @Test
-  public void roundtripViaBundle_ofPositionInfoWithoutObjectFields_yieldsEqualInstance() {
+  public void roundTripViaBundle_ofPositionInfoWithoutObjectFields_yieldsEqualInstance() {
     PositionInfo positionInfo =
         new PositionInfo(
             /* windowUid= */ null,
@@ -43,7 +43,7 @@ public void roundtripViaBundle_ofPositionInfoWithoutObjectFields_yieldsEqualInst
   }
 
   @Test
-  public void roundtripViaBundle_ofPositionInfoWithWindowUid_yieldsNullWindowUid() {
+  public void roundTripViaBundle_ofPositionInfoWithWindowUid_yieldsNullWindowUid() {
     PositionInfo positionInfo =
         new PositionInfo(
             /* windowUid= */ new Object(),
@@ -60,7 +60,7 @@ public void roundtripViaBundle_ofPositionInfoWithWindowUid_yieldsNullWindowUid()
   }
 
   @Test
-  public void roundtripViaBundle_ofPositionInfoWithPeriodUid_yieldsNullPeriodUid() {
+  public void roundTripViaBundle_ofPositionInfoWithPeriodUid_yieldsNullPeriodUid() {
     PositionInfo positionInfo =
         new PositionInfo(
             /* windowUid= */ null,

File: library/common/src/test/java/com/google/android/exoplayer2/audio/AudioAttributesTest.java
Patch:
@@ -27,7 +27,7 @@
 public class AudioAttributesTest {
 
   @Test
-  public void roundtripViaBundle_yieldsEqualInstance() {
+  public void roundTripViaBundle_yieldsEqualInstance() {
     AudioAttributes audioAttributes =
         new AudioAttributes.Builder()
             .setContentType(C.CONTENT_TYPE_SONIFICATION)

File: library/common/src/test/java/com/google/android/exoplayer2/device/DeviceInfoTest.java
Patch:
@@ -26,7 +26,7 @@
 public class DeviceInfoTest {
 
   @Test
-  public void roundtripViaBundle_yieldsEqualInstance() {
+  public void roundTripViaBundle_yieldsEqualInstance() {
     DeviceInfo deviceInfo =
         new DeviceInfo(DeviceInfo.PLAYBACK_TYPE_REMOTE, /* minVolume= */ 1, /* maxVolume= */ 9);
 

File: library/common/src/test/java/com/google/android/exoplayer2/source/ads/AdPlaybackStateTest.java
Patch:
@@ -150,7 +150,7 @@ public void skipAllWithoutAdCount() {
   }
 
   @Test
-  public void roundtripViaBundle_yieldsEqualFieldsExceptAdsId() {
+  public void roundTripViaBundle_yieldsEqualFieldsExceptAdsId() {
     AdPlaybackState originalState =
         state
             .withAdCount(/* adGroupIndex= */ 0, /* adCount= */ 1)
@@ -176,7 +176,7 @@ public void roundtripViaBundle_yieldsEqualFieldsExceptAdsId() {
   }
 
   @Test
-  public void roundtripViaBundle_ofAdGroup_yieldsEqualInstance() {
+  public void roundTripViaBundle_ofAdGroup_yieldsEqualInstance() {
     AdPlaybackState.AdGroup adGroup =
         new AdPlaybackState.AdGroup()
             .withAdCount(2)

File: demos/gl/src/main/java/com/google/android/exoplayer2/gldemo/BitmapOverlayVideoProcessor.java
Patch:
@@ -140,6 +140,7 @@ public void draw(int frameTexture, long frameTimestampUs) {
         case "scaleY":
           uniform.setFloat(bitmapScaleY);
           break;
+        default: // fall out
       }
     }
     for (GlUtil.Attribute copyExternalAttribute : attributes) {

File: extensions/cronet/src/main/java/com/google/android/exoplayer2/ext/cronet/CronetDataSource.java
Patch:
@@ -35,6 +35,7 @@
 import com.google.android.exoplayer2.util.Clock;
 import com.google.android.exoplayer2.util.ConditionVariable;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Ascii;
 import com.google.common.base.Predicate;
 import com.google.common.net.HttpHeaders;
 import com.google.common.primitives.Ints;
@@ -546,8 +547,7 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
       @Nullable IOException connectionOpenException = exception;
       if (connectionOpenException != null) {
         @Nullable String message = connectionOpenException.getMessage();
-        if (message != null
-            && Util.toLowerInvariant(message).contains("err_cleartext_not_permitted")) {
+        if (message != null && Ascii.toLowerCase(message).contains("err_cleartext_not_permitted")) {
           throw new CleartextNotPermittedException(connectionOpenException, dataSpec);
         }
         throw new OpenException(connectionOpenException, dataSpec, getStatus(urlRequest));

File: extensions/okhttp/src/main/java/com/google/android/exoplayer2/ext/okhttp/OkHttpDataSource.java
Patch:
@@ -32,6 +32,7 @@
 import com.google.android.exoplayer2.upstream.TransferListener;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Ascii;
 import com.google.common.base.Predicate;
 import com.google.common.net.HttpHeaders;
 import java.io.IOException;
@@ -289,7 +290,7 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
     } catch (IOException e) {
       @Nullable String message = e.getMessage();
       if (message != null
-          && Util.toLowerInvariant(message).matches("cleartext communication.*not permitted.*")) {
+          && Ascii.toLowerCase(message).matches("cleartext communication.*not permitted.*")) {
         throw new CleartextNotPermittedException(e, dataSpec);
       }
       throw new HttpDataSourceException(

File: library/common/src/main/java/com/google/android/exoplayer2/metadata/id3/Id3Decoder.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.android.exoplayer2.util.ParsableBitArray;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Ascii;
 import java.io.UnsupportedEncodingException;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
@@ -539,13 +540,13 @@ private static ApicFrame decodeApicFrame(ParsableByteArray id3Data, int frameSiz
     int mimeTypeEndIndex;
     if (majorVersion == 2) {
       mimeTypeEndIndex = 2;
-      mimeType = "image/" + Util.toLowerInvariant(new String(data, 0, 3, "ISO-8859-1"));
+      mimeType = "image/" + Ascii.toLowerCase(new String(data, 0, 3, "ISO-8859-1"));
       if ("image/jpg".equals(mimeType)) {
         mimeType = "image/jpeg";
       }
     } else {
       mimeTypeEndIndex = indexOfZeroByte(data, 0);
-      mimeType = Util.toLowerInvariant(new String(data, 0, mimeTypeEndIndex, "ISO-8859-1"));
+      mimeType = Ascii.toLowerCase(new String(data, 0, mimeTypeEndIndex, "ISO-8859-1"));
       if (mimeType.indexOf('/') == -1) {
         mimeType = "image/" + mimeType;
       }

File: library/common/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.android.exoplayer2.upstream.DataSpec.HttpMethod;
 import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Ascii;
 import com.google.common.base.Predicate;
 import com.google.common.net.HttpHeaders;
 import java.io.IOException;
@@ -339,7 +340,7 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
     } catch (IOException e) {
       @Nullable String message = e.getMessage();
       if (message != null
-          && Util.toLowerInvariant(message).matches("cleartext http traffic.*not permitted.*")) {
+          && Ascii.toLowerCase(message).matches("cleartext http traffic.*not permitted.*")) {
         throw new CleartextNotPermittedException(e, dataSpec);
       }
       throw new HttpDataSourceException(

File: library/common/src/main/java/com/google/android/exoplayer2/util/MimeTypes.java
Patch:
@@ -20,6 +20,7 @@
 import androidx.annotation.VisibleForTesting;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.audio.AacUtil;
+import com.google.common.base.Ascii;
 import java.util.ArrayList;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -340,7 +341,7 @@ public static String getMediaMimeType(@Nullable String codec) {
     if (codec == null) {
       return null;
     }
-    codec = Util.toLowerInvariant(codec.trim());
+    codec = Ascii.toLowerCase(codec.trim());
     if (codec.startsWith("avc1") || codec.startsWith("avc3")) {
       return MimeTypes.VIDEO_H264;
     } else if (codec.startsWith("hev1") || codec.startsWith("hvc1")) {

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecBufferEnqueuer.java
Patch:
@@ -30,6 +30,7 @@
 import com.google.android.exoplayer2.decoder.CryptoInfo;
 import com.google.android.exoplayer2.util.ConditionVariable;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Ascii;
 import java.util.ArrayDeque;
 import java.util.Arrays;
 import java.util.concurrent.atomic.AtomicReference;
@@ -303,7 +304,7 @@ public void setQueueParams(
    * buffers (see [Internal: b/149908061]).
    */
   private static boolean needsSynchronizationWorkaround() {
-    String manufacturer = Util.toLowerInvariant(Util.MANUFACTURER);
+    String manufacturer = Ascii.toLowerCase(Util.MANUFACTURER);
     return manufacturer.contains("samsung") || manufacturer.contains("motorola");
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecUtil.java
Patch:
@@ -33,6 +33,7 @@
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
 import com.google.android.exoplayer2.video.ColorInfo;
+import com.google.common.base.Ascii;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -624,7 +625,7 @@ private static boolean isSoftwareOnly(android.media.MediaCodecInfo codecInfo) {
     if (Util.SDK_INT >= 29) {
       return isSoftwareOnlyV29(codecInfo);
     }
-    String codecName = Util.toLowerInvariant(codecInfo.getName());
+    String codecName = Ascii.toLowerCase(codecInfo.getName());
     if (codecName.startsWith("arc.")) { // App Runtime for Chrome (ARC) codecs
       return false;
     }
@@ -650,7 +651,7 @@ private static boolean isVendor(android.media.MediaCodecInfo codecInfo) {
     if (Util.SDK_INT >= 29) {
       return isVendorV29(codecInfo);
     }
-    String codecName = Util.toLowerInvariant(codecInfo.getName());
+    String codecName = Ascii.toLowerCase(codecInfo.getName());
     return !codecName.startsWith("omx.google.")
         && !codecName.startsWith("c2.android.")
         && !codecName.startsWith("c2.google.");

File: library/core/src/main/java/com/google/android/exoplayer2/metadata/icy/IcyDecoder.java
Patch:
@@ -19,7 +19,7 @@
 import com.google.android.exoplayer2.metadata.Metadata;
 import com.google.android.exoplayer2.metadata.MetadataInputBuffer;
 import com.google.android.exoplayer2.metadata.SimpleMetadataDecoder;
-import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Ascii;
 import com.google.common.base.Charsets;
 import java.nio.ByteBuffer;
 import java.nio.charset.CharacterCodingException;
@@ -57,10 +57,10 @@ protected Metadata decode(MetadataInputBuffer inputBuffer, ByteBuffer buffer) {
     int index = 0;
     Matcher matcher = METADATA_ELEMENT.matcher(icyString);
     while (matcher.find(index)) {
-      @Nullable String key = Util.toLowerInvariant(matcher.group(1));
+      @Nullable String key = matcher.group(1);
       @Nullable String value = matcher.group(2);
       if (key != null) {
-        switch (key) {
+        switch (Ascii.toLowerCase(key)) {
           case STREAM_KEY_NAME:
             name = value;
             break;

File: library/core/src/main/java/com/google/android/exoplayer2/text/ssa/SsaDecoder.java
Patch:
@@ -32,6 +32,7 @@
 import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Ascii;
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -154,7 +155,7 @@ private void parseScriptInfo(ParsableByteArray data) {
       if (infoNameAndValue.length != 2) {
         continue;
       }
-      switch (Util.toLowerInvariant(infoNameAndValue[0].trim())) {
+      switch (Ascii.toLowerCase(infoNameAndValue[0].trim())) {
         case "playresx":
           try {
             screenWidth = Float.parseFloat(infoNameAndValue[1].trim());

File: library/core/src/main/java/com/google/android/exoplayer2/text/ssa/SsaDialogueFormat.java
Patch:
@@ -22,7 +22,7 @@
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.util.Assertions;
-import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Ascii;
 
 /**
  * Represents a {@code Format:} line from the {@code [Events]} section
@@ -61,7 +61,7 @@ public static SsaDialogueFormat fromFormatLine(String formatLine) {
     Assertions.checkArgument(formatLine.startsWith(FORMAT_LINE_PREFIX));
     String[] keys = TextUtils.split(formatLine.substring(FORMAT_LINE_PREFIX.length()), ",");
     for (int i = 0; i < keys.length; i++) {
-      switch (Util.toLowerInvariant(keys[i].trim())) {
+      switch (Ascii.toLowerCase(keys[i].trim())) {
         case "start":
           startTimeIndex = i;
           break;

File: library/core/src/main/java/com/google/android/exoplayer2/text/ssa/SsaStyle.java
Patch:
@@ -31,6 +31,7 @@
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Ascii;
 import com.google.common.primitives.Ints;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -284,7 +285,7 @@ public static Format fromFormatLine(String styleFormatLine) {
       String[] keys =
           TextUtils.split(styleFormatLine.substring(SsaDecoder.FORMAT_LINE_PREFIX.length()), ",");
       for (int i = 0; i < keys.length; i++) {
-        switch (Util.toLowerInvariant(keys[i].trim())) {
+        switch (Ascii.toLowerCase(keys[i].trim())) {
           case "name":
             nameIndex = i;
             break;

File: library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TextEmphasis.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.android.exoplayer2.text.Cue;
 import com.google.android.exoplayer2.text.span.TextAnnotation;
 import com.google.android.exoplayer2.text.span.TextEmphasisSpan;
+import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Sets;
@@ -131,7 +132,7 @@ public static TextEmphasis parse(@Nullable String value) {
       return null;
     }
 
-    String parsingValue = value.trim();
+    String parsingValue = Ascii.toLowerCase(value.trim());
     if (parsingValue.isEmpty()) {
       return null;
     }

File: library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCssStyle.java
Patch:
@@ -21,7 +21,7 @@
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.text.span.TextAnnotation;
-import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Ascii;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -216,7 +216,7 @@ public String getFontFamily() {
   }
 
   public WebvttCssStyle setFontFamily(@Nullable String fontFamily) {
-    this.fontFamily = Util.toLowerInvariant(fontFamily);
+    this.fontFamily = fontFamily == null ? null : Ascii.toLowerCase(fontFamily);
     return this;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/util/ColorParser.java
Patch:
@@ -18,6 +18,7 @@
 import android.graphics.Color;
 import android.text.TextUtils;
 import androidx.annotation.ColorInt;
+import com.google.common.base.Ascii;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.regex.Matcher;
@@ -106,7 +107,7 @@ private static int parseColorInternal(String colorExpression, boolean alphaHasFl
       }
     } else {
       // we use our own color map
-      Integer color = COLOR_MAP.get(Util.toLowerInvariant(colorExpression));
+      Integer color = COLOR_MAP.get(Ascii.toLowerCase(colorExpression));
       if (color != null) {
         return color;
       }

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java
Patch:
@@ -549,7 +549,7 @@ protected int parseContentType(XmlPullParser xpp) {
 
     String schemeIdUri = xpp.getAttributeValue(null, "schemeIdUri");
     if (schemeIdUri != null) {
-      switch (Util.toLowerInvariant(schemeIdUri)) {
+      switch (Ascii.toLowerCase(schemeIdUri)) {
         case "urn:mpeg:dash:mp4protection:2011":
           schemeType = xpp.getAttributeValue(null, "value");
           String defaultKid = XmlPullParserUtil.getAttributeValueIgnorePrefix(xpp, "default_KID");
@@ -1798,11 +1798,11 @@ protected static int parseMpegChannelConfiguration(XmlPullParser xpp) {
    *     not be parsed.
    */
   protected static int parseDolbyChannelConfiguration(XmlPullParser xpp) {
-    String value = Util.toLowerInvariant(xpp.getAttributeValue(null, "value"));
+    @Nullable String value = xpp.getAttributeValue(null, "value");
     if (value == null) {
       return Format.NO_VALUE;
     }
-    switch (value) {
+    switch (Ascii.toLowerCase(value)) {
       case "4000":
         return 1;
       case "a000":

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaChunk.java
Patch:
@@ -36,6 +36,7 @@
 import com.google.android.exoplayer2.util.TimestampAdjuster;
 import com.google.android.exoplayer2.util.UriUtil;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableList;
 import java.io.EOFException;
 import java.io.IOException;
@@ -540,7 +541,7 @@ private long peekId3PrivTimestamp(ExtractorInput input) throws IOException {
 
   private static byte[] getEncryptionIvArray(String ivString) {
     String trimmedIv;
-    if (Util.toLowerInvariant(ivString).startsWith("0x")) {
+    if (Ascii.toLowerCase(ivString).startsWith("0x")) {
       trimmedIv = ivString.substring(2);
     } else {
       trimmedIv = ivString;

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -1489,7 +1489,7 @@ default void onCues(List<Cue> cues) {}
   int getPlaybackSuppressionReason();
 
   /**
-   * Returns whether the player is playing, i.e. {@link #getContentPosition()} is advancing.
+   * Returns whether the player is playing, i.e. {@link #getCurrentPosition()} is advancing.
    *
    * <p>If {@code false}, then at least one of the following is true:
    *

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/WebViewSubtitleOutput.java
Patch:
@@ -175,7 +175,7 @@ private void updateWebView() {
                 + "right:0;"
                 + "color:%s;"
                 + "font-size:%s;"
-                + "line-height:%.2fem;"
+                + "line-height:%.2f;"
                 + "text-shadow:%s;"
                 + "'>",
             HtmlUtils.toCssRgba(style.foregroundColor),

File: library/core/src/main/java/com/google/android/exoplayer2/BaseRenderer.java
Patch:
@@ -196,7 +196,7 @@ public int supportsMixedMimeTypeAdaptation() throws ExoPlaybackException {
   // PlayerMessage.Target implementation.
 
   @Override
-  public void handleMessage(int what, @Nullable Object object) throws ExoPlaybackException {
+  public void handleMessage(int messageType, @Nullable Object payload) throws ExoPlaybackException {
     // Do nothing.
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/util/EventLogger.java
Patch:
@@ -19,7 +19,6 @@
 
 import android.os.SystemClock;
 import android.text.TextUtils;
-import android.view.Surface;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ExoPlaybackException;
@@ -453,8 +452,8 @@ public void onVideoDisabled(EventTime eventTime, DecoderCounters counters) {
   }
 
   @Override
-  public void onRenderedFirstFrame(EventTime eventTime, @Nullable Surface surface) {
-    logd(eventTime, "renderedFirstFrame", String.valueOf(surface));
+  public void onRenderedFirstFrame(EventTime eventTime, Object output, long renderTimeMs) {
+    logd(eventTime, "renderedFirstFrame", String.valueOf(output));
   }
 
   @Override

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -2560,7 +2560,7 @@ public void handleMessage(int what, @Nullable Object object) throws ExoPlaybackE
         .start()
         .blockUntilActionScheduleFinished(TIMEOUT_MS)
         .blockUntilEnded(TIMEOUT_MS);
-    assertThat(Collections.frequency(rendererMessages, Renderer.MSG_SET_SURFACE)).isEqualTo(2);
+    assertThat(Collections.frequency(rendererMessages, Renderer.MSG_SET_VIDEO_OUTPUT)).isEqualTo(2);
   }
 
   @Test

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/AnalyticsCollectorTest.java
Patch:
@@ -2309,8 +2309,7 @@ public void onVideoFrameProcessingOffset(
     }
 
     @Override
-    public void onRenderedFirstFrame(
-        EventTime eventTime, @Nullable Surface surface, long renderTimeMs) {
+    public void onRenderedFirstFrame(EventTime eventTime, Object output, long renderTimeMs) {
       reportedEvents.add(new ReportedEvent(EVENT_RENDERED_FIRST_FRAME, eventTime));
     }
 

File: library/core/src/test/java/com/google/android/exoplayer2/video/MediaCodecVideoRendererTest.java
Patch:
@@ -120,7 +120,7 @@ protected void onOutputFormatChanged(Format format, @Nullable MediaFormat mediaF
         };
 
     surface = new Surface(new SurfaceTexture(/* texName= */ 0));
-    mediaCodecVideoRenderer.handleMessage(Renderer.MSG_SET_SURFACE, surface);
+    mediaCodecVideoRenderer.handleMessage(Renderer.MSG_SET_VIDEO_OUTPUT, surface);
   }
 
   @After

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/DefaultMediaItemConverter.java
Patch:
@@ -84,7 +84,7 @@ public MediaItem convertToExoPlayerMediaItem(androidx.media2.common.MediaItem me
 
     return new MediaItem.Builder()
         .setUri(uri)
-        .setMediaId(mediaId)
+        .setMediaId(mediaId != null ? mediaId : MediaItem.DEFAULT_MEDIA_ID)
         .setMediaMetadata(
             new com.google.android.exoplayer2.MediaMetadata.Builder().setTitle(title).build())
         .setTag(media2MediaItem)

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -1488,6 +1488,9 @@ private static int getCodecMaxInputSize(
         maxPixels = width * height;
         minCompressionRatio = 2;
         break;
+      case MimeTypes.VIDEO_DOLBY_VISION:
+        // Dolby vision can be a wrapper around H264 or H265. We assume H264 here because the
+        // minimum compression ratio is lower, meaning we overestimate the maximum input size.
       case MimeTypes.VIDEO_H264:
         if ("BRAVIA 4K 2015".equals(Util.MODEL) // Sony Bravia 4K
             || ("Amazon".equals(Util.MANUFACTURER)

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -141,7 +141,7 @@
  *         <li>Corresponding method: {@link #setShowShuffleButton(boolean)}
  *         <li>Default: false
  *       </ul>
- *   <li><b>{@code show_subtitle_button}</b> - Whether the shuffle button is shown.
+ *   <li><b>{@code show_subtitle_button}</b> - Whether the subtitle button is shown.
  *       <ul>
  *         <li>Corresponding method: {@link #setShowSubtitleButton(boolean)}
  *         <li>Default: false

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -1603,6 +1603,7 @@ private static boolean evaluateDeviceNeedsSetOutputSurfaceWorkaround() {
         case "dangalFHD":
         case "magnolia":
         case "machuca":
+        case "once":
         case "oneday":
           return true;
         default:

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/PsExtractor.java
Patch:
@@ -144,8 +144,7 @@ public void seek(long position, long timeUs) {
       // we have to set the first sample timestamp manually.
       // - If the timestamp adjuster has its timestamp set manually before, and now we seek to a
       // different position, we need to set the first sample timestamp manually again.
-      timestampAdjuster.reset();
-      timestampAdjuster.setFirstSampleTimestampUs(timeUs);
+      timestampAdjuster.reset(timeUs);
     }
 
     if (psBinarySearchSeeker != null) {

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
Patch:
@@ -268,8 +268,7 @@ public void seek(long position, long timeUs) {
         // sample timestamp for that track manually.
         // - If the timestamp adjuster has its timestamp set manually before, and now we seek to a
         // different position, we need to set the first sample timestamp manually again.
-        timestampAdjuster.reset();
-        timestampAdjuster.setFirstSampleTimestampUs(timeUs);
+        timestampAdjuster.reset(timeUs);
       }
     }
     if (timeUs != 0 && tsBinarySearchSeeker != null) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/AdsLoader.java
Patch:
@@ -56,7 +56,8 @@ public interface AdsLoader {
   interface EventListener {
 
     /**
-     * Called when the ad playback state has been updated.
+     * Called when the ad playback state has been updated. The number of {@link
+     * AdPlaybackState#adGroups ad groups} may not change after the first call.
      *
      * @param adPlaybackState The new ad playback state.
      */

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -440,8 +440,8 @@ public void onPlaybackStateChanged(@Player.State int playbackState) {
     @Override
     public void onPlayerError(@NonNull ExoPlaybackException e) {
       if (isBehindLiveWindow(e)) {
-        clearStartPosition();
-        initializePlayer();
+        player.seekToDefaultPosition();
+        player.prepare();
       } else {
         updateButtonVisibility();
         showControls();

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlViewLayoutManager.java
Patch:
@@ -607,7 +607,7 @@ private void updateLayoutForSizeChange() {
           defaultTimeBar.hideScrubber(/* disableScrubberPadding= */ true);
         } else if (uxState == UX_STATE_ONLY_PROGRESS_VISIBLE) {
           defaultTimeBar.hideScrubber(/* disableScrubberPadding= */ false);
-        } else if (uxState != UX_STATE_ANIMATING_HIDE && uxState != UX_STATE_ANIMATING_SHOW) {
+        } else if (uxState != UX_STATE_ANIMATING_HIDE) {
           defaultTimeBar.showScrubber();
         }
       }

File: library/core/src/main/java/com/google/android/exoplayer2/text/ssa/SsaDialogueFormat.java
Patch:
@@ -76,7 +76,9 @@ public static SsaDialogueFormat fromFormatLine(String formatLine) {
           break;
       }
     }
-    return (startTimeIndex != C.INDEX_UNSET && endTimeIndex != C.INDEX_UNSET)
+    return (startTimeIndex != C.INDEX_UNSET
+            && endTimeIndex != C.INDEX_UNSET
+            && textIndex != C.INDEX_UNSET)
         ? new SsaDialogueFormat(startTimeIndex, endTimeIndex, styleIndex, textIndex, keys.length)
         : null;
   }

File: library/core/src/main/java/com/google/android/exoplayer2/source/MaskingMediaSource.java
Patch:
@@ -395,12 +395,14 @@ public int getPeriodCount() {
 
     @Override
     public Period getPeriod(int periodIndex, Period period, boolean setIds) {
-      return period.set(
+      period.set(
           /* id= */ setIds ? 0 : null,
           /* uid= */ setIds ? MaskingTimeline.MASKING_EXTERNAL_PERIOD_UID : null,
           /* windowIndex= */ 0,
           /* durationUs = */ C.TIME_UNSET,
           /* positionInWindowUs= */ 0);
+      period.isPlaceholder = true;
+      return period;
     }
 
     @Override

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTimeline.java
Patch:
@@ -410,13 +410,15 @@ public Period getPeriod(int periodIndex, Period period, boolean setIds) {
     } else {
       positionInWindowUs = periodDurationUs * windowPeriodIndex;
     }
-    return period.set(
+    period.set(
         id,
         uid,
         windowIndex,
         periodDurationUs,
         positionInWindowUs,
         windowDefinition.adPlaybackState);
+    period.isPlaceholder = windowDefinition.isPlaceholder;
+    return period;
   }
 
   @Override

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java
Patch:
@@ -1190,7 +1190,8 @@ private static String parseStringAttr(
     }
   }
 
-  private static @Nullable String parseOptionalStringAttr(
+  @Nullable
+  private static String parseOptionalStringAttr(
       String line, Pattern pattern, Map<String, String> variableDefinitions) {
     return parseOptionalStringAttr(line, pattern, null, variableDefinitions);
   }

File: library/common/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -1339,7 +1339,7 @@ interface Listener
    *     C#TIME_UNSET} is passed, the default position of the given window is used. In any case, if
    *     {@code startWindowIndex} is set to {@link C#INDEX_UNSET}, this parameter is ignored and the
    *     position is not reset at all.
-   * @throws IllegalSeekPositionException If the provided {@code windowIndex} is not within the
+   * @throws IllegalSeekPositionException If the provided {@code startWindowIndex} is not within the
    *     bounds of the list of media items.
    */
   void setMediaItems(List<MediaItem> mediaItems, int startWindowIndex, long startPositionMs);

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -670,7 +670,7 @@ public static String getLocaleLanguageTag(Locale locale) {
     // Locale data (especially for API < 21) may produce tags with '_' instead of the
     // standard-conformant '-'.
     String normalizedTag = language.replace('_', '-');
-    if (normalizedTag.isEmpty() || "und".equals(normalizedTag)) {
+    if (normalizedTag.isEmpty() || normalizedTag.equals(C.LANGUAGE_UNDETERMINED)) {
       // Tag isn't valid, keep using the original.
       normalizedTag = language;
     }

File: library/common/src/main/java/com/google/android/exoplayer2/text/TextOutput.java
Patch:
@@ -25,6 +25,9 @@ public interface TextOutput {
   /**
    * Called when there is a change in the {@link Cue Cues}.
    *
+   * <p>{@code cues} is in ascending order of priority. If any of the cue boxes overlap when
+   * displayed, the {@link Cue} nearer the end of the list should be shown on top.
+   *
    * @param cues The {@link Cue Cues}. May be empty.
    */
   void onCues(List<Cue> cues);

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/WebViewSubtitleOutput.java
Patch:
@@ -278,6 +278,7 @@ private void updateWebView() {
               Util.formatInvariant(
                   "<div style='"
                       + "position:absolute;"
+                      + "z-index:%s;"
                       + "%s:%.2f%%;"
                       + "%s:%s;"
                       + "%s:%s;"
@@ -287,6 +288,7 @@ private void updateWebView() {
                       + "background-color:%s;"
                       + "transform:translate(%s%%,%s%%);"
                       + "'>",
+                  /* z-index */ i,
                   positionProperty,
                   positionPercent,
                   lineProperty,

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -1497,6 +1497,9 @@ private static int getCodecMaxInputSize(
         maxPixels = width * height;
         minCompressionRatio = 2;
         break;
+      case MimeTypes.VIDEO_DOLBY_VISION:
+        // Dolby vision can be a wrapper around H264 or H265. We assume H264 here because the
+        // minimum compression ratio is lower, meaning we overestimate the maximum input size.
       case MimeTypes.VIDEO_H264:
         if ("BRAVIA 4K 2015".equals(Util.MODEL) // Sony Bravia 4K
             || ("Amazon".equals(Util.MANUFACTURER)

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
Patch:
@@ -80,6 +80,7 @@ public final class CastPlayer extends BasePlayer {
           .addAll(
               COMMAND_PLAY_PAUSE,
               COMMAND_PREPARE_STOP_RELEASE,
+              COMMAND_SEEK_TO_DEFAULT_POSITION,
               COMMAND_SEEK_TO_MEDIA_ITEM,
               COMMAND_SET_REPEAT_MODE,
               COMMAND_GET_CURRENT_MEDIA_ITEM,

File: extensions/cast/src/test/java/com/google/android/exoplayer2/ext/cast/CastPlayerTest.java
Patch:
@@ -26,6 +26,7 @@
 import static com.google.android.exoplayer2.Player.COMMAND_PLAY_PAUSE;
 import static com.google.android.exoplayer2.Player.COMMAND_PREPARE_STOP_RELEASE;
 import static com.google.android.exoplayer2.Player.COMMAND_SEEK_IN_CURRENT_MEDIA_ITEM;
+import static com.google.android.exoplayer2.Player.COMMAND_SEEK_TO_DEFAULT_POSITION;
 import static com.google.android.exoplayer2.Player.COMMAND_SEEK_TO_MEDIA_ITEM;
 import static com.google.android.exoplayer2.Player.COMMAND_SEEK_TO_NEXT_MEDIA_ITEM;
 import static com.google.android.exoplayer2.Player.COMMAND_SEEK_TO_PREVIOUS_MEDIA_ITEM;
@@ -601,6 +602,7 @@ public void isCommandAvailable_isTrueForAvailableCommands() {
 
     assertThat(castPlayer.isCommandAvailable(COMMAND_PLAY_PAUSE)).isTrue();
     assertThat(castPlayer.isCommandAvailable(COMMAND_PREPARE_STOP_RELEASE)).isTrue();
+    assertThat(castPlayer.isCommandAvailable(COMMAND_SEEK_TO_DEFAULT_POSITION)).isTrue();
     assertThat(castPlayer.isCommandAvailable(COMMAND_SEEK_IN_CURRENT_MEDIA_ITEM)).isTrue();
     assertThat(castPlayer.isCommandAvailable(COMMAND_SEEK_TO_NEXT_MEDIA_ITEM)).isTrue();
     assertThat(castPlayer.isCommandAvailable(COMMAND_SEEK_TO_PREVIOUS_MEDIA_ITEM)).isFalse();

File: library/common/src/main/java/com/google/android/exoplayer2/BasePlayer.java
Patch:
@@ -331,6 +331,7 @@ private int getRepeatModeForNavigation() {
   protected Commands getAvailableCommands(Commands permanentAvailableCommands) {
     return new Commands.Builder()
         .addAll(permanentAvailableCommands)
+        .addIf(COMMAND_SEEK_TO_DEFAULT_POSITION, !isPlayingAd())
         .addIf(COMMAND_SEEK_IN_CURRENT_MEDIA_ITEM, isCurrentWindowSeekable() && !isPlayingAd())
         .addIf(COMMAND_SEEK_TO_NEXT_MEDIA_ITEM, hasNext() && !isPlayingAd())
         .addIf(COMMAND_SEEK_TO_PREVIOUS_MEDIA_ITEM, hasPrevious() && !isPlayingAd())

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -198,6 +198,7 @@ public ExoPlayerImpl(
     availableCommands =
         new Commands.Builder()
             .addAll(permanentAvailableCommands)
+            .add(COMMAND_SEEK_TO_DEFAULT_POSITION)
             .add(COMMAND_SEEK_TO_MEDIA_ITEM)
             .build();
     maskingWindowIndex = C.INDEX_UNSET;

File: library/common/src/main/java/com/google/android/exoplayer2/Timeline.java
Patch:
@@ -1291,7 +1291,9 @@ public final Bundle toBundle() {
     }
 
     int[] shuffledWindowIndices = new int[windowCount];
-    shuffledWindowIndices[0] = getFirstWindowIndex(/* shuffleModeEnabled= */ true);
+    if (windowCount > 0) {
+      shuffledWindowIndices[0] = getFirstWindowIndex(/* shuffleModeEnabled= */ true);
+    }
     for (int i = 1; i < windowCount; i++) {
       shuffledWindowIndices[i] =
           getNextWindowIndex(

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
Patch:
@@ -469,7 +469,7 @@ public void seekTo(int windowIndex, long positionMs) {
   }
 
   @Override
-  public void setPlaybackParameters(@Nullable PlaybackParameters playbackParameters) {
+  public void setPlaybackParameters(PlaybackParameters playbackParameters) {
     // Unsupported by the RemoteMediaClient API. Do nothing.
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -669,7 +669,7 @@ public void seekTo(int windowIndex, long positionMs) {
   }
 
   @Override
-  public void setPlaybackParameters(@Nullable PlaybackParameters playbackParameters) {
+  public void setPlaybackParameters(PlaybackParameters playbackParameters) {
     if (playbackParameters == null) {
       playbackParameters = PlaybackParameters.DEFAULT;
     }

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -1467,7 +1467,7 @@ public void seekTo(int windowIndex, long positionMs) {
   }
 
   @Override
-  public void setPlaybackParameters(@Nullable PlaybackParameters playbackParameters) {
+  public void setPlaybackParameters(PlaybackParameters playbackParameters) {
     verifyApplicationThread();
     player.setPlaybackParameters(playbackParameters);
   }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/StubExoPlayer.java
Patch:
@@ -281,7 +281,7 @@ public void seekTo(int windowIndex, long positionMs) {
   }
 
   @Override
-  public void setPlaybackParameters(@Nullable PlaybackParameters playbackParameters) {
+  public void setPlaybackParameters(PlaybackParameters playbackParameters) {
     throw new UnsupportedOperationException();
   }
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -144,7 +144,7 @@
  *         <li>Corresponding method: {@link #setShowShuffleButton(boolean)}
  *         <li>Default: false
  *       </ul>
- *   <li><b>{@code show_subtitle_button}</b> - Whether the shuffle button is shown.
+ *   <li><b>{@code show_subtitle_button}</b> - Whether the subtitle button is shown.
  *       <ul>
  *         <li>Corresponding method: {@link #setShowSubtitleButton(boolean)}
  *         <li>Default: false

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -1612,6 +1612,7 @@ private static boolean evaluateDeviceNeedsSetOutputSurfaceWorkaround() {
         case "dangalFHD":
         case "magnolia":
         case "machuca":
+        case "once":
         case "oneday":
           return true;
         default:

File: library/common/src/main/java/com/google/android/exoplayer2/BasePlayer.java
Patch:
@@ -136,6 +136,7 @@ public final void clearMediaItems() {
     removeMediaItems(/* fromIndex= */ 0, /* toIndex= */ Integer.MAX_VALUE);
   }
 
+  /** @deprecated Use {@link #getPlayerError()} instead. */
   @Deprecated
   @Override
   @Nullable

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/PsExtractor.java
Patch:
@@ -144,8 +144,7 @@ public void seek(long position, long timeUs) {
       // we have to set the first sample timestamp manually.
       // - If the timestamp adjuster has its timestamp set manually before, and now we seek to a
       // different position, we need to set the first sample timestamp manually again.
-      timestampAdjuster.reset();
-      timestampAdjuster.setFirstSampleTimestampUs(timeUs);
+      timestampAdjuster.reset(timeUs);
     }
 
     if (psBinarySearchSeeker != null) {

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
Patch:
@@ -268,8 +268,7 @@ public void seek(long position, long timeUs) {
         // sample timestamp for that track manually.
         // - If the timestamp adjuster has its timestamp set manually before, and now we seek to a
         // different position, we need to set the first sample timestamp manually again.
-        timestampAdjuster.reset();
-        timestampAdjuster.setFirstSampleTimestampUs(timeUs);
+        timestampAdjuster.reset(timeUs);
       }
     }
     if (timeUs != 0 && tsBinarySearchSeeker != null) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/AdsLoader.java
Patch:
@@ -56,7 +56,8 @@ public interface AdsLoader {
   interface EventListener {
 
     /**
-     * Called when the ad playback state has been updated.
+     * Called when the ad playback state has been updated. The number of {@link
+     * AdPlaybackState#adGroups ad groups} may not change after the first call.
      *
      * @param adPlaybackState The new ad playback state.
      */

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -440,8 +440,8 @@ public void onPlaybackStateChanged(@Player.State int playbackState) {
     @Override
     public void onPlayerError(@NonNull ExoPlaybackException e) {
       if (isBehindLiveWindow(e)) {
-        clearStartPosition();
-        initializePlayer();
+        player.seekToDefaultPosition();
+        player.prepare();
       } else {
         updateButtonVisibility();
         showControls();

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/SpannedToHtmlConverter.java
Patch:
@@ -206,7 +206,8 @@ private static String getOpeningTag(Object span, float displayDensity) {
       return Util
           .formatInvariant(
               "<span style='-webkit-text-emphasis-style: %1$s; text-emphasis-style: %1$s; "
-                  + "-webkit-text-emphasis-position: %2$s; text-emphasis-position: %2$s;'>",
+                  + "-webkit-text-emphasis-position: %2$s; text-emphasis-position: %2$s; "
+                  + "display: inline-block;'>", /** Sets background color behind emphasis mark */
               style, position);
     } else {
       return null;

File: library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java
Patch:
@@ -582,10 +582,10 @@ private static String[] parseStyleIds(String parentStyleIds) {
           break;
         case TtmlNode.ATTR_TTS_RUBY_POSITION:
           switch (Util.toLowerInvariant(attributeValue)) {
-            case TtmlNode.RUBY_BEFORE:
+            case TtmlNode.ANNOTATION_POSITION_BEFORE:
               style = createIfNull(style).setRubyPosition(TextAnnotation.POSITION_BEFORE);
               break;
-            case TtmlNode.RUBY_AFTER:
+            case TtmlNode.ANNOTATION_POSITION_AFTER:
               style = createIfNull(style).setRubyPosition(TextAnnotation.POSITION_AFTER);
               break;
             default:

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -2020,8 +2020,8 @@ public void onVideoSizeChanged(
     }
 
     @Override
-    public void onRenderedFirstFrame(@Nullable Surface surface) {
-      analyticsCollector.onRenderedFirstFrame(surface);
+    public void onRenderedFirstFrame(@Nullable Surface surface, long renderTimeMs) {
+      analyticsCollector.onRenderedFirstFrame(surface, renderTimeMs);
       if (SimpleExoPlayer.this.surface == surface) {
         for (VideoListener videoListener : videoListeners) {
           videoListener.onRenderedFirstFrame();

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlViewLayoutManager.java
Patch:
@@ -607,7 +607,7 @@ private void updateLayoutForSizeChange() {
           defaultTimeBar.hideScrubber(/* disableScrubberPadding= */ true);
         } else if (uxState == UX_STATE_ONLY_PROGRESS_VISIBLE) {
           defaultTimeBar.hideScrubber(/* disableScrubberPadding= */ false);
-        } else if (uxState != UX_STATE_ANIMATING_HIDE && uxState != UX_STATE_ANIMATING_SHOW) {
+        } else if (uxState != UX_STATE_ANIMATING_HIDE) {
           defaultTimeBar.showScrubber();
         }
       }

File: extensions/cronet/src/test/java/com/google/android/exoplayer2/ext/cronet/CronetDataSourceTest.java
Patch:
@@ -256,6 +256,7 @@ public void requestStartCalled() throws HttpDataSourceException {
   public void requestSetsRangeHeader() throws HttpDataSourceException {
     testDataSpec = new DataSpec(Uri.parse(TEST_URL), 1000, 5000);
     mockResponseStartSuccess();
+    mockReadSuccess(0, 1000);
 
     dataSourceUnderTest.open(testDataSpec);
     // The header value to add is current position to current position + length - 1.
@@ -287,8 +288,6 @@ public void requestHeadersSet() throws HttpDataSourceException {
     testDataSpec =
         new DataSpec.Builder()
             .setUri(TEST_URL)
-            .setPosition(1000)
-            .setLength(5000)
             .setHttpRequestHeaders(dataSpecRequestProperties)
             .build();
     mockResponseStartSuccess();
@@ -1198,6 +1197,7 @@ public void redirectParseAndAttachCookie_dataSourceDoesNotHandleSetCookie_follow
     dataSourceUnderTest.setRequestProperty("Content-Type", TEST_CONTENT_TYPE);
 
     mockSingleRedirectSuccess();
+    mockReadSuccess(0, 1000);
 
     testResponseHeader.put("Set-Cookie", "testcookie=testcookie; Path=/video");
 
@@ -1368,7 +1368,7 @@ public void run() {
 
   @Test
   public void allowDirectExecutor() throws HttpDataSourceException {
-    testDataSpec = new DataSpec(Uri.parse(TEST_URL), 1000, 5000);
+    testDataSpec = new DataSpec(Uri.parse(TEST_URL));
     mockResponseStartSuccess();
 
     dataSourceUnderTest.open(testDataSpec);

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/CacheDataSourceContractTest.java
Patch:
@@ -50,7 +50,6 @@ public void setUp() throws IOException {
     File file = tempFolder.newFile();
     Files.write(Paths.get(file.getAbsolutePath()), DATA);
     simpleUri = Uri.fromFile(file);
-    fileDataSource = new FileDataSource();
   }
 
   @Override
@@ -74,6 +73,7 @@ protected DataSource createDataSource() throws IOException {
         Util.createTempDirectory(ApplicationProvider.getApplicationContext(), "ExoPlayerTest");
     SimpleCache cache =
         new SimpleCache(tempFolder, new NoOpCacheEvictor(), TestUtil.getInMemoryDatabaseProvider());
+    fileDataSource = new FileDataSource();
     return new CacheDataSource(cache, fileDataSource);
   }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DataSourceContractTest.java
Patch:
@@ -69,7 +69,8 @@ public abstract class DataSourceContractTest {
 
   /**
    * Returns the {@link DataSource} that will be included in the {@link TransferListener} callbacks
-   * if different from the {@link DataSource} under test, otherwise null.
+   * for the {@link DataSource} most recently created by {@link #createDataSource()}. If it's the
+   * same {@link DataSource} then {@code null} can be returned.
    */
   @Nullable
   protected DataSource getTransferListenerDataSource() {

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/HttpDataSourceTestEnv.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.google.android.exoplayer2.testutil;
 
+import static com.google.android.exoplayer2.testutil.WebServerDispatcher.getRequestPath;
+
 import android.net.Uri;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.google.common.collect.ImmutableList;
@@ -115,7 +117,7 @@ protected void before() throws Throwable {
         new Dispatcher() {
           @Override
           public MockResponse dispatch(RecordedRequest request) {
-            if (request.getPath().equals(REDIRECTS_TO_RANGE_SUPPORTED.getPath())) {
+            if (getRequestPath(request).equals(REDIRECTS_TO_RANGE_SUPPORTED.getPath())) {
               return new MockResponse()
                   .setResponseCode(302)
                   .setHeader("Location", originServer.url(RANGE_SUPPORTED.getPath()).toString());

File: library/core/src/main/java/com/google/android/exoplayer2/text/ssa/SsaDialogueFormat.java
Patch:
@@ -76,7 +76,9 @@ public static SsaDialogueFormat fromFormatLine(String formatLine) {
           break;
       }
     }
-    return (startTimeIndex != C.INDEX_UNSET && endTimeIndex != C.INDEX_UNSET)
+    return (startTimeIndex != C.INDEX_UNSET
+            && endTimeIndex != C.INDEX_UNSET
+            && textIndex != C.INDEX_UNSET)
         ? new SsaDialogueFormat(startTimeIndex, endTimeIndex, styleIndex, textIndex, keys.length)
         : null;
   }

File: library/core/src/main/java/com/google/android/exoplayer2/DefaultRenderersFactory.java
Patch:
@@ -669,6 +669,8 @@ protected AudioSink buildAudioSink(
         new DefaultAudioProcessorChain(),
         enableFloatOutput,
         enableAudioTrackPlaybackParams,
-        enableOffload);
+        enableOffload
+            ? DefaultAudioSink.OFFLOAD_MODE_ENABLED_GAPLESS_REQUIRED
+            : DefaultAudioSink.OFFLOAD_MODE_DISABLED);
   }
 }

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -678,7 +678,7 @@ public ExoPlayer build() {
    *   <li>Audio offload rendering is enabled in {@link
    *       DefaultRenderersFactory#setEnableAudioOffload} or the equivalent option passed to {@link
    *       DefaultAudioSink#DefaultAudioSink(AudioCapabilities,
-   *       DefaultAudioSink.AudioProcessorChain, boolean, boolean, boolean)}.
+   *       DefaultAudioSink.AudioProcessorChain, boolean, boolean, int)}.
    *   <li>An audio track is playing in a format that the device supports offloading (for example,
    *       MP3 or AAC).
    *   <li>The {@link AudioSink} is playing with an offload {@link AudioTrack}.

File: library/core/src/test/java/com/google/android/exoplayer2/audio/DefaultAudioSinkTest.java
Patch:
@@ -66,7 +66,7 @@ public void setUp() {
             new DefaultAudioSink.DefaultAudioProcessorChain(teeAudioProcessor),
             /* enableFloatOutput= */ false,
             /* enableAudioTrackPlaybackParams= */ false,
-            /* enableOffload= */ false);
+            DefaultAudioSink.OFFLOAD_MODE_DISABLED);
   }
 
   @Test

File: extensions/mediasession/src/main/java/com/google/android/exoplayer2/ext/mediasession/TimelineQueueNavigator.java
Patch:
@@ -98,8 +98,8 @@ public long getSupportedQueueNavigatorActions(Player player) {
     if (!timeline.isEmpty() && !player.isPlayingAd()) {
       timeline.getWindow(player.getCurrentWindowIndex(), window);
       enableSkipTo = timeline.getWindowCount() > 1;
-      enablePrevious = window.isSeekable || !window.isDynamic || player.hasPrevious();
-      enableNext = window.isDynamic || player.hasNext();
+      enablePrevious = window.isSeekable || !window.isLive() || player.hasPrevious();
+      enableNext = (window.isLive() && window.isDynamic) || player.hasNext();
     }
 
     long actions = 0;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.java
Patch:
@@ -913,10 +913,10 @@ private void updateNavigation() {
         timeline.getWindow(player.getCurrentWindowIndex(), window);
         boolean isSeekable = window.isSeekable;
         enableSeeking = isSeekable;
-        enablePrevious = isSeekable || !window.isDynamic || player.hasPrevious();
+        enablePrevious = isSeekable || !window.isLive() || player.hasPrevious();
         enableRewind = isSeekable && controlDispatcher.isRewindEnabled();
         enableFastForward = isSeekable && controlDispatcher.isFastForwardEnabled();
-        enableNext = window.isLive() || player.hasNext();
+        enableNext = (window.isLive() && window.isDynamic) || player.hasNext();
       }
     }
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -1141,10 +1141,10 @@ private void updateNavigation() {
         timeline.getWindow(player.getCurrentWindowIndex(), window);
         boolean isSeekable = window.isSeekable;
         enableSeeking = isSeekable;
-        enablePrevious = isSeekable || !window.isDynamic || player.hasPrevious();
+        enablePrevious = isSeekable || !window.isLive() || player.hasPrevious();
         enableRewind = isSeekable && controlDispatcher.isRewindEnabled();
         enableFastForward = isSeekable && controlDispatcher.isFastForwardEnabled();
-        enableNext = window.isLive() || player.hasNext();
+        enableNext = (window.isLive() && window.isDynamic) || player.hasNext();
       }
     }
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.java
Patch:
@@ -916,7 +916,7 @@ private void updateNavigation() {
         enablePrevious = isSeekable || !window.isDynamic || player.hasPrevious();
         enableRewind = isSeekable && controlDispatcher.isRewindEnabled();
         enableFastForward = isSeekable && controlDispatcher.isFastForwardEnabled();
-        enableNext = window.isDynamic || player.hasNext();
+        enableNext = window.isLive() || player.hasNext();
       }
     }
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -1144,7 +1144,7 @@ private void updateNavigation() {
         enablePrevious = isSeekable || !window.isDynamic || player.hasPrevious();
         enableRewind = isSeekable && controlDispatcher.isRewindEnabled();
         enableFastForward = isSeekable && controlDispatcher.isFastForwardEnabled();
-        enableNext = window.isDynamic || player.hasNext();
+        enableNext = window.isLive() || player.hasNext();
       }
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -1980,7 +1980,7 @@ private void maybeUpdateReadingRenderers() throws ExoPlaybackException {
     @Nullable MediaPeriodHolder readingPeriod = queue.getReadingPeriod();
     if (readingPeriod == null
         || queue.getPlayingPeriod() == readingPeriod
-        || readingPeriod.allRenderersEnabled) {
+        || readingPeriod.allRenderersInCorrectState) {
       // Not reading ahead or all renderers updated.
       return;
     }
@@ -2075,7 +2075,7 @@ private boolean shouldAdvancePlayingPeriod() {
     MediaPeriodHolder nextPlayingPeriodHolder = playingPeriodHolder.getNext();
     return nextPlayingPeriodHolder != null
         && rendererPositionUs >= nextPlayingPeriodHolder.getStartPositionRendererTime()
-        && nextPlayingPeriodHolder.allRenderersEnabled;
+        && nextPlayingPeriodHolder.allRenderersInCorrectState;
   }
 
   private boolean hasReadingPeriodFinishedReading() {
@@ -2294,7 +2294,7 @@ private void enableRenderers(boolean[] rendererWasEnabledFlags) throws ExoPlayba
         enableRenderer(i, rendererWasEnabledFlags[i]);
       }
     }
-    readingMediaPeriod.allRenderersEnabled = true;
+    readingMediaPeriod.allRenderersInCorrectState = true;
   }
 
   private void enableRenderer(int rendererIndex, boolean wasRendererEnabled)

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/AssetDataSource.java
Patch:
@@ -71,7 +71,7 @@ public long open(DataSpec dataSpec) throws AssetDataSourceException {
       if (skipped < dataSpec.position) {
         // assetManager.open() returns an AssetInputStream, whose skip() implementation only skips
         // fewer bytes than requested if the skip is beyond the end of the asset's data.
-        throw new EOFException();
+        throw new DataSourceException(DataSourceException.POSITION_OUT_OF_RANGE);
       }
       if (dataSpec.length != C.LENGTH_UNSET) {
         bytesRemaining = dataSpec.length;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/ContentDataSource.java
Patch:
@@ -80,7 +80,7 @@ public long open(DataSpec dataSpec) throws ContentDataSourceException {
       if (skipped != dataSpec.position) {
         // We expect the skip to be satisfied in full. If it isn't then we're probably trying to
         // skip beyond the end of the data.
-        throw new EOFException();
+        throw new DataSourceException(DataSourceException.POSITION_OUT_OF_RANGE);
       }
       if (dataSpec.length != C.LENGTH_UNSET) {
         bytesRemaining = dataSpec.length;
@@ -96,13 +96,13 @@ public long open(DataSpec dataSpec) throws ContentDataSourceException {
           } else {
             bytesRemaining = channelSize - channel.position();
             if (bytesRemaining < 0) {
-              throw new EOFException();
+              throw new DataSourceException(DataSourceException.POSITION_OUT_OF_RANGE);
             }
           }
         } else {
           bytesRemaining = assetFileDescriptorLength - skipped;
           if (bytesRemaining < 0) {
-            throw new EOFException();
+            throw new DataSourceException(DataSourceException.POSITION_OUT_OF_RANGE);
           }
         }
       }

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
Patch:
@@ -23,7 +23,6 @@
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.util.Assertions;
-import java.io.EOFException;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.RandomAccessFile;
@@ -91,7 +90,7 @@ public long open(DataSpec dataSpec) throws FileDataSourceException {
       bytesRemaining = dataSpec.length == C.LENGTH_UNSET ? file.length() - dataSpec.position
           : dataSpec.length;
       if (bytesRemaining < 0) {
-        throw new EOFException();
+        throw new DataSourceException(DataSourceException.POSITION_OUT_OF_RANGE);
       }
     } catch (IOException e) {
       throw new FileDataSourceException(e);

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.java
Patch:
@@ -913,11 +913,12 @@ private void updateNavigation() {
         timeline.getWindow(player.getCurrentWindowIndex(), window);
         boolean isSeekable = window.isSeekable;
         enableSeeking = isSeekable;
-        enablePrevious = isSeekable || !window.isDynamic || player.hasPrevious();
+        enablePrevious = isSeekable || !window.isLive() || player.hasPrevious();
         enableRewind = isSeekable && controlDispatcher.isRewindEnabled();
         enableFastForward = isSeekable && controlDispatcher.isFastForwardEnabled();
         enableNext =
-            window.isLive() || player.isCommandAvailable(Player.COMMAND_SEEK_TO_NEXT_MEDIA_ITEM);
+            (window.isLive() && window.isDynamic)
+                || player.isCommandAvailable(Player.COMMAND_SEEK_TO_NEXT_MEDIA_ITEM);
       }
     }
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -1141,11 +1141,12 @@ private void updateNavigation() {
         timeline.getWindow(player.getCurrentWindowIndex(), window);
         boolean isSeekable = window.isSeekable;
         enableSeeking = isSeekable;
-        enablePrevious = isSeekable || !window.isDynamic || player.hasPrevious();
+        enablePrevious = isSeekable || !window.isLive() || player.hasPrevious();
         enableRewind = isSeekable && controlDispatcher.isRewindEnabled();
         enableFastForward = isSeekable && controlDispatcher.isFastForwardEnabled();
         enableNext =
-            window.isLive() || player.isCommandAvailable(Player.COMMAND_SEEK_TO_NEXT_MEDIA_ITEM);
+            (window.isLive() && window.isDynamic)
+                || player.isCommandAvailable(Player.COMMAND_SEEK_TO_NEXT_MEDIA_ITEM);
       }
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSchemeDataSource.java
Patch:
@@ -69,7 +69,7 @@ public long open(DataSpec dataSpec) throws IOException {
     }
     endPosition =
         dataSpec.length != C.LENGTH_UNSET ? (int) dataSpec.length + readPosition : data.length;
-    if (endPosition > data.length || readPosition > endPosition) {
+    if (readPosition >= endPosition) {
       data = null;
       throw new DataSourceException(DataSourceException.POSITION_OUT_OF_RANGE);
     }

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CacheWriterTest.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.MockitoAnnotations;
@@ -174,6 +175,7 @@ public void cacheUnknownLengthPartialCaching() throws Exception {
     assertCachedData(cache, fakeDataSet);
   }
 
+  @Ignore("Currently broken. See https://github.com/google/ExoPlayer/issues/7326.")
   @Test
   public void cacheLengthExceedsActualDataLength() throws Exception {
     FakeDataSet fakeDataSet = new FakeDataSet().setRandomData("test_data", 100);

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeDataSource.java
Patch:
@@ -117,11 +117,10 @@ public final long open(DataSpec dataSpec) throws IOException {
       throw new IOException("Data is empty: " + dataSpec.uri);
     }
 
-    // If the source knows that the request is unsatisfiable then fail.
-    if (dataSpec.position >= totalLength || (dataSpec.length != C.LENGTH_UNSET
-        && (dataSpec.position + dataSpec.length > totalLength))) {
+    if (dataSpec.position >= totalLength) {
       throw new DataSourceException(DataSourceException.POSITION_OUT_OF_RANGE);
     }
+
     // Scan through the segments, configuring them for the current read.
     boolean findingCurrentSegmentIndex = true;
     currentSegmentIndex = 0;

File: testutils/src/test/java/com/google/android/exoplayer2/testutil/FakeDataSourceTest.java
Patch:
@@ -188,7 +188,7 @@ public void testRunnable() throws IOException {
   }
 
   @Test
-  public void testOpenSourceFailures() throws IOException {
+  public void testOpenSourceFailures() {
     // Empty data.
     FakeDataSource dataSource =
         new FakeDataSource(new FakeDataSet().newData(uri.toString()).endData());
@@ -217,10 +217,10 @@ public void testOpenSourceFailures() throws IOException {
         new FakeDataSource(
             new FakeDataSet()
                 .newDefaultData()
-                .appendReadData(TestUtil.buildTestData(10))
+                .appendReadData(TestUtil.buildTestData(/* length= */ 10))
                 .endData());
     try {
-      dataSource.open(new DataSpec(uri, 5, 10));
+      dataSource.open(new DataSpec(uri, /* position= */ 10, C.LENGTH_UNSET));
       fail("IOException expected.");
     } catch (IOException e) {
       // Expected.

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdTagLoader.java
Patch:
@@ -826,7 +826,7 @@ private void handleTimelineOrPositionChanged() {
       ensureSentContentCompleteIfAtEndOfStream();
       if (!sentContentComplete && !timeline.isEmpty()) {
         long positionMs = getContentPeriodPositionMs(player, timeline, period);
-        timeline.getPeriod(/* periodIndex= */ 0, period);
+        timeline.getPeriod(player.getCurrentPeriodIndex(), period);
         int newAdGroupIndex = period.getAdGroupIndexForPositionUs(C.msToUs(positionMs));
         if (newAdGroupIndex != C.INDEX_UNSET) {
           sentPendingContentPositionMs = false;

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -2140,7 +2140,6 @@ public void onAudioDisabled(DecoderCounters counters) {
       analyticsCollector.onAudioDisabled(counters);
       audioFormat = null;
       audioDecoderCounters = null;
-      audioSessionId = C.AUDIO_SESSION_ID_UNSET;
     }
 
     @Override

File: library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
Patch:
@@ -49,6 +49,7 @@
 import com.google.android.exoplayer2.mediacodec.MediaCodecSelector;
 import com.google.android.exoplayer2.mediacodec.MediaCodecUtil;
 import com.google.android.exoplayer2.mediacodec.MediaCodecUtil.DecoderQueryException;
+import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.MediaClock;
 import com.google.android.exoplayer2.util.MediaFormatUtil;
 import com.google.android.exoplayer2.util.MimeTypes;
@@ -416,6 +417,7 @@ protected void onCodecReleased(String name) {
 
   @Override
   protected void onCodecError(Exception codecError) {
+    Log.e(TAG, "Audio codec error", codecError);
     eventDispatcher.audioCodecError(codecError);
   }
 
@@ -853,6 +855,7 @@ public void onOffloadBufferFull(long bufferEmptyingDeadlineMs) {
 
     @Override
     public void onAudioSinkError(Exception audioSinkError) {
+      Log.e(TAG, "Audio sink error", audioSinkError);
       eventDispatcher.audioSinkError(audioSinkError);
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSession.java
Patch:
@@ -446,7 +446,6 @@ private boolean restoreKeys() {
       mediaDrm.restoreKeys(sessionId, offlineLicenseKeySetId);
       return true;
     } catch (Exception e) {
-      Log.e(TAG, "Error trying to restore keys.", e);
       onError(e);
     }
     return false;
@@ -522,6 +521,7 @@ private void onKeysError(Exception e) {
 
   private void onError(final Exception e) {
     lastException = new DrmSessionException(e);
+    Log.e(TAG, "DRM session error", e);
     dispatchEvent(eventDispatcher -> eventDispatcher.drmSessionManagerError(e));
     if (state != STATE_OPENED_WITH_KEYS) {
       state = STATE_ERROR;

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
Patch:
@@ -489,6 +489,7 @@ public DrmSession acquireSession(
       schemeDatas = getSchemeDatas(Assertions.checkNotNull(format.drmInitData), uuid, false);
       if (schemeDatas.isEmpty()) {
         final MissingSchemeDataException error = new MissingSchemeDataException(uuid);
+        Log.e(TAG, "DRM error", error);
         if (eventDispatcher != null) {
           eventDispatcher.drmSessionManagerError(error);
         }

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/Loader.java
Patch:
@@ -435,24 +435,24 @@ public void run() {
         }
       } catch (Exception e) {
         // This should never happen, but handle it anyway.
-        Log.e(TAG, "Unexpected exception loading stream", e);
         if (!released) {
+          Log.e(TAG, "Unexpected exception loading stream", e);
           obtainMessage(MSG_IO_EXCEPTION, new UnexpectedLoaderException(e)).sendToTarget();
         }
       } catch (OutOfMemoryError e) {
         // This can occur if a stream is malformed in a way that causes an extractor to think it
         // needs to allocate a large amount of memory. We don't want the process to die in this
         // case, but we do want the playback to fail.
-        Log.e(TAG, "OutOfMemory error loading stream", e);
         if (!released) {
+          Log.e(TAG, "OutOfMemory error loading stream", e);
           obtainMessage(MSG_IO_EXCEPTION, new UnexpectedLoaderException(e)).sendToTarget();
         }
       } catch (Error e) {
         // We'd hope that the platform would shut down the process if an Error is thrown here, but
         // the executor may catch the error (b/20616433). Throw it here, but also pass and throw it
         // from the handler thread so the process dies even if the executor behaves in this way.
-        Log.e(TAG, "Unexpected error loading stream", e);
         if (!released) {
+          Log.e(TAG, "Unexpected error loading stream", e);
           obtainMessage(MSG_FATAL_ERROR, e).sendToTarget();
         }
         throw e;

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -692,6 +692,7 @@ protected void onCodecReleased(String name) {
 
   @Override
   protected void onCodecError(Exception codecError) {
+    Log.e(TAG, "Video codec error", codecError);
     eventDispatcher.videoCodecError(codecError);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsListener.java
Patch:
@@ -854,8 +854,9 @@ default void onSkipSilenceEnabledChanged(EventTime eventTime, boolean skipSilenc
    * wishes to do so.
    *
    * @param eventTime The event time.
-   * @param audioSinkError Either a {@link AudioSink.InitializationException} or a {@link
-   *     AudioSink.WriteException} describing the error.
+   * @param audioSinkError The error that occurred. Typically an {@link
+   *     AudioSink.InitializationException}, a {@link AudioSink.WriteException}, or an {@link
+   *     AudioSink.UnexpectedDiscontinuityException}.
    */
   default void onAudioSinkError(EventTime eventTime, Exception audioSinkError) {}
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioRendererEventListener.java
Patch:
@@ -144,7 +144,8 @@ default void onAudioCodecError(Exception audioCodecError) {}
    * wishes to do so.
    *
    * @param audioSinkError The error that occurred. Typically an {@link
-   *     AudioSink.InitializationException} or a {@link AudioSink.WriteException}.
+   *     AudioSink.InitializationException}, a {@link AudioSink.WriteException}, or an {@link
+   *     AudioSink.UnexpectedDiscontinuityException}.
    */
   default void onAudioSinkError(Exception audioSinkError) {}
 

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdTagLoader.java
Patch:
@@ -826,7 +826,7 @@ private void handleTimelineOrPositionChanged() {
       ensureSentContentCompleteIfAtEndOfStream();
       if (!sentContentComplete && !timeline.isEmpty()) {
         long positionMs = getContentPeriodPositionMs(player, timeline, period);
-        timeline.getPeriod(/* periodIndex= */ 0, period);
+        timeline.getPeriod(player.getCurrentPeriodIndex(), period);
         int newAdGroupIndex = period.getAdGroupIndexForPositionUs(C.msToUs(positionMs));
         if (newAdGroupIndex != C.INDEX_UNSET) {
           sentPendingContentPositionMs = false;

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -2140,7 +2140,6 @@ public void onAudioDisabled(DecoderCounters counters) {
       analyticsCollector.onAudioDisabled(counters);
       audioFormat = null;
       audioDecoderCounters = null;
-      audioSessionId = C.AUDIO_SESSION_ID_UNSET;
     }
 
     @Override

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManagerProvider.java
Patch:
@@ -31,7 +31,6 @@
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /** Default implementation of {@link DrmSessionManagerProvider}. */
-@RequiresApi(18)
 public final class DefaultDrmSessionManagerProvider implements DrmSessionManagerProvider {
 
   private final Object lock;
@@ -92,6 +91,7 @@ public DrmSessionManager get(MediaItem mediaItem) {
     }
   }
 
+  @RequiresApi(18)
   private DrmSessionManager createManager(MediaItem.DrmConfiguration drmConfiguration) {
     HttpDataSource.Factory dataSourceFactory =
         drmHttpDataSourceFactory != null

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManagerProvider.java
Patch:
@@ -31,7 +31,6 @@
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /** Default implementation of {@link DrmSessionManagerProvider}. */
-@RequiresApi(18)
 public final class DefaultDrmSessionManagerProvider implements DrmSessionManagerProvider {
 
   private final Object lock;
@@ -92,6 +91,7 @@ public DrmSessionManager get(MediaItem mediaItem) {
     }
   }
 
+  @RequiresApi(18)
   private DrmSessionManager createManager(MediaItem.DrmConfiguration drmConfiguration) {
     HttpDataSource.Factory dataSourceFactory =
         drmHttpDataSourceFactory != null

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/Period.java
Patch:
@@ -30,9 +30,7 @@ public class Period {
    */
   @Nullable public final String id;
 
-  /**
-   * The start time of the period in milliseconds.
-   */
+  /** The start time of the period in milliseconds, relative to the start of the manifest. */
   public final long startMs;
 
   /**

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.java
Patch:
@@ -916,7 +916,7 @@ private void updateNavigation() {
         enablePrevious = isSeekable || !window.isDynamic || player.hasPrevious();
         enableRewind = isSeekable && controlDispatcher.isRewindEnabled();
         enableFastForward = isSeekable && controlDispatcher.isFastForwardEnabled();
-        enableNext = window.isDynamic || player.hasNext();
+        enableNext = window.isLive() || player.hasNext();
       }
     }
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -1144,7 +1144,7 @@ private void updateNavigation() {
         enablePrevious = isSeekable || !window.isDynamic || player.hasPrevious();
         enableRewind = isSeekable && controlDispatcher.isRewindEnabled();
         enableFastForward = isSeekable && controlDispatcher.isFastForwardEnabled();
-        enableNext = window.isDynamic || player.hasNext();
+        enableNext = window.isLive() || player.hasNext();
       }
     }
 

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -51,10 +51,10 @@
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
 import com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo;
 import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
-import com.google.android.exoplayer2.ui.DebugTextViewHelper;
 import com.google.android.exoplayer2.ui.StyledPlayerControlView;
 import com.google.android.exoplayer2.ui.StyledPlayerView;
 import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.util.DebugTextViewHelper;
 import com.google.android.exoplayer2.util.ErrorMessageProvider;
 import com.google.android.exoplayer2.util.EventLogger;
 import com.google.android.exoplayer2.util.Util;

File: library/core/src/main/java/com/google/android/exoplayer2/util/DebugTextViewHelper.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.android.exoplayer2.ui;
+package com.google.android.exoplayer2.util;
 
 import android.annotation.SuppressLint;
 import android.os.Looper;
@@ -22,7 +22,6 @@
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.SimpleExoPlayer;
 import com.google.android.exoplayer2.decoder.DecoderCounters;
-import com.google.android.exoplayer2.util.Assertions;
 import java.util.Locale;
 
 /**

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/Period.java
Patch:
@@ -30,9 +30,7 @@ public class Period {
    */
   @Nullable public final String id;
 
-  /**
-   * The start time of the period in milliseconds.
-   */
+  /** The start time of the period in milliseconds, relative to the start of the manifest. */
   public final long startMs;
 
   /**

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -538,7 +538,7 @@ public static Looper getCurrentOrMainLooper() {
    * @param threadName The name of the thread.
    * @return The executor.
    */
-  public static ExecutorService newSingleThreadExecutor(final String threadName) {
+  public static ExecutorService newSingleThreadExecutor(String threadName) {
     return Executors.newSingleThreadExecutor(runnable -> new Thread(runnable, threadName));
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaPeriod.java
Patch:
@@ -187,7 +187,7 @@ public ProgressiveMediaPeriod(
     this.allocator = allocator;
     this.customCacheKey = customCacheKey;
     this.continueLoadingCheckIntervalBytes = continueLoadingCheckIntervalBytes;
-    loader = new Loader("Loader:ProgressiveMediaPeriod");
+    loader = new Loader("ProgressiveMediaPeriod");
     this.progressiveMediaExtractor = new BundledExtractorsAdapter(extractorsFactory);
     loadCondition = new ConditionVariable();
     maybeFinishPrepareRunnable = this::maybeFinishPrepare;

File: library/core/src/main/java/com/google/android/exoplayer2/source/SingleSampleMediaPeriod.java
Patch:
@@ -88,7 +88,7 @@ public SingleSampleMediaPeriod(
     this.treatLoadErrorsAsEndOfStream = treatLoadErrorsAsEndOfStream;
     tracks = new TrackGroupArray(new TrackGroup(format));
     sampleStreams = new ArrayList<>();
-    loader = new Loader("Loader:SingleSampleMediaPeriod");
+    loader = new Loader("SingleSampleMediaPeriod");
   }
 
   public void release() {

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/ChunkSampleStream.java
Patch:
@@ -133,7 +133,7 @@ public ChunkSampleStream(
     this.callback = callback;
     this.mediaSourceEventDispatcher = mediaSourceEventDispatcher;
     this.loadErrorHandlingPolicy = loadErrorHandlingPolicy;
-    loader = new Loader("Loader:ChunkSampleStream");
+    loader = new Loader("ChunkSampleStream");
     nextChunkHolder = new ChunkHolder();
     mediaChunks = new ArrayList<>();
     readOnlyMediaChunks = Collections.unmodifiableList(mediaChunks);

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -7392,7 +7392,7 @@ protected MediaPeriod createMediaPeriod(
                 drmSessionManager,
                 drmEventDispatcher,
                 /* deferOnPrepared= */ false) {
-              private Loader loader = new Loader("oomLoader");
+              private final Loader loader = new Loader("ExoPlayerTest");
 
               @Override
               public boolean continueLoading(long positionUs) {

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
Patch:
@@ -562,7 +562,7 @@ protected void prepareSourceInternal(@Nullable TransferListener mediaTransferLis
       processManifest(false);
     } else {
       dataSource = manifestDataSourceFactory.createDataSource();
-      loader = new Loader("Loader:DashMediaSource");
+      loader = new Loader("DashMediaSource");
       handler = Util.createHandlerForCurrentLooper();
       startLoadingManifest();
     }

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/SsMediaSource.java
Patch:
@@ -451,7 +451,7 @@ protected void prepareSourceInternal(@Nullable TransferListener mediaTransferLis
       processManifest();
     } else {
       manifestDataSource = manifestDataSourceFactory.createDataSource();
-      manifestLoader = new Loader("Loader:Manifest");
+      manifestLoader = new Loader("SsMediaSource");
       manifestLoaderErrorThrower = manifestLoader;
       manifestRefreshHandler = Util.createHandlerForCurrentLooper();
       startLoadingManifest();

File: extensions/mediasession/src/main/java/com/google/android/exoplayer2/ext/mediasession/MediaSessionConnector.java
Patch:
@@ -49,7 +49,6 @@
 import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.ErrorMessageProvider;
-import com.google.android.exoplayer2.util.RepeatModeUtil;
 import com.google.android.exoplayer2.util.Util;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -1220,7 +1219,7 @@ public void onSetShuffleMode(@PlaybackStateCompat.ShuffleMode int shuffleMode) {
     @Override
     public void onSetRepeatMode(@PlaybackStateCompat.RepeatMode int mediaSessionRepeatMode) {
       if (canDispatchPlaybackAction(PlaybackStateCompat.ACTION_SET_REPEAT_MODE)) {
-        @RepeatModeUtil.RepeatToggleModes int repeatMode;
+        @Player.RepeatMode int repeatMode;
         switch (mediaSessionRepeatMode) {
           case PlaybackStateCompat.REPEAT_MODE_ALL:
           case PlaybackStateCompat.REPEAT_MODE_GROUP:

File: library/common/src/main/java/com/google/android/exoplayer2/video/DolbyVisionConfig.java
Patch:
@@ -45,7 +45,7 @@ public static DolbyVisionConfig parse(ParsableByteArray data) {
     } else {
       return null;
     }
-    String codecs = codecsPrefix + ".0" + dvProfile + ".0" + dvLevel;
+    String codecs = codecsPrefix + ".0" + dvProfile + (dvLevel < 10 ? ".0" : ".") + dvLevel;
     return new DolbyVisionConfig(dvProfile, dvLevel, codecs);
   }
 

File: library/common/src/main/java/com/google/android/exoplayer2/video/DolbyVisionConfig.java
Patch:
@@ -45,7 +45,7 @@ public static DolbyVisionConfig parse(ParsableByteArray data) {
     } else {
       return null;
     }
-    String codecs = codecsPrefix + ".0" + dvProfile + ".0" + dvLevel;
+    String codecs = codecsPrefix + ".0" + dvProfile + (dvLevel < 10 ? ".0" : ".") + dvLevel;
     return new DolbyVisionConfig(dvProfile, dvLevel, codecs);
   }
 

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 
+import android.annotation.SuppressLint;
 import android.net.Uri;
 import android.text.TextUtils;
 import androidx.annotation.Nullable;
@@ -143,6 +144,7 @@ private static void addFileTypeIfNotPresent(
     fileTypes.add(fileType);
   }
 
+  @SuppressLint("SwitchIntDef") // HLS only supports a small subset of the defined file types.
   @Nullable
   private Extractor createExtractorByFileType(
       @FileTypes.Type int fileType,

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
 
+import android.annotation.SuppressLint;
 import android.net.Uri;
 import android.text.TextUtils;
 import androidx.annotation.Nullable;
@@ -143,6 +144,7 @@ private static void addFileTypeIfNotPresent(
     fileTypes.add(fileType);
   }
 
+  @SuppressLint("SwitchIntDef") // HLS only supports a small subset of the defined file types.
   @Nullable
   private Extractor createExtractorByFileType(
       @FileTypes.Type int fileType,

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/BandwidthMeter.java
Patch:
@@ -35,7 +35,7 @@ interface EventListener {
      * changed.
      *
      * <p>Note: The estimated bitrate is typically derived from more information than just {@code
-     * bytes} and {@code elapsedMs}.
+     * bytesTransferred} and {@code elapsedMs}.
      *
      * @param elapsedMs The time taken to transfer {@code bytesTransferred}, in milliseconds. This
      *     is at most the elapsed time since the last callback, but may be less if there were

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -624,6 +624,7 @@ private synchronized void waitUninterruptibly(Supplier<Boolean> condition, long
     boolean wasInterrupted = false;
     while (!condition.get() && remainingMs > 0) {
       try {
+        clock.onThreadBlocked();
         wait(remainingMs);
       } catch (InterruptedException e) {
         wasInterrupted = true;

File: library/core/src/main/java/com/google/android/exoplayer2/PlayerMessage.java
Patch:
@@ -341,6 +341,7 @@ public synchronized boolean blockUntilDelivered(long timeoutMs)
     long deadlineMs = clock.elapsedRealtime() + timeoutMs;
     long remainingMs = timeoutMs;
     while (!isProcessed && remainingMs > 0) {
+      clock.onThreadBlocked();
       wait(remainingMs);
       remainingMs = deadlineMs - clock.elapsedRealtime();
     }

File: robolectricutils/src/main/java/com/google/android/exoplayer2/robolectric/TestPlayerRunHelper.java
Patch:
@@ -313,6 +313,7 @@ public static void playUntilPosition(ExoPlayer player, int windowIndex, long pos
                         blockPlaybackThreadCondition.open();
                       });
               try {
+                player.getClock().onThreadBlocked();
                 blockPlaybackThreadCondition.block();
               } catch (InterruptedException e) {
                 // Ignore.

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java
Patch:
@@ -701,6 +701,7 @@ protected void doActionAndScheduleNextImpl(
                           blockPlaybackThreadCondition.open();
                         });
                 try {
+                  player.getClock().onThreadBlocked();
                   blockPlaybackThreadCondition.block();
                 } catch (InterruptedException e) {
                   // Ignore.

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -557,7 +557,7 @@ public boolean handleMessage(Message msg) {
       if (e.isRecoverable && pendingRecoverableError == null) {
         Log.w(TAG, "Recoverable playback error", e);
         pendingRecoverableError = e;
-        Message message = handler.obtainMessage(MSG_ATTEMPT_ERROR_RECOVERY, e);
+        HandlerWrapper.Message message = handler.obtainMessage(MSG_ATTEMPT_ERROR_RECOVERY, e);
         // Given that the player is now in an unhandled exception state, the error needs to be
         // recovered or the player stopped before any other message is handled.
         message.getTarget().sendMessageAtFrontOfQueue(message);

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/BandwidthMeter.java
Patch:
@@ -35,7 +35,7 @@ interface EventListener {
      * changed.
      *
      * <p>Note: The estimated bitrate is typically derived from more information than just {@code
-     * bytes} and {@code elapsedMs}.
+     * bytesTransferred} and {@code elapsedMs}.
      *
      * @param elapsedMs The time taken to transfer {@code bytesTransferred}, in milliseconds. This
      *     is at most the elapsed time since the last callback, but may be less if there were

File: demos/gl/src/main/java/com/google/android/exoplayer2/gldemo/MainActivity.java
Patch:
@@ -152,7 +152,7 @@ private void initializePlayer() {
               .setUuidAndExoMediaDrmProvider(drmSchemeUuid, FrameworkMediaDrm.DEFAULT_PROVIDER)
               .build(drmCallback);
     } else {
-      drmSessionManager = DrmSessionManager.getDummyDrmSessionManager();
+      drmSessionManager = DrmSessionManager.DRM_UNSUPPORTED;
     }
 
     DataSource.Factory dataSourceFactory = new DefaultDataSourceFactory(this);

File: demos/surface/src/main/java/com/google/android/exoplayer2/surfacedemo/MainActivity.java
Patch:
@@ -197,7 +197,7 @@ private void initializePlayer() {
               .setUuidAndExoMediaDrmProvider(drmSchemeUuid, FrameworkMediaDrm.DEFAULT_PROVIDER)
               .build(drmCallback);
     } else {
-      drmSessionManager = DrmSessionManager.getDummyDrmSessionManager();
+      drmSessionManager = DrmSessionManager.DRM_UNSUPPORTED;
     }
 
     DataSource.Factory dataSourceFactory = new DefaultDataSourceFactory(this);

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManagerProvider.java
Patch:
@@ -64,7 +64,7 @@ public DrmSessionManager get(MediaItem mediaItem) {
     @Nullable
     MediaItem.DrmConfiguration drmConfiguration = mediaItem.playbackProperties.drmConfiguration;
     if (drmConfiguration == null || Util.SDK_INT < 18) {
-      return DrmSessionManager.getDummyDrmSessionManager();
+      return DrmSessionManager.DRM_UNSUPPORTED;
     }
     HttpDataSource.Factory dataSourceFactory =
         drmHttpDataSourceFactory != null

File: library/core/src/main/java/com/google/android/exoplayer2/source/ExtractorMediaSource.java
Patch:
@@ -337,7 +337,7 @@ private ExtractorMediaSource(
                 .build(),
             dataSourceFactory,
             extractorsFactory,
-            DrmSessionManager.getDummyDrmSessionManager(),
+            DrmSessionManager.DRM_UNSUPPORTED,
             loadableLoadErrorHandlingPolicy,
             continueLoadingCheckIntervalBytes);
   }

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -7613,15 +7613,15 @@ protected boolean shouldProcessBuffer(long bufferTimeUs, long playbackPositionUs
     FakeMediaSource firstMediaSource =
         new FakeMediaSource(
             /* timeline= */ null,
-            DrmSessionManager.DUMMY,
+            DrmSessionManager.DRM_UNSUPPORTED,
             (unusedFormat, unusedMediaPeriodId) ->
                 ImmutableList.of(
                     oneByteSample(firstSampleTimeUs, C.BUFFER_FLAG_KEY_FRAME), END_OF_STREAM_ITEM),
             ExoPlayerTestRunner.VIDEO_FORMAT);
     FakeMediaSource secondMediaSource =
         new FakeMediaSource(
             timelineWithOffsets,
-            DrmSessionManager.DUMMY,
+            DrmSessionManager.DRM_UNSUPPORTED,
             (unusedFormat, unusedMediaPeriodId) ->
                 ImmutableList.of(
                     oneByteSample(firstSampleTimeUs, C.BUFFER_FLAG_KEY_FRAME), END_OF_STREAM_ITEM),
@@ -8155,7 +8155,7 @@ protected MediaPeriod createMediaPeriod(
                 allocator,
                 /* singleSampleTimeUs= */ 0,
                 mediaSourceEventDispatcher,
-                DrmSessionManager.DUMMY,
+                DrmSessionManager.DRM_UNSUPPORTED,
                 drmEventDispatcher,
                 /* deferOnPrepared= */ true) {
               @Override

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/AnalyticsCollectorTest.java
Patch:
@@ -1005,7 +1005,7 @@ public void adPlayback() throws Exception {
     FakeMediaSource fakeMediaSource =
         new FakeMediaSource(
             adTimeline,
-            DrmSessionManager.DUMMY,
+            DrmSessionManager.DRM_UNSUPPORTED,
             (unusedFormat, mediaPeriodId) -> {
               if (mediaPeriodId.isAd()) {
                 return ImmutableList.of(
@@ -1265,7 +1265,7 @@ public void seekAfterMidroll() throws Exception {
     FakeMediaSource fakeMediaSource =
         new FakeMediaSource(
             adTimeline,
-            DrmSessionManager.DUMMY,
+            DrmSessionManager.DRM_UNSUPPORTED,
             (unusedFormat, mediaPeriodId) -> {
               if (mediaPeriodId.isAd()) {
                 return ImmutableList.of(

File: library/core/src/test/java/com/google/android/exoplayer2/audio/DecoderAudioRendererTest.java
Patch:
@@ -107,7 +107,7 @@ public void immediatelyReadEndOfStreamPlaysAudioSinkToEndOfStream() throws Excep
         new FakeSampleStream(
             new DefaultAllocator(/* trimOnReset= */ true, /* individualAllocationSize= */ 1024),
             /* mediaSourceEventDispatcher= */ null,
-            DrmSessionManager.DUMMY,
+            DrmSessionManager.DRM_UNSUPPORTED,
             new DrmSessionEventListener.EventDispatcher(),
             FORMAT,
             ImmutableList.of(END_OF_STREAM_ITEM));

File: library/core/src/test/java/com/google/android/exoplayer2/audio/MediaCodecAudioRendererTest.java
Patch:
@@ -121,7 +121,7 @@ public void render_configuresAudioSink_afterFormatChange() throws Exception {
         new FakeSampleStream(
             new DefaultAllocator(/* trimOnReset= */ true, /* individualAllocationSize= */ 1024),
             /* mediaSourceEventDispatcher= */ null,
-            DrmSessionManager.DUMMY,
+            DrmSessionManager.DRM_UNSUPPORTED,
             new DrmSessionEventListener.EventDispatcher(),
             /* initialFormat= */ AUDIO_AAC,
             ImmutableList.of(
@@ -178,7 +178,7 @@ public void render_configuresAudioSink_afterGaplessFormatChange() throws Excepti
         new FakeSampleStream(
             new DefaultAllocator(/* trimOnReset= */ true, /* individualAllocationSize= */ 1024),
             /* mediaSourceEventDispatcher= */ null,
-            DrmSessionManager.DUMMY,
+            DrmSessionManager.DRM_UNSUPPORTED,
             new DrmSessionEventListener.EventDispatcher(),
             /* initialFormat= */ AUDIO_AAC,
             ImmutableList.of(
@@ -256,7 +256,7 @@ protected void onOutputFormatChanged(Format format, @Nullable MediaFormat mediaF
         new FakeSampleStream(
             new DefaultAllocator(/* trimOnReset= */ true, /* individualAllocationSize= */ 1024),
             /* mediaSourceEventDispatcher= */ null,
-            DrmSessionManager.DUMMY,
+            DrmSessionManager.DRM_UNSUPPORTED,
             new DrmSessionEventListener.EventDispatcher(),
             /* initialFormat= */ AUDIO_AAC,
             ImmutableList.of(

File: library/core/src/test/java/com/google/android/exoplayer2/metadata/MetadataRendererTest.java
Patch:
@@ -151,7 +151,7 @@ private static List<Metadata> runRenderer(byte[] input) throws ExoPlaybackExcept
         new FakeSampleStream(
             new DefaultAllocator(/* trimOnReset= */ true, /* individualAllocationSize= */ 1024),
             /* mediaSourceEventDispatcher= */ null,
-            DrmSessionManager.DUMMY,
+            DrmSessionManager.DRM_UNSUPPORTED,
             new DrmSessionEventListener.EventDispatcher(),
             EMSG_FORMAT,
             ImmutableList.of(

File: library/core/src/test/java/com/google/android/exoplayer2/source/DefaultDrmSessionManagerProviderTest.java
Patch:
@@ -35,7 +35,7 @@ public void create_noDrmProperties_createsNoopManager() {
     DrmSessionManager drmSessionManager =
         new DefaultDrmSessionManagerProvider().get(MediaItem.fromUri(Uri.EMPTY));
 
-    assertThat(drmSessionManager).isEqualTo(DrmSessionManager.DUMMY);
+    assertThat(drmSessionManager).isEqualTo(DrmSessionManager.DRM_UNSUPPORTED);
   }
 
   @Test
@@ -49,6 +49,6 @@ public void create_createsManager() {
 
     DrmSessionManager drmSessionManager = new DefaultDrmSessionManagerProvider().get(mediaItem);
 
-    assertThat(drmSessionManager).isNotEqualTo(DrmSessionManager.DUMMY);
+    assertThat(drmSessionManager).isNotEqualTo(DrmSessionManager.DRM_UNSUPPORTED);
   }
 }

File: library/core/src/test/java/com/google/android/exoplayer2/source/MergingMediaPeriodTest.java
Patch:
@@ -212,7 +212,7 @@ public FakeMediaPeriodWithSelectTracksPosition(
           new DefaultAllocator(/* trimOnReset= */ false, /* individualAllocationSize= */ 1024),
           trackDataFactory,
           mediaSourceEventDispatcher,
-          DrmSessionManager.DUMMY,
+          DrmSessionManager.DRM_UNSUPPORTED,
           new DrmSessionEventListener.EventDispatcher(),
           /* deferOnPrepared= */ false);
       selectTracksPositionUs = C.TIME_UNSET;

File: library/core/src/test/java/com/google/android/exoplayer2/source/ProgressiveMediaPeriodTest.java
Patch:
@@ -49,7 +49,7 @@ public void prepare_updatesSourceInfoBeforeOnPreparedCallback() throws Exception
             Uri.parse("asset://android_asset/media/mp4/sample.mp4"),
             new AssetDataSource(ApplicationProvider.getApplicationContext()),
             () -> new Extractor[] {new Mp4Extractor()},
-            DrmSessionManager.DUMMY,
+            DrmSessionManager.DRM_UNSUPPORTED,
             new DrmSessionEventListener.EventDispatcher()
                 .withParameters(/* windowIndex= */ 0, mediaPeriodId),
             new DefaultLoadErrorHandlingPolicy(),

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DashMediaPeriodTest.java
Patch:
@@ -201,7 +201,7 @@ private static DashMediaPeriod createDashMediaPeriod(DashManifest manifest, int
         periodIndex,
         mock(DashChunkSource.Factory.class),
         mock(TransferListener.class),
-        DrmSessionManager.getDummyDrmSessionManager(),
+        DrmSessionManager.DRM_UNSUPPORTED,
         new DrmSessionEventListener.EventDispatcher()
             .withParameters(/* windowIndex= */ 0, mediaPeriodId),
         mock(LoadErrorHandlingPolicy.class),

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadHelperTest.java
Patch:
@@ -42,6 +42,6 @@ public void staticDownloadHelperForDash_doesNotThrow() {
         DownloadHelper.DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_CONTEXT,
         (handler, videoListener, audioListener, text, metadata) -> new Renderer[0],
         new FakeDataSource.Factory(),
-        /* drmSessionManager= */ DrmSessionManager.getDummyDrmSessionManager());
+        /* drmSessionManager= */ DrmSessionManager.DRM_UNSUPPORTED);
   }
 }

File: playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashTestRunner.java
Patch:
@@ -260,7 +260,7 @@ protected DefaultTrackSelector buildTrackSelector(HostActivity host) {
     @Override
     protected DrmSessionManager buildDrmSessionManager() {
       if (widevineLicenseUrl == null) {
-        return DrmSessionManager.getDummyDrmSessionManager();
+        return DrmSessionManager.DRM_UNSUPPORTED;
       }
       MediaDrmCallback drmCallback =
           new HttpMediaDrmCallback(widevineLicenseUrl, new DefaultHttpDataSourceFactory());

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoHostedTest.java
Patch:
@@ -227,7 +227,7 @@ private boolean stopTest() {
 
   protected DrmSessionManager buildDrmSessionManager() {
     // Do nothing. Interested subclasses may override.
-    return DrmSessionManager.getDummyDrmSessionManager();
+    return DrmSessionManager.DRM_UNSUPPORTED;
   }
 
   protected DefaultTrackSelector buildTrackSelector(HostActivity host) {

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeAdaptiveMediaPeriod.java
Patch:
@@ -175,7 +175,7 @@ public long selectTracks(
                 /* callback= */ this,
                 allocator,
                 positionUs,
-                DrmSessionManager.DUMMY,
+                DrmSessionManager.DRM_UNSUPPORTED,
                 new DrmSessionEventListener.EventDispatcher(),
                 new DefaultLoadErrorHandlingPolicy(/* minimumLoadableRetryCount= */ 3),
                 mediaSourceEventDispatcher);

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeAdaptiveMediaSource.java
Patch:
@@ -42,7 +42,7 @@ public FakeAdaptiveMediaSource(
       FakeChunkSource.Factory chunkSourceFactory) {
     super(
         timeline,
-        DrmSessionManager.DUMMY,
+        DrmSessionManager.DRM_UNSUPPORTED,
         /* trackDataFactory= */ (unusedFormat, unusedMediaPeriodId) -> {
           throw new RuntimeException("Unused TrackDataFactory");
         },

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaPeriod.java
Patch:
@@ -116,7 +116,7 @@ public FakeMediaPeriod(
         allocator,
         TrackDataFactory.singleSampleWithTimeUs(singleSampleTimeUs),
         mediaSourceEventDispatcher,
-        DrmSessionManager.DUMMY,
+        DrmSessionManager.DRM_UNSUPPORTED,
         new DrmSessionEventListener.EventDispatcher(),
         /* deferOnPrepared */ false);
   }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSource.java
Patch:
@@ -104,7 +104,7 @@ public FakeMediaSource() {
    * can be manually set later using {@link #setNewSourceInfo(Timeline)}.
    */
   public FakeMediaSource(@Nullable Timeline timeline, Format... formats) {
-    this(timeline, DrmSessionManager.DUMMY, formats);
+    this(timeline, DrmSessionManager.DRM_UNSUPPORTED, formats);
   }
 
   /**

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
Patch:
@@ -295,7 +295,7 @@ public DashMediaSource createMediaSource(DashManifest manifest) {
           manifest,
           new MediaItem.Builder()
               .setUri(Uri.EMPTY)
-              .setMediaId(DUMMY_MEDIA_ID)
+              .setMediaId(DEFAULT_MEDIA_ID)
               .setMimeType(MimeTypes.APPLICATION_MPD)
               .setStreamKeys(streamKeys)
               .setTag(tag)
@@ -427,8 +427,7 @@ public int[] getSupportedTypes() {
   /** @deprecated Use {@link #DEFAULT_FALLBACK_TARGET_LIVE_OFFSET_MS} instead. */
   @Deprecated public static final long DEFAULT_LIVE_PRESENTATION_DELAY_MS = 30_000;
   /** The media id used by media items of dash media sources without a manifest URI. */
-  public static final String DUMMY_MEDIA_ID =
-      "com.google.android.exoplayer2.source.dash.DashMediaSource";
+  public static final String DEFAULT_MEDIA_ID = "DashMediaSource";
 
   /**
    * The interval in milliseconds between invocations of {@link

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -2189,7 +2189,7 @@ public static int getNetworkType(Context context) {
         return getMobileNetworkType(networkInfo);
       case ConnectivityManager.TYPE_ETHERNET:
         return C.NETWORK_TYPE_ETHERNET;
-      default: // VPN, Bluetooth, Dummy.
+      default:
         return C.NETWORK_TYPE_OTHER;
     }
   }
@@ -2620,7 +2620,7 @@ private static String maybeReplaceLegacyLanguageTags(String languageTag) {
         "hsn", "zh-hsn"
       };
 
-  // Legacy ("grandfathered") tags, replaced by modern equivalents (including macrolanguage)
+  // Legacy tags that have been replaced by modern equivalents (including macrolanguage)
   // See https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry.
   private static final String[] isoLegacyTagReplacements =
       new String[] {

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/C2Mp3TimestampTracker.java
Patch:
@@ -30,7 +30,7 @@
 /* package */ final class C2Mp3TimestampTracker {
 
   // Mirroring the actual codec, as can be found at
-  // https://cs.android.com/android/platform/superproject/+/master:frameworks/av/media/codec2/components/mp3/C2SoftMp3Dec.h;l=55;drc=3665390c9d32a917398b240c5a46ced07a3b65eb
+  // https://cs.android.com/android/platform/superproject/+/main:frameworks/av/media/codec2/components/mp3/C2SoftMp3Dec.h;l=55;drc=3665390c9d32a917398b240c5a46ced07a3b65eb
   private static final long DECODER_DELAY_SAMPLES = 529;
   private static final String TAG = "C2Mp3TimestampTracker";
 
@@ -76,7 +76,7 @@ public long updateAndGetPresentationTimeUs(Format format, DecoderInputBuffer buf
     }
 
     // These calculations mirror the timestamp calculations in the Codec2 Mp3 Decoder.
-    // https://cs.android.com/android/platform/superproject/+/master:frameworks/av/media/codec2/components/mp3/C2SoftMp3Dec.cpp;l=464;drc=ed134640332fea70ca4b05694289d91a5265bb46
+    // https://cs.android.com/android/platform/superproject/+/main:frameworks/av/media/codec2/components/mp3/C2SoftMp3Dec.cpp;l=464;drc=ed134640332fea70ca4b05694289d91a5265bb46
     if (processedSamples == 0) {
       anchorTimestampUs = buffer.timeUs;
       processedSamples = frameCount - DECODER_DELAY_SAMPLES;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeaderReader.java
Patch:
@@ -115,7 +115,7 @@ public static Pair<Long, Long> skipToData(ExtractorInput input) throws IOExcepti
     input.resetPeekPosition();
 
     ParsableByteArray scratch = new ParsableByteArray(ChunkHeader.SIZE_IN_BYTES);
-    // Skip all chunks until we hit the data header.
+    // Skip all chunks until we find the data header.
     ChunkHeader chunkHeader = ChunkHeader.peek(input, scratch);
     while (chunkHeader.id != WavUtil.DATA_FOURCC) {
       if (chunkHeader.id != WavUtil.RIFF_FOURCC && chunkHeader.id != WavUtil.FMT_FOURCC) {

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExoMediaDrm.java
Patch:
@@ -60,7 +60,7 @@
 @RequiresApi(29)
 public final class FakeExoMediaDrm implements ExoMediaDrm {
 
-  public static final ProvisionRequest DUMMY_PROVISION_REQUEST =
+  public static final ProvisionRequest FAKE_PROVISION_REQUEST =
       new ProvisionRequest(TestUtil.createByteArray(7, 8, 9), "bar.test");
 
   /** Key for use with the Map returned from {@link FakeExoMediaDrm#queryKeyStatus(byte[])}. */
@@ -192,7 +192,7 @@ public byte[] provideKeyResponse(byte[] scope, byte[] response)
   @Override
   public ProvisionRequest getProvisionRequest() {
     Assertions.checkState(referenceCount > 0);
-    return DUMMY_PROVISION_REQUEST;
+    return FAKE_PROVISION_REQUEST;
   }
 
   @Override

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTimeline.java
Patch:
@@ -58,7 +58,7 @@ public static final class TimelineWindowDefinition {
      *
      * @param tag The tag to use in the timeline.
      */
-    public static TimelineWindowDefinition createDummy(Object tag) {
+    public static TimelineWindowDefinition createPlaceholder(Object tag) {
       return new TimelineWindowDefinition(
           /* periodCount= */ 1,
           /* id= */ tag,

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -847,7 +847,7 @@ private TrackSelectorResult runTrackSelection(int periodIndex) {
               new MediaPeriodId(mediaPreparer.timeline.getUidOfPeriod(periodIndex)),
               mediaPreparer.timeline);
       for (int i = 0; i < trackSelectorResult.length; i++) {
-        @Nullable TrackSelection newSelection = trackSelectorResult.selections.get(i);
+        @Nullable TrackSelection newSelection = trackSelectorResult.selections[i];
         if (newSelection == null) {
           continue;
         }

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DrmSessionManagerProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 The Android Open Source Project
+ * Copyright 2021 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -2045,8 +2045,6 @@ private static boolean shouldEscapeCharacter(char c) {
 
   /** Returns a data URI with the specified MIME type and data. */
   public static Uri getDataUriForString(String mimeType, String data) {
-    // TODO(internal: b/169937045): For now we don't pass the URL_SAFE flag as DataSchemeDataSource
-    // doesn't decode using it.
     return Uri.parse(
         "data:" + mimeType + ";base64," + Base64.encodeToString(data.getBytes(), Base64.NO_WRAP));
   }

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSchemeDataSource.java
Patch:
@@ -59,7 +59,6 @@ public long open(DataSpec dataSpec) throws IOException {
     String dataString = uriParts[1];
     if (uriParts[0].contains(";base64")) {
       try {
-        // TODO(internal: b/169937045): Consider passing Base64.URL_SAFE flag.
         data = Base64.decode(dataString, /* flags= */ Base64.DEFAULT);
       } catch (IllegalArgumentException e) {
         throw new ParserException("Error while parsing Base64 encoded string: " + dataString, e);

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/SimpleCache.java
Patch:
@@ -837,7 +837,8 @@ private static long parseUid(String fileName) {
   }
 
   private static void createCacheDirectories(File cacheDir) throws CacheException {
-    if (!cacheDir.mkdirs()) {
+    // If mkdirs() returns false, double check that the directory doesn't exist before throwing.
+    if (!cacheDir.mkdirs() && !cacheDir.isDirectory()) {
       String message = "Failed to create cache directory: " + cacheDir;
       Log.e(TAG, message);
       throw new CacheException(message);

File: library/core/src/main/java/com/google/android/exoplayer2/source/SingleSampleMediaSource.java
Patch:
@@ -55,6 +55,7 @@ public static final class Factory {
     public Factory(DataSource.Factory dataSourceFactory) {
       this.dataSourceFactory = checkNotNull(dataSourceFactory);
       loadErrorHandlingPolicy = new DefaultLoadErrorHandlingPolicy();
+      treatLoadErrorsAsEndOfStream = true;
     }
 
     /**
@@ -118,7 +119,7 @@ public Factory setLoadErrorHandlingPolicy(
 
     /**
      * Sets whether load errors will be treated as end-of-stream signal (load errors will not be
-     * propagated). The default value is false.
+     * propagated). The default value is true.
      *
      * @param treatLoadErrorsAsEndOfStream If true, load errors will not be propagated by sample
      *     streams, treating them as ended instead. If false, load errors will be propagated

File: robolectricutils/src/main/java/com/google/android/exoplayer2/robolectric/ShadowMediaCodecConfig.java
Patch:
@@ -17,6 +17,7 @@
 
 import android.media.MediaCodecInfo;
 import android.media.MediaFormat;
+import com.google.android.exoplayer2.mediacodec.MediaCodecUtil;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.common.collect.ImmutableList;
 import com.google.common.primitives.Ints;
@@ -81,6 +82,7 @@ protected void before() throws Throwable {
 
   @Override
   protected void after() {
+    MediaCodecUtil.clearDecoderInfoCache();
     ShadowMediaCodecList.reset();
     ShadowMediaCodec.clearCodecs();
   }

File: library/core/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -89,7 +89,7 @@ interface AudioComponent {
      * default audio attributes will be used. They are suitable for general media playback.
      *
      * <p>Setting the audio attributes during playback may introduce a short gap in audio output as
-     * the audio track is recreated. A new audio session id will also be generated.
+     * the audio track is recreated.
      *
      * <p>If tunneling is enabled by the track selector, the specified audio attributes will be
      * ignored, but they will take effect if audio is later played without tunneling.

File: library/core/src/main/java/com/google/android/exoplayer2/audio/ForwardingAudioSink.java
Patch:
@@ -124,8 +124,8 @@ public void setAuxEffectInfo(AuxEffectInfo auxEffectInfo) {
   }
 
   @Override
-  public void enableTunnelingV21(int tunnelingAudioSessionId) {
-    sink.enableTunnelingV21(tunnelingAudioSessionId);
+  public void enableTunnelingV21() {
+    sink.enableTunnelingV21();
   }
 
   @Override

File: library/core/src/test/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelectorTest.java
Patch:
@@ -1683,7 +1683,7 @@ private static Parameters buildParametersForEqualsTest() {
         /* forceLowestBitrate= */ false,
         /* forceHighestSupportedBitrate= */ true,
         /* exceedRendererCapabilitiesIfNecessary= */ false,
-        /* tunnelingAudioSessionId= */ 13,
+        /* tunnelingEnabled= */ true,
         /* allowMultipleAdaptiveSelections= */ true,
         // Overrides
         selectionOverrides,

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -2061,11 +2061,11 @@ private void setVideoSurfaceInternal(@Nullable Surface surface, boolean ownsSurf
       } catch (InterruptedException e) {
         Thread.currentThread().interrupt();
       } catch (TimeoutException e) {
+        // One of the renderers timed out releasing its resources.
         player.stop(
             /* reset= */ false,
-            ExoPlaybackException.createForTimeout(
-                new TimeoutException("Detaching surface timed out."),
-                ExoPlaybackException.TIMEOUT_OPERATION_DETACH_SURFACE));
+            ExoPlaybackException.createForRenderer(
+                new ExoTimeoutException(ExoTimeoutException.TIMEOUT_OPERATION_DETACH_SURFACE)));
       }
       // If we created the previous surface, we are responsible for releasing it.
       if (this.ownsSurface) {

File: library/core/src/main/java/com/google/android/exoplayer2/BaseRenderer.java
Patch:
@@ -340,7 +340,7 @@ protected final int getIndex() {
    * @param format The current format used by the renderer. May be null.
    */
   protected final ExoPlaybackException createRendererException(
-      Exception cause, @Nullable Format format) {
+      Throwable cause, @Nullable Format format) {
     return createRendererException(cause, format, /* isRecoverable= */ false);
   }
 
@@ -353,7 +353,7 @@ protected final ExoPlaybackException createRendererException(
    * @param isRecoverable If the error is recoverable by disabling and re-enabling the renderer.
    */
   protected final ExoPlaybackException createRendererException(
-      Exception cause, @Nullable Format format, boolean isRecoverable) {
+      Throwable cause, @Nullable Format format, boolean isRecoverable) {
     @C.FormatSupport int formatSupport = C.FORMAT_HANDLED;
     if (format != null && !throwRendererExceptionIsExecuting) {
       // Prevent recursive re-entry from subclass supportsFormat implementations.

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DecoderAudioRenderer.java
Patch:
@@ -619,7 +619,7 @@ private void maybeInitDecoder() throws ExoPlaybackException {
       eventDispatcher.decoderInitialized(decoder.getName(), codecInitializedTimestamp,
           codecInitializedTimestamp - codecInitializingTimestamp);
       decoderCounters.decoderInitCount++;
-    } catch (DecoderException e) {
+    } catch (DecoderException | OutOfMemoryError e) {
       throw createRendererException(e, inputFormat);
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/video/DecoderVideoRenderer.java
Patch:
@@ -707,7 +707,7 @@ private void maybeInitDecoder() throws ExoPlaybackException {
           decoderInitializedTimestamp,
           decoderInitializedTimestamp - decoderInitializingTimestamp);
       decoderCounters.decoderInitCount++;
-    } catch (DecoderException e) {
+    } catch (DecoderException | OutOfMemoryError e) {
       throw createRendererException(e, inputFormat);
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/text/pgs/PgsDecoder.java
Patch:
@@ -177,8 +177,7 @@ private void parseBitmapSection(ParsableByteArray buffer, int sectionLength) {
         }
         bitmapWidth = buffer.readUnsignedShort();
         bitmapHeight = buffer.readUnsignedShort();
-        bitmapData.setPosition(0);
-        bitmapData.setLimit(totalLength - 4);
+        bitmapData.reset(totalLength - 4);
         sectionLength -= 7;
       }
 

File: extensions/cronet/src/test/java/com/google/android/exoplayer2/ext/cronet/CronetDataSourceTest.java
Patch:
@@ -36,7 +36,6 @@
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.ExoPlayerLibraryInfo;
 import com.google.android.exoplayer2.upstream.DataSpec;
 import com.google.android.exoplayer2.upstream.DefaultHttpDataSource;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
@@ -1412,8 +1411,6 @@ public void factorySetFallbackHttpDataSourceFactory_cronetNotAvailable_usesFallb
 
     dataSourceUnderTest.open(dataSpec);
 
-    Headers headers = mockWebServer.takeRequest(10, SECONDS).getHeaders();
-    assertThat(headers.get("user-agent")).isEqualTo(ExoPlayerLibraryInfo.DEFAULT_USER_AGENT);
     verify(mockTransferListener)
         .onTransferInitializing(eq(dataSourceUnderTest), eq(dataSpec), /* isNetwork= */ eq(true));
     verify(mockTransferListener)

File: extensions/okhttp/src/main/java/com/google/android/exoplayer2/ext/okhttp/OkHttpDataSourceFactory.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.google.android.exoplayer2.ext.okhttp;
 
-import static com.google.android.exoplayer2.ExoPlayerLibraryInfo.DEFAULT_USER_AGENT;
 
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
@@ -40,7 +39,7 @@ public final class OkHttpDataSourceFactory extends BaseFactory {
    *     by the sources created by the factory.
    */
   public OkHttpDataSourceFactory(Call.Factory callFactory) {
-    this(callFactory, DEFAULT_USER_AGENT, /* listener= */ null, /* cacheControl= */ null);
+    this(callFactory, /* userAgent= */ null, /* listener= */ null, /* cacheControl= */ null);
   }
 
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaSourceDrmHelper.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.google.android.exoplayer2.source;
 
-import static com.google.android.exoplayer2.ExoPlayerLibraryInfo.DEFAULT_USER_AGENT;
 import static com.google.android.exoplayer2.drm.DefaultDrmSessionManager.MODE_PLAYBACK;
 
 import androidx.annotation.Nullable;
@@ -24,6 +23,7 @@
 import com.google.android.exoplayer2.drm.DrmSessionManager;
 import com.google.android.exoplayer2.drm.FrameworkMediaDrm;
 import com.google.android.exoplayer2.drm.HttpMediaDrmCallback;
+import com.google.android.exoplayer2.upstream.DefaultHttpDataSource;
 import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.google.android.exoplayer2.util.Assertions;
@@ -73,7 +73,7 @@ public DrmSessionManager create(MediaItem mediaItem) {
     HttpDataSource.Factory dataSourceFactory =
         drmHttpDataSourceFactory != null
             ? drmHttpDataSourceFactory
-            : new DefaultHttpDataSourceFactory(userAgent != null ? userAgent : DEFAULT_USER_AGENT);
+            : new DefaultHttpDataSource.Factory().setUserAgent(userAgent);
     HttpMediaDrmCallback httpDrmCallback =
         new HttpMediaDrmCallback(
             drmConfiguration.licenseUri == null ? null : drmConfiguration.licenseUri.toString(),

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -2093,7 +2093,6 @@ public void initializeOutput(ExtractorOutput output, int trackId) throws ParserE
           HevcConfig hevcConfig = HevcConfig.parse(new ParsableByteArray(getCodecPrivate(codecId)));
           initializationData = hevcConfig.initializationData;
           nalUnitLengthFieldLength = hevcConfig.nalUnitLengthFieldLength;
-          codecs = hevcConfig.codecs;
           break;
         case CODEC_ID_FOURCC:
           Pair<String, @NullableType List<byte[]>> pair =

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -1066,7 +1066,6 @@ private static void parseVideoSampleEntry(
         HevcConfig hevcConfig = HevcConfig.parse(parent);
         initializationData = hevcConfig.initializationData;
         out.nalUnitLengthFieldLength = hevcConfig.nalUnitLengthFieldLength;
-        codecs = hevcConfig.codecs;
       } else if (childAtomType == Atom.TYPE_dvcC || childAtomType == Atom.TYPE_dvvC) {
         @Nullable DolbyVisionConfig dolbyVisionConfig = DolbyVisionConfig.parse(parent);
         if (dolbyVisionConfig != null) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactory.java
Patch:
@@ -251,7 +251,8 @@ public MediaSource createMediaSource(MediaItem mediaItem) {
       MediaSource[] mediaSources = new MediaSource[subtitles.size() + 1];
       mediaSources[0] = mediaSource;
       SingleSampleMediaSource.Factory singleSampleSourceFactory =
-          new SingleSampleMediaSource.Factory(dataSourceFactory);
+          new SingleSampleMediaSource.Factory(dataSourceFactory)
+              .setLoadErrorHandlingPolicy(loadErrorHandlingPolicy);
       for (int i = 0; i < subtitles.size(); i++) {
         mediaSources[i + 1] =
             singleSampleSourceFactory.createMediaSource(

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -1577,16 +1577,18 @@ public CodecMaxValues(int width, int height, int inputSize) {
 
   private static boolean evaluateDeviceNeedsSetOutputSurfaceWorkaround() {
     if (Util.SDK_INT <= 28) {
-      // Workaround for MiTV devices which have been observed broken up to API 28.
+      // Workaround for MiTV and MiBox devices which have been observed broken up to API 28.
       // https://github.com/google/ExoPlayer/issues/5169,
       // https://github.com/google/ExoPlayer/issues/6899.
       // https://github.com/google/ExoPlayer/issues/8014.
+      // https://github.com/google/ExoPlayer/issues/8329.
       switch (Util.DEVICE) {
         case "dangal":
         case "dangalUHD":
         case "dangalFHD":
         case "magnolia":
         case "machuca":
+        case "oneday":
           return true;
         default:
           break; // Do nothing.

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -1260,7 +1260,7 @@ private void handlePlayerStateChanged(boolean playWhenReady, @Player.State int p
         && playWhenReady) {
       ensureSentContentCompleteIfAtEndOfStream();
     } else if (imaAdState != IMA_AD_STATE_NONE && playbackState == Player.STATE_ENDED) {
-      AdMediaInfo adMediaInfo = checkNotNull(imaAdMediaInfo);
+      @Nullable AdMediaInfo adMediaInfo = imaAdMediaInfo;
       if (adMediaInfo == null) {
         Log.w(TAG, "onEnded without ad media info");
       } else {

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
Patch:
@@ -131,7 +131,8 @@
  *         <li>Default: {@code never}
  *       </ul>
  *   <li><b>{@code resize_mode}</b> - Controls how video and album art is resized within the view.
- *       Valid values are {@code fit}, {@code fixed_width}, {@code fixed_height} and {@code fill}.
+ *       Valid values are {@code fit}, {@code fixed_width}, {@code fixed_height}, {@code fill} and
+ *       {@code zoom}.
  *       <ul>
  *         <li>Corresponding method: {@link #setResizeMode(int)}
  *         <li>Default: {@code fit}

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -133,7 +133,8 @@
  *         <li>Default: {@code never}
  *       </ul>
  *   <li><b>{@code resize_mode}</b> - Controls how video and album art is resized within the view.
- *       Valid values are {@code fit}, {@code fixed_width}, {@code fixed_height} and {@code fill}.
+ *       Valid values are {@code fit}, {@code fixed_width}, {@code fixed_height}, {@code fill} and
+ *       {@code zoom}.
  *       <ul>
  *         <li>Corresponding method: {@link #setResizeMode(int)}
  *         <li>Default: {@code fit}

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Sniffer.java
Patch:
@@ -37,6 +37,7 @@
         0x69736f34, // iso4
         0x69736f35, // iso5
         0x69736f36, // iso6
+        0x69736f39, // iso9
         0x61766331, // avc1
         0x68766331, // hvc1
         0x68657631, // hev1

File: extensions/gvr/src/main/java/com/google/android/exoplayer2/ext/gvr/GvrAudioProcessor.java
Patch:
@@ -135,6 +135,7 @@ public void queueInput(ByteBuffer input) {
 
   @Override
   public void queueEndOfStream() {
+    // TODO(internal b/174554082): assert gvrAudioSurround is non-null here and in getOutput.
     if (gvrAudioSurround != null) {
       gvrAudioSurround.triggerProcessing();
     }

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -869,7 +869,9 @@ private void processBuffers(long avSyncPresentationTimeUs) throws WriteException
         writeBuffer(input, avSyncPresentationTimeUs);
       } else {
         AudioProcessor audioProcessor = activeAudioProcessors[index];
-        audioProcessor.queueInput(input);
+        if (index > drainingAudioProcessorIndex) {
+          audioProcessor.queueInput(input);
+        }
         ByteBuffer output = audioProcessor.getOutput();
         outputBuffers[index] = output;
         if (output.hasRemaining()) {

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DefaultDashChunkSource.java
Patch:
@@ -429,8 +429,7 @@ public boolean onChunkLoadError(
     if (!cancelable) {
       return false;
     }
-    if (playerTrackEmsgHandler != null
-        && playerTrackEmsgHandler.maybeRefreshManifestOnLoadingError(chunk)) {
+    if (playerTrackEmsgHandler != null && playerTrackEmsgHandler.onChunkLoadError(chunk)) {
       return true;
     }
     // Workaround for missing segment at the end of the period

File: library/core/src/main/java/com/google/android/exoplayer2/source/MaskingMediaSource.java
Patch:
@@ -111,8 +111,8 @@ public void maybeThrowSourceInfoRefreshError() {
   @Override
   public MaskingMediaPeriod createPeriod(
       MediaPeriodId id, Allocator allocator, long startPositionUs) {
-    MaskingMediaPeriod mediaPeriod =
-        new MaskingMediaPeriod(mediaSource, id, allocator, startPositionUs);
+    MaskingMediaPeriod mediaPeriod = new MaskingMediaPeriod(id, allocator, startPositionUs);
+    mediaPeriod.setMediaSource(mediaSource);
     if (isPrepared) {
       MediaPeriodId idInSource = id.copyWithPeriodUid(getInternalPeriodUid(id.periodUid));
       mediaPeriod.createPeriod(idInSource);

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -6943,6 +6943,7 @@ public void removeMediaItems_currentItemRemovedThatIsTheLast_correctMasking() th
     ActionSchedule actionSchedule =
         new ActionSchedule.Builder(TAG)
             .waitForPlaybackState(Player.STATE_READY)
+            .waitForPendingPlayerCommands()
             .executeRunnable(
                 new PlayerRunnable() {
                   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactory.java
Patch:
@@ -360,7 +360,8 @@ public MediaSource createMediaSource(MediaItem mediaItem) {
       MediaSource[] mediaSources = new MediaSource[subtitles.size() + 1];
       mediaSources[0] = mediaSource;
       SingleSampleMediaSource.Factory singleSampleSourceFactory =
-          new SingleSampleMediaSource.Factory(dataSourceFactory);
+          new SingleSampleMediaSource.Factory(dataSourceFactory)
+              .setLoadErrorHandlingPolicy(loadErrorHandlingPolicy);
       for (int i = 0; i < subtitles.size(); i++) {
         mediaSources[i + 1] =
             singleSampleSourceFactory.createMediaSource(

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -2093,6 +2093,7 @@ public void initializeOutput(ExtractorOutput output, int trackId) throws ParserE
           HevcConfig hevcConfig = HevcConfig.parse(new ParsableByteArray(getCodecPrivate(codecId)));
           initializationData = hevcConfig.initializationData;
           nalUnitLengthFieldLength = hevcConfig.nalUnitLengthFieldLength;
+          codecs = hevcConfig.codecs;
           break;
         case CODEC_ID_FOURCC:
           Pair<String, @NullableType List<byte[]>> pair =

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -1066,6 +1066,7 @@ private static void parseVideoSampleEntry(
         HevcConfig hevcConfig = HevcConfig.parse(parent);
         initializationData = hevcConfig.initializationData;
         out.nalUnitLengthFieldLength = hevcConfig.nalUnitLengthFieldLength;
+        codecs = hevcConfig.codecs;
       } else if (childAtomType == Atom.TYPE_dvcC || childAtomType == Atom.TYPE_dvvC) {
         @Nullable DolbyVisionConfig dolbyVisionConfig = DolbyVisionConfig.parse(parent);
         if (dolbyVisionConfig != null) {

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -1584,16 +1584,18 @@ public CodecMaxValues(int width, int height, int inputSize) {
 
   private static boolean evaluateDeviceNeedsSetOutputSurfaceWorkaround() {
     if (Util.SDK_INT <= 28) {
-      // Workaround for MiTV devices which have been observed broken up to API 28.
+      // Workaround for MiTV and MiBox devices which have been observed broken up to API 28.
       // https://github.com/google/ExoPlayer/issues/5169,
       // https://github.com/google/ExoPlayer/issues/6899.
       // https://github.com/google/ExoPlayer/issues/8014.
+      // https://github.com/google/ExoPlayer/issues/8329.
       switch (Util.DEVICE) {
         case "dangal":
         case "dangalUHD":
         case "dangalFHD":
         case "magnolia":
         case "machuca":
+        case "oneday":
           return true;
         default:
           break; // Do nothing.

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/DefaultHlsPlaylistParserFactory.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.source.hls.playlist;
 
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.upstream.ParsingLoadable;
 
 /** Default implementation for {@link HlsPlaylistParserFactory}. */
@@ -27,7 +28,7 @@ public ParsingLoadable.Parser<HlsPlaylist> createPlaylistParser() {
 
   @Override
   public ParsingLoadable.Parser<HlsPlaylist> createPlaylistParser(
-      HlsMasterPlaylist masterPlaylist) {
-    return new HlsPlaylistParser(masterPlaylist);
+      HlsMasterPlaylist masterPlaylist, @Nullable HlsMediaPlaylist previousMediaPlaylist) {
+    return new HlsPlaylistParser(masterPlaylist, previousMediaPlaylist);
   }
 }

File: demos/cast/src/main/java/com/google/android/exoplayer2/castdemo/PlayerManager.java
Patch:
@@ -312,7 +312,8 @@ private void setCurrentPlayer(Player currentPlayer) {
           windowIndex = currentItemIndex;
         }
       }
-      previousPlayer.stop(true);
+      previousPlayer.stop();
+      previousPlayer.clearMediaItems();
     }
 
     this.currentPlayer = currentPlayer;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
Patch:
@@ -737,9 +737,8 @@ public void setShutterBackgroundColor(int color) {
   /**
    * Sets whether the currently displayed video frame or media artwork is kept visible when the
    * player is reset. A player reset is defined to mean the player being re-prepared with different
-   * media, the player transitioning to unprepared media, {@link Player#stop(boolean)} being called
-   * with {@code reset=true}, or the player being replaced or cleared by calling {@link
-   * #setPlayer(Player)}.
+   * media, the player transitioning to unprepared media or an empty list of media items, or the
+   * player being replaced or cleared by calling {@link #setPlayer(Player)}.
    *
    * <p>If enabled, the currently displayed video frame or media artwork will be kept visible until
    * the player set on the view has been successfully prepared with new media and loaded enough of

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -733,9 +733,8 @@ public void setShutterBackgroundColor(int color) {
   /**
    * Sets whether the currently displayed video frame or media artwork is kept visible when the
    * player is reset. A player reset is defined to mean the player being re-prepared with different
-   * media, the player transitioning to unprepared media, {@link Player#stop(boolean)} being called
-   * with {@code reset=true}, or the player being replaced or cleared by calling {@link
-   * #setPlayer(Player)}.
+   * media, the player transitioning to unprepared media or an empty list of media items, or the
+   * player being replaced or cleared by calling {@link #setPlayer(Player)}.
    *
    * <p>If enabled, the currently displayed video frame or media artwork will be kept visible until
    * the player set on the view has been successfully prepared with new media and loaded enough of

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -1363,7 +1363,7 @@ public static void scaleLargeTimestampsInPlace(long[] timestamps, long multiplie
    * Returns the duration of media that will elapse in {@code playoutDuration}.
    *
    * @param playoutDuration The duration to scale.
-   * @param speed The playback speed.
+   * @param speed The factor by which playback is sped up.
    * @return The scaled duration, in the same units as {@code playoutDuration}.
    */
   public static long getMediaDurationForPlayoutDuration(long playoutDuration, float speed) {

File: library/core/src/main/java/com/google/android/exoplayer2/LivePlaybackSpeedControl.java
Patch:
@@ -55,7 +55,7 @@ public interface LivePlaybackSpeedControl {
    *
    * @param liveOffsetUs The current live offset, in microseconds.
    * @param bufferedDurationUs The duration of media that's currently buffered, in microseconds.
-   * @return The adjusted playback speed.
+   * @return The adjusted factor by which playback should be sped up.
    */
   float getAdjustedPlaybackSpeed(long liveOffsetUs, long bufferedDurationUs);
 

File: library/core/src/main/java/com/google/android/exoplayer2/LoadControl.java
Patch:
@@ -94,7 +94,7 @@ void onTracksSelected(Renderer[] renderers, TrackGroupArray trackGroups,
    *     negative and equal in magnitude to the duration of any media in previous periods still to
    *     be played.
    * @param bufferedDurationUs The duration of media that's currently buffered.
-   * @param playbackSpeed The current playback speed.
+   * @param playbackSpeed The current factor by which playback is sped up.
    * @return Whether the loading should continue.
    */
   boolean shouldContinueLoading(
@@ -107,7 +107,7 @@ boolean shouldContinueLoading(
    * false} until some condition has been met (e.g. a certain amount of media is buffered).
    *
    * @param bufferedDurationUs The duration of media that's currently buffered.
-   * @param playbackSpeed The current playback speed.
+   * @param playbackSpeed The current factor by which playback is sped up.
    * @param rebuffering Whether the player is rebuffering. A rebuffer is defined to be caused by
    *     buffer depletion rather than a user action. Hence this parameter is false during initial
    *     buffering and when buffering as a result of a seek operation.

File: library/core/src/main/java/com/google/android/exoplayer2/MediaPeriodHolder.java
Patch:
@@ -173,7 +173,7 @@ public long getNextLoadPositionUs() {
   /**
    * Handles period preparation.
    *
-   * @param playbackSpeed The current playback speed.
+   * @param playbackSpeed The current factor by which playback is sped up.
    * @param timeline The current {@link Timeline}.
    * @throws ExoPlaybackException If an error occurs during track selection.
    */
@@ -224,7 +224,7 @@ public void continueLoading(long rendererPositionUs) {
    * <p>The new track selection needs to be applied with {@link
    * #applyTrackSelection(TrackSelectorResult, long, boolean)} before taking effect.
    *
-   * @param playbackSpeed The current playback speed.
+   * @param playbackSpeed The current factor by which playback is sped up.
    * @param timeline The current {@link Timeline}.
    * @return The {@link TrackSelectorResult}.
    * @throws ExoPlaybackException If an error occurs during track selection.

File: library/core/src/main/java/com/google/android/exoplayer2/Renderer.java
Patch:
@@ -399,12 +399,11 @@ void replaceStream(Format[] formats, SampleStream stream, long startPositionUs,
   void resetPosition(long positionUs) throws ExoPlaybackException;
 
   /**
-   * Indicates the player's speed to this renderer, where 1 is the default rate, 2 is twice the
-   * default rate, 0.5 is half the default rate and so on.
+   * Indicates the playback speed to this renderer.
    *
    * <p>The default implementation is a no-op.
    *
-   * @param playbackSpeed The playback speed.
+   * @param playbackSpeed The factor by which playback is sped up.
    * @throws ExoPlaybackException If an error occurs handling the playback speed.
    */
   default void setPlaybackSpeed(float playbackSpeed) throws ExoPlaybackException {}

File: library/core/src/main/java/com/google/android/exoplayer2/audio/SonicAudioProcessor.java
Patch:
@@ -79,7 +79,7 @@ public SonicAudioProcessor() {
    * processor. The value returned by {@link #isActive()} may change, and the processor must be
    * {@link #flush() flushed} before queueing more data.
    *
-   * @param speed The target playback speed.
+   * @param speed The target factor by which playback should be sped up.
    */
   public void setSpeed(float speed) {
     if (this.speed != speed) {

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
Patch:
@@ -1631,7 +1631,7 @@ protected float getCodecOperatingRate() {
    *
    * <p>The default implementation returns {@link #CODEC_OPERATING_RATE_UNSET}.
    *
-   * @param playbackSpeed The playback speed.
+   * @param playbackSpeed The factor by which playback is sped up.
    * @param format The {@link Format} for which the codec is being configured.
    * @param streamFormats The possible stream formats.
    * @return The codec operating rate, or {@link #CODEC_OPERATING_RATE_UNSET} if no codec operating

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/AdaptiveTrackSelection.java
Patch:
@@ -413,7 +413,7 @@ public int evaluateQueueSize(long playbackPositionUs, List<? extends MediaChunk>
    * @param format The {@link Format} of the candidate track.
    * @param trackBitrate The estimated bitrate of the track. May differ from {@link Format#bitrate}
    *     if a more accurate estimate of the current track bitrate is available.
-   * @param playbackSpeed The current playback speed.
+   * @param playbackSpeed The current factor by which playback is sped up.
    * @param effectiveBitrate The bitrate available to this selection.
    * @return Whether this {@link Format} can be selected.
    */

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelection.java
Patch:
@@ -184,7 +184,7 @@ TrackSelection[] createTrackSelections(
    * Called to notify the selection of the current playback speed. The playback speed may affect
    * adaptive track selection.
    *
-   * @param speed The playback speed.
+   * @param speed The factor by which playback is sped up.
    */
   void onPlaybackSpeed(float speed);
 

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -962,6 +962,7 @@ public void setAudioSessionId(int audioSessionId) {
     }
     this.audioSessionId = audioSessionId;
     sendRendererMessage(C.TRACK_TYPE_AUDIO, Renderer.MSG_SET_AUDIO_SESSION_ID, audioSessionId);
+    sendRendererMessage(C.TRACK_TYPE_VIDEO, Renderer.MSG_SET_AUDIO_SESSION_ID, audioSessionId);
     if (audioSessionId != C.AUDIO_SESSION_ID_UNSET) {
       notifyAudioSessionIdSet();
     }

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
Patch:
@@ -369,8 +369,7 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
     }
 
     // Check for a valid response code.
-    if (responseCode < 200 || responseCode > 299) {
-      Map<String, List<String>> headers = connection.getHeaderFields();
+    if (responseCode < 200 || responseCode > 299) {      
       @Nullable InputStream errorStream = connection.getErrorStream();
       byte[] errorResponseBody;
       try {
@@ -379,6 +378,7 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
       } catch (IOException e) {
         errorResponseBody = Util.EMPTY_BYTE_ARRAY;
       }
+      Map<String, List<String>> headers = connection.getHeaderFields();
       closeConnectionQuietly();
       InvalidResponseCodeException exception =
           new InvalidResponseCodeException(

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
Patch:
@@ -377,8 +377,7 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
         errorResponseBody =
             errorStream != null ? Util.toByteArray(errorStream) : Util.EMPTY_BYTE_ARRAY;
       } catch (IOException e) {
-        throw new InvalidResponseCodeException(
-            responseCode, responseMessage, headers, dataSpec, null);
+        errorResponseBody = Util.EMPTY_BYTE_ARRAY;
       }
       closeConnectionQuietly();
       InvalidResponseCodeException exception =

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
Patch:
@@ -378,7 +378,7 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
             errorStream != null ? Util.toByteArray(errorStream) : Util.EMPTY_BYTE_ARRAY;
       } catch (IOException e) {
         throw new InvalidResponseCodeException(
-              responseCode, responseMessage, headers, dataSpec, null);
+            responseCode, responseMessage, headers, dataSpec, null);
       }
       closeConnectionQuietly();
       InvalidResponseCodeException exception =

File: extensions/okhttp/src/main/java/com/google/android/exoplayer2/ext/okhttp/OkHttpDataSource.java
Patch:
@@ -304,14 +304,14 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
 
     // Check for a valid response code.
     if (!response.isSuccessful()) {
+      Map<String, List<String>> headers = response.headers().toMultimap();
       byte[] errorResponseBody;
       try {
         errorResponseBody = Util.toByteArray(Assertions.checkNotNull(responseByteStream));
       } catch (IOException e) {
-        throw new HttpDataSourceException(
-            "Error reading non-2xx response body", e, dataSpec, HttpDataSourceException.TYPE_OPEN);
+        throw new InvalidResponseCodeException(
+            responseCode, response.message(), headers, dataSpec, null);
       }
-      Map<String, List<String>> headers = response.headers().toMultimap();
       closeConnectionQuietly();
       InvalidResponseCodeException exception =
           new InvalidResponseCodeException(

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
Patch:
@@ -377,8 +377,8 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
         errorResponseBody =
             errorStream != null ? Util.toByteArray(errorStream) : Util.EMPTY_BYTE_ARRAY;
       } catch (IOException e) {
-        throw new HttpDataSourceException(
-            "Error reading non-2xx response body", e, dataSpec, HttpDataSourceException.TYPE_OPEN);
+        throw new InvalidResponseCodeException(
+              responseCode, responseMessage, headers, dataSpec, null);
       }
       closeConnectionQuietly();
       InvalidResponseCodeException exception =

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/flv/VideoTagPayloadReader.java
Patch:
@@ -93,6 +93,7 @@ protected boolean parsePayload(ParsableByteArray data, long timeUs) throws Parse
       Format format =
           new Format.Builder()
               .setSampleMimeType(MimeTypes.VIDEO_H264)
+              .setCodecs(avcConfig.codecs)
               .setWidth(avcConfig.width)
               .setHeight(avcConfig.height)
               .setPixelWidthHeightRatio(avcConfig.pixelWidthAspectRatio)

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -2086,6 +2086,7 @@ public void initializeOutput(ExtractorOutput output, int trackId) throws ParserE
           AvcConfig avcConfig = AvcConfig.parse(new ParsableByteArray(getCodecPrivate(codecId)));
           initializationData = avcConfig.initializationData;
           nalUnitLengthFieldLength = avcConfig.nalUnitLengthFieldLength;
+          codecs = avcConfig.codecs;
           break;
         case CODEC_ID_H265:
           mimeType = MimeTypes.VIDEO_H265;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -1058,6 +1058,7 @@ private static void parseVideoSampleEntry(
         if (!pixelWidthHeightRatioFromPasp) {
           pixelWidthHeightRatio = avcConfig.pixelWidthAspectRatio;
         }
+        codecs = avcConfig.codecs;
       } else if (childAtomType == Atom.TYPE_hvcC) {
         Assertions.checkState(mimeType == null);
         mimeType = MimeTypes.VIDEO_H265;

File: extensions/okhttp/src/main/java/com/google/android/exoplayer2/ext/okhttp/OkHttpDataSource.java
Patch:
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer2.ext.okhttp;
 
 import static com.google.android.exoplayer2.ExoPlayerLibraryInfo.DEFAULT_USER_AGENT;
-import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
 
@@ -278,7 +277,6 @@ public void clearAllRequestProperties() {
 
   @Override
   public long open(DataSpec dataSpec) throws HttpDataSourceException {
-    checkState(!opened);
     this.dataSpec = dataSpec;
     this.bytesRead = 0;
     this.bytesSkipped = 0;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/AssetDataSource.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.google.android.exoplayer2.upstream;
 
-import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
 
@@ -58,7 +57,6 @@ public AssetDataSource(Context context) {
 
   @Override
   public long open(DataSpec dataSpec) throws AssetDataSourceException {
-    checkState(!opened);
     try {
       uri = dataSpec.uri;
       String path = Assertions.checkNotNull(uri.getPath());

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/ByteArrayDataSource.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.google.android.exoplayer2.upstream;
 
-import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static java.lang.Math.min;
 
 import android.net.Uri;
@@ -46,7 +45,6 @@ public ByteArrayDataSource(byte[] data) {
 
   @Override
   public long open(DataSpec dataSpec) throws IOException {
-    checkState(!opened);
     uri = dataSpec.uri;
     transferInitializing(dataSpec);
     readPosition = (int) dataSpec.position;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/ContentDataSource.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.google.android.exoplayer2.upstream;
 
-import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
 
@@ -63,8 +62,6 @@ public ContentDataSource(Context context) {
 
   @Override
   public long open(DataSpec dataSpec) throws ContentDataSourceException {
-    checkState(!opened);
-
     try {
       Uri uri = dataSpec.uri;
       this.uri = uri;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSchemeDataSource.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.google.android.exoplayer2.upstream;
 
-import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
 
@@ -45,7 +44,6 @@ public DataSchemeDataSource() {
 
   @Override
   public long open(DataSpec dataSpec) throws IOException {
-    checkState(this.dataSpec == null);
     transferInitializing(dataSpec);
     this.dataSpec = dataSpec;
     readPosition = (int) dataSpec.position;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
Patch:
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer2.upstream;
 
 import static com.google.android.exoplayer2.ExoPlayerLibraryInfo.DEFAULT_USER_AGENT;
-import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
 
@@ -343,7 +342,6 @@ public void clearAllRequestProperties() {
    */
   @Override
   public long open(DataSpec dataSpec) throws HttpDataSourceException {
-    checkState(!opened);
     this.dataSpec = dataSpec;
     this.bytesRead = 0;
     this.bytesSkipped = 0;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.google.android.exoplayer2.upstream;
 
-import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
 
@@ -81,7 +80,6 @@ public FileDataSource() {
 
   @Override
   public long open(DataSpec dataSpec) throws FileDataSourceException {
-    checkState(!opened);
     try {
       Uri uri = dataSpec.uri;
       this.uri = uri;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/RawResourceDataSource.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.google.android.exoplayer2.upstream;
 
-import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
 
@@ -99,7 +98,6 @@ public RawResourceDataSource(Context context) {
 
   @Override
   public long open(DataSpec dataSpec) throws RawResourceDataSourceException {
-    checkState(!opened);
     Uri uri = dataSpec.uri;
     this.uri = uri;
 

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/ResolvingDataSource.java
Patch:
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer2.upstream;
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
-import static com.google.android.exoplayer2.util.Assertions.checkState;
 
 import android.net.Uri;
 import androidx.annotation.Nullable;
@@ -104,7 +103,6 @@ public void addTransferListener(TransferListener transferListener) {
 
   @Override
   public long open(DataSpec dataSpec) throws IOException {
-    checkState(!upstreamOpened);
     DataSpec resolvedDataSpec = resolver.resolveDataSpec(dataSpec);
     upstreamOpened = true;
     return upstreamDataSource.open(resolvedDataSpec);

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/UdpDataSource.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.google.android.exoplayer2.upstream;
 
-import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static java.lang.Math.min;
 
 import android.net.Uri;
@@ -90,8 +89,6 @@ public UdpDataSource(int maxPacketSize, int socketTimeoutMillis) {
 
   @Override
   public long open(DataSpec dataSpec) throws UdpDataSourceException {
-    checkState(!opened);
-
     uri = dataSpec.uri;
     String host = uri.getHost();
     int port = uri.getPort();

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CacheDataSourceTest.java
Patch:
@@ -284,7 +284,6 @@ public void contentLengthEdgeCases() throws Exception {
             cacheDataSource.open(
                 buildDataSpec(TEST_DATA.length - 2, C.LENGTH_UNSET, defaultCacheKey)))
         .isEqualTo(2);
-    cacheDataSource.close();
 
     // An unbounded request with offset for not cached content.
     dataSpec =

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/Aes128DataSourceTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.google.android.exoplayer2.source.hls;
 
-import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.common.truth.Truth.assertThat;
 
 import android.net.Uri;
@@ -105,7 +104,6 @@ public void addTransferListener(TransferListener transferListener) {}
 
     @Override
     public long open(DataSpec dataSpec) throws IOException {
-      checkState(!opened);
       opened = true;
       return C.LENGTH_UNSET;
     }

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CachedContentIndex.java
Patch:
@@ -38,6 +38,7 @@
 import com.google.android.exoplayer2.util.AtomicFile;
 import com.google.android.exoplayer2.util.ReusableBufferedOutputStream;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.collect.ImmutableSet;
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -301,9 +302,8 @@ public void maybeRemove(String key) {
 
   /** Removes all resources whose {@link CachedContent CachedContents} are empty and unlocked. */
   public void removeEmpty() {
-    String[] keys = new String[keyToContent.size()];
-    keyToContent.keySet().toArray(keys);
-    for (String key : keys) {
+    // Create a copy of the keys as the underlying map is modified by maybeRemove(key).
+    for (String key : ImmutableSet.copyOf(keyToContent.keySet())) {
       maybeRemove(key);
     }
   }

File: library/core/src/main/java/com/google/android/exoplayer2/video/VideoFrameReleaseHelper.java
Patch:
@@ -409,7 +409,7 @@ private static final class VSyncSampler implements FrameCallback, Handler.Callba
 
     private final Handler handler;
     private final HandlerThread choreographerOwnerThread;
-    @MonotonicNonNull private Choreographer choreographer;
+    private @MonotonicNonNull Choreographer choreographer;
     private int observerCount;
 
     public static VSyncSampler getInstance() {

File: extensions/okhttp/src/main/java/com/google/android/exoplayer2/ext/okhttp/OkHttpDataSource.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.ext.okhttp;
 
 import static com.google.android.exoplayer2.ExoPlayerLibraryInfo.DEFAULT_USER_AGENT;
+import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
 
@@ -277,6 +278,7 @@ public void clearAllRequestProperties() {
 
   @Override
   public long open(DataSpec dataSpec) throws HttpDataSourceException {
+    checkState(!opened);
     this.dataSpec = dataSpec;
     this.bytesRead = 0;
     this.bytesSkipped = 0;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/AssetDataSource.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.upstream;
 
+import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
 
@@ -57,6 +58,7 @@ public AssetDataSource(Context context) {
 
   @Override
   public long open(DataSpec dataSpec) throws AssetDataSourceException {
+    checkState(!opened);
     try {
       uri = dataSpec.uri;
       String path = Assertions.checkNotNull(uri.getPath());

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/ByteArrayDataSource.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.upstream;
 
+import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static java.lang.Math.min;
 
 import android.net.Uri;
@@ -45,6 +46,7 @@ public ByteArrayDataSource(byte[] data) {
 
   @Override
   public long open(DataSpec dataSpec) throws IOException {
+    checkState(!opened);
     uri = dataSpec.uri;
     transferInitializing(dataSpec);
     readPosition = (int) dataSpec.position;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/ContentDataSource.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.upstream;
 
+import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
 
@@ -62,6 +63,8 @@ public ContentDataSource(Context context) {
 
   @Override
   public long open(DataSpec dataSpec) throws ContentDataSourceException {
+    checkState(!opened);
+
     try {
       Uri uri = dataSpec.uri;
       this.uri = uri;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSchemeDataSource.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.upstream;
 
+import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
 
@@ -44,6 +45,7 @@ public DataSchemeDataSource() {
 
   @Override
   public long open(DataSpec dataSpec) throws IOException {
+    checkState(this.dataSpec == null);
     transferInitializing(dataSpec);
     this.dataSpec = dataSpec;
     readPosition = (int) dataSpec.position;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.upstream;
 
 import static com.google.android.exoplayer2.ExoPlayerLibraryInfo.DEFAULT_USER_AGENT;
+import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
 
@@ -342,6 +343,7 @@ public void clearAllRequestProperties() {
    */
   @Override
   public long open(DataSpec dataSpec) throws HttpDataSourceException {
+    checkState(!opened);
     this.dataSpec = dataSpec;
     this.bytesRead = 0;
     this.bytesSkipped = 0;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.upstream;
 
+import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
 
@@ -80,6 +81,7 @@ public FileDataSource() {
 
   @Override
   public long open(DataSpec dataSpec) throws FileDataSourceException {
+    checkState(!opened);
     try {
       Uri uri = dataSpec.uri;
       this.uri = uri;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/RawResourceDataSource.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.upstream;
 
+import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 import static java.lang.Math.min;
 
@@ -98,6 +99,7 @@ public RawResourceDataSource(Context context) {
 
   @Override
   public long open(DataSpec dataSpec) throws RawResourceDataSourceException {
+    checkState(!opened);
     Uri uri = dataSpec.uri;
     this.uri = uri;
 

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/ResolvingDataSource.java
Patch:
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.upstream;
 
 import static com.google.android.exoplayer2.util.Assertions.checkNotNull;
+import static com.google.android.exoplayer2.util.Assertions.checkState;
 
 import android.net.Uri;
 import androidx.annotation.Nullable;
@@ -103,6 +104,7 @@ public void addTransferListener(TransferListener transferListener) {
 
   @Override
   public long open(DataSpec dataSpec) throws IOException {
+    checkState(!upstreamOpened);
     DataSpec resolvedDataSpec = resolver.resolveDataSpec(dataSpec);
     upstreamOpened = true;
     return upstreamDataSource.open(resolvedDataSpec);

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/UdpDataSource.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.upstream;
 
+import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static java.lang.Math.min;
 
 import android.net.Uri;
@@ -89,6 +90,8 @@ public UdpDataSource(int maxPacketSize, int socketTimeoutMillis) {
 
   @Override
   public long open(DataSpec dataSpec) throws UdpDataSourceException {
+    checkState(!opened);
+
     uri = dataSpec.uri;
     String host = uri.getHost();
     int port = uri.getPort();

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CacheDataSourceTest.java
Patch:
@@ -284,6 +284,7 @@ public void contentLengthEdgeCases() throws Exception {
             cacheDataSource.open(
                 buildDataSpec(TEST_DATA.length - 2, C.LENGTH_UNSET, defaultCacheKey)))
         .isEqualTo(2);
+    cacheDataSource.close();
 
     // An unbounded request with offset for not cached content.
     dataSpec =

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/Aes128DataSourceTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.source.hls;
 
+import static com.google.android.exoplayer2.util.Assertions.checkState;
 import static com.google.common.truth.Truth.assertThat;
 
 import android.net.Uri;
@@ -104,6 +105,7 @@ public void addTransferListener(TransferListener transferListener) {}
 
     @Override
     public long open(DataSpec dataSpec) throws IOException {
+      checkState(!opened);
       opened = true;
       return C.LENGTH_UNSET;
     }

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoUtil.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.android.exoplayer2.RenderersFactory;
 import com.google.android.exoplayer2.database.DatabaseProvider;
 import com.google.android.exoplayer2.database.ExoDatabaseProvider;
-import com.google.android.exoplayer2.ext.cronet.CronetDataSourceFactory;
+import com.google.android.exoplayer2.ext.cronet.CronetDataSource;
 import com.google.android.exoplayer2.ext.cronet.CronetEngineWrapper;
 import com.google.android.exoplayer2.offline.ActionFileUpgradeUtil;
 import com.google.android.exoplayer2.offline.DefaultDownloadIndex;
@@ -81,7 +81,7 @@ public static synchronized HttpDataSource.Factory getHttpDataSourceFactory(Conte
       context = context.getApplicationContext();
       CronetEngineWrapper cronetEngineWrapper = new CronetEngineWrapper(context);
       httpDataSourceFactory =
-          new CronetDataSourceFactory(cronetEngineWrapper, Executors.newSingleThreadExecutor());
+          new CronetDataSource.Factory(cronetEngineWrapper, Executors.newSingleThreadExecutor());
     }
     return httpDataSourceFactory;
   }

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultDataSourceFactory.java
Patch:
@@ -59,7 +59,7 @@ public DefaultDataSourceFactory(Context context, String userAgent) {
    */
   public DefaultDataSourceFactory(
       Context context, String userAgent, @Nullable TransferListener listener) {
-    this(context, listener, new DefaultHttpDataSourceFactory(userAgent, listener));
+    this(context, listener, new DefaultHttpDataSource.Factory().setUserAgent(userAgent));
   }
 
   /**

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaChunk.java
Patch:
@@ -26,7 +26,8 @@
 /** Fake {@link MediaChunk}. */
 public final class FakeMediaChunk extends MediaChunk {
 
-  private static final DataSource DATA_SOURCE = new DefaultHttpDataSource("TEST_AGENT");
+  private static final DataSource DATA_SOURCE =
+      new DefaultHttpDataSource.Factory().setUserAgent("TEST_AGENT").createDataSource();
 
   /**
    * Creates a fake media chunk.

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/DefaultHlsPlaylistTracker.java
Patch:
@@ -774,8 +774,9 @@ private Uri getMediaPlaylistUriForReload() {
         }
       }
       if (playlistSnapshot.serverControl.skipUntilUs != C.TIME_UNSET) {
-        uriBuilder.appendQueryParameter(
-            SKIP_PARAM, playlistSnapshot.serverControl.canSkipDateRanges ? "v2" : "YES");
+        // TODO: Fix skipped segment merging before re-enabling.
+        // uriBuilder.appendQueryParameter(
+        //    SKIP_PARAM, playlistSnapshot.serverControl.canSkipDateRanges ? "v2" : "YES");
       }
       return uriBuilder.build();
     }

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/UdpDataSourceContractTest.java
Patch:
@@ -30,6 +30,7 @@
 import java.net.SocketException;
 import org.junit.Before;
 import org.junit.Ignore;
+import org.junit.Test;
 import org.junit.runner.RunWith;
 
 /** {@link DataSource} contract tests for {@link UdpDataSource}. */
@@ -73,8 +74,9 @@ protected Uri getNotFoundUri() {
     return Uri.parse("udp://notfound.invalid:12345");
   }
 
-  @Override
+  @Test
   @Ignore("UdpDataSource doesn't support DataSpec's position or length [internal: b/175856954]")
+  @Override
   public void dataSpecWithPosition_readUntilEnd() {}
 
   /**

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaSource.java
Patch:
@@ -536,7 +536,6 @@ public void onPrimaryPlaylistRefreshed(HlsMediaPlaylist playlist) {
       } else if (windowDefaultStartPositionUs == C.TIME_UNSET) {
         windowDefaultStartPositionUs = 0;
       }
-
       timeline =
           new SinglePeriodTimeline(
               presentationStartTimeMs,

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdTagLoader.java
Patch:
@@ -800,7 +800,7 @@ private void handlePlayerStateChanged(boolean playWhenReady, @Player.State int p
         && playWhenReady) {
       ensureSentContentCompleteIfAtEndOfStream();
     } else if (imaAdState != IMA_AD_STATE_NONE && playbackState == Player.STATE_ENDED) {
-      AdMediaInfo adMediaInfo = checkNotNull(imaAdMediaInfo);
+      @Nullable AdMediaInfo adMediaInfo = imaAdMediaInfo;
       if (adMediaInfo == null) {
         Log.w(TAG, "onEnded without ad media info");
       } else {

File: library/common/src/test/java/com/google/android/exoplayer2/MediaItemTest.java
Patch:
@@ -282,7 +282,7 @@ public void builderSetAdTagUri_setsAdTagUri() {
     MediaItem mediaItem = new MediaItem.Builder().setUri(URI_STRING).setAdTagUri(adTagUri).build();
 
     assertThat(mediaItem.playbackProperties.adsConfiguration.adTagUri).isEqualTo(adTagUri);
-    assertThat(mediaItem.playbackProperties.adsConfiguration.adsId).isEqualTo(adTagUri);
+    assertThat(mediaItem.playbackProperties.adsConfiguration.adsId).isNull();
   }
 
   @Test

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -530,16 +530,16 @@ public void start(
       adTagLoader = adTagLoaderByAdsId.get(adsId);
     }
     adTagLoaderByAdsMediaSource.put(adsMediaSource, checkNotNull(adTagLoader));
-    checkNotNull(adTagLoader).start(adViewProvider, eventListener);
+    adTagLoader.addListenerWithAdView(eventListener, adViewProvider);
     maybeUpdateCurrentAdTagLoader();
   }
 
   @Override
-  public void stop(AdsMediaSource adsMediaSource) {
+  public void stop(AdsMediaSource adsMediaSource, EventListener eventListener) {
     @Nullable AdTagLoader removedAdTagLoader = adTagLoaderByAdsMediaSource.remove(adsMediaSource);
     maybeUpdateCurrentAdTagLoader();
     if (removedAdTagLoader != null) {
-      removedAdTagLoader.stop();
+      removedAdTagLoader.removeListener(eventListener);
     }
 
     if (player != null && adTagLoaderByAdsMediaSource.isEmpty()) {

File: extensions/cronet/src/main/java/com/google/android/exoplayer2/ext/cronet/CronetDataSourceFactory.java
Patch:
@@ -343,7 +343,7 @@ public CronetDataSourceFactory(
   @Override
   protected HttpDataSource createDataSourceInternal(HttpDataSource.RequestProperties
       defaultRequestProperties) {
-    CronetEngine cronetEngine = cronetEngineWrapper.getCronetEngine();
+    @Nullable CronetEngine cronetEngine = cronetEngineWrapper.getCronetEngine();
     if (cronetEngine == null) {
       return fallbackFactory.createDataSource();
     }

File: library/common/src/main/java/com/google/android/exoplayer2/upstream/DataSpec.java
Patch:
@@ -343,8 +343,7 @@ public static String getStringForHttpMethod(@HttpMethod int httpMethod) {
    *       header directly.
    *   <li>Other headers set at the {@link HttpDataSource} layer. I.e., headers set using {@link
    *       HttpDataSource#setRequestProperty(String, String)}, and using {@link
-   *       HttpDataSource.RequestProperties#set(String, String)} on the default properties obtained
-   *       from {@link HttpDataSource.Factory#getDefaultRequestProperties()}.
+   *       HttpDataSource.Factory#setDefaultRequestProperties(Map)}.
    * </ul>
    */
   public final Map<String, String> httpRequestHeaders;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -51,7 +51,6 @@
 import com.google.android.exoplayer2.DefaultControlDispatcher;
 import com.google.android.exoplayer2.ExoPlayerLibraryInfo;
 import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.PlaybackParameters;
 import com.google.android.exoplayer2.PlaybackPreparer;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.Player.Events;
@@ -1491,7 +1490,8 @@ private void setPlaybackSpeed(float speed) {
     if (player == null) {
       return;
     }
-    player.setPlaybackParameters(new PlaybackParameters(speed));
+    controlDispatcher.dispatchSetPlaybackParameters(
+        player, player.getPlaybackParameters().withSpeed(speed));
   }
 
   /* package */ void requestPlayPauseFocus() {

File: library/core/src/main/java/com/google/android/exoplayer2/BasePlayer.java
Patch:
@@ -214,7 +214,7 @@ public final boolean isCurrentWindowDynamic() {
   @Override
   public final boolean isCurrentWindowLive() {
     Timeline timeline = getCurrentTimeline();
-    return !timeline.isEmpty() && timeline.getWindow(getCurrentWindowIndex(), window).isLive;
+    return !timeline.isEmpty() && timeline.getWindow(getCurrentWindowIndex(), window).isLive();
   }
 
   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/DefaultControlDispatcher.java
Patch:
@@ -99,7 +99,7 @@ public boolean dispatchNext(Player player) {
     int nextWindowIndex = player.getNextWindowIndex();
     if (nextWindowIndex != C.INDEX_UNSET) {
       player.seekTo(nextWindowIndex, C.TIME_UNSET);
-    } else if (timeline.getWindow(windowIndex, window).isLive) {
+    } else if (timeline.getWindow(windowIndex, window).isLive()) {
       player.seekTo(windowIndex, C.TIME_UNSET);
     }
     return true;

File: library/core/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -1570,7 +1570,7 @@ public int get(int index) {
   /**
    * Returns whether the current window is live, or {@code false} if the {@link Timeline} is empty.
    *
-   * @see Timeline.Window#isLive
+   * @see Timeline.Window#isLive()
    */
   boolean isCurrentWindowLive();
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -1003,7 +1003,7 @@ public void onSourceInfoRefreshed(MediaSource source, Timeline timeline) {
         // Ignore dynamic updates.
         return;
       }
-      if (timeline.getWindow(/* windowIndex= */ 0, new Timeline.Window()).isLive) {
+      if (timeline.getWindow(/* windowIndex= */ 0, new Timeline.Window()).isLive()) {
         downloadHelperHandler
             .obtainMessage(
                 DOWNLOAD_HELPER_CALLBACK_MESSAGE_FAILED,

File: library/core/src/main/java/com/google/android/exoplayer2/source/MaskingMediaSource.java
Patch:
@@ -374,7 +374,7 @@ public Window getWindow(int windowIndex, Window window, long defaultPositionProj
           /* isSeekable= */ false,
           // Dynamic window to indicate pending timeline updates.
           /* isDynamic= */ true,
-          /* isLive= */ false,
+          /* liveConfiguration= */ null,
           /* defaultPositionUs= */ 0,
           /* durationUs= */ C.TIME_UNSET,
           /* firstPeriodIndex= */ 0,

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaSource.java
Patch:
@@ -336,7 +336,7 @@ private void notifySourceInfoRefreshed() {
             timelineDurationUs,
             timelineIsSeekable,
             /* isDynamic= */ false,
-            /* isLive= */ timelineIsLive,
+            /* useLiveConfiguration= */ timelineIsLive,
             /* manifest= */ null,
             mediaItem);
     if (timelineIsPlaceholder) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/SilenceMediaSource.java
Patch:
@@ -132,7 +132,7 @@ protected void prepareSourceInternal(@Nullable TransferListener mediaTransferLis
             durationUs,
             /* isSeekable= */ true,
             /* isDynamic= */ false,
-            /* isLive= */ false,
+            /* useLiveConfiguration= */ false,
             /* manifest= */ null,
             mediaItem));
   }

File: library/core/src/main/java/com/google/android/exoplayer2/source/SingleSampleMediaSource.java
Patch:
@@ -291,7 +291,7 @@ private SingleSampleMediaSource(
             durationUs,
             /* isSeekable= */ true,
             /* isDynamic= */ false,
-            /* isLive= */ false,
+            /* useLiveConfiguration= */ false,
             /* manifest= */ null,
             mediaItem);
   }

File: library/core/src/test/java/com/google/android/exoplayer2/MediaPeriodQueueTest.java
Patch:
@@ -54,7 +54,7 @@ public final class MediaPeriodQueueTest {
           CONTENT_DURATION_US,
           /* isSeekable= */ true,
           /* isDynamic= */ false,
-          /* isLive= */ false,
+          /* useLiveConfiguration= */ false,
           /* manifest= */ null,
           MediaItem.fromUri(Uri.EMPTY));
   private static final Uri AD_URI = Uri.EMPTY;

File: library/core/src/test/java/com/google/android/exoplayer2/TimelineTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import androidx.annotation.Nullable;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
+import com.google.android.exoplayer2.MediaItem.LiveConfiguration;
 import com.google.android.exoplayer2.testutil.FakeTimeline;
 import com.google.android.exoplayer2.testutil.FakeTimeline.TimelineWindowDefinition;
 import com.google.android.exoplayer2.testutil.TimelineAsserts;
@@ -91,7 +92,7 @@ public void windowEquals() {
     assertThat(window).isNotEqualTo(otherWindow);
 
     otherWindow = new Timeline.Window();
-    otherWindow.isLive = true;
+    otherWindow.liveConfiguration = LiveConfiguration.UNSET;
     assertThat(window).isNotEqualTo(otherWindow);
 
     otherWindow = new Timeline.Window();
@@ -129,7 +130,7 @@ public void windowEquals() {
             window.elapsedRealtimeEpochOffsetMs,
             window.isSeekable,
             window.isDynamic,
-            window.isLive,
+            window.liveConfiguration,
             window.defaultPositionUs,
             window.durationUs,
             window.firstPeriodIndex,

File: library/core/src/test/java/com/google/android/exoplayer2/source/SinglePeriodTimelineTest.java
Patch:
@@ -71,7 +71,7 @@ public void getPeriodPositionDynamicWindowKnownDuration() {
             /* windowDefaultStartPositionUs= */ 0,
             /* isSeekable= */ false,
             /* isDynamic= */ true,
-            /* isLive= */ true,
+            /* useLiveConfiguration= */ true,
             /* manifest= */ null,
             MediaItem.fromUri(Uri.EMPTY));
     // Should return null with a positive position projection beyond window duration.

File: library/core/src/test/java/com/google/android/exoplayer2/source/ads/AdsMediaSourceTest.java
Patch:
@@ -58,7 +58,7 @@ public final class AdsMediaSourceTest {
           PREROLL_AD_DURATION_US,
           /* isSeekable= */ true,
           /* isDynamic= */ false,
-          /* isLive= */ false,
+          /* useLiveConfiguration= */ false,
           /* manifest= */ null,
           MediaItem.fromUri(Uri.EMPTY));
   private static final Object PREROLL_AD_PERIOD_UID =
@@ -70,7 +70,7 @@ public final class AdsMediaSourceTest {
           CONTENT_DURATION_US,
           /* isSeekable= */ true,
           /* isDynamic= */ false,
-          /* isLive= */ false,
+          /* useLiveConfiguration= */ false,
           /* manifest= */ null,
           MediaItem.fromUri(Uri.EMPTY));
   private static final Object CONTENT_PERIOD_UID =

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/SsMediaSource.java
Patch:
@@ -594,7 +594,7 @@ private void processManifest() {
               /* windowDefaultStartPositionUs= */ 0,
               /* isSeekable= */ true,
               /* isDynamic= */ manifest.isLive,
-              /* isLive= */ manifest.isLive,
+              /* useLiveConfiguration= */ manifest.isLive,
               manifest,
               mediaItem);
     } else if (manifest.isLive) {
@@ -617,7 +617,7 @@ private void processManifest() {
               defaultStartPositionUs,
               /* isSeekable= */ true,
               /* isDynamic= */ true,
-              /* isLive= */ true,
+              /* useLiveConfiguration= */ true,
               manifest,
               mediaItem);
     } else {
@@ -631,7 +631,7 @@ private void processManifest() {
               /* windowDefaultStartPositionUs= */ 0,
               /* isSeekable= */ true,
               /* isDynamic= */ false,
-              /* isLive= */ false,
+              /* useLiveConfiguration= */ false,
               manifest,
               mediaItem);
     }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTimeline.java
Patch:
@@ -329,7 +329,7 @@ public Window getWindow(int windowIndex, Window window, long defaultPositionProj
         /* elapsedRealtimeEpochOffsetMs= */ windowDefinition.isLive ? 0 : C.TIME_UNSET,
         windowDefinition.isSeekable,
         windowDefinition.isDynamic,
-        windowDefinition.isLive,
+        windowDefinition.isLive ? windowDefinition.mediaItem.liveConfiguration : null,
         windowDefinition.defaultPositionUs,
         windowDefinition.durationUs,
         periodOffsets[windowIndex],

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
Patch:
@@ -130,7 +130,8 @@
  *         <li>Default: {@code never}
  *       </ul>
  *   <li><b>{@code resize_mode}</b> - Controls how video and album art is resized within the view.
- *       Valid values are {@code fit}, {@code fixed_width}, {@code fixed_height} and {@code fill}.
+ *       Valid values are {@code fit}, {@code fixed_width}, {@code fixed_height}, {@code fill} and
+ *       {@code zoom}.
  *       <ul>
  *         <li>Corresponding method: {@link #setResizeMode(int)}
  *         <li>Default: {@code fit}

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -132,7 +132,8 @@
  *         <li>Default: {@code never}
  *       </ul>
  *   <li><b>{@code resize_mode}</b> - Controls how video and album art is resized within the view.
- *       Valid values are {@code fit}, {@code fixed_width}, {@code fixed_height} and {@code fill}.
+ *       Valid values are {@code fit}, {@code fixed_width}, {@code fixed_height}, {@code fill} and
+ *       {@code zoom}.
  *       <ul>
  *         <li>Corresponding method: {@link #setResizeMode(int)}
  *         <li>Default: {@code fit}

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/PsshAtomUtil.java
Patch:
@@ -138,7 +138,7 @@ public static byte[] parseSchemeSpecificData(byte[] atom, UUID uuid) {
     if (parsedAtom == null) {
       return null;
     }
-    if (uuid != null && !uuid.equals(parsedAtom.uuid)) {
+    if (!uuid.equals(parsedAtom.uuid)) {
       Log.w(TAG, "UUID mismatch. Expected: " + uuid + ", got: " + parsedAtom.uuid + ".");
       return null;
     }

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ogg/OggExtractor.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.extractor.ogg;
 
+import static com.google.android.exoplayer2.util.Assertions.checkStateNotNull;
 import static java.lang.Math.min;
 
 import com.google.android.exoplayer2.C;
@@ -25,7 +26,6 @@
 import com.google.android.exoplayer2.extractor.ExtractorsFactory;
 import com.google.android.exoplayer2.extractor.PositionHolder;
 import com.google.android.exoplayer2.extractor.TrackOutput;
-import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import java.io.IOException;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNullIf;
@@ -73,7 +73,7 @@ public void release() {
 
   @Override
   public int read(ExtractorInput input, PositionHolder seekPosition) throws IOException {
-    Assertions.checkStateNotNull(output); // Asserts that init has been called.
+    checkStateNotNull(output); // Check that init has been called.
     if (streamReader == null) {
       if (!sniffInternal(input)) {
         throw new ParserException("Failed to determine bitstream type");

File: library/core/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -34,7 +34,7 @@
 import com.google.android.exoplayer2.text.Cue;
 import com.google.android.exoplayer2.text.TextOutput;
 import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
-import com.google.android.exoplayer2.trackselection.TrackSelector;
+import com.google.android.exoplayer2.trackselection.TrackSelectorInterface;
 import com.google.android.exoplayer2.util.MutableFlags;
 import com.google.android.exoplayer2.util.Util;
 import com.google.android.exoplayer2.video.VideoDecoderOutputBufferRenderer;
@@ -1441,7 +1441,7 @@ public int get(int index) {
    * Returns the track selector that this player uses, or null if track selection is not supported.
    */
   @Nullable
-  TrackSelector getTrackSelector();
+  TrackSelectorInterface getTrackSelector();
 
   /** Returns the available track groups. */
   TrackGroupArray getCurrentTrackGroups();

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelector.java
Patch:
@@ -83,7 +83,7 @@
  * thread. The track selector may call {@link InvalidationListener#onTrackSelectionsInvalidated()}
  * from any thread.
  */
-public abstract class TrackSelector {
+public abstract class TrackSelector implements TrackSelectorInterface {
 
   /**
    * Notified when selections previously made by a {@link TrackSelector} are no longer valid.

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java
Patch:
@@ -839,6 +839,8 @@ private static HlsMediaPlaylist parseMediaPlaylist(
             (long) (parseDoubleAttr(line, REGEX_ATTR_DURATION) * C.MICROS_PER_SECOND);
         boolean isIndependent =
             parseOptionalBooleanAttribute(line, REGEX_INDEPENDENT, /* defaultValue= */ false);
+        // The first part of a segment is always independent if the segments are independent.
+        isIndependent |= hasIndependentSegmentsTag && trailingParts.isEmpty();
         boolean isGap = parseOptionalBooleanAttribute(line, REGEX_GAP, /* defaultValue= */ false);
         @Nullable
         String byteRange = parseOptionalStringAttr(line, REGEX_ATTR_BYTERANGE, variableDefinitions);

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdTagLoader.java
Patch:
@@ -517,6 +517,9 @@ private AdsLoader requestAds(
     }
     pendingAdRequestContext = new Object();
     request.setUserRequestContext(pendingAdRequestContext);
+    if (configuration.enableContinuousPlayback != null) {
+      request.setContinuousPlayback(configuration.enableContinuousPlayback);
+    }
     if (configuration.vastLoadTimeoutMs != TIMEOUT_UNSET) {
       request.setVastLoadTimeout(configuration.vastLoadTimeoutMs);
     }

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaUtil.java
Patch:
@@ -89,6 +89,7 @@ public static final class Configuration {
     public final boolean focusSkipButtonWhenAvailable;
     public final boolean playAdBeforeStartPosition;
     public final int mediaBitrate;
+    @Nullable public final Boolean enableContinuousPlayback;
     @Nullable public final List<String> adMediaMimeTypes;
     @Nullable public final Set<UiElement> adUiElements;
     @Nullable public final Collection<CompanionAdSlot> companionAdSlots;
@@ -105,6 +106,7 @@ public Configuration(
         boolean focusSkipButtonWhenAvailable,
         boolean playAdBeforeStartPosition,
         int mediaBitrate,
+        @Nullable Boolean enableContinuousPlayback,
         @Nullable List<String> adMediaMimeTypes,
         @Nullable Set<UiElement> adUiElements,
         @Nullable Collection<CompanionAdSlot> companionAdSlots,
@@ -119,6 +121,7 @@ public Configuration(
       this.focusSkipButtonWhenAvailable = focusSkipButtonWhenAvailable;
       this.playAdBeforeStartPosition = playAdBeforeStartPosition;
       this.mediaBitrate = mediaBitrate;
+      this.enableContinuousPlayback = enableContinuousPlayback;
       this.adMediaMimeTypes = adMediaMimeTypes;
       this.adUiElements = adUiElements;
       this.companionAdSlots = companionAdSlots;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Sniffer.java
Patch:
@@ -42,6 +42,7 @@
         0x69736f34, // iso4
         0x69736f35, // iso5
         0x69736f36, // iso6
+        0x69736f39, // iso9
         0x61766331, // avc1
         0x68766331, // hvc1
         0x68657631, // hev1

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -259,7 +259,7 @@ public long getSkippedOutputFrameCount() {
    */
   private static final int AUDIO_TRACK_RETRY_DURATION_MS = 100;
 
-  private static final String TAG = "AudioTrack";
+  private static final String TAG = "DefaultAudioSink";
 
   /**
    * Whether to enable a workaround for an issue where an audio effect does not keep its session

File: extensions/gvr/src/main/java/com/google/android/exoplayer2/ext/gvr/GvrAudioProcessor.java
Patch:
@@ -135,6 +135,7 @@ public void queueInput(ByteBuffer input) {
 
   @Override
   public void queueEndOfStream() {
+    // TODO(internal b/174554082): assert gvrAudioSurround is non-null here and in getOutput.
     if (gvrAudioSurround != null) {
       gvrAudioSurround.triggerProcessing();
     }

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -885,7 +885,9 @@ private void processBuffers(long avSyncPresentationTimeUs) throws WriteException
         writeBuffer(input, avSyncPresentationTimeUs);
       } else {
         AudioProcessor audioProcessor = activeAudioProcessors[index];
-        audioProcessor.queueInput(input);
+        if (index > drainingAudioProcessorIndex) {
+          audioProcessor.queueInput(input);
+        }
         ByteBuffer output = audioProcessor.getOutput();
         outputBuffers[index] = output;
         if (output.hasRemaining()) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/MaskingMediaSource.java
Patch:
@@ -111,8 +111,8 @@ public void maybeThrowSourceInfoRefreshError() {
   @Override
   public MaskingMediaPeriod createPeriod(
       MediaPeriodId id, Allocator allocator, long startPositionUs) {
-    MaskingMediaPeriod mediaPeriod =
-        new MaskingMediaPeriod(mediaSource, id, allocator, startPositionUs);
+    MaskingMediaPeriod mediaPeriod = new MaskingMediaPeriod(id, allocator, startPositionUs);
+    mediaPeriod.setMediaSource(mediaSource);
     if (isPrepared) {
       MediaPeriodId idInSource = id.copyWithPeriodUid(getInternalPeriodUid(id.periodUid));
       mediaPeriod.createPeriod(idInSource);

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -1341,9 +1341,7 @@ private void readScratch(ExtractorInput input, int requiredLength) throws IOExce
       return;
     }
     if (scratch.capacity() < requiredLength) {
-      scratch.reset(
-          Arrays.copyOf(scratch.getData(), max(scratch.getData().length * 2, requiredLength)),
-          scratch.limit());
+      scratch.ensureCapacity(max(scratch.capacity() * 2, requiredLength));
     }
     input.readFully(scratch.getData(), scratch.limit(), requiredLength - scratch.limit());
     scratch.setLimit(requiredLength);

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -1243,6 +1243,7 @@ private void resumeContentInternal() {
   private void handlePlayerStateChanged(boolean playWhenReady, @Player.State int playbackState) {
     if (playingAd && imaAdState == IMA_AD_STATE_PLAYING) {
       if (!bufferingAd && playbackState == Player.STATE_BUFFERING) {
+        bufferingAd = true;
         AdMediaInfo adMediaInfo = checkNotNull(imaAdMediaInfo);
         for (int i = 0; i < adCallbacks.size(); i++) {
           adCallbacks.get(i).onBuffering(adMediaInfo);

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -1959,11 +1959,12 @@ public AdsLoader createAdsLoader(
 
     /**
      * Returns a language code that's suitable for passing to {@link ImaSdkSettings#setLanguage} and
-     * corresponds to the device's {@link Locale#getDefault() default Locale}.
+     * corresponds to the device's {@link Locale#getDefault() default Locale}. IMA will fall back to
+     * its default language code ("en") if the value returned is unsupported.
      */
     // TODO: It may be possible to define a better mapping onto IMA's supported language codes. See:
     // https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/localization.
-    // IMA will fall back to its default language code ("en") if the value returned is unsupported.
+    // [Internal ref: b/174042000] will help if implemented.
     private static String getImaLanguageCodeForDefaultLocale() {
       return Util.splitAtFirst(Util.getSystemLanguageCodes()[0], "-")[0];
     }

File: library/common/src/main/java/com/google/android/exoplayer2/util/ParsableByteArray.java
Patch:
@@ -515,8 +515,8 @@ public String readNullTerminatedString() {
    * Reads a line of text.
    *
    * <p>A line is considered to be terminated by any one of a carriage return ('\r'), a line feed
-   * ('\n'), or a carriage return followed immediately by a line feed ('\r\n'). The system's default
-   * charset (UTF-8) is used. This method discards leading UTF-8 byte order marks, if present.
+   * ('\n'), or a carriage return followed immediately by a line feed ('\r\n'). The UTF-8 charset is
+   * used. This method discards leading UTF-8 byte order marks, if present.
    *
    * @return The line not including any line-termination characters, or null if the end of the data
    *     has already been reached.

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadTracker.java
Patch:
@@ -332,7 +332,7 @@ private void onDownloadPrepared(DownloadHelper helper) {
               /* titleId= */ R.string.exo_download_description,
               mappedTrackInfo,
               trackSelectorParameters,
-              /* allowAdaptiveSelections =*/ false,
+              /* allowAdaptiveSelections= */ false,
               /* allowMultipleOverrides= */ true,
               /* onClickListener= */ this,
               /* onDismissListener= */ this);

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/TrackSelectionDialog.java
Patch:
@@ -94,7 +94,7 @@ public static TrackSelectionDialog createForTrackSelector(
         /* titleId= */ R.string.track_selection_title,
         mappedTrackInfo,
         /* initialParameters = */ parameters,
-        /* allowAdaptiveSelections =*/ true,
+        /* allowAdaptiveSelections= */ true,
         /* allowMultipleOverrides= */ false,
         /* onClickListener= */ (dialog, which) -> {
           DefaultTrackSelector.ParametersBuilder builder = parameters.buildUpon();

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastTimeline.java
Patch:
@@ -46,8 +46,8 @@ public static final class ItemData {
 
     private ItemData() {
       this(
-          /* durationUs= */ C.TIME_UNSET, /* defaultPositionUs */
-          C.TIME_UNSET,
+          /* durationUs= */ C.TIME_UNSET,
+          /* defaultPositionUs= */ C.TIME_UNSET,
           /* isLive= */ false);
     }
 

File: library/common/src/main/java/com/google/android/exoplayer2/drm/DrmInitData.java
Patch:
@@ -137,8 +137,7 @@ private DrmInitData(@Nullable String schemeType, boolean cloneSchemeDatas,
     Arrays.sort(this.schemeDatas, this);
   }
 
-  /* package */
-  DrmInitData(Parcel in) {
+  /* package */ DrmInitData(Parcel in) {
     schemeType = in.readString();
     schemeDatas = Util.castNonNull(in.createTypedArray(SchemeData.CREATOR));
     schemeDataCount = schemeDatas.length;

File: library/common/src/main/java/com/google/android/exoplayer2/metadata/id3/ChapterTocFrame.java
Patch:
@@ -45,8 +45,7 @@ public ChapterTocFrame(String elementId, boolean isRoot, boolean isOrdered, Stri
     this.subFrames = subFrames;
   }
 
-  /* package */
-  ChapterTocFrame(Parcel in) {
+  /* package */ ChapterTocFrame(Parcel in) {
     super(ID);
     this.elementId = castNonNull(in.readString());
     this.isRoot = in.readByte() != 0;

File: library/common/src/main/java/com/google/android/exoplayer2/metadata/id3/MlltFrame.java
Patch:
@@ -45,8 +45,7 @@ public MlltFrame(
     this.millisecondsDeviations = millisecondsDeviations;
   }
 
-  /* package */
-  MlltFrame(Parcel in) {
+  /* package */ MlltFrame(Parcel in) {
     super(ID);
     this.mpegFramesBetweenReference = in.readInt();
     this.bytesBetweenReference = in.readInt();

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
Patch:
@@ -1756,7 +1756,7 @@ private boolean drainOutputBuffer(long positionUs, long elapsedRealtimeUs)
           processOutputMediaFormatChanged();
           return true;
         }
-        /* MediaCodec.INFO_TRY_AGAIN_LATER (-1) or unknown negative return value */
+        // MediaCodec.INFO_TRY_AGAIN_LATER (-1) or unknown negative return value.
         if (codecNeedsEosPropagation
             && (inputStreamEnded || codecDrainState == DRAIN_STATE_WAIT_END_OF_STREAM)) {
           processEndOfStream();

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DefaultDownloadIndex.java
Patch:
@@ -397,7 +397,7 @@ private Cursor getCursor(String selection, @Nullable String[] selectionArgs)
   }
 
   @VisibleForTesting
-  /* package*/ static String encodeStreamKeys(List<StreamKey> streamKeys) {
+  /* package */ static String encodeStreamKeys(List<StreamKey> streamKeys) {
     StringBuilder stringBuilder = new StringBuilder();
     for (int i = 0; i < streamKeys.size(); i++) {
       StreamKey streamKey = streamKeys.get(i);

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelector.java
Patch:
@@ -1088,8 +1088,7 @@ public static Parameters getDefaults(Context context) {
       this.rendererDisabledFlags = rendererDisabledFlags;
     }
 
-    /* package */
-    Parameters(Parcel in) {
+    /* package */ Parameters(Parcel in) {
       super(in);
       // Video
       this.maxVideoWidth = in.readInt();

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -3138,7 +3138,7 @@ public void seekToUnpreparedWindowWithMultiplePeriodsInConcatenationStartsAtCorr
     Timeline timeline =
         new FakeTimeline(
             new TimelineWindowDefinition(
-                /* periodCount =*/ 2,
+                /* periodCount= */ 2,
                 /* id= */ new Object(),
                 /* isSeekable= */ true,
                 /* isDynamic= */ false,
@@ -8760,7 +8760,7 @@ private static boolean containsEvent(
 
   // Internal classes.
 
-  /* {@link FakeRenderer} that can sleep and be woken-up. */
+  /** {@link FakeRenderer} that can sleep and be woken-up. */
   private static class FakeSleepRenderer extends FakeRenderer {
     private static final long WAKEUP_DEADLINE_MS = 60 * C.MICROS_PER_SECOND;
     private final AtomicBoolean sleepOnNextRender;

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/AnalyticsCollectorTest.java
Patch:
@@ -1002,8 +1002,8 @@ public void adPlayback() throws Exception {
     AtomicReference<AdPlaybackState> adPlaybackState =
         new AtomicReference<>(
             FakeTimeline.createAdPlaybackState(
-                /* adsPerAdGroup= */ 1, /* adGroupTimesUs...= */
-                windowOffsetInFirstPeriodUs,
+                /* adsPerAdGroup= */ 1,
+                /* adGroupTimesUs...= */ windowOffsetInFirstPeriodUs,
                 windowOffsetInFirstPeriodUs + 5 * C.MICROS_PER_SECOND,
                 C.TIME_END_OF_SOURCE));
     AtomicInteger playedAdCount = new AtomicInteger(0);

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/SimpleCacheTest.java
Patch:
@@ -643,7 +643,7 @@ public void getCachedBytes_withMultipleNonAdjacentSpans_returnsCachedBytes() thr
         .isEqualTo(10);
   }
 
-  /* Tests https://github.com/google/ExoPlayer/issues/3260 case. */
+  // Regression test for https://github.com/google/ExoPlayer/issues/3260.
   @Test
   public void exceptionDuringIndexStore_doesNotPreventEviction() throws Exception {
     CachedContentIndex contentIndex =

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/HlsMediaPeriodTest.java
Patch:
@@ -90,7 +90,7 @@ public void getSteamKeys_isCompatibleWithHlsMasterPlaylistFilter() {
                   .withParameters(/* windowIndex= */ 0, mediaPeriodId, /* mediaTimeOffsetMs= */ 0),
               mock(Allocator.class),
               mock(CompositeSequenceableLoaderFactory.class),
-              /* allowChunklessPreparation =*/ true,
+              /* allowChunklessPreparation= */ true,
               HlsMediaSource.METADATA_TYPE_ID3,
               /* useSessionKeys= */ false);
         };

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerNotificationManager.java
Patch:
@@ -571,7 +571,7 @@ public PlayerNotificationManager(
         notificationId,
         mediaDescriptionAdapter,
         notificationListener,
-        /* customActionReceiver*/ null);
+        /* customActionReceiver= */ null);
   }
 
   /**
@@ -599,7 +599,7 @@ public PlayerNotificationManager(
         channelId,
         notificationId,
         mediaDescriptionAdapter,
-        /* notificationListener */ null,
+        /* notificationListener= */ null,
         customActionReceiver);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DecoderAudioRenderer.java
Patch:
@@ -261,7 +261,7 @@ public void render(long positionUs, long elapsedRealtimeUs) throws ExoPlaybackEx
       try {
         audioSink.playToEndOfStream();
       } catch (AudioSink.WriteException e) {
-        throw createRendererException(e, inputFormat, e.isRecoverable);
+        throw createRendererException(e, e.format, e.isRecoverable);
       }
       return;
     }
@@ -307,7 +307,7 @@ public void render(long positionUs, long elapsedRealtimeUs) throws ExoPlaybackEx
       } catch (AudioSink.InitializationException e) {
         throw createRendererException(e, e.format, e.isRecoverable);
       } catch (AudioSink.WriteException e) {
-        throw createRendererException(e, inputFormat, e.isRecoverable);
+        throw createRendererException(e, e.format, e.isRecoverable);
       }
       decoderCounters.ensureUpdated();
     }
@@ -395,7 +395,7 @@ private boolean drainOutputBuffer()
         try {
           processEndOfStream();
         } catch (AudioSink.WriteException e) {
-          throw createRendererException(e, getOutputFormat(decoder), e.isRecoverable);
+          throw createRendererException(e, e.format, e.isRecoverable);
         }
       }
       return false;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -952,7 +952,7 @@ private void writeBuffer(ByteBuffer buffer, long avSyncPresentationTimeUs) throw
       if (isRecoverable) {
         maybeDisableOffload();
       }
-      WriteException e = new WriteException(error, isRecoverable);
+      WriteException e = new WriteException(error, configuration.inputFormat, isRecoverable);
       if (listener != null) {
         listener.onAudioSinkError(e);
       }

File: library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
Patch:
@@ -629,9 +629,7 @@ protected void renderToEndOfStream() throws ExoPlaybackException {
     try {
       audioSink.playToEndOfStream();
     } catch (AudioSink.WriteException e) {
-      @Nullable Format outputFormat = getOutputFormat();
-      throw createRendererException(
-          e, outputFormat != null ? outputFormat : getInputFormat(), e.isRecoverable);
+      throw createRendererException(e, e.format, e.isRecoverable);
     }
   }
 

File: library/core/src/test/java/com/google/android/exoplayer2/audio/MediaCodecAudioRendererTest.java
Patch:
@@ -310,7 +310,9 @@ protected void onOutputFormatChanged(Format format, @Nullable MediaFormat mediaF
     verify(audioSink, atLeastOnce()).setListener(listenerCaptor.capture());
     AudioSink.Listener audioSinkListener = listenerCaptor.getValue();
 
-    Exception error = new AudioSink.WriteException(/* errorCode= */ 1, /* isRecoverable= */ true);
+    Exception error =
+        new AudioSink.WriteException(
+            /* errorCode= */ 1, new Format.Builder().build(), /* isRecoverable= */ true);
     audioSinkListener.onAudioSinkError(error);
 
     shadowOf(Looper.getMainLooper()).idle();

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/amr/AmrExtractorParameterizedTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.google.android.exoplayer2.extractor.amr;
 
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
-import java.util.List;
+import com.google.common.collect.ImmutableList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.ParameterizedRobolectricTestRunner;
@@ -33,7 +33,7 @@
 public final class AmrExtractorParameterizedTest {
 
   @Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/flac/FlacExtractorTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
 import com.google.android.exoplayer2.testutil.ExtractorAsserts.AssertionConfig;
-import java.util.List;
+import com.google.common.collect.ImmutableList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.ParameterizedRobolectricTestRunner;
@@ -29,7 +29,7 @@
 public class FlacExtractorTest {
 
   @Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/flv/FlvExtractorTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.google.android.exoplayer2.extractor.flv;
 
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
-import java.util.List;
+import com.google.common.collect.ImmutableList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.ParameterizedRobolectricTestRunner;
@@ -28,7 +28,7 @@
 public final class FlvExtractorTest {
 
   @Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractorTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.google.android.exoplayer2.extractor.mkv;
 
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
-import java.util.List;
+import com.google.common.collect.ImmutableList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.ParameterizedRobolectricTestRunner;
@@ -28,7 +28,7 @@
 public final class MatroskaExtractorTest {
 
   @Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/mp3/Mp3ExtractorTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
 import com.google.android.exoplayer2.testutil.ExtractorAsserts.AssertionConfig;
-import java.util.List;
+import com.google.common.collect.ImmutableList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.ParameterizedRobolectricTestRunner;
@@ -29,7 +29,7 @@
 public final class Mp3ExtractorTest {
 
   @Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4ExtractorTest.java
Patch:
@@ -33,7 +33,7 @@
 public final class FragmentedMp4ExtractorTest {
 
   @Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/mp4/Mp4ExtractorTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.google.android.exoplayer2.extractor.mp4;
 
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
-import java.util.List;
+import com.google.common.collect.ImmutableList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.ParameterizedRobolectricTestRunner;
@@ -28,7 +28,7 @@
 public final class Mp4ExtractorTest {
 
   @Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ogg/OggExtractorParameterizedTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.google.android.exoplayer2.extractor.ogg;
 
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
-import java.util.List;
+import com.google.common.collect.ImmutableList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.ParameterizedRobolectricTestRunner;
@@ -32,7 +32,7 @@
 public final class OggExtractorParameterizedTest {
 
   @Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/rawcc/RawCcExtractorTest.java
Patch:
@@ -18,7 +18,7 @@
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
 import com.google.android.exoplayer2.util.MimeTypes;
-import java.util.List;
+import com.google.common.collect.ImmutableList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.ParameterizedRobolectricTestRunner;
@@ -28,7 +28,7 @@
 public final class RawCcExtractorTest {
 
   @ParameterizedRobolectricTestRunner.Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ts/Ac3ExtractorTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.google.android.exoplayer2.extractor.ts;
 
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
-import java.util.List;
+import com.google.common.collect.ImmutableList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.ParameterizedRobolectricTestRunner;
@@ -28,7 +28,7 @@
 public final class Ac3ExtractorTest {
 
   @Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ts/Ac4ExtractorTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.google.android.exoplayer2.extractor.ts;
 
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
-import java.util.List;
+import com.google.common.collect.ImmutableList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.ParameterizedRobolectricTestRunner;
@@ -28,7 +28,7 @@
 public final class Ac4ExtractorTest {
 
   @Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractorTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
 import com.google.android.exoplayer2.testutil.ExtractorAsserts.AssertionConfig;
-import java.util.List;
+import com.google.common.collect.ImmutableList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.ParameterizedRobolectricTestRunner;
@@ -29,7 +29,7 @@
 public final class AdtsExtractorTest {
 
   @Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ts/PsExtractorTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.google.android.exoplayer2.extractor.ts;
 
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
-import java.util.List;
+import com.google.common.collect.ImmutableList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.ParameterizedRobolectricTestRunner;
@@ -28,7 +28,7 @@
 public final class PsExtractorTest {
 
   @Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ts/TsExtractorTest.java
Patch:
@@ -36,7 +36,7 @@
 import com.google.android.exoplayer2.testutil.TestUtil;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import com.google.android.exoplayer2.util.TimestampAdjuster;
-import java.util.List;
+import com.google.common.collect.ImmutableList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.ParameterizedRobolectricTestRunner;
@@ -48,7 +48,7 @@
 public final class TsExtractorTest {
 
   @Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/wav/WavExtractorTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
 import com.google.android.exoplayer2.testutil.ExtractorAsserts.AssertionConfig;
-import java.util.List;
+import com.google.common.collect.ImmutableList;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.ParameterizedRobolectricTestRunner;
@@ -27,7 +27,7 @@
 public final class WavExtractorTest {
 
   @ParameterizedRobolectricTestRunner.Parameters(name = "{0}")
-  public static List<Object[]> params() {
+  public static ImmutableList<ExtractorAsserts.SimulationConfig> params() {
     return ExtractorAsserts.configs();
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DecoderAudioRenderer.java
Patch:
@@ -305,7 +305,7 @@ public void render(long positionUs, long elapsedRealtimeUs) throws ExoPlaybackEx
       } catch (AudioSink.ConfigurationException e) {
         throw createRendererException(e, e.format);
       } catch (AudioSink.InitializationException e) {
-        throw createRendererException(e, inputFormat, e.isRecoverable);
+        throw createRendererException(e, e.format, e.isRecoverable);
       } catch (AudioSink.WriteException e) {
         throw createRendererException(e, inputFormat, e.isRecoverable);
       }

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -1960,6 +1960,7 @@ public AudioTrack buildAudioTrack(
             outputSampleRate,
             outputChannelConfig,
             bufferSize,
+            inputFormat,
             /* isRecoverable= */ outputModeIsOffload(),
             e);
       }
@@ -1977,6 +1978,7 @@ public AudioTrack buildAudioTrack(
             outputSampleRate,
             outputChannelConfig,
             bufferSize,
+            inputFormat,
             /* isRecoverable= */ outputModeIsOffload(),
             /* audioTrackException= */ null);
       }

File: library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
Patch:
@@ -608,7 +608,7 @@ protected boolean processOutputBuffer(
     try {
       fullyConsumed = audioSink.handleBuffer(buffer, bufferPresentationTimeUs, sampleCount);
     } catch (InitializationException e) {
-      throw createRendererException(e, format, e.isRecoverable);
+      throw createRendererException(e, e.format, e.isRecoverable);
     } catch (WriteException e) {
       throw createRendererException(e, format, e.isRecoverable);
     }

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdTagLoader.java
Patch:
@@ -769,6 +769,7 @@ private void resumeContentInternal() {
   private void handlePlayerStateChanged(boolean playWhenReady, @Player.State int playbackState) {
     if (playingAd && imaAdState == IMA_AD_STATE_PLAYING) {
       if (!bufferingAd && playbackState == Player.STATE_BUFFERING) {
+        bufferingAd = true;
         AdMediaInfo adMediaInfo = checkNotNull(imaAdMediaInfo);
         for (int i = 0; i < adCallbacks.size(); i++) {
           adCallbacks.get(i).onBuffering(adMediaInfo);

File: library/core/src/test/java/com/google/android/exoplayer2/MediaSourceListTest.java
Patch:
@@ -30,7 +30,6 @@
 import com.google.android.exoplayer2.source.ShuffleOrder;
 import com.google.android.exoplayer2.testutil.FakeMediaSource;
 import com.google.android.exoplayer2.testutil.FakeShuffleOrder;
-import com.google.android.exoplayer2.testutil.FakeTimeline;
 import com.google.android.exoplayer2.util.Util;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -528,11 +527,11 @@ private static void assertFirstWindowInChildIndices(
   }
 
   private static List<MediaSourceList.MediaSourceHolder> createFakeHolders() {
-    MediaSource fakeMediaSource = new FakeMediaSource(new FakeTimeline(1));
     List<MediaSourceList.MediaSourceHolder> holders = new ArrayList<>();
     for (int i = 0; i < MEDIA_SOURCE_LIST_SIZE; i++) {
       holders.add(
-          new MediaSourceList.MediaSourceHolder(fakeMediaSource, /* useLazyPreparation= */ true));
+          new MediaSourceList.MediaSourceHolder(
+              new FakeMediaSource(), /* useLazyPreparation= */ true));
     }
     return holders;
   }

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/PlaybackStatsListenerTest.java
Patch:
@@ -50,7 +50,7 @@ public final class PlaybackStatsListenerTest {
           /* currentMediaPeriodId= */ null,
           /* currentPlaybackPositionMs= */ 0,
           /* totalBufferedDurationMs= */ 0);
-  private static final Timeline TEST_TIMELINE = new FakeTimeline(/* windowCount= */ 1);
+  private static final Timeline TEST_TIMELINE = new FakeTimeline();
   private static final MediaSource.MediaPeriodId TEST_MEDIA_PERIOD_ID =
       new MediaSource.MediaPeriodId(
           TEST_TIMELINE.getPeriod(/* periodIndex= */ 0, new Timeline.Period(), /* setIds= */ true)

File: library/core/src/test/java/com/google/android/exoplayer2/source/ConcatenatingMediaSourceTest.java
Patch:
@@ -854,7 +854,7 @@ public void duplicateMediaSources() throws IOException, InterruptedException {
 
   @Test
   public void duplicateNestedMediaSources() throws IOException, InterruptedException {
-    Timeline childTimeline = new FakeTimeline(/* windowCount= */ 1);
+    Timeline childTimeline = new FakeTimeline();
     FakeMediaSource childSource = new FakeMediaSource(childTimeline);
     ConcatenatingMediaSource nestedConcatenation = new ConcatenatingMediaSource();
 

File: library/core/src/test/java/com/google/android/exoplayer2/trackselection/DefaultTrackSelectorTest.java
Patch:
@@ -110,7 +110,7 @@ public final class DefaultTrackSelectorTest {
   private static final TrackSelection[] TRACK_SELECTIONS_WITH_NO_SAMPLE_RENDERER =
       new TrackSelection[] {new FixedTrackSelection(VIDEO_TRACK_GROUP, 0), null};
 
-  private static final Timeline TIMELINE = new FakeTimeline(/* windowCount= */ 1);
+  private static final Timeline TIMELINE = new FakeTimeline();
 
   private static MediaPeriodId periodId;
 

File: library/core/src/test/java/com/google/android/exoplayer2/trackselection/MappingTrackSelectorTest.java
Patch:
@@ -52,7 +52,7 @@ public final class MappingTrackSelectorTest {
   private static final TrackGroup AUDIO_TRACK_GROUP = buildTrackGroup(MimeTypes.AUDIO_AAC);
   private static final TrackGroup METADATA_TRACK_GROUP = buildTrackGroup(MimeTypes.APPLICATION_ID3);
 
-  private static final Timeline TIMELINE = new FakeTimeline(/* windowCount= */ 1);
+  private static final Timeline TIMELINE = new FakeTimeline();
 
   private static MediaPeriodId periodId;
 

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -1259,7 +1259,7 @@ private PlaybackInfo maskTimelineAndPosition(
               /* totalBufferedDurationUs= */ 0,
               TrackGroupArray.EMPTY,
               emptyTrackSelectorResult,
-              ImmutableList.of());
+              /* staticMetadata= */ ImmutableList.of());
       playbackInfo = playbackInfo.copyWithLoadingMediaPeriodId(dummyMediaPeriodId);
       playbackInfo.bufferedPositionUs = playbackInfo.positionUs;
       return playbackInfo;

File: library/core/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -512,8 +512,8 @@ default void onTracksChanged(
      *
      * <p>The provided {@code metadataList} is an immutable list of {@link Metadata} instances,
      * where the elements correspond to the {@link #getCurrentTrackSelections() current track
-     * selections}, or an empty list if there are no track selections or the implementation does not
-     * support metadata.
+     * selections}, or an empty list if there are no track selections or the selected tracks contain
+     * no static metadata.
      *
      * <p>The metadata is considered static in the sense that it comes from the tracks' declared
      * Formats, rather than being timed (or dynamic) metadata, which is represented within a
@@ -1433,7 +1433,7 @@ public int get(int index) {
    *
    * <p>The returned {@code metadataList} is an immutable list of {@link Metadata} instances, where
    * the elements correspond to the {@link #getCurrentTrackSelections() current track selections},
-   * or an empty list if there are no track selections or the implementation does not support
+   * or an empty list if there are no track selections or the selected tracks contain no static
    * metadata.
    *
    * <p>This metadata is considered static in that it comes from the tracks' declared Formats,

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsListener.java
Patch:
@@ -604,7 +604,7 @@ default void onTracksChanged(
    * <p>The provided {@code metadataList} is an immutable list of {@link Metadata} instances, where
    * the elements correspond to the current track selections (as returned by {@link
    * #onTracksChanged(EventTime, TrackGroupArray, TrackSelectionArray)}, or an empty list if there
-   * are no track selections or the implementation does not support metadata.
+   * are no track selections or the selected tracks contain no static metadata.
    *
    * <p>The metadata is considered static in the sense that it comes from the tracks' declared
    * Formats, rather than being timed (or dynamic) metadata, which is represented within a metadata

File: library/common/src/test/java/com/google/android/exoplayer2/MediaItemTest.java
Patch:
@@ -312,7 +312,7 @@ public void builderSetLiveTargetOffsetMs_setsLiveTargetOffsetMs() {
     MediaItem mediaItem =
         new MediaItem.Builder().setUri(URI_STRING).setLiveTargetOffsetMs(10_000).build();
 
-    assertThat(mediaItem.liveConfiguration.targetLiveOffsetMs).isEqualTo(10_000);
+    assertThat(mediaItem.liveConfiguration.targetOffsetMs).isEqualTo(10_000);
   }
 
   @Test
@@ -336,15 +336,15 @@ public void builderSetMinLiveOffset_setsMinLiveOffset() {
     MediaItem mediaItem =
         new MediaItem.Builder().setUri(URI_STRING).setLiveMinOffsetMs(1234).build();
 
-    assertThat(mediaItem.liveConfiguration.minLiveOffsetMs).isEqualTo(1234);
+    assertThat(mediaItem.liveConfiguration.minOffsetMs).isEqualTo(1234);
   }
 
   @Test
   public void builderSetMaxLiveOffset_setsMaxLiveOffset() {
     MediaItem mediaItem =
         new MediaItem.Builder().setUri(URI_STRING).setLiveMaxOffsetMs(1234).build();
 
-    assertThat(mediaItem.liveConfiguration.maxLiveOffsetMs).isEqualTo(1234);
+    assertThat(mediaItem.liveConfiguration.maxOffsetMs).isEqualTo(1234);
   }
 
   @Test

File: library/core/src/main/java/com/google/android/exoplayer2/DefaultLivePlaybackSpeedControl.java
Patch:
@@ -295,9 +295,9 @@ private DefaultLivePlaybackSpeedControl(
 
   @Override
   public void setLiveConfiguration(LiveConfiguration liveConfiguration) {
-    mediaConfigurationTargetLiveOffsetUs = C.msToUs(liveConfiguration.targetLiveOffsetMs);
-    minTargetLiveOffsetUs = C.msToUs(liveConfiguration.minLiveOffsetMs);
-    maxTargetLiveOffsetUs = C.msToUs(liveConfiguration.maxLiveOffsetMs);
+    mediaConfigurationTargetLiveOffsetUs = C.msToUs(liveConfiguration.targetOffsetMs);
+    minTargetLiveOffsetUs = C.msToUs(liveConfiguration.minOffsetMs);
+    maxTargetLiveOffsetUs = C.msToUs(liveConfiguration.maxOffsetMs);
     minPlaybackSpeed =
         liveConfiguration.minPlaybackSpeed != C.RATE_UNSET
             ? liveConfiguration.minPlaybackSpeed

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/amr/AmrExtractorNonParameterizedTest.java
Patch:
@@ -176,14 +176,14 @@ public void read_amrWb_returnParserException_forInvalidFrameHeader() throws IOEx
   }
 
   private byte[] newWideBandAmrFrameWithType(int frameType) {
-    byte frameHeader = (byte) ((frameType << 3) & (0b01111100));
+    byte frameHeader = (byte) ((frameType << 3) & 0b01111100);
     int frameContentInBytes = frameSizeBytesByTypeWb(frameType) - 1;
 
     return joinData(new byte[] {frameHeader}, randomBytesArrayWithLength(frameContentInBytes));
   }
 
   private byte[] newNarrowBandAmrFrameWithType(int frameType) {
-    byte frameHeader = (byte) ((frameType << 3) & (0b01111100));
+    byte frameHeader = (byte) ((frameType << 3) & 0b01111100);
     int frameContentInBytes = frameSizeBytesByTypeNb(frameType) - 1;
 
     return joinData(new byte[] {frameHeader}, randomBytesArrayWithLength(frameContentInBytes));

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4ExtractorTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.robolectric.ParameterizedRobolectricTestRunner.Parameter;
 import org.robolectric.ParameterizedRobolectricTestRunner.Parameters;
 
-/** Unit test for {@link FragmentedMp4Extractor}. */
+/** Tests for {@link FragmentedMp4Extractor} that test behaviours where sniffing must be tested. */
 @RunWith(ParameterizedRobolectricTestRunner.class)
 public final class FragmentedMp4ExtractorTest {
 

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/MediaSessionUtilTest.java
Patch:
@@ -21,7 +21,6 @@
 import android.content.Context;
 import android.support.v4.media.session.MediaControllerCompat;
 import android.support.v4.media.session.MediaSessionCompat;
-import androidx.annotation.NonNull;
 import androidx.media2.common.SessionPlayer;
 import androidx.media2.common.SessionPlayer.PlayerResult;
 import androidx.media2.session.MediaSession;
@@ -57,7 +56,7 @@ public void getSessionCompatToken_withMediaControllerCompat_returnsValidToken()
         playerTestRule.getExecutor(),
         new SessionPlayer.PlayerCallback() {
           @Override
-          public void onPlayerStateChanged(@NonNull SessionPlayer player, int playerState) {
+          public void onPlayerStateChanged(SessionPlayer player, int playerState) {
             if (playerState == SessionPlayer.PLAYER_STATE_PLAYING) {
               latch.countDown();
             }

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/MediaSessionUtil.java
Patch:
@@ -23,7 +23,7 @@
 public final class MediaSessionUtil {
 
   /** Gets the {@link MediaSessionCompat.Token} from the {@link MediaSession}. */
-  // TODO(b/152764014): Deprecate this API when MediaSession#getSessionCompatToken() is released.
+  // TODO(internal b/160846312): Remove lint/warning suppression once we depend on media2 1.1.0.
   public static MediaSessionCompat.Token getSessionCompatToken(MediaSession mediaSession) {
     @SuppressLint("RestrictedApi")
     @SuppressWarnings("RestrictTo")

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/SessionCallback.java
Patch:
@@ -227,7 +227,7 @@ private SessionCommandGroup buildAllowedCommands(
     }
 
     build.addAllPredefinedCommands(SessionCommand.COMMAND_VERSION_1);
-    // TODO: Use removeCommand(int) when it's added [Internal: b/142848015].
+    // TODO(internal b/142848015): Use removeCommand(int) when it's added.
     if (mediaItemProvider == null) {
       build.removeCommand(new SessionCommand(SessionCommand.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM));
       build.removeCommand(new SessionCommand(SessionCommand.COMMAND_CODE_PLAYER_SET_PLAYLIST));
@@ -348,6 +348,8 @@ public void onShuffleModeChanged(SessionPlayer player, int shuffleMode) {
       updateAllowedCommands();
     }
 
+    // TODO(internal b/160846312): Remove warning suppression and mark item @Nullable once we depend
+    // on media2 1.2.0.
     @Override
     @SuppressWarnings("nullness:override.param.invalid")
     public void onCurrentMediaItemChanged(SessionPlayer player, MediaItem item) {

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/SessionCallback.java
Patch:
@@ -349,6 +349,7 @@ public void onShuffleModeChanged(SessionPlayer player, int shuffleMode) {
     }
 
     @Override
+    @SuppressWarnings("nullness:override.param.invalid")
     public void onCurrentMediaItemChanged(SessionPlayer player, MediaItem item) {
       currentMediaItemBuffered = isBufferedState(player.getBufferingState());
       updateAllowedCommands();

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -735,11 +735,12 @@ public com.google.ads.interactivemedia.v3.api.AdsLoader createAdsLoader(
 
     /**
      * Returns a language code that's suitable for passing to {@link ImaSdkSettings#setLanguage} and
-     * corresponds to the device's {@link Locale#getDefault() default Locale}.
+     * corresponds to the device's {@link Locale#getDefault() default Locale}. IMA will fall back to
+     * its default language code ("en") if the value returned is unsupported.
      */
     // TODO: It may be possible to define a better mapping onto IMA's supported language codes. See:
     // https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/localization.
-    // IMA will fall back to its default language code ("en") if the value returned is unsupported.
+    // [Internal ref: b/174042000] will help if implemented.
     private static String getImaLanguageCodeForDefaultLocale() {
       return Util.splitAtFirst(Util.getSystemLanguageCodes()[0], "-")[0];
     }

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DecoderAudioRenderer.java
Patch:
@@ -300,8 +300,10 @@ public void render(long positionUs, long elapsedRealtimeUs) throws ExoPlaybackEx
         while (drainOutputBuffer()) {}
         while (feedInputBuffer()) {}
         TraceUtil.endSection();
-      } catch (DecoderException | AudioSink.ConfigurationException e) {
+      } catch (DecoderException e) {
         throw createRendererException(e, inputFormat);
+      } catch (AudioSink.ConfigurationException e) {
+        throw createRendererException(e, e.format);
       } catch (AudioSink.InitializationException e) {
         throw createRendererException(e, inputFormat, e.isRecoverable);
       } catch (AudioSink.WriteException e) {

File: library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
Patch:
@@ -436,7 +436,7 @@ protected void onOutputFormatChanged(Format format, @Nullable MediaFormat mediaF
     try {
       audioSink.configure(audioSinkInputFormat, /* specifiedBufferSize= */ 0, channelMap);
     } catch (AudioSink.ConfigurationException e) {
-      throw createRendererException(e, format);
+      throw createRendererException(e, e.format);
     }
   }
 

File: library/core/src/test/java/com/google/android/exoplayer2/audio/MediaCodecAudioRendererTest.java
Patch:
@@ -236,7 +236,7 @@ protected void onOutputFormatChanged(Format format, @Nullable MediaFormat mediaF
             if (!format.equals(AUDIO_AAC)) {
               setPendingPlaybackException(
                   ExoPlaybackException.createForRenderer(
-                      new AudioSink.ConfigurationException("Test"),
+                      new AudioSink.ConfigurationException("Test", format),
                       "rendererName",
                       /* rendererIndex= */ 0,
                       format,

File: library/common/src/main/java/com/google/android/exoplayer2/util/ParsableByteArray.java
Patch:
@@ -526,8 +526,8 @@ public String readDelimiterTerminatedString(char delimiter) {
    * Reads a line of text.
    *
    * <p>A line is considered to be terminated by any one of a carriage return ('\r'), a line feed
-   * ('\n'), or a carriage return followed immediately by a line feed ('\r\n'). The system's default
-   * charset (UTF-8) is used. This method discards leading UTF-8 byte order marks, if present.
+   * ('\n'), or a carriage return followed immediately by a line feed ('\r\n'). The UTF-8 charset is
+   * used. This method discards leading UTF-8 byte order marks, if present.
    *
    * @return The line not including any line-termination characters, or null if the end of the data
    *     has already been reached.

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -327,6 +327,7 @@ private List<MediaItem> createMediaItems(Intent intent) {
 
       if (!Util.checkCleartextTrafficPermitted(mediaItem)) {
         showToast(R.string.error_cleartext_not_permitted);
+        finish();
         return Collections.emptyList();
       }
       if (Util.maybeRequestReadExternalStoragePermission(/* activity= */ this, mediaItem)) {

File: extensions/cronet/src/main/java/com/google/android/exoplayer2/ext/cronet/CronetDataSource.java
Patch:
@@ -506,7 +506,9 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
       if (dataSpec.length != C.LENGTH_UNSET) {
         bytesRemaining = dataSpec.length;
       } else {
-        bytesRemaining = getContentLength(responseInfo);
+        long contentLength = getContentLength(responseInfo);
+        bytesRemaining =
+            contentLength != C.LENGTH_UNSET ? (contentLength - bytesToSkip) : C.LENGTH_UNSET;
       }
     } else {
       // If the response is compressed then the content length will be that of the compressed data

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaPeriod.java
Patch:
@@ -445,6 +445,9 @@ public void onContinueLoadingRequested(HlsSampleStreamWrapper sampleStreamWrappe
 
   @Override
   public void onPlaylistChanged() {
+    for (HlsSampleStreamWrapper streamWrapper : sampleStreamWrappers) {
+      streamWrapper.onPlaylistUpdated();
+    }
     callback.onContinueLoadingRequested(this);
   }
 

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -325,6 +325,7 @@ private List<MediaItem> createMediaItems(Intent intent) {
 
       if (!Util.checkCleartextTrafficPermitted(mediaItem)) {
         showToast(R.string.error_cleartext_not_permitted);
+        finish();
         return Collections.emptyList();
       }
       if (Util.maybeRequestReadExternalStoragePermission(/* activity= */ this, mediaItem)) {

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -1689,7 +1689,6 @@ public static int getAudioUsageForStreamType(@C.StreamType int streamType) {
         return C.USAGE_ASSISTANCE_SONIFICATION;
       case C.STREAM_TYPE_VOICE_CALL:
         return C.USAGE_VOICE_COMMUNICATION;
-      case C.STREAM_TYPE_USE_DEFAULT:
       case C.STREAM_TYPE_MUSIC:
       default:
         return C.USAGE_MEDIA;
@@ -1710,7 +1709,6 @@ public static int getAudioContentTypeForStreamType(@C.StreamType int streamType)
         return C.CONTENT_TYPE_SONIFICATION;
       case C.STREAM_TYPE_VOICE_CALL:
         return C.CONTENT_TYPE_SPEECH;
-      case C.STREAM_TYPE_USE_DEFAULT:
       case C.STREAM_TYPE_MUSIC:
       default:
         return C.CONTENT_TYPE_MUSIC;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/SceneRenderer.java
Patch:
@@ -54,8 +54,8 @@
   private @MonotonicNonNull SurfaceTexture surfaceTexture;
 
   // Used by other threads only
-  private volatile @C.StreamType int defaultStereoMode;
-  private @C.StreamType int lastStereoMode;
+  @C.StereoMode private volatile int defaultStereoMode;
+  @C.StereoMode private int lastStereoMode;
   @Nullable private byte[] lastProjectionData;
 
   // Methods called on any thread.

File: extensions/mediasession/src/main/java/com/google/android/exoplayer2/ext/mediasession/MediaSessionConnector.java
Patch:
@@ -1147,6 +1147,8 @@ public void onPlay() {
         if (player.getPlaybackState() == Player.STATE_IDLE) {
           if (playbackPreparer != null) {
             playbackPreparer.onPrepare(/* playWhenReady= */ true);
+          } else {
+            controlDispatcher.dispatchPrepare(player);
           }
         } else if (player.getPlaybackState() == Player.STATE_ENDED) {
           seekTo(player, player.getCurrentWindowIndex(), C.TIME_UNSET);

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -705,7 +705,9 @@ public void requestAds(DataSpec adTagDataSpec, @Nullable ViewGroup adViewGroup)
       if (adTagUri != null) {
         adTagDataSpec = new DataSpec(adTagUri);
       } else if (adsResponse != null) {
-        adTagDataSpec = new DataSpec(Util.getDataUriForString(adsResponse, "text/xml"));
+        adTagDataSpec =
+            new DataSpec(
+                Util.getDataUriForString(/* mimeType= */ "text/xml", /* data= */ adsResponse));
       } else {
         throw new IllegalStateException();
       }

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaSourceDrmHelper.java
Patch:
@@ -17,7 +17,6 @@
 
 import static com.google.android.exoplayer2.ExoPlayerLibraryInfo.DEFAULT_USER_AGENT;
 import static com.google.android.exoplayer2.drm.DefaultDrmSessionManager.MODE_PLAYBACK;
-import static com.google.android.exoplayer2.util.Util.castNonNull;
 
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.MediaItem;
@@ -68,7 +67,7 @@ public DrmSessionManager create(MediaItem mediaItem) {
     Assertions.checkNotNull(mediaItem.playbackProperties);
     @Nullable
     MediaItem.DrmConfiguration drmConfiguration = mediaItem.playbackProperties.drmConfiguration;
-    if (drmConfiguration == null || drmConfiguration.licenseUri == null || Util.SDK_INT < 18) {
+    if (drmConfiguration == null || Util.SDK_INT < 18) {
       return DrmSessionManager.getDummyDrmSessionManager();
     }
     HttpDataSource.Factory dataSourceFactory =
@@ -77,7 +76,7 @@ public DrmSessionManager create(MediaItem mediaItem) {
             : new DefaultHttpDataSourceFactory(userAgent != null ? userAgent : DEFAULT_USER_AGENT);
     HttpMediaDrmCallback httpDrmCallback =
         new HttpMediaDrmCallback(
-            castNonNull(drmConfiguration.licenseUri).toString(),
+            drmConfiguration.licenseUri == null ? null : drmConfiguration.licenseUri.toString(),
             drmConfiguration.forceDefaultLicenseUri,
             dataSourceFactory);
     for (Map.Entry<String, String> entry : drmConfiguration.requestHeaders.entrySet()) {

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -871,6 +871,7 @@ public void release() {
       if (configuration.applicationAdErrorListener != null) {
         adsLoader.removeAdErrorListener(configuration.applicationAdErrorListener);
       }
+      adsLoader.release();
     }
     imaPausedContent = false;
     imaAdState = IMA_AD_STATE_NONE;

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -199,10 +199,10 @@ private static TsExtractor createTsExtractor(
       // Sometimes AAC and H264 streams are declared in TS chunks even though they don't really
       // exist. If we know from the codec attribute that they don't exist, then we can
       // explicitly ignore them even if they're declared.
-      if (!MimeTypes.AUDIO_AAC.equals(MimeTypes.getAudioMediaMimeType(codecs))) {
+      if (!MimeTypes.containsCodecsCorrespondingToMimeType(codecs, MimeTypes.AUDIO_AAC)) {
         payloadReaderFactoryFlags |= DefaultTsPayloadReaderFactory.FLAG_IGNORE_AAC_STREAM;
       }
-      if (!MimeTypes.VIDEO_H264.equals(MimeTypes.getVideoMediaMimeType(codecs))) {
+      if (!MimeTypes.containsCodecsCorrespondingToMimeType(codecs, MimeTypes.VIDEO_H264)) {
         payloadReaderFactoryFlags |= DefaultTsPayloadReaderFactory.FLAG_IGNORE_H264_STREAM;
       }
     }

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -125,6 +125,8 @@ public BundledHlsMediaChunkExtractor createExtractor(
         return new BundledHlsMediaChunkExtractor(extractor, format, timestampAdjuster);
       }
       if (fileType == FileTypes.TS) {
+        // Fall back on TsExtractor to handle TS streams with an EXT-X-MAP tag. See
+        // https://github.com/google/ExoPlayer/issues/8219.
         fallBackExtractor = extractor;
       }
     }

File: extensions/cronet/src/main/java/com/google/android/exoplayer2/ext/cronet/CronetDataSource.java
Patch:
@@ -506,7 +506,9 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
       if (dataSpec.length != C.LENGTH_UNSET) {
         bytesRemaining = dataSpec.length;
       } else {
-        bytesRemaining = getContentLength(responseInfo);
+        long contentLength = getContentLength(responseInfo);
+        bytesRemaining =
+            contentLength != C.LENGTH_UNSET ? (contentLength - bytesToSkip) : C.LENGTH_UNSET;
       }
     } else {
       // If the response is compressed then the content length will be that of the compressed data

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/StubExoPlayer.java
Patch:
@@ -97,6 +97,7 @@ public int getPlaybackSuppressionReason() {
     throw new UnsupportedOperationException();
   }
 
+  /** @deprecated Use {@link #getPlayerError()} instead. */
   @Deprecated
   @Override
   public ExoPlaybackException getPlaybackError() {

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -1692,7 +1692,6 @@ public static int getAudioUsageForStreamType(@C.StreamType int streamType) {
         return C.USAGE_ASSISTANCE_SONIFICATION;
       case C.STREAM_TYPE_VOICE_CALL:
         return C.USAGE_VOICE_COMMUNICATION;
-      case C.STREAM_TYPE_USE_DEFAULT:
       case C.STREAM_TYPE_MUSIC:
       default:
         return C.USAGE_MEDIA;
@@ -1713,7 +1712,6 @@ public static int getAudioContentTypeForStreamType(@C.StreamType int streamType)
         return C.CONTENT_TYPE_SONIFICATION;
       case C.STREAM_TYPE_VOICE_CALL:
         return C.CONTENT_TYPE_SPEECH;
-      case C.STREAM_TYPE_USE_DEFAULT:
       case C.STREAM_TYPE_MUSIC:
       default:
         return C.CONTENT_TYPE_MUSIC;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/SceneRenderer.java
Patch:
@@ -54,8 +54,8 @@
   private @MonotonicNonNull SurfaceTexture surfaceTexture;
 
   // Used by other threads only
-  private volatile @C.StreamType int defaultStereoMode;
-  private @C.StreamType int lastStereoMode;
+  @C.StereoMode private volatile int defaultStereoMode;
+  @C.StereoMode private int lastStereoMode;
   @Nullable private byte[] lastProjectionData;
 
   // Methods called on any thread.

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadCursor.java
Patch:
@@ -28,7 +28,7 @@ public interface DownloadCursor extends Closeable {
 
   /**
    * Returns the current position of the cursor in the download set. The value is zero-based. When
-   * the download set is first returned the cursor will be at positon -1, which is before the first
+   * the download set is first returned the cursor will be at position -1, which is before the first
    * download. After the last download is returned another call to next() will leave the cursor past
    * the last entry, at a position of count().
    *

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -341,7 +341,7 @@ public static DownloadHelper forMediaItem(Context context, MediaItem mediaItem)
    *     streams. This argument is required for adaptive streams and ignored for progressive
    *     streams.
    * @return A {@link DownloadHelper}.
-   * @throws IllegalStateException If the the corresponding module is missing for DASH, HLS or
+   * @throws IllegalStateException If the corresponding module is missing for DASH, HLS or
    *     SmoothStreaming media items.
    * @throws IllegalArgumentException If the {@code dataSourceFactory} is null for adaptive streams.
    */
@@ -370,7 +370,7 @@ public static DownloadHelper forMediaItem(
    *     streams. This argument is required for adaptive streams and ignored for progressive
    *     streams.
    * @return A {@link DownloadHelper}.
-   * @throws IllegalStateException If the the corresponding module is missing for DASH, HLS or
+   * @throws IllegalStateException If the corresponding module is missing for DASH, HLS or
    *     SmoothStreaming media items.
    * @throws IllegalArgumentException If the {@code dataSourceFactory} is null for adaptive streams.
    */
@@ -401,7 +401,7 @@ public static DownloadHelper forMediaItem(
    * @param drmSessionManager An optional {@link DrmSessionManager}. Used to help determine which
    *     tracks can be selected.
    * @return A {@link DownloadHelper}.
-   * @throws IllegalStateException If the the corresponding module is missing for DASH, HLS or
+   * @throws IllegalStateException If the corresponding module is missing for DASH, HLS or
    *     SmoothStreaming media items.
    * @throws IllegalArgumentException If the {@code dataSourceFactory} is null for adaptive streams.
    */

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -1051,7 +1051,7 @@ private static int parseTrun(
 
   private static int checkNonNegative(int value) throws ParserException {
     if (value < 0) {
-      throw new ParserException("Unexpected negtive value: " + value);
+      throw new ParserException("Unexpected negative value: " + value);
     }
     return value;
   }
@@ -1659,7 +1659,7 @@ public int getCurrentSampleSize() {
           : fragment.sampleSizeTable[currentSampleIndex];
     }
 
-    /** Returns the {@link C.BufferFlags} corresponding to the the current sample. */
+    /** Returns the {@link C.BufferFlags} corresponding to the current sample. */
     @C.BufferFlags
     public int getCurrentSampleFlags() {
       int flags =

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
Patch:
@@ -974,7 +974,7 @@ public TrackOutput track(int id, int type) {
    *
    * @param id The ID of the track.
    * @param type The type of the track, must be one of {@link #MAPPABLE_TYPES}.
-   * @return The the mapped {@link TrackOutput}, or null if it's not been created yet.
+   * @return The mapped {@link TrackOutput}, or null if it's not been created yet.
    */
   @Nullable
   private TrackOutput getMappedTrackOutput(int id, int type) {

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/HlsMediaSourceTest.java
Patch:
@@ -171,7 +171,7 @@ public void loadPlaylist_noTargetLiveOffsetDefined_fallbackToThreeTargetDuration
             + "#EXTINF:4.00000,\n"
             + "fileSequence3.ts\n"
             + "#EXT-X-SERVER-CONTROL:CAN-SKIP-UNTIL=24";
-    // The playlist finishes 1 second before the the current time, therefore there's a live edge
+    // The playlist finishes 1 second before the current time, therefore there's a live edge
     // offset of 1 second.
     SystemClock.setCurrentTimeMillis(Util.parseXsDateTime("2020-01-01T00:00:17.0+00:00"));
     HlsMediaSource.Factory factory = createHlsMediaSourceFactory(playlistUri, playlist);
@@ -277,7 +277,7 @@ public void loadPlaylist_holdBackInPlaylist_targetLiveOffsetFromHoldBack()
             + "fileSequence0.ts\n"
             + "#EXT-X-PART-INF:PART-TARGET=0.5\n"
             + "#EXT-X-SERVER-CONTROL:HOLD-BACK=12,PART-HOLD-BACK=3";
-    // The playlist finishes 1 second before the the current time.
+    // The playlist finishes 1 second before the current time.
     SystemClock.setCurrentTimeMillis(Util.parseXsDateTime("2020-01-01T00:00:05.0+00:00"));
     HlsMediaSource.Factory factory = createHlsMediaSourceFactory(playlistUri, playlist);
     MediaItem mediaItem = MediaItem.fromUri(playlistUri);

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeDataSet.java
Patch:
@@ -213,7 +213,7 @@ public List<Segment> getSegments() {
       return segments;
     }
 
-    /** Retuns whether unknown length is simulated */
+    /** Returns whether unknown length is simulated */
     public boolean isSimulatingUnknownLength() {
       return simulateUnknownLength;
     }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTimeline.java
Patch:
@@ -256,7 +256,7 @@ public static AdPlaybackState createAdPlaybackState(int adsPerAdGroup, long... a
             adPlaybackState.withAdUri(
                 /* adGroupIndex= */ i,
                 /* adIndexInAdGroup= */ j,
-                Uri.parse("https://ad/" + i + "/" + j));
+                Uri.parse("https://example.com/ad/" + i + "/" + j));
       }
       adDurationsUs[i] = new long[adsPerAdGroup];
       Arrays.fill(adDurationsUs[i], AD_DURATION_US);

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -872,7 +872,8 @@ private void updatePlaybackPositions() throws ExoPlaybackException {
         && isCurrentPeriodInMovingLiveWindow()
         && playbackInfo.playbackParameters.speed == 1f) {
       float adjustedSpeed =
-          livePlaybackSpeedControl.getAdjustedPlaybackSpeed(getCurrentLiveOffsetUs());
+          livePlaybackSpeedControl.getAdjustedPlaybackSpeed(
+              getCurrentLiveOffsetUs(), getTotalBufferedDurationUs());
       if (mediaClock.getPlaybackParameters().speed != adjustedSpeed) {
         mediaClock.setPlaybackParameters(playbackInfo.playbackParameters.withSpeed(adjustedSpeed));
       }

File: library/core/src/main/java/com/google/android/exoplayer2/LivePlaybackSpeedControl.java
Patch:
@@ -53,9 +53,10 @@ public interface LivePlaybackSpeedControl {
    * #getTargetLiveOffsetUs() target live offset}.
    *
    * @param liveOffsetUs The current live offset, in microseconds.
+   * @param bufferedDurationUs The duration of media that's currently buffered, in microseconds.
    * @return The adjusted playback speed.
    */
-  float getAdjustedPlaybackSpeed(long liveOffsetUs);
+  float getAdjustedPlaybackSpeed(long liveOffsetUs, long bufferedDurationUs);
 
   /**
    * Returns the current target live offset, in microseconds, or {@link C#TIME_UNSET} if no target

File: extensions/mediasession/src/main/java/com/google/android/exoplayer2/ext/mediasession/MediaSessionConnector.java
Patch:
@@ -1147,6 +1147,8 @@ public void onPlay() {
         if (player.getPlaybackState() == Player.STATE_IDLE) {
           if (playbackPreparer != null) {
             playbackPreparer.onPrepare(/* playWhenReady= */ true);
+          } else {
+            controlDispatcher.dispatchPrepare(player);
           }
         } else if (player.getPlaybackState() == Player.STATE_ENDED) {
           seekTo(player, player.getCurrentWindowIndex(), C.TIME_UNSET);

File: library/core/src/test/java/com/google/android/exoplayer2/source/ads/AdPlaybackStateTest.java
Patch:
@@ -31,12 +31,13 @@ public final class AdPlaybackStateTest {
 
   private static final long[] TEST_AD_GROUP_TMES_US = new long[] {0, C.msToUs(10_000)};
   private static final Uri TEST_URI = Uri.EMPTY;
+  private static final Object TEST_ADS_ID = new Object();
 
   private AdPlaybackState state;
 
   @Before
   public void setUp() {
-    state = new AdPlaybackState(TEST_AD_GROUP_TMES_US);
+    state = new AdPlaybackState(TEST_ADS_ID, TEST_AD_GROUP_TMES_US);
   }
 
   @Test

File: library/core/src/test/java/com/google/android/exoplayer2/source/ads/AdsMediaSourceTest.java
Patch:
@@ -77,7 +77,7 @@ public final class AdsMediaSourceTest {
       CONTENT_TIMELINE.getUidOfPeriod(/* periodIndex= */ 0);
 
   private static final AdPlaybackState AD_PLAYBACK_STATE =
-      new AdPlaybackState(/* adGroupTimesUs...= */ 0)
+      new AdPlaybackState(/* adsId= */ new Object(), /* adGroupTimesUs...= */ 0)
           .withContentDurationUs(CONTENT_DURATION_US)
           .withAdCount(/* adGroupIndex= */ 0, /* adCount= */ 1)
           .withAdUri(/* adGroupIndex= */ 0, /* adIndexInAdGroup= */ 0, Uri.EMPTY)

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTimeline.java
Patch:
@@ -246,7 +246,8 @@ public TimelineWindowDefinition(
    */
   public static AdPlaybackState createAdPlaybackState(int adsPerAdGroup, long... adGroupTimesUs) {
     int adGroupCount = adGroupTimesUs.length;
-    AdPlaybackState adPlaybackState = new AdPlaybackState(adGroupTimesUs);
+    AdPlaybackState adPlaybackState =
+        new AdPlaybackState(/* adsId= */ new Object(), adGroupTimesUs);
     long[][] adDurationsUs = new long[adGroupCount][];
     for (int i = 0; i < adGroupCount; i++) {
       adPlaybackState = adPlaybackState.withAdCount(/* adGroupIndex= */ i, adsPerAdGroup);

File: extensions/ima/src/test/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoaderTest.java
Patch:
@@ -265,7 +265,7 @@ public void startAndCallbacksAfterRelease() {
     imaAdsLoader.onPositionDiscontinuity(Player.DISCONTINUITY_REASON_SEEK);
     adEventListener.onAdEvent(getAdEvent(AdEventType.CONTENT_RESUME_REQUESTED, /* ad= */ null));
     imaAdsLoader.handlePrepareError(
-        /* adGroupIndex= */ 0, /* adIndexInAdGroup= */ 0, new IOException());
+        adsMediaSource, /* adGroupIndex= */ 0, /* adIndexInAdGroup= */ 0, new IOException());
   }
 
   @Test
@@ -836,7 +836,7 @@ public void stop_unregistersAllVideoControlOverlays() {
     imaAdsLoader.start(
         adsMediaSource, TEST_DATA_SPEC, TEST_ADS_ID, adViewProvider, adsLoaderListener);
     imaAdsLoader.requestAds(TEST_DATA_SPEC, adViewGroup);
-    imaAdsLoader.stop();
+    imaAdsLoader.stop(adsMediaSource);
 
     InOrder inOrder = inOrder(mockAdDisplayContainer);
     inOrder.verify(mockAdDisplayContainer).registerFriendlyObstruction(mockFriendlyObstruction);

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylistParserTest.java
Patch:
@@ -354,6 +354,7 @@ public void parseMediaPlaylist_withParts_parsesPartWithAllAttributes() throws IO
     assertThat(firstPart.durationUs).isEqualTo(2_000_000);
     assertThat(firstPart.relativeStartTimeUs).isEqualTo(playlist.segments.get(0).durationUs);
     assertThat(firstPart.isIndependent).isTrue();
+    assertThat(firstPart.isPreload).isFalse();
     assertThat(firstPart.hasGapTag).isTrue();
     assertThat(firstPart.url).isEqualTo("part267.1.ts");
     HlsMediaPlaylist.Part secondPart = playlist.segments.get(1).parts.get(1);
@@ -518,6 +519,7 @@ public void parseMediaPlaylist_withPreloadHintTypePart_hasPreloadPartWithAllAttr
     assertThat(preloadPart.byteRangeOffset).isEqualTo(1234);
     assertThat(preloadPart.initializationSegment.url).isEqualTo("map.mp4");
     assertThat(preloadPart.encryptionIV).isEqualTo("0x410C8AC18AA42EFA18B5155484F5FC34");
+    assertThat(preloadPart.isPreload).isTrue();
   }
 
   @Test
@@ -539,6 +541,7 @@ public void parseMediaPlaylist_withMultiplePreloadHintTypeParts_picksOnlyFirstPr
 
     assertThat(playlist.trailingParts).hasSize(2);
     assertThat(playlist.trailingParts.get(1).url).isEqualTo("filePart267.2.ts");
+    assertThat(playlist.trailingParts.get(1).isPreload).isTrue();
   }
 
   @Test

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/IntentUtil.java
Patch:
@@ -173,7 +173,9 @@ private static void addPlaybackPropertiesToIntent(
         .putExtra(MIME_TYPE_EXTRA + extrasKeySuffix, playbackProperties.mimeType)
         .putExtra(
             AD_TAG_URI_EXTRA + extrasKeySuffix,
-            playbackProperties.adTagUri != null ? playbackProperties.adTagUri.toString() : null);
+            playbackProperties.adsConfiguration != null
+                ? playbackProperties.adsConfiguration.adTagUri.toString()
+                : null);
     if (playbackProperties.drmConfiguration != null) {
       addDrmConfigurationToIntent(playbackProperties.drmConfiguration, intent, extrasKeySuffix);
     }

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
Patch:
@@ -252,7 +252,7 @@ private int getDownloadUnsupportedStringId(PlaylistHolder playlistHolder) {
     }
     MediaItem.PlaybackProperties playbackProperties =
         checkNotNull(playlistHolder.mediaItems.get(0).playbackProperties);
-    if (playbackProperties.adTagUri != null) {
+    if (playbackProperties.adsConfiguration != null) {
       return R.string.download_ads_unsupported;
     }
     String scheme = playbackProperties.uri.getScheme();

File: extensions/ima/src/androidTest/java/com/google/android/exoplayer2/ext/ima/ImaPlaybackTest.java
Patch:
@@ -248,6 +248,7 @@ protected MediaSource buildSource(
       return new AdsMediaSource(
           contentMediaSource,
           adTagDataSpec,
+          /* adsId= */ adTagDataSpec.uri,
           new DefaultMediaSourceFactory(dataSourceFactory),
           Assertions.checkNotNull(imaAdsLoader),
           new AdViewProvider() {

File: library/core/src/test/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactoryTest.java
Patch:
@@ -204,7 +204,7 @@ public void createMediaSource_withAdTagUri_callsAdsLoader() {
     MediaItem mediaItem = new MediaItem.Builder().setUri(URI_MEDIA).setAdTagUri(adTagUri).build();
     DefaultMediaSourceFactory defaultMediaSourceFactory =
         new DefaultMediaSourceFactory((Context) ApplicationProvider.getApplicationContext())
-            .setAdsLoaderProvider(ignoredAdTagUri -> mock(AdsLoader.class))
+            .setAdsLoaderProvider(ignoredAdsConfiguration -> mock(AdsLoader.class))
             .setAdViewProvider(mock(AdsLoader.AdViewProvider.class));
 
     MediaSource mediaSource = defaultMediaSourceFactory.createMediaSource(mediaItem);

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DecoderAudioRenderer.java
Patch:
@@ -603,8 +603,8 @@ private void maybeInitDecoder() throws ExoPlaybackException {
       if (mediaCrypto == null) {
         DrmSessionException drmError = decoderDrmSession.getError();
         if (drmError != null) {
-          // Continue for now. We may be able to avoid failure if the session recovers, or if a new
-          // input format causes the session to be replaced before it's used.
+          // Continue for now. We may be able to avoid failure if a new input format causes the
+          // session to be replaced without it having been used.
         } else {
           // The drm session isn't open yet.
           return;

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DrmSession.java
Patch:
@@ -66,12 +66,11 @@ public DrmSessionException(Throwable cause) {
   @Retention(RetentionPolicy.SOURCE)
   @IntDef({STATE_RELEASED, STATE_ERROR, STATE_OPENING, STATE_OPENED, STATE_OPENED_WITH_KEYS})
   @interface State {}
-  /**
-   * The session has been released.
-   */
+  /** The session has been released. This is a terminal state. */
   int STATE_RELEASED = 0;
   /**
    * The session has encountered an error. {@link #getError()} can be used to retrieve the cause.
+   * This is a terminal state.
    */
   int STATE_ERROR = 1;
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
Patch:
@@ -499,8 +499,8 @@ protected final void maybeInitCodecOrBypass() throws ExoPlaybackException {
         if (sessionMediaCrypto == null) {
           @Nullable DrmSessionException drmError = codecDrmSession.getError();
           if (drmError != null) {
-            // Continue for now. We may be able to avoid failure if the session recovers, or if a
-            // new input format causes the session to be replaced before it's used.
+            // Continue for now. We may be able to avoid failure if a new input format causes the
+            // session to be replaced without it having been used.
           } else {
             // The drm session isn't open yet.
             return;

File: library/core/src/main/java/com/google/android/exoplayer2/video/DecoderVideoRenderer.java
Patch:
@@ -661,8 +661,8 @@ private void maybeInitDecoder() throws ExoPlaybackException {
       if (mediaCrypto == null) {
         DrmSessionException drmError = decoderDrmSession.getError();
         if (drmError != null) {
-          // Continue for now. We may be able to avoid failure if the session recovers, or if a new
-          // input format causes the session to be replaced before it's used.
+          // Continue for now. We may be able to avoid failure if a new input format causes the
+          // session to be replaced without it having been used.
         } else {
           // The drm session isn't open yet.
           return;

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -458,7 +458,8 @@ private ImaAdsLoader(
         adTagUri != null
             ? new DataSpec(adTagUri)
             : adsResponse != null
-                ? new DataSpec(Util.getDataUriForString(adsResponse, "text/xml"))
+                ? new DataSpec(
+                    Util.getDataUriForString(/* mimeType= */ "text/xml", /* data= */ adsResponse))
                 : null;
     adTagDataSpec = EMPTY_AD_TAG_DATA_SPEC;
     supportedMimeTypes = ImmutableList.of();

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaSourceDrmHelper.java
Patch:
@@ -17,7 +17,6 @@
 
 import static com.google.android.exoplayer2.ExoPlayerLibraryInfo.DEFAULT_USER_AGENT;
 import static com.google.android.exoplayer2.drm.DefaultDrmSessionManager.MODE_PLAYBACK;
-import static com.google.android.exoplayer2.util.Util.castNonNull;
 
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.MediaItem;
@@ -68,7 +67,7 @@ public DrmSessionManager create(MediaItem mediaItem) {
     Assertions.checkNotNull(mediaItem.playbackProperties);
     @Nullable
     MediaItem.DrmConfiguration drmConfiguration = mediaItem.playbackProperties.drmConfiguration;
-    if (drmConfiguration == null || drmConfiguration.licenseUri == null || Util.SDK_INT < 18) {
+    if (drmConfiguration == null || Util.SDK_INT < 18) {
       return DrmSessionManager.getDummyDrmSessionManager();
     }
     HttpDataSource.Factory dataSourceFactory =
@@ -77,7 +76,7 @@ public DrmSessionManager create(MediaItem mediaItem) {
             : new DefaultHttpDataSourceFactory(userAgent != null ? userAgent : DEFAULT_USER_AGENT);
     HttpMediaDrmCallback httpDrmCallback =
         new HttpMediaDrmCallback(
-            castNonNull(drmConfiguration.licenseUri).toString(),
+            drmConfiguration.licenseUri == null ? null : drmConfiguration.licenseUri.toString(),
             drmConfiguration.forceDefaultLicenseUri,
             dataSourceFactory);
     for (Map.Entry<String, String> entry : drmConfiguration.requestHeaders.entrySet()) {

File: extensions/ima/src/test/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoaderTest.java
Patch:
@@ -172,6 +172,7 @@ public void teardown() {
   public void builder_overridesPlayerType() {
     when(mockImaSdkSettings.getPlayerType()).thenReturn("test player type");
     setupPlayback(CONTENT_TIMELINE, PREROLL_CUE_POINTS_SECONDS);
+    imaAdsLoader.start(adsLoaderListener, adViewProvider);
 
     verify(mockImaSdkSettings).setPlayerType("google/exo.ext.ima");
   }

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -871,6 +871,7 @@ public void release() {
       if (configuration.applicationAdErrorListener != null) {
         adsLoader.removeAdErrorListener(configuration.applicationAdErrorListener);
       }
+      adsLoader.release();
     }
     imaPausedContent = false;
     imaAdState = IMA_AD_STATE_NONE;

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
Patch:
@@ -222,7 +222,7 @@ public Factory setLivePresentationDelayMs(
     }
 
     /**
-     * Sets the {@link Player#getCurrentLiveOffset() target offset for live streams} that is used if
+     * Sets the target {@link Player#getCurrentLiveOffset() offset for live streams} that is used if
      * no value is defined in the {@link MediaItem} or the manifest.
      *
      * <p>The default value is {@link #DEFAULT_FALLBACK_TARGET_LIVE_OFFSET_MS}.

File: library/core/src/main/java/com/google/android/exoplayer2/text/tx3g/Tx3gDecoder.java
Patch:
@@ -185,6 +185,9 @@ private void applyStyleRecord(ParsableByteArray parsableByteArray,
     int fontFace = parsableByteArray.readUnsignedByte();
     parsableByteArray.skipBytes(1); // font size
     int colorRgba = parsableByteArray.readInt();
+    if (end > cueText.length()) {
+      end = cueText.length();
+    }
     attachFontFace(cueText, fontFace, defaultFontFace, start, end, SPAN_PRIORITY_HIGH);
     attachColor(cueText, colorRgba, defaultColorRgba, start, end, SPAN_PRIORITY_HIGH);
   }

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/DefaultHlsExtractorFactory.java
Patch:
@@ -199,10 +199,10 @@ private static TsExtractor createTsExtractor(
       // Sometimes AAC and H264 streams are declared in TS chunks even though they don't really
       // exist. If we know from the codec attribute that they don't exist, then we can
       // explicitly ignore them even if they're declared.
-      if (!MimeTypes.AUDIO_AAC.equals(MimeTypes.getAudioMediaMimeType(codecs))) {
+      if (!MimeTypes.containsCodecsCorrespondingToMimeType(codecs, MimeTypes.AUDIO_AAC)) {
         payloadReaderFactoryFlags |= DefaultTsPayloadReaderFactory.FLAG_IGNORE_AAC_STREAM;
       }
-      if (!MimeTypes.VIDEO_H264.equals(MimeTypes.getVideoMediaMimeType(codecs))) {
+      if (!MimeTypes.containsCodecsCorrespondingToMimeType(codecs, MimeTypes.VIDEO_H264)) {
         payloadReaderFactoryFlags |= DefaultTsPayloadReaderFactory.FLAG_IGNORE_H264_STREAM;
       }
     }

File: extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/DefaultMediaItemConverter.java
Patch:
@@ -45,7 +45,9 @@ public final class DefaultMediaItemConverter implements MediaItemConverter {
   @Override
   public MediaItem toMediaItem(MediaQueueItem item) {
     // `item` came from `toMediaQueueItem()` so the custom JSON data must be set.
-    return getMediaItem(Assertions.checkNotNull(item.getMedia().getCustomData()));
+    MediaInfo mediaInfo = item.getMedia();
+    Assertions.checkNotNull(mediaInfo);
+    return getMediaItem(Assertions.checkNotNull(mediaInfo.getCustomData()));
   }
 
   @Override

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -570,7 +570,8 @@ public StyledPlayerControlView(
     } else if (timeBarPlaceholder != null) {
       // Propagate attrs as timebarAttrs so that DefaultTimeBar's custom attributes are transferred,
       // but standard attributes (e.g. background) are not.
-      DefaultTimeBar defaultTimeBar = new DefaultTimeBar(context, null, 0, playbackAttrs);
+      DefaultTimeBar defaultTimeBar =
+          new DefaultTimeBar(context, null, 0, playbackAttrs, R.style.ExoStyledControls_TimeBar);
       defaultTimeBar.setId(R.id.exo_progress);
       defaultTimeBar.setLayoutParams(timeBarPlaceholder.getLayoutParams());
       ViewGroup parent = ((ViewGroup) timeBarPlaceholder.getParent());

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -721,6 +721,7 @@ public void release() {
                       new TimeoutException("Player release timed out."),
                       ExoPlaybackException.TIMEOUT_OPERATION_RELEASE)));
     }
+    listeners.release();
     playbackInfoUpdateHandler.removeCallbacksAndMessages(null);
     if (analyticsCollector != null) {
       bandwidthMeter.removeEventListener(analyticsCollector);

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -570,7 +570,8 @@ public StyledPlayerControlView(
     } else if (timeBarPlaceholder != null) {
       // Propagate attrs as timebarAttrs so that DefaultTimeBar's custom attributes are transferred,
       // but standard attributes (e.g. background) are not.
-      DefaultTimeBar defaultTimeBar = new DefaultTimeBar(context, null, 0, playbackAttrs);
+      DefaultTimeBar defaultTimeBar =
+          new DefaultTimeBar(context, null, 0, playbackAttrs, R.style.ExoStyledControls_TimeBar);
       defaultTimeBar.setId(R.id.exo_progress);
       defaultTimeBar.setLayoutParams(timeBarPlaceholder.getLayoutParams());
       ViewGroup parent = ((ViewGroup) timeBarPlaceholder.getParent());

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -1702,9 +1702,9 @@ private final class StreamEventCallbackV29 {
 
     public StreamEventCallbackV29() {
       handler = new Handler();
-      // StreamEventCallbackV29 can NOT inherit directly from AudioTrack.StreamEventCallback as it
-      // would cause a NoClassDefFoundError on the first load of DefaultAudioSink for SDK < 29
-      // fatal on some devices. See: https://github.com/google/ExoPlayer/issues/8058
+      // Avoid StreamEventCallbackV29 inheriting directly from AudioTrack.StreamEventCallback as it
+      // would cause a NoClassDefFoundError warning on load of DefaultAudioSink for SDK < 29.
+      // See: https://github.com/google/ExoPlayer/issues/8058
       callback =
           new AudioTrack.StreamEventCallback() {
             @Override

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -1596,7 +1596,8 @@ private int getAdGroupIndexForCuePointTimeSeconds(double cuePointTimeSeconds) {
     // We receive initial cue points from IMA SDK as floats. This code replicates the same
     // calculation used to populate adGroupTimesUs (having truncated input back to float, to avoid
     // failures if the behavior of the IMA SDK changes to provide greater precision).
-    long adPodTimeUs = Math.round((float) cuePointTimeSeconds * C.MICROS_PER_SECOND);
+    float cuePointTimeSecondsFloat = (float) cuePointTimeSeconds;
+    long adPodTimeUs = Math.round((double) cuePointTimeSecondsFloat * C.MICROS_PER_SECOND);
     for (int adGroupIndex = 0; adGroupIndex < adPlaybackState.adGroupCount; adGroupIndex++) {
       long adGroupTimeUs = adPlaybackState.adGroupTimesUs[adGroupIndex];
       if (adGroupTimeUs != C.TIME_END_OF_SOURCE

File: extensions/ima/src/test/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoaderTest.java
Patch:
@@ -803,7 +803,8 @@ public void stop_unregistersAllVideoControlOverlays() {
 
   @Test
   public void loadAd_withLargeAdCuePoint_updatesAdPlaybackStateWithLoadedAd() {
-    float midrollTimeSecs = 1_765f;
+    // Use a large enough value to test correct truncating of large cue points.
+    float midrollTimeSecs = Float.MAX_VALUE;
     ImmutableList<Float> cuePoints = ImmutableList.of(midrollTimeSecs);
     setupPlayback(CONTENT_TIMELINE, cuePoints);
     imaAdsLoader.start(adsLoaderListener, adViewProvider);

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaUtil.java
Patch:
@@ -88,6 +88,7 @@ public static final class Configuration {
     public final boolean focusSkipButtonWhenAvailable;
     public final boolean playAdBeforeStartPosition;
     public final int mediaBitrate;
+    @Nullable public final List<String> adMediaMimeTypes;
     @Nullable public final Set<UiElement> adUiElements;
     @Nullable public final Collection<CompanionAdSlot> companionAdSlots;
     @Nullable public final AdErrorEvent.AdErrorListener applicationAdErrorListener;
@@ -102,6 +103,7 @@ public Configuration(
         boolean focusSkipButtonWhenAvailable,
         boolean playAdBeforeStartPosition,
         int mediaBitrate,
+        @Nullable List<String> adMediaMimeTypes,
         @Nullable Set<UiElement> adUiElements,
         @Nullable Collection<CompanionAdSlot> companionAdSlots,
         @Nullable AdErrorEvent.AdErrorListener applicationAdErrorListener,
@@ -114,6 +116,7 @@ public Configuration(
       this.focusSkipButtonWhenAvailable = focusSkipButtonWhenAvailable;
       this.playAdBeforeStartPosition = playAdBeforeStartPosition;
       this.mediaBitrate = mediaBitrate;
+      this.adMediaMimeTypes = adMediaMimeTypes;
       this.adUiElements = adUiElements;
       this.companionAdSlots = companionAdSlots;
       this.applicationAdErrorListener = applicationAdErrorListener;

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -375,7 +375,7 @@ private AdsLoader getAdsLoader(Uri adTagUri) {
     }
     // The ads loader is reused for multiple playbacks, so that ad playback can resume.
     if (adsLoader == null) {
-      adsLoader = new ImaAdsLoader(/* context= */ PlayerActivity.this, adTagUri);
+      adsLoader = new ImaAdsLoader.Builder(/* context= */ this).build();
     }
     adsLoader.setPlayer(player);
     return adsLoader;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSchemeDataSource.java
Patch:
@@ -59,7 +59,8 @@ public long open(DataSpec dataSpec) throws IOException {
     String dataString = uriParts[1];
     if (uriParts[0].contains(";base64")) {
       try {
-        data = Base64.decode(dataString, 0);
+        // TODO(internal: b/169937045): Consider passing Base64.URL_SAFE flag.
+        data = Base64.decode(dataString, /* flags= */ Base64.DEFAULT);
       } catch (IllegalArgumentException e) {
         throw new ParserException("Error while parsing Base64 encoded string: " + dataString, e);
       }

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/IndexSeekMap.java
Patch:
@@ -74,7 +74,7 @@ public SeekMap.SeekPoints getSeekPoints(long timeUs) {
     int targetIndex =
         Util.binarySearchFloor(timesUs, timeUs, /* inclusive= */ true, /* stayInBounds= */ true);
     SeekPoint leftSeekPoint = new SeekPoint(timesUs[targetIndex], positions[targetIndex]);
-    if (leftSeekPoint.timeUs >= timeUs || targetIndex == timesUs.length - 1) {
+    if (leftSeekPoint.timeUs == timeUs || targetIndex == timesUs.length - 1) {
       return new SeekMap.SeekPoints(leftSeekPoint);
     } else {
       SeekPoint rightSeekPoint =

File: library/core/src/main/java/com/google/android/exoplayer2/source/SingleSampleMediaSource.java
Patch:
@@ -281,6 +281,8 @@ private SingleSampleMediaSource(
             .setSampleMimeType(subtitle.mimeType)
             .setLanguage(subtitle.language)
             .setSelectionFlags(subtitle.selectionFlags)
+            .setRoleFlags(subtitle.roleFlags)
+            .setLabel(subtitle.label)
             .build();
     dataSpec =
         new DataSpec.Builder().setUri(subtitle.uri).setFlags(DataSpec.FLAG_ALLOW_GZIP).build();

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -511,11 +511,11 @@ public StyledPlayerView(Context context, @Nullable AttributeSet attrs, int defSt
     this.controllerAutoShow = controllerAutoShow;
     this.controllerHideDuringAds = controllerHideDuringAds;
     this.useController = useController && controller != null;
-    hideController();
-    updateContentDescription();
     if (controller != null) {
+      controller.hideImmediately();
       controller.addVisibilityListener(/* listener= */ componentListener);
     }
+    updateContentDescription();
   }
 
   /**

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java
Patch:
@@ -1363,7 +1363,8 @@ private static String getSampleMimeType(
       // All other text types are raw formats.
       return containerMimeType;
     } else if (MimeTypes.APPLICATION_MP4.equals(containerMimeType)) {
-      return MimeTypes.getMediaMimeType(codecs);
+      @Nullable String mimeType = MimeTypes.getMediaMimeType(codecs);
+      return MimeTypes.TEXT_VTT.equals(mimeType) ? MimeTypes.APPLICATION_MP4VTT : mimeType;
     }
     return null;
   }

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -1737,9 +1737,9 @@ private final class StreamEventCallbackV29 {
 
     public StreamEventCallbackV29() {
       handler = new Handler();
-      // StreamEventCallbackV29 can NOT inherit directly from AudioTrack.StreamEventCallback as it
-      // would cause a NoClassDefFoundError on the first load of DefaultAudioSink for SDK < 29
-      // fatal on some devices. See: https://github.com/google/ExoPlayer/issues/8058
+      // Avoid StreamEventCallbackV29 inheriting directly from AudioTrack.StreamEventCallback as it
+      // would cause a NoClassDefFoundError warning on load of DefaultAudioSink for SDK < 29.
+      // See: https://github.com/google/ExoPlayer/issues/8058
       callback =
           new AudioTrack.StreamEventCallback() {
             @Override

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
Patch:
@@ -592,7 +592,9 @@ private static final class InitializationTrackSelection extends BaseTrackSelecti
 
     public InitializationTrackSelection(TrackGroup group, int[] tracks) {
       super(group, tracks);
-      selectedIndex = indexOf(group.getFormat(0));
+      // The initially selected index corresponds to the first EXT-X-STREAMINF tag in the master
+      // playlist.
+      selectedIndex = indexOf(group.getFormat(tracks[0]));
     }
 
     @Override

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -102,7 +102,7 @@ public class PlayerActivity extends AppCompatActivity
   private int startWindow;
   private long startPosition;
 
-  // Fields used only for ad playback. The ads loader is loaded via reflection.
+  // Fields used only for ad playback.
 
   private AdsLoader adsLoader;
   private Uri loadedAdTagUri;

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/DefaultMediaItemConverter.java
Patch:
@@ -45,7 +45,7 @@ public MediaItem convertToExoPlayerMediaItem(androidx.media2.common.MediaItem me
     if (media2MediaItem instanceof CallbackMediaItem) {
       throw new IllegalStateException("CallbackMediaItem isn't supported");
     }
-    
+
     @Nullable Uri uri = null;
     @Nullable String mediaId = null;
     @Nullable String title = null;

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/MediaItemConverter.java
Patch:
@@ -23,13 +23,13 @@
  */
 public interface MediaItemConverter {
   /**
-   * Converts an {@link androidx.media2.common.MediaItem Media2 MediaItem} to an {@link MediaItem
+   * Converts a {@link androidx.media2.common.MediaItem Media2 MediaItem} to an {@link MediaItem
    * ExoPlayer MediaItem}.
    */
   MediaItem convertToExoPlayerMediaItem(androidx.media2.common.MediaItem media2MediaItem);
 
   /**
-   * Converts an {@link MediaItem ExoPlayer MediaItem} to an {@link androidx.media2.common.MediaItem
+   * Converts an {@link MediaItem ExoPlayer MediaItem} to a {@link androidx.media2.common.MediaItem
    * Media2 MediaItem}.
    */
   androidx.media2.common.MediaItem convertToMedia2MediaItem(MediaItem exoPlayerMediaItem);

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -153,7 +153,7 @@ public ExoPlayerImpl(
         new TrackSelectorResult(
             new RendererConfiguration[renderers.length],
             new TrackSelection[renderers.length],
-            null);
+            /* info= */ null);
     period = new Timeline.Period();
     maskingWindowIndex = C.INDEX_UNSET;
     playbackInfoUpdateHandler = new Handler(applicationLooper);

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaSource.java
Patch:
@@ -340,7 +340,7 @@ private void notifySourceInfoRefreshed() {
             /* manifest= */ null,
             mediaItem);
     if (timelineIsPlaceholder) {
-      // TODO: Actually prepare the extractors during prepatation so that we don't need a
+      // TODO: Actually prepare the extractors during preparation so that we don't need a
       // placeholder. See https://github.com/google/ExoPlayer/issues/4727.
       timeline =
           new ForwardingTimeline(timeline) {

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/MappingTrackSelector.java
Patch:
@@ -339,14 +339,15 @@ public TrackGroupArray getUnmappedTrackGroups() {
    * Returns the mapping information for the currently active track selection, or null if no
    * selection is currently active.
    */
-  public final @Nullable MappedTrackInfo getCurrentMappedTrackInfo() {
+  @Nullable
+  public final MappedTrackInfo getCurrentMappedTrackInfo() {
     return currentMappedTrackInfo;
   }
 
   // TrackSelector implementation.
 
   @Override
-  public final void onSelectionActivated(Object info) {
+  public final void onSelectionActivated(@Nullable Object info) {
     currentMappedTrackInfo = (MappedTrackInfo) info;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelector.java
Patch:
@@ -137,7 +137,7 @@ public abstract TrackSelectorResult selectTracks(
    *
    * @param info The value of {@link TrackSelectorResult#info} in the activated selection.
    */
-  public abstract void onSelectionActivated(Object info);
+  public abstract void onSelectionActivated(@Nullable Object info);
 
   /**
    * Calls {@link InvalidationListener#onTrackSelectionsInvalidated()} to invalidate all previously

File: library/core/src/test/java/com/google/android/exoplayer2/trackselection/TrackSelectorTest.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
 
+import androidx.annotation.Nullable;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.RendererCapabilities;
@@ -52,7 +53,7 @@ public TrackSelectorResult selectTracks(
           }
 
           @Override
-          public void onSelectionActivated(Object info) {}
+          public void onSelectionActivated(@Nullable Object info) {}
         };
   }
 

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeterTest.java
Patch:
@@ -107,7 +107,7 @@ public void setUp() {
             /* isAvailable= */ true,
             CONNECTED);
   }
-  
+
   @Test
   public void defaultInitialBitrateEstimate_forWifi_isGreaterThanEstimateFor2G() {
     setActiveNetworkInfo(networkInfoWifi);

File: library/core/src/test/java/com/google/android/exoplayer2/video/MediaCodecVideoRendererTest.java
Patch:
@@ -46,7 +46,6 @@
 import com.google.android.exoplayer2.drm.DrmSessionManager;
 import com.google.android.exoplayer2.mediacodec.MediaCodecInfo;
 import com.google.android.exoplayer2.mediacodec.MediaCodecSelector;
-import com.google.android.exoplayer2.mediacodec.MediaCodecUtil.DecoderQueryException;
 import com.google.android.exoplayer2.testutil.FakeSampleStream;
 import com.google.android.exoplayer2.testutil.FakeSampleStream.FakeSampleStreamItem;
 import com.google.android.exoplayer2.util.MimeTypes;
@@ -107,8 +106,7 @@ public void setUp() throws Exception {
             /* maxDroppedFramesToNotify= */ 1) {
           @Override
           @Capabilities
-          protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
-              throws DecoderQueryException {
+          protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format) {
             return RendererCapabilities.create(FORMAT_HANDLED);
           }
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/SubtitleView.java
Patch:
@@ -414,5 +414,4 @@ private Cue removeEmbeddedStyling(Cue cue) {
     return cue;
   }
 
-
 }

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ts/TsDurationReaderTest.java
Patch:
@@ -37,7 +37,7 @@ public final class TsDurationReaderTest {
 
   @Before
   public void setUp() {
-    tsDurationReader = new TsDurationReader();
+    tsDurationReader = new TsDurationReader(TsExtractor.DEFAULT_TIMESTAMP_SEARCH_BYTES);
     seekPositionHolder = new PositionHolder();
   }
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Atom.java
Patch:
@@ -115,6 +115,9 @@
   @SuppressWarnings("ConstantCaseForConstants")
   public static final int TYPE_mp4a = 0x6d703461;
 
+  @SuppressWarnings("ConstantCaseForConstants")
+  public static final int TYPE__mp2 = 0x2e6d7032;
+
   @SuppressWarnings("ConstantCaseForConstants")
   public static final int TYPE__mp3 = 0x2e6d7033;
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -878,6 +878,7 @@ private static StsdData parseStsd(
           || childAtomType == Atom.TYPE_lpcm
           || childAtomType == Atom.TYPE_sowt
           || childAtomType == Atom.TYPE_twos
+          || childAtomType == Atom.TYPE__mp2
           || childAtomType == Atom.TYPE__mp3
           || childAtomType == Atom.TYPE_alac
           || childAtomType == Atom.TYPE_alaw
@@ -1243,7 +1244,7 @@ private static void parseAudioSampleEntry(
     } else if (atomType == Atom.TYPE_twos) {
       mimeType = MimeTypes.AUDIO_RAW;
       pcmEncoding = C.ENCODING_PCM_16BIT_BIG_ENDIAN;
-    } else if (atomType == Atom.TYPE__mp3) {
+    } else if (atomType == Atom.TYPE__mp2 || atomType == Atom.TYPE__mp3) {
       mimeType = MimeTypes.AUDIO_MPEG;
     } else if (atomType == Atom.TYPE_alac) {
       mimeType = MimeTypes.AUDIO_ALAC;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Atom.java
Patch:
@@ -274,9 +274,6 @@
   @SuppressWarnings("ConstantCaseForConstants")
   public static final int TYPE_TTML = 0x54544d4c;
 
-  @SuppressWarnings("ConstantCaseForConstants")
-  public static final int TYPE_vmhd = 0x766d6864;
-
   @SuppressWarnings("ConstantCaseForConstants")
   public static final int TYPE_mp4v = 0x6d703476;
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DumpFileAsserts.java
Patch:
@@ -98,7 +98,7 @@ public static void assertOutput(Context context, String actual, String dumpFile)
     } else {
       File file =
           DUMP_FILE_ACTION == WRITE_TO_LOCAL
-              ? new File(StandardSystemProperty.USER_DIR.value(), "../../testdata/src/test")
+              ? new File(StandardSystemProperty.USER_DIR.value(), "../../testdata/src/test/assets")
               : context.getExternalFilesDir(null);
       file = new File(file, dumpFile);
       Assertions.checkStateNotNull(file.getParentFile()).mkdirs();

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -1596,7 +1596,8 @@ private int getAdGroupIndexForCuePointTimeSeconds(double cuePointTimeSeconds) {
     // We receive initial cue points from IMA SDK as floats. This code replicates the same
     // calculation used to populate adGroupTimesUs (having truncated input back to float, to avoid
     // failures if the behavior of the IMA SDK changes to provide greater precision).
-    long adPodTimeUs = Math.round((float) cuePointTimeSeconds * C.MICROS_PER_SECOND);
+    float cuePointTimeSecondsFloat = (float) cuePointTimeSeconds;
+    long adPodTimeUs = Math.round((double) cuePointTimeSecondsFloat * C.MICROS_PER_SECOND);
     for (int adGroupIndex = 0; adGroupIndex < adPlaybackState.adGroupCount; adGroupIndex++) {
       long adGroupTimeUs = adPlaybackState.adGroupTimesUs[adGroupIndex];
       if (adGroupTimeUs != C.TIME_END_OF_SOURCE

File: extensions/ima/src/test/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoaderTest.java
Patch:
@@ -803,7 +803,8 @@ public void stop_unregistersAllVideoControlOverlays() {
 
   @Test
   public void loadAd_withLargeAdCuePoint_updatesAdPlaybackStateWithLoadedAd() {
-    float midrollTimeSecs = 1_765f;
+    // Use a large enough value to test correct truncating of large cue points.
+    float midrollTimeSecs = Float.MAX_VALUE;
     ImmutableList<Float> cuePoints = ImmutableList.of(midrollTimeSecs);
     setupPlayback(CONTENT_TIMELINE, cuePoints);
     imaAdsLoader.start(adsLoaderListener, adViewProvider);

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaUtil.java
Patch:
@@ -88,6 +88,7 @@ public static final class Configuration {
     public final boolean focusSkipButtonWhenAvailable;
     public final boolean playAdBeforeStartPosition;
     public final int mediaBitrate;
+    @Nullable public final List<String> adMediaMimeTypes;
     @Nullable public final Set<UiElement> adUiElements;
     @Nullable public final Collection<CompanionAdSlot> companionAdSlots;
     @Nullable public final AdErrorEvent.AdErrorListener applicationAdErrorListener;
@@ -102,6 +103,7 @@ public Configuration(
         boolean focusSkipButtonWhenAvailable,
         boolean playAdBeforeStartPosition,
         int mediaBitrate,
+        @Nullable List<String> adMediaMimeTypes,
         @Nullable Set<UiElement> adUiElements,
         @Nullable Collection<CompanionAdSlot> companionAdSlots,
         @Nullable AdErrorEvent.AdErrorListener applicationAdErrorListener,
@@ -114,6 +116,7 @@ public Configuration(
       this.focusSkipButtonWhenAvailable = focusSkipButtonWhenAvailable;
       this.playAdBeforeStartPosition = playAdBeforeStartPosition;
       this.mediaBitrate = mediaBitrate;
+      this.adMediaMimeTypes = adMediaMimeTypes;
       this.adUiElements = adUiElements;
       this.companionAdSlots = companionAdSlots;
       this.applicationAdErrorListener = applicationAdErrorListener;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/IndexSeekMap.java
Patch:
@@ -74,7 +74,7 @@ public SeekMap.SeekPoints getSeekPoints(long timeUs) {
     int targetIndex =
         Util.binarySearchFloor(timesUs, timeUs, /* inclusive= */ true, /* stayInBounds= */ true);
     SeekPoint leftSeekPoint = new SeekPoint(timesUs[targetIndex], positions[targetIndex]);
-    if (leftSeekPoint.timeUs >= timeUs || targetIndex == timesUs.length - 1) {
+    if (leftSeekPoint.timeUs == timeUs || targetIndex == timesUs.length - 1) {
       return new SeekMap.SeekPoints(leftSeekPoint);
     } else {
       SeekPoint rightSeekPoint =

File: library/core/src/main/java/com/google/android/exoplayer2/source/SingleSampleMediaSource.java
Patch:
@@ -281,6 +281,8 @@ private SingleSampleMediaSource(
             .setSampleMimeType(subtitle.mimeType)
             .setLanguage(subtitle.language)
             .setSelectionFlags(subtitle.selectionFlags)
+            .setRoleFlags(subtitle.roleFlags)
+            .setLabel(subtitle.label)
             .build();
     dataSpec =
         new DataSpec.Builder().setUri(subtitle.uri).setFlags(DataSpec.FLAG_ALLOW_GZIP).build();

File: library/core/src/main/java/com/google/android/exoplayer2/audio/SonicAudioProcessor.java
Patch:
@@ -33,7 +33,7 @@ public final class SonicAudioProcessor implements AudioProcessor {
   public static final int SAMPLE_RATE_NO_CHANGE = -1;
 
   /** The threshold below which the difference between two pitch/speed factors is negligible. */
-  private static final float CLOSE_THRESHOLD = 0.01f;
+  private static final float CLOSE_THRESHOLD = 0.0001f;
 
   /**
    * The minimum number of output bytes at which the speedup is calculated using the input/output

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerFactory.java
Patch:
@@ -256,6 +256,7 @@ public static ExoPlayer newInstance(
         /* analyticsCollector= */ null,
         /* useLazyPreparation= */ true,
         SeekParameters.DEFAULT,
+        new DefaultLivePlaybackSpeedControl.Builder().build(),
         ExoPlayer.DEFAULT_RELEASE_TIMEOUT_MS,
         /* pauseAtEndOfMediaItems= */ false,
         Clock.DEFAULT,

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -117,6 +117,7 @@
    *     loads and other initial preparation steps happen immediately. If true, these initial
    *     preparations are triggered only when the player starts buffering the media.
    * @param seekParameters The {@link SeekParameters}.
+   * @param livePlaybackSpeedControl The {@link LivePlaybackSpeedControl}.
    * @param releaseTimeoutMs The timeout for calls to {@link #release()} in milliseconds.
    * @param pauseAtEndOfMediaItems Whether to pause playback at the end of each media item.
    * @param clock The {@link Clock}.
@@ -133,6 +134,7 @@ public ExoPlayerImpl(
       @Nullable AnalyticsCollector analyticsCollector,
       boolean useLazyPreparation,
       SeekParameters seekParameters,
+      LivePlaybackSpeedControl livePlaybackSpeedControl,
       long releaseTimeoutMs,
       boolean pauseAtEndOfMediaItems,
       Clock clock,
@@ -182,6 +184,7 @@ public ExoPlayerImpl(
             shuffleModeEnabled,
             analyticsCollector,
             seekParameters,
+            livePlaybackSpeedControl,
             releaseTimeoutMs,
             pauseAtEndOfMediaItems,
             applicationLooper,

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -178,6 +178,7 @@ public interface PlaybackInfoUpdateListener {
   private final PlaybackInfoUpdateListener playbackInfoUpdateListener;
   private final MediaPeriodQueue queue;
   private final MediaSourceList mediaSourceList;
+  private final LivePlaybackSpeedControl livePlaybackSpeedControl;
   private final long releaseTimeoutMs;
 
   @SuppressWarnings("unused")
@@ -215,6 +216,7 @@ public ExoPlayerImplInternal(
       boolean shuffleModeEnabled,
       @Nullable AnalyticsCollector analyticsCollector,
       SeekParameters seekParameters,
+      LivePlaybackSpeedControl livePlaybackSpeedControl,
       long releaseTimeoutMs,
       boolean pauseAtEndOfWindow,
       Looper applicationLooper,
@@ -229,6 +231,7 @@ public ExoPlayerImplInternal(
     this.repeatMode = repeatMode;
     this.shuffleModeEnabled = shuffleModeEnabled;
     this.seekParameters = seekParameters;
+    this.livePlaybackSpeedControl = livePlaybackSpeedControl;
     this.releaseTimeoutMs = releaseTimeoutMs;
     this.pauseAtEndOfWindow = pauseAtEndOfWindow;
     this.clock = clock;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerView.java
Patch:
@@ -510,11 +510,11 @@ public StyledPlayerView(Context context, @Nullable AttributeSet attrs, int defSt
     this.controllerAutoShow = controllerAutoShow;
     this.controllerHideDuringAds = controllerHideDuringAds;
     this.useController = useController && controller != null;
-    hideController();
-    updateContentDescription();
     if (controller != null) {
+      controller.hideImmediately();
       controller.addVisibilityListener(/* listener= */ componentListener);
     }
+    updateContentDescription();
   }
 
   /**

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java
Patch:
@@ -1535,7 +1535,8 @@ private static String getSampleMimeType(
       // All other text types are raw formats.
       return containerMimeType;
     } else if (MimeTypes.APPLICATION_MP4.equals(containerMimeType)) {
-      return MimeTypes.getMediaMimeType(codecs);
+      @Nullable String mimeType = MimeTypes.getMediaMimeType(codecs);
+      return MimeTypes.TEXT_VTT.equals(mimeType) ? MimeTypes.APPLICATION_MP4VTT : mimeType;
     }
     return null;
   }

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -7844,6 +7844,7 @@ public void clearMediaItem_notifiesMediaItemTransition() throws Exception {
     SilenceMediaSource mediaSource2 = factory.setTag("2").createMediaSource();
     ActionSchedule actionSchedule =
         new ActionSchedule.Builder(TAG)
+            .pause()
             .waitForPlaybackState(Player.STATE_READY)
             .playUntilPosition(/* windowIndex= */ 1, /* positionMs= */ 2000)
             .clearMediaItems()

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
Patch:
@@ -592,7 +592,9 @@ private static final class InitializationTrackSelection extends BaseTrackSelecti
 
     public InitializationTrackSelection(TrackGroup group, int[] tracks) {
       super(group, tracks);
-      selectedIndex = indexOf(group.getFormat(0));
+      // The initially selected index corresponds to the first EXT-X-STREAMINF tag in the master
+      // playlist.
+      selectedIndex = indexOf(group.getFormat(tracks[0]));
     }
 
     @Override

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -102,7 +102,7 @@ public class PlayerActivity extends AppCompatActivity
   private int startWindow;
   private long startPosition;
 
-  // Fields used only for ad playback. The ads loader is loaded via reflection.
+  // Fields used only for ad playback.
 
   private AdsLoader adsLoader;
   private Uri loadedAdTagUri;

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/DefaultMediaItemConverter.java
Patch:
@@ -45,7 +45,7 @@ public MediaItem convertToExoPlayerMediaItem(androidx.media2.common.MediaItem me
     if (media2MediaItem instanceof CallbackMediaItem) {
       throw new IllegalStateException("CallbackMediaItem isn't supported");
     }
-    
+
     @Nullable Uri uri = null;
     @Nullable String mediaId = null;
     @Nullable String title = null;

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/MediaItemConverter.java
Patch:
@@ -23,13 +23,13 @@
  */
 public interface MediaItemConverter {
   /**
-   * Converts an {@link androidx.media2.common.MediaItem Media2 MediaItem} to an {@link MediaItem
+   * Converts a {@link androidx.media2.common.MediaItem Media2 MediaItem} to an {@link MediaItem
    * ExoPlayer MediaItem}.
    */
   MediaItem convertToExoPlayerMediaItem(androidx.media2.common.MediaItem media2MediaItem);
 
   /**
-   * Converts an {@link MediaItem ExoPlayer MediaItem} to an {@link androidx.media2.common.MediaItem
+   * Converts an {@link MediaItem ExoPlayer MediaItem} to a {@link androidx.media2.common.MediaItem
    * Media2 MediaItem}.
    */
   androidx.media2.common.MediaItem convertToMedia2MediaItem(MediaItem exoPlayerMediaItem);

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -157,7 +157,7 @@ public ExoPlayerImpl(
         new TrackSelectorResult(
             new RendererConfiguration[renderers.length],
             new TrackSelection[renderers.length],
-            null);
+            /* info= */ null);
     period = new Timeline.Period();
     maskingWindowIndex = C.INDEX_UNSET;
     playbackInfoUpdateHandler = new Handler(applicationLooper);

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaSource.java
Patch:
@@ -340,7 +340,7 @@ private void notifySourceInfoRefreshed() {
             /* manifest= */ null,
             mediaItem);
     if (timelineIsPlaceholder) {
-      // TODO: Actually prepare the extractors during prepatation so that we don't need a
+      // TODO: Actually prepare the extractors during preparation so that we don't need a
       // placeholder. See https://github.com/google/ExoPlayer/issues/4727.
       timeline =
           new ForwardingTimeline(timeline) {

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/MappingTrackSelector.java
Patch:
@@ -339,14 +339,15 @@ public TrackGroupArray getUnmappedTrackGroups() {
    * Returns the mapping information for the currently active track selection, or null if no
    * selection is currently active.
    */
-  public final @Nullable MappedTrackInfo getCurrentMappedTrackInfo() {
+  @Nullable
+  public final MappedTrackInfo getCurrentMappedTrackInfo() {
     return currentMappedTrackInfo;
   }
 
   // TrackSelector implementation.
 
   @Override
-  public final void onSelectionActivated(Object info) {
+  public final void onSelectionActivated(@Nullable Object info) {
     currentMappedTrackInfo = (MappedTrackInfo) info;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelector.java
Patch:
@@ -137,7 +137,7 @@ public abstract TrackSelectorResult selectTracks(
    *
    * @param info The value of {@link TrackSelectorResult#info} in the activated selection.
    */
-  public abstract void onSelectionActivated(Object info);
+  public abstract void onSelectionActivated(@Nullable Object info);
 
   /**
    * Calls {@link InvalidationListener#onTrackSelectionsInvalidated()} to invalidate all previously

File: library/core/src/test/java/com/google/android/exoplayer2/trackselection/TrackSelectorTest.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
 
+import androidx.annotation.Nullable;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.RendererCapabilities;
@@ -52,7 +53,7 @@ public TrackSelectorResult selectTracks(
           }
 
           @Override
-          public void onSelectionActivated(Object info) {}
+          public void onSelectionActivated(@Nullable Object info) {}
         };
   }
 

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeterTest.java
Patch:
@@ -107,7 +107,7 @@ public void setUp() {
             /* isAvailable= */ true,
             CONNECTED);
   }
-  
+
   @Test
   public void defaultInitialBitrateEstimate_forWifi_isGreaterThanEstimateFor2G() {
     setActiveNetworkInfo(networkInfoWifi);

File: library/core/src/test/java/com/google/android/exoplayer2/video/MediaCodecVideoRendererTest.java
Patch:
@@ -46,7 +46,6 @@
 import com.google.android.exoplayer2.drm.DrmSessionManager;
 import com.google.android.exoplayer2.mediacodec.MediaCodecInfo;
 import com.google.android.exoplayer2.mediacodec.MediaCodecSelector;
-import com.google.android.exoplayer2.mediacodec.MediaCodecUtil.DecoderQueryException;
 import com.google.android.exoplayer2.testutil.FakeSampleStream;
 import com.google.android.exoplayer2.testutil.FakeSampleStream.FakeSampleStreamItem;
 import com.google.android.exoplayer2.util.MimeTypes;
@@ -107,8 +106,7 @@ public void setUp() throws Exception {
             /* maxDroppedFramesToNotify= */ 1) {
           @Override
           @Capabilities
-          protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format)
-              throws DecoderQueryException {
+          protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format format) {
             return RendererCapabilities.create(FORMAT_HANDLED);
           }
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/SubtitleView.java
Patch:
@@ -414,5 +414,4 @@ private Cue removeEmbeddedStyling(Cue cue) {
     return cue;
   }
 
-
 }

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerFactory.java
Patch:
@@ -256,6 +256,7 @@ public static ExoPlayer newInstance(
         /* analyticsCollector= */ null,
         /* useLazyPreparation= */ true,
         SeekParameters.DEFAULT,
+        ExoPlayer.DEFAULT_RELEASE_TIMEOUT_MS,
         /* pauseAtEndOfMediaItems= */ false,
         Clock.DEFAULT,
         applicationLooper);

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -375,7 +375,7 @@ private AdsLoader getAdsLoader(Uri adTagUri) {
     }
     // The ads loader is reused for multiple playbacks, so that ad playback can resume.
     if (adsLoader == null) {
-      adsLoader = new ImaAdsLoader(/* context= */ PlayerActivity.this, adTagUri);
+      adsLoader = new ImaAdsLoader.Builder(/* context= */ this).build();
     }
     adsLoader.setPlayer(player);
     return adsLoader;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSchemeDataSource.java
Patch:
@@ -59,7 +59,8 @@ public long open(DataSpec dataSpec) throws IOException {
     String dataString = uriParts[1];
     if (uriParts[0].contains(";base64")) {
       try {
-        data = Base64.decode(dataString, 0);
+        // TODO(internal: b/169937045): Consider passing Base64.URL_SAFE flag.
+        data = Base64.decode(dataString, /* flags= */ Base64.DEFAULT);
       } catch (IllegalArgumentException e) {
         throw new ParserException("Error while parsing Base64 encoded string: " + dataString, e);
       }

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ts/TsDurationReaderTest.java
Patch:
@@ -37,7 +37,7 @@ public final class TsDurationReaderTest {
 
   @Before
   public void setUp() {
-    tsDurationReader = new TsDurationReader();
+    tsDurationReader = new TsDurationReader(TsExtractor.DEFAULT_TIMESTAMP_SEARCH_BYTES);
     seekPositionHolder = new PositionHolder();
   }
 

File: library/core/src/test/java/com/google/android/exoplayer2/MediaPeriodQueueTest.java
Patch:
@@ -432,6 +432,7 @@ private void setupTimeline(Timeline timeline) {
             /* isLoading= */ false,
             /* trackGroups= */ null,
             /* trackSelectorResult= */ null,
+            /* staticMetadata= */ ImmutableList.of(),
             /* loadingMediaPeriodId= */ null,
             /* playWhenReady= */ false,
             Player.PLAYBACK_SUPPRESSION_REASON_NONE,

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -6902,6 +6902,7 @@ public void removeMediaItems_currentItemRemovedThatIsTheLast_correctMasking() th
     ActionSchedule actionSchedule =
         new ActionSchedule.Builder(TAG)
             .waitForPlaybackState(Player.STATE_READY)
+            .waitForPendingPlayerCommands()
             .executeRunnable(
                 new PlayerRunnable() {
                   @Override

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Atom.java
Patch:
@@ -115,6 +115,9 @@
   @SuppressWarnings("ConstantCaseForConstants")
   public static final int TYPE_mp4a = 0x6d703461;
 
+  @SuppressWarnings("ConstantCaseForConstants")
+  public static final int TYPE__mp2 = 0x2e6d7032;
+
   @SuppressWarnings("ConstantCaseForConstants")
   public static final int TYPE__mp3 = 0x2e6d7033;
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -878,6 +878,7 @@ private static StsdData parseStsd(
           || childAtomType == Atom.TYPE_lpcm
           || childAtomType == Atom.TYPE_sowt
           || childAtomType == Atom.TYPE_twos
+          || childAtomType == Atom.TYPE__mp2
           || childAtomType == Atom.TYPE__mp3
           || childAtomType == Atom.TYPE_alac
           || childAtomType == Atom.TYPE_alaw
@@ -1243,7 +1244,7 @@ private static void parseAudioSampleEntry(
     } else if (atomType == Atom.TYPE_twos) {
       mimeType = MimeTypes.AUDIO_RAW;
       pcmEncoding = C.ENCODING_PCM_16BIT_BIG_ENDIAN;
-    } else if (atomType == Atom.TYPE__mp3) {
+    } else if (atomType == Atom.TYPE__mp2 || atomType == Atom.TYPE__mp3) {
       mimeType = MimeTypes.AUDIO_MPEG;
     } else if (atomType == Atom.TYPE_alac) {
       mimeType = MimeTypes.AUDIO_ALAC;

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -618,6 +618,7 @@ protected SimpleExoPlayer(Builder builder) {
     audioVolume = 1;
     audioSessionId = C.AUDIO_SESSION_ID_UNSET;
     currentCues = Collections.emptyList();
+    throwsWhenUsingWrongThread = true;
 
     // Build the player and associated objects.
     player =
@@ -1948,7 +1949,7 @@ public void setDeviceMuted(boolean muted) {
    * Sets whether the player should throw an {@link IllegalStateException} when methods are called
    * from a thread other than the one associated with {@link #getApplicationLooper()}.
    *
-   * <p>The default is {@code false}, but will change to {@code true} in the future.
+   * <p>The default is {@code true} and this method will be removed in the future.
    *
    * @param throwsWhenUsingWrongThread Whether to throw when methods are called from a wrong thread.
    */

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Atom.java
Patch:
@@ -274,9 +274,6 @@
   @SuppressWarnings("ConstantCaseForConstants")
   public static final int TYPE_TTML = 0x54544d4c;
 
-  @SuppressWarnings("ConstantCaseForConstants")
-  public static final int TYPE_vmhd = 0x766d6864;
-
   @SuppressWarnings("ConstantCaseForConstants")
   public static final int TYPE_mp4v = 0x6d703476;
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DumpFileAsserts.java
Patch:
@@ -98,7 +98,7 @@ public static void assertOutput(Context context, String actual, String dumpFile)
     } else {
       File file =
           DUMP_FILE_ACTION == WRITE_TO_LOCAL
-              ? new File(StandardSystemProperty.USER_DIR.value(), "../../testdata/src/test")
+              ? new File(StandardSystemProperty.USER_DIR.value(), "../../testdata/src/test/assets")
               : context.getExternalFilesDir(null);
       file = new File(file, dumpFile);
       Assertions.checkStateNotNull(file.getParentFile()).mkdirs();

File: library/core/src/main/java/com/google/android/exoplayer2/text/ssa/SsaDecoder.java
Patch:
@@ -264,7 +264,8 @@ private void parseDialogueLine(
     String text =
         SsaStyle.Overrides.stripStyleOverrides(rawText)
             .replaceAll("\\\\N", "\n")
-            .replaceAll("\\\\n", "\n");
+            .replaceAll("\\\\n", "\n")
+            .replaceAll("\\\\h", " ");
     Cue cue = createCue(text, style, styleOverrides, screenWidth, screenHeight);
 
     int startTimeIndex = addCuePlacerholderByTime(startTimeUs, cueTimesUs, cues);

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoHostedTest.java
Patch:
@@ -157,7 +157,7 @@ public final boolean forceStop() {
   @Override
   public final void onFinished() {
     if (failOnPlayerError && playerError != null) {
-      throw new Error(playerError);
+      throw new RuntimeException(playerError);
     }
     logMetrics(audioDecoderCounters, videoDecoderCounters);
     if (expectedPlayingTimeMs != EXPECTED_PLAYING_TIME_UNSET) {

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlaybackException.java
Patch:
@@ -218,7 +218,7 @@ public static ExoPlaybackException createForOutOfMemory(OutOfMemoryError cause)
   public static ExoPlaybackException createForTimeout(
       TimeoutException cause, @TimeoutOperation int timeoutOperation) {
     return new ExoPlaybackException(
-        TYPE_OUT_OF_MEMORY,
+        TYPE_TIMEOUT,
         cause,
         /* customMessage= */ null,
         /* rendererName= */ null,

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -345,7 +345,7 @@ public Builder setPriorityTaskManager(@Nullable PriorityTaskManager priorityTask
      * IllegalArgumentException}.
      *
      * @param audioAttributes {@link AudioAttributes}.
-     * @param handleAudioFocus Whether the player should hanlde audio focus.
+     * @param handleAudioFocus Whether the player should handle audio focus.
      * @return This builder.
      * @throws IllegalStateException If {@link #build()} has already been called.
      */

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoHostedTest.java
Patch:
@@ -157,7 +157,7 @@ public final boolean forceStop() {
   @Override
   public final void onFinished() {
     if (failOnPlayerError && playerError != null) {
-      throw new Error(playerError);
+      throw new RuntimeException(playerError);
     }
     logMetrics(audioDecoderCounters, videoDecoderCounters);
     if (expectedPlayingTimeMs != EXPECTED_PLAYING_TIME_UNSET) {

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlaybackException.java
Patch:
@@ -218,7 +218,7 @@ public static ExoPlaybackException createForOutOfMemory(OutOfMemoryError cause)
   public static ExoPlaybackException createForTimeout(
       TimeoutException cause, @TimeoutOperation int timeoutOperation) {
     return new ExoPlaybackException(
-        TYPE_OUT_OF_MEMORY,
+        TYPE_TIMEOUT,
         cause,
         /* customMessage= */ null,
         /* rendererName= */ null,

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -345,7 +345,7 @@ public Builder setPriorityTaskManager(@Nullable PriorityTaskManager priorityTask
      * IllegalArgumentException}.
      *
      * @param audioAttributes {@link AudioAttributes}.
-     * @param handleAudioFocus Whether the player should hanlde audio focus.
+     * @param handleAudioFocus Whether the player should handle audio focus.
      * @return This builder.
      * @throws IllegalStateException If {@link #build()} has already been called.
      */

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -716,6 +716,8 @@ public StyledPlayerControlView(
     controlViewLayoutManager.setShowButton(shuffleButton, showShuffleButton);
     controlViewLayoutManager.setShowButton(subtitleButton, showSubtitleButton);
     controlViewLayoutManager.setShowButton(vrButton, showVrButton);
+    controlViewLayoutManager.setShowButton(
+        repeatToggleButton, repeatToggleModes != RepeatModeUtil.REPEAT_TOGGLE_MODE_NONE);
     addOnLayoutChangeListener(this::onLayoutChange);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -34,6 +34,7 @@
 import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.audio.AudioRendererEventListener;
 import com.google.android.exoplayer2.drm.DrmSessionManager;
+import com.google.android.exoplayer2.extractor.ExtractorsFactory;
 import com.google.android.exoplayer2.source.DefaultMediaSourceFactory;
 import com.google.android.exoplayer2.source.MediaPeriod;
 import com.google.android.exoplayer2.source.MediaSource;
@@ -889,7 +890,7 @@ private static MediaSource createMediaSourceInternal(
       MediaItem mediaItem,
       DataSource.Factory dataSourceFactory,
       @Nullable DrmSessionManager drmSessionManager) {
-    return new DefaultMediaSourceFactory(dataSourceFactory)
+    return new DefaultMediaSourceFactory(dataSourceFactory, ExtractorsFactory.EMPTY)
         .setDrmSessionManager(drmSessionManager)
         .createMediaSource(mediaItem);
   }

File: extensions/flac/src/test/java/com/google/android/exoplayer2/ext/flac/DefaultRenderersFactoryTest.java
Patch:
@@ -26,7 +26,7 @@
 public final class DefaultRenderersFactoryTest {
 
   @Test
-  public void createRenderers_instantiatesVpxRenderer() {
+  public void createRenderers_instantiatesFlacRenderer() {
     DefaultRenderersFactoryAsserts.assertExtensionRendererCreated(
         LibflacAudioRenderer.class, C.TRACK_TYPE_AUDIO);
   }

File: extensions/opus/src/test/java/com/google/android/exoplayer2/ext/opus/DefaultRenderersFactoryTest.java
Patch:
@@ -26,7 +26,7 @@
 public final class DefaultRenderersFactoryTest {
 
   @Test
-  public void createRenderers_instantiatesVpxRenderer() {
+  public void createRenderers_instantiatesOpusRenderer() {
     DefaultRenderersFactoryAsserts.assertExtensionRendererCreated(
         LibopusAudioRenderer.class, C.TRACK_TYPE_AUDIO);
   }

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -716,6 +716,8 @@ public StyledPlayerControlView(
     controlViewLayoutManager.setShowButton(shuffleButton, showShuffleButton);
     controlViewLayoutManager.setShowButton(subtitleButton, showSubtitleButton);
     controlViewLayoutManager.setShowButton(vrButton, showVrButton);
+    controlViewLayoutManager.setShowButton(
+        repeatToggleButton, repeatToggleModes != RepeatModeUtil.REPEAT_TOGGLE_MODE_NONE);
     addOnLayoutChangeListener(this::onLayoutChange);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -34,6 +34,7 @@
 import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.audio.AudioRendererEventListener;
 import com.google.android.exoplayer2.drm.DrmSessionManager;
+import com.google.android.exoplayer2.extractor.ExtractorsFactory;
 import com.google.android.exoplayer2.source.DefaultMediaSourceFactory;
 import com.google.android.exoplayer2.source.MediaPeriod;
 import com.google.android.exoplayer2.source.MediaSource;
@@ -889,7 +890,7 @@ private static MediaSource createMediaSourceInternal(
       MediaItem mediaItem,
       DataSource.Factory dataSourceFactory,
       @Nullable DrmSessionManager drmSessionManager) {
-    return new DefaultMediaSourceFactory(dataSourceFactory)
+    return new DefaultMediaSourceFactory(dataSourceFactory, ExtractorsFactory.EMPTY)
         .setDrmSessionManager(drmSessionManager)
         .createMediaSource(mediaItem);
   }

File: extensions/flac/src/test/java/com/google/android/exoplayer2/ext/flac/DefaultRenderersFactoryTest.java
Patch:
@@ -26,7 +26,7 @@
 public final class DefaultRenderersFactoryTest {
 
   @Test
-  public void createRenderers_instantiatesVpxRenderer() {
+  public void createRenderers_instantiatesFlacRenderer() {
     DefaultRenderersFactoryAsserts.assertExtensionRendererCreated(
         LibflacAudioRenderer.class, C.TRACK_TYPE_AUDIO);
   }

File: extensions/opus/src/test/java/com/google/android/exoplayer2/ext/opus/DefaultRenderersFactoryTest.java
Patch:
@@ -26,7 +26,7 @@
 public final class DefaultRenderersFactoryTest {
 
   @Test
-  public void createRenderers_instantiatesVpxRenderer() {
+  public void createRenderers_instantiatesOpusRenderer() {
     DefaultRenderersFactoryAsserts.assertExtensionRendererCreated(
         LibopusAudioRenderer.class, C.TRACK_TYPE_AUDIO);
   }

File: extensions/ima/src/androidTest/java/com/google/android/exoplayer2/ext/ima/ImaPlaybackTest.java
Patch:
@@ -243,8 +243,7 @@ protected MediaSource buildSource(
           new DefaultDataSourceFactory(
               context, Util.getUserAgent(context, ImaPlaybackTest.class.getSimpleName()));
       MediaSource contentMediaSource =
-          DefaultMediaSourceFactory.newInstance(context)
-              .createMediaSource(MediaItem.fromUri(contentUri));
+          new DefaultMediaSourceFactory(context).createMediaSource(MediaItem.fromUri(contentUri));
       return new AdsMediaSource(
           contentMediaSource,
           dataSourceFactory,

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/PlayerTestRule.java
Patch:
@@ -80,7 +80,7 @@ protected void before() {
               exoPlayer =
                   new SimpleExoPlayer.Builder(context)
                       .setLooper(Looper.myLooper())
-                      .setMediaSourceFactory(new DefaultMediaSourceFactory(dataSourceFactory, null))
+                      .setMediaSourceFactory(new DefaultMediaSourceFactory(dataSourceFactory))
                       .build();
               sessionPlayerConnector = new SessionPlayerConnector(exoPlayer);
             });

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -182,7 +182,7 @@ public Builder(Context context, Renderer... renderers) {
       this(
           renderers,
           new DefaultTrackSelector(context),
-          DefaultMediaSourceFactory.newInstance(context),
+          new DefaultMediaSourceFactory(context),
           new DefaultLoadControl(),
           DefaultBandwidthMeter.getSingletonInstance(context));
     }

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerFactory.java
Patch:
@@ -194,7 +194,7 @@ public static SimpleExoPlayer newSimpleInstance(
         context,
         renderersFactory,
         trackSelector,
-        DefaultMediaSourceFactory.newInstance(context),
+        new DefaultMediaSourceFactory(context),
         loadControl,
         bandwidthMeter,
         analyticsCollector,
@@ -250,7 +250,7 @@ public static ExoPlayer newInstance(
     return new ExoPlayerImpl(
         renderers,
         trackSelector,
-        DefaultMediaSourceFactory.newInstance(context),
+        new DefaultMediaSourceFactory(context),
         loadControl,
         bandwidthMeter,
         /* analyticsCollector= */ null,

File: library/core/src/main/java/com/google/android/exoplayer2/MetadataRetriever.java
Patch:
@@ -43,16 +43,16 @@ private MetadataRetriever() {}
   /**
    * Retrieves the {@link TrackGroupArray} corresponding to a {@link MediaItem}.
    *
-   * <p>This is equivalent to using {@code
-   * retrieveMetadata(DefaultMediaSourceFactory.newInstance(context), mediaItem)}.
+   * <p>This is equivalent to using {@code retrieveMetadata(new DefaultMediaSourceFactory(context),
+   * mediaItem)}.
    *
    * @param context The {@link Context}.
    * @param mediaItem The {@link MediaItem} whose metadata should be retrieved.
    * @return A {@link ListenableFuture} of the result.
    */
   public static ListenableFuture<TrackGroupArray> retrieveMetadata(
       Context context, MediaItem mediaItem) {
-    return retrieveMetadata(DefaultMediaSourceFactory.newInstance(context), mediaItem);
+    return retrieveMetadata(new DefaultMediaSourceFactory(context), mediaItem);
   }
 
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -163,7 +163,7 @@ public Builder(Context context, RenderersFactory renderersFactory) {
           context,
           renderersFactory,
           new DefaultTrackSelector(context),
-          DefaultMediaSourceFactory.newInstance(context),
+          new DefaultMediaSourceFactory(context),
           new DefaultLoadControl(),
           DefaultBandwidthMeter.getSingletonInstance(context),
           new AnalyticsCollector(Clock.DEFAULT));

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -889,7 +889,7 @@ private static MediaSource createMediaSourceInternal(
       MediaItem mediaItem,
       DataSource.Factory dataSourceFactory,
       @Nullable DrmSessionManager drmSessionManager) {
-    return new DefaultMediaSourceFactory(dataSourceFactory, /* adSupportProvider= */ null)
+    return new DefaultMediaSourceFactory(dataSourceFactory)
         .setDrmSessionManager(drmSessionManager)
         .createMediaSource(mediaItem);
   }

File: extensions/ima/src/androidTest/java/com/google/android/exoplayer2/ext/ima/ImaPlaybackTest.java
Patch:
@@ -243,8 +243,7 @@ protected MediaSource buildSource(
           new DefaultDataSourceFactory(
               context, Util.getUserAgent(context, ImaPlaybackTest.class.getSimpleName()));
       MediaSource contentMediaSource =
-          DefaultMediaSourceFactory.newInstance(context)
-              .createMediaSource(MediaItem.fromUri(contentUri));
+          new DefaultMediaSourceFactory(context).createMediaSource(MediaItem.fromUri(contentUri));
       return new AdsMediaSource(
           contentMediaSource,
           dataSourceFactory,

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/PlayerTestRule.java
Patch:
@@ -80,7 +80,7 @@ protected void before() {
               exoPlayer =
                   new SimpleExoPlayer.Builder(context)
                       .setLooper(Looper.myLooper())
-                      .setMediaSourceFactory(new DefaultMediaSourceFactory(dataSourceFactory, null))
+                      .setMediaSourceFactory(new DefaultMediaSourceFactory(dataSourceFactory))
                       .build();
               sessionPlayerConnector = new SessionPlayerConnector(exoPlayer);
             });

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -182,7 +182,7 @@ public Builder(Context context, Renderer... renderers) {
       this(
           renderers,
           new DefaultTrackSelector(context),
-          DefaultMediaSourceFactory.newInstance(context),
+          new DefaultMediaSourceFactory(context),
           new DefaultLoadControl(),
           DefaultBandwidthMeter.getSingletonInstance(context));
     }

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerFactory.java
Patch:
@@ -194,7 +194,7 @@ public static SimpleExoPlayer newSimpleInstance(
         context,
         renderersFactory,
         trackSelector,
-        DefaultMediaSourceFactory.newInstance(context),
+        new DefaultMediaSourceFactory(context),
         loadControl,
         bandwidthMeter,
         analyticsCollector,
@@ -250,7 +250,7 @@ public static ExoPlayer newInstance(
     return new ExoPlayerImpl(
         renderers,
         trackSelector,
-        DefaultMediaSourceFactory.newInstance(context),
+        new DefaultMediaSourceFactory(context),
         loadControl,
         bandwidthMeter,
         /* analyticsCollector= */ null,

File: library/core/src/main/java/com/google/android/exoplayer2/MetadataRetriever.java
Patch:
@@ -43,16 +43,16 @@ private MetadataRetriever() {}
   /**
    * Retrieves the {@link TrackGroupArray} corresponding to a {@link MediaItem}.
    *
-   * <p>This is equivalent to using {@code
-   * retrieveMetadata(DefaultMediaSourceFactory.newInstance(context), mediaItem)}.
+   * <p>This is equivalent to using {@code retrieveMetadata(new DefaultMediaSourceFactory(context),
+   * mediaItem)}.
    *
    * @param context The {@link Context}.
    * @param mediaItem The {@link MediaItem} whose metadata should be retrieved.
    * @return A {@link ListenableFuture} of the result.
    */
   public static ListenableFuture<TrackGroupArray> retrieveMetadata(
       Context context, MediaItem mediaItem) {
-    return retrieveMetadata(DefaultMediaSourceFactory.newInstance(context), mediaItem);
+    return retrieveMetadata(new DefaultMediaSourceFactory(context), mediaItem);
   }
 
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -163,7 +163,7 @@ public Builder(Context context, RenderersFactory renderersFactory) {
           context,
           renderersFactory,
           new DefaultTrackSelector(context),
-          DefaultMediaSourceFactory.newInstance(context),
+          new DefaultMediaSourceFactory(context),
           new DefaultLoadControl(),
           DefaultBandwidthMeter.getSingletonInstance(context),
           new AnalyticsCollector(Clock.DEFAULT));

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -889,7 +889,7 @@ private static MediaSource createMediaSourceInternal(
       MediaItem mediaItem,
       DataSource.Factory dataSourceFactory,
       @Nullable DrmSessionManager drmSessionManager) {
-    return new DefaultMediaSourceFactory(dataSourceFactory, /* adSupportProvider= */ null)
+    return new DefaultMediaSourceFactory(dataSourceFactory)
         .setDrmSessionManager(drmSessionManager)
         .createMediaSource(mediaItem);
   }

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -297,9 +297,9 @@ protected void initializePlayer() {
               .setTrackSelector(trackSelector)
               .build();
       player.addListener(new PlayerEventListener());
+      player.addAnalyticsListener(new EventLogger(trackSelector));
       player.setAudioAttributes(AudioAttributes.DEFAULT, /* handleAudioFocus= */ true);
       player.setPlayWhenReady(startAutoPlay);
-      player.addAnalyticsListener(new EventLogger(trackSelector));
       playerView.setPlayer(player);
       playerView.setPlaybackPreparer(this);
       debugViewHelper = new DebugTextViewHelper(player, debugTextView);

File: library/core/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -374,8 +374,6 @@ interface MetadataComponent {
   }
 
   /** The device component of a {@link Player}. */
-  // Note: It's mostly from the androidx.media.VolumeProviderCompat and
-  //  androidx.media.MediaControllerCompat.PlaybackInfo.
   interface DeviceComponent {
 
     /** Adds a listener to receive device events. */

File: library/core/src/main/java/com/google/android/exoplayer2/source/ClippingMediaPeriod.java
Patch:
@@ -264,7 +264,8 @@ private static boolean shouldKeepInitialDiscontinuity(
       for (TrackSelection trackSelection : selections) {
         if (trackSelection != null) {
           Format selectedFormat = trackSelection.getSelectedFormat();
-          if (!MimeTypes.allSamplesAreSyncSamples(selectedFormat.sampleMimeType)) {
+          if (!MimeTypes.allSamplesAreSyncSamples(
+              selectedFormat.sampleMimeType, selectedFormat.codecs)) {
             return true;
           }
         }

File: library/core/src/main/java/com/google/android/exoplayer2/source/SampleQueue.java
Patch:
@@ -659,7 +659,7 @@ private synchronized boolean setUpstreamFormat(Format format) {
       upstreamFormat = format;
     }
     upstreamAllSamplesAreSyncSamples =
-        MimeTypes.allSamplesAreSyncSamples(upstreamFormat.sampleMimeType);
+        MimeTypes.allSamplesAreSyncSamples(upstreamFormat.sampleMimeType, upstreamFormat.codecs);
     loggedUnexpectedNonSyncSample = false;
     return true;
   }

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerControlView.java
Patch:
@@ -1210,6 +1210,7 @@ public boolean dispatchMediaKeyEvent(KeyEvent event) {
       } else if (event.getRepeatCount() == 0) {
         switch (keyCode) {
           case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
+          case KeyEvent.KEYCODE_HEADSETHOOK:
             controlDispatcher.dispatchSetPlayWhenReady(player, !player.getPlayWhenReady());
             break;
           case KeyEvent.KEYCODE_MEDIA_PLAY:
@@ -1244,6 +1245,7 @@ private static boolean isHandledMediaKey(int keyCode) {
     return keyCode == KeyEvent.KEYCODE_MEDIA_FAST_FORWARD
         || keyCode == KeyEvent.KEYCODE_MEDIA_REWIND
         || keyCode == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE
+        || keyCode == KeyEvent.KEYCODE_HEADSETHOOK
         || keyCode == KeyEvent.KEYCODE_MEDIA_PLAY
         || keyCode == KeyEvent.KEYCODE_MEDIA_PAUSE
         || keyCode == KeyEvent.KEYCODE_MEDIA_NEXT

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -1644,6 +1644,7 @@ public boolean dispatchMediaKeyEvent(KeyEvent event) {
       } else if (event.getRepeatCount() == 0) {
         switch (keyCode) {
           case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
+          case KeyEvent.KEYCODE_HEADSETHOOK:
             controlDispatcher.dispatchSetPlayWhenReady(player, !player.getPlayWhenReady());
             break;
           case KeyEvent.KEYCODE_MEDIA_PLAY:
@@ -1678,6 +1679,7 @@ private static boolean isHandledMediaKey(int keyCode) {
     return keyCode == KeyEvent.KEYCODE_MEDIA_FAST_FORWARD
         || keyCode == KeyEvent.KEYCODE_MEDIA_REWIND
         || keyCode == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE
+        || keyCode == KeyEvent.KEYCODE_HEADSETHOOK
         || keyCode == KeyEvent.KEYCODE_MEDIA_PLAY
         || keyCode == KeyEvent.KEYCODE_MEDIA_PAUSE
         || keyCode == KeyEvent.KEYCODE_MEDIA_NEXT

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -654,7 +654,7 @@ public void addAudioLanguagesToSelection(String... languages) {
         }
       }
       for (String language : languages) {
-        parametersBuilder.setPreferredAudioLanguage(language);
+        parametersBuilder.setPreferredAudioLanguages(language);
         addTrackSelection(periodIndex, parametersBuilder.build());
       }
     }
@@ -685,7 +685,7 @@ public void addTextLanguagesToSelection(
       }
       parametersBuilder.setSelectUndeterminedTextLanguage(selectUndeterminedTextLanguage);
       for (String language : languages) {
-        parametersBuilder.setPreferredTextLanguage(language);
+        parametersBuilder.setPreferredTextLanguages(language);
         addTrackSelection(periodIndex, parametersBuilder.build());
       }
     }

File: library/core/src/test/java/com/google/android/exoplayer2/audio/MediaCodecAudioRendererTest.java
Patch:
@@ -49,8 +49,10 @@
 import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnit;
 import org.mockito.junit.MockitoRule;
+import org.robolectric.annotation.Config;
 
 /** Unit tests for {@link MediaCodecAudioRenderer} */
+@Config(sdk = 29)
 @RunWith(AndroidJUnit4.class)
 public class MediaCodecAudioRendererTest {
   @Rule public final MockitoRule mockito = MockitoJUnit.rule();

File: library/core/src/main/java/com/google/android/exoplayer2/util/EventLogger.java
Patch:
@@ -322,7 +322,7 @@ public void onAudioUnderrun(
     loge(
         eventTime,
         "audioTrackUnderrun",
-        bufferSize + ", " + bufferSizeMs + ", " + elapsedSinceLastFeedMs + "]",
+        bufferSize + ", " + bufferSizeMs + ", " + elapsedSinceLastFeedMs,
         /* throwable= */ null);
   }
 

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/PlayerTestRule.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.google.android.exoplayer2.ext.media2;
 
 import android.content.Context;

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/SessionCallbackBuilderTest.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.google.android.exoplayer2.ext.media2;
 
 import static com.google.android.exoplayer2.ext.media2.TestUtils.assertPlayerResultSuccess;

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/SessionPlayerConnectorTest.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.google.android.exoplayer2.ext.media2;
 
 import static androidx.media2.common.SessionPlayer.PLAYER_STATE_PAUSED;

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/TestUtils.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.google.android.exoplayer2.ext.media2;
 
 import static androidx.media2.common.SessionPlayer.PlayerResult.RESULT_SUCCESS;

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/PlayerWrapper.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.google.android.exoplayer2.ext.media2;
 
 import androidx.annotation.IntRange;

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/SessionCallback.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.google.android.exoplayer2.ext.media2;
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/SessionCallbackBuilder.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.google.android.exoplayer2.ext.media2;
 
 import android.Manifest;
@@ -45,7 +44,7 @@
 import java.util.List;
 
 /**
- * Builds {@link MediaSession.SessionCallback} with various collaborators.
+ * Builds a {@link MediaSession.SessionCallback} with various collaborators.
  *
  * @see MediaSession.SessionCallback
  */

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/SessionPlayerConnector.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.google.android.exoplayer2.ext.media2;
 
 import androidx.annotation.FloatRange;

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/PlayerTestRule.java
Patch:
@@ -83,8 +83,7 @@ protected void before() {
                       .setLooper(Looper.myLooper())
                       .setMediaSourceFactory(new DefaultMediaSourceFactory(dataSourceFactory, null))
                       .build();
-              sessionPlayerConnector =
-                  new SessionPlayerConnector(exoPlayer, new DefaultMediaItemConverter());
+              sessionPlayerConnector = new SessionPlayerConnector(exoPlayer);
             });
   }
 

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/SessionPlayerConnectorTest.java
Patch:
@@ -1272,7 +1272,7 @@ public void getPlaylist_returnsPlaylistInUnderlyingPlayer() {
               simpleExoPlayer.setMediaItems(exoMediaItems);
 
               try (SessionPlayerConnector sessionPlayer =
-                  new SessionPlayerConnector(simpleExoPlayer, converter)) {
+                  new SessionPlayerConnector(simpleExoPlayer)) {
                 List<MediaItem> playlist = sessionPlayer.getPlaylist();
                 playlistFromSessionPlayer.set(playlist);
               }

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
Patch:
@@ -551,7 +551,7 @@ private DrmSession maybeAcquirePlaceholderSession(int trackType) {
     // Avoid attaching a session to sparse formats.
     if (avoidPlaceholderDrmSessions
         || Util.linearSearch(useDrmSessionsForClearContentTrackTypes, trackType) == C.INDEX_UNSET
-        || exoMediaDrm.getExoMediaCryptoType() == null) {
+        || UnsupportedMediaCrypto.class.equals(exoMediaDrm.getExoMediaCryptoType())) {
       return null;
     }
     if (placeholderDrmSession == null) {

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeAdaptiveMediaPeriod.java
Patch:
@@ -31,6 +31,7 @@
 import com.google.android.exoplayer2.upstream.TransferListener;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.MimeTypes;
+import com.google.android.exoplayer2.util.Util;
 import java.util.ArrayList;
 import java.util.List;
 import org.checkerframework.checker.nullness.compatqual.NullableType;
@@ -48,7 +49,7 @@ public class FakeAdaptiveMediaPeriod extends FakeMediaPeriod
   @Nullable private final TransferListener transferListener;
   private final long durationUs;
 
-  @MonotonicNonNull private Callback callback;
+  private @MonotonicNonNull Callback callback;
   private ChunkSampleStream<FakeChunkSource>[] sampleStreams;
   private SequenceableLoader sequenceableLoader;
 
@@ -99,7 +100,7 @@ public long selectTracks(
       }
     }
     sampleStreams = newSampleStreamArray(validStreams.size());
-    validStreams.toArray(sampleStreams);
+    Util.nullSafeListToArray(validStreams, sampleStreams);
     this.sequenceableLoader = new CompositeSequenceableLoader(sampleStreams);
     return returnPositionUs;
   }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeDataSource.java
Patch:
@@ -217,8 +217,7 @@ public final void close() {
    * this method.
    */
   public final DataSpec[] getAndClearOpenedDataSpecs() {
-    DataSpec[] dataSpecs = new DataSpec[openedDataSpecs.size()];
-    openedDataSpecs.toArray(dataSpecs);
+    DataSpec[] dataSpecs = openedDataSpecs.toArray(new DataSpec[0]);
     openedDataSpecs.clear();
     return dataSpecs;
   }

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -17,7 +17,6 @@
 
 import android.content.Intent;
 import android.content.pm.PackageManager;
-import android.media.MediaDrm;
 import android.net.Uri;
 import android.os.Bundle;
 import android.util.Pair;
@@ -47,6 +46,7 @@
 import com.google.android.exoplayer2.drm.FrameworkMediaDrm;
 import com.google.android.exoplayer2.drm.HttpMediaDrmCallback;
 import com.google.android.exoplayer2.drm.MediaDrmCallback;
+import com.google.android.exoplayer2.drm.FrameworkMediaDrm;
 import com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.DecoderInitializationException;
 import com.google.android.exoplayer2.mediacodec.MediaCodecUtil.DecoderQueryException;
 import com.google.android.exoplayer2.offline.DownloadHelper;
@@ -485,7 +485,7 @@ private MediaSource createLeafMediaSource(UriSample parameters) {
       drmSessionManager = DrmSessionManager.getDummyDrmSessionManager();
     } else if (Util.SDK_INT < 18) {
       errorStringId = R.string.error_drm_unsupported_before_api_18;
-    } else if (!MediaDrm.isCryptoSchemeSupported(drmInfo.drmScheme)) {
+    } else if (!FrameworkMediaDrm.isCryptoSchemeSupported(drmInfo.drmScheme)) {
       errorStringId = R.string.error_drm_unsupported_scheme;
     } else {
       MediaDrmCallback mediaDrmCallback =

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
Patch:
@@ -1937,6 +1937,9 @@ private static boolean codecNeedsEosPropagationWorkaround(MediaCodecInfo codecIn
     String name = codecInfo.name;
     return (Util.SDK_INT <= 25 && "OMX.rk.video_decoder.avc".equals(name))
         || (Util.SDK_INT <= 17 && "OMX.allwinner.video.decoder.avc".equals(name))
+        || (Util.SDK_INT <= 29
+            && ("OMX.broadcom.video_decoder.tunnel".equals(name)
+                || "OMX.broadcom.video_decoder.tunnel.secure".equals(name)))
         || ("Amazon".equals(Util.MANUFACTURER) && "AFTS".equals(Util.MODEL) && codecInfo.secure);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/extractor/mp4/Sniffer.java
Patch:
@@ -57,6 +57,8 @@
         0x71742020, // qt[space][space], Apple QuickTime
         0x4d534e56, // MSNV, Sony PSP
         0x64627931, // dby1, Dolby Vision
+        0x69736d6c, // isml
+        0x70696666, // piff
       };
 
   /**

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/PlayerTestRule.java
Patch:
@@ -75,8 +75,8 @@ protected void before() {
                       .setLooper(Looper.myLooper())
                       .setMediaSourceFactory(new DefaultMediaSourceFactory(dataSourceFactory, null))
                       .build();
-              DefaultMediaItemConverter converter = new DefaultMediaItemConverter(context);
-              sessionPlayerConnector = new SessionPlayerConnector(exoPlayer, converter);
+              sessionPlayerConnector =
+                  new SessionPlayerConnector(exoPlayer, new DefaultMediaItemConverter());
             });
   }
 

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/SessionPlayerConnectorTest.java
Patch:
@@ -183,15 +183,15 @@ public boolean dispatchSetPlayWhenReady(Player player, boolean playWhenReady) {
             return false;
           }
         };
-    DefaultMediaItemConverter converter = new DefaultMediaItemConverter(context);
     SimpleExoPlayer simpleExoPlayer = null;
     try {
       simpleExoPlayer =
           new SimpleExoPlayer.Builder(context)
               .setLooper(Looper.myLooper())
               .build();
       try (SessionPlayerConnector player =
-          new SessionPlayerConnector(simpleExoPlayer, converter, controlDispatcher)) {
+          new SessionPlayerConnector(
+              simpleExoPlayer, new DefaultMediaItemConverter(), controlDispatcher)) {
         assertPlayerResult(player.play(), RESULT_INFO_SKIPPED);
       }
     } finally {

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/MediaSessionUtil.java
Patch:
@@ -19,15 +19,15 @@
 import android.support.v4.media.session.MediaSessionCompat;
 import androidx.media2.session.MediaSession;
 
-/** Utility methods to use {@link MediaSession} with other existing Exo modules. */
+/** Utility methods to use {@link MediaSession} with other ExoPlayer modules. */
 public final class MediaSessionUtil {
 
   /** Gets the {@link MediaSessionCompat.Token} from the {@link MediaSession}. */
   // TODO(b/152764014): Deprecate this API when MediaSession#getSessionCompatToken() is released.
-  public static MediaSessionCompat.Token getSessionCompatToken(MediaSession session2) {
+  public static MediaSessionCompat.Token getSessionCompatToken(MediaSession mediaSession) {
     @SuppressLint("RestrictedApi")
     @SuppressWarnings("RestrictTo")
-    MediaSessionCompat sessionCompat = session2.getSessionCompat();
+    MediaSessionCompat sessionCompat = mediaSession.getSessionCompat();
     return sessionCompat.getSessionToken();
   }
 

File: extensions/media2/src/main/java/com/google/android/exoplayer2/ext/media2/PlayerWrapper.java
Patch:
@@ -126,7 +126,7 @@ void onBufferingUpdate(
    * @param mediaItemConverter The {@link MediaItemConverter}.
    * @param controlDispatcher A {@link ControlDispatcher}.
    */
-  PlayerWrapper(
+  public PlayerWrapper(
       Listener listener,
       Player player,
       MediaItemConverter mediaItemConverter,

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/MediaSessionUtilTest.java
Patch:
@@ -58,7 +58,7 @@ public void getSessionCompatToken_withMediaControllerCompat_returnsValidToken()
     SessionPlayerConnector sessionPlayerConnector = playerTestRule.getSessionPlayerConnector();
     MediaSession.SessionCallback sessionCallback =
         new SessionCallbackBuilder(context, sessionPlayerConnector).build();
-    TestUtils.loadResource(context, R.raw.audio, sessionPlayerConnector);
+    TestUtils.loadResource(R.raw.audio, sessionPlayerConnector);
     ListenableFuture<PlayerResult> prepareResult = sessionPlayerConnector.prepare();
     CountDownLatch latch = new CountDownLatch(1);
     sessionPlayerConnector.registerPlayerCallback(

File: extensions/media2/src/androidTest/java/com/google/android/exoplayer2/ext/media2/MediaStubActivity.java
Patch:
@@ -27,7 +27,8 @@
 import com.google.android.exoplayer2.util.Util;
 
 /** Stub activity to play media contents on. */
-public class MediaStubActivity extends Activity {
+public final class MediaStubActivity extends Activity {
+
   private static final String TAG = "MediaStubActivity";
 
   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DrmSessionManager.java
Patch:
@@ -105,7 +105,7 @@ DrmSession acquireSession(
   /**
    * Returns the {@link ExoMediaCrypto} type associated to sessions acquired for the given {@link
    * Format}. Returns the {@link UnsupportedMediaCrypto} type if this DRM session manager does not
-   * support "any of the DRM schemes defined in the given {@link Format}. If the {@link Format}
+   * support any of the DRM schemes defined in the given {@link Format}. If the {@link Format}
    * describes unencrypted content, returns an {@link ExoMediaCrypto} type if this DRM session
    * manager would associate a {@link #acquirePlaceholderSession placeholder session} to the given
    * {@link Format}, or null otherwise.

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -1098,7 +1098,7 @@ private void updatePlayPauseButton() {
       return;
     }
     if (playPauseButton != null) {
-      if (player != null && player.isPlaying()) {
+      if (player != null && player.getPlayWhenReady()) {
         ((ImageView) playPauseButton)
             .setImageDrawable(resources.getDrawable(R.drawable.exo_styled_controls_pause));
         playPauseButton.setContentDescription(
@@ -1811,7 +1811,7 @@ public void onClick(View view) {
         } else if (player.getPlaybackState() == Player.STATE_ENDED) {
           seekTo(player, player.getCurrentWindowIndex(), C.TIME_UNSET);
         }
-        controlDispatcher.dispatchSetPlayWhenReady(player, !player.isPlaying());
+        controlDispatcher.dispatchSetPlayWhenReady(player, !player.getPlayWhenReady());
       } else if (repeatToggleButton == view) {
         controlDispatcher.dispatchSetRepeatMode(
             player, RepeatModeUtil.getNextRepeatMode(player.getRepeatMode(), repeatToggleModes));

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -625,7 +625,7 @@ public ExoPlayer build() {
    *   <li>audio offload rendering is enabled in {@link
    *       DefaultRenderersFactory#setEnableAudioOffload} or the equivalent option passed to {@link
    *       com.google.android.exoplayer2.audio.DefaultAudioSink#DefaultAudioSink(AudioCapabilities,
-   *       DefaultAudioSink.AudioProcessorChain, boolean, boolean)}.
+   *       DefaultAudioSink.AudioProcessorChain, boolean, boolean, boolean)}.
    *   <li>an audio track is playing in a format which the device supports offloading (for example
    *       MP3 or AAC).
    *   <li>The {@link com.google.android.exoplayer2.audio.AudioSink} is playing with an offload

File: library/core/src/test/java/com/google/android/exoplayer2/audio/DefaultAudioSinkTest.java
Patch:
@@ -62,6 +62,7 @@ public void setUp() {
             AudioCapabilities.DEFAULT_AUDIO_CAPABILITIES,
             new DefaultAudioSink.DefaultAudioProcessorChain(teeAudioProcessor),
             /* enableFloatOutput= */ false,
+            /* enableAudioTrackPlaybackParams= */ false,
             /* enableOffload= */ false);
   }
 

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/IntentUtil.java
Patch:
@@ -55,7 +55,7 @@ public class IntentUtil {
   public static final String AD_TAG_URI_EXTRA = "ad_tag_uri";
 
   public static final String DRM_SCHEME_EXTRA = "drm_scheme";
-  public static final String DRM_LICENSE_URL_EXTRA = "drm_license_url";
+  public static final String DRM_LICENSE_URI_EXTRA = "drm_license_uri";
   public static final String DRM_KEY_REQUEST_PROPERTIES_EXTRA = "drm_key_request_properties";
   public static final String DRM_SESSION_FOR_CLEAR_CONTENT = "drm_session_for_clear_content";
   public static final String DRM_MULTI_SESSION_EXTRA = "drm_multi_session";
@@ -155,7 +155,7 @@ private static MediaItem.Builder populateDrmPropertiesFromIntent(
     }
     builder
         .setDrmUuid(Util.getDrmUuid(Util.castNonNull(drmSchemeExtra)))
-        .setDrmLicenseUri(intent.getStringExtra(DRM_LICENSE_URL_EXTRA + extrasKeySuffix))
+        .setDrmLicenseUri(intent.getStringExtra(DRM_LICENSE_URI_EXTRA + extrasKeySuffix))
         .setDrmMultiSession(
             intent.getBooleanExtra(DRM_MULTI_SESSION_EXTRA + extrasKeySuffix, false))
         .setDrmForceDefaultLicenseUri(
@@ -190,7 +190,7 @@ private static void addDrmConfigurationToIntent(
       MediaItem.DrmConfiguration drmConfiguration, Intent intent, String extrasKeySuffix) {
     intent.putExtra(DRM_SCHEME_EXTRA + extrasKeySuffix, drmConfiguration.uuid.toString());
     intent.putExtra(
-        DRM_LICENSE_URL_EXTRA + extrasKeySuffix,
+        DRM_LICENSE_URI_EXTRA + extrasKeySuffix,
         drmConfiguration.licenseUri != null ? drmConfiguration.licenseUri.toString() : null);
     intent.putExtra(DRM_MULTI_SESSION_EXTRA + extrasKeySuffix, drmConfiguration.multiSession);
     intent.putExtra(

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
Patch:
@@ -375,7 +375,8 @@ private PlaylistHolder readEntry(JsonReader reader, boolean insidePlaylist) thro
           case "drm_scheme":
             mediaItem.setDrmUuid(Util.getDrmUuid(reader.nextString()));
             break;
-          case "drm_license_url":
+          case "drm_license_uri":
+          case "drm_license_url": // For backward compatibility only.
             mediaItem.setDrmLicenseUri(reader.nextString());
             break;
           case "drm_key_request_properties":

File: library/core/src/main/java/com/google/android/exoplayer2/source/DefaultMediaSourceFactory.java
Patch:
@@ -379,6 +379,7 @@ private MediaSource maybeWrapWithAdsMediaSource(MediaItem mediaItem, MediaSource
               + " media items with an ad tag uri.");
       return mediaSource;
     }
+    @Nullable
     AdsLoader adsLoader = adSupportProvider.getAdsLoader(mediaItem.playbackProperties.adTagUri);
     if (adsLoader == null) {
       Log.w(TAG, "Playing media without ads. No AdsLoader for provided adTagUri");

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/AtomParsers.java
Patch:
@@ -1260,8 +1260,7 @@ private static void parseAudioSampleEntry(
           if (initializationDataBytes != null) {
             if (MimeTypes.AUDIO_AAC.equals(mimeType)) {
               // Update sampleRate and channelCount from the AudioSpecificConfig initialization
-              // data,
-              // which is more reliable. See [Internal: b/10903778].
+              // data, which is more reliable. See [Internal: b/10903778].
               AacUtil.Config aacConfig = AacUtil.parseAudioSpecificConfig(initializationDataBytes);
               sampleRate = aacConfig.sampleRateHz;
               channelCount = aacConfig.channelCount;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioTrackPositionTracker.java
Patch:
@@ -318,7 +318,7 @@ public boolean mayHandleBuffer(long writtenFrames) {
 
     boolean hadData = hasData;
     hasData = hasPendingData(writtenFrames);
-    if (hadData && !hasData && playState != PLAYSTATE_STOPPED && listener != null) {
+    if (hadData && !hasData && playState != PLAYSTATE_STOPPED) {
       listener.onUnderrun(bufferSize, C.usToMs(bufferSizeUs));
     }
 

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -19,7 +19,6 @@
 
 import android.content.Intent;
 import android.content.pm.PackageManager;
-import android.media.MediaDrm;
 import android.net.Uri;
 import android.os.Bundle;
 import android.util.Pair;
@@ -41,6 +40,7 @@
 import com.google.android.exoplayer2.RenderersFactory;
 import com.google.android.exoplayer2.SimpleExoPlayer;
 import com.google.android.exoplayer2.audio.AudioAttributes;
+import com.google.android.exoplayer2.drm.FrameworkMediaDrm;
 import com.google.android.exoplayer2.ext.ima.ImaAdsLoader;
 import com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.DecoderInitializationException;
 import com.google.android.exoplayer2.mediacodec.MediaCodecUtil.DecoderQueryException;
@@ -346,7 +346,7 @@ private List<MediaItem> createMediaItems(Intent intent) {
           showToast(R.string.error_drm_unsupported_before_api_18);
           finish();
           return Collections.emptyList();
-        } else if (!MediaDrm.isCryptoSchemeSupported(drmConfiguration.uuid)) {
+        } else if (!FrameworkMediaDrm.isCryptoSchemeSupported(drmConfiguration.uuid)) {
           showToast(R.string.error_drm_unsupported_scheme);
           finish();
           return Collections.emptyList();

File: extensions/ffmpeg/src/main/java/com/google/android/exoplayer2/ext/ffmpeg/FfmpegVideoRenderer.java
Patch:
@@ -38,7 +38,7 @@
  */
 public final class FfmpegVideoRenderer extends DecoderVideoRenderer {
 
-  private static final String TAG = "FfmpegAudioRenderer";
+  private static final String TAG = "FfmpegVideoRenderer";
 
   /**
    * Creates a new instance.

File: library/core/src/main/java/com/google/android/exoplayer2/source/ClippingMediaPeriod.java
Patch:
@@ -258,13 +258,13 @@ private static boolean shouldKeepInitialDiscontinuity(
     // negative timestamp, its offset timestamp can jump backwards compared to the last timestamp
     // read in the previous period. Renderer implementations may not allow this, so we signal a
     // discontinuity which resets the renderers before they read the clipping sample stream.
-    // However, for audio-only track selections we assume to have random access seek behaviour and
-    // do not need an initial discontinuity to reset the renderer.
+    // However, for tracks where all samples are sync samples, we assume they have random access
+    // seek behaviour and do not need an initial discontinuity to reset the renderer.
     if (startUs != 0) {
       for (TrackSelection trackSelection : selections) {
         if (trackSelection != null) {
           Format selectedFormat = trackSelection.getSelectedFormat();
-          if (!MimeTypes.isAudio(selectedFormat.sampleMimeType)) {
+          if (!MimeTypes.allSamplesAreSyncSamples(selectedFormat.sampleMimeType)) {
             return true;
           }
         }

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
Patch:
@@ -215,6 +215,7 @@ public Builder(
       useLazyPreparation = true;
       seekParameters = SeekParameters.DEFAULT;
       clock = Clock.DEFAULT;
+      throwWhenStuckBuffering = true;
     }
 
     /**
@@ -411,8 +412,8 @@ public ExoPlayer build() {
       if (releaseTimeoutMs > 0) {
         player.experimental_setReleaseTimeoutMs(releaseTimeoutMs);
       }
-      if (throwWhenStuckBuffering) {
-        player.experimental_throwWhenStuckBuffering();
+      if (!throwWhenStuckBuffering) {
+        player.experimental_disableThrowWhenStuckBuffering();
       }
 
       return player;

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -200,13 +200,13 @@ public void experimental_setReleaseTimeoutMs(long timeoutMs) {
   }
 
   /**
-   * Configures the player to throw when it detects it's stuck buffering.
+   * Configures the player to not throw when it detects it's stuck buffering.
    *
    * <p>This method is experimental, and will be renamed or removed in a future release. It should
    * only be called before the player is used.
    */
-  public void experimental_throwWhenStuckBuffering() {
-    internalPlayer.experimental_throwWhenStuckBuffering();
+  public void experimental_disableThrowWhenStuckBuffering() {
+    internalPlayer.experimental_disableThrowWhenStuckBuffering();
   }
 
   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -224,6 +224,7 @@ public ExoPlayerImplInternal(
     this.pauseAtEndOfWindow = pauseAtEndOfWindow;
     this.clock = clock;
 
+    throwWhenStuckBuffering = true;
     backBufferDurationUs = loadControl.getBackBufferDurationUs();
     retainBackBufferFromKeyframe = loadControl.retainBackBufferFromKeyframe();
 
@@ -257,8 +258,8 @@ public void experimental_setReleaseTimeoutMs(long releaseTimeoutMs) {
     this.releaseTimeoutMs = releaseTimeoutMs;
   }
 
-  public void experimental_throwWhenStuckBuffering() {
-    throwWhenStuckBuffering = true;
+  public void experimental_disableThrowWhenStuckBuffering() {
+    throwWhenStuckBuffering = false;
   }
 
   public void experimental_enableOffloadScheduling(boolean enableOffloadScheduling) {

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -206,6 +206,7 @@ public Builder(
       useLazyPreparation = true;
       seekParameters = SeekParameters.DEFAULT;
       clock = Clock.DEFAULT;
+      throwWhenStuckBuffering = true;
     }
 
     /**
@@ -618,8 +619,8 @@ protected SimpleExoPlayer(Builder builder) {
     wifiLockManager = new WifiLockManager(builder.context);
     wifiLockManager.setEnabled(builder.wakeMode == C.WAKE_MODE_NETWORK);
     deviceInfo = createDeviceInfo(streamVolumeManager);
-    if (builder.throwWhenStuckBuffering) {
-      player.experimental_throwWhenStuckBuffering();
+    if (!builder.throwWhenStuckBuffering) {
+      player.experimental_disableThrowWhenStuckBuffering();
     }
 
     sendRendererMessage(C.TRACK_TYPE_AUDIO, Renderer.MSG_SET_AUDIO_ATTRIBUTES, audioAttributes);

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlViewLayoutManager.java
Patch:
@@ -53,7 +53,7 @@
   private final Runnable hideControllerRunnable;
   private final OnLayoutChangeListener onLayoutChangeListener;
 
-  private int uxState = UX_STATE_ALL_VISIBLE;
+  private int uxState;
   private boolean initiallyHidden;
   private boolean isMinimalMode;
   private boolean needToShowBars;
@@ -88,6 +88,7 @@ public StyledPlayerControlViewLayoutManager() {
     hideControllerRunnable = this::hideController;
     onLayoutChangeListener = this::onLayoutChange;
     animationEnabled = true;
+    uxState = UX_STATE_ALL_VISIBLE;
   }
 
   public void show() {
@@ -432,7 +433,7 @@ public boolean isFullyVisible() {
     if (styledPlayerControlView == null) {
       return false;
     }
-    return uxState == UX_STATE_ALL_VISIBLE;
+    return uxState == UX_STATE_ALL_VISIBLE && styledPlayerControlView.isVisible();
   }
 
   private void setUxState(int uxState) {

File: library/core/src/main/java/com/google/android/exoplayer2/util/EventLogger.java
Patch:
@@ -195,8 +195,6 @@ public void onMediaItemTransition(
     logd(
         "mediaItem ["
             + getEventTimeString(eventTime)
-            + ", "
-            + (mediaItem == null ? "null" : "mediaId=" + mediaItem.mediaId)
             + ", reason="
             + getMediaItemTransitionReasonString(reason)
             + "]");

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/DefaultPlaybackSessionManagerTest.java
Patch:
@@ -171,7 +171,7 @@ public void updateSessions_ofSameWindow_withoutMediaPeriodId_afterAd_doesNotCrea
                 /* isDynamic= */ false,
                 /* durationUs= */ 10_000_000,
                 FakeTimeline.createAdPlaybackState(
-                    /* adsPerGroup= */ 1, /* adGroupTimesUs... */ 0)));
+                    /* adsPerAdGroup= */ 1, /* adGroupTimesUs... */ 0)));
     MediaPeriodId adMediaPeriodId =
         new MediaPeriodId(
             timeline.getUidOfPeriod(/* periodIndex= */ 0),
@@ -557,7 +557,7 @@ public void belongsToSession_withAd_returnsFalse() {
                 /* isDynamic= */ false,
                 /* durationUs= */ 10_000_000,
                 FakeTimeline.createAdPlaybackState(
-                    /* adsPerGroup= */ 1, /* adGroupTimesUs... */ 0)));
+                    /* adsPerAdGroup= */ 1, /* adGroupTimesUs... */ 0)));
     MediaPeriodId contentMediaPeriodId =
         new MediaPeriodId(
             timeline.getUidOfPeriod(/* periodIndex= */ 0), /* windowSequenceNumber= */ 0);

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
Patch:
@@ -1133,6 +1133,8 @@ private boolean canDiscardUpstreamMediaChunksFromIndex(int mediaChunkIndex) {
       int discardFromIndex = mediaChunk.getFirstSampleIndex(/* sampleQueueIndex= */ i);
       if (sampleQueues[i].getReadIndex() > discardFromIndex) {
         // Discarding not possible because we already read from the chunk.
+        // TODO: Sparse tracks (e.g. ID3) may prevent discarding in almost all cases because it
+        // means that most chunks have been read from already. See [internal b/161126666].
         return false;
       }
     }

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
Patch:
@@ -2279,6 +2279,9 @@ private static boolean codecNeedsEosPropagationWorkaround(MediaCodecInfo codecIn
     String name = codecInfo.name;
     return (Util.SDK_INT <= 25 && "OMX.rk.video_decoder.avc".equals(name))
         || (Util.SDK_INT <= 17 && "OMX.allwinner.video.decoder.avc".equals(name))
+        || (Util.SDK_INT <= 29
+            && ("OMX.broadcom.video_decoder.tunnel".equals(name)
+                || "OMX.broadcom.video_decoder.tunnel.secure".equals(name)))
         || ("Amazon".equals(Util.MANUFACTURER) && "AFTS".equals(Util.MODEL) && codecInfo.secure);
   }
 

File: library/core/src/test/java/com/google/android/exoplayer2/offline/DownloadManagerTest.java
Patch:
@@ -909,7 +909,7 @@ public void assertId(String id) {
     }
 
     public void assertStreamKeys(StreamKey... streamKeys) {
-      assertThat(request.streamKeys).containsExactly(streamKeys);
+      assertThat(request.streamKeys).containsExactlyElementsIn(streamKeys);
     }
 
     public void assertDownloadStarted() throws InterruptedException {

File: extensions/cronet/src/main/java/com/google/android/exoplayer2/ext/cronet/CronetDataSource.java
Patch:
@@ -30,8 +30,8 @@
 import com.google.android.exoplayer2.util.Clock;
 import com.google.android.exoplayer2.util.ConditionVariable;
 import com.google.android.exoplayer2.util.Log;
-import com.google.android.exoplayer2.util.Predicate;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Predicate;
 import java.io.IOException;
 import java.io.InterruptedIOException;
 import java.net.SocketTimeoutException;
@@ -477,7 +477,7 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
     if (contentTypePredicate != null) {
       List<String> contentTypeHeaders = responseInfo.getAllHeaders().get(CONTENT_TYPE);
       String contentType = isEmpty(contentTypeHeaders) ? null : contentTypeHeaders.get(0);
-      if (contentType != null && !contentTypePredicate.evaluate(contentType)) {
+      if (contentType != null && !contentTypePredicate.apply(contentType)) {
         throw new InvalidContentTypeException(contentType, dataSpec);
       }
     }

File: extensions/okhttp/src/main/java/com/google/android/exoplayer2/ext/okhttp/OkHttpDataSource.java
Patch:
@@ -26,8 +26,8 @@
 import com.google.android.exoplayer2.upstream.DataSpec;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.google.android.exoplayer2.util.Assertions;
-import com.google.android.exoplayer2.util.Predicate;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Predicate;
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
@@ -252,7 +252,7 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
     // Check for a valid content type.
     MediaType mediaType = responseBody.contentType();
     String contentType = mediaType != null ? mediaType.toString() : "";
-    if (contentTypePredicate != null && !contentTypePredicate.evaluate(contentType)) {
+    if (contentTypePredicate != null && !contentTypePredicate.apply(contentType)) {
       closeConnectionQuietly();
       throw new InvalidContentTypeException(contentType, dataSpec);
     }

File: library/common/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java
Patch:
@@ -18,8 +18,8 @@
 import android.text.TextUtils;
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
-import com.google.android.exoplayer2.util.Predicate;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Predicate;
 import java.io.IOException;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -43,9 +43,9 @@
 import com.google.android.exoplayer2.util.Clock;
 import com.google.android.exoplayer2.util.HandlerWrapper;
 import com.google.android.exoplayer2.util.Log;
-import com.google.android.exoplayer2.util.Supplier;
 import com.google.android.exoplayer2.util.TraceUtil;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Supplier;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/DefaultPlaybackSessionManager.java
Patch:
@@ -27,8 +27,8 @@
 import com.google.android.exoplayer2.analytics.AnalyticsListener.EventTime;
 import com.google.android.exoplayer2.source.MediaSource.MediaPeriodId;
 import com.google.android.exoplayer2.util.Assertions;
-import com.google.android.exoplayer2.util.Supplier;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Supplier;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Random;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
Patch:
@@ -23,8 +23,8 @@
 import com.google.android.exoplayer2.upstream.DataSpec.HttpMethod;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Log;
-import com.google.android.exoplayer2.util.Predicate;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Predicate;
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
@@ -319,7 +319,7 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
 
     // Check for a valid content type.
     String contentType = connection.getContentType();
-    if (contentTypePredicate != null && !contentTypePredicate.evaluate(contentType)) {
+    if (contentTypePredicate != null && !contentTypePredicate.apply(contentType)) {
       closeConnectionQuietly();
       throw new InvalidContentTypeException(contentType, dataSpec);
     }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackOutput.java
Patch:
@@ -24,9 +24,9 @@
 import com.google.android.exoplayer2.testutil.Dumper.Dumpable;
 import com.google.android.exoplayer2.upstream.DataReader;
 import com.google.android.exoplayer2.util.Assertions;
-import com.google.android.exoplayer2.util.Function;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Function;
 import com.google.common.primitives.Bytes;
 import java.io.EOFException;
 import java.io.IOException;

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/TestUtil.java
Patch:
@@ -41,9 +41,9 @@
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Clock;
 import com.google.android.exoplayer2.util.ConditionVariable;
-import com.google.android.exoplayer2.util.Supplier;
 import com.google.android.exoplayer2.util.SystemClock;
 import com.google.android.exoplayer2.util.Util;
+import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableList;
 import com.google.common.primitives.Bytes;
 import java.io.File;

File: testutils/src/test/java/com/google/android/exoplayer2/testutil/TestUtilTest.java
Patch:
@@ -26,7 +26,7 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.util.Clock;
 import com.google.android.exoplayer2.util.ConditionVariable;
-import com.google.android.exoplayer2.util.Supplier;
+import com.google.common.base.Supplier;
 import java.util.concurrent.TimeoutException;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp3/Mp3Extractor.java
Patch:
@@ -109,7 +109,7 @@ public final class Mp3Extractor implements Extractor {
   /**
    * The maximum number of bytes to peek when sniffing, excluding the ID3 header, before giving up.
    */
-  private static final int MAX_SNIFF_BYTES = 16 * 1024;
+  private static final int MAX_SNIFF_BYTES = 32 * 1024;
   /**
    * Maximum length of data read into {@link #scratch}.
    */

File: library/common/src/test/java/com/google/android/exoplayer2/FormatTest.java
Patch:
@@ -124,7 +124,7 @@ private static Format createTestFormat() {
   }
 
   /** Generates an array of random bytes with the specified length. */
-  // TODO(internal b/161776534): Use TestUtils when it's available in a dependency we can use here.
+  // TODO(internal b/161804035): Use TestUtils when it's available in a dependency we can use here.
   private static byte[] buildTestData(int length, int seed) {
     byte[] source = new byte[length];
     new Random(seed).nextBytes(source);

File: library/common/src/test/java/com/google/android/exoplayer2/drm/DrmInitDataTest.java
Patch:
@@ -163,7 +163,7 @@ private List<SchemeData> getAllSchemeData(DrmInitData drmInitData) {
   }
 
   /** Generates an array of random bytes with the specified length. */
-  // TODO(internal b/161776534): Use TestUtils when it's available in a dependency we can use here.
+  // TODO(internal b/161804035): Use TestUtils when it's available in a dependency we can use here.
   private static byte[] buildTestData(int length, int seed) {
     byte[] source = new byte[length];
     new Random(seed).nextBytes(source);

File: library/common/src/test/java/com/google/android/exoplayer2/metadata/emsg/EventMessageDecoderTest.java
Patch:
@@ -82,7 +82,7 @@ public void decodeEventMessage_failsIfArrayOffsetNonZero() {
   }
 
   /** Converts an array of integers in the range [0, 255] into an equivalent byte array. */
-  // TODO(internal b/161776534): Use TestUtils when it's available in a dependency we can use here.
+  // TODO(internal b/161804035): Use TestUtils when it's available in a dependency we can use here.
   private static byte[] createByteArray(int... bytes) {
     byte[] byteArray = new byte[bytes.length];
     for (int i = 0; i < byteArray.length; i++) {
@@ -96,7 +96,7 @@ private static byte[] createByteArray(int... bytes) {
    * Create a new {@link MetadataInputBuffer} and copy {@code data} into the backing {@link
    * ByteBuffer}.
    */
-  // TODO(internal b/161776534): Use TestUtils when it's available in a dependency we can use here.
+  // TODO(internal b/161804035): Use TestUtils when it's available in a dependency we can use here.
   private static MetadataInputBuffer createMetadataInputBuffer(byte[] data) {
     MetadataInputBuffer buffer = new MetadataInputBuffer();
     buffer.data = ByteBuffer.allocate(data.length).put(data);

File: library/common/src/test/java/com/google/android/exoplayer2/metadata/emsg/EventMessageEncoderTest.java
Patch:
@@ -79,7 +79,7 @@ public void encodeEventStreamMultipleTimesWorkingCorrectly() throws IOException
   }
 
   /** Converts an array of integers in the range [0, 255] into an equivalent byte array. */
-  // TODO(internal b/161776534): Move to a single file.
+  // TODO(internal b/161804035): Move to a single file.
   private static byte[] createByteArray(int... bytes) {
     byte[] byteArray = new byte[bytes.length];
     for (int i = 0; i < byteArray.length; i++) {
@@ -93,7 +93,7 @@ private static byte[] createByteArray(int... bytes) {
    * Create a new {@link MetadataInputBuffer} and copy {@code data} into the backing {@link
    * ByteBuffer}.
    */
-  // TODO(internal b/161776534): Use TestUtils when it's available in a dependency we can use here.
+  // TODO(internal b/161804035): Use TestUtils when it's available in a dependency we can use here.
   private static MetadataInputBuffer createMetadataInputBuffer(byte[] data) {
     MetadataInputBuffer buffer = new MetadataInputBuffer();
     buffer.data = ByteBuffer.allocate(data.length).put(data);

File: library/common/src/test/java/com/google/android/exoplayer2/metadata/id3/Id3DecoderTest.java
Patch:
@@ -318,7 +318,7 @@ public FrameSpec(String frameId, byte[] frameData) {
   }
 
   /** Converts an array of integers in the range [0, 255] into an equivalent byte array. */
-  // TODO(internal b/161776534): Move to a single file.
+  // TODO(internal b/161804035): Move to a single file.
   private static byte[] createByteArray(int... bytes) {
     byte[] byteArray = new byte[bytes.length];
     for (int i = 0; i < byteArray.length; i++) {
@@ -332,7 +332,7 @@ private static byte[] createByteArray(int... bytes) {
    * Create a new {@link MetadataInputBuffer} and copy {@code data} into the backing {@link
    * ByteBuffer}.
    */
-  // TODO(internal b/161776534): Use TestUtils when it's available in a dependency we can use here.
+  // TODO(internal b/161804035): Use TestUtils when it's available in a dependency we can use here.
   private static MetadataInputBuffer createMetadataInputBuffer(byte[] data) {
     MetadataInputBuffer buffer = new MetadataInputBuffer();
     buffer.data = ByteBuffer.allocate(data.length).put(data);

File: library/common/src/test/java/com/google/android/exoplayer2/util/NalUnitUtilTest.java
Patch:
@@ -210,7 +210,7 @@ private static void assertDiscardToSpsMatchesExpected(String input, String expec
   }
 
   /** Converts an array of integers in the range [0, 255] into an equivalent byte array. */
-  // TODO(internal b/161776534): Use TestUtils when it's available in a dependency we can use here.
+  // TODO(internal b/161804035): Use TestUtils when it's available in a dependency we can use here.
   private static byte[] createByteArray(int... bytes) {
     byte[] byteArray = new byte[bytes.length];
     for (int i = 0; i < byteArray.length; i++) {

File: library/common/src/test/java/com/google/android/exoplayer2/util/ParsableBitArrayTest.java
Patch:
@@ -372,7 +372,7 @@ public void noOverwriting() {
   }
 
   /** Converts an array of integers in the range [0, 255] into an equivalent byte array. */
-  // TODO(internal b/161776534): Use TestUtils when it's available in a dependency we can use here.
+  // TODO(internal b/161804035): Use TestUtils when it's available in a dependency we can use here.
   private static byte[] createByteArray(int... bytes) {
     byte[] byteArray = new byte[bytes.length];
     for (int i = 0; i < byteArray.length; i++) {

File: library/common/src/test/java/com/google/android/exoplayer2/util/ParsableNalUnitBitArrayTest.java
Patch:
@@ -121,7 +121,7 @@ public void reset() {
   }
 
   /** Converts an array of integers in the range [0, 255] into an equivalent byte array. */
-  // TODO(internal b/161776534): Use TestUtils when it's available in a dependency we can use here.
+  // TODO(internal b/161804035): Use TestUtils when it's available in a dependency we can use here.
   private static byte[] createByteArray(int... bytes) {
     byte[] byteArray = new byte[bytes.length];
     for (int i = 0; i < byteArray.length; i++) {

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoUtil.java
Patch:
@@ -61,7 +61,7 @@ public final class DemoUtil {
 
   /** Returns whether extension renderers should be used. */
   public static boolean useExtensionRenderers() {
-    return "withDecoderExtensions".equals(BuildConfig.FLAVOR);
+    return BuildConfig.USE_DECODER_EXTENSIONS;
   }
 
   public static RenderersFactory buildRenderersFactory(

File: library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
Patch:
@@ -43,7 +43,6 @@
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executor;
-import org.checkerframework.checker.nullness.compatqual.NullableType;
 
 /**
  * Base class for multi segment stream downloaders.
@@ -456,14 +455,14 @@ private static final class SegmentDownloadRunnable extends RunnableFutureTask<Vo
 
     public final Segment segment;
     public final CacheDataSource dataSource;
-    @NullableType private final ProgressNotifier progressNotifier;
+    @Nullable private final ProgressNotifier progressNotifier;
     public final byte[] temporaryBuffer;
     private final CacheWriter cacheWriter;
 
     public SegmentDownloadRunnable(
         Segment segment,
         CacheDataSource dataSource,
-        @NullableType ProgressNotifier progressNotifier,
+        @Nullable ProgressNotifier progressNotifier,
         byte[] temporaryBuffer) {
       this.segment = segment;
       this.dataSource = dataSource;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultAllocator.java
Patch:
@@ -36,7 +36,7 @@ public final class DefaultAllocator implements Allocator {
   private int targetBufferSize;
   private int allocatedCount;
   private int availableCount;
-  @NullableType private Allocation[] availableAllocations;
+  private @NullableType Allocation[] availableAllocations;
 
   /**
    * Constructs an instance without creating any {@link Allocation}s up front.

File: library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
Patch:
@@ -759,7 +759,7 @@ protected boolean processOutputBuffer(
       long positionUs,
       long elapsedRealtimeUs,
       @Nullable MediaCodec codec,
-      ByteBuffer buffer,
+      @Nullable ByteBuffer buffer,
       int bufferIndex,
       int bufferFlags,
       int sampleCount,

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -934,7 +934,7 @@ public void resetMediaSourcesWithPositionResetAndShufflingUsesFirstPeriod() thro
   }
 
   @Test
-  public void setPlaybackParametersBeforePreparationCompletesSucceeds() throws Exception {
+  public void setPlaybackSpeedBeforePreparationCompletesSucceeds() throws Exception {
     // Test that no exception is thrown when playback parameters are updated between creating a
     // period and preparation of the period completing.
     final CountDownLatch createPeriodCalledCountDownLatch = new CountDownLatch(1);
@@ -3335,7 +3335,7 @@ public void run(SimpleExoPlayer player) {
   }
 
   @Test
-  public void setPlaybackParametersConsecutivelyNotifiesListenerForEveryChangeOnceAndIsMasked()
+  public void setPlaybackSpeedConsecutivelyNotifiesListenerForEveryChangeOnceAndIsMasked()
       throws Exception {
     List<Float> maskedPlaybackSpeeds = new ArrayList<>();
     Action getPlaybackSpeedAction =
@@ -3381,7 +3381,7 @@ public void onPlaybackSpeedChanged(float playbackSpeed) {
 
   @Test
   public void
-      setUnsupportedPlaybackParametersConsecutivelyNotifiesListenerForEveryChangeOnceAndResetsOnceHandled()
+      setUnsupportedPlaybackSpeedConsecutivelyNotifiesListenerForEveryChangeOnceAndResetsOnceHandled()
           throws Exception {
     Renderer renderer =
         new FakeMediaClockRenderer(C.TRACK_TYPE_AUDIO) {

File: library/core/src/test/java/com/google/android/exoplayer2/audio/DefaultAudioSinkTest.java
Patch:
@@ -96,7 +96,7 @@ public void handlesBufferAfterReset() throws Exception {
   }
 
   @Test
-  public void handlesBufferAfterReset_withPlaybackParameters() throws Exception {
+  public void handlesBufferAfterReset_withPlaybackSpeed() throws Exception {
     defaultAudioSink.setPlaybackSpeed(/* playbackSpeed= */ 1.5f);
     configureDefaultAudioSink(CHANNEL_COUNT_STEREO);
     defaultAudioSink.handleBuffer(
@@ -124,7 +124,7 @@ public void handlesBufferAfterReset_withFormatChange() throws Exception {
   }
 
   @Test
-  public void handlesBufferAfterReset_withFormatChangeAndPlaybackParameters() throws Exception {
+  public void handlesBufferAfterReset_withFormatChangeAndPlaybackSpeed() throws Exception {
     defaultAudioSink.setPlaybackSpeed(/* playbackSpeed= */ 1.5f);
     configureDefaultAudioSink(CHANNEL_COUNT_STEREO);
     defaultAudioSink.handleBuffer(

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
Patch:
@@ -1651,7 +1651,7 @@ private void updateCodecOperatingRate() throws ExoPlaybackException {
       // No change.
     } else if (newCodecOperatingRate == CODEC_OPERATING_RATE_UNSET) {
       // The only way to clear the operating rate is to instantiate a new codec instance. See
-      // [Internal ref: b/71987865].
+      // [Internal ref: b/111543954].
       drainAndReinitializeCodec();
     } else if (codecOperatingRate != CODEC_OPERATING_RATE_UNSET
         || newCodecOperatingRate > assumedMinimumCodecOperatingRate) {

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/DownloadBuilder.java
Patch:
@@ -41,7 +41,7 @@ public final class DownloadBuilder {
   private Uri uri;
   @Nullable private String mimeType;
   private List<StreamKey> streamKeys;
-  private byte[] keySetId;
+  @Nullable private byte[] keySetId;
   @Nullable private String cacheKey;
   private byte[] customMetadata;
 
@@ -63,7 +63,7 @@ public DownloadBuilder(String id) {
         Uri.parse("uri"),
         /* mimeType= */ null,
         /* streamKeys= */ Collections.emptyList(),
-        /* keySetId= */ new byte[0],
+        /* keySetId= */ null,
         /* cacheKey= */ null,
         /* customMetadata= */ new byte[0]);
   }
@@ -90,7 +90,7 @@ private DownloadBuilder(
       Uri uri,
       @Nullable String mimeType,
       List<StreamKey> streamKeys,
-      byte[] keySetId,
+      @Nullable byte[] keySetId,
       @Nullable String cacheKey,
       byte[] customMetadata) {
     this.id = id;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Mp4Extractor.java
Patch:
@@ -328,8 +328,9 @@ private boolean readAtomHeader(ExtractorInput input) throws IOException {
       // lengths greater than Integer.MAX_VALUE.
       Assertions.checkState(atomHeaderBytesRead == Atom.HEADER_SIZE);
       Assertions.checkState(atomSize <= Integer.MAX_VALUE);
-      atomData = new ParsableByteArray((int) atomSize);
+      ParsableByteArray atomData = new ParsableByteArray((int) atomSize);
       System.arraycopy(atomHeader.data, 0, atomData.data, 0, Atom.HEADER_SIZE);
+      this.atomData = atomData;
       parserState = STATE_READING_ATOM_PAYLOAD;
     } else {
       atomData = null;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/FlacMetadataReader.java
Patch:
@@ -192,7 +192,7 @@ public static FlacStreamMetadata.SeekTable readSeekTableMetadataBlock(ParsableBy
     data.skipBytes(1);
     int length = data.readUnsignedInt24();
 
-    long seekTableEndPosition = data.getPosition() + length;
+    long seekTableEndPosition = (long) data.getPosition() + length;
     int seekPointCount = length / SEEK_POINT_SIZE;
     long[] pointSampleNumbers = new long[seekPointCount];
     long[] pointOffsets = new long[seekPointCount];

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/H264Reader.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.android.exoplayer2.extractor.ts.TsPayloadReader.FLAG_RANDOM_ACCESS_INDICATOR;
 
 import android.util.SparseArray;
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.extractor.ExtractorOutput;
@@ -36,7 +37,6 @@
 import java.util.List;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNull;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
-import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
 /**

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/H265Reader.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.extractor.ts;
 
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.extractor.ExtractorOutput;
@@ -30,7 +31,6 @@
 import java.util.Collections;
 import org.checkerframework.checker.nullness.qual.EnsuresNonNull;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
-import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
 /**

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/MpegAudioReader.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.extractor.ts;
 
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.audio.MpegAudioUtil;
@@ -24,7 +25,6 @@
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
-import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
 /**

File: extensions/cronet/src/test/java/com/google/android/exoplayer2/ext/cronet/CronetDataSourceTest.java
Patch:
@@ -64,13 +64,10 @@
 import org.mockito.ArgumentMatchers;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
-import org.robolectric.annotation.LooperMode;
-import org.robolectric.annotation.LooperMode.Mode;
 import org.robolectric.shadows.ShadowLooper;
 
 /** Tests for {@link CronetDataSource}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(Mode.PAUSED)
 public final class CronetDataSourceTest {
 
   private static final int TEST_CONNECT_TIMEOUT_MS = 100;

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -108,12 +108,10 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 import org.robolectric.shadows.ShadowAudioManager;
 
 /** Unit test for {@link ExoPlayer}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(LooperMode.Mode.PAUSED)
 public final class ExoPlayerTest {
 
   private static final String TAG = "ExoPlayerTest";

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/AnalyticsCollectorTest.java
Patch:
@@ -70,12 +70,9 @@
 import java.util.concurrent.atomic.AtomicReference;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
-import org.robolectric.annotation.LooperMode.Mode;
 
 /** Integration test for {@link AnalyticsCollector}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(Mode.PAUSED)
 public final class AnalyticsCollectorTest {
 
   private static final String TAG = "AnalyticsCollectorTest";

File: library/core/src/test/java/com/google/android/exoplayer2/drm/OfflineLicenseHelperTest.java
Patch:
@@ -32,11 +32,9 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
-import org.robolectric.annotation.LooperMode;
 
 /** Tests {@link OfflineLicenseHelper}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(LooperMode.Mode.PAUSED)
 public class OfflineLicenseHelperTest {
 
   private OfflineLicenseHelper offlineLicenseHelper;

File: library/core/src/test/java/com/google/android/exoplayer2/mediacodec/AsynchronousMediaCodecAdapterTest.java
Patch:
@@ -19,7 +19,6 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertThrows;
 import static org.robolectric.Shadows.shadowOf;
-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;
 
 import android.media.MediaCodec;
 import android.media.MediaFormat;
@@ -32,11 +31,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 import org.robolectric.shadows.ShadowLooper;
 
 /** Unit tests for {@link AsynchronousMediaCodecAdapter}. */
-@LooperMode(PAUSED)
 @RunWith(AndroidJUnit4.class)
 public class AsynchronousMediaCodecAdapterTest {
   private AsynchronousMediaCodecAdapter adapter;

File: library/core/src/test/java/com/google/android/exoplayer2/offline/DownloadHelperTest.java
Patch:
@@ -52,11 +52,9 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 
 /** Unit tests for {@link DownloadHelper}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(LooperMode.Mode.PAUSED)
 public class DownloadHelperTest {
 
   private static final Object TEST_MANIFEST = new Object();

File: library/core/src/test/java/com/google/android/exoplayer2/offline/DownloadManagerTest.java
Patch:
@@ -41,13 +41,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
-import org.robolectric.annotation.LooperMode.Mode;
 import org.robolectric.shadows.ShadowLog;
 
 /** Tests {@link DownloadManager}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(Mode.PAUSED)
 public class DownloadManagerTest {
 
   /** Timeout to use when blocking on conditions that we expect to become unblocked. */

File: library/core/src/test/java/com/google/android/exoplayer2/source/ClippingMediaSourceTest.java
Patch:
@@ -45,12 +45,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
-import org.robolectric.annotation.LooperMode.Mode;
 
 /** Unit tests for {@link ClippingMediaSource}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(Mode.PAUSED)
 public final class ClippingMediaSourceTest {
 
   private static final long TEST_PERIOD_DURATION_US = 1_000_000;

File: library/core/src/test/java/com/google/android/exoplayer2/source/ConcatenatingMediaSourceTest.java
Patch:
@@ -43,11 +43,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 
 /** Unit tests for {@link ConcatenatingMediaSource}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(LooperMode.Mode.PAUSED)
 public final class ConcatenatingMediaSourceTest {
 
   private ConcatenatingMediaSource mediaSource;

File: library/core/src/test/java/com/google/android/exoplayer2/source/LoopingMediaSourceTest.java
Patch:
@@ -28,11 +28,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 
 /** Unit tests for {@link LoopingMediaSource}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(LooperMode.Mode.PAUSED)
 public class LoopingMediaSourceTest {
 
   private FakeTimeline multiWindowTimeline;

File: library/core/src/test/java/com/google/android/exoplayer2/source/MergingMediaPeriodTest.java
Patch:
@@ -36,11 +36,9 @@
 import org.checkerframework.checker.nullness.compatqual.NullableType;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 
 /** Unit test for {@link MergingMediaPeriod}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(LooperMode.Mode.PAUSED)
 public final class MergingMediaPeriodTest {
 
   private static final Format childFormat11 = new Format.Builder().setId("1_1").build();

File: library/core/src/test/java/com/google/android/exoplayer2/source/MergingMediaSourceTest.java
Patch:
@@ -29,11 +29,9 @@
 import java.io.IOException;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 
 /** Unit tests for {@link MergingMediaSource}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(LooperMode.Mode.PAUSED)
 public class MergingMediaSourceTest {
 
   @Test

File: library/core/src/test/java/com/google/android/exoplayer2/source/ProgressiveMediaPeriodTest.java
Patch:
@@ -33,11 +33,9 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 
 /** Unit test for {@link ProgressiveMediaPeriod}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(LooperMode.Mode.PAUSED)
 public final class ProgressiveMediaPeriodTest {
 
   @Test

File: library/core/src/test/java/com/google/android/exoplayer2/source/ads/AdsMediaSourceTest.java
Patch:
@@ -22,7 +22,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 import static org.robolectric.Shadows.shadowOf;
-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;
 
 import android.net.Uri;
 import android.os.Looper;
@@ -47,11 +46,9 @@
 import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnit;
 import org.mockito.junit.MockitoRule;
-import org.robolectric.annotation.LooperMode;
 
 /** Unit tests for {@link AdsMediaSource}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(PAUSED)
 public final class AdsMediaSourceTest {
 
   private static final long PREROLL_AD_DURATION_US = 10 * C.MICROS_PER_SECOND;

File: library/core/src/test/java/com/google/android/exoplayer2/video/DecoderVideoRendererTest.java
Patch:
@@ -52,11 +52,9 @@
 import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnit;
 import org.mockito.junit.MockitoRule;
-import org.robolectric.annotation.LooperMode;
 import org.robolectric.shadows.ShadowLooper;
 
 /** Unit test for {@link DecoderVideoRenderer}. */
-@LooperMode(LooperMode.Mode.PAUSED)
 @RunWith(AndroidJUnit4.class)
 public final class DecoderVideoRendererTest {
   @Rule public final MockitoRule mockito = MockitoJUnit.rule();

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DashMediaPeriodTest.java
Patch:
@@ -48,11 +48,9 @@
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 
 /** Unit tests for {@link DashMediaPeriod}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(LooperMode.Mode.PAUSED)
 public final class DashMediaPeriodTest {
 
   @Test

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadManagerDashTest.java
Patch:
@@ -55,12 +55,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.MockitoAnnotations;
-import org.robolectric.annotation.LooperMode;
 import org.robolectric.shadows.ShadowLog;
 
 /** Tests {@link DownloadManager}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(LooperMode.Mode.PAUSED)
 public class DownloadManagerDashTest {
 
   private static final int ASSERT_TRUE_TIMEOUT_MS = 5000;

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadServiceDashTest.java
Patch:
@@ -57,11 +57,9 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 
 /** Unit tests for {@link DownloadService}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(LooperMode.Mode.PAUSED)
 public class DownloadServiceDashTest {
 
   private SimpleCache cache;

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/HlsMediaPeriodTest.java
Patch:
@@ -44,11 +44,9 @@
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 
 /** Unit test for {@link HlsMediaPeriod}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(LooperMode.Mode.PAUSED)
 public final class HlsMediaPeriodTest {
 
   @Test

File: library/smoothstreaming/src/test/java/com/google/android/exoplayer2/source/smoothstreaming/SsMediaPeriodTest.java
Patch:
@@ -37,11 +37,9 @@
 import com.google.android.exoplayer2.util.MimeTypes;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 
 /** Unit tests for {@link SsMediaPeriod}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(LooperMode.Mode.PAUSED)
 public class SsMediaPeriodTest {
 
   @Test

File: testutils/src/test/java/com/google/android/exoplayer2/testutil/FakeClockTest.java
Patch:
@@ -26,11 +26,9 @@
 import java.util.concurrent.TimeUnit;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.LooperMode;
 
 /** Unit test for {@link FakeClock}. */
 @RunWith(AndroidJUnit4.class)
-@LooperMode(LooperMode.Mode.PAUSED)
 public final class FakeClockTest {
 
   private static final long TIMEOUT_MS = 10_000;

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaPeriod.java
Patch:
@@ -787,7 +787,8 @@ private void maybeFinishPrepare() {
       if (trackFormat.drmInitData != null) {
         trackFormat =
             trackFormat.copyWithExoMediaCryptoType(
-                drmSessionManager.getExoMediaCryptoType(trackFormat.drmInitData));
+                drmSessionManager.getExoMediaCryptoType(
+                    trackFormat.drmInitData, MimeTypes.getTrackType(trackFormat.sampleMimeType)));
       }
       trackArray[i] = new TrackGroup(trackFormat);
     }

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaPeriod.java
Patch:
@@ -674,7 +674,8 @@ private static int buildPrimaryAndEmbeddedTrackGroupInfos(
         if (drmInitData != null) {
           format =
               format.copyWithExoMediaCryptoType(
-                  drmSessionManager.getExoMediaCryptoType(drmInitData));
+                  drmSessionManager.getExoMediaCryptoType(
+                      drmInitData, MimeTypes.getTrackType(format.sampleMimeType)));
         }
         formats[j] = format;
       }

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
Patch:
@@ -1313,7 +1313,8 @@ private TrackGroupArray createTrackGroupArrayWithDrmInfo(TrackGroup[] trackGroup
         if (format.drmInitData != null) {
           format =
               format.copyWithExoMediaCryptoType(
-                  drmSessionManager.getExoMediaCryptoType(format.drmInitData));
+                  drmSessionManager.getExoMediaCryptoType(
+                      format.drmInitData, MimeTypes.getTrackType(format.sampleMimeType)));
         }
         exposedFormats[j] = format;
       }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExoMediaDrm.java
Patch:
@@ -269,9 +269,8 @@ public ExoMediaCrypto createMediaCrypto(byte[] sessionId) throws MediaCryptoExce
     return new FakeExoMediaCrypto();
   }
 
-  @Nullable
   @Override
-  public Class<? extends ExoMediaCrypto> getExoMediaCryptoType() {
+  public Class<FakeExoMediaCrypto> getExoMediaCryptoType() {
     return FakeExoMediaCrypto.class;
   }
 

File: library/core/src/test/java/com/google/android/exoplayer2/offline/ActionFileTest.java
Patch:
@@ -21,6 +21,7 @@
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.testutil.TestUtil;
+import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
 import java.io.File;
 import java.io.FileOutputStream;
@@ -127,9 +128,10 @@ private ActionFile getActionFile(String fileName) throws IOException {
   private static DownloadRequest buildExpectedRequest(Uri uri, byte[] data) {
     return new DownloadRequest(
         /* id= */ uri.toString(),
-        DownloadRequest.TYPE_PROGRESSIVE,
         uri,
+        /* mimeType= */ MimeTypes.VIDEO_UNKNOWN,
         /* streamKeys= */ Collections.emptyList(),
+        /* keySetId= */ null,
         /* customCacheKey= */ null,
         data);
   }

File: library/core/src/test/java/com/google/android/exoplayer2/offline/DefaultDownloaderFactoryTest.java
Patch:
@@ -43,10 +43,11 @@ public void createProgressiveDownloader() throws Exception {
     Downloader downloader =
         factory.createDownloader(
             new DownloadRequest(
-                "id",
-                DownloadRequest.TYPE_PROGRESSIVE,
+                /* id= */ "id",
                 Uri.parse("https://www.test.com/download"),
+                /* mimeType= */ null,
                 /* streamKeys= */ Collections.emptyList(),
+                /* keySetId= */ null,
                 /* customCacheKey= */ null,
                 /* data= */ null));
     assertThat(downloader).isInstanceOf(ProgressiveDownloader.class);

File: library/core/src/test/java/com/google/android/exoplayer2/offline/DownloadHelperTest.java
Patch:
@@ -403,8 +403,8 @@ public void getDownloadRequest_createsDownloadRequest_withAllSelectedTracks() th
 
     DownloadRequest downloadRequest = downloadHelper.getDownloadRequest(data);
 
-    assertThat(downloadRequest.type).isEqualTo(DownloadRequest.TYPE_PROGRESSIVE);
     assertThat(downloadRequest.uri).isEqualTo(testMediaItem.playbackProperties.uri);
+    assertThat(downloadRequest.mimeType).isEqualTo(testMediaItem.playbackProperties.mimeType);
     assertThat(downloadRequest.customCacheKey)
         .isEqualTo(testMediaItem.playbackProperties.customCacheKey);
     assertThat(downloadRequest.data).isEqualTo(data);

File: library/core/src/test/java/com/google/android/exoplayer2/offline/DownloadManagerTest.java
Patch:
@@ -790,9 +790,10 @@ private static void assertEqualIgnoringUpdateTime(Download download, Download th
   private static DownloadRequest createDownloadRequest(String id, StreamKey... keys) {
     return new DownloadRequest(
         id,
-        DownloadRequest.TYPE_DASH,
         Uri.parse("http://abc.com/ " + id),
+        /* mimeType= */ null,
         Arrays.asList(keys),
+        /* keySetId= */ null,
         /* customCacheKey= */ null,
         /* data= */ null);
   }

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DashDownloaderTest.java
Patch:
@@ -45,6 +45,7 @@
 import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
 import com.google.android.exoplayer2.upstream.cache.NoOpCacheEvictor;
 import com.google.android.exoplayer2.upstream.cache.SimpleCache;
+import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
 import java.io.File;
 import java.io.IOException;
@@ -93,9 +94,10 @@ public void createWithDefaultDownloaderFactory() {
         factory.createDownloader(
             new DownloadRequest(
                 "id",
-                DownloadRequest.TYPE_DASH,
                 Uri.parse("https://www.test.com/download"),
+                MimeTypes.APPLICATION_MPD,
                 Collections.singletonList(new StreamKey(/* groupIndex= */ 0, /* trackIndex= */ 0)),
+                /* keySetId= */ null,
                 /* customCacheKey= */ null,
                 /* data= */ null));
     assertThat(downloader).isInstanceOf(DashDownloader.class);

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadManagerDashTest.java
Patch:
@@ -42,6 +42,7 @@
 import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
 import com.google.android.exoplayer2.upstream.cache.NoOpCacheEvictor;
 import com.google.android.exoplayer2.upstream.cache.SimpleCache;
+import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
 import java.io.File;
 import java.util.ArrayList;
@@ -224,9 +225,10 @@ private DownloadRequest getDownloadRequest(StreamKey... keys) {
     Collections.addAll(keysList, keys);
     return new DownloadRequest(
         TEST_ID,
-        DownloadRequest.TYPE_DASH,
         TEST_MPD_URI,
+        MimeTypes.APPLICATION_MPD,
         keysList,
+        /* keySetId= */ null,
         /* customCacheKey= */ null,
         null);
   }

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadServiceDashTest.java
Patch:
@@ -45,6 +45,7 @@
 import com.google.android.exoplayer2.upstream.cache.NoOpCacheEvictor;
 import com.google.android.exoplayer2.upstream.cache.SimpleCache;
 import com.google.android.exoplayer2.util.ConditionVariable;
+import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
 import java.io.File;
 import java.io.IOException;
@@ -209,9 +210,10 @@ private void downloadKeys(StreamKey... keys) {
     DownloadRequest action =
         new DownloadRequest(
             TEST_ID,
-            DownloadRequest.TYPE_DASH,
             TEST_MPD_URI,
+            MimeTypes.APPLICATION_MPD,
             keysList,
+            /* keySetId= */ null,
             /* customCacheKey= */ null,
             null);
     testThread.runOnMainThread(

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloaderTest.java
Patch:
@@ -53,6 +53,7 @@
 import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
 import com.google.android.exoplayer2.upstream.cache.NoOpCacheEvictor;
 import com.google.android.exoplayer2.upstream.cache.SimpleCache;
+import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
 import java.io.File;
 import java.util.ArrayList;
@@ -111,9 +112,10 @@ public void createWithDefaultDownloaderFactory() {
         factory.createDownloader(
             new DownloadRequest(
                 "id",
-                DownloadRequest.TYPE_HLS,
                 Uri.parse("https://www.test.com/download"),
+                MimeTypes.APPLICATION_M3U8,
                 Collections.singletonList(new StreamKey(/* groupIndex= */ 0, /* trackIndex= */ 0)),
+                /* keySetId= */ null,
                 /* customCacheKey= */ null,
                 /* data= */ null));
     assertThat(downloader).isInstanceOf(HlsDownloader.class);

File: library/smoothstreaming/src/test/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloaderTest.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.android.exoplayer2.upstream.DummyDataSource;
 import com.google.android.exoplayer2.upstream.cache.Cache;
 import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
+import com.google.android.exoplayer2.util.MimeTypes;
 import java.util.Collections;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -49,9 +50,10 @@ public void createWithDefaultDownloaderFactory() throws Exception {
         factory.createDownloader(
             new DownloadRequest(
                 "id",
-                DownloadRequest.TYPE_SS,
                 Uri.parse("https://www.test.com/download"),
+                MimeTypes.APPLICATION_SS,
                 Collections.singletonList(new StreamKey(/* groupIndex= */ 0, /* trackIndex= */ 0)),
+                /* keySetId= */ null,
                 /* customCacheKey= */ null,
                 /* data= */ null));
     assertThat(downloader).isInstanceOf(SsDownloader.class);

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -1736,7 +1736,7 @@ public static int inferContentTypeWithMimeType(Uri uri, @Nullable String mimeTyp
       case MimeTypes.APPLICATION_SS:
         return C.TYPE_SS;
       default:
-        return Util.inferContentType(uri);
+        return C.TYPE_OTHER;
     }
   }
 

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaPeriod.java
Patch:
@@ -895,7 +895,7 @@ private static Format[] parseClosedCaptionDescriptor(
   }
 
   // We won't assign the array to a variable that erases the generic type, and then write into it.
-  @SuppressWarnings({"unchecked"})
+  @SuppressWarnings({"unchecked", "rawtypes"})
   private static ChunkSampleStream<DashChunkSource>[] newSampleStreamArray(int length) {
     return new ChunkSampleStream[length];
   }

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/SsMediaPeriod.java
Patch:
@@ -283,7 +283,7 @@ private static TrackGroupArray buildTrackGroups(
   }
 
   // We won't assign the array to a variable that erases the generic type, and then write into it.
-  @SuppressWarnings({"unchecked"})
+  @SuppressWarnings({"unchecked", "rawtypes"})
   private static ChunkSampleStream<SsChunkSource>[] newSampleStreamArray(int length) {
     return new ChunkSampleStream[length];
   }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeAdaptiveMediaPeriod.java
Patch:
@@ -184,7 +184,7 @@ public void onContinueLoadingRequested(ChunkSampleStream<FakeChunkSource> source
   }
 
   // We won't assign the array to a variable that erases the generic type, and then write into it.
-  @SuppressWarnings({"unchecked"})
+  @SuppressWarnings({"unchecked", "rawtypes"})
   private static ChunkSampleStream<FakeChunkSource>[] newSampleStreamArray(int length) {
     return new ChunkSampleStream[length];
   }

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -579,7 +579,9 @@ private C() {}
   public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING =
       MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING;
   /** @deprecated Use {@code Renderer.VIDEO_SCALING_MODE_DEFAULT}. */
-  @Deprecated public static final int VIDEO_SCALING_MODE_DEFAULT = VIDEO_SCALING_MODE_SCALE_TO_FIT;
+  @SuppressWarnings("deprecation")
+  @Deprecated
+  public static final int VIDEO_SCALING_MODE_DEFAULT = VIDEO_SCALING_MODE_SCALE_TO_FIT;
 
   /**
    * Track selection flags. Possible flag values are {@link #SELECTION_FLAG_DEFAULT}, {@link

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -35,7 +35,6 @@
 import android.net.Uri;
 import android.os.Looper;
 import android.view.Surface;
-import android.view.View;
 import android.view.ViewGroup;
 import androidx.annotation.Nullable;
 import androidx.test.core.app.ApplicationProvider;
@@ -8326,8 +8325,8 @@ public ViewGroup getAdViewGroup() {
     }
 
     @Override
-    public View[] getAdOverlayViews() {
-      return new View[0];
+    public ImmutableList<AdsLoader.OverlayInfo> getAdOverlayInfos() {
+      return ImmutableList.of();
     }
   }
 }

File: playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashTestRunner.java
Patch:
@@ -19,13 +19,13 @@
 
 import android.media.MediaDrm;
 import android.media.UnsupportedSchemeException;
-import android.net.Uri;
 import android.view.Surface;
 import android.widget.FrameLayout;
 import androidx.annotation.RequiresApi;
 import androidx.test.core.app.ApplicationProvider;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
+import com.google.android.exoplayer2.MediaItem;
 import com.google.android.exoplayer2.RendererCapabilities;
 import com.google.android.exoplayer2.SimpleExoPlayer;
 import com.google.android.exoplayer2.decoder.DecoderCounters;
@@ -308,11 +308,10 @@ protected MediaSource buildSource(
           this.dataSourceFactory != null
               ? this.dataSourceFactory
               : new DefaultDataSourceFactory(host, userAgent);
-      Uri manifestUri = Uri.parse(manifestUrl);
       return new DashMediaSource.Factory(dataSourceFactory)
           .setDrmSessionManager(drmSessionManager)
           .setLoadErrorHandlingPolicy(new DefaultLoadErrorHandlingPolicy(MIN_LOADABLE_RETRY_COUNT))
-          .createMediaSource(manifestUri);
+          .createMediaSource(MediaItem.fromUri(manifestUrl));
     }
 
     @Override

File: library/core/src/main/java/com/google/android/exoplayer2/Player.java
Patch:
@@ -795,9 +795,9 @@ public void onTimelineChanged(Timeline timeline, @Nullable Object manifest) {
   /** Playback skipped to a new media item (for example after failure). */
   int MEDIA_ITEM_TRANSITION_REASON_SKIP = 3;
   /**
-   * The current media item has changed because of a modification of the timeline. This can either
-   * be if the period previously being played has been removed, or when the timeline becomes
-   * non-empty after being empty.
+   * The current media item has changed because of a change in the playlist. This can either be if
+   * the media item previously being played has been removed, or when the playlist becomes non-empty
+   * after being empty.
    */
   int MEDIA_ITEM_TRANSITION_REASON_PLAYLIST_CHANGED = 4;
 

File: library/core/src/test/java/com/google/android/exoplayer2/text/ttml/TtmlDecoderTest.java
Patch:
@@ -304,16 +304,16 @@ public void multipleRegions() throws IOException, SubtitleDecoderException {
     // assertEquals(1f, cue.size);
 
     cue = getOnlyCueAtTimeUs(subtitle, 21_000_000);
-    assertThat(cue.text.toString()).isEqualTo("She first said this");
+    assertThat(cue.text.toString()).isEqualTo("They first said this");
     assertThat(cue.position).isEqualTo(45f / 100f);
     assertThat(cue.line).isEqualTo(45f / 100f);
     assertThat(cue.size).isEqualTo(35f / 100f);
 
     cue = getOnlyCueAtTimeUs(subtitle, 25_000_000);
-    assertThat(cue.text.toString()).isEqualTo("She first said this\nThen this");
+    assertThat(cue.text.toString()).isEqualTo("They first said this\nThen this");
 
     cue = getOnlyCueAtTimeUs(subtitle, 29_000_000);
-    assertThat(cue.text.toString()).isEqualTo("She first said this\nThen this\nFinally this");
+    assertThat(cue.text.toString()).isEqualTo("They first said this\nThen this\nFinally this");
     assertThat(cue.position).isEqualTo(45f / 100f);
     assertThat(cue.line).isEqualTo(45f / 100f);
   }

File: library/core/src/main/java/com/google/android/exoplayer2/MediaPeriodQueue.java
Patch:
@@ -575,6 +575,7 @@ private boolean updateForPlaybackModeChange(Timeline timeline) {
   /**
    * Returns the first {@link MediaPeriodInfo} to play, based on the specified playback position.
    */
+  @Nullable
   private MediaPeriodInfo getFirstMediaPeriodInfo(PlaybackInfo playbackInfo) {
     return getMediaPeriodInfo(
         playbackInfo.timeline,
@@ -729,6 +730,7 @@ private MediaPeriodInfo getFollowingMediaPeriodInfo(
     }
   }
 
+  @Nullable
   private MediaPeriodInfo getMediaPeriodInfo(
       Timeline timeline, MediaPeriodId id, long requestedContentPositionUs, long startPositionUs) {
     timeline.getPeriodByUid(id.periodUid, period);

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
Patch:
@@ -326,6 +326,7 @@ public DefaultDrmSessionManager(
    *     Default is false.
    * @deprecated Use {@link Builder} instead.
    */
+  @SuppressWarnings("deprecation")
   @Deprecated
   public DefaultDrmSessionManager(
       UUID uuid,

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DefaultDownloaderFactory.java
Patch:
@@ -84,7 +84,7 @@ public class DefaultDownloaderFactory implements DownloaderFactory {
    */
   @Deprecated
   public DefaultDownloaderFactory(CacheDataSource.Factory cacheDataSourceFactory) {
-    this(cacheDataSourceFactory, Runnable::run);
+    this(cacheDataSourceFactory, /* executor= */ Runnable::run);
   }
 
   /**

File: library/core/src/test/java/com/google/android/exoplayer2/offline/DefaultDownloaderFactoryTest.java
Patch:
@@ -37,7 +37,8 @@ public void createProgressiveDownloader() throws Exception {
         new CacheDataSource.Factory()
             .setCache(Mockito.mock(Cache.class))
             .setUpstreamDataSourceFactory(DummyDataSource.FACTORY);
-    DownloaderFactory factory = new DefaultDownloaderFactory(cacheDataSourceFactory);
+    DownloaderFactory factory =
+        new DefaultDownloaderFactory(cacheDataSourceFactory, /* executor= */ Runnable::run);
 
     Downloader downloader =
         factory.createDownloader(

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DashDownloaderTest.java
Patch:
@@ -85,7 +85,8 @@ public void createWithDefaultDownloaderFactory() {
         new CacheDataSource.Factory()
             .setCache(Mockito.mock(Cache.class))
             .setUpstreamDataSourceFactory(DummyDataSource.FACTORY);
-    DownloaderFactory factory = new DefaultDownloaderFactory(cacheDataSourceFactory);
+    DownloaderFactory factory =
+        new DefaultDownloaderFactory(cacheDataSourceFactory, /* executor= */ Runnable::run);
 
     Downloader downloader =
         factory.createDownloader(

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadManagerDashTest.java
Patch:
@@ -241,7 +241,8 @@ private void createDownloadManager() {
               new DefaultDownloaderFactory(
                   new CacheDataSource.Factory()
                       .setCache(cache)
-                      .setUpstreamDataSourceFactory(fakeDataSourceFactory));
+                      .setUpstreamDataSourceFactory(fakeDataSourceFactory),
+                  /* executor= */ Runnable::run);
           downloadManager =
               new DownloadManager(
                   ApplicationProvider.getApplicationContext(), downloadIndex, downloaderFactory);

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadServiceDashTest.java
Patch:
@@ -117,7 +117,8 @@ public void setUp() throws IOException {
               new DefaultDownloaderFactory(
                   new CacheDataSource.Factory()
                       .setCache(cache)
-                      .setUpstreamDataSourceFactory(fakeDataSourceFactory));
+                      .setUpstreamDataSourceFactory(fakeDataSourceFactory),
+                  /* executor= */ Runnable::run);
           final DownloadManager dashDownloadManager =
               new DownloadManager(
                   ApplicationProvider.getApplicationContext(), downloadIndex, downloaderFactory);

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloaderTest.java
Patch:
@@ -102,7 +102,8 @@ public void createWithDefaultDownloaderFactory() {
         new CacheDataSource.Factory()
             .setCache(Mockito.mock(Cache.class))
             .setUpstreamDataSourceFactory(DummyDataSource.FACTORY);
-    DownloaderFactory factory = new DefaultDownloaderFactory(cacheDataSourceFactory);
+    DownloaderFactory factory =
+        new DefaultDownloaderFactory(cacheDataSourceFactory, /* executor= */ Runnable::run);
 
     Downloader downloader =
         factory.createDownloader(

File: library/smoothstreaming/src/test/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloaderTest.java
Patch:
@@ -42,7 +42,8 @@ public void createWithDefaultDownloaderFactory() throws Exception {
         new CacheDataSource.Factory()
             .setCache(Mockito.mock(Cache.class))
             .setUpstreamDataSourceFactory(DummyDataSource.FACTORY);
-    DownloaderFactory factory = new DefaultDownloaderFactory(cacheDataSourceFactory);
+    DownloaderFactory factory =
+        new DefaultDownloaderFactory(cacheDataSourceFactory, /* executor= */ Runnable::run);
 
     Downloader downloader =
         factory.createDownloader(

File: library/common/src/test/java/com/google/android/exoplayer2/util/UtilTest.java
Patch:
@@ -940,7 +940,7 @@ public void normalizeLanguageCode_iso6392BibliographicalAndTextualCodes_areNorma
     assertThat(Util.normalizeLanguageCode("ji")).isEqualTo(Util.normalizeLanguageCode("yi"));
     assertThat(Util.normalizeLanguageCode("ji")).isEqualTo(Util.normalizeLanguageCode("yid"));
 
-    // Grandfathered tags
+    // Legacy tags
     assertThat(Util.normalizeLanguageCode("i-lux")).isEqualTo(Util.normalizeLanguageCode("lb"));
     assertThat(Util.normalizeLanguageCode("i-lux")).isEqualTo(Util.normalizeLanguageCode("ltz"));
     assertThat(Util.normalizeLanguageCode("i-hak")).isEqualTo(Util.normalizeLanguageCode("hak"));

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -306,8 +306,8 @@ public class MatroskaExtractor implements Extractor {
    */
   private static final byte[] SSA_PREFIX =
       new byte[] {
-          68, 105, 97, 108, 111, 103, 117, 101, 58, 32, 48, 58, 48, 48, 58, 48, 48, 58, 48, 48, 44,
-          48, 58, 48, 48, 58, 48, 48, 58, 48, 48, 44
+        68, 105, 97, 108, 111, 103, 117, 101, 58, 32, 48, 58, 48, 48, 58, 48, 48, 58, 48, 48, 44,
+        48, 58, 48, 48, 58, 48, 48, 58, 48, 48, 44
       };
   /**
    * The byte offset of the end timecode in {@link #SSA_PREFIX}.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -271,8 +271,8 @@ public class MatroskaExtractor implements Extractor {
    */
   private static final byte[] SUBRIP_PREFIX =
       new byte[] {
-          49, 10, 48, 48, 58, 48, 48, 58, 48, 48, 44, 48, 48, 48, 32, 45, 45, 62, 32, 48, 48, 58, 48,
-          48, 58, 48, 48, 44, 48, 48, 48, 10
+        49, 10, 48, 48, 58, 48, 48, 58, 48, 48, 44, 48, 48, 48, 32, 45, 45, 62, 32, 48, 48, 58, 48,
+        48, 58, 48, 48, 44, 48, 48, 48, 10
       };
   /**
    * The byte offset of the end timecode in {@link #SUBRIP_PREFIX}.

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -690,7 +690,7 @@ private C() {}
   public static final int TRACK_TYPE_METADATA = 4;
   /** A type constant for camera motion tracks. */
   public static final int TRACK_TYPE_CAMERA_MOTION = 5;
-  /** A type constant for a dummy or empty track. */
+  /** A type constant for a fake or empty track. */
   public static final int TRACK_TYPE_NONE = 6;
   /**
    * Applications or extensions may define custom {@code TRACK_TYPE_*} constants greater than or

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/DummyExtractorOutput.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.google.android.exoplayer2.extractor;
 
-/** A dummy {@link ExtractorOutput} implementation. */
+/** A fake {@link ExtractorOutput} implementation. */
 public final class DummyExtractorOutput implements ExtractorOutput {
 
   @Override

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/DummyTrackOutput.java
Patch:
@@ -23,9 +23,7 @@
 import java.io.EOFException;
 import java.io.IOException;
 
-/**
- * A dummy {@link TrackOutput} implementation.
- */
+/** A fake {@link TrackOutput} implementation. */
 public final class DummyTrackOutput implements TrackOutput {
 
   // Even though read data is discarded, data source implementations could be making use of the

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
Patch:
@@ -576,8 +576,8 @@ public void consume(ParsableByteArray sectionData) {
       if (mode == MODE_HLS && id3Reader == null) {
         // Setup an ID3 track regardless of whether there's a corresponding entry, in case one
         // appears intermittently during playback. See [Internal: b/20261500].
-        EsInfo dummyEsInfo = new EsInfo(TS_STREAM_TYPE_ID3, null, null, Util.EMPTY_BYTE_ARRAY);
-        id3Reader = payloadReaderFactory.createPayloadReader(TS_STREAM_TYPE_ID3, dummyEsInfo);
+        EsInfo id3EsInfo = new EsInfo(TS_STREAM_TYPE_ID3, null, null, Util.EMPTY_BYTE_ARRAY);
+        id3Reader = payloadReaderFactory.createPayloadReader(TS_STREAM_TYPE_ID3, id3EsInfo);
         id3Reader.init(timestampAdjuster, output,
             new TrackIdGenerator(programNumber, TS_STREAM_TYPE_ID3, MAX_PID_PLUS_ONE));
       }

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/BundledHlsMediaChunkExtractor.java
Patch:
@@ -37,7 +37,7 @@
  */
 public final class BundledHlsMediaChunkExtractor implements HlsMediaChunkExtractor {
 
-  private static final PositionHolder DUMMY_POSITION_HOLDER = new PositionHolder();
+  private static final PositionHolder POSITION_HOLDER = new PositionHolder();
 
   @VisibleForTesting /* package */ final Extractor extractor;
   private final Format masterPlaylistFormat;
@@ -64,7 +64,7 @@ public void init(ExtractorOutput extractorOutput) {
 
   @Override
   public boolean read(ExtractorInput extractorInput) throws IOException {
-    return extractor.read(extractorInput, DUMMY_POSITION_HOLDER) == Extractor.RESULT_CONTINUE;
+    return extractor.read(extractorInput, POSITION_HOLDER) == Extractor.RESULT_CONTINUE;
   }
 
   @Override

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
Patch:
@@ -941,7 +941,7 @@ public TrackOutput track(int id, int type) {
 
     if (trackOutput == null) {
       if (tracksEnded) {
-        return createDummyTrackOutput(id, type);
+        return createFakeTrackOutput(id, type);
       } else {
         // The relevant SampleQueue hasn't been constructed yet - so construct it.
         trackOutput = createSampleQueue(id, type);
@@ -985,7 +985,7 @@ private TrackOutput getMappedTrackOutput(int id, int type) {
     }
     return sampleQueueTrackIds[sampleQueueIndex] == id
         ? sampleQueues[sampleQueueIndex]
-        : createDummyTrackOutput(id, type);
+        : createFakeTrackOutput(id, type);
   }
 
   private SampleQueue createSampleQueue(int id, int type) {
@@ -1459,7 +1459,7 @@ private static boolean formatsMatch(Format manifestFormat, Format sampleFormat)
     return true;
   }
 
-  private static DummyTrackOutput createDummyTrackOutput(int id, int type) {
+  private static DummyTrackOutput createFakeTrackOutput(int id, int type) {
     Log.w(TAG, "Unmapped track with id " + id + " of type " + type);
     return new DummyTrackOutput();
   }

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylistParserTest.java
Patch:
@@ -321,7 +321,7 @@ public void gapTag() throws IOException {
             + "#EXT-X-KEY:METHOD=NONE\n"
             + "#EXTINF:5.005,\n"
             + "#EXT-X-GAP \n"
-            + "../dummy.ts\n"
+            + "../test.ts\n"
             + "#EXT-X-KEY:METHOD=AES-128,URI=\"https://key-service.bamgrid.com/1.0/key?"
             + "hex-value=9FB8989D15EEAAF8B21B860D7ED3072A\",IV=0x410C8AC18AA42EFA18B5155484F5FC34\n"
             + "#EXTINF:5.005,\n"

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTimeline.java
Patch:
@@ -52,8 +52,7 @@ public static final class TimelineWindowDefinition {
     public final AdPlaybackState adPlaybackState;
 
     /**
-     * Creates a window definition that corresponds to a dummy placeholder timeline using the given
-     * tag.
+     * Creates a window definition that corresponds to a placeholder timeline using the given tag.
      *
      * @param tag The tag to use in the timeline.
      */

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/MediaPeriodAsserts.java
Patch:
@@ -199,9 +199,9 @@ private static boolean containsFormats(TrackGroup trackGroup, Format[] formats)
 
   private static TrackGroupArray prepareAndGetTrackGroups(MediaPeriod mediaPeriod) {
     AtomicReference<TrackGroupArray> trackGroupArray = new AtomicReference<>();
-    DummyMainThread dummyMainThread = new DummyMainThread();
+    DummyMainThread testThread = new DummyMainThread();
     ConditionVariable preparedCondition = new ConditionVariable();
-    dummyMainThread.runOnMainThread(
+    testThread.runOnMainThread(
         () ->
             mediaPeriod.prepare(
                 new Callback() {
@@ -222,7 +222,7 @@ public void onContinueLoadingRequested(MediaPeriod source) {
     } catch (InterruptedException e) {
       // Ignore.
     }
-    dummyMainThread.release();
+    testThread.release();
     return trackGroupArray.get();
   }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/TestUtil.java
Patch:
@@ -198,17 +198,17 @@ public static ImmutableList<Byte> createByteList(int... bytes) {
     return ImmutableList.copyOf(Bytes.asList(createByteArray(bytes)));
   }
 
-  /** Writes one byte long dummy test data to the file and returns it. */
+  /** Writes one byte long test data to the file and returns it. */
   public static File createTestFile(File directory, String name) throws IOException {
     return createTestFile(directory, name, /* length= */ 1);
   }
 
-  /** Writes dummy test data with the specified length to the file and returns it. */
+  /** Writes test data with the specified length to the file and returns it. */
   public static File createTestFile(File directory, String name, long length) throws IOException {
     return createTestFile(new File(directory, name), length);
   }
 
-  /** Writes dummy test data with the specified length to the file and returns it. */
+  /** Writes test data with the specified length to the file and returns it. */
   public static File createTestFile(File file, long length) throws IOException {
     FileOutputStream output = new FileOutputStream(file);
     for (long i = 0; i < length; i++) {

File: testutils/src/test/java/com/google/android/exoplayer2/testutil/FakeDataSourceTest.java
Patch:
@@ -97,7 +97,7 @@ public void testReadPartialBounded() throws IOException {
   }
 
   @Test
-  public void testDummyData() throws IOException {
+  public void testFakeData() throws IOException {
     FakeDataSource dataSource =
         new FakeDataSource(
             new FakeDataSet()

File: demos/cast/src/main/java/com/google/android/exoplayer2/castdemo/PlayerManager.java
Patch:
@@ -29,7 +29,6 @@
 import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.ext.cast.CastPlayer;
 import com.google.android.exoplayer2.ext.cast.SessionAvailabilityListener;
-import com.google.android.exoplayer2.source.DefaultMediaSourceFactory;
 import com.google.android.exoplayer2.source.TrackGroupArray;
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
 import com.google.android.exoplayer2.trackselection.MappingTrackSelector;
@@ -61,7 +60,6 @@ interface Listener {
   private static final DefaultHttpDataSourceFactory DATA_SOURCE_FACTORY =
       new DefaultHttpDataSourceFactory(USER_AGENT);
 
-  private final DefaultMediaSourceFactory defaultMediaSourceFactory;
   private final PlayerView localPlayerView;
   private final PlayerControlView castControlView;
   private final DefaultTrackSelector trackSelector;
@@ -97,7 +95,6 @@ public PlayerManager(
 
     trackSelector = new DefaultTrackSelector(context);
     exoPlayer = new SimpleExoPlayer.Builder(context).setTrackSelector(trackSelector).build();
-    defaultMediaSourceFactory = DefaultMediaSourceFactory.newInstance(context, DATA_SOURCE_FACTORY);
     exoPlayer.addListener(this);
     localPlayerView.setPlayer(exoPlayer);
 

File: extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/LibvpxVideoRenderer.java
Patch:
@@ -102,7 +102,6 @@ public LibvpxVideoRenderer(
    * @param numInputBuffers Number of input buffers.
    * @param numOutputBuffers Number of output buffers.
    */
-  @SuppressWarnings("deprecation")
   public LibvpxVideoRenderer(
       long allowedJoiningTimeMs,
       @Nullable Handler eventHandler,

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -919,6 +919,7 @@ private static String getDownloadType(MediaItem.PlaybackProperties playbackPrope
         return DownloadRequest.TYPE_HLS;
       case C.TYPE_SS:
         return DownloadRequest.TYPE_SS;
+      case C.TYPE_OTHER:
       default:
         return DownloadRequest.TYPE_PROGRESSIVE;
     }

File: library/core/src/main/java/com/google/android/exoplayer2/source/SinglePeriodTimeline.java
Patch:
@@ -266,7 +266,6 @@ public int getWindowCount() {
   }
 
   // Provide backwards compatibility.
-  @SuppressWarnings("deprecation")
   @Override
   public Window getWindow(int windowIndex, Window window, long defaultPositionProjectionUs) {
     Assertions.checkIndex(windowIndex, 0, 1);

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSourceFactory.java
Patch:
@@ -45,7 +45,6 @@ public CacheDataSourceFactory(Cache cache, DataSource.Factory upstreamFactory) {
   }
 
   /** @see CacheDataSource#CacheDataSource(Cache, DataSource, int) */
-  @SuppressWarnings("deprecation")
   public CacheDataSourceFactory(
       Cache cache, DataSource.Factory upstreamFactory, @CacheDataSource.Flags int flags) {
     this(

File: library/core/src/main/java/com/google/android/exoplayer2/util/IntArrayQueue.java
Patch:
@@ -26,7 +26,7 @@
 public final class IntArrayQueue {
 
   /** Default capacity needs to be a power of 2. */
-  private static int DEFAULT_INITIAL_CAPACITY = 16;
+  private static final int DEFAULT_INITIAL_CAPACITY = 16;
 
   private int headIndex;
   private int tailIndex;

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/AnalyticsCollectorTest.java
Patch:
@@ -1631,7 +1631,6 @@ public void onSeekProcessed(EventTime eventTime) {
       reportedEvents.add(new ReportedEvent(EVENT_SEEK_PROCESSED, eventTime));
     }
 
-    @SuppressWarnings("deprecation")
     @Override
     public void onPlaybackSpeedChanged(EventTime eventTime, float playbackSpeed) {
       reportedEvents.add(new ReportedEvent(EVENT_PLAYBACK_SPEED_CHANGED, eventTime));

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaPeriod.java
Patch:
@@ -895,7 +895,7 @@ private static Format[] parseClosedCaptionDescriptor(
   }
 
   // We won't assign the array to a variable that erases the generic type, and then write into it.
-  @SuppressWarnings({"unchecked", "rawtypes"})
+  @SuppressWarnings({"unchecked"})
   private static ChunkSampleStream<DashChunkSource>[] newSampleStreamArray(int length) {
     return new ChunkSampleStream[length];
   }

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/SsMediaPeriod.java
Patch:
@@ -283,7 +283,7 @@ private static TrackGroupArray buildTrackGroups(
   }
 
   // We won't assign the array to a variable that erases the generic type, and then write into it.
-  @SuppressWarnings({"unchecked", "rawtypes"})
+  @SuppressWarnings({"unchecked"})
   private static ChunkSampleStream<SsChunkSource>[] newSampleStreamArray(int length) {
     return new ChunkSampleStream[length];
   }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeAdaptiveMediaPeriod.java
Patch:
@@ -184,7 +184,7 @@ public void onContinueLoadingRequested(ChunkSampleStream<FakeChunkSource> source
   }
 
   // We won't assign the array to a variable that erases the generic type, and then write into it.
-  @SuppressWarnings({"unchecked", "rawtypes"})
+  @SuppressWarnings({"unchecked"})
   private static ChunkSampleStream<FakeChunkSource>[] newSampleStreamArray(int length) {
     return new ChunkSampleStream[length];
   }

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlView.java
Patch:
@@ -1475,7 +1475,7 @@ private void updateSettingsWindowSize() {
     settingsWindow.setHeight(height);
   }
 
-  private void displaySettingsWindow(RecyclerView.Adapter adapter) {
+  private void displaySettingsWindow(RecyclerView.Adapter<?> adapter) {
     settingsView.setAdapter(adapter);
 
     updateSettingsWindowSize();

File: extensions/ima/src/test/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoaderTest.java
Patch:
@@ -54,7 +54,7 @@
 import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.Timeline.Period;
 import com.google.android.exoplayer2.ext.ima.ImaAdsLoader.ImaFactory;
-import com.google.android.exoplayer2.source.MaskingMediaSource.DummyTimeline;
+import com.google.android.exoplayer2.source.MaskingMediaSource.PlaceholderTimeline;
 import com.google.android.exoplayer2.source.ads.AdPlaybackState;
 import com.google.android.exoplayer2.source.ads.AdsLoader;
 import com.google.android.exoplayer2.source.ads.AdsMediaSource.AdLoadException;
@@ -170,7 +170,7 @@ public void start_setsAdUiViewGroup() {
 
   @Test
   public void start_withPlaceholderContent_initializedAdsLoader() {
-    Timeline placeholderTimeline = new DummyTimeline(MediaItem.fromUri(Uri.EMPTY));
+    Timeline placeholderTimeline = new PlaceholderTimeline(MediaItem.fromUri(Uri.EMPTY));
     setupPlayback(placeholderTimeline, PREROLL_CUE_POINTS_SECONDS);
     imaAdsLoader.start(adsLoaderListener, adViewProvider);
 

File: library/core/src/main/java/com/google/android/exoplayer2/MediaPeriodHolder.java
Patch:
@@ -380,7 +380,7 @@ private void disableTrackSelectionsInResult() {
   }
 
   /**
-   * For each renderer of type {@link C#TRACK_TYPE_NONE}, we will remove the dummy {@link
+   * For each renderer of type {@link C#TRACK_TYPE_NONE}, we will remove the {@link
    * EmptySampleStream} that was associated with it.
    */
   private void disassociateNoSampleRenderersWithEmptySampleStream(
@@ -394,7 +394,7 @@ private void disassociateNoSampleRenderersWithEmptySampleStream(
 
   /**
    * For each renderer of type {@link C#TRACK_TYPE_NONE} that was enabled, we will associate it with
-   * a dummy {@link EmptySampleStream}.
+   * an {@link EmptySampleStream}.
    */
   private void associateNoSampleRenderersWithEmptySampleStream(
       @NullableType SampleStream[] sampleStreams) {

File: library/core/src/main/java/com/google/android/exoplayer2/Timeline.java
Patch:
@@ -124,7 +124,7 @@ public static final class Window {
      */
     public static final Object SINGLE_WINDOW_UID = new Object();
 
-    private static final MediaItem DUMMY_MEDIA_ITEM =
+    private static final MediaItem EMPTY_MEDIA_ITEM =
         new MediaItem.Builder()
             .setMediaId("com.google.android.exoplayer2.Timeline")
             .setUri(Uri.EMPTY)
@@ -222,7 +222,7 @@ public static final class Window {
     /** Creates window. */
     public Window() {
       uid = SINGLE_WINDOW_UID;
-      mediaItem = DUMMY_MEDIA_ITEM;
+      mediaItem = EMPTY_MEDIA_ITEM;
     }
 
     /** Sets the data held by this window. */
@@ -243,7 +243,7 @@ public Window set(
         int lastPeriodIndex,
         long positionInFirstPeriodUs) {
       this.uid = uid;
-      this.mediaItem = mediaItem != null ? mediaItem : DUMMY_MEDIA_ITEM;
+      this.mediaItem = mediaItem != null ? mediaItem : EMPTY_MEDIA_ITEM;
       this.tag =
           mediaItem != null && mediaItem.playbackProperties != null
               ? mediaItem.playbackProperties.tag

File: library/core/src/main/java/com/google/android/exoplayer2/analytics/PlaybackStatsListener.java
Patch:
@@ -150,7 +150,7 @@ public void finishAllSessions() {
     // TODO: Add AnalyticsListener.onAttachedToPlayer and onDetachedFromPlayer to auto-release with
     // an actual EventTime. Should also simplify other cases where the listener needs to be released
     // separately from the player.
-    EventTime dummyEventTime =
+    sessionManager.finishAllSessions(
         new EventTime(
             SystemClock.elapsedRealtime(),
             Timeline.EMPTY,
@@ -161,8 +161,7 @@ public void finishAllSessions() {
             /* currentWindowIndex= */ 0,
             /* currentMediaPeriodId= */ null,
             /* currentPlaybackPositionMs= */ 0,
-            /* totalBufferedDurationMs= */ 0);
-    sessionManager.finishAllSessions(dummyEventTime);
+            /* totalBufferedDurationMs= */ 0));
   }
 
   // PlaybackSessionManager.Listener implementation.

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -500,7 +500,7 @@ public DownloadHelper(
         new DefaultTrackSelector(trackSelectorParameters, new DownloadTrackSelection.Factory());
     this.rendererCapabilities = rendererCapabilities;
     this.scratchSet = new SparseIntArray();
-    trackSelector.init(/* listener= */ () -> {}, new DummyBandwidthMeter());
+    trackSelector.init(/* listener= */ () -> {}, new FakeBandwidthMeter());
     callbackHandler = Util.createHandlerForCurrentOrMainLooper();
     window = new Timeline.Window();
   }
@@ -1152,7 +1152,7 @@ public void updateSelectedTrack(
     }
   }
 
-  private static final class DummyBandwidthMeter implements BandwidthMeter {
+  private static final class FakeBandwidthMeter implements BandwidthMeter {
 
     @Override
     public long getBitrateEstimate() {

File: library/core/src/main/java/com/google/android/exoplayer2/source/MergingMediaSource.java
Patch:
@@ -66,7 +66,7 @@ public IllegalMergeException(@Reason int reason) {
   }
 
   private static final int PERIOD_COUNT_UNSET = -1;
-  private static final MediaItem DUMMY_MEDIA_ITEM =
+  private static final MediaItem EMPTY_MEDIA_ITEM =
       new MediaItem.Builder().setMediaId("MergingMediaSource").build();
 
   private final boolean adjustPeriodTimeOffsets;
@@ -137,7 +137,7 @@ public Object getTag() {
 
   @Override
   public MediaItem getMediaItem() {
-    return mediaSources.length > 0 ? mediaSources[0].getMediaItem() : DUMMY_MEDIA_ITEM;
+    return mediaSources.length > 0 ? mediaSources[0].getMediaItem() : EMPTY_MEDIA_ITEM;
   }
 
   @Override

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/AnalyticsCollectorTest.java
Patch:
@@ -786,7 +786,7 @@ public void dynamicTimelineChange() throws Exception {
     assertThat(listener.getEvents(EVENT_TIMELINE_CHANGED))
         .containsExactly(
             WINDOW_0 /* PLAYLIST_CHANGED */,
-            window0Period1Seq0 /* SOURCE_UPDATE (concatenated timeline replaces dummy) */,
+            window0Period1Seq0 /* SOURCE_UPDATE (concatenated timeline replaces placeholder) */,
             period1Seq0 /* SOURCE_UPDATE (child sources in concatenating source moved) */)
         .inOrder();
     assertThat(listener.getEvents(EVENT_LOADING_CHANGED))

File: library/core/src/test/java/com/google/android/exoplayer2/database/VersionTableTest.java
Patch:
@@ -94,7 +94,7 @@ public void doesTableExist_nonExistingTable_returnsFalse() {
   @Test
   public void doesTableExist_existingTable_returnsTrue() {
     String table = "TestTable";
-    databaseProvider.getWritableDatabase().execSQL("CREATE TABLE " + table + " (dummy INTEGER)");
+    databaseProvider.getWritableDatabase().execSQL("CREATE TABLE " + table + " (test INTEGER)");
     assertThat(VersionTable.tableExists(database, table)).isTrue();
   }
 }

File: library/core/src/test/java/com/google/android/exoplayer2/source/ClippingMediaSourceTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.google.android.exoplayer2.drm.DrmSessionEventListener;
 import com.google.android.exoplayer2.drm.DrmSessionManager;
 import com.google.android.exoplayer2.source.ClippingMediaSource.IllegalClippingException;
-import com.google.android.exoplayer2.source.MaskingMediaSource.DummyTimeline;
+import com.google.android.exoplayer2.source.MaskingMediaSource.PlaceholderTimeline;
 import com.google.android.exoplayer2.source.MediaSource.MediaPeriodId;
 import com.google.android.exoplayer2.testutil.FakeMediaPeriod;
 import com.google.android.exoplayer2.testutil.FakeMediaSource;
@@ -173,7 +173,7 @@ public void clippingStartAndEndInitial() throws IOException {
     // Timeline that's dynamic and not seekable. A child source might report such a timeline prior
     // to it having loaded sufficient data to establish its duration and seekability. Such timelines
     // should not result in clipping failure.
-    Timeline timeline = new DummyTimeline(MediaItem.fromUri(Uri.EMPTY));
+    Timeline timeline = new PlaceholderTimeline(MediaItem.fromUri(Uri.EMPTY));
 
     Timeline clippedTimeline =
         getClippedTimeline(

File: library/core/src/test/java/com/google/android/exoplayer2/source/SampleQueueTest.java
Patch:
@@ -123,7 +123,7 @@ public final class SampleQueueTest {
   private static final int[] ENCRYPTED_SAMPLE_OFFSETS = new int[] {7, 4, 3, 0};
   private static final byte[] ENCRYPTED_SAMPLE_DATA = new byte[] {1, 1, 1, 1, 1, 1, 1, 1};
 
-  private static final TrackOutput.CryptoData DUMMY_CRYPTO_DATA =
+  private static final TrackOutput.CryptoData CRYPTO_DATA =
       new TrackOutput.CryptoData(C.CRYPTO_MODE_AES_CTR, new byte[16], 0, 0);
 
   private Allocator allocator;
@@ -1205,7 +1205,7 @@ private void writeTestData(byte[] data, int[] sampleSizes, int[] sampleOffsets,
           sampleFlags[i],
           sampleSizes[i],
           sampleOffsets[i],
-          (sampleFlags[i] & C.BUFFER_FLAG_ENCRYPTED) != 0 ? DUMMY_CRYPTO_DATA : null);
+          (sampleFlags[i] & C.BUFFER_FLAG_ENCRYPTED) != 0 ? CRYPTO_DATA : null);
     }
   }
 
@@ -1222,7 +1222,7 @@ private void writeSample(byte[] data, long timestampUs, int sampleFlags) {
         sampleFlags,
         data.length,
         /* offset= */ 0,
-        (sampleFlags & C.BUFFER_FLAG_ENCRYPTED) != 0 ? DUMMY_CRYPTO_DATA : null);
+        (sampleFlags & C.BUFFER_FLAG_ENCRYPTED) != 0 ? CRYPTO_DATA : null);
   }
 
   /**

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeterTest.java
Patch:
@@ -569,7 +569,7 @@ private static long[] simulateTransfers(DefaultBandwidthMeter bandwidthMeter, Fa
     long[] bitrateEstimates = new long[SIMULATED_TRANSFER_COUNT];
     Random random = new Random(/* seed= */ 0);
     DataSource dataSource = new FakeDataSource();
-    DataSpec dataSpec = new DataSpec(Uri.parse("https://dummy.com"));
+    DataSpec dataSpec = new DataSpec(Uri.parse("https://test.com"));
     for (int i = 0; i < SIMULATED_TRANSFER_COUNT; i++) {
       bandwidthMeter.onTransferStart(dataSource, dataSpec, /* isNetwork= */ true);
       clock.advanceTime(random.nextInt(/* bound= */ 5000));

File: library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
Patch:
@@ -625,7 +625,7 @@ && getLargestQueuedPresentationTimeUs() != C.TIME_UNSET) {
     if (codecPassthroughFormat != null
         && (bufferFlags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {
       // Discard output buffers from the passthrough (raw) decoder containing codec specific data.
-      codec.releaseOutputBuffer(bufferIndex, false);
+      Assertions.checkNotNull(codec).releaseOutputBuffer(bufferIndex, false);
       return true;
     }
 
@@ -650,7 +650,7 @@ && getLargestQueuedPresentationTimeUs() != C.TIME_UNSET) {
       if (codec != null) {
         codec.releaseOutputBuffer(bufferIndex, false);
       }
-      decoderCounters.renderedOutputBufferCount++;
+      decoderCounters.renderedOutputBufferCount += sampleCount;
       return true;
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -429,7 +429,7 @@ mediaItem, castNonNull(dataSourceFactory), drmSessionManager),
   }
 
   /**
-   * Equivalent to {@link #createMediaSource(DownloadRequest, Factory, DrmSessionManager)
+   * Equivalent to {@link #createMediaSource(DownloadRequest, DataSource.Factory, DrmSessionManager)
    * createMediaSource(downloadRequest, dataSourceFactory, null)}.
    */
   public static MediaSource createMediaSource(

File: library/core/src/main/java/com/google/android/exoplayer2/offline/Downloader.java
Patch:
@@ -31,7 +31,7 @@ interface ProgressListener {
      *
      * <p>May be called directly from {@link #download}, or from any other thread used by the
      * downloader. In all cases, {@link #download} is guaranteed not to return until after the last
-     * call to {@link #onProgress} has finished executing.
+     * call to this method has finished executing.
      *
      * @param contentLength The length of the content in bytes, or {@link C#LENGTH_UNSET} if
      *     unknown.

File: library/core/src/test/java/com/google/android/exoplayer2/mediacodec/BatchBufferTest.java
Patch:
@@ -32,9 +32,9 @@
 @RunWith(AndroidJUnit4.class)
 public final class BatchBufferTest {
 
-  /** Bigger than {@link BatchBuffer#BATCH_SIZE_BYTES} */
+  /** Bigger than {@code BatchBuffer.BATCH_SIZE_BYTES} */
   private static final int BUFFER_SIZE_LARGER_THAN_BATCH_SIZE_BYTES = 100 * 1000 * 1000;
-  /** Smaller than {@link BatchBuffer#BATCH_SIZE_BYTES} */
+  /** Smaller than {@code BatchBuffer.BATCH_SIZE_BYTES} */
   private static final int BUFFER_SIZE_MUCH_SMALLER_THAN_BATCH_SIZE_BYTES = 100;
 
   private static final byte[] TEST_ACCESS_UNIT =

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/HlsMediaSourceTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-/** Unit test for {@link DashMediaSource}. */
+/** Unit test for {@link HlsMediaSource}. */
 @RunWith(AndroidJUnit4.class)
 public class HlsMediaSourceTest {
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/DefaultTsPayloadReaderFactory.java
Patch:
@@ -165,6 +165,8 @@ public TsPayloadReader createPayloadReader(int streamType, EsInfo esInfo) {
         return new PesReader(new DtsReader(esInfo.language));
       case TsExtractor.TS_STREAM_TYPE_H262:
         return new PesReader(new H262Reader(buildUserDataReader(esInfo)));
+      case TsExtractor.TS_STREAM_TYPE_H263:
+        return new PesReader(new H263Reader(buildUserDataReader(esInfo)));
       case TsExtractor.TS_STREAM_TYPE_H264:
         return isSet(FLAG_IGNORE_H264_STREAM) ? null
             : new PesReader(new H264Reader(buildSeiReader(esInfo),

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
Patch:
@@ -90,6 +90,7 @@ public final class TsExtractor implements Extractor {
   public static final int TS_STREAM_TYPE_E_AC3 = 0x87;
   public static final int TS_STREAM_TYPE_AC4 = 0xAC; // DVB/ATSC AC-4 Descriptor
   public static final int TS_STREAM_TYPE_H262 = 0x02;
+  public static final int TS_STREAM_TYPE_H263 = 0x10; // MPEG-4 Part 2 and H.263
   public static final int TS_STREAM_TYPE_H264 = 0x1B;
   public static final int TS_STREAM_TYPE_H265 = 0x24;
   public static final int TS_STREAM_TYPE_ID3 = 0x15;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -419,7 +419,7 @@ public void setListener(Listener listener) {
   }
 
   @Override
-  public boolean supportsOutput(Format format) {
+  public boolean supportsFormat(Format format) {
     if (format.encoding == C.ENCODING_INVALID) {
       return false;
     }
@@ -473,7 +473,7 @@ public void configure(Format inputFormat, int specifiedBufferSize, @Nullable int
     boolean useFloatOutput =
         enableFloatOutput
             && Util.isEncodingHighResolutionPcm(inputFormat.encoding)
-            && supportsOutput(inputFormat.buildUpon().setEncoding(C.ENCODING_PCM_FLOAT).build());
+            && supportsFormat(inputFormat.buildUpon().setEncoding(C.ENCODING_PCM_FLOAT).build());
     AudioProcessor[] availableAudioProcessors =
         useFloatOutput ? toFloatPcmAvailableAudioProcessors : toIntPcmAvailableAudioProcessors;
     if (processingEnabled) {

File: library/core/src/main/java/com/google/android/exoplayer2/audio/ForwardingAudioSink.java
Patch:
@@ -35,8 +35,8 @@ public void setListener(Listener listener) {
   }
 
   @Override
-  public boolean supportsOutput(Format format) {
-    return sink.supportsOutput(format);
+  public boolean supportsFormat(Format format) {
+    return sink.supportsFormat(format);
   }
 
   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
Patch:
@@ -591,9 +591,7 @@ public void seekTo(int windowIndex, long positionMs) {
       applicationHandler
           .obtainMessage(
               ExoPlayerImplInternal.MSG_PLAYBACK_INFO_CHANGED,
-              /* operationAcks */ 1,
-              /* positionDiscontinuityReason */ C.INDEX_UNSET,
-              playbackInfo)
+              new ExoPlayerImplInternal.PlaybackInfoUpdate(playbackInfo))
           .sendToTarget();
       return;
     }

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -288,7 +288,7 @@ public void init(ExtractorOutput output) {
               /* maximumSize= */ 0,
               /* timestampsUs= */ new long[0],
               /* flags= */ new int[0],
-              /* durationUs= */ C.TIME_UNSET),
+              /* durationUs= */ 0),
           new DefaultSampleValues(
               /* sampleDescriptionIndex= */ 0, /* duration= */ 0, /* size= */ 0, /* flags= */ 0));
       trackBundles.put(0, bundle);

File: library/common/src/test/java/com/google/android/exoplayer2/CTest.java
Patch:
@@ -31,7 +31,7 @@ public class CTest {
   @SuppressLint("InlinedApi")
   @Test
   public void bufferFlagConstants_equalToMediaCodecConstants() {
-    // Sanity check that constant values match those defined by the platform.
+    // Check that constant values match those defined by the platform.
     assertThat(C.BUFFER_FLAG_KEY_FRAME).isEqualTo(MediaCodec.BUFFER_FLAG_KEY_FRAME);
     assertThat(C.BUFFER_FLAG_END_OF_STREAM).isEqualTo(MediaCodec.BUFFER_FLAG_END_OF_STREAM);
     assertThat(C.CRYPTO_MODE_AES_CTR).isEqualTo(MediaCodec.CRYPTO_MODE_AES_CTR);
@@ -40,7 +40,7 @@ public void bufferFlagConstants_equalToMediaCodecConstants() {
   @SuppressLint("InlinedApi")
   @Test
   public void encodingConstants_equalToAudioFormatConstants() {
-    // Sanity check that encoding constant values match those defined by the platform.
+    // Check that encoding constant values match those defined by the platform.
     assertThat(C.ENCODING_PCM_16BIT).isEqualTo(AudioFormat.ENCODING_PCM_16BIT);
     assertThat(C.ENCODING_MP3).isEqualTo(AudioFormat.ENCODING_MP3);
     assertThat(C.ENCODING_PCM_FLOAT).isEqualTo(AudioFormat.ENCODING_PCM_FLOAT);

File: library/core/src/main/java/com/google/android/exoplayer2/MediaPeriodHolder.java
Patch:
@@ -297,7 +297,7 @@ public long applyTrackSelection(
             positionUs);
     associateNoSampleRenderersWithEmptySampleStream(sampleStreams);
 
-    // Update whether we have enabled tracks and sanity check the expected streams are non-null.
+    // Update whether we have enabled tracks and check that the expected streams are non-null.
     hasEnabledTracks = false;
     for (int i = 0; i < sampleStreams.length; i++) {
       if (sampleStreams[i] != null) {

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioTrackPositionTracker.java
Patch:
@@ -435,7 +435,7 @@ private void maybePollAndCheckTimestamp(long systemTimeUs, long playbackPosition
       return;
     }
 
-    // Perform sanity checks on the timestamp and accept/reject it.
+    // Check the timestamp and accept/reject it.
     long audioTimestampSystemTimeUs = audioTimestampPoller.getTimestampSystemTimeUs();
     long audioTimestampPositionFrames = audioTimestampPoller.getTimestampPositionFrames();
     if (Math.abs(audioTimestampSystemTimeUs - systemTimeUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {
@@ -469,9 +469,9 @@ private void maybeUpdateLatency(long systemTimeUs) {
             castNonNull((Integer) getLatencyMethod.invoke(Assertions.checkNotNull(audioTrack)))
                     * 1000L
                 - bufferSizeUs;
-        // Sanity check that the latency is non-negative.
+        // Check that the latency is non-negative.
         latencyUs = Math.max(latencyUs, 0);
-        // Sanity check that the latency isn't too large.
+        // Check that the latency isn't too large.
         if (latencyUs > MAX_LATENCY_US) {
           listener.onInvalidLatency(latencyUs);
           latencyUs = 0;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -708,7 +708,7 @@ public boolean handleBuffer(
         afterDrainParameters = null;
       }
 
-      // Sanity check that presentationTimeUs is consistent with the expected value.
+      // Check that presentationTimeUs is consistent with the expected value.
       long expectedPresentationTimeUs =
           startMediaTimeUs
               + configuration.inputFramesToDurationUs(

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSession.java
Patch:
@@ -421,8 +421,8 @@ private void doLicense(boolean allowRetry) {
       case DefaultDrmSessionManager.MODE_RELEASE:
         Assertions.checkNotNull(offlineLicenseKeySetId);
         Assertions.checkNotNull(this.sessionId);
-        // It's not necessary to restore the key (and open a session to do that) before releasing it
-        // but this serves as a good sanity/fast-failure check.
+        // It's not necessary to restore the key before releasing it but this serves as a good
+        // fast-failure check.
         if (restoreKeys()) {
           postKeyRequest(offlineLicenseKeySetId, ExoMediaDrm.KEY_TYPE_RELEASE, allowRetry);
         }

File: library/core/src/main/java/com/google/android/exoplayer2/text/subrip/SubripDecoder.java
Patch:
@@ -84,7 +84,7 @@ protected Subtitle decode(byte[] bytes, int length, boolean reset) {
         continue;
       }
 
-      // Parse the index line as a sanity check.
+      // Parse and check the index line.
       try {
         Integer.parseInt(currentLine);
       } catch (NumberFormatException e) {

File: library/core/src/main/java/com/google/android/exoplayer2/util/SntpClient.java
Patch:
@@ -160,7 +160,7 @@ private static long loadNtpTimeOffsetMs() throws IOException {
       final long receiveTime = readTimestamp(buffer, RECEIVE_TIME_OFFSET);
       final long transmitTime = readTimestamp(buffer, TRANSMIT_TIME_OFFSET);
 
-      // Do sanity check according to RFC.
+      // Check server reply validity according to RFC.
       checkValidServerReply(leap, mode, stratum, transmitTime);
 
       // receiveTime = originateTime + transit + skew

File: library/core/src/main/java/com/google/android/exoplayer2/video/spherical/ProjectionDecoder.java
Patch:
@@ -43,7 +43,7 @@ public final class ProjectionDecoder {
   private static final int TYPE_MESH = 0x6d657368;
   private static final int TYPE_PROJ = 0x70726f6a;
 
-  // Sanity limits to prevent a bad file from creating an OOM situation. We don't expect a mesh to
+  // Limits to prevent a bad file from creating an OOM situation. We don't expect a mesh to
   // exceed these limits.
   private static final int MAX_COORDINATE_COUNT = 10_000;
   private static final int MAX_VERTEX_COUNT = 32 * 1000;

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CacheDataSourceTest2.java
Patch:
@@ -179,13 +179,13 @@ private static CacheDataSource buildCacheDataSource(Context context, DataSource
         null); // eventListener
   }
 
-  private static void emptyCache(Cache cache) throws CacheException {
+  private static void emptyCache(Cache cache) {
     for (String key : cache.getKeys()) {
       for (CacheSpan span : cache.getCachedSpans(key)) {
         cache.removeSpan(span);
       }
     }
-    // Sanity check that the cache really is empty now.
+    // Check that the cache really is empty now.
     assertThat(cache.getKeys().isEmpty()).isTrue();
   }
 

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ExtractorTest.java
Patch:
@@ -28,9 +28,9 @@ public final class ExtractorTest {
 
   @Test
   public void constants() {
-    // Sanity check that constant values match those defined by {@link C}.
+    // Check that constant values match those defined by {@link C}.
     assertThat(Extractor.RESULT_END_OF_INPUT).isEqualTo(C.RESULT_END_OF_INPUT);
-    // Sanity check that the other constant values don't overlap.
+    // Check that the other constant values don't overlap.
     assertThat(C.RESULT_END_OF_INPUT != Extractor.RESULT_CONTINUE).isTrue();
     assertThat(C.RESULT_END_OF_INPUT != Extractor.RESULT_SEEK).isTrue();
   }

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/mp4/MetadataUtilTest.java
Patch:
@@ -27,7 +27,7 @@ public final class MetadataUtilTest {
 
   @Test
   public void standardGenre_length_matchesNumberOfId3Genres() {
-    // Sanity check that we haven't forgotten a genre in the list.
+    // Check that we haven't forgotten a genre in the list.
     assertThat(MetadataUtil.STANDARD_GENRES).hasLength(192);
   }
 }

File: library/core/src/main/java/com/google/android/exoplayer2/decoder/SimpleDecoder.java
Patch:
@@ -153,7 +153,6 @@ public final void flush() {
       while (!queuedOutputBuffers.isEmpty()) {
         queuedOutputBuffers.removeFirst().release();
       }
-      exception = null;
     }
   }
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -1565,7 +1565,7 @@ public void updateDrmInitData(DrmInitData drmInitData) {
       output.format(format);
     }
 
-    /** Resets the current fragment, sample indices and {@code isInFragment} boolean. */
+    /** Resets the current fragment, sample indices and {@link #currentlyInFragment} boolean. */
     public void reset() {
       fragment.reset();
       currentSampleIndex = 0;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/TrackFragment.java
Patch:
@@ -89,8 +89,8 @@
    */
   public boolean sampleEncryptionDataNeedsFill;
   /**
-   * The absolute decode time of the start of the next fragment, excluding the samples outside
-   * fragments.
+   * The duration of all samples defined in fragments up to and including this one. Samples defined
+   * in the moov box are not included.
    */
   public long nextFragmentDecodeTime;
 

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/Sniffer.java
Patch:
@@ -57,6 +57,8 @@
         0x71742020, // qt[space][space], Apple QuickTime
         0x4d534e56, // MSNV, Sony PSP
         0x64627931, // dby1, Dolby Vision
+        0x69736d6c, // isml
+        0x70696666, // piff
       };
 
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -173,7 +173,7 @@ public ExoPlayerImplInternal(
     this.pauseAtEndOfWindow = pauseAtEndOfWindow;
     this.eventHandler = eventHandler;
     this.clock = clock;
-    this.queue = new MediaPeriodQueue();
+    this.queue = new MediaPeriodQueue(analyticsCollector, eventHandler);
 
     backBufferDurationUs = loadControl.getBackBufferDurationUs();
     retainBackBufferFromKeyframe = loadControl.retainBackBufferFromKeyframe();

File: library/core/src/test/java/com/google/android/exoplayer2/MediaPeriodQueueTest.java
Patch:
@@ -74,7 +74,9 @@ public final class MediaPeriodQueueTest {
 
   @Before
   public void setUp() {
-    mediaPeriodQueue = new MediaPeriodQueue();
+    mediaPeriodQueue =
+        new MediaPeriodQueue(
+            /* analyticsCollector= */ null, Util.createHandlerForCurrentOrMainLooper());
     mediaSourceList =
         new MediaSourceList(
             mock(MediaSourceList.MediaSourceListInfoRefreshListener.class),

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/ChunkSampleStream.java
Patch:
@@ -489,12 +489,12 @@ public LoadErrorAction onLoadError(
     LoadErrorInfo loadErrorInfo =
         new LoadErrorInfo(loadEventInfo, mediaLoadData, error, errorCount);
 
-    long blacklistDurationMs =
+    long exclusionDurationMs =
         cancelable
             ? loadErrorHandlingPolicy.getBlacklistDurationMsFor(loadErrorInfo)
             : C.TIME_UNSET;
     @Nullable LoadErrorAction loadErrorAction = null;
-    if (chunkSource.onChunkLoadError(loadable, cancelable, error, blacklistDurationMs)) {
+    if (chunkSource.onChunkLoadError(loadable, cancelable, error, exclusionDurationMs)) {
       if (cancelable) {
         loadErrorAction = Loader.DONT_RETRY;
         if (isMediaChunk) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/ChunkSource.java
Patch:
@@ -96,12 +96,12 @@ void getNextChunk(
    * @param chunk The chunk whose load encountered the error.
    * @param cancelable Whether the load can be canceled.
    * @param e The error.
-   * @param blacklistDurationMs The duration for which the associated track may be blacklisted, or
-   *     {@link C#TIME_UNSET} if the track may not be blacklisted.
+   * @param exclusionDurationMs The duration for which the associated track may be excluded, or
+   *     {@link C#TIME_UNSET} if the track may not be excluded.
    * @return Whether the load should be canceled so that a replacement chunk can be loaded instead.
    *     Must be {@code false} if {@code cancelable} is {@code false}. If {@code true}, {@link
    *     #getNextChunk(long, long, List, ChunkHolder)} will be called to obtain the replacement
    *     chunk.
    */
-  boolean onChunkLoadError(Chunk chunk, boolean cancelable, Exception e, long blacklistDurationMs);
+  boolean onChunkLoadError(Chunk chunk, boolean cancelable, Exception e, long exclusionDurationMs);
 }

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DefaultDashChunkSource.java
Patch:
@@ -415,7 +415,7 @@ public void onChunkLoadCompleted(Chunk chunk) {
 
   @Override
   public boolean onChunkLoadError(
-      Chunk chunk, boolean cancelable, Exception e, long blacklistDurationMs) {
+      Chunk chunk, boolean cancelable, Exception e, long exclusionDurationMs) {
     if (!cancelable) {
       return false;
     }
@@ -438,8 +438,8 @@ public boolean onChunkLoadError(
         }
       }
     }
-    return blacklistDurationMs != C.TIME_UNSET
-        && trackSelection.blacklist(trackSelection.indexOf(chunk.trackFormat), blacklistDurationMs);
+    return exclusionDurationMs != C.TIME_UNSET
+        && trackSelection.blacklist(trackSelection.indexOf(chunk.trackFormat), exclusionDurationMs);
   }
 
   // Internal methods.

File: library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/DefaultSsChunkSource.java
Patch:
@@ -265,10 +265,10 @@ public void onChunkLoadCompleted(Chunk chunk) {
 
   @Override
   public boolean onChunkLoadError(
-      Chunk chunk, boolean cancelable, Exception e, long blacklistDurationMs) {
+      Chunk chunk, boolean cancelable, Exception e, long exclusionDurationMs) {
     return cancelable
-        && blacklistDurationMs != C.TIME_UNSET
-        && trackSelection.blacklist(trackSelection.indexOf(chunk.trackFormat), blacklistDurationMs);
+        && exclusionDurationMs != C.TIME_UNSET
+        && trackSelection.blacklist(trackSelection.indexOf(chunk.trackFormat), exclusionDurationMs);
   }
 
   // Private methods.

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeChunkSource.java
Patch:
@@ -146,7 +146,7 @@ public void onChunkLoadCompleted(Chunk chunk) {
 
   @Override
   public boolean onChunkLoadError(
-      Chunk chunk, boolean cancelable, Exception e, long blacklistDurationMs) {
+      Chunk chunk, boolean cancelable, Exception e, long exclusionDurationMs) {
     return false;
   }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackSelection.java
Patch:
@@ -137,7 +137,7 @@ public int evaluateQueueSize(long playbackPositionUs, List<? extends MediaChunk>
   }
 
   @Override
-  public boolean blacklist(int index, long blacklistDurationMs) {
+  public boolean blacklist(int index, long exclusionDurationMs) {
     assertThat(isEnabled).isTrue();
     return false;
   }

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/TrackFragment.java
Patch:
@@ -89,7 +89,8 @@
    */
   public boolean sampleEncryptionDataNeedsFill;
   /**
-   * The absolute decode time of the start of the next fragment.
+   * The absolute decode time of the start of the next fragment, excluding the samples outside
+   * fragments.
    */
   public long nextFragmentDecodeTime;
 

File: library/core/src/main/java/com/google/android/exoplayer2/MediaSourceList.java
Patch:
@@ -67,7 +67,7 @@ public interface MediaSourceListInfoRefreshListener {
   private static final String TAG = "MediaSourceList";
 
   private final List<MediaSourceHolder> mediaSourceHolders;
-  private final Map<MediaPeriod, MediaSourceHolder> mediaSourceByMediaPeriod;
+  private final IdentityHashMap<MediaPeriod, MediaSourceHolder> mediaSourceByMediaPeriod;
   private final Map<Object, MediaSourceHolder> mediaSourceByUid;
   private final MediaSourceListInfoRefreshListener mediaSourceListInfoListener;
   private final MediaSourceEventListener.EventDispatcher eventDispatcher;

File: library/core/src/main/java/com/google/android/exoplayer2/source/ConcatenatingMediaSource.java
Patch:
@@ -72,7 +72,7 @@ public final class ConcatenatingMediaSource extends CompositeMediaSource<MediaSo
 
   // Accessed on the playback thread only.
   private final List<MediaSourceHolder> mediaSourceHolders;
-  private final Map<MediaPeriod, MediaSourceHolder> mediaSourceByMediaPeriod;
+  private final IdentityHashMap<MediaPeriod, MediaSourceHolder> mediaSourceByMediaPeriod;
   private final Map<Object, MediaSourceHolder> mediaSourceByUid;
   private final Set<MediaSourceHolder> enabledMediaSourceHolders;
   private final boolean isAtomic;

File: library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlNode.java
Patch:
@@ -268,6 +268,7 @@ public List<Cue> getCues(
               .setLineAnchor(region.lineAnchor)
               .setSize(region.width)
               .setBitmapHeight(region.height)
+              .setVerticalType(region.verticalType)
               .build());
     }
 
@@ -281,6 +282,7 @@ public List<Cue> getCues(
       regionOutput.setPosition(region.position);
       regionOutput.setSize(region.width);
       regionOutput.setTextSize(region.textSize, region.textSizeType);
+      regionOutput.setVerticalType(region.verticalType);
       cues.add(regionOutput.build());
     }
 
@@ -380,9 +382,7 @@ private void applyStyleToOutput(
     }
     if (resolvedStyle != null) {
       TtmlRenderUtil.applyStylesToSpan(text, start, end, resolvedStyle, parent, globalStyles);
-      regionOutput
-          .setTextAlignment(resolvedStyle.getTextAlign())
-          .setVerticalType(resolvedStyle.getVerticalType());
+      regionOutput.setTextAlignment(resolvedStyle.getTextAlign());
     }
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlNode.java
Patch:
@@ -379,7 +379,7 @@ private void applyStyleToOutput(
       regionOutput.setText(text);
     }
     if (resolvedStyle != null) {
-      TtmlRenderUtil.applyStylesToSpan(text, start, end, resolvedStyle, parent);
+      TtmlRenderUtil.applyStylesToSpan(text, start, end, resolvedStyle, parent, globalStyles);
       regionOutput
           .setTextAlignment(resolvedStyle.getTextAlign())
           .setVerticalType(resolvedStyle.getVerticalType());

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/IntentUtil.java
Patch:
@@ -274,7 +274,7 @@ private static void addDrmConfigurationToIntent(
     intent.putExtra(DRM_SCHEME_EXTRA + extrasKeySuffix, drmConfiguration.uuid.toString());
     intent.putExtra(
         DRM_LICENSE_URL_EXTRA + extrasKeySuffix,
-        checkNotNull(drmConfiguration.licenseUri).toString());
+        drmConfiguration.licenseUri != null ? drmConfiguration.licenseUri.toString() : null);
     intent.putExtra(DRM_MULTI_SESSION_EXTRA + extrasKeySuffix, drmConfiguration.multiSession);
     intent.putExtra(
         DRM_FORCE_DEFAULT_LICENSE_URI_EXTRA + extrasKeySuffix,

File: library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
Patch:
@@ -219,12 +219,13 @@ protected int supportsFormat(MediaCodecSelector mediaCodecSelector, Format forma
     }
     @TunnelingSupport
     int tunnelingSupport = Util.SDK_INT >= 21 ? TUNNELING_SUPPORTED : TUNNELING_NOT_SUPPORTED;
+    boolean formatHasDrm = format.drmInitData != null || format.exoMediaCryptoType != null;
     boolean supportsFormatDrm = supportsFormatDrm(format);
-    // In passthrough mode, if DRM init data is present we need to use a passthrough decoder to
+    // In passthrough mode, if a DRM is present we need to use a passthrough decoder to
     // decrypt the content. For passthrough of clear content we don't need a decoder at all.
     if (supportsFormatDrm
         && usePassthrough(format)
-        && (format.drmInitData == null || MediaCodecUtil.getPassthroughDecoderInfo() != null)) {
+        && (!formatHasDrm || MediaCodecUtil.getPassthroughDecoderInfo() != null)) {
       return RendererCapabilities.create(FORMAT_HANDLED, ADAPTIVE_NOT_SEAMLESS, tunnelingSupport);
     }
     if ((MimeTypes.AUDIO_RAW.equals(format.sampleMimeType) && !audioSink.supportsOutput(format))

File: library/common/src/main/java/com/google/android/exoplayer2/Format.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.android.exoplayer2.drm.DrmInitData;
 import com.google.android.exoplayer2.drm.ExoMediaCrypto;
 import com.google.android.exoplayer2.metadata.Metadata;
+import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
 import com.google.android.exoplayer2.video.ColorInfo;
@@ -1309,7 +1310,7 @@ public static Format createSampleFormat(@Nullable String id, @Nullable String sa
     int initializationDataSize = in.readInt();
     initializationData = new ArrayList<>(initializationDataSize);
     for (int i = 0; i < initializationDataSize; i++) {
-      initializationData.add(in.createByteArray());
+      initializationData.add(Assertions.checkNotNull(in.createByteArray()));
     }
     drmInitData = in.readParcelable(DrmInitData.class.getClassLoader());
     subsampleOffsetUs = in.readLong();

File: library/common/src/main/java/com/google/android/exoplayer2/util/CopyOnWriteMultiset.java
Patch:
@@ -41,7 +41,9 @@
  *
  * @param <E> The type of element being stored.
  */
-public final class CopyOnWriteMultiset<E> implements Iterable<E> {
+// Intentionally extending @NonNull-by-default Object to disallow @Nullable E types.
+@SuppressWarnings("TypeParameterExplicitlyExtendsObject")
+public final class CopyOnWriteMultiset<E extends Object> implements Iterable<E> {
 
   private final Object lock;
 

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/SubtitleView.java
Patch:
@@ -229,7 +229,9 @@ public void setFixedTextSize(@Dimension int unit, float size) {
    * default size before API level 19.
    */
   public void setUserDefaultTextSize() {
-    float fontScale = Util.SDK_INT >= 19 && !isInEditMode() ? getUserCaptionFontScaleV19() : 1f;
+    float fontScale = Util.SDK_INT >= 19 && isCaptionManagerEnabled() && !isInEditMode()
+        ? getUserCaptionFontScaleV19()
+        : 1f;
     setFractionalTextSize(DEFAULT_TEXT_SIZE_FRACTION * fontScale);
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/util/RunnableFutureTask.java
Patch:
@@ -159,6 +159,8 @@ protected void cancelWork() {
     // Do nothing.
   }
 
+  // The return value is guaranteed to be non-null if and only if R is a non-null type, but there's
+  // no way to assert this. Suppress the warning instead.
   @SuppressWarnings("return.type.incompatible")
   @UnknownNull
   private R getResult() throws ExecutionException {

File: extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/FlacExtractor.java
Patch:
@@ -279,7 +279,7 @@ private static void outputFormat(
             .setMaxInputSize(streamMetadata.getMaxDecodedFrameSize())
             .setChannelCount(streamMetadata.channels)
             .setSampleRate(streamMetadata.sampleRate)
-            .setPcmEncoding(getPcmEncoding(streamMetadata.bitsPerSample))
+            .setEncoding(getPcmEncoding(streamMetadata.bitsPerSample))
             .setMetadata(metadata)
             .build();
     output.format(mediaFormat);

File: extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/LibflacAudioRenderer.java
Patch:
@@ -100,7 +100,7 @@ protected int supportsFormatInternal(Format format) {
           new FlacStreamMetadata(format.initializationData.get(0), streamMetadataOffset);
       pcmEncoding = Util.getPcmEncoding(streamMetadata.bitsPerSample);
     }
-    if (!supportsOutput(format, pcmEncoding)) {
+    if (!supportsOutput(format.buildUpon().setEncoding(pcmEncoding).build())) {
       return FORMAT_UNSUPPORTED_SUBTYPE;
     } else if (format.drmInitData != null && format.exoMediaCryptoType == null) {
       return FORMAT_UNSUPPORTED_DRM;
@@ -127,7 +127,7 @@ protected Format getOutputFormat() {
         .setSampleMimeType(MimeTypes.AUDIO_RAW)
         .setChannelCount(streamMetadata.channels)
         .setSampleRate(streamMetadata.sampleRate)
-        .setPcmEncoding(Util.getPcmEncoding(streamMetadata.bitsPerSample))
+        .setEncoding(Util.getPcmEncoding(streamMetadata.bitsPerSample))
         .build();
   }
 }

File: extensions/opus/src/main/java/com/google/android/exoplayer2/ext/opus/LibopusAudioRenderer.java
Patch:
@@ -69,7 +69,7 @@ protected int supportsFormatInternal(Format format) {
     if (!OpusLibrary.isAvailable()
         || !MimeTypes.AUDIO_OPUS.equalsIgnoreCase(format.sampleMimeType)) {
       return FORMAT_UNSUPPORTED_TYPE;
-    } else if (!supportsOutput(format, C.ENCODING_PCM_16BIT)) {
+    } else if (!supportsOutput(format.buildUpon().setEncoding(C.ENCODING_PCM_16BIT).build())) {
       return FORMAT_UNSUPPORTED_SUBTYPE;
     } else if (!drmIsSupported) {
       return FORMAT_UNSUPPORTED_DRM;
@@ -103,7 +103,7 @@ protected Format getOutputFormat() {
         .setSampleMimeType(MimeTypes.AUDIO_RAW)
         .setChannelCount(channelCount)
         .setSampleRate(sampleRate)
-        .setPcmEncoding(C.ENCODING_PCM_16BIT)
+        .setEncoding(C.ENCODING_PCM_16BIT)
         .build();
   }
 }

File: library/core/src/main/java/com/google/android/exoplayer2/audio/ChannelMappingAudioProcessor.java
Patch:
@@ -35,7 +35,7 @@
    *
    * @param outputChannels The mapping from input to output channel indices, or {@code null} to
    *     leave the input unchanged.
-   * @see AudioSink#configure(int, int, int, int, int[], int, int)
+   * @see AudioSink#configure(com.google.android.exoplayer2.Format, int, int[])
    */
   public void setChannelMap(@Nullable int[] outputChannels) {
     pendingOutputChannels = outputChannels;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/TrimmingAudioProcessor.java
Patch:
@@ -45,7 +45,7 @@ public TrimmingAudioProcessor() {
    *
    * @param trimStartFrames The number of audio frames to trim from the start of audio.
    * @param trimEndFrames The number of audio frames to trim from the end of audio.
-   * @see AudioSink#configure(int, int, int, int, int[], int, int)
+   * @see AudioSink#configure(com.google.android.exoplayer2.Format, int, int[])
    */
   public void setTrimFrameCount(int trimStartFrames, int trimEndFrames) {
     this.trimStartFrames = trimStartFrames;

File: library/core/src/main/java/com/google/android/exoplayer2/source/SilenceMediaSource.java
Patch:
@@ -87,7 +87,7 @@ public SilenceMediaSource createMediaSource() {
           .setSampleMimeType(MimeTypes.AUDIO_RAW)
           .setChannelCount(CHANNEL_COUNT)
           .setSampleRate(SAMPLE_RATE_HZ)
-          .setPcmEncoding(PCM_ENCODING)
+          .setEncoding(PCM_ENCODING)
           .build();
   private static final MediaItem MEDIA_ITEM =
       new MediaItem.Builder()

File: library/core/src/test/java/com/google/android/exoplayer2/mediacodec/C2Mp3TimestampTrackerTest.java
Patch:
@@ -34,7 +34,7 @@ public final class C2Mp3TimestampTrackerTest {
   private static final Format AUDIO_MP3 =
       new Format.Builder()
           .setSampleMimeType(MimeTypes.AUDIO_MPEG)
-          .setPcmEncoding(C.ENCODING_PCM_16BIT)
+          .setEncoding(C.ENCODING_PCM_16BIT)
           .setChannelCount(2)
           .setSampleRate(44_100)
           .build();

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractor.java
Patch:
@@ -2098,7 +2098,7 @@ public void initializeOutput(ExtractorOutput output, int trackId) throws ParserE
         formatBuilder
             .setChannelCount(channelCount)
             .setSampleRate(sampleRate)
-            .setPcmEncoding(pcmEncoding);
+            .setEncoding(pcmEncoding);
       } else if (MimeTypes.isVideo(mimeType)) {
         type = C.TRACK_TYPE_VIDEO;
         if (displayUnit == Track.DISPLAY_UNIT_PIXELS) {

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/wav/WavExtractor.java
Patch:
@@ -231,7 +231,7 @@ public PassthroughOutputWriter(
               .setMaxInputSize(targetSampleSizeBytes)
               .setChannelCount(header.numChannels)
               .setSampleRate(header.frameRateHz)
-              .setPcmEncoding(pcmEncoding)
+              .setEncoding(pcmEncoding)
               .build();
     }
 
@@ -373,7 +373,7 @@ public ImaAdPcmOutputWriter(
               .setMaxInputSize(numOutputFramesToBytes(targetSampleSizeFrames, numChannels))
               .setChannelCount(header.numChannels)
               .setSampleRate(header.frameRateHz)
-              .setPcmEncoding(C.ENCODING_PCM_16BIT)
+              .setEncoding(C.ENCODING_PCM_16BIT)
               .build();
     }
 

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackOutput.java
Patch:
@@ -312,7 +312,7 @@ public void dump(Dumper dumper) {
       addIfNonDefault(dumper, "pixelWidthHeightRatio", format -> format.pixelWidthHeightRatio);
       addIfNonDefault(dumper, "channelCount", format -> format.channelCount);
       addIfNonDefault(dumper, "sampleRate", format -> format.sampleRate);
-      addIfNonDefault(dumper, "pcmEncoding", format -> format.pcmEncoding);
+      addIfNonDefault(dumper, "encoding", format -> format.encoding);
       addIfNonDefault(dumper, "encoderDelay", format -> format.encoderDelay);
       addIfNonDefault(dumper, "encoderPadding", format -> format.encoderPadding);
       addIfNonDefault(dumper, "subsampleOffsetUs", format -> format.subsampleOffsetUs);

File: library/core/src/main/java/com/google/android/exoplayer2/source/MaskingMediaSource.java
Patch:
@@ -275,9 +275,9 @@ private static final class MaskingTimeline extends ForwardingTimeline {
     @Nullable private final Object replacedInternalPeriodUid;
 
     /**
-     * Returns an instance with a dummy timeline using the provided window tag.
+     * Returns an instance with a dummy timeline using the provided {@link MediaItem}.
      *
-     * @param windowTag A window tag.
+     * @param mediaItem A {@link MediaItem}.
      */
     public static MaskingTimeline createWithDummyTimeline(MediaItem mediaItem) {
       return new MaskingTimeline(

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DefaultDownloaderFactory.java
Patch:
@@ -18,6 +18,7 @@
 import android.net.Uri;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
+import com.google.android.exoplayer2.util.Assertions;
 import java.lang.reflect.Constructor;
 import java.util.List;
 import java.util.concurrent.Executor;
@@ -94,8 +95,8 @@ public DefaultDownloaderFactory(CacheDataSource.Factory cacheDataSourceFactory)
    */
   public DefaultDownloaderFactory(
       CacheDataSource.Factory cacheDataSourceFactory, Executor executor) {
-    this.cacheDataSourceFactory = cacheDataSourceFactory;
-    this.executor = executor;
+    this.cacheDataSourceFactory = Assertions.checkNotNull(cacheDataSourceFactory);
+    this.executor = Assertions.checkNotNull(executor);
   }
 
   @Override

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
Patch:
@@ -1331,7 +1331,7 @@ public void run() {
           }
         }
       } catch (InterruptedException e) {
-        // The task was canceled. Do nothing.
+        Thread.currentThread().interrupt();
       } catch (Exception e) {
         finalException = e;
       }

File: extensions/flac/src/main/java/com/google/android/exoplayer2/ext/flac/LibflacAudioRenderer.java
Patch:
@@ -100,7 +100,7 @@ protected int supportsFormatInternal(Format format) {
           new FlacStreamMetadata(format.initializationData.get(0), streamMetadataOffset);
       pcmEncoding = Util.getPcmEncoding(streamMetadata.bitsPerSample);
     }
-    if (!supportsOutput(format.channelCount, format.sampleRate, pcmEncoding)) {
+    if (!supportsOutput(format, pcmEncoding)) {
       return FORMAT_UNSUPPORTED_SUBTYPE;
     } else if (format.drmInitData != null && format.exoMediaCryptoType == null) {
       return FORMAT_UNSUPPORTED_DRM;

File: extensions/opus/src/main/java/com/google/android/exoplayer2/ext/opus/LibopusAudioRenderer.java
Patch:
@@ -69,7 +69,7 @@ protected int supportsFormatInternal(Format format) {
     if (!OpusLibrary.isAvailable()
         || !MimeTypes.AUDIO_OPUS.equalsIgnoreCase(format.sampleMimeType)) {
       return FORMAT_UNSUPPORTED_TYPE;
-    } else if (!supportsOutput(format.channelCount, format.sampleRate, C.ENCODING_PCM_16BIT)) {
+    } else if (!supportsOutput(format, C.ENCODING_PCM_16BIT)) {
       return FORMAT_UNSUPPORTED_SUBTYPE;
     } else if (!drmIsSupported) {
       return FORMAT_UNSUPPORTED_DRM;

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/amr/AmrExtractorParameterizedTest.java
Patch:
@@ -37,8 +37,7 @@ public static List<Object[]> params() {
     return ExtractorAsserts.configs();
   }
 
-  @Parameter(0)
-  public ExtractorAsserts.SimulationConfig simulationConfig;
+  @Parameter public ExtractorAsserts.SimulationConfig simulationConfig;
 
   @Test
   public void extractingNarrowBandSamples() throws Exception {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/flac/FlacExtractorTest.java
Patch:
@@ -33,8 +33,7 @@ public static List<Object[]> params() {
     return ExtractorAsserts.configs();
   }
 
-  @Parameter(0)
-  public ExtractorAsserts.SimulationConfig simulationConfig;
+  @Parameter public ExtractorAsserts.SimulationConfig simulationConfig;
 
   @Test
   public void sample() throws Exception {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/flv/FlvExtractorTest.java
Patch:
@@ -32,8 +32,7 @@ public static List<Object[]> params() {
     return ExtractorAsserts.configs();
   }
 
-  @Parameter(0)
-  public ExtractorAsserts.SimulationConfig simulationConfig;
+  @Parameter public ExtractorAsserts.SimulationConfig simulationConfig;
 
   @Test
   public void sample() throws Exception {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/mkv/MatroskaExtractorTest.java
Patch:
@@ -32,8 +32,7 @@ public static List<Object[]> params() {
     return ExtractorAsserts.configs();
   }
 
-  @Parameter(0)
-  public ExtractorAsserts.SimulationConfig simulationConfig;
+  @Parameter public ExtractorAsserts.SimulationConfig simulationConfig;
 
   @Test
   public void mkvSample() throws Exception {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/mp3/Mp3ExtractorTest.java
Patch:
@@ -33,8 +33,7 @@ public static List<Object[]> params() {
     return ExtractorAsserts.configs();
   }
 
-  @Parameter(0)
-  public ExtractorAsserts.SimulationConfig simulationConfig;
+  @Parameter public ExtractorAsserts.SimulationConfig simulationConfig;
 
   @Test
   public void mp3SampleWithXingHeader() throws Exception {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4ExtractorTest.java
Patch:
@@ -37,8 +37,7 @@ public static List<Object[]> params() {
     return ExtractorAsserts.configs();
   }
 
-  @Parameter(0)
-  public ExtractorAsserts.SimulationConfig simulationConfig;
+  @Parameter public ExtractorAsserts.SimulationConfig simulationConfig;
 
   @Test
   public void sample() throws Exception {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/mp4/Mp4ExtractorTest.java
Patch:
@@ -32,8 +32,7 @@ public static List<Object[]> params() {
     return ExtractorAsserts.configs();
   }
 
-  @Parameter(0)
-  public ExtractorAsserts.SimulationConfig simulationConfig;
+  @Parameter public ExtractorAsserts.SimulationConfig simulationConfig;
 
   @Test
   public void mp4Sample() throws Exception {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ogg/OggExtractorParameterizedTest.java
Patch:
@@ -36,8 +36,7 @@ public static List<Object[]> params() {
     return ExtractorAsserts.configs();
   }
 
-  @Parameter(0)
-  public ExtractorAsserts.SimulationConfig simulationConfig;
+  @Parameter public ExtractorAsserts.SimulationConfig simulationConfig;
 
   @Test
   public void opus() throws Exception {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ts/Ac3ExtractorTest.java
Patch:
@@ -32,8 +32,7 @@ public static List<Object[]> params() {
     return ExtractorAsserts.configs();
   }
 
-  @Parameter(0)
-  public ExtractorAsserts.SimulationConfig simulationConfig;
+  @Parameter public ExtractorAsserts.SimulationConfig simulationConfig;
 
   @Test
   public void ac3Sample() throws Exception {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ts/Ac4ExtractorTest.java
Patch:
@@ -32,8 +32,7 @@ public static List<Object[]> params() {
     return ExtractorAsserts.configs();
   }
 
-  @Parameter(0)
-  public ExtractorAsserts.SimulationConfig simulationConfig;
+  @Parameter public ExtractorAsserts.SimulationConfig simulationConfig;
 
   @Test
   public void ac4Sample() throws Exception {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractorTest.java
Patch:
@@ -32,8 +32,7 @@ public static List<Object[]> params() {
     return ExtractorAsserts.configs();
   }
 
-  @Parameter(0)
-  public ExtractorAsserts.SimulationConfig simulationConfig;
+  @Parameter public ExtractorAsserts.SimulationConfig simulationConfig;
 
   @Test
   public void sample() throws Exception {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ts/PsExtractorTest.java
Patch:
@@ -32,8 +32,7 @@ public static List<Object[]> params() {
     return ExtractorAsserts.configs();
   }
 
-  @Parameter(0)
-  public ExtractorAsserts.SimulationConfig simulationConfig;
+  @Parameter public ExtractorAsserts.SimulationConfig simulationConfig;
 
   @Test
   public void sampleWithH262AndMpegAudio() throws Exception {

File: library/extractor/src/test/java/com/google/android/exoplayer2/extractor/ts/TsExtractorTest.java
Patch:
@@ -52,8 +52,7 @@ public static List<Object[]> params() {
     return ExtractorAsserts.configs();
   }
 
-  @Parameter(0)
-  public ExtractorAsserts.SimulationConfig simulationConfig;
+  @Parameter public ExtractorAsserts.SimulationConfig simulationConfig;
 
   @Test
   public void sampleWithH262AndMpegAudio() throws Exception {

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -177,7 +177,7 @@ public Builder setAdUiElements(Set<UiElement> adUiElements) {
      * Sets the duration in milliseconds for which the player must buffer while preloading an ad
      * group before that ad group is skipped and marked as having failed to load. Pass {@link
      * C#TIME_UNSET} if there should be no such timeout. The default value is {@value
-     * DEFAULT_AD_PRELOAD_TIMEOUT_MS} ms.
+     * #DEFAULT_AD_PRELOAD_TIMEOUT_MS} ms.
      *
      * <p>The purpose of this timeout is to avoid playback getting stuck in the unexpected case that
      * the IMA SDK does not load an ad break based on the player's reported content position.

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AuxEffectInfo.java
Patch:
@@ -50,7 +50,7 @@ public final class AuxEffectInfo {
    * Creates an instance with the given effect identifier and send level.
    *
    * @param effectId The effect identifier. This is the value returned by {@link
-   *     AudioEffect#getId()} on the effect, or {@value NO_AUX_EFFECT_ID} which represents no
+   *     AudioEffect#getId()} on the effect, or {@value #NO_AUX_EFFECT_ID} which represents no
    *     effect. This value is passed to {@link AudioTrack#attachAuxEffect(int)} on the underlying
    *     audio track.
    * @param sendLevel The send level for the effect, where 0 represents no effect and a value of 1

File: library/core/src/main/java/com/google/android/exoplayer2/util/GlUtil.java
Patch:
@@ -204,8 +204,8 @@ public void bind() {
   private GlUtil() {}
 
   /**
-   * Returns whether creating a GL context with {@value EXTENSION_PROTECTED_CONTENT} is possible. If
-   * {@code true}, the device supports a protected output path for DRM content when using GL.
+   * Returns whether creating a GL context with {@value #EXTENSION_PROTECTED_CONTENT} is possible.
+   * If {@code true}, the device supports a protected output path for DRM content when using GL.
    */
   public static boolean isProtectedContentExtensionSupported(Context context) {
     if (Util.SDK_INT < 24) {
@@ -232,7 +232,7 @@ public static boolean isProtectedContentExtensionSupported(Context context) {
   }
 
   /**
-   * Returns whether creating a GL context with {@value EXTENSION_SURFACELESS_CONTEXT} is possible.
+   * Returns whether creating a GL context with {@value #EXTENSION_SURFACELESS_CONTEXT} is possible.
    */
   public static boolean isSurfacelessContextExtensionSupported() {
     if (Util.SDK_INT < 17) {

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/AdPlaybackState.java
Patch:
@@ -270,7 +270,9 @@ private static long[] copyDurationsUsWithSpaceForAdCount(long[] durationsUs, int
   public final AdGroup[] adGroups;
   /** The position offset in the first unplayed ad at which to begin playback, in microseconds. */
   public final long adResumePositionUs;
-  /** The content duration in microseconds, if known. {@link C#TIME_UNSET} otherwise. */
+  /**
+   * The duration of the content period in microseconds, if known. {@link C#TIME_UNSET} otherwise.
+   */
   public final long contentDurationUs;
 
   /**

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdPlaybackStateFactory.java
Patch:
@@ -46,7 +46,7 @@ public static AdPlaybackState fromCuePoints(List<Float> cuePoints) {
       if (cuePoint == -1.0) {
         adGroupTimesUs[count - 1] = C.TIME_END_OF_SOURCE;
       } else {
-        adGroupTimesUs[adGroupIndex++] = (long) (C.MICROS_PER_SECOND * cuePoint);
+        adGroupTimesUs[adGroupIndex++] = Math.round(C.MICROS_PER_SECOND * cuePoint);
       }
     }
     // Cue points may be out of order, so sort them.

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/AdPlaybackState.java
Patch:
@@ -270,7 +270,9 @@ private static long[] copyDurationsUsWithSpaceForAdCount(long[] durationsUs, int
   public final AdGroup[] adGroups;
   /** The position offset in the first unplayed ad at which to begin playback, in microseconds. */
   public final long adResumePositionUs;
-  /** The content duration in microseconds, if known. {@link C#TIME_UNSET} otherwise. */
+  /**
+   * The duration of the content period in microseconds, if known. {@link C#TIME_UNSET} otherwise.
+   */
   public final long contentDurationUs;
 
   /**

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/AdPlaybackStateFactory.java
Patch:
@@ -46,7 +46,7 @@ public static AdPlaybackState fromCuePoints(List<Float> cuePoints) {
       if (cuePoint == -1.0) {
         adGroupTimesUs[count - 1] = C.TIME_END_OF_SOURCE;
       } else {
-        adGroupTimesUs[adGroupIndex++] = (long) (C.MICROS_PER_SECOND * cuePoint);
+        adGroupTimesUs[adGroupIndex++] = Math.round(C.MICROS_PER_SECOND * cuePoint);
       }
     }
     // Cue points may be out of order, so sort them.

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSession.java
Patch:
@@ -467,7 +467,7 @@ private void onKeyResponse(Object request, Object response) {
       byte[] responseData = (byte[]) response;
       if (mode == DefaultDrmSessionManager.MODE_RELEASE) {
         mediaDrm.provideKeyResponse(Util.castNonNull(offlineLicenseKeySetId), responseData);
-        dispatchEvent(DrmSessionEventListener::onDrmKeysRestored);
+        dispatchEvent(DrmSessionEventListener::onDrmKeysRemoved);
       } else {
         byte[] keySetId = mediaDrm.provideKeyResponse(sessionId, responseData);
         if ((mode == DefaultDrmSessionManager.MODE_DOWNLOAD

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DefaultDashChunkSource.java
Patch:
@@ -789,7 +789,7 @@ private static ChunkExtractor createChunkExtractor(
           // All other text types are raw formats that do not need an extractor.
           return null;
         }
-      } else if (MimeTypes.isWebm(containerMimeType)) {
+      } else if (MimeTypes.isMatroska(containerMimeType)) {
         extractor = new MatroskaExtractor(MatroskaExtractor.FLAG_DISABLE_SEEK_FOR_CUES);
       } else {
         int flags = 0;

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java
Patch:
@@ -841,9 +841,8 @@ protected SegmentTemplate buildSegmentTemplate(
   }
 
   /**
-   * /**
    * Parses a single EventStream node in the manifest.
-   * <p>
+   *
    * @param xpp The current xml parser.
    * @return The {@link EventStream} parsed from this EventStream node.
    * @throws XmlPullParserException If there is any error parsing this node.

File: library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
Patch:
@@ -82,7 +82,7 @@ public int compareTo(Segment other) {
 
   /**
    * @param mediaItem The {@link MediaItem} to be downloaded.
-   * @param manifestParser A parser for the manifest.
+   * @param manifestParser A parser for manifests belonging to the media to be downloaded.
    * @param cacheDataSourceFactory A {@link CacheDataSource.Factory} for the cache into which the
    *     download will be written.
    * @param executor An {@link Executor} used to make requests for the media being downloaded.

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaPeriod.java
Patch:
@@ -734,13 +734,13 @@ private TrackOutput prepareTrackOutput(TrackId id) {
 
   private void setSeekMap(SeekMap seekMap) {
     this.seekMap = icyHeaders == null ? seekMap : new Unseekable(/* durationUs= */ C.TIME_UNSET);
-    if (!prepared) {
-      maybeFinishPrepare();
-    }
     durationUs = seekMap.getDurationUs();
     isLive = length == C.LENGTH_UNSET && seekMap.getDurationUs() == C.TIME_UNSET;
     dataType = isLive ? C.DATA_TYPE_MEDIA_PROGRESSIVE_LIVE : C.DATA_TYPE_MEDIA;
     listener.onSourceInfoRefreshed(durationUs, seekMap.isSeekable(), isLive);
+    if (!prepared) {
+      maybeFinishPrepare();
+    }
   }
 
   private void maybeFinishPrepare() {

File: library/core/src/main/java/com/google/android/exoplayer2/source/MediaPeriod.java
Patch:
@@ -239,8 +239,8 @@ long selectTracks(
    *
    * <p>This method is only called after the period has been prepared.
    *
-   * <p>A period may choose to discard buffered media so that it can be re-buffered in a different
-   * quality.
+   * <p>A period may choose to discard buffered media or cancel ongoing loads so that media can be
+   * re-buffered in a different quality.
    *
    * @param positionUs The current playback position in microseconds. If playback of this period has
    *     not yet started, the value will be the starting position in this period minus the duration

File: library/core/src/main/java/com/google/android/exoplayer2/source/SequenceableLoader.java
Patch:
@@ -66,8 +66,8 @@ interface Callback<T extends SequenceableLoader> {
   /**
    * Re-evaluates the buffer given the playback position.
    *
-   * <p>Re-evaluation may discard buffered media so that it can be re-buffered in a different
-   * quality.
+   * <p>Re-evaluation may discard buffered media or cancel ongoing loads so that media can be
+   * re-buffered in a different quality.
    *
    * @param positionUs The current playback position in microseconds. If playback of this period has
    *     not yet started, the value will be the starting position in this period minus the duration

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/ContainerMediaChunk.java
Patch:
@@ -138,7 +138,7 @@ public final void load() throws IOException {
     } finally {
       Util.closeQuietly(dataSource);
     }
-    loadCompleted = true;
+    loadCompleted = !loadCanceled;
   }
 
   /**

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaChunk.java
Patch:
@@ -349,7 +349,7 @@ public void load() throws IOException {
       if (!hasGapTag) {
         loadMedia();
       }
-      loadCompleted = true;
+      loadCompleted = !loadCanceled;
     }
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaSource.java
Patch:
@@ -276,7 +276,7 @@ public MediaPeriod createPeriod(MediaPeriodId id, Allocator allocator, long star
     return new ProgressiveMediaPeriod(
         playbackProperties.uri,
         dataSource,
-        extractorsFactory.createExtractors(playbackProperties.uri),
+        extractorsFactory,
         drmSessionManager,
         loadableLoadErrorHandlingPolicy,
         createEventDispatcher(id),

File: testutils/src/test/java/com/google/android/exoplayer2/testutil/TestUtilTest.java
Patch:
@@ -41,6 +41,6 @@ public void createRobolectricConditionVariable_blockWithTimeout_blocksForAtLeast
     long startTimeMs = System.currentTimeMillis();
     assertThat(conditionVariable.block(/* timeoutMs= */ 500)).isFalse();
     long endTimeMs = System.currentTimeMillis();
-    assertThat(endTimeMs - startTimeMs).isAtLeast(500);
+    assertThat(endTimeMs - startTimeMs).isAtLeast(500L);
   }
 }

File: library/common/src/main/java/com/google/android/exoplayer2/util/Util.java
Patch:
@@ -1676,6 +1676,7 @@ public static int inferContentType(String fileName) {
    * @param mimeType If not null, used to infer the type.
    * @return The content type.
    */
+  @C.ContentType
   public static int inferContentTypeWithMimeType(Uri uri, @Nullable String mimeType) {
     if (mimeType == null) {
       return Util.inferContentType(uri);

File: library/core/src/main/java/com/google/android/exoplayer2/text/cea/Cea608Decoder.java
Patch:
@@ -947,7 +947,7 @@ public Cue build(@Cue.AnchorType int forcedPositionAnchor) {
       int lineAnchor;
       int line;
       // Note: Row indices are in the range [1-15].
-      if (captionMode == CC_MODE_ROLL_UP || row > (BASE_ROW / 2)) {
+      if (row > (BASE_ROW / 2)) {
         lineAnchor = Cue.ANCHOR_TYPE_END;
         line = row - BASE_ROW;
         // Two line adjustments. The first is because line indices from the bottom of the window

File: library/core/src/test/java/com/google/android/exoplayer2/metadata/scte35/SpliceInfoDecoderTest.java
Patch:
@@ -200,7 +200,8 @@ private Metadata feedInputBuffer(byte[] data, long timeUs, long subsampleOffset)
   }
 
   private static long removePtsConversionPrecisionError(long timeUs, long offsetUs) {
-    return TimestampAdjuster.ptsToUs(TimestampAdjuster.usToPts(timeUs - offsetUs)) + offsetUs;
+    return TimestampAdjuster.ptsToUs(TimestampAdjuster.usToNonWrappedPts(timeUs - offsetUs))
+        + offsetUs;
   }
 
 }

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/WebvttExtractor.java
Patch:
@@ -176,8 +176,9 @@ private void processSample() throws ParserException {
 
     long firstCueTimeUs =
         WebvttParserUtil.parseTimestampUs(Assertions.checkNotNull(cueHeaderMatcher.group(1)));
-    long sampleTimeUs = timestampAdjuster.adjustTsTimestamp(
-        TimestampAdjuster.usToPts(firstCueTimeUs + tsTimestampUs - vttTimestampUs));
+    long sampleTimeUs =
+        timestampAdjuster.adjustTsTimestamp(
+            TimestampAdjuster.usToWrappedPts(firstCueTimeUs + tsTimestampUs - vttTimestampUs));
     long subsampleOffsetUs = sampleTimeUs - firstCueTimeUs;
     // Output the track.
     TrackOutput trackOutput = buildTrackOutput(subsampleOffsetUs);

File: library/core/src/main/java/com/google/android/exoplayer2/drm/FrameworkMediaDrm.java
Patch:
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer2.drm;
 
 import android.annotation.SuppressLint;
-import android.annotation.TargetApi;
 import android.media.DeniedByServerException;
 import android.media.MediaCryptoException;
 import android.media.MediaDrm;
@@ -45,7 +44,6 @@
 import java.util.UUID;
 
 /** An {@link ExoMediaDrm} implementation that wraps the framework {@link MediaDrm}. */
-@TargetApi(23)
 @RequiresApi(18)
 public final class FrameworkMediaDrm implements ExoMediaDrm {
 
@@ -254,7 +252,6 @@ public void restoreKeys(byte[] sessionId, byte[] keySetId) {
 
   @Override
   @Nullable
-  @TargetApi(28)
   public PersistableBundle getMetrics() {
     if (Util.SDK_INT < 28) {
       return null;

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ogg/OggPacket.java
Patch:
@@ -67,7 +67,7 @@ public boolean populate(ExtractorInput input) throws IOException {
     while (!populated) {
       if (currentSegmentIndex < 0) {
         // We're at the start of a page.
-        if (!pageHeader.populate(input, true)) {
+        if (!pageHeader.skipToNextPage(input) || !pageHeader.populate(input, /* quiet= */ true)) {
           return false;
         }
         int segmentIndex = 0;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioTrackPositionTracker.java
Patch:
@@ -206,6 +206,7 @@ public void setAudioTrack(
     hasData = false;
     stopTimestampUs = C.TIME_UNSET;
     forceResetWorkaroundTimeMs = C.TIME_UNSET;
+    lastLatencySampleTimeUs = 0;
     latencyUs = 0;
   }
 
@@ -239,7 +240,7 @@ public long getCurrentPositionUs(boolean sourceEnded) {
         positionUs = systemTimeUs + smoothedPlayheadOffsetUs;
       }
       if (!sourceEnded) {
-        positionUs -= latencyUs;
+        positionUs = Math.max(0, positionUs - latencyUs);
       }
       return positionUs;
     }
@@ -353,7 +354,7 @@ public boolean pause() {
   }
 
   /**
-   * Resets the position tracker. Should be called when the audio track previous passed to {@link
+   * Resets the position tracker. Should be called when the audio track previously passed to {@link
    * #setAudioTrack(AudioTrack, int, int, int)} is no longer in use.
    */
   public void reset() {

File: library/core/src/main/java/com/google/android/exoplayer2/audio/AudioTrackPositionTracker.java
Patch:
@@ -206,6 +206,7 @@ public void setAudioTrack(
     hasData = false;
     stopTimestampUs = C.TIME_UNSET;
     forceResetWorkaroundTimeMs = C.TIME_UNSET;
+    lastLatencySampleTimeUs = 0;
     latencyUs = 0;
   }
 
@@ -239,7 +240,7 @@ public long getCurrentPositionUs(boolean sourceEnded) {
         positionUs = systemTimeUs + smoothedPlayheadOffsetUs;
       }
       if (!sourceEnded) {
-        positionUs -= latencyUs;
+        positionUs = Math.max(0, positionUs - latencyUs);
       }
       return positionUs;
     }
@@ -353,7 +354,7 @@ public boolean pause() {
   }
 
   /**
-   * Resets the position tracker. Should be called when the audio track previous passed to {@link
+   * Resets the position tracker. Should be called when the audio track previously passed to {@link
    * #setAudioTrack(AudioTrack, int, int, int)} is no longer in use.
    */
   public void reset() {

File: library/core/src/test/java/com/google/android/exoplayer2/audio/DefaultAudioSinkTest.java
Patch:
@@ -63,7 +63,8 @@ public void setUp() {
         new DefaultAudioSink(
             AudioCapabilities.DEFAULT_AUDIO_CAPABILITIES,
             new DefaultAudioSink.DefaultAudioProcessorChain(teeAudioProcessor),
-            /* enableConvertHighResIntPcmToFloat= */ false);
+            /* enableFloatOutput= */ false,
+            /* enableOffload= */ false);
   }
 
   @Test

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
Patch:
@@ -1284,6 +1284,7 @@ public void cancel(boolean released) {
       if (!isCanceled) {
         isCanceled = true;
         downloader.cancel();
+        interrupt();
       }
     }
 

File: library/core/src/test/java/com/google/android/exoplayer2/source/ads/AdPlaybackStateTest.java
Patch:
@@ -64,7 +64,9 @@ public void testSetAdErrorBeforeAdCount() {
 
     assertThat(state.adGroups[0].uris[0]).isNull();
     assertThat(state.adGroups[0].states[0]).isEqualTo(AdPlaybackState.AD_STATE_ERROR);
+    assertThat(state.isAdInErrorState(/* adGroupIndex= */ 0, /* adIndexInAdGroup= */ 0)).isTrue();
     assertThat(state.adGroups[0].states[1]).isEqualTo(AdPlaybackState.AD_STATE_UNAVAILABLE);
+    assertThat(state.isAdInErrorState(/* adGroupIndex= */ 0, /* adIndexInAdGroup= */ 1)).isFalse();
   }
 
   @Test

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/AdsMediaSource.java
Patch:
@@ -271,7 +271,7 @@ protected void onChildSourceInfoRefreshed(
   }
 
   @Override
-  protected @Nullable MediaPeriodId getMediaPeriodIdForChildMediaPeriodId(
+  protected MediaPeriodId getMediaPeriodIdForChildMediaPeriodId(
       MediaPeriodId childId, MediaPeriodId mediaPeriodId) {
     // The child id for the content period is just DUMMY_CONTENT_MEDIA_PERIOD_ID. That's why we need
     // to forward the reported mediaPeriodId in this case.

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -120,7 +120,7 @@
   private int pendingPrepareCount;
   private SeekPosition pendingInitialSeekPosition;
   private long rendererPositionUs;
-  private int nextPendingMessageIndex;
+  private int nextPendingMessageIndexHint;
   private boolean deliverPendingMessageAtStartPositionRequired;
 
   public ExoPlayerImplInternal(
@@ -928,7 +928,6 @@ private void resetInternal(
         pendingMessageInfo.message.markAsProcessed(/* isDelivered= */ false);
       }
       pendingMessages.clear();
-      nextPendingMessageIndex = 0;
     }
     MediaPeriodId mediaPeriodId =
         resetPosition
@@ -1082,6 +1081,7 @@ private void maybeTriggerPendingMessages(long oldPeriodPositionUs, long newPerio
     // Correct next index if necessary (e.g. after seeking, timeline changes, or new messages)
     int currentPeriodIndex =
         playbackInfo.timeline.getIndexOfPeriod(playbackInfo.periodId.periodUid);
+    int nextPendingMessageIndex = Math.min(nextPendingMessageIndexHint, pendingMessages.size());
     PendingMessageInfo previousInfo =
         nextPendingMessageIndex > 0 ? pendingMessages.get(nextPendingMessageIndex - 1) : null;
     while (previousInfo != null
@@ -1127,6 +1127,7 @@ private void maybeTriggerPendingMessages(long oldPeriodPositionUs, long newPerio
               ? pendingMessages.get(nextPendingMessageIndex)
               : null;
     }
+    nextPendingMessageIndexHint = nextPendingMessageIndex;
   }
 
   private void ensureStopped(Renderer renderer) throws ExoPlaybackException {

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/TrackSelectionDialogBuilder.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.google.android.exoplayer2.ui;
 
-import android.app.AlertDialog;
 import android.app.Dialog;
 import android.content.Context;
 import android.view.LayoutInflater;
 import android.view.View;
 import androidx.annotation.Nullable;
+import androidx.appcompat.app.AlertDialog;
 import com.google.android.exoplayer2.source.TrackGroupArray;
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector.SelectionOverride;

File: library/core/src/main/java/com/google/android/exoplayer2/extractor/mp3/XingSeeker.java
Patch:
@@ -60,7 +60,7 @@
       return new XingSeeker(position, mpegAudioHeader.frameSize, durationUs);
     }
 
-    long dataSize = frame.readUnsignedIntToInt();
+    long dataSize = frame.readUnsignedInt();
     long[] tableOfContents = new long[100];
     for (int i = 0; i < 100; i++) {
       tableOfContents[i] = frame.readUnsignedByte();

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadService.java
Patch:
@@ -1022,7 +1022,7 @@ private void restartService() {
         try {
           Intent intent = getIntent(context, serviceClass, DownloadService.ACTION_INIT);
           context.startService(intent);
-        } catch (IllegalArgumentException e) {
+        } catch (IllegalStateException e) {
           // The process is classed as idle by the platform. Starting a background service is not
           // allowed in this state.
           Log.w(TAG, "Failed to restart DownloadService (process is idle).");

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
Patch:
@@ -691,13 +691,13 @@ private void openNextSource(boolean checkCache) throws IOException {
       nextSpan = null;
     } else if (blockOnCache) {
       try {
-        nextSpan = cache.startReadWrite(key, readPosition);
+        nextSpan = cache.startReadWrite(key, readPosition, bytesRemaining);
       } catch (InterruptedException e) {
         Thread.currentThread().interrupt();
         throw new InterruptedIOException();
       }
     } else {
-      nextSpan = cache.startReadWriteNonBlocking(key, readPosition);
+      nextSpan = cache.startReadWriteNonBlocking(key, readPosition, bytesRemaining);
     }
 
     DataSpec nextDataSpec;

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CachedContentIndex.java
Patch:
@@ -273,7 +273,7 @@ public String getKeyForId(int id) {
    */
   public void maybeRemove(String key) {
     @Nullable CachedContent cachedContent = keyToContent.get(key);
-    if (cachedContent != null && cachedContent.isEmpty() && !cachedContent.isLocked()) {
+    if (cachedContent != null && cachedContent.isEmpty() && cachedContent.isFullyUnlocked()) {
       keyToContent.remove(key);
       int id = cachedContent.id;
       boolean neverStored = newIds.get(id);

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CacheDataSourceTest.java
Patch:
@@ -384,7 +384,7 @@ public void switchToCacheSourceWithNonBlockingCacheDataSource() throws Exception
         .appendReadData(1);
 
     // Lock the content on the cache.
-    CacheSpan cacheSpan = cache.startReadWriteNonBlocking(defaultCacheKey, 0);
+    CacheSpan cacheSpan = cache.startReadWriteNonBlocking(defaultCacheKey, 0, C.LENGTH_UNSET);
     assertThat(cacheSpan).isNotNull();
     assertThat(cacheSpan.isHoleSpan()).isTrue();
 

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CachedContentIndexTest.java
Patch:
@@ -301,7 +301,7 @@ public void cantRemoveNotEmptyCachedContent() throws Exception {
   public void cantRemoveLockedCachedContent() {
     CachedContentIndex index = newInstance();
     CachedContent cachedContent = index.getOrAdd("key1");
-    cachedContent.setLocked(true);
+    cachedContent.lockRange(0, 1);
 
     index.maybeRemove(cachedContent.key);
 

File: library/common/src/main/java/com/google/android/exoplayer2/util/ParsableByteArray.java
Patch:
@@ -29,6 +29,8 @@ public final class ParsableByteArray {
   public byte[] data;
 
   private int position;
+
+  // TODO(internal b/147657250): Enforce this limit on all read methods.
   private int limit;
 
   /** Creates a new instance that initially has no backing data. */

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/rawcc/RawCcExtractor.java
Patch:
@@ -66,8 +66,8 @@ public RawCcExtractor(Format format) {
   public void init(ExtractorOutput output) {
     output.seekMap(new SeekMap.Unseekable(C.TIME_UNSET));
     trackOutput = output.track(0, C.TRACK_TYPE_TEXT);
-    output.endTracks();
     trackOutput.format(format);
+    output.endTracks();
   }
 
   @Override

File: testutils/src/test/java/com/google/android/exoplayer2/testutil/TestUtilTest.java
Patch:
@@ -30,7 +30,7 @@ public class TestUtilTest {
   public void createRobolectricConditionVariable_blockWithTimeout_timesOut()
       throws InterruptedException {
     ConditionVariable conditionVariable = TestUtil.createRobolectricConditionVariable();
-    assertThat(conditionVariable.block(/* timeout= */ 1)).isFalse();
+    assertThat(conditionVariable.block(/* timeoutMs= */ 1)).isFalse();
     assertThat(conditionVariable.isOpen()).isFalse();
   }
 
@@ -39,7 +39,7 @@ public void createRobolectricConditionVariable_blockWithTimeout_blocksForAtLeast
       throws InterruptedException {
     ConditionVariable conditionVariable = TestUtil.createRobolectricConditionVariable();
     long startTimeMs = System.currentTimeMillis();
-    assertThat(conditionVariable.block(/* timeout= */ 500)).isFalse();
+    assertThat(conditionVariable.block(/* timeoutMs= */ 500)).isFalse();
     long endTimeMs = System.currentTimeMillis();
     assertThat(endTimeMs - startTimeMs).isAtLeast(500);
   }

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -477,7 +477,9 @@ private ImaAdsLoader(
     adCallbacks = new ArrayList<>(/* initialCapacity= */ 1);
     adDisplayContainer = imaFactory.createAdDisplayContainer();
     adDisplayContainer.setPlayer(/* videoAdPlayer= */ this);
-    adsLoader = imaFactory.createAdsLoader(context, imaSdkSettings, adDisplayContainer);
+    adsLoader =
+        imaFactory.createAdsLoader(
+            context.getApplicationContext(), imaSdkSettings, adDisplayContainer);
     adsLoader.addAdErrorListener(/* adErrorListener= */ this);
     adsLoader.addAdsLoadedListener(/* adsLoadedListener= */ this);
     fakeContentProgressElapsedRealtimeMs = C.TIME_UNSET;

File: library/core/src/main/java/com/google/android/exoplayer2/source/ProgressiveMediaPeriod.java
Patch:
@@ -679,7 +679,8 @@ private TrackOutput prepareTrackOutput(TrackId id) {
         return sampleQueues[i];
       }
     }
-    SampleQueue trackOutput = new SampleQueue(allocator, drmSessionManager);
+    SampleQueue trackOutput = new SampleQueue(
+        allocator, /* playbackLooper= */ handler.getLooper(), drmSessionManager);
     trackOutput.setUpstreamFormatChangeListener(this);
     @NullableType
     TrackId[] sampleQueueTrackIds = Arrays.copyOf(this.sampleQueueTrackIds, trackCount + 1);

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/AdsMediaSource.java
Patch:
@@ -18,6 +18,7 @@
 import android.net.Uri;
 import android.os.Handler;
 import android.os.Looper;
+import android.os.SystemClock;
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
@@ -358,7 +359,7 @@ public void onAdLoadError(final AdLoadException error, DataSpec dataSpec) {
               dataSpec.uri,
               /* responseHeaders= */ Collections.emptyMap(),
               C.DATA_TYPE_AD,
-              C.TRACK_TYPE_UNKNOWN,
+              /* elapsedRealtimeMs= */ SystemClock.elapsedRealtime(),
               /* loadDurationMs= */ 0,
               /* bytesLoaded= */ 0,
               error,

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DashMediaPeriodTest.java
Patch:
@@ -165,6 +165,7 @@ private static AdaptationSet createAdaptationSet(
         trackType,
         Arrays.asList(representations),
         /* accessibilityDescriptors= */ Collections.emptyList(),
+        /* essentialProperties= */ Collections.emptyList(),
         descriptor == null ? Collections.emptyList() : Collections.singletonList(descriptor));
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecInfo.java
Patch:
@@ -573,7 +573,9 @@ private static boolean areSizeAndRateSupportedV21(VideoCapabilities capabilities
     width = alignedSize.x;
     height = alignedSize.y;
 
-    if (frameRate == Format.NO_VALUE || frameRate <= 0) {
+    // VideoCapabilities.areSizeAndRateSupported incorrectly returns false if frameRate < 1 on some
+    // versions of Android, so we only check the size in this case [Internal ref: b/153940404].
+    if (frameRate == Format.NO_VALUE || frameRate < 1) {
       return capabilities.isSizeSupported(width, height);
     } else {
       // The signaled frame rate may be slightly higher than the actual frame rate, so we take the

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/TrackSelectionDialogBuilder.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.google.android.exoplayer2.ui;
 
-import android.app.AlertDialog;
 import android.app.Dialog;
 import android.content.Context;
 import android.view.LayoutInflater;
 import android.view.View;
 import androidx.annotation.Nullable;
+import androidx.appcompat.app.AlertDialog;
 import com.google.android.exoplayer2.source.TrackGroupArray;
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector.SelectionOverride;

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.google.android.exoplayer2.demo;
 
-import android.app.Application;
+import androidx.multidex.MultiDexApplication;
 import com.google.android.exoplayer2.DefaultRenderersFactory;
 import com.google.android.exoplayer2.RenderersFactory;
 import com.google.android.exoplayer2.database.DatabaseProvider;
@@ -40,7 +40,7 @@
 /**
  * Placeholder application to facilitate overriding Application methods for debugging and testing.
  */
-public class DemoApplication extends Application {
+public class DemoApplication extends MultiDexApplication {
 
   public static final String DOWNLOAD_NOTIFICATION_CHANNEL_ID = "download_channel";
 

File: library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultBandwidthMeter.java
Patch:
@@ -203,10 +203,11 @@ private static SparseArray<Long> getInitialBitrateEstimatesForCountry(String cou
       result.append(C.NETWORK_TYPE_2G, DEFAULT_INITIAL_BITRATE_ESTIMATES_2G[groupIndices[1]]);
       result.append(C.NETWORK_TYPE_3G, DEFAULT_INITIAL_BITRATE_ESTIMATES_3G[groupIndices[2]]);
       result.append(C.NETWORK_TYPE_4G, DEFAULT_INITIAL_BITRATE_ESTIMATES_4G[groupIndices[3]]);
-      // Assume default Wifi bitrate for Ethernet and 5G to prevent using the slower fallback.
+      // Assume default Wifi and 4G bitrate for Ethernet and 5G, respectively, to prevent using the
+      // slower fallback.
       result.append(
           C.NETWORK_TYPE_ETHERNET, DEFAULT_INITIAL_BITRATE_ESTIMATES_WIFI[groupIndices[0]]);
-      result.append(C.NETWORK_TYPE_5G, DEFAULT_INITIAL_BITRATE_ESTIMATES_WIFI[groupIndices[0]]);
+      result.append(C.NETWORK_TYPE_5G, DEFAULT_INITIAL_BITRATE_ESTIMATES_4G[groupIndices[3]]);
       return result;
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/ChunkSampleStream.java
Patch:
@@ -635,7 +635,7 @@ public void reevaluateBuffer(long positionUs) {
         break;
       }
     }
-    if (newQueueSize == currentQueueSize) {
+    if (newQueueSize >= currentQueueSize) {
       return;
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
Patch:
@@ -839,7 +839,7 @@ private static boolean codecNeedsEosBufferTimestampWorkaround(String codecName)
             || Util.DEVICE.startsWith("ms01"));
   }
 
-  @C.Encoding
+  @C.PcmEncoding
   private static int getPcmEncoding(Format format) {
     // If the format is anything other than PCM then we assume that the audio decoder will output
     // 16-bit PCM.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/CeaUtil.java
Patch:
@@ -33,8 +33,8 @@ public final class CeaUtil {
   private static final int PROVIDER_CODE_DIRECTV = 0x2F;
 
   /**
-   * Consumes the unescaped content of an SEI NAL unit, writing the content of any CEA-608 messages
-   * as samples to all of the provided outputs.
+   * Consumes the unescaped content of an SEI NAL unit, writing the content of any CEA-608/708
+   * messages as samples to all of the provided outputs.
    *
    * @param presentationTimeUs The presentation time in microseconds for any samples.
    * @param seiBuffer The unescaped SEI NAL unit data, excluding the NAL unit start code and type.

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/SeiReader.java
Patch:
@@ -27,7 +27,7 @@
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import java.util.List;
 
-/** Consumes SEI buffers, outputting contained CEA-608 messages to a {@link TrackOutput}. */
+/** Consumes SEI buffers, outputting contained CEA-608/708 messages to a {@link TrackOutput}. */
 public final class SeiReader {
 
   private final List<Format> closedCaptionFormats;

File: library/core/src/test/java/com/google/android/exoplayer2/audio/MediaCodecAudioRendererTest.java
Patch:
@@ -28,6 +28,7 @@
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.RendererCapabilities;
 import com.google.android.exoplayer2.RendererConfiguration;
+import com.google.android.exoplayer2.drm.DrmSessionManager;
 import com.google.android.exoplayer2.mediacodec.MediaCodecInfo;
 import com.google.android.exoplayer2.mediacodec.MediaCodecSelector;
 import com.google.android.exoplayer2.mediacodec.MediaCodecUtil.DecoderQueryException;
@@ -111,6 +112,7 @@ public void render_configuresAudioSink() throws Exception {
     FakeSampleStream fakeSampleStream =
         new FakeSampleStream(
             /* format= */ AUDIO_AAC,
+            DrmSessionManager.DUMMY,
             /* eventDispatcher= */ null,
             /* firstSampleTimeUs= */ 0,
             /* timeUsIncrement= */ 50,

File: library/core/src/test/java/com/google/android/exoplayer2/metadata/MetadataRendererTest.java
Patch:
@@ -22,6 +22,7 @@
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.Format;
+import com.google.android.exoplayer2.drm.DrmSessionManager;
 import com.google.android.exoplayer2.metadata.emsg.EventMessage;
 import com.google.android.exoplayer2.metadata.emsg.EventMessageEncoder;
 import com.google.android.exoplayer2.metadata.id3.TextInformationFrame;
@@ -144,6 +145,7 @@ private static List<Metadata> runRenderer(byte[] input) throws ExoPlaybackExcept
         new Format[] {EMSG_FORMAT},
         new FakeSampleStream(
             EMSG_FORMAT,
+            DrmSessionManager.DUMMY,
             /* eventDispatcher= */ null,
             /* firstSampleTimeUs= */ 0,
             /* timeUsIncrement= */ 0,

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeAdaptiveMediaSource.java
Patch:
@@ -18,6 +18,7 @@
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.Timeline.Period;
+import com.google.android.exoplayer2.drm.DrmSessionManager;
 import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.source.MediaSourceEventListener.EventDispatcher;
 import com.google.android.exoplayer2.source.TrackGroupArray;
@@ -37,7 +38,7 @@ public FakeAdaptiveMediaSource(
       Timeline timeline,
       TrackGroupArray trackGroupArray,
       FakeChunkSource.Factory chunkSourceFactory) {
-    super(timeline, trackGroupArray);
+    super(timeline, DrmSessionManager.DUMMY, trackGroupArray);
     this.chunkSourceFactory = chunkSourceFactory;
   }
 
@@ -46,6 +47,7 @@ protected FakeMediaPeriod createFakeMediaPeriod(
       MediaPeriodId id,
       TrackGroupArray trackGroupArray,
       Allocator allocator,
+      DrmSessionManager drmSessionManager,
       EventDispatcher eventDispatcher,
       @Nullable TransferListener transferListener) {
     Period period = Util.castNonNull(getTimeline()).getPeriodByUid(id.periodUid, new Period());

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp3/XingSeeker.java
Patch:
@@ -64,7 +64,7 @@ public static XingSeeker create(
       return new XingSeeker(position, mpegAudioHeader.frameSize, durationUs);
     }
 
-    long dataSize = frame.readUnsignedIntToInt();
+    long dataSize = frame.readUnsignedInt();
     long[] tableOfContents = new long[100];
     for (int i = 0; i < 100; i++) {
       tableOfContents[i] = frame.readUnsignedByte();

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/Extractor.java
Patch:
@@ -96,7 +96,7 @@ public interface Extractor {
    * @param seekPosition If {@link #RESULT_SEEK} is returned, this holder is updated to hold the
    *     position of the required data.
    * @return One of the {@code RESULT_} values defined in this interface.
-   * @throws IOException If an error occurred reading from the input.
+   * @throws IOException If an error occurred reading from or parsing the input.
    */
   @ReadResult
   int read(ExtractorInput input, PositionHolder seekPosition) throws IOException;

File: library/core/src/test/java/com/google/android/exoplayer2/source/ads/AdPlaybackStateTest.java
Patch:
@@ -64,7 +64,9 @@ public void setAdErrorBeforeAdCount() {
 
     assertThat(state.adGroups[0].uris[0]).isNull();
     assertThat(state.adGroups[0].states[0]).isEqualTo(AdPlaybackState.AD_STATE_ERROR);
+    assertThat(state.isAdInErrorState(/* adGroupIndex= */ 0, /* adIndexInAdGroup= */ 0)).isTrue();
     assertThat(state.adGroups[0].states[1]).isEqualTo(AdPlaybackState.AD_STATE_UNAVAILABLE);
+    assertThat(state.isAdInErrorState(/* adGroupIndex= */ 0, /* adIndexInAdGroup= */ 1)).isFalse();
   }
 
   @Test

File: library/core/src/test/java/com/google/android/exoplayer2/analytics/DefaultPlaybackSessionManagerTest.java
Patch:
@@ -1092,6 +1092,9 @@ private static EventTime createEventTime(
         windowIndex,
         mediaPeriodId,
         /* eventPlaybackPositionMs= */ 0,
+        timeline,
+        windowIndex,
+        mediaPeriodId,
         /* currentPlaybackPositionMs= */ 0,
         /* totalBufferedDurationMs= */ 0);
   }

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/SubtitleView.java
Patch:
@@ -201,7 +201,6 @@ private <T extends View & Output> void setView(T view) {
     innerSubtitleView = view;
     output = view;
     addView(view);
-    updateOutput();
   }
 
   /**

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerFactory.java
Patch:
@@ -258,6 +258,8 @@ public static ExoPlayer newInstance(
         bandwidthMeter,
         /* analyticsCollector= */ null,
         /* useLazyPreparation= */ true,
+        SeekParameters.DEFAULT,
+        /* pauseAtEndOfMediaItems= */ false,
         Clock.DEFAULT,
         applicationLooper);
   }

File: library/core/src/main/java/com/google/android/exoplayer2/drm/LocalMediaDrmCallback.java
Patch:
@@ -18,7 +18,6 @@
 import com.google.android.exoplayer2.drm.ExoMediaDrm.KeyRequest;
 import com.google.android.exoplayer2.drm.ExoMediaDrm.ProvisionRequest;
 import com.google.android.exoplayer2.util.Assertions;
-import java.io.IOException;
 import java.util.UUID;
 
 /**
@@ -39,12 +38,12 @@ public LocalMediaDrmCallback(byte[] keyResponse) {
   }
 
   @Override
-  public byte[] executeProvisionRequest(UUID uuid, ProvisionRequest request) throws IOException {
+  public byte[] executeProvisionRequest(UUID uuid, ProvisionRequest request) {
     throw new UnsupportedOperationException();
   }
 
   @Override
-  public byte[] executeKeyRequest(UUID uuid, KeyRequest request) throws Exception {
+  public byte[] executeKeyRequest(UUID uuid, KeyRequest request) {
     return keyResponse;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/decoder/Decoder.java
Patch:
@@ -24,7 +24,7 @@
  * @param <O> The type of buffer output from the decoder.
  * @param <E> The type of exception thrown from the decoder.
  */
-public interface Decoder<I, O, E extends Exception> {
+public interface Decoder<I, O, E extends DecoderException> {
 
   /**
    * Returns the name of the decoder.

File: library/core/src/main/java/com/google/android/exoplayer2/decoder/SimpleDecoder.java
Patch:
@@ -27,7 +27,7 @@
  */
 @SuppressWarnings("UngroupedOverloads")
 public abstract class SimpleDecoder<
-        I extends DecoderInputBuffer, O extends OutputBuffer, E extends Exception>
+        I extends DecoderInputBuffer, O extends OutputBuffer, E extends DecoderException>
     implements Decoder<I, O, E> {
 
   private final Thread decodeThread;

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -325,7 +325,7 @@ private void initializePlayer() {
       player =
           new SimpleExoPlayer.Builder(/* context= */ this, renderersFactory)
               .setMediaSourceFactory(
-                  new DefaultMediaSourceFactory(
+                  DefaultMediaSourceFactory.newInstance(
                       /* context= */ this, dataSourceFactory, new AdSupportProvider()))
               .setTrackSelector(trackSelector)
               .build();

File: library/core/src/test/java/com/google/android/exoplayer2/mediacodec/BatchBufferTest.java
Patch:
@@ -175,7 +175,7 @@ public void commitNextAccessUnit_whenAccessUnitIsHugeAndBatchBufferNotEmpty_isMa
 
   @Test
   public void batchWasConsumed_whenNotEmpty_isEmpty() {
-    fillBatchBuffer(batchBuffer);
+    batchBuffer.commitNextAccessUnit();
 
     batchBuffer.batchWasConsumed();
 

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
Patch:
@@ -417,6 +417,9 @@ private PlaylistHolder readEntry(JsonReader reader, boolean insidePlaylist) thro
           case "drm_multi_session":
             mediaItem.setDrmMultiSession(reader.nextBoolean());
             break;
+          case "drm_force_default_license_uri":
+            mediaItem.setDrmForceDefaultLicenseUri(reader.nextBoolean());
+            break;
           case "playlist":
             Assertions.checkState(!insidePlaylist, "Invalid nesting of playlists");
             children = new ArrayList<>();

File: library/common/src/main/java/com/google/android/exoplayer2/metadata/Metadata.java
Patch:
@@ -63,8 +63,7 @@ public Metadata(Entry... entries) {
    * @param entries The metadata entries.
    */
   public Metadata(List<? extends Entry> entries) {
-    this.entries = new Entry[entries.size()];
-    entries.toArray(this.entries);
+    this.entries = entries.toArray(new Entry[0]);
   }
 
   /* package */ Metadata(Parcel in) {

File: extensions/av1/src/main/java/com/google/android/exoplayer2/ext/av1/Gav1Decoder.java
Patch:
@@ -20,6 +20,7 @@
 import android.view.Surface;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.decoder.DecoderInputBuffer;
 import com.google.android.exoplayer2.decoder.SimpleDecoder;
 import com.google.android.exoplayer2.util.Util;
 import com.google.android.exoplayer2.video.VideoDecoderInputBuffer;
@@ -94,7 +95,7 @@ public void setOutputMode(@C.VideoOutputMode int outputMode) {
 
   @Override
   protected VideoDecoderInputBuffer createInputBuffer() {
-    return new VideoDecoderInputBuffer();
+    return new VideoDecoderInputBuffer(DecoderInputBuffer.BUFFER_REPLACEMENT_MODE_DIRECT);
   }
 
   @Override

File: extensions/ffmpeg/src/main/java/com/google/android/exoplayer2/ext/ffmpeg/FfmpegAudioRenderer.java
Patch:
@@ -125,7 +125,7 @@ protected FfmpegAudioDecoder createDecoder(Format format, @Nullable ExoMediaCryp
         format.maxInputSize != Format.NO_VALUE ? format.maxInputSize : DEFAULT_INPUT_BUFFER_SIZE;
     decoder =
         new FfmpegAudioDecoder(
-            NUM_BUFFERS, NUM_BUFFERS, initialInputBufferSize, format, shouldUseFloatOutput(format));
+            format, NUM_BUFFERS, NUM_BUFFERS, initialInputBufferSize, shouldUseFloatOutput(format));
     TraceUtil.endSection();
     return decoder;
   }

File: extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/VpxDecoder.java
Patch:
@@ -19,6 +19,7 @@
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.decoder.CryptoInfo;
+import com.google.android.exoplayer2.decoder.DecoderInputBuffer;
 import com.google.android.exoplayer2.decoder.SimpleDecoder;
 import com.google.android.exoplayer2.drm.DecryptionException;
 import com.google.android.exoplayer2.drm.ExoMediaCrypto;
@@ -97,7 +98,7 @@ public void setOutputMode(@C.VideoOutputMode int outputMode) {
 
   @Override
   protected VideoDecoderInputBuffer createInputBuffer() {
-    return new VideoDecoderInputBuffer();
+    return new VideoDecoderInputBuffer(DecoderInputBuffer.BUFFER_REPLACEMENT_MODE_DIRECT);
   }
 
   @Override

File: library/common/src/main/java/com/google/android/exoplayer2/C.java
Patch:
@@ -963,7 +963,7 @@ private C() {}
 
   /**
    * Mode specifying whether the player should hold a WakeLock and a WifiLock. One of {@link
-   * #WAKE_MODE_NONE}, {@link #WAKE_MODE_LOCAL} and {@link #WAKE_MODE_NETWORK}.
+   * #WAKE_MODE_NONE}, {@link #WAKE_MODE_LOCAL} or {@link #WAKE_MODE_NETWORK}.
    */
   @Documented
   @Retention(RetentionPolicy.SOURCE)

File: library/core/src/test/java/com/google/android/exoplayer2/video/DecoderVideoRendererTest.java
Patch:
@@ -32,6 +32,7 @@
 import com.google.android.exoplayer2.RendererCapabilities;
 import com.google.android.exoplayer2.RendererConfiguration;
 import com.google.android.exoplayer2.decoder.DecoderException;
+import com.google.android.exoplayer2.decoder.DecoderInputBuffer;
 import com.google.android.exoplayer2.decoder.SimpleDecoder;
 import com.google.android.exoplayer2.drm.ExoMediaCrypto;
 import com.google.android.exoplayer2.testutil.FakeSampleStream;
@@ -141,7 +142,8 @@ protected void onQueueInputBuffer(VideoDecoderInputBuffer buffer) {
                 new VideoDecoderInputBuffer[10], new VideoDecoderOutputBuffer[10]) {
               @Override
               protected VideoDecoderInputBuffer createInputBuffer() {
-                return new VideoDecoderInputBuffer();
+                return new VideoDecoderInputBuffer(
+                    DecoderInputBuffer.BUFFER_REPLACEMENT_MODE_DIRECT);
               }
 
               @Override

File: library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CacheDataSourceTest.java
Patch:
@@ -75,7 +75,7 @@ public void setUp() throws Exception {
     boundedDataSpec = buildDataSpec(/* unbounded= */ false, /* key= */ null);
     unboundedDataSpecWithKey = buildDataSpec(/* unbounded= */ true, DATASPEC_KEY);
     boundedDataSpecWithKey = buildDataSpec(/* unbounded= */ false, DATASPEC_KEY);
-    defaultCacheKey = CacheUtil.DEFAULT_CACHE_KEY_FACTORY.buildCacheKey(unboundedDataSpec);
+    defaultCacheKey = CacheKeyFactory.DEFAULT.buildCacheKey(unboundedDataSpec);
     customCacheKey = "customKey." + defaultCacheKey;
     cacheKeyFactory = dataSpec -> customCacheKey;
 

File: library/core/src/main/java/com/google/android/exoplayer2/util/EventLogger.java
Patch:
@@ -553,7 +553,7 @@ private String getEventTimeString(EventTime eventTime) {
     return "eventTime="
         + getTimeString(eventTime.realtimeMs - startTimeMs)
         + ", mediaPos="
-        + getTimeString(eventTime.currentPlaybackPositionMs)
+        + getTimeString(eventTime.eventPlaybackPositionMs)
         + ", "
         + windowPeriodString;
   }

File: library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlNode.java
Patch:
@@ -380,7 +380,9 @@ private void applyStyleToOutput(
     }
     if (resolvedStyle != null) {
       TtmlRenderUtil.applyStylesToSpan(text, start, end, resolvedStyle, parent);
-      regionOutput.setVerticalType(resolvedStyle.getVerticalType());
+      regionOutput
+          .setTextAlignment(resolvedStyle.getTextAlign())
+          .setVerticalType(resolvedStyle.getVerticalType());
     }
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -629,6 +629,7 @@ public boolean handleBuffer(
 
     if (inputBuffer == null) {
       // We are seeing this buffer for the first time.
+      Assertions.checkArgument(buffer.order() == ByteOrder.LITTLE_ENDIAN);
       if (!buffer.hasRemaining()) {
         // The buffer is empty.
         return true;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -629,7 +629,6 @@ public boolean handleBuffer(
 
     if (inputBuffer == null) {
       // We are seeing this buffer for the first time.
-      Assertions.checkArgument(buffer.order() == ByteOrder.LITTLE_ENDIAN);
       if (!buffer.hasRemaining()) {
         // The buffer is empty.
         return true;

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -629,6 +629,7 @@ public boolean handleBuffer(
 
     if (inputBuffer == null) {
       // We are seeing this buffer for the first time.
+      Assertions.checkArgument(buffer.order() == ByteOrder.LITTLE_ENDIAN);
       if (!buffer.hasRemaining()) {
         // The buffer is empty.
         return true;

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
Patch:
@@ -489,7 +489,8 @@ public DrmSession acquireSession(
         final MissingSchemeDataException error = new MissingSchemeDataException(uuid);
         if (eventDispatcher != null) {
           eventDispatcher.dispatch(
-              (listener, windowIndex, mediaPeriodId) -> listener.onDrmSessionManagerError(error),
+              (listener, windowIndex, mediaPeriodId) ->
+                  listener.onDrmSessionManagerError(windowIndex, mediaPeriodId, error),
               DrmSessionEventListener.class);
         }
         return new ErrorStateDrmSession(new DrmSessionException(error));

File: library/core/src/main/java/com/google/android/exoplayer2/video/VideoDecoderOutputBuffer.java
Patch:
@@ -33,7 +33,7 @@ public class VideoDecoderOutputBuffer extends OutputBuffer {
   //     ../../../../../../../../../../extensions/vp9/src/main/jni/vpx_jni.cc
   // )
 
-  /** Decoder private data. */
+  /** Decoder private data. Used from native code. */
   public int decoderPrivate;
 
   /** Output mode. */

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/SpannedToHtmlConverter.java
Patch:
@@ -148,7 +148,7 @@ private static String getOpeningTag(Object span, float displayDensity) {
       return Util.formatInvariant("<span style='font-size:%.2fpx;'>", sizeCssPx);
     } else if (span instanceof RelativeSizeSpan) {
       return Util.formatInvariant(
-          "<span style='font-size:%.2f%%;'>", ((RelativeSizeSpan) span).getSizeChange());
+          "<span style='font-size:%.2f%%;'>", ((RelativeSizeSpan) span).getSizeChange() * 100);
     } else if (span instanceof TypefaceSpan) {
       @Nullable String fontFamily = ((TypefaceSpan) span).getFamily();
       return fontFamily != null

File: library/ui/src/test/java/com/google/android/exoplayer2/ui/SpannedToHtmlConverterTest.java
Patch:
@@ -135,7 +135,7 @@ public void convert_supportsAbsoluteSizeSpan_dp() {
   public void convert_supportsRelativeSizeSpan() {
     SpannableString spanned = new SpannableString("String with 10% section");
     spanned.setSpan(
-        new RelativeSizeSpan(/* proportion= */ 10),
+        new RelativeSizeSpan(/* proportion= */ 0.1f),
         "String with ".length(),
         "String with 10%".length(),
         Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);

File: library/core/src/test/java/com/google/android/exoplayer2/ExoPlayerTest.java
Patch:
@@ -3641,7 +3641,8 @@ public boolean shouldStartPlayback(
 
   @Test
   public void
-      nextLoadPositionExceedingLoadControlMaxBuffer_whileCurrentLoadInProgress_doesNotThrowException() {
+      nextLoadPositionExceedingLoadControlMaxBuffer_whileCurrentLoadInProgress_doesNotThrowException()
+          throws Exception {
     long maxBufferUs = 2 * C.MICROS_PER_SECOND;
     LoadControl loadControlWithMaxBufferUs =
         new DefaultLoadControl() {
@@ -3706,7 +3707,7 @@ public boolean isReady() {
 
     // Wait until the MediaSource is prepared, i.e. returned its timeline, and at least one
     // iteration of doSomeWork after this was run.
-    TestExoPlayer.runUntilTimelineChanged(player, /* expectedTimeline= */ null);
+    TestExoPlayer.runUntilTimelineChanged(player);
     TestExoPlayer.runUntilPendingCommandsAreFullyHandled(player);
 
     assertThat(player.getPlayerError()).isNull();

File: library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java
Patch:
@@ -1630,7 +1630,7 @@ public int outputSampleEncryptionData(int sampleSize, int clearHeaderSize) {
         // clearDataSize = clearHeaderSize (unsigned short)
         scratch.data[2] = (byte) ((clearHeaderSize >> 8) & 0xFF);
         scratch.data[3] = (byte) (clearHeaderSize & 0xFF);
-        // encryptedDataSize = sampleSize (unsigned short)
+        // encryptedDataSize = sampleSize (unsigned int)
         scratch.data[4] = (byte) ((sampleSize >> 24) & 0xFF);
         scratch.data[5] = (byte) ((sampleSize >> 16) & 0xFF);
         scratch.data[6] = (byte) ((sampleSize >> 8) & 0xFF);

File: extensions/cronet/src/test/java/com/google/android/exoplayer2/ext/cronet/CronetDataSourceTest.java
Patch:
@@ -156,7 +156,7 @@ public String getUrl() {
 
       @Override
       public List<String> getUrlChain() {
-        return null;
+        return Collections.singletonList(url);
       }
 
       @Override

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
Patch:
@@ -1284,8 +1284,6 @@ public void cancel(boolean released) {
       if (!isCanceled) {
         isCanceled = true;
         downloader.cancel();
-        // TODO - This will need propagating deeper as soon as we start using additional threads.
-        interrupt();
       }
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
Patch:
@@ -1019,7 +1019,7 @@ private void syncRemovingDownload(@Nullable Task activeTask, Download download)
           // Cancel the downloading task.
           activeTask.cancel(/* released= */ false);
         }
-        // The activeTask is either a remove task, or a downloading task that we just cancelled. In
+        // The activeTask is either a remove task, or a downloading task that we just canceled. In
         // the latter case we need to wait for the task to stop before we start a remove task.
         return;
       }
@@ -1284,6 +1284,7 @@ public void cancel(boolean released) {
       if (!isCanceled) {
         isCanceled = true;
         downloader.cancel();
+        // TODO - This will need propagating deeper as soon as we start using additional threads.
         interrupt();
       }
     }

File: library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java
Patch:
@@ -73,8 +73,7 @@ public ProgressiveDownloader(
   }
 
   @Override
-  public void download(@Nullable ProgressListener progressListener)
-      throws InterruptedException, IOException {
+  public void download(@Nullable ProgressListener progressListener) throws IOException {
     @Nullable PriorityTaskManager priorityTaskManager = dataSource.getUpstreamPriorityTaskManager();
     if (priorityTaskManager != null) {
       priorityTaskManager.add(C.PRIORITY_DOWNLOAD);

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadService.java
Patch:
@@ -1022,7 +1022,7 @@ private void restartService() {
         try {
           Intent intent = getIntent(context, serviceClass, DownloadService.ACTION_INIT);
           context.startService(intent);
-        } catch (IllegalArgumentException e) {
+        } catch (IllegalStateException e) {
           // The process is classed as idle by the platform. Starting a background service is not
           // allowed in this state.
           Log.w(TAG, "Failed to restart DownloadService (process is idle).");

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/DefaultHlsPlaylistTracker.java
Patch:
@@ -545,6 +545,8 @@ public void onLoadCompleted(
         eventDispatcher.loadCompleted(loadEventInfo, C.DATA_TYPE_MANIFEST);
       } else {
         playlistError = new ParserException("Loaded playlist has unexpected type.");
+        eventDispatcher.loadError(
+            loadEventInfo, C.DATA_TYPE_MANIFEST, playlistError, /* wasCanceled= */ true);
       }
     }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/chunk/ChunkSampleStream.java
Patch:
@@ -414,7 +414,7 @@ public void onLoadCompleted(Chunk loadable, long elapsedRealtimeMs, long loadDur
             elapsedRealtimeMs,
             loadDurationMs,
             loadable.bytesLoaded());
-    loadErrorHandlingPolicy.onLoadCompleted(loadEventInfo);
+    loadErrorHandlingPolicy.onLoadTaskConcluded(loadable.loadTaskId);
     eventDispatcher.loadCompleted(
         loadEventInfo,
         loadable.type,
@@ -439,7 +439,7 @@ public void onLoadCanceled(
             elapsedRealtimeMs,
             loadDurationMs,
             loadable.bytesLoaded());
-    loadErrorHandlingPolicy.onLoadCanceled(loadEventInfo);
+    loadErrorHandlingPolicy.onLoadTaskConcluded(loadable.loadTaskId);
     eventDispatcher.loadCanceled(
         loadEventInfo,
         loadable.type,
@@ -522,6 +522,7 @@ public LoadErrorAction onLoadError(
         error,
         canceled);
     if (canceled) {
+      loadErrorHandlingPolicy.onLoadTaskConcluded(loadable.loadTaskId);
       callback.onContinueLoadingRequested(this);
     }
     return loadErrorAction;

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/SubtitleTextView.java
Patch:
@@ -158,7 +158,8 @@ public void dispatchDraw(Canvas canvas) {
         cue = repositionVerticalCue(cue);
       }
       float cueTextSizePx =
-          SubtitleViewUtils.resolveCueTextSize(cue, rawViewHeight, viewHeightMinusPadding);
+          SubtitleViewUtils.resolveTextSize(
+              cue.textSizeType, cue.textSize, rawViewHeight, viewHeightMinusPadding);
       SubtitlePainter painter = painters.get(i);
       painter.draw(
           cue,

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -131,7 +131,7 @@
   private int enabledRendererCount;
   @Nullable private SeekPosition pendingInitialSeekPosition;
   private long rendererPositionUs;
-  private int nextPendingMessageIndex;
+  private int nextPendingMessageIndexHint;
   private boolean deliverPendingMessageAtStartPositionRequired;
 
   private long releaseTimeoutMs;
@@ -1191,7 +1191,6 @@ private void resetInternal(
         pendingMessageInfo.message.markAsProcessed(/* isDelivered= */ false);
       }
       pendingMessages.clear();
-      nextPendingMessageIndex = 0;
       resetPosition = true;
     }
     MediaPeriodId mediaPeriodId = playbackInfo.periodId;
@@ -1365,6 +1364,7 @@ private void maybeTriggerPendingMessages(long oldPeriodPositionUs, long newPerio
     // Correct next index if necessary (e.g. after seeking, timeline changes, or new messages)
     int currentPeriodIndex =
         playbackInfo.timeline.getIndexOfPeriod(playbackInfo.periodId.periodUid);
+    int nextPendingMessageIndex = Math.min(nextPendingMessageIndexHint, pendingMessages.size());
     PendingMessageInfo previousInfo =
         nextPendingMessageIndex > 0 ? pendingMessages.get(nextPendingMessageIndex - 1) : null;
     while (previousInfo != null
@@ -1410,6 +1410,7 @@ private void maybeTriggerPendingMessages(long oldPeriodPositionUs, long newPerio
               ? pendingMessages.get(nextPendingMessageIndex)
               : null;
     }
+    nextPendingMessageIndexHint = nextPendingMessageIndex;
   }
 
   private void ensureStopped(Renderer renderer) throws ExoPlaybackException {

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/TestDownloadManagerListener.java
Patch:
@@ -67,10 +67,10 @@ public void blockUntilIdle() throws InterruptedException {
             () -> {
               if (downloadManager.isIdle()) {
                 idleCondition.open();
-                checkedOnMainThread.open();
               }
+              checkedOnMainThread.open();
             });
-    checkedOnMainThread.block(TIMEOUT_MS);
+    assertThat(checkedOnMainThread.block(TIMEOUT_MS)).isTrue();
     assertThat(idleCondition.block(TIMEOUT_MS)).isTrue();
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/AdsMediaSource.java
Patch:
@@ -271,7 +271,7 @@ protected void onChildSourceInfoRefreshed(
   }
 
   @Override
-  protected @Nullable MediaPeriodId getMediaPeriodIdForChildMediaPeriodId(
+  protected MediaPeriodId getMediaPeriodIdForChildMediaPeriodId(
       MediaPeriodId childId, MediaPeriodId mediaPeriodId) {
     // The child id for the content period is just DUMMY_CONTENT_MEDIA_PERIOD_ID. That's why we need
     // to forward the reported mediaPeriodId in this case.

File: extensions/av1/src/main/java/com/google/android/exoplayer2/ext/av1/Libgav1VideoRenderer.java
Patch:
@@ -94,8 +94,9 @@ public Libgav1VideoRenderer(
    * @param eventListener A listener of events. May be null if delivery of events is not required.
    * @param maxDroppedFramesToNotify The maximum number of frames that can be dropped between
    *     invocations of {@link VideoRendererEventListener#onDroppedFrames(int, long)}.
-   * @param threads Number of threads libgav1 will use to decode. If {@link THREAD_COUNT_AUTODETECT}
-   *     is passed, then the number of threads to use is autodetected based on CPU capabilities.
+   * @param threads Number of threads libgav1 will use to decode. If {@link
+   *     #THREAD_COUNT_AUTODETECT} is passed, then the number of threads to use is autodetected
+   *     based on CPU capabilities.
    * @param numInputBuffers Number of input buffers.
    * @param numOutputBuffers Number of output buffers.
    */

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadManagerDashTest.java
Patch:
@@ -264,8 +264,7 @@ private void createDownloadManager() {
           downloadManager.setRequirements(new Requirements(0));
 
           downloadManagerListener =
-              new TestDownloadManagerListener(
-                  downloadManager, dummyMainThread, /* timeoutMs= */ 3000);
+              new TestDownloadManagerListener(downloadManager, dummyMainThread);
           downloadManager.resumeDownloads();
         });
   }

File: testutils/src/test/java/com/google/android/exoplayer2/testutil/TestUtilTest.java
Patch:
@@ -30,7 +30,7 @@ public class TestUtilTest {
   public void createRobolectricConditionVariable_blockWithTimeout_timesOut()
       throws InterruptedException {
     ConditionVariable conditionVariable = TestUtil.createRobolectricConditionVariable();
-    assertThat(conditionVariable.block(/* timeout= */ 1)).isFalse();
+    assertThat(conditionVariable.block(/* timeoutMs= */ 1)).isFalse();
     assertThat(conditionVariable.isOpen()).isFalse();
   }
 
@@ -39,7 +39,7 @@ public void createRobolectricConditionVariable_blockWithTimeout_blocksForAtLeast
       throws InterruptedException {
     ConditionVariable conditionVariable = TestUtil.createRobolectricConditionVariable();
     long startTimeMs = System.currentTimeMillis();
-    assertThat(conditionVariable.block(/* timeout= */ 500)).isFalse();
+    assertThat(conditionVariable.block(/* timeoutMs= */ 500)).isFalse();
     long endTimeMs = System.currentTimeMillis();
     assertThat(endTimeMs - startTimeMs).isAtLeast(500);
   }

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSource.java
Patch:
@@ -261,8 +261,10 @@ private void finishSourcePreparation() {
               /* mediaEndTimeMs = */ C.TIME_UNSET);
       long elapsedRealTimeMs = SystemClock.elapsedRealtime();
       EventDispatcher eventDispatcher = createEventDispatcher(/* mediaPeriodId= */ null);
+      long loadTaskId = LoadEventInfo.getNewId();
       eventDispatcher.loadStarted(
           new LoadEventInfo(
+              loadTaskId,
               FAKE_DATA_SPEC,
               FAKE_DATA_SPEC.uri,
               /* responseHeaders= */ Collections.emptyMap(),
@@ -272,6 +274,7 @@ private void finishSourcePreparation() {
           mediaLoadData);
       eventDispatcher.loadCompleted(
           new LoadEventInfo(
+              loadTaskId,
               FAKE_DATA_SPEC,
               FAKE_DATA_SPEC.uri,
               /* responseHeaders= */ Collections.emptyMap(),

File: library/ui/src/main/java/com/google/android/exoplayer2/ui/DefaultTimeBar.java
Patch:
@@ -798,10 +798,9 @@ private void positionScrubber(float xPosition) {
   }
 
   private Point resolveRelativeTouchPosition(MotionEvent motionEvent) {
-    getLocationOnScreen(locationOnScreen);
     touchPosition.set(
-        ((int) motionEvent.getRawX()) - locationOnScreen[0],
-        ((int) motionEvent.getRawY()) - locationOnScreen[1]);
+        (int) motionEvent.getX(),
+        (int) motionEvent.getY());
     return touchPosition;
   }
 

File: extensions/ima/src/main/java/com/google/android/exoplayer2/ext/ima/ImaAdsLoader.java
Patch:
@@ -472,7 +472,9 @@ private ImaAdsLoader(
     adCallbacks = new ArrayList<>(/* initialCapacity= */ 1);
     adDisplayContainer = imaFactory.createAdDisplayContainer();
     adDisplayContainer.setPlayer(/* videoAdPlayer= */ this);
-    adsLoader = imaFactory.createAdsLoader(context, imaSdkSettings, adDisplayContainer);
+    adsLoader =
+        imaFactory.createAdsLoader(
+            context.getApplicationContext(), imaSdkSettings, adDisplayContainer);
     adsLoader.addAdErrorListener(/* adErrorListener= */ this);
     adsLoader.addAdsLoadedListener(/* adsLoadedListener= */ this);
     fakeContentProgressElapsedRealtimeMs = C.TIME_UNSET;

File: library/dash/src/main/java/com/google/android/exoplayer2/source/dash/PlayerEmsgHandler.java
Patch:
@@ -288,6 +288,7 @@ public final class PlayerTrackEmsgHandler implements TrackOutput {
       this.sampleQueue =
           new SampleQueue(
               allocator,
+              /* playbackLooper= */ handler.getLooper(),
               DrmSessionManager.getDummyDrmSessionManager(),
               new MediaSourceEventDispatcher());
       formatHolder = new FormatHolder();

File: library/common/src/main/java/com/google/android/exoplayer2/audio/Ac3Util.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.ParsableBitArray;
 import com.google.android.exoplayer2.util.ParsableByteArray;
+import com.google.android.exoplayer2.util.Util;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -516,7 +517,7 @@ public static int findTrueHdSyncframeOffset(ByteBuffer buffer) {
     int endIndex = buffer.limit() - TRUEHD_SYNCFRAME_PREFIX_LENGTH;
     for (int i = startIndex; i <= endIndex; i++) {
       // The syncword ends 0xBA for TrueHD or 0xBB for MLP.
-      if ((buffer.getInt(i + 4) & 0xFEFFFFFF) == 0xBA6F72F8) {
+      if ((Util.getBigEndianInt(buffer, i + 4) & 0xFFFFFFFE) == 0xF8726FBA) {
         return i - startIndex;
       }
     }

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DefaultAudioSink.java
Patch:
@@ -1242,7 +1242,8 @@ private static int getMaximumEncodedRateBytesPerSecond(@C.Encoding int encoding)
   private static int getFramesPerEncodedSample(@C.Encoding int encoding, ByteBuffer buffer) {
     switch (encoding) {
       case C.ENCODING_MP3:
-        return MpegAudioUtil.parseMpegAudioFrameSampleCount(buffer.get(buffer.position()));
+        int headerDataInBigEndian = Util.getBigEndianInt(buffer, buffer.position());
+        return MpegAudioUtil.parseMpegAudioFrameSampleCount(headerDataInBigEndian);
       case C.ENCODING_AAC_LC:
         return AacUtil.AAC_LC_AUDIO_SAMPLE_COUNT;
       case C.ENCODING_AAC_HE_V1:

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadProgress.java
Patch:
@@ -21,8 +21,8 @@
 public class DownloadProgress {
 
   /** The number of bytes that have been downloaded. */
-  public long bytesDownloaded;
+  public volatile long bytesDownloaded;
 
   /** The percentage that has been downloaded, or {@link C#PERCENTAGE_UNSET} if unknown. */
-  public float percentDownloaded;
+  public volatile float percentDownloaded;
 }

File: library/core/src/main/java/com/google/android/exoplayer2/source/ads/AdsMediaSource.java
Patch:
@@ -18,6 +18,7 @@
 import android.net.Uri;
 import android.os.Handler;
 import android.os.Looper;
+import android.os.SystemClock;
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
@@ -359,7 +360,7 @@ public void onAdLoadError(final AdLoadException error, DataSpec dataSpec) {
               dataSpec.uri,
               /* responseHeaders= */ Collections.emptyMap(),
               C.DATA_TYPE_AD,
-              C.TRACK_TYPE_UNKNOWN,
+              /* elapsedRealtimeMs= */ SystemClock.elapsedRealtime(),
               /* loadDurationMs= */ 0,
               /* bytesLoaded= */ 0,
               error,

File: library/core/src/main/java/com/google/android/exoplayer2/source/MergingMediaPeriod.java
Patch:
@@ -158,8 +158,7 @@ public long selectTracks(
     // Copy the new streams back into the streams array.
     System.arraycopy(newStreams, 0, streams, 0, newStreams.length);
     // Update the local state.
-    enabledPeriods = new MediaPeriod[enabledPeriodsList.size()];
-    enabledPeriodsList.toArray(enabledPeriods);
+    enabledPeriods = enabledPeriodsList.toArray(new MediaPeriod[0]);
     compositeSequenceableLoader =
         compositeSequenceableLoaderFactory.createCompositeSequenceableLoader(enabledPeriods);
     return positionUs;

File: library/core/src/main/java/com/google/android/exoplayer2/text/subrip/SubripDecoder.java
Patch:
@@ -135,8 +135,7 @@ protected Subtitle decode(byte[] bytes, int length, boolean reset) {
       cues.add(Cue.EMPTY);
     }
 
-    Cue[] cuesArray = new Cue[cues.size()];
-    cues.toArray(cuesArray);
+    Cue[] cuesArray = cues.toArray(new Cue[0]);
     long[] cueTimesUsArray = cueTimesUs.toArray();
     return new SubripSubtitle(cuesArray, cueTimesUsArray);
   }

File: library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
Patch:
@@ -870,7 +870,7 @@ && shouldTransitionToReadyState(renderersAllowPlayback)) {
         }
       }
       if (throwWhenStuckBuffering
-          && !shouldContinueLoading
+          && !playbackInfo.isLoading
           && playbackInfo.totalBufferedDurationUs < 500_000
           && isLoadingPossible()) {
         // Throw if the LoadControl prevents loading even if the buffer is empty or almost empty. We

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackOutput.java
Patch:
@@ -297,6 +297,7 @@ public void dump(Dumper dumper) {
       addIfNonDefault(dumper, "subsampleOffsetUs", format -> format.subsampleOffsetUs);
       addIfNonDefault(dumper, "selectionFlags", format -> format.selectionFlags);
       addIfNonDefault(dumper, "language", format -> format.language);
+      addIfNonDefault(dumper, "label", format -> format.label);
       if (format.drmInitData != null) {
         dumper.add("drmInitData", format.drmInitData.hashCode());
       }

File: library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DashMediaPeriodTest.java
Patch:
@@ -165,6 +165,7 @@ private static AdaptationSet createAdaptationSet(
         trackType,
         Arrays.asList(representations),
         /* accessibilityDescriptors= */ Collections.emptyList(),
+        /* essentialProperties= */ Collections.emptyList(),
         descriptor == null ? Collections.emptyList() : Collections.singletonList(descriptor));
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecInfo.java
Patch:
@@ -547,7 +547,9 @@ private static boolean areSizeAndRateSupportedV21(
     width = alignedSize.x;
     height = alignedSize.y;
 
-    if (frameRate == Format.NO_VALUE || frameRate <= 0) {
+    // VideoCapabilities.areSizeAndRateSupported incorrectly returns false if frameRate < 1 on some
+    // versions of Android, so we only check the size in this case [Internal ref: b/153940404].
+    if (frameRate == Format.NO_VALUE || frameRate < 1) {
       return capabilities.isSizeSupported(width, height);
     } else {
       // The signaled frame rate may be slightly higher than the actual frame rate, so we take the

File: library/common/src/main/java/com/google/android/exoplayer2/util/UnknownNull.java
Patch:
@@ -23,7 +23,7 @@
 import javax.annotation.meta.When;
 
 /**
- * Annotation for specifiying unknown nullness. Useful for clearing the effects of an automatically
+ * Annotation for specifying unknown nullness. Useful for clearing the effects of an automatically
  * propagated {@link Nonnull} annotation.
  */
 @Nonnull(when = When.UNKNOWN)

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java
Patch:
@@ -502,6 +502,7 @@ private static HlsMasterPlaylist parseMasterPlaylist(LineIterator iterator, Stri
                   roleFlags,
                   language)
                   .copyWithMetadata(metadata);
+          subtitles.add(new Rendition(uri, format, groupId, name));
           break;
         case TYPE_CLOSED_CAPTIONS:
           String instreamId = parseStringAttr(line, REGEX_INSTREAM_ID, variableDefinitions);

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -1294,9 +1294,9 @@ public void stop(boolean reset) {
   public void release() {
     verifyApplicationThread();
     audioBecomingNoisyManager.setEnabled(false);
-    audioFocusManager.updateAudioFocus(/* playWhenReady= */ false, Player.STATE_IDLE);
     wakeLockManager.setStayAwake(false);
     wifiLockManager.setStayAwake(false);
+    audioFocusManager.release();
     player.release();
     removeSurfaceCallbacks();
     if (surface != null) {

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -39,6 +39,7 @@
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.RenderersFactory;
 import com.google.android.exoplayer2.SimpleExoPlayer;
+import com.google.android.exoplayer2.audio.AudioAttributes;
 import com.google.android.exoplayer2.demo.Sample.UriSample;
 import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
 import com.google.android.exoplayer2.drm.DrmSessionManager;
@@ -380,6 +381,7 @@ private void initializePlayer() {
               .setTrackSelector(trackSelector)
               .build();
       player.addListener(new PlayerEventListener());
+      player.setAudioAttributes(AudioAttributes.DEFAULT, /* handleAudioFocus= */ true);
       player.setPlayWhenReady(startAutoPlay);
       player.addAnalyticsListener(new EventLogger(trackSelector));
       playerView.setPlayer(player);

File: library/core/src/main/java/com/google/android/exoplayer2/source/ClippingMediaPeriod.java
Patch:
@@ -324,7 +324,8 @@ public int readData(FormatHolder formatHolder, DecoderInputBuffer buffer,
       if (endUs != C.TIME_END_OF_SOURCE
           && ((result == C.RESULT_BUFFER_READ && buffer.timeUs >= endUs)
               || (result == C.RESULT_NOTHING_READ
-                  && getBufferedPositionUs() == C.TIME_END_OF_SOURCE))) {
+                  && getBufferedPositionUs() == C.TIME_END_OF_SOURCE
+                  && !buffer.waitingForKeys))) {
         buffer.clear();
         buffer.setFlags(C.BUFFER_FLAG_END_OF_STREAM);
         sentEos = true;

File: library/core/src/main/java/com/google/android/exoplayer2/source/SampleQueue.java
Patch:
@@ -539,7 +539,7 @@ private synchronized int readSampleMetadata(
       boolean loadingFinished,
       long decodeOnlyUntilUs,
       SampleExtrasHolder extrasHolder) {
-
+    buffer.waitingForKeys = false;
     // This is a temporary fix for https://github.com/google/ExoPlayer/issues/6155.
     // TODO: Remove it and replace it with a fix that discards samples when writing to the queue.
     boolean hasNextSample;
@@ -573,6 +573,7 @@ private synchronized int readSampleMetadata(
     }
 
     if (!mayReadSample(relativeReadIndex)) {
+      buffer.waitingForKeys = true;
       return C.RESULT_NOTHING_READ;
     }
 

File: library/core/src/test/java/com/google/android/exoplayer2/source/SampleQueueTest.java
Patch:
@@ -372,8 +372,10 @@ public void testReadEncryptedSectionsWaitsForKeys() {
 
     assertReadFormat(/* formatRequired= */ false, FORMAT_ENCRYPTED);
     assertReadNothing(/* formatRequired= */ false);
+    assertThat(inputBuffer.waitingForKeys).isTrue();
     when(mockDrmSession.getState()).thenReturn(DrmSession.STATE_OPENED_WITH_KEYS);
     assertReadEncryptedSample(/* sampleIndex= */ 0);
+    assertThat(inputBuffer.waitingForKeys).isFalse();
   }
 
   @Test

File: library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
Patch:
@@ -1565,9 +1565,9 @@ public void stop(boolean reset) {
   public void release() {
     verifyApplicationThread();
     audioBecomingNoisyManager.setEnabled(false);
-    audioFocusManager.updateAudioFocus(/* playWhenReady= */ false, Player.STATE_IDLE);
     wakeLockManager.setStayAwake(false);
     wifiLockManager.setStayAwake(false);
+    audioFocusManager.release();
     player.release();
     removeSurfaceCallbacks();
     if (surface != null) {

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
Patch:
@@ -38,6 +38,7 @@
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.RenderersFactory;
 import com.google.android.exoplayer2.SimpleExoPlayer;
+import com.google.android.exoplayer2.audio.AudioAttributes;
 import com.google.android.exoplayer2.demo.Sample.UriSample;
 import com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.DecoderInitializationException;
 import com.google.android.exoplayer2.mediacodec.MediaCodecUtil.DecoderQueryException;
@@ -374,6 +375,7 @@ private void initializePlayer() {
               .setTrackSelector(trackSelector)
               .build();
       player.addListener(new PlayerEventListener());
+      player.setAudioAttributes(AudioAttributes.DEFAULT, /* handleAudioFocus= */ true);
       player.setPlayWhenReady(startAutoPlay);
       player.addAnalyticsListener(new EventLogger(trackSelector));
       playerView.setPlayer(player);

File: library/core/src/main/java/com/google/android/exoplayer2/source/ClippingMediaPeriod.java
Patch:
@@ -329,7 +329,8 @@ public int readData(FormatHolder formatHolder, DecoderInputBuffer buffer,
       if (endUs != C.TIME_END_OF_SOURCE
           && ((result == C.RESULT_BUFFER_READ && buffer.timeUs >= endUs)
               || (result == C.RESULT_NOTHING_READ
-                  && getBufferedPositionUs() == C.TIME_END_OF_SOURCE))) {
+                  && getBufferedPositionUs() == C.TIME_END_OF_SOURCE
+                  && !buffer.waitingForKeys))) {
         buffer.clear();
         buffer.setFlags(C.BUFFER_FLAG_END_OF_STREAM);
         sentEos = true;

File: library/core/src/main/java/com/google/android/exoplayer2/source/SampleQueue.java
Patch:
@@ -554,7 +554,7 @@ private synchronized int readSampleMetadata(
       boolean loadingFinished,
       long decodeOnlyUntilUs,
       SampleExtrasHolder extrasHolder) {
-
+    buffer.waitingForKeys = false;
     // This is a temporary fix for https://github.com/google/ExoPlayer/issues/6155.
     // TODO: Remove it and replace it with a fix that discards samples when writing to the queue.
     boolean hasNextSample;
@@ -588,6 +588,7 @@ private synchronized int readSampleMetadata(
     }
 
     if (!mayReadSample(relativeReadIndex)) {
+      buffer.waitingForKeys = true;
       return C.RESULT_NOTHING_READ;
     }
 

File: library/core/src/test/java/com/google/android/exoplayer2/source/SampleQueueTest.java
Patch:
@@ -368,8 +368,10 @@ public void readEncryptedSectionsWaitsForKeys() {
 
     assertReadFormat(/* formatRequired= */ false, FORMAT_ENCRYPTED);
     assertReadNothing(/* formatRequired= */ false);
+    assertThat(inputBuffer.waitingForKeys).isTrue();
     when(mockDrmSession.getState()).thenReturn(DrmSession.STATE_OPENED_WITH_KEYS);
     assertReadEncryptedSample(/* sampleIndex= */ 0);
+    assertThat(inputBuffer.waitingForKeys).isFalse();
   }
 
   @Test

File: testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackSelector.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.testutil;
 
+import androidx.test.core.app.ApplicationProvider;
 import com.google.android.exoplayer2.RendererCapabilities.AdaptiveSupport;
 import com.google.android.exoplayer2.RendererCapabilities.Capabilities;
 import com.google.android.exoplayer2.source.TrackGroup;
@@ -46,7 +47,7 @@ public FakeTrackSelector(boolean mayReuseTrackSelection) {
   }
 
   private FakeTrackSelector(FakeTrackSelectionFactory fakeTrackSelectionFactory) {
-    super(fakeTrackSelectionFactory);
+    super(ApplicationProvider.getApplicationContext(), fakeTrackSelectionFactory);
     this.fakeTrackSelectionFactory = fakeTrackSelectionFactory;
   }
 

File: library/core/src/main/java/com/google/android/exoplayer2/text/SimpleSubtitleDecoder.java
Patch:
@@ -31,7 +31,7 @@ public abstract class SimpleSubtitleDecoder extends
   private final String name;
 
   /** @param name The name of the decoder. */
-  @SuppressWarnings("initialization:method.invocation.invalid")
+  @SuppressWarnings("nullness:method.invocation.invalid")
   protected SimpleSubtitleDecoder(String name) {
     super(new SubtitleInputBuffer[2], new SubtitleOutputBuffer[2]);
     this.name = name;

File: library/core/src/main/java/com/google/android/exoplayer2/trackselection/TrackSelectionParameters.java
Patch:
@@ -47,7 +47,7 @@ public static class Builder {
      *
      * @param context Any context.
      */
-    @SuppressWarnings({"deprecation", "initialization:method.invocation.invalid"})
+    @SuppressWarnings({"deprecation", "nullness:method.invocation.invalid"})
     public Builder(Context context) {
       this();
       setPreferredTextLanguageAndRoleFlagsToCaptioningManagerSettings(context);

File: library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java
Patch:
@@ -462,7 +462,7 @@ private static HlsMasterPlaylist parseMasterPlaylist(LineIterator iterator, Stri
           variant = getVariantWithSubtitleGroup(variants, groupId);
           if (variant != null) {
             @Nullable
-            String codecs = Util.getCodecsOfType(variant.format.codecs, C.TRACK_TYPE_AUDIO);
+            String codecs = Util.getCodecsOfType(variant.format.codecs, C.TRACK_TYPE_TEXT);
             sampleMimeType = MimeTypes.getMediaMimeType(codecs);
             if (sampleMimeType == null) {
               sampleMimeType = MimeTypes.TEXT_VTT;

File: library/hls/src/test/java/com/google/android/exoplayer2/source/hls/playlist/HlsMasterPlaylistParserTest.java
Patch:
@@ -364,7 +364,7 @@ public void parseMasterPlaylist_withVariableSubstitution_success() throws IOExce
   }
 
   @Test
-  public void testSubtitleCodec() throws IOException {
+  public void parseMasterPlaylist_withMatchedTTMLSubtitleCodec() throws IOException {
     HlsMasterPlaylist playlistWithSubtitles =
             parseMasterPlaylist(PLAYLIST_URI, PLAYLIST_WITH_SUBTITLE_CODEC);
     HlsMasterPlaylist.Variant variant = playlistWithSubtitles.variants.get(0);

File: library/common/src/main/java/com/google/android/exoplayer2/util/MimeTypes.java
Patch:
@@ -267,6 +267,8 @@ public static boolean allSamplesAreSyncSamples(@Nullable String mimeType) {
       return MimeTypes.AUDIO_VORBIS;
     } else if (codec.startsWith("flac")) {
       return MimeTypes.AUDIO_FLAC;
+    } else if (codec.startsWith("stpp")) {
+      return MimeTypes.APPLICATION_TTML;
     } else {
       return getCustomMimeTypeForCodec(codec);
     }

File: library/core/src/test/java/com/google/android/exoplayer2/extractor/wav/WavExtractorTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.extractor.wav;
 
+import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.testutil.ExtractorAsserts;
 import org.junit.Test;
@@ -30,7 +31,7 @@ public void testSample() throws Exception {
   }
 
   @Test
-  public void testSampleImaAdpcm() throws Exception {
+  public void sample_imaAdpcm() throws Exception {
     ExtractorAsserts.assertBehavior(WavExtractor::new, "wav/sample_ima_adpcm.wav");
   }
 }

File: demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
Patch:
@@ -18,6 +18,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.content.pm.PackageManager;
 import android.content.res.AssetManager;
 import android.net.Uri;
 import android.os.AsyncTask;

File: playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashWidevineOfflineTest.java
Patch:
@@ -68,7 +68,6 @@ public void setUp() throws Exception {
             .setFullPlaybackNoSeeking(true)
             .setCanIncludeAdditionalVideoFormats(false)
             .setAudioVideoFormats(
-
                 DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,
                 DashTestData.WIDEVINE_H264_CDD_FIXED);
 

File: extensions/ffmpeg/src/main/java/com/google/android/exoplayer2/ext/ffmpeg/FfmpegAudioRenderer.java
Patch:
@@ -41,7 +41,7 @@ public final class FfmpegAudioRenderer extends DecoderAudioRenderer {
 
   private final boolean enableFloatOutput;
 
-  private @MonotonicNonNull FfmpegDecoder decoder;
+  private @MonotonicNonNull FfmpegAudioDecoder decoder;
 
   public FfmpegAudioRenderer() {
     this(/* eventHandler= */ null, /* eventListener= */ null);
@@ -117,12 +117,12 @@ public final int supportsMixedMimeTypeAdaptation() {
   }
 
   @Override
-  protected FfmpegDecoder createDecoder(Format format, @Nullable ExoMediaCrypto mediaCrypto)
+  protected FfmpegAudioDecoder createDecoder(Format format, @Nullable ExoMediaCrypto mediaCrypto)
       throws FfmpegDecoderException {
     int initialInputBufferSize =
         format.maxInputSize != Format.NO_VALUE ? format.maxInputSize : DEFAULT_INPUT_BUFFER_SIZE;
     decoder =
-        new FfmpegDecoder(
+        new FfmpegAudioDecoder(
             NUM_BUFFERS, NUM_BUFFERS, initialInputBufferSize, format, shouldUseFloatOutput(format));
     return decoder;
   }

File: library/core/src/main/java/com/google/android/exoplayer2/audio/DecoderAudioRenderer.java
Patch:
@@ -637,7 +637,6 @@ private void setDecoderDrmSession(@Nullable DrmSession session) {
     decoderDrmSession = session;
   }
 
-  @SuppressWarnings("unchecked")
   private void onInputFormatChanged(FormatHolder formatHolder) throws ExoPlaybackException {
     Format newFormat = Assertions.checkNotNull(formatHolder.format);
     setSourceDrmSession(formatHolder.drmSession);

File: library/core/src/main/java/com/google/android/exoplayer2/drm/DrmSessionManager.java
Patch:
@@ -25,7 +25,6 @@
 public interface DrmSessionManager {
 
   /** Returns {@link #DUMMY}. */
-  @SuppressWarnings("unchecked")
   static DrmSessionManager getDummyDrmSessionManager() {
     return DUMMY;
   }

File: library/core/src/main/java/com/google/android/exoplayer2/drm/OfflineLicenseHelper.java
Patch:
@@ -104,7 +104,6 @@ public static OfflineLicenseHelper newWidevineInstance(
    * @return A new instance which uses Widevine CDM.
    * @see DefaultDrmSessionManager.Builder
    */
-  @SuppressWarnings("unchecked")
   public static OfflineLicenseHelper newWidevineInstance(
       String defaultLicenseUrl,
       boolean forceDefaultLicenseUrl,
@@ -125,7 +124,6 @@ public static OfflineLicenseHelper newWidevineInstance(
    *     MediaSourceEventDispatcher)} instead.
    */
   @Deprecated
-  @SuppressWarnings("unchecked")
   public OfflineLicenseHelper(
       UUID uuid,
       ExoMediaDrm.Provider mediaDrmProvider,

File: library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
Patch:
@@ -1355,7 +1355,6 @@ protected void onCodecInitialized(String name, long initializedTimestampMs,
    * @param formatHolder A {@link FormatHolder} that holds the new {@link Format}.
    * @throws ExoPlaybackException If an error occurs re-initializing the {@link MediaCodec}.
    */
-  @SuppressWarnings("unchecked")
   protected void onInputFormatChanged(FormatHolder formatHolder) throws ExoPlaybackException {
     waitingForFirstSampleInFormat = true;
     Format newFormat = Assertions.checkNotNull(formatHolder.format);

File: library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
Patch:
@@ -798,7 +798,7 @@ public DownloadRequest getDownloadRequest(String id, @Nullable byte[] data) {
   }
 
   // Initialization of array of Lists.
-  @SuppressWarnings({"unchecked", "rawtypes"})
+  @SuppressWarnings("unchecked")
   private void onMediaPrepared() {
     Assertions.checkNotNull(mediaPreparer);
     Assertions.checkNotNull(mediaPreparer.mediaPeriods);

File: library/core/src/main/java/com/google/android/exoplayer2/video/DecoderVideoRenderer.java
Patch:
@@ -375,7 +375,6 @@ protected void releaseDecoder() {
    * @throws ExoPlaybackException If an error occurs (re-)initializing the decoder.
    */
   @CallSuper
-  @SuppressWarnings("unchecked")
   protected void onInputFormatChanged(FormatHolder formatHolder) throws ExoPlaybackException {
     waitingForFirstSampleInFormat = true;
     Format newFormat = Assertions.checkNotNull(formatHolder.format);

File: library/core/src/test/java/com/google/android/exoplayer2/source/SampleQueueTest.java
Patch:
@@ -131,7 +131,6 @@ public final class SampleQueueTest {
   private DecoderInputBuffer inputBuffer;
 
   @Before
-  @SuppressWarnings("unchecked")
   public void setUp() {
     allocator = new DefaultAllocator(false, ALLOCATION_SIZE);
     mockDrmSessionManager = Mockito.mock(DrmSessionManager.class);
@@ -413,7 +412,6 @@ public void readEncryptedSectionsPopulatesDrmSession() {
   }
 
   @Test
-  @SuppressWarnings("unchecked")
   public void allowPlaceholderSessionPopulatesDrmSession() {
     when(mockDrmSession.getState()).thenReturn(DrmSession.STATE_OPENED_WITH_KEYS);
     DrmSession mockPlaceholderDrmSession = Mockito.mock(DrmSession.class);
@@ -459,7 +457,6 @@ public void allowPlaceholderSessionPopulatesDrmSession() {
   }
 
   @Test
-  @SuppressWarnings("unchecked")
   public void trailingCryptoInfoInitializationVectorBytesZeroed() {
     when(mockDrmSession.getState()).thenReturn(DrmSession.STATE_OPENED_WITH_KEYS);
     DrmSession mockPlaceholderDrmSession = Mockito.mock(DrmSession.class);

