File: core/src/main/java/jenkins/util/io/FileBoolean.java
Patch:
@@ -8,7 +8,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import jenkins.model.Jenkins;
-import org.apache.commons.io.FilenameUtils;
 
 /**
  * Uses a presence/absence of a file as a persisted boolean storage.
@@ -30,7 +29,7 @@ public FileBoolean(File file) {
     }
 
     public FileBoolean(Class owner, String name) {
-        this(new File(Jenkins.get().getRootDir(), FilenameUtils.getName(owner.getName().replace('$', '.') + '/' + name)));
+        this(new File(Jenkins.get().getRootDir(), owner.getName().replace('$', '.') + '/' + name));
     }
 
     /**

File: core/src/main/java/jenkins/util/io/FileBoolean.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import jenkins.model.Jenkins;
+import org.apache.commons.io.FilenameUtils;
 
 /**
  * Uses a presence/absence of a file as a persisted boolean storage.
@@ -29,7 +30,7 @@ public FileBoolean(File file) {
     }
 
     public FileBoolean(Class owner, String name) {
-        this(new File(Jenkins.get().getRootDir(), owner.getName().replace('$', '.') + '/' + name));
+        this(new File(Jenkins.get().getRootDir(), FilenameUtils.getName(owner.getName().replace('$', '.') + '/' + name)));
     }
 
     /**

File: test/src/test/java/jenkins/security/Security2779Test.java
Patch:
@@ -49,7 +49,7 @@ private void noCrossSiteScriptingInHelp(String selector) throws Exception {
 
         // assert leading space to identify unintentional double-escaping (&amp;lt;) as test failure
         assertThat("tooltip does not contain dangerous HTML", jsResultString, not(containsString(" <img src=x")));
-        assertThat("tooltip contains safe text", jsResultString, containsString("lt;img src=x"));
+        assertThat("tooltip contains safe text", jsResultString, containsString(" &lt;img src=x"));
     }
 
     @TestExtension

File: core/src/main/java/hudson/model/ModifiableItemGroup.java
Patch:
@@ -33,6 +33,7 @@
 import org.kohsuke.stapler.StaplerRequest2;
 import org.kohsuke.stapler.StaplerResponse;
 import org.kohsuke.stapler.StaplerResponse2;
+import org.kohsuke.stapler.interceptor.RequirePOST;
 
 /**
  * {@link ItemGroup} that is a general purpose container, which allows users and the rest of the program
@@ -50,7 +51,7 @@ public interface ModifiableItemGroup<T extends Item> extends ItemGroup<T> {
      * The request format follows that of {@code &lt;n:form xmlns:n="/lib/form">}.
      *
      */
-    @StaplerNotDispatchable
+    @RequirePOST
     default T doCreateItem(StaplerRequest2 req, StaplerResponse2 rsp) throws IOException, ServletException {
         if (ReflectionUtils.isOverridden(
                 ModifiableItemGroup.class,

File: core/src/main/java/jenkins/monitor/OperatingSystemEndOfLifeAdminMonitor.java
Patch:
@@ -145,7 +145,7 @@ void readOperatingSystemList(String initialOperatingSystemJson) throws IOExcepti
             }
 
             LOGGER.log(Level.FINE, "Matched operating system {0}", name);
-            if (startDate.isBefore(LocalDate.now())) {
+            if (!startDate.isAfter(LocalDate.now())) {
                 this.operatingSystemName = name;
                 this.documentationUrl = buildDocumentationUrl(this.operatingSystemName);
                 this.endOfLifeDate = endOfLife.toString();

File: cli/src/main/java/hudson/cli/FlightRecorderInputStream.java
Patch:
@@ -21,7 +21,7 @@ class FlightRecorderInputStream extends InputStream {
      * Size (in bytes) of the flight recorder ring buffer used for debugging remoting issues.
      * @since 2.41
      */
-    static final int BUFFER_SIZE = Integer.getInteger("hudson.remoting.FlightRecorderInputStream.BUFFER_SIZE", 1024 * 1024);
+    static final int BUFFER_SIZE = Integer.getInteger("hudson.remoting.FlightRecorderInputStream.BUFFER_SIZE", 1024);
 
     private final InputStream source;
     private ByteArrayRingBuffer recorder = new ByteArrayRingBuffer(BUFFER_SIZE);

File: core/src/main/java/hudson/tasks/LogRotator.java
Patch:
@@ -250,7 +250,7 @@ private boolean shouldKeepRun(Run r, Run lsb, Run lstb) {
             LOGGER.log(FINER, "{0} is not to be removed or purged of artifacts because it’s the last stable build", r);
             return true;
         }
-        if (r.isBuilding()) {
+        if (r.isLogUpdated()) {
             LOGGER.log(FINER, "{0} is not to be removed or purged of artifacts because it’s still building", r);
             return true;
         }

File: test/src/test/java/hudson/slaves/JNLPLauncherRealTest.java
Patch:
@@ -25,7 +25,7 @@
 package hudson.slaves;
 
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.endsWith;
+import static org.hamcrest.Matchers.hasKey;
 import static org.hamcrest.Matchers.is;
 
 import hudson.ExtensionList;
@@ -104,7 +104,7 @@ public void run(JenkinsRule r) throws Throwable {
             p.setAssignedNode(agent);
             FreeStyleBuild b = r.buildAndAssertSuccess(p);
             if (webSocket) {
-                assertThat(agent.toComputer().getSystemProperties().get("java.class.path").toString(), endsWith("agent.jar"));
+                assertThat(agent.toComputer().getSystemProperties(), hasKey("os.name"));
             }
             System.err.println(JenkinsRule.getLog(b));
         }

File: core/src/main/java/hudson/slaves/JNLPLauncher.java
Patch:
@@ -213,9 +213,7 @@ private String getRemotingOptions(String computerName) {
         sb.append("-name ");
         sb.append(computerName);
         sb.append(' ');
-        if (isWebSocket()) {
-            sb.append("-webSocket ");
-        }
+        sb.append("-webSocket ");
         if (tunnel != null) {
             sb.append(" -tunnel ");
             sb.append(tunnel);

File: core/src/main/java/hudson/security/ACL.java
Patch:
@@ -237,7 +237,7 @@ public final void checkCreatePermission(@NonNull ItemGroup c,
         }
         if (!hasCreatePermission2(a, c, d)) {
             throw new AccessDeniedException(Messages.AccessDeniedException2_MissingPermission(a.getName(),
-                    Item.CREATE.group.title + "/" + Item.CREATE.name + Item.CREATE + "/" + d.getDisplayName()));
+                    Item.CREATE.group.title + "/" + Item.CREATE.name + "/" + d.getDisplayName()));
         }
     }
     /**
@@ -290,7 +290,7 @@ public final void checkCreatePermission(@NonNull ViewGroup c,
         }
         if (!hasCreatePermission2(a, c, d)) {
             throw new AccessDeniedException(Messages.AccessDeniedException2_MissingPermission(a.getName(),
-                    View.CREATE.group.title + "/" + View.CREATE.name + View.CREATE + "/" + d.getDisplayName()));
+                    View.CREATE.group.title + "/" + View.CREATE.name + "/" + d.getDisplayName()));
         }
     }
 

File: core/src/test/java/jenkins/util/io/PathRemoverTest.java
Patch:
@@ -69,7 +69,7 @@
 public class PathRemoverTest {
 
     @Rule public TemporaryFolder tmp = new TemporaryFolder();
-    @Rule public Timeout timeout = new Timeout(10, TimeUnit.SECONDS);
+    @Rule public Timeout timeout = new Timeout(30, TimeUnit.SECONDS);
     @Rule public FileLockerRule locker = new FileLockerRule();
 
     @Test

File: test/src/test/java/jenkins/security/Security3430Test.java
Patch:
@@ -252,7 +252,6 @@ public Exploit(URL controllerFilePath, String expectedContent) {
         @Override
         public Void call() throws Exception {
             final ClassLoader ccl = Thread.currentThread().getContextClassLoader();
-            System.err.println(ccl.getClass().getName());
             final Field classLoaderProxyField = ccl.getClass().getDeclaredField("proxy");
             classLoaderProxyField.setAccessible(true);
             final Object theProxy = classLoaderProxyField.get(ccl);

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2360,7 +2360,7 @@ public List<AdministrativeMonitor> getActiveAdministrativeMonitors() {
         }
         return administrativeMonitors.stream().filter(m -> {
             try {
-                return Jenkins.get().hasPermission(m.getRequiredPermission()) && m.isEnabled() && m.isActivated();
+                return m.hasRequiredPermission() && m.isEnabled() && m.isActivated();
             } catch (Throwable x) {
                 LOGGER.log(Level.WARNING, null, x);
                 return false;

File: core/src/main/java/hudson/slaves/CloudRetentionStrategy.java
Patch:
@@ -64,7 +64,7 @@ public long check(final AbstractCloudComputer c) {
                 }
             }
         }
-        return 1;
+        return 0;
     }
 
     /**

File: core/src/main/java/hudson/slaves/CloudSlaveRetentionStrategy.java
Patch:
@@ -37,7 +37,7 @@ public long check(T c) {
                 }
             }
         }
-        return checkCycle();
+        return TimeUnit.MILLISECONDS.toMinutes(checkCycle());
     }
 
     /**

File: core/src/main/java/hudson/slaves/RetentionStrategy.java
Patch:
@@ -171,7 +171,7 @@ public Always() {
         public long check(SlaveComputer c) {
             if (c.isOffline() && !c.isConnecting() && c.isLaunchSupported())
                 c.tryReconnect();
-            return 1;
+            return 0;
         }
 
         @Extension(ordinal = 100) @Symbol("always")
@@ -285,7 +285,7 @@ public long check(final SlaveComputer c) {
                     return TimeUnit.MILLISECONDS.toMinutes(TimeUnit.MINUTES.toMillis(idleDelay) - idleMilliseconds);
                 }
             }
-            return 1;
+            return 0;
         }
 
         @Extension @Symbol("demand")

File: core/src/main/java/hudson/slaves/SimpleScheduledRetentionStrategy.java
Patch:
@@ -209,7 +209,7 @@ public void run() {
                         LOGGER.log(INFO,
                                 "Disabling new jobs for computer {0} as it has finished its scheduled uptime",
                                 new Object[]{c.getName()});
-                        return 1;
+                        return 0;
                     } else if (c.isIdle() && c.isAcceptingTasks()) {
                         Queue.withLock(new Runnable() {
                             @Override
@@ -243,7 +243,7 @@ public void run() {
                 }
             }
         }
-        return 1;
+        return 0;
     }
 
     private synchronized boolean isOnlineScheduled() {

File: test/src/test/java/hudson/model/RunTest.java
Patch:
@@ -157,7 +157,7 @@ private void ensureXssIsPrevented(FreeStyleProject upProject, String validationP
         HtmlPage htmlPage = wc.goTo(upProject.getUrl());
 
         // trigger the tooltip display
-        htmlPage.executeJavaScript("document.querySelector('#buildHistory table .build-badge svg')._tippy.show()");
+        htmlPage.executeJavaScript("document.querySelector('#jenkins-build-history .app-builds-container__item__inner__controls svg')._tippy.show()");
         wc.waitForBackgroundJavaScript(500);
         ScriptResult result = htmlPage.executeJavaScript("document.querySelector('.tippy-content').innerHTML;");
         Object jsResult = result.getJavaScriptResult();

File: test/src/test/java/hudson/scm/AbstractScmTagActionTest.java
Patch:
@@ -66,7 +66,7 @@ private String buildAndExtractTooltipAttribute(FreeStyleProject p) throws Except
 
         HtmlPage page = wc.getPage(p);
 
-        DomElement buildHistory = page.getElementById("buildHistory");
+        DomElement buildHistory = page.getElementById("buildHistoryPage");
         DomNodeList<HtmlElement> imgs = buildHistory.getElementsByTagName("img");
         HtmlImage tagImage = (HtmlImage) imgs.stream()
                 .filter(i -> i.getAttribute("class").contains("icon-save"))

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -937,6 +937,7 @@ public void updateByXml(Source source) throws IOException {
             // if everything went well, commit this new version
             out.commit();
             SaveableListener.fireOnChange(this, getConfigFile());
+            ItemListener.fireOnUpdated(this);
 
         } finally {
             out.abort(); // don't leave anything behind

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -290,6 +290,7 @@ public synchronized TopLevelItem createProjectFromXML(String name, InputStream x
 
             add(result);
 
+            result.onCreatedFromScratch();
             ItemListener.fireOnCreated(result);
             Jenkins.get().rebuildDependencyGraphAsync();
 

File: test/src/test/java/jenkins/model/RunIdMigratorTest.java
Patch:
@@ -39,7 +39,6 @@
 import java.nio.charset.StandardCharsets;
 import org.htmlunit.HttpMethod;
 import org.htmlunit.WebRequest;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.Issue;
@@ -58,7 +57,6 @@ public void legacyIdsPresent() throws Exception {
         assertTrue(legacyIds.exists());
     }
 
-    @Ignore("TODO Item#onCreatedFromScratch is not called")
     @Issue("JENKINS-64356")
     @Test
     public void legacyIdsPresentViaRestApi() throws Exception {
@@ -82,7 +80,6 @@ public void legacyIdsPresentViaRestApi() throws Exception {
         assertTrue(legacyIds.exists());
     }
 
-    @Ignore("TODO Item#onCreatedFromScratch is not called")
     @Issue("JENKINS-64356")
     @Test
     public void legacyIdsPresentViaCli() {

File: core/src/main/java/hudson/PluginFirstClassLoader2.java
Patch:
@@ -25,8 +25,9 @@ public class PluginFirstClassLoader2 extends URLClassLoader2 {
         registerAsParallelCapable();
     }
 
-    public PluginFirstClassLoader2(@NonNull URL[] urls, @NonNull ClassLoader parent) {
-        super(Objects.requireNonNull(urls), Objects.requireNonNull(parent));
+
+    public PluginFirstClassLoader2(String name, @NonNull URL[] urls, @NonNull ClassLoader parent) {
+        super(name, Objects.requireNonNull(urls), Objects.requireNonNull(parent));
     }
 
     /**

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -1099,7 +1099,7 @@ protected void copyBundledPlugin(URL src, String fileName) throws IOException {
     }
 
     /*package*/ static @CheckForNull Manifest parsePluginManifest(URL bundledJpi) {
-        try (URLClassLoader cl = new URLClassLoader(new URL[]{bundledJpi})) {
+        try (URLClassLoader cl = new URLClassLoader("Temporary classloader for parsing " + bundledJpi.toString(), new URL[]{bundledJpi}, ClassLoader.getSystemClassLoader())) {
             InputStream in = null;
             try {
                 URL res = cl.findResource(PluginWrapper.MANIFEST_FILENAME);
@@ -2337,7 +2337,7 @@ public static final class UberClassLoader extends ClassLoader {
         }
 
         public UberClassLoader(List<PluginWrapper> activePlugins) {
-            super(PluginManager.class.getClassLoader());
+            super("UberClassLoader", PluginManager.class.getClassLoader());
             this.activePlugins = activePlugins;
         }
 

File: core/src/main/java/hudson/util/MaskingClassLoader.java
Patch:
@@ -59,7 +59,7 @@ public MaskingClassLoader(ClassLoader parent, String... masks) {
     }
 
     public MaskingClassLoader(ClassLoader parent, Collection<String> masks) {
-        super(parent);
+        super("Masking ClassLoader of " + parent.getName(), parent);
         this.masksClasses = List.copyOf(masks);
 
         /*

File: core/src/test/java/hudson/PluginWrapperTest.java
Patch:
@@ -105,7 +105,7 @@ public void dependencyFailedToLoad() {
     @Issue("JENKINS-66563")
     @Test
     public void insertJarsIntoClassPath() throws Exception {
-        try (URLClassLoader2 cl = new URLClassLoader2(new URL[0])) {
+        try (URLClassLoader2 cl = new URLClassLoader2("Test", new URL[0])) {
             assertInjectingJarsWorks(cl);
         }
     }

File: war/src/main/java/executable/Main.java
Patch:
@@ -266,7 +266,7 @@ public static void main(String[] args) throws IllegalAccessException {
         // locate the Winstone launcher
         ClassLoader cl;
         try {
-            cl = new URLClassLoader(new URL[] {tmpJar.toURI().toURL()});
+            cl = new URLClassLoader("Jenkins Main ClassLoader", new URL[] {tmpJar.toURI().toURL()}, ClassLoader.getSystemClassLoader());
         } catch (MalformedURLException e) {
             throw new UncheckedIOException(e);
         }

File: test/src/test/java/hudson/PluginManagerTest.java
Patch:
@@ -806,7 +806,7 @@ public void noInjectionOnAvailablePluginsPage() throws Exception {
 
             PluginManagerUtil.getCheckForUpdatesButton(p).click();
             HtmlPage available = wc.goTo("pluginManager/available");
-            assertTrue(available.querySelector(".alert-danger")
+            assertTrue(available.querySelector(".jenkins-alert-danger")
                     .getTextContent().contains("This plugin is built for Jenkins 9999999"));
             wc.waitForBackgroundJavaScript(100);
 

File: test/src/test/java/jenkins/security/Security2780Test.java
Patch:
@@ -27,7 +27,7 @@ public void buildButtonTooltipHasNoXss() throws Exception {
         AtomicBoolean alertTriggered = new AtomicBoolean(false);
         wc.setAlertHandler((p, s) -> alertTriggered.set(true));
         HtmlPage page = wc.goTo("");
-        page.executeJavaScript("document.querySelector('a.jenkins-table__button')._tippy.show()");
+        page.executeJavaScript("document.querySelector('.jenkins-table a.jenkins-button')._tippy.show()");
         wc.waitForBackgroundJavaScript(2000L);
         ScriptResult result = page.executeJavaScript("document.querySelector('.tippy-content').innerHTML;");
         Object jsResult = result.getJavaScriptResult();

File: cli/src/main/java/hudson/cli/CLI.java
Patch:
@@ -61,7 +61,6 @@
 import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.TrustManager;
-import org.apache.commons.lang.StringUtils;
 import org.glassfish.tyrus.client.ClientManager;
 import org.glassfish.tyrus.client.ClientProperties;
 import org.glassfish.tyrus.client.SslEngineConfigurator;
@@ -246,7 +245,7 @@ public static int _main(String[] _args) throws Exception {
         if (auth == null && bearer == null) {
             // -auth option not set
             if ((userIdEnv != null && !userIdEnv.isBlank()) && (tokenEnv != null && !tokenEnv.isBlank())) {
-                auth = StringUtils.defaultString(userIdEnv).concat(":").concat(StringUtils.defaultString(tokenEnv));
+                auth = userIdEnv.concat(":").concat(tokenEnv);
             } else if ((userIdEnv != null && !userIdEnv.isBlank()) || (tokenEnv != null && !tokenEnv.isBlank())) {
                 printUsage(Messages.CLI_BadAuth());
                 return -1;

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -163,7 +163,6 @@
 import org.apache.commons.jelly.XMLOutput;
 import org.apache.commons.jexl.parser.ASTSizeFunction;
 import org.apache.commons.jexl.util.Introspector;
-import org.apache.commons.lang.StringUtils;
 import org.jenkins.ui.icon.Icon;
 import org.jenkins.ui.icon.IconSet;
 import org.jvnet.tiger_types.Types;
@@ -2415,7 +2414,7 @@ public static Icon tryGetIcon(String iconGuess) {
     }
 
     private static @NonNull String filterIconNameClasses(@NonNull String classNames) {
-        return Arrays.stream(StringUtils.split(classNames, ' '))
+        return Arrays.stream(classNames.split(" "))
             .filter(className -> className.startsWith("icon-"))
             .collect(Collectors.joining(" "));
     }

File: core/src/main/java/hudson/model/AutoCompletionCandidates.java
Patch:
@@ -34,7 +34,6 @@
 import java.util.List;
 import javax.servlet.ServletException;
 import jenkins.model.Jenkins;
-import org.apache.commons.lang.StringUtils;
 import org.kohsuke.stapler.HttpResponse;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
@@ -173,6 +172,6 @@ private String contextualNameOf(Item i) {
     }
 
     private static boolean startsWithImpl(String str, String prefix, boolean ignoreCase) {
-        return ignoreCase ? StringUtils.startsWithIgnoreCase(str, prefix) : str.startsWith(prefix);
+        return ignoreCase ? str.toLowerCase().startsWith(prefix.toLowerCase()) : str.startsWith(prefix);
     }
 }

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -67,7 +67,6 @@
 import jenkins.model.FingerprintFacet;
 import jenkins.model.Jenkins;
 import jenkins.model.TransientFingerprintFacetFactory;
-import org.apache.commons.lang.StringUtils;
 import org.kohsuke.stapler.export.Exported;
 import org.kohsuke.stapler.export.ExportedBean;
 import org.springframework.security.access.AccessDeniedException;
@@ -681,7 +680,7 @@ public static RangeSet fromString(String list, boolean skipError) {
             }
 
             String[] items = Util.tokenize(list, ",");
-            if (items.length > 1 && items.length <= StringUtils.countMatches(list, ",")) {
+            if (items.length > 1 && items.length <= list.chars().filter(c -> c == ',').count()) {
                 if (!skipError) {
                     throw new IllegalArgumentException(
                             String.format("Unable to parse '%s', expected correct notation M,N or M-N", list));
@@ -704,7 +703,7 @@ public static RangeSet fromString(String list, boolean skipError) {
                     }
 
                     if (s.contains("-")) {
-                        if (StringUtils.countMatches(s, "-") > 1) {
+                        if (s.chars().filter(c -> c == '-').count() > 1) {
                             if (!skipError) {
                                 throw new IllegalArgumentException(String.format(
                                         "Unable to parse '%s', expected correct notation M,N or M-N", list));

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -63,6 +63,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
+import java.util.Objects;
 import java.util.Set;
 import java.util.jar.JarFile;
 import java.util.jar.Manifest;
@@ -73,7 +74,6 @@
 import jenkins.security.MasterToSlaveCallable;
 import jenkins.slaves.WorkspaceLocator;
 import jenkins.util.SystemProperties;
-import org.apache.commons.lang.StringUtils;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.DoNotUse;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
@@ -393,7 +393,7 @@ public FilePath getRootPath() {
             // if computer is null then channel is null and thus we were going to return null anyway
             return null;
         } else {
-            return createPath(StringUtils.defaultString(computer.getAbsoluteRemoteFs(), remoteFS));
+            return createPath(Objects.toString(computer.getAbsoluteRemoteFs(), remoteFS));
         }
     }
 

File: core/src/main/java/hudson/search/FixedSet.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
-import org.apache.commons.lang.StringUtils;
 
 /**
  * Set of {@link SearchItem}s that are statically known upfront.
@@ -62,7 +61,7 @@ public void suggest(String token, List<SearchItem> result) {
         boolean caseInsensitive = UserSearchProperty.isCaseInsensitive();
         for (SearchItem i : items) {
             String name = i.getSearchName();
-            if (name != null && (name.contains(token) || (caseInsensitive && StringUtils.containsIgnoreCase(name, token)))) {
+            if (name != null && (name.contains(token) || (caseInsensitive && name.toLowerCase().contains(token.toLowerCase())))) {
                 result.add(i);
             }
         }

File: core/src/main/java/hudson/tasks/BuildTrigger.java
Patch:
@@ -58,6 +58,7 @@
 import java.util.Collection;
 import java.util.Comparator;
 import java.util.List;
+import java.util.Objects;
 import java.util.StringTokenizer;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
@@ -68,7 +69,6 @@
 import jenkins.model.ParameterizedJobMixIn;
 import jenkins.triggers.ReverseBuildTrigger;
 import net.sf.json.JSONObject;
-import org.apache.commons.lang.StringUtils;
 import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.AncestorInPath;
 import org.kohsuke.stapler.DataBoundConstructor;
@@ -114,7 +114,7 @@ public BuildTrigger(String childProjects, boolean evenIfUnstable) {
 
     @DataBoundConstructor
     public BuildTrigger(String childProjects, String threshold) {
-        this(childProjects, Result.fromString(StringUtils.defaultString(threshold, Result.SUCCESS.toString())));
+        this(childProjects, Result.fromString(Objects.toString(threshold, Result.SUCCESS.toString())));
     }
 
     public BuildTrigger(String childProjects, Result threshold) {

File: core/src/main/java/jenkins/security/BasicHeaderProcessor.java
Patch:
@@ -18,7 +18,6 @@
 import javax.servlet.ServletResponse;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import org.apache.commons.lang.StringUtils;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.springframework.security.authentication.AnonymousAuthenticationToken;
@@ -65,7 +64,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
         HttpServletResponse rsp = (HttpServletResponse) response;
         String authorization = req.getHeader("Authorization");
 
-        if (StringUtils.startsWithIgnoreCase(authorization, "Basic ")) {
+        if (authorization != null && authorization.toLowerCase().startsWith("Basic ".toLowerCase())) {
             // authenticate the user
             String uidpassword = Scrambler.descramble(authorization.substring(6));
             int idx = uidpassword.indexOf(':');

File: core/src/main/java/org/jenkins/ui/icon/Icon.java
Patch:
@@ -31,7 +31,6 @@
 import java.util.List;
 import java.util.Map;
 import org.apache.commons.jelly.JellyContext;
-import org.apache.commons.lang.StringUtils;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
@@ -238,7 +237,7 @@ public static String toNormalizedIconName(String string) {
         if (string == null) {
             return null;
         }
-        if (StringUtils.endsWithAny(string, SUPPORTED_FORMATS)) {
+        if (Arrays.stream(SUPPORTED_FORMATS).anyMatch(string::endsWith)) {
             string = string.substring(0, string.length() - 4);
         }
         return string.replace('_', '-');

File: core/src/main/java/org/jenkins/ui/symbol/Symbol.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.logging.Logger;
 import jenkins.model.Jenkins;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
 
 /**
  * Helper class to load symbols from Jenkins core or plugins.
@@ -50,7 +49,7 @@ public static String get(@NonNull SymbolRequest request) {
         String pluginName = request.getPluginName();
         String id = request.getId();
 
-        String identifier = StringUtils.defaultIfBlank(pluginName, "core");
+        String identifier = (pluginName == null || pluginName.isBlank()) ? "core" : pluginName;
 
         String symbol = SYMBOLS
                 .computeIfAbsent(identifier, key -> new ConcurrentHashMap<>())

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -345,21 +345,21 @@ public static String normalize(@NonNull String path) {
             String token = tokens.get(i);
             if (token.equals(".")) {
                 tokens.remove(i);
-                if (tokens.size() > 0)
+                if (!tokens.isEmpty())
                     tokens.remove(i > 0 ? i - 1 : i);
             } else if (token.equals("..")) {
                 if (i == 0) {
                     // If absolute path, just remove: /../something
                     // If relative path, not collapsible so leave as-is
                     tokens.remove(0);
-                    if (tokens.size() > 0) token += tokens.remove(0);
+                    if (!tokens.isEmpty()) token += tokens.remove(0);
                     if (!isAbsolute) buf.append(token);
                 } else {
                     // Normalize: remove something/.. plus separator before/after
                     i -= 2;
                     for (int j = 0; j < 3; j++) tokens.remove(i);
                     if (i > 0) tokens.remove(i - 1);
-                    else if (tokens.size() > 0) tokens.remove(0);
+                    else if (!tokens.isEmpty()) tokens.remove(0);
                 }
             } else
                 i += 2;

File: core/src/main/java/hudson/cli/DisablePluginCommand.java
Patch:
@@ -147,7 +147,7 @@ private void printResult(PluginWrapper.PluginDisableResult oneResult, int indent
         }
 
         printIndented(indent, Messages.DisablePluginCommand_StatusMessage(oneResult.getPlugin(), oneResult.getStatus(), oneResult.getMessage()));
-        if (oneResult.getDependentsDisableStatus().size() > 0) {
+        if (!oneResult.getDependentsDisableStatus().isEmpty()) {
             indent += INDENT_SPACE;
             for (PluginWrapper.PluginDisableResult oneDependentResult : oneResult.getDependentsDisableStatus()) {
                 printResult(oneDependentResult, indent);
@@ -182,7 +182,7 @@ private boolean restartIfNecessary(PluginWrapper.PluginDisableResult oneResult)
             return true;
         }
 
-        if (oneResult.getDependentsDisableStatus().size() > 0) {
+        if (!oneResult.getDependentsDisableStatus().isEmpty()) {
             for (PluginWrapper.PluginDisableResult oneDependentResult : oneResult.getDependentsDisableStatus()) {
                 if (restartIfNecessary(oneDependentResult)) {
                     return true;

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -1572,7 +1572,7 @@ public Stream<String> getCategoriesStream() {
          */
         @Restricted(DoNotUse.class)
         public boolean hasWarnings() {
-            return getWarnings().size() > 0;
+            return !getWarnings().isEmpty();
         }
 
         /**

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -483,7 +483,7 @@ public static ProcessTree get() {
     private static class DoVetoersExist extends SlaveToMasterCallable<Boolean, IOException> {
         @Override
         public Boolean call() throws IOException {
-            return ProcessKillingVeto.all().size() > 0;
+            return !ProcessKillingVeto.all().isEmpty();
         }
     }
 

File: core/src/main/java/jenkins/security/stapler/DoActionFilter.java
Patch:
@@ -65,7 +65,7 @@ public boolean keep(@NonNull Function m) {
 
         // check whitelist
         ExtensionList<RoutingDecisionProvider> whitelistProviders = ExtensionList.lookup(RoutingDecisionProvider.class);
-        if (whitelistProviders.size() > 0) {
+        if (!whitelistProviders.isEmpty()) {
             for (RoutingDecisionProvider provider : whitelistProviders) {
                 RoutingDecisionProvider.Decision methodDecision = provider.decide(signature);
                 if (methodDecision == RoutingDecisionProvider.Decision.ACCEPTED) {

File: core/src/main/java/jenkins/security/stapler/TypedFilter.java
Patch:
@@ -147,7 +147,7 @@ public boolean keep(@NonNull FieldRef fieldRef) {
 
         // check whitelist
         ExtensionList<RoutingDecisionProvider> decisionProviders = ExtensionList.lookup(RoutingDecisionProvider.class);
-        if (decisionProviders.size() > 0) {
+        if (!decisionProviders.isEmpty()) {
             for (RoutingDecisionProvider provider : decisionProviders) {
                 RoutingDecisionProvider.Decision fieldDecision = provider.decide(signature);
                 if (fieldDecision == RoutingDecisionProvider.Decision.ACCEPTED) {
@@ -204,7 +204,7 @@ public boolean keep(@NonNull Function function) {
 
         // check whitelist
         ExtensionList<RoutingDecisionProvider> decision = ExtensionList.lookup(RoutingDecisionProvider.class);
-        if (decision.size() > 0) {
+        if (!decision.isEmpty()) {
             for (RoutingDecisionProvider provider : decision) {
                 RoutingDecisionProvider.Decision methodDecision = provider.decide(signature);
                 if (methodDecision == RoutingDecisionProvider.Decision.ACCEPTED) {

File: core/src/main/java/jenkins/widgets/HistoryPageFilter.java
Patch:
@@ -264,7 +264,7 @@ private void addQueueItem(QueueItem item) {
     private void addRun(Run run) {
         HistoryPageEntry<Run> entry = new HistoryPageEntry<>(run);
         // Assert that runs have been added in descending order
-        if (runs.size() > 0) {
+        if (!runs.isEmpty()) {
             if (entry.getEntryId() > runs.get(runs.size() - 1).getEntryId()) {
                 throw new IllegalStateException("Runs were out of order");
             }

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -1751,7 +1751,7 @@ private Runnable makeFlyWeightTaskBuildable(final BuildableItem p) {
             Label lbl = p.getAssignedLabel();
 
             Computer masterComputer = h.toComputer();
-            if (lbl != null && lbl.equals(h.getSelfLabel())) {
+            if (lbl != null && lbl.equals(h.getSelfLabel()) && masterComputer != null) {
                 // the flyweight task is bound to the master
                 if (h.canTake(p) == null) {
                     return createFlyWeightTaskRunnable(p, masterComputer);
@@ -1760,7 +1760,7 @@ private Runnable makeFlyWeightTaskBuildable(final BuildableItem p) {
                 }
             }
 
-            if (lbl == null && h.canTake(p) == null && masterComputer.isOnline() && masterComputer.isAcceptingTasks()) {
+            if (lbl == null && h.canTake(p) == null && masterComputer != null && masterComputer.isOnline() && masterComputer.isAcceptingTasks()) {
                 // The flyweight task is not tied to a specific label, so execute on master if possible.
                 // This will ensure that actual agent disconnects do not impact flyweight tasks randomly assigned to them.
                 return createFlyWeightTaskRunnable(p, masterComputer);
@@ -1794,7 +1794,7 @@ private Runnable makeFlyWeightTaskBuildable(final BuildableItem p) {
         return null;
     }
 
-    private Runnable createFlyWeightTaskRunnable(final BuildableItem p, final Computer c) {
+    private Runnable createFlyWeightTaskRunnable(final BuildableItem p, final @NonNull Computer c) {
         if (LOGGER.isLoggable(Level.FINEST)) {
             LOGGER.log(Level.FINEST, "Creating flyweight task {0} for computer {1}",
                     new Object[]{p.task.getFullDisplayName(), c.getName()});

File: core/src/main/java/jenkins/model/Nodes.java
Patch:
@@ -332,9 +332,6 @@ public Node getNode(String name) {
      */
     public void load() throws IOException {
         final File nodesDir = getRootDir();
-        if (!nodesDir.exists()) {
-            return;
-        }
         final File[] subdirs = nodesDir.listFiles(File::isDirectory);
         final Map<String, Node> newNodes = new TreeMap<>();
         if (subdirs != null) {

File: test/src/test/java/hudson/model/AsynchPeopleTest.java
Patch:
@@ -48,10 +48,10 @@ public class AsynchPeopleTest {
         HtmlPage page = wc.goTo("asynchPeople");
         assertEquals(0, wc.waitForBackgroundJavaScript(120000));
         boolean found = false;
-        for (DomElement table : page.getElementsByTagName("table")) {
-            if (table.getAttribute("class").contains("progress-bar")) {
+        for (DomElement div : page.getElementsByTagName("div")) {
+            if (div.getAttribute("class").contains("app-progress-bar")) {
                 found = true;
-                assertEquals("display: none;", table.getAttribute("style"));
+                assertEquals("display: none;", div.getAttribute("style"));
                 break;
             }
         }

File: core/src/main/java/jenkins/management/Badge.java
Patch:
@@ -103,6 +103,7 @@ public String getTooltip() {
      *
      * @return severity as String
      */
+    @Exported(visibility = 999)
     public String getSeverity() {
         return severity.toString().toLowerCase(Locale.US);
     }

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -3766,10 +3766,7 @@ private static File mkdirsE(File dir) throws IOException {
 
     /**
      * Check if the relative child is really a descendant after symlink resolution if any.
-     *
-     * TODO un-restrict it in a weekly after the patch
      */
-    @Restricted(NoExternalUse.class)
     public boolean isDescendant(@NonNull String potentialChildRelativePath) throws IOException, InterruptedException {
         return act(new IsDescendant(potentialChildRelativePath));
     }

File: core/src/main/java/hudson/util/RemotingDiagnostics.java
Patch:
@@ -176,7 +176,7 @@ public static FilePath getHeapDump(VirtualChannel channel) throws IOException, I
     private static class GetHeapDump extends MasterToSlaveCallable<FilePath, IOException> {
             @Override
             public FilePath call() throws IOException {
-                final File hprof = File.createTempFile("hudson-heapdump", "hprof");
+                final File hprof = File.createTempFile("hudson-heapdump", ".hprof");
                 Files.delete(Util.fileToPath(hprof));
                 try {
                     MBeanServer server = ManagementFactory.getPlatformMBeanServer();

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -692,13 +692,13 @@ public static String getUserTimeZone() {
     }
 
     @Restricted(NoExternalUse.class)
-    public static String getUserTimeZonePostfix() {
+    public static String getUserTimeZonePostfix(Date date) {
         if (!isUserTimeZoneOverride()) {
             return "";
         }
 
         TimeZone tz = TimeZone.getTimeZone(getUserTimeZone());
-        return tz.getDisplayName(tz.observesDaylightTime(), TimeZone.SHORT);
+        return tz.getDisplayName(tz.inDaylightTime(date), TimeZone.SHORT, getCurrentLocale());
     }
 
     @Restricted(NoExternalUse.class)

File: core/src/main/java/hudson/cli/declarative/CLIMethod.java
Patch:
@@ -28,12 +28,12 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import hudson.cli.CLICommand;
-import hudson.util.ListBoxModel.Option;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 import org.jvnet.hudson.annotation_indexer.Indexed;
 import org.kohsuke.args4j.Argument;
+import org.kohsuke.args4j.Option;
 
 /**
  * Annotates methods on model objects to expose them as CLI commands.

File: test/src/test/java/jenkins/security/Security2278Test.java
Patch:
@@ -70,7 +70,7 @@ public void testUi() throws Exception {
         assertThat(contentAsString, containsString("Build Executor Status"));
         assertThat(contentAsString, containsString("Unknown Task"));
         assertThat(contentAsString, not(containsString("job/foo/job/bar")));
-        assertThat(contentAsString, not(containsString("icon-stop")));
+        assertThat(contentAsString, not(containsString("stop-button-link")));
     }
 
     @Test
@@ -81,7 +81,7 @@ public void testUiWithPermission() throws Exception {
         assertThat(contentAsString, containsString("Build Executor Status"));
         assertThat(contentAsString, not(containsString("Unknown Task")));
         assertThat(contentAsString, containsString("job/foo/job/bar"));
-        assertThat(contentAsString, containsString("icon-stop"));
+        assertThat(contentAsString, containsString("stop-button-link"));
     }
 
     @Test

File: test/src/test/java/hudson/model/ViewTest.java
Patch:
@@ -700,7 +700,7 @@ public void simplifiedOriginalDescription() throws Exception {
         assertThat(e.getStatusCode(), equalTo(500));
 
         // This should have a different message, but this is the current behavior demonstrating the problem.
-        assertThat(e.getResponse().getContentAsString(), containsString("A problem occurred while processing the request."));
+        assertThat(e.getResponse().getContentAsString(), containsString("A problem occurred while processing the request"));
 
         OldDataMonitor odm = ExtensionList.lookupSingleton(OldDataMonitor.class);
         Map<Saveable, OldDataMonitor.VersionRange> data = odm.getData();
@@ -744,7 +744,7 @@ public void simplifiedWithValidXmlAndBadField() throws Exception {
         assertThat(e.getStatusCode(), equalTo(500));
 
         // This should have a different message, but this is the current behavior demonstrating the problem.
-        assertThat(e.getResponse().getContentAsString(), containsString("A problem occurred while processing the request."));
+        assertThat(e.getResponse().getContentAsString(), containsString("A problem occurred while processing the request"));
 
         OldDataMonitor odm = ExtensionList.lookupSingleton(OldDataMonitor.class);
         Map<Saveable, OldDataMonitor.VersionRange> data = odm.getData();

File: test/src/test/java/jenkins/security/StackTraceSuppressionTest.java
Patch:
@@ -161,7 +161,7 @@ public void save() {
     }
 
     private void checBaseResponseContent(String content) {
-        assertThat(content, containsString("A problem occurred while processing the request."));
+        assertThat(content, containsString("A problem occurred while processing the request"));
         assertThat(content, containsString("Logging ID="));
         assertThat(content, containsString("Oops!"));
     }

File: core/src/main/java/hudson/node_monitors/NodeMonitor.java
Patch:
@@ -37,6 +37,7 @@
 import hudson.util.DescriptorList;
 import java.util.List;
 import jenkins.model.Jenkins;
+import org.kohsuke.stapler.DataBoundSetter;
 import org.kohsuke.stapler.export.Exported;
 import org.kohsuke.stapler.export.ExportedBean;
 
@@ -133,6 +134,7 @@ public boolean isIgnored() {
         return ignored;
     }
 
+    @DataBoundSetter
     public void setIgnored(boolean ignored) {
         this.ignored = ignored;
     }

File: test/src/test/java/lib/form/OptionTest.java
Patch:
@@ -28,6 +28,7 @@
 import static org.junit.Assert.assertNotEquals;
 import static org.junit.Assert.assertTrue;
 
+import hudson.ExtensionList;
 import hudson.model.RootAction;
 import org.htmlunit.html.DomElement;
 import org.htmlunit.html.DomNodeList;
@@ -216,7 +217,7 @@ private void checkJelly(int mode, String msgToInject,
                             String bodyContainsExpected, String valueContainsExpected,
                             boolean checkExactCharacters,
                             boolean withValueTrue, boolean withValueFalse) throws Exception {
-        UsingJellyView view = j.jenkins.getExtensionList(UsingJellyView.class).get(0);
+        UsingJellyView view = ExtensionList.lookupFirst(UsingJellyView.class);
         view.setMode(mode);
         view.setInjection(msgToInject);
 
@@ -242,7 +243,7 @@ private void checkGroovy(int mode, String msgToInject,
                              String bodyContainsExpected, String valueContainsExpected,
                              boolean checkExactCharacters,
                              boolean withValueTrue, boolean withValueFalse) throws Exception {
-        UsingGroovyView view = j.jenkins.getExtensionList(UsingGroovyView.class).get(0);
+        UsingGroovyView view = ExtensionList.lookupFirst(UsingGroovyView.class);
         view.setMode(mode);
         view.setInjection(msgToInject);
 

File: core/src/main/java/hudson/slaves/Cloud.java
Patch:
@@ -331,7 +331,8 @@ public HttpResponse doConfigSubmit(StaplerRequest req, StaplerResponse rsp) thro
         j.clouds.replace(this, result);
         j.save();
         // take the user back to the cloud top page.
-        return FormApply.success(".");
+        return FormApply.success("../" + result.name + '/');
+
     }
 
     public Cloud reconfigure(@NonNull final StaplerRequest req, JSONObject form) throws Descriptor.FormException {

File: core/src/main/java/jenkins/agents/CloudSet.java
Patch:
@@ -231,7 +231,6 @@ private void handleNewCloudPage(Descriptor<Cloud> descriptor, String name, Stapl
         checkName(name);
         JSONObject formData = req.getSubmittedForm();
         formData.put("name", name);
-        formData.put("cloudName", name); // ec2 uses that field name
         formData.remove("mode"); // Cloud descriptors won't have this field.
         req.setAttribute("instance", formData);
         req.setAttribute("descriptor", descriptor);

File: test/src/test/java/hudson/model/ComputerSetTest.java
Patch:
@@ -130,7 +130,7 @@ public void managePermissionCanConfigure() throws Exception {
         assertEquals(HttpURLConnection.HTTP_OK, page.getWebResponse().getStatusCode());
         responseContent = page.getWebResponse().getContentAsString();
         // the "Node Monitoring" link in the app bar is visible
-        assertThat(responseContent, containsString("Node Monitoring"));
+        assertThat(responseContent, containsString("Configure Monitors"));
         page = wc.goTo("computer/configure");
         assertEquals(HttpURLConnection.HTTP_OK, page.getWebResponse().getStatusCode());
         // and the save button is visible

File: core/src/main/java/jenkins/widgets/BuildListTable.java
Patch:
@@ -29,6 +29,7 @@
 import hudson.model.BallColor;
 import hudson.model.Run;
 import java.util.Date;
+import jenkins.console.ConsoleUrlProvider;
 import net.sf.json.JSONObject;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.DoNotUse;
@@ -41,6 +42,7 @@ public class BuildListTable extends RunListProgressiveRendering {
         element.put("iconColorOrdinal", iconColor.ordinal());
         element.put("iconColorDescription", iconColor.getDescription());
         element.put("url", build.getUrl());
+        element.put("consoleUrl", ConsoleUrlProvider.getRedirectUrl(build));
         element.put("iconName", build.getIconColor().getIconName());
         element.put("parentUrl", build.getParent().getUrl());
         element.put("parentFullDisplayName", Functions.breakableString(Functions.escape(build.getParent().getFullDisplayName())));

File: core/src/main/java/jenkins/widgets/BuildTimeTrend.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.model.BallColor;
 import hudson.model.Node;
 import hudson.model.Run;
+import jenkins.console.ConsoleUrlProvider;
 import jenkins.model.Jenkins;
 import net.sf.json.JSONObject;
 import org.kohsuke.accmod.Restricted;
@@ -45,6 +46,7 @@ public class BuildTimeTrend extends RunListProgressiveRendering {
         element.put("displayName", build.getDisplayName());
         element.put("duration", build.getDuration());
         element.put("durationString", build.getDurationString());
+        element.put("consoleUrl", ConsoleUrlProvider.getRedirectUrl(build));
         if (build instanceof AbstractBuild) {
             AbstractBuild<?, ?> b = (AbstractBuild) build;
             Node n = b.getBuiltOn();

File: core/src/main/java/hudson/node_monitors/NodeMonitor.java
Patch:
@@ -61,6 +61,9 @@
  * <p>
  * {@link NodeMonitor}s are persisted via XStream.
  *
+ * <h2>CasC</h2>
+ * To be able to configure {@link NodeMonitor}s via JCasC, they should have a {@link org.kohsuke.stapler.DataBoundConstructor}
+ *
  * @author Kohsuke Kawaguchi
  * @since 1.123
  */

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -308,7 +308,7 @@ protected Future<?> _connect(boolean forceReconnect) {
                     e.addSuppressed(threadInfo);
                     Functions.printStackTrace(e, taskListener.error(Messages.ComputerLauncher_abortedLaunch()));
                     throw e;
-                } catch (RuntimeException e) {
+                } catch (RuntimeException | Error e) {
                     e.addSuppressed(threadInfo);
                     Functions.printStackTrace(e, taskListener.error(Messages.ComputerLauncher_unexpectedError()));
                     throw e;

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -431,7 +431,7 @@ public class Jenkins extends AbstractCIBase implements DirectlyModifiableTopLeve
     private volatile SecurityRealm securityRealm = SecurityRealm.NO_AUTHENTICATION;
 
     /**
-     * Disables the remember me on this computer option in the standard login screen.
+     * Disables the "Keep me signed in" option in the standard login screen.
      *
      * @since 1.534
      */

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -196,7 +196,7 @@ protected Slave(@NonNull String name, String nodeDescription, String remoteFS, i
         this.numExecutors = numExecutors;
         this.mode = mode;
         this.remoteFS = Util.fixNull(remoteFS).trim();
-        this.labelAtomSet = Collections.unmodifiableSet(Label.parse(labelString));
+        _setLabelString(labelString);
         this.launcher = launcher;
         this.retentionStrategy = retentionStrategy;
         getAssignedLabels();    // compute labels now

File: test/src/test/java/jenkins/model/ScriptListenerTest.java
Patch:
@@ -56,7 +56,7 @@ public void consoleUsageIsLogged() throws IOException {
             assertThat(messages.get(0), containsString("' with correlation: '"));
             assertThat(messages.get(0), containsString("' (no user)"));
 
-            assertThat(messages.get(1), containsString("Script output: 'hello from script console\n' in feature: 'class hudson.util.RemotingDiagnostics' and context: 'hudson.remoting.LocalChannel@"));
+            assertThat(messages.get(1), containsString("Script output: 'hello from script console" + System.lineSeparator() + "' in feature: 'class hudson.util.RemotingDiagnostics' and context: 'hudson.remoting.LocalChannel@"));
             assertThat(messages.get(1), containsString("' with correlation: '"));
             assertThat(messages.get(1), containsString("' (no user)"));
         }
@@ -92,7 +92,7 @@ public void groovyCliUsageIsLogged() {
             assertThat(messages.get(1), containsString("Script output: 'hello from groovy CLI' in feature: 'class hudson.cli.GroovyCommand' and context: 'null' with correlation: '"));
             assertThat(messages.get(1), containsString("' (no user)"));
 
-            assertThat(messages.get(2), containsString("Script output: '\n' in feature: 'class hudson.cli.GroovyCommand' and context: 'null' with correlation: '"));
+            assertThat(messages.get(2), containsString("Script output: '" + System.lineSeparator() + "' in feature: 'class hudson.cli.GroovyCommand' and context: 'null' with correlation: '"));
             assertThat(messages.get(2), containsString("' (no user)"));
         }
 
@@ -133,7 +133,7 @@ public void groovyShCliUsageIsLogged() {
             assertThat(messages.get(5), containsString("]' in feature: 'class hudson.cli.GroovyshCommand' and context: 'null' with correlation: '"));
             assertThat(messages.get(5), containsString("' (no user)"));
 
-            assertThat(messages.get(6), containsString("Script output: 'hello from groovysh CLI\n' in feature: 'class hudson.cli.GroovyshCommand' and context: 'null' with correlation: '"));
+            assertThat(messages.get(6), containsString("Script output: 'hello from groovysh CLI" + System.lineSeparator() + "' in feature: 'class hudson.cli.GroovyshCommand' and context: 'null' with correlation: '"));
             assertThat(messages.get(6), containsString("' (no user)"));
 
             // Only match short substrings to not have to deal with color escape codes in the output

File: core/src/main/java/jenkins/util/groovy/GroovyHookScript.java
Patch:
@@ -7,6 +7,7 @@
 import groovy.lang.Binding;
 import groovy.lang.GroovyCodeSource;
 import groovy.lang.GroovyShell;
+import hudson.model.User;
 import java.io.File;
 import java.io.IOException;
 import java.net.URL;
@@ -16,6 +17,7 @@
 import java.util.logging.Logger;
 import javax.servlet.ServletContext;
 import jenkins.model.Jenkins;
+import jenkins.util.ScriptListener;
 import jenkins.util.SystemProperties;
 
 /**
@@ -133,6 +135,7 @@ protected void execute(File f) {
     @SuppressFBWarnings(value = "GROOVY_SHELL", justification = "Groovy hook scripts are a feature, not a bug")
     protected void execute(GroovyCodeSource s) {
         try {
+            ScriptListener.fireScriptExecution(s.getScriptText(), bindings, this.getClass(), s.getFile(), this.getClass().getName() + ":" + hook, User.current());
             createShell().evaluate(s);
         } catch (RuntimeException x) {
             LOGGER.log(WARNING, "Failed to run script " + s.getName(), x);

File: test/src/test/java/hudson/cli/ReloadConfigurationCommandTest.java
Patch:
@@ -102,7 +102,7 @@ public void reloadSlaveConfig() throws Exception {
     }
 
     private void modifyNode(Node node) throws Exception {
-        replace(node.getNodeName().equals("") ? "config.xml" : String.format("nodes/%s/config.xml", node.getNodeName()), "oldLabel", "newLabel");
+        replace(node.getNodeName().isEmpty() ? "config.xml" : String.format("nodes/%s/config.xml", node.getNodeName()), "oldLabel", "newLabel");
 
         assertThat(node.getLabelString(), equalTo("oldLabel"));
 

File: test/src/test/java/hudson/model/FingerprintCleanupThreadTest.java
Patch:
@@ -327,7 +327,7 @@ public void delete(String id) {
 
         @Override
         public boolean isReady() {
-            return storage.size() != 0;
+            return !storage.isEmpty();
         }
 
         @Override

File: test/src/test/java/hudson/model/LabelLoadStatisticsQueueLengthTest.java
Patch:
@@ -3,6 +3,7 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
@@ -203,9 +204,7 @@ private void maintainQueueAndForceRunOfLoadStatisticsUpdater(
             Thread.sleep(10);
         }
 
-        assertTrue(
-                "After waiting there are buildable items in the build queue.",
-                queue.getBuildableItems().size() > 0);
+        assertFalse("After waiting there are buildable items in the build queue.", queue.getBuildableItems().isEmpty());
 
         // create a LoadStatisticsUpdater, and run it in order to update the
         // load stats for all the labels

File: test/src/test/java/hudson/node_monitors/ClockMonitorDescriptorTest.java
Patch:
@@ -37,6 +37,6 @@ public void testClockMonitor() throws Exception {
         assertTrue(cd.abs() >= 0);
         assertTrue(cd.abs() < TimeUnit.SECONDS.toMillis(5));
         assertFalse(cd.isDangerous());
-        assertTrue("html output too short", cd.toHtml().length() > 0);
+        assertFalse("html output too short", cd.toHtml().isEmpty());
     }
 }

File: test/src/test/java/hudson/model/ViewDescriptorTest.java
Patch:
@@ -120,7 +120,7 @@ public void invisiblePropertiesOnViewShoudBePersisted() throws Exception {
 
 
         HtmlForm editViewForm = editViewPage.getFormByName("viewConfig");
-        editViewForm.getTextAreaByName("description").setText("This list view is awesome !");
+        editViewForm.getTextAreaByName("_.description").setText("This list view is awesome !");
         r.submit(editViewForm);
 
         //Check that the description is updated on view

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -345,7 +345,7 @@ private void _setLabelString(String labelString) {
         this.labelAtomSet = Collections.unmodifiableSet(Label.parse(label));
     }
 
-    @NonNull
+    @CheckForNull // should be @NonNull, but we've seen plugins overriding readResolve() without calling super.
     private transient Set<LabelAtom> labelAtomSet;
 
     @Override
@@ -358,7 +358,8 @@ protected Set<LabelAtom> getLabelAtomSet() {
     }
 
     private void warnPlugin() {
-        LOGGER.log(Level.WARNING, () -> getClass().getName() + " or one of its superclass overrides readResolve() without calling super implementation. Please file an issue against the plugin owning it : " + Jenkins.get().getPluginManager().whichPlugin(getClass()));
+        LOGGER.log(Level.WARNING, () -> getClass().getName() + " or one of its superclass overrides readResolve() without calling super implementation." +
+                "Please file an issue against the plugin owning it : " + Jenkins.get().getPluginManager().whichPlugin(getClass()));
     }
 
     @Override

File: test/src/test/java/hudson/util/SecretCompatTest.java
Patch:
@@ -56,7 +56,7 @@ public class SecretCompatTest {
     @Issue("SECURITY-304")
     public void encryptedValueStaysTheSameAfterRoundtrip() throws Exception {
         FreeStyleProject project = j.createFreeStyleProject();
-        project.addProperty(new ParametersDefinitionProperty(new PasswordParameterDefinition("p", "s3cr37", "Keep this a secret")));
+        project.addProperty(new ParametersDefinitionProperty(new PasswordParameterDefinition("p", Secret.fromString("s3cr37"), "Keep this a secret")));
         project.getAllActions(); // initialize Actionable.actions; otherwise first made nonnull while rendering sidepanel after redirect after round #1 has been saved, so only round #2 has <actions/>
         project = j.configRoundtrip(project);
         String round1 = project.getConfigFile().asString();
@@ -68,7 +68,7 @@ public void encryptedValueStaysTheSameAfterRoundtrip() throws Exception {
         //But reconfiguring will make it a new value
         project = j.jenkins.getItemByFullName(project.getFullName(), FreeStyleProject.class);
         project.removeProperty(ParametersDefinitionProperty.class);
-        project.addProperty(new ParametersDefinitionProperty(new PasswordParameterDefinition("p", "s3cr37", "Keep this a secret")));
+        project.addProperty(new ParametersDefinitionProperty(new PasswordParameterDefinition("p", Secret.fromString("s3cr37"), "Keep this a secret")));
         project = j.configRoundtrip(project);
         String round3 = project.getConfigFile().asString();
         assertNotEquals(round2, round3);

File: test/src/test/java/hudson/cli/CancelQuietDownCommandTest.java
Patch:
@@ -94,7 +94,7 @@ public void cancelQuietDownShouldSuccessOnQuietDownedJenkins() {
     @Test
     public void cancelQuietDownShouldResetQuietReason() throws Exception {
         final String testReason = "reason";
-        Jenkins.get().doQuietDown(false, 0, testReason);
+        Jenkins.get().doQuietDown(false, 0, testReason, false);
         QuietDownCommandTest.assertJenkinsInQuietMode(j);
         assertThat(j.jenkins.getQuietDownReason(), equalTo(testReason));
         final CLICommandInvoker.Result result = command

File: test/src/test/java/hudson/cli/QuietDownCommandTest.java
Patch:
@@ -163,7 +163,7 @@ public void quietDownShouldSuccessOnAlreadyQuietDownedJenkins() {
 
     @Test
     public void quietDownShouldSuccessWithBlockOnAlreadyQuietDownedJenkins() throws Exception {
-        j.jenkins.doQuietDown(true, 0, null);
+        j.jenkins.doQuietDown(true, 0, null, false);
         assertJenkinsInQuietMode();
         final CLICommandInvoker.Result result = command
                 .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)
@@ -174,7 +174,7 @@ public void quietDownShouldSuccessWithBlockOnAlreadyQuietDownedJenkins() throws
 
     @Test
     public void quietDownShouldSuccessWithBlockAndTimeoutOnAlreadyQuietDownedJenkins() throws Exception {
-        j.jenkins.doQuietDown(true, 0, null);
+        j.jenkins.doQuietDown(true, 0, null, false);
         assertJenkinsInQuietMode();
         final long time_before = System.currentTimeMillis();
         final CLICommandInvoker.Result result = command

File: test/src/test/java/hudson/model/ExecutorTest.java
Patch:
@@ -20,7 +20,6 @@
 import jenkins.model.CauseOfInterruption.UserInterruption;
 import jenkins.model.InterruptedBuildAction;
 import jenkins.model.Jenkins;
-import org.junit.Assert;
 import org.junit.ClassRule;
 import org.junit.Rule;
 import org.junit.Test;
@@ -174,7 +173,7 @@ public void disconnectCause_WithoutTrace() throws Exception {
         );
 
         OfflineCause offlineCause = p.getLastBuild().getBuiltOn().toComputer().getOfflineCause();
-        Assert.assertThat(offlineCause.toString(), not(containsString(message)));
+        assertThat(offlineCause.toString(), not(containsString(message)));
 
         b.doStop();
         j.waitForCompletion(b);

File: test/src/test/java/hudson/model/QueueTest.java
Patch:
@@ -440,7 +440,7 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
 
     @Issue("JENKINS-10944")
     @Test public void flyweightTasksBlockedByShutdown() throws Exception {
-        r.jenkins.doQuietDown(true, 0, null);
+        r.jenkins.doQuietDown(true, 0, null, false);
         AtomicInteger cnt = new AtomicInteger();
         TestFlyweightTask task = new TestFlyweightTask(cnt, null);
         assertTrue(Queue.isBlockedByShutdown(task));

File: test/src/test/java/hudson/util/HudsonIsRestartingTest.java
Patch:
@@ -20,7 +20,7 @@ public class HudsonIsRestartingTest {
     @Test
     @Issue("JENKINS-55062")
     public void withPrefix() throws Exception {
-        j.jenkins.servletContext.setAttribute("app", new HudsonIsRestarting());
+        j.jenkins.servletContext.setAttribute("app", new HudsonIsRestarting(false));
         JenkinsRule.WebClient wc = j.createWebClient()
                 // this is a failure page already
                 .withThrowExceptionOnFailingStatusCode(false)

File: core/src/main/java/hudson/model/ManageJenkinsAction.java
Patch:
@@ -79,13 +79,13 @@ public ContextMenu doContextMenu(StaplerRequest request, StaplerResponse respons
      * menu.
      */
     @Restricted(NoExternalUse.class)
-    public void addContextMenuItem(ContextMenu menu, String url, String icon, String iconXml, String text, boolean post, boolean requiresConfirmation, Badge badge) {
+    public void addContextMenuItem(ContextMenu menu, String url, String icon, String iconXml, String text, boolean post, boolean requiresConfirmation, Badge badge, String message) {
         if (Stapler.getCurrentRequest().findAncestorObject(this.getClass()) != null || !Util.isSafeToRedirectTo(url)) {
             // Default behavior if the URL is absolute or scheme-relative, or the current object is an ancestor (i.e. would resolve correctly)
-            menu.add(url, icon, iconXml, text, post, requiresConfirmation, badge);
+            menu.add(url, icon, iconXml, text, post, requiresConfirmation, badge, message);
             return;
         }
         // If neither is the case, rewrite the relative URL to point to inside the /manage/ URL space
-        menu.add("manage/" + url, icon, iconXml, text, post, requiresConfirmation, badge);
+        menu.add("manage/" + url, icon, iconXml, text, post, requiresConfirmation, badge, message);
     }
 }

File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java
Patch:
@@ -869,5 +869,5 @@ private static OpenOption[] getOpenOptions() {
     private static final Logger LOGGER = Logger.getLogger(DirectoryBrowserSupport.class.getName());
 
     @Restricted(NoExternalUse.class)
-    public static final String DEFAULT_CSP_VALUE = "sandbox; default-src 'none'; img-src 'self'; style-src 'self';";
+    public static final String DEFAULT_CSP_VALUE = "sandbox allow-same-origin; default-src 'none'; img-src 'self'; style-src 'self';";
 }

File: test/src/test/java/jenkins/security/apitoken/LegacyApiTokenAdministrativeMonitorTest.java
Patch:
@@ -336,7 +336,8 @@ private HtmlAnchor getFilterByIndex(HtmlPage page, SelectFilter selectFilter) {
 
     private HtmlButton getRevokeSelected(HtmlPage page) {
         HtmlElement document = page.getDocumentElement();
-        HtmlButton revokeSelected = document.getOneHtmlElementByAttribute("button", "class", "action-revoke-selected");
+
+        HtmlButton revokeSelected = document.querySelector("button.action-revoke-selected");
         assertNotNull(revokeSelected);
         return revokeSelected;
     }

File: test/src/test/java/hudson/model/PasswordParameterDefinitionTest.java
Patch:
@@ -29,6 +29,7 @@
 import hudson.Launcher;
 import java.io.IOException;
 import jenkins.model.Jenkins;
+import org.htmlunit.html.HtmlElement;
 import org.htmlunit.html.HtmlForm;
 import org.htmlunit.html.HtmlPasswordInput;
 import org.junit.Rule;
@@ -79,7 +80,7 @@ public class PasswordParameterDefinitionTest {
 
         // Another control case: anyone can enter a different value.
         HtmlForm form = wc.withBasicApiToken(dev).getPage(p, "build?delay=0sec").getFormByName("parameters");
-        form.getElementsByAttribute("input", "class", "hidden-password-update-btn").get(0).click();
+        ((HtmlElement) form.querySelector("button.hidden-password-update-btn")).click();
         HtmlPasswordInput input = form.getInputByName("value");
         input.setText("rumor");
         j.submit(form);
@@ -97,7 +98,7 @@ public class PasswordParameterDefinitionTest {
 
         // Another control case: blank values.
         form = wc.withBasicApiToken(dev).getPage(p, "build?delay=0sec").getFormByName("parameters");
-        form.getElementsByAttribute("input", "class", "hidden-password-update-btn").get(0).click();
+        ((HtmlElement) form.querySelector("button.hidden-password-update-btn")).click();
         input = form.getInputByName("value");
         input.setText("");
         j.submit(form);

File: test/src/test/java/lib/form/SecretTextareaTest.java
Patch:
@@ -35,6 +35,7 @@
 import hudson.tasks.Builder;
 import hudson.util.Secret;
 import java.io.IOException;
+import org.htmlunit.html.HtmlElement;
 import org.htmlunit.html.HtmlForm;
 import org.htmlunit.html.HtmlHiddenInput;
 import org.htmlunit.html.HtmlTextInput;
@@ -115,7 +116,7 @@ private HtmlForm goToConfigForm() throws IOException, SAXException {
     }
 
     private static void clickSecretUpdateButton(HtmlForm configForm) throws IOException {
-        configForm.getOneHtmlElementByAttribute("input", "class", "secret-update-btn").click();
+        ((HtmlElement) configForm.querySelector("button.secret-update-btn")).click();
     }
 
     private static String getHiddenSecretValue(HtmlForm configForm) {

File: core/src/main/java/hudson/cli/DisablePluginCommand.java
Patch:
@@ -131,7 +131,7 @@ private void printIndented(int indent, String format, String... arguments) {
             System.arraycopy(arguments, 0, newArgs, 1, arguments.length);
 
             String f = "%" + indent + "s" + format + "%n";
-            stdout.format(f, newArgs);
+            stdout.format(f, (Object[]) newArgs);
         }
     }
 

File: core/src/main/java/jenkins/org/apache/commons/validator/routines/DomainValidator.java
Patch:
@@ -2049,11 +2049,11 @@ private String chompLeadingDot(String str) {
      * @since 1.5.1 made public and added read-only array references
      */
     public enum ArrayType {
-        /** Update (or get a copy of) the GENERIC_TLDS_PLUS table containing additonal generic TLDs */
+        /** Update (or get a copy of) the GENERIC_TLDS_PLUS table containing additional generic TLDs */
         GENERIC_PLUS,
         /** Update (or get a copy of) the GENERIC_TLDS_MINUS table containing deleted generic TLDs */
         GENERIC_MINUS,
-        /** Update (or get a copy of) the COUNTRY_CODE_TLDS_PLUS table containing additonal country code TLDs */
+        /** Update (or get a copy of) the COUNTRY_CODE_TLDS_PLUS table containing additional country code TLDs */
         COUNTRY_CODE_PLUS,
         /** Update (or get a copy of) the COUNTRY_CODE_TLDS_MINUS table containing deleted country code TLDs */
         COUNTRY_CODE_MINUS,

File: core/src/test/java/hudson/FilePathTest.java
Patch:
@@ -262,6 +262,8 @@ public void close() {
             d.child("test").touch(0);
             try (OutputStream out = OutputStream.nullOutputStream()) {
                 d.zip(out);
+            }
+            try (OutputStream out = OutputStream.nullOutputStream()) {
                 d.zip(out, "**/*");
             }
     }

File: core/src/main/java/hudson/widgets/BuildHistoryWidget.java
Patch:
@@ -37,6 +37,7 @@
 import jenkins.model.queue.QueueItem;
 import jenkins.widgets.HistoryPageFilter;
 import jenkins.widgets.WidgetFactory;
+import org.jenkinsci.Symbol;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.DoNotUse;
 
@@ -90,6 +91,7 @@ public HistoryPageFilter getHistoryPageFilter() {
 
     @Extension
     @Restricted(DoNotUse.class)
+    @Symbol("buildHistory")
     public static final class FactoryImpl extends WidgetFactory<Job, BuildHistoryWidget> {
         @Override
         public Class<Job> type() {

File: core/src/main/java/jenkins/widgets/BuildQueueWidget.java
Patch:
@@ -78,7 +78,7 @@ public boolean isFiltered() {
         return filtered;
     }
 
-    @Extension(ordinal = 200) @Symbol("buildQueue") // historically this was the top most widget
+    @Extension(ordinal = 200) @Symbol("buildQueueView") // historically this was the top most widget
     public static final class ViewFactoryImpl extends WidgetFactory<View, BuildQueueWidget> {
         @Override
         public Class<View> type() {
@@ -97,7 +97,7 @@ public Collection<BuildQueueWidget> createFor(@NonNull View target) {
         }
     }
 
-    @Extension(ordinal = 200) @Symbol("buildQueue") // historically this was the top most widget
+    @Extension(ordinal = 200) @Symbol("buildQueueComputer") // historically this was the top most widget
     public static final class ComputerSetFactoryImpl extends WidgetFactory<ComputerSet, BuildQueueWidget> {
         @Override
         public Class<ComputerSet> type() {

File: core/src/main/java/jenkins/widgets/ExecutorsWidget.java
Patch:
@@ -58,7 +58,7 @@ public Collection<ExecutorsWidget> createFor(@NonNull View target) {
         }
     }
 
-    @Extension(ordinal = 100) @Symbol("executors") // historically this was above normal widgets and below BuildQueueWidget
+    @Extension(ordinal = 100) @Symbol("executorsComputer") // historically this was above normal widgets and below BuildQueueWidget
     public static final class ComputerFactoryImpl extends WidgetFactory<Computer, ExecutorsWidget> {
         @Override
         public Class<Computer> type() {
@@ -77,7 +77,7 @@ public Collection<ExecutorsWidget> createFor(@NonNull Computer target) {
         }
     }
 
-    @Extension(ordinal = 100) @Symbol("executors") // historically this was above normal widgets and below BuildQueueWidget
+    @Extension(ordinal = 100) @Symbol("executorsComputerSet") // historically this was above normal widgets and below BuildQueueWidget
     public static final class ComputerSetFactoryImpl extends WidgetFactory<ComputerSet, ExecutorsWidget> {
         @Override
         public Class<ComputerSet> type() {

File: core/src/main/java/jenkins/widgets/JenkinsWidgetFactory.java
Patch:
@@ -30,6 +30,7 @@
 import hudson.widgets.Widget;
 import java.util.Collection;
 import jenkins.model.Jenkins;
+import org.jenkinsci.Symbol;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.DoNotUse;
 
@@ -41,6 +42,7 @@
 @Extension
 @Restricted(DoNotUse.class)
 @Deprecated
+@Symbol("jenkins")
 public final class JenkinsWidgetFactory extends WidgetFactory<View, Widget> {
     @Override
     public Class<View> type() {

File: test/src/test/java/jenkins/bugs/Jenkins64991Test.java
Patch:
@@ -24,9 +24,9 @@
 
 package jenkins.bugs;
 
+import static org.hamcrest.CoreMatchers.containsStringIgnoringCase;
+import static org.hamcrest.CoreMatchers.endsWithIgnoringCase;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.containsStringIgnoringCase;
-import static org.hamcrest.Matchers.endsWithIgnoringCase;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;

File: core/src/main/java/hudson/widgets/BuildHistoryWidget.java
Patch:
@@ -37,6 +37,8 @@
 import jenkins.model.queue.QueueItem;
 import jenkins.widgets.HistoryPageFilter;
 import jenkins.widgets.WidgetFactory;
+import org.kohsuke.accmod.Restricted;
+import org.kohsuke.accmod.restrictions.DoNotUse;
 
 /**
  * Displays the build history on the side panel.
@@ -87,6 +89,7 @@ public HistoryPageFilter getHistoryPageFilter() {
     }
 
     @Extension
+    @Restricted(DoNotUse.class)
     public static final class FactoryImpl extends WidgetFactory<Job, BuildHistoryWidget> {
         @Override
         public Class<Job> type() {

File: core/src/main/java/hudson/widgets/Widget.java
Patch:
@@ -81,6 +81,7 @@ protected String getOwnerUrl() {
      * @return the URL relative to the context path. Always ends with a trailing '/'.
      */
     public String getUrl() {
-        return (getOwnerUrl() == null ? "" : getOwnerUrl()) + "widget/" + getUrlName() + '/';
+        String ownerUrl = getOwnerUrl();
+        return (ownerUrl == null ? "" : ownerUrl) + "widget/" + getUrlName() + '/';
     }
 }

File: core/src/main/java/jenkins/widgets/JenkinsWidgetFactory.java
Patch:
@@ -35,9 +35,12 @@
 
 /**
  * Add widgets annotated with @Extension, or added manually to Jenkins via <code>Jenkins.get().getWidgets().add(...)</code>
+ *
+ * @deprecated New widgets should provide a {@link WidgetFactory} instead of relying on this legacy lookup.
  */
 @Extension
 @Restricted(DoNotUse.class)
+@Deprecated
 public final class JenkinsWidgetFactory extends WidgetFactory<View, Widget> {
     @Override
     public Class<View> type() {

File: core/src/main/java/hudson/model/ListView.java
Patch:
@@ -452,7 +452,7 @@ protected void submit(StaplerRequest req) throws ServletException, FormException
             }
             for (TopLevelItem item : items) {
                 String relativeNameFrom = item.getRelativeNameFrom(getOwner().getItemGroup());
-                if (req.getParameter(relativeNameFrom) != null) {
+                if (req.getParameter("item_" + relativeNameFrom) != null) {
                     jobNames.add(relativeNameFrom);
                 }
             }

File: test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java
Patch:
@@ -54,6 +54,7 @@
 import hudson.tasks.ArtifactArchiver;
 import hudson.tasks.BatchFile;
 import hudson.tasks.Shell;
+import hudson.util.StreamTaskListener;
 import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -919,6 +920,8 @@ public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction()
             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);
             assertThat(entryNames, contains("intermediateFolder/public2.key"));
         }
+        // Explicitly delete everything including junctions, which TemporaryDirectoryAllocator.dispose may have trouble with:
+        new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds("cmd", "/c", "rmdir", "/s", "/q", j.jenkins.getRootDir().getAbsolutePath()).start().join();
     }
 
     private List<String> getListOfEntriesInDownloadedZip(UnexpectedPage zipPage) throws Exception {

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -615,7 +615,7 @@ public Collection<?> getOverrides() {
     /**
      * @deprecated see {@link LazyBuildMixIn#createHistoryWidget()}
      */
-    @Deprecated
+    @Deprecated(forRemoval = true, since = "TODO")
     protected HistoryWidget createHistoryWidget() {
         return new HistoryWidget<Job, RunT>(this, getBuilds(), HISTORY_ADAPTER);
     }

File: test/src/test/java/hudson/model/ComputerSetTest.java
Patch:
@@ -42,6 +42,8 @@
 import java.net.HttpURLConnection;
 import java.util.concurrent.Future;
 import jenkins.model.Jenkins;
+import jenkins.widgets.ExecutorsWidget;
+import jenkins.widgets.HasWidgetHelper;
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.Issue;
@@ -172,7 +174,7 @@ public void testTerminatedNodeAjaxExecutorsDoesNotShowTrace() throws Exception {
         );
 
         WebClient wc = j.createWebClient();
-        Page page = wc.getPage(wc.createCrumbedUrl("ajaxExecutors"));
+        Page page = wc.getPage(wc.createCrumbedUrl(HasWidgetHelper.getWidget(j.jenkins.getComputer(), ExecutorsWidget.class).orElseThrow().getUrl() + "ajax"));
         String content = page.getWebResponse().getContentAsString();
         assertThat(content, not(containsString(message)));
     }

File: core/src/main/java/jenkins/widgets/WidgetFactory.java
Patch:
@@ -71,7 +71,7 @@ public abstract class WidgetFactory<T extends HasWidgets, W extends Widget> impl
     public static <T extends HasWidgets, W extends Widget> Iterable<WidgetFactory<T,W>> factoriesFor(Class<T> type, Class<W> widgetType) {
         List<WidgetFactory<T,W>> result = new ArrayList<>();
         for (WidgetFactory wf : ExtensionList.lookup(WidgetFactory.class)) {
-            if (type.isAssignableFrom(wf.type()) && widgetType.isAssignableFrom(wf.widgetType())) {
+            if (wf.type().isAssignableFrom(type) && widgetType.isAssignableFrom(wf.widgetType())) {
                 result.add(wf);
             }
         }
@@ -80,7 +80,7 @@ public static <T extends HasWidgets, W extends Widget> Iterable<WidgetFactory<T,
 
     public Collection<W> createWidgetsFor(HasWidgets hasWidgets) {
         try {
-            Collection<W> result = createFor(type().cast(this));
+            Collection<W> result = createFor(type().cast(hasWidgets));
             for (W w : result) {
                 if (!widgetType().isInstance(w)) {
                     LOGGER.log(Level.WARNING, "Widgets from {0} for {1} included {2} not assignable to {3}", new Object[] {this, hasWidgets, w, widgetType()});

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -110,6 +110,7 @@
 import jenkins.util.ErrorLoggingExecutorService;
 import jenkins.util.Listeners;
 import jenkins.util.SystemProperties;
+import jenkins.widgets.HasWidgets;
 import net.jcip.annotations.GuardedBy;
 import org.apache.commons.lang.StringUtils;
 import org.jenkins.ui.icon.Icon;
@@ -160,7 +161,7 @@
  * @author Kohsuke Kawaguchi
  */
 @ExportedBean
-public /*transient*/ abstract class Computer extends Actionable implements AccessControlled, ExecutorListener, DescriptorByNameOwner, StaplerProxy {
+public /*transient*/ abstract class Computer extends Actionable implements AccessControlled, ExecutorListener, DescriptorByNameOwner, StaplerProxy, HasWidgets {
 
     private final CopyOnWriteArrayList<Executor> executors = new CopyOnWriteArrayList<>();
     // TODO:

File: core/src/main/java/hudson/model/ComputerSet.java
Patch:
@@ -57,6 +57,7 @@
 import jenkins.model.ModelObjectWithChildren;
 import jenkins.model.ModelObjectWithContextMenu.ContextMenu;
 import jenkins.util.Timer;
+import jenkins.widgets.HasWidgets;
 import net.sf.json.JSONObject;
 import org.kohsuke.stapler.HttpResponse;
 import org.kohsuke.stapler.QueryParameter;
@@ -75,7 +76,7 @@
  * @author Kohsuke Kawaguchi
  */
 @ExportedBean
-public final class ComputerSet extends AbstractModelObject implements Describable<ComputerSet>, ModelObjectWithChildren {
+public final class ComputerSet extends AbstractModelObject implements Describable<ComputerSet>, ModelObjectWithChildren, HasWidgets {
     /**
      * This is the owner that persists {@link #monitors}.
      */

File: core/src/main/java/jenkins/model/ModelObjectWithContextMenu.java
Patch:
@@ -2,7 +2,6 @@
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Functions;
-import hudson.Util;
 import hudson.model.Action;
 import hudson.model.Actionable;
 import hudson.model.BallColor;
@@ -414,7 +413,7 @@ public MenuItem withIconClass(String iconClass) {
         }
 
         public MenuItem withDisplayName(String displayName) {
-            this.displayName = Util.escape(displayName);
+            this.displayName = displayName;
             return this;
         }
 

File: core/src/main/java/jenkins/security/ResourceDomainConfiguration.java
Patch:
@@ -134,7 +134,7 @@ private FormValidation checkUrl(String resourceRootUrlString, boolean allowOnlin
 
         StaplerRequest currentRequest = Stapler.getCurrentRequest();
         if (currentRequest != null) {
-            String currentRequestHost = currentRequest.getHeader("Host");
+            String currentRequestHost = currentRequest.getServerName();
 
             if (currentRequestHost.equals(resourceRootUrlHost)) {
                 return FormValidation.error(Messages.ResourceDomainConfiguration_SameAsCurrent());

File: core/src/main/java/jenkins/websocket/WebSocketSession.java
Patch:
@@ -47,6 +47,7 @@ public abstract class WebSocketSession {
     /**
      * Number of seconds between server-sent pings.
      * Zero to disable.
+     * This value must be lower than the <code>jenkins.websocket.idleTimeout</code>.
      * <p><a href="https://nginx.org/en/docs/http/websocket.html">nginx docs</a> claim 60s timeout and this seems to match experiments.
      * <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/ingress#support_for_websocket">GKE docs</a> says 30s
      * but this is a total timeout, not inactivity, so you need to set {@code BackendConfigSpec.timeoutSec} anyway.

File: test/src/test/java/hudson/cli/RunRangeCommand2Test.java
Patch:
@@ -84,7 +84,7 @@ public class RunRangeCommand2Test {
 
     @Test public void dummyRangeShouldSuccessEvenTheBuildIsRunning() throws Exception {
         FreeStyleProject project = j.createFreeStyleProject("aProject");
-        project.getBuildersList().add(Functions.isWindows() ? new BatchFile("echo 1\r\nping -n 10 127.0.0.1 >nul") : new Shell("echo 1\nsleep 10s"));
+        project.getBuildersList().add(Functions.isWindows() ? new BatchFile("echo 1\r\nping -n 10 127.0.0.1 >nul") : new Shell("echo 1\nsleep 10"));
         FreeStyleBuild build = project.scheduleBuild2(0).waitForStart();
         j.waitForMessage("echo 1", build);
 
@@ -98,7 +98,7 @@ public class RunRangeCommand2Test {
 
     @Test public void dummyRangeShouldSuccessEvenTheBuildIsStuckInTheQueue() throws Exception {
         FreeStyleProject project = j.createFreeStyleProject("aProject");
-        project.getBuildersList().add(new Shell("echo 1\nsleep 10s"));
+        project.getBuildersList().add(new Shell("echo 1\nsleep 10"));
         project.setAssignedLabel(new LabelAtom("never_created"));
         assertNotNull(project.scheduleBuild2(0));
         Thread.sleep(1000);

File: test/src/test/java/hudson/util/ProcessTreeTest.java
Patch:
@@ -136,7 +136,7 @@ public void considersKillingVetos() throws Exception {
         if (File.pathSeparatorChar == ';') {
             pb.command("cmd");
         } else {
-            pb.command("sleep", "5m");
+            pb.command("sleep", "300");
         }
 
         process = pb.start();
@@ -160,7 +160,7 @@ public void considersKillingVetosOnSlave() throws Exception {
         if (File.pathSeparatorChar == ';') {
             pb.command("cmd");
         } else {
-            pb.command("sleep", "5m");
+            pb.command("sleep", "300");
         }
 
         // Create an agent so we can tell it to kill the process

File: test/src/test/java/hudson/cli/ConsoleCommandTest.java
Patch:
@@ -200,7 +200,7 @@ public class ConsoleCommandTest {
             project.getBuildersList().add(new BatchFile("echo start - %BUILD_NUMBER%\r\n"
                     + "ping -n 10 127.0.0.1 >nul\r\necho after sleep - %BUILD_NUMBER%"));
         } else {
-            project.getBuildersList().add(new Shell("echo start - ${BUILD_NUMBER}\nsleep 10s\n"
+            project.getBuildersList().add(new Shell("echo start - ${BUILD_NUMBER}\nsleep 10\n"
                     + "echo after sleep - ${BUILD_NUMBER}"));
         }
         FreeStyleBuild build = project.scheduleBuild2(0).waitForStart();
@@ -258,7 +258,7 @@ public class ConsoleCommandTest {
                     + "ping -n 10 127.0.0.1 >nul\r\necho 6\r\necho 7\r\necho 8\r\necho 9"));
         } else {
             project.getBuildersList().add(new Shell("echo 1\necho 2\necho 3\necho 4\necho 5\n"
-                    + "sleep 10s\n"
+                    + "sleep 10\n"
                     + "echo 6\necho 7\necho 8\necho 9"));
         }
 
@@ -285,7 +285,7 @@ public class ConsoleCommandTest {
     @Test public void consoleShouldFailIfTheBuildIsStuckInTheQueue() throws Exception {
 
         FreeStyleProject project = j.createFreeStyleProject("aProject");
-        project.getBuildersList().add(new Shell("echo 1\nsleep 10s"));
+        project.getBuildersList().add(new Shell("echo 1\nsleep 10"));
         project.setAssignedLabel(new LabelAtom("never_created"));
 
         assertNotNull(project.scheduleBuild2(0));

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -2225,7 +2225,7 @@ public JSONArray doPrevalidateConfig(StaplerRequest req) throws IOException {
     @RequirePOST
     public HttpResponse doInstallNecessaryPlugins(StaplerRequest req) throws IOException {
         prevalidateConfig(req.getInputStream());
-        return HttpResponses.redirectViaContextPath("updates/");
+        return HttpResponses.redirectViaContextPath("pluginManager/updates/");
     }
 
     /**

File: cli/src/main/java/hudson/cli/CLI.java
Patch:
@@ -124,7 +124,6 @@ public static int _main(String[] _args) throws Exception {
 
         boolean noKeyAuth = false;
 
-        // TODO perhaps allow mode to be defined by environment variable too (assuming $JENKINS_USER_ID can be used for -user)
         Mode mode = null;
 
         String user = null;
@@ -273,7 +272,7 @@ public boolean verify(String s, SSLSession sslSession) {
             args = List.of("help"); // default to help
 
         if (mode == null) {
-            mode = Mode.HTTP;
+            mode = Mode.WEB_SOCKET;
         }
 
         LOGGER.log(FINE, "using connection mode {0}", mode);

File: test/src/test/java/hudson/cli/CLIActionTest.java
Patch:
@@ -104,7 +104,7 @@ public void authentication() throws Exception {
     private static final String ADMIN = "admin@mycorp.com";
 
     private void assertExitCode(int code, boolean useApiToken, File jar, String... args) throws IOException, InterruptedException {
-        List<String> commands = new ArrayList<>(Arrays.asList("java", "-jar", jar.getAbsolutePath(), "-s", j.getURL().toString(), /* TODO until it is the default */ "-webSocket"));
+        List<String> commands = new ArrayList<>(Arrays.asList("java", "-jar", jar.getAbsolutePath(), "-s", j.getURL().toString()));
         if (useApiToken) {
             commands.add("-auth");
             commands.add(ADMIN + ":" + User.getOrCreateByIdOrFullName(ADMIN).getProperty(ApiTokenProperty.class).getApiToken());
@@ -140,7 +140,6 @@ public void encodingAndLocale() throws Exception {
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         assertEquals(0, new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(
             "java", "-Dfile.encoding=ISO-8859-2", "-Duser.language=cs", "-Duser.country=CZ", "-jar", jar.getAbsolutePath(),
-                "-webSocket", // TODO as above
                 "-s", j.getURL().toString()./* just checking */replaceFirst("/$", ""), "test-diagnostic").
             stdout(baos).stderr(System.err).join());
         assertEquals("encoding=ISO-8859-2 locale=cs_CZ", baos.toString(Charset.forName("ISO-8859-2")).trim());
@@ -160,7 +159,6 @@ public void interleavedStdio() throws Exception {
         PrintWriter pw = new PrintWriter(new OutputStreamWriter(new TeeOutputStream(pos, System.err), Charset.defaultCharset()), true);
         Proc proc = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(
             "java", "-jar", jar.getAbsolutePath(), "-s", j.getURL().toString(),
-                "-webSocket", // TODO as above
                 "groovysh").
             stdout(new TeeOutputStream(baos, System.out)).stderr(System.err).stdin(pis).start();
         while (!baos.toString(Charset.defaultCharset()).contains("000")) { // cannot just search for, say, "groovy:000> " since there are ANSI escapes there (cf. StringEscapeUtils.escapeJava)

File: test/src/test/java/hudson/console/HyperlinkNoteTest.java
Patch:
@@ -93,7 +93,7 @@ public void textWithSingleQuote() throws Exception {
     private static String annotate(String text) throws IOException {
         StringWriter writer = new StringWriter();
         try (ConsoleAnnotationOutputStream out = new ConsoleAnnotationOutputStream(writer, null, null, StandardCharsets.UTF_8)) {
-            IOUtils.copy(new StringReader(text), out);
+            IOUtils.copy(new StringReader(text), out, StandardCharsets.UTF_8);
         }
         return writer.toString();
     }

File: test/src/test/java/hudson/model/ListViewTest.java
Patch:
@@ -261,7 +261,7 @@ private void checkLinkFromItemExistsAndIsValid(Item item, ItemGroup ig, Item top
 
         when(req.getMethod()).thenReturn("POST");
         when(req.getParameter("name")).thenReturn("job1");
-        when(req.getInputStream()).thenReturn(new Stream(IOUtils.toInputStream(configXml)));
+        when(req.getInputStream()).thenReturn(new Stream(IOUtils.toInputStream(configXml, StandardCharsets.UTF_8)));
         when(req.getContentType()).thenReturn("application/xml");
         v.doCreateItem(req, rsp);
         List<TopLevelItem> items = v.getItems();

File: test/src/test/java/hudson/model/RSSTest.java
Patch:
@@ -183,7 +183,7 @@ public void latestBuilds_AllView() throws Exception {
     public void checkWithSingleBuild_Rss_All_Computer() throws Exception {
         runSuccessfulBuild();
 
-        String pathPrefix = "manage/computer/(built-in)/";
+        String pathPrefix = "computer/(built-in)/";
         String displayName = Messages.Hudson_Computer_DisplayName();
         String buildType = ALL_BUILD_TYPE;
         String buildTitle = STABLE_BUILD_TITLE;
@@ -195,7 +195,7 @@ public void checkWithSingleBuild_Rss_All_Computer() throws Exception {
     public void checkWithSingleBuild_Rss_Failed_Computer() throws Exception {
         runFailingBuild();
 
-        String pathPrefix = "manage/computer/(built-in)/";
+        String pathPrefix = "computer/(built-in)/";
         String displayName = Messages.Hudson_Computer_DisplayName();
         String buildType = FAILED_BUILD_TYPE;
         String buildTitle = FAILED_BUILD_TITLE;
@@ -205,7 +205,7 @@ public void checkWithSingleBuild_Rss_Failed_Computer() throws Exception {
 
     @Test
     public void latestBuilds_Computer() throws Exception {
-        String pathPrefix = "manage/computer/(built-in)/";
+        String pathPrefix = "computer/(built-in)/";
         String displayName = Messages.Hudson_Computer_DisplayName();
         String buildType = LATEST_BUILD_TYPE;
         int expectedLinks = 3;

File: war/src/main/java/executable/Main.java
Patch:
@@ -361,15 +361,13 @@ public static void main(String[] args) throws IllegalAccessException {
         }
     }
 
-    // TODO: Get rid of FB warning after updating to Java 7
     /**
-     * reads up to maxRead bytes from InputStream if available into a String
+     * Reads up to maxRead bytes from InputStream if available into a String
      *
      * @param in input stream to be read
      * @param maxToRead maximum number of bytes to read from the in
      * @return a String read from in
      */
-    @SuppressFBWarnings(value = {"DM_DEFAULT_ENCODING", "RR_NOT_CHECKED"}, justification = "Legacy behavior, We expect less input than maxToRead")
     private static String readStringNonBlocking(InputStream in, int maxToRead) {
         byte[] buffer;
         try {

File: war/src/main/java/executable/Main.java
Patch:
@@ -361,15 +361,13 @@ public static void main(String[] args) throws IllegalAccessException {
         }
     }
 
-    // TODO: Get rid of FB warning after updating to Java 7
     /**
-     * reads up to maxRead bytes from InputStream if available into a String
+     * Reads up to maxRead bytes from InputStream if available into a String
      *
      * @param in input stream to be read
      * @param maxToRead maximum number of bytes to read from the in
      * @return a String read from in
      */
-    @SuppressFBWarnings(value = {"DM_DEFAULT_ENCODING", "RR_NOT_CHECKED"}, justification = "Legacy behavior, We expect less input than maxToRead")
     private static String readStringNonBlocking(InputStream in, int maxToRead) {
         byte[] buffer;
         try {

File: test/src/test/java/hudson/cli/CLIActionTest.java
Patch:
@@ -48,7 +48,6 @@
 import org.jvnet.hudson.test.LoggerRule;
 import org.jvnet.hudson.test.MockAuthorizationStrategy;
 import org.jvnet.hudson.test.TestExtension;
-import org.jvnet.hudson.test.recipes.PresetData;
 import org.kohsuke.args4j.Option;
 
 public class CLIActionTest {
@@ -62,9 +61,10 @@ public class CLIActionTest {
     public LoggerRule logging = new LoggerRule();
 
     @Test
-    @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS)
     @Issue("SECURITY-192")
     public void serveCliActionToAnonymousUserWithoutPermissions() throws Exception {
+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());
         JenkinsRule.WebClient wc = j.createWebClient();
         // The behavior changed due to SECURITY-192. index page is no longer accessible to anonymous
         wc.assertFails("cli", HttpURLConnection.HTTP_FORBIDDEN);

File: test/src/test/java/lib/layout/AjaxTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.Test;
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
-import org.jvnet.hudson.test.recipes.PresetData;
+import org.jvnet.hudson.test.MockAuthorizationStrategy;
 import org.kohsuke.stapler.jelly.JellyFacet;
 
 public class AjaxTest {
@@ -40,8 +40,9 @@ public class AjaxTest {
     public JenkinsRule r = new JenkinsRule();
 
     @Issue("JENKINS-21254")
-    @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS)
     @Test public void rejectedLinks() throws Exception {
+        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
+        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());
         JenkinsRule.WebClient wc = r.createWebClient();
         String prefix = r.contextPath + '/';
         for (DomElement e : wc.goTo("login").getElementsByTagName("link")) {

File: test/src/test/java/lib/layout/LayoutTest.java
Patch:
@@ -30,15 +30,16 @@
 import org.junit.Test;
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
-import org.jvnet.hudson.test.recipes.PresetData;
+import org.jvnet.hudson.test.MockAuthorizationStrategy;
 
 public class LayoutTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
     @Issue("JENKINS-21254")
-    @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS)
     @Test public void rejectedLinks() throws Exception {
+        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
+        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());
         JenkinsRule.WebClient wc = r.createWebClient();
         String prefix = r.contextPath + '/';
         for (DomElement e : wc.goTo("login").getElementsByTagName("link")) {

File: core/src/main/java/jenkins/diagnostics/URICheckEncodingMonitor.java
Patch:
@@ -43,7 +43,7 @@ public FormValidation doCheckURIEncoding(StaplerRequest request) throws IOExcept
 
         if (!expected.equals(value)) {
             String expectedHex = Util.toHexString(expected.getBytes(StandardCharsets.UTF_8));
-            String valueHex = Util.toHexString(value.getBytes(StandardCharsets.UTF_8));
+            String valueHex = value != null ? Util.toHexString(value.getBytes(StandardCharsets.UTF_8)) : null;
             LOGGER.log(Level.CONFIG, "Expected to receive: " + expected + " (" + expectedHex + ") but got: " + value + " (" + valueHex + ")");
             return FormValidation.warningWithMarkup(hudson.model.Messages.Hudson_NotUsesUTF8ToDecodeURL());
         }

File: core/src/main/java/jenkins/diagnostics/URICheckEncodingMonitor.java
Patch:
@@ -43,7 +43,7 @@ public FormValidation doCheckURIEncoding(StaplerRequest request) throws IOExcept
 
         if (!expected.equals(value)) {
             String expectedHex = Util.toHexString(expected.getBytes(StandardCharsets.UTF_8));
-            String valueHex = Util.toHexString(value.getBytes(StandardCharsets.UTF_8));
+            String valueHex = value != null ? Util.toHexString(value.getBytes(StandardCharsets.UTF_8)) : "<empty string>";
             LOGGER.log(Level.CONFIG, "Expected to receive: " + expected + " (" + expectedHex + ") but got: " + value + " (" + valueHex + ")");
             return FormValidation.warningWithMarkup(hudson.model.Messages.Hudson_NotUsesUTF8ToDecodeURL());
         }

File: core/src/test/java/org/jenkins/ui/icon/IconSetTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.jenkins.ui.icon;
 
-import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.hamcrest.Matchers.not;
 

File: core/src/main/java/jenkins/util/ErrorLoggingExecutorService.java
Patch:
@@ -34,6 +34,7 @@
  * Executor service that logs unchecked exceptions / errors in {@link Runnable}.
  * Exceptions thrown from {@link Callable} are <em>not</em> not logged,
  * under the assumption that something is checking {@link Future#get()}.
+ * @since TODO
  */
 public class ErrorLoggingExecutorService extends InterceptingExecutorService {
 

File: core/src/main/java/hudson/util/ExceptionCatchingThreadFactory.java
Patch:
@@ -35,6 +35,7 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.226
+ * @see jenkins.util.ErrorLoggingExecutorService
  */
 public class ExceptionCatchingThreadFactory implements ThreadFactory, Thread.UncaughtExceptionHandler {
     private final ThreadFactory core;

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -195,7 +195,6 @@
  * @author Kohsuke Kawaguchi
  */
 @ExportedBean
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION", justification = "TODO needs triage")
 public abstract class PluginManager extends AbstractModelObject implements OnMaster, StaplerOverridable, StaplerProxy {
     /** Custom plugin manager system property or context param. */
     public static final String CUSTOM_PLUGIN_MANAGER = PluginManager.class.getName() + ".className";

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -111,7 +111,6 @@
 // Item doesn't necessarily have to be Actionable, but
 // Java doesn't let multiple inheritance.
 @ExportedBean
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_THROWABLE", justification = "TODO needs triage")
 public abstract class AbstractItem extends Actionable implements Item, HttpDeletable, AccessControlled, DescriptorByNameOwner, StaplerProxy {
 
     private static final Logger LOGGER = Logger.getLogger(AbstractItem.class.getName());

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -24,7 +24,6 @@
 
 package hudson.model;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Util;
 import hudson.XmlFile;
 import hudson.model.listeners.ItemListener;
@@ -62,7 +61,6 @@
  * @author Kohsuke Kawaguchi
  * @see ViewGroupMixIn
  */
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_THROWABLE", justification = "TODO needs triage")
 public abstract class ItemGroupMixIn {
     /**
      * {@link ItemGroup} for which we are working.

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -171,7 +171,6 @@
  * @see QueueTaskDispatcher
  */
 @ExportedBean
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION", justification = "TODO needs triage")
 public class Queue extends ResourceController implements Saveable {
 
     /**

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -105,7 +105,6 @@
  * @since 1.333
  */
 @ExportedBean
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION", justification = "TODO needs triage")
 public class UpdateSite {
     /**
      * What's the time stamp of data file?

File: core/src/main/java/hudson/triggers/SafeTimerTask.java
Patch:
@@ -24,7 +24,6 @@
 
 package hudson.triggers;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.AperiodicWork;
 import hudson.model.AsyncAperiodicWork;
 import hudson.model.AsyncPeriodicWork;
@@ -48,7 +47,6 @@
  * @author Kohsuke Kawaguchi
  * @since 1.124
  */
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION", justification = "TODO needs triage")
 public abstract class SafeTimerTask extends TimerTask {
 
     /**

File: core/src/main/java/hudson/util/InterceptingProxy.java
Patch:
@@ -1,6 +1,5 @@
 package hudson.util;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -11,7 +10,6 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_THROWABLE", justification = "TODO needs triage")
 public abstract class InterceptingProxy {
     /**
      * Intercepts every method call.

File: core/src/main/java/hudson/util/RobustReflectionConverter.java
Patch:
@@ -44,7 +44,6 @@
 import com.thoughtworks.xstream.mapper.Mapper;
 import com.thoughtworks.xstream.security.InputManipulationException;
 import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.diagnosis.OldDataMonitor;
 import hudson.model.Saveable;
 import hudson.security.ACL;
@@ -78,7 +77,6 @@
  * </ul>
  *
  */
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_RUNTIMEEXCEPTION", justification = "TODO needs triage")
 @SuppressWarnings({"rawtypes", "unchecked"})
 public class RobustReflectionConverter implements Converter {
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -338,7 +338,6 @@
  * @author Kohsuke Kawaguchi
  */
 @ExportedBean
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION", justification = "TODO needs triage")
 public class Jenkins extends AbstractCIBase implements DirectlyModifiableTopLevelItemGroup, StaplerProxy, StaplerFallback,
         ModifiableViewGroup, AccessControlled, DescriptorByNameOwner,
         ModelObjectWithContextMenu, ModelObjectWithChildren, OnMaster {

File: core/src/main/java/jenkins/model/Nodes.java
Patch:
@@ -26,7 +26,6 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.BulkChange;
 import hudson.Util;
 import hudson.XmlFile;
@@ -62,7 +61,6 @@
  * @since 1.607
  */
 @Restricted(NoExternalUse.class) // for now, we may make it public later
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION", justification = "TODO needs triage")
 public class Nodes implements Saveable {
 
     /**

File: core/src/main/java/jenkins/model/PeepholePermalink.java
Patch:
@@ -2,7 +2,6 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.Util;
 import hudson.model.Job;
@@ -147,7 +146,6 @@ protected File getPermalinkFile(Job<?, ?> job) {
         }
     }
 
-    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE", justification = "https://github.com/spotbugs/spotbugs/issues/756")
     private static @NonNull Map<String, Integer> load(@NonNull File buildDir) {
         Map<String, Integer> cache = new TreeMap<>();
         File storage = storageFor(buildDir);

File: core/src/main/java/jenkins/model/TransientActionFactory.java
Patch:
@@ -28,7 +28,6 @@
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
 import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.ExtensionList;
 import hudson.ExtensionListListener;
 import hudson.ExtensionPoint;
@@ -49,7 +48,6 @@
  * @see Actionable#getAllActions
  * @since 1.548
  */
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION", justification = "TODO needs triage")
 public abstract class TransientActionFactory<T> implements ExtensionPoint {
 
     /**

File: core/src/main/java/jenkins/scm/RunWithSCM.java
Patch:
@@ -26,7 +26,6 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.Job;
 import hudson.model.Result;
 import hudson.model.Run;
@@ -48,7 +47,6 @@
  *
  * @since 2.60
  */
-@SuppressFBWarnings(value = "NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE", justification = "TODO needs triage")
 public interface RunWithSCM<JobT extends Job<JobT, RunT>,
         RunT extends Run<JobT, RunT> & RunWithSCM<JobT, RunT>> {
 

File: core/src/main/java/jenkins/security/ImpersonatingExecutorService.java
Patch:
@@ -24,7 +24,6 @@
 
 package jenkins.security;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.security.ACL;
 import hudson.security.ACLContext;
 import java.util.concurrent.Callable;
@@ -37,7 +36,6 @@
  * @see SecurityContextExecutorService
  * @since 2.51
  */
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION", justification = "TODO needs triage")
 public final class ImpersonatingExecutorService extends InterceptingExecutorService {
 
     private final Authentication authentication;

File: core/src/main/java/jenkins/security/ImpersonatingScheduledExecutorService.java
Patch:
@@ -24,7 +24,6 @@
 
 package jenkins.security;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.security.ACL;
 import hudson.security.ACLContext;
 import java.util.concurrent.Callable;
@@ -36,7 +35,6 @@
  * Variant of {@link ImpersonatingExecutorService} for scheduled services.
  * @since 2.51
  */
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION", justification = "TODO needs triage")
 public final class ImpersonatingScheduledExecutorService extends InterceptingScheduledExecutorService {
 
     private final Authentication authentication;

File: core/src/main/java/jenkins/security/SecurityContextExecutorService.java
Patch:
@@ -27,7 +27,6 @@
 import static org.springframework.security.core.context.SecurityContextHolder.getContext;
 import static org.springframework.security.core.context.SecurityContextHolder.setContext;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
 import jenkins.util.InterceptingExecutorService;
@@ -44,7 +43,6 @@
  * @author Kohsuke Kawaguchi
  * @since 1.561
  */
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION", justification = "TODO needs triage")
 public class SecurityContextExecutorService extends InterceptingExecutorService {
 
     public SecurityContextExecutorService(ExecutorService service) {

File: core/src/main/java/jenkins/util/AtmostOneTaskExecutor.java
Patch:
@@ -44,7 +44,6 @@
  * @author Kohsuke Kawaguchi
  * @see AtmostOneThreadExecutor
  */
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION", justification = "TODO needs triage")
 public class AtmostOneTaskExecutor<V> {
 
     private static final Logger LOGGER = Logger.getLogger(AtmostOneTaskExecutor.class.getName());

File: core/src/main/java/jenkins/util/ContextResettingExecutorService.java
Patch:
@@ -1,6 +1,5 @@
 package jenkins.util;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
 
@@ -12,7 +11,6 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION", justification = "TODO needs triage")
 public class ContextResettingExecutorService extends InterceptingExecutorService {
     public ContextResettingExecutorService(ExecutorService base) {
         super(base);

File: core/src/main/java/jenkins/util/ProgressiveRendering.java
Patch:
@@ -25,7 +25,6 @@
 package jenkins.util;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.AbstractItem;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationHandler;
@@ -74,7 +73,6 @@
  * {@code ui-samples-plugin} demonstrates all this.
  * @since 1.484
  */
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_CLAUSE_THROWABLE", justification = "TODO needs triage")
 public abstract class ProgressiveRendering {
 
     private static final Logger LOG = Logger.getLogger(ProgressiveRendering.class.getName());

File: core/src/main/java/jenkins/util/io/PathRemover.java
Patch:
@@ -214,7 +214,6 @@ private List<IOException> tryRemoveRecursive(@NonNull Path path) {
         return accumulatedErrors;
     }
 
-    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE", justification = "https://github.com/spotbugs/spotbugs/issues/756")
     private List<IOException> tryRemoveDirectoryContents(@NonNull Path path) {
         Path normalized = path.normalize();
         List<IOException> accumulatedErrors = new ArrayList<>();
@@ -229,7 +228,6 @@ private List<IOException> tryRemoveDirectoryContents(@NonNull Path path) {
         return accumulatedErrors;
     }
 
-    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE", justification = "https://github.com/spotbugs/spotbugs/issues/756")
     private void removeOrMakeRemovableThenRemove(@NonNull Path path) throws IOException {
         pathChecker.check(path);
         try {

File: core/src/main/java/org/acegisecurity/providers/dao/AbstractUserDetailsAuthenticationProvider.java
Patch:
@@ -24,7 +24,6 @@
 
 package org.acegisecurity.providers.dao;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.acegisecurity.AcegiSecurityException;
 import org.acegisecurity.Authentication;
 import org.acegisecurity.AuthenticationException;
@@ -36,7 +35,6 @@
  * @deprecated use {@link org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider}
  */
 @Deprecated
-@SuppressFBWarnings(value = "THROWS_METHOD_THROWS_RUNTIMEEXCEPTION", justification = "TODO needs triage")
 public abstract class AbstractUserDetailsAuthenticationProvider implements AuthenticationProvider {
 
     private final org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider delegate =

File: war/src/main/java/executable/Main.java
Patch:
@@ -182,8 +182,8 @@ private static boolean hasArgument(@NonNull String argument, @NonNull String[] a
     }
 
     @SuppressFBWarnings(
-            value = {"PATH_TRAVERSAL_IN", "THROWS_METHOD_THROWS_RUNTIMEEXCEPTION"},
-            justification = "User provided values for running the program and intentional propagation of reflection errors")
+            value = "PATH_TRAVERSAL_IN",
+            justification = "User provided values for running the program")
     public static void main(String[] args) throws IllegalAccessException {
         try {
             verifyJavaVersion(getReleaseVersion(), isFutureJavaEnabled(args));

File: core/src/main/java/hudson/model/AsyncAperiodicWork.java
Patch:
@@ -64,7 +64,7 @@ public abstract class AsyncAperiodicWork extends AperiodicWork {
      * @since 1.651
      */
     private static final long LOG_ROTATE_SIZE = SystemProperties.getLong(AsyncAperiodicWork.class.getName() + ".logRotateSize",
-            -1L);
+        10485760L);
     /**
      * The number of milliseconds (since startup or previous rotation) after which to try and rotate the log file.
      *

File: core/src/main/java/hudson/model/AsyncPeriodicWork.java
Patch:
@@ -45,7 +45,7 @@ public abstract class AsyncPeriodicWork extends PeriodicWork {
      *
      * @since 1.651
      */
-    private static final long LOG_ROTATE_SIZE = SystemProperties.getLong(AsyncPeriodicWork.class.getName() + ".logRotateSize", -1L);
+    private static final long LOG_ROTATE_SIZE = SystemProperties.getLong(AsyncPeriodicWork.class.getName() + ".logRotateSize", 10485760L);
     /**
      * The number of milliseconds (since startup or previous rotation) after which to try and rotate the log file.
      *

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -212,6 +212,7 @@ public String getDisplayName() {
         }
     }
 
+    @SuppressFBWarnings(value = "UNSAFE_HASH_EQUALS", justification = "only checked against true")
     private void createInitialApiToken(User user) throws IOException, InterruptedException {
         ApiTokenProperty apiTokenProperty = user.getProperty(ApiTokenProperty.class);
 

File: core/src/main/java/jenkins/security/ApiTokenProperty.java
Patch:
@@ -175,6 +175,7 @@ public boolean hasLegacyToken() {
 
     @NonNull
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings(value = "UNSAFE_HASH_EQUALS", justification = "Used to prevent use of pre-2013 API tokens, then returning the API token value")
     /*package*/ String getApiTokenInsecure() {
         if (apiToken == null) {
             return Messages.ApiTokenProperty_NoLegacyToken();

File: core/src/main/java/jenkins/security/apitoken/ApiTokenStore.java
Patch:
@@ -27,6 +27,7 @@
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Util;
 import hudson.util.Secret;
 import java.io.Serializable;
@@ -193,6 +194,7 @@ private void addLegacyToken(@NonNull Secret legacyToken, boolean migrationFromEx
      * Be careful with this method. Depending on how the tokenPlainValue was stored/sent to this method,
      * it could be a good idea to generate a new token randomly and revoke this one.
      */
+    @SuppressFBWarnings(value = "UNSAFE_HASH_EQUALS", justification = "Comparison only validates version of the specified token")
     public synchronized @NonNull String addFixedNewToken(@NonNull String name, @NonNull String tokenPlainValue) {
         if (tokenPlainValue.length() != VERSION_LENGTH + HEX_CHAR_LENGTH) {
             LOGGER.log(Level.INFO, "addFixedNewToken, length received: {0}" + tokenPlainValue.length());
@@ -303,6 +305,7 @@ private boolean isLegacyToken(@NonNull String token) {
      * @param tokenUuid The identifier of the token, could be retrieved directly from the {@link HashedToken#getUuid()}
      * @return the revoked token corresponding to the given {@code tokenUuid} if one was found, otherwise {@code null}
      */
+    @SuppressFBWarnings(value = "UNSAFE_HASH_EQUALS", justification = "Only used during revocation.")
     public synchronized @CheckForNull HashedToken revokeToken(@NonNull String tokenUuid) {
         for (Iterator<HashedToken> iterator = tokenList.iterator(); iterator.hasNext(); ) {
             HashedToken token = iterator.next();

File: test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java
Patch:
@@ -38,6 +38,7 @@
 import org.jvnet.hudson.test.JenkinsRule.WebClient;
 import org.jvnet.hudson.test.MockAuthorizationStrategy;
 import org.jvnet.hudson.test.recipes.PresetData;
+import org.jvnet.hudson.test.recipes.WithTimeout;
 
 /**
  * @author dty
@@ -169,6 +170,7 @@ public class DefaultCrumbIssuerTest {
 
     @Test
     @Issue("SECURITY-626")
+    @WithTimeout(300)
     public void crumbOnlyValidForOneSession() throws Exception {
         r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
         DefaultCrumbIssuer issuer = new DefaultCrumbIssuer(false);

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -240,6 +240,7 @@
 import java.util.TreeSet;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
@@ -529,7 +530,7 @@ public class Jenkins extends AbstractCIBase implements DirectlyModifiableTopLeve
     /**
      * {@link Computer}s in this Jenkins system. Read-only.
      */
-    protected final transient Map<Node, Computer> computers = new CopyOnWriteMap.Hash<>();
+    protected final transient ConcurrentMap<Node, Computer> computers = new ConcurrentHashMap<>();
 
     /**
      * Active {@link Cloud}s.
@@ -2178,7 +2179,7 @@ public Cloud getCloud(String name) {
     }
 
     @Override
-    protected Map<Node, Computer> getComputerMap() {
+    protected ConcurrentMap<Node, Computer> getComputerMap() {
         return computers;
     }
 

File: websocket/jetty10/src/main/java/jenkins/websocket/Jetty10Provider.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
+import java.util.Collections;
 import java.util.Map;
 import java.util.WeakHashMap;
 import java.util.concurrent.CompletableFuture;
@@ -49,7 +50,7 @@ public class Jetty10Provider implements Provider {
     private static final String ATTR_LISTENER = Jetty10Provider.class.getName() + ".listener";
 
     // TODO does not seem possible to use HttpServletRequest.get/setAttribute for this
-    private static final Map<Listener, Session> sessions = new WeakHashMap<>();
+    private static final Map<Listener, Session> sessions = Collections.synchronizedMap(new WeakHashMap<>());
 
     public Jetty10Provider() {
         JettyWebSocketServerContainer.class.hashCode();

File: websocket/jetty9/src/main/java/jenkins/websocket/Jetty9Provider.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
+import java.util.Collections;
 import java.util.Map;
 import java.util.WeakHashMap;
 import java.util.concurrent.Future;
@@ -48,7 +49,7 @@ public class Jetty9Provider implements Provider {
     private static final String ATTR_LISTENER = Jetty9Provider.class.getName() + ".listener";
 
     // TODO does not seem possible to use HttpServletRequest.get/setAttribute for this
-    private static final Map<Listener, Session> sessions = new WeakHashMap<>();
+    private static final Map<Listener, Session> sessions = Collections.synchronizedMap(new WeakHashMap<>());
 
     private WebSocketServletFactory factory;
 

File: core/src/main/java/hudson/model/TaskListener.java
Patch:
@@ -38,7 +38,6 @@
 import java.util.Formatter;
 import org.jenkinsci.remoting.SerializableOnlyOverRemoting;
 import org.kohsuke.accmod.Restricted;
-import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.accmod.restrictions.ProtectedExternally;
 
 /**
@@ -83,8 +82,7 @@ default Charset getCharset() {
         return StandardCharsets.UTF_8;
     }
 
-    @Restricted(NoExternalUse.class) // TODO Java 9 make private
-    default PrintWriter _error(String prefix, String msg) {
+    private PrintWriter _error(String prefix, String msg) {
         PrintStream out = getLogger();
         out.print(prefix);
         out.println(msg);

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -5095,7 +5095,7 @@ public boolean isSubjectToMandatoryReadPermissionCheck(String restOfPath) {
     }
 
     private boolean isAgentJnlpPath(String restOfPath, String prefix) {
-        return restOfPath.matches("/computer/[^/]+/" + prefix + "-agent[.]jnlp");
+        return restOfPath.matches("(/manage)?/computer/[^/]+/" + prefix + "-agent[.]jnlp");
     }
 
     /**

File: core/src/main/java/hudson/util/AdministrativeError.java
Patch:
@@ -11,7 +11,9 @@
  * These errors are registered when instances are created. No need to use {@link Extension}.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated Implement {@link hudson.model.AdministrativeMonitor} directly instead.
  */
+@Deprecated
 public class AdministrativeError extends AdministrativeMonitor {
     public final String message;
     public final String title;

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -2341,7 +2341,7 @@ public static String extractPluginNameFromIconSrc(String iconSrc) {
         String[] arr = iconSrc.split(" ");
         for (String element : arr) {
             if (element.startsWith("plugin-")) {
-                return element.replace("plugin-", "");
+                return element.replaceFirst("plugin-", "");
             }
         }
 

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -1265,7 +1265,7 @@ public void updateByXml(Source source) throws IOException {
     public ModelObjectWithContextMenu.ContextMenu doChildrenContextMenu(StaplerRequest request, StaplerResponse response) throws Exception {
         ModelObjectWithContextMenu.ContextMenu m = new ModelObjectWithContextMenu.ContextMenu();
         for (TopLevelItem i : getItems())
-            m.add(i.getShortUrl(), i.getDisplayName());
+            m.add(Functions.getRelativeLinkTo(i), Functions.getRelativeDisplayNameFrom(i, getOwner().getItemGroup()));
         return m;
     }
 

File: core/src/main/java/hudson/util/BootFailure.java
Patch:
@@ -8,7 +8,7 @@
 import java.nio.charset.Charset;
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
-import java.text.DateFormat;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
@@ -64,7 +64,8 @@ protected List<Date> loadAttempts(File home) {
                 if (f.exists()) {
                     try (BufferedReader failureFileReader = Files.newBufferedReader(f.toPath(), Charset.defaultCharset())) {
                         String line;
-                        DateFormat df = DateFormat.getDateInstance();
+                        // WebAppMain.recordBootAttempt uses Date.toString when writing, so that is the format we must parse.
+                        SimpleDateFormat df = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
                         while ((line = failureFileReader.readLine()) != null) {
                             try {
                                 dates.add(df.parse(line));

File: test/src/test/java/hudson/util/BootFailureTest.java
Patch:
@@ -150,7 +150,7 @@ public void runBootFailureScript() throws Exception {
     }
 
     private static int bootFailures(File home) throws IOException {
-        return FileUtils.readLines(BootFailure.getBootFailureFile(home), StandardCharsets.UTF_8).size();
+        return new BootFailure() { }.loadAttempts(home).size();
     }
 
     @Issue("JENKINS-24696")

File: core/src/main/java/hudson/util/BootFailure.java
Patch:
@@ -8,7 +8,7 @@
 import java.nio.charset.Charset;
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
-import java.text.DateFormat;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
@@ -64,7 +64,8 @@ protected List<Date> loadAttempts(File home) {
                 if (f.exists()) {
                     try (BufferedReader failureFileReader = Files.newBufferedReader(f.toPath(), Charset.defaultCharset())) {
                         String line;
-                        DateFormat df = DateFormat.getDateInstance();
+                        // WebAppMain.recordBootAttempt uses Date.toString when writing, so that is the format we must parse.
+                        SimpleDateFormat df = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
                         while ((line = failureFileReader.readLine()) != null) {
                             try {
                                 dates.add(df.parse(line));

File: test/src/test/java/hudson/util/BootFailureTest.java
Patch:
@@ -150,7 +150,7 @@ public void runBootFailureScript() throws Exception {
     }
 
     private static int bootFailures(File home) throws IOException {
-        return FileUtils.readLines(BootFailure.getBootFailureFile(home), StandardCharsets.UTF_8).size();
+        return new BootFailure() { }.loadAttempts(home).size();
     }
 
     @Issue("JENKINS-24696")

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -1437,7 +1437,7 @@ public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParamete
                         jsonObject.put("releaseTimestamp", releaseTimestamp);
                     }
                     if (hasLatestVersionNewerThanOffered(plugin)) {
-                        jsonObject.put("newerVersionAvailableNotOffered", Messages.PluginManager_newerVersionExists(plugin.latest));
+                        jsonObject.put("newerVersionAvailableNotOffered", Messages.PluginManager_newerVersionExists(plugin.latest, plugin.wiki));
                     }
                     return jsonObject;
                 })

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -717,5 +717,5 @@ protected URL findResource(String name) {
     }
 
     @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
-    public static /* not final */ boolean useAntClassLoader = SystemProperties.getBoolean(ClassicPluginStrategy.class.getName() + ".useAntClassLoader", true);
+    public static /* not final */ boolean useAntClassLoader = SystemProperties.getBoolean(ClassicPluginStrategy.class.getName() + ".useAntClassLoader");
 }

File: core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java
Patch:
@@ -9,6 +9,7 @@
 import hudson.model.Computer;
 import hudson.model.Slave;
 import hudson.remoting.Channel;
+import hudson.remoting.ChannelClosedException;
 import hudson.slaves.ComputerLauncher;
 import hudson.slaves.ComputerLauncherFilter;
 import hudson.slaves.DelegatingComputerLauncher;
@@ -188,7 +189,7 @@ public void afterChannel(@NonNull JnlpConnectionState event) {
     public void channelClosed(@NonNull JnlpConnectionState event) {
         final String nodeName = event.getProperty(JnlpConnectionState.CLIENT_NAME_KEY);
         IOException cause = event.getCloseCause();
-        if (cause instanceof ClosedChannelException) {
+        if (cause instanceof ClosedChannelException || cause instanceof ChannelClosedException) {
             LOGGER.log(Level.INFO, "{0} for {1} terminated: {2}", new Object[] {Thread.currentThread().getName(), nodeName, cause});
         } else if (cause != null) {
             LOGGER.log(Level.WARNING, Thread.currentThread().getName() + " for " + nodeName + " terminated",

File: test/src/test/java/lib/layout/IconTest.java
Patch:
@@ -94,7 +94,7 @@ public void testBallColorTd() throws Exception {
 
         DomElement ballColorAborted = p.getElementById("ballColorAborted");
         List<DomElement> ballIcons = StreamSupport.stream(ballColorAborted.getChildElements().spliterator(), false).collect(Collectors.toList());
-        assertIconToSvgIconOkay(ballIcons.get(0).getFirstElementChild(), "icon-aborted");
+        assertIconToSvgIconOkay(ballIcons.get(0).getFirstElementChild(), "icon-aborted icon-md");
 
         DomElement statusIcons = p.getElementById("statusIcons");
         List<DomElement> statusIconsList = StreamSupport.stream(statusIcons.getChildElements().spliterator(), false).collect(Collectors.toList());

File: test/src/test/java/jenkins/security/BasicHeaderApiTokenAuthenticatorTest.java
Patch:
@@ -165,7 +165,7 @@ public <T> boolean allows(Class<T> type, ExtensionComponent<T> component) {
         }
     }
 
-    private static void enableLegacyTokenGenerationOnUserCreation() throws Exception {
+    private static void enableLegacyTokenGenerationOnUserCreation() {
         ApiTokenPropertyConfiguration apiTokenConfiguration = GlobalConfiguration.all().getInstance(ApiTokenPropertyConfiguration.class);
         // by default it's false
         apiTokenConfiguration.setTokenGenerationOnCreationEnabled(true);

File: test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java
Patch:
@@ -108,7 +108,7 @@ private void makeRequestAndFail() throws IOException, SAXException {
         makeRequestWithAuthCodeAndFail(null);
     }
 
-    private void makeRequestAndVerify(String expectedLogin) throws IOException, SAXException {
+    private void makeRequestAndVerify(String expectedLogin) throws IOException {
         makeRequestWithAuthCodeAndVerify(null, expectedLogin);
     }
 
@@ -163,7 +163,7 @@ private void makeRequestWithAuthCodeAndVerify(String authCode, String expectedLo
         assertEquals(expectedLogin, p.getWebResponse().getContentAsString());
     }
 
-    private void makeRequestWithAuthCodeAndFail(String authCode) throws IOException, SAXException {
+    private void makeRequestWithAuthCodeAndFail(String authCode) throws IOException {
         try {
             makeRequestWithAuthCodeAndVerify(authCode, "-");
             fail();

File: test/src/test/java/jenkins/security/ResourceDomainTest.java
Patch:
@@ -271,12 +271,12 @@ public void projectWasRenamedCauses404() throws Exception {
     }
 
 //    @Test
-    public void indexFileIsUsedIfDefined() throws Exception {
+    public void indexFileIsUsedIfDefined() {
         // TODO Test with DBS with and without directory index file
     }
 
     @Test
-    public void adminMonitorShowsUpWithOverriddenCSP() throws Exception {
+    public void adminMonitorShowsUpWithOverriddenCSP() {
         ResourceDomainRecommendation monitor = ExtensionList.lookupSingleton(ResourceDomainRecommendation.class);
         Assert.assertFalse(monitor.isActivated());
         System.setProperty(DirectoryBrowserSupport.class.getName() + ".CSP", "");
@@ -310,7 +310,7 @@ public void testColonUserName() throws Exception {
     }
 
     @Test
-    public void testRedirectUrls() throws Exception {
+    public void testRedirectUrls() {
         ResourceDomainRootAction rootAction = ResourceDomainRootAction.get();
         String url = rootAction.getRedirectUrl(new ResourceDomainRootAction.Token("foo", "bar", Instant.now()), "foo bar baz");
         Assert.assertFalse("urlencoded", url.contains(" "));

File: test/src/test/java/jenkins/security/Security218Test.java
Patch:
@@ -71,7 +71,7 @@ public void jnlpSlave() throws Exception {
      * returns a malicious response.
      */
     @SuppressWarnings("ConstantConditions")
-    private void check(DumbSlave s) throws Exception {
+    private void check(DumbSlave s) {
         try {
             Object o = s.getComputer().getChannel().call(new EvilReturnValue());
             fail("Expected the connection to die: " + o);

File: test/src/test/java/jenkins/security/Security380Test.java
Patch:
@@ -90,7 +90,7 @@ public String getUrlName() {
         }
 
         public HttpResponse doIndex() throws Exception {
-            return HttpResponses.plainText(Integer.toString(Jenkins.get().getItems().size()));
+            return HttpResponses.text(Integer.toString(Jenkins.get().getItems().size()));
         }
     }
 }

File: test/src/test/java/jenkins/security/SecurityContextExecutorServiceTest.java
Patch:
@@ -113,7 +113,7 @@ public void run() {
     public void testCallableAgainstAllContexts() throws Exception {
         Callable<SecurityContext> c = new Callable<SecurityContext>() {
             @Override
-            public SecurityContext call() throws Exception {
+            public SecurityContext call() {
                 return SecurityContextHolder.getContext();
             }
         };
@@ -139,7 +139,7 @@ public void testCallableCollectionAgainstAllContexts() throws Exception {
         Collection<Callable<SecurityContext>> callables = new ArrayList<>();
         Callable<SecurityContext> c = new Callable<SecurityContext>() {
             @Override
-            public SecurityContext call() throws Exception {
+            public SecurityContext call() {
                 return SecurityContextHolder.getContext();
             }
         };
@@ -172,7 +172,7 @@ public SecurityContext call() throws Exception {
 
     @Test
     @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS)
-    public void testFailedRunnableResetsContext() throws Exception {
+    public void testFailedRunnableResetsContext() {
         Runnable r = new Runnable() {
             @Override
             public void run() {

File: test/src/test/java/jenkins/security/UserDetailsCacheTest.java
Patch:
@@ -63,7 +63,7 @@ public void getCachedTrue() throws Exception {
     }
 
     @Test
-    public void getCachedFalse() throws Exception {
+    public void getCachedFalse() {
         UserDetailsCache cache = UserDetailsCache.get();
         assertNotNull(cache);
         UserDetails alice1 = cache.getCached("alice");
@@ -80,7 +80,7 @@ public void getCachedTrueNotFound() throws Exception {
     }
 
     @Test
-    public void getCachedFalseNotFound() throws Exception {
+    public void getCachedFalseNotFound() {
         UserDetailsCache cache = UserDetailsCache.get();
         assertNotNull(cache);
         UserDetails bob = cache.getCached("bob");

File: test/src/test/java/jenkins/security/apitoken/ApiTokenPropertyConfigurationTest.java
Patch:
@@ -44,7 +44,7 @@ public class ApiTokenPropertyConfigurationTest {
 
     @Test
     @Issue("JENKINS-32776")
-    public void newUserTokenConfiguration() throws Exception {
+    public void newUserTokenConfiguration() {
         ApiTokenPropertyConfiguration config = ApiTokenPropertyConfiguration.get();
 
         config.setTokenGenerationOnCreationEnabled(true);

File: test/src/test/java/jenkins/security/seed/UserSeedChangeListenerTest.java
Patch:
@@ -44,7 +44,7 @@ public class UserSeedChangeListenerTest {
     public JenkinsRule j = new JenkinsRule();
 
     @Test
-    public void onProgrammaticUserSeedChange_listenerTriggered() throws Exception {
+    public void onProgrammaticUserSeedChange_listenerTriggered() {
         TestUserSeedChangeListener testListener = j.jenkins.getExtensionList(UserSeedChangeListener.class).get(TestUserSeedChangeListener.class);
 
         String userId = "alice";

File: test/src/test/java/jenkins/security/seed/UserSeedPropertyTest.java
Patch:
@@ -59,7 +59,7 @@ public class UserSeedPropertyTest {
 
     @Test
     @Issue("SECURITY-901")
-    public void userCreation_implies_userSeedCreation() throws Exception {
+    public void userCreation_implies_userSeedCreation() {
         User alice = User.getById("alice", true);
         assertNotNull(alice);
         UserSeedProperty userSeed = alice.getProperty(UserSeedProperty.class);

File: test/src/test/java/jenkins/security/stapler/DoActionFilterTest.java
Patch:
@@ -134,7 +134,7 @@ public static class TestNewRulesOk extends AbstractUnprotectedRootAction {
 
         public void doWithThrowOtherException() throws IOException { replyOk(); }
 
-        public HttpResponse doWithReturnHttpResponse() { return HttpResponses.plainText("ok"); }
+        public HttpResponse doWithReturnHttpResponse() { return HttpResponses.text("ok"); }
 
         public HttpResponseChild doWithReturnHttpResponseChild() { return new HttpResponseChild(); }
 
@@ -360,7 +360,7 @@ public void testAnnotatedMethodOk_annotatedJsonResponse() throws Exception {
     }
 
     @Test
-    public void testAnnotatedMethodOk_annotatedLimitedTo() throws Exception {
+    public void testAnnotatedMethodOk_annotatedLimitedTo() {
         FailingHttpStatusCodeException e = assertThrows(FailingHttpStatusCodeException.class, () -> wc.getPage(new URL(j.getURL(), "testNewRulesOk/annotatedLimitedTo/")));
         assertEquals(500, e.getStatusCode());
         assertTrue(e.getResponse().getContentAsString().contains("Needs to be in role"));

File: test/src/test/java/jenkins/security/stapler/DynamicTest.java
Patch:
@@ -21,7 +21,7 @@ public class DynamicTest {
     public JenkinsRule j = new JenkinsRule();
 
     @Test
-    public void testRequestsDispatchedToEligibleDynamic() throws Exception {
+    public void testRequestsDispatchedToEligibleDynamic() {
         JenkinsRule.WebClient wc = j.createWebClient();
         Stream.of("whatever", "displayName", "iconFileName", "urlName", "response1", "response2").forEach(url ->
         {

File: test/src/test/java/jenkins/security/stapler/GetterMethodFilterTest.java
Patch:
@@ -36,7 +36,6 @@
 import java.util.Map;
 import jenkins.model.Jenkins;
 import org.apache.commons.codec.Encoder;
-import org.apache.commons.codec.EncoderException;
 import org.apache.commons.codec.binary.Base64;
 import org.junit.Test;
 import org.jvnet.hudson.test.For;
@@ -314,7 +313,7 @@ public Encoder getEncoder() {
         public Encoder getEncoderCustomChild() {
             return new Encoder() {
                 @Override
-                public Object encode(Object source) throws EncoderException {
+                public Object encode(Object source) {
                     // it's not about implementation...
                     return null;
                 }

File: core/src/main/java/org/jenkins/ui/icon/IconSet.java
Patch:
@@ -54,7 +54,7 @@ public class IconSet {
     private Map<String, Icon> iconsByClassSpec = new ConcurrentHashMap<>();
     private Map<String, Icon> coreIcons = new ConcurrentHashMap<>();
 
-    private static final String PLACEHOLDER_SVG = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ionicon\" viewBox=\"0 0 512 512\"><title>Ellipse</title><circle cx=\"256\" cy=\"256\" r=\"192\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"32\"/></svg>";
+    private static final String PLACEHOLDER_SVG = "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ionicon\" height=\"48\" viewBox=\"0 0 512 512\"><title>Close</title><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"32\" d=\"M368 368L144 144M368 144L144 368\"/></svg>";
     private static final Icon NO_ICON = new Icon("_", "_", "_");
 
     public IconSet() {

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -2336,7 +2336,7 @@ public static String tryGetIconPath(String iconGuess, JellyContext context) {
         }
 
         if (iconMetadata == null) {
-            if (!iconGuess.startsWith("/")) {
+            if (!iconGuess.startsWith("/") && !iconGuess.startsWith("http")) {
                 iconGuess = "/" + iconGuess;
             }
 

File: core/src/main/java/org/jenkins/ui/icon/IconSet.java
Patch:
@@ -520,6 +520,7 @@ private static void initializeSVGs() {
         images.add("video");
         images.add("warning");
         images.add("document-properties");
+        images.add("help");
 
         for (Map.Entry<String, String> size : sizes.entrySet()) {
             for (String image : images) {
@@ -549,6 +550,7 @@ public static String tryTranslateTangoIconToSymbol(String tangoIcon) {
         translations.put("icon-gear2", "symbol-settings");
         translations.put("icon-plugin", "symbol-plugins");
         translations.put("icon-up", "symbol-arrow-up");
+        translations.put("icon-help", "symbol-help-circle");
 
         return translations.getOrDefault(tangoIcon, null);
     }

File: core/src/main/java/org/jenkins/ui/icon/IconSet.java
Patch:
@@ -520,6 +520,7 @@ private static void initializeSVGs() {
         images.add("video");
         images.add("warning");
         images.add("document-properties");
+        images.add("help");
 
         for (Map.Entry<String, String> size : sizes.entrySet()) {
             for (String image : images) {
@@ -549,6 +550,7 @@ public static String tryTranslateTangoIconToSymbol(String tangoIcon) {
         translations.put("icon-gear2", "symbol-settings");
         translations.put("icon-plugin", "symbol-plugins");
         translations.put("icon-up", "symbol-arrow-up");
+        translations.put("icon-help", "symbol-help-circle");
 
         return translations.getOrDefault(tangoIcon, null);
     }

File: test/src/test/java/lib/layout/IconTest.java
Patch:
@@ -151,7 +151,7 @@ public void testTasks() throws Exception {
         assertIconToSymbolOkay(taskDivs.get(5).getElementsByTagName("svg").get(0));
 
         assertIconToImageOkay(taskDivs.get(6).getElementsByTagName("img").get(0), "/plugin/xxx/icon.png");
-        assertIconToImageOkay(taskDivs.get(7).getElementsByTagName("img").get(0), "/plugin/xxx/icon.png");
+        assertIconToImageOkay(taskDivs.get(7).getElementsByTagName("img").get(0), "plugin/xxx/icon.png");
     }
 
     @TestExtension("testTasks")

File: core/src/main/java/org/jenkins/ui/icon/IconSet.java
Patch:
@@ -520,6 +520,7 @@ private static void initializeSVGs() {
         images.add("video");
         images.add("warning");
         images.add("document-properties");
+        images.add("help");
 
         for (Map.Entry<String, String> size : sizes.entrySet()) {
             for (String image : images) {
@@ -549,6 +550,7 @@ public static String tryTranslateTangoIconToSymbol(String tangoIcon) {
         translations.put("icon-gear2", "symbol-settings");
         translations.put("icon-plugin", "symbol-plugins");
         translations.put("icon-up", "symbol-arrow-up");
+        translations.put("icon-help", "symbol-help-circle");
 
         return translations.getOrDefault(tangoIcon, null);
     }

File: test/src/test/java/jenkins/security/ApiCrumbExclusionTest.java
Patch:
@@ -40,7 +40,6 @@
 import hudson.util.HttpResponses;
 import java.io.IOException;
 import java.net.URL;
-import jenkins.security.apitoken.ApiTokenTestHelper;
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.Issue;
@@ -59,8 +58,6 @@ public class ApiCrumbExclusionTest {
     @Test
     @Issue("JENKINS-22474")
     public void callUsingApiTokenDoesNotRequireCSRFToken() throws Exception {
-        ApiTokenTestHelper.enableLegacyBehavior();
-
         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
         j.jenkins.setCrumbIssuer(null);
         User foo = User.getOrCreateByIdOrFullName("foo");

File: test/src/test/java/jenkins/security/ApiTokenPropertyTest.java
Patch:
@@ -69,6 +69,7 @@ public void setupLegacyConfig() {
     public void basics() throws Exception {
         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
         User u = User.getById("foo", true);
+        j.createWebClient().withBasicApiToken(u);
         final ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);
         final String token = t.getApiToken();
 

File: test/src/test/java/lib/layout/SvgIconTest.java
Patch:
@@ -28,8 +28,8 @@
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.CoreMatchers.not;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertThat;
 
 import com.gargoylesoftware.htmlunit.ScriptResult;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;

File: core/src/test/java/hudson/UtilTest.java
Patch:
@@ -46,7 +46,7 @@
 import java.io.IOException;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
-import java.nio.file.AccessDeniedException;
+import java.nio.file.FileSystemException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -676,7 +676,7 @@ public void createDirectoriesInRoot() throws Exception {
             assertEquals(newDirInRoot.resolve("new1"), Util.createDirectories(newDirInRoot.resolve("new1")).toRealPath());
             Util.createSymlink(newSymlinkInRoot.getParent().toFile(), newDirInRoot.getFileName().toString(), newSymlinkInRoot.getFileName().toString(), TaskListener.NULL);
             assertEquals(newDirInRoot.resolve("new2"), Util.createDirectories(newSymlinkInRoot.resolve("new2")).toRealPath());
-        } catch (AccessDeniedException e) {
+        } catch (FileSystemException e) {
             // Not running as root
             assumeNoException(e);
         }

File: core/src/main/java/hudson/scm/SCM.java
Patch:
@@ -175,8 +175,8 @@ public boolean supportsPolling() {
      *
      * <p>
      * This flag affects the behavior of Hudson when a job lost its workspace
-     * (typically due to a agent outage.) If this method returns false and
-     * polling is configured, then that would immediately trigger a new build.
+     * (typically due to a agent outage.) If this method returns true and
+     * polling is configured, then that would usually trigger a new build.
      *
      * <p>
      * This flag also affects the mutual exclusion control between builds and polling.

File: core/src/test/java/hudson/UtilTest.java
Patch:
@@ -46,7 +46,7 @@
 import java.io.IOException;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
-import java.nio.file.AccessDeniedException;
+import java.nio.file.FileSystemException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -676,7 +676,7 @@ public void createDirectoriesInRoot() throws Exception {
             assertEquals(newDirInRoot.resolve("new1"), Util.createDirectories(newDirInRoot.resolve("new1")).toRealPath());
             Util.createSymlink(newSymlinkInRoot.getParent().toFile(), newDirInRoot.getFileName().toString(), newSymlinkInRoot.getFileName().toString(), TaskListener.NULL);
             assertEquals(newDirInRoot.resolve("new2"), Util.createDirectories(newSymlinkInRoot.resolve("new2")).toRealPath());
-        } catch (AccessDeniedException e) {
+        } catch (FileSystemException e) {
             // Not running as root
             assumeNoException(e);
         }

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -28,9 +28,7 @@
 import static java.util.concurrent.TimeUnit.DAYS;
 import static java.util.concurrent.TimeUnit.HOURS;
 import static java.util.concurrent.TimeUnit.SECONDS;
-import static jenkins.util.MemoryReductionUtil.EMPTY_STRING_ARRAY;
 import static jenkins.util.MemoryReductionUtil.getPresizedMutableMap;
-import static jenkins.util.MemoryReductionUtil.internInPlace;
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
@@ -80,6 +78,7 @@
 import jenkins.security.UpdateSiteWarningsConfiguration;
 import jenkins.security.UpdateSiteWarningsMonitor;
 import jenkins.util.JSONSignatureValidator;
+import jenkins.util.PluginLabelUtil;
 import jenkins.util.SystemProperties;
 import jenkins.util.java.JavaUtils;
 import net.sf.json.JSONArray;
@@ -1238,7 +1237,7 @@ public Plugin(String sourceId, JSONObject o) {
             }
             this.popularity = popularity;
             this.releaseTimestamp = date;
-            this.categories = o.has("labels") ? internInPlace((String[]) o.getJSONArray("labels").toArray(EMPTY_STRING_ARRAY)) : null;
+            this.categories = o.has("labels") ? PluginLabelUtil.canonicalLabels(o.getJSONArray("labels")) : null;
             this.issueTrackers = o.has("issueTrackers") ? o.getJSONArray("issueTrackers").stream().map(IssueTracker::createFromJSONObject).filter(Objects::nonNull).toArray(IssueTracker[]::new) : null;
 
             JSONArray ja = o.getJSONArray("dependencies");

File: core/src/main/java/jenkins/plugins/DetachedPluginsUtil.java
Patch:
@@ -144,7 +144,7 @@ public static boolean isDetachedPlugin(@NonNull String pluginId) {
         return false;
     }
 
-    private static Stream<String> configLines(InputStream is) throws IOException {
+    public static Stream<String> configLines(InputStream is) throws IOException {
         return IOUtils.readLines(is, StandardCharsets.UTF_8).stream().filter(line -> !line.matches("#.*|\\s*"));
     }
 

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -70,7 +70,6 @@
 import java.io.BufferedOutputStream;
 import java.io.File;
 import java.io.FileFilter;
-import java.io.FileWriter;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InterruptedIOException;
@@ -1656,7 +1655,7 @@ public String invoke(File dir, VirtualChannel channel) throws IOException {
                 throw new IOException("Failed to create a temporary directory in " + dir, e);
             }
 
-            try (Writer w = new FileWriter(f)) {
+            try (Writer w = Files.newBufferedWriter(Util.fileToPath(f), Charset.defaultCharset())) {
                 w.write(contents);
             }
 

File: core/src/main/java/hudson/cli/GroovyCommand.java
Patch:
@@ -28,6 +28,7 @@
 import groovy.lang.GroovyShell;
 import hudson.Extension;
 import java.io.IOException;
+import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.List;
@@ -63,7 +64,7 @@ protected int run() throws Exception {
         Jenkins.get().checkPermission(Jenkins.ADMINISTER);
 
         Binding binding = new Binding();
-        binding.setProperty("out", new PrintWriter(stdout, true));
+        binding.setProperty("out", new PrintWriter(new OutputStreamWriter(stdout, getClientCharset()), true));
         binding.setProperty("stdin", stdin);
         binding.setProperty("stdout", stdout);
         binding.setProperty("stderr", stderr);

File: core/src/main/java/hudson/cli/GroovyshCommand.java
Patch:
@@ -30,6 +30,7 @@
 import hudson.Extension;
 import java.io.BufferedInputStream;
 import java.io.InputStream;
+import java.io.OutputStreamWriter;
 import java.io.PrintStream;
 import java.io.PrintWriter;
 import java.util.ArrayList;
@@ -84,7 +85,7 @@ protected Groovysh createShell(InputStream stdin, PrintStream stdout,
 
         Binding binding = new Binding();
         // redirect "println" to the CLI
-        binding.setProperty("out", new PrintWriter(stdout, true));
+        binding.setProperty("out", new PrintWriter(new OutputStreamWriter(stdout, getClientCharset()), true));
         binding.setProperty("hudson", Jenkins.get()); // backward compatibility
         binding.setProperty("jenkins", Jenkins.get());
 

File: core/src/main/java/hudson/cli/ListChangesCommand.java
Patch:
@@ -5,6 +5,7 @@
 import hudson.scm.ChangeLogSet;
 import hudson.util.QuotedStringTokenizer;
 import java.io.IOException;
+import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.util.List;
 import jenkins.scm.RunWithSCM;
@@ -46,7 +47,7 @@ protected int act(List<Run<?, ?>> builds) throws IOException {
         // No other permission check needed.
         switch (format) {
         case XML:
-            PrintWriter w = new PrintWriter(stdout);
+            PrintWriter w = new PrintWriter(new OutputStreamWriter(stdout, getClientCharset()));
             w.println("<changes>");
             for (Run<?, ?> build : builds) {
                 if (build instanceof RunWithSCM) {

File: core/src/main/java/hudson/os/SU.java
Patch:
@@ -43,6 +43,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.PrintStream;
+import java.nio.charset.Charset;
 import java.util.Collections;
 
 /**
@@ -83,7 +84,7 @@ protected String sudoExe() {
                     return "sudo";
                 }
 
-                @SuppressFBWarnings(value = {"COMMAND_INJECTION", "DM_DEFAULT_ENCODING"}, justification = "TODO needs triage")
+                @SuppressFBWarnings(value = "COMMAND_INJECTION", justification = "TODO needs triage")
                 @Override
                 protected Process sudoWithPass(ArgumentListBuilder args) throws IOException {
                     args.prepend(sudoExe(), "-S");
@@ -92,7 +93,7 @@ protected Process sudoWithPass(ArgumentListBuilder args) throws IOException {
                     Process p = pb.start();
                     // TODO: use -p to detect prompt
                     // TODO: detect if the password didn't work
-                    try (PrintStream ps = new PrintStream(p.getOutputStream())) {
+                    try (PrintStream ps = new PrintStream(p.getOutputStream(), false, Charset.defaultCharset().name())) {
                         ps.println(rootPassword);
                         ps.println(rootPassword);
                         ps.println(rootPassword);

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -3308,8 +3308,9 @@ private void readObject(ObjectInputStream ois) throws IOException, ClassNotFound
 
     private static final long serialVersionUID = 1L;
 
-    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "TODO needs triage")
-    public static int SIDE_BUFFER_SIZE = 1024;
+    @Restricted(NoExternalUse.class)
+    @RestrictedSince("TODO")
+    public static final int SIDE_BUFFER_SIZE = 1024;
 
     private static final Logger LOGGER = Logger.getLogger(FilePath.class.getName());
 

File: core/src/main/java/jenkins/model/item_category/ItemCategory.java
Patch:
@@ -25,10 +25,10 @@
 package jenkins.model.item_category;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.ExtensionList;
 import hudson.ExtensionPoint;
+import hudson.RestrictedSince;
 import hudson.model.TopLevelItemDescriptor;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
@@ -47,8 +47,8 @@ public abstract class ItemCategory implements ExtensionPoint {
      * See <a href="https://issues.jenkins.io/browse/JENKINS-36593">JENKINS-36593</a> for more info.
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "TODO needs triage")
-    public static int MIN_TOSHOW = 1;
+    @RestrictedSince("2.14")
+    public static final int MIN_TOSHOW = 1;
 
     /**
      * Helpful to set the order.

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -240,7 +240,6 @@ public Locale get() {
 
             final File _home = home;
             initThread = new Thread("Jenkins initialization thread") {
-                @SuppressFBWarnings(value = "RV_RETURN_VALUE_IGNORED_BAD_PRACTICE", justification = "TODO needs triage")
                 @Override
                 public void run() {
                     boolean success = false;
@@ -253,7 +252,7 @@ public void run() {
 
                         context.setAttribute(APP, instance);
 
-                        BootFailure.getBootFailureFile(_home).delete();
+                        Files.deleteIfExists(BootFailure.getBootFailureFile(_home).toPath());
 
                         // at this point we are open for business and serving requests normally
                         LOGGER.info("Jenkins is fully up and running");

File: core/src/main/java/jenkins/util/ProgressiveRendering.java
Patch:
@@ -102,7 +102,6 @@ protected ProgressiveRendering() {
     /**
      * For internal use.
      */
-    @SuppressWarnings("RV_RETURN_VALUE_IGNORED_BAD_PRACTICE")
     @JavaScriptMethod public final void start() {
         Ancestor ancestor = Stapler.getCurrentRequest().findAncestor(BoundObjectTable.class);
         if (ancestor == null) {

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -226,11 +226,11 @@ public TaskListener getListener() {
     }
 
     @Override
-    public String getIcon() {
+    public String getIconClassName() {
         Future<?> l = lastConnectActivity;
         if(l!=null && !l.isDone())
-            return "computer-flash.gif";
-        return super.getIcon();
+            return "icon-computer-flash";
+        return super.getIconClassName();
     }
 
     /**

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -141,7 +141,7 @@ public void contextInitialized(ServletContextEvent event) {
         if (Main.isDevelopmentMode && System.getProperty("java.util.logging.config.file") == null) {
             try {
                 Formatter formatter = (Formatter) Class.forName("io.jenkins.lib.support_log_formatter.SupportLogFormatter").newInstance();
-                for (Handler h : java.util.logging.Logger.getLogger("").getHandlers()) {
+                for (Handler h : Logger.getLogger("").getHandlers()) {
                     if (h instanceof ConsoleHandler) {
                         ((ConsoleHandler) h).setFormatter(formatter);
                     }
@@ -304,7 +304,6 @@ public static void installExpressionFactory(ServletContextEvent event) {
 	/**
      * Installs log handler to monitor all Hudson logs.
      */
-    @SuppressFBWarnings(value = "LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE", justification = "TODO needs triage")
     private void installLogger() {
         Jenkins.logRecords = handler.getView();
         Logger.getLogger("").addHandler(handler);

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -891,7 +891,6 @@ protected Jenkins(File root, ServletContext context) throws IOException, Interru
      *      If non-null, use existing plugin manager.  create a new one.
      */
     @SuppressFBWarnings({
-        "DMI_RANDOM_USED_ONLY_ONCE", // TODO needs triage
         "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", // Trigger.timer
         "DM_EXIT" // Exit is wanted here
     })
@@ -934,9 +933,8 @@ protected Jenkins(File root, ServletContext context, PluginManager pluginManager
             if(secretFile.exists()) {
                 secretKey = secretFile.readTrim();
             } else {
-                SecureRandom sr = new SecureRandom();
                 byte[] random = new byte[32];
-                sr.nextBytes(random);
+                RANDOM.nextBytes(random);
                 secretKey = Util.toHexString(random);
                 secretFile.write(secretKey);
 
@@ -5509,6 +5507,7 @@ public boolean shouldShowStackTrace() {
     public static boolean AUTOMATIC_SLAVE_LAUNCH = true;
 
     private static final Logger LOGGER = Logger.getLogger(Jenkins.class.getName());
+    private static final SecureRandom RANDOM = new SecureRandom();
 
     public static final PermissionGroup PERMISSIONS = Permission.HUDSON_PERMISSIONS;
     public static final Permission ADMINISTER = Permission.HUDSON_ADMINISTER;

File: core/src/main/java/jenkins/slaves/EncryptedSlaveAgentJnlpFile.java
Patch:
@@ -1,6 +1,5 @@
 package jenkins.slaves;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Util;
 import hudson.security.AccessControlled;
 import hudson.security.Permission;
@@ -40,6 +39,7 @@
 public class EncryptedSlaveAgentJnlpFile implements HttpResponse {
 
     private static final Logger LOG = Logger.getLogger(EncryptedSlaveAgentJnlpFile.class.getName());
+    private static final SecureRandom RANDOM = new SecureRandom();
 
     /**
      * The object that owns the Jelly view that renders JNLP file.
@@ -69,7 +69,6 @@ public EncryptedSlaveAgentJnlpFile(AccessControlled it, String viewName, String
         this.slaveName = slaveName;
     }
 
-    @SuppressFBWarnings(value = "DMI_RANDOM_USED_ONLY_ONCE", justification = "TODO needs triage")
     @Override
     public void generateResponse(StaplerRequest req, final StaplerResponse res, Object node) throws IOException, ServletException {
         RequestDispatcher view = req.getView(it, viewName);
@@ -86,7 +85,7 @@ public void generateResponse(StaplerRequest req, final StaplerResponse res, Obje
             view.forward(req, temp);
 
             byte[] iv = new byte[128/8];
-            new SecureRandom().nextBytes(iv);
+            RANDOM.nextBytes(iv);
 
             byte[] jnlpMac;
             if(it instanceof SlaveComputer) {

File: core/src/main/java/hudson/search/Search.java
Patch:
@@ -301,7 +301,6 @@ class Tag implements Comparable<Tag>{
                 prefixMatch = i.getPath().startsWith(tokenList)?1:0;
             }
 
-            @SuppressFBWarnings(value = "EQ_COMPARETO_USE_OBJECT_EQUALS", justification = "TODO needs triage")
             @Override
             public int compareTo(Tag that) {
                 int r = this.prefixMatch -that.prefixMatch;

File: core/src/main/java/jenkins/util/SystemProperties.java
Patch:
@@ -87,6 +87,7 @@ private interface Handler {
 
     private static final Handler NULL_HANDLER = key -> null;
 
+    @SuppressFBWarnings(value = "NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR", justification = "the field is initialized by a static initializer, not a constructor")
     private static @NonNull Handler handler = NULL_HANDLER;
 
     // declared in WEB-INF/web.xml

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -29,6 +29,7 @@
 import edu.umd.cs.findbugs.annotations.CheckReturnValue;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.OverrideMustInvoke;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.AbortException;
 import hudson.FilePath;
 import hudson.Functions;
@@ -1047,6 +1048,7 @@ private static class SlaveInitializer extends MasterToSlaveCallable<Void,Runtime
         }
 
         @Override
+        @SuppressFBWarnings(value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification = "field is static for the reason explained in the Javadoc for LogHolder")
         public Void call() {
             SLAVE_LOG_HANDLER = new RingBufferLogHandler(ringBufferSize);
 

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -336,6 +336,7 @@ public BuildStepMonitor getRequiredMonitorService() {
 
     @Extension @Symbol("archiveArtifacts")
     public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {
+        @SuppressFBWarnings(value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification = "for backward compatibility")
         public DescriptorImpl() {
             DESCRIPTOR = this; // backward compatibility
         }

File: core/src/main/java/jenkins/security/QueueItemAuthenticatorMonitor.java
Patch:
@@ -23,6 +23,7 @@
  */
 package jenkins.security;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.model.AdministrativeMonitor;
 import hudson.model.Job;
@@ -72,6 +73,7 @@ public boolean isSecurity() {
     }
 
     @RequirePOST
+    @SuppressFBWarnings(value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification = "field is static so that it can be written to by the static QueueListenerImpl class")
     public HttpResponse doAct(@QueryParameter String redirect, @QueryParameter String dismiss, @QueryParameter String reset) throws IOException {
         if (redirect != null) {
             return HttpResponses.redirectTo("https://www.jenkins.io/redirect/queue-item-security");

File: core/src/main/java/jenkins/security/UserDetailsCache.java
Patch:
@@ -28,6 +28,7 @@
 import com.google.common.util.concurrent.UncheckedExecutionException;
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.ExtensionList;
 import hudson.security.UserMayOrMayNotExistException2;
@@ -61,6 +62,7 @@ public final class UserDetailsCache {
      * Constructor intended to be instantiated by Jenkins only.
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings(value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification = "field is static for script console")
     public UserDetailsCache() {
         if (EXPIRE_AFTER_WRITE_SEC == null || EXPIRE_AFTER_WRITE_SEC <= 0) {
             //just in case someone is trying to trick us

File: core/src/main/java/jenkins/slaves/NioChannelSelector.java
Patch:
@@ -1,5 +1,6 @@
 package jenkins.slaves;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.init.Terminator;
 import hudson.model.Computer;
@@ -18,6 +19,7 @@
 public class NioChannelSelector {
     private NioChannelHub hub;
 
+    @SuppressFBWarnings(value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification = "field is static for script console")
     public NioChannelSelector() {
         try {
             if (!DISABLED) {

File: core/src/main/java/hudson/model/BooleanParameterDefinition.java
Patch:
@@ -25,6 +25,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import java.util.Objects;
 import net.sf.json.JSONObject;
@@ -103,6 +104,7 @@ public int hashCode() {
     }
 
     @Override
+    @SuppressFBWarnings(value = "EQ_GETCLASS_AND_CLASS_CONSTANT", justification = "ParameterDefinitionTest tests that subclasses are not equal to their parent classes, so the behavior appears to be intentional")
     public boolean equals(Object obj) {
         if (BooleanParameterDefinition.class != getClass())
             return super.equals(obj);

File: core/src/main/java/hudson/model/ChoiceParameterDefinition.java
Patch:
@@ -3,6 +3,7 @@
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.Util;
 import hudson.util.FormValidation;
@@ -181,6 +182,7 @@ public int hashCode() {
     }
 
     @Override
+    @SuppressFBWarnings(value = "EQ_GETCLASS_AND_CLASS_CONSTANT", justification = "ParameterDefinitionTest tests that subclasses are not equal to their parent classes, so the behavior appears to be intentional")
     public boolean equals(Object obj) {
         if (ChoiceParameterDefinition.class != getClass())
             return super.equals(obj);

File: core/src/main/java/hudson/model/FileParameterDefinition.java
Patch:
@@ -25,6 +25,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.cli.CLICommand;
 import java.io.File;
@@ -140,6 +141,7 @@ public int hashCode() {
     }
 
     @Override
+    @SuppressFBWarnings(value = "EQ_GETCLASS_AND_CLASS_CONSTANT", justification = "ParameterDefinitionTest tests that subclasses are not equal to their parent classes, so the behavior appears to be intentional")
     public boolean equals(Object obj) {
         if (FileParameterDefinition.class != getClass())
             return super.equals(obj);

File: core/src/main/java/hudson/model/PasswordParameterDefinition.java
Patch:
@@ -25,6 +25,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.util.Secret;
 import java.util.Objects;
@@ -116,6 +117,7 @@ public int hashCode() {
     }
 
     @Override
+    @SuppressFBWarnings(value = "EQ_GETCLASS_AND_CLASS_CONSTANT", justification = "ParameterDefinitionTest tests that subclasses are not equal to their parent classes, so the behavior appears to be intentional")
     public boolean equals(Object obj) {
         if (PasswordParameterDefinition.class != getClass())
             return super.equals(obj);

File: core/src/main/java/hudson/model/RunParameterDefinition.java
Patch:
@@ -25,6 +25,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.util.EnumConverter;
 import hudson.util.RunList;
@@ -219,6 +220,7 @@ public int hashCode() {
     }
 
     @Override
+    @SuppressFBWarnings(value = "EQ_GETCLASS_AND_CLASS_CONSTANT", justification = "ParameterDefinitionTest tests that subclasses are not equal to their parent classes, so the behavior appears to be intentional")
     public boolean equals(Object obj) {
         if (RunParameterDefinition.class != getClass())
             return super.equals(obj);

File: core/src/main/java/hudson/model/StringParameterDefinition.java
Patch:
@@ -25,6 +25,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.Util;
 import java.util.Objects;
@@ -172,6 +173,7 @@ public int hashCode() {
     }
 
     @Override
+    @SuppressFBWarnings(value = "EQ_GETCLASS_AND_CLASS_CONSTANT", justification = "ParameterDefinitionTest tests that subclasses are not equal to their parent classes, so the behavior appears to be intentional")
     public boolean equals(Object obj) {
         if (StringParameterDefinition.class != getClass())
             return super.equals(obj);

File: core/src/main/java/hudson/model/TextParameterDefinition.java
Patch:
@@ -25,6 +25,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import java.util.Objects;
 import net.sf.json.JSONObject;
@@ -85,6 +86,7 @@ public int hashCode() {
     }
 
     @Override
+    @SuppressFBWarnings(value = "EQ_GETCLASS_AND_CLASS_CONSTANT", justification = "ParameterDefinitionTest tests that subclasses are not equal to their parent classes, so the behavior appears to be intentional")
     public boolean equals(Object obj) {
         if (TextParameterDefinition.class != getClass())
             return super.equals(obj);

File: core/src/main/java/hudson/util/NoClientBindProtocolSocketFactory.java
Patch:
@@ -109,7 +109,7 @@ public Socket createSocket(String host, int port) throws IOException {
      */
     @Override
     public boolean equals(Object obj) {
-        return obj != null && obj.getClass().equals(NoClientBindProtocolSocketFactory.class);
+        return obj != null && obj.getClass().equals(getClass());
     }
 
     /**

File: core/src/main/java/hudson/logging/LogRecorder.java
Patch:
@@ -25,6 +25,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.thoughtworks.xstream.XStream;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.BulkChange;
 import hudson.Extension;
 import hudson.FilePath;
@@ -293,6 +294,7 @@ public boolean includes(LogRecord r) {
             return rest.startsWith(".") || rest.length()==0;
         }
 
+        @SuppressFBWarnings(value = "NP_BOOLEAN_RETURN_NULL", justification = "converting this to YesNoMaybe would break backward compatibility")
         public Boolean matches(LogRecord r) {
             boolean levelSufficient = r.getLevel().intValue() >= level;
             if (name.length() == 0) {

File: core/src/main/java/hudson/security/SidACL.java
Patch:
@@ -27,6 +27,7 @@
 import static java.util.logging.Level.FINER;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.logging.Logger;
 import org.acegisecurity.acls.sid.GrantedAuthoritySid;
 import org.acegisecurity.acls.sid.PrincipalSid;
@@ -65,6 +66,7 @@ public boolean hasPermission2(@NonNull Authentication a, Permission permission)
      *      true or false if {@link #hasPermission(Sid, Permission)} returns it.
      *      Otherwise null, indicating that this ACL doesn't have any entry for it.
      */
+    @SuppressFBWarnings(value = "NP_BOOLEAN_RETURN_NULL", justification = "converting this to YesNoMaybe would break backward compatibility")
     protected Boolean _hasPermission(@NonNull Authentication a, Permission permission) {
         // ACL entries for this principal takes precedence
         Boolean b = hasPermission(new PrincipalSid(a),permission);

File: core/src/main/java/hudson/security/SparseACL.java
Patch:
@@ -25,6 +25,7 @@
 
 import static java.util.logging.Level.FINE;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.logging.Logger;
@@ -84,6 +85,7 @@ public boolean hasPermission2(Authentication a, Permission permission) {
         return false;
     }
 
+    @SuppressFBWarnings(value = "NP_BOOLEAN_RETURN_NULL", justification = "converting this to YesNoMaybe would break backward compatibility")
     @Override
     protected Boolean hasPermission(Sid p, Permission permission) {
         for( ; permission!=null; permission=permission.impliedBy ) {

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -2455,7 +2455,7 @@ public String getName() {
      */
     @Restricted(NoExternalUse.class)
     @ExportedBean(defaultVisibility = 999)
-    @SuppressFBWarnings(value = "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD", justification = "it is exported, so it might be used")
+    @SuppressFBWarnings(value = "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD", justification = "read by Stapler")
     public static class StubItem {
 
         @Exported public StubTask task;

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -2312,6 +2312,7 @@ public final class CompleteBatchJob extends UpdateCenterJob {
         private final List<PluginWrapper> batch;
         private final long start;
         @Exported(inline = true)
+        @SuppressFBWarnings(value = "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD", justification = "read by Stapler")
         public volatile CompleteBatchJobStatus status = new CompleteBatchJob.Pending();
 
         public CompleteBatchJob(List<PluginWrapper> batch, long start, UUID correlationId) {

File: core/src/main/java/hudson/search/Search.java
Patch:
@@ -195,6 +195,7 @@ public static class Result {
     @ExportedBean(defaultVisibility=999)
     public static class Item {
         @Exported
+        @SuppressFBWarnings(value = "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD", justification = "read by Stapler")
         public String name;
 
         public Item(String name) {

File: core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
Patch:
@@ -587,6 +587,7 @@ public static final class SignupInfo {
          * To display a general error message, set it here.
          *
          */
+        @SuppressFBWarnings(value = "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD", justification = "read by Stapler")
         public String errorMessage;
 
         /**

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -416,6 +416,7 @@ public boolean isActivated() {
     public static class BuildAction implements RunAction2 {
         private transient /*final*/ Run<?,?> run;
         @Deprecated
+        @SuppressFBWarnings(value = "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD", justification = "for backward compatibility")
         public transient /*final*/ AbstractBuild build;
 
         /**

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -394,6 +394,7 @@ public String call() throws IOException {
     /**
      * Serialized form of {@link OSProcess} is the PID and {@link ProcessTree}
      */
+    @SuppressFBWarnings(value = "SE_INNER_CLASS", justification = "Serializing the outer instance is intended")
     private final class SerializedProcess implements Serializable {
         private final int pid;
         private static final long serialVersionUID = 1L;
@@ -2177,6 +2178,7 @@ Object writeReplace() {
 
         private static final long serialVersionUID = 1L;
 
+        @SuppressFBWarnings(value = "SE_INNER_CLASS", justification = "Serializing the outer instance is intended")
         private class RemoteProcess extends OSProcess implements Serializable {
             private final IOSProcess proxy;
 

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -331,6 +331,7 @@ public void run(AbstractProject p) {
      *
      * @deprecated Use {@link jenkins.util.Timer#get()} instead.
      */
+    @SuppressFBWarnings(value = "MS_CANNOT_BE_FINAL", justification = "for backward compatibility")
     @Deprecated
     public static @CheckForNull Timer timer;
 

File: core/src/main/java/jenkins/util/JSONSignatureValidator.java
Patch:
@@ -245,7 +245,7 @@ private boolean digestMatches(byte[] digest, String providedDigest) {
     }
 
 
-    @SuppressFBWarnings(value = "NP_LOAD_OF_KNOWN_NULL_VALUE", justification = "https://github.com/spotbugs/spotbugs/issues/756")
+    @SuppressFBWarnings(value = {"NP_LOAD_OF_KNOWN_NULL_VALUE", "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE"}, justification = "https://github.com/spotbugs/spotbugs/issues/756")
     protected Set<TrustAnchor> loadTrustAnchors(CertificateFactory cf) throws IOException {
         // if we trust default root CAs, we end up trusting anyone who has a valid certificate,
         // which isn't useful at all

File: core/src/main/java/jenkins/agents/WebSocketAgents.java
Patch:
@@ -24,6 +24,7 @@
 
 package jenkins.agents;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.ExtensionList;
 import hudson.model.Computer;
@@ -114,6 +115,7 @@ private static class Session extends WebSocketSession {
             this.remoteCapability = remoteCapability;
         }
 
+        @SuppressFBWarnings(value = "RV_RETURN_VALUE_IGNORED_BAD_PRACTICE", justification = "method signature does not permit plumbing through the return value")
         @Override
         protected void opened() {
             Computer.threadPoolForRemoting.submit(() -> {

File: core/src/main/java/jenkins/slaves/restarter/JnlpSlaveRestarterInstaller.java
Patch:
@@ -3,6 +3,7 @@
 import static java.util.logging.Level.FINE;
 import static java.util.logging.Level.SEVERE;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.Functions;
 import hudson.model.Computer;
@@ -31,6 +32,7 @@
  */
 @Extension
 public class JnlpSlaveRestarterInstaller extends ComputerListener implements Serializable {
+    @SuppressFBWarnings(value = "RV_RETURN_VALUE_IGNORED_BAD_PRACTICE", justification = "method signature does not permit plumbing through the return value")
     @Override
     public void onOnline(final Computer c, final TaskListener listener) throws IOException, InterruptedException {
         Computer.threadPoolForRemoting.submit(new Install(c, listener));

File: core/src/main/java/jenkins/util/AtmostOneTaskExecutor.java
Patch:
@@ -1,5 +1,6 @@
 package jenkins.util;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.remoting.AtmostOneThreadExecutor;
 import hudson.security.ACL;
 import hudson.util.DaemonThreadFactory;
@@ -92,6 +93,7 @@ public synchronized Future<V> submit() {
      * but {@link #inprogress} is null (meaning none is executing right now),
      * get one going.
      */
+    @SuppressFBWarnings(value = "RV_RETURN_VALUE_IGNORED_BAD_PRACTICE", justification = "method signature does not permit plumbing through the return value")
     private synchronized void maybeRun() {
         if (inprogress==null && pending!=null) {
             base.submit(new Callable<Void>() {

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -1522,6 +1522,7 @@ public Collection<Fingerprint> getBuildFingerprints() {
      *
      * @since 1.349
      */
+    @SuppressFBWarnings(value = "RV_RETURN_VALUE_IGNORED", justification = "method signature does not permit plumbing through the return value")
     public void writeLogTo(long offset, @NonNull XMLOutput out) throws IOException {
         long start = offset;
         if (offset > 0) {

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -479,6 +479,7 @@ public AnnotatedLargeText getPollingLogText() {
         /**
          * Used from {@code polling.jelly} to write annotated polling log to the given output.
          */
+        @SuppressFBWarnings(value = "RV_RETURN_VALUE_IGNORED", justification = "method signature does not permit plumbing through the return value")
         public void writePollingLogTo(long offset, XMLOutput out) throws IOException {
             // TODO: resurrect compressed log file support
             getPollingLogText().writeHtmlTo(offset, out.asWriter());
@@ -537,6 +538,7 @@ public String getLog() throws IOException {
          * Writes the annotated log to the given output.
          * @since 1.350
          */
+        @SuppressFBWarnings(value = "RV_RETURN_VALUE_IGNORED", justification = "method signature does not permit plumbing through the return value")
         public void writeLogTo(XMLOutput out) throws IOException {
             new AnnotatedLargeText<>(getLogFile(), Charset.defaultCharset(), true, this).writeHtmlTo(0,out.asWriter());
         }

File: core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
Patch:
@@ -401,6 +401,7 @@ private User createAccount(StaplerRequest req, StaplerResponse rsp, boolean vali
      * @return a {@link SignupInfo#SignupInfo(StaplerRequest) SignupInfo from given request}, with {@link
      * SignupInfo#errors} containing errors (keyed by field name), if any of the supported fields are invalid
      */
+    @SuppressFBWarnings(value = "UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD", justification = "written to by Stapler")
     private SignupInfo validateAccountCreationForm(StaplerRequest req, boolean validateCaptcha) {
         // form field validation
         // this pattern needs to be generalized and moved to stapler

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -427,7 +427,7 @@ public interface ProcessCallable<T> extends Serializable {
     }
 
 
-    /* package */ static Boolean vetoersExist;
+    /* package */ static volatile Boolean vetoersExist;
     
     /**
      * Gets the {@link ProcessTree} of the current system

File: core/src/main/java/jenkins/security/MasterToSlaveCallable.java
Patch:
@@ -30,7 +30,7 @@ public void checkRoles(RoleChecker checker) throws SecurityException {
     public Channel getChannelOrFail() throws ChannelClosedException {
         final Channel ch = Channel.current();
         if (ch == null) {
-            throw new ChannelClosedException(ch, new IllegalStateException("No channel associated with the thread"));
+            throw new ChannelClosedException((Channel) null, new IllegalStateException("No channel associated with the thread"));
         }
         return ch;
     }

File: core/src/main/java/jenkins/security/apitoken/LegacyApiTokenAdministrativeMonitor.java
Patch:
@@ -25,6 +25,7 @@
 
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.model.AdministrativeMonitor;
 import hudson.model.User;
@@ -160,6 +161,7 @@ public boolean hasMoreRecentlyUsedToken(@NonNull User user, ApiTokenProperty.Tok
     }
     
     @RequirePOST
+    @SuppressFBWarnings(value = "UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD", justification = "written to by Stapler")
     public HttpResponse doRevokeAllSelected(@JsonBody RevokeAllSelectedModel content) throws IOException {
         for (RevokeAllSelectedUserAndUuid value : content.values) {
             if (value.userId == null) {

File: core/src/main/java/jenkins/util/JSONSignatureValidator.java
Patch:
@@ -245,6 +245,7 @@ private boolean digestMatches(byte[] digest, String providedDigest) {
     }
 
 
+    @SuppressFBWarnings(value = "NP_LOAD_OF_KNOWN_NULL_VALUE", justification = "https://github.com/spotbugs/spotbugs/issues/756")
     protected Set<TrustAnchor> loadTrustAnchors(CertificateFactory cf) throws IOException {
         // if we trust default root CAs, we end up trusting anyone who has a valid certificate,
         // which isn't useful at all

File: cli/src/main/java/hudson/cli/CLIConnectionFactory.java
Patch:
@@ -1,5 +1,6 @@
 package hudson.cli;
 
+import java.nio.charset.StandardCharsets;
 import java.util.Base64;
 
 /**
@@ -33,7 +34,7 @@ public CLIConnectionFactory basicAuth(String username, String password) {
      * Cf. {@code BasicHeaderApiTokenAuthenticator}.
      */
     public CLIConnectionFactory basicAuth(String userInfo) {
-        return authorization("Basic " + Base64.getEncoder().encodeToString(userInfo.getBytes()));
+        return authorization("Basic " + Base64.getEncoder().encodeToString(userInfo.getBytes(StandardCharsets.UTF_8)));
     }
 
     /**

File: cli/src/main/java/hudson/cli/PrivateKeyProvider.java
Patch:
@@ -23,7 +23,6 @@
  */
 package hudson.cli;
 
-import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.util.logging.Level.FINE;
 
 import java.io.ByteArrayInputStream;
@@ -32,6 +31,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
 import java.nio.file.Paths;
@@ -134,7 +134,7 @@ private static String readPemFile(File f) throws IOException{
              DataInputStream dis = new DataInputStream(is)) {
             byte[] bytes = new byte[(int) f.length()];
             dis.readFully(bytes);
-            return new String(bytes);
+            return new String(bytes, StandardCharsets.UTF_8);
         } catch (InvalidPathException e) {
             throw new IOException(e);
         }
@@ -143,7 +143,7 @@ private static String readPemFile(File f) throws IOException{
     public static KeyPair loadKey(String pemString, String passwd) throws IOException, GeneralSecurityException {
         Iterable<KeyPair> itr = SecurityUtils.loadKeyPairIdentities(null,
                 new PathResource(Paths.get("key")),
-                new ByteArrayInputStream(pemString.getBytes(UTF_8)),
+                new ByteArrayInputStream(pemString.getBytes(StandardCharsets.UTF_8)),
                 FilePasswordProvider.of(passwd));
         long numLoaded = itr == null ? 0 : StreamSupport.stream(itr.spliterator(), false).count();
         if (numLoaded <= 0) {

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -86,6 +86,7 @@
 import java.net.URI;
 import java.net.URL;
 import java.net.URLConnection;
+import java.nio.charset.Charset;
 import java.nio.file.FileSystemException;
 import java.nio.file.FileSystems;
 import java.nio.file.Files;
@@ -2279,7 +2280,7 @@ private static class ReadToString extends MasterToSlaveFileCallable<String> {
         private static final long serialVersionUID = 1L;       
         @Override
         public String invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {
-            return new String(Files.readAllBytes(fileToPath(f)));
+            return new String(Files.readAllBytes(fileToPath(f)), Charset.defaultCharset());
         }
     }
 
@@ -2336,7 +2337,7 @@ private static class Write extends MasterToSlaveFileCallable<Void> {
         public Void invoke(File f, VirtualChannel channel) throws IOException {
             mkdirs(f.getParentFile());
             try (OutputStream fos = Files.newOutputStream(fileToPath(f));
-                    Writer w = encoding != null ? new OutputStreamWriter(fos, encoding) : new OutputStreamWriter(fos)) {
+                    Writer w = encoding != null ? new OutputStreamWriter(fos, encoding) : new OutputStreamWriter(fos, Charset.defaultCharset())) {
                 w.write(content);
             }
             return null;
@@ -3611,5 +3612,4 @@ public boolean accept(File file) {
         }
         private static final long serialVersionUID = 1L;
     }
-
 }

File: core/src/main/java/hudson/Proc.java
Patch:
@@ -39,6 +39,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.nio.charset.Charset;
 import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.CancellationException;
@@ -354,7 +355,7 @@ public int join() throws InterruptedException, IOException {
 //                    } catch (IOException x) {
 //                        LOGGER.log(Level.FINE,"stderr termination failed",x);
 //                    }
-                    out.write(msg.getBytes());
+                    out.write(msg.getBytes(Charset.defaultCharset()));
                     out.write('\n');
                 }
                 return r;

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -50,6 +50,7 @@
 import java.io.OutputStream;
 import java.net.URL;
 import java.net.URLClassLoader;
+import java.nio.charset.Charset;
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
 import java.nio.file.StandardOpenOption;
@@ -293,7 +294,7 @@ public void joinInit() throws InterruptedException {
      */
     private void recordBootAttempt(File home) {
         try (OutputStream o=Files.newOutputStream(BootFailure.getBootFailureFile(home).toPath(), StandardOpenOption.CREATE, StandardOpenOption.APPEND)) {
-            o.write((new Date() + System.getProperty("line.separator", "\n")).getBytes());
+            o.write((new Date() + System.getProperty("line.separator", "\n")).getBytes(Charset.defaultCharset()));
         } catch (IOException | InvalidPathException e) {
             LOGGER.log(WARNING, "Failed to record boot attempts",e);
         }

File: core/src/main/java/hudson/console/AnnotatedLargeText.java
Patch:
@@ -186,7 +186,7 @@ public long writeHtmlTo(long start, Writer w) throws IOException {
         oos.close();
         StaplerResponse rsp = Stapler.getCurrentResponse();
         if (rsp!=null)
-            rsp.setHeader("X-ConsoleAnnotator", new String(Base64.getEncoder().encode(baos.toByteArray())));
+            rsp.setHeader("X-ConsoleAnnotator", Base64.getEncoder().encodeToString(baos.toByteArray()));
         return r;
     }
 

File: core/src/main/java/hudson/console/ConsoleAnnotationOutputStream.java
Patch:
@@ -121,7 +121,7 @@ public ConsoleAnnotator<T> annotate(T context, MarkupText text) {
                     }
                 } catch (IOException | ClassNotFoundException e) {
                     // if we failed to resurrect an annotation, ignore it.
-                    LOGGER.log(Level.FINE, "Failed to resurrect annotation from \"" + StringEscapeUtils.escapeJava(new String(in, next, rest)) + "\"", e);
+                    LOGGER.log(Level.FINE, "Failed to resurrect annotation from \"" + StringEscapeUtils.escapeJava(new String(in, next, rest, Charset.defaultCharset())) + "\"", e);
                 }
 
                 int bytesUsed = rest - b.available(); // bytes consumed by annotations

File: core/src/main/java/hudson/console/ConsoleNote.java
Patch:
@@ -43,6 +43,7 @@
 import java.io.OutputStream;
 import java.io.Serializable;
 import java.io.Writer;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Base64;
@@ -326,12 +327,12 @@ public static void skip(DataInputStream in) throws IOException {
      * plus a few magic characters.
      */
     @SuppressFBWarnings(value = "MS_PKGPROTECT", justification = "used in several plugins")
-    public static final byte[] PREAMBLE = PREAMBLE_STR.getBytes();
+    public static final byte[] PREAMBLE = PREAMBLE_STR.getBytes(StandardCharsets.UTF_8);
     /**
      * Post amble is the ANSI escape sequence that brings back the echo.
      */
     @SuppressFBWarnings(value = "MS_PKGPROTECT", justification = "used in several plugins")
-    public static final byte[] POSTAMBLE = POSTAMBLE_STR.getBytes();
+    public static final byte[] POSTAMBLE = POSTAMBLE_STR.getBytes(StandardCharsets.UTF_8);
 
     /**
      * Locates the preamble in the given buffer.

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -65,6 +65,7 @@
 import java.io.IOException;
 import java.io.InterruptedIOException;
 import java.lang.ref.WeakReference;
+import java.nio.channels.ClosedByInterruptException;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Collection;
@@ -668,7 +669,7 @@ public void defaultCheckout() throws IOException, InterruptedException {
                     }
                 } catch (AbortException e) {
                     listener.error(e.getMessage());
-                } catch (InterruptedIOException e) {
+                } catch (ClosedByInterruptException | InterruptedIOException e) {
                     throw (InterruptedException)new InterruptedException().initCause(e);
                 } catch (IOException e) {
                     // checkout error not yet reported

File: core/src/main/java/hudson/model/FileParameterValue.java
Patch:
@@ -36,6 +36,7 @@
 import java.io.OutputStream;
 import java.io.UncheckedIOException;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.nio.file.Files;
 import java.util.regex.Pattern;
 import jenkins.util.SystemProperties;
@@ -302,7 +303,7 @@ public String getString(String encoding) throws UnsupportedEncodingException {
 
         @Override
         public String getString() {
-            return new String(get());
+            return new String(get(), Charset.defaultCharset());
         }
 
         @Override

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -1509,11 +1509,11 @@ public Collection<Fingerprint> getBuildFingerprints() {
     	}
     	
         String message = "No such file: " + logFile;
-    	return new ByteArrayInputStream(charset != null ? message.getBytes(charset) : message.getBytes());
+    	return new ByteArrayInputStream(charset != null ? message.getBytes(charset) : message.getBytes(Charset.defaultCharset()));
     }
    
     public @NonNull Reader getLogReader() throws IOException {
-        if (charset==null)  return new InputStreamReader(getLogInputStream());
+        if (charset==null)  return new InputStreamReader(getLogInputStream(),Charset.defaultCharset());
         else                return new InputStreamReader(getLogInputStream(),charset);
     }
 

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -68,6 +68,7 @@
 import java.net.URL;
 import java.net.URLConnection;
 import java.net.UnknownHostException;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.AtomicMoveNotSupportedException;
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
@@ -2025,11 +2026,11 @@ private static VerificationResult verifyChecksums(String expectedDigest, String
         }
 
         if (caseSensitive) {
-            if (MessageDigest.isEqual(expectedDigest.getBytes(), actualDigest.getBytes())) {
+            if (MessageDigest.isEqual(expectedDigest.getBytes(StandardCharsets.US_ASCII), actualDigest.getBytes(StandardCharsets.US_ASCII))) {
                 return VerificationResult.PASS;
             }
         } else {
-            if (MessageDigest.isEqual(expectedDigest.toLowerCase().getBytes(), actualDigest.toLowerCase().getBytes())) {
+            if (MessageDigest.isEqual(expectedDigest.toLowerCase().getBytes(StandardCharsets.US_ASCII), actualDigest.toLowerCase().getBytes(StandardCharsets.US_ASCII))) {
                 return VerificationResult.PASS;
             }
         }

File: core/src/main/java/hudson/model/UsageStatistics.java
Patch:
@@ -193,7 +193,7 @@ public String getStatData() throws IOException {
                 o.write(w);
             }
 
-            return new String(Base64.getEncoder().encode(baos.toByteArray()));
+            return Base64.getEncoder().encodeToString(baos.toByteArray());
         } catch (Throwable e) { // the exception could be GeneralSecurityException, InvalidParameterException or any other depending on the security provider you have installed
             LOG.log(Level.INFO, "Usage statistics could not be sent ({0})", e.getMessage());
             LOG.log(Level.FINE, "Error sending usage statistics", e);

File: core/src/main/java/hudson/security/HudsonAuthenticationEntryPoint.java
Patch:
@@ -31,6 +31,7 @@
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
 import java.text.MessageFormat;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
@@ -100,7 +101,7 @@ public void commence(HttpServletRequest req, HttpServletResponse rsp, Authentica
 
             PrintWriter out;
             try {
-                out = new PrintWriter(new OutputStreamWriter(rsp.getOutputStream()));
+                out = new PrintWriter(new OutputStreamWriter(rsp.getOutputStream(), StandardCharsets.UTF_8));
             } catch (IllegalStateException e) {
                 out = rsp.getWriter();
             }

File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java
Patch:
@@ -83,8 +83,8 @@ protected synchronized String issueCrumb(ServletRequest request, String salt) {
                     buffer.append(req.getSession().getId());
                 }
 
-                md.update(buffer.toString().getBytes());
-                return Util.toHexString(md.digest(salt.getBytes()));
+                md.update(buffer.toString().getBytes(StandardCharsets.UTF_8));
+                return Util.toHexString(md.digest(salt.getBytes(StandardCharsets.US_ASCII)));
             }
         }
         return null;

File: core/src/main/java/hudson/util/ConsistentHash.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.util;
 
 import hudson.util.Iterators.DuplicateFilterIterator;
+import java.nio.charset.StandardCharsets;
 import java.security.GeneralSecurityException;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
@@ -304,7 +305,7 @@ private synchronized void refreshTable() {
     private int digest(String s) {
         try {
             MessageDigest messageDigest = createMessageDigest();
-            messageDigest.update(s.getBytes());
+            messageDigest.update(s.getBytes(StandardCharsets.UTF_8));
             byte[] digest = messageDigest.digest();
 
             // 16 bytes -> 4 bytes

File: core/src/main/java/hudson/util/IOUtils.java
Patch:
@@ -17,6 +17,7 @@
 import java.io.Reader;
 import java.io.StringWriter;
 import java.io.Writer;
+import java.nio.charset.Charset;
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
 import java.util.Collection;
@@ -148,7 +149,7 @@ public static int mode(File f) throws PosixException {
      */
     public static String readFirstLine(InputStream is, String encoding) throws IOException {
         try (BufferedReader reader = new BufferedReader(
-                encoding == null ? new InputStreamReader(is) : new InputStreamReader(is, encoding))) {
+                encoding == null ? new InputStreamReader(is, Charset.defaultCharset()) : new InputStreamReader(is, encoding))) {
             return reader.readLine();
         }
     }

File: core/src/main/java/hudson/util/Scrambler.java
Patch:
@@ -40,7 +40,7 @@ public class Scrambler {
 
     public static String scramble(String secret) {
         if(secret==null)    return null;
-        return new String(Base64.getEncoder().encode(secret.getBytes(StandardCharsets.UTF_8)));
+        return Base64.getEncoder().encodeToString(secret.getBytes(StandardCharsets.UTF_8));
     }
 
     public static String descramble(String scrambled) {

File: core/src/main/java/hudson/util/Secret.java
Patch:
@@ -148,7 +148,7 @@ public String getEncryptedValue() {
             System.arraycopy(iv, 0, payload, pos, iv.length);
             pos+=iv.length;
             System.arraycopy(encrypted, 0, payload, pos, encrypted.length);
-            return "{"+new String(Base64.getEncoder().encode(payload))+"}";
+            return "{" + Base64.getEncoder().encodeToString(payload) + "}";
         } catch (GeneralSecurityException e) {
             throw new Error(e); // impossible
         }

File: core/src/main/java/jenkins/security/DefaultConfidentialStore.java
Patch:
@@ -8,6 +8,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
 import java.security.GeneralSecurityException;
@@ -151,5 +152,5 @@ public byte[] randomBytes(int size) {
         return random;
     }
 
-    private static final byte[] MAGIC = "::::MAGIC::::".getBytes();
+    private static final byte[] MAGIC = "::::MAGIC::::".getBytes(StandardCharsets.US_ASCII);
 }

File: core/src/main/java/jenkins/slaves/restarter/UnixSlaveRestarter.java
Patch:
@@ -13,6 +13,7 @@
 import hudson.Extension;
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.logging.Logger;
 import jenkins.util.JavaVMArguments;
@@ -107,7 +108,7 @@ private static String resolveSymlink(File link) throws IOException {
 
             byte[] buf = new byte[r];
             m.read(0, buf, 0, r);
-            return new String(buf);
+            return new String(buf, StandardCharsets.UTF_8);
         }
 
         throw new IOException("Failed to readlink " + link);

File: core/src/main/java/jenkins/util/JSONSignatureValidator.java
Patch:
@@ -241,7 +241,7 @@ private boolean verifySignature(Signature signature, String providedSignature) {
      * Utility method supporting both possible digest formats: Base64 and Hex
      */
     private boolean digestMatches(byte[] digest, String providedDigest) {
-        return providedDigest.equalsIgnoreCase(Hex.encodeHexString(digest)) || providedDigest.equalsIgnoreCase(new String(Base64.getEncoder().encode(digest)));
+        return providedDigest.equalsIgnoreCase(Hex.encodeHexString(digest)) || providedDigest.equalsIgnoreCase(Base64.getEncoder().encodeToString(digest));
     }
 
 

File: core/src/main/java/hudson/ExtensionList.java
Patch:
@@ -38,6 +38,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Vector;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
@@ -327,7 +328,7 @@ private List<ExtensionComponent<T>> ensureLoaded() {
      * Chooses the object that locks the loading of the extension instances.
      */
     protected Object getLoadLock() {
-        return jenkins.lookup.setIfNull(Lock.class,new Lock());
+        return Objects.requireNonNull(jenkins).lookup.setIfNull(Lock.class,new Lock());
     }
 
     /**
@@ -379,7 +380,7 @@ protected List<ExtensionComponent<T>> load() {
             LOGGER.log(Level.FINER, String.format("Loading ExtensionList '%s' from", extensionType.getName()), new Throwable("Only present for stacktrace information"));
         }
 
-        return jenkins.getPluginManager().getPluginStrategy().findComponents(extensionType, hudson);
+        return Objects.requireNonNull(jenkins).getPluginManager().getPluginStrategy().findComponents(extensionType, hudson);
     }
 
     /**

File: core/src/main/java/hudson/console/ConsoleNote.java
Patch:
@@ -325,10 +325,12 @@ public static void skip(DataInputStream in) throws IOException {
      * Preamble of the encoded form. ANSI escape sequence to stop echo back
      * plus a few magic characters.
      */
+    @SuppressFBWarnings(value = "MS_PKGPROTECT", justification = "used in several plugins")
     public static final byte[] PREAMBLE = PREAMBLE_STR.getBytes();
     /**
      * Post amble is the ANSI escape sequence that brings back the echo.
      */
+    @SuppressFBWarnings(value = "MS_PKGPROTECT", justification = "used in several plugins")
     public static final byte[] POSTAMBLE = POSTAMBLE_STR.getBytes();
 
     /**

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -353,6 +353,7 @@ protected void checkRename(@NonNull String newName) throws Failure {
      * Not all the Items need to support this operation, but if you decide to do so,
      * you can use this method.
      */
+    @SuppressFBWarnings(value = "SWL_SLEEP_WITH_LOCK_HELD", justification = "no big deal")
     protected void renameTo(final String newName) throws IOException {
 
         if (!isNameEditable()) {

File: core/src/main/java/hudson/model/AutoCompletionCandidates.java
Patch:
@@ -25,6 +25,7 @@
 package hudson.model;
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.search.Search;
 import hudson.search.UserSearchProperty;
 import java.io.IOException;
@@ -108,6 +109,7 @@ public static <T extends Item> AutoCompletionCandidates ofJobNames(final Class<T
      *      The nearby contextual {@link ItemGroup} to resolve relative job names from.
      * @since 1.553
      */
+    @SuppressFBWarnings(value = "SBSC_USE_STRINGBUFFER_CONCATENATION", justification = "no big deal")
     public static  <T extends Item> AutoCompletionCandidates ofJobNames(final Class<T> type, final String value, ItemGroup container) {
         final AutoCompletionCandidates candidates = new AutoCompletionCandidates();
         class Visitor extends ItemVisitor {

File: core/src/main/java/hudson/model/Cause.java
Patch:
@@ -26,6 +26,7 @@
 import com.thoughtworks.xstream.converters.UnmarshallingContext;
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Util;
 import hudson.console.ModelHyperlinkNote;
 import hudson.diagnosis.OldDataMonitor;
@@ -129,6 +130,7 @@ public void print(TaskListener listener) {
      */
     @Deprecated
     public static class LegacyCodeCause extends Cause {
+        @SuppressFBWarnings(value = "URF_UNREAD_FIELD", justification = "for backward compatibility")
         private StackTraceElement [] stackTrace;
         public LegacyCodeCause() {
             stackTrace = new Exception().getStackTrace();

File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java
Patch:
@@ -750,6 +750,7 @@ private static final class BuildChildPaths extends MasterToSlaveCallable<List<Li
      * list of {@link Path} represents one child item to be shown
      * (this mechanism is used to skip empty intermediate directory.)
      */
+    @SuppressFBWarnings(value = "SBSC_USE_STRINGBUFFER_CONCATENATION", justification = "no big deal")
     private static List<List<Path>> buildChildPaths(VirtualFile cur, Locale locale) throws IOException {
             List<List<Path>> r = new ArrayList<>();
 

File: core/src/main/java/hudson/model/FreeStyleProject.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import jenkins.model.Jenkins;
 import jenkins.model.item_category.StandaloneProjectsCategory;
@@ -70,10 +71,12 @@ public DescriptorImpl getDescriptor() {
      */
     @Deprecated
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings(value = "MS_PKGPROTECT", justification = "for backward compatibility")
     public static /*almost final*/ DescriptorImpl DESCRIPTOR;
 
     @Extension(ordinal=1000) @Symbol({"freeStyle","freeStyleJob"})
     public static class DescriptorImpl extends AbstractProjectDescriptor {
+        @SuppressFBWarnings(value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification = "for backward compatibility")
         public DescriptorImpl() {
             DESCRIPTOR = this;
         }

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -1370,6 +1370,7 @@ public static <V> java.util.concurrent.Callable<V> wrapWithLock(java.util.concur
     }
 
     @Override
+    @SuppressFBWarnings(value = "WA_AWAIT_NOT_IN_LOOP", justification = "the caller does indeed call this method in a loop")
     protected void _await() throws InterruptedException {
         condition.await();
     }

File: core/src/main/java/hudson/model/ResourceController.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.model;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.util.AdaptedIterator;
 import java.util.AbstractCollection;
 import java.util.Collection;
@@ -166,6 +167,7 @@ public ResourceActivity getBlockingActivity(ResourceActivity activity) {
         return null;
     }
 
+    @SuppressFBWarnings(value = "WA_NOT_IN_LOOP", justification = "the caller does indeed call this method in a loop")
     protected void _await() throws InterruptedException {
         wait();
     }

File: core/src/main/java/hudson/model/StringParameterDefinition.java
Patch:
@@ -147,7 +147,7 @@ public String getHelpFile() {
     @Override
     public ParameterValue createValue(StaplerRequest req, JSONObject jo) {
         StringParameterValue value = req.bindJSON(StringParameterValue.class, jo);
-        if (isTrim() && value!=null) {
+        if (isTrim()) {
             value.doTrim();
         }
         value.setDescription(getDescription());

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -1240,6 +1240,7 @@ public void postValidate(DownloadJob job, File src) throws IOException {
          * @throws IOException if there were problems downloading the resource.
          * @see DownloadJob
          */
+        @SuppressFBWarnings(value = "WEAK_MESSAGE_DIGEST_SHA1", justification = "SHA-1 is only used as a fallback if SHA-256/SHA-512 are not available")
         public File download(DownloadJob job, URL src) throws IOException {
             MessageDigest sha1 = null;
             MessageDigest sha256 = null;

File: core/src/main/java/hudson/node_monitors/ClockMonitor.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.node_monitors;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.model.Computer;
 import hudson.model.Node;
@@ -53,10 +54,12 @@ public ClockDifference getDifferenceFor(Computer c) {
      */
     @Deprecated
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings(value = "MS_PKGPROTECT", justification = "for backward compatibility")
     public static /*almost final*/ AbstractNodeMonitorDescriptor<ClockDifference> DESCRIPTOR;
 
     @Extension @Symbol("clock")
     public static class DescriptorImpl extends AbstractAsyncNodeMonitorDescriptor<ClockDifference> {
+        @SuppressFBWarnings(value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification = "for backward compatibility")
         public DescriptorImpl() {
             DESCRIPTOR = this;
         }

File: core/src/main/java/hudson/node_monitors/SwapSpaceMonitor.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.node_monitors;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.Functions;
 import hudson.Util;
@@ -89,6 +90,7 @@ public String getColumnCaption() {
 
     @Extension @Symbol("swapSpace")
     public static class DescriptorImpl extends AbstractAsyncNodeMonitorDescriptor<MemoryUsage> {
+        @SuppressFBWarnings(value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification = "for backward compatibility")
         public DescriptorImpl() {
             DESCRIPTOR = this;
         }

File: core/src/main/java/hudson/node_monitors/TemporarySpaceMonitor.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.node_monitors;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.FilePath;
 import hudson.model.Computer;
@@ -66,10 +67,12 @@ public String getColumnCaption() {
      *      Use injection
      */
     @Deprecated
+    @SuppressFBWarnings(value = "MS_PKGPROTECT", justification = "for backward compatibility")
     public static /*almost final*/ DiskSpaceMonitorDescriptor DESCRIPTOR;
 
     @Extension @Symbol("tmpSpace")
     public static class DescriptorImpl extends DiskSpaceMonitorDescriptor {
+        @SuppressFBWarnings(value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification = "for backward compatibility")
         public DescriptorImpl() {
             DESCRIPTOR = this;
         }

File: core/src/main/java/hudson/security/ACL.java
Patch:
@@ -355,7 +355,7 @@ public String toString() {
      */
     public static final Sid ANONYMOUS = new PrincipalSid(ANONYMOUS_USERNAME);
 
-    protected static final Sid[] AUTOMATIC_SIDS = new Sid[]{EVERYONE,ANONYMOUS};
+    static final Sid[] AUTOMATIC_SIDS = new Sid[]{EVERYONE,ANONYMOUS};
 
     /**
      * The username for the system user

File: core/src/main/java/hudson/security/FullControlOnceLoggedInAuthorizationStrategy.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.security;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.model.Descriptor;
 import java.util.Collections;
@@ -96,6 +97,7 @@ public void setAllowAnonymousRead(boolean allowAnonymousRead) {
 
     @Extension @Symbol("loggedInUsersCanDoAnything")
     public static class DescriptorImpl extends Descriptor<AuthorizationStrategy> {
+        @SuppressFBWarnings(value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification = "for backward compatibility")
         public DescriptorImpl() {
             DESCRIPTOR = this;
         }

File: core/src/main/java/hudson/security/LegacySecurityRealm.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.security;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.model.Descriptor;
 import java.util.ArrayList;
@@ -99,6 +100,7 @@ public Filter createFilter(FilterConfig filterConfig) {
 
     @Extension @Symbol("legacy")
     public static class DescriptorImpl extends  Descriptor<SecurityRealm> {
+        @SuppressFBWarnings(value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification = "for backward compatibility")
         public DescriptorImpl() {
             DESCRIPTOR = this;
         }

File: core/src/main/java/hudson/slaves/JNLPLauncher.java
Patch:
@@ -202,6 +202,7 @@ public String getWorkDirOptions(@NonNull Computer computer) {
     
     @Extension @Symbol("jnlp")
     public static class DescriptorImpl extends Descriptor<ComputerLauncher> {
+        @SuppressFBWarnings(value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification = "for backward compatibility")
         public DescriptorImpl() {
             DESCRIPTOR = this;
         }

File: core/src/main/java/hudson/tasks/Maven.java
Patch:
@@ -429,6 +429,7 @@ public static final class DescriptorImpl extends BuildStepDescriptor<Builder> im
         @CopyOnWrite
         private volatile MavenInstallation[] installations = new MavenInstallation[0];
 
+        @SuppressFBWarnings(value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification = "for backward compatibility")
         public DescriptorImpl() {
             DESCRIPTOR = this;
         }

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -62,6 +62,7 @@
 import java.util.Date;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -209,7 +210,7 @@ public Collection<? extends Action> getProjectActions() {
      * Returns the file that records the last/current polling activity.
      */
     public File getLogFile() {
-        return new File(job.getRootDir(),"scm-polling.log");
+        return new File(Objects.requireNonNull(job).getRootDir(),"scm-polling.log");
     }
 
     @Extension @Symbol("pollSCM")
@@ -691,7 +692,7 @@ public boolean equals(Object that) {
 
         @Override
         public int hashCode() {
-            return job.hashCode();
+            return Objects.requireNonNull(job).hashCode();
         }
     }
 

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -2242,6 +2242,6 @@ public <T> T act(ProcessCallable<T> callable) throws IOException, InterruptedExc
      * in case there's a fatal problem.
      *
      */
-    public static boolean enabled = !SystemProperties.getBoolean("hudson.util.ProcessTreeKiller.disable")
+    static boolean enabled = !SystemProperties.getBoolean("hudson.util.ProcessTreeKiller.disable")
             && !SystemProperties.getBoolean(ProcessTree.class.getName()+".disable");
 }

File: core/src/main/java/hudson/util/RemotingDiagnostics.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.util;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import groovy.lang.Binding;
 import groovy.lang.GroovyShell;
 import hudson.FilePath;
@@ -127,6 +128,7 @@ public ClassLoader getClassLoader() {
         }
 
         @Override
+        @SuppressFBWarnings(value = "GROOVY_SHELL", justification = "script console is a feature, not a bug")
         public String call() throws RuntimeException {
             // if we run locally, cl!=null. Otherwise the delegating classloader will be available as context classloader.
             if (cl==null)       cl = Thread.currentThread().getContextClassLoader();

File: core/src/main/java/hudson/util/jna/Advapi32.java
Patch:
@@ -31,6 +31,7 @@
  *
  * @author TB
  */
+@SuppressFBWarnings(value = "MS_OOI_PKGPROTECT", justification = "for backward compatibility")
 @SuppressWarnings("UnusedReturnValue")
 public interface Advapi32  extends StdCallLibrary {
   Advapi32 INSTANCE = (Advapi32) Native.load("Advapi32", Advapi32.class, Options.UNICODE_OPTIONS);

File: core/src/main/java/hudson/util/jna/Options.java
Patch:
@@ -20,13 +20,15 @@
 
 import com.sun.jna.win32.W32APIFunctionMapper;
 import com.sun.jna.win32.W32APITypeMapper;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.HashMap;
 import java.util.Map;
 
 /**
  *
  * @author TB
  */
+@SuppressFBWarnings(value = "MS_OOI_PKGPROTECT", justification = "for backward compatibility")
 public interface Options {
   Map<String, Object> UNICODE_OPTIONS = new HashMap<String, Object>() {
     {

File: core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java
Patch:
@@ -26,6 +26,7 @@
 import com.thoughtworks.xstream.converters.basic.DateConverter;
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.Functions;
 import hudson.Util;
@@ -325,6 +326,7 @@ private static String messageOfParseException(Throwable throwable) {
     /**
      * Deletes a directory if it's empty.
      */
+    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE", justification = "https://github.com/spotbugs/spotbugs/issues/756")
     private void deleteIfEmpty(File dir) {
         try {
             if (Files.isDirectory(dir.toPath())) {

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -749,6 +749,7 @@ public void init(FilterConfig cfg) throws ServletException {
         }
 
         @Override
+        @SuppressFBWarnings(value = "UNVALIDATED_REDIRECT", justification = "TODO needs triage")
         public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
             // Force root requests to the setup wizard
             if (request instanceof HttpServletRequest && !Jenkins.get().getInstallState().isSetupComplete()) {

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -4857,6 +4857,7 @@ public void doResources(StaplerRequest req, StaplerResponse rsp) throws IOExcept
      * Extension list that {@link #doResources(StaplerRequest, StaplerResponse)} can serve.
      * This set is mutable to allow plugins to add additional extensions.
      */
+    @SuppressFBWarnings(value = "MS_MUTABLE_COLLECTION_PKGPROTECT", justification = "mutable to allow plugins to add additional extensions")
     public static final Set<String> ALLOWED_RESOURCE_EXTENSIONS = new HashSet<>(Arrays.asList(
             "js|css|jpeg|jpg|png|gif|html|htm".split("\\|")
     ));

File: core/src/main/java/jenkins/model/PeepholePermalink.java
Patch:
@@ -2,6 +2,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.Util;
 import hudson.model.Job;
@@ -146,6 +147,7 @@ private Run<?,?> find(Run<?,?> b) {
         }
     }
 
+    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE", justification = "https://github.com/spotbugs/spotbugs/issues/756")
     private static @NonNull Map<String, Integer> load(@NonNull File buildDir) {
         Map<String, Integer> cache = new TreeMap<>();
         File storage = storageFor(buildDir);

File: core/src/main/java/jenkins/slaves/NioChannelSelector.java
Patch:
@@ -46,7 +46,7 @@ public void cleanUp() throws IOException {
     /**
      * Escape hatch to disable use of NIO.
      */
-    public static boolean DISABLED = SystemProperties.getBoolean(NioChannelSelector.class.getName()+".disabled");
+    static boolean DISABLED = SystemProperties.getBoolean(NioChannelSelector.class.getName()+".disabled");
 
     private static final Logger LOGGER = Logger.getLogger(NioChannelSelector.class.getName());
 }

File: core/src/main/java/jenkins/util/DirectedGraph.java
Patch:
@@ -1,5 +1,6 @@
 package jenkins.util;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.AbstractSet;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -76,6 +77,7 @@ class Node {
          */
         int lowlink;
 
+        @SuppressFBWarnings(value = "URF_UNREAD_FIELD", justification = "no big deal")
         SCC scc;
 
         Node(N n) {

File: core/src/main/java/jenkins/util/JSONSignatureValidator.java
Patch:
@@ -1,5 +1,6 @@
 package jenkins.util;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.util.FormValidation;
 import java.io.ByteArrayInputStream;
 import java.io.File;
@@ -52,6 +53,7 @@ public JSONSignatureValidator(String name) {
     /**
      * Verifies the signature in the update center data file.
      */
+    @SuppressFBWarnings(value = "WEAK_MESSAGE_DIGEST_SHA1", justification = "SHA-1 is only used as a fallback if SHA-512 is not available")
     public FormValidation verifySignature(JSONObject o) throws IOException {
         try {
             FormValidation warning = null;

File: core/src/main/java/jenkins/util/groovy/GroovyHookScript.java
Patch:
@@ -3,6 +3,7 @@
 import static java.util.logging.Level.WARNING;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import groovy.lang.Binding;
 import groovy.lang.GroovyCodeSource;
 import groovy.lang.GroovyShell;
@@ -129,6 +130,7 @@ protected void execute(File f) {
         }
     }
 
+    @SuppressFBWarnings(value = "GROOVY_SHELL", justification = "Groovy hook scripts are a feature, not a bug")
     protected void execute(GroovyCodeSource s) {
         try {
             createShell().evaluate(s);

File: core/src/main/java/jenkins/util/io/PathRemover.java
Patch:
@@ -214,6 +214,7 @@ private List<IOException> tryRemoveRecursive(@NonNull Path path) {
         return accumulatedErrors;
     }
 
+    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE", justification = "https://github.com/spotbugs/spotbugs/issues/756")
     private List<IOException> tryRemoveDirectoryContents(@NonNull Path path) {
         Path normalized = path.normalize();
         List<IOException> accumulatedErrors = new ArrayList<>();
@@ -228,6 +229,7 @@ private List<IOException> tryRemoveDirectoryContents(@NonNull Path path) {
         return accumulatedErrors;
     }
 
+    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE", justification = "https://github.com/spotbugs/spotbugs/issues/756")
     private void removeOrMakeRemovableThenRemove(@NonNull Path path) throws IOException {
         pathChecker.check(path);
         try {

File: core/src/main/java/jenkins/util/xml/XMLUtils.java
Patch:
@@ -1,6 +1,7 @@
 package jenkins.util.xml;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -109,6 +110,7 @@ public static void safeTransform(@NonNull Source source, @NonNull Result out) th
      * @throws IOException Error reading from the steam.
      * @since 2.265
      */
+    @SuppressFBWarnings(value = "XXE_DOCUMENT", justification = "newDocumentBuilderFactory() does what FindSecBugs recommends, yet FindSecBugs cannot see this")
     public static @NonNull Document parse(@NonNull InputStream stream) throws SAXException, IOException {
         DocumentBuilder docBuilder;
 
@@ -133,6 +135,7 @@ public static void safeTransform(@NonNull Source source, @NonNull Result out) th
      * @throws IOException Error reading from the steam.
      * @since 2.0
      */
+    @SuppressFBWarnings(value = "XXE_DOCUMENT", justification = "newDocumentBuilderFactory() does what FindSecBugs recommends, yet FindSecBugs cannot see this")
     public static @NonNull Document parse(@NonNull Reader stream) throws SAXException, IOException {
         DocumentBuilder docBuilder;
 

File: core/src/main/java/org/jenkins/ui/icon/IconSet.java
Patch:
@@ -363,7 +363,6 @@ private static String toNormalizedIconUrl(String url) {
         icons.addIcon(new Icon("icon-computer-flash icon-md", "24x24/computer-flash.gif", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new BuildStatusIcon("icon-disabled icon-md", "build-status/build-status-sprite.svg#last-disabled", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new BuildStatusIcon("icon-disabled-anime icon-md", "build-status/build-status-sprite.svg#last-disabled", Icon.ICON_MEDIUM_STYLE, true));
-        icons.addIcon(new Icon("icon-document-properties icon-md", "24x24/document-properties.gif", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new Icon("icon-empty icon-md", "24x24/empty.gif", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new Icon("icon-green icon-md", "24x24/green.gif", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new Icon("icon-green-anime icon-md", "24x24/green_anime.gif", Icon.ICON_MEDIUM_STYLE));
@@ -380,7 +379,6 @@ private static String toNormalizedIconUrl(String url) {
         icons.addIcon(new BuildStatusIcon("icon-red-anime icon-md", "build-status/build-status-sprite.svg#last-failed", Icon.ICON_MEDIUM_STYLE, true));
         icons.addIcon(new BuildStatusIcon("icon-yellow icon-md", "build-status/build-status-sprite.svg#last-unstable", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new BuildStatusIcon("icon-yellow-anime icon-md", "build-status/build-status-sprite.svg#last-unstable", Icon.ICON_MEDIUM_STYLE, true));
-        icons.addIcon(new Icon("icon-document-properties icon-md", "24x24/document-properties.png", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new Icon("icon-empty icon-md", "24x24/empty.png", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new Icon("icon-grey icon-md", "24x24/grey.png", Icon.ICON_MEDIUM_STYLE));
 
@@ -516,6 +514,7 @@ private static void initializeSVGs() {
         images.add("user");
         images.add("video");
         images.add("warning");
+        images.add("document-properties");
 
         Map<String, String> materialIcons = new HashMap<>();
         materialIcons.put("help", "svg-sprite-action-symbol.svg#ic_help_24px");

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -291,12 +291,12 @@ public List<Action> getOwnerViewActions() {
      * Message displayed in the top page. Can be null. Includes HTML.
      */
     @Exported
-    public String getDescription() {
+    public synchronized String getDescription() {
         return description;
     }
 
     @DataBoundSetter
-    public void setDescription(String description) {
+    public synchronized void setDescription(String description) {
         this.description = description;
     }
 

File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java
Patch:
@@ -57,7 +57,7 @@ private Object readResolve() {
         return this;
     }
 
-    private void initializeMessageDigest() {
+    private synchronized void initializeMessageDigest() {
         try {
             md = MessageDigest.getInstance("SHA-256");
         } catch (NoSuchAlgorithmException e) {

File: core/src/main/java/hudson/slaves/SimpleScheduledRetentionStrategy.java
Patch:
@@ -239,7 +239,7 @@ public void run() {
         return 1;
     }
 
-    private boolean isOnlineScheduled() {
+    private synchronized boolean isOnlineScheduled() {
         updateStartStopWindow();
         long now = System.currentTimeMillis();
         return (lastStart < now && lastStop > now) || (nextStart < now && nextStop > now);

File: core/src/main/java/hudson/tasks/Fingerprinter.java
Patch:
@@ -390,7 +390,9 @@ public void add(Map<String,String> moreRecords) {
             Map<String,String> r = new HashMap<>(record);
             r.putAll(moreRecords);
             record = compact(r);
-            ref = null;
+            synchronized (this) {
+                ref = null;
+            }
         }
 
         @Override

File: core/src/main/java/hudson/tools/ToolInstallation.java
Patch:
@@ -27,6 +27,7 @@
 import com.thoughtworks.xstream.converters.UnmarshallingContext;
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.DescriptorExtensionList;
 import hudson.EnvVars;
 import hudson.Extension;
@@ -223,6 +224,7 @@ protected String translateFor(Node node, TaskListener log) throws IOException, I
     /**
      * Invoked by XStream when this object is read into memory.
      */
+    @SuppressFBWarnings(value = "IS2_INCONSISTENT_SYNC", justification = "nothing should be competing with XStream during deserialization")
     protected Object readResolve() {
         if (properties != null) {
             for (ToolProperty<?> p : properties) {

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -1727,7 +1727,7 @@ public synchronized EnvVars getEnvironmentVariables() {
 
             @Override
             @NonNull
-            public List<String> getArguments() {
+            public synchronized List<String> getArguments() {
                 if(arguments !=null)
                     return arguments;
                 parse();

File: core/src/main/java/hudson/util/SequentialExecutionQueue.java
Patch:
@@ -107,7 +107,9 @@ private QueueEntry(Runnable item) {
         // Caller must have a lock
         private void submit() {
             submissionTime = System.currentTimeMillis();
-            executors.submit(this);
+            synchronized (SequentialExecutionQueue.this) {
+                executors.submit(this);
+            }
         }
 
         @Override

File: core/src/main/java/jenkins/security/apitoken/ApiTokenStats.java
Patch:
@@ -26,6 +26,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.BulkChange;
 import hudson.Util;
 import hudson.XmlFile;
@@ -161,6 +162,7 @@ public synchronized void removeAllExcept(@NonNull String tokenUuid) {
     }
     
     
+    @SuppressFBWarnings(value = "IS2_INCONSISTENT_SYNC", justification = "access is in fact synchronized")
     private synchronized SingleTokenStats updateUsageForIdIfNeeded(@NonNull String tokenUuid) {
     	SingleTokenStats stats = findById(tokenUuid)
                 .orElseGet(() -> {

File: test/src/test/java/hudson/PluginManagerTest.java
Patch:
@@ -194,7 +194,7 @@ public void startPlugin(PluginWrapper plugin) throws Exception {
                     // plugins should be already visible in the UberClassLoader
                     assertFalse(activePlugins.isEmpty());
 
-                    uberClassLoader.loadClass("hudson.plugins.tasks.Messages");
+                    assertNotNull(uberClassLoader.loadClass("htmlpublisher.HtmlPublisher"));
 
                     super.startPlugin(plugin);
                 }

File: test/src/test/java/hudson/cli/BuildCommandTest.java
Patch:
@@ -107,6 +107,7 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
         started.block();
         assertTrue(p.getBuildByNumber(1).isBuilding());
         completed.signal();
+        j.waitForCompletion(p.getBuildByNumber(1));
     }
 
     /**

File: test/src/test/java/hudson/cli/RunRangeCommand2Test.java
Patch:
@@ -32,6 +32,7 @@
 import static org.hamcrest.Matchers.equalTo;
 
 import hudson.Functions;
+import hudson.model.FreeStyleBuild;
 import hudson.model.FreeStyleProject;
 import hudson.model.Item;
 import hudson.model.labels.LabelAtom;
@@ -83,7 +84,7 @@ public class RunRangeCommand2Test {
     @Test public void dummyRangeShouldSuccessEvenTheBuildIsRunning() throws Exception {
         FreeStyleProject project = j.createFreeStyleProject("aProject");
         project.getBuildersList().add(Functions.isWindows() ? new BatchFile("echo 1\r\nping -n 10 127.0.0.1 >nul") : new Shell("echo 1\nsleep 10s"));
-        assertThat("Job wasn't scheduled properly", project.scheduleBuild(0), equalTo(true));
+        FreeStyleBuild build = project.scheduleBuild2(0).waitForStart();
 
         // Wait until classProject is started (at least 1s)
         while(!project.isBuilding()) {
@@ -101,6 +102,7 @@ public class RunRangeCommand2Test {
                 .invokeWithArgs("aProject", "1");
         assertThat(result, succeeded());
         assertThat(result.stdout(), containsString("Builds: 1" + System.lineSeparator()));
+        j.waitForCompletion(build);
     }
 
     @Test public void dummyRangeShouldSuccessEvenTheBuildIsStuckInTheQueue() throws Exception {

File: test/src/test/java/hudson/model/AbstractItemTest.java
Patch:
@@ -76,8 +76,9 @@ public void checkRenameValidity() throws Exception {
         j.jenkins.setProjectNamingStrategy(new ProjectNamingStrategy.PatternProjectNamingStrategy("bar", "", false));
         assertThat(checkNameAndReturnError(p, "foo1"), equalTo(jenkins.model.Messages.Hudson_JobNameConventionNotApplyed("foo1", "bar")));
 
-        p.scheduleBuild2(0).waitForStart();
+        FreeStyleBuild b = p.scheduleBuild2(0).waitForStart();
         assertThat(checkNameAndReturnError(p, "bar"), equalTo(Messages.Job_NoRenameWhileBuilding()));
+        j.assertBuildStatusSuccess(j.waitForCompletion(b));
     }
 
     @Test

File: test/src/test/java/hudson/model/JobTest.java
Patch:
@@ -507,9 +507,9 @@ public void interruptOnDelete() throws Exception {
         p.delete();
         long end = System.nanoTime();
         assertThat(end - start, Matchers.lessThan(TimeUnit.SECONDS.toNanos(1)));
-        assertThat(build1.getResult(), Matchers.is(Result.ABORTED));
-        assertThat(build2.getResult(), Matchers.is(Result.ABORTED));
-        assertThat(build3.isCancelled(), Matchers.is(true));
+        j.assertBuildStatus(Result.ABORTED, j.waitForCompletion(build1));
+        j.assertBuildStatus(Result.ABORTED, j.waitForCompletion(build2));
+        assertTrue(build3.isCancelled());
     }
 
     @Issue("SECURITY-1868")

File: test/src/test/java/hudson/model/ProjectTest.java
Patch:
@@ -388,8 +388,9 @@ public void testGetCauseOfBlockage() throws Exception {
         b2.get();
 
         downstream.setBlockBuildWhenUpstreamBuilding(true);
-        waitForStart(p);
+        QueueTaskFuture<FreeStyleBuild> b3 = waitForStart(p);
         assertInstanceOf("Build can not start because build of upstream project has not finished.", downstream.getCauseOfBlockage(), BecauseOfUpstreamBuildInProgress.class);
+        b3.get();
     }
 
     private static final Logger LOGGER = Logger.getLogger(ProjectTest.class.getName());

File: test/src/test/java/hudson/model/RunMapTest.java
Patch:
@@ -59,6 +59,8 @@ public class RunMapTest {
         b1 = p.getBuildByNumber(1);
         assertSame(b1.getNextBuild(), b2);
         assertSame(b2.getPreviousBuild(), b1);
+        b2.doStop();
+        r.assertBuildStatus(Result.ABORTED, r.waitForCompletion(b2));
     }
 
     @Issue("JENKINS-27530")

File: test/src/test/java/hudson/util/ProcessTreeTest.java
Patch:
@@ -56,12 +56,11 @@ public void manualAbortProcess() throws Exception {
         project.getBuildersList().add(new Maven("install", "maven"));
 
         // build the project, wait until tests are running, then cancel.
-        project.scheduleBuild2(0).waitForStart();
+        FreeStyleBuild b = project.scheduleBuild2(0).waitForStart();
 
-        FreeStyleBuild b = project.getLastBuild();
         b.doStop();
 
-        Thread.sleep(1000);
+        j.waitForCompletion(b);
 
         // will fail (at least on windows) if test process is still running
         b.getWorkspace().deleteRecursive();

File: core/src/test/java/hudson/PluginManagerTest.java
Patch:
@@ -85,7 +85,7 @@ public void parseInvalidRequestedPlugins() throws Exception {
                 () -> pluginManager.parseRequestedPlugins(new ByteArrayInputStream(evilXML.getBytes())),
                 "XML contains an external entity, but no exception was thrown.");
         assertThat(ex.getCause(), instanceOf(SAXException.class));
-        assertThat(ex.getCause().getMessage(), containsString("Refusing to resolve entity with publicId(null) and systemId (file:///)"));
+        assertThat(ex.getCause().getMessage(), containsString("DOCTYPE is disallowed"));
     }
     
     @Test

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -480,7 +480,7 @@ private static void parseClassPath(Manifest manifest, File archive, List<File> p
      * Explodes the plugin into a directory, if necessary.
      */
     private static void explode(File archive, File destDir) throws IOException {
-        destDir.mkdirs();
+        Files.createDirectories(Util.fileToPath(destDir));
 
         // timestamp check
         File explodeTime = new File(destDir,".timestamp2");
@@ -549,7 +549,7 @@ protected void zipDir(Resource dir, ZipOutputStream zOut, String vPath,
             };
             z.setProject(prj);
             z.setTaskType("zip");
-            classesJar.getParentFile().mkdirs();
+            Files.createDirectories(Util.fileToPath(classesJar.getParentFile()));
             z.setDestFile(classesJar);
             z.add(mapper);
             z.execute();

File: core/src/main/java/hudson/Main.java
Patch:
@@ -200,7 +200,7 @@ public static int remotePost(String[] args) throws Exception {
                 }
             }
         } finally {
-            tmpFile.delete();
+            Files.delete(Util.fileToPath(tmpFile));
         }
     }
 

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -1378,7 +1378,7 @@ public HttpResponse doDoUninstall() throws IOException {
         Jenkins jenkins = Jenkins.get();
         
         jenkins.checkPermission(Jenkins.ADMINISTER);
-        archive.delete();
+        Files.deleteIfExists(Util.fileToPath(archive));
 
         // Redo who depends on who.
         jenkins.getPluginManager().resolveDependentPlugins();

File: core/src/main/java/hudson/lifecycle/WindowsInstallerLink.java
Patch:
@@ -29,6 +29,7 @@
 import hudson.Extension;
 import hudson.Functions;
 import hudson.Launcher.LocalLauncher;
+import hudson.Util;
 import hudson.model.ManagementLink;
 import hudson.model.TaskListener;
 import hudson.util.StreamTaskListener;
@@ -37,6 +38,7 @@
 import java.io.IOException;
 import java.net.URL;
 import java.nio.charset.Charset;
+import java.nio.file.Files;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.servlet.ServletException;
@@ -137,7 +139,7 @@ public void doDoInstall(StaplerRequest req, StaplerResponse rsp, @QueryParameter
         try {
             // copy files over there
             copy(req, rsp, dir, getClass().getResource("/windows-service/jenkins.exe"),         "jenkins.exe");
-            new File(dir, "jenkins.exe.config").delete();
+            Files.deleteIfExists(Util.fileToPath(dir).resolve("jenkins.exe.config"));
             copy(req, rsp, dir, getClass().getResource("/windows-service/jenkins.xml"),         "jenkins.xml");
             if(!hudsonWar.getCanonicalFile().equals(new File(dir,"jenkins.war").getCanonicalFile()))
                 copy(req, rsp, dir, hudsonWar.toURI().toURL(), "jenkins.war");

File: core/src/main/java/hudson/util/RemotingDiagnostics.java
Patch:
@@ -28,6 +28,7 @@
 import groovy.lang.GroovyShell;
 import hudson.FilePath;
 import hudson.Functions;
+import hudson.Util;
 import hudson.remoting.AsyncFutureImpl;
 import hudson.remoting.DelegatingCallable;
 import hudson.remoting.Future;
@@ -39,6 +40,7 @@
 import java.io.StringWriter;
 import java.lang.management.ManagementFactory;
 import java.lang.management.ThreadInfo;
+import java.nio.file.Files;
 import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.Map;
@@ -161,7 +163,7 @@ private static class GetHeapDump extends MasterToSlaveCallable<FilePath, IOExcep
             @Override
             public FilePath call() throws IOException {
                 final File hprof = File.createTempFile("hudson-heapdump", "hprof");
-                hprof.delete();
+                Files.delete(Util.fileToPath(hprof));
                 try {
                     MBeanServer server = ManagementFactory.getPlatformMBeanServer();
                     server.invoke(new ObjectName("com.sun.management:type=HotSpotDiagnostic"), "dumpHeap",

File: core/src/main/java/hudson/util/TextFile.java
Patch:
@@ -57,8 +57,8 @@ public boolean exists() {
         return file.exists();
     }
 
-    public void delete() {
-        file.delete();
+    public void delete() throws IOException {
+        Files.deleteIfExists(Util.fileToPath(file));
     }
 
     /**
@@ -96,7 +96,7 @@ public Stream<String> lines() throws IOException {
      * Overwrites the file by the given string.
      */
     public void write(String text) throws IOException {
-        file.getParentFile().mkdirs();
+        Files.createDirectories(Util.fileToPath(file.getParentFile()));
         try (AtomicFileWriter w = new AtomicFileWriter(file)) {
             try {
                 w.write(text);

File: core/src/main/java/jenkins/diagnosis/HsErrPidFile.java
Patch:
@@ -4,6 +4,7 @@
 import hudson.util.HttpResponses;
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.Files;
 import java.util.Date;
 import jenkins.model.Jenkins;
 import org.kohsuke.stapler.HttpResponse;
@@ -51,7 +52,7 @@ public HttpResponse doDownload() throws IOException {
     @RequirePOST
     public HttpResponse doDelete() throws IOException {
         Jenkins.get().checkPermission(Jenkins.ADMINISTER);
-        file.delete();
+        Files.deleteIfExists(Util.fileToPath(file));
         owner.files.remove(this);
         return HttpResponses.redirectTo("../..");
     }

File: core/src/test/java/hudson/PluginManagerTest.java
Patch:
@@ -62,7 +62,7 @@ public void parseRequestedPlugins() throws Exception {
         Path output = Files.createFile(
                 tmp.resolve("output.txt")
         );
-        assertEquals("{other=2.0, stuff=1.2}", new LocalPluginManager(output.toFile())
+        assertEquals("{other=2.0, stuff=1.2}", new LocalPluginManager(output.getParent().toFile())
                 .parseRequestedPlugins(new ByteArrayInputStream("<root><stuff plugin='stuff@1.0'><more plugin='other@2.0'><things plugin='stuff@1.2'/></more></stuff></root>".getBytes())).toString());
     }
 

File: core/src/main/java/hudson/model/ListView.java
Patch:
@@ -185,7 +185,7 @@ public DescribableList<ListViewColumn, Descriptor<ListViewColumn>> getColumns()
         return columns;
     }
 
-    public Set<String> getJobNames() {
+    public synchronized Set<String> getJobNames() {
         return Collections.unmodifiableSet(jobNames);
     }
 

File: core/src/main/java/hudson/Launcher.java
Patch:
@@ -27,6 +27,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Proc.LocalProc;
 import hudson.Proc.ProcWithJenkins23271Patch;
 import hudson.model.Computer;
@@ -1504,6 +1505,7 @@ private static EnvVars inherit(@NonNull Map<String,String> overrides) {
     /**
      * Debug option to display full current path instead of just the last token.
      */
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for debugging")
     public static boolean showFullPath = false;
 
     private static final NullInputStream NULL_INPUT_STREAM = new NullInputStream(0);

File: core/src/main/java/hudson/Main.java
Patch:
@@ -24,6 +24,7 @@
 package hudson;
 
 import com.thoughtworks.xstream.core.util.Base64Encoder;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.util.DualOutputStream;
 import hudson.util.EncodingStream;
 import hudson.util.IOUtils;
@@ -216,12 +217,14 @@ private static HttpURLConnection open(URL url) throws IOException {
     /**
      * Set to true if we are running unit tests.
      */
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for debugging")
     public static boolean isUnitTest = false;
 
     /**
      * Set to true if we are running inside {@code mvn jetty:run}.
      * This is also set if running inside {@code mvn hpi:run} since plugins parent POM 2.30.
      */
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for debugging")
     public static boolean isDevelopmentMode = SystemProperties.getBoolean(Main.class.getName()+".development");
 
     /**

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -35,6 +35,7 @@
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.ExtensionList;
 import hudson.PluginManager;
 import hudson.PluginWrapper;
@@ -1651,6 +1652,7 @@ public HttpResponse doDowngrade() throws IOException {
     private static final Logger LOGGER = Logger.getLogger(UpdateSite.class.getName());
 
     // The name uses UpdateCenter for compatibility reason.
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static boolean neverUpdate = SystemProperties.getBoolean(UpdateCenter.class.getName()+".never");
 
 }

File: core/src/main/java/hudson/model/ViewJob.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.Descriptor.FormException;
 import java.io.IOException;
 import java.util.LinkedHashSet;
@@ -231,5 +232,6 @@ public void run() {
      * when explicitly requested.
      * 
      */
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static boolean reloadPeriodically = SystemProperties.getBoolean(ViewJob.class.getName()+".reloadPeriodically");
 }

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -331,7 +331,6 @@ public void run(AbstractProject p) {
      *
      * @deprecated Use {@link jenkins.util.Timer#get()} instead.
      */
-    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "TODO needs triage")
     @Deprecated
     public static @CheckForNull Timer timer;
 

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -1751,7 +1751,7 @@ private void parse() {
 
                     int argmax = argmaxRef.getValue();
 
-                    @SuppressFBWarnings(value = "EQ_DOESNT_OVERRIDE_EQUALS", justification = "TODO needs triage")
+                    @SuppressFBWarnings(value = "EQ_DOESNT_OVERRIDE_EQUALS", justification = "Not needed for JNA")
                     class StringArrayMemory extends Memory {
                         private long offset=0;
                         private long length=0;

File: core/src/main/java/hudson/ExtensionFinder.java
Patch:
@@ -502,7 +502,7 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {
                         }
                     }
                     LOGGER.log(Level.FINER, "{0} looks OK", c);
-                } catch (Exception x) {
+                } catch (RuntimeException x) {
                     throw new LinkageError("Failed to resolve "+c, x);
                 }
             }

File: core/src/main/java/hudson/ExtensionList.java
Patch:
@@ -357,7 +357,7 @@ private void fireOnChangeListeners() {
         for (ExtensionListListener listener : listeners) {
             try {
                 listener.onChange();
-            } catch (Exception e) {
+            } catch (Throwable e) {
                 LOGGER.log(Level.SEVERE, "Error firing ExtensionListListener.onChange().", e);
             }
         }

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -204,7 +204,7 @@ public abstract class PluginManager extends AbstractModelObject implements OnMas
             // Secure initialization
             CHECK_UPDATE_SLEEP_TIME_MILLIS = SystemProperties.getInteger(PluginManager.class.getName() + ".checkUpdateSleepTimeMillis", 1000);
             CHECK_UPDATE_ATTEMPTS = SystemProperties.getInteger(PluginManager.class.getName() + ".checkUpdateAttempts", 1);
-        } catch(Exception e) {
+        } catch(RuntimeException e) {
             LOGGER.warning(String.format("There was an error initializing the PluginManager. Exception: %s", e));
         } finally {
             CHECK_UPDATE_ATTEMPTS = CHECK_UPDATE_ATTEMPTS > 0 ? CHECK_UPDATE_ATTEMPTS : 1;
@@ -1584,7 +1584,7 @@ public HttpResponse doInstallPlugins(StaplerRequest req) throws IOException {
             responseData.put("correlationId", correlationId.toString());
 
             return hudson.util.HttpResponses.okJSON(responseData);
-        } catch (Exception e) {
+        } catch (RuntimeException e) {
             return hudson.util.HttpResponses.errorJSON(e.getMessage());
         }
     }

File: core/src/main/java/hudson/Util.java
Patch:
@@ -460,7 +460,7 @@ public static String getWin32ErrorMessage(Throwable e) {
                 try {
                     ResourceBundle rb = ResourceBundle.getBundle("/hudson/win32errors");
                     return rb.getString("error"+m.group(1));
-                } catch (Exception ignored) {
+                } catch (RuntimeException ignored) {
                     // silently recover from resource related failures
                 }
             }
@@ -1429,7 +1429,7 @@ public static String resolveSymlink(@NonNull File link) throws IOException {
             return null;
         } catch (IOException x) {
             throw x;
-        } catch (Exception x) {
+        } catch (RuntimeException x) {
             throw new IOException(x);
         }
     }

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -415,7 +415,7 @@ public void contextDestroyed(ServletContextEvent event) {
                 if (instance != null) {
                     instance.cleanUp();
                 }
-            } catch (Exception e) {
+            } catch (Throwable e) {
                 LOGGER.log(Level.SEVERE, "Failed to clean up. Restart will continue.", e);
             }
 

File: core/src/main/java/hudson/lifecycle/ExitLifecycle.java
Patch:
@@ -65,7 +65,7 @@ public void restart() {
             if (jenkins != null) {
                 jenkins.cleanUp();
             }
-        } catch (Exception e) {
+        } catch (Throwable e) {
             LOGGER.log(Level.SEVERE, "Failed to clean up. Restart will continue.", e);
         }
 

File: core/src/main/java/hudson/lifecycle/SolarisSMFLifecycle.java
Patch:
@@ -46,7 +46,7 @@ public void restart() throws IOException, InterruptedException {
             if (jenkins != null) {
                 jenkins.cleanUp();
             }
-        } catch (Exception e) {
+        } catch (Throwable e) {
             LOGGER.log(Level.SEVERE, "Failed to clean up. Restart will continue.", e);
         }
         System.exit(0);

File: core/src/main/java/hudson/lifecycle/UnixLifecycle.java
Patch:
@@ -68,7 +68,7 @@ public void restart() throws IOException, InterruptedException {
             if (jenkins != null) {
                 jenkins.cleanUp();
             }
-        } catch (Exception e) {
+        } catch (Throwable e) {
             LOGGER.log(Level.SEVERE, "Failed to clean up. Restart will continue.", e);
         }
 

File: core/src/main/java/hudson/lifecycle/WindowsServiceLifecycle.java
Patch:
@@ -121,7 +121,7 @@ public void restart() throws IOException, InterruptedException {
             if (jenkins != null) {
                 jenkins.cleanUp();
             }
-        } catch (Exception e) {
+        } catch (Throwable e) {
             LOGGER.log(Level.SEVERE, "Failed to clean up. Restart will continue.", e);
         }
 

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -738,7 +738,7 @@ protected List<Action> createTransientActions() {
         for (TransientProjectActionFactory tpaf : TransientProjectActionFactory.all()) {
             try {
                 ta.addAll(Util.fixNull(tpaf.createFor(this))); // be defensive against null
-            } catch (Exception e) {
+            } catch (RuntimeException e) {
                 LOGGER.log(Level.SEVERE, "Could not load actions from " + tpaf + " for " + this, e);
             }
         }

File: core/src/main/java/hudson/model/Actionable.java
Patch:
@@ -118,7 +118,7 @@ private <T> Collection<? extends Action> createFor(TransientActionFactory<T> taf
                 }
             }
             return result;
-        } catch (Exception e) {
+        } catch (RuntimeException e) {
             LOGGER.log(Level.WARNING, "Could not load actions from " + taf + " for " + this, e);
             return Collections.emptySet();
         }

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -913,7 +913,7 @@ public boolean hasStopPermission() {
         lock.readLock().lock();
         try {
             return executable != null && getParentOf(executable).getOwnerTask().hasAbortPermission();
-        } catch(Exception ex) {
+        } catch(RuntimeException ex) {
             if (!(ex instanceof AccessDeniedException)) {
                 // Prevents UI from exploding in the case of unexpected runtime exceptions
                 LOGGER.log(WARNING, "Unhandled exception", ex);

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -443,7 +443,7 @@ public HttpResponse doIncompleteInstallStatus() {
                 jobs = Collections.emptyMap();
             }
             return HttpResponses.okJSON(jobs);
-        } catch (Exception e) {
+        } catch (RuntimeException e) {
             return HttpResponses.errorJSON(String.format("ERROR: %s", e.getMessage()));
         }
     }
@@ -513,7 +513,7 @@ public HttpResponse doInstallStatus(StaplerRequest request) {
                 }
             }
             return HttpResponses.okJSON(JSONObject.fromObject(response));
-        } catch (Exception e) {
+        } catch (RuntimeException e) {
             return HttpResponses.errorJSON(String.format("ERROR: %s", e.getMessage()));
         }
     }

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -1151,7 +1151,7 @@ public Plugin(String sourceId, JSONObject o) {
             if (releaseTimestamp != null) {
                 try {
                     date = Date.from(Instant.parse(releaseTimestamp));
-                } catch (Exception ex) {
+                } catch (RuntimeException ex) {
                     LOGGER.log(Level.FINE, "Failed to parse releaseTimestamp for " + title + " from " + sourceId, ex);
                 }
             }

File: core/src/main/java/hudson/scm/ChangeLogSet.java
Patch:
@@ -249,7 +249,7 @@ public String getMsgAnnotated() {
             for (ChangeLogAnnotator a : ChangeLogAnnotator.all())
                 try {
                     a.annotate(parent.run, this, markup);
-                } catch(Exception e) {
+                } catch(RuntimeException e) {
                     LOGGER.info("ChangeLogAnnotator " + a.toString() + " failed to annotate message '" + getMsg() + "'; " + e.getMessage());
                 } catch(Error e) {
                     LOGGER.severe("ChangeLogAnnotator " + a + " failed to annotate message '" + getMsg() + "'; " + e.getMessage());

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -306,7 +306,7 @@ protected Future<?> _connect(boolean forceReconnect) {
                     e.addSuppressed(threadInfo);
                     Functions.printStackTrace(e, taskListener.error(Messages.ComputerLauncher_abortedLaunch()));
                     throw e;
-                } catch (Exception e) {
+                } catch (RuntimeException e) {
                     e.addSuppressed(threadInfo);
                     Functions.printStackTrace(e, taskListener.error(Messages.ComputerLauncher_unexpectedError()));
                     throw e;

File: core/src/main/java/hudson/util/FormValidation.java
Patch:
@@ -359,7 +359,7 @@ public void validate(File fexe) {
                 }
             });
             return result[0];
-        } catch (Exception e) {
+        } catch (RuntimeException e) {
             return FormValidation.error(e, "Unexpected error");
         }
     }

File: core/src/main/java/jenkins/I18n.java
Patch:
@@ -107,7 +107,7 @@ public HttpResponse doResourceBundle(StaplerRequest request) {
             }
 
             return HttpResponses.okJSON(ResourceBundleUtil.getBundle(baseName, locale));
-        } catch (Exception e) {
+        } catch (RuntimeException e) {
             return HttpResponses.errorJSON(e.getMessage());
         }
     }

File: core/src/main/java/jenkins/JenkinsHttpSessionListener.java
Patch:
@@ -49,7 +49,7 @@ public void sessionCreated(HttpSessionEvent httpSessionEvent) {
         for (HttpSessionListener listener : HttpSessionListener.all()) {
             try {
                 listener.sessionCreated(httpSessionEvent);
-            } catch (Exception e) {
+            } catch (RuntimeException e) {
                 LOGGER.log(Level.SEVERE, "Error calling HttpSessionListener ExtensionPoint sessionCreated().", e);
             }
         }
@@ -60,7 +60,7 @@ public void sessionDestroyed(HttpSessionEvent httpSessionEvent) {
         for (HttpSessionListener listener : HttpSessionListener.all()) {
             try {
                 listener.sessionDestroyed(httpSessionEvent);
-            } catch (Exception e) {
+            } catch (RuntimeException e) {
                 LOGGER.log(Level.SEVERE, "Error calling HttpSessionListener ExtensionPoint sessionDestroyed().", e);
             }
         }

File: core/src/main/java/jenkins/MetaLocaleDrivenResourceProvider.java
Patch:
@@ -51,7 +51,7 @@ public URL lookup(@NonNull String s) {
                 if (url != null) {
                     return url;
                 }
-            } catch (Exception e) {
+            } catch (RuntimeException e) {
                 LOGGER.warn("Failed to lookup URL for '" + s + "' from '" + provider.toString(), e);
             }
         }

File: core/src/main/java/jenkins/cli/StopBuildsCommand.java
Patch:
@@ -95,7 +95,7 @@ private void stopBuild(final Run build,
                 executor.doStop();
                 isAnyBuildStopped = true;
                 stdout.printf("Build '%s' stopped for job '%s'%n", buildName, jobName);
-            } catch (final Exception e) {
+            } catch (final RuntimeException e) {
                 stdout.printf("Exception occurred while trying to stop build '%s' for job '%s'. ", buildName, jobName);
                 stdout.printf("Exception class: %s, message: %s%n", e.getClass().getSimpleName(), e.getMessage());
             }

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -209,7 +209,7 @@ public String getDisplayName() {
         try {
             // Make sure plugin metadata is up to date
             UpdateCenter.updateDefaultSite();
-        } catch (Exception e) {
+        } catch (RuntimeException e) {
             LOGGER.log(Level.WARNING, e.getMessage(), e);
         }
     }
@@ -290,7 +290,7 @@ public boolean isUsingSecurityToken() {
         try {
             return !Jenkins.get().getInstallState().isSetupComplete()
                     && isUsingSecurityDefaults();
-        } catch (Exception e) {
+        } catch (RuntimeException e) {
             // ignore
         }
         return false;
@@ -589,7 +589,7 @@ public JSONArray getPlatformPluginUpdates() {
                     } else {
                         try {
                             initialPluginList = JSONArray.fromObject(initialPluginJson);
-                        } catch (Exception ex) {
+                        } catch (RuntimeException ex) {
                             /* Second attempt: It's not a remote file, but still wrapped */
                             initialPluginList = JSONObject.fromObject(initialPluginJson).getJSONArray("categories");
                         }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -4592,7 +4592,7 @@ public void run() {
 
                     cleanUp();
                     System.exit(0);
-                } catch (Exception e) {
+                } catch (Throwable e) {
                     LOGGER.log(Level.WARNING, "Failed to shut down Jenkins", e);
                 }
             }

File: core/src/main/java/jenkins/model/RunIdMigrator.java
Patch:
@@ -283,7 +283,7 @@ static void move(File src, File dest) throws IOException {
             Files.move(src.toPath(), dest.toPath());
         } catch (IOException x) {
             throw x;
-        } catch (Exception x) {
+        } catch (RuntimeException x) {
             throw new IOException(x);
         }
     }

File: core/src/main/java/jenkins/security/ResourceDomainRootAction.java
Patch:
@@ -185,7 +185,7 @@ public Token getToken(@NonNull DirectoryBrowserSupport dbs, @NonNull StaplerRequ
 
         try {
             return new Token(dbsUrl, authenticationName, Instant.now());
-        } catch (Exception ex) {
+        } catch (RuntimeException ex) {
             LOGGER.log(Level.WARNING, "Failed to encode token for URL: " + dbsUrl + " user: " + authenticationName, ex);
         }
         return null;
@@ -301,7 +301,7 @@ private static Token decode(String value) {
                 String authenticationName = authenticationNameAndBrowserUrl.substring(0, authenticationNameLength);
                 String browserUrl = authenticationNameAndBrowserUrl.substring(authenticationNameLength + 1);
                 return new Token(browserUrl, authenticationName, ofEpochMilli(Long.parseLong(epoch)));
-            } catch (Exception ex) {
+            } catch (RuntimeException ex) {
                 // Choose log level that hides people messing with the URLs
                 LOGGER.log(Level.FINE, "Failure decoding", ex);
                 return null;

File: core/src/main/java/jenkins/security/s2m/FilePathRuleConfig.java
Patch:
@@ -74,7 +74,7 @@ protected FilePathRule parse(String line) {
                     Pattern.compile(m.group(3)),
                     createOpMatcher(m.group(2)),
                     m.group(1).equals("allow"));
-        } catch (Exception e) {
+        } catch (RuntimeException e) {
             throw new Failure("Invalid filter rule line: "+line+"\n"+ Functions.printThrowable(e));
         }
     }

File: core/src/main/java/jenkins/telemetry/Telemetry.java
Patch:
@@ -204,7 +204,7 @@ protected void execute(TaskListener listener) throws IOException, InterruptedExc
                 JSONObject data = new JSONObject();
                 try {
                     data = telemetry.createContent();
-                } catch (Exception e) {
+                } catch (RuntimeException e) {
                     LOGGER.log(Level.WARNING, "Failed to build telemetry content for: '" + telemetry.getId() + "'", e);
                 }
 

File: test/src/test/java/lib/form/ValidateButtonTest.java
Patch:
@@ -116,7 +116,7 @@ public void doValidateTest1(@QueryParameter("a") String a, @QueryParameter("b")
                     assertEquals("dvalue",d);
                     assertEquals("e2",e);
                     test1Outcome = null;
-                } catch (Exception t) {
+                } catch (RuntimeException t) {
                     test1Outcome = t;
                 }
             }

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -1035,7 +1035,7 @@ private boolean installIfNecessaryFrom(@NonNull URL archive, @NonNull TaskListen
     }
 
     // this reads from arbitrary URL
-    private final class Unpack extends MasterToSlaveFileCallable<Void> {
+    private static final class Unpack extends MasterToSlaveFileCallable<Void> {
         private final URL archive;
         Unpack(URL archive) {
             this.archive = archive;
@@ -2938,7 +2938,7 @@ public String validateAntFileMask(final String fileMasks, final int bound) throw
     public @CheckForNull String validateAntFileMask(final String fileMasks, final int bound, final boolean caseSensitive) throws IOException, InterruptedException {
         return act(new ValidateAntFileMask(fileMasks, caseSensitive, bound));
     }
-    private class ValidateAntFileMask extends MasterToSlaveFileCallable<String> {
+    private static class ValidateAntFileMask extends MasterToSlaveFileCallable<String> {
         private final String fileMasks;
         private final boolean caseSensitive;
         private final int bound;

File: core/src/main/java/hudson/TcpSlaveAgentListener.java
Patch:
@@ -134,7 +134,7 @@ public String getAdvertisedHost() {
         }
         try {
             return new URL(Jenkins.get().getRootUrl()).getHost();
-        } catch (MalformedURLException | NullPointerException e) {
+        } catch (MalformedURLException e) {
             throw new IllegalStateException("Could not get TcpSlaveAgentListener host name", e);
         }
     }

File: core/src/main/java/hudson/diagnosis/MemoryUsageMonitor.java
Patch:
@@ -51,7 +51,7 @@ public final class MemoryUsageMonitor extends PeriodicWork {
     /**
      * A memory group is conceptually a set of memory pools. 
      */
-    public final class MemoryGroup {
+    public static final class MemoryGroup {
         private final List<MemoryPoolMXBean> pools = new ArrayList<>();
 
         /**

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -2454,7 +2454,7 @@ public String getName() {
     @Restricted(NoExternalUse.class)
     @ExportedBean(defaultVisibility = 999)
     @SuppressFBWarnings(value = "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD", justification = "it is exported, so it might be used")
-    public class StubItem {
+    public static class StubItem {
 
         @Exported public StubTask task;
 

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -100,6 +100,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -814,6 +815,7 @@ public boolean hasntStartedYet() {
         return state ==State.NOT_STARTED;
     }
 
+    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE", justification = "see JENKINS-45892")
     @Override
     public String toString() {
         if (project == null) {
@@ -1911,7 +1913,7 @@ protected final void execute(@NonNull RunExecution job) {
                 }
 
                 // even if the main build fails fatally, try to run post build processing
-                job.post(listener);
+                job.post(Objects.requireNonNull(listener));
 
             } catch (ThreadDeath t) {
                 throw t;

File: core/src/main/java/hudson/model/queue/CauseOfBlockage.java
Patch:
@@ -9,6 +9,7 @@
 import hudson.model.Queue.Task;
 import hudson.model.TaskListener;
 import hudson.slaves.Cloud;
+import java.util.Objects;
 import org.jvnet.localizer.Localizable;
 
 /**
@@ -45,7 +46,7 @@ public void print(TaskListener listener) {
      * Obtains a simple implementation backed by {@link Localizable}.
      */
     public static CauseOfBlockage fromMessage(@NonNull final Localizable l) {
-        l.getKey(); // null check
+        Objects.requireNonNull(l);
         return new CauseOfBlockage() {
             @Override
             public String getShortDescription() {

File: core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.security;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.User;
 import java.io.IOException;
 import java.util.logging.Level;
@@ -52,13 +53,15 @@
 @Restricted(NoExternalUse.class)
 public final class AuthenticationProcessingFilter2 extends UsernamePasswordAuthenticationFilter {
 
+    @SuppressFBWarnings(value = "HARD_CODE_PASSWORD", justification = "This is a password parameter, not a password")
     public AuthenticationProcessingFilter2(String authenticationGatewayUrl) {
         setRequiresAuthenticationRequestMatcher(new AntPathRequestMatcher("/" + authenticationGatewayUrl, "POST"));
         // Jenkins/login.jelly & SetupWizard/authenticate-security-token.jelly
         setUsernameParameter("j_username");
         setPasswordParameter("j_password");
     }
 
+    @SuppressFBWarnings(value = "RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT", justification = "request.getSession(true) does in fact have a side effect")
     @Override
     protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult) throws IOException, ServletException {
         if (SystemProperties.getInteger(SecurityRealm.class.getName() + ".sessionFixationProtectionMode", 1) == 2) {

File: core/src/main/java/hudson/tasks/LogRotator.java
Patch:
@@ -62,7 +62,7 @@ public class LogRotator extends BuildDiscarder {
     
     /** @deprecated Replaced by more generic {@link CompositeIOException}. */
     @Deprecated
-    public class CollatedLogRotatorException extends IOException {
+    public static class CollatedLogRotatorException extends IOException {
         private static final long serialVersionUID = 5944233808072651101L;
         
         public final Collection<Exception> collated;

File: core/src/main/java/hudson/triggers/SlowTriggerAdminMonitor.java
Patch:
@@ -94,7 +94,7 @@ public HttpResponse doClear() {
         return HttpResponses.redirectViaContextPath("/manage");
     }
 
-    public class Value {
+    public static class Value {
 
         private final LocalDateTime time;
         private Class<? extends TriggerDescriptor> trigger;

File: core/src/main/java/hudson/util/RemotingDiagnostics.java
Patch:
@@ -148,6 +148,7 @@ public String call() throws RuntimeException {
             }
             return out.toString();
         }
+        private static final long serialVersionUID = 1L;
     }
 
     /**

File: core/src/main/java/jenkins/FilePathFilterAggregator.java
Patch:
@@ -30,7 +30,7 @@ private Entry(FilePathFilter filter, double ordinal) {
 
         @Override
         public int compareTo(Entry that) {
-            double result = Double.compare(this.ordinal, that.ordinal);
+            int result = Double.compare(this.ordinal, that.ordinal);
 
             if (result < 0) return -1;
             if (result > 0) return 1;

File: core/src/main/java/jenkins/security/NonSerializableSecurityContext.java
Patch:
@@ -42,7 +42,9 @@
  * @see hudson.security.HttpSessionContextIntegrationFilter2
  * @since 1.509
  */
-@SuppressFBWarnings(value = "SE_TRANSIENT_FIELD_NOT_RESTORED", justification = "It is not intended to be serialized. Default values will be used in case of deserialization")
+@SuppressFBWarnings(
+        value = {"SE_NO_SERIALVERSIONID", "SE_TRANSIENT_FIELD_NOT_RESTORED"},
+        justification = "It is not intended to be serialized. Default values will be used in case of deserialization")
 @Restricted(NoExternalUse.class)
 public class NonSerializableSecurityContext implements SecurityContext {
     private transient Authentication authentication;

File: core/src/main/java/jenkins/slaves/StandardOutputSwapper.java
Patch:
@@ -66,6 +66,7 @@ private void _swap(StandardOutputStream stdout) throws Exception {
             }
         }
 
+        @SuppressFBWarnings(value = "OBL_UNSATISFIED_OBLIGATION", justification = "the obligation is satisfied with libc(7)")
         private void swap(StandardOutputStream stdout) throws IOException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, UnsatisfiedLinkError {
             // duplicate the OS file descriptor and create FileOutputStream around it
             int out = GNUCLibrary.LIBC.dup(1);

File: core/src/main/java/hudson/model/queue/CauseOfBlockage.java
Patch:
@@ -9,6 +9,7 @@
 import hudson.model.Queue.Task;
 import hudson.model.TaskListener;
 import hudson.slaves.Cloud;
+import java.util.Objects;
 import org.jvnet.localizer.Localizable;
 
 /**
@@ -45,7 +46,7 @@ public void print(TaskListener listener) {
      * Obtains a simple implementation backed by {@link Localizable}.
      */
     public static CauseOfBlockage fromMessage(@NonNull final Localizable l) {
-        l.getKey(); // null check
+        Objects.requireNonNull(l);
         return new CauseOfBlockage() {
             @Override
             public String getShortDescription() {

File: core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java
Patch:
@@ -61,6 +61,7 @@ public AuthenticationProcessingFilter2(String authenticationGatewayUrl) {
         setPasswordParameter("j_password");
     }
 
+    @SuppressFBWarnings(value = "RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT", justification = "request.getSession(true) does in fact have a side effect")
     @Override
     protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult) throws IOException, ServletException {
         if (SystemProperties.getInteger(SecurityRealm.class.getName() + ".sessionFixationProtectionMode", 1) == 2) {

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -1035,7 +1035,7 @@ private boolean installIfNecessaryFrom(@NonNull URL archive, @NonNull TaskListen
     }
 
     // this reads from arbitrary URL
-    private final class Unpack extends MasterToSlaveFileCallable<Void> {
+    private static final class Unpack extends MasterToSlaveFileCallable<Void> {
         private final URL archive;
         Unpack(URL archive) {
             this.archive = archive;
@@ -2938,7 +2938,7 @@ public String validateAntFileMask(final String fileMasks, final int bound) throw
     public @CheckForNull String validateAntFileMask(final String fileMasks, final int bound, final boolean caseSensitive) throws IOException, InterruptedException {
         return act(new ValidateAntFileMask(fileMasks, caseSensitive, bound));
     }
-    private class ValidateAntFileMask extends MasterToSlaveFileCallable<String> {
+    private static class ValidateAntFileMask extends MasterToSlaveFileCallable<String> {
         private final String fileMasks;
         private final boolean caseSensitive;
         private final int bound;

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -1738,7 +1738,7 @@ interface PluginCopier {
         void cleanup();
     }
 
-    class FileUploadPluginCopier implements PluginCopier {
+    static class FileUploadPluginCopier implements PluginCopier {
         private FileItem fileItem;
 
         FileUploadPluginCopier(FileItem fileItem) {
@@ -1756,7 +1756,7 @@ public void cleanup() {
         }
     }
 
-    class UrlPluginCopier implements PluginCopier {
+    static class UrlPluginCopier implements PluginCopier {
         private String url;
 
         UrlPluginCopier(String url) {

File: core/src/main/java/hudson/diagnosis/MemoryUsageMonitor.java
Patch:
@@ -51,7 +51,7 @@ public final class MemoryUsageMonitor extends PeriodicWork {
     /**
      * A memory group is conceptually a set of memory pools. 
      */
-    public final class MemoryGroup {
+    public static final class MemoryGroup {
         private final List<MemoryPoolMXBean> pools = new ArrayList<>();
 
         /**

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -2453,7 +2453,7 @@ public String getName() {
     @Restricted(NoExternalUse.class)
     @ExportedBean(defaultVisibility = 999)
     @SuppressFBWarnings(value = "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD", justification = "it is exported, so it might be used")
-    public class StubItem {
+    public static class StubItem {
 
         @Exported public StubTask task;
 

File: core/src/main/java/hudson/tasks/LogRotator.java
Patch:
@@ -62,7 +62,7 @@ public class LogRotator extends BuildDiscarder {
     
     /** @deprecated Replaced by more generic {@link CompositeIOException}. */
     @Deprecated
-    public class CollatedLogRotatorException extends IOException {
+    public static class CollatedLogRotatorException extends IOException {
         private static final long serialVersionUID = 5944233808072651101L;
         
         public final Collection<Exception> collated;

File: core/src/main/java/hudson/triggers/SlowTriggerAdminMonitor.java
Patch:
@@ -94,7 +94,7 @@ public HttpResponse doClear() {
         return HttpResponses.redirectViaContextPath("/manage");
     }
 
-    public class Value {
+    public static class Value {
 
         private final LocalDateTime time;
         private Class<? extends TriggerDescriptor> trigger;

File: core/src/main/java/jenkins/slaves/StandardOutputSwapper.java
Patch:
@@ -66,6 +66,7 @@ private void _swap(StandardOutputStream stdout) throws Exception {
             }
         }
 
+        @SuppressFBWarnings(value = "OBL_UNSATISFIED_OBLIGATION", justification = "the obligation is satisfied with libc(7)")
         private void swap(StandardOutputStream stdout) throws IOException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, UnsatisfiedLinkError {
             // duplicate the OS file descriptor and create FileOutputStream around it
             int out = GNUCLibrary.LIBC.dup(1);

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -815,6 +815,7 @@ public boolean hasntStartedYet() {
         return state ==State.NOT_STARTED;
     }
 
+    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE", justification = "see JENKINS-45892")
     @Override
     public String toString() {
         if (project == null) {

File: core/src/main/java/hudson/TcpSlaveAgentListener.java
Patch:
@@ -134,7 +134,7 @@ public String getAdvertisedHost() {
         }
         try {
             return new URL(Jenkins.get().getRootUrl()).getHost();
-        } catch (MalformedURLException | NullPointerException e) {
+        } catch (MalformedURLException e) {
             throw new IllegalStateException("Could not get TcpSlaveAgentListener host name", e);
         }
     }

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -911,9 +911,7 @@ public void dynamicLoad(File arc, boolean removeExisting, @CheckForNull List<Plu
             plugins.add(p);
             if (p.isActive())
                 activePlugins.add(p);
-            synchronized (((UberClassLoader) uberClassLoader).loaded) {
-                ((UberClassLoader) uberClassLoader).loaded.clear();
-            }
+            ((UberClassLoader) uberClassLoader).loaded.clear();
 
             // TODO antimodular; perhaps should have a PluginListener to complement ExtensionListListener?
             CustomClassFilter.Contributed.load();

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -88,6 +88,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.ServiceLoader;
 import java.util.Set;
@@ -647,7 +648,7 @@ void considerDetachedPlugin(String shortName) {
                 }
 
                 names.add(fileName);
-                copyBundledPlugin(url, fileName);
+                copyBundledPlugin(Objects.requireNonNull(url), fileName);
                 copiedPlugins.add(url);
                 try {
                     addDependencies(url, fromPath, dependencies);

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -100,6 +100,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -1911,7 +1912,7 @@ protected final void execute(@NonNull RunExecution job) {
                 }
 
                 // even if the main build fails fatally, try to run post build processing
-                job.post(listener);
+                job.post(Objects.requireNonNull(listener));
 
             } catch (ThreadDeath t) {
                 throw t;

File: core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.security;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.User;
 import java.io.IOException;
 import java.util.logging.Level;
@@ -52,6 +53,7 @@
 @Restricted(NoExternalUse.class)
 public final class AuthenticationProcessingFilter2 extends UsernamePasswordAuthenticationFilter {
 
+    @SuppressFBWarnings(value = "HARD_CODE_PASSWORD", justification = "This is a password parameter, not a password")
     public AuthenticationProcessingFilter2(String authenticationGatewayUrl) {
         setRequiresAuthenticationRequestMatcher(new AntPathRequestMatcher("/" + authenticationGatewayUrl, "POST"));
         // Jenkins/login.jelly & SetupWizard/authenticate-security-token.jelly

File: core/src/main/java/jenkins/FilePathFilterAggregator.java
Patch:
@@ -30,7 +30,7 @@ private Entry(FilePathFilter filter, double ordinal) {
 
         @Override
         public int compareTo(Entry that) {
-            double result = Double.compare(this.ordinal, that.ordinal);
+            int result = Double.compare(this.ordinal, that.ordinal);
 
             if (result < 0) return -1;
             if (result > 0) return 1;

File: core/src/main/java/hudson/util/RemotingDiagnostics.java
Patch:
@@ -148,6 +148,7 @@ public String call() throws RuntimeException {
             }
             return out.toString();
         }
+        private static final long serialVersionUID = 1L;
     }
 
     /**

File: core/src/main/java/jenkins/security/NonSerializableSecurityContext.java
Patch:
@@ -42,7 +42,9 @@
  * @see hudson.security.HttpSessionContextIntegrationFilter2
  * @since 1.509
  */
-@SuppressFBWarnings(value = "SE_TRANSIENT_FIELD_NOT_RESTORED", justification = "It is not intended to be serialized. Default values will be used in case of deserialization")
+@SuppressFBWarnings(
+        value = {"SE_NO_SERIALVERSIONID", "SE_TRANSIENT_FIELD_NOT_RESTORED"},
+        justification = "It is not intended to be serialized. Default values will be used in case of deserialization")
 @Restricted(NoExternalUse.class)
 public class NonSerializableSecurityContext implements SecurityContext {
     private transient Authentication authentication;

File: cli/src/main/java/hudson/cli/FullDuplexHttpStream.java
Patch:
@@ -34,7 +34,6 @@ public InputStream getInputStream() {
      * A way to upload data to the server.
      * You will need to write to this and {@link OutputStream#flush} it to finish establishing a connection.
      */
-    @SuppressFBWarnings("EI_EXPOSE_REP")
     public OutputStream getOutputStream() {
         return output;
     }

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -187,7 +187,7 @@ public class Functions {
     private static Logger LOGGER = Logger.getLogger(Functions.class.getName());
 
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* non-final */ boolean UI_REFRESH = SystemProperties.getBoolean("jenkins.ui.refresh");
 
     public Functions() {
@@ -636,7 +636,7 @@ public static String getYuiSuffix() {
     /**
      * Set to true if you need to use the debug version of YUI.
      */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static boolean DEBUG_YUI = SystemProperties.getBoolean("debug.YUI");
 
     /**

File: core/src/main/java/hudson/Plugin.java
Patch:
@@ -310,7 +310,7 @@ public Object getTarget() {
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = SystemProperties.getBoolean(Plugin.class.getName() + ".skipPermissionCheck");
 
     /**

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -2248,7 +2248,7 @@ public String toString() {
             return "classLoader " +  getClass().getName();
         }
     }
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static boolean FAST_LOOKUP = !SystemProperties.getBoolean(PluginManager.class.getName()+".noFastLookup");
 
     /** @deprecated in Jenkins 2.222 use {@link Jenkins#ADMINISTER} instead */
@@ -2471,6 +2471,6 @@ public boolean hasAdoptThisPluginLabel(PluginWrapper plugin) {
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = SystemProperties.getBoolean(PluginManager.class.getName() + ".skipPermissionCheck");
 }

File: core/src/main/java/hudson/Proc.java
Patch:
@@ -503,7 +503,7 @@ public OutputStream getStdin() {
     /**
      * Debug switch to have the thread display the process it's waiting for.
      */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for debugging")
     public static boolean SHOW_PID = false;
     
     /**

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -261,6 +261,7 @@ public Locale get() {
 
             final File _home = home;
             initThread = new Thread("Jenkins initialization thread") {
+                @SuppressFBWarnings(value = "RV_RETURN_VALUE_IGNORED_BAD_PRACTICE", justification = "TODO needs triage")
                 @Override
                 public void run() {
                     boolean success = false;
@@ -324,7 +325,7 @@ public static void installExpressionFactory(ServletContextEvent event) {
 	/**
      * Installs log handler to monitor all Hudson logs.
      */
-    @SuppressFBWarnings("LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE")
+    @SuppressFBWarnings(value = "LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE", justification = "TODO needs triage")
     private void installLogger() {
         Jenkins.logRecords = handler.getView();
         Logger.getLogger("").addHandler(handler);

File: core/src/main/java/hudson/console/ConsoleNote.java
Patch:
@@ -144,7 +144,7 @@ public abstract class ConsoleNote<T> implements Serializable, Describable<Consol
      * which in practice means that all SCM committers as well as all Jenkins users with any non-read-only access are consider administrators.
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "nonfinal for tests & script console")
     public static /* nonfinal for tests & script console */ boolean INSECURE = SystemProperties.getBoolean(ConsoleNote.class.getName() + ".INSECURE");
 
     /**

File: core/src/main/java/hudson/diagnosis/HudsonHomeDiskUsageChecker.java
Patch:
@@ -69,7 +69,7 @@ protected void doRun() {
     /**
      * Gets the minimum amount of space to check for, with a default of 10GB
      */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static long FREE_SPACE_THRESHOLD = SystemProperties.getLong(HudsonHomeDiskUsageChecker.class.getName()
                     + ".freeSpaceThreshold", 1024L*1024*1024*10);
 }

File: core/src/main/java/hudson/logging/LogRecorderManager.java
Patch:
@@ -170,7 +170,7 @@ public ContextMenu doChildrenContextMenu(StaplerRequest request, StaplerResponse
     /**
      * Configure the logging level.
      */
-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings("LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE")
+    @SuppressFBWarnings(value = "LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE", justification = "TODO needs triage")
     @RequirePOST
     public HttpResponse doConfigLogger(@QueryParameter String name, @QueryParameter String level) {
         Jenkins.get().checkPermission(Jenkins.ADMINISTER);
@@ -261,6 +261,6 @@ public Object getTarget() {
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = SystemProperties.getBoolean(LogRecorderManager.class.getName() + ".skipPermissionCheck");
 }

File: core/src/main/java/hudson/model/AbstractCIBase.java
Patch:
@@ -48,7 +48,7 @@
 
 public abstract class AbstractCIBase extends Node implements ItemGroup<TopLevelItem>, StaplerProxy, StaplerFallback, ViewGroup, AccessControlled, DescriptorByNameOwner {
 
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static boolean LOG_STARTUP_PERFORMANCE = SystemProperties.getBoolean(Jenkins.class.getName() + "." + "logStartupPerformance", false);
 
     private static final Logger LOGGER = Logger.getLogger(AbstractCIBase.class.getName());

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -967,7 +967,7 @@ public Object getTarget() {
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = SystemProperties.getBoolean(AbstractItem.class.getName() + ".skipPermissionCheck");
 
     /**

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -280,7 +280,6 @@ public List<Action> getActions() {
     }
 
     @SuppressWarnings({"ConstantConditions","deprecation"})
-    @SuppressFBWarnings("RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE")
     @Override
     public void addAction(@NonNull Action a) {
         if (a == null) {
@@ -1607,7 +1606,7 @@ public Object getTarget() {
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = SystemProperties.getBoolean(Computer.class.getName() + ".skipPermissionCheck");
 
     /**

File: core/src/main/java/hudson/model/FileParameterValue.java
Patch:
@@ -72,7 +72,7 @@ public class FileParameterValue extends ParameterValue {
      * It's not recommended to enable for security reasons. That option is only present for backward compatibility.
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE =
             SystemProperties.getBoolean(FileParameterValue.class.getName() + ".allowFolderTraversalOutsideWorkspace");
 
@@ -152,6 +152,7 @@ public FileItem getFile() {
     @Override
     public BuildWrapper createBuildWrapper(AbstractBuild<?,?> build) {
         return new BuildWrapper() {
+            @SuppressFBWarnings(value = {"FILE_UPLOAD_FILENAME", "NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE"}, justification = "TODO needs triage")
             @Override
             public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {
             	if (!StringUtils.isEmpty(location) && !StringUtils.isEmpty(file.getName())) {

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -29,6 +29,7 @@
 import com.infradna.tool.bridge_method_injector.WithBridgeMethods;
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.BulkChange;
 import hudson.EnvVars;
 import hudson.Extension;
@@ -130,6 +131,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
+@SuppressFBWarnings(value = "SE_BAD_FIELD", justification = "TODO needs triage")
 public abstract class Job<JobT extends Job<JobT, RunT>, RunT extends Run<JobT, RunT>>
         extends AbstractItem implements ExtensionPoint, StaplerOverridable, ModelObjectWithChildren {
 

File: core/src/main/java/hudson/model/LoadStatistics.java
Patch:
@@ -378,7 +378,7 @@ protected LoadStatisticsSnapshot computeSnapshot(Iterable<Queue.BuildableItem> q
     /**
      * Load statistics clock cycle in milliseconds. Specify a small value for quickly debugging this feature and node provisioning through cloud.
      */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static int CLOCK = SystemProperties.getInteger(LoadStatistics.class.getName() + ".clock", (int)TimeUnit.SECONDS.toMillis(10));
 
     /**

File: core/src/main/java/hudson/model/Node.java
Patch:
@@ -99,7 +99,7 @@ public abstract class Node extends AbstractModelObject implements Reconfigurable
     private static final Logger LOGGER = Logger.getLogger(Node.class.getName());
 
     /** @see <a href="https://issues.jenkins.io/browse/JENKINS-46652">JENKINS-46652</a> */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* not final */ boolean SKIP_BUILD_CHECK_ON_FLYWEIGHTS = SystemProperties.getBoolean(Node.class.getName() + ".SKIP_BUILD_CHECK_ON_FLYWEIGHTS", true);
 
     /**

File: core/src/main/java/hudson/model/PermalinkProjectAction.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.model;
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 import jenkins.model.PeepholePermalink;
@@ -136,6 +137,7 @@ public String getId() {
                 return "lastSuccessfulBuild";
             }
 
+            @SuppressFBWarnings(value = "NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE", justification = "TODO needs triage")
             @Override
             public boolean apply(Run<?, ?> run) {
                 return !run.isBuilding() && run.getResult().isBetterOrEqualTo(Result.UNSTABLE);

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2652,7 +2652,7 @@ public Object getTarget() {
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = SystemProperties.getBoolean(Run.class.getName() + ".skipPermissionCheck");
 
 

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -2652,7 +2652,7 @@ public Object getTarget() {
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = SystemProperties.getBoolean(UpdateCenter.class.getName() + ".skipPermissionCheck");
 
 

File: core/src/main/java/hudson/model/UsageStatistics.java
Patch:
@@ -299,6 +299,6 @@ private static Cipher toCipher(RSAKey key, int mode) throws GeneralSecurityExcep
 
     private static final long DAY = DAYS.toMillis(1);
 
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static boolean DISABLED = SystemProperties.getBoolean(UsageStatistics.class.getName()+".disabled");
 }

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -129,7 +129,7 @@ public class User extends AbstractModelObject implements AccessControlled, Descr
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = SystemProperties.getBoolean(User.class.getName() + ".skipPermissionCheck");
 
     /**
@@ -141,7 +141,7 @@ public class User extends AbstractModelObject implements AccessControlled, Descr
      * <p>
      * See <a href="https://issues.jenkins.io/browse/JENKINS-22346">JENKINS-22346</a>.
      */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static boolean ALLOW_NON_EXISTENT_USER_TO_LOGIN = SystemProperties.getBoolean(User.class.getName() + ".allowNonExistentUserToLogin");
 
     /**
@@ -157,7 +157,7 @@ public class User extends AbstractModelObject implements AccessControlled, Descr
      * SECURITY-406.
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static boolean ALLOW_USER_CREATION_VIA_URL = SystemProperties.getBoolean(User.class.getName() + ".allowUserCreationViaUrl");
 
     /**

File: core/src/main/java/hudson/model/queue/WorkUnitContext.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model.queue;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.ExtensionList;
 import hudson.model.Action;
 import hudson.model.Executor;
@@ -79,6 +80,7 @@ public WorkUnitContext(BuildableItem item) {
         // +1 for the main task
         int workUnitSize = task.getSubTasks().size();
         startLatch = new Latch(workUnitSize) {
+            @SuppressFBWarnings(value = "NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE", justification = "TODO needs triage")
             @Override
             protected void onCriteriaMet() {
                 // on behalf of the member Executors,

File: core/src/main/java/hudson/os/SU.java
Patch:
@@ -26,6 +26,7 @@
 import static hudson.util.jna.GNUCLibrary.LIBC;
 
 import com.sun.solaris.EmbeddedSu;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.FilePath;
 import hudson.Launcher.LocalLauncher;
 import hudson.Util;
@@ -81,6 +82,7 @@ protected String sudoExe() {
                     return "sudo";
                 }
 
+                @SuppressFBWarnings(value = {"COMMAND_INJECTION", "DM_DEFAULT_ENCODING"}, justification = "TODO needs triage")
                 @Override
                 protected Process sudoWithPass(ArgumentListBuilder args) throws IOException {
                     args.prepend(sudoExe(),"-S");
@@ -105,6 +107,7 @@ protected String sudoExe() {
                     return "/usr/bin/pfexec";
                 }
 
+                @SuppressFBWarnings(value = "COMMAND_INJECTION", justification = "TODO needs triage")
                 @Override
                 protected Process sudoWithPass(ArgumentListBuilder args) throws IOException {
                     listener.getLogger().println("Running with embedded_su");

File: core/src/main/java/hudson/search/Search.java
Patch:
@@ -300,6 +300,7 @@ class Tag implements Comparable<Tag>{
                 prefixMatch = i.getPath().startsWith(tokenList)?1:0;
             }
 
+            @SuppressFBWarnings(value = "EQ_COMPARETO_USE_OBJECT_EQUALS", justification = "TODO needs triage")
             @Override
             public int compareTo(Tag that) {
                 int r = this.prefixMatch -that.prefixMatch;
@@ -422,7 +423,7 @@ public Object getTarget() {
     /**
      * Escape hatch for StaplerProxy-based access control
      */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     @Restricted(NoExternalUse.class)
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = SystemProperties.getBoolean(Search.class.getName() + ".skipPermissionCheck");
 

File: core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java
Patch:
@@ -66,7 +66,7 @@ public class TokenBasedRememberMeServices2 extends TokenBasedRememberMeServices
     /**
      * Escape hatch for the check on the maximum date for the expiration duration of the remember me cookie
      */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean SKIP_TOO_FAR_EXPIRATION_DATE_CHECK = 
             SystemProperties.getBoolean(TokenBasedRememberMeServices2.class.getName() + ".skipTooFarExpirationDateCheck");
 
@@ -169,6 +169,7 @@ protected UserDetails processAutoLoginCookie(String[] cookieTokens, HttpServletR
         }
     }
 
+    @SuppressFBWarnings(value = "NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE", justification = "TODO needs triage")
     @Override
     protected Authentication createSuccessfulAuthentication(HttpServletRequest request, UserDetails userDetails) {
         Authentication auth = super.createSuccessfulAuthentication(request, userDetails);

File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java
Patch:
@@ -39,7 +39,7 @@ public class DefaultCrumbIssuer extends CrumbIssuer {
     private boolean excludeClientIPFromCrumb;
 
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* non-final: Groovy Console */ boolean EXCLUDE_SESSION_ID = SystemProperties.getBoolean(DefaultCrumbIssuer.class.getName() + ".EXCLUDE_SESSION_ID");
 
     @DataBoundConstructor

File: core/src/main/java/hudson/security/csrf/GlobalCrumbIssuerConfiguration.java
Patch:
@@ -76,6 +76,6 @@ public static CrumbIssuer createDefaultCrumbIssuer() {
     }
 
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* non-final */ boolean DISABLE_CSRF_PROTECTION = SystemProperties.getBoolean(GlobalCrumbIssuerConfiguration.class.getName() + ".DISABLE_CSRF_PROTECTION");
 }

File: core/src/main/java/hudson/slaves/CloudSlaveRetentionStrategy.java
Patch:
@@ -72,7 +72,7 @@ protected long getIdleMaxTime() {
     }
 
     // for debugging, it's convenient to be able to reduce this time
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static long TIMEOUT = SystemProperties.getLong(CloudSlaveRetentionStrategy.class.getName()+".timeout", TimeUnit.MINUTES.toMillis(10));
 
     private static final Logger LOGGER = Logger.getLogger(CloudSlaveRetentionStrategy.class.getName());

File: core/src/main/java/hudson/slaves/NodeProvisioner.java
Patch:
@@ -800,9 +800,9 @@ public static class NodeProvisionerInvoker extends PeriodicWork {
          * Give some initial warm up time so that statically connected agents
          * can be brought online before we start allocating more.
          */
-        @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+        @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
         public static int INITIALDELAY = SystemProperties.getInteger(NodeProvisioner.class.getName()+".initialDelay",LoadStatistics.CLOCK*10);
-        @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+        @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
         public static int RECURRENCEPERIOD = SystemProperties.getInteger(NodeProvisioner.class.getName()+".recurrencePeriod",LoadStatistics.CLOCK);
 
         @Override

File: core/src/main/java/hudson/tasks/BuildTrigger.java
Patch:
@@ -25,6 +25,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.Launcher;
 import hudson.Util;
@@ -295,6 +296,7 @@ public int compare(Dependency lhs, Dependency rhs) {
     public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {
         for (AbstractProject p : getChildProjects(owner)) // only care about AbstractProject here
             graph.addDependency(new Dependency(owner, p) {
+                @SuppressFBWarnings(value = "NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE", justification = "TODO needs triage")
                 @Override
                 public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,
                                                   List<Action> actions) {

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -768,6 +768,6 @@ public int hashCode() {
     /**
      * How long is too long for a polling activity to be in the queue?
      */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static long STARVATION_THRESHOLD = SystemProperties.getLong(SCMTrigger.class.getName()+".starvationThreshold", TimeUnit.HOURS.toMillis(1));
 }

File: core/src/main/java/hudson/triggers/SlowTriggerAdminMonitor.java
Patch:
@@ -28,7 +28,7 @@ public class SlowTriggerAdminMonitor extends AdministrativeMonitor {
     @NonNull
     private final Map<String, Value> errors = new ConcurrentHashMap<>();
 
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ int MAX_ENTRIES = SystemProperties.getInteger(SlowTriggerAdminMonitor.class.getName() + ".maxEntries", 10);
 
     @NonNull

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -258,6 +258,7 @@ public static void checkTriggers(final Calendar cal) {
                 // terminated.
                 // FIXME allow to set a global crontab spec
                 previousSynchronousPolling = scmd.getExecutor().submit(new DependencyRunner(new ProjectRunnable() {
+                    @SuppressFBWarnings(value = "NP_NULL_ON_SOME_PATH", justification = "TODO needs triage")
                     @Override
                     public void run(AbstractProject p) {
                         for (Trigger t : (Collection<Trigger>) p.getTriggers().values()) {
@@ -313,7 +314,7 @@ public void run(AbstractProject p) {
     /**
      * Used to be milliseconds, now is seconds since Jenkins 2.289.
      */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     @Restricted(NoExternalUse.class)
     @RestrictedSince("2.289")
     public static /* non-final for Groovy */ long CRON_THRESHOLD = SystemProperties.getLong(Trigger.class.getName() + ".CRON_THRESHOLD", 30L); // Default threshold 30s
@@ -330,7 +331,7 @@ public void run(AbstractProject p) {
      *
      * @deprecated Use {@link jenkins.util.Timer#get()} instead.
      */
-    @SuppressWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "TODO needs triage")
     @Deprecated
     public static @CheckForNull Timer timer;
 

File: core/src/main/java/hudson/util/CompressedFile.java
Patch:
@@ -25,6 +25,7 @@
 
 import com.jcraft.jzlib.GZIPInputStream;
 import com.jcraft.jzlib.GZIPOutputStream;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -144,6 +145,7 @@ public String loadAsString() throws IOException {
      */
     public void compress() {
         compressionThread.submit(new Runnable() {
+            @SuppressFBWarnings(value = "RV_RETURN_VALUE_IGNORED_BAD_PRACTICE", justification = "TODO needs triage")
             @Override
             public void run() {
                 try {

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -36,6 +36,7 @@
 import com.sun.jna.ptr.NativeLongByReference;
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.EnvVars;
 import hudson.FilePath;
 import hudson.Util;
@@ -1750,6 +1751,7 @@ private void parse() {
 
                     int argmax = argmaxRef.getValue();
 
+                    @SuppressFBWarnings(value = "EQ_DOESNT_OVERRIDE_EQUALS", justification = "TODO needs triage")
                     class StringArrayMemory extends Memory {
                         private long offset=0;
                         private long length=0;
@@ -1777,6 +1779,7 @@ byte peek() {
                             return getByte(offset);
                         }
 
+                        @SuppressFBWarnings(value = "DM_DEFAULT_ENCODING", justification = "TODO needs triage")
                         String readString() {
                             ByteArrayOutputStream baos = new ByteArrayOutputStream();
                             byte ch;

File: core/src/main/java/hudson/util/Secret.java
Patch:
@@ -308,7 +308,7 @@ public Object unmarshal(HierarchicalStreamReader reader, final UnmarshallingCont
     public static final boolean AUTO_ENCRYPT_PASSWORD_CONTROL = SystemProperties.getBoolean(Secret.class.getName() + ".AUTO_ENCRYPT_PASSWORD_CONTROL", true);
 
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* non-final */ boolean BLANK_NONSECRET_PASSWORD_FIELDS_WITHOUT_ITEM_CONFIGURE = SystemProperties.getBoolean(Secret.class.getName() + ".BLANK_NONSECRET_PASSWORD_FIELDS_WITHOUT_ITEM_CONFIGURE", true);
 
     static {

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -52,6 +52,7 @@
 import com.thoughtworks.xstream.security.AnyTypePermission;
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.PluginManager;
 import hudson.PluginWrapper;
 import hudson.XmlFile;
@@ -469,11 +470,13 @@ public boolean canConvert(Class type) {
             return findConverter(type)!=null;
         }
 
+        @SuppressFBWarnings(value = "NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE", justification = "TODO needs triage")
         @Override
         public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
             findConverter(source.getClass()).marshal(source,writer,context);
         }
 
+        @SuppressFBWarnings(value = "NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE", justification = "TODO needs triage")
         @Override
         public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
             return findConverter(context.getRequiredType()).unmarshal(reader,context);

File: core/src/main/java/jenkins/SoloFilePathFilter.java
Patch:
@@ -23,7 +23,7 @@ public final class SoloFilePathFilter extends FilePathFilter {
 
     private static final Logger LOGGER = Logger.getLogger(SoloFilePathFilter.class.getName());
 
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     @Restricted(NoExternalUse.class)
     public static /* non-final for Groovy */ boolean REDACT_ERRORS = SystemProperties.getBoolean(SoloFilePathFilter.class.getName() + ".redactErrors", true);
 

File: core/src/main/java/jenkins/formelementpath/FormElementPathPageDecorator.java
Patch:
@@ -8,7 +8,7 @@
 @Extension
 public class FormElementPathPageDecorator extends PageDecorator {
 
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     private static /*almost final */ boolean ENABLED =
             SystemProperties.getBoolean(FormElementPathPageDecorator.class.getName() + ".enabled");
 

File: core/src/main/java/jenkins/model/StandardArtifactManager.java
Patch:
@@ -52,7 +52,7 @@ public class StandardArtifactManager extends ArtifactManager {
 
     @Restricted(NoExternalUse.class)
     @VisibleForTesting
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static FilePath.TarCompression TAR_COMPRESSION = SystemProperties.getBoolean(StandardArtifactManager.class.getName() + ".disableTrafficCompression")
             ? FilePath.TarCompression.NONE
             : FilePath.TarCompression.GZIP;

File: core/src/main/java/jenkins/model/item_category/ItemCategory.java
Patch:
@@ -47,7 +47,7 @@ public abstract class ItemCategory implements ExtensionPoint {
      * See <a href="https://issues.jenkins.io/browse/JENKINS-36593">JENKINS-36593</a> for more info.
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "TODO needs triage")
     public static int MIN_TOSHOW = 1;
 
     /**

File: core/src/main/java/jenkins/scm/RunWithSCM.java
Patch:
@@ -26,6 +26,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.Job;
 import hudson.model.Result;
 import hudson.model.Run;
@@ -48,6 +49,7 @@
  *
  * @since 2.60
  */
+@SuppressFBWarnings(value = "NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE", justification = "TODO needs triage")
 public interface RunWithSCM<JobT extends Job<JobT, RunT>,
         RunT extends Run<JobT, RunT> & RunWithSCM<JobT,RunT>> {
 

File: core/src/main/java/jenkins/security/BasicHeaderRealPasswordAuthenticator.java
Patch:
@@ -73,6 +73,6 @@ public Authentication authenticate2(HttpServletRequest req, HttpServletResponse
      * Legacy property to disable the real password support.
      * Now that this is an extension, {@link ExtensionFilter} is a better way to control this.
      */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static boolean DISABLE = SystemProperties.getBoolean("jenkins.security.ignoreBasicAuth");
 }

File: core/src/main/java/jenkins/security/ResourceDomainRootAction.java
Patch:
@@ -313,6 +313,6 @@ private static Token decode(String value) {
     private static HMACConfidentialKey KEY = new HMACConfidentialKey(ResourceDomainRootAction.class, "key");
 
     // Not @Restricted because the entire class is
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* not final for Groovy */ int VALID_FOR_MINUTES = SystemProperties.getInteger(ResourceDomainRootAction.class.getName() + ".validForMinutes", 30);
 }

File: core/src/main/java/jenkins/security/apitoken/ApiTokenStore.java
Patch:
@@ -26,7 +26,6 @@
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Util;
 import hudson.util.Secret;
 import java.io.Serializable;
@@ -86,7 +85,6 @@ private void init() {
         }
     }
     
-    @SuppressFBWarnings("NP_NONNULL_RETURN_VIOLATION")
     public synchronized @NonNull Collection<HashedToken> getTokenListSortedByName() {
         return tokenList.stream()
                 .sorted(SORT_BY_LOWERCASED_NAME)

File: core/src/main/java/jenkins/security/s2m/CallableDirectionChecker.java
Patch:
@@ -41,7 +41,7 @@ public class CallableDirectionChecker extends RoleChecker {
      * This is an escape hatch in case the fix breaks something critical, to allow the user
      * to keep operation.
      */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static boolean BYPASS = SystemProperties.getBoolean(BYPASS_PROP);
 
     private CallableDirectionChecker(Object context) {

File: core/src/main/java/jenkins/security/s2m/DefaultFilePathFilter.java
Patch:
@@ -50,7 +50,7 @@
     /**
      * Escape hatch to disable this check completely.
      */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static boolean BYPASS = SystemProperties.getBoolean(DefaultFilePathFilter.class.getName()+".allow");
 
     private static final Logger LOGGER = Logger.getLogger(DefaultFilePathFilter.class.getName());

File: core/src/main/java/jenkins/security/seed/UserSeedProperty.java
Patch:
@@ -64,14 +64,14 @@ public class UserSeedProperty extends UserProperty {
      * If we disable the seed, we can still use it to write / store information but not verifying the data using it.
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean DISABLE_USER_SEED = SystemProperties.getBoolean(UserSeedProperty.class.getName() + ".disableUserSeed");
 
     /**
      * Hide the user seed section from the UI to prevent accidental use
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean HIDE_USER_SEED_SECTION = SystemProperties.getBoolean(UserSeedProperty.class.getName() + ".hideUserSeedSection");
 
     public static final String USER_SESSION_SEED = "_JENKINS_SESSION_SEED";

File: core/src/main/java/jenkins/security/stapler/StaplerDispatchValidator.java
Patch:
@@ -90,7 +90,7 @@ public class StaplerDispatchValidator implements DispatchValidator {
     /**
      * Escape hatch to disable dispatch validation.
      */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* script-console editable */ boolean DISABLED = SystemProperties.getBoolean(ESCAPE_HATCH);
 
     private static @CheckForNull Boolean setStatus(@NonNull StaplerRequest req, @CheckForNull Boolean status) {

File: core/src/main/java/jenkins/security/stapler/StaticRoutingDecisionProvider.java
Patch:
@@ -263,7 +263,7 @@ private void parseFileIntoList(List<String> lines, Set<String> whitelist, Set<St
     }
     
     /** Allow script console access */
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static String WHITELIST_PATH = SystemProperties.getString(StaticRoutingDecisionProvider.class.getName() + ".whitelist");
 
 }

File: core/src/main/java/jenkins/security/stapler/TypedFilter.java
Patch:
@@ -269,10 +269,10 @@ public boolean keep(@NonNull Function function) {
     }
 
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean SKIP_TYPE_CHECK = SystemProperties.getBoolean(TypedFilter.class.getName() + ".skipTypeCheck");
 
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean PROHIBIT_STATIC_ACCESS = SystemProperties.getBoolean(TypedFilter.class.getName() + ".prohibitStaticAccess", true);
 }

File: core/src/main/java/jenkins/slaves/EncryptedSlaveAgentJnlpFile.java
Patch:
@@ -1,5 +1,6 @@
 package jenkins.slaves;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Util;
 import hudson.security.AccessControlled;
 import hudson.security.Permission;
@@ -68,6 +69,7 @@ public EncryptedSlaveAgentJnlpFile(AccessControlled it, String viewName, String
         this.slaveName = slaveName;
     }
 
+    @SuppressFBWarnings(value = "DMI_RANDOM_USED_ONLY_ONCE", justification = "TODO needs triage")
     @Override
     public void generateResponse(StaplerRequest req, final StaplerResponse res, Object node) throws IOException, ServletException {
         RequestDispatcher view = req.getView(it, viewName);

File: core/src/main/java/jenkins/util/FullDuplexHttpService.java
Patch:
@@ -59,14 +59,14 @@ public abstract class FullDuplexHttpService {
      * Set to true if the servlet container doesn't support chunked encoding.
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ boolean DIY_CHUNKING = SystemProperties.getBoolean("hudson.diyChunking");
 
     /**
      * Controls the time out of waiting for the 2nd HTTP request to arrive.
      */
     @Restricted(NoExternalUse.class)
-    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "for script console")
     public static /* Script Console modifiable */ long CONNECTION_TIMEOUT = TimeUnit.SECONDS.toMillis(15);
 
     protected final UUID uuid;

File: core/src/test/java/hudson/PluginManagerTest.java
Patch:
@@ -114,7 +114,7 @@ public void shouldProperlyRetrieveModificationDate() throws IOException {
                 equalTo(jar.lastModified()));
     }
     
-    private static void assertAttribute(Manifest manifest, String attributeName, String value) throws AssertionError {
+    private static void assertAttribute(Manifest manifest, String attributeName, String value) {
         Attributes attributes = manifest.getMainAttributes();
         assertThat("Main attributes must not be empty", attributes, notNullValue());
         assertThat("Attribute '" + attributeName + "' does not match the sample", 

File: test/src/test/java/hudson/model/ItemGroupMixInTest.java
Patch:
@@ -218,7 +218,7 @@ public boolean isApplicable(Class jobType) {
 
   @Issue("JENKINS-61956")
   @Test
-  public void copy_checkGoodName() throws Failure, IOException {
+  public void copy_checkGoodName() throws IOException {
     final String goodName = "calvin-jenkins";
     final String badName = "calvin@jenkins";
 
@@ -230,7 +230,7 @@ public void copy_checkGoodName() throws Failure, IOException {
 
   @Issue("JENKINS-61956")
   @Test
-  public void createProject_checkGoodName() throws Failure {
+  public void createProject_checkGoodName() {
     final String badName = "calvin@jenkins";
 
     Failure exception = assertThrows(Failure.class, () -> { r.jenkins.createProject(MockFolder.class, badName); });
@@ -239,7 +239,7 @@ public void createProject_checkGoodName() throws Failure {
 
   @Issue("JENKINS-61956")
   @Test
-  public void createProjectFromXML_checkGoodName() throws Failure {
+  public void createProjectFromXML_checkGoodName() {
     final String badName = "calvin@jenkins";
 
     final String xml = "<?xml version='1.0' encoding='UTF-8'?>\n" +

File: test/src/test/java/hudson/model/MyViewsPropertyTest.java
Patch:
@@ -174,7 +174,7 @@ public void testDeleteView() throws IOException {
     }
 
     @Test
-    public void testOnViewRenamed() throws IOException, Failure, FormException {
+    public void testOnViewRenamed() throws IOException, FormException {
         User user = User.getOrCreateByIdOrFullName("User");
         MyViewsProperty property = new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);
         property.readResolve();

File: test/src/test/java/jenkins/install/InstallStateTest.java
Patch:
@@ -86,15 +86,15 @@ public void shouldReturnUnknownStateForUnknownName() {
         assertThat(state, equalTo(InstallState.UNKNOWN));
     }
     
-    private static InstallState forName(String name) throws AssertionError {
+    private static InstallState forName(String name) {
         String xml = "<jenkins.install.InstallState>\n" +
             "  <isSetupComplete>true</isSetupComplete>\n" +
             "  <name>" + name + "</name>\n" +
             "</jenkins.install.InstallState>";
         return forXml(xml);
     }
     
-    private static InstallState forXml(String xml) throws AssertionError {
+    private static InstallState forXml(String xml) {
         Object read = Jenkins.XSTREAM2.fromXML(xml);
         assertThat(read, instanceOf(InstallState.class));
         InstallState state = (InstallState) read;

File: test/src/test/java/jenkins/model/JenkinsTest.java
Patch:
@@ -620,12 +620,12 @@ public void agentProtocols_singleDisable_roundtrip() throws Exception {
         assertProtocolDisabled(protocolToDisable2, "after the roundtrip");
     }
 
-    private void assertProtocolDisabled(String protocolName, @CheckForNull String stage) throws AssertionError {
+    private void assertProtocolDisabled(String protocolName, @CheckForNull String stage) {
         assertThat(protocolName + " must be disabled. Stage=" + (stage != null ? stage : "undefined"),
                 j.jenkins.getAgentProtocols(), not(hasItem(protocolName)));
     }
 
-    private void assertProtocolEnabled(String protocolName, @CheckForNull String stage) throws AssertionError {
+    private void assertProtocolEnabled(String protocolName, @CheckForNull String stage) {
         assertThat(protocolName + " must be enabled. Stage=" + (stage != null ? stage : "undefined"),
                 j.jenkins.getAgentProtocols(), hasItem(protocolName));
     }

File: test/src/test/java/jenkins/slaves/OldRemotingAgentTest.java
Patch:
@@ -171,13 +171,13 @@ public ComputerLauncher createComputerLauncher(EnvVars env) throws URISyntaxExce
 
     private static class NodeMonitorAssert extends NodeMonitor {
 
-        static void assertMonitors(Collection<NodeMonitor> toCheck, Computer c) throws AssertionError {
+        static void assertMonitors(Collection<NodeMonitor> toCheck, Computer c) {
             for (NodeMonitor monitor : toCheck) {
                 assertMonitor(monitor, c);
             }
         }
 
-        static void assertMonitor(NodeMonitor monitor, Computer c) throws AssertionError {
+        static void assertMonitor(NodeMonitor monitor, Computer c) {
             AbstractNodeMonitorDescriptor<?> descriptor = monitor.getDescriptor();
             final Method monitorMethod;
             try {

File: test/src/test/java/jenkins/slaves/RemotingVersionInfoTest.java
Patch:
@@ -59,7 +59,7 @@ public void warShouldIncludeRemotingManifestEntries() throws Exception {
         }
     }
 
-    private void assertAttributeValue(Manifest manifest, String attributeName, Object expectedValue) throws AssertionError {
+    private void assertAttributeValue(Manifest manifest, String attributeName, Object expectedValue) {
         assertThat("Wrong value of manifest attribute " + attributeName,
                 manifest.getMainAttributes().getValue(attributeName),
                 equalTo(expectedValue.toString()));

File: test/src/test/java/org/kohsuke/stapler/MockStaplerRequestBuilder.java
Patch:
@@ -65,7 +65,7 @@ public MockStaplerRequestBuilder withAncestor(AncestorImpl ancestor) {
         return this;
     }
        
-    public StaplerRequest build() throws AssertionError {        
+    public StaplerRequest build() {
         HttpServletRequest rawRequest = Mockito.mock(HttpServletRequest.class);
         return new RequestImpl(stapler != null ? stapler : new Stapler(), rawRequest, ancestors, tokens);
     }

File: core/src/main/java/jenkins/formelementpath/FormElementPathPageDecorator.java
Patch:
@@ -2,15 +2,14 @@
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
-import hudson.Main;
 import hudson.model.PageDecorator;
 import jenkins.util.SystemProperties;
 
 @Extension
 public class FormElementPathPageDecorator extends PageDecorator {
 
     @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
-    private static /*almost final */ boolean ENABLED = Main.isUnitTest ||
+    private static /*almost final */ boolean ENABLED =
             SystemProperties.getBoolean(FormElementPathPageDecorator.class.getName() + ".enabled");
 
     public boolean isEnabled() {

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -1197,7 +1197,7 @@ public abstract static class AbstractInterceptorCallableWrapper<T> implements De
 
         private final DelegatingCallable<T, IOException> callable;
 
-        public AbstractInterceptorCallableWrapper(DelegatingCallable<T, IOException> callable) {
+        protected AbstractInterceptorCallableWrapper(DelegatingCallable<T, IOException> callable) {
             this.callable = callable;
         }
 

File: core/src/main/java/hudson/Launcher.java
Patch:
@@ -97,7 +97,7 @@ public abstract class Launcher {
     @Restricted(Beta.class)
     protected EnvVarsFilterRuleWrapper envVarsFilterRuleWrapper;
 
-    public Launcher(@NonNull TaskListener listener, @CheckForNull VirtualChannel channel) {
+    protected Launcher(@NonNull TaskListener listener, @CheckForNull VirtualChannel channel) {
         this.listener = listener;
         this.channel = channel;
     }

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -351,7 +351,7 @@ PluginManager doCreate(@NonNull Class<? extends PluginManager> klass,
      */
     private final PluginStrategy strategy;
 
-    public PluginManager(ServletContext context, File rootDir) {
+    protected PluginManager(ServletContext context, File rootDir) {
         this.context = context;
 
         this.rootDir = rootDir;

File: core/src/main/java/hudson/console/ConsoleAnnotationDescriptor.java
Patch:
@@ -42,11 +42,11 @@
  * @since 1.349
  */
 public abstract class ConsoleAnnotationDescriptor extends Descriptor<ConsoleNote<?>> implements ExtensionPoint {
-    public ConsoleAnnotationDescriptor(Class<? extends ConsoleNote<?>> clazz) {
+    protected ConsoleAnnotationDescriptor(Class<? extends ConsoleNote<?>> clazz) {
         super(clazz);
     }
 
-    public ConsoleAnnotationDescriptor() {
+    protected ConsoleAnnotationDescriptor() {
     }
 
     /**

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -251,7 +251,7 @@ public List<TerminationRequest> getTerminatedBy() {
         return new ArrayList<>(terminatedBy);
     }
 
-    public Computer(Node node) {
+    protected Computer(Node node) {
         setNode(node);
     }
 

File: core/src/main/java/hudson/model/FullDuplexHttpChannel.java
Patch:
@@ -44,7 +44,7 @@ public abstract class FullDuplexHttpChannel extends FullDuplexHttpService {
     private Channel channel;
     private final boolean restricted;
 
-    public FullDuplexHttpChannel(UUID uuid, boolean restricted) throws IOException {
+    protected FullDuplexHttpChannel(UUID uuid, boolean restricted) throws IOException {
         super(uuid);
         this.restricted = restricted;
     }

File: core/src/main/java/hudson/model/Label.java
Patch:
@@ -97,7 +97,7 @@ public abstract class Label extends Actionable implements Comparable<Label>, Mod
     @NonNull
     public final transient NodeProvisioner nodeProvisioner;
 
-    public Label(@NonNull String name) {
+    protected Label(@NonNull String name) {
         this.name = name;
          // passing these causes an infinite loop - getTotalExecutors(),getBusyExecutors());
         this.loadStatistics = new LoadStatistics(0,0) {

File: core/src/main/java/hudson/model/ParameterDefinition.java
Patch:
@@ -102,7 +102,7 @@ public abstract class ParameterDefinition implements
 
     private String description;
 
-    public ParameterDefinition(@NonNull String name) {
+    protected ParameterDefinition(@NonNull String name) {
         if (name == null) {
             throw new IllegalArgumentException("Parameter name must be non-null");
         }
@@ -113,7 +113,7 @@ public ParameterDefinition(@NonNull String name) {
      * @deprecated Prefer {@link #ParameterDefinition(String)} with a {@link org.kohsuke.stapler.DataBoundConstructor} and allow {@link #setDescription} to be used as needed
      */
     @Deprecated
-    public ParameterDefinition(@NonNull String name, String description) {
+    protected ParameterDefinition(@NonNull String name, String description) {
         this(name);
         setDescription(description);
     }

File: core/src/main/java/hudson/model/Project.java
Patch:
@@ -86,7 +86,7 @@ public abstract class Project<P extends Project<P,B>,B extends Build<P,B>>
     /**
      * Creates a new project.
      */
-    public Project(ItemGroup parent,String name) {
+    protected Project(ItemGroup parent,String name) {
         super(parent,name);
     }
 

File: core/src/main/java/hudson/model/labels/LabelExpression.java
Patch:
@@ -121,7 +121,7 @@ static String paren(LabelOperatorPrecedence op, Label l) {
     public abstract static class Binary extends LabelExpression {
         public final Label lhs,rhs;
 
-        public Binary(Label lhs, Label rhs, LabelOperatorPrecedence op) {
+        protected Binary(Label lhs, Label rhs, LabelOperatorPrecedence op) {
             super(combine(lhs, rhs, op));
             this.lhs = lhs;
             this.rhs = rhs;

File: core/src/main/java/hudson/node_monitors/AbstractDiskSpaceMonitor.java
Patch:
@@ -18,12 +18,12 @@ public abstract class AbstractDiskSpaceMonitor extends NodeMonitor {
      */
     public final String freeSpaceThreshold;
 
-    public AbstractDiskSpaceMonitor(String threshold) throws ParseException {
+    protected AbstractDiskSpaceMonitor(String threshold) throws ParseException {
         this.freeSpaceThreshold = threshold;
         DiskSpace.parse(threshold); // make sure it parses
     }
 
-    public AbstractDiskSpaceMonitor() {
+    protected AbstractDiskSpaceMonitor() {
         this.freeSpaceThreshold = "1GB";
     }
 

File: core/src/main/java/hudson/slaves/AbstractCloudSlave.java
Patch:
@@ -44,7 +44,7 @@
  */
 public abstract class AbstractCloudSlave extends Slave {
 
-    public AbstractCloudSlave(@NonNull String name, String remoteFS, ComputerLauncher launcher)
+    protected AbstractCloudSlave(@NonNull String name, String remoteFS, ComputerLauncher launcher)
             throws FormException, IOException {
         super(name, remoteFS, launcher);
     }
@@ -54,7 +54,7 @@ public AbstractCloudSlave(@NonNull String name, String remoteFS, ComputerLaunche
      * @deprecated since 2.184
      */
     @Deprecated
-    public AbstractCloudSlave(String name, String nodeDescription, String remoteFS, String numExecutors,
+    protected AbstractCloudSlave(String name, String nodeDescription, String remoteFS, String numExecutors,
                               Mode mode, String labelString, ComputerLauncher launcher,
                               RetentionStrategy retentionStrategy, List<? extends NodeProperty<?>> nodeProperties)
             throws FormException, IOException {
@@ -66,7 +66,7 @@ public AbstractCloudSlave(String name, String nodeDescription, String remoteFS,
      * @deprecated since 2.184
      */
     @Deprecated
-    public AbstractCloudSlave(String name, String nodeDescription, String remoteFS, int numExecutors,
+    protected AbstractCloudSlave(String name, String nodeDescription, String remoteFS, int numExecutors,
                               Mode mode, String labelString, ComputerLauncher launcher,
                               RetentionStrategy retentionStrategy, List<? extends NodeProperty<?>> nodeProperties)
             throws FormException, IOException {

File: core/src/main/java/hudson/slaves/ComputerLauncherFilter.java
Patch:
@@ -41,7 +41,7 @@
 public abstract class ComputerLauncherFilter extends ComputerLauncher {
     protected volatile ComputerLauncher core;
 
-    public ComputerLauncherFilter(ComputerLauncher core) {
+    protected ComputerLauncherFilter(ComputerLauncher core) {
         this.core = core;
     }
 

File: core/src/main/java/hudson/tasks/CommandInterpreter.java
Patch:
@@ -67,7 +67,7 @@ public abstract class CommandInterpreter extends Builder implements EnvVarsFilte
     @Restricted(Beta.class)
     protected List<EnvVarsFilterLocalRule> configuredLocalRules = new ArrayList<>();
 
-    public CommandInterpreter(String command) {
+    protected CommandInterpreter(String command) {
         this.command = command;
     }
 

File: core/src/main/java/hudson/tools/AbstractCommandInstaller.java
Patch:
@@ -47,7 +47,7 @@ public abstract class AbstractCommandInstaller extends ToolInstaller {
     private final String command;
     private final String toolHome;
 
-    public AbstractCommandInstaller(String label, String command, String toolHome) {
+    protected AbstractCommandInstaller(String label, String command, String toolHome) {
         super(label);
         this.command = command;
         this.toolHome = toolHome;

File: core/src/main/java/hudson/tools/DownloadFromUrlInstaller.java
Patch:
@@ -254,7 +254,7 @@ public static class Installable {
      */
     public abstract class NodeSpecificInstallable extends Installable implements NodeSpecific<NodeSpecificInstallable> {
 
-        public NodeSpecificInstallable(Installable inst) {
+        protected NodeSpecificInstallable(Installable inst) {
             this.id = inst.id;
             this.name = inst.name;
             this.url = inst.url;

File: core/src/main/java/hudson/tools/ToolInstallation.java
Patch:
@@ -103,12 +103,12 @@ public abstract class ToolInstallation extends AbstractDescribableImpl<ToolInsta
      *      as of 1.302. Use {@link #ToolInstallation(String, String, List)} 
      */
     @Deprecated
-    public ToolInstallation(String name, String home) {
+    protected ToolInstallation(String name, String home) {
         this.name = name;
         this.home = home;
     }
 
-    public ToolInstallation(String name, String home, List<? extends ToolProperty<?>> properties) {
+    protected ToolInstallation(String name, String home, List<? extends ToolProperty<?>> properties) {
         this.name = name;
         this.home = home;
         if(properties!=null) {
@@ -258,7 +258,7 @@ protected Object writeReplace() throws Exception {
      * Subclasses can extend this for data migration from old field storing home directory.
      */
     protected abstract static class ToolConverter extends XStream2.PassthruConverter<ToolInstallation> {
-        public ToolConverter(XStream2 xstream) { super(xstream); }
+        protected ToolConverter(XStream2 xstream) { super(xstream); }
         @Override
         protected void callback(ToolInstallation obj, UnmarshallingContext context) {
             String s;

File: core/src/main/java/hudson/util/FormFieldValidator.java
Patch:
@@ -250,7 +250,7 @@ private void _errorWithMarkup(String message, String cssClass) throws IOExceptio
     @Deprecated
     public abstract static class URLCheck extends FormFieldValidator {
 
-        public URLCheck(StaplerRequest request, StaplerResponse response) {
+        protected URLCheck(StaplerRequest request, StaplerResponse response) {
             // can be used to check the existence of any file in file system
             // or other HTTP URLs inside firewall, so limit this to the admin.
             super(request, response, true);

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -492,7 +492,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
     public abstract static class PassthruConverter<T> implements Converter {
         private Converter converter;
 
-        public PassthruConverter(XStream2 xstream) {
+        protected PassthruConverter(XStream2 xstream) {
             converter = xstream.reflectionConverter;
         }
 

File: core/src/main/java/jenkins/security/RSAConfidentialKey.java
Patch:
@@ -52,11 +52,11 @@ public abstract class RSAConfidentialKey extends ConfidentialKey {
     private RSAPrivateKey priv;
     private RSAPublicKey pub;
 
-    public RSAConfidentialKey(String id) {
+    protected RSAConfidentialKey(String id) {
         super(id);
     }
 
-    public RSAConfidentialKey(Class owner, String shortName) {
+    protected RSAConfidentialKey(Class owner, String shortName) {
         this(owner.getName() + '.' + shortName);
     }
 

File: core/src/main/java/jenkins/util/InterceptingExecutorService.java
Patch:
@@ -19,7 +19,7 @@
 public abstract class InterceptingExecutorService implements ExecutorService {
     private final ExecutorService base;
 
-    public InterceptingExecutorService(ExecutorService base) {
+    protected InterceptingExecutorService(ExecutorService base) {
         this.base = base;
     }
 

File: core/src/main/java/jenkins/util/MarkFindingOutputStream.java
Patch:
@@ -15,7 +15,7 @@
 public abstract class MarkFindingOutputStream extends OutputStream {
     private final OutputStream base;
 
-    public MarkFindingOutputStream(OutputStream base) {
+    protected MarkFindingOutputStream(OutputStream base) {
         this.base = base;
     }
 

File: core/src/main/java/jenkins/util/groovy/AbstractGroovyViewModule.java
Patch:
@@ -25,7 +25,7 @@ public abstract class AbstractGroovyViewModule extends GroovyObjectSupport {
     public JenkinsTagLib t;
     public Namespace st;
 
-    public AbstractGroovyViewModule(JellyBuilder b) {
+    protected AbstractGroovyViewModule(JellyBuilder b) {
         builder = b;
         f = builder.namespace(FormTagLib.class);
         l = builder.namespace(LayoutTagLib.class);

File: core/src/main/java/org/acegisecurity/AcegiSecurityException.java
Patch:
@@ -32,11 +32,11 @@
 @Deprecated
 public abstract class AcegiSecurityException extends NestedRuntimeException {
 
-    public AcegiSecurityException(String msg) {
+    protected AcegiSecurityException(String msg) {
         super(msg);
     }
     
-    public AcegiSecurityException(String msg, Throwable cause) {
+    protected AcegiSecurityException(String msg, Throwable cause) {
         super(msg, cause);
     }
 

File: core/src/main/java/org/acegisecurity/AuthenticationException.java
Patch:
@@ -38,16 +38,16 @@ public abstract class AuthenticationException extends AcegiSecurityException {
     private Authentication authentication;
     private Object extraInformation;
 
-    public AuthenticationException(String msg) {
+    protected AuthenticationException(String msg) {
         super(msg);
     }
 
-    public AuthenticationException(String msg, Object extraInformation) {
+    protected AuthenticationException(String msg, Object extraInformation) {
         super(msg);
         this.extraInformation = extraInformation;
     }
 
-    public AuthenticationException(String msg, Throwable t) {
+    protected AuthenticationException(String msg, Throwable t) {
         super(msg, t);
     }
 

File: core/src/main/java/org/acegisecurity/providers/AbstractAuthenticationToken.java
Patch:
@@ -40,11 +40,11 @@ public abstract class AbstractAuthenticationToken implements Authentication {
     private Object details;
     private boolean authenticated;
 
-    public AbstractAuthenticationToken() {
+    protected AbstractAuthenticationToken() {
         this.authorities = new GrantedAuthority[0];
     }
 
-    public AbstractAuthenticationToken(GrantedAuthority[] authorities) {
+    protected AbstractAuthenticationToken(GrantedAuthority[] authorities) {
         this.authorities = authorities;
     }
 

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -3076,7 +3076,7 @@ class Cancel extends RuntimeException {}
                     if (ds.getIncludedFilesCount()!=0 || ds.getIncludedDirsCount()!=0) {
                         return true;
                     } else {
-                        throw new InterruptedException("no matches found within " + bound);
+                        throw (InterruptedException)new InterruptedException("no matches found within " + bound).initCause(c);
                     }
                 }
                 return ds.getIncludedFilesCount()!=0 || ds.getIncludedDirsCount()!=0;

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -237,14 +237,14 @@ public Locale get() {
             try {
                 ServletResponse.class.getMethod("setCharacterEncoding",String.class);
             } catch (NoSuchMethodException e) {
-                throw new IncompatibleServletVersionDetected(ServletResponse.class);
+                throw (IncompatibleServletVersionDetected)new IncompatibleServletVersionDetected(ServletResponse.class).initCause(e);
             }
 
             // make sure that we see Ant 1.7
             try {
                 FileSet.class.getMethod("getDirectoryScanner");
             } catch (NoSuchMethodException e) {
-                throw new IncompatibleAntVersionDetected(FileSet.class);
+                throw (IncompatibleAntVersionDetected)new IncompatibleAntVersionDetected(FileSet.class).initCause(e);
             }
 
             // make sure AWT is functioning, or else JFreeChart won't even load.

File: core/src/main/java/hudson/cli/ConsoleCommand.java
Patch:
@@ -56,13 +56,13 @@ protected int run() throws Exception {
             if (p!=null) {
                 run = p.resolve(job);
                 if (run==null)
-                    throw new IllegalStateException("Permalink "+build+" produced no build");
+                    throw new IllegalStateException("Permalink "+build+" produced no build", e);
             } else {
                 Permalink nearest = job.getPermalinks().findNearest(build);
                 throw new IllegalArgumentException(nearest == null ?
                         String.format("Not sure what you meant by \"%s\".", build) :
                         String.format("Not sure what you meant by \"%s\". Did you mean \"%s\"?",
-                                build, nearest.getId()));
+                                build, nearest.getId()), e);
             }
         }
 

File: core/src/main/java/hudson/cli/DisablePluginCommand.java
Patch:
@@ -82,7 +82,7 @@ protected int run() throws Exception {
         try {
             strategyToUse = PluginWrapper.PluginDisableStrategy.valueOf(strategy.toUpperCase());
         } catch (IllegalArgumentException iae) {
-            throw new IllegalArgumentException(hudson.cli.Messages.DisablePluginCommand_NoSuchStrategy(strategy, String.format("%s, %s, %s", PluginWrapper.PluginDisableStrategy.NONE, PluginWrapper.PluginDisableStrategy.MANDATORY, PluginWrapper.PluginDisableStrategy.ALL)));
+            throw new IllegalArgumentException(hudson.cli.Messages.DisablePluginCommand_NoSuchStrategy(strategy, String.format("%s, %s, %s", PluginWrapper.PluginDisableStrategy.NONE, PluginWrapper.PluginDisableStrategy.MANDATORY, PluginWrapper.PluginDisableStrategy.ALL)), iae);
         }
 
         // disable...

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1720,7 +1720,7 @@ public int getDelay(StaplerRequest req) throws ServletException {
             if(delay.endsWith("secs"))  delay=delay.substring(0,delay.length()-4);
             return Integer.parseInt(delay);
         } catch (NumberFormatException e) {
-            throw new ServletException("Invalid delay parameter value: "+delay);
+            throw new ServletException("Invalid delay parameter value: "+delay, e);
         }
     }
 

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -305,7 +305,7 @@ protected Descriptor() {
                 throw new AssertionError(getClass()+" must be assignable to "+getd.getReturnType());
             }
         } catch (NoSuchMethodException e) {
-            throw new AssertionError(getClass()+" is missing getDescriptor method.");
+            throw new AssertionError(getClass()+" is missing getDescriptor method.", e);
         }
 
     }

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -746,7 +746,7 @@ public static RangeSet fromString(String list, boolean skipError) {
                 } catch (NumberFormatException e) {
                     if (!skipError)
                         throw new IllegalArgumentException(
-                                String.format("Unable to parse '%s', expected number", list));
+                                String.format("Unable to parse '%s', expected number", list), e);
                     // ignore malformed text
                 }
             }

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -813,7 +813,7 @@ public RunT getBuildForCLI(@Argument(required=true,metaVar="BUILD#",usage="Build
                 throw new CmdLineException(null, "No such build '#"+n+"' exists");
             return r;
         } catch (NumberFormatException e) {
-            throw new CmdLineException(null, id+ "is not a number");
+            throw new CmdLineException(null, id+ "is not a number", e);
         }
     }
 

File: core/src/main/java/hudson/model/ResourceController.java
Patch:
@@ -128,7 +128,7 @@ public Boolean call() {
                 }
             });
         } catch (Exception e) {
-            throw new IllegalStateException("Inner callable does not throw exception");
+            throw new IllegalStateException("Inner callable does not throw exception", e);
         }
     }
 
@@ -149,7 +149,7 @@ public Resource call() {
                 }
             });
         } catch (Exception e) {
-            throw new IllegalStateException("Inner callable does not throw exception");
+            throw new IllegalStateException("Inner callable does not throw exception", e);
         }
     }
 

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -1656,7 +1656,7 @@ public void delete() throws IOException {
                         StandardCopyOption.ATOMIC_MOVE
                 );
             } catch (UnsupportedOperationException | SecurityException ex) {
-                throw new IOException(rootDir + " is in use");
+                throw new IOException(rootDir + " is in use", ex);
             }
             
             Util.deleteRecursive(tmp);

File: core/src/main/java/hudson/slaves/ComputerLauncher.java
Patch:
@@ -197,7 +197,7 @@ protected static void checkJavaVersion(final PrintStream logger, String javaComm
                                 .ComputerLauncher_NoJavaFound(line));
                     }
                 } catch (NumberFormatException x) {
-                    throw new IOException(Messages.ComputerLauncher_NoJavaFound(line));
+                    throw new IOException(Messages.ComputerLauncher_NoJavaFound(line), x);
                 }
                 return;
             }

File: core/src/main/java/hudson/util/ChunkedInputStream.java
Patch:
@@ -271,7 +271,7 @@ private static int getChunkSizeFromInputStream(final InputStream in)
         try {
             result = Integer.parseInt(dataString.trim(), 16);
         } catch (NumberFormatException e) {
-            throw new IOException ("Bad chunk size: " + dataString);
+            throw new IOException ("Bad chunk size: " + dataString, e);
         }
         return result;
     }

File: core/src/main/java/hudson/util/ReflectionUtils.java
Patch:
@@ -70,7 +70,7 @@ public static Object getPublicProperty(Object o, String p) throws InvocationTarg
                 Field f = o.getClass().getField(p);
                 return f.get(o);
             } catch (NoSuchFieldException e) {
-                throw new IllegalArgumentException("No such property "+p+" on "+o.getClass());
+                throw new IllegalArgumentException("No such property "+p+" on "+o.getClass(), e);
             }
         } else {
             return PropertyUtils.getProperty(o, p);

File: core/src/main/java/jenkins/install/InstallUtil.java
Patch:
@@ -134,7 +134,7 @@ private static InstallState getDefaultInstallState() {
             try {
                 return InstallState.valueOf(stateOverride.toUpperCase());
             } catch (RuntimeException e) {
-                throw new IllegalStateException("Unknown install state override specified on the commandline: '" + stateOverride + "'.");
+                throw new IllegalStateException("Unknown install state override specified on the commandline: '" + stateOverride + "'.", e);
             }
         }
         

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3351,7 +3351,7 @@ private void setBuildsAndWorkspacesDir() throws IOException, InvalidBuildsDir {
                 File tmp = File.createTempFile("Jenkins-doCheckRawBuildsDir", "foo:bar");
                 tmp.delete();
             } catch (IOException e) {
-                throw new InvalidBuildsDir(newBuildsDirValue +  " contains ${ITEM_FULLNAME} but your system does not support it (JENKINS-12251). Use ${ITEM_FULL_NAME} instead");
+                throw (InvalidBuildsDir)new InvalidBuildsDir(newBuildsDirValue +  " contains ${ITEM_FULLNAME} but your system does not support it (JENKINS-12251). Use ${ITEM_FULL_NAME} instead").initCause(e);
             }
         }
 
@@ -4027,7 +4027,7 @@ public synchronized HttpRedirect doQuietDown() {
         try {
             return doQuietDown(false, 0, null);
         } catch (IOException | InterruptedException e) {
-            throw new AssertionError(); // impossible
+            throw new AssertionError(e); // impossible
         }
     }
 
@@ -4044,7 +4044,7 @@ public synchronized HttpRedirect doQuietDown(boolean block, int timeout) {
         try {
             return doQuietDown(block, timeout, null);
         } catch (IOException | InterruptedException e) {
-            throw new AssertionError(); // impossible
+            throw new AssertionError(e); // impossible
         }
     }
 

File: core/src/main/java/jenkins/mvn/FilePathGlobalSettingsProvider.java
Patch:
@@ -34,7 +34,7 @@ public FilePath supplySettings(AbstractBuild<?, ?> build, TaskListener listener)
         try {
             return SettingsPathHelper.getSettings(build, listener, getPath());
         } catch (Exception e) {
-            throw new IllegalStateException("failed to prepare global settings.xml");
+            throw new IllegalStateException("failed to prepare global settings.xml", e);
         }
 
     }

File: core/src/main/java/jenkins/mvn/FilePathSettingsProvider.java
Patch:
@@ -35,7 +35,7 @@ public FilePath supplySettings(AbstractBuild<?, ?> build, TaskListener listener)
         try {
             return SettingsPathHelper.getSettings(build, listener, getPath());
         } catch (Exception e) {
-            throw new IllegalStateException("failed to prepare settings.xml");
+            throw new IllegalStateException("failed to prepare settings.xml", e);
         }
     }
 

File: core/src/main/java/jenkins/mvn/SettingsPathHelper.java
Patch:
@@ -28,7 +28,7 @@ static FilePath getSettings(AbstractBuild<?, ?> build, TaskListener listener, St
                     wsSettings = mrSettings;
                 }
             } catch (Exception e) {
-                throw new IllegalStateException("failed to find settings.xml at: " + wsSettings.getRemote());
+                throw new IllegalStateException("failed to find settings.xml at: " + wsSettings.getRemote(), e);
             }
             return wsSettings;
         }

File: core/src/main/java/jenkins/security/apitoken/ApiTokenStore.java
Patch:
@@ -241,7 +241,7 @@ private void addLegacyToken(@NonNull Secret legacyToken, boolean migrationFromEx
         try {
             digest = MessageDigest.getInstance(HASH_ALGORITHM);
         } catch (NoSuchAlgorithmException e) {
-            throw new AssertionError("There is no " + HASH_ALGORITHM + " available in this system");
+            throw new AssertionError("There is no " + HASH_ALGORITHM + " available in this system", e);
         }
         return digest.digest(tokenBytes);
     }

File: core/src/main/java/jenkins/util/TimeDuration.java
Patch:
@@ -75,7 +75,7 @@ public static TimeDuration fromString(@CheckForNull String delay) {
             }
             return new TimeDuration(Long.parseLong(delay.trim()) * unitMultiplier);
         } catch (NumberFormatException e) {
-            throw new IllegalArgumentException("Invalid time duration value: "+delay);
+            throw new IllegalArgumentException("Invalid time duration value: "+delay, e);
         }
     }
 

File: cli/src/main/java/hudson/util/QuotedStringTokenizer.java
Patch:
@@ -269,6 +269,9 @@ else if (c=='\\')
                   else
                       _token.append(c);
                   continue;
+
+              default:
+                  break;
             }
         }
 

File: core/src/main/java/hudson/cli/ListChangesCommand.java
Patch:
@@ -88,6 +88,8 @@ protected int act(List<Run<?, ?>> builds) throws IOException {
                 }
             }
             break;
+        default:
+            throw new AssertionError("Unknown format: " + format);
         }
 
         return 0;

File: core/src/main/java/hudson/console/ConsoleAnnotator.java
Patch:
@@ -126,9 +126,8 @@ public static <T> ConsoleAnnotator<T> combine(Collection<? extends ConsoleAnnota
         switch (all.size()) {
         case 0:     return null;    // none
         case 1:     return  cast(all.iterator().next()); // just one
+        default:    return new ConsoleAnnotatorAggregator<>(all);
         }
-
-        return new ConsoleAnnotatorAggregator<>(all);
     }
 
     /**

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2233,9 +2233,9 @@ public abstract static class StatusSummarizer implements ExtensionPoint {
             case FIXED :
                 return new Summary(false, Messages.Run_Summary_BackToNormal());
                 
+            default:
+                return new Summary(false, Messages.Run_Summary_Unknown());
         }
-        
-        return new Summary(false, Messages.Run_Summary_Unknown());
     }
 
     /**

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -2086,6 +2086,8 @@ private static void throwVerificationFailure(String expected, String actual, Fil
                 throw new IOException("Failed to compute SHA-1 of downloaded file, refusing installation");
             case NOT_PROVIDED:
                 throw new IOException("Unable to confirm integrity of downloaded file, refusing installation");
+            default:
+                throw new AssertionError("Unknown verification result: " + result1);
         }
     }
 

File: core/src/main/java/hudson/util/jna/RegistryKey.java
Patch:
@@ -105,8 +105,10 @@ private byte[] getValue(String valueName) {
 
             case WINERROR.ERROR_SUCCESS:
                 return lpData;
+
+            default:
+                throw new JnaException(r);
             }
-            throw new JnaException(r);
         }
     }
 

File: core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java
Patch:
@@ -155,6 +155,8 @@ public void filter(@NonNull EnvVars envVars, @NonNull EnvVarsFilterRuleContext c
                             variablesRemoved.add(variableName);
                             iterator.remove();
                             break;
+                        default:
+                            throw new AssertionError("Unknown process variables handling: " + processVariablesHandling);
                     }
                 }
             }

File: core/src/main/java/org/jenkins/ui/icon/IconType.java
Patch:
@@ -54,8 +54,8 @@ public String toQualifiedUrl(String url, JellyContext context) {
             case PLUGIN: {
                 return resURL + "/plugin/" + url;
             }
+            default:
+                throw new AssertionError("Unknown icon type: " + this);
         }
-
-        return null;
     }
 }

File: core/src/main/java/org/jenkins/ui/icon/IconSet.java
Patch:
@@ -318,7 +318,6 @@ private static String toNormalizedIconUrl(String url) {
         icons.addIcon(new Icon("icon-computer-flash icon-md", "24x24/computer-flash.gif", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new BuildStatusIcon("icon-disabled icon-md", "build-status/build-status-sprite.svg#last-disabled", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new BuildStatusIcon("icon-disabled-anime icon-md", "build-status/build-status-sprite.svg#last-disabled", Icon.ICON_MEDIUM_STYLE, true));
-        icons.addIcon(new Icon("icon-document-properties icon-md", "24x24/document-properties.gif", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new Icon("icon-empty icon-md", "24x24/empty.gif", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new Icon("icon-green icon-md", "24x24/green.gif", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new Icon("icon-green-anime icon-md", "24x24/green_anime.gif", Icon.ICON_MEDIUM_STYLE));
@@ -335,7 +334,6 @@ private static String toNormalizedIconUrl(String url) {
         icons.addIcon(new BuildStatusIcon("icon-red-anime icon-md", "build-status/build-status-sprite.svg#last-failed", Icon.ICON_MEDIUM_STYLE, true));
         icons.addIcon(new BuildStatusIcon("icon-yellow icon-md", "build-status/build-status-sprite.svg#last-unstable", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new BuildStatusIcon("icon-yellow-anime icon-md", "build-status/build-status-sprite.svg#last-unstable", Icon.ICON_MEDIUM_STYLE, true));
-        icons.addIcon(new Icon("icon-document-properties icon-md", "24x24/document-properties.png", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new Icon("icon-empty icon-md", "24x24/empty.png", Icon.ICON_MEDIUM_STYLE));
         icons.addIcon(new Icon("icon-grey icon-md", "24x24/grey.png", Icon.ICON_MEDIUM_STYLE));
 
@@ -471,6 +469,7 @@ private static void initializeSVGs() {
         images.add("user");
         images.add("video");
         images.add("warning");
+        images.add("document-properties");
 
         Map<String, String> materialIcons = new HashMap<>();
         materialIcons.put("help", "svg-sprite-action-symbol.svg#ic_help_24px");

File: core/src/main/java/jenkins/security/s2m/ConfigDirectory.java
Patch:
@@ -26,7 +26,7 @@ protected ConfigDirectory(File file) {
     }
 
     @Override
-    public synchronized void load() {
+    public synchronized void load2() {
         COL result = create();
 
         if (dir.exists()) {

File: core/src/main/java/jenkins/security/s2m/ConfigDirectory.java
Patch:
@@ -26,7 +26,7 @@ protected ConfigDirectory(File file) {
     }
 
     @Override
-    public synchronized void load() {
+    public synchronized void load2() {
         COL result = create();
 
         if (dir.exists()) {

File: core/src/main/java/hudson/model/ExecutorListener.java
Patch:
@@ -46,10 +46,9 @@ default void taskAccepted(Executor executor, Queue.Task task) {}
      * Called whenever a task is started by an executor.
      * @param executor The executor.
      * @param task The task.
-     * @param executable the executable.
      * @since TODO
      */
-    default void taskStarted(Executor e, Queue.Task task) {}
+    default void taskStarted(Executor executor, Queue.Task task) {}
 
     /**
      * Called whenever a task is completed without any problems by an executor.

File: core/src/test/java/jenkins/model/Security2424Test.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.Test;
 import org.jvnet.hudson.test.Issue;
 
-public class JenkinsSEC2424Test {
+public class Security2424Test {
     @Test
     @Issue("SECURITY-2424")
     public void doesNotAcceptNameWithTrailingDot_regular() {

File: core/src/main/java/hudson/model/AbstractCIBase.java
Patch:
@@ -28,6 +28,7 @@
 
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.security.AccessControlled;
 import hudson.slaves.ComputerListener;
@@ -57,6 +58,7 @@ public abstract class AbstractCIBase extends Node implements ItemGroup<TopLevelI
      * @deprecated
      *      Maybe you were trying to call {@link #getDisplayName()}.
      */
+    @NonNull
     @Deprecated @Override
     public String getNodeName() {
         return "";

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -25,6 +25,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.EnvVars;
 import hudson.Util;
 import hudson.diagnosis.OldDataMonitor;
@@ -284,6 +285,7 @@ public ParametersAction merge(@CheckForNull ParametersAction overrides) {
         return parametersAction;
     }
 
+    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE", justification = "parameters in readResolve is needed for data migration.")
     private Object readResolve() {
         if (parameters == null) { // JENKINS-39495
             parameters = Collections.emptyList();

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -257,6 +257,7 @@ public String getRemoteFS() {
         return remoteFS;
     }
 
+    @NonNull
     @Override
     public String getNodeName() {
         return name;

File: core/src/main/java/jenkins/model/CauseOfInterruption.java
Patch:
@@ -128,7 +128,7 @@ public void print(TaskListener listener) {
             final User userInstance = getUser();
             listener.getLogger().println(
                 Messages.CauseOfInterruption_ShortDescription(
-                        userInstance != null ? ModelHyperlinkNote.encodeTo(userInstance) : user));
+                        ModelHyperlinkNote.encodeTo(userInstance)));
         }
 
         @Override

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -5106,6 +5106,7 @@ public boolean isConnecting() {
             return false;
         }
 
+        @NonNull
         @Override
         public String getDisplayName() {
             return Messages.Hudson_Computer_DisplayName();

File: test/src/test/java/hudson/model/JobTest.java
Patch:
@@ -39,6 +39,7 @@
 import com.gargoylesoftware.htmlunit.html.HtmlForm;
 import com.gargoylesoftware.htmlunit.html.HtmlFormUtil;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import hudson.FilePath;
 import hudson.Functions;
 import hudson.model.queue.QueueTaskFuture;
@@ -556,6 +557,7 @@ public void setVirtualName(String virtualName) {
             this.virtualName = virtualName;
         }
 
+        @NonNull
         @Override
         public String getNodeName() {
             if (virtualName != null) {

File: core/src/main/java/hudson/util/RobustReflectionConverter.java
Patch:
@@ -506,9 +506,9 @@ public void add(Class definedInCls, String fieldName) {
 
     private Class determineType(HierarchicalStreamReader reader, boolean validField, Object result, String fieldName, Class definedInCls) {
         String classAttribute = reader.getAttribute(mapper.aliasForAttribute("class"));
-        Class fieldType = reflectionProvider.getFieldType(result, fieldName, definedInCls);
         if (classAttribute != null) {
             Class specifiedType = mapper.realClass(classAttribute);
+            Class fieldType = reflectionProvider.getFieldType(result, fieldName, definedInCls);
             if(fieldType.isAssignableFrom(specifiedType))
                 // make sure that the specified type in XML is compatible with the field type.
                 // this allows the code to evolve in more flexible way.
@@ -522,6 +522,7 @@ private Class determineType(HierarchicalStreamReader reader, boolean validField,
                 return mapper.realClass(reader.getNodeName());
             }
         } else {
+            Class fieldType = reflectionProvider.getFieldType(result, fieldName, definedInCls);
             return mapper.defaultImplementationOf(fieldType);
         }
     }

File: core/src/main/java/hudson/model/AbstractCIBase.java
Patch:
@@ -28,6 +28,7 @@
 
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.security.AccessControlled;
 import hudson.slaves.ComputerListener;
@@ -57,6 +58,7 @@ public abstract class AbstractCIBase extends Node implements ItemGroup<TopLevelI
      * @deprecated
      *      Maybe you were trying to call {@link #getDisplayName()}.
      */
+    @NonNull
     @Deprecated @Override
     public String getNodeName() {
         return "";

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -25,6 +25,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.EnvVars;
 import hudson.Util;
 import hudson.diagnosis.OldDataMonitor;
@@ -284,6 +285,7 @@ public ParametersAction merge(@CheckForNull ParametersAction overrides) {
         return parametersAction;
     }
 
+    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE", justification = "parameters in readResolve is needed for data migration.")
     private Object readResolve() {
         if (parameters == null) { // JENKINS-39495
             parameters = Collections.emptyList();

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -257,6 +257,7 @@ public String getRemoteFS() {
         return remoteFS;
     }
 
+    @NonNull
     @Override
     public String getNodeName() {
         return name;

File: core/src/main/java/jenkins/model/CauseOfInterruption.java
Patch:
@@ -128,7 +128,7 @@ public void print(TaskListener listener) {
             final User userInstance = getUser();
             listener.getLogger().println(
                 Messages.CauseOfInterruption_ShortDescription(
-                        userInstance != null ? ModelHyperlinkNote.encodeTo(userInstance) : user));
+                        ModelHyperlinkNote.encodeTo(userInstance)));
         }
 
         @Override

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -5099,6 +5099,7 @@ public boolean isConnecting() {
             return false;
         }
 
+        @NonNull
         @Override
         public String getDisplayName() {
             return Messages.Hudson_Computer_DisplayName();

File: test/src/test/java/hudson/model/JobTest.java
Patch:
@@ -39,6 +39,7 @@
 import com.gargoylesoftware.htmlunit.html.HtmlForm;
 import com.gargoylesoftware.htmlunit.html.HtmlFormUtil;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import hudson.FilePath;
 import hudson.Functions;
 import hudson.model.queue.QueueTaskFuture;
@@ -556,6 +557,7 @@ public void setVirtualName(String virtualName) {
             this.virtualName = virtualName;
         }
 
+        @NonNull
         @Override
         public String getNodeName() {
             if (virtualName != null) {

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -2303,9 +2303,6 @@ public String invoke(File f, VirtualChannel channel) throws IOException, Interru
      * I/O operations also happens asynchronously from the {@link Channel#call(Callable)} operations, so if
      * you write to a remote file and then execute {@link Channel#call(Callable)} and try to access the newly copied
      * file, it might not be fully written yet.
-     *
-     * <p>
-     *
      */
     public OutputStream write() throws IOException, InterruptedException {
         if(channel==null) {

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -139,7 +139,7 @@ public class User extends AbstractModelObject implements AccessControlled, Descr
      * Unfortunately this infringed some legitimate use cases of creating Jenkins-local users for
      * automation purposes. This escape hatch switch can be enabled to resurrect that behaviour.
      * <p>
-     * @see <a href="https://issues.jenkins.io/browse/JENKINS-22346">JENKINS-22346</a>.
+     * See <a href="https://issues.jenkins.io/browse/JENKINS-22346">JENKINS-22346</a>.
      */
     @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean ALLOW_NON_EXISTENT_USER_TO_LOGIN = SystemProperties.getBoolean(User.class.getName() + ".allowNonExistentUserToLogin");

File: core/src/main/java/jenkins/util/io/CompositeIOException.java
Patch:
@@ -71,7 +71,7 @@ public CompositeIOException(String message, @NonNull List<IOException> exception
     }
 
     /**
-     * @see CompositeIOException(String, List)
+     * @see #CompositeIOException(String, List)
      */
     public CompositeIOException(String message, IOException... exceptions) {
         this(message, Arrays.asList(exceptions));

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -712,5 +712,6 @@ protected URL findResource(String name) {
         }
     }
 
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static /* not final */ boolean useAntClassLoader = SystemProperties.getBoolean(ClassicPluginStrategy.class.getName() + ".useAntClassLoader", true);
 }

File: core/src/main/java/hudson/model/DownloadService.java
Patch:
@@ -27,6 +27,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.ExtensionList;
 import hudson.ExtensionListListener;
@@ -487,11 +488,13 @@ public static Downloadable get(String id) {
     }
 
     // TODO this was previously referenced in the browser-based download, but should probably be checked for the server-based download
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static boolean neverUpdate = SystemProperties.getBoolean(DownloadService.class.getName()+".never");
 
     /**
      * May be used to temporarily disable signature checking on {@link DownloadService} and {@link UpdateCenter}.
      * Useful when upstream signatures are broken, such as due to expired certificates.
      */
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static boolean signatureCheck = !SystemProperties.getBoolean(DownloadService.class.getName()+".noSignatureCheck");
 }

File: core/src/main/java/hudson/model/WorkspaceCleanupThread.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.model;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.ExtensionList;
 import hudson.FilePath;
@@ -151,6 +152,7 @@ private boolean shouldBeDeleted(@NonNull TopLevelItem item, FilePath dir, @NonNu
     /**
      * Can be used to disable workspace clean up.
      */
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static boolean disabled = SystemProperties.getBoolean(WorkspaceCleanupThread.class.getName()+".disabled");
 
     /**
@@ -161,5 +163,6 @@ private boolean shouldBeDeleted(@NonNull TopLevelItem item, FilePath dir, @NonNu
     /**
      * Number of days workspaces should be retained.
      */
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static int retainForDays = SystemProperties.getInteger(WorkspaceCleanupThread.class.getName()+".retainForDays", 30);
 }

File: core/src/main/java/hudson/slaves/CloudRetentionStrategy.java
Patch:
@@ -27,6 +27,7 @@
 import static java.util.concurrent.TimeUnit.MINUTES;
 import static java.util.logging.Level.WARNING;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -75,5 +76,6 @@ public void start(AbstractCloudComputer c) {
 
     private static final Logger LOGGER = Logger.getLogger(CloudRetentionStrategy.class.getName());
 
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static boolean disabled = SystemProperties.getBoolean(CloudRetentionStrategy.class.getName()+".disabled");
 }

File: core/src/main/java/hudson/tasks/Fingerprinter.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.tasks;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.EnvVars;
 import hudson.Extension;
 import hudson.FilePath;
@@ -82,6 +83,8 @@
  * @author Kohsuke Kawaguchi
  */
 public class Fingerprinter extends Recorder implements Serializable, DependencyDeclarer, SimpleBuildStep {
+
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static boolean enableFingerprintsInDependencyGraph = SystemProperties.getBoolean(Fingerprinter.class.getName() + ".enableFingerprintsInDependencyGraph");
     
     /**

File: core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java
Patch:
@@ -2,6 +2,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.Functions;
 import hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer;
@@ -51,6 +52,7 @@ public class DefaultJnlpSlaveReceiver extends JnlpAgentReceiver {
      * @since 2.28
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static boolean disableStrictVerification =
             SystemProperties.getBoolean(DefaultJnlpSlaveReceiver.class.getName() + ".disableStrictVerification");
 

File: core/src/main/java/jenkins/slaves/StandardOutputSwapper.java
Patch:
@@ -1,5 +1,6 @@
 package jenkins.slaves;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.FilePath;
 import hudson.model.Computer;
@@ -83,5 +84,6 @@ private void swap(StandardOutputStream stdout) throws IOException, NoSuchMethodE
     }
 
     private static final Logger LOGGER = Logger.getLogger(StandardOutputSwapper.class.getName());
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static boolean disabled = SystemProperties.getBoolean(StandardOutputSwapper.class.getName()+".disabled");
 }

File: test/src/test/java/hudson/model/AbstractProjectTest.java
Patch:
@@ -429,6 +429,7 @@ public void configDotXmlSubmissionToDifferentType() throws Exception {
         tpm.installDetachedPlugin("workflow-step-api");
         tpm.installDetachedPlugin("scm-api");
         tpm.installDetachedPlugin("workflow-api");
+        tpm.installDetachedPlugin("script-security");
         tpm.installDetachedPlugin("junit");
         tpm.installDetachedPlugin("matrix-project");
 

File: core/src/main/java/hudson/slaves/CloudRetentionStrategy.java
Patch:
@@ -27,11 +27,10 @@
 import static java.util.concurrent.TimeUnit.MINUTES;
 import static java.util.logging.Level.WARNING;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import jenkins.util.SystemProperties;
 import net.jcip.annotations.GuardedBy;
 

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -712,5 +712,6 @@ protected URL findResource(String name) {
         }
     }
 
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static /* not final */ boolean useAntClassLoader = SystemProperties.getBoolean(ClassicPluginStrategy.class.getName() + ".useAntClassLoader", true);
 }

File: core/src/main/java/hudson/model/DownloadService.java
Patch:
@@ -27,6 +27,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.ExtensionList;
 import hudson.ExtensionListListener;
@@ -487,11 +488,13 @@ public static Downloadable get(String id) {
     }
 
     // TODO this was previously referenced in the browser-based download, but should probably be checked for the server-based download
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static boolean neverUpdate = SystemProperties.getBoolean(DownloadService.class.getName()+".never");
 
     /**
      * May be used to temporarily disable signature checking on {@link DownloadService} and {@link UpdateCenter}.
      * Useful when upstream signatures are broken, such as due to expired certificates.
      */
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static boolean signatureCheck = !SystemProperties.getBoolean(DownloadService.class.getName()+".noSignatureCheck");
 }

File: core/src/main/java/hudson/model/WorkspaceCleanupThread.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.model;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.ExtensionList;
 import hudson.FilePath;
@@ -151,6 +152,7 @@ private boolean shouldBeDeleted(@NonNull TopLevelItem item, FilePath dir, @NonNu
     /**
      * Can be used to disable workspace clean up.
      */
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static boolean disabled = SystemProperties.getBoolean(WorkspaceCleanupThread.class.getName()+".disabled");
 
     /**
@@ -161,5 +163,6 @@ private boolean shouldBeDeleted(@NonNull TopLevelItem item, FilePath dir, @NonNu
     /**
      * Number of days workspaces should be retained.
      */
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static int retainForDays = SystemProperties.getInteger(WorkspaceCleanupThread.class.getName()+".retainForDays", 30);
 }

File: core/src/main/java/hudson/slaves/CloudRetentionStrategy.java
Patch:
@@ -30,6 +30,8 @@
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import jenkins.util.SystemProperties;
 import net.jcip.annotations.GuardedBy;
 
@@ -75,5 +77,6 @@ public void start(AbstractCloudComputer c) {
 
     private static final Logger LOGGER = Logger.getLogger(CloudRetentionStrategy.class.getName());
 
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static boolean disabled = SystemProperties.getBoolean(CloudRetentionStrategy.class.getName()+".disabled");
 }

File: core/src/main/java/hudson/tasks/Fingerprinter.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.tasks;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.EnvVars;
 import hudson.Extension;
 import hudson.FilePath;
@@ -82,6 +83,8 @@
  * @author Kohsuke Kawaguchi
  */
 public class Fingerprinter extends Recorder implements Serializable, DependencyDeclarer, SimpleBuildStep {
+
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static boolean enableFingerprintsInDependencyGraph = SystemProperties.getBoolean(Fingerprinter.class.getName() + ".enableFingerprintsInDependencyGraph");
     
     /**

File: core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java
Patch:
@@ -2,6 +2,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.Functions;
 import hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer;
@@ -51,6 +52,7 @@ public class DefaultJnlpSlaveReceiver extends JnlpAgentReceiver {
      * @since 2.28
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static boolean disableStrictVerification =
             SystemProperties.getBoolean(DefaultJnlpSlaveReceiver.class.getName() + ".disableStrictVerification");
 

File: core/src/main/java/jenkins/slaves/StandardOutputSwapper.java
Patch:
@@ -1,5 +1,6 @@
 package jenkins.slaves;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.FilePath;
 import hudson.model.Computer;
@@ -83,5 +84,6 @@ private void swap(StandardOutputStream stdout) throws IOException, NoSuchMethodE
     }
 
     private static final Logger LOGGER = Logger.getLogger(StandardOutputSwapper.class.getName());
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Accessible via System Groovy Scripts")
     public static boolean disabled = SystemProperties.getBoolean(StandardOutputSwapper.class.getName()+".disabled");
 }

File: core/src/test/java/org/jenkins/ui/icon/IconSetTest.java
Patch:
@@ -14,6 +14,6 @@ public class IconSetTest {
     @Test
     void testIconSetSize() {
         final Map<String, Icon> coreIcons = IconSet.icons.getCoreIcons();
-        assertThat("icons", coreIcons.size(), greaterThanOrEqualTo(371));
+        assertThat("icons", coreIcons.size(), greaterThanOrEqualTo(350));
     }
 }

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -435,7 +435,7 @@ public static ProcessTree get() {
         if(!enabled)
             return DEFAULT;
 
-        // Check for the existance of vetoers if I don't know already
+        // Check for the existence of vetoers if I don't know already
         if (vetoersExist == null) {
             try {
                 VirtualChannel channelToController = AgentComputerUtil.getChannelToController();

File: core/src/main/java/hudson/model/TaskListener.java
Patch:
@@ -90,7 +90,7 @@ default PrintWriter _error(String prefix, String msg) {
         out.println(msg);
 
         Charset charset = getCharset();
-        return new PrintWriter(charset != null ? new OutputStreamWriter(out, charset) : new OutputStreamWriter(out), true);
+        return new PrintWriter(new OutputStreamWriter(out, charset), true);
     }
 
     /**

File: core/src/main/java/hudson/tasks/Maven.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.tasks;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.CopyOnWrite;
 import hudson.EnvVars;
 import hudson.Extension;
@@ -57,7 +58,6 @@
 import hudson.util.XStream2;
 import java.io.File;
 import java.io.IOException;
-import java.io.ObjectStreamException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -236,7 +236,8 @@ public MavenInstallation getMaven() {
         return null;
     }
 
-    private Object readResolve() throws ObjectStreamException {
+    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE", justification = "injectBuildVariables in readResolve is needed for data migration.")
+    private Object readResolve(){
         if (injectBuildVariables == null) {
             injectBuildVariables = true;
         }

File: core/src/main/java/org/jenkins/ui/icon/IconSet.java
Patch:
@@ -482,10 +482,10 @@ private static void initializeSVGs() {
                         "svgs/" + image + ".svg", size.getValue()));
             }
 
-            for (String image : materialIcons.keySet()) {
+            for (Map.Entry<String, String> imageEntry : materialIcons.entrySet()) {
                 icons.addIcon(new Icon(
-                        "icon-" + image + " " + size.getKey(),
-                                "material-icons/" + materialIcons.get(image),
+                        "icon-" + imageEntry.getKey() + " " + size.getKey(),
+                                "material-icons/" + imageEntry.getValue(),
                                 size.getValue(),
                                 IconFormat.EXTERNAL_SVG_SPRITE
                         )

File: test/src/test/java/hudson/slaves/SlaveComputerTest.java
Patch:
@@ -155,7 +155,7 @@ public void startupShouldFailOnErrorOnlineListener() throws Exception {
     @TestExtension(value = "startupShouldFailOnErrorOnlineListener")
     public static final class ErrorOnOnlineListener extends ComputerListener {
 
-        static int onOnlineCount = 0;
+        static volatile int onOnlineCount = 0;
 
         @Override
         public void onOnline(Computer c, TaskListener listener) throws IOException, InterruptedException {

File: core/src/main/java/hudson/Util.java
Patch:
@@ -64,6 +64,7 @@
 import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.nio.file.StandardCopyOption;
 import java.nio.file.attribute.BasicFileAttributes;
 import java.nio.file.attribute.DosFileAttributes;
 import java.nio.file.attribute.PosixFilePermission;
@@ -1297,7 +1298,7 @@ private static boolean createSymlinkAtomic(@NonNull Path pathForSymlink, @NonNul
             Path tempSymlinkPath = symlink.toPath();
             Files.createSymbolicLink(tempSymlinkPath, target);
             try {
-                Files.move(tempSymlinkPath, pathForSymlink, java.nio.file.StandardCopyOption.ATOMIC_MOVE);
+                Files.move(tempSymlinkPath, pathForSymlink, StandardCopyOption.ATOMIC_MOVE);
                 return true;
             } catch (
                 UnsupportedOperationException |

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -29,6 +29,7 @@
 
 import com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider;
 import com.thoughtworks.xstream.core.JVM;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.Hudson;
 import hudson.security.ACL;
 import hudson.security.ACLContext;
@@ -353,7 +354,7 @@ public static void installExpressionFactory(ServletContextEvent event) {
 	/**
      * Installs log handler to monitor all Hudson logs.
      */
-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings("LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE")
+    @SuppressFBWarnings("LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE")
     private void installLogger() {
         Jenkins.logRecords = handler.getView();
         Logger.getLogger("").addHandler(handler);

File: core/src/main/java/hudson/cli/GroovyshCommand.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.cli;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import groovy.lang.Binding;
 import groovy.lang.Closure;
 import hudson.Extension;
@@ -93,7 +94,7 @@ protected Groovysh createShell(InputStream stdin, PrintStream stdout,
             private static final long serialVersionUID = 1L;
 
             @SuppressWarnings("unused")
-            @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
+            @SuppressFBWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
             public Object doCall(Object[] args) {
                 assert args.length == 1;
                 assert args[0] instanceof Shell;

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -834,7 +834,7 @@ public QueueTaskFuture<R> scheduleBuild2(int quietPeriod, Cause c, Collection<?
     @SuppressWarnings("deprecation")
     @WithBridgeMethods(Future.class)
     public QueueTaskFuture<R> scheduleBuild2(int quietPeriod) {
-        return scheduleBuild2(quietPeriod, new hudson.model.Cause.LegacyCodeCause());
+        return scheduleBuild2(quietPeriod, new Cause.LegacyCodeCause());
     }
 
     /**

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -51,6 +51,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Vector;
+import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
@@ -346,7 +347,7 @@ public void run() {
             SubTask task;
             // transition from idle to building.
             // perform this state change as an atomic operation wrt other queue operations
-            task = Queue.withLock(new java.util.concurrent.Callable<SubTask>() {
+            task = Queue.withLock(new Callable<SubTask>() {
                 @Override
                 public SubTask call() throws Exception {
                     if (!owner.isOnline()) {

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -36,6 +36,7 @@
 import hudson.util.PluginServletFilter;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -661,7 +662,7 @@ public static String getFrom() {
         
         // Encode the return value
         try {
-            returnValue = java.net.URLEncoder.encode(from, "UTF-8");
+            returnValue = URLEncoder.encode(from, "UTF-8");
         } catch (UnsupportedEncodingException e) { }
 
         // Return encoded value or at least "/" in the case exception occurred during encode()

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -43,6 +43,7 @@
 import hudson.util.FormValidation;
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.AccessDeniedException;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.logging.Level;
@@ -283,7 +284,7 @@ public void perform(Run<?,?> build, FilePath ws, EnvVars environment, Launcher l
                     // but anyway most likely result == null above so we would not be here.
                 }
             }
-        } catch (java.nio.file.AccessDeniedException e) {
+        } catch (AccessDeniedException e) {
             LOG.log(Level.FINE, "Diagnosing anticipated Exception", e);
             throw new AbortException(e.toString()); // Message is not enough as that is the filename only
         }

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -56,6 +56,7 @@
 import java.util.Date;
 import java.util.GregorianCalendar;
 import java.util.List;
+import java.util.Timer;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
@@ -331,7 +332,7 @@ public void run(AbstractProject p) {
      */
     @SuppressWarnings("MS_SHOULD_BE_FINAL")
     @Deprecated
-    public static @CheckForNull java.util.Timer timer;
+    public static @CheckForNull Timer timer;
 
     /**
      * Returns all the registered {@link Trigger} descriptors.

File: core/src/main/java/hudson/util/DOSToUnixPathHelper.java
Patch:
@@ -7,8 +7,9 @@
 import hudson.Util;
 import java.io.File;
 import org.kohsuke.accmod.Restricted;
+import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-@Restricted(org.kohsuke.accmod.restrictions.NoExternalUse.class)
+@Restricted(NoExternalUse.class)
 class DOSToUnixPathHelper {
     interface Helper {
         void ok();

File: core/src/main/java/hudson/util/DirScanner.java
Patch:
@@ -12,6 +12,7 @@
 import java.util.Set;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.DirectoryScanner;
+import org.apache.tools.ant.Project;
 import org.apache.tools.ant.types.FileSet;
 import org.apache.tools.ant.types.selectors.FileSelector;
 import org.kohsuke.accmod.Restricted;
@@ -139,7 +140,7 @@ public void scan(File dir, FileVisitor visitor) throws IOException {
             fs.setDefaultexcludes(useDefaultExcludes);
 
             if(dir.exists()) {
-                DirectoryScanner ds = fs.getDirectoryScanner(new org.apache.tools.ant.Project());
+                DirectoryScanner ds = fs.getDirectoryScanner(new Project());
                 for( String f : ds.getIncludedFiles()) {
                     File file = new File(dir, f);
                     scanSingle(file, f, visitor);

File: core/src/main/java/hudson/util/NoOverlapCategoryAxis.java
Patch:
@@ -27,6 +27,7 @@
 import java.awt.Shape;
 import java.awt.geom.Point2D;
 import java.awt.geom.Rectangle2D;
+import java.util.List;
 import org.jfree.chart.axis.AxisState;
 import org.jfree.chart.axis.CategoryAxis;
 import org.jfree.chart.axis.CategoryLabelPosition;
@@ -62,7 +63,7 @@ protected AxisState drawCategoryLabels(Graphics2D g2,
         }
 
         if (isTickLabelsVisible()) {
-            java.util.List ticks = refreshTicks(g2, state, plotArea, edge);
+            List ticks = refreshTicks(g2, state, plotArea, edge);
             state.setTicks(ticks);
 
             // remember the last drawn label so that we can avoid drawing overlapping labels.

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -76,6 +76,7 @@
 import jenkins.security.SlaveToMasterCallable;
 import jenkins.util.SystemProperties;
 import jenkins.util.java.JavaUtils;
+import org.apache.commons.io.FileUtils;
 import org.jenkinsci.remoting.SerializableOnlyOverRemoting;
 import org.jvnet.winp.WinProcess;
 import org.jvnet.winp.WinpException;
@@ -1050,7 +1051,7 @@ public synchronized EnvVars getEnvironmentVariables() {
         }
 
         public byte[] readFileToByteArray(File file) throws IOException {
-            try (InputStream in = org.apache.commons.io.FileUtils.openInputStream(file)) {
+            try (InputStream in = FileUtils.openInputStream(file)) {
                 return org.apache.commons.io.IOUtils.toByteArray(in);
             }
         }

File: core/src/main/java/hudson/util/RobustReflectionConverter.java
Patch:
@@ -37,6 +37,7 @@
 import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
 import com.thoughtworks.xstream.core.util.Primitives;
 import com.thoughtworks.xstream.core.util.SerializationMembers;
+import com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper;
 import com.thoughtworks.xstream.io.HierarchicalStreamReader;
 import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
 import com.thoughtworks.xstream.mapper.Mapper;
@@ -244,7 +245,7 @@ private void writeField(String fieldName, String aliasName, Class fieldType, Cla
                     if (!mapper.shouldSerializeMember(definedIn, aliasName)) {
                         return;
                     }
-                    com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode(writer, mapper.serializedMember(definedIn, aliasName), fieldType);
+                    ExtendedHierarchicalStreamWriterHelper.startNode(writer, mapper.serializedMember(definedIn, aliasName), fieldType);
 
                     Class actualType = newObj.getClass();
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -197,6 +197,7 @@
 import hudson.util.MultipartFormDataParser;
 import hudson.util.NamingThreadFactory;
 import hudson.util.PluginServletFilter;
+import hudson.util.QuotedStringTokenizer;
 import hudson.util.RemotingDiagnostics;
 import hudson.util.RemotingDiagnostics.HeapDump;
 import hudson.util.TextFile;
@@ -2047,7 +2048,7 @@ public Computer[] getComputers() {
      */
     public Label getLabel(String expr) {
         if(expr==null)  return null;
-        expr = hudson.util.QuotedStringTokenizer.unquote(expr);
+        expr = QuotedStringTokenizer.unquote(expr);
         while(true) {
             Label l = labels.get(expr);
             if(l!=null)

File: core/src/main/java/jenkins/plugins/DetachedPluginsUtil.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import jenkins.util.java.JavaUtils;
+import org.apache.commons.io.IOUtils;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
@@ -144,7 +145,7 @@ public static boolean isDetachedPlugin(@NonNull String pluginId) {
     }
 
     private static Stream<String> configLines(InputStream is) throws IOException {
-        return org.apache.commons.io.IOUtils.readLines(is, StandardCharsets.UTF_8).stream().filter(line -> !line.matches("#.*|\\s*"));
+        return IOUtils.readLines(is, StandardCharsets.UTF_8).stream().filter(line -> !line.matches("#.*|\\s*"));
     }
 
     /**

File: core/src/main/java/jenkins/security/ConfidentialStore.java
Patch:
@@ -4,6 +4,7 @@
 import edu.umd.cs.findbugs.annotations.NonNull;
 import hudson.Extension;
 import hudson.Lookup;
+import hudson.Util;
 import hudson.init.InitMilestone;
 import hudson.util.Secret;
 import java.io.IOException;
@@ -129,14 +130,14 @@ void clear() {
 
         @Override
         protected void store(ConfidentialKey key, byte[] payload) throws IOException {
-            LOGGER.fine(() -> "storing " + key.getId() + " " + hudson.Util.getDigestOf(hudson.Util.toHexString(payload)));
+            LOGGER.fine(() -> "storing " + key.getId() + " " + Util.getDigestOf(Util.toHexString(payload)));
             data.put(key.getId(), payload);
         }
 
         @Override
         protected byte[] load(ConfidentialKey key) throws IOException {
             byte[] payload = data.get(key.getId());
-            LOGGER.fine(() -> "loading " + key.getId() + " " + (payload != null ? hudson.Util.getDigestOf(hudson.Util.toHexString(payload)) : "null"));
+            LOGGER.fine(() -> "loading " + key.getId() + " " + (payload != null ? Util.getDigestOf(Util.toHexString(payload)) : "null"));
             return payload;
         }
 

File: core/src/main/java/jenkins/slaves/StandardOutputSwapper.java
Patch:
@@ -14,6 +14,7 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import jenkins.security.MasterToSlaveCallable;
@@ -64,7 +65,7 @@ private void _swap(StandardOutputStream stdout) throws Exception {
             }
         }
 
-        private void swap(StandardOutputStream stdout) throws IOException, NoSuchMethodException, InstantiationException, IllegalAccessException, java.lang.reflect.InvocationTargetException, UnsatisfiedLinkError {
+        private void swap(StandardOutputStream stdout) throws IOException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, UnsatisfiedLinkError {
             // duplicate the OS file descriptor and create FileOutputStream around it
             int out = GNUCLibrary.LIBC.dup(1);
             if (out<0)      throw new IOException("Failed to dup(1)");

File: core/src/test/java/hudson/PluginWrapperTest.java
Patch:
@@ -11,6 +11,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import hudson.remoting.Callable;
 import hudson.remoting.Which;
 import java.io.File;
 import java.io.IOException;
@@ -120,7 +121,7 @@ private void assertInjectingJarsWorks(ClassLoader cl) throws Exception {
         Enumeration<?> e1 = pw.classLoader.getResources("META-INF/MANIFEST.MF");
         int e1size = countEnumerationElements(e1);
         // insert the jar with the resource (lets pick on remoting as it should be very stable)
-        File jarFile = Which.jarFile(hudson.remoting.Callable.class);
+        File jarFile = Which.jarFile(Callable.class);
         pw.injectJarsToClasspath(jarFile);
         Enumeration<?> e2 = pw.classLoader.getResources("META-INF/MANIFEST.MF");
         int e2size = countEnumerationElements(e2);

File: core/src/test/java/jenkins/triggers/SCMTriggerItemTest.java
Patch:
@@ -4,6 +4,7 @@
 import static org.mockito.Mockito.verify;
 
 import hudson.model.Item;
+import hudson.model.SCMedItem;
 import hudson.model.TaskListener;
 import jenkins.scm.SCMDecisionHandler;
 import org.junit.Test;
@@ -25,7 +26,7 @@ public void noVetoDelegatesPollingToAnSCMedItem() {
         // given
         PowerMockito.mockStatic(SCMDecisionHandler.class);
         PowerMockito.when(SCMDecisionHandler.firstShouldPollVeto(any(Item.class))).thenReturn(null);
-        hudson.model.SCMedItem scMedItem = Mockito.mock(hudson.model.SCMedItem.class);
+        SCMedItem scMedItem = Mockito.mock(SCMedItem.class);
         TaskListener listener = Mockito.mock(TaskListener.class);
 
         // when

File: test/src/test/java/hudson/cli/CLIActionTest.java
Patch:
@@ -46,6 +46,7 @@
 import org.jvnet.hudson.test.LoggerRule;
 import org.jvnet.hudson.test.MockAuthorizationStrategy;
 import org.jvnet.hudson.test.TestExtension;
+import org.jvnet.hudson.test.recipes.PresetData;
 import org.kohsuke.args4j.Option;
 
 public class CLIActionTest {
@@ -59,7 +60,7 @@ public class CLIActionTest {
     public LoggerRule logging = new LoggerRule();
 
     @Test
-    @org.jvnet.hudson.test.recipes.PresetData(org.jvnet.hudson.test.recipes.PresetData.DataSet.NO_ANONYMOUS_READACCESS)
+    @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS)
     @Issue("SECURITY-192")
     public void serveCliActionToAnonymousUserWithoutPermissions() throws Exception {
         JenkinsRule.WebClient wc = j.createWebClient();

File: test/src/test/java/hudson/model/DownloadServiceTest.java
Patch:
@@ -4,6 +4,7 @@
 import static org.junit.Assert.assertNotNull;
 
 import hudson.model.DownloadService.Downloadable;
+import hudson.tasks.Ant.AntInstaller;
 import hudson.tasks.Maven;
 import hudson.tools.DownloadFromUrlInstaller;
 import hudson.tools.ToolInstallation;
@@ -68,7 +69,7 @@ public void testReduceFunctionWithAntJsons() throws Exception {
         jsonObjectList.add(json1);
         jsonObjectList.add(json2);
         jsonObjectList.add(json3);
-        Downloadable downloadable = new hudson.tasks.Ant.AntInstaller.DescriptorImpl().createDownloadable();
+        Downloadable downloadable = new AntInstaller.DescriptorImpl().createDownloadable();
         JSONObject reducedJson = downloadable.reduce(jsonObjectList);
         URL expectedResult = DownloadServiceTest.class.getResource("hudson.tasks.Ant.AntInstallerResult.json");
         JSONObject expectedResultJson = JSONObject.fromObject(DownloadService.loadJSON(expectedResult));

File: test/src/test/java/hudson/model/TimeZonePropertyTest.java
Patch:
@@ -4,6 +4,7 @@
 import static org.junit.Assert.assertNull;
 
 import java.io.IOException;
+import java.util.Collections;
 import java.util.TimeZone;
 import org.junit.Rule;
 import org.junit.Test;
@@ -27,7 +28,7 @@ public void testEnsureTimeZoneIsNullByDefault() {
     public void testEnsureInvalidTimeZoneDefaultsToNull() throws IOException {
         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
 
-        User user = User.get("John Smith", true, java.util.Collections.emptyMap());
+        User user = User.get("John Smith", true, Collections.emptyMap());
         SecurityContextHolder.getContext().setAuthentication(user.impersonate2());
 
         TimeZoneProperty tzp = new TimeZoneProperty("InvalidTimeZoneName");
@@ -41,7 +42,7 @@ public void testSetUserDefinedTimeZone() throws IOException {
         String timeZone = TimeZone.getDefault().getID();
         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
 
-        User user = User.get("John Smith", true, java.util.Collections.emptyMap());
+        User user = User.get("John Smith", true, Collections.emptyMap());
         SecurityContextHolder.getContext().setAuthentication(user.impersonate2());
 
         assertNull(TimeZoneProperty.forCurrentUser());

File: test/src/test/java/hudson/model/queue/MaintainCanTakeStrengtheningTest.java
Patch:
@@ -9,6 +9,7 @@
 import hudson.model.Node;
 import hudson.model.Queue;
 import hudson.slaves.DumbSlave;
+import hudson.slaves.NodeProperty;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import org.junit.Rule;
@@ -65,7 +66,7 @@ public void testExceptionOnNodeProperty() throws Exception {
      * A node property throwing an exception to cause the canTake method fails.
      */
     @TestExtension
-    public static class FaultyNodeProperty extends hudson.slaves.NodeProperty<Node> {
+    public static class FaultyNodeProperty extends NodeProperty<Node> {
         @Override
         public CauseOfBlockage canTake(Queue.BuildableItem item) {
             throw new ArrayIndexOutOfBoundsException();

File: test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java
Patch:
@@ -55,6 +55,7 @@
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Base64;
 import java.util.Collections;
 import java.util.List;
 import jenkins.security.ApiTokenProperty;
@@ -186,7 +187,7 @@ public void fullNameCollisionToken() throws Exception {
 
     private static String basicHeader(String user, String pass) {
         String str = user +':' + pass;
-        String auth = java.util.Base64.getEncoder().encodeToString(str.getBytes(StandardCharsets.UTF_8));
+        String auth = Base64.getEncoder().encodeToString(str.getBytes(StandardCharsets.UTF_8));
         return "Basic " + auth;
     }
 

File: test/src/test/java/hudson/slaves/AgentInboundUrlTest.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.logging.Level;
 import jenkins.model.Jenkins;
 import org.dom4j.Document;
+import org.dom4j.Element;
 import org.dom4j.io.DOMReader;
 import org.junit.Rule;
 import org.junit.Test;
@@ -78,7 +79,7 @@ public void testInboundAgentUrlOverride() throws Exception {
         XmlPage jnlp = (XmlPage) agent.goTo("computer/test/jenkins-agent.jnlp", "application/x-java-jnlp-file");
         Document dom = new DOMReader().read(jnlp.getXmlDocument());
         Object arg = dom.selectSingleNode("//application-desc/argument[3]/following-sibling::argument[1]");
-        String val = ((org.dom4j.Element) arg).getText();
+        String val = ((Element) arg).getText();
         assertEquals(customInboundUrl, val);
     }
 

File: test/src/test/java/hudson/slaves/JNLPLauncherTest.java
Patch:
@@ -49,6 +49,7 @@
 import java.util.logging.Level;
 import jenkins.security.SlaveToMasterCallable;
 import jenkins.slaves.RemotingWorkDirSettings;
+import netx.jnlp.runtime.JNLPRuntime;
 import org.junit.Assume;
 import org.junit.Rule;
 import org.junit.Test;
@@ -207,7 +208,7 @@ private static class ComputerLauncherFilterImpl extends ComputerLauncherFilter {
     private ArgumentListBuilder buildJnlpArgs(Computer c) throws Exception {
         ArgumentListBuilder args = new ArgumentListBuilder();
         args.add(new File(new File(System.getProperty("java.home")),"bin/java").getPath(),"-jar");
-        args.add(Which.jarFile(netx.jnlp.runtime.JNLPRuntime.class).getAbsolutePath());
+        args.add(Which.jarFile(JNLPRuntime.class).getAbsolutePath());
         args.add("-headless","-basedir");
         args.add(j.createTmpDir());
         args.add("-nosecurity","-jnlp", j.getURL() + "computer/"+c.getName()+"/jenkins-agent.jnlp");

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -714,7 +714,7 @@ public void enable() throws IOException {
      * Disables this plugin next time Jenkins runs. As it doesn't check anything, it's recommended to use the method
      * {@link #disable(PluginDisableStrategy)}
      */
-    @Deprecated //see https://issues.jenkins-ci.org/browse/JENKINS-27177
+    @Deprecated //see https://issues.jenkins.io/browse/JENKINS-27177
     public void disable() throws IOException {
         disableWithoutCheck();
     }

File: core/src/main/java/hudson/Proc.java
Patch:
@@ -510,7 +510,7 @@ public OutputStream getStdin() {
     /**
     * An instance of {@link Proc}, which has an internal workaround for JENKINS-23271.
     * It presumes that the instance of the object is guaranteed to be used after the {@link Proc#join()} call.
-    * See <a href="https://jenkins-ci.org/issue/23271">JENKINS-23271</a>
+    * See <a href="https://issues.jenkins.io/browse/JENKINS-23271">JENKINS-23271</a>
     * @author Oleg Nenashev
     */
     @Restricted(NoExternalUse.class)

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -124,7 +124,7 @@ public class WebAppMain implements ServletContextListener {
      * Exposes access from RingBufferLogHandler.DEFAULT_RING_BUFFER_SIZE to WebAppMain.
      * Written for the requirements of JENKINS-50669
      * @return int This returns DEFAULT_RING_BUFFER_SIZE
-     * @see <a href="https://issues.jenkins-ci.org/browse/JENKINS-50669">JENKINS-50669</a>
+     * @see <a href="https://issues.jenkins.io/browse/JENKINS-50669">JENKINS-50669</a>
      * @since 2.259
      */
     public static int getDefaultRingBufferSize() {

File: core/src/main/java/hudson/model/FileParameterValue.java
Patch:
@@ -194,7 +194,7 @@ public int hashCode() {
 
 	/**
 	 * Compares file parameters (existing files will be considered as different).
-	 * @since 1.586 Function has been modified in order to avoid <a href="https://jenkins-ci.org/issue/19017">JENKINS-19017</a> issue (wrong merge of builds in the queue).
+	 * @since 1.586 Function has been modified in order to avoid <a href="https://issues.jenkins.io/browse/JENKINS-19017">JENKINS-19017</a> issue (wrong merge of builds in the queue).
 	 */
 	@Override
 	public boolean equals(Object obj) {

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -1257,7 +1257,7 @@ public synchronized void save() throws IOException {
         FingerprintStorage fileFingerprintStorage = FingerprintStorage.getFileFingerprintStorage();
 
         // Implementations are expected to invoke SaveableListener on their own if relevant
-        // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543
+        // TODO: Consider improving Saveable Listener API: https://issues.jenkins.io/browse/JENKINS-62543
         configuredFingerprintStorage.save(this);
 
         // In the case that external fingerprint storage is configured, there may be some fingerprints in memory that

File: core/src/main/java/hudson/model/Node.java
Patch:
@@ -98,7 +98,7 @@ public abstract class Node extends AbstractModelObject implements Reconfigurable
 
     private static final Logger LOGGER = Logger.getLogger(Node.class.getName());
 
-    /** @see <a href="https://issues.jenkins-ci.org/browse/JENKINS-46652">JENKINS-46652</a> */
+    /** @see <a href="https://issues.jenkins.io/browse/JENKINS-46652">JENKINS-46652</a> */
     @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* not final */ boolean SKIP_BUILD_CHECK_ON_FLYWEIGHTS = SystemProperties.getBoolean(Node.class.getName() + ".SKIP_BUILD_CHECK_ON_FLYWEIGHTS", true);
 

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -111,7 +111,7 @@ public ParametersAction(@NonNull List<ParameterValue> parameters) {
      * The additional safe parameters should be only those considered safe to override the environment
      * and what is declared in the project config in addition to those specified by the user in
      * {@link #SAFE_PARAMETERS_SYSTEM_PROPERTY_NAME}.
-     * See <a href="https://issues.jenkins-ci.org/browse/SECURITY-170">SECURITY-170</a>
+     * See <a href="https://issues.jenkins.io/browse/SECURITY-170">SECURITY-170</a>
      *
      * @param parameters the parameters
      * @param additionalSafeParameters additional safe parameters

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -1683,8 +1683,8 @@ public void maintain() {
                     // of getCauseOfBlockageForItem(p) will become a bottleneck before updateSnapshot() will. Additionally
                     // since the snapshot itself only ever has at most one reference originating outside of the stack
                     // it should remain in the eden space and thus be cheap to GC.
-                    // See https://jenkins-ci.org/issue/27708?focusedCommentId=225819&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-225819
-                    // or https://jenkins-ci.org/issue/27708?focusedCommentId=225906&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-225906
+                    // See https://issues.jenkins.io/browse/JENKINS-27708?focusedCommentId=225819&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-225819
+                    // or https://issues.jenkins.io/browse/JENKINS-27708?focusedCommentId=225906&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-225906
                     // for alternative fixes of this issue.
                     updateSnapshot();
                 }

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -1613,7 +1613,7 @@ public synchronized void deleteArtifacts() throws IOException {
      */
     public void delete() throws IOException {
         synchronized (this) {
-            // Avoid concurrent delete. See https://issues.jenkins-ci.org/browse/JENKINS-61687
+            // Avoid concurrent delete. See https://issues.jenkins.io/browse/JENKINS-61687
             if (isPendingDelete) {
                 return;
             }

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -139,7 +139,7 @@ public class User extends AbstractModelObject implements AccessControlled, Descr
      * Unfortunately this infringed some legitimate use cases of creating Jenkins-local users for
      * automation purposes. This escape hatch switch can be enabled to resurrect that behaviour.
      * <p>
-     * @see <a href="https://issues.jenkins-ci.org/browse/JENKINS-22346">JENKINS-22346</a>.
+     * @see <a href="https://issues.jenkins.io/browse/JENKINS-22346">JENKINS-22346</a>.
      */
     @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean ALLOW_NON_EXISTENT_USER_TO_LOGIN = SystemProperties.getBoolean(User.class.getName() + ".allowNonExistentUserToLogin");

File: core/src/main/java/hudson/slaves/JNLPLauncher.java
Patch:
@@ -267,7 +267,7 @@ public boolean isJavaWebStartSupported() {
      * This enables using a private address for inbound tcp agents,
      * separate from Jenkins root URL.
      *
-     * @see <a href="https://issues.jenkins-ci.org/browse/JENKINS-63222">JENKINS-63222</a>
+     * @see <a href="https://issues.jenkins.io/browse/JENKINS-63222">JENKINS-63222</a>
      */
     @Restricted(NoExternalUse.class)
     public static String getInboundAgentUrl() {

File: core/src/main/java/hudson/util/ArgumentListBuilder.java
Patch:
@@ -244,7 +244,7 @@ public ArgumentListBuilder addKeyValuePairsFromPropertyString(String prefix, Str
      *
      * @param original Resolution will be delegated to this resolver. Resolved
      *                 values will be escaped afterwards.
-     * @see <a href="https://jenkins-ci.org/issue/10539">JENKINS-10539</a>
+     * @see <a href="https://issues.jenkins.io/browse/JENKINS-10539">JENKINS-10539</a>
      */
     private static VariableResolver<String> propertiesGeneratingResolver(final VariableResolver<String> original) {
 

File: core/src/main/java/hudson/util/ClassLoaderSanityThreadFactory.java
Patch:
@@ -9,7 +9,7 @@
  *   in a context where they would receive a customized {@link Thread#contextClassLoader} that was never meant to be used.
  *
  *  Commonly this is a problem for Groovy use, where this may result in memory leaks.
- *  @see <a href="https://issues.jenkins-ci.org/browse/JENKINS-49206">JENKINS-49206</a>
+ *  @see <a href="https://issues.jenkins.io/browse/JENKINS-49206">JENKINS-49206</a>
  * @since 2.105
  */
 public class ClassLoaderSanityThreadFactory implements ThreadFactory {

File: core/src/main/java/hudson/util/FileChannelWriter.java
Patch:
@@ -23,7 +23,7 @@
  * <p>The goal using this is to reduce as much as we can the likeliness to see zero-length files be created in place
  * of the original ones.</p>
  *
- * @see <a href="https://issues.jenkins-ci.org/browse/JENKINS-34855">JENKINS-34855</a>
+ * @see <a href="https://issues.jenkins.io/browse/JENKINS-34855">JENKINS-34855</a>
  * @see <a href="https://github.com/jenkinsci/jenkins/pull/2548">PR-2548</a>
  */
 @Restricted(NoExternalUse.class)

File: core/src/main/java/hudson/util/RingBufferLogHandler.java
Patch:
@@ -56,7 +56,7 @@ public RingBufferLogHandler(int ringSize) {
 
     /**
      * @return int DEFAULT_RING_BUFFER_SIZE
-     * @see <a href="https://issues.jenkins-ci.org/browse/JENKINS-50669">JENKINS-50669</a>
+     * @see <a href="https://issues.jenkins.io/browse/JENKINS-50669">JENKINS-50669</a>
      * @since 2.259
      */
     public static int getDefaultRingBufferSize() {

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -145,7 +145,7 @@ public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder
      * @param nullOut whether to perform this special behavior;
      *                false to use the stock XStream behavior of leaving unmentioned {@code root} fields untouched
      * @see XmlFile#unmarshalNullingOut
-     * @see <a href="https://issues.jenkins-ci.org/browse/JENKINS-21017">JENKINS-21017</a>
+     * @see <a href="https://issues.jenkins.io/browse/JENKINS-21017">JENKINS-21017</a>
      * @since 2.99
      */
     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder, boolean nullOut) {

File: core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java
Patch:
@@ -136,7 +136,7 @@ public void save(Fingerprint fp) throws IOException {
             save(fp, file);
         }
         // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.
-        //  https://issues.jenkins-ci.org/browse/JENKINS-62543
+        //  https://issues.jenkins.io/browse/JENKINS-62543
         SaveableListener.fireOnChange(fp, getConfigFile(file));
     }
 
@@ -164,7 +164,7 @@ public static void save(Fingerprint fp, File file) throws IOException {
                     w.println("</number>");
                     w.println("  </original>");
                 }
-                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808
+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins.io/browse/JENKINS-25808
                 w.print("  <md5sum>");
                 w.print(fp.getHashString());
                 w.println("</md5sum>");

File: core/src/main/java/jenkins/model/item_category/ItemCategory.java
Patch:
@@ -45,7 +45,7 @@ public abstract class ItemCategory implements ExtensionPoint {
      * This field indicates how much non-default categories are required in
      * order to start showing them in Jenkins.
      * This field is restricted for the internal use only, because all other changes would cause binary compatibility issues.
-     * See <a href="https://jenkins-ci.org/issue/36593">JENKINS-36593</a> for more info.
+     * See <a href="https://issues.jenkins.io/browse/JENKINS-36593">JENKINS-36593</a> for more info.
      */
     @Restricted(NoExternalUse.class)
     @SuppressFBWarnings("MS_SHOULD_BE_FINAL")

File: core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java
Patch:
@@ -151,8 +151,9 @@ public void beforeChannel(@NonNull JnlpConnectionState event) {
         final SlaveComputer computer = state.getNode();
         final OutputStream log = computer.openLogFile();
         state.setLog(log);
-        PrintWriter logw = new PrintWriter(log, true);
-        logw.println("Inbound agent connected from " + event.getRemoteEndpointDescription());
+        try (PrintWriter logw = new PrintWriter(log, true)) {
+            logw.println("Inbound agent connected from " + event.getRemoteEndpointDescription());
+        }
         for (ChannelConfigurator cc : ChannelConfigurator.all()) {
             cc.onChannelBuilding(event.getChannelBuilder(), computer);
         }

File: core/src/main/java/org/jenkins/ui/icon/IconSet.java
Patch:
@@ -428,6 +428,7 @@ private static void initializeSVGs() {
         images.add("folder-delete");
         images.add("folder");
         images.add("gear");
+        images.add("gear2");
         images.add("go-down");
         images.add("go-top");
         images.add("go-up");

File: core/src/main/java/hudson/util/BootFailure.java
Patch:
@@ -10,6 +10,7 @@
 import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
+import java.text.DateFormat;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
@@ -62,9 +63,10 @@ protected List<Date> loadAttempts(File home) {
                 if (f.exists()) {
                     try (BufferedReader failureFileReader = new BufferedReader(new FileReader(f))) {
                         String line;
+                        DateFormat df = DateFormat.getDateInstance();
                         while ((line=failureFileReader.readLine())!=null) {
                             try {
-                                dates.add(new Date(line));
+                                dates.add(df.parse(line));
                             } catch (Exception e) {
                                 // ignore any parse error
                             }

File: core/src/main/java/hudson/util/SecretRewriter.java
Patch:
@@ -54,7 +54,7 @@ public SecretRewriter(File backupDirectory) throws GeneralSecurityException {
         this();
     }
 
-    private String tryRewrite(String s) throws IOException, InvalidKeyException {
+    private String tryRewrite(String s) throws InvalidKeyException {
         if (s.length()<24)
             return s;   // Encrypting "" in Secret produces 24-letter characters, so this must be the minimum length
         if (!isBase64(s))
@@ -82,7 +82,7 @@ public boolean rewrite(File f, File backup) throws InvalidKeyException, IOExcept
 
     public boolean rewrite(File f) throws InvalidKeyException, IOException {
 
-        AtomicFileWriter w = new AtomicFileWriter(f, "UTF-8");
+        AtomicFileWriter w = new AtomicFileWriter(f.toPath(), StandardCharsets.UTF_8);
         try {
             boolean modified = false; // did we actually change anything?
             try (PrintWriter out = new PrintWriter(new BufferedWriter(w));

File: core/src/main/java/hudson/EnvVars.java
Patch:
@@ -24,7 +24,6 @@
 package hudson;
 
 import hudson.remoting.VirtualChannel;
-import hudson.util.CaseInsensitiveComparator;
 import hudson.util.CyclicGraphDetector;
 import hudson.util.CyclicGraphDetector.CycleDetectedException;
 import hudson.util.VariableResolver;
@@ -105,7 +104,7 @@ public void setPlatform(@NonNull Platform platform) {
         this.platform = platform;
     }
     public EnvVars() {
-        super(CaseInsensitiveComparator.INSTANCE);
+        super(String.CASE_INSENSITIVE_ORDER);
     }
 
     public EnvVars(@NonNull Map<String,String> m) {

File: core/src/main/java/hudson/model/ListView.java
Patch:
@@ -32,7 +32,6 @@
 import hudson.search.SearchIndexBuilder;
 import hudson.security.ACL;
 import hudson.security.ACLContext;
-import hudson.util.CaseInsensitiveComparator;
 import hudson.util.DescribableList;
 import hudson.util.FormValidation;
 import hudson.util.HttpResponses;
@@ -86,7 +85,7 @@ public class ListView extends View implements DirectlyModifiableView {
      * List of job names. This is what gets serialized.
      */
     @GuardedBy("this")
-    /*package*/ /*almost-final*/ SortedSet<String> jobNames = new TreeSet<>(CaseInsensitiveComparator.INSTANCE);
+    /*package*/ /*almost-final*/ SortedSet<String> jobNames = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
     
     private DescribableList<ViewJobFilter, Descriptor<ViewJobFilter>> jobFilters;
 
@@ -151,7 +150,7 @@ protected Object readResolve() {
         }
         synchronized(this) {
             if (jobNames == null) {
-                jobNames = new TreeSet<>(CaseInsensitiveComparator.INSTANCE);
+                jobNames = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
             }
         }
         initColumns();

File: core/src/main/java/hudson/util/CaseInsensitiveComparator.java
Patch:
@@ -29,8 +29,10 @@
 /**
  * Case-insensitive string comparator.
  *
+ * @deprecated use {@link String#CASE_INSENSITIVE_ORDER} directly
  * @author Kohsuke Kawaguchi
  */
+@Deprecated
 public final class CaseInsensitiveComparator implements Comparator<String>, Serializable {
     public static final Comparator<String> INSTANCE = new CaseInsensitiveComparator();
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -173,7 +173,6 @@
 import hudson.triggers.Trigger;
 import hudson.triggers.TriggerDescriptor;
 import hudson.util.AdministrativeError;
-import hudson.util.CaseInsensitiveComparator;
 import hudson.util.ClockDifference;
 import hudson.util.CopyOnWriteList;
 import hudson.util.CopyOnWriteMap;
@@ -471,7 +470,7 @@ public class Jenkins extends AbstractCIBase implements DirectlyModifiableTopLeve
     /**
      * All {@link Item}s keyed by their {@link Item#getName() name}s.
      */
-    /*package*/ final transient Map<String,TopLevelItem> items = new CopyOnWriteMap.Tree<>(CaseInsensitiveComparator.INSTANCE);
+    /*package*/ final transient Map<String,TopLevelItem> items = new CopyOnWriteMap.Tree<>(String.CASE_INSENSITIVE_ORDER);
 
     /**
      * The sole instance.

File: core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java
Patch:
@@ -62,10 +62,9 @@ public AuthenticationProcessingFilter2(String authenticationGatewayUrl) {
     @Override
     protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult) throws IOException, ServletException {
         if (SystemProperties.getInteger(SecurityRealm.class.getName() + ".sessionFixationProtectionMode", 1) == 2) {
-            // This is the default session fixation prevention fix.
-            // While use of SessionFixationProtectionStrategy would be the canonical Spring Security approach, it seems less compatible with some security realms.
+            // While use of SessionFixationProtectionStrategy is the canonical Spring Security approach, it may not be compatible with some security realms, so offer this alternative
             request.getSession().invalidate();
-            HttpSession newSession = request.getSession(true);
+            request.getSession(true);
         }
         super.successfulAuthentication(request, response, chain, authResult);
         HttpSession newSession = request.getSession();

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -596,7 +596,7 @@ public Filter createFilter(FilterConfig filterConfig) {
             AuthenticationProcessingFilter2 apf = new AuthenticationProcessingFilter2(getAuthenticationGatewayUrl());
             apf.setAuthenticationManager(sc.manager2);
             if (SystemProperties.getInteger(SecurityRealm.class.getName() + ".sessionFixationProtectionMode", 1) == 1) {
-                // Optionally use the 'canonical' protection from Spring Security; see AuthenticationProcessingFilter2#successfulAuthentication for default
+                // By default, use the 'canonical' protection from Spring Security; see AuthenticationProcessingFilter2#successfulAuthentication for alternative
                 apf.setSessionAuthenticationStrategy(new SessionFixationProtectionStrategy());
             }
             apf.setRememberMeServices(sc.rememberMe2);

File: core/src/main/java/hudson/util/FormFieldValidator.java
Patch:
@@ -567,8 +567,8 @@ public void error(String string) {
                 public void validate(File fexe) {
                     try {
                         self.checkExecutable(fexe);
-                    } catch (IOException | ServletException ioe) {
-                        exceptions[0] = ioe;
+                    } catch (IOException | ServletException ex) {
+                        exceptions[0] = ex;
                     }
                 }
             });

File: core/src/main/java/org/acegisecurity/userdetails/User.java
Patch:
@@ -43,7 +43,7 @@ public class User implements UserDetails {
     private GrantedAuthority[] authorities;
 
     public User(String username, String password, boolean enabled, GrantedAuthority[] authorities) {
-        this(username, password, true, true, true, true, authorities);
+        this(username, password, enabled, true, true, true, authorities);
     }
 
     public User(String username, String password, boolean enabled, boolean accountNonExpired, boolean credentialsNonExpired, GrantedAuthority[] authorities) {

File: cli/src/main/java/hudson/util/QuotedStringTokenizer.java
Patch:
@@ -472,7 +472,7 @@ public static String unquote(String s)
                                 (convertHexDigit((byte)s.charAt(i++))<<24)+
                                 (convertHexDigit((byte)s.charAt(i++))<<16)+
                                 (convertHexDigit((byte)s.charAt(i++))<<8)+
-                                (convertHexDigit((byte)s.charAt(i++)))
+                                convertHexDigit((byte)s.charAt(i++))
                                 )
                         );
                         break;

File: core/src/main/java/hudson/ExtensionList.java
Patch:
@@ -246,7 +246,7 @@ private synchronized boolean removeSync(Object o) {
         return removed;
     }
 
-    private <T> boolean removeComponent(Collection<ExtensionComponent<T>> collection, Object t) {
+    private boolean removeComponent(Collection<ExtensionComponent<T>> collection, Object t) {
         for (ExtensionComponent<T> c : collection) {
             if (c.getInstance().equals(t)) {
                 return collection.remove(c);

File: core/src/main/java/hudson/ExtensionListView.java
Patch:
@@ -144,7 +144,7 @@ public void clear() {
             }
 
             @Override
-            public <T> T[] toArray(T[] array) {
+            public <X> X[] toArray(X[] array) {
                 return storage().toArray(array);
             }
 

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -2023,6 +2023,7 @@ public FilePath[] list(final String includes) throws IOException, InterruptedExc
      * List up files in this directory that matches the given Ant-style filter.
      *
      * @param includes
+     *      See {@link FileSet} for the syntax. String like "foo/*.zip" or "foo/*&#42;/*.xml"
      * @param excludes
      *      See {@link FileSet} for the syntax. String like "foo/*.zip" or "foo/*&#42;/*.xml"
      * @return
@@ -2038,6 +2039,7 @@ public FilePath[] list(final String includes, final String excludes) throws IOEx
      * List up files in this directory that matches the given Ant-style filter.
      *
      * @param includes
+     *      See {@link FileSet} for the syntax. String like "foo/*.zip" or "foo/*&#42;/*.xml"
      * @param excludes
      *      See {@link FileSet} for the syntax. String like "foo/*.zip" or "foo/*&#42;/*.xml"
      * @param defaultExcludes whether to use the ant default excludes

File: core/src/main/java/hudson/PluginStrategy.java
Patch:
@@ -70,8 +70,6 @@ PluginWrapper createPluginWrapper(File archive)
 	/**
 	 * Optionally start services provided by the plugin. Should be called
 	 * when all plugins are loaded.
-	 * 
-	 * @param plugin
 	 */
 	void initializeComponents(PluginWrapper plugin);
 

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -721,7 +721,6 @@ public void disable() throws IOException {
 
     /**
      * Disable a plugin wihout checking any dependency. Only add the disable file.
-     * @throws IOException
      */
     private void disableWithoutCheck() throws IOException {
         try (OutputStream os = Files.newOutputStream(disableFile.toPath())) {

File: core/src/main/java/hudson/ProxyConfiguration.java
Patch:
@@ -344,7 +344,6 @@ public static InputStream getInputStream(URL url) throws IOException {
     /**
      * If the first URL we try to access with a HTTP proxy is HTTPS then the authentication cache will not have been
      * pre-populated, so we try to access at least one HTTP URL before the very first HTTPS url.
-     * @param proxy
      * @param url the actual URL being opened.
      */
     private void jenkins48775workaround(Proxy proxy, URL url) {

File: core/src/main/java/hudson/cli/CliTransportAuthenticator.java
Patch:
@@ -30,7 +30,6 @@ public abstract class CliTransportAuthenticator implements ExtensionPoint {
      *      Protocol identifier that {@link #supportsProtocol(String)} returned true.
      * @param channel
      *      Communication channel to the client.
-     * @param con
      */
     public abstract void authenticate(String protocol, Channel channel, Connection con);
 

File: core/src/main/java/hudson/cli/declarative/MethodBinder.java
Patch:
@@ -52,9 +52,6 @@ class MethodBinder {
     private final Method method;
     private final Object[] arguments;
 
-    /**
-     * @param method
-     */
     MethodBinder(Method method, CLICommand command, CmdLineParser parser) {
         this.method = method;
         this.command = command;

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -187,8 +187,6 @@ public String getDisplayNameOrNull() {
      * This method exists so that the Job configuration pages can use 
      * getDisplayNameOrNull so that nothing is shown in the display name text
      * box if the display name is not set.
-     * @param displayName
-     * @throws IOException
      */
     public void setDisplayNameOrNull(String displayName) throws IOException {
         setDisplayName(displayName);

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1834,7 +1834,7 @@ protected final <T extends Describable<T>> List<T> buildDescribable(StaplerReque
     public DirectoryBrowserSupport doWs( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException, InterruptedException {
         checkPermission(Item.WORKSPACE);
         FilePath ws = getSomeWorkspace();
-        if ((ws == null) || (!ws.exists())) {
+        if ((ws == null) || !ws.exists()) {
             // if there's no workspace, report a nice error message
             // Would be good if when asked for *plain*, do something else!
             // (E.g. return 404, or send empty doc.)

File: core/src/main/java/hudson/model/Actionable.java
Patch:
@@ -319,7 +319,6 @@ public Action getAction(int index) {
     /**
      * Gets the action (first instance to be found) of a specified type that contributed to this build.
      *
-     * @param type
      * @return The action or {@code null} if no such actions exist.
      * @see #getActions(Class)
      */

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -1506,7 +1506,7 @@ public void doConfigSubmit( StaplerRequest req, StaplerResponse rsp ) throws IOE
             throw new ServletException("No such node " + nodeName);
         }
 
-        if ((!proposedName.equals(nodeName))
+        if (!proposedName.equals(nodeName)
                 && Jenkins.get().getNode(proposedName) != null) {
             throw new FormException(Messages.ComputerSet_SlaveAlreadyExists(proposedName), "name");
         }

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -625,7 +625,7 @@ public T newInstance(@Nullable StaplerRequest req, @NonNull JSONObject formData)
     private static class NewInstanceBindInterceptor extends BindInterceptor {
 
         private final BindInterceptor oldInterceptor;
-        private final Map<JSONObject,Boolean> processed = new IdentityHashMap<>();
+        private final IdentityHashMap<JSONObject,Boolean> processed = new IdentityHashMap<>();
 
         NewInstanceBindInterceptor(BindInterceptor oldInterceptor) {
             LOGGER.log(Level.FINER, "new interceptor delegating to {0}", oldInterceptor);

File: core/src/main/java/hudson/model/FileParameterValue.java
Patch:
@@ -229,9 +229,6 @@ public String toString() {
 
     /**
      * Serve this file parameter in response to a {@link StaplerRequest}.
-     *
-     * @param request
-     * @param response
      */
     public DirectoryBrowserSupport doDynamic(StaplerRequest request, StaplerResponse response) {
         AbstractBuild build = (AbstractBuild)request.findAncestor(AbstractBuild.class).getObject();

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -824,7 +824,7 @@ public Object unmarshal(HierarchicalStreamReader reader, final UnmarshallingCont
                               <end>1479</end>
                             </range>
                      */
-                    return new RangeSet((List<Range>)(collectionConv.unmarshal(reader,context)));
+                    return new RangeSet((List<Range>)collectionConv.unmarshal(reader,context));
                 } else {
                     return RangeSet.fromString(reader.getValue(),true);
                 }

File: core/src/main/java/hudson/model/ListView.java
Patch:
@@ -494,7 +494,6 @@ public synchronized void setJobNames(Set<String> jobNames) {
 
     /**
      * Deprecated see, {@link StatusFilter}
-     * @param statusFilter
      */
     @Deprecated
     @DataBoundSetter

File: core/src/main/java/hudson/model/Node.java
Patch:
@@ -309,7 +309,6 @@ public Set<LabelAtom> getAssignedLabels() {
      * Return all the labels assigned dynamically to this node.
      * This calls all the LabelFinder implementations with the node converts
      * the results into Labels.
-     * @return HashSet<Label>.
      */
     private HashSet<LabelAtom> getDynamicLabels() {
         HashSet<LabelAtom> result = new HashSet<>();

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -611,7 +611,7 @@ public WaitingItem schedule(Task p, int quietPeriod, List<Action> actions) {
                     shouldScheduleItem |= action.shouldSchedule(actions);
                 }
                 for (QueueAction action : Util.filter(actions, QueueAction.class)) {
-                    shouldScheduleItem |= action.shouldSchedule((new ArrayList<>(item.getAllActions())));
+                    shouldScheduleItem |= action.shouldSchedule(new ArrayList<>(item.getAllActions()));
                 }
                 if (!shouldScheduleItem) {
                     duplicatesInQueue.add(item);
@@ -2098,7 +2098,6 @@ public abstract static class Item extends Actionable {
          * Unique ID (per master) that tracks the {@link Task} as it moves through different stages
          * in the queue (each represented by different subtypes of {@link Item} and into any subsequent
          * {@link Run} instance (see {@link Run#getQueueId()}).
-         * @return
          * @since 1.601
          */
         @Exported

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -1507,7 +1507,6 @@ public Collection<Fingerprint> getBuildFingerprints() {
      * Returns an input stream that reads from the log file.
      * It will use a gzip-compressed log file (log.gz) if that exists.
      *
-     * @throws IOException 
      * @return An input stream from the log file. 
      *   If the log file does not exist, the error message will be returned to the output.
      * @since 1.349

File: core/src/main/java/hudson/model/TransientViewActionFactory.java
Patch:
@@ -15,8 +15,6 @@ public abstract class TransientViewActionFactory implements ExtensionPoint {
 
 	/**
 	 * returns a list of (transient) actions never null, may be empty
-	 * 
-	 * @param v
 	 */
 	public abstract List<Action> createFor(View v);
 	

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -1169,8 +1169,8 @@ public Plugin(String sourceId, JSONObject o) {
             this.releaseTimestamp = date;
             this.categories = o.has("labels") ? internInPlace((String[])o.getJSONArray("labels").toArray(EMPTY_STRING_ARRAY)) : null;
             JSONArray ja = o.getJSONArray("dependencies");
-            int depCount = (int)(ja.stream().filter(IS_DEP_PREDICATE.and(IS_NOT_OPTIONAL)).count());
-            int optionalDepCount = (int)(ja.stream().filter(IS_DEP_PREDICATE.and(IS_NOT_OPTIONAL.negate())).count());
+            int depCount = (int)ja.stream().filter(IS_DEP_PREDICATE.and(IS_NOT_OPTIONAL)).count();
+            int optionalDepCount = (int)ja.stream().filter(IS_DEP_PREDICATE.and(IS_NOT_OPTIONAL.negate())).count();
             dependencies = getPresizedMutableMap(depCount);
             optionalDependencies = getPresizedMutableMap(optionalDepCount);
 

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -868,7 +868,7 @@ public void doConfigSubmit(StaplerRequest req, StaplerResponse rsp) throws IOExc
         for (UserPropertyDescriptor d : UserProperty.all()) {
             UserProperty p = getProperty(d.clazz);
 
-            JSONObject o = json.optJSONObject("userProperty" + (i++));
+            JSONObject o = json.optJSONObject("userProperty" + i++);
             if (o != null) {
                 if (p != null) {
                     p = p.reconfigure(req, o);

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -959,8 +959,8 @@ void addDisplayNamesToSearchIndex(SearchIndexBuilder sib, Collection<TopLevelIte
         for(TopLevelItem item : items) {
             
             if(LOGGER.isLoggable(Level.FINE)) {
-                LOGGER.fine((String.format("Adding url=%s,displayName=%s",
-                            item.getSearchUrl(), item.getDisplayName())));
+                LOGGER.fine(String.format("Adding url=%s,displayName=%s",
+                            item.getSearchUrl(), item.getDisplayName()));
             }
             sib.add(item.getSearchUrl(), item.getDisplayName());
         }        

File: core/src/main/java/hudson/model/WorkspaceBrowser.java
Patch:
@@ -45,7 +45,6 @@ public abstract class WorkspaceBrowser implements ExtensionPoint {
 
     /**
      * Provide access to job's workspace
-     * @param job
      * @return {@code null} if this WorkspaceBrowser don't have a workspace for this job
      */
     public abstract @CheckForNull FilePath getWorkspace(Job job);

File: core/src/main/java/hudson/security/GlobalSecurityConfiguration.java
Patch:
@@ -199,7 +199,6 @@ public Permission getRequiredPermission() {
     public static Predicate<Descriptor> FILTER = input -> input.getCategory() instanceof GlobalConfigurationCategory.Security;
 
     /**
-     * @return
      * @see Describable#getDescriptor()
      */
     @SuppressWarnings("unchecked")

File: core/src/main/java/hudson/security/csrf/CrumbIssuerDescriptor.java
Patch:
@@ -39,7 +39,6 @@ public String getCrumbSalt() {
 
     /**
      * Set the salt value. Must not be null.
-     * @param salt
      */
     public void setCrumbSalt(String salt) {
         if (Util.fixEmptyAndTrim(salt) == null) {
@@ -59,8 +58,6 @@ public String getCrumbRequestField() {
 
     /**
      * Set the request parameter name. Must not be null.
-     *
-     * @param requestField
      */
     public void setCrumbRequestField(String requestField) {
         if (Util.fixEmptyAndTrim(requestField) == null) {

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -170,7 +170,6 @@ public void run() {
      * Run the SCM trigger with additional build actions. Used by SubversionRepositoryStatus
      * to trigger a build at a specific revision number.
      * 
-     * @param additionalActions
      * @since 1.375
      */
     public void run(Action[] additionalActions) {

File: core/src/main/java/hudson/util/ChartUtil.java
Patch:
@@ -133,9 +133,11 @@ public static void generateGraph(StaplerRequest req, StaplerResponse rsp, JFreeC
      * Generates the graph in PNG format and sends that to the response.
      *
      * @param defaultW
+     *      The size of the picture to be generated. These values can be overridden
+     *      by the query parameter 'width' in the request.
      * @param defaultH
      *      The size of the picture to be generated. These values can be overridden
-     *      by the query parameter 'width' and 'height' in the request.
+     *      by the query parameter 'height' in the request.
      * @deprecated as of 1.320
      *      Bind {@link Graph} to the URL space. See {@code hudson.tasks.junit.History} as an example (note that doing so involves
      *      a bit of URL structure change.)

File: core/src/main/java/hudson/util/ConsistentHash.java
Patch:
@@ -157,7 +157,7 @@ public T next() {
                     if (!hasNext()) {
                         throw new NoSuchElementException();
                     }
-                    return (T) owner[(start + (pos++)) % owner.length];
+                    return (T) owner[(start + pos++) % owner.length];
                 }
 
                 @Override

File: core/src/main/java/hudson/util/CopyOnWriteList.java
Patch:
@@ -142,7 +142,7 @@ public void clear() {
         this.core = new ArrayList<>();
     }
 
-    public <E> E[] toArray(E[] array) {
+    public <T> T[] toArray(T[] array) {
         return core.toArray(array);
     }
 

File: core/src/main/java/hudson/util/CyclicGraphDetector.java
Patch:
@@ -65,9 +65,6 @@ private void detectedCycle(N q) throws CycleDetectedException {
     
     /**
      * React on detected cycles - default implementation throws an exception.
-     * @param q
-     * @param cycle
-     * @throws CycleDetectedException
      */
     protected void reactOnCycle(N q, List<N> cycle) throws CycleDetectedException{
         throw new CycleDetectedException(cycle);

File: core/src/main/java/hudson/util/FormValidation.java
Patch:
@@ -534,7 +534,6 @@ private String getCharset(URLConnection con) {
 
     /**
      * Instances should be created via one of the factory methods above.
-     * @param kind
      */
     private FormValidation(Kind kind) {
         this.kind = kind;

File: core/src/main/java/hudson/util/PersistedList.java
Patch:
@@ -237,7 +237,7 @@ public List<T> toList() {
      * Gets all the {@link Describable}s in an array.
      */
     @Override
-    public <T> T[] toArray(T[] array) {
+    public <X> X[] toArray(X[] array) {
         return data.toArray(array);
     }
 

File: core/src/main/java/hudson/util/Secret.java
Patch:
@@ -141,11 +141,11 @@ public String getEncryptedValue() {
             payload[pos++] = (byte)(iv.length >> 24);
             payload[pos++] = (byte)(iv.length >> 16);
             payload[pos++] = (byte)(iv.length >> 8);
-            payload[pos++] = (byte)(iv.length);
+            payload[pos++] = (byte)iv.length;
             payload[pos++] = (byte)(encrypted.length >> 24);
             payload[pos++] = (byte)(encrypted.length >> 16);
             payload[pos++] = (byte)(encrypted.length >> 8);
-            payload[pos++] = (byte)(encrypted.length);
+            payload[pos++] = (byte)encrypted.length;
             System.arraycopy(iv, 0, payload, pos, iv.length);
             pos+=iv.length;
             System.arraycopy(encrypted, 0, payload, pos, encrypted.length);

File: core/src/main/java/hudson/util/SecretRewriter.java
Patch:
@@ -156,7 +156,7 @@ private int rewriteRecursive(File dir, String relative, TaskListener listener) t
             for (File child : children) {
                 String cn = child.getName();
                 if (cn.endsWith(".xml")) {
-                    if ((count++)%100==0)
+                    if (count++ % 100 == 0)
                         listener.getLogger().println("Scanning "+child);
                     try {
                         if (rewrite(child)) {

File: core/src/main/java/hudson/util/UnbufferedBase64InputStream.java
Patch:
@@ -45,7 +45,7 @@ public int read() throws IOException {
             pos = 0;
         }
 
-        return (decoded[pos++])&0xFF;
+        return decoded[pos++] & 0xFF;
     }
 
     @Override

File: core/src/main/java/hudson/util/jna/WINNT.java
Patch:
@@ -47,8 +47,8 @@ public interface WINNT {
   int KEY_NOTIFY             = 0x0010;
   int KEY_CREATE_LINK        = 0x0020;
 
-  int KEY_READ  = ((STANDARD_RIGHTS_READ | KEY_QUERY_VALUE | KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY) & (~SYNCHRONIZE));
-  int KEY_WRITE = ((STANDARD_RIGHTS_WRITE | KEY_SET_VALUE | KEY_CREATE_SUB_KEY) & (~SYNCHRONIZE));
+  int KEY_READ  = ((STANDARD_RIGHTS_READ | KEY_QUERY_VALUE | KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY) & ~SYNCHRONIZE);
+  int KEY_WRITE = ((STANDARD_RIGHTS_WRITE | KEY_SET_VALUE | KEY_CREATE_SUB_KEY) & ~SYNCHRONIZE);
 
   int REG_NONE                       = 0;   // No value type
   int REG_SZ                         = 1;   // Unicode nul terminated string

File: core/src/main/java/jenkins/PluginLocaleDrivenResourceProvider.java
Patch:
@@ -40,7 +40,6 @@ public interface PluginLocaleDrivenResourceProvider extends ExtensionPoint {
      *
      * @see org.kohsuke.stapler.LocaleDrivenResourceProvider
      *
-     * @param s
      * @return URL to the localized resource, or {@code null} if inapplicable.
      */
     @CheckForNull

File: core/src/main/java/jenkins/install/InstallState.java
Patch:
@@ -346,8 +346,6 @@ public String toString() {
 
     /**
      * Find an install state by name
-     * @param name
-     * @return
      */
     @CheckForNull
     public static InstallState valueOf(@NonNull String name) {

File: core/src/main/java/jenkins/install/InstallUtil.java
Patch:
@@ -298,7 +298,6 @@ private static String getCurrentExecVersion() {
 
     /**
      * Persists a list of installing plugins; this is used in the case Jenkins fails mid-installation and needs to be restarted
-     * @param installingPlugins
      */
     public static synchronized void persistInstallStatus(List<UpdateCenterJob> installingPlugins) {
         File installingPluginsFile = getInstallingPluginsFile();

File: core/src/main/java/jenkins/model/IdStrategy.java
Patch:
@@ -297,7 +297,7 @@ public boolean equals(@NonNull String id1, @NonNull String id2) {
         public String keyFor(@NonNull String id) {
             int index = id.lastIndexOf('@'); // The @ can be used in local-part if quoted correctly
             // => the last @ is the one used to separate the domain and local-part
-            return index == -1 ? id : id.substring(0, index) + (id.substring(index).toLowerCase(Locale.ENGLISH));
+            return index == -1 ? id : id.substring(0, index) + id.substring(index).toLowerCase(Locale.ENGLISH);
         }
 
         @Override

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -4946,7 +4946,7 @@ public boolean isSubjectToMandatoryReadPermissionCheck(String restOfPath) {
         }
 
         // TODO SlaveComputer.doSlaveAgentJnlp; there should be an annotation to request unprotected access
-        if ((isAgentJnlpPath(restOfPath, "jenkins") || (isAgentJnlpPath(restOfPath, "slave")))
+        if ((isAgentJnlpPath(restOfPath, "jenkins") || isAgentJnlpPath(restOfPath, "slave"))
             && "true".equals(Stapler.getCurrentRequest().getParameter("encrypt"))) {
             return false;
         }
@@ -4992,8 +4992,6 @@ public View getStaplerFallback() {
      * unique. It does not check the displayName against the displayName of the
      * job that the user is configuring though to prevent a validation warning
      * if the user sets the displayName to what it currently is.
-     * @param displayName
-     * @param currentJobName
      */
     boolean isDisplayNameUnique(String displayName, String currentJobName) {
         Collection<TopLevelItem> itemCollection = items.values();

File: core/src/main/java/jenkins/model/Nodes.java
Patch:
@@ -369,7 +369,6 @@ public void run() {
      * Returns the directory that the nodes are stored in.
      *
      * @return the directory that the nodes are stored in.
-     * @throws IOException
      */
     private File getNodesDir() throws IOException {
         final File nodesDir = new File(jenkins.getRootDir(), "nodes");

File: core/src/main/java/jenkins/mvn/SettingsProvider.java
Patch:
@@ -23,7 +23,6 @@ public abstract class SettingsProvider extends AbstractDescribableImpl<SettingsP
     /**
      * Configure maven launcher argument list with adequate settings path. Implementations should be aware that this method might get called multiple times during a build.
      * 
-     * @param build
      * @return the filepath to the provided file. {@code null} if no settings will be provided.
      */
     public abstract FilePath supplySettings(AbstractBuild<?, ?> build, TaskListener listener);

File: core/src/main/java/jenkins/security/QueueItemAuthenticatorProvider.java
Patch:
@@ -36,7 +36,7 @@ private IteratorImpl() {
 
         @Override
         public boolean hasNext() {
-            while ((delegate == null || !delegate.hasNext()) && (providers.hasNext())) {
+            while ((delegate == null || !delegate.hasNext()) && providers.hasNext()) {
                 final QueueItemAuthenticatorProvider provider = providers.next();
                 if (provider == null) {
                     continue;

File: core/src/test/java/hudson/FunctionsTest.java
Patch:
@@ -521,7 +521,7 @@ public void printStackTrace(PrintWriter s) {
         stack2.cause(stack1);
         //Format changed in 11.0.9 / 8.0.272 (JDK-8226809 / JDK-8252444 / JDK-8252489)
 
-        if ((getVersion().isNewerThanOrEqualTo(new VersionNumber("11.0.9"))) ||
+        if (getVersion().isNewerThanOrEqualTo(new VersionNumber("11.0.9")) ||
                 (getVersion().getDigitAt(0) == 8 && getVersion().isNewerThanOrEqualTo(new VersionNumber("8.0.272")))) {
             assertPrintThrowable(stack1,
                     "p.Exc1\n" +

File: core/src/test/java/jenkins/util/AtmostOneTaskExecutorTest.java
Patch:
@@ -27,7 +27,7 @@ public void doubleBooking() throws Exception {
             try {
                 lock.block();
             } catch (InterruptedException x) {
-                assert false : x;
+                throw new RuntimeException(x);
             }
             return null;
         });

File: test/src/test/java/hudson/cli/QuietDownCommandTest.java
Patch:
@@ -506,7 +506,6 @@ private void assertJenkinsNotInQuietMode() {
 
     /**
      * Asserts if Jenkins is in quiet mode, retrying for some time before failing.
-     * @throws TimeoutException
      */
     public static void assertJenkinsInQuietMode(final JenkinsRule j) {
         await().pollInterval(250, TimeUnit.MILLISECONDS)
@@ -516,7 +515,6 @@ public static void assertJenkinsInQuietMode(final JenkinsRule j) {
 
     /**
      * Asserts if Jenkins is <strong>not</strong> in quiet mode, retrying for some time before failing.
-     * @throws TimeoutException
      */
     public static void assertJenkinsNotInQuietMode(final JenkinsRule j) {
         await().pollInterval(250, TimeUnit.MILLISECONDS)

File: test/src/test/java/hudson/cli/UpdateViewCommandTest.java
Patch:
@@ -71,8 +71,6 @@ public class UpdateViewCommandTest {
     /**
      * This test shows that updating a view using an XML that will be
      * converted by XStream via an alias will rightfully succeed.
-     *
-     * @throws Exception
      */
     @Test public void updateViewWithRenamedClass() throws Exception {
         ListView tv  = new ListView("tView");

File: test/src/test/java/hudson/console/ConsoleAnnotatorTest.java
Patch:
@@ -219,7 +219,7 @@ public static class StatefulAnnotator extends ConsoleAnnotator<Object> {
         @Override
         public ConsoleAnnotator annotate(Object build, MarkupText text) {
             if (text.getText().startsWith("line"))
-                text.addMarkup(0,5,"<b tag="+(n++)+">","</b>");
+                text.addMarkup(0, 5, "<b tag=" + n++ + ">", "</b>");
             return this;
         }
     }

File: test/src/test/java/hudson/model/AbstractBuildTest.java
Patch:
@@ -303,9 +303,10 @@ public BuildStepMonitor getRequiredMonitorService() {
             public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {
                 if (build.number == 1) {
                     e1.signal();  // signal that build #1 is in publisher
+                } else if (build.number == 2) {
+                    e2.signal();  // signal that build #2 is in publisher
                 } else {
-                    assert build.number == 2;
-                    e2.signal();
+                    throw new IllegalArgumentException("unexpected build number: " + build.number);
                 }
 
                 done.block();

File: test/src/test/java/hudson/model/DescriptorVisibilityFilterTest.java
Patch:
@@ -77,7 +77,7 @@ public String getDisplayName() {
         public static final class HideDescriptor extends DescriptorVisibilityFilter {
             @Override
             public boolean filter(@CheckForNull Object context, @NonNull Descriptor descriptor) {
-                return !(descriptor instanceof DescriptorImpl);
+                return !(descriptor instanceof TestSecurityRealm.DescriptorImpl);
             }
         }
     }
@@ -105,7 +105,7 @@ public String getDisplayName() {
         public static final class HideDescriptor extends DescriptorVisibilityFilter {
             @Override
             public boolean filter(@CheckForNull Object context, @NonNull Descriptor descriptor) {
-                return !(descriptor instanceof DescriptorImpl);
+                return !(descriptor instanceof TestAuthStrategy.DescriptorImpl);
             }
         }
     }

File: test/src/test/java/hudson/model/UpdateSiteTest.java
Patch:
@@ -86,7 +86,6 @@ private String getResource(String resourceName) throws IOException {
 
     /**
      * Startup a web server to access resources via HTTP.
-     * @throws Exception 
      */
     @Before
     public void setUpWebServer() throws Exception {

File: test/src/test/java/hudson/model/UsageStatisticsTest.java
Patch:
@@ -135,8 +135,6 @@ public void roundtrip() throws Exception {
      * a background update of that cache.
      * <p/>
      * <p>This method triggers that update and waits until the cache is filled during roughly 1 second max.</p>
-     *
-     * @throws InterruptedException
      */
     private void warmUpNodeMonitorCache() throws InterruptedException {
         ArchitectureMonitor.DescriptorImpl descriptor = j.jenkins.getDescriptorByType(ArchitectureMonitor.DescriptorImpl.class);

File: test/src/test/java/hudson/model/UserTest.java
Patch:
@@ -416,7 +416,7 @@ public void testDoConfigSubmit() throws Exception {
             fail("User should not have permission to configure another user.");
         }
         catch(Exception e){
-            if(!(e.getClass().isAssignableFrom(AccessDeniedException3.class))){
+            if(!e.getClass().isAssignableFrom(AccessDeniedException3.class)){
                fail("AccessDeniedException should be thrown.");
             }
         }

File: test/src/test/java/hudson/model/listeners/ItemListenerTest.java
Patch:
@@ -61,7 +61,7 @@ public void setUp() throws Exception {
     @Test
     public void onCreatedViaCLI() throws Exception {
         CLICommandInvoker.Result result = new CLICommandInvoker(j, "create-job").
-                withStdin(new ByteArrayInputStream(("<project><actions/><builders/><publishers/><buildWrappers/></project>").getBytes())).
+                withStdin(new ByteArrayInputStream("<project><actions/><builders/><publishers/><buildWrappers/></project>".getBytes())).
                 invokeWithArgs("testJob");
         assertThat(result, CLICommandInvoker.Matcher.succeeded());
         assertNotNull("job should be created: " + result, j.jenkins.getItem("testJob"));

File: test/src/test/java/hudson/scm/ChangeLogSetTest.java
Patch:
@@ -28,7 +28,7 @@ public void catchingExceptionDuringAnnotation() {
         } catch (Throwable t) {
             fail(t.getMessage());
         }
-        assertEquals((new FakeChangeLogSCM.EntryImpl()).getMsg(), change.getMsg());
+        assertEquals(new FakeChangeLogSCM.EntryImpl().getMsg(), change.getMsg());
     }
 
     @Extension

File: test/src/test/java/hudson/slaves/EnvironmentVariableNodePropertyTest.java
Patch:
@@ -83,7 +83,6 @@ public void testSlaveAndMasterPropertyOnSlave() throws Exception {
 	/**
 	 * Agent and master properties and parameters are available.
 	 * Priority: parameters > agent > master
-	 * @throws Exception
 	 */
 	@Test
 	public void testSlaveAndMasterPropertyAndParameterOnSlave()

File: test/src/test/java/jenkins/AgentProtocolTest.java
Patch:
@@ -73,7 +73,7 @@ public static void assertProtocols(Jenkins jenkins, boolean shouldBeEnabled, @Ch
         Set<String> agentProtocols = jenkins.getAgentProtocols();
         List<String> failedChecks = new ArrayList<>();
         for (String protocol : protocolNames) {
-            if (shouldBeEnabled && !(agentProtocols.contains(protocol))) {
+            if (shouldBeEnabled && !agentProtocols.contains(protocol)) {
                 failedChecks.add(protocol);
             }
             if (!shouldBeEnabled && agentProtocols.contains(protocol)) {

File: test/src/test/java/jenkins/security/Security857Test.java
Patch:
@@ -25,7 +25,6 @@ public class Security857Test {
 
     /**
      * Test that a jelly is escaped right thanks to the CustomJellyContext.ESCAPE_BY_DEFAULT field. Its default value is true.
-     * @throws Exception
      */
     @Issue("SECURITY-857")
     @Test
@@ -35,7 +34,6 @@ public void testJellyEscapingTrue() throws Exception {
 
     /**
      * Test that a jelly is not escaped when the escape-by-default='false' directive is set in it.
-     * @throws Exception
      */
     @Issue("SECURITY-857")
     @Test
@@ -46,7 +44,6 @@ public void testJellyEscapingFalse() throws Exception {
 
     /**
      * Test that a jelly is escaped when the escape-by-default='true' directive is set in it.
-     * @throws Exception
      */
     @Issue("SECURITY-857")
     @Test

File: test/src/test/java/jenkins/tasks/SimpleBuildWrapperTest.java
Patch:
@@ -167,7 +167,7 @@ private static final class DisposerImpl extends Disposer {
             private static final long serialVersionUID = 1;
             private int tearDownCount = 0;
             @Override public void tearDown(Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {
-                listener.getLogger().println("ran DisposerImpl #" + (++tearDownCount));
+                listener.getLogger().println("ran DisposerImpl #" + ++tearDownCount);
             }
         }
         @TestExtension({ "disposer", "failedJobWithInterruptedDisposer" }) public static class DescriptorImpl extends BuildWrapperDescriptor {

File: core/src/test/java/jenkins/util/ResourceBundleUtilTest.java
Patch:
@@ -44,11 +44,11 @@ public class ResourceBundleUtilTest {
     public void test_known_locale() {
         JSONObject bundle = ResourceBundleUtil.getBundle("hudson.logging.Messages", Locale.GERMAN);
         Assert.assertEquals("Initialisiere Log-Rekorder", bundle.getString("LogRecorderManager.init"));
-        bundle = ResourceBundleUtil.getBundle("hudson.logging.Messages", new Locale("pt"));
-        Assert.assertEquals("Inicializando registros de log", bundle.getString("LogRecorderManager.init"));
+        bundle = ResourceBundleUtil.getBundle("hudson.logging.Messages", new Locale("de"));
+        Assert.assertEquals("Initialisiere Log-Rekorder", bundle.getString("LogRecorderManager.init"));
 
         // Test caching - should get the same bundle instance back...
-        Assert.assertSame(ResourceBundleUtil.getBundle("hudson.logging.Messages", new Locale("pt")), bundle);
+        Assert.assertSame(ResourceBundleUtil.getBundle("hudson.logging.Messages", new Locale("de")), bundle);
     }
 
     /**

File: core/src/main/java/hudson/ExtensionFinder.java
Patch:
@@ -63,7 +63,6 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -398,7 +397,7 @@ public <U> Collection<ExtensionComponent<U>> find(Class<U> type, Hudson jenkins)
         }
 
         private <U> void _find(Class<U> type, List<ExtensionComponent<U>> result, Injector container) {
-            for (Entry<Key<?>, Binding<?>> e : container.getBindings().entrySet()) {
+            for (Map.Entry<Key<?>, Binding<?>> e : container.getBindings().entrySet()) {
                 if (type.isAssignableFrom(e.getKey().getTypeLiteral().getRawType())) {
                     Annotation a = annotations.get(e.getKey());
                     Object o = e.getValue().getProvider().get();

File: core/src/main/java/hudson/cli/BuildCommand.java
Patch:
@@ -53,7 +53,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.ArrayList;
-import java.util.Map.Entry;
 import java.io.FileNotFoundException;
 import java.io.PrintStream;
 
@@ -112,7 +111,7 @@ protected int run() throws Exception {
             //TODO: switch to type annotations after the migration to Java 1.8
             List<ParameterValue> values = new ArrayList<>();
 
-            for (Entry<String, String> e : parameters.entrySet()) {
+            for (Map.Entry<String, String> e : parameters.entrySet()) {
                 String name = e.getKey();
                 ParameterDefinition pd = pdp.getParameterDefinition(name);
                 if (pd==null) {

File: core/src/main/java/hudson/cli/ListChangesCommand.java
Patch:
@@ -3,7 +3,6 @@
 import hudson.Extension;
 import hudson.model.Run;
 import hudson.scm.ChangeLogSet;
-import hudson.scm.ChangeLogSet.Entry;
 import hudson.util.QuotedStringTokenizer;
 import jenkins.scm.RunWithSCM;
 import org.kohsuke.args4j.Option;
@@ -67,7 +66,7 @@ protected int act(List<Run<?, ?>> builds) throws IOException {
             for (Run<?, ?> build : builds) {
                 if (build instanceof RunWithSCM) {
                     for (ChangeLogSet<?> cs : ((RunWithSCM<?, ?>) build).getChangeSets()) {
-                        for (Entry e : cs) {
+                        for (ChangeLogSet.Entry e : cs) {
                             stdout.printf("%s,%s%n",
                                     QuotedStringTokenizer.quote(e.getAuthor().getId()),
                                     QuotedStringTokenizer.quote(e.getMsg()));
@@ -80,7 +79,7 @@ protected int act(List<Run<?, ?>> builds) throws IOException {
             for (Run<?, ?> build : builds) {
                 if (build instanceof RunWithSCM) {
                     for (ChangeLogSet<?> cs : ((RunWithSCM<?, ?>) build).getChangeSets()) {
-                        for (Entry e : cs) {
+                        for (ChangeLogSet.Entry e : cs) {
                             stdout.printf("%s\t%s%n", e.getAuthor(), e.getMsg());
                             for (String p : e.getAffectedPaths()) {
                                 stdout.println("  " + p);

File: core/src/main/java/hudson/model/DependencyGraph.java
Patch:
@@ -40,7 +40,6 @@
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.Set;
 import java.util.Stack;
 
@@ -341,7 +340,7 @@ private void add(Map<AbstractProject, List<DependencyGroup>> map, AbstractProjec
     }
 
     private Map<AbstractProject, List<DependencyGroup>> finalize(Map<AbstractProject, List<DependencyGroup>> m) {
-        for (Entry<AbstractProject, List<DependencyGroup>> e : m.entrySet()) {
+        for (Map.Entry<AbstractProject, List<DependencyGroup>> e : m.entrySet()) {
             e.getValue().sort(NAME_COMPARATOR);
             e.setValue( Collections.unmodifiableList(e.getValue()) );
         }

File: core/src/main/java/hudson/model/DownloadService.java
Patch:
@@ -34,7 +34,6 @@
 import hudson.init.InitMilestone;
 import hudson.init.Initializer;
 import hudson.util.FormValidation;
-import hudson.util.FormValidation.Kind;
 import hudson.util.TextFile;
 import static java.util.concurrent.TimeUnit.DAYS;
 import java.io.File;
@@ -386,7 +385,7 @@ public FormValidation updateNow() throws IOException {
                 JSONObject o = JSONObject.fromObject(jsonString);
                 if (signatureCheck) {
                     FormValidation e = updatesite.getJsonSignatureValidator(signatureValidatorPrefix +" '"+id+"'").verifySignature(o);
-                    if (e.kind!= Kind.OK) {
+                    if (e.kind!= FormValidation.Kind.OK) {
                         LOGGER.log(Level.WARNING, "signature check failed for " + site, e );
                         continue;
                     }

File: core/src/main/java/hudson/model/FullDuplexHttpChannel.java
Patch:
@@ -25,7 +25,6 @@
 
 import hudson.remoting.Channel;
 import hudson.remoting.PingThread;
-import hudson.remoting.Channel.Mode;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -53,7 +52,7 @@ public FullDuplexHttpChannel(UUID uuid, boolean restricted) throws IOException {
     @Override
     protected void run(final InputStream upload, OutputStream download) throws IOException, InterruptedException {
         channel = new Channel("HTTP full-duplex channel " + uuid,
-                Computer.threadPoolForRemoting, Mode.BINARY, upload, download, null, restricted);
+                Computer.threadPoolForRemoting, Channel.Mode.BINARY, upload, download, null, restricted);
 
         // so that we can detect dead clients, periodically send something
         PingThread ping = new PingThread(channel) {

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -76,7 +76,6 @@
 import java.util.concurrent.TimeUnit;
 import hudson.util.XStream2;
 import hudson.util.ConsistentHash;
-import hudson.util.ConsistentHash.Hash;
 
 import java.io.File;
 import java.io.IOException;
@@ -1780,7 +1779,7 @@ private Runnable createFlyWeightTaskRunnable(final BuildableItem p, final Comput
         };
     }
 
-    private static final Hash<Node> NODE_HASH = Node::getNodeName;
+    private static final ConsistentHash.Hash<Node> NODE_HASH = Node::getNodeName;
 
     private boolean makePending(BuildableItem p) {
         // LOGGER.info("Making "+p.task+" pending"); // REMOVE

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -32,7 +32,6 @@
 import hudson.lifecycle.Lifecycle;
 import hudson.model.UpdateCenter.UpdateCenterJob;
 import hudson.util.FormValidation;
-import hudson.util.FormValidation.Kind;
 import hudson.util.HttpResponses;
 import static jenkins.util.MemoryReductionUtil.EMPTY_STRING_ARRAY;
 import static jenkins.util.MemoryReductionUtil.getPresizedMutableMap;
@@ -239,7 +238,7 @@ private FormValidation updateData(String json, boolean signatureCheck)
 
         if (signatureCheck) {
             FormValidation e = verifySignatureInternal(o);
-            if (e.kind!=Kind.OK) {
+            if (e.kind!=FormValidation.Kind.OK) {
                 LOGGER.severe(e.toString());
                 return e;
             }

File: core/src/main/java/hudson/model/UsageStatistics.java
Patch:
@@ -27,7 +27,7 @@
 import hudson.PluginWrapper;
 import hudson.Util;
 import hudson.Extension;
-import hudson.node_monitors.ArchitectureMonitor.DescriptorImpl;
+import hudson.node_monitors.ArchitectureMonitor;
 import hudson.security.Permission;
 import hudson.util.Secret;
 import static java.util.concurrent.TimeUnit.DAYS;
@@ -143,7 +143,7 @@ public String getStatData() throws IOException {
                 n.put("jvm-version", System.getProperty("java.version"));
             }
             n.put("executors",c.getNumExecutors());
-            DescriptorImpl descriptor = j.getDescriptorByType(DescriptorImpl.class);
+            ArchitectureMonitor.DescriptorImpl descriptor = j.getDescriptorByType(ArchitectureMonitor.DescriptorImpl.class);
             n.put("os", descriptor.get(c));
             nodes.add(n);
         }

File: core/src/main/java/hudson/model/queue/BackFiller.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.stream.StreamSupport;
 
 /**
@@ -110,7 +109,7 @@ private TentativePlan makeTentativePlan(BuildableItem bi) {
 
             // figure out how many executors we need on each computer?
             Map<Computer,Integer> footprint = new HashMap<>();
-            for (Entry<WorkChunk, ExecutorChunk> e : m.toMap().entrySet()) {
+            for (Map.Entry<WorkChunk, ExecutorChunk> e : m.toMap().entrySet()) {
                 Computer c = e.getValue().computer;
                 Integer v = footprint.get(c);
                 if (v==null)    v = 0;
@@ -130,7 +129,7 @@ private TentativePlan makeTentativePlan(BuildableItem bi) {
 
             // now, based on the real predicted loads, figure out the approximation of when we can
             // start executing this guy.
-            for (Entry<Computer, Integer> e : footprint.entrySet()) {
+            for (Map.Entry<Computer, Integer> e : footprint.entrySet()) {
                 Computer computer = e.getKey();
                 Timeline timeline = new Timeline();
                 for (LoadPredictor lp : LoadPredictor.all()) {

File: core/src/main/java/hudson/model/queue/MappingWorksheet.java
Patch:
@@ -45,7 +45,6 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 
 import static java.lang.Math.max;
 
@@ -335,7 +334,7 @@ public MappingWorksheet(BuildableItem item, List<? extends ExecutorSlot> offers,
             long duration = item.task.getEstimatedDuration();
             if (duration > 0) {
                 long now = System.currentTimeMillis();
-                for (Entry<Computer, List<ExecutorSlot>> e : j.entrySet()) {
+                for (Map.Entry<Computer, List<ExecutorSlot>> e : j.entrySet()) {
                     final List<ExecutorSlot> list = e.getValue();
                     final int max = e.getKey().countExecutors();
 

File: core/src/main/java/hudson/node_monitors/AbstractAsyncNodeMonitorDescriptor.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.Set;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
@@ -104,7 +103,7 @@ protected Map<Computer, T> monitor() throws InterruptedException {
 
         final Map<Computer,T> data = new HashMap<>();
 
-        for (Entry<Computer, Future<T>> e : futures.entrySet()) {
+        for (Map.Entry<Computer, Future<T>> e : futures.entrySet()) {
             Computer c = e.getKey();
             Future<T> f = futures.get(c);
             data.put(c, null);  // sentinel value

File: core/src/main/java/hudson/node_monitors/ResponseTimeMonitor.java
Patch:
@@ -33,7 +33,6 @@
 import java.io.IOException;
 import java.io.Serializable;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.logging.Logger;
 import org.kohsuke.stapler.export.Exported;
 import org.kohsuke.stapler.export.ExportedBean;
@@ -56,7 +55,7 @@ protected Callable<Data,IOException> createCallable(Computer c) {
         protected Map<Computer, Data> monitor() throws InterruptedException {
             Result<Data> base = monitorDetailed();
             Map<Computer, Data> monitoringData = base.getMonitoringData();
-            for (Entry<Computer, Data> e : monitoringData.entrySet()) {
+            for (Map.Entry<Computer, Data> e : monitoringData.entrySet()) {
                 Computer c = e.getKey();
                 Data d = e.getValue();
                 if (base.getSkipped().contains(c)) {

File: core/src/main/java/hudson/scm/ChangeLogParser.java
Patch:
@@ -26,7 +26,6 @@
 import hudson.Util;
 import hudson.model.AbstractBuild;
 import hudson.model.Run;
-import hudson.scm.ChangeLogSet.Entry;
 import java.io.File;
 import java.io.IOException;
 import org.xml.sax.SAXException;
@@ -44,7 +43,7 @@ public abstract class ChangeLogParser {
     /**
      * @since 1.568
      */
-    public ChangeLogSet<? extends Entry> parse(Run build, RepositoryBrowser<?> browser, File changelogFile) throws IOException, SAXException {
+    public ChangeLogSet<? extends ChangeLogSet.Entry> parse(Run build, RepositoryBrowser<?> browser, File changelogFile) throws IOException, SAXException {
         if (build instanceof AbstractBuild && Util.isOverridden(ChangeLogParser.class, getClass(), "parse", AbstractBuild.class, File.class)) {
             return parse((AbstractBuild) build, changelogFile);
         } else {
@@ -53,7 +52,7 @@ public ChangeLogSet<? extends Entry> parse(Run build, RepositoryBrowser<?> brows
     }
 
     @Deprecated
-    public ChangeLogSet<? extends Entry> parse(AbstractBuild build, File changelogFile) throws IOException, SAXException {
+    public ChangeLogSet<? extends ChangeLogSet.Entry> parse(AbstractBuild build, File changelogFile) throws IOException, SAXException {
         return parse(build, build.getProject().getScm().getEffectiveBrowser(), changelogFile);
     }
 }

File: core/src/main/java/hudson/tasks/Fingerprinter.java
Patch:
@@ -69,7 +69,6 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.Set;
 import java.util.TreeMap;
 import java.util.logging.Level;
@@ -429,7 +428,7 @@ record = compact(record);
         /** Share data structure with other builds, mainly those of the same job. */
         private PackedMap<String,String> compact(Map<String,String> record) {
             Map<String,String> b = new HashMap<>();
-            for (Entry<String,String> e : record.entrySet()) {
+            for (Map.Entry<String,String> e : record.entrySet()) {
                 b.put(e.getKey().intern(), e.getValue().intern());
             }
             return PackedMap.of(b);
@@ -448,7 +447,7 @@ public synchronized Map<String,Fingerprint> getFingerprints() {
             Jenkins h = Jenkins.get();
 
             Map<String,Fingerprint> m = new TreeMap<>();
-            for (Entry<String, String> r : record.entrySet()) {
+            for (Map.Entry<String, String> r : record.entrySet()) {
                 try {
                     Fingerprint fp = h._getFingerprint(r.getValue());
                     if(fp!=null)

File: core/src/main/java/jenkins/PluginSubtypeMarker.java
Patch:
@@ -38,7 +38,7 @@
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.ElementScanner6;
-import javax.tools.Diagnostic.Kind;
+import javax.tools.Diagnostic;
 import javax.tools.FileObject;
 import javax.tools.StandardLocation;
 import java.io.IOException;
@@ -69,7 +69,7 @@ public Void visitType(TypeElement e, Void aVoid) {
                             try {
                                 write(e);
                             } catch (IOException x) {
-                                processingEnv.getMessager().printMessage(Kind.ERROR, Functions.printThrowable(x), e);
+                                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, Functions.printThrowable(x), e);
                             }
                         }
                     }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -286,7 +286,6 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.Properties;
 import java.util.Set;
 import java.util.StringTokenizer;
@@ -4075,7 +4074,7 @@ public Map<String,Map<String,String>> getAllThreadDumps() throws IOException, In
         long endTime = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(5);
 
         Map<String,Map<String,String>> r = new HashMap<>();
-        for (Entry<String, Future<Map<String, String>>> e : future.entrySet()) {
+        for (Map.Entry<String, Future<Map<String, String>>> e : future.entrySet()) {
             try {
                 r.put(e.getKey(), e.getValue().get(endTime-System.currentTimeMillis(), TimeUnit.MILLISECONDS));
             } catch (Exception x) {

File: core/src/main/java/jenkins/model/lazy/BuildReferenceMapAdapter.java
Patch:
@@ -1,11 +1,11 @@
 package jenkins.model.lazy;
 
-import groovy.util.MapEntry;
 import hudson.util.AdaptedIterator;
 import hudson.util.Iterators;
 
 import edu.umd.cs.findbugs.annotations.Nullable;
 import java.lang.reflect.Array;
+import java.util.AbstractMap;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Comparator;
@@ -392,13 +392,13 @@ public int hashCode() {
         }
 
         private Entry<Integer,BuildReference<R>> _wrap(Entry<Integer,R> e) {
-            return new MapEntry(e.getKey(),wrap(e.getValue()));
+            return new AbstractMap.SimpleEntry<>(e.getKey(),wrap(e.getValue()));
         }
         private Entry<Integer, R> _unwrap(Entry<Integer, BuildReference<R>> e) {
             R v = unwrap(e.getValue());
             if (v==null)
                 return null;
-            return new MapEntry(e.getKey(), v);
+            return new AbstractMap.SimpleEntry<>(e.getKey(), v);
         }
     }
 }

File: core/src/main/java/jenkins/security/UserDetailsCache.java
Patch:
@@ -24,7 +24,7 @@
 package jenkins.security;
 
 import com.google.common.cache.Cache;
-import static com.google.common.cache.CacheBuilder.newBuilder;
+import com.google.common.cache.CacheBuilder;
 import com.google.common.util.concurrent.UncheckedExecutionException;
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
@@ -70,8 +70,8 @@ public UserDetailsCache() {
                 EXPIRE_AFTER_WRITE_SEC = (int)TimeUnit.MINUTES.toSeconds(2);
             }
         }
-        detailsCache = newBuilder().softValues().expireAfterWrite(EXPIRE_AFTER_WRITE_SEC, TimeUnit.SECONDS).build();
-        existenceCache = newBuilder().softValues().expireAfterWrite(EXPIRE_AFTER_WRITE_SEC, TimeUnit.SECONDS).build();
+        detailsCache = CacheBuilder.newBuilder().softValues().expireAfterWrite(EXPIRE_AFTER_WRITE_SEC, TimeUnit.SECONDS).build();
+        existenceCache = CacheBuilder.newBuilder().softValues().expireAfterWrite(EXPIRE_AFTER_WRITE_SEC, TimeUnit.SECONDS).build();
     }
 
     /**

File: core/src/main/java/jenkins/util/xstream/XStreamDOM.java
Patch:
@@ -49,7 +49,6 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.Stack;
 
 /**
@@ -151,7 +150,7 @@ private XStreamDOM(String tagName, String[] attributes, List<XStreamDOM> childre
     private String[] toAttributeList(Map<String, String> attributes) {
         String[] r = new String[attributes.size()*2];
         int i=0;
-        for (Entry<String, String> e : attributes.entrySet()) {
+        for (Map.Entry<String, String> e : attributes.entrySet()) {
             r[i++] = e.getKey();
             r[i++] = e.getValue();
         }

File: core/src/test/java/hudson/util/PackedMapTest.java
Patch:
@@ -3,7 +3,6 @@
 import static org.junit.Assert.assertEquals;
 
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.TreeMap;
 
 import org.junit.Test;
@@ -29,7 +28,7 @@ public void basic() {
         assertEquals("b",p.get("a"));
         assertEquals("d", p.get("c"));
         assertEquals(2, p.size());
-        for (Entry<String,String> e : p.entrySet()) {
+        for (Map.Entry<String,String> e : p.entrySet()) {
             System.out.println(e.getKey()+'='+e.getValue());
         }
 

File: test/src/test/java/hudson/cli/ComputerStateTest.java
Patch:
@@ -38,7 +38,7 @@
 import hudson.model.Computer;
 import hudson.model.Slave;
 import hudson.slaves.DumbSlave;
-import hudson.slaves.OfflineCause.UserCause;
+import hudson.slaves.OfflineCause;
 
 import org.junit.Rule;
 import org.junit.Test;
@@ -101,7 +101,7 @@ public void disconnect() throws Exception {
         assertThat(result, succeededSilently());
         assertTrue(slave.toComputer().isOffline());
 
-        UserCause cause = (UserCause) slave.toComputer().getOfflineCause();
+        OfflineCause.UserCause cause = (OfflineCause.UserCause) slave.toComputer().getOfflineCause();
         assertThat(cause.toString(), endsWith("Custom cause message"));
         assertThat(cause.getUser(), equalTo(command.user()));
     }
@@ -120,7 +120,7 @@ public void offline() throws Exception {
         assertThat(result, succeededSilently());
         assertTrue(slave.toComputer().isOffline());
 
-        UserCause cause = (UserCause) slave.toComputer().getOfflineCause();
+        OfflineCause.UserCause cause = (OfflineCause.UserCause) slave.toComputer().getOfflineCause();
         assertThat(cause.toString(), endsWith("Custom cause message"));
         assertThat(cause.getUser(), equalTo(command.user()));
     }

File: test/src/test/java/hudson/triggers/SCMTriggerTest.java
Patch:
@@ -41,7 +41,6 @@
 import hudson.model.FreeStyleBuild;
 import hudson.model.FreeStyleProject;
 import hudson.model.TaskListener;
-import hudson.model.Cause.UserCause;
 import hudson.scm.NullSCM;
 import hudson.triggers.SCMTrigger.SCMTriggerCause;
 import hudson.triggers.SCMTrigger.BuildAction;
@@ -156,11 +155,11 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
         p.addTrigger(t);
 
         // Start one build to block others
-        assertTrue(p.scheduleBuild(new UserCause()));
+        assertTrue(p.scheduleBuild(new Cause.UserCause()));
         buildStarted.block(); // wait for the build to really start
 
         // Schedule a new build, and trigger it many ways while it sits in queue
-        Future<FreeStyleBuild> fb = p.scheduleBuild2(0, new UserCause());
+        Future<FreeStyleBuild> fb = p.scheduleBuild2(0, new Cause.UserCause());
         assertNotNull(fb);
         assertTrue(p.scheduleBuild(new SCMTriggerCause("First poll")));
         assertTrue(p.scheduleBuild(new SCMTriggerCause("Second poll")));

File: test/src/test/java/hudson/util/FormFieldValidatorTest.java
Patch:
@@ -29,7 +29,6 @@
 import hudson.tasks.BuildStepMonitor;
 import hudson.tasks.BuildStepDescriptor;
 import hudson.tasks.Publisher;
-import hudson.util.FormFieldValidatorTest.BrokenFormValidatorBuilder.DescriptorImpl;
 import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
@@ -75,7 +74,7 @@ public BuildStepMonitor getRequiredMonitorService() {
     @Test
     @Issue("JENKINS-3382")
     public void negative() throws Exception {
-        DescriptorImpl d = new DescriptorImpl();
+        BrokenFormValidatorBuilder.DescriptorImpl d = new BrokenFormValidatorBuilder.DescriptorImpl();
         Publisher.all().add(d);
         try {
             FreeStyleProject p = j.createFreeStyleProject();

File: test/src/test/java/hudson/cli/QuietDownCommandTest.java
Patch:
@@ -334,7 +334,7 @@ public Object call() {
         try {
             exec_task.get(2*TIMEOUT, TimeUnit.MILLISECONDS);
         } catch (TimeoutException e) {
-            fail("Blocking call didn't finish after timeout!");
+            throw new AssertionError("Blocking call didn't finish after timeout!", e);
         }
         assertThat(exec_task.isDone(), equalTo(true));
         finish.signal();

File: test/src/test/java/hudson/model/queue/WideExecutionTest.java
Patch:
@@ -38,6 +38,7 @@
 import org.jvnet.hudson.test.TestExtension;
 
 import java.io.IOException;
+import java.io.UncheckedIOException;
 import java.util.Collection;
 import java.util.Collections;
 
@@ -70,7 +71,7 @@ public void run() {
                             try {
                                 b.setDescription("I was here");
                             } catch (IOException e) {
-                                e.printStackTrace();
+                                throw new UncheckedIOException(e);
                             }
                         }
 

File: core/src/main/java/hudson/Util.java
Patch:
@@ -1414,7 +1414,7 @@ public static String resolveSymlink(@NonNull File link) throws IOException {
      * but don't remember it right now.
      *
      * @since 1.204
-     * @deprecated since 2008-05-13. This method is broken (see ISSUE#1666). It should probably
+     * @deprecated since 2008-05-13. This method is broken (see JENKINS-1666). It should probably
      * be removed but I'm not sure if it is considered part of the public API
      * that needs to be maintained for backwards compatibility.
      * Use {@link #encode(String)} instead.

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -169,7 +169,7 @@ public Locale get() {
                 }
             });
 
-            // quick check to see if we (seem to) have enough permissions to run. (see #719)
+            // quick check to see if we (seem to) have enough permissions to run. (see JENKINS-719)
             JVM jvm;
             try {
                 jvm = new JVM();
@@ -392,7 +392,7 @@ public FileAndDescription getHomeDir(ServletContextEvent event) {
                 String value = (String) env.lookup(name);
                 if(value!=null && value.trim().length()>0)
                     return new FileAndDescription(new File(value.trim()),"JNDI/java:comp/env/"+name);
-                // look at one more place. See issue #1314
+                // look at one more place. See issue JENKINS-1314
                 value = (String) iniCtxt.lookup(name);
                 if(value!=null && value.trim().length()>0)
                     return new FileAndDescription(new File(value.trim()),"JNDI/"+name);

File: core/src/main/java/hudson/model/BallColor.java
Patch:
@@ -49,7 +49,7 @@
  * Hudson started to overload colors &mdash; for example grey could mean
  * either disabled, aborted, or not yet built. As a result, {@link BallColor}
  * becomes more like a "logical" color, in the sense that different {@link BallColor}
- * values can map to the same RGB color. See issue #956.
+ * values can map to the same RGB color. See JENKINS-956.
  *
  * @author Kohsuke Kawaguchi
  */

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -277,7 +277,7 @@ public synchronized boolean isHoldOffBuildUntilSave() {
     }
 
     protected synchronized void saveNextBuildNumber() throws IOException {
-        if (nextBuildNumber == 0) { // #3361
+        if (nextBuildNumber == 0) { // JENKINS-3361
             nextBuildNumber = 1;
         }
         getNextBuildNumberFile().write(String.valueOf(nextBuildNumber) + '\n');

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -1949,7 +1949,7 @@ protected final void execute(@NonNull RunExecution job) {
                 // the significance of doing this is that Jenkins
                 // will now see this build as completed.
                 // things like triggering other builds requires this as pre-condition.
-                // see issue #980.
+                // see issue JENKINS-980.
                 LOGGER.log(FINER, "moving into POST_PRODUCTION on {0}", this);
                 state = State.POST_PRODUCTION;
 

File: core/src/main/java/hudson/scm/SCM.java
Patch:
@@ -185,7 +185,7 @@ public boolean supportsPolling() {
      * The default implementation returns true.
      *
      * <p>
-     * See issue #1348 for more discussion of this feature.
+     * See issue JENKINS-1348 for more discussion of this feature.
      *
      * @since 1.196
      */

File: core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java
Patch:
@@ -78,7 +78,7 @@ protected String determineTargetUrl(HttpServletRequest request) {
             return targetUrl.substring(request.getContextPath().length());
 
         // not sure when this happens, but apparently this happens in some case.
-        // see #1274
+        // see JENKINS-1274
         return targetUrl;
     }
 

File: core/src/main/java/hudson/security/HudsonFilter.java
Patch:
@@ -104,7 +104,7 @@ public void init(FilterConfig filterConfig) throws ServletException {
         try {
             Jenkins hudson = Jenkins.getInstanceOrNull();
             if (hudson != null) {
-                // looks like we are initialized after Hudson came into being. initialize it now. See #3069
+                // looks like we are initialized after Hudson came into being. initialize it now. See JENKINS-3069
                 LOGGER.fine("Security wasn't initialized; Initializing it...");
                 SecurityRealm securityRealm = hudson.getSecurityRealm();
                 reset(securityRealm);

File: core/src/main/java/hudson/security/RememberMeServicesProxy.java
Patch:
@@ -39,7 +39,7 @@
  * In Jenkins, we need {@link Jenkins} instance to perform remember-me service,
  * because it relies on {@link ConfidentialStore}. However, security
  * filters can be initialized before Jenkins is initialized.
- * (See #1210 for example.)
+ * (See JENKINS-1210 for example.)
  *
  * <p>
  * So to work around the problem, we use a proxy.

File: core/src/main/java/hudson/tasks/BuildTrigger.java
Patch:
@@ -348,7 +348,7 @@ public boolean onJobRenamed(String oldName, String newName) {
     }
 
     /**
-     * Correct broken data gracefully (#1537)
+     * Correct broken data gracefully (JENKINS-1537)
      */
     private Object readResolve() {
         if(childProjects==null)

File: core/src/main/java/hudson/util/ChartUtil.java
Patch:
@@ -198,7 +198,7 @@ protected JFreeChart createGraph() {
      * (So for example if N=3 then we can "fix" the graph as long as we only have less than 1/(3*3)=11.111...% bad data.
      *
      * <p>
-     * Also see issue #1246.
+     * Also see JENKINS-1246.
      */
     public static void adjustChebyshev(CategoryDataset dataset, NumberAxis yAxis) {
         // first compute E(X) and Var(X)

File: test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java
Patch:
@@ -38,8 +38,7 @@ public class BasicHeaderProcessorTest {
 
     @Before
     public void prepareListeners(){
-        //TODO simplify using #3021 into ExtensionList.lookupSingleton(SpySecurityListener.class)
-        this.spySecurityListener = ExtensionList.lookup(SecurityListener.class).get(SpySecurityListenerImpl.class);
+        this.spySecurityListener = ExtensionList.lookupSingleton(SpySecurityListener.class);
     }
 
     /**

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -31,6 +31,7 @@
 import hudson.util.CyclicGraphDetector.CycleDetectedException;
 import hudson.util.IOUtils;
 import hudson.util.MaskingClassLoader;
+import java.lang.reflect.InvocationTargetException;
 import jenkins.ClassLoaderReflectionToolkit;
 import jenkins.ExtensionFilter;
 import jenkins.plugins.DetachedPluginsUtil;
@@ -379,14 +380,14 @@ public void load(PluginWrapper wrapper) throws IOException {
             } else {
                 try {
                     Class<?> clazz = wrapper.classLoader.loadClass(className);
-                    Object o = clazz.newInstance();
+                    Object o = clazz.getDeclaredConstructor().newInstance();
                     if(!(o instanceof Plugin)) {
                         throw new IOException(className+" doesn't extend from hudson.Plugin");
                     }
                     wrapper.setPlugin((Plugin) o);
                 } catch (LinkageError | ClassNotFoundException e) {
                     throw new IOException("Unable to load " + className + " from " + wrapper.getShortName(),e);
-                } catch (IllegalAccessException | InstantiationException e) {
+                } catch (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {
                     throw new IOException("Unable to create instance of " + className + " from " + wrapper.getShortName(),e);
                 }
             }

File: core/src/main/java/hudson/cli/Connection.java
Patch:
@@ -268,7 +268,7 @@ public PublicKey verifyIdentity(byte[] sharedSecret) throws IOException, General
 
             return spk;
         } catch (ClassNotFoundException e) {
-            throw new Error(e); // impossible
+            throw new AssertionError(e); // impossible
         }
     }
 

File: core/src/main/java/hudson/model/ComputerSet.java
Patch:
@@ -37,6 +37,7 @@
 import hudson.util.DescribableList;
 import hudson.util.FormApply;
 import hudson.util.FormValidation;
+import java.lang.reflect.InvocationTargetException;
 import jenkins.model.Jenkins;
 import jenkins.model.ModelObjectWithChildren;
 import jenkins.model.ModelObjectWithContextMenu.ContextMenu;
@@ -474,10 +475,10 @@ public static List<String> getComputerNames() {
 
     private static NodeMonitor createDefaultInstance(Descriptor<NodeMonitor> d, boolean ignored) {
         try {
-            NodeMonitor nm = d.clazz.newInstance();
+            NodeMonitor nm = d.clazz.getDeclaredConstructor().newInstance();
             nm.setIgnored(ignored);
             return nm;
-        } catch (InstantiationException | IllegalAccessException e) {
+        } catch (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {
             LOGGER.log(Level.SEVERE, "Failed to instantiate "+d.clazz,e);
         }
         return null;

File: core/src/main/java/jenkins/model/lazy/LazyBuildMixIn.java
Patch:
@@ -165,7 +165,7 @@ public RunT loadBuild(File dir) throws IOException {
         try {
             return getBuildClass().getConstructor(asJob().getClass(), File.class).newInstance(asJob(), dir);
         } catch (InstantiationException | NoSuchMethodException | IllegalAccessException e) {
-            throw new Error(e);
+            throw new LinkageError(e.getMessage(), e);
         } catch (InvocationTargetException e) {
             throw handleInvocationTargetException(e);
         }
@@ -187,7 +187,7 @@ public final synchronized RunT newBuild() throws IOException {
             throw handleInvocationTargetException(e);
         } catch (ReflectiveOperationException | IllegalStateException e) {
             LOGGER.log(Level.WARNING, String.format("A new build could not be created in job %s", asJob().getFullName()), e);
-            throw new Error(e);
+            throw new LinkageError(e.getMessage(), e);
         }
     }
 

File: core/src/main/java/jenkins/util/AntWithFindResourceClassLoader.java
Patch:
@@ -23,7 +23,7 @@ public AntWithFindResourceClassLoader(ClassLoader parent, boolean parentFirst) {
             $pathComponents.setAccessible(true);
             pathComponents = (ArrayList<File>)$pathComponents.get(this);
         } catch (NoSuchFieldException | IllegalAccessException e) {
-            throw new Error(e);
+            throw new LinkageError(e.getMessage(), e);
         }
     }
 

File: core/src/test/java/hudson/util/SubClassGeneratorTest.java
Patch:
@@ -49,7 +49,7 @@ public void foo() throws Exception {
         Class<? extends Foo> c = new SubClassGenerator(getClass().getClassLoader()).generate(Foo.class, "12345");
         assertEquals("12345",c.getName());
 
-        c.newInstance();
+        c.getDeclaredConstructor().newInstance();
 
         Foo f = c.getConstructor(String.class).newInstance("aaa");
         assertEquals("aaa",f.s);

File: test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java
Patch:
@@ -160,7 +160,7 @@ public Object callFunction(HtmlPage page, Function function, Scriptable scope, S
                         }
                     }
                 } catch (NoSuchFieldException | IllegalAccessException e) {
-                    e.printStackTrace();
+                    throw new LinkageError(e.getMessage(), e);
                 }
             }
             return super.callFunction(page, function, scope, thisObject, args);

File: core/src/main/java/hudson/Util.java
Patch:
@@ -1414,7 +1414,7 @@ public static String resolveSymlink(@NonNull File link) throws IOException {
      * but don't remember it right now.
      *
      * @since 1.204
-     * @deprecated since 2008-05-13. This method is broken (see ISSUE#1666). It should probably
+     * @deprecated since 2008-05-13. This method is broken (see JENKINS-1666). It should probably
      * be removed but I'm not sure if it is considered part of the public API
      * that needs to be maintained for backwards compatibility.
      * Use {@link #encode(String)} instead.

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -169,7 +169,7 @@ public Locale get() {
                 }
             });
 
-            // quick check to see if we (seem to) have enough permissions to run. (see #719)
+            // quick check to see if we (seem to) have enough permissions to run. (see JENKINS-719)
             JVM jvm;
             try {
                 jvm = new JVM();
@@ -392,7 +392,7 @@ public FileAndDescription getHomeDir(ServletContextEvent event) {
                 String value = (String) env.lookup(name);
                 if(value!=null && value.trim().length()>0)
                     return new FileAndDescription(new File(value.trim()),"JNDI/java:comp/env/"+name);
-                // look at one more place. See issue #1314
+                // look at one more place. See issue JENKINS-1314
                 value = (String) iniCtxt.lookup(name);
                 if(value!=null && value.trim().length()>0)
                     return new FileAndDescription(new File(value.trim()),"JNDI/"+name);

File: core/src/main/java/hudson/model/BallColor.java
Patch:
@@ -49,7 +49,7 @@
  * Hudson started to overload colors &mdash; for example grey could mean
  * either disabled, aborted, or not yet built. As a result, {@link BallColor}
  * becomes more like a "logical" color, in the sense that different {@link BallColor}
- * values can map to the same RGB color. See issue #956.
+ * values can map to the same RGB color. See JENKINS-956.
  *
  * @author Kohsuke Kawaguchi
  */

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -277,7 +277,7 @@ public synchronized boolean isHoldOffBuildUntilSave() {
     }
 
     protected synchronized void saveNextBuildNumber() throws IOException {
-        if (nextBuildNumber == 0) { // #3361
+        if (nextBuildNumber == 0) { // JENKINS-3361
             nextBuildNumber = 1;
         }
         getNextBuildNumberFile().write(String.valueOf(nextBuildNumber) + '\n');

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -1949,7 +1949,7 @@ protected final void execute(@NonNull RunExecution job) {
                 // the significance of doing this is that Jenkins
                 // will now see this build as completed.
                 // things like triggering other builds requires this as pre-condition.
-                // see issue #980.
+                // see issue JENKINS-980.
                 LOGGER.log(FINER, "moving into POST_PRODUCTION on {0}", this);
                 state = State.POST_PRODUCTION;
 

File: core/src/main/java/hudson/scm/SCM.java
Patch:
@@ -185,7 +185,7 @@ public boolean supportsPolling() {
      * The default implementation returns true.
      *
      * <p>
-     * See issue #1348 for more discussion of this feature.
+     * See issue JENKINS-1348 for more discussion of this feature.
      *
      * @since 1.196
      */

File: core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java
Patch:
@@ -78,7 +78,7 @@ protected String determineTargetUrl(HttpServletRequest request) {
             return targetUrl.substring(request.getContextPath().length());
 
         // not sure when this happens, but apparently this happens in some case.
-        // see #1274
+        // see JENKINS-1274
         return targetUrl;
     }
 

File: core/src/main/java/hudson/security/HudsonFilter.java
Patch:
@@ -104,7 +104,7 @@ public void init(FilterConfig filterConfig) throws ServletException {
         try {
             Jenkins hudson = Jenkins.getInstanceOrNull();
             if (hudson != null) {
-                // looks like we are initialized after Hudson came into being. initialize it now. See #3069
+                // looks like we are initialized after Hudson came into being. initialize it now. See JENKINS-3069
                 LOGGER.fine("Security wasn't initialized; Initializing it...");
                 SecurityRealm securityRealm = hudson.getSecurityRealm();
                 reset(securityRealm);

File: core/src/main/java/hudson/security/RememberMeServicesProxy.java
Patch:
@@ -39,7 +39,7 @@
  * In Jenkins, we need {@link Jenkins} instance to perform remember-me service,
  * because it relies on {@link ConfidentialStore}. However, security
  * filters can be initialized before Jenkins is initialized.
- * (See #1210 for example.)
+ * (See JENKINS-1210 for example.)
  *
  * <p>
  * So to work around the problem, we use a proxy.

File: core/src/main/java/hudson/tasks/BuildTrigger.java
Patch:
@@ -348,7 +348,7 @@ public boolean onJobRenamed(String oldName, String newName) {
     }
 
     /**
-     * Correct broken data gracefully (#1537)
+     * Correct broken data gracefully (JENKINS-1537)
      */
     private Object readResolve() {
         if(childProjects==null)

File: core/src/main/java/hudson/util/ChartUtil.java
Patch:
@@ -198,7 +198,7 @@ protected JFreeChart createGraph() {
      * (So for example if N=3 then we can "fix" the graph as long as we only have less than 1/(3*3)=11.111...% bad data.
      *
      * <p>
-     * Also see issue #1246.
+     * Also see JENKINS-1246.
      */
     public static void adjustChebyshev(CategoryDataset dataset, NumberAxis yAxis) {
         // first compute E(X) and Var(X)

File: test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java
Patch:
@@ -38,8 +38,7 @@ public class BasicHeaderProcessorTest {
 
     @Before
     public void prepareListeners(){
-        //TODO simplify using #3021 into ExtensionList.lookupSingleton(SpySecurityListener.class)
-        this.spySecurityListener = ExtensionList.lookup(SecurityListener.class).get(SpySecurityListenerImpl.class);
+        this.spySecurityListener = ExtensionList.lookupSingleton(SpySecurityListener.class);
     }
 
     /**

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -67,8 +67,6 @@
 import java.util.TreeMap;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import java.util.stream.Stream;
-import java.util.stream.StreamSupport;
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import org.springframework.security.access.AccessDeniedException;
@@ -1184,7 +1182,7 @@ public synchronized boolean trim() throws IOException {
         return new AbstractCollection<FingerprintFacet>() {
             @Override
             public Iterator<FingerprintFacet> iterator() {
-                return Stream.concat(StreamSupport.stream(facets.spliterator(), false), transientFacets.stream()).iterator();
+                return Iterators.sequence(facets.iterator(), transientFacets.iterator());
             }
 
             @Override

File: core/src/main/java/hudson/model/AperiodicWork.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.ExtensionList;
 import hudson.ExtensionListListener;
 import hudson.ExtensionPoint;
@@ -50,6 +51,7 @@
  * @author vjuranek
  * @since 1.410
  */
+@SuppressFBWarnings(value="PREDICTABLE_RANDOM", justification = "The random is just used for an initial delay.")
 public abstract class AperiodicWork extends SafeTimerTask implements ExtensionPoint {
 	
 	protected final Logger logger = Logger.getLogger(getClass().getName());

File: core/src/main/java/hudson/model/PeriodicWork.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.ExtensionListListener;
 import hudson.init.Initializer;
 import hudson.triggers.SafeTimerTask;
@@ -58,6 +59,7 @@
  * @author Kohsuke Kawaguchi
  * @see AsyncPeriodicWork
  */
+@SuppressFBWarnings(value="PREDICTABLE_RANDOM", justification = "The random is just used for an initial delay.")
 public abstract class PeriodicWork extends SafeTimerTask implements ExtensionPoint {
 
     /** @deprecated Use your own logger, or send messages to the logger in {@link AsyncPeriodicWork#execute}. */

File: core/src/main/java/hudson/scheduler/Hash.java
Patch:
@@ -54,6 +54,7 @@ public abstract class Hash {
      */
     public abstract int next(int n);
 
+    @SuppressFBWarnings(value="PREDICTABLE_RANDOM", justification = "The random is just used for load distribution.")
     public static Hash from(String seed) {
         try {
             MessageDigest md5 = getMd5();

File: core/src/main/java/hudson/tasks/Fingerprinter.java
Patch:
@@ -70,7 +70,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Random;
 import java.util.Set;
 import java.util.TreeMap;
 import java.util.logging.Level;
@@ -362,8 +361,6 @@ public boolean isApplicable(Class<? extends AbstractProject> jobType) {
     public static final class FingerprintAction implements RunAction2 {
 
         private transient Run build;
-        
-        private static final Random rand = new Random();
 
         /**
          * From file name to the digest.

File: core/src/main/java/hudson/util/DoubleLaunchChecker.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.util;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.init.Initializer;
 import jenkins.model.Jenkins;
 import hudson.triggers.SafeTimerTask;
@@ -68,6 +69,7 @@
  * @author Kohsuke Kawaguchi
  * @since 1.178
  */
+@SuppressFBWarnings(value="PREDICTABLE_RANDOM", justification = "The random is just used for load distribution.")
 public class DoubleLaunchChecker {
     /**
      * The timestamp of the owner file when we updated it for the last time.

File: core/src/main/java/hudson/util/io/ZipArchiver.java
Patch:
@@ -94,6 +94,7 @@ public void visit(final File f, final String _relativePath) throws IOException {
             ZipEntry fileZipEntry = new ZipEntry(this.prefix + relativePath);
             if (mode!=-1)   fileZipEntry.setUnixMode(mode);
             fileZipEntry.setTime(f.lastModified());
+            fileZipEntry.setSize(f.length());
             zip.putNextEntry(fileZipEntry);
             try (InputStream in = Files.newInputStream(f.toPath(), openOptions)) {
                 int len;

File: core/src/test/java/hudson/UtilTest.java
Patch:
@@ -339,7 +339,7 @@ private static class DigesterThread extends Thread {
 
 		private String error;
 
-		public DigesterThread(String string, String expectedDigest) {
+		DigesterThread(String string, String expectedDigest) {
     		this.string = string;
     		this.expectedDigest = expectedDigest;
     	}

File: core/src/test/java/hudson/model/ParameterDefinitionTest.java
Patch:
@@ -154,15 +154,15 @@ public void newMethod() {
     }
 
     static class ExtendStringParameterDefinition extends StringParameterDefinition {
-        public ExtendStringParameterDefinition(String name, String defaultValue, String description, boolean trim) {
+        ExtendStringParameterDefinition(String name, String defaultValue, String description, boolean trim) {
             super(name, defaultValue, description, trim);
         }
 
-        public ExtendStringParameterDefinition(String name, String defaultValue, String description) {
+        ExtendStringParameterDefinition(String name, String defaultValue, String description) {
             super(name, defaultValue, description);
         }
 
-        public ExtendStringParameterDefinition(String name, String defaultValue) {
+        ExtendStringParameterDefinition(String name, String defaultValue) {
             super(name, defaultValue);
         }
     }

File: core/src/test/java/hudson/model/StubJob.java
Patch:
@@ -36,7 +36,7 @@ class StubJob extends Job {
 
     public static final String DEFAULT_STUB_JOB_NAME = "StubJob";
     
-    public StubJob() {
+    StubJob() {
         super(null, DEFAULT_STUB_JOB_NAME);
     }
     

File: core/src/test/java/hudson/model/UpdateCenterTest.java
Patch:
@@ -166,7 +166,7 @@ private static class MockDownloadJob implements UpdateCenter.WithComputedChecksu
         private final String computedSHA256;
         private final String computedSHA512;
 
-        public MockDownloadJob(String computedSHA1, String computedSHA256, String computedSHA512) {
+        MockDownloadJob(String computedSHA1, String computedSHA256, String computedSHA512) {
             this.computedSHA1 = computedSHA1;
             this.computedSHA256 = computedSHA256;
             this.computedSHA512 = computedSHA512;

File: core/src/test/java/hudson/os/DCOMSandbox.java
Patch:
@@ -46,7 +46,7 @@ protected String getSyntax() {
             return "99fcfec4-5260-101b-bbcb-00aa0021347a:0.0";
         }
 
-        public JIComOxidStub(String address, String domain, String username, String password) {
+        JIComOxidStub(String address, String domain, String username, String password) {
             setTransportFactory(JIComTransportFactory.getSingleTon());
             setProperties(new Properties(defaults));
             getProperties().setProperty("rpc.security.username", username);

File: core/src/test/java/hudson/util/DirScannerTest.java
Patch:
@@ -90,7 +90,7 @@ private static class MatchingFileVisitor extends FileVisitor {
         
         public final String filename;
         
-        public MatchingFileVisitor(String filename) {
+        MatchingFileVisitor(String filename) {
             this.filename = filename;
         }
     

File: core/src/test/java/hudson/util/io/TarArchiverTest.java
Patch:
@@ -141,7 +141,7 @@ private static class GrowingFileRunnable implements Runnable {
         private Exception ex = null;
         private File file;
 
-        public GrowingFileRunnable(File file) {
+        GrowingFileRunnable(File file) {
             this.file = file;
         }
 

File: core/src/test/java/jenkins/util/VirtualFileTest.java
Patch:
@@ -1592,11 +1592,11 @@ public InputStream open() throws IOException {
 
     private static class VirtualFileMinimalImplementationWithDescendants extends VirtualFileMinimalImplementation {
 
-        public VirtualFileMinimalImplementationWithDescendants(File file) {
+        VirtualFileMinimalImplementationWithDescendants(File file) {
             super(file);
         }
 
-        public VirtualFileMinimalImplementationWithDescendants(File file, File root) {
+        VirtualFileMinimalImplementationWithDescendants(File file, File root) {
             super(file, root);
         }
 

File: core/src/test/java/jenkins/widgets/HistoryPageFilterTest.java
Patch:
@@ -412,12 +412,12 @@ private HistoryPageFilter<ModelObject> newPage(int maxEntries, Long newerThan, L
     private static class MockRun extends Run {
         private final long queueId;
 
-        public MockRun(long queueId) throws IOException {
+        MockRun(long queueId) throws IOException {
             super(Mockito.mock(Job.class));
             this.queueId = queueId;
         }
 
-        public MockRun(long queueId, Result result) throws IOException {
+        MockRun(long queueId, Result result) throws IOException {
             this(queueId);
             this.result = result;
         }
@@ -450,7 +450,7 @@ public int getNumber() {
 
     // A version of MockRun that will throw an exception if getQueueId or getNumber is called
     private static class ExplodingMockRun extends MockRun {
-        public ExplodingMockRun(long queueId) throws IOException {
+        ExplodingMockRun(long queueId) throws IOException {
             super(queueId);
         }
 

File: test/src/test/java/hudson/PluginManagerInstalledGUITest.java
Patch:
@@ -179,7 +179,7 @@ private class InstalledPlugin {
 
         private final HtmlTableRow pluginRow;
 
-        public InstalledPlugin(HtmlTableRow pluginRow) {
+        InstalledPlugin(HtmlTableRow pluginRow) {
             this.pluginRow = pluginRow;
         }
         

File: test/src/test/java/hudson/model/CauseTest.java
Patch:
@@ -233,7 +233,7 @@ public CustomBuild(FullNameChangingProject job) throws IOException {
     static class FullNameChangingProject extends Project<FullNameChangingProject, CustomBuild> implements TopLevelItem {
         private volatile String virtualName;
 
-        public FullNameChangingProject(ItemGroup parent, String name) {
+        FullNameChangingProject(ItemGroup parent, String name) {
             super(parent, name);
         }
 

File: test/src/test/java/hudson/model/ComputerConfigDotXmlTest.java
Patch:
@@ -267,7 +267,7 @@ class Stream extends ServletInputStream {
 
             private final InputStream inner;
 
-            public Stream(final InputStream inner) {
+            Stream(final InputStream inner) {
                 this.inner = inner;
             }
 

File: test/src/test/java/hudson/model/FingerprintCleanupThreadTest.java
Patch:
@@ -236,7 +236,7 @@ private static class TestFileFingerprintStorage extends FileFingerprintStorage {
 
         private Fingerprint fingerprintToLoad;
 
-        public TestFileFingerprintStorage(Fingerprint fingerprintToLoad) {
+        TestFileFingerprintStorage(Fingerprint fingerprintToLoad) {
             this.fingerprintToLoad = fingerprintToLoad;
         }
 
@@ -291,11 +291,11 @@ private static class TestFingerprint extends Fingerprint {
 
         private boolean isAlive = true;
 
-        public TestFingerprint() throws IOException {
+        TestFingerprint() throws IOException {
             super(ptr, "foo", Util.fromHexString(Util.getDigestOf("foo")));
         }
 
-        public TestFingerprint(boolean isAlive) throws IOException {
+        TestFingerprint(boolean isAlive) throws IOException {
             super(ptr, "foo", Util.fromHexString(Util.getDigestOf("foo")));
             this.isAlive = isAlive;
         }

File: test/src/test/java/hudson/model/JobTest.java
Patch:
@@ -553,7 +553,7 @@ public void interruptOnDelete() throws Exception {
     static class NameChangingNode extends Slave {
         private String virtualName;
 
-        public NameChangingNode(JenkinsRule j, String name) throws Exception {
+        NameChangingNode(JenkinsRule j, String name) throws Exception {
             super(name, "dummy", j.createTmpDir().getPath(), "1", Node.Mode.NORMAL, "", j.createComputerLauncher(null), RetentionStrategy.NOOP, new ArrayList<>());
         }
 

File: test/src/test/java/hudson/model/ListViewTest.java
Patch:
@@ -388,7 +388,7 @@ private static class AllButViewsAuthorizationStrategy extends AuthorizationStrat
     private static class Stream extends ServletInputStream {
         private final InputStream inner;
 
-        public Stream(final InputStream inner) {
+        Stream(final InputStream inner) {
             this.inner = inner;
         }
 

File: test/src/test/java/hudson/model/RunParameterDefinitionTest.java
Patch:
@@ -275,7 +275,7 @@ static class ResultPublisher extends Publisher {
 
         private final Result result;
 
-        public ResultPublisher(Result result) {
+        ResultPublisher(Result result) {
             this.result = result;
         }
 

File: test/src/test/java/hudson/model/RunTest.java
Patch:
@@ -182,7 +182,7 @@ public CustomBuild(FullNameChangingProject job) throws IOException {
     static class FullNameChangingProject extends Project<FullNameChangingProject, CustomBuild> implements TopLevelItem {
         private volatile String virtualName;
 
-        public FullNameChangingProject(ItemGroup parent, String name) {
+        FullNameChangingProject(ItemGroup parent, String name) {
             super(parent, name);
         }
 
@@ -219,7 +219,7 @@ public FullNameChangingProject newInstance(ItemGroup parent, String name) {
         }
     }
     
-    private static final class Mgr extends ArtifactManager {
+    public static final class Mgr extends ArtifactManager {
         static final AtomicBoolean deleted = new AtomicBoolean();
         @Override public boolean delete() throws IOException, InterruptedException {
             return !deleted.getAndSet(true);

File: test/src/test/java/hudson/model/SimpleJobTest.java
Patch:
@@ -127,7 +127,7 @@ private Job createMockProject(final SortedMap<Integer, TestBuild> runs) {
     @SuppressWarnings("unchecked")
     private static class TestBuild extends Run {
         
-        public TestBuild(Job project, Result result, long duration, TestBuild previousBuild) throws IOException {
+        TestBuild(Job project, Result result, long duration, TestBuild previousBuild) throws IOException {
             super(project);
             this.result = result;
             this.duration = duration;
@@ -156,7 +156,7 @@ private class TestJob extends Job implements TopLevelItem {
         int i;
         private final SortedMap<Integer, TestBuild> runs;
 
-        public TestJob(SortedMap<Integer, TestBuild> runs) {
+        TestJob(SortedMap<Integer, TestBuild> runs) {
             super(rule.jenkins, "name");
             this.runs = runs;
             i = 1;

File: test/src/test/java/hudson/model/UpdateCenterCustomTest.java
Patch:
@@ -53,7 +53,7 @@ private static final class CustomUpdateCenterRule extends JenkinsRule {
         
         private static final String PROPERTY_NAME = UpdateCenter.class.getName()+".className";
 
-        public CustomUpdateCenterRule(Class<?> ucClass) {
+        CustomUpdateCenterRule(Class<?> ucClass) {
             this.updateCenterClassName = ucClass.getName();
         }
 
@@ -87,4 +87,4 @@ public CustomUpdateCenter(UpdateCenterConfiguration config) {
         }
         
     }
-}
\ No newline at end of file
+}

File: test/src/test/java/hudson/model/ViewDescriptorTest.java
Patch:
@@ -156,7 +156,7 @@ public String getSomeProperty() {
             return this.someProperty;
         }
 
-        public CustomInvisibleProperty() {
+        CustomInvisibleProperty() {
             this.someProperty = "undefined";
         }
 

File: test/src/test/java/hudson/model/WorkspaceCleanupThreadTest.java
Patch:
@@ -205,7 +205,7 @@ private void performCleanup() throws InterruptedException, IOException {
 
     private static final class VetoSCM extends NullSCM {
         private final boolean answer;
-        public VetoSCM(boolean answer) {
+        VetoSCM(boolean answer) {
             this.answer = answer;
         }
 
@@ -221,7 +221,7 @@ private static final class Touch extends MasterToSlaveFileCallable<Void> {
         private static final long serialVersionUID = 1L;
         private final long time;
 
-        public Touch(long time) {
+        Touch(long time) {
             this.time = time;
         }
 

File: test/src/test/java/hudson/model/labels/LabelAtomTest.java
Patch:
@@ -74,7 +74,7 @@ private static class TestCloud extends Cloud {
 
         private final List<Label> labels;
 
-        public TestCloud(String name, String labelString) {
+        TestCloud(String name, String labelString) {
             super(name);
             labels = new ArrayList<>();
             for (String l : labelString.split(" ")) {

File: test/src/test/java/hudson/slaves/JNLPLauncherTest.java
Patch:
@@ -197,13 +197,13 @@ public void onOffline(Computer c) {
     }
 
     private static class DelegatingComputerLauncherImpl extends DelegatingComputerLauncher {
-        public DelegatingComputerLauncherImpl(ComputerLauncher launcher) {
+        DelegatingComputerLauncherImpl(ComputerLauncher launcher) {
             super(launcher);
         }
     }
 
     private static class ComputerLauncherFilterImpl extends ComputerLauncherFilter {
-        public ComputerLauncherFilterImpl(ComputerLauncher launcher) {
+        ComputerLauncherFilterImpl(ComputerLauncher launcher) {
             super(launcher);
         }
     }

File: test/src/test/java/hudson/tasks/BuildTriggerTest.java
Patch:
@@ -325,7 +325,7 @@ public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener, Li
             }
         }
 
-        public SlowTrigger(String childProjects) {
+        SlowTrigger(String childProjects) {
             super(childProjects, true);
         }
 

File: test/src/test/java/hudson/triggers/SCMTriggerTest.java
Patch:
@@ -114,7 +114,7 @@ private static class TestSCM extends NullSCM {
         private volatile int myRev = 1;
         private final OneShotEvent checkoutStarted;
 
-        public TestSCM(OneShotEvent checkoutStarted) {
+        TestSCM(OneShotEvent checkoutStarted) {
             this.checkoutStarted = checkoutStarted;
         }
 

File: test/src/test/java/hudson/util/XStream2Security383Test.java
Patch:
@@ -124,7 +124,7 @@ public void testPostJobXml() throws Exception {
     private static class Stream extends ServletInputStream {
         private final InputStream inner;
 
-        public Stream(final InputStream inner) {
+        Stream(final InputStream inner) {
             this.inner = inner;
         }
 

File: test/src/test/java/jenkins/install/SetupWizardTest.java
Patch:
@@ -393,7 +393,7 @@ private String getWebServerResource(String target, String version) throws IOExce
     private static class CustomJSONSignatureValidator extends JSONSignatureValidator {
         private String cert;
 
-        public CustomJSONSignatureValidator(String cert) {
+        CustomJSONSignatureValidator(String cert) {
             super("Custom JSON signature validator");
             this.cert = cert;
         }

File: test/src/test/java/jenkins/model/NodesTest.java
Patch:
@@ -140,7 +140,7 @@ private static class InvalidNode extends Slave {
         // JEP-200 whitelist changes prevent this field (and thus instances of this class) from being serialized.
         private ClassLoader cl = InvalidNode.class.getClassLoader();
 
-        public InvalidNode(String name, String remoteFS, ComputerLauncher launcher) throws Descriptor.FormException, IOException {
+        InvalidNode(String name, String remoteFS, ComputerLauncher launcher) throws Descriptor.FormException, IOException {
             super(name, remoteFS, launcher);
         }
     }

File: test/src/test/java/jenkins/model/TransientActionFactoryTest.java
Patch:
@@ -192,7 +192,7 @@ private static class MyProminentProjectAction extends InvisibleAction implements
 
         private String allocation;
 
-        public MyProminentProjectAction() {
+        MyProminentProjectAction() {
             StringWriter sw = new StringWriter();
             PrintWriter pw = new PrintWriter(sw);
             new Exception("MyProminentProjectAction allocated at: ").printStackTrace(pw);

File: test/src/test/java/jenkins/security/Security637Test.java
Patch:
@@ -78,7 +78,7 @@ public void evaluate() throws Exception {
     private static class URLHandlerCallable extends MasterToSlaveCallable<String, Exception> {
         private URL url;
         
-        public URLHandlerCallable(URL url) {
+        URLHandlerCallable(URL url) {
             this.url = url;
         }
         
@@ -130,7 +130,7 @@ public void evaluate() throws Exception {
     private static class URLBuilderCallable extends MasterToSlaveCallable<URL, Exception> {
         private String url;
         
-        public URLBuilderCallable(String url) {
+        URLBuilderCallable(String url) {
             this.url = url;
         }
         
@@ -170,7 +170,7 @@ public void evaluate() throws Exception {
     private static class URLTransferCallable extends MasterToSlaveCallable<URL, Exception> {
         private URL url;
         
-        public URLTransferCallable(URL url) {
+        URLTransferCallable(URL url) {
             this.url = url;
         }
         

File: test/src/test/java/jenkins/widgets/HistoryPageFilterCaseSensitiveSearchTest.java
Patch:
@@ -91,12 +91,12 @@ private void assertNoMatchingBuildsForGivenSearchStringAndRunItems(String search
     private static class MockRun extends Run {
         private final long queueId;
 
-        public MockRun(long queueId) throws IOException {
+        MockRun(long queueId) throws IOException {
             super(Mockito.mock(Job.class));
             this.queueId = queueId;
         }
 
-        public MockRun(long queueId, Result result) throws IOException {
+        MockRun(long queueId, Result result) throws IOException {
             this(queueId);
             this.result = result;
         }

File: test/src/test/java/hudson/triggers/SCMTriggerTest.java
Patch:
@@ -118,8 +118,8 @@ public TestSCM(OneShotEvent checkoutStarted) {
             this.checkoutStarted = checkoutStarted;
         }
 
-        @Override synchronized
-        public boolean pollChanges(AbstractProject project, Launcher launcher, FilePath dir, TaskListener listener) throws IOException {
+        @Override
+        public synchronized boolean pollChanges(AbstractProject project, Launcher launcher, FilePath dir, TaskListener listener) throws IOException {
             return myRev < 2;
         }
 

File: test/src/test/java/jenkins/widgets/HistoryPageFilterCaseSensitiveSearchTest.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.List;
 
 import org.junit.Assert;
 import org.junit.Rule;

File: core/src/test/java/hudson/model/listeners/SCMListenerTest.java
Patch:
@@ -92,4 +92,4 @@ private static class L3 extends L {
         }
     }
 
-}
\ No newline at end of file
+}

File: core/src/test/java/hudson/os/WindowsUtilTest.java
Patch:
@@ -63,4 +63,4 @@ public void testQuoteArgumentForCmd_OnlyQuotesWhenNecessary() {
             assertEquals(arg, WindowsUtil.quoteArgumentForCmd(arg));
         }
     }
-}
\ No newline at end of file
+}

File: core/src/test/java/jenkins/model/NewViewLinkTest.java
Patch:
@@ -66,4 +66,4 @@ public void getActionsNotModifiableOwner() throws Exception {
         assertThat(actions, hasSize(0));
     }
 
-}
\ No newline at end of file
+}

File: core/src/test/java/jenkins/model/labels/LabelAutoCompleteSeederTest.java
Patch:
@@ -67,4 +67,4 @@ public void testAutoCompleteSeeds(String underTest, List<String> expected) {
         assertEquals(expected, seeder.getSeeds());
 
     }
-}
\ No newline at end of file
+}

File: core/src/test/java/jenkins/model/lazy/FakeMap.java
Patch:
@@ -65,4 +65,4 @@ public void asserts(int n) {
         return "Build #" + n + " @" + hashCode();
     }
 
-}
\ No newline at end of file
+}

File: core/src/test/java/jenkins/util/TimeDurationTest.java
Patch:
@@ -22,4 +22,4 @@ public void fromString() throws Exception {
         assertEquals(21, TimeDuration.fromString(" 21  secs ").getTimeInSeconds());
     }
 
-}
\ No newline at end of file
+}

File: core/src/test/java/org/acegisecurity/util/OuterClassWithPublicFinalField.java
Patch:
@@ -7,4 +7,4 @@ public class OuterClassWithPublicFinalField {
     public String getMyField() {
         return myField;
     }
-}
\ No newline at end of file
+}

File: test/src/test/java/hudson/bugs/seasar/package-info.java
Patch:
@@ -24,4 +24,4 @@
 /**
  * Bugs discovered in https://www.seasar.org/hudson/
  */
-package hudson.bugs.seasar;
\ No newline at end of file
+package hudson.bugs.seasar;

File: test/src/test/java/hudson/init/InitMilestoneTest.java
Patch:
@@ -64,4 +64,4 @@ public List<InitMilestone> getAttained() {
         }
     }
 
-}
\ No newline at end of file
+}

File: test/src/test/java/hudson/model/AperiodicWorkTest.java
Patch:
@@ -56,4 +56,4 @@ protected void doAperiodicRun() {
             doneSignal.countDown();
         }
     }
-}
\ No newline at end of file
+}

File: test/src/test/java/hudson/model/PeriodicWorkTest.java
Patch:
@@ -51,4 +51,4 @@ protected void doRun() throws Exception {
             doneSignal.countDown();
         }
     }
-}
\ No newline at end of file
+}

File: test/src/test/java/hudson/slaves/SlaveComputerTest.java
Patch:
@@ -190,4 +190,4 @@ private String getRemoteFS(Node node, String user) throws Exception {
             return pathObj.toString();
         }
     }
-}
\ No newline at end of file
+}

File: test/src/test/java/hudson/triggers/SafeTimerTaskTest.java
Patch:
@@ -73,4 +73,4 @@ public long getRecurrencePeriod() {
             return RECURRENCE_PERIOD;
         }
     }
-}
\ No newline at end of file
+}

File: test/src/test/java/jenkins/cli/StopBuildsCommandTest.java
Patch:
@@ -202,4 +202,4 @@ private void waitForLastBuildToStop(final FreeStyleProject project) throws Inter
         }
         assertThat(project.getLastBuild().isBuilding(), equalTo(false));
     }
-}
\ No newline at end of file
+}

File: test/src/test/java/jenkins/security/UserDetailsCacheTest.java
Patch:
@@ -87,4 +87,4 @@ public void getCachedFalseNotFound() throws Exception {
         assertNull(bob);
     }
 
-}
\ No newline at end of file
+}

File: test/src/test/java/jenkins/security/stapler/StaticRoutingDecisionProviderTest.java
Patch:
@@ -510,4 +510,4 @@ public void fieldStatic_withStaplerNotDispatchable() throws Exception {
         assertNotReachable("field/staticRenderableWithStaplerNotDispatchable/valid");
         assertFieldRequestWasBlockedAndResetFlag();
     }
-}
\ No newline at end of file
+}

File: test/src/test/java/lib/form/DropdownListTest.java
Patch:
@@ -22,4 +22,4 @@ public FormValidation doSubmitTest1(StaplerRequest req) throws Exception {
         System.out.println(f);
         return FormValidation.ok();
     }
-}
\ No newline at end of file
+}

File: test/src/test/java/lib/form/RepeatableTest.java
Patch:
@@ -587,4 +587,4 @@ private List<?> getButtonsList(HtmlForm form, String buttonCaption) {
         return form.getByXPath("//button[text() = '" + buttonCaption + "']");
     }
 
-}
\ No newline at end of file
+}

File: test/src/test/java/lib/form/SecretTextareaTest.java
Patch:
@@ -172,4 +172,4 @@ public boolean isApplicable(Class<? extends AbstractProject> jobType) {
             }
         }
     }
-}
\ No newline at end of file
+}

File: test/src/test/java/lib/form/ValidateButtonTest.java
Patch:
@@ -268,4 +268,4 @@ public void doSomething(StaplerRequest req) {
             }
         }
     }
-}
\ No newline at end of file
+}

File: test/src/test/java/scripts/package-info.java
Patch:
@@ -1,4 +1,4 @@
 /**
  * Tests the JavaScript code.
  */
-package scripts;
\ No newline at end of file
+package scripts;

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -30,7 +30,6 @@
 import hudson.model.Slave;
 import hudson.security.*;
 
-import java.text.SimpleDateFormat;
 import java.util.function.Predicate;
 import jenkins.util.SystemProperties;
 import hudson.cli.CLICommand;
@@ -110,6 +109,7 @@
 import java.net.URLDecoder;
 import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
+import java.text.DateFormat;
 import java.text.DecimalFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -236,7 +236,7 @@ public static String iso8601DateTime(Date date) {
      */
     @Restricted(NoExternalUse.class)
     public static String localDate(Date date) {
-        return SimpleDateFormat.getDateInstance(SimpleDateFormat.SHORT).format(date);
+        return DateFormat.getDateInstance(DateFormat.SHORT).format(date);
     }
 
     public static String rfc822Date(Calendar cal) {

File: core/src/main/java/hudson/cli/DeleteJobCommand.java
Patch:
@@ -26,6 +26,7 @@
 import hudson.AbortException;
 import hudson.Extension;
 import hudson.model.AbstractItem;
+import hudson.model.Item;
 import jenkins.model.Jenkins;
 import org.kohsuke.args4j.Argument;
 
@@ -68,7 +69,7 @@ protected int run() throws Exception {
                     throw new IllegalArgumentException("No such job '" + job_s + "'");
                 }
 
-                job.checkPermission(AbstractItem.DELETE);
+                job.checkPermission(Item.DELETE);
                 job.delete();
             } catch (Exception e) {
                 if(hs.size() == 1) {

File: core/src/main/java/hudson/cli/ReloadJobCommand.java
Patch:
@@ -83,7 +83,7 @@ protected int run() throws Exception {
                                 job_s, project.getFullName()));
                 }
 
-                job.checkPermission(AbstractItem.CONFIGURE);
+                job.checkPermission(Item.CONFIGURE);
                 job.doReload();
             } catch (Exception e) {
                 if(hs.size() == 1) {

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -410,7 +410,7 @@ public Set<Label> getRelevantLabels() {
     public String getAssignedLabelString() {
         if (canRoam || assignedNode==null)    return null;
         try {
-            LabelExpression.parseExpression(assignedNode);
+            Label.parseExpression(assignedNode);
             return assignedNode;
         } catch (ANTLRException e) {
             // must be old label or host name that includes whitespace or other unsafe chars

File: core/src/main/java/hudson/model/Api.java
Patch:
@@ -121,7 +121,7 @@ public void doXml(StaplerRequest req, StaplerResponse rsp,
                 for (String exclude : excludes) {
                     XPath xExclude = dom.createXPath(exclude);
                     xExclude.setFunctionContext(functionContext);
-                    List<org.dom4j.Node> list = (List<org.dom4j.Node>)xExclude.selectNodes(dom);
+                    List<org.dom4j.Node> list = xExclude.selectNodes(dom);
                     for (org.dom4j.Node n : list) {
                         Element parent = n.getParent();
                         if(parent!=null)

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -1351,7 +1351,7 @@ public Api getApi() {
         }
 
         FingerprintStorage configuredFingerprintStorage = FingerprintStorage.get();
-        FingerprintStorage fileFingerprintStorage = FileFingerprintStorage.getFileFingerprintStorage();
+        FingerprintStorage fileFingerprintStorage = FingerprintStorage.getFileFingerprintStorage();
 
         Fingerprint loaded = configuredFingerprintStorage.load(id);
 

File: core/src/main/java/hudson/model/FingerprintCleanupThread.java
Patch:
@@ -79,7 +79,7 @@ public void execute(TaskListener listener) {
 
         if (!(FingerprintStorage.get() instanceof FileFingerprintStorage) &&
                 FingerprintStorage.getFileFingerprintStorage().isReady()) {
-            FileFingerprintStorage.getFileFingerprintStorage().iterateAndCleanupFingerprints(listener);
+            FingerprintStorage.getFileFingerprintStorage().iterateAndCleanupFingerprints(listener);
         }
     }
 

File: core/src/main/java/hudson/model/Hudson.java
Patch:
@@ -44,6 +44,7 @@
 
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletResponse;
 import java.io.File;
 import java.io.IOException;
 import java.text.NumberFormat;
@@ -281,7 +282,7 @@ public static boolean adminCheck() throws IOException {
     public static boolean adminCheck(StaplerRequest req,StaplerResponse rsp) throws IOException {
         if (isAdmin(req)) return true;
 
-        rsp.sendError(StaplerResponse.SC_FORBIDDEN);
+        rsp.sendError(HttpServletResponse.SC_FORBIDDEN);
         return false;
     }
 

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -74,8 +74,8 @@
 import org.springframework.security.web.authentication.AnonymousAuthenticationFilter;
 import org.springframework.security.web.authentication.RememberMeServices;
 import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;
+import org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices;
 import org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter;
-import org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices;
 import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;
 import org.springframework.security.web.context.HttpSessionSecurityContextRepository;
 
@@ -329,7 +329,7 @@ public void doLogout(StaplerRequest req, StaplerResponse rsp) throws IOException
     }
 
     private void resetRememberMeCookie(StaplerRequest req, StaplerResponse rsp, String contextPath) {
-        Cookie cookie = new Cookie(TokenBasedRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, "");
+        Cookie cookie = new Cookie(AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, "");
         cookie.setMaxAge(0);
         cookie.setSecure(req.isSecure());
         cookie.setHttpOnly(true);

File: core/src/main/java/hudson/slaves/NodeProperty.java
Patch:
@@ -34,6 +34,7 @@
 import hudson.model.TaskListener;
 import hudson.model.queue.CauseOfBlockage;
 import hudson.scm.SCM;
+import hudson.tools.PropertyDescriptor;
 import hudson.model.AbstractBuild;
 import hudson.model.BuildListener;
 import hudson.model.Environment;
@@ -186,6 +187,6 @@ public static DescriptorExtensionList<NodeProperty<?>,NodePropertyDescriptor> al
      * given project.
      */
     public static List<NodePropertyDescriptor> for_(Node node) {
-        return NodePropertyDescriptor.for_(all(),node);
+        return PropertyDescriptor.for_(all(),node);
     }
 }

File: core/src/main/java/jenkins/model/GlobalProjectNamingStrategyConfiguration.java
Patch:
@@ -25,7 +25,6 @@
 
 import hudson.Extension;
 import hudson.security.Permission;
-import jenkins.model.ProjectNamingStrategy.DefaultProjectNamingStrategy;
 import net.sf.json.JSONObject;
 
 import org.jenkinsci.Symbol;
@@ -58,7 +57,7 @@ public boolean configure(StaplerRequest req, JSONObject json) throws hudson.mode
             }
         }
         if (j.getProjectNamingStrategy() == null) {
-            j.setProjectNamingStrategy(DefaultProjectNamingStrategy.DEFAULT_NAMING_STRATEGY);
+            j.setProjectNamingStrategy(ProjectNamingStrategy.DEFAULT_NAMING_STRATEGY);
         }
         return true;
     }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2574,7 +2574,7 @@ public boolean isUseSecurity() {
     }
 
     public boolean isUseProjectNamingStrategy(){
-        return projectNamingStrategy != DefaultProjectNamingStrategy.DEFAULT_NAMING_STRATEGY;
+        return projectNamingStrategy != ProjectNamingStrategy.DEFAULT_NAMING_STRATEGY;
     }
 
     /**
@@ -2672,7 +2672,7 @@ public void disableSecurity() {
 
     public void setProjectNamingStrategy(ProjectNamingStrategy ns) {
         if(ns == null){
-            ns = DefaultProjectNamingStrategy.DEFAULT_NAMING_STRATEGY;
+            ns = ProjectNamingStrategy.DEFAULT_NAMING_STRATEGY;
         }
         projectNamingStrategy = ns;
     }

File: core/src/main/java/jenkins/slaves/restarter/JnlpSlaveRestarterInstaller.java
Patch:
@@ -9,7 +9,6 @@
 import hudson.remoting.EngineListenerAdapter;
 import hudson.remoting.VirtualChannel;
 import hudson.slaves.ComputerListener;
-import jenkins.model.Jenkins.MasterComputer;
 
 import java.io.IOException;
 import java.io.Serializable;
@@ -34,7 +33,7 @@
 public class JnlpSlaveRestarterInstaller extends ComputerListener implements Serializable {
     @Override
     public void onOnline(final Computer c, final TaskListener listener) throws IOException, InterruptedException {
-        MasterComputer.threadPoolForRemoting.submit(new Install(c, listener));
+        Computer.threadPoolForRemoting.submit(new Install(c, listener));
     }
     private static class Install implements Callable<Void> {
         private final Computer c;

File: core/src/test/java/hudson/model/JobTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.jvnet.hudson.test.Issue;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.MockRepository;
@@ -61,7 +62,7 @@ public void use_slave_platform_path_separator_when_contribute_path() throws Thro
         MockRepository.removeClassMethodInvocationControl(Platform.class);
 
         Job<?, ?> job = Mockito.mock(FreeStyleProject.class);
-        Mockito.when(job.getEnvironment(Mockito.any(Node.class), Mockito.any(TaskListener.class))).thenCallRealMethod();
+        Mockito.when(job.getEnvironment(ArgumentMatchers.any(Node.class), ArgumentMatchers.any(TaskListener.class))).thenCallRealMethod();
         Mockito.when(job.getCharacteristicEnvVars()).thenReturn(emptyEnv);
 
         Computer c = Mockito.mock(Computer.class);
@@ -70,7 +71,7 @@ public void use_slave_platform_path_separator_when_contribute_path() throws Thro
             slaveEnv.put("PATH", "/bin/bash");
         }
         Mockito.when(c.getEnvironment()).thenReturn(slaveEnv);
-        Mockito.when(c.buildEnvironment(Mockito.any(TaskListener.class))).thenReturn(emptyEnv);
+        Mockito.when(c.buildEnvironment(ArgumentMatchers.any(TaskListener.class))).thenReturn(emptyEnv);
 
         Node node = PowerMockito.mock(Node.class);
         PowerMockito.doReturn(c).when(node).toComputer();

File: core/src/test/java/hudson/util/FileChannelWriterTest.java
Patch:
@@ -15,7 +15,6 @@
 import static org.hamcrest.core.IsEqual.equalTo;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertThrows;
-import static org.junit.Assert.fail;
 
 public class FileChannelWriterTest {
     @Rule

File: test/src/test/java/hudson/ProcTest.java
Patch:
@@ -7,6 +7,7 @@
 import hudson.Launcher.LocalLauncher;
 import hudson.Launcher.RemoteLauncher;
 import hudson.Launcher.RemoteLauncher.ProcImpl;
+import hudson.model.TaskListener;
 import hudson.remoting.Pipe;
 import hudson.remoting.VirtualChannel;
 import hudson.slaves.DumbSlave;
@@ -55,7 +56,7 @@ public void run() {
             }
         }.start();
 
-        RemoteLauncher launcher = new RemoteLauncher(StreamTaskListener.NULL, ch, true);
+        RemoteLauncher launcher = new RemoteLauncher(TaskListener.NULL, ch, true);
 
         String str="";
         for (int i=0; i<256; i++)

File: test/src/test/java/hudson/cli/BuildCommandTest.java
Patch:
@@ -35,7 +35,6 @@
 import hudson.model.FileParameterDefinition;
 import hudson.model.FreeStyleBuild;
 import hudson.model.FreeStyleProject;
-import hudson.model.ParameterDefinition.ParameterDescriptor;
 import hudson.model.ParameterValue;
 import hudson.model.ParametersAction;
 import hudson.model.ParametersDefinitionProperty;

File: test/src/test/java/hudson/cli/ListJobsCommandTest.java
Patch:
@@ -31,7 +31,6 @@
 import hudson.model.FreeStyleProject;
 import hudson.model.Label;
 import hudson.model.ListView;
-import hudson.model.labels.LabelExpression;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -104,7 +103,7 @@ public class ListJobsCommandTest {
                 new Axis("axis", "a", "b")
         ));
 
-        Label label = LabelExpression.get("aws-linux-dummy");
+        Label label = Label.get("aws-linux-dummy");
         matrixProject.setAssignedLabel(label);
 
         CLICommandInvoker.Result result = command.invokeWithArgs("Folder");

File: test/src/test/java/hudson/model/AbstractProjectTest.java
Patch:
@@ -142,7 +142,7 @@ public void wipeWorkspaceProtected() throws Exception {
     @Test
     @PresetData(DataSet.ANONYMOUS_READONLY)
     public void wipeWorkspaceProtected2() throws Exception {
-        ((GlobalMatrixAuthorizationStrategy) j.jenkins.getAuthorizationStrategy()).add(AbstractProject.WORKSPACE, "anonymous");
+        ((GlobalMatrixAuthorizationStrategy) j.jenkins.getAuthorizationStrategy()).add(Item.WORKSPACE, "anonymous");
 
         // make sure that the deletion is protected in the same way
         wipeWorkspaceProtected();

File: test/src/test/java/hudson/model/NodeTest.java
Patch:
@@ -337,7 +337,7 @@ public void testGetAssignedLabelWithBothAndOrExpression() throws Exception {
         n4.setLabelString("label1 label");
 
         FreeStyleProject p = j.createFreeStyleProject();
-        p.setAssignedLabel(LabelExpression.parseExpression("label1 && (label2 || label3)"));
+        p.setAssignedLabel(Label.parseExpression("label1 && (label2 || label3)"));
 
         // Node 1 should not be tied to any labels
         TagCloud<LabelAtom> n1LabelCloud = n1.getLabelCloud();

File: test/src/test/java/hudson/model/ViewTest.java
Patch:
@@ -547,7 +547,7 @@ public String getDisplayName() {
         j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().
             grant(Jenkins.ADMINISTER).everywhere().to("admin").
             grant(Jenkins.READ).everywhere().toEveryone().
-            grant(Job.READ).everywhere().toEveryone().
+            grant(Item.READ).everywhere().toEveryone().
             grant(Item.CREATE).onFolders(d1).to("dev")); // not on root or d2
         ACL.impersonate2(Jenkins.ANONYMOUS2, new NotReallyRoleSensitiveCallable<Void,Exception>() {
             @Override

File: test/src/test/java/hudson/model/labels/LabelExpressionTest.java
Patch:
@@ -175,7 +175,7 @@ public void parser2() throws Exception {
     }
 
     private void parseAndVerify(String expected, String expr) throws ANTLRException {
-        assertEquals(expected, LabelExpression.parseExpression(expr).getName());
+        assertEquals(expected, Label.parseExpression(expr).getName());
     }
 
     @Test
@@ -243,7 +243,7 @@ public void dash() {
 
     private void parseShouldFail(String expr) {
         try {
-            LabelExpression.parseExpression(expr);
+            Label.parseExpression(expr);
             fail(expr + " should fail to parse");
         } catch (ANTLRException e) {
             // expected

File: test/src/test/java/hudson/security/ACLTest.java
Patch:
@@ -25,10 +25,10 @@
 package hudson.security;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
-import hudson.model.Build;
 import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;
 import hudson.model.FreeStyleProject;
 import hudson.model.Item;
+import hudson.model.Run;
 import hudson.model.UnprotectedRootAction;
 import hudson.model.User;
 import java.util.Collection;
@@ -146,7 +146,7 @@ public void checkAnyPermissionShouldShowDisabledPermissionsIfNotImplied() {
 
         try (ACLContext ignored = ACL.as2(manager.impersonate2())) {
             Exception e = Assert.assertThrows(AccessDeniedException.class,
-                    () -> jenkins.getACL().checkAnyPermission(Item.WIPEOUT, Build.ARTIFACTS));
+                    () -> jenkins.getACL().checkAnyPermission(Item.WIPEOUT, Run.ARTIFACTS));
             Assert.assertEquals("manager is missing a permission, one of Job/WipeOut, Run/Artifacts is required", e.getMessage());
         }
     }

File: test/src/test/java/jenkins/model/JenkinsTest.java
Patch:
@@ -77,6 +77,7 @@
 import org.jvnet.hudson.test.recipes.WithPlugin;
 import org.kohsuke.stapler.HttpResponse;
 import org.mockito.ArgumentCaptor;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mockito;
 
 import java.io.IOException;
@@ -453,7 +454,7 @@ public void testComputerListenerNotifiedOnRestart() {
             listener.onRestart();
 
         ArgumentCaptor<OfflineCause> captor = ArgumentCaptor.forClass(OfflineCause.class);
-        Mockito.verify(listenerMock).onOffline(Mockito.eq(j.jenkins.toComputer()), captor.capture());
+        Mockito.verify(listenerMock).onOffline(ArgumentMatchers.eq(j.jenkins.toComputer()), captor.capture());
         assertTrue(captor.getValue().toString().contains("restart"));
     }
 

File: test/src/test/java/jenkins/security/UserDetailsCacheTest.java
Patch:
@@ -34,7 +34,6 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThrows;
-import static org.junit.Assert.fail;
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.core.userdetails.UsernameNotFoundException;
 

File: test/src/test/java/lib/form/ComboBoxTest.java
Patch:
@@ -40,7 +40,6 @@
 import jenkins.model.OptionalJobProperty;
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.HudsonTestCase;
-import org.jvnet.hudson.test.HudsonTestCase.WebClient;
 import org.jvnet.hudson.test.TestExtension;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.QueryParameter;

File: test/src/test/java/lib/form/PasswordTest.java
Patch:
@@ -624,7 +624,7 @@ public void testBlankoutOfStringBackedPasswordFieldWithoutItemConfigure() throws
         }
 
         final MockAuthorizationStrategy a = new MockAuthorizationStrategy();
-        a.grant(Jenkins.READ, Job.READ, Job.EXTENDED_READ).everywhere().toEveryone();
+        a.grant(Jenkins.READ, Item.READ, Item.EXTENDED_READ).everywhere().toEveryone();
         j.jenkins.setAuthorizationStrategy(a);
 
         /* Now go to the page without Item/Configure and expect asterisks */

File: test/src/test/java/lib/layout/AjaxTest.java
Patch:
@@ -25,7 +25,6 @@
 package lib.layout;
 
 import com.gargoylesoftware.htmlunit.html.DomElement;
-import com.gargoylesoftware.htmlunit.html.HtmlForm;
 import com.gargoylesoftware.htmlunit.html.HtmlLink;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
 import org.junit.Rule;

File: core/src/main/java/hudson/tools/AbstractCommandInstaller.java
Patch:
@@ -100,7 +100,7 @@ public FormValidation doCheckToolHome(@QueryParameter String value) {
             if (value.length() > 0) {
                 return FormValidation.ok();
             } else {
-                return FormValidation.error(Messages.CommandInstaller_no_command());
+                return FormValidation.error(Messages.CommandInstaller_no_toolHome());
             }
         }
     }

File: core/src/main/java/hudson/tools/AbstractCommandInstaller.java
Patch:
@@ -100,7 +100,7 @@ public FormValidation doCheckToolHome(@QueryParameter String value) {
             if (value.length() > 0) {
                 return FormValidation.ok();
             } else {
-                return FormValidation.error(Messages.CommandInstaller_no_command());
+                return FormValidation.error(Messages.CommandInstaller_no_toolHome());
             }
         }
     }

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -30,7 +30,6 @@
 import hudson.model.Slave;
 import hudson.security.*;
 
-import java.text.SimpleDateFormat;
 import java.util.function.Predicate;
 import jenkins.util.SystemProperties;
 import hudson.cli.CLICommand;
@@ -110,6 +109,7 @@
 import java.net.URLDecoder;
 import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
+import java.text.DateFormat;
 import java.text.DecimalFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -236,7 +236,7 @@ public static String iso8601DateTime(Date date) {
      */
     @Restricted(NoExternalUse.class)
     public static String localDate(Date date) {
-        return SimpleDateFormat.getDateInstance(SimpleDateFormat.SHORT).format(date);
+        return DateFormat.getDateInstance(DateFormat.SHORT).format(date);
     }
 
     public static String rfc822Date(Calendar cal) {

File: core/src/main/java/hudson/cli/DeleteJobCommand.java
Patch:
@@ -26,6 +26,7 @@
 import hudson.AbortException;
 import hudson.Extension;
 import hudson.model.AbstractItem;
+import hudson.model.Item;
 import jenkins.model.Jenkins;
 import org.kohsuke.args4j.Argument;
 
@@ -68,7 +69,7 @@ protected int run() throws Exception {
                     throw new IllegalArgumentException("No such job '" + job_s + "'");
                 }
 
-                job.checkPermission(AbstractItem.DELETE);
+                job.checkPermission(Item.DELETE);
                 job.delete();
             } catch (Exception e) {
                 if(hs.size() == 1) {

File: core/src/main/java/hudson/cli/ReloadJobCommand.java
Patch:
@@ -83,7 +83,7 @@ protected int run() throws Exception {
                                 job_s, project.getFullName()));
                 }
 
-                job.checkPermission(AbstractItem.CONFIGURE);
+                job.checkPermission(Item.CONFIGURE);
                 job.doReload();
             } catch (Exception e) {
                 if(hs.size() == 1) {

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -410,7 +410,7 @@ public Set<Label> getRelevantLabels() {
     public String getAssignedLabelString() {
         if (canRoam || assignedNode==null)    return null;
         try {
-            LabelExpression.parseExpression(assignedNode);
+            Label.parseExpression(assignedNode);
             return assignedNode;
         } catch (ANTLRException e) {
             // must be old label or host name that includes whitespace or other unsafe chars

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -1351,7 +1351,7 @@ public Api getApi() {
         }
 
         FingerprintStorage configuredFingerprintStorage = FingerprintStorage.get();
-        FingerprintStorage fileFingerprintStorage = FileFingerprintStorage.getFileFingerprintStorage();
+        FingerprintStorage fileFingerprintStorage = FingerprintStorage.getFileFingerprintStorage();
 
         Fingerprint loaded = configuredFingerprintStorage.load(id);
 

File: core/src/main/java/hudson/model/FingerprintCleanupThread.java
Patch:
@@ -79,7 +79,7 @@ public void execute(TaskListener listener) {
 
         if (!(FingerprintStorage.get() instanceof FileFingerprintStorage) &&
                 FingerprintStorage.getFileFingerprintStorage().isReady()) {
-            FileFingerprintStorage.getFileFingerprintStorage().iterateAndCleanupFingerprints(listener);
+            FingerprintStorage.getFileFingerprintStorage().iterateAndCleanupFingerprints(listener);
         }
     }
 

File: core/src/main/java/hudson/model/Hudson.java
Patch:
@@ -44,6 +44,7 @@
 
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletResponse;
 import java.io.File;
 import java.io.IOException;
 import java.text.NumberFormat;
@@ -281,7 +282,7 @@ public static boolean adminCheck() throws IOException {
     public static boolean adminCheck(StaplerRequest req,StaplerResponse rsp) throws IOException {
         if (isAdmin(req)) return true;
 
-        rsp.sendError(StaplerResponse.SC_FORBIDDEN);
+        rsp.sendError(HttpServletResponse.SC_FORBIDDEN);
         return false;
     }
 

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -308,7 +308,7 @@ public void setNodeProperties(List<? extends NodeProperty<?>> properties) throws
     }
 
     public RetentionStrategy getRetentionStrategy() {
-        return retentionStrategy == null ? RetentionStrategy.Always.INSTANCE : retentionStrategy;
+        return retentionStrategy == null ? RetentionStrategy.INSTANCE : retentionStrategy;
     }
 
     @DataBoundSetter

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -74,8 +74,8 @@
 import org.springframework.security.web.authentication.AnonymousAuthenticationFilter;
 import org.springframework.security.web.authentication.RememberMeServices;
 import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;
+import org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices;
 import org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter;
-import org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices;
 import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;
 import org.springframework.security.web.context.HttpSessionSecurityContextRepository;
 
@@ -329,7 +329,7 @@ public void doLogout(StaplerRequest req, StaplerResponse rsp) throws IOException
     }
 
     private void resetRememberMeCookie(StaplerRequest req, StaplerResponse rsp, String contextPath) {
-        Cookie cookie = new Cookie(TokenBasedRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, "");
+        Cookie cookie = new Cookie(AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, "");
         cookie.setMaxAge(0);
         cookie.setSecure(req.isSecure());
         cookie.setHttpOnly(true);

File: core/src/main/java/hudson/slaves/NodeProperty.java
Patch:
@@ -34,6 +34,7 @@
 import hudson.model.TaskListener;
 import hudson.model.queue.CauseOfBlockage;
 import hudson.scm.SCM;
+import hudson.tools.PropertyDescriptor;
 import hudson.model.AbstractBuild;
 import hudson.model.BuildListener;
 import hudson.model.Environment;
@@ -186,6 +187,6 @@ public static DescriptorExtensionList<NodeProperty<?>,NodePropertyDescriptor> al
      * given project.
      */
     public static List<NodePropertyDescriptor> for_(Node node) {
-        return NodePropertyDescriptor.for_(all(),node);
+        return PropertyDescriptor.for_(all(),node);
     }
 }

File: core/src/main/java/jenkins/model/GlobalProjectNamingStrategyConfiguration.java
Patch:
@@ -25,7 +25,6 @@
 
 import hudson.Extension;
 import hudson.security.Permission;
-import jenkins.model.ProjectNamingStrategy.DefaultProjectNamingStrategy;
 import net.sf.json.JSONObject;
 
 import org.jenkinsci.Symbol;
@@ -58,7 +57,7 @@ public boolean configure(StaplerRequest req, JSONObject json) throws hudson.mode
             }
         }
         if (j.getProjectNamingStrategy() == null) {
-            j.setProjectNamingStrategy(DefaultProjectNamingStrategy.DEFAULT_NAMING_STRATEGY);
+            j.setProjectNamingStrategy(ProjectNamingStrategy.DEFAULT_NAMING_STRATEGY);
         }
         return true;
     }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2570,7 +2570,7 @@ public boolean isUseSecurity() {
     }
 
     public boolean isUseProjectNamingStrategy(){
-        return projectNamingStrategy != DefaultProjectNamingStrategy.DEFAULT_NAMING_STRATEGY;
+        return projectNamingStrategy != ProjectNamingStrategy.DEFAULT_NAMING_STRATEGY;
     }
 
     /**
@@ -2668,7 +2668,7 @@ public void disableSecurity() {
 
     public void setProjectNamingStrategy(ProjectNamingStrategy ns) {
         if(ns == null){
-            ns = DefaultProjectNamingStrategy.DEFAULT_NAMING_STRATEGY;
+            ns = ProjectNamingStrategy.DEFAULT_NAMING_STRATEGY;
         }
         projectNamingStrategy = ns;
     }

File: core/src/main/java/jenkins/slaves/restarter/JnlpSlaveRestarterInstaller.java
Patch:
@@ -9,7 +9,6 @@
 import hudson.remoting.EngineListenerAdapter;
 import hudson.remoting.VirtualChannel;
 import hudson.slaves.ComputerListener;
-import jenkins.model.Jenkins.MasterComputer;
 
 import java.io.IOException;
 import java.io.Serializable;
@@ -34,7 +33,7 @@
 public class JnlpSlaveRestarterInstaller extends ComputerListener implements Serializable {
     @Override
     public void onOnline(final Computer c, final TaskListener listener) throws IOException, InterruptedException {
-        MasterComputer.threadPoolForRemoting.submit(new Install(c, listener));
+        Computer.threadPoolForRemoting.submit(new Install(c, listener));
     }
     private static class Install implements Callable<Void> {
         private final Computer c;

File: core/src/test/java/hudson/model/JobTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.jvnet.hudson.test.Issue;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.MockRepository;
@@ -61,7 +62,7 @@ public void use_slave_platform_path_separator_when_contribute_path() throws Thro
         MockRepository.removeClassMethodInvocationControl(Platform.class);
 
         Job<?, ?> job = Mockito.mock(FreeStyleProject.class);
-        Mockito.when(job.getEnvironment(Mockito.any(Node.class), Mockito.any(TaskListener.class))).thenCallRealMethod();
+        Mockito.when(job.getEnvironment(ArgumentMatchers.any(Node.class), ArgumentMatchers.any(TaskListener.class))).thenCallRealMethod();
         Mockito.when(job.getCharacteristicEnvVars()).thenReturn(emptyEnv);
 
         Computer c = Mockito.mock(Computer.class);
@@ -70,7 +71,7 @@ public void use_slave_platform_path_separator_when_contribute_path() throws Thro
             slaveEnv.put("PATH", "/bin/bash");
         }
         Mockito.when(c.getEnvironment()).thenReturn(slaveEnv);
-        Mockito.when(c.buildEnvironment(Mockito.any(TaskListener.class))).thenReturn(emptyEnv);
+        Mockito.when(c.buildEnvironment(ArgumentMatchers.any(TaskListener.class))).thenReturn(emptyEnv);
 
         Node node = PowerMockito.mock(Node.class);
         PowerMockito.doReturn(c).when(node).toComputer();

File: test/src/test/java/hudson/ProcTest.java
Patch:
@@ -7,6 +7,7 @@
 import hudson.Launcher.LocalLauncher;
 import hudson.Launcher.RemoteLauncher;
 import hudson.Launcher.RemoteLauncher.ProcImpl;
+import hudson.model.TaskListener;
 import hudson.remoting.Pipe;
 import hudson.remoting.VirtualChannel;
 import hudson.slaves.DumbSlave;
@@ -55,7 +56,7 @@ public void run() {
             }
         }.start();
 
-        RemoteLauncher launcher = new RemoteLauncher(StreamTaskListener.NULL, ch, true);
+        RemoteLauncher launcher = new RemoteLauncher(TaskListener.NULL, ch, true);
 
         String str="";
         for (int i=0; i<256; i++)

File: test/src/test/java/hudson/cli/ListJobsCommandTest.java
Patch:
@@ -31,7 +31,6 @@
 import hudson.model.FreeStyleProject;
 import hudson.model.Label;
 import hudson.model.ListView;
-import hudson.model.labels.LabelExpression;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -104,7 +103,7 @@ public class ListJobsCommandTest {
                 new Axis("axis", "a", "b")
         ));
 
-        Label label = LabelExpression.get("aws-linux-dummy");
+        Label label = Label.get("aws-linux-dummy");
         matrixProject.setAssignedLabel(label);
 
         CLICommandInvoker.Result result = command.invokeWithArgs("Folder");

File: test/src/test/java/hudson/model/AbstractProjectTest.java
Patch:
@@ -143,7 +143,7 @@ public void wipeWorkspaceProtected() throws Exception {
     @Test
     @PresetData(DataSet.ANONYMOUS_READONLY)
     public void wipeWorkspaceProtected2() throws Exception {
-        ((GlobalMatrixAuthorizationStrategy) j.jenkins.getAuthorizationStrategy()).add(AbstractProject.WORKSPACE, "anonymous");
+        ((GlobalMatrixAuthorizationStrategy) j.jenkins.getAuthorizationStrategy()).add(Item.WORKSPACE, "anonymous");
 
         // make sure that the deletion is protected in the same way
         wipeWorkspaceProtected();

File: test/src/test/java/hudson/model/NodeTest.java
Patch:
@@ -337,7 +337,7 @@ public void testGetAssignedLabelWithBothAndOrExpression() throws Exception {
         n4.setLabelString("label1 label");
 
         FreeStyleProject p = j.createFreeStyleProject();
-        p.setAssignedLabel(LabelExpression.parseExpression("label1 && (label2 || label3)"));
+        p.setAssignedLabel(Label.parseExpression("label1 && (label2 || label3)"));
 
         // Node 1 should not be tied to any labels
         TagCloud<LabelAtom> n1LabelCloud = n1.getLabelCloud();

File: test/src/test/java/hudson/model/QueueTest.java
Patch:
@@ -52,7 +52,6 @@
 import hudson.model.Queue.BlockedItem;
 import hudson.model.Queue.Executable;
 import hudson.model.Queue.WaitingItem;
-import hudson.model.labels.LabelExpression;
 import hudson.model.listeners.SaveableListener;
 import hudson.model.queue.CauseOfBlockage;
 import hudson.model.queue.QueueTaskDispatcher;
@@ -881,7 +880,7 @@ public void shouldRunFlyweightTaskOnProvisionedNodeWhenNodeRestricted() throws E
         matrixProject.setAxes(new AxisList(
                 new Axis("axis", "a", "b")
         ));
-        Label label = LabelExpression.get("aws-linux-dummy");
+        Label label = Label.get("aws-linux-dummy");
         DummyCloudImpl dummyCloud = new DummyCloudImpl(r, 0);
         dummyCloud.label = label;
         r.jenkins.clouds.add(dummyCloud);
@@ -900,7 +899,7 @@ public void shouldBeAbleToBlockFlyweightTaskAtTheLastMinute() throws Exception {
                 new Axis("axis", "a", "b")
         ));
 
-        Label label = LabelExpression.get("aws-linux-dummy");
+        Label label = Label.get("aws-linux-dummy");
         DummyCloudImpl dummyCloud = new DummyCloudImpl(r, 0);
         dummyCloud.label = label;
         BlockDownstreamProjectExecution property = new BlockDownstreamProjectExecution();

File: test/src/test/java/hudson/model/ViewTest.java
Patch:
@@ -547,7 +547,7 @@ public String getDisplayName() {
         j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().
             grant(Jenkins.ADMINISTER).everywhere().to("admin").
             grant(Jenkins.READ).everywhere().toEveryone().
-            grant(Job.READ).everywhere().toEveryone().
+            grant(Item.READ).everywhere().toEveryone().
             grant(Item.CREATE).onFolders(d1).to("dev")); // not on root or d2
         ACL.impersonate2(Jenkins.ANONYMOUS2, new NotReallyRoleSensitiveCallable<Void,Exception>() {
             @Override

File: test/src/test/java/hudson/model/labels/LabelExpressionTest.java
Patch:
@@ -175,7 +175,7 @@ public void parser2() throws Exception {
     }
 
     private void parseAndVerify(String expected, String expr) throws ANTLRException {
-        assertEquals(expected, LabelExpression.parseExpression(expr).getName());
+        assertEquals(expected, Label.parseExpression(expr).getName());
     }
 
     @Test
@@ -243,7 +243,7 @@ public void dash() {
 
     private void parseShouldFail(String expr) {
         try {
-            LabelExpression.parseExpression(expr);
+            Label.parseExpression(expr);
             fail(expr + " should fail to parse");
         } catch (ANTLRException e) {
             // expected

File: test/src/test/java/hudson/security/ACLTest.java
Patch:
@@ -25,10 +25,10 @@
 package hudson.security;
 
 import edu.umd.cs.findbugs.annotations.NonNull;
-import hudson.model.Build;
 import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;
 import hudson.model.FreeStyleProject;
 import hudson.model.Item;
+import hudson.model.Run;
 import hudson.model.UnprotectedRootAction;
 import hudson.model.User;
 import java.util.Collection;
@@ -146,7 +146,7 @@ public void checkAnyPermissionShouldShowDisabledPermissionsIfNotImplied() {
 
         try (ACLContext ignored = ACL.as2(manager.impersonate2())) {
             Exception e = Assert.assertThrows(AccessDeniedException.class,
-                    () -> jenkins.getACL().checkAnyPermission(Item.WIPEOUT, Build.ARTIFACTS));
+                    () -> jenkins.getACL().checkAnyPermission(Item.WIPEOUT, Run.ARTIFACTS));
             Assert.assertEquals("manager is missing a permission, one of Job/WipeOut, Run/Artifacts is required", e.getMessage());
         }
     }

File: test/src/test/java/jenkins/model/JenkinsTest.java
Patch:
@@ -77,6 +77,7 @@
 import org.jvnet.hudson.test.recipes.WithPlugin;
 import org.kohsuke.stapler.HttpResponse;
 import org.mockito.ArgumentCaptor;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mockito;
 
 import java.io.IOException;
@@ -453,7 +454,7 @@ public void testComputerListenerNotifiedOnRestart() {
             listener.onRestart();
 
         ArgumentCaptor<OfflineCause> captor = ArgumentCaptor.forClass(OfflineCause.class);
-        Mockito.verify(listenerMock).onOffline(Mockito.eq(j.jenkins.toComputer()), captor.capture());
+        Mockito.verify(listenerMock).onOffline(ArgumentMatchers.eq(j.jenkins.toComputer()), captor.capture());
         assertTrue(captor.getValue().toString().contains("restart"));
     }
 

File: test/src/test/java/lib/form/PasswordTest.java
Patch:
@@ -624,7 +624,7 @@ public void testBlankoutOfStringBackedPasswordFieldWithoutItemConfigure() throws
         }
 
         final MockAuthorizationStrategy a = new MockAuthorizationStrategy();
-        a.grant(Jenkins.READ, Job.READ, Job.EXTENDED_READ).everywhere().toEveryone();
+        a.grant(Jenkins.READ, Item.READ, Item.EXTENDED_READ).everywhere().toEveryone();
         j.jenkins.setAuthorizationStrategy(a);
 
         /* Now go to the page without Item/Configure and expect asterisks */

File: core/src/main/java/hudson/node_monitors/NodeMonitorUpdater.java
Patch:
@@ -2,10 +2,10 @@
 
 import hudson.Extension;
 import hudson.model.Computer;
+import hudson.model.ComputerSet;
 import hudson.model.TaskListener;
 import hudson.slaves.ComputerListener;
 import hudson.util.Futures;
-import jenkins.model.Jenkins;
 
 import java.io.IOException;
 import java.util.concurrent.Future;
@@ -24,7 +24,7 @@ public class NodeMonitorUpdater extends ComputerListener {
     private static final Runnable MONITOR_UPDATER = new Runnable() {
         @Override
         public void run() {
-            for (NodeMonitor nm : Jenkins.get().getComputer().getMonitors()) {
+            for (NodeMonitor nm : ComputerSet.getMonitors()) {
                 nm.triggerUpdate();
             }
         }

File: test/src/test/java/hudson/cli/CLIActionTest.java
Patch:
@@ -95,7 +95,7 @@ private void assertExitCode(int code, boolean useApiToken, File jar, String... a
         List<String> commands = Lists.newArrayList("java", "-jar", jar.getAbsolutePath(), "-s", j.getURL().toString(), /* TODO until it is the default */ "-webSocket");
         if (useApiToken) {
             commands.add("-auth");
-            commands.add(ADMIN + ":" + User.get(ADMIN).getProperty(ApiTokenProperty.class).getApiToken());
+            commands.add(ADMIN + ":" + User.getOrCreateByIdOrFullName(ADMIN).getProperty(ApiTokenProperty.class).getApiToken());
         }
         commands.addAll(Arrays.asList(args));
         final Launcher.LocalLauncher launcher = new Launcher.LocalLauncher(StreamTaskListener.fromStderr());

File: test/src/test/java/hudson/cli/CLIEnvVarTest.java
Patch:
@@ -215,7 +215,7 @@ private String getToken() {
         r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
         r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to("admin"));
 
-        return User.get("admin").getProperty(ApiTokenProperty.class).getApiToken();
+        return User.getOrCreateByIdOrFullName("admin").getProperty(ApiTokenProperty.class).getApiToken();
     }
 
     private int launch(String... cmdArgs) throws Exception {

File: test/src/test/java/hudson/cli/CancelQuietDownCommandTest.java
Patch:
@@ -92,7 +92,7 @@ public void cancelQuietDownShouldSuccessOnQuietDownedJenkins() throws Exception
     @Test
     public void cancelQuietDownShouldResetQuietReason() throws Exception {
         final String testReason = "reason";
-        Jenkins.getActiveInstance().doQuietDown(false, 0, testReason);
+        Jenkins.get().doQuietDown(false, 0, testReason);
         QuietDownCommandTest.assertJenkinsInQuietMode(j);
         assertThat(j.jenkins.getQuietDownReason(), equalTo(testReason));
         final CLICommandInvoker.Result result = command

File: test/src/test/java/hudson/model/ComputerConfigDotXmlTest.java
Patch:
@@ -101,7 +101,7 @@ public void setUp() throws Exception {
         mocks = MockitoAnnotations.openMocks(this);
         computer = spy(rule.createSlave().toComputer());
         rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());
-        oldSecurityContext = ACL.impersonate2(User.get("user").impersonate2());
+        oldSecurityContext = ACL.impersonate2(User.getOrCreateByIdOrFullName("user").impersonate2());
     }
 
     @After
@@ -111,7 +111,7 @@ public void tearDown() throws Exception {
     }
 
     @Test
-    public void configXmlGetShouldFailForUnauthorized() throws Exception {
+    public void configXmlGetShouldFailForUnauthorized() {
 
         when(req.getMethod()).thenReturn("GET");
 
@@ -121,7 +121,7 @@ public void configXmlGetShouldFailForUnauthorized() throws Exception {
     }
 
     @Test
-    public void configXmlPostShouldFailForUnauthorized() throws Exception {
+    public void configXmlPostShouldFailForUnauthorized() {
 
         when(req.getMethod()).thenReturn("POST");
 

File: test/src/test/java/hudson/model/ComputerTest.java
Patch:
@@ -109,7 +109,7 @@ public void testProhibitRenameOverExistingNode() throws Exception {
     public void doNotShowUserDetailsInOfflineCause() throws Exception {
         DumbSlave slave = j.createOnlineSlave();
         final Computer computer = slave.toComputer();
-        computer.setTemporarilyOffline(true, new OfflineCause.UserCause(User.get("username"), "msg"));
+        computer.setTemporarilyOffline(true, new OfflineCause.UserCause(User.getOrCreateByIdOrFullName("username"), "msg"));
         verifyOfflineCause(computer);
     }
 

File: test/src/test/java/hudson/model/ExecutorTest.java
Patch:
@@ -83,7 +83,7 @@ public void abortCause() throws Exception {
 
         Future<FreeStyleBuild> r = startBlockingBuild(p);
 
-        User johnny = User.get("Johnny");
+        User johnny = User.getOrCreateByIdOrFullName("Johnny");
         p.getLastBuild().getExecutor().interrupt(Result.FAILURE,
                 new UserInterruption(johnny),   // test the merge semantics
                 new UserInterruption(johnny));
@@ -107,7 +107,7 @@ public void disconnectCause() throws Exception {
         p.setAssignedNode(slave);
 
         Future<FreeStyleBuild> r = startBlockingBuild(p);
-        User johnny = User.get("Johnny");
+        User johnny = User.getOrCreateByIdOrFullName("Johnny");
 
         p.getLastBuild().getBuiltOn().toComputer().disconnect(
                 new OfflineCause.UserCause(johnny, "Taking offline to break your build")

File: test/src/test/java/hudson/model/ListViewTest.java
Patch:
@@ -247,7 +247,7 @@ private void checkLinkFromItemExistsAndIsValid(Item item, ItemGroup ig, Item top
         ListView v = new ListView("v", j.jenkins);
         v.add(p);
         j.jenkins.addView(v);
-        try (ACLContext acl = ACL.as(User.get("alice"))) {
+        try (ACLContext acl = ACL.as(User.getOrCreateByIdOrFullName("alice"))) {
             p.renameTo("p2");
         }
         assertEquals(Collections.singletonList(p), v.getItems());

File: test/src/test/java/hudson/model/NodeTest.java
Patch:
@@ -109,15 +109,15 @@ public void testOfflineCause() throws Exception {
         Computer computer = node.toComputer();
         OfflineCause.UserCause cause;
 
-        final User someone = User.get("someone@somewhere.com");
+        final User someone = User.getOrCreateByIdOrFullName("someone@somewhere.com");
         ACL.impersonate2(someone.impersonate2());
 
         computer.doToggleOffline("original message");
         cause = (UserCause) computer.getOfflineCause();
         assertTrue(cause.toString(), cause.toString().matches("^.*?Disconnected by someone@somewhere.com : original message"));
         assertEquals(someone, cause.getUser());
 
-        final User root = User.get("root@localhost");
+        final User root = User.getOrCreateByIdOrFullName("root@localhost");
         ACL.impersonate2(root.impersonate2());
 
         computer.doChangeOfflineCause("new message");
@@ -257,7 +257,7 @@ public void testHasPermission() throws Exception {
         assertTrue("Current user should have permission read, because he has permission administer.", user.hasPermission(Permission.READ));
         SecurityContextHolder.getContext().setAuthentication(Jenkins.ANONYMOUS2);
 
-        user = User.get("anonymous");
+        user = User.getOrCreateByIdOrFullName("anonymous");
         assertFalse("Current user should not have permission read, because does not have global permission read and authentication is anonymous.", user.hasPermission(Permission.READ));
     }
 

File: test/src/test/java/hudson/tasks/BuildTriggerTest.java
Patch:
@@ -150,7 +150,7 @@ public void downstreamProjectSecurity() throws Exception {
         auth.add(Computer.BUILD, "anonymous");
         j.jenkins.setAuthorizationStrategy(auth);
         final FreeStyleProject upstream =j. createFreeStyleProject("upstream");
-        org.acegisecurity.Authentication alice = User.get("alice").impersonate();
+        org.acegisecurity.Authentication alice = User.getOrCreateByIdOrFullName("alice").impersonate();
         QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap("upstream", alice)));
         Map<Permission,Set<String>> perms = new HashMap<>();
         perms.put(Item.READ, Collections.singleton("alice"));

File: test/src/test/java/hudson/util/FormValidationSecurity1893Test.java
Patch:
@@ -29,9 +29,9 @@
 import org.junit.Test;
 import org.jvnet.hudson.test.JenkinsRule;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertThat;
 
 public class FormValidationSecurity1893Test {
     @Rule

File: test/src/test/java/jenkins/security/ClassFilterImplTest.java
Patch:
@@ -39,6 +39,7 @@
 import hudson.tasks.BuildStepDescriptor;
 import hudson.tasks.Builder;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.Map;
 import java.util.logging.Level;
@@ -141,7 +142,7 @@ public void xstreamRequiresWhitelist() throws Exception {
         config.save();
         assertThat(config.getConfigFile().asString(), not(containsString("LinkedListMultimap")));
         config.unrelated = "modified";
-        FileUtils.write(config.getConfigFile().getFile(), new XStream().toXML(config));
+        FileUtils.write(config.getConfigFile().getFile(), new XStream().toXML(config), StandardCharsets.UTF_8);
         assertThat(config.getConfigFile().asString(), allOf(containsString("LinkedListMultimap"), containsString("modified")));
         config.obj = null;
         config.unrelated = null;
@@ -155,7 +156,7 @@ public void xstreamRequiresWhitelist() throws Exception {
 
     @Test
     @Issue("JENKINS-49543")
-    public void moduleClassesShouldBeWhitelisted() throws Exception {
+    public void moduleClassesShouldBeWhitelisted() {
         ClassFilterImpl filter = new ClassFilterImpl();
         filter.check("org.jenkinsci.modules.windows_slave_installer.WindowsSlaveInstaller");
         filter.check("org.jenkinsci.main.modules.instance_identity.PageDecoratorImpl");

File: test/src/test/java/jenkins/security/LastGrantedAuthoritiesPropertyTest.java
Patch:
@@ -38,7 +38,7 @@ public void basicFlow() throws Exception {
         JenkinsRule.WebClient wc = j.createWebClient();
         wc.login("alice", "alice:development:us");
 
-        hudson.model.User u = hudson.model.User.get("alice");
+        hudson.model.User u = hudson.model.User.getOrCreateByIdOrFullName("alice");
         LastGrantedAuthoritiesProperty p = u.getProperty(LastGrantedAuthoritiesProperty.class);
         assertAuthorities(p, "alice:authenticated:development:us");
         assertAuthorities(u.impersonate2(), "alice:authenticated:development:us");

File: test/src/test/java/jenkins/widgets/HistoryPageFilterCaseSensitiveSearchTest.java
Patch:
@@ -65,7 +65,7 @@ private void setCaseSensitiveSearchForUserAndCheckAssertionForGivenSearchString(
 
         UsernamePasswordAuthenticationToken testUserAuthentication = new UsernamePasswordAuthenticationToken(TEST_USER_NAME, "any");
         try (ACLContext ignored = ACL.as2(testUserAuthentication)) {
-            User.get(TEST_USER_NAME).addProperty(new UserSearchProperty(false));
+            User.getOrCreateByIdOrFullName(TEST_USER_NAME).addProperty(new UserSearchProperty(false));
 
             //test logic
             final List<ModelObject> runs = ImmutableList.of(new MockRun(2, Result.FAILURE), new MockRun(1, Result.SUCCESS));

File: test/src/test/java/lib/form/ApplyButtonTest.java
Patch:
@@ -12,6 +12,8 @@
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
+import java.nio.charset.StandardCharsets;
+
 public class ApplyButtonTest {
 
     @Rule
@@ -30,7 +32,7 @@ public void editDescription() throws Exception {
         HtmlPage config = j.createWebClient().getPage(b, "configure");
         HtmlForm form = config.getFormByName("config");
         // HtmlUnit doesn't have JSON, so we need to emulate one
-        config.executeJavaScript(IOUtils.toString(ApplyButtonTest.class.getResource("JSON.js")));
+        config.executeJavaScript(IOUtils.toString(ApplyButtonTest.class.getResource("JSON.js"), StandardCharsets.UTF_8));
         // it's hard to emulate the keytyping, so we just set the value into codemirror and test if this gets
         // reflected back into TEXTAREA
         config.executeJavaScript("document.getElementsByTagName('TEXTAREA')[0].codemirrorObject.setLine(0,'foobar')");

File: core/src/main/java/hudson/Util.java
Patch:
@@ -1561,7 +1561,7 @@ public static String intern(@CheckForNull String s) {
      * implementing this by ourselves allow it to be more lenient about
      * escaping of URI.
      *
-     * @deprecated Use {@code isAbsoluteOrSchemeRelativeUri} instead if your goal is to prevent open redirects
+     * @deprecated Use {@link #isSafeToRedirectTo} instead if your goal is to prevent open redirects
      */
     @Deprecated
     @RestrictedSince("1.651.2 / 2.3")

File: test/src/test/java/jenkins/telemetry/MissingClassTelemetryTest.java
Patch:
@@ -23,6 +23,7 @@
  */
 package jenkins.telemetry;
 
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import hudson.ExtensionList;
 import hudson.model.UnprotectedRootAction;
 import hudson.security.csrf.CrumbExclusion;
@@ -40,14 +41,14 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
-import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.FilterChain;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 import java.io.StringWriter;
 import java.nio.charset.StandardCharsets;
+import java.time.LocalDate;
 
 import static org.junit.Assert.assertEquals;
 
@@ -79,7 +80,7 @@ public void prepare() throws Exception {
     @Test
     public void telemetrySentWorks() throws InterruptedException {
         Assume.assumeTrue("The telemetry should be enabled", MissingClassTelemetry.enabled());
-
+        Assume.assumeTrue("The telemetry shouldn't be ended", Telemetry.all().get(MissingClassTelemetry.class).getEnd().isAfter(LocalDate.now()));
         // Generate 5 events
         for(int i = 0; i < 5; i++) {
             try {

File: test/src/test/java/jenkins/telemetry/MissingClassTelemetryTest.java
Patch:
@@ -48,6 +48,8 @@
 import java.io.IOException;
 import java.io.StringWriter;
 import java.nio.charset.StandardCharsets;
+import java.time.Instant;
+import java.time.chrono.ChronoLocalDate;
 
 import static org.junit.Assert.assertEquals;
 
@@ -79,7 +81,7 @@ public void prepare() throws Exception {
     @Test
     public void telemetrySentWorks() throws InterruptedException {
         Assume.assumeTrue("The telemetry should be enabled", MissingClassTelemetry.enabled());
-
+        Assume.assumeTrue("The telemetry shouldn't be ended", Telemetry.all().get(MissingClassTelemetry.class).getEnd().isAfter(ChronoLocalDate.from(Instant.now())));
         // Generate 5 events
         for(int i = 0; i < 5; i++) {
             try {

File: core/src/main/java/hudson/Util.java
Patch:
@@ -1561,7 +1561,7 @@ public static String intern(@CheckForNull String s) {
      * implementing this by ourselves allow it to be more lenient about
      * escaping of URI.
      *
-     * @deprecated Use {@code isAbsoluteOrSchemeRelativeUri} instead if your goal is to prevent open redirects
+     * @deprecated Use {@link #isSafeToRedirectTo} instead if your goal is to prevent open redirects
      */
     @Deprecated
     @RestrictedSince("1.651.2 / 2.3")

File: core/src/main/java/hudson/node_monitors/NodeMonitorUpdater.java
Patch:
@@ -2,10 +2,10 @@
 
 import hudson.Extension;
 import hudson.model.Computer;
+import hudson.model.ComputerSet;
 import hudson.model.TaskListener;
 import hudson.slaves.ComputerListener;
 import hudson.util.Futures;
-import jenkins.model.Jenkins;
 
 import java.io.IOException;
 import java.util.concurrent.Future;
@@ -24,7 +24,7 @@ public class NodeMonitorUpdater extends ComputerListener {
     private static final Runnable MONITOR_UPDATER = new Runnable() {
         @Override
         public void run() {
-            for (NodeMonitor nm : Jenkins.get().getComputer().getMonitors()) {
+            for (NodeMonitor nm : ComputerSet.getMonitors()) {
                 nm.triggerUpdate();
             }
         }

File: test/src/test/java/hudson/cli/CLIActionTest.java
Patch:
@@ -95,7 +95,7 @@ private void assertExitCode(int code, boolean useApiToken, File jar, String... a
         List<String> commands = Lists.newArrayList("java", "-jar", jar.getAbsolutePath(), "-s", j.getURL().toString(), /* TODO until it is the default */ "-webSocket");
         if (useApiToken) {
             commands.add("-auth");
-            commands.add(ADMIN + ":" + User.get(ADMIN).getProperty(ApiTokenProperty.class).getApiToken());
+            commands.add(ADMIN + ":" + User.getOrCreateByIdOrFullName(ADMIN).getProperty(ApiTokenProperty.class).getApiToken());
         }
         commands.addAll(Arrays.asList(args));
         final Launcher.LocalLauncher launcher = new Launcher.LocalLauncher(StreamTaskListener.fromStderr());

File: test/src/test/java/hudson/cli/CLIEnvVarTest.java
Patch:
@@ -215,7 +215,7 @@ private String getToken() {
         r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
         r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to("admin"));
 
-        return User.get("admin").getProperty(ApiTokenProperty.class).getApiToken();
+        return User.getOrCreateByIdOrFullName("admin").getProperty(ApiTokenProperty.class).getApiToken();
     }
 
     private int launch(String... cmdArgs) throws Exception {

File: test/src/test/java/hudson/cli/CancelQuietDownCommandTest.java
Patch:
@@ -92,7 +92,7 @@ public void cancelQuietDownShouldSuccessOnQuietDownedJenkins() throws Exception
     @Test
     public void cancelQuietDownShouldResetQuietReason() throws Exception {
         final String testReason = "reason";
-        Jenkins.getActiveInstance().doQuietDown(false, 0, testReason);
+        Jenkins.get().doQuietDown(false, 0, testReason);
         QuietDownCommandTest.assertJenkinsInQuietMode(j);
         assertThat(j.jenkins.getQuietDownReason(), equalTo(testReason));
         final CLICommandInvoker.Result result = command

File: test/src/test/java/hudson/model/ComputerConfigDotXmlTest.java
Patch:
@@ -88,7 +88,7 @@ public void setUp() throws Exception {
         mocks = MockitoAnnotations.openMocks(this);
         computer = spy(rule.createSlave().toComputer());
         rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());
-        oldSecurityContext = ACL.impersonate2(User.get("user").impersonate2());
+        oldSecurityContext = ACL.impersonate2(User.getOrCreateByIdOrFullName("user").impersonate2());
     }
 
     @After
@@ -98,7 +98,7 @@ public void tearDown() throws Exception {
     }
 
     @Test
-    public void configXmlGetShouldFailForUnauthorized() throws Exception {
+    public void configXmlGetShouldFailForUnauthorized() {
 
         when(req.getMethod()).thenReturn("GET");
 
@@ -108,7 +108,7 @@ public void configXmlGetShouldFailForUnauthorized() throws Exception {
     }
 
     @Test
-    public void configXmlPostShouldFailForUnauthorized() throws Exception {
+    public void configXmlPostShouldFailForUnauthorized() {
 
         when(req.getMethod()).thenReturn("POST");
 

File: test/src/test/java/hudson/model/ComputerTest.java
Patch:
@@ -109,7 +109,7 @@ public void testProhibitRenameOverExistingNode() throws Exception {
     public void doNotShowUserDetailsInOfflineCause() throws Exception {
         DumbSlave slave = j.createOnlineSlave();
         final Computer computer = slave.toComputer();
-        computer.setTemporarilyOffline(true, new OfflineCause.UserCause(User.get("username"), "msg"));
+        computer.setTemporarilyOffline(true, new OfflineCause.UserCause(User.getOrCreateByIdOrFullName("username"), "msg"));
         verifyOfflineCause(computer);
     }
 

File: test/src/test/java/hudson/model/ExecutorTest.java
Patch:
@@ -83,7 +83,7 @@ public void abortCause() throws Exception {
 
         Future<FreeStyleBuild> r = startBlockingBuild(p);
 
-        User johnny = User.get("Johnny");
+        User johnny = User.getOrCreateByIdOrFullName("Johnny");
         p.getLastBuild().getExecutor().interrupt(Result.FAILURE,
                 new UserInterruption(johnny),   // test the merge semantics
                 new UserInterruption(johnny));
@@ -107,7 +107,7 @@ public void disconnectCause() throws Exception {
         p.setAssignedNode(slave);
 
         Future<FreeStyleBuild> r = startBlockingBuild(p);
-        User johnny = User.get("Johnny");
+        User johnny = User.getOrCreateByIdOrFullName("Johnny");
 
         p.getLastBuild().getBuiltOn().toComputer().disconnect(
                 new OfflineCause.UserCause(johnny, "Taking offline to break your build")

File: test/src/test/java/hudson/model/ListViewTest.java
Patch:
@@ -247,7 +247,7 @@ private void checkLinkFromItemExistsAndIsValid(Item item, ItemGroup ig, Item top
         ListView v = new ListView("v", j.jenkins);
         v.add(p);
         j.jenkins.addView(v);
-        try (ACLContext acl = ACL.as(User.get("alice"))) {
+        try (ACLContext acl = ACL.as(User.getOrCreateByIdOrFullName("alice"))) {
             p.renameTo("p2");
         }
         assertEquals(Collections.singletonList(p), v.getItems());

File: test/src/test/java/hudson/model/NodeTest.java
Patch:
@@ -109,15 +109,15 @@ public void testOfflineCause() throws Exception {
         Computer computer = node.toComputer();
         OfflineCause.UserCause cause;
 
-        final User someone = User.get("someone@somewhere.com");
+        final User someone = User.getOrCreateByIdOrFullName("someone@somewhere.com");
         ACL.impersonate2(someone.impersonate2());
 
         computer.doToggleOffline("original message");
         cause = (UserCause) computer.getOfflineCause();
         assertTrue(cause.toString(), cause.toString().matches("^.*?Disconnected by someone@somewhere.com : original message"));
         assertEquals(someone, cause.getUser());
 
-        final User root = User.get("root@localhost");
+        final User root = User.getOrCreateByIdOrFullName("root@localhost");
         ACL.impersonate2(root.impersonate2());
 
         computer.doChangeOfflineCause("new message");
@@ -257,7 +257,7 @@ public void testHasPermission() throws Exception {
         assertTrue("Current user should have permission read, because he has permission administer.", user.hasPermission(Permission.READ));
         SecurityContextHolder.getContext().setAuthentication(Jenkins.ANONYMOUS2);
 
-        user = User.get("anonymous");
+        user = User.getOrCreateByIdOrFullName("anonymous");
         assertFalse("Current user should not have permission read, because does not have global permission read and authentication is anonymous.", user.hasPermission(Permission.READ));
     }
 

File: test/src/test/java/hudson/tasks/BuildTriggerTest.java
Patch:
@@ -150,7 +150,7 @@ public void downstreamProjectSecurity() throws Exception {
         auth.add(Computer.BUILD, "anonymous");
         j.jenkins.setAuthorizationStrategy(auth);
         final FreeStyleProject upstream =j. createFreeStyleProject("upstream");
-        org.acegisecurity.Authentication alice = User.get("alice").impersonate();
+        org.acegisecurity.Authentication alice = User.getOrCreateByIdOrFullName("alice").impersonate();
         QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap("upstream", alice)));
         Map<Permission,Set<String>> perms = new HashMap<>();
         perms.put(Item.READ, Collections.singleton("alice"));

File: test/src/test/java/hudson/util/FormValidationSecurity1893Test.java
Patch:
@@ -29,9 +29,9 @@
 import org.junit.Test;
 import org.jvnet.hudson.test.JenkinsRule;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertThat;
 
 public class FormValidationSecurity1893Test {
     @Rule

File: test/src/test/java/jenkins/security/ClassFilterImplTest.java
Patch:
@@ -39,6 +39,7 @@
 import hudson.tasks.BuildStepDescriptor;
 import hudson.tasks.Builder;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.Map;
 import java.util.logging.Level;
@@ -141,7 +142,7 @@ public void xstreamRequiresWhitelist() throws Exception {
         config.save();
         assertThat(config.getConfigFile().asString(), not(containsString("LinkedListMultimap")));
         config.unrelated = "modified";
-        FileUtils.write(config.getConfigFile().getFile(), new XStream().toXML(config));
+        FileUtils.write(config.getConfigFile().getFile(), new XStream().toXML(config), StandardCharsets.UTF_8);
         assertThat(config.getConfigFile().asString(), allOf(containsString("LinkedListMultimap"), containsString("modified")));
         config.obj = null;
         config.unrelated = null;
@@ -155,7 +156,7 @@ public void xstreamRequiresWhitelist() throws Exception {
 
     @Test
     @Issue("JENKINS-49543")
-    public void moduleClassesShouldBeWhitelisted() throws Exception {
+    public void moduleClassesShouldBeWhitelisted() {
         ClassFilterImpl filter = new ClassFilterImpl();
         filter.check("org.jenkinsci.modules.windows_slave_installer.WindowsSlaveInstaller");
         filter.check("org.jenkinsci.main.modules.instance_identity.PageDecoratorImpl");

File: test/src/test/java/jenkins/security/LastGrantedAuthoritiesPropertyTest.java
Patch:
@@ -38,7 +38,7 @@ public void basicFlow() throws Exception {
         JenkinsRule.WebClient wc = j.createWebClient();
         wc.login("alice", "alice:development:us");
 
-        hudson.model.User u = hudson.model.User.get("alice");
+        hudson.model.User u = hudson.model.User.getOrCreateByIdOrFullName("alice");
         LastGrantedAuthoritiesProperty p = u.getProperty(LastGrantedAuthoritiesProperty.class);
         assertAuthorities(p, "alice:authenticated:development:us");
         assertAuthorities(u.impersonate2(), "alice:authenticated:development:us");

File: test/src/test/java/jenkins/widgets/HistoryPageFilterCaseSensitiveSearchTest.java
Patch:
@@ -65,7 +65,7 @@ private void setCaseSensitiveSearchForUserAndCheckAssertionForGivenSearchString(
 
         UsernamePasswordAuthenticationToken testUserAuthentication = new UsernamePasswordAuthenticationToken(TEST_USER_NAME, "any");
         try (ACLContext ignored = ACL.as2(testUserAuthentication)) {
-            User.get(TEST_USER_NAME).addProperty(new UserSearchProperty(false));
+            User.getOrCreateByIdOrFullName(TEST_USER_NAME).addProperty(new UserSearchProperty(false));
 
             //test logic
             final List<ModelObject> runs = ImmutableList.of(new MockRun(2, Result.FAILURE), new MockRun(1, Result.SUCCESS));

File: test/src/test/java/lib/form/ApplyButtonTest.java
Patch:
@@ -12,6 +12,8 @@
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
+import java.nio.charset.StandardCharsets;
+
 public class ApplyButtonTest {
 
     @Rule
@@ -30,7 +32,7 @@ public void editDescription() throws Exception {
         HtmlPage config = j.createWebClient().getPage(b, "configure");
         HtmlForm form = config.getFormByName("config");
         // HtmlUnit doesn't have JSON, so we need to emulate one
-        config.executeJavaScript(IOUtils.toString(ApplyButtonTest.class.getResource("JSON.js")));
+        config.executeJavaScript(IOUtils.toString(ApplyButtonTest.class.getResource("JSON.js"), StandardCharsets.UTF_8));
         // it's hard to emulate the keytyping, so we just set the value into codemirror and test if this gets
         // reflected back into TEXTAREA
         config.executeJavaScript("document.getElementsByTagName('TEXTAREA')[0].codemirrorObject.setLine(0,'foobar')");

File: core/src/main/java/hudson/DescriptorExtensionList.java
Patch:
@@ -244,7 +244,7 @@ private ExtensionList<Descriptor> getDescriptorExtensionList() {
     private static final Map<Class, CopyOnWriteArrayList<ExtensionComponent<Descriptor>>> legacyDescriptors = new ConcurrentHashMap<>();
 
     @SuppressWarnings({"unchecked", "rawtypes"})
-    private static <T extends Describable<T>> CopyOnWriteArrayList<ExtensionComponent<Descriptor<T>>> getLegacyDescriptors(Class<T> type) {
+    private static <T extends Describable<T>> CopyOnWriteArrayList<ExtensionComponent<Descriptor>> getLegacyDescriptors(Class<T> type) {
         return legacyDescriptors.computeIfAbsent(type, key -> new CopyOnWriteArrayList());
     }
 

File: core/src/main/java/jenkins/agents/AgentComputerUtil.java
Patch:
@@ -28,7 +28,7 @@
 import hudson.FilePath;
 import hudson.remoting.Channel;
 import hudson.remoting.VirtualChannel;
-import jenkins.model.Jenkins;
+import jenkins.util.JenkinsJVM;
 
 public final class AgentComputerUtil {
     private AgentComputerUtil() {
@@ -45,7 +45,7 @@ private AgentComputerUtil() {
      */
     @CheckForNull
     public static VirtualChannel getChannelToMaster() {
-        if (Jenkins.getInstanceOrNull() != null) {// check if calling thread is on master or on agent
+        if (JenkinsJVM.isJenkinsJVM()) {
             return FilePath.localChannel;
         }
 

File: core/src/main/java/org/jenkins/ui/icon/IconSet.java
Patch:
@@ -505,7 +505,7 @@ private static String toNormalizedIconUrl(String url) {
         icons.addIcon(new Icon("icon-setting icon-lg", "32x32/setting.gif", Icon.ICON_LARGE_STYLE));
         icons.addIcon(new Icon("icon-star-gold icon-lg", "32x32/star-gold.gif", Icon.ICON_LARGE_STYLE));
         icons.addIcon(new Icon("icon-star icon-lg", "32x32/star.gif", Icon.ICON_LARGE_STYLE));
-        icons.addIcon(new Icon("icon-user icon-lg", "32x32/user.gif", Icon.ICON_LARGE_STYLE));
+        icons.addIcon(new Icon("icon-user icon-lg", "32x32/user.png", Icon.ICON_LARGE_STYLE));
         icons.addIcon(new BuildStatusIcon("icon-yellow icon-lg", "build-status/build-status-sprite.svg#last-unstable", Icon.ICON_LARGE_STYLE));
         icons.addIcon(new BuildStatusIcon("icon-yellow-anime icon-lg", "build-status/build-status-sprite.svg#last-unstable", Icon.ICON_LARGE_STYLE, true));
 
@@ -598,15 +598,15 @@ private static String toNormalizedIconUrl(String url) {
         icons.addIcon(new Icon("icon-fingerprint icon-xlg", "48x48/fingerprint.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-folder-delete icon-xlg", "48x48/folder-delete.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-folder icon-xlg", "48x48/folder.png", Icon.ICON_XLARGE_STYLE));
-        icons.addIcon(new Icon("icon-gear2 icon-xlg", "48x48/gear2.gif", Icon.ICON_XLARGE_STYLE));
+        icons.addIcon(new Icon("icon-gear2 icon-xlg", "48x48/gear2.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-graph icon-xlg", "48x48/graph.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-grey icon-xlg", "48x48/grey.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-help icon-xlg", "material-icons/svg-sprite-action-symbol.svg#ic_help_24px", Icon.ICON_XLARGE_STYLE, IconFormat.EXTERNAL_SVG_SPRITE));
         icons.addIcon(new Icon("icon-installer icon-xlg", "48x48/installer.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-lock icon-xlg", "48x48/lock.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-monitor icon-xlg", "48x48/monitor.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-network icon-xlg", "48x48/network.png", Icon.ICON_XLARGE_STYLE));
-        icons.addIcon(new Icon("icon-notepad icon-xlg", "48x48/notepad.gif", Icon.ICON_XLARGE_STYLE));
+        icons.addIcon(new Icon("icon-notepad icon-xlg", "48x48/notepad.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-orange-square icon-xlg", "48x48/orange-square.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-package icon-xlg", "48x48/package.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-plugin icon-xlg", "48x48/plugin.png", Icon.ICON_XLARGE_STYLE));

File: cli/src/main/java/hudson/cli/PrivateKeyProvider.java
Patch:
@@ -38,7 +38,6 @@
 import java.security.GeneralSecurityException;
 import java.security.InvalidKeyException;
 import java.security.KeyPair;
-import java.security.Security;
 import java.security.spec.InvalidKeySpecException;
 import java.util.ArrayList;
 import java.util.Collections;

File: core/src/main/java/org/jenkins/ui/icon/IconSet.java
Patch:
@@ -505,7 +505,7 @@ private static String toNormalizedIconUrl(String url) {
         icons.addIcon(new Icon("icon-setting icon-lg", "32x32/setting.gif", Icon.ICON_LARGE_STYLE));
         icons.addIcon(new Icon("icon-star-gold icon-lg", "32x32/star-gold.gif", Icon.ICON_LARGE_STYLE));
         icons.addIcon(new Icon("icon-star icon-lg", "32x32/star.gif", Icon.ICON_LARGE_STYLE));
-        icons.addIcon(new Icon("icon-user icon-lg", "32x32/user.gif", Icon.ICON_LARGE_STYLE));
+        icons.addIcon(new Icon("icon-user icon-lg", "32x32/user.png", Icon.ICON_LARGE_STYLE));
         icons.addIcon(new BuildStatusIcon("icon-yellow icon-lg", "build-status/build-status-sprite.svg#last-unstable", Icon.ICON_LARGE_STYLE));
         icons.addIcon(new BuildStatusIcon("icon-yellow-anime icon-lg", "build-status/build-status-sprite.svg#last-unstable", Icon.ICON_LARGE_STYLE, true));
 
@@ -598,15 +598,15 @@ private static String toNormalizedIconUrl(String url) {
         icons.addIcon(new Icon("icon-fingerprint icon-xlg", "48x48/fingerprint.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-folder-delete icon-xlg", "48x48/folder-delete.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-folder icon-xlg", "48x48/folder.png", Icon.ICON_XLARGE_STYLE));
-        icons.addIcon(new Icon("icon-gear2 icon-xlg", "48x48/gear2.gif", Icon.ICON_XLARGE_STYLE));
+        icons.addIcon(new Icon("icon-gear2 icon-xlg", "48x48/gear2.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-graph icon-xlg", "48x48/graph.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-grey icon-xlg", "48x48/grey.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-help icon-xlg", "material-icons/svg-sprite-action-symbol.svg#ic_help_24px", Icon.ICON_XLARGE_STYLE, IconFormat.EXTERNAL_SVG_SPRITE));
         icons.addIcon(new Icon("icon-installer icon-xlg", "48x48/installer.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-lock icon-xlg", "48x48/lock.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-monitor icon-xlg", "48x48/monitor.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-network icon-xlg", "48x48/network.png", Icon.ICON_XLARGE_STYLE));
-        icons.addIcon(new Icon("icon-notepad icon-xlg", "48x48/notepad.gif", Icon.ICON_XLARGE_STYLE));
+        icons.addIcon(new Icon("icon-notepad icon-xlg", "48x48/notepad.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-orange-square icon-xlg", "48x48/orange-square.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-package icon-xlg", "48x48/package.png", Icon.ICON_XLARGE_STYLE));
         icons.addIcon(new Icon("icon-plugin icon-xlg", "48x48/plugin.png", Icon.ICON_XLARGE_STYLE));

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -722,5 +722,6 @@ protected Class defineClassFromData(File container, byte[] classData, String cla
     /* Unused since 1.527, see https://github.com/jenkinsci/jenkins/commit/47de54d070f67af95b4fefb6d006a72bb31a5cb8 */
     @Deprecated
     public static boolean useAntClassLoader = SystemProperties.getBoolean(ClassicPluginStrategy.class.getName()+".useAntClassLoader");
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean DISABLE_TRANSFORMER = SystemProperties.getBoolean(ClassicPluginStrategy.class.getName()+".noBytecodeTransformer");
 }

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -28,6 +28,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.jcraft.jzlib.GZIPInputStream;
 import com.jcraft.jzlib.GZIPOutputStream;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Launcher.LocalLauncher;
 import hudson.Launcher.RemoteLauncher;
 import hudson.model.AbstractProject;
@@ -2906,6 +2907,7 @@ public String validateAntFileMask(final String fileMasks, final int bound) throw
      * Default bound for {@link #validateAntFileMask(String, int, boolean)}.
      * @since 1.592
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static int VALIDATE_ANT_FILE_MASK_BOUND = Integer.getInteger(FilePath.class.getName() + ".VALIDATE_ANT_FILE_MASK_BOUND", 10000);
 
     /**
@@ -3288,6 +3290,7 @@ private void readObject(ObjectInputStream ois) throws IOException, ClassNotFound
 
     private static final long serialVersionUID = 1L;
 
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static int SIDE_BUFFER_SIZE = 1024;
 
     private static final Logger LOGGER = Logger.getLogger(FilePath.class.getName());

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -25,6 +25,7 @@
  */
 package hudson;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.Computer;
 import hudson.model.Slave;
 import hudson.security.*;
@@ -189,6 +190,7 @@ public class Functions {
     private static Logger LOGGER = Logger.getLogger(Functions.class.getName());
 
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* non-final */ boolean UI_REFRESH = SystemProperties.getBoolean("jenkins.ui.refresh");
 
     public Functions() {
@@ -642,6 +644,7 @@ public static String getYuiSuffix() {
     /**
      * Set to true if you need to use the debug version of YUI.
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean DEBUG_YUI = SystemProperties.getBoolean("debug.YUI");
 
     /**

File: core/src/main/java/hudson/Plugin.java
Patch:
@@ -24,6 +24,8 @@
 package hudson;
 
 import java.util.concurrent.TimeUnit;
+
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import jenkins.model.Jenkins;
 import hudson.model.Descriptor;
 import hudson.model.Saveable;
@@ -309,6 +311,7 @@ public Object getTarget() {
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = Boolean.getBoolean(Plugin.class.getName() + ".skipPermissionCheck");
 
     /**

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -2226,6 +2226,7 @@ public String toString() {
             return "classLoader " +  getClass().getName();
         }
     }
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean FAST_LOOKUP = !SystemProperties.getBoolean(PluginManager.class.getName()+".noFastLookup");
 
     /** @deprecated in Jenkins 2.222 use {@link Jenkins#ADMINISTER} instead */
@@ -2430,5 +2431,6 @@ public boolean hasAdoptThisPluginLabel(PluginWrapper plugin) {
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = Boolean.getBoolean(PluginManager.class.getName() + ".skipPermissionCheck");
 }

File: core/src/main/java/hudson/Proc.java
Patch:
@@ -505,6 +505,7 @@ public OutputStream getStdin() {
     /**
      * Debug switch to have the thread display the process it's waiting for.
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean SHOW_PID = false;
     
     /**

File: core/src/main/java/hudson/Util.java
Patch:
@@ -1788,5 +1788,6 @@ private static PathRemover newPathRemover(@NonNull PathRemover.PathChecker pathC
      * overwritten by Jenkins erroneously.
      */
     @Restricted(value = NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean NATIVE_CHMOD_MODE = SystemProperties.getBoolean(Util.class.getName() + ".useNativeChmodAndMode");
 }

File: core/src/main/java/hudson/console/ConsoleNote.java
Patch:
@@ -145,6 +145,7 @@ public abstract class ConsoleNote<T> implements Serializable, Describable<Consol
      * which in practice means that all SCM committers as well as all Jenkins users with any non-read-only access are consider administrators.
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* nonfinal for tests & script console */ boolean INSECURE = SystemProperties.getBoolean(ConsoleNote.class.getName() + ".INSECURE");
 
     /**

File: core/src/main/java/hudson/diagnosis/HudsonHomeDiskUsageChecker.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.diagnosis;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import jenkins.model.Jenkins;
 import hudson.model.PeriodicWork;
@@ -66,6 +67,7 @@ protected void doRun() {
     /**
      * Gets the minimum amount of space to check for, with a default of 10GB
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static long FREE_SPACE_THRESHOLD = Long.getLong(
             HudsonHomeDiskUsageChecker.class.getName() + ".freeSpaceThreshold",
             1024L*1024*1024*10);

File: core/src/main/java/hudson/logging/LogRecorderManager.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.logging;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.FeedAdapter;
 import hudson.Functions;
 import hudson.init.Initializer;
@@ -219,5 +220,6 @@ public Object getTarget() {
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = Boolean.getBoolean(LogRecorderManager.class.getName() + ".skipPermissionCheck");
 }

File: core/src/main/java/hudson/model/AbstractCIBase.java
Patch:
@@ -27,6 +27,7 @@
 package hudson.model;
 
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.security.AccessControlled;
 import hudson.slaves.ComputerListener;
 import hudson.slaves.RetentionStrategy;
@@ -42,6 +43,7 @@
 
 public abstract class AbstractCIBase extends Node implements ItemGroup<TopLevelItem>, StaplerProxy, StaplerFallback, ViewGroup, AccessControlled, DescriptorByNameOwner {
 
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean LOG_STARTUP_PERFORMANCE = SystemProperties.getBoolean(Jenkins.class.getName() + "." + "logStartupPerformance", false);
 
     private static final Logger LOGGER = Logger.getLogger(AbstractCIBase.class.getName());

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -25,6 +25,7 @@
 package hudson.model;
 
 import com.infradna.tool.bridge_method_injector.WithBridgeMethods;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.AbortException;
 import hudson.XmlFile;
 import hudson.Util;
@@ -957,6 +958,7 @@ public Object getTarget() {
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = Boolean.getBoolean(AbstractItem.class.getName() + ".skipPermissionCheck");
 
     /**

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -1602,6 +1602,7 @@ public Object getTarget() {
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = Boolean.getBoolean(Computer.class.getName() + ".skipPermissionCheck");
 
     /**

File: core/src/main/java/hudson/model/FileParameterValue.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.EnvVars;
 import hudson.FilePath;
 import hudson.Launcher;
@@ -72,6 +73,7 @@ public class FileParameterValue extends ParameterValue {
      * It's not recommended to enable for security reasons. That option is only present for backward compatibility.
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* Script Console modifiable */ boolean ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE = 
             Boolean.getBoolean(FileParameterValue.class.getName() + ".allowFolderTraversalOutsideWorkspace");
 

File: core/src/main/java/hudson/model/LoadStatistics.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import jenkins.util.SystemProperties;
 import hudson.model.MultiStageTimeSeries.TimeScale;
@@ -377,6 +378,7 @@ protected LoadStatisticsSnapshot computeSnapshot(Iterable<Queue.BuildableItem> q
     /**
      * Load statistics clock cycle in milliseconds. Specify a small value for quickly debugging this feature and node provisioning through cloud.
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static int CLOCK = SystemProperties.getInteger(LoadStatistics.class.getName() + ".clock", (int)TimeUnit.SECONDS.toMillis(10));
 
     /**

File: core/src/main/java/hudson/model/Node.java
Patch:
@@ -25,6 +25,7 @@
 package hudson.model;
 
 import com.infradna.tool.bridge_method_injector.WithBridgeMethods;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.ExtensionPoint;
 import hudson.FilePath;
@@ -99,6 +100,7 @@ public abstract class Node extends AbstractModelObject implements Reconfigurable
     private static final Logger LOGGER = Logger.getLogger(Node.class.getName());
 
     /** @see <a href="https://issues.jenkins-ci.org/browse/JENKINS-46652">JENKINS-46652</a> */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* not final */ boolean SKIP_BUILD_CHECK_ON_FLYWEIGHTS = SystemProperties.getBoolean(Node.class.getName() + ".SKIP_BUILD_CHECK_ON_FLYWEIGHTS", true);
 
     /**

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -29,6 +29,7 @@
 
 import com.jcraft.jzlib.GZIPInputStream;
 import com.thoughtworks.xstream.XStream;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.AbortException;
 import hudson.BulkChange;
 import hudson.EnvVars;
@@ -2659,6 +2660,7 @@ public Object getTarget() {
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = Boolean.getBoolean(Run.class.getName() + ".skipPermissionCheck");
 
 

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.model;
 
 import com.google.common.annotations.VisibleForTesting;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.BulkChange;
 import hudson.Extension;
 import hudson.ExtensionPoint;
@@ -2629,6 +2630,7 @@ public Object getTarget() {
      * Escape hatch for StaplerProxy-based access control
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = Boolean.getBoolean(UpdateCenter.class.getName() + ".skipPermissionCheck");
 
 

File: core/src/main/java/hudson/model/UsageStatistics.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.PluginWrapper;
 import hudson.Util;
 import hudson.Extension;
@@ -287,5 +288,6 @@ private static Cipher toCipher(RSAKey key, int mode) throws GeneralSecurityExcep
 
     private static final long DAY = DAYS.toMillis(1);
 
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean DISABLED = SystemProperties.getBoolean(UsageStatistics.class.getName()+".disabled");
 }

File: core/src/main/java/hudson/scm/SCMRevisionState.java
Patch:
@@ -1,5 +1,6 @@
 package hudson.scm;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.FilePath;
 import hudson.Launcher;
 import hudson.model.AbstractBuild;
@@ -44,7 +45,7 @@ public String getUrlName() {
       So instead, here we opt to a design where we tell SCM upfront about what we are comparing
       against (baseline), and have it give us the new state and degree of change in PollingResult.
      */
-
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static SCMRevisionState NONE = new None();
 
     private static final class None extends SCMRevisionState {}

File: core/src/main/java/hudson/search/Search.java
Patch:
@@ -25,6 +25,8 @@
 package hudson.search;
 
 import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;
+
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Util;
 import hudson.util.EditDistance;
 
@@ -415,6 +417,7 @@ public Object getTarget() {
     /**
      * Escape hatch for StaplerProxy-based access control
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     @Restricted(NoExternalUse.class)
     public static /* Script Console modifiable */ boolean SKIP_PERMISSION_CHECK = Boolean.getBoolean(Search.class.getName() + ".skipPermissionCheck");
 

File: core/src/main/java/hudson/security/GlobalSecurityConfiguration.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.security;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.BulkChange;
 import hudson.Extension;
 import hudson.Functions;
@@ -194,6 +195,7 @@ public Permission getRequiredPermission() {
 
     @Restricted(NoExternalUse.class)
     @RestrictedSince("2.222")
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static Predicate<Descriptor> FILTER = input -> input.getCategory() instanceof GlobalConfigurationCategory.Security;
 
     /**

File: core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.security;
 
 import com.google.common.annotations.VisibleForTesting;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.User;
 import java.util.Date;
 import java.util.Objects;
@@ -65,6 +66,7 @@ public class TokenBasedRememberMeServices2 extends TokenBasedRememberMeServices
     /**
      * Escape hatch for the check on the maximum date for the expiration duration of the remember me cookie
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* Script Console modifiable */ boolean SKIP_TOO_FAR_EXPIRATION_DATE_CHECK = 
             SystemProperties.getBoolean(TokenBasedRememberMeServices2.class.getName() + ".skipTooFarExpirationDateCheck");
 

File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.model.PersistentDescriptor;
 import jenkins.util.SystemProperties;
@@ -43,6 +44,7 @@ public class DefaultCrumbIssuer extends CrumbIssuer {
     private boolean excludeClientIPFromCrumb;
 
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* non-final: Groovy Console */ boolean EXCLUDE_SESSION_ID = SystemProperties.getBoolean(DefaultCrumbIssuer.class.getName() + ".EXCLUDE_SESSION_ID");
 
     @DataBoundConstructor

File: core/src/main/java/hudson/security/csrf/GlobalCrumbIssuerConfiguration.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.security.csrf;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import jenkins.model.GlobalConfiguration;
 import jenkins.model.GlobalConfigurationCategory;
@@ -76,5 +77,6 @@ public static CrumbIssuer createDefaultCrumbIssuer() {
     }
 
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* non-final */ boolean DISABLE_CSRF_PROTECTION = SystemProperties.getBoolean(GlobalCrumbIssuerConfiguration.class.getName() + ".DISABLE_CSRF_PROTECTION");
 }

File: core/src/main/java/hudson/slaves/CloudSlaveRetentionStrategy.java
Patch:
@@ -1,5 +1,6 @@
 package hudson.slaves;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.Computer;
 import hudson.model.Node;
 import java.util.concurrent.TimeUnit;
@@ -72,6 +73,7 @@ protected long getIdleMaxTime() {
     }
 
     // for debugging, it's convenient to be able to reduce this time
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static long TIMEOUT = SystemProperties.getLong(CloudSlaveRetentionStrategy.class.getName()+".timeout", TimeUnit.MINUTES.toMillis(10));
 
     private static final Logger LOGGER = Logger.getLogger(CloudSlaveRetentionStrategy.class.getName());

File: core/src/main/java/hudson/slaves/NodeProvisioner.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.slaves;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.AbortException;
 import hudson.ExtensionPoint;
 import hudson.model.*;
@@ -803,7 +804,9 @@ public static class NodeProvisionerInvoker extends PeriodicWork {
          * Give some initial warm up time so that statically connected agents
          * can be brought online before we start allocating more.
          */
+        @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
         public static int INITIALDELAY = SystemProperties.getInteger(NodeProvisioner.class.getName()+".initialDelay",LoadStatistics.CLOCK*10);
+        @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
         public static int RECURRENCEPERIOD = SystemProperties.getInteger(NodeProvisioner.class.getName()+".recurrencePeriod",LoadStatistics.CLOCK);
 
         @Override

File: core/src/main/java/hudson/tasks/_maven/Maven3MojoNote.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.tasks._maven;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.MarkupText;
 import hudson.console.ConsoleAnnotationDescriptor;
@@ -66,5 +67,5 @@ public String getDisplayName() {
         }
     }
 
-    public static Pattern PATTERN = Pattern.compile("\\[INFO\\] --- .+-plugin:[^:]+:[^ ]+ \\(.+\\) @ .+ ---");
+    public static final Pattern PATTERN = Pattern.compile("\\[INFO\\] --- .+-plugin:[^:]+:[^ ]+ \\(.+\\) @ .+ ---");
 }

File: core/src/main/java/hudson/tasks/_maven/MavenErrorNote.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.tasks._maven;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.MarkupText;
 import hudson.console.ConsoleAnnotationDescriptor;
@@ -53,6 +54,6 @@ public String getDisplayName() {
         }
     }
 
-    public static Pattern PATTERN = Pattern.compile("^\\[ERROR\\]");
+    public static final Pattern PATTERN = Pattern.compile("^\\[ERROR\\]");
 }
 

File: core/src/main/java/hudson/tasks/_maven/MavenMojoNote.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.tasks._maven;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.MarkupText;
 import hudson.console.ConsoleAnnotationDescriptor;
@@ -58,5 +59,5 @@ public String getDisplayName() {
         }
     }
 
-    public static Pattern PATTERN = Pattern.compile("\\[INFO\\] \\[[A-Za-z0-9-_]+:[A-Za-z0-9-_]+ \\{execution: [A-Za-z0-9-_]+\\}\\]");
+    public static final Pattern PATTERN = Pattern.compile("\\[INFO\\] \\[[A-Za-z0-9-_]+:[A-Za-z0-9-_]+ \\{execution: [A-Za-z0-9-_]+\\}\\]");
 }

File: core/src/main/java/hudson/tasks/_maven/MavenWarningNote.java
Patch:
@@ -55,5 +55,5 @@ public String getDisplayName() {
         }
     }
 
-    public static Pattern PATTERN = Pattern.compile("^\\[WARNING\\]");
+    public static final Pattern PATTERN = Pattern.compile("^\\[WARNING\\]");
 }

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -26,6 +26,7 @@
 
 import antlr.ANTLRException;
 import com.google.common.base.Preconditions;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.Functions;
 import hudson.Util;
@@ -760,5 +761,6 @@ public int hashCode() {
     /**
      * How long is too long for a polling activity to be in the queue?
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static long STARVATION_THRESHOLD = SystemProperties.getLong(SCMTrigger.class.getName()+".starvationThreshold", TimeUnit.HOURS.toMillis(1));
 }

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -24,6 +24,7 @@
  */
 package hudson.triggers;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.DependencyRunner;
 import hudson.DependencyRunner.ProjectRunnable;
 import hudson.DescriptorExtensionList;
@@ -302,6 +303,7 @@ public void run(AbstractProject p) {
         }
     }
 
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static long CRON_THRESHOLD = 1000*30;    // Default threshold 30s
 
     private static final Logger LOGGER = Logger.getLogger(Trigger.class.getName());

File: core/src/main/java/hudson/util/ChartUtil.java
Patch:
@@ -253,6 +253,7 @@ public static void adjustChebyshev(CategoryDataset dataset, NumberAxis yAxis) {
         yAxis.setRange(min,max);
     }
 
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static double CHEBYSHEV_N = 3;
 
     static {

File: core/src/main/java/hudson/util/ColorPalette.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.util;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.jfree.chart.renderer.category.LineAndShapeRenderer;
 
 import java.awt.Color;
@@ -46,6 +47,7 @@ public class ColorPalette {
     /**
      * Color list usable for generating line charts.
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static List<Color> LINE_GRAPH = Collections.unmodifiableList(Arrays.asList(
         new Color(0xCC0000),
         new Color(0x3465a4),

File: core/src/main/java/hudson/util/Secret.java
Patch:
@@ -29,6 +29,7 @@
 import com.thoughtworks.xstream.converters.UnmarshallingContext;
 import com.thoughtworks.xstream.io.HierarchicalStreamReader;
 import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import jenkins.util.SystemProperties;
 import java.util.Arrays;
 import hudson.Util;
@@ -305,6 +306,7 @@ public Object unmarshal(HierarchicalStreamReader reader, final UnmarshallingCont
     public static final boolean AUTO_ENCRYPT_PASSWORD_CONTROL = SystemProperties.getBoolean(Secret.class.getName() + ".AUTO_ENCRYPT_PASSWORD_CONTROL", true);
 
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* non-final */ boolean BLANK_NONSECRET_PASSWORD_FIELDS_WITHOUT_ITEM_CONFIGURE = SystemProperties.getBoolean(Secret.class.getName() + ".BLANK_NONSECRET_PASSWORD_FIELDS_WITHOUT_ITEM_CONFIGURE", true);
 
     static {

File: core/src/main/java/hudson/util/io/ArchiverFactory.java
Patch:
@@ -24,6 +24,7 @@
 
 package hudson.util.io;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.FilePath.TarCompression;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
@@ -47,6 +48,7 @@ public abstract class ArchiverFactory implements Serializable {
     /**
      * Uncompressed tar format.
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static ArchiverFactory TAR = new TarArchiverFactory(TarCompression.NONE);
 
     /**
@@ -57,6 +59,7 @@ public abstract class ArchiverFactory implements Serializable {
     /**
      * Zip format.
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static ArchiverFactory ZIP = new ZipArchiverFactory();
 
     /**

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -94,6 +94,7 @@ public SetupWizard() {
     /**
      * The security token parameter name
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static String initialSetupAdminUserName = "admin";
 
     private static final Logger LOGGER = Logger.getLogger(SetupWizard.class.getName());

File: core/src/main/java/jenkins/model/IdStrategy.java
Patch:
@@ -23,6 +23,7 @@
  */
 package jenkins.model;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.DescriptorExtensionList;
 import hudson.Extension;
 import hudson.ExtensionPoint;
@@ -55,6 +56,7 @@ public abstract class IdStrategy extends AbstractDescribableImpl<IdStrategy> imp
     /**
      * The default case insensitive strategy.
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static IdStrategy CASE_INSENSITIVE = new CaseInsensitive();
 
     /**

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -5278,7 +5278,9 @@ public boolean shouldShowStackTrace() {
      */
     public static String VIEW_RESOURCE_PATH = "/resources/TBD";
 
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean PARALLEL_LOAD = SystemProperties.getBoolean(Jenkins.class.getName() + "." + "parallelLoad", true);
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean KILL_AFTER_LOAD = SystemProperties.getBoolean(Jenkins.class.getName() + "." + "killAfterLoad", false);
     /**
      * @deprecated No longer used.
@@ -5336,6 +5338,7 @@ public boolean shouldShowStackTrace() {
     /**
      * Automatically try to launch an agent when Jenkins is initialized or a new agent computer is created.
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean AUTOMATIC_SLAVE_LAUNCH = true;
 
     private static final Logger LOGGER = Logger.getLogger(Jenkins.class.getName());

File: core/src/main/java/jenkins/model/StandardArtifactManager.java
Patch:
@@ -25,6 +25,7 @@
 package jenkins.model;
 
 import com.google.common.annotations.VisibleForTesting;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.FilePath;
 import hudson.Launcher;
 import hudson.Util;
@@ -50,6 +51,7 @@ public class StandardArtifactManager extends ArtifactManager {
 
     @Restricted(NoExternalUse.class)
     @VisibleForTesting
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static FilePath.TarCompression TAR_COMPRESSION = Boolean.getBoolean(StandardArtifactManager.class.getName() + ".disableTrafficCompression")
             ? FilePath.TarCompression.NONE
             : FilePath.TarCompression.GZIP;

File: core/src/main/java/jenkins/model/item_category/ItemCategory.java
Patch:
@@ -24,6 +24,7 @@
 
 package jenkins.model.item_category;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.ExtensionList;
 import hudson.ExtensionPoint;
@@ -47,6 +48,7 @@ public abstract class ItemCategory implements ExtensionPoint {
      * See <a href="https://jenkins-ci.org/issue/36593">JENKINS-36593</a> for more info.
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static int MIN_TOSHOW = 1;
 
     /**

File: core/src/main/java/jenkins/security/BasicHeaderRealPasswordAuthenticator.java
Patch:
@@ -14,6 +14,7 @@
  */
 package jenkins.security;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import java.io.IOException;
 import static java.util.logging.Level.*;
@@ -71,5 +72,6 @@ public Authentication authenticate2(HttpServletRequest req, HttpServletResponse
      * Legacy property to disable the real password support.
      * Now that this is an extension, {@link ExtensionFilter} is a better way to control this.
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean DISABLE = SystemProperties.getBoolean("jenkins.security.ignoreBasicAuth");
 }

File: core/src/main/java/jenkins/security/ResourceDomainRootAction.java
Patch:
@@ -27,6 +27,7 @@
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.ExtensionList;
 import hudson.Util;
@@ -308,5 +309,6 @@ private static Token decode(String value) {
     private static HMACConfidentialKey KEY = new HMACConfidentialKey(ResourceDomainRootAction.class, "key");
 
     // Not @Restricted because the entire class is
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* not final for Groovy */ int VALID_FOR_MINUTES = SystemProperties.getInteger(ResourceDomainRootAction.class.getName() + ".validForMinutes", 30);
 }

File: core/src/main/java/jenkins/security/s2m/CallableDirectionChecker.java
Patch:
@@ -1,5 +1,6 @@
 package jenkins.security.s2m;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import jenkins.util.SystemProperties;
 import hudson.remoting.Callable;
@@ -39,6 +40,7 @@ public class CallableDirectionChecker extends RoleChecker {
      * This is an escape hatch in case the fix breaks something critical, to allow the user
      * to keep operation.
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean BYPASS = SystemProperties.getBoolean(BYPASS_PROP);
 
     private CallableDirectionChecker(Object context) {

File: core/src/main/java/jenkins/security/s2m/DefaultFilePathFilter.java
Patch:
@@ -24,6 +24,7 @@
 
 package jenkins.security.s2m;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import jenkins.util.SystemProperties;
 import hudson.remoting.ChannelBuilder;
@@ -45,6 +46,7 @@
     /**
      * Escape hatch to disable this check completely.
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static boolean BYPASS = SystemProperties.getBoolean(DefaultFilePathFilter.class.getName()+".allow");
 
     private static final Logger LOGGER = Logger.getLogger(DefaultFilePathFilter.class.getName());

File: core/src/main/java/jenkins/security/seed/UserSeedProperty.java
Patch:
@@ -23,6 +23,7 @@
  */
 package jenkins.security.seed;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.BulkChange;
 import hudson.Extension;
 import hudson.model.User;
@@ -64,12 +65,14 @@ public class UserSeedProperty extends UserProperty {
      * If we disable the seed, we can still use it to write / store information but not verifying the data using it.
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* Script Console modifiable */ boolean DISABLE_USER_SEED = SystemProperties.getBoolean(UserSeedProperty.class.getName() + ".disableUserSeed");
 
     /**
      * Hide the user seed section from the UI to prevent accidental use
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* Script Console modifiable */ boolean HIDE_USER_SEED_SECTION = SystemProperties.getBoolean(UserSeedProperty.class.getName() + ".hideUserSeedSection");
 
     public static final String USER_SESSION_SEED = "_JENKINS_SESSION_SEED";

File: core/src/main/java/jenkins/security/stapler/StaplerDispatchValidator.java
Patch:
@@ -25,6 +25,7 @@
 package jenkins.security.stapler;
 
 import com.google.common.annotations.VisibleForTesting;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import jenkins.model.Jenkins;
 import jenkins.util.SystemProperties;
 import org.apache.commons.io.IOUtils;
@@ -90,6 +91,7 @@ public class StaplerDispatchValidator implements DispatchValidator {
     /**
      * Escape hatch to disable dispatch validation.
      */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static /* script-console editable */ boolean DISABLED = SystemProperties.getBoolean(ESCAPE_HATCH);
 
     private static @CheckForNull Boolean setStatus(@NonNull StaplerRequest req, @CheckForNull Boolean status) {

File: core/src/main/java/jenkins/security/stapler/StaticRoutingDecisionProvider.java
Patch:
@@ -24,6 +24,7 @@
 package jenkins.security.stapler;
 
 import com.google.common.annotations.VisibleForTesting;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.BulkChange;
 import hudson.Extension;
 import hudson.ExtensionList;
@@ -261,6 +262,7 @@ private void parseFileIntoList(List<String> lines, Set<String> whitelist, Set<St
     }
     
     /** Allow script console access */
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static String WHITELIST_PATH = SystemProperties.getString(StaticRoutingDecisionProvider.class.getName() + ".whitelist");
 
 }

File: core/src/main/java/jenkins/tools/GlobalToolConfiguration.java
Patch:
@@ -23,6 +23,7 @@
  */
 package jenkins.tools;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.Functions;
 import hudson.model.Descriptor;
@@ -107,6 +108,7 @@ private boolean configureDescriptor(StaplerRequest req, JSONObject json, Descrip
         return d.configure(req, js);
     }
 
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static Predicate<Descriptor> FILTER = input -> input.getCategory() instanceof ToolConfigurationCategory;
 
     private static final Logger LOGGER = Logger.getLogger(GlobalToolConfiguration.class.getName());

File: core/src/main/java/jenkins/util/xstream/XStreamDOM.java
Patch:
@@ -35,6 +35,7 @@
 import com.thoughtworks.xstream.io.xml.AbstractXmlWriter;
 import com.thoughtworks.xstream.io.xml.DocumentReader;
 import com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Util;
 import hudson.util.VariableResolver;
 
@@ -539,5 +540,6 @@ public XStreamDOM unmarshalElement(HierarchicalStreamReader r, UnmarshallingCont
         }
     }
 
+    @SuppressFBWarnings("MS_SHOULD_BE_FINAL")
     public static XmlFriendlyReplacer REPLACER = new XmlFriendlyReplacer();
 }

File: core/src/main/java/hudson/model/PasswordParameterDefinition.java
Patch:
@@ -54,6 +54,7 @@ public PasswordParameterDefinition(String name, String defaultValue, String desc
         this.defaultValue = Secret.fromString(defaultValue);
     }
 
+    // TODO consider switching @DataBoundConstructor to a PasswordParameterDefinition(String) overload
     @DataBoundConstructor
     public PasswordParameterDefinition(String name, Secret defaultValueAsSecret, String description) {
         super(name, description);

File: core/src/main/java/hudson/model/RunParameterDefinition.java
Patch:
@@ -63,6 +63,7 @@ public String getName() {
     private final String runId;
     private final RunParameterFilter filter;
 
+    // TODO consider a simplified @DataBoundConstructor using @DataBoundSetter for description & filter
     /**
      * @since 1.517
      */

File: core/src/main/java/hudson/model/StringParameterValue.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.model;
 
 import hudson.EnvVars;
+import hudson.Util;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.export.Exported;
 
@@ -48,7 +49,7 @@ public StringParameterValue(String name, String value) {
 
     public StringParameterValue(String name, String value, String description) {
         super(name, description);
-        this.value = value;
+        this.value = Util.fixNull(value);
     }
 
     /**

File: core/src/main/java/jenkins/install/InstallState.java
Patch:
@@ -211,6 +211,8 @@ public void initializeState() {
 
             // Schedule an update of the update center after a Jenkins upgrade
             reloadUpdateSiteData();
+            
+            InstallUtil.saveLastExecVersion();
         }
 
         /**

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -1355,7 +1355,7 @@ public static boolean isNonMetaLabel(String label) {
     public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {
         List<JSONObject> plugins = new ArrayList<>();
         for (UpdateSite site : Jenkins.get().getUpdateCenter().getSiteList()) {
-            plugins = site.getAvailables().stream()
+            List<JSONObject> sitePlugins = site.getAvailables().stream()
                 .filter(plugin -> {
                     if (StringUtils.isBlank(query)) {
                         return true;
@@ -1369,7 +1369,7 @@ public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParamete
                             .anyMatch(category -> StringUtils.containsIgnoreCase(category, query)) ||
                         plugin.hasWarnings() && query.equalsIgnoreCase("warning:");
                 })
-                .limit(limit)
+                .limit(Math.max(limit - plugins.size(), 1))
                 .sorted((o1, o2) -> {
                     String o1DisplayName = o1.getDisplayName();
                     if (o1.name.equalsIgnoreCase(query) ||
@@ -1453,6 +1453,7 @@ public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParamete
                     return jsonObject;
                 })
                 .collect(toList());
+            plugins.addAll(sitePlugins);
             if (plugins.size() >= limit) {
                 break;
             }

File: core/src/test/java/hudson/util/ConsistentHashTest.java
Patch:
@@ -96,7 +96,7 @@ public void unevenDistribution() {
             }
         }
 
-        System.out.printf("%d/%d\n", even, odd);
+        System.out.printf("%d/%d%n", even, odd);
         assertTrue(even * 8 < odd);
     }
 

File: core/src/test/java/hudson/util/SecretTest.java
Patch:
@@ -67,8 +67,9 @@ public void encrypt() {
 
     @Test
     public void encryptedValuePattern() {
+        final Random random = new Random();
         for (int i = 1; i < 100; i++) {
-            String plaintext = RandomStringUtils.random(new Random().nextInt(i));
+            String plaintext = RandomStringUtils.random(random.nextInt(i));
             String ciphertext = Secret.fromString(plaintext).getEncryptedValue();
             //println "${plaintext} → ${ciphertext}"
             assert ENCRYPTED_VALUE_PATTERN.matcher(ciphertext).matches();

File: core/src/test/java/jenkins/util/xstream/XStreamDOMTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.xmlunit.diff.DefaultNodeMatcher;
 import org.xmlunit.diff.ElementSelectors;
 
+import static org.hamcrest.Matchers.instanceOf;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -141,7 +142,7 @@ public void testDomInMap() {
         v.values.put("foo",createSomeFoo().bar);
         String xml = xs.toXML(v);
         Object v2 = xs.fromXML(xml);
-        assertTrue(v2 instanceof DomInMap);
+        assertThat(v2, instanceOf(DomInMap.class));
         assertXStreamDOMEquals(v.values.get("foo"), ((DomInMap)v2).values.get("foo"));
     }
     

File: core/src/test/java/hudson/util/SecretTest.java
Patch:
@@ -67,8 +67,9 @@ public void encrypt() {
 
     @Test
     public void encryptedValuePattern() {
+        final Random random = new Random();
         for (int i = 1; i < 100; i++) {
-            String plaintext = RandomStringUtils.random(new Random().nextInt(i));
+            String plaintext = RandomStringUtils.random(random.nextInt(i));
             String ciphertext = Secret.fromString(plaintext).getEncryptedValue();
             //println "${plaintext} → ${ciphertext}"
             assert ENCRYPTED_VALUE_PATTERN.matcher(ciphertext).matches();

File: core/src/test/java/jenkins/util/xstream/XStreamDOMTest.java
Patch:
@@ -25,11 +25,13 @@
 
 import hudson.util.XStream2;
 import org.apache.commons.io.IOUtils;
+import org.hamcrest.core.IsInstanceOf;
 import org.junit.Before;
 import org.junit.Test;
 import org.xmlunit.diff.DefaultNodeMatcher;
 import org.xmlunit.diff.ElementSelectors;
 
+import static org.hamcrest.Matchers.instanceOf;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -141,7 +143,7 @@ public void testDomInMap() {
         v.values.put("foo",createSomeFoo().bar);
         String xml = xs.toXML(v);
         Object v2 = xs.fromXML(xml);
-        assertTrue(v2 instanceof DomInMap);
+        assertThat(v2, instanceOf(DomInMap.class));
         assertXStreamDOMEquals(v.values.get("foo"), ((DomInMap)v2).values.get("foo"));
     }
     

File: core/src/test/java/hudson/util/ConsistentHashTest.java
Patch:
@@ -96,7 +96,7 @@ public void unevenDistribution() {
             }
         }
 
-        System.out.printf("%d/%d\n", even, odd);
+        System.out.printf("%d/%d%n", even, odd);
         assertTrue(even * 8 < odd);
     }
 

File: core/src/main/java/hudson/security/HudsonFilter.java
Patch:
@@ -130,7 +130,7 @@ public static HudsonFilter get(ServletContext context) {
     /**
      * Reset the proxies and filter for a change in {@link SecurityRealm}.
      */
-    public void reset(SecurityRealm securityRealm) throws ServletException {
+    public synchronized void reset(SecurityRealm securityRealm) throws ServletException {
         if (securityRealm != null) {
             SecurityRealm.SecurityComponents sc = securityRealm.getSecurityComponents();
             AUTHENTICATION_MANAGER.setDelegate(sc.manager2);

File: test/src/test/java/hudson/model/QueueTest.java
Patch:
@@ -440,7 +440,7 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
         cloud.label = r.jenkins.getLabel("remote");
         r.jenkins.clouds.add(cloud);
         r.jenkins.setNumExecutors(0);
-        r.jenkins.setNodes(Collections.<Node>emptyList());
+        r.jenkins.setNodes(Collections.emptyList());
         MatrixProject m = r.jenkins.createProject(MatrixProject.class, "p");
         m.setAxes(new AxisList(new LabelAxis("label", Collections.singletonList("remote"))));
         MatrixBuild build;

File: core/src/main/java/org/jenkins/ui/icon/Icon.java
Patch:
@@ -45,7 +45,7 @@ public class Icon {
     public static final String ICON_LARGE_STYLE = "width: 32px; height: 32px;";
     public static final String ICON_XLARGE_STYLE = "width: 48px; height: 48px;";
 
-    private static final Map<String, String> iconDims = new HashMap<String, String>();
+    private static final Map<String, String> iconDims = new HashMap<>();
 
     static {
         iconDims.put("16x16", "icon-sm");
@@ -216,7 +216,7 @@ public static String toNormalizedCSSSelector(String classNames) {
         }
 
         String[] classNameTokA = classNames.split(" ");
-        List<String> classNameTokL = new ArrayList<String>();
+        List<String> classNameTokL = new ArrayList<>();
 
         // Trim all tokens first
         for (String classNameTok : classNameTokA) {

File: test/src/test/java/hudson/bugs/DateConversionTest.java
Patch:
@@ -48,7 +48,7 @@ public void test() throws Exception {
         final DateConverter dc =new DateConverter();
         ExecutorService es = Executors.newFixedThreadPool(10);
 
-        List<Future> futures = new ArrayList<Future>();
+        List<Future> futures = new ArrayList<>();
         for(int i=0;i<10;i++) {
             futures.add(es.submit(new Callable<Object>() {
                 public Object call() throws Exception {

File: test/src/test/java/hudson/model/AutoCompletionCandidatesTest.java
Patch:
@@ -61,6 +61,6 @@ public void completion() throws Exception {
     }
 
     private void assertContains(AutoCompletionCandidates c, String... values) {
-        assertEquals(new TreeSet<String>(Arrays.asList(values)), new TreeSet<String>(c.getValues()));
+        assertEquals(new TreeSet<>(Arrays.asList(values)), new TreeSet<>(c.getValues()));
     }
 }

File: test/src/test/java/hudson/model/DownloadService2Test.java
Patch:
@@ -60,7 +60,7 @@ private static void assertRoots(String expected, String file) throws Exception {
         assertNotNull(file, resource);
         JSONObject json = JSONObject.fromObject(DownloadService.loadJSONHTML(resource));
         @SuppressWarnings("unchecked") Set<String> keySet = json.keySet();
-        assertEquals(expected, new TreeSet<String>(keySet).toString());
+        assertEquals(expected, new TreeSet<>(keySet).toString());
     }
 
 }

File: test/src/test/java/hudson/model/DownloadServiceTest.java
Patch:
@@ -31,7 +31,7 @@ private static void assertRoots(String expected, String file) throws Exception {
         assertNotNull(file, resource);
         JSONObject json = JSONObject.fromObject(DownloadService.loadJSON(resource));
         @SuppressWarnings("unchecked") Set<String> keySet = json.keySet();
-        assertEquals(expected, new TreeSet<String>(keySet).toString());
+        assertEquals(expected, new TreeSet<>(keySet).toString());
     }
 
     public void testReduceFunctionWithMavenJsons() throws Exception {

File: test/src/test/java/hudson/model/FingerprintTest.java
Patch:
@@ -419,7 +419,7 @@ private void setJobPermissionsOnce(Job<?,?> job, String username, @NonNull Permi
             throws IOException {
         assertThat("Cannot assign the property twice", job.getProperty(AuthorizationMatrixProperty.class), nullValue());
         
-        Map<Permission, Set<String>> permissions = new HashMap<Permission, Set<String>>(); 
+        Map<Permission, Set<String>> permissions = new HashMap<>();
         HashSet<String> userSpec = new HashSet<>(Collections.singletonList(username));
 
         for (Permission p : s) {

File: test/src/test/java/hudson/model/QueueTest.java
Patch:
@@ -422,7 +422,7 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
         }
         m.setAxes(new AxisList(new TextAxis("DoesntMatter", "aaa","bbb")));
 
-        List<Future<MatrixBuild>> futures = new ArrayList<Future<MatrixBuild>>();
+        List<Future<MatrixBuild>> futures = new ArrayList<>();
 
         for (int i = 0; i < 3; i++) {
             futures.add(m.scheduleBuild2(0, new UserIdCause(), new ParametersAction(new StringParameterValue("FOO", "value" + i))));
@@ -994,7 +994,7 @@ public void queueApiOutputShouldBeFilteredByUserPermission() throws Exception {
 
         FreeStyleProject project = r.createFreeStyleProject("project");
 
-        Map<Permission, Set<String>> permissions = new HashMap<Permission, Set<String>>();
+        Map<Permission, Set<String>> permissions = new HashMap<>();
         permissions.put(Item.READ, Collections.singleton("bob"));
         permissions.put(Item.DISCOVER, Collections.singleton("james"));
         AuthorizationMatrixProperty prop1 = new AuthorizationMatrixProperty(permissions);

File: test/src/test/java/hudson/model/UpdateSiteTest.java
Patch:
@@ -125,7 +125,7 @@ public void shutdownWebserver() throws Exception {
         Data data = site.getData();
         assertNotNull(data);
         assertEquals(new URL(url, "jenkins.war").toString(), data.core.url);
-        assertEquals(new HashSet<String>(Arrays.asList("tasks", "dummy")), data.plugins.keySet());
+        assertEquals(new HashSet<>(Arrays.asList("tasks", "dummy")), data.plugins.keySet());
         assertEquals(new URL(url, "tasks.jpi").toString(), data.plugins.get("tasks").url);
         assertEquals("http://nowhere.net/dummy.hpi", data.plugins.get("dummy").url);
 
@@ -248,7 +248,7 @@ private PluginWrapper buildPluginWrapper(String name, String wikiUrl) {
                 null,
                 new File("/tmp/" + name + ".jpi.disabled"),
                 null,
-                new ArrayList<Dependency>()
+                new ArrayList<>()
         );
     }
 }

File: test/src/test/java/hudson/model/queue/LoadPredictorTest.java
Patch:
@@ -93,7 +93,7 @@ public void test1() throws Exception {
     }
 
     private BuildableItem wrap(Queue.Task t) {
-        return new BuildableItem(new WaitingItem(new GregorianCalendar(),t,new ArrayList<Action>()));
+        return new BuildableItem(new WaitingItem(new GregorianCalendar(),t,new ArrayList<>()));
     }
 
     /**

File: test/src/test/java/hudson/search/SearchTest.java
Patch:
@@ -441,7 +441,7 @@ public void adminOnlyLinksNotShownToRegularUser() {
     }
 
     private List<SearchItem> suggest(SearchIndex index, String term) {
-        List<SearchItem> result = new ArrayList<SearchItem>();
+        List<SearchItem> result = new ArrayList<>();
         index.suggest(term, result);
         return result;
     }

File: test/src/test/java/hudson/slaves/JNLPLauncherTest.java
Patch:
@@ -268,10 +268,10 @@ private Computer addTestAgent(boolean enableWorkDir) throws Exception {
      * Adds an Inbound TCP agent to the system and returns it.
      */
     private Computer addTestAgent(ComputerLauncher launcher) throws Exception {
-        List<Node> agents = new ArrayList<Node>(j.jenkins.getNodes());
+        List<Node> agents = new ArrayList<>(j.jenkins.getNodes());
         File dir = Util.createTempDir();
         agents.add(new DumbSlave("test","dummy",dir.getAbsolutePath(),"1", Mode.NORMAL, "",
-                launcher, RetentionStrategy.INSTANCE, new ArrayList<NodeProperty<?>>()));
+                launcher, RetentionStrategy.INSTANCE, new ArrayList<>()));
         j.jenkins.setNodes(agents);
         Computer c = j.jenkins.getComputer("test");
         assertNotNull(c);

File: test/src/test/java/hudson/slaves/NodeProvisionerTest.java
Patch:
@@ -190,7 +190,7 @@ private DummyCloudImpl initHudson(int delay) throws IOException {
     }
 
     private List<FreeStyleProject> create5SlowJobs(Latch l) throws IOException {
-        List<FreeStyleProject> jobs = new ArrayList<FreeStyleProject>();
+        List<FreeStyleProject> jobs = new ArrayList<>();
         for( int i=0; i<l.init; i++)
             //set a large delay, to simulate the situation where we need to provision more slaves
             // to keep up with the load
@@ -203,7 +203,7 @@ private List<FreeStyleProject> create5SlowJobs(Latch l) throws IOException {
      */
     private List<Future<FreeStyleBuild>> buildAll(List<FreeStyleProject> jobs) {
         System.out.println("Scheduling builds for "+jobs.size()+" jobs");
-        List<Future<FreeStyleBuild>> builds = new ArrayList<Future<FreeStyleBuild>>();
+        List<Future<FreeStyleBuild>> builds = new ArrayList<>();
         for (FreeStyleProject job : jobs)
             builds.add(job.scheduleBuild2(0));
         return builds;

File: test/src/test/java/hudson/tasks/BuildTriggerTest.java
Patch:
@@ -214,7 +214,7 @@ public void downstreamProjectSecurity() throws Exception {
         final FreeStyleProject upstream =j. createFreeStyleProject("upstream");
         org.acegisecurity.Authentication alice = User.get("alice").impersonate();
         QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap("upstream", alice)));
-        Map<Permission,Set<String>> perms = new HashMap<Permission,Set<String>>();
+        Map<Permission,Set<String>> perms = new HashMap<>();
         perms.put(Item.READ, Collections.singleton("alice"));
         perms.put(Item.CONFIGURE, Collections.singleton("alice"));
         upstream.addProperty(new AuthorizationMatrixProperty(perms));
@@ -242,7 +242,7 @@ public void downstreamProjectSecurity() throws Exception {
         j.waitUntilNoActivity();
         assertNull(downstream.getLastBuild());
         // If we can see them, but not build them, that is a warning (but this is in cleanUp so the build is still considered a success):
-        Map<Permission,Set<String>> grantedPermissions = new HashMap<Permission,Set<String>>();
+        Map<Permission,Set<String>> grantedPermissions = new HashMap<>();
         grantedPermissions.put(Item.READ, Collections.singleton("alice"));
         AuthorizationMatrixProperty amp = new AuthorizationMatrixProperty(grantedPermissions);
         downstream.addProperty(amp);

File: test/src/test/java/hudson/triggers/TriggerStartTest.java
Patch:
@@ -107,7 +107,7 @@ private String triggersSection() {
 
     public static class MockTrigger extends Trigger<Item> {
 
-        public transient List<Boolean> calls = new ArrayList<Boolean>();
+        public transient List<Boolean> calls = new ArrayList<>();
 
         @DataBoundConstructor public MockTrigger() {}
 
@@ -117,7 +117,7 @@ public static class MockTrigger extends Trigger<Item> {
         }
 
         @Override protected Object readResolve() throws ObjectStreamException {
-            calls = new ArrayList<Boolean>();
+            calls = new ArrayList<>();
             return super.readResolve();
         }
 

File: test/src/test/java/hudson/util/BootFailureTest.java
Patch:
@@ -140,7 +140,7 @@ public File allocate() throws Exception {
 
         // second failed boot
         problem = null;
-        runRecord = new ArrayList<String>();
+        runRecord = new ArrayList<>();
         assertNull(j.newHudson());
         assertEquals(2, bootFailures(home));
         assertEquals(Arrays.asList("1", "2"), runRecord);
@@ -184,6 +184,6 @@ public void onLoaded() {
 
     // to be set by the script
     public static Exception problem;
-    public static List<String> runRecord = new ArrayList<String>();
+    public static List<String> runRecord = new ArrayList<>();
 
 }

File: test/src/test/java/jenkins/model/ContextMenuTest.java
Patch:
@@ -94,7 +94,7 @@ public class ContextMenuTest {
     }
 
     private static Map<String,String> parse(ContextMenu menu) {
-        Map<String,String> r = new TreeMap<String,String>();
+        Map<String,String> r = new TreeMap<>();
         for (MenuItem mi : menu.items) {
             r.put(mi.url.replaceFirst("^.*/(.)", "$1"), mi.displayName);
         }

File: test/src/test/java/jenkins/security/SecurityContextExecutorServiceTest.java
Patch:
@@ -133,7 +133,7 @@ public SecurityContext call() throws Exception {
     @Test
     @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS)
     public void testCallableCollectionAgainstAllContexts() throws Exception {
-        Collection<Callable<SecurityContext>> callables = new LinkedList<Callable<SecurityContext>>();
+        Collection<Callable<SecurityContext>> callables = new LinkedList<>();
         Callable<SecurityContext> c = new Callable<SecurityContext>() {
             public SecurityContext call() throws Exception {
                 return SecurityContextHolder.getContext();

File: test/src/test/java/lib/form/RepeatableTest.java
Patch:
@@ -54,7 +54,7 @@ public class RepeatableTest extends HudsonTestCase {
     private JSONObject formData;
     private Class<?> bindClass;
     private List<?> bindResult;
-    public List<Object> list = new ArrayList<Object>();
+    public List<Object> list = new ArrayList<>();
     public List<Object> defaults = null;
     public Integer minimum = null;
 
@@ -206,7 +206,7 @@ public void testFieldDefaultsIgnoredIfFieldHasData() throws Exception {
     }    
 
     private void addDefaults() {
-        defaults = new ArrayList<Object>();
+        defaults = new ArrayList<>();
         defaults.add(new Foo("default one", true));
         defaults.add(new Foo("default two", false));
     }

File: test/src/test/java/lib/hudson/ListScmBrowsersTest.java
Patch:
@@ -47,7 +47,7 @@ private void check(Item p) throws IOException, SAXException {
         List<HtmlSelect> selects = DomNodeUtil.selectNodes(page, "//select");
         assertTrue(selects.size()>0);
         for (HtmlSelect select : selects) {
-            Set<String> title = new HashSet<String>();
+            Set<String> title = new HashSet<>();
             for(HtmlOption o : select.getOptions()) {
                 assertTrue("Duplicate entry: "+o.getText(),title.add(o.getText()));
             }

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -978,7 +978,7 @@ public static List<SCMDescriptor<?>> getSCMDescriptors(AbstractProject<?,?> proj
     @Restricted(DoNotUse.class)
     @RestrictedSince("2.12")
     public static List<Descriptor<ComputerLauncher>> getComputerLauncherDescriptors() {
-        return Jenkins.get().<ComputerLauncher,Descriptor<ComputerLauncher>>getDescriptorList(ComputerLauncher.class);
+        return Jenkins.get().getDescriptorList(ComputerLauncher.class);
     }
 
     /**

File: core/src/main/java/hudson/scm/SCM.java
Patch:
@@ -728,7 +728,7 @@ protected final String nullify(String s) {
      * Returns all the registered {@link SCMDescriptor}s.
      */
     public static DescriptorExtensionList<SCM,SCMDescriptor<?>> all() {
-        return Jenkins.get().<SCM,SCMDescriptor<?>>getDescriptorList(SCM.class);
+        return Jenkins.get().getDescriptorList(SCM.class);
     }
 
     /**

File: core/src/test/java/hudson/FunctionsTest.java
Patch:
@@ -179,7 +179,7 @@ public void testGetRelativeLinkTo_JobNotContainedInView() throws Exception{
         when(view.getOwner().getItemGroup()).thenReturn(parent);
         createMockAncestors(req, createAncestor(j, "../.."), createAncestor(view, "."));
         TopLevelItem i = createMockItem(parent, "job/i/");
-        when(view.getItems()).thenReturn(Collections.<TopLevelItem>emptyList());
+        when(view.getItems()).thenReturn(Collections.emptyList());
         String result = Functions.getRelativeLinkTo(i);
         assertEquals("/jenkins/job/i/", result);
     }

File: core/src/test/java/hudson/model/MockItem.java
Patch:
@@ -34,7 +34,7 @@
 public class MockItem extends Queue.Item {
 
     public MockItem(long id) {
-        super(null, Collections.<Action>emptyList(), id, null);
+        super(null, Collections.emptyList(), id, null);
     }
 
     public MockItem(Queue.Task task) {

File: core/src/test/java/jenkins/widgets/HistoryPageFilterTest.java
Patch:
@@ -350,7 +350,7 @@ public void should_search_builds_by_build_variables() throws IOException {
     @Test
     @Issue("JENKINS-40718")
     public void should_search_builds_by_build_params() throws IOException {
-        List<ModelObject> runs = ImmutableList.<ModelObject>of(
+        List<ModelObject> runs = ImmutableList.of(
                 new MockBuild(2).withBuildParameters(ImmutableMap.of("env", "dummyEnv")),
                 new MockBuild(1).withBuildParameters(ImmutableMap.of("env", "otherEnv")));
         assertOneMatchingBuildForGivenSearchStringAndRunItems("dummyEnv", runs);

File: test/src/test/java/hudson/ExtensionListTest.java
Patch:
@@ -121,7 +121,7 @@ public static final class DescriptorImpl extends FishDescriptor {}
     public void descriptorLookup() throws Exception {
         Descriptor<Fish> d = new Sishamo().getDescriptor();
 
-        DescriptorExtensionList<Fish,Descriptor<Fish>> list = j.jenkins.<Fish,Descriptor<Fish>>getDescriptorList(Fish.class);
+        DescriptorExtensionList<Fish,Descriptor<Fish>> list = j.jenkins.getDescriptorList(Fish.class);
         assertSame(d,list.get(Sishamo.DescriptorImpl.class));
 
         assertSame(d, j.jenkins.getDescriptor(Sishamo.class));
@@ -132,7 +132,7 @@ public void fishDiscovery() throws Exception {
         // imagine that this is a static instance, like it is in many LIST static field in Hudson.
         DescriptorList<Fish> LIST = new DescriptorList<Fish>(Fish.class);
 
-        DescriptorExtensionList<Fish,Descriptor<Fish>> list = j.jenkins.<Fish,Descriptor<Fish>>getDescriptorList(Fish.class);
+        DescriptorExtensionList<Fish,Descriptor<Fish>> list = j.jenkins.getDescriptorList(Fish.class);
         assertEquals(2,list.size());
         assertNotNull(list.get(Tai.DescriptorImpl.class));
         assertNotNull(list.get(Saba.DescriptorImpl.class));

File: test/src/test/java/hudson/model/ParametersAction2Test.java
Patch:
@@ -139,7 +139,7 @@ public void parametersDefinitionChange() throws Exception {
     @Issue("SECURITY-170")
     public void whitelistedParameter() throws Exception {
         FreeStyleProject p = j.createFreeStyleProject();
-        p.addProperty(new ParametersDefinitionProperty(Arrays.<ParameterDefinition>asList(
+        p.addProperty(new ParametersDefinitionProperty(Arrays.asList(
                 new StringParameterDefinition("foo", "foo"),
                 new StringParameterDefinition("bar", "bar"))));
 

File: test/src/test/java/hudson/slaves/NodeProvisionerTest.java
Patch:
@@ -185,7 +185,7 @@ private DummyCloudImpl initHudson(int delay) throws IOException {
 
         // no build on the master, to make sure we get everything from the cloud
         r.jenkins.setNumExecutors(0);
-        r.jenkins.setNodes(Collections.<Node>emptyList());
+        r.jenkins.setNodes(Collections.emptyList());
         return cloud;
     }
 

File: test/src/test/java/hudson/tasks/LogRotatorTest.java
Patch:
@@ -74,7 +74,7 @@ public void successVsFailure() throws Exception {
         assertEquals(Result.FAILURE, build(project)); // #2
         assertEquals(Result.FAILURE, build(project)); // #3
         assertEquals(1, numberOf(project.getLastSuccessfulBuild()));
-        project.getBuildersList().replaceBy(Collections.<Builder>emptySet());
+        project.getBuildersList().replaceBy(Collections.emptySet());
         assertEquals(Result.SUCCESS, build(project)); // #4
         assertEquals(4, numberOf(project.getLastSuccessfulBuild()));
         assertNull(project.getBuildByNumber(1));
@@ -92,7 +92,7 @@ public void stableVsUnstable() throws Exception {
         assertEquals(Result.UNSTABLE, build(project)); // #2
         assertEquals(Result.UNSTABLE, build(project)); // #3
         assertEquals(1, numberOf(project.getLastStableBuild()));
-        project.getPublishersList().replaceBy(Collections.<Publisher>emptySet());
+        project.getPublishersList().replaceBy(Collections.emptySet());
         assertEquals(Result.SUCCESS, build(project)); // #4
         assertNull(project.getBuildByNumber(1));
         assertNull(project.getBuildByNumber(2));

File: test/src/test/java/hudson/tasks/MavenTest.java
Patch:
@@ -274,7 +274,7 @@ public void parametersReferencedFromPropertiesShouldRetainBackslashes() throws E
     @Issue("JENKINS-18898")
     @Test public void testNullHome() {
         EnvVars env = new EnvVars();
-        new MavenInstallation("_", "", Collections.<ToolProperty<?>>emptyList()).buildEnvVars(env);
+        new MavenInstallation("_", "", Collections.emptyList()).buildEnvVars(env);
         assertTrue(env.isEmpty());
     }
 

File: test/src/test/java/hudson/tools/InstallerTranslatorTest.java
Patch:
@@ -51,7 +51,7 @@ public class InstallerTranslatorTest {
 
     @Issue("JENKINS-23517")
     @Test public void offlineNodeForJDK() throws Exception {
-        Node slave = new DumbSlave("disconnected-slave", null, "/wherever", "1", Node.Mode.NORMAL, null, new JNLPLauncher(true), RetentionStrategy.NOOP, Collections.<NodeProperty<?>>emptyList());
+        Node slave = new DumbSlave("disconnected-slave", null, "/wherever", "1", Node.Mode.NORMAL, null, new JNLPLauncher(true), RetentionStrategy.NOOP, Collections.emptyList());
         String globalDefaultLocation = "/usr/lib/jdk";
         JDK jdk = new JDK("my-jdk", globalDefaultLocation, Collections.singletonList(new InstallSourceProperty(Collections.singletonList(new CommandInstaller(null, "irrelevant", "/opt/jdk")))));
         r.jenkins.getJDKs().add(jdk);

File: test/src/test/java/jenkins/tasks/SimpleBuildWrapperTest.java
Patch:
@@ -142,7 +142,7 @@ public static class WrapperWithEnvOverrideExpand extends SimpleBuildWrapper {
     }
     private static class SpecialEnvSlave extends Slave {
         SpecialEnvSlave(File remoteFS, ComputerLauncher launcher) throws Descriptor.FormException, IOException {
-            super("special", "SpecialEnvSlave", remoteFS.getAbsolutePath(), 1, Mode.NORMAL, "", launcher, RetentionStrategy.NOOP, Collections.<NodeProperty<?>>emptyList());
+            super("special", "SpecialEnvSlave", remoteFS.getAbsolutePath(), 1, Mode.NORMAL, "", launcher, RetentionStrategy.NOOP, Collections.emptyList());
         }
         @Override public Computer createComputer() {
             return new SpecialEnvComputer(this);

File: test/src/test/java/jenkins/widgets/HistoryPageFilterCaseSensitiveSearchTest.java
Patch:
@@ -69,7 +69,7 @@ private void setCaseSensitiveSearchForUserAndCheckAssertionForGivenSearchString(
             User.get(TEST_USER_NAME).addProperty(new UserSearchProperty(false));
 
             //test logic
-            final List<ModelObject> runs = ImmutableList.<ModelObject>of(new MockRun(2, Result.FAILURE), new MockRun(1, Result.SUCCESS));
+            final List<ModelObject> runs = ImmutableList.of(new MockRun(2, Result.FAILURE), new MockRun(1, Result.SUCCESS));
             assertNoMatchingBuildsForGivenSearchStringAndRunItems(searchString, runs, assertionOnSearchResults);
         }
 
@@ -83,7 +83,7 @@ private void assertNoMatchingBuildsForGivenSearchStringAndRunItems(String search
         historyPageFilter.setSearchString(searchString);
 
         //when
-        historyPageFilter.add(runs, Collections.<Queue.Item>emptyList());
+        historyPageFilter.add(runs, Collections.emptyList());
 
         //then
         assertionOnSearchResults.doAssertion(historyPageFilter);

File: test/src/test/java/lib/form/RepeatableTest.java
Patch:
@@ -335,7 +335,7 @@ public static class Fruity {
     }
 
     public DescriptorExtensionList<Fruit,Descriptor<Fruit>> getFruitDescriptors() {
-        return jenkins.<Fruit,Descriptor<Fruit>>getDescriptorList(Fruit.class);
+        return jenkins.getDescriptorList(Fruit.class);
     }
 
     public void testDropdownList() throws Exception {

File: core/src/main/java/hudson/security/ACLContext.java
Patch:
@@ -42,7 +42,7 @@ public class ACLContext implements AutoCloseable {
     private final SecurityContext previousContext;
 
     /**
-     * Private constructor to ensure only instance creation is from {@link ACL#as(Authentication)}.
+     * Private constructor to ensure only instance creation is from {@link ACL#as2(Authentication)}.
      * @param previousContext the previous context
      */
     ACLContext(@NonNull SecurityContext previousContext) {

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -614,7 +614,7 @@ public final XmlFile getConfigFile() {
         return Items.getConfigFile(this);
     }
 
-    private Object writeReplace() {
+    protected Object writeReplace() {
         return XmlFile.replaceIfNotAtTopLevel(this, () -> new Replacer(this));
     }
     private static class Replacer {

File: core/src/main/java/hudson/model/ListView.java
Patch:
@@ -132,7 +132,7 @@ public void setJobFilters(List<ViewJobFilter> jobFilters) throws IOException {
         this.jobFilters.replaceBy(jobFilters);
     }
 
-    private Object readResolve() {
+    protected Object readResolve() {
         if(includeRegex!=null) {
             try {
                 includePattern = Pattern.compile(includeRegex);

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -2383,7 +2383,7 @@ public Api getApi() throws AccessDeniedException {
             }
         }
 
-        private Object readResolve() {
+        protected Object readResolve() {
             this.future = new FutureImpl(task);
             return this;
         }

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2082,7 +2082,7 @@ public synchronized void save() throws IOException {
         return new XmlFile(XSTREAM,new File(getRootDir(),"build.xml"));
     }
 
-    private Object writeReplace() {
+    protected Object writeReplace() {
         return XmlFile.replaceIfNotAtTopLevel(this, () -> new Replacer(this));
     }
     private static class Replacer {

File: core/src/main/java/hudson/util/RobustMapConverter.java
Patch:
@@ -55,7 +55,7 @@ final class RobustMapConverter extends MapConverter {
     private Object read(HierarchicalStreamReader reader, UnmarshallingContext context, Map map) {
         reader.moveDown();
         try {
-            return readItem(reader, context, map);
+            return readBareItem(reader, context, map);
         } catch (CriticalXStreamException x) {
             throw x;
         } catch (XStreamException | LinkageError x) {

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -1032,7 +1032,7 @@ protected void doRun() throws Exception {
      * Maintains backwards compatibility. Invoked by XStream when this object is de-serialized.
      */
     @SuppressWarnings({"unused"})
-    private Object readResolve() {
+    protected Object readResolve() {
         if (jdks == null) {
             jdks = new ArrayList<>();
         }

File: test/src/test/java/hudson/model/ProjectTest.java
Patch:
@@ -256,7 +256,7 @@ public void testGetScmCheckoutRetryCount() throws Exception{
         HtmlForm form = j.createWebClient().goTo(p.getUrl() + "/configure").getFormByName("config");
         ((HtmlElement)form.getByXPath("//div[@class='advancedLink']//button").get(0)).click();
         // required due to the new default behavior of click
-        form.getInputByName("hasCustomScmCheckoutRetryCount").click(new Event(), true);
+        form.getInputByName("hasCustomScmCheckoutRetryCount").click(new Event(), false, false, false, true);
         form.getInputByName("scmCheckoutRetryCount").setValueAttribute("7");
         j.submit(form);
         assertEquals("Scm retry count was set.", 7, p.getScmCheckoutRetryCount());

File: test/src/test/java/hudson/util/RobustReflectionConverterTest.java
Patch:
@@ -81,7 +81,7 @@ public class RobustReflectionConverterTest {
         Map<Saveable,OldDataMonitor.VersionRange> data = odm.getData();
         assertEquals(Collections.singleton(p), data.keySet());
         String text = data.values().iterator().next().extra;
-        assertTrue(text, text.contains("Could not call hudson.triggers.TimerTrigger.readResolve"));
+        assertTrue(text, text.contains("hudson.triggers.TimerTrigger.readResolve"));
     }
     
     // Testing describable object to demonstrate what is expected with RobustReflectionConverter#addCriticalField

File: core/src/main/java/jenkins/security/apitoken/TokenUuidAndPlainValue.java
Patch:
@@ -24,13 +24,14 @@
 package jenkins.security.apitoken;
 
 import org.kohsuke.accmod.Restricted;
-import org.kohsuke.accmod.restrictions.NoExternalUse;
+import org.kohsuke.accmod.restrictions.Beta;
 
 /**
  * Contains information about the token and the secret value.
  * It should not be stored as is, but just displayed once to the user and then forget about it.
+ * @since TODO
  */
-@Restricted(NoExternalUse.class)
+@Restricted(Beta.class)
 public class TokenUuidAndPlainValue {
     /**
      * The token identifier to allow manipulation of the token

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -264,7 +264,7 @@ public HttpResponse doConfirmRename(@QueryParameter String newName) throws IOExc
         // send to the new job page
         // note we can't use getUrl() because that would pick up old name in the
         // Ancestor.getUrl()
-        return HttpResponses.redirectTo("../" + newName);
+        return HttpResponses.redirectTo("../" + Functions.encode(newName));
     }
 
     /**

File: core/src/test/java/hudson/FunctionsTest.java
Patch:
@@ -510,6 +510,7 @@ public void printStackTrace(PrintWriter s) {
                 s.println("Some custom exception");
             }
         }, "Some custom exception\n", "Some custom exception\n");
+        /* TODO exact format changed in 11.0.9 (JDK-8226809 / JDK-8252444)
         // Circular references:
         Stack stack1 = new Stack("p.Exc1", "p.C.method1:17");
         Stack stack2 = new Stack("p.Exc2", "p.C.method2:27");
@@ -526,6 +527,7 @@ public void printStackTrace(PrintWriter s) {
             "\tat p.C.method2(C.java:27)\n" +
             "Caused: p.Exc1\n" +
             "\tat p.C.method1(C.java:17)\n");
+        */
     }
     private static void assertPrintThrowable(Throwable t, String traditional, String custom) {
         StringWriter sw = new StringWriter();

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -392,9 +392,9 @@ public List<Plugin> getAvailables() {
         r.sort(new Comparator<Plugin>() {
             @Override
             public int compare(Plugin plugin, Plugin t1) {
-                final int pop = plugin.popularity.compareTo(t1.popularity);
+                final int pop = t1.popularity.compareTo(plugin.popularity);
                 if (pop != 0) {
-                    return -pop; // highest popularity first
+                    return pop; // highest popularity first
                 }
                 return plugin.getDisplayName().compareTo(plugin.getDisplayName());
             }

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -967,7 +967,7 @@ public static List<Descriptor<Publisher>> getPublisherDescriptors(AbstractProjec
     }
 
     public static List<SCMDescriptor<?>> getSCMDescriptors(AbstractProject<?,?> project) {
-        return SCM._for(project);
+        return SCM._for((Job) project);
     }
 
     /**

File: core/src/main/java/hudson/cli/BuildCommand.java
Patch:
@@ -49,6 +49,7 @@
 import org.kohsuke.args4j.CmdLineException;
 import org.kohsuke.args4j.Option;
 
+import java.util.Collections;
 import java.util.Map;
 import java.util.HashMap;
 import java.util.List;
@@ -252,7 +253,7 @@ public CLICause(String startedBy){
 
         @Override
         public String getShortDescription() {
-            User user = User.get(startedBy, false);
+            User user = User.getById(startedBy, false);
             String userName = user != null ? user.getDisplayName() : startedBy;
             return Messages.BuildCommand_CLICause_ShortDescription(userName);
         }
@@ -274,4 +275,3 @@ public int hashCode() {
         }
     }
 }
-

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -260,7 +260,7 @@ public void perform(Run<?,?> build, FilePath ws, EnvVars environment, Launcher l
                     f.setExcludes(excludes);
                     f.setDefaultExcludes(defaultExcludes);
                     f.setCaseSensitive(caseSensitive);
-                    f.perform(build, ws, launcher, listener);
+                    f.perform(build, ws, environment, launcher, listener);
                 }
             } else {
                 result = build.getResult();

File: core/src/main/java/hudson/util/IncompatibleAntVersionDetected.java
Patch:
@@ -54,6 +54,6 @@ public String getMessage() {
     }
 
     public URL getWhereAntIsLoaded() throws IOException {
-        return Which.jarURL(antClass);
+        return Which.classFileUrl(antClass);
     }
 }

File: core/src/main/java/hudson/util/IncompatibleServletVersionDetected.java
Patch:
@@ -45,6 +45,6 @@ public IncompatibleServletVersionDetected(Class servletClass) {
     }
     
     public URL getWhereServletIsLoaded() throws IOException {
-        return Which.jarURL(servletClass);
+        return Which.classFileUrl(servletClass);
     }
 }

File: core/src/main/java/jenkins/util/JSONSignatureValidator.java
Patch:
@@ -9,7 +9,6 @@
 import net.sf.json.JSONObject;
 import org.apache.commons.codec.DecoderException;
 import org.apache.commons.codec.binary.Hex;
-import org.apache.commons.io.Charsets;
 import org.apache.commons.io.output.NullOutputStream;
 import org.apache.commons.io.output.TeeOutputStream;
 import org.jvnet.hudson.crypto.CertificateUtil;
@@ -184,7 +183,7 @@ private FormValidation checkSpecificSignature(JSONObject json, JSONObject signat
         //
         // Jenkins should ignore "digest"/"signature" pair. Accepting it creates a vulnerability that allows
         // the attacker to inject a fragment at the end of the json.
-        json.writeCanonical(new OutputStreamWriter(new TeeOutputStream(dos,sos), Charsets.UTF_8)).close();
+        json.writeCanonical(new OutputStreamWriter(new TeeOutputStream(dos,sos), StandardCharsets.UTF_8)).close();
 
         // did the digest match? this is not a part of the signature validation, but if we have a bug in the c14n
         // (which is more likely than someone tampering with update center), we can tell

File: test/src/test/java/hudson/security/WhoAmITest.java
Patch:
@@ -30,6 +30,7 @@
 import jenkins.model.Jenkins;
 import jenkins.security.ApiTokenProperty;
 import jenkins.security.apitoken.ApiTokenStore;
+import jenkins.security.apitoken.TokenUuidAndPlainValue;
 import org.acegisecurity.AuthenticationException;
 import org.acegisecurity.GrantedAuthority;
 import org.acegisecurity.userdetails.UserDetails;
@@ -181,7 +182,7 @@ public void whoAmI_apiToken_doesNotProvideSensitiveInformation() throws Exceptio
 
         User user = User.getById("user", true);
         ApiTokenProperty prop = user.getProperty(ApiTokenProperty.class);
-        ApiTokenStore.TokenUuidAndPlainValue token = prop.getTokenStore().generateNewToken("test");
+        TokenUuidAndPlainValue token = prop.getTokenStore().generateNewToken("test");
 
         JenkinsRule.WebClient wc = j.createWebClient().withBasicCredentials("user", token.plainValue);
         String base64ApiToken = new String(Base64.getEncoder().encode(("user:" + token.plainValue).getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);

File: test/src/test/java/jenkins/security/apitoken/LegacyApiTokenAdministrativeMonitorTest.java
Patch:
@@ -78,7 +78,7 @@ public void isActive() throws Exception {
         LegacyApiTokenAdministrativeMonitor monitor = j.jenkins.getExtensionList(AdministrativeMonitor.class).get(LegacyApiTokenAdministrativeMonitor.class);
         assertFalse(monitor.isActivated());
         
-        ApiTokenStore.TokenUuidAndPlainValue tokenInfo = apiTokenProperty.getTokenStore().generateNewToken("Not Legacy");
+        TokenUuidAndPlainValue tokenInfo = apiTokenProperty.getTokenStore().generateNewToken("Not Legacy");
         // "new" token does not trigger the monitor
         assertFalse(monitor.isActivated());
         
@@ -399,7 +399,7 @@ private void createUserWithToken(boolean legacy, boolean fresh, boolean recent)
                 simulateUseOfLegacyToken(user);
                 Thread.sleep(1);
                 
-                ApiTokenStore.TokenUuidAndPlainValue tokenInfo = apiTokenProperty.getTokenStore().generateNewToken("Fresh and recent token");
+                TokenUuidAndPlainValue tokenInfo = apiTokenProperty.getTokenStore().generateNewToken("Fresh and recent token");
                 simulateUseOfToken(user, tokenInfo.plainValue);
             } else {
                 simulateUseOfLegacyToken(user);
@@ -409,7 +409,7 @@ private void createUserWithToken(boolean legacy, boolean fresh, boolean recent)
             }
         } else {
             if (recent) {
-                ApiTokenStore.TokenUuidAndPlainValue tokenInfo = apiTokenProperty.getTokenStore().generateNewToken("Recent token");
+                TokenUuidAndPlainValue tokenInfo = apiTokenProperty.getTokenStore().generateNewToken("Recent token");
                 Thread.sleep(1);
                 
                 simulateUseOfLegacyToken(user);

File: core/src/main/java/hudson/slaves/CloudProvisioningListener.java
Patch:
@@ -46,7 +46,9 @@ public CauseOfBlockage canProvision(Cloud cloud, Label label, int numExecutors)
                 CloudProvisioningListener.class,
                 getClass(),
                 "canProvision",
-                CloudState.class);
+                Cloud.class,
+                CloudState.class,
+                int.class);
     }
 
     /**

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -256,7 +256,7 @@ public Locale get() {
                 File f = File.createTempFile("test", "test");
                 boolean result = f.delete();
                 if (!result) {
-                    LOGGER.log(WARNING, "Temp file test.test could not be deleted.");
+                    LOGGER.log(FINE, "Temp file test.test could not be deleted.");
                 }
             } catch (IOException e) {
                 throw new NoTempDir(e);

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -392,9 +392,9 @@ public List<Plugin> getAvailables() {
         r.sort(new Comparator<Plugin>() {
             @Override
             public int compare(Plugin plugin, Plugin t1) {
-                final int pop = plugin.popularity.compareTo(t1.popularity);
+                final int pop = t1.popularity.compareTo(plugin.popularity);
                 if (pop != 0) {
-                    return -pop; // highest popularity first
+                    return pop; // highest popularity first
                 }
                 return plugin.getDisplayName().compareTo(plugin.getDisplayName());
             }

File: core/src/main/java/hudson/model/ListView.java
Patch:
@@ -150,7 +150,7 @@ private Object readResolve() {
         initColumns();
         initJobFilters();
         if (statusFilter != null) {
-            jobFilters.add(0, new StatusFilter(statusFilter));
+            jobFilters.add(new StatusFilter(statusFilter));
         }
         return this;
     }

File: core/src/main/java/hudson/model/ListView.java
Patch:
@@ -150,7 +150,7 @@ private Object readResolve() {
         initColumns();
         initJobFilters();
         if (statusFilter != null) {
-            jobFilters.add(0, new StatusFilter(statusFilter));
+            jobFilters.add(new StatusFilter(statusFilter));
         }
         return this;
     }

File: core/src/main/java/jenkins/tasks/SimpleBuildStep.java
Patch:
@@ -82,7 +82,7 @@ public interface SimpleBuildStep extends BuildStep {
      * @param listener a place to send output
      * @throws InterruptedException if the step is interrupted
      * @throws IOException if something goes wrong; use {@link AbortException} for a polite error
-     * @deprecated Use {@link #perform(Run, FilePath, EnvVars, Launcher, TaskListener) instead.}
+     * @deprecated Use {@link #perform(Run, FilePath, EnvVars, Launcher, TaskListener)} instead.
      */
     @Deprecated
     default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull Launcher launcher,

File: test/src/test/java/hudson/model/JobTest.java
Patch:
@@ -401,7 +401,7 @@ private String dirContent(File dir) throws IOException, InterruptedException {
         if (dir == null || !dir.isDirectory()) {
             return null;
         }
-        StringBuilder str = new StringBuilder("");
+        StringBuilder str = new StringBuilder();
         final FilePath[] list = new FilePath(dir).list("**/*");
         Arrays.sort(list, Comparator.comparing(FilePath::getRemote));
         for (FilePath path : list) {

File: test/src/test/java/hudson/model/queue/MaintainCanTakeStrengtheningTest.java
Patch:
@@ -59,7 +59,7 @@ public void testExceptionOnNodeProperty() throws Exception {
         assertThat(r.getInstance().getQueue().getBuildableItems().get(0).task.getName(), equalTo("theFaultyOne"));
 
         // The new error is shown in the logs
-        assertThat(logging.getMessages(), hasItem(String.format("Exception evaluating if the node '%s' can take the task '%s'", new Object[]{faultyAgent.getDisplayName(), "theFaultyOne"})));
+        assertThat(logging.getMessages(), hasItem(String.format("Exception evaluating if the node '%s' can take the task '%s'", faultyAgent.getDisplayName(), "theFaultyOne")));
     }
 
     /**

File: test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java
Patch:
@@ -119,7 +119,7 @@ public void testAuthHeaderCaseInSensitive() throws Exception {
         ApiTokenTestHelper.enableLegacyBehavior();
         
         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
-        User foo = User.get("foo");
+        User foo = User.getOrCreateByIdOrFullName("foo");
         wc = j.createWebClient();
 
         String[] basicCandidates = {"Basic", "BASIC", "basic", "bASIC"};
@@ -156,7 +156,7 @@ private String encode(String prefix, String userAndPass) {
         return prefix + " " + Base64.getEncoder().encodeToString(userAndPass.getBytes(StandardCharsets.UTF_8));
     }
 
-    private void makeRequestWithAuthCodeAndVerify(String authCode, String expectedLogin) throws IOException, SAXException {
+    private void makeRequestWithAuthCodeAndVerify(String authCode, String expectedLogin) throws IOException {
         WebRequest req = new WebRequest(new URL(j.getURL(),"test"));
         req.setEncodingType(null);
         if (authCode!=null)

File: test/src/test/java/hudson/cli/ListJobsCommandTest.java
Patch:
@@ -42,7 +42,8 @@
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.isEmptyString;
+import static org.hamcrest.Matchers.emptyString;
+import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
 
 public class ListJobsCommandTest {
@@ -135,7 +136,7 @@ public class ListJobsCommandTest {
 
         CLICommandInvoker.Result result = command.invokeWithArgs("MatrixJob");
         assertThat(result, CLICommandInvoker.Matcher.failedWith(3));
-        assertThat(result.stdout(), isEmptyString());
+        assertThat(result.stdout(), is(emptyString()));
         assertThat(result.stderr(), containsString("No view or item group with the given name 'MatrixJob' found."));
     }
 }

File: test/src/test/java/hudson/model/RunSEC1902Test.java
Patch:
@@ -42,8 +42,8 @@
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.CoreMatchers.not;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
 
 public class RunSEC1902Test {
 

File: test/src/test/java/hudson/model/queue/LoadPredictorTest.java
Patch:
@@ -79,7 +79,7 @@ public Iterable<FutureLoad> predict(MappingWorksheet plan, Computer computer, lo
     public void test1() throws Exception {
         Task t = mock(Task.class);
         when(t.getEstimatedDuration()).thenReturn(10000L);
-        when(t.getSubTasks()).thenReturn((Collection) asList(t));
+        when(t.getSubTasks()).thenReturn((Collection) Collections.singletonList(t));
 
         Computer c = createMockComputer(1);
 
@@ -107,7 +107,7 @@ private BuildableItem wrap(Queue.Task t) {
     public void test2() throws Exception {
         Task t = mock(Task.class);
         when(t.getEstimatedDuration()).thenReturn(10000L);
-        when(t.getSubTasks()).thenReturn((Collection) asList(t));
+        when(t.getSubTasks()).thenReturn((Collection) Collections.singletonList(t));
 
         Computer c = createMockComputer(2);
         Executor e = c.getExecutors().get(0);

File: test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java
Patch:
@@ -294,7 +294,7 @@ public void selfRegistrationTriggerLoggedIn() throws Exception {
 
         createAccountByAdmin("alice");
         // no new event in such case
-        assertEquals(true, spySecurityListener.loggedInUsernames.isEmpty());
+        assertTrue(spySecurityListener.loggedInUsernames.isEmpty());
 
         selfRegistration("bob");
         assertEquals("bob", spySecurityListener.loggedInUsernames.get(0));

File: test/src/test/java/hudson/security/TokenBasedRememberMeServices2Test.java
Patch:
@@ -22,6 +22,7 @@
 import org.acegisecurity.userdetails.UserDetails;
 import org.acegisecurity.userdetails.UsernameNotFoundException;
 
+import static org.hamcrest.Matchers.emptyString;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
@@ -41,7 +42,6 @@
 
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
-import static org.hamcrest.text.IsEmptyString.isEmptyString;
 import static org.hamcrest.xml.HasXPath.hasXPath;
 import static org.junit.Assert.assertNotNull;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -378,7 +378,7 @@ public void rememberMeToken_shouldNotBeRead_ifOptionIsDisabled() throws Exceptio
             // we should see a remember me cookie
             rememberMeCookie = getRememberMeCookie(wc);
             assertNotNull(rememberMeCookie);
-            assertThat(rememberMeCookie.getValue(), not(isEmptyString()));
+            assertThat(rememberMeCookie.getValue(), not(is(emptyString())));
         }
 
         j.jenkins.setDisableRememberMe(true);

File: test/src/test/java/hudson/tasks/FingerprinterTest.java
Patch:
@@ -259,8 +259,8 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
         Collection<Fingerprint> fingerprints = action.getFingerprints().values();
         for (Fingerprint f: fingerprints) {
             assertTrue(f.getOriginal().is(upstream));
-            assertTrue(f.getOriginal().getName().equals(renamedProject1));
-            assertFalse(f.getOriginal().getName().equals(oldUpstreamName));
+            assertEquals(f.getOriginal().getName(), renamedProject1);
+            assertNotEquals(f.getOriginal().getName(), oldUpstreamName);
         }
         
         action = downstreamBuild.getAction(Fingerprinter.FingerprintAction.class);

File: test/src/test/java/lib/form/PasswordTest.java
Patch:
@@ -90,7 +90,7 @@ public void secretNotPlainText() throws Exception {
         SecretNotPlainText.secret = Secret.fromString("secret");
         HtmlPage p = j.createWebClient().goTo("secretNotPlainText");
         String value = ((HtmlInput)p.getElementById("password")).getValueAttribute();
-        assertFalse("password shouldn't be plain text",value.equals("secret"));
+        assertNotEquals("password shouldn't be plain text", "secret", value);
         assertEquals("secret",Secret.fromString(value).getPlainText());
     }
 
@@ -634,7 +634,7 @@ public void testBlankoutOfStringBackedPasswordFieldWithoutItemConfigure() throws
         for (DomElement element : htmlPage.getElementsByTagName("input")) {
             if ("hidden".equals(element.getAttribute("type")) && element.getAttribute("class").contains("complex-password-field")) {
                 final HtmlHiddenInput input = (HtmlHiddenInput) element;
-                assertTrue(input.getValueAttribute().equals("********"));
+                assertEquals("********", input.getValueAttribute());
             }
         }
     }

File: test/src/test/java/lib/form/RepeatablePropertyTest.java
Patch:
@@ -44,6 +44,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.Objects;
 
 public class RepeatablePropertyTest extends HudsonTestCase implements Describable<RepeatablePropertyTest> {
 
@@ -159,7 +160,7 @@ public boolean equals(Object o) {
             if (this == o) return true;
             if (o == null || getClass() != o.getClass()) return false;
             ExcitingObject that = (ExcitingObject) o;
-            if (greatProperty != null ? !greatProperty.equals(that.greatProperty) : that.greatProperty != null)
+            if (!Objects.equals(greatProperty, that.greatProperty))
                 return false;
             return true;
         }

File: core/src/test/java/hudson/util/IsOverriddenTest.java
Patch:
@@ -139,9 +139,8 @@ public void baseInterface() {
         errors.checkSucceeds(() -> {assertThat("I1 does not override I1.bar", Util.isOverridden(I1.class, I1.class, "bar"), is(false)); return null;});
         errors.checkSucceeds(() -> {assertThat("I2 overrides I1.bar", Util.isOverridden(I1.class, I2.class, "bar"), is(true)); return null;});
         errors.checkSucceeds(() -> {assertThat("C1 does not override I1.bar", Util.isOverridden(I1.class, C1.class, "bar"), is(false)); return null;});
-        // TODO: Not currently handled by isOverridden()
-        //errors.checkSucceeds(() -> {assertThat("C2 overrides I1.bar (via I2)", Util.isOverridden(I1.class, C2.class, "bar"), is(true)); return null;});
-        //errors.checkSucceeds(() -> {assertThat("C3 overrides I1.bar (via I2)", Util.isOverridden(I1.class, C3.class, "bar"), is(true)); return null;});
+        errors.checkSucceeds(() -> {assertThat("C2 overrides I1.bar (via I2)", Util.isOverridden(I1.class, C2.class, "bar"), is(true)); return null;});
+        errors.checkSucceeds(() -> {assertThat("C3 overrides I1.bar (via I2)", Util.isOverridden(I1.class, C3.class, "bar"), is(true)); return null;});
         errors.checkSucceeds(() -> {assertThat("C4 overrides I1.bar", Util.isOverridden(I1.class, C4.class, "bar"), is(true)); return null;});
     }
     private interface I1 {

File: core/src/main/java/hudson/slaves/WorkspaceList.java
Patch:
@@ -297,7 +297,7 @@ public void release() {
      * acknowledging that these will be readable by builds of other jobs done on the same node.
      * <p>Each plugin using this directory is responsible for specifying sufficiently unique subdirectory/file names.
      * {@link FilePath#createTempFile} may be used for this purpose if desired.
-     * <p>The resulting directory may not exist; you may call {@link FilePath#mkdirs} on it if you need it to.
+     * <p>The resulting directory may not exist; you may call {@link FilePath#mkdirs()} on it if you need it to.
      * It may be deleted alongside the workspace itself during cleanup actions.
      * @param ws a directory such as a build workspace
      * @return a sibling directory, for example {@code …/something@tmp} for {@code …/something}, or {@code null} if {@link FilePath#getParent} is null
@@ -312,6 +312,7 @@ public static FilePath tempDir(FilePath ws) {
 
     /**
      * The token that combines the project name and unique number to create unique workspace directory.
+     * @since TODO
      */
-    private static final String COMBINATOR = SystemProperties.getString(WorkspaceList.class.getName(),"@");
+    public static final String COMBINATOR = SystemProperties.getString(WorkspaceList.class.getName(),"@");
 }

File: core/src/main/java/hudson/model/FingerprintMap.java
Patch:
@@ -25,9 +25,9 @@
 
 import hudson.Util;
 import hudson.util.KeyedDataStorage;
+import jenkins.fingerprints.FingerprintStorage;
 import jenkins.model.Jenkins;
 
-import java.io.File;
 import java.io.IOException;
 import java.util.Locale;
 import edu.umd.cs.findbugs.annotations.CheckForNull;
@@ -50,7 +50,7 @@ public final class FingerprintMap extends KeyedDataStorage<Fingerprint,Fingerpri
      * Returns true if there's some data in the fingerprint database.
      */
     public boolean isReady() {
-        return new File(Jenkins.get().getRootDir(),"fingerprints").exists();
+        return FingerprintStorage.get().isReady();
     }
 
     /**
@@ -94,7 +94,7 @@ private byte[] toByteArray(String md5sum) {
     }
 
     protected @CheckForNull Fingerprint load(@NonNull String key) throws IOException {
-        return Fingerprint.load(toByteArray(key));
+        return Fingerprint.load(key);
     }
 
 static class FingerprintParams {

File: test/src/test/java/hudson/PluginManagerTest.java
Patch:
@@ -623,6 +623,7 @@ public void optionalExtensionCanBeFoundAfterDynamicLoadOfVariant() throws Except
     variant, not in update-center.json, deprecated via top-level list
      */
     @Test
+    @Issue("JENKINS-59136")
     @WithPlugin({"credentials.hpi", "htmlpublisher.jpi", "icon-shim.hpi", "token-macro.hpi", "variant.hpi"})
     public void testDeprecationNotices() throws Exception {
         PersistedList<UpdateSite> sites = r.jenkins.getUpdateCenter().getSites();

File: core/src/main/java/jenkins/management/CliLink.java
Patch:
@@ -55,7 +55,7 @@ public String getDescription() {
     @NonNull
     @Override
     public Permission getRequiredPermission() {
-        return Jenkins.MANAGE;
+        return Jenkins.READ;
     }
 
     @Override

File: core/src/main/java/jenkins/management/NodesLink.java
Patch:
@@ -55,7 +55,7 @@ public String getDescription() {
     @NonNull
     @Override
     public Permission getRequiredPermission() {
-        return Jenkins.MANAGE;
+        return Jenkins.READ;
     }
 
     @Override

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -4123,7 +4123,7 @@ public Slave.JnlpJar doJnlpJars(StaplerRequest req) {
      */
     @RequirePOST
     public synchronized HttpResponse doReload() throws IOException {
-        checkPermission(ADMINISTER);
+        checkPermission(MANAGE);
         LOGGER.log(Level.WARNING, "Reloading Jenkins as requested by {0}", getAuthentication().getName());
 
         // engage "loading ..." UI and then run the actual task in a separate thread

File: test/src/test/java/hudson/model/ItemGroupMixInTest.java
Patch:
@@ -57,6 +57,7 @@
 
 import static org.hamcrest.core.StringContains.containsString;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThrows;
 
 public class ItemGroupMixInTest {
 

File: test/src/test/java/hudson/model/ItemGroupMixInTest.java
Patch:
@@ -57,6 +57,7 @@
 
 import static org.hamcrest.core.StringContains.containsString;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThrows;
 
 public class ItemGroupMixInTest {
 

File: test/src/test/java/lib/form/PasswordTest.java
Patch:
@@ -59,8 +59,10 @@
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
 import static org.hamcrest.MatcherAssert.assertThat;
 
 import org.junit.Rule;

File: core/src/main/java/hudson/util/Scrambler.java
Patch:
@@ -34,7 +34,6 @@
  * Use {@link Secret} instead.
  *
  * @author Kohsuke Kawaguchi
- * @see Protector
  */
 public class Scrambler {
     private static final Logger LOGGER = Logger.getLogger(Scrambler.class.getName());

File: core/src/main/java/hudson/util/DOSToUnixPathHelper.java
Patch:
@@ -65,7 +65,7 @@ static void iteratePath(String exe, Helper helper) {
 
                     tokenizedPathBuilder.append(_dir.replace('\\', '/'));
 
-                    if (checkPrefix(_dir + File.pathSeparator + exe, helper))
+                    if (checkPrefix(_dir + File.separator + exe, helper))
                         return;
                 }
                 tokenizedPathBuilder.append('.');

File: core/src/main/java/hudson/model/PaneStatusProperties.java
Patch:
@@ -25,7 +25,7 @@ public boolean isCollapsed(String paneId) {
 	 * @param paneId panel name
 	 * @return the actual state of panel
 	 */
-	public boolean toggleCollapsed(String paneId) throws IOException {
+	public boolean toggleCollapsed(String paneId) {
 		if (collapsed.contains(paneId)) {
 			collapsed.remove(paneId);
 			return false;
@@ -61,7 +61,7 @@ public boolean isEnabled() {
 	
 	private static class PaneStatusPropertiesSessionFallback extends PaneStatusProperties {
 		
-		private final String attribute = "jenkins_pane_%s_collapsed";
+		private final static String attribute = "jenkins_pane_%s_collapsed";
 		
 		@Override
 		public boolean isCollapsed(String paneId) {

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -135,6 +135,7 @@
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.ServiceLoader;
 import java.util.Set;
@@ -2239,7 +2240,7 @@ private PluginUpdateInfo(String pluginName, String message) {
 
     @Restricted(DoNotUse.class)
     public String unscientific(double d) {
-        return String.format("%.4f", d);
+        return String.format(Locale.US, "%15.4f", d);
     }
 
     @Override

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -126,7 +126,7 @@ public abstract class Slave extends Node implements Serializable {
     /**
      * Number of executors of this node.
      */
-    private int numExecutors = 2;
+    private int numExecutors = 1;
 
     /**
      * Job allocation strategy.

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -54,6 +54,7 @@
 import hudson.util.VersionNumber;
 import hudson.util.io.RewindableFileOutputStream;
 import hudson.util.io.RewindableRotatingFileOutputStream;
+import jenkins.agents.AgentComputerUtil;
 import jenkins.model.Jenkins;
 import jenkins.security.ChannelConfigurator;
 import jenkins.security.MasterToSlaveCallable;
@@ -1067,11 +1068,11 @@ public synchronized void publish(LogRecord record) {
      *
      * @return null if the calling thread doesn't have any trace of where its master is.
      * @since 1.362
-     * @deprecated Use {@link SlaveComputerUtil#getChannelToMaster()} instead.
+     * @deprecated Use {@link AgentComputerUtil#getChannelToMaster()} instead.
      */
     @Deprecated
     public static VirtualChannel getChannelToMaster() {
-        return SlaveComputerUtil.getChannelToMaster();
+        return AgentComputerUtil.getChannelToMaster();
     }
 
     /**

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -136,6 +136,7 @@
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.ServiceLoader;
 import java.util.Set;
@@ -2240,7 +2241,7 @@ private PluginUpdateInfo(String pluginName, String message) {
 
     @Restricted(DoNotUse.class)
     public String unscientific(double d) {
-        return String.format("%.4f", d);
+        return String.format(Locale.US, "%15.4f", d);
     }
 
     @Override

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -126,7 +126,7 @@ public abstract class Slave extends Node implements Serializable {
     /**
      * Number of executors of this node.
      */
-    private int numExecutors = 2;
+    private int numExecutors = 1;
 
     /**
      * Job allocation strategy.

File: core/src/main/java/hudson/Main.java
Patch:
@@ -220,7 +220,8 @@ private static HttpURLConnection open(URL url) throws IOException {
     public static boolean isUnitTest = false;
 
     /**
-     * Set to true if we are running inside {@code mvn hpi:run} or {@code mvn jetty:run}.
+     * Set to true if we are running inside {@code mvn jetty:run}.
+     * This is also set if running inside {@code mvn hpi:run} since plugins parent POM 2.30.
      */
     public static boolean isDevelopmentMode = SystemProperties.getBoolean(Main.class.getName()+".development");
 

File: core/src/main/java/hudson/model/PaneStatusProperties.java
Patch:
@@ -25,7 +25,7 @@ public boolean isCollapsed(String paneId) {
 	 * @param paneId panel name
 	 * @return the actual state of panel
 	 */
-	public boolean toggleCollapsed(String paneId) throws IOException {
+	public boolean toggleCollapsed(String paneId) {
 		if (collapsed.contains(paneId)) {
 			collapsed.remove(paneId);
 			return false;
@@ -61,7 +61,7 @@ public boolean isEnabled() {
 	
 	private static class PaneStatusPropertiesSessionFallback extends PaneStatusProperties {
 		
-		private final String attribute = "jenkins_pane_%s_collapsed";
+		private final static String attribute = "jenkins_pane_%s_collapsed";
 		
 		@Override
 		public boolean isCollapsed(String paneId) {

File: core/src/test/java/jenkins/util/io/PathRemoverTest.java
Patch:
@@ -446,7 +446,7 @@ public void testForceRemoveRecursive_TruncatesNumberOfExceptions() throws IOExce
             fail("Deletion should have failed");
         } catch (CompositeIOException e) {
             assertThat(e.getSuppressed(), arrayWithSize(maxExceptions));
-            assertThat(e.getMessage(), endsWith("(Discarded" + (lockedFiles + 1 - maxExceptions) + " additional exceptions)"));
+            assertThat(e.getMessage(), endsWith("(Discarded " + (lockedFiles + 1 - maxExceptions) + " additional exceptions)"));
         }
         assertTrue(dir.exists());
         assertThat(dir.listFiles().length, equalTo(lockedFiles));

File: core/src/main/java/hudson/util/DOSToUnixPathHelper.java
Patch:
@@ -65,7 +65,7 @@ static void iteratePath(String exe, Helper helper) {
 
                     tokenizedPathBuilder.append(_dir.replace('\\', '/'));
 
-                    if (checkPrefix(_dir + File.pathSeparator + exe, helper))
+                    if (checkPrefix(_dir + File.separator + exe, helper))
                         return;
                 }
                 tokenizedPathBuilder.append('.');

File: core/src/main/java/hudson/Main.java
Patch:
@@ -220,7 +220,8 @@ private static HttpURLConnection open(URL url) throws IOException {
     public static boolean isUnitTest = false;
 
     /**
-     * Set to true if we are running inside {@code mvn hpi:run} or {@code mvn jetty:run}.
+     * Set to true if we are running inside {@code mvn jetty:run}.
+     * This is also set if running inside {@code mvn hpi:run} since plugins parent POM 2.30.
      */
     public static boolean isDevelopmentMode = SystemProperties.getBoolean(Main.class.getName()+".development");
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -4559,6 +4559,8 @@ public void doIconSize( StaplerRequest req, StaplerResponse rsp ) throws IOExcep
             throw new ServletException();
         Cookie cookie = new Cookie("iconSize", Functions.validateIconSize(qs));
         cookie.setMaxAge(/* ~4 mo. */9999999); // #762
+        cookie.setSecure(req.isSecure());
+        cookie.setHttpOnly(true);
         rsp.addCookie(cookie);
         String ref = req.getHeader("Referer");
         if(ref==null)   ref=".";

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -113,7 +113,7 @@ public class ArtifactArchiver extends Recorder implements SimpleBuildStep {
     /**
      * Indicate whether symbolic links should be followed or not
      */
-    @Nonnull
+    @NonNull
     private Boolean followSymlinks = true;
 
     @DataBoundConstructor public ArtifactArchiver(String artifacts) {

File: test/src/test/java/jenkins/security/StackTraceSuppressionTest.java
Patch:
@@ -74,7 +74,7 @@ public void authenticationManageException() throws Exception {
         HtmlPage page = wc.goTo("manage");
 
         String content = page.getWebResponse().getContentAsString();
-        assertThat(content, containsString(alice.getId() + " is missing a permission"));
+        assertThat(content, containsString(alice.getId() + " is missing the Overall/Administer permission"));
         assertThat(content, not(containsString("Caused by")));
     }
 

File: core/src/main/java/hudson/util/Secret.java
Patch:
@@ -31,7 +31,6 @@
 import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
 import jenkins.util.SystemProperties;
 import java.util.Arrays;
-import jenkins.model.Jenkins;
 import hudson.Util;
 import jenkins.security.CryptoConfidentialKey;
 import org.kohsuke.stapler.Stapler;
@@ -289,8 +288,10 @@ public Object unmarshal(HierarchicalStreamReader reader, final UnmarshallingCont
     private static final String PROVIDER = SystemProperties.getString(Secret.class.getName()+".provider");
 
     /**
-     * For testing only. Override the secret key so that we can test this class without {@link Jenkins}.
+     * For testing only.
+     * @deprecated Normally unnecessary.
      */
+    @Deprecated
     /*package*/ static String SECRET = null;
 
     /**

File: core/src/main/java/jenkins/security/RSAConfidentialKey.java
Patch:
@@ -30,7 +30,6 @@
 import java.security.KeyPair;
 import java.security.KeyPairGenerator;
 import java.security.PrivateKey;
-import java.security.SecureRandom;
 import java.security.interfaces.RSAPrivateCrtKey;
 import java.security.interfaces.RSAPrivateKey;
 import java.security.interfaces.RSAPublicKey;
@@ -79,7 +78,7 @@ protected synchronized RSAPrivateKey getPrivateKey() {
                 byte[] payload = load();
                 if (payload == null) {
                     KeyPairGenerator gen = KeyPairGenerator.getInstance("RSA");
-                    gen.initialize(2048, new SecureRandom()); // going beyond 2048 requires crypto extension
+                    gen.initialize(2048, cs.secureRandom()); // going beyond 2048 requires crypto extension
                     KeyPair keys = gen.generateKeyPair();
                     priv = (RSAPrivateKey) keys.getPrivate();
                     pub = (RSAPublicKey) keys.getPublic();

File: core/src/test/java/hudson/util/SecretRewriterTest.java
Patch:
@@ -22,9 +22,6 @@
 
 public class SecretRewriterTest {
 
-    @Rule
-    public MockSecretRule mockSecretRule = new MockSecretRule();
-
     @Rule
     public ConfidentialStoreRule confidentialStoreRule = new ConfidentialStoreRule();
 

File: core/src/test/java/hudson/util/SecretTest.java
Patch:
@@ -43,9 +43,6 @@ public class SecretTest {
     @Rule
     public ConfidentialStoreRule confidentialStore = new ConfidentialStoreRule();
 
-    @Rule
-    public MockSecretRule mockSecretRule = new MockSecretRule();
-
     private static final Pattern ENCRYPTED_VALUE_PATTERN = Pattern.compile("\\{?[A-Za-z0-9+/]+={0,2}}?");
 
     @Test

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -4560,6 +4560,8 @@ public void doIconSize( StaplerRequest req, StaplerResponse rsp ) throws IOExcep
             throw new ServletException();
         Cookie cookie = new Cookie("iconSize", Functions.validateIconSize(qs));
         cookie.setMaxAge(/* ~4 mo. */9999999); // #762
+        cookie.setSecure(true);
+        cookie.setHttpOnly(true);
         rsp.addCookie(cookie);
         String ref = req.getHeader("Referer");
         if(ref==null)   ref=".";

File: core/src/main/java/hudson/DescriptorExtensionList.java
Patch:
@@ -45,7 +45,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.concurrent.CopyOnWriteArrayList;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 import net.sf.json.JSONException;

File: core/src/main/java/hudson/EnvVars.java
Patch:
@@ -44,7 +44,7 @@
 import java.util.UUID;
 import java.util.logging.Logger;
 import edu.umd.cs.findbugs.annotations.NonNull;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Environment variables.

File: core/src/main/java/hudson/ExtensionList.java
Patch:
@@ -45,7 +45,7 @@
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.util.io.OnMaster;
 

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -107,7 +107,7 @@
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 import jenkins.FilePathFilter;

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -166,7 +166,7 @@
 import java.util.HashSet;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicLong;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import org.apache.commons.io.IOUtils;
 import org.kohsuke.accmod.Restricted;

File: core/src/main/java/hudson/Launcher.java
Patch:
@@ -43,7 +43,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import java.io.BufferedOutputStream;
 import java.io.File;
 import java.io.IOException;

File: core/src/main/java/hudson/LocalPluginManager.java
Patch:
@@ -27,7 +27,7 @@
 import jenkins.util.SystemProperties;
 import jenkins.model.Jenkins;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletContext;
 import java.io.File;

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -105,7 +105,7 @@
 import org.xml.sax.SAXException;
 import org.xml.sax.helpers.DefaultHandler;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -51,7 +51,7 @@
 import org.kohsuke.stapler.export.ExportedBean;
 import org.kohsuke.stapler.interceptor.RequirePOST;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.Closeable;
 import java.io.File;

File: core/src/main/java/hudson/Proc.java
Patch:
@@ -51,7 +51,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 

File: core/src/main/java/hudson/ProxyConfiguration.java
Patch:
@@ -49,7 +49,7 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.regex.Pattern;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import jenkins.model.Jenkins;
 import jenkins.security.stapler.StaplerAccessibleType;
 import jenkins.util.JenkinsJVM;

File: core/src/main/java/hudson/Util.java
Patch:
@@ -85,7 +85,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.crypto.SecretKey;

File: core/src/main/java/hudson/cli/CLICommand.java
Patch:
@@ -64,7 +64,7 @@
 import java.util.UUID;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/hudson/cli/handlers/ViewOptionHandler.java
Patch:
@@ -39,7 +39,7 @@
 import org.kohsuke.args4j.spi.Parameters;
 import org.kohsuke.args4j.spi.Setter;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Refers to {@link View} by its name.

File: core/src/main/java/hudson/console/ConsoleAnnotator.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Collection;
 import java.util.List;
 import java.util.ListIterator;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/hudson/diagnosis/OldDataMonitor.java
Patch:
@@ -53,7 +53,7 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 import jenkins.model.Jenkins;

File: core/src/main/java/hudson/init/impl/InstallUncaughtExceptionHandler.java
Patch:
@@ -13,7 +13,7 @@
 import org.kohsuke.stapler.WebApp;
 import org.kohsuke.stapler.compression.CompressionFilter;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;

File: core/src/main/java/hudson/markup/MarkupFormatter.java
Patch:
@@ -29,7 +29,7 @@
 import java.io.IOException;
 import java.io.StringWriter;
 import java.io.Writer;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import org.kohsuke.stapler.HttpResponse;
 import org.kohsuke.stapler.QueryParameter;

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -83,7 +83,7 @@
 import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import org.kohsuke.stapler.interceptor.RequirePOST;
 

File: core/src/main/java/hudson/model/AbstractCIBase.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.concurrent.CopyOnWriteArraySet;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 import jenkins.model.Configuration;
 

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -95,7 +95,7 @@
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 import jenkins.model.BlockedBecauseOfBuildInProgress;

File: core/src/main/java/hudson/model/Action.java
Patch:
@@ -25,7 +25,7 @@
 
 import hudson.Functions;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Object that contributes additional information, behaviors, and UIs to {@link ModelObject}

File: core/src/main/java/hudson/model/AutoCompletionCandidates.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import org.apache.commons.lang.StringUtils;
 
 /**

File: core/src/main/java/hudson/model/Cause.java
Patch:
@@ -41,7 +41,7 @@
 import java.util.HashSet;
 import java.util.Objects;
 import java.util.Set;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/hudson/model/ChoiceParameterDefinition.java
Patch:
@@ -13,7 +13,7 @@
 import net.sf.json.JSONObject;
 import hudson.Extension;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.ArrayList;

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -118,7 +118,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -81,7 +81,7 @@
 import java.lang.reflect.ParameterizedType;
 import java.beans.Introspector;
 import java.util.IdentityHashMap;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 

File: core/src/main/java/hudson/model/DescriptorVisibilityFilter.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.ExtensionFilter;
 import jenkins.util.SystemProperties;

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -67,7 +67,7 @@
 import hudson.security.AccessControlled;
 import java.util.Collection;
 import static java.util.logging.Level.*;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.queue.AsynchronousExecution;
 import jenkins.security.QueueItemAuthenticatorConfiguration;

File: core/src/main/java/hudson/model/Failure.java
Patch:
@@ -28,7 +28,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.ServletException;
 import java.io.IOException;
 

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -71,7 +71,7 @@
 import java.util.TreeMap;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import org.acegisecurity.AccessDeniedException;
 import org.acegisecurity.Authentication;

File: core/src/main/java/hudson/model/FingerprintMap.java
Patch:
@@ -30,7 +30,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.Locale;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/hudson/model/Item.java
Patch:
@@ -42,7 +42,7 @@
 import hudson.security.AccessControlled;
 import hudson.util.Secret;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/hudson/model/ItemGroup.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import org.acegisecurity.AccessDeniedException;
 
 /**

File: core/src/main/java/hudson/model/Items.java
Patch:
@@ -48,7 +48,7 @@
 import java.util.Stack;
 import java.util.StringTokenizer;
 import java.util.function.Predicate;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.DirectlyModifiableTopLevelItemGroup;
 import jenkins.model.Jenkins;

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -77,7 +77,7 @@
 import java.util.SortedMap;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 import jenkins.model.BuildDiscarder;

File: core/src/main/java/hudson/model/ListView.java
Patch:
@@ -46,7 +46,7 @@
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.annotation.concurrent.GuardedBy;
 import javax.servlet.ServletException;
 import jenkins.model.Jenkins;

File: core/src/main/java/hudson/model/LoadStatistics.java
Patch:
@@ -53,7 +53,7 @@
 import java.lang.reflect.Modifier;
 import java.util.concurrent.TimeUnit;
 import java.util.List;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Utilization statistics for a node or a set of nodes.

File: core/src/main/java/hudson/model/ManagementLink.java
Patch:
@@ -39,7 +39,7 @@
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.stapler.interceptor.RequirePOST;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/hudson/model/MyViewsProperty.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.ServletException;
 
 import jenkins.model.Jenkins;

File: core/src/main/java/hudson/model/Node.java
Patch:
@@ -59,7 +59,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.Jenkins;
 import jenkins.util.SystemProperties;

File: core/src/main/java/hudson/model/ParameterDefinition.java
Patch:
@@ -33,7 +33,7 @@
 import java.io.Serializable;
 import java.io.IOException;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 import jenkins.model.Jenkins;

File: core/src/main/java/hudson/model/ParameterValue.java
Patch:
@@ -36,7 +36,7 @@
 import java.io.Serializable;
 import java.util.Map;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import jenkins.model.Jenkins;
 
 import jenkins.security.stapler.StaplerAccessibleType;

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -52,7 +52,7 @@
 
 import com.google.common.collect.Lists;
 import static com.google.common.collect.Sets.newHashSet;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.util.SystemProperties;
 

File: core/src/main/java/hudson/model/ParametersDefinitionProperty.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 import static javax.servlet.http.HttpServletResponse.SC_CREATED;

File: core/src/main/java/hudson/model/PermalinkProjectAction.java
Patch:
@@ -27,7 +27,7 @@
 
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Optional interface for {@link Action}s that are attached

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -131,7 +131,7 @@
 import com.thoughtworks.xstream.XStream;
 import com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.annotation.Nonnegative;
 import javax.servlet.http.HttpServletResponse;
 

File: core/src/main/java/hudson/model/ReconfigurableDescribable.java
Patch:
@@ -25,7 +25,7 @@
 
 import hudson.model.Descriptor.FormException;
 import hudson.slaves.NodeProperty;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import net.sf.json.JSONObject;
 import org.kohsuke.stapler.StaplerRequest;

File: core/src/main/java/hudson/model/Resource.java
Patch:
@@ -23,7 +23,7 @@
  */
 package hudson.model;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -100,7 +100,7 @@
 import static java.util.logging.Level.*;
 
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletResponse;

File: core/src/main/java/hudson/model/RunParameterValue.java
Patch:
@@ -28,7 +28,7 @@
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.export.Exported;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import java.util.Locale;
 
 public class RunParameterValue extends ParameterValue {

File: core/src/main/java/hudson/model/RunnerStack.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Stack;
 import java.util.Map;
 import java.util.WeakHashMap;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Keeps track of {@link RunExecution}s that are currently executing on the given thread

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -64,7 +64,7 @@
 import java.util.jar.Manifest;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 import jenkins.model.Jenkins;

File: core/src/main/java/hudson/model/TimeZoneProperty.java
Patch:
@@ -3,7 +3,7 @@
 import hudson.Extension;
 import hudson.util.ListBoxModel;
 import hudson.util.ListBoxModel.Option;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.IOException;

File: core/src/main/java/hudson/model/TopLevelItemDescriptor.java
Patch:
@@ -40,7 +40,7 @@
 import org.kohsuke.stapler.jelly.DefaultScriptInvoker;
 import org.kohsuke.stapler.jelly.JellyClassTearOff;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.StringWriter;
 import java.util.logging.Level;

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -116,7 +116,7 @@
 import java.util.jar.JarFile;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import jenkins.util.Timer;
 import org.apache.commons.io.IOUtils;
 import org.kohsuke.accmod.Restricted;

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -61,7 +61,7 @@
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -62,7 +62,7 @@
 import java.util.concurrent.ExecutionException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.servlet.ServletException;

File: core/src/main/java/hudson/model/UserIdMapper.java
Patch:
@@ -34,7 +34,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;

File: core/src/main/java/hudson/model/ViewDescriptor.java
Patch:
@@ -30,7 +30,7 @@
 
 import java.util.Iterator;
 import java.util.List;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.DirectlyModifiableTopLevelItemGroup;
 import jenkins.model.Jenkins;

File: core/src/main/java/hudson/model/ViewGroupMixIn.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/hudson/model/WorkspaceBrowser.java
Patch:
@@ -28,7 +28,7 @@
 import hudson.FilePath;
 import hudson.slaves.WorkspaceList;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Allows to access a workspace as an alternative to online build node.

File: core/src/main/java/hudson/model/labels/LabelAtom.java
Patch:
@@ -56,7 +56,7 @@
 import java.util.Vector;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**

File: core/src/main/java/hudson/model/listeners/SCMListener.java
Patch:
@@ -41,7 +41,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import jenkins.model.Jenkins;
 
 /**

File: core/src/main/java/hudson/model/queue/Executables.java
Patch:
@@ -27,7 +27,7 @@
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/hudson/model/queue/QueueTaskDispatcher.java
Patch:
@@ -33,7 +33,7 @@
 import hudson.model.Queue.BuildableItem;
 import hudson.model.Queue.Task;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Vetos the execution of a task on a node

File: core/src/main/java/hudson/model/queue/QueueTaskFilter.java
Patch:
@@ -33,7 +33,7 @@
 
 import java.io.IOException;
 import java.util.Collection;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Base class for defining filter {@link hudson.model.Queue.Task}.

File: core/src/main/java/hudson/model/queue/ScheduleResult.java
Patch:
@@ -5,7 +5,7 @@
 import hudson.model.Queue.Item;
 import hudson.model.Queue.Task;
 import hudson.model.Queue.WaitingItem;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Result of {@link Queue#schedule2}

File: core/src/main/java/hudson/model/queue/SubTask.java
Patch:
@@ -33,7 +33,7 @@
 
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * A component of {@link Task} that represents a computation carried out by a single {@link Executor}.

File: core/src/main/java/hudson/model/queue/Tasks.java
Patch:
@@ -26,7 +26,7 @@
 import hudson.model.Queue;
 import hudson.model.Queue.Item;
 import hudson.model.Queue.Task;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import org.acegisecurity.Authentication;
 
 import java.util.Collection;

File: core/src/main/java/hudson/model/queue/WorkUnit.java
Patch:
@@ -27,7 +27,7 @@
 import hudson.model.Queue;
 import hudson.model.Queue.Executable;
 import hudson.model.Queue.Task;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import hudson.model.Run;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;

File: core/src/main/java/hudson/node_monitors/AbstractAsyncNodeMonitorDescriptor.java
Patch:
@@ -7,7 +7,7 @@
 import hudson.slaves.SlaveComputer;
 import jenkins.model.Jenkins;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 import java.util.ArrayList;

File: core/src/main/java/hudson/node_monitors/NodeMonitor.java
Patch:
@@ -36,7 +36,7 @@
 import hudson.util.DescriptorList;
 
 import java.util.List;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 import org.kohsuke.stapler.export.Exported;
 import org.kohsuke.stapler.export.ExportedBean;

File: core/src/main/java/hudson/scheduler/CronTab.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.regex.Pattern;
 
 import static java.util.Calendar.*;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Table for driving scheduled tasks.

File: core/src/main/java/hudson/scheduler/CronTabList.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.TimeZone;
 import java.util.Collection;
 import java.util.Vector;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 import org.kohsuke.accmod.Restricted;

File: core/src/main/java/hudson/scm/PollingResult.java
Patch:
@@ -5,7 +5,7 @@
 import hudson.Launcher;
 import hudson.FilePath;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.Serializable;
 

File: core/src/main/java/hudson/scm/SCM.java
Patch:
@@ -56,7 +56,7 @@
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 import jenkins.model.Jenkins;

File: core/src/main/java/hudson/search/Search.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.ServletException;
 
 import jenkins.util.MemoryReductionUtil;

File: core/src/main/java/hudson/security/ACL.java
Patch:
@@ -29,7 +29,7 @@
 import hudson.model.ViewGroup;
 import java.util.Arrays;
 import java.util.stream.Collectors;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 import hudson.model.Item;

File: core/src/main/java/hudson/security/FederatedLoginService.java
Patch:
@@ -35,7 +35,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 import java.io.IOException;

File: core/src/main/java/hudson/security/Permission.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.CopyOnWriteArrayList;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 import org.jvnet.localizer.Localizable;

File: core/src/main/java/hudson/security/PermissionGroup.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Locale;
 import java.util.SortedSet;
 import java.util.TreeSet;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 import org.jvnet.localizer.Localizable;

File: core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java
Patch:
@@ -41,7 +41,7 @@
 import org.springframework.util.Assert;
 import org.springframework.util.StringUtils;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;

File: core/src/main/java/hudson/slaves/AbstractCloudComputer.java
Patch:
@@ -30,7 +30,7 @@
 import org.kohsuke.stapler.interceptor.RequirePOST;
 
 import java.io.IOException;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Partial implementation of {@link Computer} to be used in conjunction with

File: core/src/main/java/hudson/slaves/ChannelPinger.java
Patch:
@@ -37,7 +37,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.logging.Level;

File: core/src/main/java/hudson/slaves/ComputerListener.java
Patch:
@@ -35,7 +35,7 @@
 
 import java.io.IOException;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/hudson/slaves/DelegatingComputerLauncher.java
Patch:
@@ -31,7 +31,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.Jenkins;
 import org.kohsuke.accmod.Restricted;

File: core/src/main/java/hudson/slaves/JNLPLauncher.java
Patch:
@@ -29,7 +29,7 @@
 import hudson.model.Descriptor;
 import hudson.model.TaskListener;
 import hudson.util.FormValidation;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 import jenkins.model.Jenkins;

File: core/src/main/java/hudson/slaves/NodeList.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.CopyOnWriteArrayList;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * {@link CopyOnWriteArrayList} for {@link Node} that has special serialization semantics

File: core/src/main/java/hudson/slaves/NodeProvisioner.java
Patch:
@@ -35,7 +35,7 @@
 import jenkins.util.Timer;
 import org.jenkinsci.Symbol;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.annotation.concurrent.GuardedBy;
 import java.awt.Color;

File: core/src/main/java/hudson/slaves/OfflineCause.java
Patch:
@@ -33,7 +33,7 @@
 import org.kohsuke.stapler.export.ExportedBean;
 import org.kohsuke.stapler.export.Exported;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.ObjectStreamException;
 import java.util.Collections;

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -75,7 +75,7 @@
 import org.kohsuke.stapler.export.Exported;
 import org.kohsuke.stapler.interceptor.RequirePOST;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.CheckReturnValue;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.OverrideMustInvoke;

File: core/src/main/java/hudson/slaves/WorkspaceList.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -53,7 +53,7 @@
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 import net.sf.json.JSONObject;
 import edu.umd.cs.findbugs.annotations.NonNull;

File: core/src/main/java/hudson/tasks/BatchFile.java
Patch:
@@ -38,7 +38,7 @@
 
 import java.io.ObjectStreamException;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Executes commands by using Windows batch file.

File: core/src/main/java/hudson/tasks/BuildTrigger.java
Patch:
@@ -57,7 +57,7 @@
 import java.util.StringTokenizer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.DependencyDeclarer;
 import jenkins.model.Jenkins;

File: core/src/main/java/hudson/tasks/Shell.java
Patch:
@@ -50,7 +50,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Executes a series of commands by using a shell.

File: core/src/main/java/hudson/tasks/UserAvatarResolver.java
Patch:
@@ -33,7 +33,7 @@
 import hudson.ExtensionPoint;
 import hudson.Functions;
 import hudson.model.User;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Infers avatar image URLs for users

File: core/src/main/java/hudson/tools/ToolInstallation.java
Patch:
@@ -40,7 +40,7 @@
 
 import com.thoughtworks.xstream.annotations.XStreamSerializable;
 import com.thoughtworks.xstream.converters.UnmarshallingContext;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.Jenkins;
 

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -58,7 +58,7 @@
 import java.util.logging.Logger;
 
 import antlr.ANTLRException;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 import hudson.model.Items;

File: core/src/main/java/hudson/util/BootFailure.java
Patch:
@@ -4,7 +4,7 @@
 import jenkins.util.groovy.GroovyHookScript;
 import org.kohsuke.stapler.WebApp;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.ServletContext;
 import java.io.BufferedReader;
 import java.io.File;

File: core/src/main/java/hudson/util/DescriptorList.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * List of {@link Descriptor}s.

File: core/src/main/java/hudson/util/Graph.java
Patch:
@@ -37,7 +37,7 @@
 import java.awt.image.BufferedImage;
 import java.awt.*;
 import edu.umd.cs.findbugs.annotations.NonNull;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * A JFreeChart-generated graph that's bound to UI.

File: core/src/main/java/hudson/util/KeyedDataStorage.java
Patch:
@@ -31,7 +31,7 @@
 import java.text.MessageFormat;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/hudson/util/MultipartFormDataParser.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.commons.fileupload.FileUploadException;
 import org.apache.commons.lang.ArrayUtils;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.ServletException;
 import java.util.Map;

File: core/src/main/java/hudson/util/PluginServletFilter.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.ArrayList;
 import jenkins.model.Jenkins;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.Filter;
 import javax.servlet.FilterChain;
 import javax.servlet.FilterConfig;

File: core/src/main/java/hudson/util/ProcessKillingVeto.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 import jenkins.util.JenkinsJVM;

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -73,7 +73,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import static com.sun.jna.Pointer.NULL;
 import jenkins.util.SystemProperties;
 import static hudson.util.jna.GNUCLibrary.LIBC;

File: core/src/main/java/hudson/util/ProcessTreeRemoting.java
Patch:
@@ -3,7 +3,7 @@
 import hudson.EnvVars;
 import hudson.util.ProcessTree.ProcessCallable;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 import java.lang.reflect.Proxy;

File: core/src/main/java/hudson/util/ReflectionUtils.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Utility code for reflection.

File: core/src/main/java/hudson/util/Retrier.java
Patch:
@@ -3,7 +3,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Arrays;
 import java.util.concurrent.Callable;

File: core/src/main/java/hudson/util/Secret.java
Patch:
@@ -44,7 +44,7 @@
 import java.util.Base64;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;

File: core/src/main/java/hudson/util/StreamTaskListener.java
Patch:
@@ -45,7 +45,7 @@
 import jenkins.util.SystemProperties;
 import org.kohsuke.stapler.framework.io.WriterOutputStream;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 // TODO: AbstractTaskListener is empty now, but there are dependencies on that e.g. Ruby Runtime - JENKINS-48116)

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -78,7 +78,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/hudson/widgets/HistoryWidget.java
Patch:
@@ -35,7 +35,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.ServletException;
 import java.io.IOException;
 import java.util.ArrayList;

File: core/src/main/java/jenkins/AgentProtocol.java
Patch:
@@ -8,7 +8,7 @@
 import java.io.IOException;
 import java.net.Socket;
 import java.util.Set;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 import jenkins.model.Jenkins;
 

File: core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.reflect.Method;
 import java.net.URL;
 import java.util.Enumeration;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/jenkins/FilePathFilter.java
Patch:
@@ -5,7 +5,7 @@
 import hudson.remoting.ChannelBuilder;
 import jenkins.security.ChannelConfigurator;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import java.io.File;
 
 /**

File: core/src/main/java/jenkins/MetaLocaleDrivenResourceProvider.java
Patch:
@@ -30,7 +30,7 @@
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.stapler.LocaleDrivenResourceProvider;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.net.URL;
 

File: core/src/main/java/jenkins/PluginLocaleDrivenResourceProvider.java
Patch:
@@ -25,7 +25,7 @@
 
 import hudson.ExtensionPoint;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.net.URL;
 

File: core/src/main/java/jenkins/install/InstallState.java
Patch:
@@ -23,7 +23,7 @@
  */
 package jenkins.install;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 import hudson.Extension;

File: core/src/main/java/jenkins/install/InstallUtil.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.Map;
 import java.util.logging.Logger;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.inject.Provider;
 

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.Filter;
 import javax.servlet.FilterChain;
 import javax.servlet.FilterConfig;

File: core/src/main/java/jenkins/model/ArtifactManagerFactory.java
Patch:
@@ -27,7 +27,7 @@
 import hudson.ExtensionPoint;
 import hudson.model.AbstractDescribableImpl;
 import hudson.model.Run;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 /**

File: core/src/main/java/jenkins/model/AssetManager.java
Patch:
@@ -9,7 +9,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletResponse;

File: core/src/main/java/jenkins/model/CauseOfInterruption.java
Patch:
@@ -33,7 +33,7 @@
 
 import java.io.Serializable;
 import java.util.Collections;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/jenkins/model/GlobalCloudConfiguration.java
Patch:
@@ -14,7 +14,7 @@
 import org.kohsuke.stapler.StaplerResponse;
 import org.kohsuke.stapler.verb.POST;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.ServletException;
 import java.io.IOException;
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -250,7 +250,7 @@
 import org.kohsuke.stapler.verb.POST;
 import org.xml.sax.InputSource;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.crypto.SecretKey;

File: core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.logging.Logger;
 
 import static hudson.Util.fixNull;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/jenkins/model/Nodes.java
Patch:
@@ -38,7 +38,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.File;
 import java.io.FileFilter;

File: core/src/main/java/jenkins/model/ParameterizedJobMixIn.java
Patch:
@@ -54,7 +54,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.ServletException;
 import static javax.servlet.http.HttpServletResponse.SC_CREATED;
 import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;

File: core/src/main/java/jenkins/model/PeepholePermalink.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.stream.Stream;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/jenkins/model/RunIdMigrator.java
Patch:
@@ -54,7 +54,7 @@
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import org.apache.commons.io.Charsets;
 import org.apache.commons.io.FileUtils;

File: core/src/main/java/jenkins/model/identity/InstanceIdentityProvider.java
Patch:
@@ -37,7 +37,7 @@
 import java.security.interfaces.RSAPublicKey;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/jenkins/model/item_category/Categories.java
Patch:
@@ -33,7 +33,7 @@
 import org.kohsuke.stapler.export.ExportedBean;
 import org.kohsuke.stapler.export.Flavor;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 import java.io.IOException;

File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.TreeMap;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 import jenkins.util.MemoryReductionUtil;
 import org.kohsuke.accmod.Restricted;

File: core/src/main/java/jenkins/model/lazy/BuildReference.java
Patch:
@@ -10,7 +10,7 @@
 import java.lang.ref.WeakReference;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.lazy.LazyBuildMixIn.RunMixIn;
 import org.kohsuke.accmod.Restricted;

File: core/src/main/java/jenkins/model/lazy/LazyBuildMixIn.java
Patch:
@@ -41,7 +41,7 @@
 import java.lang.reflect.InvocationTargetException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.DoNotUse;

File: core/src/main/java/jenkins/model/queue/AsynchronousExecution.java
Patch:
@@ -34,7 +34,7 @@
 import hudson.model.ResourceActivity;
 import hudson.model.ResourceController;
 import hudson.model.ResourceList;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.annotation.concurrent.GuardedBy;
 import jenkins.model.Jenkins;

File: core/src/main/java/jenkins/model/queue/ItemDeletion.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.Set;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.annotation.concurrent.GuardedBy;
 

File: core/src/main/java/jenkins/scm/RunWithSCM.java
Patch:
@@ -34,7 +34,7 @@
 import hudson.util.AdaptedIterator;
 import org.kohsuke.stapler.export.Exported;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.AbstractSet;
 import java.util.HashSet;

File: core/src/main/java/jenkins/scm/SCMDecisionHandler.java
Patch:
@@ -28,7 +28,7 @@
 import hudson.model.Item;
 import java.util.ArrayList;
 import java.util.List;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/jenkins/security/ApiTokenProperty.java
Patch:
@@ -60,7 +60,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.annotation.concurrent.Immutable;
 

File: core/src/main/java/jenkins/security/BasicApiTokenHelper.java
Patch:
@@ -30,7 +30,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import java.nio.charset.StandardCharsets;
 import java.security.MessageDigest;
 

File: core/src/main/java/jenkins/security/ClassFilterImpl.java
Patch:
@@ -51,7 +51,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.Jenkins;
 import jenkins.util.SystemProperties;

File: core/src/main/java/jenkins/security/ConfidentialKey.java
Patch:
@@ -4,7 +4,7 @@
 import hudson.tasks.Builder;
 import hudson.util.Secret;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import java.io.IOException;
 
 import jenkins.slaves.JnlpAgentReceiver;

File: core/src/main/java/jenkins/security/ConfidentialStore.java
Patch:
@@ -7,7 +7,7 @@
 import jenkins.model.Jenkins;
 import org.kohsuke.MetaInfServices;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 import java.security.SecureRandom;

File: core/src/main/java/jenkins/security/CustomClassFilter.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import jenkins.model.Jenkins;
 import jenkins.util.SystemProperties;
 import org.apache.commons.io.IOUtils;

File: core/src/main/java/jenkins/security/QueueItemAuthenticator.java
Patch:
@@ -12,7 +12,7 @@
 import hudson.model.queue.Tasks;
 import java.util.Calendar;
 import java.util.Collections;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import org.acegisecurity.Authentication;
 
 /**

File: core/src/main/java/jenkins/security/ResourceDomainConfiguration.java
Patch:
@@ -52,7 +52,7 @@
 import java.security.interfaces.RSAPublicKey;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 import static jenkins.security.ResourceDomainFilter.ERROR_RESPONSE;
 

File: core/src/main/java/jenkins/security/ResourceDomainRootAction.java
Patch:
@@ -42,7 +42,7 @@
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.stapler.*;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.IOException;

File: core/src/main/java/jenkins/security/UpdateSiteWarningsConfiguration.java
Patch:
@@ -36,7 +36,7 @@
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.stapler.StaplerRequest;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Collections;
 import java.util.HashSet;

File: core/src/main/java/jenkins/security/UserDetailsCache.java
Patch:
@@ -36,7 +36,7 @@
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.springframework.dao.DataAccessException;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;

File: core/src/main/java/jenkins/security/apitoken/ApiTokenStats.java
Patch:
@@ -33,7 +33,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.File;
 import java.io.IOException;

File: core/src/main/java/jenkins/security/apitoken/ApiTokenStore.java
Patch:
@@ -32,7 +32,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.annotation.concurrent.Immutable;

File: core/src/main/java/jenkins/security/s2m/RejectedCallable.java
Patch:
@@ -3,7 +3,7 @@
 import hudson.PluginWrapper;
 import jenkins.model.Jenkins;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
 * @author Kohsuke Kawaguchi

File: core/src/main/java/jenkins/security/stapler/StaplerDispatchValidator.java
Patch:
@@ -36,7 +36,7 @@
 import org.kohsuke.stapler.StaplerResponse;
 import org.kohsuke.stapler.WebApp;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletContext;
 import java.io.IOException;

File: core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java
Patch:
@@ -15,7 +15,7 @@
 import java.io.PrintWriter;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.Jenkins;
 import jenkins.security.ChannelConfigurator;

File: core/src/main/java/jenkins/slaves/RemotingWorkDirSettings.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.Jenkins;
 import org.kohsuke.accmod.Restricted;

File: core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java
Patch:
@@ -45,7 +45,7 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/jenkins/telemetry/Telemetry.java
Patch:
@@ -38,7 +38,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 import java.io.OutputStream;

File: core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java
Patch:
@@ -36,7 +36,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;

File: core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java
Patch:
@@ -74,7 +74,7 @@
 import org.kohsuke.stapler.DataBoundSetter;
 import org.kohsuke.stapler.QueryParameter;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**

File: core/src/main/java/jenkins/triggers/SCMTriggerItem.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.Collections;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.ParameterizedJobMixIn;
 import jenkins.scm.SCMDecisionHandler;

File: core/src/main/java/jenkins/util/AntClassLoader.java
Patch:
@@ -32,7 +32,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.IOException;

File: core/src/main/java/jenkins/util/ResourceBundleUtil.java
Patch:
@@ -27,7 +27,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import hudson.PluginWrapper;
 import java.util.logging.Logger;

File: core/src/main/java/jenkins/util/SystemProperties.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletContextEvent;

File: core/src/main/java/jenkins/util/TimeDuration.java
Patch:
@@ -4,7 +4,7 @@
 import org.kohsuke.stapler.QueryParameter;
 
 import java.util.concurrent.TimeUnit;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Represents a length of something, like {@code 3sec}.

File: core/src/main/java/jenkins/util/VirtualFile.java
Patch:
@@ -54,7 +54,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 
 import jenkins.MasterToSlaveFileCallable;

File: test/src/test/java/hudson/AbstractItemSecurity1114Test.java
Patch:
@@ -16,7 +16,7 @@
 import org.jvnet.hudson.test.MockAuthorizationStrategy;
 import org.jvnet.hudson.test.TestExtension;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 public class AbstractItemSecurity1114Test {
     @Rule

File: test/src/test/java/hudson/model/ApiSEC1704Test.java
Patch:
@@ -31,7 +31,7 @@
 import org.jvnet.hudson.test.TestExtension;
 import org.kohsuke.stapler.export.ExportedBean;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertThat;

File: test/src/test/java/hudson/model/DescriptorVisibilityFilterTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.jvnet.hudson.test.LoggerRule;
 import org.jvnet.hudson.test.TestExtension;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Collection;
 import java.util.logging.Level;

File: test/src/test/java/hudson/model/FingerprintTest.java
Patch:
@@ -41,7 +41,7 @@
 import java.util.Hashtable;
 import java.util.Map;
 import java.util.Set;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.Jenkins;
 import org.junit.Rule;

File: test/src/test/java/hudson/model/SlaveTest.java
Patch:
@@ -43,7 +43,7 @@
 import java.net.URLEncoder;
 import java.util.HashSet;
 import java.util.Set;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import org.apache.commons.io.IOUtils;
 import static org.hamcrest.Matchers.anyOf;

File: test/src/test/java/hudson/scm/AbstractScmTagActionTest.java
Patch:
@@ -38,7 +38,7 @@
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.File;
 import java.io.IOException;

File: test/src/test/java/hudson/security/ACLTest.java
Patch:
@@ -43,7 +43,7 @@
 import org.jvnet.hudson.test.MockAuthorizationStrategy;
 import org.jvnet.hudson.test.TestExtension;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 public class ACLTest {
 

File: test/src/test/java/hudson/security/csrf/CrumbExclusionTest.java
Patch:
@@ -49,7 +49,7 @@
 import org.jvnet.hudson.test.TestExtension;
 import org.kohsuke.stapler.verb.POST;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.FilterChain;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;

File: test/src/test/java/hudson/tasks/BuildTriggerTest.java
Patch:
@@ -57,7 +57,7 @@
 import java.util.Set;
 import java.util.List;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 import jenkins.model.Jenkins;
 import jenkins.security.QueueItemAuthenticatorConfiguration;

File: test/src/test/java/jenkins/AgentProtocolTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import jenkins.model.Jenkins;
 import org.apache.commons.lang.StringUtils;
 import static org.junit.Assert.fail;

File: test/src/test/java/jenkins/model/JenkinsTest.java
Patch:
@@ -85,7 +85,7 @@
 
 import org.jvnet.hudson.test.MockAuthorizationStrategy;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * Tests of the {@link Jenkins} class instance logic.

File: test/src/test/java/jenkins/security/ResourceDomainTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.jvnet.hudson.test.TestExtension;
 import org.kohsuke.stapler.HttpResponse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import java.net.URL;
 import java.time.Instant;
 import java.util.UUID;

File: test/src/test/java/jenkins/security/SuspiciousRequestFilterTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.kohsuke.stapler.QueryParameter;
 import org.kohsuke.stapler.verb.GET;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.http.HttpServletResponse;
 import java.net.URL;
 

File: test/src/test/java/jenkins/security/stapler/CustomRoutingDecisionProviderTest.java
Patch:
@@ -35,7 +35,7 @@
 import org.kohsuke.stapler.StaplerResponse;
 import org.kohsuke.stapler.WebMethod;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 

File: test/src/test/java/jenkins/security/stapler/DynamicTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.hamcrest.CoreMatchers.*;
 import static org.junit.Assert.*;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import java.util.stream.Stream;
 
 @Issue("SECURITY-400")

File: test/src/test/java/jenkins/security/stapler/PreventRoutingTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.kohsuke.stapler.StaplerProxy;
 import org.kohsuke.stapler.StaplerRequest;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.List;
 

File: test/src/test/java/jenkins/security/stapler/Security867Test.java
Patch:
@@ -31,7 +31,7 @@
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.TestExtension;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 import static org.hamcrest.Matchers.allOf;
 import static org.hamcrest.Matchers.containsString;

File: test/src/test/java/jenkins/security/stapler/StaplerAbstractTest.java
Patch:
@@ -37,7 +37,7 @@
 import org.kohsuke.stapler.WebApp;
 import org.kohsuke.stapler.WebMethod;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import java.awt.*;
 import java.io.IOException;
 import java.net.URL;

File: test/src/test/java/jenkins/security/stapler/StaplerDispatchValidatorTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.TestExtension;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.util.Locale;

File: test/src/test/java/jenkins/security/stapler/StaticRoutingDecisionProviderTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.WebMethod;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import java.io.File;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;

File: test/src/test/java/jenkins/telemetry/MissingClassTelemetryTest.java
Patch:
@@ -40,7 +40,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import javax.servlet.FilterChain;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;

File: test/src/test/java/jenkins/telemetry/TelemetryTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.FilterChain;
 import javax.servlet.ServletException;

File: test/src/test/java/lib/form/ExpandableTextboxTest.java
Patch:
@@ -47,7 +47,7 @@
 import org.kohsuke.stapler.WebMethod;
 import org.w3c.dom.NodeList;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 /**
  * @author Kohsuke Kawaguchi

File: test/src/test/java/lib/form/ValidateButtonTest.java
Patch:
@@ -41,7 +41,7 @@
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
 import org.kohsuke.stapler.StaplerRequest;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotEquals;

File: test/src/test/java/lib/layout/ConfirmationLinkTest.java
Patch:
@@ -39,7 +39,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.WebMethod;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 import java.net.HttpURLConnection;
 

File: test/src/test/java/lib/layout/StopButtonTest.java
Patch:
@@ -38,7 +38,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.WebMethod;
 
-import javax.annotation.CheckForNull;
+import edu.umd.cs.findbugs.annotations.CheckForNull;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotEquals;

File: core/src/main/java/hudson/AboutJenkins.java
Patch:
@@ -4,7 +4,7 @@
 import hudson.security.Permission;
 import java.net.URL;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.Jenkins;
 import org.jenkinsci.Symbol;
 import org.kohsuke.accmod.Restricted;
@@ -41,13 +41,13 @@ public URL getLicensesURL() {
         return AboutJenkins.class.getResource("/META-INF/licenses.xml");
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Permission getRequiredPermission() {
         return Jenkins.READ;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Category getCategory() {
         return Category.STATUS;

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -54,7 +54,7 @@
 import org.apache.tools.zip.ZipOutputStream;
 import org.jenkinsci.bytecode.Transformer;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.Closeable;
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -273,7 +273,7 @@ private void fix(Attributes atts, List<PluginWrapper.Dependency> optionalDepende
      * @see DetachedPluginsUtil#getImpliedDependencies(String, String)
      */
     @Deprecated // since TODO
-    @Nonnull
+    @NonNull
     public static List<PluginWrapper.Dependency> getImpliedDependencies(String pluginName, String jenkinsVersion) {
         return DetachedPluginsUtil.getImpliedDependencies(pluginName, jenkinsVersion);
     }

File: core/src/main/java/hudson/DescriptorExtensionList.java
Patch:
@@ -46,7 +46,7 @@
 import java.util.logging.Logger;
 import java.util.concurrent.CopyOnWriteArrayList;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 import net.sf.json.JSONException;
 import org.kohsuke.stapler.Stapler;
@@ -158,7 +158,7 @@ public T newInstanceFromRadioList(JSONObject config) throws FormException {
      * @throws FormException Data submission error
      */
     @CheckForNull
-    public T newInstanceFromRadioList(@Nonnull JSONObject parent, @Nonnull String name) throws FormException {
+    public T newInstanceFromRadioList(@NonNull JSONObject parent, @NonNull String name) throws FormException {
         try {
             return newInstanceFromRadioList(parent.getJSONObject(name));
         } catch (JSONException ex) {

File: core/src/main/java/hudson/LauncherDecorator.java
Patch:
@@ -6,7 +6,7 @@
 import hudson.model.Executor;
 import hudson.model.TaskListener;
 import hudson.tasks.BuildWrapper;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Decorates {@link Launcher} so that one can intercept executions of commands
@@ -42,8 +42,8 @@ public abstract class LauncherDecorator implements ExtensionPoint {
      * @see Launcher#decorateFor(Node)
      * @see Launcher#decorateByPrefix(String[])
      */
-    @Nonnull
-    public abstract Launcher decorate(@Nonnull Launcher launcher, @Nonnull Node node);
+    @NonNull
+    public abstract Launcher decorate(@NonNull Launcher launcher, @NonNull Node node);
 
     /**
      * Returns all the registered {@link LauncherDecorator}s.

File: core/src/main/java/hudson/PluginManagerStaplerOverride.java
Patch:
@@ -1,7 +1,7 @@
 package hudson;
 
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Extension point for selectively overriding parts of the {@link PluginManager} views
@@ -20,7 +20,7 @@ public abstract class PluginManagerStaplerOverride implements ExtensionPoint {
      * Return all implementations of this extension point
      * @return All implementations of this extension point
      */
-    public static @Nonnull ExtensionList<PluginManagerStaplerOverride> all() {
+    public static @NonNull ExtensionList<PluginManagerStaplerOverride> all() {
         return ExtensionList.lookup(PluginManagerStaplerOverride.class);
     }
 }

File: core/src/main/java/hudson/PluginStrategy.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Pluggability point for how to create {@link PluginWrapper}.
@@ -56,7 +56,7 @@ PluginWrapper createPluginWrapper(File archive)
      * Needed by {@link PluginManager#dynamicLoad} to decide whether such a plugin is already installed.
      * @return the {@link PluginWrapper#getShortName}
      */
-    @Nonnull String getShortName(File archive) throws IOException;
+    @NonNull String getShortName(File archive) throws IOException;
 
 	/**
 	 * Loads the plugin and starts it.

File: core/src/main/java/hudson/cli/CLICommand.java
Patch:
@@ -65,7 +65,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Base class for Hudson CLI.
@@ -461,11 +461,11 @@ protected String getClientSystemProperty(String name) throws IOException, Interr
      * Define the encoding for the command.
      * @since 2.54
      */
-    public void setClientCharset(@Nonnull Charset encoding) {
+    public void setClientCharset(@NonNull Charset encoding) {
         this.encoding = encoding;
     }
 
-    protected @Nonnull Charset getClientCharset() throws IOException, InterruptedException {
+    protected @NonNull Charset getClientCharset() throws IOException, InterruptedException {
         if (encoding != null) {
             return encoding;
         }

File: core/src/main/java/hudson/cli/declarative/CLIRegisterer.java
Patch:
@@ -45,7 +45,7 @@
 import org.kohsuke.args4j.CmdLineParser;
 import org.kohsuke.args4j.CmdLineException;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.PrintStream;
@@ -97,7 +97,7 @@ private Method findResolver(Class type) throws IOException {
         return null;
     }
 
-    private List<ExtensionComponent<CLICommand>> discover(@Nonnull final Jenkins jenkins) {
+    private List<ExtensionComponent<CLICommand>> discover(@NonNull final Jenkins jenkins) {
         LOGGER.fine("Listing up @CLIMethod");
         List<ExtensionComponent<CLICommand>> r = new ArrayList<>();
 

File: core/src/main/java/hudson/console/ConsoleAnnotator.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.List;
 import java.util.ListIterator;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Annotates one line of console output.
@@ -82,7 +82,7 @@ public abstract class ConsoleAnnotator<T> implements Serializable {
      *      To indicate that you are not interested in the following lines, return {@code null}.
      */
     @CheckForNull
-    public abstract ConsoleAnnotator<T> annotate(@Nonnull T context, @Nonnull MarkupText text );
+    public abstract ConsoleAnnotator<T> annotate(@NonNull T context, @NonNull MarkupText text );
 
     /**
      * Cast operation that restricts T.

File: core/src/main/java/hudson/console/ConsoleLogFilter.java
Patch:
@@ -33,7 +33,7 @@
 import hudson.tasks.BuildWrapper;
 import hudson.util.ArgumentListBuilder;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.Serializable;
@@ -102,7 +102,7 @@ public OutputStream decorateLogger(Run build, OutputStream logger) throws IOExce
      *      contextual decoration.
      * @since 1.632
      */
-    public OutputStream decorateLogger(@Nonnull Computer computer, OutputStream logger) throws IOException, InterruptedException {
+    public OutputStream decorateLogger(@NonNull Computer computer, OutputStream logger) throws IOException, InterruptedException {
         return logger;      // by default no-op
     }
 

File: core/src/main/java/hudson/console/ModelHyperlinkNote.java
Patch:
@@ -6,7 +6,7 @@
 import org.jenkinsci.Symbol;
 
 import java.util.logging.Logger;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * {@link HyperlinkNote} that links to a {@linkplain ModelObject model object},
@@ -25,7 +25,7 @@ protected String extraAttributes() {
         return " class='model-link'";
     }
 
-    public static String encodeTo(@Nonnull User u) {
+    public static String encodeTo(@NonNull User u) {
         return encodeTo(u,u.getDisplayName());
     }
 

File: core/src/main/java/hudson/diagnosis/OldDataMonitor.java
Patch:
@@ -54,7 +54,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 import jenkins.model.Jenkins;
 import org.jenkinsci.Symbol;
@@ -86,7 +86,7 @@ public class OldDataMonitor extends AdministrativeMonitor {
      * @throws IllegalStateException Monitor not found.
      *              It should never happen since the monitor is located in the core.
      */
-    @Nonnull
+    @NonNull
     static OldDataMonitor get(Jenkins j) throws IllegalStateException {
         return ExtensionList.lookupSingleton(OldDataMonitor.class);
     }
@@ -440,7 +440,7 @@ private static final class RunSaveableReference implements SaveableReference {
 
     @Extension @Symbol("oldData")
     public static class ManagementLinkImpl extends ManagementLink {
-        @Nonnull
+        @NonNull
         @Override
         public Category getCategory() {
             return Category.TROUBLESHOOTING;

File: core/src/main/java/hudson/lifecycle/WindowsInstallerLink.java
Patch:
@@ -53,7 +53,7 @@
 import org.apache.tools.ant.types.FileSet;
 import org.kohsuke.stapler.interceptor.RequirePOST;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 import java.io.File;
 import java.io.IOException;
@@ -102,7 +102,7 @@ public String getDescription() {
     }
 
 
-    @Nonnull
+    @NonNull
     @Override
     public Category getCategory() {
         return Category.CONFIGURATION;

File: core/src/main/java/hudson/markup/MarkupFormatter.java
Patch:
@@ -30,7 +30,7 @@
 import java.io.StringWriter;
 import java.io.Writer;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import org.kohsuke.stapler.HttpResponse;
 import org.kohsuke.stapler.QueryParameter;
 
@@ -69,9 +69,9 @@ public abstract class MarkupFormatter extends AbstractDescribableImpl<MarkupForm
      * @param output
      *      Formatted HTML should be sent to this output.
      */
-    public abstract void translate(@CheckForNull String markup, @Nonnull Writer output) throws IOException;
+    public abstract void translate(@CheckForNull String markup, @NonNull Writer output) throws IOException;
 
-    public final @Nonnull String translate(@CheckForNull String markup) throws IOException {
+    public final @NonNull String translate(@CheckForNull String markup) throws IOException {
         StringWriter w = new StringWriter();
         translate(markup,w);
         return w.toString();

File: core/src/main/java/hudson/model/CheckPoint.java
Patch:
@@ -27,7 +27,7 @@
 import hudson.tasks.Recorder;
 import hudson.tasks.Builder;
 import hudson.scm.SCM;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Provides a mechanism for synchronizing build executions in the face of concurrent builds.
@@ -153,7 +153,7 @@ public void block() throws InterruptedException {
      * @throws InterruptedException if the build is aborted while waiting
      * @since 1.528
      */
-    public void block(@Nonnull BuildListener listener, @Nonnull String waiter) throws InterruptedException {
+    public void block(@NonNull BuildListener listener, @NonNull String waiter) throws InterruptedException {
         Run.waitForCheckpoint(this, listener, waiter);
     }
 

File: core/src/main/java/hudson/model/ComputerSet.java
Patch:
@@ -49,7 +49,7 @@
 import org.kohsuke.stapler.export.ExportedBean;
 import org.kohsuke.stapler.interceptor.RequirePOST;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 import java.io.File;
 import java.io.IOException;
@@ -416,7 +416,7 @@ public void doRun() {
      * @return The list of strings of computer names (excluding master)
      * @since 2.14
      */
-    @Nonnull
+    @NonNull
     public static List<String> getComputerNames() {
         final ArrayList<String> names = new ArrayList<>();
         for (Computer c : Jenkins.get().getComputers()) {

File: core/src/main/java/hudson/model/DescriptorVisibilityFilter.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.ExtensionFilter;
 import jenkins.util.SystemProperties;
 
@@ -37,7 +37,7 @@ public abstract class DescriptorVisibilityFilter implements ExtensionPoint {
      * the descriptor is not shown.
      * @since 2.12
      */
-    public boolean filterType(@Nonnull Class<?> contextClass, @Nonnull Descriptor descriptor) {
+    public boolean filterType(@NonNull Class<?> contextClass, @NonNull Descriptor descriptor) {
         return true;
     }
 
@@ -57,7 +57,7 @@ public boolean filterType(@Nonnull Class<?> contextClass, @Nonnull Descriptor de
      *      If any of the installed {@link DescriptorVisibilityFilter} returns false,
      *      the descriptor is not shown.
      */
-    public abstract boolean filter(@CheckForNull Object context, @Nonnull Descriptor descriptor);
+    public abstract boolean filter(@CheckForNull Object context, @NonNull Descriptor descriptor);
 
     public static ExtensionList<DescriptorVisibilityFilter> all() {
         return ExtensionList.lookup(DescriptorVisibilityFilter.class);

File: core/src/main/java/hudson/model/DirectlyModifiableView.java
Patch:
@@ -26,7 +26,7 @@
 
 import java.io.IOException;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 
 import org.kohsuke.stapler.HttpResponse;
@@ -48,15 +48,15 @@ public interface DirectlyModifiableView {
      * @throws IOException Removal failed.
      * @throws IllegalArgumentException View rejected to remove an item.
      */
-    boolean remove(@Nonnull TopLevelItem item) throws IOException, IllegalArgumentException;
+    boolean remove(@NonNull TopLevelItem item) throws IOException, IllegalArgumentException;
 
     /**
      * Add item to this view.
      *
      * @throws IOException Adding failed.
      * @throws IllegalArgumentException View rejected to add an item.
      */
-    void add(@Nonnull TopLevelItem item) throws IOException, IllegalArgumentException;
+    void add(@NonNull TopLevelItem item) throws IOException, IllegalArgumentException;
 
     /**
      * Handle addJobToView web method.

File: core/src/main/java/hudson/model/EnvironmentContributingAction.java
Patch:
@@ -31,7 +31,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.ProtectedExternally;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * {@link Action} that contributes environment variables during a build.
@@ -58,7 +58,7 @@ public interface EnvironmentContributingAction extends Action {
      *      Environment variables should be added to this map.
      * @since 2.76
      */
-    default void buildEnvironment(@Nonnull Run<?, ?> run, @Nonnull EnvVars env) {
+    default void buildEnvironment(@NonNull Run<?, ?> run, @NonNull EnvVars env) {
         if (run instanceof AbstractBuild
                 && Util.isOverridden(EnvironmentContributingAction.class,
                                      getClass(), "buildEnvVars", AbstractBuild.class, EnvVars.class)) {

File: core/src/main/java/hudson/model/EnvironmentContributor.java
Patch:
@@ -30,7 +30,7 @@
 import hudson.scm.SCM;
 
 import java.io.IOException;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Contributes environment variables to builds.
@@ -85,7 +85,7 @@ public abstract class EnvironmentContributor implements ExtensionPoint {
      * @param listener
      *      Connected to the build console. Can be used to report errors.
      */
-    public void buildEnvironmentFor(@Nonnull Run r, @Nonnull EnvVars envs, @Nonnull TaskListener listener) throws IOException, InterruptedException {}
+    public void buildEnvironmentFor(@NonNull Run r, @NonNull EnvVars envs, @NonNull TaskListener listener) throws IOException, InterruptedException {}
 
     /**
      * Contributes environment variables used for a job.
@@ -107,7 +107,7 @@ public void buildEnvironmentFor(@Nonnull Run r, @Nonnull EnvVars envs, @Nonnull
      *      Connected to the build console. Can be used to report errors.
      * @since 1.527
      */
-    public void buildEnvironmentFor(@Nonnull Job j, @Nonnull EnvVars envs, @Nonnull TaskListener listener) throws IOException, InterruptedException {}
+    public void buildEnvironmentFor(@NonNull Job j, @NonNull EnvVars envs, @NonNull TaskListener listener) throws IOException, InterruptedException {}
 
     /**
      * Returns all the registered {@link EnvironmentContributor}s.

File: core/src/main/java/hudson/model/Item.java
Patch:
@@ -43,7 +43,7 @@
 import hudson.util.Secret;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Basic configuration unit in Hudson.
@@ -158,7 +158,7 @@ default String getRelativeNameFrom(@CheckForNull ItemGroup g) {
      * @since 1.419
      */
     @Nullable
-    default String getRelativeNameFrom(@Nonnull Item item)  {
+    default String getRelativeNameFrom(@NonNull Item item)  {
         return getRelativeNameFrom(item.getParent());
 
     }

File: core/src/main/java/hudson/model/Items.java
Patch:
@@ -49,7 +49,7 @@
 import java.util.StringTokenizer;
 import java.util.function.Predicate;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.DirectlyModifiableTopLevelItemGroup;
 import jenkins.model.Jenkins;
 import org.acegisecurity.Authentication;
@@ -222,7 +222,7 @@ public static <T extends Item> List<T> fromNameList(String list, Class<T> type)
     /**
      * Does the opposite of {@link #toNameList(Collection)}.
      */
-    public static <T extends Item> List<T> fromNameList(ItemGroup context, @Nonnull String list, @Nonnull Class<T> type) {
+    public static <T extends Item> List<T> fromNameList(ItemGroup context, @NonNull String list, @NonNull Class<T> type) {
         final Jenkins jenkins = Jenkins.get();
         
         List<T> r = new ArrayList<>();
@@ -677,7 +677,7 @@ public T next() {
      * @throws IllegalArgumentException if there is already something there, which you were supposed to know about
      * @throws Failure if there is already something there but you should not be told details
      */
-    static void verifyItemDoesNotAlreadyExist(@Nonnull ItemGroup<?> parent, @Nonnull String newName, @CheckForNull Item variant) throws IllegalArgumentException, Failure {
+    static void verifyItemDoesNotAlreadyExist(@NonNull ItemGroup<?> parent, @NonNull String newName, @CheckForNull Item variant) throws IllegalArgumentException, Failure {
         Item existing;
         try (ACLContext ctxt = ACL.as(ACL.SYSTEM)) {
             existing = parent.getItem(newName);

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -78,7 +78,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 import jenkins.model.BuildDiscarder;
 import jenkins.model.BuildDiscarderProperty;
@@ -375,7 +375,7 @@ public EnvVars getCharacteristicEnvVars() {
      *      Node to eventually run a process on. The implementation must cope with this parameter being null
      *      (in which case none of the node specific properties would be reflected in the resulting override.)
      */
-    public @Nonnull EnvVars getEnvironment(@CheckForNull Node node, @Nonnull TaskListener listener) throws IOException, InterruptedException {
+    public @NonNull EnvVars getEnvironment(@CheckForNull Node node, @NonNull TaskListener listener) throws IOException, InterruptedException {
         EnvVars env = new EnvVars();
 
         if (node != null) {

File: core/src/main/java/hudson/model/JobProperty.java
Patch:
@@ -42,7 +42,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.export.ExportedBean;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Extensible property of {@link Job}.
@@ -131,7 +131,7 @@ public Action getJobAction(J job) {
      * @see ProminentProjectAction
      * @see PermalinkProjectAction
      */
-    @Nonnull
+    @NonNull
     public Collection<? extends Action> getJobActions(J job) {
         // delegate to getJobAction (singular) for backward compatible behavior
         Action a = getJobAction(job);
@@ -170,7 +170,7 @@ public final Action getProjectAction(AbstractProject<?,?> project) {
         return getJobAction((J)project);
     }
 
-    @Nonnull
+    @NonNull
     public final Collection<? extends Action> getProjectActions(AbstractProject<?,?> project) {
         return getJobActions((J)project);
     }

File: core/src/main/java/hudson/model/ModifiableViewGroup.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.io.IOException;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * {@link ViewGroup} that can be modified.
@@ -38,5 +38,5 @@ public interface ModifiableViewGroup extends ViewGroup {
     /**
      * Add new {@link View} to this {@link ViewGroup}.
      */
-    void addView(@Nonnull View view) throws IOException;
+    void addView(@NonNull View view) throws IOException;
 }

File: core/src/main/java/hudson/model/PasswordParameterValue.java
Patch:
@@ -29,14 +29,14 @@
 import org.kohsuke.stapler.DataBoundConstructor;
 
 import java.util.Locale;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * @author Kohsuke Kawaguchi
  */
 public class PasswordParameterValue extends ParameterValue {
 
-    @Nonnull
+    @NonNull
     private final Secret value;
 
     // kept for backward compatibility
@@ -71,7 +71,7 @@ public boolean isSensitive() {
         return true;
     }
 
-    @Nonnull
+    @NonNull
     public Secret getValue() {
         return value;
     }

File: core/src/main/java/hudson/model/ReconfigurableDescribable.java
Patch:
@@ -26,7 +26,7 @@
 import hudson.model.Descriptor.FormException;
 import hudson.slaves.NodeProperty;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import net.sf.json.JSONObject;
 import org.kohsuke.stapler.StaplerRequest;
 
@@ -78,5 +78,5 @@ public interface ReconfigurableDescribable<T extends ReconfigurableDescribable<T
      * @return
      *      The new instance. To not to create an instance of a describable, return null.
      */
-    @CheckForNull T reconfigure(@Nonnull StaplerRequest req, @CheckForNull JSONObject form) throws FormException;
+    @CheckForNull T reconfigure(@NonNull StaplerRequest req, @CheckForNull JSONObject form) throws FormException;
 }

File: core/src/main/java/hudson/model/ResourceController.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Iterator;
 import java.util.concurrent.Callable;
 import java.util.concurrent.CopyOnWriteArraySet;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.security.NotReallyRoleSensitiveCallable;
 
 /**
@@ -76,7 +76,7 @@ public int size() {
      * @throws InterruptedException
      *      the thread can be interrupted while waiting for the available resources.
      */
-    public void execute(@Nonnull Runnable task, final ResourceActivity activity ) throws InterruptedException {
+    public void execute(@NonNull Runnable task, final ResourceActivity activity ) throws InterruptedException {
         final ResourceList resources = activity.getResourceList();
         _withLock(new NotReallyRoleSensitiveCallable<Void,InterruptedException>() {
             @Override

File: core/src/main/java/hudson/model/StringParameterDefinition.java
Patch:
@@ -25,7 +25,7 @@
 
 import hudson.Extension;
 import hudson.Util;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import net.sf.json.JSONObject;
 import org.jenkinsci.Symbol;
 import org.kohsuke.accmod.Restricted;
@@ -48,7 +48,7 @@ public StringParameterDefinition(String name, String defaultValue, String descri
         this.trim = trim;
     }
 
-    @Nonnull
+    @NonNull
     public StringParameterDefinition(String name, String defaultValue, String description) {
         this(name, defaultValue, description, false);
     }

File: core/src/main/java/hudson/model/TimeZoneProperty.java
Patch:
@@ -4,7 +4,7 @@
 import hudson.util.ListBoxModel;
 import hudson.util.ListBoxModel.Option;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.IOException;
 import java.util.TimeZone;
@@ -52,7 +52,7 @@ public void setTimeZoneName(@CheckForNull String timeZoneName) {
     @Symbol("timezone")
     public static class DescriptorImpl extends UserPropertyDescriptor {
 
-        @Nonnull
+        @NonNull
         @Override
         public String getDisplayName() {
             return Messages.TimeZoneProperty_DisplayName();

File: core/src/main/java/hudson/model/TopLevelItemDescriptor.java
Patch:
@@ -41,7 +41,7 @@
 import org.kohsuke.stapler.jelly.JellyClassTearOff;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.StringWriter;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -145,7 +145,7 @@ public String getDisplayName() {
      *
      * @since 2.0
      */
-    @Nonnull
+    @NonNull
     public String getDescription() {
         Stapler stapler = Stapler.getCurrent();
         if (stapler != null) {
@@ -177,7 +177,7 @@ public String getDescription() {
      *
      * @since 2.0
      */
-    @Nonnull
+    @NonNull
     public String getCategoryId() {
         return ItemCategory.UncategorizedCategory.ID;
     }

File: core/src/main/java/hudson/model/UsageStatistics.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.commons.io.output.ByteArrayOutputStream;
 import org.kohsuke.stapler.StaplerRequest;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.crypto.Cipher;
 import javax.crypto.CipherOutputStream;
 import javax.crypto.KeyGenerator;
@@ -194,7 +194,7 @@ public String getStatData() throws IOException {
         }
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Permission getRequiredGlobalConfigPagePermission() {
         return Jenkins.MANAGE;

File: core/src/main/java/hudson/model/ViewDescriptor.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.DirectlyModifiableTopLevelItemGroup;
 import jenkins.model.Jenkins;
 import org.apache.commons.lang.StringUtils;
@@ -138,7 +138,7 @@ public List<Descriptor<ViewJobFilter>> getJobFiltersDescriptors() {
      * @since 2.37
      */
     @SuppressWarnings("unused") // expose utility check method to subclasses
-    protected FormValidation checkDisplayName(@Nonnull View view, @CheckForNull String value) {
+    protected FormValidation checkDisplayName(@NonNull View view, @CheckForNull String value) {
         if (StringUtils.isBlank(value)) {
             // no custom name, no need to check
             return FormValidation.ok();

File: core/src/main/java/hudson/model/ViewGroup.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.List;
 import jenkins.model.Jenkins;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Container of {@link View}s.
@@ -69,7 +69,7 @@ public interface ViewGroup extends Saveable, ModelObject, AccessControlled {
      *
      * @since 2.174
      */
-    @Nonnull
+    @NonNull
     default Collection<View> getAllViews() {
         final Collection<View> views = new LinkedHashSet<>(getViews());
 

File: core/src/main/java/hudson/model/WorkspaceCleanupThread.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.Jenkins;
 import jenkins.model.ModifiableTopLevelItemGroup;
 import org.jenkinsci.Symbol;
@@ -102,7 +102,7 @@ public static void invoke() {
         }
     }
 
-    private boolean shouldBeDeleted(@Nonnull TopLevelItem item, FilePath dir, @Nonnull Node n) throws IOException, InterruptedException {
+    private boolean shouldBeDeleted(@NonNull TopLevelItem item, FilePath dir, @NonNull Node n) throws IOException, InterruptedException {
         // TODO: the use of remoting is not optimal.
         // One remoting can execute "exists", "lastModified", and "delete" all at once.
         // (Could even invert master loop so that one FileCallable takes care of all known items.)

File: core/src/main/java/hudson/model/labels/LabelAssignmentAction.java
Patch:
@@ -7,7 +7,7 @@
 import hudson.model.Queue.QueueDecisionHandler;
 import hudson.model.Queue.Task;
 import hudson.model.queue.SubTask;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * {@link Action} that can be submitted to {@link Queue} that controls where
@@ -36,5 +36,5 @@ public interface LabelAssignmentAction extends Action {
      *      null to let other {@link LabelAssignmentAction}s take control, eventually to {@link SubTask#getAssignedLabel()}.
      *      If non-null value is returned, that label will be authoritative.
      */
-    Label getAssignedLabel(@Nonnull SubTask task);
+    Label getAssignedLabel(@NonNull SubTask task);
 }

File: core/src/main/java/hudson/model/listeners/RunListener.java
Patch:
@@ -48,7 +48,7 @@
 import java.lang.reflect.Type;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Receives notifications about builds.
@@ -91,7 +91,7 @@ protected RunListener() {
      *      Any exception/error thrown from this method will be swallowed to prevent broken listeners
      *      from breaking all the builds.
      */
-    public void onCompleted(R r, @Nonnull TaskListener listener) {}
+    public void onCompleted(R r, @NonNull TaskListener listener) {}
 
     /**
      * Called after a build is moved to the {@code Run.State.COMPLETED} state.
@@ -202,7 +202,7 @@ public void unregister() {
     /**
      * Fires the {@link #onCompleted(Run, TaskListener)} event.
      */
-    public static void fireCompleted(Run r, @Nonnull TaskListener listener) {
+    public static void fireCompleted(Run r, @NonNull TaskListener listener) {
         for (RunListener l : all()) {
             if(l.targetType.isInstance(r))
                 try {

File: core/src/main/java/hudson/model/queue/CauseOfBlockage.java
Patch:
@@ -8,7 +8,7 @@
 import hudson.model.Label;
 import hudson.model.TaskListener;
 import hudson.slaves.Cloud;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import org.jvnet.localizer.Localizable;
 
 /**
@@ -44,7 +44,7 @@ public void print(TaskListener listener) {
     /**
      * Obtains a simple implementation backed by {@link Localizable}.
      */
-    public static CauseOfBlockage fromMessage(@Nonnull final Localizable l) {
+    public static CauseOfBlockage fromMessage(@NonNull final Localizable l) {
         l.getKey(); // null check
         return new CauseOfBlockage() {
             @Override

File: core/src/main/java/hudson/model/queue/Executables.java
Patch:
@@ -28,7 +28,7 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Convenience methods around {@link Executable}.
@@ -42,7 +42,7 @@ public class Executables {
      * @param e Executable
      * @return Discovered subtask
      */
-    public static @Nonnull SubTask getParentOf(@Nonnull Executable e) 
+    public static @NonNull SubTask getParentOf(@NonNull Executable e) 
             throws Error, RuntimeException {
         try {
             return e.getParent();

File: core/src/main/java/hudson/model/queue/FutureImpl.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.Set;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Created when {@link hudson.model.Queue.Item} is created so that the caller can track the progress of the task.
@@ -92,7 +92,7 @@ public synchronized void setAsCancelled() {
         }
     }
 
-    synchronized void addExecutor(@Nonnull Executor executor) {
+    synchronized void addExecutor(@NonNull Executor executor) {
         this.executors.add(executor);
     }
 }

File: core/src/main/java/hudson/model/queue/SubTask.java
Patch:
@@ -31,7 +31,7 @@
 import hudson.model.Queue.Task;
 import hudson.model.ResourceActivity;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 import javax.annotation.CheckForNull;
 
@@ -90,7 +90,7 @@ default long getEstimatedDuration() {
      * Gets the {@link Task} that this subtask belongs to.
      * @return by default, {@code this}
      */
-    default @Nonnull Task getOwnerTask() {
+    default @NonNull Task getOwnerTask() {
         return (Task) this;
     }
 

File: core/src/main/java/hudson/node_monitors/MonitorOfflineCause.java
Patch:
@@ -23,7 +23,7 @@
  */
 package hudson.node_monitors;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 import hudson.slaves.OfflineCause;
 
@@ -38,5 +38,5 @@ public abstract class MonitorOfflineCause extends OfflineCause {
     /**
      * Identify monitor implementation that put computer offline.
      */
-    public abstract @Nonnull Class<? extends NodeMonitor> getTrigger();
+    public abstract @NonNull Class<? extends NodeMonitor> getTrigger();
 }

File: core/src/main/java/hudson/scheduler/CronTabList.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Collection;
 import java.util.Vector;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
@@ -92,11 +92,11 @@ public String checkSanity() {
         return null;
     }
 
-    public static CronTabList create(@Nonnull String format) throws ANTLRException {
+    public static CronTabList create(@NonNull String format) throws ANTLRException {
         return create(format,null);
     }
 
-    public static CronTabList create(@Nonnull String format, Hash hash) throws ANTLRException {
+    public static CronTabList create(@NonNull String format, Hash hash) throws ANTLRException {
         Vector<CronTab> r = new Vector<>();
         int lineNumber = 0;
         String timezone = null;

File: core/src/main/java/hudson/search/CollectionSearchIndex.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * {@link SearchIndex} built on a {@link Map}.
@@ -46,7 +46,7 @@ public abstract class CollectionSearchIndex<SMT extends SearchableModelObject> i
      */
     protected abstract Collection<SMT> all();
 
-    @Nonnull
+    @NonNull
     protected Iterable<SMT> allAsIterable() {
         Collection<SMT> all = all();
         return all == null ? Collections.emptySet() : all;

File: core/src/main/java/hudson/security/GlobalSecurityConfiguration.java
Patch:
@@ -41,7 +41,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 
 import jenkins.model.GlobalConfigurationCategory;
@@ -94,7 +94,7 @@ public boolean isDisableRememberMe() {
         return Jenkins.get().isDisableRememberMe();
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Category getCategory() {
         return Category.SECURITY;

File: core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
Patch:
@@ -68,7 +68,7 @@
 import org.mindrot.jbcrypt.BCrypt;
 import org.springframework.dao.DataAccessException;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.Filter;
 import javax.servlet.FilterChain;
 import javax.servlet.FilterConfig;
@@ -482,7 +482,7 @@ private User createAccount(SignupInfo si) throws IOException {
         return user;
     }
 
-    private boolean containsOnlyAcceptableCharacters(@Nonnull String value){
+    private boolean containsOnlyAcceptableCharacters(@NonNull String value){
         if(ID_REGEX == null){
             return value.matches(DEFAULT_ID_REGEX);
         }else{
@@ -772,7 +772,7 @@ public String getDescription() {
             return Messages.HudsonPrivateSecurityRealm_ManageUserLinks_Description();
         }
 
-        @Nonnull
+        @NonNull
         @Override
         public Category getCategory() {
             return Category.SECURITY;

File: core/src/main/java/hudson/security/SidACL.java
Patch:
@@ -29,7 +29,7 @@
 import org.acegisecurity.acls.sid.GrantedAuthoritySid;
 import org.acegisecurity.acls.sid.Sid;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.logging.Logger;
 import static java.util.logging.Level.FINE;
 import static java.util.logging.Level.FINER;
@@ -43,7 +43,7 @@
 public abstract class SidACL extends ACL {
 
     @Override
-    public boolean hasPermission(@Nonnull Authentication a, Permission permission) {
+    public boolean hasPermission(@NonNull Authentication a, Permission permission) {
         if(a==SYSTEM) {
             if(LOGGER.isLoggable(FINE))
                 LOGGER.fine("hasPermission("+a+","+permission+")=>SYSTEM user has full access");
@@ -65,7 +65,7 @@ public boolean hasPermission(@Nonnull Authentication a, Permission permission) {
      *      true or false if {@link #hasPermission(Sid, Permission)} returns it.
      *      Otherwise null, indicating that this ACL doesn't have any entry for it.
      */
-    protected Boolean _hasPermission(@Nonnull Authentication a, Permission permission) {
+    protected Boolean _hasPermission(@NonNull Authentication a, Permission permission) {
         // ACL entries for this principal takes precedence
         Boolean b = hasPermission(new PrincipalSid(a),permission);
         if(LOGGER.isLoggable(FINER))

File: core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java
Patch:
@@ -42,7 +42,7 @@
 import org.springframework.util.StringUtils;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
@@ -288,7 +288,7 @@ private String findRememberMeCookieValue(HttpServletRequest request, HttpServlet
     /**
      * @return the decoded base64 of the cookie or {@code null} if the value was not correctly encoded
      */
-    private @CheckForNull String decodeCookieBase64(@Nonnull String base64EncodedValue){
+    private @CheckForNull String decodeCookieBase64(@NonNull String base64EncodedValue){
         StringBuilder base64EncodedValueBuilder = new StringBuilder(base64EncodedValue);
         for (int j = 0; j < base64EncodedValueBuilder.length() % 4; j++) {
             base64EncodedValueBuilder.append("=");

File: core/src/main/java/hudson/security/WhoAmI.java
Patch:
@@ -24,7 +24,7 @@
 import org.kohsuke.stapler.export.Exported;
 import org.kohsuke.stapler.export.ExportedBean;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Expose the data needed for /whoAmI, so it can be exposed by Api.
@@ -70,7 +70,7 @@ public String getToString() {
         return auth().toString();
     }
 
-    private @Nonnull Authentication auth() {
+    private @NonNull Authentication auth() {
         return Jenkins.getAuthentication();
     }
 
@@ -88,7 +88,7 @@ public String[] getAuthorities() {
 
     // Used by Jelly
     @Restricted(NoExternalUse.class)
-    public boolean isHeaderDangerous(@Nonnull String name) {
+    public boolean isHeaderDangerous(@NonNull String name) {
         return dangerousHeaders.contains(name.toLowerCase(Locale.ENGLISH));
     }
 

File: core/src/main/java/hudson/security/csrf/GlobalCrumbIssuerConfiguration.java
Patch:
@@ -34,7 +34,7 @@
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.stapler.StaplerRequest;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Show the crumb configuration to the system config page.
@@ -44,7 +44,7 @@
 @Extension(ordinal=195) @Symbol("crumb") // immediately after the security setting
 public class GlobalCrumbIssuerConfiguration extends GlobalConfiguration {
     @Override
-    public @Nonnull GlobalConfigurationCategory getCategory() {
+    public @NonNull GlobalConfigurationCategory getCategory() {
         return GlobalConfigurationCategory.get(GlobalConfigurationCategory.Security.class);
     }
 

File: core/src/main/java/hudson/slaves/AbstractCloudSlave.java
Patch:
@@ -30,7 +30,7 @@
 import hudson.model.TaskListener;
 import hudson.util.StreamTaskListener;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 import java.nio.charset.Charset;
 import java.util.List;
@@ -45,7 +45,7 @@
  */
 public abstract class AbstractCloudSlave extends Slave {
 
-    public AbstractCloudSlave(@Nonnull String name, String remoteFS, ComputerLauncher launcher)
+    public AbstractCloudSlave(@NonNull String name, String remoteFS, ComputerLauncher launcher)
             throws FormException, IOException {
         super(name, remoteFS, launcher);
     }

File: core/src/main/java/hudson/slaves/Cloud.java
Patch:
@@ -42,7 +42,7 @@
 import hudson.util.DescriptorList;
 import org.kohsuke.stapler.DataBoundConstructor;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Collection;
 import java.util.concurrent.Future;
 
@@ -112,11 +112,11 @@ public String getDisplayName() {
      * @since 2.64
      * @return Jenkins relative URL.
      */
-    public @Nonnull String getUrl() {
+    public @NonNull String getUrl() {
         return "cloud/" + name;
     }
 
-    public @Nonnull String getSearchUrl() {
+    public @NonNull String getSearchUrl() {
         return getUrl();
     }
 

File: core/src/main/java/hudson/slaves/ComputerConnector.java
Patch:
@@ -28,7 +28,7 @@
 import hudson.model.TaskListener;
 
 import java.io.IOException;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Factory of {@link ComputerLauncher}.
@@ -49,7 +49,7 @@ public abstract class ComputerConnector extends AbstractDescribableImpl<Computer
      * @param listener
      *      If 
      */
-    public abstract ComputerLauncher launch(@Nonnull String host, TaskListener listener) throws IOException, InterruptedException;
+    public abstract ComputerLauncher launch(@NonNull String host, TaskListener listener) throws IOException, InterruptedException;
 
     @Override
     public ComputerConnectorDescriptor getDescriptor() {

File: core/src/main/java/hudson/slaves/ComputerListener.java
Patch:
@@ -36,7 +36,7 @@
 import java.io.IOException;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Receives notifications about status changes of {@link Computer}s.
@@ -181,7 +181,7 @@ public void onOffline(Computer c) {}
      *
      * @since 1.571
      */
-    public void onOffline(@Nonnull Computer c, @CheckForNull OfflineCause cause) {
+    public void onOffline(@NonNull Computer c, @CheckForNull OfflineCause cause) {
         onOffline(c);
     }
 

File: core/src/main/java/hudson/slaves/DelegatingComputerLauncher.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.Jenkins;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.DoNotUse;
@@ -81,7 +81,7 @@ public static abstract class DescriptorImpl extends Descriptor<ComputerLauncher>
          * @since 2.12
          */
         public List<Descriptor<ComputerLauncher>> applicableDescriptors(@CheckForNull Slave it,
-                                                                        @Nonnull Slave.SlaveDescriptor itDescriptor) {
+                                                                        @NonNull Slave.SlaveDescriptor itDescriptor) {
             List<Descriptor<ComputerLauncher>> r = new ArrayList<>();
             for (Descriptor<ComputerLauncher> d : itDescriptor.computerLauncherDescriptors(it)) {
                 if (DelegatingComputerLauncher.class.isAssignableFrom(d.getKlass().toJavaClass()))  continue;

File: core/src/main/java/hudson/slaves/DumbSlave.java
Patch:
@@ -34,7 +34,7 @@
 import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Default {@link Slave} implementation for computers that do not belong to a higher level structure,
@@ -62,7 +62,7 @@ public DumbSlave(String name, String nodeDescription, String remoteFS, String nu
     }
 
     @DataBoundConstructor
-    public DumbSlave(@Nonnull String name, String remoteFS, ComputerLauncher launcher) throws FormException, IOException {
+    public DumbSlave(@NonNull String name, String remoteFS, ComputerLauncher launcher) throws FormException, IOException {
         super(name, remoteFS, launcher);
     }
 

File: core/src/main/java/hudson/slaves/NodeProperty.java
Patch:
@@ -47,7 +47,7 @@
 import java.io.IOException;
 import java.util.List;
 import java.util.Map;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Extensible property of {@link Node}.
@@ -166,7 +166,7 @@ public Environment setUp( AbstractBuild build, Launcher launcher, BuildListener
      *
      * @since 1.489
      */
-    public void buildEnvVars(@Nonnull EnvVars env, @Nonnull TaskListener listener) throws IOException,InterruptedException {
+    public void buildEnvVars(@NonNull EnvVars env, @NonNull TaskListener listener) throws IOException,InterruptedException {
         // default is no-op
     }
 

File: core/src/main/java/hudson/slaves/NodeSpecific.java
Patch:
@@ -28,7 +28,7 @@
 import hudson.model.EnvironmentSpecific;
 import hudson.model.TaskListener;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 
 /**
@@ -46,5 +46,5 @@ public interface NodeSpecific<T extends NodeSpecific<T>> {
     /**
      * Returns a specialized copy of T for functioning in the given node.
      */
-    T forNode(@Nonnull Node node, TaskListener log) throws IOException, InterruptedException;
+    T forNode(@NonNull Node node, TaskListener log) throws IOException, InterruptedException;
 }

File: core/src/main/java/hudson/slaves/OfflineCause.java
Patch:
@@ -34,7 +34,7 @@
 import org.kohsuke.stapler.export.Exported;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.ObjectStreamException;
 import java.util.Collections;
 import java.util.Date;
@@ -70,7 +70,7 @@ public long getTimestamp() {
      *
      * @since 1.612
      */
-    public final @Nonnull Date getTime() {
+    public final @NonNull Date getTime() {
         return new Date(timestamp);
     }
 

File: core/src/main/java/hudson/slaves/RetentionStrategy.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Controls when to take {@link Computer} offline, bring it back online, or even to destroy it.
@@ -58,7 +58,7 @@ public abstract class RetentionStrategy<T extends Computer> extends AbstractDesc
      *         rechecked earlier or later than this!
      */
     @GuardedBy("hudson.model.Queue.lock")
-    public abstract long check(@Nonnull T c);
+    public abstract long check(@NonNull T c);
 
     /**
      * This method is called to determine whether manual launching of the agent is allowed right now.
@@ -96,7 +96,7 @@ public boolean isAcceptingTasks(T c) {
      * @param c Computer instance
      * @since 1.275
      */
-    public void start(final @Nonnull T c) {
+    public void start(final @NonNull T c) {
         Queue.withLock((Runnable) () -> check(c));
     }
 

File: core/src/main/java/hudson/tasks/BuildStep.java
Patch:
@@ -49,7 +49,7 @@
 import jenkins.security.QueueItemAuthenticator;
 import org.acegisecurity.Authentication;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.Jenkins;
 
 /**
@@ -157,7 +157,7 @@ public interface BuildStep {
      * @return
      *      can be empty but never null.
      */
-    @Nonnull
+    @NonNull
     Collection<? extends Action> getProjectActions(AbstractProject<?,?> project);
 
 

File: core/src/main/java/hudson/tasks/BuildStepCompatibilityLayer.java
Patch:
@@ -42,7 +42,7 @@
 import hudson.model.TaskListener;
 import jenkins.tasks.SimpleBuildStep;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Provides compatibility with {@link BuildStep} before 1.150
@@ -92,7 +92,7 @@ public Action getProjectAction(AbstractProject<?, ?> project) {
             return null;
     }
 
-    @Nonnull
+    @NonNull
     public Collection<? extends Action> getProjectActions(AbstractProject<?, ?> project) {
         // delegate to getJobAction (singular) for backward compatible behavior
         Action a = getProjectAction(project);

File: core/src/main/java/hudson/tasks/BuildTrigger.java
Patch:
@@ -58,7 +58,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.DependencyDeclarer;
 import jenkins.model.Jenkins;
 import jenkins.model.ParameterizedJobMixIn;
@@ -160,8 +160,8 @@ public List<AbstractProject> getChildProjects(ItemGroup base) {
     }
 
     @SuppressWarnings("unchecked")
-    @Nonnull
-    public List<Job<?, ?>> getChildJobs(@Nonnull AbstractProject<?, ?> owner) {
+    @NonNull
+    public List<Job<?, ?>> getChildJobs(@NonNull AbstractProject<?, ?> owner) {
         return Items.fromNameList(owner.getParent(), childProjects, (Class<Job<?, ?>>) (Class) Job.class);
     }
 

File: core/src/main/java/hudson/tasks/CommandInterpreter.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Common part between {@link Shell} and {@link BatchFile}.
@@ -158,7 +158,7 @@ protected int join(Proc p) throws IOException, InterruptedException {
     /**
      * Creates a script file in a temporary name in the specified directory.
      */
-    public FilePath createScriptFile(@Nonnull FilePath dir) throws IOException, InterruptedException {
+    public FilePath createScriptFile(@NonNull FilePath dir) throws IOException, InterruptedException {
         return dir.createTextTempFile("jenkins", getFileExtension(), getContents(), false);
     }
 

File: core/src/main/java/hudson/tasks/Maven.java
Patch:
@@ -69,7 +69,7 @@
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.StaplerRequest;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.File;
 import java.io.IOException;
 import java.io.ObjectStreamException;
@@ -150,7 +150,7 @@ public class Maven extends Builder {
      *
      * @since 2.12
      */
-    private @Nonnull Boolean injectBuildVariables;
+    private @NonNull Boolean injectBuildVariables;
 
     private final static String MAVEN_1_INSTALLATION_COMMON_FILE = "bin/maven";
     private final static String MAVEN_2_INSTALLATION_COMMON_FILE = "bin/mvn";

File: core/src/main/java/hudson/tools/ToolDescriptor.java
Patch:
@@ -44,7 +44,7 @@
 import org.kohsuke.stapler.QueryParameter;
 import org.kohsuke.stapler.StaplerRequest;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * {@link Descriptor} for {@link ToolInstallation}.
@@ -116,7 +116,7 @@ public List<ToolPropertyDescriptor> getPropertyDescriptors() {
 
 
     @Override
-    public @Nonnull GlobalConfigurationCategory getCategory() {
+    public @NonNull GlobalConfigurationCategory getCategory() {
         return GlobalConfigurationCategory.get(ToolConfigurationCategory.class);
     }
 

File: core/src/main/java/hudson/tools/ToolInstallation.java
Patch:
@@ -41,7 +41,7 @@
 import com.thoughtworks.xstream.annotations.XStreamSerializable;
 import com.thoughtworks.xstream.converters.UnmarshallingContext;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.Jenkins;
 
 /**
@@ -165,7 +165,7 @@ public DescribableList<ToolProperty<?>,ToolPropertyDescriptor> getProperties() {
      * @see EnvironmentSpecific
      * @since 1.460
      */
-    public ToolInstallation translate(@Nonnull Node node, EnvVars envs, TaskListener listener) throws IOException, InterruptedException {
+    public ToolInstallation translate(@NonNull Node node, EnvVars envs, TaskListener listener) throws IOException, InterruptedException {
         ToolInstallation t = this;
         if (t instanceof NodeSpecific) {
             NodeSpecific n = (NodeSpecific) t;

File: core/src/main/java/hudson/triggers/TimerTrigger.java
Patch:
@@ -44,7 +44,7 @@
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.QueryParameter;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * {@link Trigger} that runs a job periodically.
@@ -54,7 +54,7 @@
 public class TimerTrigger extends Trigger<BuildableItem> {
 
     @DataBoundConstructor
-    public TimerTrigger(@Nonnull String spec) throws ANTLRException {
+    public TimerTrigger(@NonNull String spec) throws ANTLRException {
         super(spec);
     }
 

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -59,7 +59,7 @@
 
 import antlr.ANTLRException;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 import hudson.model.Items;
 import jenkins.model.ParameterizedJobMixIn;
@@ -165,7 +165,7 @@ public TriggerDescriptor getDescriptor() {
      * periodically. This is useful when your trigger does
      * some polling work.
      */
-    protected Trigger(@Nonnull String cronTabSpec) throws ANTLRException {
+    protected Trigger(@NonNull String cronTabSpec) throws ANTLRException {
         this.spec = cronTabSpec;
         this.tabs = CronTabList.create(cronTabSpec);
     }

File: core/src/main/java/hudson/util/ArgumentListBuilder.java
Patch:
@@ -39,7 +39,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.Set;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Used to build up arguments for a process invocation.
@@ -138,7 +138,7 @@ public ArgumentListBuilder add(String... args) {
     /**
      * @since 2.72
      */
-    public ArgumentListBuilder add(@Nonnull Iterable<String> args) {
+    public ArgumentListBuilder add(@NonNull Iterable<String> args) {
         for (String arg : args) {
             add(arg);
         }

File: core/src/main/java/hudson/util/FormValidation.java
Patch:
@@ -43,7 +43,7 @@
 import org.kohsuke.stapler.Stapler;
 import org.springframework.util.StringUtils;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 
 import java.io.File;
@@ -219,7 +219,7 @@ public static FormValidation warning(Throwable e, String format, Object... args)
      * @return Validation of the least successful kind aggregating all child messages.
      * @since 1.590
      */
-    public static @Nonnull FormValidation aggregate(@Nonnull Collection<FormValidation> validations) {
+    public static @NonNull FormValidation aggregate(@NonNull Collection<FormValidation> validations) {
         if (validations == null || validations.isEmpty()) return FormValidation.ok();
 
         if (validations.size() == 1) return validations.iterator().next();

File: core/src/main/java/hudson/util/Graph.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.Calendar;
 import java.awt.image.BufferedImage;
 import java.awt.*;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.annotation.CheckForNull;
 
 /**
@@ -98,7 +98,7 @@ private BufferedImage render(StaplerRequest req, ChartRenderingInfo info) {
         return graph.createBufferedImage(Integer.parseInt(w),Integer.parseInt(h),info);
     }
 
-    @Nonnull private static Color stringToColor(@CheckForNull String s) {
+    @NonNull private static Color stringToColor(@CheckForNull String s) {
         if (s != null) {
             try {
                 return Color.decode("0x" + s);

File: core/src/main/java/hudson/util/Iterators.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.AbstractList;
 import java.util.Set;
 import java.util.HashSet;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
@@ -413,7 +413,7 @@ public interface CountingPredicate<T> {
      * @param count a nonnegative count
      */
     @Restricted(NoExternalUse.class)
-    public static void skip(@Nonnull Iterator<?> iterator, int count) {
+    public static void skip(@NonNull Iterator<?> iterator, int count) {
         if (count < 0) {
             throw new IllegalArgumentException();
         }

File: core/src/main/java/hudson/util/RemotingDiagnostics.java
Patch:
@@ -41,7 +41,7 @@
 import org.kohsuke.stapler.StaplerResponse;
 import org.kohsuke.stapler.WebMethod;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.management.JMException;
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
@@ -107,7 +107,7 @@ public Map<String,String> call() {
     /**
      * Executes Groovy script remotely.
      */
-    public static String executeGroovy(String script, @Nonnull VirtualChannel channel) throws IOException, InterruptedException {
+    public static String executeGroovy(String script, @NonNull VirtualChannel channel) throws IOException, InterruptedException {
         return channel.call(new Script(script));
     }
 

File: core/src/main/java/hudson/util/RobustReflectionConverter.java
Patch:
@@ -54,7 +54,7 @@
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import static java.util.logging.Level.FINE;
 import java.util.logging.Logger;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.annotation.concurrent.GuardedBy;
 import jenkins.util.xstream.CriticalXStreamException;
 
@@ -75,7 +75,7 @@ public class RobustReflectionConverter implements Converter {
     protected final Mapper mapper;
     protected transient SerializationMethodInvoker serializationMethodInvoker;
     private transient ReflectionProvider pureJavaReflectionProvider;
-    private final @Nonnull XStream2.ClassOwnership classOwnership;
+    private final @NonNull XStream2.ClassOwnership classOwnership;
     /** There are typically few critical fields around, but we end up looking up in this map a lot.
         in addition, this map is really only written to during static initialization, so we should use
         reader writer lock to avoid locking as much as possible.  In addition, to avoid looking up

File: core/src/main/java/hudson/util/SequentialExecutionQueue.java
Patch:
@@ -1,6 +1,6 @@
 package hudson.util;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
@@ -59,7 +59,7 @@ public synchronized void setExecutors(ExecutorService svc) {
     }
 
 
-    public synchronized void execute(@Nonnull Runnable item) {
+    public synchronized void execute(@NonNull Runnable item) {
         QueueEntry e = entries.get(item);
         if(e==null) {
             e = new QueueEntry(item);

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -79,7 +79,7 @@
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * {@link XStream} enhanced for additional Java5 support and improved robustness.
@@ -141,7 +141,7 @@ public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder
      * Even for primitive-valued fields, it is useful to guarantee
      * that unmarshaling will produce the same result as creating a new instance.
      * <p>Do <em>not</em> use in cases where the root objects defines fields (typically {@code final})
-     * which it expects to be {@link Nonnull} unless you are prepared to restore default values for those fields.
+     * which it expects to be {@link NonNull} unless you are prepared to restore default values for those fields.
      * @param nullOut whether to perform this special behavior;
      *                false to use the stock XStream behavior of leaving unmentioned {@code root} fields untouched
      * @see XmlFile#unmarshalNullingOut

File: core/src/main/java/hudson/views/MyViewsTabBar.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.List;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.GlobalConfiguration;
 import jenkins.model.Jenkins;
 import hudson.model.MyViewsProperty;
@@ -77,10 +77,10 @@ public MyViewsTabBarDescriptor getDescriptor() {
      * @return the sorted views
      * @since 2.37
      */
-    @Nonnull
+    @NonNull
     @Restricted(NoExternalUse.class)
     @SuppressWarnings("unused") // invoked from stapler view
-    public List<View> sort(@Nonnull List<? extends View> views) {
+    public List<View> sort(@NonNull List<? extends View> views) {
         List<View> result = new ArrayList<>(views);
         result.sort(new Comparator<View>() {
             @Override

File: core/src/main/java/hudson/views/ViewsTabBar.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.List;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.GlobalConfiguration;
 import jenkins.model.Jenkins;
 import hudson.model.ListView;
@@ -78,10 +78,10 @@ public ViewsTabBarDescriptor getDescriptor() {
      * @return the sorted views
      * @since 2.37
      */
-    @Nonnull
+    @NonNull
     @Restricted(NoExternalUse.class)
     @SuppressWarnings("unused") // invoked from stapler view
-    public List<View> sort(@Nonnull List<? extends View> views) {
+    public List<View> sort(@NonNull List<? extends View> views) {
         List<View> result = new ArrayList<>(views);
         result.sort(new Comparator<View>() {
             @Override

File: core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java
Patch:
@@ -6,7 +6,7 @@
 import java.net.URL;
 import java.util.Enumeration;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.
@@ -76,7 +76,7 @@ private static Object getClassLoadingLock(ClassLoader cl, String name) {
      * Calls {@link ClassLoader#findClass} while holding {@link ClassLoader#getClassLoadingLock}.
      * @since 1.553
      */
-    public static @Nonnull Class<?> _findClass(ClassLoader cl, String name) throws ClassNotFoundException {
+    public static @NonNull Class<?> _findClass(ClassLoader cl, String name) throws ClassNotFoundException {
         synchronized (getClassLoadingLock(cl, name)) {
             return (Class) invoke(FIND_CLASS, ClassNotFoundException.class, cl, name);
         }
@@ -94,7 +94,7 @@ private static Object getClassLoadingLock(ClassLoader cl, String name) {
      * Calls {@link ClassLoader#findResources}.
      * @since 1.553
      */
-    public static @Nonnull Enumeration<URL> _findResources(ClassLoader cl, String name) throws IOException {
+    public static @NonNull Enumeration<URL> _findResources(ClassLoader cl, String name) throws IOException {
         return (Enumeration<URL>) invoke(FIND_RESOURCES, IOException.class, cl, name);
     }
 

File: core/src/main/java/jenkins/MetaLocaleDrivenResourceProvider.java
Patch:
@@ -31,7 +31,7 @@
 import org.kohsuke.stapler.LocaleDrivenResourceProvider;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.net.URL;
 
 /**
@@ -45,7 +45,7 @@ public final class MetaLocaleDrivenResourceProvider extends LocaleDrivenResource
 
     @Override
     @CheckForNull
-    public URL lookup(@Nonnull String s) {
+    public URL lookup(@NonNull String s) {
         for (PluginLocaleDrivenResourceProvider provider : ExtensionList.lookup(PluginLocaleDrivenResourceProvider.class)) {
             try {
                 URL url = provider.lookup(s);

File: core/src/main/java/jenkins/PluginLocaleDrivenResourceProvider.java
Patch:
@@ -26,7 +26,7 @@
 import hudson.ExtensionPoint;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.net.URL;
 
 /**
@@ -44,5 +44,5 @@ public interface PluginLocaleDrivenResourceProvider extends ExtensionPoint {
      * @return URL to the localized resource, or {@code null} if inapplicable.
      */
     @CheckForNull
-    URL lookup(@Nonnull String s);
+    URL lookup(@NonNull String s);
 }

File: core/src/main/java/jenkins/install/InstallState.java
Patch:
@@ -24,7 +24,7 @@
 package jenkins.install;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 import hudson.Extension;
 import hudson.ExtensionList;
@@ -232,7 +232,7 @@ public void initializeState() {
      */
     private final String name;
 
-    public InstallState(@Nonnull String name, boolean isSetupComplete) {
+    public InstallState(@NonNull String name, boolean isSetupComplete) {
         this.name = name;
         this.isSetupComplete = isSetupComplete;
     }
@@ -303,7 +303,7 @@ public String toString() {
      * @return
      */
     @CheckForNull
-    public static InstallState valueOf(@Nonnull String name) {
+    public static InstallState valueOf(@NonNull String name) {
         for (InstallState state : all()) {
             if (name.equals(state.name)) {
                 return state;

File: core/src/main/java/jenkins/install/InstallUtil.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.logging.Logger;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.inject.Provider;
 
 import org.apache.commons.io.FileUtils;
@@ -221,7 +221,7 @@ public static void saveLastExecVersion() {
      * @return The last saved Jenkins instance version.
      * @see #saveLastExecVersion()
      */
-    public static @Nonnull String getLastExecVersion() {
+    public static @NonNull String getLastExecVersion() {
         File lastExecVersionFile = getLastExecVersionFile();
         if (lastExecVersionFile.exists()) {
             try {
@@ -265,7 +265,7 @@ public static void saveLastExecVersion() {
      * Save a specific version as the last execute version.
      * @param version The version to save.
      */
-    static void saveLastExecVersion(@Nonnull String version) {
+    static void saveLastExecVersion(@NonNull String version) {
         File lastExecVersionFile = getLastExecVersionFile();
         try {
             FileUtils.write(lastExecVersionFile, version, Charset.defaultCharset());

File: core/src/main/java/jenkins/management/AsynchronousAdministrativeMonitor.java
Patch:
@@ -16,7 +16,7 @@
 import java.nio.charset.Charset;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Convenient partial implementation of {@link AdministrativeMonitor} that involves a background "fixing" action
@@ -120,7 +120,7 @@ public void run() {
          * Runs the monitor and encapsulates all errors within.
          * @since 1.590
          */
-        private void doRun(@Nonnull TaskListener listener) {
+        private void doRun(@NonNull TaskListener listener) {
             try {
                 fix(listener);
             } catch (AbortException e) {

File: core/src/main/java/jenkins/management/CliLink.java
Patch:
@@ -30,7 +30,7 @@
 import jenkins.model.Jenkins;
 import org.jenkinsci.Symbol;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
@@ -52,7 +52,7 @@ public String getDescription() {
         return Messages.CliLink_Description();
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Permission getRequiredPermission() {
         return Jenkins.MANAGE;
@@ -63,7 +63,7 @@ public String getUrlName() {
         return "cli";
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Category getCategory() {
         return Category.TOOLS;

File: core/src/main/java/jenkins/management/ConfigureLink.java
Patch:
@@ -30,7 +30,7 @@
 import jenkins.model.Jenkins;
 import org.jenkinsci.Symbol;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
@@ -52,7 +52,7 @@ public String getDescription() {
         return Messages.ConfigureLink_Description();
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Permission getRequiredPermission() {
         return Jenkins.READ;
@@ -63,7 +63,7 @@ public String getUrlName() {
         return "configure";
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Category getCategory() {
         return Category.CONFIGURATION;

File: core/src/main/java/jenkins/management/ConsoleLink.java
Patch:
@@ -30,7 +30,7 @@
 import jenkins.model.Jenkins;
 import org.jenkinsci.Symbol;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
@@ -62,7 +62,7 @@ public Permission getRequiredPermission() {
         return Jenkins.ADMINISTER;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Category getCategory() {
         return Category.TOOLS;

File: core/src/main/java/jenkins/management/NodesLink.java
Patch:
@@ -30,7 +30,7 @@
 import jenkins.model.Jenkins;
 import org.jenkinsci.Symbol;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
@@ -52,7 +52,7 @@ public String getDescription() {
         return Messages.NodesLink_Description();
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Permission getRequiredPermission() {
         return Jenkins.MANAGE;
@@ -63,7 +63,7 @@ public String getUrlName() {
         return "computer";
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Category getCategory() {
         return Category.CONFIGURATION;

File: core/src/main/java/jenkins/management/PluginsLink.java
Patch:
@@ -28,7 +28,7 @@
 import hudson.model.ManagementLink;
 import org.jenkinsci.Symbol;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
@@ -55,7 +55,7 @@ public String getUrlName() {
         return "pluginManager";
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Category getCategory() {
         return Category.CONFIGURATION;

File: core/src/main/java/jenkins/management/ReloadLink.java
Patch:
@@ -28,7 +28,7 @@
 import hudson.model.ManagementLink;
 import org.jenkinsci.Symbol;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
@@ -64,7 +64,7 @@ public boolean getRequiresPOST() {
         return true;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Category getCategory() {
         return Category.TOOLS;

File: core/src/main/java/jenkins/management/ShutdownLink.java
Patch:
@@ -29,7 +29,7 @@
 import jenkins.model.Jenkins;
 import org.jenkinsci.Symbol;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
@@ -61,7 +61,7 @@ public boolean getRequiresPOST() {
         return true;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Category getCategory() {
         return Category.TOOLS;

File: core/src/main/java/jenkins/management/StatisticsLink.java
Patch:
@@ -30,7 +30,7 @@
 import jenkins.model.Jenkins;
 import org.jenkinsci.Symbol;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
@@ -52,7 +52,7 @@ public String getDescription() {
         return Messages.StatisticsLink_Description();
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Permission getRequiredPermission() {
         return Jenkins.MANAGE;
@@ -63,7 +63,7 @@ public String getUrlName() {
         return "load-statistics";
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Category getCategory() {
         return Category.STATUS;

File: core/src/main/java/jenkins/management/SystemInfoLink.java
Patch:
@@ -27,7 +27,7 @@
 import hudson.Extension;
 import hudson.model.ManagementLink;
 import hudson.security.Permission;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.Jenkins;
 import org.jenkinsci.Symbol;
 
@@ -51,7 +51,7 @@ public String getDescription() {
         return Messages.SystemInfoLink_Description();
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Permission getRequiredPermission() {
         //This link is displayed to any user with permission to access the management menu
@@ -63,7 +63,7 @@ public String getUrlName() {
         return "systemInfo";
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Category getCategory() {
         return Category.STATUS;

File: core/src/main/java/jenkins/management/SystemLogLink.java
Patch:
@@ -28,7 +28,7 @@
 import hudson.model.ManagementLink;
 import org.jenkinsci.Symbol;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
@@ -55,7 +55,7 @@ public String getUrlName() {
         return "log";
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Category getCategory() {
         return Category.STATUS;

File: core/src/main/java/jenkins/model/ArtifactManager.java
Patch:
@@ -33,7 +33,7 @@
 import hudson.tasks.ArtifactArchiver;
 import java.io.IOException;
 import java.util.Map;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.util.VirtualFile;
 
 /**
@@ -48,7 +48,7 @@ public abstract class ArtifactManager {
      * The selected manager will be persisted inside a build, so the build reference should be {@code transient} (quasi-{@code final}) and restored here.
      * @param build a historical build with which this manager was associated
      */
-    public abstract void onLoad(@Nonnull Run<?,?> build);
+    public abstract void onLoad(@NonNull Run<?,?> build);
 
     /**
      * Archive all configured artifacts from a build.

File: core/src/main/java/jenkins/model/ArtifactManagerConfiguration.java
Patch:
@@ -32,7 +32,7 @@
 import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * List of configured {@link ArtifactManagerFactory}s.
@@ -41,7 +41,7 @@
 @Extension @Symbol("artifactManager")
 public class ArtifactManagerConfiguration extends GlobalConfiguration implements PersistentDescriptor {
     
-    public static @Nonnull ArtifactManagerConfiguration get() {
+    public static @NonNull ArtifactManagerConfiguration get() {
         return GlobalConfiguration.all().getInstance(ArtifactManagerConfiguration.class);
     }
 

File: core/src/main/java/jenkins/model/AssetManager.java
Patch:
@@ -10,7 +10,7 @@
 import org.kohsuke.stapler.StaplerResponse;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
@@ -78,7 +78,7 @@ public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOExceptio
      * look for child classloader first. But to support plugins that get split, if the child classloader
      * doesn't find it, fall back to the parent classloader.
      */
-    private @CheckForNull URL findResource(@Nonnull String path) throws IOException {
+    private @CheckForNull URL findResource(@NonNull String path) throws IOException {
         if (StringUtils.isBlank(path)) {
             return null;
         }

File: core/src/main/java/jenkins/model/BlockedBecauseOfBuildInProgress.java
Patch:
@@ -28,7 +28,7 @@
 import hudson.model.Job;
 import hudson.model.Run;
 import hudson.model.queue.CauseOfBlockage;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Indicates that a new build is blocked because the previous build is already in progress.
@@ -37,14 +37,14 @@
  */
 public class BlockedBecauseOfBuildInProgress extends CauseOfBlockage {
     
-    @Nonnull
+    @NonNull
     private final Run<?, ?> build;
 
     /**
      * Creates a cause for the specified build.
      * @param build Build, which is already in progress
      */
-    public BlockedBecauseOfBuildInProgress(@Nonnull Run<?, ?> build) {
+    public BlockedBecauseOfBuildInProgress(@NonNull Run<?, ?> build) {
         this.build = build;
     }
 

File: core/src/main/java/jenkins/model/FingerprintFacet.java
Patch:
@@ -30,7 +30,7 @@
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
 import java.util.List;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Plugin-specific additions to fingerprint information.
@@ -67,7 +67,7 @@ public abstract class FingerprintFacet implements ExtensionPoint {
      * @param timestamp
      *      Timestamp when the use happened (when the facet has been created).
      */
-    protected FingerprintFacet(@Nonnull Fingerprint fingerprint, long timestamp) {
+    protected FingerprintFacet(@NonNull Fingerprint fingerprint, long timestamp) {
         assert fingerprint!=null;
         this.fingerprint = fingerprint;
         this.timestamp = timestamp;
@@ -79,7 +79,7 @@ protected FingerprintFacet(@Nonnull Fingerprint fingerprint, long timestamp) {
      * @return
      *      always non-null.
      */
-    public @Nonnull Fingerprint getFingerprint() {
+    public @NonNull Fingerprint getFingerprint() {
         return fingerprint;
     }
 

File: core/src/main/java/jenkins/model/GlobalConfiguration.java
Patch:
@@ -7,7 +7,7 @@
 import net.sf.json.JSONObject;
 import org.kohsuke.stapler.StaplerRequest;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Convenient base class for extensions that contributes to the system configuration page but nothing
@@ -71,7 +71,7 @@ public boolean configure(StaplerRequest req, JSONObject json) throws FormExcepti
     /**
      * Returns all the registered {@link GlobalConfiguration} descriptors.
      */
-    public static @Nonnull ExtensionList<GlobalConfiguration> all() {
+    public static @NonNull ExtensionList<GlobalConfiguration> all() {
         return Jenkins.get().getDescriptorList(GlobalConfiguration.class);
         // pointless type parameters help work around bugs in javac in earlier versions http://codepad.org/m1bbFRrH
     }

File: core/src/main/java/jenkins/model/GlobalConfigurationCategory.java
Patch:
@@ -6,7 +6,7 @@
 import hudson.model.ModelObject;
 import org.jenkinsci.Symbol;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Grouping of related {@link GlobalConfiguration}s.
@@ -41,7 +41,7 @@ public static ExtensionList<GlobalConfigurationCategory> all() {
         return ExtensionList.lookup(GlobalConfigurationCategory.class);
     }
 
-    public static @Nonnull <T extends GlobalConfigurationCategory> T get(Class<T> type) {
+    public static @NonNull <T extends GlobalConfigurationCategory> T get(Class<T> type) {
         T category = all().get(type);
         if(category == null){
             throw new AssertionError("Category not found. It seems the " + type + " is not annotated with @Extension and so not registered");

File: core/src/main/java/jenkins/model/GlobalProjectNamingStrategyConfiguration.java
Patch:
@@ -31,7 +31,7 @@
 import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Configures the project naming strategy.
@@ -63,7 +63,7 @@ public boolean configure(StaplerRequest req, JSONObject json) throws hudson.mode
         return true;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Permission getRequiredGlobalConfigPagePermission() {
         return Jenkins.MANAGE;

File: core/src/main/java/jenkins/model/GlobalQuietPeriodConfiguration.java
Patch:
@@ -29,7 +29,7 @@
 import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 
 /**
@@ -60,7 +60,7 @@ public boolean configure(StaplerRequest req, JSONObject json) throws FormExcepti
         }
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Permission getRequiredGlobalConfigPagePermission() {
         return Jenkins.MANAGE;

File: core/src/main/java/jenkins/model/GlobalSCMRetryCountConfiguration.java
Patch:
@@ -30,7 +30,7 @@
 import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 
 /**
@@ -57,7 +57,7 @@ public boolean configure(StaplerRequest req, JSONObject json) throws FormExcepti
         }
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Permission getRequiredGlobalConfigPagePermission() {
         return Jenkins.MANAGE;

File: core/src/main/java/jenkins/model/JobGlobalBuildDiscarderStrategy.java
Patch:
@@ -30,7 +30,7 @@
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.stapler.DataBoundConstructor;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 
 /**
@@ -56,7 +56,7 @@ public void apply(Job<?, ?> job) throws IOException, InterruptedException {
 
     @Extension @Symbol("jobBuildDiscarder")
     public static class DescriptorImpl extends GlobalBuildDiscarderStrategyDescriptor {
-        @Nonnull
+        @NonNull
         @Override
         public String getDisplayName() {
             return Messages.JobGlobalBuildDiscarderStrategy_displayName();

File: core/src/main/java/jenkins/model/RunIdMigrator.java
Patch:
@@ -55,7 +55,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import org.apache.commons.io.Charsets;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang.time.FastDateFormat;
@@ -89,7 +89,7 @@ public final class RunIdMigrator {
      */
     private static final Set<File> offeredToUnmigrate = Collections.synchronizedSet(new HashSet<>());
 
-    private @Nonnull Map<String,Integer> idToNumber = EMPTY;
+    private @NonNull Map<String,Integer> idToNumber = EMPTY;
 
     public RunIdMigrator() {}
 
@@ -290,7 +290,7 @@ static void move(File src, File dest) throws IOException {
      * @param id a nonnumeric ID which may be a valid {@link Run#getId}
      * @return the corresponding {@link Run#number}, or 0 if unknown
      */
-    public synchronized int findNumber(@Nonnull String id) {
+    public synchronized int findNumber(@NonNull String id) {
         Integer number = idToNumber.get(id);
         return number != null ? number : 0;
     }

File: core/src/main/java/jenkins/model/SimpleGlobalBuildDiscarderStrategy.java
Patch:
@@ -30,7 +30,7 @@
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.stapler.DataBoundConstructor;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 
 /**
@@ -65,7 +65,7 @@ public void apply(Job<?, ?> job) throws IOException, InterruptedException {
     @Extension
     @Symbol("simpleBuildDiscarder")
     public static class DescriptorImpl extends GlobalBuildDiscarderStrategyDescriptor {
-        @Nonnull
+        @NonNull
         @Override
         public String getDisplayName() {
             return Messages.SimpleGlobalBuildDiscarderStrategy_displayName();

File: core/src/main/java/jenkins/model/TransientActionFactory.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
@@ -78,7 +78,7 @@ public abstract class TransientActionFactory<T> implements ExtensionPoint {
      * @param target an actionable object
      * @return a possible empty set of actions (typically either using {@link Collections#emptySet} or {@link Collections#singleton})
      */
-    public abstract @Nonnull Collection<? extends Action> createFor(@Nonnull T target);
+    public abstract @NonNull Collection<? extends Action> createFor(@NonNull T target);
 
     /** @see <a href="http://stackoverflow.com/a/24336841/12916">no pairs/tuples in Java</a> */
     private static class CacheKey {

File: core/src/main/java/jenkins/model/identity/InstanceIdentityProvider.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * A source of instance identity.
@@ -151,7 +151,7 @@ private KeyTypes(Class<PUB> pubKeyType, Class<PRIV> privKeyType) {
         @CheckForNull
         @SuppressWarnings("unchecked")
         private static <PUB extends PublicKey, PRIV extends PrivateKey> InstanceIdentityProvider<PUB, PRIV> get(
-                @Nonnull KeyTypes<PUB, PRIV> type) {
+                @NonNull KeyTypes<PUB, PRIV> type) {
             for (InstanceIdentityProvider provider : ExtensionList.lookup(InstanceIdentityProvider.class)) {
                 try {
                     KeyPair keyPair = provider.getKeyPair();

File: core/src/main/java/jenkins/model/item_category/Categories.java
Patch:
@@ -34,7 +34,7 @@
 import org.kohsuke.stapler.export.Flavor;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 import java.io.IOException;
 import java.io.Serializable;
@@ -69,7 +69,7 @@ public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object nod
     }
 
     @CheckForNull
-    public Category getItem(@Nonnull String id) {
+    public Category getItem(@NonNull String id) {
         for (Category category : items) {
             if (category.getId().equals(id)) {
                 return category;

File: core/src/main/java/jenkins/model/item_category/ItemCategory.java
Patch:
@@ -29,7 +29,7 @@
 import hudson.ExtensionPoint;
 import hudson.model.TopLevelItemDescriptor;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
@@ -95,7 +95,7 @@ public int getOrder() {
      *
      * @return A {@link ItemCategory}, if not found, {@link ItemCategory.UncategorizedCategory} is returned
      */
-    @Nonnull
+    @NonNull
     public static ItemCategory getCategory(TopLevelItemDescriptor descriptor) {
         int order = 0;
         ExtensionList<ItemCategory> categories = ExtensionList.lookup(ItemCategory.class);

File: core/src/main/java/jenkins/model/lazy/BuildReference.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.lazy.LazyBuildMixIn.RunMixIn;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
@@ -108,7 +108,7 @@ public interface HolderFactory extends ExtensionPoint {
          * @param referent the thing to load
          * @return a reference, or null to consult the next factory
          */
-        @CheckForNull <R> Holder<R> make(@Nonnull R referent);
+        @CheckForNull <R> Holder<R> make(@NonNull R referent);
 
     }
 

File: core/src/main/java/jenkins/model/lazy/LazyBuildMixIn.java
Patch:
@@ -42,7 +42,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.DoNotUse;
 
@@ -62,7 +62,7 @@ public abstract class LazyBuildMixIn<JobT extends Job<JobT,RunT> & Queue.Task &
     private static final Logger LOGGER = Logger.getLogger(LazyBuildMixIn.class.getName());
 
     @SuppressWarnings("deprecation") // [JENKINS-15156] builds accessed before onLoad or onCreatedFromScratch called
-    private @Nonnull RunMap<RunT> builds = new RunMap<>();
+    private @NonNull RunMap<RunT> builds = new RunMap<>();
 
     /**
      * Initializes this mixin.
@@ -77,7 +77,7 @@ protected LazyBuildMixIn() {}
      * Normally should not be called as such.
      * Note that the initial value is replaced during {@link #onCreatedFromScratch} or {@link #onLoad}.
      */
-    public final @Nonnull RunMap<RunT> getRunMap() {
+    public final @NonNull RunMap<RunT> getRunMap() {
         return builds;
     }
 

File: core/src/main/java/jenkins/model/queue/AsynchronousExecution.java
Patch:
@@ -35,7 +35,7 @@
 import hudson.model.ResourceController;
 import hudson.model.ResourceList;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.annotation.concurrent.GuardedBy;
 import jenkins.model.Jenkins;
 import org.kohsuke.accmod.Restricted;
@@ -112,7 +112,7 @@ public synchronized final Executor getExecutor() {
      * after releasing any problematic locks.
      */
     @Restricted(NoExternalUse.class)
-    public synchronized final void setExecutorWithoutCompleting(@Nonnull Executor executor) {
+    public synchronized final void setExecutorWithoutCompleting(@NonNull Executor executor) {
         assert this.executor == null;
         this.executor = executor;
     }

File: core/src/main/java/jenkins/mvn/GlobalMavenConfig.java
Patch:
@@ -8,7 +8,7 @@
 
 import org.jenkinsci.Symbol;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 //as close as it gets to the global Maven Project configuration
 @Extension(ordinal = 50) @Symbol("maven")
@@ -17,7 +17,7 @@ public class GlobalMavenConfig extends GlobalConfiguration  implements Persisten
     private GlobalSettingsProvider globalSettingsProvider;
 
     @Override
-    public @Nonnull ToolConfigurationCategory getCategory() {
+    public @NonNull ToolConfigurationCategory getCategory() {
         return GlobalConfigurationCategory.get(ToolConfigurationCategory.class);
     }
 
@@ -39,7 +39,7 @@ public SettingsProvider getSettingsProvider() {
         return settingsProvider != null ? settingsProvider : new DefaultSettingsProvider();
     }
 
-    public static @Nonnull GlobalMavenConfig get() {
+    public static @NonNull GlobalMavenConfig get() {
         return GlobalConfiguration.all().getInstance(GlobalMavenConfig.class);
     }
 

File: core/src/main/java/jenkins/security/ClassFilterImpl.java
Patch:
@@ -52,7 +52,7 @@
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import jenkins.model.Jenkins;
 import jenkins.util.SystemProperties;
 import org.apache.commons.io.IOUtils;
@@ -264,7 +264,7 @@ private boolean isLocationWhitelisted(String _loc) {
      * @return something typically like {@code file:/…/plugins/structs/WEB-INF/lib/structs-1.10.jar};
      *         or null for classes in the Java Platform, some generated classes, etc.
      */
-    private static @CheckForNull String codeSource(@Nonnull Class<?> c) {
+    private static @CheckForNull String codeSource(@NonNull Class<?> c) {
         CodeSource cs = c.getProtectionDomain().getCodeSource();
         if (cs == null) {
             return null;

File: core/src/main/java/jenkins/security/ConfidentialStore.java
Patch:
@@ -8,7 +8,7 @@
 import org.kohsuke.MetaInfServices;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 import java.security.SecureRandom;
 import java.util.Iterator;
@@ -61,7 +61,7 @@ public abstract class ConfidentialStore {
     /**
      * Retrieves the currently active singleton instance of {@link ConfidentialStore}.
      */
-    public static @Nonnull ConfidentialStore get() {
+    public static @NonNull ConfidentialStore get() {
         if (TEST!=null) return TEST.get();
 
         Jenkins j = Jenkins.get();

File: core/src/main/java/jenkins/security/QueueItemAuthenticatorProvider.java
Patch:
@@ -4,7 +4,7 @@
 import hudson.ExtensionList;
 import hudson.ExtensionPoint;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
@@ -19,7 +19,7 @@
  */
 public abstract class QueueItemAuthenticatorProvider implements ExtensionPoint {
 
-    @Nonnull
+    @NonNull
     public abstract List<QueueItemAuthenticator> getAuthenticators();
 
     public static Iterable<QueueItemAuthenticator> authenticators() {

File: core/src/main/java/jenkins/security/UserDetailsCache.java
Patch:
@@ -37,7 +37,7 @@
 import org.springframework.dao.DataAccessException;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
@@ -117,7 +117,7 @@ public UserDetails getCached(String idOrFullName) throws UsernameNotFoundExcepti
      * @throws DataAccessException if user could not be found for a repository-specific reason
      * @throws ExecutionException if anything else went wrong in the cache lookup/retrieval
      */
-    @Nonnull
+    @NonNull
     public UserDetails loadUserByUsername(String idOrFullName) throws UsernameNotFoundException, DataAccessException, ExecutionException {
         Boolean exists = existenceCache.getIfPresent(idOrFullName);
         if(exists != null && !exists) {

File: core/src/main/java/jenkins/security/s2m/CallableDirectionChecker.java
Patch:
@@ -13,7 +13,7 @@
 import org.kohsuke.accmod.restrictions.DoNotUse;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Collection;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -46,7 +46,7 @@ private CallableDirectionChecker(Object context) {
     }
 
     @Override
-    public void check(RoleSensitive subject, @Nonnull Collection<Role> expected) throws SecurityException {
+    public void check(RoleSensitive subject, @NonNull Collection<Role> expected) throws SecurityException {
         final String name = subject.getClass().getName();
 
         if (expected.contains(Roles.MASTER)) {

File: core/src/main/java/jenkins/security/s2m/MasterKillSwitchConfiguration.java
Patch:
@@ -2,7 +2,7 @@
 
 import hudson.Extension;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.inject.Inject;
 import jenkins.model.GlobalConfiguration;
 import jenkins.model.GlobalConfigurationCategory;
@@ -25,7 +25,7 @@ public class MasterKillSwitchConfiguration extends GlobalConfiguration {
     Jenkins jenkins;
 
     @Override
-    public @Nonnull GlobalConfigurationCategory getCategory() {
+    public @NonNull GlobalConfigurationCategory getCategory() {
         return GlobalConfigurationCategory.get(GlobalConfigurationCategory.Security.class);
     }
 

File: core/src/main/java/jenkins/security/seed/UserSeedChangeListener.java
Patch:
@@ -30,7 +30,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -47,13 +47,13 @@ public abstract class UserSeedChangeListener extends ExtensionPoint {
      * Called after a seed was changed but before the user is saved.
      * @param user The target user
      */
-    public abstract void onUserSeedRenewed(@Nonnull User user);
+    public abstract void onUserSeedRenewed(@NonNull User user);
 
     /**
      * Will notify all the registered listeners about the event
      * @param user The target user
      */
-    public static void fireUserSeedRenewed(@Nonnull User user) {
+    public static void fireUserSeedRenewed(@NonNull User user) {
         for (UserSeedChangeListener l : all()) {
             try {
                 l.onUserSeedRenewed(user);

File: core/src/main/java/jenkins/security/seed/UserSeedSecurityListener.java
Patch:
@@ -32,7 +32,7 @@
 import org.kohsuke.stapler.Stapler;
 import org.kohsuke.stapler.StaplerRequest;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.http.HttpSession;
 
 /**
@@ -43,12 +43,12 @@
 @Extension(ordinal = Integer.MAX_VALUE)
 public class UserSeedSecurityListener extends SecurityListener {
     @Override 
-    protected void loggedIn(@Nonnull String username) {
+    protected void loggedIn(@NonNull String username) {
         putUserSeedInSession(username, true);
     }
     
     @Override 
-    protected void authenticated(@Nonnull UserDetails details) {
+    protected void authenticated(@NonNull UserDetails details) {
         putUserSeedInSession(details.getUsername(), false);
     }
 

File: core/src/main/java/jenkins/security/stapler/DoActionFilter.java
Patch:
@@ -31,7 +31,7 @@
 import org.kohsuke.stapler.HttpResponse;
 import org.kohsuke.stapler.interceptor.InterceptorAnnotation;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.lang.annotation.Annotation;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -49,7 +49,7 @@ public class DoActionFilter implements FunctionList.Filter {
      */
     private static final Pattern DO_METHOD_REGEX = Pattern.compile("^do[^a-z].*");
     
-    public boolean keep(@Nonnull Function m) {
+    public boolean keep(@NonNull Function m) {
 
         if (m.getAnnotation(StaplerNotDispatchable.class) != null) {
             return false;

File: core/src/main/java/jenkins/security/stapler/RoutingDecisionProvider.java
Patch:
@@ -25,7 +25,7 @@
 
 import hudson.ExtensionPoint;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 public abstract class RoutingDecisionProvider implements ExtensionPoint {
     enum Decision {
@@ -34,5 +34,5 @@ enum Decision {
         UNKNOWN
     }
 
-    @Nonnull public abstract Decision decide(@Nonnull String signature);
+    @NonNull public abstract Decision decide(@NonNull String signature);
 }

File: core/src/main/java/jenkins/slaves/JnlpAgentReceiver.java
Patch:
@@ -5,7 +5,7 @@
 import hudson.Util;
 import hudson.model.Slave;
 import java.security.SecureRandom;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 import jenkins.agents.WebSocketAgents;
 import jenkins.security.HMACConfidentialKey;
@@ -70,7 +70,7 @@ public boolean exists(String clientName) {
         }
 
         @Override
-        public String getSecretOf(@Nonnull String clientName) {
+        public String getSecretOf(@NonNull String clientName) {
             return SLAVE_SECRET.mac(clientName);
         }
     }

File: core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvent.java
Patch:
@@ -24,7 +24,7 @@
 
 package jenkins.telemetry.impl.java11;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 
@@ -53,7 +53,7 @@ void setClassName(String className) {
         this.className = className;
     }
 
-    MissingClassEvent(@Nonnull String name, @Nonnull Throwable t) {
+    MissingClassEvent(@NonNull String name, @NonNull Throwable t) {
         this.className = name;
 
         StringWriter stackTrace = new StringWriter();

File: core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvents.java
Patch:
@@ -26,7 +26,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
@@ -54,7 +54,7 @@ public class MissingClassEvents {
      * @return the occurrences stored for this throwable. 1 the fist time it's stored. &gt; 1 for successive stores of the
      * same <strong>stack trace</strong>. 0 if we already stored MAX_EVENTS_PER_SEND (100) events for a single send.
      */
-    public long put(String name, @Nonnull Throwable t) {
+    public long put(String name, @NonNull Throwable t) {
         // A final object to pass it to the function
         final AtomicLong occurrences = new AtomicLong();
 
@@ -92,7 +92,7 @@ public long put(String name, @Nonnull Throwable t) {
      */
 
     @VisibleForTesting
-    /* package */ synchronized @Nonnull ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> getEventsAndClean() {
+    /* package */ synchronized @NonNull ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> getEventsAndClean() {
         ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> currentEvents = events;
         events = new ConcurrentHashMap<>(MAX_EVENTS_PER_SEND);
         return currentEvents;

File: core/src/main/java/jenkins/tools/GlobalToolConfiguration.java
Patch:
@@ -39,7 +39,7 @@
 import org.kohsuke.stapler.StaplerResponse;
 import org.kohsuke.stapler.verb.POST;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletException;
 import java.io.IOException;
 import java.util.logging.Level;
@@ -74,7 +74,7 @@ public Permission getRequiredPermission() {
         return Jenkins.ADMINISTER;
     }
 
-    @Nonnull
+    @NonNull
     @Override
     public Category getCategory() {
         return Category.CONFIGURATION;

File: core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java
Patch:
@@ -75,7 +75,7 @@
 import org.kohsuke.stapler.QueryParameter;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Like {@link BuildTrigger} but defined on the downstream project.
@@ -181,7 +181,7 @@ private boolean shouldTrigger(Run upstreamBuild, TaskListener listener) {
         }
     }
 
-    @Override public void start(@Nonnull Job project, boolean newInstance) {
+    @Override public void start(@NonNull Job project, boolean newInstance) {
         super.start(project, newInstance);
         RunListenerImpl.get().invalidateCache();
     }
@@ -270,7 +270,7 @@ private Map<Job,Collection<ReverseBuildTrigger>> calculateCache() {
             }
         }
 
-        @Override public void onCompleted(@Nonnull Run r, @Nonnull TaskListener listener) {
+        @Override public void onCompleted(@NonNull Run r, @NonNull TaskListener listener) {
             Collection<ReverseBuildTrigger> triggers;
             synchronized (this) {
                 if (upstream2Trigger == null) {

File: core/src/main/java/jenkins/util/ProgressiveRendering.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.http.HttpServletRequest;
 import net.sf.json.JSON;
 import net.sf.json.JSONObject;
@@ -224,7 +224,7 @@ private static void setCurrentRequest(RequestImpl request) {
      * on the same monitor such as {@code this}.
      * @return any JSON data you like
      */
-    protected abstract @Nonnull JSON data();
+    protected abstract @NonNull JSON data();
 
     /**
      * Indicate what portion of the work has been done.

File: core/src/main/java/jenkins/util/SystemProperties.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletContextEvent;
 import javax.servlet.ServletContextListener;
@@ -87,7 +87,7 @@ private interface Handler {
 
     private static final Handler NULL_HANDLER = key -> null;
 
-    private static @Nonnull Handler handler = NULL_HANDLER;
+    private static @NonNull Handler handler = NULL_HANDLER;
 
     // declared in WEB-INF/web.xml
     public static final class Listener implements ServletContextListener, OnMaster {

File: core/src/main/java/jenkins/util/Timer.java
Patch:
@@ -4,7 +4,7 @@
 import hudson.util.ClassLoaderSanityThreadFactory;
 import hudson.util.DaemonThreadFactory;
 import hudson.util.NamingThreadFactory;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.concurrent.ScheduledExecutorService;
 import jenkins.security.ImpersonatingScheduledExecutorService;
 
@@ -38,7 +38,7 @@ public class Timer {
      *
      * @return the single {@link ScheduledExecutorService}.
      */
-    @Nonnull
+    @NonNull
     public static synchronized ScheduledExecutorService get() {
         if (executorService == null) {
             // corePoolSize is set to 10, but will only be created if needed.

File: core/src/main/java/jenkins/util/groovy/GroovyHookScript.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.TreeSet;
 import static java.util.logging.Level.WARNING;
 import java.util.logging.Logger;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.ServletContext;
 import jenkins.model.Jenkins;
 
@@ -53,7 +53,7 @@ private GroovyHookScript(String hook, Jenkins j) {
         this(hook, j.servletContext, j.getRootDir(), j.getPluginManager().uberClassLoader);
     }
 
-    public GroovyHookScript(String hook, @Nonnull ServletContext servletContext, @Nonnull File home, @Nonnull ClassLoader loader) {
+    public GroovyHookScript(String hook, @NonNull ServletContext servletContext, @NonNull File home, @NonNull ClassLoader loader) {
         this.hook = hook;
         this.servletContext = servletContext;
         this.home = home;

File: core/src/main/java/jenkins/util/io/CompositeIOException.java
Patch:
@@ -27,7 +27,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 import java.io.UncheckedIOException;
 import java.util.Arrays;
@@ -37,7 +37,7 @@
 public class CompositeIOException extends IOException {
     private final List<IOException> exceptions;
 
-    public CompositeIOException(String message, @Nonnull List<IOException> exceptions) {
+    public CompositeIOException(String message, @NonNull List<IOException> exceptions) {
         super(message);
         this.exceptions = exceptions;
         exceptions.forEach(this::addSuppressed);

File: core/src/main/java/jenkins/util/io/LinesStream.java
Patch:
@@ -35,7 +35,7 @@
 import java.nio.file.Path;
 import java.util.Iterator;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
@@ -63,7 +63,7 @@
 @CleanupObligation
 public class LinesStream implements Closeable, Iterable<String> {
 
-    private final @Nonnull BufferedReader in;
+    private final @NonNull BufferedReader in;
     private transient @Nullable Iterator<String> iterator;
 
     /**
@@ -73,7 +73,7 @@ public class LinesStream implements Closeable, Iterable<String> {
      * @throws IOException if the file at {@code path} cannot be opened for
      * reading.
      */
-    public LinesStream(@Nonnull Path path) throws IOException {
+    public LinesStream(@NonNull Path path) throws IOException {
         in = Files.newBufferedReader(path); // uses UTF-8 by default
     }
 

File: core/src/main/java/jenkins/widgets/HistoryPageEntry.java
Patch:
@@ -26,7 +26,7 @@
 import hudson.model.Queue;
 import hudson.model.Run;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * Represents an entry used by the {@link HistoryPageFilter}.
@@ -54,7 +54,7 @@ public long getEntryId() {
         return getEntryId(entry);
     }
 
-    protected static long getEntryId(@Nonnull Object entry) {
+    protected static long getEntryId(@NonNull Object entry) {
         if (entry instanceof Queue.Item) {
             return ((Queue.Item) entry).getId();
         } else if (entry instanceof Run) {

File: core/src/test/java/hudson/model/FingerprintCleanupThreadTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import org.junit.Test;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.IOException;
@@ -112,7 +112,7 @@ private class TestTaskListener implements TaskListener {
         private ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
         private PrintStream logStream = new PrintStream(outputStream);
 
-        @Nonnull
+        @NonNull
         @Override
         public PrintStream getLogger() {
             return logStream;

File: core/src/test/java/jenkins/util/io/FileLockerRule.java
Patch:
@@ -27,7 +27,7 @@
 import hudson.Functions;
 import org.junit.rules.ExternalResource;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.Closeable;
 import java.io.File;
 import java.io.FileInputStream;
@@ -65,14 +65,14 @@ protected void after() {
             throw new CompositeIOException("Could not unlock all files", exceptions).asUncheckedIOException();
     }
 
-    public synchronized void acquireLock(@Nonnull File file) throws IOException {
+    public synchronized void acquireLock(@NonNull File file) throws IOException {
         assertTrue(Functions.isWindows());
         assertThat(file + " is already locked.", locks, not(hasKey(file)));
         Closeable lock = new FileInputStream(file);
         locks.put(file, lock);
     }
 
-    public synchronized void releaseLock(@Nonnull File file) throws Exception {
+    public synchronized void releaseLock(@NonNull File file) throws Exception {
         assertTrue(Functions.isWindows());
         assertThat(file + " is not locked.", locks, hasKey(file));
         locks.remove(file).close();

File: test/src/test/java/hudson/scm/AbstractScmTagActionTest.java
Patch:
@@ -39,7 +39,7 @@
 import org.jvnet.hudson.test.JenkinsRule;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.File;
 import java.io.IOException;
 
@@ -109,7 +109,7 @@ public ChangeLogParser createChangeLogParser() {
         }
 
         @Override
-        public void checkout(@Nonnull Run<?, ?> build, @Nonnull Launcher launcher, @Nonnull FilePath workspace, @Nonnull TaskListener listener, @CheckForNull File changelogFile, @CheckForNull SCMRevisionState baseline) throws IOException, InterruptedException {
+        public void checkout(@NonNull Run<?, ?> build, @NonNull Launcher launcher, @NonNull FilePath workspace, @NonNull TaskListener listener, @CheckForNull File changelogFile, @CheckForNull SCMRevisionState baseline) throws IOException, InterruptedException {
             build.addAction(new TooltipTagAction(build, desiredTooltip));
         }
     }

File: test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java
Patch:
@@ -70,7 +70,7 @@
 import org.jvnet.hudson.test.WithoutJenkins;
 import org.mindrot.jbcrypt.BCrypt;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 @For({UserSeedProperty.class, HudsonPrivateSecurityRealm.class})
 public class HudsonPrivateSecurityRealmTest {
@@ -424,12 +424,12 @@ public static class SpySecurityListenerImpl extends SecurityListener {
         private List<String> createdUsers = new ArrayList<String>();
 
         @Override
-        protected void loggedIn(@Nonnull String username) {
+        protected void loggedIn(@NonNull String username) {
             loggedInUsernames.add(username);
         }
 
         @Override
-        protected void userCreated(@Nonnull String username) { createdUsers.add(username); }
+        protected void userCreated(@NonNull String username) { createdUsers.add(username); }
     }
 
     @Issue("SECURITY-786")

File: test/src/test/java/hudson/slaves/CloudTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.jvnet.hudson.test.WithoutJenkins;
 import org.kohsuke.stapler.StaplerResponse;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.Collection;
@@ -98,7 +98,7 @@ public static final class CloudActionFactory extends TransientActionFactory<Clou
             return Cloud.class;
         }
 
-        @Nonnull @Override public Collection<? extends Action> createFor(@Nonnull Cloud target) {
+        @NonNull @Override public Collection<? extends Action> createFor(@NonNull Cloud target) {
             return Arrays.asList(new TaskCloudAction(), new ReportingCloudAction());
         }
     }

File: test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java
Patch:
@@ -42,7 +42,7 @@
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockAuthorizationStrategy;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 import java.lang.reflect.Field;
 import java.net.HttpURLConnection;
@@ -166,7 +166,7 @@ public Object callFunction(HtmlPage page, Function function, Scriptable scope, S
             return super.callFunction(page, function, scope, thisObject, args);
         }
         
-        @Nonnull
+        @NonNull
         public XMLHttpRequest getLastRequest() {
             if (storedRequests.isEmpty()) {
                 fail("There is no available requests for the proposed url/method");

File: test/src/test/java/jenkins/model/TransientActionFactoryTest.java
Patch:
@@ -49,7 +49,7 @@
 import org.jvnet.hudson.test.MockFolder;
 import org.jvnet.hudson.test.TestExtension;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 import static org.hamcrest.Matchers.empty;
 import static org.hamcrest.Matchers.hasSize;
@@ -178,9 +178,9 @@ public Class<Actionable> type() {
             return Actionable.class;
         }
 
-        @Nonnull
+        @NonNull
         @Override
-        public Collection<? extends Action> createFor(@Nonnull Actionable target) {
+        public Collection<? extends Action> createFor(@NonNull Actionable target) {
             return Collections.singleton(new MyProminentProjectAction());
         }
     }

File: test/src/test/java/jenkins/security/ApiTokenPropertyTest.java
Patch:
@@ -43,7 +43,7 @@
 import java.util.concurrent.Callable;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.recipes.LocalData;
 
@@ -175,7 +175,7 @@ public void postWithUsernameAndTokenInBasicAuthHeader() throws Exception {
         assertEquals("foo", triggeredBy.getUserId());
     }
 
-    @Nonnull
+    @NonNull
     private WebClient createClientForUser(final String id) throws Exception {
         User u = User.getById(id, true);
         

File: test/src/test/java/jenkins/security/seed/UserSeedChangeListenerTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.TestExtension;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 import java.net.URL;
 
@@ -88,7 +88,7 @@ public static class TestUserSeedChangeListener extends UserSeedChangeListener {
         boolean userWasNull;
         
         @Override 
-        public void onUserSeedRenewed(@Nonnull User user) {
+        public void onUserSeedRenewed(@NonNull User user) {
             if (user == null) {
                 userWasNull = true; 
             }

File: test/src/test/java/jenkins/security/stapler/CustomRoutingDecisionProviderTest.java
Patch:
@@ -36,7 +36,7 @@
 import org.kohsuke.stapler.WebMethod;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.io.IOException;
 
 import static org.hamcrest.CoreMatchers.is;
@@ -52,7 +52,7 @@ public class CustomRoutingDecisionProviderTest {
     @TestExtension("customRoutingWhitelistProvider")
     public static class XxxBlacklister extends RoutingDecisionProvider {
         @Override
-        public Decision decide(@Nonnull String signature) {
+        public Decision decide(@NonNull String signature) {
             if (signature.contains("xxx")) {
                 return Decision.REJECTED;
             }

File: test/src/test/java/jenkins/security/stapler/PreventRoutingTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.List;
 
 public class PreventRoutingTest extends StaplerAbstractTest {
@@ -102,7 +102,7 @@ public Renderable getLegitRoutable2(){
         }
     }
     
-    private static void notStaplerGetter(@Nonnull Object o){
+    private static void notStaplerGetter(@NonNull Object o){
         StaplerRequest req = Stapler.getCurrentRequest();
         if (req != null) {
             List<Ancestor> ancestors = req.getAncestors();

File: test/src/test/java/jenkins/triggers/TriggerTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.LoggerRule;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -53,7 +53,7 @@ public static class BadTimerTrigger extends TimerTrigger {
 
         private static final Logger LOGGER = Logger.getLogger(BadTimerTrigger.class.getName());
 
-        BadTimerTrigger(@Nonnull final String specs) throws ANTLRException {
+        BadTimerTrigger(@NonNull final String specs) throws ANTLRException {
             super(specs);
         }
 

File: test/src/test/java/org/kohsuke/stapler/MockStaplerRequestBuilder.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javax.servlet.http.HttpServletRequest;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.mockito.Mockito;
@@ -45,7 +45,7 @@ public class MockStaplerRequestBuilder{
     final Map<String,Object> getters = new HashMap<>();
     private Stapler stapler;
     
-    public MockStaplerRequestBuilder(@Nonnull JenkinsRule r, String url) {
+    public MockStaplerRequestBuilder(@NonNull JenkinsRule r, String url) {
         this.r = r;
         this.tokens = new TokenList(url);
     }

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -92,7 +92,7 @@
 import org.kohsuke.stapler.interceptor.RequirePOST;
 import org.kohsuke.stapler.verb.POST;
 
-import javax.annotation.OverridingMethodsMustInvokeSuper;
+import edu.umd.cs.findbugs.annotations.OverrideMustInvoke;
 import javax.annotation.concurrent.GuardedBy;
 import javax.servlet.ServletException;
 
@@ -1626,7 +1626,7 @@ public Object getTarget() {
      * @see hudson.slaves.RetentionStrategy#isAcceptingTasks(Computer)
      * @see hudson.model.Node#isAcceptingTasks()
      */
-    @OverridingMethodsMustInvokeSuper
+    @OverrideMustInvoke
     public boolean isAcceptingTasks() {
         final Node node = getNode();
         return getRetentionStrategy().isAcceptingTasks(this) && (node == null || node.isAcceptingTasks());

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -78,7 +78,7 @@
 import javax.annotation.CheckForNull;
 import edu.umd.cs.findbugs.annotations.CheckReturnValue;
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
+import edu.umd.cs.findbugs.annotations.OverrideMustInvoke;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -171,7 +171,7 @@ private OutputStream decorate(OutputStream os) {
     }
 
     @Override
-    @OverridingMethodsMustInvokeSuper
+    @OverrideMustInvoke
     public boolean isAcceptingTasks() {
         // our boolean flag is an override on any additional programmatic reasons why this agent might not be
         // accepting tasks.

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -109,7 +109,7 @@
 import java.util.regex.Pattern;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import jenkins.FilePathFilter;
 import jenkins.MasterToSlaveFileCallable;
 import jenkins.SlaveToMasterFileCallable;

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -132,7 +132,7 @@
 import java.util.logging.SimpleFormatter;
 import java.util.regex.Pattern;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.servlet.ServletException;
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;

File: core/src/main/java/hudson/TcpSlaveAgentListener.java
Patch:
@@ -29,7 +29,7 @@
 import java.io.Writer;
 import java.nio.charset.StandardCharsets;
 import java.security.interfaces.RSAPublicKey;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 import hudson.model.AperiodicWork;
 import hudson.util.VersionNumber;

File: core/src/main/java/hudson/Util.java
Patch:
@@ -87,7 +87,7 @@
 
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
 

File: core/src/main/java/hudson/model/Actionable.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import jenkins.model.ModelObjectWithContextMenu;
 import jenkins.model.TransientActionFactory;
 import org.kohsuke.stapler.StaplerRequest;

File: core/src/main/java/hudson/model/ChoiceParameterDefinition.java
Patch:
@@ -15,7 +15,7 @@
 
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Arrays;

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -120,7 +120,7 @@
 
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 import static javax.servlet.http.HttpServletResponse.*;
 

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -83,7 +83,7 @@
 import java.util.IdentityHashMap;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * Metadata about a configurable instance.

File: core/src/main/java/hudson/model/Hudson.java
Patch:
@@ -51,7 +51,7 @@
 import java.util.List;
 
 import static hudson.Util.fixEmpty;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 public class Hudson extends Jenkins {
 

File: core/src/main/java/hudson/model/TimeZoneProperty.java
Patch:
@@ -5,7 +5,7 @@
 import hudson.util.ListBoxModel.Option;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.IOException;
 import java.util.TimeZone;
 import java.util.logging.Logger;

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -63,7 +63,7 @@
 import java.util.regex.PatternSyntaxException;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 import io.jenkins.lib.versionnumber.JavaSpecificationVersion;
 import jenkins.model.Jenkins;

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -64,7 +64,7 @@
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletResponse;
 

File: core/src/main/java/hudson/model/labels/LabelAtom.java
Patch:
@@ -57,7 +57,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * Atomic single token label, like "foo" or "bar".

File: core/src/main/java/hudson/scm/SCM.java
Patch:
@@ -58,7 +58,7 @@
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import jenkins.model.Jenkins;
 import jenkins.util.SystemProperties;
 import org.kohsuke.stapler.export.Exported;

File: core/src/main/java/hudson/util/AtomicFileWriter.java
Patch:
@@ -26,7 +26,7 @@
 import jenkins.util.SystemProperties;
 
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;

File: core/src/main/java/jenkins/SoloFilePathFilter.java
Patch:
@@ -2,7 +2,7 @@
 
 import hudson.FilePath;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.File;
 
 /**

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -252,7 +252,7 @@
 
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.crypto.SecretKey;
 import javax.servlet.RequestDispatcher;
 import javax.servlet.ServletContext;

File: core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java
Patch:
@@ -14,7 +14,7 @@
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.stapler.QueryParameter;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.mail.internet.AddressException;
 import javax.mail.internet.InternetAddress;
 import javax.servlet.ServletContext;

File: core/src/main/java/jenkins/model/lazy/BuildReferenceMapAdapter.java
Patch:
@@ -4,7 +4,7 @@
 import hudson.util.AdaptedIterator;
 import hudson.util.Iterators;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.lang.reflect.Array;
 import java.util.ArrayList;
 import java.util.Collection;

File: core/src/main/java/jenkins/security/ChannelConfigurator.java
Patch:
@@ -6,7 +6,7 @@
 import hudson.remoting.ChannelBuilder;
 import hudson.slaves.SlaveComputer;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * Intercepts the new creation of {@link Channel} and tweak its configuration.

File: core/src/main/java/jenkins/security/ResourceDomainRootAction.java
Patch:
@@ -44,7 +44,7 @@
 
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.time.Instant;

File: core/src/main/java/jenkins/security/apitoken/ApiTokenStore.java
Patch:
@@ -34,7 +34,7 @@
 
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.annotation.concurrent.Immutable;
 import java.io.Serializable;
 import java.nio.charset.StandardCharsets;

File: core/src/main/java/jenkins/security/apitoken/LegacyApiTokenAdministrativeMonitor.java
Patch:
@@ -37,7 +37,7 @@
 import org.kohsuke.stapler.json.JsonBody;
 
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.IOException;
 import java.util.Date;
 import java.util.List;

File: core/src/main/java/jenkins/security/s2m/AdminFilePathFilter.java
Patch:
@@ -6,7 +6,7 @@
 import jenkins.ReflectiveFilePathFilter;
 import jenkins.security.ChannelConfigurator;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import javax.inject.Inject;
 import java.io.File;
 

File: core/src/main/java/jenkins/util/io/LinesStream.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.Iterator;
 
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
 /**
  * Represents a stream over the lines of a text file.

File: core/src/test/java/hudson/util/AtomicFileWriterTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.rules.TemporaryFolder;
 import org.jvnet.hudson.test.Issue;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.io.File;
 import java.io.IOException;
 import java.nio.charset.Charset;

File: test/src/test/java/hudson/tools/ZipExtractionInstallerTest.java
Patch:
@@ -43,7 +43,7 @@
 import org.jvnet.hudson.test.MockAuthorizationStrategy;
 
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
 import java.lang.reflect.Field;
 import java.net.HttpURLConnection;
 import java.net.URL;

File: core/src/main/java/hudson/console/AnnotatedLargeText.java
Patch:
@@ -55,7 +55,7 @@
 import com.jcraft.jzlib.GZIPOutputStream;
 
 import static java.lang.Math.abs;
-import javax.annotation.CheckReturnValue;
+import edu.umd.cs.findbugs.annotations.CheckReturnValue;
 import org.jenkinsci.remoting.util.AnonymousClassWarnings;
 
 /**

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -76,7 +76,7 @@
 import org.kohsuke.stapler.interceptor.RequirePOST;
 
 import javax.annotation.CheckForNull;
-import javax.annotation.CheckReturnValue;
+import edu.umd.cs.findbugs.annotations.CheckReturnValue;
 import javax.annotation.Nonnull;
 import javax.annotation.OverridingMethodsMustInvokeSuper;
 import java.io.File;

File: core/src/main/java/jenkins/security/s2m/AdminWhitelistRule.java
Patch:
@@ -16,7 +16,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.interceptor.RequirePOST;
 
-import javax.annotation.CheckReturnValue;
+import edu.umd.cs.findbugs.annotations.CheckReturnValue;
 import javax.annotation.Nonnull;
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;

File: core/src/main/java/hudson/AboutJenkins.java
Patch:
@@ -44,7 +44,7 @@ public URL getLicensesURL() {
     @Nonnull
     @Override
     public Permission getRequiredPermission() {
-        return Jenkins.SYSTEM_READ;
+        return Jenkins.READ;
     }
 
     @Nonnull

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -440,7 +440,7 @@ public String getDisplayName() {
     }
 
     public Api getApi() {
-        Jenkins.get().checkPermission(Jenkins.SYSTEM_READ);
+        Jenkins.get().checkAnyPermission(Jenkins.SYSTEM_READ, Jenkins.MANAGE);
         return new Api(this);
     }
 

File: core/src/main/java/hudson/ExtensionList.java
Patch:
@@ -309,7 +309,7 @@ public T getDynamic(String className) {
     private List<ExtensionComponent<T>> ensureLoaded() {
         if(extensions!=null)
             return extensions; // already loaded
-        if (jenkins.getInitLevel().compareTo(InitMilestone.PLUGINS_PREPARED)<0)
+        if (jenkins == null || jenkins.getInitLevel().compareTo(InitMilestone.PLUGINS_PREPARED) < 0)
             return legacyInstances; // can't perform the auto discovery until all plugins are loaded, so just make the legacy instances visible
 
         synchronized (getLoadLock()) {

File: test/src/test/java/jenkins/model/JenkinsManagePermissionTest.java
Patch:
@@ -190,7 +190,7 @@ public void managePermissionCanChangeUsageStatistics() throws Exception {
         form.getInputByName("_.usageStatisticsCollected").setChecked(!previousValue);
         j.submit(form);
 
-        assertThat("Can set UsageStadistics", j.jenkins.isUsageStatisticsCollected(), not(previousValue));
+        assertThat("Can set UsageStatistics", j.jenkins.isUsageStatisticsCollected(), not(previousValue));
     }
 
     private String getShell() {

File: core/src/main/java/hudson/ExtensionList.java
Patch:
@@ -309,7 +309,7 @@ public T getDynamic(String className) {
     private List<ExtensionComponent<T>> ensureLoaded() {
         if(extensions!=null)
             return extensions; // already loaded
-        if (jenkins.getInitLevel().compareTo(InitMilestone.PLUGINS_PREPARED)<0)
+        if (jenkins != null && jenkins.getInitLevel().compareTo(InitMilestone.PLUGINS_PREPARED) < 0)
             return legacyInstances; // can't perform the auto discovery until all plugins are loaded, so just make the legacy instances visible
 
         synchronized (getLoadLock()) {

File: core/src/main/java/hudson/DescriptorExtensionList.java
Patch:
@@ -140,9 +140,8 @@ public D find(Class<? extends T> type) {
     public T newInstanceFromRadioList(JSONObject config) throws FormException {
         if(config.isNullObject())
             return null;    // none was selected
-        String descriptorId = config.getString("value");
-        Descriptor<T> d = findByName(descriptorId);
-        return d != null ? d.newInstance(Stapler.getCurrentRequest(),config) : null;
+        int idx = config.getInt("value");
+        return get(idx).newInstance(Stapler.getCurrentRequest(),config);
     }
 
     public T newInstanceFromRadioList(JSONObject parent, String name) throws FormException {

File: core/src/main/java/hudson/util/DescriptorList.java
Patch:
@@ -158,9 +158,8 @@ private List<Descriptor<T>> store() {
     public T newInstanceFromRadioList(JSONObject config) throws FormException {
         if(config.isNullObject())
             return null;    // none was selected
-        String descriptorId = config.getString("value");
-        Descriptor<T> d = findByName(descriptorId);
-        return d != null ? d.newInstance(Stapler.getCurrentRequest(),config) : null;
+        int idx = config.getInt("value");
+        return get(idx).newInstance(Stapler.getCurrentRequest(),config);
     }
 
     /**

File: core/src/main/java/hudson/DescriptorExtensionList.java
Patch:
@@ -140,8 +140,9 @@ public D find(Class<? extends T> type) {
     public T newInstanceFromRadioList(JSONObject config) throws FormException {
         if(config.isNullObject())
             return null;    // none was selected
-        int idx = config.getInt("value");
-        return get(idx).newInstance(Stapler.getCurrentRequest(),config);
+        String descriptorId = config.getString("value");
+        Descriptor<T> d = findByName(descriptorId);
+        return d != null ? d.newInstance(Stapler.getCurrentRequest(),config) : null;
     }
 
     public T newInstanceFromRadioList(JSONObject parent, String name) throws FormException {

File: core/src/main/java/hudson/util/DescriptorList.java
Patch:
@@ -158,8 +158,9 @@ private List<Descriptor<T>> store() {
     public T newInstanceFromRadioList(JSONObject config) throws FormException {
         if(config.isNullObject())
             return null;    // none was selected
-        int idx = config.getInt("value");
-        return get(idx).newInstance(Stapler.getCurrentRequest(),config);
+        String descriptorId = config.getString("value");
+        Descriptor<T> d = findByName(descriptorId);
+        return d != null ? d.newInstance(Stapler.getCurrentRequest(),config) : null;
     }
 
     /**

File: test/src/test/java/hudson/tasks/BuildTriggerTest.java
Patch:
@@ -71,6 +71,7 @@
 import org.junit.Assume;
 import org.junit.Before;
 import org.junit.ClassRule;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.BuildWatcher;
@@ -185,11 +186,13 @@ private void doMavenTriggerTest(boolean evenWhenUnstable) throws Exception {
     }
 
     @Test
+    @Ignore("Fails on CI due to maven trying to download from maven central on http, which is no longer supported")
     public void mavenBuildTrigger() throws Exception {
         doMavenTriggerTest(false);
     }
 
     @Test
+    @Ignore("Fails on CI due to maven trying to download from maven central on http, which is no longer supported")
     public void mavenTriggerEvenWhenUnstable() throws Exception {
         doMavenTriggerTest(true);
     }

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -1257,8 +1257,7 @@ void save(File file) throws IOException {
             file.getParentFile().mkdirs();
             // JENKINS-16301: fast path for the common case.
             AtomicFileWriter afw = new AtomicFileWriter(file);
-            try {
-                PrintWriter w = new PrintWriter(afw);
+            try (PrintWriter w = new PrintWriter((afw))) {
                 w.println("<?xml version='1.1' encoding='UTF-8'?>");
                 w.println("<fingerprint>");
                 w.print("  <timestamp>");

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -46,6 +46,8 @@
 import hudson.util.NamingThreadFactory;
 import hudson.util.SequentialExecutionQueue;
 import hudson.util.StreamTaskListener;
+
+import java.util.Arrays;
 import java.util.concurrent.TimeUnit;
 import java.io.File;
 import java.io.IOException;
@@ -557,7 +559,7 @@ public Runner(Action[] actions) {
             if (actions == null) {
                 additionalActions = new Action[0];
             } else {
-                additionalActions = actions;
+                additionalActions = Arrays.copyOf(actions, actions.length);
             }
         }
         

File: core/src/main/java/hudson/util/Retrier.java
Patch:
@@ -5,6 +5,7 @@
 
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
+import java.util.Arrays;
 import java.util.concurrent.Callable;
 import java.util.function.BiFunction;
 import java.util.function.BiPredicate;
@@ -144,7 +145,7 @@ public static class Builder <V> {
          * @return this builder
          */
         public @Nonnull Builder<V> withDuringActionExceptions(@CheckForNull Class<?>[] exceptions) {
-            this.duringActionExceptions = exceptions;
+            this.duringActionExceptions = exceptions != null ? Arrays.copyOf(exceptions, exceptions.length) : null;
             return this;
         }
 

File: core/src/main/java/hudson/model/ViewJob.java
Patch:
@@ -60,9 +60,9 @@ public abstract class ViewJob<JobT extends ViewJob<JobT,RunT>, RunT extends Run<
     /**
      * All {@link Run}s. Copy-on-write semantics.
      */
-    protected transient /*almost final*/ RunMap<RunT> runs = new RunMap<>();
+    protected transient volatile /*almost final*/ RunMap<RunT> runs = new RunMap<>(null, null);
 
-    private transient boolean notLoaded = true;
+    private transient volatile boolean notLoaded = true;
 
     /**
      * If the reloading of runs are in progress (in another thread,

File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java
Patch:
@@ -91,7 +91,7 @@ public abstract class AbstractLazyLoadRunMap<R> extends AbstractMap<Integer,R> i
     /**
      * Used in {@link #all()} to quickly determine if we've already loaded everything.
      */
-    private boolean fullyLoaded;
+    private volatile boolean fullyLoaded;
 
     /**
      * Currently visible index.

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -24,6 +24,7 @@
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 
+import hudson.security.csrf.GlobalCrumbIssuerConfiguration;
 import jenkins.model.JenkinsLocationConfiguration;
 import jenkins.security.seed.UserSeedProperty;
 import jenkins.util.SystemProperties;
@@ -133,7 +134,7 @@ public SetupWizard() {
                     jenkins.setSlaveAgentPort(SystemProperties.getInteger(Jenkins.class.getName()+".slaveAgentPort",-1));
 
                     // require a crumb issuer
-                    jenkins.setCrumbIssuer(new DefaultCrumbIssuer(SystemProperties.getBoolean(Jenkins.class.getName() + ".crumbIssuerProxyCompatibility",false)));
+                    jenkins.setCrumbIssuer(GlobalCrumbIssuerConfiguration.createDefaultCrumbIssuer());
     
                     // set master -> slave security:
                     jenkins.getInjector().getInstance(AdminWhitelistRule.class)

File: core/src/main/java/jenkins/telemetry/impl/SecuritySystemProperties.java
Patch:
@@ -24,6 +24,7 @@
 package jenkins.telemetry.impl;
 
 import hudson.Extension;
+import hudson.util.VersionNumber;
 import jenkins.model.Jenkins;
 import jenkins.telemetry.Telemetry;
 import jenkins.util.SystemProperties;
@@ -97,7 +98,8 @@ public JSONObject createContent() {
         putStringInfo(security, "hudson.security.HudsonPrivateSecurityRealm.ID_REGEX");
 
         Map<String, Object> info = new TreeMap<>();
-        info.put("core", Jenkins.getVersion().toString());
+        VersionNumber jenkinsVersion = Jenkins.getVersion();
+        info.put("core", jenkinsVersion != null ? jenkinsVersion.toString() : "UNKNOWN");
         info.put("clientDate", clientDateString());
         info.put("properties", security);
 

File: core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java
Patch:
@@ -26,6 +26,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import hudson.Extension;
+import hudson.util.VersionNumber;
 import io.jenkins.lib.versionnumber.JavaSpecificationVersion;
 import jenkins.model.Jenkins;
 import jenkins.telemetry.Telemetry;
@@ -160,7 +161,8 @@ public JSONObject createContent() {
         }
 
         JSONObject info = new JSONObject();
-        info.put("core", Jenkins.getVersion() != null ? Jenkins.getVersion().toString() : "UNKNOWN");
+        VersionNumber jenkinsVersion = Jenkins.getVersion();
+        info.put("core", jenkinsVersion != null ? jenkinsVersion.toString() : "UNKNOWN");
         info.put("clientDate", clientDateString());
         info.put("classMissingEvents", events);
 

File: core/src/test/java/hudson/FunctionsTest.java
Patch:
@@ -43,6 +43,7 @@
 import jenkins.model.Jenkins;
 import org.apache.commons.io.IOUtils;
 import static org.junit.Assert.*;
+
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -559,5 +560,4 @@ synchronized Stack suppressed(Throwable... suppressed) {
             return this;
         }
     }
-
 }

File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java
Patch:
@@ -346,13 +346,12 @@ private void serveFile(StaplerRequest req, StaplerResponse rsp, VirtualFile root
         if(LOGGER.isLoggable(Level.FINE))
             LOGGER.fine("Serving "+baseFile+" with lastModified=" + lastModified + ", length=" + length);
 
-        InputStream in = baseFile.open();
         if (view) {
             // for binary files, provide the file name for download
             rsp.setHeader("Content-Disposition", "inline; filename=" + baseFile.getName());
 
             // pseudo file name to let the Stapler set text/plain
-            rsp.serveFile(req, in, lastModified, -1, length, "plain.txt");
+            rsp.serveFile(req, baseFile.open(), lastModified, -1, length, "plain.txt");
         } else {
             if (resourceToken != null) {
                 // redirect to second domain
@@ -368,7 +367,7 @@ private void serveFile(StaplerRequest req, StaplerResponse rsp, VirtualFile root
                         }
                     }
                 }
-                rsp.serveFile(req, in, lastModified, -1, length, baseFile.getName());
+                rsp.serveFile(req, baseFile.open(), lastModified, -1, length, baseFile.getName());
             }
         }
     }

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -1257,8 +1257,7 @@ void save(File file) throws IOException {
             file.getParentFile().mkdirs();
             // JENKINS-16301: fast path for the common case.
             AtomicFileWriter afw = new AtomicFileWriter(file);
-            try {
-                PrintWriter w = new PrintWriter(afw);
+            try (PrintWriter w = new PrintWriter((afw))) {
                 w.println("<?xml version='1.1' encoding='UTF-8'?>");
                 w.println("<fingerprint>");
                 w.print("  <timestamp>");

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -46,6 +46,8 @@
 import hudson.util.NamingThreadFactory;
 import hudson.util.SequentialExecutionQueue;
 import hudson.util.StreamTaskListener;
+
+import java.util.Arrays;
 import java.util.concurrent.TimeUnit;
 import java.io.File;
 import java.io.IOException;
@@ -557,7 +559,7 @@ public Runner(Action[] actions) {
             if (actions == null) {
                 additionalActions = new Action[0];
             } else {
-                additionalActions = actions;
+                additionalActions = Arrays.copyOf(actions, actions.length);
             }
         }
         

File: core/src/main/java/hudson/util/Retrier.java
Patch:
@@ -5,6 +5,7 @@
 
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
+import java.util.Arrays;
 import java.util.concurrent.Callable;
 import java.util.function.BiFunction;
 import java.util.function.BiPredicate;
@@ -144,7 +145,7 @@ public static class Builder <V> {
          * @return this builder
          */
         public @Nonnull Builder<V> withDuringActionExceptions(@CheckForNull Class<?>[] exceptions) {
-            this.duringActionExceptions = exceptions;
+            this.duringActionExceptions = exceptions != null ? Arrays.copyOf(exceptions, exceptions.length) : null;
             return this;
         }
 

File: core/src/main/java/hudson/model/ViewJob.java
Patch:
@@ -60,9 +60,9 @@ public abstract class ViewJob<JobT extends ViewJob<JobT,RunT>, RunT extends Run<
     /**
      * All {@link Run}s. Copy-on-write semantics.
      */
-    protected transient /*almost final*/ RunMap<RunT> runs = new RunMap<>();
+    protected transient volatile /*almost final*/ RunMap<RunT> runs = new RunMap<>(null, null);
 
-    private transient boolean notLoaded = true;
+    private transient volatile boolean notLoaded = true;
 
     /**
      * If the reloading of runs are in progress (in another thread,

File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java
Patch:
@@ -91,7 +91,7 @@ public abstract class AbstractLazyLoadRunMap<R> extends AbstractMap<Integer,R> i
     /**
      * Used in {@link #all()} to quickly determine if we've already loaded everything.
      */
-    private boolean fullyLoaded;
+    private volatile boolean fullyLoaded;
 
     /**
      * Currently visible index.

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -24,6 +24,7 @@
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 
+import hudson.security.csrf.GlobalCrumbIssuerConfiguration;
 import jenkins.model.JenkinsLocationConfiguration;
 import jenkins.security.seed.UserSeedProperty;
 import jenkins.util.SystemProperties;
@@ -133,7 +134,7 @@ public SetupWizard() {
                     jenkins.setSlaveAgentPort(SystemProperties.getInteger(Jenkins.class.getName()+".slaveAgentPort",-1));
 
                     // require a crumb issuer
-                    jenkins.setCrumbIssuer(new DefaultCrumbIssuer(SystemProperties.getBoolean(Jenkins.class.getName() + ".crumbIssuerProxyCompatibility",false)));
+                    jenkins.setCrumbIssuer(GlobalCrumbIssuerConfiguration.createDefaultCrumbIssuer());
     
                     // set master -> slave security:
                     jenkins.getInjector().getInstance(AdminWhitelistRule.class)

File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java
Patch:
@@ -346,13 +346,12 @@ private void serveFile(StaplerRequest req, StaplerResponse rsp, VirtualFile root
         if(LOGGER.isLoggable(Level.FINE))
             LOGGER.fine("Serving "+baseFile+" with lastModified=" + lastModified + ", length=" + length);
 
-        InputStream in = baseFile.open();
         if (view) {
             // for binary files, provide the file name for download
             rsp.setHeader("Content-Disposition", "inline; filename=" + baseFile.getName());
 
             // pseudo file name to let the Stapler set text/plain
-            rsp.serveFile(req, in, lastModified, -1, length, "plain.txt");
+            rsp.serveFile(req, baseFile.open(), lastModified, -1, length, "plain.txt");
         } else {
             if (resourceToken != null) {
                 // redirect to second domain
@@ -368,7 +367,7 @@ private void serveFile(StaplerRequest req, StaplerResponse rsp, VirtualFile root
                         }
                     }
                 }
-                rsp.serveFile(req, in, lastModified, -1, length, baseFile.getName());
+                rsp.serveFile(req, baseFile.open(), lastModified, -1, length, baseFile.getName());
             }
         }
     }

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -1762,7 +1762,7 @@ public HttpResponse doUploadPlugin(StaplerRequest req) throws IOException, Servl
 
     private FormValidation checkUpdatesServer() throws Exception {
         for (UpdateSite site : Jenkins.get().getUpdateCenter().getSites()) {
-            FormValidation v = site.updateDirectlyNow(DownloadService.signatureCheck);
+            FormValidation v = site.updateDirectlyNow();
             if (v.kind != FormValidation.Kind.OK) {
                 // Stop with an error
                 return v;

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -1063,7 +1063,7 @@ public List<Plugin> getUpdates() {
     public List<FormValidation> updateAllSites() throws InterruptedException, ExecutionException {
         List <Future<FormValidation>> futures = new ArrayList<>();
         for (UpdateSite site : getSites()) {
-            Future<FormValidation> future = site.updateDirectly(DownloadService.signatureCheck);
+            Future<FormValidation> future = site.updateDirectly();
             if (future != null) {
                 futures.add(future);
             }
@@ -2516,7 +2516,7 @@ public static void updateDefaultSite() {
         try {
             // Need to do the following because the plugin manager will attempt to access
             // $JENKINS_HOME/updates/$ID_DEFAULT.json. Needs to be up to date.
-            site.updateDirectlyNow(true);
+            site.updateDirectlyNow();
         } catch (Exception e) {
             LOGGER.log(WARNING, "Upgrading Jenkins. Failed to update the default Update Site '" + UpdateCenter.ID_DEFAULT +
                     "'. Plugin upgrades may fail.", e);

File: test/src/test/java/hudson/tasks/BuildTriggerTest.java
Patch:
@@ -71,6 +71,7 @@
 import org.junit.Assume;
 import org.junit.Before;
 import org.junit.ClassRule;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.BuildWatcher;
@@ -185,11 +186,13 @@ private void doMavenTriggerTest(boolean evenWhenUnstable) throws Exception {
     }
 
     @Test
+    @Ignore("Fails on CI due to maven trying to download from maven central on http, which is no longer supported")
     public void mavenBuildTrigger() throws Exception {
         doMavenTriggerTest(false);
     }
 
     @Test
+    @Ignore("Fails on CI due to maven trying to download from maven central on http, which is no longer supported")
     public void mavenTriggerEvenWhenUnstable() throws Exception {
         doMavenTriggerTest(true);
     }

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -431,6 +431,7 @@ private DependencyClassLoader findAncestorDependencyClassLoader(ClassLoader clas
         return null;
     }
 
+    @SuppressFBWarnings(value = "PATH_TRAVERSAL_IN", justification = "Administrator action installing a plugin, which could do far worse.")
     private static File resolve(File base, String relative) {
         File rel = new File(relative);
         if(rel.isAbsolute())

File: core/src/main/java/hudson/Proc.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Launcher.ProcStarter;
 import hudson.model.TaskListener;
 import hudson.remoting.Channel;
@@ -215,6 +216,7 @@ public LocalProc(String[] cmd,String[] env,InputStream in,OutputStream out, File
          * @param err
          *      null to redirect stderr to stdout.
          */
+        @SuppressFBWarnings(value = "COMMAND_INJECTION", justification = "Command injection is the point of this old, barely used class.")
         public LocalProc(String[] cmd,String[] env,InputStream in,OutputStream out,OutputStream err,File workDir) throws IOException {
             this( calcName(cmd),
                   stderr(environment(new ProcessBuilder(cmd),env).directory(workDir), err==null || err== SELFPUMP_OUTPUT),

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -834,8 +834,8 @@ public String getGlobalConfigPage() {
 
     /**
      * Returns the permission type needed in order to configure the descriptor if and only if it is configured through the global (Unclassified) configuration.
-     * By default, requires {@link Jenkins.ADMINISTER} permission.
-     * Override to return something different if appropriate. The only currently supported alternative return value is {@link Jenkins.MANAGE}.
+     * By default, requires {@link Jenkins#ADMINISTER} permission.
+     * Override to return something different if appropriate. The only currently supported alternative return value is {@link Jenkins#MANAGE}.
      *
      * @return Permission required to configure this descriptor.
      */

File: core/src/main/java/hudson/model/AdministrativeMonitor.java
Patch:
@@ -68,7 +68,7 @@
  * If {@link #isActivated()} returns true, Jenkins will use the {@code message.jelly}
  * view of this object to render the warning text. This happens in the
  * {@code http://SERVER/jenkins/manage} page. This view should typically render
- * a DIV box with class='alert alert-error' or class='alert alert-warning' with a human-readable text
+ * a DIV box with class='alert alert-danger' or class='alert alert-warning' with a human-readable text
  * inside it. It often also contains a link to a page that provides more details
  * about the problem.
  * </dd>

File: core/src/main/java/hudson/slaves/ComputerLauncher.java
Patch:
@@ -180,7 +180,7 @@ protected static void checkJavaVersion(final PrintStream logger, String javaComm
                                     final BufferedReader r)
             throws IOException {
         String line;
-        Pattern p = Pattern.compile("(?i)(?:java|openjdk) version \"([0-9.]+).*\"");
+        Pattern p = Pattern.compile("(?i)(?:java|openjdk) version \"([0-9.]+).*\".*");
         while (null != (line = r.readLine())) {
             Matcher m = p.matcher(line);
             if (m.matches()) {

File: core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java
Patch:
@@ -104,7 +104,9 @@ public class MissingClassTelemetry extends Telemetry {
             {"java.util.ResourceBundle$Control", "newBundle"},
             //hundreds when a job is created
             {"org.codehaus.groovy.control.ClassNodeResolver", "tryAsLoaderClassOrScript"},
-            {"org.kohsuke.stapler.RequestImpl$TypePair", "convertJSON"}
+            {"org.kohsuke.stapler.RequestImpl$TypePair", "convertJSON"},
+            {"net.bull.javamelody.FilterContext", "isMojarraAvailable"} // JENKINS-60725
+            
     };
 
     @Nonnull

File: core/src/main/java/hudson/model/AdministrativeMonitor.java
Patch:
@@ -68,7 +68,7 @@
  * If {@link #isActivated()} returns true, Jenkins will use the {@code message.jelly}
  * view of this object to render the warning text. This happens in the
  * {@code http://SERVER/jenkins/manage} page. This view should typically render
- * a DIV box with class='alert alert-error' or class='alert alert-warning' with a human-readable text
+ * a DIV box with class='alert alert-danger' or class='alert alert-warning' with a human-readable text
  * inside it. It often also contains a link to a page that provides more details
  * about the problem.
  * </dd>

File: test/src/test/java/hudson/cli/GetNodeCommandTest.java
Patch:
@@ -60,7 +60,7 @@ public class GetNodeCommandTest {
                 .invokeWithArgs("MySlave")
         ;
 
-        assertThat(result.stderr(), containsString("ERROR: user is missing the Agent/ExtendedRead permission"));
+        assertThat(result.stderr(), containsString("ERROR: user is missing the Agent/Configure permission"));
         assertThat(result, failedWith(6));
         assertThat(result, hasNoStandardOutput());
     }

File: core/src/main/java/hudson/init/impl/InitialUserContent.java
Patch:
@@ -23,7 +23,7 @@
  */
 package hudson.init.impl;
 
-import static hudson.init.InitMilestone.JOB_LOADED;
+import static hudson.init.InitMilestone.JOB_CONFIG_ADAPTED;
 import hudson.init.Initializer;
 import jenkins.model.Jenkins;
 import hudson.model.Messages;
@@ -37,7 +37,7 @@
  * @author Kohsuke Kawaguchi
  */
 public class InitialUserContent {
-    @Initializer(after=JOB_LOADED)
+    @Initializer(after=JOB_CONFIG_ADAPTED)
     public static void init(Jenkins h) throws IOException {
         File userContentDir = new File(h.getRootDir(), "userContent");
         if(!userContentDir.exists()) {

File: core/src/main/java/hudson/model/AperiodicWork.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Logger;
 
-import static hudson.init.InitMilestone.JOB_LOADED;
+import static hudson.init.InitMilestone.JOB_CONFIG_ADAPTED;
 
 
 /**
@@ -92,7 +92,7 @@ public final void doRun() throws Exception{
         Timer.get().schedule(getNewInstance(), getRecurrencePeriod(), TimeUnit.MILLISECONDS);
     }
 
-    @Initializer(after= JOB_LOADED)
+    @Initializer(after= JOB_CONFIG_ADAPTED)
     public static void init() {
         // start all AperidocWorks
         ExtensionList<AperiodicWork> extensionList = all();

File: core/src/main/java/hudson/model/ComputerSet.java
Patch:
@@ -64,7 +64,7 @@
 import net.sf.json.JSONObject;
 import org.kohsuke.stapler.verb.POST;
 
-import static hudson.init.InitMilestone.JOB_LOADED;
+import static hudson.init.InitMilestone.JOB_CONFIG_ADAPTED;
 
 /**
  * Serves as the top of {@link Computer}s in the URL hierarchy.
@@ -406,7 +406,7 @@ public AutoCompletionCandidates doAutoCompleteCopyNewItemFrom(@QueryParameter fi
      */
     public static void initialize() {}
 
-    @Initializer(after= JOB_LOADED)
+    @Initializer(after= JOB_CONFIG_ADAPTED)
     public static void init() {
         // start monitoring nodes, although there's no hurry.
         Timer.get().schedule(new SafeTimerTask() {

File: core/src/main/java/hudson/model/PeriodicWork.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.logging.Logger;
 import java.util.Random;
 
-import static hudson.init.InitMilestone.JOB_LOADED;
+import static hudson.init.InitMilestone.JOB_CONFIG_ADAPTED;
 import hudson.triggers.Trigger;
 
 /**
@@ -99,7 +99,7 @@ public static ExtensionList<PeriodicWork> all() {
         return ExtensionList.lookup(PeriodicWork.class);
     }
 
-    @Initializer(after= JOB_LOADED)
+    @Initializer(after= JOB_CONFIG_ADAPTED)
     public static void init() {
         // start all PeriodicWorks
         ExtensionList<PeriodicWork> extensionList = all();

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -35,7 +35,8 @@
 import hudson.Util;
 import hudson.XmlFile;
 import hudson.init.Initializer;
-import static hudson.init.InitMilestone.JOB_LOADED;
+
+import static hudson.init.InitMilestone.JOB_CONFIG_ADAPTED;
 import static hudson.util.Iterators.reverse;
 
 import hudson.cli.declarative.CLIResolver;
@@ -3061,7 +3062,7 @@ public static Queue getInstance() {
     /**
      * Restores the queue content during the start up.
      */
-    @Initializer(after=JOB_LOADED)
+    @Initializer(after=JOB_CONFIG_ADAPTED)
     public static void init(Jenkins h) {
         h.getQueue().load();
     }

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -1036,7 +1036,7 @@ public static final class AllUsers {
 
         private final ConcurrentMap<String, User> byName = new ConcurrentHashMap<>();
 
-        @Initializer(after = InitMilestone.JOB_LOADED)
+        @Initializer(after = InitMilestone.JOB_CONFIG_ADAPTED)
         public static void scanAll() {
             for (String userId : UserIdMapper.getInstance().getConvertedUserIds()) {
                 User user = new User(userId, userId);

File: core/src/main/java/hudson/model/queue/QueueSorter.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.List;
 import java.util.logging.Logger;
 
-import static hudson.init.InitMilestone.JOB_LOADED;
+import static hudson.init.InitMilestone.JOB_CONFIG_ADAPTED;
 
 /**
  * Singleton extension point for sorting buildable items
@@ -68,7 +68,7 @@ public static ExtensionList<QueueSorter> all() {
      *
      * {@link Queue#Queue(LoadBalancer)} is too early to do this
      */
-    @Initializer(after=JOB_LOADED)
+    @Initializer(after=JOB_CONFIG_ADAPTED)
     public static void installDefaultQueueSorter() {
         ExtensionList<QueueSorter> all = all();
         if (all.isEmpty())  return;

File: core/src/main/java/hudson/util/DoubleLaunchChecker.java
Patch:
@@ -35,7 +35,7 @@
 import javax.servlet.ServletException;
 import javax.servlet.ServletContext;
 
-import static hudson.init.InitMilestone.JOB_LOADED;
+import static hudson.init.InitMilestone.JOB_CONFIG_ADAPTED;
 import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
 import java.io.File;
 import java.io.IOException;
@@ -162,7 +162,7 @@ protected void doRun() {
             }, (random.nextInt(30) + 60) * MINUTE, TimeUnit.MILLISECONDS);
     }
 
-    @Initializer(after= JOB_LOADED)
+    @Initializer(after= JOB_CONFIG_ADAPTED)
     public static void init() {
         new DoubleLaunchChecker().schedule();
     }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3208,7 +3208,7 @@ private synchronized TaskBuilder loadTasks() throws IOException {
         final Set<String> loadedNames = Collections.synchronizedSet(new HashSet<>());
 
         TaskGraphBuilder g = new TaskGraphBuilder();
-        Handle loadJenkins = g.requires(EXTENSIONS_AUGMENTED).attains(JOB_LOADED).add("Loading global config", new Executable() {
+        Handle loadJenkins = g.requires(EXTENSIONS_AUGMENTED).attains(SYSTEM_CONFIG_LOADED).add("Loading global config", new Executable() {
             public void run(Reactor session) throws Exception {
                 loadConfig();
                 // if we are loading old data that doesn't have this field
@@ -3253,7 +3253,7 @@ public void run(Reactor reactor) throws Exception {
             }
         });
 
-        g.requires(JOB_LOADED).attains(COMPLETED).add("Finalizing set up",new Executable() {
+        g.requires(JOB_CONFIG_ADAPTED).attains(COMPLETED).add("Finalizing set up",new Executable() {
             public void run(Reactor session) throws Exception {
                 rebuildDependencyGraph();
 

File: core/src/main/java/jenkins/model/Uptime.java
Patch:
@@ -25,7 +25,7 @@ public long getUptime() {
         return System.currentTimeMillis()-startTime;
     }
 
-    @Initializer(after=InitMilestone.JOB_LOADED)
+    @Initializer(after=InitMilestone.JOB_CONFIG_ADAPTED)
     public void init() {
         startTime = System.currentTimeMillis();
     }

File: core/src/main/java/hudson/model/ParametersDefinitionProperty.java
Patch:
@@ -200,6 +200,7 @@ public void buildWithParameters(StaplerRequest req, StaplerResponse rsp, @CheckF
     /**
      * Gets the {@link ParameterDefinition} of the given name, if any.
      */
+    @CheckForNull
     public ParameterDefinition getParameterDefinition(String name) {
         for (ParameterDefinition pd : parameterDefinitions)
             if (pd.getName().equals(name))

File: core/src/main/java/hudson/logging/LogRecorderManager.java
Patch:
@@ -157,6 +157,7 @@ public void doRss( StaplerRequest req, StaplerResponse rsp ) throws IOException,
      */
     /*package*/ static void doRss(StaplerRequest req, StaplerResponse rsp, List<LogRecord> logs) throws IOException, ServletException {
         // filter log records based on the log level
+        String entryType = "all";
         String level = req.getParameter("level");
         if(level!=null) {
             Level threshold = Level.parse(level);
@@ -166,9 +167,10 @@ public void doRss( StaplerRequest req, StaplerResponse rsp ) throws IOException,
                     filtered.add(r);
             }
             logs = filtered;
+            entryType = level;
         }
 
-        RSS.forwardToRss("Hudson log","", logs, new FeedAdapter<LogRecord>() {
+        RSS.forwardToRss("Jenkins:log (" + entryType + " entries)","", logs, new FeedAdapter<LogRecord>() {
             public String getEntryTitle(LogRecord entry) {
                 return entry.getMessage();
             }

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -1371,12 +1371,12 @@ public String call() throws IOException {
 //
     @Restricted(DoNotUse.class)
     public void doRssAll( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {
-        RSS.rss(req, rsp, getDisplayName() + " all builds", getUrl(), getBuilds());
+        RSS.rss(req, rsp, "Jenkins:" + getDisplayName() + " (all builds)", getUrl(), getBuilds());
     }
 
     @Restricted(DoNotUse.class)
     public void doRssFailed(StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {
-        RSS.rss(req, rsp, getDisplayName() + " failed builds", getUrl(), getBuilds().failureOnly());
+        RSS.rss(req, rsp, "Jenkins:" + getDisplayName() + " (failed builds)", getUrl(), getBuilds().failureOnly());
     }
 
     /**
@@ -1398,7 +1398,7 @@ public void doRssLatest( StaplerRequest req, StaplerResponse rsp ) throws IOExce
                 }
             }
         }
-        RSS.rss(req, rsp, getDisplayName() + " last builds only", getUrl(), RunList.fromRuns(lastBuilds));
+        RSS.rss(req, rsp, "Jenkins:" + getDisplayName() + " (latest builds)", getUrl(), RunList.fromRuns(lastBuilds));
     }
 
     @RequirePOST

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -1566,12 +1566,12 @@ protected void checkRename(String newName) throws Failure {
 
     public void doRssAll(StaplerRequest req, StaplerResponse rsp)
             throws IOException, ServletException {
-        RSS.rss(req, rsp, getDisplayName() + " all builds", getUrl(), getBuilds().newBuilds());
+        RSS.rss(req, rsp, "Jenkins:" + getDisplayName() + " (all builds)", getUrl(), getBuilds().newBuilds());
     }
 
     public void doRssFailed(StaplerRequest req, StaplerResponse rsp)
             throws IOException, ServletException {
-        RSS.rss(req, rsp, getDisplayName() + " failed builds", getUrl(), getBuilds().failureOnly().newBuilds());
+        RSS.rss(req, rsp, "Jenkins:" + getDisplayName() + " (failed builds)", getUrl(), getBuilds().failureOnly().newBuilds());
     }
 
     /**

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -871,11 +871,11 @@ public void doDoDelete(StaplerRequest req, StaplerResponse rsp) throws IOExcepti
     }
 
     public void doRssAll(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
-        RSS.rss(req, rsp, getDisplayName() + " all builds", getUrl(), getBuilds().newBuilds());
+        RSS.rss(req, rsp, "Jenkins:" + getDisplayName() + " (all builds)", getUrl(), getBuilds().newBuilds());
     }
 
     public void doRssFailed(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
-        RSS.rss(req, rsp, getDisplayName() + " regression builds", getUrl(), getBuilds().regressionOnly());
+        RSS.rss(req, rsp, "Jenkins:" + getDisplayName() + " (failed builds)", getUrl(), getBuilds().regressionOnly());
     }
 
     public void doRssLatest(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
@@ -891,7 +891,7 @@ public void doRssLatest(StaplerRequest req, StaplerResponse rsp) throws IOExcept
         // historically these have been reported sorted by project name, we switched to the lazy iteration
         // so we only have to sort the sublist of runs rather than the full list of irrelevant projects
         lastBuilds.sort((o1, o2) -> Items.BY_FULL_NAME.compare(o1.getParent(), o2.getParent()));
-        RSS.rss(req, rsp, getDisplayName() + " latest build", getUrl(), RunList.fromRuns(lastBuilds), Run.FEED_ADAPTER_LATEST);
+        RSS.rss(req, rsp, "Jenkins:" + getDisplayName() + " (latest builds)", getUrl(), RunList.fromRuns(lastBuilds), Run.FEED_ADAPTER_LATEST);
     }
 
     @Override

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -1143,11 +1143,11 @@ public Categories doItemCategories(StaplerRequest req, StaplerResponse rsp, @Que
     }
 
     public void doRssAll( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {
-        RSS.rss(req, rsp, getDisplayName() + " all builds", getUrl(), getBuilds().newBuilds());
+        RSS.rss(req, rsp, "Jenkins:" + getDisplayName() + " (all builds)", getUrl(), getBuilds().newBuilds());
     }
 
     public void doRssFailed( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {
-        RSS.rss(req, rsp, getDisplayName() + " failed builds", getUrl(), getBuilds().failureOnly().newBuilds());
+        RSS.rss(req, rsp, "Jenkins:" + getDisplayName() + " (failed builds)", getUrl(), getBuilds().failureOnly().newBuilds());
     }
     
     public RunList getBuilds() {
@@ -1167,7 +1167,7 @@ public void doRssLatest( StaplerRequest req, StaplerResponse rsp ) throws IOExce
                 if(lb!=null)    lastBuilds.add(lb);
             }
         }
-        RSS.rss(req, rsp, getDisplayName() + " last builds only", getUrl(), RunList.fromRuns(lastBuilds), Run.FEED_ADAPTER_LATEST);
+        RSS.rss(req, rsp, "Jenkins:" + getDisplayName() + " (latest builds)", getUrl(), RunList.fromRuns(lastBuilds), Run.FEED_ADAPTER_LATEST);
     }
 
     /**

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -665,6 +665,7 @@ public void setBlockBuildWhenUpstreamBuilding(boolean b) throws IOException {
     }
 
     @Override
+    @Exported
     public boolean isDisabled() {
         return disabled;
     }

File: cli/src/main/java/hudson/cli/NoCheckTrustManager.java
Patch:
@@ -9,14 +9,16 @@
 /**
  * @author Kohsuke Kawaguchi
  */
-@SuppressFBWarnings(value = "WEAK_TRUST_MANAGER", justification = "User set parameter to skip verifier.")
 public class NoCheckTrustManager implements X509TrustManager {
+    @SuppressFBWarnings(value = "WEAK_TRUST_MANAGER", justification = "User set parameter to skip verifier.")
     public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
     }
 
+    @SuppressFBWarnings(value = "WEAK_TRUST_MANAGER", justification = "User set parameter to skip verifier.")
     public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
     }
 
+    @SuppressFBWarnings(value = "WEAK_TRUST_MANAGER", justification = "User set parameter to skip verifier.")
     public X509Certificate[] getAcceptedIssuers() {
         return new X509Certificate[0];
     }

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -78,7 +78,6 @@
 
 import static org.apache.commons.io.FilenameUtils.getBaseName;
 
-@SuppressFBWarnings(value = "PATH_TRAVERSAL_IN", justification = "Administrator action installing a plugin, which could do far worse.")
 public class ClassicPluginStrategy implements PluginStrategy {
 
     private static final Logger LOGGER = Logger.getLogger(ClassicPluginStrategy.class.getName());
@@ -432,6 +431,7 @@ private DependencyClassLoader findAncestorDependencyClassLoader(ClassLoader clas
         return null;
     }
 
+    @SuppressFBWarnings(value = "PATH_TRAVERSAL_IN", justification = "Administrator action installing a plugin, which could do far worse.")
     private static File resolve(File base, String relative) {
         File rel = new File(relative);
         if(rel.isAbsolute())

File: cli/src/main/java/hudson/cli/CLI.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.cli;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.cli.client.Messages;
 import java.io.DataInputStream;
 import javax.net.ssl.HostnameVerifier;
@@ -104,6 +105,7 @@ public static void main(final String[] _args) throws Exception {
     }
 
     private enum Mode {HTTP, SSH, WEB_SOCKET}
+    @SuppressFBWarnings(value = {"PATH_TRAVERSAL_IN", "URLCONNECTION_SSRF_FD"}, justification = "User provided values for running the program.")
     public static int _main(String[] _args) throws Exception {
         List<String> args = Arrays.asList(_args);
         PrivateKeyProvider provider = new PrivateKeyProvider();
@@ -175,6 +177,7 @@ public static int _main(String[] _args) throws Exception {
                 HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());
                 // bypass host name check, too.
                 HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {
+                    @SuppressFBWarnings(value = "WEAK_HOSTNAME_VERIFIER", justification = "User set parameter to skip verifier.")
                     public boolean verify(String s, SSLSession sslSession) {
                         return true;
                     }

File: cli/src/main/java/hudson/cli/DiagnosedStreamCorruptionException.java
Patch:
@@ -1,5 +1,7 @@
 package hudson.cli;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 import java.io.PrintWriter;
 import java.io.StreamCorruptedException;
 import java.io.StringWriter;
@@ -11,6 +13,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
+@SuppressFBWarnings(value = "INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE")
 class DiagnosedStreamCorruptionException extends StreamCorruptedException {
     private final Exception diagnoseFailure;
     private final byte[] readBack;

File: cli/src/main/java/hudson/cli/NoCheckTrustManager.java
Patch:
@@ -1,12 +1,15 @@
 package hudson.cli;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 import javax.net.ssl.X509TrustManager;
 import java.security.cert.CertificateException;
 import java.security.cert.X509Certificate;
 
 /**
  * @author Kohsuke Kawaguchi
  */
+@SuppressFBWarnings(value = "WEAK_TRUST_MANAGER", justification = "User set parameter to skip verifier.")
 public class NoCheckTrustManager implements X509TrustManager {
     public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
     }

File: cli/src/main/java/hudson/cli/SSHCLI.java
Patch:
@@ -61,7 +61,7 @@
  */
 class SSHCLI {
 
-    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE", justification = "Due to whatever reason FindBugs reports it fot try-with-resources")
+    @SuppressFBWarnings(value = "URLCONNECTION_SSRF_FD", justification = "Client-side code doesn't involve SSRF.")
     static int sshConnection(String jenkinsUrl, String user, List<String> args, PrivateKeyProvider provider, final boolean strictHostKey) throws IOException {
         Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING); // suppress: BouncyCastle not registered, using the default JCE provider
         URL url = new URL(jenkinsUrl + "login");

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -78,6 +78,7 @@
 
 import static org.apache.commons.io.FilenameUtils.getBaseName;
 
+@SuppressFBWarnings(value = "PATH_TRAVERSAL_IN", justification = "Admistrator action installing a plugin, which could do far worse.")
 public class ClassicPluginStrategy implements PluginStrategy {
 
     private static final Logger LOGGER = Logger.getLogger(ClassicPluginStrategy.class.getName());

File: core/src/main/java/hudson/Proc.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Launcher.ProcStarter;
 import hudson.model.TaskListener;
 import hudson.remoting.Channel;
@@ -215,6 +216,7 @@ public LocalProc(String[] cmd,String[] env,InputStream in,OutputStream out, File
          * @param err
          *      null to redirect stderr to stdout.
          */
+        @SuppressFBWarnings("COMMAND_INJECTION")
         public LocalProc(String[] cmd,String[] env,InputStream in,OutputStream out,OutputStream err,File workDir) throws IOException {
             this( calcName(cmd),
                   stderr(environment(new ProcessBuilder(cmd),env).directory(workDir), err==null || err== SELFPUMP_OUTPUT),

File: core/src/main/java/hudson/Util.java
Patch:
@@ -596,6 +596,8 @@ public static String ensureEndsWith(@CheckForNull String subject, @CheckForNull
      * @see DigestUtils#md5Hex(InputStream)
      */
     @Nonnull
+    @SuppressFBWarnings(value = "WEAK_MESSAGE_DIGEST_MD5", justification =
+            "This method should only be used for non-security applications where their weakness is not a problem.")
     public static String getDigestOf(@Nonnull InputStream source) throws IOException {
         try {
             MessageDigest md5 = MessageDigest.getInstance("MD5");

File: core/src/main/java/hudson/cli/Connection.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.cli;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.remoting.ClassFilter;
 import hudson.remoting.ObjectInputStreamEx;
 import hudson.remoting.SocketChannelStream;
@@ -113,6 +114,7 @@ public void writeObject(Object o) throws IOException {
     /**
      * Receives an object sent by {@link #writeObject(Object)}
      */
+    @SuppressFBWarnings(value = "OBJECT_DESERIALIZATION", justification = "Not used. We should just remove it.")
     public <T> T readObject() throws IOException, ClassNotFoundException {
         ObjectInputStream ois = new ObjectInputStreamEx(in,
                 getClass().getClassLoader(), ClassFilter.DEFAULT);
@@ -192,6 +194,7 @@ public KeyAgreement diffieHellman(boolean side, int keySize) throws IOException,
      * @return
      *      A new {@link Connection} object that includes the transport encryption.
      */
+    @SuppressFBWarnings(value = "STATIC_IV", justification = "Not used. We should just remove it.")
     public Connection encryptConnection(SecretKey sessionKey, String algorithm) throws IOException, GeneralSecurityException {
         Cipher cout = Cipher.getInstance(algorithm);
         cout.init(Cipher.ENCRYPT_MODE, sessionKey, new IvParameterSpec(sessionKey.getEncoded()));

File: core/src/main/java/hudson/console/AnnotatedLargeText.java
Patch:
@@ -25,6 +25,7 @@
  */
 package hudson.console;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import jenkins.model.Jenkins;
 import hudson.remoting.ObjectInputStreamEx;
 import java.util.concurrent.TimeUnit;
@@ -116,6 +117,7 @@ protected void setContentType(StaplerResponse rsp) {
         rsp.setContentType(isHtml() ? "text/html;charset=UTF-8" : "text/plain;charset=UTF-8");
     }
 
+    @SuppressFBWarnings(value = "OBJECT_DESERIALIZATION")
     private ConsoleAnnotator<T> createAnnotator(StaplerRequest req) throws IOException {
         try {
             String base64 = req!=null ? req.getHeader("X-ConsoleAnnotator") : null;

File: core/src/main/java/hudson/console/ConsoleNote.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.console;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.ExtensionPoint;
 import hudson.Functions;
 import hudson.MarkupText;
@@ -232,6 +233,7 @@ public String encode() throws IOException {
      *
      * @return null if the encoded form is malformed.
      */
+    @SuppressFBWarnings(value = "OBJECT_DESERIALIZATION")
     public static ConsoleNote readFrom(DataInputStream in) throws IOException, ClassNotFoundException {
         try {
             byte[] preamble = new byte[PREAMBLE.length];

File: core/src/main/java/hudson/security/BasicAuthenticationFilter.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.security;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.User;
 import jenkins.model.Jenkins;
 import hudson.util.Scrambler;
@@ -97,6 +98,7 @@ public void init(FilterConfig filterConfig) throws ServletException {
     }
 
     @SuppressWarnings("ACL.impersonate")
+    @SuppressFBWarnings(value = "UNVALIDATED_REDIRECT")
     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
         HttpServletRequest req = (HttpServletRequest) request;
         HttpServletResponse rsp = (HttpServletResponse) response;

File: core/src/main/java/hudson/security/HudsonAuthenticationEntryPoint.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.security;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Functions;
 
 import com.google.common.base.Strings;
@@ -60,6 +61,7 @@
  */
 public class HudsonAuthenticationEntryPoint extends AuthenticationProcessingFilterEntryPoint {
     @Override
+    @SuppressFBWarnings(value = "XSS_SERVLET")
     public void commence(ServletRequest request, ServletResponse response, AuthenticationException reason) throws IOException, ServletException {
         HttpServletRequest req = (HttpServletRequest) request;
         HttpServletResponse rsp = (HttpServletResponse) response;

File: core/src/main/java/hudson/util/ConsistentHash.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.util.Iterators.DuplicateFilterIterator;
 
 /**
@@ -60,6 +61,7 @@
  * @author Kohsuke Kawaguchi
  * @since 1.302
  */
+@SuppressFBWarnings(value = "WEAK_MESSAGE_DIGEST_MD5", justification = "Not used for security.")
 public class ConsistentHash<T> {
     /**
      * All the items in the hash, to their replication factors.

File: core/src/main/java/hudson/util/DOSToUnixPathHelper.java
Patch:
@@ -1,5 +1,6 @@
 package hudson.util;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.EnvVars;
 import hudson.Util;
 import org.kohsuke.accmod.Restricted;
@@ -16,6 +17,7 @@ interface Helper {
         void error(String string);
         void validate(File fexe);
     }
+    @SuppressFBWarnings(value = "PATH_TRAVERSAL_IN")
     static private boolean checkPrefix(String prefix, Helper helper) {
         File f = new File(prefix);
         if(f.exists()) {
@@ -30,6 +32,7 @@ static private boolean checkPrefix(String prefix, Helper helper) {
         }
         return false;
     }
+    @SuppressFBWarnings(value = "PATH_TRAVERSAL_IN")
     static void iteratePath(String exe, Helper helper) {
         exe = fixEmpty(exe);
         if(exe==null) {

File: core/src/main/java/jenkins/model/RunIdMigrator.java
Patch:
@@ -24,6 +24,7 @@
 
 package jenkins.model;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.Util;
 import hudson.model.Job;
@@ -309,6 +310,7 @@ public synchronized void delete(File dir, String id) {
      * Reverses the migration, in case you want to revert to the older format.
      * @param args one parameter, {@code $JENKINS_HOME}
      */
+    @SuppressFBWarnings(value = "PATH_TRAVERSAL_IN", justification = "Only used as an command-line process.")
     public static void main(String... args) throws Exception {
         if (args.length != 1) {
             throw new Exception("pass one parameter, $JENKINS_HOME");

File: core/src/main/java/jenkins/model/identity/IdentityRootAction.java
Patch:
@@ -1,5 +1,6 @@
 package jenkins.model.identity;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.model.UnprotectedRootAction;
 import java.security.MessageDigest;
@@ -61,6 +62,7 @@ public String getPublicKey() {
      *
      * @return the fingerprint of the public key.
      */
+    @SuppressFBWarnings(value = "WEAK_MESSAGE_DIGEST_MD5", justification = "Not used for security. ")
     public String getFingerprint() {
         RSAPublicKey key = InstanceIdentityProvider.RSA.getPublicKey();
         if (key == null) {

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol4.java
Patch:
@@ -23,6 +23,7 @@
  */
 package jenkins.slaves;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Extension;
 import hudson.ExtensionList;
 import hudson.model.Computer;
@@ -98,6 +99,7 @@ public class JnlpSlaveAgentProtocol4 extends AgentProtocol {
      * @throws KeyManagementException if things go wrong.
      * @throws IOException            if things go wrong.
      */
+    @SuppressFBWarnings("HARD_CODE_PASSWORD")
     public JnlpSlaveAgentProtocol4() throws KeyStoreException, KeyManagementException, IOException {
         // prepare our local identity and certificate
         X509Certificate identityCertificate = InstanceIdentityProvider.RSA.getCertificate();

File: core/src/main/java/hudson/ExtensionFinder.java
Patch:
@@ -497,7 +497,7 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {
                         m.setAccessible(true);
                         m.invoke(ecl, c);
                     }
-                    for (Class cc = c; cc != Object.class; cc = cc.getSuperclass()) {
+                    for (Class<?> cc = c; cc != Object.class && cc != null; cc = cc.getSuperclass()) {
                         /**
                          * See {@link com.google.inject.spi.InjectionPoint#getInjectionPoints(TypeLiteral, boolean, Errors)}
                          */

File: core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java
Patch:
@@ -104,7 +104,9 @@ public class MissingClassTelemetry extends Telemetry {
             {"java.util.ResourceBundle$Control", "newBundle"},
             //hundreds when a job is created
             {"org.codehaus.groovy.control.ClassNodeResolver", "tryAsLoaderClassOrScript"},
-            {"org.kohsuke.stapler.RequestImpl$TypePair", "convertJSON"}
+            {"org.kohsuke.stapler.RequestImpl$TypePair", "convertJSON"},
+            {"net.bull.javamelody.FilterContext", "isMojarraAvailable"} // JENKINS-60725
+            
     };
 
     @Nonnull

File: core/src/main/java/hudson/ExtensionFinder.java
Patch:
@@ -497,7 +497,7 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {
                         m.setAccessible(true);
                         m.invoke(ecl, c);
                     }
-                    for (Class cc = c; cc != Object.class; cc = cc.getSuperclass()) {
+                    for (Class<?> cc = c; cc != Object.class && cc != null; cc = cc.getSuperclass()) {
                         /**
                          * See {@link com.google.inject.spi.InjectionPoint#getInjectionPoints(TypeLiteral, boolean, Errors)}
                          */

File: core/src/main/java/hudson/cli/CLICommand.java
Patch:
@@ -244,8 +244,6 @@ public int main(List<String> args, Locale locale, InputStream stdin, PrintStream
             if (!(this instanceof HelpCommand || this instanceof WhoAmICommand))
                 Jenkins.get().checkPermission(Jenkins.READ);
             p.parseArgument(args.toArray(new String[0]));
-            if (!(this instanceof HelpCommand || this instanceof WhoAmICommand))
-                Jenkins.get().checkPermission(Jenkins.READ);
             LOGGER.log(Level.FINE, "Invoking CLI command {0}, with {1} arguments, as user {2}.",
                     new Object[] {getName(), args.size(), auth.getName()});
             int res = run();

File: core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java
Patch:
@@ -113,7 +113,7 @@ public void afterProperties(@Nonnull JnlpConnectionState event) {
                                     + "Set system property "
                                     + "jenkins.slaves.DefaultJnlpSlaveReceiver.disableStrictVerification=true to allow"
                                     + "connections until the plugin has been fixed.",
-                            new Object[]{clientName, event.getSocket().getRemoteSocketAddress(), computer.getLauncher().getClass()});
+                            new Object[]{clientName, event.getRemoteEndpointDescription(), computer.getLauncher().getClass()});
                     event.reject(new ConnectionRefusalException(String.format("%s is not an inbound agent", clientName)));
                     return;
                 }
@@ -149,7 +149,7 @@ public void beforeChannel(@Nonnull JnlpConnectionState event) {
         final OutputStream log = computer.openLogFile();
         state.setLog(log);
         PrintWriter logw = new PrintWriter(log, true);
-        logw.println("Inbound agent connected from " + event.getSocket().getInetAddress());
+        logw.println("Inbound agent connected from " + event.getRemoteEndpointDescription());
         for (ChannelConfigurator cc : ChannelConfigurator.all()) {
             cc.onChannelBuilding(event.getChannelBuilder(), computer);
         }

File: core/src/main/java/jenkins/slaves/JnlpAgentReceiver.java
Patch:
@@ -7,12 +7,13 @@
 import java.security.SecureRandom;
 import javax.annotation.Nonnull;
 
+import jenkins.agents.WebSocketAgents;
 import jenkins.security.HMACConfidentialKey;
 import org.jenkinsci.remoting.engine.JnlpClientDatabase;
 import org.jenkinsci.remoting.engine.JnlpConnectionStateListener;
 
 /**
- * Receives incoming agents connecting through {@link JnlpSlaveAgentProtocol4}.
+ * Receives incoming agents connecting through the likes of {@link JnlpSlaveAgentProtocol4} or {@link WebSocketAgents}.
  *
  * <p>
  * This is useful to establish the communication with other JVMs and use them

File: test/src/test/java/hudson/cli/CLITest.java
Patch:
@@ -157,6 +157,7 @@ public void interrupt() throws Exception {
         p.getBuildersList().add(new SleepBuilder(TimeUnit.MINUTES.toMillis(5)));
         doInterrupt(p, "-ssh", "-user", "admin", "-i", privkey.getAbsolutePath());
         doInterrupt(p, "-http", "-auth", "admin:admin");
+        doInterrupt(p, "-webSocket", "-auth", "admin:admin");
     }
     private void doInterrupt(FreeStyleProject p, String... modeArgs) throws Exception {
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
@@ -191,6 +192,7 @@ public void reportNotJenkins() throws Exception {
             assertThat(baos.toString(), containsString("There's no Jenkins running at"));
             assertNotEquals(0, ret);
         }
+        // TODO -webSocket currently produces a stack trace
     }
     @TestExtension("reportNotJenkins")
     public static final class NoJenkinsAction extends CrumbExclusion implements UnprotectedRootAction, StaplerProxy {
@@ -244,7 +246,7 @@ public void redirectToEndpointShouldBeFollowed() throws Exception {
         assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue("X-Jenkins-CLI-Port"));
         assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue("X-SSH-Endpoint"));
 
-        for (String transport: Arrays.asList("-http", "-ssh")) {
+        for (String transport: Arrays.asList("-http", "-ssh", "-webSocket")) {
 
             String url = r.getURL().toString() + "cli-proxy/";
             ByteArrayOutputStream baos = new ByteArrayOutputStream();

File: core/src/main/java/hudson/slaves/ComputerLauncher.java
Patch:
@@ -180,7 +180,7 @@ protected static void checkJavaVersion(final PrintStream logger, String javaComm
                                     final BufferedReader r)
             throws IOException {
         String line;
-        Pattern p = Pattern.compile("(?i)(?:java|openjdk) version \"([0-9.]+).*\"");
+        Pattern p = Pattern.compile("(?i)(?:java|openjdk) version \"([0-9.]+).*\".*");
         while (null != (line = r.readLine())) {
             Matcher m = p.matcher(line);
             if (m.matches()) {

File: test/src/test/java/hudson/tasks/BuildTriggerTest.java
Patch:
@@ -71,6 +71,7 @@
 import org.junit.Assume;
 import org.junit.Before;
 import org.junit.ClassRule;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.BuildWatcher;
@@ -185,11 +186,13 @@ private void doMavenTriggerTest(boolean evenWhenUnstable) throws Exception {
     }
 
     @Test
+    @Ignore("Fails on CI due to maven trying to download from maven central on http, which is no longer supported")
     public void mavenBuildTrigger() throws Exception {
         doMavenTriggerTest(false);
     }
 
     @Test
+    @Ignore("Fails on CI due to maven trying to download from maven central on http, which is no longer supported")
     public void mavenTriggerEvenWhenUnstable() throws Exception {
         doMavenTriggerTest(true);
     }

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -1069,13 +1069,13 @@ public final long getDemandStartMilliseconds() {
     }
 
     /**
-     * Returns the {@link Node} description for this computer
+     * Returns the {@link Node} description for this computer. Empty String if the {@link Node} is {@code null}.
      */
     @Restricted(DoNotUse.class)
     @Exported
     public @Nonnull String getDescription() {
         Node node = getNode();
-        return (node != null) ? node.getNodeDescription() : null;
+        return (node != null) ? node.getNodeDescription() : "";
     }
 
 

File: core/src/main/java/hudson/model/TimeZoneProperty.java
Patch:
@@ -1,10 +1,10 @@
 package hudson.model;
 
 import hudson.Extension;
-import hudson.util.FormValidation;
 import hudson.util.ListBoxModel;
 import hudson.util.ListBoxModel.Option;
 import javax.annotation.CheckForNull;
+import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import java.io.IOException;
 import java.util.TimeZone;
@@ -52,6 +52,7 @@ public void setTimeZoneName(@CheckForNull String timeZoneName) {
     @Symbol("timezone")
     public static class DescriptorImpl extends UserPropertyDescriptor {
 
+        @Nonnull
         @Override
         public String getDisplayName() {
             return Messages.TimeZoneProperty_DisplayName();

File: core/src/main/java/jenkins/util/HttpSessionListener.java
Patch:
@@ -24,6 +24,7 @@
 package jenkins.util;
 
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.ExtensionList;
 import hudson.ExtensionPoint;
 
@@ -38,6 +39,7 @@
  * @author <a href="mailto:tom.fennelly@gmail.com">tom.fennelly@gmail.com</a>
  * @since 2.2
  */
+@SuppressFBWarnings(value = "NM_SAME_SIMPLE_NAME_AS_INTERFACE", justification = "Should shadow HttpSessionListener")
 public abstract class HttpSessionListener implements ExtensionPoint, javax.servlet.http.HttpSessionListener {
 
     /**

File: core/src/main/java/jenkins/util/io/PathRemover.java
Patch:
@@ -61,7 +61,7 @@ public static PathRemover newRemoverWithStrategy(@Nonnull RetryStrategy retryStr
     }
 
     public static PathRemover newFilteredRobustRemover(@Nonnull PathChecker pathChecker, int maxRetries, boolean gcAfterFailedRemove, long waitBetweenRetries) {
-        return new PathRemover(new PausingGCRetryStrategy(maxRetries < 1 ? 1 : maxRetries, gcAfterFailedRemove, waitBetweenRetries), pathChecker);
+        return new PathRemover(new PausingGCRetryStrategy(Math.max(maxRetries, 0), gcAfterFailedRemove, waitBetweenRetries), pathChecker);
     }
 
     private final RetryStrategy retryStrategy;

File: core/src/main/java/hudson/util/AtomicFileWriter.java
Patch:
@@ -149,7 +149,7 @@ public AtomicFileWriter(@Nonnull Path destinationPath, @Nonnull Charset charset,
             integrityOnClose = false;
         }
 
-        core = new FileChannelWriter(tmpPath, charset, integrityOnFlush, integrityOnClose, StandardOpenOption.WRITE);
+        core = new FileChannelWriter(tmpPath, charset, integrityOnFlush, integrityOnClose, StandardOpenOption.WRITE, StandardOpenOption.CREATE);
     }
 
     @Override

File: core/src/main/java/hudson/model/TimeZoneProperty.java
Patch:
@@ -105,7 +105,7 @@ public static String forCurrentUser() {
         }
 
         TimeZone tz = TimeZone.getTimeZone(tzp.timeZoneName);
-        if (tz.getID() != tzp.timeZoneName) {
+        if (!tz.getID().equals(tzp.timeZoneName)) {
             //TimeZone.getTimeZone returns GMT on invalid time zone so
             //warn the user if the time zone returned is different from
             //the one they specified.

File: core/src/main/java/hudson/cli/DisablePluginCommand.java
Patch:
@@ -164,7 +164,7 @@ private void restartIfNecessary(List<PluginWrapper.PluginDisableResult> results)
 
     /**
      * Restart if this particular result of the disablement of a plugin and its dependent plugins (depending on the
-     * strategy used) has a plugin disablexd.
+     * strategy used) has a plugin disabled.
      * @param oneResult the result of a plugin (and its dependents).
      * @return true if it end up in restarting jenkins.
      */

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1072,7 +1072,7 @@ public CauseOfBlockage getCauseOfBlockage() {
                 return new BlockedBecauseOfBuildInProgress(lastBuild);
             } else {
                 // The build has been likely deleted after the isLogUpdated() call.
-                // Another cause may be an API implementation glitсh in the implementation for AbstractProject. 
+                // Another cause may be an API implementation glitch in the implementation for AbstractProject.
                 // Anyway, we should let the code go then.
                 LOGGER.log(Level.FINE, "The last build has been deleted during the non-concurrent cause creation. The build is not blocked anymore");
             }

File: core/src/main/java/hudson/model/CheckPoint.java
Patch:
@@ -101,7 +101,7 @@ public String toString() {
     }
 
     /**
-     * Records that the execution of the build has reached to a check point, idenified
+     * Records that the execution of the build has reached to a check point, identified
      * by the given identifier.
      *
      * <p>

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -691,7 +691,7 @@ public Object onConvert(Type targetType, Class targetTypeErasure, Object jsonSou
     private T verifyNewInstance(T t) {
         if (t!=null && t.getDescriptor()!=this) {
             // TODO: should this be a fatal error?
-            LOGGER.warning("Father of "+ t+" and its getDescriptor() points to two different instances. Probably malplaced @Extension. See http://hudson.361315.n4.nabble.com/Help-Hint-needed-Post-build-action-doesn-t-stay-activated-td2308833.html");
+            LOGGER.warning("Father of "+ t+" and its getDescriptor() points to two different instances. Probably misplaced @Extension. See http://hudson.361315.n4.nabble.com/Help-Hint-needed-Post-build-action-doesn-t-stay-activated-td2308833.html");
         }
         return t;
     }

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -403,7 +403,7 @@ public EnvVars getCharacteristicEnvVars() {
     }
 
     /**
-     * Programatically updates the next build number.
+     * Programmatically updates the next build number.
      * 
      * <p>
      * Much of Hudson assumes that the build number is unique and monotonic, so

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -640,7 +640,7 @@ public final boolean isKeepLog() {
     }
 
     /**
-     * Same as {@link #getTimestamp()} but in a different type, that is since the time of the epoc.
+     * Same as {@link #getTimestamp()} but in a different type, that is since the time of the epoch.
      */
     public final long getTimeInMillis() {
         return timestamp;
@@ -2610,7 +2610,7 @@ public Object getTarget() {
     public static class RedirectUp {
         public void doDynamic(StaplerResponse rsp) throws IOException {
             // Compromise to handle both browsers (auto-redirect) and programmatic access
-            // (want accurate 404 response).. send 404 with javscript to redirect browsers.
+            // (want accurate 404 response).. send 404 with javascript to redirect browsers.
             rsp.setStatus(HttpServletResponse.SC_NOT_FOUND);
             rsp.setContentType("text/html;charset=UTF-8");
             PrintWriter out = rsp.getWriter();

File: core/src/main/java/hudson/model/RunAction.java
Patch:
@@ -39,7 +39,7 @@ public interface RunAction extends Action {
     void onLoad();
 
     /**
-     * Called when the action is aded to the {@link Run} object.
+     * Called when the action is added to the {@link Run} object.
      * @since 1.376
      */
     void onAttached(Run r);

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -512,7 +512,7 @@ public Launcher createLauncher(TaskListener listener) {
             if (isUnix == null) {
                 // isUnix is always set when the channel is not null, so it should never happen
                 reportLauncherCreateError("The agent has not been fully initialized yet",
-                                         "Cannot determing if the agent is a Unix one, the System status request has not completed yet. " +
+                                         "Cannot determine if the agent is a Unix one, the System status request has not completed yet. " +
                                          "It is an invalid channel state, please report a bug to Jenkins if you see it.", 
                                          listener);
                 return new Launcher.DummyLauncher(listener);

File: core/src/main/java/hudson/model/ViewGroupMixIn.java
Patch:
@@ -47,7 +47,7 @@
  * private ViewsTabBar viewsTabBar;
  * }</pre>
  * <li>
- * Define a transient field and store ViewGroupMixIn subype, then wire up getters and setters:
+ * Define a transient field and store ViewGroupMixIn subtype, then wire up getters and setters:
  * <pre>
  * private transient ViewGroupMixIn = new ViewGroupMixIn() {
  *     List&lt;View&gt; views() { return views; }

File: core/src/main/java/hudson/os/WindowsUtil.java
Patch:
@@ -48,7 +48,7 @@ public class WindowsUtil {
      * Quotes an argument while escaping special characters interpreted by CreateProcess.
      *
      * @param argument argument to be quoted or escaped for windows shells.
-     * @return properly quoted and escaped windows arguemnts.
+     * @return properly quoted and escaped windows arguments.
      */
     public static @Nonnull String quoteArgument(@Nonnull String argument) {
         if (!NEEDS_QUOTING.matcher(argument).find()) return argument;

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -667,7 +667,7 @@ private static RememberMeServices createRememberMeService(UserDetailsService uds
             rms.setUserDetailsService(uds);
             /*
                 TokenBasedRememberMeServices needs to be used in conjunction with RememberMeAuthenticationProvider,
-                and both needs to use the same key (this is a reflection of a poor design in AcgeiSecurity, if you ask me)
+                and both needs to use the same key (this is a reflection of a poor design in AcegiSecurity, if you ask me)
                 and various security plugins have its own groovy script that configures them.
 
                 So if we change this, it creates a painful situation for those plugins by forcing them to choose

File: core/src/main/java/hudson/slaves/ComputerLauncher.java
Patch:
@@ -54,7 +54,7 @@
 public abstract class ComputerLauncher extends AbstractDescribableImpl<ComputerLauncher> implements ExtensionPoint {
     /**
      * Returns true if this {@link ComputerLauncher} supports
-     * programatic launch of the agent in the target {@link Computer}.
+     * programmatic launch of the agent in the target {@link Computer}.
      */
     public boolean isLaunchSupported() {
         return true;

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -327,7 +327,7 @@ public static DescriptorExtensionList<Trigger<?>,TriggerDescriptor> all() {
     }
 
     /**
-     * Returns a subset of {@link TriggerDescriptor}s that applys to the given item.
+     * Returns a subset of {@link TriggerDescriptor}s that applies to the given item.
      */
     public static List<TriggerDescriptor> for_(Item i) {
         List<TriggerDescriptor> r = new ArrayList<>();

File: core/src/main/java/hudson/triggers/Triggers.java
Patch:
@@ -51,7 +51,7 @@ public class Triggers {
 //    );
 
     /**
-     * Returns a subset of {@link TriggerDescriptor}s that applys to the given item.
+     * Returns a subset of {@link TriggerDescriptor}s that applies to the given item.
      *
      * @deprecated as of 1.286
      *      Use {@link Trigger#for_(Item)}.

File: core/src/main/java/hudson/util/ListBoxModel.java
Patch:
@@ -173,7 +173,7 @@ public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object nod
 
     /**
      * @deprecated
-     *      Exposed for stapler. Not meant for programatic consumption.
+     *      Exposed for stapler. Not meant for programmatic consumption.
      */
     @Exported
     @Deprecated

File: core/src/main/java/hudson/util/MultipartFormDataParser.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.HashMap;
 
 /**
- * Wraps commons file-upload and handles a "multipart/form-data" form submisison
+ * Wraps commons file-upload and handles a "multipart/form-data" form submission
  * (that often includes file upload.)
  *
  * @author Kohsuke Kawaguchi

File: core/src/main/java/jenkins/model/DirectlyModifiableTopLevelItemGroup.java
Patch:
@@ -49,7 +49,7 @@ public interface DirectlyModifiableTopLevelItemGroup extends ModifiableTopLevelI
      * @param <I> the kind of item
      * @param item an item to add which is currently elsewhere
      * @param name the desired item name in this group (might simply be the original {@link Item#getName})
-     * @return normally the same {@code item}, but might be a new cppy if necessary
+     * @return normally the same {@code item}, but might be a new copy if necessary
      * @throws IOException if adding fails
      * @throws IllegalArgumentException if {@link #canAdd} is false, or an item with this name already exists, or this item is as yet unnamed
      */

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3693,7 +3693,7 @@ private void _cleanUpPersistQueue(List<Throwable> errors) {
     }
 
     private void _cleanUpShutdownThreadPoolForLoad(List<Throwable> errors) {
-        LOGGER.log(FINE, "Shuting down Jenkins load thread pool");
+        LOGGER.log(FINE, "Shutting down Jenkins load thread pool");
         try {
             threadPoolForLoad.shutdown();
         } catch (SecurityException e) {

File: core/src/main/java/jenkins/model/SimplePageDecorator.java
Patch:
@@ -67,7 +67,7 @@ public static List<SimplePageDecorator> all() {
     }
 
     /**
-     * The first found LoginDecarator, there can only be one.
+     * The first found LoginDecorator, there can only be one.
      * @return the first found {@link SimplePageDecorator}
      */
     public static SimplePageDecorator first(){

File: core/src/main/java/jenkins/org/apache/commons/validator/routines/UrlValidator.java
Patch:
@@ -266,7 +266,7 @@ public UrlValidator(RegexValidator authorityValidator, long options) {
     }
     
     /**
-     * Customizable constructor. Validation behavior is modifed by passing in options.
+     * Customizable constructor. Validation behavior is modified by passing in options.
      * @param schemes the set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.
      * @param authorityValidator Regular expression validator used to validate the authority part
      * @param options Validation options. Set using the public constants of this class.
@@ -381,7 +381,7 @@ protected boolean isValidScheme(String scheme) {
      * If a RegexValidator was supplied and it matches, then the authority is regarded
      * as valid with no further checks, otherwise the method checks against the
      * AUTHORITY_PATTERN and the DomainValidator (ALLOW_LOCAL_URLS)
-     * @param authority Authority value to validate, alllows IDN
+     * @param authority Authority value to validate, allows IDN
      * @return true if authority (hostname and port) is valid.
      */
     protected boolean isValidAuthority(String authority) {

File: core/src/main/java/jenkins/security/BasicHeaderProcessor.java
Patch:
@@ -119,7 +119,7 @@ protected boolean authenticationIsRequired(String username) {
         }
 
         // Handle unusual condition where an AnonymousAuthenticationToken is already present
-        // This shouldn't happen very often, as BasicProcessingFitler is meant to be earlier in the filter
+        // This shouldn't happen very often, as BasicProcessingFilter is meant to be earlier in the filter
         // chain than AnonymousProcessingFilter. Nevertheless, presence of both an AnonymousAuthenticationToken
         // together with a BASIC authentication request header should indicate reauthentication using the
         // BASIC protocol is desirable. This behaviour is also consistent with that provided by form and digest,

File: core/src/main/java/jenkins/security/MasterToSlaveCallable.java
Patch:
@@ -36,7 +36,7 @@ public Channel getChannelOrFail() throws ChannelClosedException {
         return ch;
     }
 
-    //TODO: remove once Callable#getOpenChannelOrFail() once Minimaumsupported Remoting version is 3.15 or above
+    //TODO: remove Callable#getOpenChannelOrFail() once minimum supported Remoting version is 3.15 or above
     @Override
     public Channel getOpenChannelOrFail() throws ChannelClosedException {
         final Channel ch = getChannelOrFail();

File: core/src/main/java/jenkins/util/AntClassLoader.java
Patch:
@@ -852,7 +852,7 @@ private boolean isParentFirst(String resourceName) {
     }
 
     /**
-     * Used for isolated resource seaching.
+     * Used for isolated resource searching.
      * @return the root classloader of AntClassLoader.
      */
     private ClassLoader getRootLoader() {

File: core/src/main/java/jenkins/util/java/JavaUtils.java
Patch:
@@ -36,7 +36,7 @@
 public class JavaUtils {
 
     private JavaUtils() {
-        // Cannnot construct
+        // Cannot construct
     }
 
     /**

File: core/src/test/java/hudson/model/AbstractItemTest.java
Patch:
@@ -30,7 +30,7 @@ public Collection<? extends Job> getAllJobs() {
         }
         
         /**
-         * Override save so that nothig happens when setDisplayName() is called
+         * Override save so that nothing happens when setDisplayName() is called
          */
         @Override
         public void save() {

File: core/src/test/java/hudson/model/FingerprintCleanupThreadTest.java
Patch:
@@ -65,7 +65,7 @@ public void testFingerprintFileIsEmpty() throws IOException {
     }
 
     @Test
-    public void testGetRecurencePeriod() throws IOException {
+    public void testGetRecurrencePeriod() throws IOException {
         FingerprintCleanupThread cleanupThread = new TestFingerprintCleanupThread(new TestFingerprint());
         assertEquals("Wrong recurrence period.", PeriodicWork.DAY, cleanupThread.getRecurrencePeriod());
     }

File: core/src/test/java/jenkins/model/lazy/FakeMapBuilder.java
Patch:
@@ -54,7 +54,7 @@ public FakeMapBuilder add(int n) throws IOException {
     }
 
     /**
-     * Adds a build record under the givn ID but make it unloadable,
+     * Adds a build record under the given ID but make it unloadable,
      * which will cause a failure when a load is attempted on this build ID.
      */
     public FakeMapBuilder addUnloadable(int n) throws IOException {

File: test/src/test/java/hudson/cli/ConsoleCommandTest.java
Patch:
@@ -106,7 +106,7 @@ public class ConsoleCommandTest {
         assertThat(result.stderr(), containsString("ERROR: No such job 'never_created'"));
     }
 
-    @Test public void consoleShouldFailWhenLastBuildDoesNotdExist() throws Exception {
+    @Test public void consoleShouldFailWhenLastBuildDoesNotExist() throws Exception {
 
         j.createFreeStyleProject("aProject");
 

File: test/src/test/java/hudson/model/ApiSecurity1129Test.java
Patch:
@@ -43,7 +43,7 @@ public void wrapperBadName() throws Exception {
     }
 
     /**
-     * Test thw erapper parameter with a good name, to ensure the security fix doesn't break anything.
+     * Test the wrapper parameter with a good name, to ensure the security fix doesn't break anything.
      * @throws Exception See {@link #checkWrapperParam(String, Integer, String)}
      */
     @Issue("SECURITY-1129")
@@ -55,9 +55,9 @@ public void wrapperGoodName() throws Exception {
     }
 
     /**
-     * Check the response for a XML api with the wrapper param specified. At least the statuCode or the responseMessage
+     * Check the response for a XML api with the wrapper param specified. At least the statusCode or the responseMessage
      * should be indicated.
-     * @param wrapper the wrapper param passed in theurl.
+     * @param wrapper the wrapper param passed in the url.
      * @param statusCode the status code expected in the response. If it's null, it's not checked.
      * @param responseMessage the message expected in the response. If it's null, it's not checked.
      * @throws IOException See {@link org.jvnet.hudson.test.JenkinsRule.WebClient#goTo(String, String)}

File: test/src/test/java/hudson/model/BuildAuthorizationTokenTest.java
Patch:
@@ -65,7 +65,7 @@ public void triggerJobsWithoutTokenShouldFail() throws Exception {
             fail("should not reach here as anonymous does not have Item.BUILD and token is not set");
         }
         catch (FailingHttpStatusCodeException fex) {
-            assertThat("Should fail with access denined", fex.getStatusCode(), is(403));
+            assertThat("Should fail with access denied", fex.getStatusCode(), is(403));
         }
     }
 

File: test/src/test/java/hudson/model/ExecutorTest.java
Patch:
@@ -116,7 +116,7 @@ public void disconnectCause() throws Exception {
         assertThat(log, containsString("Finished: FAILURE"));
         assertThat(log, containsString("Build step 'BlockingBuilder' marked build as failure"));
         assertThat(log, containsString("Agent went offline during the build"));
-        assertThat(log, containsString("Disconnected by Johnny : Taking offline to break your buil"));
+        assertThat(log, containsString("Disconnected by Johnny : Taking offline to break your build"));
     }
 
     @Issue("SECURITY-611")

File: test/src/test/java/hudson/model/NodeTest.java
Patch:
@@ -208,8 +208,8 @@ public void testCanTake() throws Exception {
         assertEquals("Cause of blockage should be reserved label.", message, node.canTake(item2).getShortDescription());
         node.getNodeProperties().add(new NodePropertyImpl());
         notTake = true;
-        assertNotNull("Node should not take project because node property not alow it.", node.canTake(item));
-        assertTrue("Cause of blockage should be bussy label.", node.canTake(item) instanceof CauseOfBlockage.BecauseLabelIsBusy);
+        assertNotNull("Node should not take project because node property does not allow it.", node.canTake(item));
+        assertTrue("Cause of blockage should be busy label.", node.canTake(item) instanceof CauseOfBlockage.BecauseLabelIsBusy);
         User user = User.get("John");
         GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();
         j.jenkins.setAuthorizationStrategy(auth);
@@ -221,7 +221,7 @@ public void testCanTake() throws Exception {
         QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(project.getFullName(), user.impersonate())));
         assertNotNull("Node should not take project because user does not have build permission.", node.canTake(item));
         message = Messages._Node_LackingBuildPermission(item.authenticate().getName(),node.getNodeName()).toString();
-        assertEquals("Cause of blockage should be bussy label.", message, node.canTake(item).getShortDescription());
+        assertEquals("Cause of blockage should be build permission label.", message, node.canTake(item).getShortDescription());
     }
 
     @Test

File: test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java
Patch:
@@ -144,7 +144,7 @@ public void fullNameCollisionPassword() throws Exception {
         // throws FailingHttpStatusCodeException on login failure
         wc2.login("user2", "password2");
 
-        // belt and braces incase the failed login no longer throws exceptions.
+        // belt and braces in case the failed login no longer throws exceptions.
         w1 = (XmlPage) wc1.goTo("whoAmI/api/xml", "application/xml");
         assertThat(w1, hasXPath("//name", is("user1")));
         

File: test/src/test/java/hudson/slaves/JNLPLauncherTest.java
Patch:
@@ -98,7 +98,7 @@ public void testLaunchWithWorkDir() throws Exception {
 
     /**
      * Tests the '-headless' option.
-     * (Although this test doesn't really assert that the agent really is running in a headless mdoe.)
+     * (Although this test doesn't really assert that the agent really is running in a headless mode.)
      */
     @Test
     public void testHeadlessLaunch() throws Exception {

File: test/src/test/java/jenkins/install/InstallStateTest.java
Patch:
@@ -49,7 +49,7 @@ public class InstallStateTest {
     public JenkinsRule j = new JenkinsRule();
     
     @Test
-    public void shouldPefromCorrectConversionForAllNames() {
+    public void shouldPerformCorrectConversionForAllNames() {
         ExtensionList<InstallState> states = InstallState.all();
         for (InstallState state : states) {
             InstallState afterRoundtrip = forName(state.name());

File: core/src/main/java/hudson/cli/DisablePluginCommand.java
Patch:
@@ -164,7 +164,7 @@ private void restartIfNecessary(List<PluginWrapper.PluginDisableResult> results)
 
     /**
      * Restart if this particular result of the disablement of a plugin and its dependent plugins (depending on the
-     * strategy used) has a plugin disablexd.
+     * strategy used) has a plugin disabled.
      * @param oneResult the result of a plugin (and its dependents).
      * @return true if it end up in restarting jenkins.
      */

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1072,7 +1072,7 @@ public CauseOfBlockage getCauseOfBlockage() {
                 return new BlockedBecauseOfBuildInProgress(lastBuild);
             } else {
                 // The build has been likely deleted after the isLogUpdated() call.
-                // Another cause may be an API implementation glitсh in the implementation for AbstractProject. 
+                // Another cause may be an API implementation glitch in the implementation for AbstractProject.
                 // Anyway, we should let the code go then.
                 LOGGER.log(Level.FINE, "The last build has been deleted during the non-concurrent cause creation. The build is not blocked anymore");
             }

File: core/src/main/java/hudson/model/CheckPoint.java
Patch:
@@ -101,7 +101,7 @@ public String toString() {
     }
 
     /**
-     * Records that the execution of the build has reached to a check point, idenified
+     * Records that the execution of the build has reached to a check point, identified
      * by the given identifier.
      *
      * <p>

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -691,7 +691,7 @@ public Object onConvert(Type targetType, Class targetTypeErasure, Object jsonSou
     private T verifyNewInstance(T t) {
         if (t!=null && t.getDescriptor()!=this) {
             // TODO: should this be a fatal error?
-            LOGGER.warning("Father of "+ t+" and its getDescriptor() points to two different instances. Probably malplaced @Extension. See http://hudson.361315.n4.nabble.com/Help-Hint-needed-Post-build-action-doesn-t-stay-activated-td2308833.html");
+            LOGGER.warning("Father of "+ t+" and its getDescriptor() points to two different instances. Probably misplaced @Extension. See http://hudson.361315.n4.nabble.com/Help-Hint-needed-Post-build-action-doesn-t-stay-activated-td2308833.html");
         }
         return t;
     }

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -403,7 +403,7 @@ public EnvVars getCharacteristicEnvVars() {
     }
 
     /**
-     * Programatically updates the next build number.
+     * Programmatically updates the next build number.
      * 
      * <p>
      * Much of Hudson assumes that the build number is unique and monotonic, so

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -640,7 +640,7 @@ public final boolean isKeepLog() {
     }
 
     /**
-     * Same as {@link #getTimestamp()} but in a different type, that is since the time of the epoc.
+     * Same as {@link #getTimestamp()} but in a different type, that is since the time of the epoch.
      */
     public final long getTimeInMillis() {
         return timestamp;
@@ -2610,7 +2610,7 @@ public Object getTarget() {
     public static class RedirectUp {
         public void doDynamic(StaplerResponse rsp) throws IOException {
             // Compromise to handle both browsers (auto-redirect) and programmatic access
-            // (want accurate 404 response).. send 404 with javscript to redirect browsers.
+            // (want accurate 404 response).. send 404 with javascript to redirect browsers.
             rsp.setStatus(HttpServletResponse.SC_NOT_FOUND);
             rsp.setContentType("text/html;charset=UTF-8");
             PrintWriter out = rsp.getWriter();

File: core/src/main/java/hudson/model/RunAction.java
Patch:
@@ -39,7 +39,7 @@ public interface RunAction extends Action {
     void onLoad();
 
     /**
-     * Called when the action is aded to the {@link Run} object.
+     * Called when the action is added to the {@link Run} object.
      * @since 1.376
      */
     void onAttached(Run r);

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -512,7 +512,7 @@ public Launcher createLauncher(TaskListener listener) {
             if (isUnix == null) {
                 // isUnix is always set when the channel is not null, so it should never happen
                 reportLauncherCreateError("The agent has not been fully initialized yet",
-                                         "Cannot determing if the agent is a Unix one, the System status request has not completed yet. " +
+                                         "Cannot determine if the agent is a Unix one, the System status request has not completed yet. " +
                                          "It is an invalid channel state, please report a bug to Jenkins if you see it.", 
                                          listener);
                 return new Launcher.DummyLauncher(listener);

File: core/src/main/java/hudson/model/ViewGroupMixIn.java
Patch:
@@ -47,7 +47,7 @@
  * private ViewsTabBar viewsTabBar;
  * }</pre>
  * <li>
- * Define a transient field and store ViewGroupMixIn subype, then wire up getters and setters:
+ * Define a transient field and store ViewGroupMixIn subtype, then wire up getters and setters:
  * <pre>
  * private transient ViewGroupMixIn = new ViewGroupMixIn() {
  *     List&lt;View&gt; views() { return views; }

File: core/src/main/java/hudson/os/WindowsUtil.java
Patch:
@@ -48,7 +48,7 @@ public class WindowsUtil {
      * Quotes an argument while escaping special characters interpreted by CreateProcess.
      *
      * @param argument argument to be quoted or escaped for windows shells.
-     * @return properly quoted and escaped windows arguemnts.
+     * @return properly quoted and escaped windows arguments.
      */
     public static @Nonnull String quoteArgument(@Nonnull String argument) {
         if (!NEEDS_QUOTING.matcher(argument).find()) return argument;

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -659,7 +659,7 @@ private static RememberMeServices createRememberMeService(UserDetailsService uds
             rms.setUserDetailsService(uds);
             /*
                 TokenBasedRememberMeServices needs to be used in conjunction with RememberMeAuthenticationProvider,
-                and both needs to use the same key (this is a reflection of a poor design in AcgeiSecurity, if you ask me)
+                and both needs to use the same key (this is a reflection of a poor design in AcegiSecurity, if you ask me)
                 and various security plugins have its own groovy script that configures them.
 
                 So if we change this, it creates a painful situation for those plugins by forcing them to choose

File: core/src/main/java/hudson/slaves/ComputerLauncher.java
Patch:
@@ -54,7 +54,7 @@
 public abstract class ComputerLauncher extends AbstractDescribableImpl<ComputerLauncher> implements ExtensionPoint {
     /**
      * Returns true if this {@link ComputerLauncher} supports
-     * programatic launch of the agent in the target {@link Computer}.
+     * programmatic launch of the agent in the target {@link Computer}.
      */
     public boolean isLaunchSupported() {
         return true;

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -327,7 +327,7 @@ public static DescriptorExtensionList<Trigger<?>,TriggerDescriptor> all() {
     }
 
     /**
-     * Returns a subset of {@link TriggerDescriptor}s that applys to the given item.
+     * Returns a subset of {@link TriggerDescriptor}s that applies to the given item.
      */
     public static List<TriggerDescriptor> for_(Item i) {
         List<TriggerDescriptor> r = new ArrayList<>();

File: core/src/main/java/hudson/triggers/Triggers.java
Patch:
@@ -51,7 +51,7 @@ public class Triggers {
 //    );
 
     /**
-     * Returns a subset of {@link TriggerDescriptor}s that applys to the given item.
+     * Returns a subset of {@link TriggerDescriptor}s that applies to the given item.
      *
      * @deprecated as of 1.286
      *      Use {@link Trigger#for_(Item)}.

File: core/src/main/java/hudson/util/ListBoxModel.java
Patch:
@@ -173,7 +173,7 @@ public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object nod
 
     /**
      * @deprecated
-     *      Exposed for stapler. Not meant for programatic consumption.
+     *      Exposed for stapler. Not meant for programmatic consumption.
      */
     @Exported
     @Deprecated

File: core/src/main/java/hudson/util/MultipartFormDataParser.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.HashMap;
 
 /**
- * Wraps commons file-upload and handles a "multipart/form-data" form submisison
+ * Wraps commons file-upload and handles a "multipart/form-data" form submission
  * (that often includes file upload.)
  *
  * @author Kohsuke Kawaguchi

File: core/src/main/java/jenkins/model/DirectlyModifiableTopLevelItemGroup.java
Patch:
@@ -49,7 +49,7 @@ public interface DirectlyModifiableTopLevelItemGroup extends ModifiableTopLevelI
      * @param <I> the kind of item
      * @param item an item to add which is currently elsewhere
      * @param name the desired item name in this group (might simply be the original {@link Item#getName})
-     * @return normally the same {@code item}, but might be a new cppy if necessary
+     * @return normally the same {@code item}, but might be a new copy if necessary
      * @throws IOException if adding fails
      * @throws IllegalArgumentException if {@link #canAdd} is false, or an item with this name already exists, or this item is as yet unnamed
      */

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3693,7 +3693,7 @@ private void _cleanUpPersistQueue(List<Throwable> errors) {
     }
 
     private void _cleanUpShutdownThreadPoolForLoad(List<Throwable> errors) {
-        LOGGER.log(FINE, "Shuting down Jenkins load thread pool");
+        LOGGER.log(FINE, "Shutting down Jenkins load thread pool");
         try {
             threadPoolForLoad.shutdown();
         } catch (SecurityException e) {

File: core/src/main/java/jenkins/model/SimplePageDecorator.java
Patch:
@@ -67,7 +67,7 @@ public static List<SimplePageDecorator> all() {
     }
 
     /**
-     * The first found LoginDecarator, there can only be one.
+     * The first found LoginDecorator, there can only be one.
      * @return the first found {@link SimplePageDecorator}
      */
     public static SimplePageDecorator first(){

File: core/src/main/java/jenkins/org/apache/commons/validator/routines/UrlValidator.java
Patch:
@@ -266,7 +266,7 @@ public UrlValidator(RegexValidator authorityValidator, long options) {
     }
     
     /**
-     * Customizable constructor. Validation behavior is modifed by passing in options.
+     * Customizable constructor. Validation behavior is modified by passing in options.
      * @param schemes the set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.
      * @param authorityValidator Regular expression validator used to validate the authority part
      * @param options Validation options. Set using the public constants of this class.
@@ -381,7 +381,7 @@ protected boolean isValidScheme(String scheme) {
      * If a RegexValidator was supplied and it matches, then the authority is regarded
      * as valid with no further checks, otherwise the method checks against the
      * AUTHORITY_PATTERN and the DomainValidator (ALLOW_LOCAL_URLS)
-     * @param authority Authority value to validate, alllows IDN
+     * @param authority Authority value to validate, allows IDN
      * @return true if authority (hostname and port) is valid.
      */
     protected boolean isValidAuthority(String authority) {

File: core/src/main/java/jenkins/security/BasicHeaderProcessor.java
Patch:
@@ -119,7 +119,7 @@ protected boolean authenticationIsRequired(String username) {
         }
 
         // Handle unusual condition where an AnonymousAuthenticationToken is already present
-        // This shouldn't happen very often, as BasicProcessingFitler is meant to be earlier in the filter
+        // This shouldn't happen very often, as BasicProcessingFilter is meant to be earlier in the filter
         // chain than AnonymousProcessingFilter. Nevertheless, presence of both an AnonymousAuthenticationToken
         // together with a BASIC authentication request header should indicate reauthentication using the
         // BASIC protocol is desirable. This behaviour is also consistent with that provided by form and digest,

File: core/src/main/java/jenkins/security/MasterToSlaveCallable.java
Patch:
@@ -36,7 +36,7 @@ public Channel getChannelOrFail() throws ChannelClosedException {
         return ch;
     }
 
-    //TODO: remove once Callable#getOpenChannelOrFail() once Minimaumsupported Remoting version is 3.15 or above
+    //TODO: remove Callable#getOpenChannelOrFail() once minimum supported Remoting version is 3.15 or above
     @Override
     public Channel getOpenChannelOrFail() throws ChannelClosedException {
         final Channel ch = getChannelOrFail();

File: core/src/main/java/jenkins/util/AntClassLoader.java
Patch:
@@ -851,7 +851,7 @@ private boolean isParentFirst(String resourceName) {
     }
 
     /**
-     * Used for isolated resource seaching.
+     * Used for isolated resource searching.
      * @return the root classloader of AntClassLoader.
      */
     private ClassLoader getRootLoader() {

File: core/src/main/java/jenkins/util/java/JavaUtils.java
Patch:
@@ -36,7 +36,7 @@
 public class JavaUtils {
 
     private JavaUtils() {
-        // Cannnot construct
+        // Cannot construct
     }
 
     /**

File: core/src/test/java/hudson/model/AbstractItemTest.java
Patch:
@@ -30,7 +30,7 @@ public Collection<? extends Job> getAllJobs() {
         }
         
         /**
-         * Override save so that nothig happens when setDisplayName() is called
+         * Override save so that nothing happens when setDisplayName() is called
          */
         @Override
         public void save() {

File: core/src/test/java/hudson/model/FingerprintCleanupThreadTest.java
Patch:
@@ -65,7 +65,7 @@ public void testFingerprintFileIsEmpty() throws IOException {
     }
 
     @Test
-    public void testGetRecurencePeriod() throws IOException {
+    public void testGetRecurrencePeriod() throws IOException {
         FingerprintCleanupThread cleanupThread = new TestFingerprintCleanupThread(new TestFingerprint());
         assertEquals("Wrong recurrence period.", PeriodicWork.DAY, cleanupThread.getRecurrencePeriod());
     }

File: core/src/test/java/jenkins/model/lazy/FakeMapBuilder.java
Patch:
@@ -54,7 +54,7 @@ public FakeMapBuilder add(int n) throws IOException {
     }
 
     /**
-     * Adds a build record under the givn ID but make it unloadable,
+     * Adds a build record under the given ID but make it unloadable,
      * which will cause a failure when a load is attempted on this build ID.
      */
     public FakeMapBuilder addUnloadable(int n) throws IOException {

File: test/src/test/java/hudson/cli/ConsoleCommandTest.java
Patch:
@@ -106,7 +106,7 @@ public class ConsoleCommandTest {
         assertThat(result.stderr(), containsString("ERROR: No such job 'never_created'"));
     }
 
-    @Test public void consoleShouldFailWhenLastBuildDoesNotdExist() throws Exception {
+    @Test public void consoleShouldFailWhenLastBuildDoesNotExist() throws Exception {
 
         j.createFreeStyleProject("aProject");
 

File: test/src/test/java/hudson/model/ApiSecurity1129Test.java
Patch:
@@ -43,7 +43,7 @@ public void wrapperBadName() throws Exception {
     }
 
     /**
-     * Test thw erapper parameter with a good name, to ensure the security fix doesn't break anything.
+     * Test the wrapper parameter with a good name, to ensure the security fix doesn't break anything.
      * @throws Exception See {@link #checkWrapperParam(String, Integer, String)}
      */
     @Issue("SECURITY-1129")
@@ -55,9 +55,9 @@ public void wrapperGoodName() throws Exception {
     }
 
     /**
-     * Check the response for a XML api with the wrapper param specified. At least the statuCode or the responseMessage
+     * Check the response for a XML api with the wrapper param specified. At least the statusCode or the responseMessage
      * should be indicated.
-     * @param wrapper the wrapper param passed in theurl.
+     * @param wrapper the wrapper param passed in the url.
      * @param statusCode the status code expected in the response. If it's null, it's not checked.
      * @param responseMessage the message expected in the response. If it's null, it's not checked.
      * @throws IOException See {@link org.jvnet.hudson.test.JenkinsRule.WebClient#goTo(String, String)}

File: test/src/test/java/hudson/model/BuildAuthorizationTokenTest.java
Patch:
@@ -65,7 +65,7 @@ public void triggerJobsWithoutTokenShouldFail() throws Exception {
             fail("should not reach here as anonymous does not have Item.BUILD and token is not set");
         }
         catch (FailingHttpStatusCodeException fex) {
-            assertThat("Should fail with access denined", fex.getStatusCode(), is(403));
+            assertThat("Should fail with access denied", fex.getStatusCode(), is(403));
         }
     }
 

File: test/src/test/java/hudson/model/ExecutorTest.java
Patch:
@@ -116,7 +116,7 @@ public void disconnectCause() throws Exception {
         assertThat(log, containsString("Finished: FAILURE"));
         assertThat(log, containsString("Build step 'BlockingBuilder' marked build as failure"));
         assertThat(log, containsString("Agent went offline during the build"));
-        assertThat(log, containsString("Disconnected by Johnny : Taking offline to break your buil"));
+        assertThat(log, containsString("Disconnected by Johnny : Taking offline to break your build"));
     }
 
     @Issue("SECURITY-611")

File: test/src/test/java/hudson/model/NodeTest.java
Patch:
@@ -208,8 +208,8 @@ public void testCanTake() throws Exception {
         assertEquals("Cause of blockage should be reserved label.", message, node.canTake(item2).getShortDescription());
         node.getNodeProperties().add(new NodePropertyImpl());
         notTake = true;
-        assertNotNull("Node should not take project because node property not alow it.", node.canTake(item));
-        assertTrue("Cause of blockage should be bussy label.", node.canTake(item) instanceof CauseOfBlockage.BecauseLabelIsBusy);
+        assertNotNull("Node should not take project because node property does not allow it.", node.canTake(item));
+        assertTrue("Cause of blockage should be busy label.", node.canTake(item) instanceof CauseOfBlockage.BecauseLabelIsBusy);
         User user = User.get("John");
         GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();
         j.jenkins.setAuthorizationStrategy(auth);
@@ -221,7 +221,7 @@ public void testCanTake() throws Exception {
         QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(project.getFullName(), user.impersonate())));
         assertNotNull("Node should not take project because user does not have build permission.", node.canTake(item));
         message = Messages._Node_LackingBuildPermission(item.authenticate().getName(),node.getNodeName()).toString();
-        assertEquals("Cause of blockage should be bussy label.", message, node.canTake(item).getShortDescription());
+        assertEquals("Cause of blockage should be build permission label.", message, node.canTake(item).getShortDescription());
     }
 
     @Test

File: test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java
Patch:
@@ -144,7 +144,7 @@ public void fullNameCollisionPassword() throws Exception {
         // throws FailingHttpStatusCodeException on login failure
         wc2.login("user2", "password2");
 
-        // belt and braces incase the failed login no longer throws exceptions.
+        // belt and braces in case the failed login no longer throws exceptions.
         w1 = (XmlPage) wc1.goTo("whoAmI/api/xml", "application/xml");
         assertThat(w1, hasXPath("//name", is("user1")));
         

File: test/src/test/java/hudson/slaves/JNLPLauncherTest.java
Patch:
@@ -98,7 +98,7 @@ public void testLaunchWithWorkDir() throws Exception {
 
     /**
      * Tests the '-headless' option.
-     * (Although this test doesn't really assert that the agent really is running in a headless mdoe.)
+     * (Although this test doesn't really assert that the agent really is running in a headless mode.)
      */
     @Test
     public void testHeadlessLaunch() throws Exception {

File: test/src/test/java/jenkins/install/InstallStateTest.java
Patch:
@@ -49,7 +49,7 @@ public class InstallStateTest {
     public JenkinsRule j = new JenkinsRule();
     
     @Test
-    public void shouldPefromCorrectConversionForAllNames() {
+    public void shouldPerformCorrectConversionForAllNames() {
         ExtensionList<InstallState> states = InstallState.all();
         for (InstallState state : states) {
             InstallState afterRoundtrip = forName(state.name());

File: core/src/main/java/hudson/Util.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.TaskListener;
 import jenkins.util.MemoryReductionUtil;
 import hudson.util.QuotedStringTokenizer;
@@ -692,6 +693,7 @@ public static byte[] fromHexString(@Nonnull String data) {
      *      number of milliseconds.
      */
     @Nonnull
+    @SuppressFBWarnings(value = "ICAST_IDIV_CAST_TO_DOUBLE", justification = "We want to truncate here.")
     public static String getTimeSpanString(long duration) {
         // Break the duration up in to units.
         long years = duration / ONE_YEAR_MS;

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -2417,6 +2417,7 @@ public String getName() {
      */
     @Restricted(NoExternalUse.class)
     @ExportedBean(defaultVisibility = 999)
+    @SuppressFBWarnings(value = "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD", justification = "it is exported, so it might be used")
     public class StubItem {
 
         @Exported public StubTask task;

File: core/src/main/java/hudson/ProxyConfiguration.java
Patch:
@@ -380,7 +380,7 @@ private static ProxyConfiguration get() {
     private static ProxyConfiguration _get() {
         JenkinsJVM.checkJenkinsJVM();
         // this code could be called between the JVM flag being set and theInstance initialized
-        Jenkins jenkins = Jenkins.get();
+        Jenkins jenkins = Jenkins.getInstanceOrNull();
         return jenkins == null ? null : jenkins.proxy;
     }
 

File: core/src/main/java/hudson/console/ConsoleNote.java
Patch:
@@ -270,7 +270,8 @@ public static ConsoleNote readFrom(DataInputStream in) throws IOException, Class
                 }
             }
 
-            Jenkins jenkins = Jenkins.get();
+            Jenkins jenkins = Jenkins.getInstanceOrNull();
+
             try (ObjectInputStream ois = new ObjectInputStreamEx(new GZIPInputStream(new ByteArrayInputStream(buf)),
                     jenkins != null ? jenkins.pluginManager.uberClassLoader : ConsoleNote.class.getClassLoader(),
                     ClassFilter.DEFAULT)) {

File: core/src/main/java/hudson/model/Cause.java
Patch:
@@ -333,7 +333,6 @@ public static class ConverterImpl extends XStream2.PassthruConverter<UpstreamCau
             public ConverterImpl(XStream2 xstream) { super(xstream); }
             @Override protected void callback(UpstreamCause uc, UnmarshallingContext context) {
                 if (uc.upstreamCause != null) {
-                    if (uc.upstreamCauses == null) uc.upstreamCauses = new ArrayList<>();
                     uc.upstreamCauses.add(uc.upstreamCause);
                     uc.upstreamCause = null;
                     OldDataMonitor.report(context, "1.288");

File: core/src/main/java/hudson/model/Result.java
Patch:
@@ -195,9 +195,10 @@ public OptionHandlerImpl(CmdLineParser parser, OptionDef option, Setter<? super
         public int parseArguments(Parameters params) throws CmdLineException {
             String param = params.getParameter(0);
             Result v = fromString(param.replace('-', '_'));
-            if (v==null)
+            if (v== FAILURE) {
                 throw new CmdLineException(owner,"No such status '"+param+"'. Did you mean "+
                         EditDistance.findNearest(param.replace('-', '_').toUpperCase(), getNames()));
+            }
             setter.addValue(v);
             return 1;
         }

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -2411,6 +2411,7 @@ public String getName() {
      */
     @Restricted(NoExternalUse.class)
     @ExportedBean(defaultVisibility = 999)
+    @SuppressFBWarnings(value = "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD", justification = "it is exported, so it might be used")
     public class StubItem {
 
         @Exported public StubTask task;

File: core/src/main/java/hudson/Util.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.TaskListener;
 import jenkins.util.MemoryReductionUtil;
 import hudson.util.QuotedStringTokenizer;
@@ -692,6 +693,7 @@ public static byte[] fromHexString(@Nonnull String data) {
      *      number of milliseconds.
      */
     @Nonnull
+    @SuppressFBWarnings(value = "ICAST_IDIV_CAST_TO_DOUBLE", justification = "We want to truncate here.")
     public static String getTimeSpanString(long duration) {
         // Break the duration up in to units.
         long years = duration / ONE_YEAR_MS;

File: core/src/main/java/hudson/util/spring/DefaultRuntimeSpringConfiguration.java
Patch:
@@ -201,8 +201,7 @@ public void registerBeansWithContext(StaticApplicationContext applicationContext
             applicationContext.registerBeanDefinition(bc.getName(),
                     bc.getBeanDefinition());
         }
-        for (String key : beanDefinitions.keySet()) {
-            BeanDefinition bd = beanDefinitions.get(key);
+        beanDefinitions.forEach((key, bd) -> {
             if (LOGGER.isLoggable(Level.FINER)) {
                 LOGGER.finer("[RuntimeConfiguration] Registering bean [" + key + "]");
                 if (LOGGER.isLoggable(Level.FINEST)) {
@@ -217,7 +216,7 @@ public void registerBeansWithContext(StaticApplicationContext applicationContext
 
             applicationContext.registerBeanDefinition(key, bd);
 
-        }
+        });
     }
 
     /**

File: core/src/main/java/jenkins/model/PeepholePermalink.java
Patch:
@@ -179,8 +179,7 @@ protected void updateCache(@Nonnull Job<?,?> job, @CheckForNull Run<?,?> b) {
             cache.put(getId(), b == null ? RESOLVES_TO_NONE : b.getNumber());
             File storage = storageFor(buildDir);
             LOGGER.fine(() -> "saving to " + storage + ": " + cache);
-            try {
-                AtomicFileWriter cw = new AtomicFileWriter(storage);
+            try (AtomicFileWriter cw = new AtomicFileWriter(storage)) {
                 try {
                     for (Map.Entry<String, Integer> entry : cache.entrySet()) {
                         cw.write(entry.getKey());

File: core/src/main/java/jenkins/model/RunIdMigrator.java
Patch:
@@ -117,8 +117,7 @@ private boolean load(File dir) {
 
     private void save(File dir) {
         File f = new File(dir, MAP_FILE);
-        try {
-            AtomicFileWriter w = new AtomicFileWriter(f);
+        try (AtomicFileWriter w = new AtomicFileWriter(f)) {
             try {
                 for (Map.Entry<String,Integer> entry : idToNumber.entrySet()) {
                     w.write(entry.getKey() + ' ' + entry.getValue() + '\n');

File: core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java
Patch:
@@ -142,7 +142,7 @@ protected void fix(TaskListener listener) throws Exception {
             PrintStream log = listener.getLogger();
             log.println("Started re-keying " + new Date());
             int count = rewriter.rewriteRecursive(Jenkins.get().getRootDir(), listener);
-            log.printf("Completed re-keying %d files on %s\n",count,new Date());
+            log.printf("Completed re-keying %d files on %s%n",count,new Date());
             new RekeySecretAdminMonitor().done.on();
             LOGGER.info("Secret re-keying completed");
         } catch (Exception e) {

File: core/src/main/java/jenkins/security/s2m/ConfigDirectory.java
Patch:
@@ -42,8 +42,7 @@ public boolean accept(File dir, String name) {
 
                 for (String fragment : fragments) {
                     File f = new File(dir, fragment);
-                    try {
-                        BufferedReader reader = new BufferedReader(new FileReader(f));
+                    try (BufferedReader reader = new BufferedReader(new FileReader(f))) {
                         String line;
                         while ((line=reader.readLine())!=null) {
                             if (line.startsWith("#")) continue;   // comment

File: core/src/main/java/hudson/Launcher.java
Patch:
@@ -23,7 +23,6 @@
  */
 package hudson;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Proc.LocalProc;
 import hudson.model.Computer;
 import jenkins.util.MemoryReductionUtil;
@@ -1038,8 +1037,6 @@ public RemoteLauncher(@Nonnull TaskListener listener, @Nonnull VirtualChannel ch
 
         @Override
         @Nonnull
-        @SuppressFBWarnings(value = "NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE", 
-                justification = "We always require nonnull channel when we initialize this launcher")
         public VirtualChannel getChannel() {
             VirtualChannel vc = super.getChannel();
             if (vc == null) {

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -47,7 +47,6 @@
 import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
 import com.thoughtworks.xstream.io.ReaderWrapper;
 import com.thoughtworks.xstream.mapper.CannotResolveClassException;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.PluginManager;
 import hudson.PluginWrapper;
 import hudson.XmlFile;
@@ -516,7 +515,6 @@ class PluginClassOwnership implements ClassOwnership {
 
         private PluginManager pm;
 
-        @SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE") // classOwnership checked for null so why does FB complain?
         @Override public String ownerOf(Class<?> clazz) {
             if (classOwnership != null) {
                 return classOwnership.ownerOf(clazz);

File: core/src/main/java/jenkins/security/ApiTokenProperty.java
Patch:
@@ -154,7 +154,6 @@ protected void setUser(User u) {
      * @since 1.426, and since 1.638 the method performs security checks
      */
     @Nonnull
-    @SuppressFBWarnings("NP_NONNULL_RETURN_VIOLATION")
     public String getApiToken() {
         LOGGER.log(Level.FINE, "Deprecated usage of getApiToken");
         if(LOGGER.isLoggable(Level.FINER)){

File: core/src/main/java/jenkins/security/apitoken/ApiTokenStore.java
Patch:
@@ -190,7 +190,6 @@ private void addLegacyToken(@Nonnull Secret legacyToken, boolean migrationFromEx
         return new TokenUuidAndPlainValue(token.uuid, tokenTheUserWillUse);
     }
     
-    @SuppressFBWarnings("NP_NONNULL_RETURN_VIOLATION")
     private @Nonnull String plainSecretToHashInHex(@Nonnull String secretValueInPlainText) {
         byte[] hashBytes = plainSecretToHashBytes(secretValueInPlainText);
         return Util.toHexString(hashBytes);

File: core/src/main/java/hudson/Launcher.java
Patch:
@@ -23,7 +23,6 @@
  */
 package hudson;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Proc.LocalProc;
 import hudson.model.Computer;
 import jenkins.util.MemoryReductionUtil;
@@ -1038,8 +1037,6 @@ public RemoteLauncher(@Nonnull TaskListener listener, @Nonnull VirtualChannel ch
 
         @Override
         @Nonnull
-        @SuppressFBWarnings(value = "NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE", 
-                justification = "We always require nonnull channel when we initialize this launcher")
         public VirtualChannel getChannel() {
             VirtualChannel vc = super.getChannel();
             if (vc == null) {

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -47,7 +47,6 @@
 import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
 import com.thoughtworks.xstream.io.ReaderWrapper;
 import com.thoughtworks.xstream.mapper.CannotResolveClassException;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.PluginManager;
 import hudson.PluginWrapper;
 import hudson.XmlFile;
@@ -516,7 +515,6 @@ class PluginClassOwnership implements ClassOwnership {
 
         private PluginManager pm;
 
-        @SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE") // classOwnership checked for null so why does FB complain?
         @Override public String ownerOf(Class<?> clazz) {
             if (classOwnership != null) {
                 return classOwnership.ownerOf(clazz);

File: core/src/main/java/jenkins/security/ApiTokenProperty.java
Patch:
@@ -154,7 +154,6 @@ protected void setUser(User u) {
      * @since 1.426, and since 1.638 the method performs security checks
      */
     @Nonnull
-    @SuppressFBWarnings("NP_NONNULL_RETURN_VIOLATION")
     public String getApiToken() {
         LOGGER.log(Level.FINE, "Deprecated usage of getApiToken");
         if(LOGGER.isLoggable(Level.FINER)){

File: core/src/main/java/jenkins/security/apitoken/ApiTokenStore.java
Patch:
@@ -190,7 +190,6 @@ private void addLegacyToken(@Nonnull Secret legacyToken, boolean migrationFromEx
         return new TokenUuidAndPlainValue(token.uuid, tokenTheUserWillUse);
     }
     
-    @SuppressFBWarnings("NP_NONNULL_RETURN_VIOLATION")
     private @Nonnull String plainSecretToHashInHex(@Nonnull String secretValueInPlainText) {
         byte[] hashBytes = plainSecretToHashBytes(secretValueInPlainText);
         return Util.toHexString(hashBytes);

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -980,8 +980,10 @@ private static String getCategoryDisplayName(String category) {
         if (category==null)
             return Messages.UpdateCenter_PluginCategory_misc();
         try {
-            return (String)Messages.class.getMethod(
+            return (String) Messages.class.getMethod(
                     "UpdateCenter_PluginCategory_" + category.replace('-', '_')).invoke(null);
+        } catch (RuntimeException ex) {
+            throw ex;
         } catch (Exception ex) {
             return Messages.UpdateCenter_PluginCategory_unrecognized(category);
         }

File: core/src/main/java/hudson/scheduler/CronTabList.java
Patch:
@@ -106,11 +106,12 @@ public static CronTabList create(@Nonnull String format, Hash hash) throws ANTLR
             line = line.trim();
             
             if(lineNumber == 1 && line.startsWith("TZ=")) {
-                timezone = getValidTimezone(line.replace("TZ=",""));
+                final String timezoneString = line.replace("TZ=", "");
+                timezone = getValidTimezone(timezoneString);
                 if(timezone != null) {
                     LOGGER.log(Level.CONFIG, "CRON with timezone {0}", timezone);
                 } else {
-                    throw new ANTLRException("Invalid or unsupported timezone '" + timezone + "'");
+                    throw new ANTLRException("Invalid or unsupported timezone '" + timezoneString + "'");
                 }
                 continue;
             }

File: core/src/main/java/hudson/util/DoubleLaunchChecker.java
Patch:
@@ -133,7 +133,9 @@ public String getId() {
         String contextPath="";
         try {
             Method m = ServletContext.class.getMethod("getContextPath");
-            contextPath=" contextPath=\""+m.invoke(h.servletContext)+"\"";
+            contextPath = " contextPath=\"" + m.invoke(h.servletContext) + "\"";
+        } catch (RuntimeException e) {
+            throw e;
         } catch (Exception e) {
             // maybe running with Servlet 2.4
         }

File: core/src/main/java/jenkins/util/io/PathRemover.java
Patch:
@@ -61,7 +61,7 @@ public static PathRemover newRemoverWithStrategy(@Nonnull RetryStrategy retryStr
     }
 
     public static PathRemover newFilteredRobustRemover(@Nonnull PathChecker pathChecker, int maxRetries, boolean gcAfterFailedRemove, long waitBetweenRetries) {
-        return new PathRemover(new PausingGCRetryStrategy(Math.max(maxRetries, 1), gcAfterFailedRemove, waitBetweenRetries), pathChecker);
+        return new PathRemover(new PausingGCRetryStrategy(Math.max(maxRetries, 0), gcAfterFailedRemove, waitBetweenRetries), pathChecker);
     }
 
     private final RetryStrategy retryStrategy;

File: core/src/main/java/hudson/scm/AutoBrowserHolder.java
Patch:
@@ -60,7 +60,7 @@ public RepositoryBrowser get() {
             cacheGeneration = -1;
             return cache;
         }
-        int g = d.generation;
+        int g = d.getGeneration();
         if(g!=cacheGeneration) {
             cacheGeneration = g;
             cache = infer();

File: core/src/main/java/hudson/scm/SCMS.java
Patch:
@@ -60,7 +60,7 @@ public static SCM parseSCM(StaplerRequest req, AbstractProject target) throws Fo
         if (scm == null) {
             scm = new NullSCM(); // JENKINS-36043 workaround for AbstractMultiBranchProject.submit
         }
-        scm.getDescriptor().generation++;
+        scm.getDescriptor().incrementGeneration();
         return scm;
     }
 

File: core/src/main/java/jenkins/security/s2m/AdminWhitelistRule.java
Patch:
@@ -162,7 +162,7 @@ public boolean checkFileAccess(String op, File f) {
     @RequirePOST
     public HttpResponse doSubmit(StaplerRequest req) throws IOException {
         StringBuilder whitelist = new StringBuilder(Util.fixNull(req.getParameter("whitelist")));
-        if (whitelist.charAt(whitelist.length() - 1) != '\n')
+        if ((whitelist.length() > 0) && (whitelist.charAt(whitelist.length() - 1) != '\n'))
             whitelist.append("\n");
 
         Enumeration e = req.getParameterNames();

File: core/src/main/java/hudson/util/AtomicFileWriter.java
Patch:
@@ -149,7 +149,7 @@ public AtomicFileWriter(@Nonnull Path destinationPath, @Nonnull Charset charset,
             integrityOnClose = false;
         }
 
-        core = new FileChannelWriter(tmpPath, charset, integrityOnFlush, integrityOnClose, StandardOpenOption.WRITE);
+        core = new FileChannelWriter(tmpPath, charset, integrityOnFlush, integrityOnClose, StandardOpenOption.WRITE, StandardOpenOption.CREATE);
     }
 
     @Override

File: core/src/main/java/hudson/util/AtomicFileWriter.java
Patch:
@@ -149,7 +149,7 @@ public AtomicFileWriter(@Nonnull Path destinationPath, @Nonnull Charset charset,
             integrityOnClose = false;
         }
 
-        core = new FileChannelWriter(tmpPath, charset, integrityOnFlush, integrityOnClose, StandardOpenOption.WRITE);
+        core = new FileChannelWriter(tmpPath, charset, integrityOnFlush, integrityOnClose, StandardOpenOption.WRITE, StandardOpenOption.CREATE);
     }
 
     @Override

File: test/src/test/java/hudson/model/PasswordParameterDefinitionTest.java
Patch:
@@ -82,6 +82,7 @@ public class PasswordParameterDefinitionTest {
 
         // Another control case: anyone can enter a different value.
         HtmlForm form = wc.withBasicApiToken(dev).getPage(p, "build?delay=0sec").getFormByName("parameters");
+        form.getElementsByAttribute("input", "class", "hidden-password-update-btn").get(0).click();
         HtmlPasswordInput input = form.getInputByName("value");
         input.setText("rumor");
         j.submit(form);
@@ -99,6 +100,7 @@ public class PasswordParameterDefinitionTest {
 
         // Another control case: blank values.
         form = wc.withBasicApiToken(dev).getPage(p, "build?delay=0sec").getFormByName("parameters");
+        form.getElementsByAttribute("input", "class", "hidden-password-update-btn").get(0).click();
         input = form.getInputByName("value");
         input.setText("");
         j.submit(form);

File: test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java
Patch:
@@ -82,10 +82,9 @@ public void passwordsAreRedacted_andOtherStayTheSame() throws Exception {
         
         String textLevelOne = "plain-2";
         String pwdLevelOneA = "secret-2";
-        String pwdLevelOneB = "secret-3";
+        String pwdLevelOneB = "pre-set secret"; // set in Jelly
         ((HtmlInput) page.getElementById("text-level-one")).setValueAttribute(textLevelOne);
         ((HtmlInput) page.getElementById("pwd-level-one-a")).setValueAttribute(pwdLevelOneA);
-        ((HtmlInput) page.getElementById("pwd-level-one-b")).setValueAttribute(pwdLevelOneB);
         
         HtmlForm form = page.getFormByName("config");
         Page formSubmitPage = j.submit(form);

File: test/src/test/java/lib/form/PasswordTest.java
Patch:
@@ -26,7 +26,7 @@
 import com.gargoylesoftware.htmlunit.Page;
 import com.gargoylesoftware.htmlunit.html.HtmlInput;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
-import com.gargoylesoftware.htmlunit.html.HtmlPasswordInput;
+import com.gargoylesoftware.htmlunit.html.HtmlTextInput;
 import hudson.cli.CopyJobCommand;
 import hudson.cli.GetJobCommand;
 import hudson.model.*;
@@ -186,8 +186,8 @@ public void testExposedCiphertext() throws Exception {
     @Issue("SECURITY-616")
     public void testCheckMethod() throws Exception {
         FreeStyleProject p = j.createFreeStyleProject("p");
-        p.addProperty(new VulnerableProperty(Secret.fromString("")));
-        HtmlPasswordInput field = j.createWebClient().getPage(p, "configure").getFormByName("config").getInputByName("_.secret");
+        p.addProperty(new VulnerableProperty(null));
+        HtmlTextInput field = j.createWebClient().getPage(p, "configure").getFormByName("config").getInputByName("_.secret");
         while (VulnerableProperty.DescriptorImpl.incomingURL == null) { // waitForBackgroundJavaScript does not work well
             Thread.sleep(100); // form validation of saved value
         }

File: core/src/main/java/hudson/model/Node.java
Patch:
@@ -390,6 +390,7 @@ public CauseOfBlockage canTake(Queue.BuildableItem item) {
             // flyweight tasks need to get executed somewhere, if every node
             if (!(item.task instanceof Queue.FlyweightTask && (
                     this instanceof Jenkins
+                            // TODO Why is the next operator a '||' instead of a '&&'?
                             || Jenkins.get().getNumExecutors() < 1
                             || Jenkins.get().getMode() == Mode.EXCLUSIVE)
             )) {

File: core/src/main/java/hudson/model/Cause.java
Patch:
@@ -47,7 +47,7 @@
 /**
  * Cause object base class.  This class hierarchy is used to keep track of why
  * a given build was started. This object encapsulates the UI rendering of the cause,
- * as well as providing more useful information in respective subypes.
+ * as well as providing more useful information in respective subtypes.
  *
  * The Cause object is connected to a build via the {@link CauseAction} object.
  *

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -338,9 +338,7 @@ public void run() {
             lock.writeLock().unlock();
         }
 
-        ACL.impersonate(ACL.SYSTEM);
-
-        try {
+        try (ACLContext ctx = ACL.as(ACL.SYSTEM)) {
             SubTask task;
             // transition from idle to building.
             // perform this state change as an atomic operation wrt other queue operations

File: core/src/main/java/jenkins/management/AsynchronousAdministrativeMonitor.java
Patch:
@@ -6,6 +6,7 @@
 import hudson.model.AdministrativeMonitor;
 import hudson.model.TaskListener;
 import hudson.security.ACL;
+import hudson.security.ACLContext;
 import hudson.util.StreamTaskListener;
 import jenkins.model.Jenkins;
 import jenkins.security.RekeySecretAdminMonitor;
@@ -97,9 +98,8 @@ protected class FixThread extends Thread {
 
         @Override
         public void run() {
-            ACL.impersonate(ACL.SYSTEM);
             StreamTaskListener listener = null;
-            try {
+            try (ACLContext ctx = ACL.as(ACL.SYSTEM)) {
                 listener = new StreamTaskListener(getLogFile());
                 try {
                     doRun(listener);

File: core/src/main/java/hudson/FileSystemProvisionerDescriptor.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson;
 
+import hudson.model.AbstractBuild;
 import hudson.model.Descriptor;
 import hudson.model.TaskListener;
 

File: core/src/main/java/hudson/LauncherDecorator.java
Patch:
@@ -1,7 +1,10 @@
 package hudson;
 
+import hudson.model.AbstractBuild;
+import hudson.model.BuildListener;
 import hudson.model.Node;
 import hudson.model.Executor;
+import hudson.model.TaskListener;
 import hudson.tasks.BuildWrapper;
 import javax.annotation.Nonnull;
 

File: core/src/main/java/hudson/XmlFile.java
Patch:
@@ -25,8 +25,10 @@
 
 import com.thoughtworks.xstream.XStream;
 import com.thoughtworks.xstream.converters.Converter;
+import com.thoughtworks.xstream.converters.DataHolder;
 import com.thoughtworks.xstream.converters.UnmarshallingContext;
 import com.thoughtworks.xstream.io.HierarchicalStreamDriver;
+import com.thoughtworks.xstream.io.HierarchicalStreamReader;
 import hudson.diagnosis.OldDataMonitor;
 import hudson.model.Descriptor;
 import hudson.util.AtomicFileWriter;

File: core/src/main/java/hudson/model/queue/ScheduleResult.java
Patch:
@@ -1,7 +1,9 @@
 package hudson.model.queue;
 
+import hudson.model.Action;
 import hudson.model.Queue;
 import hudson.model.Queue.Item;
+import hudson.model.Queue.Task;
 import hudson.model.Queue.WaitingItem;
 import javax.annotation.CheckForNull;
 

File: core/src/main/java/hudson/security/BasicAuthenticationFilter.java
Patch:
@@ -31,6 +31,8 @@
 import jenkins.security.BasicApiTokenHelper;
 import org.acegisecurity.context.SecurityContextHolder;
 import org.acegisecurity.userdetails.UserDetails;
+import org.kohsuke.stapler.StaplerRequest;
+import org.kohsuke.stapler.StaplerResponse;
 
 import javax.servlet.Filter;
 import javax.servlet.FilterChain;

File: core/src/main/java/hudson/slaves/ComputerLauncherFilter.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.slaves;
 
 import hudson.model.Descriptor;
+import hudson.model.Node;
 import hudson.model.TaskListener;
 
 import java.io.IOException;

File: core/src/main/java/hudson/slaves/DumbSlave.java
Patch:
@@ -25,6 +25,7 @@
 
 import hudson.model.Slave;
 import hudson.model.Descriptor.FormException;
+import hudson.slaves.DumbSlave;
 import hudson.Extension;
 
 import java.io.IOException;
@@ -45,7 +46,7 @@
 public final class DumbSlave extends Slave {
     /**
      * @deprecated as of 1.286.
-     *      Use {@link #DumbSlave(String, String, String, String, Node.Mode, String, ComputerLauncher, RetentionStrategy, List)}
+     *      Use {@link #DumbSlave(String, String, String, String, Mode, String, ComputerLauncher, RetentionStrategy, List)}
      */
     @Deprecated
     public DumbSlave(String name, String nodeDescription, String remoteFS, String numExecutors, Mode mode, String labelString, ComputerLauncher launcher, RetentionStrategy retentionStrategy) throws FormException, IOException {

File: core/src/main/java/hudson/slaves/NodeProperty.java
Patch:
@@ -94,7 +94,7 @@ public NodePropertyDescriptor getDescriptor() {
      *
      * @since 1.360
      * @deprecated as of 1.413
-     *      Use {@link #canTake(Queue.BuildableItem)}
+     *      Use {@link #canTake(BuildableItem)}
      */
     @Deprecated
     public CauseOfBlockage canTake(Task task) {

File: core/src/main/java/hudson/tasks/Publisher.java
Patch:
@@ -26,7 +26,9 @@
 import hudson.DescriptorExtensionList;
 import hudson.Extension;
 import hudson.ExtensionComponent;
+import hudson.Launcher;
 import hudson.model.Action;
+import hudson.model.AbstractBuild;
 import hudson.model.Build;
 import hudson.model.BuildListener;
 import hudson.model.Describable;

File: core/src/main/java/hudson/tools/AbstractCommandInstaller.java
Patch:
@@ -26,6 +26,7 @@
 import hudson.FilePath;
 import hudson.model.Node;
 import hudson.model.TaskListener;
+import hudson.tasks.CommandInterpreter;
 import hudson.util.FormValidation;
 import java.io.IOException;
 import org.kohsuke.stapler.QueryParameter;

File: core/src/main/java/hudson/util/ArgumentListBuilder.java
Patch:
@@ -24,6 +24,7 @@
  */
 package hudson.util;
 
+import hudson.FilePath;
 import hudson.Launcher;
 import hudson.Util;
 

File: core/src/main/java/hudson/util/FileChannelWriter.java
Patch:
@@ -3,6 +3,7 @@
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
+import java.io.BufferedWriter;
 import java.io.IOException;
 import java.io.Writer;
 import java.nio.ByteBuffer;

File: core/src/main/java/jenkins/model/CauseOfInterruption.java
Patch:
@@ -25,6 +25,7 @@
 
 import hudson.console.ModelHyperlinkNote;
 import hudson.model.Executor;
+import hudson.model.Result;
 import hudson.model.TaskListener;
 import hudson.model.User;
 import org.kohsuke.stapler.export.Exported;

File: core/src/main/java/jenkins/util/ProgressiveRendering.java
Patch:
@@ -24,6 +24,7 @@
 
 package jenkins.util;
 
+import hudson.model.AbstractItem;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;

File: test/src/test/java/lib/form/RepeatableTest.java
Patch:
@@ -24,6 +24,7 @@
 package lib.form;
 
 import com.gargoylesoftware.htmlunit.ElementNotFoundException;
+import com.gargoylesoftware.htmlunit.Page;
 import com.gargoylesoftware.htmlunit.html.HtmlButton;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
 import com.gargoylesoftware.htmlunit.html.HtmlForm;

File: cli/src/main/java/hudson/util/QuotedStringTokenizer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * (C) Copyright 2004-2005 Mort Bay Consulting Pty. Ltd.
  *
  *   Parts of this code was taken from the Jetty project, which can be

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -329,8 +329,8 @@ public <T> List<ExtensionComponent<T>> findComponents(Class<T> type, Hudson huds
             finders = hudson.getExtensionList(ExtensionFinder.class);
         }
 
-        /**
-         * See {@link ExtensionFinder#scout(Class, Hudson)} for the dead lock issue and what this does.
+        /*
+         * See ExtensionFinder#scout(Class, Hudson) for the dead lock issue and what this does.
          */
         if (LOGGER.isLoggable(Level.FINER))
             LOGGER.log(Level.FINER, "Scout-loading ExtensionList: "+type, new Throwable());

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -155,11 +155,11 @@ public String getTaskNoun() {
         return AlternativeUiTextProvider.get(TASK_NOUN, this, Messages.AbstractItem_TaskNoun());
     }
 
-    @Exported
     /**
      * @return The display name of this object, or if it is not set, the name
      * of the object.
      */
+    @Exported
     public String getDisplayName() {
         if(null!=displayName) {
             return displayName;
@@ -168,13 +168,13 @@ public String getDisplayName() {
         return getName();
     }
     
-    @Exported
     /**
      * This is intended to be used by the Job configuration pages where
      * we want to return null if the display name is not set.
      * @return The display name of this object or null if the display name is not
      * set
      */
+    @Exported
     public String getDisplayNameOrNull() {
         return displayName;
     }

File: core/src/main/java/hudson/model/DisplayNameListener.java
Patch:
@@ -41,13 +41,13 @@ public class DisplayNameListener extends ItemListener {
 
     private final static Logger LOGGER = Logger.getLogger(DisplayNameListener.class.getName());
 
-    @Override
     /**
      * Called after the user has clicked OK in the New Job page when 
      * Copy existing job has been selected.
      * The fields in item will be displayed in when the config page is loaded
      * displayed.
      */
+    @Override
     public void onCopied(Item src, Item item) {
         // bug 5056825 - Display name field should be cleared when you copy a job within the same folder.
         if(item instanceof AbstractItem && src.getParent() == item.getParent()) {
@@ -60,7 +60,6 @@ public void onCopied(Item src, Item item) {
         }
     }
 
-    @Override
     /**
      * Called after the user has changed the project name of a job and then
      * clicked on submit.
@@ -69,6 +68,7 @@ public void onCopied(Item src, Item item) {
      * @param oldName the old name
      * @param newName the new name
      */
+    @Override
     public void onRenamed(Item item, String oldName, String newName) {
         // bug 5077308 - Display name field should be cleared when you rename a job.
         if(item instanceof AbstractItem) {

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -2842,8 +2842,8 @@ public String toString(Object object) {
 			}
         });
 
-        /**
-         * Reconnect every reference to {@link Queue} by the singleton.
+        /*
+         * Reconnect every reference to Queue by the singleton.
          */
         XSTREAM.registerConverter(new AbstractSingleValueConverter() {
 			@Override

File: core/src/main/java/hudson/security/DeferredCreationLdapAuthoritiesPopulator.java
Patch:
@@ -21,9 +21,6 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  * THE SOFTWARE.
  */
-/**
- * 
- */
 package hudson.security;
 
 import org.acegisecurity.GrantedAuthority;

File: core/src/main/java/hudson/security/csrf/CrumbExclusion.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright (c) 2011 CloudBees, Inc.
  * All rights reserved.
  * The copyrights to the contents of this file are licensed under the MIT License (http://www.opensource.org/licenses/mit-license.php)

File: core/src/main/java/hudson/security/csrf/CrumbFilter.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright (c) 2008-2009 Yahoo! Inc. 
  * All rights reserved. 
  * The copyrights to the contents of this file are licensed under the MIT License (http://www.opensource.org/licenses/mit-license.php)

File: core/src/main/java/hudson/security/csrf/CrumbIssuer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright (c) 2008-2009 Yahoo! Inc.
  * All rights reserved.
  * The copyrights to the contents of this file are licensed under the MIT License (http://www.opensource.org/licenses/mit-license.php)

File: core/src/main/java/hudson/security/csrf/CrumbIssuerDescriptor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright (c) 2008-2009 Yahoo! Inc. 
  * All rights reserved. 
  * The copyrights to the contents of this file are licensed under the MIT License (http://www.opensource.org/licenses/mit-license.php)

File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright (c) 2008-2010 Yahoo! Inc.
  * All rights reserved. 
  * The copyrights to the contents of this file are licensed under the MIT License (http://www.opensource.org/licenses/mit-license.php)

File: core/src/main/java/hudson/util/MaskingClassLoader.java
Patch:
@@ -57,7 +57,7 @@ public MaskingClassLoader(ClassLoader parent, Collection<String> masks) {
         super(parent);
         this.masksClasses.addAll(masks);
 
-        /**
+        /*
          * The name of a resource is a '/'-separated path name
          */
         for (String mask : masks) {

File: core/src/main/java/hudson/util/RobustReflectionConverter.java
Patch:
@@ -76,7 +76,6 @@ public class RobustReflectionConverter implements Converter {
     protected transient SerializationMethodInvoker serializationMethodInvoker;
     private transient ReflectionProvider pureJavaReflectionProvider;
     private final @Nonnull XStream2.ClassOwnership classOwnership;
-    /** {@code pkg.Clazz#fieldName} */
     /** There are typically few critical fields around, but we end up looking up in this map a lot.
         in addition, this map is really only written to during static initialization, so we should use
         reader writer lock to avoid locking as much as possible.  In addition, to avoid looking up

File: test/src/test/java/hudson/model/ProjectTest.java
Patch:
@@ -702,7 +702,7 @@ public void testDoEnable() throws Exception{
      */
     @Test
     public void testJobSubmittedShouldSpawnCloud() throws Exception {
-        /**
+        /*
          * Setup a project with an SCM. Jenkins should have no executors in itself. 
          */
         FreeStyleProject proj = j.createFreeStyleProject("JENKINS-21394-spawn");        
@@ -762,7 +762,7 @@ public void testUnrestrictedJobNoLabelByCloudNoQueue() throws Exception {
         
         t.new Runner().run();
         
-        /**
+        /*
          * Assert that the log contains the correct message.
          */
         HtmlPage log = j.createWebClient().getPage(proj, "scmPollLog");

File: test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright (c) 2008-2010 Yahoo! Inc.
  * All rights reserved.
  * The copyrights to the contents of this file are licensed under the MIT License (http://www.opensource.org/licenses/mit-license.php)
@@ -22,7 +22,6 @@
 import static org.junit.Assert.*;
 
 /**
- *
  * @author dty
  */
 public class DefaultCrumbIssuerTest {

File: core/src/main/java/hudson/AbstractMarkupText.java
Patch:
@@ -73,7 +73,7 @@ public final int length() {
      *
      * <p>
      * For example, if the text was "abc", then {@code addMarkup(1,2,"<b>","</b>")}
-     * would generate {@code"a<b>b</b>c"}
+     * would generate {@code "a<b>b</b>c"}
      */
     public abstract void addMarkup( int startPos, int endPos, String startTag, String endTag );
 

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -884,7 +884,7 @@ protected void onRemoved(){
      * Computer.constructor->Computer.setNode
      * Computer.kill is called after numExecutors set to zero(Computer.inflictMortalWound) so not need the Queue.lock
      *
-     * @param number of executors
+     * @param n number of executors
      */
     @GuardedBy("hudson.model.Queue.lock")
     private void setNumExecutors(int n) {

File: core/src/main/java/hudson/model/Item.java
Patch:
@@ -139,8 +139,6 @@ public interface Item extends PersistenceRoot, SearchableModelObject, AccessCont
      *
      * @param g
      *      The {@link ItemGroup} instance used as context to evaluate the relative name of this item
-     * @return
-     *      The name of the current item, relative to p. Nested {@link ItemGroup}s are separated by {@code /} character.
      * @since 1.419
      * @return
      *      String like "../foo/bar".

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -244,7 +244,7 @@ private FormValidation verifySignature(JSONObject o) throws IOException {
     /**
      * Let sub-classes of UpdateSite provide their own signature validator.
      * @return the signature validator.
-     * @deprecated use {@link #getJsonSignatureValidator(@CheckForNull String)} instead.
+     * @deprecated use {@link #getJsonSignatureValidator(String)} instead.
      */
     @Deprecated
     @Nonnull

File: core/src/main/java/jenkins/model/PeepholePermalink.java
Patch:
@@ -61,7 +61,7 @@ public abstract class PeepholePermalink extends Permalink implements Predicate<R
 
     /**
      * JENKINS-22822: avoids rereading caches.
-     * Top map keys are {@link builds} directories.
+     * Top map keys are {@code builds} directories.
      * Inner maps are from permalink name to build number.
      * Synchronization is first on the outer map, then on the inner.
      */

File: core/src/main/java/jenkins/util/JSONSignatureValidator.java
Patch:
@@ -140,7 +140,7 @@ public FormValidation verifySignature(JSONObject o) throws IOException {
 
 
     /**
-     * Computes the specified {@code digest} and {@code signature} for the provided {@code json} object and checks whether they match {@code digestEntry} and {@signatureEntry} in the provided {@code signatureJson} object.
+     * Computes the specified {@code digest} and {@code signature} for the provided {@code json} object and checks whether they match {@code digestEntry} and {@code signatureEntry} in the provided {@code signatureJson} object.
      *
      * @param json the full update-center.json content
      * @param signatureJson signature block from update-center.json

File: core/src/main/java/jenkins/util/UrlHelper.java
Patch:
@@ -43,7 +43,7 @@ public class UrlHelper {
      * Lenient version of: <ol>
      * <li> <a href="https://tools.ietf.org/html/rfc952">RFC-952</a> GRAMMATICAL HOST TABLE SPECIFICATION</li>
      * <li> <a href="https://www.ietf.org/rfc/rfc1034.txt">RFC-1034</a> 3.5</li>
-     * <li> <a href="https://www.ietf.org/rfc/rfc1738.txt ">RFC-1738</a>3.1, host</li>
+     * <li> <a href="https://www.ietf.org/rfc/rfc1738.txt">RFC-1738</a>3.1, host</li>
      * <li> <a href="https://tools.ietf.org/html/rfc1123">RFC-1123</a> 2.1</li>
      * </ol>
      * <p>

File: core/src/test/java/hudson/model/ItemsTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.mockito.Mockito.*;
 
 /**
- * @author: <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
+ * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
 public class ItemsTest {
 

File: core/src/test/java/hudson/util/IsOverriddenTest.java
Patch:
@@ -29,7 +29,7 @@
 import hudson.Util;
 
 /**
- * Test for {@link Util.isOverridden} method.
+ * Test for {@link Util#isOverridden} method.
  */
 public class IsOverriddenTest {
 

File: test/src/test/java/hudson/cli/DisablePluginCommandTest.java
Patch:
@@ -102,7 +102,7 @@ public void cannotDisableDependentPluginWrongOrderStrategyNone() {
     }
 
     /**
-     * Can disable a plugin with a mandatory dependent plugin before its dependent plugin with <i><all/i> strategy
+     * Can disable a plugin with a mandatory dependent plugin before its dependent plugin with <i>all/i> strategy
      */
     @Test
     @Issue("JENKINS-27177")

File: test/src/test/java/hudson/model/AbstractProjectTest.java
Patch:
@@ -328,7 +328,7 @@ public void queueSuccessBehavior() throws Exception {
     }
 
     /**
-     * Do the same as {@link #testQueueSuccessBehavior()} but over HTTP
+     * Do the same as {@link #queueSuccessBehavior()} but over HTTP
      */
     @Test
     @Issue("JENKINS-18407")

File: test/src/test/java/jenkins/triggers/ReverseBuildTriggerTest.java
Patch:
@@ -89,7 +89,7 @@ public void runMoreQuickly() throws Exception {
         assertEquals(Result.SUCCESS, bt.getThreshold());
     }
 
-    /** @see BuildTriggerTest#testDownstreamProjectSecurity */
+    /** @see BuildTriggerTest#downstreamProjectSecurity */
     @Test public void upstreamProjectSecurity() throws Exception {
         r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
         MockAuthorizationStrategy auth = new MockAuthorizationStrategy()

File: core/src/main/java/hudson/Launcher.java
Patch:
@@ -1251,9 +1251,9 @@ public Launcher getInner() {
     }
 
     public static class IOTriplet implements Serializable {
-        @Nonnull
+        @CheckForNull
         InputStream stdout,stderr;
-        @Nonnull
+        @CheckForNull
         OutputStream stdin;
         private static final long serialVersionUID = 1L;
     }

File: core/src/main/java/jenkins/security/NonSerializableSecurityContext.java
Patch:
@@ -14,6 +14,7 @@
  */
 package jenkins.security;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.acegisecurity.context.SecurityContext;
 import org.acegisecurity.context.SecurityContextImpl;
 import org.acegisecurity.Authentication;
@@ -40,6 +41,7 @@
  * @see hudson.security.HttpSessionContextIntegrationFilter2
  * @since 1.509
  */
+@SuppressFBWarnings(value = "SE_TRANSIENT_FIELD_NOT_RESTORED", justification = "It is not intended to be serialized. Default values will be used in case of deserialization")
 public class NonSerializableSecurityContext implements SecurityContext {
     private transient Authentication authentication;
 

File: core/src/main/java/hudson/model/DownloadService.java
Patch:
@@ -401,7 +401,7 @@ public FormValidation updateNow() throws IOException {
             for (UpdateSite updatesite : Jenkins.getActiveInstance().getUpdateCenter().getSiteList()) {
                 String site = updatesite.getMetadataUrlForDownloadable(url);
                 if (site == null) {
-                    return FormValidation.warning("The update site " + site + " does not look like an update center");
+                    return FormValidation.warning("The update site " + updatesite.getId() + " does not look like an update center");
                 }
                 String jsonString;
                 try {

File: core/src/main/java/hudson/init/Initializer.java
Patch:
@@ -65,7 +65,7 @@ public static void init() throws IOException {
      *
      * <p>
      * This has the identical purpose as {@link #requires()}, but it's separated to allow better type-safety
-     * when using {@link InitMilestone} as a requirement (since enum member definitions need to be constant.)
+     * when using {@link InitMilestone} as a requirement (since enum member definitions need to be constant).
      */
     InitMilestone after() default STARTED;
 

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -260,9 +260,8 @@ protected AbstractProject(ItemGroup parent, String name) {
         buildMixIn = createBuildMixIn();
         builds = buildMixIn.getRunMap();
 
-        final Jenkins j = Jenkins.get();
-        final List<Node> nodes = j != null ? j.getNodes() : null;
-        if(nodes!=null && !nodes.isEmpty()) {
+        Jenkins j = Jenkins.getInstanceOrNull();
+        if (j != null && !j.getNodes().isEmpty()) {
             // if a new job is configured with Hudson that already has agent nodes
             // make it roamable by default
             canRoam = true;

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2096,6 +2096,7 @@ protected Map<Node,Computer> getComputerMap() {
      * Returns all {@link Node}s in the system, excluding {@link Jenkins} instance itself which
      * represents the master.
      */
+    @Nonnull
     public List<Node> getNodes() {
         return nodes.getNodes();
     }

File: core/src/test/java/hudson/PluginManagerTest.java
Patch:
@@ -25,6 +25,7 @@
 package hudson;
 
 import java.io.File;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import org.apache.tools.ant.filters.StringInputStream;
 import org.junit.Test;
@@ -145,7 +146,7 @@ private File createHpiWithManifest() throws IOException {
         File newFolder = tmp.newFolder("myJar");
         String manifestPath = "META-INF/MANIFEST.MF";
         new File("META-INF").mkdir();
-        FileUtils.write(new File(newFolder, manifestPath), SAMPLE_MANIFEST_FILE);
+        FileUtils.write(new File(newFolder, manifestPath), SAMPLE_MANIFEST_FILE, StandardCharsets.UTF_8);
         
         final File f = new File(tmp.getRoot(), "my.hpi");
         try(ZipOutputStream out = new ZipOutputStream(Files.newOutputStream(f.toPath()))) {

File: core/src/test/java/hudson/util/ConsistentHashTest.java
Patch:
@@ -66,7 +66,7 @@ public void basic() {
         assertEquals(z,x);
         all.add(itr.next());
         all.add(itr.next());
-        assertTrue(!itr.hasNext());
+        assertFalse(itr.hasNext());
         assertEquals(3,all.size());
     }
 

File: test/src/test/java/hudson/cli/DisconnectNodeCommandTest.java
Patch:
@@ -266,7 +266,7 @@ public void disconnectNodeManyShouldSucceedEvenANodeIsSpecifiedTwice() throws Ex
     }
 
     public void disconnectNodeShouldSucceedOnMaster() throws Exception {
-        final Computer masterComputer = j.jenkins.get().getComputer("");
+        final Computer masterComputer = j.jenkins.getComputer("");
         assertThat(masterComputer.isOnline(), equalTo(true));
         assertThat(masterComputer.getOfflineCause(), equalTo(null));
 

File: test/src/test/java/hudson/cli/QuietDownCommandTest.java
Patch:
@@ -129,7 +129,7 @@ public void quietDownShouldFailWithEmptyTimeout() throws Exception {
 
     @Test
     public void quietDownShouldSuccessOnAlreadyQuietDownedJenkins() throws Exception {
-        j.jenkins.get().doQuietDown();
+        j.jenkins.doQuietDown();
         assertJenkinsInQuietMode();
         final CLICommandInvoker.Result result = command
                 .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)
@@ -140,7 +140,7 @@ public void quietDownShouldSuccessOnAlreadyQuietDownedJenkins() throws Exception
 
     @Test
     public void quietDownShouldSuccessWithBlockOnAlreadyQuietDownedJenkins() throws Exception {
-        j.jenkins.get().doQuietDown(true, 0);
+        j.jenkins.doQuietDown(true, 0);
         assertJenkinsInQuietMode();
         final CLICommandInvoker.Result result = command
                 .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)
@@ -151,7 +151,7 @@ public void quietDownShouldSuccessWithBlockOnAlreadyQuietDownedJenkins() throws
 
     @Test
     public void quietDownShouldSuccessWithBlockAndTimeoutOnAlreadyQuietDownedJenkins() throws Exception {
-        j.jenkins.get().doQuietDown(true, 0);
+        j.jenkins.doQuietDown(true, 0);
         assertJenkinsInQuietMode();
         final long time_before = System.currentTimeMillis();
         final CLICommandInvoker.Result result = command

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -581,7 +581,7 @@ public synchronized EnvVars getEnvironmentVariables() {
                     LOGGER.log(FINEST, "Failed to get the environment variables of process with pid=" + p.getPid(), e);
                 }
             }
-            return null;
+            return env;
         }
         
         private synchronized EnvVars getEnvironmentVariables2() throws WindowsOSProcessException {

File: core/src/main/java/hudson/init/Initializer.java
Patch:
@@ -65,7 +65,7 @@ public static void init() throws IOException {
      *
      * <p>
      * This has the identical purpose as {@link #requires()}, but it's separated to allow better type-safety
-     * when using {@link InitMilestone} as a requirement (since enum member definitions need to be constant.)
+     * when using {@link InitMilestone} as a requirement (since enum member definitions need to be constant).
      */
     InitMilestone after() default STARTED;
 

File: core/src/main/java/hudson/init/Initializer.java
Patch:
@@ -65,7 +65,7 @@ public static void init() throws IOException {
      *
      * <p>
      * This has the identical purpose as {@link #requires()}, but it's separated to allow better type-safety
-     * when using {@link InitMilestone} as a requirement (since enum member definitions need to be constant.)
+     * when using {@link InitMilestone} as a requirement (since enum member definitions need to be constant).
      */
     InitMilestone after() default STARTED;
 

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -585,7 +585,7 @@ public synchronized EnvVars getEnvironmentVariables() {
                     LOGGER.log(FINEST, "Failed to get the environment variables of process with pid=" + p.getPid(), e);
                 }
             }
-            return null;
+            return env;
         }
         
         private synchronized EnvVars getEnvironmentVariables2() throws WindowsOSProcessException {

File: core/src/main/java/hudson/DependencyRunner.java
Patch:
@@ -47,7 +47,7 @@ public class DependencyRunner implements Runnable {
 	
     ProjectRunnable runnable;
 
-    List<AbstractProject> polledProjects = new ArrayList<AbstractProject>();
+    List<AbstractProject> polledProjects = new ArrayList<>();
 
     public DependencyRunner(ProjectRunnable runnable) {
         this.runnable = runnable;
@@ -56,7 +56,7 @@ public DependencyRunner(ProjectRunnable runnable) {
     public void run() {
         SecurityContext oldContext = ACL.impersonate(ACL.SYSTEM);
         try {
-            Set<AbstractProject> topLevelProjects = new HashSet<AbstractProject>();
+            Set<AbstractProject> topLevelProjects = new HashSet<>();
             // Get all top-level projects
             LOGGER.fine("assembling top level projects");
             for (AbstractProject p : Jenkins.get().allItems(AbstractProject.class))

File: core/src/main/java/hudson/PluginFirstClassLoader.java
Patch:
@@ -50,7 +50,7 @@ public PluginFirstClassLoader() {
         super(null, false);
     }
 
-    private List<URL> urls = new ArrayList<URL>();
+    private List<URL> urls = new ArrayList<>();
 
     public void addPathFiles( Collection<File> paths )
         throws IOException

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -2131,7 +2131,7 @@ public String getExceptionString() {
      * Stores {@link Plugin} instances.
      */
     /*package*/ static final class PluginInstanceStore {
-        final Map<PluginWrapper,Plugin> store = new ConcurrentHashMap<PluginWrapper,Plugin>();
+        final Map<PluginWrapper,Plugin> store = new ConcurrentHashMap<>();
     }
 
     /**
@@ -2174,7 +2174,7 @@ public List<PluginWrapper> getPluginsWithCycle() {
     @Extension @Symbol("pluginUpdate")
     public static final class PluginUpdateMonitor extends AdministrativeMonitor {
 
-        private Map<String, PluginUpdateInfo> pluginsToBeUpdated = new HashMap<String, PluginManager.PluginUpdateMonitor.PluginUpdateInfo>();
+        private Map<String, PluginUpdateInfo> pluginsToBeUpdated = new HashMap<>();
 
         /**
          * Convenience method to ease access to this monitor, this allows other plugins to register required updates.

File: core/src/main/java/hudson/diagnosis/OldDataMonitor.java
Patch:
@@ -294,7 +294,7 @@ public boolean isOld(int threshold) {
      */
     @Restricted(NoExternalUse.class)
     public Iterator<VersionNumber> getVersionList() {
-        TreeSet<VersionNumber> set = new TreeSet<VersionNumber>();
+        TreeSet<VersionNumber> set = new TreeSet<>();
         for (VersionRange vr : data.values()) {
             if (vr.max != null) {
                 set.add(vr.max);
@@ -364,7 +364,7 @@ private void saveAndRemoveEntries(Predicate<Map.Entry<SaveableReference, Version
          * does occur: just means the user will be prompted to discard less than they should have been (and
          * would see the warning again after next restart).
          */
-        List<SaveableReference> removed = new ArrayList<SaveableReference>();
+        List<SaveableReference> removed = new ArrayList<>();
         for (Map.Entry<SaveableReference,VersionRange> entry : data.entrySet()) {
             if (matchingPredicate.apply(entry)) {
                 Saveable s = entry.getKey().get();

File: core/src/main/java/hudson/model/AbstractCIBase.java
Patch:
@@ -93,7 +93,7 @@ protected void killComputer(Computer c) {
     * Package-protected, but accessed API
     * ============================================================================================================== */
 
-    /*package*/ final CopyOnWriteArraySet<String> disabledAdministrativeMonitors = new CopyOnWriteArraySet<String>();
+    /*package*/ final CopyOnWriteArraySet<String> disabledAdministrativeMonitors = new CopyOnWriteArraySet<>();
 
     @Restricted(NoExternalUse.class)
     public CopyOnWriteArraySet<String> getDisabledAdministrativeMonitors(){
@@ -192,11 +192,11 @@ public void run() {
      */
     protected void updateComputerList(final boolean automaticSlaveLaunch) {
         final Map<Node,Computer> computers = getComputerMap();
-        final Set<Computer> old = new HashSet<Computer>(computers.size());
+        final Set<Computer> old = new HashSet<>(computers.size());
         Queue.withLock(new Runnable() {
             @Override
             public void run() {
-                Map<String,Computer> byName = new HashMap<String,Computer>();
+                Map<String,Computer> byName = new HashMap<>();
                 for (Computer c : computers.values()) {
                     old.add(c);
                     Node node = c.getNode();

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -981,7 +981,7 @@ public static AbstractItem resolveForCLI(
     /**
      * Replaceable pronoun of that points to a job. Defaults to "Job"/"Project" depending on the context.
      */
-    public static final Message<AbstractItem> PRONOUN = new Message<AbstractItem>();
+    public static final Message<AbstractItem> PRONOUN = new Message<>();
 
     /**
      * Replaceable noun for describing the kind of task that this item represents. Defaults to "Build".

File: core/src/main/java/hudson/model/Node.java
Patch:
@@ -282,7 +282,7 @@ void setTemporaryOfflineCause(OfflineCause cause) {
      * Return the possibly empty tag cloud for the labels of this node.
      */
     public TagCloud<LabelAtom> getLabelCloud() {
-        return new TagCloud<LabelAtom>(getAssignedLabels(),new WeightFunction<LabelAtom>() {
+        return new TagCloud<>(getAssignedLabels(), new WeightFunction<LabelAtom>() {
             public float weight(LabelAtom item) {
                 return item.getTiedJobCount();
             }
@@ -313,7 +313,7 @@ public Set<LabelAtom> getAssignedLabels() {
      * @return HashSet<Label>.
      */
     private HashSet<LabelAtom> getDynamicLabels() {
-        HashSet<LabelAtom> result = new HashSet<LabelAtom>();
+        HashSet<LabelAtom> result = new HashSet<>();
         for (LabelFinder labeler : LabelFinder.all()) {
             // Filter out any bad(null) results from plugins
             // for compatibility reasons, findLabels may return LabelExpression and not atom.
@@ -526,7 +526,7 @@ public Object onConvert(Type targetType, Class targetTypeErasure, Object jsonSou
                 }
 
                 try {
-                    DescribableList<NodeProperty<?>, NodePropertyDescriptor> tmp = new DescribableList<NodeProperty<?>, NodePropertyDescriptor>(Saveable.NOOP,getNodeProperties().toList());
+                    DescribableList<NodeProperty<?>, NodePropertyDescriptor> tmp = new DescribableList<>(Saveable.NOOP, getNodeProperties().toList());
                     tmp.rebuild(req, jsonForProperties, NodeProperty.all());
                     return tmp.toList();
                 } catch (FormException e) {

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -1482,7 +1482,7 @@ public class Canceled extends RestartJenkinsJobStatus {
      * Tests the internet connectivity.
      */
     public final class ConnectionCheckJob extends UpdateCenterJob {
-        private final Vector<String> statuses= new Vector<String>();
+        private final Vector<String> statuses= new Vector<>();
 
         final Map<String, ConnectionStatus> connectionStates = new ConcurrentHashMap<>();
 

File: core/src/main/java/hudson/scm/SCM.java
Patch:
@@ -741,7 +741,7 @@ public static List<SCMDescriptor<?>> _for(@CheckForNull final Job project) {
         if(project==null)   return all();
         
         final Descriptor pd = Jenkins.get().getDescriptor((Class) project.getClass());
-        List<SCMDescriptor<?>> r = new ArrayList<SCMDescriptor<?>>();
+        List<SCMDescriptor<?>> r = new ArrayList<>();
         for (SCMDescriptor<?> scmDescriptor : all()) {
             if(!scmDescriptor.isApplicable(project))    continue;
 

File: core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
Patch:
@@ -552,7 +552,7 @@ public boolean hasPermission(Permission permission) {
      * All users who can login to the system.
      */
     public List<User> getAllUsers() {
-        List<User> r = new ArrayList<User>();
+        List<User> r = new ArrayList<>();
         for (User u : User.getAll()) {
             if(u.getProperty(Details.class)!=null)
                 r.add(u);
@@ -587,7 +587,7 @@ public static final class SignupInfo {
          * Keys are field names (e.g. {@code password2}), values are the messages.
          */
         // TODO i18n?
-        public HashMap<String, String> errors = new HashMap<String, String>();
+        public HashMap<String, String> errors = new HashMap<>();
 
         public SignupInfo() {
         }

File: core/src/main/java/hudson/slaves/DelegatingComputerLauncher.java
Patch:
@@ -82,7 +82,7 @@ public static abstract class DescriptorImpl extends Descriptor<ComputerLauncher>
          */
         public List<Descriptor<ComputerLauncher>> applicableDescriptors(@CheckForNull Slave it,
                                                                         @Nonnull Slave.SlaveDescriptor itDescriptor) {
-            List<Descriptor<ComputerLauncher>> r = new ArrayList<Descriptor<ComputerLauncher>>();
+            List<Descriptor<ComputerLauncher>> r = new ArrayList<>();
             for (Descriptor<ComputerLauncher> d : itDescriptor.computerLauncherDescriptors(it)) {
                 if (DelegatingComputerLauncher.class.isAssignableFrom(d.getKlass().toJavaClass()))  continue;
                 r.add(d);
@@ -98,7 +98,7 @@ public List<Descriptor<ComputerLauncher>> applicableDescriptors(@CheckForNull Sl
         @Restricted(DoNotUse.class)
         @RestrictedSince("2.12")
         public List<Descriptor<ComputerLauncher>> getApplicableDescriptors() {
-            List<Descriptor<ComputerLauncher>> r = new ArrayList<Descriptor<ComputerLauncher>>();
+            List<Descriptor<ComputerLauncher>> r = new ArrayList<>();
             for (Descriptor<ComputerLauncher> d :
                     Jenkins.get().getDescriptorList(ComputerLauncher.class)) {
                 if (DelegatingComputerLauncher.class.isAssignableFrom(d.getKlass().toJavaClass()))  continue;

File: core/src/main/java/hudson/util/spring/DefaultRuntimeSpringConfiguration.java
Patch:
@@ -47,9 +47,9 @@
 class DefaultRuntimeSpringConfiguration implements RuntimeSpringConfiguration {
     private static final Logger LOGGER = Logger.getLogger(DefaultRuntimeSpringConfiguration.class.getName());
     private StaticWebApplicationContext context;
-    private Map<String,BeanConfiguration> beanConfigs = new HashMap<String,BeanConfiguration>();
-    private Map<String,BeanDefinition> beanDefinitions = new HashMap<String,BeanDefinition>();
-    private List<String> beanNames = new ArrayList<String>();
+    private Map<String,BeanConfiguration> beanConfigs = new HashMap<>();
+    private Map<String,BeanDefinition> beanDefinitions = new HashMap<>();
+    private List<String> beanNames = new ArrayList<>();
 
     public DefaultRuntimeSpringConfiguration() {
         super();

File: core/src/test/java/hudson/EnvVarsTest.java
Patch:
@@ -138,6 +138,6 @@ public void overrideOrderCalculatorCyclic() {
         OverrideOrderCalculator calc = new OverrideOrderCalculator(env, overrides);
         List<String> order = calc.getOrderedVariableNames();
         assertEquals(Arrays.asList("B", "A", "C"), order.subList(0, 3));
-        assertEquals(Sets.newHashSet("E", "D"), new HashSet<String>(order.subList(3, order.size())));
+        assertEquals(Sets.newHashSet("E", "D"), new HashSet<>(order.subList(3, order.size())));
     }
 }

File: core/src/test/java/hudson/UtilTest.java
Patch:
@@ -62,7 +62,7 @@ public class UtilTest {
 
     @Test
     public void testReplaceMacro() {
-        Map<String,String> m = new HashMap<String,String>();
+        Map<String,String> m = new HashMap<>();
         m.put("A","a");
         m.put("A.B","a-b");
         m.put("AA","aa");

File: core/src/test/java/hudson/cli/ListJobsCommandTest.java
Patch:
@@ -178,11 +178,11 @@ private TypeSafeMatcher<ByteArrayOutputStream> listsJobs(final String... expecte
             @Override
             protected boolean matchesSafely(ByteArrayOutputStream item) {
 
-                final HashSet<String> jobs = new HashSet<String>(
+                final HashSet<String> jobs = new HashSet<>(
                         Arrays.asList(item.toString().split(System.getProperty("line.separator")))
                 );
 
-                return new HashSet<String>(Arrays.asList(expected)).equals(jobs);
+                return new HashSet<>(Arrays.asList(expected)).equals(jobs);
             }
 
             @Override

File: core/src/test/java/hudson/model/ActionableTest.java
Patch:
@@ -54,7 +54,7 @@ public void replaceAction() {
     }
 
     static class ActionableOverride extends Actionable {
-        ArrayList<Action> specialActions = new ArrayList<Action>();
+        ArrayList<Action> specialActions = new ArrayList<>();
 
         @Override
         public String getDisplayName() {

File: core/src/test/java/hudson/model/ParametersActionTest.java
Patch:
@@ -112,7 +112,7 @@ public void checkNullParameterValues() {
         assertEquals(2, vars.size());   
         parametersAction.createVariableResolver(build);
         
-        LinkedList<BuildWrapper> wrappers = new LinkedList<BuildWrapper>();
+        LinkedList<BuildWrapper> wrappers = new LinkedList<>();
         parametersAction.createBuildWrappers(build, wrappers);
         assertEquals(0, wrappers.size());
         

File: core/src/test/java/hudson/model/ViewTest.java
Patch:
@@ -46,7 +46,7 @@ public void testAddDisplayNamesToSearchIndex() {
         TopLevelItem item2 = Mockito.mock(TopLevelItem.class);
         Mockito.when(item2.getSearchUrl()).thenReturn(url2);
         Mockito.when(item2.getDisplayName()).thenReturn(displayName2);
-        Collection<TopLevelItem> items = new ArrayList<TopLevelItem>();
+        Collection<TopLevelItem> items = new ArrayList<>();
         items.add(item1);
         items.add(item2);
         
@@ -62,7 +62,7 @@ public void testAddDisplayNamesToSearchIndex() {
         SearchIndex index = sib.make();
         
         // now make sure we can fetch item1 from the index
-        List<SearchItem> result = new ArrayList<SearchItem>();
+        List<SearchItem> result = new ArrayList<>();
         index.find(displayName1, result);
         assertEquals(1, result.size());
         SearchItem actual = result.get(0);

File: core/src/test/java/hudson/scheduler/CronTabDayOfWeekLocaleTest.java
Patch:
@@ -29,7 +29,7 @@ public class CronTabDayOfWeekLocaleTest {
     @Parameters
     public static Collection<Object[]> parameters() {
         final Locale[] locales = Locale.getAvailableLocales();
-        final Collection<Object[]> parameters = new ArrayList<Object[]>();
+        final Collection<Object[]> parameters = new ArrayList<>();
         for (final Locale locale : locales) {
             final Calendar cal = Calendar.getInstance(locale);
             if (GregorianCalendar.class.equals(cal.getClass())) {

File: core/src/test/java/hudson/scheduler/CronTabEventualityTest.java
Patch:
@@ -20,7 +20,7 @@
 public class CronTabEventualityTest {
     @Parameterized.Parameters
     public static Collection<Object[]> parameters() {
-        Collection<Object[]> parameters = new ArrayList<Object[]>();
+        Collection<Object[]> parameters = new ArrayList<>();
         parameters.add(new Object[]{"zero", Hash.zero()});
         parameters.add(new Object[]{"seed1", Hash.from("seed1")});
         parameters.add(new Object[]{"seed2", Hash.from("seed2")});

File: core/src/test/java/hudson/scheduler/CronTabTest.java
Patch:
@@ -272,7 +272,7 @@ public int next(int n) {
 
     @Test public void repeatedHash() throws Exception {
         CronTabList tabs = CronTabList.create("H * * * *\nH * * * *", Hash.from("seed"));
-        List<Integer> times = new ArrayList<Integer>();
+        List<Integer> times = new ArrayList<>();
         for (int i = 0; i < 60; i++) {
             if (tabs.check(new GregorianCalendar(2013, 3, 3, 11, i, 0))) {
                 times.add(i);
@@ -306,7 +306,7 @@ public int next(int n) {
     @Issue("JENKINS-9283")
     @Test public void testTimezone() throws Exception {
         CronTabList tabs = CronTabList.create("TZ=Australia/Sydney\nH * * * *\nH * * * *", Hash.from("seed"));
-        List<Integer> times = new ArrayList<Integer>();
+        List<Integer> times = new ArrayList<>();
         for (int i = 0; i < 60; i++) {
             GregorianCalendar calendar = new GregorianCalendar(TimeZone.getTimeZone("UTC"));
             calendar.set(2013, Calendar.APRIL, 3, 11, i, 0);

File: core/src/test/java/hudson/search/SearchTest.java
Patch:
@@ -93,7 +93,7 @@ public String getSearchUrl() {
 
         SuggestedItem suggestedHit = new SuggestedItem(searchItemHit);
         SuggestedItem suggestedNoHit = new SuggestedItem(searchItemNoHit);
-        ArrayList<SuggestedItem> list = new ArrayList<SuggestedItem>();
+        ArrayList<SuggestedItem> list = new ArrayList<>();
         list.add(suggestedNoHit);
         list.add(suggestedHit); // make sure the hit is the second item
 

File: core/src/test/java/hudson/slaves/ChannelPingerTest.java
Patch:
@@ -27,7 +27,7 @@ public class ChannelPingerTest {
 
     @Mock private Channel mockChannel;
 
-    private Map<String, String> savedSystemProperties = new HashMap<String, String>();
+    private Map<String, String> savedSystemProperties = new HashMap<>();
 
     @Before
     public void setUp() throws Exception {

File: core/src/test/java/hudson/util/CyclicGraphDetectorTest.java
Patch:
@@ -32,7 +32,7 @@ Graph e(String src, String dst) {
         }
 
         Set<String> nodes() {
-            Set<String> nodes = new LinkedHashSet<String>();
+            Set<String> nodes = new LinkedHashSet<>();
             for (Edge e : this) {
                 nodes.add(e.src);
                 nodes.add(e.dst);
@@ -41,7 +41,7 @@ Set<String> nodes() {
         }
 
         Set<String> edges(String from) {
-            Set<String> edges = new LinkedHashSet<String>();
+            Set<String> edges = new LinkedHashSet<>();
             for (Edge e : this) {
                 if (e.src.equals(from))
                     edges.add(e.dst);

File: core/src/test/java/hudson/util/PackedMapTest.java
Patch:
@@ -21,7 +21,7 @@ static class Holder {
 
     @Test
     public void basic() {
-        Map<String,String> o = new TreeMap<String, String>();
+        Map<String,String> o = new TreeMap<>();
         o.put("a","b");
         o.put("c","d");
 

File: core/src/test/java/hudson/util/RunListTest.java
Patch:
@@ -58,7 +58,7 @@ private void setUpByTimestampRuns() {
 		when(r1.getTimeInMillis()).thenReturn(200L);
 		when(r2.getTimeInMillis()).thenReturn(300L);
 
-		ArrayList<Run> list = new ArrayList<Run>();
+		ArrayList<Run> list = new ArrayList<>();
 		list.add(r2);
 		list.add(r1);
 

File: core/src/test/java/hudson/util/XStream2Test.java
Patch:
@@ -271,7 +271,7 @@ public static class Point {
     }
 
     public static class Foo2 {
-        ConcurrentHashMap<String,String> m = new ConcurrentHashMap<String,String>();
+        ConcurrentHashMap<String,String> m = new ConcurrentHashMap<>();
     }
 
     @Issue("SECURITY-105")

File: core/src/test/java/jenkins/model/lazy/AbstractLazyLoadRunMapTest.java
Patch:
@@ -73,7 +73,7 @@ public FakeMap make() {
             return new FakeMap(getDir()) {
                 @Override
                 protected BuildReference<Build> createReference(Build r) {
-                    return new BuildReference<Build>(Integer.toString(r.n), /* pretend referent expired */ null);
+                    return new BuildReference<>(Integer.toString(r.n), /* pretend referent expired */ null);
                 }
             };
         }

File: core/src/test/java/jenkins/model/lazy/SortedListTest.java
Patch:
@@ -36,7 +36,7 @@
  * @author Kohsuke Kawaguchi
  */
 public class SortedListTest {
-    SortedList<String> l = new SortedList<String>(new ArrayList<String>(Arrays.asList("B","D","F")));
+    SortedList<String> l = new SortedList<>(new ArrayList<>(Arrays.asList("B", "D", "F")));
 
     @Test
     public void testCeil() {
@@ -106,7 +106,7 @@ public void remove() {
     @Test
     public void testClone() {
         final int originalSize = l.size();
-        SortedList<String> l2 = new SortedList<String>(l);
+        SortedList<String> l2 = new SortedList<>(l);
         assertEquals(originalSize, l2.size());
         assertEquals(originalSize, l.size());
         for (int i = 0; i < originalSize; i++) {

File: core/src/test/java/jenkins/security/ConfidentialStoreRule.java
Patch:
@@ -24,6 +24,6 @@ protected void after() {
     }
 
     static {
-        ConfidentialStore.TEST = new ThreadLocal<ConfidentialStore>();
+        ConfidentialStore.TEST = new ThreadLocal<>();
     }
 }

File: core/src/test/java/jenkins/util/xstream/XStreamDOMTest.java
Patch:
@@ -124,7 +124,7 @@ public void testNameEscape() {
     public static class Name_That_Gets_Escaped {}
 
     public static class DomInMap {
-        Map<String,XStreamDOM> values = new HashMap<String, XStreamDOM>();
+        Map<String,XStreamDOM> values = new HashMap<>();
     }
 
     @Test

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1059,8 +1059,8 @@ private StringBuilder buildSuperclassHierarchy(Class c, StringBuilder buf) {
         }
 
         public int compareTo(Tag that) {
-            int r = Double.compare(this.ordinal, that.ordinal);
-            if (r!=0)   return -r; // descending for ordinal
+            int r = Double.compare(that.ordinal, this.ordinal);
+            if (r!=0)   return r; // descending for ordinal by reversing the order for compare
             return this.hierarchy.compareTo(that.hierarchy);
         }
     }

File: core/src/main/java/hudson/model/RunMap.java
Patch:
@@ -156,7 +156,7 @@ public R oldestValue() {
     @Deprecated
     public static final Comparator<Comparable> COMPARATOR = new Comparator<Comparable>() {
         public int compare(Comparable o1, Comparable o2) {
-            return -o1.compareTo(o2);
+            return o2.compareTo(o1);
         }
     };
 

File: core/src/main/java/hudson/tasks/BatchFile.java
Patch:
@@ -67,7 +67,7 @@ protected String getFileExtension() {
 
     @CheckForNull
     public final Integer getUnstableReturn() {
-        return new Integer(0).equals(unstableReturn) ? null : unstableReturn;
+        return Integer.valueOf(0).equals(unstableReturn) ? null : unstableReturn;
     }
 
     @DataBoundSetter

File: core/src/main/java/hudson/tasks/Shell.java
Patch:
@@ -106,7 +106,7 @@ protected String getFileExtension() {
 
     @CheckForNull
     public final Integer getUnstableReturn() {
-        return new Integer(0).equals(unstableReturn) ? null : unstableReturn;
+        return Integer.valueOf(0).equals(unstableReturn) ? null : unstableReturn;
     }
 
     @DataBoundSetter

File: core/src/main/java/hudson/widgets/HistoryWidget.java
Patch:
@@ -285,7 +285,7 @@ private Long getPagingParam(@CheckForNull StaplerRequest currentRequest, @CheckF
             return null;
         }
         try {
-            return new Long(paramVal);
+            return Long.valueOf(paramVal);
         } catch (NumberFormatException nfe) {
             return null;
         }

File: core/src/main/java/hudson/DependencyRunner.java
Patch:
@@ -47,7 +47,7 @@ public class DependencyRunner implements Runnable {
 	
     ProjectRunnable runnable;
 
-    List<AbstractProject> polledProjects = new ArrayList<AbstractProject>();
+    List<AbstractProject> polledProjects = new ArrayList<>();
 
     public DependencyRunner(ProjectRunnable runnable) {
         this.runnable = runnable;
@@ -56,7 +56,7 @@ public DependencyRunner(ProjectRunnable runnable) {
     public void run() {
         SecurityContext oldContext = ACL.impersonate(ACL.SYSTEM);
         try {
-            Set<AbstractProject> topLevelProjects = new HashSet<AbstractProject>();
+            Set<AbstractProject> topLevelProjects = new HashSet<>();
             // Get all top-level projects
             LOGGER.fine("assembling top level projects");
             for (AbstractProject p : Jenkins.get().allItems(AbstractProject.class))

File: core/src/main/java/hudson/PluginFirstClassLoader.java
Patch:
@@ -50,7 +50,7 @@ public PluginFirstClassLoader() {
         super(null, false);
     }
 
-    private List<URL> urls = new ArrayList<URL>();
+    private List<URL> urls = new ArrayList<>();
 
     public void addPathFiles( Collection<File> paths )
         throws IOException

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -2131,7 +2131,7 @@ public String getExceptionString() {
      * Stores {@link Plugin} instances.
      */
     /*package*/ static final class PluginInstanceStore {
-        final Map<PluginWrapper,Plugin> store = new ConcurrentHashMap<PluginWrapper,Plugin>();
+        final Map<PluginWrapper,Plugin> store = new ConcurrentHashMap<>();
     }
 
     /**
@@ -2174,7 +2174,7 @@ public List<PluginWrapper> getPluginsWithCycle() {
     @Extension @Symbol("pluginUpdate")
     public static final class PluginUpdateMonitor extends AdministrativeMonitor {
 
-        private Map<String, PluginUpdateInfo> pluginsToBeUpdated = new HashMap<String, PluginManager.PluginUpdateMonitor.PluginUpdateInfo>();
+        private Map<String, PluginUpdateInfo> pluginsToBeUpdated = new HashMap<>();
 
         /**
          * Convenience method to ease access to this monitor, this allows other plugins to register required updates.

File: core/src/main/java/hudson/diagnosis/OldDataMonitor.java
Patch:
@@ -294,7 +294,7 @@ public boolean isOld(int threshold) {
      */
     @Restricted(NoExternalUse.class)
     public Iterator<VersionNumber> getVersionList() {
-        TreeSet<VersionNumber> set = new TreeSet<VersionNumber>();
+        TreeSet<VersionNumber> set = new TreeSet<>();
         for (VersionRange vr : data.values()) {
             if (vr.max != null) {
                 set.add(vr.max);
@@ -364,7 +364,7 @@ private void saveAndRemoveEntries(Predicate<Map.Entry<SaveableReference, Version
          * does occur: just means the user will be prompted to discard less than they should have been (and
          * would see the warning again after next restart).
          */
-        List<SaveableReference> removed = new ArrayList<SaveableReference>();
+        List<SaveableReference> removed = new ArrayList<>();
         for (Map.Entry<SaveableReference,VersionRange> entry : data.entrySet()) {
             if (matchingPredicate.apply(entry)) {
                 Saveable s = entry.getKey().get();

File: core/src/main/java/hudson/model/AbstractCIBase.java
Patch:
@@ -93,7 +93,7 @@ protected void killComputer(Computer c) {
     * Package-protected, but accessed API
     * ============================================================================================================== */
 
-    /*package*/ final CopyOnWriteArraySet<String> disabledAdministrativeMonitors = new CopyOnWriteArraySet<String>();
+    /*package*/ final CopyOnWriteArraySet<String> disabledAdministrativeMonitors = new CopyOnWriteArraySet<>();
 
     @Restricted(NoExternalUse.class)
     public CopyOnWriteArraySet<String> getDisabledAdministrativeMonitors(){
@@ -192,11 +192,11 @@ public void run() {
      */
     protected void updateComputerList(final boolean automaticSlaveLaunch) {
         final Map<Node,Computer> computers = getComputerMap();
-        final Set<Computer> old = new HashSet<Computer>(computers.size());
+        final Set<Computer> old = new HashSet<>(computers.size());
         Queue.withLock(new Runnable() {
             @Override
             public void run() {
-                Map<String,Computer> byName = new HashMap<String,Computer>();
+                Map<String,Computer> byName = new HashMap<>();
                 for (Computer c : computers.values()) {
                     old.add(c);
                     Node node = c.getNode();

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -981,7 +981,7 @@ public static AbstractItem resolveForCLI(
     /**
      * Replaceable pronoun of that points to a job. Defaults to "Job"/"Project" depending on the context.
      */
-    public static final Message<AbstractItem> PRONOUN = new Message<AbstractItem>();
+    public static final Message<AbstractItem> PRONOUN = new Message<>();
 
     /**
      * Replaceable noun for describing the kind of task that this item represents. Defaults to "Build".

File: core/src/main/java/hudson/model/Node.java
Patch:
@@ -282,7 +282,7 @@ void setTemporaryOfflineCause(OfflineCause cause) {
      * Return the possibly empty tag cloud for the labels of this node.
      */
     public TagCloud<LabelAtom> getLabelCloud() {
-        return new TagCloud<LabelAtom>(getAssignedLabels(),new WeightFunction<LabelAtom>() {
+        return new TagCloud<>(getAssignedLabels(), new WeightFunction<LabelAtom>() {
             public float weight(LabelAtom item) {
                 return item.getTiedJobCount();
             }
@@ -313,7 +313,7 @@ public Set<LabelAtom> getAssignedLabels() {
      * @return HashSet<Label>.
      */
     private HashSet<LabelAtom> getDynamicLabels() {
-        HashSet<LabelAtom> result = new HashSet<LabelAtom>();
+        HashSet<LabelAtom> result = new HashSet<>();
         for (LabelFinder labeler : LabelFinder.all()) {
             // Filter out any bad(null) results from plugins
             // for compatibility reasons, findLabels may return LabelExpression and not atom.
@@ -526,7 +526,7 @@ public Object onConvert(Type targetType, Class targetTypeErasure, Object jsonSou
                 }
 
                 try {
-                    DescribableList<NodeProperty<?>, NodePropertyDescriptor> tmp = new DescribableList<NodeProperty<?>, NodePropertyDescriptor>(Saveable.NOOP,getNodeProperties().toList());
+                    DescribableList<NodeProperty<?>, NodePropertyDescriptor> tmp = new DescribableList<>(Saveable.NOOP, getNodeProperties().toList());
                     tmp.rebuild(req, jsonForProperties, NodeProperty.all());
                     return tmp.toList();
                 } catch (FormException e) {

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -1482,7 +1482,7 @@ public class Canceled extends RestartJenkinsJobStatus {
      * Tests the internet connectivity.
      */
     public final class ConnectionCheckJob extends UpdateCenterJob {
-        private final Vector<String> statuses= new Vector<String>();
+        private final Vector<String> statuses= new Vector<>();
 
         final Map<String, ConnectionStatus> connectionStates = new ConcurrentHashMap<>();
 

File: core/src/main/java/hudson/scm/SCM.java
Patch:
@@ -741,7 +741,7 @@ public static List<SCMDescriptor<?>> _for(@CheckForNull final Job project) {
         if(project==null)   return all();
         
         final Descriptor pd = Jenkins.get().getDescriptor((Class) project.getClass());
-        List<SCMDescriptor<?>> r = new ArrayList<SCMDescriptor<?>>();
+        List<SCMDescriptor<?>> r = new ArrayList<>();
         for (SCMDescriptor<?> scmDescriptor : all()) {
             if(!scmDescriptor.isApplicable(project))    continue;
 

File: core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
Patch:
@@ -552,7 +552,7 @@ public boolean hasPermission(Permission permission) {
      * All users who can login to the system.
      */
     public List<User> getAllUsers() {
-        List<User> r = new ArrayList<User>();
+        List<User> r = new ArrayList<>();
         for (User u : User.getAll()) {
             if(u.getProperty(Details.class)!=null)
                 r.add(u);
@@ -587,7 +587,7 @@ public static final class SignupInfo {
          * Keys are field names (e.g. {@code password2}), values are the messages.
          */
         // TODO i18n?
-        public HashMap<String, String> errors = new HashMap<String, String>();
+        public HashMap<String, String> errors = new HashMap<>();
 
         public SignupInfo() {
         }

File: core/src/main/java/hudson/slaves/DelegatingComputerLauncher.java
Patch:
@@ -82,7 +82,7 @@ public static abstract class DescriptorImpl extends Descriptor<ComputerLauncher>
          */
         public List<Descriptor<ComputerLauncher>> applicableDescriptors(@CheckForNull Slave it,
                                                                         @Nonnull Slave.SlaveDescriptor itDescriptor) {
-            List<Descriptor<ComputerLauncher>> r = new ArrayList<Descriptor<ComputerLauncher>>();
+            List<Descriptor<ComputerLauncher>> r = new ArrayList<>();
             for (Descriptor<ComputerLauncher> d : itDescriptor.computerLauncherDescriptors(it)) {
                 if (DelegatingComputerLauncher.class.isAssignableFrom(d.getKlass().toJavaClass()))  continue;
                 r.add(d);
@@ -98,7 +98,7 @@ public List<Descriptor<ComputerLauncher>> applicableDescriptors(@CheckForNull Sl
         @Restricted(DoNotUse.class)
         @RestrictedSince("2.12")
         public List<Descriptor<ComputerLauncher>> getApplicableDescriptors() {
-            List<Descriptor<ComputerLauncher>> r = new ArrayList<Descriptor<ComputerLauncher>>();
+            List<Descriptor<ComputerLauncher>> r = new ArrayList<>();
             for (Descriptor<ComputerLauncher> d :
                     Jenkins.get().getDescriptorList(ComputerLauncher.class)) {
                 if (DelegatingComputerLauncher.class.isAssignableFrom(d.getKlass().toJavaClass()))  continue;

File: core/src/main/java/hudson/util/spring/DefaultRuntimeSpringConfiguration.java
Patch:
@@ -47,9 +47,9 @@
 class DefaultRuntimeSpringConfiguration implements RuntimeSpringConfiguration {
     private static final Logger LOGGER = Logger.getLogger(DefaultRuntimeSpringConfiguration.class.getName());
     private StaticWebApplicationContext context;
-    private Map<String,BeanConfiguration> beanConfigs = new HashMap<String,BeanConfiguration>();
-    private Map<String,BeanDefinition> beanDefinitions = new HashMap<String,BeanDefinition>();
-    private List<String> beanNames = new ArrayList<String>();
+    private Map<String,BeanConfiguration> beanConfigs = new HashMap<>();
+    private Map<String,BeanDefinition> beanDefinitions = new HashMap<>();
+    private List<String> beanNames = new ArrayList<>();
 
     public DefaultRuntimeSpringConfiguration() {
         super();

File: core/src/test/java/hudson/EnvVarsTest.java
Patch:
@@ -138,6 +138,6 @@ public void overrideOrderCalculatorCyclic() {
         OverrideOrderCalculator calc = new OverrideOrderCalculator(env, overrides);
         List<String> order = calc.getOrderedVariableNames();
         assertEquals(Arrays.asList("B", "A", "C"), order.subList(0, 3));
-        assertEquals(Sets.newHashSet("E", "D"), new HashSet<String>(order.subList(3, order.size())));
+        assertEquals(Sets.newHashSet("E", "D"), new HashSet<>(order.subList(3, order.size())));
     }
 }

File: core/src/test/java/hudson/UtilTest.java
Patch:
@@ -62,7 +62,7 @@ public class UtilTest {
 
     @Test
     public void testReplaceMacro() {
-        Map<String,String> m = new HashMap<String,String>();
+        Map<String,String> m = new HashMap<>();
         m.put("A","a");
         m.put("A.B","a-b");
         m.put("AA","aa");

File: core/src/test/java/hudson/cli/ListJobsCommandTest.java
Patch:
@@ -178,11 +178,11 @@ private TypeSafeMatcher<ByteArrayOutputStream> listsJobs(final String... expecte
             @Override
             protected boolean matchesSafely(ByteArrayOutputStream item) {
 
-                final HashSet<String> jobs = new HashSet<String>(
+                final HashSet<String> jobs = new HashSet<>(
                         Arrays.asList(item.toString().split(System.getProperty("line.separator")))
                 );
 
-                return new HashSet<String>(Arrays.asList(expected)).equals(jobs);
+                return new HashSet<>(Arrays.asList(expected)).equals(jobs);
             }
 
             @Override

File: core/src/test/java/hudson/model/ActionableTest.java
Patch:
@@ -54,7 +54,7 @@ public void replaceAction() {
     }
 
     static class ActionableOverride extends Actionable {
-        ArrayList<Action> specialActions = new ArrayList<Action>();
+        ArrayList<Action> specialActions = new ArrayList<>();
 
         @Override
         public String getDisplayName() {

File: core/src/test/java/hudson/model/ParametersActionTest.java
Patch:
@@ -112,7 +112,7 @@ public void checkNullParameterValues() {
         assertEquals(2, vars.size());   
         parametersAction.createVariableResolver(build);
         
-        LinkedList<BuildWrapper> wrappers = new LinkedList<BuildWrapper>();
+        LinkedList<BuildWrapper> wrappers = new LinkedList<>();
         parametersAction.createBuildWrappers(build, wrappers);
         assertEquals(0, wrappers.size());
         

File: core/src/test/java/hudson/model/ViewTest.java
Patch:
@@ -46,7 +46,7 @@ public void testAddDisplayNamesToSearchIndex() {
         TopLevelItem item2 = Mockito.mock(TopLevelItem.class);
         Mockito.when(item2.getSearchUrl()).thenReturn(url2);
         Mockito.when(item2.getDisplayName()).thenReturn(displayName2);
-        Collection<TopLevelItem> items = new ArrayList<TopLevelItem>();
+        Collection<TopLevelItem> items = new ArrayList<>();
         items.add(item1);
         items.add(item2);
         
@@ -62,7 +62,7 @@ public void testAddDisplayNamesToSearchIndex() {
         SearchIndex index = sib.make();
         
         // now make sure we can fetch item1 from the index
-        List<SearchItem> result = new ArrayList<SearchItem>();
+        List<SearchItem> result = new ArrayList<>();
         index.find(displayName1, result);
         assertEquals(1, result.size());
         SearchItem actual = result.get(0);

File: core/src/test/java/hudson/scheduler/CronTabDayOfWeekLocaleTest.java
Patch:
@@ -29,7 +29,7 @@ public class CronTabDayOfWeekLocaleTest {
     @Parameters
     public static Collection<Object[]> parameters() {
         final Locale[] locales = Locale.getAvailableLocales();
-        final Collection<Object[]> parameters = new ArrayList<Object[]>();
+        final Collection<Object[]> parameters = new ArrayList<>();
         for (final Locale locale : locales) {
             final Calendar cal = Calendar.getInstance(locale);
             if (GregorianCalendar.class.equals(cal.getClass())) {

File: core/src/test/java/hudson/scheduler/CronTabEventualityTest.java
Patch:
@@ -20,7 +20,7 @@
 public class CronTabEventualityTest {
     @Parameterized.Parameters
     public static Collection<Object[]> parameters() {
-        Collection<Object[]> parameters = new ArrayList<Object[]>();
+        Collection<Object[]> parameters = new ArrayList<>();
         parameters.add(new Object[]{"zero", Hash.zero()});
         parameters.add(new Object[]{"seed1", Hash.from("seed1")});
         parameters.add(new Object[]{"seed2", Hash.from("seed2")});

File: core/src/test/java/hudson/scheduler/CronTabTest.java
Patch:
@@ -272,7 +272,7 @@ public int next(int n) {
 
     @Test public void repeatedHash() throws Exception {
         CronTabList tabs = CronTabList.create("H * * * *\nH * * * *", Hash.from("seed"));
-        List<Integer> times = new ArrayList<Integer>();
+        List<Integer> times = new ArrayList<>();
         for (int i = 0; i < 60; i++) {
             if (tabs.check(new GregorianCalendar(2013, 3, 3, 11, i, 0))) {
                 times.add(i);
@@ -306,7 +306,7 @@ public int next(int n) {
     @Issue("JENKINS-9283")
     @Test public void testTimezone() throws Exception {
         CronTabList tabs = CronTabList.create("TZ=Australia/Sydney\nH * * * *\nH * * * *", Hash.from("seed"));
-        List<Integer> times = new ArrayList<Integer>();
+        List<Integer> times = new ArrayList<>();
         for (int i = 0; i < 60; i++) {
             GregorianCalendar calendar = new GregorianCalendar(TimeZone.getTimeZone("UTC"));
             calendar.set(2013, Calendar.APRIL, 3, 11, i, 0);

File: core/src/test/java/hudson/search/SearchTest.java
Patch:
@@ -93,7 +93,7 @@ public String getSearchUrl() {
 
         SuggestedItem suggestedHit = new SuggestedItem(searchItemHit);
         SuggestedItem suggestedNoHit = new SuggestedItem(searchItemNoHit);
-        ArrayList<SuggestedItem> list = new ArrayList<SuggestedItem>();
+        ArrayList<SuggestedItem> list = new ArrayList<>();
         list.add(suggestedNoHit);
         list.add(suggestedHit); // make sure the hit is the second item
 

File: core/src/test/java/hudson/slaves/ChannelPingerTest.java
Patch:
@@ -27,7 +27,7 @@ public class ChannelPingerTest {
 
     @Mock private Channel mockChannel;
 
-    private Map<String, String> savedSystemProperties = new HashMap<String, String>();
+    private Map<String, String> savedSystemProperties = new HashMap<>();
 
     @Before
     public void setUp() throws Exception {

File: core/src/test/java/hudson/util/CyclicGraphDetectorTest.java
Patch:
@@ -32,7 +32,7 @@ Graph e(String src, String dst) {
         }
 
         Set<String> nodes() {
-            Set<String> nodes = new LinkedHashSet<String>();
+            Set<String> nodes = new LinkedHashSet<>();
             for (Edge e : this) {
                 nodes.add(e.src);
                 nodes.add(e.dst);
@@ -41,7 +41,7 @@ Set<String> nodes() {
         }
 
         Set<String> edges(String from) {
-            Set<String> edges = new LinkedHashSet<String>();
+            Set<String> edges = new LinkedHashSet<>();
             for (Edge e : this) {
                 if (e.src.equals(from))
                     edges.add(e.dst);

File: core/src/test/java/hudson/util/PackedMapTest.java
Patch:
@@ -21,7 +21,7 @@ static class Holder {
 
     @Test
     public void basic() {
-        Map<String,String> o = new TreeMap<String, String>();
+        Map<String,String> o = new TreeMap<>();
         o.put("a","b");
         o.put("c","d");
 

File: core/src/test/java/hudson/util/RunListTest.java
Patch:
@@ -58,7 +58,7 @@ private void setUpByTimestampRuns() {
 		when(r1.getTimeInMillis()).thenReturn(200L);
 		when(r2.getTimeInMillis()).thenReturn(300L);
 
-		ArrayList<Run> list = new ArrayList<Run>();
+		ArrayList<Run> list = new ArrayList<>();
 		list.add(r2);
 		list.add(r1);
 

File: core/src/test/java/hudson/util/XStream2Test.java
Patch:
@@ -271,7 +271,7 @@ public static class Point {
     }
 
     public static class Foo2 {
-        ConcurrentHashMap<String,String> m = new ConcurrentHashMap<String,String>();
+        ConcurrentHashMap<String,String> m = new ConcurrentHashMap<>();
     }
 
     @Issue("SECURITY-105")

File: core/src/test/java/jenkins/model/lazy/AbstractLazyLoadRunMapTest.java
Patch:
@@ -73,7 +73,7 @@ public FakeMap make() {
             return new FakeMap(getDir()) {
                 @Override
                 protected BuildReference<Build> createReference(Build r) {
-                    return new BuildReference<Build>(Integer.toString(r.n), /* pretend referent expired */ null);
+                    return new BuildReference<>(Integer.toString(r.n), /* pretend referent expired */ null);
                 }
             };
         }

File: core/src/test/java/jenkins/model/lazy/SortedListTest.java
Patch:
@@ -36,7 +36,7 @@
  * @author Kohsuke Kawaguchi
  */
 public class SortedListTest {
-    SortedList<String> l = new SortedList<String>(new ArrayList<String>(Arrays.asList("B","D","F")));
+    SortedList<String> l = new SortedList<>(new ArrayList<>(Arrays.asList("B", "D", "F")));
 
     @Test
     public void testCeil() {
@@ -106,7 +106,7 @@ public void remove() {
     @Test
     public void testClone() {
         final int originalSize = l.size();
-        SortedList<String> l2 = new SortedList<String>(l);
+        SortedList<String> l2 = new SortedList<>(l);
         assertEquals(originalSize, l2.size());
         assertEquals(originalSize, l.size());
         for (int i = 0; i < originalSize; i++) {

File: core/src/test/java/jenkins/security/ConfidentialStoreRule.java
Patch:
@@ -24,6 +24,6 @@ protected void after() {
     }
 
     static {
-        ConfidentialStore.TEST = new ThreadLocal<ConfidentialStore>();
+        ConfidentialStore.TEST = new ThreadLocal<>();
     }
 }

File: core/src/test/java/jenkins/util/xstream/XStreamDOMTest.java
Patch:
@@ -124,7 +124,7 @@ public void testNameEscape() {
     public static class Name_That_Gets_Escaped {}
 
     public static class DomInMap {
-        Map<String,XStreamDOM> values = new HashMap<String, XStreamDOM>();
+        Map<String,XStreamDOM> values = new HashMap<>();
     }
 
     @Test

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -581,7 +581,7 @@ public synchronized EnvVars getEnvironmentVariables() {
                     LOGGER.log(FINEST, "Failed to get the environment variables of process with pid=" + p.getPid(), e);
                 }
             }
-            return null;
+            return env;
         }
         
         private synchronized EnvVars getEnvironmentVariables2() throws WindowsOSProcessException {

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1059,8 +1059,8 @@ private StringBuilder buildSuperclassHierarchy(Class c, StringBuilder buf) {
         }
 
         public int compareTo(Tag that) {
-            int r = Double.compare(this.ordinal, that.ordinal);
-            if (r!=0)   return -r; // descending for ordinal
+            int r = Double.compare(that.ordinal, this.ordinal);
+            if (r!=0)   return r; // descending for ordinal by reversing the order for compare
             return this.hierarchy.compareTo(that.hierarchy);
         }
     }

File: core/src/main/java/hudson/model/RunMap.java
Patch:
@@ -156,7 +156,7 @@ public R oldestValue() {
     @Deprecated
     public static final Comparator<Comparable> COMPARATOR = new Comparator<Comparable>() {
         public int compare(Comparable o1, Comparable o2) {
-            return -o1.compareTo(o2);
+            return o2.compareTo(o1);
         }
     };
 

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1429,7 +1429,6 @@ enum WorkspaceOfflineReason {
      */
     private boolean isAllSuitableNodesOffline(R build) {
         Label label = getAssignedLabel();
-        List<Node> allNodes = Jenkins.get().getNodes();
 
         if (label != null) {
             //Invalid label. Put in queue to make administrator fix

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -663,7 +663,6 @@ public void renameTo(String newName) throws IOException {
 
     @Override
     public void movedTo(DirectlyModifiableTopLevelItemGroup destination, AbstractItem newItem, File destDir) throws IOException {
-        Job newJob = (Job) newItem; // Missing covariant parameters type here.
         File oldBuildDir = getBuildDir();
         super.movedTo(destination, newItem, destDir);
         File newBuildDir = getBuildDir();

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -1355,7 +1355,7 @@ public static View create(StaplerRequest req, StaplerResponse rsp, ViewGroup own
     private static View copy(StaplerRequest req, ViewGroup owner, String name) throws IOException {
         View v;
         String from = req.getParameter("from");
-        View src = src = owner.getView(from);
+        View src = owner.getView(from);
 
         if(src==null) {
             if(Util.fixEmpty(from)==null)

File: core/src/main/java/hudson/tasks/BuildStepCompatibilityLayer.java
Patch:
@@ -121,7 +121,7 @@ public boolean prebuild(Build<?,?> build, BuildListener listener) {
     @Deprecated
     public boolean perform(Build<?, ?> build, Launcher launcher, BuildListener listener)
             throws InterruptedException, IOException {       
-        if (build instanceof AbstractBuild && Util.isOverridden(BuildStepCompatibilityLayer.class, this.getClass(),
+        if (build != null && Util.isOverridden(BuildStepCompatibilityLayer.class, this.getClass(),
                 "perform", AbstractBuild.class, Launcher.class, BuildListener.class)) {
             return perform((AbstractBuild<?, ?>) build, launcher, listener);
         }

File: cli/src/main/java/hudson/cli/CLI.java
Patch:
@@ -264,7 +264,7 @@ public boolean verify(String s, SSLSession sslSession) {
         if (userInfo != null) {
             factory = factory.basicAuth(userInfo);
         } else if (auth != null) {
-            factory = factory.basicAuth(auth.startsWith("@") ? FileUtils.readFileToString(new File(auth.substring(1))).trim() : auth);
+            factory = factory.basicAuth(auth.startsWith("@") ? FileUtils.readFileToString(new File(auth.substring(1)), Charset.defaultCharset()).trim() : auth);
         }
 
         if (mode == Mode.HTTP) {

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -208,8 +208,9 @@ public abstract class PluginManager extends AbstractModelObject implements OnMas
     private enum PMConstructor {
         JENKINS {
             @Override
-            @Nonnull PluginManager doCreate(@Nonnull Class<? extends PluginManager> klass,
-                                            @Nonnull Jenkins jenkins) throws ReflectiveOperationException {
+            @Nonnull 
+            PluginManager doCreate(@Nonnull Class<? extends PluginManager> klass,
+                                   @Nonnull Jenkins jenkins) throws ReflectiveOperationException {
                 return klass.getConstructor(Jenkins.class).newInstance(jenkins);
             }
         },

File: core/src/main/java/hudson/util/DoubleLaunchChecker.java
Patch:
@@ -39,6 +39,7 @@
 import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.Charset;
 import java.util.Random;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Logger;
@@ -100,7 +101,7 @@ protected void execute() {
         long t = timestampFile.lastModified();
         if(t!=0 && lastWriteTime!=0 && t!=lastWriteTime && !ignore) {
             try {
-                collidingId = FileUtils.readFileToString(timestampFile);
+                collidingId = FileUtils.readFileToString(timestampFile, Charset.defaultCharset());
             } catch (IOException e) {
                 LOGGER.log(Level.SEVERE, "Failed to read collision file", e);
             }
@@ -112,7 +113,7 @@ protected void execute() {
         }
 
         try {
-            FileUtils.writeStringToFile(timestampFile, getId());
+            FileUtils.writeStringToFile(timestampFile, getId(), Charset.defaultCharset());
             lastWriteTime = timestampFile.lastModified();
         } catch (IOException e) {
             // if failed to write, err on the safe side and assume things are OK.

File: core/src/main/java/jenkins/install/InstallUtil.java
Patch:
@@ -28,6 +28,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -224,7 +225,7 @@ public static void saveLastExecVersion() {
         File lastExecVersionFile = getLastExecVersionFile();
         if (lastExecVersionFile.exists()) {
             try {
-                String version = FileUtils.readFileToString(lastExecVersionFile);
+                String version = FileUtils.readFileToString(lastExecVersionFile, Charset.defaultCharset());
                 // JENKINS-37438 blank will force the setup
                 // wizard regardless of current state of the system
                 if (StringUtils.isBlank(version)) {
@@ -267,7 +268,7 @@ public static void saveLastExecVersion() {
     static void saveLastExecVersion(@Nonnull String version) {
         File lastExecVersionFile = getLastExecVersionFile();
         try {
-            FileUtils.write(lastExecVersionFile, version);
+            FileUtils.write(lastExecVersionFile, version, Charset.defaultCharset());
         } catch (IOException e) {
             LOGGER.log(SEVERE, "Failed to save " + lastExecVersionFile.getAbsolutePath(), e);
         }

File: core/src/main/java/jenkins/security/s2m/AdminWhitelistRule.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.PrintStream;
+import java.nio.charset.Charset;
 import java.util.Collection;
 import java.util.Enumeration;
 import java.util.logging.Logger;
@@ -96,7 +97,7 @@ public AdminWhitelistRule() throws IOException, InterruptedException {
     private boolean loadMasterKillSwitchFile(@Nonnull File f) {
         try {
             if (!f.exists())    return true;
-            return Boolean.parseBoolean(FileUtils.readFileToString(f).trim());
+            return Boolean.parseBoolean(FileUtils.readFileToString(f, Charset.defaultCharset()).trim());
         } catch (IOException e) {
             LOGGER.log(WARNING, "Failed to read "+f, e);
             return false;
@@ -213,7 +214,7 @@ public void setMasterKillSwitch(boolean state) {
         try {
             jenkins.checkPermission(Jenkins.RUN_SCRIPTS);
             File f = getMasterKillSwitchFile(jenkins);
-            FileUtils.writeStringToFile(f, Boolean.toString(state));
+            FileUtils.writeStringToFile(f, Boolean.toString(state), Charset.defaultCharset());
             // treat the file as the canonical source of information in case write fails
             masterKillSwitch = loadMasterKillSwitchFile(f);
         } catch (IOException e) {

File: core/src/test/java/hudson/PluginWrapperTest.java
Patch:
@@ -17,7 +17,7 @@
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.junit.Assert.*;
 import org.jvnet.hudson.test.Issue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -34,7 +34,7 @@ public void dependencyTest() {
         PluginWrapper.Dependency dependency = new PluginWrapper.Dependency(version);
         assertEquals("plugin", dependency.shortName);
         assertEquals("0.0.2", dependency.version);
-        assertEquals(false, dependency.optional);
+        assertFalse(dependency.optional);
     }
 
     @Test
@@ -43,7 +43,7 @@ public void optionalDependencyTest() {
         PluginWrapper.Dependency dependency = new PluginWrapper.Dependency(version);
         assertEquals("plugin", dependency.shortName);
         assertEquals("0.0.2", dependency.version);
-        assertEquals(true, dependency.optional);
+        assertTrue(dependency.optional);
     }
 
     @Test

File: core/src/test/java/hudson/slaves/ChannelPingerTest.java
Patch:
@@ -1,6 +1,6 @@
 package hudson.slaves;
 
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.verify;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
 import static org.powermock.api.mockito.PowerMockito.verifyStatic;

File: core/src/test/java/hudson/slaves/DelegatingComputerLauncherTest.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.ArrayList;
 
 import static org.junit.Assert.*;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doReturn;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import static org.powermock.api.mockito.PowerMockito.when;

File: core/src/test/java/hudson/slaves/NodeListTest.java
Patch:
@@ -40,6 +40,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.Charset;
 import java.util.Random;
 import java.util.Set;
 
@@ -131,7 +132,7 @@ public void serialization() throws Exception {
             XmlFile x = new XmlFile(Jenkins.XSTREAM, tmp);
             x.write(nl);
 
-            String xml = FileUtils.readFileToString(tmp);
+            String xml = FileUtils.readFileToString(tmp, Charset.defaultCharset());
             System.out.println(xml);
             assertEquals(6,xml.split("\n").length);
 

File: core/src/test/java/hudson/util/TextFileTest.java
Patch:
@@ -30,7 +30,7 @@ public void head() throws Exception {
     @Test
     public void shortHead() throws Exception {
         File f = tmp.newFile();
-        FileUtils.write(f, "hello");
+        FileUtils.write(f, "hello", Charset.defaultCharset());
 
         TextFile t = new TextFile(f);
         assertEquals("hello", t.head(35));
@@ -40,7 +40,7 @@ public void shortHead() throws Exception {
     public void tail() throws Exception {
         File f = tmp.newFile();
         FileUtils.copyURLToFile(getClass().getResource("ascii.txt"), f);
-        String whole = FileUtils.readFileToString(f);
+        String whole = FileUtils.readFileToString(f, Charset.defaultCharset());
         TextFile t = new TextFile(f);
         String tailStr = whole.substring(whole.length() - 34);
         assertEquals(tailStr, t.fastTail(tailStr.length()));
@@ -49,7 +49,7 @@ public void tail() throws Exception {
     @Test
     public void shortTail() throws Exception {
         File f = tmp.newFile();
-        FileUtils.write(f, "hello");
+        FileUtils.write(f, "hello", Charset.defaultCharset());
 
         TextFile t = new TextFile(f);
         assertEquals("hello", t.fastTail(35));

File: core/src/test/java/jenkins/model/JenkinsGetRootUrlTest.java
Patch:
@@ -37,7 +37,7 @@
 import org.jvnet.hudson.test.Issue;
 import org.kohsuke.stapler.Stapler;
 import org.kohsuke.stapler.StaplerRequest;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import org.mockito.Mockito;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;

File: core/src/test/java/jenkins/model/NewViewLinkTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: core/src/test/java/jenkins/model/RunIdMigratorTest.java
Patch:
@@ -161,7 +161,7 @@ public class RunIdMigratorTest {
     // TODO test sane recovery from various error conditions
 
     private void write(String file, String text) throws Exception {
-        FileUtils.write(new File(dir, file), text);
+        FileUtils.write(new File(dir, file), text, Charset.defaultCharset());
     }
 
     private void link(String symlink, String dest) throws Exception {
@@ -173,14 +173,14 @@ private String summarize() throws Exception {
     }
     private static String summarize(File dir) throws Exception {
         File[] kids = dir.listFiles();
-        Map<String,String> m = new TreeMap<String,String>();
+        Map<String,String> m = new TreeMap<>();
         for (File kid : kids) {
             String notation;
             String symlink = Util.resolveSymlink(kid);
             if (symlink != null) {
                 notation = "→" + symlink;
             } else if (kid.isFile()) {
-                notation = "'" + FileUtils.readFileToString(kid) + "'";
+                notation = "'" + FileUtils.readFileToString(kid, Charset.defaultCharset()) + "'";
             } else if (kid.isDirectory()) {
                 notation = summarize(kid);
             } else {

File: core/src/test/java/jenkins/model/lazy/FakeMap.java
Patch:
@@ -27,6 +27,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.Charset;
 
 /**
  * @author Kohsuke Kawaguchi
@@ -43,7 +44,7 @@ protected int getNumberOf(Build build) {
 
     @Override
     protected Build retrieve(File dir) throws IOException {
-        String n = FileUtils.readFileToString(new File(dir, "n")).trim();
+        String n = FileUtils.readFileToString(new File(dir, "n"), Charset.defaultCharset()).trim();
         //new Exception("loading #" + n).printStackTrace();
         return new Build(Integer.parseInt(n));
     }

File: core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.java
Patch:
@@ -3,6 +3,8 @@
 import hudson.FilePath;
 import hudson.Functions;
 import java.io.File;
+import java.nio.charset.Charset;
+
 import org.apache.commons.io.FileUtils;
 import static org.hamcrest.CoreMatchers.*;
 import static org.junit.Assert.*;
@@ -31,7 +33,7 @@ public void roundtrip() throws Exception {
         assertTrue(new File(tmp, "test").exists());
         assertTrue(new File(tmp, "master.key").exists());
 
-        assertThat(FileUtils.readFileToString(new File(tmp, "test")), not(containsString("Hello"))); // the data shouldn't be a plain text, obviously
+        assertThat(FileUtils.readFileToString(new File(tmp, "test"), Charset.defaultCharset()), not(containsString("Hello"))); // the data shouldn't be a plain text, obviously
 
         if (!Functions.isWindows()) {
             assertEquals(0700, new FilePath(tmp).mode() & 0777); // should be read only

File: core/src/test/java/jenkins/security/apitoken/ApiTokenStatsTest.java
Patch:
@@ -39,6 +39,7 @@
 import java.io.File;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
+import java.nio.charset.Charset;
 import java.text.SimpleDateFormat;
 import java.time.temporal.ChronoUnit;
 import java.util.Arrays;
@@ -189,7 +190,7 @@ public void resistantToDuplicatedUuid() throws Exception {
         
         { // replace the ID_1 with ID_2 in the file
             XmlFile statsFile = ApiTokenStats.getConfigFile(tmp.getRoot());
-            String content = FileUtils.readFileToString(statsFile.getFile());
+            String content = FileUtils.readFileToString(statsFile.getFile(), Charset.defaultCharset());
             // now there are multiple times the same id in the file with different stats
             String newContentWithDuplicatedId = content.replace(ID_1, ID_2).replace(ID_3, ID_2);
             FileUtils.write(statsFile.getFile(), newContentWithDuplicatedId);

File: core/src/test/java/jenkins/triggers/SCMTriggerItemTest.java
Patch:
@@ -1,6 +1,6 @@
 package jenkins.triggers;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.verify;
 
 import org.junit.Test;

File: core/src/main/java/hudson/DNSMultiCast.java
Patch:
@@ -4,9 +4,7 @@
 import jenkins.model.Jenkins;
 import jenkins.model.Jenkins.MasterComputer;
 
-import javax.jmdns.ServiceEvent;
 import javax.jmdns.ServiceInfo;
-import javax.jmdns.ServiceListener;
 import javax.jmdns.impl.JmDNSImpl;
 import java.io.Closeable;
 import java.io.IOException;

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -133,7 +133,6 @@
 import org.jenkinsci.remoting.SerializableOnlyOverRemoting;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
-import org.kohsuke.stapler.Function;
 import org.kohsuke.stapler.Stapler;
 
 import static hudson.FilePath.TarCompression.GZIP;

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -77,7 +77,6 @@
 
 import org.acegisecurity.AccessDeniedException;
 import org.kohsuke.stapler.HttpResponse;
-import org.kohsuke.stapler.HttpResponses;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 import org.kohsuke.stapler.Stapler;
@@ -97,7 +96,6 @@
 import static hudson.model.queue.Executables.getParentOf;
 import hudson.model.queue.SubTask;
 import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
-import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;
 
 import org.apache.commons.io.FileUtils;
 import org.kohsuke.accmod.Restricted;

File: core/src/main/java/hudson/model/BallColor.java
Patch:
@@ -26,7 +26,6 @@
 import hudson.util.ColorPalette;
 import jenkins.model.Jenkins;
 import org.jenkins.ui.icon.Icon;
-import org.jenkins.ui.icon.IconSet;
 import org.jvnet.localizer.LocaleProvider;
 import org.jvnet.localizer.Localizable;
 import org.kohsuke.stapler.Stapler;

File: core/src/main/java/hudson/model/DependencyGraph.java
Patch:
@@ -41,7 +41,6 @@
 import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.List;
-import java.util.ListIterator;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -37,7 +37,6 @@
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletResponse;
-import javax.xml.transform.Source;
 import javax.xml.transform.TransformerException;
 import javax.xml.transform.stream.StreamResult;
 import javax.xml.transform.stream.StreamSource;

File: core/src/main/java/hudson/model/Items.java
Patch:
@@ -41,7 +41,6 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;

File: core/src/main/java/hudson/model/ViewGroupMixIn.java
Patch:
@@ -29,7 +29,6 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.List;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;

File: core/src/main/java/hudson/model/queue/AbstractQueueSorterImpl.java
Patch:
@@ -2,7 +2,6 @@
 
 import hudson.model.Queue.BuildableItem;
 
-import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 

File: core/src/main/java/hudson/model/queue/QueueSorter.java
Patch:
@@ -8,7 +8,6 @@
 import hudson.model.Queue;
 import hudson.model.Queue.BuildableItem;
 
-import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 import java.util.logging.Logger;

File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java
Patch:
@@ -18,10 +18,8 @@
 import jenkins.model.Jenkins;
 import hudson.model.ModelObject;
 
-import javax.annotation.Nonnull;
 import javax.servlet.ServletRequest;
 import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpSession;
 
 import jenkins.security.HexStringConfidentialKey;
 

File: core/src/main/java/hudson/tasks/BuildTrigger.java
Patch:
@@ -52,7 +52,6 @@
 import java.io.PrintStream;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 import java.util.StringTokenizer;

File: core/src/main/java/hudson/tasks/Fingerprinter.java
Patch:
@@ -69,7 +69,6 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
-import java.util.ListIterator;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Random;

File: core/src/main/java/hudson/tasks/Publisher.java
Patch:
@@ -36,7 +36,6 @@
 
 import java.util.List;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Comparator;
 
 /**

File: core/src/main/java/hudson/triggers/SlowTriggerAdminMonitor.java
Patch:
@@ -3,7 +3,6 @@
 import hudson.Extension;
 import hudson.ExtensionList;
 import hudson.model.AdministrativeMonitor;
-import hudson.util.CopyOnWriteMap;
 import jenkins.model.Jenkins;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.DoNotUse;

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -41,7 +41,6 @@
 import hudson.model.Project;
 import hudson.model.TopLevelItem;
 import hudson.model.TopLevelItemDescriptor;
-import hudson.scheduler.CronTab;
 import hudson.scheduler.CronTabList;
 
 import java.io.InvalidObjectException;

File: core/src/main/java/hudson/util/MultipartFormDataParser.java
Patch:
@@ -32,7 +32,6 @@
 import javax.annotation.CheckForNull;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.ServletException;
-import java.util.List;
 import java.util.Map;
 import java.util.HashMap;
 

File: core/src/main/java/hudson/util/NoOverlapCategoryAxis.java
Patch:
@@ -37,7 +37,6 @@
 import java.awt.*;
 import java.awt.geom.Rectangle2D;
 import java.awt.geom.Point2D;
-import java.util.*;
 
 /**
  * This class implements X-axis label skipping algorithm to

File: core/src/main/java/hudson/views/MyViewsTabBar.java
Patch:
@@ -30,7 +30,6 @@
 import hudson.model.Descriptor;
 import hudson.model.View;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 import javax.annotation.Nonnull;

File: core/src/main/java/hudson/views/ViewsTabBar.java
Patch:
@@ -28,10 +28,8 @@
 import hudson.ExtensionPoint;
 import hudson.model.AbstractDescribableImpl;
 import hudson.model.Descriptor;
-import hudson.model.Descriptor.FormException;
 import hudson.model.View;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 import javax.annotation.Nonnull;

File: core/src/main/java/jenkins/model/ParameterizedJobMixIn.java
Patch:
@@ -32,7 +32,6 @@
 import hudson.model.Cause;
 import hudson.model.CauseAction;
 import hudson.model.Item;
-import static hudson.model.Item.CONFIGURE;
 import hudson.model.Items;
 import hudson.model.Job;
 import hudson.model.ParameterDefinition;

File: core/src/main/java/jenkins/slaves/restarter/JnlpSlaveRestarterInstaller.java
Patch:
@@ -14,7 +14,6 @@
 import java.io.IOException;
 import java.io.Serializable;
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.logging.Logger;

File: core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvent.java
Patch:
@@ -26,7 +26,6 @@
 
 import javax.annotation.Nonnull;
 import java.io.PrintWriter;
-import java.io.Serializable;
 import java.io.StringWriter;
 
 /**

File: core/src/main/java/jenkins/widgets/HistoryPageFilter.java
Patch:
@@ -36,7 +36,6 @@
 
 import javax.annotation.Nonnull;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.LinkedList;

File: core/src/test/java/hudson/XmlFileTest.java
Patch:
@@ -9,7 +9,6 @@
 import jenkins.model.Jenkins;
 import org.junit.Ignore;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
 import org.xml.sax.SAXParseException;
 
 import static org.hamcrest.CoreMatchers.is;

File: core/src/test/java/hudson/model/FingerprintCleanupThreadTest.java
Patch:
@@ -25,7 +25,6 @@
 
 import org.junit.Test;
 
-import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
 import java.io.ByteArrayOutputStream;
 import java.io.File;

File: core/src/test/java/hudson/model/JobTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.junit.Assert.*;
 
-import java.lang.reflect.Method;
 
 import org.hamcrest.CoreMatchers;
 import org.junit.Test;
@@ -17,7 +16,6 @@
 
 import hudson.EnvVars;
 import hudson.Platform;
-import hudson.util.ReflectionUtils;
 
 @RunWith(PowerMockRunner.class)
 @PrepareForTest({ Node.class, Platform.class })

File: core/src/test/java/hudson/model/LoadStatisticsTest.java
Patch:
@@ -29,14 +29,12 @@
 import java.io.OutputStream;
 import java.nio.file.Files;
 import java.nio.file.StandardOpenOption;
-import org.apache.commons.io.IOUtils;
 import org.jfree.chart.JFreeChart;
 import org.junit.Test;
 
 import javax.imageio.ImageIO;
 import java.awt.image.BufferedImage;
 import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
 
 import static org.hamcrest.CoreMatchers.is;

File: core/src/test/java/hudson/model/TaskActionTest.java
Patch:
@@ -1,14 +1,12 @@
 package hudson.model;
 
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
 import java.io.ByteArrayOutputStream;
 
 import hudson.console.AnnotatedLargeText;
 import hudson.security.ACL;
 import hudson.security.Permission;
-import org.acegisecurity.Authentication;
 import org.junit.Test;
 
 /**

File: core/src/test/java/hudson/util/AtomicFileWriterTest.java
Patch:
@@ -4,7 +4,6 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.ClassRule;
-import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
 import org.jvnet.hudson.test.Issue;

File: core/src/test/java/hudson/util/FileChannelWriterTest.java
Patch:
@@ -12,7 +12,6 @@
 import java.nio.charset.StandardCharsets;
 import java.nio.file.StandardOpenOption;
 
-import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.core.IsEqual.equalTo;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;

File: core/src/test/java/hudson/util/io/TarArchiverTest.java
Patch:
@@ -31,7 +31,6 @@
 import hudson.util.NullStream;
 import hudson.util.StreamTaskListener;
 import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.nio.file.Files;

File: core/src/test/java/hudson/util/io/ZipArchiverTest.java
Patch:
@@ -3,7 +3,6 @@
 import static org.junit.Assert.assertEquals;
 
 import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.nio.file.Files;

File: core/src/test/java/jenkins/util/TimerTest.java
Patch:
@@ -1,6 +1,5 @@
 package jenkins.util;
 
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
 import groovy.lang.GroovyClassLoader;
@@ -9,7 +8,6 @@
 import org.junit.Test;
 import org.jvnet.hudson.test.Issue;
 
-import java.net.URLClassLoader;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1664,7 +1664,7 @@ public static String toEmailSafeString(String projectName) {
         for( int i=0; i<projectName.length(); i++ ) {
             char ch = projectName.charAt(i);
             if(('a'<=ch && ch<='z')
-            || ('z'<=ch && ch<='Z')
+            || ('A'<=ch && ch<='Z')
             || ('0'<=ch && ch<='9')
             || "-_.".indexOf(ch)>=0)
                 buf.append(ch);

File: core/src/main/java/hudson/ExtensionComponent.java
Patch:
@@ -88,8 +88,8 @@ public boolean isDescriptorOf(Class<? extends Describable> c) {
     public int compareTo(ExtensionComponent<T> that) {
         double a = this.ordinal();
         double b = that.ordinal();
-        if (a>b)    return -1;
-        if (a<b)    return 1;
+        if (Double.compare(a, b) > 0) return -1;
+        if (Double.compare(a, b) < 0) return 1;
 
         // make the order bit more deterministic among extensions of the same ordinal
         if (this.instance instanceof Descriptor && that.instance instanceof Descriptor) {

File: core/src/main/java/hudson/model/FileParameterValue.java
Patch:
@@ -67,6 +67,7 @@
 public class FileParameterValue extends ParameterValue {
     private static final String FOLDER_NAME = "fileParameters";
     private static final Pattern PROHIBITED_DOUBLE_DOT = Pattern.compile(".*[\\\\/]\\.\\.[\\\\/].*");
+    private static final long serialVersionUID = -143427023159076073L;
 
     /**
      * Escape hatch for SECURITY-1074, fileParameter used to escape their expected folder.

File: core/src/main/java/hudson/model/HealthReport.java
Patch:
@@ -63,6 +63,8 @@ public class HealthReport implements Serializable, Comparable<HealthReport> {
     private static final String HEALTH_UNKNOWN_IMG = "empty.png";
 
     private static final Map<String, String> iconIMGToClassMap = new HashMap<>();
+    private static final long serialVersionUID = 7451361788415642230L;
+
     static {
         iconIMGToClassMap.put(HEALTH_OVER_80_IMG, HEALTH_OVER_80);
         iconIMGToClassMap.put(HEALTH_61_TO_80_IMG, HEALTH_61_TO_80);

File: core/src/main/java/hudson/model/JDK.java
Patch:
@@ -64,6 +64,7 @@ public final class JDK extends ToolInstallation implements NodeSpecific<JDK>, En
      * @since 1.577
      */
     public static final String DEFAULT_NAME = "(System)";
+    private static final long serialVersionUID = -3318291200160313357L;
 
     @Restricted(NoExternalUse.class)
     public static boolean isDefaultName(String name) {

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1664,7 +1664,7 @@ public static String toEmailSafeString(String projectName) {
         for( int i=0; i<projectName.length(); i++ ) {
             char ch = projectName.charAt(i);
             if(('a'<=ch && ch<='z')
-            || ('z'<=ch && ch<='Z')
+            || ('A'<=ch && ch<='Z')
             || ('0'<=ch && ch<='9')
             || "-_.".indexOf(ch)>=0)
                 buf.append(ch);

File: core/src/test/java/hudson/UtilTest.java
Patch:
@@ -158,6 +158,7 @@ public void testRawEncode() {
             " \"#%/:;<>?", "%20%22%23%25%2F%3A%3B%3C%3E%3F",
             "[\\]^`{|}~", "%5B%5C%5D%5E%60%7B%7C%7D%7E",
             "d\u00E9velopp\u00E9s", "d%C3%A9velopp%C3%A9s",
+            "Foo \uD800\uDF98 Foo", "Foo%20%F0%90%8E%98%20Foo"
         };
         for (int i = 0; i < data.length; i += 2) {
             assertEquals("test " + i, data[i + 1], Util.rawEncode(data[i]));

File: test/src/test/java/hudson/ExtensionFinderTest.java
Patch:
@@ -92,7 +92,9 @@ public static class Foo {}
     @Extension
     public static class ModuleImpl extends AbstractModule {
         protected void configure() {
-            if (TestEnvironment.get().testCase instanceof ExtensionFinderTest) {
+            TestEnvironment environment = TestEnvironment.get();
+            // JMH benchmarks do not initialize TestEnvironment, so check for null
+            if (environment != null && environment.testCase instanceof ExtensionFinderTest) {
                 bind(String.class).annotatedWith(LionKing.class).toInstance("lion king");
             }
         }

File: test/src/test/java/hudson/util/BootFailureTest.java
Patch:
@@ -48,6 +48,7 @@ public void before() throws Throwable {
 
         @Override
         public Hudson newHudson() throws Exception {
+            localPort = 0;
             ServletContext ws = createWebServer();
             wa = new WebAppMain() {
                 @Override

File: test/src/test/java/hudson/model/FingerprintTest.java
Patch:
@@ -29,6 +29,7 @@
 import hudson.security.AuthorizationMatrixProperty;
 import hudson.security.Permission;
 import hudson.security.ProjectMatrixAuthorizationStrategy;
+import hudson.security.SidACL;
 import hudson.tasks.ArtifactArchiver;
 import hudson.tasks.Fingerprinter;
 
@@ -365,7 +366,7 @@ private static class NoInheritanceProjectMatrixAuthorizationStrategy extends Pro
         public ACL getACL(Job<?, ?> project) {
             AuthorizationMatrixProperty amp = project.getProperty(AuthorizationMatrixProperty.class);
             if (amp != null) {
-                return amp.getACL().newInheritingACL(getRootACL());
+                return amp.getACL().newInheritingACL((SidACL)getRootACL());
             } else {
                 return getRootACL();
             }

File: test/src/test/java/hudson/model/SlaveTest.java
Patch:
@@ -27,6 +27,7 @@
 import groovy.util.XmlSlurper;
 import hudson.DescriptorExtensionList;
 import hudson.ExtensionList;
+import hudson.security.ProjectMatrixAuthorizationStrategy;
 import hudson.security.csrf.CrumbIssuer;
 import hudson.slaves.ComputerLauncher;
 import hudson.slaves.DumbSlave;
@@ -214,6 +215,7 @@ public void retentionFiltering() throws Exception {
     @Test
     @Issue("JENKINS-36280")
     public void propertyFiltering() throws Exception {
+        j.jenkins.setAuthorizationStrategy(new ProjectMatrixAuthorizationStrategy()); // otherwise node descriptor is not available
         DumbSlave.DescriptorImpl descriptor =
                 j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);
         DescriptorExtensionList<NodeProperty<?>, NodePropertyDescriptor> descriptors = NodeProperty.all();

File: core/src/test/java/hudson/model/TaskActionTest.java
Patch:
@@ -60,7 +60,8 @@ public void annotatedText() throws Exception {
         }
         ByteArrayOutputStream os = new ByteArrayOutputStream();
         final long length = annotatedText.writeLogTo(0, os);
-        assertEquals(220, length);
+        // Windows based systems will be 220, linux base 219
+        assertTrue("length should be longer or even 219", length >= 219);
         assertTrue(os.toString("UTF-8").startsWith("a linkCompleted"));
     }
 }

File: core/src/main/java/hudson/ExtensionComponent.java
Patch:
@@ -88,8 +88,8 @@ public boolean isDescriptorOf(Class<? extends Describable> c) {
     public int compareTo(ExtensionComponent<T> that) {
         double a = this.ordinal();
         double b = that.ordinal();
-        if (a>b)    return -1;
-        if (a<b)    return 1;
+        if (Double.compare(a, b) > 0) return -1;
+        if (Double.compare(a, b) < 0) return 1;
 
         // make the order bit more deterministic among extensions of the same ordinal
         if (this.instance instanceof Descriptor && that.instance instanceof Descriptor) {

File: core/src/main/java/hudson/cli/SetBuildDescriptionCommand.java
Patch:
@@ -12,6 +12,8 @@
 @Extension
 public class SetBuildDescriptionCommand extends CLICommand implements Serializable {
 
+    private static final long serialVersionUID = 2690066739899830515L;
+
     @Override
     public String getShortDescription() {
         return Messages.SetBuildDescriptionCommand_ShortDescription();

File: core/src/main/java/hudson/model/FileParameterValue.java
Patch:
@@ -67,6 +67,7 @@
 public class FileParameterValue extends ParameterValue {
     private static final String FOLDER_NAME = "fileParameters";
     private static final Pattern PROHIBITED_DOUBLE_DOT = Pattern.compile(".*[\\\\/]\\.\\.[\\\\/].*");
+    private static final long serialVersionUID = -143427023159076073L;
 
     /**
      * Escape hatch for SECURITY-1074, fileParameter used to escape their expected folder.

File: core/src/main/java/hudson/model/HealthReport.java
Patch:
@@ -63,6 +63,8 @@ public class HealthReport implements Serializable, Comparable<HealthReport> {
     private static final String HEALTH_UNKNOWN_IMG = "empty.png";
 
     private static final Map<String, String> iconIMGToClassMap = new HashMap<>();
+    private static final long serialVersionUID = 7451361788415642230L;
+
     static {
         iconIMGToClassMap.put(HEALTH_OVER_80_IMG, HEALTH_OVER_80);
         iconIMGToClassMap.put(HEALTH_61_TO_80_IMG, HEALTH_61_TO_80);

File: core/src/main/java/hudson/model/JDK.java
Patch:
@@ -64,6 +64,7 @@ public final class JDK extends ToolInstallation implements NodeSpecific<JDK>, En
      * @since 1.577
      */
     public static final String DEFAULT_NAME = "(System)";
+    private static final long serialVersionUID = -3318291200160313357L;
 
     @Restricted(NoExternalUse.class)
     public static boolean isDefaultName(String name) {

File: core/src/test/java/hudson/model/TaskActionTest.java
Patch:
@@ -1,5 +1,6 @@
 package hudson.model;
 
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
 import java.io.ByteArrayOutputStream;
@@ -58,7 +59,8 @@ public void annotatedText() throws Exception {
             Thread.sleep(10);
         }
         ByteArrayOutputStream os = new ByteArrayOutputStream();
-        annotatedText.writeLogTo(0, os);
+        final long length = annotatedText.writeLogTo(0, os);
+        assertEquals(220, length);
         assertTrue(os.toString("UTF-8").startsWith("a linkCompleted"));
     }
 }

File: test/src/test/java/hudson/cli/InstallPluginCommandTest.java
Patch:
@@ -41,7 +41,7 @@ public void fromStdin() throws Exception {
         assertNull(r.jenkins.getPluginManager().getPlugin("token-macro"));
         assertThat(new CLICommandInvoker(r, "install-plugin").
                 withStdin(InstallPluginCommandTest.class.getResourceAsStream("/plugins/token-macro.hpi")).
-                invokeWithArgs("-name", "token-macro", "-deploy", "="),
+                invokeWithArgs("-deploy", "="),
             CLICommandInvoker.Matcher.succeeded());
         assertNotNull(r.jenkins.getPluginManager().getPlugin("token-macro"));
     }

File: core/src/main/java/hudson/node_monitors/AbstractNodeMonitorDescriptor.java
Patch:
@@ -54,7 +54,7 @@
  * @author Kohsuke Kawaguchi
  */
 public abstract class AbstractNodeMonitorDescriptor<T> extends Descriptor<NodeMonitor> {
-    private static int PERIOD_MINUTES = SystemProperties.getInteger(AbstractNodeMonitorDescriptor.class.getName() + ".periodMinutes", 5);
+    private static int PERIOD_MINUTES = SystemProperties.getInteger(AbstractNodeMonitorDescriptor.class.getName() + ".periodMinutes", 60);
 
     /**
      * @deprecated as of 1.522

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -143,6 +143,7 @@ public class UpdateSite {
      */
     private static final String signatureValidatorPrefix = "update site";
 
+    private static final Set<String> warnedMissing = Collections.synchronizedSet(new HashSet<>());
 
     public UpdateSite(String id, String url) {
         this.id = id;
@@ -1093,7 +1094,7 @@ public List<Plugin> getNeededDependencies() {
                 VersionNumber requiredVersion = e.getValue() != null ? new VersionNumber(e.getValue()) : null;
                 Plugin depPlugin = Jenkins.getInstance().getUpdateCenter().getPlugin(e.getKey(), requiredVersion);
                 if (depPlugin == null) {
-                    LOGGER.log(Level.WARNING, "Could not find dependency {0} of {1}", new Object[] {e.getKey(), name});
+                    LOGGER.log(warnedMissing.add(e.getKey()) ? Level.WARNING : Level.FINE, "Could not find dependency {0} of {1}", new Object[] {e.getKey(), name});
                     continue;
                 }
 

File: test/src/test/java/hudson/model/AbstractProjectTest.java
Patch:
@@ -476,9 +476,6 @@ public void addTriggerDifferentType() throws Exception {
     public void configDotXmlSubmissionToDifferentType() throws Exception {
         TestPluginManager tpm = (TestPluginManager) j.jenkins.pluginManager;
         tpm.installDetachedPlugin("javadoc");
-        tpm.installDetachedPlugin("junit");
-        tpm.installDetachedPlugin("display-url-api");
-        tpm.installDetachedPlugin("mailer");
         tpm.installDetachedPlugin("maven-plugin");
 
         j.jenkins.setCrumbIssuer(null);

File: test/src/test/java/hudson/model/UsageStatisticsTest.java
Patch:
@@ -24,7 +24,6 @@
 package hudson.model;
 
 import com.google.common.io.Resources;
-import hudson.ClassicPluginStrategy;
 import hudson.Util;
 import hudson.model.UsageStatistics.CombinedCipherInputStream;
 import hudson.node_monitors.ArchitectureMonitor;
@@ -118,7 +117,7 @@ public void roundtrip() throws Exception {
             assertThat("No duplicates", reported.contains(name), is(false));
             reported.add(name);
         }
-        assertThat(reported, containsInAnyOrder("credentials"));
+        assertThat(reported, hasItem("credentials"));
 
         // Compare content to watch out for backwards compatibility
         compareWithFile("jobs.json", sortJobTypes((JSONObject) o.get("jobs")));

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -2236,7 +2236,7 @@ private PluginUpdateInfo(String pluginName, String message) {
     }
 
     /**
-     * {@link AdministrativeMonitor} that checks if there are any plugins with cycle dependencies.
+     * {@link AdministrativeMonitor} that checks if there are any plugins that is deprecated.
      */
     @Extension @Symbol("pluginDeprecation")
     public static final class PluginDeprecationMonitor extends AdministrativeMonitor {
@@ -2251,10 +2251,10 @@ public String getDisplayName() {
         private transient volatile List<PluginWrapper> deprecatedPlugins;
 
         public boolean isActivated() {
-            if(deprecatedPlugins == null){
+            if (deprecatedPlugins == null) {
                 deprecatedPlugins = new ArrayList<>();
                 for (PluginWrapper p : Jenkins.get().getPluginManager().getPlugins()) {
-                    if(p.isDeprecated()){
+                    if (p.isDeprecated()) {
                         deprecatedPlugins.add(p);
                         isActive = true;
                     }

File: core/src/main/java/jenkins/security/apitoken/LegacyApiTokenAdministrativeMonitor.java
Patch:
@@ -96,7 +96,7 @@ public List<User> getImpactedUserList() {
     
     // used by Jelly view
     @Restricted(NoExternalUse.class)
-    public @Nullable ApiTokenProperty.TokenInfoAndStats getLegacyStatsOf(@Nonnull User user, @Nullable ApiTokenStore.HashedToken legacyToken) {
+    public @Nullable ApiTokenProperty.TokenInfoAndStats getLegacyStatsOf(@Nonnull User user, ApiTokenStore.HashedToken legacyToken) {
         ApiTokenProperty apiTokenProperty = user.getProperty(ApiTokenProperty.class);
         if (legacyToken != null) {
             ApiTokenStats.SingleTokenStats legacyStats = apiTokenProperty.getTokenStats().findTokenStatsById(legacyToken.getUuid());
@@ -112,7 +112,7 @@ public List<User> getImpactedUserList() {
      */
     // used by Jelly view
     @Restricted(NoExternalUse.class)
-    public boolean hasFreshToken(@Nonnull User user, @Nullable ApiTokenProperty.TokenInfoAndStats legacyStats) {
+    public boolean hasFreshToken(@Nonnull User user, ApiTokenProperty.TokenInfoAndStats legacyStats) {
         if (legacyStats == null) {
             return false;
         }
@@ -136,7 +136,7 @@ public boolean hasFreshToken(@Nonnull User user, @Nullable ApiTokenProperty.Toke
      */
     // used by Jelly view
     @Restricted(NoExternalUse.class)
-    public boolean hasMoreRecentlyUsedToken(@Nonnull User user, @Nullable ApiTokenProperty.TokenInfoAndStats legacyStats) {
+    public boolean hasMoreRecentlyUsedToken(@Nonnull User user, ApiTokenProperty.TokenInfoAndStats legacyStats) {
         if (legacyStats == null) {
             return false;
         }

File: test/src/test/java/hudson/model/ParametersTest.java
Patch:
@@ -73,7 +73,7 @@ public void parameterTypes() throws Exception {
         System.out.println(o);
         HtmlCheckBoxInput booleanParameterInput = (HtmlCheckBoxInput) o;
         assertEquals(true, booleanParameterInput.isChecked());
-        assertEquals("boolean", ((HtmlElement) DomNodeUtil.selectSingleNode(element, "td[@class='setting-name']")).getTextContent());
+        assertEquals("boolean", ((HtmlElement) DomNodeUtil.selectSingleNode(element, "td[@class='setting-main']")).getTextContent());
 
         element = DomNodeUtil.selectSingleNode(form, ".//tr[td/div/input/@value='choice']");
         assertNotNull(element);

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -143,6 +143,7 @@ public class UpdateSite {
      */
     private static final String signatureValidatorPrefix = "update site";
 
+    private static final Set<String> warnedMissing = Collections.synchronizedSet(new HashSet<>());
 
     public UpdateSite(String id, String url) {
         this.id = id;
@@ -1093,7 +1094,7 @@ public List<Plugin> getNeededDependencies() {
                 VersionNumber requiredVersion = e.getValue() != null ? new VersionNumber(e.getValue()) : null;
                 Plugin depPlugin = Jenkins.getInstance().getUpdateCenter().getPlugin(e.getKey(), requiredVersion);
                 if (depPlugin == null) {
-                    LOGGER.log(Level.WARNING, "Could not find dependency {0} of {1}", new Object[] {e.getKey(), name});
+                    LOGGER.log(warnedMissing.add(e.getKey()) ? Level.WARNING : Level.FINE, "Could not find dependency {0} of {1}", new Object[] {e.getKey(), name});
                     continue;
                 }
 

File: test/src/test/java/hudson/model/AbstractProjectTest.java
Patch:
@@ -476,9 +476,6 @@ public void addTriggerDifferentType() throws Exception {
     public void configDotXmlSubmissionToDifferentType() throws Exception {
         TestPluginManager tpm = (TestPluginManager) j.jenkins.pluginManager;
         tpm.installDetachedPlugin("javadoc");
-        tpm.installDetachedPlugin("junit");
-        tpm.installDetachedPlugin("display-url-api");
-        tpm.installDetachedPlugin("mailer");
         tpm.installDetachedPlugin("maven-plugin");
 
         j.jenkins.setCrumbIssuer(null);

File: test/src/test/java/hudson/model/UsageStatisticsTest.java
Patch:
@@ -24,7 +24,6 @@
 package hudson.model;
 
 import com.google.common.io.Resources;
-import hudson.ClassicPluginStrategy;
 import hudson.Util;
 import hudson.model.UsageStatistics.CombinedCipherInputStream;
 import hudson.node_monitors.ArchitectureMonitor;
@@ -118,7 +117,7 @@ public void roundtrip() throws Exception {
             assertThat("No duplicates", reported.contains(name), is(false));
             reported.add(name);
         }
-        assertThat(reported, containsInAnyOrder("credentials"));
+        assertThat(reported, hasItem("credentials"));
 
         // Compare content to watch out for backwards compatibility
         compareWithFile("jobs.json", sortJobTypes((JSONObject) o.get("jobs")));

File: test/src/test/java/hudson/util/RobustReflectionConverterTest.java
Patch:
@@ -72,7 +72,7 @@ public class RobustReflectionConverterTest {
     @Test public void randomExceptionsReported() throws Exception {
         FreeStyleProject p = r.jenkins.getItemByFullName("j", FreeStyleProject.class);
         assertNotNull(p);
-        assertEquals(Collections.emptyMap(), p.getTriggers());
+        assertTrue("There should be no triggers", p.getTriggers().isEmpty());
         OldDataMonitor odm = (OldDataMonitor) r.jenkins.getAdministrativeMonitor("OldData");
         Map<Saveable,OldDataMonitor.VersionRange> data = odm.getData();
         assertEquals(Collections.singleton(p), data.keySet());

File: test/src/test/java/hudson/util/RobustReflectionConverterTest.java
Patch:
@@ -72,7 +72,7 @@ public class RobustReflectionConverterTest {
     @Test public void randomExceptionsReported() throws Exception {
         FreeStyleProject p = r.jenkins.getItemByFullName("j", FreeStyleProject.class);
         assertNotNull(p);
-        assertEquals(Collections.emptyMap(), p.getTriggers());
+        assertTrue("There should be no triggers", p.getTriggers().isEmpty());
         OldDataMonitor odm = (OldDataMonitor) r.jenkins.getAdministrativeMonitor("OldData");
         Map<Saveable,OldDataMonitor.VersionRange> data = odm.getData();
         assertEquals(Collections.singleton(p), data.keySet());

File: core/src/main/java/hudson/os/SU.java
Patch:
@@ -155,7 +155,7 @@ VirtualChannel start(TaskListener listener, String rootPassword) throws IOExcept
             else // in production code this never happens, but during debugging this is convenient    
                 args.add("-cp").add(slaveJar).add(hudson.remoting.Launcher.class.getName());
 
-            if(rootPassword==null) {
+            if (Util.fixEmptyAndTrim(rootPassword) == null) {
                 // try sudo, in the hope that the user has the permission to do so without password
                 return new LocalLauncher(listener).launchChannel(
                         args.prepend(sudoExe()).toCommandArray(),

File: core/src/main/java/jenkins/security/ChannelConfigurator.java
Patch:
@@ -5,7 +5,6 @@
 import hudson.remoting.Channel;
 import hudson.remoting.ChannelBuilder;
 import hudson.slaves.SlaveComputer;
-import jenkins.model.Jenkins;
 
 import javax.annotation.Nullable;
 
@@ -39,6 +38,6 @@ public void onChannelBuilding(ChannelBuilder builder, @Nullable Object context)
      * All the registered {@link ChannelConfigurator}s.
      */
     public static ExtensionList<ChannelConfigurator> all() {
-        return Jenkins.getInstance().getExtensionList(ChannelConfigurator.class);
+        return ExtensionList.lookup(ChannelConfigurator.class);
     }
 }

File: core/src/main/java/hudson/os/SU.java
Patch:
@@ -155,7 +155,7 @@ VirtualChannel start(TaskListener listener, String rootPassword) throws IOExcept
             else // in production code this never happens, but during debugging this is convenient    
                 args.add("-cp").add(slaveJar).add(hudson.remoting.Launcher.class.getName());
 
-            if(rootPassword==null) {
+            if (Util.fixEmptyAndTrim(rootPassword) == null) {
                 // try sudo, in the hope that the user has the permission to do so without password
                 return new LocalLauncher(listener).launchChannel(
                         args.prepend(sudoExe()).toCommandArray(),

File: core/src/main/java/jenkins/security/ChannelConfigurator.java
Patch:
@@ -5,7 +5,6 @@
 import hudson.remoting.Channel;
 import hudson.remoting.ChannelBuilder;
 import hudson.slaves.SlaveComputer;
-import jenkins.model.Jenkins;
 
 import javax.annotation.Nullable;
 
@@ -39,6 +38,6 @@ public void onChannelBuilding(ChannelBuilder builder, @Nullable Object context)
      * All the registered {@link ChannelConfigurator}s.
      */
     public static ExtensionList<ChannelConfigurator> all() {
-        return Jenkins.getInstance().getExtensionList(ChannelConfigurator.class);
+        return ExtensionList.lookup(ChannelConfigurator.class);
     }
 }

File: core/src/main/java/jenkins/security/ApiTokenProperty.java
Patch:
@@ -474,7 +474,7 @@ public HttpResponse doGenerateNewToken(@AncestorInPath User u, @QueryParameter S
             
             final String tokenName;
             if (StringUtils.isBlank(newTokenName)) {
-                tokenName = String.format("Token created on %s", DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(ZonedDateTime.now()));
+                tokenName = Messages.Token_Created_on(DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(ZonedDateTime.now()));
             }else{
                 tokenName = newTokenName;
             }

File: test/src/test/java/hudson/model/UserRestartSEC897Test.java
Patch:
@@ -21,7 +21,9 @@ public class UserRestartSEC897Test {
     @Rule
     public RestartableJenkinsRule rr = new RestartableJenkinsRule();
 
-    @Test public void legacyConfigMoveCannotEscapeUserFolder() {
+    @Test
+    @Issue("SECURITY-897")
+    public void legacyConfigMoveCannotEscapeUserFolder() {
         rr.addStep(new Statement() {
             @Override
             public void evaluate() throws Throwable {

File: core/src/main/java/jenkins/security/ApiTokenProperty.java
Patch:
@@ -474,7 +474,7 @@ public HttpResponse doGenerateNewToken(@AncestorInPath User u, @QueryParameter S
             
             final String tokenName;
             if (StringUtils.isBlank(newTokenName)) {
-                tokenName = String.format("Token created on %s", DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(ZonedDateTime.now()));
+                tokenName = Messages.Token_Created_on(DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(ZonedDateTime.now()));
             }else{
                 tokenName = newTokenName;
             }

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -973,7 +973,7 @@ public RangeSet getRangeSet(Job job) {
         return r;
     }
 
-    public @Nonnull Hashtable<String,RangeSet> getUsages() {
+    public @CheckForNull Hashtable<String,RangeSet> getUsages() {
         return usages;
     }
 
@@ -1420,7 +1420,7 @@ private static String messageOfParseException(Throwable t) {
     }
 
     @Override public String toString() {
-        return "Fingerprint[original=" + original + ",hash=" + getHashString() + ",fileName=" + fileName + ",timestamp=" + DATE_CONVERTER.toString(timestamp) + ",usages=" + new TreeMap<String,RangeSet>(usages) + ",facets=" + facets + "]";
+        return "Fingerprint[original=" + original + ",hash=" + getHashString() + ",fileName=" + fileName + ",timestamp=" + DATE_CONVERTER.toString(timestamp) + ",usages=" + ((usages == null) ? "null" : new TreeMap<String,RangeSet>(getUsages())) + ",facets=" + facets + "]";
     }
     
     /**

File: core/src/main/java/hudson/model/DownloadService.java
Patch:
@@ -92,7 +92,7 @@ public String generateFragment() {
         if(Jenkins.getInstance().hasPermission(Jenkins.READ)) {
             long now = System.currentTimeMillis();
             for (Downloadable d : Downloadable.all()) {
-                if(d.getDue()<now && TimeUnit.SECONDS.toMillis(d.lastAttempt+10)<now) {
+                if(d.getDue()<now && d.lastAttempt+TimeUnit.SECONDS.toMillis(10)<now) {
                     buf.append("<script>")
                        .append("Behaviour.addLoadEvent(function() {")
                        .append("  downloadService.download(")

File: core/src/main/java/jenkins/util/TreeString.java
Patch:
@@ -26,7 +26,6 @@
 import java.io.Serializable;
 import java.util.Map;
 
-import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
 
 import com.thoughtworks.xstream.XStream;
@@ -125,7 +124,9 @@ public boolean equals(final Object rhs) {
     public int hashCode() {
         int h = parent == null ? 0 : parent.hashCode();
 
-        h = 31 * h + ArrayUtils.hashCode(label);
+        for (char c : label) {
+            h = 31 * h + c;
+        }
 
         assert toString().hashCode() == h;
         return h;

File: core/src/main/java/hudson/model/StringParameterValue.java
Patch:
@@ -70,7 +70,7 @@ public String resolve(String name) {
     }
 
     @Override
-    public Object getValue() {
+    public String getValue() {
         return value;
     }
      

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -973,7 +973,7 @@ public RangeSet getRangeSet(Job job) {
         return r;
     }
 
-    public @Nonnull Hashtable<String,RangeSet> getUsages() {
+    public @CheckForNull Hashtable<String,RangeSet> getUsages() {
         return usages;
     }
 
@@ -1420,7 +1420,7 @@ private static String messageOfParseException(Throwable t) {
     }
 
     @Override public String toString() {
-        return "Fingerprint[original=" + original + ",hash=" + getHashString() + ",fileName=" + fileName + ",timestamp=" + DATE_CONVERTER.toString(timestamp) + ",usages=" + new TreeMap<String,RangeSet>(usages) + ",facets=" + facets + "]";
+        return "Fingerprint[original=" + original + ",hash=" + getHashString() + ",fileName=" + fileName + ",timestamp=" + DATE_CONVERTER.toString(timestamp) + ",usages=" + ((usages == null) ? "null" : new TreeMap<String,RangeSet>(getUsages())) + ",facets=" + facets + "]";
     }
     
     /**

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -316,7 +316,7 @@ public <T> List<ExtensionComponent<T>> findComponents(Class<T> type, Hudson huds
         List<ExtensionFinder> finders;
         if (type==ExtensionFinder.class) {
             // Avoid infinite recursion of using ExtensionFinders to find ExtensionFinders
-            finders = Collections.<ExtensionFinder>singletonList(new ExtensionFinder.Sezpoz());
+            finders = Collections.singletonList(new ExtensionFinder.Sezpoz());
         } else {
             finders = hudson.getExtensionList(ExtensionFinder.class);
         }

File: core/src/main/java/hudson/FileSystemProvisioner.java
Patch:
@@ -189,7 +189,7 @@ public FileSystemProvisionerDescriptor getDescriptor() {
      * Returns all the registered {@link FileSystemProvisioner} descriptors.
      */
     public static DescriptorExtensionList<FileSystemProvisioner,FileSystemProvisionerDescriptor> all() {
-        return Jenkins.getInstance().<FileSystemProvisioner,FileSystemProvisionerDescriptor>getDescriptorList(FileSystemProvisioner.class);
+        return Jenkins.getInstance().getDescriptorList(FileSystemProvisioner.class);
     }
 
     /**

File: core/src/main/java/hudson/markup/MarkupFormatterDescriptor.java
Patch:
@@ -38,7 +38,7 @@ public abstract class MarkupFormatterDescriptor extends Descriptor<MarkupFormatt
      * Returns all the registered {@link MarkupFormatterDescriptor}s.
      */
     public static DescriptorExtensionList<MarkupFormatter,MarkupFormatterDescriptor> all() {
-        return Jenkins.getInstance().<MarkupFormatter,MarkupFormatterDescriptor>
-                                    getDescriptorList(MarkupFormatter.class);
+        return Jenkins.getInstance().
+                getDescriptorList(MarkupFormatter.class);
     }
 }

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -899,7 +899,7 @@ public EnvironmentList getEnvironments() {
             return new EnvironmentList(buildEnvironments); 
         }
         
-        return new EnvironmentList(buildEnvironments==null ? Collections.<Environment>emptyList() : ImmutableList.copyOf(buildEnvironments));
+        return new EnvironmentList(buildEnvironments==null ? Collections.emptyList() : ImmutableList.copyOf(buildEnvironments));
     }
 
     public Calendar due() {

File: core/src/main/java/hudson/model/Items.java
Patch:
@@ -153,7 +153,7 @@ public static boolean currentlyUpdatingByXml() {
      * Returns all the registered {@link TopLevelItemDescriptor}s.
      */
     public static DescriptorExtensionList<TopLevelItem,TopLevelItemDescriptor> all() {
-        return Jenkins.getInstance().<TopLevelItem,TopLevelItemDescriptor>getDescriptorList(TopLevelItem.class);
+        return Jenkins.getInstance().getDescriptorList(TopLevelItem.class);
     }
 
     /**

File: core/src/main/java/hudson/model/JDK.java
Patch:
@@ -81,7 +81,7 @@ public static boolean isDefaultName(String name) {
     private transient String javaHome;
 
     public JDK(String name, String javaHome) {
-        super(name, javaHome, Collections.<ToolProperty<?>>emptyList());
+        super(name, javaHome, Collections.emptyList());
     }
 
     @DataBoundConstructor

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -725,7 +725,7 @@ public void onLocationChanged(Item item, String oldFullName, String newFullName)
     @Exported(name="allBuilds",visibility=-2)
     @WithBridgeMethods(List.class)
     public RunList<RunT> getBuilds() {
-        return RunList.<RunT>fromRuns(_getRuns().values());
+        return RunList.fromRuns(_getRuns().values());
     }
 
     /**
@@ -757,7 +757,7 @@ public synchronized List<RunT> getBuilds(RangeSet rs) {
      * Gets all the builds in a map.
      */
     public SortedMap<Integer, RunT> getBuildsAsMap() {
-        return Collections.<Integer, RunT>unmodifiableSortedMap(_getRuns());
+        return Collections.unmodifiableSortedMap(_getRuns());
     }
 
     /**

File: core/src/main/java/hudson/model/ListView.java
Patch:
@@ -130,7 +130,7 @@ private Object readResolve() {
                 includePattern = Pattern.compile(includeRegex);
             } catch (PatternSyntaxException x) {
                 includeRegex = null;
-                OldDataMonitor.report(this, Collections.<Throwable>singleton(x));
+                OldDataMonitor.report(this, Collections.singleton(x));
             }
         }
         synchronized(this) {

File: core/src/main/java/hudson/model/PageDecorator.java
Patch:
@@ -114,6 +114,6 @@ public final String getUrl() {
      * Returns all the registered {@link PageDecorator} descriptors.
      */
     public static ExtensionList<PageDecorator> all() {
-        return Jenkins.getInstance().<PageDecorator,PageDecorator>getDescriptorList(PageDecorator.class);
+        return Jenkins.getInstance().getDescriptorList(PageDecorator.class);
     }
 }

File: core/src/main/java/hudson/model/ParameterDefinition.java
Patch:
@@ -223,7 +223,7 @@ public ParameterValue getDefaultParameterValue() {
      * Returns all the registered {@link ParameterDefinition} descriptors.
      */
     public static DescriptorExtensionList<ParameterDefinition,ParameterDescriptor> all() {
-        return Jenkins.getInstance().<ParameterDefinition,ParameterDescriptor>getDescriptorList(ParameterDefinition.class);
+        return Jenkins.getInstance().getDescriptorList(ParameterDefinition.class);
     }
 
     /**

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -180,7 +180,7 @@ public Iterator<ParameterValue> iterator() {
 
     @Exported(visibility=2)
     public List<ParameterValue> getParameters() {
-        return Collections.<ParameterValue>unmodifiableList(filter(parameters));
+        return Collections.unmodifiableList(filter(parameters));
     }
 
     public ParameterValue getParameter(String name) {
@@ -242,7 +242,7 @@ public ParametersAction createUpdated(Collection<? extends ParameterValue> overr
             parametersAction.safeParameters = this.safeParameters;
             return parametersAction;
         }
-        List<ParameterValue> combinedParameters = Lists.<ParameterValue>newArrayList(overrides);
+        List<ParameterValue> combinedParameters = Lists.newArrayList(overrides);
         Set<String> names = newHashSet();
 
         for(ParameterValue v : overrides) {

File: core/src/main/java/hudson/model/ParametersDefinitionProperty.java
Patch:
@@ -108,7 +108,7 @@ public List<String> getParameterDefinitionNames() {
     @Nonnull
     @Override
     public Collection<Action> getJobActions(Job<?, ?> job) {
-        return Collections.<Action>singleton(this);
+        return Collections.singleton(this);
     }
 
     @Deprecated

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -1423,7 +1423,7 @@ public Collection<Fingerprint> getBuildFingerprints() {
         if (fingerprintAction != null) {
             return fingerprintAction.getFingerprints().values();
         }
-        return Collections.<Fingerprint>emptyList();
+        return Collections.emptyList();
     }
     
     /**

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -604,7 +604,7 @@ public FormValidation doCheckRemoteFS(@QueryParameter String value) throws IOExc
         @Restricted(NoExternalUse.class) // intended for use by Jelly EL only (plus hack in DelegatingComputerLauncher)
         public final List<Descriptor<ComputerLauncher>> computerLauncherDescriptors(@CheckForNull Slave it) {
             DescriptorExtensionList<ComputerLauncher, Descriptor<ComputerLauncher>> all =
-                    Jenkins.getInstance().<ComputerLauncher, Descriptor<ComputerLauncher>>getDescriptorList(
+                    Jenkins.getInstance().getDescriptorList(
                             ComputerLauncher.class);
             return it == null ? DescriptorVisibilityFilter.applyType(clazz, all)
                     : DescriptorVisibilityFilter.apply(it, all);

File: core/src/main/java/hudson/model/UserProperty.java
Patch:
@@ -71,7 +71,7 @@ public UserPropertyDescriptor getDescriptor() {
      * Returns all the registered {@link UserPropertyDescriptor}s.
      */
     public static DescriptorExtensionList<UserProperty,UserPropertyDescriptor> all() {
-        return Jenkins.getInstance().<UserProperty,UserPropertyDescriptor>getDescriptorList(UserProperty.class);
+        return Jenkins.getInstance().getDescriptorList(UserProperty.class);
     }
 
     public UserProperty reconfigure(StaplerRequest req, JSONObject form) throws FormException {

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -1246,7 +1246,7 @@ public ModelObjectWithContextMenu.ContextMenu doChildrenContextMenu(StaplerReque
      * Returns all the registered {@link ViewDescriptor}s.
      */
     public static DescriptorExtensionList<View,ViewDescriptor> all() {
-        return Jenkins.getInstance().<View,ViewDescriptor>getDescriptorList(View.class);
+        return Jenkins.getInstance().getDescriptorList(View.class);
     }
 
     /**

File: core/src/main/java/hudson/model/ViewProperty.java
Patch:
@@ -63,7 +63,7 @@ public ViewPropertyDescriptor getDescriptor() {
     }
 
     public static DescriptorExtensionList<ViewProperty,ViewPropertyDescriptor> all() {
-        return Jenkins.getInstance().<ViewProperty,ViewPropertyDescriptor>getDescriptorList(ViewProperty.class);
+        return Jenkins.getInstance().getDescriptorList(ViewProperty.class);
     }
 
     public ViewProperty reconfigure(StaplerRequest req, JSONObject form) throws Descriptor.FormException {

File: core/src/main/java/hudson/model/labels/LabelAtomProperty.java
Patch:
@@ -61,6 +61,6 @@ public Collection<? extends Action> getActions(LabelAtom atom) {
      * Lists up all the registered {@link LabelAtomPropertyDescriptor}s in the system.
      */
     public static DescriptorExtensionList<LabelAtomProperty,LabelAtomPropertyDescriptor> all() {
-        return Jenkins.getInstance().<LabelAtomProperty,LabelAtomPropertyDescriptor>getDescriptorList(LabelAtomProperty.class);
+        return Jenkins.getInstance().getDescriptorList(LabelAtomProperty.class);
     }
 }

File: core/src/main/java/hudson/model/queue/BackFiller.java
Patch:
@@ -104,7 +104,7 @@ private TentativePlan makeTentativePlan(BuildableItem bi) {
 
             // also ignore all load predictions as we just want to figure out some executable assignment
             // and we are not trying to figure out if this task is executable right now.
-            MappingWorksheet worksheet = new MappingWorksheet(bi, slots, Collections.<LoadPredictor>emptyList());
+            MappingWorksheet worksheet = new MappingWorksheet(bi, slots, Collections.emptyList());
             Mapping m = Jenkins.getInstance().getQueue().getLoadBalancer().map(bi.task, worksheet);
             if (m==null)    return null;
 

File: core/src/main/java/hudson/node_monitors/NodeMonitor.java
Patch:
@@ -146,6 +146,6 @@ public void setIgnored(boolean ignored) {
      * Returns all the registered {@link NodeMonitor} descriptors.
      */
     public static DescriptorExtensionList<NodeMonitor,Descriptor<NodeMonitor>> all() {
-        return Jenkins.getInstance().<NodeMonitor,Descriptor<NodeMonitor>>getDescriptorList(NodeMonitor.class);
+        return Jenkins.getInstance().getDescriptorList(NodeMonitor.class);
     }
 }

File: core/src/main/java/hudson/os/SU.java
Patch:
@@ -159,7 +159,7 @@ VirtualChannel start(TaskListener listener, String rootPassword) throws IOExcept
                 // try sudo, in the hope that the user has the permission to do so without password
                 return new LocalLauncher(listener).launchChannel(
                         args.prepend(sudoExe()).toCommandArray(),
-                        listener.getLogger(), null, Collections.<String, String>emptyMap());
+                        listener.getLogger(), null, Collections.emptyMap());
             } else {
                 // try sudo with the given password. Also run in pfexec so that we can elevate the privileges
                 Process proc = sudoWithPass(args);

File: core/src/main/java/hudson/search/CollectionSearchIndex.java
Patch:
@@ -49,7 +49,7 @@ public abstract class CollectionSearchIndex<SMT extends SearchableModelObject> i
     @Nonnull
     protected Iterable<SMT> allAsIterable() {
         Collection<SMT> all = all();
-        return all == null ? Collections.<SMT>emptySet() : all;
+        return all == null ? Collections.emptySet() : all;
     }
 
     public void find(String token, List<SearchItem> result) {

File: core/src/main/java/hudson/security/AuthorizationStrategy.java
Patch:
@@ -184,7 +184,7 @@ public abstract class AuthorizationStrategy extends AbstractDescribableImpl<Auth
      * Returns all the registered {@link AuthorizationStrategy} descriptors.
      */
     public static @Nonnull DescriptorExtensionList<AuthorizationStrategy,Descriptor<AuthorizationStrategy>> all() {
-        return Jenkins.getInstance().<AuthorizationStrategy,Descriptor<AuthorizationStrategy>>getDescriptorList(AuthorizationStrategy.class);
+        return Jenkins.getInstance().getDescriptorList(AuthorizationStrategy.class);
     }
 
     /**

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -647,7 +647,7 @@ and both needs to use the same key (this is a reflection of a poor design in Acg
      * Returns all the registered {@link SecurityRealm} descriptors.
      */
     public static DescriptorExtensionList<SecurityRealm,Descriptor<SecurityRealm>> all() {
-        return Jenkins.getInstance().<SecurityRealm,Descriptor<SecurityRealm>>getDescriptorList(SecurityRealm.class);
+        return Jenkins.getInstance().getDescriptorList(SecurityRealm.class);
     }
 
 

File: core/src/main/java/hudson/security/captcha/CaptchaSupport.java
Patch:
@@ -52,7 +52,7 @@ public abstract class CaptchaSupport extends AbstractDescribableImpl<CaptchaSupp
      * Returns all the registered {@link CaptchaSupport} descriptors.
      */
     public static DescriptorExtensionList<CaptchaSupport, Descriptor<CaptchaSupport>> all() {
-        return Jenkins.getInstance().<CaptchaSupport, Descriptor<CaptchaSupport>>getDescriptorList(CaptchaSupport.class);
+        return Jenkins.getInstance().getDescriptorList(CaptchaSupport.class);
     }
     
     abstract public  boolean validateCaptcha(String id, String text); 

File: core/src/main/java/hudson/security/csrf/CrumbIssuer.java
Patch:
@@ -156,7 +156,7 @@ public CrumbIssuerDescriptor<CrumbIssuer> getDescriptor() {
      * Returns all the registered {@link CrumbIssuer} descriptors.
      */
     public static DescriptorExtensionList<CrumbIssuer, Descriptor<CrumbIssuer>> all() {
-        return Jenkins.getInstance().<CrumbIssuer, Descriptor<CrumbIssuer>>getDescriptorList(CrumbIssuer.class);
+        return Jenkins.getInstance().getDescriptorList(CrumbIssuer.class);
     }
 
     public Api getApi() {

File: core/src/main/java/hudson/tasks/BuildWrapper.java
Patch:
@@ -311,6 +311,6 @@ public void makeSensitiveBuildVariables(AbstractBuild build, Set<String> sensiti
     // for compatibility we can't use BuildWrapperDescriptor
     public static DescriptorExtensionList<BuildWrapper,Descriptor<BuildWrapper>> all() {
         // use getDescriptorList and not getExtensionList to pick up legacy instances
-        return Jenkins.getInstance().<BuildWrapper,Descriptor<BuildWrapper>>getDescriptorList(BuildWrapper.class);
+        return Jenkins.getInstance().getDescriptorList(BuildWrapper.class);
     }
 }

File: core/src/main/java/hudson/tasks/Builder.java
Patch:
@@ -72,6 +72,6 @@ public Descriptor<Builder> getDescriptor() {
      */
     // for backward compatibility, the signature is not BuildStepDescriptor
     public static DescriptorExtensionList<Builder,Descriptor<Builder>> all() {
-        return Jenkins.getInstance().<Builder,Descriptor<Builder>>getDescriptorList(Builder.class);
+        return Jenkins.getInstance().getDescriptorList(Builder.class);
     }
 }

File: core/src/main/java/hudson/tasks/Publisher.java
Patch:
@@ -168,6 +168,6 @@ private int classify(Descriptor<Publisher> d) {
      */
     // for backward compatibility, the signature is not BuildStepDescriptor
     public static DescriptorExtensionList<Publisher,Descriptor<Publisher>> all() {
-        return Jenkins.getInstance().<Publisher,Descriptor<Publisher>>getDescriptorList(Publisher.class);
+        return Jenkins.getInstance().getDescriptorList(Publisher.class);
     }
 }

File: core/src/main/java/hudson/tools/ToolInstallation.java
Patch:
@@ -241,7 +241,7 @@ protected void callback(ToolInstallation obj, UnmarshallingContext context) {
      */
     public static DescriptorExtensionList<ToolInstallation,ToolDescriptor<?>> all() {
         // use getDescriptorList and not getExtensionList to pick up legacy instances
-        return Jenkins.getInstance().<ToolInstallation,ToolDescriptor<?>>getDescriptorList(ToolInstallation.class);
+        return Jenkins.getInstance().getDescriptorList(ToolInstallation.class);
     }
 
     private static final long serialVersionUID = 1L;

File: core/src/main/java/hudson/tools/ToolInstallerDescriptor.java
Patch:
@@ -48,7 +48,7 @@ public boolean isApplicable(Class<? extends ToolInstallation> toolType) {
     }
 
     public static DescriptorExtensionList<ToolInstaller,ToolInstallerDescriptor<?>> all() {
-        return Jenkins.getInstance().<ToolInstaller,ToolInstallerDescriptor<?>>getDescriptorList(ToolInstaller.class);
+        return Jenkins.getInstance().getDescriptorList(ToolInstaller.class);
     }
 
     /**

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -175,7 +175,7 @@ protected Trigger(@Nonnull String cronTabSpec) throws ANTLRException {
      */
     protected Trigger() {
         this.spec = "";
-        this.tabs = new CronTabList(Collections.<CronTab>emptyList());
+        this.tabs = new CronTabList(Collections.emptyList());
     }
 
     /**

File: core/src/main/java/hudson/util/CopyOnWriteList.java
Patch:
@@ -143,7 +143,7 @@ public <E> E[] toArray(E[] array) {
     }
 
     public List<E> getView() {
-        return Collections.<E>unmodifiableList(core);
+        return Collections.unmodifiableList(core);
     }
 
     public void addAllTo(Collection<? super E> dst) {

File: core/src/main/java/hudson/util/CopyOnWriteMap.java
Patch:
@@ -61,7 +61,7 @@ protected CopyOnWriteMap(Map<K,V> core) {
     }
 
     protected CopyOnWriteMap() {
-        update(Collections.<K,V>emptyMap());
+        update(Collections.emptyMap());
     }
 
     protected void update(Map<K,V> m) {
@@ -124,7 +124,7 @@ public synchronized void putAll(Map<? extends K, ? extends V> t) {
     protected abstract Map<K,V> copy();
 
     public synchronized void clear() {
-        update(Collections.<K,V>emptyMap());
+        update(Collections.emptyMap());
     }
 
     /**

File: core/src/main/java/hudson/util/DescriptorList.java
Patch:
@@ -146,7 +146,7 @@ private List<Descriptor<T>> store() {
         if(type==null)
             return legacy;
         else
-            return Jenkins.getInstance().<T,Descriptor<T>>getDescriptorList(type);
+            return Jenkins.getInstance().getDescriptorList(type);
     }
 
     /**

File: core/src/main/java/hudson/util/Iterators.java
Patch:
@@ -357,7 +357,7 @@ public Iterator<T> iterator() {
 
     @SafeVarargs
     public static <T> Iterator<T> sequence(Iterator<? extends T>... iterators) {
-        return com.google.common.collect.Iterators.<T>concat(iterators);
+        return com.google.common.collect.Iterators.concat(iterators);
     }
 
     /**

File: core/src/main/java/hudson/util/QueryParameterMap.java
Patch:
@@ -80,6 +80,6 @@ public String get(String name) {
 
     public List<String> getAll(String name) {
         List<String> v = store.get(name);
-        return v!=null? Collections.unmodifiableList(v) : Collections.<String>emptyList();
+        return v!=null? Collections.unmodifiableList(v) : Collections.emptyList();
     }
 }

File: core/src/main/java/hudson/util/RemotingDiagnostics.java
Patch:
@@ -69,7 +69,7 @@
 public final class RemotingDiagnostics {
     public static Map<Object,Object> getSystemProperties(VirtualChannel channel) throws IOException, InterruptedException {
         if(channel==null)
-            return Collections.<Object,Object>singletonMap("N/A","N/A");
+            return Collections.singletonMap("N/A","N/A");
         return channel.call(new GetSystemProperties());
     }
 

File: core/src/main/java/hudson/views/ListViewColumn.java
Patch:
@@ -87,7 +87,7 @@ public String getColumnCaption() {
      * Returns all the registered {@link ListViewColumn} descriptors.
      */
     public static DescriptorExtensionList<ListViewColumn, Descriptor<ListViewColumn>> all() {
-        return Jenkins.getInstance().<ListViewColumn, Descriptor<ListViewColumn>>getDescriptorList(ListViewColumn.class);
+        return Jenkins.getInstance().getDescriptorList(ListViewColumn.class);
     }
 
     /**

File: core/src/main/java/hudson/views/MyViewsTabBar.java
Patch:
@@ -64,7 +64,7 @@ public abstract class MyViewsTabBar extends AbstractDescribableImpl<MyViewsTabBa
      * Returns all the registered {@link ListViewColumn} descriptors.
      */
     public static DescriptorExtensionList<MyViewsTabBar, Descriptor<MyViewsTabBar>> all() {
-        return Jenkins.getInstance().<MyViewsTabBar, Descriptor<MyViewsTabBar>>getDescriptorList(MyViewsTabBar.class);
+        return Jenkins.getInstance().getDescriptorList(MyViewsTabBar.class);
     }
 
     public MyViewsTabBarDescriptor getDescriptor() {

File: core/src/main/java/hudson/views/ViewJobFilter.java
Patch:
@@ -44,7 +44,7 @@ public abstract class ViewJobFilter implements ExtensionPoint, Describable<ViewJ
      * Returns all the registered {@link ViewJobFilter} descriptors.
      */
     public static DescriptorExtensionList<ViewJobFilter, Descriptor<ViewJobFilter>> all() {
-        return Jenkins.getInstance().<ViewJobFilter, Descriptor<ViewJobFilter>>getDescriptorList(ViewJobFilter.class);
+        return Jenkins.getInstance().getDescriptorList(ViewJobFilter.class);
     }
 
     @SuppressWarnings("unchecked")

File: core/src/main/java/hudson/views/ViewsTabBar.java
Patch:
@@ -65,7 +65,7 @@ public abstract class ViewsTabBar extends AbstractDescribableImpl<ViewsTabBar> i
      * Returns all the registered {@link ViewsTabBar} descriptors.
      */
     public static DescriptorExtensionList<ViewsTabBar, Descriptor<ViewsTabBar>> all() {
-        return Jenkins.getInstance().<ViewsTabBar, Descriptor<ViewsTabBar>>getDescriptorList(ViewsTabBar.class);
+        return Jenkins.getInstance().getDescriptorList(ViewsTabBar.class);
     }
 
     @Override

File: core/src/main/java/jenkins/model/BuildDiscarderDescriptor.java
Patch:
@@ -20,6 +20,6 @@ protected BuildDiscarderDescriptor() {
      * Returns all the registered {@link BuildDiscarderDescriptor}s.
      */
     public static DescriptorExtensionList<BuildDiscarder,BuildDiscarderDescriptor> all() {
-        return Jenkins.getInstance().<BuildDiscarder,BuildDiscarderDescriptor>getDescriptorList(BuildDiscarder.class);
+        return Jenkins.getInstance().getDescriptorList(BuildDiscarder.class);
     }
 }

File: core/src/main/java/jenkins/model/InterruptedBuildAction.java
Patch:
@@ -43,7 +43,7 @@ public class InterruptedBuildAction extends InvisibleAction {
     private final List<CauseOfInterruption> causes;
 
     public InterruptedBuildAction(Collection<? extends CauseOfInterruption> causes) {
-        this.causes = ImmutableList.<CauseOfInterruption>copyOf(causes);
+        this.causes = ImmutableList.copyOf(causes);
     }
 
     @Exported

File: core/src/main/java/jenkins/model/ParameterizedJobMixIn.java
Patch:
@@ -113,7 +113,7 @@ public final boolean scheduleBuild(int quietPeriod) {
 
     /** @see BuildableItem#scheduleBuild(int, Cause) */
     public final boolean scheduleBuild(int quietPeriod, Cause c) {
-        return scheduleBuild2(quietPeriod, c != null ? Collections.<Action>singletonList(new CauseAction(c)) : Collections.<Action>emptyList()) != null;
+        return scheduleBuild2(quietPeriod, c != null ? Collections.singletonList(new CauseAction(c)) : Collections.emptyList()) != null;
     }
 
     /**

File: core/src/main/java/jenkins/model/ProjectNamingStrategy.java
Patch:
@@ -56,7 +56,7 @@ public ProjectNamingStrategyDescriptor getDescriptor() {
     }
 
     public static DescriptorExtensionList<ProjectNamingStrategy, ProjectNamingStrategyDescriptor> all() {
-        return Jenkins.getInstance().<ProjectNamingStrategy, ProjectNamingStrategyDescriptor> getDescriptorList(ProjectNamingStrategy.class);
+        return Jenkins.getInstance().getDescriptorList(ProjectNamingStrategy.class);
     }
 
     /**

File: core/src/main/java/jenkins/mvn/GlobalSettingsProviderDescriptor.java
Patch:
@@ -17,6 +17,6 @@ public abstract class GlobalSettingsProviderDescriptor extends Descriptor<Global
 
     @WithBridgeMethods(List.class)
     public static DescriptorExtensionList<GlobalSettingsProvider,GlobalSettingsProviderDescriptor> all() {
-        return Jenkins.getInstance().<GlobalSettingsProvider,GlobalSettingsProviderDescriptor>getDescriptorList(GlobalSettingsProvider.class);
+        return Jenkins.getInstance().getDescriptorList(GlobalSettingsProvider.class);
     }
 }

File: core/src/main/java/jenkins/mvn/SettingsProviderDescriptor.java
Patch:
@@ -17,6 +17,6 @@ public abstract class SettingsProviderDescriptor extends Descriptor<SettingsProv
 
     @WithBridgeMethods(List.class)
     public static DescriptorExtensionList<SettingsProvider,SettingsProviderDescriptor> all() {
-        return Jenkins.getInstance().<SettingsProvider,SettingsProviderDescriptor>getDescriptorList(SettingsProvider.class);
+        return Jenkins.getInstance().getDescriptorList(SettingsProvider.class);
     }
 }

File: core/src/main/java/jenkins/scm/SCMCheckoutStrategyDescriptor.java
Patch:
@@ -30,7 +30,7 @@ protected SCMCheckoutStrategyDescriptor() {
      * Returns all the registered {@link SCMCheckoutStrategy}s.
      */
     public static DescriptorExtensionList<SCMCheckoutStrategy,SCMCheckoutStrategyDescriptor> all() {
-        return Jenkins.getInstance().<SCMCheckoutStrategy,SCMCheckoutStrategyDescriptor>getDescriptorList(SCMCheckoutStrategy.class);
+        return Jenkins.getInstance().getDescriptorList(SCMCheckoutStrategy.class);
     }
     
     public static List<SCMCheckoutStrategyDescriptor> _for(AbstractProject p) {

File: core/src/main/java/jenkins/security/QueueItemAuthenticator.java
Patch:
@@ -62,7 +62,7 @@ public abstract class QueueItemAuthenticator extends AbstractDescribableImpl<Que
     public @CheckForNull Authentication authenticate(Queue.Task task) {
         if (Util.isOverridden(QueueItemAuthenticator.class, getClass(), "authenticate", Queue.Item.class)) {
             // Need a fake (unscheduled) item. All the other calls assume a BuildableItem but probably it does not matter.
-            return authenticate(new Queue.WaitingItem(Calendar.getInstance(), task, Collections.<Action>emptyList()));
+            return authenticate(new Queue.WaitingItem(Calendar.getInstance(), task, Collections.emptyList()));
         } else {
             throw new AbstractMethodError("you must override at least one of the QueueItemAuthenticator.authenticate methods");
         }

File: core/src/main/java/hudson/AbstractMarkupText.java
Patch:
@@ -141,7 +141,7 @@ public MarkupText.SubText findToken(Pattern pattern) {
     public List<MarkupText.SubText> findTokens(Pattern pattern) {
         String text = getText();
         Matcher m = pattern.matcher(text);
-        List<SubText> r = new ArrayList<SubText>();
+        List<SubText> r = new ArrayList<>();
 
         while(m.find()) {
             int idx = m.start();

File: core/src/main/java/hudson/BulkChange.java
Patch:
@@ -132,7 +132,7 @@ private void pop() {
     /**
      * {@link BulkChange}s that are effective currently.
      */
-    private static final ThreadLocal<BulkChange> INSCOPE = new ThreadLocal<BulkChange>();
+    private static final ThreadLocal<BulkChange> INSCOPE = new ThreadLocal<>();
 
     /**
      * Gets the {@link BulkChange} instance currently in scope for the current thread.

File: core/src/main/java/hudson/DNSMultiCast.java
Patch:
@@ -32,7 +32,7 @@ public Object call() {
                 try {
                     jmdns = JmDNS.create();
 
-                    Map<String,String> props = new HashMap<String, String>();
+                    Map<String,String> props = new HashMap<>();
                     String rootURL = jenkins.getRootUrl();
                     if (rootURL==null)  return null;
 

File: core/src/main/java/hudson/DescriptorExtensionList.java
Patch:
@@ -76,7 +76,7 @@ DescriptorExtensionList<T,D> createDescriptorList(Jenkins jenkins, Class<T> desc
         if (describableType == (Class) Publisher.class) {
             return (DescriptorExtensionList) new Publisher.DescriptorExtensionListImpl(jenkins);
         }
-        return new DescriptorExtensionList<T,D>(jenkins,describableType);
+        return new DescriptorExtensionList<>(jenkins, describableType);
     }
 
     /**
@@ -199,7 +199,7 @@ protected Collection<ExtensionComponent<D>> load(ExtensionComponentSet delta) {
     }
 
     private List<ExtensionComponent<D>> _load(Iterable<ExtensionComponent<Descriptor>> set) {
-        List<ExtensionComponent<D>> r = new ArrayList<ExtensionComponent<D>>();
+        List<ExtensionComponent<D>> r = new ArrayList<>();
         for( ExtensionComponent<Descriptor> c : set ) {
             Descriptor d = c.getInstance();
             try {

File: core/src/main/java/hudson/ExpressionFactory2.java
Patch:
@@ -168,5 +168,5 @@ public Collection values() {
      *
      * @see Functions#getCurrentJellyContext()
      */
-    protected static final ThreadLocal<JellyContext> CURRENT_CONTEXT = new ThreadLocal<JellyContext>();
+    protected static final ThreadLocal<JellyContext> CURRENT_CONTEXT = new ThreadLocal<>();
 }

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -465,7 +465,7 @@ public static String appendIfNotNull(String text, String suffix, String nullText
     }
 
     public static Map getSystemProperties() {
-        return new TreeMap<Object,Object>(System.getProperties());
+        return new TreeMap<>(System.getProperties());
     }
 
     /**
@@ -479,7 +479,7 @@ public static String getSystemProperty(String key) {
     }
 
     public static Map getEnvVars() {
-        return new TreeMap<String,String>(EnvVars.masterEnvVars);
+        return new TreeMap<>(EnvVars.masterEnvVars);
     }
 
     public static boolean isWindows() {
@@ -544,7 +544,7 @@ private static String[] logRecordPreformat(LogRecord r) {
      * @since 1.525
      */
     public static <T> Iterable<T> reverse(Collection<T> collection) {
-        List<T> list = new ArrayList<T>(collection);
+        List<T> list = new ArrayList<>(collection);
         Collections.reverse(list);
         return list;
     }

File: core/src/main/java/hudson/Launcher.java
Patch:
@@ -197,14 +197,14 @@ public ProcStarter cmds(String... args) {
         }
 
         public ProcStarter cmds(File program, String... args) {
-            commands = new ArrayList<String>(args.length+1);
+            commands = new ArrayList<>(args.length + 1);
             commands.add(program.getPath());
             commands.addAll(Arrays.asList(args));
             return this;
         }
 
         public ProcStarter cmds(List<String> args) {
-            commands = new ArrayList<String>(args);
+            commands = new ArrayList<>(args);
             return this;
         }
 

File: core/src/main/java/hudson/Lookup.java
Patch:
@@ -32,7 +32,7 @@
  * @author Kohsuke Kawaguchi
  */
 public class Lookup {
-    private final ConcurrentHashMap<Class,Object> data = new ConcurrentHashMap<Class,Object>();
+    private final ConcurrentHashMap<Class,Object> data = new ConcurrentHashMap<>();
 
     public <T> T get(Class<T> type) {
         return type.cast(data.get(type));

File: core/src/main/java/hudson/Main.java
Patch:
@@ -152,7 +152,7 @@ public static int remotePost(String[] args) throws Exception {
                 // run the command
                 long start = System.currentTimeMillis();
 
-                List<String> cmd = new ArrayList<String>();
+                List<String> cmd = new ArrayList<>();
                 for( int i=1; i<args.length; i++ )
                     cmd.add(args[i]);
                 Proc proc = new Proc.LocalProc(cmd.toArray(new String[0]),(String[])null,System.in,

File: core/src/main/java/hudson/MarkupText.java
Patch:
@@ -45,7 +45,7 @@ public class MarkupText extends AbstractMarkupText {
     /**
      * Added mark up tags.
      */
-    private final List<Tag> tags = new ArrayList<Tag>();
+    private final List<Tag> tags = new ArrayList<>();
 
     /**
      * Represents one mark up inserted into text.

File: core/src/main/java/hudson/PermalinkList.java
Patch:
@@ -60,7 +60,7 @@ public Permalink get(String id) {
      * Finds the closest name match by its ID.
      */
     public Permalink findNearest(String id) {
-        List<String> ids = new ArrayList<String>();
+        List<String> ids = new ArrayList<>();
         for (Permalink p : this)
             ids.add(p.getId());
         String nearest = EditDistance.findNearest(id, ids);

File: core/src/main/java/hudson/cli/CLICommand.java
Patch:
@@ -530,7 +530,7 @@ public static CLICommand clone(String name) {
 
     private static final Logger LOGGER = Logger.getLogger(CLICommand.class.getName());
 
-    private static final ThreadLocal<CLICommand> CURRENT_COMMAND = new ThreadLocal<CLICommand>();
+    private static final ThreadLocal<CLICommand> CURRENT_COMMAND = new ThreadLocal<>();
 
     /*package*/ static CLICommand setCurrent(CLICommand cmd) {
         CLICommand old = getCurrent();

File: core/src/main/java/hudson/cli/InstallPluginCommand.java
Patch:
@@ -63,7 +63,7 @@ public String getShortDescription() {
             "and the plugin will be installed from the update center. If the short name includes a minimum version number " +
             "(like ‘findbugs:1.4’), and there are multiple update centers publishing different versions, the update centers " +
             "will be searched in order for the first one publishing a version that is at least the specified version.")
-    public List<String> sources = new ArrayList<String>();
+    public List<String> sources = new ArrayList<>();
 
     @Option(name="-name",usage="If specified, the plugin will be installed as this short name (whereas normally the name is inferred from the source name automatically).")
     public String name; // TODO better to parse out Short-Name from the manifest and deprecate this option

File: core/src/main/java/hudson/console/ConsoleNote.java
Patch:
@@ -340,7 +340,7 @@ public static int findPreamble(byte[] buf, int start, int len) {
      * @since 1.350
      */
     public static List<String> removeNotes(Collection<String> logLines) {
-        List<String> r = new ArrayList<String>(logLines.size());
+        List<String> r = new ArrayList<>(logLines.size());
         for (String l : logLines)
             r.add(removeNotes(l));
         return r;

File: core/src/main/java/hudson/diagnosis/MemoryUsageMonitor.java
Patch:
@@ -53,7 +53,7 @@ public final class MemoryUsageMonitor extends PeriodicWork {
      * A memory group is conceptually a set of memory pools. 
      */
     public final class MemoryGroup {
-        private final List<MemoryPoolMXBean> pools = new ArrayList<MemoryPoolMXBean>();
+        private final List<MemoryPoolMXBean> pools = new ArrayList<>();
 
         /**
          * Trend of the memory usage, after GCs.

File: core/src/main/java/hudson/diagnosis/NullIdDescriptorMonitor.java
Patch:
@@ -55,7 +55,7 @@ public String getDisplayName() {
         return Messages.NullIdDescriptorMonitor_DisplayName();
     }
 
-    private final List<Descriptor> problems = new ArrayList<Descriptor>();
+    private final List<Descriptor> problems = new ArrayList<>();
 
     @Override
     public boolean isActivated() {

File: core/src/main/java/hudson/diagnosis/OldDataMonitor.java
Patch:
@@ -78,7 +78,7 @@
 public class OldDataMonitor extends AdministrativeMonitor {
     private static final Logger LOGGER = Logger.getLogger(OldDataMonitor.class.getName());
 
-    private ConcurrentMap<SaveableReference,VersionRange> data = new ConcurrentHashMap<SaveableReference,VersionRange>();
+    private ConcurrentMap<SaveableReference,VersionRange> data = new ConcurrentHashMap<>();
 
     /**
      * Gets instance of the monitor.
@@ -106,7 +106,7 @@ public boolean isActivated() {
     }
 
     public Map<Saveable,VersionRange> getData() {
-        Map<Saveable,VersionRange> r = new HashMap<Saveable,VersionRange>();
+        Map<Saveable,VersionRange> r = new HashMap<>();
         for (Map.Entry<SaveableReference,VersionRange> entry : this.data.entrySet()) {
             Saveable s = entry.getKey().get();
             if (s != null) {

File: core/src/main/java/hudson/init/InitStrategy.java
Patch:
@@ -45,7 +45,7 @@ public class InitStrategy {
      *      and when that happens, Jenkins will ignore all but the first one in the list.
      */
     public List<File> listPluginArchives(PluginManager pm) throws IOException {
-        List<File> r = new ArrayList<File>();
+        List<File> r = new ArrayList<>();
 
         // the ordering makes sure that during the debugging we get proper precedence among duplicates.
         // for example, while doing "mvn jpi:run" or "mvn hpi:run" on a plugin that's bundled with Jenkins, we want to the

File: core/src/main/java/hudson/init/TaskMethodFinder.java
Patch:
@@ -32,7 +32,7 @@
 abstract class TaskMethodFinder<T extends Annotation> extends TaskBuilder {
     private static final Logger LOGGER = Logger.getLogger(TaskMethodFinder.class.getName());
     protected final ClassLoader cl;
-    private final Set<Method> discovered = new HashSet<Method>();
+    private final Set<Method> discovered = new HashSet<>();
 
     private final Class<T> type;
     private final Class<? extends Enum> milestoneType;
@@ -52,7 +52,7 @@ public TaskMethodFinder(Class<T> type, Class<? extends Enum> milestoneType, Clas
     protected abstract boolean fatalOf(T i);
 
     public Collection<Task> discoverTasks(Reactor session) throws IOException {
-        List<Task> result = new ArrayList<Task>();
+        List<Task> result = new ArrayList<>();
         for (Method e : Index.list(type, cl, Method.class)) {
             if (filter(e)) continue;   // already reported once
 
@@ -180,7 +180,7 @@ public String toString() {
         }
 
         private Collection<Milestone> toMilestones(String[] tokens, Milestone m) {
-            List<Milestone> r = new ArrayList<Milestone>();
+            List<Milestone> r = new ArrayList<>();
             for (String s : tokens) {
                 try {
                     r.add((Milestone)Enum.valueOf(milestoneType,s));

File: core/src/main/java/hudson/logging/LogRecorder.java
Patch:
@@ -75,7 +75,7 @@
 public class LogRecorder extends AbstractModelObject implements Saveable {
     private volatile String name;
 
-    public final CopyOnWriteList<Target> targets = new CopyOnWriteList<Target>();
+    public final CopyOnWriteList<Target> targets = new CopyOnWriteList<>();
     private final static TargetComparator TARGET_COMPARATOR = new TargetComparator();
     
     @Restricted(NoExternalUse.class)

File: core/src/main/java/hudson/logging/LogRecorderManager.java
Patch:
@@ -68,7 +68,7 @@ public class LogRecorderManager extends AbstractModelObject implements ModelObje
     /**
      * {@link LogRecorder}s keyed by their {@linkplain LogRecorder#name name}.
      */
-    public transient final Map<String,LogRecorder> logRecorders = new CopyOnWriteMap.Tree<String,LogRecorder>();
+    public transient final Map<String,LogRecorder> logRecorders = new CopyOnWriteMap.Tree<>();
 
     public String getDisplayName() {
         return Messages.LogRecorderManager_DisplayName();
@@ -160,7 +160,7 @@ public void doRss( StaplerRequest req, StaplerResponse rsp ) throws IOException,
         String level = req.getParameter("level");
         if(level!=null) {
             Level threshold = Level.parse(level);
-            List<LogRecord> filtered = new ArrayList<LogRecord>();
+            List<LogRecord> filtered = new ArrayList<>();
             for (LogRecord r : logs) {
                 if(r.getLevel().intValue() >= threshold.intValue())
                     filtered.add(r);

File: core/src/main/java/hudson/logging/WeakLogHandler.java
Patch:
@@ -44,7 +44,7 @@ public final class WeakLogHandler extends Handler {
     public WeakLogHandler(Handler target, Logger logger) {
         this.logger = logger;
         logger.addHandler(this);
-        this.target = new WeakReference<Handler>(target);
+        this.target = new WeakReference<>(target);
     }
 
     public void publish(LogRecord record) {

File: core/src/main/java/hudson/model/AutoCompletionCandidates.java
Patch:
@@ -48,7 +48,7 @@
  * @author Kohsuke Kawaguchi
  */
 public class AutoCompletionCandidates implements HttpResponse {
-    private final List<String> values = new ArrayList<String>();
+    private final List<String> values = new ArrayList<>();
 
     public AutoCompletionCandidates add(String v) {
         values.add(v);

File: core/src/main/java/hudson/model/Build.java
Patch:
@@ -147,7 +147,7 @@ protected Result doRun(@Nonnull BuildListener listener) throws Exception {
 
             Result r = null;
             try {
-                List<BuildWrapper> wrappers = new ArrayList<BuildWrapper>(project.getBuildWrappers().values());
+                List<BuildWrapper> wrappers = new ArrayList<>(project.getBuildWrappers().values());
                 
                 ParametersAction parameters = getAction(ParametersAction.class);
                 if (parameters != null)

File: core/src/main/java/hudson/model/ChoiceParameterDefinition.java
Patch:
@@ -45,7 +45,7 @@ public ChoiceParameterDefinition(String name, String choices, String description
 
     public ChoiceParameterDefinition(String name, String[] choices, String description) {
         super(name, description);
-        this.choices = new ArrayList<String>(Arrays.asList(choices));
+        this.choices = new ArrayList<>(Arrays.asList(choices));
         defaultValue = null;
     }
 

File: core/src/main/java/hudson/model/ComputerPanelBox.java
Patch:
@@ -37,7 +37,7 @@ public Computer getComputer(){
      *      List of all the registered {@link ComputerPanelBox}s.
      */
     public static List<ComputerPanelBox> all(Computer computer) {
-        List<ComputerPanelBox> boxs = new ArrayList<ComputerPanelBox>();
+        List<ComputerPanelBox> boxs = new ArrayList<>();
         for(ComputerPanelBox box:  ExtensionList.lookup(ComputerPanelBox.class)){
             box.setComputer(computer);
             boxs.add(box);

File: core/src/main/java/hudson/model/DescriptorVisibilityFilter.java
Patch:
@@ -65,7 +65,7 @@ public static ExtensionList<DescriptorVisibilityFilter> all() {
 
     public static <T extends Descriptor> List<T> apply(Object context, Iterable<T> source) {
         ExtensionList<DescriptorVisibilityFilter> filters = all();
-        List<T> r = new ArrayList<T>();
+        List<T> r = new ArrayList<>();
         Class<?> contextClass = context == null ? null : context.getClass();
 
         if (source == null) {
@@ -110,7 +110,7 @@ public static <T extends Descriptor> List<T> apply(Object context, Iterable<T> s
 
     public static <T extends Descriptor> List<T> applyType(Class<?> contextClass, Iterable<T> source) {
         ExtensionList<DescriptorVisibilityFilter> filters = all();
-        List<T> r = new ArrayList<T>();
+        List<T> r = new ArrayList<>();
 
         OUTER:
         for (T d : source) {

File: core/src/main/java/hudson/model/DownloadService.java
Patch:
@@ -309,7 +309,7 @@ public String getUrl() {
          * URLs to download from.
          */
         public List<String> getUrls() {
-            List<String> updateSites = new ArrayList<String>();
+            List<String> updateSites = new ArrayList<>();
             for (UpdateSite site : Jenkins.getActiveInstance().getUpdateCenter().getSiteList()) {
                 String siteUrl = site.getUrl();
                 int baseUrlEnd = siteUrl.indexOf("update-center.json");

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -139,7 +139,7 @@ public class Executor extends Thread implements ModelObject {
      * Cause of interruption. Access needs to be synchronized.
      */
     @GuardedBy("lock")
-    private final List<CauseOfInterruption> causes = new Vector<CauseOfInterruption>();
+    private final List<CauseOfInterruption> causes = new Vector<>();
 
     public Executor(@Nonnull Computer owner, int n) {
         super("Executor #"+n+" for "+owner.getDisplayName());
@@ -271,7 +271,7 @@ public void recordCauseOfInterruption(Run<?,?> build, TaskListener listener) {
         lock.writeLock().lock();
         try {
             if (causes.isEmpty())   return;
-            r = new ArrayList<CauseOfInterruption>(causes);
+            r = new ArrayList<>(causes);
             causes.clear();
         } finally {
             lock.writeLock().unlock();
@@ -961,7 +961,7 @@ public static long getEstimatedDurationFor(Executable e) {
      * Mechanism to allow threads (in particular the channel request handling threads) to
      * run on behalf of {@link Executor}.
      */
-    private static final ThreadLocal<Executor> IMPERSONATION = new ThreadLocal<Executor>();
+    private static final ThreadLocal<Executor> IMPERSONATION = new ThreadLocal<>();
 
     private static final Logger LOGGER = Logger.getLogger(Executor.class.getName());
 }

File: core/src/main/java/hudson/model/HealthReport.java
Patch:
@@ -62,7 +62,7 @@ public class HealthReport implements Serializable, Comparable<HealthReport> {
     private static final String HEALTH_0_TO_20_IMG = "health-00to19.png";
     private static final String HEALTH_UNKNOWN_IMG = "empty.png";
 
-    private static final Map<String, String> iconIMGToClassMap = new HashMap<String, String>();
+    private static final Map<String, String> iconIMGToClassMap = new HashMap<>();
     static {
         iconIMGToClassMap.put(HEALTH_OVER_80_IMG, HEALTH_OVER_80);
         iconIMGToClassMap.put(HEALTH_61_TO_80_IMG, HEALTH_61_TO_80);

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -107,7 +107,7 @@ public boolean accept(File child) {
                 return child.isDirectory();
             }
         });
-        CopyOnWriteMap.Tree<K,V> configurations = new CopyOnWriteMap.Tree<K,V>();
+        CopyOnWriteMap.Tree<K,V> configurations = new CopyOnWriteMap.Tree<>();
         for (File subdir : subdirs) {
             try {
                 // Try to retain the identity of an existing child object if we can.

File: core/src/main/java/hudson/model/JobPropertyDescriptor.java
Patch:
@@ -99,7 +99,7 @@ public boolean isApplicable(Class<? extends Job> jobType) {
      * Gets the {@link JobPropertyDescriptor}s applicable for a given job type.
      */
     public static List<JobPropertyDescriptor> getPropertyDescriptors(Class<? extends Job> clazz) {
-        List<JobPropertyDescriptor> r = new ArrayList<JobPropertyDescriptor>();
+        List<JobPropertyDescriptor> r = new ArrayList<>();
         for (JobPropertyDescriptor p : all())
             if(p.isApplicable(clazz))
                 r.add(p);

File: core/src/main/java/hudson/model/LoadBalancer.java
Patch:
@@ -79,9 +79,9 @@ public abstract class LoadBalancer implements ExtensionPoint {
         @Override
         public Mapping map(Task task, MappingWorksheet ws) {
             // build consistent hash for each work chunk
-            List<ConsistentHash<ExecutorChunk>> hashes = new ArrayList<ConsistentHash<ExecutorChunk>>(ws.works.size());
+            List<ConsistentHash<ExecutorChunk>> hashes = new ArrayList<>(ws.works.size());
             for (int i=0; i<ws.works.size(); i++) {
-                ConsistentHash<ExecutorChunk> hash = new ConsistentHash<ExecutorChunk>(new Hash<ExecutorChunk>() {
+                ConsistentHash<ExecutorChunk> hash = new ConsistentHash<>(new Hash<ExecutorChunk>() {
                     public String hash(ExecutorChunk node) {
                         return node.getName();
                     }

File: core/src/main/java/hudson/model/MultiStageTimeSeries.java
Patch:
@@ -201,7 +201,7 @@ public static class TrendChart implements HttpResponse {
 
         public TrendChart(TimeScale timeScale, MultiStageTimeSeries... series) {
             this.timeScale = timeScale;
-            this.series = new ArrayList<MultiStageTimeSeries>(Arrays.asList(series));
+            this.series = new ArrayList<>(Arrays.asList(series));
             this.dataset = createDataset();
         }
 

File: core/src/main/java/hudson/model/MyView.java
Patch:
@@ -75,7 +75,7 @@ public TopLevelItem doCreateItem(StaplerRequest req, StaplerResponse rsp)
 
     @Override
     public Collection<TopLevelItem> getItems() {
-        List<TopLevelItem> items = new ArrayList<TopLevelItem>();
+        List<TopLevelItem> items = new ArrayList<>();
         for (TopLevelItem item : getOwner().getItemGroup().getItems()) {
             if (item.hasPermission(Item.CONFIGURE)) {
                 items.add(item);

File: core/src/main/java/hudson/model/MyViewsProperty.java
Patch:
@@ -73,7 +73,7 @@ public class MyViewsProperty extends UserProperty implements ModifiableViewGroup
     /**
      * Always hold at least one view.
      */
-    private CopyOnWriteArrayList<View> views = new CopyOnWriteArrayList<View>();
+    private CopyOnWriteArrayList<View> views = new CopyOnWriteArrayList<>();
 
     private transient ViewGroupMixIn viewGroupMixIn;
 
@@ -91,7 +91,7 @@ private MyViewsProperty() {
     public Object readResolve() {
         if (views == null)
             // this shouldn't happen, but an error in 1.319 meant the last view could be deleted
-            views = new CopyOnWriteArrayList<View>();
+            views = new CopyOnWriteArrayList<>();
 
         if (views.isEmpty()) {
             // preserve the non-empty invariant

File: core/src/main/java/hudson/model/PageDecorator.java
Patch:
@@ -108,7 +108,7 @@ public final String getUrl() {
      *      Use {@link #all()} for read access, and use {@link Extension} for registration.
      */
     @Deprecated
-    public static final List<PageDecorator> ALL = (List)new DescriptorList<PageDecorator>(PageDecorator.class);
+    public static final List<PageDecorator> ALL = (List) new DescriptorList<>(PageDecorator.class);
 
     /**
      * Returns all the registered {@link PageDecorator} descriptors.

File: core/src/main/java/hudson/model/PaneStatusProperties.java
Patch:
@@ -13,7 +13,7 @@
 
 public class PaneStatusProperties extends UserProperty implements Saveable {
 	
-	private final PersistedList<String> collapsed = new PersistedList<String>(this);
+	private final PersistedList<String> collapsed = new PersistedList<>(this);
 	
 	private static final PaneStatusProperties FALLBACK = new PaneStatusPropertiesSessionFallback();
 	

File: core/src/main/java/hudson/model/ParameterDefinition.java
Patch:
@@ -232,7 +232,7 @@ public static DescriptorExtensionList<ParameterDefinition,ParameterDescriptor> a
      *      Use {@link #all()} for read access, and {@link Extension} for registration.
      */
     @Deprecated
-    public static final DescriptorList<ParameterDefinition> LIST = new DescriptorList<ParameterDefinition>(ParameterDefinition.class);
+    public static final DescriptorList<ParameterDefinition> LIST = new DescriptorList<>(ParameterDefinition.class);
 
     public abstract static class ParameterDescriptor extends
             Descriptor<ParameterDefinition> {

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -222,11 +222,11 @@ public boolean shouldSchedule(List<Action> actions) {
             return !parameters.isEmpty();
         } else {
             // I don't think we need multiple ParametersActions, but let's be defensive
-            Set<ParameterValue> params = new HashSet<ParameterValue>();
+            Set<ParameterValue> params = new HashSet<>();
             for (ParametersAction other: others) {
                 params.addAll(other.parameters);
             }
-            return !params.equals(new HashSet<ParameterValue>(this.parameters));
+            return !params.equals(new HashSet<>(this.parameters));
         }
     }
 
@@ -324,7 +324,7 @@ private List<? extends ParameterValue> filter(List<ParameterValue> parameters) {
             return parameters;
         }
 
-        List<ParameterValue> filteredParameters = new ArrayList<ParameterValue>();
+        List<ParameterValue> filteredParameters = new ArrayList<>();
 
         for (ParameterValue v : this.parameters) {
             if (this.parameterDefinitionNames.contains(v.getName()) || isSafeParameter(v.getName())) {

File: core/src/main/java/hudson/model/ParametersDefinitionProperty.java
Patch:
@@ -138,7 +138,7 @@ public void _doBuild(StaplerRequest req, StaplerResponse rsp, @QueryParameter Ti
             delay=new TimeDuration(TimeUnit.MILLISECONDS.convert(getJob().getQuietPeriod(), TimeUnit.SECONDS));
 
 
-        List<ParameterValue> values = new ArrayList<ParameterValue>();
+        List<ParameterValue> values = new ArrayList<>();
         
         JSONObject formData = req.getSubmittedForm();
         JSONArray a = JSONArray.fromObject(formData.get("parameter"));
@@ -177,7 +177,7 @@ public void buildWithParameters(StaplerRequest req, StaplerResponse rsp) throws
     }
 
     public void buildWithParameters(StaplerRequest req, StaplerResponse rsp, @CheckForNull TimeDuration delay) throws IOException, ServletException {
-        List<ParameterValue> values = new ArrayList<ParameterValue>();
+        List<ParameterValue> values = new ArrayList<>();
         for (ParameterDefinition d: parameterDefinitions) {
         	ParameterValue value = d.createValue(req);
         	if (value != null) {

File: core/src/main/java/hudson/model/PermalinkProjectAction.java
Patch:
@@ -91,7 +91,7 @@ abstract class Permalink {
         /**
          * List of {@link Permalink}s that are built into Jenkins.
          */
-        public static final List<Permalink> BUILTIN = new CopyOnWriteArrayList<Permalink>();
+        public static final List<Permalink> BUILTIN = new CopyOnWriteArrayList<>();
 
         public static final Permalink LAST_BUILD = new Permalink() {
             public String getDisplayName() {

File: core/src/main/java/hudson/model/Project.java
Patch:
@@ -157,7 +157,7 @@ public DescribableList<BuildWrapper, Descriptor<BuildWrapper>> getBuildWrappersL
 
     @Override
     protected Set<ResourceActivity> getResourceActivities() {
-        final Set<ResourceActivity> activities = new HashSet<ResourceActivity>();
+        final Set<ResourceActivity> activities = new HashSet<>();
 
         activities.addAll(super.getResourceActivities());
         activities.addAll(Util.filter(getBuildersList(),ResourceActivity.class));

File: core/src/main/java/hudson/model/ResourceController.java
Patch:
@@ -42,7 +42,7 @@ public class ResourceController {
     /**
      * {@link ResourceList}s that are used by activities that are in progress.
      */
-    private final Set<ResourceActivity> inProgress = new CopyOnWriteArraySet<ResourceActivity>();
+    private final Set<ResourceActivity> inProgress = new CopyOnWriteArraySet<>();
 
     /**
      * View of {@link #inProgress} that exposes its {@link ResourceList}.

File: core/src/main/java/hudson/model/ResourceList.java
Patch:
@@ -52,15 +52,15 @@ public final class ResourceList {
     /**
      * All resources (R/W.)
      */
-    private final Set<Resource> all = new HashSet<Resource>();
+    private final Set<Resource> all = new HashSet<>();
 
     /**
      * Write accesses. Values are the # of write counts that this list uses.
      *
      * The values are mostly supposed to be 1, but when {@link ResourceController}
      * uses a list to keep track of the union of all the activities, it can get larger.
      */
-    private final Map<Resource,Integer> write = new HashMap<Resource,Integer>();
+    private final Map<Resource,Integer> write = new HashMap<>();
     private static final Integer MAX_INT = Integer.MAX_VALUE;
 
     /**
@@ -143,7 +143,7 @@ private Resource _getConflict(ResourceList lhs, ResourceList rhs) {
 
     @Override
     public String toString() {
-        Map<Resource,String> m = new HashMap<Resource,String>();
+        Map<Resource,String> m = new HashMap<>();
         for (Resource r : all)
             m.put(r,"R");
         for (Entry<Resource,Integer> e : write.entrySet())

File: core/src/main/java/hudson/model/Result.java
Patch:
@@ -155,7 +155,7 @@ public boolean isCompleteBuild() {
     }
 
     private static @Nonnull List<String> getNames() {
-        List<String> l = new ArrayList<String>();
+        List<String> l = new ArrayList<>();
         for (Result r : all)
             l.add(r.name);
         return l;

File: core/src/main/java/hudson/model/RunnerStack.java
Patch:
@@ -38,12 +38,12 @@
  * @since 1.319
  */
 final class RunnerStack {
-    private final Map<Executor,Stack<RunExecution>> stack = new WeakHashMap<Executor,Stack<RunExecution>>();
+    private final Map<Executor,Stack<RunExecution>> stack = new WeakHashMap<>();
 
     synchronized void push(RunExecution r) {
         Executor e = Executor.currentExecutor();
         Stack<RunExecution> s = stack.get(e);
-        if(s==null) stack.put(e,s=new Stack<RunExecution>());
+        if(s==null) stack.put(e,s= new Stack<>());
         s.push(r);
     }
 

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -636,7 +636,7 @@ public final List<Descriptor<RetentionStrategy<?>>> retentionStrategyDescriptors
         @SuppressWarnings("unchecked") // used by Jelly EL only
         @Restricted(NoExternalUse.class) // used by Jelly EL only
         public final List<NodePropertyDescriptor> nodePropertyDescriptors(@CheckForNull Slave it) {
-            List<NodePropertyDescriptor> result = new ArrayList<NodePropertyDescriptor>();
+            List<NodePropertyDescriptor> result = new ArrayList<>();
             Collection<NodePropertyDescriptor> list =
                     (Collection) Jenkins.getInstance().getDescriptorList(NodeProperty.class);
             for (NodePropertyDescriptor npd : it == null

File: core/src/main/java/hudson/model/TaskThread.java
Patch:
@@ -97,7 +97,7 @@ public Reader readAll() throws IOException {
      */
     protected final void associateWith(TaskAction action) {
         action.workerThread = this;
-        action.log = new WeakReference<AnnotatedLargeText>(log);
+        action.log = new WeakReference<>(log);
     }
 
     /**
@@ -188,7 +188,7 @@ public static ListenerAndText forMemory(TaskAction context) {
 
             return new ListenerAndText(
                 new StreamTaskListener(log),
-                new AnnotatedLargeText<TaskAction>(log,Charset.defaultCharset(),false,context)
+                new AnnotatedLargeText<>(log, Charset.defaultCharset(), false, context)
             );
         }
 
@@ -198,7 +198,7 @@ public static ListenerAndText forMemory(TaskAction context) {
         public static ListenerAndText forFile(File f, TaskAction context) throws IOException {
             return new ListenerAndText(
                 new StreamTaskListener(f),
-                new AnnotatedLargeText<TaskAction>(f,Charset.defaultCharset(),false,context)
+                new AnnotatedLargeText<>(f, Charset.defaultCharset(), false, context)
             );
         }
     }

File: core/src/main/java/hudson/model/TransientComputerActionFactory.java
Patch:
@@ -64,7 +64,7 @@ public static ExtensionList<TransientComputerActionFactory> all() {
      * Creates {@link Action}s for a node, using all registered {@link TransientComputerActionFactory}s.
      */
 	public static List<Action> createAllFor(Computer target) {
-		List<Action> result = new ArrayList<Action>();
+		List<Action> result = new ArrayList<>();
 		for (TransientComputerActionFactory f: all()) {
 			result.addAll(f.createFor(target));
 		}

File: core/src/main/java/hudson/model/TransientViewActionFactory.java
Patch:
@@ -31,7 +31,7 @@ public static ExtensionList<TransientViewActionFactory> all() {
      * Creates {@link Action}s for a view, using all registered {@link TransientViewActionFactory}s.
      */
 	public static List<Action> createAllFor(View v) {
-		List<Action> result = new ArrayList<Action>();
+		List<Action> result = new ArrayList<>();
 		for (TransientViewActionFactory f: all()) {
 			result.addAll(f.createFor(v));
 		}

File: core/src/main/java/hudson/model/TreeView.java
Patch:
@@ -62,12 +62,12 @@ public class TreeView extends View implements ViewGroup {
      * List of job names. This is what gets serialized.
      */
     private final Set<String> jobNames
-        = new TreeSet<String>(CaseInsensitiveComparator.INSTANCE);
+        = new TreeSet<>(CaseInsensitiveComparator.INSTANCE);
 
     /**
      * Nested views.
      */
-    private final CopyOnWriteArrayList<View> views = new CopyOnWriteArrayList<View>();
+    private final CopyOnWriteArrayList<View> views = new CopyOnWriteArrayList<>();
 
     @DataBoundConstructor
     public TreeView(String name) {

File: core/src/main/java/hudson/model/UsageStatistics.java
Patch:
@@ -130,7 +130,7 @@ public String getStatData() throws IOException {
         o.put("servletContainer", j.servletContext.getServerInfo());
         o.put("version", Jenkins.VERSION);
 
-        List<JSONObject> nodes = new ArrayList<JSONObject>();
+        List<JSONObject> nodes = new ArrayList<>();
         for( Computer c : j.getComputers() ) {
             JSONObject  n = new JSONObject();
             if(c.getNode()==j) {
@@ -146,7 +146,7 @@ public String getStatData() throws IOException {
         }
         o.put("nodes",nodes);
 
-        List<JSONObject> plugins = new ArrayList<JSONObject>();
+        List<JSONObject> plugins = new ArrayList<>();
         for( PluginWrapper pw : j.getPluginManager().getPlugins() ) {
             if(!pw.isActive())  continue;   // treat disabled plugins as if they are uninstalled
             JSONObject p = new JSONObject();

File: core/src/main/java/hudson/model/UserProperties.java
Patch:
@@ -40,5 +40,5 @@ public class UserProperties {
      *      Use {@link UserProperty#all()} for read access and {@link Extension} for auto-registration.
      */
     @Deprecated
-    public static final List<UserPropertyDescriptor> LIST = (List)new DescriptorList<UserProperty>(UserProperty.class);
+    public static final List<UserPropertyDescriptor> LIST = (List) new DescriptorList<>(UserProperty.class);
 }

File: core/src/main/java/hudson/model/ViewGroupMixIn.java
Patch:
@@ -146,7 +146,7 @@ public View getView(@CheckForNull String name) {
     @Exported
     public Collection<View> getViews() {
         List<View> orig = views();
-        List<View> copy = new ArrayList<View>(orig.size());
+        List<View> copy = new ArrayList<>(orig.size());
         for (View v : orig) {
             if (v.hasPermission(View.READ))
                 copy.add(v);

File: core/src/main/java/hudson/model/ViewJob.java
Patch:
@@ -60,7 +60,7 @@ public abstract class ViewJob<JobT extends ViewJob<JobT,RunT>, RunT extends Run<
     /**
      * All {@link Run}s. Copy-on-write semantics.
      */
-    protected transient /*almost final*/ RunMap<RunT> runs = new RunMap<RunT>();
+    protected transient /*almost final*/ RunMap<RunT> runs = new RunMap<>();
 
     private transient boolean notLoaded = true;
 
@@ -105,7 +105,7 @@ protected SortedMap<Integer,RunT> _getRuns() {
             // if none is loaded yet, do so immediately.
             synchronized(this) {
                 if(runs==null)
-                    runs = new RunMap<RunT>();
+                    runs = new RunMap<>();
                 if(notLoaded) {
                     notLoaded = false;
                     _reload();   
@@ -177,7 +177,7 @@ private static final class ReloadThread extends Thread {
          * This is a set, so no {@link ExternalJob}s are scheduled twice, yet
          * it's order is predictable, avoiding starvation.
          */
-        final Set<ViewJob> reloadQueue = new LinkedHashSet<ViewJob>();
+        final Set<ViewJob> reloadQueue = new LinkedHashSet<>();
 
         private ReloadThread() {
             setName("ViewJob reload thread");

File: core/src/main/java/hudson/model/WorkspaceCleanupThread.java
Patch:
@@ -65,7 +65,7 @@ public static void invoke() {
             LOGGER.fine("Disabled. Skipping execution");
             return;
         }
-        List<Node> nodes = new ArrayList<Node>();
+        List<Node> nodes = new ArrayList<>();
         Jenkins j = Jenkins.getInstance();
         nodes.add(j);
         nodes.addAll(j.getNodes());

File: core/src/main/java/hudson/model/listeners/SCMListener.java
Patch:
@@ -130,7 +130,7 @@ public static Collection<? extends SCMListener> all() {
         if (j == null) { // TODO use !Functions.isExtensionsAvailable() once JENKINS-33377
             return Collections.emptySet();
         }
-        List<SCMListener> r = new ArrayList<SCMListener>(j.getExtensionList(SCMListener.class));
+        List<SCMListener> r = new ArrayList<>(j.getExtensionList(SCMListener.class));
         for (SCMListener l : j.getSCMListeners()) {
             r.add(l);
         }

File: core/src/main/java/hudson/model/queue/BackFiller.java
Patch:
@@ -32,7 +32,7 @@ public class BackFiller extends LoadPredictor {
     @Override
     public Iterable<FutureLoad> predict(MappingWorksheet plan, Computer computer, long start, long end) {
         TimeRange timeRange = new TimeRange(start, end - start);
-        List<FutureLoad> loads = new ArrayList<FutureLoad>();
+        List<FutureLoad> loads = new ArrayList<>();
 
         for (BuildableItem bi : Jenkins.getInstance().getQueue().getBuildableItems()) {
             TentativePlan tp = bi.getAction(TentativePlan.class);
@@ -94,7 +94,7 @@ private TentativePlan makeTentativePlan(BuildableItem bi) {
         recursion = true;
         try {
             // pretend for now that all executors are available and decide some assignment that's executable.
-            List<PseudoExecutorSlot> slots = new ArrayList<PseudoExecutorSlot>();
+            List<PseudoExecutorSlot> slots = new ArrayList<>();
             for (Computer c : Jenkins.getInstance().getComputers()) {
                 if (c.isOffline())  continue;
                 for (Executor e : c.getExecutors()) {
@@ -109,7 +109,7 @@ private TentativePlan makeTentativePlan(BuildableItem bi) {
             if (m==null)    return null;
 
             // figure out how many executors we need on each computer?
-            Map<Computer,Integer> footprint = new HashMap<Computer, Integer>();
+            Map<Computer,Integer> footprint = new HashMap<>();
             for (Entry<WorkChunk, ExecutorChunk> e : m.toMap().entrySet()) {
                 Computer c = e.getValue().computer;
                 Integer v = footprint.get(c);

File: core/src/main/java/hudson/model/queue/FutureImpl.java
Patch:
@@ -47,14 +47,14 @@ public final class FutureImpl extends AsyncFutureImpl<Executable> implements Que
     /**
      * If the computation has started, set to {@link Executor}s that are running the build.
      */
-    private final Set<Executor> executors = new HashSet<Executor>();
+    private final Set<Executor> executors = new HashSet<>();
 
     /**
      * {@link Future} that completes when the task started running.
      *
      * In contrast, {@link FutureImpl} will complete when the task finishes.
      */
-    /*package*/ final AsyncFutureImpl<Executable> start = new AsyncFutureImpl<Executable>();
+    /*package*/ final AsyncFutureImpl<Executable> start = new AsyncFutureImpl<>();
 
     public FutureImpl(Task task) {
         this.task = task;

File: core/src/main/java/hudson/model/queue/LoadPredictor.java
Patch:
@@ -92,7 +92,7 @@ public static class CurrentlyRunningTasks extends LoadPredictor {
         @Override
         public Iterable<FutureLoad> predict(MappingWorksheet plan, final Computer computer, long start, long eternity) {
             long now = System.currentTimeMillis();
-            List<FutureLoad> fl = new ArrayList<FutureLoad>();
+            List<FutureLoad> fl = new ArrayList<>();
             for (Executor e : computer.getExecutors()) {
                 if (e.isIdle())     continue;
 

File: core/src/main/java/hudson/model/queue/Timeline.java
Patch:
@@ -38,7 +38,7 @@
 */
 final class Timeline {
     // int[] is always length=1
-    private final TreeMap<Long, int[]> data = new TreeMap<Long, int[]>();
+    private final TreeMap<Long, int[]> data = new TreeMap<>();
 
     /**
      * Obtains q(t) for the given t.

File: core/src/main/java/hudson/model/queue/WorkUnitContext.java
Patch:
@@ -56,7 +56,7 @@ public final class WorkUnitContext {
 
     private final Latch startLatch, endLatch;
 
-    private List<WorkUnit> workUnits = new ArrayList<WorkUnit>();
+    private List<WorkUnit> workUnits = new ArrayList<>();
 
     /**
      * If the execution is aborted, set to non-null that indicates where it was aborted.
@@ -68,7 +68,7 @@ public WorkUnitContext(BuildableItem item) {
         this.task = item.task;
         this.future = (FutureImpl)item.getFuture();
         // JENKINS-51584 do not use item.getAllActions() here.
-        this.actions = new ArrayList<Action>(item.getActions());
+        this.actions = new ArrayList<>(item.getActions());
         // +1 for the main task
         int workUnitSize = task.getSubTasks().size();
         startLatch = new Latch(workUnitSize) {

File: core/src/main/java/hudson/node_monitors/AbstractAsyncNodeMonitorDescriptor.java
Patch:
@@ -80,7 +80,7 @@ protected Map<Computer, T> monitor() throws InterruptedException {
      * Perform monitoring with detailed reporting.
      */
     protected final @Nonnull Result<T> monitorDetailed() throws InterruptedException {
-        Map<Computer,Future<T>> futures = new HashMap<Computer,Future<T>>();
+        Map<Computer,Future<T>> futures = new HashMap<>();
         Set<Computer> skipped = new HashSet<>();
 
         for (Computer c : Jenkins.getInstance().getComputers()) {
@@ -102,7 +102,7 @@ protected Map<Computer, T> monitor() throws InterruptedException {
         final long now = System.currentTimeMillis();
         final long end = now + getMonitoringTimeOut();
 
-        final Map<Computer,T> data = new HashMap<Computer,T>();
+        final Map<Computer,T> data = new HashMap<>();
 
         for (Entry<Computer, Future<T>> e : futures.entrySet()) {
             Computer c = e.getKey();

File: core/src/main/java/hudson/node_monitors/AbstractNodeMonitorDescriptor.java
Patch:
@@ -140,7 +140,7 @@ public void doRun() {
      *      For all the computers, report the monitored values.
      */
     protected Map<Computer,T> monitor() throws InterruptedException {
-        Map<Computer,T> data = new HashMap<Computer,T>();
+        Map<Computer,T> data = new HashMap<>();
         for( Computer c : Jenkins.getInstance().getComputers() ) {
             try {
                 Thread.currentThread().setName("Monitoring "+c.getDisplayName()+" for "+getDisplayName());

File: core/src/main/java/hudson/node_monitors/NodeMonitor.java
Patch:
@@ -140,7 +140,7 @@ public void setIgnored(boolean ignored) {
      *      Use {@link #all()} for read access and {@link Extension} for registration.
      */
     @Deprecated
-    public static final DescriptorList<NodeMonitor> LIST = new DescriptorList<NodeMonitor>(NodeMonitor.class);
+    public static final DescriptorList<NodeMonitor> LIST = new DescriptorList<>(NodeMonitor.class);
 
     /**
      * Returns all the registered {@link NodeMonitor} descriptors.

File: core/src/main/java/hudson/scm/ChangeLogSet.java
Patch:
@@ -107,7 +107,7 @@ public RepositoryBrowser<?> getBrowser() {
     // method for the remote API.
     @Exported
     public final Object[] getItems() {
-        List<T> r = new ArrayList<T>();
+        List<T> r = new ArrayList<>();
         for (T t : this)
             r.add(t);
         return r.toArray();

File: core/src/main/java/hudson/scm/RepositoryBrowsers.java
Patch:
@@ -53,7 +53,7 @@ public class RepositoryBrowsers {
      * Only returns those {@link RepositoryBrowser} descriptors that extend from the given type.
      */
     public static List<Descriptor<RepositoryBrowser<?>>> filter(Class<? extends RepositoryBrowser> t) {
-        List<Descriptor<RepositoryBrowser<?>>> r = new ArrayList<Descriptor<RepositoryBrowser<?>>>();
+        List<Descriptor<RepositoryBrowser<?>>> r = new ArrayList<>();
         for (Descriptor<RepositoryBrowser<?>> d : RepositoryBrowser.all())
             if(d.isSubTypeOf(t))
                 r.add(d);

File: core/src/main/java/hudson/scm/SCMS.java
Patch:
@@ -46,7 +46,7 @@ public class SCMS {
      *      Use {@link SCM#all()} for read access and {@link Extension} for registration.
      */
     @Deprecated
-    public static final List<SCMDescriptor<?>> SCMS = (List)new DescriptorList<SCM>(SCM.class);
+    public static final List<SCMDescriptor<?>> SCMS = (List) new DescriptorList<>(SCM.class);
 
     /**
      * Parses {@link SCM} configuration from the submitted form.

File: core/src/main/java/hudson/search/ParsedQuickSilver.java
Patch:
@@ -39,7 +39,7 @@
  * @author Kohsuke Kawaguchi
  */
 final class ParsedQuickSilver {
-    private static final Map<Class,ParsedQuickSilver> TABLE = new HashMap<Class,ParsedQuickSilver>();
+    private static final Map<Class,ParsedQuickSilver> TABLE = new HashMap<>();
 
     synchronized static ParsedQuickSilver get(Class<? extends SearchableModelObject> clazz) {
         ParsedQuickSilver pqs = TABLE.get(clazz);
@@ -48,7 +48,7 @@ synchronized static ParsedQuickSilver get(Class<? extends SearchableModelObject>
         return pqs;
     }
 
-    private final List<Getter> getters = new ArrayList<Getter>();
+    private final List<Getter> getters = new ArrayList<>();
 
     private ParsedQuickSilver(Class<? extends SearchableModelObject> clazz) {
         QuickSilver qs;

File: core/src/main/java/hudson/search/Search.java
Patch:
@@ -142,7 +142,7 @@ public void doSuggest(StaplerRequest req, StaplerResponse rsp, @QueryParameter S
      *      a certain threshold to avoid showing too many options. 
      */
     public SearchResult getSuggestions(StaplerRequest req, String query) {
-        Set<String> paths = new HashSet<String>();  // paths already added, to control duplicates
+        Set<String> paths = new HashSet<>();  // paths already added, to control duplicates
         SearchResultImpl r = new SearchResultImpl();
         int max = req.hasParameter("max") ? Integer.parseInt(req.getParameter("max")) : 100;
         SearchableModelObject smo = findClosestSearchableModelObject(req);

File: core/src/main/java/hudson/search/SearchIndexBuilder.java
Patch:
@@ -38,9 +38,9 @@
  * @see AbstractModelObject#makeSearchIndex()
  */
 public final class SearchIndexBuilder {
-    private final List<SearchItem> items = new ArrayList<SearchItem>();
+    private final List<SearchItem> items = new ArrayList<>();
 
-    private final List<SearchIndex> indices = new ArrayList<SearchIndex>();
+    private final List<SearchIndex> indices = new ArrayList<>();
 
     /**
      * Adds all {@link QuickSilver}-annotated properties to the search index.

File: core/src/main/java/hudson/security/AuthorizationStrategy.java
Patch:
@@ -194,7 +194,7 @@ public abstract class AuthorizationStrategy extends AbstractDescribableImpl<Auth
      *      Use {@link #all()} for read access, and {@link Extension} for registration.
      */
     @Deprecated
-    public static final DescriptorList<AuthorizationStrategy> LIST = new DescriptorList<AuthorizationStrategy>(AuthorizationStrategy.class);
+    public static final DescriptorList<AuthorizationStrategy> LIST = new DescriptorList<>(AuthorizationStrategy.class);
     
     /**
      * {@link AuthorizationStrategy} that implements the semantics

File: core/src/main/java/hudson/security/ContainerAuthentication.java
Patch:
@@ -60,7 +60,7 @@ public ContainerAuthentication(HttpServletRequest request) {
 
         // Servlet API doesn't provide a way to list up all roles the current user
         // has, so we need to ask AuthorizationStrategy what roles it is going to check against.
-        List<GrantedAuthority> l = new ArrayList<GrantedAuthority>();
+        List<GrantedAuthority> l = new ArrayList<>();
         for( String g : Jenkins.getInstance().getAuthorizationStrategy().getGroups()) {
             if(request.isUserInRole(g))
                 l.add(new GrantedAuthorityImpl(g));

File: core/src/main/java/hudson/security/FederatedLoginServiceUserProperty.java
Patch:
@@ -45,7 +45,7 @@ public class FederatedLoginServiceUserProperty extends UserProperty {
     protected final Set<String> identifiers;
 
     protected FederatedLoginServiceUserProperty(Collection<String> identifiers) {
-        this.identifiers = new HashSet<String>(identifiers);
+        this.identifiers = new HashSet<>(identifiers);
     }
 
     public boolean has(String identifier) {

File: core/src/main/java/hudson/security/Permission.java
Patch:
@@ -287,7 +287,7 @@ public boolean getEnabled() {
     /**
      * All permissions in the system but in a single list.
      */
-    private static final List<Permission> ALL = new CopyOnWriteArrayList<Permission>();
+    private static final List<Permission> ALL = new CopyOnWriteArrayList<>();
 
     private static final List<Permission> ALL_VIEW = Collections.unmodifiableList(ALL);
 

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -641,7 +641,7 @@ and both needs to use the same key (this is a reflection of a poor design in Acg
      *      Use {@link #all()} for read access, and use {@link Extension} for registration.
      */
     @Deprecated
-    public static final DescriptorList<SecurityRealm> LIST = new DescriptorList<SecurityRealm>(SecurityRealm.class);
+    public static final DescriptorList<SecurityRealm> LIST = new DescriptorList<>(SecurityRealm.class);
 
     /**
      * Returns all the registered {@link SecurityRealm} descriptors.

File: core/src/main/java/hudson/security/SparseACL.java
Patch:
@@ -50,7 +50,7 @@ public Entry(Sid sid, Permission permission, boolean allowed) {
         }
     }
 
-    private final List<Entry> entries = new ArrayList<Entry>();
+    private final List<Entry> entries = new ArrayList<>();
     /**
      * Parent to delegate to. Can be null.
      */

File: core/src/main/java/hudson/security/WhoAmI.java
Patch:
@@ -65,7 +65,7 @@ public String[] getAuthorities() {
         if (auth().getAuthorities() == null) {
             return MemoryReductionUtil.EMPTY_STRING_ARRAY;
         }
-        List <String> authorities = new ArrayList<String>();
+        List <String> authorities = new ArrayList<>();
         for (GrantedAuthority a : auth().getAuthorities()) {
             authorities.add(a.getAuthority());
         }

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -279,7 +279,7 @@ private static final class ListFiles extends MasterToSlaveFileCallable<Map<Strin
         }
 
         @Override public Map<String,String> invoke(File basedir, VirtualChannel channel) throws IOException, InterruptedException {
-            Map<String,String> r = new HashMap<String,String>();
+            Map<String,String> r = new HashMap<>();
 
             FileSet fileSet = Util.createFileSet(basedir, includes, excludes);
             fileSet.setDefaultexcludes(defaultExcludes);

File: core/src/main/java/hudson/tasks/BuildStep.java
Patch:
@@ -232,7 +232,7 @@ default BuildStepMonitor getRequiredMonitorService() {
      *      {@link Extension} for registration.
      */
     @Deprecated
-    List<Descriptor<Builder>> BUILDERS = new DescriptorList<Builder>(Builder.class);
+    List<Descriptor<Builder>> BUILDERS = new DescriptorList<>(Builder.class);
 
     /**
      * List of all installed publishers.
@@ -259,14 +259,14 @@ final class PublisherList extends AbstractList<Descriptor<Publisher>> {
          * {@link Descriptor}s are actually stored in here.
          * Since {@link PublisherList} lives longer than {@link jenkins.model.Jenkins} we cannot directly use {@link ExtensionList}.
          */
-        private final DescriptorList<Publisher> core = new DescriptorList<Publisher>(Publisher.class);
+        private final DescriptorList<Publisher> core = new DescriptorList<>(Publisher.class);
 
         /**
          * For descriptors that are manually registered, remember what kind it was since
          * older plugins don't extend from neither {@link Recorder} nor {@link Notifier}.
          */
         /*package*/ static final WeakHashMap<Descriptor<Publisher>,Class<? extends Publisher>/*either Recorder.class or Notifier.class*/>
-                KIND = new WeakHashMap<Descriptor<Publisher>, Class<? extends Publisher>>();
+                KIND = new WeakHashMap<>();
 
         private PublisherList() {
         }

File: core/src/main/java/hudson/tasks/BuildStepDescriptor.java
Patch:
@@ -74,7 +74,7 @@ List<Descriptor<T>> filter(List<Descriptor<T>> base, Class<? extends AbstractPro
         // descriptor of the project
         Descriptor pd = Jenkins.getInstance().getDescriptor((Class) type);
 
-        List<Descriptor<T>> r = new ArrayList<Descriptor<T>>(base.size());
+        List<Descriptor<T>> r = new ArrayList<>(base.size());
         for (Descriptor<T> d : base) {
             if (pd instanceof AbstractProjectDescriptor && !((AbstractProjectDescriptor)pd).isApplicable(d))
                 continue;

File: core/src/main/java/hudson/tasks/BuildTrigger.java
Patch:
@@ -256,7 +256,7 @@ public static boolean execute(AbstractBuild build, BuildListener listener) {
         // Check all downstream Project of the project, not just those defined by BuildTrigger
         // TODO this may not yet be up to date if rebuildDependencyGraphAsync has been used; need a method to wait for the last call made before now to finish
         final DependencyGraph graph = Jenkins.getInstance().getDependencyGraph();
-        List<Dependency> downstreamProjects = new ArrayList<Dependency>(
+        List<Dependency> downstreamProjects = new ArrayList<>(
                 graph.getDownstreamDependencies(build.getProject()));
         // Sort topologically
         Collections.sort(downstreamProjects, new Comparator<Dependency>() {
@@ -267,7 +267,7 @@ public int compare(Dependency lhs, Dependency rhs) {
         });
 
         for (Dependency dep : downstreamProjects) {
-            List<Action> buildActions = new ArrayList<Action>();
+            List<Action> buildActions = new ArrayList<>();
             if (dep.shouldTriggerBuild(build, listener, buildActions)) {
                 AbstractProject p = dep.getDownstreamProject();
                 // Allow shouldTriggerBuild to return false first, in case it is skipping because of a lack of Item.READ/DISCOVER permission:

File: core/src/main/java/hudson/tasks/Maven.java
Patch:
@@ -349,7 +349,7 @@ public boolean perform(AbstractBuild<?,?> build, Launcher launcher, BuildListene
             }
 
             // Add properties from builder configuration, AFTER the injected build variables.
-            final VariableResolver<String> resolver = new Union<String>(new ByMap<String>(env), vr);
+            final VariableResolver<String> resolver = new Union<>(new ByMap<>(env), vr);
             args.addKeyValuePairsFromPropertyString("-D", this.properties, resolver, sensitiveVars);
 
             if (usesPrivateRepository())
@@ -460,7 +460,7 @@ public MavenInstallation[] getInstallations() {
         }
 
 		public void setInstallations(MavenInstallation... installations) {
-			List<MavenInstallation> tmpList = new ArrayList<Maven.MavenInstallation>();
+			List<MavenInstallation> tmpList = new ArrayList<>();
 			// remote empty Maven installation : 
 			if(installations != null) {
 				Collections.addAll(tmpList, installations);

File: core/src/main/java/hudson/tasks/Publisher.java
Patch:
@@ -135,7 +135,7 @@ public DescriptorExtensionListImpl(Jenkins hudson) {
 
         @Override
         protected List<ExtensionComponent<Descriptor<Publisher>>> sort(List<ExtensionComponent<Descriptor<Publisher>>> r) {
-            List<ExtensionComponent<Descriptor<Publisher>>> copy = new ArrayList<ExtensionComponent<Descriptor<Publisher>>>(r);
+            List<ExtensionComponent<Descriptor<Publisher>>> copy = new ArrayList<>(r);
             Collections.sort(copy,this);
             return copy;
         }

File: core/src/main/java/hudson/tasks/Shell.java
Patch:
@@ -88,7 +88,7 @@ public String[] buildCommandLine(FilePath script) {
             // interpreter override
             int end = command.indexOf('\n');
             if(end<0)   end=command.length();
-            List<String> args = new ArrayList<String>();
+            List<String> args = new ArrayList<>();
             args.addAll(Arrays.asList(Util.tokenize(command.substring(0,end).trim())));
             args.add(script.getRemote());
             args.set(0,args.get(0).substring(2));   // trim off "#!"

File: core/src/main/java/hudson/tools/DownloadFromUrlInstaller.java
Patch:
@@ -178,7 +178,7 @@ private boolean isDefaultSchema(List<JSONObject> jsonList) {
         private JSONObject reduce(List<JSONObject> jsonList) {
             List<ToolInstallerEntry> reducedToolEntries = new LinkedList<>();
 
-            HashSet<String> processedIds = new HashSet<String>();
+            HashSet<String> processedIds = new HashSet<>();
             for (JSONObject jsonToolList : jsonList) {
                 ToolInstallerList toolInstallerList = (ToolInstallerList) JSONObject.toBean(jsonToolList, ToolInstallerList.class);
                 for(ToolInstallerEntry entry : toolInstallerList.list) {

File: core/src/main/java/hudson/tools/InstallSourceProperty.java
Patch:
@@ -42,7 +42,7 @@
 public class InstallSourceProperty extends ToolProperty<ToolInstallation> {
     // TODO: get the proper Saveable
     public final DescribableList<ToolInstaller, Descriptor<ToolInstaller>> installers =
-            new DescribableList<ToolInstaller, Descriptor<ToolInstaller>>(Saveable.NOOP);
+            new DescribableList<>(Saveable.NOOP);
 
     @DataBoundConstructor
     public InstallSourceProperty(List<? extends ToolInstaller> installers) throws IOException {

File: core/src/main/java/hudson/tools/InstallerTranslator.java
Patch:
@@ -40,7 +40,7 @@
 @Extension
 public class InstallerTranslator extends ToolLocationTranslator {
 
-    private static final Map<Node,Map<ToolInstallation,Semaphore>> mutexByNode = new WeakHashMap<Node,Map<ToolInstallation,Semaphore>>();
+    private static final Map<Node,Map<ToolInstallation,Semaphore>> mutexByNode = new WeakHashMap<>();
 
     public String getToolHome(Node node, ToolInstallation tool, TaskListener log) throws IOException, InterruptedException {
         if (node.getRootPath() == null) {
@@ -52,15 +52,15 @@ public String getToolHome(Node node, ToolInstallation tool, TaskListener log) th
             return null;
         }
 
-        ArrayList<String> inapplicableInstallersMessages = new ArrayList<String>();
+        ArrayList<String> inapplicableInstallersMessages = new ArrayList<>();
 
         for (ToolInstaller installer : isp.installers) {
             if (installer.appliesTo(node)) {
                 Semaphore semaphore;
                 synchronized (mutexByNode) {
                     Map<ToolInstallation, Semaphore> mutexByTool = mutexByNode.get(node);
                     if (mutexByTool == null) {
-                        mutexByNode.put(node, mutexByTool = new WeakHashMap<ToolInstallation, Semaphore>());
+                        mutexByNode.put(node, mutexByTool = new WeakHashMap<>());
                     }
                     semaphore = mutexByTool.get(tool);
                     if (semaphore == null) {

File: core/src/main/java/hudson/tools/PropertyDescriptor.java
Patch:
@@ -50,7 +50,7 @@ public boolean isApplicable(Class<? extends T> targetType) {
     }
 
     public static <D extends PropertyDescriptor<?,T>,T> List<D> for_(List<D> all, Class<? extends T> target) {
-        List<D> result = new ArrayList<D>();
+        List<D> result = new ArrayList<>();
         for (D d : all)
             if (d.isApplicable(target))
                 result.add(d);

File: core/src/main/java/hudson/tools/ToolDescriptor.java
Patch:
@@ -136,7 +136,7 @@ public List<? extends ToolInstaller> getDefaultInstallers() {
      */
     public DescribableList<ToolProperty<?>,ToolPropertyDescriptor> getDefaultProperties() throws IOException {
         DescribableList<ToolProperty<?>,ToolPropertyDescriptor> r
-                = new DescribableList<ToolProperty<?>, ToolPropertyDescriptor>(NOOP);
+                = new DescribableList<>(NOOP);
 
         List<? extends ToolInstaller> installers = getDefaultInstallers();
         if(!installers.isEmpty())

File: core/src/main/java/hudson/tools/ToolInstallation.java
Patch:
@@ -84,7 +84,7 @@ public abstract class ToolInstallation extends AbstractDescribableImpl<ToolInsta
      */
     @XStreamSerializable
     private transient /*almost final*/ DescribableList<ToolProperty<?>,ToolPropertyDescriptor> properties
-            = new DescribableList<ToolProperty<?>,ToolPropertyDescriptor>(Saveable.NOOP);
+            = new DescribableList<>(Saveable.NOOP);
 
     /**
      * @deprecated
@@ -211,7 +211,7 @@ protected String translateFor(Node node, TaskListener log) throws IOException, I
      */
     protected Object readResolve() {
         if(properties==null)
-            properties = new DescribableList<ToolProperty<?>,ToolPropertyDescriptor>(Saveable.NOOP);
+            properties = new DescribableList<>(Saveable.NOOP);
         for (ToolProperty<?> p : properties)
             _setTool(p, this);
         return this;

File: core/src/main/java/hudson/tools/ToolInstallerDescriptor.java
Patch:
@@ -55,7 +55,7 @@ public static DescriptorExtensionList<ToolInstaller,ToolInstallerDescriptor<?>>
      * Filters {@link #all()} by eliminating things that are not applicable to the given type.
      */
     public static List<ToolInstallerDescriptor<?>> for_(Class<? extends ToolInstallation> type) {
-        List<ToolInstallerDescriptor<?>> r = new ArrayList<ToolInstallerDescriptor<?>>();
+        List<ToolInstallerDescriptor<?>> r = new ArrayList<>();
         for (ToolInstallerDescriptor<?> d : all())
             if(d.isApplicable(type))
                 r.add(d);

File: core/src/main/java/hudson/tools/ToolLocationNodeProperty.java
Patch:
@@ -57,7 +57,7 @@ public class ToolLocationNodeProperty extends NodeProperty<Node> {
     @DataBoundConstructor
     public ToolLocationNodeProperty(List<ToolLocation> locations) {
         if (locations == null) {
-            locations = new ArrayList<ToolLocation>();
+            locations = new ArrayList<>();
         }
         this.locations = locations;
     }

File: core/src/main/java/hudson/util/ArgumentListBuilder.java
Patch:
@@ -46,7 +46,7 @@
  * @author Kohsuke Kawaguchi
  */
 public class ArgumentListBuilder implements Serializable, Cloneable {
-    private final List<String> args = new ArrayList<String>();
+    private final List<String> args = new ArrayList<>();
     /**
      * Bit mask indicating arguments that shouldn't be echoed-back (e.g., password)
      */

File: core/src/main/java/hudson/util/BootFailure.java
Patch:
@@ -55,7 +55,7 @@ public void publish(ServletContext context, @CheckForNull File home) {
      * Parses the boot attempt file carefully so as not to cause the entire hook script to fail to execute.
      */
     protected List<Date> loadAttempts(File home) {
-        List<Date> dates = new ArrayList<Date>();
+        List<Date> dates = new ArrayList<>();
         if (home!=null) {
             File f = getBootFailureFile(home);
             try {

File: core/src/main/java/hudson/util/CharSpool.java
Patch:
@@ -57,7 +57,7 @@ private void renew() {
             return;
 
         if(buf==null)
-            buf = new LinkedList<char[]>();
+            buf = new LinkedList<>();
         buf.add(last);
         last = new char[1024];
         pos = 0;

File: core/src/main/java/hudson/util/ClasspathBuilder.java
Patch:
@@ -17,7 +17,7 @@
  * @since 1.300
  */
 public class ClasspathBuilder implements Serializable {
-    private final List<String> args = new ArrayList<String>();
+    private final List<String> args = new ArrayList<>();
 
     /**
      * Adds a single directory or a jar file.

File: core/src/main/java/hudson/util/CompressedFile.java
Patch:
@@ -166,7 +166,7 @@ public void run() {
      * this should be a fairly low-priority task.
      */
     private static final ExecutorService compressionThread = new ThreadPoolExecutor(
-        0, 1, 5L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),
+        0, 1, 5L, TimeUnit.SECONDS, new LinkedBlockingQueue<>(),
         new ExceptionCatchingThreadFactory(new NamingThreadFactory(new DaemonThreadFactory(), "CompressedFile")));
 
     private static final Logger LOGGER = Logger.getLogger(CompressedFile.class.getName());

File: core/src/main/java/hudson/util/DescribableList.java
Patch:
@@ -162,7 +162,7 @@ public Map<D,T> toMap() {
      *      Structured form data that includes the data for nested descriptor list.
      */
     public void rebuild(StaplerRequest req, JSONObject json, List<? extends Descriptor<T>> descriptors) throws FormException, IOException {
-        List<T> newList = new ArrayList<T>();
+        List<T> newList = new ArrayList<>();
 
         for (Descriptor<T> d : descriptors) {
             T existing = get((D)d);

File: core/src/main/java/hudson/util/DescriptorList.java
Patch:
@@ -82,7 +82,7 @@ public final class DescriptorList<T extends Describable<T>> extends AbstractList
     @Deprecated
     public DescriptorList(Descriptor<T>... descriptors) {
         this.type = null;
-        this.legacy = new CopyOnWriteArrayList<Descriptor<T>>(descriptors);
+        this.legacy = new CopyOnWriteArrayList<>(descriptors);
     }
 
     /**

File: core/src/main/java/hudson/util/FormValidation.java
Patch:
@@ -596,7 +596,7 @@ public CheckMethod(Descriptor descriptor, String fieldName) {
 
             method = ReflectionUtils.getPublicMethodNamed(descriptor.getClass(), "doCheck" + capitalizedFieldName);
             if(method !=null) {
-                names = new ArrayList<String>();
+                names = new ArrayList<>();
                 findParameters(method);
             } else {
                 names = null;

File: core/src/main/java/hudson/util/Iterators.java
Patch:
@@ -148,7 +148,7 @@ public void remove() {
      * Remove duplicates from another iterator.
      */
     public static final class DuplicateFilterIterator<T> extends FilterIterator<T> {
-        private final Set<T> seen = new HashSet<T>();
+        private final Set<T> seen = new HashSet<>();
 
         public DuplicateFilterIterator(Iterator<? extends T> core) {
             super(core);
@@ -336,7 +336,7 @@ protected Iterator<T> expand(Iterable<? extends T> iterable) {
      */
     public static <T> Iterator<T> removeDups(Iterator<T> iterator) {
         return new FilterIterator<T>(iterator) {
-            final Set<T> found = new HashSet<T>();
+            final Set<T> found = new HashSet<>();
             @Override
             protected boolean filter(T t) {
                 return found.add(t);

File: core/src/main/java/hudson/util/JVMBuilder.java
Patch:
@@ -41,7 +41,7 @@
  */
 public class JVMBuilder implements Serializable {
     private final ClasspathBuilder classpath = new ClasspathBuilder();
-    private final Map<String,String> systemProperties = new TreeMap<String,String>();
+    private final Map<String,String> systemProperties = new TreeMap<>();
     private final ArgumentListBuilder args = new ArgumentListBuilder();
     private final ArgumentListBuilder vmopts = new ArgumentListBuilder();
     private FilePath pwd;

File: core/src/main/java/hudson/util/KeyedDataStorage.java
Patch:
@@ -63,7 +63,7 @@ public abstract class KeyedDataStorage<T,P> {
      * If it's {@link Loading}, then that indicates the fingerprint is being loaded.
      * The thread can wait on this object to be notified when the loading completes.
      */
-    private final ConcurrentHashMap<String,Object> core = new ConcurrentHashMap<String,Object>();
+    private final ConcurrentHashMap<String,Object> core = new ConcurrentHashMap<>();
 
     /**
      * Used in {@link KeyedDataStorage#core} to indicate that the loading of a fingerprint
@@ -149,7 +149,7 @@ public synchronized void set(@CheckForNull T value) {
 
             // the fingerprint doesn't seem to be loaded thus far, so let's load it now.
             // the care needs to be taken that other threads might be trying to do the same.
-            Loading<T> l = new Loading<T>();
+            Loading<T> l = new Loading<>();
             if(value==null ? core.putIfAbsent(key,l)!=null : !core.replace(key,value,l)) {
                 // the value has changed since then. another thread is attempting to do the same.
                 // go back to square 1 and try it again.
@@ -175,7 +175,7 @@ public synchronized void set(@CheckForNull T value) {
 
             // the map needs to be updated to reflect the result of loading
             if(t!=null)
-                core.put(key,new SoftReference<T>(t));
+                core.put(key, new SoftReference<>(t));
             else
                 core.remove(key);
 

File: core/src/main/java/hudson/util/Memoizer.java
Patch:
@@ -38,7 +38,7 @@
  */
 @Deprecated
 public abstract class Memoizer<K,V> {
-    private final ConcurrentHashMap<K,V> store = new ConcurrentHashMap<K,V>();
+    private final ConcurrentHashMap<K,V> store = new ConcurrentHashMap<>();
 
     public V get(K key) {
         V v = store.get(key);

File: core/src/main/java/hudson/util/MultipartFormDataParser.java
Patch:
@@ -44,7 +44,7 @@
  */
 public class MultipartFormDataParser implements AutoCloseable {
     private final ServletFileUpload upload = new ServletFileUpload(new DiskFileItemFactory());
-    private final Map<String,FileItem> byName = new HashMap<String,FileItem>();
+    private final Map<String,FileItem> byName = new HashMap<>();
 
     public MultipartFormDataParser(HttpServletRequest request) throws ServletException {
         try {

File: core/src/main/java/hudson/util/PackedMap.java
Patch:
@@ -64,7 +64,7 @@ public final class PackedMap<K,V> extends AbstractMap<K,V> {
      *      Map to copy contents from. Iteration order is preserved.
      */
     public static <K,V> PackedMap<K,V> of(Map<? extends K,? extends V> src) {
-        return new PackedMap<K, V>(src);
+        return new PackedMap<>(src);
     }
 
     private PackedMap(Map<? extends K,? extends V> src) {

File: core/src/main/java/hudson/util/PersistedList.java
Patch:
@@ -48,7 +48,7 @@
  * @since 1.333
  */
 public class PersistedList<T> extends AbstractList<T> {
-    protected final CopyOnWriteList<T> data = new CopyOnWriteList<T>();
+    protected final CopyOnWriteList<T> data = new CopyOnWriteList<>();
     protected Saveable owner = Saveable.NOOP;
 
     protected PersistedList() {
@@ -100,7 +100,7 @@ public <U extends T> U get(Class<U> type) {
      * Gets all instances that matches the given type.
      */
     public <U extends T> List<U> getAll(Class<U> type) {
-        List<U> r = new ArrayList<U>();
+        List<U> r = new ArrayList<>();
         for (T t : data)
             if(type.isInstance(t))
                 r.add(type.cast(t));
@@ -131,7 +131,7 @@ public void remove(Class<? extends T> type) throws IOException {
      * as copy-on-write semantics make this rather slow.
      */
     public void replace(T from, T to) throws IOException {
-        List<T> copy = new ArrayList<T>(data.getView());
+        List<T> copy = new ArrayList<>(data.getView());
         for (int i=0; i<copy.size(); i++) {
             if (copy.get(i).equals(from))
                 copy.set(i,to);

File: core/src/main/java/hudson/util/PluginServletFilter.java
Patch:
@@ -60,7 +60,7 @@
  * @see SecurityRealm
  */
 public class PluginServletFilter implements Filter, ExtensionPoint {
-    private final List<Filter> list = new CopyOnWriteArrayList<Filter>();
+    private final List<Filter> list = new CopyOnWriteArrayList<>();
 
     private /*almost final*/ FilterConfig config;
 
@@ -69,7 +69,7 @@ public class PluginServletFilter implements Filter, ExtensionPoint {
      * starts functioning, when we are not sure which Jenkins instance a filter belongs to, put it here,
      * and let the first Jenkins instance take over.
      */
-    private static final List<Filter> LEGACY = new Vector<Filter>();
+    private static final List<Filter> LEGACY = new Vector<>();
 
     private static final String KEY = PluginServletFilter.class.getName();
 

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -99,7 +99,7 @@ public abstract class ProcessTree implements Iterable<OSProcess>, IProcessTree,
     /**
      * To be filled in the constructor of the derived type.
      */
-    protected final Map<Integer/*pid*/, OSProcess> processes = new HashMap<Integer, OSProcess>();
+    protected final Map<Integer/*pid*/, OSProcess> processes = new HashMap<>();
 
     /**
      * Lazily obtained {@link ProcessKiller}s to be applied on this process tree.

File: core/src/main/java/hudson/util/QueryParameterMap.java
Patch:
@@ -48,7 +48,7 @@
  * @since 1.394
  */
 public class QueryParameterMap {
-    private final Map<String,List<String>> store = new HashMap<String, List<String>>();
+    private final Map<String,List<String>> store = new HashMap<>();
 
     /**
      * @param queryString
@@ -63,7 +63,7 @@ public QueryParameterMap(String queryString) {
                 String value = URLDecoder.decode(kv[1], "UTF-8");
                 List<String> values = store.get(key);
                 if (values == null)
-                    store.put(key, values = new ArrayList<String>());
+                    store.put(key, values = new ArrayList<>());
                 values.add(value);
             }
         } catch (UnsupportedEncodingException e) {

File: core/src/main/java/hudson/util/RemotingDiagnostics.java
Patch:
@@ -75,7 +75,7 @@ public static Map<Object,Object> getSystemProperties(VirtualChannel channel) thr
 
     private static final class GetSystemProperties extends MasterToSlaveCallable<Map<Object,Object>,RuntimeException> {
         public Map<Object,Object> call() {
-            return new TreeMap<Object,Object>(System.getProperties());
+            return new TreeMap<>(System.getProperties());
         }
         private static final long serialVersionUID = 1L;
     }
@@ -88,13 +88,13 @@ public static Map<String,String> getThreadDump(VirtualChannel channel) throws IO
 
     public static Future<Map<String,String>> getThreadDumpAsync(VirtualChannel channel) throws IOException, InterruptedException {
         if(channel==null)
-            return new AsyncFutureImpl<Map<String, String>>(Collections.singletonMap("N/A","offline"));
+            return new AsyncFutureImpl<>(Collections.singletonMap("N/A", "offline"));
         return channel.callAsync(new GetThreadDump());
     }
 
     private static final class GetThreadDump extends MasterToSlaveCallable<Map<String,String>,RuntimeException> {
         public Map<String,String> call() {
-            Map<String,String> r = new LinkedHashMap<String,String>();
+            Map<String,String> r = new LinkedHashMap<>();
                 ThreadInfo[] data = Functions.getThreadInfos();
                 Functions.ThreadGroupMap map = Functions.sortThreadsAndGetGroupMap(data);
                 for (ThreadInfo ti : data)

File: core/src/main/java/hudson/util/RobustReflectionConverter.java
Patch:
@@ -84,7 +84,7 @@ the class name (which requires calling class.getName, which may not be cached, t
         with the fields as the keys.**/
     private final ReadWriteLock criticalFieldsLock = new ReentrantReadWriteLock();
     @GuardedBy("criticalFieldsLock")
-    private final Map<String, Set<String>> criticalFields = new HashMap<String, Set<String>>();
+    private final Map<String, Set<String>> criticalFields = new HashMap<>();
 
     public RobustReflectionConverter(Mapper mapper, ReflectionProvider reflectionProvider) {
         this(mapper, reflectionProvider, new XStream2().new PluginClassOwnership());
@@ -104,7 +104,7 @@ void addCriticalField(Class<?> clazz, String field) {
             // If the class already exists, then add a new field, otherwise
             // create the hash map field
             if (!criticalFields.containsKey(field)) {
-                criticalFields.put(field, new HashSet<String>());
+                criticalFields.put(field, new HashSet<>());
             }
             criticalFields.get(field).add(clazz.getName());
         }
@@ -376,7 +376,7 @@ public static void addErrorInContext(UnmarshallingContext context, Throwable e)
         LOGGER.log(FINE, "Failed to load", e);
         ArrayList<Throwable> list = (ArrayList<Throwable>)context.get("ReadError");
         if (list == null)
-            context.put("ReadError", list = new ArrayList<Throwable>());
+            context.put("ReadError", list = new ArrayList<>());
         list.add(e);
     }
 

File: core/src/main/java/hudson/util/SecretRewriter.java
Patch:
@@ -41,7 +41,7 @@ public class SecretRewriter {
      * Canonical paths of the directories we are recursing to protect
      * against symlink induced cycles.
      */
-    private Set<String> callstack = new HashSet<String>();
+    private Set<String> callstack = new HashSet<>();
 
     public SecretRewriter() throws GeneralSecurityException {
         cipher = Secret.getCipher("AES");

File: core/src/main/java/hudson/util/SequentialExecutionQueue.java
Patch:
@@ -25,13 +25,13 @@ public class SequentialExecutionQueue implements Executor {
     /**
      * Access is synchronized by {@code Queue.this}
      */
-    private final Map<Runnable,QueueEntry> entries = new HashMap<Runnable,QueueEntry>();
+    private final Map<Runnable,QueueEntry> entries = new HashMap<>();
     private ExecutorService executors;
 
     /**
      * {@link Runnable}s that are currently executing. Useful for trouble-shooting.
      */
-    private final Set<QueueEntry> inProgress = new HashSet<QueueEntry>();
+    private final Set<QueueEntry> inProgress = new HashSet<>();
 
     public SequentialExecutionQueue(ExecutorService executors) {
         this.executors = executors;
@@ -86,7 +86,7 @@ public synchronized boolean isStarving(long threshold) {
      * Gets {@link Runnable}s that are currently executed by a live thread.
      */
     public synchronized Set<Runnable> getInProgress() {
-        Set<Runnable> items = new HashSet<Runnable>();
+        Set<Runnable> items = new HashSet<>();
         for (QueueEntry entry : inProgress) {
             items.add(entry.item);
         }

File: core/src/main/java/hudson/util/Service.java
Patch:
@@ -46,7 +46,7 @@
 @Deprecated
 public class Service {
     public static <T> List<T> loadInstances(ClassLoader classLoader, Class<T> type) throws IOException {
-        List<T> result = new ArrayList<T>();
+        List<T> result = new ArrayList<>();
 
         final Enumeration<URL> e = classLoader.getResources("META-INF/services/"+type.getName());
         while (e.hasMoreElements()) {

File: core/src/main/java/hudson/util/TagCloud.java
Patch:
@@ -59,7 +59,7 @@ public interface WeightFunction<T> {
         float weight(T item);
     }
 
-    private final List<Entry> entries = new ArrayList<Entry>();
+    private final List<Entry> entries = new ArrayList<>();
     private float max = 1;
 
     /**

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -90,9 +90,9 @@ public class XStream2 extends XStream {
     private static final Logger LOGGER = Logger.getLogger(XStream2.class.getName());
 
     private RobustReflectionConverter reflectionConverter;
-    private final ThreadLocal<Boolean> oldData = new ThreadLocal<Boolean>();
+    private final ThreadLocal<Boolean> oldData = new ThreadLocal<>();
     private final @CheckForNull ClassOwnership classOwnership;
-    private final Map<String,Class<?>> compatibilityAliases = new ConcurrentHashMap<String, Class<?>>();
+    private final Map<String,Class<?>> compatibilityAliases = new ConcurrentHashMap<>();
 
     /**
      * Hook to insert {@link Mapper}s after they are created.
@@ -397,7 +397,7 @@ public Class realClass(String elementName) {
     private static final class AssociatedConverterImpl implements Converter {
         private final XStream xstream;
         private final ConcurrentHashMap<Class<?>,Converter> cache =
-                new ConcurrentHashMap<Class<?>,Converter>();
+                new ConcurrentHashMap<>();
 
         private AssociatedConverterImpl(XStream xstream) {
             this.xstream = xstream;

File: core/src/main/java/hudson/util/jna/RegistryKey.java
Patch:
@@ -187,7 +187,7 @@ public void delete() {
      */
     public Collection<String> getSubKeys() {
         WINBASE.FILETIME lpftLastWriteTime;
-        TreeSet<String> subKeys = new TreeSet<String>();
+        TreeSet<String> subKeys = new TreeSet<>();
         char[] lpName = new char[256];
         IntByReference lpcName = new IntByReference(256);
         lpftLastWriteTime = new WINBASE.FILETIME();
@@ -228,7 +228,7 @@ public TreeMap<String, Object> getValues() {
         byte[] lpData;
         IntByReference lpcchValueName, lpType, lpcbData;
         String name;
-        TreeMap<String, Object> values = new TreeMap<String, Object>(String.CASE_INSENSITIVE_ORDER);
+        TreeMap<String, Object> values = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
 
         lpValueName = new char[16384];
         lpcchValueName = new IntByReference(16384);

File: core/src/main/java/hudson/util/spring/BeanBuilder.java
Patch:
@@ -87,7 +87,7 @@ public class BeanBuilder extends GroovyObjectSupport {
     private static final String ANONYMOUS_BEAN = "bean";
     private RuntimeSpringConfiguration springConfig = new DefaultRuntimeSpringConfiguration();
     private BeanConfiguration currentBeanConfig;
-    private Map<String,DeferredProperty> deferredProperties = new HashMap<String,DeferredProperty>();
+    private Map<String,DeferredProperty> deferredProperties = new HashMap<>();
     private ApplicationContext parentCtx;
     private Map binding = new HashMap();
     private ClassLoader classLoader = null;
@@ -172,7 +172,7 @@ public BeanDefinition getBeanDefinition(String name) {
      */
     public Map<String,BeanDefinition> getBeanDefinitions() {
 
-        Map<String,BeanDefinition> beanDefinitions = new HashMap<String,BeanDefinition>();
+        Map<String,BeanDefinition> beanDefinitions = new HashMap<>();
         for (String beanName : getSpringConfig().getBeanNames()) {
             BeanDefinition bd = getSpringConfig()
                     .getBeanConfig(beanName)

File: core/src/main/java/hudson/util/spring/DefaultBeanConfiguration.java
Patch:
@@ -50,7 +50,7 @@ class DefaultBeanConfiguration extends GroovyObjectSupport implements BeanConfig
     private static final String PARENT = "parent";
     private static final String BY_TYPE = "byType";
     private static final String BY_CONSTRUCTOR = "constructor";
-    private static final Set<String> DYNAMIC_PROPS = new HashSet<String>(Arrays.asList(AUTOWIRE, CONSTRUCTOR_ARGS, DESTROY_METHOD, FACTORY_BEAN, FACTORY_METHOD, INIT_METHOD, BY_NAME, BY_TYPE, BY_CONSTRUCTOR));
+    private static final Set<String> DYNAMIC_PROPS = new HashSet<>(Arrays.asList(AUTOWIRE, CONSTRUCTOR_ARGS, DESTROY_METHOD, FACTORY_BEAN, FACTORY_METHOD, INIT_METHOD, BY_NAME, BY_TYPE, BY_CONSTRUCTOR));
     private String parentName;
 
     @Override

File: core/src/main/java/hudson/views/ListViewColumn.java
Patch:
@@ -96,7 +96,7 @@ public static DescriptorExtensionList<ListViewColumn, Descriptor<ListViewColumn>
      *      Use {@link #all()} for read access and {@link Extension} for registration.
      */
     @Deprecated
-    public static final DescriptorList<ListViewColumn> LIST = new DescriptorList<ListViewColumn>(ListViewColumn.class);
+    public static final DescriptorList<ListViewColumn> LIST = new DescriptorList<>(ListViewColumn.class);
 
     /**
      * Whether this column will be shown by default.
@@ -152,7 +152,7 @@ public static List<ListViewColumn> createDefaultInitialColumnList(View view) {
     private static List<ListViewColumn> createDefaultInitialColumnList(List<Descriptor<ListViewColumn>> descriptors) {
         // OK, set up default list of columns:
         // create all instances
-        ArrayList<ListViewColumn> r = new ArrayList<ListViewColumn>();
+        ArrayList<ListViewColumn> r = new ArrayList<>();
         final JSONObject emptyJSON = new JSONObject();
         for (Descriptor<ListViewColumn> d : descriptors)
             try {

File: core/src/main/java/hudson/views/ViewsTabBar.java
Patch:
@@ -84,7 +84,7 @@ public ViewsTabBarDescriptor getDescriptor() {
     @Restricted(NoExternalUse.class)
     @SuppressWarnings("unused") // invoked from stapler view
     public List<View> sort(@Nonnull List<? extends View> views) {
-        List<View> result = new ArrayList<View>(views);
+        List<View> result = new ArrayList<>(views);
         Collections.sort(result, new Comparator<View>() {
             @Override
             public int compare(View o1, View o2) {

File: core/src/main/java/hudson/widgets/BuildHistoryWidget.java
Patch:
@@ -60,7 +60,7 @@ public Item getQueuedItem() {
      * Returns the queue item if the owner is scheduled for execution in the queue, in REVERSE ORDER
      */
     public List<Item> getQueuedItems() {
-        LinkedList<Item> list = new LinkedList<Item>();
+        LinkedList<Item> list = new LinkedList<>();
         for (Item item : Jenkins.getInstance().getQueue().getItems()) {
             if (item.task == owner) {
                 list.addFirst(item);

File: core/src/main/java/hudson/widgets/RenderOnDemandClosure.java
Patch:
@@ -63,15 +63,15 @@ public class RenderOnDemandClosure {
     private final String[] adjuncts;
 
     public RenderOnDemandClosure(JellyContext context, String attributesToCapture) {
-        List<Script> bodyStack = new ArrayList<Script>();
+        List<Script> bodyStack = new ArrayList<>();
         for (JellyContext c = context; c!=null; c=c.getParent()) {
             Script script = (Script) c.getVariables().get("org.apache.commons.jelly.body");
             if(script!=null) bodyStack.add(script);
         }
         this.bodyStack = bodyStack.toArray(new Script[bodyStack.size()]);
         assert !bodyStack.isEmpty();    // there must be at least one, which is the direct child of <l:renderOnDemand>
 
-        Map<String,Object> variables = new HashMap<String, Object>();
+        Map<String,Object> variables = new HashMap<>();
         for (String v : Util.fixNull(attributesToCapture).split(","))
             variables.put(v.intern(),context.getVariable(v));
 

File: core/src/main/java/jenkins/FilePathFilterAggregator.java
Patch:
@@ -18,7 +18,7 @@
  * @since 1.587 / 1.580.1
  */
 class FilePathFilterAggregator extends FilePathFilter {
-    private final CopyOnWriteArrayList<Entry> all = new CopyOnWriteArrayList<Entry>();
+    private final CopyOnWriteArrayList<Entry> all = new CopyOnWriteArrayList<>();
 
     private class Entry implements Comparable<Entry> {
         final FilePathFilter filter;
@@ -139,7 +139,7 @@ public boolean stat(File f) throws SecurityException {
         return "FilePathFilterAggregator" + all;
     }
 
-    static final ChannelProperty<FilePathFilterAggregator> KEY = new ChannelProperty<FilePathFilterAggregator>(FilePathFilterAggregator.class, "FilePathFilters");
+    static final ChannelProperty<FilePathFilterAggregator> KEY = new ChannelProperty<>(FilePathFilterAggregator.class, "FilePathFilters");
 
     public static final int DEFAULT_ORDINAL = 0;
 }

File: core/src/main/java/jenkins/InitReactorRunner.java
Patch:
@@ -41,7 +41,7 @@ public void run(Reactor reactor) throws InterruptedException, ReactorException,
         ExecutorService es;
         if (Jenkins.PARALLEL_LOAD)
             es = new ThreadPoolExecutor(
-                TWICE_CPU_NUM, TWICE_CPU_NUM, 5L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new DaemonThreadFactory());
+                TWICE_CPU_NUM, TWICE_CPU_NUM, 5L, TimeUnit.SECONDS, new LinkedBlockingQueue<>(), new DaemonThreadFactory());
         else
             es = Executors.newSingleThreadExecutor(new NamingThreadFactory(new DaemonThreadFactory(), "InitReactorRunner"));
         try {

File: core/src/main/java/jenkins/diagnosis/HsErrPidList.java
Patch:
@@ -41,7 +41,7 @@ public class HsErrPidList extends AdministrativeMonitor {
     /**
      * hs_err_pid files that we think belong to us.
      */
-    /*package*/ final List<HsErrPidFile> files = new ArrayList<HsErrPidFile>();
+    /*package*/ final List<HsErrPidFile> files = new ArrayList<>();
 
     /**
      * Used to keep a marker file memory-mapped, so that we can find hs_err_pid files that belong to us.

File: core/src/main/java/jenkins/install/InstallUtil.java
Patch:
@@ -316,7 +316,7 @@ public static synchronized void persistInstallStatus(List<UpdateCenterJob> insta
 		return;
 	}
 	LOGGER.fine("Writing install state to: " + installingPluginsFile.getAbsolutePath());
-	Map<String,String> statuses = new HashMap<String,String>();
+	Map<String,String> statuses = new HashMap<>();
 	for(UpdateCenterJob j : installingPlugins) {
 		if(j instanceof InstallationJob && j.getCorrelationId() != null) { // only include install jobs with a correlation id (directly selected)
 			InstallationJob ij = (InstallationJob)j;

File: core/src/main/java/jenkins/management/AsynchronousAdministrativeMonitor.java
Patch:
@@ -47,7 +47,7 @@ public boolean isFixingActive() {
      * Used to URL-bind {@link AnnotatedLargeText}.
      */
     public AnnotatedLargeText getLogText() {
-        return new AnnotatedLargeText<AsynchronousAdministrativeMonitor>(
+        return new AnnotatedLargeText<>(
                 getLogFile(), Charset.defaultCharset(),
                 !isFixingActive(), this);
     }

File: core/src/main/java/jenkins/model/ArtifactManagerConfiguration.java
Patch:
@@ -45,7 +45,7 @@ public class ArtifactManagerConfiguration extends GlobalConfiguration implements
         return GlobalConfiguration.all().getInstance(ArtifactManagerConfiguration.class);
     }
 
-    private final DescribableList<ArtifactManagerFactory,ArtifactManagerFactoryDescriptor> artifactManagerFactories = new DescribableList<ArtifactManagerFactory,ArtifactManagerFactoryDescriptor>(this);
+    private final DescribableList<ArtifactManagerFactory,ArtifactManagerFactoryDescriptor> artifactManagerFactories = new DescribableList<>(this);
 
     private Object readResolve() {
         artifactManagerFactories.setOwner(this);

File: core/src/main/java/jenkins/model/ModelObjectWithContextMenu.java
Patch:
@@ -66,7 +66,7 @@ class ContextMenu implements HttpResponse {
          * The actual contents of the menu.
          */
         @Exported(inline=true)
-        public final List<MenuItem> items = new ArrayList<MenuItem>();
+        public final List<MenuItem> items = new ArrayList<>();
         
         public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object o) throws IOException, ServletException {
             rsp.serveExposedBean(req,this,Flavor.JSON);

File: core/src/main/java/jenkins/model/ParameterizedJobMixIn.java
Patch:
@@ -149,7 +149,7 @@ public final boolean scheduleBuild(int quietPeriod, Cause c) {
         if (!asJob().isBuildable())
             return null;
 
-        List<Action> queueActions = new ArrayList<Action>(actions);
+        List<Action> queueActions = new ArrayList<>(actions);
         if (isParameterized() && Util.filter(queueActions, ParametersAction.class).isEmpty()) {
             queueActions.add(new ParametersAction(getDefaultParametersValues()));
         }
@@ -158,7 +158,7 @@ public final boolean scheduleBuild(int quietPeriod, Cause c) {
 
     private List<ParameterValue> getDefaultParametersValues() {
         ParametersDefinitionProperty paramDefProp = asJob().getProperty(ParametersDefinitionProperty.class);
-        ArrayList<ParameterValue> defValues = new ArrayList<ParameterValue>();
+        ArrayList<ParameterValue> defValues = new ArrayList<>();
 
         /*
          * This check is made ONLY if someone will call this method even if isParametrized() is false.
@@ -285,7 +285,7 @@ public static CauseAction getBuildCause(ParameterizedJob job, StaplerRequest req
      * @see #getBuildNowText
      * @since 1.624
      */
-    public static final AlternativeUiTextProvider.Message<ParameterizedJob> BUILD_NOW_TEXT = new AlternativeUiTextProvider.Message<ParameterizedJob>();
+    public static final AlternativeUiTextProvider.Message<ParameterizedJob> BUILD_NOW_TEXT = new AlternativeUiTextProvider.Message<>();
 
     /**
      * Suggested implementation of {@link ParameterizedJob#getBuildNowText}.

File: core/src/main/java/jenkins/model/PeepholePermalink.java
Patch:
@@ -62,7 +62,7 @@
 public abstract class PeepholePermalink extends Permalink implements Predicate<Run<?,?>> {
 
     /** JENKINS-22822: avoids rereading symlinks */
-    static final Map<File,String> symlinks = new HashMap<File,String>();
+    static final Map<File,String> symlinks = new HashMap<>();
 
     /**
      * Checks if the given build satisfies the peep-hole criteria.

File: core/src/main/java/jenkins/model/item_category/Categories.java
Patch:
@@ -55,7 +55,7 @@ public class Categories implements HttpResponse, Serializable {
     private List<Category> items;
 
     public Categories() {
-        items = new ArrayList<Category>();
+        items = new ArrayList<>();
     }
 
     @Exported(name = "categories")

File: core/src/main/java/jenkins/model/lazy/LazyLoadRunMapEntrySet.java
Patch:
@@ -28,7 +28,7 @@ class LazyLoadRunMapEntrySet<R> extends AbstractSet<Entry<Integer,R>> {
 
     private synchronized Set<Entry<Integer,R>> all() {
         if (all==null)
-            all = new BuildReferenceMapAdapter<R>(owner,owner.all()).entrySet();
+            all = new BuildReferenceMapAdapter<>(owner, owner.all()).entrySet();
         return all;
     }
 
@@ -78,7 +78,7 @@ public Entry<Integer,R> next() {
             }
 
             private Entry<Integer, R> entryOf(R r) {
-                return new SimpleImmutableEntry<Integer, R>(owner.getNumberOf(r),r);
+                return new SimpleImmutableEntry<>(owner.getNumberOf(r), r);
             }
 
             public void remove() {

File: core/src/main/java/jenkins/model/lazy/SortedList.java
Patch:
@@ -38,7 +38,7 @@ class SortedList<T extends Comparable<T>> extends AbstractList<T> {
     private List<T> data;
 
     public SortedList(List<T> data) {
-        this.data = new ArrayList<T>(data);
+        this.data = new ArrayList<>(data);
         assert isSorted();
     }
 

File: core/src/main/java/jenkins/org/apache/commons/validator/routines/InetAddressValidator.java
Patch:
@@ -142,7 +142,7 @@ public boolean isValidInet6Address(String inet6Address) {
         }
         String[] octets = inet6Address.split(":");
         if (containsCompressedZeroes) {
-            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
+            List<String> octetList = new ArrayList<>(Arrays.asList(octets));
             if (inet6Address.endsWith("::")) {
                 // String.split() drops ending empty segments
                 octetList.add("");

File: core/src/main/java/jenkins/org/apache/commons/validator/routines/UrlValidator.java
Patch:
@@ -283,7 +283,7 @@ public UrlValidator(String[] schemes, RegexValidator authorityValidator, long op
             if (schemes == null) {
                 schemes = DEFAULT_SCHEMES;
             }
-            allowedSchemes = new HashSet<String>(schemes.length);
+            allowedSchemes = new HashSet<>(schemes.length);
             for (String scheme : schemes) {
                 allowedSchemes.add(scheme.toLowerCase(Locale.ENGLISH));
             }

File: core/src/main/java/jenkins/security/LastGrantedAuthoritiesProperty.java
Patch:
@@ -70,7 +70,7 @@ public GrantedAuthority[] getAuthorities() {
      * Persist the information with the new {@link UserDetails}.
      */
     public void update(@Nonnull Authentication auth) throws IOException {
-        List<String> roles = new ArrayList<String>();
+        List<String> roles = new ArrayList<>();
         for (GrantedAuthority ga : auth.getAuthorities()) {
             roles.add(ga.getAuthority());
         }

File: core/src/main/java/jenkins/security/QueueItemAuthenticatorConfiguration.java
Patch:
@@ -23,7 +23,7 @@
 @Extension @Symbol("queueItemAuthenticator")
 public class QueueItemAuthenticatorConfiguration extends GlobalConfiguration implements PersistentDescriptor {
     private final DescribableList<QueueItemAuthenticator,QueueItemAuthenticatorDescriptor> authenticators
-        = new DescribableList<QueueItemAuthenticator, QueueItemAuthenticatorDescriptor>(this);
+        = new DescribableList<>(this);
 
     private Object readResolve() {
         authenticators.setOwner(this);

File: core/src/main/java/jenkins/security/QueueItemAuthenticatorProvider.java
Patch:
@@ -41,7 +41,7 @@ public boolean hasNext() {
                 if (provider == null) {
                     continue;
                 }
-                delegate = new ArrayList<QueueItemAuthenticator>(provider.getAuthenticators()).iterator();
+                delegate = new ArrayList<>(provider.getAuthenticators()).iterator();
             }
             return delegate != null && delegate.hasNext();
         }

File: core/src/main/java/jenkins/security/SecurityListener.java
Patch:
@@ -93,7 +93,7 @@ protected void loggedOut(@Nonnull String username){}
     /** @since 1.569 */
     public static void fireAuthenticated(@Nonnull UserDetails details) {
         if (LOGGER.isLoggable(Level.FINE)) {
-            List<String> groups = new ArrayList<String>();
+            List<String> groups = new ArrayList<>();
             for (GrantedAuthority auth : details.getAuthorities()) {
                 if (!auth.equals(SecurityRealm.AUTHENTICATED_AUTHORITY)) {
                     groups.add(auth.getAuthority());

File: core/src/main/java/jenkins/security/UpdateSiteWarningsMonitor.java
Patch:
@@ -112,7 +112,7 @@ public Map<PluginWrapper, List<UpdateSite.Warning>> getActivePluginWarningsByPlu
             PluginWrapper plugin = Jenkins.getInstance().getPluginManager().getPlugin(pluginName);
 
             if (!activePluginWarningsByPlugin.containsKey(plugin)) {
-                activePluginWarningsByPlugin.put(plugin, new ArrayList<UpdateSite.Warning>());
+                activePluginWarningsByPlugin.put(plugin, new ArrayList<>());
             }
             activePluginWarningsByPlugin.get(plugin).add(warning);
         }

File: core/src/main/java/jenkins/security/s2m/CallableRejectionConfig.java
Patch:
@@ -27,7 +27,7 @@ public class CallableRejectionConfig extends ConfigFile<Class,Set<Class>> {
 
     @Override
     protected Set<Class> create() {
-        return new HashSet<Class>();
+        return new HashSet<>();
     }
 
     @Override
@@ -66,7 +66,7 @@ void report(Class c) {
      * Return the object that helps the UI rendering by providing the details.
      */
     public List<RejectedCallable> describe() {
-        List<RejectedCallable> l = new ArrayList<RejectedCallable>();
+        List<RejectedCallable> l = new ArrayList<>();
         for (Class c : get()) {
             if (!whitelist.contains(c.getName()))
                 l.add(new RejectedCallable(c));

File: core/src/main/java/jenkins/security/s2m/CallableWhitelistConfig.java
Patch:
@@ -20,7 +20,7 @@ class CallableWhitelistConfig extends ConfigDirectory<String,Set<String>> {
 
     @Override
     protected Set<String> create() {
-        return new HashSet<String>();
+        return new HashSet<>();
     }
 
     @Override

File: core/src/main/java/jenkins/security/s2m/FilePathRuleConfig.java
Patch:
@@ -26,7 +26,7 @@ class FilePathRuleConfig extends ConfigDirectory<FilePathRule,List<FilePathRule>
 
     @Override
     protected List<FilePathRule> create() {
-        return new ArrayList<FilePathRule>();
+        return new ArrayList<>();
     }
 
     @Override

File: core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java
Patch:
@@ -82,7 +82,7 @@ public abstract class SimpleBuildWrapper extends BuildWrapper {
      */
     public static final class Context {
         private Disposer disposer;
-        private final Map<String,String> env = new HashMap<String,String>();
+        private final Map<String,String> env = new HashMap<>();
         public @Nonnull Map<String,String> getEnv() {
             return env;
         }

File: core/src/main/java/jenkins/util/InterceptingExecutorService.java
Patch:
@@ -75,7 +75,7 @@ public void execute(Runnable command) {
     }
 
     private <T> Collection<Callable<T>> wrap(Collection<? extends Callable<T>> callables) {
-        List<Callable<T>> r = new ArrayList<Callable<T>>();
+        List<Callable<T>> r = new ArrayList<>();
         for (Callable<T> c : callables) {
             r.add(wrap(c));
         }

File: core/src/main/java/jenkins/util/JSONSignatureValidator.java
Patch:
@@ -65,7 +65,7 @@ public FormValidation verifySignature(JSONObject o) throws IOException {
             }
             o.remove("signature");
 
-            List<X509Certificate> certs = new ArrayList<X509Certificate>();
+            List<X509Certificate> certs = new ArrayList<>();
             {// load and verify certificates
                 CertificateFactory cf = CertificateFactory.getInstance("X509");
                 for (Object cert : signature.getJSONArray("certificates")) {
@@ -243,7 +243,7 @@ private boolean digestMatches(byte[] digest, String providedDigest) {
     protected Set<TrustAnchor> loadTrustAnchors(CertificateFactory cf) throws IOException {
         // if we trust default root CAs, we end up trusting anyone who has a valid certificate,
         // which isn't useful at all
-        Set<TrustAnchor> anchors = new HashSet<TrustAnchor>(); // CertificateUtil.getDefaultRootCAs();
+        Set<TrustAnchor> anchors = new HashSet<>(); // CertificateUtil.getDefaultRootCAs();
         Jenkins j = Jenkins.getInstance();
         for (String cert : (Set<String>) j.servletContext.getResourcePaths("/WEB-INF/update-center-rootCAs")) {
             if (cert.endsWith("/") || cert.endsWith(".txt"))  {

File: core/src/main/java/jenkins/util/ProgressiveRendering.java
Patch:
@@ -161,7 +161,7 @@ private void release() {
     private static RequestImpl createMockRequest() {
         RequestImpl currentRequest = (RequestImpl) Stapler.getCurrentRequest();
         HttpServletRequest original = (HttpServletRequest) currentRequest.getRequest();
-        final Map<String,Object> getters = new HashMap<String,Object>();
+        final Map<String,Object> getters = new HashMap<>();
         for (Method method : HttpServletRequest.class.getMethods()) {
             String m = method.getName();
             if ((m.startsWith("get") || m.startsWith("is")) && method.getParameterTypes().length == 0) {

File: core/src/main/java/jenkins/util/VirtualFile.java
Patch:
@@ -855,7 +855,7 @@ private static final class Scanner extends MasterToSlaveFileCallable<List<String
             if (includes.isEmpty()) { // see Glob class Javadoc, and list(String, String, boolean) note
                 return Collections.emptyList();
             }
-            final List<String> paths = new ArrayList<String>();
+            final List<String> paths = new ArrayList<>();
             new DirScanner.Glob(includes, excludes, useDefaultExcludes).scan(f, new FileVisitor() {
                 @Override
                 public void visit(File f, String relativePath) throws IOException {

File: core/src/main/java/jenkins/util/groovy/GroovyHookScript.java
Patch:
@@ -83,7 +83,7 @@ public void run() {
         Set<String> resources = servletContext.getResourcePaths("/WEB-INF/"+ hookGroovyD +"/");
         if (resources!=null) {
             // sort to execute them in a deterministic order
-            for (String res : new TreeSet<String>(resources)) {
+            for (String res : new TreeSet<>(resources)) {
                 try {
                     URL bundled = servletContext.getResource(res);
                     execute(bundled);

File: core/src/main/java/jenkins/util/xml/FilteredFunctionContext.java
Patch:
@@ -52,7 +52,7 @@ public class FilteredFunctionContext implements FunctionContext {
     /**
      * Default set of "bad" function names.
      */
-    private static final Set<String> DEFAULT_ILLEGAL_FUNCTIONS = Collections.unmodifiableSet(new HashSet<String>(
+    private static final Set<String> DEFAULT_ILLEGAL_FUNCTIONS = Collections.unmodifiableSet(new HashSet<>(
             Arrays.asList("document")
     ));
     private final FunctionContext base;

File: core/src/main/java/jenkins/util/xstream/XStreamDOM.java
Patch:
@@ -187,7 +187,7 @@ public XStreamDOM expandMacro(VariableResolver<String> vars) {
 
         List<XStreamDOM> newChildren = null;
         if (children!=null) {
-            newChildren = new ArrayList<XStreamDOM>(children.size());
+            newChildren = new ArrayList<>(children.size());
             for (XStreamDOM d : children)
                 newChildren.add(d.expandMacro(vars));
         }
@@ -274,7 +274,7 @@ public static XStreamDOM from(HierarchicalStreamReader in) {
     }
 
     public Map<String, String> getAttributeMap() {
-        Map<String,String> r = new HashMap<String, String>();
+        Map<String,String> r = new HashMap<>();
         for (int i=0; i<attributes.length; i+=2)
             r.put(attributes[i],attributes[i+1]);
         return r;
@@ -315,7 +315,7 @@ public String xpath() {
             }
         }
 
-        private final Stack<Pointer> pointers = new Stack<Pointer>();
+        private final Stack<Pointer> pointers = new Stack<>();
 
 
         public ReaderImpl(XStreamDOM current) {

File: core/src/main/java/jenkins/widgets/RunListProgressiveRendering.java
Patch:
@@ -47,7 +47,7 @@ public abstract class RunListProgressiveRendering extends ProgressiveRendering {
      * but then like Zeno’s paradox we will never seem to finish until we actually do.
      */
     private static final double MAX_LIKELY_RUNS = 20;
-    private final List<JSONObject> results = new ArrayList<JSONObject>();
+    private final List<JSONObject> results = new ArrayList<>();
     private Iterable<? extends Run<?,?>> builds;
 
     /** Jelly cannot call a constructor with arguments. */

File: core/src/main/java/hudson/EnvVars.java
Patch:
@@ -74,6 +74,7 @@
  * @author Kohsuke Kawaguchi
  */
 public class EnvVars extends TreeMap<String,String> {
+    private static final long serialVersionUID = 4320331661987259022L;
     private static Logger LOGGER = Logger.getLogger(EnvVars.class.getName());
     /**
      * If this {@link EnvVars} object represents the whole environment variable set,

File: core/src/main/java/hudson/EnvVars.java
Patch:
@@ -74,6 +74,7 @@
  * @author Kohsuke Kawaguchi
  */
 public class EnvVars extends TreeMap<String,String> {
+    private static final long serialVersionUID = 4320331661987259022L;
     private static Logger LOGGER = Logger.getLogger(EnvVars.class.getName());
     /**
      * If this {@link EnvVars} object represents the whole environment variable set,

File: core/src/main/java/hudson/slaves/AbstractCloudSlave.java
Patch:
@@ -67,7 +67,7 @@ public void terminate() throws InterruptedException, IOException {
             _terminate(new StreamTaskListener(System.out, Charset.defaultCharset()));
         } finally {
             try {
-                Jenkins.getInstance().removeNode(this);
+                Jenkins.get().removeNode(this);
             } catch (IOException e) {
                 LOGGER.log(Level.WARNING, "Failed to remove "+name,e);
             }

File: core/src/main/java/hudson/slaves/CloudRetentionStrategy.java
Patch:
@@ -57,9 +57,7 @@ public long check(final AbstractCloudComputer c) {
                 LOGGER.log(Level.INFO, "Disconnecting {0}", c.getName());
                 try {
                     computerNode.terminate();
-                } catch (InterruptedException e) {
-                    LOGGER.log(WARNING, "Failed to terminate " + c.getName(), e);
-                } catch (IOException e) {
+                } catch (InterruptedException | IOException e) {
                     LOGGER.log(WARNING, "Failed to terminate " + c.getName(), e);
                 }
             }

File: core/src/main/java/hudson/slaves/CloudSlaveRetentionStrategy.java
Patch:
@@ -47,7 +47,7 @@ public long check(T c) {
      * To actually deallocate the resource tied to this {@link Node}, implement {@link Computer#onRemoved()}.
      */
     protected void kill(Node n) throws IOException {
-        Jenkins.getInstance().removeNode(n);
+        Jenkins.get().removeNode(n);
     }
 
     /**

File: core/src/main/java/hudson/slaves/ComputerConnectorDescriptor.java
Patch:
@@ -12,7 +12,6 @@
  */
 public abstract class ComputerConnectorDescriptor extends Descriptor<ComputerConnector> {
     public static DescriptorExtensionList<ComputerConnector,ComputerConnectorDescriptor> all() {
-        return Jenkins.getInstance().<ComputerConnector,ComputerConnectorDescriptor>
-                                    getDescriptorList(ComputerConnector.class);
+        return Jenkins.get().getDescriptorList(ComputerConnector.class);
     }
 }

File: core/src/main/java/hudson/slaves/ComputerLauncher.java
Patch:
@@ -163,7 +163,7 @@ private StreamTaskListener cast(TaskListener listener) {
      *      {@link jenkins.model.Jenkins#getDescriptorList(Class)} for read access.
      */
     @Deprecated
-    public static final DescriptorList<ComputerLauncher> LIST = new DescriptorList<ComputerLauncher>(ComputerLauncher.class);
+    public static final DescriptorList<ComputerLauncher> LIST = new DescriptorList<>(ComputerLauncher.class);
 
     /**
      * Given the output of "java -version" in <code>r</code>, determine if this

File: core/src/main/java/hudson/slaves/ComputerRetentionWork.java
Patch:
@@ -46,7 +46,7 @@ public class ComputerRetentionWork extends PeriodicWork {
     /**
      * Use weak hash map to avoid leaking {@link Computer}.
      */
-    private final Map<Computer, Long> nextCheck = new WeakHashMap<Computer, Long>();
+    private final Map<Computer, Long> nextCheck = new WeakHashMap<>();
 
     public long getRecurrencePeriod() {
         return MIN;
@@ -59,7 +59,7 @@ public long getRecurrencePeriod() {
     @Override
     protected void doRun() {
         final long startRun = System.currentTimeMillis();
-        for (final Computer c : Jenkins.getInstance().getComputers()) {
+        for (final Computer c : Jenkins.get().getComputers()) {
             Queue.withLock(new Runnable() {
                 @Override
                 public void run() {

File: core/src/main/java/hudson/slaves/ConnectionActivityMonitor.java
Patch:
@@ -58,7 +58,7 @@ protected void execute(TaskListener listener) throws IOException, InterruptedExc
         if (!enabled)   return;
 
         long now = System.currentTimeMillis();
-        for (Computer c: Jenkins.getInstance().getComputers()) {
+        for (Computer c: Jenkins.get().getComputers()) {
             VirtualChannel ch = c.getChannel();
             if (ch instanceof Channel) {
                 Channel channel = (Channel) ch;

File: core/src/main/java/hudson/slaves/DelegatingComputerLauncher.java
Patch:
@@ -100,7 +100,7 @@ public List<Descriptor<ComputerLauncher>> applicableDescriptors(@CheckForNull Sl
         public List<Descriptor<ComputerLauncher>> getApplicableDescriptors() {
             List<Descriptor<ComputerLauncher>> r = new ArrayList<Descriptor<ComputerLauncher>>();
             for (Descriptor<ComputerLauncher> d :
-                    Jenkins.getInstance().<ComputerLauncher, Descriptor<ComputerLauncher>>getDescriptorList(ComputerLauncher.class)) {
+                    Jenkins.get().getDescriptorList(ComputerLauncher.class)) {
                 if (DelegatingComputerLauncher.class.isAssignableFrom(d.getKlass().toJavaClass()))  continue;
                 r.add(d);
             }

File: core/src/main/java/hudson/slaves/JNLPLauncher.java
Patch:
@@ -195,7 +195,7 @@ public boolean isWorkDirSupported() {
             // Causes JENKINS-45895 in the case of includes otherwise
             return DescriptorImpl.class.equals(getClass());
         }
-    };
+    }
 
     /**
      * Hides the JNLP launcher when the JNLP agent port is not enabled.
@@ -210,15 +210,15 @@ public static class DescriptorVisibilityFilterImpl extends DescriptorVisibilityF
          */
         @Override
         public boolean filter(@CheckForNull Object context, @Nonnull Descriptor descriptor) {
-            return descriptor.clazz != JNLPLauncher.class || Jenkins.getInstance().getTcpSlaveAgentListener() != null;
+            return descriptor.clazz != JNLPLauncher.class || Jenkins.get().getTcpSlaveAgentListener() != null;
         }
 
         /**
          * {@inheritDoc}
          */
         @Override
         public boolean filterType(@Nonnull Class<?> contextClass, @Nonnull Descriptor descriptor) {
-            return descriptor.clazz != JNLPLauncher.class || Jenkins.getInstance().getTcpSlaveAgentListener() != null;
+            return descriptor.clazz != JNLPLauncher.class || Jenkins.get().getTcpSlaveAgentListener() != null;
         }
     }
 

File: core/src/main/java/hudson/slaves/NodeDescriptor.java
Patch:
@@ -112,7 +112,7 @@ public FormValidation doCheckName(@QueryParameter String value ) {
      * Returns all the registered {@link NodeDescriptor} descriptors.
      */
     public static DescriptorExtensionList<Node,NodeDescriptor> all() {
-        return Jenkins.getInstance().<Node,NodeDescriptor>getDescriptorList(Node.class);
+        return Jenkins.get().getDescriptorList(Node.class);
     }
 
     /**
@@ -121,10 +121,10 @@ public static DescriptorExtensionList<Node,NodeDescriptor> all() {
      *      Use {@link #all()} for read access, and {@link Extension} for registration.
      */
     @Deprecated
-    public static final DescriptorList<Node> ALL = new DescriptorList<Node>(Node.class);
+    public static final DescriptorList<Node> ALL = new DescriptorList<>(Node.class);
 
     public static List<NodeDescriptor> allInstantiable() {
-        List<NodeDescriptor> r = new ArrayList<NodeDescriptor>();
+        List<NodeDescriptor> r = new ArrayList<>();
         for (NodeDescriptor d : all())
             if(d.isInstantiable())
                 r.add(d);

File: core/src/main/java/hudson/slaves/NodeList.java
Patch:
@@ -49,7 +49,7 @@
  */
 public final class NodeList extends ArrayList<Node> {
     
-    private Map<String,Node> map = new HashMap<String, Node>(); 
+    private Map<String,Node> map = new HashMap<>();
     
     public NodeList() {
     }

File: core/src/main/java/hudson/slaves/NodeProperty.java
Patch:
@@ -83,7 +83,7 @@ public abstract class NodeProperty<N extends Node> implements ReconfigurableDesc
     protected void setNode(N node) { this.node = node; }
 
     public NodePropertyDescriptor getDescriptor() {
-        return (NodePropertyDescriptor) Jenkins.getInstance().getDescriptorOrDie(getClass());
+        return (NodePropertyDescriptor) Jenkins.get().getDescriptorOrDie(getClass());
     }
 
     /**
@@ -178,7 +178,7 @@ public NodeProperty<?> reconfigure(StaplerRequest req, JSONObject form) throws F
      * Lists up all the registered {@link NodeDescriptor}s in the system.
      */
     public static DescriptorExtensionList<NodeProperty<?>,NodePropertyDescriptor> all() {
-        return (DescriptorExtensionList) Jenkins.getInstance().getDescriptorList(NodeProperty.class);
+        return (DescriptorExtensionList) Jenkins.get().getDescriptorList(NodeProperty.class);
     }
 
     /**

File: core/src/main/java/hudson/slaves/NodePropertyDescriptor.java
Patch:
@@ -55,6 +55,6 @@ public boolean isApplicableAsGlobal() {
         // preserve legacy behaviour, even if brain-dead stupid, where applying to Jenkins was the discriminator
         // note that it would be a mistake to assume Jenkins.getInstance().getClass() == Jenkins.class
         // the groovy code tested against app.class, so we replicate that exact logic.
-        return isApplicable(Jenkins.getInstance().getClass());
+        return isApplicable(Jenkins.get().getClass());
     }
 }

File: core/src/main/java/hudson/slaves/RetentionStrategy.java
Patch:
@@ -104,7 +104,7 @@ public void start(final @Nonnull T c) {
      * Returns all the registered {@link RetentionStrategy} descriptors.
      */
     public static DescriptorExtensionList<RetentionStrategy<?>,Descriptor<RetentionStrategy<?>>> all() {
-        return (DescriptorExtensionList) Jenkins.getInstance().getDescriptorList(RetentionStrategy.class);
+        return (DescriptorExtensionList) Jenkins.get().getDescriptorList(RetentionStrategy.class);
     }
 
     /**
@@ -216,8 +216,8 @@ public long getIdleDelay() {
         @GuardedBy("hudson.model.Queue.lock")
         public long check(final SlaveComputer c) {
             if (c.isOffline() && c.isLaunchSupported()) {
-                final HashMap<Computer, Integer> availableComputers = new HashMap<Computer, Integer>();
-                for (Computer o : Jenkins.getInstance().getComputers()) {
+                final HashMap<Computer, Integer> availableComputers = new HashMap<>();
+                for (Computer o : Jenkins.get().getComputers()) {
                     if ((o.isOnline() || o.isConnecting()) && o.isPartiallyIdle() && o.isAcceptingTasks()) {
                         final int idleExecutors = o.countIdle();
                         if (idleExecutors>0)

File: core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java
Patch:
@@ -56,7 +56,7 @@ public class DefaultJnlpSlaveReceiver extends JnlpAgentReceiver {
 
     @Override
     public boolean owns(String clientName) {
-        Computer computer = Jenkins.getInstance().getComputer(clientName);
+        Computer computer = Jenkins.get().getComputer(clientName);
         return computer != null;
     }
 
@@ -83,7 +83,7 @@ private static ComputerLauncher getDelegate(ComputerLauncher launcher) {
     @Override
     public void afterProperties(@NonNull JnlpConnectionState event) {
         String clientName = event.getProperty(JnlpConnectionState.CLIENT_NAME_KEY);
-        SlaveComputer computer = (SlaveComputer) Jenkins.getInstance().getComputer(clientName);
+        SlaveComputer computer = (SlaveComputer) Jenkins.get().getComputer(clientName);
         if (computer == null) {
             event.reject(new ConnectionRefusalException(String.format("%s is not a JNLP agent", clientName)));
             return;

File: core/src/main/java/jenkins/slaves/DeprecatedAgentProtocolMonitor.java
Patch:
@@ -60,7 +60,7 @@ public String getDisplayName() {
 
     @Override
     public boolean isActivated() {
-        final Set<String> agentProtocols = Jenkins.getInstance().getAgentProtocols();
+        final Set<String> agentProtocols = Jenkins.get().getAgentProtocols();
         for (String name : agentProtocols) {
             AgentProtocol pr = AgentProtocol.of(name);
             if (pr != null && pr.isDeprecated()) {
@@ -79,7 +79,7 @@ public String getDeprecatedProtocols() {
     @CheckForNull
     public static String getDeprecatedProtocolsString() {
         final List<String> deprecatedProtocols = new ArrayList<>();
-        final Set<String> agentProtocols = Jenkins.getInstance().getAgentProtocols();
+        final Set<String> agentProtocols = Jenkins.get().getAgentProtocols();
         for (String name : agentProtocols) {
             AgentProtocol pr = AgentProtocol.of(name);
             if (pr != null && pr.isDeprecated()) {

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java
Patch:
@@ -7,15 +7,12 @@
 import java.io.IOException;
 import java.net.Socket;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.logging.Logger;
-import javax.annotation.Nonnull;
 import javax.inject.Inject;
 import jenkins.AgentProtocol;
 import jenkins.model.Jenkins;
 import jenkins.security.HMACConfidentialKey;
 import org.jenkinsci.Symbol;
-import org.jenkinsci.remoting.engine.JnlpClientDatabase;
 import org.jenkinsci.remoting.engine.JnlpConnectionState;
 import org.jenkinsci.remoting.engine.JnlpProtocol1Handler;
 
@@ -104,4 +101,5 @@ public void handle(Socket socket) throws IOException, InterruptedException {
                 ExtensionList.lookup(JnlpAgentReceiver.class));
     }
 
+
 }

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java
Patch:
@@ -6,12 +6,9 @@
 import java.io.IOException;
 import java.net.Socket;
 import java.util.Collections;
-import java.util.HashMap;
-import javax.annotation.Nonnull;
 import javax.inject.Inject;
 import jenkins.AgentProtocol;
 import org.jenkinsci.Symbol;
-import org.jenkinsci.remoting.engine.JnlpClientDatabase;
 import org.jenkinsci.remoting.engine.JnlpConnectionState;
 import org.jenkinsci.remoting.engine.JnlpProtocol2Handler;
 

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol3.java
Patch:
@@ -8,14 +8,11 @@
 import java.io.IOException;
 import java.net.Socket;
 import java.util.Collections;
-import java.util.HashMap;
-import javax.annotation.Nonnull;
 import javax.inject.Inject;
 import jenkins.AgentProtocol;
 import jenkins.model.Jenkins;
 import jenkins.util.SystemProperties;
 import org.jenkinsci.Symbol;
-import org.jenkinsci.remoting.engine.JnlpClientDatabase;
 import org.jenkinsci.remoting.engine.JnlpConnectionState;
 import org.jenkinsci.remoting.engine.JnlpProtocol3Handler;
 import org.kohsuke.accmod.Restricted;

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol4.java
Patch:
@@ -37,8 +37,6 @@
 import java.security.cert.X509Certificate;
 import java.security.interfaces.RSAPrivateKey;
 import java.util.Collections;
-import java.util.HashMap;
-import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: core/src/main/java/jenkins/slaves/PingFailureAnalyzer.java
Patch:
@@ -28,6 +28,6 @@ public abstract class PingFailureAnalyzer implements ExtensionPoint {
     public abstract void onPingFailure(Channel c, Throwable cause) throws IOException;
 
     public static ExtensionList<PingFailureAnalyzer> all() {
-        return Jenkins.getInstance().getExtensionList(PingFailureAnalyzer.class);
+        return Jenkins.get().getExtensionList(PingFailureAnalyzer.class);
     }
 }

File: core/src/main/java/jenkins/slaves/RemotingWorkDirSettings.java
Patch:
@@ -124,7 +124,7 @@ public String getInternalDir() {
 
     @Override
     public Descriptor<RemotingWorkDirSettings> getDescriptor() {
-        return Jenkins.getInstance().getDescriptor(RemotingWorkDirSettings.class);
+        return Jenkins.get().getDescriptor(RemotingWorkDirSettings.class);
     }
 
     /**
@@ -152,7 +152,7 @@ public List<String> toCommandLineArgs(@Nonnull SlaveComputer computer) {
         
         if (!DEFAULT_INTERNAL_DIR.equals(internalDir)) {
             args.add("-internalDir");
-            args.add(internalDir);;
+            args.add(internalDir);
         }
         
         if (failIfWorkDirIsMissing) {

File: core/src/main/java/jenkins/slaves/restarter/JnlpSlaveRestarterInstaller.java
Patch:
@@ -53,7 +53,7 @@ public Void call() throws Exception {
 
     private static void install(Computer c, TaskListener listener) {
         try {
-            final List<SlaveRestarter> restarters = new ArrayList<SlaveRestarter>(SlaveRestarter.all());
+            final List<SlaveRestarter> restarters = new ArrayList<>(SlaveRestarter.all());
 
             VirtualChannel ch = c.getChannel();
             if (ch==null) return;  // defensive check

File: test/src/test/java/jenkins/security/Security218Test.java
Patch:
@@ -67,7 +67,7 @@ public void jnlpSlave() throws Exception {
     }
 
     /**
-     * The attack scenario here is that a master sends a normal command to an agent and a slave
+     * The attack scenario here is that a master sends a normal command to an agent and
      * inserts a malicious response.
      */
     @SuppressWarnings("ConstantConditions")

File: core/src/main/java/hudson/node_monitors/AbstractDiskSpaceMonitor.java
Patch:
@@ -47,7 +47,7 @@ public Object data(Computer c) {
         if(size!=null && size.size > getThresholdBytes() && c.isOffline() && c.getOfflineCause() instanceof DiskSpace)
             if(this.getClass().equals(((DiskSpace)c.getOfflineCause()).getTrigger()))
                 if(getDescriptor().markOnline(c)) {
-                    LOGGER.warning(Messages.DiskSpaceMonitor_MarkedOnline(c.getName()));
+                    LOGGER.info(Messages.DiskSpaceMonitor_MarkedOnline(c.getName()));
                 }
         return size;
     }

File: core/src/test/java/hudson/RemoveWindowsDirectoryJunctionTest.java
Patch:
@@ -34,7 +34,7 @@ public void testJunctionIsRemovedButNotContents() throws Exception {
         File subdir1 = tmp.newFolder("notJunction");
         File f1 = new File(subdir1, "testfile1.txt");
         assertTrue("Unable to create temporary file in notJunction directory", f1.createNewFile());
-        File j1 = WindowsUtil.createJunction(tmp.getRoot(), subdir1);
+        File j1 = WindowsUtil.createJunction(new File(tmp.getRoot(), "test junction"), subdir1);
         Util.deleteRecursive(j1);
         assertFalse("Windows Junction should have been removed", j1.exists());
         assertTrue("Contents of Windows Junction should not be removed", f1.exists());

File: core/src/test/java/hudson/RemoveWindowsDirectoryJunctionTest.java
Patch:
@@ -13,11 +13,8 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
-import org.jvnet.hudson.test.For;
 import org.jvnet.hudson.test.Issue;
 
-@For(Util.class)
-// https://superuser.com/q/343074
 public class RemoveWindowsDirectoryJunctionTest {
     @Rule
     public TemporaryFolder tmp = new TemporaryFolder();

File: core/src/test/java/hudson/RemoveWindowsDirectoryJunctionTest.java
Patch:
@@ -13,11 +13,8 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
-import org.jvnet.hudson.test.For;
 import org.jvnet.hudson.test.Issue;
 
-@For(Util.class)
-// https://superuser.com/q/343074
 public class RemoveWindowsDirectoryJunctionTest {
     @Rule
     public TemporaryFolder tmp = new TemporaryFolder();

File: core/src/main/java/hudson/Util.java
Patch:
@@ -1303,7 +1303,7 @@ public static String resolveSymlink(@Nonnull File link) throws IOException {
      * Escapes a Windows cmd argument. Cmd supports escaping characters with carats which simplifies nested escapes.
      * @param arg argument to escape
      * @return the quoted argument for use in cmd.exe
-     * @see <a href="https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/>Everyone quotes command line arguments the wrong way</a>
+     * @see <a href="https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way">Everyone quotes command line arguments the wrong way</a>
      */
     @VisibleForTesting
     static String escapeCmdArgument(String arg) {

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -1180,7 +1180,7 @@ public VersionNumber getNeededDependenciesMinimumJavaVersion() {
         }
 
         private void logBadMinJavaVersion(String minimumJavaVersion) {
-            LOGGER.log(Level.WARNING, "'minimumJavaVersion' was specified for plugin ''{0}'' but unparseable (received {1})",
+            LOGGER.log(Level.WARNING, "minimumJavaVersion was specified for plugin {0} but unparseable (received {1})",
                        new String[]{this.name, minimumJavaVersion});
         }
 

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -1207,9 +1207,9 @@ public boolean isNeededDependenciesForNewerJenkins(PluginManager.MetadataCache c
         }
 
         /**
-         * Returns true iff this plugin or any of its dependencies require a newer Java than Jenkins is running on.
+         * Returns true iff any of it the plugin dependencies require a newer Java than Jenkins is running on.
          *
-         * @return true iff this plugin or any of its dependencies require a newer Java than Jenkins is running on.
+         * @return true iff any of it the plugin dependencies require a newer Java than Jenkins is running on.
          *
          * @since TODO
          */

File: core/src/test/java/hudson/RemoveWindowsDirectoryJunctionTest.java
Patch:
@@ -13,8 +13,11 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
+import org.jvnet.hudson.test.For;
 import org.jvnet.hudson.test.Issue;
 
+@For(Util.class)
+// https://superuser.com/q/343074
 public class RemoveWindowsDirectoryJunctionTest {
     @Rule
     public TemporaryFolder tmp = new TemporaryFolder();

File: core/src/main/java/jenkins/util/io/PathRemover.java
Patch:
@@ -197,7 +197,7 @@ private static Optional<IOException> tryRemoveFile(@Nonnull Path path) {
     }
 
     private static List<IOException> tryRemoveRecursive(@Nonnull Path path) {
-        List<IOException> accumulatedErrors = Files.isSymbolicLink(path) ? new ArrayList<>() :
+        List<IOException> accumulatedErrors = Util.isSymlink(path) ? new ArrayList<>() :
                 tryRemoveDirectoryContents(path);
         tryRemoveFile(path).ifPresent(accumulatedErrors::add);
         return accumulatedErrors;

File: core/src/main/java/jenkins/util/io/PathRemover.java
Patch:
@@ -189,7 +189,7 @@ public String failureMessage(@Nonnull Path fileToRemove, int retryCount) {
     
     private static Optional<IOException> tryRemoveFile(@Nonnull Path path) {
         try {
-            removeOrMakeRemovableThenMove(path);
+            removeOrMakeRemovableThenRemove(path);
             return Optional.empty();
         } catch (IOException e) {
             return Optional.of(e);
@@ -216,7 +216,7 @@ private static List<IOException> tryRemoveDirectoryContents(@Nonnull Path path)
         return accumulatedErrors;
     }
 
-    private static void removeOrMakeRemovableThenMove(@Nonnull Path path) throws IOException {
+    private static void removeOrMakeRemovableThenRemove(@Nonnull Path path) throws IOException {
         try {
             Files.deleteIfExists(path);
         } catch (IOException e) {

File: core/src/main/java/jenkins/util/io/PathRemover.java
Patch:
@@ -155,7 +155,7 @@ public String failureMessage(@Nonnull Path fileToRemove, int retryCount) {
             sb.append("Unable to delete '");
             sb.append(fileToRemove);
             sb.append("'. Tried ");
-            sb.append(retryCount);
+            sb.append(retryCount + 1);
             sb.append(" time");
             if (retryCount != 1) sb.append('s');
             if (maxRetries > 0) {

File: core/src/main/java/jenkins/util/io/PathRemover.java
Patch:
@@ -138,7 +138,7 @@ private void gcIfEnabled() {
         public boolean shouldRetry(int retriesAttempted) {
             if (retriesAttempted >= maxRetries) return false;
             gcIfEnabled();
-            long delayMillis = waitBetweenRetries >= 0 ? waitBetweenRetries : -retriesAttempted * waitBetweenRetries;
+            long delayMillis = waitBetweenRetries >= 0 ? waitBetweenRetries : -(retriesAttempted + 1) * waitBetweenRetries;
             if (delayMillis <= 0) return !Thread.interrupted();
             try {
                 Thread.sleep(delayMillis);

File: core/src/main/java/hudson/TcpSlaveAgentListener.java
Patch:
@@ -415,7 +415,9 @@ public boolean connect(Socket socket) throws IOException {
                             LOGGER.log(Level.FINE, "Expected ping response from {0} of {1} got {2}", new Object[]{
                                     socket.getRemoteSocketAddress(),
                                     new String(ping, "UTF-8"),
-                                    new String(response, 0, responseLength, "UTF-8")
+                                    responseLength > 0 && responseLength <= response.length ?
+                                        new String(response, 0, responseLength, "UTF-8") :
+                                        "bad response length " + responseLength
                             });
                             return false;
                         }

File: test/src/test/java/hudson/cli/DisablePluginCommandTest.java
Patch:
@@ -45,6 +45,7 @@
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.notNullValue;
 import static org.junit.Assert.*;
+import org.junit.Ignore;
 
 public class DisablePluginCommandTest {
 
@@ -128,6 +129,7 @@ public void canDisableDependentPluginsRightOrderStrategyNone() {
     /**
      * Can disable a plugin without dependents plugins and Jenkins restart after it if -restart argument is passed.
      */
+    @Ignore("TODO calling restart seems to break Surefire")
     @Test
     @Issue("JENKINS-27177")
     @WithPlugin("dependee-0.0.2.hpi")
@@ -180,6 +182,7 @@ public void disableAlreadyDisabledPluginNotRestart() throws IOException {
     /**
      * If some plugins are disabled, Jenkins will restart even though the status code isn't 0 (is 16).
      */
+    @Ignore("TODO calling restart seems to break Surefire")
     @Test
     @Issue("JENKINS-27177")
     @WithPlugin({"variant.hpi", "depender-0.0.2.hpi", "mandatory-depender-0.0.2.hpi", "plugin-first.hpi", "dependee-0.0.2.hpi", })

File: test/src/test/java/hudson/cli/EnablePluginCommandTest.java
Patch:
@@ -38,6 +38,7 @@
 import static hudson.cli.CLICommandInvoker.Matcher.succeeded;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
+import org.junit.Ignore;
 
 public class EnablePluginCommandTest {
 
@@ -119,6 +120,7 @@ public void enableDependerEnablesDependee() throws IOException {
         assertJenkinsNotInQuietMode();
     }
 
+    @Ignore("TODO calling restart seems to break Surefire")
     @Test
     @Issue("JENKINS-52950")
     public void enablePluginWithRestart() throws IOException {

File: test/src/test/java/jenkins/model/JenkinsBuildsAndWorkspacesDirectoriesTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.jvnet.hudson.test.ExtractResourceSCM;
 import org.jvnet.hudson.test.Issue;
@@ -204,6 +205,7 @@ public void workspacesDir() throws Exception {
         );
     }
 
+    @Ignore("TODO calling restart seems to break Surefire")
     @Issue("JENKINS-50164")
     @LocalData
     @Test
@@ -359,4 +361,4 @@ private File resolveAll(File link) throws InterruptedException, IOException {
             link = f;
         }
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/hudson/TcpSlaveAgentListener.java
Patch:
@@ -415,7 +415,9 @@ public boolean connect(Socket socket) throws IOException {
                             LOGGER.log(Level.FINE, "Expected ping response from {0} of {1} got {2}", new Object[]{
                                     socket.getRemoteSocketAddress(),
                                     new String(ping, "UTF-8"),
-                                    new String(response, 0, responseLength, "UTF-8")
+                                    responseLength > 0 && responseLength <= response.length ?
+                                        new String(response, 0, responseLength, "UTF-8") :
+                                        "bad response length " + responseLength
                             });
                             return false;
                         }

File: test/src/test/java/jenkins/model/JenkinsBuildsAndWorkspacesDirectoriesTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.jvnet.hudson.test.ExtractResourceSCM;
 import org.jvnet.hudson.test.Issue;
@@ -204,6 +205,7 @@ public void workspacesDir() throws Exception {
         );
     }
 
+    @Ignore("TODO calling restart seems to break Surefire")
     @Issue("JENKINS-50164")
     @LocalData
     @Test
@@ -359,4 +361,4 @@ private File resolveAll(File link) throws InterruptedException, IOException {
             link = f;
         }
     }
-}
\ No newline at end of file
+}

File: core/src/test/java/hudson/UtilTest.java
Patch:
@@ -354,7 +354,6 @@ public void testDeleteContentsRecursive() throws Exception {
 
     @Ignore("TODO often fails in CI")
     @Test
-    @Ignore("Frequently flaky test")
     public void testDeleteContentsRecursive_onWindows() throws Exception {
         Assume.assumeTrue(Functions.isWindows());
         final File dir = tmp.newFolder();

File: core/src/test/java/hudson/FilePathSEC904Test.java
Patch:
@@ -36,15 +36,13 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assume.assumeTrue;
-import org.junit.Ignore;
 
 //TODO to be merged back in FilePathTest after security release
 public class FilePathSEC904Test {
     
     @Rule
     public TemporaryFolder temp = new TemporaryFolder();
 
-    @Ignore("./../workspace fails on CI")
     @Test
     @Issue("SECURITY-904")
     public void isDescendant_regularFiles() throws IOException, InterruptedException {

File: core/src/main/java/hudson/slaves/JNLPLauncher.java
Patch:
@@ -34,6 +34,7 @@
 
 import jenkins.model.Jenkins;
 import jenkins.slaves.RemotingWorkDirSettings;
+import jenkins.util.java.JavaUtils;
 import org.jenkinsci.Symbol;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
@@ -234,6 +235,6 @@ public boolean filterType(@Nonnull Class<?> contextClass, @Nonnull Descriptor de
      */
     @Restricted(NoExternalUse.class) // Jelly use
     public boolean isJavaWebStartSupported() {
-        return System.getProperty("java.version", "1.8").startsWith("1.8");
+        return JavaUtils.isRunningWithJava8OrBelow();
     }
 }

File: test/src/test/java/hudson/tasks/MavenTest.java
Patch:
@@ -270,7 +270,7 @@ public void parametersReferencedFromPropertiesShouldRetainBackslashes() throws E
     @Test public void testNullHome() {
         EnvVars env = new EnvVars();
         new MavenInstallation("_", "", Collections.<ToolProperty<?>>emptyList()).buildEnvVars(env);
-        assertEquals("{}", env.toString());
+	assertTrue(env.isEmpty());
     }
 
     @Issue("JENKINS-26684")

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -220,7 +220,7 @@ public class UpdateCenter extends AbstractModelObject implements Saveable, OnMas
             UPDATE_CENTER_URL = "https://updates.jenkins.io/";
         } else {
             //TODO: Rollback the default for Java 11 when it goes to GA
-            String experimentalJava11UC = "https://updates.jenkins.io/temporary-experimental-java11";
+            String experimentalJava11UC = "https://updates.jenkins.io/temporary-experimental-java11/";
             logger.log(Level.WARNING, "Running Jenkins with Java {0} which is available in the preview mode only. " +
                     "A custom experimental update center will be used: {1}",
                     new Object[] {System.getProperty("java.specification.version"), experimentalJava11UC});

File: core/src/main/java/hudson/slaves/JNLPLauncher.java
Patch:
@@ -235,6 +235,6 @@ public boolean filterType(@Nonnull Class<?> contextClass, @Nonnull Descriptor de
      */
     @Restricted(NoExternalUse.class) // Jelly use
     public boolean isJavaWebStartSupported() {
-        return !JavaUtils.isRunningWithPostJava8();
+        return JavaUtils.isRunningWithJava8OrBelow();
     }
 }

File: core/src/test/java/hudson/UtilTest.java
Patch:
@@ -57,6 +57,7 @@
 import org.hamcrest.BaseMatcher;
 import org.hamcrest.Description;
 import org.junit.Assume;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.jvnet.hudson.test.Issue;
 
@@ -406,6 +407,7 @@ public void testDeleteRecursive() throws Exception {
         assertFalse("dir exists", dir.exists());
     }
 
+    @Ignore("JENKINS-55016")
     @Test
     public void testDeleteRecursive_onWindows() throws Exception {
         Assume.assumeTrue(Functions.isWindows());

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -194,7 +194,7 @@ public abstract class PluginManager extends AbstractModelObject implements OnMas
         try {
             // Secure initialization
             CHECK_UPDATE_SLEEP_TIME_MILLIS = SystemProperties.getInteger(PluginManager.class.getName() + ".checkUpdateSleepTimeMillis", 1000);
-            CHECK_UPDATE_ATTEMPTS = SystemProperties.getInteger(PluginManager.class.getName() + ".CHECK_UPDATE_ATTEMPTS", 1);
+            CHECK_UPDATE_ATTEMPTS = SystemProperties.getInteger(PluginManager.class.getName() + ".checkUpdateAttempts", 1);
         } catch(Exception e) {
             LOGGER.warning(String.format("There was an error initializing the PluginManager. Exception: %s", e));
         } finally {

File: core/src/test/java/hudson/util/RetrierTest.java
Patch:
@@ -97,7 +97,7 @@ public void sleepWorksTest() throws Exception {
         long timeElapsed = Duration.between(start, finish).toMillis();
 
         // Check delay works
-        Assert.assertTrue(timeElapsed > SLEEP);
+        Assert.assertTrue(timeElapsed >= SLEEP);
 
         // Check result is true
         Assert.assertTrue(finalResult == null ? false : finalResult);

File: core/src/test/java/hudson/util/RetrierTest.java
Patch:
@@ -97,7 +97,7 @@ public void sleepWorksTest() throws Exception {
         long timeElapsed = Duration.between(start, finish).toMillis();
 
         // Check delay works
-        Assert.assertTrue(timeElapsed > SLEEP);
+        Assert.assertTrue(timeElapsed >= SLEEP);
 
         // Check result is true
         Assert.assertTrue(finalResult == null ? false : finalResult);

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -194,7 +194,7 @@ public abstract class PluginManager extends AbstractModelObject implements OnMas
         try {
             // Secure initialization
             CHECK_UPDATE_SLEEP_TIME_MILLIS = SystemProperties.getInteger(PluginManager.class.getName() + ".checkUpdateSleepTimeMillis", 1000);
-            CHECK_UPDATE_ATTEMPTS = SystemProperties.getInteger(PluginManager.class.getName() + ".CHECK_UPDATE_ATTEMPTS", 1);
+            CHECK_UPDATE_ATTEMPTS = SystemProperties.getInteger(PluginManager.class.getName() + ".checkUpdateAttempts", 1);
         } catch(Exception e) {
             LOGGER.warning(String.format("There was an error initializing the PluginManager. Exception: %s", e));
         } finally {

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -1813,7 +1813,7 @@ public List<Future<UpdateCenter.UpdateCenterJob>> prevalidateConfig(InputStream
         for (Map.Entry<String,VersionNumber> requestedPlugin : parseRequestedPlugins(configXml).entrySet()) {
             PluginWrapper pw = getPlugin(requestedPlugin.getKey());
             if (pw == null) { // install new
-                UpdateSite.Plugin toInstall = uc.getPlugin(requestedPlugin.getKey());
+                UpdateSite.Plugin toInstall = uc.getPlugin(requestedPlugin.getKey(), requestedPlugin.getValue());
                 if (toInstall == null) {
                     LOGGER.log(WARNING, "No such plugin {0} to install", requestedPlugin.getKey());
                     continue;
@@ -1826,7 +1826,7 @@ public List<Future<UpdateCenter.UpdateCenterJob>> prevalidateConfig(InputStream
                 }
                 jobs.add(toInstall.deploy(true));
             } else if (pw.isOlderThan(requestedPlugin.getValue())) { // upgrade
-                UpdateSite.Plugin toInstall = uc.getPlugin(requestedPlugin.getKey());
+                UpdateSite.Plugin toInstall = uc.getPlugin(requestedPlugin.getKey(), requestedPlugin.getValue());
                 if (toInstall == null) {
                     LOGGER.log(WARNING, "No such plugin {0} to upgrade", requestedPlugin.getKey());
                     continue;

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -832,7 +832,7 @@ static boolean isSnapshot(@Nonnull String version) {
      */
     public UpdateSite.Plugin getUpdateInfo() {
         UpdateCenter uc = Jenkins.getInstance().getUpdateCenter();
-        UpdateSite.Plugin p = uc.getPlugin(getShortName());
+        UpdateSite.Plugin p = uc.getPlugin(getShortName(), getVersionNumber());
         if(p!=null && p.isNewerThan(getVersion())) return p;
         return null;
     }
@@ -842,6 +842,8 @@ public UpdateSite.Plugin getUpdateInfo() {
      */
     public UpdateSite.Plugin getInfo() {
         UpdateCenter uc = Jenkins.getInstance().getUpdateCenter();
+        UpdateSite.Plugin p = uc.getPlugin(getShortName(), getVersionNumber());
+        if (p != null) return p;
         return uc.getPlugin(getShortName());
     }
 

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -1066,7 +1066,7 @@ public List<Plugin> getNeededDependencies() {
             List<Plugin> deps = new ArrayList<Plugin>();
 
             for(Map.Entry<String,String> e : dependencies.entrySet()) {
-                VersionNumber requiredVersion = new VersionNumber(e.getValue());
+                VersionNumber requiredVersion = e.getValue() != null ? new VersionNumber(e.getValue()) : null;
                 Plugin depPlugin = Jenkins.getInstance().getUpdateCenter().getPlugin(e.getKey(), requiredVersion);
                 if (depPlugin == null) {
                     LOGGER.log(Level.WARNING, "Could not find dependency {0} of {1}", new Object[] {e.getKey(), name});

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -578,7 +578,7 @@ public FilePath getCurrentWorkspace() {
     }
 
     /**
-     * Same as {@link #getName()}.
+     * Human readable name of the Jenkins executor. For the Java thread name use {@link #getName()}.
      */
     public String getDisplayName() {
         return "Executor #"+getNumber();

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -578,7 +578,7 @@ public FilePath getCurrentWorkspace() {
     }
 
     /**
-     * Same as {@link #getName()}.
+     * Human readable name of the Jenkins executor. For the Java thread name use {@link #getName()}.
      */
     public String getDisplayName() {
         return "Executor #"+getNumber();

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -801,7 +801,7 @@ protected void kill() {
 
     public RetentionStrategy getRetentionStrategy() {
         Slave n = getNode();
-        return n==null ? RetentionStrategy.INSTANCE : n.getRetentionStrategy();
+        return n==null ? RetentionStrategy.NOOP : n.getRetentionStrategy();
     }
 
     /**

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -1847,7 +1847,7 @@ public MetadataCache createCache() {
      * @return the list of results for every plugin and their dependant plugins.
      * @throws IOException see {@link PluginWrapper#disable()}
      */
-    public @NonNull List<PluginWrapper.PluginDisableResult> disablePlugins(PluginWrapper.PluginDisableStrategy strategy, List<String> plugins) throws IOException {
+    public @NonNull List<PluginWrapper.PluginDisableResult> disablePlugins(@NonNull PluginWrapper.PluginDisableStrategy strategy, @NonNull List<String> plugins) throws IOException {
         // Where we store the results of each plugin disablement
         List<PluginWrapper.PluginDisableResult> results = new ArrayList<>(plugins.size());
 

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -1847,7 +1847,7 @@ public MetadataCache createCache() {
      * @return the list of results for every plugin and their dependant plugins.
      * @throws IOException see {@link PluginWrapper#disable()}
      */
-    public List<PluginWrapper.PluginDisableResult> disablePlugins(PluginWrapper.PluginDisableStrategy strategy, List<String> plugins) throws IOException {
+    public @NonNull List<PluginWrapper.PluginDisableResult> disablePlugins(PluginWrapper.PluginDisableStrategy strategy, List<String> plugins) throws IOException {
         // Where we store the results of each plugin disablement
         List<PluginWrapper.PluginDisableResult> results = new ArrayList<>(plugins.size());
 

File: test/src/test/java/hudson/cli/DisablePluginCommandTest.java
Patch:
@@ -179,7 +179,7 @@ public void restartAfterDisablePluginsAndErrors() {
         assertPluginDisabled("depender");
         assertPluginDisabled("plugin-first");
         assertPluginDisabled("mandatory-depender");
-        assertJenkinsInQuietMode(); // some plugins were disabled
+        assertJenkinsInQuietMode(); // some plugins were disabled, so it should be restarting
     }
 
     /**

File: core/src/main/java/hudson/search/FixedSet.java
Patch:
@@ -50,7 +50,7 @@ public void find(String token, List<SearchItem> result) {
         boolean caseInsensitive = UserSearchProperty.isCaseInsensitive();
         for (SearchItem i : items) {
             String name = i.getSearchName();
-            if (name.equals(token) || (caseInsensitive && name.equalsIgnoreCase(token))) {
+            if (name != null && (name.equals(token) || (caseInsensitive && name.equalsIgnoreCase(token)))) {
                 result.add(i);
             }
         }
@@ -60,7 +60,7 @@ public void suggest(String token, List<SearchItem> result) {
         boolean caseInsensitive = UserSearchProperty.isCaseInsensitive();
         for (SearchItem i : items) {
             String name = i.getSearchName();
-            if (name.contains(token) || (caseInsensitive && StringUtils.containsIgnoreCase(name, token))) {
+            if (name != null && (name.contains(token) || (caseInsensitive && StringUtils.containsIgnoreCase(name, token)))) {
                 result.add(i);
             }
         }

File: core/src/main/java/hudson/Launcher.java
Patch:
@@ -26,6 +26,7 @@
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Proc.LocalProc;
 import hudson.model.Computer;
+import jenkins.util.MemoryReductionUtil;
 import hudson.util.QuotedStringTokenizer;
 import jenkins.model.Jenkins;
 import hudson.model.TaskListener;
@@ -396,7 +397,7 @@ public ProcStarter envs(@CheckForNull String... overrides) {
          */
         @Nonnull
         public String[] envs() {
-            return envs != null ? envs.clone() : new String[0];
+            return envs != null ? envs.clone() : MemoryReductionUtil.EMPTY_STRING_ARRAY;
         }
 
         /**

File: core/src/main/java/hudson/Util.java
Patch:
@@ -26,6 +26,7 @@
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 import hudson.model.TaskListener;
+import jenkins.util.MemoryReductionUtil;
 import hudson.util.QuotedStringTokenizer;
 import hudson.util.VariableResolver;
 import jenkins.util.SystemProperties;
@@ -92,7 +93,6 @@
 import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
 
-import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.commons.io.FileUtils;
 
 /**
@@ -1388,7 +1388,7 @@ public static void createSymlink(@Nonnull File baseDir, @Nonnull String targetPa
             @Nonnull String symlinkPath, @Nonnull TaskListener listener) throws InterruptedException {
         try {
             Path path = fileToPath(new File(baseDir, symlinkPath));
-            Path target = Paths.get(targetPath, new String[0]);
+            Path target = Paths.get(targetPath, MemoryReductionUtil.EMPTY_STRING_ARRAY);
 
             final int maxNumberOfTries = 4;
             final int timeInMillis = 100;

File: core/src/main/java/hudson/logging/LogRecorder.java
Patch:
@@ -32,6 +32,7 @@
 import hudson.XmlFile;
 import hudson.model.*;
 import hudson.util.HttpResponses;
+import jenkins.util.MemoryReductionUtil;
 import jenkins.model.Jenkins;
 import hudson.model.listeners.SaveableListener;
 import hudson.remoting.Channel;
@@ -140,7 +141,7 @@ public AutoCompletionCandidates doAutoCompleteLoggerName(@QueryParameter String
             candidateNames.retainAll(partCandidates);
         }
         AutoCompletionCandidates candidates = new AutoCompletionCandidates();
-        candidates.add(candidateNames.toArray(new String[0]));
+        candidates.add(candidateNames.toArray(MemoryReductionUtil.EMPTY_STRING_ARRAY));
         return candidates;
     }
 

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -137,7 +137,7 @@ public abstract class Descriptor<T extends Describable<T>> implements Saveable,
      */
     public transient final Class<? extends T> clazz;
 
-    private transient final Map<String,CheckMethod> checkMethods = new ConcurrentHashMap<String,CheckMethod>();
+    private transient final Map<String,CheckMethod> checkMethods = new ConcurrentHashMap<String,CheckMethod>(2);
 
     /**
      * Lazily computed list of properties on {@link #clazz} and on the descriptor itself.
@@ -233,7 +233,7 @@ public List<? extends Descriptor> getApplicableItemDescriptors() {
      *
      * @see #getHelpFile(String) 
      */
-    private transient final Map<String,HelpRedirect> helpRedirect = new HashMap<String,HelpRedirect>();
+    private transient final Map<String,HelpRedirect> helpRedirect = new HashMap<String,HelpRedirect>(2);
 
     private static class HelpRedirect {
         private final Class<? extends Describable> owner;

File: core/src/main/java/hudson/model/Items.java
Patch:
@@ -35,6 +35,7 @@
 import hudson.triggers.Trigger;
 import hudson.util.DescriptorList;
 import hudson.util.EditDistance;
+import jenkins.util.MemoryReductionUtil;
 import hudson.util.XStream2;
 import java.io.File;
 import java.io.IOException;
@@ -313,8 +314,8 @@ public static String computeRelativeNamesAfterRenaming(String oldFullName, Strin
 
     // Had difficulty adapting the version in Functions to use no live items, so rewrote it:
     static String getRelativeNameFrom(String itemFullName, String groupFullName) {
-        String[] itemFullNameA = itemFullName.isEmpty() ? new String[0] : itemFullName.split("/");
-        String[] groupFullNameA = groupFullName.isEmpty() ? new String[0] : groupFullName.split("/");
+        String[] itemFullNameA = itemFullName.isEmpty() ? MemoryReductionUtil.EMPTY_STRING_ARRAY : itemFullName.split("/");
+        String[] groupFullNameA = groupFullName.isEmpty() ? MemoryReductionUtil.EMPTY_STRING_ARRAY : groupFullName.split("/");
         for (int i = 0; ; i++) {
             if (i == itemFullNameA.length) {
                 if (i == groupFullNameA.length) {

File: core/src/main/java/hudson/search/Search.java
Patch:
@@ -42,6 +42,7 @@
 
 import javax.servlet.ServletException;
 
+import jenkins.util.MemoryReductionUtil;
 import jenkins.model.Jenkins;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
@@ -325,10 +326,8 @@ public int compareTo(Tag that) {
     static final class TokenList {
         private final String[] tokens;
 
-        private final static String[] EMPTY = new String[0];
-
         public TokenList(String tokenList) {
-            tokens = tokenList!=null ? tokenList.split("(?<=\\s)(?=\\S)") : EMPTY;
+            tokens = tokenList!=null ? tokenList.split("(?<=\\s)(?=\\S)") : MemoryReductionUtil.EMPTY_STRING_ARRAY;
         }
 
         public int length() { return tokens.length; }

File: core/src/main/java/hudson/security/WhoAmI.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import jenkins.util.MemoryReductionUtil;
 import jenkins.model.Jenkins;
 
 import org.acegisecurity.Authentication;
@@ -62,7 +63,7 @@ private Authentication auth() {
     @Exported
     public String[] getAuthorities() {
         if (auth().getAuthorities() == null) {
-            return new String[0];
+            return MemoryReductionUtil.EMPTY_STRING_ARRAY;
         }
         List <String> authorities = new ArrayList<String>();
         for (GrantedAuthority a : auth().getAuthorities()) {

File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java
Patch:
@@ -40,6 +40,8 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
+
+import jenkins.util.MemoryReductionUtil;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
@@ -188,7 +190,7 @@ private void loadNumberOnDisk() {
         String[] kids = dir.list();
         if (kids == null) {
             // the job may have just been created
-            kids = EMPTY_STRING_ARRAY;
+            kids = MemoryReductionUtil.EMPTY_STRING_ARRAY;
         }
         SortedIntList list = new SortedIntList(kids.length / 2);
         for (String s : kids) {
@@ -586,8 +588,6 @@ public enum Direction {
         ASC, DESC, EXACT
     }
 
-    private static final String[] EMPTY_STRING_ARRAY = new String[0];
-
     private static final SortedMap EMPTY_SORTED_MAP = Collections.unmodifiableSortedMap(new TreeMap());
 
     static final Logger LOGGER = Logger.getLogger(AbstractLazyLoadRunMap.class.getName());

File: core/src/main/java/jenkins/util/VirtualFile.java
Patch:
@@ -54,6 +54,7 @@
 import java.util.stream.Collectors;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
+
 import jenkins.MasterToSlaveFileCallable;
 import jenkins.model.ArtifactManager;
 import jenkins.security.MasterToSlaveCallable;
@@ -175,7 +176,7 @@ public abstract class VirtualFile implements Comparable<VirtualFile>, Serializab
      */
     @Deprecated
     public @Nonnull String[] list(String glob) throws IOException {
-        return list(glob.replace('\\', '/'), null, true).toArray(new String[0]);
+        return list(glob.replace('\\', '/'), null, true).toArray(MemoryReductionUtil.EMPTY_STRING_ARRAY);
     }
 
     /**

File: core/src/test/java/jenkins/security/ClassFilterImplSanityTest.java
Patch:
@@ -28,6 +28,8 @@
 import java.util.List;
 import java.util.TreeSet;
 import java.util.stream.Collectors;
+
+import jenkins.util.MemoryReductionUtil;
 import org.apache.commons.io.IOUtils;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.assertThat;
@@ -45,7 +47,7 @@ public class ClassFilterImplSanityTest {
     public void whitelistSanity() throws Exception {
         try (InputStream is = ClassFilterImpl.class.getResourceAsStream("whitelisted-classes.txt")) {
             List<String> lines = IOUtils.readLines(is, StandardCharsets.UTF_8).stream().filter(line -> !line.matches("#.*|\\s*")).collect(Collectors.toList());
-            assertThat("whitelist is NOT ordered", new TreeSet<>(lines), contains(lines.toArray(new String[0])));
+            assertThat("whitelist is NOT ordered", new TreeSet<>(lines), contains(lines.toArray(MemoryReductionUtil.EMPTY_STRING_ARRAY)));
             for (String line : lines) {
                 try {
                     Class.forName(line);

File: core/src/main/java/hudson/model/AdministrativeMonitor.java
Patch:
@@ -68,7 +68,7 @@
  * If {@link #isActivated()} returns true, Jenkins will use the {@code message.jelly}
  * view of this object to render the warning text. This happens in the
  * {@code http://SERVER/jenkins/manage} page. This view should typically render
- * a DIV box with class='error' or class='warning' with a human-readable text
+ * a DIV box with class='alert alert-error' or class='alert alert-warning' with a human-readable text
  * inside it. It often also contains a link to a page that provides more details
  * about the problem.
  * </dd>

File: core/src/main/java/hudson/model/AdministrativeMonitor.java
Patch:
@@ -68,7 +68,7 @@
  * If {@link #isActivated()} returns true, Jenkins will use the {@code message.jelly}
  * view of this object to render the warning text. This happens in the
  * {@code http://SERVER/jenkins/manage} page. This view should typically render
- * a DIV box with class='error' or class='warning' with a human-readable text
+ * a DIV box with class='alert alert-error' or class='alert alert-warning' with a human-readable text
  * inside it. It often also contains a link to a page that provides more details
  * about the problem.
  * </dd>

File: core/src/main/java/hudson/console/AnnotatedLargeText.java
Patch:
@@ -113,7 +113,7 @@ protected void setContentType(StaplerResponse rsp) {
         rsp.setContentType(isHtml() ? "text/html;charset=UTF-8" : "text/plain;charset=UTF-8");
     }
 
-    private ConsoleAnnotator createAnnotator(StaplerRequest req) throws IOException {
+    private ConsoleAnnotator<T> createAnnotator(StaplerRequest req) throws IOException {
         try {
             String base64 = req!=null ? req.getHeader("X-ConsoleAnnotator") : null;
             if (base64!=null) {
@@ -135,7 +135,7 @@ private ConsoleAnnotator createAnnotator(StaplerRequest req) throws IOException
             throw new IOException(e);
         }
         // start from scratch
-        return ConsoleAnnotator.initial(context==null ? null : context.getClass());
+        return ConsoleAnnotator.initial(context);
     }
 
     @Override
@@ -164,7 +164,7 @@ public long writeRawLogTo(long start, OutputStream out) throws IOException {
     }
 
     public long writeHtmlTo(long start, Writer w) throws IOException {
-        ConsoleAnnotationOutputStream caw = new ConsoleAnnotationOutputStream(
+        ConsoleAnnotationOutputStream<T> caw = new ConsoleAnnotationOutputStream<>(
                 w, createAnnotator(Stapler.getCurrentRequest()), context, charset);
         long r = super.writeLogTo(start,caw);
 

File: core/src/main/java/hudson/model/LoadBalancer.java
Patch:
@@ -112,7 +112,7 @@ public String hash(ExecutorChunk node) {
         private boolean assignGreedily(Mapping m, Task task, List<ConsistentHash<ExecutorChunk>> hashes, int i) {
             if (i==hashes.size())   return true;    // fully assigned
 
-            String key = task.getFullDisplayName() + (i>0 ? String.valueOf(i) : "");
+            String key = task.getAffinityKey() + (i>0 ? String.valueOf(i) : "");
 
             for (ExecutorChunk ec : hashes.get(i).list(key)) {
                 // let's attempt this assignment

File: core/src/main/java/hudson/Util.java
Patch:
@@ -1199,7 +1199,8 @@ public static String fixNull(@CheckForNull String s) {
     }
 
     /**
-     * Convert {@code null} to a default <b>immutable</b> value.
+     * Convert {@code null} to a default value.
+     * @param defaultValue Default value. It may be immutable or not, depending on the implementation.
      * @since TODO
      */
     @Nonnull

File: core/src/main/java/hudson/console/AnnotatedLargeText.java
Patch:
@@ -113,7 +113,7 @@ protected void setContentType(StaplerResponse rsp) {
         rsp.setContentType(isHtml() ? "text/html;charset=UTF-8" : "text/plain;charset=UTF-8");
     }
 
-    private ConsoleAnnotator createAnnotator(StaplerRequest req) throws IOException {
+    private ConsoleAnnotator<T> createAnnotator(StaplerRequest req) throws IOException {
         try {
             String base64 = req!=null ? req.getHeader("X-ConsoleAnnotator") : null;
             if (base64!=null) {
@@ -135,7 +135,7 @@ private ConsoleAnnotator createAnnotator(StaplerRequest req) throws IOException
             throw new IOException(e);
         }
         // start from scratch
-        return ConsoleAnnotator.initial(context==null ? null : context.getClass());
+        return ConsoleAnnotator.initial(context);
     }
 
     @Override
@@ -164,7 +164,7 @@ public long writeRawLogTo(long start, OutputStream out) throws IOException {
     }
 
     public long writeHtmlTo(long start, Writer w) throws IOException {
-        ConsoleAnnotationOutputStream caw = new ConsoleAnnotationOutputStream(
+        ConsoleAnnotationOutputStream<T> caw = new ConsoleAnnotationOutputStream<>(
                 w, createAnnotator(Stapler.getCurrentRequest()), context, charset);
         long r = super.writeLogTo(start,caw);
 

File: test/src/test/java/hudson/PluginSEC925Test.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.concurrent.Future;
 
 //TODO merge it within PluginTest after the security release
-public class PluginTest_SEC925 {
+public class PluginSEC925Test {
     
     @Rule
     public JenkinsRule r = new JenkinsRule();

File: test/src/test/java/hudson/model/QueueSEC891Test.java
Patch:
@@ -21,7 +21,7 @@
 import static org.junit.Assert.assertTrue;
 
 //TODO merge into QueueTest after security patch
-public class QueueTest_SEC891 {
+public class QueueSEC891Test {
     
     @Rule
     public JenkinsRule r = new NodeProvisionerRule(-1, 0, 10);

File: test/src/test/java/hudson/model/UserRestartSEC897Test.java
Patch:
@@ -16,7 +16,7 @@
 import static org.junit.Assert.assertThat;
 
 //TODO after the security fix, it could be merged inside UserRestartTest
-public class UserRestartTest_SEC897 {
+public class UserRestartSEC897Test {
     
     @Rule
     public RestartableJenkinsRule rr = new RestartableJenkinsRule();

File: test/src/test/java/hudson/security/TokenBasedRememberMeServices2SEC996Test.java
Patch:
@@ -37,7 +37,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertThat;
 
-public class TokenBasedRememberMeServices2Test_SEC996 {
+public class TokenBasedRememberMeServices2SEC996Test {
     @Rule
     public JenkinsRule j = new JenkinsRule();
     

File: test/src/test/java/jenkins/security/BasicHeaderApiTokenAuthenticatorSEC986Test.java
Patch:
@@ -52,7 +52,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 
-public class BasicHeaderApiTokenAuthenticatorTest_SEC986 {
+public class BasicHeaderApiTokenAuthenticatorSEC986Test {
     @Rule
     public RestartableJenkinsRule rr = new RestartableJenkinsRule();
     

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -31,6 +31,7 @@
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import jenkins.util.AntWithFindResourceClassLoader;
 import jenkins.util.SystemProperties;
 import com.google.common.collect.Lists;
@@ -798,6 +799,8 @@ protected Class<?> findClass(String name) throws ClassNotFoundException {
         }
 
         @Override
+        @SuppressFBWarnings(value = "DMI_COLLECTION_OF_URLS",
+                            justification = "Should not produce network overheads since the URL is local. JENKINS-53793 is a follow-up")
         protected Enumeration<URL> findResources(String name) throws IOException {
             HashSet<URL> result = new HashSet<URL>();
 

File: core/src/test/java/jenkins/model/CoreEnvironmentContributorTest.java
Patch:
@@ -54,7 +54,7 @@ public void buildEnvironmentForJobShouldntUseCurrentComputer() throws IOExceptio
         
         // currentComputer shouldn't be called since it relates to a running build,
         // which is not the case for calls of this method (e.g. polling) 
-        verifyStatic(times(0));
+        verifyStatic(Computer.class, times(0));
         Computer.currentComputer();
     }
 

File: cli/src/main/java/hudson/cli/PrivateKeyProvider.java
Patch:
@@ -71,7 +71,7 @@ public boolean hasKeys() {
     /**
      * Read keys from default keyFiles
      *
-     * <tt>.ssh/id_rsa</tt>, <tt>.ssh/id_dsa</tt> and <tt>.ssh/identity</tt>.
+     * {@code .ssh/id_rsa}, {@code .ssh/id_dsa} and {@code .ssh/identity}.
      *
      * @return true if some key was read successfully.
      */

File: core/src/test/java/hudson/model/JobTest.java
Patch:
@@ -74,7 +74,7 @@ public void use_slave_platform_path_separator_when_contribute_path() throws Thro
         Node node = PowerMockito.mock(Node.class);
         PowerMockito.doReturn(c).when(node).toComputer();
 
-        EnvVars env = job.getEnvironment(node, null);
+        EnvVars env = job.getEnvironment(node, TaskListener.NULL);
         String path = "/test";
         env.override("PATH+TEST", path);
 

File: core/src/test/java/hudson/model/JobTest.java
Patch:
@@ -74,7 +74,7 @@ public void use_slave_platform_path_separator_when_contribute_path() throws Thro
         Node node = PowerMockito.mock(Node.class);
         PowerMockito.doReturn(c).when(node).toComputer();
 
-        EnvVars env = job.getEnvironment(node, null);
+        EnvVars env = job.getEnvironment(node, TaskListener.NULL);
         String path = "/test";
         env.override("PATH+TEST", path);
 

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -245,10 +245,11 @@ private static ThreadFactory threadFactory() {
         private static final int THREADS_UPPER_BOUND = 100;
         private static final int THREADS_DEFAULT= 10;
 
-        private void readResolve() {
+        private Object readResolve() {
             if (maximumThreads == 0) {
                 maximumThreads = THREADS_DEFAULT;
             }
+            return this;
         }
 
         public boolean isApplicable(Item item) {

File: core/src/main/java/jenkins/security/apitoken/ApiTokenStats.java
Patch:
@@ -60,7 +60,7 @@ public ApiTokenStats() {
         this.init();
     }
     
-    private ApiTokenStats readResolve() {
+    private Object readResolve() {
         this.init();
         return this;
     }
@@ -217,7 +217,7 @@ private SingleTokenStats(String tokenUuid) {
             this.tokenUuid = tokenUuid;
         }
         
-        private SingleTokenStats readResolve() {
+        private Object readResolve() {
             if (this.useCounter != null) {
                 // to avoid negative numbers to be injected
                 this.useCounter = Math.max(0, this.useCounter);

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -245,10 +245,11 @@ private static ThreadFactory threadFactory() {
         private static final int THREADS_UPPER_BOUND = 100;
         private static final int THREADS_DEFAULT= 10;
 
-        private void readResolve() {
+        private Object readResolve() {
             if (maximumThreads == 0) {
                 maximumThreads = THREADS_DEFAULT;
             }
+            return this;
         }
 
         public boolean isApplicable(Item item) {

File: core/src/main/java/jenkins/security/apitoken/ApiTokenStats.java
Patch:
@@ -60,7 +60,7 @@ public ApiTokenStats() {
         this.init();
     }
     
-    private ApiTokenStats readResolve() {
+    private Object readResolve() {
         this.init();
         return this;
     }
@@ -217,7 +217,7 @@ private SingleTokenStats(String tokenUuid) {
             this.tokenUuid = tokenUuid;
         }
         
-        private SingleTokenStats readResolve() {
+        private Object readResolve() {
             if (this.useCounter != null) {
                 // to avoid negative numbers to be injected
                 this.useCounter = Math.max(0, this.useCounter);

File: core/src/main/java/hudson/search/FixedSet.java
Patch:
@@ -50,7 +50,7 @@ public void find(String token, List<SearchItem> result) {
         boolean caseInsensitive = UserSearchProperty.isCaseInsensitive();
         for (SearchItem i : items) {
             String name = i.getSearchName();
-            if (name.equals(token) || (caseInsensitive && name.equalsIgnoreCase(token))) {
+            if (name != null && (name.equals(token) || (caseInsensitive && name.equalsIgnoreCase(token)))) {
                 result.add(i);
             }
         }
@@ -60,7 +60,7 @@ public void suggest(String token, List<SearchItem> result) {
         boolean caseInsensitive = UserSearchProperty.isCaseInsensitive();
         for (SearchItem i : items) {
             String name = i.getSearchName();
-            if (name.contains(token) || (caseInsensitive && StringUtils.containsIgnoreCase(name, token))) {
+            if (name != null && (name.contains(token) || (caseInsensitive && StringUtils.containsIgnoreCase(name, token)))) {
                 result.add(i);
             }
         }

File: core/src/main/java/hudson/search/FixedSet.java
Patch:
@@ -50,7 +50,7 @@ public void find(String token, List<SearchItem> result) {
         boolean caseInsensitive = UserSearchProperty.isCaseInsensitive();
         for (SearchItem i : items) {
             String name = i.getSearchName();
-            if (name.equals(token) || (caseInsensitive && name.equalsIgnoreCase(token))) {
+            if (name != null && (name.equals(token) || (caseInsensitive && name.equalsIgnoreCase(token)))) {
                 result.add(i);
             }
         }
@@ -60,7 +60,7 @@ public void suggest(String token, List<SearchItem> result) {
         boolean caseInsensitive = UserSearchProperty.isCaseInsensitive();
         for (SearchItem i : items) {
             String name = i.getSearchName();
-            if (name.contains(token) || (caseInsensitive && StringUtils.containsIgnoreCase(name, token))) {
+            if (name != null && (name.contains(token) || (caseInsensitive && StringUtils.containsIgnoreCase(name, token)))) {
                 result.add(i);
             }
         }

File: core/src/main/java/hudson/cli/ConsoleCommand.java
Patch:
@@ -41,7 +41,7 @@ public String getShortDescription() {
     public int n = -1;
 
     protected int run() throws Exception {
-        job.checkPermission(Item.BUILD);
+        job.checkPermission(Item.READ);
 
         Run<?,?> run;
 

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -431,11 +431,12 @@ public SubTask call() throws Exception {
             } catch (AsynchronousExecution x) {
                 lock.writeLock().lock();
                 try {
-                    x.setExecutor(this);
+                    x.setExecutorWithoutCompleting(this);
                     this.asynchronousExecution = x;
                 } finally {
                     lock.writeLock().unlock();
                 }
+                x.maybeComplete();
             } catch (Throwable e) {
                 problems = e;
             } finally {

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -1887,7 +1887,7 @@ private static void throwVerificationFailure(String expected, String actual, Fil
         VerificationResult result512 = verifyChecksums(entry.getSha512(), job.getComputedSHA512(), false);
         switch (result512) {
             case PASS:
-                // this has passed but no real reason not to check the others
+                // this has passed so no reason not to check the weaker checksums
                 return;
             case FAIL:
                 throwVerificationFailure(entry.getSha512(), job.getComputedSHA512(), file, "SHA-512");

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -1110,7 +1110,7 @@ private List<Item> liveGetItems(Task t) {
     /**
      * Gets the information about the queue item for the given project.
      *
-     * @return null if the project is not in the queue.
+     * @return empty if the project is not in the queue.
      */
     public List<Item> getItems(Task t) {
         Snapshot snapshot = this.snapshot;

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -1110,7 +1110,7 @@ private List<Item> liveGetItems(Task t) {
     /**
      * Gets the information about the queue item for the given project.
      *
-     * @return null if the project is not in the queue.
+     * @return empty if the project is not in the queue.
      */
     public List<Item> getItems(Task t) {
         Snapshot snapshot = this.snapshot;

File: core/src/main/java/hudson/cli/ConsoleCommand.java
Patch:
@@ -41,7 +41,7 @@ public String getShortDescription() {
     public int n = -1;
 
     protected int run() throws Exception {
-        job.checkPermission(Item.BUILD);
+        job.checkPermission(Item.READ);
 
         Run<?,?> run;
 

File: test/src/test/java/hudson/model/APeriodicWorkTest.java
Patch:
@@ -23,7 +23,7 @@ public class APeriodicWorkTest {
     public void newExtensionsAreScheduled() throws Exception {
         TestAperiodicWork tapw = new TestAperiodicWork();
 
-        int size = PeriodicWork.all().size();
+        int size = AperiodicWork.all().size();
         ExtensionList.lookup(AperiodicWork.class).add(tapw);
 
         assertThat("we have one new AperiodicWork", AperiodicWork.all(), hasSize(size+1));

File: test/src/test/java/hudson/model/PeriodicWorkTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicInteger;
 
 import org.junit.Rule;
 import org.junit.Test;

File: core/src/main/java/hudson/cli/CliProtocol2.java
Patch:
@@ -35,7 +35,7 @@ public String getName() {
      */
     @Override
     public boolean isOptIn() {
-        return false;
+        return true;
     }
 
     @Override

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java
Patch:
@@ -50,7 +50,7 @@ public String getName() {
      */
     @Override
     public boolean isOptIn() {
-        return false;
+        return true;
     }
 
     @Override

File: core/src/main/java/hudson/util/StreamTaskListener.java
Patch:
@@ -160,7 +160,7 @@ public PrintStream getLogger() {
 
     @Override
     public Charset getCharset() {
-        return charset;
+        return charset != null ? charset : Charset.defaultCharset();
     }
 
     private void writeObject(ObjectOutputStream out) throws IOException {

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -431,11 +431,12 @@ public SubTask call() throws Exception {
             } catch (AsynchronousExecution x) {
                 lock.writeLock().lock();
                 try {
-                    x.setExecutor(this);
+                    x.setExecutorWithoutCompleting(this);
                     this.asynchronousExecution = x;
                 } finally {
                     lock.writeLock().unlock();
                 }
+                x.maybeComplete();
             } catch (Throwable e) {
                 problems = e;
             } finally {

File: core/src/main/java/hudson/model/RunParameterDefinition.java
Patch:
@@ -92,7 +92,7 @@ private RunParameterDefinition(String name, String projectName, String runId, St
     public ParameterDefinition copyWithDefaultValue(ParameterValue defaultValue) {
         if (defaultValue instanceof RunParameterValue) {
             RunParameterValue value = (RunParameterValue) defaultValue;
-            return new RunParameterDefinition(getName(), value.getRunId(), getDescription(), getFilter());
+            return new RunParameterDefinition(getName(), getProjectName(), value.getRunId(), getDescription(), getFilter());
         } else {
             return this;
         }

File: core/src/main/java/hudson/model/RunParameterDefinition.java
Patch:
@@ -92,7 +92,7 @@ private RunParameterDefinition(String name, String projectName, String runId, St
     public ParameterDefinition copyWithDefaultValue(ParameterValue defaultValue) {
         if (defaultValue instanceof RunParameterValue) {
             RunParameterValue value = (RunParameterValue) defaultValue;
-            return new RunParameterDefinition(getName(), value.getRunId(), getDescription(), getFilter());
+            return new RunParameterDefinition(getName(), getProjectName(), value.getRunId(), getDescription(), getFilter());
         } else {
             return this;
         }

File: core/src/main/java/hudson/model/RunParameterDefinition.java
Patch:
@@ -92,7 +92,7 @@ private RunParameterDefinition(String name, String projectName, String runId, St
     public ParameterDefinition copyWithDefaultValue(ParameterValue defaultValue) {
         if (defaultValue instanceof RunParameterValue) {
             RunParameterValue value = (RunParameterValue) defaultValue;
-            return new RunParameterDefinition(getName(), value.getRunId(), getDescription(), getFilter());
+            return new RunParameterDefinition(getName(), getProjectName(), value.getRunId(), getDescription(), getFilter());
         } else {
             return this;
         }

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -922,7 +922,7 @@ public void copyFrom(URL url) throws IOException, InterruptedException {
     /**
      * Copies the content of a URL to a remote file.
      * Unlike {@link #copyFrom} this will not transfer content over a Remoting channel.
-     * @since 2.119
+     * @since 2.118
      */
     @Restricted(Beta.class)
     public void copyFromRemotely(URL url) throws IOException, InterruptedException {

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -922,7 +922,7 @@ public void copyFrom(URL url) throws IOException, InterruptedException {
     /**
      * Copies the content of a URL to a remote file.
      * Unlike {@link #copyFrom} this will not transfer content over a Remoting channel.
-     * @since 2.119
+     * @since 2.118
      */
     @Restricted(Beta.class)
     public void copyFromRemotely(URL url) throws IOException, InterruptedException {

File: core/src/main/java/hudson/model/Item.java
Patch:
@@ -266,5 +266,5 @@ default void onCreatedFromScratch() {
     Permission BUILD = new Permission(PERMISSIONS, "Build", Messages._AbstractProject_BuildPermission_Description(),  Permission.UPDATE, PermissionScope.ITEM);
     Permission WORKSPACE = new Permission(PERMISSIONS, "Workspace", Messages._AbstractProject_WorkspacePermission_Description(), Permission.READ, PermissionScope.ITEM);
     Permission WIPEOUT = new Permission(PERMISSIONS, "WipeOut", Messages._AbstractProject_WipeOutPermission_Description(), null, Functions.isWipeOutPermissionEnabled(), new PermissionScope[]{PermissionScope.ITEM});
-    Permission CANCEL = new Permission(PERMISSIONS, "Cancel", Messages._AbstractProject_CancelPermission_Description(), BUILD, PermissionScope.ITEM);
+    Permission CANCEL = new Permission(PERMISSIONS, "Cancel", Messages._AbstractProject_CancelPermission_Description(), Permission.UPDATE, PermissionScope.ITEM);
 }

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -2283,7 +2283,8 @@ public void visit(File f, String relativePath) throws IOException {
                             if (f.isFile()) {
                                 File target = new File(dest, relativePath);
                                 mkdirsE(target.getParentFile());
-                                Util.copyFile(f, writing(target));
+                                Files.copy(fileToPath(f), fileToPath(writing(target)),
+                                        StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING);
                                 count.incrementAndGet();
                             }
                         }

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -382,7 +382,7 @@ public interface ProcessCallable<T> extends Serializable {
     }
 
 
-    private static Boolean vetoersExist;
+    /* package */ static Boolean vetoersExist;
     
     /**
      * Gets the {@link ProcessTree} of the current system

File: test/src/test/java/hudson/util/ProcessTreeKillerTest.java
Patch:
@@ -38,6 +38,7 @@ public class ProcessTreeKillerTest {
     
     @After
     public void tearDown() throws Exception {
+        ProcessTree.vetoersExist = null;
         if (null != process)
             process.destroy();
     }    

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -382,7 +382,7 @@ public interface ProcessCallable<T> extends Serializable {
     }
 
 
-    private static Boolean vetoersExist;
+    /* package */ static Boolean vetoersExist;
     
     /**
      * Gets the {@link ProcessTree} of the current system

File: test/src/test/java/hudson/util/ProcessTreeKillerTest.java
Patch:
@@ -38,6 +38,7 @@ public class ProcessTreeKillerTest {
     
     @After
     public void tearDown() throws Exception {
+        ProcessTree.vetoersExist = null;
         if (null != process)
             process.destroy();
     }    

File: core/src/main/java/hudson/cli/CLICommand.java
Patch:
@@ -268,7 +268,7 @@ public int main(List<String> args, Locale locale, InputStream stdin, PrintStream
             sc.setAuthentication(getTransportAuthentication());
             new ClassParser().parse(authenticator,p);
 
-            if (!(this instanceof LoginCommand || this instanceof LogoutCommand || this instanceof HelpCommand))
+            if (!(this instanceof LoginCommand || this instanceof LogoutCommand || this instanceof HelpCommand || this instanceof WhoAmICommand))
                 Jenkins.getActiveInstance().checkPermission(Jenkins.READ);
             p.parseArgument(args.toArray(new String[args.size()]));
             Authentication auth = authenticator.authenticate();

File: core/src/main/java/hudson/cli/CLICommand.java
Patch:
@@ -268,7 +268,7 @@ public int main(List<String> args, Locale locale, InputStream stdin, PrintStream
             sc.setAuthentication(getTransportAuthentication());
             new ClassParser().parse(authenticator,p);
 
-            if (!(this instanceof LoginCommand || this instanceof LogoutCommand || this instanceof HelpCommand))
+            if (!(this instanceof LoginCommand || this instanceof LogoutCommand || this instanceof HelpCommand || this instanceof WhoAmICommand))
                 Jenkins.getActiveInstance().checkPermission(Jenkins.READ);
             p.parseArgument(args.toArray(new String[args.size()]));
             Authentication auth = authenticator.authenticate();

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -137,7 +137,7 @@ public SetupWizard() {
                     jenkins.setAgentProtocols(newProtocols);
                     
                     // require a crumb issuer
-                    jenkins.setCrumbIssuer(new DefaultCrumbIssuer(false));
+                    jenkins.setCrumbIssuer(new DefaultCrumbIssuer(SystemProperties.getBoolean(Jenkins.class.getName() + ".crumbIssuerProxyCompatibility",false)));
     
                     // set master -> slave security:
                     jenkins.getInjector().getInstance(AdminWhitelistRule.class)

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1379,6 +1379,7 @@ public static <T> Collection<T> emptyList() {
     }
 
     public static String jsStringEscape(String s) {
+        if (s == null) return null;
         StringBuilder buf = new StringBuilder();
         for( int i=0; i<s.length(); i++ ) {
             char ch = s.charAt(i);

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1379,6 +1379,7 @@ public static <T> Collection<T> emptyList() {
     }
 
     public static String jsStringEscape(String s) {
+        if (s == null) return null;
         StringBuilder buf = new StringBuilder();
         for( int i=0; i<s.length(); i++ ) {
             char ch = s.charAt(i);

File: core/src/main/java/hudson/cli/CLICommand.java
Patch:
@@ -268,7 +268,7 @@ public int main(List<String> args, Locale locale, InputStream stdin, PrintStream
             sc.setAuthentication(getTransportAuthentication());
             new ClassParser().parse(authenticator,p);
 
-            if (!(this instanceof LoginCommand || this instanceof LogoutCommand || this instanceof HelpCommand))
+            if (!(this instanceof LoginCommand || this instanceof LogoutCommand || this instanceof HelpCommand || this instanceof WhoAmICommand))
                 Jenkins.getActiveInstance().checkPermission(Jenkins.READ);
             p.parseArgument(args.toArray(new String[args.size()]));
             Authentication auth = authenticator.authenticate();

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -299,7 +299,7 @@ private Object readResolve() {
     public void onAttached(Run<?, ?> r) {
         ParametersDefinitionProperty p = r.getParent().getProperty(ParametersDefinitionProperty.class);
         if (p != null) {
-            this.parameterDefinitionNames = p.getParameterDefinitionNames();
+            this.parameterDefinitionNames = new ArrayList<>(p.getParameterDefinitionNames());
         } else {
             this.parameterDefinitionNames = Collections.emptyList();
         }

File: core/src/main/java/hudson/util/AbstractTaskListener.java
Patch:
@@ -13,4 +13,7 @@
 @Restricted(NoExternalUse.class)
 @RestrictedSince("2.91")
 public abstract class AbstractTaskListener implements TaskListener {
+
+    private static final long serialVersionUID = 7217626701881006422L;
+
 }

File: core/src/test/java/hudson/model/ComputerTest.java
Patch:
@@ -38,7 +38,7 @@ public void testRelocate() throws Exception {
         }
     }
 
-    @Issue("JENKINS-42556")
+    @Issue("JENKINS-50296")
     @Test
     public void testThreadPoolForRemotingActsAsSystemUser() throws InterruptedException, ExecutionException {
         Future<Authentication> job = Computer.threadPoolForRemoting.submit(Jenkins::getAuthentication);

File: cli/src/main/java/hudson/cli/SSHCLI.java
Patch:
@@ -51,6 +51,8 @@
 import org.apache.sshd.common.util.io.NoCloseOutputStream;
 import org.apache.sshd.common.util.security.SecurityUtils;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 /**
  * Implements SSH connection mode of {@link CLI}.
  * In a separate class to avoid any class loading of {@code sshd-core} when not using {@code -ssh} mode.
@@ -59,6 +61,7 @@
  */
 class SSHCLI {
 
+    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE", justification = "Due to whatever reason FindBugs reports it fot try-with-resources")
     static int sshConnection(String jenkinsUrl, String user, List<String> args, PrivateKeyProvider provider, final boolean strictHostKey) throws IOException {
         Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING); // suppress: BouncyCastle not registered, using the default JCE provider
         URL url = new URL(jenkinsUrl + "login");

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2871,7 +2871,7 @@ private File getRootDirFor(String name) {
      *      or it exists but it's no an instance of the given type.
      * @throws AccessDeniedException as per {@link ItemGroup#getItem}
      */
-    public @CheckForNull <T extends Item> T getItemByFullName(String fullName, Class<T> type) throws AccessDeniedException {
+    public @CheckForNull <T extends Item> T getItemByFullName(@Nonnull String fullName, Class<T> type) throws AccessDeniedException {
         StringTokenizer tokens = new StringTokenizer(fullName,"/");
         ItemGroup parent = this;
 

File: test/src/test/java/hudson/model/RunParameterDefinitionTest.java
Patch:
@@ -26,6 +26,7 @@
 
 import hudson.EnvVars;
 import static org.junit.Assert.*;
+
 import hudson.Launcher;
 import hudson.model.RunParameterDefinition.RunParameterFilter;
 import hudson.tasks.BuildStepMonitor;

File: core/src/main/java/hudson/util/AbstractTaskListener.java
Patch:
@@ -13,4 +13,7 @@
 @Restricted(NoExternalUse.class)
 @RestrictedSince("2.91")
 public abstract class AbstractTaskListener implements TaskListener {
+
+    private static final long serialVersionUID = 7217626701881006422L;
+
 }

File: cli/src/main/java/hudson/cli/SSHCLI.java
Patch:
@@ -51,6 +51,8 @@
 import org.apache.sshd.common.util.io.NoCloseOutputStream;
 import org.apache.sshd.common.util.security.SecurityUtils;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 /**
  * Implements SSH connection mode of {@link CLI}.
  * In a separate class to avoid any class loading of {@code sshd-core} when not using {@code -ssh} mode.
@@ -59,6 +61,7 @@
  */
 class SSHCLI {
 
+    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE", justification = "Due to whatever reason FindBugs reports it fot try-with-resources")
     static int sshConnection(String jenkinsUrl, String user, List<String> args, PrivateKeyProvider provider, final boolean strictHostKey) throws IOException {
         Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING); // suppress: BouncyCastle not registered, using the default JCE provider
         URL url = new URL(jenkinsUrl + "login");

File: cli/src/main/java/hudson/cli/CliEntryPoint.java
Patch:
@@ -34,7 +34,9 @@
  * Remotable interface for CLI entry point on the server side.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated Specific to Remoting-based protocol.
  */
+@Deprecated
 public interface CliEntryPoint {
     /**
      * Just like the static main method.

File: cli/src/main/java/hudson/cli/CliPort.java
Patch:
@@ -8,9 +8,9 @@
 import java.security.PublicKey;
 import java.security.spec.X509EncodedKeySpec;
 
-/**
- * @author Kohsuke Kawaguchi
- */
+    /**
+     * @deprecated Specific to Remoting mode.
+     */
 public final class CliPort {
     /**
      * The TCP endpoint to talk to.

File: cli/src/main/java/hudson/cli/Connection.java
Patch:
@@ -56,6 +56,9 @@
 import java.security.interfaces.RSAPublicKey;
 import java.security.spec.X509EncodedKeySpec;
 
+/**
+ * Used by Jenkins core only in deprecated Remoting-based CLI.
+ */
 public class Connection {
     public final InputStream in;
     public final OutputStream out;

File: cli/src/test/java/hudson/cli/PrivateKeyProviderTest.java
Patch:
@@ -47,7 +47,7 @@
 import org.powermock.modules.junit4.PowerMockRunner;
 
 @RunWith(PowerMockRunner.class)
-@PrepareForTest(CLI.class) // When mocking new operator caller has to be @PreparedForTest, not class itself
+@PrepareForTest({CLI.class, CLIConnectionFactory.class}) // When mocking new operator caller has to be @PreparedForTest, not class itself
 public class PrivateKeyProviderTest {
 
     @Test
@@ -57,7 +57,7 @@ public void specifyKeysExplicitly() throws Exception {
         final File dsaKey = keyFile(".ssh/id_dsa");
         final File rsaKey = keyFile(".ssh/id_rsa");
 
-        run("-i", dsaKey.getAbsolutePath(), "-i", rsaKey.getAbsolutePath(), "-s", "http://example.com");
+        run("-remoting", "-i", dsaKey.getAbsolutePath(), "-i", rsaKey.getAbsolutePath(), "-s", "http://example.com");
 
         verify(cli).authenticate(withKeyPairs(
                 keyPair(dsaKey),
@@ -73,7 +73,7 @@ public void useDefaultKeyLocations() throws Exception {
         final File dsaKey = keyFile(".ssh/id_dsa");
 
         fakeHome();
-        run("-s", "http://example.com");
+        run("-remoting", "-s", "http://example.com");
 
         verify(cli).authenticate(withKeyPairs(
                 keyPair(rsaKey),

File: core/src/main/java/hudson/AbstractMarkupText.java
Patch:
@@ -72,8 +72,8 @@ public final int length() {
      * Adds a start tag and end tag at the specified position.
      *
      * <p>
-     * For example, if the text was "abc", then <tt>addMarkup(1,2,"&lt;b>","&lt;/b>")</tt>
-     * would generate <tt>"a&lt;b>b&lt;/b>c"</tt>
+     * For example, if the text was "abc", then {@code addMarkup(1,2,"<b>","</b>")}
+     * would generate {@code"a<b>b</b>c"}
      */
     public abstract void addMarkup( int startPos, int endPos, String startTag, String endTag );
 

File: core/src/main/java/hudson/BulkChange.java
Patch:
@@ -54,7 +54,7 @@
  *
  * <ol>
  * <li>
- * Mutater methods should invoke {@code this.save()} so that if the method is called outside
+ * Mutator methods should invoke {@code this.save()} so that if the method is called outside
  * a {@link BulkChange}, the result will be saved immediately.
  *
  * <li>
@@ -78,7 +78,7 @@ public class BulkChange implements Closeable {
     public BulkChange(Saveable saveable) {
         this.parent = current();
         this.saveable = saveable;
-        // rememeber who allocated this object in case
+        // remember who allocated this object in case
         // someone forgot to call save() at the end.
         allocator = new Exception();
 

File: core/src/main/java/hudson/DependencyRunner.java
Patch:
@@ -59,7 +59,7 @@ public void run() {
             Set<AbstractProject> topLevelProjects = new HashSet<AbstractProject>();
             // Get all top-level projects
             LOGGER.fine("assembling top level projects");
-            for (AbstractProject p : Jenkins.getInstance().getAllItems(AbstractProject.class))
+            for (AbstractProject p : Jenkins.getInstance().allItems(AbstractProject.class))
                 if (p.getUpstreamProjects().size() == 0) {
                     LOGGER.fine("adding top level project " + p.getName());
                     topLevelProjects.add(p);

File: core/src/main/java/hudson/Extension.java
Patch:
@@ -74,7 +74,8 @@
     /**
      * Used for sorting extensions.
      *
-     * Extensions will be sorted in the descending order of the ordinal.
+     * Extensions will be sorted in the descending order of the ordinal. In other words,
+     * the extensions with the highest numbers will be chosen first.
      * This is a rather poor approach to the problem, so its use is generally discouraged.
      *
      * @since 1.306

File: core/src/main/java/hudson/ExtensionListView.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson;
 
+import hudson.tasks.UserNameResolver;
 import jenkins.model.Jenkins;
 import hudson.util.CopyOnWriteList;
 

File: core/src/main/java/hudson/ExtensionPoint.java
Patch:
@@ -29,6 +29,7 @@
 import java.lang.annotation.Retention;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 import java.lang.annotation.Target;
+import jenkins.util.io.OnMaster;
 
 /**
  * Marker interface that designates extensible components

File: core/src/main/java/hudson/FileSystemProvisionerDescriptor.java
Patch:
@@ -63,7 +63,7 @@ public abstract class FileSystemProvisionerDescriptor extends Descriptor<FileSys
      * @param listener
      *      The status of the operation, error message, etc., should go here.
      * @return
-     *      true if this {@link FileSystemProvisionerDescriptor} is responsible for de-alocating the workspace.
+     *      true if this {@link FileSystemProvisionerDescriptor} is responsible for de-allocating the workspace.
      *      false otherwise, in which case the other {@link FileSystemProvisionerDescriptor}s are asked to
      *      clean up the workspace.
      */

File: core/src/main/java/hudson/LocalPluginManager.java
Patch:
@@ -70,7 +70,7 @@ public LocalPluginManager(@NonNull File rootDir) {
      * If the war file has any "/WEB-INF/plugins/*.jpi", extract them into the plugin directory.
      *
      * @return
-     *      File names of the bundled plugins. Like {"ssh-slaves.jpi","subvesrion.jpi"}
+     *      File names of the bundled plugins. Like {"ssh-slaves.jpi","subversion.jpi"}
      */
     @Override
     protected Collection<String> loadBundledPlugins() {

File: core/src/main/java/hudson/MarkupText.java
Patch:
@@ -131,7 +131,7 @@ public void surroundWithLiteral(String startTag, String endTag) {
         }
 
         /**
-         * Surrounds this subtext with &lt;a>...&lt;/a>. 
+         * Surrounds this subtext with {@code <a>…</a>}.
          */
         public void href(String url) {
             addHyperlink(0,length(),url);
@@ -292,8 +292,8 @@ public String toString() {
      * Returns the fully marked-up text.
      *
      * @param preEscape
-     *      If true, the escaping is for the &lt;PRE> context. This leave SP and CR/LF intact.
-     *      If false, the escape is for the normal HTML, thus SP becomes &amp;nbsp; and CR/LF becomes &lt;BR>
+     *      If true, the escaping is for the {@code <PRE>} context. This leave SP and CR/LF intact.
+     *      If false, the escape is for the normal HTML, thus SP becomes &amp;nbsp; and CR/LF becomes {@code <BR>}
      */
     public String toString(boolean preEscape) {
         if(tags.isEmpty())

File: core/src/main/java/hudson/Platform.java
Patch:
@@ -62,7 +62,7 @@ public static boolean isDarwin() {
     }
 
     /**
-     * Returns true if we run on Mac OS X >= 10.6
+     * Returns true if we run on Mac OS X ≥ 10.6
      */
     public static boolean isSnowLeopardOrLater() {
         try {

File: core/src/main/java/hudson/UDPBroadcastThread.java
Patch:
@@ -24,7 +24,7 @@
 package hudson;
 
 import jenkins.util.SystemProperties;
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.Hudson;
 import jenkins.model.Jenkins;
 import hudson.util.OneShotEvent;
@@ -71,7 +71,7 @@ public UDPBroadcastThread(Jenkins jenkins) throws IOException {
         mcs = new MulticastSocket(PORT);
     }
 
-    @SuppressWarnings("ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD")
+    @SuppressFBWarnings("ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD")
     @Override
     public void run() {
         try {

File: core/src/main/java/hudson/cli/AbstractBuildRangeCommand.java
Patch:
@@ -12,7 +12,9 @@
  * {@link CLICommand} that acts on a series of {@link AbstractBuild}s.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated rather use {@link RunRangeCommand}
  */
+@Deprecated
 public abstract class AbstractBuildRangeCommand extends CLICommand {
     @Argument(metaVar="JOB",usage="Name of the job to build",required=true,index=0)
     public AbstractProject<?,?> job;

File: core/src/main/java/hudson/cli/CancelQuietDownCommand.java
Patch:
@@ -33,7 +33,7 @@
  * Cancel previous quiet down Jenkins - preparation for a restart
  *
  * @author pjanouse
- * @since TODO
+ * @since 2.14
  */
 @Extension
 public class CancelQuietDownCommand extends CLICommand {

File: core/src/main/java/hudson/cli/ClearQueueCommand.java
Patch:
@@ -34,7 +34,7 @@
  * Clears the build queue
  *
  * @author pjanouse
- * @since TODO
+ * @since 1.654
  */
 @Extension
 public class ClearQueueCommand extends CLICommand {

File: core/src/main/java/hudson/cli/CliManagerImpl.java
Patch:
@@ -44,7 +44,9 @@
  * {@link CliEntryPoint} implementation exposed to the remote CLI.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated Specific to Remoting-based protocol.
  */
+@Deprecated
 public class CliManagerImpl implements CliEntryPoint, Serializable {
     private transient final Channel channel;
     

File: core/src/main/java/hudson/cli/CliTransportAuthenticator.java
Patch:
@@ -20,7 +20,9 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.419
+ * @deprecated Specific to Remoting-based protocol.
  */
+@Deprecated
 public abstract class CliTransportAuthenticator implements ExtensionPoint {
     /**
      * Checks if this implementation supports the specified protocol.

File: core/src/main/java/hudson/cli/CommandDuringBuild.java
Patch:
@@ -36,7 +36,9 @@
  * Base class for those commands that are valid only during a build.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated Limited to Remoting-based protocol.
  */
+@Deprecated
 public abstract class CommandDuringBuild extends CLICommand {
     /**
      * This method makes sense only when called from within the build kicked by Jenkins.

File: core/src/main/java/hudson/cli/DeleteJobCommand.java
Patch:
@@ -34,8 +34,9 @@
 import java.util.logging.Logger;
 
 /**
+ * CLI command, which deletes a job or multiple jobs.
  * @author pjanouse
- * @since TODO
+ * @since 1.618
  */
 @Extension
 public class DeleteJobCommand extends CLICommand {
@@ -83,7 +84,7 @@ protected int run() throws Exception {
         }
 
         if (errorOccurred) {
-            throw new AbortException("Error occured while performing this command, see previous stderr output.");
+            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);
         }
         return 0;
     }

File: core/src/main/java/hudson/cli/DeleteViewCommand.java
Patch:
@@ -95,7 +95,7 @@ protected int run() throws Exception {
         }
 
         if (errorOccurred) {
-            throw new AbortException("Error occured while performing this command, see previous stderr output.");
+            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);
         }
         return 0;
     }

File: core/src/main/java/hudson/cli/GroovyshCommand.java
Patch:
@@ -96,7 +96,7 @@ protected Groovysh createShell(InputStream stdin, PrintStream stdout,
             private static final long serialVersionUID = 1L;
 
             @SuppressWarnings("unused")
-            @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
+            @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
             public Object doCall(Object[] args) {
                 assert(args.length == 1);
                 assert(args[0] instanceof Shell);
@@ -119,7 +119,7 @@ public Object doCall(Object[] args) {
             private static final long serialVersionUID = 1L;
 
             @SuppressWarnings("unused")
-            @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
+            @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
             public Object doCall(Object[] args) throws ChannelClosedException {
                 if (args.length == 1 && args[0] instanceof ChannelClosedException) {
                     throw (ChannelClosedException)args[0];

File: core/src/main/java/hudson/cli/HelpCommand.java
Patch:
@@ -53,7 +53,7 @@ public String getShortDescription() {
     protected int run() throws Exception {
         if (!Jenkins.getActiveInstance().hasPermission(Jenkins.READ)) {
             throw new AccessDeniedException("You must authenticate to access this Jenkins.\n"
-                    + "Use --username/--password/--password-file parameters or login command.");
+                    + hudson.cli.client.Messages.CLI_Usage());
         }
 
         if (command != null)

File: core/src/main/java/hudson/cli/InstallToolCommand.java
Patch:
@@ -48,7 +48,9 @@
  * Performs automatic tool installation on demand.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated Limited to Remoting-based protocol.
  */
+@Deprecated
 @Extension
 public class InstallToolCommand extends CLICommand {
     @Argument(index=0,metaVar="KIND",usage="The type of the tool to install, such as 'Ant'")

File: core/src/main/java/hudson/cli/ListJobsCommand.java
Patch:
@@ -66,7 +66,7 @@ protected int run() throws Exception {
 
                 // If item group was found use it's jobs.
                 if (item instanceof ModifiableTopLevelItemGroup) {
-                    jobs = Items.getAllItems((ModifiableTopLevelItemGroup) item, TopLevelItem.class);
+                    jobs = ((ModifiableTopLevelItemGroup) item).getAllItems(TopLevelItem.class);
                 }
                 // No view and no item group with the given name found.
                 else {

File: core/src/main/java/hudson/cli/OfflineNodeCommand.java
Patch:
@@ -39,8 +39,9 @@
 import java.util.List;
 
 /**
+ * CLI Command, which puts the Jenkins node offline.
  * @author pjanouse
- * @since TODO
+ * @since 2.15
  */
 @Extension
 public class OfflineNodeCommand extends CLICommand {
@@ -88,7 +89,7 @@ protected int run() throws Exception {
         }
 
         if (errorOccurred) {
-            throw new AbortException("Error occured while performing this command, see previous stderr output.");
+            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);
         }
         return 0;
     }

File: core/src/main/java/hudson/cli/OnlineNodeCommand.java
Patch:
@@ -37,8 +37,9 @@
 import java.util.List;
 
 /**
+ * CLI Command, which moves the node to the online state.
  * @author pjanouse
- * @since TODO
+ * @since 1.642
  */
 @Extension
 public class OnlineNodeCommand extends CLICommand {
@@ -86,7 +87,7 @@ protected int run() throws Exception {
         }
 
         if (errorOccurred){
-            throw new AbortException("Error occured while performing this command, see previous stderr output.");
+            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);
         }
         return 0;
     }

File: core/src/main/java/hudson/cli/QuietDownCommand.java
Patch:
@@ -34,7 +34,7 @@
  * Quiet down Jenkins - preparation for a restart
  *
  * @author pjanouse
- * @since TODO
+ * @since 2.14
  */
 @Extension
 public class QuietDownCommand extends CLICommand {

File: core/src/main/java/hudson/cli/SetBuildDescriptionCommand.java
Patch:
@@ -1,7 +1,7 @@
 package hudson.cli;
 
 import hudson.Extension;
-import hudson.model.AbstractProject;
+import hudson.model.Job;
 import hudson.model.Run;
 
 import java.io.Serializable;
@@ -18,7 +18,7 @@ public String getShortDescription() {
      }
 
     @Argument(metaVar="JOB",usage="Name of the job to build",required=true,index=0)
-    public transient AbstractProject<?,?> job;
+    public transient Job<?,?> job;
 
     @Argument(metaVar="BUILD#",usage="Number of the build",required=true,index=1)
     public int number;

File: core/src/main/java/hudson/cli/SetBuildDisplayNameCommand.java
Patch:
@@ -1,7 +1,7 @@
 package hudson.cli;
 
 import hudson.Extension;
-import hudson.model.AbstractProject;
+import hudson.model.Job;
 import hudson.model.Run;
 import org.apache.commons.io.IOUtils;
 import org.kohsuke.args4j.Argument;
@@ -18,7 +18,7 @@ public String getShortDescription() {
     }
 
     @Argument(metaVar="JOB", usage="Name of the job to build", required=true, index=0)
-    public transient AbstractProject<?, ?> job;
+    public transient Job<?, ?> job;
 
     @Argument(metaVar="BUILD#", usage="Number of the build", required=true, index=1)
     public int number;

File: core/src/main/java/hudson/cli/SetBuildParameterCommand.java
Patch:
@@ -15,7 +15,9 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.514
+ * @deprecated Limited to Remoting-based protocol.
  */
+@Deprecated
 @Extension
 public class SetBuildParameterCommand extends CommandDuringBuild {
     @Argument(index=0, metaVar="NAME", required=true, usage="Name of the build variable")

File: core/src/main/java/hudson/cli/SetBuildResultCommand.java
Patch:
@@ -33,7 +33,9 @@
  * Sets the result of the current build. Works only if invoked from within a build.
  * 
  * @author Kohsuke Kawaguchi
+ * @deprecated Limited to Remoting-based protocol.
  */
+@Deprecated
 @Extension
 public class SetBuildResultCommand extends CommandDuringBuild {
     @Argument(metaVar="RESULT",required=true)

File: core/src/main/java/hudson/cli/WaitNodeOfflineCommand.java
Patch:
@@ -28,8 +28,9 @@
 import org.kohsuke.args4j.Argument;
 
 /**
+ * CLI command, which waits till the node switches to the offline state.
  * @author pjanouse
- * @since TODO
+ * @since 2.16
  */
 @Extension
 public class WaitNodeOfflineCommand extends CLICommand {

File: core/src/main/java/hudson/cli/WaitNodeOnlineCommand.java
Patch:
@@ -28,8 +28,9 @@
 import org.kohsuke.args4j.Argument;
 
 /**
+ * CLI command, which waits till the node switches to the online state.
  * @author pjanouse
- * @since TODO
+ * @since 2.16
  */
 @Extension
 public class WaitNodeOnlineCommand extends CLICommand {

File: core/src/main/java/hudson/cli/handlers/ViewOptionHandler.java
Patch:
@@ -88,8 +88,8 @@ public int parseArguments(Parameters params) throws CmdLineException {
      * @throws IllegalStateException
      *      If cannot get active Jenkins instance or view can't contain a views
      * @throws AccessDeniedException
-     *      If user doens't have a READ permission for the view
-     * @since TODO
+     *      If user doesn't have a READ permission for the view
+     * @since 1.618
      */
     @CheckForNull
     public View getView(final String name) {

File: core/src/main/java/hudson/console/AnnotatedLargeText.java
Patch:
@@ -28,7 +28,7 @@
 import com.trilead.ssh2.crypto.Base64;
 import jenkins.model.Jenkins;
 import hudson.remoting.ObjectInputStreamEx;
-import hudson.util.TimeUnit2;
+import java.util.concurrent.TimeUnit;
 import jenkins.security.CryptoConfidentialKey;
 import org.apache.commons.io.output.ByteArrayOutputStream;
 import org.kohsuke.stapler.Stapler;
@@ -123,7 +123,7 @@ private ConsoleAnnotator createAnnotator(StaplerRequest req) throws IOException
                         Jenkins.getInstance().pluginManager.uberClassLoader);
                 try {
                     long timestamp = ois.readLong();
-                    if (TimeUnit2.HOURS.toMillis(1) > abs(System.currentTimeMillis()-timestamp))
+                    if (TimeUnit.HOURS.toMillis(1) > abs(System.currentTimeMillis()-timestamp))
                         // don't deserialize something too old to prevent a replay attack
                         return (ConsoleAnnotator)ois.readObject();
                 } finally {

File: core/src/main/java/hudson/console/ConsoleAnnotationDescriptor.java
Patch:
@@ -27,7 +27,7 @@
 import hudson.ExtensionPoint;
 import hudson.model.Descriptor;
 import jenkins.model.Jenkins;
-import hudson.util.TimeUnit2;
+import java.util.concurrent.TimeUnit;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 import org.kohsuke.stapler.WebMethod;
@@ -80,12 +80,12 @@ private URL hasResource(String name) {
 
     @WebMethod(name="script.js")
     public void doScriptJs(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
-        rsp.serveFile(req, hasResource("/script.js"), TimeUnit2.DAYS.toMillis(1));
+        rsp.serveFile(req, hasResource("/script.js"), TimeUnit.DAYS.toMillis(1));
     }
 
     @WebMethod(name="style.css")
     public void doStyleCss(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
-        rsp.serveFile(req, hasResource("/style.css"), TimeUnit2.DAYS.toMillis(1));
+        rsp.serveFile(req, hasResource("/style.css"), TimeUnit.DAYS.toMillis(1));
     }
 
     /**

File: core/src/main/java/hudson/console/ConsoleAnnotatorFactory.java
Patch:
@@ -27,7 +27,7 @@
 import hudson.ExtensionList;
 import hudson.ExtensionPoint;
 import hudson.model.Run;
-import hudson.util.TimeUnit2;
+import java.util.concurrent.TimeUnit;
 import org.jvnet.tiger_types.Types;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
@@ -114,12 +114,12 @@ private URL getResource(String fileName) {
      */
     @WebMethod(name="script.js")
     public void doScriptJs(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
-        rsp.serveFile(req, getResource("/script.js"), TimeUnit2.DAYS.toMillis(1));
+        rsp.serveFile(req, getResource("/script.js"), TimeUnit.DAYS.toMillis(1));
     }
 
     @WebMethod(name="style.css")
     public void doStyleCss(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
-        rsp.serveFile(req, getResource("/style.css"), TimeUnit2.DAYS.toMillis(1));
+        rsp.serveFile(req, getResource("/style.css"), TimeUnit.DAYS.toMillis(1));
     }
 
     /**

File: core/src/main/java/hudson/diagnosis/HudsonHomeDiskUsageChecker.java
Patch:
@@ -64,10 +64,10 @@ protected void doRun() {
     private static final Logger LOGGER = Logger.getLogger(HudsonHomeDiskUsageChecker.class.getName());
 
     /**
-     * Gets the minimum amount of space to check for, with a default of 1GB
+     * Gets the minimum amount of space to check for, with a default of 10GB
      */
     public static long FREE_SPACE_THRESHOLD = Long.getLong(
             HudsonHomeDiskUsageChecker.class.getName() + ".freeSpaceThreshold",
-            1024L*1024*1024);
+            1024L*1024*1024*10);
 
 }

File: core/src/main/java/hudson/diagnosis/HudsonHomeDiskUsageMonitor.java
Patch:
@@ -32,6 +32,7 @@
 import org.kohsuke.stapler.HttpResponse;
 import org.kohsuke.stapler.HttpResponses;
 import org.kohsuke.stapler.QueryParameter;
+import org.kohsuke.stapler.interceptor.RequirePOST;
 
 import java.io.IOException;
 import java.util.List;
@@ -64,6 +65,7 @@ public String getDisplayName() {
     /**
      * Depending on whether the user said "yes" or "no", send him to the right place.
      */
+    @RequirePOST
     public HttpResponse doAct(@QueryParameter String no) throws IOException {
         if(no!=null) {
             disable(true);

File: core/src/main/java/hudson/diagnosis/MemoryUsageMonitor.java
Patch:
@@ -23,7 +23,7 @@
  */
 package hudson.diagnosis;
 
-import hudson.util.TimeUnit2;
+import java.util.concurrent.TimeUnit;
 import hudson.util.ColorPalette;
 import hudson.Extension;
 import hudson.model.PeriodicWork;
@@ -116,7 +116,7 @@ public MemoryUsageMonitor() {
     }
 
     public long getRecurrencePeriod() {
-        return TimeUnit2.SECONDS.toMillis(10);
+        return TimeUnit.SECONDS.toMillis(10);
     }
 
     protected void doRun() {

File: core/src/main/java/hudson/diagnosis/ReverseProxySetupMonitor.java
Patch:
@@ -37,13 +37,14 @@
 import java.util.logging.Logger;
 import jenkins.model.Jenkins;
 import org.kohsuke.stapler.Stapler;
+import org.kohsuke.stapler.interceptor.RequirePOST;
 
 /**
  * Looks out for a broken reverse proxy setup that doesn't rewrite the location header correctly.
  *
  * <p>
  * Have the JavaScript make an AJAX call, to which we respond with 302 redirect. If the reverse proxy
- * is done correctly, this will be handled by {@link #doFoo()}, but otherwise we'll report that as an error.
+ * is done correctly, this will be handled by web methods, but otherwise we'll report that as an error.
  * Unfortunately, {@code XmlHttpRequest} doesn't expose properties that allow the client-side JavaScript
  * to learn the details of the failure, so we have to make do with limited information.
  *
@@ -84,6 +85,7 @@ public void getTestForReverseProxySetup(String rest) {
     /**
      * Depending on whether the user said "yes" or "no", send him to the right place.
      */
+    @RequirePOST
     public HttpResponse doAct(@QueryParameter String no) throws IOException {
         if(no!=null) { // dismiss
             disable(true);

File: core/src/main/java/hudson/diagnosis/TooManyJobsButNoView.java
Patch:
@@ -29,6 +29,7 @@
 import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
+import org.kohsuke.stapler.interceptor.RequirePOST;
 
 import java.io.IOException;
 
@@ -56,6 +57,7 @@ public boolean isActivated() {
     /**
      * Depending on whether the user said "yes" or "no", send him to the right place.
      */
+    @RequirePOST
     public void doAct(StaplerRequest req, StaplerResponse rsp) throws IOException {
         if(req.hasParameter("no")) {
             disable(true);

File: core/src/main/java/hudson/init/InitMilestone.java
Patch:
@@ -82,7 +82,7 @@ public enum InitMilestone implements Milestone {
      * By this milestone, all programmatically constructed extension point implementations
      * should be added.
      */
-    EXTENSIONS_AUGMENTED("Augmented all extensions"),
+    EXTENSIONS_AUGMENTED("Augmented all extensions"), // TODO nothing attains() this so when does it actually happen?
 
     /**
      * By this milestone, all jobs and their build records are loaded from disk.

File: core/src/main/java/hudson/init/package-info.java
Patch:
@@ -33,7 +33,7 @@
  *
  * <p>
  * Such micro-scopic dependencies are organized into a bigger directed acyclic graph, which is then executed
- * via <tt>Session</tt>. During execution of the reactor, additional tasks can be discovred and added to
+ * via <tt>Session</tt>. During execution of the reactor, additional tasks can be discovered and added to
  * the DAG. We use this additional indirection to:
  *
  * <ol>

File: core/src/main/java/hudson/logging/LogRecorderManager.java
Patch:
@@ -129,7 +129,8 @@ public ContextMenu doChildrenContextMenu(StaplerRequest request, StaplerResponse
     /**
      * Configure the logging level.
      */
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE")
+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings("LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE")
+    @RequirePOST
     public HttpResponse doConfigLogger(@QueryParameter String name, @QueryParameter String level) {
         Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         Level lv;

File: core/src/main/java/hudson/model/AsyncAperiodicWork.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import hudson.Functions;
 import hudson.security.ACL;
 import hudson.util.StreamTaskListener;
 import java.io.File;
@@ -119,9 +120,9 @@ public void run() {
 
                         execute(l);
                     } catch (IOException e) {
-                        e.printStackTrace(l.fatalError(e.getMessage()));
+                        Functions.printStackTrace(e, l.fatalError(e.getMessage()));
                     } catch (InterruptedException e) {
-                        e.printStackTrace(l.fatalError("aborted"));
+                        Functions.printStackTrace(e, l.fatalError("aborted"));
                     } finally {
                         stopTime = System.currentTimeMillis();
                         try {

File: core/src/main/java/hudson/model/AsyncPeriodicWork.java
Patch:
@@ -1,5 +1,6 @@
 package hudson.model;
 
+import hudson.Functions;
 import hudson.security.ACL;
 import hudson.util.StreamTaskListener;
 import java.io.File;
@@ -99,9 +100,9 @@ public void run() {
 
                         execute(l);
                     } catch (IOException e) {
-                        e.printStackTrace(l.fatalError(e.getMessage()));
+                        Functions.printStackTrace(e, l.fatalError(e.getMessage()));
                     } catch (InterruptedException e) {
-                        e.printStackTrace(l.fatalError("aborted"));
+                        Functions.printStackTrace(e, l.fatalError("aborted"));
                     } finally {
                         stopTime = System.currentTimeMillis();
                         try {

File: core/src/main/java/hudson/model/Build.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import hudson.Functions;
 import hudson.Launcher;
 import hudson.tasks.BuildStep;
 import hudson.tasks.BuildWrapper;
@@ -115,7 +116,7 @@ public void run() {
 
     /**
      * @deprecated as of 1.467
-     *      Override the {@link #run()} method by calling {@link #execute(RunExecution)} with
+     *      Override the {@link #run()} method by calling {@link #execute(hudson.model.Run.RunExecution)} with
      *      proper execution object.
      */
     @Restricted(NoExternalUse.class)
@@ -195,7 +196,7 @@ public void cleanUp(@Nonnull BuildListener listener) throws Exception {
                 performAllBuildSteps(listener, project.getPublishersList(), false);
                 performAllBuildSteps(listener, project.getProperties(), false);
             } catch (Exception x) {
-                x.printStackTrace(listener.error(Messages.Build_post_build_steps_failed()));
+                Functions.printStackTrace(x, listener.error(Messages.Build_post_build_steps_failed()));
             }
             super.cleanUp(listener);
         }

File: core/src/main/java/hudson/model/ChoiceParameterDefinition.java
Patch:
@@ -105,7 +105,7 @@ public String getHelpFile() {
         }
 
         /**
-         * Checks if parameterised build choices are valid.
+         * Checks if parameterized build choices are valid.
          */
         public FormValidation doCheckChoices(@QueryParameter String value) {
             if (ChoiceParameterDefinition.areValidChoices(value)) {

File: core/src/main/java/hudson/model/EnvironmentContributor.java
Patch:
@@ -41,10 +41,9 @@
  * of {@link Job}s to compute values.
  *
  * <h2>Views</h2>
- * <h4>buildEnv.groovy/.jelly</h4>
- * <p>
+ * <h3>buildEnv.groovy/.jelly</h3>
  * When Jenkins displays the help page listing all the environment variables available for a build, it does
- * so by combining all the {@code buildEnv} views from this extension point. This view should use the &lt;t:buildEnvVar> tag
+ * so by combining all the {@code buildEnv} views from this extension point. This view should use the {@code <t:buildEnvVar>} tag
  * to render a variable.
  *
  * <p>

File: core/src/main/java/hudson/model/ExecutorListener.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import hudson.slaves.SlaveComputer;
 
 /**
  * A listener for task related events from executors.

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -1256,7 +1256,7 @@ void save(File file) throws IOException {
             AtomicFileWriter afw = new AtomicFileWriter(file);
             try {
                 PrintWriter w = new PrintWriter(afw);
-                w.println("<?xml version='1.0' encoding='UTF-8'?>");
+                w.println("<?xml version='1.1' encoding='UTF-8'?>");
                 w.println("<fingerprint>");
                 w.print("  <timestamp>");
                 w.print(DATE_CONVERTER.toString(timestamp));
@@ -1443,14 +1443,14 @@ private static boolean canDiscoverItem(@Nonnull final String fullName) {
 
             // To get the item existence fact, a user needs Item.DISCOVER for the item
             // and Item.READ for all container folders.
-            boolean canDiscoverTheItem = itemBySystemUser.getACL().hasPermission(userAuth, Item.DISCOVER);
+            boolean canDiscoverTheItem = itemBySystemUser.hasPermission(userAuth, Item.DISCOVER);
             if (canDiscoverTheItem) {
                 ItemGroup<?> current = itemBySystemUser.getParent();
                 do {
                     if (current instanceof Item) {
                         final Item i = (Item) current;
                         current = i.getParent();
-                        if (!i.getACL().hasPermission(userAuth, Item.READ)) {
+                        if (!i.hasPermission(userAuth, Item.READ)) {
                             canDiscoverTheItem = false;
                         }
                     } else {

File: core/src/main/java/hudson/model/FingerprintCleanupThread.java
Patch:
@@ -25,6 +25,7 @@
 
 import hudson.Extension;
 import hudson.ExtensionList;
+import hudson.Functions;
 import jenkins.model.Jenkins;
 import org.jenkinsci.Symbol;
 
@@ -113,7 +114,7 @@ private boolean check(File fingerprintFile, TaskListener listener) {
                 return fp.trim();
             }
         } catch (IOException e) {
-            e.printStackTrace(listener.error("Failed to process " + fingerprintFile));
+            Functions.printStackTrace(e, listener.error("Failed to process " + fingerprintFile));
             return false;
         }
     }

File: core/src/main/java/hudson/model/HealthReport.java
Patch:
@@ -84,7 +84,7 @@ public class HealthReport implements Serializable, Comparable<HealthReport> {
     /**
      * The path to the icon corresponding to this health score or <code>null</code> to use the default icon
      * corresponding to the current health score.
-     * <p/>
+     * <p>
      * If the path begins with a '/' then it will be the absolute path, otherwise the image is assumed to be in one of
      * <code>/images/16x16/</code>, <code>/images/24x24/</code> or <code>/images/32x32/</code> depending on the icon
      * size selected by the user.
@@ -110,7 +110,7 @@ public class HealthReport implements Serializable, Comparable<HealthReport> {
      * @param score       The percentage health score (from 0 to 100 inclusive).
      * @param iconUrl     The path to the icon corresponding to this {@link Action}'s health or <code>null</code> to
      *                    display the default icon corresponding to the current health score.
-     *                    <p/>
+     *                    <p>
      *                    If the path begins with a '/' then it will be the absolute path, otherwise the image is
      *                    assumed to be in one of <code>/images/16x16/</code>, <code>/images/24x24/</code> or
      *                    <code>/images/32x32/</code> depending on the icon size selected by the user.
@@ -131,7 +131,7 @@ public HealthReport(int score, String iconUrl, String description) {
      * @param score       The percentage health score (from 0 to 100 inclusive).
      * @param iconUrl     The path to the icon corresponding to this {@link Action}'s health or <code>null</code> to
      *                    display the default icon corresponding to the current health score.
-     *                    <p/>
+     *                    <p>
      *                    If the path begins with a '/' then it will be the absolute path, otherwise the image is
      *                    assumed to be in one of <code>/images/16x16/</code>, <code>/images/24x24/</code> or
      *                    <code>/images/32x32/</code> depending on the icon size selected by the user.

File: core/src/main/java/hudson/model/JobPropertyDescriptor.java
Patch:
@@ -77,8 +77,8 @@ public JobProperty<?> newInstance(StaplerRequest req, JSONObject formData) throw
      * given job type.
      * 
      * <p>
-     * The default implementation of this method checks if the given job type is assignable to 'J' of
-     * {@link JobProperty}<tt>&lt;J></tt>, but subtypes can extend this to change this behavior.
+     * The default implementation of this method checks if the given job type is assignable to {@code J} of
+     * {@link JobProperty}{@code <J>}, but subtypes can extend this to change this behavior.
      *
      * @return
      *      true to indicate applicable, in which case the property will be
@@ -91,7 +91,7 @@ public boolean isApplicable(Class<? extends Job> jobType) {
             Class applicable = Types.erasure(Types.getTypeArgument(pt, 0));
             return applicable.isAssignableFrom(jobType);
         } else {
-            throw new AssertionError(clazz+" doesn't properly parameterize JobProperty. The isApplicable() method must be overriden.");
+            throw new AssertionError(clazz+" doesn't properly parameterize JobProperty. The isApplicable() method must be overridden.");
         }
     }
 

File: core/src/main/java/hudson/model/MyView.java
Patch:
@@ -66,7 +66,7 @@ public boolean contains(TopLevelItem item) {
     @Override
     public TopLevelItem doCreateItem(StaplerRequest req, StaplerResponse rsp)
             throws IOException, ServletException {
-        ItemGroup<? extends TopLevelItem> ig = getOwnerItemGroup();
+        ItemGroup<? extends TopLevelItem> ig = getOwner().getItemGroup();
         if (ig instanceof ModifiableItemGroup) {
             return ((ModifiableItemGroup<? extends TopLevelItem>)ig).doCreateItem(req, rsp);
         }
@@ -76,7 +76,7 @@ public TopLevelItem doCreateItem(StaplerRequest req, StaplerResponse rsp)
     @Override
     public Collection<TopLevelItem> getItems() {
         List<TopLevelItem> items = new ArrayList<TopLevelItem>();
-        for (TopLevelItem item : getOwnerItemGroup().getItems()) {
+        for (TopLevelItem item : getOwner().getItemGroup().getItems()) {
             if (item.hasPermission(Item.CONFIGURE)) {
                 items.add(item);
             }

File: core/src/main/java/hudson/model/PeriodicWork.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.Random;
 
 import static hudson.init.InitMilestone.JOB_LOADED;
+import hudson.triggers.Trigger;
 
 /**
  * Extension point to perform a periodic task in Hudson (through {@link Timer}.)

File: core/src/main/java/hudson/model/PermalinkProjectAction.java
Patch:
@@ -49,7 +49,7 @@ public interface PermalinkProjectAction extends Action {
      *
      * <p>
      * Because {@link Permalink} is a strategy-pattern object,
-     * this method should normally return a pre-initialzied
+     * this method should normally return a pre-initialized
      * read-only static list object.  
      *
      * @return

File: core/src/main/java/hudson/model/ReconfigurableDescribable.java
Patch:
@@ -43,8 +43,7 @@
  * <h2>Invisible Property</h2>
  * <p>
  * This mechanism can be used to create an entirely invisible {@link Describable}, which is handy
- * for {@link NodeProperty}, {@link JobProperty}, etc. To do so, define a descriptor with null
- * {@linkplain Descriptor#getDisplayName() display name} and empty config.jelly to prevent it from
+ * for {@link NodeProperty}, {@link JobProperty}, etc. To do so, define an empty config.jelly to prevent it from
  * showing up in the config UI, then implement {@link #reconfigure(StaplerRequest, JSONObject)}
  * and simply return {@code this}.
  *

File: core/src/main/java/hudson/model/RunMap.java
Patch:
@@ -39,6 +39,7 @@
 import jenkins.model.lazy.AbstractLazyLoadRunMap;
 import static jenkins.model.lazy.AbstractLazyLoadRunMap.Direction.*;
 import jenkins.model.lazy.BuildReference;
+import jenkins.model.lazy.LazyBuildMixIn;
 import org.apache.commons.collections.comparators.ReverseComparator;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;

File: core/src/main/java/hudson/model/Saveable.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.model;
 
 import hudson.BulkChange;
+import hudson.model.listeners.SaveableListener;
 import java.io.IOException;
 
 /**

File: core/src/main/java/hudson/model/TaskAction.java
Patch:
@@ -35,6 +35,7 @@
 
 import hudson.security.Permission;
 import hudson.security.ACL;
+import org.kohsuke.stapler.interceptor.RequirePOST;
 
 /**
  * Partial {@link Action} implementation for those who kick some
@@ -49,7 +50,7 @@
  */
 public abstract class TaskAction extends AbstractModelObject implements Action {
     /**
-     * If non-null, that means either the activitiy is in progress
+     * If non-null, that means either the activity is in progress
      * asynchronously, or it failed unexpectedly and the thread is dead.
      */
     protected transient volatile TaskThread workerThread;
@@ -137,6 +138,7 @@ public void doProgressiveHtml( StaplerRequest req, StaplerResponse rsp) throws I
     /**
      * Clears the error status.
      */
+    @RequirePOST
     public synchronized void doClearError(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
         getACL().checkPermission(getPermission());
 

File: core/src/main/java/hudson/model/TaskThread.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import hudson.Functions;
 import hudson.console.AnnotatedLargeText;
 import hudson.util.StreamTaskListener;
 
@@ -131,7 +132,7 @@ public final void run() {
         } catch (InterruptedException e) {
             listener.getLogger().println("Aborted");
         } catch (Exception e) {
-            e.printStackTrace(listener.getLogger());
+            Functions.printStackTrace(e, listener.getLogger());
         } finally {
             listener = null;
             isRunning =false;

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -284,6 +284,9 @@ public HttpResponse doConfirmRename(@QueryParameter String newName) throws IOExc
         try {
             Jenkins.checkGoodName(newName);
             assert newName != null; // Would have thrown Failure
+            if (newName.equals(name)) {
+                return FormValidation.warning(Messages.AbstractItem_NewNameUnchanged());
+            }
             Jenkins.get().getProjectNamingStrategy().checkName(newName);
             checkIfNameIsUsed(newName);
             checkRename(newName);

File: core/src/main/java/jenkins/security/ClassFilterImpl.java
Patch:
@@ -157,11 +157,11 @@ public boolean isBlacklisted(Class _c) {
             String location = codeSource(c);
             if (location != null) {
                 if (c.isAnonymousClass()) { // e.g., pkg.Outer$1
-                    LOGGER.warning("JENKINS-49573: attempt to serialize anonymous " + c + " in " + location);
+                    LOGGER.warning("JENKINS-49573: attempt to (de-)serialize anonymous " + c + " in " + location);
                 } else if (c.isLocalClass()) { // e.g., pkg.Outer$1Local
-                    LOGGER.warning("JENKINS-49573: attempt to serialize local " + c + " in " + location);
+                    LOGGER.warning("JENKINS-49573: attempt to (de-)serialize local " + c + " in " + location);
                 } else if (c.isSynthetic()) { // e.g., pkg.Outer$$Lambda$1/12345678
-                    LOGGER.warning("JENKINS-49573: attempt to serialize synthetic " + c + " in " + location);
+                    LOGGER.warning("JENKINS-49573: attempt to (de-)serialize synthetic " + c + " in " + location);
                 }
                 if (isLocationWhitelisted(location)) {
                     LOGGER.log(Level.FINE, "permitting {0} due to its location in {1}", new Object[] {name, location});

File: core/src/main/java/jenkins/security/ClassFilterImpl.java
Patch:
@@ -157,11 +157,11 @@ public boolean isBlacklisted(Class _c) {
             String location = codeSource(c);
             if (location != null) {
                 if (c.isAnonymousClass()) { // e.g., pkg.Outer$1
-                    LOGGER.warning("JENKINS-49573: attempt to serialize anonymous " + c + " in " + location);
+                    LOGGER.warning("JENKINS-49573: attempt to (de-)serialize anonymous " + c + " in " + location);
                 } else if (c.isLocalClass()) { // e.g., pkg.Outer$1Local
-                    LOGGER.warning("JENKINS-49573: attempt to serialize local " + c + " in " + location);
+                    LOGGER.warning("JENKINS-49573: attempt to (de-)serialize local " + c + " in " + location);
                 } else if (c.isSynthetic()) { // e.g., pkg.Outer$$Lambda$1/12345678
-                    LOGGER.warning("JENKINS-49573: attempt to serialize synthetic " + c + " in " + location);
+                    LOGGER.warning("JENKINS-49573: attempt to (de-)serialize synthetic " + c + " in " + location);
                 }
                 if (isLocationWhitelisted(location)) {
                     LOGGER.log(Level.FINE, "permitting {0} due to its location in {1}", new Object[] {name, location});

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -296,7 +296,7 @@ private Object readResolve() {
     public void onAttached(Run<?, ?> r) {
         ParametersDefinitionProperty p = r.getParent().getProperty(ParametersDefinitionProperty.class);
         if (p != null) {
-            this.parameterDefinitionNames = p.getParameterDefinitionNames();
+            this.parameterDefinitionNames = new ArrayList<>(p.getParameterDefinitionNames());
         } else {
             this.parameterDefinitionNames = Collections.emptyList();
         }

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -67,6 +67,7 @@
 import jenkins.util.ContextResettingExecutorService;
 import jenkins.security.MasterToSlaveCallable;
 
+import org.apache.commons.lang.StringUtils;
 import org.jenkins.ui.icon.Icon;
 import org.jenkins.ui.icon.IconSet;
 import org.kohsuke.accmod.Restricted;
@@ -1473,7 +1474,7 @@ public void doConfigSubmit( StaplerRequest req, StaplerResponse rsp ) throws IOE
         }
 
         String nExecutors = req.getSubmittedForm().getString("numExecutors");
-        if (Integer.parseInt(nExecutors)<=0) {
+        if (StringUtils.isBlank(nExecutors) || Integer.parseInt(nExecutors)<=0) {
             throw new FormException(Messages.Slave_InvalidConfig_Executors(nodeName), "numExecutors");
         }
 

File: core/src/main/java/jenkins/security/ApiTokenStore.java
Patch:
@@ -199,7 +199,7 @@ private boolean isLegacyToken(String token) {
      * ^^^^^^^^^^^^----------------
      */
     private String getVersionOfToken(String token) {
-        return token.substring(0, 1);
+        return token.substring(0, 2);
     }
     
     /**

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -296,7 +296,7 @@ private Object readResolve() {
     public void onAttached(Run<?, ?> r) {
         ParametersDefinitionProperty p = r.getParent().getProperty(ParametersDefinitionProperty.class);
         if (p != null) {
-            this.parameterDefinitionNames = p.getParameterDefinitionNames();
+            this.parameterDefinitionNames = new ArrayList<>(p.getParameterDefinitionNames());
         } else {
             this.parameterDefinitionNames = Collections.emptyList();
         }

File: core/src/main/java/hudson/Util.java
Patch:
@@ -1094,8 +1094,8 @@ public static String singleQuote(String s) {
     /**
      * Escapes HTML unsafe characters like &lt;, &amp; to the respective character entities.
      */
-    @Nonnull
-    public static String escape(@Nonnull String text) {
+    @Nullable
+    public static String escape(@CheckForNull String text) {
         if (text==null)     return null;
         StringBuilder buf = new StringBuilder(text.length()+64);
         for( int i=0; i<text.length(); i++ ) {

File: core/src/main/java/jenkins/security/ApiTokenProperty.java
Patch:
@@ -165,6 +165,7 @@ public boolean matchesPassword(String token) {
         }
         
         // use the new way to find a match in order to trigger the counter / lastUseDate logic
+        // as the legacy token (if existing) are also stored there
         boolean matchFound = tokenStore.doesContainToken(token);
         if (matchFound) {
             try {

File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java
Patch:
@@ -366,7 +366,7 @@ private static String createBackRef(int times) {
     private static void zip(OutputStream outputStream, VirtualFile dir, String glob) throws IOException {
         try (ZipOutputStream zos = new ZipOutputStream(outputStream)) {
             zos.setEncoding(System.getProperty("file.encoding")); // TODO JENKINS-20663 make this overridable via query parameter
-            for (String n : dir.list(glob, null, /* TODO what is the user expectation? */true)) {
+            for (String n : dir.list(glob.isEmpty() ? "**" : glob, null, /* TODO what is the user expectation? */true)) {
                 String relativePath;
                 if (glob.length() == 0) {
                     // JENKINS-19947: traditional behavior is to prepend the directory name

File: test/src/test/java/hudson/model/JobQueueTest.java
Patch:
@@ -79,7 +79,7 @@ public void buildPendingWhenBuildInPostProduction() throws Exception {
         if(JobQueueTest.fireCompletedFlag) {
         //Schedule the build for the project and this build should be in Queue since the state is POST_PRODUCTION
             project.scheduleBuild2(0);
-            assertTrue(project.isInQueue()); //That means its pending or its waiting or blocked
+            assertTrue(project.isInQueue()); //That means it's pending or it's waiting or blocked
             j.jenkins.getQueue().maintain();
             while(j.jenkins.getQueue().getItem(project) instanceof WaitingItem) {
                 System.out.println(j.jenkins.getQueue().getItem(project));

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -67,6 +67,7 @@
 import jenkins.util.ContextResettingExecutorService;
 import jenkins.security.MasterToSlaveCallable;
 
+import org.apache.commons.lang.StringUtils;
 import org.jenkins.ui.icon.Icon;
 import org.jenkins.ui.icon.IconSet;
 import org.kohsuke.accmod.Restricted;
@@ -1473,7 +1474,7 @@ public void doConfigSubmit( StaplerRequest req, StaplerResponse rsp ) throws IOE
         }
 
         String nExecutors = req.getSubmittedForm().getString("numExecutors");
-        if (Integer.parseInt(nExecutors)<=0) {
+        if (StringUtils.isBlank(nExecutors) || Integer.parseInt(nExecutors)<=0) {
             throw new FormException(Messages.Slave_InvalidConfig_Executors(nodeName), "numExecutors");
         }
 

File: core/src/main/java/hudson/Util.java
Patch:
@@ -1094,8 +1094,8 @@ public static String singleQuote(String s) {
     /**
      * Escapes HTML unsafe characters like &lt;, &amp; to the respective character entities.
      */
-    @Nonnull
-    public static String escape(@Nonnull String text) {
+    @Nullable
+    public static String escape(@CheckForNull String text) {
         if (text==null)     return null;
         StringBuilder buf = new StringBuilder(text.length()+64);
         for( int i=0; i<text.length(); i++ ) {

File: core/src/main/java/jenkins/install/InstallUtil.java
Patch:
@@ -93,7 +93,6 @@ public T get() {
      */
     public static void proceedToNextStateFrom(InstallState prior) {
         InstallState next = getNextInstallState(prior);
-        if (Main.isDevelopmentMode) LOGGER.info("Install state transitioning from: " + prior + " to: " + next);
         if (next != null) {
             Jenkins.getInstance().setInstallState(next);
         }

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -99,7 +99,7 @@ public class XStream2 extends XStream {
     private MapperInjectionPoint mapperInjectionPoint;
 
     /**
-     * Convinience method so we only have to change the driver in one place
+     * Convenience method so we only have to change the driver in one place
      * if we switch to something new in the future
      *
      * @return a new instance of the HierarchicalStreamDriver we want to use

File: core/src/test/java/hudson/util/AtomicFileWriterTest.java
Patch:
@@ -3,6 +3,7 @@
 import org.apache.commons.io.FileUtils;
 import org.hamcrest.core.StringContains;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
@@ -141,6 +142,7 @@ public void badPath() throws Exception {
         }
     }
 
+    @Ignore // Need to fix the testing done here, since it assumes umask=002, which is wrong... Including on Kohsuke's release envt :-\.
     @Issue("JENKINS-48407")
     @Test
     public void checkPermissions() throws IOException, InterruptedException {

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -1700,7 +1700,7 @@ public List<Future<UpdateCenter.UpdateCenterJob>> prevalidateConfig(InputStream
         for (Map.Entry<String,VersionNumber> requestedPlugin : parseRequestedPlugins(configXml).entrySet()) {
             PluginWrapper pw = getPlugin(requestedPlugin.getKey());
             if (pw == null) { // install new
-                UpdateSite.Plugin toInstall = uc.getPlugin(requestedPlugin.getKey());
+                UpdateSite.Plugin toInstall = uc.getPlugin(requestedPlugin.getKey(), requestedPlugin.getValue());
                 if (toInstall == null) {
                     LOGGER.log(WARNING, "No such plugin {0} to install", requestedPlugin.getKey());
                     continue;
@@ -1713,7 +1713,7 @@ public List<Future<UpdateCenter.UpdateCenterJob>> prevalidateConfig(InputStream
                 }
                 jobs.add(toInstall.deploy(true));
             } else if (pw.isOlderThan(requestedPlugin.getValue())) { // upgrade
-                UpdateSite.Plugin toInstall = uc.getPlugin(requestedPlugin.getKey());
+                UpdateSite.Plugin toInstall = uc.getPlugin(requestedPlugin.getKey(), requestedPlugin.getValue());
                 if (toInstall == null) {
                     LOGGER.log(WARNING, "No such plugin {0} to upgrade", requestedPlugin.getKey());
                     continue;

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -641,7 +641,7 @@ private boolean isDependencyObsolete(Dependency d, PluginWrapper dependency) {
      */
     public UpdateSite.Plugin getUpdateInfo() {
         UpdateCenter uc = Jenkins.getInstance().getUpdateCenter();
-        UpdateSite.Plugin p = uc.getPlugin(getShortName());
+        UpdateSite.Plugin p = uc.getPlugin(getShortName(), getVersionNumber());
         if(p!=null && p.isNewerThan(getVersion())) return p;
         return null;
     }
@@ -651,6 +651,8 @@ public UpdateSite.Plugin getUpdateInfo() {
      */
     public UpdateSite.Plugin getInfo() {
         UpdateCenter uc = Jenkins.getInstance().getUpdateCenter();
+        UpdateSite.Plugin p = uc.getPlugin(getShortName(), getVersionNumber());
+        if (p != null) return p;
         return uc.getPlugin(getShortName());
     }
 

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -1213,7 +1213,7 @@ public void updateByXml(Source source) throws IOException {
             // view in same ViewGroup and might not satisfy Jenkins.checkGoodName.
             String oldname = name;
             ViewGroup oldOwner = owner; // oddly, this field is not transient
-            Object o = Jenkins.XSTREAM.unmarshal(XStream2.getDefaultDriver().createReader(in), this, null, true);
+            Object o = Jenkins.XSTREAM2.unmarshal(XStream2.getDefaultDriver().createReader(in), this, null, true);
             if (!o.getClass().equals(getClass())) {
                 // ensure that we've got the same view type. extending this code to support updating
                 // to different view type requires destroying & creating a new view type

File: core/src/test/java/hudson/util/XStream2Test.java
Patch:
@@ -29,7 +29,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.thoughtworks.xstream.XStreamException;
-import com.thoughtworks.xstream.io.xml.Xpp3Driver;
+import com.thoughtworks.xstream.io.xml.KXml2Driver;
 import com.thoughtworks.xstream.security.ForbiddenClassException;
 import hudson.model.Result;
 import hudson.model.Run;
@@ -426,7 +426,7 @@ public void unmarshalToDefault_empty() {
 
     private Object fromXMLNullingOut(String xml, Object root) {
         // Currently not offering a public convenience API for this:
-        return Jenkins.XSTREAM2.unmarshal(new Xpp3Driver().createReader(new StringReader(xml)), root, null, true);
+        return Jenkins.XSTREAM2.unmarshal(XStream2.getDefaultDriver().createReader(new StringReader(xml)), root, null, true);
     }
 
     public static class WithDefaults {

File: test/src/test/java/hudson/XMLFileTest.java
Patch:
@@ -34,7 +34,7 @@ public void canStartWithXml_1_1_ConfigsTest() {
     public void silentlyMigrateConfigsTest() throws Exception {
         j.jenkins.save();
         // verify that we did indeed load our test config.xml
-        assertThat(j.jenkins.getLabelString(), is("LESS_TERMCAP_mb=\u001B[01;31m"));
+        assertThat(j.jenkins.getLabelString(), is("I am a label"));
         //verify that the persisted top level config.xml is v1.1
         File configFile = new File(j.jenkins.getRootPath().getRemote() + File.separator + "config.xml");
         assertThat(configFile.exists(), is(true));

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -26,7 +26,6 @@
 
 import com.thoughtworks.xstream.converters.ConversionException;
 import com.thoughtworks.xstream.io.StreamException;
-import com.thoughtworks.xstream.io.xml.KXml2Driver;
 import hudson.DescriptorExtensionList;
 import hudson.Extension;
 import hudson.ExtensionPoint;
@@ -1213,7 +1212,7 @@ public void updateByXml(Source source) throws IOException {
             // Do not allow overwriting view name as it might collide with another
             // view in same ViewGroup and might not satisfy Jenkins.checkGoodName.
             String oldname = name;
-            Object o = Jenkins.XSTREAM.unmarshal(new KXml2Driver().createReader(in), this);
+            Object o = Jenkins.XSTREAM.unmarshal(XStream2.getDefaultDriver().createReader(in), this);
             if (!o.getClass().equals(getClass())) {
                 // ensure that we've got the same view type. extending this code to support updating
                 // to different view type requires destroying & creating a new view type

File: core/src/test/java/hudson/PluginManagerTest.java
Patch:
@@ -64,7 +64,7 @@ public class PluginManagerTest {
     @Issue("SECURITY-167")
     @Test
     public void parseInvalidRequestedPlugins() throws Exception {
-        String evilXML = "<?xml version='1.1' encoding='UTF-8'?>\n" +
+        String evilXML = "<?xml version='1.0' encoding='UTF-8'?>\n" +
                 "<!DOCTYPE project[<!ENTITY foo SYSTEM \"file:///\">]>\n" +
                 "<root>\n" +
                 "  <stuff plugin='stuff@1.0'>\n" +

File: core/src/test/java/hudson/util/XStream2EncodingTest.java
Patch:
@@ -70,7 +70,7 @@ private void clearDefaultEncoding() {
         Thing t = (Thing) xs.fromXML(new ByteArrayInputStream(ambiguousXml));
         assertThat(t.field, not(msg));
         ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
-        baos2.write("<?xml version='1.1' encoding='UTF-8'?>\n".getBytes("UTF-8"));
+        baos2.write("<?xml version='1.0' encoding='UTF-8'?>\n".getBytes("UTF-8"));
         baos2.write(ambiguousXml);
         t = (Thing) xs.fromXML(new ByteArrayInputStream(ambiguousXml));
         assertThat(t.field, not(msg));

File: core/src/test/java/jenkins/util/xstream/XStreamDOMTest.java
Patch:
@@ -23,7 +23,6 @@
  */
 package jenkins.util.xstream;
 
-import com.thoughtworks.xstream.io.xml.KXml2Driver;
 import hudson.util.XStream2;
 import org.apache.commons.io.IOUtils;
 import org.junit.Before;
@@ -54,7 +53,7 @@ public static class Foo {
 
     @Before
     public void setUp() throws Exception {
-        xs = new XStream2(new KXml2Driver());
+        xs = new XStream2();
         xs.alias("foo", Foo.class);
     }
 

File: core/src/test/java/jenkins/xml/XMLUtilsTest.java
Patch:
@@ -49,7 +49,7 @@ public class XMLUtilsTest {
     @Issue("SECURITY-167")
     @Test()
     public void testSafeTransformDoesNotProcessForeignResources() throws Exception {
-        final String xml = "<?xml version='1.1' encoding='UTF-8'?>\n" +
+        final String xml = "<?xml version='1.0' encoding='UTF-8'?>\n" +
                 "<!DOCTYPE project[\n" +
                 "  <!ENTITY foo SYSTEM \"file:///\">\n" +
                 "]>\n" +
@@ -82,7 +82,7 @@ public void testSafeTransformDoesNotProcessForeignResources() throws Exception {
     @Issue("SECURITY-167")
     @Test()
     public void testUpdateByXmlIDoesNotFail() throws Exception {
-        final String xml = "<?xml version='1.1' encoding='UTF-8'?>\n" +
+        final String xml = "<?xml version='1.0' encoding='UTF-8'?>\n" +
                 "<project>\n" +
                 "  <actions/>\n" +
                 "  <description>&amp;</description>\n" +
@@ -119,7 +119,7 @@ public void testGetValue() throws XPathExpressionException, SAXException, IOExce
     @Test
     public void testParse_with_XXE() throws IOException, XPathExpressionException {
         try {
-            final String xml = "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n" +
+            final String xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                     "<!DOCTYPE foo [\n" +
                     "   <!ELEMENT foo ANY >\n" +
                     "   <!ENTITY xxe SYSTEM \"http://abc.com/temp/test.jsp\" >]> " +

File: test/src/test/java/hudson/model/AbstractItemSecurityTest.java
Patch:
@@ -47,7 +47,7 @@ public class AbstractItemSecurityTest {
     @Issue("SECURITY-167")
     @Test()
     public void testUpdateByXmlDoesNotProcessForeignResources() throws Exception {
-        final String xml = "<?xml version='1.1' encoding='UTF-8'?>\n" +
+        final String xml = "<?xml version='1.0' encoding='UTF-8'?>\n" +
                 "<!DOCTYPE project[\n" +
                 "  <!ENTITY foo SYSTEM \"file:///\">\n" +
                 "]>\n" +
@@ -73,7 +73,7 @@ public void testUpdateByXmlDoesNotProcessForeignResources() throws Exception {
     @Issue("SECURITY-167")
     @Test()
     public void testUpdateByXmlDoesNotFail() throws Exception {
-        final String xml = "<?xml version='1.1' encoding='UTF-8'?>\n" +
+        final String xml = "<?xml version='1.0' encoding='UTF-8'?>\n" +
                 "<project>\n" +
                 "  <description>&amp;</description>\n" +
                 "  <scm class=\"hudson.scm.NullSCM\"/>\n" +

File: test/src/test/java/hudson/model/ItemGroupMixInTest.java
Patch:
@@ -185,7 +185,7 @@ public boolean isApplicable(Class jobType) {
 
     @Test public void createProjectFromXMLShouldNoCreateEntities() throws IOException {
 
-        final String xml = "<?xml version='1.1' encoding='UTF-8'?>\n" +
+        final String xml = "<?xml version='1.0' encoding='UTF-8'?>\n" +
                 "<!DOCTYPE project[\n" +
                 "  <!ENTITY foo SYSTEM \"file:///\">\n" +
                 "]>\n" +

File: core/src/main/java/hudson/slaves/OfflineCause.java
Patch:
@@ -103,7 +103,6 @@ public static OfflineCause create(Localizable d) {
      * Caused by unexpected channel termination.
      */
     public static class ChannelTermination extends OfflineCause {
-        @Exported
         public final Exception cause;
 
         public ChannelTermination(Exception cause) {

File: core/src/main/java/hudson/util/DescribableList.java
Patch:
@@ -270,10 +270,9 @@ public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingC
         }
 
         public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
-            CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);
-
             try {
-                DescribableList r = (DescribableList)context.getRequiredType().newInstance();
+                DescribableList r = (DescribableList) context.getRequiredType().asSubclass(DescribableList.class).newInstance();
+                CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);
                 r.data.replaceBy(core);
                 return r;
             } catch (InstantiationException e) {

File: core/src/main/java/hudson/util/DescribableList.java
Patch:
@@ -270,10 +270,9 @@ public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingC
         }
 
         public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
-            CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);
-
             try {
-                DescribableList r = (DescribableList)context.getRequiredType().newInstance();
+                DescribableList r = (DescribableList) context.getRequiredType().asSubclass(DescribableList.class).newInstance();
+                CopyOnWriteList core = copyOnWriteListConverter.unmarshal(reader, context);
                 r.data.replaceBy(core);
                 return r;
             } catch (InstantiationException e) {

File: core/src/main/java/hudson/util/AtomicFileWriter.java
Patch:
@@ -138,7 +138,8 @@ public AtomicFileWriter(@Nonnull Path destinationPath, @Nonnull Charset charset,
         }
 
         try {
-            tmpPath = Files.createTempFile(dir, "atomic", "tmp");
+            // JENKINS-48407: NIO's createTempFile creates file with 0600 permissions, so we use pre-NIO for this...
+            tmpPath = File.createTempFile("atomic", "tmp", dir.toFile()).toPath();
         } catch (IOException e) {
             throw new IOException("Failed to create a temporary file in "+ dir,e);
         }

File: core/src/main/java/hudson/util/AtomicFileWriter.java
Patch:
@@ -138,7 +138,8 @@ public AtomicFileWriter(@Nonnull Path destinationPath, @Nonnull Charset charset,
         }
 
         try {
-            tmpPath = Files.createTempFile(dir, "atomic", "tmp");
+            // JENKINS-48407: NIO's createTempFile creates file with 0600 permissions, so we use pre-NIO for this...
+            tmpPath = File.createTempFile("atomic", "tmp", dir.toFile()).toPath();
         } catch (IOException e) {
             throw new IOException("Failed to create a temporary file in "+ dir,e);
         }

File: test/src/test/java/hudson/util/AtomicFileWriterPerfTest.java
Patch:
@@ -24,7 +24,7 @@ public class AtomicFileWriterPerfTest {
      * <strong>really</strong> bad performance regressions.
      */
     @Issue("JENKINS-34855")
-    @Test(timeout = 30 * 1000L)
+    @Test(timeout = 50 * 1000L)
     public void poorManPerformanceTestBed() throws Exception {
         int count = 1000;
         while (count-- > 0) {

File: core/src/main/java/jenkins/MasterToSlaveFileCallable.java
Patch:
@@ -8,6 +8,7 @@
  * {@link FileCallable}s that are meant to be only used on the master.
  *
  * @since 1.587 / 1.580.1
+ * @param <T> the return type; note that this must either be defined in your plugin or included in the stock JEP-200 whitelist
  */
 public abstract class MasterToSlaveFileCallable<T> implements FileCallable<T> {
     @Override

File: core/src/main/java/jenkins/SlaveToMasterFileCallable.java
Patch:
@@ -6,9 +6,8 @@
 
 /**
  * {@link FileCallable}s that can be executed on the master, sent by the agent.
- *
+ * Note that any serializable fields must either be defined in your plugin or included in the stock JEP-200 whitelist.
  * @since 1.587 / 1.580.1
- * @param <T> the return type; note that this must either be defined in your plugin or included in the stock JEP-200 whitelist
  */
 public abstract class SlaveToMasterFileCallable<T> implements FileCallable<T> {
     @Override

File: core/src/main/java/jenkins/security/MasterToSlaveCallable.java
Patch:
@@ -13,6 +13,7 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.587 / 1.580.1
+ * @param <V> the return type; note that this must either be defined in your plugin or included in the stock JEP-200 whitelist
  */
 public abstract class MasterToSlaveCallable<V, T extends Throwable> implements Callable<V,T> {
 

File: core/src/main/java/jenkins/security/SlaveToMasterCallable.java
Patch:
@@ -6,10 +6,9 @@
 
 /**
  * Convenient {@link Callable} that are meant to run on the master (sent by agent/CLI/etc).
- *
+ * Note that any serializable fields must either be defined in your plugin or included in the stock JEP-200 whitelist.
  * @author Kohsuke Kawaguchi
  * @since 1.587 / 1.580.1
- * @param <V> the return type; note that this must either be defined in your plugin or included in the stock JEP-200 whitelist
  */
 public abstract class SlaveToMasterCallable<V, T extends Throwable> implements Callable<V,T> {
     @Override

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -526,12 +526,12 @@ class PluginClassOwnership implements ClassOwnership {
     private static class BlacklistedTypesConverter implements Converter {
         @Override
         public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
-            throw new UnsupportedOperationException("Refusing to marshal " + source.getClass().getName() + " for security reasons");
+            throw new UnsupportedOperationException("Refusing to marshal " + source.getClass().getName() + " for security reasons; see https://jenkins.io/redirect/class-filter/");
         }
 
         @Override
         public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
-            throw new ConversionException("Refusing to unmarshal " + reader.getNodeName() + " for security reasons");
+            throw new ConversionException("Refusing to unmarshal " + reader.getNodeName() + " for security reasons; see https://jenkins.io/redirect/class-filter/");
         }
 
         @Override

File: core/src/main/java/hudson/ExtensionList.java
Patch:
@@ -428,7 +428,7 @@ public static <T> ExtensionList<T> create(Jenkins jenkins, Class<T> type) {
      * @return the singleton instance of the given type in its list.
      * @throws IllegalStateException if there are no instances, or more than one
      *
-     * @since TODO
+     * @since 2.87
      */
     public static @Nonnull <U> U lookupSingleton(Class<U> type) {
         ExtensionList<U> all = lookup(type);

File: core/src/main/java/hudson/XmlFile.java
Patch:
@@ -164,7 +164,7 @@ public Object unmarshal( Object o ) throws IOException {
 
     /**
      * Variant of {@link #unmarshal(Object)} applying {@link XStream2#unmarshal(HierarchicalStreamReader, Object, DataHolder, boolean)}.
-     * @since FIXME
+     * @since 2.99
      */
     public Object unmarshalNullingOut(Object o) throws IOException {
         return unmarshal(o, true);

File: core/src/main/java/hudson/model/Cause.java
Patch:
@@ -416,7 +416,7 @@ public UserIdCause() {
         /**
          * Constructor.
          * @param userId User ID. {@code null} if the user is unknown.
-         * @since TODO
+         * @since 2.96
          */
         public UserIdCause(@CheckForNull String userId) {
             this.userId = userId;

File: core/src/main/java/hudson/model/StringParameterDefinition.java
Patch:
@@ -92,7 +92,7 @@ public void setDefaultValue(String defaultValue) {
      * @return trim - {@code true}, if trim options has been selected, else return {@code false}.
      *      Trimming will happen when creating {@link StringParameterValue}s,
      *      the value in the config will not be changed.
-     * @since TODO
+     * @since 2.90
      */
     public boolean isTrim() {
         return trim;

File: core/src/main/java/hudson/model/StringParameterValue.java
Patch:
@@ -76,7 +76,7 @@ public Object getValue() {
      
     /**
      * Trimming for value
-     * @since TODO
+     * @since 2.90
      */
     public void doTrim() {
         if (value != null) {

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -587,7 +587,7 @@ public synchronized void doSubmitDescription( StaplerRequest req, StaplerRespons
      *
      * @param idOrFullName User ID or full name
      * @return User instance. It will be created on-demand.
-     * @since TODO
+     * @since 2.91
      */
     public static @Nonnull User getOrCreateByIdOrFullName(@Nonnull String idOrFullName) {
         return get(idOrFullName,true, Collections.emptyMap());
@@ -1172,7 +1172,7 @@ public int getPriority() {
         /**
          * Gets all extension points, sorted by priority.
          * @return Sorted list of extension point implementations.
-         * @since TODO
+         * @since 2.93
          */
         public static List<CanonicalIdResolver> all() {
             List<CanonicalIdResolver> resolvers = new ArrayList<>(ExtensionList.lookup(CanonicalIdResolver.class));
@@ -1185,7 +1185,7 @@ public static List<CanonicalIdResolver> all() {
          * @param idOrFullName ID or full name of the user
          * @param context Context
          * @return Resolved User ID or {@code null} if the user ID cannot be resolved.
-         * @since TODO
+         * @since 2.93
          */
         @CheckForNull
         public static String resolve(@Nonnull String idOrFullName, @Nonnull Map<String, ?> context) {

File: core/src/main/java/hudson/security/AccessControlled.java
Patch:
@@ -56,7 +56,7 @@ default boolean hasPermission(@Nonnull Permission permission) {
 
     /**
      * Convenient short-cut for {@code getACL().hasPermission(a, permission)}
-     * @since FIXME
+     * @since 2.92
      */
     default boolean hasPermission(@Nonnull Authentication a, @Nonnull Permission permission) {
         if (a == ACL.SYSTEM) {

File: core/src/main/java/hudson/slaves/JNLPLauncher.java
Patch:
@@ -115,7 +115,7 @@ protected Object readResolve() {
     /**
      * Returns work directory settings.
      * 
-     * @since TODO
+     * @since 2.72
      */
     @Nonnull
     public RemotingWorkDirSettings getWorkDirSettings() {
@@ -172,7 +172,7 @@ public String getDisplayName() {
          * By default the configuration is displayed only for {@link JNLPLauncher},
          * but the implementation can be overridden.
          * @return {@code true} if work directories are supported by the launcher type.
-         * @since TODO
+         * @since 2.73
          */
         public boolean isWorkDirSupported() {
             // This property is included only for JNLPLauncher by default. 

File: core/src/main/java/hudson/util/ArgumentListBuilder.java
Patch:
@@ -135,7 +135,7 @@ public ArgumentListBuilder add(String... args) {
     }
     
     /**
-     * @since TODO 
+     * @since 2.72
      */
     public ArgumentListBuilder add(@Nonnull Iterable<String> args) {
         for (String arg : args) {

File: core/src/main/java/hudson/util/AtomicFileWriter.java
Patch:
@@ -216,7 +216,7 @@ public File getTemporaryFile() {
     /**
      * Until the data is committed, this file captures
      * the written content.
-     * @since TODO
+     * @since 2.93
      */
     public Path getTemporaryPath() {
         return tmpPath;

File: core/src/main/java/hudson/util/PluginServletFilter.java
Patch:
@@ -117,7 +117,7 @@ public static void addFilter(Filter filter) throws ServletException {
      * Checks whether the given filter is already registered in the chain.
      * @param filter the filter to check.
      * @return true if the filter is already registered in the chain.
-     * @since FIXME
+     * @since 2.94
      */
     public static boolean hasFilter(Filter filter) {
         Jenkins j = Jenkins.getInstanceOrNull();

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -131,7 +131,7 @@ public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder
      *                false to use the stock XStream behavior of leaving unmentioned {@code root} fields untouched
      * @see XmlFile#unmarshalNullingOut
      * @see <a href="https://issues.jenkins-ci.org/browse/JENKINS-21017">JENKINS-21017</a>
-     * @since FIXME
+     * @since 2.99
      */
     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder, boolean nullOut) {
         // init() is too early to do this
@@ -207,7 +207,7 @@ protected Converter createDefaultConverter() {
      * Specifies that a given field of a given class should not be treated with laxity by {@link RobustCollectionConverter}.
      * @param clazz a class which we expect to hold a non-{@code transient} field
      * @param field a field name in that class
-     * @since TODO
+     * @since 2.85 this method can be used from outside core, before then it was restricted since initially added in 1.551 / 1.532.2
      */
     public void addCriticalField(Class<?> clazz, String field) {
         reflectionConverter.addCriticalField(clazz, field);

File: core/src/main/java/jenkins/AgentProtocol.java
Patch:
@@ -68,7 +68,7 @@ public boolean isRequired() {
     /**
      * Checks if the protocol is deprecated.
      * 
-     * @since TODO
+     * @since 2.75
      */
     public boolean isDeprecated() {
         return false;

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -519,7 +519,7 @@ public InstallState getInstallState(String name) {
     /**
      * Called upon install state update.
      * @param state the new install state.
-     * @since FIXME
+     * @since 2.94
      */
     public void onInstallStateUpdate(InstallState state) {
         if (state.isSetupComplete()) {
@@ -531,7 +531,7 @@ public void onInstallStateUpdate(InstallState state) {
 
     /**
      * Returns whether the setup wizard filter is currently registered.
-     * @since FIXME
+     * @since 2.94
      */
     public boolean hasSetupWizardFilter() {
         return PluginServletFilter.hasFilter(FORCE_SETUP_WIZARD_FILTER);

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -740,7 +740,7 @@ public interface JenkinsHolder {
      * Gets the {@link Jenkins} singleton.
      * @return {@link Jenkins} instance
      * @throws IllegalStateException for the reasons that {@link #getInstanceOrNull} might return null
-     * @since FIXME
+     * @since 2.98
      */
     @Nonnull
     public static Jenkins get() throws IllegalStateException {

File: core/src/main/java/jenkins/security/csrf/CSRFAdministrativeMonitor.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Monitor that the CSRF protection is enabled on the application.
  *
- * @since TODO
+ * @since 2.85
  */
 @Extension
 @Symbol("csrf")

File: core/src/main/java/jenkins/slaves/DeprecatedAgentProtocolMonitor.java
Patch:
@@ -41,7 +41,7 @@
  * Monitors enabled protocols and warns if an {@link AgentProtocol} is deprecated. 
  * 
  * @author Oleg Nenashev
- * @since TODO
+ * @since 2.75
  * @see AgentProtocol
  */
 @Extension

File: core/src/main/java/jenkins/slaves/RemotingWorkDirSettings.java
Patch:
@@ -46,7 +46,7 @@
  * See <a href="https://github.com/jenkinsci/remoting/blob/master/docs/workDir.md">Remoting Work Dir Documentation</a>.
  * 
  * @author Oleg Nenashev
- * @since TODO
+ * @since 2.72
  */
 public class RemotingWorkDirSettings implements Describable<RemotingWorkDirSettings> {
     

File: core/src/main/java/jenkins/util/TimeDuration.java
Patch:
@@ -43,7 +43,7 @@ public long getTimeInMillis() {
 
     /**
      * Returns the duration of this instance in <em>seconds</em>.
-     * @since TODO
+     * @since 2.82
      */
     public int getTimeInSeconds() {
         return (int) (millis / 1000L);

File: core/src/main/java/hudson/ExtensionList.java
Patch:
@@ -428,7 +428,7 @@ public static <T> ExtensionList<T> create(Jenkins jenkins, Class<T> type) {
      * @return the singleton instance of the given type in its list.
      * @throws IllegalStateException if there are no instances, or more than one
      *
-     * @since TODO
+     * @since 2.87
      */
     public static @Nonnull <U> U lookupSingleton(Class<U> type) {
         ExtensionList<U> all = lookup(type);

File: core/src/main/java/hudson/XmlFile.java
Patch:
@@ -164,7 +164,7 @@ public Object unmarshal( Object o ) throws IOException {
 
     /**
      * Variant of {@link #unmarshal(Object)} applying {@link XStream2#unmarshal(HierarchicalStreamReader, Object, DataHolder, boolean)}.
-     * @since FIXME
+     * @since 2.99
      */
     public Object unmarshalNullingOut(Object o) throws IOException {
         return unmarshal(o, true);

File: core/src/main/java/hudson/model/Cause.java
Patch:
@@ -416,7 +416,7 @@ public UserIdCause() {
         /**
          * Constructor.
          * @param userId User ID. {@code null} if the user is unknown.
-         * @since TODO
+         * @since 2.96
          */
         public UserIdCause(@CheckForNull String userId) {
             this.userId = userId;

File: core/src/main/java/hudson/model/StringParameterDefinition.java
Patch:
@@ -92,7 +92,7 @@ public void setDefaultValue(String defaultValue) {
      * @return trim - {@code true}, if trim options has been selected, else return {@code false}.
      *      Trimming will happen when creating {@link StringParameterValue}s,
      *      the value in the config will not be changed.
-     * @since TODO
+     * @since 2.90
      */
     public boolean isTrim() {
         return trim;

File: core/src/main/java/hudson/model/StringParameterValue.java
Patch:
@@ -76,7 +76,7 @@ public Object getValue() {
      
     /**
      * Trimming for value
-     * @since TODO
+     * @since 2.90
      */
     public void doTrim() {
         if (value != null) {

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -587,7 +587,7 @@ public synchronized void doSubmitDescription( StaplerRequest req, StaplerRespons
      *
      * @param idOrFullName User ID or full name
      * @return User instance. It will be created on-demand.
-     * @since TODO
+     * @since 2.91
      */
     public static @Nonnull User getOrCreateByIdOrFullName(@Nonnull String idOrFullName) {
         return get(idOrFullName,true, Collections.emptyMap());
@@ -1172,7 +1172,7 @@ public int getPriority() {
         /**
          * Gets all extension points, sorted by priority.
          * @return Sorted list of extension point implementations.
-         * @since TODO
+         * @since 2.93
          */
         public static List<CanonicalIdResolver> all() {
             List<CanonicalIdResolver> resolvers = new ArrayList<>(ExtensionList.lookup(CanonicalIdResolver.class));
@@ -1185,7 +1185,7 @@ public static List<CanonicalIdResolver> all() {
          * @param idOrFullName ID or full name of the user
          * @param context Context
          * @return Resolved User ID or {@code null} if the user ID cannot be resolved.
-         * @since TODO
+         * @since 2.93
          */
         @CheckForNull
         public static String resolve(@Nonnull String idOrFullName, @Nonnull Map<String, ?> context) {

File: core/src/main/java/hudson/security/AccessControlled.java
Patch:
@@ -56,7 +56,7 @@ default boolean hasPermission(@Nonnull Permission permission) {
 
     /**
      * Convenient short-cut for {@code getACL().hasPermission(a, permission)}
-     * @since FIXME
+     * @since 2.92
      */
     default boolean hasPermission(@Nonnull Authentication a, @Nonnull Permission permission) {
         if (a == ACL.SYSTEM) {

File: core/src/main/java/hudson/slaves/JNLPLauncher.java
Patch:
@@ -115,7 +115,7 @@ protected Object readResolve() {
     /**
      * Returns work directory settings.
      * 
-     * @since TODO
+     * @since 2.72
      */
     @Nonnull
     public RemotingWorkDirSettings getWorkDirSettings() {
@@ -172,7 +172,7 @@ public String getDisplayName() {
          * By default the configuration is displayed only for {@link JNLPLauncher},
          * but the implementation can be overridden.
          * @return {@code true} if work directories are supported by the launcher type.
-         * @since TODO
+         * @since 2.73
          */
         public boolean isWorkDirSupported() {
             // This property is included only for JNLPLauncher by default. 

File: core/src/main/java/hudson/util/ArgumentListBuilder.java
Patch:
@@ -135,7 +135,7 @@ public ArgumentListBuilder add(String... args) {
     }
     
     /**
-     * @since TODO 
+     * @since 2.72
      */
     public ArgumentListBuilder add(@Nonnull Iterable<String> args) {
         for (String arg : args) {

File: core/src/main/java/hudson/util/AtomicFileWriter.java
Patch:
@@ -216,7 +216,7 @@ public File getTemporaryFile() {
     /**
      * Until the data is committed, this file captures
      * the written content.
-     * @since TODO
+     * @since 2.93
      */
     public Path getTemporaryPath() {
         return tmpPath;

File: core/src/main/java/hudson/util/PluginServletFilter.java
Patch:
@@ -117,7 +117,7 @@ public static void addFilter(Filter filter) throws ServletException {
      * Checks whether the given filter is already registered in the chain.
      * @param filter the filter to check.
      * @return true if the filter is already registered in the chain.
-     * @since FIXME
+     * @since 2.94
      */
     public static boolean hasFilter(Filter filter) {
         Jenkins j = Jenkins.getInstanceOrNull();

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -131,7 +131,7 @@ public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder
      *                false to use the stock XStream behavior of leaving unmentioned {@code root} fields untouched
      * @see XmlFile#unmarshalNullingOut
      * @see <a href="https://issues.jenkins-ci.org/browse/JENKINS-21017">JENKINS-21017</a>
-     * @since FIXME
+     * @since 2.99
      */
     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder, boolean nullOut) {
         // init() is too early to do this
@@ -207,7 +207,7 @@ protected Converter createDefaultConverter() {
      * Specifies that a given field of a given class should not be treated with laxity by {@link RobustCollectionConverter}.
      * @param clazz a class which we expect to hold a non-{@code transient} field
      * @param field a field name in that class
-     * @since TODO
+     * @since 2.85 this method can be used from outside core, before then it was restricted since initially added in 1.551 / 1.532.2
      */
     public void addCriticalField(Class<?> clazz, String field) {
         reflectionConverter.addCriticalField(clazz, field);

File: core/src/main/java/jenkins/AgentProtocol.java
Patch:
@@ -68,7 +68,7 @@ public boolean isRequired() {
     /**
      * Checks if the protocol is deprecated.
      * 
-     * @since TODO
+     * @since 2.75
      */
     public boolean isDeprecated() {
         return false;

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -519,7 +519,7 @@ public InstallState getInstallState(String name) {
     /**
      * Called upon install state update.
      * @param state the new install state.
-     * @since FIXME
+     * @since 2.94
      */
     public void onInstallStateUpdate(InstallState state) {
         if (state.isSetupComplete()) {
@@ -531,7 +531,7 @@ public void onInstallStateUpdate(InstallState state) {
 
     /**
      * Returns whether the setup wizard filter is currently registered.
-     * @since FIXME
+     * @since 2.94
      */
     public boolean hasSetupWizardFilter() {
         return PluginServletFilter.hasFilter(FORCE_SETUP_WIZARD_FILTER);

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -740,7 +740,7 @@ public interface JenkinsHolder {
      * Gets the {@link Jenkins} singleton.
      * @return {@link Jenkins} instance
      * @throws IllegalStateException for the reasons that {@link #getInstanceOrNull} might return null
-     * @since FIXME
+     * @since 2.98
      */
     @Nonnull
     public static Jenkins get() throws IllegalStateException {

File: core/src/main/java/jenkins/security/csrf/CSRFAdministrativeMonitor.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Monitor that the CSRF protection is enabled on the application.
  *
- * @since TODO
+ * @since 2.85
  */
 @Extension
 @Symbol("csrf")

File: core/src/main/java/jenkins/slaves/DeprecatedAgentProtocolMonitor.java
Patch:
@@ -41,7 +41,7 @@
  * Monitors enabled protocols and warns if an {@link AgentProtocol} is deprecated. 
  * 
  * @author Oleg Nenashev
- * @since TODO
+ * @since 2.75
  * @see AgentProtocol
  */
 @Extension

File: core/src/main/java/jenkins/slaves/RemotingWorkDirSettings.java
Patch:
@@ -46,7 +46,7 @@
  * See <a href="https://github.com/jenkinsci/remoting/blob/master/docs/workDir.md">Remoting Work Dir Documentation</a>.
  * 
  * @author Oleg Nenashev
- * @since TODO
+ * @since 2.72
  */
 public class RemotingWorkDirSettings implements Describable<RemotingWorkDirSettings> {
     

File: core/src/main/java/jenkins/util/TimeDuration.java
Patch:
@@ -43,7 +43,7 @@ public long getTimeInMillis() {
 
     /**
      * Returns the duration of this instance in <em>seconds</em>.
-     * @since TODO
+     * @since 2.82
      */
     public int getTimeInSeconds() {
         return (int) (millis / 1000L);

File: test/src/test/java/jenkins/triggers/ReverseBuildTriggerTest.java
Patch:
@@ -97,7 +97,7 @@ public void runMoreQuickly() throws Exception {
                 .grant(Computer.BUILD).everywhere().to("alice", "bob")
                 .grant(Jenkins.ADMINISTER).everywhere().to("admin");
         r.jenkins.setAuthorizationStrategy(auth);
-        String upstreamName = "upstr3am"; // do not clash with English messages!
+        String upstreamName = "upstr3@m"; // do not clash with English messages!
         final FreeStyleProject upstream = r.createFreeStyleProject(upstreamName);
         String downstreamName = "d0wnstr3am";
         FreeStyleProject downstream = r.createFreeStyleProject(downstreamName);

File: test/src/test/java/jenkins/triggers/ReverseBuildTriggerTest.java
Patch:
@@ -97,7 +97,7 @@ public void runMoreQuickly() throws Exception {
                 .grant(Computer.BUILD).everywhere().to("alice", "bob")
                 .grant(Jenkins.ADMINISTER).everywhere().to("admin");
         r.jenkins.setAuthorizationStrategy(auth);
-        String upstreamName = "upstr3@m"; // do not clash with English messages!
+        String upstreamName = "upstr3am"; // do not clash with English messages!
         final FreeStyleProject upstream = r.createFreeStyleProject(upstreamName);
         String downstreamName = "d0wnstr3am";
         FreeStyleProject downstream = r.createFreeStyleProject(downstreamName);

File: core/src/main/java/hudson/TcpSlaveAgentListener.java
Patch:
@@ -290,6 +290,7 @@ private void respondHello(String header, Socket s) throws IOException {
             try {
                 Writer o = new OutputStreamWriter(s.getOutputStream(), "UTF-8");
 
+                //TODO: expose version about minimum supported Remoting version (JENKINS-48766)
                 if (header.startsWith("GET / ")) {
                     o.write("HTTP/1.0 200 OK\r\n");
                     o.write("Content-Type: text/plain;charset=UTF-8\r\n");

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -32,7 +32,6 @@
 import hudson.slaves.Cloud;
 import jenkins.util.SystemProperties;
 import hudson.Util;
-import hudson.cli.declarative.CLIMethod;
 import hudson.cli.declarative.CLIResolver;
 import hudson.console.AnnotatedLargeText;
 import hudson.init.Initializer;
@@ -85,7 +84,6 @@
 import org.kohsuke.stapler.WebMethod;
 import org.kohsuke.stapler.export.Exported;
 import org.kohsuke.stapler.export.ExportedBean;
-import org.kohsuke.args4j.Option;
 import org.kohsuke.stapler.interceptor.RequirePOST;
 
 import javax.annotation.OverridingMethodsMustInvokeSuper;

File: core/src/main/java/hudson/slaves/ChannelPinger.java
Patch:
@@ -133,7 +133,8 @@ public void install(Channel channel) {
 
         @Override
         public Void call() throws IOException {
-            setUpPingForChannel(Channel.current(), null, pingTimeoutSeconds, pingIntervalSeconds, false);
+            // No sense in setting up channel pinger if the channel is being closed
+            setUpPingForChannel(getOpenChannelOrFail(), null, pingTimeoutSeconds, pingIntervalSeconds, false);
             return null;
         }
 

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -867,7 +867,7 @@ public Void call() {
                 // ignore this error.
             }
 
-            Channel.current().setProperty("slave",Boolean.TRUE); // indicate that this side of the channel is the slave side.
+            Channel.currentOrFail().setProperty("slave",Boolean.TRUE); // indicate that this side of the channel is the slave side.
 
             return null;
         }

File: core/src/main/java/jenkins/FilePathFilter.java
Patch:
@@ -102,7 +102,7 @@ public final void uninstallFrom(Channel ch) {
 
     /**
      * Returns an {@link FilePathFilter} object that represents all the in-scope filters,
-     * or null if none is needed.
+     * or {@code null} if none is needed.
      */
     public static @CheckForNull FilePathFilter current() {
         Channel ch = Channel.current();

File: core/src/main/java/jenkins/slaves/StandardOutputSwapper.java
Patch:
@@ -39,9 +39,7 @@ public void preOnline(Computer c, Channel channel, FilePath root, TaskListener l
     private static final class ChannelSwapper extends MasterToSlaveCallable<Boolean,Exception> {
         public Boolean call() throws Exception {
             if (File.pathSeparatorChar==';')    return false;   // Windows
-
-            Channel c = Channel.current();
-
+            Channel c = getOpenChannelOrFail();
             StandardOutputStream sos = (StandardOutputStream) c.getProperty(StandardOutputStream.class);
             if (sos!=null) {
                 swap(sos);

File: test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java
Patch:
@@ -154,7 +154,7 @@ private static class Attack extends MasterToSlaveCallable<String,Exception> {
         }
         @Override
         public String call() throws Exception {
-            return Channel.current().call(new ScriptLoader(path));
+            return getChannelOrFail().call(new ScriptLoader(path));
         }
     }
 

File: test/src/test/java/jenkins/security/Security218CliTest.java
Patch:
@@ -239,7 +239,7 @@ public Integer call() throws Exception {
             
             // Invoke backward call
             try {
-                Channel.current().call(new Callable<String, Exception>() {
+                getChannelOrFail().call(new Callable<String, Exception>() {
                     private static final long serialVersionUID = 1L;
 
                     @Override

File: test/src/test/java/jenkins/install/LoadDetachedPluginsTest.java
Patch:
@@ -89,7 +89,7 @@ public void upgradeFromJenkins2() {
     @LocalData
     public void upgradeFromJenkins2WithDependency() {
         VersionNumber since = new VersionNumber("2.0");
-        rr.then((JenkinsRule r) -> {
+        rr.then(r -> {
             List<DetachedPlugin> detachedPlugins = ClassicPluginStrategy.getDetachedPlugins(since);
             assertThat("Plugins have been detached since the pre-upgrade version",
                     detachedPlugins.size(), greaterThan(1));

File: test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java
Patch:
@@ -31,6 +31,7 @@
 import hudson.cli.util.ScriptLoader;
 import hudson.model.Node.Mode;
 import hudson.model.Slave;
+import hudson.model.User;
 import hudson.remoting.Channel;
 import hudson.slaves.JNLPLauncher;
 import hudson.slaves.RetentionStrategy;
@@ -86,7 +87,7 @@ protected Slave createNewJnlpSlave(String name) throws Exception {
     public void anonymousCanAlwaysLoadJARs() throws Exception {
         r.jenkins.setNodes(Collections.singletonList(createNewJnlpSlave("test")));
         JenkinsRule.WebClient wc = r.createWebClient();
-        HtmlPage p = wc.login("alice").goTo("computer/test/");
+        HtmlPage p = wc.withBasicApiToken(User.getById("alice", true)).goTo("computer/test/");
 
         // this fresh WebClient doesn't have a login cookie and represent JNLP launcher
         JenkinsRule.WebClient jnlpAgent = r.createWebClient();

File: test/src/test/java/hudson/model/UserTest.java
Patch:
@@ -415,7 +415,7 @@ public void testDoConfigSubmit() throws Exception {
         auth.add(Jenkins.ADMINISTER, user.getId());
         auth.add(Jenkins.READ, user2.getId());
         SecurityContextHolder.getContext().setAuthentication(user.impersonate());
-        HtmlForm form = j.createWebClient().login(user.getId(), "password").goTo(user2.getUrl() + "/configure").getFormByName("config");
+        HtmlForm form = j.createWebClient().withBasicCredentials(user.getId(), "password").goTo(user2.getUrl() + "/configure").getFormByName("config");
         form.getInputByName("_.fullName").setValueAttribute("Alice Smith");
         j.submit(form);
         assertEquals("User should have full name Alice Smith.", "Alice Smith", user2.getFullName());
@@ -429,7 +429,7 @@ public void testDoConfigSubmit() throws Exception {
                fail("AccessDeniedException should be thrown.");
             }
         }
-        form = j.createWebClient().login(user2.getId(), "password").goTo(user2.getUrl() + "/configure").getFormByName("config");
+        form = j.createWebClient().withBasicCredentials(user2.getId(), "password").goTo(user2.getUrl() + "/configure").getFormByName("config");
         
         form.getInputByName("_.fullName").setValueAttribute("John");
         j.submit(form);

File: test/src/test/java/hudson/model/ViewTest.java
Patch:
@@ -529,7 +529,7 @@ public Void call() throws Exception {
                 return null;
             }
         });
-        JenkinsRule.WebClient wc = j.createWebClient().login("admin");
+        JenkinsRule.WebClient wc = j.createWebClient().withBasicCredentials("admin");
         assertEquals("original ${rootURL}/checkJobName still supported", "<div/>", wc.goTo("checkJobName?value=stuff").getWebResponse().getContentAsString());
         assertEquals("but now possible on a view in a folder", "<div/>", wc.goTo("job/d1/view/All/checkJobName?value=stuff").getWebResponse().getContentAsString());
     }

File: test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java
Patch:
@@ -91,6 +91,7 @@ public void dataCompatibilityWith1_282() throws Exception {
             // verify the sanity that the password is really used
             // this should fail
             j.createWebClient().login("bob", "bob");
+            fail();
         } catch (FailingHttpStatusCodeException e) {
             assertEquals(401,e.getStatusCode());
         }

File: test/src/test/java/hudson/security/LoginTest.java
Patch:
@@ -11,6 +11,7 @@
 import com.gargoylesoftware.htmlunit.html.HtmlForm;
 import com.gargoylesoftware.htmlunit.html.HtmlCheckBoxInput;
 
+import hudson.model.User;
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.JenkinsRule;
@@ -56,7 +57,7 @@ public void loginErrorRedirect2() throws Exception {
         WebClient wc = j.createWebClient();
         wc.assertFails("loginError", SC_UNAUTHORIZED);
         // but not once the user logs in.
-        verifyNotError(wc.login("alice"));
+        verifyNotError(wc.withBasicApiToken(User.getById("alice", true)));
     }
 
     private HtmlForm prepareLoginFormWithRememberMeChecked(WebClient wc) throws IOException, org.xml.sax.SAXException {

File: test/src/test/java/jenkins/security/ApiTokenPropertyTest.java
Patch:
@@ -121,7 +121,6 @@ public void adminsShouldBeUnableToChangeTokensByDefault() throws Exception {
 
         wc.getOptions().setThrowExceptionOnFailingStatusCode(true);
         WebRequest request = new WebRequest(new URL(j.getURL().toString() + foo.getUrl() + "/" + descriptor.getDescriptorUrl()+ "/changeToken"), HttpMethod.POST);
-        wc.addCrumb(request);
         HtmlPage res = wc.getPage(request);
 
         // TODO This nicer alternative requires https://github.com/jenkinsci/jenkins/pull/2268 or similar to work

File: test/src/test/java/jenkins/security/Security380Test.java
Patch:
@@ -67,6 +67,7 @@ public void testWithUnprotectedRootAction() throws Exception {
 
         JenkinsRule.WebClient wc = j.createWebClient();
         Page page = wc.goTo("listJobs", "text/plain");
+        // return "0\r\n"
         Assert.assertEquals("expect 0 items", "0", page.getWebResponse().getContentAsString().trim());
     }
 

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -1213,6 +1213,7 @@ public void updateByXml(Source source) throws IOException {
             // Do not allow overwriting view name as it might collide with another
             // view in same ViewGroup and might not satisfy Jenkins.checkGoodName.
             String oldname = name;
+            ViewGroup oldOwner = owner; // oddly, this field is not transient
             Object o = Jenkins.XSTREAM.unmarshal(new Xpp3Driver().createReader(in), this);
             if (!o.getClass().equals(getClass())) {
                 // ensure that we've got the same view type. extending this code to support updating
@@ -1222,6 +1223,7 @@ public void updateByXml(Source source) throws IOException {
                     "the view with the new view type.");
             }
             name = oldname;
+            owner = oldOwner;
         } catch (StreamException | ConversionException | Error e) {// mostly reflection errors
             throw new IOException("Unable to read",e);
         }

File: core/src/main/java/jenkins/install/InstallUtil.java
Patch:
@@ -92,7 +92,6 @@ public T get() {
      */
     public static void proceedToNextStateFrom(InstallState prior) {
         InstallState next = getNextInstallState(prior);
-        if (Main.isDevelopmentMode) LOGGER.info("Install state transitioning from: " + prior + " to: " + next);
         if (next != null) {
             Jenkins.getInstance().setInstallState(next);
         }

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -407,6 +407,7 @@ public Set<Label> getRelevantLabels() {
     /**
      * Gets the textual representation of the assigned label as it was entered by the user.
      */
+    @Exported(name="labelExpression")
     public String getAssignedLabelString() {
         if (canRoam || assignedNode==null)    return null;
         try {

File: core/src/main/java/hudson/model/Label.java
Patch:
@@ -127,7 +127,7 @@ protected boolean matches(Queue.Item item, SubTask subTask) {
     /**
      * Alias for {@link #getDisplayName()}.
      */
-    @Exported
+    @Exported(visibility=2)
     public final String getName() {
         return getDisplayName();
     }

File: core/src/main/java/jenkins/util/groovy/AbstractGroovyViewModule.java
Patch:
@@ -9,11 +9,11 @@
 
 /**
  * Base class for utility classes for Groovy view scripts
- * <p />
+ * <p>
  * Usage from script of a subclass, say ViewHelper:
- * <p />
+ * <p>
  * <tt>new ViewHelper(delegate).method();</tt>
- * <p />
+ * <p>
  * see <tt>ModularizeViewScript</tt> in ui-samples for an example how to use
  * this class.
  */

File: test/src/test/java/hudson/util/AtomicFileWriterPerfTest.java
Patch:
@@ -24,7 +24,7 @@ public class AtomicFileWriterPerfTest {
      * <strong>really</strong> bad performance regressions.
      */
     @Issue("JENKINS-34855")
-    @Test(timeout = 30 * 1000L)
+    @Test(timeout = 50 * 1000L)
     public void poorManPerformanceTestBed() throws Exception {
         int count = 1000;
         while (count-- > 0) {

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1135,7 +1135,7 @@ private static String normalizeURI(String uri) {
      * @since 1.512
      */
     public static List<TopLevelItem> getAllTopLevelItems(ItemGroup root) {
-      return Items.getAllItems(root, TopLevelItem.class);
+      return root.getAllItems(TopLevelItem.class);
     }
     
     /**
@@ -2046,7 +2046,7 @@ public static boolean isContextMenuVisible(Action a) {
     @Restricted(NoExternalUse.class) // for cc.xml.jelly
     public static Collection<TopLevelItem> getCCItems(View v) {
         if (Stapler.getCurrentRequest().getParameter("recursive") != null) {
-            return Items.getAllItems(v.getOwner().getItemGroup(), TopLevelItem.class);
+            return v.getOwner().getItemGroup().getAllItems(TopLevelItem.class);
         } else {
             return v.getItems();
         }

File: core/src/main/java/hudson/cli/ListJobsCommand.java
Patch:
@@ -66,7 +66,7 @@ protected int run() throws Exception {
 
                 // If item group was found use it's jobs.
                 if (item instanceof ModifiableTopLevelItemGroup) {
-                    jobs = Items.getAllItems((ModifiableTopLevelItemGroup) item, TopLevelItem.class);
+                    jobs = ((ModifiableTopLevelItemGroup) item).getAllItems(TopLevelItem.class);
                 }
                 // No view and no item group with the given name found.
                 else {

File: core/src/main/java/hudson/model/ListView.java
Patch:
@@ -209,7 +209,7 @@ private List<TopLevelItem> getItems(boolean recurse) {
         Boolean statusFilter = this.statusFilter; // capture the value to isolate us from concurrent update
         Iterable<? extends TopLevelItem> candidates;
         if (recurse) {
-            candidates = Items.getAllItems(parent, TopLevelItem.class);
+            candidates = parent.getAllItems(TopLevelItem.class);
         } else {
             candidates = parent.getItems();
         }
@@ -444,7 +444,7 @@ protected void submit(StaplerRequest req) throws ServletException, FormException
             jobNames.clear();
             Iterable<? extends TopLevelItem> items;
             if (recurse) {
-                items = Items.getAllItems(getOwner().getItemGroup(), TopLevelItem.class);
+                items = getOwner().getItemGroup().getAllItems(TopLevelItem.class);
             } else {
                 items = getOwner().getItemGroup().getItems();
             }

File: core/src/test/java/hudson/cli/ListJobsCommandTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.hamcrest.Description;
 import org.hamcrest.TypeSafeMatcher;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
@@ -90,6 +91,7 @@ public void failForMatrixProject() throws Exception {
     }
     */
 
+    @Ignore("TODO enable when you figure out why ListJobsCommandTest$1Folder$$EnhancerByMockitoWithCGLIB$$f124784a calls ReturnsEmptyValues, or just use MockFolder and move to the test module with JenkinsRule")
     @Test
     public void getAllJobsFromFolders() throws Exception {
 

File: core/src/test/java/hudson/model/ListViewTest.java
Patch:
@@ -12,6 +12,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import org.junit.Ignore;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -24,6 +25,7 @@ public class ListViewTest {
     
     private interface ItemGroupOfNonTopLevelItem extends TopLevelItem, ItemGroup<Item> {}
 
+    @Ignore("TODO I am not smart enough to figure out what PowerMock is actually doing; whatever this was testing, better move to the test module and use JenkinsRule")
     @Test
     @PrepareForTest({ListViewColumn.class,Items.class})
     public void listItemRecurseWorksWithNonTopLevelItems() throws IOException{

File: core/src/main/java/hudson/util/AtomicFileWriter.java
Patch:
@@ -35,7 +35,6 @@
 import java.nio.file.InvalidPathException;
 import java.nio.file.Path;
 import java.nio.file.StandardCopyOption;
-import java.nio.file.StandardOpenOption;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -108,7 +107,7 @@ public AtomicFileWriter(@Nonnull Path destinationPath, @Nonnull Charset charset)
             throw new IOException("Failed to create a temporary file in "+ dir,e);
         }
 
-        core = Files.newBufferedWriter(tmpPath, charset, StandardOpenOption.SYNC);
+        core = Files.newBufferedWriter(tmpPath, charset);
     }
 
     @Override

File: test/src/test/java/jenkins/AgentProtocolTest.java
Patch:
@@ -132,9 +132,10 @@ public static void assertProtocols(Jenkins jenkins, boolean shouldBeEnabled, @Ch
         }
     }
     
-    public static void assertMonitorNotActive() {
+    public static void assertMonitorNotActive(JenkinsRule j) {
         DeprecatedAgentProtocolMonitor monitor = new DeprecatedAgentProtocolMonitor();
-        assertFalse("Deprecated Agent Protocol Monitor should not be activated", monitor.isActivated());
+        assertFalse("Deprecated Agent Protocol Monitor should not be activated. Current protocols: "
+                + StringUtils.join(j.jenkins.getAgentProtocols(), ","), monitor.isActivated());
     }
     
     public static void assertMonitorTriggered(String ... expectedProtocols) {

File: core/src/main/java/hudson/util/AtomicFileWriter.java
Patch:
@@ -100,7 +100,9 @@ public AtomicFileWriter(@Nonnull Path destinationPath, @Nonnull Charset charset)
         this.destPath = destinationPath;
         Path dir = this.destPath.getParent();
         try {
-            Files.createDirectories(dir);
+            if (Files.notExists(dir)) { // This is required for dir symlink handling, see JDK-8130464
+                Files.createDirectories(dir);
+            }
             tmpPath = Files.createTempFile(dir, "atomic", "tmp");
         } catch (IOException e) {
             throw new IOException("Failed to create a temporary file in "+ dir,e);

File: test/src/test/java/jenkins/AgentProtocolTest.java
Patch:
@@ -132,9 +132,10 @@ public static void assertProtocols(Jenkins jenkins, boolean shouldBeEnabled, @Ch
         }
     }
     
-    public static void assertMonitorNotActive() {
+    public static void assertMonitorNotActive(JenkinsRule j) {
         DeprecatedAgentProtocolMonitor monitor = new DeprecatedAgentProtocolMonitor();
-        assertFalse("Deprecated Agent Protocol Monitor should not be activated", monitor.isActivated());
+        assertFalse("Deprecated Agent Protocol Monitor should not be activated. Current protocols: "
+                + StringUtils.join(j.jenkins.getAgentProtocols(), ","), monitor.isActivated());
     }
     
     public static void assertMonitorTriggered(String ... expectedProtocols) {

File: core/src/main/java/hudson/util/AtomicFileWriter.java
Patch:
@@ -139,7 +139,7 @@ public void commit() throws IOException {
                 Files.move(tmpPath, destPath, StandardCopyOption.REPLACE_EXISTING);
             } catch (IOException e1) {
                 e1.addSuppressed(e);
-                LOGGER.log(Level.SEVERE, "Unable to move {0} to {1}. Attempting to delete {1} and abandoning.",
+                LOGGER.log(Level.SEVERE, "Unable to move {0} to {1}. Attempting to delete {0} and abandoning.",
                            new Path[]{tmpPath, destPath});
                 try {
                     Files.deleteIfExists(tmpPath);

File: core/src/main/java/hudson/util/AtomicFileWriter.java
Patch:
@@ -74,9 +74,9 @@ public AtomicFileWriter(File f, String encoding) throws IOException {
         this(f, Charset.forName(encoding));
     }
 
-        /**
-         * @param charset File charset to write. If null, platform default encoding is chosen.
-         */
+    /**
+     * @param charset File charset to write. If null, platform default encoding is chosen.
+     */
     public AtomicFileWriter(File f, Charset charset) throws IOException {
         destFile = f.toPath();
         Path dir = destFile.getParent();

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -407,6 +407,7 @@ public Set<Label> getRelevantLabels() {
     /**
      * Gets the textual representation of the assigned label as it was entered by the user.
      */
+    @Exported(name="labelExpression")
     public String getAssignedLabelString() {
         if (canRoam || assignedNode==null)    return null;
         try {

File: core/src/main/java/hudson/model/Label.java
Patch:
@@ -127,7 +127,7 @@ protected boolean matches(Queue.Item item, SubTask subTask) {
     /**
      * Alias for {@link #getDisplayName()}.
      */
-    @Exported
+    @Exported(visibility=2)
     public final String getName() {
         return getDisplayName();
     }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -846,7 +846,7 @@ protected Jenkins(File root, ServletContext context, PluginManager pluginManager
 
             if (!new File(root,"jobs").exists()) {
                 // if this is a fresh install, use more modern default layout that's consistent with agents
-                workspaceDir = "${JENKINS_HOME}/workspace/${ITEM_FULLNAME}";
+                workspaceDir = "${JENKINS_HOME}/workspace/${ITEM_FULL_NAME}";
             }
 
             // doing this early allows InitStrategy to set environment upfront

File: test/src/test/java/jenkins/install/SetupWizardTest.java
Patch:
@@ -111,7 +111,7 @@ public void shouldReturnUpdateSiteJSONIfSpecified() throws Exception {
     public void shouldProhibitAccessToPluginListWithoutAuth() throws Exception {
         JenkinsRule.WebClient wc = j.createWebClient();
         wc.assertFails("setupWizard/platformPluginList", 403);
-        wc.assertFails("setupWizard/createAdminUaser", 403);
+        wc.assertFails("setupWizard/createAdminUser", 403);
         wc.assertFails("setupWizard/completeInstall", 403);
     }
     

File: test/src/test/java/jenkins/install/SetupWizardTest.java
Patch:
@@ -111,7 +111,7 @@ public void shouldReturnUpdateSiteJSONIfSpecified() throws Exception {
     public void shouldProhibitAccessToPluginListWithoutAuth() throws Exception {
         JenkinsRule.WebClient wc = j.createWebClient();
         wc.assertFails("setupWizard/platformPluginList", 403);
-        wc.assertFails("setupWizard/createAdminUaser", 403);
+        wc.assertFails("setupWizard/createAdminUser", 403);
         wc.assertFails("setupWizard/completeInstall", 403);
     }
     

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -1995,8 +1995,8 @@ public static final class PluginUpdateMonitor extends AdministrativeMonitor {
          * Convenience method to ease access to this monitor, this allows other plugins to register required updates.
          * @return this monitor.
          */
-        public static final PluginUpdateMonitor getInstance() {
-            return ExtensionList.lookup(PluginUpdateMonitor.class).get(0);
+        public static PluginUpdateMonitor getInstance() {
+            return ExtensionList.lookupSingleton(PluginUpdateMonitor.class);
         }
 
         /**

File: core/src/main/java/jenkins/security/UserDetailsCache.java
Patch:
@@ -83,7 +83,7 @@ public UserDetailsCache() {
      * @return the cache
      */
     public static UserDetailsCache get() {
-        return ExtensionList.lookup(UserDetailsCache.class).get(UserDetailsCache.class);
+        return ExtensionList.lookupSingleton(UserDetailsCache.class);
     }
 
     /**

File: core/src/main/java/hudson/slaves/ComputerLauncher.java
Patch:
@@ -187,7 +187,7 @@ protected static void checkJavaVersion(final PrintStream logger, String javaComm
                 final String versionStr = m.group(1);
                 logger.println(Messages.ComputerLauncher_JavaVersionResult(javaCommand, versionStr));
                 try {
-                    if (new DeweyDecimal(versionStr).isLessThan(new DeweyDecimal("1.6"))) {
+                    if (new DeweyDecimal(versionStr).isLessThan(new DeweyDecimal("1.8"))) {
                         throw new IOException(Messages
                                 .ComputerLauncher_NoJavaFound(line));
                     }

File: core/src/main/java/jenkins/slaves/EncryptedSlaveAgentJnlpFile.java
Patch:
@@ -128,7 +128,7 @@ public boolean isReady() {
         public void setWriteListener(WriteListener writeListener) {
             // we are always ready to write so we just call once to say we are ready.
             try {
-                // should we do this on a separate thread to avoid deadlocaks?
+                // should we do this on a separate thread to avoid deadlocks?
                 writeListener.onWritePossible();
             } catch (IOException e) {
                 LOG.log(Level.WARNING, "Failed to notify WriteListener.onWritePossible", e);

File: core/src/main/java/hudson/model/queue/QueueTaskFilter.java
Patch:
@@ -56,10 +56,12 @@ public Node getLastBuiltOn() {
         return base.getLastBuiltOn();
     }
 
+    @Deprecated
     public boolean isBuildBlocked() {
         return base.isBuildBlocked();
     }
 
+    @Deprecated
     public String getWhyBlocked() {
         return base.getWhyBlocked();
     }

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -1841,9 +1841,6 @@ public interface Task extends ModelObject, SubTask {
          */
         @CheckForNull
         default CauseOfBlockage getCauseOfBlockage() {
-            if (isBuildBlocked()) {
-                return CauseOfBlockage.fromMessage(Messages._Queue_Unknown());
-            }
             return null;
         }
 

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -106,7 +106,6 @@
 import jenkins.model.Jenkins;
 import jenkins.security.MasterToSlaveCallable;
 import jenkins.util.ContextResettingExecutorService;
-import jenkins.util.SystemProperties;
 import jenkins.util.VirtualFile;
 import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
 import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
@@ -2371,7 +2370,7 @@ public String validateAntFileMask(final String fileMasks, final int bound) throw
      * Default bound for {@link #validateAntFileMask(String, int, boolean)}.
      * @since 1.592
      */
-    public static int VALIDATE_ANT_FILE_MASK_BOUND = SystemProperties.getInteger(FilePath.class.getName() + ".VALIDATE_ANT_FILE_MASK_BOUND", 10000);
+    public static int VALIDATE_ANT_FILE_MASK_BOUND = Integer.getInteger(FilePath.class.getName() + ".VALIDATE_ANT_FILE_MASK_BOUND", 10000);
 
     /**
      * Like {@link #validateAntFileMask(String)} but performing only a bounded number of operations.

File: core/src/main/java/jenkins/util/TimeDuration.java
Patch:
@@ -42,7 +42,7 @@ public long getTimeInMillis() {
     }
 
     /**
-     * Returns the duration of this instance in <em>milliseconds</em>.
+     * Returns the duration of this instance in <em>seconds</em>.
      */
     public int getTimeInSeconds() {
         return (int) (millis / 1000L);

File: core/src/test/java/jenkins/util/TimeDurationTest.java
Patch:
@@ -1,6 +1,7 @@
 package jenkins.util;
 
 import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
 
 import java.util.concurrent.TimeUnit;
 
@@ -9,7 +10,7 @@
 
 import static jenkins.util.TimeDuration.*;
 
-
+@Issue("JENKINS-44052")
 public class TimeDurationTest {
 
     @Test

File: core/src/main/java/hudson/model/ParametersDefinitionProperty.java
Patch:
@@ -171,7 +171,7 @@ public void _doBuild(StaplerRequest req, StaplerResponse rsp, @QueryParameter Ti
         }
 
     	WaitingItem item = Jenkins.getInstance().getQueue().schedule(
-                getJob(), delay.getTime(), new ParametersAction(values), new CauseAction(new Cause.UserIdCause()));
+                getJob(), delay.getTimeInSeconds(), new ParametersAction(values), new CauseAction(new Cause.UserIdCause()));
         if (item!=null) {
             String url = formData.optString("redirectTo");
             if (url==null || !Util.isSafeToRedirectTo(url))   // avoid open redirect
@@ -199,7 +199,7 @@ public void buildWithParameters(StaplerRequest req, StaplerResponse rsp, @CheckF
         if (delay==null)    delay=new TimeDuration(getJob().getQuietPeriod());
 
         Queue.Item item = Jenkins.getInstance().getQueue().schedule2(
-                getJob(), delay.getTime(), new ParametersAction(values), ParameterizedJobMixIn.getBuildCause(getJob(), req)).getItem();
+                getJob(), delay.getTimeInSeconds(), new ParametersAction(values), ParameterizedJobMixIn.getBuildCause(getJob(), req)).getItem();
 
         if (item != null) {
             rsp.sendRedirect(SC_CREATED, req.getContextPath() + '/' + item.getUrl());

File: core/src/main/java/jenkins/model/ParameterizedJobMixIn.java
Patch:
@@ -213,7 +213,7 @@ public final void doBuild(StaplerRequest req, StaplerResponse rsp, @QueryParamet
         }
 
 
-        Queue.Item item = Jenkins.getInstance().getQueue().schedule2(asJob(), delay.getTime(), getBuildCause(asJob(), req)).getItem();
+        Queue.Item item = Jenkins.getInstance().getQueue().schedule2(asJob(), delay.getTimeInSeconds(), getBuildCause(asJob(), req)).getItem();
         if (item != null) {
             rsp.sendRedirect(SC_CREATED, req.getContextPath() + '/' + item.getUrl());
         } else {

File: core/src/main/java/hudson/security/csrf/CrumbFilter.java
Patch:
@@ -7,6 +7,7 @@
 
 import hudson.util.MultipartFormDataParser;
 import jenkins.model.Jenkins;
+import org.acegisecurity.providers.anonymous.AnonymousAuthenticationToken;
 
 import java.io.IOException;
 import java.util.Enumeration;
@@ -70,7 +71,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
             }
 
             // JENKINS-40344: Don't spam the log just because a session is expired
-            Level level = Jenkins.getAuthentication() == Jenkins.ANONYMOUS ? Level.FINE : Level.WARNING;
+            Level level = Jenkins.getAuthentication() instanceof AnonymousAuthenticationToken ? Level.FINE : Level.WARNING;
 
             if (crumb != null) {
                 if (crumbIssuer.validateCrumb(httpRequest, crumbSalt, crumb)) {

File: core/src/main/java/jenkins/install/InstallUtil.java
Patch:
@@ -54,6 +54,7 @@
 import hudson.model.UpdateCenter.InstallationJob;
 import hudson.model.UpdateCenter.UpdateCenterJob;
 import hudson.util.VersionNumber;
+import java.util.logging.Level;
 import jenkins.model.Jenkins;
 import jenkins.util.SystemProperties;
 import jenkins.util.xml.XMLUtils;
@@ -256,6 +257,7 @@ public static void saveLastExecVersion() {
                 try {
                     String lastVersion = XMLUtils.getValue("/hudson/version", configFile);
                     if (lastVersion.length() > 0) {
+                        LOGGER.log(Level.FINE, "discovered serialized lastVersion {0}", lastVersion);
                         return lastVersion;
                     }
                 } catch (Exception e) {

File: core/src/main/java/jenkins/install/InstallUtil.java
Patch:
@@ -54,6 +54,7 @@
 import hudson.model.UpdateCenter.InstallationJob;
 import hudson.model.UpdateCenter.UpdateCenterJob;
 import hudson.util.VersionNumber;
+import java.util.logging.Level;
 import jenkins.model.Jenkins;
 import jenkins.util.SystemProperties;
 import jenkins.util.xml.XMLUtils;
@@ -256,6 +257,7 @@ public static void saveLastExecVersion() {
                 try {
                     String lastVersion = XMLUtils.getValue("/hudson/version", configFile);
                     if (lastVersion.length() > 0) {
+                        LOGGER.log(Level.FINE, "discovered serialized lastVersion {0}", lastVersion);
                         return lastVersion;
                     }
                 } catch (Exception e) {

File: core/src/main/java/hudson/util/io/TarArchiver.java
Patch:
@@ -105,16 +105,15 @@ public void visit(File file, String relativePath) throws IOException {
 
                 try (InputStream fin = Files.newInputStream(file.toPath());
                      BoundedInputStream in = new BoundedInputStream(fin, size)) {
-                    // Separate tray block not to wrap exception thrown while opening the input stream into an exception
+                    // Separate try block not to wrap exception thrown while opening the input stream into an exception
                     // indicating a problem while writing
                     try {
                         int len;
                         while ((len = in.read(buf)) >= 0) {
                             tar.write(buf, 0, len);
                         }
                     } catch (IOException | InvalidPathException e) {// log the exception in any case
-                        IOException ioE = new IOException("Error writing to tar file from: " + file, e);
-                        throw ioE;
+                        throw new IOException("Error writing to tar file from: " + file, e);
                     }
                 }
             }

File: test/src/test/java/hudson/model/ListViewTest.java
Patch:
@@ -266,7 +266,7 @@ private void checkLinkFromItemExistsAndIsValid(Item item, ItemGroup ig, Item top
         folder.addView(view);
         FreeStyleProject job = folder.createProject(FreeStyleProject.class, "job1");
         view.add(job);
-        
+
         List<TopLevelItem> items = view.getItems();
         assertEquals(1, items.size());
         assertEquals("job1", items.get(0).getName());
@@ -275,13 +275,13 @@ private void checkLinkFromItemExistsAndIsValid(Item item, ItemGroup ig, Item top
         view.doRemoveJobFromView("job1");
         List<TopLevelItem> itemsNow = view.getItems();
         assertEquals(0, itemsNow.size());
-        
+
         // remove a not contained job
         try {
             view.doRemoveJobFromView("job2");
             fail("Remove job2");
         } catch(Failure e) {
-            assertEquals(e.getMessage(), "Query parameter 'name' does not correspond to a known item");
+            assertEquals(e.getMessage(), "Query parameter 'name' does not correspond to a known and readable item");
         }
     }
 

File: test/src/test/java/hudson/model/ListViewTest.java
Patch:
@@ -266,7 +266,7 @@ private void checkLinkFromItemExistsAndIsValid(Item item, ItemGroup ig, Item top
         folder.addView(view);
         FreeStyleProject job = folder.createProject(FreeStyleProject.class, "job1");
         view.add(job);
-        
+
         List<TopLevelItem> items = view.getItems();
         assertEquals(1, items.size());
         assertEquals("job1", items.get(0).getName());
@@ -275,13 +275,13 @@ private void checkLinkFromItemExistsAndIsValid(Item item, ItemGroup ig, Item top
         view.doRemoveJobFromView("job1");
         List<TopLevelItem> itemsNow = view.getItems();
         assertEquals(0, itemsNow.size());
-        
+
         // remove a not contained job
         try {
             view.doRemoveJobFromView("job2");
             fail("Remove job2");
         } catch(Failure e) {
-            assertEquals(e.getMessage(), "Query parameter 'name' does not correspond to a known item");
+            assertEquals(e.getMessage(), "Query parameter 'name' does not correspond to a known and readable item");
         }
     }
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3181,6 +3181,8 @@ public void run(Reactor session) throws Exception {
      */
     public synchronized void save() throws IOException {
         if(BulkChange.contains(this))   return;
+        version = VERSION;
+
         getConfigFile().write(this);
         SaveableListener.fireOnChange(this, getConfigFile());
     }
@@ -3658,9 +3660,7 @@ public synchronized void doConfigSubmit( StaplerRequest req, StaplerResponse rsp
             boolean result = true;
             for (Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfigUnclassified())
                 result &= configureDescriptor(req,json,d);
-
-            version = VERSION;
-
+            
             save();
             updateComputerList();
             if(result)

File: cli/src/main/java/hudson/cli/CLI.java
Patch:
@@ -549,7 +549,7 @@ public boolean verify(String s, SSLSession sslSession) {
                 for (Handler h : Logger.getLogger("").getHandlers()) {
                     h.setLevel(level);
                 }
-                for (Logger logger : new Logger[] {LOGGER, PlainCLIProtocol.LOGGER, Logger.getLogger("org.apache.sshd")}) { // perhaps also Channel
+                for (Logger logger : new Logger[] {LOGGER, FullDuplexHttpStream.LOGGER, PlainCLIProtocol.LOGGER, Logger.getLogger("org.apache.sshd")}) { // perhaps also Channel
                     logger.setLevel(level);
                 }
                 args = args.subList(2, args.size());

File: core/src/main/java/hudson/security/csrf/CrumbIssuer.java
Patch:
@@ -193,6 +193,7 @@ public static class RestrictedApi extends Api {
         }
 
         @Override public void doXml(StaplerRequest req, StaplerResponse rsp, @QueryParameter String xpath, @QueryParameter String wrapper, @QueryParameter String tree, @QueryParameter int depth) throws IOException, ServletException {
+            setHeaders(rsp);
             String text;
             CrumbIssuer ci = (CrumbIssuer) bean;
             if ("/*/crumbRequestField/text()".equals(xpath)) { // old FullDuplexHttpStream

File: test/src/test/java/hudson/cli/CLIActionTest.java
Patch:
@@ -40,7 +40,6 @@
 import org.codehaus.groovy.runtime.Security218;
 import static org.hamcrest.Matchers.containsString;
 import static org.junit.Assert.*;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
@@ -256,7 +255,6 @@ public void encodingAndLocale() throws Exception {
         // -ssh mode does not pass client locale or encoding
     }
 
-    @Ignore("TODO JENKINS-46659 seems to be broken")
     @Issue("JENKINS-41745")
     @Test
     public void interleavedStdio() throws Exception {

File: core/src/main/java/jenkins/security/BasicHeaderProcessor.java
Patch:
@@ -12,6 +12,7 @@
 import org.acegisecurity.ui.AuthenticationEntryPoint;
 import org.acegisecurity.ui.rememberme.NullRememberMeServices;
 import org.acegisecurity.ui.rememberme.RememberMeServices;
+import org.apache.commons.lang.StringUtils;
 
 import javax.servlet.Filter;
 import javax.servlet.FilterChain;
@@ -60,7 +61,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
         HttpServletResponse rsp = (HttpServletResponse) response;
         String authorization = req.getHeader("Authorization");
 
-        if (authorization!=null && authorization.startsWith("Basic ")) {
+        if (StringUtils.startsWithIgnoreCase(authorization,"Basic ")) {
             // authenticate the user
             String uidpassword = Scrambler.descramble(authorization.substring(6));
             int idx = uidpassword.indexOf(':');

File: core/src/main/java/hudson/slaves/CommandLauncher.java
Patch:
@@ -115,6 +115,7 @@ public void launch(SlaveComputer computer, final TaskListener listener) {
                     pb.environment().put("HUDSON_URL", rootUrl);    // for backward compatibility
                     pb.environment().put("JENKINS_URL", rootUrl);
                     pb.environment().put("SLAVEJAR_URL", rootUrl+"/jnlpJars/agent.jar");
+                    pb.environment().put("AGENTJAR_URL", rootUrl+"/jnlpJars/agent.jar");
                 }
             }
 

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -362,7 +362,7 @@ public void setChannel(InputStream in, OutputStream out, TaskListener taskListen
      * Creates a {@link Channel} from the given stream and sets that to this agent.
      *
      * @param in
-     *      Stream connected to the remote "agent.jar". It's the caller's responsibility to do
+     *      Stream connected to the remote agent. It's the caller's responsibility to do
      *      buffering on this stream, if that's necessary.
      * @param out
      *      Stream connected to the remote peer. It's the caller's responsibility to do
@@ -521,7 +521,7 @@ public void onClosed(Channel c, IOException cause) {
             channel.addListener(listener);
 
         String slaveVersion = channel.call(new SlaveVersion());
-        log.println("agent.jar version: " + slaveVersion);
+        log.println("Remoting version: " + slaveVersion);
 
         boolean _isUnix = channel.call(new DetectOS());
         log.println(_isUnix? hudson.model.Messages.Slave_UnixSlave():hudson.model.Messages.Slave_WindowsSlave());

File: core/src/main/java/hudson/ProxyConfiguration.java
Patch:
@@ -396,7 +396,7 @@ private Credentials createCredentials(String userName, String password) {
             if (userName.indexOf('\\') >= 0){
                 final String domain = userName.substring(0, userName.indexOf('\\'));
                 final String user = userName.substring(userName.indexOf('\\') + 1);
-                return new NTCredentials(user, Secret.fromString(password).getPlainText(), domain, "");
+                return new NTCredentials(user, Secret.fromString(password).getPlainText(), "", domain);
             } else {
                 return new UsernamePasswordCredentials(userName, Secret.fromString(password).getPlainText());
             }

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -148,7 +148,7 @@
 @ExportedBean
 public class UpdateCenter extends AbstractModelObject implements Saveable, OnMaster {
 
-    private static final String UPDATE_CENTER_URL = SystemProperties.getString(UpdateCenter.class.getName()+".updateCenterUrl","http://updates.jenkins-ci.org/");
+    private static final String UPDATE_CENTER_URL = SystemProperties.getString(UpdateCenter.class.getName()+".updateCenterUrl","https://updates.jenkins.io/");
 
     /**
      * Read timeout when downloading plugins, defaults to 1 minute

File: test/src/test/java/hudson/model/UpdateCenterTest.java
Patch:
@@ -44,8 +44,8 @@
 public class UpdateCenterTest {
     @Test public void data() throws Exception {
         try {
-            doData("http://updates.jenkins-ci.org/update-center.json?version=build");
-            doData("http://updates.jenkins-ci.org/stable/update-center.json?version=build");
+            doData("https://updates.jenkins.io/update-center.json?version=build");
+            doData("https://updates.jenkins.io/stable/update-center.json?version=build");
         } catch (Exception x) {
             // TODO this should not be in core at all; should be in repo built by a separate job somewhere
             assumeNoException("Might be no Internet connectivity, or might start failing due to expiring certificate through no fault of code changes", x);

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -148,7 +148,7 @@
 @ExportedBean
 public class UpdateCenter extends AbstractModelObject implements Saveable, OnMaster {
 
-    private static final String UPDATE_CENTER_URL = SystemProperties.getString(UpdateCenter.class.getName()+".updateCenterUrl","http://updates.jenkins-ci.org/");
+    private static final String UPDATE_CENTER_URL = SystemProperties.getString(UpdateCenter.class.getName()+".updateCenterUrl","https://updates.jenkins.io/");
 
     /**
      * Read timeout when downloading plugins, defaults to 1 minute

File: test/src/test/java/hudson/model/UpdateCenterTest.java
Patch:
@@ -44,8 +44,8 @@
 public class UpdateCenterTest {
     @Test public void data() throws Exception {
         try {
-            doData("http://updates.jenkins-ci.org/update-center.json?version=build");
-            doData("http://updates.jenkins-ci.org/stable/update-center.json?version=build");
+            doData("https://updates.jenkins.io/update-center.json?version=build");
+            doData("https://updates.jenkins.io/stable/update-center.json?version=build");
         } catch (Exception x) {
             // TODO this should not be in core at all; should be in repo built by a separate job somewhere
             assumeNoException("Might be no Internet connectivity, or might start failing due to expiring certificate through no fault of code changes", x);

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -887,7 +887,7 @@ public EnvVars getEnvironment(TaskListener log) throws IOException, InterruptedE
                 e.buildEnvVars(env);
 
         for (EnvironmentContributingAction a : getActions(EnvironmentContributingAction.class))
-            a.buildEnvVars(this,env);
+            a.buildEnvVars(this,env,getBuiltOn());
 
         EnvVars.resolve(env);
 

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -138,10 +138,11 @@ public void createBuildWrappers(AbstractBuild<?,?> build, Collection<? super Bui
         }
     }
 
-    public void buildEnvVars(AbstractBuild<?,?> build, EnvVars env) {
+    @Override
+    public void buildEnvVars(Run<?,?> run, EnvVars env, Node node) {
         for (ParameterValue p : getParameters()) {
             if (p == null) continue;
-            p.buildEnvironment(build, env); 
+            p.buildEnvironment(run, env);
         }
     }
 

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2301,6 +2301,9 @@ public EnvVars getEnvironment() throws IOException, InterruptedException {
         for (EnvironmentContributor ec : EnvironmentContributor.all().reverseView())
             ec.buildEnvironmentFor(this,env,listener);
 
+        for (EnvironmentContributingAction a : getActions(EnvironmentContributingAction.class))
+            a.buildEnvVars(this,env,n);
+
         return env;
     }
 

File: core/src/test/java/hudson/model/ParametersActionTest.java
Patch:
@@ -105,7 +105,7 @@ public void checkNullParameterValues() {
         
         // Interaction with build
         EnvVars vars = new EnvVars();
-        parametersAction.buildEnvVars(build, vars);
+        parametersAction.buildEnvVars(build, vars, build.getBuiltOn());
         assertEquals(2, vars.size());   
         parametersAction.createVariableResolver(build);
         

File: core/src/main/java/hudson/ProxyConfiguration.java
Patch:
@@ -396,7 +396,7 @@ private Credentials createCredentials(String userName, String password) {
             if (userName.indexOf('\\') >= 0){
                 final String domain = userName.substring(0, userName.indexOf('\\'));
                 final String user = userName.substring(userName.indexOf('\\') + 1);
-                return new NTCredentials(user, Secret.fromString(password).getPlainText(), domain, "");
+                return new NTCredentials(user, Secret.fromString(password).getPlainText(), "", domain);
             } else {
                 return new UsernamePasswordCredentials(userName, Secret.fromString(password).getPlainText());
             }

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -337,7 +337,7 @@ public Set<User> calculateCulprits() {
         AbstractBuild<P,R> p = getPreviousCompletedBuild();
         if (upstreamCulprits) {
             // If we have dependencies since the last successful build, add their authors to our list
-            if (p.getPreviousNotFailedBuild() != null) {
+            if (p != null && p.getPreviousNotFailedBuild() != null) {
                 Map<AbstractProject, AbstractBuild.DependencyChange> depmap =
                         p.getDependencyChanges(p.getPreviousSuccessfulBuild());
                 for (AbstractBuild.DependencyChange dep : depmap.values()) {

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -1947,7 +1947,8 @@ private Object writeReplace() {
             if (saving.contains(this)) {
                 return this;
             } else {
-                LOGGER.warning("JENKINS-45892: improper backreference detected in " + getDataFile());
+                // Unfortunately we cannot easily tell which XML file is actually being saved here, at least without implementing a custom Converter.
+                LOGGER.log(WARNING, "JENKINS-45892: reference to {0} being saved but not at top level", this);
                 return new Replacer(this);
             }
         }

File: core/src/main/java/hudson/node_monitors/ResponseTimeMonitor.java
Patch:
@@ -23,7 +23,6 @@
  */
 package hudson.node_monitors;
 
-import hudson.Util;
 import hudson.Extension;
 import hudson.model.Computer;
 import hudson.remoting.Callable;
@@ -49,6 +48,9 @@ public class ResponseTimeMonitor extends NodeMonitor {
     public static final AbstractNodeMonitorDescriptor<Data> DESCRIPTOR = new AbstractAsyncNodeMonitorDescriptor<Data>() {
         @Override
         protected Callable<Data,IOException> createCallable(Computer c) {
+            if (c.getChannel() == null) {
+                return null;
+            }
             return new Step1(get(c));
         }
 

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -316,8 +316,8 @@ private List<? extends ParameterValue> filter(List<ParameterValue> parameters) {
             return parameters;
         }
 
-        String shouldKeepFlag = SystemProperties.getString(KEEP_UNDEFINED_PARAMETERS_SYSTEM_PROPERTY_NAME);
-        if ("true".equalsIgnoreCase(shouldKeepFlag)) {
+        Boolean shouldKeepFlag = SystemProperties.optBoolean(KEEP_UNDEFINED_PARAMETERS_SYSTEM_PROPERTY_NAME);
+        if (shouldKeepFlag != null && shouldKeepFlag.booleanValue()) {
             return parameters;
         }
 
@@ -326,7 +326,7 @@ private List<? extends ParameterValue> filter(List<ParameterValue> parameters) {
         for (ParameterValue v : this.parameters) {
             if (this.parameterDefinitionNames.contains(v.getName()) || isSafeParameter(v.getName())) {
                 filteredParameters.add(v);
-            } else if ("false".equalsIgnoreCase(shouldKeepFlag)) {
+            } else if (shouldKeepFlag == null) {
                 LOGGER.log(Level.WARNING, "Skipped parameter `{0}` as it is undefined on `{1}`. Set `-D{2}=true` to allow "
                         + "undefined parameters to be injected as environment variables or `-D{3}=[comma-separated list]` to whitelist specific parameter names, "
                         + "even though it represents a security breach or `-D{2}=false` to no longer show this message.",

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -337,7 +337,7 @@ public Set<User> calculateCulprits() {
         AbstractBuild<P,R> p = getPreviousCompletedBuild();
         if (upstreamCulprits) {
             // If we have dependencies since the last successful build, add their authors to our list
-            if (p.getPreviousNotFailedBuild() != null) {
+            if (p != null && p.getPreviousNotFailedBuild() != null) {
                 Map<AbstractProject, AbstractBuild.DependencyChange> depmap =
                         p.getDependencyChanges(p.getPreviousSuccessfulBuild());
                 for (AbstractBuild.DependencyChange dep : depmap.values()) {

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3051,6 +3051,8 @@ public LabelAtom getSelfLabel() {
         return getLabelAtom("master");
     }
 
+    @Override
+    @Nonnull
     public Computer createComputer() {
         return new Hudson.MasterComputer();
     }

File: core/src/main/java/hudson/cli/RunRangeCommand.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * {@link CLICommand} that acts on a series of {@link Run}s.
- * @since FIXME
+ * @since 2.62
  */
 public abstract class RunRangeCommand extends CLICommand {
     @Argument(metaVar="JOB",usage="Name of the job to build",required=true,index=0)

File: core/src/main/java/hudson/console/HudsonExceptionNote.java
Patch:
@@ -40,7 +40,7 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.349 - produces search hyperlinks to the http://stacktrace.jenkins-ci.org service
- * @since TODO - does nothing due to JENKINS-42861
+ * @since 2.56 - does nothing due to JENKINS-42861
  * @deprecated This ConsoleNote used to provide hyperlinks to the
  *             <code>http://stacktrace.jenkins-ci.org/</code> service, which is dead now (JENKINS-42861).
  *             This console note does nothing right now.

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -976,7 +976,7 @@ public List<OneOffExecutor> getOneOffExecutors() {
      * Gets the read-only snapshot view of all {@link Executor} instances including {@linkplain OneOffExecutor}s.
      *
      * @return the read-only snapshot view of all {@link Executor} instances including {@linkplain OneOffExecutor}s.
-     * @since TODO
+     * @since 2.55
      */
     public List<Executor> getAllExecutors() {
         List<Executor> result = new ArrayList<>(executors.size() + oneOffExecutors.size());

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -1051,7 +1051,7 @@ public PermalinkList getPermalinks() {
     /**
      * RSS feed for changes in this project.
      *
-     * @since TODO
+     * @since 2.60
      */
     public void doRssChangelog(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
         class FeedItem {

File: core/src/main/java/hudson/model/listeners/ItemListener.java
Patch:
@@ -64,7 +64,7 @@ public void onCreated(Item item) {
      * @param src the item being copied
      * @param parent the proposed parent
      * @throws Failure to veto the operation.
-     * @since TODO
+     * @since 2.51
      */
     public void onCheckCopy(Item src, ItemGroup parent) throws Failure {
     }
@@ -200,7 +200,7 @@ public static void fireOnCopied(final Item src, final Item result) {
      * @param src    the item being copied
      * @param parent the proposed parent
      * @throws Failure if the copy operation has been vetoed.
-     * @since TODO
+     * @since 2.51
      */
     public static void checkBeforeCopy(final Item src, final ItemGroup parent) throws Failure {
         for (ItemListener l : all()) {

File: core/src/main/java/hudson/model/queue/Tasks.java
Patch:
@@ -65,7 +65,7 @@ public static Object getSameNodeConstraintOf(SubTask t) {
      * @param t the {@link SubTask}.
      * @return the {@link hudson.model.Item} associated with the {@link SubTask} or {@code null} if this
      * {@link SubTask} is not associated with an {@link hudson.model.Item}
-     * @since TODO
+     * @since 2.55
      */
     @CheckForNull
     public static hudson.model.Item getItemOf(@Nonnull SubTask t) {

File: core/src/main/java/hudson/scheduler/CronTab.java
Patch:
@@ -328,7 +328,7 @@ public Calendar ceil(long t) {
      * This method modifies the given calendar and returns the same object.
      *
      * @throws RareOrImpossibleDateException if the date isn't hit in the 2 years after it indicates an impossible
-     * (e.g. Jun 31) date, or at least a date too rare to be useful. This addresses JENKINS-41864 and was added in TODO
+     * (e.g. Jun 31) date, or at least a date too rare to be useful. This addresses JENKINS-41864 and was added in 2.49
      */
     public Calendar ceil(Calendar cal) {
         Calendar twoYearsFuture = (Calendar) cal.clone();
@@ -389,7 +389,7 @@ public Calendar floor(long t) {
      * This method modifies the given calendar and returns the same object.
      *
      * @throws RareOrImpossibleDateException if the date isn't hit in the 2 years before it indicates an impossible
-     * (e.g. Jun 31) date, or at least a date too rare to be useful. This addresses JENKINS-41864 and was added in TODO
+     * (e.g. Jun 31) date, or at least a date too rare to be useful. This addresses JENKINS-41864 and was added in 2.49
      */
     public Calendar floor(Calendar cal) {
         Calendar twoYearsAgo = (Calendar) cal.clone();
@@ -537,7 +537,7 @@ private String toString(String key, long bit) {
      * Returns the configured time zone, or null if none is configured
      *
      * @return the configured time zone, or null if none is configured
-     * @since TODO
+     * @since 2.54
      */
     @CheckForNull public TimeZone getTimeZone() {
         if (this.specTimezone == null) {

File: core/src/main/java/hudson/slaves/Cloud.java
Patch:
@@ -80,7 +80,7 @@
  *
  * <h3>Views</h3>
  *
- * Since version TODO, Jenkins clouds are visualized in UI. Implementations can provide <tt>top</tt> or <tt>main</tt> view
+ * Since version 2.64, Jenkins clouds are visualized in UI. Implementations can provide <tt>top</tt> or <tt>main</tt> view
  * to be presented at the top of the page or at the bottom respectively. In the middle, actions have their <tt>summary</tt>
  * views displayed. Actions further contribute to <tt>sidepanel</tt> with <tt>box</tt> views. All mentioned views are
  * optional to preserve backward compatibility.
@@ -110,7 +110,7 @@ public String getDisplayName() {
     /**
      * Get URL of the cloud.
      *
-     * @since TODO
+     * @since 2.64
      * @return Jenkins relative URL.
      */
     public @Nonnull String getUrl() {

File: core/src/main/java/hudson/slaves/ComputerLauncher.java
Patch:
@@ -48,7 +48,7 @@
  * </dl>
  *
  * @author Stephen Connolly
- * @since 24-Apr-2008 22:12:35
+ * @since 1.216-ish
  * @see ComputerConnector
  */
 public abstract class ComputerLauncher extends AbstractDescribableImpl<ComputerLauncher> implements ExtensionPoint {

File: core/src/main/java/hudson/tools/BatchCommandInstaller.java
Patch:
@@ -33,8 +33,8 @@
 
 /**
  * Installs tool via script execution of Batch script.
- * Inspired by "Command installer" from the Jenkins core.
- * @since 0.1
+ * 
+ * @since 1.549
  */
 public class BatchCommandInstaller extends AbstractCommandInstaller {
 

File: core/src/main/java/hudson/util/PersistedList.java
Patch:
@@ -45,7 +45,7 @@
  * Collection whose change is notified to the parent object for persistence.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.MULTISOURCE
+ * @since 1.333
  */
 public class PersistedList<T> extends AbstractList<T> {
     protected final CopyOnWriteList<T> data = new CopyOnWriteList<T>();

File: core/src/main/java/jenkins/FilePathFilter.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @author Kohsuke Kawaguchi
  * @see FilePath
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class FilePathFilter {
     /**

File: core/src/main/java/jenkins/FilePathFilterAggregator.java
Patch:
@@ -15,7 +15,7 @@
  *
  * @author Kohsuke Kawaguchi
  * @see FilePath
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 class FilePathFilterAggregator extends FilePathFilter {
     private final CopyOnWriteArrayList<Entry> all = new CopyOnWriteArrayList<Entry>();

File: core/src/main/java/jenkins/MasterToSlaveFileCallable.java
Patch:
@@ -7,7 +7,7 @@
 /**
  * {@link FileCallable}s that are meant to be only used on the master.
  *
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class MasterToSlaveFileCallable<T> implements FileCallable<T> {
     @Override

File: core/src/main/java/jenkins/ReflectiveFilePathFilter.java
Patch:
@@ -7,7 +7,7 @@
  * operations as a single string argument.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class ReflectiveFilePathFilter extends FilePathFilter {
     /**

File: core/src/main/java/jenkins/SlaveToMasterFileCallable.java
Patch:
@@ -7,7 +7,7 @@
 /**
  * {@link FileCallable}s that can be executed on the master, sent by the agent.
  *
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class SlaveToMasterFileCallable<T> implements FileCallable<T> {
     @Override

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2176,7 +2176,7 @@ public AdministrativeMonitor getAdministrativeMonitor(String id) {
 
     /**
      * Returns the enabled and activated administrative monitors.
-     * @since TODO
+     * @since 2.64
      */
     public List<AdministrativeMonitor> getActiveAdministrativeMonitors() {
         return administrativeMonitors.stream().filter(m -> m.isEnabled() && m.isActivated()).collect(Collectors.toList());

File: core/src/main/java/jenkins/model/queue/ItemDeletion.java
Patch:
@@ -41,7 +41,7 @@
 /**
  * A {@link Queue.QueueDecisionHandler} that blocks items being deleted from entering the queue.
  *
- * @since TODO
+ * @since 2.55
  */
 @Extension
 public class ItemDeletion extends Queue.QueueDecisionHandler {

File: core/src/main/java/jenkins/scm/RunWithSCM.java
Patch:
@@ -48,7 +48,7 @@
 /**
  * Allows a {@link Run} to provide {@link SCM}-related methods, such as providing changesets and culprits.
  *
- * @since FIXME
+ * @since 2.60
  */
 public interface RunWithSCM<JobT extends Job<JobT, RunT>,
         RunT extends Run<JobT, RunT> & RunWithSCM<JobT,RunT>> {

File: core/src/main/java/jenkins/security/ChannelConfigurator.java
Patch:
@@ -13,7 +13,7 @@
  * Intercepts the new creation of {@link Channel} and tweak its configuration.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class ChannelConfigurator implements ExtensionPoint {
     /**

File: core/src/main/java/jenkins/security/MasterToSlaveCallable.java
Patch:
@@ -8,7 +8,7 @@
  * Convenient {@link Callable} meant to be run on agent.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class MasterToSlaveCallable<V, T extends Throwable> implements Callable<V,T> {
     @Override

File: core/src/main/java/jenkins/security/NotReallyRoleSensitiveCallable.java
Patch:
@@ -8,7 +8,7 @@
  * just as a convenient function that has parameterized return value and exception type.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class NotReallyRoleSensitiveCallable<V,T extends Throwable> implements Callable<V,T> {
     @Override

File: core/src/main/java/jenkins/security/Roles.java
Patch:
@@ -12,7 +12,7 @@
  * not have any role.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public class Roles {
     /**

File: core/src/main/java/jenkins/security/SlaveToMasterCallable.java
Patch:
@@ -8,7 +8,7 @@
  * Convenient {@link Callable} that are meant to run on the master (sent by agent/CLI/etc).
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class SlaveToMasterCallable<V, T extends Throwable> implements Callable<V,T> {
     @Override

File: core/src/main/java/jenkins/security/s2m/AdminCallableMonitor.java
Patch:
@@ -18,7 +18,7 @@
  * Report any rejected {@link Callable}s and {@link FilePath} executions and allow
  * admins to whitelist them.
  *
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  * @author Kohsuke Kawaguchi
  */
 @Extension @Symbol("slaveToMasterAccessControl")

File: core/src/main/java/jenkins/security/s2m/AdminFilePathFilter.java
Patch:
@@ -17,7 +17,7 @@
  * This class is just a glue, and the real logic happens inside {@link AdminWhitelistRule}
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public class AdminFilePathFilter extends ReflectiveFilePathFilter {
 

File: core/src/main/java/jenkins/security/s2m/CallableDirectionChecker.java
Patch:
@@ -22,7 +22,7 @@
  * Inspects {@link Callable}s that run on the master.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 @Restricted(NoExternalUse.class) // used implicitly via listener
 public class CallableDirectionChecker extends RoleChecker {

File: core/src/main/java/jenkins/security/s2m/CallableWhitelist.java
Patch:
@@ -18,7 +18,7 @@
  * {@link Callable#checkRoles(RoleChecker)} method.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class CallableWhitelist implements ExtensionPoint {
     /**

File: core/src/main/java/jenkins/security/s2m/MasterKillSwitchConfiguration.java
Patch:
@@ -12,7 +12,7 @@
  * Exposes {@link AdminWhitelistRule#masterKillSwitch} to the admin.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 @Extension
 public class MasterKillSwitchConfiguration extends GlobalConfiguration {

File: core/src/main/java/jenkins/security/s2m/MasterKillSwitchWarning.java
Patch:
@@ -14,7 +14,7 @@
  * If {@link AdminWhitelistRule#masterKillSwitch} is on, warn the user.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 @Extension
 public class MasterKillSwitchWarning extends AdministrativeMonitor {

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol3.java
Patch:
@@ -25,7 +25,7 @@
  *
  * <p>@see {@link org.jenkinsci.remoting.engine.JnlpProtocol3Handler} for more details.
  *
- * @since 1.XXX
+ * @since 1.653
  */
 @Deprecated
 @Extension

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol4.java
Patch:
@@ -58,8 +58,8 @@
  *
  * <p>@see {@link org.jenkinsci.remoting.engine.JnlpProtocol4Handler} for more details.
  *
- * @since 2.27 available as the experimental protocol 
- * @since TODO enabled by default
+ * @since 2.27 available as experimental protocol 
+ * @since 2.41 enabled by default
  */
 @Extension
 public class JnlpSlaveAgentProtocol4 extends AgentProtocol {

File: core/src/main/java/hudson/model/listeners/ItemListener.java
Patch:
@@ -64,7 +64,7 @@ public void onCreated(Item item) {
      * @param src the item being copied
      * @param parent the proposed parent
      * @throws Failure to veto the operation.
-     * @since TODO
+     * @since 2.51
      */
     public void onCheckCopy(Item src, ItemGroup parent) throws Failure {
     }

File: core/src/main/java/hudson/cli/RunRangeCommand.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * {@link CLICommand} that acts on a series of {@link Run}s.
- * @since FIXME
+ * @since 2.62
  */
 public abstract class RunRangeCommand extends CLICommand {
     @Argument(metaVar="JOB",usage="Name of the job to build",required=true,index=0)

File: core/src/main/java/hudson/console/HudsonExceptionNote.java
Patch:
@@ -40,7 +40,7 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.349 - produces search hyperlinks to the http://stacktrace.jenkins-ci.org service
- * @since TODO - does nothing due to JENKINS-42861
+ * @since 2.56 - does nothing due to JENKINS-42861
  * @deprecated This ConsoleNote used to provide hyperlinks to the
  *             <code>http://stacktrace.jenkins-ci.org/</code> service, which is dead now (JENKINS-42861).
  *             This console note does nothing right now.

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -976,7 +976,7 @@ public List<OneOffExecutor> getOneOffExecutors() {
      * Gets the read-only snapshot view of all {@link Executor} instances including {@linkplain OneOffExecutor}s.
      *
      * @return the read-only snapshot view of all {@link Executor} instances including {@linkplain OneOffExecutor}s.
-     * @since TODO
+     * @since 2.55
      */
     public List<Executor> getAllExecutors() {
         List<Executor> result = new ArrayList<>(executors.size() + oneOffExecutors.size());

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -1051,7 +1051,7 @@ public PermalinkList getPermalinks() {
     /**
      * RSS feed for changes in this project.
      *
-     * @since TODO
+     * @since 2.60
      */
     public void doRssChangelog(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
         class FeedItem {

File: core/src/main/java/hudson/model/listeners/ItemListener.java
Patch:
@@ -200,7 +200,7 @@ public static void fireOnCopied(final Item src, final Item result) {
      * @param src    the item being copied
      * @param parent the proposed parent
      * @throws Failure if the copy operation has been vetoed.
-     * @since TODO
+     * @since 2.51
      */
     public static void checkBeforeCopy(final Item src, final ItemGroup parent) throws Failure {
         for (ItemListener l : all()) {

File: core/src/main/java/hudson/model/queue/Tasks.java
Patch:
@@ -65,7 +65,7 @@ public static Object getSameNodeConstraintOf(SubTask t) {
      * @param t the {@link SubTask}.
      * @return the {@link hudson.model.Item} associated with the {@link SubTask} or {@code null} if this
      * {@link SubTask} is not associated with an {@link hudson.model.Item}
-     * @since TODO
+     * @since 2.55
      */
     @CheckForNull
     public static hudson.model.Item getItemOf(@Nonnull SubTask t) {

File: core/src/main/java/hudson/scheduler/CronTab.java
Patch:
@@ -328,7 +328,7 @@ public Calendar ceil(long t) {
      * This method modifies the given calendar and returns the same object.
      *
      * @throws RareOrImpossibleDateException if the date isn't hit in the 2 years after it indicates an impossible
-     * (e.g. Jun 31) date, or at least a date too rare to be useful. This addresses JENKINS-41864 and was added in TODO
+     * (e.g. Jun 31) date, or at least a date too rare to be useful. This addresses JENKINS-41864 and was added in 2.49
      */
     public Calendar ceil(Calendar cal) {
         Calendar twoYearsFuture = (Calendar) cal.clone();
@@ -389,7 +389,7 @@ public Calendar floor(long t) {
      * This method modifies the given calendar and returns the same object.
      *
      * @throws RareOrImpossibleDateException if the date isn't hit in the 2 years before it indicates an impossible
-     * (e.g. Jun 31) date, or at least a date too rare to be useful. This addresses JENKINS-41864 and was added in TODO
+     * (e.g. Jun 31) date, or at least a date too rare to be useful. This addresses JENKINS-41864 and was added in 2.49
      */
     public Calendar floor(Calendar cal) {
         Calendar twoYearsAgo = (Calendar) cal.clone();
@@ -537,7 +537,7 @@ private String toString(String key, long bit) {
      * Returns the configured time zone, or null if none is configured
      *
      * @return the configured time zone, or null if none is configured
-     * @since TODO
+     * @since 2.54
      */
     @CheckForNull public TimeZone getTimeZone() {
         if (this.specTimezone == null) {

File: core/src/main/java/hudson/slaves/Cloud.java
Patch:
@@ -80,7 +80,7 @@
  *
  * <h3>Views</h3>
  *
- * Since version TODO, Jenkins clouds are visualized in UI. Implementations can provide <tt>top</tt> or <tt>main</tt> view
+ * Since version 2.64, Jenkins clouds are visualized in UI. Implementations can provide <tt>top</tt> or <tt>main</tt> view
  * to be presented at the top of the page or at the bottom respectively. In the middle, actions have their <tt>summary</tt>
  * views displayed. Actions further contribute to <tt>sidepanel</tt> with <tt>box</tt> views. All mentioned views are
  * optional to preserve backward compatibility.
@@ -110,7 +110,7 @@ public String getDisplayName() {
     /**
      * Get URL of the cloud.
      *
-     * @since TODO
+     * @since 2.64
      * @return Jenkins relative URL.
      */
     public @Nonnull String getUrl() {

File: core/src/main/java/hudson/slaves/ComputerLauncher.java
Patch:
@@ -48,7 +48,7 @@
  * </dl>
  *
  * @author Stephen Connolly
- * @since 24-Apr-2008 22:12:35
+ * @since 1.216-ish
  * @see ComputerConnector
  */
 public abstract class ComputerLauncher extends AbstractDescribableImpl<ComputerLauncher> implements ExtensionPoint {

File: core/src/main/java/hudson/tools/BatchCommandInstaller.java
Patch:
@@ -33,8 +33,8 @@
 
 /**
  * Installs tool via script execution of Batch script.
- * Inspired by "Command installer" from the Jenkins core.
- * @since 0.1
+ * 
+ * @since 1.549
  */
 public class BatchCommandInstaller extends AbstractCommandInstaller {
 

File: core/src/main/java/hudson/util/PersistedList.java
Patch:
@@ -45,7 +45,7 @@
  * Collection whose change is notified to the parent object for persistence.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.MULTISOURCE
+ * @since 1.333
  */
 public class PersistedList<T> extends AbstractList<T> {
     protected final CopyOnWriteList<T> data = new CopyOnWriteList<T>();

File: core/src/main/java/jenkins/FilePathFilter.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @author Kohsuke Kawaguchi
  * @see FilePath
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class FilePathFilter {
     /**

File: core/src/main/java/jenkins/FilePathFilterAggregator.java
Patch:
@@ -15,7 +15,7 @@
  *
  * @author Kohsuke Kawaguchi
  * @see FilePath
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 class FilePathFilterAggregator extends FilePathFilter {
     private final CopyOnWriteArrayList<Entry> all = new CopyOnWriteArrayList<Entry>();

File: core/src/main/java/jenkins/MasterToSlaveFileCallable.java
Patch:
@@ -7,7 +7,7 @@
 /**
  * {@link FileCallable}s that are meant to be only used on the master.
  *
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class MasterToSlaveFileCallable<T> implements FileCallable<T> {
     @Override

File: core/src/main/java/jenkins/ReflectiveFilePathFilter.java
Patch:
@@ -7,7 +7,7 @@
  * operations as a single string argument.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class ReflectiveFilePathFilter extends FilePathFilter {
     /**

File: core/src/main/java/jenkins/SlaveToMasterFileCallable.java
Patch:
@@ -7,7 +7,7 @@
 /**
  * {@link FileCallable}s that can be executed on the master, sent by the agent.
  *
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class SlaveToMasterFileCallable<T> implements FileCallable<T> {
     @Override

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2176,7 +2176,7 @@ public AdministrativeMonitor getAdministrativeMonitor(String id) {
 
     /**
      * Returns the enabled and activated administrative monitors.
-     * @since TODO
+     * @since 2.64
      */
     public List<AdministrativeMonitor> getActiveAdministrativeMonitors() {
         return administrativeMonitors.stream().filter(m -> m.isEnabled() && m.isActivated()).collect(Collectors.toList());

File: core/src/main/java/jenkins/model/queue/ItemDeletion.java
Patch:
@@ -41,7 +41,7 @@
 /**
  * A {@link Queue.QueueDecisionHandler} that blocks items being deleted from entering the queue.
  *
- * @since TODO
+ * @since 2.55
  */
 @Extension
 public class ItemDeletion extends Queue.QueueDecisionHandler {

File: core/src/main/java/jenkins/scm/RunWithSCM.java
Patch:
@@ -48,7 +48,7 @@
 /**
  * Allows a {@link Run} to provide {@link SCM}-related methods, such as providing changesets and culprits.
  *
- * @since FIXME
+ * @since 2.60
  */
 public interface RunWithSCM<JobT extends Job<JobT, RunT>,
         RunT extends Run<JobT, RunT> & RunWithSCM<JobT,RunT>> {

File: core/src/main/java/jenkins/security/ChannelConfigurator.java
Patch:
@@ -13,7 +13,7 @@
  * Intercepts the new creation of {@link Channel} and tweak its configuration.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class ChannelConfigurator implements ExtensionPoint {
     /**

File: core/src/main/java/jenkins/security/MasterToSlaveCallable.java
Patch:
@@ -8,7 +8,7 @@
  * Convenient {@link Callable} meant to be run on agent.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class MasterToSlaveCallable<V, T extends Throwable> implements Callable<V,T> {
     @Override

File: core/src/main/java/jenkins/security/NotReallyRoleSensitiveCallable.java
Patch:
@@ -8,7 +8,7 @@
  * just as a convenient function that has parameterized return value and exception type.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class NotReallyRoleSensitiveCallable<V,T extends Throwable> implements Callable<V,T> {
     @Override

File: core/src/main/java/jenkins/security/Roles.java
Patch:
@@ -12,7 +12,7 @@
  * not have any role.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public class Roles {
     /**

File: core/src/main/java/jenkins/security/SlaveToMasterCallable.java
Patch:
@@ -8,7 +8,7 @@
  * Convenient {@link Callable} that are meant to run on the master (sent by agent/CLI/etc).
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class SlaveToMasterCallable<V, T extends Throwable> implements Callable<V,T> {
     @Override

File: core/src/main/java/jenkins/security/s2m/AdminCallableMonitor.java
Patch:
@@ -18,7 +18,7 @@
  * Report any rejected {@link Callable}s and {@link FilePath} executions and allow
  * admins to whitelist them.
  *
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  * @author Kohsuke Kawaguchi
  */
 @Extension @Symbol("slaveToMasterAccessControl")

File: core/src/main/java/jenkins/security/s2m/AdminFilePathFilter.java
Patch:
@@ -17,7 +17,7 @@
  * This class is just a glue, and the real logic happens inside {@link AdminWhitelistRule}
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public class AdminFilePathFilter extends ReflectiveFilePathFilter {
 

File: core/src/main/java/jenkins/security/s2m/CallableDirectionChecker.java
Patch:
@@ -22,7 +22,7 @@
  * Inspects {@link Callable}s that run on the master.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 @Restricted(NoExternalUse.class) // used implicitly via listener
 public class CallableDirectionChecker extends RoleChecker {

File: core/src/main/java/jenkins/security/s2m/CallableWhitelist.java
Patch:
@@ -18,7 +18,7 @@
  * {@link Callable#checkRoles(RoleChecker)} method.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 public abstract class CallableWhitelist implements ExtensionPoint {
     /**

File: core/src/main/java/jenkins/security/s2m/MasterKillSwitchConfiguration.java
Patch:
@@ -12,7 +12,7 @@
  * Exposes {@link AdminWhitelistRule#masterKillSwitch} to the admin.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 @Extension
 public class MasterKillSwitchConfiguration extends GlobalConfiguration {

File: core/src/main/java/jenkins/security/s2m/MasterKillSwitchWarning.java
Patch:
@@ -14,7 +14,7 @@
  * If {@link AdminWhitelistRule#masterKillSwitch} is on, warn the user.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.THU
+ * @since 1.587 / 1.580.1
  */
 @Extension
 public class MasterKillSwitchWarning extends AdministrativeMonitor {

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol3.java
Patch:
@@ -25,7 +25,7 @@
  *
  * <p>@see {@link org.jenkinsci.remoting.engine.JnlpProtocol3Handler} for more details.
  *
- * @since 1.XXX
+ * @since 1.653
  */
 @Deprecated
 @Extension

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol4.java
Patch:
@@ -58,8 +58,8 @@
  *
  * <p>@see {@link org.jenkinsci.remoting.engine.JnlpProtocol4Handler} for more details.
  *
- * @since 2.27 available as the experimental protocol 
- * @since TODO enabled by default
+ * @since 2.27 available as experimental protocol 
+ * @since 2.41 enabled by default
  */
 @Extension
 public class JnlpSlaveAgentProtocol4 extends AgentProtocol {

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -337,7 +337,7 @@ public Set<User> calculateCulprits() {
         AbstractBuild<P,R> p = getPreviousCompletedBuild();
         if (upstreamCulprits) {
             // If we have dependencies since the last successful build, add their authors to our list
-            if (p.getPreviousNotFailedBuild() != null) {
+            if (p != null && p.getPreviousNotFailedBuild() != null) {
                 Map<AbstractProject, AbstractBuild.DependencyChange> depmap =
                         p.getDependencyChanges(p.getPreviousSuccessfulBuild());
                 for (AbstractBuild.DependencyChange dep : depmap.values()) {

File: cli/src/main/java/hudson/cli/SSHCLI.java
Patch:
@@ -47,9 +47,9 @@
 import org.apache.sshd.client.keyverifier.ServerKeyVerifier;
 import org.apache.sshd.client.session.ClientSession;
 import org.apache.sshd.common.future.WaitableFuture;
-import org.apache.sshd.common.util.SecurityUtils;
 import org.apache.sshd.common.util.io.NoCloseInputStream;
 import org.apache.sshd.common.util.io.NoCloseOutputStream;
+import org.apache.sshd.common.util.security.SecurityUtils;
 
 /**
  * Implements SSH connection mode of {@link CLI}.

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -4129,7 +4129,9 @@ public void doRestart(StaplerRequest req, StaplerResponse rsp) throws IOExceptio
             restart();
         }
 
-        rsp.sendRedirect2(".");
+        if (rsp != null) {
+            rsp.sendRedirect2(".");
+        }
     }
 
     /**

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3051,6 +3051,8 @@ public LabelAtom getSelfLabel() {
         return getLabelAtom("master");
     }
 
+    @Override
+    @Nonnull
     public Computer createComputer() {
         return new Hudson.MasterComputer();
     }

File: core/src/test/java/hudson/LauncherTest.java
Patch:
@@ -61,7 +61,8 @@ public class LauncherTest {
             p.kill();
             assertTrue(p.join()!=0);
             long end = System.currentTimeMillis();
-            assertTrue("join finished promptly", (end - start < 15000));
+            long terminationTime = end - start;
+            assertTrue("Join did not finish promptly. The completion time (" + terminationTime + "ms) is longer than expected 15s", terminationTime < 15000);
             channels.french.call(NOOP); // this only returns after the other side of the channel has finished executing cancellation
             Thread.sleep(2000); // more delay to make sure it's gone
             assertNull("process should be gone",ProcessTree.get().get(Integer.parseInt(FileUtils.readFileToString(tmp).trim())));

File: cli/src/main/java/hudson/cli/SSHCLI.java
Patch:
@@ -63,6 +63,7 @@ static int sshConnection(String jenkinsUrl, String user, List<String> args, Priv
         Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING); // suppress: BouncyCastle not registered, using the default JCE provider
         URL url = new URL(jenkinsUrl + "login");
         URLConnection conn = url.openConnection();
+        CLI.verifyJenkinsConnection(conn);
         String endpointDescription = conn.getHeaderField("X-SSH-Endpoint");
 
         if (endpointDescription == null) {

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -575,7 +575,7 @@ public int getNumExecutors() {
      *
      * @since 1.624
      * @return
-     *      null if the computer is disconnected and therefore we don't know whether it is Unix or not.
+     *      {@code null} if the computer is disconnected and therefore we don't know whether it is Unix or not.
      */
     public abstract @CheckForNull Boolean isUnix();
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -4129,7 +4129,9 @@ public void doRestart(StaplerRequest req, StaplerResponse rsp) throws IOExceptio
             restart();
         }
 
-        rsp.sendRedirect2(".");
+        if (rsp != null) {
+            rsp.sendRedirect2(".");
+        }
     }
 
     /**

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -4129,7 +4129,9 @@ public void doRestart(StaplerRequest req, StaplerResponse rsp) throws IOExceptio
             restart();
         }
 
-        rsp.sendRedirect2(".");
+        if (rsp != null) {
+            rsp.sendRedirect2(".");
+        }
     }
 
     /**

File: core/src/main/java/jenkins/model/ModifiableTopLevelItemGroup.java
Patch:
@@ -40,7 +40,7 @@
 public interface ModifiableTopLevelItemGroup extends ModifiableItemGroup<TopLevelItem> {
 
     /**
-     * Copys a job.
+     * Copies a job.
      *
      * @param src
      *      A {@link TopLevelItem} to be copied.
@@ -52,9 +52,9 @@ public interface ModifiableTopLevelItemGroup extends ModifiableItemGroup<TopLeve
     <T extends TopLevelItem> T copy(T src, String name) throws IOException;
 
     /**
-     * /**
      * Creates a new job from its configuration XML. The type of the job created will be determined by
      * what's in this XML.
+     *
      * @param name
      *      Name of the newly created project.
      * @param xml
@@ -66,6 +66,7 @@ public interface ModifiableTopLevelItemGroup extends ModifiableItemGroup<TopLeve
 
     /**
      * Creates a new job.
+     *
      * @param type Descriptor for job type
      * @param name Name for job
      * @param notify Whether to fire onCreated method for all ItemListeners

File: core/src/main/java/jenkins/model/ModifiableTopLevelItemGroup.java
Patch:
@@ -40,7 +40,7 @@
 public interface ModifiableTopLevelItemGroup extends ModifiableItemGroup<TopLevelItem> {
 
     /**
-     * Copys a job.
+     * Copies a job.
      *
      * @param src
      *      A {@link TopLevelItem} to be copied.
@@ -52,9 +52,9 @@ public interface ModifiableTopLevelItemGroup extends ModifiableItemGroup<TopLeve
     <T extends TopLevelItem> T copy(T src, String name) throws IOException;
 
     /**
-     * /**
      * Creates a new job from its configuration XML. The type of the job created will be determined by
      * what's in this XML.
+     *
      * @param name
      *      Name of the newly created project.
      * @param xml
@@ -66,6 +66,7 @@ public interface ModifiableTopLevelItemGroup extends ModifiableItemGroup<TopLeve
 
     /**
      * Creates a new job.
+     *
      * @param type Descriptor for job type
      * @param name Name for job
      * @param notify Whether to fire onCreated method for all ItemListeners

File: cli/src/main/java/hudson/cli/SSHCLI.java
Patch:
@@ -63,6 +63,7 @@ static int sshConnection(String jenkinsUrl, String user, List<String> args, Priv
         Logger.getLogger(SecurityUtils.class.getName()).setLevel(Level.WARNING); // suppress: BouncyCastle not registered, using the default JCE provider
         URL url = new URL(jenkinsUrl + "login");
         URLConnection conn = url.openConnection();
+        CLI.verifyJenkinsConnection(conn);
         String endpointDescription = conn.getHeaderField("X-SSH-Endpoint");
 
         if (endpointDescription == null) {

File: core/src/main/java/hudson/util/TimeUnit2.java
Patch:
@@ -29,6 +29,7 @@
 
 package hudson.util;
 
+import hudson.RestrictedSince;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.DoNotUse;
 
@@ -70,6 +71,7 @@
  * had better conversion until Java 6 went out.)
  */
 @Deprecated
+@RestrictedSince("TODO")
 @Restricted(DoNotUse.class)
 public enum TimeUnit2 {
     NANOSECONDS {

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1103,7 +1103,7 @@ public static String getRelativeLinkTo(Item p) {
             ItemGroup ig = i.getParent();
             url = i.getShortUrl()+url;
 
-            if(ig== Jenkins.getInstance() || (view != null && ig == view.getOwnerItemGroup())) {
+            if(ig== Jenkins.getInstance() || (view != null && ig == view.getOwner().getItemGroup())) {
                 assert i instanceof TopLevelItem;
                 if (view != null) {
                     // assume p and the current page belong to the same view, so return a relative path

File: core/src/main/java/hudson/model/AllView.java
Patch:
@@ -95,15 +95,15 @@ public String getDisplayName() {
     @Override
     public Item doCreateItem(StaplerRequest req, StaplerResponse rsp)
             throws IOException, ServletException {
-        ItemGroup<? extends TopLevelItem> ig = getOwnerItemGroup();
+        ItemGroup<? extends TopLevelItem> ig = getOwner().getItemGroup();
         if (ig instanceof ModifiableItemGroup)
             return ((ModifiableItemGroup<? extends TopLevelItem>)ig).doCreateItem(req, rsp);
         return null;
     }
 
     @Override
     public Collection<TopLevelItem> getItems() {
-        return (Collection)getOwnerItemGroup().getItems();
+        return (Collection)getOwner().getItemGroup().getItems();
     }
 
     @Override

File: core/src/main/java/hudson/model/Item.java
Patch:
@@ -207,7 +207,7 @@ public interface Item extends PersistenceRoot, SearchableModelObject, AccessCont
      *
      * @since 1.374
       */
-    void onCreatedFromScratch();
+    default void onCreatedFromScratch() {}
 
     /**
      * Save the settings to a file.

File: core/src/main/java/hudson/model/ItemGroup.java
Patch:
@@ -82,7 +82,7 @@ public interface ItemGroup<T extends Item> extends PersistenceRoot, ModelObject
      * Internal method. Called by {@link Item}s when they are renamed by users.
      * This is <em>not</em> expected to call {@link ItemListener#onRenamed}, inconsistent with {@link #onDeleted}.
      */
-    void onRenamed(T item, String oldName, String newName) throws IOException;
+    default void onRenamed(T item, String oldName, String newName) throws IOException {}
 
     /**
      * Internal method. Called by {@link Item}s when they are deleted by users.

File: core/src/main/java/hudson/model/MyView.java
Patch:
@@ -66,7 +66,7 @@ public boolean contains(TopLevelItem item) {
     @Override
     public TopLevelItem doCreateItem(StaplerRequest req, StaplerResponse rsp)
             throws IOException, ServletException {
-        ItemGroup<? extends TopLevelItem> ig = getOwnerItemGroup();
+        ItemGroup<? extends TopLevelItem> ig = getOwner().getItemGroup();
         if (ig instanceof ModifiableItemGroup) {
             return ((ModifiableItemGroup<? extends TopLevelItem>)ig).doCreateItem(req, rsp);
         }
@@ -76,7 +76,7 @@ public TopLevelItem doCreateItem(StaplerRequest req, StaplerResponse rsp)
     @Override
     public Collection<TopLevelItem> getItems() {
         List<TopLevelItem> items = new ArrayList<TopLevelItem>();
-        for (TopLevelItem item : getOwnerItemGroup().getItems()) {
+        for (TopLevelItem item : getOwner().getItemGroup().getItems()) {
             if (item.hasPermission(Item.CONFIGURE)) {
                 items.add(item);
             }

File: core/src/main/java/hudson/model/queue/MappingWorksheet.java
Patch:
@@ -30,6 +30,7 @@
 import hudson.model.Label;
 import hudson.model.LoadBalancer;
 import hudson.model.Node;
+import hudson.model.Queue;
 import hudson.model.Queue.BuildableItem;
 import hudson.model.Queue.Executable;
 import hudson.model.Queue.JobOffer;
@@ -373,8 +374,8 @@ public MappingWorksheet(BuildableItem item, List<? extends ExecutorSlot> offers,
 
         // group execution units into chunks. use of LinkedHashMap ensures that the main work comes at the top
         Map<Object,List<SubTask>> m = new LinkedHashMap<Object,List<SubTask>>();
-        for (SubTask meu : Tasks.getSubTasksOf(item.task)) {
-            Object c = Tasks.getSameNodeConstraintOf(meu);
+        for (SubTask meu : item.task.getSubTasks()) {
+            Object c = meu.getSameNodeConstraint();
             if (c==null)    c = new Object();
 
             List<SubTask> l = m.get(c);

File: core/src/main/java/hudson/model/queue/WorkUnitContext.java
Patch:
@@ -70,7 +70,7 @@ public WorkUnitContext(BuildableItem item) {
         this.actions = new ArrayList<Action>(item.getAllActions());
         
         // +1 for the main task
-        int workUnitSize = Tasks.getSubTasksOf(task).size();
+        int workUnitSize = task.getSubTasks().size();
         startLatch = new Latch(workUnitSize) {
             @Override
             protected void onCriteriaMet() {

File: test/src/test/java/hudson/model/ProjectTest.java
Patch:
@@ -44,7 +44,6 @@
 import hudson.scm.NullSCM;
 import hudson.scm.SCM;
 import hudson.model.queue.SubTaskContributor;
-import hudson.model.queue.AbstractSubTask;
 import hudson.model.Queue.Executable;
 import hudson.model.Queue.Task;
 import hudson.model.queue.SubTask;
@@ -924,7 +923,7 @@ public static class SubTaskImpl2 extends SubTaskImpl{
         
     }
     
-    public static class SubTaskImpl extends AbstractSubTask{
+    public static class SubTaskImpl implements SubTask{
         
         public String projectName;
 

File: test/src/test/java/hudson/model/ViewTest.java
Patch:
@@ -386,14 +386,14 @@ public void testRename() throws Exception {
     @Test
     public void testGetOwnerItemGroup() throws Exception {
         ListView view = listView("foo");
-        assertEquals("View should have owner jenkins.",j.jenkins.getItemGroup(), view.getOwnerItemGroup());
+        assertEquals("View should have owner jenkins.",j.jenkins.getItemGroup(), view.getOwner().getItemGroup());
     }
     
     @Test
     public void testGetOwnerPrimaryView() throws Exception{
         ListView view = listView("foo");
         j.jenkins.setPrimaryView(view);
-        assertEquals("View should have primary view " + view.getDisplayName(),view, view.getOwnerPrimaryView());
+        assertEquals("View should have primary view " + view.getDisplayName(),view, view.getOwner().getPrimaryView());
     }
     
     @Test

File: test/src/test/java/hudson/model/queue/WideExecutionTest.java
Patch:
@@ -52,8 +52,8 @@ public class WideExecutionTest {
     @TestExtension
     public static class Contributor extends SubTaskContributor {
         public Collection<? extends SubTask> forProject(final AbstractProject<?, ?> p) {
-            return Collections.singleton(new AbstractSubTask() {
-                private final AbstractSubTask outer = this;
+            return Collections.singleton(new SubTask() {
+                private final SubTask outer = this;
                 public Executable createExecutable() throws IOException {
                     return new Executable() {
                         public SubTask getParent() {

File: core/src/main/java/hudson/cli/AbstractBuildRangeCommand.java
Patch:
@@ -12,7 +12,9 @@
  * {@link CLICommand} that acts on a series of {@link AbstractBuild}s.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated rather use {@link RunRangeCommand}
  */
+@Deprecated
 public abstract class AbstractBuildRangeCommand extends CLICommand {
     @Argument(metaVar="JOB",usage="Name of the job to build",required=true,index=0)
     public AbstractProject<?,?> job;

File: core/src/main/java/hudson/cli/BuildCommand.java
Patch:
@@ -25,7 +25,6 @@
 
 import hudson.Util;
 import hudson.console.ModelHyperlinkNote;
-import hudson.model.AbstractProject;
 import hudson.model.Cause.UserIdCause;
 import hudson.model.CauseAction;
 import hudson.model.Job;

File: core/src/main/java/hudson/cli/SetBuildDescriptionCommand.java
Patch:
@@ -1,7 +1,7 @@
 package hudson.cli;
 
 import hudson.Extension;
-import hudson.model.AbstractProject;
+import hudson.model.Job;
 import hudson.model.Run;
 
 import java.io.Serializable;
@@ -18,7 +18,7 @@ public String getShortDescription() {
      }
 
     @Argument(metaVar="JOB",usage="Name of the job to build",required=true,index=0)
-    public transient AbstractProject<?,?> job;
+    public transient Job<?,?> job;
 
     @Argument(metaVar="BUILD#",usage="Number of the build",required=true,index=1)
     public int number;

File: core/src/main/java/hudson/cli/SetBuildDisplayNameCommand.java
Patch:
@@ -1,7 +1,7 @@
 package hudson.cli;
 
 import hudson.Extension;
-import hudson.model.AbstractProject;
+import hudson.model.Job;
 import hudson.model.Run;
 import org.apache.commons.io.IOUtils;
 import org.kohsuke.args4j.Argument;
@@ -18,7 +18,7 @@ public String getShortDescription() {
     }
 
     @Argument(metaVar="JOB", usage="Name of the job to build", required=true, index=0)
-    public transient AbstractProject<?, ?> job;
+    public transient Job<?, ?> job;
 
     @Argument(metaVar="BUILD#", usage="Number of the build", required=true, index=1)
     public int number;

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -850,11 +850,11 @@ public String getSearchName() {
      */
     @CLIResolver
     public static AbstractItem resolveForCLI(
-            @Argument(required=true,metaVar="NAME",usage="Job name") String name) throws CmdLineException {
+            @Argument(required=true,metaVar="NAME",usage="Item name") String name) throws CmdLineException {
         // TODO can this (and its pseudo-override in AbstractProject) share code with GenericItemOptionHandler, used for explicit CLICommand’s rather than CLIMethod’s?
         AbstractItem item = Jenkins.getInstance().getItemByFullName(name, AbstractItem.class);
         if (item==null) {
-            AbstractProject project = AbstractProject.findNearest(name); // TODO should be Items.findNearest
+            AbstractItem project = Items.findNearest(AbstractItem.class, name, Jenkins.getInstance());
             throw new CmdLineException(null, project == null ? Messages.AbstractItem_NoSuchJobExistsWithoutSuggestion(name)
                     : Messages.AbstractItem_NoSuchJobExists(name, project.getFullName()));
         }

File: test/src/test/java/hudson/cli/RunRangeCommand2Test.java
Patch:
@@ -54,14 +54,14 @@
 /**
  * @author pjanouse
  */
-public class AbstractBuildRangeCommand2Test {
+public class RunRangeCommand2Test {
 
     private CLICommandInvoker command;
 
     @Rule public final JenkinsRule j = new JenkinsRule();
 
     @Before public void setUp() {
-        command = new CLICommandInvoker(j, new AbstractBuildRangeCommandTest.DummyRangeCommand());
+        command = new CLICommandInvoker(j, new RunRangeCommandTest.DummyRangeCommand());
     }
 
     @Test public void dummyRangeShouldFailIfJobNameIsEmptyOnEmptyJenkins() throws Exception {

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1615,7 +1615,7 @@ public final List<AbstractProject> getBuildTriggerUpstreamProjects() {
         for (AbstractProject<?,?> ap : getUpstreamProjects()) {
             BuildTrigger buildTrigger = ap.getPublishersList().get(BuildTrigger.class);
             if (buildTrigger != null)
-                if (buildTrigger.getChildProjects(ap).contains(this))
+                if (buildTrigger.getChildJobs(ap).contains(this))
                     result.add(ap);
         }
         return result;

File: core/src/main/java/hudson/cli/BuildCommand.java
Patch:
@@ -158,7 +158,7 @@ protected int run() throws Exception {
 
         if (!job.isBuildable()) {
             String msg = Messages.BuildCommand_CLICause_CannotBuildUnknownReasons(job.getFullDisplayName());
-            if (job instanceof AbstractProject<?, ?> && ((AbstractProject<?, ?>)job).isDisabled()) {
+            if (job instanceof ParameterizedJobMixIn.ParameterizedJob && ((ParameterizedJobMixIn.ParameterizedJob) job).isDisabled()) {
                 msg = Messages.BuildCommand_CLICause_CannotBuildDisabled(job.getFullDisplayName());
             } else if (job.isHoldOffBuildUntilSave()){
                 msg = Messages.BuildCommand_CLICause_CannotBuildConfigNotSaved(job.getFullDisplayName());

File: core/src/main/java/hudson/cli/declarative/CLIRegisterer.java
Patch:
@@ -58,6 +58,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
+import java.util.MissingResourceException;
 import java.util.Stack;
 import static java.util.logging.Level.SEVERE;
 
@@ -279,7 +280,7 @@ protected int run() throws Exception {
                             throw new UnsupportedOperationException();
                         }
                     }));
-                } catch (ClassNotFoundException e) {
+                } catch (ClassNotFoundException | MissingResourceException e) {
                     LOGGER.log(SEVERE,"Failed to process @CLIMethod: "+m,e);
                 }
             }

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -854,7 +854,7 @@ public static AbstractItem resolveForCLI(
         // TODO can this (and its pseudo-override in AbstractProject) share code with GenericItemOptionHandler, used for explicit CLICommand’s rather than CLIMethod’s?
         AbstractItem item = Jenkins.getInstance().getItemByFullName(name, AbstractItem.class);
         if (item==null) {
-            AbstractProject project = AbstractProject.findNearest(name);
+            AbstractProject project = AbstractProject.findNearest(name); // TODO should be Items.findNearest
             throw new CmdLineException(null, project == null ? Messages.AbstractItem_NoSuchJobExistsWithoutSuggestion(name)
                     : Messages.AbstractItem_NoSuchJobExists(name, project.getFullName()));
         }

File: core/src/main/java/hudson/model/ListView.java
Patch:
@@ -48,6 +48,7 @@
 import javax.annotation.concurrent.GuardedBy;
 import javax.servlet.ServletException;
 import jenkins.model.Jenkins;
+import jenkins.model.ParameterizedJobMixIn;
 
 import net.sf.json.JSONObject;
 import org.jenkinsci.Symbol;
@@ -197,8 +198,8 @@ public List<TopLevelItem> getItems() {
         for (TopLevelItem item : candidates) {
             if (!names.contains(item.getRelativeNameFrom(getOwnerItemGroup()))) continue;
             // Add if no status filter or filter matches enabled/disabled status:
-            if(statusFilter == null || !(item instanceof AbstractProject)
-                              || ((AbstractProject)item).isDisabled() ^ statusFilter)
+            if(statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?
+                              || ((ParameterizedJobMixIn.ParameterizedJob)item).isDisabled() ^ statusFilter)
                 items.add(item);
         }
 

File: core/src/main/java/jenkins/model/lazy/LazyBuildMixIn.java
Patch:
@@ -272,7 +272,7 @@ public final HistoryWidget createHistoryWidget() {
     public interface LazyLoadingJob<JobT extends Job<JobT,RunT> & Queue.Task & LazyBuildMixIn.LazyLoadingJob<JobT,RunT>, RunT extends Run<JobT,RunT> & LazyLoadingRun<JobT,RunT>> {
         LazyBuildMixIn<JobT,RunT> getLazyBuildMixIn();
         // not offering default implementation for _getRuns(), removeRun(R), getBuild(String), getBuildByNumber(int), getFirstBuild(), getLastBuild(), getNearestBuild(int), getNearestOldBuild(int), or createHistoryWidget() since they are defined in Job
-        // nor for createExecutable() since that typically calls isDisabled() first
+        // (could allow implementations to call LazyLoadingJob.super.theMethod())
     }
 
     /**
@@ -281,7 +281,9 @@ public interface LazyLoadingJob<JobT extends Job<JobT,RunT> & Queue.Task & LazyB
     public interface LazyLoadingRun<JobT extends Job<JobT,RunT> & Queue.Task & LazyBuildMixIn.LazyLoadingJob<JobT,RunT>, RunT extends Run<JobT,RunT> & LazyLoadingRun<JobT,RunT>> {
         RunMixIn<JobT,RunT> getRunMixIn();
         // not offering default implementations for createReference() or dropLinks() since they are protected
+        // (though could use @Restricted(ProtectedExternally.class))
         // nor for getPreviousBuild() or getNextBuild() since they are defined in Run
+        // (though could allow implementations to call LazyLoadingRun.super.theMethod())
     }
 
     /**

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -266,7 +266,7 @@ public void run(AbstractProject p) {
         }
 
         // Process all triggers, except SCMTriggers when synchronousPolling is set
-        for (ParameterizedJobMixIn.ParameterizedJob p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {
+        for (ParameterizedJobMixIn.ParameterizedJob<?, ?> p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {
             for (Trigger t : p.getTriggers().values()) {
                 if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {
                     if (t !=null && t.spec != null && t.tabs != null) {

File: core/src/main/java/jenkins/triggers/SCMTriggerItem.java
Patch:
@@ -57,7 +57,7 @@ public interface SCMTriggerItem {
     /** @see jenkins.model.ParameterizedJobMixIn.ParameterizedJob#getQuietPeriod */
     int getQuietPeriod();
 
-    /** @see ParameterizedJobMixIn#scheduleBuild2 */
+    /** @see jenkins.model.ParameterizedJobMixIn.ParameterizedJob#scheduleBuild2 */
     @CheckForNull QueueTaskFuture<?> scheduleBuild2(int quietPeriod, Action... actions);
 
     /**

File: core/src/main/java/hudson/security/ACL.java
Patch:
@@ -270,7 +270,7 @@ public static <V,T extends Exception> V impersonate(Authentication auth, Callabl
      * <p>
      * This makes impersonation much easier within code as it can now be used using the try with resources construct:
      * <pre>
-     *     try (ACLContext _ = ACL.as(auth)) {
+     *     try (ACLContext ctx = ACL.as(auth)) {
      *        ...
      *     }
      * </pre>
@@ -292,7 +292,7 @@ public static ACLContext as(@Nonnull Authentication auth) {
      * <p>
      * This makes impersonation much easier within code as it can now be used using the try with resources construct:
      * <pre>
-     *     try (ACLContext _ = ACL.as(auth)) {
+     *     try (ACLContext ctx = ACL.as(auth)) {
      *        ...
      *     }
      * </pre>

File: core/src/main/java/hudson/security/ACL.java
Patch:
@@ -270,7 +270,7 @@ public static <V,T extends Exception> V impersonate(Authentication auth, Callabl
      * <p>
      * This makes impersonation much easier within code as it can now be used using the try with resources construct:
      * <pre>
-     *     try (ACLContext _ = ACL.as(auth)) {
+     *     try (ACLContext ctx = ACL.as(auth)) {
      *        ...
      *     }
      * </pre>
@@ -292,7 +292,7 @@ public static ACLContext as(@Nonnull Authentication auth) {
      * <p>
      * This makes impersonation much easier within code as it can now be used using the try with resources construct:
      * <pre>
-     *     try (ACLContext _ = ACL.as(auth)) {
+     *     try (ACLContext ctx = ACL.as(auth)) {
      *        ...
      *     }
      * </pre>

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3664,6 +3664,7 @@ public synchronized void doConfigSubmit( StaplerRequest req, StaplerResponse rsp
      *
      * @return null if none is in use.
      */
+    @CheckForNull
     public CrumbIssuer getCrumbIssuer() {
         return crumbIssuer;
     }

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -247,7 +247,7 @@ public void perform(Run<?,?> build, FilePath ws, Launcher launcher, TaskListener
                 }
             } else {
                 result = build.getResult();
-                if (result != null && result.isBetterOrEqualTo(Result.UNSTABLE)) {
+                if (result == null || result.isBetterOrEqualTo(Result.UNSTABLE)) {
                     // If the build failed, don't complain that there was no matching artifact.
                     // The build probably didn't even get to the point where it produces artifacts. 
                     listenerWarnOrError(listener, Messages.ArtifactArchiver_NoMatchFound(artifacts));

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3673,6 +3673,7 @@ public synchronized void doConfigSubmit( StaplerRequest req, StaplerResponse rsp
      *
      * @return null if none is in use.
      */
+    @CheckForNull
     public CrumbIssuer getCrumbIssuer() {
         return crumbIssuer;
     }

File: core/src/main/java/hudson/util/StreamTaskListener.java
Patch:
@@ -142,7 +142,7 @@ private PrintWriter _error(String prefix, String msg) {
         out.print(prefix);
         out.println(msg);
 
-        // the idiom in Hudson is to use the returned writer for writing stack trace,
+        // the idiom in Jenkins is to use the returned writer for writing stack trace,
         // so put the marker here to indicate an exception. if the stack trace isn't actually written,
         // HudsonExceptionNote.annotate recovers gracefully.
         try {

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -952,6 +952,7 @@ public synchronized void resolveDependantPlugins() {
      * with a reasonable up-to-date check. A convenience method to be used by the {@link #loadBundledPlugins()}.
      */
     protected void copyBundledPlugin(URL src, String fileName) throws IOException {
+        LOGGER.log(FINE, "Copying {0}", src);
         fileName = fileName.replace(".hpi",".jpi"); // normalize fileNames to have the correct suffix
         String legacyName = fileName.replace(".jpi",".hpi");
         long lastModified = getModificationDate(src);

File: test/src/test/java/hudson/PluginManagerInstalledGUITest.java
Patch:
@@ -60,7 +60,8 @@ protected Collection<String> loadBundledPlugins() throws Exception {
                         try {
                             return super.loadBundledPlugins();
                         } finally {
-                            installResourcePlugin("tasks.jpi");
+                            copyBundledPlugin(PluginManagerInstalledGUITest.class.getResource("/WEB-INF/detached-plugins/cvs.hpi"), "cvs.jpi"); // cannot use installDetachedPlugin at this point
+                            copyBundledPlugin(PluginManagerInstalledGUITest.class.getResource("/plugins/tasks.jpi"), "tasks.jpi");
                         }
                     }
                 };

File: test/src/test/java/hudson/PluginManagerTest.java
Patch:
@@ -31,7 +31,6 @@
 import hudson.model.UpdateCenter.UpdateCenterJob;
 import hudson.model.UpdateSite;
 import hudson.model.User;
-import hudson.scm.SubversionSCM;
 import hudson.security.ACL;
 import hudson.security.ACLContext;
 import hudson.util.FormValidation;
@@ -167,7 +166,6 @@ public void startPlugin(PluginWrapper plugin) throws Exception {
                     // plugins should be already visible in the UberClassLoader
                     assertTrue(!activePlugins.isEmpty());
 
-                    uberClassLoader.loadClass(SubversionSCM.class.getName());
                     uberClassLoader.loadClass("hudson.plugins.tasks.Messages");
 
                     super.startPlugin(plugin);

File: test/src/test/java/hudson/PluginTest.java
Patch:
@@ -29,13 +29,15 @@
 import org.junit.Rule;
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
+import org.jvnet.hudson.test.TestPluginManager;
 
 public class PluginTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
     @Issue({"SECURITY-131", "SECURITY-155"})
     @Test public void doDynamic() throws Exception {
+        ((TestPluginManager) r.jenkins.pluginManager).installDetachedPlugin("credentials");
         r.createWebClient().goTo("plugin/credentials/images/24x24/credentials.png", "image/png");
         /* Collapsed somewhere before it winds up in restOfPath:
         r.createWebClient().assertFails("plugin/credentials/images/../images/24x24/credentials.png", HttpServletResponse.SC_BAD_REQUEST);

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -432,7 +432,7 @@ public synchronized void doSubmitDescription( StaplerRequest req, StaplerRespons
             byNameLock.readLock().unlock();
         }
         final File configFile = getConfigFileFor(id);
-        if (!configFile.isFile() && !configFile.getParentFile().isDirectory()) {
+        if (u == null && !configFile.isFile() && !configFile.getParentFile().isDirectory()) {
             // check for legacy users and migrate if safe to do so.
             File[] legacy = getLegacyConfigFilesFor(id);
             if (legacy != null && legacy.length > 0) {

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2422,7 +2422,7 @@ public final class KeepLogBuildBadge implements BuildBadgeAction {
 
     private static class DefaultFeedAdapter implements FeedAdapter<Run> {
         public String getEntryTitle(Run entry) {
-            return entry+" ("+entry.getBuildStatusSummary().message+")";
+            return entry.getDisplayName()+" ("+entry.getBuildStatusSummary().message+")";
         }
 
         public String getEntryUrl(Run entry) {

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -511,6 +511,7 @@ public void completedAsynchronous(@CheckForNull Throwable error) {
      *      null if the executor is idle.
      */
     @Exported
+    @CheckForNull
     public WorkUnit getCurrentWorkUnit() {
         lock.readLock().lock();
         try {

File: core/src/main/java/hudson/model/queue/WorkUnit.java
Patch:
@@ -79,6 +79,7 @@ public void setExecutor(@CheckForNull Executor e) {
     /**
      * If the execution has already started, return the executable that was created.
      */
+    @CheckForNull
     public Executable getExecutable() {
         return executable;
     }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -1800,7 +1800,7 @@ public Collection<String> getTopLevelItemNames() {
 
     /**
      * Gets a view by the specified name.
-     * The method iterates through {@link ViewGroup}s if required.
+     * The method iterates through {@link hudson.model.ViewGroup}s if required.
      * @param name Name of the view
      * @return View instance or {@code null} if it is missing
      */

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -1800,7 +1800,7 @@ public Collection<String> getTopLevelItemNames() {
 
     /**
      * Gets a view by the specified name.
-     * The method iterates through {@link ViewGroup}s if required.
+     * The method iterates through {@link hudson.model.ViewGroup}s if required.
      * @param name Name of the view
      * @return View instance or {@code null} if it is missing
      */

File: core/src/main/java/hudson/util/StreamTaskListener.java
Patch:
@@ -149,7 +149,7 @@ private PrintWriter _error(String prefix, String msg) {
         out.print(prefix);
         out.println(msg);
 
-        // the idiom in Hudson is to use the returned writer for writing stack trace,
+        // the idiom in Jenkins is to use the returned writer for writing stack trace,
         // so put the marker here to indicate an exception. if the stack trace isn't actually written,
         // HudsonExceptionNote.annotate recovers gracefully.
         try {

File: core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
Patch:
@@ -279,7 +279,7 @@ public void doCreateAccountByAdmin(StaplerRequest req, StaplerResponse rsp) thro
     public User createAccountByAdmin(StaplerRequest req, StaplerResponse rsp, String addUserView, String successView) throws IOException, ServletException {
         checkPermission(Jenkins.ADMINISTER);
         User u = createAccount(req, rsp, false, addUserView);
-        if(u != null) {
+        if (u != null && successView != null) {
             rsp.sendRedirect(successView);
         }
         return u;

File: core/src/main/java/hudson/model/AllView.java
Patch:
@@ -164,7 +164,7 @@ public static String migrateLegacyPrimaryAllViewLocalizedName(@Nonnull List<View
                         // bingo JENKINS-38606 detected
                         LOGGER.log(Level.INFO,
                                 "JENKINS-38606 detected for AllView in {0}; renaming view from {1} to {2}",
-                                new Object[]{allView.owner.getUrl(), DEFAULT_VIEW_NAME});
+                                new Object[]{allView.owner.getUrl(), primaryView, DEFAULT_VIEW_NAME});
                         allView.name = DEFAULT_VIEW_NAME;
                         return DEFAULT_VIEW_NAME;
                     }

File: test/src/test/java/hudson/cli/ClientAuthenticationCacheTest.java
Patch:
@@ -116,7 +116,7 @@ public void getPropertyKey() throws Exception {
     }
 
     private void assertCLI(int code, @CheckForNull String output, File jar, String... args) throws Exception {
-        List<String> commands = Lists.newArrayList("java", "-jar", jar.getAbsolutePath(), "-s", r.getURL().toString(), "-noKeyAuth");
+        List<String> commands = Lists.newArrayList("java", "-jar", jar.getAbsolutePath(), "-s", r.getURL().toString(), "-noKeyAuth", "-remoting");
         commands.addAll(Arrays.asList(args));
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         assertEquals(code, new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(commands).stdout(new TeeOutputStream(System.out, baos)).stderr(System.err).join());

File: cli/src/main/java/hudson/cli/CliEntryPoint.java
Patch:
@@ -34,7 +34,9 @@
  * Remotable interface for CLI entry point on the server side.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated Specific to Remoting-based protocol.
  */
+@Deprecated
 public interface CliEntryPoint {
     /**
      * Just like the static main method.

File: cli/src/main/java/hudson/cli/CliPort.java
Patch:
@@ -8,9 +8,9 @@
 import java.security.PublicKey;
 import java.security.spec.X509EncodedKeySpec;
 
-/**
- * @author Kohsuke Kawaguchi
- */
+    /**
+     * @deprecated Specific to Remoting mode.
+     */
 public final class CliPort {
     /**
      * The TCP endpoint to talk to.

File: cli/src/main/java/hudson/cli/Connection.java
Patch:
@@ -56,6 +56,9 @@
 import java.security.interfaces.RSAPublicKey;
 import java.security.spec.X509EncodedKeySpec;
 
+/**
+ * Used by Jenkins core only in deprecated Remoting-based CLI.
+ */
 public class Connection {
     public final InputStream in;
     public final OutputStream out;

File: cli/src/test/java/hudson/cli/PrivateKeyProviderTest.java
Patch:
@@ -57,7 +57,7 @@ public void specifyKeysExplicitly() throws Exception {
         final File dsaKey = keyFile(".ssh/id_dsa");
         final File rsaKey = keyFile(".ssh/id_rsa");
 
-        run("-i", dsaKey.getAbsolutePath(), "-i", rsaKey.getAbsolutePath(), "-s", "http://example.com");
+        run("-remoting", "-i", dsaKey.getAbsolutePath(), "-i", rsaKey.getAbsolutePath(), "-s", "http://example.com");
 
         verify(cli).authenticate(withKeyPairs(
                 keyPair(dsaKey),
@@ -73,7 +73,7 @@ public void useDefaultKeyLocations() throws Exception {
         final File dsaKey = keyFile(".ssh/id_dsa");
 
         fakeHome();
-        run("-s", "http://example.com");
+        run("-remoting", "-s", "http://example.com");
 
         verify(cli).authenticate(withKeyPairs(
                 keyPair(rsaKey),

File: core/src/main/java/hudson/cli/CliManagerImpl.java
Patch:
@@ -44,7 +44,9 @@
  * {@link CliEntryPoint} implementation exposed to the remote CLI.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated Specific to Remoting-based protocol.
  */
+@Deprecated
 public class CliManagerImpl implements CliEntryPoint, Serializable {
     private transient final Channel channel;
     

File: core/src/main/java/hudson/cli/CliProtocol.java
Patch:
@@ -26,7 +26,9 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.467
+ * @deprecated Implementing Remoting-based protocol.
  */
+@Deprecated
 @Extension @Symbol("cli")
 public class CliProtocol extends AgentProtocol {
     @Inject
@@ -42,7 +44,7 @@ public boolean isOptIn() {
 
     @Override
     public String getName() {
-        return jenkins.CLI.DISABLED ? null : "CLI-connect";
+        return jenkins.CLI.get().isEnabled() ? "CLI-connect" : null;
     }
 
     /**

File: core/src/main/java/hudson/cli/CliProtocol2.java
Patch:
@@ -20,12 +20,14 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.467
+ * @deprecated Implementing Remoting-based protocol.
  */
+@Deprecated
 @Extension @Symbol("cli2")
 public class CliProtocol2 extends CliProtocol {
     @Override
     public String getName() {
-        return jenkins.CLI.DISABLED ? null : "CLI2-connect";
+        return jenkins.CLI.get().isEnabled() ? "CLI2-connect" : null;
     }
 
     /**

File: core/src/main/java/hudson/cli/CliTransportAuthenticator.java
Patch:
@@ -20,7 +20,9 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.419
+ * @deprecated Specific to Remoting-based protocol.
  */
+@Deprecated
 public abstract class CliTransportAuthenticator implements ExtensionPoint {
     /**
      * Checks if this implementation supports the specified protocol.

File: core/src/main/java/hudson/cli/ClientAuthenticationCache.java
Patch:
@@ -31,7 +31,9 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.351
+ * @deprecated Assumes Remoting, and vulnerable to JENKINS-12543.
  */
+@Deprecated
 public class ClientAuthenticationCache implements Serializable {
 
     private static final HMACConfidentialKey MAC = new HMACConfidentialKey(ClientAuthenticationCache.class, "MAC");

File: core/src/main/java/hudson/cli/CommandDuringBuild.java
Patch:
@@ -36,7 +36,9 @@
  * Base class for those commands that are valid only during a build.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated Limited to Remoting-based protocol.
  */
+@Deprecated
 public abstract class CommandDuringBuild extends CLICommand {
     /**
      * This method makes sense only when called from within the build kicked by Jenkins.

File: core/src/main/java/hudson/cli/ConsoleCommand.java
Patch:
@@ -76,6 +76,7 @@ protected int run() throws Exception {
                 do {
                     logText = run.getLogText();
                     pos = logText.writeLogTo(pos, w);
+                    // TODO should sleep as in Run.writeWholeLogTo
                 } while (!logText.isComplete());
             } else {
                 try (InputStream logInputStream = run.getLogInputStream()) {

File: core/src/main/java/hudson/cli/HelpCommand.java
Patch:
@@ -53,7 +53,7 @@ public String getShortDescription() {
     protected int run() throws Exception {
         if (!Jenkins.getActiveInstance().hasPermission(Jenkins.READ)) {
             throw new AccessDeniedException("You must authenticate to access this Jenkins.\n"
-                    + "Use --username/--password/--password-file parameters or login command.");
+                    + hudson.cli.client.Messages.CLI_Usage());
         }
 
         if (command != null)

File: core/src/main/java/hudson/cli/InstallToolCommand.java
Patch:
@@ -48,7 +48,9 @@
  * Performs automatic tool installation on demand.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated Limited to Remoting-based protocol.
  */
+@Deprecated
 @Extension
 public class InstallToolCommand extends CLICommand {
     @Argument(index=0,metaVar="KIND",usage="The type of the tool to install, such as 'Ant'")

File: core/src/main/java/hudson/cli/SetBuildParameterCommand.java
Patch:
@@ -15,7 +15,9 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.514
+ * @deprecated Limited to Remoting-based protocol.
  */
+@Deprecated
 @Extension
 public class SetBuildParameterCommand extends CommandDuringBuild {
     @Argument(index=0, metaVar="NAME", required=true, usage="Name of the build variable")

File: core/src/main/java/hudson/cli/SetBuildResultCommand.java
Patch:
@@ -33,7 +33,9 @@
  * Sets the result of the current build. Works only if invoked from within a build.
  * 
  * @author Kohsuke Kawaguchi
+ * @deprecated Limited to Remoting-based protocol.
  */
+@Deprecated
 @Extension
 public class SetBuildResultCommand extends CommandDuringBuild {
     @Argument(metaVar="RESULT",required=true)

File: core/src/main/java/hudson/cli/util/ScriptLoader.java
Patch:
@@ -15,7 +15,9 @@
  * Reads a file (either a path or URL) over a channel.
  *
  * @author vjuranek
+ * @deprecated Specific to Remoting-based protocol.
  */
+@Deprecated
 public class ScriptLoader extends MasterToSlaveCallable<String,IOException> {
     
     private final String script;

File: core/src/main/java/hudson/model/ParameterDefinition.java
Patch:
@@ -194,8 +194,7 @@ public ParameterDescriptor getDescriptor() {
      * Create a parameter value from the string given in the CLI.
      *
      * @param command
-     *      This is the command that got the parameter. You can use its {@link CLICommand#checkChannel()}
-     *      for interacting with the CLI JVM.
+     *      This is the command that got the parameter.
      * @throws AbortException
      *      If the CLI processing should be aborted. Hudson will report the error message
      *      without stack trace, and then exits this command. Useful for graceful termination.

File: core/src/main/java/hudson/security/AbstractPasswordBasedSecurityRealm.java
Patch:
@@ -50,6 +50,7 @@ public SecurityComponents createSecurityComponents() {
                 new ImpersonatingUserDetailsService(this));
     }
 
+    @Deprecated
     @Override
     public CliAuthenticator createCliAuthenticator(final CLICommand command) {
         return new CliAuthenticator() {
@@ -68,12 +69,12 @@ public Authentication authenticate() throws AuthenticationException, IOException
 
                 if (passwordFile!=null)
                     try {
-                        password = new FilePath(command.channel,passwordFile).readToString().trim();
+                        password = new FilePath(command.checkChannel(), passwordFile).readToString().trim();
                     } catch (IOException e) {
                         throw new BadCredentialsException("Failed to read "+passwordFile,e);
                     }
                 if (password==null)
-                    password = command.channel.call(new InteractivelyAskForPassword());
+                    password = command.checkChannel().call(new InteractivelyAskForPassword());
 
                 if (password==null)
                     throw new BadCredentialsException("No password specified");

File: core/src/main/java/hudson/security/CliAuthenticator.java
Patch:
@@ -75,7 +75,9 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.350
+ * @deprecated Vulnerable to JENKINS-12543.
  */
+@Deprecated
 public abstract class CliAuthenticator {
     /**
      * Authenticates the CLI invocation. See class javadoc for the semantics.

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -189,7 +189,9 @@ public IdStrategy getGroupIdStrategy() {
      * @return
      *      never null. By default, this method returns a no-op authenticator that always authenticates
      *      the session as authenticated by the transport (which is often just {@link jenkins.model.Jenkins#ANONYMOUS}.)
+     * @deprecated See {@link CliAuthenticator}.
      */
+    @Deprecated
     public CliAuthenticator createCliAuthenticator(final CLICommand command) {
         return new CliAuthenticator() {
             public Authentication authenticate() {

File: test/src/test/java/hudson/cli/GetJobCommandTest.java
Patch:
@@ -47,6 +47,7 @@ public class GetJobCommandTest {
         FreeStyleProject p = d.createProject(FreeStyleProject.class, "p");
         ByteArrayOutputStream out = new ByteArrayOutputStream();
         PrintStream outS = new PrintStream(out);
+        // TODO switch to CLICommandInvoker
         int result = new GetJobCommand().main(Collections.singletonList("d/p"), Locale.ENGLISH, new NullInputStream(0), outS, outS);
         outS.flush();
         String output = out.toString();

File: test/src/test/java/jenkins/security/Security218BlackBoxTest.java
Patch:
@@ -85,7 +85,7 @@ public class Security218BlackBoxTest {
     @Rule
     public JenkinsRule r = new JenkinsRule();
 
-    @SuppressWarnings("deprecation") // really mean to use getPage(String)
+    @SuppressWarnings("deprecation") // really mean to use getPage(String), and Remoting-based CLI
     @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) // TODO userContent inaccessible without authentication otherwise
     @Test
     public void probe() throws Exception {
@@ -277,7 +277,7 @@ public void run() {
                         try {
                             CLI cli = new CLI(r.getURL()) {
                                 @Override
-                                protected CliPort getCliTcpPort(String url) throws IOException {
+                                protected CliPort getCliTcpPort(URL url) throws IOException {
                                     return new CliPort(new InetSocketAddress(proxySocket.getInetAddress(), proxySocket.getLocalPort()), /* ignore identity */ null, 1);
                                 }
                             };

File: test/src/test/java/jenkins/security/Security218CliTest.java
Patch:
@@ -41,6 +41,7 @@
 import org.jvnet.hudson.test.recipes.PresetData;
 import org.kohsuke.args4j.Argument;
 
+@SuppressWarnings("deprecation") // Remoting-based CLI usages intentional
 public class Security218CliTest {
 
     @Rule
@@ -204,8 +205,8 @@ public String getShortDescription() {
         
         @Argument(metaVar = "command", usage = "Command to be launched by the payload", required = true, index = 1)
         public String command;
-        
 
+        @Override
         protected int run() throws Exception {
             Payload payloadItem = Payload.valueOf(this.payload);
             PayloadCaller callable = new PayloadCaller(payloadItem, command);

File: test/src/test/java/jenkins/security/Security232Test.java
Patch:
@@ -27,10 +27,10 @@
 import java.rmi.server.ObjID;
 import java.rmi.server.RemoteObject;
 import java.rmi.server.UnicastRemoteObject;
+import java.util.Collections;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import javax.net.SocketFactory;
-import static jenkins.security.security218.Payload.CommonsCollections1;
 import jenkins.security.security218.ysoserial.payloads.CommonsCollections1;
 import jenkins.security.security218.ysoserial.payloads.ObjectPayload;
 import static org.junit.Assert.*;
@@ -57,6 +57,8 @@ public class Security232Test {
 
     @Test
     public void commonsCollections1() throws Exception {
+        r.jenkins.setAgentProtocols(Collections.singleton("CLI-connect")); // override CliProtocol.OPT_IN
+
         File pwned = new File(r.jenkins.getRootDir(), "pwned");
 
         int jrmpPort = 12345;

File: test/src/test/java/hudson/cli/ClientAuthenticationCacheTest.java
Patch:
@@ -116,7 +116,7 @@ public void getPropertyKey() throws Exception {
     }
 
     private void assertCLI(int code, @CheckForNull String output, File jar, String... args) throws Exception {
-        List<String> commands = Lists.newArrayList("java", "-jar", jar.getAbsolutePath(), "-s", r.getURL().toString(), "-noKeyAuth");
+        List<String> commands = Lists.newArrayList("java", "-jar", jar.getAbsolutePath(), "-s", r.getURL().toString(), "-noKeyAuth", "-remoting");
         commands.addAll(Arrays.asList(args));
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         assertEquals(code, new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(commands).stdout(new TeeOutputStream(System.out, baos)).stderr(System.err).join());

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -840,7 +840,7 @@ protected Jenkins(File root, ServletContext context, PluginManager pluginManager
                         }
                     }
                 } catch (NoSuchFieldException | IllegalAccessException x) {
-                    throw new Error(x);
+                    throw new Error("Unexpected ClassFilter implementation in bundled remoting.jar: " + x, x);
                 }
             }
 

File: test/src/test/java/jenkins/security/Security218CliTest.java
Patch:
@@ -32,7 +32,6 @@
 import java.io.PrintStream;
 import jenkins.security.security218.Payload;
 import org.jenkinsci.remoting.RoleChecker;
-import org.junit.Ignore;
 import org.junit.Test;
 import static org.junit.Assert.*;
 import org.junit.Rule;
@@ -170,7 +169,6 @@ public void ldap() throws Exception {
         probe(Payload.Ldap, PayloadCaller.EXIT_CODE_REJECTED);
     }
 
-    @Ignore("TODO fails unless ^java[.]security[.]SignedObject is blacklisted")
     @PresetData(PresetData.DataSet.ANONYMOUS_READONLY)
     @Test
     @Issue("SECURITY-429")

File: core/src/main/java/hudson/cli/ClientAuthenticationCache.java
Patch:
@@ -113,7 +113,7 @@ public Authentication get() {
     String getPropertyKey() {
         String url = Jenkins.getInstance().getRootUrl();
         if (url!=null)  return url;
-        return Secret.fromString("key").toString();
+        return Secret.fromString("key").getEncryptedValue();
     }
 
     /**

File: cli/src/main/java/hudson/cli/FullDuplexHttpStream.java
Patch:
@@ -61,7 +61,7 @@ public FullDuplexHttpStream(URL target, String authorization) throws IOException
 
     /**
      * @param base the base URL of Jenkins
-     * @param target
+     * @param relativeTarget
      *      The endpoint that we are making requests to.
      * @param authorization
      *      The value of the authorization header, if non-null.

File: core/src/main/java/hudson/AbstractMarkupText.java
Patch:
@@ -72,8 +72,8 @@ public final int length() {
      * Adds a start tag and end tag at the specified position.
      *
      * <p>
-     * For example, if the text was "abc", then <tt>addMarkup(1,2,"&lt;b>","&lt;/b>")</tt>
-     * would generate <tt>"a&lt;b>b&lt;/b>c"</tt>
+     * For example, if the text was "abc", then {@code addMarkup(1,2,"<b>","</b>")}
+     * would generate {@code"a<b>b</b>c"}
      */
     public abstract void addMarkup( int startPos, int endPos, String startTag, String endTag );
 

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -392,7 +392,7 @@ public VersionNumber getSplitWhen() {
          * Gets the minimum required version for the current version of Jenkins.
          *
          * @return the minimum required version for the current version of Jenkins.
-         * @sice 2.16
+         * @since 2.16
          */
         public VersionNumber getRequiredVersion() {
             return new VersionNumber(requiredVersion);

File: core/src/main/java/hudson/ExtensionListView.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson;
 
+import hudson.tasks.UserNameResolver;
 import jenkins.model.Jenkins;
 import hudson.util.CopyOnWriteList;
 

File: core/src/main/java/hudson/FileSystemProvisioner.java
Patch:
@@ -53,7 +53,7 @@
  * STILL A WORK IN PROGRESS. SUBJECT TO CHANGE! DO NOT EXTEND.
  *
  * TODO: is this per {@link Computer}? Per {@link Job}?
- *   -> probably per agent.
+ *   → probably per agent.
  *
  * <h2>Design Problems</h2>
  * <ol>

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1798,7 +1798,7 @@ public static Locale getCurrentLocale() {
     }
 
     /**
-     * Generate a series of &lt;script> tags to include <tt>script.js</tt>
+     * Generate a series of {@code <script>} tags to include {@code script.js}
      * from {@link ConsoleAnnotatorFactory}s and {@link ConsoleAnnotationDescriptor}s.
      */
     public static String generateConsoleAnnotationScriptAndStylesheet() {
@@ -1839,7 +1839,7 @@ public List<String> getLoggerNames() {
     }
 
     /**
-     * Used by &lt;f:password/> so that we send an encrypted value to the client.
+     * Used by {@code <f:password/>} so that we send an encrypted value to the client.
      */
     public String getPasswordValue(Object o) {
         if (o==null)    return null;
@@ -1997,7 +1997,7 @@ public static String humanReadableByteSize(long size){
     /**
      * Get a string that can be safely broken to several lines when necessary.
      *
-     * This implementation inserts &lt;wbr> tags into string. It allows browsers
+     * This implementation inserts {@code <wbr>} tags into string. It allows browsers
      * to wrap line before any sequence of punctuation characters or anywhere
      * in the middle of prolonged sequences of word characters.
      *

File: core/src/main/java/hudson/MarkupText.java
Patch:
@@ -131,7 +131,7 @@ public void surroundWithLiteral(String startTag, String endTag) {
         }
 
         /**
-         * Surrounds this subtext with &lt;a>...&lt;/a>. 
+         * Surrounds this subtext with {@code <a>…</a>}.
          */
         public void href(String url) {
             addHyperlink(0,length(),url);
@@ -292,8 +292,8 @@ public String toString() {
      * Returns the fully marked-up text.
      *
      * @param preEscape
-     *      If true, the escaping is for the &lt;PRE> context. This leave SP and CR/LF intact.
-     *      If false, the escape is for the normal HTML, thus SP becomes &amp;nbsp; and CR/LF becomes &lt;BR>
+     *      If true, the escaping is for the {@code <PRE>} context. This leave SP and CR/LF intact.
+     *      If false, the escape is for the normal HTML, thus SP becomes &amp;nbsp; and CR/LF becomes {@code <BR>}
      */
     public String toString(boolean preEscape) {
         if(tags.isEmpty())

File: core/src/main/java/hudson/Platform.java
Patch:
@@ -62,7 +62,7 @@ public static boolean isDarwin() {
     }
 
     /**
-     * Returns true if we run on Mac OS X >= 10.6
+     * Returns true if we run on Mac OS X ≥ 10.6
      */
     public static boolean isSnowLeopardOrLater() {
         try {

File: core/src/main/java/hudson/Plugin.java
Patch:
@@ -196,15 +196,15 @@ public void configure(JSONObject formData) throws IOException, ServletException,
      *
      * <p>
      * The following is a sample <tt>config.jelly</tt> that you can start yours with:
-     * <pre><xmp>
+     * <pre>{@code <xmp>
      * <j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form">
      *   <f:section title="Locale">
      *     <f:entry title="${%Default Language}" help="/plugin/locale/help/default-language.html">
      *       <f:textbox name="systemLocale" value="${it.systemLocale}" />
      *     </f:entry>
      *   </f:section>
      * </j:jelly>
-     * </xmp></pre>
+     * </xmp>}</pre>
      *
      * <p>
      * This allows you to access data as {@code formData.getString("systemLocale")}

File: core/src/main/java/hudson/Proc.java
Patch:
@@ -503,7 +503,7 @@ public OutputStream getStdin() {
     /**
     * An instance of {@link Proc}, which has an internal workaround for JENKINS-23271.
     * It presumes that the instance of the object is guaranteed to be used after the {@link Proc#join()} call.
-    * See <a href="https://jenkins-ci.org/issue/23271">JENKINS-23271></a>
+    * See <a href="https://jenkins-ci.org/issue/23271">JENKINS-23271</a>
     * @author Oleg Nenashev
     */
     @Restricted(NoExternalUse.class)

File: core/src/main/java/hudson/diagnosis/OldDataMonitor.java
Patch:
@@ -269,7 +269,7 @@ public String toString() {
         /**
          * Does this version range contain a version more than the given number of releases ago?
          * @param threshold Number of releases
-         * @return True if the major version# differs or the minor# differs by >= threshold
+         * @return True if the major version# differs or the minor# differs by ≥ threshold
          */
         public boolean isOld(int threshold) {
             return currentVersion != null && min != null && (currentVersion.digit(0) > min.digit(0)

File: core/src/main/java/hudson/diagnosis/ReverseProxySetupMonitor.java
Patch:
@@ -44,7 +44,7 @@
  *
  * <p>
  * Have the JavaScript make an AJAX call, to which we respond with 302 redirect. If the reverse proxy
- * is done correctly, this will be handled by {@link #doFoo()}, but otherwise we'll report that as an error.
+ * is done correctly, this will be handled by web methods, but otherwise we'll report that as an error.
  * Unfortunately, {@code XmlHttpRequest} doesn't expose properties that allow the client-side JavaScript
  * to learn the details of the failure, so we have to make do with limited information.
  *

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -1053,7 +1053,7 @@ public final VariableResolver<String> getBuildVariableResolver() {
     }
 
     /**
-     * @deprecated Use {@link #getAction(Class)} on {@link AbstractTestResultAction}.
+     * @deprecated Use {@link #getAction(Class)} on {@code AbstractTestResultAction}.
      */
     @Deprecated
     public Action getTestResultAction() {
@@ -1065,7 +1065,7 @@ public Action getTestResultAction() {
     }
 
     /**
-     * @deprecated Use {@link #getAction(Class)} on {@link AggregatedTestResultAction}.
+     * @deprecated Use {@link #getAction(Class)} on {@code AggregatedTestResultAction}.
      */
     @Deprecated
     public Action getAggregatedTestResultAction() {

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -136,7 +136,7 @@ public String getPronoun() {
     /**
      * Gets the term used in the UI to represent the kind of {@link Queue.Task} associated with this kind of
      * {@link Item}. Must start with a capital letter. Defaults to "Build".
-     * @since2.50 
+     * @since 2.50
      */
     public String getTaskNoun() {
         return AlternativeUiTextProvider.get(TASK_NOUN, this, Messages.AbstractItem_TaskNoun());

File: core/src/main/java/hudson/model/AdministrativeMonitor.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.Extension;
 import hudson.ExtensionPoint.LegacyInstancesAreScopedToHudson;
 import hudson.triggers.SCMTrigger;
+import hudson.triggers.TimerTrigger;
 
 import java.util.Set;
 import java.io.IOException;

File: core/src/main/java/hudson/model/Build.java
Patch:
@@ -116,7 +116,7 @@ public void run() {
 
     /**
      * @deprecated as of 1.467
-     *      Override the {@link #run()} method by calling {@link #execute(RunExecution)} with
+     *      Override the {@link #run()} method by calling {@link #execute(hudson.model.Run.RunExecution)} with
      *      proper execution object.
      */
     @Restricted(NoExternalUse.class)

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -284,7 +284,8 @@ public void addAction(@Nonnull Action a) {
     /**
      * This is where the log from the remote agent goes.
      * The method also creates a log directory if required.
-     * @see #getLogDir(), #relocateOldLogs()
+     * @see #getLogDir()
+     * @see #relocateOldLogs()
      */
     public @Nonnull File getLogFile() {
         return new File(getLogDir(),"slave.log");

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -990,7 +990,7 @@ Map<Descriptor<T>,T> toMap(Iterable<T> describables) {
     }
 
     /**
-     * Used to build {@link Describable} instance list from &lt;f:hetero-list> tag.
+     * Used to build {@link Describable} instance list from {@code <f:hetero-list>} tag.
      *
      * @param req
      *      Request that represents the form submission.

File: core/src/main/java/hudson/model/EnvironmentContributor.java
Patch:
@@ -41,10 +41,9 @@
  * of {@link Job}s to compute values.
  *
  * <h2>Views</h2>
- * <h4>buildEnv.groovy/.jelly</h4>
- * <p>
+ * <h3>buildEnv.groovy/.jelly</h3>
  * When Jenkins displays the help page listing all the environment variables available for a build, it does
- * so by combining all the {@code buildEnv} views from this extension point. This view should use the &lt;t:buildEnvVar> tag
+ * so by combining all the {@code buildEnv} views from this extension point. This view should use the {@code <t:buildEnvVar>} tag
  * to render a variable.
  *
  * <p>

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -958,7 +958,7 @@ public static Executor of(Executable executable) {
     /**
      * Returns the estimated duration for the executable.
      * Protects against {@link AbstractMethodError}s if the {@link Executable} implementation
-     * was compiled against Hudson < 1.383
+     * was compiled against Hudson prior to 1.383
      *
      * @deprecated as of 1.388
      *      Use {@link Executables#getEstimatedDurationFor(Queue.Executable)}

File: core/src/main/java/hudson/model/ExecutorListener.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import hudson.slaves.SlaveComputer;
 
 /**
  * A listener for task related events from executors.

File: core/src/main/java/hudson/model/HealthReport.java
Patch:
@@ -84,7 +84,7 @@ public class HealthReport implements Serializable, Comparable<HealthReport> {
     /**
      * The path to the icon corresponding to this health score or <code>null</code> to use the default icon
      * corresponding to the current health score.
-     * <p/>
+     * <p>
      * If the path begins with a '/' then it will be the absolute path, otherwise the image is assumed to be in one of
      * <code>/images/16x16/</code>, <code>/images/24x24/</code> or <code>/images/32x32/</code> depending on the icon
      * size selected by the user.
@@ -110,7 +110,7 @@ public class HealthReport implements Serializable, Comparable<HealthReport> {
      * @param score       The percentage health score (from 0 to 100 inclusive).
      * @param iconUrl     The path to the icon corresponding to this {@link Action}'s health or <code>null</code> to
      *                    display the default icon corresponding to the current health score.
-     *                    <p/>
+     *                    <p>
      *                    If the path begins with a '/' then it will be the absolute path, otherwise the image is
      *                    assumed to be in one of <code>/images/16x16/</code>, <code>/images/24x24/</code> or
      *                    <code>/images/32x32/</code> depending on the icon size selected by the user.
@@ -131,7 +131,7 @@ public HealthReport(int score, String iconUrl, String description) {
      * @param score       The percentage health score (from 0 to 100 inclusive).
      * @param iconUrl     The path to the icon corresponding to this {@link Action}'s health or <code>null</code> to
      *                    display the default icon corresponding to the current health score.
-     *                    <p/>
+     *                    <p>
      *                    If the path begins with a '/' then it will be the absolute path, otherwise the image is
      *                    assumed to be in one of <code>/images/16x16/</code>, <code>/images/24x24/</code> or
      *                    <code>/images/32x32/</code> depending on the icon size selected by the user.

File: core/src/main/java/hudson/model/ItemGroup.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import hudson.model.listeners.ItemListener;
 import java.io.IOException;
 import java.util.Collection;
 import java.io.File;

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -131,7 +131,7 @@ public boolean accept(File child) {
     }
 
     /**
-     * {@link Item} -> name function.
+     * {@link Item} → name function.
      */
     public static final Function1<String,Item> KEYED_BY_NAME = new Function1<String, Item>() {
         public String call(Item item) {

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -964,7 +964,7 @@ public RunT getLastCompletedBuild() {
     }
     
     /**
-     * Returns the last 'numberOfBuilds' builds with a build result >= 'threshold'
+     * Returns the last {@code numberOfBuilds} builds with a build result ≥ {@code threshold}
      * 
      * @return a list with the builds. May be smaller than 'numberOfBuilds' or even empty
      *   if not enough builds satisfying the threshold have been found. Never null.

File: core/src/main/java/hudson/model/JobPropertyDescriptor.java
Patch:
@@ -77,8 +77,8 @@ public JobProperty<?> newInstance(StaplerRequest req, JSONObject formData) throw
      * given job type.
      * 
      * <p>
-     * The default implementation of this method checks if the given job type is assignable to 'J' of
-     * {@link JobProperty}<tt>&lt;J></tt>, but subtypes can extend this to change this behavior.
+     * The default implementation of this method checks if the given job type is assignable to {@code J} of
+     * {@link JobProperty}{@code <J>}, but subtypes can extend this to change this behavior.
      *
      * @return
      *      true to indicate applicable, in which case the property will be

File: core/src/main/java/hudson/model/PeriodicWork.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.Random;
 
 import static hudson.init.InitMilestone.JOB_LOADED;
+import hudson.triggers.Trigger;
 
 /**
  * Extension point to perform a periodic task in Hudson (through {@link Timer}.)

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -141,7 +141,7 @@
  *
  * <p>
  * Items in queue goes through several stages, as depicted below:
- * <pre>
+ * <pre>{@code
  * (enter) --> waitingList --+--> blockedProjects
  *                           |        ^
  *                           |        |
@@ -150,7 +150,7 @@
  *                                    ^              |
  *                                    |              |
  *                                    +---(rarely)---+
- * </pre>
+ * }</pre>
  *
  * <p>
  * Note: In the normal case of events pending items only move to left. However they can move back
@@ -1014,7 +1014,7 @@ public boolean isPending(Task t) {
     
     /**
      * How many {@link BuildableItem}s are assigned for the given label?
-     * <p/>
+     * <p>
      * The implementation is quite similar to {@link #countBuildableItemsFor(hudson.model.Label)},
      * but it has another behavior for null parameters.
      * @param l Label to be checked. If null, only jobs without assigned labels

File: core/src/main/java/hudson/model/RunMap.java
Patch:
@@ -39,6 +39,7 @@
 import jenkins.model.lazy.AbstractLazyLoadRunMap;
 import static jenkins.model.lazy.AbstractLazyLoadRunMap.Direction.*;
 import jenkins.model.lazy.BuildReference;
+import jenkins.model.lazy.LazyBuildMixIn;
 import org.apache.commons.collections.comparators.ReverseComparator;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;

File: core/src/main/java/hudson/model/Saveable.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.model;
 
 import hudson.BulkChange;
+import hudson.model.listeners.SaveableListener;
 import java.io.IOException;
 
 /**

File: core/src/main/java/hudson/model/TopLevelItemDescriptor.java
Patch:
@@ -187,7 +187,7 @@ public String getCategoryId() {
      * For example: plugin/plugin-shortname/images/:size/item.png, where {@code :size} represents the different
      * icon sizes used commonly in Jenkins project: 16x16, 24x24, 32x32 or 48x48
      *
-     * @see {@link FreeStyleProject.DescriptorImpl#getIconFilePathPattern()}
+     * @see FreeStyleProject.DescriptorImpl#getIconFilePathPattern()
      *
      * @return A string or null if it is not defined.
      *

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -708,7 +708,7 @@ private static File getRootDir() {
 
     /**
      * Is the ID allowed? Some are prohibited for security reasons. See SECURITY-166.
-     * <p/>
+     * <p>
      * Note that this is only enforced when saving. These users are often created
      * via the constructor (and even listed on /asynchPeople), but our goal is to
      * prevent anyone from logging in as these users. Therefore, we prevent

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -414,14 +414,14 @@ public List<Widget> getWidgets() {
     }
 
     /**
-     * If this view uses &lt;t:projectView> for rendering, this method returns columns to be displayed.
+     * If this view uses {@code <t:projectView>} for rendering, this method returns columns to be displayed.
      */
     public Iterable<? extends ListViewColumn> getColumns() {
         return ListViewColumn.createDefaultInitialColumnList(this);
     }
 
     /**
-     * If this view uses &lt;t:projectView> for rendering, this method returns the indenter used
+     * If this view uses {@code t:projectView} for rendering, this method returns the indenter used
      * to indent each row.
      */
     public Indenter getIndenter() {

File: core/src/main/java/hudson/model/ViewDescriptor.java
Patch:
@@ -172,7 +172,7 @@ public boolean isApplicable(Class<? extends ViewGroup> ownerType) {
     /**
      * Returns true if this {@link View} type is applicable in the specific {@link ViewGroup}.
      * <p>
-     * Default implementation returns {@link #isApplicable(Class)} for the {@link ViewGroup#getClass()}.
+     * Default implementation returns {@link #isApplicable(Class)} for the {@link ViewGroup}’s {@link Object#getClass}.
      *
      * @return true to indicate applicable, in which case the view will be instantiable within the given owner.
      * @since 2.37

File: core/src/main/java/hudson/model/listeners/RunListener.java
Patch:
@@ -96,7 +96,7 @@ protected RunListener() {
     public void onCompleted(R r, @Nonnull TaskListener listener) {}
 
     /**
-     * Called after a build is moved to the {@link hudson.model.Run.State#COMPLETED} state.
+     * Called after a build is moved to the {@code Run.State.COMPLETED} state.
      *
      * <p>
      * At this point, all the records related to a build is written down to the disk. As such,

File: core/src/main/java/hudson/model/listeners/SCMListener.java
Patch:
@@ -60,7 +60,7 @@
 public abstract class SCMListener implements ExtensionPoint {
 
     /**
-     * Should be called immediately after {@link SCM#checkout(Run, Launcher, FilePath, TaskListener, File)} is called.
+     * Should be called immediately after {@link SCM#checkout(Run, Launcher, FilePath, TaskListener, File, SCMRevisionState)} is called.
      * @param pollingBaseline information about what actually was checked out, if that is available, and this checkout is intended to be included in the build’s polling (if it does any at all)
      * @throws Exception if the checkout should be considered failed
      * @since 1.568

File: core/src/main/java/hudson/model/queue/Executables.java
Patch:
@@ -66,7 +66,7 @@ public class Executables {
      * This can happen if Computer.getIdleStartMilliseconds() is called before the executable is set to non-null in Computer.run()
      * or if the executor thread exits prematurely, see JENKINS-30456
      * Protects against {@link AbstractMethodError}s if the {@link Executable} implementation
-     * was compiled against Hudson < 1.383
+     * was compiled against Hudson prior to 1.383
      * @param e Executable item
      * @return the estimated duration for a given executable, -1 if the executable is null
      */

File: core/src/main/java/hudson/model/queue/QueueListener.java
Patch:
@@ -2,6 +2,7 @@
 
 import hudson.ExtensionList;
 import hudson.ExtensionPoint;
+import hudson.model.Computer;
 import hudson.model.Queue;
 import hudson.model.Queue.BlockedItem;
 import hudson.model.Queue.BuildableItem;

File: core/src/main/java/hudson/org/apache/tools/tar/TarOutputStream.java
Patch:
@@ -102,7 +102,7 @@ public TarOutputStream(OutputStream os, int blockSize, int recordSize) {
     /**
      * Set the long file mode.
      * This can be LONGFILE_ERROR(0), LONGFILE_TRUNCATE(1) or LONGFILE_GNU(2).
-     * This specifies the treatment of long file names (names >= TarConstants.NAMELEN).
+     * This specifies the treatment of long file names (names ≥ TarConstants.NAMELEN).
      * Default is LONGFILE_ERROR.
      * @param longFileMode the mode to use
      */

File: core/src/main/java/hudson/scheduler/CronTab.java
Patch:
@@ -309,7 +309,7 @@ void setTo(Calendar c, int i) {
      * More precisely, given the time 't', computes another smallest time x such that:
      *
      * <ul>
-     * <li>x >= t (inclusive)
+     * <li>x ≥ t (inclusive)
      * <li>x matches this crontab
      * </ul>
      *

File: core/src/main/java/hudson/security/BasicAuthenticationFilter.java
Patch:
@@ -69,16 +69,16 @@
  * redirected back to the original URL, where the request is served.
  *
  * <p>
- * So all in all, the redirection works like <tt>/abc/def</tt> -> <tt>/secured/abc/def</tt>
- * -> <tt>/abc/def</tt>.
+ * So all in all, the redirection works like {@code /abc/def} → {@code /secured/abc/def}
+ * → {@code /abc/def}.
  *
  * <h2>Notes</h2>
  * <ul>
  * <li>
  * The technique of getting a request dispatcher for <tt>/j_security_check</tt> may not
  * work for all containers, but so far that seems like the only way to make this work.
  * <li>
- * This A->B->A redirect is a cyclic redirection, so we need to watch out for clients
+ * This A → B → A redirect is a cyclic redirection, so we need to watch out for clients
  * that detect this as an error.
  * </ul> 
  *

File: core/src/main/java/hudson/security/PermissionAdder.java
Patch:
@@ -26,6 +26,7 @@
 
 import hudson.ExtensionPoint;
 import hudson.model.User;
+import jenkins.model.Jenkins;
 
 /**
  * Service which can add permissions for a given user to the configured authorization strategy.

File: core/src/main/java/hudson/security/SidACL.java
Patch:
@@ -111,7 +111,7 @@ protected Boolean _hasPermission(@Nonnull Authentication a, Permission permissio
      * @return
      *      true if the access should be granted, false if it should be denied.
      *      The null value indicates that the ACL does no rule for this Sid/Permission
-     *      combination. The caller can decide what to do &mash; such as consulting the higher level ACL,
+     *      combination. The caller can decide what to do—such as consulting the higher level ACL,
      *      or denying the access (if the model is no-access-by-default.)  
      */
     protected abstract Boolean hasPermission(Sid p, Permission permission);

File: core/src/main/java/hudson/slaves/CloudProvisioningListener.java
Patch:
@@ -8,6 +8,7 @@
 import jenkins.model.Jenkins;
 
 import java.util.Collection;
+import java.util.concurrent.Future;
 
 import javax.annotation.Nonnull;
 
@@ -77,7 +78,7 @@ public void onCommit(@Nonnull NodeProvisioner.PlannedNode plannedNode, @Nonnull
     }
 
     /**
-     * Called when {@link NodeProvisioner.PlannedNode#future#get()} throws an exception.
+     * Called when {@link NodeProvisioner.PlannedNode#future} {@link Future#get()} throws an exception.
      *
      * @param plannedNode the planned node which failed to provision
      * @param t the exception

File: core/src/main/java/hudson/tasks/BuildStep.java
Patch:
@@ -50,6 +50,7 @@
 import org.acegisecurity.Authentication;
 
 import javax.annotation.Nonnull;
+import jenkins.model.Jenkins;
 
 /**
  * One step of the whole build process.
@@ -146,7 +147,7 @@ public interface BuildStep {
      * <p>
      * This action can have optional <tt>jobMain.jelly</tt> view, which will be
      * aggregated into the main panel of the job top page. The jelly file
-     * should have an &lt;h2> tag that shows the section title, followed by some
+     * should have an {@code <h2>} tag that shows the section title, followed by some
      * block elements to render the details of the section.
      *
      * @param project

File: core/src/main/java/hudson/tasks/Maven.java
Patch:
@@ -505,7 +505,7 @@ public static final class MavenInstallation extends ToolInstallation implements
 
         /**
          * @deprecated as of 1.308.
-         *      Use {@link #Maven.MavenInstallation(String, String, List)}
+         *      Use {@link #MavenInstallation(String, String, List)}
          */
         @Deprecated
         public MavenInstallation(String name, String home) {

File: core/src/main/java/hudson/tools/JDKInstaller.java
Patch:
@@ -694,7 +694,7 @@ public static final class JDKFamily {
 
     public static final class JDKRelease {
         /**
-         * the list of {@Link JDKFile}s
+         * the list of {@link JDKFile}s
          */
         public JDKFile[] files;
         /**
@@ -813,7 +813,7 @@ public JDKFamilyList toList() throws IOException {
         }
 
         /**
-         * @{inheritDoc}
+         * {@inheritDoc}
          */
         @Override
         public JSONObject reduce (List<JSONObject> jsonObjectList) {

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -93,7 +93,7 @@
  * You can add UI elements under the SCM section by creating a
  * config.jelly or config.groovy in the resources area for
  * your class that inherits from SCMTrigger and has the 
- * @{@link hudson.model.Extension} annotation. The UI should 
+ * {@link Extension} annotation. The UI should 
  * be wrapped in an f:section element to denote it.
  *
  * @author Kohsuke Kawaguchi

File: core/src/main/java/hudson/triggers/SafeTimerTask.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.TimerTask;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import jenkins.util.Timer;
 import org.acegisecurity.context.SecurityContext;
 import org.acegisecurity.context.SecurityContextHolder;
 

File: core/src/main/java/hudson/util/ChunkedOutputStream.java
Patch:
@@ -37,7 +37,7 @@
  * Implements HTTP chunking support. Writes are buffered to an internal buffer (2048 default size).
  * Chunks are guaranteed to be at least as large as the buffer size (except for the last chunk).
  *
- * @author Mohammad Rezaei, Goldman, Sachs & Co.
+ * @author Mohammad Rezaei, Goldman, Sachs &amp; Co.
  */
 public class ChunkedOutputStream extends OutputStream {
 

File: core/src/main/java/hudson/util/CyclicGraphDetector.java
Patch:
@@ -28,7 +28,7 @@ public void run(Iterable<? extends N> allNodes) throws CycleDetectedException {
 
     /**
      * Returns all the nodes in the topologically sorted order.
-     * That is, if there's an edge a->b, b always come earlier than a.
+     * That is, if there's an edge a → b, b always come earlier than a.
      */
     public List<N> getSorted() {
         return topologicalOrder;

File: core/src/main/java/hudson/util/DescribableList.java
Patch:
@@ -200,7 +200,7 @@ public void rebuild(StaplerRequest req, JSONObject json, List<? extends Descript
      * Rebuilds the list by creating a fresh instances from the submitted form.
      *
      * <p>
-     * This version works with the &lt;f:hetero-list> UI tag, where the user
+     * This version works with the {@code <f:hetero-list>} UI tag, where the user
      * is allowed to create multiple instances of the same descriptor. Order is also
      * significant.
      */

File: core/src/main/java/hudson/util/FormApply.java
Patch:
@@ -31,7 +31,7 @@
 import java.io.IOException;
 
 /**
- * Server-side code related to the &lt;f:apply> button.
+ * Server-side code related to the {@code <f:apply>} button.
  *
  * @author Kohsuke Kawaguchi
  * @since 1.453

File: core/src/main/java/hudson/util/FormFieldValidator.java
Patch:
@@ -635,7 +635,7 @@ protected void fail() throws IOException, ServletException {
     }
 
     /**
-     * Verifies that the 'value' parameter is an integer >= 0.
+     * Verifies that the {@code value} parameter is an integer ≥ 0.
      *
      * @since 1.282
      * @deprecated as of 1.294

File: core/src/main/java/hudson/util/HttpResponses.java
Patch:
@@ -92,7 +92,7 @@ public static HttpResponse okJSON(@Nonnull Map<?,?> data) {
         /**
          * Set the response as an error response.
          * @param message The error "message" set on the response.
-         * @return {@link this} object.
+         * @return {@code this} object.
          *
          * @since 2.0
          */

File: core/src/main/java/hudson/util/Memoizer.java
Patch:
@@ -29,7 +29,7 @@
  * Implements memoization semantics.
  *
  * <p>
- * Conceptually a function from K -> V that computes values lazily and remembers the results.
+ * Conceptually a function from K → V that computes values lazily and remembers the results.
  * Often used to implement a data store per key.
  *
  * @author Kohsuke Kawaguchi

File: core/src/main/java/hudson/util/NamingThreadFactory.java
Patch:
@@ -24,6 +24,7 @@
 
 package hudson.util;
 
+import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.atomic.AtomicInteger;
 

File: core/src/main/java/hudson/util/QueryParameterMap.java
Patch:
@@ -52,7 +52,7 @@ public class QueryParameterMap {
 
     /**
      * @param queryString
-     *      String that looks like "abc=def&ghi=jkl"
+     *      String that looks like {@code abc=def&ghi=jkl}
      */
     public QueryParameterMap(String queryString) {
         if (queryString==null || queryString.length()==0)   return;

File: core/src/main/java/hudson/util/jna/GNUCLibrary.java
Patch:
@@ -31,6 +31,7 @@
 import com.sun.jna.NativeLong;
 import com.sun.jna.LastErrorException;
 import com.sun.jna.ptr.IntByReference;
+import hudson.os.PosixAPI;
 import jnr.posix.POSIX;
 import org.jvnet.libpam.impl.CLibrary.passwd;
 

File: core/src/main/java/hudson/util/spring/ClosureScript.java
Patch:
@@ -39,7 +39,7 @@
  * <pre>
  * a = 1;
  * b(2);
- * <pre>
+ * </pre>
  *
  * <p>
  * Using {@link ClosureScript} as the base class would run it as:

File: core/src/main/java/hudson/views/ListViewColumn.java
Patch:
@@ -51,7 +51,7 @@
  * This object must have the <tt>column.jelly</tt>. This view
  * is called for each cell of this column. The {@link Item} object
  * is passed in the "job" variable. The view should render
- * the &lt;td> tag.
+ * the {@code <td>} tag.
  *
  * <p>
  * This object may have an additional <tt>columnHeader.jelly</tt>. The default ColumnHeader

File: core/src/main/java/hudson/widgets/HistoryWidget.java
Patch:
@@ -115,7 +115,7 @@ public String getFirstTransientBuildKey() {
     }
 
     /**
-     * Calculates the first transient build record. Everything >= this will be discarded when AJAX call is made.
+     * Calculates the first transient build record. Everything ≥ this will be discarded when AJAX call is made.
      *
      * @param historyPageFilter
      *      The history page filter containing the list of builds.

File: core/src/main/java/hudson/widgets/Widget.java
Patch:
@@ -32,13 +32,13 @@
  * <h2>Views</h2>
  * <ul>
  * <li><b>index.jelly</b> should display the widget. It should have:
- *   &lt;l:pane width="2" title="..."> ...body... &lt;/l:pane> structure.
+ *   {@code <l:pane width="2" title="…"> …body… </l:pane>} structure.
  *   In this view, "it" points to the {@link Widget} and "view" points to {@link View}
  *   that's rendering the widget.
  * </ul>
  *
  * TODO:
- *  - make Widget describable & provide the UI to let admin configure widgets?
+ *  - make Widget describable and provide the UI to let admin configure widgets?
  *    - backward compatibility implications?
  *
  *

File: core/src/main/java/jenkins/FilePathFilter.java
Patch:
@@ -13,7 +13,7 @@
  *
  * <p>
  * Returning {@code true} indicates that the access is accepted. No other {@link FilePathFilter}
- * will be consulted to reject the execution, and the access will go through. Returning {@link false}
+ * will be consulted to reject the execution, and the access will go through. Returning {@code false}
  * indicates "I don't know". Other {@link FilePathFilter}s get to inspect the access, and they might
  * accept/reject access. And finally, throwing {@link SecurityException} is to reject the access.
  *

File: core/src/main/java/jenkins/model/ArtifactManager.java
Patch:
@@ -26,6 +26,7 @@
 
 import hudson.FilePath;
 import hudson.Launcher;
+import hudson.model.AbstractBuild;
 import hudson.model.BuildListener;
 import hudson.model.Run;
 import hudson.model.TaskListener;
@@ -53,7 +54,7 @@ public abstract class ArtifactManager {
      * <p>If called multiple times for the same build, do not delete the old artifacts but keep them all, unless overwritten.
      * For example, the XVNC plugin could use this to save {@code screenshot.jpg} if so configured.
      * <p>This method is typically invoked on a running build, though e.g. in the case of Maven module builds,
-     * the build may actually be {@link hudson.model.Run.State#COMPLETED} when this is called
+     * the build may actually be {@code Run.State.COMPLETED} when this is called
      * (since it is the parent build which is still running and performing archiving).
      * @param workspace the root directory from which to copy files (typically {@link AbstractBuild#getWorkspace} but not necessarily)
      * @param launcher a launcher to use if external processes need to be forked

File: core/src/main/java/jenkins/model/BuildDiscarder.java
Patch:
@@ -9,6 +9,7 @@
 import com.thoughtworks.xstream.mapper.Mapper;
 import hudson.ExtensionPoint;
 import hudson.model.AbstractDescribableImpl;
+import hudson.model.AbstractProject;
 import hudson.model.Job;
 import hudson.model.Run;
 import hudson.tasks.LogRotator;

File: core/src/main/java/jenkins/model/DependencyDeclarer.java
Patch:
@@ -29,6 +29,7 @@
 import hudson.tasks.Builder;
 import hudson.tasks.Publisher;
 import hudson.triggers.Trigger;
+import hudson.util.DescribableList;
 
 /**
  * Marker interface for project-associated objects that can participate

File: core/src/main/java/jenkins/model/DirectlyModifiableTopLevelItemGroup.java
Patch:
@@ -24,7 +24,9 @@
 
 package jenkins.model;
 
+import hudson.model.Item;
 import hudson.model.TopLevelItem;
+import hudson.model.listeners.ItemListener;
 import java.io.IOException;
 
 /**

File: core/src/main/java/jenkins/model/FingerprintFacet.java
Patch:
@@ -49,8 +49,7 @@
  * an instance of new facet and add it.
  *
  * <h2>Views</h2>
- * <h4>main.groovy</h4>
- * <p>
+ * <h3>main.groovy</h3>
  * This view is rendered into the
  *
  * @author Kohsuke Kawaguchi

File: core/src/main/java/jenkins/model/IdStrategy.java
Patch:
@@ -321,7 +321,7 @@ public String getDisplayName() {
      * A case sensitive email address {@link IdStrategy}. Providing this implementation among the set of default
      * implementations as given the history of misunderstanding in the Jenkins code base around ID case sensitivity,
      * if not provided people will get this wrong.
-     * <p/>
+     * <p>
      * Note: Not all email addresses are case sensitive. It is knowledge that belongs to the server that holds the
      * mailbox. Most sane system administrators do not configure their accounts using case sensitive mailboxes
      * but the RFC does allow them the option to configure that way. Domain names are always case insensitive per RFC.

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2867,7 +2867,8 @@ private File getRootDirFor(String name) {
      * Gets the user of the given name.
      *
      * @return the user of the given name (which may or may not be an id), if that person exists; else null
-     * @see User#get(String,boolean), {@link User#getById(String, boolean)}
+     * @see User#get(String,boolean)
+     * @see User#getById(String, boolean)
      */
     public @CheckForNull User getUser(String name) {
         return User.get(name, User.ALLOW_USER_CREATION_VIA_URL && hasPermission(ADMINISTER));

File: core/src/main/java/jenkins/model/ModelObjectWithContextMenu.java
Patch:
@@ -58,7 +58,7 @@ public interface ModelObjectWithContextMenu extends ModelObject {
     /**
      * Data object that represents the context menu.
      *
-     * Via {@link HttpResponse}, this class is capable of converting itself to JSON that &lt;l:breadcrumb/> understands.
+     * Via {@link HttpResponse}, this class is capable of converting itself to JSON that {@code <l:breadcrumb/>} understands.
      */
     @ExportedBean
     public class ContextMenu implements HttpResponse {
@@ -180,7 +180,7 @@ public ContextMenu add(Job job) {
          * 
          * <p>
          * This method uses {@code sidepanel.groovy} to run the side panel generation, captures
-         * the use of &lt;l:task> tags, and then converts those into {@link MenuItem}s. This is
+         * the use of {@code <l:task>} tags, and then converts those into {@link MenuItem}s. This is
          * supposed to make this work with most existing {@link ModelObject}s that follow the standard
          * convention.
          * 

File: core/src/main/java/jenkins/model/PeepholePermalink.java
Patch:
@@ -32,7 +32,7 @@
  * <blockquote>
  *     Given a job J, permalink is a function F that computes a build B.
  *     A peephole permalink is a subset of this function that can be
- *     deduced to the "peep-hole" function G(B)->bool:
+ *     deduced to the "peep-hole" function G(B)→bool:
  *
  *     <pre>
  *         F(J) = { newest B | G(B)==true }

File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java
Patch:
@@ -315,8 +315,8 @@ public boolean runExists(int number) {
      * @param d
      *      defines what we mean by "nearby" above.
      *      If EXACT, find #N or return null.
-     *      If ASC, finds the closest #M that satisfies M>=N.
-     *      If DESC, finds the closest #M that satisfies M&lt;=N.
+     *      If ASC, finds the closest #M that satisfies M ≥ N.
+     *      If DESC, finds the closest #M that satisfies M ≤ N.
      */
     public @CheckForNull R search(final int n, final Direction d) {
         switch (d) {

File: core/src/main/java/jenkins/security/BasicHeaderProcessor.java
Patch:
@@ -38,7 +38,6 @@
  * to authenticate the same header differently and fail.
  *
  * @author Kohsuke Kawaguchi
- * @see ZD-19640
  */
 public class BasicHeaderProcessor implements Filter {
     // these fields are supposed to be injected by Spring

File: core/src/main/java/jenkins/security/ConfidentialKey.java
Patch:
@@ -6,6 +6,7 @@
 
 import javax.annotation.CheckForNull;
 import java.io.IOException;
+import jenkins.slaves.JnlpSlaveAgentProtocol;
 
 /**
  * Confidential information that gets stored as a singleton in Jenkins, mostly some random token value.

File: core/src/main/java/jenkins/security/ConfidentialStore.java
Patch:
@@ -2,6 +2,7 @@
 
 import hudson.Extension;
 import hudson.Lookup;
+import hudson.init.InitMilestone;
 import hudson.util.Secret;
 import hudson.util.Service;
 import jenkins.model.Jenkins;
@@ -10,6 +11,7 @@
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
 import java.io.IOException;
+import java.security.SecureRandom;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: core/src/main/java/jenkins/security/UpdateSiteWarningsMonitor.java
Patch:
@@ -58,7 +58,7 @@
  *   <li>Inapplicable warnings are those that are not applicable.
  * </ul>
  *
- * <p></p>The following sets may be non-empty:</p>
+ * <p>The following sets may be non-empty:</p>
  *
  * <ul>
  *   <li>Intersection of applicable and active

File: core/src/main/java/jenkins/security/s2m/package-info.java
Patch:
@@ -1,4 +1,4 @@
 /**
- * Agent -> master security.
+ * Agent → master security.
  */
 package jenkins.security.s2m;

File: core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java
Patch:
@@ -33,6 +33,7 @@
 import hudson.model.AbstractProject;
 import hudson.model.Action;
 import hudson.model.BuildListener;
+import hudson.model.Computer;
 import hudson.model.Run;
 import hudson.model.TaskListener;
 import hudson.tasks.BuildWrapper;

File: core/src/main/java/jenkins/util/SystemProperties.java
Patch:
@@ -39,7 +39,7 @@
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
 /**
- * Centralizes calls to {@link System#getProperty()} and related calls.
+ * Centralizes calls to {@link System#getProperty(String)} and related calls.
  * This allows us to get values not just from environment variables but also from
  * the {@link ServletContext}, so properties like {@code hudson.DNSMultiCast.disabled}
  * can be set in {@code context.xml} and the app server's boot script does not

File: core/src/main/java/jenkins/util/VirtualFile.java
Patch:
@@ -199,7 +199,6 @@ public abstract class VirtualFile implements Comparable<VirtualFile>, Serializab
      * For a remote file, this can be much faster than doing the corresponding operations one by one as separate requests.
      * The default implementation just calls the block directly.
      * @param <V> a value type
-     * @param <T> the exception type
      * @param callable something to run all at once (only helpful if any mentioned files are on the same system)
      * @return the callable result
      * @throws IOException if remote communication failed

File: core/src/main/java/jenkins/util/groovy/GroovyHookScript.java
Patch:
@@ -27,7 +27,7 @@
  * <li>/WEB-INF/<i>HOOK</i>.groovy in the war file
  * <li>/WEB-INF/<i>HOOK</i>.groovy.d/*.groovy in the war file
  * <li>$JENKINS_HOME/<i>HOOK</i>.groovy
- * <il>$JENKINS_HOME/<i>HOOK</i>.groovy.d/*.groovy
+ * <li>$JENKINS_HOME/<i>HOOK</i>.groovy.d/*.groovy
  * </ol>
  *
  * <p>

File: core/src/main/java/hudson/scheduler/CronTabList.java
Patch:
@@ -131,7 +131,7 @@ public static CronTabList create(@Nonnull String format, Hash hash) throws ANTLR
     public @CheckForNull Calendar previous() {
         Calendar nearest = null;
         for (CronTab tab : tabs) {
-            Calendar scheduled = tab.floor(Calendar.getInstance());
+            Calendar scheduled = tab.floor(tab.getTimeZone() == null ? Calendar.getInstance() : Calendar.getInstance(tab.getTimeZone()));
             if (nearest == null || nearest.before(scheduled)) {
                 nearest = scheduled;
             }
@@ -143,7 +143,7 @@ public static CronTabList create(@Nonnull String format, Hash hash) throws ANTLR
     public @CheckForNull Calendar next() {
         Calendar nearest = null;
         for (CronTab tab : tabs) {
-            Calendar scheduled = tab.ceil(Calendar.getInstance());
+            Calendar scheduled = tab.ceil(tab.getTimeZone() == null ? Calendar.getInstance() : Calendar.getInstance(tab.getTimeZone()));
             if (nearest == null || nearest.after(scheduled)) {
                 nearest = scheduled;
             }

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -72,10 +72,12 @@
 import net.sf.json.JSONObject;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.jelly.XMLOutput;
+import org.apache.commons.lang.StringUtils;
 import org.jenkinsci.Symbol;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.DoNotUse;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
+import org.kohsuke.stapler.AncestorInPath;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.DataBoundSetter;
 import org.kohsuke.stapler.QueryParameter;

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1046,6 +1046,8 @@ public List<Action> getActions() {
         return Collections.unmodifiableList(actions);
     }
 
+    // TODO implement addAction, addOrReplaceAction, removeAction, removeActions, replaceActions
+
     /**
      * Gets the {@link Node} where this project was last built on.
      *

File: core/src/main/java/hudson/model/labels/LabelAtom.java
Patch:
@@ -106,6 +106,8 @@ public List<Action> getActions() {
         return Collections.unmodifiableList(actions);
     }
 
+    // TODO implement addAction, addOrReplaceAction, removeAction, removeActions, replaceActions
+
     protected void updateTransientActions() {
         Vector<Action> ta = new Vector<Action>();
 

File: cli/src/main/java/hudson/cli/FullDuplexHttpStream.java
Patch:
@@ -61,7 +61,7 @@ public FullDuplexHttpStream(URL target, String authorization) throws IOException
 
     /**
      * @param base the base URL of Jenkins
-     * @param target
+     * @param relativeTarget
      *      The endpoint that we are making requests to.
      * @param authorization
      *      The value of the authorization header, if non-null.

File: core/src/main/java/hudson/AbstractMarkupText.java
Patch:
@@ -72,8 +72,8 @@ public final int length() {
      * Adds a start tag and end tag at the specified position.
      *
      * <p>
-     * For example, if the text was "abc", then <tt>addMarkup(1,2,"&lt;b>","&lt;/b>")</tt>
-     * would generate <tt>"a&lt;b>b&lt;/b>c"</tt>
+     * For example, if the text was "abc", then {@code addMarkup(1,2,"<b>","</b>")}
+     * would generate {@code"a<b>b</b>c"}
      */
     public abstract void addMarkup( int startPos, int endPos, String startTag, String endTag );
 

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -392,7 +392,7 @@ public VersionNumber getSplitWhen() {
          * Gets the minimum required version for the current version of Jenkins.
          *
          * @return the minimum required version for the current version of Jenkins.
-         * @sice 2.16
+         * @since 2.16
          */
         public VersionNumber getRequiredVersion() {
             return new VersionNumber(requiredVersion);

File: core/src/main/java/hudson/ExtensionListView.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson;
 
+import hudson.tasks.UserNameResolver;
 import jenkins.model.Jenkins;
 import hudson.util.CopyOnWriteList;
 

File: core/src/main/java/hudson/FileSystemProvisioner.java
Patch:
@@ -53,7 +53,7 @@
  * STILL A WORK IN PROGRESS. SUBJECT TO CHANGE! DO NOT EXTEND.
  *
  * TODO: is this per {@link Computer}? Per {@link Job}?
- *   -> probably per agent.
+ *   → probably per agent.
  *
  * <h2>Design Problems</h2>
  * <ol>

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1798,7 +1798,7 @@ public static Locale getCurrentLocale() {
     }
 
     /**
-     * Generate a series of &lt;script> tags to include <tt>script.js</tt>
+     * Generate a series of {@code <script>} tags to include {@code script.js}
      * from {@link ConsoleAnnotatorFactory}s and {@link ConsoleAnnotationDescriptor}s.
      */
     public static String generateConsoleAnnotationScriptAndStylesheet() {
@@ -1839,7 +1839,7 @@ public List<String> getLoggerNames() {
     }
 
     /**
-     * Used by &lt;f:password/> so that we send an encrypted value to the client.
+     * Used by {@code <f:password/>} so that we send an encrypted value to the client.
      */
     public String getPasswordValue(Object o) {
         if (o==null)    return null;
@@ -1997,7 +1997,7 @@ public static String humanReadableByteSize(long size){
     /**
      * Get a string that can be safely broken to several lines when necessary.
      *
-     * This implementation inserts &lt;wbr> tags into string. It allows browsers
+     * This implementation inserts {@code <wbr>} tags into string. It allows browsers
      * to wrap line before any sequence of punctuation characters or anywhere
      * in the middle of prolonged sequences of word characters.
      *

File: core/src/main/java/hudson/MarkupText.java
Patch:
@@ -131,7 +131,7 @@ public void surroundWithLiteral(String startTag, String endTag) {
         }
 
         /**
-         * Surrounds this subtext with &lt;a>...&lt;/a>. 
+         * Surrounds this subtext with {@code <a>…</a>}.
          */
         public void href(String url) {
             addHyperlink(0,length(),url);
@@ -292,8 +292,8 @@ public String toString() {
      * Returns the fully marked-up text.
      *
      * @param preEscape
-     *      If true, the escaping is for the &lt;PRE> context. This leave SP and CR/LF intact.
-     *      If false, the escape is for the normal HTML, thus SP becomes &amp;nbsp; and CR/LF becomes &lt;BR>
+     *      If true, the escaping is for the {@code <PRE>} context. This leave SP and CR/LF intact.
+     *      If false, the escape is for the normal HTML, thus SP becomes &amp;nbsp; and CR/LF becomes {@code <BR>}
      */
     public String toString(boolean preEscape) {
         if(tags.isEmpty())

File: core/src/main/java/hudson/Platform.java
Patch:
@@ -62,7 +62,7 @@ public static boolean isDarwin() {
     }
 
     /**
-     * Returns true if we run on Mac OS X >= 10.6
+     * Returns true if we run on Mac OS X ≥ 10.6
      */
     public static boolean isSnowLeopardOrLater() {
         try {

File: core/src/main/java/hudson/Plugin.java
Patch:
@@ -196,15 +196,15 @@ public void configure(JSONObject formData) throws IOException, ServletException,
      *
      * <p>
      * The following is a sample <tt>config.jelly</tt> that you can start yours with:
-     * <pre><xmp>
+     * <pre>{@code <xmp>
      * <j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form">
      *   <f:section title="Locale">
      *     <f:entry title="${%Default Language}" help="/plugin/locale/help/default-language.html">
      *       <f:textbox name="systemLocale" value="${it.systemLocale}" />
      *     </f:entry>
      *   </f:section>
      * </j:jelly>
-     * </xmp></pre>
+     * </xmp>}</pre>
      *
      * <p>
      * This allows you to access data as {@code formData.getString("systemLocale")}

File: core/src/main/java/hudson/Proc.java
Patch:
@@ -503,7 +503,7 @@ public OutputStream getStdin() {
     /**
     * An instance of {@link Proc}, which has an internal workaround for JENKINS-23271.
     * It presumes that the instance of the object is guaranteed to be used after the {@link Proc#join()} call.
-    * See <a href="https://jenkins-ci.org/issue/23271">JENKINS-23271></a>
+    * See <a href="https://jenkins-ci.org/issue/23271">JENKINS-23271</a>
     * @author Oleg Nenashev
     */
     @Restricted(NoExternalUse.class)

File: core/src/main/java/hudson/diagnosis/OldDataMonitor.java
Patch:
@@ -269,7 +269,7 @@ public String toString() {
         /**
          * Does this version range contain a version more than the given number of releases ago?
          * @param threshold Number of releases
-         * @return True if the major version# differs or the minor# differs by >= threshold
+         * @return True if the major version# differs or the minor# differs by ≥ threshold
          */
         public boolean isOld(int threshold) {
             return currentVersion != null && min != null && (currentVersion.digit(0) > min.digit(0)

File: core/src/main/java/hudson/diagnosis/ReverseProxySetupMonitor.java
Patch:
@@ -44,7 +44,7 @@
  *
  * <p>
  * Have the JavaScript make an AJAX call, to which we respond with 302 redirect. If the reverse proxy
- * is done correctly, this will be handled by {@link #doFoo()}, but otherwise we'll report that as an error.
+ * is done correctly, this will be handled by web methods, but otherwise we'll report that as an error.
  * Unfortunately, {@code XmlHttpRequest} doesn't expose properties that allow the client-side JavaScript
  * to learn the details of the failure, so we have to make do with limited information.
  *

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -1053,7 +1053,7 @@ public final VariableResolver<String> getBuildVariableResolver() {
     }
 
     /**
-     * @deprecated Use {@link #getAction(Class)} on {@link AbstractTestResultAction}.
+     * @deprecated Use {@link #getAction(Class)} on {@code AbstractTestResultAction}.
      */
     @Deprecated
     public Action getTestResultAction() {
@@ -1065,7 +1065,7 @@ public Action getTestResultAction() {
     }
 
     /**
-     * @deprecated Use {@link #getAction(Class)} on {@link AggregatedTestResultAction}.
+     * @deprecated Use {@link #getAction(Class)} on {@code AggregatedTestResultAction}.
      */
     @Deprecated
     public Action getAggregatedTestResultAction() {

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -136,7 +136,7 @@ public String getPronoun() {
     /**
      * Gets the term used in the UI to represent the kind of {@link Queue.Task} associated with this kind of
      * {@link Item}. Must start with a capital letter. Defaults to "Build".
-     * @since2.50 
+     * @since 2.50
      */
     public String getTaskNoun() {
         return AlternativeUiTextProvider.get(TASK_NOUN, this, Messages.AbstractItem_TaskNoun());

File: core/src/main/java/hudson/model/AdministrativeMonitor.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.Extension;
 import hudson.ExtensionPoint.LegacyInstancesAreScopedToHudson;
 import hudson.triggers.SCMTrigger;
+import hudson.triggers.TimerTrigger;
 
 import java.util.Set;
 import java.io.IOException;

File: core/src/main/java/hudson/model/Build.java
Patch:
@@ -116,7 +116,7 @@ public void run() {
 
     /**
      * @deprecated as of 1.467
-     *      Override the {@link #run()} method by calling {@link #execute(RunExecution)} with
+     *      Override the {@link #run()} method by calling {@link #execute(hudson.model.Run.RunExecution)} with
      *      proper execution object.
      */
     @Restricted(NoExternalUse.class)

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -284,7 +284,8 @@ public void addAction(@Nonnull Action a) {
     /**
      * This is where the log from the remote agent goes.
      * The method also creates a log directory if required.
-     * @see #getLogDir(), #relocateOldLogs()
+     * @see #getLogDir()
+     * @see #relocateOldLogs()
      */
     public @Nonnull File getLogFile() {
         return new File(getLogDir(),"slave.log");

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -990,7 +990,7 @@ Map<Descriptor<T>,T> toMap(Iterable<T> describables) {
     }
 
     /**
-     * Used to build {@link Describable} instance list from &lt;f:hetero-list> tag.
+     * Used to build {@link Describable} instance list from {@code <f:hetero-list>} tag.
      *
      * @param req
      *      Request that represents the form submission.

File: core/src/main/java/hudson/model/EnvironmentContributor.java
Patch:
@@ -41,10 +41,9 @@
  * of {@link Job}s to compute values.
  *
  * <h2>Views</h2>
- * <h4>buildEnv.groovy/.jelly</h4>
- * <p>
+ * <h3>buildEnv.groovy/.jelly</h3>
  * When Jenkins displays the help page listing all the environment variables available for a build, it does
- * so by combining all the {@code buildEnv} views from this extension point. This view should use the &lt;t:buildEnvVar> tag
+ * so by combining all the {@code buildEnv} views from this extension point. This view should use the {@code <t:buildEnvVar>} tag
  * to render a variable.
  *
  * <p>

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -958,7 +958,7 @@ public static Executor of(Executable executable) {
     /**
      * Returns the estimated duration for the executable.
      * Protects against {@link AbstractMethodError}s if the {@link Executable} implementation
-     * was compiled against Hudson < 1.383
+     * was compiled against Hudson prior to 1.383
      *
      * @deprecated as of 1.388
      *      Use {@link Executables#getEstimatedDurationFor(Queue.Executable)}

File: core/src/main/java/hudson/model/ExecutorListener.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import hudson.slaves.SlaveComputer;
 
 /**
  * A listener for task related events from executors.

File: core/src/main/java/hudson/model/HealthReport.java
Patch:
@@ -84,7 +84,7 @@ public class HealthReport implements Serializable, Comparable<HealthReport> {
     /**
      * The path to the icon corresponding to this health score or <code>null</code> to use the default icon
      * corresponding to the current health score.
-     * <p/>
+     * <p>
      * If the path begins with a '/' then it will be the absolute path, otherwise the image is assumed to be in one of
      * <code>/images/16x16/</code>, <code>/images/24x24/</code> or <code>/images/32x32/</code> depending on the icon
      * size selected by the user.
@@ -110,7 +110,7 @@ public class HealthReport implements Serializable, Comparable<HealthReport> {
      * @param score       The percentage health score (from 0 to 100 inclusive).
      * @param iconUrl     The path to the icon corresponding to this {@link Action}'s health or <code>null</code> to
      *                    display the default icon corresponding to the current health score.
-     *                    <p/>
+     *                    <p>
      *                    If the path begins with a '/' then it will be the absolute path, otherwise the image is
      *                    assumed to be in one of <code>/images/16x16/</code>, <code>/images/24x24/</code> or
      *                    <code>/images/32x32/</code> depending on the icon size selected by the user.
@@ -131,7 +131,7 @@ public HealthReport(int score, String iconUrl, String description) {
      * @param score       The percentage health score (from 0 to 100 inclusive).
      * @param iconUrl     The path to the icon corresponding to this {@link Action}'s health or <code>null</code> to
      *                    display the default icon corresponding to the current health score.
-     *                    <p/>
+     *                    <p>
      *                    If the path begins with a '/' then it will be the absolute path, otherwise the image is
      *                    assumed to be in one of <code>/images/16x16/</code>, <code>/images/24x24/</code> or
      *                    <code>/images/32x32/</code> depending on the icon size selected by the user.

File: core/src/main/java/hudson/model/ItemGroup.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import hudson.model.listeners.ItemListener;
 import java.io.IOException;
 import java.util.Collection;
 import java.io.File;

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -131,7 +131,7 @@ public boolean accept(File child) {
     }
 
     /**
-     * {@link Item} -> name function.
+     * {@link Item} → name function.
      */
     public static final Function1<String,Item> KEYED_BY_NAME = new Function1<String, Item>() {
         public String call(Item item) {

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -964,7 +964,7 @@ public RunT getLastCompletedBuild() {
     }
     
     /**
-     * Returns the last 'numberOfBuilds' builds with a build result >= 'threshold'
+     * Returns the last {@code numberOfBuilds} builds with a build result ≥ {@code threshold}
      * 
      * @return a list with the builds. May be smaller than 'numberOfBuilds' or even empty
      *   if not enough builds satisfying the threshold have been found. Never null.

File: core/src/main/java/hudson/model/JobPropertyDescriptor.java
Patch:
@@ -77,8 +77,8 @@ public JobProperty<?> newInstance(StaplerRequest req, JSONObject formData) throw
      * given job type.
      * 
      * <p>
-     * The default implementation of this method checks if the given job type is assignable to 'J' of
-     * {@link JobProperty}<tt>&lt;J></tt>, but subtypes can extend this to change this behavior.
+     * The default implementation of this method checks if the given job type is assignable to {@code J} of
+     * {@link JobProperty}{@code <J>}, but subtypes can extend this to change this behavior.
      *
      * @return
      *      true to indicate applicable, in which case the property will be

File: core/src/main/java/hudson/model/PeriodicWork.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.Random;
 
 import static hudson.init.InitMilestone.JOB_LOADED;
+import hudson.triggers.Trigger;
 
 /**
  * Extension point to perform a periodic task in Hudson (through {@link Timer}.)

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -141,7 +141,7 @@
  *
  * <p>
  * Items in queue goes through several stages, as depicted below:
- * <pre>
+ * <pre>{@code
  * (enter) --> waitingList --+--> blockedProjects
  *                           |        ^
  *                           |        |
@@ -150,7 +150,7 @@
  *                                    ^              |
  *                                    |              |
  *                                    +---(rarely)---+
- * </pre>
+ * }</pre>
  *
  * <p>
  * Note: In the normal case of events pending items only move to left. However they can move back
@@ -1014,7 +1014,7 @@ public boolean isPending(Task t) {
     
     /**
      * How many {@link BuildableItem}s are assigned for the given label?
-     * <p/>
+     * <p>
      * The implementation is quite similar to {@link #countBuildableItemsFor(hudson.model.Label)},
      * but it has another behavior for null parameters.
      * @param l Label to be checked. If null, only jobs without assigned labels

File: core/src/main/java/hudson/model/RunMap.java
Patch:
@@ -39,6 +39,7 @@
 import jenkins.model.lazy.AbstractLazyLoadRunMap;
 import static jenkins.model.lazy.AbstractLazyLoadRunMap.Direction.*;
 import jenkins.model.lazy.BuildReference;
+import jenkins.model.lazy.LazyBuildMixIn;
 import org.apache.commons.collections.comparators.ReverseComparator;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;

File: core/src/main/java/hudson/model/Saveable.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.model;
 
 import hudson.BulkChange;
+import hudson.model.listeners.SaveableListener;
 import java.io.IOException;
 
 /**

File: core/src/main/java/hudson/model/TopLevelItemDescriptor.java
Patch:
@@ -187,7 +187,7 @@ public String getCategoryId() {
      * For example: plugin/plugin-shortname/images/:size/item.png, where {@code :size} represents the different
      * icon sizes used commonly in Jenkins project: 16x16, 24x24, 32x32 or 48x48
      *
-     * @see {@link FreeStyleProject.DescriptorImpl#getIconFilePathPattern()}
+     * @see FreeStyleProject.DescriptorImpl#getIconFilePathPattern()
      *
      * @return A string or null if it is not defined.
      *

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -708,7 +708,7 @@ private static File getRootDir() {
 
     /**
      * Is the ID allowed? Some are prohibited for security reasons. See SECURITY-166.
-     * <p/>
+     * <p>
      * Note that this is only enforced when saving. These users are often created
      * via the constructor (and even listed on /asynchPeople), but our goal is to
      * prevent anyone from logging in as these users. Therefore, we prevent

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -414,14 +414,14 @@ public List<Widget> getWidgets() {
     }
 
     /**
-     * If this view uses &lt;t:projectView> for rendering, this method returns columns to be displayed.
+     * If this view uses {@code <t:projectView>} for rendering, this method returns columns to be displayed.
      */
     public Iterable<? extends ListViewColumn> getColumns() {
         return ListViewColumn.createDefaultInitialColumnList(this);
     }
 
     /**
-     * If this view uses &lt;t:projectView> for rendering, this method returns the indenter used
+     * If this view uses {@code t:projectView} for rendering, this method returns the indenter used
      * to indent each row.
      */
     public Indenter getIndenter() {

File: core/src/main/java/hudson/model/ViewDescriptor.java
Patch:
@@ -172,7 +172,7 @@ public boolean isApplicable(Class<? extends ViewGroup> ownerType) {
     /**
      * Returns true if this {@link View} type is applicable in the specific {@link ViewGroup}.
      * <p>
-     * Default implementation returns {@link #isApplicable(Class)} for the {@link ViewGroup#getClass()}.
+     * Default implementation returns {@link #isApplicable(Class)} for the {@link ViewGroup}’s {@link Object#getClass}.
      *
      * @return true to indicate applicable, in which case the view will be instantiable within the given owner.
      * @since 2.37

File: core/src/main/java/hudson/model/listeners/RunListener.java
Patch:
@@ -96,7 +96,7 @@ protected RunListener() {
     public void onCompleted(R r, @Nonnull TaskListener listener) {}
 
     /**
-     * Called after a build is moved to the {@link hudson.model.Run.State#COMPLETED} state.
+     * Called after a build is moved to the {@code Run.State.COMPLETED} state.
      *
      * <p>
      * At this point, all the records related to a build is written down to the disk. As such,

File: core/src/main/java/hudson/model/listeners/SCMListener.java
Patch:
@@ -60,7 +60,7 @@
 public abstract class SCMListener implements ExtensionPoint {
 
     /**
-     * Should be called immediately after {@link SCM#checkout(Run, Launcher, FilePath, TaskListener, File)} is called.
+     * Should be called immediately after {@link SCM#checkout(Run, Launcher, FilePath, TaskListener, File, SCMRevisionState)} is called.
      * @param pollingBaseline information about what actually was checked out, if that is available, and this checkout is intended to be included in the build’s polling (if it does any at all)
      * @throws Exception if the checkout should be considered failed
      * @since 1.568

File: core/src/main/java/hudson/model/queue/Executables.java
Patch:
@@ -66,7 +66,7 @@ public class Executables {
      * This can happen if Computer.getIdleStartMilliseconds() is called before the executable is set to non-null in Computer.run()
      * or if the executor thread exits prematurely, see JENKINS-30456
      * Protects against {@link AbstractMethodError}s if the {@link Executable} implementation
-     * was compiled against Hudson < 1.383
+     * was compiled against Hudson prior to 1.383
      * @param e Executable item
      * @return the estimated duration for a given executable, -1 if the executable is null
      */

File: core/src/main/java/hudson/model/queue/QueueListener.java
Patch:
@@ -2,6 +2,7 @@
 
 import hudson.ExtensionList;
 import hudson.ExtensionPoint;
+import hudson.model.Computer;
 import hudson.model.Queue;
 import hudson.model.Queue.BlockedItem;
 import hudson.model.Queue.BuildableItem;

File: core/src/main/java/hudson/org/apache/tools/tar/TarOutputStream.java
Patch:
@@ -102,7 +102,7 @@ public TarOutputStream(OutputStream os, int blockSize, int recordSize) {
     /**
      * Set the long file mode.
      * This can be LONGFILE_ERROR(0), LONGFILE_TRUNCATE(1) or LONGFILE_GNU(2).
-     * This specifies the treatment of long file names (names >= TarConstants.NAMELEN).
+     * This specifies the treatment of long file names (names ≥ TarConstants.NAMELEN).
      * Default is LONGFILE_ERROR.
      * @param longFileMode the mode to use
      */

File: core/src/main/java/hudson/scheduler/CronTab.java
Patch:
@@ -309,7 +309,7 @@ void setTo(Calendar c, int i) {
      * More precisely, given the time 't', computes another smallest time x such that:
      *
      * <ul>
-     * <li>x >= t (inclusive)
+     * <li>x ≥ t (inclusive)
      * <li>x matches this crontab
      * </ul>
      *

File: core/src/main/java/hudson/security/BasicAuthenticationFilter.java
Patch:
@@ -69,16 +69,16 @@
  * redirected back to the original URL, where the request is served.
  *
  * <p>
- * So all in all, the redirection works like <tt>/abc/def</tt> -> <tt>/secured/abc/def</tt>
- * -> <tt>/abc/def</tt>.
+ * So all in all, the redirection works like {@code /abc/def} → {@code /secured/abc/def}
+ * → {@code /abc/def}.
  *
  * <h2>Notes</h2>
  * <ul>
  * <li>
  * The technique of getting a request dispatcher for <tt>/j_security_check</tt> may not
  * work for all containers, but so far that seems like the only way to make this work.
  * <li>
- * This A->B->A redirect is a cyclic redirection, so we need to watch out for clients
+ * This A → B → A redirect is a cyclic redirection, so we need to watch out for clients
  * that detect this as an error.
  * </ul> 
  *

File: core/src/main/java/hudson/security/PermissionAdder.java
Patch:
@@ -26,6 +26,7 @@
 
 import hudson.ExtensionPoint;
 import hudson.model.User;
+import jenkins.model.Jenkins;
 
 /**
  * Service which can add permissions for a given user to the configured authorization strategy.

File: core/src/main/java/hudson/security/SidACL.java
Patch:
@@ -111,7 +111,7 @@ protected Boolean _hasPermission(@Nonnull Authentication a, Permission permissio
      * @return
      *      true if the access should be granted, false if it should be denied.
      *      The null value indicates that the ACL does no rule for this Sid/Permission
-     *      combination. The caller can decide what to do &mash; such as consulting the higher level ACL,
+     *      combination. The caller can decide what to do—such as consulting the higher level ACL,
      *      or denying the access (if the model is no-access-by-default.)  
      */
     protected abstract Boolean hasPermission(Sid p, Permission permission);

File: core/src/main/java/hudson/slaves/CloudProvisioningListener.java
Patch:
@@ -8,6 +8,7 @@
 import jenkins.model.Jenkins;
 
 import java.util.Collection;
+import java.util.concurrent.Future;
 
 import javax.annotation.Nonnull;
 
@@ -77,7 +78,7 @@ public void onCommit(@Nonnull NodeProvisioner.PlannedNode plannedNode, @Nonnull
     }
 
     /**
-     * Called when {@link NodeProvisioner.PlannedNode#future#get()} throws an exception.
+     * Called when {@link NodeProvisioner.PlannedNode#future} {@link Future#get()} throws an exception.
      *
      * @param plannedNode the planned node which failed to provision
      * @param t the exception

File: core/src/main/java/hudson/tasks/BuildStep.java
Patch:
@@ -50,6 +50,7 @@
 import org.acegisecurity.Authentication;
 
 import javax.annotation.Nonnull;
+import jenkins.model.Jenkins;
 
 /**
  * One step of the whole build process.
@@ -146,7 +147,7 @@ public interface BuildStep {
      * <p>
      * This action can have optional <tt>jobMain.jelly</tt> view, which will be
      * aggregated into the main panel of the job top page. The jelly file
-     * should have an &lt;h2> tag that shows the section title, followed by some
+     * should have an {@code <h2>} tag that shows the section title, followed by some
      * block elements to render the details of the section.
      *
      * @param project

File: core/src/main/java/hudson/tasks/Maven.java
Patch:
@@ -505,7 +505,7 @@ public static final class MavenInstallation extends ToolInstallation implements
 
         /**
          * @deprecated as of 1.308.
-         *      Use {@link #Maven.MavenInstallation(String, String, List)}
+         *      Use {@link #MavenInstallation(String, String, List)}
          */
         @Deprecated
         public MavenInstallation(String name, String home) {

File: core/src/main/java/hudson/tools/JDKInstaller.java
Patch:
@@ -694,7 +694,7 @@ public static final class JDKFamily {
 
     public static final class JDKRelease {
         /**
-         * the list of {@Link JDKFile}s
+         * the list of {@link JDKFile}s
          */
         public JDKFile[] files;
         /**
@@ -813,7 +813,7 @@ public JDKFamilyList toList() throws IOException {
         }
 
         /**
-         * @{inheritDoc}
+         * {@inheritDoc}
          */
         @Override
         public JSONObject reduce (List<JSONObject> jsonObjectList) {

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -93,7 +93,7 @@
  * You can add UI elements under the SCM section by creating a
  * config.jelly or config.groovy in the resources area for
  * your class that inherits from SCMTrigger and has the 
- * @{@link hudson.model.Extension} annotation. The UI should 
+ * {@link Extension} annotation. The UI should 
  * be wrapped in an f:section element to denote it.
  *
  * @author Kohsuke Kawaguchi

File: core/src/main/java/hudson/triggers/SafeTimerTask.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.TimerTask;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import jenkins.util.Timer;
 import org.acegisecurity.context.SecurityContext;
 import org.acegisecurity.context.SecurityContextHolder;
 

File: core/src/main/java/hudson/util/ChunkedOutputStream.java
Patch:
@@ -37,7 +37,7 @@
  * Implements HTTP chunking support. Writes are buffered to an internal buffer (2048 default size).
  * Chunks are guaranteed to be at least as large as the buffer size (except for the last chunk).
  *
- * @author Mohammad Rezaei, Goldman, Sachs & Co.
+ * @author Mohammad Rezaei, Goldman, Sachs &amp; Co.
  */
 public class ChunkedOutputStream extends OutputStream {
 

File: core/src/main/java/hudson/util/CyclicGraphDetector.java
Patch:
@@ -28,7 +28,7 @@ public void run(Iterable<? extends N> allNodes) throws CycleDetectedException {
 
     /**
      * Returns all the nodes in the topologically sorted order.
-     * That is, if there's an edge a->b, b always come earlier than a.
+     * That is, if there's an edge a → b, b always come earlier than a.
      */
     public List<N> getSorted() {
         return topologicalOrder;

File: core/src/main/java/hudson/util/DescribableList.java
Patch:
@@ -200,7 +200,7 @@ public void rebuild(StaplerRequest req, JSONObject json, List<? extends Descript
      * Rebuilds the list by creating a fresh instances from the submitted form.
      *
      * <p>
-     * This version works with the &lt;f:hetero-list> UI tag, where the user
+     * This version works with the {@code <f:hetero-list>} UI tag, where the user
      * is allowed to create multiple instances of the same descriptor. Order is also
      * significant.
      */

File: core/src/main/java/hudson/util/FormApply.java
Patch:
@@ -31,7 +31,7 @@
 import java.io.IOException;
 
 /**
- * Server-side code related to the &lt;f:apply> button.
+ * Server-side code related to the {@code <f:apply>} button.
  *
  * @author Kohsuke Kawaguchi
  * @since 1.453

File: core/src/main/java/hudson/util/FormFieldValidator.java
Patch:
@@ -635,7 +635,7 @@ protected void fail() throws IOException, ServletException {
     }
 
     /**
-     * Verifies that the 'value' parameter is an integer >= 0.
+     * Verifies that the {@code value} parameter is an integer ≥ 0.
      *
      * @since 1.282
      * @deprecated as of 1.294

File: core/src/main/java/hudson/util/HttpResponses.java
Patch:
@@ -92,7 +92,7 @@ public static HttpResponse okJSON(@Nonnull Map<?,?> data) {
         /**
          * Set the response as an error response.
          * @param message The error "message" set on the response.
-         * @return {@link this} object.
+         * @return {@code this} object.
          *
          * @since 2.0
          */

File: core/src/main/java/hudson/util/Memoizer.java
Patch:
@@ -29,7 +29,7 @@
  * Implements memoization semantics.
  *
  * <p>
- * Conceptually a function from K -> V that computes values lazily and remembers the results.
+ * Conceptually a function from K → V that computes values lazily and remembers the results.
  * Often used to implement a data store per key.
  *
  * @author Kohsuke Kawaguchi

File: core/src/main/java/hudson/util/NamingThreadFactory.java
Patch:
@@ -24,6 +24,7 @@
 
 package hudson.util;
 
+import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.atomic.AtomicInteger;
 

File: core/src/main/java/hudson/util/QueryParameterMap.java
Patch:
@@ -52,7 +52,7 @@ public class QueryParameterMap {
 
     /**
      * @param queryString
-     *      String that looks like "abc=def&ghi=jkl"
+     *      String that looks like {@code abc=def&ghi=jkl}
      */
     public QueryParameterMap(String queryString) {
         if (queryString==null || queryString.length()==0)   return;

File: core/src/main/java/hudson/util/jna/GNUCLibrary.java
Patch:
@@ -31,6 +31,7 @@
 import com.sun.jna.NativeLong;
 import com.sun.jna.LastErrorException;
 import com.sun.jna.ptr.IntByReference;
+import hudson.os.PosixAPI;
 import jnr.posix.POSIX;
 import org.jvnet.libpam.impl.CLibrary.passwd;
 

File: core/src/main/java/hudson/util/spring/ClosureScript.java
Patch:
@@ -39,7 +39,7 @@
  * <pre>
  * a = 1;
  * b(2);
- * <pre>
+ * </pre>
  *
  * <p>
  * Using {@link ClosureScript} as the base class would run it as:

File: core/src/main/java/hudson/views/ListViewColumn.java
Patch:
@@ -51,7 +51,7 @@
  * This object must have the <tt>column.jelly</tt>. This view
  * is called for each cell of this column. The {@link Item} object
  * is passed in the "job" variable. The view should render
- * the &lt;td> tag.
+ * the {@code <td>} tag.
  *
  * <p>
  * This object may have an additional <tt>columnHeader.jelly</tt>. The default ColumnHeader

File: core/src/main/java/hudson/widgets/HistoryWidget.java
Patch:
@@ -115,7 +115,7 @@ public String getFirstTransientBuildKey() {
     }
 
     /**
-     * Calculates the first transient build record. Everything >= this will be discarded when AJAX call is made.
+     * Calculates the first transient build record. Everything ≥ this will be discarded when AJAX call is made.
      *
      * @param historyPageFilter
      *      The history page filter containing the list of builds.

File: core/src/main/java/hudson/widgets/Widget.java
Patch:
@@ -32,13 +32,13 @@
  * <h2>Views</h2>
  * <ul>
  * <li><b>index.jelly</b> should display the widget. It should have:
- *   &lt;l:pane width="2" title="..."> ...body... &lt;/l:pane> structure.
+ *   {@code <l:pane width="2" title="…"> …body… </l:pane>} structure.
  *   In this view, "it" points to the {@link Widget} and "view" points to {@link View}
  *   that's rendering the widget.
  * </ul>
  *
  * TODO:
- *  - make Widget describable & provide the UI to let admin configure widgets?
+ *  - make Widget describable and provide the UI to let admin configure widgets?
  *    - backward compatibility implications?
  *
  *

File: core/src/main/java/jenkins/FilePathFilter.java
Patch:
@@ -13,7 +13,7 @@
  *
  * <p>
  * Returning {@code true} indicates that the access is accepted. No other {@link FilePathFilter}
- * will be consulted to reject the execution, and the access will go through. Returning {@link false}
+ * will be consulted to reject the execution, and the access will go through. Returning {@code false}
  * indicates "I don't know". Other {@link FilePathFilter}s get to inspect the access, and they might
  * accept/reject access. And finally, throwing {@link SecurityException} is to reject the access.
  *

File: core/src/main/java/jenkins/model/ArtifactManager.java
Patch:
@@ -26,6 +26,7 @@
 
 import hudson.FilePath;
 import hudson.Launcher;
+import hudson.model.AbstractBuild;
 import hudson.model.BuildListener;
 import hudson.model.Run;
 import hudson.model.TaskListener;
@@ -53,7 +54,7 @@ public abstract class ArtifactManager {
      * <p>If called multiple times for the same build, do not delete the old artifacts but keep them all, unless overwritten.
      * For example, the XVNC plugin could use this to save {@code screenshot.jpg} if so configured.
      * <p>This method is typically invoked on a running build, though e.g. in the case of Maven module builds,
-     * the build may actually be {@link hudson.model.Run.State#COMPLETED} when this is called
+     * the build may actually be {@code Run.State.COMPLETED} when this is called
      * (since it is the parent build which is still running and performing archiving).
      * @param workspace the root directory from which to copy files (typically {@link AbstractBuild#getWorkspace} but not necessarily)
      * @param launcher a launcher to use if external processes need to be forked

File: core/src/main/java/jenkins/model/BuildDiscarder.java
Patch:
@@ -9,6 +9,7 @@
 import com.thoughtworks.xstream.mapper.Mapper;
 import hudson.ExtensionPoint;
 import hudson.model.AbstractDescribableImpl;
+import hudson.model.AbstractProject;
 import hudson.model.Job;
 import hudson.model.Run;
 import hudson.tasks.LogRotator;

File: core/src/main/java/jenkins/model/DependencyDeclarer.java
Patch:
@@ -29,6 +29,7 @@
 import hudson.tasks.Builder;
 import hudson.tasks.Publisher;
 import hudson.triggers.Trigger;
+import hudson.util.DescribableList;
 
 /**
  * Marker interface for project-associated objects that can participate

File: core/src/main/java/jenkins/model/DirectlyModifiableTopLevelItemGroup.java
Patch:
@@ -24,7 +24,9 @@
 
 package jenkins.model;
 
+import hudson.model.Item;
 import hudson.model.TopLevelItem;
+import hudson.model.listeners.ItemListener;
 import java.io.IOException;
 
 /**

File: core/src/main/java/jenkins/model/FingerprintFacet.java
Patch:
@@ -49,8 +49,7 @@
  * an instance of new facet and add it.
  *
  * <h2>Views</h2>
- * <h4>main.groovy</h4>
- * <p>
+ * <h3>main.groovy</h3>
  * This view is rendered into the
  *
  * @author Kohsuke Kawaguchi

File: core/src/main/java/jenkins/model/IdStrategy.java
Patch:
@@ -321,7 +321,7 @@ public String getDisplayName() {
      * A case sensitive email address {@link IdStrategy}. Providing this implementation among the set of default
      * implementations as given the history of misunderstanding in the Jenkins code base around ID case sensitivity,
      * if not provided people will get this wrong.
-     * <p/>
+     * <p>
      * Note: Not all email addresses are case sensitive. It is knowledge that belongs to the server that holds the
      * mailbox. Most sane system administrators do not configure their accounts using case sensitive mailboxes
      * but the RFC does allow them the option to configure that way. Domain names are always case insensitive per RFC.

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2867,7 +2867,8 @@ private File getRootDirFor(String name) {
      * Gets the user of the given name.
      *
      * @return the user of the given name (which may or may not be an id), if that person exists; else null
-     * @see User#get(String,boolean), {@link User#getById(String, boolean)}
+     * @see User#get(String,boolean)
+     * @see User#getById(String, boolean)
      */
     public @CheckForNull User getUser(String name) {
         return User.get(name, User.ALLOW_USER_CREATION_VIA_URL && hasPermission(ADMINISTER));

File: core/src/main/java/jenkins/model/ModelObjectWithContextMenu.java
Patch:
@@ -58,7 +58,7 @@ public interface ModelObjectWithContextMenu extends ModelObject {
     /**
      * Data object that represents the context menu.
      *
-     * Via {@link HttpResponse}, this class is capable of converting itself to JSON that &lt;l:breadcrumb/> understands.
+     * Via {@link HttpResponse}, this class is capable of converting itself to JSON that {@code <l:breadcrumb/>} understands.
      */
     @ExportedBean
     public class ContextMenu implements HttpResponse {
@@ -180,7 +180,7 @@ public ContextMenu add(Job job) {
          * 
          * <p>
          * This method uses {@code sidepanel.groovy} to run the side panel generation, captures
-         * the use of &lt;l:task> tags, and then converts those into {@link MenuItem}s. This is
+         * the use of {@code <l:task>} tags, and then converts those into {@link MenuItem}s. This is
          * supposed to make this work with most existing {@link ModelObject}s that follow the standard
          * convention.
          * 

File: core/src/main/java/jenkins/model/PeepholePermalink.java
Patch:
@@ -32,7 +32,7 @@
  * <blockquote>
  *     Given a job J, permalink is a function F that computes a build B.
  *     A peephole permalink is a subset of this function that can be
- *     deduced to the "peep-hole" function G(B)->bool:
+ *     deduced to the "peep-hole" function G(B)→bool:
  *
  *     <pre>
  *         F(J) = { newest B | G(B)==true }

File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java
Patch:
@@ -315,8 +315,8 @@ public boolean runExists(int number) {
      * @param d
      *      defines what we mean by "nearby" above.
      *      If EXACT, find #N or return null.
-     *      If ASC, finds the closest #M that satisfies M>=N.
-     *      If DESC, finds the closest #M that satisfies M&lt;=N.
+     *      If ASC, finds the closest #M that satisfies M ≥ N.
+     *      If DESC, finds the closest #M that satisfies M ≤ N.
      */
     public @CheckForNull R search(final int n, final Direction d) {
         switch (d) {

File: core/src/main/java/jenkins/security/BasicHeaderProcessor.java
Patch:
@@ -38,7 +38,6 @@
  * to authenticate the same header differently and fail.
  *
  * @author Kohsuke Kawaguchi
- * @see ZD-19640
  */
 public class BasicHeaderProcessor implements Filter {
     // these fields are supposed to be injected by Spring

File: core/src/main/java/jenkins/security/ConfidentialKey.java
Patch:
@@ -6,6 +6,7 @@
 
 import javax.annotation.CheckForNull;
 import java.io.IOException;
+import jenkins.slaves.JnlpSlaveAgentProtocol;
 
 /**
  * Confidential information that gets stored as a singleton in Jenkins, mostly some random token value.

File: core/src/main/java/jenkins/security/ConfidentialStore.java
Patch:
@@ -2,6 +2,7 @@
 
 import hudson.Extension;
 import hudson.Lookup;
+import hudson.init.InitMilestone;
 import hudson.util.Secret;
 import hudson.util.Service;
 import jenkins.model.Jenkins;
@@ -10,6 +11,7 @@
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
 import java.io.IOException;
+import java.security.SecureRandom;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: core/src/main/java/jenkins/security/UpdateSiteWarningsMonitor.java
Patch:
@@ -58,7 +58,7 @@
  *   <li>Inapplicable warnings are those that are not applicable.
  * </ul>
  *
- * <p></p>The following sets may be non-empty:</p>
+ * <p>The following sets may be non-empty:</p>
  *
  * <ul>
  *   <li>Intersection of applicable and active

File: core/src/main/java/jenkins/security/s2m/package-info.java
Patch:
@@ -1,4 +1,4 @@
 /**
- * Agent -> master security.
+ * Agent → master security.
  */
 package jenkins.security.s2m;

File: core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java
Patch:
@@ -33,6 +33,7 @@
 import hudson.model.AbstractProject;
 import hudson.model.Action;
 import hudson.model.BuildListener;
+import hudson.model.Computer;
 import hudson.model.Run;
 import hudson.model.TaskListener;
 import hudson.tasks.BuildWrapper;

File: core/src/main/java/jenkins/util/SystemProperties.java
Patch:
@@ -39,7 +39,7 @@
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
 /**
- * Centralizes calls to {@link System#getProperty()} and related calls.
+ * Centralizes calls to {@link System#getProperty(String)} and related calls.
  * This allows us to get values not just from environment variables but also from
  * the {@link ServletContext}, so properties like {@code hudson.DNSMultiCast.disabled}
  * can be set in {@code context.xml} and the app server's boot script does not

File: core/src/main/java/jenkins/util/VirtualFile.java
Patch:
@@ -199,7 +199,6 @@ public abstract class VirtualFile implements Comparable<VirtualFile>, Serializab
      * For a remote file, this can be much faster than doing the corresponding operations one by one as separate requests.
      * The default implementation just calls the block directly.
      * @param <V> a value type
-     * @param <T> the exception type
      * @param callable something to run all at once (only helpful if any mentioned files are on the same system)
      * @return the callable result
      * @throws IOException if remote communication failed

File: core/src/main/java/jenkins/util/groovy/GroovyHookScript.java
Patch:
@@ -27,7 +27,7 @@
  * <li>/WEB-INF/<i>HOOK</i>.groovy in the war file
  * <li>/WEB-INF/<i>HOOK</i>.groovy.d/*.groovy in the war file
  * <li>$JENKINS_HOME/<i>HOOK</i>.groovy
- * <il>$JENKINS_HOME/<i>HOOK</i>.groovy.d/*.groovy
+ * <li>$JENKINS_HOME/<i>HOOK</i>.groovy.d/*.groovy
  * </ol>
  *
  * <p>

File: core/src/main/java/hudson/scheduler/CronTabList.java
Patch:
@@ -131,7 +131,7 @@ public static CronTabList create(@Nonnull String format, Hash hash) throws ANTLR
     public @CheckForNull Calendar previous() {
         Calendar nearest = null;
         for (CronTab tab : tabs) {
-            Calendar scheduled = tab.floor(Calendar.getInstance());
+            Calendar scheduled = tab.floor(tab.getTimeZone() == null ? Calendar.getInstance() : Calendar.getInstance(tab.getTimeZone()));
             if (nearest == null || nearest.before(scheduled)) {
                 nearest = scheduled;
             }
@@ -143,7 +143,7 @@ public static CronTabList create(@Nonnull String format, Hash hash) throws ANTLR
     public @CheckForNull Calendar next() {
         Calendar nearest = null;
         for (CronTab tab : tabs) {
-            Calendar scheduled = tab.ceil(Calendar.getInstance());
+            Calendar scheduled = tab.ceil(tab.getTimeZone() == null ? Calendar.getInstance() : Calendar.getInstance(tab.getTimeZone()));
             if (nearest == null || nearest.after(scheduled)) {
                 nearest = scheduled;
             }

File: cli/src/main/java/hudson/cli/CliEntryPoint.java
Patch:
@@ -34,7 +34,9 @@
  * Remotable interface for CLI entry point on the server side.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated Specific to Remoting-based protocol.
  */
+@Deprecated
 public interface CliEntryPoint {
     /**
      * Just like the static main method.

File: cli/src/main/java/hudson/cli/CliPort.java
Patch:
@@ -8,9 +8,9 @@
 import java.security.PublicKey;
 import java.security.spec.X509EncodedKeySpec;
 
-/**
- * @author Kohsuke Kawaguchi
- */
+    /**
+     * @deprecated Specific to Remoting mode.
+     */
 public final class CliPort {
     /**
      * The TCP endpoint to talk to.

File: cli/src/main/java/hudson/cli/Connection.java
Patch:
@@ -56,6 +56,9 @@
 import java.security.interfaces.RSAPublicKey;
 import java.security.spec.X509EncodedKeySpec;
 
+/**
+ * Used by Jenkins core only in deprecated Remoting-based CLI.
+ */
 public class Connection {
     public final InputStream in;
     public final OutputStream out;

File: cli/src/test/java/hudson/cli/PrivateKeyProviderTest.java
Patch:
@@ -57,7 +57,7 @@ public void specifyKeysExplicitly() throws Exception {
         final File dsaKey = keyFile(".ssh/id_dsa");
         final File rsaKey = keyFile(".ssh/id_rsa");
 
-        run("-i", dsaKey.getAbsolutePath(), "-i", rsaKey.getAbsolutePath(), "-s", "http://example.com");
+        run("-remoting", "-i", dsaKey.getAbsolutePath(), "-i", rsaKey.getAbsolutePath(), "-s", "http://example.com");
 
         verify(cli).authenticate(withKeyPairs(
                 keyPair(dsaKey),
@@ -73,7 +73,7 @@ public void useDefaultKeyLocations() throws Exception {
         final File dsaKey = keyFile(".ssh/id_dsa");
 
         fakeHome();
-        run("-s", "http://example.com");
+        run("-remoting", "-s", "http://example.com");
 
         verify(cli).authenticate(withKeyPairs(
                 keyPair(rsaKey),

File: core/src/main/java/hudson/cli/CliManagerImpl.java
Patch:
@@ -44,7 +44,9 @@
  * {@link CliEntryPoint} implementation exposed to the remote CLI.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated Specific to Remoting-based protocol.
  */
+@Deprecated
 public class CliManagerImpl implements CliEntryPoint, Serializable {
     private transient final Channel channel;
     

File: core/src/main/java/hudson/cli/CliProtocol.java
Patch:
@@ -26,7 +26,9 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.467
+ * @deprecated Implementing Remoting-based protocol.
  */
+@Deprecated
 @Extension @Symbol("cli")
 public class CliProtocol extends AgentProtocol {
     @Inject
@@ -42,7 +44,7 @@ public boolean isOptIn() {
 
     @Override
     public String getName() {
-        return jenkins.CLI.DISABLED ? null : "CLI-connect";
+        return jenkins.CLI.get().isEnabled() ? "CLI-connect" : null;
     }
 
     /**

File: core/src/main/java/hudson/cli/CliProtocol2.java
Patch:
@@ -20,12 +20,14 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.467
+ * @deprecated Implementing Remoting-based protocol.
  */
+@Deprecated
 @Extension @Symbol("cli2")
 public class CliProtocol2 extends CliProtocol {
     @Override
     public String getName() {
-        return jenkins.CLI.DISABLED ? null : "CLI2-connect";
+        return jenkins.CLI.get().isEnabled() ? "CLI2-connect" : null;
     }
 
     /**

File: core/src/main/java/hudson/cli/CliTransportAuthenticator.java
Patch:
@@ -20,7 +20,9 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.419
+ * @deprecated Specific to Remoting-based protocol.
  */
+@Deprecated
 public abstract class CliTransportAuthenticator implements ExtensionPoint {
     /**
      * Checks if this implementation supports the specified protocol.

File: core/src/main/java/hudson/cli/ClientAuthenticationCache.java
Patch:
@@ -27,7 +27,9 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.351
+ * @deprecated Assumes Remoting, and vulnerable to JENKINS-12543.
  */
+@Deprecated
 public class ClientAuthenticationCache implements Serializable {
     /**
      * Where the store should be placed.

File: core/src/main/java/hudson/cli/CommandDuringBuild.java
Patch:
@@ -36,7 +36,9 @@
  * Base class for those commands that are valid only during a build.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated Limited to Remoting-based protocol.
  */
+@Deprecated
 public abstract class CommandDuringBuild extends CLICommand {
     /**
      * This method makes sense only when called from within the build kicked by Jenkins.

File: core/src/main/java/hudson/cli/ConsoleCommand.java
Patch:
@@ -75,6 +75,7 @@ protected int run() throws Exception {
                 do {
                     logText = run.getLogText();
                     pos = logText.writeLogTo(pos, w);
+                    // TODO should sleep as in Run.writeWholeLogTo
                 } while (!logText.isComplete());
             } else {
                 try (InputStream logInputStream = run.getLogInputStream()) {

File: core/src/main/java/hudson/cli/HelpCommand.java
Patch:
@@ -53,7 +53,7 @@ public String getShortDescription() {
     protected int run() throws Exception {
         if (!Jenkins.getActiveInstance().hasPermission(Jenkins.READ)) {
             throw new AccessDeniedException("You must authenticate to access this Jenkins.\n"
-                    + "Use --username/--password/--password-file parameters or login command.");
+                    + hudson.cli.client.Messages.CLI_Usage());
         }
 
         if (command != null)

File: core/src/main/java/hudson/cli/InstallToolCommand.java
Patch:
@@ -48,7 +48,9 @@
  * Performs automatic tool installation on demand.
  *
  * @author Kohsuke Kawaguchi
+ * @deprecated Limited to Remoting-based protocol.
  */
+@Deprecated
 @Extension
 public class InstallToolCommand extends CLICommand {
     @Argument(index=0,metaVar="KIND",usage="The type of the tool to install, such as 'Ant'")

File: core/src/main/java/hudson/cli/SetBuildParameterCommand.java
Patch:
@@ -15,7 +15,9 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.514
+ * @deprecated Limited to Remoting-based protocol.
  */
+@Deprecated
 @Extension
 public class SetBuildParameterCommand extends CommandDuringBuild {
     @Argument(index=0, metaVar="NAME", required=true, usage="Name of the build variable")

File: core/src/main/java/hudson/cli/SetBuildResultCommand.java
Patch:
@@ -33,7 +33,9 @@
  * Sets the result of the current build. Works only if invoked from within a build.
  * 
  * @author Kohsuke Kawaguchi
+ * @deprecated Limited to Remoting-based protocol.
  */
+@Deprecated
 @Extension
 public class SetBuildResultCommand extends CommandDuringBuild {
     @Argument(metaVar="RESULT",required=true)

File: core/src/main/java/hudson/cli/util/ScriptLoader.java
Patch:
@@ -15,7 +15,9 @@
  * Reads a file (either a path or URL) over a channel.
  *
  * @author vjuranek
+ * @deprecated Specific to Remoting-based protocol.
  */
+@Deprecated
 public class ScriptLoader extends MasterToSlaveCallable<String,IOException> {
     
     private final String script;

File: core/src/main/java/hudson/model/ParameterDefinition.java
Patch:
@@ -194,8 +194,7 @@ public ParameterDescriptor getDescriptor() {
      * Create a parameter value from the string given in the CLI.
      *
      * @param command
-     *      This is the command that got the parameter. You can use its {@link CLICommand#checkChannel()}
-     *      for interacting with the CLI JVM.
+     *      This is the command that got the parameter.
      * @throws AbortException
      *      If the CLI processing should be aborted. Hudson will report the error message
      *      without stack trace, and then exits this command. Useful for graceful termination.

File: core/src/main/java/hudson/security/AbstractPasswordBasedSecurityRealm.java
Patch:
@@ -50,6 +50,7 @@ public SecurityComponents createSecurityComponents() {
                 new ImpersonatingUserDetailsService(this));
     }
 
+    @Deprecated
     @Override
     public CliAuthenticator createCliAuthenticator(final CLICommand command) {
         return new CliAuthenticator() {
@@ -68,12 +69,12 @@ public Authentication authenticate() throws AuthenticationException, IOException
 
                 if (passwordFile!=null)
                     try {
-                        password = new FilePath(command.channel,passwordFile).readToString().trim();
+                        password = new FilePath(command.checkChannel(), passwordFile).readToString().trim();
                     } catch (IOException e) {
                         throw new BadCredentialsException("Failed to read "+passwordFile,e);
                     }
                 if (password==null)
-                    password = command.channel.call(new InteractivelyAskForPassword());
+                    password = command.checkChannel().call(new InteractivelyAskForPassword());
 
                 if (password==null)
                     throw new BadCredentialsException("No password specified");

File: core/src/main/java/hudson/security/CliAuthenticator.java
Patch:
@@ -75,7 +75,9 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.350
+ * @deprecated Vulnerable to JENKINS-12543.
  */
+@Deprecated
 public abstract class CliAuthenticator {
     /**
      * Authenticates the CLI invocation. See class javadoc for the semantics.

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -189,7 +189,9 @@ public IdStrategy getGroupIdStrategy() {
      * @return
      *      never null. By default, this method returns a no-op authenticator that always authenticates
      *      the session as authenticated by the transport (which is often just {@link jenkins.model.Jenkins#ANONYMOUS}.)
+     * @deprecated See {@link CliAuthenticator}.
      */
+    @Deprecated
     public CliAuthenticator createCliAuthenticator(final CLICommand command) {
         return new CliAuthenticator() {
             public Authentication authenticate() {

File: test/src/test/java/hudson/cli/GetJobCommandTest.java
Patch:
@@ -47,6 +47,7 @@ public class GetJobCommandTest {
         FreeStyleProject p = d.createProject(FreeStyleProject.class, "p");
         ByteArrayOutputStream out = new ByteArrayOutputStream();
         PrintStream outS = new PrintStream(out);
+        // TODO switch to CLICommandInvoker
         int result = new GetJobCommand().main(Collections.singletonList("d/p"), Locale.ENGLISH, new NullInputStream(0), outS, outS);
         outS.flush();
         String output = out.toString();

File: test/src/test/java/jenkins/security/Security218BlackBoxTest.java
Patch:
@@ -85,7 +85,7 @@ public class Security218BlackBoxTest {
     @Rule
     public JenkinsRule r = new JenkinsRule();
 
-    @SuppressWarnings("deprecation") // really mean to use getPage(String)
+    @SuppressWarnings("deprecation") // really mean to use getPage(String), and Remoting-based CLI
     @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) // TODO userContent inaccessible without authentication otherwise
     @Test
     public void probe() throws Exception {
@@ -277,7 +277,7 @@ public void run() {
                         try {
                             CLI cli = new CLI(r.getURL()) {
                                 @Override
-                                protected CliPort getCliTcpPort(String url) throws IOException {
+                                protected CliPort getCliTcpPort(URL url) throws IOException {
                                     return new CliPort(new InetSocketAddress(proxySocket.getInetAddress(), proxySocket.getLocalPort()), /* ignore identity */ null, 1);
                                 }
                             };

File: test/src/test/java/jenkins/security/Security218CliTest.java
Patch:
@@ -41,6 +41,7 @@
 import org.jvnet.hudson.test.recipes.PresetData;
 import org.kohsuke.args4j.Argument;
 
+@SuppressWarnings("deprecation") // Remoting-based CLI usages intentional
 public class Security218CliTest {
 
     @Rule
@@ -197,8 +198,8 @@ public String getShortDescription() {
         
         @Argument(metaVar = "command", usage = "Command to be launched by the payload", required = true, index = 1)
         public String command;
-        
 
+        @Override
         protected int run() throws Exception {
             Payload payloadItem = Payload.valueOf(this.payload);
             PayloadCaller callable = new PayloadCaller(payloadItem, command);

File: test/src/test/java/jenkins/security/Security232Test.java
Patch:
@@ -28,10 +28,10 @@
 import java.rmi.server.ObjID;
 import java.rmi.server.RemoteObject;
 import java.rmi.server.UnicastRemoteObject;
+import java.util.Collections;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import javax.net.SocketFactory;
-import static jenkins.security.security218.Payload.CommonsCollections1;
 import jenkins.security.security218.ysoserial.payloads.CommonsCollections1;
 import jenkins.security.security218.ysoserial.payloads.ObjectPayload;
 import static org.junit.Assert.*;
@@ -59,6 +59,8 @@ public class Security232Test {
 
     @Test
     public void commonsCollections1() throws Exception {
+        r.jenkins.setAgentProtocols(Collections.singleton("CLI-connect")); // override CliProtocol.OPT_IN
+
         File pwned = new File(r.jenkins.getRootDir(), "pwned");
 
         int jrmpPort = 12345;

File: core/src/main/java/hudson/security/AbstractPasswordBasedSecurityRealm.java
Patch:
@@ -69,12 +69,12 @@ public Authentication authenticate() throws AuthenticationException, IOException
 
                 if (passwordFile!=null)
                     try {
-                        password = new FilePath(command.channel,passwordFile).readToString().trim();
+                        password = new FilePath(command.checkChannel(), passwordFile).readToString().trim();
                     } catch (IOException e) {
                         throw new BadCredentialsException("Failed to read "+passwordFile,e);
                     }
                 if (password==null)
-                    password = command.channel.call(new InteractivelyAskForPassword());
+                    password = command.checkChannel().call(new InteractivelyAskForPassword());
 
                 if (password==null)
                     throw new BadCredentialsException("No password specified");

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -1870,7 +1870,6 @@ public void _run() throws IOException, InstallationStatus {
                 // Do this first so we can avoid duplicate downloads, too
                 // check to see if the plugin is already installed at the same version and skip it
                 LOGGER.info("Skipping duplicate install of: " + plugin.getDisplayName() + "@" + plugin.version);
-                //throw new Skipped(); // TODO set skipped once we have a status indicator for it
                 return;
             }
             try {

File: core/src/test/java/hudson/model/ViewTest.java
Patch:
@@ -13,6 +13,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 
 import javax.servlet.ServletException;
@@ -98,7 +99,7 @@ public void getAllItems() throws Exception {
         final TopLevelItem rightJob = createJob("rightJob");
 
         Mockito.when(leftView.getItems()).thenReturn(Arrays.asList(leftJob, sharedJob));
-        Mockito.when(rightView.getItems()).thenReturn(Arrays.asList(rightJob));
+        Mockito.when(rightView.getItems()).thenReturn(Collections.singletonList(rightJob));
 
         final TopLevelItem[] expected = new TopLevelItem[] {rootJob, sharedJob, leftJob, rightJob};
 

File: cli/src/main/java/hudson/cli/CLI.java
Patch:
@@ -719,7 +719,7 @@ class ClientSideImpl extends PlainCLIProtocol.ClientSide {
             ClientSideImpl(InputStream is, OutputStream os) throws IOException {
                 super(is, os);
                 if (is.read() != 0) { // cf. FullDuplexHttpService
-                    throw new IOException("expected to see initial zero byte");
+                    throw new IOException("expected to see initial zero byte; perhaps you are connecting to an old server which does not support -http?");
                 }
             }
             @Override

File: core/src/main/java/jenkins/util/FullDuplexHttpService.java
Patch:
@@ -153,7 +153,7 @@ public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object nod
                 // the actual authentication for the connecting Channel is done by CLICommand
 
                 UUID uuid = UUID.fromString(req.getHeader("Session"));
-                rsp.setHeader("Hudson-Duplex", ""); // set the header so that the client would know
+                rsp.setHeader("Hudson-Duplex", "true"); // set the header so that the client would know
 
                 if (req.getHeader("Side").equals("download")) {
                     FullDuplexHttpService service = createService(req, uuid);

File: cli/src/main/java/hudson/cli/CLI.java
Patch:
@@ -541,7 +541,7 @@ public boolean verify(String s, SSLSession sslSession) {
                 Level level = parse(args.get(1));
                 ConsoleHandler h = new ConsoleHandler();
                 h.setLevel(level);
-                for (Logger logger : new Logger[] {LOGGER, PlainCLIProtocol.LOGGER}) { // perhaps also Channel
+                for (Logger logger : new Logger[] {LOGGER, PlainCLIProtocol.LOGGER, Logger.getLogger("org.apache.sshd")}) { // perhaps also Channel
                     logger.setLevel(level);
                     logger.addHandler(h);
                 }

File: cli/src/main/java/hudson/cli/FullDuplexHttpStream.java
Patch:
@@ -137,8 +137,7 @@ private String readData(String dest) throws IOException {
             if (authorization != null) {
                 con.addRequestProperty("Authorization", authorization);
             }
-            try {
-                BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()));
+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()))) {
                 String line = reader.readLine();
                 String nextLine = reader.readLine();
                 if (nextLine != null) {

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -78,6 +78,7 @@
 import java.util.IdentityHashMap;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 
 /**
  * Metadata about a configurable instance.
@@ -563,7 +564,7 @@ public T newInstance(StaplerRequest req) throws FormException {
      *      Signals a problem in the submitted form.
      * @since 1.145
      */
-    public T newInstance(@CheckForNull StaplerRequest req, @Nonnull JSONObject formData) throws FormException {
+    public T newInstance(@Nullable StaplerRequest req, @Nonnull JSONObject formData) throws FormException {
         try {
             Method m = getClass().getMethod("newInstance", StaplerRequest.class);
 

File: core/src/main/java/hudson/util/jna/SHELLEXECUTEINFO.java
Patch:
@@ -26,6 +26,7 @@
 import com.sun.jna.Pointer;
 import com.sun.jna.Structure;
 import com.sun.jna.Union;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.Arrays;
 import java.util.List;
 
@@ -56,6 +57,7 @@
  * @author Kohsuke Kawaguchi
  * @see <a href="http://msdn.microsoft.com/en-us/library/bb759784(v=VS.85).aspx">MSDN: SHELLEXECUTEINFO</a>
  */
+@SuppressFBWarnings(value = "UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD", justification = "JNA Data Structure")
 public class SHELLEXECUTEINFO extends Structure {
     public int cbSize = size();
     public int fMask;
@@ -85,6 +87,7 @@ protected List getFieldOrder() {
                 "hProcess");
     }
 
+    @SuppressFBWarnings(value = "UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD", justification = "JNA Data Structure")
     public static class DUMMYUNIONNAME_union extends Union {
         public Pointer hIcon;
         public Pointer hMonitor;

File: core/src/main/java/hudson/util/jna/WINBASE.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.sun.jna.Structure;
 import com.sun.jna.Pointer;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.Arrays;
 import java.util.List;
 
@@ -33,6 +34,7 @@ public interface WINBASE {
 } SECURITY_ATTRIBUTES,
  *PSECURITY_ATTRIBUTES,
  *LPSECURITY_ATTRIBUTES;*/
+  @SuppressFBWarnings(value = "UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD", justification = "JNA Data Structure")
   class SECURITY_ATTRIBUTES extends Structure {
     public int nLength;
     public Pointer lpSecurityDescriptor;
@@ -50,6 +52,7 @@ protected List getFieldOrder() {
     DWORD dwLowDateTime;
     DWORD dwHighDateTime;
 } FILETIME, *PFILETIME, *LPFILETIME;*/
+  @SuppressFBWarnings(value = "UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD", justification = "JNA Data Structure")
   class FILETIME extends Structure {
     public int dwLowDateTime;
     public int dwHighDateTime;

File: core/src/main/java/hudson/scheduler/CronTabList.java
Patch:
@@ -131,7 +131,7 @@ public static CronTabList create(@Nonnull String format, Hash hash) throws ANTLR
     public @CheckForNull Calendar previous() {
         Calendar nearest = null;
         for (CronTab tab : tabs) {
-            Calendar scheduled = tab.floor(Calendar.getInstance());
+            Calendar scheduled = tab.floor(tab.getTimeZone() == null ? Calendar.getInstance() : Calendar.getInstance(tab.getTimeZone()));
             if (nearest == null || nearest.before(scheduled)) {
                 nearest = scheduled;
             }
@@ -143,7 +143,7 @@ public static CronTabList create(@Nonnull String format, Hash hash) throws ANTLR
     public @CheckForNull Calendar next() {
         Calendar nearest = null;
         for (CronTab tab : tabs) {
-            Calendar scheduled = tab.ceil(Calendar.getInstance());
+            Calendar scheduled = tab.ceil(tab.getTimeZone() == null ? Calendar.getInstance() : Calendar.getInstance(tab.getTimeZone()));
             if (nearest == null || nearest.after(scheduled)) {
                 nearest = scheduled;
             }

File: test/src/test/java/jenkins/util/JenkinsJVMRealTest.java
Patch:
@@ -17,7 +17,7 @@ public class JenkinsJVMRealTest {
     public static JenkinsRule j = new JenkinsRule();
 
     @Test
-    public void isJenkinsJVM() throws Exception {
+    public void isJenkinsJVM() throws Throwable {
         assertThat(new IsJenkinsJVM().call(), is(true));
         DumbSlave slave = j.createOnlineSlave();
         assertThat(slave.getChannel().call(new IsJenkinsJVM()), is(false));

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1046,6 +1046,8 @@ public List<Action> getActions() {
         return Collections.unmodifiableList(actions);
     }
 
+    // TODO implement addAction, addOrReplaceAction, removeAction, removeActions, replaceActions
+
     /**
      * Gets the {@link Node} where this project was last built on.
      *

File: core/src/main/java/hudson/model/labels/LabelAtom.java
Patch:
@@ -106,6 +106,8 @@ public List<Action> getActions() {
         return Collections.unmodifiableList(actions);
     }
 
+    // TODO implement addAction, addOrReplaceAction, removeAction, removeActions, replaceActions
+
     protected void updateTransientActions() {
         Vector<Action> ta = new Vector<Action>();
 

File: core/src/main/java/hudson/BulkChange.java
Patch:
@@ -54,7 +54,7 @@
  *
  * <ol>
  * <li>
- * Mutater methods should invoke {@code this.save()} so that if the method is called outside
+ * Mutator methods should invoke {@code this.save()} so that if the method is called outside
  * a {@link BulkChange}, the result will be saved immediately.
  *
  * <li>
@@ -78,7 +78,7 @@ public class BulkChange implements Closeable {
     public BulkChange(Saveable saveable) {
         this.parent = current();
         this.saveable = saveable;
-        // rememeber who allocated this object in case
+        // remember who allocated this object in case
         // someone forgot to call save() at the end.
         allocator = new Exception();
 

File: core/src/main/java/hudson/DependencyRunner.java
Patch:
@@ -59,7 +59,7 @@ public void run() {
             Set<AbstractProject> topLevelProjects = new HashSet<AbstractProject>();
             // Get all top-level projects
             LOGGER.fine("assembling top level projects");
-            for (AbstractProject p : Jenkins.getInstance().getAllItems(AbstractProject.class))
+            for (AbstractProject p : Jenkins.getInstance().allItems(AbstractProject.class))
                 if (p.getUpstreamProjects().size() == 0) {
                     LOGGER.fine("adding top level project " + p.getName());
                     topLevelProjects.add(p);

File: core/src/main/java/hudson/Extension.java
Patch:
@@ -74,7 +74,8 @@
     /**
      * Used for sorting extensions.
      *
-     * Extensions will be sorted in the descending order of the ordinal.
+     * Extensions will be sorted in the descending order of the ordinal. In other words,
+     * the extensions with the highest numbers will be chosen first.
      * This is a rather poor approach to the problem, so its use is generally discouraged.
      *
      * @since 1.306

File: core/src/main/java/hudson/ExtensionPoint.java
Patch:
@@ -29,6 +29,7 @@
 import java.lang.annotation.Retention;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 import java.lang.annotation.Target;
+import jenkins.util.io.OnMaster;
 
 /**
  * Marker interface that designates extensible components

File: core/src/main/java/hudson/FileSystemProvisionerDescriptor.java
Patch:
@@ -63,7 +63,7 @@ public abstract class FileSystemProvisionerDescriptor extends Descriptor<FileSys
      * @param listener
      *      The status of the operation, error message, etc., should go here.
      * @return
-     *      true if this {@link FileSystemProvisionerDescriptor} is responsible for de-alocating the workspace.
+     *      true if this {@link FileSystemProvisionerDescriptor} is responsible for de-allocating the workspace.
      *      false otherwise, in which case the other {@link FileSystemProvisionerDescriptor}s are asked to
      *      clean up the workspace.
      */

File: core/src/main/java/hudson/LocalPluginManager.java
Patch:
@@ -70,7 +70,7 @@ public LocalPluginManager(@NonNull File rootDir) {
      * If the war file has any "/WEB-INF/plugins/*.jpi", extract them into the plugin directory.
      *
      * @return
-     *      File names of the bundled plugins. Like {"ssh-slaves.jpi","subvesrion.jpi"}
+     *      File names of the bundled plugins. Like {"ssh-slaves.jpi","subversion.jpi"}
      */
     @Override
     protected Collection<String> loadBundledPlugins() {

File: core/src/main/java/hudson/Main.java
Patch:
@@ -133,7 +133,7 @@ public static int remotePost(String[] args) throws Exception {
         }
 
         // write the output to a temporary file first.
-        File tmpFile = File.createTempFile("hudson","log");
+        File tmpFile = File.createTempFile("jenkins","log");
         try {
             FileOutputStream os = new FileOutputStream(tmpFile);
 

File: core/src/main/java/hudson/Plugin.java
Patch:
@@ -53,8 +53,8 @@
  * <p>
  * A plugin may {@linkplain #Plugin derive from this class}, or it may directly define extension
  * points annotated with {@link hudson.Extension}. For a list of extension
- * points, see <a href="https://wiki.jenkins-ci.org/display/JENKINS/Extension+points">
- * https://wiki.jenkins-ci.org/display/JENKINS/Extension+points</a>.
+ * points, see <a href="https://jenkins.io/redirect/developer/extension-points">
+ * https://jenkins.io/redirect/developer/extension-points</a>.
  *
  * <p>
  * One instance of a plugin is created by Hudson, and used as the entry point
@@ -280,7 +280,7 @@ public void save() throws IOException {
      * Controls the file where {@link #load()} and {@link #save()}
      * persists data.
      *
-     * This method can be also overriden if the plugin wants to
+     * This method can be also overridden if the plugin wants to
      * use a custom {@link XStream} instance to persist data.
      *
      * @since 1.245

File: core/src/main/java/hudson/ProxyConfiguration.java
Patch:
@@ -205,7 +205,7 @@ public void save() throws IOException {
 
     public Object readResolve() {
         if (secretPassword == null)
-            // backward compatibility : get crambled password and store it encrypted
+            // backward compatibility : get scrambled password and store it encrypted
             secretPassword = Secret.fromString(Scrambler.descramble(password));
         password = null;
         return this;

File: core/src/main/java/hudson/TcpSlaveAgentListener.java
Patch:
@@ -170,6 +170,7 @@ public void shutdown() {
             if (localAddress instanceof InetSocketAddress) {
                 InetSocketAddress address = (InetSocketAddress) localAddress;
                 Socket client = new Socket(address.getHostName(), address.getPort());
+                client.setSoTimeout(1000); // waking the acceptor loop should be quick
                 new PingAgentProtocol().connect(client);
             }
         } catch (IOException e) {

File: core/src/main/java/hudson/UDPBroadcastThread.java
Patch:
@@ -24,7 +24,7 @@
 package hudson;
 
 import jenkins.util.SystemProperties;
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.Hudson;
 import jenkins.model.Jenkins;
 import hudson.util.OneShotEvent;
@@ -71,7 +71,7 @@ public UDPBroadcastThread(Jenkins jenkins) throws IOException {
         mcs = new MulticastSocket(PORT);
     }
 
-    @SuppressWarnings("ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD")
+    @SuppressFBWarnings("ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD")
     @Override
     public void run() {
         try {

File: core/src/main/java/hudson/cli/BuildCommand.java
Patch:
@@ -147,7 +147,7 @@ protected int run() throws Exception {
             SCMTriggerItem item = SCMTriggerItem.SCMTriggerItems.asSCMTriggerItem(job);
             if (item == null)
                 throw new AbortException(job.getFullDisplayName()+" has no SCM trigger, but checkSCM was specified");
-            // pre-emtively check for a polling veto
+            // preemptively check for a polling veto
             if (SCMDecisionHandler.firstShouldPollVeto(job) != null) {
                 return 0;
             }

File: core/src/main/java/hudson/cli/CLIAction.java
Patch:
@@ -63,12 +63,11 @@ public String getIconFileName() {
     }
 
     public String getDisplayName() {
-
         return "Jenkins CLI";
     }
 
     public String getUrlName() {
-        return "cli";
+        return jenkins.CLI.DISABLED ? null : "cli";
     }
 
     public void doCommand(StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {

File: core/src/main/java/hudson/cli/CancelQuietDownCommand.java
Patch:
@@ -33,7 +33,7 @@
  * Cancel previous quiet down Jenkins - preparation for a restart
  *
  * @author pjanouse
- * @since TODO
+ * @since 2.14
  */
 @Extension
 public class CancelQuietDownCommand extends CLICommand {

File: core/src/main/java/hudson/cli/ClearQueueCommand.java
Patch:
@@ -34,7 +34,7 @@
  * Clears the build queue
  *
  * @author pjanouse
- * @since TODO
+ * @since 1.654
  */
 @Extension
 public class ClearQueueCommand extends CLICommand {

File: core/src/main/java/hudson/cli/CliProtocol.java
Patch:
@@ -42,7 +42,7 @@ public boolean isOptIn() {
 
     @Override
     public String getName() {
-        return "CLI-connect";
+        return jenkins.CLI.DISABLED ? null : "CLI-connect";
     }
 
     /**

File: core/src/main/java/hudson/cli/CliProtocol2.java
Patch:
@@ -25,7 +25,7 @@
 public class CliProtocol2 extends CliProtocol {
     @Override
     public String getName() {
-        return "CLI2-connect";
+        return jenkins.CLI.DISABLED ? null : "CLI2-connect";
     }
 
     /**

File: core/src/main/java/hudson/cli/DeleteJobCommand.java
Patch:
@@ -34,8 +34,9 @@
 import java.util.logging.Logger;
 
 /**
+ * CLI command, which deletes a job or multiple jobs.
  * @author pjanouse
- * @since TODO
+ * @since 1.618
  */
 @Extension
 public class DeleteJobCommand extends CLICommand {
@@ -83,7 +84,7 @@ protected int run() throws Exception {
         }
 
         if (errorOccurred) {
-            throw new AbortException("Error occured while performing this command, see previous stderr output.");
+            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);
         }
         return 0;
     }

File: core/src/main/java/hudson/cli/DeleteViewCommand.java
Patch:
@@ -95,7 +95,7 @@ protected int run() throws Exception {
         }
 
         if (errorOccurred) {
-            throw new AbortException("Error occured while performing this command, see previous stderr output.");
+            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);
         }
         return 0;
     }

File: core/src/main/java/hudson/cli/GroovyshCommand.java
Patch:
@@ -96,7 +96,7 @@ protected Groovysh createShell(InputStream stdin, PrintStream stdout,
             private static final long serialVersionUID = 1L;
 
             @SuppressWarnings("unused")
-            @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
+            @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
             public Object doCall(Object[] args) {
                 assert(args.length == 1);
                 assert(args[0] instanceof Shell);
@@ -119,7 +119,7 @@ public Object doCall(Object[] args) {
             private static final long serialVersionUID = 1L;
 
             @SuppressWarnings("unused")
-            @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
+            @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
             public Object doCall(Object[] args) throws ChannelClosedException {
                 if (args.length == 1 && args[0] instanceof ChannelClosedException) {
                     throw (ChannelClosedException)args[0];

File: core/src/main/java/hudson/cli/OfflineNodeCommand.java
Patch:
@@ -39,8 +39,9 @@
 import java.util.List;
 
 /**
+ * CLI Command, which puts the Jenkins node offline.
  * @author pjanouse
- * @since TODO
+ * @since 2.15
  */
 @Extension
 public class OfflineNodeCommand extends CLICommand {
@@ -88,7 +89,7 @@ protected int run() throws Exception {
         }
 
         if (errorOccurred) {
-            throw new AbortException("Error occured while performing this command, see previous stderr output.");
+            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);
         }
         return 0;
     }

File: core/src/main/java/hudson/cli/OnlineNodeCommand.java
Patch:
@@ -37,8 +37,9 @@
 import java.util.List;
 
 /**
+ * CLI Command, which moves the node to the online state.
  * @author pjanouse
- * @since TODO
+ * @since 1.642
  */
 @Extension
 public class OnlineNodeCommand extends CLICommand {
@@ -86,7 +87,7 @@ protected int run() throws Exception {
         }
 
         if (errorOccurred){
-            throw new AbortException("Error occured while performing this command, see previous stderr output.");
+            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);
         }
         return 0;
     }

File: core/src/main/java/hudson/cli/QuietDownCommand.java
Patch:
@@ -34,7 +34,7 @@
  * Quiet down Jenkins - preparation for a restart
  *
  * @author pjanouse
- * @since TODO
+ * @since 2.14
  */
 @Extension
 public class QuietDownCommand extends CLICommand {

File: core/src/main/java/hudson/cli/ReloadConfigurationCommand.java
Patch:
@@ -28,10 +28,10 @@
 import jenkins.model.Jenkins;
 
 /**
- * Reload everything from file system
+ * Reload everything from the file system.
  *
  * @author pjanouse
- * @since TODO
+ * @since 2.4
  */
 @Extension
 public class ReloadConfigurationCommand extends CLICommand {

File: core/src/main/java/hudson/cli/ReloadJobCommand.java
Patch:
@@ -38,8 +38,9 @@
 import java.util.logging.Logger;
 
 /**
+ * Reloads job from the disk.
  * @author pjanouse
- * @since TODO
+ * @since 1.633
  */
 @Extension
 public class ReloadJobCommand extends CLICommand {
@@ -100,7 +101,7 @@ protected int run() throws Exception {
         }
 
         if (errorOccurred) {
-            throw new AbortException("Error occured while performing this command, see previous stderr output.");
+            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);
         }
         return 0;
     }

File: core/src/main/java/hudson/cli/WaitNodeOfflineCommand.java
Patch:
@@ -28,8 +28,9 @@
 import org.kohsuke.args4j.Argument;
 
 /**
+ * CLI command, which waits till the node switches to the offline state.
  * @author pjanouse
- * @since TODO
+ * @since 2.16
  */
 @Extension
 public class WaitNodeOfflineCommand extends CLICommand {

File: core/src/main/java/hudson/cli/WaitNodeOnlineCommand.java
Patch:
@@ -28,8 +28,9 @@
 import org.kohsuke.args4j.Argument;
 
 /**
+ * CLI command, which waits till the node switches to the online state.
  * @author pjanouse
- * @since TODO
+ * @since 2.16
  */
 @Extension
 public class WaitNodeOnlineCommand extends CLICommand {

File: core/src/main/java/hudson/cli/declarative/CLIRegisterer.java
Patch:
@@ -27,6 +27,7 @@
 import hudson.Extension;
 import hudson.ExtensionComponent;
 import hudson.ExtensionFinder;
+import hudson.Functions;
 import hudson.Util;
 import hudson.cli.CLICommand;
 import hudson.cli.CloneableCLICommand;
@@ -269,7 +270,7 @@ public int main(List<String> args, Locale locale, InputStream stdin, PrintStream
                                 stderr.println("");
                                 stderr.println("ERROR: " + errorMsg);
                                 LOGGER.log(Level.WARNING, errorMsg, e);
-                                e.printStackTrace(stderr);
+                                Functions.printStackTrace(e, stderr);
                                 return 1;
                             }
                         }

File: core/src/main/java/hudson/cli/handlers/ViewOptionHandler.java
Patch:
@@ -88,8 +88,8 @@ public int parseArguments(Parameters params) throws CmdLineException {
      * @throws IllegalStateException
      *      If cannot get active Jenkins instance or view can't contain a views
      * @throws AccessDeniedException
-     *      If user doens't have a READ permission for the view
-     * @since TODO
+     *      If user doesn't have a READ permission for the view
+     * @since 1.618
      */
     @CheckForNull
     public View getView(final String name) {

File: core/src/main/java/hudson/diagnosis/HudsonHomeDiskUsageChecker.java
Patch:
@@ -64,10 +64,10 @@ protected void doRun() {
     private static final Logger LOGGER = Logger.getLogger(HudsonHomeDiskUsageChecker.class.getName());
 
     /**
-     * Gets the minimum amount of space to check for, with a default of 1GB
+     * Gets the minimum amount of space to check for, with a default of 10GB
      */
     public static long FREE_SPACE_THRESHOLD = Long.getLong(
             HudsonHomeDiskUsageChecker.class.getName() + ".freeSpaceThreshold",
-            1024L*1024*1024);
+            1024L*1024*1024*10);
 
 }

File: core/src/main/java/hudson/diagnosis/HudsonHomeDiskUsageMonitor.java
Patch:
@@ -32,6 +32,7 @@
 import org.kohsuke.stapler.HttpResponse;
 import org.kohsuke.stapler.HttpResponses;
 import org.kohsuke.stapler.QueryParameter;
+import org.kohsuke.stapler.interceptor.RequirePOST;
 
 import java.io.IOException;
 import java.util.List;
@@ -64,6 +65,7 @@ public String getDisplayName() {
     /**
      * Depending on whether the user said "yes" or "no", send him to the right place.
      */
+    @RequirePOST
     public HttpResponse doAct(@QueryParameter String no) throws IOException {
         if(no!=null) {
             disable(true);

File: core/src/main/java/hudson/diagnosis/OldDataMonitor.java
Patch:
@@ -52,6 +52,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
+
 import jenkins.model.Jenkins;
 import org.acegisecurity.context.SecurityContext;
 import org.acegisecurity.context.SecurityContextHolder;

File: core/src/main/java/hudson/init/impl/InitialUserContent.java
Patch:
@@ -42,7 +42,7 @@ public static void init(Jenkins h) throws IOException {
         File userContentDir = new File(h.getRootDir(), "userContent");
         if(!userContentDir.exists()) {
             userContentDir.mkdirs();
-            FileUtils.writeStringToFile(new File(userContentDir,"readme.txt"), Messages.Hudson_USER_CONTENT_README());
+            FileUtils.writeStringToFile(new File(userContentDir,"readme.txt"), Messages.Hudson_USER_CONTENT_README() + "\n");
         }
     }
 }

File: core/src/main/java/hudson/init/impl/InstallUncaughtExceptionHandler.java
Patch:
@@ -45,7 +45,7 @@ public void reportException(Throwable e, ServletContext context, HttpServletRequ
                                                        "Failed to set the default UncaughtExceptionHandler.  " + 
                                                        "If any threads die due to unhandled coding errors then there will be no logging of this information.  " +
                                                        "The lack of this diagnostic information will make it harder to track down issues which will reduce the supportability of Jenkins.  " + 
-                                                       "It is highly recomended that you consult the documentation that comes with you servlet container on how to allow the " + 
+                                                       "It is highly recommended that you consult the documentation that comes with you servlet container on how to allow the " + 
                                                        "`setDefaultUncaughtExceptionHandler` permission and enable it.", ex);
         }
     }

File: core/src/main/java/hudson/init/package-info.java
Patch:
@@ -33,7 +33,7 @@
  *
  * <p>
  * Such micro-scopic dependencies are organized into a bigger directed acyclic graph, which is then executed
- * via <tt>Session</tt>. During execution of the reactor, additional tasks can be discovred and added to
+ * via <tt>Session</tt>. During execution of the reactor, additional tasks can be discovered and added to
  * the DAG. We use this additional indirection to:
  *
  * <ol>

File: core/src/main/java/hudson/lifecycle/WindowsInstallerLink.java
Patch:
@@ -306,9 +306,9 @@ static int runElevated(File jenkinsExe, String command, TaskListener out, File p
         try {
             return Kernel32Utils.waitForExitProcess(sei.hProcess);
         } finally {
-            FileInputStream fin = new FileInputStream(new File(pwd,"redirect.log"));
-            IOUtils.copy(fin, out.getLogger());
-            fin.close();
+            try (FileInputStream fin = new FileInputStream(new File(pwd,"redirect.log"))) {
+                IOUtils.copy(fin, out.getLogger());
+            }
         }
     }
 

File: core/src/main/java/hudson/logging/LogRecorderManager.java
Patch:
@@ -129,7 +129,7 @@ public ContextMenu doChildrenContextMenu(StaplerRequest request, StaplerResponse
     /**
      * Configure the logging level.
      */
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE")
+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings("LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE")
     public HttpResponse doConfigLogger(@QueryParameter String name, @QueryParameter String level) {
         Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         Level lv;

File: core/src/main/java/hudson/model/AsyncAperiodicWork.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import hudson.Functions;
 import hudson.security.ACL;
 import hudson.util.StreamTaskListener;
 import java.io.File;
@@ -119,9 +120,9 @@ public void run() {
 
                         execute(l);
                     } catch (IOException e) {
-                        e.printStackTrace(l.fatalError(e.getMessage()));
+                        Functions.printStackTrace(e, l.fatalError(e.getMessage()));
                     } catch (InterruptedException e) {
-                        e.printStackTrace(l.fatalError("aborted"));
+                        Functions.printStackTrace(e, l.fatalError("aborted"));
                     } finally {
                         stopTime = System.currentTimeMillis();
                         try {

File: core/src/main/java/hudson/model/AsyncPeriodicWork.java
Patch:
@@ -1,5 +1,6 @@
 package hudson.model;
 
+import hudson.Functions;
 import hudson.security.ACL;
 import hudson.util.StreamTaskListener;
 import java.io.File;
@@ -99,9 +100,9 @@ public void run() {
 
                         execute(l);
                     } catch (IOException e) {
-                        e.printStackTrace(l.fatalError(e.getMessage()));
+                        Functions.printStackTrace(e, l.fatalError(e.getMessage()));
                     } catch (InterruptedException e) {
-                        e.printStackTrace(l.fatalError("aborted"));
+                        Functions.printStackTrace(e, l.fatalError("aborted"));
                     } finally {
                         stopTime = System.currentTimeMillis();
                         try {

File: core/src/main/java/hudson/model/Build.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import hudson.Functions;
 import hudson.Launcher;
 import hudson.tasks.BuildStep;
 import hudson.tasks.BuildWrapper;
@@ -195,7 +196,7 @@ public void cleanUp(@Nonnull BuildListener listener) throws Exception {
                 performAllBuildSteps(listener, project.getPublishersList(), false);
                 performAllBuildSteps(listener, project.getProperties(), false);
             } catch (Exception x) {
-                x.printStackTrace(listener.error(Messages.Build_post_build_steps_failed()));
+                Functions.printStackTrace(x, listener.error(Messages.Build_post_build_steps_failed()));
             }
             super.cleanUp(listener);
         }

File: core/src/main/java/hudson/model/ChoiceParameterDefinition.java
Patch:
@@ -105,7 +105,7 @@ public String getHelpFile() {
         }
 
         /**
-         * Checks if parameterised build choices are valid.
+         * Checks if parameterized build choices are valid.
          */
         public FormValidation doCheckChoices(@QueryParameter String value) {
             if (ChoiceParameterDefinition.areValidChoices(value)) {

File: core/src/main/java/hudson/model/ComputerSet.java
Patch:
@@ -413,7 +413,7 @@ public void doRun() {
 
     /**
      * @return The list of strings of computer names (excluding master)
-     * @since TODO
+     * @since 2.14
      */
     @Nonnull
     public static List<String> getComputerNames() {

File: core/src/main/java/hudson/model/FingerprintCleanupThread.java
Patch:
@@ -25,6 +25,7 @@
 
 import hudson.Extension;
 import hudson.ExtensionList;
+import hudson.Functions;
 import jenkins.model.Jenkins;
 import org.jenkinsci.Symbol;
 
@@ -113,7 +114,7 @@ private boolean check(File fingerprintFile, TaskListener listener) {
                 return fp.trim();
             }
         } catch (IOException e) {
-            e.printStackTrace(listener.error("Failed to process " + fingerprintFile));
+            Functions.printStackTrace(e, listener.error("Failed to process " + fingerprintFile));
             return false;
         }
     }

File: core/src/main/java/hudson/model/Item.java
Patch:
@@ -27,6 +27,7 @@
 import hudson.Functions;
 import jenkins.util.SystemProperties;
 import hudson.security.PermissionScope;
+import jenkins.util.io.OnMaster;
 import org.kohsuke.stapler.StaplerRequest;
 
 import java.io.IOException;
@@ -67,7 +68,7 @@
  * @see Items
  * @see ItemVisitor
  */
-public interface Item extends PersistenceRoot, SearchableModelObject, AccessControlled {
+public interface Item extends PersistenceRoot, SearchableModelObject, AccessControlled, OnMaster {
     /**
      * Gets the parent that contains this item.
      */
@@ -230,7 +231,7 @@ public interface Item extends PersistenceRoot, SearchableModelObject, AccessCont
     Permission DISCOVER = new Permission(PERMISSIONS, "Discover", Messages._AbstractProject_DiscoverPermission_Description(), READ, PermissionScope.ITEM);
     /**
      * Ability to view configuration details.
-     * If the user lacks {@link CONFIGURE} then any {@link Secret}s must be masked out, even in encrypted form.
+     * If the user lacks {@link #CONFIGURE} then any {@link Secret}s must be masked out, even in encrypted form.
      * @see Secret#ENCRYPTED_VALUE_PATTERN
      */
     Permission EXTENDED_READ = new Permission(PERMISSIONS,"ExtendedRead", Messages._AbstractProject_ExtendedReadPermission_Description(), CONFIGURE, SystemProperties.getBoolean("hudson.security.ExtendedReadPermission"), new PermissionScope[]{PermissionScope.ITEM});

File: core/src/main/java/hudson/model/JobPropertyDescriptor.java
Patch:
@@ -91,7 +91,7 @@ public boolean isApplicable(Class<? extends Job> jobType) {
             Class applicable = Types.erasure(Types.getTypeArgument(pt, 0));
             return applicable.isAssignableFrom(jobType);
         } else {
-            throw new AssertionError(clazz+" doesn't properly parameterize JobProperty. The isApplicable() method must be overriden.");
+            throw new AssertionError(clazz+" doesn't properly parameterize JobProperty. The isApplicable() method must be overridden.");
         }
     }
 

File: core/src/main/java/hudson/model/PageDecorator.java
Patch:
@@ -35,7 +35,7 @@
  * Participates in the rendering of HTML pages for all pages of Hudson.
  *
  * <p>
- * This class provides a few hooks to augument the HTML generation process of Hudson, across
+ * This class provides a few hooks to augment the HTML generation process of Hudson, across
  * all the HTML pages that Hudson delivers.
  *
  * <p>

File: core/src/main/java/hudson/model/ParameterDefinition.java
Patch:
@@ -79,7 +79,7 @@
  * through XStream.
  *
  *
- * <h2>Assocaited Views</h2>
+ * <h2>Associated Views</h2>
  * <h4>config.jelly</h4>
  * <p>
  * {@link ParameterDefinition} class uses <tt>config.jelly</tt> to contribute a form

File: core/src/main/java/hudson/model/PermalinkProjectAction.java
Patch:
@@ -49,7 +49,7 @@ public interface PermalinkProjectAction extends Action {
      *
      * <p>
      * Because {@link Permalink} is a strategy-pattern object,
-     * this method should normally return a pre-initialzied
+     * this method should normally return a pre-initialized
      * read-only static list object.  
      *
      * @return

File: core/src/main/java/hudson/model/TaskAction.java
Patch:
@@ -49,7 +49,7 @@
  */
 public abstract class TaskAction extends AbstractModelObject implements Action {
     /**
-     * If non-null, that means either the activitiy is in progress
+     * If non-null, that means either the activity is in progress
      * asynchronously, or it failed unexpectedly and the thread is dead.
      */
     protected transient volatile TaskThread workerThread;

File: core/src/main/java/hudson/model/TaskThread.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import hudson.Functions;
 import hudson.console.AnnotatedLargeText;
 import hudson.util.StreamTaskListener;
 
@@ -131,7 +132,7 @@ public final void run() {
         } catch (InterruptedException e) {
             listener.getLogger().println("Aborted");
         } catch (Exception e) {
-            e.printStackTrace(listener.getLogger());
+            Functions.printStackTrace(e, listener.getLogger());
         } finally {
             listener = null;
             isRunning =false;

File: core/src/main/java/hudson/model/UserProperty.java
Patch:
@@ -58,7 +58,7 @@ public abstract class UserProperty implements ReconfigurableDescribable<UserProp
      */
     protected transient User user;
 
-    /*package*/ final void setUser(User u) {
+    protected void setUser(User u) {
         this.user = u;
     }
 

File: core/src/main/java/hudson/model/listeners/SCMListener.java
Patch:
@@ -51,7 +51,7 @@
  * This is an abstract class so that methods added in the future won't break existing listeners.
  *
  * <p>
- * Once instanciated, use the {@link #register()} method to start receiving events. 
+ * Once instantiated, use the {@link #register()} method to start receiving events. 
  *
  * @author Kohsuke Kawaguchi
  * @see jenkins.model.Jenkins#getSCMListeners()

File: core/src/main/java/hudson/node_monitors/AbstractAsyncNodeMonitorDescriptor.java
Patch:
@@ -23,7 +23,7 @@
  * performs monitoring on all agents concurrently and asynchronously.
  *
  * @param <T>
- *     represents the the result of the monitoring.
+ *     represents the result of the monitoring.
  * @author Kohsuke Kawaguchi
  */
 public abstract class AbstractAsyncNodeMonitorDescriptor<T> extends AbstractNodeMonitorDescriptor<T> {

File: core/src/main/java/hudson/node_monitors/AbstractNodeMonitorDescriptor.java
Patch:
@@ -49,7 +49,7 @@
  * and taking some action based on its result.
  *
  * @param <T>
- *     represents the the result of the monitoring.
+ *     represents the result of the monitoring.
  * @author Kohsuke Kawaguchi
  */
 public abstract class AbstractNodeMonitorDescriptor<T> extends Descriptor<NodeMonitor> {

File: core/src/main/java/hudson/org/apache/tools/tar/TarInputStream.java
Patch:
@@ -53,7 +53,7 @@ public class TarInputStream extends FilterInputStream {
 
     /**
      * This contents of this array is not used at all in this class,
-     * it is only here to avoid repreated object creation during calls
+     * it is only here to avoid repeated object creation during calls
      * to the no-arg read method.
      */
     protected byte[] oneBuf;
@@ -126,7 +126,7 @@ public int getRecordSize() {
      * is left in the entire archive, only in the current entry.
      * This value is determined from the entry's size header field
      * and the amount of data already read from the current entry.
-     * Integer.MAX_VALUE is returen in case more than Integer.MAX_VALUE
+     * Integer.MAX_VALUE is returned in case more than Integer.MAX_VALUE
      * bytes are left in the current entry in the archive.
      *
      * @return The number of available bytes for the current entry.
@@ -246,7 +246,7 @@ public TarEntry getNextEntry() throws IOException {
             this.currEntry = new TarEntry(headerBuf);
 
             if (this.debug) {
-                System.err.println("TarInputStream: SET CURRENTRY '"
+                System.err.println("TarInputStream: SET currENTRY '"
                         + this.currEntry.getName()
                         + "' size = "
                         + this.currEntry.getSize());

File: core/src/main/java/hudson/os/SU.java
Patch:
@@ -152,7 +152,7 @@ VirtualChannel start(TaskListener listener, String rootPassword) throws IOExcept
             ArgumentListBuilder args = new ArgumentListBuilder().add(javaExe);
             if(slaveJar.isFile())
                 args.add("-jar").add(slaveJar);
-            else // in production code this never happens, but during debugging this is convenientud    
+            else // in production code this never happens, but during debugging this is convenient    
                 args.add("-cp").add(slaveJar).add(hudson.remoting.Launcher.class.getName());
 
             if(rootPassword==null) {

File: core/src/main/java/hudson/os/solaris/ZFSInstaller.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.Launcher.LocalLauncher;
 import hudson.Util;
 import hudson.Extension;
+import hudson.Functions;
 import jenkins.util.SystemProperties;
 import hudson.os.SU;
 import hudson.model.AdministrativeMonitor;
@@ -228,7 +229,7 @@ public void doStart(StaplerRequest req, StaplerResponse rsp, @QueryParameter Str
         try {
             datasetName = createZfsFileSystem(listener,username,password);
         } catch (Exception e) {
-            e.printStackTrace(listener.error(e.getMessage()));
+            Functions.printStackTrace(e, listener.error(e.getMessage()));
 
             if (e instanceof ZFSException) {
                 ZFSException ze = (ZFSException) e;
@@ -292,7 +293,7 @@ public static AdministrativeMonitor init() {
                 }
             } catch (Exception e) {
                 // if we let any exception from here, it will prevent Hudson from starting.
-                e.printStackTrace(listener.error("Migration failed"));
+                Functions.printStackTrace(e, listener.error("Migration failed"));
             }
             // migration failed
             return new MigrationFailedNotice(out);

File: core/src/main/java/hudson/scheduler/BaseParser.java
Patch:
@@ -37,7 +37,7 @@
  * @author Kohsuke Kawaguchi
  */
 abstract class BaseParser extends LLkParser {
-    // lower/uppser bounds of fields (inclusive)
+    // lower/upper bounds of fields (inclusive)
     static final int[] LOWER_BOUNDS = new int[] {0,0,1,1,0};
     static final int[] UPPER_BOUNDS = new int[] {59,23,31,12,7};
 

File: core/src/main/java/hudson/scm/AutoBrowserHolder.java
Patch:
@@ -76,7 +76,7 @@ public RepositoryBrowser get() {
      *      null if no applicable configuration was found.
      */
     private RepositoryBrowser infer() {
-        for( AbstractProject p : Jenkins.getInstance().getAllItems(AbstractProject.class) ) {
+        for( AbstractProject p : Jenkins.getInstance().allItems(AbstractProject.class) ) {
             SCM scm = p.getScm();
             if (scm!=null && scm.getClass()==owner.getClass() && scm.getBrowser()!=null &&
                     ((SCMDescriptor)scm.getDescriptor()).isBrowserReusable(scm,owner)) {

File: core/src/main/java/hudson/scm/SCM.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.Extension;
 import hudson.ExtensionPoint;
 import hudson.FilePath;
+import hudson.Functions;
 import hudson.Launcher;
 import hudson.Util;
 import hudson.model.AbstractBuild;
@@ -673,7 +674,7 @@ protected final boolean createEmptyChangeLog(File changelogFile, BuildListener l
             createEmptyChangeLog(changelogFile, (TaskListener) listener, rootTag);
             return true;
         } catch (IOException e) {
-            e.printStackTrace(listener.error(e.getMessage()));
+            Functions.printStackTrace(e, listener.error(e.getMessage()));
             return false;
         }
     }

File: core/src/main/java/hudson/security/BasicAuthenticationFilter.java
Patch:
@@ -43,12 +43,12 @@
 import java.net.URLEncoder;
 
 /**
- * Implements the dual authentcation mechanism.
+ * Implements the dual authentication mechanism.
  *
  * <p>
  * Jenkins supports both the HTTP basic authentication and the form-based authentication.
  * The former is for scripted clients, and the latter is for humans. Unfortunately,
- * because the servlet spec does not allow us to programatically authenticate users,
+ * because the servlet spec does not allow us to programmatically authenticate users,
  * we need to rely on some hack to make it work, and this is the class that implements
  * that hack.
  *

File: core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
Patch:
@@ -60,7 +60,6 @@
 import org.kohsuke.stapler.Stapler;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
-import org.mindrot.jbcrypt.BCrypt;
 import org.springframework.dao.DataAccessException;
 
 import javax.servlet.Filter;

File: core/src/main/java/hudson/security/Permission.java
Patch:
@@ -314,7 +314,7 @@ public boolean getEnabled() {
 //
 // Root Permissions.
 //
-// These permisisons are meant to be used as the 'impliedBy' permission for other more specific permissions.
+// These permissions are meant to be used as the 'impliedBy' permission for other more specific permissions.
 // The intention is to allow a simplified AuthorizationStrategy implementation agnostic to
 // specific permissions.
 

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -494,7 +494,7 @@ public Filter createFilter(FilterConfig filterConfig) {
      * @return Encoded URI where we should go back after successful login
      *         or "/" if no way back or an issue occurred
      *
-     * @since TODO
+     * @since 2.4
      */
     @Restricted(DoNotUse.class)
     public static String getFrom() {

File: core/src/main/java/hudson/slaves/ComputerLauncher.java
Patch:
@@ -82,7 +82,7 @@ public boolean isLaunchSupported() {
      * @throws IOException
      *      if the method throws an {@link IOException} or {@link InterruptedException}, the launch was considered
      *      a failure and the stack trace is reported into the listener. This handling is just so that the implementation
-     *      of this method doesn't have to dilligently catch those exceptions.
+     *      of this method doesn't have to diligently catch those exceptions.
      */
     public void launch(SlaveComputer computer, TaskListener listener) throws IOException , InterruptedException {
         // to remain compatible with the legacy implementation that overrides the old signature
@@ -197,7 +197,7 @@ protected static void checkJavaVersion(final PrintStream logger, String javaComm
                 return;
             }
         }
-        logger.println(Messages.ComputerLauncher_UknownJavaVersion(javaCommand));
-        throw new IOException(Messages.ComputerLauncher_UknownJavaVersion(javaCommand));
+        logger.println(Messages.ComputerLauncher_UnknownJavaVersion(javaCommand));
+        throw new IOException(Messages.ComputerLauncher_UnknownJavaVersion(javaCommand));
     }
 }

File: core/src/main/java/hudson/slaves/ComputerListener.java
Patch:
@@ -143,7 +143,7 @@ public void onOnline(Computer c) {}
      * Starting Hudson 1.312, this method is also invoked for the master, not just for agents.
      *
      * @param listener
-     *      This is connected to the launch log of the computer.
+     *      This is connected to the launch log of the computer or Jenkins master.
      *      Since this method is called synchronously from the thread
      *      that launches a computer, if this method performs a time-consuming
      *      operation, this listener should be notified of the progress.

File: core/src/main/java/hudson/slaves/NodeDescriptor.java
Patch:
@@ -99,7 +99,7 @@ public String getConfigPage() {
     public FormValidation doCheckName(@QueryParameter String value ) {
         String name = Util.fixEmptyAndTrim(value);
         if(name==null)
-            return FormValidation.error(Messages.NodeDescripter_CheckName_Mandatory());
+            return FormValidation.error(Messages.NodeDescriptor_CheckName_Mandatory());
         try {
             Jenkins.checkGoodName(name);
         } catch (Failure f) {

File: core/src/main/java/hudson/slaves/NodeSpecific.java
Patch:
@@ -24,10 +24,11 @@
 
 package hudson.slaves;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
 import hudson.model.Node;
 import hudson.model.EnvironmentSpecific;
 import hudson.model.TaskListener;
+
+import javax.annotation.Nonnull;
 import java.io.IOException;
 
 /**
@@ -45,5 +46,5 @@ public interface NodeSpecific<T extends NodeSpecific<T>> {
     /**
      * Returns a specialized copy of T for functioning in the given node.
      */
-    T forNode(@NonNull Node node, TaskListener log) throws IOException, InterruptedException;
+    T forNode(@Nonnull Node node, TaskListener log) throws IOException, InterruptedException;
 }

File: core/src/main/java/hudson/slaves/RetentionStrategy.java
Patch:
@@ -181,7 +181,7 @@ public static class Demand extends RetentionStrategy<SlaveComputer> {
         private static final Logger logger = Logger.getLogger(Demand.class.getName());
 
         /**
-         * The delay (in minutes) for which the agent must be in demand before tring to launch it.
+         * The delay (in minutes) for which the agent must be in demand before trying to launch it.
          */
         private final long inDemandDelay;
 

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -29,6 +29,7 @@
 import hudson.Launcher;
 import hudson.Util;
 import hudson.Extension;
+import hudson.Functions;
 import jenkins.util.SystemProperties;
 import hudson.model.AbstractProject;
 import hudson.model.Result;
@@ -266,8 +267,7 @@ public void perform(Run<?,?> build, FilePath ws, Launcher launcher, TaskListener
             }
         } catch (IOException e) {
             Util.displayIOException(e,listener);
-            e.printStackTrace(listener.error(
-                    Messages.ArtifactArchiver_FailedToArchive(artifacts)));
+            Functions.printStackTrace(e, listener.error(Messages.ArtifactArchiver_FailedToArchive(artifacts)));
             build.setResult(Result.FAILURE);
             return;
         }
@@ -352,7 +352,7 @@ public boolean isApplicable(Class<? extends AbstractProject> jobType) {
     @Extension public static final class Migrator extends ItemListener {
         @SuppressWarnings("deprecation")
         @Override public void onLoaded() {
-            for (AbstractProject<?,?> p : Jenkins.getInstance().getAllItems(AbstractProject.class)) {
+            for (AbstractProject<?,?> p : Jenkins.getInstance().allItems(AbstractProject.class)) {
                 try {
                     ArtifactArchiver aa = p.getPublishersList().get(ArtifactArchiver.class);
                     if (aa != null && aa.latestOnly != null) {

File: core/src/main/java/hudson/tasks/BuildTrigger.java
Patch:
@@ -420,7 +420,7 @@ public void onLocationChanged(final Item item, final String oldFullName, final S
             private void locationChanged(Item item, String oldFullName, String newFullName) {
                 // update BuildTrigger of other projects that point to this object.
                 // can't we generalize this?
-                for( Project<?,?> p : Jenkins.getInstance().getAllItems(Project.class) ) {
+                for( Project<?,?> p : Jenkins.getInstance().allItems(Project.class) ) {
                     BuildTrigger t = p.getPublishersList().get(BuildTrigger.class);
                     if(t!=null) {
                         String cp2 = Items.computeRelativeNamesAfterRenaming(oldFullName, newFullName, t.childProjects, p.getParent());

File: core/src/main/java/hudson/tasks/Fingerprinter.java
Patch:
@@ -27,6 +27,7 @@
 import hudson.EnvVars;
 import hudson.Extension;
 import hudson.FilePath;
+import hudson.Functions;
 import jenkins.MasterToSlaveFileCallable;
 import hudson.Launcher;
 import jenkins.util.SystemProperties;
@@ -137,7 +138,7 @@ public void perform(Run<?,?> build, FilePath workspace, Launcher launcher, TaskL
                 Jenkins.getInstance().rebuildDependencyGraphAsync();
             }
         } catch (IOException e) {
-            e.printStackTrace(listener.error(Messages.Fingerprinter_Failed()));
+            Functions.printStackTrace(e, listener.error(Messages.Fingerprinter_Failed()));
             build.setResult(Result.FAILURE);
         }
 

File: core/src/main/java/hudson/tasks/Publisher.java
Patch:
@@ -101,7 +101,7 @@ public Action getProjectAction(Project project) {
      * to include their execution time in the total build time.
      *
      * <p>
-     * So normally, that is the preferrable behavior, but in a few cases
+     * So normally, that is the preferable behavior, but in a few cases
      * this is problematic. One of such cases is when a publisher needs to
      * trigger other builds, which in turn need to see this build as a
      * completed build. Those plugins that need to do this can return true

File: core/src/main/java/hudson/tasks/UserNameResolver.java
Patch:
@@ -58,7 +58,7 @@ public abstract class UserNameResolver implements ExtensionPoint {
      *
      * <p>
      * When multiple resolvers are installed, they are consulted in order and
-     * the search will be over when a name is found by someoene.
+     * the search will be over when a name is found by someone.
      *
      * <p>
      * Since {@link UserNameResolver} is singleton, this method can be invoked concurrently

File: core/src/main/java/hudson/tools/ToolDescriptor.java
Patch:
@@ -100,7 +100,7 @@ public void setInstallations(T... installations) {
      * Lists up {@link ToolPropertyDescriptor}s that are applicable to this {@link ToolInstallation}.
      */
     public List<ToolPropertyDescriptor> getPropertyDescriptors() {
-        return PropertyDescriptor.for_(ToolProperty.all(),clazz);
+        return PropertyDescriptor.<ToolPropertyDescriptor, ToolInstallation>for_(ToolProperty.all(), clazz);
     }
 
 

File: core/src/main/java/hudson/util/ArgumentListBuilder.java
Patch:
@@ -233,7 +233,7 @@ public ArgumentListBuilder addKeyValuePairsFromPropertyString(String prefix, Str
      *
      * @param original Resolution will be delegated to this resolver. Resolved
      *                 values will be escaped afterwards.
-     * @see <a href="https://issues.jenkins-ci.org/browse/JENKINS-10539">JENKINS-10539</a>
+     * @see <a href="https://jenkins-ci.org/issue/10539">JENKINS-10539</a>
      */
     private static VariableResolver<String> propertiesGeneratingResolver(final VariableResolver<String> original) {
 

File: core/src/main/java/hudson/util/ByteArrayOutputStream2.java
Patch:
@@ -26,7 +26,7 @@ public byte[] getBuffer() {
     public void readFrom(InputStream is) throws IOException {
         while(true) {
             if(count==buf.length) {
-                // realllocate
+                // reallocate
                 byte[] data = new byte[buf.length*2];
                 System.arraycopy(buf,0,data,0,buf.length);
                 buf = data;

File: core/src/main/java/hudson/util/CharacterEncodingFilter.java
Patch:
@@ -90,7 +90,7 @@ private boolean shouldSetCharacterEncoding(HttpServletRequest req) {
 
         // containers often implement RFCs incorrectly in that it doesn't interpret query parameter
         // decoding with UTF-8. This will ensure we get it right.
-        // but doing this for config.xml submission could potentiall overwrite valid
+        // but doing this for config.xml submission could potentially overwrite valid
         // "text/xml;charset=xxx"
         String contentType = req.getContentType();
         if (contentType != null) {

File: core/src/main/java/hudson/util/ChunkedInputStream.java
Patch:
@@ -67,7 +67,7 @@ public class ChunkedInputStream extends InputStream {
     /** The current position within the current chunk */
     private int pos;
 
-    /** True if we'are at the beginning of stream */
+    /** True if we're at the beginning of stream */
     private boolean bof = true;
 
     /** True if we've reached the end of stream */
@@ -101,7 +101,7 @@ public ChunkedInputStream(
      * is followed by a CRLF. The method returns -1 as soon as a chunksize of 0
      * is detected.</p>
      *
-     * <p> Trailer headers are read automcatically at the end of the stream and
+     * <p> Trailer headers are read automatically at the end of the stream and
      * can be obtained with the getResponseFooters() method.</p>
      *
      * @return -1 of the end of the stream has been reached or the next data

File: core/src/main/java/hudson/util/CopyOnWriteList.java
Patch:
@@ -143,7 +143,7 @@ public <E> E[] toArray(E[] array) {
     }
 
     public List<E> getView() {
-        return Collections.unmodifiableList(core);
+        return Collections.<E>unmodifiableList(core);
     }
 
     public void addAllTo(Collection<? super E> dst) {

File: core/src/main/java/hudson/util/DescribableList.java
Patch:
@@ -200,7 +200,7 @@ public void rebuild(StaplerRequest req, JSONObject json, List<? extends Descript
      * Rebuilds the list by creating a fresh instances from the submitted form.
      *
      * <p>
-     * This version works with the the &lt;f:hetero-list> UI tag, where the user
+     * This version works with the &lt;f:hetero-list> UI tag, where the user
      * is allowed to create multiple instances of the same descriptor. Order is also
      * significant.
      */
@@ -249,7 +249,7 @@ public interface Owner extends Saveable {
     /**
      * {@link Converter} implementation for XStream.
      *
-     * Serializaion form is compatible with plain {@link List}.
+     * Serialization form is compatible with plain {@link List}.
      */
     public static class ConverterImpl extends AbstractCollectionConverter {
         CopyOnWriteList.ConverterImpl copyOnWriteListConverter;

File: core/src/main/java/hudson/util/DescriptorList.java
Patch:
@@ -54,7 +54,7 @@
  * <p>
  * The other mode is the new mode, where the {@link Descriptor}s are actually stored in {@link ExtensionList}
  * (see {@link jenkins.model.Jenkins#getDescriptorList(Class)}) and this class acts as a view to it. This enables
- * bi-directional interoperability &mdash; both descriptors registred automatically and descriptors registered
+ * bi-directional interoperability &mdash; both descriptors registered automatically and descriptors registered
  * manually are visible from both {@link DescriptorList} and {@link ExtensionList}. In this mode,
  * {@link #legacy} is null but {@link #type} is non-null.
  *

File: core/src/main/java/hudson/util/DoubleLaunchChecker.java
Patch:
@@ -61,7 +61,7 @@
  *
  * <p>
  * More traditional way of doing this is to use a lock file with PID in it, but unfortunately in Java,
- * there's no reliabe way to obtain PID.
+ * there's no reliable way to obtain PID.
  *
  * @author Kohsuke Kawaguchi
  * @since 1.178

File: core/src/main/java/hudson/util/FormFieldValidator.java
Patch:
@@ -133,7 +133,7 @@ public final void process() throws IOException, ServletException {
                     throw new AccessDeniedException("No subject");
                 subject.checkPermission(permission);
             } catch (AccessDeniedException e) {
-                // if the user has hudson-wisde admin permission, all checks are allowed
+                // if the user has hudson-wide admin permission, all checks are allowed
                 // this is to protect Hudson administrator from broken ACL/SecurityRealm implementation/configuration.
                 if(!Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER))
                     throw e;
@@ -481,7 +481,7 @@ protected void check() throws IOException, ServletException {
                     else                    warning(msg);
                 }
             } catch (InterruptedException e) {
-                ok(); // coundn't check
+                ok(); // couldn't check
             }
         }
 

File: core/src/main/java/hudson/util/FormValidation.java
Patch:
@@ -511,7 +511,7 @@ private String getCharset(URLConnection con) {
         }
 
         /**
-         * Implement the actual form validation logic, by using other convenience methosd defined in this class.
+         * Implement the actual form validation logic, by using other convenience methods defined in this class.
          * If you are not using any of those, you don't need to extend from this class.
          */
         protected abstract FormValidation check() throws IOException, ServletException;
@@ -638,7 +638,7 @@ public String toCheckUrl() {
          */
         public String toStemUrl() {
             if (names==null)    return null;
-            return jsStringEscape(Descriptor.getCurrentDescriptorByNameUrl()) + '/' + relativePath();
+            return Descriptor.getCurrentDescriptorByNameUrl() + '/' + relativePath();
         }
 
         public String getDependsOn() {

File: core/src/main/java/hudson/util/HttpResponses.java
Patch:
@@ -29,6 +29,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
+import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
 import javax.servlet.ServletException;
 import java.io.File;

File: core/src/main/java/hudson/util/ListBoxModel.java
Patch:
@@ -50,7 +50,7 @@
  *
  * <pre><xmp>
  * <select id='foo'>
- *   <option>Fetching values...</optoin>
+ *   <option>Fetching values...</option>
  * </select>
  * </xmp></pre>
  *

File: core/src/main/java/hudson/util/MultipartFormDataParser.java
Patch:
@@ -78,7 +78,7 @@ public void cleanUp() {
      *
      * @param contentType Content-Type string.
      * @return {@code true} if the content type is "multipart/form-data", otherwise {@code false}.
-     * @since TODO
+     * @since 1.620
      */
     public static boolean isMultiPartForm(@CheckForNull String contentType) {
         if (contentType == null) {

File: core/src/main/java/hudson/util/PersistedList.java
Patch:
@@ -217,7 +217,7 @@ public boolean contains(Object item) {
     /**
      * {@link Converter} implementation for XStream.
      *
-     * Serializaion form is compatible with plain {@link List}.
+     * Serialization form is compatible with plain {@link List}.
      */
     public static class ConverterImpl extends AbstractCollectionConverter {
         CopyOnWriteList.ConverterImpl copyOnWriteListConverter;

File: core/src/main/java/hudson/util/RemotingDiagnostics.java
Patch:
@@ -143,7 +143,7 @@ public String call() throws RuntimeException {
                 if(output!=null)
                 pw.println("Result: "+output);
             } catch (Throwable t) {
-                t.printStackTrace(pw);
+                Functions.printStackTrace(t, pw);
             }
             return out.toString();
         }

File: core/src/main/java/hudson/util/SequentialExecutionQueue.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class SequentialExecutionQueue implements Executor {
     /**
-     * Access is sycnhronized by {@code Queue.this}
+     * Access is synchronized by {@code Queue.this}
      */
     private final Map<Runnable,QueueEntry> entries = new HashMap<Runnable,QueueEntry>();
     private ExecutorService executors;

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -43,7 +43,7 @@
 import com.thoughtworks.xstream.io.HierarchicalStreamReader;
 import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
 import com.thoughtworks.xstream.mapper.CannotResolveClassException;
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.PluginManager;
 import hudson.PluginWrapper;
 import hudson.diagnosis.OldDataMonitor;
@@ -422,7 +422,7 @@ class PluginClassOwnership implements ClassOwnership {
 
         private PluginManager pm;
 
-        @SuppressWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE") // classOwnership checked for null so why does FB complain?
+        @SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE") // classOwnership checked for null so why does FB complain?
         @Override public String ownerOf(Class<?> clazz) {
             if (classOwnership != null) {
                 return classOwnership.ownerOf(clazz);

File: core/src/main/java/hudson/util/io/RewindableFileOutputStream.java
Patch:
@@ -28,11 +28,13 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import org.apache.commons.io.FileUtils;
 
 /**
  * {@link OutputStream} that writes to a file.
  * <p>
  * Allows the caller to rewind the stream and override previous content with fresh new data.
+ * @since 2.18
  */
 public class RewindableFileOutputStream extends OutputStream {
     protected final File out;
@@ -47,6 +49,7 @@ public RewindableFileOutputStream(File out) {
     private synchronized OutputStream current() throws IOException {
         if (current == null) {
             if (!closed) {
+                FileUtils.forceMkdir(out.getParentFile());
                 try {
                     current = new FileOutputStream(out,false);
                 } catch (FileNotFoundException e) {

File: core/src/main/java/hudson/util/io/RewindableRotatingFileOutputStream.java
Patch:
@@ -30,7 +30,7 @@
  * {@link ReopenableFileOutputStream} that does log rotation upon rewind.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.416
+ * @since 2.18
  */
 public class RewindableRotatingFileOutputStream extends RewindableFileOutputStream {
     /**

File: core/src/main/java/hudson/util/jna/GNUCLibrary.java
Patch:
@@ -29,6 +29,7 @@
 import com.sun.jna.Native;
 import com.sun.jna.Memory;
 import com.sun.jna.NativeLong;
+import com.sun.jna.LastErrorException;
 import com.sun.jna.ptr.IntByReference;
 import jnr.posix.POSIX;
 import org.jvnet.libpam.impl.CLibrary.passwd;
@@ -74,8 +75,10 @@ public interface GNUCLibrary extends Library {
     int chown(String fileName, int uid, int gid);
     int chmod(String fileName, int i);
 
+    int open(String pathname, int flags) throws LastErrorException;
     int dup(int old);
     int dup2(int old, int _new);
+    long pread(int fd, Memory buffer, NativeLong size, NativeLong offset) throws LastErrorException;
     int close(int fd);
 
     // see http://www.gnu.org/s/libc/manual/html_node/Renaming-Files.html

File: core/src/main/java/hudson/util/spring/BeanBuilder.java
Patch:
@@ -147,7 +147,7 @@ public ApplicationContext getParentCtx() {
 	}
 
 	/**
-	 * Retrieves the RuntimeSpringConfiguration instance used the the BeanBuilder
+	 * Retrieves the RuntimeSpringConfiguration instance used by the BeanBuilder
 	 * @return The RuntimeSpringConfiguration instance
 	 */
 	public RuntimeSpringConfiguration getSpringConfig() {
@@ -198,7 +198,7 @@ public void setSpringConfig(RuntimeSpringConfiguration springConfig) {
 	/**
 	 * This class is used to defer the adding of a property to a bean definition until later
 	 * This is for a case where you assign a property to a list that may not contain bean references at
-	 * that point of asignment, but may later hence it would need to be managed
+	 * that point of assignment, but may later hence it would need to be managed
 	 *
 	 * @author Graeme Rocher
 	 */

File: core/src/main/java/hudson/util/spring/RuntimeSpringConfiguration.java
Patch:
@@ -171,7 +171,7 @@ interface RuntimeSpringConfiguration extends ServletContextAware {
     BeanConfiguration getBeanConfig(String name);
 
     /**
-     * Creates and returns the BeanDefinition that is regsitered within the given name or returns null
+     * Creates and returns the BeanDefinition that is registered within the given name or returns null
      *
      * @param name The name of the bean definition
      * @return A BeanDefinition

File: core/src/main/java/hudson/widgets/BuildHistoryWidget.java
Patch:
@@ -77,6 +77,6 @@ public HistoryPageFilter getHistoryPageFilter() {
         historyPageFilter.add(baseList, getQueuedItems());
         historyPageFilter.widget = this;
 
-        return historyPageFilter;
+        return updateFirstTransientBuildKey(historyPageFilter);
     }
 }

File: core/src/main/java/jenkins/MissingDependencyException.java
Patch:
@@ -34,7 +34,7 @@
  * Exception thrown if plugin resolution fails due to missing dependencies
  * 
  * @author Carlos Sanchez
- * @since TODO
+ * @since 2.4
  *
  */
 public class MissingDependencyException extends IOException {

File: core/src/main/java/jenkins/SoloFilePathFilter.java
Patch:
@@ -28,7 +28,7 @@ private SoloFilePathFilter(FilePathFilter base) {
 
     private boolean noFalse(String op, File f, boolean b) {
         if (!b)
-            throw new SecurityException("agent may not " + op + " " + f+"\nSee http://jenkins-ci.org/security-144 for more details");
+            throw new SecurityException("agent may not " + op + " " + f+"\nSee https://jenkins.io/redirect/security-144 for more details");
         return true;
     }
 

File: core/src/main/java/jenkins/install/InstallState.java
Patch:
@@ -52,7 +52,7 @@ public class InstallState implements ExtensionPoint {
     public static final InstallState UNKNOWN = new InstallState("UNKNOWN", true);
     
     /**
-     * After any setup / restart / etc. hooks are done, states hould be running
+     * After any setup / restart / etc. hooks are done, states should be running
      */
     @Extension
     public static final InstallState RUNNING = new InstallState("RUNNING", true);
@@ -151,7 +151,7 @@ public void initializeState() {
     public static final InstallState TEST = new InstallState("TEST", true);
     
     /**
-     * Jenkins started in development mode: Bolean.getBoolean("hudson.Main.development").
+     * Jenkins started in development mode: Boolean.getBoolean("hudson.Main.development").
      * Can be run normally with the -Djenkins.install.runSetupWizard=true
      */
     public static final InstallState DEVELOPMENT = new InstallState("DEVELOPMENT", true);

File: core/src/main/java/jenkins/management/AsynchronousAdministrativeMonitor.java
Patch:
@@ -1,6 +1,7 @@
 package jenkins.management;
 
 import hudson.AbortException;
+import hudson.Functions;
 import hudson.console.AnnotatedLargeText;
 import hudson.model.AdministrativeMonitor;
 import hudson.model.TaskListener;
@@ -125,7 +126,7 @@ private void doRun(@Nonnull TaskListener listener) {
             } catch (AbortException e) {
                 listener.error(e.getMessage());
             } catch (Throwable e) {
-                e.printStackTrace(listener.error(getName() + " failed"));
+                Functions.printStackTrace(e, listener.error(getName() + " failed"));
                 LOGGER.log(Level.WARNING, getName() + " failed", e);
             }
         }

File: core/src/main/java/jenkins/model/InterruptedBuildAction.java
Patch:
@@ -43,7 +43,7 @@ public class InterruptedBuildAction extends InvisibleAction {
     private final List<CauseOfInterruption> causes;
 
     public InterruptedBuildAction(Collection<? extends CauseOfInterruption> causes) {
-        this.causes = ImmutableList.copyOf(causes);
+        this.causes = ImmutableList.<CauseOfInterruption>copyOf(causes);
     }
 
     @Exported

File: core/src/main/java/jenkins/model/NodeListener.java
Patch:
@@ -36,7 +36,7 @@
  * Listen to {@link Node} CRUD operations.
  *
  * @author ogondza.
- * @since TODO
+ * @since 2.8
  */
 public abstract class NodeListener implements ExtensionPoint {
 

File: core/src/main/java/jenkins/model/Nodes.java
Patch:
@@ -204,7 +204,7 @@ public Boolean call() throws Exception {
      * Replace node of given name.
      *
      * @return {@code true} if node was replaced.
-     * @since TODO
+     * @since 2.8
      */
     public boolean replaceNode(final Node oldOne, final @Nonnull Node newOne) throws IOException {
         if (oldOne == nodes.get(oldOne.getNodeName())) {

File: core/src/main/java/jenkins/model/ParameterizedJobMixIn.java
Patch:
@@ -269,7 +269,7 @@ public static final CauseAction getBuildCause(ParameterizedJob job, StaplerReque
     /**
      * Allows customization of the human-readable display name to be rendered in the <i>Build Now</i> link.
      * @see #getBuildNowText
-     * @since TODO
+     * @since 1.624
      */
     public static final AlternativeUiTextProvider.Message<ParameterizedJob> BUILD_NOW_TEXT = new AlternativeUiTextProvider.Message<ParameterizedJob>();
 
@@ -278,7 +278,8 @@ public static final CauseAction getBuildCause(ParameterizedJob job, StaplerReque
      * Uses {@link #BUILD_NOW_TEXT}.
      */
     public final String getBuildNowText() {
-        return isParameterized() ? Messages.ParameterizedJobMixIn_build_with_parameters() : AlternativeUiTextProvider.get(BUILD_NOW_TEXT, asJob(), Messages.ParameterizedJobMixIn_build_now());
+        return isParameterized() ? AlternativeUiTextProvider.get(BUILD_NOW_TEXT, asJob(), Messages.ParameterizedJobMixIn_build_with_parameters())
+                : AlternativeUiTextProvider.get(BUILD_NOW_TEXT, asJob(), Messages.ParameterizedJobMixIn_build_now());
     }
 
     /**

File: core/src/main/java/jenkins/model/RunIdMigrator.java
Patch:
@@ -166,7 +166,7 @@ public synchronized boolean migrate(File dir, @CheckForNull File jenkinsHome) {
         doMigrate(dir);
         save(dir);
         if (jenkinsHome != null && offeredToUnmigrate.add(jenkinsHome))
-            LOGGER.log(WARNING, "Build record migration (https://wiki.jenkins-ci.org/display/JENKINS/JENKINS-24380+Migration) is one-way. If you need to downgrade Jenkins, run: {0}", getUnmigrationCommandLine(jenkinsHome));
+            LOGGER.log(WARNING, "Build record migration (https://jenkins.io/redirect/build-record-migration) is one-way. If you need to downgrade Jenkins, run: {0}", getUnmigrationCommandLine(jenkinsHome));
         return true;
     }
 

File: core/src/main/java/jenkins/model/item_category/ItemCategory.java
Patch:
@@ -44,7 +44,7 @@ public abstract class ItemCategory implements ExtensionPoint {
      * This field indicates how much non-default categories are required in
      * order to start showing them in Jenkins.
      * This field is restricted for the internal use only, because all other changes would cause binary compatibility issues.
-     * See <a href="https://issues.jenkins-ci.org/browse/JENKINS-36593">JENKINS-36593</a> for more info.
+     * See <a href="https://jenkins-ci.org/issue/36593">JENKINS-36593</a> for more info.
      */
     @Restricted(NoExternalUse.class)
     public static int MIN_TOSHOW = 1;

File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java
Patch:
@@ -293,7 +293,7 @@ public R get(int n) {
     }
 
     /**
-     * Checks if the the specified build exists.
+     * Checks if the specified build exists.
      *
      * @param number the build number to probe.
      * @return {@code true} if there is an run for the corresponding number, note that this does not mean that

File: core/src/main/java/jenkins/mvn/GlobalSettingsProvider.java
Patch:
@@ -24,7 +24,7 @@ public abstract class GlobalSettingsProvider extends AbstractDescribableImpl<Glo
      * configure maven launcher argument list with adequate settings path
      * 
      * @param build
-     *            the build to provide the settigns for
+     *            the build to provide the settings for
      * @return the filepath to the provided file. <code>null</code> if no settings will be provided.
      */
     public abstract FilePath supplySettings(AbstractBuild<?, ?> build, TaskListener listener);

File: core/src/main/java/jenkins/security/ApiTokenProperty.java
Patch:
@@ -66,7 +66,7 @@ public class ApiTokenProperty extends UserProperty {
      * If enabled, shows API tokens to users with {@link Jenkins#ADMINISTER) permissions.
      * Disabled by default due to the security reasons.
      * If enabled, it restores the original Jenkins behavior (SECURITY-200).
-     * @since TODO
+     * @since 1.638
      */
     private static final boolean SHOW_TOKEN_TO_ADMINS = 
             SystemProperties.getBoolean(ApiTokenProperty.class.getName() + ".showTokenToAdmins");
@@ -87,12 +87,12 @@ public ApiTokenProperty() {
 
     /**
      * Gets the API token.
-     * The method performs security checks. Only the current user and SYSTEM may see it.
+     * The method performs security checks since 1.638. Only the current user and SYSTEM may see it.
      * Users with {@link Jenkins#ADMINISTER} may be allowed to do it using {@link #SHOW_TOKEN_TO_ADMINS}.
      * 
      * @return API Token. Never null, but may be {@link Messages#ApiTokenProperty_ChangeToken_TokenIsHidden()}
      *         if the user has no appropriate permissions.
-     * @since TODO: the method performs security checks
+     * @since 1.426, and since 1.638 the method performs security checks
      */
     @Nonnull
     public String getApiToken() {

File: core/src/main/java/jenkins/security/QueueItemAuthenticatorConfiguration.java
Patch:
@@ -1,6 +1,5 @@
 package jenkins.security;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
 import hudson.Extension;
 import hudson.util.DescribableList;
 import jenkins.model.GlobalConfiguration;
@@ -10,6 +9,7 @@
 import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
+import javax.annotation.Nonnull;
 import java.io.IOException;
 import java.util.List;
 
@@ -59,7 +59,7 @@ public static QueueItemAuthenticatorConfiguration get() {
     @Extension(ordinal = 100)
     public static class ProviderImpl extends QueueItemAuthenticatorProvider {
 
-        @NonNull
+        @Nonnull
         @Override
         public List<QueueItemAuthenticator> getAuthenticators() {
             return get().getAuthenticators();

File: core/src/main/java/jenkins/security/s2m/CallableDirectionChecker.java
Patch:
@@ -60,7 +60,7 @@ public void check(RoleSensitive subject, @Nonnull Collection<Role> expected) thr
             return;
         }
 
-        throw new SecurityException("Sending " + name + " from agent to master is prohibited.\nSee http://jenkins-ci.org/security-144 for more details");
+        throw new SecurityException("Sending " + name + " from agent to master is prohibited.\nSee https://jenkins.io/redirect/security-144 for more details");
     }
 
     /**

File: core/src/main/java/jenkins/slaves/restarter/JnlpSlaveRestarterInstaller.java
Patch:
@@ -1,6 +1,7 @@
 package jenkins.slaves.restarter;
 
 import hudson.Extension;
+import hudson.Functions;
 import hudson.model.Computer;
 import hudson.model.TaskListener;
 import hudson.remoting.Engine;
@@ -93,7 +94,7 @@ public void onReconnect() {
 
             LOGGER.log(FINE, "Effective SlaveRestarter on {0}: {1}", new Object[] {c.getName(), effective});
         } catch (Throwable e) {
-            e.printStackTrace(listener.error("Failed to install restarter"));
+            Functions.printStackTrace(e, listener.error("Failed to install restarter"));
         }
     }
 

File: core/src/main/java/jenkins/slaves/restarter/WinswSlaveRestarter.java
Patch:
@@ -52,7 +52,7 @@ public void restart() throws Exception {
         // this command. If that is the case, there's nothing we can do about it.
         int r = exec("restart!");
         throw new IOException("Restart failure. '"+exe+" restart' completed with "+r+" but I'm still alive!  "
-                               + "See https://wiki.jenkins-ci.org/display/JENKINS/Distributed+builds#Distributedbuilds-Windowsslaveserviceupgrades"
+                               + "See https://jenkins.io/redirect/troubleshooting/windows-agent-restart"
                                + " for a possible explanation and solution");
     }
 

File: core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java
Patch:
@@ -216,7 +216,7 @@ synchronized void invalidateCache() {
         private Map<Job,Collection<ReverseBuildTrigger>> calculateCache() {
             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {
                 final Map<Job, Collection<ReverseBuildTrigger>> result = new WeakHashMap<>();
-                for (Job<?, ?> downstream : Jenkins.getInstance().getAllItems(Job.class)) {
+                for (Job<?, ?> downstream : Jenkins.getInstance().allItems(Job.class)) {
                     ReverseBuildTrigger trigger =
                             ParameterizedJobMixIn.getTrigger(downstream, ReverseBuildTrigger.class);
                     if (trigger == null) {
@@ -276,7 +276,7 @@ public static class ItemListenerImpl extends ItemListener {
         @Override
         public void onLocationChanged(Item item, final String oldFullName, final String newFullName) {
             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {
-                for (Job<?, ?> p : Jenkins.getInstance().getAllItems(Job.class)) {
+                for (Job<?, ?> p : Jenkins.getInstance().allItems(Job.class)) {
                     ReverseBuildTrigger t = ParameterizedJobMixIn.getTrigger(p, ReverseBuildTrigger.class);
                     if (t != null) {
                         String revised =

File: test/src/test/java/hudson/cli/ConnectNodeCommandTest.java
Patch:
@@ -106,12 +106,13 @@ public class ConnectNodeCommandTest {
 
     @Test public void connectNodeShouldSucceedWithForce() throws Exception {
         DumbSlave slave = j.createSlave("aNode", "", null);
+        slave.toComputer().connect(false).get(); // avoid a race condition in the test
 
         CLICommandInvoker.Result result = command
                 .authorizedTo(Computer.CONNECT, Jenkins.READ)
                 .invokeWithArgs("-f", "aNode");
-        assertThat(result, succeededSilently());
-        assertThat(slave.toComputer().isOnline(), equalTo(true));
+        assertThat(slave.toComputer().getLog(), result, succeededSilently());
+        assertThat(slave.toComputer().getLog(), slave.toComputer().isOnline(), equalTo(true));
 
         result = command
                 .authorizedTo(Computer.CONNECT, Jenkins.READ)

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -234,6 +234,7 @@ public synchronized <T extends TopLevelItem> T copy(T src, String name) throws I
         }
         src.getDescriptor().checkApplicableIn(parent);
         acl.getACL().checkCreatePermission(parent, src.getDescriptor());
+        ItemListener.checkBeforeCopy(src, parent);
 
         T result = (T)createProject(src.getDescriptor(),name,false);
 

File: core/src/main/java/hudson/cli/ConsoleCommand.java
Patch:
@@ -76,6 +76,7 @@ protected int run() throws Exception {
                 do {
                     logText = run.getLogText();
                     pos = logText.writeLogTo(pos, w);
+                    // TODO should sleep as in Run.writeWholeLogTo
                 } while (!logText.isComplete());
             } else {
                 try (InputStream logInputStream = run.getLogInputStream()) {

File: core/src/main/java/hudson/lifecycle/WindowsInstallerLink.java
Patch:
@@ -306,9 +306,9 @@ static int runElevated(File jenkinsExe, String command, TaskListener out, File p
         try {
             return Kernel32Utils.waitForExitProcess(sei.hProcess);
         } finally {
-            FileInputStream fin = new FileInputStream(new File(pwd,"redirect.log"));
-            IOUtils.copy(fin, out.getLogger());
-            fin.close();
+            try (FileInputStream fin = new FileInputStream(new File(pwd,"redirect.log"))) {
+                IOUtils.copy(fin, out.getLogger());
+            }
         }
     }
 

File: cli/src/main/java/hudson/cli/CLI.java
Patch:
@@ -708,7 +708,7 @@ class ClientSideImpl extends PlainCLIProtocol.ClientSide {
             @Override
             protected synchronized void onExit(int code) {
                 this.exit = code;
-                notify();
+                notifyAll();
             }
             @Override
             protected void onStdout(byte[] chunk) throws IOException {

File: core/src/main/java/hudson/cli/CLIAction.java
Patch:
@@ -157,7 +157,7 @@ protected void onEncoding(String text) {
                             }
                             @Override
                             protected synchronized void onStart() {
-                                notify();
+                                notifyAll();
                             }
                             @Override
                             protected void onStdin(byte[] chunk) throws IOException {

File: cli/src/test/java/hudson/cli/PrivateKeyProviderTest.java
Patch:
@@ -57,7 +57,7 @@ public void specifyKeysExplicitly() throws Exception {
         final File dsaKey = keyFile(".ssh/id_dsa");
         final File rsaKey = keyFile(".ssh/id_rsa");
 
-        run("-i", dsaKey.getAbsolutePath(), "-i", rsaKey.getAbsolutePath(), "-s", "http://example.com");
+        run("-remoting", "-i", dsaKey.getAbsolutePath(), "-i", rsaKey.getAbsolutePath(), "-s", "http://example.com");
 
         verify(cli).authenticate(withKeyPairs(
                 keyPair(dsaKey),
@@ -73,7 +73,7 @@ public void useDefaultKeyLocations() throws Exception {
         final File dsaKey = keyFile(".ssh/id_dsa");
 
         fakeHome();
-        run("-s", "http://example.com");
+        run("-remoting", "-s", "http://example.com");
 
         verify(cli).authenticate(withKeyPairs(
                 keyPair(rsaKey),

File: core/src/main/java/hudson/lifecycle/WindowsInstallerLink.java
Patch:
@@ -306,9 +306,9 @@ static int runElevated(File jenkinsExe, String command, TaskListener out, File p
         try {
             return Kernel32Utils.waitForExitProcess(sei.hProcess);
         } finally {
-            FileInputStream fin = new FileInputStream(new File(pwd,"redirect.log"));
-            IOUtils.copy(fin, out.getLogger());
-            fin.close();
+            try (FileInputStream fin = new FileInputStream(new File(pwd,"redirect.log"))) {
+                IOUtils.copy(fin, out.getLogger());
+            }
         }
     }
 

File: core/src/main/java/hudson/lifecycle/WindowsInstallerLink.java
Patch:
@@ -306,9 +306,9 @@ static int runElevated(File jenkinsExe, String command, TaskListener out, File p
         try {
             return Kernel32Utils.waitForExitProcess(sei.hProcess);
         } finally {
-            FileInputStream fin = new FileInputStream(new File(pwd,"redirect.log"));
-            IOUtils.copy(fin, out.getLogger());
-            fin.close();
+            try (FileInputStream fin = new FileInputStream(new File(pwd,"redirect.log"))) {
+                IOUtils.copy(fin, out.getLogger());
+            }
         }
     }
 

File: core/src/main/java/hudson/util/FormFillFailure.java
Patch:
@@ -43,7 +43,7 @@
  * Use one of the factory methods to create an instance, then throw it from your <tt>doFillXyz</tt>
  * method.
  *
- * @since FIXME
+ * @since 2.50
  */
 public abstract class FormFillFailure extends IOException implements HttpResponse {
 

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -234,6 +234,7 @@ public synchronized <T extends TopLevelItem> T copy(T src, String name) throws I
         }
         src.getDescriptor().checkApplicableIn(parent);
         acl.getACL().checkCreatePermission(parent, src.getDescriptor());
+        ItemListener.checkBeforeCopy(src, parent);
 
         T result = (T)createProject(src.getDescriptor(),name,false);
 

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -136,7 +136,7 @@ public String getPronoun() {
     /**
      * Gets the term used in the UI to represent the kind of {@link Queue.Task} associated with this kind of
      * {@link Item}. Must start with a capital letter. Defaults to "Build".
-     * @since FIXME
+     * @since2.50 
      */
     public String getTaskNoun() {
         return AlternativeUiTextProvider.get(TASK_NOUN, this, Messages.AbstractItem_TaskNoun());

File: core/src/main/java/hudson/model/Node.java
Patch:
@@ -458,7 +458,7 @@ public FileSystemProvisioner getFileSystemProvisioner() {
      * 
      * @return null if the property is not configured
      * 
-     * @since TODO
+     * @since 2.37
      */
     @CheckForNull
     public <T extends NodeProperty> T getNodeProperty(Class<T> clazz)
@@ -479,7 +479,7 @@ public <T extends NodeProperty> T getNodeProperty(Class<T> clazz)
      * 
      * @return null if the property is not configured
      * 
-     * @since TODO
+     * @since 2.37
      */
     @CheckForNull
     public NodeProperty getNodeProperty(String className)

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -75,7 +75,7 @@ public class ParametersAction implements RunAction2, Iterable<ParameterValue>, Q
      * If null, and they are not safe, it will log a warning in logs to the user
      * to let him choose the behavior
      *
-     * @since TODO
+     * @since 2.3
      */
     @Restricted(NoExternalUse.class)
     public static final String KEEP_UNDEFINED_PARAMETERS_SYSTEM_PROPERTY_NAME = ParametersAction.class.getName() +

File: core/src/main/java/hudson/scheduler/RareOrImpossibleDateException.java
Patch:
@@ -46,7 +46,7 @@
  *
  * @see CronTab#floor(Calendar)
  * @see CronTab#ceil(Calendar)
- * @since TODO
+ * @since 2.49
  */
 @Restricted(NoExternalUse.class)
 public class RareOrImpossibleDateException extends RuntimeException {

File: core/src/main/java/hudson/slaves/CloudProvisioningListener.java
Patch:
@@ -70,7 +70,7 @@ public void onComplete(NodeProvisioner.PlannedNode plannedNode, Node node) {
      * @param plannedNode the plannedNode which resulted in the <code>node</code> being provisioned
      * @param node the node which has been provisioned by the cloud
      *
-     * @since TODO
+     * @since 2.37
      */
     public void onCommit(@Nonnull NodeProvisioner.PlannedNode plannedNode, @Nonnull Node node) {
         // Noop by default
@@ -93,7 +93,7 @@ public void onFailure(NodeProvisioner.PlannedNode plannedNode, Throwable t) {
      * @param node the node which has been provisioned by the cloud
      * @param t the exception
      *
-     * @since TODO
+     * @since 2.37
      */
     public void onRollback(@Nonnull NodeProvisioner.PlannedNode plannedNode, @Nonnull Node node,
                            @Nonnull Throwable t) {

File: core/src/main/java/hudson/util/RunList.java
Patch:
@@ -83,7 +83,7 @@ public RunList(Collection<? extends Job> jobs) {
      * @param <J> the base class of job.
      * @param <R> the base class of run.
      * @return the run list.
-     * @since FIXME
+     * @since 2.37
      */
     public static <J extends Job<J,R>, R extends Run<J,R>> RunList<R> fromJobs(Iterable<? extends J> jobs) {
         List<Iterable<R>> runLists = new ArrayList<>();

File: core/src/main/java/jenkins/security/UpdateSiteWarningsConfiguration.java
Patch:
@@ -46,7 +46,7 @@
  *
  * @see UpdateSiteWarningsMonitor
  *
- * @since TODO
+ * @since 2.40
  */
 @Extension
 @Restricted(NoExternalUse.class)

File: core/src/main/java/jenkins/security/UpdateSiteWarningsMonitor.java
Patch:
@@ -75,7 +75,7 @@
  *   <li>Intersection of active and inapplicable
  * </ul>
  *
- * @since TODO
+ * @since 2.40
  */
 @Extension
 @Restricted(NoExternalUse.class)

File: core/src/test/java/hudson/util/io/RewindableRotatingFileOutputStreamTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.rules.TemporaryFolder;
 import org.jvnet.hudson.test.Issue;
 
-import static org.junit.Assume.assumeFalse
+import static org.junit.Assume.assumeFalse;
 
 public class RewindableRotatingFileOutputStreamTest {
 

File: test/src/test/java/hudson/PluginManagerTest.java
Patch:
@@ -50,6 +50,7 @@
 import org.apache.commons.io.FileUtils;
 import org.apache.tools.ant.filters.StringInputStream;
 import static org.junit.Assert.*;
+import static org.junit.Assume.assumeFalse;
 
 import org.junit.Rule;
 import org.junit.Test;
@@ -213,6 +214,7 @@ public void startPlugin(PluginWrapper plugin) throws Exception {
     }
 
     @Test public void prevalidateConfig() throws Exception {
+        assumeFalse("TODO: Implement this test on Windows", Functions.isWindows());
         PersistedList<UpdateSite> sites = r.jenkins.getUpdateCenter().getSites();
         sites.clear();
         URL url = PluginManagerTest.class.getResource("/plugins/tasks-update-center.json");
@@ -467,6 +469,7 @@ private void dynamicLoadAndDisable(String plugin) throws IOException, Interrupte
     }
 
     @Test public void uploadDependencyResolution() throws Exception {
+        assumeFalse("TODO: Implement this test for Windows", Functions.isWindows());
         PersistedList<UpdateSite> sites = r.jenkins.getUpdateCenter().getSites();
         sites.clear();
         URL url = PluginManagerTest.class.getResource("/plugins/upload-test-update-center.json");

File: test/src/test/java/hudson/cli/DeleteBuildsCommandTest.java
Patch:
@@ -24,6 +24,7 @@
 
 package hudson.cli;
 
+import hudson.Functions;
 import hudson.model.ExecutorTest;
 import hudson.model.FreeStyleProject;
 import hudson.model.Job;
@@ -43,6 +44,7 @@
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasSize;
+import static org.junit.Assume.assumeFalse;
 
 /**
  * @author pjanouse
@@ -135,6 +137,7 @@ public class DeleteBuildsCommandTest {
     }
 
     @Test public void deleteBuildsShouldSuccessEvenTheBuildIsRunning() throws Exception {
+        assumeFalse("You can't delete files that are in use on Windows", Functions.isWindows());
         FreeStyleProject project = j.createFreeStyleProject("aProject");
         ExecutorTest.startBlockingBuild(project);
         assertThat(((FreeStyleProject) j.jenkins.getItem("aProject")).getBuilds(), hasSize(1));

File: test/src/test/java/hudson/model/labels/LabelExpressionTest.java
Patch:
@@ -24,8 +24,10 @@
 package hudson.model.labels;
 
 import static org.junit.Assert.*;
+import static org.junit.Assume.assumeFalse;
 
 import antlr.ANTLRException;
+import hudson.Functions;
 import hudson.Launcher;
 import hudson.model.AbstractBuild;
 import hudson.model.AbstractProject;
@@ -189,6 +191,7 @@ public void laxParsing() {
 
     @Test
     public void dataCompatibilityWithHostNameWithWhitespace() throws Exception {
+        assumeFalse("Windows can't have paths with colons, skipping", Functions.isWindows());
         DumbSlave slave = new DumbSlave("abc def (xyz) : test", "dummy",
                 j.createTmpDir().getPath(), "1", Mode.NORMAL, "", j.createComputerLauncher(null), RetentionStrategy.NOOP, Collections.EMPTY_LIST);
         j.jenkins.addNode(slave);

File: test/src/test/java/hudson/tasks/ArtifactArchiverTest.java
Patch:
@@ -26,6 +26,7 @@
 
 import hudson.AbortException;
 import hudson.FilePath;
+import hudson.Functions;
 import hudson.Launcher;
 import hudson.Util;
 import hudson.model.AbstractBuild;
@@ -266,7 +267,7 @@ public void testDefaultExcludesOff() throws Exception {
 
     @LocalData
     @Test public void fingerprintMigration() throws Exception {
-        FreeStyleProject p = j.jenkins.getItemByFullName("sample", FreeStyleProject.class);
+        FreeStyleProject p = j.jenkins.getItemByFullName(Functions.isWindows() ? "sample-windows" : "sample", FreeStyleProject.class);
         assertNotNull(p);
         String xml = p.getConfigFile().asString();
         assertFalse(xml, xml.contains("<recordBuildArtifacts>"));

File: test/src/test/java/jenkins/security/Security232Test.java
Patch:
@@ -170,6 +170,7 @@ public void commonsCollections1() throws Exception {
                 long o2 = Long.parseLong(parts[ 1 ], 16);
                 short o3 = Short.parseShort(parts[ 2 ], 16);
 
+                // Need to find Windows equivalent.
                 exploit(new InetSocketAddress(isa.getAddress(), jrmpPort), obj, o1, o2, o3, new CommonsCollections1(), "touch " + pwned);
             }
 

File: test/src/test/java/jenkins/security/security218/ysoserial/payloads/JRMPClient.java
Patch:
@@ -79,7 +79,7 @@ public Registry getObject ( final String command ) throws Exception {
         String host;
         int port;
         int sep = command.indexOf(':');
-        if ( sep < 0 ) {
+        if ( sep < 0 || ((sep+1) < command.length() && !Character.isDigit(command.charAt(sep+1)))) {
             port = new Random().nextInt(65535);
             host = command;
         }

File: test/src/test/java/hudson/cli/AbstractBuildRangeCommand2Test.java
Patch:
@@ -90,7 +90,7 @@ public class AbstractBuildRangeCommand2Test {
 
     @Test public void dummyRangeShouldSuccessEvenTheBuildIsRunning() throws Exception {
         FreeStyleProject project = j.createFreeStyleProject("aProject");
-        project.getBuildersList().add(Functions.isWindows() ? new BatchFile("echo 1\r\nping -n 10 127.0.01 >nul") : new Shell("echo 1\nsleep 10s"));
+        project.getBuildersList().add(Functions.isWindows() ? new BatchFile("echo 1\r\nping -n 10 127.0.0.1 >nul") : new Shell("echo 1\nsleep 10s"));
         assertThat("Job wasn't scheduled properly", project.scheduleBuild(0), equalTo(true));
 
         // Wait until classProject is started (at least 1s)

File: core/src/main/java/jenkins/slaves/JnlpAgentReceiver.java
Patch:
@@ -17,7 +17,7 @@
  * for different purposes outside {@link Slave}s.
 
  * <ul>
- * <li> When the <b>exists</b> method is invoked for an agent, the <b>owns</b> method is called on all the extension points: if no owner is found an exception is thrown.</li>
+ * <li> When the {@link jenkins.slaves.JnlpAgentReceiver#exists(String)} method is invoked for an agent, the {@link jenkins.slaves.JnlpAgentReceiver#owns(String)} method is called on all the extension points: if no owner is found an exception is thrown.</li>
  * <li> If owner is found, then the {@link org.jenkinsci.remoting.engine.JnlpConnectionState} lifecycle methods are invoked for all registered {@link JnlpConnectionStateListener} until the one which changes the state of {@link org.jenkinsci.remoting.engine.JnlpConnectionState} by setting an approval or rejected state is found.
  *      When found, that listener will be set as the owner of the incoming connection event. </li>
  * <li> Subsequent steps of the connection lifecycle are only called on the {@link JnlpAgentReceiver} implementation owner for that connection event.</li>

File: core/src/main/java/hudson/util/io/RewindableFileOutputStream.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import org.apache.commons.io.FileUtils;
 
 /**
  * {@link OutputStream} that writes to a file.
@@ -48,6 +49,7 @@ public RewindableFileOutputStream(File out) {
     private synchronized OutputStream current() throws IOException {
         if (current == null) {
             if (!closed) {
+                FileUtils.forceMkdir(out.getParentFile());
                 try {
                     current = new FileOutputStream(out,false);
                 } catch (FileNotFoundException e) {

File: test/src/test/java/jenkins/security/security218/ysoserial/payloads/JRMPClient.java
Patch:
@@ -79,7 +79,7 @@ public Registry getObject ( final String command ) throws Exception {
         String host;
         int port;
         int sep = command.indexOf(':');
-        if ( sep < 0 ) {
+        if ( sep < 0 || ((sep+1) < command.length() && !Character.isDigit(command.charAt(sep+1)))) {
             port = new Random().nextInt(65535);
             host = command;
         }

File: core/src/main/java/jenkins/slaves/JnlpAgentReceiver.java
Patch:
@@ -17,7 +17,7 @@
  * for different purposes outside {@link Slave}s.
 
  * <ul>
- * <li> When the <b>exists</b> method is invoked for an agent, the <b>owns</b> method is called on all the extension points: if no owner is found an exception is thrown.</li>
+ * <li> When the {@link jenkins.slaves.JnlpAgentReceiver#exists(String)} method is invoked for an agent, the {@link jenkins.slaves.JnlpAgentReceiver#owns(String)} method is called on all the extension points: if no owner is found an exception is thrown.</li>
  * <li> If owner is found, then the {@link org.jenkinsci.remoting.engine.JnlpConnectionState} lifecycle methods are invoked for all registered {@link JnlpConnectionStateListener} until the one which changes the state of {@link org.jenkinsci.remoting.engine.JnlpConnectionState} by setting an approval or rejected state is found.
  *      When found, that listener will be set as the owner of the incoming connection event. </li>
  * <li> Subsequent steps of the connection lifecycle are only called on the {@link JnlpAgentReceiver} implementation owner for that connection event.</li>

File: test/src/test/java/hudson/PluginManagerTest.java
Patch:
@@ -47,6 +47,7 @@
 import org.apache.commons.io.FileUtils;
 import org.apache.tools.ant.filters.StringInputStream;
 import static org.junit.Assert.*;
+import static org.junit.Assume.assumeFalse;
 
 import org.junit.Rule;
 import org.junit.Test;
@@ -453,6 +454,7 @@ private void dynamicLoadAndDisable(String plugin) throws IOException, Interrupte
     }
 
     @Test public void uploadDependencyResolution() throws Exception {
+        assumeFalse("TODO: Implement this test for Windows", Functions.isWindows());
         PersistedList<UpdateSite> sites = r.jenkins.getUpdateCenter().getSites();
         sites.clear();
         URL url = PluginManagerTest.class.getResource("/plugins/upload-test-update-center.json");

File: test/src/test/java/hudson/model/labels/LabelExpressionTest.java
Patch:
@@ -24,8 +24,10 @@
 package hudson.model.labels;
 
 import static org.junit.Assert.*;
+import static org.junit.Assume.assumeFalse;
 
 import antlr.ANTLRException;
+import hudson.Functions;
 import hudson.Launcher;
 import hudson.model.AbstractBuild;
 import hudson.model.AbstractProject;
@@ -189,6 +191,7 @@ public void laxParsing() {
 
     @Test
     public void dataCompatibilityWithHostNameWithWhitespace() throws Exception {
+        assumeFalse("Windows can't have paths with colons, skipping", Functions.isWindows());
         DumbSlave slave = new DumbSlave("abc def (xyz) : test", "dummy",
                 j.createTmpDir().getPath(), "1", Mode.NORMAL, "", j.createComputerLauncher(null), RetentionStrategy.NOOP, Collections.EMPTY_LIST);
         j.jenkins.addNode(slave);

File: core/src/main/java/hudson/lifecycle/SolarisSMFLifecycle.java
Patch:
@@ -40,7 +40,7 @@ public class SolarisSMFLifecycle extends Lifecycle {
      */
     @Override
     public void restart() throws IOException, InterruptedException {
-        Jenkins h = Jenkins.getInstanceOrNull(); // guard against repeated concurrent calls to restart
+        Jenkins jenkins = Jenkins.getInstanceOrNull(); // guard against repeated concurrent calls to restart
         try {
             if (jenkins != null) {
                 jenkins.cleanUp();

File: core/src/main/java/hudson/lifecycle/UnixLifecycle.java
Patch:
@@ -67,7 +67,7 @@ public UnixLifecycle() throws IOException {
 
     @Override
     public void restart() throws IOException, InterruptedException {
-        Jenkins h = Jenkins.getInstanceOrNull(); // guard against repeated concurrent calls to restart
+        Jenkins jenkins = Jenkins.getInstanceOrNull(); // guard against repeated concurrent calls to restart
         try {
             if (jenkins != null) {
                 jenkins.cleanUp();

File: core/src/main/java/hudson/lifecycle/WindowsServiceLifecycle.java
Patch:
@@ -117,7 +117,7 @@ public void rewriteHudsonWar(File by) throws IOException {
 
     @Override
     public void restart() throws IOException, InterruptedException {
-        Jenkins jenkins = Jenkins.getInstance();
+        Jenkins jenkins = Jenkins.getInstanceOrNull();
         try {
             if (jenkins != null) {
                 jenkins.cleanUp();

File: core/src/main/java/hudson/BulkChange.java
Patch:
@@ -54,7 +54,7 @@
  *
  * <ol>
  * <li>
- * Mutater methods should invoke {@code this.save()} so that if the method is called outside
+ * Mutator methods should invoke {@code this.save()} so that if the method is called outside
  * a {@link BulkChange}, the result will be saved immediately.
  *
  * <li>
@@ -78,7 +78,7 @@ public class BulkChange implements Closeable {
     public BulkChange(Saveable saveable) {
         this.parent = current();
         this.saveable = saveable;
-        // rememeber who allocated this object in case
+        // remember who allocated this object in case
         // someone forgot to call save() at the end.
         allocator = new Exception();
 

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -1202,7 +1202,7 @@ private void deleteRecursive(File dir) throws IOException {
             deleteFile(deleting(dir));
         } catch (IOException e) {
             // if some of the child directories are big, it might take long enough to delete that
-            // it allows others to create new files, causing problemsl ike JENKINS-10113
+            // it allows others to create new files, causing problems like JENKINS-10113
             // so give it one more attempt before we give up.
             if(!isSymlink(dir))
                 deleteContentsRecursive(dir);
@@ -2383,7 +2383,7 @@ public String invoke(File dir, VirtualChannel channel) throws IOException, Inter
                         for (String token : Util.tokenize(fileMask))
                             matched &= hasMatch(dir,token,caseSensitive);
                         if(matched)
-                            return Messages.FilePath_validateAntFileMask_whitespaceSeprator();
+                            return Messages.FilePath_validateAntFileMask_whitespaceSeparator();
                     }
 
                     // a common mistake is to assume the wrong base dir, and there are two variations

File: core/src/main/java/hudson/FileSystemProvisionerDescriptor.java
Patch:
@@ -63,7 +63,7 @@ public abstract class FileSystemProvisionerDescriptor extends Descriptor<FileSys
      * @param listener
      *      The status of the operation, error message, etc., should go here.
      * @return
-     *      true if this {@link FileSystemProvisionerDescriptor} is responsible for de-alocating the workspace.
+     *      true if this {@link FileSystemProvisionerDescriptor} is responsible for de-allocating the workspace.
      *      false otherwise, in which case the other {@link FileSystemProvisionerDescriptor}s are asked to
      *      clean up the workspace.
      */

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1394,7 +1394,7 @@ public static String getVersion() {
     }
 
     /**
-     * Resoruce path prefix.
+     * Resource path prefix.
      */
     public static String getResourcePath() {
         return Jenkins.RESOURCE_PATH;

File: core/src/main/java/hudson/Launcher.java
Patch:
@@ -299,7 +299,7 @@ public InputStream stdin() {
          * Sets the environment variable overrides.
          *
          * <p>
-         * In adition to what the current process
+         * In addition to what the current process
          * is inherited (if this is going to be launched from a agent agent, that
          * becomes the "current" process), these variables will be also set.
          */

File: core/src/main/java/hudson/LocalPluginManager.java
Patch:
@@ -70,7 +70,7 @@ public LocalPluginManager(@NonNull File rootDir) {
      * If the war file has any "/WEB-INF/plugins/*.jpi", extract them into the plugin directory.
      *
      * @return
-     *      File names of the bundled plugins. Like {"ssh-slaves.jpi","subvesrion.jpi"}
+     *      File names of the bundled plugins. Like {"ssh-slaves.jpi","subversion.jpi"}
      */
     @Override
     protected Collection<String> loadBundledPlugins() {

File: core/src/main/java/hudson/Plugin.java
Patch:
@@ -280,7 +280,7 @@ public void save() throws IOException {
      * Controls the file where {@link #load()} and {@link #save()}
      * persists data.
      *
-     * This method can be also overriden if the plugin wants to
+     * This method can be also overridden if the plugin wants to
      * use a custom {@link XStream} instance to persist data.
      *
      * @since 1.245

File: core/src/main/java/hudson/ProxyConfiguration.java
Patch:
@@ -205,7 +205,7 @@ public void save() throws IOException {
 
     public Object readResolve() {
         if (secretPassword == null)
-            // backward compatibility : get crambled password and store it encrypted
+            // backward compatibility : get scrambled password and store it encrypted
             secretPassword = Secret.fromString(Scrambler.descramble(password));
         password = null;
         return this;

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -386,7 +386,7 @@ public void contextDestroyed(ServletContextEvent event) {
             }
 
             // Logger is in the system classloader, so if we don't do this
-            // the whole web app will never be undepoyed.
+            // the whole web app will never be undeployed.
             Logger.getLogger("").removeHandler(handler);
         } finally {
             JenkinsJVMAccess._setJenkinsJVM(false);

File: core/src/main/java/hudson/cli/BuildCommand.java
Patch:
@@ -147,7 +147,7 @@ protected int run() throws Exception {
             SCMTriggerItem item = SCMTriggerItem.SCMTriggerItems.asSCMTriggerItem(job);
             if (item == null)
                 throw new AbortException(job.getFullDisplayName()+" has no SCM trigger, but checkSCM was specified");
-            // pre-emtively check for a polling veto
+            // preemptively check for a polling veto
             if (SCMDecisionHandler.firstShouldPollVeto(job) != null) {
                 return 0;
             }

File: core/src/main/java/hudson/cli/CLICommand.java
Patch:
@@ -401,11 +401,11 @@ public void setTransportAuth(Authentication transportAuth) {
      * @throws IllegalArgumentException
      *      If the execution can't continue due to wrong input parameter (job doesn't exist etc.)
      * @throws IllegalStateException
-     *      If the execution can't continue due to an incorect state of Jenkins, job, build etc.
+     *      If the execution can't continue due to an incorrect state of Jenkins, job, build etc.
      * @throws AbortException
      *      If the execution can't continue due to an other (rare, but foreseeable) issue
      * @throws AccessDeniedException
-     *      If the caller doesn't have sufficent rights for requested action
+     *      If the caller doesn't have sufficient rights for requested action
      * @throws BadCredentialsException
      *      If bad credentials were provided to CLI
      */

File: core/src/main/java/hudson/cli/handlers/ViewOptionHandler.java
Patch:
@@ -88,7 +88,7 @@ public int parseArguments(Parameters params) throws CmdLineException {
      * @throws IllegalStateException
      *      If cannot get active Jenkins instance or view can't contain a views
      * @throws AccessDeniedException
-     *      If user doens't have a READ permission for the view
+     *      If user doesn't have a READ permission for the view
      * @since 1.618
      */
     @CheckForNull

File: core/src/main/java/hudson/init/impl/InstallUncaughtExceptionHandler.java
Patch:
@@ -45,7 +45,7 @@ public void reportException(Throwable e, ServletContext context, HttpServletRequ
                                                        "Failed to set the default UncaughtExceptionHandler.  " + 
                                                        "If any threads die due to unhandled coding errors then there will be no logging of this information.  " +
                                                        "The lack of this diagnostic information will make it harder to track down issues which will reduce the supportability of Jenkins.  " + 
-                                                       "It is highly recomended that you consult the documentation that comes with you servlet container on how to allow the " + 
+                                                       "It is highly recommended that you consult the documentation that comes with you servlet container on how to allow the " + 
                                                        "`setDefaultUncaughtExceptionHandler` permission and enable it.", ex);
         }
     }

File: core/src/main/java/hudson/init/package-info.java
Patch:
@@ -33,7 +33,7 @@
  *
  * <p>
  * Such micro-scopic dependencies are organized into a bigger directed acyclic graph, which is then executed
- * via <tt>Session</tt>. During execution of the reactor, additional tasks can be discovred and added to
+ * via <tt>Session</tt>. During execution of the reactor, additional tasks can be discovered and added to
  * the DAG. We use this additional indirection to:
  *
  * <ol>

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -853,7 +853,7 @@ public Collection<Fingerprint> getBuildFingerprints() {
     }
 
 	/*
-     * No need to to lock the entire AbstractBuild on change set calculcation
+     * No need to lock the entire AbstractBuild on change set calculation
      */
     private transient Object changeSetLock = new Object();
     

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1151,7 +1151,7 @@ public CauseOfBlockage getCauseOfBlockage() {
                 return new BlockedBecauseOfBuildInProgress(lastBuild);
             } else {
                 // The build has been likely deleted after the isLogUpdated() call.
-                // Another cause may be an API implemetation glitсh in the implementation for AbstractProject. 
+                // Another cause may be an API implementation glitсh in the implementation for AbstractProject. 
                 // Anyway, we should let the code go then.
                 LOGGER.log(Level.FINE, "The last build has been deleted during the non-concurrent cause creation. The build is not blocked anymore");
             }
@@ -1618,7 +1618,7 @@ void removeFromList(Descriptor<T> item, List<T> collection) throws IOException {
     }
 
     /**
-     * Gets the specific trigger, or null if the propert is not configured for this job.
+     * Gets the specific trigger, or null if the property is not configured for this job.
      */
     public <T extends Trigger> T getTrigger(Class<T> clazz) {
         for (Trigger p : triggers()) {

File: core/src/main/java/hudson/model/Actionable.java
Patch:
@@ -165,7 +165,7 @@ public void addAction(@Nonnull Action a) {
      * @since 1.548
      * @see #addOrReplaceAction(Action) if you want to know whether the backing {@link #actions} was modified, for
      * example in cases where the caller would need to persist the {@link Actionable} in order to persist the change
-     * and there is a desire to elide unneccessary persistence of unmodified objects.
+     * and there is a desire to elide unnecessary persistence of unmodified objects.
      */
     @SuppressWarnings({"ConstantConditions", "deprecation"})
     @SuppressFBWarnings("RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE")

File: core/src/main/java/hudson/model/ChoiceParameterDefinition.java
Patch:
@@ -105,7 +105,7 @@ public String getHelpFile() {
         }
 
         /**
-         * Checks if parameterised build choices are valid.
+         * Checks if parameterized build choices are valid.
          */
         public FormValidation doCheckChoices(@QueryParameter String value) {
             if (ChoiceParameterDefinition.areValidChoices(value)) {

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -190,7 +190,7 @@
     protected final Object statusChangeLock = new Object();
 
     /**
-     * Keeps track of stack traces to track the tremination requests for this computer.
+     * Keeps track of stack traces to track the termination requests for this computer.
      *
      * @since 1.607
      * @see Executor#resetWorkUnit(String)
@@ -1274,7 +1274,7 @@ private static class ListPossibleNames extends MasterToSlaveCallable<List<String
          * and then it would need to be loaded, which pulls in {@link Jenkins} and loads that
          * and then that fails to load as you are not supposed to do that. Another option
          * would be to export the logger over remoting, with increased complexity as a result.
-         * Instead we just use a loger based on this class name and prevent any references to
+         * Instead we just use a logger based on this class name and prevent any references to
          * other classes from being transferred over remoting.
          */
         private static final Logger LOGGER = Logger.getLogger(ListPossibleNames.class.getName());

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -456,7 +456,7 @@ public void calcAutoCompleteSettings(String field, Map<String,Object> attributes
     }
 
     /**
-     * Used by Jelly to abstract away the handlign of global.jelly vs config.jelly databinding difference.
+     * Used by Jelly to abstract away the handling of global.jelly vs config.jelly databinding difference.
      */
     public @CheckForNull PropertyType getPropertyType(@Nonnull Object instance, @Nonnull String field) {
         // in global.jelly, instance==descriptor
@@ -792,7 +792,7 @@ public boolean configure( StaplerRequest req ) throws FormException {
     /**
      * Invoked when the global configuration page is submitted.
      *
-     * Can be overriden to store descriptor-specific information.
+     * Can be overridden to store descriptor-specific information.
      *
      * @param json
      *      The JSON object that captures the configuration data for this {@link Descriptor}.

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -568,7 +568,7 @@ public List<JobProperty<? super JobT>> getAllProperties() {
     }
 
     /**
-     * Gets the specific property, or null if the propert is not configured for
+     * Gets the specific property, or null if the property is not configured for
      * this job.
      */
     public <T extends JobProperty> T getProperty(Class<T> clazz) {

File: core/src/main/java/hudson/model/JobPropertyDescriptor.java
Patch:
@@ -91,7 +91,7 @@ public boolean isApplicable(Class<? extends Job> jobType) {
             Class applicable = Types.erasure(Types.getTypeArgument(pt, 0));
             return applicable.isAssignableFrom(jobType);
         } else {
-            throw new AssertionError(clazz+" doesn't properly parameterize JobProperty. The isApplicable() method must be overriden.");
+            throw new AssertionError(clazz+" doesn't properly parameterize JobProperty. The isApplicable() method must be overridden.");
         }
     }
 

File: core/src/main/java/hudson/model/Label.java
Patch:
@@ -574,7 +574,7 @@ public Object unmarshal(HierarchicalStreamReader reader, final UnmarshallingCont
     }
 
     /**
-     * Convers a whitespace-separate list of tokens into a set of {@link Label}s.
+     * Convert a whitespace-separate list of tokens into a set of {@link Label}s.
      *
      * @param labels
      *      Strings like "abc def ghi". Can be empty or null.

File: core/src/main/java/hudson/model/PageDecorator.java
Patch:
@@ -35,7 +35,7 @@
  * Participates in the rendering of HTML pages for all pages of Hudson.
  *
  * <p>
- * This class provides a few hooks to augument the HTML generation process of Hudson, across
+ * This class provides a few hooks to augment the HTML generation process of Hudson, across
  * all the HTML pages that Hudson delivers.
  *
  * <p>

File: core/src/main/java/hudson/model/ParameterDefinition.java
Patch:
@@ -79,7 +79,7 @@
  * through XStream.
  *
  *
- * <h2>Assocaited Views</h2>
+ * <h2>Associated Views</h2>
  * <h4>config.jelly</h4>
  * <p>
  * {@link ParameterDefinition} class uses <tt>config.jelly</tt> to contribute a form

File: core/src/main/java/hudson/model/ParameterValue.java
Patch:
@@ -276,7 +276,7 @@ public boolean equals(Object obj) {
      *
      * <P>
      * This message is used as a tooltip to describe jobs in the queue. The text should be one line without
-     * new line. No HTML allowed (the caller will perform necessary HTML escapes, so any text can be returend.)
+     * new line. No HTML allowed (the caller will perform necessary HTML escapes, so any text can be returned.)
      *
      * @since 1.323
      */

File: core/src/main/java/hudson/model/PermalinkProjectAction.java
Patch:
@@ -49,7 +49,7 @@ public interface PermalinkProjectAction extends Action {
      *
      * <p>
      * Because {@link Permalink} is a strategy-pattern object,
-     * this method should normally return a pre-initialzied
+     * this method should normally return a pre-initialized
      * read-only static list object.  
      *
      * @return

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -553,7 +553,7 @@ public WaitingItem schedule(Task p, int quietPeriod, List<Action> actions) {
      * @param actions
      *      These actions can be used for associating information scoped to a particular build, to
      *      the task being queued. Upon the start of the build, these {@link Action}s will be automatically
-     *      added to the {@link Run} object, and hence avaialable to everyone.
+     *      added to the {@link Run} object, and hence available to everyone.
      *      For the convenience of the caller, this list can contain null, and those will be silently ignored.
      * @since 1.311
      * @return
@@ -2822,7 +2822,7 @@ public T cancel(Task p) {
 
         @SuppressFBWarnings(value = "IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD",
                 justification = "It will invoke the inherited clear() method according to Java semantics. "
-                              + "FindBugs recommends suppresing warnings in such case")
+                              + "FindBugs recommends suppressing warnings in such case")
         public void cancelAll() {
             for (T t : new ArrayList<T>(this))
                 t.cancel(Queue.this);

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -688,7 +688,7 @@ public String getDescription() {
 
         String truncDesc = description;
 
-        // Could not find a preferred truncable index, force a trunc at maxTruncLength
+        // Could not find a preferred truncatable index, force a trunc at maxTruncLength
         if (lastTruncatablePoint == -1)
             lastTruncatablePoint = maxTruncLength;
 
@@ -1213,7 +1213,7 @@ public void computeDisplayName() {
 //                        continue OUTER; // collision. Increase n and try again
 //                }
 //
-//                // this n successfully diambiguates
+//                // this n successfully disambiguates
 //                for (int i = 0; i < tokens.length; i++) {
 //                    String[] token = tokens[i];
 //                    get(i).displayPath = combineLast(token,n);

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -84,7 +84,7 @@
  * <p>
  * TODO: move out more stuff to {@link DumbSlave}.
  * 
- * On Febrary, 2016 a general renaming was done internally: the "slave" term was replaced by
+ * On February, 2016 a general renaming was done internally: the "slave" term was replaced by
  * "Agent". This change was applied in: UI labels/HTML pages, javadocs and log messages.
  * Java classes, fields, methods, etc were not renamed to avoid compatibility issues.
  * See <a href="https://issues.jenkins-ci.org/browse/JENKINS-27268">JENKINS-27268</a>.
@@ -123,7 +123,7 @@ public abstract class Slave extends Node implements Serializable {
     private Mode mode = Mode.NORMAL;
 
     /**
-     * Agent availablility strategy.
+     * Agent availability strategy.
      */
     private RetentionStrategy retentionStrategy;
 
@@ -496,7 +496,7 @@ public FormValidation doCheckRemoteFS(@QueryParameter String value) throws IOExc
          * @since 2.12
          */
         @Nonnull
-        @Restricted(NoExternalUse.class) // intedned for use by Jelly EL only (plus hack in DelegatingComputerLauncher)
+        @Restricted(NoExternalUse.class) // intended for use by Jelly EL only (plus hack in DelegatingComputerLauncher)
         public final List<Descriptor<ComputerLauncher>> computerLauncherDescriptors(@CheckForNull Slave it) {
             DescriptorExtensionList<ComputerLauncher, Descriptor<ComputerLauncher>> all =
                     Jenkins.getInstance().<ComputerLauncher, Descriptor<ComputerLauncher>>getDescriptorList(

File: core/src/main/java/hudson/model/TaskAction.java
Patch:
@@ -49,7 +49,7 @@
  */
 public abstract class TaskAction extends AbstractModelObject implements Action {
     /**
-     * If non-null, that means either the activitiy is in progress
+     * If non-null, that means either the activity is in progress
      * asynchronously, or it failed unexpectedly and the thread is dead.
      */
     protected transient volatile TaskThread workerThread;

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -255,7 +255,7 @@ public UpdateCenter() {
     public static UpdateCenter createUpdateCenter(@CheckForNull UpdateCenterConfiguration config) {
         String requiredClassName = SystemProperties.getString(UpdateCenter.class.getName()+".className", null);
         if (requiredClassName == null) {
-            // Use the defaul Update Center
+            // Use the default Update Center
             LOGGER.log(Level.FINE, "Using the default Update Center implementation");
             return createDefaultUpdateCenter(config);
         }

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -109,7 +109,7 @@ public class UpdateSite {
      *
      * <p>
      * There's normally some delay between when we send HTML that includes the check code,
-     * until we get the data back, so this variable is used to avoid asking too many browseres
+     * until we get the data back, so this variable is used to avoid asking too many browsers
      * all at once.
      */
     private transient volatile long lastAttempt;

File: core/src/main/java/hudson/model/UsageStatistics.java
Patch:
@@ -206,7 +206,7 @@ public boolean configure(StaplerRequest req, JSONObject json) throws FormExcepti
     }
 
     /**
-     * Asymmetric cipher is slow and in case of Sun RSA implementation it can only encyrypt the first block.
+     * Asymmetric cipher is slow and in case of Sun RSA implementation it can only encrypt the first block.
      *
      * So first create a symmetric key, then place this key in the beginning of the stream by encrypting it
      * with the asymmetric cipher. The rest of the stream will be encrypted by a symmetric cipher.

File: core/src/main/java/hudson/model/listeners/ItemListener.java
Patch:
@@ -136,7 +136,7 @@ public void onUpdated(Item item) {
 
     /**
      * @since 1.446
-     *      Called at the begenning of the orderly shutdown sequence to
+     *      Called at the beginning of the orderly shutdown sequence to
      *      allow plugins to clean up stuff
      */
     public void onBeforeShutdown() {

File: core/src/main/java/hudson/model/listeners/SCMListener.java
Patch:
@@ -51,7 +51,7 @@
  * This is an abstract class so that methods added in the future won't break existing listeners.
  *
  * <p>
- * Once instanciated, use the {@link #register()} method to start receiving events. 
+ * Once instantiated, use the {@link #register()} method to start receiving events. 
  *
  * @author Kohsuke Kawaguchi
  * @see jenkins.model.Jenkins#getSCMListeners()

File: core/src/main/java/hudson/node_monitors/AbstractAsyncNodeMonitorDescriptor.java
Patch:
@@ -23,7 +23,7 @@
  * performs monitoring on all agents concurrently and asynchronously.
  *
  * @param <T>
- *     represents the the result of the monitoring.
+ *     represents the result of the monitoring.
  * @author Kohsuke Kawaguchi
  */
 public abstract class AbstractAsyncNodeMonitorDescriptor<T> extends AbstractNodeMonitorDescriptor<T> {

File: core/src/main/java/hudson/node_monitors/AbstractNodeMonitorDescriptor.java
Patch:
@@ -49,7 +49,7 @@
  * and taking some action based on its result.
  *
  * @param <T>
- *     represents the the result of the monitoring.
+ *     represents the result of the monitoring.
  * @author Kohsuke Kawaguchi
  */
 public abstract class AbstractNodeMonitorDescriptor<T> extends Descriptor<NodeMonitor> {

File: core/src/main/java/hudson/org/apache/tools/tar/TarInputStream.java
Patch:
@@ -53,7 +53,7 @@ public class TarInputStream extends FilterInputStream {
 
     /**
      * This contents of this array is not used at all in this class,
-     * it is only here to avoid repreated object creation during calls
+     * it is only here to avoid repeated object creation during calls
      * to the no-arg read method.
      */
     protected byte[] oneBuf;
@@ -126,7 +126,7 @@ public int getRecordSize() {
      * is left in the entire archive, only in the current entry.
      * This value is determined from the entry's size header field
      * and the amount of data already read from the current entry.
-     * Integer.MAX_VALUE is returen in case more than Integer.MAX_VALUE
+     * Integer.MAX_VALUE is returned in case more than Integer.MAX_VALUE
      * bytes are left in the current entry in the archive.
      *
      * @return The number of available bytes for the current entry.
@@ -246,7 +246,7 @@ public TarEntry getNextEntry() throws IOException {
             this.currEntry = new TarEntry(headerBuf);
 
             if (this.debug) {
-                System.err.println("TarInputStream: SET CURRENTRY '"
+                System.err.println("TarInputStream: SET currENTRY '"
                         + this.currEntry.getName()
                         + "' size = "
                         + this.currEntry.getSize());

File: core/src/main/java/hudson/os/SU.java
Patch:
@@ -152,7 +152,7 @@ VirtualChannel start(TaskListener listener, String rootPassword) throws IOExcept
             ArgumentListBuilder args = new ArgumentListBuilder().add(javaExe);
             if(slaveJar.isFile())
                 args.add("-jar").add(slaveJar);
-            else // in production code this never happens, but during debugging this is convenientud    
+            else // in production code this never happens, but during debugging this is convenient    
                 args.add("-cp").add(slaveJar).add(hudson.remoting.Launcher.class.getName());
 
             if(rootPassword==null) {

File: core/src/main/java/hudson/scheduler/BaseParser.java
Patch:
@@ -37,7 +37,7 @@
  * @author Kohsuke Kawaguchi
  */
 abstract class BaseParser extends LLkParser {
-    // lower/uppser bounds of fields (inclusive)
+    // lower/upper bounds of fields (inclusive)
     static final int[] LOWER_BOUNDS = new int[] {0,0,1,1,0};
     static final int[] UPPER_BOUNDS = new int[] {59,23,31,12,7};
 

File: core/src/main/java/hudson/search/Search.java
Patch:
@@ -211,7 +211,7 @@ void find(SearchIndex index, String token, List<SearchItem> result) {
     }
 
     /**
-     * When there are mutiple suggested items, this method can narrow down the resultset
+     * When there are multiple suggested items, this method can narrow down the resultset
      * to the SuggestedItem that has a url that contains the query. This is useful is one
      * job has a display name that matches another job's project name.
      * @param r A list of Suggested items. It is assumed that there is at least one 
@@ -324,7 +324,7 @@ public TokenList(String tokenList) {
 
         /**
          * Returns {@link List} such that its <tt>get(end)</tt>
-         * returns the concatanation of [token_start,...,token_end]
+         * returns the concatenation of [token_start,...,token_end]
          * (both end inclusive.)
          */
         public List<String> subSequence(final int start) {

File: core/src/main/java/hudson/security/BasicAuthenticationFilter.java
Patch:
@@ -43,12 +43,12 @@
 import java.net.URLEncoder;
 
 /**
- * Implements the dual authentcation mechanism.
+ * Implements the dual authentication mechanism.
  *
  * <p>
  * Jenkins supports both the HTTP basic authentication and the form-based authentication.
  * The former is for scripted clients, and the latter is for humans. Unfortunately,
- * because the servlet spec does not allow us to programatically authenticate users,
+ * because the servlet spec does not allow us to programmatically authenticate users,
  * we need to rely on some hack to make it work, and this is the class that implements
  * that hack.
  *

File: core/src/main/java/hudson/security/Permission.java
Patch:
@@ -314,7 +314,7 @@ public boolean getEnabled() {
 //
 // Root Permissions.
 //
-// These permisisons are meant to be used as the 'impliedBy' permission for other more specific permissions.
+// These permissions are meant to be used as the 'impliedBy' permission for other more specific permissions.
 // The intention is to allow a simplified AuthorizationStrategy implementation agnostic to
 // specific permissions.
 

File: core/src/main/java/hudson/slaves/ComputerLauncher.java
Patch:
@@ -82,7 +82,7 @@ public boolean isLaunchSupported() {
      * @throws IOException
      *      if the method throws an {@link IOException} or {@link InterruptedException}, the launch was considered
      *      a failure and the stack trace is reported into the listener. This handling is just so that the implementation
-     *      of this method doesn't have to dilligently catch those exceptions.
+     *      of this method doesn't have to diligently catch those exceptions.
      */
     public void launch(SlaveComputer computer, TaskListener listener) throws IOException , InterruptedException {
         // to remain compatible with the legacy implementation that overrides the old signature
@@ -197,7 +197,7 @@ protected static void checkJavaVersion(final PrintStream logger, String javaComm
                 return;
             }
         }
-        logger.println(Messages.ComputerLauncher_UknownJavaVersion(javaCommand));
-        throw new IOException(Messages.ComputerLauncher_UknownJavaVersion(javaCommand));
+        logger.println(Messages.ComputerLauncher_UnknownJavaVersion(javaCommand));
+        throw new IOException(Messages.ComputerLauncher_UnknownJavaVersion(javaCommand));
     }
 }

File: core/src/main/java/hudson/slaves/NodeDescriptor.java
Patch:
@@ -99,7 +99,7 @@ public String getConfigPage() {
     public FormValidation doCheckName(@QueryParameter String value ) {
         String name = Util.fixEmptyAndTrim(value);
         if(name==null)
-            return FormValidation.error(Messages.NodeDescripter_CheckName_Mandatory());
+            return FormValidation.error(Messages.NodeDescriptor_CheckName_Mandatory());
         try {
             Jenkins.checkGoodName(name);
         } catch (Failure f) {

File: core/src/main/java/hudson/slaves/RetentionStrategy.java
Patch:
@@ -181,7 +181,7 @@ public static class Demand extends RetentionStrategy<SlaveComputer> {
         private static final Logger logger = Logger.getLogger(Demand.class.getName());
 
         /**
-         * The delay (in minutes) for which the agent must be in demand before tring to launch it.
+         * The delay (in minutes) for which the agent must be in demand before trying to launch it.
          */
         private final long inDemandDelay;
 

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -557,7 +557,7 @@ public void onClosed(Channel c, IOException cause) {
         // update the data structure atomically to prevent others from seeing a channel that's not properly initialized yet
         synchronized(channelLock) {
             if(this.channel!=null) {
-                // check again. we used to have this entire method in a big sycnhronization block,
+                // check again. we used to have this entire method in a big synchronization block,
                 // but Channel constructor blocks for an external process to do the connection
                 // if CommandLauncher is used, and that cannot be interrupted because it blocks at InputStream.
                 // so if the process hangs, it hangs the thread in a lock, and since Hudson will try to relaunch,

File: core/src/main/java/hudson/tasks/Maven.java
Patch:
@@ -298,7 +298,7 @@ public boolean perform(AbstractBuild<?,?> build, Launcher launcher, BuildListene
         int startIndex = 0;
         int endIndex;
         do {
-            // split targets into multiple invokations of maven separated by |
+            // split targets into multiple invocations of maven separated by |
             endIndex = targets.indexOf('|', startIndex);
             if (-1 == endIndex) {
                 endIndex = targets.length();

File: core/src/main/java/hudson/tasks/Publisher.java
Patch:
@@ -101,7 +101,7 @@ public Action getProjectAction(Project project) {
      * to include their execution time in the total build time.
      *
      * <p>
-     * So normally, that is the preferrable behavior, but in a few cases
+     * So normally, that is the preferable behavior, but in a few cases
      * this is problematic. One of such cases is when a publisher needs to
      * trigger other builds, which in turn need to see this build as a
      * completed build. Those plugins that need to do this can return true

File: core/src/main/java/hudson/tasks/UserNameResolver.java
Patch:
@@ -58,7 +58,7 @@ public abstract class UserNameResolver implements ExtensionPoint {
      *
      * <p>
      * When multiple resolvers are installed, they are consulted in order and
-     * the search will be over when a name is found by someoene.
+     * the search will be over when a name is found by someone.
      *
      * <p>
      * Since {@link UserNameResolver} is singleton, this method can be invoked concurrently

File: core/src/main/java/hudson/tools/DownloadFromUrlInstaller.java
Patch:
@@ -37,7 +37,7 @@ protected DownloadFromUrlInstaller(String id) {
     /**
      * Checks if the specified expected location already contains the installed version of the tool.
      *
-     * This check needs to run fairly efficiently. The current implementation uses the souce URL of {@link Installable},
+     * This check needs to run fairly efficiently. The current implementation uses the source URL of {@link Installable},
      * based on the assumption that released bits do not change its content.
      */
     protected boolean isUpToDate(FilePath expectedLocation, Installable i) throws IOException, InterruptedException {

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -160,7 +160,7 @@ public void run() {
 
     /**
      * Run the SCM trigger with additional build actions. Used by SubversionRepositoryStatus
-     * to trigger a build at a specific revisionn number.
+     * to trigger a build at a specific revision number.
      * 
      * @param additionalActions
      * @since 1.375
@@ -597,7 +597,7 @@ public void run() {
             if (job == null) {
                 return;
             }
-            // we can pre-emtively check the SCMDecisionHandler instances here
+            // we can preemptively check the SCMDecisionHandler instances here
             // note that job().poll(listener) should also check this
             SCMDecisionHandler veto = SCMDecisionHandler.firstShouldPollVeto(job);
             if (veto != null) {

File: core/src/main/java/hudson/util/ByteArrayOutputStream2.java
Patch:
@@ -26,7 +26,7 @@ public byte[] getBuffer() {
     public void readFrom(InputStream is) throws IOException {
         while(true) {
             if(count==buf.length) {
-                // realllocate
+                // reallocate
                 byte[] data = new byte[buf.length*2];
                 System.arraycopy(buf,0,data,0,buf.length);
                 buf = data;

File: core/src/main/java/hudson/util/CharacterEncodingFilter.java
Patch:
@@ -90,7 +90,7 @@ private boolean shouldSetCharacterEncoding(HttpServletRequest req) {
 
         // containers often implement RFCs incorrectly in that it doesn't interpret query parameter
         // decoding with UTF-8. This will ensure we get it right.
-        // but doing this for config.xml submission could potentiall overwrite valid
+        // but doing this for config.xml submission could potentially overwrite valid
         // "text/xml;charset=xxx"
         String contentType = req.getContentType();
         if (contentType != null) {

File: core/src/main/java/hudson/util/ChunkedInputStream.java
Patch:
@@ -67,7 +67,7 @@ public class ChunkedInputStream extends InputStream {
     /** The current position within the current chunk */
     private int pos;
 
-    /** True if we'are at the beginning of stream */
+    /** True if we're at the beginning of stream */
     private boolean bof = true;
 
     /** True if we've reached the end of stream */
@@ -101,7 +101,7 @@ public ChunkedInputStream(
      * is followed by a CRLF. The method returns -1 as soon as a chunksize of 0
      * is detected.</p>
      *
-     * <p> Trailer headers are read automcatically at the end of the stream and
+     * <p> Trailer headers are read automatically at the end of the stream and
      * can be obtained with the getResponseFooters() method.</p>
      *
      * @return -1 of the end of the stream has been reached or the next data

File: core/src/main/java/hudson/util/CompressedFile.java
Patch:
@@ -44,14 +44,14 @@
 import com.jcraft.jzlib.GZIPOutputStream;
 
 /**
- * Represents write-once read-many file that can be optiionally compressed
+ * Represents write-once read-many file that can be optionally compressed
  * to save disk space. This is used for console output and other bulky data.
  *
  * <p>
  * In this class, the data on the disk can be one of two states:
  * <ol>
  * <li>Uncompressed, in which case the original data is available in the specified file name.
- * <li>Compressed, in which case the gzip-compressed data is available in the specifiled file name + ".gz" extension.
+ * <li>Compressed, in which case the gzip-compressed data is available in the specified file name + ".gz" extension.
  * </ol>
  *
  * Once the file is written and completed, it can be compressed asynchronously

File: core/src/main/java/hudson/util/DescribableList.java
Patch:
@@ -200,7 +200,7 @@ public void rebuild(StaplerRequest req, JSONObject json, List<? extends Descript
      * Rebuilds the list by creating a fresh instances from the submitted form.
      *
      * <p>
-     * This version works with the the &lt;f:hetero-list> UI tag, where the user
+     * This version works with the &lt;f:hetero-list> UI tag, where the user
      * is allowed to create multiple instances of the same descriptor. Order is also
      * significant.
      */
@@ -249,7 +249,7 @@ public interface Owner extends Saveable {
     /**
      * {@link Converter} implementation for XStream.
      *
-     * Serializaion form is compatible with plain {@link List}.
+     * Serialization form is compatible with plain {@link List}.
      */
     public static class ConverterImpl extends AbstractCollectionConverter {
         CopyOnWriteList.ConverterImpl copyOnWriteListConverter;

File: core/src/main/java/hudson/util/DescriptorList.java
Patch:
@@ -54,7 +54,7 @@
  * <p>
  * The other mode is the new mode, where the {@link Descriptor}s are actually stored in {@link ExtensionList}
  * (see {@link jenkins.model.Jenkins#getDescriptorList(Class)}) and this class acts as a view to it. This enables
- * bi-directional interoperability &mdash; both descriptors registred automatically and descriptors registered
+ * bi-directional interoperability &mdash; both descriptors registered automatically and descriptors registered
  * manually are visible from both {@link DescriptorList} and {@link ExtensionList}. In this mode,
  * {@link #legacy} is null but {@link #type} is non-null.
  *

File: core/src/main/java/hudson/util/DoubleLaunchChecker.java
Patch:
@@ -61,7 +61,7 @@
  *
  * <p>
  * More traditional way of doing this is to use a lock file with PID in it, but unfortunately in Java,
- * there's no reliabe way to obtain PID.
+ * there's no reliable way to obtain PID.
  *
  * @author Kohsuke Kawaguchi
  * @since 1.178

File: core/src/main/java/hudson/util/FormFieldValidator.java
Patch:
@@ -133,7 +133,7 @@ public final void process() throws IOException, ServletException {
                     throw new AccessDeniedException("No subject");
                 subject.checkPermission(permission);
             } catch (AccessDeniedException e) {
-                // if the user has hudson-wisde admin permission, all checks are allowed
+                // if the user has hudson-wide admin permission, all checks are allowed
                 // this is to protect Hudson administrator from broken ACL/SecurityRealm implementation/configuration.
                 if(!Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER))
                     throw e;
@@ -481,7 +481,7 @@ protected void check() throws IOException, ServletException {
                     else                    warning(msg);
                 }
             } catch (InterruptedException e) {
-                ok(); // coundn't check
+                ok(); // couldn't check
             }
         }
 

File: core/src/main/java/hudson/util/FormValidation.java
Patch:
@@ -511,7 +511,7 @@ private String getCharset(URLConnection con) {
         }
 
         /**
-         * Implement the actual form validation logic, by using other convenience methosd defined in this class.
+         * Implement the actual form validation logic, by using other convenience methods defined in this class.
          * If you are not using any of those, you don't need to extend from this class.
          */
         protected abstract FormValidation check() throws IOException, ServletException;

File: core/src/main/java/hudson/util/IOUtils.java
Patch:
@@ -71,7 +71,7 @@ public static File mkdirs(File dir) throws IOException {
      *
      * <p>
      * {@link InputStream#skip(long)} has two problems. One is that
-     * it doesn't let us reliably differentiate "hit EOF" case vs "inpustream just returning 0 since there's no data
+     * it doesn't let us reliably differentiate "hit EOF" case vs "inputstream just returning 0 since there's no data
      * currently available at hand", and some subtypes (such as {@link FileInputStream#skip(long)} returning -1.
      *
      * <p>

File: core/src/main/java/hudson/util/ListBoxModel.java
Patch:
@@ -50,7 +50,7 @@
  *
  * <pre><xmp>
  * <select id='foo'>
- *   <option>Fetching values...</optoin>
+ *   <option>Fetching values...</option>
  * </select>
  * </xmp></pre>
  *

File: core/src/main/java/hudson/util/PersistedList.java
Patch:
@@ -217,7 +217,7 @@ public boolean contains(Object item) {
     /**
      * {@link Converter} implementation for XStream.
      *
-     * Serializaion form is compatible with plain {@link List}.
+     * Serialization form is compatible with plain {@link List}.
      */
     public static class ConverterImpl extends AbstractCollectionConverter {
         CopyOnWriteList.ConverterImpl copyOnWriteListConverter;

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -1110,7 +1110,7 @@ private void parse() {
                     // for some reason, I was never able to get sysctlbyname work.
 //        if(LIBC.sysctlbyname("kern.argmax", argmaxRef.getPointer(), size, NULL, _)!=0)
                     if(LIBC.sysctl(new int[]{CTL_KERN,KERN_ARGMAX},2, argmaxRef.getPointer(), size, NULL, _)!=0)
-                        throw new IOException("Failed to get kernl.argmax: "+LIBC.strerror(Native.getLastError()));
+                        throw new IOException("Failed to get kern.argmax: "+LIBC.strerror(Native.getLastError()));
 
                     int argmax = argmaxRef.getValue();
 

File: core/src/main/java/hudson/util/RunList.java
Patch:
@@ -77,7 +77,7 @@ public RunList(Collection<? extends Job> jobs) {
     }
 
     /**
-     * Createsa a {@link RunList} combining all the runs of the supplied jobs.
+     * Creates a a {@link RunList} combining all the runs of the supplied jobs.
      *
      * @param jobs the supplied jobs.
      * @param <J> the base class of job.

File: core/src/main/java/hudson/util/SequentialExecutionQueue.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class SequentialExecutionQueue implements Executor {
     /**
-     * Access is sycnhronized by {@code Queue.this}
+     * Access is synchronized by {@code Queue.this}
      */
     private final Map<Runnable,QueueEntry> entries = new HashMap<Runnable,QueueEntry>();
     private ExecutorService executors;

File: core/src/main/java/hudson/util/spring/BeanBuilder.java
Patch:
@@ -147,7 +147,7 @@ public ApplicationContext getParentCtx() {
 	}
 
 	/**
-	 * Retrieves the RuntimeSpringConfiguration instance used the the BeanBuilder
+	 * Retrieves the RuntimeSpringConfiguration instance used by the BeanBuilder
 	 * @return The RuntimeSpringConfiguration instance
 	 */
 	public RuntimeSpringConfiguration getSpringConfig() {
@@ -198,7 +198,7 @@ public void setSpringConfig(RuntimeSpringConfiguration springConfig) {
 	/**
 	 * This class is used to defer the adding of a property to a bean definition until later
 	 * This is for a case where you assign a property to a list that may not contain bean references at
-	 * that point of asignment, but may later hence it would need to be managed
+	 * that point of assignment, but may later hence it would need to be managed
 	 *
 	 * @author Graeme Rocher
 	 */

File: core/src/main/java/hudson/util/spring/RuntimeSpringConfiguration.java
Patch:
@@ -171,7 +171,7 @@ interface RuntimeSpringConfiguration extends ServletContextAware {
     BeanConfiguration getBeanConfig(String name);
 
     /**
-     * Creates and returns the BeanDefinition that is regsitered within the given name or returns null
+     * Creates and returns the BeanDefinition that is registered within the given name or returns null
      *
      * @param name The name of the bean definition
      * @return A BeanDefinition

File: core/src/main/java/hudson/views/ListViewColumn.java
Patch:
@@ -54,7 +54,7 @@
  * the &lt;td> tag.
  *
  * <p>
- * This object may have an additional <tt>columHeader.jelly</tt>. The default ColmnHeader
+ * This object may have an additional <tt>columnHeader.jelly</tt>. The default ColumnHeader
  * will render {@link #getColumnCaption()}.
  *
  * <p>

File: core/src/main/java/jenkins/install/InstallState.java
Patch:
@@ -52,7 +52,7 @@ public class InstallState implements ExtensionPoint {
     public static final InstallState UNKNOWN = new InstallState("UNKNOWN", true);
     
     /**
-     * After any setup / restart / etc. hooks are done, states hould be running
+     * After any setup / restart / etc. hooks are done, states should be running
      */
     @Extension
     public static final InstallState RUNNING = new InstallState("RUNNING", true);
@@ -151,7 +151,7 @@ public void initializeState() {
     public static final InstallState TEST = new InstallState("TEST", true);
     
     /**
-     * Jenkins started in development mode: Bolean.getBoolean("hudson.Main.development").
+     * Jenkins started in development mode: Boolean.getBoolean("hudson.Main.development").
      * Can be run normally with the -Djenkins.install.runSetupWizard=true
      */
     public static final InstallState DEVELOPMENT = new InstallState("DEVELOPMENT", true);

File: core/src/main/java/jenkins/install/InstallUtil.java
Patch:
@@ -91,7 +91,7 @@ public T get() {
      */
     public static void proceedToNextStateFrom(InstallState prior) {
         InstallState next = getNextInstallState(prior);
-        if (Main.isDevelopmentMode) LOGGER.info("Install state tranisitioning from: " + prior + " to: " + next);
+        if (Main.isDevelopmentMode) LOGGER.info("Install state transitioning from: " + prior + " to: " + next);
         if (next != null) {
             Jenkins.getInstance().setInstallState(next);
         }

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -339,7 +339,7 @@ public JSONArray getPlatformPluginUpdates() {
     
     /**
      * Gets the suggested plugin list from the update sites, falling back to a local version
-     * @return JSON array with the categorized plugon list
+     * @return JSON array with the categorized plugin list
      */
     @CheckForNull
     /*package*/ JSONArray getPlatformPluginList() {

File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java
Patch:
@@ -293,7 +293,7 @@ public R get(int n) {
     }
 
     /**
-     * Checks if the the specified build exists.
+     * Checks if the specified build exists.
      *
      * @param number the build number to probe.
      * @return {@code true} if there is an run for the corresponding number, note that this does not mean that

File: core/src/main/java/jenkins/mvn/GlobalSettingsProvider.java
Patch:
@@ -24,7 +24,7 @@ public abstract class GlobalSettingsProvider extends AbstractDescribableImpl<Glo
      * configure maven launcher argument list with adequate settings path
      * 
      * @param build
-     *            the build to provide the settigns for
+     *            the build to provide the settings for
      * @return the filepath to the provided file. <code>null</code> if no settings will be provided.
      */
     public abstract FilePath supplySettings(AbstractBuild<?, ?> build, TaskListener listener);

File: core/src/main/java/jenkins/security/s2m/AdminCallableMonitor.java
Patch:
@@ -49,7 +49,7 @@ public AdminWhitelistRule getRule() {
     }
 
     /**
-     * Depending on whether the user said "examin" or "dismiss", send him to the right place.
+     * Depending on whether the user said "examine" or "dismiss", send him to the right place.
      */
     @RequirePOST
     public HttpResponse doAct(@QueryParameter String dismiss) throws IOException {

File: core/src/main/java/jenkins/util/SystemProperties.java
Patch:
@@ -140,7 +140,7 @@ public static String getString(String key) {
      * @param      key   the name of the system property.
      * @param      def   a default value.
      * @return     the string value of the system property,
-     *             or {@code null} if the the property is missing and the default value is {@code null}.
+     *             or {@code null} if the property is missing and the default value is {@code null}.
      *
      * @exception  NullPointerException if {@code key} is {@code null}.
      * @exception  IllegalArgumentException if {@code key} is empty.
@@ -158,7 +158,7 @@ public static String getString(String key, @CheckForNull String def) {
      * @param      def   a default value.
      * @param      logLevel the level of the log if the provided key is not found.
      * @return     the string value of the system property,
-     *             or {@code null} if the the property is missing and the default value is {@code null}.
+     *             or {@code null} if the property is missing and the default value is {@code null}.
      *
      * @exception  NullPointerException if {@code key} is {@code null}.
      * @exception  IllegalArgumentException if {@code key} is empty.

File: core/src/test/java/hudson/FunctionsTest.java
Patch:
@@ -273,7 +273,7 @@ private static Ancestor createAncestor(Object o, String relativePath) {
 
     @Test
     @PrepareForTest(Stapler.class)
-    public void testGetActionUrl_unparsable() throws Exception{
+    public void testGetActionUrl_unparseable() throws Exception{
         assertEquals(null, Functions.getActionUrl(null, createMockAction("http://nowhere.net/stuff?something=^woohoo")));
     }
 

File: core/src/test/java/hudson/model/AbstractItemTest.java
Patch:
@@ -21,7 +21,7 @@ private class StubAbstractItem extends AbstractItem {
 
         protected StubAbstractItem() {
             // sending in null as parent as I don't care for my current tests
-            super(null, "StubAbatractItem");
+            super(null, "StubAbstractItem");
         }
 
         @SuppressWarnings("rawtypes")

File: core/src/test/java/hudson/model/FileParameterValueTest.java
Patch:
@@ -43,8 +43,8 @@ public class FileParameterValueTest {
         final FileParameterValue param1 = new FileParameterValue(paramName, new File("ws_param1.txt"), "param1.txt");
         final FileParameterValue param2 = new FileParameterValue(paramName, new File("ws_param2.txt"), "param2.txt");
         
-        assertNotEquals("Files with same locations shoud be considered as different", param1, param2);
-        assertNotEquals("Files with same locations shoud be considered as different", param2, param1);
+        assertNotEquals("Files with same locations should be considered as different", param1, param2);
+        assertNotEquals("Files with same locations should be considered as different", param2, param1);
     }
     
     @Test public void compareNullParams() {

File: core/src/test/java/hudson/model/UserTest.java
Patch:
@@ -45,7 +45,7 @@ public void blankIdsOrFullNamesShouldNotBeAllowed() {
     
     @Test
     @Issue("JENKINS-35967")
-    public void shoudNotAllowIllegalRestrictedNamesInWrongCase() {
+    public void shouldNotAllowIllegalRestrictedNamesInWrongCase() {
         assertIdOrFullNameNotAllowed("system");
         assertIdOrFullNameNotAllowed("System");
         assertIdOrFullNameNotAllowed("SYSTEM");
@@ -55,7 +55,7 @@ public void shoudNotAllowIllegalRestrictedNamesInWrongCase() {
     
     @Test
     @Issue("JENKINS-35967")
-    public void shoudNotAllowIllegalRestrictedNamesEvenIfTrimmed() {
+    public void shouldNotAllowIllegalRestrictedNamesEvenIfTrimmed() {
         for (String username : User.getIllegalPersistedUsernames()) {
             assertIdOrFullNameNotAllowed(username);
             assertIdOrFullNameNotAllowed(" " + username);

File: test/src/test/java/hudson/ExtensionListTest.java
Patch:
@@ -142,7 +142,7 @@ public void fishDiscovery() throws Exception {
         assertEquals(3,list.size());
         assertNotNull(list.get(Sishamo.DescriptorImpl.class));
 
-        // all 3 should be visisble from LIST, too
+        // all 3 should be visible from LIST, too
         assertEquals(3,LIST.size());
         assertNotNull(LIST.findByName(Tai.class.getName()));
         assertNotNull(LIST.findByName(Sishamo.class.getName()));

File: test/src/test/java/hudson/cli/DeleteViewCommandTest.java
Patch:
@@ -126,7 +126,7 @@ public class DeleteViewCommandTest {
         assertThat(result.stderr(), containsString("ERROR: Jenkins does not allow to delete '"+AllView.DEFAULT_VIEW_NAME+"' view"));
     }
 
-    @Test public void deleteViewShoudlFailIfViewNameIsEmpty() {
+    @Test public void deleteViewShouldFailIfViewNameIsEmpty() {
         final CLICommandInvoker.Result result = command
                 .authorizedTo(View.READ, View.DELETE, Jenkins.READ)
                 .invokeWithArgs("")
@@ -137,7 +137,7 @@ public class DeleteViewCommandTest {
         assertThat(result.stderr(), containsString("ERROR: View name is empty"));
     }
 
-    @Test public void deleteViewShoudlFailIfViewNameIsSpace() {
+    @Test public void deleteViewShouldFailIfViewNameIsSpace() {
         final CLICommandInvoker.Result result = command
                 .authorizedTo(View.READ, View.DELETE, Jenkins.READ)
                 .invokeWithArgs(" ")

File: test/src/test/java/hudson/diagnosis/OldDataMonitorTest.java
Patch:
@@ -139,7 +139,7 @@ public Void call() throws Exception {
 
         ensureEntry.await();
         // test will hang here due to JENKINS-24763
-        File xml = File.createTempFile("OldDataMontiorTest.slowDiscard", "xml");
+        File xml = File.createTempFile("OldDataMonitorTest.slowDiscard", "xml");
         xml.deleteOnExit();
         OldDataMonitor.changeListener
                 .onChange(new Saveable() {public void save() throws IOException {}},

File: test/src/test/java/hudson/model/AbstractBuildTest.java
Patch:
@@ -60,8 +60,8 @@ public class AbstractBuildTest {
     @SuppressWarnings("deprecation")
     public void reportErrorShouldNotFailForNonPublisherClass() throws Exception {
         FreeStyleProject prj = j.createFreeStyleProject();
-        ErroneousJobProperty errorneousJobProperty = new ErroneousJobProperty();
-        prj.addProperty(errorneousJobProperty);
+        ErroneousJobProperty erroneousJobProperty = new ErroneousJobProperty();
+        prj.addProperty(erroneousJobProperty);
         QueueTaskFuture<FreeStyleBuild> future = prj.scheduleBuild2(0);     
         assertThat("Build should be actually scheduled by Jenkins", future, notNullValue());
         FreeStyleBuild build = future.get();

File: test/src/test/java/hudson/model/FingerprintTest.java
Patch:
@@ -269,7 +269,7 @@ public void adminShouldBeAbleToSeeReferencesOfDeletedJobs() throws Exception {
         try (ACLContext _ = ACL.as(user1)) {
             Fingerprint.BuildPtr original = fingerprint.getOriginal();
             assertThat("user1 should able to see the origin", fingerprint.getOriginal(), notNullValue());
-            assertThat("Job has been deleted, so Job reference shoud return null", fingerprint.getOriginal().getJob(), nullValue());
+            assertThat("Job has been deleted, so Job reference should return null", fingerprint.getOriginal().getJob(), nullValue());
             assertEquals("user1 sees the wrong original name with Item.DISCOVER", project.getFullName(), original.getName());
             assertEquals("user1 sees the wrong original number with Item.DISCOVER", build.getNumber(), original.getNumber());
             assertEquals("user1 should be able to see the job in usages", 1, fingerprint._getUsages().size());

File: test/src/test/java/hudson/model/LabelLoadStatisticsQueueLengthTest.java
Patch:
@@ -188,7 +188,7 @@ public void queueLengthReflectsJobsAssignedLabel() throws Exception {
     private FreeStyleProject createTestProject() throws IOException {
         FreeStyleProject project = j.createFreeStyleProject(PROJECT_NAME);
         // In order to queue multiple builds of the job it needs to be
-        // parameterised.
+        // parameterized.
         project.addProperty(new ParametersDefinitionProperty(
                 new StringParameterDefinition(PARAMETER_NAME, "0")));
         // Prevent builds from being queued as blocked by allowing concurrent

File: test/src/test/java/hudson/model/MyViewTest.java
Patch:
@@ -101,8 +101,8 @@ public void testGetItems() throws IOException, InterruptedException{
         assertFalse("View " + view.getDisplayName() + " should not contains job " + job.getDisplayName(), view.getItems().contains(job));
         assertFalse("View " + view.getDisplayName() + " should not contains job " + job2.getDisplayName(), view.getItems().contains(job2));
         auth.add(Job.CONFIGURE, "User1");
-        assertTrue("View " + view.getDisplayName() + " should contains job " + job.getDisplayName(), view.getItems().contains(job));
-        assertTrue("View " + view.getDisplayName() + " should contains job " + job2.getDisplayName(), view.getItems().contains(job2));
+        assertTrue("View " + view.getDisplayName() + " should contain job " + job.getDisplayName(), view.getItems().contains(job));
+        assertTrue("View " + view.getDisplayName() + " should contain job " + job2.getDisplayName(), view.getItems().contains(job2));
     }
     
     

File: test/src/test/java/hudson/model/ProjectTest.java
Patch:
@@ -338,7 +338,7 @@ public void testSaveAfterSet() throws Exception, ReactorException {
         assertTrue("Project did not save scm checkout strategy.", p.getScmCheckoutStrategy() instanceof SCMCheckoutStrategyImpl);
         assertEquals("Project did not save quiet period.", 15, p.getQuietPeriod());
         assertTrue("Project did not save block if downstream is building.", p.blockBuildWhenDownstreamBuilding());
-        assertTrue("Project did not save block if upstream is buildidng.", p.blockBuildWhenUpstreamBuilding());
+        assertTrue("Project did not save block if upstream is building.", p.blockBuildWhenUpstreamBuilding());
         assertNotNull("Project did not save jdk", p.getJDK());
         assertEquals("Project did not save custom workspace.", "/some/path", p.getCustomWorkspace());
     }

File: test/src/test/java/hudson/model/QueueTest.java
Patch:
@@ -876,7 +876,7 @@ public void shouldBeAbleToBlockFlyweightTaskAtTheLastMinute() throws Exception {
         assertTrue(Queue.getInstance().getBuildableItems().get(0).task.getDisplayName().equals(matrixProject.displayName));
     }
 
-    //let's make sure that the downstram project is not started before the upstream --> we want to simulate
+    //let's make sure that the downstream project is not started before the upstream --> we want to simulate
     // the case: buildable-->blocked-->buildable
     public static class BlockDownstreamProjectExecution extends NodeProperty<Slave> {
         @Override

File: test/src/test/java/hudson/model/UserTest.java
Patch:
@@ -252,7 +252,7 @@ public void testAddAndGetProperty() throws IOException {
         user.addProperty(prop);
         assertNotNull("User should have SomeUserProperty property.", user.getProperty(SomeUserProperty.class));
         assertEquals("UserProperty1 should be assigned to its descriptor", prop, user.getProperties().get(prop.getDescriptor()));
-        assertTrue("User should should contains SomeUserProperty.", user.getAllProperties().contains(prop));
+        assertTrue("User should should contain SomeUserProperty.", user.getAllProperties().contains(prop));
         User.reload();
         assertNotNull("User should have SomeUserProperty property.", user.getProperty(SomeUserProperty.class));
     }
@@ -402,7 +402,7 @@ public void testDoConfigSubmit() throws Exception {
         SecurityContextHolder.getContext().setAuthentication(user2.impersonate());
         try{
             user.doConfigSubmit(null, null);
-            fail("User should not have permission to configure antoher user.");
+            fail("User should not have permission to configure another user.");
         }
         catch(Exception e){
             if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){
@@ -440,7 +440,7 @@ public void testDoDoDelete() throws Exception {
         SecurityContextHolder.getContext().setAuthentication(user2.impersonate());
         try{
             user.doDoDelete(null, null);
-            fail("User should not have permission to delete antoher user.");
+            fail("User should not have permission to delete another user.");
         }
         catch(Exception e){
             if(!(e.getClass().isAssignableFrom(AccessDeniedException2.class))){

File: test/src/test/java/hudson/model/ViewTest.java
Patch:
@@ -417,7 +417,7 @@ public void testGetProperties() throws Exception {
         HtmlForm f = j.createWebClient().getPage(view, "configure").getFormByName("viewConfig");
         ((HtmlLabel) DomNodeUtil.selectSingleNode(f, ".//LABEL[text()='Test property']")).click();
         j.submit(f);
-        assertNotNull("View should contains ViewPropertyImpl property.", view.getProperties().get(PropertyImpl.class));
+        assertNotNull("View should contain ViewPropertyImpl property.", view.getProperties().get(PropertyImpl.class));
     }
 
     private ListView listView(String name) throws IOException {

File: test/src/test/java/hudson/model/WorkspaceCleanupThreadTest.java
Patch:
@@ -149,7 +149,7 @@ public class WorkspaceCleanupThreadTest {
         assertFalse(ws.exists());
     }
 
-    @Test @WithoutJenkins public void reocurencePeriodIsInhours() {
+    @Test @WithoutJenkins public void recurrencePeriodIsInHours() {
         assertEquals(
                 WorkspaceCleanupThread.recurrencePeriodHours * 60 * 60 * 1000 ,
                 new WorkspaceCleanupThread().getRecurrencePeriod()

File: test/src/test/java/hudson/scm/ChangeLogSetTest.java
Patch:
@@ -22,7 +22,7 @@ public class ChangeLogSetTest {
     @Issue("JENKINS-17084")
     public void catchingExceptionDuringAnnotation() {
         EntryImpl change = new EntryImpl();
-        change.setParent(ChangeLogSet.createEmpty(null)); // otherwise test would actually test only NPE thrown when accessing paret.build
+        change.setParent(ChangeLogSet.createEmpty(null)); // otherwise test would actually test only NPE thrown when accessing parent.build
         boolean notCaught = false;
         try {
             change.getMsgAnnotated();

File: test/src/test/java/hudson/search/SearchTest.java
Patch:
@@ -251,7 +251,7 @@ public void testGetSuggestionsHasBothNamesAndDisplayNames() throws Exception {
         assertEquals(2, jsonArray.size());
         
         boolean foundProjectName = false;
-        boolean foundDispayName = false;
+        boolean foundDisplayName = false;
         for(Object suggestion : jsonArray) {
             JSONObject jsonSuggestion = (JSONObject)suggestion;
             
@@ -260,12 +260,12 @@ public void testGetSuggestionsHasBothNamesAndDisplayNames() throws Exception {
                 foundProjectName = true;
             }
             else if(displayName.equals(name)) {
-                foundDispayName = true;
+                foundDisplayName = true;
             }
         }
 
         assertTrue(foundProjectName);
-        assertTrue(foundDispayName);
+        assertTrue(foundDisplayName);
     }
 
     @Issue("JENKINS-24433")

File: test/src/test/java/jenkins/I18nTest.java
Patch:
@@ -87,7 +87,7 @@ public void test_valid_region_variant() throws IOException, SAXException {
     }
 
     @Issue("JENKINS-39034")
-    @Test //country testing with delimeter '-' instead of '_'
+    @Test //country testing with delimiter '-' instead of '_'
     public void test_valid_region() throws IOException, SAXException {
         JSONObject response = jenkinsRule.getJSON("i18n/resourceBundle?baseName=jenkins.i18n.Messages&language=en-AU").getJSONObject();
         Assert.assertEquals("ok", response.getString("status"));

File: test/src/test/java/jenkins/model/JenkinsTest.java
Patch:
@@ -610,9 +610,9 @@ public void agentProtocols_singleDisable_roundtrip() throws Exception {
         assertFalse("The protocol list must have been really reloaded", agentProtocolsBeforeReload == j.jenkins.getAgentProtocols());
         assertThat("We should have disabled two protocols", 
                 j.jenkins.getAgentProtocols().size(), equalTo(defaultProtocols.size() - 2));
-        assertThat(protocolToDisable1 + " must be disaabled after the roundtrip", 
+        assertThat(protocolToDisable1 + " must be disabled after the roundtrip", 
                 j.jenkins.getAgentProtocols(), not(hasItem(protocolToDisable1)));
-        assertThat(protocolToDisable2 + " must be disaabled after the roundtrip", 
+        assertThat(protocolToDisable2 + " must be disabled after the roundtrip", 
                 j.jenkins.getAgentProtocols(), not(hasItem(protocolToDisable2)));
     }
 }

File: test/src/test/java/jenkins/security/Security218CliTest.java
Patch:
@@ -141,7 +141,7 @@ public void probeJSON1() throws Exception {
     
     //TODO: Fix the conversion layer (not urgent)
     // There is an issue in the conversion layer after the migration to another XALAN namespace
-    // with newer libs. SECURITY-218 does not apper in this case in manual tests anyway
+    // with newer libs. SECURITY-218 does not appear in this case in manual tests anyway
     @PresetData(PresetData.DataSet.ANONYMOUS_READONLY)
     @Test
     @Issue("SECURITY-218")
@@ -252,7 +252,7 @@ public void checkRoles(RoleChecker checker) throws SecurityException {
                 }
 
                 if (cause instanceof SecurityException) {
-                    // It should happen if the remote chanel reject a class.
+                    // It should happen if the remote channel reject a class.
                     // That's what we have done in SECURITY-218 => may be OK
                     if (cause.getMessage().contains("Rejected")) {
                         // OK
@@ -266,7 +266,7 @@ public void checkRoles(RoleChecker checker) throws SecurityException {
                 final String message = cause.getMessage();
                 if (message != null && message.contains("cannot be cast to java.util.Set")) {
                     // We ignore this exception, because there is a known issue in the test payload
-                    // CommonsCollections1, CommonsCollections2 and Groovy1 fail witth this error,
+                    // CommonsCollections1, CommonsCollections2 and Groovy1 fail with this error,
                     // but actually it means that the conversion has been triggered
                     return EXIT_CODE_ASSIGNMENT_ISSUE;
                 } else {

File: test/src/test/java/jenkins/security/security218/ysoserial/payloads/FileUpload1.java
Patch:
@@ -52,7 +52,7 @@
  * - writeOldB64;destFile;base64-data
  * 
  * Yields:
- * - copy an arbitraty file to an arbitrary directory (source file is deleted if possible)
+ * - copy an arbitrary file to an arbitrary directory (source file is deleted if possible)
  * - pre 1.3.1 (+ old JRE): write data to an arbitrary file
  * - 1.3.1+: write data to a more or less random file in an arbitrary directory
  * 

File: test/src/test/java/hudson/tasks/ArtifactArchiverTest.java
Patch:
@@ -26,6 +26,7 @@
 
 import hudson.AbortException;
 import hudson.FilePath;
+import hudson.Functions;
 import hudson.Launcher;
 import hudson.Util;
 import hudson.model.AbstractBuild;
@@ -266,7 +267,7 @@ public void testDefaultExcludesOff() throws Exception {
 
     @LocalData
     @Test public void fingerprintMigration() throws Exception {
-        FreeStyleProject p = j.jenkins.getItemByFullName("sample", FreeStyleProject.class);
+        FreeStyleProject p = j.jenkins.getItemByFullName(Functions.isWindows() ? "sample-windows" : "sample", FreeStyleProject.class);
         assertNotNull(p);
         String xml = p.getConfigFile().asString();
         assertFalse(xml, xml.contains("<recordBuildArtifacts>"));

File: test/src/test/java/hudson/cli/AbstractBuildRangeCommand2Test.java
Patch:
@@ -106,7 +106,7 @@ public class AbstractBuildRangeCommand2Test {
                 .authorizedTo(Jenkins.READ, Job.READ)
                 .invokeWithArgs("aProject", "1");
         assertThat(result, succeeded());
-        assertThat(result.stdout(), containsString("Builds: 1\n"));
+        assertThat(result.stdout(), containsString("Builds: 1" + System.lineSeparator()));
     }
 
     @Test public void dummyRangeShouldSuccessEvenTheBuildIsStuckInTheQueue() throws Exception {
@@ -124,7 +124,7 @@ public class AbstractBuildRangeCommand2Test {
                 .authorizedTo(Jenkins.READ, Job.READ)
                 .invokeWithArgs("aProject", "1");
         assertThat(result, succeeded());
-        assertThat(result.stdout(), containsString("Builds: \n"));
+        assertThat(result.stdout(), containsString("Builds: " + System.lineSeparator()));
     }
 
 }

File: core/src/main/java/jenkins/model/ParameterizedJobMixIn.java
Patch:
@@ -278,7 +278,8 @@ public static final CauseAction getBuildCause(ParameterizedJob job, StaplerReque
      * Uses {@link #BUILD_NOW_TEXT}.
      */
     public final String getBuildNowText() {
-        return isParameterized() ? Messages.ParameterizedJobMixIn_build_with_parameters() : AlternativeUiTextProvider.get(BUILD_NOW_TEXT, asJob(), Messages.ParameterizedJobMixIn_build_now());
+        return isParameterized() ? AlternativeUiTextProvider.get(BUILD_NOW_TEXT, asJob(), Messages.ParameterizedJobMixIn_build_with_parameters())
+                : AlternativeUiTextProvider.get(BUILD_NOW_TEXT, asJob(), Messages.ParameterizedJobMixIn_build_now());
     }
 
     /**

File: core/src/main/java/hudson/util/io/RewindableFileOutputStream.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import org.apache.commons.io.FileUtils;
 
 /**
  * {@link OutputStream} that writes to a file.
@@ -48,6 +49,7 @@ public RewindableFileOutputStream(File out) {
     private synchronized OutputStream current() throws IOException {
         if (current == null) {
             if (!closed) {
+                FileUtils.forceMkdir(out.getParentFile());
                 try {
                     current = new FileOutputStream(out,false);
                 } catch (FileNotFoundException e) {

File: test/src/test/java/hudson/util/AlternativeUiTextProviderTest.java
Patch:
@@ -32,6 +32,7 @@
 import static org.junit.Assert.assertThat;
 import org.junit.Rule;
 import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.TestExtension;
 
@@ -72,6 +73,7 @@ public void basics() throws Exception {
      * Makes sure that {@link AlternativeUiTextProvider} actually works with a parameterized Job.
      */
     @Test
+    @Issue("JENKINS-41757")
     public void basicsWithParameter() throws Exception {
         Impl.oldschool = false;
         FreeStyleProject p = j.createFreeStyleProject("aaa");

File: core/src/main/java/jenkins/model/ParameterizedJobMixIn.java
Patch:
@@ -278,7 +278,8 @@ public static final CauseAction getBuildCause(ParameterizedJob job, StaplerReque
      * Uses {@link #BUILD_NOW_TEXT}.
      */
     public final String getBuildNowText() {
-        return isParameterized() ? Messages.ParameterizedJobMixIn_build_with_parameters() : AlternativeUiTextProvider.get(BUILD_NOW_TEXT, asJob(), Messages.ParameterizedJobMixIn_build_now());
+        return isParameterized() ? AlternativeUiTextProvider.get(BUILD_NOW_TEXT, asJob(), Messages.ParameterizedJobMixIn_build_with_parameters())
+                : AlternativeUiTextProvider.get(BUILD_NOW_TEXT, asJob(), Messages.ParameterizedJobMixIn_build_now());
     }
 
     /**

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -63,7 +63,6 @@
 import jenkins.model.item_category.Categories;
 import jenkins.model.item_category.Category;
 import jenkins.model.item_category.ItemCategory;
-import jenkins.scm.RunWithSCMMixIn;
 import jenkins.triggers.SCMTriggerItem;
 import jenkins.util.ProgressiveRendering;
 import jenkins.util.xml.XMLUtils;

File: core/src/main/java/hudson/slaves/OfflineCause.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.model.Computer;
 import hudson.model.User;
 
+import jenkins.model.Jenkins;
 import org.jvnet.localizer.Localizable;
 import org.kohsuke.stapler.export.ExportedBean;
 import org.kohsuke.stapler.export.Exported;
@@ -147,7 +148,7 @@ public UserCause(@CheckForNull User user, @CheckForNull String message) {
         }
 
         private UserCause(String userId, String message) {
-            super(hudson.slaves.Messages._SlaveComputer_DisconnectedBy(userId, message));
+            super(hudson.slaves.Messages._SlaveComputer_DisconnectedBy(userId != null ? userId : Jenkins.ANONYMOUS.getName(), message));
             this.userId = userId;
         }
 

File: core/src/main/java/hudson/slaves/OfflineCause.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.model.Computer;
 import hudson.model.User;
 
+import jenkins.model.Jenkins;
 import org.jvnet.localizer.Localizable;
 import org.kohsuke.stapler.export.ExportedBean;
 import org.kohsuke.stapler.export.Exported;
@@ -147,7 +148,7 @@ public UserCause(@CheckForNull User user, @CheckForNull String message) {
         }
 
         private UserCause(String userId, String message) {
-            super(hudson.slaves.Messages._SlaveComputer_DisconnectedBy(userId, message));
+            super(hudson.slaves.Messages._SlaveComputer_DisconnectedBy(userId != null ? userId : Jenkins.ANONYMOUS.getName(), message));
             this.userId = userId;
         }
 

File: test/src/test/java/jenkins/security/s2m/AdminFilePathFilterTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
 public class AdminFilePathFilterTest {
@@ -46,7 +47,7 @@ public void setUp() {
         rule.setMasterKillSwitch(false);
     }
 
-    // TODO in master when using a version taking a String[]: @Issue({"JENKINS-27055", "SECURITY-358"})
+    @Issue({"JENKINS-27055", "SECURITY-358"})
     @Test
     public void matchBuildDir() throws Exception {
         File buildDir = r.buildAndAssertSuccess(r.createFreeStyleProject()).getRootDir();

File: core/src/main/java/hudson/tasks/BatchFile.java
Patch:
@@ -81,7 +81,9 @@ protected boolean isErrorlevelForUnstableBuild(int exitCode) {
     }
 
     private Object readResolve() throws ObjectStreamException {
-        return new BatchFile(command);
+        BatchFile batch = new BatchFile(command);
+        batch.setUnstableReturn(unstableReturn);
+        return batch;
     }
 
     @Extension @Symbol("batchFile")

File: core/src/main/java/hudson/tasks/Shell.java
Patch:
@@ -125,7 +125,9 @@ public DescriptorImpl getDescriptor() {
     }
 
     private Object readResolve() throws ObjectStreamException {
-        return new Shell(command);
+        Shell shell = new Shell(command);
+        shell.setUnstableReturn(unstableReturn);
+        return shell;
     }
 
     @Extension @Symbol("shell")

File: test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java
Patch:
@@ -124,7 +124,7 @@ public void testServiceUsingDirectSecret() throws Exception {
                         fail("SECURITY-206: " + channel.call(new Attack(f.getAbsolutePath())));
                     } catch (SecurityException x) {
                         System.out.println("expected: " + x);
-                        assertTrue(x.getMessage().contains("http://jenkins-ci.org/security-144"));
+                        assertTrue(x.getMessage().contains("https://jenkins.io/redirect/security-144"));
                     }
                     return;
                 }

File: core/src/main/java/hudson/tasks/BatchFile.java
Patch:
@@ -81,7 +81,9 @@ protected boolean isErrorlevelForUnstableBuild(int exitCode) {
     }
 
     private Object readResolve() throws ObjectStreamException {
-        return new BatchFile(command);
+        BatchFile batch = new BatchFile(command);
+        batch.setUnstableReturn(unstableReturn);
+        return batch;
     }
 
     @Extension @Symbol("batchFile")

File: core/src/main/java/hudson/tasks/Shell.java
Patch:
@@ -125,7 +125,9 @@ public DescriptorImpl getDescriptor() {
     }
 
     private Object readResolve() throws ObjectStreamException {
-        return new Shell(command);
+        Shell shell = new Shell(command);
+        shell.setUnstableReturn(unstableReturn);
+        return shell;
     }
 
     @Extension @Symbol("shell")

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol4.java
Patch:
@@ -58,7 +58,8 @@
  *
  * <p>@see {@link org.jenkinsci.remoting.engine.JnlpProtocol4Handler} for more details.
  *
- * @since 2.27
+ * @since 2.27 available as the experimental protocol 
+ * @since TODO enabled by default
  */
 @Extension
 public class JnlpSlaveAgentProtocol4 extends AgentProtocol {
@@ -156,7 +157,7 @@ public void setHub(IOHubProvider hub) {
      */
     @Override
     public boolean isOptIn() {
-        return true;
+        return false;
     }
 
     /**

File: core/src/main/java/hudson/tasks/BatchFile.java
Patch:
@@ -81,7 +81,9 @@ protected boolean isErrorlevelForUnstableBuild(int exitCode) {
     }
 
     private Object readResolve() throws ObjectStreamException {
-        return new BatchFile(command);
+        BatchFile batch = new BatchFile(command);
+        batch.setUnstableReturn(unstableReturn);
+        return batch;
     }
 
     @Extension @Symbol("batchFile")

File: core/src/main/java/hudson/tasks/Shell.java
Patch:
@@ -125,7 +125,9 @@ public DescriptorImpl getDescriptor() {
     }
 
     private Object readResolve() throws ObjectStreamException {
-        return new Shell(command);
+        Shell shell = new Shell(command);
+        shell.setUnstableReturn(unstableReturn);
+        return shell;
     }
 
     @Extension @Symbol("shell")

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol4.java
Patch:
@@ -58,7 +58,8 @@
  *
  * <p>@see {@link org.jenkinsci.remoting.engine.JnlpProtocol4Handler} for more details.
  *
- * @since 2.27
+ * @since 2.27 available as the experimental protocol 
+ * @since TODO enabled by default
  */
 @Extension
 public class JnlpSlaveAgentProtocol4 extends AgentProtocol {
@@ -156,7 +157,7 @@ public void setHub(IOHubProvider hub) {
      */
     @Override
     public boolean isOptIn() {
-        return true;
+        return false;
     }
 
     /**

File: core/src/main/java/hudson/diagnosis/HudsonHomeDiskUsageChecker.java
Patch:
@@ -64,10 +64,10 @@ protected void doRun() {
     private static final Logger LOGGER = Logger.getLogger(HudsonHomeDiskUsageChecker.class.getName());
 
     /**
-     * Gets the minimum amount of space to check for, with a default of 1GB
+     * Gets the minimum amount of space to check for, with a default of 10GB
      */
     public static long FREE_SPACE_THRESHOLD = Long.getLong(
             HudsonHomeDiskUsageChecker.class.getName() + ".freeSpaceThreshold",
-            1024L*1024*1024);
+            1024L*1024*1024*10);
 
 }

File: core/src/test/java/hudson/model/RunTest.java
Patch:
@@ -189,7 +189,8 @@ public void getLogReturnsAnRightOrder() throws Exception {
         for (int i = 1; i < 10; i++) {
             assertEquals("dummy" + (10+i), logLines.get(i));
         }
-        assertEquals("[...truncated 68 B...]", logLines.get(0));
+        int truncatedCount = 10* ("dummyN".length() + System.getProperty("line.separator").length()) - 2;
+        assertEquals("[...truncated "+truncatedCount+" B...]", logLines.get(0));
     }
 
     @Test

File: test/src/test/java/hudson/model/ParametersTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import org.apache.http.HttpStatus;
+import org.apache.commons.httpclient.HttpStatus;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 import org.junit.Rule;

File: test/src/test/java/hudson/model/ComputerConfigDotXmlTest.java
Patch:
@@ -49,6 +49,7 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.JenkinsRule.DummySecurityRealm;
 import org.kohsuke.stapler.StaplerRequest;
@@ -143,13 +144,15 @@ public void configXmlPostShouldUpdateNodeConfiguration() throws Exception {
     }
 
     @Test
+    @Issue("SECURITY-343")
     public void emptyNodeMonitorDataWithoutConnect() throws Exception {
         rule.jenkins.setAuthorizationStrategy(new GlobalMatrixAuthorizationStrategy());
 
         assertTrue(computer.getMonitorData().isEmpty());
     }
 
     @Test
+    @Issue("SECURITY-343")
     public void populatedNodeMonitorDataWithConnect() throws Exception {
         GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();
         rule.jenkins.setAuthorizationStrategy(auth);

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -1887,7 +1887,7 @@ public SearchIndexBuilder makeSearchIndex() {
             })
             .add(new CollectionSearchIndex() {// for views
                 protected View get(String key) { return getView(key); }
-                protected Collection<View> all() { return views; }
+                protected Collection<View> all() { return viewGroupMixIn.getViews(); }
             });
     }
 

File: core/src/test/java/hudson/model/RunTest.java
Patch:
@@ -189,7 +189,8 @@ public void getLogReturnsAnRightOrder() throws Exception {
         for (int i = 1; i < 10; i++) {
             assertEquals("dummy" + (10+i), logLines.get(i));
         }
-        assertEquals("[...truncated 68 B...]", logLines.get(0));
+        int truncatedCount = 10* ("dummyN".length() + System.getProperty("line.separator").length()) - 2;
+        assertEquals("[...truncated "+truncatedCount+" B...]", logLines.get(0));
     }
 
     @Test

File: test/src/test/java/hudson/model/ParametersTest.java
Patch:
@@ -17,7 +17,6 @@
 import org.apache.http.HttpStatus;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ErrorCollector;
@@ -226,7 +225,6 @@ public void unicodeParametersArePresetCorrectly() throws Exception {
         HtmlFormUtil.submit(form, HtmlFormUtil.getButtonByCaption(form, "Build"));
     }
 
-    @Ignore("TODO build page should mark up param description; parameters page should mark up param description")
     @Issue("SECURITY-353")
     @Test
     public void xss() throws Exception {

File: core/src/main/java/hudson/DependencyRunner.java
Patch:
@@ -59,7 +59,7 @@ public void run() {
             Set<AbstractProject> topLevelProjects = new HashSet<AbstractProject>();
             // Get all top-level projects
             LOGGER.fine("assembling top level projects");
-            for (AbstractProject p : Jenkins.getInstance().getAllItems(AbstractProject.class))
+            for (AbstractProject p : Jenkins.getInstance().allItems(AbstractProject.class))
                 if (p.getUpstreamProjects().size() == 0) {
                     LOGGER.fine("adding top level project " + p.getName());
                     topLevelProjects.add(p);

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -778,7 +778,7 @@ public List<AbstractProject> getTiedJobs() {
     }
 
     public RunList getBuilds() {
-    	return new RunList(Jenkins.getInstance().getAllItems(Job.class)).node(getNode());
+        return RunList.fromJobs(Jenkins.getInstance().allItems(Job.class)).node(getNode());
     }
 
     /**

File: core/src/main/java/hudson/model/Label.java
Patch:
@@ -362,10 +362,11 @@ private String toString(Collection<? extends ModelObject> model) {
     @Exported
     public List<AbstractProject> getTiedJobs() {
         List<AbstractProject> r = new ArrayList<AbstractProject>();
-        for (AbstractProject<?,?> p : Jenkins.getInstance().getAllItems(AbstractProject.class)) {
+        for (AbstractProject<?,?> p : Jenkins.getInstance().allItems(AbstractProject.class)) {
             if(p instanceof TopLevelItem && this.equals(p.getAssignedLabel()))
                 r.add(p);
         }
+        Collections.sort(r, Items.BY_FULL_NAME);
         return r;
     }
 

File: core/src/main/java/hudson/model/ListView.java
Patch:
@@ -480,7 +480,7 @@ private void locationChanged(Item item, String oldFullName, String newFullName)
                     renameViewItem(oldFullName, newFullName, jenkins, (ListView) view);
                 }
             }
-            for (Item g : jenkins.getAllItems()) {
+            for (Item g : jenkins.allItems()) {
                 if (g instanceof ViewGroup) {
                     ViewGroup vg = (ViewGroup) g;
                     for (View v : vg.getViews()) {
@@ -524,7 +524,7 @@ private void deleted(Item item) {
                     deleteViewItem(item, jenkins, (ListView) view);
                 }
             }
-            for (Item g : jenkins.getAllItems()) {
+            for (Item g : jenkins.allItems()) {
                 if (g instanceof ViewGroup) {
                     ViewGroup vg = (ViewGroup) g;
                     for (View v : vg.getViews()) {

File: core/src/main/java/hudson/model/WorkspaceCleanupThread.java
Patch:
@@ -68,7 +68,7 @@ public static void invoke() {
         Jenkins j = Jenkins.getInstance();
         nodes.add(j);
         nodes.addAll(j.getNodes());
-        for (TopLevelItem item : j.getAllItems(TopLevelItem.class)) {
+        for (TopLevelItem item : j.allItems(TopLevelItem.class)) {
             if (item instanceof ModifiableTopLevelItemGroup) { // no such thing as TopLevelItemGroup, and ItemGroup offers no access to its type parameter
                 continue; // children will typically have their own workspaces as subdirectories; probably no real workspace of its own
             }

File: core/src/main/java/hudson/scm/AutoBrowserHolder.java
Patch:
@@ -76,7 +76,7 @@ public RepositoryBrowser get() {
      *      null if no applicable configuration was found.
      */
     private RepositoryBrowser infer() {
-        for( AbstractProject p : Jenkins.getInstance().getAllItems(AbstractProject.class) ) {
+        for( AbstractProject p : Jenkins.getInstance().allItems(AbstractProject.class) ) {
             SCM scm = p.getScm();
             if (scm!=null && scm.getClass()==owner.getClass() && scm.getBrowser()!=null &&
                     ((SCMDescriptor)scm.getDescriptor()).isBrowserReusable(scm,owner)) {

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -348,7 +348,7 @@ public boolean isApplicable(Class<? extends AbstractProject> jobType) {
     @Extension public static final class Migrator extends ItemListener {
         @SuppressWarnings("deprecation")
         @Override public void onLoaded() {
-            for (AbstractProject<?,?> p : Jenkins.getInstance().getAllItems(AbstractProject.class)) {
+            for (AbstractProject<?,?> p : Jenkins.getInstance().allItems(AbstractProject.class)) {
                 try {
                     ArtifactArchiver aa = p.getPublishersList().get(ArtifactArchiver.class);
                     if (aa != null && aa.latestOnly != null) {

File: core/src/main/java/hudson/tasks/BuildTrigger.java
Patch:
@@ -420,7 +420,7 @@ public void onLocationChanged(final Item item, final String oldFullName, final S
             private void locationChanged(Item item, String oldFullName, String newFullName) {
                 // update BuildTrigger of other projects that point to this object.
                 // can't we generalize this?
-                for( Project<?,?> p : Jenkins.getInstance().getAllItems(Project.class) ) {
+                for( Project<?,?> p : Jenkins.getInstance().allItems(Project.class) ) {
                     BuildTrigger t = p.getPublishersList().get(BuildTrigger.class);
                     if(t!=null) {
                         String cp2 = Items.computeRelativeNamesAfterRenaming(oldFullName, newFullName, t.childProjects, p.getParent());

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -266,7 +266,7 @@ public void run(AbstractProject p) {
         }
 
         // Process all triggers, except SCMTriggers when synchronousPolling is set
-        for (ParameterizedJobMixIn.ParameterizedJob p : inst.getAllItems(ParameterizedJobMixIn.ParameterizedJob.class)) {
+        for (ParameterizedJobMixIn.ParameterizedJob p : inst.allItems(ParameterizedJobMixIn.ParameterizedJob.class)) {
             for (Trigger t : p.getTriggers().values()) {
                 if (!(t instanceof SCMTrigger && scmd.synchronousPolling)) {
                     if (t !=null && t.spec != null && t.tabs != null) {

File: core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java
Patch:
@@ -216,7 +216,7 @@ synchronized void invalidateCache() {
         private Map<Job,Collection<ReverseBuildTrigger>> calculateCache() {
             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {
                 final Map<Job, Collection<ReverseBuildTrigger>> result = new WeakHashMap<>();
-                for (Job<?, ?> downstream : Jenkins.getInstance().getAllItems(Job.class)) {
+                for (Job<?, ?> downstream : Jenkins.getInstance().allItems(Job.class)) {
                     ReverseBuildTrigger trigger =
                             ParameterizedJobMixIn.getTrigger(downstream, ReverseBuildTrigger.class);
                     if (trigger == null) {
@@ -276,7 +276,7 @@ public static class ItemListenerImpl extends ItemListener {
         @Override
         public void onLocationChanged(Item item, final String oldFullName, final String newFullName) {
             try (ACLContext _ = ACL.as(ACL.SYSTEM)) {
-                for (Job<?, ?> p : Jenkins.getInstance().getAllItems(Job.class)) {
+                for (Job<?, ?> p : Jenkins.getInstance().allItems(Job.class)) {
                     ReverseBuildTrigger t = ParameterizedJobMixIn.getTrigger(p, ReverseBuildTrigger.class);
                     if (t != null) {
                         String revised =

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3044,7 +3044,7 @@ public void run(Reactor session) throws Exception {
         });
 
         for (final File subdir : subdirs) {
-            g.requires(loadJenkins).attains(JOB_LOADED).notFatal().add("Loading job "+subdir.getName(),new Executable() {
+            g.requires(loadJenkins).attains(JOB_LOADED).notFatal().add("Loading item " + subdir.getName(), new Executable() {
                 public void run(Reactor session) throws Exception {
                     if(!Items.getConfigFile(subdir).exists()) {
                         //Does not have job config file, so it is not a jenkins job hence skip it
@@ -3057,7 +3057,7 @@ public void run(Reactor session) throws Exception {
             });
         }
 
-        g.requires(JOB_LOADED).add("Cleaning up old builds",new Executable() {
+        g.requires(JOB_LOADED).add("Cleaning up obsolete items deleted from the disk", new Executable() {
             public void run(Reactor reactor) throws Exception {
                 // anything we didn't load from disk, throw them away.
                 // doing this after loading from disk allows newly loaded items

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3044,7 +3044,7 @@ public void run(Reactor session) throws Exception {
         });
 
         for (final File subdir : subdirs) {
-            g.requires(loadJenkins).attains(JOB_LOADED).notFatal().add("Loading job "+subdir.getName(),new Executable() {
+            g.requires(loadJenkins).attains(JOB_LOADED).notFatal().add("Loading item " + subdir.getName(), new Executable() {
                 public void run(Reactor session) throws Exception {
                     if(!Items.getConfigFile(subdir).exists()) {
                         //Does not have job config file, so it is not a jenkins job hence skip it
@@ -3057,7 +3057,7 @@ public void run(Reactor session) throws Exception {
             });
         }
 
-        g.requires(JOB_LOADED).add("Cleaning up old builds",new Executable() {
+        g.requires(JOB_LOADED).add("Cleaning up obsolete items deleted from the disk", new Executable() {
             public void run(Reactor reactor) throws Exception {
                 // anything we didn't load from disk, throw them away.
                 // doing this after loading from disk allows newly loaded items

File: core/src/main/java/hudson/model/AllView.java
Patch:
@@ -57,7 +57,7 @@ public class AllView extends View {
      * Other {@link AllView} instances will be assumed to have been created by the user and thus will use the
      * name the user created them with.
      *
-     * @since FIXME
+     * @since 2.37
      */
     public static final String DEFAULT_VIEW_NAME = "all";
 
@@ -132,7 +132,7 @@ protected void submit(StaplerRequest req) throws IOException, ServletException,
      * @param primaryView the current primary view name.
      * @return the primary view name - this will be the same as the provided primary view name unless a JENKINS-38606
      * matching name is detected, in which case this will be the new name of the primary view.
-     * @since FIXME
+     * @since 2.37
      */
     @Nonnull
     public static String migrateLegacyPrimaryAllViewLocalizedName(@Nonnull List<View> views,

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -257,7 +257,7 @@ public boolean canTake(BuildableItem item) {
         /**
          * Checks whether the {@link Executor} represented by this object is capable of executing the given task.
          * @return a reason why it cannot, or null if it could
-         * @since FIXME
+         * @since 2.37
          */
         public @CheckForNull CauseOfBlockage getCauseOfBlockage(BuildableItem item) {
             Node node = getNode();

File: core/src/main/java/hudson/model/ViewDescriptor.java
Patch:
@@ -138,7 +138,7 @@ public List<Descriptor<ViewJobFilter>> getJobFiltersDescriptors() {
      * @param view the view to check the new display name of.
      * @param value the proposed new display name.
      * @return the validation result.
-     * @since FIXME
+     * @since 2.37
      */
     @SuppressWarnings("unused") // expose utility check method to subclasses
     protected FormValidation checkDisplayName(@Nonnull View view, @CheckForNull String value) {
@@ -163,7 +163,7 @@ protected FormValidation checkDisplayName(@Nonnull View view, @CheckForNull Stri
      * Default implementation returns {@code true} always.
      *
      * @return true to indicate applicable, in which case the view will be instantiable within the type of owner.
-     * @since FIXME
+     * @since 2.37
      */
     public boolean isApplicable(Class<? extends ViewGroup> ownerType) {
         return true;
@@ -175,7 +175,7 @@ public boolean isApplicable(Class<? extends ViewGroup> ownerType) {
      * Default implementation returns {@link #isApplicable(Class)} for the {@link ViewGroup#getClass()}.
      *
      * @return true to indicate applicable, in which case the view will be instantiable within the given owner.
-     * @since FIXME
+     * @since 2.37
      */
     public boolean isApplicableIn(ViewGroup owner) {
         return isApplicable(owner.getClass());

File: core/src/main/java/hudson/model/queue/CauseOfBlockage.java
Patch:
@@ -109,7 +109,7 @@ public void print(TaskListener listener) {
 
     /**
      * Build is blocked because a node (or its retention strategy) is not accepting tasks.
-     * @since FIXME
+     * @since 2.37
      */
     public static final class BecauseNodeIsNotAcceptingTasks extends CauseOfBlockage implements NeedsMoreExecutor {
 

File: core/src/main/java/hudson/security/ACL.java
Patch:
@@ -152,7 +152,7 @@ public final void checkCreatePermission(@Nonnull ViewGroup c,
      * @param d the descriptor of the view to be created.
      * @return false
      *      if the user doesn't have the permission.
-     * @since FIXME
+     * @since 2.37
      */
     public boolean hasCreatePermission(@Nonnull Authentication a, @Nonnull ViewGroup c,
                                        @Nonnull ViewDescriptor d) {

File: core/src/main/java/hudson/views/ListViewColumn.java
Patch:
@@ -133,7 +133,7 @@ public static List<ListViewColumn> createDefaultInitialColumnList() {
      * Creates the list of {@link ListViewColumn}s to be used for newly created {@link ListView}s and their likes.
      *
      * @see ListView#initColumns()
-     * @since FIXME
+     * @since 2.37
      */
     public static List<ListViewColumn> createDefaultInitialColumnList(Class<? extends View> context) {
         return createDefaultInitialColumnList(DescriptorVisibilityFilter.applyType(context, ListViewColumn.all()));
@@ -143,7 +143,7 @@ public static List<ListViewColumn> createDefaultInitialColumnList(Class<? extend
      * Creates the list of {@link ListViewColumn}s to be used for a {@link ListView}s and their likes.
      *
      * @see View#getColumns()
-     * @since FIXME
+     * @since 2.37
      */
     public static List<ListViewColumn> createDefaultInitialColumnList(View view) {
         return createDefaultInitialColumnList(DescriptorVisibilityFilter.apply(view, ListViewColumn.all()));

File: core/src/main/java/hudson/views/MyViewsTabBar.java
Patch:
@@ -76,7 +76,7 @@ public MyViewsTabBarDescriptor getDescriptor() {
      *
      * @param views the views.
      * @return the sorted views
-     * @since FIXME
+     * @since 2.37
      */
     @Nonnull
     @Restricted(NoExternalUse.class)

File: core/src/main/java/hudson/views/ViewsTabBar.java
Patch:
@@ -78,7 +78,7 @@ public ViewsTabBarDescriptor getDescriptor() {
      *
      * @param views the views.
      * @return the sorted views
-     * @since FIXME
+     * @since 2.37
      */
     @Nonnull
     @Restricted(NoExternalUse.class)

File: test/src/test/java/hudson/cli/DeleteViewCommandTest.java
Patch:
@@ -123,7 +123,7 @@ public class DeleteViewCommandTest {
         assertThat(result, failedWith(4));
         assertThat(result, hasNoStandardOutput());
         assertThat(j.jenkins.getView(AllView.DEFAULT_VIEW_NAME), notNullValue());
-        assertThat(result.stderr(), containsString("ERROR: Jenkins does not allow to delete 'All' view"));
+        assertThat(result.stderr(), containsString("ERROR: Jenkins does not allow to delete '"+AllView.DEFAULT_VIEW_NAME+"' view"));
     }
 
     @Test public void deleteViewShoudlFailIfViewNameIsEmpty() {

File: core/src/main/java/jenkins/model/CauseOfInterruption.java
Patch:
@@ -90,7 +90,7 @@ public UserInterruption(@Nonnull String userId) {
         /**
          * Gets ID of the user, who interrupted the build.
          * @return User ID
-         * @since TODO
+         * @since 2.31
          */
         @Nonnull
         public String getUserId() {
@@ -111,7 +111,7 @@ public User getUser() {
         /**
          * Gets user, who caused the interruption.
          * @return User or {@code null} if it has not been found
-         * @since TODO
+         * @since 2.31
          */
         @CheckForNull
         public User getUserOrNull() {

File: core/src/test/java/jenkins/xml/XMLUtilsTest.java
Patch:
@@ -42,7 +42,6 @@
 import static org.hamcrest.core.StringContains.containsString;
 import static org.junit.Assert.assertThat;
 import org.jvnet.hudson.test.Issue;
-import org.w3c.dom.Document;
 import org.xml.sax.SAXException;
 
 public class XMLUtilsTest {
@@ -127,10 +126,10 @@ public void testParse_with_XXE() throws IOException, XPathExpressionException {
                     "<foo>&xxe;</foo>";
 
             StringReader stringReader = new StringReader(xml);
-            Document doc = XMLUtils.parse(stringReader);
+            XMLUtils.parse(stringReader);
             Assert.fail("Expecting SAXException for XXE.");
         } catch (SAXException e) {
-            assertThat(e.getMessage(), containsString("DOCTYPE is disallowed"));
+            assertThat(e.getMessage(), containsString("\"http://apache.org/xml/features/disallow-doctype-decl\""));
         }
     }    
 }

File: cli/src/main/java/hudson/cli/CLI.java
Patch:
@@ -25,6 +25,7 @@
 
 import hudson.cli.client.Messages;
 import hudson.remoting.Channel;
+import hudson.remoting.NamingThreadFactory;
 import hudson.remoting.PingThread;
 import hudson.remoting.Pipe;
 import hudson.remoting.RemoteInputStream;
@@ -80,7 +81,7 @@
  * 
  * @author Kohsuke Kawaguchi
  */
-public class CLI {
+public class CLI implements AutoCloseable {
     private final ExecutorService pool;
     private final Channel channel;
     private final CliEntryPoint entryPoint;
@@ -121,7 +122,7 @@ public CLI(URL jenkins, ExecutorService exec, String httpsProxyTunnel) throws IO
         if(!url.endsWith("/"))  url+='/';
 
         ownsPool = exec==null;
-        pool = exec!=null ? exec : Executors.newCachedThreadPool();
+        pool = exec!=null ? exec : Executors.newCachedThreadPool(new NamingThreadFactory(Executors.defaultThreadFactory(), "CLI.pool"));
 
         Channel _channel;
         try {

File: test/src/test/java/hudson/cli/CLIActionTest.java
Patch:
@@ -65,10 +65,10 @@ public void security218() throws Exception {
     @Test
     public void security218_take2() throws Exception {
         pool = Executors.newCachedThreadPool();
-        try {
+        try (CLI cli = new CLI(j.getURL())) {
             List/*<String>*/ commands = new ArrayList();
             commands.add(new Security218());
-            new CLI(j.getURL()).execute(commands);
+            cli.execute(commands);
             fail("Expected the call to be rejected");
         } catch (Exception e) {
             assertThat(Functions.printThrowable(e), containsString("Rejected: " + Security218.class.getName()));

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -480,6 +480,7 @@ public void setResult(@Nonnull Result r) {
     public @Nonnull List<BuildBadgeAction> getBadgeActions() {
         List<BuildBadgeAction> r = getActions(BuildBadgeAction.class);
         if(isKeepLog()) {
+            r = new ArrayList<>(r);
             r.add(new KeepLogBuildBadge());
         }
         return r;

File: core/src/main/java/hudson/model/MyViewsProperty.java
Patch:
@@ -87,7 +87,7 @@ public Object readResolve() {
             // preserve the non-empty invariant
             views.add(new AllView(AllView.DEFAULT_VIEW_NAME, this));
         }
-        primaryViewName = AllView.applyJenkins38606Fixup(views, primaryViewName);
+        primaryViewName = AllView.migrateLegacyPrimaryAllViewLocalizedName(views, primaryViewName);
 
         viewGroupMixIn = new ViewGroupMixIn(this) {
             protected List<View> views() { return views; }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3057,7 +3057,7 @@ public void run(Reactor session) throws Exception {
                     views.add(0,v);
                     primaryView = v.getViewName();
                 }
-                primaryView =AllView.applyJenkins38606Fixup(views, primaryView);
+                primaryView = AllView.migrateLegacyPrimaryAllViewLocalizedName(views, primaryView);
 
                 if (useSecurity!=null && !useSecurity) {
                     // forced reset to the unsecure mode.

File: core/src/main/java/hudson/model/UserProperty.java
Patch:
@@ -58,7 +58,7 @@ public abstract class UserProperty implements ReconfigurableDescribable<UserProp
      */
     protected transient User user;
 
-    /*package*/ final void setUser(User u) {
+    protected void setUser(User u) {
         this.user = u;
     }
 

File: test/src/test/java/jenkins/security/Security218CliTest.java
Patch:
@@ -101,7 +101,7 @@ public void probeCommonsCollections6() throws Exception {
     @Test
     @Issue("SECURITY-317")
     public void probeFileUpload1() throws Exception {
-        probe(Payload.FileUpload1, PayloadCaller.EXIT_CODE_REJECTED);
+        probe(Payload.FileUpload1, -1);
     }
     
     @PresetData(PresetData.DataSet.ANONYMOUS_READONLY)
@@ -129,7 +129,7 @@ public void probeJRMPClient() throws Exception {
     @Test
     @Issue("SECURITY-317")
     public void probeJRMPListener() throws Exception {
-        probe(Payload.JRMPListener, PayloadCaller.EXIT_CODE_REJECTED);
+        probe(Payload.JRMPListener, -1);
     }
 
     @PresetData(PresetData.DataSet.ANONYMOUS_READONLY)

File: core/src/main/java/hudson/cli/CLIAction.java
Patch:
@@ -62,12 +62,11 @@ public String getIconFileName() {
     }
 
     public String getDisplayName() {
-
         return "Jenkins CLI";
     }
 
     public String getUrlName() {
-        return "cli";
+        return jenkins.CLI.DISABLED ? null : "cli";
     }
 
     public void doCommand(StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {

File: core/src/main/java/hudson/cli/CliProtocol.java
Patch:
@@ -32,7 +32,7 @@ public class CliProtocol extends AgentProtocol {
 
     @Override
     public String getName() {
-        return "CLI-connect";
+        return jenkins.CLI.DISABLED ? null : "CLI-connect";
     }
 
     @Override

File: core/src/main/java/hudson/cli/CliProtocol2.java
Patch:
@@ -24,7 +24,7 @@
 public class CliProtocol2 extends CliProtocol {
     @Override
     public String getName() {
-        return "CLI2-connect";
+        return jenkins.CLI.DISABLED ? null : "CLI2-connect";
     }
 
     @Override

File: core/src/main/java/jenkins/util/ResourceBundleUtil.java
Patch:
@@ -114,7 +114,7 @@ private ResourceBundleUtil() {
             return ResourceBundle.getBundle(baseName, locale, classLoader);
         } catch (MissingResourceException e) {
             // fall through and return null.
-            logger.warning(e.getMessage());
+            logger.finer(e.getMessage());
         }
         return null;
     }

File: core/src/main/java/hudson/util/HttpResponses.java
Patch:
@@ -29,6 +29,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
+import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
 import javax.servlet.ServletException;
 import java.io.File;

File: core/src/main/java/jenkins/util/ResourceBundleUtil.java
Patch:
@@ -114,7 +114,7 @@ private ResourceBundleUtil() {
             return ResourceBundle.getBundle(baseName, locale, classLoader);
         } catch (MissingResourceException e) {
             // fall through and return null.
-            logger.warning(e.getMessage());
+            logger.finer(e.getMessage());
         }
         return null;
     }

File: core/src/main/java/jenkins/util/ResourceBundleUtil.java
Patch:
@@ -114,7 +114,7 @@ private ResourceBundleUtil() {
             return ResourceBundle.getBundle(baseName, locale, classLoader);
         } catch (MissingResourceException e) {
             // fall through and return null.
-            logger.warning(e.getMessage());
+            logger.finer(e.getMessage());
         }
         return null;
     }

File: core/src/main/java/hudson/util/FormValidation.java
Patch:
@@ -638,7 +638,7 @@ public String toCheckUrl() {
          */
         public String toStemUrl() {
             if (names==null)    return null;
-            return jsStringEscape(Descriptor.getCurrentDescriptorByNameUrl()) + '/' + relativePath();
+            return Descriptor.getCurrentDescriptorByNameUrl() + '/' + relativePath();
         }
 
         public String getDependsOn() {

File: core/src/main/java/hudson/slaves/ComputerListener.java
Patch:
@@ -143,7 +143,7 @@ public void onOnline(Computer c) {}
      * Starting Hudson 1.312, this method is also invoked for the master, not just for agents.
      *
      * @param listener
-     *      This is connected to the launch log of the computer.
+     *      This is connected to the launch log of the computer or Jenkins master.
      *      Since this method is called synchronously from the thread
      *      that launches a computer, if this method performs a time-consuming
      *      operation, this listener should be notified of the progress.

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -389,6 +389,9 @@ public SubTask call() throws Exception {
                 }
 
                 if (executable instanceof Actionable) {
+                    if (LOGGER.isLoggable(Level.FINER)) {
+                        LOGGER.log(FINER, "when running {0} from {1} we are copying {2} actions whereas the item currently has {3}", new Object[] {executable, workUnit.context.item, workUnit.context.actions, workUnit.context.item.getAllActions()});
+                    }
                     for (Action action: workUnit.context.actions) {
                         ((Actionable) executable).addAction(action);
                     }

File: core/src/main/java/hudson/slaves/ComputerListener.java
Patch:
@@ -143,7 +143,7 @@ public void onOnline(Computer c) {}
      * Starting Hudson 1.312, this method is also invoked for the master, not just for agents.
      *
      * @param listener
-     *      This is connected to the launch log of the computer.
+     *      This is connected to the launch log of the computer or Jenkins master.
      *      Since this method is called synchronously from the thread
      *      that launches a computer, if this method performs a time-consuming
      *      operation, this listener should be notified of the progress.

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -349,7 +349,7 @@ protected void onLoad() {
                     ((RunAction2) a).onLoad(this);
                 } catch (RuntimeException x) {
                     LOGGER.log(WARNING, "failed to load " + a + " from " + getDataFile(), x);
-                    getActions().remove(a); // if possible; might be in an inconsistent state
+                    removeAction(a); // if possible; might be in an inconsistent state
                 }
             } else if (a instanceof RunAction) {
                 ((RunAction) a).onLoad();

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3052,11 +3052,12 @@ public void run(Reactor session) throws Exception {
                 // initialize views by inserting the default view if necessary
                 // this is both for clean Jenkins and for backward compatibility.
                 if(views.size()==0 || primaryView==null) {
-                    View v = new AllView("all");
+                    View v = new AllView(AllView.DEFAULT_VIEW_NAME);
                     setViewOwner(v);
                     views.add(0,v);
                     primaryView = v.getViewName();
                 }
+                primaryView =AllView.applyJenkins38606Fixup(views, primaryView);
 
                 if (useSecurity!=null && !useSecurity) {
                     // forced reset to the unsecure mode.

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -415,7 +415,7 @@ public List<Widget> getWidgets() {
      * If this view uses &lt;t:projectView> for rendering, this method returns columns to be displayed.
      */
     public Iterable<? extends ListViewColumn> getColumns() {
-        return ListViewColumn.createDefaultInitialColumnList();
+        return ListViewColumn.createDefaultInitialColumnList(this);
     }
 
     /**

File: core/src/test/java/hudson/model/ListViewTest.java
Patch:
@@ -30,7 +30,7 @@ public void listItemRecurseWorksWithNonTopLevelItems() throws IOException{
         mockStatic(Items.class);
         mockStatic(ListViewColumn.class);
         List<ListViewColumn> columns = Collections.emptyList();
-        when(ListViewColumn.createDefaultInitialColumnList()).thenReturn(columns);
+        when(ListViewColumn.createDefaultInitialColumnList(ListView.class)).thenReturn(columns);
         ViewGroup owner = mock(ViewGroup.class);
         ItemGroup itemGroupOwner = mock(ItemGroup.class);
         when(owner.getItemGroup()).thenReturn(itemGroupOwner);
@@ -49,7 +49,7 @@ public void includeRegexProgrammatic() {
         mockStatic(Items.class);
         mockStatic(ListViewColumn.class);
         List<ListViewColumn> columns = Collections.emptyList();
-        when(ListViewColumn.createDefaultInitialColumnList()).thenReturn(columns);
+        when(ListViewColumn.createDefaultInitialColumnList(ListView.class)).thenReturn(columns);
         ViewGroup owner = mock(ViewGroup.class);
         ItemGroup ig = mock(ItemGroup.class);
         when(owner.getItemGroup()).thenReturn(ig);

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3052,7 +3052,7 @@ public void run(Reactor session) throws Exception {
                 // initialize views by inserting the default view if necessary
                 // this is both for clean Jenkins and for backward compatibility.
                 if(views.size()==0 || primaryView==null) {
-                    View v = new AllView(Messages.Hudson_ViewName());
+                    View v = new AllView("all");
                     setViewOwner(v);
                     views.add(0,v);
                     primaryView = v.getViewName();

File: core/src/main/java/hudson/util/HttpResponses.java
Patch:
@@ -29,6 +29,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
+import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
 import javax.servlet.ServletException;
 import java.io.File;

File: core/src/main/java/hudson/util/FormValidation.java
Patch:
@@ -638,7 +638,7 @@ public String toCheckUrl() {
          */
         public String toStemUrl() {
             if (names==null)    return null;
-            return jsStringEscape(Descriptor.getCurrentDescriptorByNameUrl()) + '/' + relativePath();
+            return Descriptor.getCurrentDescriptorByNameUrl() + '/' + relativePath();
         }
 
         public String getDependsOn() {

File: core/src/main/java/hudson/UDPBroadcastThread.java
Patch:
@@ -24,7 +24,7 @@
 package hudson;
 
 import jenkins.util.SystemProperties;
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.Hudson;
 import jenkins.model.Jenkins;
 import hudson.util.OneShotEvent;
@@ -71,7 +71,7 @@ public UDPBroadcastThread(Jenkins jenkins) throws IOException {
         mcs = new MulticastSocket(PORT);
     }
 
-    @SuppressWarnings("ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD")
+    @SuppressFBWarnings("ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD")
     @Override
     public void run() {
         try {

File: core/src/main/java/hudson/Util.java
Patch:
@@ -27,7 +27,7 @@
 import com.sun.jna.Native;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.Proc.LocalProc;
 import hudson.model.TaskListener;
 import hudson.os.PosixAPI;
@@ -527,7 +527,7 @@ public static boolean isSymlink(@Nonnull File file) throws IOException {
         return !fileInCanonicalParent.getCanonicalFile().equals( fileInCanonicalParent.getAbsoluteFile() );
     }
 
-    @SuppressWarnings("NP_BOOLEAN_RETURN_NULL")
+    @SuppressFBWarnings("NP_BOOLEAN_RETURN_NULL")
     private static Boolean isSymlinkJava7(@Nonnull File file) throws IOException {
         try {
             Path path = file.toPath();

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -291,7 +291,7 @@ public static void installExpressionFactory(ServletContextEvent event) {
 	/**
      * Installs log handler to monitor all Hudson logs.
      */
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE")
+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings("LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE")
     private void installLogger() {
         Jenkins.logRecords = handler.getView();
         Logger.getLogger("").addHandler(handler);

File: core/src/main/java/hudson/cli/GroovyshCommand.java
Patch:
@@ -96,7 +96,7 @@ protected Groovysh createShell(InputStream stdin, PrintStream stdout,
             private static final long serialVersionUID = 1L;
 
             @SuppressWarnings("unused")
-            @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
+            @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
             public Object doCall(Object[] args) {
                 assert(args.length == 1);
                 assert(args[0] instanceof Shell);
@@ -119,7 +119,7 @@ public Object doCall(Object[] args) {
             private static final long serialVersionUID = 1L;
 
             @SuppressWarnings("unused")
-            @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
+            @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
             public Object doCall(Object[] args) throws ChannelClosedException {
                 if (args.length == 1 && args[0] instanceof ChannelClosedException) {
                     throw (ChannelClosedException)args[0];

File: core/src/main/java/hudson/logging/LogRecorderManager.java
Patch:
@@ -129,7 +129,7 @@ public ContextMenu doChildrenContextMenu(StaplerRequest request, StaplerResponse
     /**
      * Configure the logging level.
      */
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE")
+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings("LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE")
     public HttpResponse doConfigLogger(@QueryParameter String name, @QueryParameter String level) {
         Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         Level lv;

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -25,8 +25,6 @@
  */
 package hudson.model;
 
-import edu.umd.cs.findbugs.annotations.OverrideMustInvoke;
-import edu.umd.cs.findbugs.annotations.When;
 import hudson.EnvVars;
 import hudson.Extension;
 import hudson.Launcher.ProcStarter;
@@ -88,6 +86,7 @@
 import org.kohsuke.args4j.Option;
 import org.kohsuke.stapler.interceptor.RequirePOST;
 
+import javax.annotation.OverridingMethodsMustInvokeSuper;
 import javax.annotation.concurrent.GuardedBy;
 import javax.servlet.ServletException;
 
@@ -1534,7 +1533,7 @@ public void doProgressiveLog( StaplerRequest req, StaplerResponse rsp) throws IO
      * @see hudson.slaves.RetentionStrategy#isAcceptingTasks(Computer)
      * @see hudson.model.Node#isAcceptingTasks()
      */
-    @OverrideMustInvoke(When.ANYTIME)
+    @OverridingMethodsMustInvokeSuper
     public boolean isAcceptingTasks() {
         final Node node = getNode();
         return getRetentionStrategy().isAcceptingTasks(this) && (node == null || node.isAcceptingTasks());

File: core/src/main/java/hudson/slaves/NodeSpecific.java
Patch:
@@ -24,10 +24,11 @@
 
 package hudson.slaves;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
 import hudson.model.Node;
 import hudson.model.EnvironmentSpecific;
 import hudson.model.TaskListener;
+
+import javax.annotation.Nonnull;
 import java.io.IOException;
 
 /**
@@ -45,5 +46,5 @@ public interface NodeSpecific<T extends NodeSpecific<T>> {
     /**
      * Returns a specialized copy of T for functioning in the given node.
      */
-    T forNode(@NonNull Node node, TaskListener log) throws IOException, InterruptedException;
+    T forNode(@Nonnull Node node, TaskListener log) throws IOException, InterruptedException;
 }

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -23,8 +23,6 @@
  */
 package hudson.slaves;
 
-import edu.umd.cs.findbugs.annotations.OverrideMustInvoke;
-import edu.umd.cs.findbugs.annotations.When;
 import hudson.AbortException;
 import hudson.FilePath;
 import hudson.Util;
@@ -68,6 +66,7 @@
 import org.kohsuke.stapler.interceptor.RequirePOST;
 
 import javax.annotation.CheckForNull;
+import javax.annotation.OverridingMethodsMustInvokeSuper;
 import javax.servlet.ServletException;
 import java.io.File;
 import java.io.IOException;
@@ -161,7 +160,7 @@ private OutputStream decorate(OutputStream os) {
      * {@inheritDoc}
      */
     @Override
-    @OverrideMustInvoke(When.ANYTIME)
+    @OverridingMethodsMustInvokeSuper
     public boolean isAcceptingTasks() {
         // our boolean flag is an override on any additional programmatic reasons why this agent might not be
         // accepting tasks.

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -60,7 +60,7 @@
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.model.Items;
 import jenkins.model.ParameterizedJobMixIn;
 import org.jenkinsci.Symbol;

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -43,7 +43,7 @@
 import com.thoughtworks.xstream.io.HierarchicalStreamReader;
 import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
 import com.thoughtworks.xstream.mapper.CannotResolveClassException;
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.PluginManager;
 import hudson.PluginWrapper;
 import hudson.diagnosis.OldDataMonitor;
@@ -415,7 +415,7 @@ class PluginClassOwnership implements ClassOwnership {
 
         private PluginManager pm;
 
-        @SuppressWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE") // classOwnership checked for null so why does FB complain?
+        @SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE") // classOwnership checked for null so why does FB complain?
         @Override public String ownerOf(Class<?> clazz) {
             if (classOwnership != null) {
                 return classOwnership.ownerOf(clazz);

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -842,7 +842,7 @@ protected Jenkins(File root, ServletContext context) throws IOException, Interru
      * @param pluginManager
      *      If non-null, use existing plugin manager.  create a new one.
      */
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings({
+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings({
         "SC_START_IN_CTOR", // bug in FindBugs. It flags UDPBroadcastThread.start() call but that's for another class
         "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD" // Trigger.timer
     })
@@ -3107,7 +3107,7 @@ public synchronized void save() throws IOException {
     /**
      * Called to shut down the system.
      */
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD")
+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings("ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD")
     public void cleanUp() {
         if (theInstance != this && theInstance != null) {
             LOGGER.log(Level.WARNING, "This instance is no longer the singleton, ignoring cleanUp()");
@@ -3952,7 +3952,7 @@ public void doDoFingerprintCheck( StaplerRequest req, StaplerResponse rsp ) thro
     /**
      * For debugging. Expose URL to perform GC.
      */
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("DM_GC")
+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings("DM_GC")
     @RequirePOST
     public void doGc(StaplerResponse rsp) throws IOException {
         checkPermission(Jenkins.ADMINISTER);

File: core/src/main/java/jenkins/security/QueueItemAuthenticatorConfiguration.java
Patch:
@@ -1,6 +1,5 @@
 package jenkins.security;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
 import hudson.Extension;
 import hudson.util.DescribableList;
 import jenkins.model.GlobalConfiguration;
@@ -10,6 +9,7 @@
 import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
+import javax.annotation.Nonnull;
 import java.io.IOException;
 import java.util.List;
 
@@ -59,7 +59,7 @@ public static QueueItemAuthenticatorConfiguration get() {
     @Extension(ordinal = 100)
     public static class ProviderImpl extends QueueItemAuthenticatorProvider {
 
-        @NonNull
+        @Nonnull
         @Override
         public List<QueueItemAuthenticator> getAuthenticators() {
             return get().getAuthenticators();

File: core/src/main/java/jenkins/util/ProgressiveRendering.java
Patch:
@@ -24,7 +24,7 @@
 
 package jenkins.util;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;

File: core/src/test/java/hudson/slaves/ComputerLauncherTest.java
Patch:
@@ -24,17 +24,16 @@
 
 package hudson.slaves;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import java.io.BufferedReader;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.PrintStream;
 import java.io.StringReader;
+
 import org.apache.commons.io.output.NullOutputStream;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
-@SuppressWarnings("DM_DEFAULT_ENCODING")
 public class ComputerLauncherTest {
 
     @Test public void jdk7() throws IOException {

File: test/src/test/java/hudson/cli/CopyJobCommandTest.java
Patch:
@@ -24,7 +24,6 @@
 
 package hudson.cli;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import static hudson.cli.CLICommandInvoker.Matcher.*;
 import hudson.model.AbstractItem;
 import hudson.model.FreeStyleProject;
@@ -47,7 +46,6 @@
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 
-@SuppressWarnings("DM_DEFAULT_ENCODING")
 public class CopyJobCommandTest {
 
     @Rule public JenkinsRule j = new JenkinsRule();

File: test/src/test/java/hudson/cli/GetJobCommandTest.java
Patch:
@@ -24,7 +24,6 @@
 
 package hudson.cli;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import hudson.model.FreeStyleProject;
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
@@ -38,7 +37,6 @@
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 
-@SuppressWarnings("DM_DEFAULT_ENCODING")
 public class GetJobCommandTest {
 
     @Rule public JenkinsRule j = new JenkinsRule();

File: test/src/test/java/hudson/model/FreeStyleProjectTest.java
Patch:
@@ -34,7 +34,6 @@
 
 import com.gargoylesoftware.htmlunit.html.HtmlForm;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import hudson.tasks.Builder;
 import hudson.tasks.Shell;
 import java.io.ByteArrayInputStream;
@@ -115,7 +114,6 @@ public void customWorkspaceVariableExpansion() throws Exception {
 
     @Test
     @Issue("JENKINS-15817")
-    @SuppressWarnings("DM_DEFAULT_ENCODING")
     public void minimalConfigXml() throws Exception {
         // Make sure it can be created without exceptions:
         FreeStyleProject project = (FreeStyleProject) j.jenkins.createProjectFromXML("stuff", new ByteArrayInputStream("<project/>".getBytes()));

File: core/src/main/java/hudson/cli/CancelQuietDownCommand.java
Patch:
@@ -33,7 +33,7 @@
  * Cancel previous quiet down Jenkins - preparation for a restart
  *
  * @author pjanouse
- * @since TODO
+ * @since 2.14
  */
 @Extension
 public class CancelQuietDownCommand extends CLICommand {

File: core/src/main/java/hudson/cli/ClearQueueCommand.java
Patch:
@@ -34,7 +34,7 @@
  * Clears the build queue
  *
  * @author pjanouse
- * @since TODO
+ * @since 1.654
  */
 @Extension
 public class ClearQueueCommand extends CLICommand {

File: core/src/main/java/hudson/cli/DeleteJobCommand.java
Patch:
@@ -34,8 +34,9 @@
 import java.util.logging.Logger;
 
 /**
+ * CLI command, which deletes a job or multiple jobs.
  * @author pjanouse
- * @since TODO
+ * @since 1.649
  */
 @Extension
 public class DeleteJobCommand extends CLICommand {
@@ -83,7 +84,7 @@ protected int run() throws Exception {
         }
 
         if (errorOccurred) {
-            throw new AbortException("Error occured while performing this command, see previous stderr output.");
+            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);
         }
         return 0;
     }

File: core/src/main/java/hudson/cli/DeleteViewCommand.java
Patch:
@@ -95,7 +95,7 @@ protected int run() throws Exception {
         }
 
         if (errorOccurred) {
-            throw new AbortException("Error occured while performing this command, see previous stderr output.");
+            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);
         }
         return 0;
     }

File: core/src/main/java/hudson/cli/OfflineNodeCommand.java
Patch:
@@ -39,8 +39,9 @@
 import java.util.List;
 
 /**
+ * CLI Command, which puts the Jenkins node offline.
  * @author pjanouse
- * @since TODO
+ * @since 2.15
  */
 @Extension
 public class OfflineNodeCommand extends CLICommand {
@@ -88,7 +89,7 @@ protected int run() throws Exception {
         }
 
         if (errorOccurred) {
-            throw new AbortException("Error occured while performing this command, see previous stderr output.");
+            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);
         }
         return 0;
     }

File: core/src/main/java/hudson/cli/OnlineNodeCommand.java
Patch:
@@ -37,8 +37,9 @@
 import java.util.List;
 
 /**
+ * CLI Command, which moves the node to the online state.
  * @author pjanouse
- * @since TODO
+ * @since 1.642
  */
 @Extension
 public class OnlineNodeCommand extends CLICommand {
@@ -86,7 +87,7 @@ protected int run() throws Exception {
         }
 
         if (errorOccurred){
-            throw new AbortException("Error occured while performing this command, see previous stderr output.");
+            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);
         }
         return 0;
     }

File: core/src/main/java/hudson/cli/QuietDownCommand.java
Patch:
@@ -34,7 +34,7 @@
  * Quiet down Jenkins - preparation for a restart
  *
  * @author pjanouse
- * @since TODO
+ * @since 2.14
  */
 @Extension
 public class QuietDownCommand extends CLICommand {

File: core/src/main/java/hudson/cli/ReloadConfigurationCommand.java
Patch:
@@ -28,10 +28,10 @@
 import jenkins.model.Jenkins;
 
 /**
- * Reload everything from file system
+ * Reload everything from the file system.
  *
  * @author pjanouse
- * @since TODO
+ * @since 2.4
  */
 @Extension
 public class ReloadConfigurationCommand extends CLICommand {

File: core/src/main/java/hudson/cli/ReloadJobCommand.java
Patch:
@@ -38,8 +38,9 @@
 import java.util.logging.Logger;
 
 /**
+ * Reloads job from the disk.
  * @author pjanouse
- * @since TODO
+ * @since 1.633
  */
 @Extension
 public class ReloadJobCommand extends CLICommand {
@@ -100,7 +101,7 @@ protected int run() throws Exception {
         }
 
         if (errorOccurred) {
-            throw new AbortException("Error occured while performing this command, see previous stderr output.");
+            throw new AbortException(CLI_LISTPARAM_SUMMARY_ERROR_TEXT);
         }
         return 0;
     }

File: core/src/main/java/hudson/cli/WaitNodeOfflineCommand.java
Patch:
@@ -28,8 +28,9 @@
 import org.kohsuke.args4j.Argument;
 
 /**
+ * CLI command, which waits till the node switches to the offline state.
  * @author pjanouse
- * @since TODO
+ * @since 2.16
  */
 @Extension
 public class WaitNodeOfflineCommand extends CLICommand {

File: core/src/main/java/hudson/cli/WaitNodeOnlineCommand.java
Patch:
@@ -28,8 +28,9 @@
 import org.kohsuke.args4j.Argument;
 
 /**
+ * CLI command, which waits till the node switches to the online state.
  * @author pjanouse
- * @since TODO
+ * @since 2.16
  */
 @Extension
 public class WaitNodeOnlineCommand extends CLICommand {

File: test/src/test/java/hudson/cli/ConnectNodeCommandTest.java
Patch:
@@ -64,7 +64,7 @@ public class ConnectNodeCommandTest {
         assertThat(result, failedWith(6));
         assertThat(result, hasNoStandardOutput());
         assertThat(result.stderr(), containsString("ERROR: user is missing the Agent/Connect permission"));
-        assertThat(result.stderr(), not(containsString("ERROR: Error occured while performing this command, see previous stderr output.")));
+        assertThat(result.stderr(), not(containsString("ERROR: " + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT)));
     }
 
     @Test public void connectNodeShouldFailIfNodeDoesNotExist() throws Exception {
@@ -74,7 +74,7 @@ public class ConnectNodeCommandTest {
         assertThat(result, failedWith(3));
         assertThat(result, hasNoStandardOutput());
         assertThat(result.stderr(), containsString("ERROR: No such agent \"never_created\" exists."));
-        assertThat(result.stderr(), not(containsString("ERROR: Error occured while performing this command, see previous stderr output.")));
+        assertThat(result.stderr(), not(containsString("ERROR: " + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT)));
     }
 
     @Test public void connectNodeShouldSucceed() throws Exception {
@@ -156,7 +156,7 @@ public class ConnectNodeCommandTest {
         assertThat(result, failedWith(5));
         assertThat(result, hasNoStandardOutput());
         assertThat(result.stderr(), containsString("never_created: No such agent \"never_created\" exists. Did you mean \"aNode1\"?"));
-        assertThat(result.stderr(), containsString("ERROR: Error occured while performing this command, see previous stderr output."));
+        assertThat(result.stderr(), containsString("ERROR: " + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));
         assertThat(slave1.toComputer().isOnline(), equalTo(true));
         assertThat(slave2.toComputer().isOnline(), equalTo(true));
     }

File: test/src/test/java/hudson/cli/DisconnectNodeCommandTest.java
Patch:
@@ -68,7 +68,7 @@ public void disconnectNodeShouldFailWithoutComputerDisconnectPermission() throws
         assertThat(result, failedWith(6));
         assertThat(result, hasNoStandardOutput());
         assertThat(result.stderr(), containsString("ERROR: user is missing the Agent/Disconnect permission"));
-        assertThat(result.stderr(), not(containsString("ERROR: Error occured while performing this command, see previous stderr output.")));
+        assertThat(result.stderr(), not(containsString("ERROR: " + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT)));
     }
 
     @Test
@@ -79,7 +79,7 @@ public void disconnectNodeShouldFailIfNodeDoesNotExist() throws Exception {
         assertThat(result, failedWith(3));
         assertThat(result, hasNoStandardOutput());
         assertThat(result.stderr(), containsString("ERROR: No such agent \"never_created\" exists."));
-        assertThat(result.stderr(), not(containsString("ERROR: Error occured while performing this command, see previous stderr output.")));
+        assertThat(result.stderr(), not(containsString("ERROR: " + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT)));
     }
 
     @Test
@@ -233,7 +233,7 @@ public void disconnectNodeManyShouldFailIfANodeDoesNotExist() throws Exception {
         assertThat(result, failedWith(5));
         assertThat(result, hasNoStandardOutput());
         assertThat(result.stderr(), containsString("never_created: No such agent \"never_created\" exists. Did you mean \"aNode1\"?"));
-        assertThat(result.stderr(), containsString("ERROR: Error occured while performing this command, see previous stderr output."));
+        assertThat(result.stderr(), containsString("ERROR: " + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));
         assertThat(slave1.toComputer().isOffline(), equalTo(true));
         assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));
         assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo("aCause"));

File: test/src/test/java/hudson/cli/OnlineNodeCommandTest.java
Patch:
@@ -253,7 +253,7 @@ public class OnlineNodeCommandTest {
         assertThat(result, failedWith(5));
         assertThat(result, hasNoStandardOutput());
         assertThat(result.stderr(), containsString("never_created: No such agent \"never_created\" exists. Did you mean \"aNode1\"?"));
-        assertThat(result.stderr(), containsString("ERROR: Error occured while performing this command, see previous stderr output."));
+        assertThat(result.stderr(), containsString("ERROR: " + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));
         if (slave1.toComputer().isConnecting()) {
             System.out.println("Waiting until aNode1 going online is in progress...");
             slave1.toComputer().waitUntilOnline();

File: core/src/main/java/hudson/model/TopLevelItemDescriptor.java
Patch:
@@ -219,7 +219,7 @@ public String getIconFilePath(String size) {
 
     /**
      * Get the Item's Icon class specification e.g. 'icon-notepad'.
-     * <p/>
+     * <p>
      * Note: do <strong>NOT</strong> include icon size specifications (such as 'icon-sm').
      *
      * @return The Icon class specification e.g. 'icon-notepad'.

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -1058,6 +1058,7 @@ public Categories doItemCategories(StaplerRequest req, StaplerResponse rsp) thro
             metadata.put("displayName", descriptor.getDisplayName());
             metadata.put("description", descriptor.getDescription());
             metadata.put("iconFilePathPattern", descriptor.getIconFilePathPattern());
+            metadata.put("iconClassName", descriptor.getIconClassName());
 
             Category category = categories.getItem(ic.getId());
             if (category != null) {

File: test/src/test/java/hudson/cli/CLIActionTest.java
Patch:
@@ -89,7 +89,6 @@ public void serveCliActionToAnonymousUserWithoutPermissions() throws Exception {
         settings.setHttpMethod(HttpMethod.POST);
         settings.setAdditionalHeader("Session", UUID.randomUUID().toString());
         settings.setAdditionalHeader("Side", "download"); // We try to download something to init the duplex channel
-        settings = wc.addCrumb(settings);
 
         Page page = wc.getPage(settings);
         WebResponse webResponse = page.getWebResponse();

File: core/src/main/java/hudson/TcpSlaveAgentListener.java
Patch:
@@ -170,6 +170,7 @@ public void shutdown() {
             if (localAddress instanceof InetSocketAddress) {
                 InetSocketAddress address = (InetSocketAddress) localAddress;
                 Socket client = new Socket(address.getHostName(), address.getPort());
+                client.setSoTimeout(1000); // waking the acceptor loop should be quick
                 new PingAgentProtocol().connect(client);
             }
         } catch (IOException e) {

File: core/src/main/java/hudson/widgets/BuildHistoryWidget.java
Patch:
@@ -77,6 +77,6 @@ public HistoryPageFilter getHistoryPageFilter() {
         historyPageFilter.add(baseList, getQueuedItems());
         historyPageFilter.widget = this;
 
-        return historyPageFilter;
+        return updateFirstTransientBuildKey(historyPageFilter);
     }
 }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -1402,6 +1402,7 @@ public Descriptor getDescriptorByName(String id) {
      * If you have an instance of {@code type} and call {@link Describable#getDescriptor()},
      * you'll get the same instance that this method returns.
      */
+    @CheckForNull
     public Descriptor getDescriptor(Class<? extends Describable> type) {
         for( Descriptor d : getExtensionList(Descriptor.class) )
             if(d.clazz==type)

File: core/src/main/java/hudson/XmlFile.java
Patch:
@@ -28,7 +28,7 @@
 import com.thoughtworks.xstream.converters.Converter;
 import com.thoughtworks.xstream.converters.UnmarshallingContext;
 import com.thoughtworks.xstream.io.StreamException;
-import com.thoughtworks.xstream.io.xml.XppDriver;
+import com.thoughtworks.xstream.io.xml.Xpp3Driver;
 import hudson.diagnosis.OldDataMonitor;
 import hudson.model.Descriptor;
 import hudson.util.AtomicFileWriter;
@@ -292,7 +292,7 @@ private void attempt() throws Eureka {
 
     private static final SAXParserFactory JAXP = SAXParserFactory.newInstance();
 
-    private static final XppDriver DEFAULT_DRIVER = new XppDriver();
+    private static final Xpp3Driver DEFAULT_DRIVER = new Xpp3Driver();
 
     static {
         JAXP.setNamespaceAware(true);

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -26,7 +26,7 @@
 
 import com.thoughtworks.xstream.converters.ConversionException;
 import com.thoughtworks.xstream.io.StreamException;
-import com.thoughtworks.xstream.io.xml.XppDriver;
+import com.thoughtworks.xstream.io.xml.Xpp3Driver;
 import hudson.DescriptorExtensionList;
 import hudson.Extension;
 import hudson.ExtensionPoint;
@@ -1166,7 +1166,7 @@ public void updateByXml(Source source) throws IOException {
             // Do not allow overwriting view name as it might collide with another
             // view in same ViewGroup and might not satisfy Jenkins.checkGoodName.
             String oldname = name;
-            Jenkins.XSTREAM.unmarshal(new XppDriver().createReader(in), this);
+            Jenkins.XSTREAM.unmarshal(new Xpp3Driver().createReader(in), this);
             name = oldname;
         } catch (StreamException | ConversionException | Error e) {// mostly reflection errors
             throw new IOException("Unable to read",e);

File: core/src/main/java/hudson/util/io/RewindableFileOutputStream.java
Patch:
@@ -33,6 +33,7 @@
  * {@link OutputStream} that writes to a file.
  * <p>
  * Allows the caller to rewind the stream and override previous content with fresh new data.
+ * @since 2.18
  */
 public class RewindableFileOutputStream extends OutputStream {
     protected final File out;

File: core/src/main/java/hudson/util/io/RewindableRotatingFileOutputStream.java
Patch:
@@ -30,7 +30,7 @@
  * {@link ReopenableFileOutputStream} that does log rotation upon rewind.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.416
+ * @since 2.18
  */
 public class RewindableRotatingFileOutputStream extends RewindableFileOutputStream {
     /**

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -755,7 +755,7 @@ public String getBackupVersion() {
             try (JarFile backupWar = new JarFile(new File(Lifecycle.get().getHudsonWar() + ".bak"))) {
                 Attributes attrs = backupWar.getManifest().getMainAttributes();
                 String v = attrs.getValue("Jenkins-Version");
-                if (v == null) v = attrs.getValue("Hudson-Version");
+                if (v == null)   v = attrs.getValue("Hudson-Version");
                 return v;
             }
         } catch (IOException e) {

File: core/src/main/java/hudson/TcpSlaveAgentListener.java
Patch:
@@ -170,6 +170,7 @@ public void shutdown() {
             if (localAddress instanceof InetSocketAddress) {
                 InetSocketAddress address = (InetSocketAddress) localAddress;
                 Socket client = new Socket(address.getHostName(), address.getPort());
+                client.setSoTimeout(1000); // waking the acceptor loop should be quick
                 new PingAgentProtocol().connect(client);
             }
         } catch (IOException e) {

File: test/src/test/java/hudson/cli/CLIActionTest.java
Patch:
@@ -89,7 +89,6 @@ public void serveCliActionToAnonymousUserWithoutPermissions() throws Exception {
         settings.setHttpMethod(HttpMethod.POST);
         settings.setAdditionalHeader("Session", UUID.randomUUID().toString());
         settings.setAdditionalHeader("Side", "download"); // We try to download something to init the duplex channel
-        settings = wc.addCrumb(settings);
 
         Page page = wc.getPage(settings);
         WebResponse webResponse = page.getWebResponse();

File: core/src/main/java/jenkins/security/s2m/AdminCallableMonitor.java
Patch:
@@ -39,7 +39,7 @@ public boolean isActivated() {
 
     @Override
     public String getDisplayName() {
-        return "Agent \u2192 Master Access Control";
+        return Messages.AdminCallableMonitor_DisplayName();
     }
 
     // bind this to URL

File: core/src/main/java/hudson/widgets/BuildHistoryWidget.java
Patch:
@@ -77,6 +77,6 @@ public HistoryPageFilter getHistoryPageFilter() {
         historyPageFilter.add(baseList, getQueuedItems());
         historyPageFilter.widget = this;
 
-        return historyPageFilter;
+        return updateFirstTransientBuildKey(historyPageFilter);
     }
 }

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -107,7 +107,7 @@ public ParametersAction(List<ParameterValue> parameters) {
      *
      * @param parameters the parameters
      * @param additionalSafeParameters additional safe parameters
-     * @since TODO
+     * @since 1.651.2, 2.3
      */
     public ParametersAction(List<ParameterValue> parameters, Collection<String> additionalSafeParameters) {
         this(parameters);
@@ -334,7 +334,7 @@ private List<? extends ParameterValue> filter(List<ParameterValue> parameters) {
      * caller could inject any parameter (using any key) here. <strong>Treat it as untrusted data</strong>.
      *
      * @return all parameters defined here.
-     * @since TODO
+     * @since 1.651.2, 2.3
      */
     public List<ParameterValue> getAllParameters() {
         return Collections.unmodifiableList(parameters);

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -1414,6 +1414,7 @@ public Descriptor getDescriptorByName(String id) {
      * If you have an instance of {@code type} and call {@link Describable#getDescriptor()},
      * you'll get the same instance that this method returns.
      */
+    @CheckForNull
     public Descriptor getDescriptor(Class<? extends Describable> type) {
         for( Descriptor d : getExtensionList(Descriptor.class) )
             if(d.clazz==type)

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -260,7 +260,7 @@ protected JSONSignatureValidator getJsonSignatureValidator() {
      *              if name is null, then the default name will be used,
      *              which is "update site" followed by the update site id
      * @return the signature validator.
-     * @since 2.15
+     * @since 2.20
      */
     @Nonnull
     @Restricted(NoExternalUse.class)
@@ -450,7 +450,7 @@ public String getUrl() {
      * URL which exposes the metadata location in a specific update site.
      * @param downloadable, the downloadable id of a specific metatadata json (e.g. hudson.tasks.Maven.MavenInstaller.json)
      * @return the location
-     * @since 2.15
+     * @since 2.20
      */
     @CheckForNull
     @Restricted(NoExternalUse.class)

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -77,6 +77,7 @@
 import java.util.IdentityHashMap;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 
 /**
  * Metadata about a configurable instance.
@@ -562,7 +563,7 @@ public T newInstance(StaplerRequest req) throws FormException {
      *      Signals a problem in the submitted form.
      * @since 1.145
      */
-    public T newInstance(@CheckForNull StaplerRequest req, @Nonnull JSONObject formData) throws FormException {
+    public T newInstance(@Nullable StaplerRequest req, @Nonnull JSONObject formData) throws FormException {
         try {
             Method m = getClass().getMethod("newInstance", StaplerRequest.class);
 

File: core/src/main/java/hudson/util/jna/SHELLEXECUTEINFO.java
Patch:
@@ -26,6 +26,7 @@
 import com.sun.jna.Pointer;
 import com.sun.jna.Structure;
 import com.sun.jna.Union;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.Arrays;
 import java.util.List;
 
@@ -56,6 +57,7 @@
  * @author Kohsuke Kawaguchi
  * @see <a href="http://msdn.microsoft.com/en-us/library/bb759784(v=VS.85).aspx">MSDN: SHELLEXECUTEINFO</a>
  */
+@SuppressFBWarnings(value = "UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD", justification = "JNA Data Structure")
 public class SHELLEXECUTEINFO extends Structure {
     public int cbSize = size();
     public int fMask;
@@ -85,6 +87,7 @@ protected List getFieldOrder() {
                 "hProcess");
     }
 
+    @SuppressFBWarnings(value = "UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD", justification = "JNA Data Structure")
     public static class DUMMYUNIONNAME_union extends Union {
         public Pointer hIcon;
         public Pointer hMonitor;

File: core/src/main/java/hudson/util/jna/WINBASE.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.sun.jna.Structure;
 import com.sun.jna.Pointer;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.Arrays;
 import java.util.List;
 
@@ -33,6 +34,7 @@ public interface WINBASE {
 } SECURITY_ATTRIBUTES,
  *PSECURITY_ATTRIBUTES,
  *LPSECURITY_ATTRIBUTES;*/
+  @SuppressFBWarnings(value = "UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD", justification = "JNA Data Structure")
   class SECURITY_ATTRIBUTES extends Structure {
     public int nLength;
     public Pointer lpSecurityDescriptor;
@@ -50,6 +52,7 @@ protected List getFieldOrder() {
     DWORD dwLowDateTime;
     DWORD dwHighDateTime;
 } FILETIME, *PFILETIME, *LPFILETIME;*/
+  @SuppressFBWarnings(value = "UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD", justification = "JNA Data Structure")
   class FILETIME extends Structure {
     public int dwLowDateTime;
     public int dwHighDateTime;

File: cli/src/main/java/hudson/cli/FullDuplexHttpStream.java
Patch:
@@ -137,8 +137,7 @@ private String readData(String dest) throws IOException {
             if (authorization != null) {
                 con.addRequestProperty("Authorization", authorization);
             }
-            try {
-                BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()));
+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()))) {
                 String line = reader.readLine();
                 String nextLine = reader.readLine();
                 if (nextLine != null) {

File: cli/src/main/java/hudson/cli/CLI.java
Patch:
@@ -188,6 +188,9 @@ private Channel connectViaCliPort(URL jenkins, CliPort clip) throws IOException
                 rsp.write(ch);
             }
             String head = new BufferedReader(new StringReader(rsp.toString("ISO-8859-1"))).readLine();
+            if (head == null) {
+                throw new IOException("Unexpected empty response");
+            }
             if (!head.startsWith("HTTP/1.0 200 "))
                 throw new IOException("Failed to establish a connection through HTTP proxy: "+rsp);
 

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -278,7 +278,7 @@ public static UpdateCenter createUpdateCenter(@CheckForNull UpdateCenterConfigur
             // Should never happen
             LOGGER.log(WARNING, "UpdateCenter class {0} does not extend hudson.model.UpdateCenter. Using default.", requiredClassName);
         } catch(NoSuchMethodException e) {
-            LOGGER.log(WARNING, String.format("UpdateCenter class {0} does not define one of the required constructors. Using default", requiredClassName), e);
+            LOGGER.log(WARNING, String.format("UpdateCenter class %s does not define one of the required constructors. Using default", requiredClassName), e);
         } catch(Exception e) {
             LOGGER.log(WARNING, String.format("Unable to instantiate custom plugin manager [%s]. Using default.", requiredClassName), e);
         }

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -153,6 +153,7 @@
 
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
+import hudson.model.PasswordParameterDefinition;
 import hudson.util.RunList;
 import java.util.concurrent.atomic.AtomicLong;
 import javax.annotation.CheckForNull;
@@ -1756,7 +1757,7 @@ public String getPasswordValue(Object o) {
             }
             return ((Secret) o).getEncryptedValue();
         }
-        if (getIsUnitTest()) {
+        if (getIsUnitTest() && !o.equals(PasswordParameterDefinition.DEFAULT_VALUE)) {
             throw new SecurityException("attempted to render plaintext ‘" + o + "’ in password field; use a getter of type Secret instead");
         }
         return o.toString();

File: core/src/main/java/hudson/scm/AutoBrowserHolder.java
Patch:
@@ -37,7 +37,9 @@
  *
  * <p>
  * This class makes such tracking easy by hiding this logic.
+ * @deprecated Disabled by default: JENKINS-35098
  */
+@Deprecated
 final class AutoBrowserHolder {
     private int cacheGeneration;
     private RepositoryBrowser cache;

File: core/src/main/java/hudson/Util.java
Patch:
@@ -25,6 +25,7 @@
 
 import jenkins.util.SystemProperties;
 import com.sun.jna.Native;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import hudson.Proc.LocalProc;
@@ -405,6 +406,8 @@ private static void tryOnceDeleteContentsRecursive(File directory) throws IOExce
      * @return false if it is ok to continue trying to delete things, true if
      *         we were interrupted (and should stop now).
      */
+    @SuppressFBWarnings(value = "DM_GC", justification = "Garbage collection happens only when "
+            + "GC_AFTER_FAILED_DELETE is true. It's an experimental feature in Jenkins.")
     private static boolean pauseBetweenDeletes(int numberOfAttemptsSoFar) {
         long delayInMs;
         if( numberOfAttemptsSoFar>=DELETION_MAX ) return false;

File: core/src/main/java/hudson/cli/CliManagerImpl.java
Patch:
@@ -50,10 +50,11 @@ public class CliManagerImpl implements CliEntryPoint, Serializable {
     
     private Authentication transportAuth;
 
+    //TODO: Migrate the code to Callable decorator
     /**
      * Runs callable from this CLI client with the transport authentication credential.
      */
-    private final CallableFilter authenticationFilter = new CallableFilter() {
+    private transient final CallableFilter authenticationFilter = new CallableFilter() {
         public <V> V call(Callable<V> callable) throws Exception {
             SecurityContext context = SecurityContextHolder.getContext();
             Authentication old = context.getAuthentication();

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -816,7 +816,7 @@ public Object getDynamic(String token, StaplerRequest req,
             StaplerResponse rsp) {
         try {
             // try to interpret the token as build number
-            return getBuildByNumber(Integer.valueOf(token));
+            return getBuildByNumber(Integer.parseInt(token));
         } catch (NumberFormatException e) {
             // try to map that to widgets
             for (Widget w : getWidgets()) {

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -278,7 +278,7 @@ public static UpdateCenter createUpdateCenter(@CheckForNull UpdateCenterConfigur
             // Should never happen
             LOGGER.log(WARNING, "UpdateCenter class {0} does not extend hudson.model.UpdateCenter. Using default.", requiredClassName);
         } catch(NoSuchMethodException e) {
-            LOGGER.log(WARNING, String.format("UpdateCenter class {0} does not define one of the required constructors. Using default", requiredClassName), e);
+            LOGGER.log(WARNING, String.format("UpdateCenter class %s does not define one of the required constructors. Using default", requiredClassName), e);
         } catch(Exception e) {
             LOGGER.log(WARNING, String.format("Unable to instantiate custom plugin manager [%s]. Using default.", requiredClassName), e);
         }

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -447,7 +447,7 @@ public synchronized void doSubmitDescription( StaplerRequest req, StaplerRespons
                                     new Object[]{ legacyUserDir, o });
                         }
                     } catch (IOException e) {
-                        LOGGER.log(Level.FINE, String.format("Exception trying to load user from {0}: {1}",
+                        LOGGER.log(Level.FINE, String.format("Exception trying to load user from %s: %s",
                                 new Object[]{ legacyUserDir, e.getMessage() }), e);
                     }
                 }

File: core/src/main/java/hudson/views/ListViewColumn.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import net.sf.json.JSONObject;
 
 /**
  * Extension point for adding a column to a table rendering of {@link Item}s, such as {@link ListView}.
@@ -125,14 +126,14 @@ public static List<ListViewColumn> createDefaultInitialColumnList() {
         // OK, set up default list of columns:
         // create all instances
         ArrayList<ListViewColumn> r = new ArrayList<ListViewColumn>();
-
+        final JSONObject emptyJSON = new JSONObject();
         for (Descriptor<ListViewColumn> d : ListViewColumn.all())
             try {
                 if (d instanceof ListViewColumnDescriptor) {
                     ListViewColumnDescriptor ld = (ListViewColumnDescriptor) d;
                     if (!ld.shownByDefault())       continue;   // skip this
                 }
-                ListViewColumn lvc = d.newInstance(null, null);
+                ListViewColumn lvc = d.newInstance(null, emptyJSON);
                 if (!lvc.shownByDefault())      continue; // skip this
 
                 r.add(lvc);

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol3.java
Patch:
@@ -1,5 +1,6 @@
 package jenkins.slaves;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.AbortException;
 import hudson.Extension;
 import hudson.Util;
@@ -143,6 +144,8 @@ protected String getNodeSecret(String nodeName) throws Failure {
      * an escape hatch for those who hit any issues and those who are trying this out.
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_REFACTORED_TO_BE_FINAL",
+            justification = "Part of the administrative API for System Groovy scripts.")
     public static boolean ENABLED;
     private static final Boolean forceEnabled;
 

File: core/src/main/java/jenkins/util/SystemProperties.java
Patch:
@@ -25,6 +25,7 @@
 
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.EnvVars;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -87,6 +88,8 @@ public SystemProperties() {}
      * Called by the servlet container to initialize the {@link ServletContext}.
      */
     @Override
+    @SuppressFBWarnings(value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", 
+            justification = "Currently Jenkins instance may have one ond only one context")
     public void contextInitialized(ServletContextEvent event) {
         theContext = event.getServletContext();
     }

File: core/src/main/java/jenkins/util/xml/XMLUtils.java
Patch:
@@ -233,6 +233,8 @@ private static DocumentBuilderFactory newDocumentBuilderFactory() {
     private static void setDocumentBuilderFactoryFeature(DocumentBuilderFactory documentBuilderFactory, String feature, boolean state) {
         try {
             documentBuilderFactory.setFeature(feature, state);
-        } catch (Exception e) {}
+        } catch (Exception e) {
+            LOGGER.log(Level.WARNING, String.format("Failed to set the XML Document Builder factory feature %s to %s", feature, state), e);
+        }
     }
 }

File: core/src/main/java/jenkins/util/xml/XMLUtils.java
Patch:
@@ -233,6 +233,8 @@ private static DocumentBuilderFactory newDocumentBuilderFactory() {
     private static void setDocumentBuilderFactoryFeature(DocumentBuilderFactory documentBuilderFactory, String feature, boolean state) {
         try {
             documentBuilderFactory.setFeature(feature, state);
-        } catch (Exception e) {}
+        } catch (Exception e) {
+            LOGGER.log(Level.WARNING, String.format("Failed to set the XML Document Builder factory feature %s to %s", feature, state), e);
+        }
     }
 }

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -278,7 +278,7 @@ public static UpdateCenter createUpdateCenter(@CheckForNull UpdateCenterConfigur
             // Should never happen
             LOGGER.log(WARNING, "UpdateCenter class {0} does not extend hudson.model.UpdateCenter. Using default.", requiredClassName);
         } catch(NoSuchMethodException e) {
-            LOGGER.log(WARNING, String.format("UpdateCenter class {0} does not define one of the required constructors. Using default", requiredClassName), e);
+            LOGGER.log(WARNING, String.format("UpdateCenter class %s does not define one of the required constructors. Using default", requiredClassName), e);
         } catch(Exception e) {
             LOGGER.log(WARNING, String.format("Unable to instantiate custom plugin manager [%s]. Using default.", requiredClassName), e);
         }

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -447,7 +447,7 @@ public synchronized void doSubmitDescription( StaplerRequest req, StaplerRespons
                                     new Object[]{ legacyUserDir, o });
                         }
                     } catch (IOException e) {
-                        LOGGER.log(Level.FINE, String.format("Exception trying to load user from {0}: {1}",
+                        LOGGER.log(Level.FINE, String.format("Exception trying to load user from %s: %s",
                                 new Object[]{ legacyUserDir, e.getMessage() }), e);
                     }
                 }

File: core/src/main/java/hudson/cli/CliManagerImpl.java
Patch:
@@ -50,10 +50,11 @@ public class CliManagerImpl implements CliEntryPoint, Serializable {
     
     private Authentication transportAuth;
 
+    //TODO: Migrate the code to Callable decorator
     /**
      * Runs callable from this CLI client with the transport authentication credential.
      */
-    private final CallableFilter authenticationFilter = new CallableFilter() {
+    private transient final CallableFilter authenticationFilter = new CallableFilter() {
         public <V> V call(Callable<V> callable) throws Exception {
             SecurityContext context = SecurityContextHolder.getContext();
             Authentication old = context.getAuthentication();

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -154,6 +154,7 @@
 
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
+import hudson.model.PasswordParameterDefinition;
 import hudson.util.RunList;
 import java.util.concurrent.atomic.AtomicLong;
 import javax.annotation.CheckForNull;
@@ -1779,7 +1780,7 @@ public String getPasswordValue(Object o) {
             }
             return ((Secret) o).getEncryptedValue();
         }
-        if (getIsUnitTest()) {
+        if (getIsUnitTest() && !o.equals(PasswordParameterDefinition.DEFAULT_VALUE)) {
             throw new SecurityException("attempted to render plaintext ‘" + o + "’ in password field; use a getter of type Secret instead");
         }
         return o.toString();

File: core/src/main/java/hudson/model/BuildTimelineWidget.java
Patch:
@@ -62,8 +62,8 @@ public TimelineEventList doData(StaplerRequest req, @QueryParameter long min, @Q
         TimelineEventList result = new TimelineEventList();
         for (Run r : builds.byTimestamp(min,max)) {
             Event e = new Event();
-            e.start = r.getTime();
-            e.end   = new Date(r.timestamp+r.getDuration());
+            e.start = new Date(r.getStartTimeInMillis());
+            e.end   = new Date(r.getStartTimeInMillis()+r.getDuration());
             e.title = r.getFullDisplayName();
             // what to put in the description?
             // e.description = "Longish description of event "+r.getFullDisplayName();

File: core/src/main/java/hudson/model/DescriptorVisibilityFilter.java
Patch:
@@ -35,7 +35,7 @@ public abstract class DescriptorVisibilityFilter implements ExtensionPoint {
      * @return true to allow the descriptor to be visible. false to hide it.
      * If any of the installed {@link DescriptorVisibilityFilter} returns false,
      * the descriptor is not shown.
-     * @since FIXME
+     * @since 2.12
      */
     public boolean filterType(@Nonnull Class<?> contextClass, @Nonnull Descriptor descriptor) {
         return true;

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -1468,7 +1468,7 @@ private static boolean canDiscoverItem(@Nonnull final String fullName) {
      * Provides the XStream instance this class is using for serialization.
      *
      * @return the XStream instance
-     * @since FIXME
+     * @since 1.655
      */
     @Nonnull
     public static XStream2 getXStream() {

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -316,7 +316,7 @@ private List<? extends ParameterValue> filter(List<ParameterValue> parameters) {
             if (this.parameterDefinitionNames.contains(v.getName()) || isSafeParameter(v.getName())) {
                 filteredParameters.add(v);
             } else {
-                LOGGER.log(Level.WARNING, "Skipped parameter `{0}` as it is undefined on `{1}`. Set `-D{2}`=true to allow "
+                LOGGER.log(Level.WARNING, "Skipped parameter `{0}` as it is undefined on `{1}`. Set `-D{2}=true` to allow "
                         + "undefined parameters to be injected as environment variables or `-D{3}=[comma-separated list]` to whitelist specific parameter names, "
                         + "even though it represents a security breach",
                         new Object [] { v.getName(), run.getParent().getFullName(), KEEP_UNDEFINED_PARAMETERS_SYSTEM_PROPERTY_NAME, SAFE_PARAMETERS_SYSTEM_PROPERTY_NAME });

File: core/src/main/java/jenkins/model/item_category/StandaloneProjectsCategory.java
Patch:
@@ -28,6 +28,8 @@
 
 /**
  * Designed for projects with a self-contained configuration and history.
+ *
+ * @since 2.0
  */
 @Extension(ordinal = -100)
 public class StandaloneProjectsCategory extends ItemCategory {

File: test/src/test/java/hudson/cli/AbstractBuildRangeCommand2Test.java
Patch:
@@ -52,7 +52,7 @@
 /**
  * @author pjanouse
  */
-public class AbstractBuildRangeCommandTest2 {
+public class AbstractBuildRangeCommand2Test {
 
     private CLICommandInvoker command;
 

File: test/src/test/java/hudson/cli/HelpCommandTest.java
Patch:
@@ -100,9 +100,9 @@ private void assertContainsOverviewOfMethodCommand(String text) {
     }
 
     private void assertContainsUsageOfMethodCommand(String text) {
-        assertThat(text, containsString("offline-node NAME [-m VAL]"));
+        assertThat(text, containsString("offline-node NAME ... [-m VAL]"));
         assertThat(text, containsStrings("NAME", "Agent name, or empty string for master"));
-        assertThat(text, containsStrings("-m VAL", "Record the note about why you are disconnecting this node"));
+        assertThat(text, containsStrings("-m VAL", "Record the reason about why you are disconnecting this node"));
     }
 
     private static Matcher<String> containsStrings(String... strings) {

File: test/src/test/java/hudson/model/ParametersAction2Test.java
Patch:
@@ -16,7 +16,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-public class ParametersActionTest2 {
+public class ParametersAction2Test {
     @Rule
     public JenkinsRule j = new JenkinsRule();
 

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -316,7 +316,7 @@ private List<? extends ParameterValue> filter(List<ParameterValue> parameters) {
             if (this.parameterDefinitionNames.contains(v.getName()) || isSafeParameter(v.getName())) {
                 filteredParameters.add(v);
             } else {
-                LOGGER.log(Level.WARNING, "Skipped parameter `{0}` as it is undefined on `{1}`. Set `-D{2}`=true to allow "
+                LOGGER.log(Level.WARNING, "Skipped parameter `{0}` as it is undefined on `{1}`. Set `-D{2}=true` to allow "
                         + "undefined parameters to be injected as environment variables or `-D{3}=[comma-separated list]` to whitelist specific parameter names, "
                         + "even though it represents a security breach",
                         new Object [] { v.getName(), run.getParent().getFullName(), KEEP_UNDEFINED_PARAMETERS_SYSTEM_PROPERTY_NAME, SAFE_PARAMETERS_SYSTEM_PROPERTY_NAME });

File: test/src/test/java/hudson/model/UsageStatisticsTest.java
Patch:
@@ -105,7 +105,9 @@ public void roundtrip() throws Exception {
         List<JSONObject> plugins = sortPlugins((List<JSONObject>) o.get("plugins"));
         Set<String> detached = new TreeSet<>();
         for (ClassicPluginStrategy.DetachedPlugin p: ClassicPluginStrategy.getDetachedPlugins()) {
-            detached.add(p.getShortName());
+            if (p.getSplitWhen().isOlderThan(Jenkins.getVersion())) {
+                detached.add(p.getShortName());
+            }
         }
         Set<String> keys = new TreeSet<>();
         keys.add("name");

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -576,7 +576,7 @@ public boolean hasLicensesXml() {
             if (dependency == null) {
                 PluginWrapper failedDependency = NOTICE.getPlugin(d.shortName);
                 if (failedDependency != null) {
-                    dependencyErrors.add(Messages.PluginWrapper_failed_to_load(failedDependency.getLongName(), d.version));
+                    dependencyErrors.add(Messages.PluginWrapper_failed_to_load_dependency(failedDependency.getLongName(), d.version));
                     break;
                 } else {
                     dependencyErrors.add(Messages.PluginWrapper_missing(d.shortName, d.version));
@@ -610,7 +610,7 @@ public boolean hasLicensesXml() {
         if (!dependencyErrors.isEmpty()) {
             NOTICE.addPlugin(this);
             StringBuilder messageBuilder = new StringBuilder();
-            messageBuilder.append("Failed to load ").append(getLongName()).append(System.lineSeparator());
+            messageBuilder.append(Messages.PluginWrapper_failed_to_load_plugin(getLongName(), getVersion())).append(System.lineSeparator());
             for (Iterator<String> iterator = dependencyErrors.iterator(); iterator.hasNext(); ) {
                 String dependencyError = iterator.next();
                 messageBuilder.append(" - ").append(dependencyError);

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -844,7 +844,8 @@ public void dynamicLoad(File arc, boolean removeExisting) throws IOException, In
         // so existing plugins can't be depending on this newly deployed one.
 
         plugins.add(p);
-        activePlugins.add(p);
+        if (p.isActive())
+            activePlugins.add(p);
         synchronized (((UberClassLoader) uberClassLoader).loaded) {
             ((UberClassLoader) uberClassLoader).loaded.clear();
         }

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -1298,7 +1298,7 @@ public HttpResponse doInstallPlugins(StaplerRequest req) throws IOException {
      *                    the plugin will only take effect after the reboot.
      *                    See {@link UpdateCenter#isRestartRequiredForCompletion()}
      * @return The install job list.
-     * @since FIXME
+     * @since 2.0
      */
     @Restricted(NoExternalUse.class)
     public List<Future<UpdateCenter.UpdateCenterJob>> install(@Nonnull Collection<String> plugins, boolean dynamicLoad) {

File: core/src/main/java/hudson/model/DescriptorVisibilityFilter.java
Patch:
@@ -35,7 +35,7 @@ public abstract class DescriptorVisibilityFilter implements ExtensionPoint {
      * @return true to allow the descriptor to be visible. false to hide it.
      * If any of the installed {@link DescriptorVisibilityFilter} returns false,
      * the descriptor is not shown.
-     * @since FIXME
+     * @since 2.12
      */
     public boolean filterType(@Nonnull Class<?> contextClass, @Nonnull Descriptor descriptor) {
         return true;

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -1468,7 +1468,7 @@ private static boolean canDiscoverItem(@Nonnull final String fullName) {
      * Provides the XStream instance this class is using for serialization.
      *
      * @return the XStream instance
-     * @since FIXME
+     * @since 1.655
      */
     @Nonnull
     public static XStream2 getXStream() {

File: core/src/main/java/jenkins/AgentProtocol.java
Patch:
@@ -37,7 +37,7 @@ public abstract class AgentProtocol implements ExtensionPoint {
      * adding new protocols and retiring old ones.
      *
      * @return {@code true} if the protocol requires explicit opt-in.
-     * @since FIXME
+     * @since 2.16
      * @see Jenkins#setAgentProtocols(Set)
      */
     public boolean isOptIn() {
@@ -48,7 +48,7 @@ public boolean isOptIn() {
      * to be always enabled.
      *
      * @return {@code true} if the protocol can never be disabled.
-     * @since FIXME
+     * @since 2.16
      */
     public boolean isRequired() {
         return false;
@@ -68,7 +68,7 @@ public boolean isRequired() {
      * Returns the human readable protocol display name.
      *
      * @return the human readable protocol display name.
-     * @since FIXME
+     * @since 2.16
      */
     public String getDisplayName() {
         return getName();

File: core/src/main/java/jenkins/util/SystemProperties.java
Patch:
@@ -212,7 +212,7 @@ public static boolean getBoolean(String name, boolean def) {
      *
      * @param name the system property name.
      * @return {@link Boolean#TRUE}, {@link Boolean#FALSE} or {@code null}
-     * @since FIXME
+     * @since 2.16
      */
     @CheckForNull
     public static Boolean optBoolean(String name) {

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -418,7 +418,7 @@ public VersionNumber getSplitWhen() {
             new DetachedPlugin("antisamy-markup-formatter", "1.553.*", "1.0"),
             new DetachedPlugin("matrix-project", "1.561.*", "1.0"),
             new DetachedPlugin("junit", "1.577.*", "1.0"),
-            new DetachedPlugin("bouncycastle-api", "2.16.*", "2.16.0-20160725.164257-1") // TODO remove -SNAPSHOT
+            new DetachedPlugin("bouncycastle-api", "2.16.*", "2.16.0")
     ));
 
     /** Implicit dependencies that are known to be unnecessary and which must be cut out to prevent a dependency cycle among bundled plugins. */

File: core/src/main/java/hudson/TcpSlaveAgentListener.java
Patch:
@@ -117,7 +117,7 @@ public int getAdvertisedPort() {
     @Nullable
     public String getIdentityPublicKey() {
         InstanceIdentityProvider<RSAPublicKey, RSAPrivateKey> provider =
-                InstanceIdentityProvider.get(RSAPrivateKey.class);
+                InstanceIdentityProvider.get(InstanceIdentityProvider.RSA);
         RSAPublicKey key = provider == null ? null : provider.getPublicKey();
         return key == null ? null : new String(Base64.encodeBase64(key.getEncoded()), Charset.forName("UTF-8"));
     }

File: core/src/main/java/hudson/model/BuildTimelineWidget.java
Patch:
@@ -62,8 +62,8 @@ public TimelineEventList doData(StaplerRequest req, @QueryParameter long min, @Q
         TimelineEventList result = new TimelineEventList();
         for (Run r : builds.byTimestamp(min,max)) {
             Event e = new Event();
-            e.start = r.getTime();
-            e.end   = new Date(r.timestamp+r.getDuration());
+            e.start = new Date(r.getStartTimeInMillis());
+            e.end   = new Date(r.getStartTimeInMillis()+r.getDuration());
             e.title = r.getFullDisplayName();
             // what to put in the description?
             // e.description = "Longish description of event "+r.getFullDisplayName();

File: core/src/main/java/hudson/model/RunMap.java
Patch:
@@ -185,7 +185,7 @@ public R put(R r) {
         // Defense against JENKINS-23152 and its ilk.
         File rootDir = r.getRootDir();
         if (rootDir.isDirectory()) {
-            throw new IllegalStateException(rootDir + " already existed; will not overwrite with " + r);
+            throw new IllegalStateException("JENKINS-23152: " + rootDir + " already existed; will not overwrite with " + r);
         }
         if (!r.getClass().getName().equals("hudson.matrix.MatrixRun")) { // JENKINS-26739: grandfathered in
             proposeNewNumber(r.getNumber());

File: test/src/test/java/hudson/cli/HelpCommandTest.java
Patch:
@@ -100,9 +100,9 @@ private void assertContainsOverviewOfMethodCommand(String text) {
     }
 
     private void assertContainsUsageOfMethodCommand(String text) {
-        assertThat(text, containsString("offline-node NAME [-m VAL]"));
+        assertThat(text, containsString("offline-node NAME ... [-m VAL]"));
         assertThat(text, containsStrings("NAME", "Agent name, or empty string for master"));
-        assertThat(text, containsStrings("-m VAL", "Record the note about why you are disconnecting this node"));
+        assertThat(text, containsStrings("-m VAL", "Record the reason about why you are disconnecting this node"));
     }
 
     private static Matcher<String> containsStrings(String... strings) {

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -465,7 +465,7 @@ protected void reactOnCycle(PluginWrapper q, List<PluginWrapper> cycle)
                                             if(p.isActive())
                                                 activePlugins.add(p);
                                         }
-                                    } catch (CycleDetectedException e) {
+                                    } catch (CycleDetectedException e) { // TODO this should be impossible, since we override reactOnCycle to not throw the exception
                                         stop(); // disable all plugins since classloading from them can lead to StackOverflow
                                         throw e;    // let Hudson fail
                                     }

File: core/src/main/java/jenkins/security/UserDetailsCache.java
Patch:
@@ -50,7 +50,6 @@
  * @since TODO
  */
 @Extension
-@Restricted(NoExternalUse.class) //TODO Keep for LTS, Remove when in weekly
 public final class UserDetailsCache {
 
     private static final String SYS_PROP_NAME = UserDetailsCache.class.getName() + ".EXPIRE_AFTER_WRITE_SEC";

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -154,6 +154,7 @@
 
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
+import hudson.model.PasswordParameterDefinition;
 import hudson.util.RunList;
 import java.util.concurrent.atomic.AtomicLong;
 import javax.annotation.CheckForNull;
@@ -1779,7 +1780,7 @@ public String getPasswordValue(Object o) {
             }
             return ((Secret) o).getEncryptedValue();
         }
-        if (getIsUnitTest()) {
+        if (getIsUnitTest() && !o.equals(PasswordParameterDefinition.DEFAULT_VALUE)) {
             throw new SecurityException("attempted to render plaintext ‘" + o + "’ in password field; use a getter of type Secret instead");
         }
         return o.toString();

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -816,7 +816,7 @@ public Object getDynamic(String token, StaplerRequest req,
             StaplerResponse rsp) {
         try {
             // try to interpret the token as build number
-            return getBuildByNumber(Integer.valueOf(token));
+            return getBuildByNumber(Integer.parseInt(token));
         } catch (NumberFormatException e) {
             // try to map that to widgets
             for (Widget w : getWidgets()) {

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol3.java
Patch:
@@ -1,5 +1,6 @@
 package jenkins.slaves;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.AbortException;
 import hudson.Extension;
 import hudson.Util;
@@ -124,6 +125,8 @@ protected String getNodeSecret(String nodeName) throws Failure {
      * an escape hatch for those who hit any issues and those who are trying this out.
      */
     @Restricted(NoExternalUse.class)
+    @SuppressFBWarnings(value = "MS_SHOULD_BE_REFACTORED_TO_BE_FINAL",
+            justification = "Part of the administrative API for System Groovy scripts.")
     public static boolean ENABLED;
 
     static {

File: core/src/main/java/hudson/tools/ToolDescriptor.java
Patch:
@@ -59,6 +59,7 @@ public abstract class ToolDescriptor<T extends ToolInstallation> extends Descrip
      * @return read-only list of installations;
      *      can be empty but never null.
      */
+    @SuppressWarnings("unchecked")
     public T[] getInstallations() {
         if (installations != null)
             return installations.clone();

File: core/src/main/java/hudson/views/ListViewColumn.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import net.sf.json.JSONObject;
 
 /**
  * Extension point for adding a column to a table rendering of {@link Item}s, such as {@link ListView}.
@@ -125,14 +126,14 @@ public static List<ListViewColumn> createDefaultInitialColumnList() {
         // OK, set up default list of columns:
         // create all instances
         ArrayList<ListViewColumn> r = new ArrayList<ListViewColumn>();
-
+        final JSONObject emptyJSON = new JSONObject();
         for (Descriptor<ListViewColumn> d : ListViewColumn.all())
             try {
                 if (d instanceof ListViewColumnDescriptor) {
                     ListViewColumnDescriptor ld = (ListViewColumnDescriptor) d;
                     if (!ld.shownByDefault())       continue;   // skip this
                 }
-                ListViewColumn lvc = d.newInstance(null, null);
+                ListViewColumn lvc = d.newInstance(null, emptyJSON);
                 if (!lvc.shownByDefault())      continue; // skip this
 
                 r.add(lvc);

File: core/src/main/java/hudson/Util.java
Patch:
@@ -25,6 +25,7 @@
 
 import jenkins.util.SystemProperties;
 import com.sun.jna.Native;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import hudson.Proc.LocalProc;
@@ -405,6 +406,8 @@ private static void tryOnceDeleteContentsRecursive(File directory) throws IOExce
      * @return false if it is ok to continue trying to delete things, true if
      *         we were interrupted (and should stop now).
      */
+    @SuppressFBWarnings(value = "DM_GC", justification = "Garbage collection happens only when "
+            + "GC_AFTER_FAILED_DELETE is true. It's an experimental feature in Jenkins.")
     private static boolean pauseBetweenDeletes(int numberOfAttemptsSoFar) {
         long delayInMs;
         if( numberOfAttemptsSoFar>=DELETION_MAX ) return false;

File: core/src/main/java/hudson/console/ModelHyperlinkNote.java
Patch:
@@ -8,6 +8,7 @@
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import javax.annotation.Nonnull;
 
 /**
  * {@link HyperlinkNote} that links to a {@linkplain ModelObject model object},
@@ -26,7 +27,7 @@ protected String extraAttributes() {
         return " class='model-link'";
     }
 
-    public static String encodeTo(User u) {
+    public static String encodeTo(@Nonnull User u) {
         return encodeTo(u,u.getDisplayName());
     }
 

File: core/src/main/java/hudson/model/RunMap.java
Patch:
@@ -185,7 +185,7 @@ public R put(R r) {
         // Defense against JENKINS-23152 and its ilk.
         File rootDir = r.getRootDir();
         if (rootDir.isDirectory()) {
-            throw new IllegalStateException(rootDir + " already existed; will not overwrite with " + r);
+            throw new IllegalStateException("JENKINS-23152: " + rootDir + " already existed; will not overwrite with " + r);
         }
         if (!r.getClass().getName().equals("hudson.matrix.MatrixRun")) { // JENKINS-26739: grandfathered in
             proposeNewNumber(r.getNumber());

File: test/src/test/java/hudson/tasks/MavenTest.java
Patch:
@@ -222,7 +222,9 @@ public void parametersReferencedFromPropertiesShouldRetainBackslashes() throws E
         final Entry envVar = new Entry("GLOBAL_PATH", "D:\\Jenkins");
 
         FreeStyleProject project = j.createFreeStyleProject();
-        project.getBuildersList().add(new Maven("--help",null,null,properties,null));
+        // This test implements legacy behavior, when Build Variables are injected by default
+        project.getBuildersList().add(new Maven("--help", null, null, properties, null,
+                false, null, null, true));
         project.addProperty(new ParametersDefinitionProperty(parameter));
         j.jenkins.getNodeProperties().replaceBy(Collections.singleton(
                 new EnvironmentVariablesNodeProperty(envVar)

File: core/src/test/java/hudson/slaves/DelegatingComputerLauncherTest.java
Patch:
@@ -65,7 +65,7 @@ public void testRecursionAvoidance() {
 
         assertTrue("DelegatingComputerLauncher should filter out other DelegatingComputerLauncher instances " +
                    "from its descriptor's getApplicableDescriptors() method",
-                new DummyTwo.DummyTwoDescriptor().getApplicableDescriptors().isEmpty());
+                new DummyTwo.DummyTwoDescriptor().applicableDescriptors(null, new DumbSlave.DescriptorImpl()).isEmpty());
     }
 
 }

File: core/src/main/java/jenkins/triggers/SCMTriggerItem.java
Patch:
@@ -121,7 +121,7 @@ private static final class Bridge implements SCMTriggerItem {
             }
             @Override public PollingResult poll(TaskListener listener) {
                 SCMDecisionHandler veto = SCMDecisionHandler.firstShouldPollVeto(asItem());
-                if (!veto.shouldPoll(asItem())) {
+                if (veto != null && !veto.shouldPoll(asItem())) {
                     listener.getLogger().println(Messages.SCMTriggerItem_PollingVetoed(veto));
                     return PollingResult.NO_CHANGES;
                 }

File: core/src/main/java/hudson/Proc.java
Patch:
@@ -237,6 +237,9 @@ private LocalProc( String name, ProcessBuilder procBuilder, InputStream in, Outp
             this.out = out;
             this.cookie = EnvVars.createCookie();
             procBuilder.environment().putAll(cookie);
+            if (procBuilder.directory() != null && !procBuilder.directory().exists()) {
+                throw new IOException(String.format("Process working directory '%s' doesn't exist!", procBuilder.directory().getAbsolutePath()));
+            }
             this.proc = procBuilder.start();
 
             InputStream procInputStream = proc.getInputStream();

File: core/src/test/java/hudson/slaves/DelegatingComputerLauncherTest.java
Patch:
@@ -65,7 +65,7 @@ public void testRecursionAvoidance() {
 
         assertTrue("DelegatingComputerLauncher should filter out other DelegatingComputerLauncher instances " +
                    "from its descriptor's getApplicableDescriptors() method",
-                new DummyTwo.DummyTwoDescriptor().getApplicableDescriptors().isEmpty());
+                new DummyTwo.DummyTwoDescriptor().applicableDescriptors(null, new DumbSlave.DescriptorImpl()).isEmpty());
     }
 
 }

File: core/src/main/java/jenkins/util/ResourceBundleUtil.java
Patch:
@@ -39,6 +39,7 @@
  * @author <a href="mailto:tom.fennelly@gmail.com">tom.fennelly@gmail.com</a>
  * @since 2.0
  */
+@Restricted(NoExternalUse.class)
 public class ResourceBundleUtil {
 
     private static final Map<String, JSONObject> bundles = new ConcurrentHashMap<>();
@@ -52,7 +53,6 @@ private ResourceBundleUtil() {
      * @return The bundle JSON.
      * @throws MissingResourceException Missing resource bundle.
      */
-    @Restricted(NoExternalUse.class)
     public static @Nonnull JSONObject getBundle(@Nonnull String baseName) throws MissingResourceException {
         return getBundle(baseName, Locale.getDefault());
     }
@@ -64,7 +64,6 @@ private ResourceBundleUtil() {
      * @return The bundle JSON.
      * @throws MissingResourceException Missing resource bundle.
      */
-    @Restricted(NoExternalUse.class)
     public static @Nonnull JSONObject getBundle(@Nonnull String baseName, @Nonnull Locale locale) throws MissingResourceException {
         String bundleKey = baseName + ":" + locale.toString();
         JSONObject bundleJSON = bundles.get(bundleKey);

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -953,6 +953,9 @@ private Object readResolve() {
     @Nonnull
     @Restricted(NoExternalUse.class)
     public InstallState getInstallState() {
+        if (installState == null || installState.name() == null) {
+            return InstallState.UNKNOWN;
+        }
         return installState;
     }
 

File: core/src/main/java/hudson/scm/AutoBrowserHolder.java
Patch:
@@ -37,7 +37,9 @@
  *
  * <p>
  * This class makes such tracking easy by hiding this logic.
+ * @deprecated Disabled by default: JENKINS-35098
  */
+@Deprecated
 final class AutoBrowserHolder {
     private int cacheGeneration;
     private RepositoryBrowser cache;

File: core/src/main/java/jenkins/util/ResourceBundleUtil.java
Patch:
@@ -39,6 +39,7 @@
  * @author <a href="mailto:tom.fennelly@gmail.com">tom.fennelly@gmail.com</a>
  * @since 2.0
  */
+@Restricted(NoExternalUse.class)
 public class ResourceBundleUtil {
 
     private static final Map<String, JSONObject> bundles = new ConcurrentHashMap<>();
@@ -52,7 +53,6 @@ private ResourceBundleUtil() {
      * @return The bundle JSON.
      * @throws MissingResourceException Missing resource bundle.
      */
-    @Restricted(NoExternalUse.class)
     public static @Nonnull JSONObject getBundle(@Nonnull String baseName) throws MissingResourceException {
         return getBundle(baseName, Locale.getDefault());
     }
@@ -64,7 +64,6 @@ private ResourceBundleUtil() {
      * @return The bundle JSON.
      * @throws MissingResourceException Missing resource bundle.
      */
-    @Restricted(NoExternalUse.class)
     public static @Nonnull JSONObject getBundle(@Nonnull String baseName, @Nonnull Locale locale) throws MissingResourceException {
         String bundleKey = baseName + ":" + locale.toString();
         JSONObject bundleJSON = bundles.get(bundleKey);

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -953,6 +953,9 @@ private Object readResolve() {
     @Nonnull
     @Restricted(NoExternalUse.class)
     public InstallState getInstallState() {
+        if (installState == null || installState.name() == null) {
+            return InstallState.UNKNOWN;
+        }
         return installState;
     }
 

File: core/src/main/java/hudson/slaves/DelegatingComputerLauncher.java
Patch:
@@ -74,7 +74,7 @@ public static abstract class DescriptorImpl extends Descriptor<ComputerLauncher>
         public List<Descriptor<ComputerLauncher>> getApplicableDescriptors() {
             List<Descriptor<ComputerLauncher>> r = new ArrayList<Descriptor<ComputerLauncher>>();
             for (Descriptor<ComputerLauncher> d : Functions.getComputerLauncherDescriptors()) {
-                if (DelegatingComputerLauncher.class.isInstance(d))  continue;
+                if (DelegatingComputerLauncher.class.isAssignableFrom(d.getKlass().toJavaClass()))  continue;
                 r.add(d);
             }
             return r;

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -534,6 +534,7 @@ public boolean hasLicensesXml() {
             PluginWrapper dependency = parent.getPlugin(d.shortName);
             if (dependency == null || !dependency.isActive()) {
                 missingDependencies.add(d.toString());
+            }
         }
         if (!missingDependencies.isEmpty())
             throw new IOException("Dependency "+Util.join(missingDependencies, ", ")+" doesn't exist");

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2394,7 +2394,7 @@ public String getEntryUrl(Run entry) {
         public String getEntryID(Run entry) {
             return "tag:" + "hudson.dev.java.net,"
                 + entry.getTimestamp().get(Calendar.YEAR) + ":"
-                + entry.getParent().getName()+':'+entry.getId();
+                + entry.getParent().getFullName()+':'+entry.getId();
         }
 
         public String getEntryDescription(Run entry) {

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -435,7 +435,7 @@ public String getDownloadUrl() {
      * Is this the legacy default update center site?
      */
     public boolean isLegacyDefault() {
-        return id.equals(UpdateCenter.ID_DEFAULT) && url.startsWith("http://hudson-ci.org/") || url.startsWith("http://updates.hudson-labs.org/");
+        return id.equals(UpdateCenter.PREDEFINED_UPDATE_SITE_ID) && url.startsWith("http://hudson-ci.org/") || url.startsWith("http://updates.hudson-labs.org/");
     }
 
     /**

File: core/src/main/java/hudson/model/DownloadService.java
Patch:
@@ -403,7 +403,7 @@ public FormValidation updateNow() throws IOException {
                     jsonString = loadJSONHTML(new URL(site + ".html?id=" + URLEncoder.encode(getId(), "UTF-8") + "&version=" + URLEncoder.encode(Jenkins.VERSION, "UTF-8")));
                     toolInstallerMetadataExists = true;
                 } catch (Exception e) {
-                    LOGGER.log(Level.WARNING, "Could not load json from " + site, e );
+                    LOGGER.log(Level.FINE, "Could not load json from " + site, e );
                     continue;
                 }
                 JSONObject o = JSONObject.fromObject(jsonString);

File: core/src/main/java/hudson/ProxyConfiguration.java
Patch:
@@ -50,6 +50,7 @@
 import javax.annotation.CheckForNull;
 import jenkins.model.Jenkins;
 import jenkins.util.JenkinsJVM;
+import jenkins.util.SystemProperties;
 import org.apache.commons.httpclient.Credentials;
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.UsernamePasswordCredentials;
@@ -79,7 +80,7 @@ public final class ProxyConfiguration extends AbstractDescribableImpl<ProxyConfi
      * Holds a default TCP connect timeout set on all connections returned from this class,
      * note this is value is in milliseconds, it's passed directly to {@link URLConnection#setConnectTimeout(int)}
      */
-    private static final int DEFAULT_CONNECT_TIMEOUT_MILLIS = Integer.getInteger("hudson.ProxyConfiguration.DEFAULT_CONNECT_TIMEOUT_MILLIS", 20 * 1000);
+    private static final int DEFAULT_CONNECT_TIMEOUT_MILLIS = SystemProperties.getInteger("hudson.ProxyConfiguration.DEFAULT_CONNECT_TIMEOUT_MILLIS", 20 * 1000);
     
     public final String name;
     public final int port;

File: core/src/main/java/hudson/Util.java
Patch:
@@ -1654,7 +1654,7 @@ public static Properties loadProperties(@Nonnull String properties) throws IOExc
      * give up, thus improving build reliability.
      */
     @Restricted(value = NoExternalUse.class)
-    static int DELETION_MAX = Math.max(1, Integer.getInteger(Util.class.getName() + ".maxFileDeletionRetries", 3).intValue());
+    static int DELETION_MAX = Math.max(1, SystemProperties.getInteger(Util.class.getName() + ".maxFileDeletionRetries", 3).intValue());
 
     /**
      * The time (in milliseconds) that we will wait between attempts to
@@ -1666,7 +1666,7 @@ public static Properties loadProperties(@Nonnull String properties) throws IOExc
      * between attempts.
      */
     @Restricted(value = NoExternalUse.class)
-    static int WAIT_BETWEEN_DELETION_RETRIES = Integer.getInteger(Util.class.getName() + ".deletionRetryWait", 100).intValue();
+    static int WAIT_BETWEEN_DELETION_RETRIES = SystemProperties.getInteger(Util.class.getName() + ".deletionRetryWait", 100).intValue();
 
     /**
      * If this flag is set to true then we will request a garbage collection
@@ -1690,5 +1690,5 @@ public static Properties loadProperties(@Nonnull String properties) throws IOExc
      * unless you can tolerate the performance impact.
      */
     @Restricted(value = NoExternalUse.class)
-    static boolean GC_AFTER_FAILED_DELETE = Boolean.getBoolean(Util.class.getName() + ".performGCOnFailedDelete");
+    static boolean GC_AFTER_FAILED_DELETE = SystemProperties.getBoolean(Util.class.getName() + ".performGCOnFailedDelete");
 }

File: core/src/main/java/hudson/model/DownloadService.java
Patch:
@@ -489,7 +489,7 @@ public static Downloadable get(String id) {
 
         private static final Logger LOGGER = Logger.getLogger(Downloadable.class.getName());
         private static final long DEFAULT_INTERVAL =
-                Long.getLong(Downloadable.class.getName()+".defaultInterval", DAYS.toMillis(1));
+                SystemProperties.getLong(Downloadable.class.getName()+".defaultInterval", DAYS.toMillis(1));
     }
 
     public static boolean neverUpdate = SystemProperties.getBoolean(DownloadService.class.getName()+".never");

File: core/src/main/java/hudson/model/ParametersAction.java
Patch:
@@ -306,7 +306,7 @@ private List<? extends ParameterValue> filter(List<ParameterValue> parameters) {
             return parameters;
         }
 
-        if (Boolean.getBoolean(KEEP_UNDEFINED_PARAMETERS_SYSTEM_PROPERTY_NAME)) {
+        if (SystemProperties.getBoolean(KEEP_UNDEFINED_PARAMETERS_SYSTEM_PROPERTY_NAME)) {
             return parameters;
         }
 

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -151,7 +151,7 @@ public class UpdateCenter extends AbstractModelObject implements Saveable, OnMas
     /**
      * Read timeout when downloading plugins, defaults to 1 minute
      */
-    private static final int PLUGIN_DOWNLOAD_READ_TIMEOUT = Integer.getInteger(UpdateCenter.class.getName()+".pluginDownloadReadTimeoutSeconds", 60) * 1000;
+    private static final int PLUGIN_DOWNLOAD_READ_TIMEOUT = SystemProperties.getInteger(UpdateCenter.class.getName()+".pluginDownloadReadTimeoutSeconds", 60) * 1000;
 
     /**
      * {@linkplain UpdateSite#getId() ID} of the default update site.

File: core/src/main/java/hudson/slaves/CloudSlaveRetentionStrategy.java
Patch:
@@ -9,6 +9,7 @@
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import jenkins.util.SystemProperties;
 
 /**
  * Default convenience implementation of {@link RetentionStrategy} for agents provisioned from {@link Cloud}.
@@ -71,7 +72,7 @@ protected long getIdleMaxTime() {
     }
 
     // for debugging, it's convenient to be able to reduce this time
-    public static long TIMEOUT = Long.getLong(CloudSlaveRetentionStrategy.class.getName()+".timeout", TimeUnit2.MINUTES.toMillis(10));
+    public static long TIMEOUT = SystemProperties.getLong(CloudSlaveRetentionStrategy.class.getName()+".timeout", TimeUnit2.MINUTES.toMillis(10));
 
     private static final Logger LOGGER = Logger.getLogger(CloudSlaveRetentionStrategy.class.getName());
 }

File: core/src/main/java/hudson/slaves/ConnectionActivityMonitor.java
Patch:
@@ -90,14 +90,14 @@ public long getRecurrencePeriod() {
     /**
      * Time till initial ping
      */
-    private static final long TIME_TILL_PING = Long.getLong(ConnectionActivityMonitor.class.getName()+".timeToPing",TimeUnit2.MINUTES.toMillis(3));
+    private static final long TIME_TILL_PING = SystemProperties.getLong(ConnectionActivityMonitor.class.getName()+".timeToPing",TimeUnit2.MINUTES.toMillis(3));
 
-    private static final long FREQUENCY = Long.getLong(ConnectionActivityMonitor.class.getName()+".frequency",TimeUnit2.SECONDS.toMillis(10));
+    private static final long FREQUENCY = SystemProperties.getLong(ConnectionActivityMonitor.class.getName()+".frequency",TimeUnit2.SECONDS.toMillis(10));
 
     /**
      * When do we abandon the effort and cut off?
      */
-    private static final long TIMEOUT = Long.getLong(ConnectionActivityMonitor.class.getName()+".timeToPing",TimeUnit2.MINUTES.toMillis(4));
+    private static final long TIMEOUT = SystemProperties.getLong(ConnectionActivityMonitor.class.getName()+".timeToPing",TimeUnit2.MINUTES.toMillis(4));
 
 
     // disabled by default until proven in the production

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -80,6 +80,7 @@
 
 import static java.util.logging.Level.*;
 import jenkins.model.RunAction2;
+import jenkins.util.SystemProperties;
 
 
 /**
@@ -664,5 +665,5 @@ public int hashCode() {
     /**
      * How long is too long for a polling activity to be in the queue?
      */
-    public static long STARVATION_THRESHOLD =Long.getLong(SCMTrigger.class.getName()+".starvationThreshold", TimeUnit2.HOURS.toMillis(1));
+    public static long STARVATION_THRESHOLD = SystemProperties.getLong(SCMTrigger.class.getName()+".starvationThreshold", TimeUnit2.HOURS.toMillis(1));
 }

File: core/src/main/java/jenkins/install/InstallUtil.java
Patch:
@@ -166,7 +166,7 @@ private static InstallState getDefaultInstallState() {
                 return InstallState.TEST;
             }
             
-            if (Boolean.getBoolean("hudson.Main.development")) {
+            if (SystemProperties.getBoolean("hudson.Main.development")) {
                 return InstallState.DEVELOPMENT;
             }
         }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -597,7 +597,7 @@ protected void onModified() throws IOException {
      * TCP agent port.
      * 0 for random, -1 to disable.
      */
-    private int slaveAgentPort = Integer.getInteger(Jenkins.class.getName()+".slaveAgentPort",0);
+    private int slaveAgentPort = SystemProperties.getInteger(Jenkins.class.getName()+".slaveAgentPort",0);
 
     /**
      * Whitespace-separated labels assigned to the master as a {@link Node}.
@@ -762,7 +762,7 @@ public static Jenkins getInstanceOrNull() {
     public static Jenkins getInstance() {
         Jenkins instance = HOLDER.getInstance();
         if (instance == null) {
-            if(Boolean.getBoolean(Jenkins.class.getName()+".enableExceptionOnNullInstance")) {
+            if(SystemProperties.getBoolean(Jenkins.class.getName()+".enableExceptionOnNullInstance")) {
                 // TODO: remove that second block around 2.20 (that is: ~20 versions to battle test it)
                 // See https://github.com/jenkinsci/jenkins/pull/2297#issuecomment-216710150
                 throw new IllegalStateException("Jenkins has not been started, or was already shut down");

File: core/src/main/java/jenkins/util/ProgressiveRendering.java
Patch:
@@ -77,7 +77,7 @@ public abstract class ProgressiveRendering {
 
     private static final Logger LOG = Logger.getLogger(ProgressiveRendering.class.getName());
     /** May be set to a number of milliseconds to sleep in {@link #canceled}, useful for watching what are normally fast computations. */
-    private static final Long DEBUG_SLEEP = Long.getLong("jenkins.util.ProgressiveRendering.DEBUG_SLEEP");
+    private static final Long DEBUG_SLEEP = SystemProperties.getLong("jenkins.util.ProgressiveRendering.DEBUG_SLEEP");
     private static final int CANCELED = -1;
     private static final int ERROR = -2;
 

File: test/src/test/java/jenkins/install/SetupWizardTest.java
Patch:
@@ -65,8 +65,8 @@ public class SetupWizardTest {
     
     @Before 
     public void initSetupWizard() throws IOException, InterruptedException {
-        final SetupWizard wizard = new SetupWizard(j.jenkins);
-        j.jenkins.setSetupWizard(wizard);
+        final SetupWizard wizard = j.jenkins.getSetupWizard();
+        wizard.init(true);
         
         // Retrieve admin credentials
         final FilePath adminPassFile = wizard.getInitialAdminPasswordFile();

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -435,7 +435,7 @@ public String getDownloadUrl() {
      * Is this the legacy default update center site?
      */
     public boolean isLegacyDefault() {
-        return id.equals(UpdateCenter.ID_DEFAULT) && url.startsWith("http://hudson-ci.org/") || url.startsWith("http://updates.hudson-labs.org/");
+        return id.equals(UpdateCenter.PREDEFINED_UPDATE_SITE_ID) && url.startsWith("http://hudson-ci.org/") || url.startsWith("http://updates.hudson-labs.org/");
     }
 
     /**

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -160,6 +160,8 @@ public class UpdateCenter extends AbstractModelObject implements Saveable, OnMas
      */
     public static final String ID_DEFAULT = SystemProperties.getString(UpdateCenter.class.getName()+".defaultUpdateSiteId", "default");
 
+    public static final String LEGACY_ID_DEFAULT = "default";
+
     @Restricted(NoExternalUse.class)
     public static final String ID_UPLOAD = "_upload";
 
@@ -845,7 +847,7 @@ public synchronized void save() {
      * Loads the data from the disk into this object.
      */
     public synchronized void load() throws IOException {
-        UpdateSite defaultSite = new UpdateSite(ID_DEFAULT, config.getUpdateCenterUrl() + "update-center.json");
+        UpdateSite defaultSite = new UpdateSite(LEGACY_ID_DEFAULT, config.getUpdateCenterUrl() + "update-center.json");
         XmlFile file = getConfigFile();
         if(file.exists()) {
             try {

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -760,7 +760,7 @@ public static Jenkins getInstanceOrNull() {
     public static Jenkins getInstance() {
         Jenkins instance = HOLDER.getInstance();
         if (instance == null) {
-            if(!Boolean.getBoolean(Jenkins.class.getName()+".disableExceptionOnNullInstance")) {
+            if(Boolean.getBoolean(Jenkins.class.getName()+".enableExceptionOnNullInstance")) {
                 // TODO: remove that second block around 2.20 (that is: ~20 versions to battle test it)
                 // See https://github.com/jenkinsci/jenkins/pull/2297#issuecomment-216710150
                 throw new IllegalStateException("Jenkins has not been started, or was already shut down");

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -760,7 +760,7 @@ public static Jenkins getInstanceOrNull() {
     public static Jenkins getInstance() {
         Jenkins instance = HOLDER.getInstance();
         if (instance == null) {
-            if(!Boolean.getBoolean(Jenkins.class.getName()+".disableExceptionOnNullInstance")) {
+            if(Boolean.getBoolean(Jenkins.class.getName()+".enableExceptionOnNullInstance")) {
                 // TODO: remove that second block around 2.20 (that is: ~20 versions to battle test it)
                 // See https://github.com/jenkinsci/jenkins/pull/2297#issuecomment-216710150
                 throw new IllegalStateException("Jenkins has not been started, or was already shut down");

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -121,8 +121,6 @@ public Locale get() {
 
             installLogger();
 
-            SystemProperties.initialize( event.getServletContext() );
-
             final FileAndDescription describedHomeDir = getHomeDir(event);
             home = describedHomeDir.file.getAbsoluteFile();
             home.mkdirs();

File: test/src/test/java/jenkins/util/SystemPropertiesTest.java
Patch:
@@ -24,6 +24,7 @@
 package jenkins.util;
 
 import javax.servlet.ServletContext;
+import javax.servlet.ServletContextEvent;
 import net.sourceforge.htmlunit.corejs.javascript.RhinoSecurityManager;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.assertThat;
@@ -43,7 +44,7 @@ public class SystemPropertiesTest {
     
     @Before
     public void setUp() {
-        SystemProperties.initialize(j.jenkins.servletContext);
+        new SystemProperties().contextInitialized(new ServletContextEvent(j.jenkins.servletContext));
     }
     
     @Test

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -865,7 +865,7 @@ protected Jenkins(File root, ServletContext context, PluginManager pluginManager
             }
 
             if (pluginManager==null)
-                pluginManager = new LocalPluginManager(this);
+                pluginManager = PluginManager.createDefault(this);
             this.pluginManager = pluginManager;
             // JSON binding needs to be able to see all the classes from all the plugins
             WebApp.get(servletContext).setClassLoader(pluginManager.uberClassLoader);

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -558,9 +558,10 @@ protected static void addDependencies(URL hpiResUrl, String fromPath, Set<URL> d
                 }
 
                 if (dependencyURL != null) {
-                    dependencySet.add(dependencyURL);
                     // And transitive deps...
                     addDependencies(dependencyURL, fromPath, dependencySet);
+                    // And then add the current plugin 
+                    dependencySet.add(dependencyURL);
                 }
             }
         }

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -489,9 +489,9 @@ public Filter createFilter(FilterConfig filterConfig) {
     public static final SecurityRealm NO_AUTHENTICATION = new None();
 
     /**
-     * Perform a calculation where we should go back after sucessfull login
+     * Perform a calculation where we should go back after successful login
      *
-     * @return Encoded URI where we should go back after sucessfull login
+     * @return Encoded URI where we should go back after successful login
      *         or "/" if no way back or an issue occurred
      *
      * @since TODO

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2391,7 +2391,7 @@ public String getEntryUrl(Run entry) {
         public String getEntryID(Run entry) {
             return "tag:" + "hudson.dev.java.net,"
                 + entry.getTimestamp().get(Calendar.YEAR) + ":"
-                + entry.getParent().getName()+':'+entry.getId();
+                + entry.getParent().getFullName()+':'+entry.getId();
         }
 
         public String getEntryDescription(Run entry) {

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -369,6 +369,7 @@ public EnvVars getCharacteristicEnvVars() {
         env.put("JENKINS_SERVER_COOKIE",SERVER_COOKIE.get());
         env.put("HUDSON_SERVER_COOKIE",SERVER_COOKIE.get()); // Legacy compatibility
         env.put("JOB_NAME",getFullName());
+        env.put("JOB_BASE_NAME", getName());
         return env;
     }
 

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -515,8 +515,8 @@ public static String getFrom() {
         if (from == null
                 && request != null
                 && request.getRequestURI() != null
-                && request.getRequestURI().equals("/loginError")
-                && request.getRequestURI().equals("/login")) {
+                && !request.getRequestURI().equals("/loginError")
+                && !request.getRequestURI().equals("/login")) {
 
                 from = request.getRequestURI();
         }

File: core/src/main/java/hudson/AbortException.java
Patch:
@@ -32,7 +32,7 @@
  *
  * @author Kohsuke Kawaguchi
 */
-public final class AbortException extends IOException {
+public class AbortException extends IOException {
     public AbortException() {
     }
 

File: core/src/main/java/hudson/AboutJenkins.java
Patch:
@@ -2,6 +2,8 @@
 
 import hudson.model.ManagementLink;
 import java.net.URL;
+
+import org.jenkinsci.Symbol;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
@@ -10,7 +12,7 @@
  * 
  * @author Kohsuke Kawaguchi
  */
-@Extension
+@Extension @Symbol("about")
 public class AboutJenkins extends ManagementLink {
     @Override
     public String getIconFileName() {

File: core/src/main/java/hudson/ExtensionList.java
Patch:
@@ -390,14 +390,14 @@ public static <T> ExtensionList<T> create(Jenkins jenkins, Class<T> type) {
     /**
      * Gets the extension list for a given type.
      * Normally calls {@link Jenkins#getExtensionList(Class)} but falls back to an empty list
-     * in case {@link Jenkins#getInstance} is null.
+     * in case {@link Jenkins#getInstanceOrNull()} is null.
      * Thus it is useful to call from {@code all()} methods which need to behave gracefully during startup or shutdown.
      * @param type the extension point type
      * @return some list
      * @since 1.572
      */
     public static @Nonnull <T> ExtensionList<T> lookup(Class<T> type) {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         return j == null ? create((Jenkins) null, type) : j.getExtensionList(type);
     }
 

File: core/src/main/java/hudson/FileSystemProvisionerDescriptor.java
Patch:
@@ -38,9 +38,9 @@ public abstract class FileSystemProvisionerDescriptor extends Descriptor<FileSys
      * Called to clean up a workspace that may potentially belong to this {@link FileSystemProvisioner}.
      *
      * <p>
-     * Because users may modify the file system behind Hudson, and slaves may come and go when
+     * Because users may modify the file system behind Hudson, and agents may come and go when
      * configuration changes happen, in general case Hudson is unable to keep track of which jobs
-     * have workspaces in which slaves.
+     * have workspaces in which agents.
      *
      * <p>
      * So instead we rey on a garbage collection mechanism, to look at workspaces left in the file system

File: core/src/main/java/hudson/Launcher.java
Patch:
@@ -297,7 +297,7 @@ public InputStream stdin() {
          *
          * <p>
          * In adition to what the current process
-         * is inherited (if this is going to be launched from a slave agent, that
+         * is inherited (if this is going to be launched from a agent agent, that
          * becomes the "current" process), these variables will be also set.
          */
         public ProcStarter envs(Map<String, String> overrides) {
@@ -611,7 +611,7 @@ public Proc launch(String[] cmd, boolean[] mask, String[] env, InputStream in, O
      *      from the current process
      * @param envVars
      *      Environment variable overrides. In addition to what the current process
-     *      is inherited (if this is going to be launched from a slave agent, that
+     *      is inherited (if this is going to be launched from an agent, that
      *      becomes the "current" process), these variables will be also set.
      */
     public abstract Channel launchChannel(String[] cmd, OutputStream out, FilePath workDir, Map<String,String> envVars) throws IOException, InterruptedException;

File: core/src/main/java/hudson/cli/CliProtocol.java
Patch:
@@ -8,6 +8,7 @@
 import jenkins.AgentProtocol;
 import jenkins.model.Jenkins;
 import jenkins.slaves.NioChannelSelector;
+import org.jenkinsci.Symbol;
 import org.jenkinsci.remoting.nio.NioChannelHub;
 
 import javax.inject.Inject;
@@ -25,7 +26,7 @@
  * @author Kohsuke Kawaguchi
  * @since 1.467
  */
-@Extension
+@Extension @Symbol("cli")
 public class CliProtocol extends AgentProtocol {
     @Inject
     NioChannelSelector nio;
@@ -77,7 +78,7 @@ protected void runCli(Connection c) throws IOException, InterruptedException {
             Channel channel = cb
                     .withMode(Mode.BINARY)
                     .withRestricted(true)
-                    .withBaseLoader(Jenkins.getInstance().pluginManager.uberClassLoader)
+                    .withBaseLoader(Jenkins.getActiveInstance().pluginManager.uberClassLoader)
                     .build(new BufferedInputStream(c.in), new BufferedOutputStream(c.out));
 
             channel.setProperty(CliEntryPoint.class.getName(),new CliManagerImpl(channel));

File: core/src/main/java/hudson/cli/GroovyCommand.java
Patch:
@@ -63,7 +63,7 @@ public String getShortDescription() {
 
     protected int run() throws Exception {
         // this allows the caller to manipulate the JVM state, so require the execute script privilege.
-        Jenkins.getInstance().checkPermission(Jenkins.RUN_SCRIPTS);
+        Jenkins.getActiveInstance().checkPermission(Jenkins.RUN_SCRIPTS);
 
         Binding binding = new Binding();
         binding.setProperty("out",new PrintWriter(stdout,true));
@@ -73,7 +73,7 @@ protected int run() throws Exception {
         binding.setProperty("channel",channel);
         String j = getClientEnvironmentVariable("JOB_NAME");
         if (j!=null) {
-            Item job = Jenkins.getInstance().getItemByFullName(j);
+            Item job = Jenkins.getActiveInstance().getItemByFullName(j);
             binding.setProperty("currentJob", job);
             String b = getClientEnvironmentVariable("BUILD_NUMBER");
             if (b!=null && job instanceof AbstractProject) {
@@ -82,7 +82,7 @@ protected int run() throws Exception {
             }
         }
 
-        GroovyShell groovy = new GroovyShell(Jenkins.getInstance().getPluginManager().uberClassLoader, binding);
+        GroovyShell groovy = new GroovyShell(Jenkins.getActiveInstance().getPluginManager().uberClassLoader, binding);
         groovy.run(loadScript(),"RemoteClass",remaining.toArray(new String[remaining.size()]));
         return 0;
     }

File: core/src/main/java/hudson/cli/ListJobsCommand.java
Patch:
@@ -50,7 +50,7 @@ public String getShortDescription() {
     public String name;
 
     protected int run() throws Exception {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getActiveInstance();
         final Collection<TopLevelItem> jobs;
 
         // If name is given retrieve jobs for the given view.
@@ -70,8 +70,7 @@ protected int run() throws Exception {
                 }
                 // No view and no item group with the given name found.
                 else {
-                    stderr.println("No view or item group with the given name found");
-                    return -1;
+                    throw new IllegalArgumentException("No view or item group with the given name '" + name + "' found.");
                 }
             }
         }

File: core/src/main/java/hudson/cli/ListPluginsCommand.java
Patch:
@@ -47,7 +47,7 @@ public String getShortDescription() {
     public String name;
 
     protected int run() {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getActiveInstance();
         PluginManager pluginManager = h.getPluginManager();
 
         if (this.name != null) {
@@ -57,7 +57,7 @@ protected int run() {
                 printPlugin(plugin, plugin.getShortName().length(), plugin.getDisplayName().length());
             }
             else {
-                stderr.println(String.format("No plugin with the name '%s' found", this.name));
+                throw new IllegalArgumentException("No plugin with the name '" + name + "' found");
             }
         }
         else {

File: core/src/main/java/hudson/cli/RemoveJobFromViewCommand.java
Patch:
@@ -55,9 +55,8 @@ public String getShortDescription() {
     protected int run() throws Exception {
         view.checkPermission(View.CONFIGURE);
 
-        if (!(view instanceof DirectlyModifiableView)) throw new CmdLineException(
-                null, "'" + view.getDisplayName() + "' view can not be modified directly"
-        );
+        if (!(view instanceof DirectlyModifiableView))
+            throw new IllegalStateException("'" + view.getDisplayName() + "' view can not be modified directly");
 
         for (TopLevelItem job: jobs) {
             ((DirectlyModifiableView) view).remove(job);

File: core/src/main/java/hudson/cli/SetBuildDescriptionCommand.java
Patch:
@@ -28,6 +28,9 @@ public String getShortDescription() {
 
     protected int run() throws Exception {
     	Run run = job.getBuildByNumber(number);
+        if (run == null)
+            throw new IllegalArgumentException("No such build #"+number);
+
         run.checkPermission(Run.UPDATE);
 
         if ("=".equals(description)) {

File: core/src/main/java/hudson/cli/SetBuildDisplayNameCommand.java
Patch:
@@ -30,8 +30,7 @@ public String getShortDescription() {
     protected int run() throws Exception {
         Run<?, ?> run = job.getBuildByNumber(number);
         if (run == null) {
-            stderr.format("Build #%d does not exist\n", number);
-            return -1;
+            throw new IllegalArgumentException("Build #" + number + " does not exist");
         }
         run.checkPermission(Run.UPDATE);
 

File: core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java
Patch:
@@ -73,9 +73,9 @@ protected GenericItemOptionHandler(CmdLineParser parser, OptionDef option, Sette
             });
             T nearest = Items.findNearest(type(), src, j);
             if (nearest != null) {
-                throw new CmdLineException(owner, "No such job '" + src + "'; perhaps you meant '" + nearest.getFullName() + "'?");
+                throw new IllegalArgumentException("No such job '" + src + "'; perhaps you meant '" + nearest.getFullName() + "'?");
             } else {
-                throw new CmdLineException(owner, "No such job '" + src + "'");
+                throw new IllegalArgumentException("No such job '" + src + "'");
             }
         }
         setter.addValue(s);

File: core/src/main/java/hudson/cli/handlers/NodeOptionHandler.java
Patch:
@@ -54,7 +54,7 @@ public int parseArguments(Parameters params) throws CmdLineException {
         String nodeName = params.getParameter(0);
 
         final Node node = Jenkins.getInstance().getNode(nodeName);
-        if (node == null) throw new CmdLineException(owner, "No such node '" + nodeName + "'");
+        if (node == null) throw new IllegalArgumentException("No such node '" + nodeName + "'");
 
         setter.addValue(node);
         return 1;

File: core/src/main/java/hudson/console/ConsoleLogFilter.java
Patch:
@@ -88,10 +88,10 @@ public OutputStream decorateLogger(Run build, OutputStream logger) throws IOExce
     }
 
     /**
-     * Called to decorate logger for master/slave communication.
+     * Called to decorate logger for master/agent communication.
      *
      * @param computer
-     *      Slave computer for which the logger is getting decorated. Useful to do
+     *      Agent computer for which the logger is getting decorated. Useful to do
      *      contextual decoration.
      * @since 1.632
      */

File: core/src/main/java/hudson/console/HudsonExceptionNote.java
Patch:
@@ -25,6 +25,7 @@
 
 import hudson.Extension;
 import hudson.MarkupText;
+import org.jenkinsci.Symbol;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -95,7 +96,7 @@ private String annotateClassName(String className) {
         return "http://stacktrace.jenkins-ci.org/search?query="+className;
     }
 
-    @Extension
+    @Extension @Symbol("stackTrace")
     public static final class DescriptorImpl extends ConsoleAnnotationDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/console/HyperlinkNote.java
Patch:
@@ -26,6 +26,7 @@
 import hudson.Extension;
 import hudson.MarkupText;
 import jenkins.model.Jenkins;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.Stapler;
 import org.kohsuke.stapler.StaplerRequest;
 
@@ -83,7 +84,7 @@ public static String encodeTo(String url, String text) {
         }
     }
 
-    @Extension
+    @Extension @Symbol("hyperlink")
     public static class DescriptorImpl extends ConsoleAnnotationDescriptor {
         public String getDisplayName() {
             return "Hyperlinks";

File: core/src/main/java/hudson/console/ModelHyperlinkNote.java
Patch:
@@ -3,6 +3,7 @@
 import hudson.Extension;
 import hudson.model.*;
 import jenkins.model.Jenkins;
+import org.jenkinsci.Symbol;
 
 import java.io.IOException;
 import java.util.logging.Level;
@@ -64,7 +65,7 @@ public static String encodeTo(String url, String text) {
         }
     }
 
-    @Extension
+    @Extension @Symbol("hyperlinkToModels")
     public static class DescriptorImpl extends HyperlinkNote.DescriptorImpl {
         public String getDisplayName() {
             return "Hyperlinks to models";

File: core/src/main/java/hudson/console/UrlAnnotator.java
Patch:
@@ -3,6 +3,7 @@
 import hudson.Extension;
 import hudson.MarkupText;
 import hudson.MarkupText.SubText;
+import org.jenkinsci.Symbol;
 
 import java.util.regex.Pattern;
 
@@ -11,7 +12,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension
+@Extension @Symbol("url")
 public class UrlAnnotator extends ConsoleAnnotatorFactory<Object> {
     @Override
     public ConsoleAnnotator newInstance(Object context) {

File: core/src/main/java/hudson/diagnosis/HudsonHomeDiskUsageChecker.java
Patch:
@@ -26,6 +26,7 @@
 import hudson.Extension;
 import jenkins.model.Jenkins;
 import hudson.model.PeriodicWork;
+import org.jenkinsci.Symbol;
 
 import java.util.logging.Logger;
 
@@ -35,7 +36,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension
+@Extension @Symbol("diskUsageCheck")
 public class HudsonHomeDiskUsageChecker extends PeriodicWork {
     public long getRecurrencePeriod() {
         return HOUR;

File: core/src/main/java/hudson/diagnosis/HudsonHomeDiskUsageMonitor.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.Extension;
 import hudson.ExtensionPoint;
 import hudson.ExtensionList;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.HttpResponse;
 import org.kohsuke.stapler.HttpResponses;
 import org.kohsuke.stapler.QueryParameter;
@@ -40,7 +41,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension
+@Extension @Symbol("diskUsageCheck")
 public final class HudsonHomeDiskUsageMonitor extends AdministrativeMonitor {
     /**
      * Value updated by {@link HudsonHomeDiskUsageChecker}.

File: core/src/main/java/hudson/diagnosis/MemoryUsageMonitor.java
Patch:
@@ -39,14 +39,15 @@
 import java.util.ArrayList;
 import java.io.IOException;
 
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.QueryParameter;
 
 /**
  * Monitors the memory usage of the system in OS specific way.
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension
+@Extension @Symbol("memoryUsage")
 public final class MemoryUsageMonitor extends PeriodicWork {
     /**
      * A memory group is conceptually a set of memory pools. 

File: core/src/main/java/hudson/diagnosis/ReverseProxySetupMonitor.java
Patch:
@@ -26,6 +26,7 @@
 import hudson.Extension;
 import hudson.Util;
 import hudson.model.AdministrativeMonitor;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.HttpRedirect;
 import org.kohsuke.stapler.HttpResponse;
 import org.kohsuke.stapler.HttpResponses;
@@ -48,7 +49,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension
+@Extension @Symbol("reverseProxy")
 public class ReverseProxySetupMonitor extends AdministrativeMonitor {
 
     private static final Logger LOGGER = Logger.getLogger(ReverseProxySetupMonitor.class.getName());
@@ -62,7 +63,6 @@ public boolean isActivated() {
     public HttpResponse doTest() {
         String referer = Stapler.getCurrentRequest().getReferer();
         Jenkins j = Jenkins.getInstance();
-        assert j != null;
         // May need to send an absolute URL, since handling of HttpRedirect with a relative URL does not currently honor X-Forwarded-Proto/Port at all.
         String redirect = j.getRootUrl() + "administrativeMonitor/" + id + "/testForReverseProxySetup/" + (referer != null ? Util.rawEncode(referer) : "NO-REFERER") + "/";
         LOGGER.log(Level.FINE, "coming from {0} and redirecting to {1}", new Object[] {referer, redirect});
@@ -71,7 +71,6 @@ public HttpResponse doTest() {
 
     public void getTestForReverseProxySetup(String rest) {
         Jenkins j = Jenkins.getInstance();
-        assert j != null;
         String inferred = j.getRootUrlFromRequest() + "manage";
         // TODO this could also verify that j.getRootUrl() has been properly configured, and send a different message if not
         if (rest.startsWith(inferred)) { // not using equals due to JENKINS-24014

File: core/src/main/java/hudson/diagnosis/TooManyJobsButNoView.java
Patch:
@@ -26,6 +26,7 @@
 import hudson.model.AdministrativeMonitor;
 import jenkins.model.Jenkins;
 import hudson.Extension;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
@@ -39,7 +40,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension
+@Extension @Symbol("tooManyJobsButNoView")
 public class TooManyJobsButNoView extends AdministrativeMonitor {
     public boolean isActivated() {
         Jenkins h = Jenkins.getInstance();

File: core/src/main/java/hudson/init/Terminator.java
Patch:
@@ -11,6 +11,8 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
+ * Like {@link Initializer} but used during the shut down.
+ *
  * @author Kohsuke Kawaguchi
  */
 @Indexed

File: core/src/main/java/hudson/init/impl/GroovyInitScript.java
Patch:
@@ -38,6 +38,6 @@
 public class GroovyInitScript {
     @Initializer(after=JOB_LOADED)
     public static void init(Jenkins j) {
-        new GroovyHookScript("init").run();
+        new GroovyHookScript("init", j.servletContext, j.getRootDir(), j.getPluginManager().uberClassLoader).run();
     }
 }

File: core/src/main/java/hudson/lifecycle/SolarisSMFLifecycle.java
Patch:
@@ -38,7 +38,7 @@ public class SolarisSMFLifecycle extends Lifecycle {
      */
     @Override
     public void restart() throws IOException, InterruptedException {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull(); // guard against repeated concurrent calls to restart
         if (h != null)
             h.cleanUp();
         System.exit(0);

File: core/src/main/java/hudson/lifecycle/UnixLifecycle.java
Patch:
@@ -65,7 +65,7 @@ public UnixLifecycle() throws IOException {
 
     @Override
     public void restart() throws IOException, InterruptedException {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull(); // guard against repeated concurrent calls to restart
         if (h != null)
             h.cleanUp();
 

File: core/src/main/java/hudson/logging/LogRecorder.java
Patch:
@@ -208,7 +208,7 @@ public void disable() {
     }
 
     private static final class SetLevel extends MasterToSlaveCallable<Void,Error> {
-        /** known loggers (kept per slave), to avoid GC */
+        /** known loggers (kept per agent), to avoid GC */
         @SuppressWarnings("MismatchedQueryAndUpdateOfCollection") private static final Set<Logger> loggers = new HashSet<Logger>();
         private final String name;
         private final Level level;
@@ -363,7 +363,7 @@ public List<LogRecord> getLogRecords() {
     }
 
     /**
-     * Gets a view of log records per slave matching this recorder.
+     * Gets a view of log records per agent matching this recorder.
      * @return a map (sorted by display name) from computer to (nonempty) list of log records
      * @since 1.519
      */

File: core/src/main/java/hudson/model/AllView.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.model;
 
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.Stapler;
 import org.kohsuke.stapler.StaplerRequest;
@@ -88,7 +89,7 @@ protected void submit(StaplerRequest req) throws IOException, ServletException,
         // noop
     }
 
-    @Extension
+    @Extension @Symbol("all")
     public static final class DescriptorImpl extends ViewDescriptor {
         @Override
         public boolean isInstantiable() {

File: core/src/main/java/hudson/model/ChoiceParameterDefinition.java
Patch:
@@ -1,6 +1,7 @@
 package hudson.model;
 
 import hudson.util.FormValidation;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.QueryParameter;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.DataBoundConstructor;
@@ -91,7 +92,7 @@ public StringParameterValue createValue(String value) {
         return checkValue(new StringParameterValue(getName(), value, getDescription()));
     }
 
-    @Extension
+    @Extension @Symbol({"choice","choiceParam"})
     public static class DescriptorImpl extends ParameterDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java
Patch:
@@ -160,7 +160,7 @@ private void serveFile(StaplerRequest req, StaplerResponse rsp, VirtualFile root
         String pattern = req.getParameter("pattern");
         if(pattern==null)
             pattern = req.getParameter("path"); // compatibility with Hudson<1.129
-        if(pattern!=null && !Util.isAbsoluteUri(pattern)) {// avoid open redirect
+        if(pattern!=null && Util.isSafeToRedirectTo(pattern)) {// avoid open redirect
             rsp.sendRedirect2(pattern);
             return;
         }

File: core/src/main/java/hudson/model/FingerprintCleanupThread.java
Patch:
@@ -26,6 +26,7 @@
 import hudson.Extension;
 import hudson.ExtensionList;
 import jenkins.model.Jenkins;
+import org.jenkinsci.Symbol;
 
 import java.io.File;
 import java.io.FileFilter;
@@ -42,7 +43,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension
+@Extension @Symbol("fingerprintCleanup")
 public final class FingerprintCleanupThread extends AsyncPeriodicWork {
 
     public FingerprintCleanupThread() {

File: core/src/main/java/hudson/model/JDK.java
Patch:
@@ -44,6 +44,7 @@
 import java.util.Collections;
 
 import jenkins.model.Jenkins;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
@@ -166,7 +167,7 @@ public static boolean isDefaultJDKValid(Node n) {
         }
     }
 
-    @Extension
+    @Extension @Symbol("jdk")
     public static class DescriptorImpl extends ToolDescriptor<JDK> {
 
         public String getDisplayName() {

File: core/src/main/java/hudson/model/Label.java
Patch:
@@ -237,8 +237,8 @@ public Set<Cloud> getClouds() {
      * <p>
      * The answer is yes if there is a reasonable basis to believe that Hudson can have
      * an executor under this label, given the current configuration. This includes
-     * situations such as (1) there are offline slaves that have this label (2) clouds exist
-     * that can provision slaves that have this label.
+     * situations such as (1) there are offline agents that have this label (2) clouds exist
+     * that can provision agents that have this label.
      */
     public boolean isAssignable() {
         for (Node n : getNodes())

File: core/src/main/java/hudson/model/ManageJenkinsAction.java
Patch:
@@ -25,17 +25,18 @@
 
 import hudson.Extension;
 import jenkins.model.Jenkins;
+import org.jenkinsci.Symbol;
 
 /**
  * Adds the "Manage Jenkins" link to the top page.
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension(ordinal=100)
+@Extension(ordinal=100) @Symbol("manageJenkins")
 public class ManageJenkinsAction implements RootAction {
     public String getIconFileName() {
         if (Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER))
-            return "setting.png";
+            return "gear2.png";
         else
             return null;
     }

File: core/src/main/java/hudson/model/MyView.java
Patch:
@@ -32,6 +32,7 @@
 import javax.servlet.ServletException;
 
 import jenkins.model.Jenkins;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 import org.kohsuke.stapler.DataBoundConstructor;
@@ -93,7 +94,7 @@ protected void submit(StaplerRequest req) throws IOException, ServletException,
         // noop
     }
 
-    @Extension
+    @Extension @Symbol("myView")
     public static final class DescriptorImpl extends ViewDescriptor {
         /**
          * If the security is not enabled, there's no point in having

File: core/src/main/java/hudson/model/MyViewsProperty.java
Patch:
@@ -45,6 +45,7 @@
 import net.sf.json.JSONObject;
 
 import org.acegisecurity.AccessDeniedException;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.HttpRedirect;
 import org.kohsuke.stapler.HttpResponse;
@@ -201,7 +202,7 @@ public String getUrlName() {
         return "my-views";
     }
 
-    @Extension
+    @Extension @Symbol("myView")
     public static class DescriptorImpl extends UserPropertyDescriptor {
 
         @Override
@@ -242,7 +243,7 @@ public MyViewsTabBar getMyViewsTabBar() {
         return Jenkins.getInstance().getMyViewsTabBar();
     }
     
-    @Extension
+    @Extension @Symbol("myView")
     public static class GlobalAction implements RootAction {
 
 		public String getDisplayName() {

File: core/src/main/java/hudson/model/OverallLoadStatistics.java
Patch:
@@ -32,7 +32,7 @@
 import org.kohsuke.stapler.export.Exported;
 
 /**
- * {@link LoadStatistics} for the entire system (the master and all the slaves combined),
+ * {@link LoadStatistics} for the entire system (the master and all the agents combined),
  * and all the jobs that are running on it.
  *
  * @author Kohsuke Kawaguchi

File: core/src/main/java/hudson/model/PaneStatusProperties.java
Patch:
@@ -8,6 +8,7 @@
 
 import javax.servlet.http.HttpSession;
 
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.Stapler;
 
 public class PaneStatusProperties extends UserProperty implements Saveable {
@@ -43,7 +44,7 @@ private Object readResolve() {
 		return this;
 	}
 	
-	@Extension
+	@Extension @Symbol("paneStatus")
 	public static class DescriptorImpl extends UserPropertyDescriptor {
 
 		@Override

File: core/src/main/java/hudson/model/ParametersDefinitionProperty.java
Patch:
@@ -163,7 +163,7 @@ public void _doBuild(StaplerRequest req, StaplerResponse rsp, @QueryParameter Ti
                 getJob(), delay.getTime(), new ParametersAction(values), new CauseAction(new Cause.UserIdCause()));
         if (item!=null) {
             String url = formData.optString("redirectTo");
-            if (url==null || Util.isAbsoluteUri(url))   // avoid open redirect
+            if (url==null || !Util.isSafeToRedirectTo(url))   // avoid open redirect
                 url = req.getContextPath()+'/'+item.getUrl();
             rsp.sendRedirect(formData.optInt("statusCode",SC_CREATED), url);
         } else

File: core/src/main/java/hudson/model/PasswordParameterDefinition.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.model;
 
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.DataBoundConstructor;
 import hudson.Extension;
@@ -88,7 +89,7 @@ public void setDefaultValue(String defaultValue) {
         this.defaultValue = Secret.fromString(defaultValue);
     }
 
-    @Extension
+    @Extension @Symbol({"password","nonStoredPasswordParam"})
     public final static class ParameterDescriptorImpl extends ParameterDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/model/ProxyView.java
Patch:
@@ -32,6 +32,7 @@
 import javax.servlet.ServletException;
 
 import jenkins.model.Jenkins;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.QueryParameter;
 import org.kohsuke.stapler.Stapler;
@@ -120,7 +121,7 @@ public FormValidation doViewExistsCheck(@QueryParameter String value) {
             return FormValidation.error(Messages.ProxyView_NoSuchViewExists(value));
     }
 
-    @Extension
+    @Extension @Symbol("proxy")
     public static class DescriptorImpl extends ViewDescriptor {
 
         @Override

File: core/src/main/java/hudson/model/Result.java
Patch:
@@ -161,7 +161,7 @@ public boolean isCompleteBuild() {
         return l;
     }
 
-    // Maintain each Result as a singleton deserialized (like build result from a slave node)
+    // Maintain each Result as a singleton deserialized (like build result from an agent node)
     private Object readResolve() {
         for (Result r : all)
             if (ordinal==r.ordinal)

File: core/src/main/java/hudson/model/RunParameterDefinition.java
Patch:
@@ -26,6 +26,7 @@
 import jenkins.model.Jenkins;
 import net.sf.json.JSONObject;
 
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.export.Exported;
@@ -133,7 +134,7 @@ public RunList getBuilds() {
         }
     }
 
-    @Extension
+    @Extension @Symbol({"run","runParam"})
     public static class DescriptorImpl extends ParameterDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/model/StringParameterDefinition.java
Patch:
@@ -25,6 +25,7 @@
 
 import hudson.Extension;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.StaplerRequest;
 
@@ -69,7 +70,7 @@ public StringParameterValue getDefaultParameterValue() {
         return v;
     }
 
-    @Extension
+    @Extension @Symbol({"string","stringParam"})
     public static class DescriptorImpl extends ParameterDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/model/TaskListener.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * Receives events that happen during some lengthy operation
  * that has some chance of failures, such as a build, SCM change polling,
- * slave launch, and so on.
+ * agent launch, and so on.
  *
  * <p>
  * This interface is implemented by Hudson core and passed to extension points so that

File: core/src/main/java/hudson/model/TextParameterDefinition.java
Patch:
@@ -25,6 +25,7 @@
 
 import hudson.Extension;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.StaplerRequest;
 
@@ -37,7 +38,7 @@ public TextParameterDefinition(String name, String defaultValue, String descript
         super(name, defaultValue, description);
     }
 
-    @Extension
+    @Extension @Symbol({"text","textParam"})
     public static class DescriptorImpl extends ParameterDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/model/TextParameterValue.java
Patch:
@@ -26,7 +26,7 @@
 import org.kohsuke.stapler.DataBoundConstructor;
 
 /**
- * @author Rafa de la Torre <rtorre@tuenti.com>
+ * @author <a href="mailto:rtorre@tuenti.com">Rafa de la Torre</a>
  */
 public class TextParameterValue extends StringParameterValue {
 

File: core/src/main/java/hudson/model/WorkspaceBrowser.java
Patch:
@@ -33,8 +33,8 @@
 /**
  * Allows to access a workspace as an alternative to online build node.
  * <p>
- * Primary use case is {@link hudson.slaves.Cloud} implementations that don't keep the slave
- * node online to browse workspace, but maintain a copy of node workspace on master.
+ * Primary use case is {@link hudson.slaves.Cloud} implementations that don't keep the agent
+ * online to browse workspace, but maintain a copy of node workspace on master.
  *
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  * @since 1.502

File: core/src/main/java/hudson/model/listeners/RunListener.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.Extension;
 import hudson.ExtensionList;
 import hudson.FilePath;
+import hudson.Functions;
 import hudson.Launcher;
 import hudson.model.AbstractBuild;
 import hudson.model.BuildListener;
@@ -223,7 +224,7 @@ public static void fireStarted(Run r, TaskListener listener) {
      * Fires the {@link #onFinalized(Run)} event.
      */
     public static void fireFinalized(Run r) {
-        if (Jenkins.getInstance() == null) {
+        if (Jenkins.getInstanceOrNull() == null) { // TODO use !Functions.isExtensionsAvailable() once JENKINS-33377
             return;
         }
         for (RunListener l : all()) {

File: core/src/main/java/hudson/model/queue/WorkUnit.java
Patch:
@@ -71,6 +71,9 @@ public final class WorkUnit {
 
     public void setExecutor(@CheckForNull Executor e) {
         executor = e;
+        if (e != null) {
+            context.future.addExecutor(e);
+        }
     }
 
     /**

File: core/src/main/java/hudson/node_monitors/AbstractAsyncNodeMonitorDescriptor.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Sophisticated version of {@link AbstractNodeMonitorDescriptor} that
- * performs monitoring on all slaves concurrently and asynchronously.
+ * performs monitoring on all agents concurrently and asynchronously.
  *
  * @param <T>
  *     represents the the result of the monitoring.

File: core/src/main/java/hudson/node_monitors/ArchitectureMonitor.java
Patch:
@@ -28,17 +28,18 @@
 import hudson.Extension;
 import jenkins.security.MasterToSlaveCallable;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
 import java.io.IOException;
 
 /**
- * Discovers the architecture of the system to display in the slave list page.
+ * Discovers the architecture of the system to display in the agent list page.
  *
  * @author Kohsuke Kawaguchi
  */
 public class ArchitectureMonitor extends NodeMonitor {
-    @Extension
+    @Extension @Symbol("architecture")
     public static final class DescriptorImpl extends AbstractAsyncNodeMonitorDescriptor<String> {
         @Override
         protected Callable<String, IOException> createCallable(Computer c) {

File: core/src/main/java/hudson/node_monitors/NodeMonitor.java
Patch:
@@ -114,11 +114,11 @@ public static List<NodeMonitor> getAll() {
     }
 
     /**
-     * True if this monitoring shouldn't mark the slaves offline.
+     * True if this monitoring shouldn't mark the agents offline.
      *
      * <p>
      * Many {@link NodeMonitor}s implement a logic that if the value goes above/below
-     * a threshold, the slave will be marked offline as a preventive measure.
+     * a threshold, the agent will be marked offline as a preventive measure.
      * This flag controls that.
      *
      * <p>

File: core/src/main/java/hudson/node_monitors/NodeMonitorUpdater.java
Patch:
@@ -14,7 +14,7 @@
 import jenkins.util.Timer;
 
 /**
- * When a slave is connected, redo the node monitoring.
+ * When an agent is connected, redo the node monitoring.
  *
  * @author Kohsuke Kawaguchi
  */
@@ -34,7 +34,7 @@ public void run() {
 
     /**
      * Triggers the update with 5 seconds quiet period, to avoid triggering data check too often
-     * when multiple slaves become online at about the same time.
+     * when multiple agents become online at about the same time.
      */
     @Override
     public void onOnline(Computer c, TaskListener listener) throws IOException, InterruptedException {

File: core/src/main/java/hudson/node_monitors/ResponseTimeMonitor.java
Patch:
@@ -40,7 +40,7 @@
 import org.kohsuke.stapler.export.ExportedBean;
 
 /**
- * Monitors the round-trip response time to this slave.
+ * Monitors the round-trip response time to this agent.
  *
  * @author Kohsuke Kawaguchi
  */
@@ -64,9 +64,9 @@ protected Map<Computer, Data> monitor() throws InterruptedException {
                 }
 
                 if(d.hasTooManyTimeouts() && !isIgnored()) {
-                    // unlike other monitors whose failure still allow us to communicate with the slave,
+                    // unlike other monitors whose failure still allow us to communicate with the agent,
                     // the failure in this monitor indicates that we are just unable to make any requests
-                    // to this slave. So we should severe the connection, as opposed to marking it temporarily
+                    // to this agent. So we should severe the connection, as opposed to marking it temporarily
                     // off line, which still keeps the underlying channel open.
                     c.disconnect(d);
                     LOGGER.warning(Messages.ResponseTimeMonitor_MarkedOffline(c.getName()));

File: core/src/main/java/hudson/os/PosixAPI.java
Patch:
@@ -22,6 +22,7 @@ public class PosixAPI {
     /**
      * Load the JNR implementation of the POSIX APIs for the current platform.
      * Runtime exceptions will be of type {@link PosixException}.
+     * {@link IllegalStateException} will be thrown for methods not implemented on this platform.
      * @return some implementation (even on Windows or unsupported Unix)
      * @since 1.518
      */

File: core/src/main/java/hudson/os/solaris/ZFSInstaller.java
Patch:
@@ -272,9 +272,7 @@ public void run() {
                     JavaVMArguments args = JavaVMArguments.current();
                     args.setSystemProperty(ZFSInstaller.class.getName()+".migrate",datasetName);
                     Daemon.selfExec(args);
-                } catch (InterruptedException e) {
-                    LOGGER.log(Level.SEVERE, "Restart failed",e);
-                } catch (IOException e) {
+                } catch (InterruptedException | IOException e) {
                     LOGGER.log(Level.SEVERE, "Restart failed",e);
                 }
             }

File: core/src/main/java/hudson/os/solaris/ZFSProvisioner.java
Patch:
@@ -39,6 +39,7 @@
 import java.io.File;
 import java.io.Serializable;
 
+import org.jenkinsci.Symbol;
 import org.jvnet.solaris.libzfs.LibZFS;
 import org.jvnet.solaris.libzfs.ZFSFileSystem;
 
@@ -59,7 +60,7 @@ public String invoke(File f, VirtualChannel channel) throws IOException {
                 ZFSFileSystem fs = libzfs.getFileSystemByMountPoint(f);
                 if(fs!=null)    return fs.getName();
 
-                // TODO: for now, only support slaves that are already on ZFS.
+                // TODO: for now, only support agents that are already on ZFS.
                 throw new IOException("Not on ZFS");
             }
         });
@@ -111,7 +112,7 @@ public WorkspaceSnapshot snapshot(AbstractBuild<?, ?> build, FilePath ws, String
         throw new UnsupportedOperationException();
     }
 
-    @Extension
+    @Extension @Symbol("zfs")
     public static final class DescriptorImpl extends FileSystemProvisionerDescriptor {
         public boolean discard(FilePath ws, TaskListener listener) throws IOException, InterruptedException {
             // TODO

File: core/src/main/java/hudson/scm/NullSCM.java
Patch:
@@ -32,6 +32,7 @@
 import java.io.File;
 import java.io.IOException;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
 /**
@@ -58,7 +59,7 @@ public class NullSCM extends SCM {
         return NullChangeLogParser.INSTANCE;
     }
 
-    @Extension(ordinal = Integer.MAX_VALUE)
+    @Extension(ordinal = Integer.MAX_VALUE) @Symbol("none")
     public static class DescriptorImpl extends SCMDescriptor<NullSCM> {
         public DescriptorImpl() {
             super(null);

File: core/src/main/java/hudson/search/SearchResult.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.List;
 
 /**
- * @author <a hef="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
+ * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
 public interface SearchResult extends List<SuggestedItem> {
 

File: core/src/main/java/hudson/search/UserSearchProperty.java
Patch:
@@ -6,6 +6,7 @@
 import hudson.model.UserPropertyDescriptor;
 import net.sf.json.JSONObject;
 
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.export.Exported;
 
@@ -32,7 +33,7 @@ public static boolean isCaseInsensitive(){
     }
     
 
-    @Extension
+    @Extension @Symbol("search")
     public static final class DescriptorImpl extends UserPropertyDescriptor {
         public String getDisplayName() {
             return Messages.UserSearchProperty_DisplayName();

File: core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java
Patch:
@@ -53,7 +53,7 @@ protected String determineTargetUrl(HttpServletRequest request) {
         if (targetUrl == null)
             return getDefaultTargetUrl();
 
-        if (Util.isAbsoluteUri(targetUrl))
+        if (!Util.isSafeToRedirectTo(targetUrl))
             return "."; // avoid open redirect
 
         // URL returned from determineTargetUrl() is resolved against the context path,

File: core/src/main/java/hudson/security/AuthorizationStrategy.java
Patch:
@@ -39,6 +39,7 @@
 import net.sf.json.JSONObject;
 
 import org.acegisecurity.Authentication;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
 /**
@@ -231,7 +232,7 @@ public boolean hasPermission(Authentication a, Permission permission) {
             }
         };
 
-        @Extension
+        @Extension @Symbol("unsecured")
         public static final class DescriptorImpl extends Descriptor<AuthorizationStrategy> {
             @Override
             public String getDisplayName() {

File: core/src/main/java/hudson/security/BasicAuthenticationFilter.java
Patch:
@@ -133,7 +133,9 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
         }
 
         {// attempt to authenticate as API token
-            User u = User.get(username);
+            // create is true as the user may not have been saved and the default api token may be in use.
+            // validation of the user will be performed against the underlying realm in impersonate.
+            User u = User.getById(username, true);
             ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);
             if (t!=null && t.matchesPassword(password)) {
                 SecurityContextHolder.getContext().setAuthentication(u.impersonate());

File: core/src/main/java/hudson/security/GlobalSecurityConfiguration.java
Patch:
@@ -45,6 +45,7 @@
 import jenkins.util.ServerTcpPort;
 import net.sf.json.JSONObject;
 
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
@@ -55,7 +56,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension(ordinal = Integer.MAX_VALUE - 210)
+@Extension(ordinal = Integer.MAX_VALUE - 210) @Symbol("securityConfig")
 public class GlobalSecurityConfiguration extends ManagementLink implements Describable<GlobalSecurityConfiguration> {
     
     private static final Logger LOGGER = Logger.getLogger(GlobalSecurityConfiguration.class.getName());
@@ -167,7 +168,7 @@ public Descriptor<GlobalSecurityConfiguration> getDescriptor() {
         return Jenkins.getInstance().getDescriptorOrDie(getClass());
     }
     
-    @Extension
+    @Extension @Symbol("security")
     public static final class DescriptorImpl extends Descriptor<GlobalSecurityConfiguration> {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/security/HudsonFilter.java
Patch:
@@ -104,7 +104,7 @@ public void init(FilterConfig filterConfig) throws ServletException {
         // this is how we make us available to the rest of Hudson.
         filterConfig.getServletContext().setAttribute(HudsonFilter.class.getName(),this);
         try {
-            Jenkins hudson = Jenkins.getInstance();
+            Jenkins hudson = Jenkins.getInstanceOrNull();
             if (hudson != null) {
                 // looks like we are initialized after Hudson came into being. initialize it now. See #3069
                 LOGGER.fine("Security wasn't initialized; Initializing it...");

File: core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java
Patch:
@@ -93,7 +93,7 @@ public void loginSuccess(HttpServletRequest request, HttpServletResponse respons
 			return;
 		}
 
-		Jenkins j = Jenkins.getInstance();
+		Jenkins j = Jenkins.getInstanceOrNull();
 		if (j != null && j.isDisableRememberMe()) {
 			if (logger.isDebugEnabled()) {
 				logger.debug("Did not send remember-me cookie because 'Remember Me' is disabled in " +

File: core/src/main/java/hudson/security/WhoAmI.java
Patch:
@@ -12,6 +12,7 @@
 
 import org.acegisecurity.Authentication;
 import org.acegisecurity.GrantedAuthority;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.export.Exported;
 import org.kohsuke.stapler.export.ExportedBean;
 
@@ -21,7 +22,7 @@
  * @author Ryan Campbell
  *
  */
-@Extension
+@Extension @Symbol("whoAmI")
 @ExportedBean
 public class WhoAmI implements UnprotectedRootAction {
     

File: core/src/main/java/hudson/security/csrf/CrumbIssuerDescriptor.java
Patch:
@@ -64,7 +64,7 @@ public String getCrumbRequestField() {
      */
     public void setCrumbRequestField(String requestField) {
         if (Util.fixEmptyAndTrim(requestField) == null) {
-            crumbRequestField = ".crumb";
+            crumbRequestField = CrumbIssuer.DEFAULT_CRUMB_NAME;
         } else {
             crumbRequestField = requestField;
         }

File: core/src/main/java/hudson/security/csrf/GlobalCrumbIssuerConfiguration.java
Patch:
@@ -28,14 +28,15 @@
 import jenkins.model.GlobalConfigurationCategory;
 import jenkins.model.Jenkins;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
 /**
  * Show the crumb configuration to the system config page.
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension(ordinal=195) // immediately after the security setting
+@Extension(ordinal=195) @Symbol("crumb") // immediately after the security setting
 public class GlobalCrumbIssuerConfiguration extends GlobalConfiguration {
     @Override
     public GlobalConfigurationCategory getCategory() {

File: core/src/main/java/hudson/slaves/AbstractCloudComputer.java
Patch:
@@ -50,7 +50,7 @@ public T getNode() {
     }
 
     /**
-     * When the slave is deleted, free the node right away.
+     * When the agent is deleted, free the node right away.
      */
     @Override
     public HttpResponse doDoDelete() throws IOException {

File: core/src/main/java/hudson/slaves/AbstractCloudSlave.java
Patch:
@@ -55,7 +55,7 @@ public AbstractCloudSlave(String name, String nodeDescription, String remoteFS,
     public abstract AbstractCloudComputer createComputer();
 
     /**
-     * Releases and removes this slave.
+     * Releases and removes this agent.
      */
     public void terminate() throws InterruptedException, IOException {
         final Computer computer = toComputer();

File: core/src/main/java/hudson/slaves/ChannelPinger.java
Patch:
@@ -75,7 +75,7 @@ public void preOnline(Computer c, Channel channel, FilePath root, TaskListener l
 
     public void install(Channel channel) {
         if (pingInterval < 1) {
-            LOGGER.fine("Slave ping is disabled");
+            LOGGER.fine("Agent ping is disabled");
             return;
         }
 

File: core/src/main/java/hudson/slaves/CloudSlaveRetentionStrategy.java
Patch:
@@ -11,9 +11,9 @@
 import java.util.logging.Logger;
 
 /**
- * Default convenience implementation of {@link RetentionStrategy} for slaves provisioned from {@link Cloud}.
+ * Default convenience implementation of {@link RetentionStrategy} for agents provisioned from {@link Cloud}.
  *
- * If a slave is idle for 10 mins, this retention strategy will remove the slave. This can be used as-is for
+ * If an agent is idle for 10 mins, this retention strategy will remove the agent. This can be used as-is for
  * a {@link Node} provisioned by cloud to implement the auto-scaling semantics, it can be subtyped to tweak
  * the behavior, or it can be used as an example.
  * <p>TODO {@link CloudRetentionStrategy} seems to be a better implementation.
@@ -64,7 +64,7 @@ protected boolean isIdleForTooLong(T c) {
     }
 
     /**
-     * If the computer has been idle longer than this time, we'll kill the slave.
+     * If the computer has been idle longer than this time, we'll kill the agent.
      */
     protected long getIdleMaxTime() {
         return TIMEOUT;

File: core/src/main/java/hudson/slaves/CommandConnector.java
Patch:
@@ -26,6 +26,7 @@
 import hudson.EnvVars;
 import hudson.Extension;
 import hudson.model.TaskListener;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 import java.io.IOException;
@@ -48,7 +49,7 @@ public CommandLauncher launch(String host, TaskListener listener) throws IOExcep
         return new CommandLauncher(command,new EnvVars("SLAVE",host));
     }
 
-    @Extension
+    @Extension @Symbol("command")
     public static class DescriptorImpl extends ComputerConnectorDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/slaves/CommandLauncher.java
Patch:
@@ -42,6 +42,7 @@
 import java.util.logging.Logger;
 
 import org.apache.commons.lang.StringUtils;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.QueryParameter;
 
@@ -140,7 +141,7 @@ public void onClosed(Channel channel, IOException cause) {
                 }
             });
 
-            LOGGER.info("slave agent launched for " + computer.getDisplayName());
+            LOGGER.info("agent launched for " + computer.getDisplayName());
         } catch (InterruptedException e) {
             e.printStackTrace(listener.error(Messages.ComputerLauncher_abortedLaunch()));
         } catch (RuntimeException e) {
@@ -182,7 +183,7 @@ private static void reportProcessTerminated(Process proc, TaskListener listener)
 
     private static final Logger LOGGER = Logger.getLogger(CommandLauncher.class.getName());
 
-    @Extension
+    @Extension @Symbol("command")
     public static class DescriptorImpl extends Descriptor<ComputerLauncher> {
         public String getDisplayName() {
             return Messages.CommandLauncher_displayName();

File: core/src/main/java/hudson/slaves/ComputerRetentionWork.java
Patch:
@@ -32,14 +32,15 @@
 import hudson.model.Node;
 import hudson.model.PeriodicWork;
 import hudson.Extension;
+import org.jenkinsci.Symbol;
 
 /**
- * Periodically checks the slaves and try to reconnect dead slaves.
+ * Periodically checks the agents and try to reconnect dead agents.
  *
  * @author Kohsuke Kawaguchi
  * @author Stephen Connolly
  */
-@Extension
+@Extension @Symbol("computerRetention")
 public class ComputerRetentionWork extends PeriodicWork {
 
     /**

File: core/src/main/java/hudson/slaves/EnvironmentVariablesNodeProperty.java
Patch:
@@ -32,6 +32,7 @@
 import hudson.model.Environment;
 import hudson.model.Node;
 import hudson.model.TaskListener;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.Stapler;
 
@@ -47,7 +48,7 @@
 public class EnvironmentVariablesNodeProperty extends NodeProperty<Node> {
 
     /**
-     * Slave-specific environment variables
+     * Agent-specific environment variables
      */
     private final EnvVars envVars;
     
@@ -75,7 +76,7 @@ public void buildEnvVars(EnvVars env, TaskListener listener) throws IOException,
         env.putAll(envVars);
     }
 
-    @Extension
+    @Extension @Symbol("envVars")
     public static class DescriptorImpl extends NodePropertyDescriptor {
 
         @Override

File: core/src/main/java/hudson/slaves/NodeProperty.java
Patch:
@@ -160,7 +160,7 @@ public Environment setUp( AbstractBuild build, Launcher launcher, BuildListener
      * @param env
      *      Manipulate this variable (normally by adding more entries.)
      *      Note that this is an override, so it doesn't contain environment variables that are
-     *      currently set for the slave process itself.
+     *      currently set for the agent process itself.
      * @param listener
      *      Can be used to send messages.
      *

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -39,6 +39,7 @@
 import java.io.File;
 
 import org.apache.tools.ant.types.FileSet;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.AncestorInPath;
@@ -307,7 +308,7 @@ public BuildStepMonitor getRequiredMonitorService() {
     @Deprecated
     public static volatile DescriptorImpl DESCRIPTOR;
 
-    @Extension
+    @Extension @Symbol("archiveArtifacts")
     public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {
         public DescriptorImpl() {
             DESCRIPTOR = this; // backward compatibility

File: core/src/main/java/hudson/tasks/BatchFile.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.model.AbstractProject;
 import hudson.util.LineEndingConversion;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.StaplerRequest;
 import java.io.ObjectStreamException;
@@ -59,7 +60,7 @@ private Object readResolve() throws ObjectStreamException {
         return new BatchFile(command);
     }
 
-    @Extension
+    @Extension @Symbol("batchFile")
     public static final class DescriptorImpl extends BuildStepDescriptor<Builder> {
         @Override
         public String getHelpFile() {

File: core/src/main/java/hudson/tasks/Fingerprinter.java
Patch:
@@ -53,6 +53,7 @@
 import org.acegisecurity.AccessDeniedException;
 import org.apache.tools.ant.DirectoryScanner;
 import org.apache.tools.ant.types.FileSet;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.AncestorInPath;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.QueryParameter;
@@ -249,7 +250,7 @@ public List<Record> invoke(File baseDir, VirtualChannel channel) throws IOExcept
         }
     }
 
-    @Extension
+    @Extension @Symbol("fingerprint")
     public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {
         public String getDisplayName() {
             return Messages.Fingerprinter_DisplayName();

File: core/src/main/java/hudson/tasks/LogRotator.java
Patch:
@@ -29,6 +29,7 @@
 import hudson.model.Run;
 import jenkins.model.BuildDiscarder;
 import jenkins.model.BuildDiscarderDescriptor;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 import java.io.IOException;
@@ -252,7 +253,7 @@ private String toString(Integer i) {
         return String.valueOf(i);
     }
 
-    @Extension
+    @Extension @Symbol("logRotator")
     public static final class LRDescriptor extends BuildDiscarderDescriptor {
         public String getDisplayName() {
             return "Log Rotation";

File: core/src/main/java/hudson/tasks/Shell.java
Patch:
@@ -35,6 +35,7 @@
 import hudson.util.LineEndingConversion;
 import jenkins.security.MasterToSlaveCallable;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.QueryParameter;
@@ -102,7 +103,7 @@ private Object readResolve() throws ObjectStreamException {
         return new Shell(command);
     }
 
-    @Extension
+    @Extension @Symbol("shell")
     public static class DescriptorImpl extends BuildStepDescriptor<Builder> {
         /**
          * Shell executable, or null to default.

File: core/src/main/java/hudson/tasks/_maven/Maven3MojoNote.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.console.ConsoleAnnotationDescriptor;
 import hudson.console.ConsoleAnnotator;
 import hudson.console.ConsoleNote;
+import org.jenkinsci.Symbol;
 
 import java.util.regex.Pattern;
 
@@ -57,7 +58,7 @@ public ConsoleAnnotator annotate(Object context, MarkupText text, int charPos) {
         return null;
     }
 
-    @Extension
+    @Extension @Symbol("maven3Mojos")
     public static final class DescriptorImpl extends ConsoleAnnotationDescriptor {
         public String getDisplayName() {
             return "Maven 3 Mojos";

File: core/src/main/java/hudson/tasks/_maven/MavenErrorNote.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.console.ConsoleAnnotationDescriptor;
 import hudson.console.ConsoleAnnotator;
 import hudson.console.ConsoleNote;
+import org.jenkinsci.Symbol;
 
 import java.util.regex.Pattern;
 
@@ -44,7 +45,7 @@ public ConsoleAnnotator annotate(Object context, MarkupText text, int charPos) {
         return null;
     }
 
-    @Extension
+    @Extension @Symbol("mavenErrors")
     public static final class DescriptorImpl extends ConsoleAnnotationDescriptor {
         public String getDisplayName() {
             return "Maven Errors";

File: core/src/main/java/hudson/tasks/_maven/MavenMojoNote.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.console.ConsoleAnnotationDescriptor;
 import hudson.console.ConsoleAnnotator;
 import hudson.console.ConsoleNote;
+import org.jenkinsci.Symbol;
 
 import java.util.regex.Pattern;
 
@@ -49,7 +50,7 @@ public ConsoleAnnotator annotate(Object context, MarkupText text, int charPos) {
         return null;
     }
 
-    @Extension
+    @Extension @Symbol("mavenMojos")
     public static final class DescriptorImpl extends ConsoleAnnotationDescriptor {
         public String getDisplayName() {
             return "Maven Mojos";

File: core/src/main/java/hudson/tasks/_maven/MavenWarningNote.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.console.ConsoleAnnotationDescriptor;
 import hudson.console.ConsoleAnnotator;
 import hudson.console.ConsoleNote;
+import org.jenkinsci.Symbol;
 
 import java.util.regex.Pattern;
 
@@ -46,7 +47,7 @@ public ConsoleAnnotator annotate(Object context, MarkupText text, int charPos) {
         return null;
     }
 
-    @Extension
+    @Extension @Symbol("mavenWarnings")
     public static final class DescriptorImpl extends ConsoleAnnotationDescriptor {
         public String getDisplayName() {
             return "Maven Warnings";

File: core/src/main/java/hudson/tools/BatchCommandInstaller.java
Patch:
@@ -27,6 +27,7 @@
 import hudson.Extension;
 import hudson.FilePath;
 import hudson.util.LineEndingConversion;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 import java.io.ObjectStreamException;
 
@@ -57,7 +58,7 @@ private Object readResolve() throws ObjectStreamException {
         return new BatchCommandInstaller(getLabel(), getCommand(), getToolHome());
     }
  
-    @Extension
+    @Extension @Symbol("batchFile")
     public static class DescriptorImpl extends Descriptor<BatchCommandInstaller> {
 
         @Override

File: core/src/main/java/hudson/tools/CommandInstaller.java
Patch:
@@ -27,6 +27,7 @@
 import hudson.Extension;
 import hudson.FilePath;
 import hudson.util.LineEndingConversion;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 import java.io.ObjectStreamException;
 
@@ -56,7 +57,7 @@ private Object readResolve() throws ObjectStreamException {
         return new CommandInstaller(getLabel(), getCommand(), getToolHome());
     }
 
-    @Extension
+    @Extension @Symbol("command")
     public static class DescriptorImpl extends Descriptor<CommandInstaller> {
 
         @Override

File: core/src/main/java/hudson/tools/InstallSourceProperty.java
Patch:
@@ -27,6 +27,7 @@
 import hudson.util.DescribableList;
 import hudson.model.Descriptor;
 import hudson.model.Saveable;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 import java.util.List;
@@ -61,7 +62,7 @@ public Class<ToolInstallation> type() {
         return ToolInstallation.class;
     }
 
-    @Extension
+    @Extension @Symbol("installSource")
     public static class DescriptorImpl extends ToolPropertyDescriptor {
         public String getDisplayName() {
             return Messages.InstallSourceProperty_DescriptorImpl_displayName();

File: core/src/main/java/hudson/tools/ToolInstallation.java
Patch:
@@ -53,8 +53,8 @@
  * this class, but choosing this class as a base class has several benefits:
  *
  * <ul>
- * <li>Hudson allows admins to specify different locations for tools on some slaves.
- *     For example, JDK on the master might be on /usr/local/java but on a Windows slave
+ * <li>Hudson allows admins to specify different locations for tools on some agents.
+ *     For example, JDK on the master might be on /usr/local/java but on a Windows agent
  *     it could be at c:\Program Files\Java
  * <li>Hudson can verify the existence of tools and provide warnings and diagnostics for
  *     admins. (TBD)

File: core/src/main/java/hudson/tools/ToolLocationNodeProperty.java
Patch:
@@ -35,6 +35,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 import java.util.Arrays;
@@ -115,7 +116,7 @@ public static String getToolHome(Node node, ToolInstallation installation, TaskL
         return installation.getHome();
     }
 
-    @Extension
+    @Extension @Symbol("toolLocation")
     public static class DescriptorImpl extends NodePropertyDescriptor {
 
         public String getDisplayName() {

File: core/src/main/java/hudson/tools/ZipExtractionInstaller.java
Patch:
@@ -41,6 +41,8 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLConnection;
+
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.QueryParameter;
 
@@ -86,7 +88,7 @@ public FilePath performInstallation(ToolInstallation tool, Node node, TaskListen
         }
     }
 
-    @Extension
+    @Extension @Symbol("zip")
     public static class DescriptorImpl extends ToolInstallerDescriptor<ZipExtractionInstaller> {
 
         public String getDisplayName() {

File: core/src/main/java/hudson/triggers/SCMTrigger.java
Patch:
@@ -48,6 +48,7 @@
 import hudson.util.TimeUnit2;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.jelly.XMLOutput;
+import org.jenkinsci.Symbol;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.DoNotUse;
 import org.kohsuke.stapler.StaplerRequest;
@@ -176,7 +177,7 @@ public File getLogFile() {
         return new File(job.getRootDir(),"scm-polling.log");
     }
 
-    @Extension
+    @Extension @Symbol("scm")
     public static class DescriptorImpl extends TriggerDescriptor {
 
         private static ThreadFactory threadFactory() {

File: core/src/main/java/hudson/triggers/TimerTrigger.java
Patch:
@@ -38,6 +38,7 @@
 import java.util.Calendar;
 import java.util.Collection;
 
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.AncestorInPath;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.QueryParameter;
@@ -65,7 +66,7 @@ public void run() {
         job.scheduleBuild(0, new TimerTriggerCause());
     }
 
-    @Extension
+    @Extension @Symbol("cron")
     public static class DescriptorImpl extends TriggerDescriptor {
         public boolean isApplicable(Item item) {
             return item instanceof BuildableItem;

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -63,6 +63,7 @@
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import hudson.model.Items;
 import jenkins.model.ParameterizedJobMixIn;
+import org.jenkinsci.Symbol;
 
 /**
  * Triggers a {@link Build}.
@@ -197,7 +198,7 @@ protected Object readResolve() throws ObjectStreamException {
     /**
      * Runs every minute to check {@link TimerTrigger} and schedules build.
      */
-    @Extension
+    @Extension @Symbol("cron")
     public static class Cron extends PeriodicWork {
         private final Calendar cal = new GregorianCalendar();
 

File: core/src/main/java/hudson/util/ClockDifference.java
Patch:
@@ -41,8 +41,8 @@ public final class ClockDifference {
     /**
      * The difference in milliseconds.
      *
-     * Positive value means the slave is behind the master,
-     * negative value means the slave is ahead of the master.
+     * Positive value means the agent is behind the master,
+     * negative value means the agent is ahead of the master.
      */
     @Exported
     public final long diff;

File: core/src/main/java/hudson/util/ProcessKiller.java
Patch:
@@ -38,7 +38,7 @@
  * <p>
  * Each implementation of {@link ProcessKiller} is instantiated once on the master.
  * Whenever a process needs to be killed, those implementations are serialized and sent over
- * to the appropriate slave, then the {@link #kill(ProcessTree.OSProcess)} method is invoked
+ * to the appropriate agent, then the {@link #kill(ProcessTree.OSProcess)} method is invoked
  * to attempt to kill the process.
  *
  * <p>

File: core/src/main/java/hudson/util/RemotingDiagnostics.java
Patch:
@@ -61,7 +61,7 @@
  * Various remoting operations related to diagnostics.
  *
  * <p>
- * These code are useful wherever {@link VirtualChannel} is used, such as master, slaves, Maven JVMs, etc.
+ * These code are useful wherever {@link VirtualChannel} is used, such as master, agents, Maven JVMs, etc.
  *
  * @author Kohsuke Kawaguchi
  * @since 1.175

File: core/src/main/java/hudson/util/SubClassGenerator.java
Patch:
@@ -76,7 +76,7 @@ public <T> Class<? extends T> generate(Class<T> base, String name) {
 
         Class<? extends T> c = defineClass(name, image, 0, image.length).asSubclass(base);
 
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull();
         if (h!=null)    // null only during tests.
             ((UberClassLoader)h.pluginManager.uberClassLoader).addNamedClass(name,c); // can't change the field type as it breaks binary compatibility
         

File: core/src/main/java/hudson/util/io/ParserConfigurator.java
Patch:
@@ -75,7 +75,7 @@ public static ExtensionList<ParserConfigurator> all() {
     public static void applyConfiguration(SAXReader reader, Object context) throws IOException, InterruptedException {
         Collection<ParserConfigurator> all = Collections.emptyList();
 
-        if (Jenkins.getInstance()==null) {
+        if (Jenkins.getInstanceOrNull()==null) {
             Channel ch = Channel.current();
             if (ch!=null)
                 all = ch.call(new SlaveToMasterCallable<Collection<ParserConfigurator>, IOException>() {

File: core/src/main/java/hudson/util/jna/InitializationErrorInvocationHandler.java
Patch:
@@ -12,7 +12,6 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.487
- * @see <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7199848">Related bug report against JDK</a>
  */
 public class InitializationErrorInvocationHandler implements InvocationHandler {
     private final Throwable cause;

File: core/src/main/java/hudson/util/spring/BeanBuilder.java
Patch:
@@ -39,6 +39,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
@@ -132,7 +133,7 @@ public void parse(InputStream script, Binding binding) {
         cc.setScriptBaseClass(ClosureScript.class.getName());
         GroovyShell shell = new GroovyShell(classLoader,binding,cc);
 
-        ClosureScript s = (ClosureScript)shell.parse(script);
+        ClosureScript s = (ClosureScript)shell.parse(new InputStreamReader(script));
         s.setDelegate(this);
         s.run();
     }
@@ -336,7 +337,7 @@ public Object call(Object... args) {
 
 		GroovyShell shell = classLoader != null ? new GroovyShell(classLoader,b) : new GroovyShell(b);
         for (Resource resource : resources) {
-            shell.evaluate(resource.getInputStream());
+            shell.evaluate(new InputStreamReader(resource.getInputStream()));
         }
 	}
 

File: core/src/main/java/hudson/views/BuildButtonColumn.java
Patch:
@@ -24,14 +24,15 @@
 package hudson.views;
 
 import hudson.Extension;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 public class BuildButtonColumn extends ListViewColumn {
     @DataBoundConstructor
     public BuildButtonColumn() {
     }
 
-    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_ACTIONS_START-1)
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_ACTIONS_START-1) @Symbol("buildButton")
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/DefaultMyViewsTabBar.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.views;
 
 import hudson.Extension;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 /**
@@ -38,7 +39,7 @@ public class DefaultMyViewsTabBar extends MyViewsTabBar {
     public DefaultMyViewsTabBar() {
     }
 
-    @Extension
+    @Extension @Symbol("standard")
     public static class DescriptorImpl extends MyViewsTabBarDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/DefaultViewsTabBar.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.views;
 
 import hudson.Extension;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 /**
@@ -38,7 +39,7 @@ public class DefaultViewsTabBar extends ViewsTabBar {
     public DefaultViewsTabBar() {
     }
 
-    @Extension
+    @Extension @Symbol("standard")
     public static class DescriptorImpl extends ViewsTabBarDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/GlobalDefaultViewConfiguration.java
Patch:
@@ -27,14 +27,15 @@
 import jenkins.model.GlobalConfiguration;
 import jenkins.model.Jenkins;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
 /**
  * Adds the default view configuration to the system config page.
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension(ordinal=300)
+@Extension(ordinal=300) @Symbol("defaultView")
 public class GlobalDefaultViewConfiguration extends GlobalConfiguration {
     @Override
     public boolean configure(StaplerRequest req, JSONObject json) throws FormException {

File: core/src/main/java/hudson/views/JobColumn.java
Patch:
@@ -25,6 +25,7 @@
 
 import hudson.Extension;
 import hudson.model.Item;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 /**
@@ -36,7 +37,7 @@ public JobColumn() {
     }
 
     // put this in the middle of icons and properties
-    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_ICON_END+1)
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_ICON_END+1) @Symbol("jobName")
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/LastDurationColumn.java
Patch:
@@ -24,14 +24,15 @@
 package hudson.views;
 
 import hudson.Extension;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 public class LastDurationColumn extends ListViewColumn {
     @DataBoundConstructor
     public LastDurationColumn() {
     }
 
-    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_PROPERTIES_START-4)
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_PROPERTIES_START-4) @Symbol("lastDuration")
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/LastFailureColumn.java
Patch:
@@ -24,14 +24,15 @@
 package hudson.views;
 
 import hudson.Extension;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 public class LastFailureColumn extends ListViewColumn {
     @DataBoundConstructor
     public LastFailureColumn() {
     }
 
-    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_PROPERTIES_START-2)
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_PROPERTIES_START-2) @Symbol("lastFailure")
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/LastStableColumn.java
Patch:
@@ -24,14 +24,15 @@
 package hudson.views;
 
 import hudson.Extension;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 public class LastStableColumn extends ListViewColumn {
     @DataBoundConstructor
     public LastStableColumn() {
     }
 
-    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_PROPERTIES_START-3)
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_PROPERTIES_START-3) @Symbol("lastStable")
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/LastSuccessColumn.java
Patch:
@@ -24,14 +24,15 @@
 package hudson.views;
 
 import hudson.Extension;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 public class LastSuccessColumn extends ListViewColumn {
     @DataBoundConstructor
     public LastSuccessColumn() {
     }
 
-    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_PROPERTIES_START-1)
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_PROPERTIES_START-1) @Symbol("lastSuccess")
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/MyViewsTabBar.java
Patch:
@@ -32,6 +32,7 @@
 import jenkins.model.Jenkins;
 import hudson.model.MyViewsProperty;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
 /**
@@ -67,7 +68,7 @@ public MyViewsTabBarDescriptor getDescriptor() {
      *
      * @author Kohsuke Kawaguchi
      */
-    @Extension(ordinal=305)
+    @Extension(ordinal=305) @Symbol("myView")
     public static class GlobalConfigurationImpl extends GlobalConfiguration {
         public MyViewsTabBar getMyViewsTabBar() {
             return Jenkins.getInstance().getMyViewsTabBar();

File: core/src/main/java/hudson/views/StatusColumn.java
Patch:
@@ -25,6 +25,7 @@
 
 import hudson.Extension;
 import hudson.model.StatusIcon;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 /**
@@ -37,7 +38,7 @@ public class StatusColumn extends ListViewColumn {
     public StatusColumn() {
     }
 
-    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_ICON_START-1)
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_ICON_START-1) @Symbol("status")
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/ViewsTabBar.java
Patch:
@@ -33,6 +33,7 @@
 import jenkins.model.Jenkins;
 import hudson.model.ListView;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
 /**
@@ -69,7 +70,7 @@ public ViewsTabBarDescriptor getDescriptor() {
      *
      * @author Kohsuke Kawaguchi
      */
-    @Extension(ordinal=310)
+    @Extension(ordinal=310) @Symbol("viewsTabBar")
     public static class GlobalConfigurationImpl extends GlobalConfiguration {
         public ViewsTabBar getViewsTabBar() {
             return Jenkins.getInstance().getViewsTabBar();

File: core/src/main/java/hudson/views/WeatherColumn.java
Patch:
@@ -25,14 +25,15 @@
 package hudson.views;
 
 import hudson.Extension;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 public class WeatherColumn extends ListViewColumn {
     @DataBoundConstructor
     public WeatherColumn() {
     }
 
-    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_ICON_START-2)
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_ICON_START-2) @Symbol("weather")
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/widgets/BuildHistoryWidget.java
Patch:
@@ -63,7 +63,7 @@ public Item getQueuedItem() {
      */
     public List<Item> getQueuedItems() {
         LinkedList<Item> list = new LinkedList<Item>();
-        for (Item item : Jenkins.getInstance().getQueue().getApproximateItemsQuickly()) {
+        for (Item item : Jenkins.getInstance().getQueue().getItems()) {
             if (item.task == owner) {
                 list.addFirst(item);
             }

File: core/src/main/java/jenkins/SlaveToMasterFileCallable.java
Patch:
@@ -5,7 +5,7 @@
 import org.jenkinsci.remoting.RoleChecker;
 
 /**
- * {@link FileCallable}s that can be executed on the master, sent by the slave.
+ * {@link FileCallable}s that can be executed on the master, sent by the agent.
  *
  * @since 1.THU
  */

File: core/src/main/java/jenkins/SoloFilePathFilter.java
Patch:
@@ -28,7 +28,7 @@ private SoloFilePathFilter(FilePathFilter base) {
 
     private boolean noFalse(String op, File f, boolean b) {
         if (!b)
-            throw new SecurityException("slave may not " + op + " " + f+"\nSee http://jenkins-ci.org/security-144 for more details");
+            throw new SecurityException("agent may not " + op + " " + f+"\nSee http://jenkins-ci.org/security-144 for more details");
         return true;
     }
 

File: core/src/main/java/jenkins/diagnosis/HsErrPidList.java
Patch:
@@ -24,13 +24,15 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import org.apache.commons.io.IOUtils;
+import org.jenkinsci.Symbol;
 
 /**
  * Finds crash dump reports and show them in the UI.
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension(optional=true) // TODO why would an extension using a built-in extension point need to be marked optional?
+@Extension(optional=true) @Symbol("hsErrPid")
+// TODO why would an extension using a built-in extension point need to be marked optional?
 public class HsErrPidList extends AdministrativeMonitor {
     /**
      * hs_err_pid files that we think belong to us.

File: core/src/main/java/jenkins/diagnostics/SecurityIsOffMonitor.java
Patch:
@@ -3,6 +3,7 @@
 import hudson.Extension;
 import hudson.model.AdministrativeMonitor;
 import jenkins.model.Jenkins;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
@@ -17,7 +18,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension
+@Extension @Symbol("securityIsOff")
 public class SecurityIsOffMonitor extends AdministrativeMonitor {
     @Override
     public boolean isActivated() {

File: core/src/main/java/jenkins/management/CliLink.java
Patch:
@@ -26,11 +26,12 @@
 
 import hudson.Extension;
 import hudson.model.ManagementLink;
+import org.jenkinsci.Symbol;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
-@Extension(ordinal = Integer.MAX_VALUE - 800)
+@Extension(ordinal = Integer.MAX_VALUE - 800) @Symbol("cli")
 public class CliLink extends ManagementLink {
 
     @Override

File: core/src/main/java/jenkins/management/ConfigureLink.java
Patch:
@@ -26,16 +26,17 @@
 
 import hudson.Extension;
 import hudson.model.ManagementLink;
+import org.jenkinsci.Symbol;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
-@Extension(ordinal = Integer.MAX_VALUE - 200)
+@Extension(ordinal = Integer.MAX_VALUE - 200) @Symbol("configure")
 public class ConfigureLink extends ManagementLink {
 
     @Override
     public String getIconFileName() {
-        return "setting.png";
+        return "gear2.png";
     }
 
     public String getDisplayName() {

File: core/src/main/java/jenkins/management/ConsoleLink.java
Patch:
@@ -28,11 +28,12 @@
 import hudson.model.ManagementLink;
 import hudson.security.Permission;
 import jenkins.model.Jenkins;
+import org.jenkinsci.Symbol;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
-@Extension(ordinal = Integer.MAX_VALUE - 900)
+@Extension(ordinal = Integer.MAX_VALUE - 900) @Symbol("console")
 public class ConsoleLink extends ManagementLink {
 
     @Override

File: core/src/main/java/jenkins/management/NodesLink.java
Patch:
@@ -27,11 +27,12 @@
 import hudson.Extension;
 import hudson.model.ManagementLink;
 import jenkins.management.Messages;
+import org.jenkinsci.Symbol;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
-@Extension(ordinal = Integer.MAX_VALUE - 1000)
+@Extension(ordinal = Integer.MAX_VALUE - 1000) @Symbol("nodes")
 public class NodesLink extends ManagementLink {
 
     @Override

File: core/src/main/java/jenkins/management/PluginsLink.java
Patch:
@@ -26,11 +26,12 @@
 
 import hudson.Extension;
 import hudson.model.ManagementLink;
+import org.jenkinsci.Symbol;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
-@Extension(ordinal = Integer.MAX_VALUE - 400)
+@Extension(ordinal = Integer.MAX_VALUE - 400) @Symbol("plugins")
 public class PluginsLink extends ManagementLink {
 
     @Override

File: core/src/main/java/jenkins/management/ReloadLink.java
Patch:
@@ -26,11 +26,12 @@
 
 import hudson.Extension;
 import hudson.model.ManagementLink;
+import org.jenkinsci.Symbol;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
-@Extension(ordinal = Integer.MAX_VALUE - 300)
+@Extension(ordinal = Integer.MAX_VALUE - 300) @Symbol("reload")
 public class ReloadLink extends ManagementLink {
 
     @Override

File: core/src/main/java/jenkins/management/ShutdownLink.java
Patch:
@@ -27,11 +27,12 @@
 import hudson.Extension;
 import hudson.model.ManagementLink;
 import jenkins.model.Jenkins;
+import org.jenkinsci.Symbol;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
-@Extension(ordinal = Integer.MIN_VALUE)
+@Extension(ordinal = Integer.MIN_VALUE) @Symbol("shutDown")
 public class ShutdownLink extends ManagementLink {
 
     @Override

File: core/src/main/java/jenkins/management/StatisticsLink.java
Patch:
@@ -26,11 +26,12 @@
 
 import hudson.Extension;
 import hudson.model.ManagementLink;
+import org.jenkinsci.Symbol;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
-@Extension(ordinal = Integer.MAX_VALUE - 700)
+@Extension(ordinal = Integer.MAX_VALUE - 700) @Symbol("loadStatistics")
 public class StatisticsLink extends ManagementLink {
 
     @Override

File: core/src/main/java/jenkins/management/SystemLogLink.java
Patch:
@@ -26,11 +26,12 @@
 
 import hudson.Extension;
 import hudson.model.ManagementLink;
+import org.jenkinsci.Symbol;
 
 /**
  * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
-@Extension(ordinal = Integer.MAX_VALUE - 600)
+@Extension(ordinal = Integer.MAX_VALUE - 600) @Symbol("log")
 public class SystemLogLink extends ManagementLink {
 
     @Override

File: core/src/main/java/jenkins/model/ArtifactManagerConfiguration.java
Patch:
@@ -28,13 +28,14 @@
 import hudson.util.DescribableList;
 import java.io.IOException;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
 /**
  * List of configured {@link ArtifactManagerFactory}s.
  * @since 1.532
  */
-@Extension
+@Extension @Symbol("artifactManager")
 public class ArtifactManagerConfiguration extends GlobalConfiguration {
     
     public static ArtifactManagerConfiguration get() {

File: core/src/main/java/jenkins/model/ArtifactManagerFactory.java
Patch:
@@ -45,7 +45,7 @@ public abstract class ArtifactManagerFactory extends AbstractDescribableImpl<Art
      * All configured factories are consulted in sequence; the first manager thus yielded (if any) will be stored in the build.
      * {@link StandardArtifactManager} is used as a fallback.
      * @param build a running (or recently completed) build ready for {@link ArtifactManager#archive}
-     * @return a manager, or null if this manager should not handle this kind of project, builds on this kind of slave, etc.
+     * @return a manager, or null if this manager should not handle this kind of project, builds on this kind of agent, etc.
      */
     public abstract @CheckForNull ArtifactManager managerFor(Run<?,?> build);
 

File: core/src/main/java/jenkins/model/CoreEnvironmentContributor.java
Patch:
@@ -11,6 +11,7 @@
 import hudson.model.Run;
 import hudson.model.TaskListener;
 import jenkins.model.Jenkins.MasterComputer;
+import org.jenkinsci.Symbol;
 
 import java.io.IOException;
 
@@ -20,7 +21,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension(ordinal=-100)
+@Extension(ordinal=-100) @Symbol("core")
 public class CoreEnvironmentContributor extends EnvironmentContributor {
     @Override
     public void buildEnvironmentFor(Run r, EnvVars env, TaskListener listener) throws IOException, InterruptedException {

File: core/src/main/java/jenkins/model/GlobalCloudConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import hudson.Extension;
 import hudson.slaves.Cloud;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
 import java.io.IOException;
@@ -15,7 +16,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension(ordinal=-100) // historically this was placed at the very end of the configuration page
+@Extension(ordinal=-100) @Symbol("cloud") // historically this was placed at the very end of the configuration page
 public class GlobalCloudConfiguration  extends GlobalConfiguration {
     @Override
     public boolean configure(StaplerRequest req, JSONObject json) throws FormException {

File: core/src/main/java/jenkins/model/GlobalNodePropertiesConfiguration.java
Patch:
@@ -4,6 +4,7 @@
 import hudson.slaves.NodeProperty;
 import hudson.slaves.NodePropertyDescriptor;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
 import java.io.IOException;
@@ -13,7 +14,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension(ordinal=110) // historically this was placed above GlobalPluginConfiguration
+@Extension(ordinal=110) @Symbol("nodeProperties") // historically this was placed above GlobalPluginConfiguration
 public class GlobalNodePropertiesConfiguration extends GlobalConfiguration {
     @Override
     public boolean configure(StaplerRequest req, JSONObject json) throws FormException {

File: core/src/main/java/jenkins/model/GlobalProjectNamingStrategyConfiguration.java
Patch:
@@ -27,14 +27,15 @@
 import jenkins.model.ProjectNamingStrategy.DefaultProjectNamingStrategy;
 import net.sf.json.JSONObject;
 
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
 /**
  * Configures the project naming strategy.
  * 
  * @author Dominik Bartholdi (imod)
  */
-@Extension(ordinal = 250)
+@Extension(ordinal = 250) @Symbol("projectNamingStrategy")
 public class GlobalProjectNamingStrategyConfiguration extends GlobalConfiguration {
 
     @Override

File: core/src/main/java/jenkins/model/GlobalQuietPeriodConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 
 import hudson.Extension;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
 import java.io.IOException;
@@ -34,7 +35,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension(ordinal=400)
+@Extension(ordinal=400) @Symbol("quietPeriod")
 public class GlobalQuietPeriodConfiguration extends GlobalConfiguration {
     public int getQuietPeriod() {
         return Jenkins.getInstance().getQuietPeriod();

File: core/src/main/java/jenkins/model/GlobalSCMRetryCountConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 
 import hudson.Extension;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
 import java.io.IOException;
@@ -34,7 +35,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension(ordinal=395)
+@Extension(ordinal=395) @Symbol("scmRetryCount")
 public class GlobalSCMRetryCountConfiguration extends GlobalConfiguration {
     public int getScmCheckoutRetryCount() {
         return Jenkins.getInstance().getScmCheckoutRetryCount();

File: core/src/main/java/jenkins/model/IdStrategy.java
Patch:
@@ -29,6 +29,7 @@
 import hudson.model.AbstractDescribableImpl;
 import hudson.util.CaseInsensitiveComparator;
 import org.apache.commons.lang.StringUtils;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 import javax.annotation.Nonnull;
@@ -175,7 +176,7 @@ public int compare(@Nonnull String id1, @Nonnull String id2) {
             return CaseInsensitiveComparator.INSTANCE.compare(id1, id2);
         }
 
-        @Extension
+        @Extension @Symbol("caseInsensitive")
         public static class DescriptorImpl extends IdStrategyDescriptor {
 
             /**
@@ -303,7 +304,7 @@ public int compare(@Nonnull String id1, @Nonnull String id2) {
             return id1.compareTo(id2);
         }
 
-        @Extension
+        @Extension @Symbol("caseSensitive")
         public static class DescriptorImpl extends IdStrategyDescriptor {
 
             /**

File: core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java
Patch:
@@ -6,6 +6,7 @@
 import hudson.util.FormValidation;
 import hudson.util.XStream2;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.QueryParameter;
 import org.kohsuke.stapler.StaplerRequest;
 
@@ -29,7 +30,7 @@
  * @author Kohsuke Kawaguchi
  * @since 1.494
  */
-@Extension
+@Extension @Symbol("location")
 public class JenkinsLocationConfiguration extends GlobalConfiguration {
     /**
      * @deprecated replaced by {@link #jenkinsUrl}

File: core/src/main/java/jenkins/model/MasterBuildConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import hudson.Extension;
 import hudson.model.Node.Mode;
 import net.sf.json.JSONObject;
+import org.jenkinsci.Symbol;
 import org.kohsuke.stapler.StaplerRequest;
 
 import java.io.IOException;
@@ -35,7 +36,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension(ordinal=500)
+@Extension(ordinal=500) @Symbol("masterBuild")
 public class MasterBuildConfiguration extends GlobalConfiguration {
     public int getNumExecutors() {
         return Jenkins.getInstance().getNumExecutors();

File: test/src/test/java/hudson/model/UpdateCenterConnectionStatusTest.java
Patch:
@@ -67,7 +67,7 @@ public void doConnectionStatus_unknown_site() throws IOException, SAXException {
         JSONObject response = jenkinsRule.getJSON("updateCenter/connectionStatus?siteId=blahblah").getJSONObject();
 
         Assert.assertEquals("error", response.getString("status"));
-        Assert.assertEquals("Unknown site 'blahblah'.", response.getString("message"));
+        Assert.assertEquals("Cannot check connection status of the update site with ID='blahblah'. This update center cannot be resolved", response.getString("message"));
     }
 
     private UpdateSite updateSite = new UpdateSite(UpdateCenter.ID_DEFAULT, "http://xyz") {

File: test/src/test/java/hudson/model/UpdateCenterConnectionStatusTest.java
Patch:
@@ -67,7 +67,7 @@ public void doConnectionStatus_unknown_site() throws IOException, SAXException {
         JSONObject response = jenkinsRule.getJSON("updateCenter/connectionStatus?siteId=blahblah").getJSONObject();
 
         Assert.assertEquals("error", response.getString("status"));
-        Assert.assertEquals("Unknown site 'blahblah'.", response.getString("message"));
+        Assert.assertEquals("Cannot check connection status of the update site with ID='blahblah'. This update center cannot be resolved", response.getString("message"));
     }
 
     private UpdateSite updateSite = new UpdateSite(UpdateCenter.ID_DEFAULT, "http://xyz") {

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -143,9 +143,10 @@ public class UpdateCenter extends AbstractModelObject implements Saveable, OnMas
 
     /**
      * {@linkplain UpdateSite#getId() ID} of the default update site.
-     * @since 1.483
+     * @since 1.483 - public property
+     * @since TODO - configurable via system property
      */
-    public static final String ID_DEFAULT = "default";
+    public static final String ID_DEFAULT = System.getProperty(UpdateCenter.class.getName()+".defaultUpdateSiteId", "default");
 
     @Restricted(NoExternalUse.class)
     public static final String ID_UPLOAD = "_upload";

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -524,7 +524,7 @@ public void cliOffline(@Option(name="-m",usage="Record the note about why you ar
     }
 
     /**
-     * Deprecated - implementation of CLI command "online-node" moved to {@link hudson.cli.OnlineNodeCommand}.
+     * @deprecated Implementation of CLI command "online-node" moved to {@link hudson.cli.OnlineNodeCommand}.
      */
     @Deprecated
     public void cliOnline() throws ExecutionException, InterruptedException {

File: test/src/test/java/hudson/model/ApiTest.java
Patch:
@@ -29,6 +29,7 @@
 
 import java.io.File;
 import java.net.HttpURLConnection;
+import org.junit.Ignore;
 
 import org.junit.Rule;
 import org.junit.Test;
@@ -92,6 +93,7 @@ public void wrappedOneItem() throws Exception {
         assertEquals("<root><name>All</name></root>", page.getWebResponse().getContentAsString());
     }
 
+    @Ignore("JENKINS-26775: fails in JDK 8 builds prior to stapler 1.238")
     @Test
     public void wrappedMultipleItems() throws Exception {
         j.createFreeStyleProject();

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -861,12 +861,12 @@ public Future<UpdateCenterJob> deploy(boolean dynamicLoad, @CheckForNull UUID co
             if(pw != null) { // JENKINS-34494 - check for this plugin being disabled
                 Future<UpdateCenterJob> enableJob = null;
                 if(!pw.isEnabled()) {
-                    UpdateCenter.EnableJob job = uc.new EnableJob(UpdateSite.this, this);
+                    UpdateCenter.EnableJob job = uc.new EnableJob(UpdateSite.this, null, this, dynamicLoad);
                     job.setCorrelationId(correlationId);
                     enableJob = uc.addJob(job);
                 }
                 if(pw.getVersionNumber().equals(new VersionNumber(version))) {
-                    return enableJob != null ? enableJob : uc.addJob(uc.new NoOpJob(UpdateSite.this, this));
+                    return enableJob != null ? enableJob : uc.addJob(uc.new NoOpJob(UpdateSite.this, null, this));
                 }
             }
             UpdateCenter.InstallationJob job = uc.new InstallationJob(this, UpdateSite.this, Jenkins.getAuthentication(), dynamicLoad);

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -27,7 +27,6 @@
 import hudson.XmlFile;
 import hudson.model.listeners.ItemListener;
 import hudson.security.AccessControlled;
-import hudson.security.AccessDeniedException2;
 import hudson.util.CopyOnWriteMap;
 import hudson.util.Function1;
 import hudson.util.Secret;
@@ -51,6 +50,7 @@
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import jenkins.security.NotReallyRoleSensitiveCallable;
+import org.acegisecurity.AccessDeniedException;
 import org.xml.sax.SAXException;
 
 /**
@@ -229,7 +229,8 @@ public synchronized <T extends TopLevelItem> T copy(T src, String name) throws I
             Matcher matcher = AbstractItem.SECRET_PATTERN.matcher(srcConfigFile.asString());
             while (matcher.find()) {
                 if (Secret.decrypt(matcher.group(1)) != null) {
-                    throw new AccessDeniedException2(Jenkins.getAuthentication(), Item.CONFIGURE);
+                    // AccessDeniedException2 does not permit a custom message, and anyway redirecting the user to the login screen is obviously pointless.
+                    throw new AccessDeniedException(Messages.ItemGroupMixIn_may_not_copy_as_it_contains_secrets_and_(src.getFullName(), Jenkins.getAuthentication().getName(), Item.PERMISSIONS.title, Item.EXTENDED_READ.name, Item.CONFIGURE.name));
                 }
             }
         }

File: core/src/main/java/hudson/FileSystemProvisioner.java
Patch:
@@ -236,7 +236,7 @@ public void restoreTo(AbstractBuild<?,?> owner, FilePath dst, TaskListener liste
             }
         }
 
-        @Extension @Symbol("default")
+        @Extension @Symbol("standard")
         public static final class DescriptorImpl extends FileSystemProvisionerDescriptor {
             public boolean discard(FilePath ws, TaskListener listener) throws IOException, InterruptedException {
                 // the default provisioner does not do anything special,

File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java
Patch:
@@ -119,7 +119,7 @@ private String getClientIP(HttpServletRequest req) {
         return defaultAddress;
     }
     
-    @Extension @Symbol("default")
+    @Extension @Symbol("standard")
     public static final class DescriptorImpl extends CrumbIssuerDescriptor<DefaultCrumbIssuer> implements ModelObject {
 
         private final static HexStringConfidentialKey CRUMB_SALT = new HexStringConfidentialKey(Jenkins.class,"crumbSalt",16);

File: core/src/main/java/hudson/views/DefaultMyViewsTabBar.java
Patch:
@@ -39,7 +39,7 @@ public class DefaultMyViewsTabBar extends MyViewsTabBar {
     public DefaultMyViewsTabBar() {
     }
 
-    @Extension @Symbol("default")
+    @Extension @Symbol("standard")
     public static class DescriptorImpl extends MyViewsTabBarDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/DefaultViewsTabBar.java
Patch:
@@ -39,7 +39,7 @@ public class DefaultViewsTabBar extends ViewsTabBar {
     public DefaultViewsTabBar() {
     }
 
-    @Extension @Symbol("default")
+    @Extension @Symbol("standard")
     public static class DescriptorImpl extends ViewsTabBarDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/jenkins/model/ProjectNamingStrategy.java
Patch:
@@ -109,7 +109,7 @@ private Object readResolve() {
             return DEFAULT_NAMING_STRATEGY;
         }
 
-        @Extension @Symbol("default")
+        @Extension @Symbol("standard")
         public static final class DescriptorImpl extends ProjectNamingStrategyDescriptor {
             @Override
             public String getDisplayName() {

File: core/src/main/java/jenkins/mvn/DefaultGlobalSettingsProvider.java
Patch:
@@ -24,7 +24,7 @@ public FilePath supplySettings(AbstractBuild<?, ?> project, TaskListener listene
         return null;
     }
 
-    @Extension(ordinal = 99) @Symbol("default")
+    @Extension(ordinal = 99) @Symbol("standard")
     public static class DescriptorImpl extends GlobalSettingsProviderDescriptor {
 
         @Override

File: core/src/main/java/jenkins/mvn/DefaultSettingsProvider.java
Patch:
@@ -24,7 +24,7 @@ public FilePath supplySettings(AbstractBuild<?, ?> project, TaskListener listene
         return null;
     }
 
-    @Extension(ordinal = 99) @Symbol("default")
+    @Extension(ordinal = 99) @Symbol("standard")
     public static class DescriptorImpl extends SettingsProviderDescriptor {
 
         @Override

File: core/src/main/java/jenkins/scm/DefaultSCMCheckoutStrategyImpl.java
Patch:
@@ -13,7 +13,7 @@ public class DefaultSCMCheckoutStrategyImpl extends SCMCheckoutStrategy {
     @DataBoundConstructor
     public DefaultSCMCheckoutStrategyImpl() {}
 
-    @Extension @Symbol("default")
+    @Extension @Symbol("standard")
     public static class DescriptorImpl extends SCMCheckoutStrategyDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java
Patch:
@@ -158,7 +158,7 @@ private void serveFile(StaplerRequest req, StaplerResponse rsp, VirtualFile root
         String pattern = req.getParameter("pattern");
         if(pattern==null)
             pattern = req.getParameter("path"); // compatibility with Hudson<1.129
-        if(pattern!=null && !Util.isAbsoluteUri(pattern)) {// avoid open redirect
+        if(pattern!=null && Util.isSafeToRedirectTo(pattern)) {// avoid open redirect
             rsp.sendRedirect2(pattern);
             return;
         }

File: core/src/main/java/hudson/model/ParametersDefinitionProperty.java
Patch:
@@ -158,7 +158,7 @@ public void _doBuild(StaplerRequest req, StaplerResponse rsp, @QueryParameter Ti
                 getJob(), delay.getTime(), new ParametersAction(values), new CauseAction(new Cause.UserIdCause()));
         if (item!=null) {
             String url = formData.optString("redirectTo");
-            if (url==null || Util.isAbsoluteUri(url))   // avoid open redirect
+            if (url==null || !Util.isSafeToRedirectTo(url))   // avoid open redirect
                 url = req.getContextPath()+'/'+item.getUrl();
             rsp.sendRedirect(formData.optInt("statusCode",SC_CREATED), url);
         } else

File: core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java
Patch:
@@ -53,7 +53,7 @@ protected String determineTargetUrl(HttpServletRequest request) {
         if (targetUrl == null)
             return getDefaultTargetUrl();
 
-        if (Util.isAbsoluteUri(targetUrl))
+        if (!Util.isSafeToRedirectTo(targetUrl))
             return "."; // avoid open redirect
 
         // URL returned from determineTargetUrl() is resolved against the context path,

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -249,7 +249,7 @@ public Object call() throws Exception {
                     try {
                         for (ComputerListener cl : ComputerListener.all())
                             cl.preLaunch(SlaveComputer.this, taskListener);
-
+                        offlineCause = null;
                         launcher.launch(SlaveComputer.this, taskListener);
                     } catch (AbortException e) {
                         taskListener.error(e.getMessage());
@@ -266,7 +266,7 @@ public Object call() throws Exception {
                         throw e;
                     }
                 } finally {
-                    if (channel==null) {
+                    if (channel==null && offlineCause == null) {
                         offlineCause = new OfflineCause.LaunchFailed();
                         for (ComputerListener cl : ComputerListener.all())
                             cl.onLaunchFailure(SlaveComputer.this, taskListener);

File: test/src/test/java/hudson/cli/UpdateNodeCommandTest.java
Patch:
@@ -100,7 +100,7 @@ public class UpdateNodeCommandTest {
 
     @Issue("SECURITY-281")
     @Test
-    public void getNodeShouldFailForMaster() throws Exception {
+    public void updateNodeShouldFailForMaster() throws Exception {
         CLICommandInvoker.Result result = command.authorizedTo(Computer.CONFIGURE, Jenkins.READ).withStdin(Computer.class.getResourceAsStream("node.xml")).invokeWithArgs("");
         assertThat(result.stderr(), containsString("No such node ''"));
         assertThat(result, failedWith(-1));

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -249,7 +249,7 @@ public Object call() throws Exception {
                     try {
                         for (ComputerListener cl : ComputerListener.all())
                             cl.preLaunch(SlaveComputer.this, taskListener);
-
+                        offlineCause = null;
                         launcher.launch(SlaveComputer.this, taskListener);
                     } catch (AbortException e) {
                         taskListener.error(e.getMessage());
@@ -266,7 +266,7 @@ public Object call() throws Exception {
                         throw e;
                     }
                 } finally {
-                    if (channel==null) {
+                    if (channel==null && offlineCause == null) {
                         offlineCause = new OfflineCause.LaunchFailed();
                         for (ComputerListener cl : ComputerListener.all())
                             cl.onLaunchFailure(SlaveComputer.this, taskListener);

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -890,6 +890,7 @@ public HttpResponse doUploadPlugin(StaplerRequest req) throws IOException, Servl
 
     @Restricted(NoExternalUse.class)
     @RequirePOST public HttpResponse doCheckUpdatesServer() throws IOException {
+        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         for (UpdateSite site : Jenkins.getInstance().getUpdateCenter().getSites()) {
             FormValidation v = site.updateDirectlyNow(DownloadService.signatureCheck);
             if (v.kind != FormValidation.Kind.OK) {

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -211,6 +211,7 @@ public Transformer getCompatibilityTransformer() {
     }
 
     public Api getApi() {
+        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         return new Api(this);
     }
 

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -218,6 +218,7 @@ public String getDisplayName() {
     }
 
     public Api getApi() {
+        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         return new Api(this);
     }
 

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -175,6 +175,7 @@ public UpdateCenter() {
     }
 
     public Api getApi() {
+        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         return new Api(this);
     }
 

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -889,6 +889,7 @@ public HttpResponse doUploadPlugin(StaplerRequest req) throws IOException, Servl
 
     @Restricted(NoExternalUse.class)
     @RequirePOST public HttpResponse doCheckUpdatesServer() throws IOException {
+        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         for (UpdateSite site : Jenkins.getInstance().getUpdateCenter().getSites()) {
             FormValidation v = site.updateDirectlyNow(DownloadService.signatureCheck);
             if (v.kind != FormValidation.Kind.OK) {

File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java
Patch:
@@ -158,7 +158,7 @@ private void serveFile(StaplerRequest req, StaplerResponse rsp, VirtualFile root
         String pattern = req.getParameter("pattern");
         if(pattern==null)
             pattern = req.getParameter("path"); // compatibility with Hudson<1.129
-        if(pattern!=null && !Util.isAbsoluteUri(pattern)) {// avoid open redirect
+        if(pattern!=null && !Util.isAbsoluteOrSchemeRelativeUri(pattern)) {// avoid open redirect
             rsp.sendRedirect2(pattern);
             return;
         }

File: core/src/main/java/hudson/model/ParametersDefinitionProperty.java
Patch:
@@ -158,7 +158,7 @@ public void _doBuild(StaplerRequest req, StaplerResponse rsp, @QueryParameter Ti
                 getJob(), delay.getTime(), new ParametersAction(values), new CauseAction(new Cause.UserIdCause()));
         if (item!=null) {
             String url = formData.optString("redirectTo");
-            if (url==null || Util.isAbsoluteUri(url))   // avoid open redirect
+            if (url==null || Util.isAbsoluteOrSchemeRelativeUri(url))   // avoid open redirect
                 url = req.getContextPath()+'/'+item.getUrl();
             rsp.sendRedirect(formData.optInt("statusCode",SC_CREATED), url);
         } else

File: core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java
Patch:
@@ -53,7 +53,7 @@ protected String determineTargetUrl(HttpServletRequest request) {
         if (targetUrl == null)
             return getDefaultTargetUrl();
 
-        if (Util.isAbsoluteUri(targetUrl))
+        if (Util.isAbsoluteOrSchemeRelativeUri(targetUrl))
             return "."; // avoid open redirect
 
         // URL returned from determineTargetUrl() is resolved against the context path,

File: core/src/main/java/hudson/tasks/Maven.java
Patch:
@@ -250,8 +250,6 @@ public String invoke(File ws, VirtualChannel channel) throws IOException {
                 seed = new File(ws,"project.xml").exists() ? "maven" : "mvn";
             }
 
-            if(Functions.isWindows())
-                seed += ".bat";
             return seed;
         }
     }

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -656,6 +656,7 @@ public HttpResponse doMakeDisabled() throws IOException {
     @RequirePOST
     @Deprecated
     public HttpResponse doPin() throws IOException {
+        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         // See https://groups.google.com/d/msg/jenkinsci-dev/kRobm-cxFw8/6V66uhibAwAJ
         LOGGER.log(WARNING, "Call to pin plugin has been ignored. Plugin name: " + shortName);
         return HttpResponses.ok();
@@ -664,6 +665,7 @@ public HttpResponse doPin() throws IOException {
     @RequirePOST
     @Deprecated
     public HttpResponse doUnpin() throws IOException {
+        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         // See https://groups.google.com/d/msg/jenkinsci-dev/kRobm-cxFw8/6V66uhibAwAJ
         LOGGER.log(WARNING, "Call to unpin plugin has been ignored. Plugin name: " + shortName);
         return HttpResponses.ok();

File: core/src/main/java/hudson/model/TopLevelItemDescriptor.java
Patch:
@@ -50,7 +50,7 @@
  */
 public abstract class TopLevelItemDescriptor extends Descriptor<TopLevelItem> {
 
-    static final Logger LOGGER = Logger.getLogger(TopLevelItemDescriptor.class.getName());
+    private static final Logger LOGGER = Logger.getLogger(TopLevelItemDescriptor.class.getName());
 
     protected TopLevelItemDescriptor(Class<? extends TopLevelItem> clazz) {
         super(clazz);

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -840,6 +840,7 @@ public Future<UpdateCenterJob> deploy(boolean dynamicLoad) {
          *      See {@link UpdateCenter#isRestartRequiredForCompletion()}
          * @param correlationId A correlation ID to be set on the job.
          */
+        @Restricted(NoExternalUse.class)
         public Future<UpdateCenterJob> deploy(boolean dynamicLoad, @CheckForNull UUID correlationId) {
             Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
             UpdateCenter uc = Jenkins.getInstance().getUpdateCenter();

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -73,6 +73,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -903,11 +904,11 @@ public Descriptor getDescriptorByName(String className) {
     
     public Object getDynamic(String token) {
         for(Action action: getTransientActions()){
-            if(action.getUrlName().equals(token))
+            if(Objects.equals(action.getUrlName(), token))
                 return action;
         }
         for(Action action: getPropertyActions()){
-            if(action.getUrlName().equals(token))
+            if(Objects.equals(action.getUrlName(), token))
                 return action;
         }
         return null;

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -552,7 +552,7 @@ public Object getDynamic(String token) {
         for (Action a : getActions()) {
             String url = a.getUrlName();
             if (url==null)  continue;
-            if(a.getUrlName().equals(token))
+            if (url.equals(token))
                 return a;
         }
         return null;
@@ -1045,6 +1045,7 @@ public FormValidation doCheckJobName(@QueryParameter String value) {
      */
     @Restricted(DoNotUse.class)
     public Categories doItemCategories(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
+        getOwner().checkPermission(Item.CREATE);
         Categories categories = new Categories();
         int order = 0;
         for (TopLevelItemDescriptor descriptor : DescriptorVisibilityFilter.apply(getOwnerItemGroup(), Items.all(Jenkins.getAuthentication(), getOwnerItemGroup()))) {

File: core/src/main/java/hudson/model/ViewDescriptor.java
Patch:
@@ -79,6 +79,7 @@ protected ViewDescriptor() {
      */
     @Restricted(DoNotUse.class)
     public AutoCompletionCandidates doAutoCompleteCopyNewItemFrom(@QueryParameter final String value, @AncestorInPath ItemGroup<?> container) {
+        // TODO do we need a permissions check here?
         AutoCompletionCandidates candidates = AutoCompletionCandidates.ofJobNames(TopLevelItem.class, value, container);
         if (container instanceof DirectlyModifiableTopLevelItemGroup) {
             DirectlyModifiableTopLevelItemGroup modifiableContainer = (DirectlyModifiableTopLevelItemGroup) container;

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2459,8 +2459,8 @@ private File getRootDirFor(String name) {
     /**
      * Gets the user of the given name.
      *
-     * @return the user of the given name, if that person exists or the invoker {@link #hasPermission} on {@link #ADMINISTER}; else null
-     * @see User#get(String,boolean)
+     * @return the user of the given name (which may or may not be an id), if that person exists or the invoker {@link #hasPermission} on {@link #ADMINISTER}; else null
+     * @see User#get(String,boolean), {@link User#getById(String, boolean)}
      */
     public @CheckForNull User getUser(String name) {
         return User.get(name,hasPermission(ADMINISTER));

File: core/src/main/java/jenkins/security/ImpersonatingUserDetailsService.java
Patch:
@@ -39,7 +39,7 @@ public UserDetails loadUserByUsername(String username) throws UsernameNotFoundEx
 
     protected UserDetails attemptToImpersonate(String username, RuntimeException e) {
         // this backend cannot tell if the user name exists or not. so substitute by what we know
-        User u = User.get(username, false, emptyMap()); // TODO why false? use getById?
+        User u = User.getById(username, false);
         if (u!=null) {
             LastGrantedAuthoritiesProperty p = u.getProperty(LastGrantedAuthoritiesProperty.class);
             if (p!=null)

File: core/src/main/java/jenkins/security/LastGrantedAuthoritiesProperty.java
Patch:
@@ -134,7 +134,7 @@ protected void failedToLogIn(@Nonnull String username) {
              */
 
 //            try {
-//                User u = User.get(username,false,Collections.emptyMap());
+//                User u = User.getById(username,false);
 //                LastGrantedAuthoritiesProperty o = u.getProperty(LastGrantedAuthoritiesProperty.class);
 //                if (o!=null)
 //                    o.invalidate();

File: core/src/main/java/hudson/model/TopLevelItemDescriptor.java
Patch:
@@ -50,7 +50,7 @@
  */
 public abstract class TopLevelItemDescriptor extends Descriptor<TopLevelItem> {
 
-    static final Logger LOGGER = Logger.getLogger(TopLevelItemDescriptor.class.getName());
+    private static final Logger LOGGER = Logger.getLogger(TopLevelItemDescriptor.class.getName());
 
     protected TopLevelItemDescriptor(Class<? extends TopLevelItem> clazz) {
         super(clazz);

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -656,6 +656,7 @@ public HttpResponse doMakeDisabled() throws IOException {
     @RequirePOST
     @Deprecated
     public HttpResponse doPin() throws IOException {
+        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         // See https://groups.google.com/d/msg/jenkinsci-dev/kRobm-cxFw8/6V66uhibAwAJ
         LOGGER.log(WARNING, "Call to pin plugin has been ignored. Plugin name: " + shortName);
         return HttpResponses.ok();
@@ -664,6 +665,7 @@ public HttpResponse doPin() throws IOException {
     @RequirePOST
     @Deprecated
     public HttpResponse doUnpin() throws IOException {
+        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         // See https://groups.google.com/d/msg/jenkinsci-dev/kRobm-cxFw8/6V66uhibAwAJ
         LOGGER.log(WARNING, "Call to unpin plugin has been ignored. Plugin name: " + shortName);
         return HttpResponses.ok();

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -840,6 +840,7 @@ public Future<UpdateCenterJob> deploy(boolean dynamicLoad) {
          *      See {@link UpdateCenter#isRestartRequiredForCompletion()}
          * @param correlationId A correlation ID to be set on the job.
          */
+        @Restricted(NoExternalUse.class)
         public Future<UpdateCenterJob> deploy(boolean dynamicLoad, @CheckForNull UUID correlationId) {
             Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
             UpdateCenter uc = Jenkins.getInstance().getUpdateCenter();

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -1045,6 +1045,7 @@ public FormValidation doCheckJobName(@QueryParameter String value) {
      */
     @Restricted(DoNotUse.class)
     public Categories doItemCategories(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
+        getOwner().checkPermission(Item.CREATE);
         Categories categories = new Categories();
         int order = 0;
         for (TopLevelItemDescriptor descriptor : DescriptorVisibilityFilter.apply(getOwnerItemGroup(), Items.all(Jenkins.getAuthentication(), getOwnerItemGroup()))) {

File: core/src/main/java/hudson/model/ViewDescriptor.java
Patch:
@@ -79,6 +79,7 @@ protected ViewDescriptor() {
      */
     @Restricted(DoNotUse.class)
     public AutoCompletionCandidates doAutoCompleteCopyNewItemFrom(@QueryParameter final String value, @AncestorInPath ItemGroup<?> container) {
+        // TODO do we need a permissions check here?
         AutoCompletionCandidates candidates = AutoCompletionCandidates.ofJobNames(TopLevelItem.class, value, container);
         if (container instanceof DirectlyModifiableTopLevelItemGroup) {
             DirectlyModifiableTopLevelItemGroup modifiableContainer = (DirectlyModifiableTopLevelItemGroup) container;

File: core/src/main/java/hudson/model/TopLevelItemDescriptor.java
Patch:
@@ -50,7 +50,7 @@
  */
 public abstract class TopLevelItemDescriptor extends Descriptor<TopLevelItem> {
 
-    static final Logger LOGGER = Logger.getLogger(TopLevelItemDescriptor.class.getName());
+    private static final Logger LOGGER = Logger.getLogger(TopLevelItemDescriptor.class.getName());
 
     protected TopLevelItemDescriptor(Class<? extends TopLevelItem> clazz) {
         super(clazz);

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -656,6 +656,7 @@ public HttpResponse doMakeDisabled() throws IOException {
     @RequirePOST
     @Deprecated
     public HttpResponse doPin() throws IOException {
+        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         // See https://groups.google.com/d/msg/jenkinsci-dev/kRobm-cxFw8/6V66uhibAwAJ
         LOGGER.log(WARNING, "Call to pin plugin has been ignored. Plugin name: " + shortName);
         return HttpResponses.ok();
@@ -664,6 +665,7 @@ public HttpResponse doPin() throws IOException {
     @RequirePOST
     @Deprecated
     public HttpResponse doUnpin() throws IOException {
+        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         // See https://groups.google.com/d/msg/jenkinsci-dev/kRobm-cxFw8/6V66uhibAwAJ
         LOGGER.log(WARNING, "Call to unpin plugin has been ignored. Plugin name: " + shortName);
         return HttpResponses.ok();

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -840,6 +840,7 @@ public Future<UpdateCenterJob> deploy(boolean dynamicLoad) {
          *      See {@link UpdateCenter#isRestartRequiredForCompletion()}
          * @param correlationId A correlation ID to be set on the job.
          */
+        @Restricted(NoExternalUse.class)
         public Future<UpdateCenterJob> deploy(boolean dynamicLoad, @CheckForNull UUID correlationId) {
             Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
             UpdateCenter uc = Jenkins.getInstance().getUpdateCenter();

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -1045,6 +1045,7 @@ public FormValidation doCheckJobName(@QueryParameter String value) {
      */
     @Restricted(DoNotUse.class)
     public Categories doItemCategories(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
+        getOwner().checkPermission(Item.CREATE);
         Categories categories = new Categories();
         int order = 0;
         for (TopLevelItemDescriptor descriptor : DescriptorVisibilityFilter.apply(getOwnerItemGroup(), Items.all(Jenkins.getAuthentication(), getOwnerItemGroup()))) {

File: core/src/main/java/hudson/model/ViewDescriptor.java
Patch:
@@ -79,6 +79,7 @@ protected ViewDescriptor() {
      */
     @Restricted(DoNotUse.class)
     public AutoCompletionCandidates doAutoCompleteCopyNewItemFrom(@QueryParameter final String value, @AncestorInPath ItemGroup<?> container) {
+        // TODO do we need a permissions check here?
         AutoCompletionCandidates candidates = AutoCompletionCandidates.ofJobNames(TopLevelItem.class, value, container);
         if (container instanceof DirectlyModifiableTopLevelItemGroup) {
             DirectlyModifiableTopLevelItemGroup modifiableContainer = (DirectlyModifiableTopLevelItemGroup) container;

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -73,6 +73,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -903,11 +904,11 @@ public Descriptor getDescriptorByName(String className) {
     
     public Object getDynamic(String token) {
         for(Action action: getTransientActions()){
-            if(action.getUrlName().equals(token))
+            if(Objects.equals(action.getUrlName(), token))
                 return action;
         }
         for(Action action: getPropertyActions()){
-            if(action.getUrlName().equals(token))
+            if(Objects.equals(action.getUrlName(), token))
                 return action;
         }
         return null;

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -552,7 +552,7 @@ public Object getDynamic(String token) {
         for (Action a : getActions()) {
             String url = a.getUrlName();
             if (url==null)  continue;
-            if(a.getUrlName().equals(token))
+            if (url.equals(token))
                 return a;
         }
         return null;

File: core/src/main/java/hudson/model/TextParameterValue.java
Patch:
@@ -26,7 +26,7 @@
 import org.kohsuke.stapler.DataBoundConstructor;
 
 /**
- * @author Rafa de la Torre <rtorre@tuenti.com>
+ * @author <a href="mailto:rtorre@tuenti.com">Rafa de la Torre</a>
  */
 public class TextParameterValue extends StringParameterValue {
 

File: core/src/main/java/hudson/util/ProcessKillingVeto.java
Patch:
@@ -44,7 +44,7 @@
  * 
  * @since TODO
  * 
- * @author Daniel Weber <daniel.weber.dev@gmail.com>
+ * @author <a href="mailto:daniel.weber.dev@gmail.com">Daniel Weber</a>
  */
 public abstract class ProcessKillingVeto implements ExtensionPoint {
 

File: core/src/test/java/hudson/FilePathTest.java
Patch:
@@ -342,7 +342,7 @@ private FilePath createFilePath(final File base, final String... path) throws IO
     }
             
     /**
-     * Checks that big files (>8GB) can be archived and then unpacked.
+     * Checks that big files (greater than 8GB) can be archived and then unpacked.
      * This test is disabled by default due the impact on RAM.
      * The actual file size limit is 8589934591 bytes.
      * @throws Exception test failure

File: core/src/test/java/hudson/model/FileParameterValueTest.java
Patch:
@@ -33,7 +33,7 @@
 
 /**
  * Test for {@link FileParameterValue}.
- * @author Oleg Nenashev <o.v.nenashev@gmail.com>
+ * @author Oleg Nenashev
  */
 public class FileParameterValueTest {
     

File: core/src/test/java/hudson/os/DCOMSandbox.java
Patch:
@@ -14,14 +14,14 @@
  * creating an instance.
  *
  * <p>
- * It turns out that the bogus credential works with ServerAlive.  The protocol specification
- * <http://download.microsoft.com/download/a/e/6/ae6e4142-aa58-45c6-8dcf-a657e5900cd3/%5BMS-DCOM%5D.pdf>
+ * It turns out that the bogus credential works with ServerAlive.  The
+ * <a href="http://download.microsoft.com/download/a/e/6/ae6e4142-aa58-45c6-8dcf-a657e5900cd3/%5BMS-DCOM%5D.pdf">protocol specification</a>
  * explicitly says this RPC must not check the credential.
  *
  * <p>
  * The feature in question of Windows is called "ForceGuest", and it's recorded in the registry at
  * HKLM\SYSTEM\CurrentControlSet\Control\LSA\forceguest (0=classic, 1=forceguest).
- * <http://support.microsoft.com/kb/290403>
+ * <a href="http://support.microsoft.com/kb/290403">KB 290403</a>
  *
  * @author Kohsuke Kawaguchi
  */

File: core/src/test/java/jenkins/widgets/HistoryPageFilterTest.java
Patch:
@@ -59,7 +59,7 @@ public void test_latest_empty_page() {
     }
 
     /**
-     * Latest/top page where total number of items < the max page size.
+     * Latest/top page where total number of items less than the max page size.
      */
     @Test
     public void test_latest_partial_page() throws IOException {
@@ -88,7 +88,7 @@ public void test_latest_partial_page() throws IOException {
     }
 
     /**
-     * Latest/top page where total number of items > the max page size.
+     * Latest/top page where total number of items greater than the max page size.
      */
     @Test
     public void test_latest_longer_list() throws IOException {

File: test/src/test/java/hudson/ProcStarterTest.java
Patch:
@@ -40,7 +40,7 @@
 
 /**
  * Contains tests for {@link ProcStarter} class.
- * @author Oleg Nenashev <nenashev@synopsys.com>, Synopsys Inc.
+ * @author Oleg Nenashev, Synopsys Inc.
  * @since 1.568
  */
 public class ProcStarterTest {

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -679,8 +679,7 @@ public void dynamicLoad(File arc) throws IOException, InterruptedException, Rest
         // so existing plugins can't be depending on this newly deployed one.
 
         plugins.add(p);
-        if (p.isActive())
-            activePlugins.add(p);
+        activePlugins.add(p);
         synchronized (((UberClassLoader) uberClassLoader).loaded) {
             ((UberClassLoader) uberClassLoader).loaded.clear();
         }

File: core/src/main/java/hudson/model/TextParameterValue.java
Patch:
@@ -26,7 +26,7 @@
 import org.kohsuke.stapler.DataBoundConstructor;
 
 /**
- * @author Rafa de la Torre <rtorre@tuenti.com>
+ * @author <a href="mailto:rtorre@tuenti.com">Rafa de la Torre</a>
  */
 public class TextParameterValue extends StringParameterValue {
 

File: core/src/main/java/hudson/util/ProcessKillingVeto.java
Patch:
@@ -44,7 +44,7 @@
  * 
  * @since TODO
  * 
- * @author Daniel Weber <daniel.weber.dev@gmail.com>
+ * @author <a href="mailto:daniel.weber.dev@gmail.com">Daniel Weber</a>
  */
 public abstract class ProcessKillingVeto implements ExtensionPoint {
 

File: core/src/test/java/hudson/FilePathTest.java
Patch:
@@ -342,7 +342,7 @@ private FilePath createFilePath(final File base, final String... path) throws IO
     }
             
     /**
-     * Checks that big files (>8GB) can be archived and then unpacked.
+     * Checks that big files (greater than 8GB) can be archived and then unpacked.
      * This test is disabled by default due the impact on RAM.
      * The actual file size limit is 8589934591 bytes.
      * @throws Exception test failure

File: core/src/test/java/hudson/model/FileParameterValueTest.java
Patch:
@@ -33,7 +33,7 @@
 
 /**
  * Test for {@link FileParameterValue}.
- * @author Oleg Nenashev <o.v.nenashev@gmail.com>
+ * @author Oleg Nenashev
  */
 public class FileParameterValueTest {
     

File: core/src/test/java/jenkins/widgets/HistoryPageFilterTest.java
Patch:
@@ -59,7 +59,7 @@ public void test_latest_empty_page() {
     }
 
     /**
-     * Latest/top page where total number of items < the max page size.
+     * Latest/top page where total number of items less than the max page size.
      */
     @Test
     public void test_latest_partial_page() throws IOException {
@@ -88,7 +88,7 @@ public void test_latest_partial_page() throws IOException {
     }
 
     /**
-     * Latest/top page where total number of items > the max page size.
+     * Latest/top page where total number of items greater than the max page size.
      */
     @Test
     public void test_latest_longer_list() throws IOException {

File: test/src/test/java/hudson/ProcStarterTest.java
Patch:
@@ -40,7 +40,7 @@
 
 /**
  * Contains tests for {@link ProcStarter} class.
- * @author Oleg Nenashev <nenashev@synopsys.com>, Synopsys Inc.
+ * @author Oleg Nenashev, Synopsys Inc.
  * @since 1.568
  */
 public class ProcStarterTest {

File: core/src/test/java/hudson/os/DCOMSandbox.java
Patch:
@@ -14,14 +14,14 @@
  * creating an instance.
  *
  * <p>
- * It turns out that the bogus credential works with ServerAlive.  The protocol specification
- * <http://download.microsoft.com/download/a/e/6/ae6e4142-aa58-45c6-8dcf-a657e5900cd3/%5BMS-DCOM%5D.pdf>
+ * It turns out that the bogus credential works with ServerAlive.  The
+ * <a href="http://download.microsoft.com/download/a/e/6/ae6e4142-aa58-45c6-8dcf-a657e5900cd3/%5BMS-DCOM%5D.pdf">protocol specification</a>
  * explicitly says this RPC must not check the credential.
  *
  * <p>
  * The feature in question of Windows is called "ForceGuest", and it's recorded in the registry at
  * HKLM\SYSTEM\CurrentControlSet\Control\LSA\forceguest (0=classic, 1=forceguest).
- * <http://support.microsoft.com/kb/290403>
+ * <a href="http://support.microsoft.com/kb/290403">KB 290403</a>
  *
  * @author Kohsuke Kawaguchi
  */

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -679,8 +679,7 @@ public void dynamicLoad(File arc) throws IOException, InterruptedException, Rest
         // so existing plugins can't be depending on this newly deployed one.
 
         plugins.add(p);
-        if (p.isActive())
-            activePlugins.add(p);
+        activePlugins.add(p);
         synchronized (((UberClassLoader) uberClassLoader).loaded) {
             ((UberClassLoader) uberClassLoader).loaded.clear();
         }

File: core/src/main/java/hudson/cli/SetBuildDescriptionCommand.java
Patch:
@@ -28,6 +28,9 @@ public String getShortDescription() {
 
     protected int run() throws Exception {
     	Run run = job.getBuildByNumber(number);
+        if (run == null)
+            throw new IllegalArgumentException("No such build #"+number);
+
         run.checkPermission(Run.UPDATE);
 
         if ("=".equals(description)) {

File: core/src/main/java/hudson/cli/SetBuildDescriptionCommand.java
Patch:
@@ -28,6 +28,9 @@ public String getShortDescription() {
 
     protected int run() throws Exception {
     	Run run = job.getBuildByNumber(number);
+        if (run == null)
+            throw new IllegalArgumentException("No such build #"+number);
+
         run.checkPermission(Run.UPDATE);
 
         if ("=".equals(description)) {

File: core/src/test/java/hudson/BulkChangeTest.java
Patch:
@@ -98,10 +98,10 @@ public void bulkChange() throws Exception {
     @Test
     public void nestedBulkChange() throws Exception {
         Point pt = new Point();
-        Point _ = new Point();
+        Point pt2 = new Point();
         BulkChange bc1 = new BulkChange(pt);
         try {
-            BulkChange bc2 = new BulkChange(_);
+            BulkChange bc2 = new BulkChange(pt2);
             try {
                 BulkChange bc3 = new BulkChange(pt);
                 try {

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -573,7 +573,7 @@ public boolean hasLicensesXml() {
                         obsoleteDependencies.add(dependency.getShortName() + "(" + dependency.getVersion() + " < " + d.version + ")");
                     }
                 } else {
-                    disabledDependencies.add(d.toString());
+                    disabledDependencies.add(d.shortName);
                 }
 
             }
@@ -600,7 +600,7 @@ public boolean hasLicensesXml() {
         if (!disabledDependencies.isEmpty()) {
             boolean plural = disabledDependencies.size() > 1;
             messageBuilder.append(plural ? "Dependencies " : "Dependency ")
-                    .append(Util.join(missingDependencies, ", "))
+                    .append(Util.join(disabledDependencies, ", "))
                     .append(" ").append(plural ? "are" : "is")
                     .append(" disabled. ");
         }

File: core/src/main/java/hudson/search/SearchResult.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.List;
 
 /**
- * @author <a hef="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
+ * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
 public interface SearchResult extends List<SuggestedItem> {
 

File: core/src/test/java/hudson/model/ItemsTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.mockito.Mockito.*;
 
 /**
- * @author: <a hef="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
+ * @author: <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
 public class ItemsTest {
 

File: core/src/main/java/hudson/search/SearchResult.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.List;
 
 /**
- * @author <a hef="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
+ * @author <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
 public interface SearchResult extends List<SuggestedItem> {
 

File: core/src/test/java/hudson/model/ItemsTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.mockito.Mockito.*;
 
 /**
- * @author: <a hef="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
+ * @author: <a href="mailto:nicolas.deloof@gmail.com">Nicolas De Loof</a>
  */
 public class ItemsTest {
 

File: core/src/main/java/jenkins/install/InstallUtil.java
Patch:
@@ -211,15 +211,15 @@ static void saveLastExecVersion(@Nonnull String version) {
     }
 
     static File getConfigFile() {
-        return new File(Jenkins.getActiveInstance().getRootDir(), "config.xml");
+        return new File(Jenkins.getInstance().getRootDir(), "config.xml");
     }
 
     static File getLastExecVersionFile() {
-        return new File(Jenkins.getActiveInstance().getRootDir(), ".last_exec_version");
+        return new File(Jenkins.getInstance().getRootDir(), "jenkins.install.InstallUtil.lastExecVersion");
     }
 
     static File getInstallingPluginsFile() {
-        return new File(Jenkins.getActiveInstance().getRootDir(), ".installing_plugins");
+        return new File(Jenkins.getInstance().getRootDir(), "jenkins.install.InstallUtil.installingPlugins");
     }
 
     private static String getCurrentExecVersion() {

File: core/src/main/java/jenkins/install/UpgradeWizard.java
Patch:
@@ -47,7 +47,7 @@ public class UpgradeWizard extends PageDecorator {
      * This file records the vesrion number that the installation has upgraded to.
      */
     /*package*/ File getStateFile() {
-        return new File(Jenkins.getInstance().getRootDir(),"upgraded");
+        return new File(Jenkins.getInstance().getRootDir(),"jenkins.install.UpgradeWizard.state");
     }
 
     public UpgradeWizard() throws IOException {

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -79,8 +79,10 @@ public SetupWizard(Jenkins j) throws IOException, InterruptedException {
                 // JENKINS-33599 - write to a file in the jenkins home directory
                 // most native packages of Jenkins creates a machine user account 'jenkins' to run Jenkins,
                 // and use group 'jenkins' for admins. So we allo groups to read this file
-                iapf.write(randomUUID + System.lineSeparator(), "UTF-8");
+                iapf.touch(System.currentTimeMillis());
                 iapf.chmod(0640);
+                iapf.write(randomUUID + System.lineSeparator(), "UTF-8");
+                
 
                 // Lock Jenkins down:
                 FullControlOnceLoggedInAuthorizationStrategy authStrategy = new FullControlOnceLoggedInAuthorizationStrategy();

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -489,7 +489,8 @@ public void dynamicLoad(File arc) throws IOException, InterruptedException, Rest
         // so existing plugins can't be depending on this newly deployed one.
 
         plugins.add(p);
-        activePlugins.add(p);
+        if (p.isActive())
+            activePlugins.add(p);
         synchronized (((UberClassLoader) uberClassLoader).loaded) {
             ((UberClassLoader) uberClassLoader).loaded.clear();
         }

File: core/src/main/java/hudson/security/csrf/CrumbIssuerDescriptor.java
Patch:
@@ -64,7 +64,7 @@ public String getCrumbRequestField() {
      */
     public void setCrumbRequestField(String requestField) {
         if (Util.fixEmptyAndTrim(requestField) == null) {
-            crumbRequestField = ".crumb";
+            crumbRequestField = CrumbIssuer.DEFAULT_CRUMB_NAME;
         } else {
             crumbRequestField = requestField;
         }

File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java
Patch:
@@ -124,7 +124,7 @@ public static final class DescriptorImpl extends CrumbIssuerDescriptor<DefaultCr
         private final static HexStringConfidentialKey CRUMB_SALT = new HexStringConfidentialKey(Jenkins.class,"crumbSalt",16);
         
         public DescriptorImpl() {
-            super(CRUMB_SALT.get(), System.getProperty("hudson.security.csrf.requestfield", ".crumb"));
+            super(CRUMB_SALT.get(), System.getProperty("hudson.security.csrf.requestfield", CrumbIssuer.DEFAULT_CRUMB_NAME));
             load();
         }
 

File: test/src/test/java/lib/form/RowSetTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
 import hudson.model.RootAction;
+import hudson.security.csrf.CrumbIssuer;
 import junit.framework.Assert;
 import net.sf.json.JSONObject;
 import org.junit.Rule;
@@ -27,12 +28,12 @@ public void json() throws Exception {
     public static class Subject implements RootAction {
         public void doSubmitTest1(StaplerRequest req) throws Exception {
             JSONObject json = req.getSubmittedForm();
-            json.remove("crumb");
+            json.remove(CrumbIssuer.DEFAULT_CRUMB_NAME);
             System.out.println(json);
 
             JSONObject expected = JSONObject.fromObject(
                     "{'a':'aaa','b':'bbb','c':{'c1':'ccc1','c2':'ccc2'},'d':{'d1':'d1','d2':'d2'}}");
-            Assert.assertEquals(json,expected);
+            Assert.assertEquals(expected, json);
         }
 
         @Override

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -342,7 +342,7 @@ public class Jenkins extends AbstractCIBase implements DirectlyModifiableTopLeve
     /**
      * The Jenkins instance startup type i.e. NEW, UPGRADE etc
      */
-    private transient InstallState installState = InstallState.NEW;
+    private transient InstallState installState = InstallState.UNKNOWN;
     
     /**
      * If we're in the process of an initial setup, 

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -71,7 +71,7 @@ public SetupWizard(Jenkins j) throws IOException, InterruptedException {
                 // JENKINS-33599 - write to a file in the jenkins home directory
                 // most native packages of Jenkins creates a machine user account 'jenkins' to run Jenkins,
                 // and use group 'jenkins' for admins. So we allo groups to read this file
-                iapf.write(randomUUID, "UTF-8");
+                iapf.write(randomUUID + System.lineSeparator(), "UTF-8");
                 iapf.chmod(0640);
 
                 // Lock Jenkins down:

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -1193,7 +1193,6 @@ public void run() {
                     }
 			updateCenter.persistInstallStatus();
                     jenkins.setInstallState(InstallState.INITIAL_PLUGINS_INSTALLING.getNextState());
-                    InstallUtil.saveLastExecVersion();
                 }
             }.start();
         }

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -71,7 +71,7 @@ public SetupWizard(Jenkins j) throws IOException, InterruptedException {
                 // JENKINS-33599 - write to a file in the jenkins home directory
                 // most native packages of Jenkins creates a machine user account 'jenkins' to run Jenkins,
                 // and use group 'jenkins' for admins. So we allo groups to read this file
-                iapf.write(randomUUID, "UTF-8");
+                iapf.write(randomUUID + System.lineSeparator(), "UTF-8");
                 iapf.chmod(0640);
 
                 // Lock Jenkins down:

File: test/src/test/java/lib/form/RowSetTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
 import hudson.model.RootAction;
+import hudson.security.csrf.CrumbIssuer;
 import junit.framework.Assert;
 import net.sf.json.JSONObject;
 import org.junit.Rule;
@@ -27,12 +28,12 @@ public void json() throws Exception {
     public static class Subject implements RootAction {
         public void doSubmitTest1(StaplerRequest req) throws Exception {
             JSONObject json = req.getSubmittedForm();
-            json.remove("crumb");
+            json.remove(CrumbIssuer.DEFAULT_CRUMB_NAME);
             System.out.println(json);
 
             JSONObject expected = JSONObject.fromObject(
                     "{'a':'aaa','b':'bbb','c':{'c1':'ccc1','c2':'ccc2'},'d':{'d1':'d1','d2':'d2'}}");
-            Assert.assertEquals(json,expected);
+            Assert.assertEquals(expected, json);
         }
 
         @Override

File: core/src/main/java/hudson/security/csrf/CrumbIssuer.java
Patch:
@@ -43,6 +43,7 @@
 public abstract class CrumbIssuer implements Describable<CrumbIssuer>, ExtensionPoint {
 
     private static final String CRUMB_ATTRIBUTE = CrumbIssuer.class.getName() + "_crumb";
+    public static final String DEFAULT_CRUMB_NAME = "Jenkins-Crumb";
 
     /**
      * Get the name of the request parameter the crumb will be stored in. Exposed
@@ -199,7 +200,7 @@ public static class RestrictedApi extends Api {
             } else if ("concat(//crumbRequestField,\":\",//crumb)".equals(xpath)) { // new FullDuplexHttpStream; Main
                 text = ci.getCrumbRequestField() + ':' + ci.getCrumb();
             } else if ("concat(//crumbRequestField,'=',//crumb)".equals(xpath)) { // NetBeans
-                if (ci.getCrumbRequestField().startsWith(".")) {
+                if (ci.getCrumbRequestField().startsWith(".") || ci.getCrumbRequestField().contains("-")) {
                     text = ci.getCrumbRequestField() + '=' + ci.getCrumb();
                 } else {
                     text = null;

File: core/src/main/java/hudson/security/csrf/CrumbIssuerDescriptor.java
Patch:
@@ -64,7 +64,7 @@ public String getCrumbRequestField() {
      */
     public void setCrumbRequestField(String requestField) {
         if (Util.fixEmptyAndTrim(requestField) == null) {
-            crumbRequestField = ".crumb";
+            crumbRequestField = CrumbIssuer.DEFAULT_CRUMB_NAME;
         } else {
             crumbRequestField = requestField;
         }

File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java
Patch:
@@ -124,7 +124,7 @@ public static final class DescriptorImpl extends CrumbIssuerDescriptor<DefaultCr
         private final static HexStringConfidentialKey CRUMB_SALT = new HexStringConfidentialKey(Jenkins.class,"crumbSalt",16);
         
         public DescriptorImpl() {
-            super(CRUMB_SALT.get(), System.getProperty("hudson.security.csrf.requestfield", ".crumb"));
+            super(CRUMB_SALT.get(), System.getProperty("hudson.security.csrf.requestfield", CrumbIssuer.DEFAULT_CRUMB_NAME));
             load();
         }
 

File: core/src/main/java/hudson/util/ArgumentListBuilder.java
Patch:
@@ -317,8 +317,8 @@ public ArgumentListBuilder toWindowsCommand(boolean escapeVars) {
     	ArgumentListBuilder windowsCommand = new ArgumentListBuilder().add("cmd.exe", "/C");
         boolean quoted, percent;
         for (int i = 0; i < args.size(); i++) {
-        	StringBuilder quotedArgs = new StringBuilder();
-        	String arg = args.get(i);
+            StringBuilder quotedArgs = new StringBuilder();
+            String arg = args.get(i);
             quoted = percent = false;
             for (int j = 0; j < arg.length(); j++) {
                 char c = arg.charAt(j);

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -489,7 +489,8 @@ public void dynamicLoad(File arc) throws IOException, InterruptedException, Rest
         // so existing plugins can't be depending on this newly deployed one.
 
         plugins.add(p);
-        activePlugins.add(p);
+        if (p.isActive())
+            activePlugins.add(p);
         synchronized (((UberClassLoader) uberClassLoader).loaded) {
             ((UberClassLoader) uberClassLoader).loaded.clear();
         }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -178,6 +178,7 @@
 import hudson.util.Memoizer;
 import hudson.util.MultipartFormDataParser;
 import hudson.util.NamingThreadFactory;
+import hudson.util.PluginServletFilter;
 import hudson.util.RemotingDiagnostics;
 import hudson.util.RemotingDiagnostics.HeapDump;
 import hudson.util.TextFile;
@@ -2882,6 +2883,8 @@ public void run() {
                 LOGGER.log(Level.WARNING, "Failed to shut down properly",e);
             }
 
+        PluginServletFilter.cleanUp();
+
         LogFactory.releaseAll();
 
         theInstance = null;

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1925,7 +1925,7 @@ public static void advertiseHeaders(HttpServletResponse rsp) {
 
             TcpSlaveAgentListener tal = j.tcpSlaveAgentListener;
             if (tal !=null) {
-                int p = TcpSlaveAgentListener.CLI_PORT !=null ? TcpSlaveAgentListener.CLI_PORT : tal.getPort();
+                int p = tal.getAdvertisedPort();
                 rsp.setIntHeader("X-Hudson-CLI-Port", p);
                 rsp.setIntHeader("X-Jenkins-CLI-Port", p);
                 rsp.setIntHeader("X-Jenkins-CLI2-Port", p);

File: core/src/main/java/jenkins/install/InstallUtil.java
Patch:
@@ -45,6 +45,7 @@
 import hudson.Functions;
 import hudson.model.UpdateCenter.DownloadJob.InstallationStatus;
 import hudson.model.UpdateCenter.DownloadJob.Installing;
+import hudson.security.SecurityRealm;
 import hudson.model.UpdateCenter.InstallationJob;
 import hudson.model.UpdateCenter.UpdateCenterJob;
 import hudson.util.VersionNumber;
@@ -88,7 +89,8 @@ public static InstallState getInstallState() {
             // Edge case: used Jenkins 1 but did not save the system config page,
             // the version is not persisted and returns 1.0, so try to check if
             // they actually did anything
-            if (!Jenkins.getInstance().getItemMap().isEmpty()) {
+            if (!Jenkins.getInstance().getItemMap().isEmpty()
+                    || Jenkins.getInstance().getSecurityRealm() != SecurityRealm.NO_AUTHENTICATION) {
                 return InstallState.UPGRADE;
             }
             return InstallState.NEW;

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1925,7 +1925,7 @@ public static void advertiseHeaders(HttpServletResponse rsp) {
 
             TcpSlaveAgentListener tal = j.tcpSlaveAgentListener;
             if (tal !=null) {
-                int p = TcpSlaveAgentListener.CLI_PORT !=null ? TcpSlaveAgentListener.CLI_PORT : tal.getPort();
+                int p = tal.getAdvertisedPort();
                 rsp.setIntHeader("X-Hudson-CLI-Port", p);
                 rsp.setIntHeader("X-Jenkins-CLI-Port", p);
                 rsp.setIntHeader("X-Jenkins-CLI2-Port", p);

File: test/src/test/java/hudson/util/BootFailureTest.java
Patch:
@@ -154,6 +154,8 @@ public static class PauseBoot extends ItemListener {
         @Override
         public void onLoaded() {
             wa.contextDestroyed(null);
+            // make the Jenkins.<init> thread abort
+            throw new Error();
         }
     }
 

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -113,7 +113,7 @@ public SetupWizard(Jenkins j) throws IOException, InterruptedException {
                 + "*************************************************************" + ls
                 + "*************************************************************" + ls
                 + ls
-                + "Jenkins initial setup is required. An admin user has been created and"
+                + "Jenkins initial setup is required. An admin user has been created and "
                 + "a password generated." + ls
                 + "Please use the following password to proceed to installation:" + ls
                 + ls

File: core/src/main/java/jenkins/install/SetupWizard.java
Patch:
@@ -113,7 +113,7 @@ public SetupWizard(Jenkins j) throws IOException, InterruptedException {
                 + "*************************************************************" + ls
                 + "*************************************************************" + ls
                 + ls
-                + "Jenkins initial setup is required. An admin user has been created and"
+                + "Jenkins initial setup is required. An admin user has been created and "
                 + "a password generated." + ls
                 + "Please use the following password to proceed to installation:" + ls
                 + ls

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -1135,13 +1135,11 @@ public String getPluginRepositoryBaseUrl() {
         private void testConnection(URL url) throws IOException {
             try {
                 URLConnection connection = (URLConnection) ProxyConfiguration.open(url);
-                connection.setConnectTimeout(20000); // JENKINS-33557 lower connection test timeout (20 sec)
-                connection.connect();
 
                 if(connection instanceof HttpURLConnection) {
                     int responseCode = ((HttpURLConnection)connection).getResponseCode();
                     if(HttpURLConnection.HTTP_OK != responseCode) {
-                        throw new HttpRetryException("Invalid response code (" + responseCode + ") from URL: " + url.toString(), responseCode);
+                        throw new HttpRetryException("Invalid response code (" + responseCode + ") from URL: " + url, responseCode);
                     }
                 } else {
                     Util.copyStreamAndClose(connection.getInputStream(),new NullOutputStream());

File: core/src/main/java/hudson/model/ManageJenkinsAction.java
Patch:
@@ -35,7 +35,7 @@
 public class ManageJenkinsAction implements RootAction {
     public String getIconFileName() {
         if (Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER))
-            return "setting.png";
+            return "gear2.png";
         else
             return null;
     }

File: core/src/main/java/jenkins/management/ConfigureLink.java
Patch:
@@ -35,7 +35,7 @@ public class ConfigureLink extends ManagementLink {
 
     @Override
     public String getIconFileName() {
-        return "setting.png";
+        return "gear2.png";
     }
 
     public String getDisplayName() {

File: core/src/main/java/jenkins/model/GlobalConfigurationCategory.java
Patch:
@@ -4,8 +4,6 @@
 import hudson.ExtensionList;
 import hudson.ExtensionPoint;
 import hudson.model.ModelObject;
-import hudson.security.*;
-import hudson.security.Messages;
 
 /**
  * Grouping of related {@link GlobalConfiguration}s.
@@ -73,11 +71,12 @@ public String getDisplayName() {
     public static class Security extends GlobalConfigurationCategory {
         @Override
         public String getShortDescription() {
-            return Messages.GlobalSecurityConfiguration_Description();
+            return hudson.security.Messages.GlobalSecurityConfiguration_Description();
         }
 
         public String getDisplayName() {
             return hudson.security.Messages.GlobalSecurityConfiguration_DisplayName();
         }
     }
+
 }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3354,8 +3354,6 @@ public synchronized void doConfigSubmit( StaplerRequest req, StaplerResponse rsp
 
             systemMessage = Util.nullify(req.getParameter("system_message"));
 
-            setJDKs(req.bindJSONToList(JDK.class, json.get("jdks")));
-
             boolean result = true;
             for (Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfigUnclassified())
                 result &= configureDescriptor(req,json,d);

File: test/src/test/java/hudson/tasks/MavenTest.java
Patch:
@@ -159,7 +159,7 @@ public class MavenTest {
      * Simulates the addition of the new Maven via UI and makes sure it works.
      */
     @Test public void globalConfigAjax() throws Exception {
-        HtmlPage p = j.createWebClient().goTo("configure");
+        HtmlPage p = j.createWebClient().goTo("configureTools");
         HtmlForm f = p.getFormByName("config");
         HtmlButton b = j.getButtonByCaption(f, "Add Maven");
         b.click();

File: test/src/test/java/hudson/tools/JDKInstallerTest.java
Patch:
@@ -94,7 +94,7 @@ public void configRoundtrip() throws Exception {
         j.jenkins.getJDKs().add(new JDK("test",tmp.getRoot().getAbsolutePath(), Arrays.asList(
                 new InstallSourceProperty(Arrays.<ToolInstaller>asList(installer)))));
 
-        j.submit(j.createWebClient().goTo("configure").getFormByName("config"));
+        j.submit(j.createWebClient().goTo("configureTools").getFormByName("config"));
 
         JDK jdk = j.jenkins.getJDK("test");
         InstallSourceProperty isp = jdk.getProperties().get(InstallSourceProperty.class);

File: test/src/test/java/hudson/model/UpdateCenterConnectionStatusTest.java
Patch:
@@ -99,7 +99,7 @@ public void test_states_internet_failed() {
         job.run();
 
         Assert.assertEquals(ConnectionStatus.FAILED, job.connectionStates.get(ConnectionStatus.INTERNET));
-        Assert.assertEquals(ConnectionStatus.UNCHECKED, job.connectionStates.get(ConnectionStatus.UPDATE_SITE));
+        Assert.assertEquals(ConnectionStatus.OK, job.connectionStates.get(ConnectionStatus.UPDATE_SITE));
     }
 
     @Test

File: core/src/main/java/hudson/tasks/Maven.java
Patch:
@@ -250,8 +250,6 @@ public String invoke(File ws, VirtualChannel channel) throws IOException {
                 seed = new File(ws,"project.xml").exists() ? "maven" : "mvn";
             }
 
-            if(Functions.isWindows())
-                seed += ".bat";
             return seed;
         }
     }

File: core/src/main/java/hudson/tasks/Maven.java
Patch:
@@ -250,8 +250,6 @@ public String invoke(File ws, VirtualChannel channel) throws IOException {
                 seed = new File(ws,"project.xml").exists() ? "maven" : "mvn";
             }
 
-            if(Functions.isWindows())
-                seed += ".bat";
             return seed;
         }
     }

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1540,7 +1540,7 @@ public static String joinPath(String... components) {
      */
     public static String getActionUrl(String itUrl,Action action) {
         String urlName = action.getUrlName();
-        if(urlName==null)   return null;    // to avoid NPE and fail to render the whole page
+        if(urlName==null)   return null;    // Should not be displayed
         try {
             if (new URI(urlName).isAbsolute()) {
                 return urlName;

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -73,6 +73,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -903,11 +904,11 @@ public Descriptor getDescriptorByName(String className) {
     
     public Object getDynamic(String token) {
         for(Action action: getTransientActions()){
-            if(action.getUrlName().equals(token))
+            if(Objects.equals(action.getUrlName(), token))
                 return action;
         }
         for(Action action: getPropertyActions()){
-            if(action.getUrlName().equals(token))
+            if(Objects.equals(action.getUrlName(), token))
                 return action;
         }
         return null;

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -544,7 +544,7 @@ public Object getDynamic(String token) {
         for (Action a : getActions()) {
             String url = a.getUrlName();
             if (url==null)  continue;
-            if(a.getUrlName().equals(token))
+            if (url.equals(token))
                 return a;
         }
         return null;

File: test/src/test/java/hudson/model/ManagementLinkTest.java
Patch:
@@ -35,9 +35,7 @@
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.JenkinsRule.WebClient;
 import org.jvnet.hudson.test.TestExtension;
-import org.xml.sax.SAXException;
 
-import java.io.IOException;
 import java.util.List;
 
 /**

File: test/src/test/java/hudson/tools/JDKInstallerTest.java
Patch:
@@ -94,7 +94,7 @@ public void configRoundtrip() throws Exception {
         j.jenkins.getJDKs().add(new JDK("test",tmp.getRoot().getAbsolutePath(), Arrays.asList(
                 new InstallSourceProperty(Arrays.<ToolInstaller>asList(installer)))));
 
-        j.submit(j.createWebClient().goTo("configure").getFormByName("config"));
+        j.submit(j.createWebClient().goTo("configureTools").getFormByName("config"));
 
         JDK jdk = j.jenkins.getJDK("test");
         InstallSourceProperty isp = jdk.getProperties().get(InstallSourceProperty.class);

File: test/src/test/java/hudson/tasks/MavenTest.java
Patch:
@@ -159,7 +159,7 @@ public class MavenTest {
      * Simulates the addition of the new Maven via UI and makes sure it works.
      */
     @Test public void globalConfigAjax() throws Exception {
-        HtmlPage p = j.createWebClient().goTo("configure");
+        HtmlPage p = j.createWebClient().goTo("configureTools");
         HtmlForm f = p.getFormByName("config");
         HtmlButton b = j.getButtonByCaption(f, "Add Maven");
         b.click();

File: core/src/main/java/hudson/tasks/BuildTrigger.java
Patch:
@@ -367,6 +367,8 @@ public boolean showEvenIfUnstableOption(@CheckForNull Class<? extends AbstractPr
          * Form validation method.
          */
         public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {
+            // JENKINS-32525: Check that it behaves gracefully for an unknown context
+            if (project == null) return FormValidation.ok(Messages.BuildTrigger_ok_ancestor_is_null());
             // Require CONFIGURE permission on this project
             if(!project.hasPermission(Item.CONFIGURE))      return FormValidation.ok();
 

File: core/src/main/java/hudson/tools/DownloadFromUrlInstaller.java
Patch:
@@ -136,7 +136,7 @@ public Downloadable createDownloadable() {
                 final DownloadFromUrlInstaller.DescriptorImpl delegate = (DownloadFromUrlInstaller.DescriptorImpl)this;
                 return new Downloadable(getId()) {
                     public JSONObject reduce(List<JSONObject> jsonList) {
-                        if (isDefualtSchema(jsonList)) {
+                        if (isDefaultSchema(jsonList)) {
                             return delegate.reduce(jsonList);
                         } else {
                             //if it's not default schema fall back to the super class implementation
@@ -153,7 +153,7 @@ public JSONObject reduce(List<JSONObject> jsonList) {
          * @param jsonList the list of Update centers json files
          * @return true if the schema is the default one (id, name, url), false otherwise
          */
-        private boolean isDefualtSchema(List<JSONObject> jsonList) {
+        private boolean isDefaultSchema(List<JSONObject> jsonList) {
             JSONObject jsonToolInstallerList = jsonList.get(0);
             ToolInstallerList toolInstallerList = (ToolInstallerList) JSONObject.toBean(jsonToolInstallerList, ToolInstallerList.class);
 

File: core/src/main/java/hudson/model/queue/WorkUnit.java
Patch:
@@ -71,6 +71,9 @@ public final class WorkUnit {
 
     public void setExecutor(@CheckForNull Executor e) {
         executor = e;
+        if (e != null) {
+            context.future.addExecutor(e);
+        }
     }
 
     /**

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -1021,9 +1021,10 @@ private void launchTcpSlaveAgentListener() throws IOException {
                         }
                     }
                 } catch (BindException e) {
+                    LOGGER.log(Level.WARNING, String.format("Failed to listen to incoming slave connections through JNLP port %s. Change the JNLP port number", slaveAgentPort), e);
                     new AdministrativeError(administrativeMonitorId,
-                            "Failed to listen to incoming slave connection",
-                            "Failed to listen to incoming slave connection. <a href='configure'>Change the port number</a> to solve the problem.", e);
+                            "Failed to listen to incoming slave connections through JNLP",
+                            "Failed to listen to incoming slave connections through JNLP. <a href='configureSecurity'>Change the JNLP port number</a> to solve the problem.", e);
                 }
             }
         }

File: core/src/main/java/jenkins/model/item_category/ItemCategoryConfigurator.java
Patch:
@@ -114,7 +114,7 @@ public static String getDescription(@Nonnull TopLevelItemDescriptor descriptor)
     protected abstract String getEffectiveClazzFor(@Nonnull TopLevelItemDescriptor descriptor);
 
     /**
-     * Finds the weight specified by the first configurator.
+     * Finds the effective clazz specified by the first configurator.
      * If none can be found a empty string with {@code descriptor.clazz.getName();} is returned. {@see DefaultConfigurator#getEffectiveClazzFor}.
      *
      * @param descriptor the item to categorize.

File: core/src/main/java/hudson/init/impl/InstallUncaughtExceptionHandler.java
Patch:
@@ -64,7 +64,7 @@ public void uncaughtException(Thread t, Throwable ex) {
             // if this was an OutOfMemoryError then all bets about logging are off - but in the absence of anything else...
             LOGGER.log(Level.SEVERE,
                        "A thread (" + t.getName() + '/' + t.getId()
-                                     + ") died unexepectedly due to an uncaught exception, this may leave your Jenkins in a bad way and is usually indicitive of a bug in the code.",
+                                     + ") died unexpectedly due to an uncaught exception, this may leave your Jenkins in a bad way and is usually indicative of a bug in the code.",
                        ex);
         }
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -1001,9 +1001,10 @@ private void launchTcpSlaveAgentListener() throws IOException {
                         }
                     }
                 } catch (BindException e) {
+                    LOGGER.log(Level.WARNING, String.format("Failed to listen to incoming slave connections through JNLP port %s. Change the JNLP port number", slaveAgentPort), e);
                     new AdministrativeError(administrativeMonitorId,
-                            "Failed to listen to incoming slave connection",
-                            "Failed to listen to incoming slave connection. <a href='configure'>Change the port number</a> to solve the problem.", e);
+                            "Failed to listen to incoming slave connections through JNLP",
+                            "Failed to listen to incoming slave connections through JNLP. <a href='configureSecurity'>Change the JNLP port number</a> to solve the problem.", e);
                 }
             }
         }

File: core/src/main/java/hudson/ExtensionList.java
Patch:
@@ -390,14 +390,14 @@ public static <T> ExtensionList<T> create(Jenkins jenkins, Class<T> type) {
     /**
      * Gets the extension list for a given type.
      * Normally calls {@link Jenkins#getExtensionList(Class)} but falls back to an empty list
-     * in case {@link Jenkins#getInstance} is null.
+     * in case {@link Jenkins#getInstanceOrNull()} is null.
      * Thus it is useful to call from {@code all()} methods which need to behave gracefully during startup or shutdown.
      * @param type the extension point type
      * @return some list
      * @since 1.572
      */
     public static @Nonnull <T> ExtensionList<T> lookup(Class<T> type) {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         return j == null ? create((Jenkins) null, type) : j.getExtensionList(type);
     }
 

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -1133,7 +1133,7 @@ public VirtualFile toVirtualFile() {
      * @since 1.571
      */
     public @CheckForNull Computer toComputer() {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j != null) {
             for (Computer c : j.getComputers()) {
                 if (getChannel()==c.getChannel()) {

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -238,7 +238,7 @@ public void run() {
                     } catch (Exception e) {
                         new HudsonFailedToLoad(e).publish(context,_home);
                     } finally {
-                        Jenkins instance = Jenkins.getInstance();
+                        Jenkins instance = Jenkins.getInstanceOrNull();
                         if(!success && instance!=null)
                             instance.cleanUp();
                     }
@@ -395,7 +395,7 @@ public FileAndDescription getHomeDir(ServletContextEvent event) {
     public void contextDestroyed(ServletContextEvent event) {
         try {
             terminated = true;
-            Jenkins instance = Jenkins.getInstance();
+            Jenkins instance = Jenkins.getInstanceOrNull();
             if(instance!=null)
                 instance.cleanUp();
             Thread t = initThread;

File: core/src/main/java/hudson/diagnosis/NullIdDescriptorMonitor.java
Patch:
@@ -61,7 +61,7 @@ public List<Descriptor> getProblems() {
     }
 
     private void verify() {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull();
         if (h == null) {
             return;
         }

File: core/src/main/java/hudson/diagnosis/OldDataMonitor.java
Patch:
@@ -105,7 +105,7 @@ public Map<Saveable,VersionRange> getData() {
     }
 
     private static void remove(Saveable obj, boolean isDelete) {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j != null) {
             OldDataMonitor odm = get(j);
             SecurityContext oldContext = ACL.impersonate(ACL.SYSTEM);
@@ -206,7 +206,7 @@ public static void report(Saveable obj, Collection<Throwable> errors) {
             }
         }
         if (buf.length() == 0) return;
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) {
             // Startup failed, something is very broken, so report what we can.
             for (Throwable t : errors) {

File: core/src/main/java/hudson/diagnosis/ReverseProxySetupMonitor.java
Patch:
@@ -62,7 +62,6 @@ public boolean isActivated() {
     public HttpResponse doTest() {
         String referer = Stapler.getCurrentRequest().getReferer();
         Jenkins j = Jenkins.getInstance();
-        assert j != null;
         // May need to send an absolute URL, since handling of HttpRedirect with a relative URL does not currently honor X-Forwarded-Proto/Port at all.
         String redirect = j.getRootUrl() + "administrativeMonitor/" + id + "/testForReverseProxySetup/" + (referer != null ? Util.rawEncode(referer) : "NO-REFERER") + "/";
         LOGGER.log(Level.FINE, "coming from {0} and redirecting to {1}", new Object[] {referer, redirect});
@@ -71,7 +70,6 @@ public HttpResponse doTest() {
 
     public void getTestForReverseProxySetup(String rest) {
         Jenkins j = Jenkins.getInstance();
-        assert j != null;
         String inferred = j.getRootUrlFromRequest() + "manage";
         // TODO this could also verify that j.getRootUrl() has been properly configured, and send a different message if not
         if (rest.startsWith(inferred)) { // not using equals due to JENKINS-24014

File: core/src/main/java/hudson/init/TaskMethodFinder.java
Patch:
@@ -116,8 +116,8 @@ protected void invoke(Method e) {
      */
     private Object lookUp(Class<?> type) {
         if (type==Jenkins.class || type==Hudson.class)
-            return Jenkins.getInstance();
-        Jenkins j = Jenkins.getInstance();
+            return Jenkins.getInstanceOrNull();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j!=null) {
             Injector i = j.getInjector();
             if (i!=null)

File: core/src/main/java/hudson/lifecycle/SolarisSMFLifecycle.java
Patch:
@@ -38,7 +38,7 @@ public class SolarisSMFLifecycle extends Lifecycle {
      */
     @Override
     public void restart() throws IOException, InterruptedException {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull();
         if (h != null)
             h.cleanUp();
         System.exit(0);

File: core/src/main/java/hudson/lifecycle/UnixLifecycle.java
Patch:
@@ -65,7 +65,7 @@ public UnixLifecycle() throws IOException {
 
     @Override
     public void restart() throws IOException, InterruptedException {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull();
         if (h != null)
             h.cleanUp();
 

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -2077,7 +2077,7 @@ public FormValidation doCheckLabel(@AncestorInPath AbstractProject<?,?> project,
                 return FormValidation.error(e,
                         Messages.AbstractProject_AssignedLabelString_InvalidBooleanExpression(e.getMessage()));
             }
-            Jenkins j = Jenkins.getInstance();
+            Jenkins j = Jenkins.getInstanceOrNull();
             if (j == null) {
                 return FormValidation.ok(); // ?
             }

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -958,8 +958,9 @@ protected Object call(Object o, Method m, Object[] args) throws Throwable {
      *          or null if it could not be found (for example because the execution has already completed)
      * @since 1.607
      */
-    public static @CheckForNull Executor of(Executable executable) {
-        Jenkins jenkins = Jenkins.getInstance();
+    @CheckForNull
+    public static Executor of(Executable executable) {
+        Jenkins jenkins = Jenkins.getInstanceOrNull();
         if (jenkins == null) {
             return null;
         }

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -128,7 +128,7 @@ public String getName() {
         private boolean hasPermissionToDiscoverBuild() {
             // We expose the data to Jenkins administrators in order to
             // let them manage the data for deleted jobs (also works for SYSTEM)
-            final Jenkins instance = Jenkins.getInstance();
+            final Jenkins instance = Jenkins.getInstanceOrNull();
             if (instance != null && instance.hasPermission(Jenkins.ADMINISTER)) {
                 return true;
             }
@@ -941,7 +941,7 @@ public RangeItem(String name, RangeSet ranges) {
     @Exported(name="usage")
     public @Nonnull List<RangeItem> _getUsages() {
         List<RangeItem> r = new ArrayList<RangeItem>();
-        final Jenkins instance = Jenkins.getInstance();
+        final Jenkins instance = Jenkins.getInstanceOrNull();
         if (instance == null) {
             return r;
         }
@@ -1368,7 +1368,7 @@ private static String messageOfParseException(Throwable t) {
      * @return {@code true} if the user can discover the item
      */
     private static boolean canDiscoverItem(@Nonnull final String fullName) {
-        final Jenkins jenkins = Jenkins.getInstance();
+        final Jenkins jenkins = Jenkins.getInstanceOrNull();
         if (jenkins == null) {
             return false;
         }

File: core/src/main/java/hudson/model/Hudson.java
Patch:
@@ -34,6 +34,7 @@
 import hudson.slaves.ComputerListener;
 import hudson.util.CopyOnWriteList;
 import hudson.util.FormValidation;
+import javax.annotation.Nonnull;
 import jenkins.model.Jenkins;
 import org.jvnet.hudson.reactor.ReactorException;
 import org.kohsuke.stapler.QueryParameter;
@@ -71,7 +72,8 @@ public class Hudson extends Jenkins {
     /** @deprecated Here only for compatibility. Use {@link Jenkins#getInstance} instead. */
     @Deprecated
     @CLIResolver
-    public static @CheckForNull Hudson getInstance() {
+    @Nonnull
+    public static Hudson getInstance() {
         return (Hudson)Jenkins.getInstance();
     }
 

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -848,7 +848,7 @@ public Object getDynamic(String token, StaplerRequest req,
      * @see RunMap
      */
     public File getBuildDir() {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) {
             return new File(getRootDir(), "builds");
         }

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2275,7 +2275,7 @@ public EnvVars getEnvironment() throws IOException, InterruptedException {
         } catch (NumberFormatException x) {
             throw new IllegalArgumentException(x);
         }
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) {
             return null;
         }

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -150,7 +150,7 @@ private User(String id, String fullName) {
      */
     @Nonnull
     public static IdStrategy idStrategy() {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) {
             return IdStrategy.CASE_INSENSITIVE;
         }

File: core/src/main/java/hudson/model/listeners/RunListener.java
Patch:
@@ -223,7 +223,7 @@ public static void fireStarted(Run r, TaskListener listener) {
      * Fires the {@link #onFinalized(Run)} event.
      */
     public static void fireFinalized(Run r) {
-        if (Jenkins.getInstance() == null) {
+        if (Jenkins.getInstanceOrNull() == null) {
             return;
         }
         for (RunListener l : all()) {

File: core/src/main/java/hudson/model/listeners/SCMListener.java
Patch:
@@ -126,7 +126,7 @@ public void onChangeLogParsed(AbstractBuild<?,?> build, BuildListener listener,
      */
     @SuppressWarnings("deprecation")
     public static Collection<? extends SCMListener> all() {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) {
             return Collections.emptySet();
         }
@@ -140,7 +140,7 @@ public static Collection<? extends SCMListener> all() {
     /** @deprecated Use {@link Extension} instead. */
     @Deprecated
     public final void register() {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j != null) {
             j.getSCMListeners().add(this);
         }
@@ -149,7 +149,7 @@ public final void register() {
     /** @deprecated Use {@link Extension} instead. */
     @Deprecated
     public final boolean unregister() {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j != null) {
             return j.getSCMListeners().remove(this);
         } else {

File: core/src/main/java/hudson/security/HudsonFilter.java
Patch:
@@ -104,7 +104,7 @@ public void init(FilterConfig filterConfig) throws ServletException {
         // this is how we make us available to the rest of Hudson.
         filterConfig.getServletContext().setAttribute(HudsonFilter.class.getName(),this);
         try {
-            Jenkins hudson = Jenkins.getInstance();
+            Jenkins hudson = Jenkins.getInstanceOrNull();
             if (hudson != null) {
                 // looks like we are initialized after Hudson came into being. initialize it now. See #3069
                 LOGGER.fine("Security wasn't initialized; Initializing it...");

File: core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java
Patch:
@@ -93,7 +93,7 @@ public void loginSuccess(HttpServletRequest request, HttpServletResponse respons
 			return;
 		}
 
-		Jenkins j = Jenkins.getInstance();
+		Jenkins j = Jenkins.getInstanceOrNull();
 		if (j != null && j.isDisableRememberMe()) {
 			if (logger.isDebugEnabled()) {
 				logger.debug("Did not send remember-me cookie because 'Remember Me' is disabled in " +

File: core/src/main/java/hudson/security/csrf/CrumbFilter.java
Patch:
@@ -35,7 +35,7 @@ public class CrumbFilter implements Filter {
      * we cannot use Hudson to the CrumbIssuer into CrumbFilter eagerly.
      */
     public CrumbIssuer getCrumbIssuer() {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull();
         if(h==null)     return null;    // before Jenkins is initialized?
         return h.getCrumbIssuer();
     }

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -835,7 +835,7 @@ public Void call() {
      * @since 1.362
      */
     public static VirtualChannel getChannelToMaster() {
-        if (Jenkins.getInstance()!=null)
+        if (Jenkins.getInstanceOrNull()!=null)
             return FilePath.localChannel;
 
         // if this method is called from within the slave computation thread, this should work

File: core/src/main/java/hudson/tools/JDKInstaller.java
Patch:
@@ -448,7 +448,7 @@ public URL locate(TaskListener log, Platform platform, CPU cpu) throws IOExcepti
 
         HttpClient hc = new HttpClient();
         hc.getParams().setParameter("http.useragent","Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)");
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         ProxyConfiguration jpc = j!=null ? j.proxy : null;
         if(jpc != null) {
             hc.getHostConfiguration().setProxy(jpc.name, jpc.port);

File: core/src/main/java/hudson/util/PluginServletFilter.java
Patch:
@@ -95,7 +95,7 @@ public void init(FilterConfig config) throws ServletException {
     }
 
     public static void addFilter(Filter filter) throws ServletException {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         
         PluginServletFilter container = null;
         if(j != null) {
@@ -113,7 +113,7 @@ public static void addFilter(Filter filter) throws ServletException {
     }
 
     public static void removeFilter(Filter filter) throws ServletException {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j==null || getInstance(j.servletContext) == null) {
             LEGACY.remove(filter);
         } else {

File: core/src/main/java/hudson/util/ProcessKillingVeto.java
Patch:
@@ -74,7 +74,7 @@ public VetoCause(@Nonnull String message) {
      *         list if Jenkins is not available, never null.
      */
     public static List<ProcessKillingVeto> all() {
-        Jenkins jenkins = Jenkins.getInstance();
+        Jenkins jenkins = Jenkins.getInstanceOrNull();
         if (jenkins == null)
             return Collections.emptyList();
         return jenkins.getExtensionList(ProcessKillingVeto.class);

File: core/src/main/java/hudson/util/SubClassGenerator.java
Patch:
@@ -76,7 +76,7 @@ public <T> Class<? extends T> generate(Class<T> base, String name) {
 
         Class<? extends T> c = defineClass(name, image, 0, image.length).asSubclass(base);
 
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull();
         if (h!=null)    // null only during tests.
             ((UberClassLoader)h.pluginManager.uberClassLoader).addNamedClass(name,c); // can't change the field type as it breaks binary compatibility
         

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -106,7 +106,7 @@ public XStream2(HierarchicalStreamDriver hierarchicalStreamDriver) {
     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
         // init() is too early to do this
         // defensive because some use of XStream happens before plugins are initialized.
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull();
         if(h!=null && h.pluginManager!=null && h.pluginManager.uberClassLoader!=null) {
             setClassLoader(h.pluginManager.uberClassLoader);
         }
@@ -421,7 +421,7 @@ class PluginClassOwnership implements ClassOwnership {
                 return classOwnership.ownerOf(clazz);
             }
             if (pm == null) {
-                Jenkins j = Jenkins.getInstance();
+                Jenkins j = Jenkins.getInstanceOrNull();
                 if (j != null) {
                     pm = j.getPluginManager();
                 }

File: core/src/main/java/hudson/util/io/ParserConfigurator.java
Patch:
@@ -75,7 +75,7 @@ public static ExtensionList<ParserConfigurator> all() {
     public static void applyConfiguration(SAXReader reader, Object context) throws IOException, InterruptedException {
         Collection<ParserConfigurator> all = Collections.emptyList();
 
-        if (Jenkins.getInstance()==null) {
+        if (Jenkins.getInstanceOrNull()==null) {
             Channel ch = Channel.current();
             if (ch!=null)
                 all = ch.call(new SlaveToMasterCallable<Collection<ParserConfigurator>, IOException>() {

File: core/src/main/java/jenkins/model/UnlabeledLoadStatistics.java
Patch:
@@ -78,7 +78,7 @@ public int computeTotalExecutors() {
 
     @Override
     public int computeQueueLength() {
-        final Jenkins j = Jenkins.getInstance();
+        final Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) { // Consider queue as empty when Jenkins is inactive
             return 0;
         }

File: core/src/main/java/jenkins/security/ApiTokenProperty.java
Patch:
@@ -118,7 +118,7 @@ public boolean matchesPassword(String password) {
     }
     
     private boolean hasPermissionToSeeToken() {
-        final Jenkins jenkins = Jenkins.getInstance();
+        final Jenkins jenkins = Jenkins.getInstanceOrNull();
         if (jenkins == null) {
             return false; // Should not happen - we don't display UIs in this stage
         }

File: core/src/main/java/jenkins/security/ConfidentialStore.java
Patch:
@@ -62,9 +62,6 @@ public abstract class ConfidentialStore {
         if (TEST!=null) return TEST.get();
 
         Jenkins j = Jenkins.getInstance();
-        if (j == null) {
-            throw new IllegalStateException("cannot initialize confidential key store until Jenkins has started");
-        }
         Lookup lookup = j.lookup;
         ConfidentialStore cs = lookup.get(ConfidentialStore.class);
         if (cs==null) {

File: core/src/main/java/jenkins/security/QueueItemAuthenticatorProvider.java
Patch:
@@ -32,7 +32,7 @@ private static class IteratorImpl implements Iterator<QueueItemAuthenticator> {
         private Iterator<QueueItemAuthenticator> delegate = null;
 
         private IteratorImpl() {
-            final Jenkins jenkins = Jenkins.getInstance();
+            final Jenkins jenkins = Jenkins.getInstanceOrNull();
             providers = new ArrayList<QueueItemAuthenticatorProvider>(jenkins == null
                     ? Collections.<QueueItemAuthenticatorProvider>emptyList()
                     : jenkins.getExtensionList(QueueItemAuthenticatorProvider.class)).iterator();

File: core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java
Patch:
@@ -106,7 +106,7 @@ public Result getThreshold() {
     }
 
     private boolean shouldTrigger(Run upstreamBuild, TaskListener listener) {
-        Jenkins jenkins = Jenkins.getInstance();
+        Jenkins jenkins = Jenkins.getInstanceOrNull();
         if (jenkins == null || job == null) {
             return false;
         }
@@ -202,7 +202,7 @@ public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @Quer
             while(tokens.hasMoreTokens()) {
                 String projectName = tokens.nextToken().trim();
                 if (StringUtils.isNotBlank(projectName)) {
-                    Jenkins jenkins = Jenkins.getInstance();
+                    Jenkins jenkins = Jenkins.getInstanceOrNull();
                     if (jenkins == null) {
                         return FormValidation.ok();
                     }
@@ -253,7 +253,7 @@ public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @Quer
 
     @Extension public static class ItemListenerImpl extends ItemListener {
         @Override public void onLocationChanged(Item item, String oldFullName, String newFullName) {
-            Jenkins jenkins = Jenkins.getInstance();
+            Jenkins jenkins = Jenkins.getInstanceOrNull();
             if (jenkins == null) {
                 return;
             }

File: core/src/main/java/jenkins/util/JSONSignatureValidator.java
Patch:
@@ -134,7 +134,7 @@ protected Set<TrustAnchor> loadTrustAnchors(CertificateFactory cf) throws IOExce
         // if we trust default root CAs, we end up trusting anyone who has a valid certificate,
         // which isn't useful at all
         Set<TrustAnchor> anchors = new HashSet<TrustAnchor>(); // CertificateUtil.getDefaultRootCAs();
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) {
             return anchors;
         }

File: test/src/test/java/hudson/util/BootFailureTest.java
Patch:
@@ -74,7 +74,7 @@ public WebAppMain.FileAndDescription getHomeDir(ServletContextEvent event) {
 
     @After
     public void tearDown() {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j != null) {
             j.cleanUp();
         }

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -1189,7 +1189,7 @@ public void run() {
                         break;
                     }
 			updateCenter.persistInstallStatus();
-                    jenkins.setInstallState(InstallState.INITIAL_PLUGINS_INSTALLED);
+                    jenkins.setInstallState(InstallState.INITIAL_PLUGINS_INSTALLING.getNextState());
                     InstallUtil.saveLastExecVersion();
                 }
             }.start();

File: test/src/test/java/hudson/model/UpdateCenterPluginInstallTest.java
Patch:
@@ -75,7 +75,8 @@ public void test_installKnownPlugins() throws IOException, SAXException {
         String correlationId = data.getString("correlationId");
         JSONObject installStatus = jenkinsRule.getJSON("updateCenter/installStatus?correlationId=" + correlationId).getJSONObject();
         Assert.assertEquals("ok", json.get("status"));
-        JSONArray states = installStatus.getJSONArray("data");
+        JSONObject status = installStatus.getJSONObject("data");
+        JSONArray states = status.getJSONArray("jobs");
         Assert.assertEquals(2, states.size());
 
         JSONObject pluginInstallState = states.getJSONObject(0);

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -178,6 +178,7 @@
 import hudson.util.Memoizer;
 import hudson.util.MultipartFormDataParser;
 import hudson.util.NamingThreadFactory;
+import hudson.util.PluginServletFilter;
 import hudson.util.RemotingDiagnostics;
 import hudson.util.RemotingDiagnostics.HeapDump;
 import hudson.util.TextFile;
@@ -2882,6 +2883,8 @@ public void run() {
                 LOGGER.log(Level.WARNING, "Failed to shut down properly",e);
             }
 
+        PluginServletFilter.cleanUp();
+
         LogFactory.releaseAll();
 
         theInstance = null;

File: core/src/main/java/jenkins/util/JenkinsJVM.java
Patch:
@@ -39,7 +39,7 @@ public static boolean isJenkinsJVM() {
      * Verify that the classloader that loaded this class is the classloader from which {@link Jenkins} has been
      * started.
      *
-     * @throws IllegalArgumentException if this is not the classloader on the JVM that started {@link Jenkins}.
+     * @throws IllegalStateException if this is not the classloader on the JVM that started {@link Jenkins}.
      */
     public static void checkJenkinsJVM() {
         if (!isJenkinsJVM()) {
@@ -51,7 +51,7 @@ public static void checkJenkinsJVM() {
      * Verify that the classloader that loaded this class is not the classloader from which {@link Jenkins} has been
      * started.
      *
-     * @throws IllegalArgumentException if this is the classloader on the JVM that started {@link Jenkins}.
+     * @throws IllegalStateException if this is the classloader on the JVM that started {@link Jenkins}.
      */
     public static void checkNotJenkinsJVM() {
         if (isJenkinsJVM()) {

File: core/src/main/java/hudson/ExtensionList.java
Patch:
@@ -390,14 +390,14 @@ public static <T> ExtensionList<T> create(Jenkins jenkins, Class<T> type) {
     /**
      * Gets the extension list for a given type.
      * Normally calls {@link Jenkins#getExtensionList(Class)} but falls back to an empty list
-     * in case {@link Jenkins#getInstance} is null.
+     * in case {@link Jenkins#getInstanceOrNull()} is null.
      * Thus it is useful to call from {@code all()} methods which need to behave gracefully during startup or shutdown.
      * @param type the extension point type
      * @return some list
      * @since 1.572
      */
     public static @Nonnull <T> ExtensionList<T> lookup(Class<T> type) {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         return j == null ? create((Jenkins) null, type) : j.getExtensionList(type);
     }
 

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -1133,7 +1133,7 @@ public VirtualFile toVirtualFile() {
      * @since 1.571
      */
     public @CheckForNull Computer toComputer() {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j != null) {
             for (Computer c : j.getComputers()) {
                 if (getChannel()==c.getChannel()) {

File: core/src/main/java/hudson/ProxyConfiguration.java
Patch:
@@ -215,7 +215,7 @@ public static ProxyConfiguration load() throws IOException {
      * This method should be used wherever {@link URL#openConnection()} to internet URLs is invoked directly.
      */
     public static URLConnection open(URL url) throws IOException {
-        Jenkins h = Jenkins.getInstance(); // this code might run on slaves
+        Jenkins h = Jenkins.getInstanceOrNull(); // this code might run on slaves
         ProxyConfiguration p = h!=null ? h.proxy : null;
         if(p==null)
             return url.openConnection();
@@ -241,7 +241,7 @@ public PasswordAuthentication getPasswordAuthentication() {
     }
     
     public static InputStream getInputStream(URL url) throws IOException {
-        Jenkins h = Jenkins.getInstance(); // this code might run on slaves
+        Jenkins h = Jenkins.getInstanceOrNull(); // this code might run on slaves
         final ProxyConfiguration p = (h != null) ? h.proxy : null;
         if (p == null) 
             return new RetryableHttpStream(url);

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -236,7 +236,7 @@ public void run() {
                     } catch (Exception e) {
                         new HudsonFailedToLoad(e).publish(context,_home);
                     } finally {
-                        Jenkins instance = Jenkins.getInstance();
+                        Jenkins instance = Jenkins.getInstanceOrNull();
                         if(!success && instance!=null)
                             instance.cleanUp();
                     }
@@ -392,7 +392,7 @@ public FileAndDescription getHomeDir(ServletContextEvent event) {
 
     public void contextDestroyed(ServletContextEvent event) {
         terminated = true;
-        Jenkins instance = Jenkins.getInstance();
+        Jenkins instance = Jenkins.getInstanceOrNull();
         if(instance!=null)
             instance.cleanUp();
         Thread t = initThread;

File: core/src/main/java/hudson/diagnosis/NullIdDescriptorMonitor.java
Patch:
@@ -61,7 +61,7 @@ public List<Descriptor> getProblems() {
     }
 
     private void verify() {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull();
         if (h == null) {
             return;
         }

File: core/src/main/java/hudson/diagnosis/OldDataMonitor.java
Patch:
@@ -105,7 +105,7 @@ public Map<Saveable,VersionRange> getData() {
     }
 
     private static void remove(Saveable obj, boolean isDelete) {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j != null) {
             OldDataMonitor odm = get(j);
             SecurityContext oldContext = ACL.impersonate(ACL.SYSTEM);
@@ -206,7 +206,7 @@ public static void report(Saveable obj, Collection<Throwable> errors) {
             }
         }
         if (buf.length() == 0) return;
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) {
             // Startup failed, something is very broken, so report what we can.
             for (Throwable t : errors) {

File: core/src/main/java/hudson/diagnosis/ReverseProxySetupMonitor.java
Patch:
@@ -62,7 +62,6 @@ public boolean isActivated() {
     public HttpResponse doTest() {
         String referer = Stapler.getCurrentRequest().getReferer();
         Jenkins j = Jenkins.getInstance();
-        assert j != null;
         // May need to send an absolute URL, since handling of HttpRedirect with a relative URL does not currently honor X-Forwarded-Proto/Port at all.
         String redirect = j.getRootUrl() + "administrativeMonitor/" + id + "/testForReverseProxySetup/" + (referer != null ? Util.rawEncode(referer) : "NO-REFERER") + "/";
         LOGGER.log(Level.FINE, "coming from {0} and redirecting to {1}", new Object[] {referer, redirect});
@@ -71,7 +70,6 @@ public HttpResponse doTest() {
 
     public void getTestForReverseProxySetup(String rest) {
         Jenkins j = Jenkins.getInstance();
-        assert j != null;
         String inferred = j.getRootUrlFromRequest() + "manage";
         // TODO this could also verify that j.getRootUrl() has been properly configured, and send a different message if not
         if (rest.startsWith(inferred)) { // not using equals due to JENKINS-24014

File: core/src/main/java/hudson/init/TaskMethodFinder.java
Patch:
@@ -116,8 +116,8 @@ protected void invoke(Method e) {
      */
     private Object lookUp(Class<?> type) {
         if (type==Jenkins.class || type==Hudson.class)
-            return Jenkins.getInstance();
-        Jenkins j = Jenkins.getInstance();
+            return Jenkins.getInstanceOrNull();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j!=null) {
             Injector i = j.getInjector();
             if (i!=null)

File: core/src/main/java/hudson/lifecycle/SolarisSMFLifecycle.java
Patch:
@@ -38,7 +38,7 @@ public class SolarisSMFLifecycle extends Lifecycle {
      */
     @Override
     public void restart() throws IOException, InterruptedException {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull();
         if (h != null)
             h.cleanUp();
         System.exit(0);

File: core/src/main/java/hudson/lifecycle/UnixLifecycle.java
Patch:
@@ -65,7 +65,7 @@ public UnixLifecycle() throws IOException {
 
     @Override
     public void restart() throws IOException, InterruptedException {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull();
         if (h != null)
             h.cleanUp();
 

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -2077,7 +2077,7 @@ public FormValidation doCheckLabel(@AncestorInPath AbstractProject<?,?> project,
                 return FormValidation.error(e,
                         Messages.AbstractProject_AssignedLabelString_InvalidBooleanExpression(e.getMessage()));
             }
-            Jenkins j = Jenkins.getInstance();
+            Jenkins j = Jenkins.getInstanceOrNull();
             if (j == null) {
                 return FormValidation.ok(); // ?
             }

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -958,8 +958,9 @@ protected Object call(Object o, Method m, Object[] args) throws Throwable {
      *          or null if it could not be found (for example because the execution has already completed)
      * @since 1.607
      */
-    public static @CheckForNull Executor of(Executable executable) {
-        Jenkins jenkins = Jenkins.getInstance();
+    @CheckForNull
+    public static Executor of(Executable executable) {
+        Jenkins jenkins = Jenkins.getInstanceOrNull();
         if (jenkins == null) {
             return null;
         }

File: core/src/main/java/hudson/model/Fingerprint.java
Patch:
@@ -128,7 +128,7 @@ public String getName() {
         private boolean hasPermissionToDiscoverBuild() {
             // We expose the data to Jenkins administrators in order to
             // let them manage the data for deleted jobs (also works for SYSTEM)
-            final Jenkins instance = Jenkins.getInstance();
+            final Jenkins instance = Jenkins.getInstanceOrNull();
             if (instance != null && instance.hasPermission(Jenkins.ADMINISTER)) {
                 return true;
             }
@@ -941,7 +941,7 @@ public RangeItem(String name, RangeSet ranges) {
     @Exported(name="usage")
     public @Nonnull List<RangeItem> _getUsages() {
         List<RangeItem> r = new ArrayList<RangeItem>();
-        final Jenkins instance = Jenkins.getInstance();
+        final Jenkins instance = Jenkins.getInstanceOrNull();
         if (instance == null) {
             return r;
         }
@@ -1368,7 +1368,7 @@ private static String messageOfParseException(Throwable t) {
      * @return {@code true} if the user can discover the item
      */
     private static boolean canDiscoverItem(@Nonnull final String fullName) {
-        final Jenkins jenkins = Jenkins.getInstance();
+        final Jenkins jenkins = Jenkins.getInstanceOrNull();
         if (jenkins == null) {
             return false;
         }

File: core/src/main/java/hudson/model/Hudson.java
Patch:
@@ -34,6 +34,7 @@
 import hudson.slaves.ComputerListener;
 import hudson.util.CopyOnWriteList;
 import hudson.util.FormValidation;
+import javax.annotation.Nonnull;
 import jenkins.model.Jenkins;
 import org.jvnet.hudson.reactor.ReactorException;
 import org.kohsuke.stapler.QueryParameter;
@@ -71,7 +72,8 @@ public class Hudson extends Jenkins {
     /** @deprecated Here only for compatibility. Use {@link Jenkins#getInstance} instead. */
     @Deprecated
     @CLIResolver
-    public static @CheckForNull Hudson getInstance() {
+    @Nonnull
+    public static Hudson getInstance() {
         return (Hudson)Jenkins.getInstance();
     }
 

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -848,7 +848,7 @@ public Object getDynamic(String token, StaplerRequest req,
      * @see RunMap
      */
     public File getBuildDir() {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) {
             return new File(getRootDir(), "builds");
         }

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2275,7 +2275,7 @@ public EnvVars getEnvironment() throws IOException, InterruptedException {
         } catch (NumberFormatException x) {
             throw new IllegalArgumentException(x);
         }
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) {
             return null;
         }

File: core/src/main/java/hudson/model/UsageStatistics.java
Patch:
@@ -96,7 +96,7 @@ public UsageStatistics(String keyImage) {
      * Returns true if it's time for us to check for new version.
      */
     public boolean isDue() {
-        final Jenkins j = Jenkins.getInstance();
+        final Jenkins j = Jenkins.getInstanceOrNull();
         // user opted out or Jenkins not fully initialized. no data collection.
         if (j == null || j.isUsageStatisticsCollected() || DISABLED || COMPLETED.compareTo(j.getInitLevel()) > 0) {
             return false;

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -150,7 +150,7 @@ private User(String id, String fullName) {
      */
     @Nonnull
     public static IdStrategy idStrategy() {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) {
             return IdStrategy.CASE_INSENSITIVE;
         }

File: core/src/main/java/hudson/model/listeners/RunListener.java
Patch:
@@ -223,7 +223,7 @@ public static void fireStarted(Run r, TaskListener listener) {
      * Fires the {@link #onFinalized(Run)} event.
      */
     public static void fireFinalized(Run r) {
-        if (Jenkins.getInstance() == null) {
+        if (Jenkins.getInstanceOrNull() == null) {
             return;
         }
         for (RunListener l : all()) {

File: core/src/main/java/hudson/model/listeners/SCMListener.java
Patch:
@@ -126,7 +126,7 @@ public void onChangeLogParsed(AbstractBuild<?,?> build, BuildListener listener,
      */
     @SuppressWarnings("deprecation")
     public static Collection<? extends SCMListener> all() {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) {
             return Collections.emptySet();
         }
@@ -140,7 +140,7 @@ public static Collection<? extends SCMListener> all() {
     /** @deprecated Use {@link Extension} instead. */
     @Deprecated
     public final void register() {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j != null) {
             j.getSCMListeners().add(this);
         }
@@ -149,7 +149,7 @@ public final void register() {
     /** @deprecated Use {@link Extension} instead. */
     @Deprecated
     public final boolean unregister() {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j != null) {
             return j.getSCMListeners().remove(this);
         } else {

File: core/src/main/java/hudson/security/HudsonFilter.java
Patch:
@@ -104,7 +104,7 @@ public void init(FilterConfig filterConfig) throws ServletException {
         // this is how we make us available to the rest of Hudson.
         filterConfig.getServletContext().setAttribute(HudsonFilter.class.getName(),this);
         try {
-            Jenkins hudson = Jenkins.getInstance();
+            Jenkins hudson = Jenkins.getInstanceOrNull();
             if (hudson != null) {
                 // looks like we are initialized after Hudson came into being. initialize it now. See #3069
                 LOGGER.fine("Security wasn't initialized; Initializing it...");

File: core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java
Patch:
@@ -93,7 +93,7 @@ public void loginSuccess(HttpServletRequest request, HttpServletResponse respons
 			return;
 		}
 
-		Jenkins j = Jenkins.getInstance();
+		Jenkins j = Jenkins.getInstanceOrNull();
 		if (j != null && j.isDisableRememberMe()) {
 			if (logger.isDebugEnabled()) {
 				logger.debug("Did not send remember-me cookie because 'Remember Me' is disabled in " +

File: core/src/main/java/hudson/security/csrf/CrumbFilter.java
Patch:
@@ -35,7 +35,7 @@ public class CrumbFilter implements Filter {
      * we cannot use Hudson to the CrumbIssuer into CrumbFilter eagerly.
      */
     public CrumbIssuer getCrumbIssuer() {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull();
         if(h==null)     return null;    // before Jenkins is initialized?
         return h.getCrumbIssuer();
     }

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -835,7 +835,7 @@ public Void call() {
      * @since 1.362
      */
     public static VirtualChannel getChannelToMaster() {
-        if (Jenkins.getInstance()!=null)
+        if (Jenkins.getInstanceOrNull()!=null)
             return FilePath.localChannel;
 
         // if this method is called from within the slave computation thread, this should work

File: core/src/main/java/hudson/tools/JDKInstaller.java
Patch:
@@ -448,7 +448,7 @@ public URL locate(TaskListener log, Platform platform, CPU cpu) throws IOExcepti
 
         HttpClient hc = new HttpClient();
         hc.getParams().setParameter("http.useragent","Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)");
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         ProxyConfiguration jpc = j!=null ? j.proxy : null;
         if(jpc != null) {
             hc.getHostConfiguration().setProxy(jpc.name, jpc.port);

File: core/src/main/java/hudson/util/PluginServletFilter.java
Patch:
@@ -93,7 +93,7 @@ public void init(FilterConfig config) throws ServletException {
     }
 
     public static void addFilter(Filter filter) throws ServletException {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         
         PluginServletFilter container = null;
         if(j != null) {
@@ -111,7 +111,7 @@ public static void addFilter(Filter filter) throws ServletException {
     }
 
     public static void removeFilter(Filter filter) throws ServletException {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j==null || getInstance(j.servletContext) == null) {
             LEGACY.remove(filter);
         } else {

File: core/src/main/java/hudson/util/ProcessKillingVeto.java
Patch:
@@ -74,7 +74,7 @@ public VetoCause(@Nonnull String message) {
      *         list if Jenkins is not available, never null.
      */
     public static List<ProcessKillingVeto> all() {
-        Jenkins jenkins = Jenkins.getInstance();
+        Jenkins jenkins = Jenkins.getInstanceOrNull();
         if (jenkins == null)
             return Collections.emptyList();
         return jenkins.getExtensionList(ProcessKillingVeto.class);

File: core/src/main/java/hudson/util/SubClassGenerator.java
Patch:
@@ -76,7 +76,7 @@ public <T> Class<? extends T> generate(Class<T> base, String name) {
 
         Class<? extends T> c = defineClass(name, image, 0, image.length).asSubclass(base);
 
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull();
         if (h!=null)    // null only during tests.
             ((UberClassLoader)h.pluginManager.uberClassLoader).addNamedClass(name,c); // can't change the field type as it breaks binary compatibility
         

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -106,7 +106,7 @@ public XStream2(HierarchicalStreamDriver hierarchicalStreamDriver) {
     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
         // init() is too early to do this
         // defensive because some use of XStream happens before plugins are initialized.
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getInstanceOrNull();
         if(h!=null && h.pluginManager!=null && h.pluginManager.uberClassLoader!=null) {
             setClassLoader(h.pluginManager.uberClassLoader);
         }
@@ -421,7 +421,7 @@ class PluginClassOwnership implements ClassOwnership {
                 return classOwnership.ownerOf(clazz);
             }
             if (pm == null) {
-                Jenkins j = Jenkins.getInstance();
+                Jenkins j = Jenkins.getInstanceOrNull();
                 if (j != null) {
                     pm = j.getPluginManager();
                 }

File: core/src/main/java/hudson/util/io/ParserConfigurator.java
Patch:
@@ -75,7 +75,7 @@ public static ExtensionList<ParserConfigurator> all() {
     public static void applyConfiguration(SAXReader reader, Object context) throws IOException, InterruptedException {
         Collection<ParserConfigurator> all = Collections.emptyList();
 
-        if (Jenkins.getInstance()==null) {
+        if (Jenkins.getInstanceOrNull()==null) {
             Channel ch = Channel.current();
             if (ch!=null)
                 all = ch.call(new SlaveToMasterCallable<Collection<ParserConfigurator>, IOException>() {

File: core/src/main/java/jenkins/model/UnlabeledLoadStatistics.java
Patch:
@@ -78,7 +78,7 @@ public int computeTotalExecutors() {
 
     @Override
     public int computeQueueLength() {
-        final Jenkins j = Jenkins.getInstance();
+        final Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) { // Consider queue as empty when Jenkins is inactive
             return 0;
         }

File: core/src/main/java/jenkins/security/ApiTokenProperty.java
Patch:
@@ -118,7 +118,7 @@ public boolean matchesPassword(String password) {
     }
     
     private boolean hasPermissionToSeeToken() {
-        final Jenkins jenkins = Jenkins.getInstance();
+        final Jenkins jenkins = Jenkins.getInstanceOrNull();
         if (jenkins == null) {
             return false; // Should not happen - we don't display UIs in this stage
         }

File: core/src/main/java/jenkins/security/ConfidentialStore.java
Patch:
@@ -62,9 +62,6 @@ public abstract class ConfidentialStore {
         if (TEST!=null) return TEST.get();
 
         Jenkins j = Jenkins.getInstance();
-        if (j == null) {
-            throw new IllegalStateException("cannot initialize confidential key store until Jenkins has started");
-        }
         Lookup lookup = j.lookup;
         ConfidentialStore cs = lookup.get(ConfidentialStore.class);
         if (cs==null) {

File: core/src/main/java/jenkins/security/QueueItemAuthenticatorProvider.java
Patch:
@@ -32,7 +32,7 @@ private static class IteratorImpl implements Iterator<QueueItemAuthenticator> {
         private Iterator<QueueItemAuthenticator> delegate = null;
 
         private IteratorImpl() {
-            final Jenkins jenkins = Jenkins.getInstance();
+            final Jenkins jenkins = Jenkins.getInstanceOrNull();
             providers = new ArrayList<QueueItemAuthenticatorProvider>(jenkins == null
                     ? Collections.<QueueItemAuthenticatorProvider>emptyList()
                     : jenkins.getExtensionList(QueueItemAuthenticatorProvider.class)).iterator();

File: core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java
Patch:
@@ -106,7 +106,7 @@ public Result getThreshold() {
     }
 
     private boolean shouldTrigger(Run upstreamBuild, TaskListener listener) {
-        Jenkins jenkins = Jenkins.getInstance();
+        Jenkins jenkins = Jenkins.getInstanceOrNull();
         if (jenkins == null || job == null) {
             return false;
         }
@@ -202,7 +202,7 @@ public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @Quer
             while(tokens.hasMoreTokens()) {
                 String projectName = tokens.nextToken().trim();
                 if (StringUtils.isNotBlank(projectName)) {
-                    Jenkins jenkins = Jenkins.getInstance();
+                    Jenkins jenkins = Jenkins.getInstanceOrNull();
                     if (jenkins == null) {
                         return FormValidation.ok();
                     }
@@ -253,7 +253,7 @@ public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @Quer
 
     @Extension public static class ItemListenerImpl extends ItemListener {
         @Override public void onLocationChanged(Item item, String oldFullName, String newFullName) {
-            Jenkins jenkins = Jenkins.getInstance();
+            Jenkins jenkins = Jenkins.getInstanceOrNull();
             if (jenkins == null) {
                 return;
             }

File: core/src/main/java/jenkins/util/JSONSignatureValidator.java
Patch:
@@ -134,7 +134,7 @@ protected Set<TrustAnchor> loadTrustAnchors(CertificateFactory cf) throws IOExce
         // if we trust default root CAs, we end up trusting anyone who has a valid certificate,
         // which isn't useful at all
         Set<TrustAnchor> anchors = new HashSet<TrustAnchor>(); // CertificateUtil.getDefaultRootCAs();
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) {
             return anchors;
         }

File: test/src/test/java/hudson/util/BootFailureTest.java
Patch:
@@ -74,7 +74,7 @@ public WebAppMain.FileAndDescription getHomeDir(ServletContextEvent event) {
 
     @After
     public void tearDown() {
-        Jenkins j = Jenkins.getInstance();
+        Jenkins j = Jenkins.getInstanceOrNull();
         if (j != null) {
             j.cleanUp();
         }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -178,6 +178,7 @@
 import hudson.util.Memoizer;
 import hudson.util.MultipartFormDataParser;
 import hudson.util.NamingThreadFactory;
+import hudson.util.PluginServletFilter;
 import hudson.util.RemotingDiagnostics;
 import hudson.util.RemotingDiagnostics.HeapDump;
 import hudson.util.TextFile;
@@ -2901,6 +2902,8 @@ public void run() {
                 LOGGER.log(Level.WARNING, "Failed to shut down properly",e);
             }
 
+        PluginServletFilter.cleanUp();
+
         LogFactory.releaseAll();
 
         theInstance = null;

File: core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java
Patch:
@@ -106,8 +106,8 @@ public Result getThreshold() {
     }
 
     private boolean shouldTrigger(Run upstreamBuild, TaskListener listener) {
-        Jenkins jenkins = Jenkins.getInstanceOrNull();
-        if (jenkins == null || job == null) {
+        Jenkins jenkins = Jenkins.getInstance();
+        if (job == null) {
             return false;
         }
         // This checks Item.READ also on parent folders; note we are checking as the upstream auth currently:

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -4131,7 +4131,7 @@ protected Future<?> _connect(boolean forceReconnect) {
     }
 
     /**
-     * Shortcut for {@code Jenkins.getInstance().lookup.get(type)}
+     * Shortcut for {@code Jenkins.getInstanceOrNull()?.lookup.get(type)}
      */
     public static @CheckForNull <T> T lookup(Class<T> type) {
         Jenkins j = Jenkins.getInstanceOrNull();

File: core/src/main/java/hudson/model/UsageStatistics.java
Patch:
@@ -96,7 +96,7 @@ public UsageStatistics(String keyImage) {
      * Returns true if it's time for us to check for new version.
      */
     public boolean isDue() {
-        final Jenkins j = Jenkins.getInstanceOrNull();
+        final Jenkins j = Jenkins.getInstanceOrNull(); // TODO getInsance once JENKINS-33377 is merged
         // user opted out or Jenkins not fully initialized. no data collection.
         if (j == null || j.isUsageStatisticsCollected() || DISABLED || COMPLETED.compareTo(j.getInitLevel()) > 0) {
             return false;

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -848,6 +848,9 @@ public Object getDynamic(String token, StaplerRequest req,
      * @see RunMap
      */
     public File getBuildDir() {
+        // we use the null check variant so that people can write true unit tests with a mock ItemParent
+        // and without a JenkinsRule. Such tests are of limited utility as there is a high risk of hitting
+        // some code that needs the singleton, but for persistence migration test cases it makes sense to permit
         Jenkins j = Jenkins.getInstanceOrNull();
         if (j == null) {
             return new File(getRootDir(), "builds");

File: core/src/main/java/hudson/TcpSlaveAgentListener.java
Patch:
@@ -204,7 +204,7 @@ private void error(PrintWriter out, String msg) throws IOException {
      * This extension provides a Ping protocol that allows people to verify that the TcpSlaveAgentListener is alive.
      * We also use this to wake the acceptor thread on termination.
      *
-     * @since TODO
+     * @since 1.653
      */
     @Extension
     public static class PingAgentProtocol extends AgentProtocol {

File: core/src/main/java/hudson/TcpSlaveAgentListener.java
Patch:
@@ -202,8 +202,9 @@ private void error(PrintWriter out, String msg) throws IOException {
 
     /**
      * This extension provides a Ping protocol that allows people to verify that the TcpSlaveAgentListener is alive.
-     * We also use this
-     * @since
+     * We also use this to wake the acceptor thread on termination.
+     *
+     * @since TODO
      */
     @Extension
     public static class PingAgentProtocol extends AgentProtocol {

File: core/src/main/java/hudson/cli/CLIAction.java
Patch:
@@ -78,7 +78,7 @@ public void doCommand(StaplerRequest req, StaplerResponse rsp) throws ServletExc
         final String commandName = req.getRestOfPath().substring(1);
         CLICommand command = CLICommand.clone(commandName);
         if (command == null) {
-            rsp.sendError(HttpServletResponse.SC_NOT_FOUND, "No such command " + commandName);
+            rsp.sendError(HttpServletResponse.SC_NOT_FOUND, "No such command");
             return;
         }
 

File: core/src/main/java/hudson/cli/CLIAction.java
Patch:
@@ -78,7 +78,7 @@ public void doCommand(StaplerRequest req, StaplerResponse rsp) throws ServletExc
         final String commandName = req.getRestOfPath().substring(1);
         CLICommand command = CLICommand.clone(commandName);
         if (command == null) {
-            rsp.sendError(HttpServletResponse.SC_NOT_FOUND, "No such command " + commandName);
+            rsp.sendError(HttpServletResponse.SC_NOT_FOUND, "No such command");
             return;
         }
 

File: test/src/test/java/hudson/cli/CLIRegistererTest.java
Patch:
@@ -3,7 +3,7 @@
 import static hudson.cli.CLICommandInvoker.Matcher.failedWith;
 import static hudson.cli.CLICommandInvoker.Matcher.succeededSilently;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
 
 import jenkins.model.Jenkins;

File: test/src/test/java/hudson/cli/GroovyshCommandTest.java
Patch:
@@ -27,7 +27,7 @@
 import static hudson.cli.CLICommandInvoker.Matcher.*;
 import jenkins.model.Jenkins;
 import org.apache.tools.ant.filters.StringInputStream;
-import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;

File: test/src/test/java/hudson/cli/HelpCommandTest.java
Patch:
@@ -27,7 +27,6 @@
 import static hudson.cli.CLICommandInvoker.Matcher.*;
 import static org.junit.Assert.*;
 import static org.hamcrest.CoreMatchers.*;
-import static org.hamcrest.Matchers.*;
 import static org.hamcrest.text.StringContainsInOrder.stringContainsInOrder;
 
 import java.io.PrintStream;

File: core/src/main/java/hudson/tools/DownloadFromUrlInstaller.java
Patch:
@@ -136,7 +136,7 @@ public Downloadable createDownloadable() {
                 final DownloadFromUrlInstaller.DescriptorImpl delegate = (DownloadFromUrlInstaller.DescriptorImpl)this;
                 return new Downloadable(getId()) {
                     public JSONObject reduce(List<JSONObject> jsonList) {
-                        if (isDefualtSchema(jsonList)) {
+                        if (isDefaultSchema(jsonList)) {
                             return delegate.reduce(jsonList);
                         } else {
                             //if it's not default schema fall back to the super class implementation
@@ -153,7 +153,7 @@ public JSONObject reduce(List<JSONObject> jsonList) {
          * @param jsonList the list of Update centers json files
          * @return true if the schema is the default one (id, name, url), false otherwise
          */
-        private boolean isDefualtSchema(List<JSONObject> jsonList) {
+        private boolean isDefaultSchema(List<JSONObject> jsonList) {
             JSONObject jsonToolInstallerList = jsonList.get(0);
             ToolInstallerList toolInstallerList = (ToolInstallerList) JSONObject.toBean(jsonToolInstallerList, ToolInstallerList.class);
 

File: core/src/main/java/hudson/model/AsyncAperiodicWork.java
Patch:
@@ -198,7 +198,7 @@ protected StreamTaskListener createListener() {
      * Determines the log file that records the result of this task.
      */
     protected File getLogFile() {
-        return new File(Jenkins.getInstance().getRootDir(),"logs/tasks/"+name+".log");
+        return new File(Jenkins.getActiveInstance().getRootDir(),"logs/tasks/"+name+".log");
     }
 
     /**

File: core/src/main/java/hudson/model/AsyncAperiodicWork.java
Patch:
@@ -161,8 +161,8 @@ protected StreamTaskListener createListener() {
                                         o);
                             }
                         }
-                        p = o;
                     }
+                    p = o;
                 }
             }
         }

File: core/src/main/java/hudson/model/AsyncPeriodicWork.java
Patch:
@@ -144,8 +144,8 @@ protected StreamTaskListener createListener() {
                                         o);
                             }
                         }
-                        p = o;
                     }
+                    p = o;
                 }
             }
         }

File: core/src/main/java/hudson/model/queue/WorkUnit.java
Patch:
@@ -71,6 +71,9 @@ public final class WorkUnit {
 
     public void setExecutor(@CheckForNull Executor e) {
         executor = e;
+        if (e != null) {
+            context.future.addExecutor(e);
+        }
     }
 
     /**

File: core/src/main/java/hudson/cli/CLIAction.java
Patch:
@@ -71,7 +71,7 @@ public String getUrlName() {
     }
 
     public void doCommand(StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {
-        final Jenkins jenkins = Jenkins.getInstance();
+        final Jenkins jenkins = Jenkins.getActiveInstance();
         jenkins.checkPermission(Jenkins.READ);
 
         // Strip trailing slash
@@ -112,7 +112,7 @@ public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object nod
 
                 FullDuplexHttpChannel server;
                 if(req.getHeader("Side").equals("download")) {
-                    duplexChannels.put(uuid,server=new FullDuplexHttpChannel(uuid, !Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER)) {
+                    duplexChannels.put(uuid,server=new FullDuplexHttpChannel(uuid, !Jenkins.getActiveInstance().hasPermission(Jenkins.ADMINISTER)) {
                         @Override
                         protected void main(Channel channel) throws IOException, InterruptedException {
                             // capture the identity given by the transport, since this can be useful for SecurityRealm.createCliAuthenticator()

File: core/src/main/java/hudson/cli/CliProtocol.java
Patch:
@@ -77,7 +77,7 @@ protected void runCli(Connection c) throws IOException, InterruptedException {
             Channel channel = cb
                     .withMode(Mode.BINARY)
                     .withRestricted(true)
-                    .withBaseLoader(Jenkins.getInstance().pluginManager.uberClassLoader)
+                    .withBaseLoader(Jenkins.getActiveInstance().pluginManager.uberClassLoader)
                     .build(new BufferedInputStream(c.in), new BufferedOutputStream(c.out));
 
             channel.setProperty(CliEntryPoint.class.getName(),new CliManagerImpl(channel));

File: core/src/main/java/hudson/cli/CliProtocol2.java
Patch:
@@ -60,7 +60,7 @@ public void run() throws IOException, InterruptedException {
 
                 try {
                     // HACK: TODO: move the transport support into modules
-                    Class<?> cls = Jenkins.getInstance().pluginManager.uberClassLoader.loadClass("org.jenkinsci.main.modules.instance_identity.InstanceIdentity");
+                    Class<?> cls = Jenkins.getActiveInstance().pluginManager.uberClassLoader.loadClass("org.jenkinsci.main.modules.instance_identity.InstanceIdentity");
                     Object iid = cls.getDeclaredMethod("get").invoke(null);
                     PrivateKey instanceId = (PrivateKey)cls.getDeclaredMethod("getPrivate").invoke(iid);
 

File: core/src/main/java/hudson/cli/ClientAuthenticationCache.java
Patch:
@@ -66,7 +66,7 @@ public FilePath call() throws IOException {
      * @return {@link jenkins.model.Jenkins#ANONYMOUS} if no such credential is found, or if the stored credential is invalid.
      */
     public Authentication get() {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getActiveInstance();
         Secret userName = Secret.decrypt(props.getProperty(getPropertyKey()));
         if (userName==null) return Jenkins.ANONYMOUS; // failed to decrypt
         try {
@@ -83,7 +83,7 @@ public Authentication get() {
      * Computes the key that identifies this Hudson among other Hudsons that the user has a credential for.
      */
     private String getPropertyKey() {
-        String url = Jenkins.getInstance().getRootUrl();
+        String url = Jenkins.getActiveInstance().getRootUrl();
         if (url!=null)  return url;
         return Secret.fromString("key").toString();
     }
@@ -92,7 +92,7 @@ private String getPropertyKey() {
      * Persists the specified authentication.
      */
     public void set(Authentication a) throws IOException, InterruptedException {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getActiveInstance();
 
         // make sure that this security realm is capable of retrieving the authentication by name,
         // as it's not required.

File: core/src/main/java/hudson/cli/GroovyCommand.java
Patch:
@@ -63,7 +63,7 @@ public String getShortDescription() {
 
     protected int run() throws Exception {
         // this allows the caller to manipulate the JVM state, so require the execute script privilege.
-        Jenkins.getInstance().checkPermission(Jenkins.RUN_SCRIPTS);
+        Jenkins.getActiveInstance().checkPermission(Jenkins.RUN_SCRIPTS);
 
         Binding binding = new Binding();
         binding.setProperty("out",new PrintWriter(stdout,true));
@@ -73,7 +73,7 @@ protected int run() throws Exception {
         binding.setProperty("channel",channel);
         String j = getClientEnvironmentVariable("JOB_NAME");
         if (j!=null) {
-            Item job = Jenkins.getInstance().getItemByFullName(j);
+            Item job = Jenkins.getActiveInstance().getItemByFullName(j);
             binding.setProperty("currentJob", job);
             String b = getClientEnvironmentVariable("BUILD_NUMBER");
             if (b!=null && job instanceof AbstractProject) {
@@ -82,7 +82,7 @@ protected int run() throws Exception {
             }
         }
 
-        GroovyShell groovy = new GroovyShell(Jenkins.getInstance().getPluginManager().uberClassLoader, binding);
+        GroovyShell groovy = new GroovyShell(Jenkins.getActiveInstance().getPluginManager().uberClassLoader, binding);
         groovy.run(loadScript(),"RemoteClass",remaining.toArray(new String[remaining.size()]));
         return 0;
     }

File: core/src/main/java/hudson/cli/ListJobsCommand.java
Patch:
@@ -50,7 +50,7 @@ public String getShortDescription() {
     public String name;
 
     protected int run() throws Exception {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getActiveInstance();
         final Collection<TopLevelItem> jobs;
 
         // If name is given retrieve jobs for the given view.
@@ -70,8 +70,7 @@ protected int run() throws Exception {
                 }
                 // No view and no item group with the given name found.
                 else {
-                    stderr.println("No view or item group with the given name found");
-                    return -1;
+                    throw new IllegalArgumentException("No view or item group with the given name '" + name + "' found.");
                 }
             }
         }

File: core/src/main/java/hudson/cli/ListPluginsCommand.java
Patch:
@@ -47,7 +47,7 @@ public String getShortDescription() {
     public String name;
 
     protected int run() {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getActiveInstance();
         PluginManager pluginManager = h.getPluginManager();
 
         if (this.name != null) {
@@ -57,7 +57,7 @@ protected int run() {
                 printPlugin(plugin, plugin.getShortName().length(), plugin.getDisplayName().length());
             }
             else {
-                stderr.println(String.format("No plugin with the name '%s' found", this.name));
+                throw new IllegalArgumentException("No plugin with the name '" + name + "' found");
             }
         }
         else {

File: core/src/main/java/hudson/cli/RemoveJobFromViewCommand.java
Patch:
@@ -55,9 +55,8 @@ public String getShortDescription() {
     protected int run() throws Exception {
         view.checkPermission(View.CONFIGURE);
 
-        if (!(view instanceof DirectlyModifiableView)) throw new CmdLineException(
-                null, "'" + view.getDisplayName() + "' view can not be modified directly"
-        );
+        if (!(view instanceof DirectlyModifiableView))
+            throw new IllegalStateException("'" + view.getDisplayName() + "' view can not be modified directly");
 
         for (TopLevelItem job: jobs) {
             ((DirectlyModifiableView) view).remove(job);

File: core/src/main/java/hudson/cli/SetBuildDisplayNameCommand.java
Patch:
@@ -30,8 +30,7 @@ public String getShortDescription() {
     protected int run() throws Exception {
         Run<?, ?> run = job.getBuildByNumber(number);
         if (run == null) {
-            stderr.format("Build #%d does not exist\n", number);
-            return -1;
+            throw new IllegalArgumentException("Build #" + number + " does not exist");
         }
         run.checkPermission(Run.UPDATE);
 

File: core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java
Patch:
@@ -73,9 +73,9 @@ protected GenericItemOptionHandler(CmdLineParser parser, OptionDef option, Sette
             });
             T nearest = Items.findNearest(type(), src, j);
             if (nearest != null) {
-                throw new CmdLineException(owner, "No such job '" + src + "'; perhaps you meant '" + nearest.getFullName() + "'?");
+                throw new IllegalArgumentException("No such job '" + src + "'; perhaps you meant '" + nearest.getFullName() + "'?");
             } else {
-                throw new CmdLineException(owner, "No such job '" + src + "'");
+                throw new IllegalArgumentException("No such job '" + src + "'");
             }
         }
         setter.addValue(s);

File: core/src/main/java/hudson/cli/handlers/NodeOptionHandler.java
Patch:
@@ -54,7 +54,7 @@ public int parseArguments(Parameters params) throws CmdLineException {
         String nodeName = params.getParameter(0);
 
         final Node node = Jenkins.getInstance().getNode(nodeName);
-        if (node == null) throw new CmdLineException(owner, "No such node '" + nodeName + "'");
+        if (node == null) throw new IllegalArgumentException("No such node '" + nodeName + "'");
 
         setter.addValue(node);
         return 1;

File: test/src/test/java/hudson/cli/CLIRegistererTest.java
Patch:
@@ -26,8 +26,8 @@ public void testAuthWithSecurityRealmCLIAuthenticator() {
         CLICommandInvoker command = new CLICommandInvoker(j, "quiet-down");
 
         Result invocation = command.invokeWithArgs("--username", "foo", "--password", "invalid");
-        assertThat(invocation, failedWith(1));
-        assertThat(invocation.stderr(), containsString("BadCredentialsException: foo"));
+        assertThat(invocation, failedWith(7));
+        assertThat(invocation.stderr(), containsString("ERROR: Bad Credentials. Search the server log for "));
         assertThat("Unauthorized command was executed", Jenkins.getInstance().isQuietingDown(), is(false));
 
         invocation = command.invokeWithArgs("--username", "foo", "--password", "foo");

File: test/src/test/java/hudson/cli/CopyJobCommandTest.java
Patch:
@@ -124,11 +124,11 @@ public class CopyJobCommandTest {
             }
         });
         copyJobCommand.setTransportAuth(User.get("alice").impersonate());
-        assertThat(command.invokeWithArgs("d1/p", "d2/p"), failedWith(-1));
+        assertThat(command.invokeWithArgs("d1/p", "d2/p"), failedWith(3));
         copyJobCommand.setTransportAuth(User.get("bob").impersonate());
-        assertThat(command.invokeWithArgs("d1/p", "d2/p"), failedWith(-1));
+        assertThat(command.invokeWithArgs("d1/p", "d2/p"), failedWith(6));
         copyJobCommand.setTransportAuth(User.get("charlie").impersonate());
-        assertThat(command.invokeWithArgs("d1/p", "d2/p"), failedWith(-1));
+        assertThat(command.invokeWithArgs("d1/p", "d2/p"), failedWith(6));
         copyJobCommand.setTransportAuth(User.get("debbie").impersonate());
         assertThat(command.invokeWithArgs("d1/p", "d2/p"), succeededSilently());
         assertNotNull(d2.getItem("p"));

File: test/src/test/java/hudson/cli/CreateJobCommandTest.java
Patch:
@@ -78,7 +78,7 @@ public class CreateJobCommandTest {
             }
         });
         cmd.setTransportAuth(User.get("alice").impersonate());
-        assertThat(invoker.withStdin(new ByteArrayInputStream("<project/>".getBytes("US-ASCII"))).invokeWithArgs("d/p"), failedWith(-1));
+        assertThat(invoker.withStdin(new ByteArrayInputStream("<project/>".getBytes("US-ASCII"))).invokeWithArgs("d/p"), failedWith(6));
         cmd.setTransportAuth(User.get("bob").impersonate());
         assertThat(invoker.withStdin(new ByteArrayInputStream("<project/>".getBytes("US-ASCII"))).invokeWithArgs("d/p"), succeededSilently());
         assertNotNull(d.getItem("p"));

File: test/src/test/java/hudson/cli/SetBuildDisplayNameCommandTest.java
Patch:
@@ -57,9 +57,9 @@ public class SetBuildDisplayNameCommandTest {
                 .invokeWithArgs("project", "42", "DisplayName")
         ;
 
-        assertThat(result.stderr(), containsString("Build #42 does not exist"));
+        assertThat(result.stderr(), containsString("ERROR: Build #42 does not exist"));
         assertThat(result, hasNoStandardOutput());
-        assertThat(result, failedWith(-1));
+        assertThat(result, failedWith(3));
     }
 
     @Test public void setDescriptionSuccessfully() throws Exception {

File: test/src/test/java/jenkins/security/Security218CliTest.java
Patch:
@@ -76,7 +76,7 @@ public void probeGroovy1() throws Exception {
     @Test
     @Issue("SECURITY-218")
     public void probeSpring1() throws Exception {
-        probe(Payload.Spring1, -1);
+        probe(Payload.Spring1, 1);
     }
     
     private void probe(Payload payload, int expectedResultCode) throws Exception {

File: core/src/main/java/hudson/ExtensionFinder.java
Patch:
@@ -175,7 +175,7 @@ public <T> Collection<ExtensionComponent<T>> _find(Class<T> type, Hudson hudson)
      * from here.
      *
      * <p>
-     * See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6459208 for how to force a class initialization.
+     * See https://bugs.openjdk.java.net/browse/JDK-4993813 for how to force a class initialization.
      * Also see http://kohsuke.org/2010/09/01/deadlock-that-you-cant-avoid/ for how class initialization
      * can results in a dead lock.
      */
@@ -668,8 +668,7 @@ public void scout(Class extensionType, Hudson hudson) {
                         extType = ((Method)e).getReturnType();
                     } else
                         throw new AssertionError();
-                    // according to http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6459208
-                    // this appears to be the only way to force a class initialization
+                    // according to JDK-4993813 this is the only way to force class initialization
                     Class.forName(extType.getName(),true,extType.getClassLoader());
                 } catch (Exception | LinkageError e) {
                     LOGGER.log(logLevel(item), "Failed to scout "+item.className(), e);

File: core/src/main/java/hudson/util/jna/InitializationErrorInvocationHandler.java
Patch:
@@ -12,7 +12,6 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.487
- * @see <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7199848">Related bug report against JDK</a>
  */
 public class InitializationErrorInvocationHandler implements InvocationHandler {
     private final Throwable cause;

File: core/src/main/java/hudson/ExtensionFinder.java
Patch:
@@ -175,7 +175,7 @@ public <T> Collection<ExtensionComponent<T>> _find(Class<T> type, Hudson hudson)
      * from here.
      *
      * <p>
-     * See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6459208 for how to force a class initialization.
+     * See https://bugs.openjdk.java.net/browse/JDK-4993813 for how to force a class initialization.
      * Also see http://kohsuke.org/2010/09/01/deadlock-that-you-cant-avoid/ for how class initialization
      * can results in a dead lock.
      */
@@ -668,8 +668,7 @@ public void scout(Class extensionType, Hudson hudson) {
                         extType = ((Method)e).getReturnType();
                     } else
                         throw new AssertionError();
-                    // according to http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6459208
-                    // this appears to be the only way to force a class initialization
+                    // according to JDK-4993813 this is the only way to force class initialization
                     Class.forName(extType.getName(),true,extType.getClassLoader());
                 } catch (Exception | LinkageError e) {
                     LOGGER.log(logLevel(item), "Failed to scout "+item.className(), e);

File: core/src/main/java/hudson/util/jna/InitializationErrorInvocationHandler.java
Patch:
@@ -12,7 +12,6 @@
  *
  * @author Kohsuke Kawaguchi
  * @since 1.487
- * @see <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7199848">Related bug report against JDK</a>
  */
 public class InitializationErrorInvocationHandler implements InvocationHandler {
     private final Throwable cause;

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -211,6 +211,7 @@ public Transformer getCompatibilityTransformer() {
     }
 
     public Api getApi() {
+        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         return new Api(this);
     }
 

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -218,6 +218,7 @@ public String getDisplayName() {
     }
 
     public Api getApi() {
+        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         return new Api(this);
     }
 

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -175,6 +175,7 @@ public UpdateCenter() {
     }
 
     public Api getApi() {
+        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         return new Api(this);
     }
 

File: core/src/test/java/hudson/UtilTest.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.Locale;
 import java.util.Properties;
 import java.util.concurrent.Callable;
+import java.util.concurrent.atomic.AtomicReference;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileInputStream;

File: core/src/main/java/hudson/cli/CLIAction.java
Patch:
@@ -71,7 +71,7 @@ public String getUrlName() {
     }
 
     public void doCommand(StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {
-        final Jenkins jenkins = Jenkins.getInstance();
+        final Jenkins jenkins = Jenkins.getActiveInstance();
         jenkins.checkPermission(Jenkins.READ);
 
         // Strip trailing slash
@@ -112,7 +112,7 @@ public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object nod
 
                 FullDuplexHttpChannel server;
                 if(req.getHeader("Side").equals("download")) {
-                    duplexChannels.put(uuid,server=new FullDuplexHttpChannel(uuid, !Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER)) {
+                    duplexChannels.put(uuid,server=new FullDuplexHttpChannel(uuid, !Jenkins.getActiveInstance().hasPermission(Jenkins.ADMINISTER)) {
                         @Override
                         protected void main(Channel channel) throws IOException, InterruptedException {
                             // capture the identity given by the transport, since this can be useful for SecurityRealm.createCliAuthenticator()

File: core/src/main/java/hudson/cli/CliProtocol.java
Patch:
@@ -77,7 +77,7 @@ protected void runCli(Connection c) throws IOException, InterruptedException {
             Channel channel = cb
                     .withMode(Mode.BINARY)
                     .withRestricted(true)
-                    .withBaseLoader(Jenkins.getInstance().pluginManager.uberClassLoader)
+                    .withBaseLoader(Jenkins.getActiveInstance().pluginManager.uberClassLoader)
                     .build(new BufferedInputStream(c.in), new BufferedOutputStream(c.out));
 
             channel.setProperty(CliEntryPoint.class.getName(),new CliManagerImpl(channel));

File: core/src/main/java/hudson/cli/CliProtocol2.java
Patch:
@@ -60,7 +60,7 @@ public void run() throws IOException, InterruptedException {
 
                 try {
                     // HACK: TODO: move the transport support into modules
-                    Class<?> cls = Jenkins.getInstance().pluginManager.uberClassLoader.loadClass("org.jenkinsci.main.modules.instance_identity.InstanceIdentity");
+                    Class<?> cls = Jenkins.getActiveInstance().pluginManager.uberClassLoader.loadClass("org.jenkinsci.main.modules.instance_identity.InstanceIdentity");
                     Object iid = cls.getDeclaredMethod("get").invoke(null);
                     PrivateKey instanceId = (PrivateKey)cls.getDeclaredMethod("getPrivate").invoke(iid);
 

File: core/src/main/java/hudson/cli/ClientAuthenticationCache.java
Patch:
@@ -66,7 +66,7 @@ public FilePath call() throws IOException {
      * @return {@link jenkins.model.Jenkins#ANONYMOUS} if no such credential is found, or if the stored credential is invalid.
      */
     public Authentication get() {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getActiveInstance();
         Secret userName = Secret.decrypt(props.getProperty(getPropertyKey()));
         if (userName==null) return Jenkins.ANONYMOUS; // failed to decrypt
         try {
@@ -83,7 +83,7 @@ public Authentication get() {
      * Computes the key that identifies this Hudson among other Hudsons that the user has a credential for.
      */
     private String getPropertyKey() {
-        String url = Jenkins.getInstance().getRootUrl();
+        String url = Jenkins.getActiveInstance().getRootUrl();
         if (url!=null)  return url;
         return Secret.fromString("key").toString();
     }
@@ -92,7 +92,7 @@ private String getPropertyKey() {
      * Persists the specified authentication.
      */
     public void set(Authentication a) throws IOException, InterruptedException {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getActiveInstance();
 
         // make sure that this security realm is capable of retrieving the authentication by name,
         // as it's not required.

File: core/src/main/java/hudson/cli/GroovyCommand.java
Patch:
@@ -63,7 +63,7 @@ public String getShortDescription() {
 
     protected int run() throws Exception {
         // this allows the caller to manipulate the JVM state, so require the execute script privilege.
-        Jenkins.getInstance().checkPermission(Jenkins.RUN_SCRIPTS);
+        Jenkins.getActiveInstance().checkPermission(Jenkins.RUN_SCRIPTS);
 
         Binding binding = new Binding();
         binding.setProperty("out",new PrintWriter(stdout,true));
@@ -73,7 +73,7 @@ protected int run() throws Exception {
         binding.setProperty("channel",channel);
         String j = getClientEnvironmentVariable("JOB_NAME");
         if (j!=null) {
-            Item job = Jenkins.getInstance().getItemByFullName(j);
+            Item job = Jenkins.getActiveInstance().getItemByFullName(j);
             binding.setProperty("currentJob", job);
             String b = getClientEnvironmentVariable("BUILD_NUMBER");
             if (b!=null && job instanceof AbstractProject) {
@@ -82,7 +82,7 @@ protected int run() throws Exception {
             }
         }
 
-        GroovyShell groovy = new GroovyShell(Jenkins.getInstance().getPluginManager().uberClassLoader, binding);
+        GroovyShell groovy = new GroovyShell(Jenkins.getActiveInstance().getPluginManager().uberClassLoader, binding);
         groovy.run(loadScript(),"RemoteClass",remaining.toArray(new String[remaining.size()]));
         return 0;
     }

File: core/src/main/java/hudson/cli/ListJobsCommand.java
Patch:
@@ -50,7 +50,7 @@ public String getShortDescription() {
     public String name;
 
     protected int run() throws Exception {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getActiveInstance();
         final Collection<TopLevelItem> jobs;
 
         // If name is given retrieve jobs for the given view.
@@ -70,8 +70,7 @@ protected int run() throws Exception {
                 }
                 // No view and no item group with the given name found.
                 else {
-                    stderr.println("No view or item group with the given name found");
-                    return -1;
+                    throw new IllegalArgumentException("No view or item group with the given name '" + name + "' found.");
                 }
             }
         }

File: core/src/main/java/hudson/cli/ListPluginsCommand.java
Patch:
@@ -47,7 +47,7 @@ public String getShortDescription() {
     public String name;
 
     protected int run() {
-        Jenkins h = Jenkins.getInstance();
+        Jenkins h = Jenkins.getActiveInstance();
         PluginManager pluginManager = h.getPluginManager();
 
         if (this.name != null) {
@@ -57,7 +57,7 @@ protected int run() {
                 printPlugin(plugin, plugin.getShortName().length(), plugin.getDisplayName().length());
             }
             else {
-                stderr.println(String.format("No plugin with the name '%s' found", this.name));
+                throw new IllegalArgumentException("No plugin with the name '" + name + "' found");
             }
         }
         else {

File: core/src/main/java/hudson/cli/RemoveJobFromViewCommand.java
Patch:
@@ -55,9 +55,8 @@ public String getShortDescription() {
     protected int run() throws Exception {
         view.checkPermission(View.CONFIGURE);
 
-        if (!(view instanceof DirectlyModifiableView)) throw new CmdLineException(
-                null, "'" + view.getDisplayName() + "' view can not be modified directly"
-        );
+        if (!(view instanceof DirectlyModifiableView))
+            throw new IllegalStateException("'" + view.getDisplayName() + "' view can not be modified directly");
 
         for (TopLevelItem job: jobs) {
             ((DirectlyModifiableView) view).remove(job);

File: core/src/main/java/hudson/cli/SetBuildDisplayNameCommand.java
Patch:
@@ -30,8 +30,7 @@ public String getShortDescription() {
     protected int run() throws Exception {
         Run<?, ?> run = job.getBuildByNumber(number);
         if (run == null) {
-            stderr.format("Build #%d does not exist\n", number);
-            return -1;
+            throw new IllegalArgumentException("Build #" + number + " does not exist");
         }
         run.checkPermission(Run.UPDATE);
 

File: core/src/main/java/hudson/cli/handlers/GenericItemOptionHandler.java
Patch:
@@ -73,9 +73,9 @@ protected GenericItemOptionHandler(CmdLineParser parser, OptionDef option, Sette
             });
             T nearest = Items.findNearest(type(), src, j);
             if (nearest != null) {
-                throw new CmdLineException(owner, "No such job '" + src + "'; perhaps you meant '" + nearest.getFullName() + "'?");
+                throw new IllegalArgumentException("No such job '" + src + "'; perhaps you meant '" + nearest.getFullName() + "'?");
             } else {
-                throw new CmdLineException(owner, "No such job '" + src + "'");
+                throw new IllegalArgumentException("No such job '" + src + "'");
             }
         }
         setter.addValue(s);

File: core/src/main/java/hudson/cli/handlers/NodeOptionHandler.java
Patch:
@@ -54,7 +54,7 @@ public int parseArguments(Parameters params) throws CmdLineException {
         String nodeName = params.getParameter(0);
 
         final Node node = Jenkins.getInstance().getNode(nodeName);
-        if (node == null) throw new CmdLineException(owner, "No such node '" + nodeName + "'");
+        if (node == null) throw new IllegalArgumentException("No such node '" + nodeName + "'");
 
         setter.addValue(node);
         return 1;

File: test/src/test/java/hudson/cli/CLIRegistererTest.java
Patch:
@@ -26,8 +26,8 @@ public void testAuthWithSecurityRealmCLIAuthenticator() {
         CLICommandInvoker command = new CLICommandInvoker(j, "quiet-down");
 
         Result invocation = command.invokeWithArgs("--username", "foo", "--password", "invalid");
-        assertThat(invocation, failedWith(1));
-        assertThat(invocation.stderr(), containsString("BadCredentialsException: foo"));
+        assertThat(invocation, failedWith(7));
+        assertThat(invocation.stderr(), containsString("ERROR: Bad Credentials. Search the server log for "));
         assertThat("Unauthorized command was executed", Jenkins.getInstance().isQuietingDown(), is(false));
 
         invocation = command.invokeWithArgs("--username", "foo", "--password", "foo");

File: test/src/test/java/hudson/cli/CopyJobCommandTest.java
Patch:
@@ -124,11 +124,11 @@ public class CopyJobCommandTest {
             }
         });
         copyJobCommand.setTransportAuth(User.get("alice").impersonate());
-        assertThat(command.invokeWithArgs("d1/p", "d2/p"), failedWith(-1));
+        assertThat(command.invokeWithArgs("d1/p", "d2/p"), failedWith(3));
         copyJobCommand.setTransportAuth(User.get("bob").impersonate());
-        assertThat(command.invokeWithArgs("d1/p", "d2/p"), failedWith(-1));
+        assertThat(command.invokeWithArgs("d1/p", "d2/p"), failedWith(6));
         copyJobCommand.setTransportAuth(User.get("charlie").impersonate());
-        assertThat(command.invokeWithArgs("d1/p", "d2/p"), failedWith(-1));
+        assertThat(command.invokeWithArgs("d1/p", "d2/p"), failedWith(6));
         copyJobCommand.setTransportAuth(User.get("debbie").impersonate());
         assertThat(command.invokeWithArgs("d1/p", "d2/p"), succeededSilently());
         assertNotNull(d2.getItem("p"));

File: test/src/test/java/hudson/cli/CreateJobCommandTest.java
Patch:
@@ -78,7 +78,7 @@ public class CreateJobCommandTest {
             }
         });
         cmd.setTransportAuth(User.get("alice").impersonate());
-        assertThat(invoker.withStdin(new ByteArrayInputStream("<project/>".getBytes("US-ASCII"))).invokeWithArgs("d/p"), failedWith(-1));
+        assertThat(invoker.withStdin(new ByteArrayInputStream("<project/>".getBytes("US-ASCII"))).invokeWithArgs("d/p"), failedWith(6));
         cmd.setTransportAuth(User.get("bob").impersonate());
         assertThat(invoker.withStdin(new ByteArrayInputStream("<project/>".getBytes("US-ASCII"))).invokeWithArgs("d/p"), succeededSilently());
         assertNotNull(d.getItem("p"));

File: test/src/test/java/hudson/cli/SetBuildDisplayNameCommandTest.java
Patch:
@@ -57,9 +57,9 @@ public class SetBuildDisplayNameCommandTest {
                 .invokeWithArgs("project", "42", "DisplayName")
         ;
 
-        assertThat(result.stderr(), containsString("Build #42 does not exist"));
+        assertThat(result.stderr(), containsString("ERROR: Build #42 does not exist"));
         assertThat(result, hasNoStandardOutput());
-        assertThat(result, failedWith(-1));
+        assertThat(result, failedWith(3));
     }
 
     @Test public void setDescriptionSuccessfully() throws Exception {

File: test/src/test/java/jenkins/security/Security218CliTest.java
Patch:
@@ -76,7 +76,7 @@ public void probeGroovy1() throws Exception {
     @Test
     @Issue("SECURITY-218")
     public void probeSpring1() throws Exception {
-        probe(Payload.Spring1, -1);
+        probe(Payload.Spring1, 1);
     }
     
     private void probe(Payload payload, int expectedResultCode) throws Exception {

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -440,12 +440,12 @@ class PluginClassOwnership implements ClassOwnership {
     private static class BlacklistedTypesConverter implements Converter {
         @Override
         public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
-            throw new UnsupportedOperationException("Refusing to marshal for security reasons");
+            throw new UnsupportedOperationException("Refusing to marshal " + source.getClass().getName() + " for security reasons");
         }
 
         @Override
         public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
-            throw new ConversionException("Refusing to unmarshal for security reasons");
+            throw new ConversionException("Refusing to unmarshal " + reader.getNodeName() + " for security reasons");
         }
 
         @Override

File: test/src/test/java/jenkins/model/JenkinsLocationConfigurationTest.java
Patch:
@@ -1,6 +1,7 @@
 package jenkins.model;
 
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.containsString;
 
 import com.gargoylesoftware.htmlunit.html.HtmlInput;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
@@ -24,6 +25,6 @@ public void localhostWarning() throws Exception {
         HtmlPage p = j.createWebClient().goTo("configure");
         HtmlInput url = p.getFormByName("config").getInputByName("_.url");
         url.setValueAttribute("http://localhost:1234/");
-        assertTrue(p.getDocumentElement().getTextContent().contains("instead of localhost"));
+        assertThat(p.getDocumentElement().getTextContent(), containsString("instead of localhost"));
     }
 }

File: core/src/main/java/hudson/util/ArgumentListBuilder.java
Patch:
@@ -317,8 +317,8 @@ public ArgumentListBuilder toWindowsCommand(boolean escapeVars) {
     	ArgumentListBuilder windowsCommand = new ArgumentListBuilder().add("cmd.exe", "/C");
         boolean quoted, percent;
         for (int i = 0; i < args.size(); i++) {
-        	StringBuilder quotedArgs = new StringBuilder();
-        	String arg = args.get(i);
+            StringBuilder quotedArgs = new StringBuilder();
+            String arg = args.get(i);
             quoted = percent = false;
             for (int j = 0; j < arg.length(); j++) {
                 char c = arg.charAt(j);

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -162,7 +162,8 @@ private static Manifest loadLinkedManifest(File archive) throws IOException {
             if (archive.isDirectory()) {// already expanded
                 expandDir = archive;
             } else {
-                expandDir = new File(archive.getParentFile(), getBaseName(archive.getName()));
+                File f = pluginManager.getWorkDir();
+                expandDir =  new File(f == null ? archive.getParentFile() : f, getBaseName(archive.getName()));
                 explode(archive, expandDir);
             }
 

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -207,7 +207,7 @@ public PluginManager(ServletContext context, File rootDir) {
         if(!rootDir.exists())
             rootDir.mkdirs();
         String workDir = System.getProperty(PluginManager.class.getName()+".workDir");
-        if (workDir == null) {
+        if (workDir == null && context != null) {
             workDir = context.getInitParameter(PluginManager.class.getName() + ".workDir");
         }
         this.workDir = workDir == null ? null : new File(workDir);

File: core/src/main/java/hudson/init/impl/GroovyInitScript.java
Patch:
@@ -38,6 +38,6 @@
 public class GroovyInitScript {
     @Initializer(after=JOB_LOADED)
     public static void init(Jenkins j) {
-        new GroovyHookScript("init").run();
+        new GroovyHookScript("init", j.servletContext, j.getRootDir(), j.getPluginManager().uberClassLoader).run();
     }
 }

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -466,7 +466,9 @@ private void finish1(@CheckForNull Throwable problems) {
     }
 
     private void finish2() {
-        for (RuntimeException e1: owner.getTerminatedBy()) LOGGER.log(Level.WARNING, String.format("%s termination trace", getName()), e1);
+        for (RuntimeException e1 : owner.getTerminatedBy()) {
+            LOGGER.log(Level.FINE, String.format("%s termination trace", getName()), e1);
+        }
         if (causeOfDeath == null) {// let this thread die and be replaced by a fresh unstarted instance
             owner.removeExecutor(this);
         }

File: core/src/main/java/hudson/init/impl/GroovyInitScript.java
Patch:
@@ -38,6 +38,6 @@
 public class GroovyInitScript {
     @Initializer(after=JOB_LOADED)
     public static void init(Jenkins j) {
-        new GroovyHookScript("init").run();
+        new GroovyHookScript("init", j.servletContext, j.getRootDir(), j.getPluginManager().uberClassLoader).run();
     }
 }

File: core/src/main/java/hudson/cli/CLIAction.java
Patch:
@@ -78,7 +78,7 @@ public void doCommand(StaplerRequest req, StaplerResponse rsp) throws ServletExc
         final String commandName = req.getRestOfPath().substring(1);
         CLICommand command = CLICommand.clone(commandName);
         if (command == null) {
-            rsp.sendError(HttpServletResponse.SC_NOT_FOUND, "No such command " + commandName);
+            rsp.sendError(HttpServletResponse.SC_NOT_FOUND, "No such command");
             return;
         }
 

File: core/src/main/java/hudson/init/impl/GroovyInitScript.java
Patch:
@@ -38,6 +38,6 @@
 public class GroovyInitScript {
     @Initializer(after=JOB_LOADED)
     public static void init(Jenkins j) {
-        new GroovyHookScript("init").run();
+        new GroovyHookScript("init", j.servletContext, j.getRootDir(), j.getPluginManager().uberClassLoader).run();
     }
 }

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol3.java
Patch:
@@ -71,10 +71,10 @@ public void onClosed(Channel channel, IOException cause) {
                         });
             } catch (AbortException e) {
                 logw.println(e.getMessage());
-                logw.println("Failed to establish the connection with the slave");
+                logw.println("Failed to establish the connection with the agent");
                 throw e;
             } catch (IOException e) {
-                logw.println("Failed to establish the connection with the slave " + getNodeName());
+                logw.println("Failed to establish the connection with the agent " + getNodeName());
                 e.printStackTrace(logw);
                 throw e;
             }
@@ -93,7 +93,7 @@ public ChannelBuilder createChannelBuilder(String nodeName) {
         protected String getNodeSecret(String nodeName) throws Failure {
             computer = (SlaveComputer) Jenkins.getInstance().getComputer(nodeName);
             if (computer == null) {
-                throw new Failure("Slave trying to register for invalid node: " + nodeName);
+                throw new Failure("Agent trying to register for invalid node: " + nodeName);
             }
             return computer.getJnlpMac();
         }

File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java
Patch:
@@ -5,6 +5,7 @@
  */
 package hudson.security.csrf;
 
+import java.nio.charset.Charset;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.logging.Level;
@@ -96,7 +97,8 @@ public boolean validateCrumb(ServletRequest request, String salt, String crumb)
             String newCrumb = issueCrumb(request, salt);
             if ((newCrumb != null) && (crumb != null)) {
                 // String.equals() is not constant-time, but this is
-                return MessageDigest.isEqual(newCrumb.getBytes(), crumb.getBytes());
+                return MessageDigest.isEqual(newCrumb.getBytes(Charset.forName("US-ASCII")),
+                        crumb.getBytes(Charset.forName("US-ASCII")));
             }
         }
         return false;

File: core/src/main/java/jenkins/security/ApiTokenProperty.java
Patch:
@@ -41,6 +41,7 @@
 import org.kohsuke.stapler.StaplerResponse;
 
 import java.io.IOException;
+import java.nio.charset.Charset;
 import java.security.MessageDigest;
 import java.security.SecureRandom;
 import javax.annotation.Nonnull;
@@ -111,7 +112,8 @@ public String getApiToken() {
 
     public boolean matchesPassword(String password) {
         String token = getApiTokenInsecure();
-        return MessageDigest.isEqual(password.getBytes(), token.getBytes());
+        return MessageDigest.isEqual(password.getBytes(Charset.forName("US-ASCII")),
+                token.getBytes(Charset.forName("US-ASCII")));
     }
     
     private boolean hasPermissionToSeeToken() {

File: core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java
Patch:
@@ -88,7 +88,7 @@ public boolean handle(String nodeName, JnlpServerHandshake handshake) throws IOE
      * @return
      * true if the slave secret matches the handshake secret, false otherwise.
      */
-    private boolean matchesSecret(String nodeName, JnlpSlaveHandshake handshake){
+    private boolean matchesSecret(String nodeName, JnlpServerHandshake handshake){
         SlaveComputer computer = (SlaveComputer) Jenkins.getInstance().getComputer(nodeName);
         String handshakeSecret = handshake.getRequestProperty("Secret-Key");
         // Verify that the slave secret matches the handshake secret.

File: core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java
Patch:
@@ -7,6 +7,7 @@
 import hudson.remoting.Channel;
 import hudson.slaves.SlaveComputer;
 import jenkins.model.Jenkins;
+import org.jenkinsci.remoting.engine.JnlpServerHandshake;
 
 import java.io.IOException;
 import java.security.SecureRandom;
@@ -25,7 +26,7 @@
 @Extension
 public class DefaultJnlpSlaveReceiver extends JnlpAgentReceiver {
     @Override
-    public boolean handle(String nodeName, JnlpSlaveHandshake handshake) throws IOException, InterruptedException {
+    public boolean handle(String nodeName, JnlpServerHandshake handshake) throws IOException, InterruptedException {
         SlaveComputer computer = (SlaveComputer) Jenkins.getInstance().getComputer(nodeName);
 
         if(computer==null) {

File: test/src/test/java/hudson/cli/HelpCommandTest.java
Patch:
@@ -101,7 +101,7 @@ private void assertContainsOverviewOfMethodCommand(String text) {
 
     private void assertContainsUsageOfMethodCommand(String text) {
         assertThat(text, containsString("offline-node NAME [-m VAL]"));
-        assertThat(text, containsStrings("NAME", "Slave name, or empty string for master"));
+        assertThat(text, containsStrings("NAME", "Agent name, or empty string for master"));
         assertThat(text, containsStrings("-m VAL", "Record the note about why you are disconnecting this node"));
     }
 

File: test/src/test/java/hudson/model/ExecutorTest.java
Patch:
@@ -140,7 +140,7 @@ public void disconnectCause() throws Exception {
         assertEquals(b.getResult(), Result.FAILURE);
         assertThat(log, containsString("Finished: FAILURE"));
         assertThat(log, containsString("Build step 'BlockingBuilder' marked build as failure"));
-        assertThat(log, containsString("Slave went offline during the build"));
+        assertThat(log, containsString("Agent went offline during the build"));
         assertThat(log, containsString("Disconnected by Johnny : Taking offline to break your buil"));
     }
 

File: test/src/test/java/hudson/cli/CreateNodeCommandTest.java
Patch:
@@ -60,7 +60,7 @@ public class CreateNodeCommandTest {
                 .invoke()
         ;
 
-        assertThat(result.stderr(), containsString("user is missing the Slave/Create permission"));
+        assertThat(result.stderr(), containsString("user is missing the Agent/Create permission"));
         assertThat(result, hasNoStandardOutput());
         assertThat(result, failedWith(-1));
     }

File: test/src/test/java/hudson/cli/DeleteNodeCommandTest.java
Patch:
@@ -62,7 +62,7 @@ public class DeleteNodeCommandTest {
 
         assertThat(result, failedWith(-1));
         assertThat(result, hasNoStandardOutput());
-        assertThat(result.stderr(), containsString("user is missing the Slave/Delete permission"));
+        assertThat(result.stderr(), containsString("user is missing the Agent/Delete permission"));
     }
 
     @Test public void deleteNodeShouldSucceed() throws Exception {

File: test/src/test/java/hudson/cli/GetNodeCommandTest.java
Patch:
@@ -59,7 +59,7 @@ public class GetNodeCommandTest {
                 .invokeWithArgs("MySlave")
         ;
 
-        assertThat(result.stderr(), containsString("user is missing the Slave/ExtendedRead permission"));
+        assertThat(result.stderr(), containsString("user is missing the Agent/ExtendedRead permission"));
         assertThat(result, failedWith(-1));
         assertThat(result, hasNoStandardOutput());
     }

File: test/src/test/java/hudson/cli/OnlineNodeCommandTest.java
Patch:
@@ -65,7 +65,7 @@ public class OnlineNodeCommandTest {
 
         assertThat(result, failedWith(1));
         assertThat(result, hasNoStandardOutput());
-        assertThat(result.stderr(), containsString("user is missing the Slave/Connect permission"));
+        assertThat(result.stderr(), containsString("user is missing the Agent/Connect permission"));
     }
 
     @Test public void onlineNodeShouldFailIfNodeDoesNotExist() throws Exception {
@@ -74,7 +74,7 @@ public class OnlineNodeCommandTest {
                 .invokeWithArgs("never_created");
         assertThat(result, failedWith(1));
         assertThat(result, hasNoStandardOutput());
-        assertThat(result.stderr(), containsString("No such slave \"never_created\" exists."));
+        assertThat(result.stderr(), containsString("No such agent \"never_created\" exists."));
 
     }
 

File: test/src/test/java/hudson/cli/UpdateNodeCommandTest.java
Patch:
@@ -60,7 +60,7 @@ public class UpdateNodeCommandTest {
                 .invokeWithArgs("MySlave")
         ;
 
-        assertThat(result.stderr(), containsString("user is missing the Slave/Configure permission"));
+        assertThat(result.stderr(), containsString("user is missing the Agent/Configure permission"));
         assertThat(result, failedWith(-1));
         assertThat(result, hasNoStandardOutput());
     }

File: test/src/test/java/hudson/model/ComputerTest.java
Patch:
@@ -84,7 +84,7 @@ public void testProhibitRenameOverExistingNode() throws Exception {
         } catch (FailingHttpStatusCodeException e) {
             assertThat(NOTE, e.getStatusCode(), equalTo(400));
             assertThat(NOTE, e.getResponse().getContentAsString(),
-                    containsString("Slave called ‘nodeA’ already exists"));
+                    containsString("Agent called ‘nodeA’ already exists"));
         }
     }
 }

File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java
Patch:
@@ -95,7 +95,7 @@ public boolean validateCrumb(ServletRequest request, String salt, String crumb)
         if (request instanceof HttpServletRequest) {
             String newCrumb = issueCrumb(request, salt);
             if ((newCrumb != null) && (crumb != null)) {
-                return newCrumb.equals(crumb);
+                return MessageDigest.isEqual(newCrumb.getBytes(), crumb.getBytes());
             }
         }
         return false;

File: core/src/main/java/jenkins/security/ApiTokenProperty.java
Patch:
@@ -41,6 +41,7 @@
 import org.kohsuke.stapler.StaplerResponse;
 
 import java.io.IOException;
+import java.security.MessageDigest;
 import java.security.SecureRandom;
 import javax.annotation.Nonnull;
 import org.apache.commons.lang.StringUtils;
@@ -109,7 +110,8 @@ public String getApiToken() {
     }
 
     public boolean matchesPassword(String password) {
-        return  getApiTokenInsecure().equals(password);
+        String token = getApiTokenInsecure();
+        return MessageDigest.isEqual(password.getBytes(), token.getBytes());
     }
     
     private boolean hasPermissionToSeeToken() {

File: core/src/main/java/hudson/cli/CLIAction.java
Patch:
@@ -78,7 +78,7 @@ public void doCommand(StaplerRequest req, StaplerResponse rsp) throws ServletExc
         final String commandName = req.getRestOfPath().substring(1);
         CLICommand command = CLICommand.clone(commandName);
         if (command == null) {
-            rsp.sendError(HttpServletResponse.SC_NOT_FOUND, "No such command " + commandName);
+            rsp.sendError(HttpServletResponse.SC_NOT_FOUND, "No such command");
             return;
         }
 

File: test/src/test/java/hudson/model/UpdateCenterConnectionStatusTest.java
Patch:
@@ -73,7 +73,7 @@ public void doConnectionStatus_unknown_site() throws IOException, SAXException {
     private UpdateSite updateSite = new UpdateSite(UpdateCenter.ID_DEFAULT, "http://xyz") {
         @Override
         public String getConnectionCheckUrl() {
-            return "http://xyz";
+            return "http://xyz./";
         }
     };
 

File: core/src/main/java/jenkins/install/InstallState.java
Patch:
@@ -43,7 +43,7 @@ public enum InstallState {
      */
     INITIAL_PLUGINS_INSTALLING,
     /**
-     * New Jenkins install. The initial set of plugins are not installed.
+     * New Jenkins install. The initial set of plugins are now installed.
      */
     INITIAL_PLUGINS_INSTALLED,
     /**

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -437,7 +437,7 @@ public void run(Reactor reactor) throws Exception {
     protected @Nonnull Set<String> loadPluginsFromWar(@Nonnull String fromPath, @CheckForNull FilenameFilter filter) {
         Set<String> names = new HashSet();
 
-        ServletContext context = Jenkins.getInstance().servletContext;
+        ServletContext context = Jenkins.getActiveInstance().servletContext;
         Set<String> plugins = Util.fixNull((Set<String>) context.getResourcePaths(fromPath));
         Set<URL> copiedPlugins = new HashSet<>();
         Set<URL> dependencies = new HashSet<>();
@@ -499,7 +499,7 @@ protected static void addDependencies(URL hpiResUrl, String fromPath, Set<URL> d
         String dependencySpec = manifest.getMainAttributes().getValue("Plugin-Dependencies");
         if (dependencySpec != null) {
             String[] dependencyTokens = dependencySpec.split(",");
-            ServletContext context = Jenkins.getInstance().servletContext;
+            ServletContext context = Jenkins.getActiveInstance().servletContext;
 
             for (String dependencyToken : dependencyTokens) {
                 if (dependencyToken.endsWith(";resolution:=optional")) {

File: core/src/main/java/jenkins/util/xml/XMLUtils.java
Patch:
@@ -59,7 +59,7 @@ public final class XMLUtils {
         documentBuilderFactory.setExpandEntityReferences(false);
         setDocumentBuilderFactoryFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
         setDocumentBuilderFactoryFeature(FEATURE_HTTP_XML_ORG_SAX_FEATURES_EXTERNAL_GENERAL_ENTITIES, false);
-        setDocumentBuilderFactoryFeature(FEATURE_HTTP_XML_ORG_SAX_FEATURES_EXTERNAL_PARAMETER_ENTITIES, true);
+        setDocumentBuilderFactoryFeature(FEATURE_HTTP_XML_ORG_SAX_FEATURES_EXTERNAL_PARAMETER_ENTITIES, false);
         setDocumentBuilderFactoryFeature("http://apache.org/xml/features/disallow-doctype-decl", true);        
     }    
     private static void setDocumentBuilderFactoryFeature(String feature, boolean state) {

File: core/src/main/java/hudson/model/Node.java
Patch:
@@ -35,7 +35,6 @@
 import hudson.model.Queue.Task;
 import hudson.model.labels.LabelAtom;
 import hudson.model.queue.CauseOfBlockage;
-import hudson.node_monitors.NodeMonitor;
 import hudson.remoting.Callable;
 import hudson.remoting.VirtualChannel;
 import hudson.security.ACL;
@@ -87,7 +86,6 @@
  * be used to associate new {@link Action}s to slaves.
  *
  * @author Kohsuke Kawaguchi
- * @see NodeMonitor
  * @see NodeDescriptor
  * @see Computer
  */

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -396,8 +396,10 @@ public void contextDestroyed(ServletContextEvent event) {
         if(instance!=null)
             instance.cleanUp();
         Thread t = initThread;
-        if (t!=null)
+        if (t != null && t.isAlive()) {
+            LOGGER.log(Level.INFO, "Shutting down a Jenkins instance that was still starting up", new Throwable("reason"));
             t.interrupt();
+        }
 
         // Logger is in the system classloader, so if we don't do this
         // the whole web app will never be undepoyed.

File: core/src/main/java/hudson/init/impl/GroovyInitScript.java
Patch:
@@ -38,6 +38,6 @@
 public class GroovyInitScript {
     @Initializer(after=JOB_LOADED)
     public static void init(Jenkins j) {
-        new GroovyHookScript("init").run();
+        new GroovyHookScript("init", j.servletContext, j.getRootDir(), j.getPluginManager().uberClassLoader).run();
     }
 }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -431,7 +431,7 @@ public class Jenkins extends AbstractCIBase implements DirectlyModifiableTopLeve
     private transient volatile boolean isQuietingDown;
     private transient volatile boolean terminating;
 
-    private List<JDK> jdks = new ArrayList<JDK>();
+    private volatile List<JDK> jdks = new ArrayList<JDK>();
 
     private transient volatile DependencyGraph dependencyGraph;
     private final transient AtomicBoolean dependencyGraphDirty = new AtomicBoolean();
@@ -1663,7 +1663,7 @@ public String getDisplayName() {
         return Messages.Hudson_DisplayName();
     }
 
-    public synchronized List<JDK> getJDKs() {
+    public List<JDK> getJDKs() {
         if(jdks==null)
             jdks = new ArrayList<JDK>();
         return jdks;
@@ -1676,7 +1676,7 @@ public synchronized List<JDK> getJDKs() {
      * set JDK installations from external code.
      */
     @Restricted(NoExternalUse.class)
-    public synchronized void setJDKs(Collection<? extends JDK> jdks) {
+    public void setJDKs(Collection<? extends JDK> jdks) {
         this.jdks = new ArrayList<JDK>(jdks);
     }
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -566,7 +566,7 @@ protected void onModified() throws IOException {
      * TCP slave agent port.
      * 0 for random, -1 to disable.
      */
-    private int slaveAgentPort =0;
+    private int slaveAgentPort = Integer.getInteger(Jenkins.class.getName()+".slaveAgentPort",0);
 
     /**
      * Whitespace-separated labels assigned to the master as a {@link Node}.

File: core/src/main/java/hudson/init/impl/GroovyInitScript.java
Patch:
@@ -38,6 +38,6 @@
 public class GroovyInitScript {
     @Initializer(after=JOB_LOADED)
     public static void init(Jenkins j) {
-        new GroovyHookScript("init").run();
+        new GroovyHookScript("init", j.servletContext, j.getRootDir(), j.getPluginManager().uberClassLoader).run();
     }
 }

File: core/src/main/java/hudson/WebAppMain.java
Patch:
@@ -396,8 +396,10 @@ public void contextDestroyed(ServletContextEvent event) {
         if(instance!=null)
             instance.cleanUp();
         Thread t = initThread;
-        if (t!=null)
+        if (t != null && t.isAlive()) {
+            LOGGER.log(Level.INFO, "Shutting down a Jenkins instance that was still starting up", new Throwable("reason"));
             t.interrupt();
+        }
 
         // Logger is in the system classloader, so if we don't do this
         // the whole web app will never be undepoyed.

File: core/src/main/java/hudson/DNSMultiCast.java
Patch:
@@ -66,7 +66,8 @@ public Object call() {
                     jmdns.registerService(ServiceInfo.create("_http._tcp.local.","Jenkins",
                             jenkins_port,0,0,props));
                 } catch (IOException e) {
-                    LOGGER.log(Level.WARNING,"Failed to advertise the service to DNS multi-cast",e);
+                    LOGGER.log(Level.INFO, "Cannot advertise service to DNS multi-cast, skipping: {0}", e);
+                    LOGGER.log(Level.FINE, null, e);
                 }
                 return null;
             }

File: test/src/test/java/hudson/model/ParametersDefinitionPropertyTest.java
Patch:
@@ -28,7 +28,6 @@
 import net.sf.json.JSONObject;
 import org.junit.Test;
 import static org.junit.Assert.*;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
@@ -40,7 +39,6 @@ public class ParametersDefinitionPropertyTest {
     @Rule
     public JenkinsRule r = new JenkinsRule();
 
-    @Ignore("TODO after 600b1f0 (#1888): NoStaplerConstructorException: There's no @DataBoundConstructor on any constructor of class hudson.model.ParametersDefinitionPropertyTest$KrazyParameterDefinition")
     @Issue("JENKINS-31458")
     @Test
     public void customNewInstance() throws Exception {

File: core/src/main/java/hudson/security/csrf/CrumbFilter.java
Patch:
@@ -80,8 +80,8 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
                     LOGGER.log(Level.WARNING, "Found invalid crumb {0}.  Will check remaining parameters for a valid one...", crumb);
                 }
             }
-            // Multipart requests need to be handled by each handler.
-            if (valid || isMultipart(httpRequest)) {
+
+            if (valid) {
                 chain.doFilter(request, response);
             } else {
                 LOGGER.log(Level.WARNING, "No valid crumb was included in request for {0}. Returning {1}.", new Object[] {httpRequest.getRequestURI(), HttpServletResponse.SC_FORBIDDEN});

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -809,6 +809,7 @@ public void doInstall(StaplerRequest req, StaplerResponse rsp) throws IOExceptio
     /**
      * Bare-minimum configuration mechanism to change the update center.
      */
+    @RequirePOST
     public HttpResponse doSiteConfigure(@QueryParameter String site) throws IOException {
         Jenkins hudson = Jenkins.getInstance();
         hudson.checkPermission(CONFIGURE_UPDATECENTER);
@@ -824,6 +825,7 @@ public HttpResponse doSiteConfigure(@QueryParameter String site) throws IOExcept
     }
 
 
+    @RequirePOST
     public HttpResponse doProxyConfigure(StaplerRequest req) throws IOException, ServletException {
         Jenkins jenkins = Jenkins.getInstance();
         jenkins.checkPermission(CONFIGURE_UPDATECENTER);
@@ -842,6 +844,7 @@ public HttpResponse doProxyConfigure(StaplerRequest req) throws IOException, Ser
     /**
      * Uploads a plugin.
      */
+    @RequirePOST
     public HttpResponse doUploadPlugin(StaplerRequest req) throws IOException, ServletException {
         try {
             Jenkins.getInstance().checkPermission(UPLOAD_PLUGINS);

File: core/src/main/java/hudson/logging/LogRecorderManager.java
Patch:
@@ -40,6 +40,7 @@
 import org.kohsuke.stapler.StaplerResponse;
 import org.kohsuke.stapler.HttpResponse;
 import org.kohsuke.stapler.HttpRedirect;
+import org.kohsuke.stapler.interceptor.RequirePOST;
 
 import javax.servlet.ServletException;
 import java.io.File;
@@ -106,6 +107,7 @@ public void load() throws IOException {
     /**
      * Creates a new log recorder.
      */
+    @RequirePOST
     public HttpResponse doNewLogRecorder(@QueryParameter String name) {
         Jenkins.checkGoodName(name);
         

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1924,6 +1924,7 @@ public DirectoryBrowserSupport doWs( StaplerRequest req, StaplerResponse rsp ) t
     /**
      * Wipes out the workspace.
      */
+    @RequirePOST
     public HttpResponse doDoWipeOutWorkspace() throws IOException, ServletException, InterruptedException {
         checkPermission(Functions.isWipeOutPermissionEnabled() ? WIPEOUT : BUILD);
         R b = getSomeBuildWithWorkspace();

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -800,8 +800,9 @@ public Item[] getItems() {
     }
 
     private List<Item> filterItemListBasedOnPermissions(List<Item> r, Item t) {
-        if (t.task instanceof hudson.model.Item) {
-            if (((hudson.model.Item)t.task).hasPermission(hudson.model.Item.READ)) {
+        if (t.task instanceof hudson.security.AccessControlled) {
+            if (((hudson.security.AccessControlled)t.task).hasPermission(hudson.model.Item.READ)
+                    || ((hudson.security.AccessControlled) t.task).hasPermission(hudson.security.Permission.READ)) {
                 r.add(t);
             }
         }

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -799,8 +799,9 @@ public Item[] getItems() {
     }
 
     private List<Item> filterItemListBasedOnPermissions(List<Item> r, Item t) {
-        if (t.task instanceof hudson.model.Item) {
-            if (((hudson.model.Item)t.task).hasPermission(hudson.model.Item.READ)) {
+        if (t.task instanceof hudson.security.AccessControlled) {
+            if (((hudson.security.AccessControlled)t.task).hasPermission(hudson.model.Item.READ)
+                    || ((hudson.security.AccessControlled) t.task).hasPermission(hudson.security.Permission.READ)) {
                 r.add(t);
             }
         }

File: core/src/main/java/hudson/security/csrf/CrumbFilter.java
Patch:
@@ -80,8 +80,8 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
                     LOGGER.log(Level.WARNING, "Found invalid crumb {0}.  Will check remaining parameters for a valid one...", crumb);
                 }
             }
-            // Multipart requests need to be handled by each handler.
-            if (valid || isMultipart(httpRequest)) {
+
+            if (valid) {
                 chain.doFilter(request, response);
             } else {
                 LOGGER.log(Level.WARNING, "No valid crumb was included in request for {0}. Returning {1}.", new Object[] {httpRequest.getRequestURI(), HttpServletResponse.SC_FORBIDDEN});

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -799,8 +799,9 @@ public Item[] getItems() {
     }
 
     private List<Item> filterItemListBasedOnPermissions(List<Item> r, Item t) {
-        if (t.task instanceof hudson.model.Item) {
-            if (((hudson.model.Item)t.task).hasPermission(hudson.model.Item.READ)) {
+        if (t.task instanceof hudson.security.AccessControlled) {
+            if (((hudson.security.AccessControlled)t.task).hasPermission(hudson.model.Item.READ)
+                    || ((hudson.security.AccessControlled) t.task).hasPermission(hudson.security.Permission.READ)) {
                 r.add(t);
             }
         }

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -809,6 +809,7 @@ public void doInstall(StaplerRequest req, StaplerResponse rsp) throws IOExceptio
     /**
      * Bare-minimum configuration mechanism to change the update center.
      */
+    @RequirePOST
     public HttpResponse doSiteConfigure(@QueryParameter String site) throws IOException {
         Jenkins hudson = Jenkins.getInstance();
         hudson.checkPermission(CONFIGURE_UPDATECENTER);
@@ -824,6 +825,7 @@ public HttpResponse doSiteConfigure(@QueryParameter String site) throws IOExcept
     }
 
 
+    @RequirePOST
     public HttpResponse doProxyConfigure(StaplerRequest req) throws IOException, ServletException {
         Jenkins jenkins = Jenkins.getInstance();
         jenkins.checkPermission(CONFIGURE_UPDATECENTER);
@@ -842,6 +844,7 @@ public HttpResponse doProxyConfigure(StaplerRequest req) throws IOException, Ser
     /**
      * Uploads a plugin.
      */
+    @RequirePOST
     public HttpResponse doUploadPlugin(StaplerRequest req) throws IOException, ServletException {
         try {
             Jenkins.getInstance().checkPermission(UPLOAD_PLUGINS);

File: core/src/main/java/hudson/logging/LogRecorderManager.java
Patch:
@@ -40,6 +40,7 @@
 import org.kohsuke.stapler.StaplerResponse;
 import org.kohsuke.stapler.HttpResponse;
 import org.kohsuke.stapler.HttpRedirect;
+import org.kohsuke.stapler.interceptor.RequirePOST;
 
 import javax.servlet.ServletException;
 import java.io.File;
@@ -106,6 +107,7 @@ public void load() throws IOException {
     /**
      * Creates a new log recorder.
      */
+    @RequirePOST
     public HttpResponse doNewLogRecorder(@QueryParameter String name) {
         Jenkins.checkGoodName(name);
         

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1924,6 +1924,7 @@ public DirectoryBrowserSupport doWs( StaplerRequest req, StaplerResponse rsp ) t
     /**
      * Wipes out the workspace.
      */
+    @RequirePOST
     public HttpResponse doDoWipeOutWorkspace() throws IOException, ServletException, InterruptedException {
         checkPermission(Functions.isWipeOutPermissionEnabled() ? WIPEOUT : BUILD);
         R b = getSomeBuildWithWorkspace();

File: test/src/test/java/jenkins/security/Security218CliTest.java
Patch:
@@ -57,7 +57,8 @@ public void probeCommonsCollections1() throws Exception {
     @Test
     @Issue("SECURITY-218")
     public void probeCommonsCollections2() throws Exception {
-        //TODO: Payload content issue
+        // The issue with CommonsCollections2 does not appear in manual tests on Jenkins, but it may be a risk
+        // in newer commons-collections version => remoting implementation should filter this class anyway
         probe(Payload.CommonsCollections2, PayloadCaller.EXIT_CODE_REJECTED);
     }
     
@@ -70,7 +71,7 @@ public void probeGroovy1() throws Exception {
     
     //TODO: Fix the conversion layer (not urgent)
     // There is an issue in the conversion layer after the migration to another XALAN namespace
-    // with newer libs. SECURITY-218 does not apper in this case OOTB anyway
+    // with newer libs. SECURITY-218 does not apper in this case in manual tests anyway
     @PresetData(PresetData.DataSet.ANONYMOUS_READONLY)
     @Test
     @Issue("SECURITY-218")

File: test/src/test/java/jenkins/security/Security218BlackBoxTest.java
Patch:
@@ -171,7 +171,8 @@ public void checkRoles(RoleChecker checker) throws SecurityException {
                     }
                 }
 
-                if (cause.getMessage().contains("cannot be cast to java.util.Set")) {
+                final String message = cause.getMessage();
+                if (message != null && message.contains("cannot be cast to java.util.Set")) {
                     // We ignore this exception, because there is a known issue in the test payload
                     // CommonsCollections1, CommonsCollections2 and Groovy1 fail witth this error,
                     // but actually it means that the conversion has been triggered

File: test/src/main/java/jenkins/security/ysoserial/util/Gadgets.java
Patch:
@@ -34,11 +34,11 @@
 import javassist.ClassPool;
 import javassist.CtClass;
 
-import org.apache.xalan.processor.TransformerFactoryImpl;
 import org.apache.xalan.xsltc.DOM;
 import org.apache.xalan.xsltc.TransletException;
 import org.apache.xalan.xsltc.runtime.AbstractTranslet;
 import org.apache.xalan.xsltc.trax.TemplatesImpl;
+import org.apache.xalan.xsltc.trax.TransformerFactoryImpl;
 import org.apache.xml.dtm.DTMAxisIterator;
 import org.apache.xml.serializer.SerializationHandler;
 

File: test/src/test/java/jenkins/security/Security218BlackBoxTest.java
Patch:
@@ -59,7 +59,7 @@ public void probeCommonsCollections1() throws Exception {
     @Issue("SECURITY-218")
     public void probeCommonsCollections2() throws Exception {
         //TODO: Payload content issue
-        probe(Payload.CommonsCollections2, -1);
+        probe(Payload.CommonsCollections2, PayloadCaller.EXIT_CODE_REJECTED);
     }
     
     @PresetData(PresetData.DataSet.ANONYMOUS_READONLY)
@@ -75,9 +75,8 @@ public void probeGroovy1() throws Exception {
     @PresetData(PresetData.DataSet.ANONYMOUS_READONLY)
     @Test
     @Issue("SECURITY-218")
-    @Ignore
     public void probeSpring1() throws Exception {
-        probe(Payload.Spring1, PayloadCaller.EXIT_CODE_OK);
+        probe(Payload.Spring1, -1);
     }
     
     private void probe(Payload payload, int expectedResultCode) throws Exception {

File: cli/src/main/java/hudson/cli/Connection.java
Patch:
@@ -110,7 +110,7 @@ public void writeObject(Object o) throws IOException {
      */
     public <T> T readObject() throws IOException, ClassNotFoundException {
         ObjectInputStream ois = new ObjectInputStreamEx(in,
-                ClassFilter.DEFAULT.decorate(getClass().getClassLoader()));
+                getClass().getClassLoader(), ClassFilter.DEFAULT);
         return (T)ois.readObject();
     }
 

File: test/src/test/java/jenkins/security/Security218Test.java
Patch:
@@ -31,7 +31,7 @@ public class Security218Test implements Serializable {
     /**
      * JNLP slave.
      */
-    private Process jnlp;
+    private transient Process jnlp;
 
     /**
      * Makes sure SECURITY-218 fix also applies to slaves.

File: core/src/main/java/hudson/console/AnnotatedLargeText.java
Patch:
@@ -147,7 +147,7 @@ public long writeLogTo(long start, Writer w) throws IOException {
 
     /**
      * Strips annotations using a {@link PlainTextConsoleOutputStream}.
-     * @inheritDoc
+     * {@inheritDoc}
      */
     @Override
     public long writeLogTo(long start, OutputStream out) throws IOException {

File: core/src/main/java/hudson/model/TaskAction.java
Patch:
@@ -71,7 +71,7 @@ public abstract class TaskAction extends AbstractModelObject implements Action {
     protected abstract ACL getACL();
 
     /**
-     * @inheritDoc
+     * {@inheritDoc}
      * @see #getPermission
      */
     @Override public abstract String getIconFileName();

File: core/src/main/java/hudson/tasks/BuildStepCompatibilityLayer.java
Patch:
@@ -62,7 +62,7 @@ public boolean prebuild(AbstractBuild<?,?> build, BuildListener listener) {
     }
 
     /**
-     * @inheritDoc
+     * {@inheritDoc}
      * @return Delegates to {@link SimpleBuildStep#perform(Run, FilePath, Launcher, TaskListener)} if possible, always returning true or throwing an error.
      */
     @Override

File: core/src/main/java/jenkins/util/VirtualFile.java
Patch:
@@ -186,7 +186,7 @@ public abstract class VirtualFile implements Comparable<VirtualFile>, Serializab
 
     /**
      * Displays {@link #toURI}.
-     * @inheritDoc
+     * {@inheritDoc}
      */
     @Override public final String toString() {
         return toURI().toString();

File: core/src/main/java/jenkins/util/VirtualFile.java
Patch:
@@ -178,7 +178,7 @@ public abstract class VirtualFile implements Comparable<VirtualFile>, Serializab
 
     /**
      * Hashes according to {@link #toURI}.
-     * @inheritDoc
+     * {@inheritDoc}
      */
     @Override public final int hashCode() {
         return toURI().hashCode();

File: core/src/main/java/jenkins/util/VirtualFile.java
Patch:
@@ -170,7 +170,7 @@ public abstract class VirtualFile implements Comparable<VirtualFile>, Serializab
 
     /**
      * Compares according to {@link #toURI}.
-     * @inheritDoc
+     * {@inheritDoc}
      */
     @Override public final boolean equals(Object obj) {
         return obj instanceof VirtualFile && toURI().equals(((VirtualFile) obj).toURI());

File: core/src/main/java/jenkins/util/VirtualFile.java
Patch:
@@ -162,7 +162,7 @@ public abstract class VirtualFile implements Comparable<VirtualFile>, Serializab
 
     /**
      * Does case-insensitive comparison.
-     * @inheritDoc
+     * {@inheritDoc}
      */
     @Override public final int compareTo(VirtualFile o) {
         return getName().compareToIgnoreCase(o.getName());

File: core/src/main/java/hudson/tasks/BuildStepCompatibilityLayer.java
Patch:
@@ -62,7 +62,7 @@ public boolean prebuild(AbstractBuild<?,?> build, BuildListener listener) {
     }
 
     /**
-     * @inheritDoc
+     * {@inheritDoc}
      * @return Delegates to {@link SimpleBuildStep#perform(Run, FilePath, Launcher, TaskListener)} if possible, always returning true or throwing an error.
      */
     @Override

File: core/src/main/java/hudson/model/TaskAction.java
Patch:
@@ -71,7 +71,7 @@ public abstract class TaskAction extends AbstractModelObject implements Action {
     protected abstract ACL getACL();
 
     /**
-     * @inheritDoc
+     * {@inheritDoc}
      * @see #getPermission
      */
     @Override public abstract String getIconFileName();

File: core/src/main/java/hudson/console/AnnotatedLargeText.java
Patch:
@@ -147,7 +147,7 @@ public long writeLogTo(long start, Writer w) throws IOException {
 
     /**
      * Strips annotations using a {@link PlainTextConsoleOutputStream}.
-     * @inheritDoc
+     * {@inheritDoc}
      */
     @Override
     public long writeLogTo(long start, OutputStream out) throws IOException {

File: core/src/main/java/hudson/model/JDK.java
Patch:
@@ -67,7 +67,7 @@ public static boolean isDefaultName(String name) {
             // DEFAULT_NAME took this value prior to 1.598.
             return true;
         }
-        return DEFAULT_NAME.equals(name);
+        return DEFAULT_NAME.equals(name) || name == null;
     }
 
     /**

File: core/src/test/java/jenkins/model/JDKNameTest.java
Patch:
@@ -36,8 +36,8 @@
 @RunWith(PowerMockRunner.class)
 public class JDKNameTest {
     @Test
-    public void nullIsNotDefaultName() {
-        assertThat(JDK.isDefaultName(null), is(false));
+    public void nullIsDefaultName() {
+        assertThat(JDK.isDefaultName(null), is(true));
     }
     
     @Test

File: test/src/test/java/hudson/model/QueueTest.java
Patch:
@@ -614,7 +614,7 @@ public void testQueueApiOutputShouldBeFilteredByUserPermission() throws Exceptio
 
         WebClient webClient = new WebClient();
         webClient.login("bob", "bob");
-        XmlPage p = webClient.goToXml("/queue/api/xml");
+        XmlPage p = webClient.goToXml("queue/api/xml");
 
         //bob has permission on the project and will be able to see it in the queue together with information such as the URL and the name.
         for (DomNode element: p.getFirstChild().getFirstChild().getChildNodes()){
@@ -626,13 +626,13 @@ public void testQueueApiOutputShouldBeFilteredByUserPermission() throws Exceptio
         }
         WebClient webClient2 = new WebClient();
         webClient2.login("alice");
-        XmlPage p2 = webClient2.goToXml("/queue/api/xml");
+        XmlPage p2 = webClient2.goToXml("queue/api/xml");
         //alice does not have permission on the project and will not see it in the queue.
         assertEquals("<queue></queue>", p2.getContent());
 
         WebClient webClient3 = new WebClient();
         webClient3.login("james");
-        XmlPage p3 = webClient3.goToXml("/queue/api/xml");
+        XmlPage p3 = webClient3.goToXml("queue/api/xml");
         //james has DISCOVER permission on the project and will only be able to see the task name.
         assertEquals("<queue><discoverableItem><task><name>project</name></task></discoverableItem></queue>",
                 p3.getContent());

File: test/src/test/java/hudson/model/QueueTest.java
Patch:
@@ -614,7 +614,7 @@ public void testQueueApiOutputShouldBeFilteredByUserPermission() throws Exceptio
 
         WebClient webClient = new WebClient();
         webClient.login("bob", "bob");
-        XmlPage p = webClient.goToXml("/queue/api/xml");
+        XmlPage p = webClient.goToXml("queue/api/xml");
 
         //bob has permission on the project and will be able to see it in the queue together with information such as the URL and the name.
         for (DomNode element: p.getFirstChild().getFirstChild().getChildNodes()){
@@ -626,13 +626,13 @@ public void testQueueApiOutputShouldBeFilteredByUserPermission() throws Exceptio
         }
         WebClient webClient2 = new WebClient();
         webClient2.login("alice");
-        XmlPage p2 = webClient2.goToXml("/queue/api/xml");
+        XmlPage p2 = webClient2.goToXml("queue/api/xml");
         //alice does not have permission on the project and will not see it in the queue.
         assertEquals("<queue></queue>", p2.getContent());
 
         WebClient webClient3 = new WebClient();
         webClient3.login("james");
-        XmlPage p3 = webClient3.goToXml("/queue/api/xml");
+        XmlPage p3 = webClient3.goToXml("queue/api/xml");
         //james has DISCOVER permission on the project and will only be able to see the task name.
         assertEquals("<queue><discoverableItem><task><name>project</name></task></discoverableItem></queue>",
                 p3.getContent());

File: test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java
Patch:
@@ -1453,7 +1453,7 @@ public void assertEqualDataBoundBeans(Object lhs, Object rhs) throws Exception {
             Object lv = ReflectionUtils.getPublicProperty(lhs, names[i]);
             Object rv = ReflectionUtils.getPublicProperty(rhs, names[i]);
 
-            if (Iterable.class.isAssignableFrom(types[i])) {
+            if (lv != null && rv != null && Iterable.class.isAssignableFrom(types[i])) {
                 Iterable lcol = (Iterable) lv;
                 Iterable rcol = (Iterable) rv;
                 Iterator ltr,rtr;

File: test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java
Patch:
@@ -1453,7 +1453,7 @@ public void assertEqualDataBoundBeans(Object lhs, Object rhs) throws Exception {
             Object lv = ReflectionUtils.getPublicProperty(lhs, names[i]);
             Object rv = ReflectionUtils.getPublicProperty(rhs, names[i]);
 
-            if (Iterable.class.isAssignableFrom(types[i])) {
+            if (lv != null && rv != null && Iterable.class.isAssignableFrom(types[i])) {
                 Iterable lcol = (Iterable) lv;
                 Iterable rcol = (Iterable) rv;
                 Iterator ltr,rtr;

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -699,8 +699,8 @@ public Void call() throws IOException {
     }
 
 
-    /* (non-Javadoc)
-     * @see hudson.model.AbstractModelObject#getSearchName()
+    /**
+     * {@inheritDoc}
      */
     @Override
     public String getSearchName() {

File: core/src/main/java/hudson/model/JDK.java
Patch:
@@ -67,7 +67,7 @@ public static boolean isDefaultName(String name) {
             // DEFAULT_NAME took this value prior to 1.598.
             return true;
         }
-        return DEFAULT_NAME.equals(name);
+        return DEFAULT_NAME.equals(name) || name == null;
     }
 
     /**

File: core/src/test/java/jenkins/model/JDKNameTest.java
Patch:
@@ -36,8 +36,8 @@
 @RunWith(PowerMockRunner.class)
 public class JDKNameTest {
     @Test
-    public void nullIsNotDefaultName() {
-        assertThat(JDK.isDefaultName(null), is(false));
+    public void nullIsDefaultName() {
+        assertThat(JDK.isDefaultName(null), is(true));
     }
     
     @Test

File: core/src/main/java/hudson/util/io/TarArchiver.java
Patch:
@@ -61,6 +61,7 @@ public void flush() throws IOException {
                 // so don't do anything in flush
             }
         });    
+        tar.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);
         tar.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
     }
 

File: core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java
Patch:
@@ -91,7 +91,7 @@ private boolean matchesSecret(String nodeName, JnlpSlaveHandshake handshake){
         String handshakeSecret = handshake.getRequestProperty("Secret-Key");
         // Verify that the slave secret matches the handshake secret.
         if (!computer.getJnlpMac().equals(handshakeSecret)) {
-            LOGGER.log(Level.WARNING, "An attempt was made to connect as {0} from {1} with an incorrect secret", new Object[]{nodeName, handshake.getSocket().getRemoteSocketAddress()});
+            LOGGER.log(Level.WARNING, "An attempt was made to connect as {0} from {1} with an incorrect secret", new Object[]{nodeName, handshake.getSocket()!=null?handshake.getSocket().getRemoteSocketAddress():null});
             return false;
         } else {
             return true;

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -358,7 +358,7 @@ public EnvVars getEnvironment(Node node, TaskListener listener) throws IOExcepti
                 jdkTool = jdkTool.forNode(node, listener);
             }
             jdkTool.buildEnvVars(env);
-        } else if (jdk != null && !jdk.equals(JDK.DEFAULT_NAME)) {
+        } else if (!JDK.isDefaultName(jdk)) {
             listener.getLogger().println("No JDK named ‘" + jdk + "’ found");
         }
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3670,7 +3670,7 @@ public void doWorkspaceCleanup(StaplerResponse rsp) throws IOException {
      * If the user chose the default JDK, make sure we got 'java' in PATH.
      */
     public FormValidation doDefaultJDKCheck(StaplerRequest request, @QueryParameter String value) {
-        if(!value.equals(JDK.DEFAULT_NAME))
+        if(!JDK.isDefaultName(value))
             // assume the user configured named ones properly in system config ---
             // or else system config should have reported form field validation errors.
             return FormValidation.ok();

File: test/src/main/java/org/jvnet/hudson/test/FailureBuilder.java
Patch:
@@ -42,9 +42,6 @@ public FailureBuilder() {
 
     @Extension
     public static final class DescriptorImpl extends Descriptor<Builder> {
-        public String getDisplayName() {
-            return "Always fail";
-        }
         public FailureBuilder newInstance(StaplerRequest req, JSONObject data) {
             return new FailureBuilder();
         }

File: test/src/main/java/org/jvnet/hudson/test/UnstableBuilder.java
Patch:
@@ -42,9 +42,6 @@ public UnstableBuilder() {
 
     @Extension
     public static final class DescriptorImpl extends Descriptor<Builder> {
-        public String getDisplayName() {
-            return "Make build unstable";
-        }
         public UnstableBuilder newInstance(StaplerRequest req, JSONObject data) {
             return new UnstableBuilder();
         }

File: test/src/test/java/hudson/model/utils/AbortExceptionPublisher.java
Patch:
@@ -27,8 +27,6 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
 
     @Extension
     public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {
-        @Override
-        public String getDisplayName() { return "ThrowAbortExceptionRecorder"; }
         @Override
         public boolean isApplicable(Class<? extends AbstractProject> jobType) { return true; }
     }

File: test/src/test/java/hudson/model/utils/IOExceptionPublisher.java
Patch:
@@ -27,8 +27,6 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
 
     @Extension
     public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {
-        @Override
-        public String getDisplayName() { return "Throw IOException Publisher"; }
         @Override
         public boolean isApplicable(Class<? extends AbstractProject> jobType) { return true; }
     }

File: test/src/test/java/hudson/model/utils/ResultWriterPublisher.java
Patch:
@@ -39,8 +39,6 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
 
     @Extension
     public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {
-        @Override
-        public String getDisplayName() { return "wrote result to file"; }
         @Override
         public boolean isApplicable(Class<? extends AbstractProject> jobType) { return true; }
     }

File: test/src/test/java/hudson/model/utils/TrueFalsePublisher.java
Patch:
@@ -34,8 +34,6 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
 
     @Extension
     public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {
-        @Override
-        public String getDisplayName() { return "return true or false"; }
         @Override
         public boolean isApplicable(Class<? extends AbstractProject> jobType) { return true; }
     }

File: test/src/test/java/lib/form/RepeatableTest.java
Patch:
@@ -268,9 +268,6 @@ public static class FruitDescriptor extends Descriptor<Fruit> {
         public FruitDescriptor(Class<? extends Fruit> clazz) {
             super(clazz);
         }
-        public String getDisplayName() {
-            return clazz.getSimpleName();
-        }
     }
 
     public static class Apple extends Fruit {

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -695,7 +695,6 @@ public void setTemporarilyOffline(boolean temporarilyOffline, OfflineCause cause
         if (node != null) {
             node.setTemporaryOfflineCause(offlineCause);
         }
-        Jenkins.getInstance().getQueue().scheduleMaintenance();
         synchronized (statusChangeLock) {
             statusChangeLock.notifyAll();
         }

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -293,7 +293,8 @@ protected Descriptor() {
 
     /**
      * Human readable name of this kind of configurable object.
-     * By default, it uses {@link Class#getSimpleName} on {@link #clazz}, but this should be overridden for visible descriptors.
+     * Should be overridden for most descriptors, if the display name is visible somehow.
+     * As a fallback it uses {@link Class#getSimpleName} on {@link #clazz}, so for example {@code MyThing} from {@code some.pkg.MyThing.DescriptorImpl}.
      */
     public String getDisplayName() {
         return clazz.getSimpleName();

File: test/src/main/java/org/jvnet/hudson/test/FailureBuilder.java
Patch:
@@ -42,9 +42,6 @@ public FailureBuilder() {
 
     @Extension
     public static final class DescriptorImpl extends Descriptor<Builder> {
-        public String getDisplayName() {
-            return "Always fail";
-        }
         public FailureBuilder newInstance(StaplerRequest req, JSONObject data) {
             return new FailureBuilder();
         }

File: test/src/main/java/org/jvnet/hudson/test/UnstableBuilder.java
Patch:
@@ -42,9 +42,6 @@ public UnstableBuilder() {
 
     @Extension
     public static final class DescriptorImpl extends Descriptor<Builder> {
-        public String getDisplayName() {
-            return "Make build unstable";
-        }
         public UnstableBuilder newInstance(StaplerRequest req, JSONObject data) {
             return new UnstableBuilder();
         }

File: test/src/test/java/hudson/model/utils/AbortExceptionPublisher.java
Patch:
@@ -27,8 +27,6 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
 
     @Extension
     public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {
-        @Override
-        public String getDisplayName() { return "ThrowAbortExceptionRecorder"; }
         @Override
         public boolean isApplicable(Class<? extends AbstractProject> jobType) { return true; }
     }

File: test/src/test/java/hudson/model/utils/IOExceptionPublisher.java
Patch:
@@ -27,8 +27,6 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
 
     @Extension
     public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {
-        @Override
-        public String getDisplayName() { return "Throw IOException Publisher"; }
         @Override
         public boolean isApplicable(Class<? extends AbstractProject> jobType) { return true; }
     }

File: test/src/test/java/hudson/model/utils/ResultWriterPublisher.java
Patch:
@@ -39,8 +39,6 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
 
     @Extension
     public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {
-        @Override
-        public String getDisplayName() { return "wrote result to file"; }
         @Override
         public boolean isApplicable(Class<? extends AbstractProject> jobType) { return true; }
     }

File: test/src/test/java/hudson/model/utils/TrueFalsePublisher.java
Patch:
@@ -34,8 +34,6 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
 
     @Extension
     public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {
-        @Override
-        public String getDisplayName() { return "return true or false"; }
         @Override
         public boolean isApplicable(Class<? extends AbstractProject> jobType) { return true; }
     }

File: test/src/test/java/lib/form/RepeatableTest.java
Patch:
@@ -268,9 +268,6 @@ public static class FruitDescriptor extends Descriptor<Fruit> {
         public FruitDescriptor(Class<? extends Fruit> clazz) {
             super(clazz);
         }
-        public String getDisplayName() {
-            return clazz.getSimpleName();
-        }
     }
 
     public static class Apple extends Fruit {

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -695,7 +695,6 @@ public void setTemporarilyOffline(boolean temporarilyOffline, OfflineCause cause
         if (node != null) {
             node.setTemporaryOfflineCause(offlineCause);
         }
-        Jenkins.getInstance().getQueue().scheduleMaintenance();
         synchronized (statusChangeLock) {
             statusChangeLock.notifyAll();
         }

File: core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java
Patch:
@@ -91,7 +91,7 @@ private boolean matchesSecret(String nodeName, JnlpSlaveHandshake handshake){
         String handshakeSecret = handshake.getRequestProperty("Secret-Key");
         // Verify that the slave secret matches the handshake secret.
         if (!computer.getJnlpMac().equals(handshakeSecret)) {
-            LOGGER.log(Level.WARNING, "An attempt was made to connect as {0} from {1} with an incorrect secret", new Object[]{nodeName, handshake.getSocket().getRemoteSocketAddress()});
+            LOGGER.log(Level.WARNING, "An attempt was made to connect as {0} from {1} with an incorrect secret", new Object[]{nodeName, handshake.getSocket()!=null?handshake.getSocket().getRemoteSocketAddress():null});
             return false;
         } else {
             return true;

File: core/src/main/java/jenkins/model/Nodes.java
Patch:
@@ -155,6 +155,7 @@ private void persistNode(final @Nonnull Node node)  throws IOException {
             XmlFile xmlFile = new XmlFile(Jenkins.XSTREAM,
                     new File(new File(getNodesDir(), node.getNodeName()), "config.xml"));
             xmlFile.write(node);
+            SaveableListener.fireOnChange(this, xmlFile);
         }
     }
 
@@ -170,7 +171,7 @@ public void updateNode(final @Nonnull Node node) throws IOException {
             Queue.withLock(new Runnable() {
                 @Override
                 public void run() {
-                        jenkins.trimLabels();
+                    jenkins.trimLabels();
                 }
             });
             persistNode(node);

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -1504,7 +1504,9 @@ public void maintain() {
                     List<JobOffer> candidates = new ArrayList<JobOffer>(parked.size());
                     for (JobOffer j : parked.values()) {
                         if (j.canTake(p)) {
-                            LOGGER.log(Level.FINEST, "Potential candidate for ");
+                            LOGGER.log(Level.FINEST,
+                                    "{0} is a potential candidate for task {1}",
+                                    new Object[]{j.executor.getDisplayName(), p.task.getFullDisplayName()});
                             candidates.add(j);
                         }
                     }

File: test/src/test/java/hudson/tasks/BuildTriggerTest.java
Patch:
@@ -209,7 +209,7 @@ public void downstreamProjectSecurity() throws Exception {
         /* The long way:
         WebClient wc = createWebClient();
         wc.login("alice");
-        HtmlPage page = wc.getPage(upstream, "configure");
+        HtmlPage page = wc.getHistoryPageFilter(upstream, "configure");
         HtmlForm config = page.getFormByName("config");
         config.getButtonByCaption("Add post-build action").click(); // lib/hudson/project/config-publishers2.jelly
         page.getAnchorByText("Build other projects").click();

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -1710,7 +1710,7 @@ protected final void execute(@Nonnull RunExecution job) {
 
                     // Global log filters
                     for (ConsoleLogFilter filter : ConsoleLogFilter.all()) {
-                        logger = filter.decorateLogger((AbstractBuild) build, logger);
+                        logger = filter.decorateLogger(build, logger);
                     }
 
                     // Project specific log filters

File: core/src/main/java/hudson/tasks/BuildWrappers.java
Patch:
@@ -45,7 +45,7 @@ public class BuildWrappers {
      *      for listing them.
      */
     @Deprecated
-    public static final List<Descriptor<BuildWrapper>> WRAPPERS = new DescriptorList<BuildWrapper>(BuildWrapper.class);
+    public static final List<Descriptor<BuildWrapper>> WRAPPERS = new DescriptorList<>(BuildWrapper.class);
 
     /**
      * List up all {@link BuildWrapperDescriptor}s that are applicable for the given project.
@@ -55,7 +55,7 @@ public class BuildWrappers {
      *      with {@link BuildWrapper} implementations before 1.150.
      */
     public static List<Descriptor<BuildWrapper>> getFor(AbstractProject<?, ?> project) {
-        List<Descriptor<BuildWrapper>> result = new ArrayList<Descriptor<BuildWrapper>>();
+        List<Descriptor<BuildWrapper>> result = new ArrayList<>();
         Descriptor pd = Jenkins.getInstance().getDescriptor((Class)project.getClass());
 
         for (Descriptor<BuildWrapper> w : BuildWrapper.all()) {

File: core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java
Patch:
@@ -107,7 +107,7 @@ public Result getThreshold() {
 
     private boolean shouldTrigger(Run upstreamBuild, TaskListener listener) {
         Jenkins jenkins = Jenkins.getInstance();
-        if (jenkins == null) {
+        if (jenkins == null || job == null) {
             return false;
         }
         // This checks Item.READ also on parent folders; note we are checking as the upstream auth currently:
@@ -147,7 +147,7 @@ private boolean shouldTrigger(Run upstreamBuild, TaskListener listener) {
         }
     }
 
-    @Override public void start(Job project, boolean newInstance) {
+    @Override public void start(@Nonnull Job project, boolean newInstance) {
         super.start(project, newInstance);
         SecurityContext orig = ACL.impersonate(ACL.SYSTEM);
         try {

File: core/src/test/java/hudson/FilePathTest.java
Patch:
@@ -58,6 +58,7 @@
 import org.apache.tools.ant.taskdefs.Chmod;
 import static org.junit.Assert.*;
 import static org.junit.Assume.assumeTrue;
+import static org.junit.Assume.assumeFalse;
 import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
@@ -464,7 +465,7 @@ private void checkTarUntarRoundTrip(String filePrefix, long fileSize) throws Exc
     }
 
     @Test public void symlinkInTar() throws Exception {
-        if (Functions.isWindows())  return; // can't test on Windows
+        assumeFalse("can't test on Windows", Functions.isWindows());
 
         FilePath tmp = new FilePath(temp.getRoot());
             FilePath in = tmp.child("in");

File: core/src/test/java/hudson/util/ProcessTreeTest.java
Patch:
@@ -8,6 +8,8 @@
 import java.io.Serializable;
 import jenkins.security.MasterToSlaveCallable;
 import static org.junit.Assert.*;
+
+import org.junit.Assume;
 import org.junit.Rule;
 import org.junit.Test;
 
@@ -26,9 +28,7 @@ static class  Tag implements Serializable {
     }
     
     @Test public void remoting() throws Exception {
-        // on some platforms where we fail to list any processes, this test will just not work
-        if (ProcessTree.get()==ProcessTree.DEFAULT)
-            return;
+        Assume.assumeFalse("on some platforms where we fail to list any processes", ProcessTree.get()==ProcessTree.DEFAULT);
 
         Tag t = channels.french.call(new MyCallable());
 

File: test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java
Patch:
@@ -40,6 +40,7 @@
 import java.io.InputStream;
 import java.util.zip.ZipFile;
 
+import org.junit.Assume;
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.Issue;
@@ -94,7 +95,7 @@ public void doubleDots() throws Exception {
     @Email("http://www.nabble.com/Status-Code-400-viewing-or-downloading-artifact-whose-filename-contains-two-consecutive-periods-tt21407604.html")
     @Test
     public void doubleDots2() throws Exception {
-        if(Functions.isWindows())  return; // can't test this on Windows
+        Assume.assumeFalse("can't test this on Windows", Functions.isWindows());
 
         // create a problematic file name in the workspace
         FreeStyleProject p = j.createFreeStyleProject();

File: test/src/test/java/hudson/tasks/ShellTest.java
Patch:
@@ -17,6 +17,7 @@
 import java.io.PrintStream;
 import java.util.List;
 
+import org.junit.Assume;
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.JenkinsRule;
@@ -45,9 +46,7 @@ public void validateShellContents() throws Exception {
 
     @Test
     public void testBasic() throws Exception {
-        // If we're on Windows, don't bother doing this.
-        if (Functions.isWindows())
-            return;
+        Assume.assumeFalse("If we're on Windows, don't bother doing this", Functions.isWindows());
 
         // TODO: define a FakeLauncher implementation with easymock so that this kind of assertions can be simplified.
         PretendSlave s = rule.createPretendSlave(new FakeLauncher() {

File: test/src/test/java/hudson/util/ProcessTreeKillerTest.java
Patch:
@@ -10,6 +10,7 @@
 import hudson.tasks.Shell;
 import hudson.util.ProcessTreeRemoting.IOSProcess;
 import org.junit.After;
+import org.junit.Assume;
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.ExtractResourceSCM;
@@ -56,7 +57,7 @@ public void manualAbortProcess() throws Exception {
     @Issue("JENKINS-22641")
     public void processProperlyKilledUnix() throws Exception {
         ProcessTree.enabled = true;
-        if (Functions.isWindows()) return; // This test does not involve windows.
+        Assume.assumeFalse("This test does not involve windows", Functions.isWindows());
 
         FreeStyleProject sleepProject = j.createFreeStyleProject();
         FreeStyleProject processJob = j.createFreeStyleProject();

File: test/src/test/java/hudson/slaves/CommandLauncherTest.java
Patch:
@@ -26,7 +26,6 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.not;
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.junit.Assume.assumeTrue;
@@ -40,6 +39,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.JenkinsRule;
+import org.jvnet.hudson.test.RandomlyFails;
 
 public class CommandLauncherTest {
 
@@ -57,6 +57,7 @@ public void commandFails() throws Exception {
         assertThat(log, not(containsString("ERROR: Process terminated with exit code 0")));
     }
 
+    @RandomlyFails("Sometimes gets `EOFException: unexpected stream termination` before then on CI builder; maybe needs to wait in a loop for a message to appear?")
     @Test
     public void commandSuceedsWithoutChannel() throws Exception {
         assumeTrue(!Functions.isWindows());

File: core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java
Patch:
@@ -107,7 +107,7 @@ public Result getThreshold() {
 
     private boolean shouldTrigger(Run upstreamBuild, TaskListener listener) {
         Jenkins jenkins = Jenkins.getInstance();
-        if (jenkins == null) {
+        if (jenkins == null || job == null) {
             return false;
         }
         // This checks Item.READ also on parent folders; note we are checking as the upstream auth currently:
@@ -147,7 +147,7 @@ private boolean shouldTrigger(Run upstreamBuild, TaskListener listener) {
         }
     }
 
-    @Override public void start(Job project, boolean newInstance) {
+    @Override public void start(@Nonnull Job project, boolean newInstance) {
         super.start(project, newInstance);
         SecurityContext orig = ACL.impersonate(ACL.SYSTEM);
         try {

File: core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java
Patch:
@@ -107,7 +107,7 @@ public Result getThreshold() {
 
     private boolean shouldTrigger(Run upstreamBuild, TaskListener listener) {
         Jenkins jenkins = Jenkins.getInstance();
-        if (jenkins == null) {
+        if (jenkins == null || job == null) {
             return false;
         }
         // This checks Item.READ also on parent folders; note we are checking as the upstream auth currently:
@@ -147,7 +147,7 @@ private boolean shouldTrigger(Run upstreamBuild, TaskListener listener) {
         }
     }
 
-    @Override public void start(Job project, boolean newInstance) {
+    @Override public void start(@Nonnull Job project, boolean newInstance) {
         super.start(project, newInstance);
         SecurityContext orig = ACL.impersonate(ACL.SYSTEM);
         try {

File: test/src/test/java/hudson/model/QueueTest.java
Patch:
@@ -853,7 +853,7 @@ public void shouldBeAbleToBlockFlyweightTaskAtTheLastMinute() throws Exception {
         while (!Queue.getInstance().getBuildableItems().isEmpty()) {
             Thread.sleep(10);
         }
-        assertFalse(Queue.getInstance().getItems()[0].isBlocked());
+        assertTrue(Queue.getInstance().getItems()[0].isBlocked());
         assertTrue(Queue.getInstance().getBlockedItems().get(0).task.getDisplayName().equals(matrixProject.displayName));
 
         r.assertBuildStatusSuccess(upstream);

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -1438,7 +1438,7 @@ public void maintain() {
                 }
             }
 
-            //this is to solve OSS-192. We iterate on the list of flyweight tasks and execute them
+            //this is to solve JENKINS-30084. We iterate on the list of flyweight tasks and execute them
             List<FlyWeightItem> flyweightItems = new ArrayList<>(flyWeightTasks.values());
             for (FlyWeightItem f : flyweightItems) {
                 if (!isBuildBlocked(f)) {
@@ -2357,8 +2357,6 @@ public CauseOfBlockage getCauseOfBlockage() {
      */
     public final class FlyWeightItem extends NotWaitingItem {
 
-        boolean buildable;
-
         public FlyWeightItem(WaitingItem wi) {
             super(wi);
         }

File: test/src/test/java/hudson/model/queue/WideExecutionTest.java
Patch:
@@ -95,7 +95,7 @@ public String getDisplayName() {
         }
     }
 
-    @Issue("OSS-192")
+    @Issue("JENKINS-30084")
     @Test
     /*
      * this is to test that when the assigned executor is not available the flyweighttask is put into the buildable list,

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -24,6 +24,7 @@
  */
 package hudson.model;
 
+import com.google.common.collect.ImmutableSet;
 import hudson.FilePath;
 import hudson.Launcher;
 import hudson.Util;
@@ -512,6 +513,5 @@ private Object readResolve() {
     /**
      * Provides a collection of file names, which are accessible via /jnlpJars link.
      */
-    private static final Set<String> ALLOWED_JNLPJARS_FILES = new TreeSet<String>
-        (Arrays.asList("slave.jar", "remoting.jar", "jenkins-cli.jar", "hudson-cli.jar"));
+    private static final Set<String> ALLOWED_JNLPJARS_FILES = ImmutableSet.of("slave.jar", "remoting.jar", "jenkins-cli.jar", "hudson-cli.jar");
 }

File: test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java
Patch:
@@ -696,7 +696,7 @@ public Maven.MavenInstallation configureDefaultMaven(String mavenVersion, int ma
         mvn.copyFrom(JenkinsRule.class.getClassLoader().getResource(mavenVersion + "-bin.zip"));
         mvn.unzip(new FilePath(buildDirectory));
         // TODO: switch to tar that preserves file permissions more easily
-        if(!Functions.isWindows())
+        if(Functions.isGlibcSupported())
             GNUCLibrary.LIBC.chmod(new File(mvnHome, "bin/mvn").getPath(),0755);
 
         Maven.MavenInstallation mavenInstallation = new Maven.MavenInstallation("default",
@@ -720,7 +720,7 @@ public Ant.AntInstallation configureDefaultAnt() throws Exception {
             File antHome = createTmpDir();
             ant.unzip(new FilePath(antHome));
             // TODO: switch to tar that preserves file permissions more easily
-            if(!Functions.isWindows())
+            if(Functions.isGlibcSupported())
                 GNUCLibrary.LIBC.chmod(new File(antHome,"apache-ant-1.8.1/bin/ant").getPath(),0755);
 
             antInstallation = new Ant.AntInstallation("default", new File(antHome,"apache-ant-1.8.1").getAbsolutePath(),NO_PROPERTIES);
@@ -2318,7 +2318,7 @@ public boolean isLoggable(LogRecord record) {
         // this also prevents tests from falsely advertising Hudson
         DNSMultiCast.disabled = true;
 
-        if (!Functions.isWindows()) {
+        if (Functions.isGlibcSupported()) {
             try {
                 GNUCLibrary.LIBC.unsetenv("MAVEN_OPTS");
                 GNUCLibrary.LIBC.unsetenv("MAVEN_DEBUG_OPTS");

File: core/src/main/java/jenkins/util/xstream/CriticalXStreamException.java
Patch:
@@ -29,6 +29,8 @@
 
 /**
  * Wraps {@link XStreamException} to indicate it is critical for Jenkins.
+ * 
+ * @since 1.625
  */
 public class CriticalXStreamException extends ConversionException {
     private static final long serialVersionUID = 1L;

File: core/src/main/java/hudson/org/apache/tools/tar/TarInputStream.java
Patch:
@@ -37,8 +37,9 @@
  * methods are provided to position at each successive entry in
  * the archive, and the read each entry as a normal input stream
  * using read().
- *
+ * @deprecated Use {@link org.apache.commons.compress.archivers.tar.TarArchiveInputStream} instead
  */
+@Deprecated
 public class TarInputStream extends FilterInputStream {
 
     // CheckStyle:VisibilityModifier OFF - bc

File: core/src/main/java/hudson/org/apache/tools/tar/TarOutputStream.java
Patch:
@@ -35,8 +35,11 @@
  * The TarOutputStream writes a UNIX tar archive as an OutputStream.
  * Methods are provided to put entries, and then write their contents
  * by writing to this stream using write().
+ * 
+ * @deprecated Use {@link org.apache.commons.compress.archivers.tar.TarArchiveOutputStream} instead
  *
  */
+@Deprecated
 public class TarOutputStream extends FilterOutputStream {
     /** Fail if a long file name is required in the archive. */
     public static final int LONGFILE_ERROR = 0;

File: test/src/main/java/org/jvnet/hudson/test/HudsonTestCase.java
Patch:
@@ -1176,7 +1176,7 @@ public HtmlPage submit(HtmlForm form) throws Exception {
     public HtmlPage submit(HtmlForm form, String name) throws Exception {
         for( HtmlElement e : form.getHtmlElementsByTagName("button")) {
             HtmlElement p = (HtmlElement)e.getParentNode().getParentNode();
-            if(e instanceof HtmlButton && p.getAttribute("name").equals(name)) {
+            if (e instanceof HtmlButton && p.getAttribute("name").equals(name)) {
                 return (HtmlPage)HtmlFormUtil.submit(form, (HtmlButton) e);
             }
         }
@@ -1624,7 +1624,7 @@ public WebClient createWebClient() {
      * for accessing Hudson.
      */
     public class WebClient extends com.gargoylesoftware.htmlunit.WebClient {
-        private static final long serialVersionUID = 5808915989048338267L;
+        private static final long serialVersionUID = 8720028298174337333L;
 
         public WebClient() {
             // default is IE6, but this causes 'n.doScroll('left')' to fail in event-debug.js:1907 as HtmlUnit doesn't implement such a method,
@@ -1635,7 +1635,7 @@ public WebClient() {
             clients.add(this);
             // make ajax calls run as post-action for predictable behaviors that simplify debugging
             setAjaxController(new AjaxController() {
-                private static final long serialVersionUID = -5844060943564822678L;
+                private static final long serialVersionUID = 6730107519583349963L;
                 public boolean processSynchron(HtmlPage page, WebRequest settings, boolean async) {
                     return false;
                 }

File: test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java
Patch:
@@ -1856,7 +1856,7 @@ public WebClient createWebClient() {
      * for accessing Hudson.
      */
     public class WebClient extends com.gargoylesoftware.htmlunit.WebClient {
-        private static final long serialVersionUID = 5808915989048338267L;
+        private static final long serialVersionUID = -7944895389154288881L;
 
         private List<WebResponseListener> webResponseListeners = new ArrayList<>();
 
@@ -1870,7 +1870,7 @@ public WebClient() {
             clients.add(this);
             // make ajax calls run as post-action for predictable behaviors that simplify debugging
             setAjaxController(new AjaxController() {
-                private static final long serialVersionUID = -5844060943564822678L;
+                private static final long serialVersionUID = -76034615893907856L;
                 public boolean processSynchron(HtmlPage page, WebRequest settings, boolean async) {
                     return false;
                 }

File: test/src/test/java/hudson/bugs/LoginRedirectTest.java
Patch:
@@ -51,7 +51,6 @@ public void testRedirect() throws Exception {
         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
 
         HtmlPage p = wc.goTo("/");
-        //System.out.println(p.getDocumentURI());
         assertEquals(200, p.getWebResponse().getStatusCode());
         HtmlForm form = p.getFormByName("login");
         form.getInputByName("j_username").setValueAttribute("alice");

File: core/src/main/java/hudson/util/io/TarArchiver.java
Patch:
@@ -61,6 +61,7 @@ public void flush() throws IOException {
                 // so don't do anything in flush
             }
         });    
+        tar.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);
         tar.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
     }
 

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -219,7 +219,7 @@ public Api getApi() {
     /**
      * Find all registered overrides (intended to allow overriding/adding views)
      * @return List of extensions
-     * @since 1.626
+     * @since 1.627
      */
     @Override
     public Collection<PluginManagerStaplerOverride> getOverrides() {

File: core/src/main/java/hudson/PluginManagerStaplerOverride.java
Patch:
@@ -14,7 +14,7 @@
  * In both cases, this is simply done by defining a resource or method that matches the existing one
  *
  * @author Sam Van Oort
- * @since 1.626
+ * @since 1.627
  */
 public abstract class PluginManagerStaplerOverride implements ExtensionPoint {
 

File: test/src/test/java/lib/layout/TaskTest.java
Patch:
@@ -29,6 +29,7 @@
 
 import javax.servlet.ServletException;
 
+import com.gargoylesoftware.htmlunit.html.HtmlElementUtil;
 import hudson.model.UnprotectedRootAction;
 
 import org.junit.Rule;
@@ -49,7 +50,7 @@ public class TaskTest {
     @Test public void postLink() throws Exception {
         WebClient wc = j.createWebClient();
         HtmlPage page = wc.goTo(postLink.getUrlName());
-        page.getAnchorByText("POST").click();
+        HtmlElementUtil.click(page.getAnchorByText("POST"));
         assertTrue("Action method should be invoked", postLink.called);
     }
 

File: test/src/test/java/hudson/util/RobustReflectionConverterTest.java
Patch:
@@ -205,6 +205,7 @@ public void testRestInterfaceFailure() throws Exception {
                     wc.createCrumbedUrl(String.format("%s/config.xml", p.getUrl())),
                     HttpMethod.POST
             );
+            req.setEncodingType(null);
             req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, "badvalue", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));
             wc.getPage(req);
             
@@ -237,6 +238,7 @@ public void testRestInterfaceFailure() throws Exception {
                     wc.createCrumbedUrl(String.format("%s/config.xml", p.getUrl())),
                     HttpMethod.POST
             );
+            req.setEncodingType(null);
             req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, "badvalue"));
             
             try {

File: test/src/test/java/hudson/util/RobustReflectionConverterTest.java
Patch:
@@ -58,7 +58,7 @@
 
 import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;
 import com.gargoylesoftware.htmlunit.HttpMethod;
-import com.gargoylesoftware.htmlunit.WebRequestSettings;
+import com.gargoylesoftware.htmlunit.WebRequest;
 
 public class RobustReflectionConverterTest {
 
@@ -201,7 +201,7 @@ public void testRestInterfaceFailure() throws Exception {
             r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
             WebClient wc = r.createWebClient();
             wc.login("test", "test");
-            WebRequestSettings req = new WebRequestSettings(
+            WebRequest req = new WebRequest(
                     wc.createCrumbedUrl(String.format("%s/config.xml", p.getUrl())),
                     HttpMethod.POST
             );
@@ -233,7 +233,7 @@ public void testRestInterfaceFailure() throws Exception {
             r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
             WebClient wc = r.createWebClient();
             wc.login("test", "test");
-            WebRequestSettings req = new WebRequestSettings(
+            WebRequest req = new WebRequest(
                     wc.createCrumbedUrl(String.format("%s/config.xml", p.getUrl())),
                     HttpMethod.POST
             );

File: test/src/test/java/hudson/model/HudsonTest.java
Patch:
@@ -167,7 +167,6 @@ public void deleteHudsonComputer() throws Exception {
 
         // try to delete it by hitting the final URL directly
         WebRequest req = new WebRequest(new URL(wc.getContextPath()+"computer/(master)/doDelete"), HttpMethod.POST);
-        req.setEncodingType(null);
         try {
             wc.getPage(wc.addCrumb(req));
             fail("Error code expected");

File: test/src/test/java/hudson/model/DirectlyModifiableViewTest.java
Patch:
@@ -191,7 +191,6 @@ private Page doPost(View view, String path) throws Exception {
                 new URL(j.jenkins.getRootUrl() + view.getUrl() + path),
                 HttpMethod.POST
         );
-        req.setEncodingType(null);
 
         return wc.getPage(wc.addCrumb(req));
     }

File: test/src/test/java/jenkins/widgets/BuildListTableTest.java
Patch:
@@ -59,14 +59,14 @@ public class BuildListTableTest {
         assertEquals(0, wc.waitForBackgroundJavaScript(120000));
         HtmlAnchor anchor = page.getAnchorByText("d » d2 » p");
         String href = anchor.getHrefAttribute();
-        URL target = URI.create(page.getDocumentURI()).resolve(href).toURL();
+        URL target = URI.create(page.getUrl().toExternalForm()).resolve(href).toURL();
         wc.getPage(target);
         assertEquals(href, r.getURL() + "view/v1/job/d/view/v2/job/d2/job/p/", target.toString());
         page = wc.goTo("job/d/view/All/builds?suppressTimelineControl=true");
         assertEquals(0, wc.waitForBackgroundJavaScript(120000));
         anchor = page.getAnchorByText("d » d2 » p");
         href = anchor.getHrefAttribute();
-        target = URI.create(page.getDocumentURI()).resolve(href).toURL();
+        target = URI.create(page.getUrl().toExternalForm()).resolve(href).toURL();
         wc.getPage(target);
         assertEquals(href, r.getURL() + "job/d/job/d2/job/p/", target.toString());
     }

File: test/src/test/java/hudson/slaves/JNLPLauncherTest.java
Patch:
@@ -137,7 +137,7 @@ private void launchJnlpAndVerify(Computer c, ArgumentListBuilder args) throws Ex
     private String getJnlpLink(Computer c) throws Exception {
         HtmlPage p = new WebClient().goTo("computer/"+c.getName()+"/");
         String href = ((HtmlAnchor) p.getElementById("jnlp-link")).getHrefAttribute();
-        href = new URL(new URL(p.getDocumentURI()),href).toExternalForm();
+        href = new URL(new URL(p.getUrl().toExternalForm()),href).toExternalForm();
         return href;
     }
 

File: test/src/main/java/org/jvnet/hudson/test/HudsonTestCase.java
Patch:
@@ -1166,7 +1166,7 @@ private List<String> listProperties(String properties) {
      * Plain {@link HtmlForm#submit()} doesn't work correctly due to the use of YUI in Hudson.
      */
     public HtmlPage submit(HtmlForm form) throws Exception {
-        return (HtmlPage) HtmlFormUtil.submit(form);
+        return (HtmlPage) HtmlFormUtil.submit(form, last(form.getHtmlElementsByTagName("button")));
     }
 
     /**

File: test/src/test/java/hudson/model/UserTest.java
Patch:
@@ -24,6 +24,7 @@
  */
 package hudson.model;
 
+import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;
 import com.gargoylesoftware.htmlunit.ScriptException;
 import com.gargoylesoftware.htmlunit.WebAssert;
 import com.gargoylesoftware.htmlunit.html.HtmlForm;
@@ -451,9 +452,9 @@ public void testDoDoDelete() throws Exception {
             j.submit(form);
             fail("User should not be able to delete himself");
         }
-        catch(ScriptException e){
+        catch(FailingHttpStatusCodeException e){
             //ok exception should be thrown
-            Assert.assertTrue(e.getMessage().startsWith("400"));
+            Assert.assertEquals(400, e.getStatusCode());
         }
         assertTrue("User should not delete himself from memory.", User.getAll().contains(user));
         assertTrue("User should not delete his persistent data.", user.getConfigFile().exists());

File: test/src/test/java/hudson/console/ConsoleAnnotatorTest.java
Patch:
@@ -140,6 +140,7 @@ class ProgressiveLogClient {
 
         String next() throws IOException {
             WebRequest req = new WebRequest(new URL(r.getURL() + run.getUrl() + "/logText/progressiveHtml"+(start!=null?"?start="+start:"")));
+            req.setEncodingType(null);
             Map headers = new HashMap();
             if (consoleAnnotator!=null)
                 headers.put("X-ConsoleAnnotator",consoleAnnotator);

File: test/src/test/java/hudson/diagnosis/ReverseProxySetupMonitorTest.java
Patch:
@@ -36,6 +36,7 @@ public class ReverseProxySetupMonitorTest {
 
     @Test public void normal() throws Exception {
         WebRequest wrs = new WebRequest(new URL(r.getURL(), r.jenkins.getAdministrativeMonitor(ReverseProxySetupMonitor.class.getName()).getUrl() + "/test"));
+        wrs.setEncodingType(null);
         wrs.setAdditionalHeader("Referer", r.getURL() + "manage");
         r.createWebClient().getPage(wrs);
     }

File: test/src/test/java/hudson/model/DirectlyModifiableViewTest.java
Patch:
@@ -191,6 +191,7 @@ private Page doPost(View view, String path) throws Exception {
                 new URL(j.jenkins.getRootUrl() + view.getUrl() + path),
                 HttpMethod.POST
         );
+        req.setEncodingType(null);
 
         return wc.getPage(wc.addCrumb(req));
     }

File: test/src/test/java/hudson/model/HudsonTest.java
Patch:
@@ -167,6 +167,7 @@ public void deleteHudsonComputer() throws Exception {
 
         // try to delete it by hitting the final URL directly
         WebRequest req = new WebRequest(new URL(wc.getContextPath()+"computer/(master)/doDelete"), HttpMethod.POST);
+        req.setEncodingType(null);
         try {
             wc.getPage(wc.addCrumb(req));
             fail("Error code expected");

File: test/src/test/java/hudson/model/ViewTest.java
Patch:
@@ -197,6 +197,7 @@ public class ViewTest {
         xml = xml.replace("<description>one</description>", "<description>two</description>");
         WebRequest req = new WebRequest(wc.createCrumbedUrl("view/v/config.xml"), HttpMethod.POST);
         req.setRequestBody(xml);
+        req.setEncodingType(null);
         wc.getPage(req);
         assertEquals("two", view.getDescription());
         xml = new XmlFile(Jenkins.XSTREAM, new File(j.jenkins.getRootDir(), "config.xml")).asString();

File: test/src/test/java/jenkins/security/BasicHeaderProcessorTest.java
Patch:
@@ -82,6 +82,7 @@ private void makeRequestAndFail(String userAndPass) throws IOException, SAXExcep
 
     private void makeRequestWithAuthAndVerify(String userAndPass, String username) throws IOException, SAXException {
         WebRequest req = new WebRequest(new URL(j.getURL(),"test"));
+        req.setEncodingType(null);
         if (userAndPass!=null)
             req.setAdditionalHeader("Authorization","Basic "+Scrambler.scramble(userAndPass));
         Page p = wc.getPage(req);

File: test/src/test/java/lib/form/ExpandableTextboxTest.java
Patch:
@@ -54,6 +54,7 @@ protected HtmlPage evaluateAsHtml(String jellyScript) throws Exception {
         HudsonTestCase.WebClient wc = new WebClient();
         
         WebRequest req = new WebRequest(wc.createCrumbedUrl("eval"), POST);
+        req.setEncodingType(null);
         req.setRequestBody("<j:jelly xmlns:j='jelly:core' xmlns:st='jelly:stapler' xmlns:l='/lib/layout' xmlns:f='/lib/form'>"+jellyScript+"</j:jelly>");
         Page page = wc.getPage(req);
         return (HtmlPage) page;

File: test/src/main/java/org/jvnet/hudson/test/HudsonTestCase.java
Patch:
@@ -1175,8 +1175,8 @@ public HtmlPage submit(HtmlForm form) throws Exception {
     public HtmlPage submit(HtmlForm form, String name) throws Exception {
         for( HtmlElement e : form.getHtmlElementsByTagName("button")) {
             HtmlElement p = (HtmlElement)e.getParentNode().getParentNode();
-            if(p.getAttribute("name").equals(name)) {
-                return (HtmlPage)HtmlFormUtil.submit(form, (HtmlSubmitInput) e);
+            if(e instanceof HtmlButton && p.getAttribute("name").equals(name)) {
+                return (HtmlPage)HtmlFormUtil.submit(form, (HtmlButton) e);
             }
         }
         throw new AssertionError("No such submit button with the name "+name);

File: test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java
Patch:
@@ -1315,8 +1315,8 @@ public HtmlPage submit(HtmlForm form) throws Exception {
     public HtmlPage submit(HtmlForm form, String name) throws Exception {
         for( HtmlElement e : form.getHtmlElementsByTagName("button")) {
             HtmlElement p = (HtmlElement)e.getParentNode().getParentNode();
-            if(p.getAttribute("name").equals(name)) {
-                return (HtmlPage)HtmlFormUtil.submit(form, (HtmlSubmitInput) e);
+            if(e instanceof HtmlButton && p.getAttribute("name").equals(name)) {
+                return (HtmlPage)HtmlFormUtil.submit(form, (HtmlButton) e);
             }
         }
         throw new AssertionError("No such submit button with the name "+name);

File: test/src/test/java/hudson/bugs/LoginRedirectTest.java
Patch:
@@ -51,7 +51,7 @@ public void testRedirect() throws Exception {
         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
 
         HtmlPage p = wc.goTo("/");
-        System.out.println(p.getDocumentURI());
+        //System.out.println(p.getDocumentURI());
         assertEquals(200, p.getWebResponse().getStatusCode());
         HtmlForm form = p.getFormByName("login");
         form.getInputByName("j_username").setValueAttribute("alice");

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -127,7 +127,8 @@ public abstract class Slave extends Node implements Serializable {
      */
     private String label="";
 
-    private /*almost final*/ DescribableList<NodeProperty<?>,NodePropertyDescriptor> nodeProperties = new DescribableList<NodeProperty<?>,NodePropertyDescriptor>(Jenkins.getInstance());
+    private /*almost final*/ DescribableList<NodeProperty<?>,NodePropertyDescriptor> nodeProperties = 
+                                    new DescribableList<NodeProperty<?>,NodePropertyDescriptor>(Jenkins.getInstance().getNodesObject());
 
     /**
      * Lazily computed set of labels from {@link #label}.
@@ -408,7 +409,7 @@ protected Object readResolve() {
                     : new CommandLauncher(agentCommand);
         }
         if(nodeProperties==null)
-            nodeProperties = new DescribableList<NodeProperty<?>,NodePropertyDescriptor>(Jenkins.getInstance());
+            nodeProperties = new DescribableList<NodeProperty<?>,NodePropertyDescriptor>(Jenkins.getInstance().getNodesObject());
         return this;
     }
 

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -2110,8 +2110,8 @@ public FormValidation doCheckLabel(@AncestorInPath AbstractProject<?,?> project,
                 }
             }
             return FormValidation.okWithMarkup(Messages.AbstractProject_LabelLink(
-                    j.getRootUrl(), l.getUrl(), l.getNodes().size() + l.getClouds().size()
-            ));
+                    j.getRootUrl(), l.getUrl(), l.getNodes().size(), l.getClouds().size())
+            );
         }
 
         public FormValidation doCheckCustomWorkspace(@QueryParameter String customWorkspace){

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -2110,8 +2110,8 @@ public FormValidation doCheckLabel(@AncestorInPath AbstractProject<?,?> project,
                 }
             }
             return FormValidation.okWithMarkup(Messages.AbstractProject_LabelLink(
-                    j.getRootUrl(), l.getUrl(), l.getNodes().size() + l.getClouds().size()
-            ));
+                    j.getRootUrl(), l.getUrl(), l.getNodes().size(), l.getClouds().size())
+            );
         }
 
         public FormValidation doCheckCustomWorkspace(@QueryParameter String customWorkspace){

File: core/src/main/java/hudson/triggers/Trigger.java
Patch:
@@ -2,7 +2,8 @@
  * The MIT License
  * 
  * Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi, Brian Westrich, Jean-Baptiste Quenot, Stephen Connolly, Tom Huybrechts
- * 
+ *               2015 Kanstantsin Shautsou
+ *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
  * in the Software without restriction, including without limitation the rights
@@ -149,6 +150,7 @@ public TriggerDescriptor getDescriptor() {
 
     protected final String spec;
     protected transient CronTabList tabs;
+    @CheckForNull
     protected transient J job;
 
     /**

File: test/src/test/java/hudson/PluginTest.java
Patch:
@@ -34,7 +34,7 @@ public class PluginTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    @Issue("SECURITY-131") // TODO test-annotations 1.2+: @Issue({"SECURITY-131", "SECURITY-155"})
+    @Issue({"SECURITY-131", "SECURITY-155"})
     @Test public void doDynamic() throws Exception {
         r.createWebClient().goTo("plugin/credentials/images/24x24/credentials.png", "image/png");
         /* Collapsed somewhere before it winds up in restOfPath:

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -175,7 +175,7 @@
  * </pre>
  *
  * <p>
- * When {@link FileCallable} is transfered to a remote node, it will be done so
+ * When {@link FileCallable} is transferred to a remote node, it will be done so
  * by using the same Java serialization scheme that the remoting module uses.
  * See {@link Channel} for more about this. 
  *

File: core/src/main/java/hudson/FileSystemProvisioner.java
Patch:
@@ -238,7 +238,7 @@ public void restoreTo(AbstractBuild<?,?> owner, FilePath dst, TaskListener liste
         @Extension
         public static final class DescriptorImpl extends FileSystemProvisionerDescriptor {
             public boolean discard(FilePath ws, TaskListener listener) throws IOException, InterruptedException {
-                // the default provisioner doens't do anything special,
+                // the default provisioner does not do anything special,
                 // so allow other types to manage it
                 return false;
             }

File: core/src/main/java/hudson/FileSystemProvisionerDescriptor.java
Patch:
@@ -39,7 +39,7 @@ public abstract class FileSystemProvisionerDescriptor extends Descriptor<FileSys
      *
      * <p>
      * Because users may modify the file system behind Hudson, and slaves may come and go when
-     * configuration changes hapen, in general case Hudson is unable to keep track of which jobs
+     * configuration changes happen, in general case Hudson is unable to keep track of which jobs
      * have workspaces in which slaves.
      *
      * <p>

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1385,7 +1385,7 @@ public static boolean defaultToTrue(Boolean b) {
     /**
      * If the value exists, return that value. Otherwise return the default value.
      * <p>
-     * Starting 1.294, JEXL supports the elvis operator "x?:y" that supercedes this.
+     * Starting 1.294, JEXL supports the elvis operator "x?:y" that supersedes this.
      *
      * @since 1.150
      */

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -63,7 +63,7 @@
  * for Jenkins to control {@link Plugin}.
  *
  * <p>
- * A plug-in is packaged into a jar file whose extension is <tt>".jpi"</tt> (or <tt>".hpi"</tt> for backward compatability),
+ * A plug-in is packaged into a jar file whose extension is <tt>".jpi"</tt> (or <tt>".hpi"</tt> for backward compatibility),
  * A plugin needs to have a special manifest entry to identify what it is.
  *
  * <p>

File: core/src/main/java/hudson/cli/CloneableCLICommand.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * {@link Cloneable} {@link CLICommand}.
  *
- * Uses {@link #clone()} instead of "new" to create a copy for exection.
+ * Uses {@link #clone()} instead of "new" to create a copy for execution.
  *
  * @author Kohsuke Kawaguchi
  */

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -1566,8 +1566,8 @@ public boolean accept(File dir, String name) {
             if (m.matches()) {
                 File newLocation = new File(dir, "logs/slaves/" + m.group(1) + "/slave.log" + Util.fixNull(m.group(2)));
                 newLocation.getParentFile().mkdirs();
-                boolean relocationSuccessfull=f.renameTo(newLocation);
-                if (relocationSuccessfull) { // The operation will fail if mkdir fails
+                boolean relocationSuccessful=f.renameTo(newLocation);
+                if (relocationSuccessful) { // The operation will fail if mkdir fails
                     LOGGER.log(Level.INFO, "Relocated log file {0} to {1}",new Object[] {f.getPath(),newLocation.getPath()});
                 } else {
                     LOGGER.log(Level.WARNING, "Cannot relocate log file {0} to {1}",new Object[] {f.getPath(),newLocation.getPath()});

File: core/src/main/java/hudson/model/UsageStatistics.java
Patch:
@@ -197,10 +197,10 @@ public boolean configure(StaplerRequest req, JSONObject json) throws FormExcepti
     }
 
     /**
-     * Assymetric cipher is slow and in case of Sun RSA implementation it can only encyrypt the first block.
+     * Asymmetric cipher is slow and in case of Sun RSA implementation it can only encyrypt the first block.
      *
      * So first create a symmetric key, then place this key in the beginning of the stream by encrypting it
-     * with the assymetric cipher. The rest of the stream will be encrypted by a symmetric cipher.
+     * with the asymmetric cipher. The rest of the stream will be encrypted by a symmetric cipher.
      */
     public static final class CombinedCipherOutputStream extends FilterOutputStream {
         public CombinedCipherOutputStream(OutputStream out, Cipher asym, String algorithm) throws IOException, GeneralSecurityException {

File: core/src/main/java/hudson/os/SU.java
Patch:
@@ -62,7 +62,7 @@ private SU() { // not meant to be instantiated
     }
 
     /**
-     * Returns a {@link VirtualChannel} that's connected to the priviledge-escalated environment.
+     * Returns a {@link VirtualChannel} that's connected to the privilege-escalated environment.
      *
      * @param listener
      *      What this method is doing (such as what process it's invoking) will be sent here.
@@ -122,7 +122,7 @@ private static LocalChannel newLocalChannel() {
     }
 
     /**
-     * Starts a new priviledge-escalated environment, execute a closure, and shut it down.
+     * Starts a new privilege-escalated environment, execute a closure, and shut it down.
      */
     public static <V,T extends Throwable> V execute(TaskListener listener, String rootUsername, String rootPassword, final Callable<V, T> closure) throws T, IOException, InterruptedException {
         VirtualChannel ch = start(listener, rootUsername, rootPassword);

File: core/src/main/java/hudson/scheduler/CronTab.java
Patch:
@@ -92,7 +92,7 @@ public CronTab(String format, int line, Hash hash) throws ANTLRException {
 
     /**
      * @param timezone
-     *      Used to schedule cron in a differnt timezone. Null to use the default system 
+     *      Used to schedule cron in a different timezone. Null to use the default system 
      *      timezone
      * @since 1.615
      */

File: core/src/main/java/hudson/security/ACL.java
Patch:
@@ -127,7 +127,7 @@ public boolean hasCreatePermission(@Nonnull Authentication a, @Nonnull ItemGroup
      *
      * <p>
      * This doesn't need to be included in {@link Authentication#getAuthorities()},
-     * but {@link ACL} is responsible for checking it nontheless, as if it was the
+     * but {@link ACL} is responsible for checking it nonetheless, as if it was the
      * last entry in the granted authority.
      */
     public static final Sid EVERYONE = new Sid() {

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -357,7 +357,7 @@ public GroupDetails loadGroupByGroupname(String groupname) throws UsernameNotFou
      * @param fetchMembers if {@code true} then try and fetch the members of the group if it exists. Trying does not
      *                     imply that the members will be fetched and {@link hudson.security.GroupDetails#getMembers()}
      *                     may still return {@code null}
-     * @throws UserMayOrMayNotExistException if no conclusive result could be determined regarding the group existance.
+     * @throws UserMayOrMayNotExistException if no conclusive result could be determined regarding the group existence.
      * @throws UsernameNotFoundException     if the group does not exist.
      * @throws DataAccessException           if the backing security realm could not be connected to.
      * @since 1.549

File: core/src/main/java/hudson/tasks/Maven.java
Patch:
@@ -460,7 +460,7 @@ public static final class MavenInstallation extends ToolInstallation implements
         /**
          * @deprecated since 2009-02-25.
          */
-        @Deprecated // kept for backward compatiblity - use getHome()
+        @Deprecated // kept for backward compatibility - use getHome()
         private transient String mavenHome;
 
         /**

File: core/src/main/java/hudson/util/ChartUtil.java
Patch:
@@ -113,7 +113,7 @@ public String toString() {
      *
      * @param defaultSize
      *      The size of the picture to be generated. These values can be overridden
-     *      by the query paramter 'width' and 'height' in the request.
+     *      by the query parameter 'width' and 'height' in the request.
      * @deprecated as of 1.320
      *      Bind {@link Graph} to the URL space. See {@code hudson.tasks.junit.History} as an example (note that doing so involves
      *      a bit of URL structure change.)
@@ -129,7 +129,7 @@ public static void generateGraph(StaplerRequest req, StaplerResponse rsp, JFreeC
      * @param defaultW
      * @param defaultH
      *      The size of the picture to be generated. These values can be overridden
-     *      by the query paramter 'width' and 'height' in the request.
+     *      by the query parameter 'width' and 'height' in the request.
      * @deprecated as of 1.320
      *      Bind {@link Graph} to the URL space. See {@code hudson.tasks.junit.History} as an example (note that doing so involves
      *      a bit of URL structure change.)

File: core/src/main/java/hudson/util/DoubleLaunchChecker.java
Patch:
@@ -51,7 +51,7 @@
  * to forestall the problem of running multiple instances of Hudson that point to the same data directory.
  *
  * <p>
- * This set up error occasionally happens especialy when the user is trying to reassign the context path of the app,
+ * This set up error occasionally happens especially when the user is trying to reassign the context path of the app,
  * and it results in a hard-to-diagnose error, so we actively check this.
  *
  * <p>

File: core/src/main/java/hudson/util/QuotedStringTokenizer.java
Patch:
@@ -44,7 +44,7 @@
 /** StringTokenizer with Quoting support.
  *
  * This class is a copy of the java.util.StringTokenizer API and
- * the behaviour is the same, except that single and doulbe quoted
+ * the behaviour is the same, except that single and double quoted
  * string values are recognized.
  * Delimiters within quotes are not considered delimiters.
  * Quotes can be escaped with '\'.
@@ -328,7 +328,7 @@ public int countTokens()
     /* ------------------------------------------------------------ */
     /** Quote a string.
      * The string is quoted only if quoting is required due to
-     * embeded delimiters, quote characters or the
+     * embedded delimiters, quote characters or the
      * empty string.
      * @param s The string to quote.
      * @return quoted string
@@ -358,7 +358,7 @@ public static String quote(String s, String delim)
     /* ------------------------------------------------------------ */
     /** Quote a string.
      * The string is quoted only if quoting is required due to
-     * embeded delimiters, quote characters or the
+     * embedded delimiters, quote characters or the
      * empty string.
      * @param s The string to quote.
      * @return quoted string

File: core/src/main/java/hudson/util/jna/DotNet.java
Patch:
@@ -46,7 +46,7 @@ public static boolean isInstalled(int major, int minor) {
         try {
             // see http://support.microsoft.com/?scid=kb;en-us;315291 for the basic algorithm
             // observation in my registry shows that the actual key name can be things like "v2.0 SP1"
-            // or "v2.0.50727", so the regexp is written to accomodate this.
+            // or "v2.0.50727", so the regexp is written to accommodate this.
             RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly("SOFTWARE\\Microsoft\\.NETFramework");
             try {
                 for( String keyName : key.getSubKeys() ) {

File: core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java
Patch:
@@ -77,7 +77,7 @@ public synchronized void load() {
 
     /**
      * Gets the service administrator e-mail address.
-     * @return Admin adress or &quot;address not configured&quot; stub
+     * @return Admin address or &quot;address not configured&quot; stub
      */
     public @Nonnull String getAdminAddress() {
         String v = adminAddress;
@@ -92,7 +92,7 @@ public synchronized void load() {
     public void setAdminAddress(@CheckForNull String adminAddress) {
         String address = Util.nullify(adminAddress);
         if(address != null && address.startsWith("\"") && address.endsWith("\"")) {
-            // some users apparently quote the whole thing. Don't konw why
+            // some users apparently quote the whole thing. Don't know why
             // anyone does this, but it's a machine's job to forgive human mistake
             address = address.substring(1,address.length()-1);
         }

File: core/src/main/java/jenkins/slaves/restarter/SlaveRestarter.java
Patch:
@@ -11,7 +11,7 @@
  * Extension point to control how to restart JNLP slave when it loses the connection with the master.
  *
  * <p>
- * Objects are instantiated on the master, then transfered to a slave via serialization.
+ * Objects are instantiated on the master, then transferred to a slave via serialization.
  *
  * @author Kohsuke Kawaguchi
  */

File: core/src/test/java/hudson/model/ParametersActionTest.java
Patch:
@@ -89,7 +89,7 @@ public void createUpdatedShouldReturnNewInstanceWithNullOverride() {
     
     @Test
     @Issue("JENKINS-15094")
-    public void checkNullParamaterValues() {
+    public void checkNullParameterValues() {
         SubTask subtask = mock(SubTask.class);
         Build build = mock(Build.class);
                    

File: core/src/test/java/hudson/util/ArgumentListBuilderTest.java
Patch:
@@ -41,7 +41,7 @@ public void assertEmptyMask() {
         builder.add("arg");
         builder.add("other", "arguments");
 
-        assertFalse("There shouldnt be any masked arguments", builder.hasMaskedArguments());
+        assertFalse("There should not be any masked arguments", builder.hasMaskedArguments());
         boolean[] array = builder.toMaskArray();
         assertNotNull("The mask array should not be null", array);
         assertThat("The mask array was incorrect", array, is(new boolean[] { false, false, false }));
@@ -166,7 +166,7 @@ public void assertKeyValuePairs() {
         ArgumentListBuilder builder = new ArgumentListBuilder();
         builder.addKeyValuePairs(null, KEY_VALUES);
 
-        assertFalse("There shouldnt be any masked arguments", builder.hasMaskedArguments());
+        assertFalse("There should not be any masked arguments", builder.hasMaskedArguments());
         boolean[] array = builder.toMaskArray();
         assertNotNull("The mask array should not be null", array);
         assertThat("The mask array was incorrect", array, is(new boolean[] { false, false, false }));

File: test/src/main/java/org/jvnet/hudson/test/ExtractResourceSCM.java
Patch:
@@ -57,7 +57,7 @@ public ExtractResourceSCM(URL zip) {
 
     /**
      * with this constructor your zip can contains a folder
-     * more usefull to create a project test zip foo.zip foo
+     * more useful to create a project test zip foo.zip foo
      * @param zip
      * @param parentFolder
      */

File: test/src/test/java/hudson/cli/SetBuildDisplayNameCommandTest.java
Patch:
@@ -62,7 +62,7 @@ public class SetBuildDisplayNameCommandTest {
         assertThat(result, failedWith(-1));
     }
 
-    @Test public void setDescriptionSuccesfully() throws Exception {
+    @Test public void setDescriptionSuccessfully() throws Exception {
 
         FreeStyleProject job = j.createFreeStyleProject("project");
         FreeStyleBuild build = job.scheduleBuild2(0).get();

File: test/src/test/java/hudson/model/JobQueueTest.java
Patch:
@@ -89,7 +89,7 @@ public void buildPendingWhenBuildInPostProduction() throws Exception {
             assertTrue(j.jenkins.getQueue().getItem(project) instanceof BlockedItem); //check is it is blocked
         }
         else {
-            fail("The maximum attemps for checking if the job is in POST_PRODUCTION State have reached");
+            fail("The maximum attempts for checking if the job is in POST_PRODUCTION State have reached");
         }
         count=0;
         while(!JobQueueTest.fireFinalizeFlag && count<100) {
@@ -104,7 +104,7 @@ public void buildPendingWhenBuildInPostProduction() throws Exception {
             assertFalse(j.jenkins.getQueue().getItem(project) instanceof BlockedItem);
         }
         else {
-            fail("The maximum attemps for checking if the job is in COMPLETED State have reached");
+            fail("The maximum attempts for checking if the job is in COMPLETED State have reached");
         }
         Thread.sleep(1000); //Sleep till job completes.
     }

File: test/src/test/java/hudson/model/MyViewsPropertyTest.java
Patch:
@@ -186,7 +186,7 @@ public void testAddView() throws IOException {
         user.addProperty(property);
         View view = new ListView("foo", property);
         property.addView(view);
-        assertTrue("Property should contians view " + view.name, property.getViews().contains(view));
+        assertTrue("Property should contains view " + view.name, property.getViews().contains(view));
         User.reload();
         user = User.get("User");
         property = user.getProperty(property.getClass());

File: test/src/test/java/hudson/model/SimpleJobTest.java
Patch:
@@ -102,7 +102,7 @@ public void testGetEstimatedDurationIfPrevious3BuildsFailed() throws IOException
         TestBuild lastBuild = new TestBuild(project, Result.FAILURE, 50, previousBuild);
         runs.put(1, lastBuild);
 
-        // failed builds must not be used, if there are succesfulBuilds available.
+        // failed builds must not be used, if there are successfulBuilds available.
         assertEquals(1, project.getEstimatedDuration());
     }
     

File: test/src/test/java/hudson/model/UserTest.java
Patch:
@@ -302,7 +302,7 @@ public void testClear() {
         assertNotNull("User should not be null.", user);
         user.clear();
         user = User.get("John Smith", false, Collections.emptyMap());
-        assertNull("User shoudl be null", user);       
+        assertNull("User should be null", user);       
     }
 
     @Test

File: test/src/test/java/hudson/model/ViewTest.java
Patch:
@@ -362,7 +362,7 @@ public void testRename() throws Exception {
         ListView view2 = listView("foo");
         try{
             view2.rename("renamed");
-            fail("Attemt to rename job with a name used by another view with the same owner should throw exception");
+            fail("Attempt to rename job with a name used by another view with the same owner should throw exception");
         }
         catch(Exception Exception){
         }

File: test/src/test/java/hudson/model/queue/WideExecutionTest.java
Patch:
@@ -50,7 +50,7 @@ public class WideExecutionTest {
     public JenkinsRule j = new JenkinsRule();
 
     @TestExtension
-    public static class Contributer extends SubTaskContributor {
+    public static class Contributor extends SubTaskContributor {
         public Collection<? extends SubTask> forProject(final AbstractProject<?, ?> p) {
             return Collections.singleton(new AbstractSubTask() {
                 private final AbstractSubTask outer = this;

File: test/src/test/java/lib/form/RepeatableTest.java
Patch:
@@ -340,7 +340,7 @@ public static class FooList {
         }
     }
 
-    /** Tests nested repeatable and use of @DataBoundContructor to process formData */
+    /** Tests nested repeatable and use of @DataBoundConstructor to process formData */
     public void testNested() throws Exception {
         HtmlPage p = createWebClient().goTo("self/testNested");
         HtmlForm f = p.getFormByName("config");

File: core/src/main/java/hudson/util/RobustMapConverter.java
Patch:
@@ -30,6 +30,7 @@
 import com.thoughtworks.xstream.io.HierarchicalStreamReader;
 import com.thoughtworks.xstream.mapper.Mapper;
 import java.util.Map;
+import jenkins.util.xstream.CriticalXStreamException;
 
 /**
  * Loads a {@link Map} while tolerating read errors on its keys and values.
@@ -55,6 +56,8 @@ private Object read(HierarchicalStreamReader reader, UnmarshallingContext contex
         reader.moveDown();
         try {
             return readItem(reader, context, map);
+        } catch (CriticalXStreamException x) {
+            throw x;
         } catch (XStreamException x) {
             RobustReflectionConverter.addErrorInContext(context, x);
             return ERROR;

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -175,7 +175,7 @@
  * </pre>
  *
  * <p>
- * When {@link FileCallable} is transfered to a remote node, it will be done so
+ * When {@link FileCallable} is transferred to a remote node, it will be done so
  * by using the same Java serialization scheme that the remoting module uses.
  * See {@link Channel} for more about this. 
  *

File: core/src/main/java/hudson/FileSystemProvisioner.java
Patch:
@@ -238,7 +238,7 @@ public void restoreTo(AbstractBuild<?,?> owner, FilePath dst, TaskListener liste
         @Extension
         public static final class DescriptorImpl extends FileSystemProvisionerDescriptor {
             public boolean discard(FilePath ws, TaskListener listener) throws IOException, InterruptedException {
-                // the default provisioner doens't do anything special,
+                // the default provisioner does not do anything special,
                 // so allow other types to manage it
                 return false;
             }

File: core/src/main/java/hudson/FileSystemProvisionerDescriptor.java
Patch:
@@ -39,7 +39,7 @@ public abstract class FileSystemProvisionerDescriptor extends Descriptor<FileSys
      *
      * <p>
      * Because users may modify the file system behind Hudson, and slaves may come and go when
-     * configuration changes hapen, in general case Hudson is unable to keep track of which jobs
+     * configuration changes happen, in general case Hudson is unable to keep track of which jobs
      * have workspaces in which slaves.
      *
      * <p>

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1385,7 +1385,7 @@ public static boolean defaultToTrue(Boolean b) {
     /**
      * If the value exists, return that value. Otherwise return the default value.
      * <p>
-     * Starting 1.294, JEXL supports the elvis operator "x?:y" that supercedes this.
+     * Starting 1.294, JEXL supports the elvis operator "x?:y" that supersedes this.
      *
      * @since 1.150
      */

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -63,7 +63,7 @@
  * for Jenkins to control {@link Plugin}.
  *
  * <p>
- * A plug-in is packaged into a jar file whose extension is <tt>".jpi"</tt> (or <tt>".hpi"</tt> for backward compatability),
+ * A plug-in is packaged into a jar file whose extension is <tt>".jpi"</tt> (or <tt>".hpi"</tt> for backward compatibility),
  * A plugin needs to have a special manifest entry to identify what it is.
  *
  * <p>

File: core/src/main/java/hudson/cli/CloneableCLICommand.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * {@link Cloneable} {@link CLICommand}.
  *
- * Uses {@link #clone()} instead of "new" to create a copy for exection.
+ * Uses {@link #clone()} instead of "new" to create a copy for execution.
  *
  * @author Kohsuke Kawaguchi
  */

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -1566,8 +1566,8 @@ public boolean accept(File dir, String name) {
             if (m.matches()) {
                 File newLocation = new File(dir, "logs/slaves/" + m.group(1) + "/slave.log" + Util.fixNull(m.group(2)));
                 newLocation.getParentFile().mkdirs();
-                boolean relocationSuccessfull=f.renameTo(newLocation);
-                if (relocationSuccessfull) { // The operation will fail if mkdir fails
+                boolean relocationSuccessful=f.renameTo(newLocation);
+                if (relocationSuccessful) { // The operation will fail if mkdir fails
                     LOGGER.log(Level.INFO, "Relocated log file {0} to {1}",new Object[] {f.getPath(),newLocation.getPath()});
                 } else {
                     LOGGER.log(Level.WARNING, "Cannot relocate log file {0} to {1}",new Object[] {f.getPath(),newLocation.getPath()});

File: core/src/main/java/hudson/model/UsageStatistics.java
Patch:
@@ -197,10 +197,10 @@ public boolean configure(StaplerRequest req, JSONObject json) throws FormExcepti
     }
 
     /**
-     * Assymetric cipher is slow and in case of Sun RSA implementation it can only encyrypt the first block.
+     * Asymmetric cipher is slow and in case of Sun RSA implementation it can only encyrypt the first block.
      *
      * So first create a symmetric key, then place this key in the beginning of the stream by encrypting it
-     * with the assymetric cipher. The rest of the stream will be encrypted by a symmetric cipher.
+     * with the asymmetric cipher. The rest of the stream will be encrypted by a symmetric cipher.
      */
     public static final class CombinedCipherOutputStream extends FilterOutputStream {
         public CombinedCipherOutputStream(OutputStream out, Cipher asym, String algorithm) throws IOException, GeneralSecurityException {

File: core/src/main/java/hudson/os/SU.java
Patch:
@@ -62,7 +62,7 @@ private SU() { // not meant to be instantiated
     }
 
     /**
-     * Returns a {@link VirtualChannel} that's connected to the priviledge-escalated environment.
+     * Returns a {@link VirtualChannel} that's connected to the privilege-escalated environment.
      *
      * @param listener
      *      What this method is doing (such as what process it's invoking) will be sent here.
@@ -122,7 +122,7 @@ private static LocalChannel newLocalChannel() {
     }
 
     /**
-     * Starts a new priviledge-escalated environment, execute a closure, and shut it down.
+     * Starts a new privilege-escalated environment, execute a closure, and shut it down.
      */
     public static <V,T extends Throwable> V execute(TaskListener listener, String rootUsername, String rootPassword, final Callable<V, T> closure) throws T, IOException, InterruptedException {
         VirtualChannel ch = start(listener, rootUsername, rootPassword);

File: core/src/main/java/hudson/scheduler/CronTab.java
Patch:
@@ -92,7 +92,7 @@ public CronTab(String format, int line, Hash hash) throws ANTLRException {
 
     /**
      * @param timezone
-     *      Used to schedule cron in a differnt timezone. Null to use the default system 
+     *      Used to schedule cron in a different timezone. Null to use the default system 
      *      timezone
      * @since 1.615
      */

File: core/src/main/java/hudson/security/ACL.java
Patch:
@@ -127,7 +127,7 @@ public boolean hasCreatePermission(@Nonnull Authentication a, @Nonnull ItemGroup
      *
      * <p>
      * This doesn't need to be included in {@link Authentication#getAuthorities()},
-     * but {@link ACL} is responsible for checking it nontheless, as if it was the
+     * but {@link ACL} is responsible for checking it nonetheless, as if it was the
      * last entry in the granted authority.
      */
     public static final Sid EVERYONE = new Sid() {

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -357,7 +357,7 @@ public GroupDetails loadGroupByGroupname(String groupname) throws UsernameNotFou
      * @param fetchMembers if {@code true} then try and fetch the members of the group if it exists. Trying does not
      *                     imply that the members will be fetched and {@link hudson.security.GroupDetails#getMembers()}
      *                     may still return {@code null}
-     * @throws UserMayOrMayNotExistException if no conclusive result could be determined regarding the group existance.
+     * @throws UserMayOrMayNotExistException if no conclusive result could be determined regarding the group existence.
      * @throws UsernameNotFoundException     if the group does not exist.
      * @throws DataAccessException           if the backing security realm could not be connected to.
      * @since 1.549

File: core/src/main/java/hudson/tasks/Maven.java
Patch:
@@ -460,7 +460,7 @@ public static final class MavenInstallation extends ToolInstallation implements
         /**
          * @deprecated since 2009-02-25.
          */
-        @Deprecated // kept for backward compatiblity - use getHome()
+        @Deprecated // kept for backward compatibility - use getHome()
         private transient String mavenHome;
 
         /**

File: core/src/main/java/hudson/util/ChartUtil.java
Patch:
@@ -113,7 +113,7 @@ public String toString() {
      *
      * @param defaultSize
      *      The size of the picture to be generated. These values can be overridden
-     *      by the query paramter 'width' and 'height' in the request.
+     *      by the query parameter 'width' and 'height' in the request.
      * @deprecated as of 1.320
      *      Bind {@link Graph} to the URL space. See {@code hudson.tasks.junit.History} as an example (note that doing so involves
      *      a bit of URL structure change.)
@@ -129,7 +129,7 @@ public static void generateGraph(StaplerRequest req, StaplerResponse rsp, JFreeC
      * @param defaultW
      * @param defaultH
      *      The size of the picture to be generated. These values can be overridden
-     *      by the query paramter 'width' and 'height' in the request.
+     *      by the query parameter 'width' and 'height' in the request.
      * @deprecated as of 1.320
      *      Bind {@link Graph} to the URL space. See {@code hudson.tasks.junit.History} as an example (note that doing so involves
      *      a bit of URL structure change.)

File: core/src/main/java/hudson/util/DoubleLaunchChecker.java
Patch:
@@ -51,7 +51,7 @@
  * to forestall the problem of running multiple instances of Hudson that point to the same data directory.
  *
  * <p>
- * This set up error occasionally happens especialy when the user is trying to reassign the context path of the app,
+ * This set up error occasionally happens especially when the user is trying to reassign the context path of the app,
  * and it results in a hard-to-diagnose error, so we actively check this.
  *
  * <p>

File: core/src/main/java/hudson/util/QuotedStringTokenizer.java
Patch:
@@ -44,7 +44,7 @@
 /** StringTokenizer with Quoting support.
  *
  * This class is a copy of the java.util.StringTokenizer API and
- * the behaviour is the same, except that single and doulbe quoted
+ * the behaviour is the same, except that single and double quoted
  * string values are recognized.
  * Delimiters within quotes are not considered delimiters.
  * Quotes can be escaped with '\'.
@@ -328,7 +328,7 @@ public int countTokens()
     /* ------------------------------------------------------------ */
     /** Quote a string.
      * The string is quoted only if quoting is required due to
-     * embeded delimiters, quote characters or the
+     * embedded delimiters, quote characters or the
      * empty string.
      * @param s The string to quote.
      * @return quoted string
@@ -358,7 +358,7 @@ public static String quote(String s, String delim)
     /* ------------------------------------------------------------ */
     /** Quote a string.
      * The string is quoted only if quoting is required due to
-     * embeded delimiters, quote characters or the
+     * embedded delimiters, quote characters or the
      * empty string.
      * @param s The string to quote.
      * @return quoted string

File: core/src/main/java/hudson/util/jna/DotNet.java
Patch:
@@ -46,7 +46,7 @@ public static boolean isInstalled(int major, int minor) {
         try {
             // see http://support.microsoft.com/?scid=kb;en-us;315291 for the basic algorithm
             // observation in my registry shows that the actual key name can be things like "v2.0 SP1"
-            // or "v2.0.50727", so the regexp is written to accomodate this.
+            // or "v2.0.50727", so the regexp is written to accommodate this.
             RegistryKey key = RegistryKey.LOCAL_MACHINE.openReadonly("SOFTWARE\\Microsoft\\.NETFramework");
             try {
                 for( String keyName : key.getSubKeys() ) {

File: core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java
Patch:
@@ -77,7 +77,7 @@ public synchronized void load() {
 
     /**
      * Gets the service administrator e-mail address.
-     * @return Admin adress or &quot;address not configured&quot; stub
+     * @return Admin address or &quot;address not configured&quot; stub
      */
     public @Nonnull String getAdminAddress() {
         String v = adminAddress;
@@ -92,7 +92,7 @@ public synchronized void load() {
     public void setAdminAddress(@CheckForNull String adminAddress) {
         String address = Util.nullify(adminAddress);
         if(address != null && address.startsWith("\"") && address.endsWith("\"")) {
-            // some users apparently quote the whole thing. Don't konw why
+            // some users apparently quote the whole thing. Don't know why
             // anyone does this, but it's a machine's job to forgive human mistake
             address = address.substring(1,address.length()-1);
         }

File: core/src/main/java/jenkins/slaves/restarter/SlaveRestarter.java
Patch:
@@ -11,7 +11,7 @@
  * Extension point to control how to restart JNLP slave when it loses the connection with the master.
  *
  * <p>
- * Objects are instantiated on the master, then transfered to a slave via serialization.
+ * Objects are instantiated on the master, then transferred to a slave via serialization.
  *
  * @author Kohsuke Kawaguchi
  */

File: core/src/test/java/hudson/model/ParametersActionTest.java
Patch:
@@ -89,7 +89,7 @@ public void createUpdatedShouldReturnNewInstanceWithNullOverride() {
     
     @Test
     @Issue("JENKINS-15094")
-    public void checkNullParamaterValues() {
+    public void checkNullParameterValues() {
         SubTask subtask = mock(SubTask.class);
         Build build = mock(Build.class);
                    

File: core/src/test/java/hudson/util/ArgumentListBuilderTest.java
Patch:
@@ -41,7 +41,7 @@ public void assertEmptyMask() {
         builder.add("arg");
         builder.add("other", "arguments");
 
-        assertFalse("There shouldnt be any masked arguments", builder.hasMaskedArguments());
+        assertFalse("There should not be any masked arguments", builder.hasMaskedArguments());
         boolean[] array = builder.toMaskArray();
         assertNotNull("The mask array should not be null", array);
         assertThat("The mask array was incorrect", array, is(new boolean[] { false, false, false }));
@@ -166,7 +166,7 @@ public void assertKeyValuePairs() {
         ArgumentListBuilder builder = new ArgumentListBuilder();
         builder.addKeyValuePairs(null, KEY_VALUES);
 
-        assertFalse("There shouldnt be any masked arguments", builder.hasMaskedArguments());
+        assertFalse("There should not be any masked arguments", builder.hasMaskedArguments());
         boolean[] array = builder.toMaskArray();
         assertNotNull("The mask array should not be null", array);
         assertThat("The mask array was incorrect", array, is(new boolean[] { false, false, false }));

File: test/src/main/java/org/jvnet/hudson/test/ExtractResourceSCM.java
Patch:
@@ -57,7 +57,7 @@ public ExtractResourceSCM(URL zip) {
 
     /**
      * with this constructor your zip can contains a folder
-     * more usefull to create a project test zip foo.zip foo
+     * more useful to create a project test zip foo.zip foo
      * @param zip
      * @param parentFolder
      */

File: test/src/test/java/hudson/cli/SetBuildDisplayNameCommandTest.java
Patch:
@@ -62,7 +62,7 @@ public class SetBuildDisplayNameCommandTest {
         assertThat(result, failedWith(-1));
     }
 
-    @Test public void setDescriptionSuccesfully() throws Exception {
+    @Test public void setDescriptionSuccessfully() throws Exception {
 
         FreeStyleProject job = j.createFreeStyleProject("project");
         FreeStyleBuild build = job.scheduleBuild2(0).get();

File: test/src/test/java/hudson/model/JobQueueTest.java
Patch:
@@ -89,7 +89,7 @@ public void buildPendingWhenBuildInPostProduction() throws Exception {
             assertTrue(j.jenkins.getQueue().getItem(project) instanceof BlockedItem); //check is it is blocked
         }
         else {
-            fail("The maximum attemps for checking if the job is in POST_PRODUCTION State have reached");
+            fail("The maximum attempts for checking if the job is in POST_PRODUCTION State have reached");
         }
         count=0;
         while(!JobQueueTest.fireFinalizeFlag && count<100) {
@@ -104,7 +104,7 @@ public void buildPendingWhenBuildInPostProduction() throws Exception {
             assertFalse(j.jenkins.getQueue().getItem(project) instanceof BlockedItem);
         }
         else {
-            fail("The maximum attemps for checking if the job is in COMPLETED State have reached");
+            fail("The maximum attempts for checking if the job is in COMPLETED State have reached");
         }
         Thread.sleep(1000); //Sleep till job completes.
     }

File: test/src/test/java/hudson/model/MyViewsPropertyTest.java
Patch:
@@ -186,7 +186,7 @@ public void testAddView() throws IOException {
         user.addProperty(property);
         View view = new ListView("foo", property);
         property.addView(view);
-        assertTrue("Property should contians view " + view.name, property.getViews().contains(view));
+        assertTrue("Property should contains view " + view.name, property.getViews().contains(view));
         User.reload();
         user = User.get("User");
         property = user.getProperty(property.getClass());

File: test/src/test/java/hudson/model/SimpleJobTest.java
Patch:
@@ -102,7 +102,7 @@ public void testGetEstimatedDurationIfPrevious3BuildsFailed() throws IOException
         TestBuild lastBuild = new TestBuild(project, Result.FAILURE, 50, previousBuild);
         runs.put(1, lastBuild);
 
-        // failed builds must not be used, if there are succesfulBuilds available.
+        // failed builds must not be used, if there are successfulBuilds available.
         assertEquals(1, project.getEstimatedDuration());
     }
     

File: test/src/test/java/hudson/model/UserTest.java
Patch:
@@ -302,7 +302,7 @@ public void testClear() {
         assertNotNull("User should not be null.", user);
         user.clear();
         user = User.get("John Smith", false, Collections.emptyMap());
-        assertNull("User shoudl be null", user);       
+        assertNull("User should be null", user);       
     }
 
     @Test

File: test/src/test/java/hudson/model/ViewTest.java
Patch:
@@ -362,7 +362,7 @@ public void testRename() throws Exception {
         ListView view2 = listView("foo");
         try{
             view2.rename("renamed");
-            fail("Attemt to rename job with a name used by another view with the same owner should throw exception");
+            fail("Attempt to rename job with a name used by another view with the same owner should throw exception");
         }
         catch(Exception Exception){
         }

File: test/src/test/java/hudson/model/queue/WideExecutionTest.java
Patch:
@@ -50,7 +50,7 @@ public class WideExecutionTest {
     public JenkinsRule j = new JenkinsRule();
 
     @TestExtension
-    public static class Contributer extends SubTaskContributor {
+    public static class Contributor extends SubTaskContributor {
         public Collection<? extends SubTask> forProject(final AbstractProject<?, ?> p) {
             return Collections.singleton(new AbstractSubTask() {
                 private final AbstractSubTask outer = this;

File: test/src/test/java/lib/form/RepeatableTest.java
Patch:
@@ -340,7 +340,7 @@ public static class FooList {
         }
     }
 
-    /** Tests nested repeatable and use of @DataBoundContructor to process formData */
+    /** Tests nested repeatable and use of @DataBoundConstructor to process formData */
     public void testNested() throws Exception {
         HtmlPage p = createWebClient().goTo("self/testNested");
         HtmlForm f = p.getFormByName("config");

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -473,6 +473,7 @@ public String getPronoun() {
      * @since 1.401
      */
     public String getBuildNowText() {
+        // For compatibility, still use the deprecated replacer if specified.
         return AlternativeUiTextProvider.get(BUILD_NOW_TEXT, this, getParameterizedJobMixIn().getBuildNowText());
     }
 
@@ -2243,8 +2244,9 @@ public int compare(Integer o1, Integer o2) {
     public static final Permission ABORT = CANCEL;
 
     /**
-     * Replaceable "Build Now" text.
+     * @deprecated Use {@link ParameterizedJobMixIn#BUILD_NOW_TEXT}.
      */
+    @Deprecated
     public static final Message<AbstractProject> BUILD_NOW_TEXT = new Message<AbstractProject>();
 
     /**

File: core/src/main/java/hudson/model/RunMap.java
Patch:
@@ -186,7 +186,7 @@ public R put(R r) {
         // Defense against JENKINS-23152 and its ilk.
         File rootDir = r.getRootDir();
         if (rootDir.isDirectory()) {
-            throw new IllegalStateException(rootDir + " already existed; will not overwite with " + r);
+            throw new IllegalStateException(rootDir + " already existed; will not overwrite with " + r);
         }
         if (!r.getClass().getName().equals("hudson.matrix.MatrixRun")) { // JENKINS-26739: grandfathered in
             proposeNewNumber(r.getNumber());

File: core/src/main/java/hudson/model/RunMap.java
Patch:
@@ -186,7 +186,7 @@ public R put(R r) {
         // Defense against JENKINS-23152 and its ilk.
         File rootDir = r.getRootDir();
         if (rootDir.isDirectory()) {
-            throw new IllegalStateException(rootDir + " already existed; will not overwite with " + r);
+            throw new IllegalStateException(rootDir + " already existed; will not overwrite with " + r);
         }
         if (!r.getClass().getName().equals("hudson.matrix.MatrixRun")) { // JENKINS-26739: grandfathered in
             proposeNewNumber(r.getNumber());

File: test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java
Patch:
@@ -967,7 +967,7 @@ public void onOnline(Computer C, TaskListener t) {
      * This is useful during debugging a test so that one can inspect the state of Hudson through the web browser.
      */
     public void interactiveBreak() throws Exception {
-        System.out.println("Jenkins is running at http://localhost:"+localPort+"/");
+        System.out.println("Jenkins is running at " + getURL());
         new BufferedReader(new InputStreamReader(System.in)).readLine();
     }
 

File: test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java
Patch:
@@ -967,7 +967,7 @@ public void onOnline(Computer C, TaskListener t) {
      * This is useful during debugging a test so that one can inspect the state of Hudson through the web browser.
      */
     public void interactiveBreak() throws Exception {
-        System.out.println("Jenkins is running at http://localhost:"+localPort+"/");
+        System.out.println("Jenkins is running at " + getURL());
         new BufferedReader(new InputStreamReader(System.in)).readLine();
     }
 

File: core/src/main/java/hudson/widgets/BuildHistoryWidget.java
Patch:
@@ -23,10 +23,10 @@
  */
 package hudson.widgets;
 
-import hudson.model.ModelObject;
 import jenkins.model.Jenkins;
 import hudson.model.Queue.Item;
 import hudson.model.Queue.Task;
+import jenkins.widgets.HistoryPageFilter;
 import org.apache.commons.collections.IteratorUtils;
 
 import java.util.Collection;

File: core/src/main/java/hudson/widgets/HistoryWidget.java
Patch:
@@ -27,6 +27,8 @@
 import hudson.model.ModelObject;
 import hudson.model.Run;
 
+import jenkins.widgets.HistoryPageEntry;
+import jenkins.widgets.HistoryPageFilter;
 import org.apache.commons.collections.IteratorUtils;
 import org.kohsuke.stapler.Header;
 import org.kohsuke.stapler.Stapler;
@@ -157,7 +159,7 @@ private List<HistoryPageEntry<T>> toPageEntries(Iterable<T> historyItemList) {
     }
 
     /**
-     * Get a {@link HistoryPageFilter} for rendering a page of queue items.
+     * Get a {@link jenkins.widgets.HistoryPageFilter} for rendering a page of queue items.
      */
     public HistoryPageFilter getHistoryPageFilter() {
         HistoryPageFilter<T> historyPageFilter = newPageFilter();

File: core/src/main/java/jenkins/widgets/HistoryPageEntry.java
Patch:
@@ -21,7 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  * THE SOFTWARE.
  */
-package hudson.widgets;
+package jenkins.widgets;
 
 import hudson.model.Queue;
 import hudson.model.Run;

File: core/src/main/java/jenkins/widgets/buildsearch/BuildSearchParams.java
Patch:
@@ -21,7 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  * THE SOFTWARE.
  */
-package hudson.widgets.buildsearch;
+package jenkins.widgets.buildsearch;
 
 import javax.annotation.Nonnull;
 import java.util.ArrayList;

File: core/src/test/java/jenkins/widgets/HistoryPageFilterTest.java
Patch:
@@ -21,13 +21,15 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  * THE SOFTWARE.
  */
-package hudson.widgets;
+package jenkins.widgets;
 
 import hudson.model.Job;
 import hudson.model.MockItem;
 import hudson.model.ModelObject;
 import hudson.model.Result;
 import hudson.model.Run;
+import jenkins.widgets.HistoryPageEntry;
+import jenkins.widgets.HistoryPageFilter;
 import org.junit.Assert;
 import org.junit.Test;
 import org.mockito.Mockito;

File: core/src/test/java/jenkins/widgets/buildsearch/BuildSearchParamProcessorTest.java
Patch:
@@ -21,10 +21,10 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  * THE SOFTWARE.
  */
-package hudson.widgets.buildsearch;
+package jenkins.widgets.buildsearch;
 
 import hudson.model.Result;
-import hudson.widgets.buildsearch.processors.DateProcessorFactory;
+import jenkins.widgets.buildsearch.processors.DateProcessorFactory;
 import org.junit.Assert;
 import org.junit.Test;
 

File: core/src/test/java/jenkins/widgets/buildsearch/BuildSearchParamsTest.java
Patch:
@@ -21,7 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  * THE SOFTWARE.
  */
-package hudson.widgets.buildsearch;
+package jenkins.widgets.buildsearch;
 
 import org.junit.Assert;
 import org.junit.Test;

File: core/src/main/java/hudson/console/PlainTextConsoleOutputStream.java
Patch:
@@ -89,5 +89,5 @@ public void close() throws IOException {
     }
 
 
-    private static final Logger LOGGER = Logger.getLogger(ConsoleAnnotationOutputStream.class.getName());
+    private static final Logger LOGGER = Logger.getLogger(PlainTextConsoleOutputStream.class.getName());
 }

File: core/src/main/java/jenkins/model/Nodes.java
Patch:
@@ -238,7 +238,7 @@ public boolean accept(File child) {
                         newNodes.put(node.getNodeName(), node);
                     }
                 } catch (IOException e) {
-                    Logger.getLogger(ItemGroupMixIn.class.getName()).log(Level.WARNING, "could not load " + subdir, e);
+                    Logger.getLogger(Nodes.class.getName()).log(Level.WARNING, "could not load " + subdir, e);
                 }
             }
         }

File: core/src/main/java/jenkins/security/BasicHeaderProcessor.java
Patch:
@@ -158,5 +158,5 @@ protected List<? extends BasicHeaderAuthenticator> all() {
     public void destroy() {
     }
 
-    private static final Logger LOGGER = Logger.getLogger(ApiTokenFilter.class.getName());
+    private static final Logger LOGGER = Logger.getLogger(BasicHeaderProcessor.class.getName());
 }

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1473,7 +1473,8 @@ private PollingResult pollWithWorkspace(TaskListener listener, SCM scm, R lb, @N
         Launcher launcher = ws.createLauncher(listener).decorateByEnv(getEnvironment(node,listener));
         WorkspaceList.Lease lease = l.acquire(ws, !concurrentBuild);
         try {
-            listener.getLogger().println("Polling SCM changes on " + node.getSelfLabel().getName());
+            String nodeName = node != null ? node.getSelfLabel().getName() : "[node_unavailable]";
+            listener.getLogger().println("Polling SCM changes on " + nodeName);
             LOGGER.fine("Polling SCM changes of " + getName());
             if (pollingBaseline==null) // see NOTE-NO-BASELINE above
                 calcPollingBaseline(lb,launcher,listener);

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -538,7 +538,6 @@ public synchronized void doSubmitDescription( StaplerRequest req, StaplerRespons
      * since it predates {@code <l:confirmationLink>}. {@code /delete} goes to a Jelly page
      * which should now be unused by core but is left in case plugins are still using it.
      */
-    @CLIMethod(name="delete-job")
     @RequirePOST
     public void doDoDelete( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException, InterruptedException {
         delete();

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -1439,7 +1439,6 @@ public void updateByXml(final InputStream source) throws IOException, ServletExc
     /**
      * Really deletes the slave.
      */
-    @CLIMethod(name="delete-node")
     @RequirePOST
     public HttpResponse doDoDelete() throws IOException {
         checkPermission(DELETE);

File: test/src/test/java/hudson/model/FreestyleJobPublisherTest.java
Patch:
@@ -73,9 +73,10 @@ public void testFreestyleWithExceptionPublisher() throws Exception {
 
         assertEquals("Build must fail, because we used AbortExceptionPublisher", b.getResult(), Result.FAILURE);
         j.assertLogNotContains("\tat", b); // log must not contain stacktrace
+        j.assertLogContains("Threw AbortException from publisher!", b); // log must contain exact error message
         File file = new File(b.getArtifactsDir(), "result.txt");
         assertTrue("ArtifactArchiver is executed even prior publisher fails", file.exists());
-        assertTrue("Second publisher must see FAILURE status",
+        assertTrue("Third publisher must see FAILURE status",
                 FileUtils.readFileToString(file).equals(Result.FAILURE.toString()));
     }
 
@@ -98,6 +99,7 @@ public void testFreestyleWithIOExceptionPublisher() throws Exception {
 
         assertEquals("Build must fail, because we used FalsePublisher", b.getResult(), Result.FAILURE);
         j.assertLogContains("\tat hudson.model.utils.IOExceptionPublisher", b); // log must contain stacktrace
+        j.assertLogContains("Threw IOException from publisher!", b); // log must contain exact error message
         File file = new File(b.getArtifactsDir(), "result.txt");
         assertTrue("ArtifactArchiver is executed even prior publisher fails", file.exists());
         assertTrue("Third publisher must see FAILURE status",

File: test/src/test/java/hudson/model/utils/IOExceptionPublisher.java
Patch:
@@ -19,7 +19,7 @@
 public class IOExceptionPublisher extends Recorder {
     @Override
     public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {
-        throw new IOException("Throwed IOException from publisher!");
+        throw new IOException("Threw IOException from publisher!");
     }
 
     @Override

File: test/src/test/java/hudson/model/utils/AbortExceptionPublisher.java
Patch:
@@ -19,7 +19,7 @@
 public class AbortExceptionPublisher extends Recorder {
     @Override
     public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {
-        throw new AbortException("Throwed AbortException from publisher!");
+        throw new AbortException("Threw AbortException from publisher!");
     }
 
     @Override

File: core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java
Patch:
@@ -9,6 +9,7 @@
 import org.kohsuke.stapler.QueryParameter;
 import org.kohsuke.stapler.StaplerRequest;
 
+import javax.annotation.CheckForNull;
 import javax.mail.internet.AddressException;
 import javax.mail.internet.InternetAddress;
 import javax.servlet.ServletContext;

File: core/src/main/java/hudson/util/SecretRewriter.java
Patch:
@@ -13,6 +13,7 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.PrintWriter;
+import java.nio.file.LinkOption;
 import java.security.GeneralSecurityException;
 import java.security.InvalidKeyException;
 import java.util.HashSet;
@@ -145,7 +146,7 @@ public synchronized int rewriteRecursive(File dir, TaskListener listener) throws
     private int rewriteRecursive(File dir, String relative, TaskListener listener) throws InvalidKeyException {
         String canonical;
         try {
-            canonical = dir.getCanonicalPath();
+            canonical = dir.toPath().toRealPath(new LinkOption[0]).toString();
         } catch (IOException e) {
             canonical = dir.getAbsolutePath(); //
         }

File: core/src/main/java/jenkins/util/VirtualFile.java
Patch:
@@ -38,6 +38,7 @@
 import java.io.InputStream;
 import java.io.Serializable;
 import java.net.URI;
+import java.nio.file.LinkOption;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.logging.Level;
@@ -297,8 +298,8 @@ private static final class FileVF extends VirtualFile {
             }
         private boolean isIllegalSymlink() { // TODO JENKINS-26838
             try {
-                String myPath = f.getCanonicalPath();
-                String rootPath = root.getCanonicalPath();
+                String myPath = f.toPath().toRealPath(new LinkOption[0]).toString();
+                String rootPath = root.toPath().toRealPath(new LinkOption[0]).toString();
                 if (!myPath.equals(rootPath) && !myPath.startsWith(rootPath + File.separatorChar)) {
                     return true;
                 }

File: core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java
Patch:
@@ -48,7 +48,7 @@ public boolean handle(String nodeName, JnlpSlaveHandshake handshake) throws IOEx
                 }
             } else {
                 handshake.error(nodeName + " is already connected to this master. Rejecting this connection.");
-                return false;
+                return true;
             }
         }
 

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -380,7 +380,7 @@ public boolean isParking() {
      * @return null if the death is expected death or the thread is {@link #isAlive() still alive}.
      * @since 1.142
      */
-    public Throwable getCauseOfDeath() {
+    public @CheckForNull Throwable getCauseOfDeath() {
         return causeOfDeath;
     }
 

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -266,7 +266,9 @@ protected AbstractProject(ItemGroup parent, String name) {
         buildMixIn = createBuildMixIn();
         builds = buildMixIn.getRunMap();
 
-        if(Jenkins.getInstance()!=null && !Jenkins.getInstance().getNodes().isEmpty()) {
+        final Jenkins j = Jenkins.getInstance();
+        final List<Node> nodes = j != null ? j.getNodes() : null;
+        if(nodes!=null && !nodes.isEmpty()) {
             // if a new job is configured with Hudson that already has slave nodes
             // make it roamable by default
             canRoam = true;

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -266,7 +266,9 @@ protected AbstractProject(ItemGroup parent, String name) {
         buildMixIn = createBuildMixIn();
         builds = buildMixIn.getRunMap();
 
-        if(Jenkins.getInstance()!=null && !Jenkins.getInstance().getNodes().isEmpty()) {
+        final Jenkins j = Jenkins.getInstance();
+        final List<Node> nodes = j != null ? j.getNodes() : null;
+        if(nodes!=null && !nodes.isEmpty()) {
             // if a new job is configured with Hudson that already has slave nodes
             // make it roamable by default
             canRoam = true;

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1471,7 +1471,8 @@ private PollingResult pollWithWorkspace(TaskListener listener, SCM scm, R lb, @N
         Launcher launcher = ws.createLauncher(listener).decorateByEnv(getEnvironment(node,listener));
         WorkspaceList.Lease lease = l.acquire(ws, !concurrentBuild);
         try {
-            listener.getLogger().println("Polling SCM changes on " + node.getSelfLabel().getName());
+            String nodeName = node != null ? node.getSelfLabel().getName() : "[node_unavailable]";
+            listener.getLogger().println("Polling SCM changes on " + nodeName);
             LOGGER.fine("Polling SCM changes of " + getName());
             if (pollingBaseline==null) // see NOTE-NO-BASELINE above
                 calcPollingBaseline(lb,launcher,listener);

File: core/src/main/java/hudson/ExtensionList.java
Patch:
@@ -143,7 +143,7 @@ public void addListener(@Nonnull ExtensionListListener listener) {
      * Looks for the extension instance of the given type (subclasses excluded),
      * or return null.
      */
-    public <U extends T> U get(Class<U> type) {
+    public @CheckForNull <U extends T> U get(Class<U> type) {
         for (T ext : this)
             if(ext.getClass()==type)
                 return type.cast(ext);

File: core/src/main/java/hudson/model/labels/LabelAssignmentAction.java
Patch:
@@ -7,6 +7,7 @@
 import hudson.model.Queue.QueueDecisionHandler;
 import hudson.model.Queue.Task;
 import hudson.model.queue.SubTask;
+import javax.annotation.Nonnull;
 
 /**
  * {@link Action} that can be submitted to {@link Queue} that controls where
@@ -35,5 +36,5 @@ public interface LabelAssignmentAction extends Action {
      *      null to let other {@link LabelAssignmentAction}s take control, eventually to {@code SubTask#getAssignedLabel()}.
      *      If non-null value is returned, that label will be authoritative.
      */
-    Label getAssignedLabel(SubTask task);
+    Label getAssignedLabel(@Nonnull SubTask task);
 }

File: core/src/main/java/hudson/util/RobustMapConverter.java
Patch:
@@ -30,6 +30,7 @@
 import com.thoughtworks.xstream.io.HierarchicalStreamReader;
 import com.thoughtworks.xstream.mapper.Mapper;
 import java.util.Map;
+import jenkins.util.xstream.CriticalXStreamException;
 
 /**
  * Loads a {@link Map} while tolerating read errors on its keys and values.
@@ -55,6 +56,8 @@ private Object read(HierarchicalStreamReader reader, UnmarshallingContext contex
         reader.moveDown();
         try {
             return readItem(reader, context, map);
+        } catch (CriticalXStreamException x) {
+            throw x;
         } catch (XStreamException x) {
             RobustReflectionConverter.addErrorInContext(context, x);
             return ERROR;

File: core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java
Patch:
@@ -48,7 +48,7 @@ public boolean handle(String nodeName, JnlpSlaveHandshake handshake) throws IOEx
                 }
             } else {
                 handshake.error(nodeName + " is already connected to this master. Rejecting this connection.");
-                return false;
+                return true;
             }
         }
 

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -1933,6 +1933,9 @@ public synchronized void save() throws IOException {
     public @Nonnull List<String> getLog(int maxLines) throws IOException {
         int lineCount = 0;
         List<String> logLines = new LinkedList<String>();
+        if (maxLines == 0) {
+            return logLines;
+        }
         BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(getLogFile()),getCharset()));
         try {
             for (String line = reader.readLine(); line != null; line = reader.readLine()) {

File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java
Patch:
@@ -123,7 +123,7 @@ protected Channel jnlpConnect(SlaveComputer computer) throws InterruptedExceptio
                         @Override
                         public void onClosed(Channel channel, IOException cause) {
                             if(cause!=null)
-                                LOGGER.log(Level.WARNING, Thread.currentThread().getName()+" for + " + nodeName + " terminated",cause);
+                                LOGGER.log(Level.WARNING, Thread.currentThread().getName() + " for " + nodeName + " terminated", cause);
                             try {
                                 socket.close();
                             } catch (IOException e) {

File: test/src/test/java/hudson/model/NodeTest.java
Patch:
@@ -103,15 +103,15 @@ public void testOfflineCause() throws Exception {
 
         computer.doToggleOffline("original message");
         cause = (UserCause) computer.getOfflineCause();
-        assertEquals("Disconnected by someone@somewhere.com : original message", cause.toString());
+        assertTrue(cause.toString(), cause.toString().matches("^.*?Disconnected by someone@somewhere.com : original message"));
         assertEquals(someone, cause.getUser());
 
         final User root = User.get("root@localhost");
         ACL.impersonate(root.impersonate());
 
         computer.doChangeOfflineCause("new message");
         cause = (UserCause) computer.getOfflineCause();
-        assertEquals("Disconnected by root@localhost : new message", cause.toString());
+        assertTrue(cause.toString(), cause.toString().matches("^.*?Disconnected by root@localhost : new message"));
         assertEquals(root, cause.getUser());
 
         computer.doToggleOffline(null);

File: test/src/test/java/hudson/tasks/MavenTest.java
Patch:
@@ -262,7 +262,7 @@ public void parametersReferencedFromPropertiesShouldRetainBackslashes() throws E
     }
 
     @Issue("JENKINS-18898")
-    public void testNullHome() throws Exception {
+    @Test public void testNullHome() {
         EnvVars env = new EnvVars();
         new MavenInstallation("_", "", Collections.<ToolProperty<?>>emptyList()).buildEnvVars(env);
         assertEquals("{}", env.toString());

File: core/src/main/java/hudson/tools/DownloadFromUrlInstaller.java
Patch:
@@ -122,15 +122,15 @@ protected DescriptorImpl() {
         }
 
         protected Downloadable createDownloadable() {
-            return new Downloadable(getDownloadableId());
+            return new Downloadable(getId());
         }
 
         /**
          * This ID needs to be unique, and needs to match the ID token in the JSON update file.
          * <p>
          * By default we use the fully-qualified class name of the {@link DownloadFromUrlInstaller} subtype.
          */
-        public String getDownloadableId() {
+        public String getId() {
             return clazz.getName().replace('$','.');
         }
 
@@ -144,7 +144,7 @@ public String getDownloadableId() {
          * @return never null.
          */
         public List<? extends Installable> getInstallables() throws IOException {
-            JSONObject d = Downloadable.get(getDownloadableId()).getData();
+            JSONObject d = Downloadable.get(getId()).getData();
             if(d==null)     return Collections.emptyList();
             return Arrays.asList(((InstallableList)JSONObject.toBean(d,InstallableList.class)).list);
         }

File: test/src/test/java/hudson/util/ArgumentListBuilder2Test.java
Patch:
@@ -75,7 +75,7 @@ public void slaveMask() throws Exception {
 
     @Test
     public void ensureArgumentsArePassedViaCmdExeUnmodified() throws Exception {
-        assumeTrue(!Functions.isWindows());
+        assumeTrue(Functions.isWindows());
 
         String[] specials = new String[] {
                 "~", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")",

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -642,7 +642,7 @@ public int getProgress() {
         } finally {
             lock.readLock().unlock();
         }
-        if (d < 0) {
+        if (d <= 0) {
             return -1;
         }
 

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -1933,6 +1933,9 @@ public synchronized void save() throws IOException {
     public @Nonnull List<String> getLog(int maxLines) throws IOException {
         int lineCount = 0;
         List<String> logLines = new LinkedList<String>();
+        if (maxLines == 0) {
+            return logLines;
+        }
         BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(getLogFile()),getCharset()));
         try {
             for (String line = reader.readLine(); line != null; line = reader.readLine()) {

File: test/src/test/java/hudson/model/FreestyleJobPublisherTest.java
Patch:
@@ -73,9 +73,10 @@ public void testFreestyleWithExceptionPublisher() throws Exception {
 
         assertEquals("Build must fail, because we used AbortExceptionPublisher", b.getResult(), Result.FAILURE);
         j.assertLogNotContains("\tat", b); // log must not contain stacktrace
+        j.assertLogContains("Threw AbortException from publisher!", b); // log must contain exact error message
         File file = new File(b.getArtifactsDir(), "result.txt");
         assertTrue("ArtifactArchiver is executed even prior publisher fails", file.exists());
-        assertTrue("Second publisher must see FAILURE status",
+        assertTrue("Third publisher must see FAILURE status",
                 FileUtils.readFileToString(file).equals(Result.FAILURE.toString()));
     }
 
@@ -98,6 +99,7 @@ public void testFreestyleWithIOExceptionPublisher() throws Exception {
 
         assertEquals("Build must fail, because we used FalsePublisher", b.getResult(), Result.FAILURE);
         j.assertLogContains("\tat hudson.model.utils.IOExceptionPublisher", b); // log must contain stacktrace
+        j.assertLogContains("Threw IOException from publisher!", b); // log must contain exact error message
         File file = new File(b.getArtifactsDir(), "result.txt");
         assertTrue("ArtifactArchiver is executed even prior publisher fails", file.exists());
         assertTrue("Third publisher must see FAILURE status",

File: test/src/test/java/hudson/model/utils/IOExceptionPublisher.java
Patch:
@@ -19,7 +19,7 @@
 public class IOExceptionPublisher extends Recorder {
     @Override
     public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {
-        throw new IOException("Throwed IOException from publisher!");
+        throw new IOException("Threw IOException from publisher!");
     }
 
     @Override

File: test/src/test/java/hudson/model/utils/AbortExceptionPublisher.java
Patch:
@@ -19,7 +19,7 @@
 public class AbortExceptionPublisher extends Recorder {
     @Override
     public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {
-        throw new AbortException("Throwed AbortException from publisher!");
+        throw new AbortException("Threw AbortException from publisher!");
     }
 
     @Override

File: test/src/test/java/hudson/model/NodeTest.java
Patch:
@@ -103,15 +103,15 @@ public void testOfflineCause() throws Exception {
 
         computer.doToggleOffline("original message");
         cause = (UserCause) computer.getOfflineCause();
-        assertEquals("Disconnected by someone@somewhere.com : original message", cause.toString());
+        assertTrue(cause.toString(), cause.toString().matches("^.*?Disconnected by someone@somewhere.com : original message"));
         assertEquals(someone, cause.getUser());
 
         final User root = User.get("root@localhost");
         ACL.impersonate(root.impersonate());
 
         computer.doChangeOfflineCause("new message");
         cause = (UserCause) computer.getOfflineCause();
-        assertEquals("Disconnected by root@localhost : new message", cause.toString());
+        assertTrue(cause.toString(), cause.toString().matches("^.*?Disconnected by root@localhost : new message"));
         assertEquals(root, cause.getUser());
 
         computer.doToggleOffline(null);

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -642,7 +642,7 @@ public int getProgress() {
         } finally {
             lock.readLock().unlock();
         }
-        if (d < 0) {
+        if (d <= 0) {
             return -1;
         }
 

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -642,7 +642,7 @@ public int getProgress() {
         } finally {
             lock.readLock().unlock();
         }
-        if (d < 0) {
+        if (d <= 0) {
             return -1;
         }
 

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -642,7 +642,7 @@ public int getProgress() {
         } finally {
             lock.readLock().unlock();
         }
-        if (d < 0) {
+        if (d <= 0) {
             return -1;
         }
 

File: core/src/main/java/hudson/ExtensionList.java
Patch:
@@ -84,7 +84,7 @@ public class ExtensionList<T> extends AbstractList<T> {
     @CopyOnWrite
     private volatile List<ExtensionComponent<T>> extensions;
 
-    private List<ExtensionListListener> listeners = new ArrayList<ExtensionListListener>();
+    private List<ExtensionListListener> listeners = new CopyOnWriteArrayList<ExtensionListListener>();
 
     /**
      * Place to store manually registered instances with the per-Hudson scope.

File: core/src/main/java/hudson/ExtensionListListener.java
Patch:
@@ -37,5 +37,5 @@ public abstract class ExtensionListListener {
      * {@link ExtensionPoint} implementation that adds an entry to the {@link ExtensionList}
      * being listened to.
      */
-    public void onRefresh() {}
+    public abstract void onRefresh();
 }

File: core/src/main/java/hudson/org/apache/tools/tar/TarInputStream.java
Patch:
@@ -37,9 +37,8 @@
  * methods are provided to position at each successive entry in
  * the archive, and the read each entry as a normal input stream
  * using read().
- * @deprecated Use {@link org.apache.commons.compress.archivers.tar.TarArchiveInputStream} instead
+ *
  */
-@Deprecated
 public class TarInputStream extends FilterInputStream {
 
     // CheckStyle:VisibilityModifier OFF - bc

File: core/src/main/java/hudson/org/apache/tools/tar/TarOutputStream.java
Patch:
@@ -35,11 +35,8 @@
  * The TarOutputStream writes a UNIX tar archive as an OutputStream.
  * Methods are provided to put entries, and then write their contents
  * by writing to this stream using write().
- * 
- * @deprecated Use {@link org.apache.commons.compress.archivers.tar.TarArchiveOutputStream} instead
  *
  */
-@Deprecated
 public class TarOutputStream extends FilterOutputStream {
     /** Fail if a long file name is required in the archive. */
     public static final int LONGFILE_ERROR = 0;

File: core/src/main/java/hudson/util/io/TarArchiver.java
Patch:
@@ -61,7 +61,6 @@ public void flush() throws IOException {
                 // so don't do anything in flush
             }
         });    
-        tar.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);
         tar.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
     }
 

File: core/src/main/java/hudson/search/Search.java
Patch:
@@ -76,7 +76,7 @@ public void doIndex(StaplerRequest req, StaplerResponse rsp) throws IOException,
                     SuggestedItem target = find(index, query, smo);
                     if(target!=null) {
                         // found
-                        rsp.sendRedirect2(a.getUrl()+target.getUrl());
+                        rsp.sendRedirect2(req.getContextPath()+target.getUrl());
                         return;
                     }
                 }

File: core/src/main/java/hudson/search/SuggestedItem.java
Patch:
@@ -81,7 +81,7 @@ public String getUrl() {
     
     private static SuggestedItem build(SearchableModelObject searchContext, Item top) {
         ItemGroup<? extends Item> parent = top.getParent();
-        if (parent instanceof Item && parent != searchContext) {
+        if (parent instanceof Item) {
             Item parentItem = (Item)parent;
             return new SuggestedItem(build(searchContext, parentItem), top);
         }

File: core/src/main/java/hudson/util/spring/BeanBuilder.java
Patch:
@@ -327,7 +327,7 @@ public void loadBeans(Resource resource) throws IOException {
 	public void loadBeans(Resource[] resources) throws IOException {
 		Closure beans = new Closure(this){
 			@Override
-			public Object call(Object[] args) {
+			public Object call(Object... args) {
 				return beans((Closure)args[0]);
 			}
 		};

File: core/src/main/java/hudson/util/ConsistentHash.java
Patch:
@@ -192,18 +192,18 @@ public interface Hash<T> {
         String hash(T t);
     }
 
-    static final Hash DEFAULT_HASH = new Hash() {
+    static final Hash<?> DEFAULT_HASH = new Hash<Object>() {
         public String hash(Object o) {
             return o.toString();
         }
     };
 
     public ConsistentHash() {
-        this(DEFAULT_HASH);
+        this((Hash<T>) DEFAULT_HASH);
     }
 
     public ConsistentHash(int defaultReplication) {
-        this(DEFAULT_HASH,defaultReplication);
+        this((Hash<T>) DEFAULT_HASH,defaultReplication);
     }
 
     public ConsistentHash(Hash<T> hash) {

File: core/src/main/java/hudson/console/PlainTextConsoleOutputStream.java
Patch:
@@ -89,5 +89,5 @@ public void close() throws IOException {
     }
 
 
-    private static final Logger LOGGER = Logger.getLogger(ConsoleAnnotationOutputStream.class.getName());
+    private static final Logger LOGGER = Logger.getLogger(PlainTextConsoleOutputStream.class.getName());
 }

File: core/src/main/java/jenkins/model/Nodes.java
Patch:
@@ -238,7 +238,7 @@ public boolean accept(File child) {
                         newNodes.put(node.getNodeName(), node);
                     }
                 } catch (IOException e) {
-                    Logger.getLogger(ItemGroupMixIn.class.getName()).log(Level.WARNING, "could not load " + subdir, e);
+                    Logger.getLogger(Nodes.class.getName()).log(Level.WARNING, "could not load " + subdir, e);
                 }
             }
         }

File: core/src/main/java/jenkins/security/BasicHeaderProcessor.java
Patch:
@@ -158,5 +158,5 @@ protected List<? extends BasicHeaderAuthenticator> all() {
     public void destroy() {
     }
 
-    private static final Logger LOGGER = Logger.getLogger(ApiTokenFilter.class.getName());
+    private static final Logger LOGGER = Logger.getLogger(BasicHeaderProcessor.class.getName());
 }

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -933,7 +933,7 @@ List<T> newInstancesFromHeteroList(StaplerRequest req, Object formData,
     /**
      * Finds a descriptor from a collection by its ID.
      * @param id should match {@link #getId}
-     * @since TODO
+     * @since 1.610
      */
     public static @CheckForNull <T extends Descriptor> T findById(Collection<? extends T> list, String id) {
         for (T d : list) {
@@ -958,7 +958,7 @@ List<T> newInstancesFromHeteroList(StaplerRequest req, Object formData,
     /**
      * Finds a descriptor from a collection by the class name of the {@link Describable} it describes.
      * @param className should match {@link Class#getName} of a {@link #clazz}
-     * @since TODO
+     * @since 1.610
      */
     public static @CheckForNull <T extends Descriptor> T findByDescribableClassName(Collection<? extends T> list, String className) {
         for (T d : list) {

File: core/src/main/java/hudson/org/apache/tools/tar/TarInputStream.java
Patch:
@@ -37,8 +37,9 @@
  * methods are provided to position at each successive entry in
  * the archive, and the read each entry as a normal input stream
  * using read().
- *
+ * @deprecated Use {@link org.apache.commons.compress.archivers.tar.TarArchiveInputStream} instead
  */
+@Deprecated
 public class TarInputStream extends FilterInputStream {
 
     // CheckStyle:VisibilityModifier OFF - bc

File: core/src/main/java/hudson/org/apache/tools/tar/TarOutputStream.java
Patch:
@@ -35,8 +35,11 @@
  * The TarOutputStream writes a UNIX tar archive as an OutputStream.
  * Methods are provided to put entries, and then write their contents
  * by writing to this stream using write().
+ * 
+ * @deprecated Use {@link org.apache.commons.compress.archivers.tar.TarArchiveOutputStream} instead
  *
  */
+@Deprecated
 public class TarOutputStream extends FilterOutputStream {
     /** Fail if a long file name is required in the archive. */
     public static final int LONGFILE_ERROR = 0;

File: core/src/main/java/hudson/tools/DownloadFromUrlInstaller.java
Patch:
@@ -129,6 +129,7 @@ protected Downloadable createDownloadable() {
          * This ID needs to be unique, and needs to match the ID token in the JSON update file.
          * <p>
          * By default we use the fully-qualified class name of the {@link DownloadFromUrlInstaller} subtype.
+         * @since 1.610
          */
         public String getDownloadableId() {
             return clazz.getName().replace('$','.');

File: core/src/main/java/jenkins/AgentProtocol.java
Patch:
@@ -4,7 +4,6 @@
 import hudson.ExtensionList;
 import hudson.ExtensionPoint;
 import hudson.TcpSlaveAgentListener;
-import hudson.model.AperiodicWork;
 import jenkins.model.Jenkins;
 
 import java.io.IOException;
@@ -40,7 +39,7 @@ public abstract class AgentProtocol implements ExtensionPoint {
     public abstract void handle(Socket socket) throws IOException, InterruptedException;
 
     /**
-     * Returns all the registered {@link AperiodicWork}s.
+     * Returns all the registered {@link AgentProtocol}s.
      */
     public static ExtensionList<AgentProtocol> all() {
         return ExtensionList.lookup(AgentProtocol.class);

File: core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java
Patch:
@@ -48,7 +48,7 @@ public boolean handle(String nodeName, JnlpSlaveHandshake handshake) throws IOEx
                 }
             } else {
                 handshake.error(nodeName + " is already connected to this master. Rejecting this connection.");
-                return false;
+                return true;
             }
         }
 

File: core/src/main/java/hudson/util/io/TarArchiver.java
Patch:
@@ -61,6 +61,7 @@ public void flush() throws IOException {
                 // so don't do anything in flush
             }
         });    
+        tar.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);
         tar.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
     }
 

File: core/src/main/java/hudson/security/ACL.java
Patch:
@@ -24,6 +24,8 @@
 package hudson.security;
 
 import javax.annotation.Nonnull;
+
+import hudson.model.Item;
 import hudson.remoting.Callable;
 import hudson.model.ItemGroup;
 import hudson.model.TopLevelItemDescriptor;
@@ -96,7 +98,7 @@ public final void checkCreatePermission(@Nonnull ItemGroup c,
         Authentication a = Jenkins.getAuthentication();
         if (!hasCreatePermission(a, c, d)) {
             throw new AccessDeniedException(Messages.AccessDeniedException2_MissingPermission(a.getName(),
-                    Item.CREATE.getDisplayName() + "/" + d.getDisplayName()));
+                    Item.CREATE.group.title+"/"+Item.CREATE.name + Item.CREATE + "/" + d.getDisplayName()));
         }
     }
     /**

File: core/src/main/java/hudson/security/ACL.java
Patch:
@@ -81,7 +81,8 @@ public final boolean hasPermission(@Nonnull Permission p) {
     public abstract boolean hasPermission(@Nonnull Authentication a, @Nonnull Permission permission);
 
     /**
-     * Checks if the current security principal has the permission to create top level items within the specified item group.
+     * Checks if the current security principal has the permission to create top level items within the specified
+     * item group.
      * <p>
      * This is just a convenience function.
      * @param c the container of the item.
@@ -102,7 +103,7 @@ public final void checkCreatePermission(@Nonnull ItemGroup c,
      * Checks if the given principal has the permission to create top level items within the specified item group.
      * <p>
      * Note that {@link #SYSTEM} can be passed in as the authentication parameter,
-     * in which case you should probably just assume it has can create anything.
+     * in which case you should probably just assume it can create anything anywhere.
      * @param a the principal.
      * @param c the container of the item.
      * @param d the descriptor of the item to be created.

File: core/src/main/java/hudson/model/Items.java
Patch:
@@ -116,7 +116,7 @@ public static DescriptorExtensionList<TopLevelItem,TopLevelItemDescriptor> all()
     }
 
     /**
-     * Returns all the registered {@link TopLevelItemDescriptor}s that the current security principle is allowed to
+     * Returns all the registered {@link TopLevelItemDescriptor}s that the current security principal is allowed to
      * create within the specified item group.
      *
      * @since 1.582
@@ -126,7 +126,7 @@ public static List<TopLevelItemDescriptor> all(ItemGroup c) {
     }
 
     /**
-     * Returns all the registered {@link TopLevelItemDescriptor}s that the specified security principle is allowed to
+     * Returns all the registered {@link TopLevelItemDescriptor}s that the specified security principal is allowed to
      * create within the specified item group.
      *
      * @since 1.582

File: core/src/main/java/hudson/security/ACL.java
Patch:
@@ -102,11 +102,11 @@ public final void checkCreatePermission(@Nonnull ItemGroup c,
         }
     }
     /**
-     * Checks if the given principle has the permission to create top level items within the specified item group.
+     * Checks if the given principal has the permission to create top level items within the specified item group.
      * <p>
      * Note that {@link #SYSTEM} can be passed in as the authentication parameter,
      * in which case you should probably just assume it has can create anything.
-     * @param a the principle.
+     * @param a the principal.
      * @param c the container of the item.
      * @param d the descriptor of the item to be created.
      * @return false

File: core/src/main/java/hudson/model/LoadStatistics.java
Patch:
@@ -167,7 +167,7 @@ protected LoadStatistics(int initialOnlineExecutors, int initialBusyExecutors) {
             }
             if (!hasMatches) {
                 try {
-                    final Method getNodes = clazz.getDeclaredMethod("matches", SubTask.class);
+                    final Method getNodes = clazz.getDeclaredMethod("matches", Queue.Item.class, SubTask.class);
                     hasMatches = !Modifier.isAbstract(getNodes.getModifiers());
                 } catch (NoSuchMethodException e) {
                     // ignore

File: core/src/main/java/hudson/model/Label.java
Patch:
@@ -115,8 +115,8 @@ protected Set<Node> getNodes() {
             }
 
             @Override
-            protected boolean matches(SubTask item) {
-                final Label l = item.getAssignedLabel();
+            protected boolean matches(Queue.Item item, SubTask subTask) {
+                final Label l = item.getAssignedLabelFor(subTask);
                 return l != null && Label.this.matches(l.name);
             }
         };

File: core/src/main/java/hudson/model/OverallLoadStatistics.java
Patch:
@@ -75,7 +75,7 @@ protected Iterable<Node> getNodes() {
     }
 
     @Override
-    protected boolean matches(SubTask item) {
+    protected boolean matches(Queue.Item item, SubTask subTask) {
         return true;
     }
 

File: core/src/test/java/hudson/model/LoadStatisticsTest.java
Patch:
@@ -64,7 +64,7 @@ protected Iterable<Node> getNodes() {
             }
 
             @Override
-            protected boolean matches(SubTask item) {
+            protected boolean matches(Queue.Item item, SubTask subTask) {
                 throw new UnsupportedOperationException();
             }
         };
@@ -129,7 +129,7 @@ protected Iterable<Node> getNodes() {
         }
 
         @Override
-        protected boolean matches(SubTask item) {
+        protected boolean matches(Queue.Item item, SubTask subTask) {
             return false;
         }
     }

File: core/src/main/java/hudson/model/Label.java
Patch:
@@ -116,7 +116,8 @@ protected Set<Node> getNodes() {
 
             @Override
             protected boolean matches(SubTask item) {
-                return item.getAssignedLabel() == Label.this;
+                final Label l = item.getAssignedLabel();
+                return l != null && Label.this.matches(l.name);
             }
         };
         this.nodeProvisioner = new NodeProvisioner(this, loadStatistics);

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -1780,13 +1780,13 @@ protected final void execute(@Nonnull RunExecution job) {
                 state = State.POST_PRODUCTION;
 
                 if (listener != null) {
+                    RunListener.fireCompleted(this,listener);
                     try {
                         job.cleanUp(listener);
                     } catch (Exception e) {
                         handleFatalBuildProblem(listener,e);
                         // too late to update the result now
                     }
-                    RunListener.fireCompleted(this,listener);
                     listener.finished(result);
                     listener.closeQuietly();
                 }

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -214,7 +214,7 @@ public static String rfc822Date(Calendar cal) {
      * so that the generic layouts can avoid iterating extension lists while Jenkins is starting up.
      *
      * @return {@code true} if the extensions lists have been populated.
-     * @since 1.FIXME
+     * @since 1.607
      */
     public static boolean isExtensionsAvailable() {
         final Jenkins jenkins = Jenkins.getInstance();

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -575,7 +575,7 @@ public boolean isActive() {
 
     /**
      * If currently running in asynchronous mode, returns that handle.
-     * @since TODO
+     * @since 1.607
      */
     public @CheckForNull AsynchronousExecution getAsynchronousExecution() {
         lock.readLock().lock();
@@ -891,7 +891,7 @@ protected Object call(Object o, Method m, Object[] args) throws Throwable {
      * @param executable a possibly running executable
      * @return the executor (possibly a {@link OneOffExecutor}) whose {@link Executor#getCurrentExecutable} matches that,
      *          or null if it could not be found (for example because the execution has already completed)
-     * @since TODO
+     * @since 1.607
      */
     public static @CheckForNull Executor of(Executable executable) {
         Jenkins jenkins = Jenkins.getInstance();

File: core/src/main/java/hudson/model/ManagementLink.java
Patch:
@@ -117,7 +117,7 @@ public Permission getRequiredPermission() {
      * Define if the rendered link will use the default GET method or POST.
      * @return true if POST must be used
      * @see RequirePOST
-     * @since TODO
+     * @since 1.584
      */
     public boolean getRequiresPOST() {
         return false;

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -990,7 +990,7 @@ public Item getItem(Task t) {
      * Gets the information about the queue item for the given project.
      *
      * @return null if the project is not in the queue.
-     * @since 1.FIXME
+     * @since 1.607
      */
     private List<Item> liveGetItems(Task t) {
         lock.lock();

File: core/src/main/java/hudson/model/labels/LabelAtom.java
Patch:
@@ -116,7 +116,7 @@ protected void updateTransientActions() {
     }
 
     /**
-     * @since TODO
+     * @since 1.580
      */
     public String getDescription() {
         return description;

File: core/src/main/java/hudson/util/FormValidation.java
Patch:
@@ -216,7 +216,7 @@ public static FormValidation warning(Throwable e, String format, Object... args)
      * Aggregate multiple validations into one.
      *
      * @return Validation of the least successful kind aggregating all child messages.
-     * @since TODO
+     * @since 1.590
      */
     public static @Nonnull FormValidation aggregate(@Nonnull Collection<FormValidation> validations) {
         if (validations == null || validations.isEmpty()) return FormValidation.ok();

File: core/src/main/java/hudson/util/LineEndingConversion.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * Converts line endings of a string.
  *
- * @since TODO
+ * @since 1.582
  * @author David Ruhmann
  */
 public class LineEndingConversion {

File: core/src/main/java/jenkins/management/AsynchronousAdministrativeMonitor.java
Patch:
@@ -115,10 +115,10 @@ public void run() {
                 }
             }
          }
-        
+
         /**
-         * Runs the monitor and encapsulates all errors within. 
-         * @since TODO: define a version
+         * Runs the monitor and encapsulates all errors within.
+         * @since 1.590
          */
         private void doRun(@Nonnull TaskListener listener) {
             try {

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -507,7 +507,7 @@ protected void onModified() throws IOException {
     /**
      * The holder of the set of installed cluster nodes.
      *
-     * @since 1.FIXME
+     * @since 1.607
      */
     private transient final Nodes nodes = new Nodes(this);
 

File: core/src/main/java/jenkins/model/Nodes.java
Patch:
@@ -58,7 +58,7 @@
 /**
  * Manages all the nodes for Jenkins.
  *
- * @since 1.FIXME
+ * @since 1.607
  */
 @Restricted(NoExternalUse.class) // for now, we may make it public later
 public class Nodes implements Saveable {

File: core/src/main/java/jenkins/model/queue/AsynchronousExecution.java
Patch:
@@ -51,7 +51,7 @@
  * but could also be used with a heavyweight executor even though the number of executors is bounded by node configuration.
  * <p>{@link ResourceController}/{@link ResourceActivity}/{@link ResourceList}/{@link Resource} are not currently supported.
  * Nor are {@link hudson.model.Queue.Task#getSubTasks} other than the primary task.
- * @since TODO
+ * @since 1.607
  */
 public abstract class AsynchronousExecution extends RuntimeException {
 

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -214,7 +214,7 @@ public static String rfc822Date(Calendar cal) {
      * so that the generic layouts can avoid iterating extension lists while Jenkins is starting up.
      *
      * @return {@code true} if the extensions lists have been populated.
-     * @since 1.FIXME
+     * @since 1.607
      */
     public static boolean isExtensionsAvailable() {
         final Jenkins jenkins = Jenkins.getInstance();

File: core/src/main/java/hudson/model/Executor.java
Patch:
@@ -575,7 +575,7 @@ public boolean isActive() {
 
     /**
      * If currently running in asynchronous mode, returns that handle.
-     * @since TODO
+     * @since 1.607
      */
     public @CheckForNull AsynchronousExecution getAsynchronousExecution() {
         lock.readLock().lock();
@@ -891,7 +891,7 @@ protected Object call(Object o, Method m, Object[] args) throws Throwable {
      * @param executable a possibly running executable
      * @return the executor (possibly a {@link OneOffExecutor}) whose {@link Executor#getCurrentExecutable} matches that,
      *          or null if it could not be found (for example because the execution has already completed)
-     * @since TODO
+     * @since 1.607
      */
     public static @CheckForNull Executor of(Executable executable) {
         Jenkins jenkins = Jenkins.getInstance();

File: core/src/main/java/hudson/model/ManagementLink.java
Patch:
@@ -117,7 +117,7 @@ public Permission getRequiredPermission() {
      * Define if the rendered link will use the default GET method or POST.
      * @return true if POST must be used
      * @see RequirePOST
-     * @since TODO
+     * @since 1.584
      */
     public boolean getRequiresPOST() {
         return false;

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -990,7 +990,7 @@ public Item getItem(Task t) {
      * Gets the information about the queue item for the given project.
      *
      * @return null if the project is not in the queue.
-     * @since 1.FIXME
+     * @since 1.607
      */
     private List<Item> liveGetItems(Task t) {
         lock.lock();

File: core/src/main/java/hudson/model/labels/LabelAtom.java
Patch:
@@ -116,7 +116,7 @@ protected void updateTransientActions() {
     }
 
     /**
-     * @since TODO
+     * @since 1.580
      */
     public String getDescription() {
         return description;

File: core/src/main/java/hudson/util/FormValidation.java
Patch:
@@ -216,7 +216,7 @@ public static FormValidation warning(Throwable e, String format, Object... args)
      * Aggregate multiple validations into one.
      *
      * @return Validation of the least successful kind aggregating all child messages.
-     * @since TODO
+     * @since 1.590
      */
     public static @Nonnull FormValidation aggregate(@Nonnull Collection<FormValidation> validations) {
         if (validations == null || validations.isEmpty()) return FormValidation.ok();

File: core/src/main/java/hudson/util/LineEndingConversion.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * Converts line endings of a string.
  *
- * @since TODO
+ * @since 1.582
  * @author David Ruhmann
  */
 public class LineEndingConversion {

File: core/src/main/java/jenkins/management/AsynchronousAdministrativeMonitor.java
Patch:
@@ -115,10 +115,10 @@ public void run() {
                 }
             }
          }
-        
+
         /**
-         * Runs the monitor and encapsulates all errors within. 
-         * @since TODO: define a version
+         * Runs the monitor and encapsulates all errors within.
+         * @since 1.590
          */
         private void doRun(@Nonnull TaskListener listener) {
             try {

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -507,7 +507,7 @@ protected void onModified() throws IOException {
     /**
      * The holder of the set of installed cluster nodes.
      *
-     * @since 1.FIXME
+     * @since 1.607
      */
     private transient final Nodes nodes = new Nodes(this);
 

File: core/src/main/java/jenkins/model/Nodes.java
Patch:
@@ -58,7 +58,7 @@
 /**
  * Manages all the nodes for Jenkins.
  *
- * @since 1.FIXME
+ * @since 1.607
  */
 @Restricted(NoExternalUse.class) // for now, we may make it public later
 public class Nodes implements Saveable {

File: core/src/main/java/jenkins/model/queue/AsynchronousExecution.java
Patch:
@@ -51,7 +51,7 @@
  * but could also be used with a heavyweight executor even though the number of executors is bounded by node configuration.
  * <p>{@link ResourceController}/{@link ResourceActivity}/{@link ResourceList}/{@link Resource} are not currently supported.
  * Nor are {@link hudson.model.Queue.Task#getSubTasks} other than the primary task.
- * @since TODO
+ * @since 1.607
  */
 public abstract class AsynchronousExecution extends RuntimeException {
 

File: core/src/main/java/hudson/model/Hudson.java
Patch:
@@ -121,7 +121,7 @@ public Slave getSlave(String name) {
      *      Use {@link #getNodes()}. Since 1.252.
      */
     public List<Slave> getSlaves() {
-        return (List)slaves;
+        return (List)getNodes();
     }
 
     /**

File: core/src/main/java/hudson/slaves/CloudSlaveRetentionStrategy.java
Patch:
@@ -5,6 +5,7 @@
 import hudson.util.TimeUnit2;
 import jenkins.model.Jenkins;
 
+import javax.annotation.concurrent.GuardedBy;
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -22,6 +23,7 @@
 public class CloudSlaveRetentionStrategy<T extends Computer> extends RetentionStrategy<T> {
 
     @Override
+    @GuardedBy("hudson.model.Queue.lock")
     public long check(T c) {
         if (!c.isConnecting() && c.isAcceptingTasks()) {
             if (isIdleForTooLong(c)) {

File: core/src/main/java/hudson/slaves/SimpleScheduledRetentionStrategy.java
Patch:
@@ -34,6 +34,7 @@
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.QueryParameter;
 
+import javax.annotation.concurrent.GuardedBy;
 import java.io.InvalidObjectException;
 import java.io.ObjectStreamException;
 import java.util.Calendar;
@@ -163,6 +164,7 @@ public boolean isManualLaunchAllowed(final SlaveComputer c) {
         return isOnlineScheduled();
     }
 
+    @GuardedBy("hudson.model.Queue.lock")
     public synchronized long check(final SlaveComputer c) {
         boolean shouldBeOnline = isOnlineScheduled();
         LOGGER.log(Level.FINE, "Checking computer {0} against schedule. online = {1}, shouldBeOnline = {2}",

File: test/src/test/java/hudson/model/ExecutorTest.java
Patch:
@@ -34,7 +34,6 @@ public class ExecutorTest {
     @Test
     public void yank() throws Exception {
         j.jenkins.setNumExecutors(1);
-        j.jenkins.updateComputerList(true);
         Computer c = j.jenkins.toComputer();
         final Executor e = c.getExecutors().get(0);
 
@@ -59,7 +58,6 @@ public void yank() throws Exception {
     @Issue("JENKINS-4756")
     public void whenAnExecutorIsYankedANewExecutorTakesItsPlace() throws Exception {
         j.jenkins.setNumExecutors(1);
-        j.jenkins.updateComputerList(true);
 
         Computer c = j.jenkins.toComputer();
         Executor e = getExecutorByNumber(c, 0);

File: test/src/test/java/jenkins/model/JenkinsReloadConfigurationTest.java
Patch:
@@ -47,7 +47,7 @@ public void reloadSlaveConfig() throws Exception {
     }
 
     private void modifyNode(Node node) throws Exception {
-        replace("config.xml", "oldLabel", "newLabel");
+        replace(node.getNodeName().equals("") ? "config.xml" : String.format("nodes/%s/config.xml",node.getNodeName()), "oldLabel", "newLabel");
 
         assertEquals("oldLabel", node.getLabelString());
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3492,8 +3492,7 @@ public void run() {
                     LOGGER.severe(String.format("Shutting down VM as requested by %s from %s",
                                                 exitUser, exitAddr));
                     // Wait 'til we have no active executors.
-                    while (isQuietingDown
-                           && (overallLoad.computeTotalExecutors() > overallLoad.computeIdleExecutors())) {
+                    while (isQuietingDown && (overallLoad.computeSnapshot().getBusyExecutors() > 0)) {
                         Thread.sleep(5000);
                     }
                     // Make sure isQuietingDown is still true.

File: core/src/main/java/jenkins/security/s2m/FilePathRuleConfig.java
Patch:
@@ -40,7 +40,7 @@ protected FilePathRule parse(String line) {
         if (line.isEmpty())     return null;
 
         line = line.replace("<BUILDDIR>","<JOBDIR>/builds/<BUILDID>");
-        line = line.replace("<BUILDID>","[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]_[0-9][0-9]-[0-9][0-9]-[0-9][0-9]");
+        line = line.replace("<BUILDID>","(?:[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]_[0-9][0-9]-[0-9][0-9]-[0-9][0-9]|[0-9]+)");
         line = line.replace("<JOBDIR>","<JENKINS_HOME>/jobs/.+");
         line = line.replace("<JENKINS_HOME>","\\Q"+Jenkins.getInstance().getRootDir().getPath()+"\\E");
 

File: test/src/test/java/jenkins/model/JenkinsReloadConfigurationTest.java
Patch:
@@ -47,7 +47,7 @@ public void reloadSlaveConfig() throws Exception {
     }
 
     private void modifyNode(Node node) throws Exception {
-        replace("config.xml", "oldLabel", "newLabel");
+        replace(String.format("nodes/%s/config.xml",node.getNodeName()), "oldLabel", "newLabel");
 
         assertEquals("oldLabel", node.getLabelString());
 

File: core/src/main/java/hudson/model/Hudson.java
Patch:
@@ -121,7 +121,7 @@ public Slave getSlave(String name) {
      *      Use {@link #getNodes()}. Since 1.252.
      */
     public List<Slave> getSlaves() {
-        return (List)slaves;
+        return (List)getNodes();
     }
 
     /**

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -249,6 +249,9 @@ public Object call() throws Exception {
                     } catch (InterruptedException e) {
                         e.printStackTrace(taskListener.error(Messages.ComputerLauncher_abortedLaunch()));
                         throw e;
+                    } catch (Exception e) {
+                        e.printStackTrace(taskListener.error(Messages.ComputerLauncher_unexpectedError()));
+                        throw e;
                     }
                 } finally {
                     if (channel==null) {

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -249,6 +249,9 @@ public Object call() throws Exception {
                     } catch (InterruptedException e) {
                         e.printStackTrace(taskListener.error(Messages.ComputerLauncher_abortedLaunch()));
                         throw e;
+                    } catch (Exception e) {
+                        e.printStackTrace(taskListener.error(Messages.ComputerLauncher_unexpectedError()));
+                        throw e;
                     }
                 } finally {
                     if (channel==null) {

File: core/src/main/java/hudson/views/BuildButtonColumn.java
Patch:
@@ -31,7 +31,7 @@ public class BuildButtonColumn extends ListViewColumn {
     public BuildButtonColumn() {
     }
 
-    @Extension
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_ACTIONS_START-1)
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/JobColumn.java
Patch:
@@ -35,7 +35,8 @@ public class JobColumn extends ListViewColumn {
     public JobColumn() {
     }
 
-    @Extension
+    // put this in the middle of icons and properties
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_ICON_END+1)
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/LastDurationColumn.java
Patch:
@@ -31,7 +31,7 @@ public class LastDurationColumn extends ListViewColumn {
     public LastDurationColumn() {
     }
 
-    @Extension
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_PROPERTIES_START-4)
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/LastFailureColumn.java
Patch:
@@ -31,7 +31,7 @@ public class LastFailureColumn extends ListViewColumn {
     public LastFailureColumn() {
     }
 
-    @Extension
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_PROPERTIES_START-2)
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/LastStableColumn.java
Patch:
@@ -31,7 +31,7 @@ public class LastStableColumn extends ListViewColumn {
     public LastStableColumn() {
     }
 
-    @Extension
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_PROPERTIES_START-3)
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/LastSuccessColumn.java
Patch:
@@ -31,7 +31,7 @@ public class LastSuccessColumn extends ListViewColumn {
     public LastSuccessColumn() {
     }
 
-    @Extension
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_PROPERTIES_START-1)
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/StatusColumn.java
Patch:
@@ -37,7 +37,7 @@ public class StatusColumn extends ListViewColumn {
     public StatusColumn() {
     }
 
-    @Extension
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_ICON_START-1)
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/views/WeatherColumn.java
Patch:
@@ -32,7 +32,7 @@ public class WeatherColumn extends ListViewColumn {
     public WeatherColumn() {
     }
 
-    @Extension
+    @Extension(ordinal=DEFAULT_COLUMNS_ORDINAL_ICON_START-2)
     public static class DescriptorImpl extends ListViewColumnDescriptor {
         @Override
         public String getDisplayName() {

File: core/src/main/java/hudson/util/FormValidation.java
Patch:
@@ -196,7 +196,7 @@ private static FormValidation _error(Kind kind, Throwable e, String message) {
             " <a href='#' class='showDetails'>"
             + Messages.FormValidation_Error_Details()
             + "</a><pre style='display:none'>"
-            + Functions.printThrowable(e) +
+            + Util.escape(Functions.printThrowable(e)) +
             "</pre>",kind
         );
     }

File: core/src/main/java/hudson/util/FormValidation.java
Patch:
@@ -196,7 +196,7 @@ private static FormValidation _error(Kind kind, Throwable e, String message) {
             " <a href='#' class='showDetails'>"
             + Messages.FormValidation_Error_Details()
             + "</a><pre style='display:none'>"
-            + Functions.printThrowable(e) +
+            + Util.escape(Functions.printThrowable(e)) +
             "</pre>",kind
         );
     }

File: core/src/main/java/jenkins/security/ApiTokenProperty.java
Patch:
@@ -81,6 +81,7 @@ public boolean matchesPassword(String password) {
     }
 
     public void changeApiToken() throws IOException {
+        user.checkPermission(Jenkins.ADMINISTER);
         _changeApiToken();
         if (user!=null)
             user.save();

File: core/src/main/java/hudson/model/Api.java
Patch:
@@ -208,7 +208,7 @@ public void doSchema(StaplerRequest req, StaplerResponse rsp) throws IOException
     public void doJson(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
         if (req.getParameter("jsonp") == null || permit(req)) {
             setHeaders(rsp);
-            rsp.serveExposedBean(req,bean, Flavor.JSON);
+            rsp.serveExposedBean(req,bean, req.getParameter("jsonp") == null ? Flavor.JSON : Flavor.JSONP);
         } else {
             rsp.sendError(HttpURLConnection.HTTP_FORBIDDEN, "jsonp forbidden; implement jenkins.security.SecureRequester");
         }

File: core/src/main/java/hudson/model/RunMap.java
Patch:
@@ -186,7 +186,9 @@ public R put(R r) {
         if (rootDir.isDirectory()) {
             throw new IllegalStateException(rootDir + " already existed; will not overwite with " + r);
         }
-        proposeNewNumber(r.getNumber());
+        if (!r.getClass().getName().equals("hudson.matrix.MatrixRun")) { // JENKINS-26739: grandfathered in
+            proposeNewNumber(r.getNumber());
+        }
         rootDir.mkdirs();
         return super._put(r);
     }

File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java
Patch:
@@ -550,7 +550,7 @@ public boolean equals(Object o) {
 
     private static final Comparator<Integer> COMPARATOR = new Comparator<Integer>() {
         @Override public int compare(Integer o1, Integer o2) {
-            return o2 - o1;
+            return -o1.compareTo(o2);
         }
     };
     

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -139,6 +139,7 @@ public abstract class Run <JobT extends Job<JobT,RunT>,RunT extends Run<JobT,Run
 
     /**
      * The original {@link Queue.Item#getId()} has not yet been mapped onto the {@link Run} instance.
+     * @since TODO
      */
     public static final long QUEUE_ID_UNKNOWN = -1;
 
@@ -156,7 +157,7 @@ public abstract class Run <JobT extends Job<JobT,RunT>,RunT extends Run<JobT,Run
     /**
      * The original Queue task ID from where this Run instance originated.
      */
-    private long queueId;
+    private long queueId = Run.QUEUE_ID_UNKNOWN;
 
     /**
      * Previous build. Can be null.
@@ -428,7 +429,6 @@ public long getQueueId() {
      * <p/>
      * Mapped from the {@link Queue.Item#getId()}.
      * @param queueId The queue item ID.
-     * @since TODO
      */
     @Restricted(NoExternalUse.class)
     public void setQueueId(long queueId) {

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -100,6 +100,7 @@ public class ArtifactArchiver extends Recorder implements SimpleBuildStep {
 
     @DataBoundConstructor public ArtifactArchiver(String artifacts) {
         this.artifacts = artifacts.trim();
+        allowEmptyArchive = false;
     }
 
     @Deprecated

File: test/src/test/java/hudson/tasks/ArtifactArchiverTest.java
Patch:
@@ -87,6 +87,7 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
     public void testAllowEmptyArchive() throws Exception {
         FreeStyleProject project = j.createFreeStyleProject();
         ArtifactArchiver aa = new ArtifactArchiver("f");
+        assertFalse(aa.getAllowEmptyArchive());
         aa.setAllowEmptyArchive(true);
         project.getPublishersList().replaceBy(Collections.singleton(aa));
         assertEquals("(no artifacts)", Result.SUCCESS, build(project));

File: test/src/test/java/hudson/LauncherTest.java
Patch:
@@ -82,7 +82,7 @@ public void overwriteSystemEnvVars() throws Exception {
         FreeStyleProject project = rule.createFreeStyleProject();
         project.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition("jenkins_19926", "${jenkins_19926} and new value")));
         final CommandInterpreter script = Functions.isWindows()
-                ? new BatchFile("echo %jenkins_19926")
+                ? new BatchFile("echo %jenkins_19926%")
                 : new Shell("echo ${jenkins_19926}")
         ;
         project.getBuildersList().add(script);

File: core/src/main/java/jenkins/util/xml/RestrictiveEntityResolver.java
Patch:
@@ -1,5 +1,7 @@
 package jenkins.util.xml;
 
+import org.kohsuke.accmod.Restricted;
+import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.xml.sax.EntityResolver;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
@@ -12,6 +14,7 @@
  *
  * @since TODO
  */
+@Restricted(NoExternalUse.class)
 public final class RestrictiveEntityResolver implements EntityResolver {
 
     public final static RestrictiveEntityResolver INSTANCE = new RestrictiveEntityResolver();

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -755,7 +755,7 @@ protected List<Action> createTransientActions() {
             try {
                 ta.addAll(Util.fixNull(tpaf.createFor(this))); // be defensive against null
             } catch (Exception e) {
-                LOGGER.log(Level.SEVERE, "Error loading transient project action factory.");
+                LOGGER.log(Level.SEVERE, "Could not load actions from " + tpaf + " for " + this, e);
             }
         }
         return ta;

File: core/src/main/java/hudson/model/Actionable.java
Patch:
@@ -97,7 +97,7 @@ public final List<? extends Action> getAllActions() {
                 try {
                     _actions.addAll(createFor(taf));
                 } catch (Exception e) {
-                    LOGGER.log(Level.SEVERE, "Error loading action.", e);
+                    LOGGER.log(Level.SEVERE, "Could not load actions from " + taf + " for " + this, e);
                 }
             }
         }

File: test/src/test/java/hudson/model/ItemGroupMixInTest.java
Patch:
@@ -39,6 +39,7 @@
 import org.jvnet.hudson.test.recipes.LocalData;
 
 import java.io.File;
+import java.util.List;
 
 public class ItemGroupMixInTest {
 

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1451,9 +1451,9 @@ private PollingResult pollWithWorkspace(TaskListener listener, SCM scm, R lb, @N
         // OTOH, if a concurrent build is chosen, the user is willing to create a multiple workspace,
         // so better throughput is achieved over time (modulo the initial cost of creating that many workspaces)
         // by having multiple workspaces
-        WorkspaceList.Lease lease = l.acquire(ws, !concurrentBuild);
         Node node = lb.getBuiltOn();
         Launcher launcher = ws.createLauncher(listener).decorateByEnv(getEnvironment(node,listener));
+        WorkspaceList.Lease lease = l.acquire(ws, !concurrentBuild);
         try {
             listener.getLogger().println("Polling SCM changes on " + node.getSelfLabel().getName());
             LOGGER.fine("Polling SCM changes of " + getName());

File: core/src/main/java/jenkins/slaves/restarter/WinswSlaveRestarter.java
Patch:
@@ -51,7 +51,9 @@ public void restart() throws Exception {
         // so it's possible that we end up in the situation where jenkins-slave.exe doesn't support
         // this command. If that is the case, there's nothing we can do about it.
         int r = exec("restart!");
-        throw new IOException("Restart failure. '"+exe+" restart' completed with "+r+" but I'm still alive");
+        throw new IOException("Restart failure. '"+exe+" restart' completed with "+r+" but I'm still alive!  "
+                               + "See https://wiki.jenkins-ci.org/display/JENKINS/Distributed+builds#Distributedbuilds-Windowsslaveserviceupgrades"
+                               + " for a possible explanation and solution");
     }
 
     private static final Logger LOGGER = Logger.getLogger(WinswSlaveRestarter.class.getName());

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -351,7 +351,7 @@ public EnvVars getEnvironment(Node node, TaskListener listener) throws IOExcepti
                 jdkTool = jdkTool.forNode(node, listener);
             }
             jdkTool.buildEnvVars(env);
-        } else if (jdk != null && !jdk.equals(JDK.DEFAULT_NAME)) {
+        } else if (!JDK.isDefaultName(jdk)) {
             listener.getLogger().println("No JDK named ‘" + jdk + "’ found");
         }
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3627,7 +3627,7 @@ public void doWorkspaceCleanup(StaplerResponse rsp) throws IOException {
      * If the user chose the default JDK, make sure we got 'java' in PATH.
      */
     public FormValidation doDefaultJDKCheck(StaplerRequest request, @QueryParameter String value) {
-        if(!value.equals(JDK.DEFAULT_NAME))
+        if(!JDK.isDefaultName(value))
             // assume the user configured named ones properly in system config ---
             // or else system config should have reported form field validation errors.
             return FormValidation.ok();

File: core/src/main/java/jenkins/model/RunIdMigrator.java
Patch:
@@ -199,7 +199,9 @@ private void doMigrate(File dir) {
             String name = kid.getName();
             try {
                 String link = Util.resolveSymlink(kid);
-                if (link == null) {
+                if (link == null && name.matches("\\d+") && kid.isFile()) { // legacy Windows format
+                    link = FileUtils.readFileToString(kid);
+                } else if (link == null) {
                     continue;
                 }
                 try {

File: test/src/test/java/hudson/model/ExecutorTest.java
Patch:
@@ -141,6 +141,8 @@ public void disconnectCause() throws Exception {
         assertEquals(b.getResult(), Result.FAILURE);
         assertThat(log, containsString("Finished: FAILURE"));
         assertThat(log, containsString("Build step 'Bogus' marked build as failure"));
+        assertThat(log, containsString("Slave went offline during the build"));
+        assertThat(log, containsString("Disconnected by Johnny : Taking offline to break your buil"));
     }
 
     private Future<FreeStyleBuild> startBlockingBuild(FreeStyleProject p) throws Exception {

File: core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java
Patch:
@@ -104,7 +104,7 @@ protected boolean runPreCheckout() {
         }
     }
 
-    private static class EnvironmentWrapper extends Environment {
+    private class EnvironmentWrapper extends Environment {
         private final Context c;
         private final Launcher launcher;
         EnvironmentWrapper(Context c, Launcher launcher) {

File: core/src/main/java/hudson/model/JDK.java
Patch:
@@ -54,10 +54,10 @@
 public final class JDK extends ToolInstallation implements NodeSpecific<JDK>, EnvironmentSpecific<JDK> {
 
     /**
-     * Name of the “default JDK”, meaning no specific JDK selected.
+     * Name of the “System JDK”, which is just the JDK on Jenkins' $PATH.
      * @since 1.577
      */
-    public static final String DEFAULT_NAME = "(Default)";
+    public static final String DEFAULT_NAME = "(System)";
 
     /**
      * @deprecated since 2009-02-25

File: core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
Patch:
@@ -697,7 +697,8 @@ public void init(FilterConfig config) throws ServletException {
         public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
             HttpServletRequest req = (HttpServletRequest) request;
 
-            if(req.getRequestURI().equals(req.getContextPath()+"/")) {
+            /* allow signup from the Jenkins home page, or /manage, which is where a /configureSecurity form redirects to */
+            if(req.getRequestURI().equals(req.getContextPath()+"/") || req.getRequestURI().equals(req.getContextPath() + "/manage")) {
                 if (needsToCreateFirstUser()) {
                     ((HttpServletResponse)response).sendRedirect("securityRealm/firstUser");
                 } else {// the first user already created. the role of this filter is over.

File: core/src/main/java/jenkins/security/DefaultConfidentialStore.java
Patch:
@@ -106,7 +106,7 @@ protected byte[] load(ConfidentialKey key) throws IOException {
             byte[] bytes = IOUtils.toByteArray(cis);
             return verifyMagic(bytes);
         } catch (GeneralSecurityException e) {
-            throw new IOException("Failed to persist the key: "+key.getId(),e);
+            throw new IOException("Failed to load the key: "+key.getId(),e);
         } finally {
             IOUtils.closeQuietly(cis);
             IOUtils.closeQuietly(fis);

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -88,6 +88,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
+import jenkins.security.DownloadSettings;
 import org.acegisecurity.context.SecurityContextHolder;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
@@ -630,7 +631,7 @@ public List<Plugin> getUpdates() {
     public List<FormValidation> updateAllSites() throws InterruptedException, ExecutionException {
         List <Future<FormValidation>> futures = new ArrayList<Future<FormValidation>>();
         for (UpdateSite site : getSites()) {
-            Future<FormValidation> future = site.updateDirectly(true);
+            Future<FormValidation> future = site.updateDirectly(DownloadSettings.get().isCheckSignature());
             if (future != null) {
                 futures.add(future);
             }

File: test/src/test/java/hudson/model/DownloadServiceTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.kohsuke.stapler.StaplerResponse;
 
 import java.io.IOException;
+import jenkins.security.DownloadSettings;
 
 /**
  * @author Kohsuke Kawaguchi
@@ -40,13 +41,13 @@ public void testPost() throws Exception {
         assertNull(job.getData());
 
         // and now it should work
-        DownloadService.signatureCheck = false;
+        DownloadSettings.get().setCheckSignature(false);
         try {
             createWebClient().goTo("/self/testPost");
             JSONObject d = job.getData();
             assertEquals(hashCode(),d.getInt("hello"));
         } finally {
-            DownloadService.signatureCheck = true;
+            DownloadSettings.get().setCheckSignature(true);
         }
 
         // TODO: test with a signature

File: test/src/main/java/org/jvnet/hudson/test/WarExploder.java
Patch:
@@ -88,7 +88,8 @@ private static File explode() throws Exception {
         File war = Which.jarFile(Class.forName("executable.Executable"));
 
         // TODO this assumes that the CWD of the Maven process is the plugin ${basedir}, which may not be the case
-        File explodeDir = new File("./target/jenkins-for-test").getAbsoluteFile();
+        File buildDirectory = new File(System.getProperty("buildDirectory", "target"));
+        File explodeDir = new File(buildDirectory, "jenkins-for-test").getAbsoluteFile();
         explodeDir.getParentFile().mkdirs();
         while (new File(explodeDir + ".exploding").isFile()) {
             explodeDir = new File(explodeDir + "x");

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -755,7 +755,7 @@ protected List<Action> createTransientActions() {
             try {
                 ta.addAll(Util.fixNull(tpaf.createFor(this))); // be defensive against null
             } catch (Exception e) {
-                LOGGER.log(Level.SEVERE, "Error loading transient project action factory.");
+                LOGGER.log(Level.SEVERE, "Could not load actions from " + tpaf + " for " + this, e);
             }
         }
         return ta;

File: core/src/main/java/hudson/model/Actionable.java
Patch:
@@ -97,7 +97,7 @@ public final List<? extends Action> getAllActions() {
                 try {
                     _actions.addAll(createFor(taf));
                 } catch (Exception e) {
-                    LOGGER.log(Level.SEVERE, "Error loading action.", e);
+                    LOGGER.log(Level.SEVERE, "Could not load actions from " + taf + " for " + this, e);
                 }
             }
         }

File: core/src/test/java/hudson/FilePathTest.java
Patch:
@@ -273,7 +273,7 @@ public void close() throws IOException {
         compare("abc/..",".");
         compare(".",".");
 
-        // @Bug(5951)
+        // @Issue("JENKINS-5951")
         compare("C:\\Hudson\\jobs\\foo\\workspace/../../otherjob/workspace/build.xml",
                 "C:\\Hudson\\jobs/otherjob/workspace/build.xml");
         // Other cases that failed before

File: core/src/test/java/hudson/MarkupTextTest.java
Patch:
@@ -111,7 +111,7 @@ public void preEscape() {
         assertEquals("Line<hr/>\n2   &amp; 3\n&lt;End&gt;\n", text.toString(true));
     }
 
-    /* @Bug(6252) */
+    /* @Issue("JENKINS-6252") */
     @Test
     public void subTextSubText() {
         MarkupText text = new MarkupText("abcdefgh");

File: core/src/test/java/hudson/UtilTest.java
Patch:
@@ -35,7 +35,7 @@
 import static org.junit.Assert.*;
 import org.junit.Assume;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 import hudson.util.StreamTaskListener;
 import java.io.FileOutputStream;
@@ -281,7 +281,7 @@ public void testHtmlEscape() {
      * Compute 'known-correct' digests and see if I still get them when computed concurrently
      * to another digest.
      */
-    @Bug(10346)
+    @Issue("JENKINS-10346")
     @Test
     public void testDigestThreadSafety() throws InterruptedException {
     	String a = "abcdefgh";

File: core/src/test/java/hudson/cli/ListJobsCommandTest.java
Patch:
@@ -68,7 +68,7 @@ public void failForNonexistingName() throws Exception {
 
     /*
     @Test
-    @Bug(18393)
+    @Issue("JENKINS-18393")
     public void failForMatrixProject() throws Exception {
 
         final MatrixProject matrix = mock(MatrixProject.class);

File: core/src/test/java/hudson/console/UrlAnnotatorTest.java
Patch:
@@ -28,7 +28,7 @@
 
 import org.junit.Test;
 
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 /**
  * @author Alan Harder
@@ -59,7 +59,7 @@ public void testAnnotate() {
     }
 
     @Test
-    @Bug(19866)
+    @Issue("JENKINS-19866")
     public void annotateFileScheme() {
         assertEquals(
                 "Get this <a href='file://here/in/this/folder/'>file://here/in/this/folder/</a>.",

File: core/src/test/java/hudson/logging/LogRecorderTest.java
Patch:
@@ -29,11 +29,11 @@
 import java.util.logging.LogRecord;
 import org.junit.Test;
 import static org.junit.Assert.*;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 public class LogRecorderTest {
 
-    @Bug(17983)
+    @Issue("JENKINS-17983")
     @Test public void targetIncludes() {
         assertTrue(includes("hudson", "hudson"));
         assertFalse(includes("hudson", "hudsone"));

File: core/src/test/java/hudson/model/ParametersActionTest.java
Patch:
@@ -11,7 +11,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
 import org.junit.runner.RunWith;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -88,7 +88,7 @@ public void createUpdatedShouldReturnNewInstanceWithNullOverride() {
     }
     
     @Test
-    @Bug(15094)   
+    @Issue("JENKINS-15094")
     public void checkNullParamaterValues() {
         SubTask subtask = mock(SubTask.class);
         Build build = mock(Build.class);

File: core/src/test/java/hudson/model/RunTest.java
Patch:
@@ -34,11 +34,11 @@
 
 import static org.junit.Assert.*;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 public class RunTest {
 
-    @Bug(15816)
+    @Issue("JENKINS-15816")
     @SuppressWarnings({"unchecked", "rawtypes"})
     @Test public void timezoneOfID() throws Exception {
         TimeZone origTZ = TimeZone.getDefault();

File: core/src/test/java/hudson/scheduler/CronTabDayOfWeekLocaleTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.For;
 import org.jvnet.hudson.test.Url;
 
@@ -276,7 +276,7 @@ public void isSundayAndPreviousRunIsPreviousSunday() throws Exception {
     }
 
     @Test
-    @Bug(12357)
+    @Issue("JENKINS-12357")
     public void isSundayAndNextRunIsNextSunday7() throws Exception {
         final Calendar cal = Calendar.getInstance(locale);
         cal.set(2011, 0, 16, 1, 0, 0); // Sunday, Jan 16th 2011, 01:00

File: core/src/test/java/hudson/scheduler/CronTabEventualityTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.For;
 
 import java.text.DateFormat;
@@ -42,15 +42,15 @@ public CronTabEventualityTest(String name, Hash hash) {
     }
 
     @Test
-    @Bug(12388)
+    @Issue("JENKINS-12388")
     public void testYearlyWillBeEventuallyTriggeredWithinOneYear() throws ANTLRException {
         Calendar start = new GregorianCalendar(2012, 0, 11, 22, 33); // Jan 11th 2012 22:33
         Calendar limit = createLimit(start, Calendar.YEAR, 1);
         checkEventuality(start, "@yearly", limit);
     }
 
     @Test
-    @Bug(12388)
+    @Issue("JENKINS-12388")
     public void testAnnuallyWillBeEventuallyTriggeredWithinOneYear() throws ANTLRException {
         Calendar start = new GregorianCalendar(2012, 0, 11, 22, 33); // Jan 11th 2012 22:33
         Calendar limit = createLimit(start, Calendar.YEAR, 1);

File: core/src/test/java/hudson/scheduler/CronTabTest.java
Patch:
@@ -32,7 +32,7 @@
 
 import static org.junit.Assert.*;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.Url;
 
 import static java.util.Calendar.MONDAY;
@@ -81,7 +81,7 @@ public void testCeil3() throws Exception {
     }
 
     @Test(timeout = 1000)
-    @Bug(12357)
+    @Issue("JENKINS-12357")
     public void testCeil3_DoW7() throws Exception {
         // similar to testCeil3, but DoW=7 may stuck in an infinite loop
         CronTab x = new CronTab("0 0 1 * 7");
@@ -162,7 +162,7 @@ public void testFloor3() throws Exception {
         compare(new GregorianCalendar(2010,7,1,0,0),x.floor(c));
     }
 
-    @Bug(8401)
+    @Issue("JENKINS-8401")
     @Test
     public void testFloor4() throws Exception {
         // conflict between DoM and DoW. In this we need to find a day that's the first day of a month and Sunday in 2010

File: core/src/test/java/hudson/util/FormValidationTest.java
Patch:
@@ -54,7 +54,7 @@ public void testValidateRequired_Empty() {
         assertEquals(FormValidation.Kind.ERROR, actual.kind);
     }
 
-    // @Bug(7438)
+    // @Issue("JENKINS-7438")
     @Test
     public void testMessage() {
         assertEquals("test msg", FormValidation.errorWithMarkup("test msg").getMessage());

File: core/src/test/java/hudson/util/RunListTest.java
Patch:
@@ -31,7 +31,7 @@
 import hudson.model.Run;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
@@ -72,7 +72,7 @@ public void byTimestampAllRuns() {
 		assertEquals(2, tested.toArray().length);
 	}
 
-    @Bug(21159)
+    @Issue("JENKINS-21159")
 	@PrepareForTest({Run.class})
 	@Test
 	public void byTimestampFirstRun() {

File: core/src/test/java/hudson/util/XStream2Test.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.logging.Logger;
 import org.apache.commons.io.FileUtils;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.Issue;
 
 /**
@@ -244,14 +244,14 @@ private void roundtripImmutableListAsPlainList(XStream2 xs, ImmutableList<?> l)
         assertEquals(l,a.l);
     }
 
-    @Bug(8006) // Previously a null entry in an array caused NPE
+    @Issue("JENKINS-8006") // Previously a null entry in an array caused NPE
     @Test
     public void emptyStack() {
         assertEquals("<object-array><null/><null/></object-array>",
                      Run.XSTREAM.toXML(new Object[2]).replaceAll("[ \n\r\t]+", ""));
     }
 
-    @Bug(9843)
+    @Issue("JENKINS-9843")
     @Test
     public void compatibilityAlias() {
         XStream2 xs = new XStream2();

File: core/src/test/java/hudson/util/io/TarArchiverTest.java
Patch:
@@ -37,7 +37,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 public class TarArchiverTest {
 
@@ -46,7 +46,7 @@ public class TarArchiverTest {
     /**
      * Makes sure that permissions are properly stored in the tar file.
      */
-    @Bug(9397)
+    @Issue("JENKINS-9397")
     @Test public void permission() throws Exception {
         assumeTrue(!Functions.isWindows());
 
@@ -98,7 +98,7 @@ public class TarArchiverTest {
         }
     }
 
-    @Bug(14922)
+    @Issue("JENKINS-14922")
     @Test public void brokenSymlinks() throws Exception {
         assumeTrue(!Functions.isWindows());
         File dir = tmp.getRoot();

File: core/src/test/java/hudson/util/io/ZipArchiverTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 public class ZipArchiverTest {
 
@@ -39,7 +39,7 @@ public void tearDown() {
         deleteDir(tmpDir);
     }
 
-    @Bug(9942)
+    @Issue("JENKINS-9942")
     @Test
     public void backwardsSlashesOnWindows()  {
         // create foo/bar/baz/Test.txt

File: core/src/test/java/jenkins/ResilientJsonObjectTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import net.sf.json.JSONObject;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 /**
  * @author Kohsuke Kawaguchi
@@ -14,7 +14,7 @@ public static class Foo { public int a; }
      * {@link JSONObject} databinding should be able to ignore non-existent fields.
      */
     @Test
-    @Bug(15105)
+    @Issue("JENKINS-15105")
     public void databindingShouldIgnoreUnrecognizedJsonProperty() {
         JSONObject o = JSONObject.fromObject("{a:1,b:2}");
         Foo f = (Foo)JSONObject.toBean(o,Foo.class);

File: core/src/test/java/jenkins/model/CoreEnvironmentContributorTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.powermock.api.mockito.PowerMockito;
@@ -40,7 +40,7 @@ public void setUp() throws Exception {
         instance = new CoreEnvironmentContributor();
     }
 
-    @Bug(19307)
+    @Issue("JENKINS-19307")
     @Test
     @PrepareForTest(fullyQualifiedNames={"hudson.model.Computer", "jenkins.model.Jenkins"})
     public void buildEnvironmentForJobShouldntUseCurrentComputer() throws IOException, InterruptedException {

File: core/src/test/java/jenkins/model/PeepholePermalinkTest.java
Patch:
@@ -29,13 +29,13 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.rules.TemporaryFolder;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 public class PeepholePermalinkTest {
 
     @Rule public TemporaryFolder tmp = new TemporaryFolder();
 
-    @Bug(17681)
+    @Issue("JENKINS-17681")
     @Test public void symlinks() throws Exception {
         File link = new File(tmp.getRoot(), "link");
         PeepholePermalink.writeSymlink(link, "stuff");

File: core/src/test/java/jenkins/util/TimerTest.java
Patch:
@@ -3,7 +3,7 @@
 import hudson.triggers.SafeTimerTask;
 import org.junit.Assert;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
@@ -15,7 +15,7 @@ public class TimerTest {
      * by running doRun() concurrently.
      */
     @Test
-    @Bug(19622)
+    @Issue("JENKINS-19622")
     public void timersArentBlocked() throws InterruptedException {
         final CountDownLatch startLatch = new CountDownLatch(1);
         final CountDownLatch stopLatch = new CountDownLatch(1);

File: test/src/test/java/hudson/ClassicPluginStrategyTest.java
Patch:
@@ -24,7 +24,7 @@
  */
 package hudson;
 
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.HudsonTestCase;
 import org.jvnet.hudson.test.recipes.LocalData;
 
@@ -74,7 +74,7 @@ public void testDependencyClassLoader() throws Exception {
      * Check transitive dependency exclude disabled plugins
      */
     @LocalData
-    @Bug(18654)
+    @Issue("JENKINS-18654")
     public void testDisabledDependencyClassLoader() throws Exception {
         PluginWrapper p = jenkins.getPluginManager().getPlugin("foo4");
 

File: test/src/test/java/hudson/PluginManagerTest.java
Patch:
@@ -47,7 +47,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.Url;
 import org.jvnet.hudson.test.recipes.WithPlugin;
@@ -318,7 +318,7 @@ private String callDependerValue() throws Exception {
      * 
      * @throws Exception
      */
-    @Bug(19976)
+    @Issue("JENKINS-19976")
     @Test public void installDependedPluginWithoutRestart() throws Exception {
         // Load depender.
         {
@@ -357,7 +357,7 @@ private String callDependerValue() throws Exception {
         assertTrue(r.jenkins.getExtensionList("org.jenkinsci.plugins.dependencytest.dependee.DependeeExtensionPoint").isEmpty());
     }
 
-    @Bug(12753)
+    @Issue("JENKINS-12753")
     @WithPlugin("tasks.jpi")
     @Test public void dynamicLoadRestartRequiredException() throws Exception {
         File jpi = new File(r.jenkins.getRootDir(), "plugins/tasks.jpi");

File: test/src/test/java/hudson/ProcStarterTest.java
Patch:
@@ -31,7 +31,7 @@
 import hudson.tasks.BuildWrapper;
 import hudson.tasks.BuildWrapperDescriptor;
 import java.io.IOException;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import hudson.Launcher.DecoratedLauncher;
 import org.junit.Rule;
 import org.junit.Test;
@@ -48,7 +48,7 @@ public class ProcStarterTest {
     public JenkinsRule rule = new JenkinsRule();
     
     @Test
-    @Bug(20559)
+    @Issue("JENKINS-20559")
     public void testNonInitializedEnvsNPE() throws Exception {
         // Create nodes and other test stuff
         rule.hudson.setNumExecutors(0);

File: test/src/test/java/hudson/bugs/LoginRedirectTest.java
Patch:
@@ -26,7 +26,7 @@
 import com.gargoylesoftware.htmlunit.html.HtmlForm;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
 import java.net.HttpURLConnection;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.HudsonTestCase;
 import org.jvnet.hudson.test.recipes.PresetData;
 import org.jvnet.hudson.test.recipes.PresetData.DataSet;
@@ -36,7 +36,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Bug(2290)
+@Issue("JENKINS-2290")
 public class LoginRedirectTest extends HudsonTestCase {
     protected void setUp() throws Exception {
         contextPath = "/hudson";

File: test/src/test/java/hudson/cli/CopyJobCommandTest.java
Patch:
@@ -43,7 +43,7 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 
@@ -72,7 +72,7 @@ public class CopyJobCommandTest {
         // TODO test copying from/to root, or into nonexistent folder
     }
 
-    @Bug(22262)
+    @Issue("JENKINS-22262")
     @Test public void folderPermissions() throws Exception {
         final MockFolder d1 = j.createFolder("d1");
         final FreeStyleProject p = d1.createProject(FreeStyleProject.class, "p");

File: test/src/test/java/hudson/cli/CreateJobCommandTest.java
Patch:
@@ -41,15 +41,15 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 
 public class CreateJobCommandTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    @Bug(22262)
+    @Issue("JENKINS-22262")
     @Test public void folderPermissions() throws Exception {
         CLICommand cmd = new CreateJobCommand();
         CLICommandInvoker invoker = new CLICommandInvoker(r, cmd);

File: test/src/test/java/hudson/cli/GetJobCommandTest.java
Patch:
@@ -34,7 +34,7 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 
@@ -43,7 +43,7 @@ public class GetJobCommandTest {
 
     @Rule public JenkinsRule j = new JenkinsRule();
 
-    @Bug(20236)
+    @Issue("JENKINS-20236")
     @Test public void withFolders() throws Exception {
         MockFolder d = j.createFolder("d");
         FreeStyleProject p = d.createProject(FreeStyleProject.class, "p");

File: test/src/test/java/hudson/cli/GroovyshCommandTest.java
Patch:
@@ -31,14 +31,14 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
 public class GroovyshCommandTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    @Bug(17929)
+    @Issue("JENKINS-17929")
     @Test public void authentication() throws Exception {
         CLICommandInvoker.Result result = new CLICommandInvoker(r, new GroovyshCommand())
             .authorizedTo(Jenkins.READ, Jenkins.RUN_SCRIPTS)

File: test/src/test/java/hudson/diagnosis/OldDataMonitorTest.java
Patch:
@@ -49,7 +49,7 @@
 import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MemoryAssert;
@@ -66,7 +66,7 @@ public class OldDataMonitorTest {
     @Rule public JenkinsRule r = new JenkinsRule();
 
     @Ignore("constantly failing on CI builders, makes problems for memory()")
-    @Bug(19544)
+    @Issue("JENKINS-19544")
     @LocalData
     @Test public void robustness() throws Exception {
         OldDataMonitor odm = OldDataMonitor.get(r.jenkins);
@@ -86,7 +86,7 @@ public class OldDataMonitorTest {
         // did not manage to save p, but at least we are not holding onto a reference to it anymore
     }
 
-    @Bug(19544)
+    @Issue("JENKINS-19544")
     @Test public void memory() throws Exception {
         FreeStyleProject p = r.createFreeStyleProject("p");
         FreeStyleBuild b = r.assertBuildStatusSuccess(p.scheduleBuild2(0));

File: test/src/test/java/hudson/init/impl/GroovyInitScriptTest.java
Patch:
@@ -27,15 +27,15 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.recipes.LocalData;
 
 public class GroovyInitScriptTest {
 
     @Rule public JenkinsRule j = new JenkinsRule();
 
-    @Bug(17933)
+    @Issue("JENKINS-17933")
     @LocalData
     @Test public void errorsHandled() throws Exception {
         assertEquals("true", System.getProperty("started"));

File: test/src/test/java/hudson/logging/LogRecorderManagerTest.java
Patch:
@@ -38,7 +38,7 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
 /**
@@ -64,7 +64,7 @@ public class LogRecorderManagerTest {
         assertEquals(logger.getLevel(), Level.FINEST);
     }
 
-    @Bug(18274)
+    @Issue("JENKINS-18274")
     @Test public void loggingOnSlaves() throws Exception {
         // TODO could also go through WebClient to assert that the config UI works
         LogRecorderManager mgr = j.jenkins.getLog();

File: test/src/test/java/hudson/model/AsynchPeopleTest.java
Patch:
@@ -30,7 +30,7 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.For;
 import org.jvnet.hudson.test.JenkinsRule;
 
@@ -39,7 +39,7 @@ public class AsynchPeopleTest {
 
     @Rule public JenkinsRule j = new JenkinsRule();
 
-    @Bug(18641)
+    @Issue("JENKINS-18641")
     @Test public void display() throws Exception {
         User.get("bob");
         JenkinsRule.WebClient wc = j.createWebClient();

File: test/src/test/java/hudson/model/CauseTest.java
Patch:
@@ -31,14 +31,14 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
 public class CauseTest {
 
     @Rule public JenkinsRule j = new JenkinsRule();
 
-    @Bug(14814)
+    @Issue("JENKINS-14814")
     @Test public void deeplyNestedCauses() throws Exception {
         FreeStyleProject a = j.createFreeStyleProject("a");
         FreeStyleProject b = j.createFreeStyleProject("b");
@@ -56,7 +56,7 @@ public class CauseTest {
         assertFalse("too big:\n" + buildXml, buildXml.contains("<upstreamBuild>1</upstreamBuild>"));
     }
 
-    @Bug(15747)
+    @Issue("JENKINS-15747")
     @Test public void broadlyNestedCauses() throws Exception {
         FreeStyleProject a = j.createFreeStyleProject("a");
         FreeStyleProject b = j.createFreeStyleProject("b");

File: test/src/test/java/hudson/model/DependencyGraphTest.java
Patch:
@@ -35,7 +35,7 @@
 
 import org.acegisecurity.context.SecurityContextHolder;
 import org.jvnet.hudson.test.HudsonTestCase;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.MockBuilder;
 import org.jvnet.hudson.test.recipes.LocalData;
 
@@ -112,7 +112,7 @@ public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,
     /**
      * Tests that all dependencies are found even when some projects have restricted visibility.
      */
-    @LocalData @Bug(5265)
+    @LocalData @Issue("JENKINS-5265")
     public void testItemReadPermission() throws Exception {
         // Rebuild dependency graph as anonymous user:
         jenkins.rebuildDependencyGraph();
@@ -129,7 +129,7 @@ public void testItemReadPermission() throws Exception {
         }
     }
 
-    @Bug(17247)
+    @Issue("JENKINS-17247")
     public void testTopologicalSort() throws Exception {
         /*
             A-B---C-E

File: test/src/test/java/hudson/model/DescriptorTest.java
Patch:
@@ -29,14 +29,14 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
 public class DescriptorTest {
 
     public @Rule JenkinsRule rule = new JenkinsRule();
 
-    @Bug(12307)
+    @Issue("JENKINS-12307")
     @Test public void getItemTypeDescriptorOrDie() throws Exception {
         Describable<?> instance = new Shell("echo hello");
         Descriptor<?> descriptor = instance.getDescriptor();

File: test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java
Patch:
@@ -42,7 +42,7 @@
 
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.Email;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.SingleFileSCM;
@@ -145,7 +145,7 @@ public void glob() throws Exception {
         assertFalse(text, text.contains("x.txt"));
     }
 
-    @Bug(19752)
+    @Issue("JENKINS-19752")
     @Test
     public void zipDownload() throws Exception {
         FreeStyleProject p = j.createFreeStyleProject();

File: test/src/test/java/hudson/model/DisplayNameTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 
@@ -93,7 +93,7 @@ public void testCopyJobWithDisplayName() throws Exception {
         
     }
 
-    @Bug(18074)
+    @Issue("JENKINS-18074")
     @Test public void copyJobWithDisplayNameToDifferentFolder() throws Exception {
         MockFolder d1 = j.createFolder("d1");
         FreeStyleProject job = d1.createProject(FreeStyleProject.class, "job");

File: test/src/test/java/hudson/model/DownloadServiceTest.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.Set;
 import java.util.TreeSet;
 import net.sf.json.JSONObject;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.HudsonTestCase;
 import org.jvnet.hudson.test.WithoutJenkins;
 import org.kohsuke.stapler.StaplerResponse;
@@ -32,7 +32,7 @@ protected void setUp() throws Exception {
         Downloadable.all().add(job);
     }
 
-    @Bug(5536)
+    @Issue("JENKINS-5536")
     public void testPost() throws Exception {
         // initially it should fail because the data doesn't have a signature
         assertNull(job.getData());

File: test/src/test/java/hudson/model/GetEnvironmentOutsideBuildTest.java
Patch:
@@ -12,7 +12,7 @@
 import jenkins.model.Jenkins;
 import org.junit.Assert;
 
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.ExtractResourceSCM;
 import org.jvnet.hudson.test.HudsonTestCase;
 
@@ -21,7 +21,7 @@
  * 
  * @author kutzi
  */
-@Bug(11592)
+@Issue("JENKINS-11592")
 public class GetEnvironmentOutsideBuildTest extends HudsonTestCase {
 
     private int oldExecNum;

File: test/src/test/java/hudson/model/ItemGroupMixInTest.java
Patch:
@@ -28,7 +28,7 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 import org.jvnet.hudson.test.recipes.LocalData;
@@ -37,7 +37,7 @@ public class ItemGroupMixInTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    @Bug(20951)
+    @Issue("JENKINS-20951")
     @LocalData
     @Test public void xmlFileReadCannotResolveClassException() throws Exception {
         MockFolder d = r.jenkins.getItemByFullName("d", MockFolder.class);

File: test/src/test/java/hudson/model/ProjectTest.java
Patch:
@@ -87,7 +87,7 @@
 import java.util.logging.Logger;
 
 import org.junit.Ignore;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.Issue;
 
 /**
@@ -764,7 +764,7 @@ public void testRestrictedLabelOnSlaveYesQueue() throws Exception {
         assertEquals(1, j.jenkins.getQueue().getItems().length);    
     }
 
-    @Bug(22750)
+    @Issue("JENKINS-22750")
     @Test
     public void testMasterJobPutInQueue() throws Exception {
         FreeStyleProject proj = j.createFreeStyleProject("JENKINS-21394-yes-master-queue");

File: test/src/test/java/hudson/model/RunParameterDefinitionTest.java
Patch:
@@ -38,7 +38,7 @@
 
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 
@@ -49,7 +49,7 @@ public class RunParameterDefinitionTest {
     @Rule
     public JenkinsRule j = new JenkinsRule();
 
-    @Bug(16462)
+    @Issue("JENKINS-16462")
     @Test public void inFolders() throws Exception {
         MockFolder dir = j.createFolder("dir");
         MockFolder subdir = dir.createProject(MockFolder.class, "sub dir");

File: test/src/test/java/hudson/model/RunTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Collections;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
 /**
@@ -38,7 +38,7 @@ public class RunTest  {
 
     @Rule public JenkinsRule j = new JenkinsRule();
 
-    @Bug(17935)
+    @Issue("JENKINS-17935")
     @Test public void getDynamicInvisibleTransientAction() throws Exception {
         TransientBuildActionFactory.all().add(0, new TransientBuildActionFactory() {
             @Override public Collection<? extends Action> createFor(Run target) {

File: test/src/test/java/hudson/model/ViewJobTest.java
Patch:
@@ -30,15 +30,15 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.TestExtension;
 
 public class ViewJobTest {
 
     @Rule public JenkinsRule rule = new JenkinsRule();
 
-    @Bug(19377)
+    @Issue("JENKINS-19377")
     @Test public void removeRun() throws Exception {
         J j = rule.jenkins.createProject(J.class, "j");
         R r1 = j.nue();

File: test/src/test/java/hudson/model/WorkspaceCleanupThreadTest.java
Patch:
@@ -40,7 +40,7 @@
 import org.junit.BeforeClass;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 
@@ -84,7 +84,7 @@ public class WorkspaceCleanupThreadTest {
         assertFalse(ws2.exists());
     }
 
-    @Bug(21023)
+    @Issue("JENKINS-21023")
     @Test public void modernMasterWorkspaceLocation() throws Exception {
         FreeStyleProject p = r.createFreeStyleProject();
         FreeStyleBuild b1 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));
@@ -105,7 +105,7 @@ public class WorkspaceCleanupThreadTest {
         assertTrue(ws2.exists());
     }
 
-    @Bug(21023)
+    @Issue("JENKINS-21023")
     @Test public void jobInFolder() throws Exception {
         MockFolder d = r.createFolder("d");
         FreeStyleProject p1 = d.createProject(FreeStyleProject.class, "p");

File: test/src/test/java/hudson/tasks/FingerprinterTest.java
Patch:
@@ -51,7 +51,7 @@
 import org.junit.BeforeClass;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.RandomlyFails;
@@ -292,7 +292,7 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
         }
     }
 
-    @Bug(17125)
+    @Issue("JENKINS-17125")
     @LocalData
     @Test public void actionSerialization() throws Exception {
         FreeStyleProject job = j.jenkins.getItemByFullName("j", FreeStyleProject.class);
@@ -316,7 +316,7 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
 
     @SuppressWarnings("unchecked")
     @RandomlyFails("for p3.upstreamProjects expected:<[hudson.model.FreeStyleProject@590e5b8[test0]]> but was:<[]>")
-    @Bug(18417)
+    @Issue("JENKINS-18417")
     @Test
     public void fingerprintCleanup() throws Exception {
         // file names shouldn't matter

File: test/src/test/java/hudson/tasks/MavenTest.java
Patch:
@@ -55,7 +55,7 @@
 import hudson.EnvVars;
 import hudson.model.FreeStyleBuild;
 import hudson.model.PasswordParameterDefinition;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
@@ -261,7 +261,7 @@ public void parametersReferencedFromPropertiesShouldRetainBackslashes() throws E
         }
     }
 
-    @Bug(18898)
+    @Issue("JENKINS-18898")
     public void testNullHome() throws Exception {
         EnvVars env = new EnvVars();
         new MavenInstallation("_", "", Collections.<ToolProperty<?>>emptyList()).buildEnvVars(env);

File: test/src/test/java/hudson/triggers/TriggerStartTest.java
Patch:
@@ -38,12 +38,12 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.TestExtension;
 import org.kohsuke.stapler.DataBoundConstructor;
 
-@Bug(14759)
+@Issue("JENKINS-14759")
 public class TriggerStartTest {
 
     @Rule public JenkinsRule j = new JenkinsRule();

File: test/src/test/java/hudson/util/RingBufferLogHandlerTest.java
Patch:
@@ -24,12 +24,12 @@
 package hudson.util;
 
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 public class RingBufferLogHandlerTest {
 
     @Test
-    @Bug(9120)
+    @Issue("JENKINS-9120")
     public void tooMuchRecordsShouldNotCrashHandler() {
         final RingBufferLogHandler handler = new RingBufferLogHandler();
 

File: test/src/test/java/hudson/util/RobustReflectionConverterTest.java
Patch:
@@ -32,15 +32,15 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.recipes.LocalData;
 
 public class RobustReflectionConverterTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    @Bug(21024)
+    @Issue("JENKINS-21024")
     @LocalData
     @Test public void randomExceptionsReported() throws Exception {
         FreeStyleProject p = r.jenkins.getItemByFullName("j", FreeStyleProject.class);

File: test/src/test/java/jenkins/model/ContextMenuTest.java
Patch:
@@ -37,7 +37,7 @@
 import static org.junit.Assert.assertEquals;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.For;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.TestExtension;
@@ -48,7 +48,7 @@ public class ContextMenuTest {
 
     @Rule public JenkinsRule j = new JenkinsRule();
 
-    @Bug(19173)
+    @Issue("JENKINS-19173")
     @Test public void contextMenuVisibility() throws Exception {
         final FreeStyleProject p = j.createFreeStyleProject("p");
         Callable<ContextMenu> doContextMenu = new Callable<ContextMenu>() {

File: test/src/test/java/jenkins/model/lazy/LazyBuildMixInTest.java
Patch:
@@ -30,7 +30,7 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.SleepBuilder;
@@ -39,7 +39,7 @@ public class LazyBuildMixInTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    @Bug(22395)
+    @Issue("JENKINS-22395")
     @Test public void dropLinksAfterGC() throws Exception {
         RunListener.all().clear();  // see commit message for the discussion
 
@@ -83,7 +83,7 @@ public class LazyBuildMixInTest {
         assertEquals(b3, b1a.getNextBuild());
     }
 
-    @Bug(20662)
+    @Issue("JENKINS-20662")
     @Test public void newRunningBuildRelationFromPrevious() throws Exception {
         FreeStyleProject p = r.createFreeStyleProject();
         p.getBuildersList().add(new SleepBuilder(1000));

File: test/src/test/java/lib/form/ExpandableTextboxTest.java
Patch:
@@ -27,15 +27,15 @@
 import com.gargoylesoftware.htmlunit.Page;
 import com.gargoylesoftware.htmlunit.WebRequestSettings;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.HudsonTestCase;
 import org.w3c.dom.NodeList;
 
 /**
  * @author Kohsuke Kawaguchi
  */
 public class ExpandableTextboxTest extends HudsonTestCase {
-    @Bug(2816)
+    @Issue("JENKINS-2816")
     public void testMultiline() throws Exception {
         // because attribute values are normalized, it's not very easy to encode multi-line string as @value. So let's use the system message here.
         jenkins.setSystemMessage("foo\nbar\nzot");

File: test/src/test/java/lib/layout/LayoutTest.java
Patch:
@@ -28,15 +28,15 @@
 import com.gargoylesoftware.htmlunit.html.HtmlLink;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.recipes.PresetData;
 
 public class LayoutTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    @Bug(21254)
+    @Issue("JENKINS-21254")
     @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS)
     @Test public void rejectedLinks() throws Exception {
         JenkinsRule.WebClient wc = r.createWebClient();

File: test/src/test/java/org/jvnet/hudson/test/HudsonTestCaseShutdownSlaveTest.java
Patch:
@@ -40,7 +40,7 @@
  * When using JenkinsRule, the exception is squashed in after(),
  * and does not cause failures.
  */
-@Bug(18259)
+@Issue("JENKINS-18259")
 public class HudsonTestCaseShutdownSlaveTest extends HudsonTestCase {
     public void testShutdownSlave() throws Exception {
         DumbSlave slave1 = createOnlineSlave(); // online, and a build finished.

File: test/src/test/java/scripts/BehaviorTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import com.gargoylesoftware.htmlunit.ScriptResult;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.HudsonTestCase;
 
 /**
@@ -54,7 +54,7 @@ private int asInt(ScriptResult r) {
         return ((Double)r.getJavaScriptResult()).intValue();
     }
 
-    @Bug(14495)
+    @Issue("JENKINS-14495")
     public void testDuplicateRegistrations() throws Exception {
         HtmlPage p = createWebClient().goTo("self/testDuplicateRegistrations");
         ScriptResult r = p.executeJavaScript("document.getElementsBySelector('DIV.a')[0].innerHTML");

File: core/src/test/java/hudson/FilePathTest.java
Patch:
@@ -273,7 +273,7 @@ public void close() throws IOException {
         compare("abc/..",".");
         compare(".",".");
 
-        // @Bug(5951)
+        // @Issue("JENKINS-5951")
         compare("C:\\Hudson\\jobs\\foo\\workspace/../../otherjob/workspace/build.xml",
                 "C:\\Hudson\\jobs/otherjob/workspace/build.xml");
         // Other cases that failed before

File: core/src/test/java/hudson/MarkupTextTest.java
Patch:
@@ -111,7 +111,7 @@ public void preEscape() {
         assertEquals("Line<hr/>\n2   &amp; 3\n&lt;End&gt;\n", text.toString(true));
     }
 
-    /* @Bug(6252) */
+    /* @Issue("JENKINS-6252") */
     @Test
     public void subTextSubText() {
         MarkupText text = new MarkupText("abcdefgh");

File: core/src/test/java/hudson/UtilTest.java
Patch:
@@ -35,7 +35,7 @@
 import static org.junit.Assert.*;
 import org.junit.Assume;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 import hudson.util.StreamTaskListener;
 import java.io.FileOutputStream;
@@ -281,7 +281,7 @@ public void testHtmlEscape() {
      * Compute 'known-correct' digests and see if I still get them when computed concurrently
      * to another digest.
      */
-    @Bug(10346)
+    @Issue("JENKINS-10346")
     @Test
     public void testDigestThreadSafety() throws InterruptedException {
     	String a = "abcdefgh";

File: core/src/test/java/hudson/cli/ListJobsCommandTest.java
Patch:
@@ -68,7 +68,7 @@ public void failForNonexistingName() throws Exception {
 
     /*
     @Test
-    @Bug(18393)
+    @Issue("JENKINS-18393")
     public void failForMatrixProject() throws Exception {
 
         final MatrixProject matrix = mock(MatrixProject.class);

File: core/src/test/java/hudson/console/UrlAnnotatorTest.java
Patch:
@@ -28,7 +28,7 @@
 
 import org.junit.Test;
 
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 /**
  * @author Alan Harder
@@ -59,7 +59,7 @@ public void testAnnotate() {
     }
 
     @Test
-    @Bug(19866)
+    @Issue("JENKINS-19866")
     public void annotateFileScheme() {
         assertEquals(
                 "Get this <a href='file://here/in/this/folder/'>file://here/in/this/folder/</a>.",

File: core/src/test/java/hudson/logging/LogRecorderTest.java
Patch:
@@ -29,11 +29,11 @@
 import java.util.logging.LogRecord;
 import org.junit.Test;
 import static org.junit.Assert.*;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 public class LogRecorderTest {
 
-    @Bug(17983)
+    @Issue("JENKINS-17983")
     @Test public void targetIncludes() {
         assertTrue(includes("hudson", "hudson"));
         assertFalse(includes("hudson", "hudsone"));

File: core/src/test/java/hudson/model/ParametersActionTest.java
Patch:
@@ -11,7 +11,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
 import org.junit.runner.RunWith;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -88,7 +88,7 @@ public void createUpdatedShouldReturnNewInstanceWithNullOverride() {
     }
     
     @Test
-    @Bug(15094)   
+    @Issue("JENKINS-15094")
     public void checkNullParamaterValues() {
         SubTask subtask = mock(SubTask.class);
         Build build = mock(Build.class);

File: core/src/test/java/hudson/model/RunTest.java
Patch:
@@ -34,11 +34,11 @@
 
 import static org.junit.Assert.*;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 public class RunTest {
 
-    @Bug(15816)
+    @Issue("JENKINS-15816")
     @SuppressWarnings({"unchecked", "rawtypes"})
     @Test public void timezoneOfID() throws Exception {
         TimeZone origTZ = TimeZone.getDefault();

File: core/src/test/java/hudson/scheduler/CronTabDayOfWeekLocaleTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.For;
 import org.jvnet.hudson.test.Url;
 
@@ -276,7 +276,7 @@ public void isSundayAndPreviousRunIsPreviousSunday() throws Exception {
     }
 
     @Test
-    @Bug(12357)
+    @Issue("JENKINS-12357")
     public void isSundayAndNextRunIsNextSunday7() throws Exception {
         final Calendar cal = Calendar.getInstance(locale);
         cal.set(2011, 0, 16, 1, 0, 0); // Sunday, Jan 16th 2011, 01:00

File: core/src/test/java/hudson/scheduler/CronTabEventualityTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.For;
 
 import java.text.DateFormat;
@@ -42,15 +42,15 @@ public CronTabEventualityTest(String name, Hash hash) {
     }
 
     @Test
-    @Bug(12388)
+    @Issue("JENKINS-12388")
     public void testYearlyWillBeEventuallyTriggeredWithinOneYear() throws ANTLRException {
         Calendar start = new GregorianCalendar(2012, 0, 11, 22, 33); // Jan 11th 2012 22:33
         Calendar limit = createLimit(start, Calendar.YEAR, 1);
         checkEventuality(start, "@yearly", limit);
     }
 
     @Test
-    @Bug(12388)
+    @Issue("JENKINS-12388")
     public void testAnnuallyWillBeEventuallyTriggeredWithinOneYear() throws ANTLRException {
         Calendar start = new GregorianCalendar(2012, 0, 11, 22, 33); // Jan 11th 2012 22:33
         Calendar limit = createLimit(start, Calendar.YEAR, 1);

File: core/src/test/java/hudson/scheduler/CronTabTest.java
Patch:
@@ -32,7 +32,7 @@
 
 import static org.junit.Assert.*;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.Url;
 
 import static java.util.Calendar.MONDAY;
@@ -81,7 +81,7 @@ public void testCeil3() throws Exception {
     }
 
     @Test(timeout = 1000)
-    @Bug(12357)
+    @Issue("JENKINS-12357")
     public void testCeil3_DoW7() throws Exception {
         // similar to testCeil3, but DoW=7 may stuck in an infinite loop
         CronTab x = new CronTab("0 0 1 * 7");
@@ -162,7 +162,7 @@ public void testFloor3() throws Exception {
         compare(new GregorianCalendar(2010,7,1,0,0),x.floor(c));
     }
 
-    @Bug(8401)
+    @Issue("JENKINS-8401")
     @Test
     public void testFloor4() throws Exception {
         // conflict between DoM and DoW. In this we need to find a day that's the first day of a month and Sunday in 2010

File: core/src/test/java/hudson/util/FormValidationTest.java
Patch:
@@ -54,7 +54,7 @@ public void testValidateRequired_Empty() {
         assertEquals(FormValidation.Kind.ERROR, actual.kind);
     }
 
-    // @Bug(7438)
+    // @Issue("JENKINS-7438")
     @Test
     public void testMessage() {
         assertEquals("test msg", FormValidation.errorWithMarkup("test msg").getMessage());

File: core/src/test/java/hudson/util/RunListTest.java
Patch:
@@ -31,7 +31,7 @@
 import hudson.model.Run;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
@@ -72,7 +72,7 @@ public void byTimestampAllRuns() {
 		assertEquals(2, tested.toArray().length);
 	}
 
-    @Bug(21159)
+    @Issue("JENKINS-21159")
 	@PrepareForTest({Run.class})
 	@Test
 	public void byTimestampFirstRun() {

File: core/src/test/java/hudson/util/XStream2Test.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.logging.Logger;
 import org.apache.commons.io.FileUtils;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.Issue;
 
 /**
@@ -244,14 +244,14 @@ private void roundtripImmutableListAsPlainList(XStream2 xs, ImmutableList<?> l)
         assertEquals(l,a.l);
     }
 
-    @Bug(8006) // Previously a null entry in an array caused NPE
+    @Issue("JENKINS-8006") // Previously a null entry in an array caused NPE
     @Test
     public void emptyStack() {
         assertEquals("<object-array><null/><null/></object-array>",
                      Run.XSTREAM.toXML(new Object[2]).replaceAll("[ \n\r\t]+", ""));
     }
 
-    @Bug(9843)
+    @Issue("JENKINS-9843")
     @Test
     public void compatibilityAlias() {
         XStream2 xs = new XStream2();

File: core/src/test/java/hudson/util/io/TarArchiverTest.java
Patch:
@@ -37,7 +37,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 public class TarArchiverTest {
 
@@ -46,7 +46,7 @@ public class TarArchiverTest {
     /**
      * Makes sure that permissions are properly stored in the tar file.
      */
-    @Bug(9397)
+    @Issue("JENKINS-9397")
     @Test public void permission() throws Exception {
         assumeTrue(!Functions.isWindows());
 
@@ -98,7 +98,7 @@ public class TarArchiverTest {
         }
     }
 
-    @Bug(14922)
+    @Issue("JENKINS-14922")
     @Test public void brokenSymlinks() throws Exception {
         assumeTrue(!Functions.isWindows());
         File dir = tmp.getRoot();

File: core/src/test/java/hudson/util/io/ZipArchiverTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 public class ZipArchiverTest {
 
@@ -39,7 +39,7 @@ public void tearDown() {
         deleteDir(tmpDir);
     }
 
-    @Bug(9942)
+    @Issue("JENKINS-9942")
     @Test
     public void backwardsSlashesOnWindows()  {
         // create foo/bar/baz/Test.txt

File: core/src/test/java/jenkins/ResilientJsonObjectTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import net.sf.json.JSONObject;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 /**
  * @author Kohsuke Kawaguchi
@@ -14,7 +14,7 @@ public static class Foo { public int a; }
      * {@link JSONObject} databinding should be able to ignore non-existent fields.
      */
     @Test
-    @Bug(15105)
+    @Issue("JENKINS-15105")
     public void databindingShouldIgnoreUnrecognizedJsonProperty() {
         JSONObject o = JSONObject.fromObject("{a:1,b:2}");
         Foo f = (Foo)JSONObject.toBean(o,Foo.class);

File: core/src/test/java/jenkins/model/CoreEnvironmentContributorTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.powermock.api.mockito.PowerMockito;
@@ -40,7 +40,7 @@ public void setUp() throws Exception {
         instance = new CoreEnvironmentContributor();
     }
 
-    @Bug(19307)
+    @Issue("JENKINS-19307")
     @Test
     @PrepareForTest(fullyQualifiedNames={"hudson.model.Computer", "jenkins.model.Jenkins"})
     public void buildEnvironmentForJobShouldntUseCurrentComputer() throws IOException, InterruptedException {

File: core/src/test/java/jenkins/model/PeepholePermalinkTest.java
Patch:
@@ -29,13 +29,13 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.rules.TemporaryFolder;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 public class PeepholePermalinkTest {
 
     @Rule public TemporaryFolder tmp = new TemporaryFolder();
 
-    @Bug(17681)
+    @Issue("JENKINS-17681")
     @Test public void symlinks() throws Exception {
         File link = new File(tmp.getRoot(), "link");
         PeepholePermalink.writeSymlink(link, "stuff");

File: core/src/test/java/jenkins/util/TimerTest.java
Patch:
@@ -3,7 +3,7 @@
 import hudson.triggers.SafeTimerTask;
 import org.junit.Assert;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
@@ -15,7 +15,7 @@ public class TimerTest {
      * by running doRun() concurrently.
      */
     @Test
-    @Bug(19622)
+    @Issue("JENKINS-19622")
     public void timersArentBlocked() throws InterruptedException {
         final CountDownLatch startLatch = new CountDownLatch(1);
         final CountDownLatch stopLatch = new CountDownLatch(1);

File: test/src/test/java/hudson/ClassicPluginStrategyTest.java
Patch:
@@ -24,7 +24,7 @@
  */
 package hudson;
 
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.HudsonTestCase;
 import org.jvnet.hudson.test.recipes.LocalData;
 
@@ -74,7 +74,7 @@ public void testDependencyClassLoader() throws Exception {
      * Check transitive dependency exclude disabled plugins
      */
     @LocalData
-    @Bug(18654)
+    @Issue("JENKINS-18654")
     public void testDisabledDependencyClassLoader() throws Exception {
         PluginWrapper p = jenkins.getPluginManager().getPlugin("foo4");
 

File: test/src/test/java/hudson/PluginManagerTest.java
Patch:
@@ -47,7 +47,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.Url;
 import org.jvnet.hudson.test.recipes.WithPlugin;
@@ -318,7 +318,7 @@ private String callDependerValue() throws Exception {
      * 
      * @throws Exception
      */
-    @Bug(19976)
+    @Issue("JENKINS-19976")
     @Test public void installDependedPluginWithoutRestart() throws Exception {
         // Load depender.
         {
@@ -357,7 +357,7 @@ private String callDependerValue() throws Exception {
         assertTrue(r.jenkins.getExtensionList("org.jenkinsci.plugins.dependencytest.dependee.DependeeExtensionPoint").isEmpty());
     }
 
-    @Bug(12753)
+    @Issue("JENKINS-12753")
     @WithPlugin("tasks.jpi")
     @Test public void dynamicLoadRestartRequiredException() throws Exception {
         File jpi = new File(r.jenkins.getRootDir(), "plugins/tasks.jpi");

File: test/src/test/java/hudson/ProcStarterTest.java
Patch:
@@ -31,7 +31,7 @@
 import hudson.tasks.BuildWrapper;
 import hudson.tasks.BuildWrapperDescriptor;
 import java.io.IOException;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import hudson.Launcher.DecoratedLauncher;
 import org.junit.Rule;
 import org.junit.Test;
@@ -48,7 +48,7 @@ public class ProcStarterTest {
     public JenkinsRule rule = new JenkinsRule();
     
     @Test
-    @Bug(20559)
+    @Issue("JENKINS-20559")
     public void testNonInitializedEnvsNPE() throws Exception {
         // Create nodes and other test stuff
         rule.hudson.setNumExecutors(0);

File: test/src/test/java/hudson/bugs/LoginRedirectTest.java
Patch:
@@ -26,7 +26,7 @@
 import com.gargoylesoftware.htmlunit.html.HtmlForm;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
 import java.net.HttpURLConnection;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.HudsonTestCase;
 import org.jvnet.hudson.test.recipes.PresetData;
 import org.jvnet.hudson.test.recipes.PresetData.DataSet;
@@ -36,7 +36,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Bug(2290)
+@Issue("JENKINS-2290")
 public class LoginRedirectTest extends HudsonTestCase {
     protected void setUp() throws Exception {
         contextPath = "/hudson";

File: test/src/test/java/hudson/cli/CopyJobCommandTest.java
Patch:
@@ -43,7 +43,7 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 
@@ -72,7 +72,7 @@ public class CopyJobCommandTest {
         // TODO test copying from/to root, or into nonexistent folder
     }
 
-    @Bug(22262)
+    @Issue("JENKINS-22262")
     @Test public void folderPermissions() throws Exception {
         final MockFolder d1 = j.createFolder("d1");
         final FreeStyleProject p = d1.createProject(FreeStyleProject.class, "p");

File: test/src/test/java/hudson/cli/CreateJobCommandTest.java
Patch:
@@ -41,15 +41,15 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 
 public class CreateJobCommandTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    @Bug(22262)
+    @Issue("JENKINS-22262")
     @Test public void folderPermissions() throws Exception {
         CLICommand cmd = new CreateJobCommand();
         CLICommandInvoker invoker = new CLICommandInvoker(r, cmd);

File: test/src/test/java/hudson/cli/GetJobCommandTest.java
Patch:
@@ -34,7 +34,7 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 
@@ -43,7 +43,7 @@ public class GetJobCommandTest {
 
     @Rule public JenkinsRule j = new JenkinsRule();
 
-    @Bug(20236)
+    @Issue("JENKINS-20236")
     @Test public void withFolders() throws Exception {
         MockFolder d = j.createFolder("d");
         FreeStyleProject p = d.createProject(FreeStyleProject.class, "p");

File: test/src/test/java/hudson/cli/GroovyshCommandTest.java
Patch:
@@ -31,14 +31,14 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
 public class GroovyshCommandTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    @Bug(17929)
+    @Issue("JENKINS-17929")
     @Test public void authentication() throws Exception {
         CLICommandInvoker.Result result = new CLICommandInvoker(r, new GroovyshCommand())
             .authorizedTo(Jenkins.READ, Jenkins.RUN_SCRIPTS)

File: test/src/test/java/hudson/diagnosis/OldDataMonitorTest.java
Patch:
@@ -49,7 +49,7 @@
 import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MemoryAssert;
@@ -66,7 +66,7 @@ public class OldDataMonitorTest {
     @Rule public JenkinsRule r = new JenkinsRule();
 
     @Ignore("constantly failing on CI builders, makes problems for memory()")
-    @Bug(19544)
+    @Issue("JENKINS-19544")
     @LocalData
     @Test public void robustness() throws Exception {
         OldDataMonitor odm = OldDataMonitor.get(r.jenkins);
@@ -86,7 +86,7 @@ public class OldDataMonitorTest {
         // did not manage to save p, but at least we are not holding onto a reference to it anymore
     }
 
-    @Bug(19544)
+    @Issue("JENKINS-19544")
     @Test public void memory() throws Exception {
         FreeStyleProject p = r.createFreeStyleProject("p");
         FreeStyleBuild b = r.assertBuildStatusSuccess(p.scheduleBuild2(0));

File: test/src/test/java/hudson/init/impl/GroovyInitScriptTest.java
Patch:
@@ -27,15 +27,15 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.recipes.LocalData;
 
 public class GroovyInitScriptTest {
 
     @Rule public JenkinsRule j = new JenkinsRule();
 
-    @Bug(17933)
+    @Issue("JENKINS-17933")
     @LocalData
     @Test public void errorsHandled() throws Exception {
         assertEquals("true", System.getProperty("started"));

File: test/src/test/java/hudson/logging/LogRecorderManagerTest.java
Patch:
@@ -38,7 +38,7 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
 /**
@@ -64,7 +64,7 @@ public class LogRecorderManagerTest {
         assertEquals(logger.getLevel(), Level.FINEST);
     }
 
-    @Bug(18274)
+    @Issue("JENKINS-18274")
     @Test public void loggingOnSlaves() throws Exception {
         // TODO could also go through WebClient to assert that the config UI works
         LogRecorderManager mgr = j.jenkins.getLog();

File: test/src/test/java/hudson/model/AsynchPeopleTest.java
Patch:
@@ -30,7 +30,7 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.For;
 import org.jvnet.hudson.test.JenkinsRule;
 
@@ -39,7 +39,7 @@ public class AsynchPeopleTest {
 
     @Rule public JenkinsRule j = new JenkinsRule();
 
-    @Bug(18641)
+    @Issue("JENKINS-18641")
     @Test public void display() throws Exception {
         User.get("bob");
         JenkinsRule.WebClient wc = j.createWebClient();

File: test/src/test/java/hudson/model/CauseTest.java
Patch:
@@ -31,14 +31,14 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
 public class CauseTest {
 
     @Rule public JenkinsRule j = new JenkinsRule();
 
-    @Bug(14814)
+    @Issue("JENKINS-14814")
     @Test public void deeplyNestedCauses() throws Exception {
         FreeStyleProject a = j.createFreeStyleProject("a");
         FreeStyleProject b = j.createFreeStyleProject("b");
@@ -56,7 +56,7 @@ public class CauseTest {
         assertFalse("too big:\n" + buildXml, buildXml.contains("<upstreamBuild>1</upstreamBuild>"));
     }
 
-    @Bug(15747)
+    @Issue("JENKINS-15747")
     @Test public void broadlyNestedCauses() throws Exception {
         FreeStyleProject a = j.createFreeStyleProject("a");
         FreeStyleProject b = j.createFreeStyleProject("b");

File: test/src/test/java/hudson/model/DependencyGraphTest.java
Patch:
@@ -35,7 +35,7 @@
 
 import org.acegisecurity.context.SecurityContextHolder;
 import org.jvnet.hudson.test.HudsonTestCase;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.MockBuilder;
 import org.jvnet.hudson.test.recipes.LocalData;
 
@@ -112,7 +112,7 @@ public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener,
     /**
      * Tests that all dependencies are found even when some projects have restricted visibility.
      */
-    @LocalData @Bug(5265)
+    @LocalData @Issue("JENKINS-5265")
     public void testItemReadPermission() throws Exception {
         // Rebuild dependency graph as anonymous user:
         jenkins.rebuildDependencyGraph();
@@ -129,7 +129,7 @@ public void testItemReadPermission() throws Exception {
         }
     }
 
-    @Bug(17247)
+    @Issue("JENKINS-17247")
     public void testTopologicalSort() throws Exception {
         /*
             A-B---C-E

File: test/src/test/java/hudson/model/DescriptorTest.java
Patch:
@@ -29,14 +29,14 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
 public class DescriptorTest {
 
     public @Rule JenkinsRule rule = new JenkinsRule();
 
-    @Bug(12307)
+    @Issue("JENKINS-12307")
     @Test public void getItemTypeDescriptorOrDie() throws Exception {
         Describable<?> instance = new Shell("echo hello");
         Descriptor<?> descriptor = instance.getDescriptor();

File: test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java
Patch:
@@ -42,7 +42,7 @@
 
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.Email;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.SingleFileSCM;
@@ -145,7 +145,7 @@ public void glob() throws Exception {
         assertFalse(text, text.contains("x.txt"));
     }
 
-    @Bug(19752)
+    @Issue("JENKINS-19752")
     @Test
     public void zipDownload() throws Exception {
         FreeStyleProject p = j.createFreeStyleProject();

File: test/src/test/java/hudson/model/DisplayNameTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 
@@ -93,7 +93,7 @@ public void testCopyJobWithDisplayName() throws Exception {
         
     }
 
-    @Bug(18074)
+    @Issue("JENKINS-18074")
     @Test public void copyJobWithDisplayNameToDifferentFolder() throws Exception {
         MockFolder d1 = j.createFolder("d1");
         FreeStyleProject job = d1.createProject(FreeStyleProject.class, "job");

File: test/src/test/java/hudson/model/DownloadServiceTest.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.Set;
 import java.util.TreeSet;
 import net.sf.json.JSONObject;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.HudsonTestCase;
 import org.jvnet.hudson.test.WithoutJenkins;
 import org.kohsuke.stapler.StaplerResponse;
@@ -32,7 +32,7 @@ protected void setUp() throws Exception {
         Downloadable.all().add(job);
     }
 
-    @Bug(5536)
+    @Issue("JENKINS-5536")
     public void testPost() throws Exception {
         // initially it should fail because the data doesn't have a signature
         assertNull(job.getData());

File: test/src/test/java/hudson/model/GetEnvironmentOutsideBuildTest.java
Patch:
@@ -12,7 +12,7 @@
 import jenkins.model.Jenkins;
 import org.junit.Assert;
 
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.ExtractResourceSCM;
 import org.jvnet.hudson.test.HudsonTestCase;
 
@@ -21,7 +21,7 @@
  * 
  * @author kutzi
  */
-@Bug(11592)
+@Issue("JENKINS-11592")
 public class GetEnvironmentOutsideBuildTest extends HudsonTestCase {
 
     private int oldExecNum;

File: test/src/test/java/hudson/model/ItemGroupMixInTest.java
Patch:
@@ -28,7 +28,7 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 import org.jvnet.hudson.test.recipes.LocalData;
@@ -37,7 +37,7 @@ public class ItemGroupMixInTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    @Bug(20951)
+    @Issue("JENKINS-20951")
     @LocalData
     @Test public void xmlFileReadCannotResolveClassException() throws Exception {
         MockFolder d = r.jenkins.getItemByFullName("d", MockFolder.class);

File: test/src/test/java/hudson/model/ProjectTest.java
Patch:
@@ -87,7 +87,7 @@
 import java.util.logging.Logger;
 
 import org.junit.Ignore;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.Issue;
 
 /**
@@ -764,7 +764,7 @@ public void testRestrictedLabelOnSlaveYesQueue() throws Exception {
         assertEquals(1, j.jenkins.getQueue().getItems().length);    
     }
 
-    @Bug(22750)
+    @Issue("JENKINS-22750")
     @Test
     public void testMasterJobPutInQueue() throws Exception {
         FreeStyleProject proj = j.createFreeStyleProject("JENKINS-21394-yes-master-queue");

File: test/src/test/java/hudson/model/RunParameterDefinitionTest.java
Patch:
@@ -38,7 +38,7 @@
 
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 
@@ -49,7 +49,7 @@ public class RunParameterDefinitionTest {
     @Rule
     public JenkinsRule j = new JenkinsRule();
 
-    @Bug(16462)
+    @Issue("JENKINS-16462")
     @Test public void inFolders() throws Exception {
         MockFolder dir = j.createFolder("dir");
         MockFolder subdir = dir.createProject(MockFolder.class, "sub dir");

File: test/src/test/java/hudson/model/RunTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Collections;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
 /**
@@ -38,7 +38,7 @@ public class RunTest  {
 
     @Rule public JenkinsRule j = new JenkinsRule();
 
-    @Bug(17935)
+    @Issue("JENKINS-17935")
     @Test public void getDynamicInvisibleTransientAction() throws Exception {
         TransientBuildActionFactory.all().add(0, new TransientBuildActionFactory() {
             @Override public Collection<? extends Action> createFor(Run target) {

File: test/src/test/java/hudson/model/ViewJobTest.java
Patch:
@@ -30,15 +30,15 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.TestExtension;
 
 public class ViewJobTest {
 
     @Rule public JenkinsRule rule = new JenkinsRule();
 
-    @Bug(19377)
+    @Issue("JENKINS-19377")
     @Test public void removeRun() throws Exception {
         J j = rule.jenkins.createProject(J.class, "j");
         R r1 = j.nue();

File: test/src/test/java/hudson/model/WorkspaceCleanupThreadTest.java
Patch:
@@ -40,7 +40,7 @@
 import org.junit.BeforeClass;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.MockFolder;
 
@@ -84,7 +84,7 @@ public class WorkspaceCleanupThreadTest {
         assertFalse(ws2.exists());
     }
 
-    @Bug(21023)
+    @Issue("JENKINS-21023")
     @Test public void modernMasterWorkspaceLocation() throws Exception {
         FreeStyleProject p = r.createFreeStyleProject();
         FreeStyleBuild b1 = r.assertBuildStatusSuccess(p.scheduleBuild2(0));
@@ -105,7 +105,7 @@ public class WorkspaceCleanupThreadTest {
         assertTrue(ws2.exists());
     }
 
-    @Bug(21023)
+    @Issue("JENKINS-21023")
     @Test public void jobInFolder() throws Exception {
         MockFolder d = r.createFolder("d");
         FreeStyleProject p1 = d.createProject(FreeStyleProject.class, "p");

File: test/src/test/java/hudson/tasks/FingerprinterTest.java
Patch:
@@ -51,7 +51,7 @@
 import org.junit.BeforeClass;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.RandomlyFails;
@@ -292,7 +292,7 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
         }
     }
 
-    @Bug(17125)
+    @Issue("JENKINS-17125")
     @LocalData
     @Test public void actionSerialization() throws Exception {
         FreeStyleProject job = j.jenkins.getItemByFullName("j", FreeStyleProject.class);
@@ -316,7 +316,7 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
 
     @SuppressWarnings("unchecked")
     @RandomlyFails("for p3.upstreamProjects expected:<[hudson.model.FreeStyleProject@590e5b8[test0]]> but was:<[]>")
-    @Bug(18417)
+    @Issue("JENKINS-18417")
     @Test
     public void fingerprintCleanup() throws Exception {
         // file names shouldn't matter

File: test/src/test/java/hudson/tasks/MavenTest.java
Patch:
@@ -55,7 +55,7 @@
 import hudson.EnvVars;
 import hudson.model.FreeStyleBuild;
 import hudson.model.PasswordParameterDefinition;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
@@ -261,7 +261,7 @@ public void parametersReferencedFromPropertiesShouldRetainBackslashes() throws E
         }
     }
 
-    @Bug(18898)
+    @Issue("JENKINS-18898")
     public void testNullHome() throws Exception {
         EnvVars env = new EnvVars();
         new MavenInstallation("_", "", Collections.<ToolProperty<?>>emptyList()).buildEnvVars(env);

File: test/src/test/java/hudson/triggers/TriggerStartTest.java
Patch:
@@ -38,12 +38,12 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.TestExtension;
 import org.kohsuke.stapler.DataBoundConstructor;
 
-@Bug(14759)
+@Issue("JENKINS-14759")
 public class TriggerStartTest {
 
     @Rule public JenkinsRule j = new JenkinsRule();

File: test/src/test/java/hudson/util/RingBufferLogHandlerTest.java
Patch:
@@ -24,12 +24,12 @@
 package hudson.util;
 
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 
 public class RingBufferLogHandlerTest {
 
     @Test
-    @Bug(9120)
+    @Issue("JENKINS-9120")
     public void tooMuchRecordsShouldNotCrashHandler() {
         final RingBufferLogHandler handler = new RingBufferLogHandler();
 

File: test/src/test/java/hudson/util/RobustReflectionConverterTest.java
Patch:
@@ -32,15 +32,15 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.recipes.LocalData;
 
 public class RobustReflectionConverterTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    @Bug(21024)
+    @Issue("JENKINS-21024")
     @LocalData
     @Test public void randomExceptionsReported() throws Exception {
         FreeStyleProject p = r.jenkins.getItemByFullName("j", FreeStyleProject.class);

File: test/src/test/java/jenkins/model/ContextMenuTest.java
Patch:
@@ -37,7 +37,7 @@
 import static org.junit.Assert.assertEquals;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.For;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.TestExtension;
@@ -48,7 +48,7 @@ public class ContextMenuTest {
 
     @Rule public JenkinsRule j = new JenkinsRule();
 
-    @Bug(19173)
+    @Issue("JENKINS-19173")
     @Test public void contextMenuVisibility() throws Exception {
         final FreeStyleProject p = j.createFreeStyleProject("p");
         Callable<ContextMenu> doContextMenu = new Callable<ContextMenu>() {

File: test/src/test/java/jenkins/model/lazy/LazyBuildMixInTest.java
Patch:
@@ -30,7 +30,7 @@
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.SleepBuilder;
@@ -39,7 +39,7 @@ public class LazyBuildMixInTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    @Bug(22395)
+    @Issue("JENKINS-22395")
     @Test public void dropLinksAfterGC() throws Exception {
         RunListener.all().clear();  // see commit message for the discussion
 
@@ -83,7 +83,7 @@ public class LazyBuildMixInTest {
         assertEquals(b3, b1a.getNextBuild());
     }
 
-    @Bug(20662)
+    @Issue("JENKINS-20662")
     @Test public void newRunningBuildRelationFromPrevious() throws Exception {
         FreeStyleProject p = r.createFreeStyleProject();
         p.getBuildersList().add(new SleepBuilder(1000));

File: test/src/test/java/lib/form/ExpandableTextboxTest.java
Patch:
@@ -27,15 +27,15 @@
 import com.gargoylesoftware.htmlunit.Page;
 import com.gargoylesoftware.htmlunit.WebRequestSettings;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.HudsonTestCase;
 import org.w3c.dom.NodeList;
 
 /**
  * @author Kohsuke Kawaguchi
  */
 public class ExpandableTextboxTest extends HudsonTestCase {
-    @Bug(2816)
+    @Issue("JENKINS-2816")
     public void testMultiline() throws Exception {
         // because attribute values are normalized, it's not very easy to encode multi-line string as @value. So let's use the system message here.
         jenkins.setSystemMessage("foo\nbar\nzot");

File: test/src/test/java/lib/layout/LayoutTest.java
Patch:
@@ -28,15 +28,15 @@
 import com.gargoylesoftware.htmlunit.html.HtmlLink;
 import org.junit.Rule;
 import org.junit.Test;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.recipes.PresetData;
 
 public class LayoutTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    @Bug(21254)
+    @Issue("JENKINS-21254")
     @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS)
     @Test public void rejectedLinks() throws Exception {
         JenkinsRule.WebClient wc = r.createWebClient();

File: test/src/test/java/org/jvnet/hudson/test/HudsonTestCaseShutdownSlaveTest.java
Patch:
@@ -40,7 +40,7 @@
  * When using JenkinsRule, the exception is squashed in after(),
  * and does not cause failures.
  */
-@Bug(18259)
+@Issue("JENKINS-18259")
 public class HudsonTestCaseShutdownSlaveTest extends HudsonTestCase {
     public void testShutdownSlave() throws Exception {
         DumbSlave slave1 = createOnlineSlave(); // online, and a build finished.

File: test/src/test/java/scripts/BehaviorTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import com.gargoylesoftware.htmlunit.ScriptResult;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
-import org.jvnet.hudson.test.Bug;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.HudsonTestCase;
 
 /**
@@ -54,7 +54,7 @@ private int asInt(ScriptResult r) {
         return ((Double)r.getJavaScriptResult()).intValue();
     }
 
-    @Bug(14495)
+    @Issue("JENKINS-14495")
     public void testDuplicateRegistrations() throws Exception {
         HtmlPage p = createWebClient().goTo("self/testDuplicateRegistrations");
         ScriptResult r = p.executeJavaScript("document.getElementsBySelector('DIV.a')[0].innerHTML");

File: test/src/test/java/hudson/model/ItemGroupMixInTest.java
Patch:
@@ -39,6 +39,7 @@
 import org.jvnet.hudson.test.recipes.LocalData;
 
 import java.io.File;
+import java.util.List;
 
 public class ItemGroupMixInTest {
 

File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java
Patch:
@@ -746,7 +746,7 @@ public synchronized boolean removeValue(R run) {
 
         entrySet.clearCache();
 
-        return unwrap(old)!=null;
+        return old != null;
     }
 
     /**

File: core/src/main/java/jenkins/slaves/restarter/JnlpSlaveRestarterInstaller.java
Patch:
@@ -69,7 +69,7 @@ public List<SlaveRestarter> call() throws IOException {
 
                     e.addListener(new EngineListenerAdapter() {
                         @Override
-                        public void onDisconnect() {
+                        public void onReconnect() {
                             try {
                                 for (SlaveRestarter r : restarters) {
                                     try {

File: test/src/test/java/hudson/model/QueueTest.java
Patch:
@@ -569,7 +569,7 @@ public String getDisplayName() {
         }
     }
 
-    public void testWaitForStartAndCancelBeforeStart() throws Exception {
+    @Test public void waitForStartAndCancelBeforeStart() throws Exception {
         final OneShotEvent ev = new OneShotEvent();
         FreeStyleProject p = r.createFreeStyleProject();
 

File: core/src/main/java/hudson/slaves/ComputerRetentionWork.java
Patch:
@@ -63,7 +63,7 @@ protected void doRun() {
             if (!nextCheck.containsKey(c) || startRun > nextCheck.get(c)) {
                 // at the moment I don't trust strategies to wait more than 60 minutes
                 // strategies need to wait at least one minute
-                final long waitInMins = Math.min(1, Math.max(60, c.getRetentionStrategy().check(c)));
+                final long waitInMins = Math.max(1, Math.min(60, c.getRetentionStrategy().check(c)));
                 nextCheck.put(c, startRun + waitInMins*1000*60 /*MINS->MILLIS*/);
             }
         }

File: core/src/main/java/hudson/slaves/ComputerRetentionWork.java
Patch:
@@ -63,7 +63,7 @@ protected void doRun() {
             if (!nextCheck.containsKey(c) || startRun > nextCheck.get(c)) {
                 // at the moment I don't trust strategies to wait more than 60 minutes
                 // strategies need to wait at least one minute
-                final long waitInMins = Math.min(1, Math.max(60, c.getRetentionStrategy().check(c)));
+                final long waitInMins = Math.max(1, Math.min(60, c.getRetentionStrategy().check(c)));
                 nextCheck.put(c, startRun + waitInMins*1000*60 /*MINS->MILLIS*/);
             }
         }

File: test/src/test/java/hudson/model/QueueTest.java
Patch:
@@ -346,7 +346,7 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
         assertEquals("slave0", runs.get(0).getBuiltOnStr());
     }
 
-     @Test public void taskEquality() throws Exception {
+    @Test public void taskEquality() throws Exception {
         AtomicInteger cnt = new AtomicInteger();
         ScheduleResult result = r.jenkins.getQueue().schedule2(new TestTask(cnt), 0);
         assertTrue(result.isCreated());
@@ -539,8 +539,7 @@ public String getDisplayName() {
         }
     }
     
-     @Test public void cancelInQueue() throws Exception
-    {
+    @Test public void cancelInQueue() throws Exception {
         // parepare an offline slave.
         DumbSlave slave = r.createOnlineSlave();
         assertFalse(slave.toComputer().isOffline());

File: core/src/main/java/hudson/model/ParameterDefinition.java
Patch:
@@ -51,7 +51,7 @@
  *
  * <p>
  * The actual meaning and the purpose of parameters are entirely up to users, so
- * what the concrete parameter implmentation is pluggable. Write subclasses
+ * what the concrete parameter implementation is pluggable. Write subclasses
  * in a plugin and put {@link Extension} on the descriptor to register them.
  *
  * <p>
@@ -82,8 +82,8 @@
  * <h2>Assocaited Views</h2>
  * <h4>config.jelly</h4>
  * <p>
- * {@link ParameterDefinition} class uses <tt>config.jelly</tt> to provide contribute a form
- * fragment in the job configuration screen. Values entered there is fed back to
+ * {@link ParameterDefinition} class uses <tt>config.jelly</tt> to contribute a form
+ * fragment in the job configuration screen. Values entered there are fed back to
  * {@link ParameterDescriptor#newInstance(StaplerRequest, JSONObject)} to create {@link ParameterDefinition}s.
  *
  * <h4>index.jelly</h4>

File: core/src/main/java/hudson/model/ParameterDefinition.java
Patch:
@@ -51,7 +51,7 @@
  *
  * <p>
  * The actual meaning and the purpose of parameters are entirely up to users, so
- * what the concrete parameter implmentation is pluggable. Write subclasses
+ * what the concrete parameter implementation is pluggable. Write subclasses
  * in a plugin and put {@link Extension} on the descriptor to register them.
  *
  * <p>
@@ -82,8 +82,8 @@
  * <h2>Assocaited Views</h2>
  * <h4>config.jelly</h4>
  * <p>
- * {@link ParameterDefinition} class uses <tt>config.jelly</tt> to provide contribute a form
- * fragment in the job configuration screen. Values entered there is fed back to
+ * {@link ParameterDefinition} class uses <tt>config.jelly</tt> to contribute a form
+ * fragment in the job configuration screen. Values entered there are fed back to
  * {@link ParameterDescriptor#newInstance(StaplerRequest, JSONObject)} to create {@link ParameterDefinition}s.
  *
  * <h4>index.jelly</h4>

File: core/src/test/java/jenkins/model/RunIdMigratorTest.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.util.StreamTaskListener;
 import java.io.File;
 import java.nio.charset.Charset;
+import java.util.Date;
 import java.util.Map;
 import java.util.TimeZone;
 import java.util.TreeMap;
@@ -65,7 +66,7 @@ public class RunIdMigratorTest {
         migrator = new RunIdMigrator();
         dir = tmp.getRoot();
     }
-    
+
     @Test public void newJob() throws Exception {
         migrator.created(dir);
         assertEquals("{legacyIds=''}", summarize());
@@ -149,4 +150,4 @@ private static String summarize(File dir) throws Exception {
         return m.toString();
     }
 
-}
\ No newline at end of file
+}

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1451,9 +1451,9 @@ private PollingResult pollWithWorkspace(TaskListener listener, SCM scm, R lb, @N
         // OTOH, if a concurrent build is chosen, the user is willing to create a multiple workspace,
         // so better throughput is achieved over time (modulo the initial cost of creating that many workspaces)
         // by having multiple workspaces
-        WorkspaceList.Lease lease = l.acquire(ws, !concurrentBuild);
         Node node = lb.getBuiltOn();
         Launcher launcher = ws.createLauncher(listener).decorateByEnv(getEnvironment(node,listener));
+        WorkspaceList.Lease lease = l.acquire(ws, !concurrentBuild);
         try {
             listener.getLogger().println("Polling SCM changes on " + node.getSelfLabel().getName());
             LOGGER.fine("Polling SCM changes of " + getName());

File: core/src/main/java/jenkins/security/DefaultConfidentialStore.java
Patch:
@@ -106,7 +106,7 @@ protected byte[] load(ConfidentialKey key) throws IOException {
             byte[] bytes = IOUtils.toByteArray(cis);
             return verifyMagic(bytes);
         } catch (GeneralSecurityException e) {
-            throw new IOException("Failed to persist the key: "+key.getId(),e);
+            throw new IOException("Failed to load the key: "+key.getId(),e);
         } finally {
             IOUtils.closeQuietly(cis);
             IOUtils.closeQuietly(fis);

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -227,7 +227,7 @@ public void perform(Run<?,?> build, FilePath ws, Launcher launcher, TaskListener
                     listenerWarnOrError(listener, Messages.ArtifactArchiver_NoMatchFound(artifacts));
                     String msg = null;
                     try {
-                    	msg = ws.validateAntFileMask(artifacts);
+                    	msg = ws.validateAntFileMask(artifacts, FilePath.VALIDATE_ANT_FILE_MASK_BOUND);
                     } catch (Exception e) {
                     	listenerWarnOrError(listener, e.getMessage());
                     }

File: core/src/main/java/hudson/util/FormFieldValidator.java
Patch:
@@ -378,7 +378,7 @@ protected void check() throws IOException, ServletException {
                     return;
                 }
 
-                String msg = ws.validateAntFileMask(value, 10000);
+                String msg = ws.validateAntFileMask(value, FilePath.VALIDATE_ANT_FILE_MASK_BOUND);
                 if(errorIfNotExist)     error(msg);
                 else                    warning(msg);
             } catch (InterruptedException e) {

File: core/src/main/java/hudson/cli/ListJobsCommand.java
Patch:
@@ -82,7 +82,7 @@ protected int run() throws Exception {
 
         // Print all jobs.
         for (TopLevelItem item : jobs) {
-            stdout.println(item.getDisplayName());
+            stdout.println(item.getName());
         }
 
         return 0;

File: core/src/test/java/jenkins/model/lazy/AbstractLazyLoadRunMapTest.java
Patch:
@@ -332,7 +332,7 @@ public void entrySetSize() {
     @Issue("JENKINS-25655")
     @Test public void entrySetChanges() {
         assertEquals(3, a.entrySet().size());
-        a.put(new Build(7, "D"));
+        a.put(new Build(7));
         assertEquals(4, a.entrySet().size());
     }
 

File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java
Patch:
@@ -746,7 +746,7 @@ public synchronized boolean removeValue(R run) {
 
         entrySet.clearCache();
 
-        return unwrap(old)!=null;
+        return old != null;
     }
 
     /**

File: core/src/main/java/hudson/node_monitors/DiskSpaceMonitorDescriptor.java
Patch:
@@ -70,7 +70,7 @@ public DiskSpace(String path, long size) {
 
         @Override
         public String toString() {
-            return String.valueOf(size);
+            return Messages.DiskSpaceMonitorDescriptor_DiskSpace_FreeSpaceTooLow(getGbLeft(), path);
         }
         
         /**

File: core/src/main/java/jenkins/security/DefaultConfidentialStore.java
Patch:
@@ -106,7 +106,7 @@ protected byte[] load(ConfidentialKey key) throws IOException {
             byte[] bytes = IOUtils.toByteArray(cis);
             return verifyMagic(bytes);
         } catch (GeneralSecurityException e) {
-            throw new IOException("Failed to persist the key: "+key.getId(),e);
+            throw new IOException("Failed to load the key: "+key.getId(),e);
         } finally {
             IOUtils.closeQuietly(cis);
             IOUtils.closeQuietly(fis);

File: core/src/main/java/jenkins/slaves/restarter/JnlpSlaveRestarterInstaller.java
Patch:
@@ -69,7 +69,7 @@ public List<SlaveRestarter> call() throws IOException {
 
                     e.addListener(new EngineListenerAdapter() {
                         @Override
-                        public void onDisconnect() {
+                        public void onReconnect() {
                             try {
                                 for (SlaveRestarter r : restarters) {
                                     try {

File: core/src/main/java/jenkins/slaves/restarter/JnlpSlaveRestarterInstaller.java
Patch:
@@ -69,7 +69,7 @@ public List<SlaveRestarter> call() throws IOException {
 
                     e.addListener(new EngineListenerAdapter() {
                         @Override
-                        public void onDisconnect() {
+                        public void onReconnect() {
                             try {
                                 for (SlaveRestarter r : restarters) {
                                     try {

File: core/src/main/java/jenkins/model/UnlabeledLoadStatistics.java
Patch:
@@ -50,7 +50,7 @@ public int computeIdleExecutors() {
         int r=0;
         for (Computer c : Jenkins.getInstance().getComputers()) {
             Node node = c.getNode();
-            if (node != null && node.getMode() == Mode.NORMAL && (c.isOnline() || c.isConnecting())) {
+            if (node != null && node.getMode() == Mode.NORMAL && (c.isOnline() || c.isConnecting()) && c.isAcceptingTasks()) {
                 r += c.countIdle();
             }
         }

File: core/src/main/java/hudson/model/ChoiceParameterDefinition.java
Patch:
@@ -72,7 +72,7 @@ public StringParameterValue getDefaultParameterValue() {
 
     private StringParameterValue checkValue(StringParameterValue value) {
         if (!choices.contains(value.value))
-            throw new IllegalArgumentException("Illegal choice: " + value.value);
+            throw new IllegalArgumentException("Illegal choice for parameter " + getName() + ": " + value.value);
         return value;
     }
 

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -227,7 +227,7 @@ public void perform(Run<?,?> build, FilePath ws, Launcher launcher, TaskListener
                     listenerWarnOrError(listener, Messages.ArtifactArchiver_NoMatchFound(artifacts));
                     String msg = null;
                     try {
-                    	msg = ws.validateAntFileMask(artifacts);
+                    	msg = ws.validateAntFileMask(artifacts, FilePath.VALIDATE_ANT_FILE_MASK_BOUND);
                     } catch (Exception e) {
                     	listenerWarnOrError(listener, e.getMessage());
                     }

File: core/src/main/java/hudson/util/FormFieldValidator.java
Patch:
@@ -378,7 +378,7 @@ protected void check() throws IOException, ServletException {
                     return;
                 }
 
-                String msg = ws.validateAntFileMask(value, 10000);
+                String msg = ws.validateAntFileMask(value, FilePath.VALIDATE_ANT_FILE_MASK_BOUND);
                 if(errorIfNotExist)     error(msg);
                 else                    warning(msg);
             } catch (InterruptedException e) {

File: test/src/main/java/org/jvnet/hudson/test/WarExploder.java
Patch:
@@ -89,6 +89,7 @@ private static File explode() throws Exception {
 
         // TODO this assumes that the CWD of the Maven process is the plugin ${basedir}, which may not be the case
         File explodeDir = new File("./target/jenkins-for-test").getAbsoluteFile();
+        explodeDir.getParentFile().mkdirs();
         while (new File(explodeDir + ".exploding").isFile()) {
             explodeDir = new File(explodeDir + "x");
         }

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -211,7 +211,9 @@ public void addAction(Action a) {
      */
     public File getLogFile() {
         File dir = new File(Jenkins.getInstance().getRootDir(),"logs/slaves/"+nodeName);
-        dir.mkdirs();
+        if (!dir.exists() && !dir.mkdirs()) {
+            LOGGER.severe("Failed to create slave log directory " + dir.getAbsolutePath());
+        }
         return new File(dir,"slave.log");
     }
 

File: core/src/main/java/hudson/model/Hudson.java
Patch:
@@ -52,6 +52,7 @@
 import java.util.Map;
 
 import static hudson.Util.fixEmpty;
+import javax.annotation.CheckForNull;
 
 public class Hudson extends Jenkins {
 
@@ -70,7 +71,7 @@ public class Hudson extends Jenkins {
     /** @deprecated Here only for compatibility. Use {@link Jenkins#getInstance} instead. */
     @Deprecated
     @CLIResolver
-    public static Hudson getInstance() {
+    public static @CheckForNull Hudson getInstance() {
         return (Hudson)Jenkins.getInstance();
     }
 

File: core/src/main/java/hudson/model/Items.java
Patch:
@@ -381,7 +381,7 @@ public static <I extends AbstractItem & TopLevelItem> I move(I item, DirectlyMod
         FileUtils.moveDirectory(item.getRootDir(), destDir);
         oldParent.remove(item);
         I newItem = destination.add(item, name);
-        newItem.onLoad(destination, name);
+        item.movedTo(destination, newItem, destDir);
         ItemListener.fireLocationChange(newItem, oldFullName);
         return newItem;
     }

File: core/src/main/java/hudson/util/jna/SHELLEXECUTEINFO.java
Patch:
@@ -81,6 +81,6 @@ protected List getFieldOrder() {
         return Arrays.asList("cbSize", "fMask", "hwnd", "lpVerb",
                 "lpFile", "lpParameters", "lpDirectory", "nShow", "hInstApp",
                 "lpIDList", "lpClass", "hkeyClass", "dwHotKey", "hIcon",
-                "hProcess", "SEE_MASK_NOCLOSEPROCESS", "SW_HIDE", "SW_SHOW");
+                "hProcess");
     }
 }

File: core/src/main/java/jenkins/security/admin/AdminWhitelistRule.java
Patch:
@@ -91,7 +91,7 @@ public AdminWhitelistRule() throws IOException, InterruptedException {
     private boolean loadMasterKillSwitchFile() {
         File f = getMasterKillSwitchFile();
         try {
-            if (!f.exists())    return false;
+            if (!f.exists())    return true;
             return Boolean.parseBoolean(FileUtils.readFileToString(f).trim());
         } catch (IOException e) {
             LOGGER.log(WARNING, "Failed to read "+f, e);

File: core/src/main/java/jenkins/security/admin/AdminFilePathFilter.java
Patch:
@@ -29,7 +29,7 @@ public AdminFilePathFilter(AdminWhitelistRule rule) {
 
     @Override
     protected boolean op(String op, File path) throws SecurityException {
-        return rule.filePathRules.checkFileAccess(op,path);
+        return rule.checkFileAccess(op,path);
     }
 
     @Extension

File: core/src/main/java/jenkins/security/admin/AdminWhitelistRule.java
Patch:
@@ -61,12 +61,12 @@ public AdminWhitelistRule() throws IOException, InterruptedException {
                 "filepath-filter.conf");
 
         this.whitelisted = new CallableWhitelistConfig(
-                new File(jenkins.getRootDir(),"secrets/whitelisted-callables.d/local.conf"));
+                new File(jenkins.getRootDir(),"secrets/whitelisted-callables.d/gui.conf"));
         this.rejected = new CallableRejectionConfig(
                 new File(jenkins.getRootDir(),"secrets/rejected-callables.txt"),
                 whitelisted);
         this.filePathRules = new FilePathRuleConfig(
-                new File(jenkins.getRootDir(),"secrets/filepath-filters.d/50-local.conf"));
+                new File(jenkins.getRootDir(),"secrets/filepath-filters.d/50-gui.conf"));
     }
 
     private void placeDefaultRule(File f, String resource) throws IOException, InterruptedException {

File: core/src/main/java/hudson/slaves/NodeProvisioner.java
Patch:
@@ -280,7 +280,7 @@ public static enum StrategyDecision {
     public static abstract class Strategy implements ExtensionPoint {
 
         /**
-         * Called by {@link NodeProvisioner#update()} to applies the strategy to the specified state.
+         * Called by {@link NodeProvisioner#update()} to apply this strategy against the specified state.
          * Any provisioning activities should be recorded by calling
          * {@link hudson.slaves.NodeProvisioner.StrategyState#recordPendingLaunches(java.util.Collection)}
          * This method will be called by a thread that is holding a lock on {@link hudson.slaves.NodeProvisioner}

File: core/src/main/java/hudson/EnvVars.java
Patch:
@@ -23,12 +23,12 @@
  */
 package hudson;
 
-import hudson.remoting.Callable;
 import hudson.remoting.VirtualChannel;
 import hudson.util.CaseInsensitiveComparator;
 import hudson.util.CyclicGraphDetector;
 import hudson.util.CyclicGraphDetector.CycleDetectedException;
 import hudson.util.VariableResolver;
+import jenkins.security.MasterToSlaveCallable;
 
 import java.io.File;
 import java.io.IOException;
@@ -404,7 +404,7 @@ public static EnvVars getRemote(VirtualChannel channel) throws IOException, Inte
         return channel.call(new GetEnvVars());
     }
 
-    private static final class GetEnvVars implements Callable<EnvVars,RuntimeException> {
+    private static final class GetEnvVars extends MasterToSlaveCallable<EnvVars,RuntimeException> {
         public EnvVars call() {
             return new EnvVars(EnvVars.masterEnvVars);
         }

File: core/src/main/java/hudson/cli/ClientAuthenticationCache.java
Patch:
@@ -1,10 +1,10 @@
 package hudson.cli;
 
 import hudson.FilePath;
-import hudson.remoting.Callable;
 import hudson.remoting.Channel;
 import hudson.util.Secret;
 import jenkins.model.Jenkins;
+import jenkins.security.MasterToSlaveCallable;
 import org.acegisecurity.Authentication;
 import org.acegisecurity.AuthenticationException;
 import org.acegisecurity.providers.UsernamePasswordAuthenticationToken;
@@ -39,7 +39,7 @@ public class ClientAuthenticationCache implements Serializable {
     private final Properties props = new Properties();
 
     public ClientAuthenticationCache(Channel channel) throws IOException, InterruptedException {
-        store = (channel==null ? FilePath.localChannel :  channel).call(new Callable<FilePath, IOException>() {
+        store = (channel==null ? FilePath.localChannel :  channel).call(new MasterToSlaveCallable<FilePath, IOException>() {
             public FilePath call() throws IOException {
                 File home = new File(System.getProperty("user.home"));
                 File hudsonHome = new File(home, ".hudson");

File: core/src/main/java/hudson/cli/CommandDuringBuild.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.model.Job;
 import hudson.model.Run;
 import hudson.remoting.Callable;
+import jenkins.security.MasterToSlaveCallable;
 import org.kohsuke.args4j.CmdLineException;
 
 import java.io.IOException;
@@ -84,7 +85,7 @@ protected Run optCurrentlyBuilding() throws CmdLineException {
     /**
      * Gets the environment variables that points to the build being executed.
      */
-    private static final class GetCharacteristicEnvironmentVariables implements Callable<String[],IOException> {
+    private static final class GetCharacteristicEnvironmentVariables extends MasterToSlaveCallable<String[],IOException> {
         public String[] call() throws IOException {
             return new String[] {
                 System.getenv("JOB_NAME"),

File: core/src/main/java/hudson/logging/LogRecorder.java
Patch:
@@ -40,6 +40,7 @@
 import hudson.util.CopyOnWriteList;
 import hudson.util.RingBufferLogHandler;
 import hudson.util.XStream2;
+import jenkins.security.MasterToSlaveCallable;
 import net.sf.json.JSONObject;
 import org.kohsuke.stapler.*;
 import org.kohsuke.stapler.interceptor.RequirePOST;
@@ -207,7 +208,7 @@ public void disable() {
 
     }
 
-    private static final class SetLevel implements Callable<Void,Error> {
+    private static final class SetLevel extends MasterToSlaveCallable<Void,Error> {
         /** known loggers (kept per slave), to avoid GC */
         @SuppressWarnings("MismatchedQueryAndUpdateOfCollection") private static final Set<Logger> loggers = new HashSet<Logger>();
         private final String name;

File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java
Patch:
@@ -25,7 +25,6 @@
 
 import hudson.FilePath;
 import hudson.Util;
-import hudson.remoting.Callable;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -43,6 +42,7 @@
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletResponse;
 import jenkins.model.Jenkins;
+import jenkins.security.MasterToSlaveCallable;
 import jenkins.util.VirtualFile;
 import org.apache.commons.io.IOUtils;
 import org.apache.tools.zip.ZipEntry;
@@ -461,7 +461,7 @@ private int dirRank(VirtualFile f) {
         }
     }
 
-    private static final class BuildChildPaths implements Callable<List<List<Path>>,IOException> {
+    private static final class BuildChildPaths extends MasterToSlaveCallable<List<List<Path>>,IOException> {
         private final VirtualFile cur;
         private final Locale locale;
         BuildChildPaths(VirtualFile cur, Locale locale) {

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -26,7 +26,6 @@
 import hudson.Util;
 import hudson.XmlFile;
 import hudson.model.listeners.ItemListener;
-import hudson.remoting.Callable;
 import hudson.security.AccessControlled;
 import hudson.util.CopyOnWriteMap;
 import hudson.util.Function1;
@@ -44,6 +43,7 @@
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import jenkins.security.NotReallyRoleSensitiveCallable;
 
 /**
  * Defines a bunch of static methods to be used as a "mix-in" for {@link ItemGroup}
@@ -222,7 +222,7 @@ public synchronized <T extends TopLevelItem> T copy(T src, String name) throws I
 
         // reload from the new config
         final File rootDir = result.getRootDir();
-        result = Items.whileUpdatingByXml(new Callable<T,IOException>() {
+        result = Items.whileUpdatingByXml(new NotReallyRoleSensitiveCallable<T,IOException>() {
             @Override public T call() throws IOException {
                 return (T) Items.load(parent, rootDir);
             }
@@ -253,7 +253,7 @@ public synchronized TopLevelItem createProjectFromXML(String name, InputStream x
             IOUtils.copy(xml,configXml);
 
             // load it
-            TopLevelItem result = Items.whileUpdatingByXml(new Callable<TopLevelItem,IOException>() {
+            TopLevelItem result = Items.whileUpdatingByXml(new NotReallyRoleSensitiveCallable<TopLevelItem,IOException>() {
                 @Override public TopLevelItem call() throws IOException {
                     return (TopLevelItem) Items.load(parent, dir);
                 }

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -59,6 +59,7 @@
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
 import jenkins.model.Jenkins;
+import jenkins.security.MasterToSlaveCallable;
 import jenkins.slaves.WorkspaceLocator;
 
 import org.apache.commons.io.IOUtils;
@@ -451,7 +452,7 @@ public FormValidation doCheckRemoteFS(@QueryParameter String value) throws IOExc
      *     <li>When it's read on this side as a return value, it morphs itself into {@link ClockDifference}.
      * </ol>
      */
-    private static final class GetClockDifference1 implements Callable<ClockDifference,IOException> {
+    private static final class GetClockDifference1 extends MasterToSlaveCallable<ClockDifference,IOException> {
         public ClockDifference call() {
             // this method must be being invoked locally, which means the clock is in sync
             return new ClockDifference(0);
@@ -464,7 +465,7 @@ private Object writeReplace() {
         private static final long serialVersionUID = 1L;
     }
 
-    private static final class GetClockDifference2 implements Callable<GetClockDifference3,IOException> {
+    private static final class GetClockDifference2 extends MasterToSlaveCallable<GetClockDifference3,IOException> {
         /**
          * Capture the time on the master when this object is sent to remote, which is when
          * {@link GetClockDifference1#writeReplace()} is run.

File: core/src/main/java/hudson/node_monitors/ArchitectureMonitor.java
Patch:
@@ -26,6 +26,7 @@
 import hudson.model.Computer;
 import hudson.remoting.Callable;
 import hudson.Extension;
+import jenkins.security.MasterToSlaveCallable;
 import net.sf.json.JSONObject;
 import org.kohsuke.stapler.StaplerRequest;
 
@@ -56,7 +57,7 @@ public NodeMonitor newInstance(StaplerRequest req, JSONObject formData) throws F
     /**
      * Obtains the string that represents the architecture.
      */
-    private static class GetArchTask implements Callable<String,IOException> {
+    private static class GetArchTask extends MasterToSlaveCallable<String,IOException> {
         public String call() {
             String os = System.getProperty("os.name");
             String arch = System.getProperty("os.arch");

File: core/src/main/java/hudson/node_monitors/DiskSpaceMonitorDescriptor.java
Patch:
@@ -23,8 +23,8 @@
  */
 package hudson.node_monitors;
 
-import hudson.FilePath.FileCallable;
 import hudson.Functions;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.remoting.VirtualChannel;
 import hudson.Util;
 import hudson.slaves.OfflineCause;
@@ -154,7 +154,7 @@ public static DiskSpace parse(String size) throws ParseException {
         private static final long serialVersionUID = 2L;
     }
 
-    protected static final class GetUsableSpace implements FileCallable<DiskSpace> {
+    protected static final class GetUsableSpace extends MasterToSlaveFileCallable<DiskSpace> {
         public GetUsableSpace() {}
         public DiskSpace invoke(File f, VirtualChannel channel) throws IOException {
                 long s = f.getUsableSpace();

File: core/src/main/java/hudson/node_monitors/ResponseTimeMonitor.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.slaves.OfflineCause;
 import hudson.model.Computer;
 import hudson.remoting.Callable;
+import jenkins.security.MasterToSlaveCallable;
 import net.sf.json.JSONObject;
 import org.kohsuke.stapler.StaplerRequest;
 
@@ -85,7 +86,7 @@ public NodeMonitor newInstance(StaplerRequest req, JSONObject formData) throws F
         }
     };
 
-    private static final class Step1 implements Callable<Data,IOException> {
+    private static final class Step1 extends MasterToSlaveCallable<Data,IOException> {
         private Data cur;
 
         private Step1(Data cur) {
@@ -104,7 +105,7 @@ private Object writeReplace() {
         private static final long serialVersionUID = 1L;
     }
 
-    private static final class Step2 implements Callable<Step3,IOException> {
+    private static final class Step2 extends MasterToSlaveCallable<Step3,IOException> {
         private final Data cur;
         private final long start = System.currentTimeMillis();
 

File: core/src/main/java/hudson/node_monitors/SwapSpaceMonitor.java
Patch:
@@ -28,7 +28,7 @@
 import hudson.Functions;
 import hudson.model.Computer;
 import jenkins.model.Jenkins;
-import hudson.remoting.Callable;
+import jenkins.security.MasterToSlaveCallable;
 import net.sf.json.JSONObject;
 import org.jvnet.hudson.MemoryMonitor;
 import org.jvnet.hudson.MemoryUsage;
@@ -100,7 +100,7 @@ public NodeMonitor newInstance(StaplerRequest req, JSONObject formData) throws F
     /**
      * Obtains the string that represents the architecture.
      */
-    private static class MonitorTask implements Callable<MemoryUsage,IOException> {
+    private static class MonitorTask extends MasterToSlaveCallable<MemoryUsage,IOException> {
         public MemoryUsage call() throws IOException {
             MemoryMonitor mm;
             try {

File: core/src/main/java/hudson/node_monitors/TemporarySpaceMonitor.java
Patch:
@@ -25,7 +25,7 @@
 
 import hudson.Extension;
 import hudson.FilePath;
-import hudson.FilePath.FileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.model.Computer;
 import hudson.model.Node;
 import hudson.remoting.Callable;
@@ -83,7 +83,7 @@ public static DiskSpaceMonitorDescriptor install() {
         return DESCRIPTOR;
     }
     
-    protected static final class GetTempSpace implements FileCallable<DiskSpace> {
+    protected static final class GetTempSpace extends MasterToSlaveFileCallable<DiskSpace> {
         public DiskSpace invoke(File f, VirtualChannel channel) throws IOException {
                 // if the disk is really filled up we can't even create a single file,
                 // so calling File.createTempFile and figuring out the directory won't reliably work.

File: core/src/main/java/hudson/os/solaris/ZFSInstaller.java
Patch:
@@ -38,6 +38,7 @@
 import hudson.util.StreamTaskListener;
 import static hudson.util.jna.GNUCLibrary.*;
 
+import jenkins.security.MasterToSlaveCallable;
 import org.apache.commons.io.output.ByteArrayOutputStream;
 import org.jvnet.libpam.impl.CLibrary.passwd;
 import org.jvnet.solaris.libzfs.ACLBuilder;
@@ -167,7 +168,7 @@ private String createZfsFileSystem(final TaskListener listener, String rootUsern
 
         // this is the actual creation of the file system.
         // return true indicating a success
-        return SU.execute(listener, rootUsername, rootPassword, new Callable<String,IOException>() {
+        return SU.execute(listener, rootUsername, rootPassword, new MasterToSlaveCallable<String,IOException>() {
             private static final long serialVersionUID = 7731167233498214301L;
 
             public String call() throws IOException {

File: core/src/main/java/hudson/security/AbstractPasswordBasedSecurityRealm.java
Patch:
@@ -10,6 +10,7 @@
 import jenkins.model.Jenkins;
 import jenkins.security.ImpersonatingUserDetailsService;
 import jenkins.security.SecurityListener;
+import jenkins.security.MasterToSlaveCallable;
 import org.acegisecurity.Authentication;
 import org.acegisecurity.AuthenticationException;
 import org.acegisecurity.AuthenticationManager;
@@ -152,7 +153,7 @@ protected UserDetails retrieveUser(String username, UsernamePasswordAuthenticati
     /**
      * Asks for the password.
      */
-    private static class InteractivelyAskForPassword implements Callable<String,IOException> {
+    private static class InteractivelyAskForPassword extends MasterToSlaveCallable<String,IOException> {
         public String call() throws IOException {
             Console console = System.console();
             if (console == null)    return null;    // no terminal

File: core/src/main/java/hudson/slaves/ChannelPinger.java
Patch:
@@ -28,9 +28,9 @@
 import hudson.model.Computer;
 import hudson.model.Slave;
 import hudson.model.TaskListener;
-import hudson.remoting.Callable;
 import hudson.remoting.Channel;
 import hudson.remoting.PingThread;
+import jenkins.security.MasterToSlaveCallable;
 
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -85,7 +85,7 @@ public void preOnline(Computer c, Channel channel, FilePath root, TaskListener l
         setUpPingForChannel(channel, pingInterval);
     }
 
-    private static class SetUpRemotePing implements Callable<Void, IOException> {
+    private static class SetUpRemotePing extends MasterToSlaveCallable<Void, IOException> {
         private static final long serialVersionUID = -2702219700841759872L;
         private int pingInterval;
         public SetUpRemotePing(int pingInterval) {

File: core/src/main/java/hudson/slaves/ConnectionActivityMonitor.java
Patch:
@@ -30,8 +30,8 @@
 import hudson.util.TimeUnit2;
 import hudson.remoting.VirtualChannel;
 import hudson.remoting.Channel;
-import hudson.remoting.Callable;
 import hudson.Extension;
+import jenkins.security.SlaveToMasterCallable;
 
 import java.io.IOException;
 import java.util.logging.Logger;
@@ -102,7 +102,7 @@ public long getRecurrencePeriod() {
     public boolean enabled = Boolean.getBoolean(ConnectionActivityMonitor.class.getName()+".enabled");
 
     private static final PingCommand PING_COMMAND = new PingCommand();
-    private static final class PingCommand implements Callable<Void,RuntimeException> {
+    private static final class PingCommand extends SlaveToMasterCallable<Void,RuntimeException> {
         public Void call() throws RuntimeException {
             return null;
         }

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.tasks;
 
 import hudson.FilePath;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.Launcher;
 import hudson.Util;
 import hudson.Extension;
@@ -247,7 +248,7 @@ public void perform(Run<?,?> build, FilePath ws, Launcher launcher, TaskListener
         }
     }
 
-    private static final class ListFiles implements FilePath.FileCallable<Map<String,String>> {
+    private static final class ListFiles extends MasterToSlaveFileCallable<Map<String,String>> {
         private static final long serialVersionUID = 1;
         private final String includes, excludes;
         private final boolean defaultExcludes;

File: core/src/main/java/hudson/tasks/Fingerprinter.java
Patch:
@@ -27,7 +27,7 @@
 import hudson.EnvVars;
 import hudson.Extension;
 import hudson.FilePath;
-import hudson.FilePath.FileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.Launcher;
 import hudson.Util;
 import hudson.model.AbstractBuild;
@@ -209,7 +209,7 @@ Fingerprint addRecord(Run build) throws IOException {
 
         final long buildTimestamp = build.getTimeInMillis();
 
-        List<Record> records = ws.act(new FileCallable<List<Record>>() {
+        List<Record> records = ws.act(new MasterToSlaveFileCallable<List<Record>>() {
             public List<Record> invoke(File baseDir, VirtualChannel channel) throws IOException {
                 List<Record> results = new ArrayList<Record>();
 

File: core/src/main/java/hudson/tasks/Shell.java
Patch:
@@ -28,12 +28,12 @@
 import hudson.Util;
 import hudson.Extension;
 import hudson.model.AbstractProject;
-import hudson.remoting.Callable;
 import hudson.remoting.VirtualChannel;
 import hudson.util.FormValidation;
 import java.io.IOException;
 import java.io.ObjectStreamException;
 import hudson.util.LineEndingConversion;
+import jenkins.security.MasterToSlaveCallable;
 import net.sf.json.JSONObject;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.StaplerRequest;
@@ -172,7 +172,7 @@ public FormValidation doCheckShell(@QueryParameter String value) {
             return FormValidation.validateExecutable(value); 
         }
         
-        private static final class Shellinterpreter implements Callable<String, IOException> {
+        private static final class Shellinterpreter extends MasterToSlaveCallable<String, IOException> {
 
             private static final long serialVersionUID = 1L;
 

File: core/src/main/java/hudson/tools/ZipExtractionInstaller.java
Patch:
@@ -26,7 +26,7 @@
 
 import hudson.Extension;
 import hudson.FilePath;
-import hudson.FilePath.FileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.ProxyConfiguration;
 import hudson.Util;
 import hudson.Functions;
@@ -116,7 +116,7 @@ public FormValidation doCheckUrl(@QueryParameter String value) {
      * Sets execute permission on all files, since unzip etc. might not do this.
      * Hackish, is there a better way?
      */
-    static class ChmodRecAPlusX implements FileCallable<Void> {
+    static class ChmodRecAPlusX extends MasterToSlaveFileCallable<Void> {
         private static final long serialVersionUID = 1L;
         public Void invoke(File d, VirtualChannel channel) throws IOException {
             if(!Functions.isWindows())

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -30,13 +30,13 @@
 import hudson.FilePath;
 import hudson.Util;
 import jenkins.model.Jenkins;
-import hudson.remoting.Callable;
 import hudson.remoting.Channel;
 import hudson.remoting.VirtualChannel;
 import hudson.slaves.SlaveComputer;
 import hudson.util.ProcessTree.OSProcess;
 import hudson.util.ProcessTreeRemoting.IOSProcess;
 import hudson.util.ProcessTreeRemoting.IProcessTree;
+import jenkins.security.SlaveToMasterCallable;
 import org.jvnet.winp.WinProcess;
 import org.jvnet.winp.WinpException;
 
@@ -150,7 +150,7 @@ public void killAll(Process proc, Map<String, String> modelEnvVars) throws Inter
             try {
                 VirtualChannel channelToMaster = SlaveComputer.getChannelToMaster();
                 if (channelToMaster!=null) {
-                    killers = channelToMaster.call(new Callable<List<ProcessKiller>, IOException>() {
+                    killers = channelToMaster.call(new SlaveToMasterCallable<List<ProcessKiller>, IOException>() {
                         public List<ProcessKiller> call() throws IOException {
                             return new ArrayList<ProcessKiller>(ProcessKiller.all());
                         }

File: core/src/main/java/hudson/util/io/ParserConfigurator.java
Patch:
@@ -25,9 +25,9 @@
  
 import hudson.ExtensionList;
 import hudson.ExtensionPoint;
-import hudson.remoting.Callable;
 import hudson.remoting.Channel;
 import jenkins.model.Jenkins;
+import jenkins.security.SlaveToMasterCallable;
 import org.dom4j.io.SAXReader;
 
 import java.io.IOException;
@@ -78,7 +78,7 @@ public static void applyConfiguration(SAXReader reader, Object context) throws I
         if (Jenkins.getInstance()==null) {
             Channel ch = Channel.current();
             if (ch!=null)
-                all = ch.call(new Callable<Collection<ParserConfigurator>, IOException>() {
+                all = ch.call(new SlaveToMasterCallable<Collection<ParserConfigurator>, IOException>() {
 
                     private static final long serialVersionUID = -2178106894481500733L;
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -196,6 +196,7 @@
 import jenkins.security.ConfidentialKey;
 import jenkins.security.ConfidentialStore;
 import jenkins.security.SecurityListener;
+import jenkins.security.MasterToSlaveCallable;
 import jenkins.slaves.WorkspaceLocator;
 import jenkins.util.Timer;
 import jenkins.util.io.FileBoolean;
@@ -2034,7 +2035,7 @@ public ClockDifference getClockDifference() {
 
     @Override
     public Callable<ClockDifference, IOException> getClockDifferenceCallable() {
-        return new Callable<ClockDifference, IOException>() {
+        return new MasterToSlaveCallable<ClockDifference, IOException>() {
             public ClockDifference call() throws IOException {
                 return new ClockDifference(0);
             }

File: core/src/main/java/jenkins/slaves/StandardOutputSwapper.java
Patch:
@@ -4,11 +4,11 @@
 import hudson.FilePath;
 import hudson.model.Computer;
 import hudson.model.TaskListener;
-import hudson.remoting.Callable;
 import hudson.remoting.Channel;
 import hudson.remoting.StandardOutputStream;
 import hudson.slaves.ComputerListener;
 import hudson.util.jna.GNUCLibrary;
+import jenkins.security.MasterToSlaveCallable;
 
 import java.io.File;
 import java.io.FileDescriptor;
@@ -35,7 +35,7 @@ public void preOnline(Computer c, Channel channel, FilePath root, TaskListener l
         }
     }
 
-    private static final class ChannelSwapper implements Callable<Boolean,Exception> {
+    private static final class ChannelSwapper extends MasterToSlaveCallable<Boolean,Exception> {
         public Boolean call() throws Exception {
             if (File.pathSeparatorChar==';')    return false;   // Windows
             

File: core/src/main/java/jenkins/slaves/restarter/JnlpSlaveRestarterInstaller.java
Patch:
@@ -3,7 +3,6 @@
 import hudson.Extension;
 import hudson.model.Computer;
 import hudson.model.TaskListener;
-import hudson.remoting.Callable;
 import hudson.remoting.Engine;
 import hudson.remoting.EngineListener;
 import hudson.remoting.EngineListenerAdapter;
@@ -19,6 +18,7 @@
 import java.util.logging.Logger;
 
 import static java.util.logging.Level.*;
+import jenkins.security.MasterToSlaveCallable;
 
 /**
  * Actual slave restart logic.
@@ -49,7 +49,7 @@ private void install(Computer c, TaskListener listener) {
             VirtualChannel ch = c.getChannel();
             if (ch==null) return;  // defensive check
 
-            List<SlaveRestarter> effective = ch.call(new Callable<List<SlaveRestarter>, IOException>() {
+            List<SlaveRestarter> effective = ch.call(new MasterToSlaveCallable<List<SlaveRestarter>, IOException>() {
                 public List<SlaveRestarter> call() throws IOException {
                     Engine e = Engine.current();
                     if (e == null) return null;    // not running under Engine

File: core/src/test/java/hudson/LauncherTest.java
Patch:
@@ -26,9 +26,10 @@
 
 import hudson.model.StreamBuildListener;
 import hudson.model.TaskListener;
-import hudson.remoting.Callable;
 import hudson.util.ProcessTree;
 import hudson.util.StreamTaskListener;
+import hudson.remoting.Callable;
+import jenkins.security.MasterToSlaveCallable;
 import org.apache.commons.io.FileUtils;
 import org.jvnet.hudson.test.Bug;
 
@@ -73,7 +74,7 @@ public void testRemoteKill() throws Exception {
         }
     }
 
-    private static final Callable<Object,RuntimeException> NOOP = new Callable<Object,RuntimeException>() {
+    private static final Callable<Object,RuntimeException> NOOP = new MasterToSlaveCallable<Object,RuntimeException>() {
         public Object call() throws RuntimeException {
             return null;
         }

File: core/src/test/java/hudson/os/SUTester.java
Patch:
@@ -2,6 +2,7 @@
 
 import hudson.remoting.Callable;
 import hudson.util.StreamTaskListener;
+import jenkins.security.MasterToSlaveCallable;
 
 import java.io.FileOutputStream;
 
@@ -10,7 +11,7 @@
  */
 public class SUTester {
     public static void main(String[] args) throws Throwable {
-        SU.execute(StreamTaskListener.fromStdout(),"kohsuke","bogus",new Callable<Object, Throwable>() {
+        SU.execute(StreamTaskListener.fromStdout(),"kohsuke","bogus",new MasterToSlaveCallable<Object, Throwable>() {
             public Object call() throws Throwable {
                 System.out.println("Touching /tmp/x");
                 new FileOutputStream("/tmp/x").close();

File: core/src/test/java/hudson/util/ProcessTreeTest.java
Patch:
@@ -5,6 +5,7 @@
 import hudson.remoting.VirtualChannel;
 import hudson.util.ProcessTree.OSProcess;
 import hudson.util.ProcessTree.ProcessCallable;
+import jenkins.security.MasterToSlaveCallable;
 
 import java.io.IOException;
 import java.io.Serializable;
@@ -39,7 +40,7 @@ public void testRemoting() throws Exception {
         t.p.act(new ProcessCallableImpl());
     }
 
-    private static class MyCallable implements Callable<Tag, IOException>, Serializable {
+    private static class MyCallable extends MasterToSlaveCallable<Tag, IOException> implements Serializable {
         public Tag call() throws IOException {
             Tag t = new Tag();
             t.tree = ProcessTree.get();

File: core/src/test/java/hudson/util/io/ReopenableRotatingFileOutputStreamTest.java
Patch:
@@ -11,7 +11,7 @@
  * @author Kohsuke Kawaguchi
  */
 public class ReopenableRotatingFileOutputStreamTest extends TestCase {
-    public void testRotation() throws IOException {
+    public void testRotation() throws IOException, InterruptedException {
         File base = File.createTempFile("test", "log");
         ReopenableRotatingFileOutputStream os = new ReopenableRotatingFileOutputStream(base,3);
         PrintWriter w = new PrintWriter(os,true);

File: test/src/test/java/hudson/ProcTest.java
Patch:
@@ -3,13 +3,12 @@
 import hudson.Launcher.LocalLauncher;
 import hudson.Launcher.RemoteLauncher;
 import hudson.Proc.RemoteProc;
-import hudson.remoting.Callable;
-import hudson.remoting.Future;
 import hudson.remoting.Pipe;
 import hudson.remoting.VirtualChannel;
 import hudson.slaves.DumbSlave;
 import hudson.util.IOUtils;
 import hudson.util.StreamTaskListener;
+import jenkins.security.MasterToSlaveCallable;
 import org.jvnet.hudson.test.Bug;
 import org.jvnet.hudson.test.HudsonTestCase;
 
@@ -70,7 +69,7 @@ private VirtualChannel createSlaveChannel() throws Exception {
         return ch;
     }
 
-    private static class ChannelFiller implements Callable<Void,IOException> {
+    private static class ChannelFiller extends MasterToSlaveCallable<Void,IOException> {
         private final OutputStream o;
 
         private ChannelFiller(OutputStream o) {

File: test/src/test/java/hudson/logging/LogRecorderManagerTest.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.logging;
 
+import jenkins.security.MasterToSlaveCallable;
 import org.jvnet.hudson.test.Url;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
 import com.gargoylesoftware.htmlunit.html.HtmlForm;
@@ -109,7 +110,7 @@ public class LogRecorderManagerTest {
         assertFalse(text, text.contains("msg #4"));
     }
 
-    private static final class Log implements Callable<Boolean,Error> {
+    private static final class Log extends MasterToSlaveCallable<Boolean,Error> {
         private final Level level;
         private final String logger;
         private final String message;

File: test/src/test/java/hudson/model/WorkspaceCleanupThreadTest.java
Patch:
@@ -25,7 +25,6 @@
 package hudson.model;
 
 import hudson.FilePath;
-import hudson.FilePath.FileCallable;
 import hudson.remoting.VirtualChannel;
 import hudson.slaves.DumbSlave;
 import hudson.util.StreamTaskListener;
@@ -35,6 +34,7 @@
 import java.util.logging.Handler;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import jenkins.MasterToSlaveFileCallable;
 import static org.junit.Assert.*;
 import org.junit.Assume;
 import org.junit.BeforeClass;
@@ -145,7 +145,7 @@ public class WorkspaceCleanupThreadTest {
         assertTrue(ws4.exists());
     }
 
-    private static final class Detouch implements FileCallable<Void> {
+    private static final class Detouch extends MasterToSlaveFileCallable<Void> {
         @Override public Void invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {
             Assume.assumeTrue("failed to reset lastModified on " + f, f.setLastModified(0));
             return null;

File: test/src/test/java/hudson/slaves/JNLPLauncherTest.java
Patch:
@@ -35,6 +35,7 @@
 import hudson.remoting.Which;
 import hudson.util.ArgumentListBuilder;
 
+import jenkins.security.SlaveToMasterCallable;
 import org.jvnet.hudson.test.HudsonTestCase;
 import org.jvnet.hudson.test.TestExtension;
 
@@ -154,7 +155,7 @@ private Computer addTestSlave() throws Exception {
         return c;
     }
 
-    private static class NoopTask implements Callable<String,RuntimeException> {
+    private static class NoopTask extends SlaveToMasterCallable<String,RuntimeException> {
         public String call() {
             return "done";
         }

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -943,7 +943,7 @@ private <T> T act(final FileCallable<T> callable, ClassLoader cl) throws IOExcep
                 throw e;    // pass through so that the caller can catch it as AbortException
             } catch (IOException e) {
                 // wrap it into a new IOException so that we get the caller's stack trace as well.
-                throw new IOException2("remote file operation failed: "+remote+" at "+channel,e);
+                throw new IOException("remote file operation failed: " + remote + " at " + channel + ": " + e, e);
             }
         } else {
             // the file is on the local machine.

File: core/src/main/java/hudson/model/FileParameterValue.java
Patch:
@@ -140,7 +140,7 @@ public BuildWrapper createBuildWrapper(AbstractBuild<?,?> build) {
         return new BuildWrapper() {
             @Override
             public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {
-            	if (!StringUtils.isEmpty(location)) {
+            	if (!StringUtils.isEmpty(location) && !StringUtils.isEmpty(file.getName())) {
             	    listener.getLogger().println("Copying file to "+location);
                     FilePath locationFilePath = build.getWorkspace().child(location);
                     locationFilePath.getParent().mkdirs();

File: core/src/main/java/hudson/model/FileParameterValue.java
Patch:
@@ -138,7 +138,7 @@ public BuildWrapper createBuildWrapper(AbstractBuild<?,?> build) {
         return new BuildWrapper() {
             @Override
             public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {
-            	if (!StringUtils.isEmpty(location)) {
+            	if (!StringUtils.isEmpty(location) && !StringUtils.isEmpty(file.getName())) {
             	    listener.getLogger().println("Copying file to "+location);
                     FilePath locationFilePath = build.getWorkspace().child(location);
                     locationFilePath.getParent().mkdirs();

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2949,9 +2949,10 @@ public HttpRedirect doQuietDown(
             isQuietingDown = true;
         }
         if (block) {
-            if (timeout > 0) timeout += System.currentTimeMillis();
+            long waitUntil = timeout;
+            if (timeout > 0) waitUntil += System.currentTimeMillis();
             while (isQuietingDown
-                   && (timeout <= 0 || System.currentTimeMillis() < timeout)
+                   && (timeout <= 0 || System.currentTimeMillis() < waitUntil)
                    && !RestartListener.isAllReady()) {
                 Thread.sleep(1000);
             }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2949,9 +2949,10 @@ public HttpRedirect doQuietDown(
             isQuietingDown = true;
         }
         if (block) {
-            if (timeout > 0) timeout += System.currentTimeMillis();
+            long waitUntil = timeout;
+            if (timeout > 0) waitUntil += System.currentTimeMillis();
             while (isQuietingDown
-                   && (timeout <= 0 || System.currentTimeMillis() < timeout)
+                   && (timeout <= 0 || System.currentTimeMillis() < waitUntil)
                    && !RestartListener.isAllReady()) {
                 Thread.sleep(1000);
             }

File: core/src/main/java/hudson/Launcher.java
Patch:
@@ -816,7 +816,7 @@ public Channel launchChannel(OutputStream out, ProcessBuilder pb) throws IOExcep
                  * Kill the process when the channel is severed.
                  */
                 @Override
-                protected synchronized void terminate(IOException e) {
+                public synchronized void terminate(IOException e) {
                     super.terminate(e);
                     ProcessTree pt = ProcessTree.get();
                     try {

File: core/src/main/java/hudson/slaves/Channels.java
Patch:
@@ -73,7 +73,7 @@ public static Channel forProcess(String name, ExecutorService execService, Input
              * Kill the process when the channel is severed.
              */
             @Override
-            protected synchronized void terminate(IOException e) {
+            public synchronized void terminate(IOException e) {
                 super.terminate(e);
                 try {
                     proc.kill();
@@ -109,7 +109,7 @@ public static Channel forProcess(String name, ExecutorService execService, final
              * Kill the process when the channel is severed.
              */
             @Override
-            protected synchronized void terminate(IOException e) {
+            public synchronized void terminate(IOException e) {
                 super.terminate(e);
                 proc.destroy();
                 // the stderr copier should exit by itself

File: test/src/test/java/hudson/model/WorkspaceCleanupThreadTest.java
Patch:
@@ -25,7 +25,6 @@
 package hudson.model;
 
 import hudson.FilePath;
-import hudson.FilePath.FileCallable;
 import hudson.remoting.VirtualChannel;
 import hudson.slaves.DumbSlave;
 import hudson.util.StreamTaskListener;
@@ -35,6 +34,7 @@
 import java.util.logging.Handler;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import jenkins.MasterToSlaveFileCallable;
 import static org.junit.Assert.*;
 import org.junit.Assume;
 import org.junit.BeforeClass;
@@ -145,7 +145,7 @@ public class WorkspaceCleanupThreadTest {
         assertTrue(ws4.exists());
     }
 
-    private static final class Detouch implements FileCallable<Void> {
+    private static final class Detouch extends MasterToSlaveFileCallable<Void> {
         @Override public Void invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {
             Assume.assumeTrue("failed to reset lastModified on " + f, f.setLastModified(0));
             return null;

File: core/src/main/java/hudson/EnvVars.java
Patch:
@@ -23,12 +23,12 @@
  */
 package hudson;
 
-import hudson.remoting.Callable;
 import hudson.remoting.VirtualChannel;
 import hudson.util.CaseInsensitiveComparator;
 import hudson.util.CyclicGraphDetector;
 import hudson.util.CyclicGraphDetector.CycleDetectedException;
 import hudson.util.VariableResolver;
+import jenkins.security.MasterToSlaveCallable;
 
 import java.io.File;
 import java.io.IOException;
@@ -404,7 +404,7 @@ public static EnvVars getRemote(VirtualChannel channel) throws IOException, Inte
         return channel.call(new GetEnvVars());
     }
 
-    private static final class GetEnvVars implements Callable<EnvVars,RuntimeException> {
+    private static final class GetEnvVars extends MasterToSlaveCallable<EnvVars,RuntimeException> {
         public EnvVars call() {
             return new EnvVars(EnvVars.masterEnvVars);
         }

File: core/src/main/java/hudson/cli/ClientAuthenticationCache.java
Patch:
@@ -1,10 +1,10 @@
 package hudson.cli;
 
 import hudson.FilePath;
-import hudson.remoting.Callable;
 import hudson.remoting.Channel;
 import hudson.util.Secret;
 import jenkins.model.Jenkins;
+import jenkins.security.MasterToSlaveCallable;
 import org.acegisecurity.Authentication;
 import org.acegisecurity.AuthenticationException;
 import org.acegisecurity.providers.UsernamePasswordAuthenticationToken;
@@ -39,7 +39,7 @@ public class ClientAuthenticationCache implements Serializable {
     private final Properties props = new Properties();
 
     public ClientAuthenticationCache(Channel channel) throws IOException, InterruptedException {
-        store = (channel==null ? FilePath.localChannel :  channel).call(new Callable<FilePath, IOException>() {
+        store = (channel==null ? FilePath.localChannel :  channel).call(new MasterToSlaveCallable<FilePath, IOException>() {
             public FilePath call() throws IOException {
                 File home = new File(System.getProperty("user.home"));
                 File hudsonHome = new File(home, ".hudson");

File: core/src/main/java/hudson/cli/CommandDuringBuild.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.model.Job;
 import hudson.model.Run;
 import hudson.remoting.Callable;
+import jenkins.security.MasterToSlaveCallable;
 import org.kohsuke.args4j.CmdLineException;
 
 import java.io.IOException;
@@ -84,7 +85,7 @@ protected Run optCurrentlyBuilding() throws CmdLineException {
     /**
      * Gets the environment variables that points to the build being executed.
      */
-    private static final class GetCharacteristicEnvironmentVariables implements Callable<String[],IOException> {
+    private static final class GetCharacteristicEnvironmentVariables extends MasterToSlaveCallable<String[],IOException> {
         public String[] call() throws IOException {
             return new String[] {
                 System.getenv("JOB_NAME"),

File: core/src/main/java/hudson/logging/LogRecorder.java
Patch:
@@ -40,6 +40,7 @@
 import hudson.util.CopyOnWriteList;
 import hudson.util.RingBufferLogHandler;
 import hudson.util.XStream2;
+import jenkins.security.MasterToSlaveCallable;
 import net.sf.json.JSONObject;
 import org.kohsuke.stapler.*;
 import org.kohsuke.stapler.interceptor.RequirePOST;
@@ -207,7 +208,7 @@ public void disable() {
 
     }
 
-    private static final class SetLevel implements Callable<Void,Error> {
+    private static final class SetLevel extends MasterToSlaveCallable<Void,Error> {
         /** known loggers (kept per slave), to avoid GC */
         @SuppressWarnings("MismatchedQueryAndUpdateOfCollection") private static final Set<Logger> loggers = new HashSet<Logger>();
         private final String name;

File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java
Patch:
@@ -25,7 +25,6 @@
 
 import hudson.FilePath;
 import hudson.Util;
-import hudson.remoting.Callable;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -43,6 +42,7 @@
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletResponse;
 import jenkins.model.Jenkins;
+import jenkins.security.MasterToSlaveCallable;
 import jenkins.util.VirtualFile;
 import org.apache.commons.io.IOUtils;
 import org.apache.tools.zip.ZipEntry;
@@ -461,7 +461,7 @@ private int dirRank(VirtualFile f) {
         }
     }
 
-    private static final class BuildChildPaths implements Callable<List<List<Path>>,IOException> {
+    private static final class BuildChildPaths extends MasterToSlaveCallable<List<List<Path>>,IOException> {
         private final VirtualFile cur;
         private final Locale locale;
         BuildChildPaths(VirtualFile cur, Locale locale) {

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -26,7 +26,6 @@
 import hudson.Util;
 import hudson.XmlFile;
 import hudson.model.listeners.ItemListener;
-import hudson.remoting.Callable;
 import hudson.security.AccessControlled;
 import hudson.util.CopyOnWriteMap;
 import hudson.util.Function1;
@@ -44,6 +43,7 @@
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import jenkins.security.NotReallyRoleSensitiveCallable;
 
 /**
  * Defines a bunch of static methods to be used as a "mix-in" for {@link ItemGroup}
@@ -222,7 +222,7 @@ public synchronized <T extends TopLevelItem> T copy(T src, String name) throws I
 
         // reload from the new config
         final File rootDir = result.getRootDir();
-        result = Items.whileUpdatingByXml(new Callable<T,IOException>() {
+        result = Items.whileUpdatingByXml(new NotReallyRoleSensitiveCallable<T,IOException>() {
             @Override public T call() throws IOException {
                 return (T) Items.load(parent, rootDir);
             }
@@ -253,7 +253,7 @@ public synchronized TopLevelItem createProjectFromXML(String name, InputStream x
             IOUtils.copy(xml,configXml);
 
             // load it
-            TopLevelItem result = Items.whileUpdatingByXml(new Callable<TopLevelItem,IOException>() {
+            TopLevelItem result = Items.whileUpdatingByXml(new NotReallyRoleSensitiveCallable<TopLevelItem,IOException>() {
                 @Override public TopLevelItem call() throws IOException {
                     return (TopLevelItem) Items.load(parent, dir);
                 }

File: core/src/main/java/hudson/model/Slave.java
Patch:
@@ -59,6 +59,7 @@
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
 import jenkins.model.Jenkins;
+import jenkins.security.MasterToSlaveCallable;
 import jenkins.slaves.WorkspaceLocator;
 
 import org.apache.commons.io.IOUtils;
@@ -455,7 +456,7 @@ public FormValidation doCheckRemoteFS(@QueryParameter String value) throws IOExc
      *     <li>When it's read on this side as a return value, it morphs itself into {@link ClockDifference}.
      * </ol>
      */
-    private static final class GetClockDifference1 implements Callable<ClockDifference,IOException> {
+    private static final class GetClockDifference1 extends MasterToSlaveCallable<ClockDifference,IOException> {
         public ClockDifference call() {
             // this method must be being invoked locally, which means the clock is in sync
             return new ClockDifference(0);
@@ -468,7 +469,7 @@ private Object writeReplace() {
         private static final long serialVersionUID = 1L;
     }
 
-    private static final class GetClockDifference2 implements Callable<GetClockDifference3,IOException> {
+    private static final class GetClockDifference2 extends MasterToSlaveCallable<GetClockDifference3,IOException> {
         /**
          * Capture the time on the master when this object is sent to remote, which is when
          * {@link GetClockDifference1#writeReplace()} is run.

File: core/src/main/java/hudson/node_monitors/ArchitectureMonitor.java
Patch:
@@ -26,6 +26,7 @@
 import hudson.model.Computer;
 import hudson.remoting.Callable;
 import hudson.Extension;
+import jenkins.security.MasterToSlaveCallable;
 import net.sf.json.JSONObject;
 import org.kohsuke.stapler.StaplerRequest;
 
@@ -56,7 +57,7 @@ public NodeMonitor newInstance(StaplerRequest req, JSONObject formData) throws F
     /**
      * Obtains the string that represents the architecture.
      */
-    private static class GetArchTask implements Callable<String,IOException> {
+    private static class GetArchTask extends MasterToSlaveCallable<String,IOException> {
         public String call() {
             String os = System.getProperty("os.name");
             String arch = System.getProperty("os.arch");

File: core/src/main/java/hudson/node_monitors/DiskSpaceMonitorDescriptor.java
Patch:
@@ -23,8 +23,8 @@
  */
 package hudson.node_monitors;
 
-import hudson.FilePath.FileCallable;
 import hudson.Functions;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.remoting.VirtualChannel;
 import hudson.Util;
 import hudson.slaves.OfflineCause;
@@ -154,7 +154,7 @@ public static DiskSpace parse(String size) throws ParseException {
         private static final long serialVersionUID = 2L;
     }
 
-    protected static final class GetUsableSpace implements FileCallable<DiskSpace> {
+    protected static final class GetUsableSpace extends MasterToSlaveFileCallable<DiskSpace> {
         public GetUsableSpace() {}
         public DiskSpace invoke(File f, VirtualChannel channel) throws IOException {
                 long s = f.getUsableSpace();

File: core/src/main/java/hudson/node_monitors/ResponseTimeMonitor.java
Patch:
@@ -28,6 +28,7 @@
 import hudson.slaves.OfflineCause;
 import hudson.model.Computer;
 import hudson.remoting.Callable;
+import jenkins.security.MasterToSlaveCallable;
 import net.sf.json.JSONObject;
 import org.kohsuke.stapler.StaplerRequest;
 
@@ -85,7 +86,7 @@ public NodeMonitor newInstance(StaplerRequest req, JSONObject formData) throws F
         }
     };
 
-    private static final class Step1 implements Callable<Data,IOException> {
+    private static final class Step1 extends MasterToSlaveCallable<Data,IOException> {
         private Data cur;
 
         private Step1(Data cur) {
@@ -104,7 +105,7 @@ private Object writeReplace() {
         private static final long serialVersionUID = 1L;
     }
 
-    private static final class Step2 implements Callable<Step3,IOException> {
+    private static final class Step2 extends MasterToSlaveCallable<Step3,IOException> {
         private final Data cur;
         private final long start = System.currentTimeMillis();
 

File: core/src/main/java/hudson/node_monitors/SwapSpaceMonitor.java
Patch:
@@ -28,7 +28,7 @@
 import hudson.Functions;
 import hudson.model.Computer;
 import jenkins.model.Jenkins;
-import hudson.remoting.Callable;
+import jenkins.security.MasterToSlaveCallable;
 import net.sf.json.JSONObject;
 import org.jvnet.hudson.MemoryMonitor;
 import org.jvnet.hudson.MemoryUsage;
@@ -100,7 +100,7 @@ public NodeMonitor newInstance(StaplerRequest req, JSONObject formData) throws F
     /**
      * Obtains the string that represents the architecture.
      */
-    private static class MonitorTask implements Callable<MemoryUsage,IOException> {
+    private static class MonitorTask extends MasterToSlaveCallable<MemoryUsage,IOException> {
         public MemoryUsage call() throws IOException {
             MemoryMonitor mm;
             try {

File: core/src/main/java/hudson/node_monitors/TemporarySpaceMonitor.java
Patch:
@@ -25,7 +25,7 @@
 
 import hudson.Extension;
 import hudson.FilePath;
-import hudson.FilePath.FileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.model.Computer;
 import hudson.model.Node;
 import hudson.remoting.Callable;
@@ -83,7 +83,7 @@ public static DiskSpaceMonitorDescriptor install() {
         return DESCRIPTOR;
     }
     
-    protected static final class GetTempSpace implements FileCallable<DiskSpace> {
+    protected static final class GetTempSpace extends MasterToSlaveFileCallable<DiskSpace> {
         public DiskSpace invoke(File f, VirtualChannel channel) throws IOException {
                 // if the disk is really filled up we can't even create a single file,
                 // so calling File.createTempFile and figuring out the directory won't reliably work.

File: core/src/main/java/hudson/os/solaris/ZFSInstaller.java
Patch:
@@ -38,6 +38,7 @@
 import hudson.util.StreamTaskListener;
 import static hudson.util.jna.GNUCLibrary.*;
 
+import jenkins.security.MasterToSlaveCallable;
 import org.apache.commons.io.output.ByteArrayOutputStream;
 import org.jvnet.libpam.impl.CLibrary.passwd;
 import org.jvnet.solaris.libzfs.ACLBuilder;
@@ -167,7 +168,7 @@ private String createZfsFileSystem(final TaskListener listener, String rootUsern
 
         // this is the actual creation of the file system.
         // return true indicating a success
-        return SU.execute(listener, rootUsername, rootPassword, new Callable<String,IOException>() {
+        return SU.execute(listener, rootUsername, rootPassword, new MasterToSlaveCallable<String,IOException>() {
             private static final long serialVersionUID = 7731167233498214301L;
 
             public String call() throws IOException {

File: core/src/main/java/hudson/security/AbstractPasswordBasedSecurityRealm.java
Patch:
@@ -3,13 +3,13 @@
 import groovy.lang.Binding;
 import hudson.FilePath;
 import hudson.cli.CLICommand;
-import hudson.remoting.Callable;
 import hudson.util.spring.BeanBuilder;
 import java.io.Console;
 import java.io.IOException;
 import jenkins.model.Jenkins;
 import jenkins.security.ImpersonatingUserDetailsService;
 import jenkins.security.SecurityListener;
+import jenkins.security.MasterToSlaveCallable;
 import org.acegisecurity.Authentication;
 import org.acegisecurity.AuthenticationException;
 import org.acegisecurity.AuthenticationManager;
@@ -152,7 +152,7 @@ protected UserDetails retrieveUser(String username, UsernamePasswordAuthenticati
     /**
      * Asks for the password.
      */
-    private static class InteractivelyAskForPassword implements Callable<String,IOException> {
+    private static class InteractivelyAskForPassword extends MasterToSlaveCallable<String,IOException> {
         public String call() throws IOException {
             Console console = System.console();
             if (console == null)    return null;    // no terminal

File: core/src/main/java/hudson/slaves/ChannelPinger.java
Patch:
@@ -28,9 +28,9 @@
 import hudson.model.Computer;
 import hudson.model.Slave;
 import hudson.model.TaskListener;
-import hudson.remoting.Callable;
 import hudson.remoting.Channel;
 import hudson.remoting.PingThread;
+import jenkins.security.MasterToSlaveCallable;
 
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -89,7 +89,7 @@ public void install(Channel channel) {
         setUpPingForChannel(channel, pingInterval);
     }
 
-    private static class SetUpRemotePing implements Callable<Void, IOException> {
+    private static class SetUpRemotePing extends MasterToSlaveCallable<Void, IOException> {
         private static final long serialVersionUID = -2702219700841759872L;
         private int pingInterval;
         public SetUpRemotePing(int pingInterval) {

File: core/src/main/java/hudson/slaves/ConnectionActivityMonitor.java
Patch:
@@ -30,8 +30,8 @@
 import hudson.util.TimeUnit2;
 import hudson.remoting.VirtualChannel;
 import hudson.remoting.Channel;
-import hudson.remoting.Callable;
 import hudson.Extension;
+import jenkins.security.SlaveToMasterCallable;
 
 import java.io.IOException;
 import java.util.logging.Logger;
@@ -102,7 +102,7 @@ public long getRecurrencePeriod() {
     public boolean enabled = Boolean.getBoolean(ConnectionActivityMonitor.class.getName()+".enabled");
 
     private static final PingCommand PING_COMMAND = new PingCommand();
-    private static final class PingCommand implements Callable<Void,RuntimeException> {
+    private static final class PingCommand extends SlaveToMasterCallable<Void,RuntimeException> {
         public Void call() throws RuntimeException {
             return null;
         }

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -24,6 +24,7 @@
 package hudson.tasks;
 
 import hudson.FilePath;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.Launcher;
 import hudson.Util;
 import hudson.Extension;
@@ -247,7 +248,7 @@ public void perform(Run<?,?> build, FilePath ws, Launcher launcher, TaskListener
         }
     }
 
-    private static final class ListFiles implements FilePath.FileCallable<Map<String,String>> {
+    private static final class ListFiles extends MasterToSlaveFileCallable<Map<String,String>> {
         private static final long serialVersionUID = 1;
         private final String includes, excludes;
         private final boolean defaultExcludes;

File: core/src/main/java/hudson/tasks/Fingerprinter.java
Patch:
@@ -27,7 +27,7 @@
 import hudson.EnvVars;
 import hudson.Extension;
 import hudson.FilePath;
-import hudson.FilePath.FileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.Launcher;
 import hudson.Util;
 import hudson.model.AbstractBuild;
@@ -209,7 +209,7 @@ Fingerprint addRecord(Run build) throws IOException {
 
         final long buildTimestamp = build.getTimeInMillis();
 
-        List<Record> records = ws.act(new FileCallable<List<Record>>() {
+        List<Record> records = ws.act(new MasterToSlaveFileCallable<List<Record>>() {
             public List<Record> invoke(File baseDir, VirtualChannel channel) throws IOException {
                 List<Record> results = new ArrayList<Record>();
 

File: core/src/main/java/hudson/tasks/Shell.java
Patch:
@@ -28,12 +28,12 @@
 import hudson.Util;
 import hudson.Extension;
 import hudson.model.AbstractProject;
-import hudson.remoting.Callable;
 import hudson.remoting.VirtualChannel;
 import hudson.util.FormValidation;
 import java.io.IOException;
 import java.io.ObjectStreamException;
 import hudson.util.LineEndingConversion;
+import jenkins.security.MasterToSlaveCallable;
 import net.sf.json.JSONObject;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.StaplerRequest;
@@ -172,7 +172,7 @@ public FormValidation doCheckShell(@QueryParameter String value) {
             return FormValidation.validateExecutable(value); 
         }
         
-        private static final class Shellinterpreter implements Callable<String, IOException> {
+        private static final class Shellinterpreter extends MasterToSlaveCallable<String, IOException> {
 
             private static final long serialVersionUID = 1L;
 

File: core/src/main/java/hudson/tools/ZipExtractionInstaller.java
Patch:
@@ -26,7 +26,7 @@
 
 import hudson.Extension;
 import hudson.FilePath;
-import hudson.FilePath.FileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.ProxyConfiguration;
 import hudson.Util;
 import hudson.Functions;
@@ -116,7 +116,7 @@ public FormValidation doCheckUrl(@QueryParameter String value) {
      * Sets execute permission on all files, since unzip etc. might not do this.
      * Hackish, is there a better way?
      */
-    static class ChmodRecAPlusX implements FileCallable<Void> {
+    static class ChmodRecAPlusX extends MasterToSlaveFileCallable<Void> {
         private static final long serialVersionUID = 1L;
         public Void invoke(File d, VirtualChannel channel) throws IOException {
             if(!Functions.isWindows())

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -29,14 +29,13 @@
 import hudson.EnvVars;
 import hudson.FilePath;
 import hudson.Util;
-import jenkins.model.Jenkins;
-import hudson.remoting.Callable;
 import hudson.remoting.Channel;
 import hudson.remoting.VirtualChannel;
 import hudson.slaves.SlaveComputer;
 import hudson.util.ProcessTree.OSProcess;
 import hudson.util.ProcessTreeRemoting.IOSProcess;
 import hudson.util.ProcessTreeRemoting.IProcessTree;
+import jenkins.security.SlaveToMasterCallable;
 import org.jvnet.winp.WinProcess;
 import org.jvnet.winp.WinpException;
 
@@ -150,7 +149,7 @@ public void killAll(Process proc, Map<String, String> modelEnvVars) throws Inter
             try {
                 VirtualChannel channelToMaster = SlaveComputer.getChannelToMaster();
                 if (channelToMaster!=null) {
-                    killers = channelToMaster.call(new Callable<List<ProcessKiller>, IOException>() {
+                    killers = channelToMaster.call(new SlaveToMasterCallable<List<ProcessKiller>, IOException>() {
                         public List<ProcessKiller> call() throws IOException {
                             return new ArrayList<ProcessKiller>(ProcessKiller.all());
                         }

File: core/src/main/java/hudson/util/io/ParserConfigurator.java
Patch:
@@ -25,9 +25,9 @@
  
 import hudson.ExtensionList;
 import hudson.ExtensionPoint;
-import hudson.remoting.Callable;
 import hudson.remoting.Channel;
 import jenkins.model.Jenkins;
+import jenkins.security.SlaveToMasterCallable;
 import org.dom4j.io.SAXReader;
 
 import java.io.IOException;
@@ -78,7 +78,7 @@ public static void applyConfiguration(SAXReader reader, Object context) throws I
         if (Jenkins.getInstance()==null) {
             Channel ch = Channel.current();
             if (ch!=null)
-                all = ch.call(new Callable<Collection<ParserConfigurator>, IOException>() {
+                all = ch.call(new SlaveToMasterCallable<Collection<ParserConfigurator>, IOException>() {
 
                     private static final long serialVersionUID = -2178106894481500733L;
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -196,6 +196,7 @@
 import jenkins.security.ConfidentialKey;
 import jenkins.security.ConfidentialStore;
 import jenkins.security.SecurityListener;
+import jenkins.security.MasterToSlaveCallable;
 import jenkins.slaves.WorkspaceLocator;
 import jenkins.util.Timer;
 import jenkins.util.io.FileBoolean;
@@ -2034,7 +2035,7 @@ public ClockDifference getClockDifference() {
 
     @Override
     public Callable<ClockDifference, IOException> getClockDifferenceCallable() {
-        return new Callable<ClockDifference, IOException>() {
+        return new MasterToSlaveCallable<ClockDifference, IOException>() {
             public ClockDifference call() throws IOException {
                 return new ClockDifference(0);
             }

File: core/src/main/java/jenkins/slaves/StandardOutputSwapper.java
Patch:
@@ -4,11 +4,11 @@
 import hudson.FilePath;
 import hudson.model.Computer;
 import hudson.model.TaskListener;
-import hudson.remoting.Callable;
 import hudson.remoting.Channel;
 import hudson.remoting.StandardOutputStream;
 import hudson.slaves.ComputerListener;
 import hudson.util.jna.GNUCLibrary;
+import jenkins.security.MasterToSlaveCallable;
 
 import java.io.File;
 import java.io.FileDescriptor;
@@ -35,7 +35,7 @@ public void preOnline(Computer c, Channel channel, FilePath root, TaskListener l
         }
     }
 
-    private static final class ChannelSwapper implements Callable<Boolean,Exception> {
+    private static final class ChannelSwapper extends MasterToSlaveCallable<Boolean,Exception> {
         public Boolean call() throws Exception {
             if (File.pathSeparatorChar==';')    return false;   // Windows
             

File: core/src/main/java/jenkins/slaves/restarter/JnlpSlaveRestarterInstaller.java
Patch:
@@ -3,7 +3,6 @@
 import hudson.Extension;
 import hudson.model.Computer;
 import hudson.model.TaskListener;
-import hudson.remoting.Callable;
 import hudson.remoting.Engine;
 import hudson.remoting.EngineListener;
 import hudson.remoting.EngineListenerAdapter;
@@ -19,6 +18,7 @@
 import java.util.logging.Logger;
 
 import static java.util.logging.Level.*;
+import jenkins.security.MasterToSlaveCallable;
 
 /**
  * Actual slave restart logic.
@@ -49,7 +49,7 @@ private void install(Computer c, TaskListener listener) {
             VirtualChannel ch = c.getChannel();
             if (ch==null) return;  // defensive check
 
-            List<SlaveRestarter> effective = ch.call(new Callable<List<SlaveRestarter>, IOException>() {
+            List<SlaveRestarter> effective = ch.call(new MasterToSlaveCallable<List<SlaveRestarter>, IOException>() {
                 public List<SlaveRestarter> call() throws IOException {
                     Engine e = Engine.current();
                     if (e == null) return null;    // not running under Engine

File: core/src/test/java/hudson/LauncherTest.java
Patch:
@@ -29,6 +29,7 @@
 import hudson.remoting.Callable;
 import hudson.util.ProcessTree;
 import hudson.util.StreamTaskListener;
+import jenkins.security.MasterToSlaveCallable;
 import org.apache.commons.io.FileUtils;
 import org.jvnet.hudson.test.Bug;
 
@@ -73,7 +74,7 @@ public void testRemoteKill() throws Exception {
         }
     }
 
-    private static final Callable<Object,RuntimeException> NOOP = new Callable<Object,RuntimeException>() {
+    private static final Callable<Object,RuntimeException> NOOP = new MasterToSlaveCallable<Object,RuntimeException>() {
         public Object call() throws RuntimeException {
             return null;
         }

File: core/src/test/java/hudson/os/SUTester.java
Patch:
@@ -2,6 +2,7 @@
 
 import hudson.remoting.Callable;
 import hudson.util.StreamTaskListener;
+import jenkins.security.MasterToSlaveCallable;
 
 import java.io.FileOutputStream;
 
@@ -10,7 +11,7 @@
  */
 public class SUTester {
     public static void main(String[] args) throws Throwable {
-        SU.execute(StreamTaskListener.fromStdout(),"kohsuke","bogus",new Callable<Object, Throwable>() {
+        SU.execute(StreamTaskListener.fromStdout(),"kohsuke","bogus",new MasterToSlaveCallable<Object, Throwable>() {
             public Object call() throws Throwable {
                 System.out.println("Touching /tmp/x");
                 new FileOutputStream("/tmp/x").close();

File: core/src/test/java/hudson/util/ProcessTreeTest.java
Patch:
@@ -5,6 +5,7 @@
 import hudson.remoting.VirtualChannel;
 import hudson.util.ProcessTree.OSProcess;
 import hudson.util.ProcessTree.ProcessCallable;
+import jenkins.security.MasterToSlaveCallable;
 
 import java.io.IOException;
 import java.io.Serializable;
@@ -39,7 +40,7 @@ public void testRemoting() throws Exception {
         t.p.act(new ProcessCallableImpl());
     }
 
-    private static class MyCallable implements Callable<Tag, IOException>, Serializable {
+    private static class MyCallable extends MasterToSlaveCallable<Tag, IOException> implements Serializable {
         public Tag call() throws IOException {
             Tag t = new Tag();
             t.tree = ProcessTree.get();

File: core/src/test/java/hudson/util/io/ReopenableRotatingFileOutputStreamTest.java
Patch:
@@ -11,7 +11,7 @@
  * @author Kohsuke Kawaguchi
  */
 public class ReopenableRotatingFileOutputStreamTest extends TestCase {
-    public void testRotation() throws IOException {
+    public void testRotation() throws IOException, InterruptedException {
         File base = File.createTempFile("test", "log");
         ReopenableRotatingFileOutputStream os = new ReopenableRotatingFileOutputStream(base,3);
         PrintWriter w = new PrintWriter(os,true);

File: test/src/test/java/hudson/ProcTest.java
Patch:
@@ -3,13 +3,12 @@
 import hudson.Launcher.LocalLauncher;
 import hudson.Launcher.RemoteLauncher;
 import hudson.Proc.RemoteProc;
-import hudson.remoting.Callable;
-import hudson.remoting.Future;
 import hudson.remoting.Pipe;
 import hudson.remoting.VirtualChannel;
 import hudson.slaves.DumbSlave;
 import hudson.util.IOUtils;
 import hudson.util.StreamTaskListener;
+import jenkins.security.MasterToSlaveCallable;
 import org.jvnet.hudson.test.Bug;
 import org.jvnet.hudson.test.HudsonTestCase;
 
@@ -70,7 +69,7 @@ private VirtualChannel createSlaveChannel() throws Exception {
         return ch;
     }
 
-    private static class ChannelFiller implements Callable<Void,IOException> {
+    private static class ChannelFiller extends MasterToSlaveCallable<Void,IOException> {
         private final OutputStream o;
 
         private ChannelFiller(OutputStream o) {

File: test/src/test/java/hudson/logging/LogRecorderManagerTest.java
Patch:
@@ -23,6 +23,7 @@
  */
 package hudson.logging;
 
+import jenkins.security.MasterToSlaveCallable;
 import org.jvnet.hudson.test.Url;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
 import com.gargoylesoftware.htmlunit.html.HtmlForm;
@@ -109,7 +110,7 @@ public class LogRecorderManagerTest {
         assertFalse(text, text.contains("msg #4"));
     }
 
-    private static final class Log implements Callable<Boolean,Error> {
+    private static final class Log extends MasterToSlaveCallable<Boolean,Error> {
         private final Level level;
         private final String logger;
         private final String message;

File: test/src/test/java/hudson/slaves/JNLPLauncherTest.java
Patch:
@@ -35,6 +35,7 @@
 import hudson.remoting.Which;
 import hudson.util.ArgumentListBuilder;
 
+import jenkins.security.SlaveToMasterCallable;
 import org.jvnet.hudson.test.HudsonTestCase;
 import org.jvnet.hudson.test.TestExtension;
 
@@ -154,7 +155,7 @@ private Computer addTestSlave() throws Exception {
         return c;
     }
 
-    private static class NoopTask implements Callable<String,RuntimeException> {
+    private static class NoopTask extends SlaveToMasterCallable<String,RuntimeException> {
         public String call() {
             return "done";
         }

File: core/src/main/java/hudson/model/AbstractModelObject.java
Patch:
@@ -47,6 +47,7 @@ public abstract class AbstractModelObject implements SearchableModelObject {
      * Displays the error in a page.
      */
     protected final void sendError(Exception e, StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {
+        req.setAttribute("exception", e);
         sendError(e.getMessage(),req,rsp);
     }
 

File: core/src/main/java/hudson/node_monitors/DiskSpaceMonitorDescriptor.java
Patch:
@@ -23,7 +23,7 @@
  */
 package hudson.node_monitors;
 
-import hudson.FilePath.MasterToSlaveFileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.remoting.VirtualChannel;
 import hudson.Util;
 import hudson.slaves.OfflineCause;

File: core/src/main/java/hudson/node_monitors/TemporarySpaceMonitor.java
Patch:
@@ -25,7 +25,7 @@
 
 import hudson.Extension;
 import hudson.FilePath;
-import hudson.FilePath.MasterToSlaveFileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.Functions;
 import hudson.model.Computer;
 import hudson.remoting.Callable;

File: core/src/main/java/hudson/os/solaris/ZFSProvisioner.java
Patch:
@@ -23,7 +23,7 @@
  */
 package hudson.os.solaris;
 
-import hudson.FilePath.MasterToSlaveFileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.FileSystemProvisioner;
 import hudson.FilePath;
 import hudson.WorkspaceSnapshot;

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -24,7 +24,7 @@
 package hudson.tasks;
 
 import hudson.FilePath;
-import hudson.FilePath.MasterToSlaveFileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.Launcher;
 import hudson.Util;
 import hudson.Extension;

File: core/src/main/java/hudson/tasks/Fingerprinter.java
Patch:
@@ -27,8 +27,7 @@
 import hudson.EnvVars;
 import hudson.Extension;
 import hudson.FilePath;
-import hudson.FilePath.FileCallable;
-import hudson.FilePath.MasterToSlaveFileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.Launcher;
 import hudson.Util;
 import hudson.matrix.MatrixConfiguration;

File: core/src/main/java/hudson/tasks/Maven.java
Patch:
@@ -24,14 +24,13 @@
 package hudson.tasks;
 
 import hudson.Extension;
-import hudson.FilePath.MasterToSlaveFileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.Launcher;
 import hudson.Functions;
 import hudson.EnvVars;
 import hudson.Util;
 import hudson.CopyOnWrite;
 import hudson.Launcher.LocalLauncher;
-import hudson.FilePath.FileCallable;
 import hudson.model.AbstractBuild;
 import hudson.model.AbstractProject;
 import hudson.model.BuildListener;
@@ -43,7 +42,6 @@
 import jenkins.mvn.GlobalSettingsProvider;
 import jenkins.mvn.SettingsProvider;
 import hudson.model.TaskListener;
-import hudson.remoting.Callable;
 import hudson.remoting.VirtualChannel;
 import hudson.slaves.NodeSpecific;
 import hudson.tasks._maven.MavenConsoleAnnotator;

File: core/src/main/java/hudson/tasks/junit/JUnitParser.java
Patch:
@@ -23,7 +23,7 @@
  */
 package hudson.tasks.junit;
 
-import hudson.FilePath.MasterToSlaveFileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.model.TaskListener;
 import hudson.tasks.test.TestResultParser;
 import hudson.model.AbstractBuild;

File: core/src/main/java/hudson/tasks/test/DefaultTestResultParserImpl.java
Patch:
@@ -25,7 +25,7 @@
 
 import hudson.AbortException;
 import hudson.FilePath;
-import hudson.FilePath.MasterToSlaveFileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.Launcher;
 import hudson.Util;
 import hudson.model.AbstractBuild;

File: core/src/main/java/hudson/tools/ZipExtractionInstaller.java
Patch:
@@ -26,7 +26,7 @@
 
 import hudson.Extension;
 import hudson.FilePath;
-import hudson.FilePath.MasterToSlaveFileCallable;
+import jenkins.MasterToSlaveFileCallable;
 import hudson.ProxyConfiguration;
 import hudson.Util;
 import hudson.Functions;

File: core/src/main/java/jenkins/util/VirtualFile.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.List;
 import javax.annotation.Nonnull;
 
-import static hudson.FilePath.MasterToSlaveFileCallable;
+import jenkins.MasterToSlaveFileCallable;
 
 /**
  * Abstraction over {@link File}, {@link FilePath}, or other items such as network resources or ZIP entries.

File: core/src/main/java/hudson/tasks/Shell.java
Patch:
@@ -42,6 +42,7 @@
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 
 /**
@@ -138,9 +139,9 @@ public String getShellOrDefault(VirtualChannel channel) {
             try {
                 interpreter = channel.call(new Shellinterpreter());
             } catch (IOException e) {
-                LOGGER.warning(e.getMessage());
+                LOGGER.log(Level.WARNING, null, e);
             } catch (InterruptedException e) {
-                LOGGER.warning(e.getMessage());
+                LOGGER.log(Level.WARNING, null, e);
             }
             if (interpreter == null) {
                 interpreter = getShellOrDefault();

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -340,7 +340,7 @@ public <T> List<ExtensionComponent<T>> findComponents(Class<T> type, Hudson huds
         List<ExtensionComponent<T>> r = Lists.newArrayList();
         for (ExtensionFinder finder : finders) {
             try {
-                r.addAll(finder._find(type, hudson));
+                r.addAll(finder.find(type, hudson));
             } catch (AbstractMethodError e) {
                 // backward compatibility
                 for (T t : finder.findExtensions(type, hudson))

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1266,7 +1266,7 @@ private void calcPollingBaseline(AbstractBuild build, Launcher launcher, TaskLis
         SCMRevisionState baseline = build.getAction(SCMRevisionState.class);
         if (baseline==null) {
             try {
-                baseline = getScm()._calcRevisionsFromBuild(build, launcher, listener);
+                baseline = getScm().calcRevisionsFromBuild(build, launcher, listener);
             } catch (AbstractMethodError e) {
                 baseline = SCMRevisionState.NONE; // pre-1.345 SCM implementations, which doesn't use the baseline in polling
             }

File: core/src/main/java/hudson/model/Items.java
Patch:
@@ -381,7 +381,7 @@ public static <I extends AbstractItem & TopLevelItem> I move(I item, DirectlyMod
         FileUtils.moveDirectory(item.getRootDir(), destDir);
         oldParent.remove(item);
         I newItem = destination.add(item, name);
-        newItem.onLoad(destination, name);
+        item.movedTo(destination, newItem, destDir);
         ItemListener.fireLocationChange(newItem, oldFullName);
         return newItem;
     }

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -2446,6 +2446,8 @@ private void readObject(ObjectInputStream ois) throws IOException, ClassNotFound
     /**
      * Adapts {@link FileCallable} to {@link Callable}.
      */
+    @MasterToSlave // the normal case
+    @SlaveToMaster // possible, but triggers FilePathFilter
     private class FileCallableWrapper<T> implements DelegatingCallable<T,IOException> {
         private final FileCallable<T> callable;
         private transient ClassLoader classLoader;

File: core/src/main/java/hudson/model/LoadStatistics.java
Patch:
@@ -233,7 +233,7 @@ private int count(List<Queue.BuildableItem> bis, Label l) {
             int q=0;
             for (Queue.BuildableItem bi : bis) {
                 for (SubTask st : Tasks.getSubTasksOf(bi.task))
-                    if (st.getAssignedLabel()==l)
+                    if (bi.getAssignedLabelFor(st)==l)
                         q++;
             }
             return q;

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -619,6 +619,9 @@ public void renameTo(String newName) throws IOException {
         super.renameTo(newName);
         File newBuildDir = getBuildDir();
         if (oldBuildDir.isDirectory() && !newBuildDir.isDirectory()) {
+            if (!newBuildDir.getParentFile().isDirectory()) {
+                newBuildDir.getParentFile().mkdirs();
+            }
             if (!oldBuildDir.renameTo(newBuildDir)) {
                 throw new IOException("failed to rename " + oldBuildDir + " to " + newBuildDir);
             }

File: core/src/main/java/hudson/model/listeners/SCMListener.java
Patch:
@@ -116,7 +116,9 @@ public void onChangeLogParsed(Run<?,?> build, SCM scm, TaskListener listener, Ch
 
     @Deprecated
     public void onChangeLogParsed(AbstractBuild<?,?> build, BuildListener listener, ChangeLogSet<?> changelog) throws Exception {
-        onChangeLogParsed((Run) build, build.getProject().getScm(), listener, changelog);
+        if (Util.isOverridden(SCMListener.class, getClass(), "onChangeLogParsed", Run.class, SCM.class, TaskListener.class, ChangeLogSet.class)) {
+            onChangeLogParsed((Run) build, build.getProject().getScm(), listener, changelog);
+        }
     }
 
     /**

File: core/src/main/java/hudson/model/RunMap.java
Patch:
@@ -163,6 +163,7 @@ protected final int getNumberOf(R r) {
 
     @Override
     public R put(R r) {
+        r.getRootDir().mkdirs();
         return super._put(r);
     }
 

File: core/src/main/java/hudson/diagnosis/ReverseProxySetupMonitor.java
Patch:
@@ -74,7 +74,7 @@ public void getTestForReverseProxySetup(String rest) {
         assert j != null;
         String inferred = j.getRootUrlFromRequest() + "manage";
         // TODO this could also verify that j.getRootUrl() has been properly configured, and send a different message if not
-        if (rest.equals(inferred)) {
+        if (rest.startsWith(inferred)) { // not using equals due to JENKINS-24014
             throw HttpResponses.ok();
         } else {
             LOGGER.log(Level.WARNING, "{0} vs. {1}", new Object[] {inferred, rest});

File: core/src/main/java/jenkins/widgets/RunListProgressiveRendering.java
Patch:
@@ -63,7 +63,7 @@ public void setBuilds(Iterable<? extends Run<?,?>> builds) {
             }
             JSONObject element = new JSONObject();
             calculate(build, element);
-            synchronized (results) {
+            synchronized (this) {
                 results.add(element);
             }
             decay *= (1 - 1 / MAX_LIKELY_RUNS);

File: test/src/test/java/hudson/PluginTest.java
Patch:
@@ -42,6 +42,9 @@ public class PluginTest {
         r.createWebClient().assertFails("plugin/credentials/images/%2E%2E/images/24x24/credentials.png", HttpServletResponse.SC_INTERNAL_SERVER_ERROR); // IAE from TokenList.<init>
         r.createWebClient().assertFails("plugin/credentials/images/%252E%252E/images/24x24/credentials.png", HttpServletResponse.SC_NOT_FOUND); // SECURITY-131
         r.createWebClient().assertFails("plugin/credentials/images/%25252E%25252E/images/24x24/credentials.png", HttpServletResponse.SC_NOT_FOUND); // just checking
+        // SECURITY-155:
+        r.createWebClient().assertFails("plugin/credentials/WEB-INF/licenses.xml", HttpServletResponse.SC_NOT_FOUND);
+        r.createWebClient().assertFails("plugin/credentials/META-INF/MANIFEST.MF", HttpServletResponse.SC_NOT_FOUND);
     }
 
 }

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -619,6 +619,9 @@ public void renameTo(String newName) throws IOException {
         super.renameTo(newName);
         File newBuildDir = getBuildDir();
         if (oldBuildDir.isDirectory() && !newBuildDir.isDirectory()) {
+            if (!newBuildDir.getParentFile().isDirectory()) {
+                newBuildDir.getParentFile().mkdirs();
+            }
             if (!oldBuildDir.renameTo(newBuildDir)) {
                 throw new IOException("failed to rename " + oldBuildDir + " to " + newBuildDir);
             }

File: test/src/test/java/hudson/PluginTest.java
Patch:
@@ -27,13 +27,14 @@
 import javax.servlet.http.HttpServletResponse;
 import org.junit.Test;
 import org.junit.Rule;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
 public class PluginTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    //@Issue("SECURITY-131")
+    @Issue("SECURITY-131")
     @Test public void doDynamic() throws Exception {
         r.createWebClient().goTo("plugin/credentials/images/24x24/credentials.png", "image/png");
         /* Collapsed somewhere before it winds up in restOfPath:

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -350,7 +350,7 @@ public EnvVars getEnvironment(Node node, TaskListener listener) throws IOExcepti
                 jdkTool = jdkTool.forNode(node, listener);
             }
             jdkTool.buildEnvVars(env);
-        } else if (jdk != null) {
+        } else if (jdk != null && !jdk.equals(JDK.DEFAULT_NAME)) {
             listener.getLogger().println("No JDK named ‘" + jdk + "’ found");
         }
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3598,7 +3598,7 @@ public void doWorkspaceCleanup(StaplerResponse rsp) throws IOException {
      * If the user chose the default JDK, make sure we got 'java' in PATH.
      */
     public FormValidation doDefaultJDKCheck(StaplerRequest request, @QueryParameter String value) {
-        if(!value.equals("(Default)"))
+        if(!value.equals(JDK.DEFAULT_NAME))
             // assume the user configured named ones properly in system config ---
             // or else system config should have reported form field validation errors.
             return FormValidation.ok();

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1185,7 +1185,7 @@ public List<SubTask> getSubTasks() {
         return r;
     }
 
-    public R createExecutable() throws IOException {
+    public @CheckForNull R createExecutable() throws IOException {
         if(isDisabled())    return null;
         return newBuild();
     }

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -1879,7 +1879,7 @@ public CauseOfBlockage getCauseOfBlockage() {
          * the primary executable (such as {@link AbstractBuild}) that created out of it.
          */
         @Exported
-        public Executable getExecutable() {
+        public @CheckForNull Executable getExecutable() {
             return outcome!=null ? outcome.getPrimaryWorkUnit().getExecutable() : null;
         }
 

File: core/src/main/java/hudson/model/ResourceController.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.AbstractCollection;
 import java.util.Iterator;
 import java.util.concurrent.CopyOnWriteArraySet;
+import javax.annotation.Nonnull;
 
 /**
  * Controls mutual exclusion of {@link ResourceList}.
@@ -73,7 +74,7 @@ public int size() {
      * @throws InterruptedException
      *      the thread can be interrupted while waiting for the available resources.
      */
-    public void execute( Runnable task, ResourceActivity activity ) throws InterruptedException {
+    public void execute(@Nonnull Runnable task, ResourceActivity activity ) throws InterruptedException {
         ResourceList resources = activity.getResourceList();
         synchronized(this) {
             while(inUse.isCollidingWith(resources))

File: core/src/main/java/hudson/model/queue/QueueTaskFilter.java
Patch:
@@ -33,6 +33,7 @@
 
 import java.io.IOException;
 import java.util.Collection;
+import javax.annotation.CheckForNull;
 
 /**
  * Base class for defining filter {@link hudson.model.Queue.Task}.
@@ -79,7 +80,7 @@ public long getEstimatedDuration() {
         return base.getEstimatedDuration();
     }
 
-    public Executable createExecutable() throws IOException {
+    public @CheckForNull Executable createExecutable() throws IOException {
         return base.createExecutable();
     }
 

File: core/src/main/java/hudson/model/queue/WorkUnit.java
Patch:
@@ -27,6 +27,7 @@
 import hudson.model.Queue;
 import hudson.model.Queue.Executable;
 import hudson.model.Queue.Task;
+import javax.annotation.CheckForNull;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.stapler.export.ExportedBean;
@@ -63,11 +64,11 @@ public final class WorkUnit {
      * {@link Executor#getCurrentWorkUnit()} and {@link WorkUnit#getExecutor()}
      * form a bi-directional reachability between them.
      */
-    public Executor getExecutor() {
+    public @CheckForNull Executor getExecutor() {
         return executor;
     }
 
-    public void setExecutor(Executor e) {
+    public void setExecutor(@CheckForNull Executor e) {
         executor = e;
     }
 

File: core/src/main/java/hudson/diagnosis/ReverseProxySetupMonitor.java
Patch:
@@ -74,7 +74,7 @@ public void getTestForReverseProxySetup(String rest) {
         assert j != null;
         String inferred = j.getRootUrlFromRequest() + "manage";
         // TODO this could also verify that j.getRootUrl() has been properly configured, and send a different message if not
-        if (rest.equals(inferred)) {
+        if (rest.startsWith(inferred)) { // not using equals due to JENKINS-24014
             throw HttpResponses.ok();
         } else {
             LOGGER.log(Level.WARNING, "{0} vs. {1}", new Object[] {inferred, rest});

File: core/src/main/java/hudson/cli/BuildCommand.java
Patch:
@@ -37,6 +37,7 @@
 import hudson.model.Item;
 import hudson.model.Result;
 import hudson.model.TaskListener;
+import hudson.model.User;
 import hudson.model.queue.QueueTaskFuture;
 import hudson.scm.PollingResult.Change;
 import hudson.util.EditDistance;
@@ -235,7 +236,8 @@ public CLICause(String startedBy){
 
         @Override
         public String getShortDescription() {
-            return Messages.BuildCommand_CLICause_ShortDescription(startedBy);
+            String userName = User.get(startedBy).getDisplayName();
+            return Messages.BuildCommand_CLICause_ShortDescription(userName);
         }
 
         @Override

File: core/src/main/java/hudson/cli/declarative/CLIRegisterer.java
Patch:
@@ -149,8 +149,6 @@ private CmdLineParser bindMethod(List<MethodBinder> binders) {
                             while (!chains.isEmpty())
                                 binders.add(new MethodBinder(chains.pop(),this,parser));
 
-                            new ClassParser().parse(Jenkins.getInstance().getSecurityRealm().createCliAuthenticator(this), parser);
-
                             return parser;
                         }
 
@@ -169,6 +167,7 @@ public int main(List<String> args, Locale locale, InputStream stdin, PrintStream
                                 try {
                                     // authentication
                                     CliAuthenticator authenticator = Jenkins.getInstance().getSecurityRealm().createCliAuthenticator(this);
+                                    new ClassParser().parse(authenticator,parser);
 
                                     // fill up all the binders
                                     parser.parseArgument(args);

File: core/src/main/java/jenkins/model/ArtifactManager.java
Patch:
@@ -29,6 +29,7 @@
 import hudson.model.AbstractBuild;
 import hudson.model.BuildListener;
 import hudson.model.Run;
+import hudson.model.TaskListener;
 import hudson.tasks.ArtifactArchiver;
 import java.io.IOException;
 import java.util.Map;
@@ -61,7 +62,7 @@ public abstract class ArtifactManager {
      * @param artifacts map from paths in the archive area to paths relative to {@code workspace} (all paths {@code /}-separated)
      * @throws IOException if transfer or copying failed in any way
      * @throws InterruptedException if transfer was interrupted
-     * @see ArtifactArchiver#perform(AbstractBuild, Launcher, BuildListener)
+     * @see ArtifactArchiver#perform(Run, FilePath, Launcher, TaskListener)
      */
     public abstract void archive(FilePath workspace, Launcher launcher, BuildListener listener, Map<String,String> artifacts) throws IOException, InterruptedException;
 

File: core/src/main/java/hudson/ClassicPluginStrategy.java
Patch:
@@ -298,7 +298,8 @@ private void fix(Attributes atts, List<PluginWrapper.Dependency> optionalDepende
         new DetachedPlugin("matrix-auth","1.535.*","1.0.2"),
         new DetachedPlugin("windows-slaves","1.547.*","1.0"),
         new DetachedPlugin("antisamy-markup-formatter","1.553.*","1.0"),
-        new DetachedPlugin("matrix-project","1.561.*","1.0")
+        new DetachedPlugin("matrix-project","1.561.*","1.0"),
+        new DetachedPlugin("junit","1.577.*","1.0")
     );
 
     /**

File: core/src/main/java/hudson/model/Action.java
Patch:
@@ -24,7 +24,6 @@
 package hudson.model;
 
 import hudson.Functions;
-import hudson.tasks.test.TestResultProjectAction;
 
 /**
  * Object that contributes additional information, behaviors, and UIs to {@link ModelObject}
@@ -46,7 +45,7 @@
  * it will be displayed as a floating box on the top page of
  * the target {@link ModelObject}. (For example, this is how
  * the JUnit test result trend shows up in the project top page.
- * See {@link TestResultProjectAction}.)
+ * See {@code TestResultProjectAction}.)
  *
  * <p>
  * On the target {@link ModelObject} page, actions are rendered as an item in the side panel

File: cli/src/test/java/hudson/cli/ConnectionTest.java
Patch:
@@ -28,7 +28,7 @@ public void setUp() throws IOException {
     }
 
     @Test
-    public void testEncyrpt() throws Throwable {
+    public void testEncrypt() throws Throwable {
         final SecretKey sessionKey = new SecretKeySpec(new byte[16],"AES");
 
         Thread t1 = new Thread() {

File: core/src/main/java/hudson/cli/BuildCommand.java
Patch:
@@ -161,6 +161,7 @@ protected int run() throws Exception {
             }
             AbstractBuild b = f.waitForStart();    // wait for the start
             stdout.println("Started "+b.getFullDisplayName());
+            stdout.flush();
 
             if (sync || follow) {
                 try {

File: core/src/main/java/hudson/cli/CommandDuringBuild.java
Patch:
@@ -67,6 +67,9 @@ protected Run optCurrentlyBuilding() throws CmdLineException {
             try {
                 Run r = j.getBuildByNumber(Integer.parseInt(envs[1]));
                 if (r==null)    throw new CmdLineException("No such build #"+envs[1]+" in "+envs[0]);
+                if (!r.isBuilding()) {
+                    throw new CmdLineException(r + " is not currently being built");
+                }
                 return r;
             } catch (NumberFormatException e) {
                 throw new CmdLineException("Invalid build number: "+envs[1]);

File: core/src/main/java/hudson/cli/SetBuildParameterCommand.java
Patch:
@@ -32,6 +32,7 @@ public String getShortDescription() {
     @Override
     protected int run() throws Exception {
         Run r = getCurrentlyBuilding();
+        r.checkPermission(Run.UPDATE);
 
         StringParameterValue p = new StringParameterValue(name, value);
 

File: core/src/main/java/hudson/cli/SetBuildResultCommand.java
Patch:
@@ -48,7 +48,7 @@ public String getShortDescription() {
     @Override
     protected int run() throws Exception {
         Run r = getCurrentlyBuilding();
-        r.getParent().checkPermission(Item.BUILD);
+        r.checkPermission(Run.UPDATE);
         r.setResult(result);
         return 0;
     }

File: core/src/main/java/hudson/tasks/test/AbstractTestResultAction.java
Patch:
@@ -207,7 +207,7 @@ public T getPreviousResult() {
     }
 
     private <U extends AbstractTestResultAction> U getPreviousResult(Class<U> type) {
-        AbstractBuild<?,?> b = owner;
+        Run<?,?> b = run;
         while(true) {
             b = b.getPreviousBuild();
             if(b==null)

File: core/src/main/java/hudson/cli/declarative/CLIRegisterer.java
Patch:
@@ -149,8 +149,6 @@ private CmdLineParser bindMethod(List<MethodBinder> binders) {
                             while (!chains.isEmpty())
                                 binders.add(new MethodBinder(chains.pop(),this,parser));
 
-                            new ClassParser().parse(Jenkins.getInstance().getSecurityRealm().createCliAuthenticator(this), parser);
-
                             return parser;
                         }
 
@@ -169,6 +167,7 @@ public int main(List<String> args, Locale locale, InputStream stdin, PrintStream
                                 try {
                                     // authentication
                                     CliAuthenticator authenticator = Jenkins.getInstance().getSecurityRealm().createCliAuthenticator(this);
+                                    new ClassParser().parse(authenticator,parser);
 
                                     // fill up all the binders
                                     parser.parseArgument(args);

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2060,7 +2060,7 @@ public static abstract class StatusSummarizer implements ExtensionPoint {
         if(Functions.isArtifactsPermissionEnabled()) {
           checkPermission(ARTIFACTS);
         }
-        return new DirectoryBrowserSupport(this, getArtifactManager().root(), project.getDisplayName() + ' ' + getDisplayName(), "package.png", true);
+        return new DirectoryBrowserSupport(this, getArtifactManager().root(), Messages.Run_ArtifactsBrowserTitle(project.getDisplayName(), getDisplayName()), "package.png", true);
     }
 
     /**

File: core/src/main/java/hudson/tasks/test/AggregatedTestResultPublisher.java
Patch:
@@ -56,6 +56,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
+import javax.annotation.CheckForNull;
 
 /**
  * Aggregates downstream test reports into a single consolidated report,
@@ -104,9 +105,9 @@ public BuildStepMonitor getRequiredMonitorService() {
     public static final class TestResultAction extends AbstractTestResultAction {
         /**
          * Jobs to aggregate. Comma separated.
-         * Never null.
+         * Null if doing downstream projects.
          */
-        private final String jobs;
+        private final @CheckForNull String jobs;
 
         /**
          * Should failed builds be included?

File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java
Patch:
@@ -40,13 +40,13 @@
 import java.util.StringTokenizer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipOutputStream;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletResponse;
 import jenkins.model.Jenkins;
 import jenkins.util.VirtualFile;
 import org.apache.commons.io.IOUtils;
+import org.apache.tools.zip.ZipEntry;
+import org.apache.tools.zip.ZipOutputStream;
 import org.kohsuke.stapler.HttpResponse;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
@@ -340,6 +340,7 @@ private static String createBackRef(int times) {
 
     private static void zip(OutputStream outputStream, VirtualFile dir, String glob) throws IOException {
         ZipOutputStream zos = new ZipOutputStream(outputStream);
+        zos.setEncoding(System.getProperty("file.encoding")); // TODO JENKINS-20663 make this overridable via query parameter
         for (String n : dir.list(glob.length() == 0 ? "**" : glob)) {
             String relativePath;
             if (glob.length() == 0) {

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -716,7 +716,8 @@ public byte[] readFileToByteArray(File file) throws IOException {
                 in = org.apache.commons.io.FileUtils.openInputStream(file);
                 return org.apache.commons.io.IOUtils.toByteArray(in);
             } finally {
-                in.close();
+                if (in != null)
+                    in.close();
             }
         }
     }

File: test/src/main/java/org/jvnet/hudson/test/ExtractResourceWithChangesSCM.java
Patch:
@@ -122,13 +122,13 @@ public void saveToChangeLog(File changeLogFile, ExtractChangeLogParser.ExtractCh
         stream.println("<extractChanges>");
         stream.println("<entry>");
         stream.println("<zipFile>" + escapeForXml(changeLog.getZipFile()) + "</zipFile>");
-        stream.println("<file>");
 
         for (String fileName : changeLog.getAffectedPaths()) {
+            stream.println("<file>");
             stream.println("<fileName>" + escapeForXml(fileName) + "</fileName>");
+            stream.println("</file>");
         }
 
-        stream.println("</file>");
         stream.println("</entry>");
         stream.println("</extractChanges>");
 

File: core/src/main/java/hudson/util/RunList.java
Patch:
@@ -220,7 +220,7 @@ public String toString() {
 
     /**
      * Return only the most recent builds.
-     * <em>Warning:</em> this method mutates the original list and then returns it.
+     * <em>Warning:</em> this method mutates the original list and then returns it.AbstractLazyLoadRunMap
      * @param n a count
      * @return the n most recent builds
      * @since 1.507

File: test/src/main/java/org/jvnet/hudson/test/HudsonTestCase.java
Patch:
@@ -1815,6 +1815,7 @@ public HtmlPage goTo(String relative) throws IOException, SAXException {
         }
 
         public Page goTo(String relative, String expectedContentType) throws IOException, SAXException {
+            while (relative.startsWith("/")) relative = relative.substring(1);
             Page p;
             try {
                 p = super.getPage(getContextPath() + relative);

File: test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java
Patch:
@@ -99,7 +99,7 @@ public void _testBasicWorkflow() throws Exception {
         assertTrue(monitor.getLogFile().exists());
 
         // should be no warning/error now
-        HtmlPage manage = wc.goTo("/manage");
+        HtmlPage manage = wc.goTo("manage");
         assertEquals(0,manage.selectNodes("//*[class='error']").size());
         assertEquals(0,manage.selectNodes("//*[class='warning']").size());
 
@@ -121,7 +121,7 @@ public void _testBasicWorkflow() throws Exception {
     }
 
     private HtmlForm getRekeyForm(WebClient wc) throws IOException, SAXException {
-        return wc.goTo("/manage").getFormByName("rekey");
+        return wc.goTo("manage").getFormByName("rekey");
     }
 
     private HtmlButton getButton(HtmlForm form, int index) {

File: core/src/main/java/hudson/model/ParameterValue.java
Patch:
@@ -125,7 +125,7 @@ public final String getName() {
      * @param build
      *      The build for which this parameter is being used. Never null.
      * @deprecated as of 1.344
-     *      Use {@link #buildEnvVars(Run, EnvVars)} instead.
+     *      Use {@link #buildEnvironment(Run, EnvVars)} instead.
      */
     public void buildEnvVars(AbstractBuild<?,?> build, Map<String,String> env) {
         if (env instanceof EnvVars) {
@@ -139,7 +139,7 @@ public void buildEnvVars(AbstractBuild<?,?> build, Map<String,String> env) {
         // otherwise no-op by default
     }
 
-    /** @deprecated Use {@link #buildEnvVars(Run, EnvVars)} instead. */
+    /** @deprecated Use {@link #buildEnvironment(Run, EnvVars)} instead. */
     @Deprecated
     public void buildEnvVars(AbstractBuild<?,?> build, EnvVars env) {
         if (Util.isOverridden(ParameterValue.class, getClass(), "buildEnvironment", Run.class, EnvVars.class)) {

File: core/src/main/java/hudson/model/ParameterValue.java
Patch:
@@ -125,7 +125,7 @@ public final String getName() {
      * @param build
      *      The build for which this parameter is being used. Never null.
      * @deprecated as of 1.344
-     *      Use {@link #buildEnvVars(Run, EnvVars)} instead.
+     *      Use {@link #buildEnvironment(Run, EnvVars)} instead.
      */
     public void buildEnvVars(AbstractBuild<?,?> build, Map<String,String> env) {
         if (env instanceof EnvVars) {
@@ -139,7 +139,7 @@ public void buildEnvVars(AbstractBuild<?,?> build, Map<String,String> env) {
         // otherwise no-op by default
     }
 
-    /** @deprecated Use {@link #buildEnvVars(Run, EnvVars)} instead. */
+    /** @deprecated Use {@link #buildEnvironment(Run, EnvVars)} instead. */
     @Deprecated
     public void buildEnvVars(AbstractBuild<?,?> build, EnvVars env) {
         if (Util.isOverridden(ParameterValue.class, getClass(), "buildEnvironment", Run.class, EnvVars.class)) {

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2063,7 +2063,7 @@ public Summary(boolean worse, String message) {
         if(Functions.isArtifactsPermissionEnabled()) {
           checkPermission(ARTIFACTS);
         }
-        return new DirectoryBrowserSupport(this, getArtifactManager().root(), project.getDisplayName() + ' ' + getDisplayName(), "package.png", true);
+        return new DirectoryBrowserSupport(this, getArtifactManager().root(), Messages.Run_ArtifactsBrowserTitle(project.getDisplayName(), getDisplayName()), "package.png", true);
     }
 
     /**

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -1980,7 +1980,8 @@ private File expandVariablesForDirectory(String base, Item item) {
         return new File(expandVariablesForDirectory(base, item.getFullName(), item.getRootDir().getPath()));
     }
 
-    private static String expandVariablesForDirectory(String base, String itemFullName, String itemRootDir) {
+    @Restricted(NoExternalUse.class)
+    static String expandVariablesForDirectory(String base, String itemFullName, String itemRootDir) {
         return Util.replaceMacro(base, ImmutableMap.of(
                 "JENKINS_HOME", Jenkins.getInstance().getRootDir().getPath(),
                 "ITEM_ROOTDIR", itemRootDir,

File: core/src/test/java/jenkins/model/JenkinsDescriptorTest.java
Patch:
@@ -36,6 +36,7 @@
 import java.io.File;
 
 import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
@@ -62,10 +63,11 @@ private boolean isError(String buildsDir) {
     }
 
     @Test
-    @PrepareForTest(fullyQualifiedNames={"jenkins.model.Jenkins"})
+    @PrepareForTest(Jenkins.class)
     public void testBuildDirValidation() {
         PowerMockito.mockStatic(Jenkins.class);
         PowerMockito.when(Jenkins.getInstance()).thenReturn(jenkins);
+        PowerMockito.when(Jenkins.expandVariablesForDirectory(anyString(), anyString(), anyString())).thenCallRealMethod();
         when(jenkins.getRootDir()).thenReturn(new File(".").getAbsoluteFile());
 
         assertTrue(isOK("$JENKINS_HOME/foo/$ITEM_FULL_NAME"));

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -625,7 +625,7 @@ private void closeChannel() {
                 logger.log(Level.SEVERE, "Failed to terminate channel to " + getDisplayName(), e);
             }
             for (ComputerListener cl : ComputerListener.all())
-                cl.onOffline(this);
+                cl.onOffline(this, offlineCause);
         }
     }
 

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -625,7 +625,7 @@ private void closeChannel() {
                 logger.log(Level.SEVERE, "Failed to terminate channel to " + getDisplayName(), e);
             }
             for (ComputerListener cl : ComputerListener.all())
-                cl.onOffline(this);
+                cl.onOffline(this, offlineCause);
         }
     }
 

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -140,7 +140,7 @@ public boolean perform(AbstractBuild<?,?> build, Launcher launcher, BuildListene
             return true;
         }
 
-        if (build.getResult().isWorseThan(Result.UNSTABLE) && onlyIfSuccessful) {
+        if (onlyIfSuccessful && build.getResult() != null && build.getResult().isWorseThan(Result.UNSTABLE)) {
             listener.getLogger().println(Messages.ArtifactArchiver_SkipBecauseOnlyIfSuccessful());
             return true;
         }

File: core/src/main/java/hudson/tasks/ArtifactArchiver.java
Patch:
@@ -140,7 +140,7 @@ public boolean perform(AbstractBuild<?,?> build, Launcher launcher, BuildListene
             return true;
         }
 
-        if (build.getResult().isWorseThan(Result.UNSTABLE) && onlyIfSuccessful) {
+        if (onlyIfSuccessful && build.getResult() != null && build.getResult().isWorseThan(Result.UNSTABLE)) {
             listener.getLogger().println(Messages.ArtifactArchiver_SkipBecauseOnlyIfSuccessful());
             return true;
         }

File: core/src/main/java/hudson/scm/NullSCM.java
Patch:
@@ -58,7 +58,7 @@ public class NullSCM extends SCM {
         return NullChangeLogParser.INSTANCE;
     }
 
-    @Extension
+    @Extension(ordinal = Integer.MAX_VALUE)
     public static class DescriptorImpl extends SCMDescriptor<NullSCM> {
         public DescriptorImpl() {
             super(null);

File: core/src/main/java/hudson/scm/NullSCM.java
Patch:
@@ -58,7 +58,7 @@ public ChangeLogParser createChangeLogParser() {
         return NullChangeLogParser.INSTANCE;
     }
 
-    @Extension
+    @Extension(ordinal = Integer.MAX_VALUE)
     public static class DescriptorImpl extends SCMDescriptor<NullSCM> {
         public DescriptorImpl() {
             super(null);

File: core/src/main/java/jenkins/model/PeepholePermalink.java
Patch:
@@ -103,6 +103,9 @@ protected File getPermalinkFile(Job<?,?> job) {
         } catch (InterruptedException e) {
             LOGGER.log(Level.WARNING, "Failed to read permalink cache:" + f, e);
             // if we fail to read the cache, fall back to the re-computation
+        } catch (NumberFormatException e) { 
+            LOGGER.log(Level.WARNING, "Failed to parse the build number in the permalink cache:" + f, e);
+            // if we fail to read the cache, fall back to the re-computation
         } catch (IOException e) {
             // this happens when the symlink doesn't exist
             // (and it cannot be distinguished from the case when the actual I/O error happened

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -43,6 +43,7 @@
 import hudson.scm.ChangeLogSet.Entry;
 import hudson.scm.NullChangeLogParser;
 import hudson.scm.SCM;
+import hudson.scm.SCMRevisionState;
 import hudson.slaves.NodeProperty;
 import hudson.slaves.WorkspaceList;
 import hudson.slaves.WorkspaceList.Lease;
@@ -625,7 +626,7 @@ public void defaultCheckout() throws IOException, InterruptedException {
                         SCM scm = project.getScm();
                         for (SCMListener l : SCMListener.all()) {
                             try {
-                                l.onCheckout(build, scm, build.getWorkspace(), listener, changeLogFile, project.pollingBaseline);
+                                l.onCheckout(build, scm, build.getWorkspace(), listener, changeLogFile, build.getAction(SCMRevisionState.class));
                             } catch (Exception e) {
                                 throw new IOException(e);
                             }

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -159,7 +159,7 @@ public abstract class AbstractProject<P extends AbstractProject<P,R>,R extends A
     /**
      * State returned from {@link SCM#poll(AbstractProject, Launcher, FilePath, TaskListener, SCMRevisionState)}.
      */
-    volatile transient SCMRevisionState pollingBaseline = null;
+    private volatile transient SCMRevisionState pollingBaseline = null;
 
     private transient LazyBuildMixIn<P,R> buildMixIn;
 

File: core/src/main/java/hudson/scm/NullSCM.java
Patch:
@@ -48,9 +48,9 @@ public class NullSCM extends SCM {
         return PollingResult.NO_CHANGES;
     }
 
-    @Override public void checkout(Run<?,?> build, Launcher launcher, FilePath remoteDir, TaskListener listener, File changeLogFile) throws IOException, InterruptedException {
-        if (changeLogFile != null) {
-            createEmptyChangeLog(changeLogFile, listener, "log");
+    @Override public void checkout(Run<?,?> build, Launcher launcher, FilePath workspace, TaskListener listener, File changelogFile, SCMRevisionState baseline) throws IOException, InterruptedException {
+        if (changelogFile != null) {
+            createEmptyChangeLog(changelogFile, listener, "log");
         }
     }
 

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -43,6 +43,7 @@
 import hudson.scm.ChangeLogSet.Entry;
 import hudson.scm.NullChangeLogParser;
 import hudson.scm.SCM;
+import hudson.scm.SCMRevisionState;
 import hudson.slaves.NodeProperty;
 import hudson.slaves.WorkspaceList;
 import hudson.slaves.WorkspaceList.Lease;
@@ -625,7 +626,7 @@ public void defaultCheckout() throws IOException, InterruptedException {
                         SCM scm = project.getScm();
                         for (SCMListener l : SCMListener.all()) {
                             try {
-                                l.onCheckout(build, scm, build.getWorkspace(), listener, changeLogFile, project.pollingBaseline);
+                                l.onCheckout(build, scm, build.getWorkspace(), listener, changeLogFile, build.getAction(SCMRevisionState.class));
                             } catch (Exception e) {
                                 throw new IOException(e);
                             }

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -159,7 +159,7 @@ public abstract class AbstractProject<P extends AbstractProject<P,R>,R extends A
     /**
      * State returned from {@link SCM#poll(AbstractProject, Launcher, FilePath, TaskListener, SCMRevisionState)}.
      */
-    volatile transient SCMRevisionState pollingBaseline = null;
+    private volatile transient SCMRevisionState pollingBaseline = null;
 
     private transient LazyBuildMixIn<P,R> buildMixIn;
 

File: core/src/main/java/hudson/scm/NullSCM.java
Patch:
@@ -48,9 +48,9 @@ public class NullSCM extends SCM {
         return PollingResult.NO_CHANGES;
     }
 
-    @Override public void checkout(Run<?,?> build, Launcher launcher, FilePath remoteDir, TaskListener listener, File changeLogFile) throws IOException, InterruptedException {
-        if (changeLogFile != null) {
-            createEmptyChangeLog(changeLogFile, listener, "log");
+    @Override public void checkout(Run<?,?> build, Launcher launcher, FilePath workspace, TaskListener listener, File changelogFile, SCMRevisionState baseline) throws IOException, InterruptedException {
+        if (changelogFile != null) {
+            createEmptyChangeLog(changelogFile, listener, "log");
         }
     }
 

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -420,7 +420,7 @@ public final String getUrl() {
                         LOGGER.log(Level.FINER, "using {0}{1} for {2} from {3}", new Object[] {base, shortUrl, this, uri});
                         return base + shortUrl;
                     } else {
-                        LOGGER.log(Level.FINER, "irrelevant {0} for {1} from {2}", new Object[] {last.getObject(), this, uri});
+                        LOGGER.log(Level.FINER, "irrelevant {0} for {1} from {2}", new Object[] {view.getViewName(), this, uri});
                     }
                 } else {
                     LOGGER.log(Level.FINER, "inapplicable {0} for {1} from {2}", new Object[] {last.getObject(), this, uri});

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -501,7 +501,7 @@ public void doDoDelete( StaplerRequest req, StaplerResponse rsp ) throws IOExcep
             if (a instanceof View) {
                 url = ((View) a).getUrl();
                 break;
-            } else if (a instanceof ViewGroup) {
+            } else if (a instanceof ViewGroup && a != this) {
                 url = ((ViewGroup) a).getUrl();
                 break;
             }

File: core/src/main/java/hudson/model/Cause.java
Patch:
@@ -71,7 +71,7 @@ public abstract class Cause {
 
     /**
      * Called when the cause is registered.
-     * @since TODO
+     * @since 1.568
      */
     public void onAddedTo(@Nonnull Run build) {
         if (build instanceof AbstractBuild) {
@@ -90,7 +90,7 @@ public void onAddedTo(AbstractBuild build) {
      * Called when a build is loaded from disk.
      * Useful in case the cause needs to keep a build reference;
      * this ought to be {@code transient}.
-     * @since TODO
+     * @since 1.568
      */
     public void onLoad(@Nonnull Run<?,?> build) {
         if (build instanceof AbstractBuild) {

File: core/src/main/java/hudson/scm/ChangeLogAnnotator.java
Patch:
@@ -76,6 +76,7 @@ public abstract class ChangeLogAnnotator implements ExtensionPoint {
      *      are registered, the object may already contain some markups when this
      *      method is invoked. Never null. {@link MarkupText#getText()} on this instance
      *      will return the same string as {@link Entry#getMsgEscaped()}.
+     * @since 1.568
      */
     public void annotate(Run<?,?> build, Entry change, MarkupText text) {
         if (build instanceof AbstractBuild && Util.isOverridden(ChangeLogAnnotator.class, getClass(), "annotate", AbstractBuild.class, Entry.class, MarkupText.class)) {

File: core/src/main/java/hudson/scm/ChangeLogParser.java
Patch:
@@ -41,6 +41,9 @@
  */
 public abstract class ChangeLogParser {
 
+    /**
+     * @since 1.568
+     */
     public ChangeLogSet<? extends Entry> parse(Run build, RepositoryBrowser<?> browser, File changelogFile) throws IOException, SAXException {
         if (build instanceof AbstractBuild && Util.isOverridden(ChangeLogParser.class, getClass(), "parse", AbstractBuild.class, File.class)) {
             return parse((AbstractBuild) build, changelogFile);

File: core/src/main/java/hudson/scm/SCMDescriptor.java
Patch:
@@ -114,7 +114,7 @@ public boolean isBrowserReusable(T x, T y) {
      * When this method returns false, this {@link SCM} will not appear in the configuration screen
      * for the given project. The default is true for {@link AbstractProject} but false for {@link Job}.
      *
-     * @since 1.294
+     * @since 1.568
      */
     public boolean isApplicable(Job project) {
         if (project instanceof AbstractProject) {

File: core/src/main/java/jenkins/triggers/SCMTriggerItem.java
Patch:
@@ -43,7 +43,7 @@
 
 /**
  * The item type accepted by {@link SCMTrigger}.
- * @since TODO
+ * @since 1.568
  */
 public interface SCMTriggerItem {
 
@@ -86,7 +86,6 @@ class SCMTriggerItems {
          * See whether an item can be coerced to {@link SCMTriggerItem}.
          * @param item any item
          * @return itself, if a {@link SCMTriggerItem}, or an adapter, if an {@link hudson.model.SCMedItem}, else null
-         * @since TODO
          */
         @SuppressWarnings("deprecation")
         public static @CheckForNull SCMTriggerItem asSCMTriggerItem(Item item) {

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1940,7 +1940,7 @@ public FeedItem(Entry e, int idx) {
             }
 
             AbstractBuild<?,?> getBuild() {
-                return (AbstractBuild) e.getParent().getBuild();
+                return e.getParent().build;
             }
         }
 

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1380,7 +1380,7 @@ private PollingResult _poll(TaskListener listener, SCM scm) throws IOException,
                 // give time for slaves to come online if we are right after reconnection (JENKINS-8408)
                 long running = Jenkins.getInstance().getInjector().getInstance(Uptime.class).getUptime();
                 long remaining = TimeUnit2.MINUTES.toMillis(10)-running;
-                if (remaining>0) {
+                if (remaining>0 && /* this logic breaks tests of polling */!Functions.getIsUnitTest()) {
                     listener.getLogger().print(Messages.AbstractProject_AwaitingWorkspaceToComeOnline(remaining/1000));
                     listener.getLogger().println( " (" + workspaceOfflineReason.name() + ")");
                     return NO_CHANGES;

File: test/src/main/java/org/jvnet/hudson/test/ExtractResourceWithChangesSCM.java
Patch:
@@ -122,13 +122,13 @@ public void saveToChangeLog(File changeLogFile, ExtractChangeLogParser.ExtractCh
         stream.println("<extractChanges>");
         stream.println("<entry>");
         stream.println("<zipFile>" + escapeForXml(changeLog.getZipFile()) + "</zipFile>");
-        stream.println("<file>");
 
         for (String fileName : changeLog.getAffectedPaths()) {
+            stream.println("<file>");
             stream.println("<fileName>" + escapeForXml(fileName) + "</fileName>");
+            stream.println("</file>");
         }
 
-        stream.println("</file>");
         stream.println("</entry>");
         stream.println("</extractChanges>");
 

File: core/src/main/java/hudson/tasks/BuildTrigger.java
Patch:
@@ -247,11 +247,9 @@ public int compare(Dependency lhs, Dependency rhs) {
                         logger.println(Messages.BuildTrigger_Disabled(ModelHyperlinkNote.encodeTo(p)));
                         continue;
                     }
-                    // this is not completely accurate, as a new build might be triggered
-                    // between these calls
                     boolean scheduled = p.scheduleBuild(p.getQuietPeriod(), new UpstreamCause((Run)build), buildActions.toArray(new Action[buildActions.size()]));
                     if (Jenkins.getInstance().getItemByFullName(p.getFullName()) == p) {
-                        String name = ModelHyperlinkNote.encodeTo(p) + " #" + p.getNextBuildNumber();
+                        String name = ModelHyperlinkNote.encodeTo(p);
                         if (scheduled) {
                             logger.println(Messages.BuildTrigger_Triggering(name));
                         } else {

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -466,7 +466,7 @@ public void onClosed(Channel c, IOException cause) {
         String remoteFs = node.getRemoteFS();
         if(_isUnix && !remoteFs.contains("/") && remoteFs.contains("\\"))
             log.println("WARNING: "+remoteFs+" looks suspiciously like Windows path. Maybe you meant "+remoteFs.replace('\\','/')+"?");
-        FilePath root = new FilePath(channel,node.getRemoteFS());
+        FilePath root = new FilePath(channel,remoteFs);
 
         // reference counting problem is known to happen, such as JENKINS-9017, and so as a preventive measure
         // we pin the base classloader so that it'll never get GCed. When this classloader gets released,

File: core/src/main/java/hudson/tools/ToolInstallation.java
Patch:
@@ -153,7 +153,7 @@ public DescribableList<ToolProperty<?>,ToolPropertyDescriptor> getProperties() {
      * Performs a necessary variable/environment/context expansion.
      *
      * @param node
-     *      Node that this tool is used in. Should not be null
+     *      Node that this tool is used in.
      * @param envs
      *      Set of environment variables to expand any references.
      * @param listener

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -469,7 +469,7 @@ public BuildListener getListener() {
          * @param wsl
          *      Passed in for the convenience. The returned path must be registered to this object.
          */
-        protected Lease decideWorkspace(Node n, WorkspaceList wsl) throws InterruptedException, IOException {
+        protected Lease decideWorkspace(@Nonnull Node n, WorkspaceList wsl) throws InterruptedException, IOException {
             String customWorkspace = getProject().getCustomWorkspace();
             if (customWorkspace != null) {
                 // we allow custom workspaces to be concurrently used between jobs.
@@ -482,7 +482,7 @@ protected Lease decideWorkspace(Node n, WorkspaceList wsl) throws InterruptedExc
         public Result run(@Nonnull BuildListener listener) throws Exception {
             final Node node = getCurrentNode();
             if (node == null) {
-                throw new AbortException(Messages.AbstractBuild_NoExecutorError());
+                throw new IllegalStateException("Cannot run the build outside executor threads");
             }
             
             assert builtOn==null;
@@ -576,7 +576,7 @@ public Result run(@Nonnull BuildListener listener) throws Exception {
         protected Launcher createLauncher(@Nonnull BuildListener listener) throws IOException, InterruptedException {
             final Node currentNode = getCurrentNode();
             if (currentNode == null) {
-                throw new AbortException(Messages.AbstractBuild_NoExecutorError());
+                throw new IllegalStateException("Launchers can be created inside executor threads only");
             }
             Launcher l = currentNode.createLauncher(listener);
 

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -1198,7 +1198,7 @@ public void doConfigDotXml(StaplerRequest req, StaplerResponse rsp)
             rsp.setContentType("application/xml");
             Node node = getNode();
             if (node == null) {
-                throw new ServletException("No such node " + nodeName);
+                HttpResponses.notFound();
             }
             Jenkins.XSTREAM2.toXMLUTF8(node, rsp.getOutputStream());
             return;

File: core/src/main/java/hudson/slaves/AbstractCloudComputer.java
Patch:
@@ -57,7 +57,7 @@ public HttpResponse doDoDelete() throws IOException {
         checkPermission(DELETE);
         try {
             T node = getNode();
-            if (node != null) { // Node need to terminate nodes again
+            if (node != null) { // No need to terminate nodes again
                 node.terminate();
             }
             return new HttpRedirect("..");

File: core/src/main/java/hudson/tools/ToolInstallation.java
Patch:
@@ -42,7 +42,6 @@
 import com.thoughtworks.xstream.converters.UnmarshallingContext;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
 import jenkins.model.Jenkins;
 
 /**

File: core/src/main/java/hudson/tasks/junit/CaseResult.java
Patch:
@@ -373,7 +373,7 @@ public int getFailedSince() {
         if (failedSince==0 && getFailCount()==1) {
             CaseResult prev = getPreviousResult();
             if(prev!=null && !prev.isPassed())
-                this.failedSince = prev.failedSince;
+                this.failedSince = prev.getFailedSince();
             else if (getOwner() != null) {
                 this.failedSince = getOwner().getNumber();
             } else {

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -722,7 +722,7 @@ public void enable() throws IOException {
     @Override
     public BallColor getIconColor() {
         if(isDisabled())
-            return BallColor.DISABLED;
+            return isBuilding() ? BallColor.DISABLED_ANIME : BallColor.DISABLED;
         else
             return super.getIconColor();
     }

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -732,7 +732,9 @@ public void doInstall(StaplerRequest req, StaplerResponse rsp) throws IOExceptio
                     String pluginName = n.substring(0, index);
                     String siteName = n.substring(index + 1);
                     UpdateSite updateSite = Jenkins.getInstance().getUpdateCenter().getById(siteName);
-                    if (siteName != null) {
+                    if (updateSite == null) {
+                        throw new Failure("No such update center: " + siteName);
+                    } else {
                         UpdateSite.Plugin plugin = updateSite.getPlugin(pluginName);
                         if (plugin != null) {
                             if (p != null) {

File: core/src/main/java/hudson/tasks/BuildTrigger.java
Patch:
@@ -247,11 +247,9 @@ public int compare(Dependency lhs, Dependency rhs) {
                         logger.println(Messages.BuildTrigger_Disabled(ModelHyperlinkNote.encodeTo(p)));
                         continue;
                     }
-                    // this is not completely accurate, as a new build might be triggered
-                    // between these calls
                     boolean scheduled = p.scheduleBuild(p.getQuietPeriod(), new UpstreamCause((Run)build), buildActions.toArray(new Action[buildActions.size()]));
                     if (Jenkins.getInstance().getItemByFullName(p.getFullName()) == p) {
-                        String name = ModelHyperlinkNote.encodeTo(p) + " #" + p.getNextBuildNumber();
+                        String name = ModelHyperlinkNote.encodeTo(p);
                         if (scheduled) {
                             logger.println(Messages.BuildTrigger_Triggering(name));
                         } else {

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -159,7 +159,7 @@ public abstract class AbstractProject<P extends AbstractProject<P,R>,R extends A
     /**
      * State returned from {@link SCM#poll(AbstractProject, Launcher, FilePath, TaskListener, SCMRevisionState)}.
      */
-    private volatile transient SCMRevisionState pollingBaseline = null;
+    volatile transient SCMRevisionState pollingBaseline = null;
 
     private transient LazyBuildMixIn<P,R> buildMixIn;
 
@@ -1940,7 +1940,7 @@ public FeedItem(Entry e, int idx) {
             }
 
             AbstractBuild<?,?> getBuild() {
-                return e.getParent().build;
+                return (AbstractBuild) e.getParent().getBuild();
             }
         }
 

File: core/src/main/java/hudson/lifecycle/UnixLifecycle.java
Patch:
@@ -80,7 +80,7 @@ public void restart() throws IOException, InterruptedException {
 
         // exec to self
         String exe = args.get(0);
-        LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));
+        LIBC.execvp(exe, new StringArray(args.toArray(new String[args.size()])));
         throw new IOException("Failed to exec '"+exe+"' "+LIBC.strerror(Native.getLastError()));
     }
 

File: core/src/main/java/hudson/util/jna/GNUCLibrary.java
Patch:
@@ -55,7 +55,8 @@ public interface GNUCLibrary extends Library {
     int chdir(String dir);
     int getdtablesize();
 
-    int execv(String file, StringArray args);
+    int execv(String path, StringArray args);
+    int execvp(String file, StringArray args);
     int setenv(String name, String value,int replace);
     int unsetenv(String name);
     void perror(String msg);

File: core/src/test/java/jenkins/model/PeepholePermalinkTest.java
Patch:
@@ -39,6 +39,7 @@ public class PeepholePermalinkTest {
     @Test public void symlinks() throws Exception {
         File link = new File(tmp.getRoot(), "link");
         PeepholePermalink.writeSymlink(link, "stuff");
+        PeepholePermalink.symlinks.clear(); // so we actually test the filesystem
         assertEquals("stuff", PeepholePermalink.readSymlink(link));
     }
 

File: core/src/main/java/hudson/console/ModelHyperlinkNote.java
Patch:
@@ -38,7 +38,7 @@ public static String encodeTo(User u, String text) {
     }
 
     public static String encodeTo(Item item) {
-        return encodeTo(item,item.getDisplayName());
+        return encodeTo(item,item.getFullDisplayName());
     }
 
     public static String encodeTo(Item item, String text) {

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -721,7 +721,7 @@ public void enable() throws IOException {
     @Override
     public BallColor getIconColor() {
         if(isDisabled())
-            return BallColor.DISABLED;
+            return isBuilding() ? BallColor.DISABLED_ANIME : BallColor.DISABLED;
         else
             return super.getIconColor();
     }

File: core/src/main/java/hudson/lifecycle/WindowsServiceLifecycle.java
Patch:
@@ -132,7 +132,8 @@ public void restart() throws IOException, InterruptedException {
         else            executable = new File(home, "hudson.exe");
         if (!executable.exists())   executable = new File(home, "jenkins.exe");
 
-        int r = new LocalLauncher(task).launch().cmds(executable, "restart")
+        // use restart! to run hudson/jenkins.exe restart in a separate process, so it doesn't kill itself
+        int r = new LocalLauncher(task).launch().cmds(executable, "restart!")
                 .stdout(task).pwd(home).join();
         if(r!=0)
             throw new IOException(baos.toString());

File: core/src/main/java/hudson/lifecycle/WindowsServiceLifecycle.java
Patch:
@@ -132,7 +132,8 @@ public void restart() throws IOException, InterruptedException {
         else            executable = new File(home, "hudson.exe");
         if (!executable.exists())   executable = new File(home, "jenkins.exe");
 
-        int r = new LocalLauncher(task).launch().cmds(executable, "restart")
+        // use restart! to run hudson/jenkins.exe restart in a separate process, so it doesn't kill itself
+        int r = new LocalLauncher(task).launch().cmds(executable, "restart!")
                 .stdout(task).pwd(home).join();
         if(r!=0)
             throw new IOException(baos.toString());

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -133,7 +133,7 @@ private User(String id, String fullName) {
      * {@link hudson.security.SecurityRealm#getUserIdStrategy()}
      *
      * @return the {@link jenkins.model.IdStrategy} for use with {@link User} instances.
-     * @since 1.560
+     * @since 1.566
      */
     @Nonnull
     public static IdStrategy idStrategy() {
@@ -497,7 +497,7 @@ public static void clear() {
 
     /**
      * Called when changing the {@link IdStrategy}.
-     * @since 1.560
+     * @since 1.566
      */
     public static void rekey() {
         final IdStrategy strategy = idStrategy();
@@ -712,7 +712,6 @@ private void rss(StaplerRequest req, StaplerResponse rsp, String suffix, RunList
      * {@link java.util.concurrent.locks.ReadWriteLock#readLock()} for normal access and
      * {@link java.util.concurrent.locks.ReadWriteLock#writeLock()} for {@link #rekey()} or any other operation
      * that requires operating on the map as a whole.
-     * @since 1.560
      */
     private static final ReadWriteLock byNameLock = new ReentrantReadWriteLock();
 

File: core/src/main/java/hudson/security/SecurityRealm.java
Patch:
@@ -156,7 +156,7 @@ public abstract class SecurityRealm extends AbstractDescribableImpl<SecurityReal
      *
      * @return the {@link IdStrategy} that should be used for turning
      *         {@link org.acegisecurity.userdetails.UserDetails#getUsername()} into an ID.
-     * @since 1.560
+     * @since 1.566
      */
     public IdStrategy getUserIdStrategy() {
         return IdStrategy.CASE_INSENSITIVE;
@@ -170,7 +170,7 @@ public IdStrategy getUserIdStrategy() {
      *
      * @return the {@link IdStrategy} that should be used for turning {@link hudson.security.GroupDetails#getName()}
      *         into an ID.
-     * @since 1.560
+     * @since 1.566
      */
     public IdStrategy getGroupIdStrategy() {
         return getUserIdStrategy();

File: core/src/main/java/jenkins/model/IdStrategyDescriptor.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * The {@link hudson.model.Descriptor} for {@link jenkins.model.IdStrategy}
  *
- * @since 1.560
+ * @since 1.566
  */
 public abstract class IdStrategyDescriptor extends Descriptor<IdStrategy> {
 

File: core/src/main/java/jenkins/model/GlobalProjectNamingStrategyConfiguration.java
Patch:
@@ -46,7 +46,7 @@ public boolean configure(StaplerRequest req, JSONObject json) throws hudson.mode
             final JSONObject strategyObject = optJSONObject.getJSONObject("namingStrategy");
             final String className = strategyObject.getString("stapler-class");
             try {
-                Class clazz = Class.forName(className);
+                Class clazz = Class.forName(className, true, Jenkins.getInstance().getPluginManager().uberClassLoader);
                 final ProjectNamingStrategy strategy = (ProjectNamingStrategy) req.bindJSON(clazz, strategyObject);
                 j.setProjectNamingStrategy(strategy);
             } catch (ClassNotFoundException e) {

File: core/src/main/java/jenkins/model/GlobalProjectNamingStrategyConfiguration.java
Patch:
@@ -46,7 +46,7 @@ public boolean configure(StaplerRequest req, JSONObject json) throws hudson.mode
             final JSONObject strategyObject = optJSONObject.getJSONObject("namingStrategy");
             final String className = strategyObject.getString("stapler-class");
             try {
-                Class clazz = Class.forName(className);
+                Class clazz = Class.forName(className, true, Jenkins.getInstance().getPluginManager().uberClassLoader);
                 final ProjectNamingStrategy strategy = (ProjectNamingStrategy) req.bindJSON(clazz, strategyObject);
                 j.setProjectNamingStrategy(strategy);
             } catch (ClassNotFoundException e) {

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -238,7 +238,7 @@ public URL getIndexPage() {
         return idx != null && idx.toString().contains(shortName) ? idx : null;
     }
 
-    private String computeShortName(Manifest manifest, File archive) {
+    static String computeShortName(Manifest manifest, File archive) {
         // use the name captured in the manifest, as often plugins
         // depend on the specific short name in its URLs.
         String n = manifest.getMainAttributes().getValue("Short-Name");

File: core/src/main/java/hudson/PluginManager.java
Patch:
@@ -721,7 +721,9 @@ public void doInstall(StaplerRequest req, StaplerResponse rsp) throws IOExceptio
                     String pluginName = n.substring(0, index);
                     String siteName = n.substring(index + 1);
                     UpdateSite updateSite = Jenkins.getInstance().getUpdateCenter().getById(siteName);
-                    if (siteName != null) {
+                    if (updateSite == null) {
+                        throw new Failure("No such update center: " + siteName);
+                    } else {
                         UpdateSite.Plugin plugin = updateSite.getPlugin(pluginName);
                         if (plugin != null) {
                             if (p != null) {

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2081,7 +2081,6 @@ public void disableSecurity() {
         useSecurity = null;
         setSecurityRealm(SecurityRealm.NO_AUTHENTICATION);
         authorizationStrategy = AuthorizationStrategy.UNSECURED;
-        markupFormatter = null;
     }
 
     public void setProjectNamingStrategy(ProjectNamingStrategy ns) {

File: test/src/test/java/hudson/model/ListViewTest.java
Patch:
@@ -119,6 +119,7 @@ private void checkLinkFromItemExistsAndIsValid(Item item, ItemGroup ig, Item top
         FreeStyleProject p2 = sub.createProject(FreeStyleProject.class, "p2");
         FreeStyleProject p3 = top.createProject(FreeStyleProject.class, "p3");
         ListView v = new ListView("v");
+        v.setRecurse(true);
         top.addView(v);
         v.add(p1);
         v.add(p2);

File: core/src/main/java/hudson/util/RingBufferLogHandler.java
Patch:
@@ -35,12 +35,14 @@
  */
 public class RingBufferLogHandler extends Handler {
 
+    private static final int DEFAULT_RING_BUFFER_SIZE = Integer.getInteger(RingBufferLogHandler.class.getName() + ".defaultSize", 256);
+
     private int start = 0;
     private final LogRecord[] records;
     private volatile int size = 0;
 
     public RingBufferLogHandler() {
-        this(256);
+        this(DEFAULT_RING_BUFFER_SIZE);
     }
 
     public RingBufferLogHandler(int ringSize) {

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -279,6 +279,7 @@
 import java.util.Set;
 import java.util.StringTokenizer;
 import java.util.TreeSet;
+import java.util.TreeMap;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.ExecutionException;
@@ -2959,7 +2960,7 @@ public Map<String,Map<String,String>> getAllThreadDumps() throws IOException, In
                 r.put(e.getKey(), Collections.singletonMap("Failed to retrieve thread dump",sw.toString()));
             }
         }
-        return r;
+        return Collections.unmodifiableSortedMap(new TreeMap<String, Map<String, String>>(r));
     }
 
     @RequirePOST

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -474,7 +474,7 @@ public String getName() {
 
     @Exported
     public LoadStatistics getLoadStatistics() {
-        return LabelAtom.get(nodeName != null ? nodeName : "").loadStatistics;
+        return LabelAtom.get(nodeName != null ? nodeName : Jenkins.getInstance().getSelfLabel().toString()).loadStatistics;
     }
 
     public BuildTimelineWidget getTimeline() {

File: test/src/test/java/hudson/model/ListViewTest.java
Patch:
@@ -119,6 +119,7 @@ private void checkLinkFromItemExistsAndIsValid(Item item, ItemGroup ig, Item top
         FreeStyleProject p2 = sub.createProject(FreeStyleProject.class, "p2");
         FreeStyleProject p3 = top.createProject(FreeStyleProject.class, "p3");
         ListView v = new ListView("v");
+        v.setRecurse(true);
         top.addView(v);
         v.add(p1);
         v.add(p2);

File: test/src/test/java/hudson/model/UserTest.java
Patch:
@@ -207,7 +207,7 @@ public IdStrategy getUserIdStrategy() {
         assertEquals("john.smith@acme.org", User.idStrategy().keyFor(user.getId()));
         assertEquals("john.smith@acme.org", User.idStrategy().filenameOf(user.getId()));
         assertEquals("John.Smith@acme.org", User.idStrategy().keyFor(user2.getId()));
-        assertEquals("~john.~smith$0040acme.org", User.idStrategy().filenameOf(user2.getId()));
+        assertEquals("~john.~smith@acme.org", User.idStrategy().filenameOf(user2.getId()));
         user2 = User.get("john.smith@ACME.ORG");
         assertEquals("Users should have the same id.", user.getId(), user2.getId());
         assertEquals("john.smith@acme.org", User.idStrategy().keyFor(user2.getId()));

File: core/src/main/java/hudson/lifecycle/WindowsServiceLifecycle.java
Patch:
@@ -113,8 +113,7 @@ public void rewriteHudsonWar(File by) throws IOException {
         FileWriter w = new FileWriter(copyFiles, true);
         try {
             w.write(by.getAbsolutePath()+'>'+getHudsonWar().getAbsolutePath()+'\n');
-        }
-        finally {
+        } finally {
             w.close();
         }
     }

File: core/src/main/java/hudson/util/io/ZipArchiver.java
Patch:
@@ -72,10 +72,9 @@ public void visit(final File f, final String _relativePath) throws IOException {
             FileInputStream in = new FileInputStream(f);
             try {
                 int len;
-                while((len=in.read(buf))>0)
+                while((len=in.read(buf))>=0)
                     zip.write(buf,0,len);
-            }
-            finally {
+            } finally {
                 in.close();
             }
             zip.closeEntry();

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -474,7 +474,7 @@ public String getName() {
 
     @Exported
     public LoadStatistics getLoadStatistics() {
-        return LabelAtom.get(nodeName != null ? nodeName : "").loadStatistics;
+        return LabelAtom.get(nodeName != null ? nodeName : Jenkins.getInstance().getSelfLabel().toString()).loadStatistics;
     }
 
     public BuildTimelineWidget getTimeline() {

File: core/src/main/java/hudson/model/RunParameterDefinition.java
Patch:
@@ -122,11 +122,11 @@ public RunList getBuilds() {
         // use getFilter() method so we dont have to worry about null filter value.
         switch (getFilter()) {
             case COMPLETED:
-                return getProject().getBuilds().overThresholdOnly(Result.ABORTED);
+                return getProject().getBuilds().overThresholdOnly(Result.ABORTED).completedOnly();
             case SUCCESSFUL:
-                return getProject().getBuilds().overThresholdOnly(Result.UNSTABLE);
+                return getProject().getBuilds().overThresholdOnly(Result.UNSTABLE).completedOnly();
             case STABLE	:
-                return getProject().getBuilds().overThresholdOnly(Result.SUCCESS);
+                return getProject().getBuilds().overThresholdOnly(Result.SUCCESS).completedOnly();
             default:
                 return getProject().getBuilds();
         }

File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java
Patch:
@@ -509,7 +509,7 @@ public R get(int n) {
             return getById(idOnDisk.get(lo-1));
         case EXACT:
             if (hi<=0)                 return null;
-            R r = load(idOnDisk.get(hi-1), null);
+            R r = getById(idOnDisk.get(hi-1));
             if (r==null)               return null;
 
             int found = getNumberOf(r);

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1830,7 +1830,7 @@ public static String humanReadableByteSize(long size){
     public static String breakableString(final String plain) {
 
         return plain.replaceAll("([\\p{Punct}&&[^;]]+\\w)", "<wbr>$1")
-                .replaceAll("([^\\p{Punct}\\s-]{10})(?=[^\\p{Punct}\\s-]{3})", "$1<wbr>")
+                .replaceAll("([^\\p{Punct}\\s-]{20})(?=[^\\p{Punct}\\s-]{10})", "$1<wbr>")
         ;
     }
 

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -279,6 +279,7 @@
 import java.util.Set;
 import java.util.StringTokenizer;
 import java.util.TreeSet;
+import java.util.TreeMap;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.ExecutionException;
@@ -2954,7 +2955,7 @@ public Map<String,Map<String,String>> getAllThreadDumps() throws IOException, In
                 r.put(e.getKey(), Collections.singletonMap("Failed to retrieve thread dump",sw.toString()));
             }
         }
-        return r;
+        return Collections.unmodifiableSortedMap(new TreeMap<String, Map<String, String>>(r));
     }
 
     public synchronized TopLevelItem doCreateItem( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1834,7 +1834,7 @@ public static String humanReadableByteSize(long size){
     public static String breakableString(final String plain) {
 
         return plain.replaceAll("([\\p{Punct}&&[^;]]+\\w)", "<wbr>$1")
-                .replaceAll("([^\\p{Punct}\\s-]{10})(?=[^\\p{Punct}\\s-]{3})", "$1<wbr>")
+                .replaceAll("([^\\p{Punct}\\s-]{20})(?=[^\\p{Punct}\\s-]{10})", "$1<wbr>")
         ;
     }
 

File: core/src/main/java/hudson/lifecycle/UnixLifecycle.java
Patch:
@@ -79,7 +79,7 @@ public void restart() throws IOException, InterruptedException {
         }
 
         // exec to self
-        String exe = Daemon.getCurrentExecutable();
+        String exe = args.get(0);
         LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));
         throw new IOException("Failed to exec '"+exe+"' "+LIBC.strerror(Native.getLastError()));
     }

File: core/src/main/java/hudson/lifecycle/UnixLifecycle.java
Patch:
@@ -79,7 +79,7 @@ public void restart() throws IOException, InterruptedException {
         }
 
         // exec to self
-        String exe = Daemon.getCurrentExecutable();
+        String exe = args.get(0);
         LIBC.execv(exe, new StringArray(args.toArray(new String[args.size()])));
         throw new IOException("Failed to exec '"+exe+"' "+LIBC.strerror(Native.getLastError()));
     }

File: core/src/main/java/jenkins/model/lazy/LazyBuildMixIn.java
Patch:
@@ -183,6 +183,7 @@ public final synchronized RunT newBuild() throws IOException {
         try {
             RunT lastBuild = getBuildClass().getConstructor(asJob().getClass()).newInstance(asJob());
             builds.put(lastBuild);
+            lastBuild.getPreviousBuild(); // JENKINS-20662: create connection to previous build
             return lastBuild;
         } catch (InstantiationException e) {
             throw new Error(e);

File: core/src/main/java/jenkins/diagnostics/ooom/Problem.java
Patch:
@@ -256,7 +256,7 @@ protected SortedMap<Integer,BuildPtr> scan() {
                         BuildPtr o = builds.put(n, b);
                         if (o != null) {
                             LOGGER.log(WARNING, "Multiple builds have the same number: {0} vs. {1}", new Object[] {o, b});
-                            offenders.add(o);
+                            offenders.add(b.compareTo(o) > 0 ? o : b);
                         }
                     }
                 } catch (XPathExpressionException e) {

File: test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java
Patch:
@@ -876,7 +876,7 @@ public DumbSlave createSlave(String labels, EnvVars env) throws Exception {
     public DumbSlave createSlave(String nodeName, String labels, EnvVars env) throws Exception {
         synchronized (jenkins) {
             DumbSlave slave = new DumbSlave(nodeName, "dummy",
-    				createTmpDir().getPath(), "1", Node.Mode.NORMAL, labels==null?"":labels, createComputerLauncher(env), RetentionStrategy.NOOP, Collections.EMPTY_LIST);
+    				createTmpDir().getPath(), "1", Node.Mode.NORMAL, labels==null?"":labels, createComputerLauncher(env), RetentionStrategy.NOOP, Collections.EMPTY_LIST);                        
     		jenkins.addNode(slave);
     		return slave;
     	}

File: core/src/main/java/hudson/model/queue/Tasks.java
Patch:
@@ -116,7 +116,7 @@ public static Authentication getDefaultAuthenticationOf(Task t) {
      * in case some {@link QueueItemAuthenticator#authenticate(hudson.model.Queue.Item)} takes (for example) actions into consideration.
      * @param t a task
      * @return an authentication as specified by some {@link QueueItemAuthenticator#authenticate(hudson.model.Queue.Task)}; else {@link #getDefaultAuthenticationOf}
-     * @since TODO
+     * @since 1.560
      */
     public static @Nonnull Authentication getAuthenticationOf(@Nonnull Task t) {
         for (QueueItemAuthenticator qia : QueueItemAuthenticatorConfiguration.get().getAuthenticators()) {

File: core/src/main/java/jenkins/security/QueueItemAuthenticator.java
Patch:
@@ -55,7 +55,7 @@ public abstract class QueueItemAuthenticator extends AbstractDescribableImpl<Que
      *      returning non-null will determine the identity. If null is returned, the next
      *      configured {@link QueueItemAuthenticator} will be given a chance to authenticate
      *      the executor. If everything fails, fall back to {@link Task#getDefaultAuthentication()}.
-     * @since TODO
+     * @since 1.560
      */
     public @CheckForNull Authentication authenticate(Queue.Task task) {
         if (Util.isOverridden(QueueItemAuthenticator.class, getClass(), "authenticate", Queue.Item.class)) {

File: core/src/main/java/jenkins/triggers/ReverseBuildTrigger.java
Patch:
@@ -77,6 +77,7 @@
  * so run implicitly at the end of the upstream build,
  * when used on a pair of {@link AbstractProject}s.
  * Otherwise directly listens for the upstream build to complete.
+ * @since 1.560
  */
 @SuppressWarnings("rawtypes")
 public final class ReverseBuildTrigger extends Trigger<Job> implements DependencyDeclarer {

File: core/src/main/java/hudson/model/ReconfigurableDescribable.java
Patch:
@@ -25,6 +25,8 @@
 
 import hudson.model.Descriptor.FormException;
 import hudson.slaves.NodeProperty;
+import javax.annotation.CheckForNull;
+import javax.annotation.Nonnull;
 import net.sf.json.JSONObject;
 import org.kohsuke.stapler.StaplerRequest;
 
@@ -77,5 +79,5 @@ public interface ReconfigurableDescribable<T extends ReconfigurableDescribable<T
      * @return
      *      The new instance. To not to create an instance of a describable, return null.
      */
-    T reconfigure(StaplerRequest req, JSONObject form) throws FormException;
+    @CheckForNull T reconfigure(@Nonnull StaplerRequest req, @CheckForNull JSONObject form) throws FormException;
 }

File: core/src/main/java/jenkins/model/lazy/LazyBuildMixIn.java
Patch:
@@ -280,7 +280,7 @@ public interface LazyLoadingRun<JobT extends Job<JobT,RunT> & Queue.Task & LazyB
 
     /**
      * Accompanying helper for the run type.
-     * Stateful but should be held in a {@code transient} field.
+     * Stateful but should be held in a {@code transient final} field.
      */
     public static abstract class RunMixIn<JobT extends Job<JobT,RunT> & Queue.Task & LazyBuildMixIn.LazyLoadingJob<JobT,RunT>, RunT extends Run<JobT,RunT> & LazyLoadingRun<JobT,RunT>> {
 

File: core/src/main/java/hudson/model/listeners/RunListener.java
Patch:
@@ -235,7 +235,7 @@ public static void fireFinalized(Run r) {
     }
 
     /**
-     * Fires the {@link #onFinalized(Run)} event.
+     * Fires the {@link #onDeleted} event.
      */
     public static void fireDeleted(Run r) {
         for (RunListener l : all()) {

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -108,6 +108,7 @@ public boolean accept(File child) {
                         item = (V) Items.load( parent, subdir );
                     }else{
                         Logger.getLogger( ItemGroupMixIn.class.getName() ).log( Level.WARNING, "could not find file " + xmlFile.getFile());
+                        continue;
                     }
                 } else {
                     item.onLoad(parent, subdir.getName());

File: cli/src/main/java/hudson/cli/CLI.java
Patch:
@@ -29,7 +29,7 @@
 import hudson.remoting.Pipe;
 import hudson.remoting.RemoteInputStream;
 import hudson.remoting.RemoteOutputStream;
-import hudson.remoting.SocketInputStream;
+import hudson.remoting.SocketChannelStream;
 import hudson.remoting.SocketOutputStream;
 
 import javax.crypto.SecretKey;
@@ -201,7 +201,7 @@ public void close() throws IOException {
         } else {
             s = new Socket();
             s.connect(clip.endpoint,3000);
-            out = new SocketOutputStream(s);
+            out = SocketChannelStream.out(s);
         }
 
         closables.add(new Closeable() {
@@ -210,7 +210,7 @@ public void close() throws IOException {
             }
         });
 
-        Connection c = new Connection(new SocketInputStream(s),out);
+        Connection c = new Connection(SocketChannelStream.in(s),out);
 
         switch (clip.version) {
         case 1:

File: cli/src/main/java/hudson/cli/Connection.java
Patch:
@@ -23,8 +23,7 @@
  */
 package hudson.cli;
 
-import hudson.remoting.SocketInputStream;
-import hudson.remoting.SocketOutputStream;
+import hudson.remoting.SocketChannelStream;
 import org.apache.commons.codec.binary.Base64;
 
 import javax.crypto.Cipher;
@@ -63,7 +62,7 @@ public class Connection {
     public final DataOutputStream dout;
 
     public Connection(Socket socket) throws IOException {
-        this(new SocketInputStream(socket),new SocketOutputStream(socket));
+        this(SocketChannelStream.in(socket),SocketChannelStream.out(socket));
     }
 
     public Connection(InputStream in, OutputStream out) {

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -102,7 +102,9 @@ public boolean accept(File child) {
                 // Try to retain the identity of an existing child object if we can.
                 V item = (V) parent.getItem(subdir.getName());
                 if (item == null) {
-                    item = (V) Items.load(parent,subdir);
+                    if (Items.getConfigFile( subdir ).exists()) {
+                        item = (V) Items.load( parent, subdir );
+                    }
                 } else {
                     item.onLoad(parent, subdir.getName());
                 }

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1657,7 +1657,8 @@ private WorkspaceOfflineReason workspaceOffline(R build) throws IOException, Int
         Label label = getAssignedLabel();
 
         if (isAllSuitableNodesOffline(build)) {
-            if (label.getClouds().isEmpty()) {
+            //We need to ask jenkins about clouds. Label can be null. 
+            if (!Jenkins.getInstance().clouds.isEmpty()) {
                 // An Ondemand slave can do this, doesnt matter if online now
                 for (  Cloud c : Jenkins.getInstance().clouds) {
                     if(c.canProvision(label)) {
@@ -1666,6 +1667,7 @@ private WorkspaceOfflineReason workspaceOffline(R build) throws IOException, Int
                     }
                 }
             }
+            
             return WorkspaceOfflineReason.all_suitable_nodes_are_offline;
         }
 

File: core/src/main/java/hudson/util/XStream2.java
Patch:
@@ -145,6 +145,7 @@ private void init() {
         addImmutableType(Result.class);
 
         registerConverter(new RobustCollectionConverter(getMapper(),getReflectionProvider()),10);
+        registerConverter(new RobustMapConverter(getMapper()), 10);
         registerConverter(new ImmutableMapConverter(getMapper(),getReflectionProvider()),10);
         registerConverter(new ImmutableSortedSetConverter(getMapper(),getReflectionProvider()),10);
         registerConverter(new ImmutableSetConverter(getMapper(),getReflectionProvider()),10);

File: core/src/main/java/hudson/matrix/MatrixProject.java
Patch:
@@ -802,7 +802,8 @@ public boolean isFingerprintConfigured() {
         return false;
     }
 
-    protected void buildDependencyGraph(DependencyGraph graph) {
+    @Override protected void buildDependencyGraph(DependencyGraph graph) {
+        super.buildDependencyGraph(graph);
         publishers.buildDependencyGraph(this,graph);
         builders.buildDependencyGraph(this,graph);
         buildWrappers.buildDependencyGraph(this,graph);

File: core/src/main/java/hudson/model/Project.java
Patch:
@@ -175,7 +175,8 @@ public Publisher getPublisher(Descriptor<Publisher> descriptor) {
         return null;
     }
 
-    protected void buildDependencyGraph(DependencyGraph graph) {
+    @Override protected void buildDependencyGraph(DependencyGraph graph) {
+        super.buildDependencyGraph(graph);
         getPublishersList().buildDependencyGraph(this,graph);
         getBuildersList().buildDependencyGraph(this,graph);
         getBuildWrappersList().buildDependencyGraph(this,graph);

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1786,7 +1786,7 @@ public void doBuildWithParameters(StaplerRequest req, StaplerResponse rsp) throw
      * Schedules a new SCM polling command.
      */
     public void doPolling( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {
-        BuildAuthorizationToken.checkPermission(this, authToken, req, rsp);
+        BuildAuthorizationToken.checkPermission((Job) this, authToken, req, rsp);
         schedulePolling();
         rsp.sendRedirect(".");
     }

File: core/src/main/java/hudson/slaves/OfflineCause.java
Patch:
@@ -109,7 +109,7 @@ public static class UserCause extends SimpleOfflineCause {
 
         public UserCause(User user, String message) {
             super(hudson.slaves.Messages._SlaveComputer_DisconnectedBy(
-                    user.getId(),
+                    user!=null ? user.getId() : Jenkins.ANONYMOUS.getName(),
                     message != null ? " : " + message : ""
             ));
             this.user = user;

File: core/src/main/java/hudson/tools/JDKInstaller.java
Patch:
@@ -389,6 +389,7 @@ public URL locate(TaskListener log, Platform platform, CPU cpu) throws IOExcepti
 
         HttpMethodBase m = new GetMethod(primary.filepath);
         hc.getState().addCookie(new Cookie(".oracle.com","gpw_e24",".", "/", -1, false));
+        hc.getState().addCookie(new Cookie(".oracle.com","oraclelicense","accept-securebackup-cookie", "/", -1, false));
         try {
             while (true) {
                 if (totalPageCount++>16) // looping too much

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -712,7 +712,7 @@ protected final boolean performAllBuildSteps(BuildListener listener, Iterable<?
                 if ((bs instanceof Publisher && ((Publisher)bs).needsToRunAfterFinalized()) ^ phase)
                     try {
                         if (!perform(bs,listener)) {
-                            LOGGER.fine(MessageFormat.format("{0} : {1} failed", AbstractBuild.this.toString(), bs));
+                            LOGGER.log(Level.FINE, "{0} : {1} failed", new Object[] {AbstractBuild.this, bs});
                             r = false;
                         }
                     } catch (Exception e) {
@@ -776,7 +776,7 @@ protected final boolean preBuild(BuildListener listener,Collection<? extends Bui
         protected final boolean preBuild(BuildListener listener,Iterable<? extends BuildStep> steps) {
             for (BuildStep bs : steps)
                 if (!bs.prebuild(AbstractBuild.this,listener)) {
-                    LOGGER.fine(MessageFormat.format("{0} : {1} failed", AbstractBuild.this.toString(), bs));
+                    LOGGER.log(Level.FINE, "{0} : {1} failed", new Object[] {AbstractBuild.this, bs});
                     return false;
                 }
             return true;

File: core/src/main/java/hudson/model/Build.java
Patch:
@@ -34,14 +34,13 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.text.MessageFormat;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Collection;
 import java.util.List;
 import java.util.logging.Logger;
+import java.util.logging.Level;
 
-import static hudson.model.Result.ABORTED;
 import static hudson.model.Result.FAILURE;
 
 /**
@@ -197,7 +196,7 @@ public void cleanUp(BuildListener listener) throws Exception {
         private boolean build(BuildListener listener, Collection<Builder> steps) throws IOException, InterruptedException {
             for( BuildStep bs : steps ) {
                 if(!perform(bs,listener)) {
-                    LOGGER.fine(MessageFormat.format("{0} : {1} failed", Build.this.toString(), bs));
+                    LOGGER.log(Level.FINE, "{0} : {1} failed", new Object[] {Build.this, bs});
                     return false;
                 }
                 

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -719,7 +719,9 @@ protected final boolean performAllBuildSteps(BuildListener listener, Iterable<?
                         String msg = "Publisher " + bs.getClass().getName() + " aborted due to exception";
                         e.printStackTrace(listener.error(msg));
                         LOGGER.log(WARNING, msg, e);
-                        setResult(Result.FAILURE);
+                        if (phase) {
+                            setResult(Result.FAILURE);
+                        }
                     }
             }
             return r;

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -422,7 +422,7 @@ public int compareTo(RunT that) {
 
     public void setResult(Result r) {
         // state can change only when we are building
-        assert state==State.BUILDING;
+        assert state==State.BUILDING : state;
 
         // result can only get worse
         if(result==null) {

File: core/src/main/java/hudson/cli/CopyJobCommand.java
Patch:
@@ -51,7 +51,6 @@ public String getShortDescription() {
 
     protected int run() throws Exception {
         Jenkins jenkins = Jenkins.getInstance();
-        jenkins.checkPermission(Item.CREATE);
 
         if (jenkins.getItemByFullName(dst)!=null) {
             stderr.println("Job '"+dst+"' already exists");

File: core/src/main/java/hudson/cli/CreateJobCommand.java
Patch:
@@ -23,8 +23,6 @@
  */
 package hudson.cli;
 
-import hudson.model.ModifiableItemGroup;
-import hudson.model.TopLevelItem;
 import jenkins.model.Jenkins;
 import hudson.Extension;
 import hudson.model.Item;
@@ -48,7 +46,6 @@ public String getShortDescription() {
 
     protected int run() throws Exception {
         Jenkins h = Jenkins.getInstance();
-        h.checkPermission(Item.CREATE);
 
         if (h.getItemByFullName(name)!=null) {
             stderr.println("Job '"+name+"' already exists");

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -206,6 +206,7 @@ protected String redirectAfterCreateItem(StaplerRequest req, TopLevelItem result
     @SuppressWarnings({"unchecked"})
     public synchronized <T extends TopLevelItem> T copy(T src, String name) throws IOException {
         acl.checkPermission(Item.CREATE);
+        src.checkPermission(Item.EXTENDED_READ);
 
         T result = (T)createProject(src.getDescriptor(),name,false);
 
@@ -235,6 +236,7 @@ public synchronized TopLevelItem createProjectFromXML(String name, InputStream x
         if (parent.getItem(name) != null) {
             throw new IllegalArgumentException(parent.getDisplayName() + " already contains an item '" + name + "'");
         }
+        // TODO what if we have no DISCOVER permission on the existing job?
 
         // place it as config.xml
         File configXml = Items.getConfigFile(getRootDirFor(name)).getFile();
@@ -269,6 +271,7 @@ public synchronized TopLevelItem createProject( TopLevelItemDescriptor type, Str
         Jenkins.getInstance().getProjectNamingStrategy().checkName(name);
         if(parent.getItem(name)!=null)
             throw new IllegalArgumentException("Project of the name "+name+" already exists");
+        // TODO problem with DISCOVER as noted above
 
         TopLevelItem item = type.newInstance(parent, name);
         try {

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3392,7 +3392,7 @@ public void run() {
      * Gets the {@link Authentication} object that represents the user
      * associated with the current request.
      */
-    public static Authentication getAuthentication() {
+    public static @Nonnull Authentication getAuthentication() {
         Authentication a = SecurityContextHolder.getContext().getAuthentication();
         // on Tomcat while serving the login page, this is null despite the fact
         // that we have filters. Looking at the stack trace, Tomcat doesn't seem to

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -377,7 +377,7 @@ public boolean isEditable() {
     /**
      * Enables or disables automatic refreshes of the view.
      * By default, automatic refreshes are enabled.
-     * @since TODO: define a version
+     * @since 1.557
      */
     public boolean isAutomaticRefreshEnabled() {
         return true;

File: core/src/main/java/hudson/model/Queue.java
Patch:
@@ -646,7 +646,7 @@ public synchronized boolean cancel(Task p) {
     
     public synchronized boolean cancel(Item item) {
         LOGGER.log(Level.FINE, "Cancelling {0} item#{1}", new Object[] {item.task, item.id});
-        boolean r = item.leave(this);
+        boolean r = item.cancel(this);
 
         LeftItem li = new LeftItem(item);
         li.enter(this);

File: core/src/main/java/hudson/model/ParameterValue.java
Patch:
@@ -166,7 +166,7 @@ public void buildEnvVars(AbstractBuild<?,?> build, EnvVars env) {
      *      never null.
      * @param build
      *      The build for which this parameter is being used. Never null.
-     * @since TODO
+     * @since 1.556
      */
     public void buildEnvironment(Run<?,?> build, EnvVars env) {
         if (build instanceof AbstractBuild) {

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -770,7 +770,7 @@ public int getNumber() {
     /**
      * Called by {@link RunMap} to obtain a reference to this run.
      * @see jenkins.model.lazy.LazyBuildMixIn.RunMixIn#createReference
-     * @since TODO
+     * @since 1.556
      */
     protected BuildReference<RunT> createReference() {
         return new BuildReference<RunT>(getId(), _this());
@@ -780,7 +780,7 @@ protected BuildReference<RunT> createReference() {
      * Called by {@link RunMap} to drop bi-directional links in preparation for
      * deleting a build.
      * @see jenkins.model.lazy.LazyBuildMixIn.RunMixIn#dropLinks
-     * @since TODO
+     * @since 1.556
      */
     protected void dropLinks() {
         if(nextBuild!=null)

File: core/src/main/java/jenkins/model/ParameterizedJobMixIn.java
Patch:
@@ -65,7 +65,7 @@
 /**
  * Allows a {@link Job} to make use of {@link ParametersDefinitionProperty} and be scheduled in various ways.
  * Stateless so there is no need to keep an instance of it in a field.
- * @since TODO
+ * @since 1.556
  */
 @SuppressWarnings("unchecked") // AbstractItem.getParent does not correctly override; scheduleBuild2 inherently untypable
 public abstract class ParameterizedJobMixIn<JobT extends Job<JobT, RunT> & ParameterizedJobMixIn.ParameterizedJob & Queue.Task, RunT extends Run<JobT, RunT> & Queue.Executable> {

File: core/src/main/java/jenkins/model/lazy/LazyBuildMixIn.java
Patch:
@@ -51,7 +51,7 @@
  * Provides method implementations for some abstract {@link Job} methods,
  * as well as some methods which are not abstract but which you should override.
  * <p>Should be kept in a {@code transient} field in the job.
- * @since TODO
+ * @since 1.556
  */
 @SuppressWarnings({"unchecked", "rawtypes"}) // BuildHistoryWidget, and AbstractItem.getParent
 public abstract class LazyBuildMixIn<JobT extends Job<JobT,RunT> & Queue.Task & LazyBuildMixIn.LazyLoadingJob<JobT,RunT>, RunT extends Run<JobT,RunT> & LazyBuildMixIn.LazyLoadingRun<JobT,RunT>> {

File: test/src/test/java/hudson/model/MyViewsPropertyTest.java
Patch:
@@ -224,6 +224,7 @@ public void testGetACL() throws IOException {
 
     @Test
     public void testCheckPermission() throws IOException {
+        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());
         User user = User.get("User");
         User user2 = User.get("User2");
         MyViewsProperty property = new MyViewsProperty(Messages.Hudson_ViewName());
@@ -260,6 +261,7 @@ public void testCheckPermission() throws IOException {
 
     @Test
     public void testHasPermission() throws IOException {
+        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());
         User user = User.get("User");
         User user2 = User.get("User2");
         MyViewsProperty property = new MyViewsProperty(Messages.Hudson_ViewName());

File: test/src/test/java/hudson/model/NodeTest.java
Patch:
@@ -209,8 +209,7 @@ public void testHasPermission() throws Exception {
         j.jenkins.setCrumbIssuer(null);
         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);
         j.jenkins.setSecurityRealm(realm);
-        User user = User.get("John Smith");
-
+        User user = realm.createAccount("John Smith","abcdef");
         SecurityContextHolder.getContext().setAuthentication(user.impersonate());
         assertFalse("Current user should not have permission read.", node.hasPermission(Permission.READ));
         auth.add(Computer.CONFIGURE, user.getId());

File: test/src/test/java/hudson/model/ProjectTest.java
Patch:
@@ -492,14 +492,14 @@ public void testGetRelationship() throws Exception{
     
     @Test
     public void testDoCancelQueue() throws Exception{
-        User user = User.get("John Smith", true, Collections.emptyMap());
         FreeStyleProject project = j.createFreeStyleProject("project");
         GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();   
         j.jenkins.setAuthorizationStrategy(auth);
         j.jenkins.setCrumbIssuer(null);
         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);
         j.jenkins.setSecurityRealm(realm); 
-        SecurityContextHolder.getContext().setAuthentication(user.impersonate()); 
+        User user = realm.createAccount("John Smith", "password");
+        SecurityContextHolder.getContext().setAuthentication(user.impersonate());
         try{
             project.doCancelQueue(null, null);
             fail("User should not have permission to build project");

File: test/src/test/java/hudson/model/UserTest.java
Patch:
@@ -404,8 +404,8 @@ public void testCanDelete() throws IOException {
         j.jenkins.setCrumbIssuer(null);
         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);
         j.jenkins.setSecurityRealm(realm);
-        User user = User.get("John Smith");
-        User user2 = User.get("John Smith2");
+        User user = realm.createAccount("John Smith","password");
+        User user2 = realm.createAccount("John Smith2","password");
         user2.save();
         SecurityContextHolder.getContext().setAuthentication(user.impersonate());
         assertFalse("User should not be able delete because he does not have administer permission.", user2.canDelete());

File: test/src/test/java/hudson/model/NodeTest.java
Patch:
@@ -72,7 +72,8 @@ public class NodeTest {
     @Before
     public void before(){
        addDynamicLabel = false;
-       notTake = false; 
+       notTake = false;
+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
     }
     
     @Test
@@ -209,6 +210,7 @@ public void testHasPermission() throws Exception {
         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false);
         j.jenkins.setSecurityRealm(realm);
         User user = User.get("John Smith");
+
         SecurityContextHolder.getContext().setAuthentication(user.impersonate());
         assertFalse("Current user should not have permission read.", node.hasPermission(Permission.READ));
         auth.add(Computer.CONFIGURE, user.getId());

File: test/src/test/java/hudson/model/ComputerConfigDotXmlTest.java
Patch:
@@ -48,6 +48,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.JenkinsRule;
+import org.jvnet.hudson.test.JenkinsRule.DummySecurityRealm;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 import org.mockito.Mock;
@@ -71,6 +72,7 @@ public void setUp() throws Exception {
 
         MockitoAnnotations.initMocks(this);
         computer = spy(rule.createSlave().toComputer());
+        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());
         oldSecurityContext = ACL.impersonate(User.get("user").impersonate());
     }
 

File: core/src/main/java/jenkins/security/ImpersonatingUserDetailsService.java
Patch:
@@ -43,7 +43,7 @@ protected UserDetails attemptToImpersonate(String username, RuntimeException e)
         if (u!=null) {
             LastGrantedAuthoritiesProperty p = u.getProperty(LastGrantedAuthoritiesProperty.class);
             if (p!=null)
-                return new org.acegisecurity.userdetails.User(username,null,true,true,true,true,
+                return new org.acegisecurity.userdetails.User(username,"",true,true,true,true,
                         p.getAuthorities());
         }
 

File: core/src/main/java/hudson/search/CollectionSearchIndex.java
Patch:
@@ -52,13 +52,14 @@ public void find(String token, List<SearchItem> result) {
 
     public void suggest(String token, List<SearchItem> result) {
          Collection<SMT> items = all();
-        if(UserSearchProperty.isCaseInsensitive()){ 
+        boolean isCaseSensitive = UserSearchProperty.isCaseInsensitive();
+        if(isCaseSensitive){
           token = token.toLowerCase();
         }
         if(items==null)     return;
         for (SMT o : items) {
             String name = getName(o);
-            if(UserSearchProperty.isCaseInsensitive())
+            if(isCaseSensitive)
                 name=name.toLowerCase();
             if(o!=null && name.contains(token))
                 result.add(o);

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -617,7 +617,7 @@ public void renameTo(String newName) throws IOException {
         }
     }
 
-    @Override public synchronized void delete() throws IOException, InterruptedException {
+    @Override public void delete() throws IOException, InterruptedException {
         super.delete();
         Util.deleteRecursive(getBuildDir());
     }

File: test/src/test/java/hudson/model/ListViewTest.java
Patch:
@@ -128,7 +128,6 @@ private void checkLinkFromItemExistsAndIsValid(Item item, ItemGroup ig, Item top
         MockFolder stuff = top.createProject(MockFolder.class, "stuff");
         Items.move(p1, stuff);
         p3.delete();
-        Thread.sleep(500); // TODO working around crappy JENKINS-19446 fix
         top.createProject(FreeStyleProject.class, "p3");
         assertEquals(new HashSet<TopLevelItem>(Arrays.asList(p1, p2)), new HashSet<TopLevelItem>(v.getItems()));
         top.renameTo("upper");

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -35,6 +35,7 @@
 import hudson.Util;
 import hudson.model.Descriptor.FormException;
 import hudson.model.labels.LabelAtomPropertyDescriptor;
+import hudson.model.listeners.ItemListener;
 import hudson.scm.ChangeLogSet;
 import hudson.scm.ChangeLogSet.Entry;
 import hudson.search.CollectionSearchIndex;

File: core/src/main/java/hudson/cli/ConsoleCommand.java
Patch:
@@ -77,7 +77,7 @@ protected int run() throws Exception {
             } else {
                 InputStream in = run.getLogInputStream();
                 IOUtils.skip(in,pos);
-                IOUtils.copy(new InputStreamReader(in,run.getCharset()),w);
+                org.apache.commons.io.IOUtils.copy(new InputStreamReader(in,run.getCharset()),w);
             }
         } finally {
             w.flush(); // this pointless flush needed to work around SSHD-154
@@ -134,7 +134,7 @@ long get() {
 
             return rb.get();
         } finally {
-            IOUtils.closeQuietly(in);
+            org.apache.commons.io.IOUtils.closeQuietly(in);
         }
     }
 

File: core/src/main/java/hudson/model/DownloadService.java
Patch:
@@ -28,7 +28,6 @@
 import hudson.ExtensionPoint;
 import hudson.util.FormValidation;
 import hudson.util.FormValidation.Kind;
-import hudson.util.IOUtils;
 import hudson.util.QuotedStringTokenizer;
 import hudson.util.TextFile;
 import jenkins.model.Jenkins;
@@ -45,6 +44,7 @@
 import org.kohsuke.stapler.StaplerResponse;
 
 import static hudson.util.TimeUnit2.DAYS;
+import org.apache.commons.io.IOUtils;
 
 /**
  * Service for plugins to periodically retrieve update data files

File: core/src/main/java/hudson/model/UpdateSite.java
Patch:
@@ -33,7 +33,6 @@
 import hudson.util.FormValidation;
 import hudson.util.FormValidation.Kind;
 import hudson.util.HttpResponses;
-import hudson.util.IOUtils;
 import hudson.util.TextFile;
 import hudson.util.VersionNumber;
 import jenkins.model.Jenkins;
@@ -69,6 +68,7 @@
 import java.util.logging.Logger;
 
 import static hudson.util.TimeUnit2.*;
+import org.apache.commons.io.IOUtils;
 
 
 /**

File: core/src/main/java/hudson/slaves/SlaveComputer.java
Patch:
@@ -24,7 +24,6 @@
 package hudson.slaves;
 
 import hudson.model.*;
-import hudson.util.IOUtils;
 import hudson.util.io.ReopenableRotatingFileOutputStream;
 import jenkins.model.Jenkins.MasterComputer;
 import hudson.remoting.Channel;
@@ -82,6 +81,7 @@
 import javax.servlet.http.HttpServletResponseWrapper;
 import org.acegisecurity.context.SecurityContext;
 import org.acegisecurity.context.SecurityContextHolder;
+import org.apache.commons.io.IOUtils;
 import org.kohsuke.stapler.ResponseImpl;
 import org.kohsuke.stapler.WebMethod;
 import org.kohsuke.stapler.compression.FilterServletOutputStream;

File: core/src/main/java/hudson/util/TextFile.java
Patch:
@@ -108,7 +108,7 @@ public void write(String text) throws IOException {
 
             return new String(buf,0,read);
         } finally {
-            IOUtils.closeQuietly(r);
+            org.apache.commons.io.IOUtils.closeQuietly(r);
         }
     }
 

File: core/src/main/java/jenkins/diagnosis/HsErrPidList.java
Patch:
@@ -5,7 +5,6 @@
 import hudson.Functions;
 import hudson.Util;
 import hudson.model.AdministrativeMonitor;
-import hudson.util.IOUtils;
 import hudson.util.jna.Kernel32Utils;
 import jenkins.model.Jenkins;
 import org.apache.tools.ant.DirectoryScanner;
@@ -24,6 +23,7 @@
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import org.apache.commons.io.IOUtils;
 
 /**
  * Finds crash dump reports and show them in the UI.

File: core/src/main/java/jenkins/security/DefaultConfidentialStore.java
Patch:
@@ -2,7 +2,6 @@
 
 import hudson.FilePath;
 import hudson.Util;
-import hudson.util.IOUtils;
 import hudson.util.Secret;
 import hudson.util.TextFile;
 import jenkins.model.Jenkins;
@@ -17,6 +16,7 @@
 import java.io.IOException;
 import java.security.GeneralSecurityException;
 import java.security.SecureRandom;
+import org.apache.commons.io.IOUtils;
 
 /**
  * Default portable implementation of {@link ConfidentialStore} that uses

File: core/src/test/java/jenkins/RemotingJarSignatureTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import hudson.remoting.Channel;
 import hudson.remoting.Which;
-import hudson.util.IOUtils;
 import org.apache.commons.io.output.NullOutputStream;
 import org.junit.Assert;
 import org.junit.Test;
@@ -11,6 +10,7 @@
 import java.util.Enumeration;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
+import org.apache.commons.io.IOUtils;
 
 /**
  * @author Kohsuke Kawaguchi

File: core/src/main/java/hudson/model/UpdateCenter.java
Patch:
@@ -88,6 +88,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
+import jenkins.security.DownloadSettings;
 import org.acegisecurity.context.SecurityContextHolder;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
@@ -630,7 +631,7 @@ public List<Plugin> getUpdates() {
     public List<FormValidation> updateAllSites() throws InterruptedException, ExecutionException {
         List <Future<FormValidation>> futures = new ArrayList<Future<FormValidation>>();
         for (UpdateSite site : getSites()) {
-            Future<FormValidation> future = site.updateDirectly(true);
+            Future<FormValidation> future = site.updateDirectly(DownloadSettings.get().isCheckSignature());
             if (future != null) {
                 futures.add(future);
             }

File: test/src/test/java/hudson/model/DownloadServiceTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.kohsuke.stapler.StaplerResponse;
 
 import java.io.IOException;
+import jenkins.security.DownloadSettings;
 
 /**
  * @author Kohsuke Kawaguchi
@@ -40,13 +41,13 @@ public void testPost() throws Exception {
         assertNull(job.getData());
 
         // and now it should work
-        DownloadService.signatureCheck = false;
+        DownloadSettings.get().setCheckSignature(false);
         try {
             createWebClient().goTo("/self/testPost");
             JSONObject d = job.getData();
             assertEquals(hashCode(),d.getInt("hello"));
         } finally {
-            DownloadService.signatureCheck = true;
+            DownloadSettings.get().setCheckSignature(true);
         }
 
         // TODO: test with a signature

File: core/src/main/java/hudson/search/CollectionSearchIndex.java
Patch:
@@ -52,13 +52,14 @@ public void find(String token, List<SearchItem> result) {
 
     public void suggest(String token, List<SearchItem> result) {
          Collection<SMT> items = all();
-        if(UserSearchProperty.isCaseInsensitive()){ 
+        boolean isCaseSensitive = UserSearchProperty.isCaseInsensitive();
+        if(isCaseSensitive){
           token = token.toLowerCase();
         }
         if(items==null)     return;
         for (SMT o : items) {
             String name = getName(o);
-            if(UserSearchProperty.isCaseInsensitive())
+            if(isCaseSensitive)
                 name=name.toLowerCase();
             if(o!=null && name.contains(token))
                 result.add(o);

File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Comparator;
-import java.util.HashMap;
+import java.util.IdentityHashMap;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -431,7 +431,7 @@ public long getSize() {
 
     private static final class FileComparator implements Comparator<VirtualFile> {
         private Collator collator;
-        private final Map<VirtualFile,Boolean> isDirCache = new HashMap<VirtualFile,Boolean>();
+        private final Map<VirtualFile,Boolean> isDirCache = new IdentityHashMap<VirtualFile,Boolean>();
 
         FileComparator(Locale locale) {
             this.collator = Collator.getInstance(locale);

File: core/src/main/java/hudson/FilePath.java
Patch:
@@ -1933,7 +1933,7 @@ public Integer invoke(File base, VirtualChannel channel) throws IOException {
                         @Override public void visit(File f, String relativePath) throws IOException {
                             if (f.isFile()) {
                                 File target = new File(dest, relativePath);
-                                target.getParentFile().mkdirs();
+                                IOUtils.mkdirs(target.getParentFile());
                                 Util.copyFile(f, target);
                                 count.incrementAndGet();
                             }
@@ -1943,6 +1943,7 @@ public Integer invoke(File base, VirtualChannel channel) throws IOException {
                         }
                         @Override public void visitSymlink(File link, String target, String relativePath) throws IOException {
                             try {
+                                IOUtils.mkdirs(new File(dest, relativePath).getParentFile());
                                 Util.createSymlink(dest, target, relativePath, TaskListener.NULL);
                             } catch (InterruptedException x) {
                                 throw (IOException) new IOException(x.toString()).initCause(x);

File: core/src/main/java/hudson/util/ProcessTree.java
Patch:
@@ -359,7 +359,7 @@ public static ProcessTree get() {
     /**
      * Empty process list as a default value if the platform doesn't support it.
      */
-    private static final ProcessTree DEFAULT = new Local() {
+    /*package*/ static final ProcessTree DEFAULT = new Local() {
         public OSProcess get(final Process proc) {
             return new OSProcess(-1) {
                 public OSProcess getParent() {

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -211,7 +211,7 @@ public abstract class Run <JobT extends Job<JobT,RunT>,RunT extends Run<JobT,Run
     /**
      * The current build state.
      */
-    protected volatile transient State state;
+    private volatile transient State state;
 
     private static enum State {
         /**

File: core/src/main/java/hudson/cli/CreateJobCommand.java
Patch:
@@ -72,6 +72,7 @@ protected int run() throws Exception {
             name = name.substring(i + 1);
         }
 
+        Jenkins.checkGoodName(name);
         ig.createProjectFromXML(name, stdin);
         return 0;
     }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3985,6 +3985,8 @@ public static VersionNumber getVersion() {
         // for backward compatibility with <1.75, recognize the tag name "view" as well.
         XSTREAM.alias("view", ListView.class);
         XSTREAM.alias("listView", ListView.class);
+        XSTREAM2.addCriticalField(Jenkins.class, "securityRealm");
+        XSTREAM2.addCriticalField(Jenkins.class, "authorizationStrategy");
         // this seems to be necessary to force registration of converter early enough
         Mode.class.getEnumConstants();
 

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1464,6 +1464,9 @@ public List<String> getLoggerNames() {
     public String getPasswordValue(Object o) {
         if (o==null)    return null;
         if (o instanceof Secret)    return ((Secret)o).getEncryptedValue();
+        if (getIsUnitTest()) {
+            throw new SecurityException("attempted to render plaintext ‘" + o + "’ in password field; use a getter of type Secret instead");
+        }
         return o.toString();
     }
 

File: core/src/main/java/hudson/markup/MyspacePolicy.java
Patch:
@@ -48,7 +48,7 @@ public boolean apply(String s) {
                     "script","noscript",/*"iframe",*/"frameset","frame");
 
             tag("label",    "for");
-            tag("form",     "action",ONSITE_OR_OFFSITE_URL,
+            tag("form",     "action",ONSITE_URL,
                             "method");
             tag("button",   "value", "type");
             tag("input",    "maxlength","checked",

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -766,7 +766,7 @@ public AsynchPeople(View parent) {
 
         {
             StaplerRequest req = Stapler.getCurrentRequest();
-            iconSize = req != null ? Functions.getCookie(req, "iconSize", "32x32") : "32x32";
+            iconSize = req != null ? Functions.validateIconSize(Functions.getCookie(req, "iconSize", "32x32")) : "32x32";
         }
 
         @Override protected void compute() throws Exception {

File: core/src/main/java/hudson/markup/MyspacePolicy.java
Patch:
@@ -66,7 +66,6 @@ public boolean apply(String s) {
             tag("span,div");
             tag("img",      "src",ONSITE_OR_OFFSITE_URL,
                             "hspace","vspace");
-            tag("iframe",   "src");
             tag("link",     "type","rel");
             tag("ul,ol,li,dd,dl,dt,thead,tbody,tfoot");
             tag("table",    "noresize");

File: core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java
Patch:
@@ -85,6 +85,7 @@ protected void onSuccessfulAuthentication(HttpServletRequest request, HttpServle
         // HttpSessionContextIntegrationFilter stores the updated SecurityContext object into this session later
         // (either when a redirect is issued, via its HttpResponseWrapper, or when the execution returns to its
         // doFilter method.
+        request.getSession().invalidate();
         request.getSession();
     }
 

File: core/src/main/java/hudson/util/RemotingDiagnostics.java
Patch:
@@ -202,7 +202,7 @@ public void doIndex(StaplerResponse rsp) throws IOException {
 
         @WebMethod(name="heapdump.hprof")
         public void doHeapDump(StaplerRequest req, StaplerResponse rsp) throws IOException, InterruptedException {
-            owner.checkPermission(Jenkins.ADMINISTER);
+            owner.checkPermission(Jenkins.RUN_SCRIPTS);
             rsp.setContentType("application/octet-stream");
 
             FilePath dump = obtain();

File: core/src/main/java/hudson/tasks/junit/CaseResult.java
Patch:
@@ -331,6 +331,7 @@ public String getPackageName() {
         else            return className.substring(0,idx);
     }
     
+    @Override
     public String getFullName() {
     	return className+'.'+getName();
     }

File: core/src/main/java/hudson/tasks/junit/ClassResult.java
Patch:
@@ -227,6 +227,7 @@ public String getDisplayName() {
     /**
      * @since 1.515
      */
+    @Override
     public String getFullName() {
     	return getParent().getName() + "." + className;
     }

File: core/src/main/java/hudson/tasks/test/AbstractTestResultAction.java
Patch:
@@ -25,7 +25,6 @@
 
 import hudson.Functions;
 import hudson.model.*;
-import hudson.tasks.junit.CaseResult;
 import hudson.util.*;
 import hudson.util.ChartUtil.NumberOnlyBuildLabel;
 
@@ -202,7 +201,7 @@ public TestResult findCorrespondingResult(String id) {
      * 
      * @return List of failed tests from associated test result.
      */
-    public List<CaseResult> getFailedTests() {
+    public List<? extends TestResult> getFailedTests() {
         return Collections.emptyList();
     }
 

File: core/src/main/java/hudson/model/User.java
Patch:
@@ -669,6 +669,7 @@ public boolean canDelete() {
                 r.add(n);
             }
         }
+        Collections.sort(r, String.CASE_INSENSITIVE_ORDER);
         return r;
     }
 

File: core/src/main/java/jenkins/diagnostics/ooom/BuildPtr.java
Patch:
@@ -89,7 +89,7 @@ public void fix(TaskListener listener) throws IOException, InterruptedException
         File dir = new File(job.getRootDir(), "outOfOrderBuilds");
         dir.mkdirs();
         File dst = new File(dir, buildDir.getName());
-        listener.getLogger().println("Renaming "+dir);
+        listener.getLogger().println("Renaming "+buildDir);
         listener.getLogger().println("  -> "+dst);
         if (!buildDir.renameTo(dst)) {
             FilePath bd = new FilePath(buildDir);

File: core/src/main/java/jenkins/diagnostics/ooom/BuildPtr.java
Patch:
@@ -89,7 +89,7 @@ public void fix(TaskListener listener) throws IOException, InterruptedException
         File dir = new File(job.getRootDir(), "outOfOrderBuilds");
         dir.mkdirs();
         File dst = new File(dir, buildDir.getName());
-        listener.getLogger().println("Renaming "+dir);
+        listener.getLogger().println("Renaming "+buildDir);
         listener.getLogger().println("  -> "+dst);
         if (!buildDir.renameTo(dst)) {
             FilePath bd = new FilePath(buildDir);

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2993,6 +2993,8 @@ public static void checkGoodName(String name) throws Failure {
         if(name==null || name.length()==0)
             throw new Failure(Messages.Hudson_NoName());
 
+        if(".".equals(name.trim())) 
+            throw new Failure(Messages.Jenkins_NotAllowedName("."));
         if("..".equals(name.trim())) 
             throw new Failure(Messages.Jenkins_NotAllowedName(".."));
         for( int i=0; i<name.length(); i++ ) {

File: core/src/main/java/hudson/PluginWrapper.java
Patch:
@@ -45,6 +45,7 @@
 import java.util.logging.Logger;
 import static java.util.logging.Level.WARNING;
 
+import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.LogFactory;
 import org.kohsuke.stapler.HttpResponse;
 import org.kohsuke.stapler.HttpResponses;
@@ -213,7 +214,7 @@ public PluginWrapper(PluginManager parent, File archive, Manifest manifest, URL
     }
 
     public String getDisplayName() {
-        return getLongName();
+        return StringUtils.removeStart(getLongName(), "Jenkins ");
     }
 
     public Api getApi() {

File: test/src/test/java/hudson/model/UpdateSiteTest.java
Patch:
@@ -116,6 +116,9 @@ public void shutdownWebserver() throws Exception {
         assertEquals(new HashSet<String>(Arrays.asList("tasks", "dummy")), data.plugins.keySet());
         assertEquals(new URL(url, "tasks.jpi").toString(), data.plugins.get("tasks").url);
         assertEquals("http://nowhere.net/dummy.hpi", data.plugins.get("dummy").url);
+
+        UpdateSite.Plugin tasksPlugin = data.plugins.get("tasks");
+        assertEquals("Wrong name of plugin found", "Task Scanner Plug-in", tasksPlugin.getDisplayName());
     }
 
     @Test public void updateDirectlyWithJson() throws Exception {

File: core/src/main/java/hudson/model/AsyncPeriodicWork.java
Patch:
@@ -90,7 +90,7 @@ protected File getLogFile() {
      * @return 
      *      The logging level as @Level.
      *
-     * @since 1.450
+     * @since 1.551
      */
     protected Level getNormalLoggingLevel() {
         return Level.INFO;
@@ -102,7 +102,7 @@ protected Level getNormalLoggingLevel() {
      * @return 
      *      The logging level as @Level.
      *
-     * @since 1.450
+     * @since 1.551
      */
     protected Level getErrorLoggingLevel() {
         return Level.SEVERE;

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2120,7 +2120,7 @@ public void doDoDelete( StaplerRequest req, StaplerResponse rsp ) throws IOExcep
             req.getView(this, "delete-retry.jelly").forward(req, rsp);  
             return;
         }
-        rsp.sendRedirect2(req.getContextPath()+'/' + (nb!=null ? nb.getUrl() : getParent().getUrl());
+        rsp.sendRedirect2(req.getContextPath()+'/' + (nb!=null ? nb.getUrl() : getParent().getUrl()));
     }
 
     public void setDescription(String description) throws IOException {

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -401,7 +401,7 @@ public void setConcurrentBuild(boolean b) throws IOException {
      * If this project is configured to be always built on this node,
      * return that {@link Node}. Otherwise null.
      */
-    public Label getAssignedLabel() {
+    public @CheckForNull Label getAssignedLabel() {
         if(canRoam)
             return null;
 

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -448,7 +448,7 @@ private boolean isRelevant(Collection<Label> labels, Computer computer) {
         if (labels.contains(null) && node.getMode() == Mode.NORMAL) return true;
 
         for (Label l : labels)
-            if (l.contains(node))
+            if (l != null && l.contains(node))
                 return true;
         return false;
     }

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -401,7 +401,7 @@ public void setConcurrentBuild(boolean b) throws IOException {
      * If this project is configured to be always built on this node,
      * return that {@link Node}. Otherwise null.
      */
-    public Label getAssignedLabel() {
+    public @CheckForNull Label getAssignedLabel() {
         if(canRoam)
             return null;
 

File: core/src/main/java/hudson/model/View.java
Patch:
@@ -448,7 +448,7 @@ private boolean isRelevant(Collection<Label> labels, Computer computer) {
         if (labels.contains(null) && node.getMode() == Mode.NORMAL) return true;
 
         for (Label l : labels)
-            if (l.contains(node))
+            if (l != null && l.contains(node))
                 return true;
         return false;
     }

File: core/src/main/java/hudson/model/queue/CauseOfBlockage.java
Patch:
@@ -92,7 +92,7 @@ public BecauseNodeIsOffline(Node node) {
         }
 
         public String getShortDescription() {
-            return Messages.Queue_NodeOffline(node.getDisplayName());
+            return Messages.Queue_NodeOffline(node.toComputer().getDisplayName());
         }
         
         @Override
@@ -128,7 +128,7 @@ public BecauseNodeIsBusy(Node node) {
         }
 
         public String getShortDescription() {
-            return Messages.Queue_WaitingForNextAvailableExecutorOn(node.getNodeName());
+            return Messages.Queue_WaitingForNextAvailableExecutorOn(node.toComputer().getDisplayName());
         }
         
         @Override

File: core/src/main/java/hudson/model/UsageStatistics.java
Patch:
@@ -156,7 +156,7 @@ public String getStatData() throws IOException {
         o.put("plugins",plugins);
 
         JSONObject jobs = new JSONObject();
-        List<TopLevelItem> items = j.getItems();
+        List<TopLevelItem> items = j.getAllItems(TopLevelItem.class);
         for (TopLevelItemDescriptor d : Items.all()) {
             int cnt=0;
             for (TopLevelItem item : items) {

File: core/src/main/java/hudson/model/UsageStatistics.java
Patch:
@@ -156,7 +156,7 @@ public String getStatData() throws IOException {
         o.put("plugins",plugins);
 
         JSONObject jobs = new JSONObject();
-        List<TopLevelItem> items = j.getItems();
+        List<TopLevelItem> items = j.getAllItems(TopLevelItem.class);
         for (TopLevelItemDescriptor d : Items.all()) {
             int cnt=0;
             for (TopLevelItem item : items) {

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2086,7 +2086,7 @@ public final void keepLog() throws IOException {
     }
 
     public void keepLog(boolean newValue) throws IOException {
-        checkPermission(UPDATE);
+        checkPermission(newValue ? UPDATE : DELETE);
         keepLog = newValue;
         save();
     }

File: core/src/main/java/hudson/model/Actionable.java
Patch:
@@ -97,7 +97,7 @@ public final List<? extends Action> getAllActions() {
         }
         return Collections.unmodifiableList(_actions);
     }
-    private <T extends Actionable> Collection<? extends Action> createFor(TransientActionFactory<T> taf) {
+    private <T> Collection<? extends Action> createFor(TransientActionFactory<T> taf) {
         return taf.createFor(taf.type().cast(this));
     }
 

File: core/src/main/java/jenkins/model/lazy/BuildReference.java
Patch:
@@ -27,7 +27,7 @@
  * and find things in it.
  *
  * @author Kohsuke Kawaguchi
- * @since 1.485 (but as of TODO not a {@link SoftReference})
+ * @since 1.485 (but as of 1.548 not a {@link SoftReference})
  */
 public final class BuildReference<R> {
 
@@ -67,7 +67,7 @@ public int hashCode() {
 
     /**
      * An abstraction of {@link Reference}.
-     * @since TODO
+     * @since 1.548
      */
     public interface Holder<R> {
 
@@ -81,7 +81,7 @@ public interface Holder<R> {
 
     /**
      * Extensible factory for creating build references.
-     * @since TODO
+     * @since 1.548
      */
     public interface HolderFactory extends ExtensionPoint {
 

File: core/src/main/java/jenkins/security/SecurityListener.java
Patch:
@@ -40,7 +40,7 @@
 
 /**
  * Listener notified of various significant events related to security.
- * @since TODO
+ * @since 1.548
  */
 public abstract class SecurityListener implements ExtensionPoint {
     

File: core/src/main/java/hudson/model/Items.java
Patch:
@@ -362,7 +362,7 @@ public int compare(T o1, T o2) {
      * @return the new item (usually the same object as {@code item})
      * @throws IOException if the move fails, or some subsequent step fails (directory might have already been moved)
      * @throws IllegalArgumentException if the move would really be a rename, or the destination cannot accept the item, or the destination already has an item of that name
-     * @since TODO
+     * @since 1.548
      */
     public static <I extends AbstractItem & TopLevelItem> I move(I item, DirectlyModifiableTopLevelItemGroup destination) throws IOException, IllegalArgumentException {
         DirectlyModifiableTopLevelItemGroup oldParent = (DirectlyModifiableTopLevelItemGroup) item.getParent();

File: core/src/main/java/hudson/model/listeners/ItemListener.java
Patch:
@@ -114,7 +114,7 @@ public void onRenamed(Item item, String oldName, String newName) {
      * @param oldFullName the former {@link Item#getFullName}
      * @param newFullName the current {@link Item#getFullName}
      * @see Items#computeRelativeNamesAfterRenaming
-     * @since TODO
+     * @since 1.548
      */
     public void onLocationChanged(Item item, String oldFullName, String newFullName) {}
 
@@ -166,7 +166,7 @@ public static void fireOnUpdated(Item item) {
             l.onUpdated(item);
     }
 
-    /** @since TODO */
+    /** @since 1.548 */
     public static void fireOnDeleted(Item item) {
         for (ItemListener l : all()) {
             l.onDeleted(item);
@@ -177,7 +177,7 @@ public static void fireOnDeleted(Item item) {
      * Calls {@link #onRenamed} and {@link #onLocationChanged} as appropriate.
      * @param rootItem the topmost item whose location has just changed
      * @param oldFullName the previous {@link Item#getFullName}
-     * @since TODO
+     * @since 1.548
      */
     public static void fireLocationChange(Item rootItem, String oldFullName) {
         String prefix = rootItem.getParent().getFullName();

File: core/src/main/java/jenkins/model/DirectlyModifiableTopLevelItemGroup.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * Item group which supports items being directly moved in or out of it.
- * @since TODO
+ * @since 1.548
  */
 public interface DirectlyModifiableTopLevelItemGroup extends ModifiableTopLevelItemGroup {
 

File: test/src/test/java/hudson/tasks/FingerprinterTest.java
Patch:
@@ -47,13 +47,13 @@
 
 import hudson.util.StreamTaskListener;
 import jenkins.model.Jenkins;
-import org.junit.Assume;
 import org.junit.BeforeClass;
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.Bug;
 
 import org.jvnet.hudson.test.JenkinsRule;
+import org.jvnet.hudson.test.RandomlyFails;
 import org.jvnet.hudson.test.recipes.LocalData;
 
 /**
@@ -294,10 +294,10 @@ public static void setUp() throws Exception {
     }
 
     @SuppressWarnings("unchecked")
+    @RandomlyFails("for p3.upstreamProjects expected:<[hudson.model.FreeStyleProject@590e5b8[test0]]> but was:<[]>")
     @Bug(18417)
     @Test
     public void fingerprintCleanup() throws Exception {
-        Assume.assumeFalse("for p3.upstreamProjects expected:<[hudson.model.FreeStyleProject@590e5b8[test0]]> but was:<[]>", System.getenv("JOB_URL") != null);
         // file names shouldn't matter
         FreeStyleProject p1 = createFreeStyleProjectWithFingerprints(singleContents, singleFiles);
         FreeStyleProject p2 = createFreeStyleProjectWithFingerprints(singleContents, singleFiles2);

File: test/src/test/java/hudson/tasks/junit/JUnitResultArchiverTest.java
Patch:
@@ -37,12 +37,12 @@
 import com.gargoylesoftware.htmlunit.html.HtmlForm;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
 import static org.junit.Assert.*;
-import org.junit.Assume;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.JenkinsRule;
 import org.jvnet.hudson.test.JenkinsRule.WebClient;
+import org.jvnet.hudson.test.RandomlyFails;
 
 public class JUnitResultArchiverTest {
 
@@ -75,9 +75,9 @@ public class JUnitResultArchiverTest {
 
 	}
 
+    @RandomlyFails("TimeoutException from basic")
    @LocalData
    @Test public void slave() throws Exception {
-        Assume.assumeFalse("TimeoutException from basic", System.getenv("JOB_URL") != null);
         DumbSlave s = j.createOnlineSlave();
         project.setAssignedLabel(s.getSelfLabel());
 

File: test/src/test/java/hudson/tasks/test/AggregatedTestResultPublisherTest.java
Patch:
@@ -167,7 +167,7 @@ private void createDownstreamProjectWithNoTests() throws Exception {
         addFingerprinterToProject(downstreamProject, singleContents, singleFiles);
 
         upstreamProject.getPublishersList().add(new BuildTrigger(ImmutableList.of(downstreamProject), Result.SUCCESS));
-        upstreamProject.getPublishersList().add(new AggregatedTestResultPublisher(TEST_PROJECT_NAME));
+        upstreamProject.getPublishersList().add(new AggregatedTestResultPublisher(null));
 
         j.jenkins.rebuildDependencyGraph();
     }

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -588,7 +588,7 @@ public void updateByXml(Source source) throws IOException {
                         new StreamResult(out));
                 out.close();
             } catch (TransformerException e) {
-                throw new IOException("Failed to persist configuration.xml", e);
+                throw new IOException("Failed to persist config.xml", e);
             }
 
             // try to reflect the changes by reloading

File: core/src/main/java/hudson/model/Descriptor.java
Patch:
@@ -967,7 +967,7 @@ public String getFormField() {
 
         public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {
             if (FormApply.isApply(req)) {
-                FormApply.applyResponse("notificationBar.show(" + quote(getMessage())+ ",notificationBar.defaultOptions.ERROR)")
+                FormApply.applyResponse("notificationBar.show(" + quote(getMessage())+ ",notificationBar.ERROR)")
                         .generateResponse(req, rsp, node);
             } else {
                 // for now, we can't really use the field name that caused the problem.

File: core/src/main/java/hudson/model/AbstractProject.java
Patch:
@@ -1680,7 +1680,7 @@ void addToList( T item, List<T> collection ) throws IOException {
     public void renameTo(String newName) throws IOException {
         super.renameTo(newName);
         // Update locations inside builds cache
-        builds.updateBaseDir(getBuildDir(), false);
+        builds.updateBaseDir(getBuildDir());
     }
 
     protected final synchronized <T extends Describable<T>>

File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java
Patch:
@@ -214,11 +214,10 @@ public final boolean baseDirInitialized() {
      * Updates base directory location after directory changes.
      * This method should be used on jobs renaming, etc.
      * @param dir Directory location
-     * @param reloadBuilds Purges cache after the directory update
+     * @since 1.546
      */
-    public final void updateBaseDir(File dir, boolean reloadBuilds) {
+    public final void updateBaseDir(File dir) {
         this.dir = dir;
-        purgeCache();
     }
     
     /**
@@ -230,6 +229,7 @@ public final void updateBaseDir(File dir, boolean reloadBuilds) {
      */
     public void purgeCache() {
         index = new Index();
+        fullyLoaded = false;
         loadIdOnDisk();
     }
 

File: core/src/main/java/hudson/model/ItemGroup.java
Patch:
@@ -83,7 +83,6 @@ public interface ItemGroup<T extends Item> extends PersistenceRoot, ModelObject
 
     /**
      * Internal method. Called by {@link Item}s when they are deleted by users.
-     * Should normally call {@link ItemListener#fireOnDeleted} and {@link View#onJobRenamed} (with a null {@code newName}).
      */
     void onDeleted(T item) throws IOException;
 }

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -2434,6 +2434,7 @@ public void onRenamed(TopLevelItem job, String oldName, String newName) throws I
         items.remove(oldName);
         items.put(newName,job);
 
+        // For compatibility with old views:
         for (View v : views)
             v.onJobRenamed(job, oldName, newName);
         save();
@@ -2446,6 +2447,7 @@ public void onDeleted(TopLevelItem item) throws IOException {
         ItemListener.fireOnDeleted(item);
 
         items.remove(item.getName());
+        // For compatibility with old views:
         for (View v : views)
             v.onJobRenamed(item, item.getName(), null);
         save();

File: core/src/main/java/hudson/model/AbstractItem.java
Patch:
@@ -224,6 +224,7 @@ protected void renameTo(String newName) throws IOException {
                             + " already exists");
 
                 String oldName = this.name;
+                String oldFullName = getFullName();
                 File oldRoot = this.getRootDir();
 
                 doSetName(newName);
@@ -294,8 +295,7 @@ protected void renameTo(String newName) throws IOException {
 
                 callOnRenamed(newName, parent, oldName);
 
-                for (ItemListener l : ItemListener.all())
-                    l.onRenamed(this, oldName, newName);
+                ItemListener.fireLocationChange(this, oldFullName);
             }
         }
     }

File: core/src/main/java/hudson/util/xstream/ImmutableListConverter.java
Patch:
@@ -26,12 +26,12 @@
 
 import com.google.common.collect.ImmutableList;
 import com.thoughtworks.xstream.XStream;
+import com.thoughtworks.xstream.XStreamException;
 import com.thoughtworks.xstream.converters.UnmarshallingContext;
 import com.thoughtworks.xstream.converters.collections.CollectionConverter;
 import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
 import com.thoughtworks.xstream.converters.reflection.SerializableConverter;
 import com.thoughtworks.xstream.io.HierarchicalStreamReader;
-import com.thoughtworks.xstream.mapper.CannotResolveClassException;
 import com.thoughtworks.xstream.mapper.Mapper;
 
 import hudson.util.RobustReflectionConverter;
@@ -76,7 +76,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
 	                try {
 	                    Object item = readItem(reader, context, items);
 	                    items.add(item);
-	                } catch (CannotResolveClassException e) {
+	                } catch (XStreamException e) {
 	                    RobustReflectionConverter.addErrorInContext(context, e);
 	                } catch (LinkageError e) {
 	                    RobustReflectionConverter.addErrorInContext(context, e);

File: test/src/test/java/hudson/PluginManagerTest.java
Patch:
@@ -297,8 +297,7 @@ public void testInstallDependingPluginWithoutRestart() throws Exception {
             jenkins.pluginManager.dynamicLoad(dest);
         }
         
-        // (MUST) Not throws an exception
-        // (SHOULD) depender successfully accesses to dependee.
+        // depender successfully accesses to dependee.
         assertEquals("dependee", callDependerValue());
         
         // Extension in depender is loaded.
@@ -340,7 +339,8 @@ public void testInstallDependedPluginWithoutRestart() throws Exception {
             jenkins.pluginManager.dynamicLoad(dest);
         }
         
-        // depender successfully access to dependee.
+        // (MUST) Not throws an exception
+        // (SHOULD) depender successfully accesses to dependee.
         assertEquals("dependee", callDependerValue());
         
         // No extensions exist.

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1826,8 +1826,8 @@ public static String humanReadableByteSize(long size){
      */
     public static String breakableString(final String plain) {
 
-        return plain.replaceAll("(\\p{Punct}+\\w)", "<wbr>$1")
-                .replaceAll("(\\w{10})(?=\\w{3})", "$1<wbr>")
+        return plain.replaceAll("([\\p{Punct}&&[^;]]+\\w)", "<wbr>$1")
+                .replaceAll("([^\\p{Punct}\\s-]{10})(?=[^\\p{Punct}\\s-]{3})", "$1<wbr>")
         ;
     }
 

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -1824,8 +1824,8 @@ public static String humanReadableByteSize(long size){
      */
     public static String breakableString(final String plain) {
 
-        return plain.replaceAll("(\\p{Punct}+\\w)", "<wbr>$1")
-                .replaceAll("(\\w{10})(?=\\w{3})", "$1<wbr>")
+        return plain.replaceAll("([\\p{Punct}&&[^;]]+\\w)", "<wbr>$1")
+                .replaceAll("([^\\p{Punct}\\s-]{10})(?=[^\\p{Punct}\\s-]{3})", "$1<wbr>")
         ;
     }
 

File: core/src/main/java/hudson/matrix/DefaultMatrixExecutionStrategyImpl.java
Patch:
@@ -3,7 +3,6 @@
 import groovy.lang.GroovyRuntimeException;
 import hudson.AbortException;
 import hudson.Extension;
-import hudson.Util;
 import hudson.console.ModelHyperlinkNote;
 import hudson.matrix.MatrixBuild.MatrixBuildExecution;
 import hudson.matrix.listeners.MatrixBuildListener;
@@ -238,7 +237,7 @@ private void scheduleConfigurationBuild(MatrixBuildExecution exec, MatrixConfigu
         exec.getListener().getLogger().println(Messages.MatrixBuild_Triggering(ModelHyperlinkNote.encodeTo(c)));
 
         // filter the parent actions for those that can be passed to the individual jobs.
-        List<MatrixChildAction> childActions = Util.filter(build.getActions(), MatrixChildAction.class);
+        List<MatrixChildAction> childActions = build.getActions(MatrixChildAction.class);
         c.scheduleBuild(childActions, new UpstreamCause((Run)build));
     }
 

File: core/src/main/java/hudson/model/AbstractBuild.java
Patch:
@@ -30,7 +30,6 @@
 import hudson.FilePath;
 import hudson.Functions;
 import hudson.Launcher;
-import hudson.Util;
 import hudson.console.AnnotatedLargeText;
 import hudson.console.ExpandableDetailsNote;
 import hudson.console.ModelHyperlinkNote;
@@ -922,7 +921,7 @@ public EnvVars getEnvironment(TaskListener log) throws IOException, InterruptedE
             for (Environment e : buildEnvironments)
                 e.buildEnvVars(env);
 
-        for (EnvironmentContributingAction a : Util.filter(getActions(),EnvironmentContributingAction.class))
+        for (EnvironmentContributingAction a : getActions(EnvironmentContributingAction.class))
             a.buildEnvVars(this,env);
 
         EnvVars.resolve(env);

File: core/src/main/java/hudson/model/Computer.java
Patch:
@@ -189,7 +189,7 @@ public List<Action> getActions() {
     		}
     		result.addAll(transientActions);
     	}
-    	return result;
+    	return Collections.unmodifiableList(result);
     }
 
     @Override

File: core/src/main/java/hudson/model/TransientBuildActionFactory.java
Patch:
@@ -6,6 +6,7 @@
 import jenkins.model.Jenkins;
 import java.util.Collection;
 import java.util.Collections;
+import jenkins.model.TransientActionFactory;
 
 /**
  * Extension point for inserting transient {@link Action}s into {@link Run}s.
@@ -15,8 +16,9 @@
  * @author Lucie Votypkova
  * @since 1.458
  * @see Action
+ * @deprecated Does not contribute to {@link Run#getActions}. Use {@link TransientActionFactory} instead.
  */
-
+@Deprecated
 public abstract class TransientBuildActionFactory implements ExtensionPoint {
     /**
      * Creates actions for the given build.

File: core/src/main/java/hudson/model/TransientComputerActionFactory.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import jenkins.model.TransientActionFactory;
 
 /**
  * Extension point for inserting transient {@link hudson.model.Action}s to {@link hudson.model.Computer}s.
@@ -39,6 +40,7 @@
  * @author Stephen Connolly
  * @since 1.405
  * @see hudson.model.Action
+ * @see TransientActionFactory
  */
 public abstract class TransientComputerActionFactory implements ExtensionPoint {
     /**

File: core/src/main/java/hudson/model/TransientProjectActionFactory.java
Patch:
@@ -30,6 +30,7 @@
 import jenkins.model.Jenkins;
 
 import java.util.Collection;
+import jenkins.model.TransientActionFactory;
 
 /**
  * Extension point for inserting transient {@link Action}s into {@link AbstractProject}s.
@@ -50,6 +51,7 @@
  * @author Kohsuke Kawaguchi
  * @since 1.327
  * @see Action
+ * @see TransientActionFactory
  */
 public abstract class TransientProjectActionFactory implements ExtensionPoint {
     /**

File: core/src/main/java/hudson/model/queue/WorkUnitContext.java
Patch:
@@ -67,7 +67,7 @@ public WorkUnitContext(BuildableItem item) {
         this.item = item;
         this.task = item.task;
         this.future = (FutureImpl)item.getFuture();
-        this.actions = item.getActions();
+        this.actions = new ArrayList<Action>(item.getAllActions());
         
         // +1 for the main task
         int workUnitSize = Tasks.getSubTasksOf(task).size();

File: core/src/main/java/jenkins/model/ModelObjectWithContextMenu.java
Patch:
@@ -214,7 +214,7 @@ public void run(JellyContext context, XMLOutput output) throws JellyTagException
             } else
             if (self instanceof Actionable) {
                 // fallback
-                this.addAll(((Actionable)self).getActions());
+                this.addAll(((Actionable)self).getAllActions());
             }
     
             return this;

File: core/src/main/java/hudson/model/ItemGroupMixIn.java
Patch:
@@ -40,6 +40,8 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * Defines a bunch of static methods to be used as a "mix-in" for {@link ItemGroup}
@@ -99,7 +101,7 @@ public boolean accept(File child) {
                 V item = (V) Items.load(parent,subdir);
                 configurations.put(key.call(item), item);
             } catch (IOException e) {
-                e.printStackTrace(); // TODO: logging
+                Logger.getLogger(ItemGroupMixIn.class.getName()).log(Level.WARNING, "could not load " + subdir, e);
             }
         }
 

File: test/src/main/java/org/jvnet/hudson/test/MockFolder.java
Patch:
@@ -94,6 +94,9 @@ public String call(TopLevelItem item) {
     }
 
     @Override public TopLevelItem getItem(String name) {
+        if (items == null) {
+            return null; // cf. parent hack in AbstractProject.onLoad
+        }
         return items.get(name);
     }
 

File: core/src/main/java/hudson/tasks/junit/JUnitResultArchiver.java
Patch:
@@ -133,6 +133,7 @@ public boolean perform(AbstractBuild build, Launcher launcher,
 			TestResult result = parse(testResults, build, launcher, listener);
 
 			try {
+                // TODO can the build argument be omitted now, or is it used prior to the call to addAction?
 				action = new TestResultAction(build, result, listener);
 			} catch (NullPointerException npe) {
 				throw new AbortException(Messages.JUnitResultArchiver_BadXML(testResults));
@@ -173,7 +174,7 @@ public boolean perform(AbstractBuild build, Launcher launcher,
 			return true;
 		}
 
-		build.getActions().add(action);
+		build.addAction(action);
 		CHECKPOINT.report();
 
 		if (action.getResult().getFailCount() > 0)

File: core/src/main/java/hudson/tasks/test/TestResultAggregator.java
Patch:
@@ -46,7 +46,7 @@ public TestResultAggregator(MatrixBuild build, Launcher launcher, BuildListener
 
     @Override
     public boolean startBuild() throws InterruptedException, IOException {
-        result = new MatrixTestResult(build);
+        result = new MatrixTestResult();
         build.addAction(result);
         return true;
     }

File: test/src/test/java/hudson/tasks/test/TrivialTestResultRecorder.java
Patch:
@@ -48,9 +48,9 @@ public boolean perform(AbstractBuild<?, ?> build,
         System.out.println("performing TrviialTestResultRecorder");
         listener.getLogger().println("perfoming TrivialTestResultRecorder");
         TrivialTestResult r = new TrivialTestResult("gubernatorial");
-        TrivialTestResultAction action = new TrivialTestResultAction(build, r);
+        TrivialTestResultAction action = new TrivialTestResultAction(r);
         r.setParentAction(action);
-        build.getActions().add(action);
+        build.addAction(action);
         listener.getLogger().println("done with TrivialTestResultRecorder");
         System.out.println("done with TrivialTestResultRecorder");
         return true;

File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java
Patch:
@@ -33,7 +33,6 @@
 import java.io.File;
 import java.io.FilenameFilter;
 import java.io.IOException;
-import java.lang.ref.Reference;
 import java.util.AbstractMap;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -577,7 +576,7 @@ public synchronized R put(Integer key, R r) {
         return unwrap(old);
     }
 
-    private R unwrap(Reference<R> ref) {
+    private R unwrap(BuildReference<R> ref) {
         return ref!=null ? ref.get() : null;
     }
 

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -150,6 +150,7 @@
 
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
+import hudson.util.RunList;
 import java.util.concurrent.atomic.AtomicLong;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
@@ -1431,7 +1432,8 @@ public static String runScript(Script script) throws JellyTagException {
     }
 
     /**
-     * Returns a sub-list if the given list is bigger than the specified 'maxSize'
+     * Returns a sub-list if the given list is bigger than the specified {@code maxSize}.
+     * <strong>Warning:</strong> do not call this with a {@link RunList}, or you will break lazy loading!
      */
     public static <T> List<T> subList(List<T> base, int maxSize) {
         if(maxSize<base.size())

File: core/src/main/java/hudson/model/BuildTimelineWidget.java
Patch:
@@ -45,13 +45,15 @@ public class BuildTimelineWidget {
     protected final RunList<?> builds;
 
     public BuildTimelineWidget(RunList<?> builds) {
-        this.builds = builds;
+        this.builds = builds.limit(20); // TODO instead render lazily
     }
 
+    @Deprecated
     public Run<?, ?> getFirstBuild() {
         return builds.getFirstBuild();
     }
 
+    @Deprecated
     public Run<?, ?> getLastBuild() {
         return builds.getLastBuild();
     }

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -1269,7 +1269,7 @@ public String toString() {
                 }
 
                 DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();
-                for (Run r : getBuilds()) {
+                for (Run r : getNewBuilds()) {
                     if (r.isBuilding())
                         continue;
                     data.add(((double) r.getDuration()) / (1000 * 60), "min",

File: core/src/main/java/hudson/util/RunList.java
Patch:
@@ -186,9 +186,10 @@ RunList<R> fromRuns(Collection<? extends R> runs) {
 
     /**
      * Returns elements that satisfy the given predicate.
+     * <em>Warning:</em> this method mutates the original list and then returns it.
+     * @since TODO
      */
-    // for compatibility reasons, this method doesn't create a new list but updates the current one
-    private RunList<R> filter(Predicate<R> predicate) {
+    public RunList<R> filter(Predicate<R> predicate) {
         size = null;
         first = null;
         base = Iterables.filter(base,predicate);

File: test/src/main/java/org/jvnet/hudson/test/FakeLauncher.java
Patch:
@@ -12,7 +12,6 @@
  *
  * @author Kohsuke Kawaguchi
  * @see PretendSlave
- * @see MockFakeLauncher
  */
 public interface FakeLauncher {
     /**

File: test/src/main/java/org/jvnet/hudson/test/package-info.java
Patch:
@@ -22,6 +22,6 @@
  * THE SOFTWARE.
  */
 /**
- * Test harness for Jenkins and its plugins. Start exploring from {@link JenkinsRule}.
+ * Test harness for Jenkins and its plugins. Start exploring from {@link org.jvnet.hudson.test.JenkinsRule}.
  */
-package org.jvnet.hudson.test;
\ No newline at end of file
+package org.jvnet.hudson.test;

File: core/src/main/java/hudson/Functions.java
Patch:
@@ -150,6 +150,7 @@
 
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
+import hudson.util.RunList;
 import java.util.concurrent.atomic.AtomicLong;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
@@ -1431,7 +1432,8 @@ public static String runScript(Script script) throws JellyTagException {
     }
 
     /**
-     * Returns a sub-list if the given list is bigger than the specified 'maxSize'
+     * Returns a sub-list if the given list is bigger than the specified {@code maxSize}.
+     * <strong>Warning:</strong> do not call this with a {@link RunList}, or you will break lazy loading!
      */
     public static <T> List<T> subList(List<T> base, int maxSize) {
         if(maxSize<base.size())

File: core/src/main/java/hudson/model/BuildTimelineWidget.java
Patch:
@@ -45,13 +45,15 @@ public class BuildTimelineWidget {
     protected final RunList<?> builds;
 
     public BuildTimelineWidget(RunList<?> builds) {
-        this.builds = builds;
+        this.builds = builds.limit(20); // TODO instead render lazily
     }
 
+    @Deprecated
     public Run<?, ?> getFirstBuild() {
         return builds.getFirstBuild();
     }
 
+    @Deprecated
     public Run<?, ?> getLastBuild() {
         return builds.getLastBuild();
     }

File: core/src/main/java/hudson/model/Job.java
Patch:
@@ -1269,7 +1269,7 @@ public String toString() {
                 }
 
                 DataSetBuilder<String, ChartLabel> data = new DataSetBuilder<String, ChartLabel>();
-                for (Run r : getBuilds()) {
+                for (Run r : getNewBuilds()) {
                     if (r.isBuilding())
                         continue;
                     data.add(((double) r.getDuration()) / (1000 * 60), "min",

File: core/src/main/java/hudson/util/RunList.java
Patch:
@@ -186,9 +186,10 @@ RunList<R> fromRuns(Collection<? extends R> runs) {
 
     /**
      * Returns elements that satisfy the given predicate.
+     * <em>Warning:</em> this method mutates the original list and then returns it.
+     * @since TODO
      */
-    // for compatibility reasons, this method doesn't create a new list but updates the current one
-    private RunList<R> filter(Predicate<R> predicate) {
+    public RunList<R> filter(Predicate<R> predicate) {
         size = null;
         first = null;
         base = Iterables.filter(base,predicate);

File: core/src/main/java/hudson/cli/CLICommand.java
Patch:
@@ -189,6 +189,8 @@ public String getName() {
      * The default implementation uses args4j to parse command line arguments and call {@link #run()},
      * but if that processing is undesirable, subtypes can directly override this method and leave {@link #run()}
      * to an empty method.
+     * You would however then have to consider {@link CliAuthenticator} and {@link #getTransportAuthentication},
+     * so this is not really recommended.
      * 
      * @param args
      *      Arguments to the sub command. For example, if the CLI is invoked like "java -jar cli.jar foo bar zot",

File: test/src/main/java/hudson/cli/CLICommandInvoker.java
Patch:
@@ -26,13 +26,13 @@
 
 import hudson.Extension;
 import hudson.model.User;
+import hudson.security.ACL;
 import hudson.security.Permission;
 import hudson.security.GlobalMatrixAuthorizationStrategy;
 
 import java.io.ByteArrayOutputStream;
 import java.io.InputStream;
 import java.io.PrintStream;
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
@@ -129,6 +129,8 @@ private void setAuth() {
         rule.jenkins.setAuthorizationStrategy(auth);
 
         command.setTransportAuth(user().impersonate());
+        // Otherwise it is SYSTEM, which would be relevant for a command overriding main:
+        ACL.impersonate(Jenkins.ANONYMOUS);
     }
 
     public User user() {

File: core/src/main/java/hudson/tasks/junit/History.java
Patch:
@@ -228,8 +228,8 @@ public String generateToolTip(CategoryDataset dataset, int row,
                 }
             };
             plot.setRenderer(ar);
-            ar.setSeriesPaint(0,ColorPalette.RED); // Failures.
-            ar.setSeriesPaint(1,ColorPalette.YELLOW); // Skips.
+            ar.setSeriesPaint(0,ColorPalette.YELLOW); // Skips.
+            ar.setSeriesPaint(1,ColorPalette.RED); // Failures.
             ar.setSeriesPaint(2,ColorPalette.BLUE); // Total.
 
             // crop extra space around the graph

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3668,6 +3668,7 @@ public Object getTarget() {
             || rest.startsWith("/logout")
             || rest.startsWith("/accessDenied")
             || rest.startsWith("/adjuncts/")
+            || rest.startsWith("/error")
             || rest.startsWith("/oops")
             || rest.startsWith("/signup")
             || rest.startsWith("/tcpSlaveAgentListener")

File: core/src/main/java/hudson/util/RingBufferLogHandler.java
Patch:
@@ -51,7 +51,7 @@ public synchronized void publish(LogRecord record) {
         int len = records.length;
         records[(start+size)%len]=record;
         if(size==len) {
-            start++;
+            start = (start+1)%len;
         } else {
             size++;
         }

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -55,6 +55,7 @@
 import hudson.util.FlushProofOutputStream;
 import hudson.util.FormApply;
 import hudson.util.LogTaskListener;
+import hudson.util.ProcessTree;
 import hudson.util.XStream2;
 
 import java.io.BufferedReader;
@@ -1252,7 +1253,7 @@ public class Artifact {
 
         /**
          * Gets the artifact file.
-         * @deprecated May not be meaningful with custom artifact managers. Use {@link ArtifactManager#load} with {@link #relativePath} instead.
+         * @deprecated May not be meaningful with custom artifact managers.
          */
         @Deprecated
         public File getFile() {

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -55,6 +55,7 @@
 import hudson.util.FlushProofOutputStream;
 import hudson.util.FormApply;
 import hudson.util.LogTaskListener;
+import hudson.util.ProcessTree;
 import hudson.util.XStream2;
 
 import java.io.BufferedReader;
@@ -1252,7 +1253,7 @@ public class Artifact {
 
         /**
          * Gets the artifact file.
-         * @deprecated May not be meaningful with custom artifact managers. Use {@link ArtifactManager#load} with {@link #relativePath} instead.
+         * @deprecated May not be meaningful with custom artifact managers.
          */
         @Deprecated
         public File getFile() {

File: core/src/main/java/hudson/util/jna/Kernel32Utils.java
Patch:
@@ -100,7 +100,7 @@ public static boolean isJunctionOrSymlink(File file) throws IOException {
 
     public static File getTempDir() {
         Memory buf = new Memory(1024);
-        if (Kernel32.INSTANCE.GetTempPathW(1024,buf)!=0) {
+        if (Kernel32.INSTANCE.GetTempPathW(512,buf)!=0) {// the first arg is number of wchar
             return new File(buf.getString(0, true));
         } else {
             return null;

File: core/src/main/java/hudson/cli/CopyJobCommand.java
Patch:
@@ -75,7 +75,7 @@ protected int run() throws Exception {
             dst = dst.substring(i + 1);
         }
 
-        ig.copy(src,dst);
+        ig.copy(src,dst).save();
         return 0;
     }
 }

File: core/src/main/java/hudson/cli/CopyJobCommand.java
Patch:
@@ -75,7 +75,7 @@ protected int run() throws Exception {
             dst = dst.substring(i + 1);
         }
 
-        ig.copy(src,dst);
+        ig.copy(src,dst).save();
         return 0;
     }
 }

File: core/src/main/java/hudson/util/PersistedList.java
Patch:
@@ -174,13 +174,13 @@ protected void onModified() throws IOException {
     }
 
     /**
-     * Version of {@link #_onModified()} that swallows an exception for compliance with {@link List}.
+     * Version of {@link #onModified()} that throws an unchecked exception for compliance with {@link List}.
      */
     private void _onModified() {
         try {
             onModified();
         } catch (IOException e) {
-            throw new Error(e);
+            throw new RuntimeException(e);
         }
     }
 

File: core/src/main/java/hudson/matrix/Combination.java
Patch:
@@ -25,7 +25,6 @@
 
 import groovy.lang.Binding;
 import hudson.Util;
-import hudson.matrix.MatrixBuild.MatrixBuildExecution;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -96,7 +95,7 @@ public boolean evalGroovyExpression(AxisList axes, String expression) {
      * @see #evalGroovyExpression(AxisList, String)
      * @since 1.515
      * @deprecated as of 1.528
-     *      Use {@link FilterScript#apply(MatrixBuildExecution, Combination)}
+     *      Use {@link FilterScript#apply(hudson.matrix.MatrixBuild.MatrixBuildExecution, Combination)}
      */
     public boolean evalGroovyExpression(AxisList axes, String expression, Binding binding) {
         return FilterScript.parse(expression).apply(axes, this, binding);

File: core/src/main/java/hudson/util/IncompatibleServletVersionDetected.java
Patch:
@@ -37,7 +37,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-public class IncompatibleServletVersionDetected extends ErrorObject {
+public class IncompatibleServletVersionDetected extends BootFailure {
     private final Class servletClass;
 
     public IncompatibleServletVersionDetected(Class servletClass) {

File: core/src/main/java/hudson/util/IncompatibleVMDetected.java
Patch:
@@ -34,8 +34,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-public class IncompatibleVMDetected extends ErrorObject {
-
+public class IncompatibleVMDetected extends BootFailure {
     public Map getSystemProperties() {
         return System.getProperties();
     }

File: core/src/main/java/hudson/util/NoHomeDir.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-public class NoHomeDir extends ErrorObject {
+public class NoHomeDir extends BootFailure {
     public final File home;
 
     public NoHomeDir(File home) {

File: core/src/main/java/jenkins/model/Jenkins.java
Patch:
@@ -3086,7 +3086,7 @@ public void run() {
                     reload();
                 } catch (Exception e) {
                     LOGGER.log(SEVERE,"Failed to reload Jenkins config",e);
-                    WebApp.get(servletContext).setApp(new JenkinsReloadFailed(e));
+                    new JenkinsReloadFailed(e).publish(servletContext);
                 }
             }
         }.start();

File: core/src/main/java/hudson/matrix/Combination.java
Patch:
@@ -25,7 +25,6 @@
 
 import groovy.lang.Binding;
 import hudson.Util;
-import hudson.matrix.MatrixBuild.MatrixBuildExecution;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -96,7 +95,7 @@ public boolean evalGroovyExpression(AxisList axes, String expression) {
      * @see #evalGroovyExpression(AxisList, String)
      * @since 1.515
      * @deprecated as of 1.528
-     *      Use {@link FilterScript#apply(MatrixBuildExecution, Combination)}
+     *      Use {@link FilterScript#apply(hudson.matrix.MatrixBuild.MatrixBuildExecution, Combination)}
      */
     public boolean evalGroovyExpression(AxisList axes, String expression, Binding binding) {
         return FilterScript.parse(expression).apply(axes, this, binding);

File: core/src/main/java/hudson/matrix/DefaultMatrixExecutionStrategyImpl.java
Patch:
@@ -174,8 +174,8 @@ private void filterConfigurations(
 
         final MatrixBuild build = execution.getBuild();
 
-        final FilterScript combinationFilter = FilterScript.parse(execution.getProject().getCombinationFilter());
-        final FilterScript touchStoneFilter = FilterScript.parse(getTouchStoneCombinationFilter());
+        final FilterScript combinationFilter = FilterScript.parse(execution.getProject().getCombinationFilter(), FilterScript.ACCEPT_ALL);
+        final FilterScript touchStoneFilter = FilterScript.parse(getTouchStoneCombinationFilter(), FilterScript.REJECT_ALL);
 
         try {
 

File: core/src/main/java/hudson/cli/CLICommand.java
Patch:
@@ -249,7 +249,7 @@ public int main(List<String> args, Locale locale, InputStream stdin, PrintStream
     /**
      * Get parser for this command.
      *
-     * Exposed to be overridden by {@link CLIRegisterer}.
+     * Exposed to be overridden by {@link hudson.cli.declarative.CLIRegisterer}.
      * @since TODO
      */
     protected CmdLineParser getCmdLineParser() {

File: core/src/main/java/hudson/cli/handlers/ViewOptionHandler.java
Patch:
@@ -53,7 +53,7 @@
  * Handler traverse the view names from left to right. First one is expected to
  * be a top level view and all but the last one are expected to be instances of
  * {@link ViewGroup}. Handler fails to resolve view provided a view with given
- * name does not exist or a user was not granted {@link View.READ} permission.
+ * name does not exist or a user was not granted {@link View#READ} permission.
  *
  * @author ogondza
  * @since 1.538

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2169,7 +2169,7 @@ public EnvVars getEnvironment() throws IOException, InterruptedException {
      * processes for this build.
      *
      * <p>
-     * {@link BuildStep}s that invoke external processes should use this.
+     * {@link hudson.tasks.BuildStep}s that invoke external processes should use this.
      * This allows {@link BuildWrapper}s and other project configurations (such as JDK selection)
      * to take effect.
      *

File: core/src/main/java/hudson/cli/CLICommand.java
Patch:
@@ -249,7 +249,7 @@ public int main(List<String> args, Locale locale, InputStream stdin, PrintStream
     /**
      * Get parser for this command.
      *
-     * Exposed to be overridden by {@link CLIRegisterer}.
+     * Exposed to be overridden by {@link hudson.cli.declarative.CLIRegisterer}.
      * @since TODO
      */
     protected CmdLineParser getCmdLineParser() {

File: core/src/main/java/hudson/cli/handlers/ViewOptionHandler.java
Patch:
@@ -53,7 +53,7 @@
  * Handler traverse the view names from left to right. First one is expected to
  * be a top level view and all but the last one are expected to be instances of
  * {@link ViewGroup}. Handler fails to resolve view provided a view with given
- * name does not exist or a user was not granted {@link View.READ} permission.
+ * name does not exist or a user was not granted {@link View#READ} permission.
  *
  * @author ogondza
  * @since 1.538

File: core/src/main/java/hudson/model/Run.java
Patch:
@@ -2169,7 +2169,7 @@ public EnvVars getEnvironment() throws IOException, InterruptedException {
      * processes for this build.
      *
      * <p>
-     * {@link BuildStep}s that invoke external processes should use this.
+     * {@link hudson.tasks.BuildStep}s that invoke external processes should use this.
      * This allows {@link BuildWrapper}s and other project configurations (such as JDK selection)
      * to take effect.
      *

File: core/src/main/java/hudson/matrix/DefaultMatrixExecutionStrategyImpl.java
Patch:
@@ -174,8 +174,8 @@ private void filterConfigurations(
 
         final MatrixBuild build = execution.getBuild();
 
-        final FilterScript combinationFilter = FilterScript.parse(execution.getProject().getCombinationFilter());
-        final FilterScript touchStoneFilter = FilterScript.parse(getTouchStoneCombinationFilter());
+        final FilterScript combinationFilter = FilterScript.parse(execution.getProject().getCombinationFilter(), FilterScript.ACCEPT_ALL);
+        final FilterScript touchStoneFilter = FilterScript.parse(getTouchStoneCombinationFilter(), FilterScript.REJECT_ALL);
 
         try {
 

File: test/src/test/java/hudson/model/labels/LabelExpressionTest.java
Patch:
@@ -233,11 +233,11 @@ public Object call() throws Exception {
 
                 Label l = jenkins.getLabel("foo");
                 DumbSlave s = createSlave(l);
-                String msg = d.doCheckAssignedLabelString("goo").renderHtml();
+                String msg = d.doCheckAssignedLabelString(null, "goo").renderHtml();
                 assertTrue(msg.contains("foo"));
                 assertTrue(msg.contains("goo"));
 
-                msg = d.doCheckAssignedLabelString("master && goo").renderHtml();
+                msg = d.doCheckAssignedLabelString(null, "master && goo").renderHtml();
                 assertTrue(msg.contains("foo"));
                 assertTrue(msg.contains("goo"));
                 return null;

